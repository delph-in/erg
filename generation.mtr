;;; Hey, emacs(1), this is -*- Mode: TDL; Coding: utf-8; -*- got it?

;; Enable the following block to generate passives from MRSs that do not
;; provide parg_d_rel

#|
;; DPF 27-feb-10 - As a first experiment in using fixup rules before
;; generating, we add the information structure EP for passives, in case
;; it is missing from the input MRS for a verb missing its ARG1, as can 
;; happen with paraphrasing.

;; FIX 
;; These rules for passives are currently duplicated, since I don't
;; yet see how to require the presence of a particular argument
;; without also declaring its exact type, which here can be either of
;; type `individual' if coming from a paraphrased DMRS, or a `ref-ind'
;; if coming from an ERG-parsed sentence.

;; To prevent passives where ARG1 is present, temporarily add parg_d_rel
;; with its ARG2 value of type `semarg', then later delete.
;;
no_passive_arg1i_gpr := monotonic_mtr &
[ INPUT.RELS <! [ PRED "~_v_",
		  LBL #lbl,
		  ARG0 #e1,
		  ARG1 #i2 & individual ] !>,
  OUTPUT.RELS <! +copy+,
	        [ PRED parg_d_rel,
		  LBL #lbl,
		  ARG0 #i3,
		  ARG1 #e1,
		  ARG2 #x4 & semarg ] !>,
  FILTER.RELS <! [ PRED parg_d_rel,
		   LBL #lbl,
		   ARG0 #i3 ] !>,
  FLAGS.EQUAL < #lbl, #i2, #i3, #x4 > ].

no_passive_arg1x_gpr := monotonic_mtr &
[ INPUT.RELS <! [ PRED "~_v_",
		  LBL #lbl,
		  ARG0 #e1,
		  ARG1 #i2 & ref-ind ] !>,
  OUTPUT.RELS <! +copy+,
	        [ PRED parg_d_rel,
		  LBL #lbl,
		  ARG0 #i3,
		  ARG1 #e1,
		  ARG2 #x4 & semarg ] !>,
  FILTER.RELS <! [ PRED parg_d_rel,
		   LBL #lbl,
		   ARG0 #i3 ] !>,
  FLAGS.EQUAL < #lbl, #i2, #i3, #x4 > ].

;; Passive of ditransitive's ARG3 role, underspecified as `individual'
;;
passive_arg3i_gpr := monotonic_mtr &
[ INPUT.RELS <! [ PRED "~_v_",
		  LBL #lbl,
		  ARG0 #e1,
		  ARG3 #i2 & individual ] !>,
  OUTPUT.RELS <! +copy+,
	        [ PRED parg_d_rel,
		  LBL #lbl,
		  ARG0 #i3,
		  ARG1 #e1,
		  ARG2 #i2 ] !>,
  FILTER.RELS <! [ PRED parg_d_rel,
		   LBL #lbl,
		   ARG0 #i3 ]!>,
  FLAGS.EQUAL < #lbl, #i2, #i3 > ].

;; Passive of transitive verbs's ARG2 role, underspecified as `individual'
;;
passive_arg2i_gpr := monotonic_mtr &
[ INPUT.RELS <! [ PRED "~_v_",
		  LBL #lbl,
		  ARG0 #e1,
		  ARG2 #i2 & individual ] !>,
  OUTPUT.RELS <! +copy+,
	        [ PRED parg_d_rel,
		  LBL #lbl,
		  ARG0 #i3,
		  ARG1 #e1,
		  ARG2 #i2 ] !>,
  FILTER.RELS <! [ PRED parg_d_rel,
		   LBL #lbl,
		   ARG0 #i3 ] !>,
  FLAGS.EQUAL < #lbl, #i2, #i3 > ].

;; Passive of ditransitive's ARG3 role, with type `ref-ind'
;;
passive_arg3x_gpr := monotonic_mtr &
[ INPUT.RELS <! [ PRED "~_v_",
		  LBL #lbl,
		  ARG0 #e1,
		  ARG1 #p1 & non_event,
		  ARG3 #i2 & ref-ind ] !>,
  OUTPUT.RELS <! +copy+,
	        [ PRED parg_d_rel,
		  LBL #lbl,
		  ARG0 #i3,
		  ARG1 #e1,
		  ARG2 #i2 ] !>,
  FILTER.RELS <! [ PRED parg_d_rel,
		   LBL #lbl,
		   ARG0 #i3 ]!>,
  FLAGS.EQUAL < #lbl, #i2, #i3, #p1 > ].

;; Passive of transitive's ARG2 role, with type `ref-ind'
;;
passive_arg2x_gpr := monotonic_mtr &
[ INPUT.RELS <! [ PRED "~_v_",
		  LBL #lbl,
		  ARG0 #e1,
		  ARG1 #p1 & non_event,
		  ARG2 #i2 & ref-ind ] !>,
  OUTPUT.RELS <! +copy+,
	        [ PRED parg_d_rel,
		  LBL #lbl,
		  ARG0 #i3,
		  ARG1 #e1,
		  ARG2 #i2 ] !>,
  FILTER.RELS <! [ PRED parg_d_rel,
		   LBL #lbl,
		   ARG0 #i3 ]!>,
  FLAGS.EQUAL < #lbl, #i2, #i3, #p1 > ].

;; Now delete the blocked passives for verbs with ARG1s present
;;
delete_no_passive_gpr := monotonic_mtr &
[ INPUT.RELS <! [ PRED parg_d_rel,
		  ARG2 #i2 & semarg ] !>,
  OUTPUT.RELS <! !>,
  FLAGS.EQUAL < #i2 > ].
|#