;; Block for scientific writing
number_n3 := never_unify_le & [ ORTH < "_never_unify_" > ].
large_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
fig_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
th_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
th_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
fs_np1 := never_unify_le & [ ORTH < "_never_unify_" > ].
then_conj_1 := never_unify_le & [ ORTH < "_never_unify_" > ].

;; DPF 2016-02-29 - Added RPERIPH + to block |_MATH_ distinct| as n-j cmpd
math_xml_pn_sg := n_-_pn-sg_le &
 [ ORTH < "_MATH_" >,
   SYNSEM [ LKEYS.KEYREL.CARG "math-xml",
            LOCAL.CAT.HEAD [ MINORS.NORM norm_rel,
	                     --BARE - ],
	    MODIFD [ LPERIPH +,
	             RPERIPH + ],
            PHON.ONSET con ] ].

math_xml_pn_pl := n_-_pn-pl_le &
 [ ORTH < "_MATH_" >,
   SYNSEM [ LKEYS.KEYREL.CARG "math-xml",
            LOCAL.CAT.HEAD.MINORS.NORM no_rel,
	    MODIFD.LPERIPH +,
            PHON.ONSET con ] ].

math_xml_pn_pl2 := n_-_pn-pl_le &
 [ ORTH < "_MATH_s" >,
   SYNSEM [ LKEYS.KEYREL.CARG "math-xml",
            LOCAL.CAT.HEAD.MINORS.NORM no_rel,
	    MODIFD.LPERIPH +,
            PHON.ONSET con ] ].

math_xml_pn_pl3 := n_-_pn-pl_le &
 [ ORTH < "_MATH_", "'s" >,
   SYNSEM [ LKEYS.KEYREL.CARG "math-xml",
            LOCAL.CAT.HEAD.MINORS.NORM no_rel,
	    MODIFD.LPERIPH +,
            PHON.ONSET con ] ].

#|
;; Useful to permit e.g. |3-step _MATH_|, but too much ambiguity as in 
;; |the identities _MATH_|.
math_xml_n1 := n_-_c-sg_le &
 [ ORTH < "_MATH_" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_math-xml_n_1_rel",
            LOCAL.CAT.HEAD [ --BARE -,
			     MINORS [ MIN norm_nom_rel,
				      NORM norm_rel ] ],
            PHON.ONSET con ] ].
|#

math_xml_cp_1 := x_-_generic-cp_le &
 [ ORTH < "_MATH_" >,
   SYNSEM.PHON.ONSET con ].

math_xml_crd_1 := aj_-_i-crd-thr_le &
  [ ORTH < "_MATH_" >,
    SYNSEM [ LKEYS.KEYREL.CARG "_MATH_",
	     LOCAL.CAT.HEAD [ MOD < expressed_synsem &
	                  	    [ LOCAL.CONT.HOOK.INDEX ref-ind ] >,
			      CASE no_case ],
             PHON.ONSET con ] ].

fifth := aj_-_i-ord-one_le &
 [ ORTH < "fifth" >,
   SYNSEM [ LKEYS.KEYREL.CARG "5",
            PHON.ONSET con ] ].

math_th_xml_1_rbst := aj_-_i-ord-one_le &
  [ ORTH < "_MATH_-", "th" >,
    SYNSEM [ LKEYS.KEYREL.CARG "_MATH_-th",
             PHON.ONSET con ],
    GENRE robust ].

math_th_xml_2_rbst := aj_-_i-ord-one_le &
  [ ORTH < "_MATH_-th" >,
    SYNSEM [ LKEYS.KEYREL.CARG "_MATH_-th",
             PHON.ONSET con ],
    GENRE robust ].

mathdisp_xml_pn_sg := n_-_pn-sg_le &
 [ ORTH < "_MATHDISP_" >,
   SYNSEM [ LKEYS.KEYREL.CARG "mathdisp-xml",
            LOCAL.CAT.HEAD [ MINORS.NORM norm_rel,
	                     --BARE - ],
	    MODIFD.LPERIPH +,
            PHON.ONSET con ] ].

mathdisp_xml_pn_pl := n_-_pn-pl_le &
 [ ORTH < "_MATHDISP_" >,
   SYNSEM [ LKEYS.KEYREL.CARG "mathdisp-xml",
            LOCAL.CAT.HEAD.MINORS.NORM no_rel,
	    MODIFD.LPERIPH +,
            PHON.ONSET con ] ].

mathdisp_xml_cp_1 := x_-_generic-cp_le &
 [ ORTH < "_MATHDISP_" >,
   SYNSEM.PHON.ONSET con ].

math_cdm_xml_pn := n_-_pn_le &
 [ ORTH < "_MATH_CDM" >,
   SYNSEM [ LKEYS.KEYREL.CARG "math_cdm-xml",
            LOCAL.CAT.HEAD.MINORS.NORM norm_rel,
	    MODIFD.LPERIPH +,
            PHON.ONSET con ] ].

cite_xml_pn_sg := n_-_pn-sg_le &
 [ ORTH < "_CITE_" >,
   SYNSEM [ LKEYS.KEYREL.CARG "cite-xml",
            LOCAL.CAT.HEAD.MINORS.NORM norm_rel,
	    MODIFD.LPERIPH +,
            PHON.ONSET con ] ].

cite_xml_pn_pl := n_-_pn-pl_le &
 [ ORTH < "_CITE_" >,
   SYNSEM [ LKEYS.KEYREL.CARG "cite-xml",
            LOCAL.CAT.HEAD.MINORS.NORM no_rel,
	    MODIFD.LPERIPH +,
            PHON.ONSET con ] ].

ref_xml_pn := n_-_pn_le &
 [ ORTH < "_REF_" >,
   SYNSEM [ LKEYS.KEYREL.CARG "ref-xml",
            LOCAL.CAT.HEAD.MINORS.NORM norm_rel,
	    MODIFD.LPERIPH +,
            PHON.ONSET con ] ].

ref_xml_pn2 := n_-_pn_le &
 [ ORTH < "(_REF_)" >,
   SYNSEM [ LKEYS.KEYREL.CARG "ref-xml",
            LOCAL.CAT.HEAD.MINORS.NORM norm_rel,
	    MODIFD.LPERIPH +,
            PHON.ONSET con ] ].

refa_xml_pn := n_-_pn_le &
 [ ORTH < "(_REF_)a" >,
   SYNSEM [ LKEYS.KEYREL.CARG "refa-xml",
            LOCAL.CAT.HEAD.MINORS.NORM norm_rel,
	    MODIFD.LPERIPH +,
            PHON.ONSET con ] ].

refa_xml_pn2 := n_-_pn_le &
 [ ORTH < "_REF_(a)" >,
   SYNSEM [ LKEYS.KEYREL.CARG "refa-xml",
            LOCAL.CAT.HEAD.MINORS.NORM norm_rel,
	    MODIFD.LPERIPH +,
            PHON.ONSET con ] ].

refa_xml_pn3 := n_-_pn_le &
 [ ORTH < "_REF_.a" >,
   SYNSEM [ LKEYS.KEYREL.CARG "refa-xml",
            LOCAL.CAT.HEAD.MINORS.NORM norm_rel,
	    MODIFD.LPERIPH +,
            PHON.ONSET con ] ].

refb_xml_pn := n_-_pn_le &
 [ ORTH < "(_REF_)b" >,
   SYNSEM [ LKEYS.KEYREL.CARG "refb-xml",
            LOCAL.CAT.HEAD.MINORS.NORM norm_rel,
	    MODIFD.LPERIPH +,
            PHON.ONSET con ] ].

refb_xml_pn_2 := n_-_pn_le &
 [ ORTH < "_REF_(b)" >,
   SYNSEM [ LKEYS.KEYREL.CARG "refb-xml",
            LOCAL.CAT.HEAD.MINORS.NORM norm_rel,
	    MODIFD.LPERIPH +,
            PHON.ONSET con ] ].

refb_xml_pn3 := n_-_pn_le &
 [ ORTH < "_REF_.b" >,
   SYNSEM [ LKEYS.KEYREL.CARG "refb-xml",
            LOCAL.CAT.HEAD.MINORS.NORM norm_rel,
	    MODIFD.LPERIPH +,
            PHON.ONSET con ] ].

refc_xml_pn := n_-_pn_le &
 [ ORTH < "(_REF_)c" >,
   SYNSEM [ LKEYS.KEYREL.CARG "refc-xml",
	    MODIFD.LPERIPH +,
            LOCAL.CAT.HEAD.MINORS.NORM norm_rel,
            PHON.ONSET con ] ].

refc_xml_pn_2 := n_-_pn_le &
 [ ORTH < "_REF_(c)" >,
   SYNSEM [ LKEYS.KEYREL.CARG "refc-xml",
            LOCAL.CAT.HEAD.MINORS.NORM norm_rel,
	    MODIFD.LPERIPH +,
            PHON.ONSET con ] ].

refc_xml_pn3 := n_-_pn_le &
 [ ORTH < "_REF_.c" >,
   SYNSEM [ LKEYS.KEYREL.CARG "refc-xml",
            LOCAL.CAT.HEAD.MINORS.NORM norm_rel,
	    MODIFD.LPERIPH +,
            PHON.ONSET con ] ].

refii_xml_pn := n_-_pn_le &
 [ ORTH < "_REF_(ii)" >,
   SYNSEM [ LKEYS.KEYREL.CARG "ref-ii-xml",
            LOCAL.CAT.HEAD.MINORS.NORM norm_rel,
	    MODIFD.LPERIPH +,
            PHON.ONSET con ] ].

refiii_xml_pn := n_-_pn_le &
 [ ORTH < "_REF_(iii)" >,
   SYNSEM [ LKEYS.KEYREL.CARG "ref-iii-xml",
            LOCAL.CAT.HEAD.MINORS.NORM norm_rel,
	    MODIFD.LPERIPH +,
            PHON.ONSET con ] ].

refiv_xml_pn := n_-_pn_le &
 [ ORTH < "_REF_(iv)" >,
   SYNSEM [ LKEYS.KEYREL.CARG "ref-iv-xml",
            LOCAL.CAT.HEAD.MINORS.NORM norm_rel,
	    MODIFD.LPERIPH +,
            PHON.ONSET con ] ].

;; |that cats|
this_det_rbst := mal_det_pl_le &
 [ ORTH < "this" >,
   SYNSEM [ LKEYS.KEYREL.PRED _these_q_dem_rel,
	    PHON.ONSET con ] ].

that_det_rbst := mal_det_pl_le &
 [ ORTH < "that" >,
   SYNSEM [ LKEYS.KEYREL.PRED _those_q_dem_rel,
	    PHON.ONSET con ] ].

;; Prevent use of robust n3sg inflection
less_than_v1 := v_np_ntr_le &
 [ ORTH < "<" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_less+than_a_1_rel",
            LOCAL.CAT.HEAD.--MAL3SG -,
            PHON.ONSET con ] ].

greater_than_v1 := v_np_ntr_le &
 [ ORTH < ">" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_greater+than_a_1_rel",
            LOCAL.CAT.HEAD.--MAL3SG -,
            PHON.ONSET con ] ].

;; Avoid spurious robust bare-NP, since also have mass noun variant
note_n1 := n_-_c_le &
 [ ORTH < "note" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_note_n_1_rel",
            LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

;; Avoid spurious bare-NP parse since this often appears as a title:
section_n1 := n_pp_c_le &
 [ ORTH < "section" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_section_n_of_rel" ],
            LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

;; Spurious |of course|
course_n1 := n_pp_c-ns-of_le &
 [ ORTH < "course" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_course_n_of_rel",
            LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

;; Missing "to" |according the report|
according_to_rbst := p_np_i_le &
 [ ORTH < "according" >,
   SYNSEM [ LKEYS.KEYREL.PRED _according+to_p_rel,
            PHON.ONSET voc ],
   GENRE robust ].

;; Mark plurals of decades with apostrophes as robust: |1980's|
;;
generic_pl_apos_noun_ne := n_-_c-pl-gen_le &
  [ ORTH < "_generic_plur_apos_ne_" >,
    TOKENS.+LIST < [ +CLASS plur_apos_ne ] >,
    GENRE robust ].

;; For |where _MATH_| since lex entry for _MATH_ has empty SLASH
where_subord := p_cp_s_le &
 [ ORTH < "where" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_when_x_subord_rel",
            LOCAL.CAT.VAL.COMPS.FIRST.LEX +,
            PHON.ONSET con ] ].

;; For some reason, the inflr rule third_sg_fin_v_rbst interacts badly with
;; the entry lie_mental_v1 when packing is on, crashing ACE with this msg:
;; "error: edge #263 had generalization daughter #248 which packs nothing"
;;
lie_mental_v1 := v_pp*_le &
 [ ORTH < "lie" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_rel,
                    KEYREL.PRED "_lie_v_mental_rel" ],
	    LOCAL.CAT.HEAD.--MAL3SG -,
	    PHON.ONSET con ] ].

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Missing infinitival |to|

let_mal_v3_rbst := v_vp_seq-bse_le_rbst &
 [ ORTH < "let" >,
   SYNSEM [ LOCAL.CAT [ HEAD.--MAL3SG -,
			VAL.COMPS.FIRST.LEX - ],
	    LKEYS.KEYREL.PRED "_let_v_1_rel",
            PHON.ONSET con ] ].

try_mal_v1_rbst := v_vp_seq-bse_le_rbst &
  [ ORTH < "try" >,
    SYNSEM [ LKEYS.KEYREL.PRED "_try_v_1_rel",
	     PHON.ONSET con ] ].

want_mal_v1_rbst := v_vp_seq-bse_le_rbst &
  [ ORTH < "want" >,
    SYNSEM [ LKEYS.KEYREL.PRED "_want_v_1_rel",
	     PHON.ONSET con ] ].

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Missing |to| for raising: |they tend win.|

chance_v1_rbst := v_vp_ssr-nimp_le_rbst &
 [ ORTH < "chance" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chance_v_1_rel",
            PHON.ONSET con ] ].

get_to_v1_rbst := v_vp_ssr-nimp_le_rbst &
 [ ORTH < "get" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_get_v_to_rel",
            PHON.ONSET con ] ].

happen_v2_rbst := v_vp_ssr-nimp_le_rbst &
 [ ORTH < "happen" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_happen_v_1_rel",
            PHON.ONSET con ] ].

have_to1_rbst := v_vp_ssr-nimp_le_rbst &
 [ ORTH < "have" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_have_v_qmodal-2_rel",
            PHON.ONSET con ] ].

tend_v1_rbst := v_vp_ssr-nimp_le_rbst &
 [ ORTH < "tend" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tend_v_1_rel",
            PHON.ONSET con ] ].


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Erroneous obj-control as subj-control

advise_mal_v1_rbst := v_vp_seq_le_rbst &
 [ ORTH < "advise" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_advise_v_1_rel",
            PHON.ONSET voc ] ].

allow_mal_v1_rbst := v_vp_seq_le_rbst &
 [ ORTH < "allow" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_allow_v_1_rel",
            PHON.ONSET voc ] ].

enable_mal_v1_rbst := v_vp_seq_le_rbst &
 [ ORTH < "enable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_enable_v_1_rel",
            PHON.ONSET voc ] ].

hear_mal_v1_rbst := v_vp_seq_le_rbst &
 [ ORTH < "hear" >,
   SYNSEM [ LOCAL.CAT.HEAD.--MAL3SG -,
	    LKEYS.KEYREL.PRED "_hear_v_1_rel",
            PHON.ONSET con ] ].

let_mal_v1_rbst := v_vp_seq_le_rbst &
 [ ORTH < "let" >,
   SYNSEM [ LOCAL.CAT.HEAD.--MAL3SG -,
	    LKEYS.KEYREL.PRED "_let_v_1_rel",
            PHON.ONSET con ] ].

make_mal_v1_rbst := v_vp_seq_le_rbst &
 [ ORTH < "make" >,
   SYNSEM [ LOCAL.CAT.HEAD.--MAL3SG -,
	    LKEYS.KEYREL.PRED "_make_v_cause_rel",
            PHON.ONSET con ] ].

permit_mal_v1_rbst := v_vp_seq_le_rbst &
 [ ORTH < "permit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_permit_v_1_rel",
            PHON.ONSET con ] ].

recommend_mal_v1_rbst := v_vp_seq_le_rbst &
 [ ORTH < "recommend" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_recommend_v_1_rel",
            PHON.ONSET con ] ].

see_mal_v1_rbst := v_vp_seq_le_rbst &
 [ ORTH < "see" >,
   SYNSEM [ LOCAL.CAT.HEAD.--MAL3SG -,
	    LKEYS.KEYREL.PRED "_see_v_1_rel",
            PHON.ONSET con ] ].

suggest_mal_v1_rbst := v_vp_seq_le_rbst &
 [ ORTH < "suggest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_suggest_v_1_rel",
            PHON.ONSET con ] ].

tell_mal_v2_rbst := v_vp_seq_le_rbst &
 [ ORTH < "tell" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tell_v_1_rel",
            PHON.ONSET con ] ].


;; Missing prep |to|

agree_with_mal_v1_rbst := v_np_pp_le_rbst &
 [ ORTH < "agree" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_agree_v_with_rel",
            PHON.ONSET voc ] ].

amount_to_v1_rbst := v_np_pp_le_rbst &
 [ ORTH < "amount" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_amount_v_to_rel" ],
            PHON.ONSET voc ] ].

cater_to_mal_v1_rbst := v_np_pp_le_rbst &
 [ ORTH < "cater" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cater_v_to_rel",
            PHON.ONSET con ] ].

correspond_to_v1_rbst := v_np_pp_le_rbst &
 [ ORTH < "correspond" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_correspond_v_to_rel" ],
            PHON.ONSET con ] ].

dream_of_mal_v1_rbst := v_np_pp_le_rbst &
 [ ORTH < "dream" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dream_v_of_rel",
            PHON.ONSET con ] ].

earn_for_mal_v1_rbst := v_pp_np_le_rbst &
 [ ORTH < "earn" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_earn_v_1_rel" ],
            PHON.ONSET voc ] ].

go_mal_v1_rbst := v_np_pp_le_rbst &
 [ ORTH < "go" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_go_v_1_rel",
            PHON.ONSET con ] ].

infringe_on_mal_v1_rbst := v_np_pp_le_rbst &
 [ ORTH < "infringe" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_infringe_v_on_rel",
            PHON.ONSET voc ] ].

intrude_upon_mal_v1_rbst := v_np_pp_le_rbst &
 [ ORTH < "intrude" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_intrude_v_upon_rel",
            PHON.ONSET voc ] ].

lead_to_v1_rbst := v_np_pp_le_rbst &
 [ ORTH < "lead" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_lead_v_to_rel" ],
            PHON.ONSET con ] ].

listen_to_mal_v1_rbst := v_np_pp_le_rbst &
 [ ORTH < "listen" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_listen_v_to_rel",
            PHON.ONSET con ] ].

pounce_on_mal_v1_rbst := v_np_pp_le_rbst &
 [ ORTH < "pounce" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pounce_v_on_rel",
            PHON.ONSET con ] ].

respond_to_v1_rbst := v_np_pp_le_rbst &
 [ ORTH < "respond" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_respond_v_to_rel" ],
            PHON.ONSET con ] ].

result_in_mal_v1_rbst := v_np_pp_le_rbst &
 [ ORTH < "result" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_result_v_in_rel",
            PHON.ONSET con ] ].

;; |allows us focus on X|
allow_v1_bse_rbst := v_np-vp_bse_le_rbst &
 [ ORTH < "allow" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_allow_v_1_rel",
            PHON.ONSET voc ] ].

;; |allows us focus on X|
assume_v1_bse_rbst := v_np-vp_bse_le_rbst &
 [ ORTH < "assume" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_assume_v_1_rel",
            PHON.ONSET voc ] ].

;; |causes X grow|
cause_v1_bse_rbst := v_np-vp_bse_le_rbst &
 [ ORTH < "cause" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cause_v_1_rel",
            PHON.ONSET con ] ].

;; |considered [to] be the following|
consider_v1_rbst := v_np-vp_bse_le_rbst &
 [ ORTH < "consider" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_consider_v_1_rel",
            PHON.ONSET con ] ].

tell_mal_v3_rbst := v_np-vp_bse_le_rbst &
 [ ORTH < "tell" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tell_v_1_rel",
            PHON.ONSET con ] ].

;; |we need arise|
need_bse_v1_rbst := v_vp_must-p_le &
 [ ORTH < "need" >,
   SYNSEM [ LKEYS.KEYREL.PRED _need_v_qmodal_rel,
            PHON.ONSET con ],
   GENRE robust ].

;; Mal lex entry for "allow" missing both a direct object and infinitival "to"
;;
allow_v_vp-np_rbst := v_vp_np-bse_le_rbst &
  [ ORTH < "allow" >,
    SYNSEM [ LKEYS.KEYREL.PRED "_allow_v_1_rel",
	     PHON.ONSET voc ] ].

;;;;;;
sprang_up_v1_rbst := v_p_le-infl_rbst &
 [ ORTH < "sprung" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_spring_v_up_rel" ],
            PHON.ONSET con ] ].

;;; VP bse or inf instead of prp
enjoy_v2_rbst := v_vp_prp_le_rbst &
 [ ORTH < "enjoy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_enjoy_v_1_rel",
            PHON.ONSET voc ] ].

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; For e.g. |It affected to Kim| with spurious prep

accommodate_to_mal_v1_rbst := v_pp_np_le_rbst &
 [ ORTH < "accommodate" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_accommodate_v_1_rel" ],
            PHON.ONSET voc ] ].

address_to_mal_v1_rbst := v_pp_np_le_rbst &
 [ ORTH < "address" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_address_v_1_rel" ],
            PHON.ONSET voc ] ].

affect_to_mal_v1_rbst := v_pp_np_le_rbst &
 [ ORTH < "affect" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_affect_v_1_rel" ],
            PHON.ONSET voc ] ].

approach_to_mal_v1_rbst := v_pp_np_le_rbst &
 [ ORTH < "approach" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_approach_v_1_rel" ],
            PHON.ONSET voc ] ].

benefit_to_mal_v1_rbst := v_pp_np_le_rbst &
 [ ORTH < "benefit" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_benefit_v_1_rel" ],
            PHON.ONSET con ] ].

comprise_of_mal_v1_rbst := v_pp_np_le_rbst &
 [ ORTH < "comprise" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_comprise_v_1_rel" ],
            PHON.ONSET con ] ].

consider_for_mal_v1_rbst := v_pp_np_le_rbst &
 [ ORTH < "consider" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_consider_v_1_rel" ],
            PHON.ONSET con ] ].

consider_in_mal_v1_rbst := v_pp_np_le_rbst &
 [ ORTH < "consider" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_consider_v_1_rel" ],
            PHON.ONSET con ] ].

constitute_as_mal_v1_rbst := v_pp_np_le_rbst &
 [ ORTH < "constitute" >,
   SYNSEM [ LKEYS [ --COMPKEY _as_p_sel_rel,
                    KEYREL.PRED "_constitute_v_1_rel" ],
            PHON.ONSET con ] ].

contradict_with_mal_v1_rbst := v_pp_np_le_rbst &
 [ ORTH < "contradict" >,
   SYNSEM [ LKEYS [ --COMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_contradict_v_1_rel" ],
            PHON.ONSET con ] ].

counter_against_mal_v1_rbst := v_pp_np_le_rbst &
 [ ORTH < "counter" >,
   SYNSEM [ LKEYS [ --COMPKEY _against_p_sel_rel,
                    KEYREL.PRED "_counter_v_1_rel" ],
            PHON.ONSET con ] ].

disclose_of_mal_v1_rbst := v_pp_np_le_rbst &
 [ ORTH < "disclose" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_disclose_v_1_rel" ],
            PHON.ONSET con ] ].

discover_about_mal_v1_rbst := v_pp_np_le_rbst &
 [ ORTH < "discover" >,
   SYNSEM [ LKEYS [ --COMPKEY _about_p_sel_rel,
                    KEYREL.PRED "_discover_v_1_rel" ],
            PHON.ONSET con ] ].

discuss_about_mal_v1_rbst := v_pp_np_le_rbst &
 [ ORTH < "discuss" >,
   SYNSEM [ LKEYS [ --COMPKEY _about_p_sel_rel,
                    KEYREL.PRED "_discuss_v_1_rel" ],
            PHON.ONSET con ] ].

discuss_on_mal_v1_rbst := v_pp_np_le_rbst &
 [ ORTH < "discuss" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_discuss_v_1_rel" ],
            PHON.ONSET con ] ].

earn_for_mal_v1_rbst := v_pp_np_le_rbst &
 [ ORTH < "earn" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_earn_v_1_rel" ],
            PHON.ONSET voc ] ].

equal_to_mal_v1_rbst := v_pp_np_le_rbst &
 [ ORTH < "equal" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_equal_v_1_rel" ],
            PHON.ONSET con ] ].

explore_into_mal_v1_rbst := v_pp_np_le_rbst &
 [ ORTH < "explore" >,
   SYNSEM [ LKEYS [ --COMPKEY _into_p_sel_rel,
                    KEYREL.PRED "_explore_v_1_rel" ],
            PHON.ONSET con ] ].

face_to_mal_v1_rbst := v_pp_np_le_rbst &
 [ ORTH < "face" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_face_v_1_rel" ],
            PHON.ONSET con ] ].

help_on_mal_v1_rbst := v_pp_np_le_rbst &
 [ ORTH < "help" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_help_v_1_rel" ],
            PHON.ONSET con ] ].

invade_into_mal_v1_rbst := v_pp_np_le_rbst &
 [ ORTH < "invade" >,
   SYNSEM [ LKEYS [ --COMPKEY _into_p_sel_rel,
                    KEYREL.PRED "_invade_v_1_rel" ],
            PHON.ONSET voc ] ].

investigate_on_mal_v1_rbst := v_pp_np_le_rbst &
 [ ORTH < "investigate" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_investigate_v_1_rel" ],
            PHON.ONSET voc ] ].

prevent_from_mal_v1_rbst := v_pp_np_le_rbst &
 [ ORTH < "prevent" >,
   SYNSEM [ LKEYS [ --COMPKEY _from_p_sel_rel,
                    KEYREL.PRED "_prevent_v_1_rel" ],
            PHON.ONSET con ] ].

regard_to_mal_v1_rbst := v_pp_np_le_rbst &
 [ ORTH < "regard" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_regard_v_1_rel" ],
            PHON.ONSET con ] ].

request_for_mal_v1_rbst := v_pp_np_le_rbst &
 [ ORTH < "request" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_request_v_1_rel" ],
            PHON.ONSET con ] ].

research_on_mal_v1_rbst := v_pp_np_le_rbst &
 [ ORTH < "research" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_research_v_1_rel" ],
            PHON.ONSET con ] ].

scan_at_mal_v1_rbst := v_pp_np_le_rbst &
 [ ORTH < "scan" >,
   SYNSEM [ LKEYS [ --COMPKEY _at_p_sel_rel,
                    KEYREL.PRED "_scan_v_1_rel" ],
            PHON.ONSET con ] ].

seek_for_mal_v1_rbst := v_pp_np_le_rbst &
 [ ORTH < "seek" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_seek_v_1_rel" ],
            PHON.ONSET con ] ].

solve_for_mal_v1_rbst := v_pp_np_le_rbst &
 [ ORTH < "solve" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_solve_v_1_rel" ],
            PHON.ONSET con ] ].

stress_for_mal_v1_rbst := v_pp_np_le_rbst &
 [ ORTH < "stress" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_stress_v_1_rel" ],
            PHON.ONSET con ] ].

test_on_mal_v1_rbst := v_pp_np_le_rbst &
 [ ORTH < "test" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_test_v_1_rel" ],
            PHON.ONSET con ] ].

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; For wrong prep marker, as in |abide to|

abide_to_by_mal_v1_rbst := v_pp_e_le_rbst &
 [ ORTH < "abide" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_abide_v_by_rel" ],
            PHON.ONSET voc ] ].

cater_for_to_mal_v1_rbst := v_pp_e_le_rbst &
 [ ORTH < "cater" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_cater_v_to_rel" ],
            PHON.ONSET con ] ].

cater_on_to_mal_v1_rbst := v_pp_e_le_rbst &
 [ ORTH < "cater" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_cater_v_to_rel" ],
            PHON.ONSET con ] ].

contribute_in_to_mal_v1_rbst := v_pp_e_le_rbst &
 [ ORTH < "contribute" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_contribute_v_to_rel" ],
            PHON.ONSET con ] ].

elaborate_about_on_mal_v1_rbst := v_pp_e_le_rbst &
 [ ORTH < "elaborate" >,
   SYNSEM [ LKEYS [ --COMPKEY _about_p_sel_rel,
                    KEYREL.PRED "_elaborate_v_on_rel" ],
            PHON.ONSET voc ] ].

implant_to_in_mal_v1_rbst := v_pp_e_le_rbst &
 [ ORTH < "implant" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_implant_v_in_rel" ],
            PHON.ONSET voc ] ].

invest_for_in_mal_v1_rbst := v_pp_e_le_rbst &
 [ ORTH < "invest" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_invest_v_in_rel" ],
            PHON.ONSET voc ] ].

rely_upon_on_mal_v1_rbst := v_pp_e_le_rbst &
 [ ORTH < "rely" >,
   SYNSEM [ LKEYS [ --COMPKEY _upon_p_sel_rel,
                    KEYREL.PRED "_rely_v_on_rel" ],
            PHON.ONSET con ] ].

result_to_in_mal_v1_rbst := v_pp_e_le_rbst &
 [ ORTH < "result" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_result_v_in_rel" ],
            PHON.ONSET con ] ].

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; For wrong prep marker as in |allocated it of Kim|

allocate_of_to_mal_v1_rbst := v_np-pp_e_le_rbst &
 [ ORTH < "allocate" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _of_p_sel_rel,
		    KEYREL.PRED "_allocate_v_to_rel" ],
            PHON.ONSET voc ] ].

allocate_on_to_mal_v1_rbst := v_np-pp_e_le_rbst &
 [ ORTH < "allocate" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _on_p_sel_rel,
		    KEYREL.PRED "_allocate_v_to_rel" ],
            PHON.ONSET voc ] ].

apply_in_to_mal_v1_rbst := v_np-pp_e_le_rbst &
 [ ORTH < "apply" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _in_p_sel_rel,
		    KEYREL.PRED "_apply_v_to_rel" ],
            PHON.ONSET voc ] ].

associate_to_with_mal_v1_rbst := v_np-pp_e_le_rbst &
 [ ORTH < "associate" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _to_p_sel_rel,
		    KEYREL.PRED "_associate_v_with_rel" ],
            PHON.ONSET voc ] ].

devote_into_to_mal_v1_rbst := v_np-pp_e_le_rbst &
 [ ORTH < "devote" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _into_p_sel_rel,
		    KEYREL.PRED "_devote_v_to_rel" ],
            PHON.ONSET con ] ].

expose_of_to_mal_v1_rbst := v_np-pp_e_le_rbst &
 [ ORTH < "expose" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _of_p_sel_rel,
		    KEYREL.PRED "_expose_v_to_rel" ],
            PHON.ONSET voc ] ].

impose_to_on_mal_v1_rbst := v_np-pp_e_le_rbst &
 [ ORTH < "impose" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _to_p_sel_rel,
		    KEYREL.PRED "_impose_v_on_rel" ],
            PHON.ONSET voc ] ].

inflict_to_on_mal_v1_rbst := v_np-pp_e_le_rbst &
 [ ORTH < "inflict" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _to_p_sel_rel,
		    KEYREL.PRED "_inflict_v_on_rel" ],
            PHON.ONSET voc ] ].

integrate_to_into_mal_v1_rbst := v_np-pp_e_le_rbst &
 [ ORTH < "integrate" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _to_p_sel_rel,
		    KEYREL.PRED "_integrate_v_into_rel" ],
            PHON.ONSET voc ] ].

learn_of_from_mal_v1_rbst := v_np-pp_e_le_rbst &
 [ ORTH < "learn" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _of_p_sel_rel,
		    KEYREL.PRED "_learn_v_from_rel" ],
            PHON.ONSET con ] ].

provide_of_with_mal_v1_rbst := v_np-pp_e_le_rbst &
 [ ORTH < "provide" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _of_p_sel_rel,
		    KEYREL.PRED "_provide_v_with_rel" ],
            PHON.ONSET con ] ].

relate_with_to_mal_v1_rbst := v_np-pp_e_le_rbst &
 [ ORTH < "relate" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _with_p_sel_rel,
		    KEYREL.PRED "_relate_v_to_rel" ],
            PHON.ONSET con ] ].

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; For erroneous VP passives of intransitives as in |the fish were died|

appeared_a1_post_rbst := v_-_psv-post_le_rbst &
 [ ORTH < "appeared" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_appear_v_1_rel",
            PHON.ONSET voc ] ].

died_a1_post_rbst := v_-_psv-post_le_rbst &
 [ ORTH < "died" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_die_v_1_rel",
            PHON.ONSET con ] ].

existed_a1_post_rbst := v_-_psv-post_le_rbst &
 [ ORTH < "existed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_exist_v_1_rel",
            PHON.ONSET voc ] ].

vanished_a1_post_rbst := v_-_psv-post_le_rbst &
 [ ORTH < "vanished" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vanish_v_1_rel",
            PHON.ONSET con ] ].

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; For erroneous VP passives of intransitives used prenominally: |the died fish|

appeared_a1_pre_rbst := v_-_psv-pre_le_rbst &
 [ ORTH < "appeared" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_appear_v_1_rel",
            PHON.ONSET voc ] ].

died_a1_pre_rbst := v_-_psv-pre_le_rbst &
 [ ORTH < "died" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_die_v_1_rel",
            PHON.ONSET con ] ].

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Strict transitives used as intransitives

bring_mal_v1_rbst := v_-_le_rbst &
 [ ORTH < "bring" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bring_v_1_rel",
            PHON.ONSET con ] ].

buy_mal_v1_rbst := v_-_le_rbst &
 [ ORTH < "buy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_buy_v_1_rel",
            PHON.ONSET con ] ].

carry_mal_v1_rbst := v_-_le_rbst &
 [ ORTH < "carry" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_carry_v_1_rel",
            PHON.ONSET con ] ].

find_mal_v1_rbst := v_-_le_rbst &
 [ ORTH < "find" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_find_v_1_rel",
            PHON.ONSET con ] ].

loan_mal_v2_rbst := v_-_le_rbst &
 [ ORTH < "loan" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_loan_v_1_rel",
            PHON.ONSET con ] ].

need_mal_v1_rbst := v_-_le_rbst &
 [ ORTH < "need" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_need_v_1_rel",
            PHON.ONSET con ] ].

pick_mal_v1_rbst := v_-_le_rbst &
 [ ORTH < "pick" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pick_v_1_rel",
            PHON.ONSET con ] ].

tell_mal_v4_rbst := v_-_le_rbst &
 [ ORTH < "tell" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tell_v_1_rel",
            PHON.ONSET con ] ].

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; v_np-cp used with just CP complement

persuade_mal_v2_rbst := v_cp_le_rbst &
 [ ORTH < "persuade" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_persuade_v_of_rel",
            PHON.ONSET con ] ].

tell_mal_v5_rbst := v_cp_le_rbst &
 [ ORTH < "tell" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tell_v_1_rel",
            PHON.ONSET con ] ].

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;  e.g. `This lets the cat to enter'

hear_mal_v2_rbst := v_np-vp_oeq_le_rbst &
 [ ORTH < "hear" >,
   SYNSEM [ LOCAL.CAT.HEAD.--MAL3SG -,
	    LKEYS.KEYREL.PRED "_hear_v_1_rel",
            PHON.ONSET con ] ].

let_mal_v2_rbst := v_np-vp_oeq_le_rbst &
 [ ORTH < "let" >,
   SYNSEM [ LOCAL.CAT.HEAD.--MAL3SG -,
	    LKEYS.KEYREL.PRED "_let_v_1_rel",
            PHON.ONSET con ] ].

make_mal_v2_rbst := v_np-vp_oeq_le_rbst &
 [ ORTH < "make" >,
   SYNSEM [ LOCAL.CAT.HEAD.--MAL3SG -,
	    LKEYS.KEYREL.PRED "_make_v_cause_rel",
            PHON.ONSET con ] ].

see_mal_v2_rbst := v_np-vp_oeq_le_rbst &
 [ ORTH < "see" >,
   SYNSEM [ LOCAL.CAT.HEAD.--MAL3SG -,
	    LKEYS.KEYREL.PRED "_see_v_1_rel",
            PHON.ONSET con ] ].

;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; This one does not require a hyphen |integer linear order|
linear_cmpd_n2 := n_-_c-cpd_le &
 [ ORTH < "linear" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_linear_a_1_rel",
            PHON.ONSET con ] ].

;; Redefine this one, since we want non-robust comma |Kim, as well as Browne,..|

as_well_as_conj_1 := p_np_i_le &
 [ ORTH < "as", "well", "as" >,
   SYNSEM [ LKEYS.KEYREL.PRED _as+well+as_p_rel,
            PHON.ONSET voc ] ].

;; Prevent robust bare singular, to allow acronym RUG
rug_n1 := n_-_c_le &
 [ ORTH < "rug" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rug_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

;; Block unwanted analysis as S-initial extracted adverb
fig_abb := never_unify_le & [ ORTH < "_never_unify_" > ].

figure_abb_n1 := n_-_c_le &
 [ ORTH < "Fig." >,
   SYNSEM [ LKEYS.KEYREL.PRED "_figure_n_1_rel",
   	    LOCAL.CAT.HEAD [ --BARE -,
	                     CASE no_case ],
            PHON.ONSET con ] ].

model_n2 := n_pp_c-of_le &
 [ ORTH < "model" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_model_n_of_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

theorem_n1 := n_-_c_le &
 [ ORTH < "theorem" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_theorem_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

center_of_mass_a1 := aj_-_i_le &
 [ ORTH < "center", "of", "mass" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_center+of+mass_n_1_rel",
            PHON.ONSET con ] ].

center_of_mass_a2 := aj_-_i_le &
 [ ORTH < "center-", "of-", "mass" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_center+of+mass_n_1_rel",
            PHON.ONSET con ] ].

center_of_mass_a1_br := aj_-_i_le &
 [ DIALECT br,
   ORTH < "centre", "of", "mass" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_center+of+mass_n_1_rel",
            PHON.ONSET con ] ].

center_of_mass_a2_br := aj_-_i_le &
 [ DIALECT br,
   ORTH < "centre-", "of-", "mass" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_center+of+mass_n_1_rel",
            PHON.ONSET con ] ].

;; bare singular competes in |as well|
well_n1 := n_-_c-ntc_le &
 [ ORTH < "well" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_well_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

;; We want |_MATH_ in _MATH_| as a clause
in_math_xml_root_post := av_-_s-cp-nsp-po_le &
 [ ORTH < "in", "_MATH_" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_in+math_a_1_rel",
            PHON.ONSET con ] ].

;; Avoid robust analysis of |goods|
good_n1 := n_-_m-nocnh_le &
 [ ORTH < "good" >,
   ALTS.PLMASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_good_n_1_rel",
            PHON.ONSET con ] ].

source_n2 := n_-_m-nocnh_le &
 [ ORTH < "source" >,
   ALTS.PLMASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_source_n_2_rel",
            PHON.ONSET con ] ].

;; Avoid |s| sans apostrophe as contracted copula as in |waiting 60 s in ...|
be_c_is_cx := never_unify_le & [ ORTH < "_never_unify_" > ].
be_id_is_cx := never_unify_le & [ ORTH < "_never_unify_" > ].
be_it_cop_is_cx := never_unify_le & [ ORTH < "_never_unify_" > ].
be_nv_is_cx := never_unify_le & [ ORTH < "_never_unify_" > ].
be_th_cop_is_cx := never_unify_le & [ ORTH < "_never_unify_" > ].
has_aux_cx := never_unify_le & [ ORTH < "_never_unify_" > ].

;; For some reason, unknown word |Huang| gets tagged as v-prespart
huang_pn := n_-_pn_le &
 [ ORTH < "Huang" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Huang",
            PHON.ONSET con ] ].

zero_n1 := n_-_c_le &
 [ ORTH < "zero" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_zero_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

;; For |he did arrived|
;;
do_have_rbst := v_vp_have-f_le &
 [ ORTH < "do" >,
   SYNSEM.PHON.ONSET con ].

does_have_rbst := v_vp_has_le &
 [ ORTH < "does" >,
   SYNSEM.PHON.ONSET con ].

did_have_rbst := v_vp_had_le &
 [ ORTH < "did" >,
   SYNSEM.PHON.ONSET con ].

did1_neg_1_rbst := v_vp_did-n_le &
 [ ORTH < "didnt" >,
   SYNSEM.PHON.ONSET con,
   GENRE robust ].

day_n := n_pp_c-day_le &
 [ ORTH < "day" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_day_n_of_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ],
   TOKENS.+LAST.+CLASS.+CASE non_capitalized ].

all_mal_adj_rbst := aj_-_i-one_le_rbst &
 [ ORTH < "all" >,
   SYNSEM.PHON.ONSET voc ].

many_mal_adj_rbst := aj_-_i-one_le_rbst &
 [ ORTH < "many" >,
   SYNSEM.PHON.ONSET con ].

more_mal_adj_rbst := aj_-_i-one_le_rbst &
 [ ORTH < "more" >,
   SYNSEM.PHON.ONSET con ].

most_mal_adj_rbst := aj_-_i-one_le_rbst &
 [ ORTH < "most" >,
   SYNSEM.PHON.ONSET con ].

several_mal_adj_rbst := aj_-_i-one_le_rbst &
 [ ORTH < "several" >,
   SYNSEM.PHON.ONSET con ].

much_a1_rbst := aj_-_i-many_le &
 [ ORTH < "much" >,
   SYNSEM [ LKEYS.KEYREL.PRED much-many_a_rel,
            PHON.ONSET con ],
   GENRE robust ].

a_det_mass_rbst := d_-_m-c-mal-a_le &
 [ ORTH < "a" >,
   SYNSEM [ LKEYS.KEYREL.PRED _a_q_rel,
            PHON.ONSET voc ] ].

an_det_mass_rbst := d_-_m-c-mal-an_le &
 [ ORTH < "an" >,
   SYNSEM [ LKEYS.KEYREL.PRED _a_q_rel,
            PHON.ONSET voc ] ].

such_a_det_rbst := d_-_sg-nmd_le &
 [ ORTH < "such" >,
   SYNSEM [ LKEYS.KEYREL.PRED _such+a_q_rel,
            PHON.ONSET con ],
   GENRE robust ].

such_an_det_rbst := d_-_sg-nmd-an_le &
 [ ORTH < "such" >,
   SYNSEM [ LKEYS.KEYREL.PRED _such+a_q_rel,
            PHON.ONSET con ],
   GENRE robust ].

;; Avoid misanalysis of |got there taking the bus|
;;
their_rbst := d_-_poss-their_le &
 [ ORTH < "there" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CONT.HOOK.INDEX.SORT entity ],
   GENRE robust ].

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Nouns selecting wrong prep

attention_on_to_mal_n1_rbst := n_pp_m_le_rbst &
 [ ORTH < "attention" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
		    KEYREL.PRED "_attention_n_to_rel" ],
            PHON.ONSET voc ] ].

concern_to_for_mal_n1_rbst := n_pp_c_le_rbst &
 [ ORTH < "concern" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
		    KEYREL.PRED "_concern_n_for_rel" ],
            PHON.ONSET con ] ].

consequence_on_for_mal_n1_rbst := n_pp_c_le_rbst &
 [ ORTH < "consequence" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
		    KEYREL.PRED "_consequence_n_for_rel" ],
            PHON.ONSET con ] ].

debate_of_on_mal_n1_rbst := n_pp_c_le_rbst &
 [ ORTH < "debate" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
		    KEYREL.PRED "_debate_n_on_rel" ],
            PHON.ONSET con ] ].

effect_to_on_mal_n1_rbst := n_pp_c_le_rbst &
 [ ORTH < "effect" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
		    KEYREL.PRED "_effect_n_on_rel" ],
            PHON.ONSET voc ] ].

impact_on_of_mal_n1_rbst := n_pp_m_le_rbst &
 [ ORTH < "impact" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
		    KEYREL.PRED "_impact_n_1_rel" ],
            PHON.ONSET voc ] ].

impact_to_on_mal_n1_rbst := n_pp_m_le_rbst &
 [ ORTH < "impact" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
		    KEYREL.PRED "_impact_n_on_rel" ],
            PHON.ONSET voc ] ].

motivation_of_for_mal_n1_rbst := n_pp_c_le_rbst &
 [ ORTH < "motivation" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
		    KEYREL.PRED "_motivation_n_for_rel" ],
            PHON.ONSET con ] ].

need_of_for_mal_n1_rbst := n_pp_c_le_rbst &
 [ ORTH < "need" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
		    KEYREL.PRED "_need_n_for_rel" ],
            PHON.ONSET con ] ].

need_on_of_mal_n1_rbst := n_pp_c_le_rbst &
 [ ORTH < "need" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
		    KEYREL.PRED "_need_n_of_rel" ],
            PHON.ONSET con ] ].

need_towards_for_mal_n1_rbst := n_pp_c_le_rbst &
 [ ORTH < "need" >,
   SYNSEM [ LKEYS [ --COMPKEY _towards_p_sel_rel,
		    KEYREL.PRED "_need_n_for_rel" ],
            PHON.ONSET con ] ].

opportunity_of_for_mal_n1_rbst := n_pp_c_le_rbst &
 [ ORTH < "opportunity" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
		    KEYREL.PRED "_opportunity_n_for_rel" ],
            PHON.ONSET voc ] ].

reason_of_for_mal_n1_rbst := n_pp_c_le_rbst &
 [ ORTH < "reason" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
		    KEYREL.PRED "_reason_n_for_rel" ],
            PHON.ONSET con ] ].

replica_from_of_mal_n1_rbst := n_pp_c_le_rbst &
 [ ORTH < "replica" >,
   SYNSEM [ LKEYS [ --COMPKEY _from_p_sel_rel,
		    KEYREL.PRED "_replica_n_of_rel" ],
            PHON.ONSET con ] ].

risk_to_of_mal_n1_rbst := n_pp_c_le_rbst &
 [ ORTH < "risk" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
		    KEYREL.PRED "_risk_n_of_rel" ],
            PHON.ONSET con ] ].

say_in_on_mal_n2_rbst := n_pp_c_le_rbst &
 [ ORTH < "say" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
		    KEYREL.PRED "_say_n_on_rel" ],
            PHON.ONSET con ] ].

say_to_on_mal_n1_rbst := n_pp_c_le_rbst &
 [ ORTH < "say" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
		    KEYREL.PRED "_say_n_on_rel" ],
            PHON.ONSET con ] ].

too_deg_rbst := av_vp_dg-too_le &
 [ ORTH < "to" >,
   SYNSEM.PHON.ONSET con,
   GENRE robust ].

too_deg_nc_rbst := av_-_dg-cmp-so_le &
 [ ORTH < "to" >,
   SYNSEM [ LKEYS.KEYREL.PRED comp_too_rel,
            PHON.ONSET con ],
   GENRE robust ].

;; Make mal entry to allow stylistic guidance
;;
always_mal_adv3_rbst := av_-_i-vp-po_le_rbst &
 [ ORTH < "always" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_always_a_1_rel",
            PHON.ONSET voc ] ].

bad_mal_adv1_rbst := av_-_i-vp-po_le_rbst &
 [ ORTH < "bad" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bad_a_1_rel",
            PHON.ONSET con ] ].

good_mal_adv1_rbst := av_-_i-vp-po_le_rbst &
 [ ORTH < "good" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_well_a_1_rel",
            PHON.ONSET con ] ].

better_adv_mal_rbst := av_-_i-vp-cmp_le_rbst &
 [ ORTH < "better" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_better_a_1_rel",
            PHON.ONSET con ] ].

cheaper_adv_mal_rbst := av_-_i-vp-cmp_le_rbst &
 [ ORTH < "cheaper" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cheaper_a_1_rel",
            PHON.ONSET con ] ].

cleaner_adv_mal_rbst := av_-_i-vp-cmp_le_rbst &
 [ ORTH < "cleaner" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cleaner_a_1_rel",
            PHON.ONSET con ] ].

deeper_adv_mal_rbst := av_-_i-vp-cmp_le_rbst &
 [ ORTH < "deeper" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_deeper_a_1_rel",
            PHON.ONSET con ] ].

farther_adv_mal_rbst := av_-_i-vp-cmp_le_rbst &
 [ ORTH < "farther" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_farther_a_1_rel",
            PHON.ONSET con ] ].

faster_adv_mal_rbst := av_-_i-vp-cmp_le_rbst &
 [ ORTH < "faster" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_faster_a_1_rel",
            PHON.ONSET con ] ].

further_adv_mal_rbst := av_-_i-vp-cmp_le_rbst &
 [ ORTH < "further" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_further_a_1_rel",
            PHON.ONSET con ] ].

harder_adv_mal_rbst := av_-_i-vp-cmp_le_rbst &
 [ ORTH < "harder" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_harder_a_1_rel",
            PHON.ONSET con ] ].

oftener_adv_mal_rbst := av_-_i-vp-cmp_le_rbst &
 [ ORTH < "oftener" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_oftener_a_1_rel",
            PHON.ONSET voc ] ].

quicker_adv_mal_rbst := av_-_i-vp-cmp_le_rbst &
 [ ORTH < "quicker" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_quicker_a_1_rel",
            PHON.ONSET con ] ].

angrier_a1_mal_rbst := aj_-_i-cmp_le_rbst &
 [ ORTH < "angrier" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_angry_a_at_rel",
            PHON.ONSET voc ] ].

better_a1_mal_rbst := aj_-_i-cmp_le_rbst &
 [ ORTH < "better" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_good_a_at-for-of_rel",
            PHON.ONSET con ] ].

bigger_a1_mal_rbst := aj_-_i-cmp_le_rbst &
 [ ORTH < "bigger" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_big_a_1_rel",
            PHON.ONSET con ] ].

bloodier_a1_mal_rbst := aj_-_i-cmp_le_rbst &
 [ ORTH < "bloodier" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bloody_a_1_rel",
            PHON.ONSET con ] ].

blurrier_a1_mal_rbst := aj_-_i-cmp_le_rbst &
 [ ORTH < "blurrier" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_blurry_a_1_rel",
            PHON.ONSET con ] ].

bolder_a1_mal_rbst := aj_-_i-cmp_le_rbst &
 [ ORTH < "bolder" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bold_a_1_rel",
            PHON.ONSET con ] ].

braver_a1_mal_rbst := aj_-_i-cmp_le_rbst &
 [ ORTH < "braver" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_brave_a_1_rel",
            PHON.ONSET con ] ].

brighter_a1_mal_rbst := aj_-_i-cmp_le_rbst &
 [ ORTH < "brighter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bright_a_1_rel",
            PHON.ONSET con ] ].

cheaper_a1_mal_rbst := aj_-_i-cmp_le_rbst &
 [ ORTH < "cheaper" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cheap_a_1_rel",
            PHON.ONSET con ] ].

cleaner_aj_mal_rbst := aj_-_i-cmp_le_rbst &
 [ ORTH < "cleaner" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_clean_a_of_rel",
            PHON.ONSET con ] ].

deeper_a1_mal_rbst := aj_-_i-cmp_le_rbst &
 [ ORTH < "deeper" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_deep_a_1_rel",
            PHON.ONSET con ] ].

farther_a1_mal_rbst := aj_-_i-cmp_le_rbst &
 [ ORTH < "farther" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_far_a_from_rel",
            PHON.ONSET con ] ].

faster_a1_mal_rbst := aj_-_i-cmp_le_rbst &
 [ ORTH < "faster" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fast_a_1_rel",
            PHON.ONSET con ] ].

further_a1_mal_rbst := aj_-_i-cmp_le_rbst &
 [ ORTH < "further" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_far_a_from_rel",
            PHON.ONSET con ] ].

harder_aj_mal_rbst := aj_-_i-cmp_le_rbst &
 [ ORTH < "harder" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hard_a_for_rel",
            PHON.ONSET con ] ].

quicker_a1_mal_rbst := aj_-_i-cmp_le_rbst &
 [ ORTH < "quicker" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_quick_a_1_rel",
            PHON.ONSET con ] ].

shorter_a1_mal_rbst := aj_-_i-cmp_le_rbst &
 [ ORTH < "shorter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_short_a_of_rel",
            PHON.ONSET con ] ].

taller_a1_mal_rbst := aj_-_i-cmp_le_rbst &
 [ ORTH < "taller" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tall_a_1_rel",
            PHON.ONSET con ] ].

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Mal-forms for auxiliaries for subj-verb agreement

do1_pos_sg_rbst := mal_va_does_le &
 [ ORTH < "do" >,
   SYNSEM.PHON.ONSET con ].

does1_neg_1_mal_rbst := va_doesnt_neg_pres_le_rbst &
 [ ORTH < "don't" >,
   SYNSEM.PHON.ONSET con ].

does1_neg_2_mal_rbst := va_doesnt_neg_pres_le_rbst &
 [ ORTH < "do", "n't" >,
   SYNSEM.PHON.ONSET con ].

does1_neg_3_mal_rbst := va_doesnt_neg_pres_le_rbst &
 [ ORTH < "don", "'t" >,
   SYNSEM.PHON.ONSET con ].

does1_neg_1_q_mal_rbst := va_doesnt_neg_pres_le_rbst &
 [ ORTH < "don‘t" >,
   SYNSEM.PHON.ONSET con ].

does1_neg_2_q_mal_rbst := va_doesnt_neg_pres_le_rbst &
 [ ORTH < "do", "n‘t" >,
   SYNSEM.PHON.ONSET con ].

does1_neg_3_q_mal_rbst := va_doesnt_neg_pres_le_rbst &
 [ ORTH < "don", "‘t" >,
   SYNSEM.PHON.ONSET con ].

does1_neg_1_u_mal_rbst := va_doesnt_neg_pres_le_rbst &
 [ ORTH < "don’t" >,
   SYNSEM.PHON.ONSET con ].

does1_neg_2_u_mal_rbst := va_doesnt_neg_pres_le_rbst &
 [ ORTH < "do", "n’t" >,
   SYNSEM.PHON.ONSET con ].

does1_neg_3_u_mal_rbst := va_doesnt_neg_pres_le_rbst &
 [ ORTH < "don", "’t" >,
   SYNSEM.PHON.ONSET con ].

does1_neg_noapos_rbst := v_vp_does-n_le &
 [ ORTH < "doesnt" >,
   SYNSEM.PHON.ONSET con,
   GENRE robust ].

do1_neg_1_mal_rbst := va_dont_neg_pres_le_rbst &
 [ ORTH < "doesn't" >,
   SYNSEM.PHON.ONSET con ].

do1_neg_2_mal_rbst := va_dont_neg_pres_le_rbst &
 [ ORTH < "does", "n't" >,
   SYNSEM.PHON.ONSET con ].

do1_neg_3_mal_rbst := va_dont_neg_pres_le_rbst &
 [ ORTH < "doesn", "'t" >,
   SYNSEM.PHON.ONSET con ].

do1_neg_1_q_mal_rbst := va_dont_neg_pres_le_rbst &
 [ ORTH < "doesn‘t" >,
   SYNSEM.PHON.ONSET con ].

do1_neg_2_q_mal_rbst := va_dont_neg_pres_le_rbst &
 [ ORTH < "does", "n‘t" >,
   SYNSEM.PHON.ONSET con ].

do1_neg_3_q_mal_rbst := va_dont_neg_pres_le_rbst &
 [ ORTH < "doesn", "‘t" >,
   SYNSEM.PHON.ONSET con ].

do1_neg_1_u_mal_rbst := va_dont_neg_pres_le_rbst &
 [ ORTH < "doesn’t" >,
   SYNSEM.PHON.ONSET con ].

do1_neg_2_u_mal_rbst := va_dont_neg_pres_le_rbst &
 [ ORTH < "does", "n’t" >,
   SYNSEM.PHON.ONSET con ].

do1_neg_3_u_mal_rbst := va_dont_neg_pres_le_rbst &
 [ ORTH < "doesn", "’t" >,
   SYNSEM.PHON.ONSET con ].

do1_neg_noapos_rbst := v_vp_do-f-n_le &
 [ ORTH < "dont" >,
   SYNSEM.PHON.ONSET con,
   GENRE robust ].

does1_pos_pl_rbst := mal_va_do_fin_le &
 [ ORTH < "does" >,
   SYNSEM.PHON.ONSET con ].

has_aux_rbst := mal_va_has_le &
 [ ORTH < "have" >,
   SYNSEM.PHON.ONSET con ].

have_fin_aux_rbst := mal_va_have_fin_le &
 [ ORTH < "has" >,
   SYNSEM.PHON.ONSET con ].

has_neg_1_mal_rbst := v_vp_has-n_le_rbst &
 [ ORTH < "hasn't" >,
   SYNSEM.PHON.ONSET con ].

has_neg_2_mal_rbst := v_vp_has-n_le_rbst &
 [ ORTH < "has", "n't" >,
   SYNSEM.PHON.ONSET con ].

has_neg_3_mal_rbst := v_vp_has-n_le_rbst &
 [ ORTH < "hasn", "'t" >,
   SYNSEM.PHON.ONSET con ].

has_neg_1_q_mal_rbst := v_vp_has-n_le_rbst &
 [ ORTH < "hasn‘t" >,
   SYNSEM.PHON.ONSET con ].

has_neg_2_q_mal_rbst := v_vp_has-n_le_rbst &
 [ ORTH < "has", "n‘t" >,
   SYNSEM.PHON.ONSET con ].

has_neg_3_q_mal_rbst := v_vp_has-n_le_rbst &
 [ ORTH < "hasn", "‘t" >,
   SYNSEM.PHON.ONSET con ].

has_neg_1_u_mal_rbst := v_vp_has-n_le_rbst &
 [ ORTH < "hasn’t" >,
   SYNSEM.PHON.ONSET con ].

has_neg_2_u_mal_rbst := v_vp_has-n_le_rbst &
 [ ORTH < "has", "n’t" >,
   SYNSEM.PHON.ONSET con ].

has_neg_3_u_mal_rbst := v_vp_has-n_le_rbst &
 [ ORTH < "hasn", "’t" >,
   SYNSEM.PHON.ONSET con ].

hasnt_aux_1_rbst := v_vp_has-n_le &
 [ ORTH < "hasnt" >,
   SYNSEM.PHON.ONSET con,
   GENRE robust ].

have_neg_1_mal_rbst := v_vp_have-f-n_le_rbst &
 [ ORTH < "haven't" >,
   SYNSEM.PHON.ONSET con ].

have_neg_2_mal_rbst := v_vp_have-f-n_le_rbst &
 [ ORTH < "have", "n't" >,
   SYNSEM.PHON.ONSET con ].

have_neg_3_mal_rbst := v_vp_have-f-n_le_rbst &
 [ ORTH < "haven", "'t" >,
   SYNSEM.PHON.ONSET con ].

have_neg_1_q_mal_rbst := v_vp_have-f-n_le_rbst &
 [ ORTH < "haven‘t" >,
   SYNSEM.PHON.ONSET con ].

have_neg_2_q_mal_rbst := v_vp_have-f-n_le_rbst &
 [ ORTH < "have", "n‘t" >,
   SYNSEM.PHON.ONSET con ].

have_neg_3_q_mal_rbst := v_vp_have-f-n_le_rbst &
 [ ORTH < "haven", "‘t" >,
   SYNSEM.PHON.ONSET con ].

have_neg_1_u_mal_rbst := v_vp_have-f-n_le_rbst &
 [ ORTH < "haven’t" >,
   SYNSEM.PHON.ONSET con ].

have_neg_2_u_mal_rbst := v_vp_have-f-n_le_rbst &
 [ ORTH < "have", "n’t" >,
   SYNSEM.PHON.ONSET con ].

have_neg_3_u_mal_rbst := v_vp_have-f-n_le_rbst &
 [ ORTH < "haven", "’t" >,
   SYNSEM.PHON.ONSET con ].

have_fin_aux_neg_1_rbst := v_vp_have-f-n_le &
 [ ORTH < "havent" >,
   SYNSEM.PHON.ONSET con,
   GENRE robust ].

hadnt_aux_1_rbst := v_vp_had-n_le &
 [ ORTH < "hadnt" >,
   SYNSEM.PHON.ONSET con,
   GENRE robust ].

be_np_is_neg_mal_rbst := v_np_are-n_le_rbst &
 [ ORTH < "isn", "'t" >,
   SYNSEM.PHON.ONSET voc,
   GENRE robust ].

be_np_is_neg_q_mal_rbst := v_np_are-n_le_rbst &
 [ ORTH < "isn", "‘t" >,
   SYNSEM.PHON.ONSET voc,
   GENRE robust ].

be_np_is_neg_u_mal_rbst := v_np_are-n_le_rbst &
 [ ORTH < "isn", "’t" >,
   SYNSEM.PHON.ONSET voc,
   GENRE robust ].

be_np_are_neg_mal_rbst := v_np_is-n_le_rbst &
 [ ORTH < "aren", "'t" >,
   SYNSEM.PHON.ONSET voc,
   GENRE robust ].

be_np_are_neg_q_mal_rbst := v_np_is-n_le_rbst &
 [ ORTH < "aren", "‘t" >,
   SYNSEM.PHON.ONSET voc,
   GENRE robust ].

be_np_are_neg_u_mal_rbst := v_np_is-n_le_rbst &
 [ ORTH < "aren", "’t" >,
   SYNSEM.PHON.ONSET voc,
   GENRE robust ].

be_np_was_neg_mal_rbst := v_np_wre-n_le_rbst &
 [ ORTH < "wasn", "'t" >,
   SYNSEM.PHON.ONSET con,
   GENRE robust ].

be_np_was_neg_q_mal_rbst := v_np_wre-n_le_rbst &
 [ ORTH < "wasn", "‘t" >,
   SYNSEM.PHON.ONSET con,
   GENRE robust ].

be_np_was_neg_u_mal_rbst := v_np_wre-n_le_rbst &
 [ ORTH < "wasn", "’t" >,
   SYNSEM.PHON.ONSET con,
   GENRE robust ].

be_np_were_neg_mal_rbst := v_np_was-n_le_rbst &
 [ ORTH < "weren", "'t" >,
   SYNSEM.PHON.ONSET con,
   GENRE robust ].

be_np_were_neg_q_mal_rbst := v_np_was-n_le_rbst &
 [ ORTH < "weren", "‘t" >,
   SYNSEM.PHON.ONSET con,
   GENRE robust ].

be_np_were_neg_u_mal_rbst := v_np_was-n_le_rbst &
 [ ORTH < "weren", "’t" >,
   SYNSEM.PHON.ONSET con,
   GENRE robust ].

be_th_cop_is_rbst := mal_vc_there_is_le &
 [ ORTH < "is" >,
   SYNSEM.PHON.ONSET voc ].

be_th_cop_are_rbst := mal_vc_there_are_le &
 [ ORTH < "are" >,
   SYNSEM.PHON.ONSET voc ].

be_th_cop_was_rbst := mal_vc_there_was_le &
 [ ORTH < "was" >,
   SYNSEM.PHON.ONSET con ].

be_th_cop_were_rbst := mal_vc_there_were_le &
 [ ORTH < "were" >,
   SYNSEM.PHON.ONSET con ].

be_th_cop_is_neg_mal_rbst := v_np-xp_is-n_le_rbst &
 [ ORTH < "isn", "'t" >,
   SYNSEM.PHON.ONSET voc ].

be_th_cop_is_neg_q_mal_rbst := v_np-xp_is-n_le_rbst &
 [ ORTH < "isn", "‘t" >,
   SYNSEM.PHON.ONSET voc ].

be_th_cop_is_neg_u_mal_rbst := v_np-xp_is-n_le_rbst &
 [ ORTH < "isn", "’t" >,
   SYNSEM.PHON.ONSET voc ].

be_th_cop_are_neg_mal_rbst := v_np-xp_are-n_le_rbst &
 [ ORTH < "aren", "'t" >,
   SYNSEM.PHON.ONSET voc ].

be_th_cop_are_neg_q_mal_rbst := v_np-xp_are-n_le_rbst &
 [ ORTH < "aren", "‘t" >,
   SYNSEM.PHON.ONSET voc ].

be_th_cop_are_neg_u_mal_rbst := v_np-xp_are-n_le_rbst &
 [ ORTH < "aren", "’t" >,
   SYNSEM.PHON.ONSET voc ].

be_th_cop_was_neg_mal_rbst := v_np-xp_was-n_le_rbst &
 [ ORTH < "wasn", "'t" >,
   SYNSEM.PHON.ONSET con ].

be_th_cop_was_neg_q_mal_rbst := v_np-xp_was-n_le_rbst &
 [ ORTH < "wasn", "‘t" >,
   SYNSEM.PHON.ONSET con ].

be_th_cop_was_neg_u_mal_rbst := v_np-xp_was-n_le_rbst &
 [ ORTH < "wasn", "’t" >,
   SYNSEM.PHON.ONSET con ].

be_th_cop_were_neg_mal_rbst := v_np-xp_were-n_le_rbst &
 [ ORTH < "weren", "'t" >,
   SYNSEM.PHON.ONSET con ].

be_th_cop_were_neg_q_mal_rbst := v_np-xp_were-n_le_rbst &
 [ ORTH < "weren", "‘t" >,
   SYNSEM.PHON.ONSET con ].

be_th_cop_were_neg_u_mal_rbst := v_np-xp_were-n_le_rbst &
 [ ORTH < "weren", "’t" >,
   SYNSEM.PHON.ONSET con ].

be_c_is_rbst := mal_vc_prd_is_le &
 [ ORTH < "is" >,
   SYNSEM.PHON.ONSET voc ].

be_c_are_rbst := mal_vc_prd_are_le &
 [ ORTH < "are" >,
   SYNSEM.PHON.ONSET voc ].

be_c_was_rbst := mal_vc_prd_was_le &
 [ ORTH < "was" >,
   SYNSEM.PHON.ONSET con ].

be_c_were_rbst := mal_vc_prd_were_le &
 [ ORTH < "were" >,
   SYNSEM.PHON.ONSET con ].

be_c_be_rbst := mal_vc_prd_be_le &
 [ ORTH < "be" >,
   SYNSEM.PHON.ONSET con ].

be_c_been_rbst := mal_vc_prd_been_le &
 [ ORTH < "been" >,
   SYNSEM.PHON.ONSET con ].

be_np_be_rbst := mal_vc_np_be_le &
 [ ORTH < "be" >,
   SYNSEM.PHON.ONSET con ].

be_np_been_rbst := mal_vc_np_been_le &
 [ ORTH < "been" >,
   SYNSEM.PHON.ONSET con ].

be_np_is_rbst := v_np_is_le &
 [ ORTH < "are" >,
   SYNSEM [ LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.AGR.PNG.PN 3s,
            PHON.ONSET voc ],
   GENRE robust ].

be_np_are_rbst := v_np_are_le &
 [ ORTH < "is" >,
   SYNSEM.PHON.ONSET voc,
   GENRE robust ].

be_np_was_rbst := v_np_was_le &
 [ ORTH < "were" >,
   SYNSEM [ LOCAL.CAT [ HEAD.--MAL3SG +,
			VAL.SUBJ.FIRST.LOCAL.CAT.HEAD.--BARE + ],
            PHON.ONSET con ],
   GENRE robust ].

be_np_were_rbst := v_np_wre_le &
 [ ORTH < "was" >,
   SYNSEM [ LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CAT.HEAD.--BARE +,
            PHON.ONSET con ],
   GENRE robust ].

its_be_cop_rbst := v_prd_its-mal_le &
 [ ORTH < "its" >,
   SYNSEM.PHON.ONSET voc ].

its_be_np_rbst := v_np_its-mal_le &
 [ ORTH < "its" >,
   SYNSEM.PHON.ONSET voc ].

be_c_is_neg_rbst := v_prd_are-n_le &
 [ ORTH < "isn", "'t" >,
   SYNSEM.PHON.ONSET voc,
   ALTS.VPELLIP -,
   GENRE robust ].

be_c_is_neg_q_rbst := v_prd_are-n_le &
 [ ORTH < "isn", "‘t" >,
   SYNSEM.PHON.ONSET voc,
   ALTS.VPELLIP -,
   GENRE robust ].

be_c_is_neg_u_rbst := v_prd_are-n_le &
 [ ORTH < "isn", "’t" >,
   SYNSEM.PHON.ONSET voc,
   ALTS.VPELLIP -,
   GENRE robust ].

be_c_is_neg_noapos_rbst := v_prd_is-n_le &
 [ ORTH < "isnt" >,
   SYNSEM.PHON.ONSET voc,
   GENRE robust ].

be_c_are_neg_rbst := v_prd_is-n_le &
 [ ORTH < "aren", "'t" >,
   SYNSEM.PHON.ONSET voc,
   ALTS.VPELLIP -,
   GENRE robust ].

be_c_are_neg_q_rbst := v_prd_is-n_le &
 [ ORTH < "aren", "‘t" >,
   SYNSEM.PHON.ONSET voc,
   ALTS.VPELLIP -,
   GENRE robust ].

be_c_are_neg_u_rbst := v_prd_is-n_le &
 [ ORTH < "aren", "’t" >,
   SYNSEM.PHON.ONSET voc,
   ALTS.VPELLIP -,
   GENRE robust ].

be_c_are_neg_noapos_rbst := v_prd_are-n_le &
 [ ORTH < "arent" >,
   SYNSEM.PHON.ONSET voc,
   GENRE robust ].

be_c_was_neg_rbst := v_prd_wre-n_le &
 [ ORTH < "wasn", "'t" >,
   SYNSEM.PHON.ONSET con,
   ALTS.VPELLIP -,
   GENRE robust ].

be_c_was_neg_q_rbst := v_prd_wre-n_le &
 [ ORTH < "wasn", "‘t" >,
   SYNSEM.PHON.ONSET con,
   ALTS.VPELLIP -,
   GENRE robust ].

be_c_was_neg_u_rbst := v_prd_wre-n_le &
 [ ORTH < "wasn", "’t" >,
   SYNSEM.PHON.ONSET con,
   ALTS.VPELLIP -,
   GENRE robust ].

be_c_was_neg_noapos_rbst := v_prd_was-n_le &
 [ ORTH < "wasnt" >,
   SYNSEM.PHON.ONSET con,
   GENRE robust ].

be_c_were_neg_rbst := v_prd_was-n_le &
 [ ORTH < "weren", "'t" >,
   SYNSEM.PHON.ONSET con,
   ALTS.VPELLIP -,
    GENRE robust ].

be_c_were_neg_q_rbst := v_prd_was-n_le &
 [ ORTH < "weren", "‘t" >,
   SYNSEM.PHON.ONSET con,
   ALTS.VPELLIP -,
    GENRE robust ].

be_c_were_neg_u_rbst := v_prd_was-n_le &
 [ ORTH < "weren", "’t" >,
   SYNSEM.PHON.ONSET con,
   ALTS.VPELLIP -,
    GENRE robust ].

be_c_were_neg_noapos_rbst := v_prd_wre-n_le &
 [ ORTH < "werent" >,
   SYNSEM.PHON.ONSET con,
   GENRE robust ].

has_aux_finc_rbst := v_vp_has-mal_le &
 [ ORTH < "has" >,
   SYNSEM.PHON.ONSET con ].

have_aux_finc_rbst := v_vp_have-mal_le &
 [ ORTH < "have" >,
   SYNSEM.PHON.ONSET con ].

;; Double plural

childrens_n1_rbst := n_-_c-pl_le_rbst &
 [ ORTH < "childrens" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_child_n_1_rel",
            PHON.ONSET con ] ].

polices_n1_rbst := n_-_c-pl_le_rbst &
 [ ORTH < "polices" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_police_n_1_rel",
            PHON.ONSET con ] ].

people_n1_rbst := mal_n_plur_ppcomp_le &
 [ ORTH < "peoples" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
		    KEYREL.PRED "_people_n_rel" ],
	    PHON.ONSET con ] ].

deteriorate_mal_v1_rbst := v_np_caus_le_rbst &
 [ ORTH < "deteriorate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_deteriorate_v_1_rel",
            PHON.ONSET con ] ].

disappear_mal_v1_rbst := v_np_caus_le_rbst &
 [ ORTH < "disappear" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_disappear_v_1_rel",
            PHON.ONSET con ] ].

because_that_rbst := p_cp_s_le &
 [ ORTH < "because", "that" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_because_x_rel",
            PHON.ONSET con ],
   GENRE robust ].

because_to_rbst := p_vp_inf_le &
 [ ORTH < "because" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_because+to_x_rel",
            PHON.ONSET con ],
   GENRE robust ].

every_all_rbst := d_-_prt-plm_le &
 [ ORTH < "every" >,
   SYNSEM [ LKEYS.KEYREL.PRED _all_q_rel,
            LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.AGR.PNG.PN 3p,
            PHON.ONSET voc ],
   GENRE robust ].

other_rbst := d_-_prt-sg_le &
 [ ORTH < "other" >,
   SYNSEM [ LKEYS.KEYREL.PRED udef_q_rel,
            PHON.ONSET voc ],
   GENRE robust ].

everyday_adv_rbst := av_-_i-vp-po_le &
 [ ORTH < "everyday" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_every+day_a_1_rel",
            PHON.ONSET voc ],
   GENRE robust ].

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Pronouns with mismatched case

him_rbst := n_-_pr-he_le &
 [ ORTH < "him" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.HEAD.MINORS.NORM no_rel ],
   GENRE robust ].

; Avoid spurious ambiguity for e.g. "taller than he"
he_rbst := n_-_pr-him_le &
 [ ORTH < "he" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.HEAD.MINORS.NORM no_rel ],
   GENRE robust ].

she_rbst := n_-_pr-her_le &
 [ ORTH < "she" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.HEAD.MINORS.NORM no_rel ],
   GENRE robust ].

her_rbst := n_-_pr-she_le &
 [ ORTH < "her" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.HEAD.MINORS.NORM no_rel ],
   GENRE robust ].

them_rbst := n_-_pr-they_le &
 [ ORTH < "them" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.HEAD.MINORS.NORM no_rel ],
   GENRE robust ].

they_rbst := n_-_pr-them_le &
 [ ORTH < "they" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.HEAD.MINORS.NORM no_rel ],
   GENRE robust ].

me_rbst := n_-_pr-i_le &
 [ ORTH < "me" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.HEAD.MINORS.NORM no_rel ],
   GENRE robust ].

i_pron_rbst := n_-_pr-me_le &
 [ ORTH < "I" >,
   SYNSEM [ PHON.ONSET voc,
            LOCAL.CAT.HEAD.MINORS.NORM no_rel ],
   GENRE robust ].

us_pron_rbst := n_-_pr-we_le &
 [ ORTH < "us" >,
   SYNSEM [ PHON.ONSET voc,
            LOCAL.CAT.HEAD.MINORS.NORM no_rel ],
   GENRE robust ].

;; This one leads to too many false positives, so comment out for now
;we_rbst := n_-_pr-us_le &
; [ ORTH < "we" >,
;   SYNSEM [ PHON.ONSET con,
;            LOCAL.CAT.HEAD.MINORS.NORM no_rel ],
;   GENRE robust ].

;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

i_e_p1 := p_np_i-ngap_le &
 [ ORTH < "i.e." >,
   SYNSEM [ LKEYS.KEYREL.PRED _i+e_p_rel,
            PHON.ONSET voc ],
   GENRE robust ].

i_e_p2 := p_np_i-ngap_le &
 [ ORTH < "i.e" >,
   SYNSEM [ LKEYS.KEYREL.PRED _i+e_p_rel,
            PHON.ONSET voc ],
   GENRE robust ].

i_e_p2c := p_np_i-ngap_le &
 [ ORTH < "i.e," >,
   SYNSEM [ LKEYS.KEYREL.PRED _i+e_p_rel,
            PHON.ONSET voc ],
   GENRE robust ].

i_e_p3 := p_np_i-ngap_le &
 [ ORTH < "ie" >,
   SYNSEM [ LKEYS.KEYREL.PRED _i+e_p_rel,
            PHON.ONSET voc ],
   GENRE robust ].

i_e_p3c := p_np_i-ngap_le &
 [ ORTH < "ie," >,
   SYNSEM [ LKEYS.KEYREL.PRED _i+e_p_rel,
            PHON.ONSET voc ],
   GENRE robust ].

i_e_p4 := p_np_i-ngap_le &
 [ ORTH < "i.", "e." >,
   SYNSEM [ LKEYS.KEYREL.PRED _i+e_p_rel,
            PHON.ONSET voc ],
   GENRE robust ].

i_e_p5 := p_np_i-ngap_le &
 [ ORTH < "ie." >,
   SYNSEM [ LKEYS.KEYREL.PRED _i+e_p_rel,
            PHON.ONSET voc ],
   GENRE robust ].

i_e_p5c := p_np_i-ngap_le &
 [ ORTH < "ie.," >,
   SYNSEM [ LKEYS.KEYREL.PRED _i+e_p_rel,
            PHON.ONSET voc ],
   GENRE robust ].

i_e_p6 := p_pp_i-coprd_le &
 [ ORTH < "i.e." >,
   SYNSEM [ LKEYS.KEYREL.PRED _i+e_p_rel,
            PHON.ONSET voc ],
   GENRE robust ].

i_e_p7 := p_cp_s-notop_le &
 [ ORTH < "i.e." >,
   SYNSEM [ LKEYS.KEYREL.PRED _i+e_p_rel,
            PHON.ONSET voc ],
   GENRE robust ].

i_e_p7c := p_cp_s-notop_le &
 [ ORTH < "i.e.," >,
   SYNSEM [ LKEYS.KEYREL.PRED _i+e_p_rel,
            LOCAL.CAT.HEAD.MOD.FIRST.LOCAL.CAT.MC bool,
            PHON.ONSET voc ] ].

i_e_root_post_1 := av_-_s-cp-nsp-po_le &
 [ ORTH < "i.e" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_i+e_a_1_rel",
            PHON.ONSET voc ],
   GENRE robust ].

i_e_root_post_2 := av_-_s-cp-nsp-po_le &
 [ ORTH < "ie" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_i+e_a_1_rel",
            PHON.ONSET voc ],
   GENRE robust ].

i_e_root_post_5 := av_-_s-cp-nsp-po_le &
 [ ORTH < "i.e." >,
   SYNSEM [ LKEYS.KEYREL.PRED "_i+e_a_1_rel",
            PHON.ONSET voc ],
   GENRE robust ].

i_e_root_pre_1 := av_-_s-cp-mc-pr_le &
 [ ORTH < "i.e" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_i+e_a_1_rel",
            PHON.ONSET voc ],
   GENRE robust ].

i_e_root_pre_2 := av_-_s-cp-mc-pr_le &
 [ ORTH < "ie" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_i+e_a_1_rel",
            PHON.ONSET voc ],
   GENRE robust ].

i_e_root_pre_5 := av_-_s-cp-mc-pr_le &
 [ ORTH < "i.e." >,
   SYNSEM [ LKEYS.KEYREL.PRED "_i+e_a_1_rel",
            PHON.ONSET voc ],
   GENRE robust ].

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Block adj-to-adv rule

better_a1 := aj_pp_i-cmp_le &
 [ ORTH < "better" >,
   ALTS.JTOR -,
   SYNSEM [ LKEYS.KEYREL.PRED "_good_a_at-for-of_rel",
            PHON.ONSET con ] ].

colon_namely_pp := pp_-_i-cln_le &
 [ ORTH < ":" >,
   SYNSEM [ LKEYS.KEYREL.PRED _colon_p_namely_rel,
            LOCAL.CAT.HEAD.MOD.FIRST.LOCAL.CAT.HEAD n_or_p_or_a,
            PHON.ONSET con ] ].

colon_namely_pp_rbst := pp_-_i-cln_le &
 [ ORTH < ":" >,
   SYNSEM [ LKEYS.KEYREL.PRED _colon_p_namely_rel,
            LOCAL.CAT.HEAD.MOD.FIRST.LOCAL.CAT.HEAD verb,
            PHON.ONSET con ],
   GENRE robust ].

colon_copula_v := v_np_colon_le &
 [ ORTH < ":" >,
   SYNSEM.PHON.ONSET con_or_voc,
   GENRE robust ].

;; This one is inconsistent, so let's try doing without.  CHECK contrast.
#|
colon_subord := p_cp_s-cln_le &
 [ ORTH < ":" >,
   SYNSEM [ LKEYS.KEYREL.PRED _colon_p_namely_rel,
            PHON.ONSET con ],
   GENRE robust ].
|#

respectively_adv1 := pp_-_i_le &
 [ ORTH < "respectively" >,
   SYNSEM [ LKEYS.KEYREL.PRED _respective_a_1_rel,
            LOCAL.CAT.HEAD.MOD.FIRST.PUNCT.RPUNCT comma_punct,
            PHON.ONSET con ] ].

respectively_adv1_rbst := pp_-_i_le &
 [ ORTH < "respectively" >,
   SYNSEM [ LKEYS.KEYREL.PRED _respective_a_1_rel,
            LOCAL.CAT.HEAD.MOD.FIRST.PUNCT.RPUNCT no_punct,
            PHON.ONSET con ],
   GENRE robust ].

eqs_pn_np1 := n_-_pn-nounif_le &
 [ ORTH < "Eqs" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Eqs",
            PHON.ONSET voc ] ].

eqs_pn_np2 := n_-_pn-nounif_le &
 [ ORTH < "Eqs." >,
   SYNSEM [ LKEYS.KEYREL.CARG "Eqs",
            PHON.ONSET voc ] ].

higgs_pn := n_-_pn_le &
 [ ORTH < "Higgs" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Higgs",
            PHON.ONSET con ] ].

;; count only
method_n1 := n_-_c-ns_le &
 [ ORTH < "method" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_method_n_of_rel",
            PHON.ONSET con ] ].

;; count only, and not bare
equation_n1 := n_pp_c-of_le &
 [ ORTH < "equation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_equation_n_of_rel",
            LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET voc ] ].

figure_n1 := n_-_mc_le &
 [ ORTH < "figure" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_figure_n_1_rel",
            LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

;; count only
mesh_n1 := n_-_c_le &
 [ ORTH < "mesh" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mesh_n_1_rel",
            PHON.ONSET con ] ].

work_n1 := n_-_m_le &
 [ ORTH < "work" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_work_n_1_rel",
            PHON.ONSET con ] ].

work_n1_rbst := n_-_c-pl_le &
 [ ORTH < "works" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_work_n_1_rel",
            PHON.ONSET con ],
   GENRE robust ].

;; mass only
literature_n1 := n_-_m_le &
 [ ORTH < "literature" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_literature_n_1_rel",
            PHON.ONSET con ] ].

;; count only
signal_n1 := n_-_c_le &
 [ ORTH < "signal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_signal_n_1_rel",
            PHON.ONSET con ] ].

;; Interferes with inverted "not only did we ..."
#|
only_adv1 := av_-_i-vp-x-only_le &
 [ ORTH < "only" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_only_a_1_rel",
            PHON.ONSET voc ] ].

only_adv1_rbst := av_-_i-vp-pr_le &
 [ ORTH < "only" >,
   SYNSEM [ LOCAL.CAT.HEAD.MOD < [ LOCAL.CAT.HEAD.AUX + ] >,
            LKEYS.KEYREL.PRED "_only_a_to_rel",
            PHON.ONSET voc ],
   GENRE robust ].
|#

;; In general, nouns that can appear in detless-PP constructions as in
;; |on top| or |point of view| should be made to avoid robust bare-NP if in
;; a correct context, but this will have to be parse selection.  Patch for now.
;; 
view_n1 := n_pp_c-ns-of_le &
 [ ORTH < "view" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_view_n_of_rel",
            LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

;; Allow to be count for scientific writing
;;
oxygen_n1 := n_-_mc_le &
 [ ORTH < "oxygen" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_oxygen_n_1_rel",
            PHON.ONSET voc ] ].


;; Prevent bare NP to avoid spurious analysis for |on page _REF_|
page_n1 := n_-_c_le &
 [ ORTH < "page" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_page_n_1_rel",
            LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

page_n2 := n_-_c-meas_le &
 [ ORTH < "page" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_page_n_1_rel",
            LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

table_n1 := n_-_c_le &
 [ ORTH < "table" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_table_n_1_rel",
            LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

;; In general, when the lexicon includes a mass/count pair of entries, the
;; count one should be --BARE -.
;;
respect_n2 := n_-_c_le &
 [ ORTH < "respect" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_respect_n_for_rel",
            LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

office1 := n_pp_c_le &
 [ ORTH < "office" >,
   SYNSEM [ LKEYS [ --COMPKEY of_p_sel_rel,
                    KEYREL.PRED "_office_n_of_rel" ],
            LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET voc ] ].

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; without oblig specifier on noun: |we bought last cookies|
last_a1_rbst := aj_-_i_le &
 [ ORTH < "last" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_last_a_1_rel",
            LOCAL.CAT.HEAD.MOD < unexpressed >,
            PHON.ONSET con ],
   GENRE robust ].

etal_conj := c_-_etal_le &
 [ ORTH < "et", "al" >,
   SYNSEM.PHON.ONSET voc,
   GENRE robust ].

etal_conj_3 := c_-_etal_le &
 [ ORTH < "et.", "al." >,
   SYNSEM.PHON.ONSET voc,
   GENRE robust ].

;; Avoid extracted subj of robust 3s as in |what follows|
what1 := n_-_pr-wh_le &
 [ ORTH < "what" >,
   SYNSEM [ LKEYS.KEYREL.PRED thing_rel,
            LOCAL.CAT.HEAD.--BARE +,
            PHON.ONSET con ] ].

what2 := n_-_pr-fr_le &
 [ ORTH < "what" >,
   SYNSEM [ LKEYS.KEYREL.PRED thing_rel,
            PHON.ONSET con ] ].

whatever1 := n_-_pr-fr-ever_le &
 [ ORTH < "whatever" >,
   SYNSEM [ LKEYS.KEYREL.PRED thing_rel,
            PHON.ONSET con ] ].

who1 := n_-_pr-who_le &
 [ ORTH < "who" >,
   SYNSEM [ LKEYS.KEYREL.PRED person_rel,
            LOCAL.CAT.HEAD.--BARE +,
            PHON.ONSET con ] ].

