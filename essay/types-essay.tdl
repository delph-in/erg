alts :+ [ PLMASS bool ].

;; For robust plural of mass nouns
;;
lex_rule_plural_mass := lex_rule_basic & word_or_infl_rule &
  [ INFLECTD +,
    KEY-ARG #keyarg,   
    SYNSEM mass_or_count_synsem &
	   [ LOCAL [ CAT #cat & [ HEAD noun_or_ttl & [ --BARE - ],
				  VAL.SPR < synsem &
					    [ LOCAL.AGR [ PNG.PN 3p,
							  DIV + ] ] > ],
		     CONT #cont,
		     CONJ #conj,
		     CTXT #ctxt,
		     ARG-S #arg-s ],
	     NONLOC #nonloc,
	     OPT #opt,
	     --MIN #min,
	     --SIND #sind,
	     LEX #lex,
	     MODIFD #modifd,
	     PHON #phon,
	     PUNCT #punct,
	     LKEYS #lkeys ],
    ARGS < #dtr >,
    DTR #dtr & [ INFLECTD -,
                 KEY-ARG #keyarg,   
		 ALTS.PLMASS +,
                 SYNSEM basic_mass_noun_synsem &
			[ LOCAL [ CAT #cat,
				  CONT #cont,
				  CONJ #conj,
				  CTXT #ctxt,
				  AGR [ PNG.PN 3s,
					DIV + ],
				  ARG-S #arg-s ],
			  NONLOC #nonloc,
			  OPT #opt,
			  --MIN #min,
			  --SIND #sind,
			  LEX #lex,
			  MODIFD #modifd,
			  PHON #phon,
			  PUNCT #punct,
			  LKEYS #lkeys ] ],
    C-CONT.RELS <! !>,
    GENRE robust ].

; Add feature for blocking mal-3sg and mal-n3sg
;
vc_add :+ [ --MAL3SG bool,
            --MALN3SG bool ].

;; |this cats|
mal_det_pl_le := det_pl_lexent &
  [ SYNSEM.LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CAt.HEAD.--BARE -,
    GENRE robust ].

; "One books"
mal_num_det_rule_1 := num_det_phrase & rule &
  [ SYNSEM.LOCAL.CAT.VAL.SPEC < [ LOCAL [ AGR.PNG.PN 3p,
    			      	          CAT.HEAD.MINORS.NORM 
					                 norm_or_no_rel ] ] >,
    ARGS < [ SYNSEM.LOCAL.CAT.HEAD [ MOD < [ LOCAL.AGR.PNG.PN 3s ] >,
				     MINORS.NORM norm_rel ] ] >,
    GENRE robust ].

; "Twenty book"
mal_num_det_rule_2 := num_det_phrase & rule &
  [ SYNSEM.LOCAL.CAT.VAL.SPEC < [ LOCAL [ AGR.PNG.PN 3s,
					  CAT.HEAD [ --BARE +,
						     MINORS.NORM 
					                 norm_or_no_rel ] ] ] >,
    ARGS < [ SYNSEM.LOCAL.CAT.HEAD.MOD < [ LOCAL.AGR.PNG.PN 3p ] > ] >,
    GENRE robust ].


;; |X permits to Y|
v_vp_seq_le_rbst := main_verb & 
  [ SYNSEM subj_equi_verb,
    GENRE robust ].

; |She wants win.|
v_vp_seq-bse_le_rbst := main_verb_mliszt & 
  [ SYNSEM subj_equi_bse_verb,
    GENRE robust ].

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Missing |to| for raising verbs: |they tend win.|

ssr_bse_verb := verb_synsem & ssr_subst & bse_intrans_subst & basic_two_arg &
  [ LOCAL [ CAT.VAL [ SUBJ.FIRST.LOCAL.CONT.HOOK.LTOP #ltop,
		      KCMP.LOCAL.CONT.HOOK [ LTOP #chand ] ],
	    CONT [ HOOK [ LTOP #ltop ],
		   RELS <! #keyrel !>,
		   HCONS <! qeq &
			   [ HARG #arghand,
			     LARG #chand ] !>,
		   ICONS <! !> ] ],
    LKEYS.KEYREL arg1_relation & #keyrel & [ ARG1 handle & #arghand ] ].

ssr_bse_noimp_verb := ssr_bse_verb & 
  [ LOCAL.CAT.HEAD.VFORM fin_or_non_fin ].

v_vp_ssr-nimp_le_rbst := main_verb & 
  [ SYNSEM ssr_bse_noimp_verb,
    GENRE robust ].

;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Restrict normal transitives missing object to --MAL3SG + to prevent
; these from appearing in conjoined verb phrases, avoiding spurious ambiguity
; for e.g. "Kim buys and sells books"
; DPF 19-feb-10 - Also constrain to SLASH 0-dlist, to avoid mis-analysis for
; e.g. `Mark brought the [cookies he made for] his class.'
; DPF 19-apr-10 - --COMPKEY is hack to prevent attrib-adj LR, as in 
; "Mariah is making pasta"
v_-_le_rbst := main_verb & 
  [ SYNSEM unerg_verb &
           [ LOCAL.CAT.HEAD [ --MAL3SG + ],
	     NONLOC.SLASH 0-dlist,
	     LKEYS.--COMPKEY selected_rel ],
    GENRE robust ].

; e.g. 'tell'
; Exclude robust 3sg in CP complement, to avoid competing treatment for e.g.
; `she told her brother borrow her book'.
v_cp_le_rbst := main_verb & 
  [ SYNSEM cp_intrans_verb &
           [ LOCAL.CAT [ VAL.COMPS < [ LOCAL.CAT.HEAD.--MAL3SG -,
				       NONLOC.SLASH 0-dlist ] > ] ],
    GENRE robust ].

;; For e.g. "went the store"
;; Add COMPS..CASE acc to block v_mod rule for e.g. "went to visit her house"
v_np_pp_le_rbst := main_verb & 
  [ SYNSEM np_trans_verb &
     [ LOCAL.CAT [ VAL.COMPS < canonical_synsem &
			       [ OPT -,
				 LOCAL.CAT.HEAD noun &
				     [ --BARE -,
				       CASE acc ],
				 PUNCT.RPUNCT comma_or_clause_or_no_punct ] >]],
    GENRE robust ].

;; |we allow Kim arise|
v_np-vp_bse_le_rbst := main_verb_mliszt & 
  [ SYNSEM sorb_verb,
    GENRE robust ].

; e.g. `This lets the cat to enter'
v_np-vp_oeq_le_rbst := main_verb & 
  [ SYNSEM obj_equi_verb,
    GENRE robust ].

;; Mal lex entry for e.g. "allow" taking a base VP complement with gerund 
;; meaning as in 
;; |This allows open the door|.
;;
mal_v_bse-inf_vp_comp_verb := inf_or_prp_intrans_subst & arg1_subj_lt & 
			  basic_two_arg & norm_basic_verb_synsem &
   [ LOCAL [ CAT.VAL.COMPS < [ LOCAL [ CAT [ HEAD.VFORM bse_or_inf,
					     VAL.SUBJ < unexpressed > ],
				       CONT [ HOOK [ INDEX #ind,
						     LTOP #larg ] ] ] ] >,
	     CONT [ RELS <! relation !>,
		    HCONS <! qeq &
			     [ HARG #harg,
			       LARG #larg ]!> ] ],
     LKEYS.KEYREL arg12_relation &
	          [ ARG2 #harg ] ].

;; For e.g. |allow| missing both a direct object and the infinitival "to"
v_vp_np-bse_le_rbst := main_verb_mliszt &
   [ SYNSEM mal_v_bse-inf_vp_comp_verb &
       [ LOCAL.CAT [ VAL.COMPS < [ OPT -,
				   LOCAL.CAT.HEAD.VFORM bse ] > ] ],
     GENRE robust ].

;; For e.g. |enjoy| with bse or inf VP instead of pres-part complement
v_vp_prp_le_rbst := main_verb_mliszt &
   [ SYNSEM mal_v_bse-inf_vp_comp_verb &
       [ LOCAL.CAT [ VAL.COMPS < [ OPT - ] > ] ],
     GENRE robust ].

;; Mal lex entry for e.g. "enjoy" taking a bare-VP or inf-VP complement
;; instead of a gerund, as in |we enjoy read the book|.
;;


;; Plural det with singular count noun (all, several, many, more, most)
;; as in |all cat arose|
;; Avoid combining with _MATH_, since good alternative
;;
aj_-_i-one_le_rbst := aj_-_i-one_lexent &
  [ SYNSEM [ LOCAL [ CAT [ HEAD [ MINORS [ ALTMIN no_rel,
					   NORM no_rel ],
				  MOD < expressed_synsem &
					[ LOCAL [ CAT [ VAL.SPR < unexpressed >,
							HEAD.--BARE + ],
						  CONT.HOOK.INDEX.DIV - ] ] > ],
			   VAL.COMPS *synnull* ],
		     CONT.HOOK.XARG.SORT non-time-sort ],
	     MODIFD.LPERIPH na_or_+ ],
    GENRE robust ].

;; DPF 13-03-14 - Drop the requirement for MOD's SPR to be explicit, so we can
;; robustly parse |we admire best performer|.  This means we won't catch
;; erroneous |we admire best performers|.  FIX someday?
;;
aj_-_i-sup_le := compar_superl_adj_word &
  [ SYNSEM adj_unsp_ind_onearg_synsem &
    [ LOCAL [ CAT [ HEAD superl_adj & [ MINORS.ALTMIN superl_rel ],
                    VAL.SPR.FIRST.--MIN ord_or_very_rel ],
              CONT.RELS <! relation, relation !> ],
      LKEYS.ALTKEYREL.PRED superl_rel ] ].


;; Allow nouns to decline the robust a/an + mass-noun rule
noun :+ [ --MALCM bool ].

; "an information", "a homework"
d_-_m-c_mal_lexent := det_word &
  [ SYNSEM [ LOCAL [ CAT [ HEAD.MINORS.ALTMIN dofw_or_poss_q_rel,
                           VAL.SPEC < [ LOCAL.CAT.HEAD [ --BARE +,
							 --MALCM + ] ] > ],
                     AGR [ PNG.PN 3s,
		           DIV + ] ],
             NONLOC.QUE 0-dlist ],
    GENRE robust ].

d_-_m-c-mal-a_le := d_-_m-c_mal_lexent &
 [ SYNSEM.LOCAL.CAT.VAL.SPEC < [ PHON.ONSET con ] > ].

d_-_m-c-mal-an_le := d_-_m-c_mal_lexent &
 [ SYNSEM.LOCAL.CAT.VAL.SPEC < [ PHON.ONSET voc ] > ].

; Underspecified determiner for repairing bare singular
; NPs in generation.  Note the special KEY.

mal_bare_div_q_rel := implicit_q_rel.

d_-_sg-nmd-mal_le := basic_det_sg_nomod_lexent &
  [ SYNSEM.LOCAL.CAT.VAL.SPEC < [ PHON.ONSET con_or_unk ] >,
    GENRE robust ].

d_-_sg-a-a-mal_le := det_sg_nomod_lexent &
  [ SYNSEM.LOCAL.CAT.VAL.SPEC < [ PHON.ONSET con_or_voc ] >,
    GENRE robust ].

;; For wrong prep, as in |the reason of the mistake|
;;
n_pp_c_le_rbst := n_ppcomp_lexent &
  [ SYNSEM.LOCAL [ CAT.VAL.COMPS < [ OPT - ] >,
		   CONT [ RELS <! relation !>,
			  HCONS <! !> ] ],
    GENRE robust ].

n_pp_m_le_rbst := noun_word &
  [ SYNSEM mass_noun_ppcomp_synsem &
           [ LOCAL [ CAT [ HEAD.--MALCM -,
			   VAL.COMPS < [ OPT - ] > ],
	   	     CONT [ RELS <! relation !>,
			    HCONS <! !> ] ],
             MODIFD notmod ],
    GENRE robust ].

adj_equi_bse_rbst_synsem := basic_adj_equi_synsem & 
  [ LOCAL [ CAT [ HEAD adj,
		  VAL [ SPR.FIRST synsem &
				  [ --MIN more_or_very_deg_rel,
				    LOCAL.CAT.HS-LEX #hslex ],
			COMPS < [ LOCAL [ CAT.HEAD.VFORM bse,
					  CONT [ HOOK.LTOP #vhand ] ] ] > ],
		  HS-LEX #hslex ],
	    CONT [ RELS <! adj_relation !>,
		   HCONS <! qeq & [ HARG #hand,
				    LARG #vhand ] !> ] ],
    MODIFD notmod,
    LKEYS.KEYREL.ARG2 handle & #hand ].

adj_vp_bse_mal_lr := lex_rule &
  [ ORTH #orth,
    DTR [ ORTH #orth,
	  SYNSEM reg_adj_equi_synsem &
	         [ LOCAL [ CAT [ HEAD #head,
				 VAL [ SUBJ #subj,
				       SPR #spr,
				       SPCMPS #spcmps ] ],
                           CTXT #ctxt ],
		   NONLOC #non-local,
		   MODIFD #modif ] ],
    SYNSEM adj_equi_bse_rbst_synsem &
	  [ LOCAL [ CAT [ HEAD #head,
			  VAL [ SUBJ #subj,
				SPR #spr,
				SPCMPS #spcmps ] ],
		    CTXT #ctxt ],
	    NONLOC #non-local,
	    MODIFD #modif ],
    C-CONT [ RELS <! !>,
             HCONS <! !> ],
    GENRE robust ].

; Allow robust post-VP adverbs: "He sang bad"
;
av_-_i-vp-po_le_rbst := int_vp_adverb_word & 
  [ SYNSEM [ LOCAL.CAT [ HEAD adv & [ MINORS.MIN adv_rel,
                                      MOD < [ LOCAL.CAT.HEAD v_or_g_or_a,
                                              MODIFD.RPERIPH na_or_- ] > ],
                         POSTHD + ],
             MODIFD hasmod ],
    GENRE robust ].

;; Allow robust comparative specifier with comparative adverb: |more faster|
;;
av_-_i-vp-cmp_le_rbst := basic_adverb_word &
  [ SYNSEM intersect_vp_adverb_synsem &
           [ LOCAL.CAT [ VAL.SPR.FIRST [ --MIN more_deg_rel,
					 OPT - ],
			 POSTHD + ] ],
    GENRE robust ].

;; Same for comparative adjectives: |more shorter|

aj_-_i-cmp_le_rbst := reg_intrans_adj &
  [ SYNSEM.LOCAL.CAT [ HEAD.MINORS.MIN norm_adj_rel,
		       VAL.SPR.FIRST expressed_synsem &
				     [ --MIN more_deg_rel ] ],
    ALTS.JTOR -,
    GENRE robust ].

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Mal-forms for auxiliaries for subj-verb agreement

mal_va_does_le := do_pres & 
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ < [ --SIND.PNG png & [ PN 3s ] ] >,
    ALTS [ VPELLIP -,
	   ADVADD - ],
    GENRE robust ].

va_doesnt_neg_pres_le_rbst := do_aux_neg_pres & 
  [ SYNSEM.LOCAL [ CAT.VAL.SUBJ.FIRST.LOCAL.CAT.HEAD.--BARE +,
                   AGR.PNG png & [ PN 3s ] ],
    ALTS [ VPELLIP -,
	   ADVADD - ],
    GENRE robust ].

va_dont_neg_pres_le_rbst := do_aux_neg_pres &
  [ SYNSEM.LOCAL.AGR.PNG png & [ PN -3s ],
    ALTS [ VPELLIP -,
	   ADVADD - ],
    GENRE robust ].

mal_va_do_fin_le := do_pres &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ < [ --SIND.PNG png & [ PN -3s ] ] >,
    ALTS [ VPELLIP -,
	   ADVADD - ],
    GENRE robust ].

mal_va_has_le := has_aux_lex_ent &
  [ INFLECTD +,
    ALTS.VPELLIP -,
    GENRE robust ].

mal_va_have_fin_le := have_fin_aux_lex_ent &
  [ INFLECTD +,
    ALTS.VPELLIP -,
    GENRE robust ].

v_vp_has-n_le_rbst := have_aux_neg_lex_entry & have_pres & 
  [ SYNSEM.LOCAL.AGR.PNG.PN -3s,
    ALTS.VPELLIP -,
    GENRE robust ].

v_vp_have-f-n_le_rbst := have_aux_neg_lex_entry & have_pres & 
  [ SYNSEM.LOCAL.AGR.PNG.PN 3s,
    ALTS.VPELLIP -,
    GENRE robust ].

mal_vc_there_synsem := there_cop_verb &
  [ LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.MINORS 
					      [ MIN non_temp_nom_rel,
					        ALTMIN def_udef_some_a_no_q_rel,
						NORM no_rel ] ].
mal_vc_there_is_le := vc_there_are_lexent &
  [ GENRE robust,
    ALTS.VPELLIP -,
    SYNSEM mal_vc_there_synsem ].

mal_vc_there_are_le := vc_there_is_lexent &
  [ GENRE robust,
    ALTS.VPELLIP -,
    SYNSEM mal_vc_there_synsem ].

mal_vc_there_was_le := vc_there_were_lexent &
  [ GENRE robust,
    ALTS.VPELLIP -,
    SYNSEM mal_vc_there_synsem ].

mal_vc_there_were_le := vc_there_was_lexent &
  [ GENRE robust,
    ALTS.VPELLIP -,
    SYNSEM mal_vc_there_synsem &
	  [ LOCAL.CAT.HEAD.--MAL3SG + ] ].

v_np-xp_is-n_le_rbst := be_are_neg_contr_lex_entry & be_th_cop_neg &
  [ GENRE robust ].

v_np-xp_are-n_le_rbst := be_is_neg_contr_lex_entry & be_th_cop_neg &
  [ GENRE robust ].

v_np-xp_was-n_le_rbst := be_were_neg_contr_lex_entry & be_th_cop_neg &
  [ GENRE robust ].

v_np-xp_were-n_le_rbst := be_was_neg_contr_lex_entry & be_th_cop_neg &
  [ GENRE robust ].

;; DPF 2012-08-17 - Removed SLASH 0-dlist from SUBJ for these, since we
;; want |the bear who are admired|.  Maybe we'll recall why this was added.

mal_vc_prd_is_le := vc_prd_are_lexent &
  [ ALTS.VPELLIP -,
    SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST expressed_synsem & 
                                    [ LOCAL [ AGR.PNG.PN 3p,
					      CAT.HEAD.MINORS.NORM norm_rel ] ],
    GENRE robust ].

mal_vc_prd_are_le := vc_prd_is_lexent &
  [ ALTS.VPELLIP -,
    SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL [ AGR.PNG.PN sg,
					    CONT.HOOK.INdEX.SORT non-time-sort],
    GENRE robust ].

mal_vc_prd_was_le := vc_prd_were_lexent &
  [ ALTS.VPELLIP -,
    SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL [ AGR.PNG.PN 3p,
					    CAT.HEAD.MINORS.NORM norm_rel ],
    GENRE robust ].

mal_vc_prd_were_le := vc_prd_was_lexent &
  [ ALTS.VPELLIP -,
    SYNSEM.LOCAL.CAT [ HEAD.--MAL3SG +,
                       VAL.SUBJ.FIRST.LOCAL.AGR.PNG.PN sg ],
    GENRE robust ].

; Treat robust "be" and "been" as VFORM prp, so they trigger the robust
; subj-head rule which needs to avoid allowing ordinary base form verbs
; (identical to non-3sg) and ordinary past participles (identical to 
; past tense).
mal_vc_prd_be_le := vc_prd_be_lexent &
  [ SYNSEM.LOCAL.CAT.HEAD.VFORM fin,
    ALTS.VPELLIP -,
    GENRE robust ].

mal_vc_np_be_le := vc_np_be_lexent &
  [ SYNSEM.LOCAL.CAT.HEAD.VFORM fin,
    ALTS.VPELLIP -,
    GENRE robust ].

mal_vc_prd_been_le := vc_prd_been_lexent &
  [ SYNSEM.LOCAL.CAT.HEAD.VFORM prp,
    ALTS.VPELLIP -,
    GENRE robust ].

mal_vc_np_been_le := vc_np_been_lexent &
  [ SYNSEM.LOCAL.CAT.HEAD.VFORM prp,
    ALTS.VPELLIP -,
    GENRE robust ].

;; Missing apostrophe for contraction of "it is"
be_is_mal_lex_entry := nonc-h &
  [ INFLECTD +,
    ALTS.VPELLIP -,
    SYNSEM.LOCAL [ CAT [ VAL [ SUBJ < anti_synsem_min >,
			       COMPS < synsem & [ OPT - ], ... >,
			       SPCMPS < > ],
			 HEAD [ VFORM fin,
				PRD -,
				INV -,
				TAM indic_tam &
				      [ TENSE present,
					ASPECT.PRF -,
					MOOD indicative ] ],
			 POSTHD + ],
		   AGR.PNG png & [ PN 3s ],
		   CONT psoa &
		       [ HOOK.XARG #xarg & ref-ind & [ PNG.PN 3s ],
		         RELS.LIST < [ PRED pron_rel,
				       LBL #nhand,
				       ARG0 #xarg ],
				     [ PRED pronoun_q_rel,
				       ARG0 #xarg,
				       RSTR #rhand ], ... >,
			 HCONS <! qeq & [ HARG #rhand,
					  LARG #nhand ] !> ] ],
    ALTS.CSAI -,
    GENRE robust ].

v_prd_its-mal_le := be_is_mal_lex_entry &
  [ SYNSEM prd_aux_verb_ssr &
	   [ LOCAL [ CAT [ HEAD [ TAM #tam ],
			   VAL.COMPS.FIRST.LOCAL [ CAT.HEAD.TAM #tam,
						   CONT.HOOK.LTOP #ltop ] ],
		     CONT [ HOOK.LTOP #ltop,
			    RELS <! relation, relation !> ] ],
	     LKEYS.KEYREL.PRED be_v_prd_rel ] ].

v_np_its-mal_le := be_is_mal_lex_entry &
  [ SYNSEM aux_np_verb &
	   [ LOCAL [ CAT [ HEAD [ TAM.ASPECT.PROGR - ],
			   VAL.COMPS < [ LOCAL.CAT.HEAD.--BARE - ] > ],
		     CONT [ HOOK [ LTOP #ltop,
				   INDEX #event ],
			    RELS <! relation, relation, #keyrel !> ] ],
	     LKEYS.KEYREL #keyrel &
		          [ LBL #ltop,
			    ARG0 #event,
			    PRED _be_v_id_rel ] ] ].

;; For |have went ...|
;; FIX: block this for ordinary -ed past participles
psp_aux_verb_mal_ssr := basic_have_aux_verb_synsem &
  [ LOCAL.CAT.VAL.COMPS < synsem &
			  [ LOCAL [ CAT vp_cat &
					[ HEAD verb &
					       [ VFORM fin,
						 TAM.TENSE past ],
					  VAL.SUBJ < [ LOCAL.CAT.HEAD noun ] >],
				    CONJ cnil ],
			    OPT - ] > ].

psp_aux_verb_mal_word := aux_verb_word &
  [ INFLECTD +,
    SYNSEM psp_aux_verb_mal_ssr &
	   [ LOCAL [ CAT [ HEAD [ VFORM fin,
				  PRD -,
				  TAM indic_tam ],
			   POSTHD +,
			   VAL [ SUBJ < synsem & 
					[ LOCAL [ CAT nomp_cat_nom_min,
						  CONJ cnil ],
					  OPT - ] >,
				 COMPS < canonical_synsem &
					 [ LOCAL.CONT.HOOK.LTOP #hand ] > ] ],
		     CONT psoa &
			  [ HOOK.LTOP #hand,
			    RELS <! !>,
			    HCONS <! !> ] ] ],
    GENRE robust,
    ALTS.CSAI - ].

v_vp_has-mal_le := psp_aux_verb_mal_word &
  [ INFLECTD +,
    SYNSEM.LOCAL.CAT.VAL.SUBJ < synsem & 
				[ LOCAL.AGR.PNG png & [ PN 3s ] ] > ].

v_vp_have-mal_le := psp_aux_verb_mal_word &
  [ INFLECTD +,
    SYNSEM.LOCAL.CAT.VAL.SUBJ < synsem & 
				[ LOCAL.AGR.PNG png & [ PN -3s ] ] > ].

v_np_are-n_le_rbst := v_np_are-n_lexent &
  [ GENRE robust ].

v_np_is-n_le_rbst := v_np_is-n_lexent & 
  [ GENRE robust ].

v_np_was-n_le_rbst := v_np_was-n_lexent &  
  [ GENRE robust ].

v_np_wre-n_le_rbst := v_np_wre-n_lexent &
  [ GENRE robust ].

;; Wrong irregular past with v-particle as in |we sprung up|
v_p_le-infl_rbst := norm_basic_main_verb & 
  [ INFLECTD +,
    SYNSEM particle_verb &
	   [ LOCAL past_or_subj_verb,
	     LKEYS [ --COMPKEY #cmin,
                     --+COMPKEY #cmin ] ],
    GENRE robust ].

; For e.g. |It affected to Kim| with spurious prep
v_pp_np_le_rbst := main_verb & 
  [ SYNSEM empty_prep_intrans_verb &
	     [ LKEYS [ --COMPKEY #cmin,
                     --+COMPKEY #cmin ] ],
    GENRE robust ].

;; For wrong prep marker, as in |abide to|
v_pp_e_le_rbst := main_verb & 
  [ SYNSEM empty_prep_intrans_verb &
	   [ LKEYS [ --COMPKEY #cmin,
                     --+COMPKEY #cmin ] ],
    GENRE robust ].

;; For wrong prep marker as in |allocated it of Kim|
v_np-pp_e_le_rbst := main_verb & 
  [ SYNSEM empty_prep_trans_verb &
	   [ LOCAL.CAT [ VAL.COMPS < [ OPT - ], [ OPT - ] > ],
             LKEYS [ --OCOMPKEY #ocmin,
                     --+OCOMPKEY #ocmin ] ],
    GENRE robust ].

;; For erroneous VP passives of intransitives as in |the fish were died|
;; (Repair is to drop preceding copula)
v_-_psv-post_le_rbst := norm_basic_main_verb &
  [ SYNSEM passive_unerg_synsem &
	   [ LOCAL.CAT [ POSTHD + ] ],
    INFLECTD +,
    GENRE robust ].

;; For erroneous VP passives of intransitives used prenominally: |the died fish|
;; (Repair is to rephrase as relative clause: |the fish that died|)
v_-_psv-pre_le_rbst := norm_basic_main_verb &
  [ SYNSEM passive_unerg_synsem &
	   [ LOCAL.CAT [ POSTHD - ] ],
    INFLECTD +,
    GENRE robust ].

; Intransitive used as causative: |this deteriorates the problem|
v_np_caus_le_rbst := main_verb & 
  [ SYNSEM np_trans_verb &
	   [ LOCAL.CAT [ VAL.COMPS < canonical_synsem &
				   [ OPT -,
				     LOCAL.CAT.HEAD noun &
					 [ --BARE -,
					   CASE acc ],
				     PUNCT.RPUNCT clause_or_no_punct ] > ] ],
    GENRE robust ].

;; Flag wrong double plurals: e.g. |polices|
n_-_c-pl_le_rbst := n_intr_infl_lex_entry &
  [ SYNSEM.LOCAL [ CAT.VAL.SPR < [ LOCAL.AGR [ PNG.PN 3p,
					       DIV + ] ] >,
		   CONT.HOOK.INDEX [ PNG.PN 3p,
				     DIV + ] ],
    GENRE robust ].

;; |peoples| with PP complement
mal_n_plur_ppcomp_le := n_plur_ppcomp_lexent &
  [ GENRE robust ].

contracted_aux_word := word &
  [ INFLECTD na,
    ALTS [ VPELLIP -,
           SQPNCT -,
	   CSAI - ],
    SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST expressed_synsem,
    GENRE robust ].
