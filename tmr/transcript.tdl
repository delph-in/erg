;;; -*- Mode: tdl; Coding: utf-8; -*-


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; application- or task-specific `accommodation' rules (aka hacks :-).  patch
;;; up the input token lattice as needed.  in principle, such rules should go
;;; into separate modules, once we provide a mechanism to selectively activate
;;; rules or sets of rules.
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; Experimental rules for speech input, which has not been pre-segmented to
;;; disconnect contracted forms like "I'm" or "that's"

apostrophe_speech_tmr := one_two_tmt &
[ +INPUT < [ +FORM ^([[:alpha:]]+)'(s|d|ve|ll|m|re)$, 
             +TRAIT #trait, +PRED #pred, +CARG #carg ] >,
  +OUTPUT < [ +FORM "${I1:+FORM:1}",
              +TRAIT #trait, +PRED #pred, +CARG #carg, 
	      +TNT [ +TAGS < "NN" >, +PRBS < "1.0" > ] ],
            [ +FORM "'${I1:+FORM:2}",
              +TRAIT #trait, +PRED #pred, +CARG #carg, 
	      +TNT [ +TAGS < anti_string >,
		     +PRBS < "1.0" > ] ] > ].

; Optionally drop comma, since it is sometimes used just to indicate pause
; in speech transcriptions
comma_pause_speech_tmr := token_mapping_rule &
[ +CONTEXT < [ +FORM ^([[:alpha:]â€™'.-]+)(,)$, 
               +TRAIT #trait, +PRED #pred, +CARG #carg,
	       +ID #id, +FROM #from, +TO #to, +CLASS #class ] >,
  +OUTPUT < [ +FORM "${C1:+FORM:1}",
              +TRAIT #trait, +PRED #pred, +CARG #carg, 
	      +TNT [ +TAGS < "NN" >, +PRBS < "1.0" > ],
	      +ID #id, +FROM #from, +TO #to, +CLASS #class ] >,
  +POSITION "C1@O1" ].

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; Spelling patches for training data transcripts
;;;
sc_task_tmr := one_one_form_tmt &
[ +INPUT < [ +FORM ^tas$] >,
  +OUTPUT < [ +FORM "task" ] > ].

sc_goin_tmr := one_one_form_tmt &
[ +INPUT < [ +FORM ^goin$] >,
  +OUTPUT < [ +FORM "going" ] > ].

sc_goin_apos_tmr := one_one_form_tmt &
[ +INPUT < [ +FORM ^goin'$] >,
  +OUTPUT < [ +FORM "going" ] > ].

sc_tryin_tmr := one_one_form_tmt &
[ +INPUT < [ +FORM ^tryin$] >,
  +OUTPUT < [ +FORM "trying" ] > ].

sc_fer_tmr := one_one_form_tmt &
[ +INPUT < [ +FORM ^fer$] >,
  +OUTPUT < [ +FORM "for" ] > ].

sc_thee_tmr := one_one_form_tmt &
[ +INPUT < [ +FORM ^thee$] >,
  +OUTPUT < [ +FORM "the" ] > ].

sc_ya_tmr := one_one_form_tmt &
[ +INPUT < [ +FORM ^ya$] >,
  +OUTPUT < [ +FORM "you" ] > ].

sc_alrright_tmr := one_one_form_tmt &
[ +INPUT < [ +FORM ^alrright$] >,
  +OUTPUT < [ +FORM "alright" ] > ].

sc_lef_tmr := one_one_form_tmt &
[ +INPUT < [ +FORM ^lef$] >,
  +OUTPUT < [ +FORM "left" ] > ].

sc_seve_tmr := one_one_form_tmt &
[ +INPUT < [ +FORM ^seve$] >,
  +OUTPUT < [ +FORM "seven" ] > ].

