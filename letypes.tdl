;;; -*- Mode: TDL; Package: DISCO -*-
;;;
;;;  Copyright Daniel Flickinger 1994-1999
;;;  All Rights Reserved.
;;;  No use or redistribution without permission.
;;;
;;;  letypes.tdl
;;;
;;;  Lexical entry types (yield of lextypes hierarchy)
;;;
;;;  Created by Dan Flickinger, 15-June-1996
;;;
;;;  $Id$


; In the following type names, "mv" stands for "main_verb".  Complements
; marked with "*" in the type names are optional. 

v_atrans_le := main_verb & 
  [ SYNSEM atrans_verb ].

v_atrans_inf_le := main_verb & 
  [ SYNSEM atrans_inf_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ] > ] ].

v_cp_non_trans_le := main_verb & 
  [ SYNSEM cp_intrans_verb & 
            [ LOCAL.CAT.VAL.COMPS < [ OPT - ] > ] ].

v_cp_only_non_trans_le := main_verb & 
  [ SYNSEM cp_intrans_verb & 
            [ LOCAL.CAT.VAL.COMPS < [ OPT -,
                                      LOCAL.CAT.HEAD comp ] > ] ].

v_cp_fin_inf_non_trans_le := main_verb & 
  [ SYNSEM cp_fin_inf_intrans_verb & 
            [ LOCAL.CAT.VAL.COMPS < [ OPT - ] > ] ].

v_cp_ques_fin_inf_non_trans_le := main_verb & 
  [ SYNSEM cp_fin_inf_intrans_verb & 
            [ LOCAL.CAT.VAL.COMPS < [ OPT -,
                                      LOCAL.KEYS.MESSAGE 1-dlist &
                                          <! int_m_rel !>] > ] ].

v_cp_prop_non_trans_le := main_verb & 
  [ SYNSEM cp_prop_intrans_verb & 
            [ LOCAL.CAT.VAL.COMPS < [ OPT - ] > ] ].

; "find": "I find that Kim has left" but "*I find Kim has left"
v_cp_only_prop_non_trans_le := main_verb & 
  [ SYNSEM cp_only_prop_intrans_verb & 
            [ LOCAL.CAT.VAL.COMPS < [ OPT - ] > ] ].

v_cp_prop*_non_trans_le := main_verb & 
  [ SYNSEM cp_prop_intrans_verb &
            [ LOCAL.CAT.VAL.COMPS < [ OPT + ] > ] ].

v_cp_ques_non_trans_le := main_verb & 
  [ SYNSEM cp_ques_intrans_verb & 
            [ LOCAL.CAT.VAL.COMPS < [ OPT - ] > ] ].
;; inform
v_np_trans_cp_le := main_verb & 
  [ SYNSEM np_trans_cp_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ] > ] ].
;; answer
v_np*_trans_cp_le := main_verb & 
  [ SYNSEM np_trans_cp_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT + ], [ OPT - ] > ] ].

; ask
v_np_trans_cp_ques_le := main_verb & 
  [ SYNSEM np_trans_cp_ques_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT + ], [ OPT - ] > ] ].

; persuade
v_np_trans_cp_prop_le := main_verb & 
  [ SYNSEM np_trans_cp_prop_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ] > ] ].

; tell: tell me whether to stay
v_np_trans_cp_fin_or_inf_le := main_verb & 
  [ SYNSEM np_trans_cp_fin_or_inf_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ] > ] ].

; ask, prefer 'ask that he be released'
v_cp_subj_le := main_verb & 
  [ SYNSEM cp_bse_intrans_verb &
            [ LOCAL.CAT.VAL.COMPS < [ OPT - ] > ] ].

; wait
v_cp_inf_le := main_verb & 
  [ SYNSEM for_to_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ] > ] ].

; try
v_subj_equi_le := main_verb & 
  [ SYNSEM subj_equi_verb &
            [ LOCAL.CAT.VAL.COMPS < [ OPT - ] > ] ].

; "like" of "would like = want"
v_subj_equi_nonfin_le := main_verb & 
  [ SYNSEM subj_equi_verb &
            [ LOCAL.CAT [ HEAD [ VFORM non_fin,
                                 TAM [ TENSE present,
                                       MOOD modal_subj* ] ],
                          VAL.COMPS < [ OPT - ] > ] ] ].

v_subj_equi_prd_le := main_verb_mliszt & 
  [ SYNSEM subj_equi_prd_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ] > ] ].

; run low (on X)
v_subj_equi_prd_adj_le := main_verb_mliszt & 
  [ SYNSEM subj_equi_prd_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT -,
                                     LOCAL.CAT.HEAD adj ] > ] ].

; go shopping
v_subj_equi_prd_verb_le := main_verb_mliszt & 
  [ SYNSEM subj_equi_prd_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT -,
                                     LOCAL.CAT.HEAD verb &
						    [ VFORM prp ] ] > ] ].
; want into
v_subj_equi_prd_prep_le := main_verb_mliszt & 
  [ SYNSEM subj_equi_prd_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT -,
                                     LOCAL.CAT.HEAD prep ] > ] ].
; stop
v_subj_equi_prp_le := main_verb_mliszt & 
  [ SYNSEM subj_equi_prp_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ] > ] ].

; would like
v_subj_equi_prp_nonfin_le := main_verb_mliszt & 
  [ SYNSEM subj_equi_prp_verb &
	   [ LOCAL.CAT [ HEAD [ VFORM non_fin,
                                TAM [ TENSE present,
                                      MOOD modal_subj* ] ],
                         VAL.COMPS < [ OPT - ] > ] ] ].

; help
v_subj_equi_bse_le := main_verb_mliszt & 
  [ SYNSEM subj_equi_bse_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ] > ] ].

; 'I will go read', 'Go read' '*He went read'
v_subj_equi_bse_go_le := main_verb_mliszt & 
  [ SYNSEM subj_equi_bse_verb &
	   [ LOCAL.CAT [ HEAD.VFORM bse & strict_sort,
                         VAL.COMPS < [ OPT - ] > ] ] ].

; have yet to
v_ssr_particle_le := ssr_particle_v_lexent &
  [ SYNSEM [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ] >,
             LKEYS [ --COMPKEY #ckey,
                     --+COMPKEY #ckey ] ] ].

; they try and find it
v_subj_equi_and_fin_le := main_verb & 
  [ SYNSEM subj_equi_and_verb &
           [ LOCAL [ CAT.HEAD.VFORM fin,
                     AGR.PNG.PN non3sg ] ] ].

; he will try and find it
v_subj_equi_and_bse_le := main_verb & 
  [ SYNSEM subj_equi_and_verb &
           [ LOCAL.CAT.HEAD.VFORM bse ] ].

v_obj_equi_le := main_verb & 
  [ SYNSEM obj_equi_verb &
            [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ] > ] ].

v_obj_equi_prd_le := main_verb_mliszt & 
  [ SYNSEM obj_equi_prd_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ] > ] ].

v_obj_equi_prd_adj_le := main_verb_mliszt & 
  [ SYNSEM obj_equi_prd_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT -,
                                                LOCAL.CAT.HEAD adj ] > ] ].

; have x ready
; have x in stock
; I want x confirmed
v_obj_equi_non_trans_prd_le := main_verb_mliszt & 
  [ SYNSEM obj_equi_non_trans_prd_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ] >,
             LKEYS [ --OCOMPKEY #ockey,
                     --+OCOMPKEY #ockey ] ] ].

; imperative "Have x ready"
v_obj_equi_non_trans_prd_imper_le := main_verb_mliszt_infl & 
  [ SYNSEM obj_equi_non_trans_prd_verb &
	   [ LOCAL bse_verb &
                   [ CAT [ HEAD.VFORM imp_vform*,
                           VAL.COMPS < [ OPT - ], [ OPT - ] > ] ] ] ].

; "like" of "would like" = "want"
v_obj_equi_non_trans_prd_nonfin_le := main_verb_mliszt & 
  [ SYNSEM obj_equi_non_trans_prd_verb &
	   [ LOCAL.CAT [ HEAD [ VFORM non_fin,
                                TAM [ TENSE present,
                                      MOOD modal_subj* ] ],
                         VAL.COMPS < [ OPT - ], [ OPT - ] > ] ] ].

; promise
v_anom_equi_le := main_verb & 
  [ SYNSEM anom_equi_verb &
            [ LOCAL.CAT.VAL.COMPS < [ OPT + ], [ OPT - ] > ] ].

; use X to do Y
v_anom_equi_trans_le := main_verb & 
  [ SYNSEM anom_equi_trans_verb &
            [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ] > ] ].

; turn out to
v_particle_inf_le := main_verb & 
  [ SYNSEM particle_inf_verb &
            [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ] >,
              LKEYS [ --COMPKEY #ckey,
                      --+COMPKEY #ckey ] ] ].

; keep on driving
v_particle_prp_le := main_verb_mliszt & 
  [ SYNSEM particle_prp_verb &
            [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ] >,
              LKEYS [ --COMPKEY #ckey,
                      --+COMPKEY #ckey ] ] ].

v_particle_cp_le := main_verb & 
  [ SYNSEM particle_cp_verb &
            [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ] >,
              LKEYS [ --COMPKEY #ckey,
                      --+COMPKEY #ckey ] ] ].

v_oeq_pp_inf_le := main_verb & 
  [ SYNSEM oeq_pp_inf_verb &
            [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ] >,
              LKEYS [ --COMPKEY #ckey,
                      --+COMPKEY #ckey ] ] ].

;; leave it to kim to arrange the meeting
v_expl_pp_inf_oeq_le := main_verb & 
  [ SYNSEM expl_pp_inf_oeq_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ], [ OPT + ] >,
             LKEYS [ --OCOMPKEY #ockey,
                     --+OCOMPKEY #ockey ] ] ].

;; arrange (with kim) to meet her
v_pp_inf_seq_le := main_verb & 
  [ SYNSEM pp_inf_seq_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT + ], [ OPT - ] > ] ].

;; arrange it with kim to meet her
v_expl_pp_inf_seq_le := main_verb & 
  [ SYNSEM expl_pp_inf_seq_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ], [ OPT - ] >,
             LKEYS [ --OCOMPKEY #ockey,
                     --+OCOMPKEY #ockey ] ] ].

;; it bothers kim that sally left; it bothers kim to leave
v_expl_it_subj_np_cp_le := main_verb & 
  [ SYNSEM expl_it_subj_np_cp_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], 
				   [ OPT - ] > ] ].

v_expl_it_subj_np_cp_fin_le := main_verb & 
  [ SYNSEM expl_it_subj_np_cp_fin_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], 
				   [ OPT -,
				     LOCAL.KEYS.MESSAGE 
					 <! prpstn_m_rel !> ] > ] ].

; cost
v_expl_it_subj_np_np_cp_inf_le := main_verb & 
  [ SYNSEM expl_it_subj_np_np_cp_inf_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT + ], 
                                   [ OPT + ],
				   [ OPT -,
				     LOCAL.KEYS.MESSAGE 
					 <! prpstn_m_rel !> ] > ] ].

; take
v_expl_it_subj_np_np_vp_inf_le := main_verb & 
  [ SYNSEM expl_it_subj_np_np_vp_inf_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], 
                                   [ OPT - ],
				   [ OPT -,
				     LOCAL.KEYS.MESSAGE 
					 <! prpstn_m_rel !> ] > ] ].

;; it seems (to kim) that sandy left
v_expl_it_subj_pp_cp_le := main_verb & 
  [ SYNSEM expl_it_subj_pp_cp_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT + ], 
				   [ OPT -,
				     LOCAL.KEYS.MESSAGE 
					 <! prpstn_or_like_m_rel !> ] > ] ].
;; it looks (to kim) like Sandy left
v_expl_it_subj_like_le := main_verb & 
  [ SYNSEM expl_it_subj_pp_cp_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT + ], 
				   [ OPT -,
				     LOCAL [ CAT.HEAD comp,
                                             KEYS.MESSAGE 
                                              <! _like_mood_rel !> ] ] > ] ].

; it turns out that kim arrived
v_expl_it_subj_prtcl_cp_le := main_verb & 
  [ SYNSEM expl_it_subj_prtcl_cp_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], 
				   [ OPT - ] > ] ].

; bet
v_np_np_cp_le := main_verb & 
  [ SYNSEM np_np_cp_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT + ], [ OPT + ], [ OPT + ] > ] ].

; suggest
v_pp_cp_le := main_verb & 
  [ SYNSEM pp_cp_verb &
	   [ LOCAL [ CAT.VAL.COMPS < [ OPT + ], [ OPT - ] > ] ] ].

; explain, agree
v_pp_cp*_le := main_verb & 
  [ SYNSEM pp_cp_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT + ], [ OPT + ] > ] ].

; would like
v_sor_non_trans_le := main_verb & 
  [ SYNSEM sor_non_trans_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ] > ] ].

v_sor_le := main_verb & 
  [ SYNSEM sor_verb &
            [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ] > ] ].

v_sorb_le := main_verb & 
  [ SYNSEM sorb_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ] > ] ].

; For one use of the (verb) colon ":" as in "Question: (you) ready?"
v_sor_prd_le := main_verb & 
  [ SYNSEM sor_prd_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT + ], [ OPT - ] > ] ].

v_ditrans_le := main_verb & 
  [ SYNSEM ditrans_verb & 
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ] > ] ].

v_ditrans_only_le := main_verb & 
  [ SYNSEM ditrans_only_verb & 
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ] >,
             LKEYS [ --OCOMPKEY #ockey,
                     --+OCOMPKEY #ockey ] ] ].

v_ditrans*_only_le := main_verb & 
  [ SYNSEM ditrans_only_verb & 
	   [ LOCAL.CAT.VAL.COMPS < [ OPT + ], [ OPT + ] > ] ].

;; talk
v_double_pp*_le := main_verb & 
  [ SYNSEM double_pp_verb & 
	   [ LOCAL.CAT.VAL.COMPS < [ OPT + ], [ OPT + ] > ] ].
v_double_pp_le := main_verb & 
  [ SYNSEM double_pp_verb & 
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ] >,
             LKEYS [ --COMPKEY #ckey,
                     --+COMPKEY #ckey,
                     --OCOMPKEY #ockey,
                     --+OCOMPKEY #ockey ] ] ].

v_double_pp_empty_pp_le := main_verb & 
  [ SYNSEM double_pp_empty_pp_verb & 
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ] >,
             LKEYS [ --COMPKEY #ckey,
                     --+COMPKEY #ckey,
                     --OCOMPKEY #ockey,
                     --+OCOMPKEY #ockey ] ] ].
; change
v_np*_trans_double_pp*_le := main_verb & 
  [ SYNSEM np_trans_double_pp_verb & 
	   [ LOCAL.CAT.VAL.COMPS < [ OPT + ], [ OPT + ], 
                                   [ OPT -,
                                     LOCAL.KEYS.KEY dir_state_modable_rel ] >,
             LKEYS [ --OCOMPKEY #ockey,
                     --+OCOMPKEY #ockey ] ] ].

v_np*_trans_double_pp_to*_le := main_verb & 
  [ SYNSEM np_trans_double_pp_verb & 
	   [ LOCAL.CAT.VAL.COMPS < [ OPT + ], [ OPT + ], 
                                   [ OPT -,
                                     LOCAL.KEYS.KEY _to_rel ] >,
             LKEYS [ --OCOMPKEY #ockey,
                     --+OCOMPKEY #ockey ] ] ].

v_np_trans_double_pp*_le := main_verb & 
  [ SYNSEM np_trans_double_pp_verb & 
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT + ], 
                                   [ OPT -,
                                     LOCAL.KEYS.KEY dir_state_modable_rel ] >,
             LKEYS [ --OCOMPKEY #ockey,
                     --+OCOMPKEY #ockey ] ] ].

v_empty_prep_intrans_le := main_verb & 
  [ SYNSEM empty_prep_intrans_verb & 
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ] >,
             LKEYS [ --COMPKEY #ckey,
                     --+COMPKEY #ckey ] ] ].

#|
v_empty_prep_intrans_imp_le := main_verb & 
  [ SYNSEM empty_prep_intrans_verb & 
	   [ LOCAL.CAT [ HEAD.VFORM imp_vform,
                         VAL.COMPS < [ OPT - ] > ],
             LKEYS [ --COMPKEY #ckey,
                     --+COMPKEY #ckey ] ] ].
|#
v_empty_prep_trans_le := main_verb & 
  [ SYNSEM empty_prep_trans_verb & 
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ] >,
             LKEYS [ --OCOMPKEY #ockey,
                     --+OCOMPKEY #ockey ] ] ].

v_empty_prep_trans*_le := main_verb & 
  [ SYNSEM empty_prep_trans_verb & 
	   [ LOCAL.CAT.VAL.COMPS < [ OPT + ], [ OPT - ] >,
             LKEYS [ --OCOMPKEY #ockey,
                     --+OCOMPKEY #ockey ] ] ].
v_empty_prep*_trans_le := main_verb & 
  [ SYNSEM empty_prep_trans_verb & 
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT + ] > ] ].
v_empty_prep*_trans_imp_le := main_verb & 
  [ SYNSEM empty_prep_trans_verb & 
	   [ LOCAL.CAT [ HEAD.VFORM imp_vform,
                         VAL.COMPS < [ OPT - ], [ OPT + ] > ] ] ].
; take into account
v_empty_prep_trans_idiom_le := main_verb & 
  [ SYNSEM empty_prep_trans_verb & 
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], 
                                   [ OPT -,
                                     LKEYS.--COMPKEY _account_n_rel ] >,
             LKEYS [ --OCOMPKEY #ockey,
                     --+OCOMPKEY #ockey ] ] ].

v_empty_prep*_trans*_le := main_verb & 
  [ SYNSEM empty_prep_trans_verb & 
	   [ LOCAL.CAT.VAL.COMPS < [ OPT + ], [ OPT + ] > ] ].

; 'interest kim in'
v_empty_prep_non_trans_le := main_verb & 
  [ SYNSEM empty_prep_non_trans_verb & 
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ] >,
             LKEYS [ --OCOMPKEY #ockey,
                     --+OCOMPKEY #ockey ] ] ].
; 'get hold of'
v_empty_prep_nbar_le := main_verb_mliszt & 
  [ SYNSEM empty_prep_nbar_verb & 
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ] >,
             LKEYS [ --COMPKEY #ckey,
                     --+COMPKEY #ckey,
                     --OCOMPKEY #ockey,
                     --+OCOMPKEY #ockey ] ] ].

;; 'prefer it if ...'
v_expl_obj_cp_le := main_verb &
  [ SYNSEM expl_obj_cp_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ] > ] ].

;; 'take it that ...'
v_expl_obj_cp_prop_le := main_verb &
  [ SYNSEM expl_obj_cp_verb &
	 [ LOCAL.CAT.VAL.COMPS < [ OPT - ], 
                                 [ OPT -,
                                   LOCAL [ CAT.HEAD comp,
                                           KEYS.MESSAGE 
                                                 <! prpstn_m_rel !> ] ] > ] ].

v_np_trans_le := main_verb & 
  [ SYNSEM np_trans_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ] > ] ].
v_np*_trans_le := main_verb & 
  [ SYNSEM np_trans_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT + ] > ] ].
v_np_trans_nonfin_le := main_verb & 
  [ SYNSEM np_trans_verb &
	   [ LOCAL.CAT [ HEAD [ VFORM non_fin,
                              TAM [ TENSE present,
                                    MOOD modal_subj* ] ],
                         VAL.COMPS < [ OPT - ] > ] ] ].

v_np_prep_trans_le := main_verb_mliszt & 
  [ SYNSEM prep_trans_verb & 
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ] >,
             LKEYS [ --OCOMPKEY #ockey,
                     --+OCOMPKEY #ockey ] ] ].

;; takes dir_state_modable_rel oblique complement.
;; put (takes variety of PP complements, so avoid chart dependency filter)
v_np_prep_trans_dors_le := main_verb_mliszt & 
  [ SYNSEM prep_trans_verb & 
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], 
                                   [ OPT -,
                                     LOCAL.KEYS.KEY dir_state_modable_rel &
                                         [ ARG2.SORT entity ] ] > ] ].
;; ask about
v_np*_prep_trans_le := main_verb_mliszt &
  [ SYNSEM prep_trans_verb & 
           [ LOCAL.CAT.VAL.COMPS < [ OPT + ], [ OPT - ] >,
             LKEYS [ --OCOMPKEY #ockey,
                     --+OCOMPKEY #ockey ] ] ].

v_np_prep_trans_nomsg_le := main_verb_mliszt & 
  [ SYNSEM prep_trans_nomsg_verb & 
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ] >,
             LKEYS [ --OCOMPKEY #ockey,
                     --+OCOMPKEY #ockey ] ] ].
v_np_prep_trans_nomsg_loc_le := main_verb_mliszt & 
  [ SYNSEM prep_trans_nomsg_verb & 
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], 
                                   [ OPT -,
                                     LOCAL.KEYS [ KEY dir_state_modable_rel,
                                                  ALTKEY place_rel ] ] > ] ].
v_np*_prep_trans_nomsg_le := main_verb_mliszt & 
  [ SYNSEM prep_trans_nomsg_verb & 
	   [ LOCAL.CAT.VAL.COMPS < [ OPT + ], [ OPT - ] >,
             LKEYS [ --OCOMPKEY #ockey,
                     --+OCOMPKEY #ockey ] ] ].

v_np_comp_le := main_verb & 
  [ SYNSEM np_comp_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT -,
                                     LOCAL.CONT.HOOK.INDEX #ind ], 
                                   [ OPT -,
                                     LOCAL.CONT.HOOK.INDEX #ind ] >,
             LKEYS [ --OCOMPKEY #ockey,
                     --+OCOMPKEY #ockey ] ] ].

v_np_non_trans_le := main_verb & 
  [ SYNSEM np_non_trans_verb & 
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ] > ] ].
v_np*_non_trans_le := main_verb & 
  [ SYNSEM np_non_trans_verb & 
	   [ LOCAL.CAT.VAL.COMPS < [ OPT + ] > ] ].
; take place
v_np_non_trans_unacc_le := main_verb & 
  [ SYNSEM np_non_trans_unacc_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ] > ] ].
v_np_obj_comp_le := main_verb & 
  [ SYNSEM np_comp_obj_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ] >,
             LKEYS [ --OCOMPKEY #ockey,
                     --+OCOMPKEY #ockey ] ] ].

v_particle_le := main_verb & 
  [ SYNSEM particle_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ] >,
             LKEYS [ --COMPKEY #ckey,
                     --+COMPKEY #ckey ] ] ].
v_particle_np_le := main_verb & 
  [ SYNSEM particle_np_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ] >,
             LKEYS [ --COMPKEY #ckey,
                     --+COMPKEY #ckey ] ] ].
v_np_prep_particle_only_le := main_verb & 
  [ SYNSEM np_prep_particle_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ] >,
             LKEYS [ --OCOMPKEY #ockey,
                     --+OCOMPKEY #ockey ] ] ].
v_particle_prd_le := main_verb_std & 
  [ SYNSEM particle_prd_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ] >,
             LKEYS [ --COMPKEY #ckey,
                     --+COMPKEY #ckey ] ] ].
v_particle_pp_le := main_verb & 
  [ SYNSEM particle_pp_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ] >,
             LKEYS [ --COMPKEY #ckey,
                     --+COMPKEY #ckey,
                     --OCOMPKEY #ockey,
                     --+OCOMPKEY #ockey ] ] ].
v_particle_pp*_le := main_verb & 
  [ SYNSEM particle_pp_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT + ] >,
             LKEYS [ --COMPKEY #ckey,
                     --+COMPKEY #ckey ] ] ].
v_particle_empty_pp_le := main_verb & 
  [ SYNSEM particle_empty_pp_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ] >,
             LKEYS [ --COMPKEY #ckey,
                     --+COMPKEY #ckey,
                     --OCOMPKEY #ockey,
                     --+OCOMPKEY #ockey ] ] ].
v_particle_empty_pp*_le := main_verb & 
  [ SYNSEM particle_empty_pp_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT + ] >,
             LKEYS [ --COMPKEY #ckey,
                     --+COMPKEY #ckey ] ] ].

v_np_particle_pp_to_le := main_verb & 
  [ SYNSEM np_particle_pp_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ], 
                                   [ OPT -, 
                                     LOCAL.KEYS.KEY _to_rel_s ] >,
             LKEYS [ --OCOMPKEY #ockey,
                     --+OCOMPKEY #ockey ] ] ].

v_np_particle_pp_for_le := main_verb & 
  [ SYNSEM np_particle_pp_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ], 
                                   [ OPT -, 
                                     LOCAL.KEYS.KEY _for_rel_s ] >,
             LKEYS [ --OCOMPKEY #ockey,
                     --+OCOMPKEY #ockey ] ] ].

v_particle_np_pp_to_le := main_verb & 
  [ SYNSEM particle_np_pp_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ], 
                                   [ OPT -, 
                                     LOCAL.KEYS.KEY _to_rel_s ] >,
             LKEYS [ --COMPKEY #ckey,
                     --+COMPKEY #ckey,
                     --OCOMPKEY #ockey,
                     --+OCOMPKEY #ockey ] ] ].


v_particle_np_pp_for_le := main_verb & 
  [ SYNSEM particle_np_pp_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ], 
                                   [ OPT -, 
                                     LOCAL.KEYS.KEY _for_rel_s ] >,
             LKEYS [ --COMPKEY #ckey,
                     --+COMPKEY #ckey,
                     --OCOMPKEY #ockey,
                     --+OCOMPKEY #ockey ] ] ].

v_prep_intrans_event_le := main_verb_std & 
  [ SYNSEM prep_intrans_event_verb & 
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ] > ] ].
v_prep_intrans_le := main_verb_std & 
  [ SYNSEM prep_intrans_verb & 
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ] >,
             LKEYS [ --COMPKEY #ckey,
                     --+COMPKEY #ckey ] ] ].
; For verbs with an underspecified COMPKEY like dir_rel, such that the chart
; dependency mechanism would go awry.
v_prep_intrans_unsp_le := main_verb_std & 
  [ SYNSEM prep_intrans_verb & 
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ] > ] ].
v_prep*_intrans_le := main_verb_std & 
  [ SYNSEM prep_intrans_verb & 
	   [ LOCAL.CAT.VAL.COMPS < [ OPT + ] > ] ].
v_ssr_le := main_verb & 
  [ SYNSEM ssr_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ] > ] ].
v_prd_ssr_any_le := main_verb_mliszt & 
  [ SYNSEM subj_prd_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT -,
                                     LOCAL.CAT.HEAD v_or_g_or_a &
                                         [ TAM.ASPECT strict_nonprg ] ] > ] ].
v_prd_ssr_adj_le := main_verb_mliszt & 
  [ SYNSEM subj_prd_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT -,
                                     LOCAL.CAT.HEAD adj ] > ] ].
v_pp_inf_ssr_le := main_verb & 
  [ SYNSEM ssr_pp_inf_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT + ], [ OPT - ] > ] ].
v_prdp_pp_ssr_adj_le := main_verb_std & 
  [ SYNSEM ssr_prdp_pp_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT -,
                                     LOCAL.CAT.HEAD adj ], 
                                   [ OPT + ] > ] ].
v_prdp_pp_ssr_prep_le := main_verb_std & 
  [ SYNSEM ssr_prdp_pp_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT -,
                                     LOCAL.CAT.HEAD prep ], 
                                   [ OPT + ] >,
             LKEYS [ --COMPKEY #ckey,
                     --+COMPKEY #ckey ] ] ].
v_prdp_pp_ssr_a_or_p_le := main_verb_std & 
  [ SYNSEM ssr_prdp_pp_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT -,
                                     LOCAL.CAT.HEAD a_or_p ],
                                   [ OPT + ] > ] ].
v_to_trans_le := main_verb & 
  [ SYNSEM to_trans_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ] >,
             LKEYS [ --COMPKEY #ckey,
                     --+COMPKEY #ckey,
                     --OCOMPKEY #ockey,
                     --+OCOMPKEY #ockey ] ] ].

v_to*_trans_le := main_verb & 
  [ SYNSEM to_trans_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT + ] >,
             LKEYS [ --COMPKEY #ckey,
                     --+COMPKEY #ckey ] ] ].
v_to*_trans*_le := main_verb & 
  [ SYNSEM to_trans_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT + ], [ OPT + ] > ] ].
v_empty_to_trans_le := main_verb & 
  [ SYNSEM empty_to_trans_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ] >,
             LKEYS [ --COMPKEY #ckey,
                     --+COMPKEY #ckey,
                     --OCOMPKEY #ockey,
                     --+OCOMPKEY #ockey ] ] ].

v_empty_to_trans*_le := main_verb & 
  [ SYNSEM empty_to_trans_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT + ], [ OPT - ] >,
             LKEYS [ --COMPKEY #ckey,
                     --+COMPKEY #ckey,
                     --OCOMPKEY #ockey,
                     --+OCOMPKEY #ockey ] ] ].

v_unacc_le := main_verb & 
  [ SYNSEM unacc_verb ].
v_unerg_le := main_verb & 
  [ SYNSEM unerg_verb ].
v_unerg_imp_le := main_verb & 
  [ SYNSEM unerg_verb &
           [ LOCAL.CAT.HEAD.VFORM imp_vform ] ].
v_unerg_bse_le := main_verb & 
  [ SYNSEM unerg_verb &
           [ LOCAL.CAT.HEAD.VFORM bse_only ] ].

v_poss_le := main_verb & 
  [ SYNSEM poss_verb & 
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ] > ] ].

v_poss_got_le := amalg_word & 
  [ SYNSEM poss_verb & 
	   [ LOCAL non_fin_verb &
	         [ CAT [ HEAD [ VFORM psp,
				PRD -,
				MOD < > ],
			 VAL.COMPS < [ OPT - ] > ],
		   CONT.RELS <! #key !>,
		   KEYS.KEY #key ] ] ].
			  
v_poss_got_prd_le := amalg_word & 
  [ SYNSEM obj_equi_non_trans_prd_verb &
	   [ LOCAL non_fin_verb &
	         [ CAT [ HEAD [ VFORM psp,
				PRD -,
				MOD < > ],
			 VAL.COMPS < [ OPT - ], [ OPT - ] > ],
		   CONT.RELS.LIST.FIRST #key,
		   KEYS.KEY #key ] ] ].

v_cp_prop_raise_key_le := main_verb_sans_key & 
  [ INFLECTED -,
    SYNSEM cp_prop_raise_key_verb & 
            [ LOCAL.CAT.VAL.COMPS < [ OPT - ] > ] ].

v_adv_le := main_verb_sans_key & 
  [ INFLECTED -,
    SYNSEM adv_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ] > ] ].

v_sorb_pass_le := main_verb_sans_key & 
  [ INFLECTED -,
    SYNSEM sorbpass_verb &
            [ LOCAL verb_participle_affix &
                    [ CAT [ HEAD.VFORM psp_irreg,
			    VAL [ SUBJ < [ OPT - ] >,
				  COMPS < [ OPT - ], ... > ] ],
		      CONT psoa & [ RELS <! #key !> ],
		      KEYS.KEY #key ] ] ].


v_there_le := main_verb & 
  [ SYNSEM there_verb_synsem &
           [ LOCAL.CONT.HCONS <! !> ] ].

; Verb types for ":"
v_np_non_trans_colon_le := colon_verb_word &
  [ SYNSEM np_non_trans_verb & 
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ] > ] ].

v_cp_non_trans_colon_le := colon_verb_word &
  [ SYNSEM cp_intrans_verb &
            [ LOCAL.CAT.VAL.COMPS < [ OPT - ] > ] ].

v_sor_prd_colon_le := colon_verb_word &
  [ SYNSEM sor_prd_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT + ], [ OPT - ] > ] ].

v_unerg_colon_le := colon_verb_word &
  [ SYNSEM unerg_verb ].
