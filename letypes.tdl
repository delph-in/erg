;;; -*- Mode: tdl; Coding: utf-8; -*-
;;;
;;;  Copyright (c) 1994-2005
;;;    Dan Flickinger, Rob Malouf, Emily M. Bender
;;;    see erg/licence.txt for conditions
;;;
;;;  letypes.tdl
;;;
;;;  Lexical entry types (yield of lextypes hierarchy)
;;;
;;;  Created by Dan Flickinger, 15-June-1996
;;;
;;;  $Id$


; In the following type names, "mv" stands for "main_verb".  Complements
; marked with "*" in the type names are optional. 

v_-_it_le := main_verb & 
  [ SYNSEM atrans_verb ].

v_vp_it_le := main_verb & 
  [ SYNSEM atrans_inf_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ] > ] ].

v_cp_le := main_verb & 
  [ SYNSEM cp_intrans_verb ].

v_cp_comp_le := main_verb & 
  [ SYNSEM cp_intrans_verb & 
            [ LOCAL.CAT.VAL.COMPS < [ LOCAL.CAT.HEAD comp ] > ] ].

; 'warn' - can appear in quoted inversion
v_cp_invable_le := main_verb & 
  [ SYNSEM cp_intrans_invable_verb ].

v_cp_fin-inf_le := main_verb & 
  [ SYNSEM cp_fin_inf_intrans_verb ].

v_cp_fin-inf-q_le := main_verb & 
  [ SYNSEM cp_ques_fin_inf_intrans_verb ].

v_cp_prop_le := main_verb & 
  [ SYNSEM cp_prop_intrans_verb ].

v_cp_nfin_le := main_verb & 
  [ SYNSEM cp_prop_intrans_verb &
	   [ LOCAL.CAT.HEAD [ VFORM bse,
			      TAM [ TENSE present,
				    MOOD indicative ] ] ] ].

; "find": "I find that Kim has left" but "*I find Kim has left"
v_cp_comp-prop_le := main_verb & 
  [ SYNSEM cp_only_prop_intrans_verb ].

; look/seem like
v_cp_like_le := main_verb & 
  [ SYNSEM cp_like_intrans_verb ].

;; inform
v_np-cp_le := main_verb & 
  [ SYNSEM np_trans_cp_verb &
	   [ LOCAL.CAT.VAL.COMPS.FIRST.OPT - ] ].
;; answer
v_np*-cp_le := main_verb & 
  [ SYNSEM np_trans_cp_verb &
	   [ LOCAL.CAT.VAL.COMPS.FIRST.OPT + ] ].

; ask
v_np-cp_q_le := main_verb & 
  [ SYNSEM np_trans_cp_ques_verb &
	   [ LOCAL.CAT.VAL.COMPS.FIRST.OPT + ] ].

; persuade
v_np-cp_prop_le := main_verb & 
  [ SYNSEM np_trans_cp_prop_verb &
	   [ LOCAL.CAT.VAL.COMPS.FIRST.OPT - ] ].

; tell: tell me whether to stay
v_np-cp_fin-inf_le := main_verb & 
  [ SYNSEM np_trans_cp_fin_or_inf_verb &
	   [ LOCAL.CAT.VAL.COMPS.FIRST.OPT - ] ].

; ask, prefer 'ask that he be released'
v_cp_sbjnct_le := main_verb & 
  [ SYNSEM cp_bse_intrans_verb ].

; wait
v_cp_inf-only_le := main_verb & 
  [ SYNSEM for_to_verb ].

; try
v_vp_seq_le := main_verb & 
  [ SYNSEM subj_equi_verb ].

; Robust type for grammar-checking, e.g. for "This device allows to see."
v_vp_seq-rbst_le := main_verb & 
  [ SYNSEM subj_equi_verb,
    GENRE robust ].

; refrain from
v_vp_seq-from_le := main_verb & 
  [ SYNSEM subj_equi_from_verb ].

v_prd_seq_le := main_verb_mliszt & 
  [ SYNSEM subj_equi_prd_verb ].

v_prd_seq-idm_le := main_verb_mliszt & 
  [ SYNSEM subj_equi_prd_nogap_verb,
    IDIOM + ].

; run low (on X)
v_ap_seq_le := main_verb_mliszt & 
  [ SYNSEM subj_equi_prd_adj_verb ].

; want into
v_pp_seq_le := main_verb_mliszt & 
  [ SYNSEM subj_equi_prd_prep_verb ].

v_pp_seq-e_le := main_verb_mliszt & 
  [ SYNSEM subj_equi_empty_prep_verb ].

; stop working
; go shopping
v_vp_seq-prp_le := main_verb_mliszt & 
  [ SYNSEM subj_equi_prp_verb ].

; help
v_vp_seq-bse_le := main_verb_mliszt & 
  [ SYNSEM subj_equi_bse_verb ].

; 'I will go read', 'Go read' '*He went read'
v_vp_seq-go_le := main_verb_mliszt & 
  [ SYNSEM subj_equi_bse_verb &
	   [ LOCAL.CAT.HEAD.VFORM bse ] ].

; 'We need not stay' but "*He needs not stay", "*We will need not stay"
; cf. "He need not stay" (irreg)
v_vp_seq-n3sg_le := main_verb_newltop & 
  [ SYNSEM subj_equi_bse_n3sg_verb &
	   [ LOCAL pres_verb & [ CAT.HEAD.VFORM fin ] ] ].

; have yet to
v_p-vp_ssr_le := ssr_particle_v_lexent &
  [ SYNSEM.LKEYS [ --COMPKEY #cmin,
                   --+COMPKEY #cmin ] ].

; they try and find it
v_vp_seq-and_le := main_verb & 
  [ SYNSEM subj_equi_and_verb &
           [ LOCAL [ CAT.HEAD.VFORM fin,
                     AGR.PNG.PN -3s ] ] ].

; he will try and find it
v_vp_seq-and-bse_le := main_verb & 
  [ SYNSEM subj_equi_and_verb &
           [ LOCAL.CAT.HEAD.VFORM bse ] ].

; couldn't help but notice
v_vp_seq-but_le := main_verb & 
  [ SYNSEM subj_equi_but_verb &
           [ LOCAL.CAT.HEAD.VFORM bse ] ].

v_np-vp_oeq_le := main_verb & 
  [ SYNSEM obj_equi_verb ].

; "*This lets the cat to enter"
v_np-vp_oeq-rbst_le := main_verb & 
  [ SYNSEM obj_equi_verb,
    GENRE robust ].

; help
v_np-vp_oeq-bse_le := main_verb_mliszt & 
  [ SYNSEM obj_equi_bse_verb ].

v_np-prd_oeq_le := main_verb_mliszt & 
  [ SYNSEM obj_equi_prd_verb ].

v_np-ap_oeq_le := main_verb_mliszt & 
  [ SYNSEM obj_equi_prd_adj_verb ].

; have x ready
; have x in stock
; I want x confirmed
; get x ready
v_np-prd_oeq-ntr_le := main_verb_mliszt & 
  [ SYNSEM obj_equi_non_trans_prd_verb &
	   [ LKEYS [ --OCOMPKEY #ocmin,
                     --+OCOMPKEY #ocmin ] ] ].

; I have X to get rid of
v_np-vpslnp_oeq_le := main_verb & 
  [ SYNSEM obj_equi_vpslash_prd_verb &
	   [ LKEYS [ --OCOMPKEY #ocmin,
                     --+OCOMPKEY #ocmin ] ] ].

; prevent X from Ving
v_np-vp_oeq-from_le := main_verb & 
  [ SYNSEM obj_equi_from_verb ].


; promise
v_np-vp_aeq-ntr_le := main_verb & 
  [ SYNSEM anom_equi_verb &
            [ LOCAL.CAT.VAL.COMPS.FIRST.OPT + ] ].

; use X to do Y
v_np-vp_aeq_le := main_verb & 
  [ SYNSEM anom_equi_trans_verb ].

; kim took too long to arrive
v_np-vp_aeq-noel_le := main_verb & 
  [ SYNSEM anom_equi_oblig_verb ].

; have trouble sleeping
v_np-vp_aeq-prp_le := main_verb_mliszt & 
  [ SYNSEM anom_equi_prp_verb ].

; turn out to
v_p-vp_seq_le := main_verb & 
  [ SYNSEM particle_inf_verb &
            [ LKEYS [ --COMPKEY #cmin,
                      --+COMPKEY #cmin ] ] ].

; keep on driving
v_p-vp_prp_le := main_verb_mliszt & 
  [ SYNSEM particle_prp_verb &
            [ LKEYS [ --COMPKEY #cmin,
                      --+COMPKEY #cmin ] ] ].

v_p-cp_le := main_verb & 
  [ SYNSEM particle_cp_verb &
            [ LKEYS [ --COMPKEY #cmin,
                      --+COMPKEY #cmin ] ] ].

v_p-pp*-cp_le := main_verb & 
  [ SYNSEM particle_pp_cp_verb &
            [ LKEYS [ --COMPKEY #cmin,
                      --+COMPKEY #cmin ] ] ].

v_p-vp_oeq_le := main_verb & 
  [ SYNSEM particle_oeq_verb &
            [ LKEYS [ --COMPKEY #cmin,
                      --+COMPKEY #cmin ] ] ].

v_pp-vp_oeq_le := main_verb & 
  [ SYNSEM oeq_pp_inf_verb &
            [ LOCAL.CAT.VAL.COMPS.FIRST.OPT -,
              LKEYS [ --COMPKEY #cmin,
                      --+COMPKEY #cmin ] ] ].

;; leave it to kim to arrange the meeting
v_it-pp-vp_oeq_le := main_verb & 
  [ SYNSEM expl_pp_inf_oeq_verb &
	   [ LKEYS [ --OCOMPKEY #ocmin,
                     --+OCOMPKEY #ocmin ] ] ].

;; arrange (with kim) to meet her
v_pp-vp_seq_le := main_verb & 
  [ SYNSEM pp_inf_seq_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT + ], [ OPT - ] > ] ].

;; arrange it with kim to meet her
v_it-pp-vp_seq_le := main_verb & 
  [ SYNSEM expl_pp_inf_seq_verb &
	   [ LKEYS [ --OCOMPKEY #ocmin,
                     --+OCOMPKEY #ocmin ] ] ].

;; it bothers kim that sally left; it bothers kim to leave
v_np-cp_it-s_le := main_verb & 
  [ SYNSEM expl_it_subj_np_cp_verb ].

; cost
v_np-np-cp_it-s_le := main_verb & 
  [ SYNSEM expl_it_subj_np_np_cp_inf_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT + ], 
                                   [ OPT + ],
				   [ LOCAL.CONT.HOOK.INDEX.SF prop ] > ] ].

; take: 'took him ten minutes to leave'
v_np*-np-vp_it-s_le := main_verb & 
  [ SYNSEM expl_it_subj_np_np_vp_inf_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT + ], 
                                   [ OPT - ],
				   [ LOCAL.CONT.HOOK.INDEX.SF prop ] > ] ].

; 'it advances our cause (a lot) to take this step"
; "it will cost us (a lot) to win"
v_np-np*-vp_it-s_le := main_verb & 
  [ SYNSEM expl_it_subj_np_np_vp_inf_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], 
                                   [ OPT + ],
				   [ LOCAL.CONT.HOOK.INDEX.SF prop ] > ] ].

;; it seems (to kim) that sandy left
v_pp*-cp_it-s_le := main_verb & 
  [ SYNSEM expl_it_subj_pp_cp_verb &
	   [ LOCAL.CAT.VAL.COMPS
                            < [ OPT + ], 
                              [ LOCAL.CONT.HOOK.INDEX.SF prop-or-like ] >,
             LKEYS.--COMPKEY _to_p_sel_rel ] ].

;; it occurred *(to me) that Sandy left
v_pp-cp_it-s_le := main_verb & 
  [ SYNSEM expl_it_subj_pp_cp_verb &
	   [ LOCAL.CAT.VAL.COMPS 
                            < [ OPT - ], 
                              [ LOCAL.CONT.HOOK.INDEX.SF prop-or-like ] >,
             LKEYS.--COMPKEY _to_p_sel_rel ] ].

;; it looks (to kim) like Sandy left
v_pp*-cp_like_le := main_verb & 
  [ SYNSEM expl_it_subj_pp_cp_verb &
	   [ LOCAL.CAT.VAL.COMPS 
                       < [ OPT + ], 
                         [ LOCAL [ CAT.HEAD comp,
                                   CONT.HOOK.INDEX.SF like-iforce ] ] >,
             LKEYS.--COMPKEY _to_p_sel_rel ] ].


;; It doesn't matter who stays
v_pp*-cp_unsp_le := main_verb & 
  [ SYNSEM expl_it_subj_pp_cp_verb &
	   [ LOCAL.CAT.VAL.COMPS 
                            < [ OPT + ], 
                              [ LOCAL.CONT.HOOK.INDEX.SF prop-or-ques ] >,
             LKEYS.--COMPKEY _to_p_sel_rel ] ].

;; It dawned on Kim that ...
v_pp-cp_it-s-e_le := main_verb & 
  [ SYNSEM expl_it_subj_pp_cp_verb &
	   [ LOCAL.CAT.VAL.COMPS 
                            < [ OPT - ], 
                              [ LOCAL.CONT.HOOK.INDEX.SF prop-or-like ] > ] ].


; it turns out that kim arrived
v_p-cp_it-s_le := main_verb & 
  [ SYNSEM expl_it_subj_prtcl_cp_verb ].

; It follows that ...
v_cp_it-s_le := main_verb & 
  [ SYNSEM expl_it_subj_cp_verb ].

; it would help/wouldn't hurt to know ...
v_vp_it-s_le := main_verb & 
  [ SYNSEM expl_it_subj_vp_verb ].

; bet
v_np-np-cp_le := main_verb & 
  [ SYNSEM np_np_cp_verb ].

; suggest
v_pp*-cp_le := main_verb & 
  [ SYNSEM pp_cp_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT + ],
				   [ --SIND.SF prop ] > ] ].

; mean by X that Y
v_pp-cp_le := main_verb & 
  [ SYNSEM pp_cp_verb &
	   [ LOCAL.CAT.VAL.COMPS.FIRST.OPT - ] ].

v_pp-cp_fin_le := main_verb & 
  [ SYNSEM pp_cp_fin_verb &
	   [ LOCAL.CAT.VAL.COMPS.FIRST.OPT + ] ].

; 'see to it that X'
v_pp-it-cp_le := main_verb & 
  [ SYNSEM pp_expl_cp_verb &
	   [ LOCAL.CAT.VAL.COMPS.FIRST.OPT - ] ].

; would like
v_np-vp_sor-ntr_le := main_verb_mliszt & 
  [ SYNSEM sor_non_trans_verb ].

v_np-vp_sor_le := main_verb_mliszt & 
  [ SYNSEM sor_verb ].

v_np-vp_bse_le := main_verb_mliszt & 
  [ SYNSEM sorb_verb ].

; make: 'kim made it clear that sandy arrived'
v_np-prd_sor_le := main_verb_mliszt & 
  [ SYNSEM sor_prd_verb &
	   [ LOCAL.CAT.VAL.COMPS.FIRST.OPT - ] ].

v_np-np_le := main_verb & 
  [ SYNSEM ditrans_verb & 
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ] > ] ].

v_np*-np*_le := main_verb & 
  [ SYNSEM ditrans_verb & 
	   [ LOCAL.CAT.VAL.COMPS < [ OPT + ], [ OPT + ] > ] ].

v_np-np_only_le := main_verb & 
  [ SYNSEM ditrans_only_verb & 
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ] >,
             LKEYS [ --OCOMPKEY #ocmin,
                     --+OCOMPKEY #ocmin ] ] ].

v_np*-np*_only_le := main_verb & 
  [ SYNSEM ditrans_only_verb & 
	   [ LOCAL.CAT.VAL.COMPS < [ OPT + ], [ OPT + ] > ] ].

v_np-np_idm_le := main_verb & 
  [ SYNSEM ditrans_only_verb & 
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ] >,
             LKEYS [ --OCOMPKEY #ocmin,
                     --+OCOMPKEY #ocmin ] ],
    IDIOM + ].

;; talk
v_pp*-pp*_le := main_verb & 
  [ SYNSEM double_pp_verb & 
	   [ LOCAL.CAT.VAL.COMPS < [ OPT + ], [ OPT + ] > ] ].
v_pp-pp_le := main_verb & 
  [ SYNSEM double_pp_verb & 
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ] >,
             LKEYS [ --COMPKEY #cmin,
                     --+COMPKEY #cmin,
                     --OCOMPKEY #ocmin,
                     --+OCOMPKEY #ocmin ] ] ].

v_pp-pp-e_le := main_verb & 
  [ SYNSEM double_pp_empty_pp_verb & 
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ] >,
             LKEYS [ --COMPKEY #cmin,
                     --+COMPKEY #cmin,
                     --OCOMPKEY #ocmin,
                     --+OCOMPKEY #ocmin ] ] ].

v_np*-pp*-ppto_le := main_verb & 
  [ SYNSEM np_trans_double_pp_verb & 
	   [ LOCAL.CAT.VAL.COMPS < [ OPT + ], [ OPT + ], 
                                   [ OPT -,
                                     LOCAL.CAT.HEAD.MINORS.MIN #ocmin &
                                         _to_p_sel_rel ] >,
             LKEYS.--+OCOMPKEY #ocmin ] ].

v_np-pp*-ppto_le := main_verb & 
  [ SYNSEM np_trans_double_pp_verb & 
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT + ], 
                                   [ OPT -,
                                     LOCAL.CAT.HEAD.MINORS.MIN #ocmin &
                                         _to_p_sel_rel ] >,
             LKEYS.--+OCOMPKEY #ocmin ] ].

v_np*-pp*-ppfor_le := main_verb & 
  [ SYNSEM np_trans_double_pp_verb & 
  	   [ LOCAL.CAT.VAL.COMPS < [ OPT + ], [ OPT + ], 
                                   [ OPT -,
                                     LOCAL.CAT.HEAD.MINORS.MIN #ocmin &
                                         _for_p_sel_rel ] >,
             LKEYS.--+OCOMPKEY #ocmin ] ].

v_pp_e_le := main_verb & 
  [ SYNSEM empty_prep_intrans_verb & 
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ] >,
             LKEYS [ --COMPKEY #cmin,
                     --+COMPKEY #cmin ] ] ].

v_np-pp_e_le := main_verb & 
  [ SYNSEM empty_prep_trans_verb & 
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ] >,
             LKEYS [ --OCOMPKEY #ocmin,
                     --+OCOMPKEY #ocmin ] ] ].

v_np*-pp_e_le := main_verb & 
  [ SYNSEM empty_prep_trans_verb & 
	   [ LOCAL.CAT.VAL.COMPS < [ OPT + ], [ OPT - ] >,
             LKEYS [ --OCOMPKEY #ocmin,
                     --+OCOMPKEY #ocmin ] ] ].

v_np-pp*_e-imp_le := main_verb & 
  [ SYNSEM empty_prep_trans_verb & 
	   [ LOCAL [ CAT [ HEAD.VFORM fin,
                           VAL [ SUBJ < [ LOCAL.CONT.HOOK.INDEX #ind ] >,
                                 COMPS < [ OPT - ], [ OPT + ] > ] ],
                     AGR #ind ],
             LKEYS.KEYREL.ARG1 #ind & [ PNG.PN 1 ] ] ].
; take into account
v_np-pp_e-idm_le := main_verb & 
  [ SYNSEM empty_prep_trans_verb & 
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ] >,
             LKEYS [ --OCOMPKEY #ocmin,
                     --+OCOMPKEY #ocmin ] ],
    IDIOM + ].

v_np-pp*_e-idm_le := main_verb & 
  [ SYNSEM empty_prep_trans_verb & 
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT + ] > ],
    IDIOM + ].

; came into being
v_pp_e-idm_le := main_verb & 
  [ SYNSEM empty_prep_intrans_verb & 
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ] >,
             LKEYS [ --COMPKEY #cmin,
                     --+COMPKEY #cmin ] ],
    IDIOM + ].

; 'interest kim in'
v_np-pp_e-ntr_le := main_verb & 
  [ SYNSEM empty_prep_non_trans_verb & 
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ] >,
             LKEYS [ --OCOMPKEY #ocmin,
                     --+OCOMPKEY #ocmin ] ] ].

;; 'prefer it if ...'
v_it-cp_le := main_verb &
  [ SYNSEM expl_obj_cp_verb &
	   [ LOCAL.CAT.VAL.COMPS.FIRST.OPT - ] ].

;; 'hate it that ...'
v_it-cp_prop-c_le := main_verb &
  [ SYNSEM expl_obj_cp_verb &
	 [ LOCAL.CAT.VAL.COMPS < [ OPT - ], 
                                 [ LOCAL [ CAT.HEAD comp,
                                           CONT.HOOK.INDEX.SF prop ] ] >,
           LKEYS [ --COMPKEY #cmin,
                   --+COMPKEY #cmin ] ] ].

;; 'take it (that) ...'
v_it-cp_prop_le := main_verb &
  [ SYNSEM expl_obj_cp_verb &
	 [ LOCAL.CAT.VAL.COMPS < [ OPT - ], 
                                 [ LOCAL.CONT.HOOK.INDEX.SF prop ] >]].
; 'make it clear that ...'
v_it-prd_le := main_verb_mliszt &
  [ SYNSEM expl_obj_prd_verb ].

v_np_le := main_verb & 
  [ SYNSEM np_trans_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ] > ] ].

v_np*_le := main_verb & 
  [ SYNSEM np_trans_verb ].

v_np_noger_le := main_verb & 
  [ ALTS [ VADJ -,
           NGER - ],
    SYNSEM np_trans_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ] > ] ].

; Temporary patch for e.g. 'take' which has an optional ARG3 role, which
; needs to be present so generator won't spuriously fill it.
v_np_noarg3_le := main_verb & 
  [ SYNSEM np_trans_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ] >,
             LKEYS.KEYREL.ARG3 semarg ] ].

v_np*_nfin_le := main_verb & 
  [ SYNSEM np_trans_verb &
	   [ LOCAL.CAT [ HEAD [ VFORM bse,
                                TAM [ TENSE present,
                                      MOOD indicative ] ],
                         VAL.COMPS < [ OPT + ] > ] ] ].

v_np_idm_le := main_verb_mliszt & 
  [ SYNSEM np_trans_refl_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ] > ],
    IDIOM + ].

; For e.g. "recieve"
v_np_rbst_le := main_verb & 
  [ SYNSEM np_trans_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ] > ],
    GENRE robust ].

; 'elected him president'
v_np-nb_le := main_verb_mliszt & 
  [ SYNSEM ditrans_np_nbar_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ] > ] ].

; 'see picture, page 2'
v_nb-np*_imp_le := main_verb_mliszt & 
  [ SYNSEM ditrans_nbar_np_verb & 
	   [ LOCAL.CAT [ HEAD.VFORM imp_vform,
                         VAL.COMPS < [ OPT - ], [ OPT + ] > ] ] ].

v_pp_e-nfin_le := main_verb & 
  [ SYNSEM empty_prep_intrans_verb & 
	   [ LOCAL.CAT [ HEAD [ VFORM non_fin,
                                TAM [ TENSE present,
                                      MOOD indicative ] ],
                         VAL.COMPS < [ OPT - ] > ],
             LKEYS [ --COMPKEY #cmin,
                     --+COMPKEY #cmin ] ] ].

v_np-pp_le := main_verb_mliszt & 
  [ SYNSEM prep_trans_verb & 
	   [ LKEYS [ --OCOMPKEY #ocmin,
                     --+OCOMPKEY #ocmin ] ] ].

;; takes dir_state_modable_rel oblique complement.
;; put (takes variety of PP complements, so avoid chart dependency filter)
v_np-pp_prop_le := main_verb_mliszt & 
  [ SYNSEM prep_trans_verb & 
	   [ LOCAL.CAT.VAL.COMPS < synsem,
                                   [ LOCAL.CAT.HEAD.MINORS
                                       [ MIN dir_or_state_nontemp_rel ] ] > ]].
;; change one's mind about
v_np-pp_nmod_le := main_verb_mliszt &
  [ SYNSEM prep_trans_verb_nmod &
           [ LKEYS [ --OCOMPKEY #ocmin,
                     --+OCOMPKEY #ocmin ] ] ].

v_np-pp_oeq-as_le := main_verb &
  [ SYNSEM np_as_verb &
	   [ LKEYS [ --OCOMPKEY #ocmin,
                     --+OCOMPKEY #ocmin ] ] ].

v_np_ntr_le := main_verb & 
  [ SYNSEM np_non_trans_verb & 
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ] > ] ].

v_np*_ntr_le := main_verb & 
  [ SYNSEM np_non_trans_verb & 
	   [ LOCAL.CAT.VAL.COMPS < [ OPT + ] > ] ].

; 'become'
v_np_id_le := main_verb & 
  [ SYNSEM np_non_trans_verb & 
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ] >,
             LKEYS.KEYREL [ ARG1.SORT #sort,
                            ARG2.SORT #sort ] ] ].

; 'become president'
v_nb_le := main_verb_mliszt & 
  [ SYNSEM nbar_verb & 
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ] > ] ].

; 'stood guard'
v_nb_idm_le := main_verb & 
  [ SYNSEM np_non_trans_verb & 
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ] > ],
    IDIOM + ].

v_np-pp_seq-as_le := main_verb_mliszt & 
  [ SYNSEM np_as_seq_verb &
	   [ LKEYS [ --OCOMPKEY #ocmin,
                     --+OCOMPKEY #ocmin ] ] ].

v_p_le := main_verb & 
  [ SYNSEM particle_verb &
	   [ LKEYS [ --COMPKEY #cmin,
                     --+COMPKEY #cmin ] ] ].
v_p_3only_le := main_verb & 
  [ SYNSEM particle_3only_verb &
	   [ LKEYS [ --COMPKEY #cmin,
                     --+COMPKEY #cmin ] ] ].
v_p-np_le := main_verb & 
  [ SYNSEM np_particle_verb &
	   [ LKEYS [ --COMPKEY #cmin,
                     --+COMPKEY #cmin ] ] ].
v_np-p_le := main_verb & 
  [ SYNSEM np_particle_noalt_verb &
	   [ LKEYS [ --COMPKEY #ocmin,
                     --+COMPKEY #ocmin ] ],
    ALTS.NPPART - ].
v_p-prd_le := main_verb & 
  [ SYNSEM particle_prd_verb &
	   [ LKEYS [ --COMPKEY #cmin,
                     --+COMPKEY #cmin ] ] ].
v_p-pp_le := main_verb & 
  [ SYNSEM particle_pp_verb &
	   [ LOCAL.CAT.VAL.COMPS < synsem, [ OPT - ] >,
             LKEYS [ --COMPKEY #cmin,
                     --+COMPKEY #cmin,
                     --OCOMPKEY #ocmin,
                     --+OCOMPKEY #ocmin ] ] ].

v_p-pp_e_le := main_verb & 
  [ SYNSEM particle_empty_pp_verb &
	   [ LOCAL.CAT.VAL.COMPS < synsem, [ OPT - ] >,
             LKEYS [ --COMPKEY #cmin,
                     --+COMPKEY #cmin,
                     --OCOMPKEY #ocmin,
                     --+OCOMPKEY #ocmin ] ] ].

v_p-pp*_e_le := main_verb & 
  [ SYNSEM particle_empty_pp_verb &
	   [ LOCAL.CAT.VAL.COMPS < synsem, [ OPT + ] >,
             LKEYS [ --COMPKEY #cmin,
                     --+COMPKEY #cmin ] ] ].

; 'boils it down to'
v_p-np-pp_to_le := main_verb & 
  [ SYNSEM np_particle_pp_verb &
	   [ LOCAL.CAT.VAL.COMPS < synsem, synsem,
                                   [ LOCAL.CAT.HEAD.MINORS.MIN _to_p_sel_rel ]>,
             LKEYS [ --COMPKEY #cmin,
                     --+COMPKEY #cmin,
                     --OCOMPKEY #ocmin,
                     --+OCOMPKEY #ocmin ] ] ].

; 'made up of'
v_p-np-pp_of_le := main_verb & 
  [ SYNSEM np_particle_pp_verb &
	   [ LOCAL.CAT.VAL.COMPS < synsem, synsem,
                                   [ LOCAL.CAT.HEAD.MINORS.MIN _of_p_sel_rel ]>,
             LKEYS [ --COMPKEY #cmin,
                     --+COMPKEY #cmin,
                     --OCOMPKEY #ocmin,
                     --+OCOMPKEY #ocmin ] ] ].


v_p-np-pp_for_le := main_verb & 
  [ SYNSEM np_particle_pp_verb &
	   [ LOCAL.CAT.VAL.COMPS < synsem, synsem,
                                   [ LOCAL.CAT.HEAD.MINORS.MIN _for_p_sel_rel]>,
             LKEYS [ --COMPKEY #cmin,
                     --+COMPKEY #cmin,
                     --OCOMPKEY #ocmin,
                     --+OCOMPKEY #ocmin ] ] ].

v_p-np-pp_from_le := main_verb & 
  [ SYNSEM np_particle_pp_verb &
	   [ LOCAL.CAT.VAL.COMPS < synsem, synsem, 
                                   [ LOCAL.CAT.HEAD.MINORS.MIN _from_p_sel_rel]>,
             LKEYS [ --COMPKEY #cmin,
                     --+COMPKEY #cmin,
                     --OCOMPKEY #ocmin,
                     --+OCOMPKEY #ocmin ] ] ].

v_np-p-np_le := main_verb & 
  [ SYNSEM np_particle_np_verb &
           [ LKEYS [ --COMPKEY #cmin,
                     --+COMPKEY #cmin ] ] ].

v_pp_arg_le := main_verb  & 
  [ SYNSEM prep_intrans_event_verb & 
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ] > ] ].
v_pp_le := main_verb  & 
  [ SYNSEM prep_intrans_verb & 
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ] >,
             LKEYS [ --COMPKEY #cmin,
                     --+COMPKEY #cmin ] ] ].

v_pp*_dir_le := main_verb  & 
  [ SYNSEM prep_intrans_dir_verb & 
	   [ LOCAL.CAT.VAL.COMPS < [ OPT + ] > ] ].

v_pp_dir_le := main_verb  & 
  [ SYNSEM prep_intrans_dir_verb & 
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ] > ] ].

v_pp*_le := main_verb & 
  [ SYNSEM prep_intrans_verb & 
	   [ LOCAL.CAT.VAL.COMPS < [ OPT + ] > ] ].

v_pp_unacc_le := main_verb  & 
  [ SYNSEM prep_intrans_unacc_verb & 
	   [ LOCAL.CAT.VAL.COMPS < [ OPT + ] > ] ].

v_vp_ssr_le := main_verb & 
  [ SYNSEM ssr_verb ].

v_vp_ssr-prp_le := main_verb & 
  [ SYNSEM ssr_prp_verb ].
; 'have to': no imperative "*Have to leave!"
v_vp_ssr-nimp_le := main_verb & 
  [ SYNSEM ssr_noimp_verb ].

; DPF 26-aug-07 - Merged with v_ap_seq_le
;v_ap_ssr_le := main_verb_mliszt & 
;  [ SYNSEM subj_equi_prd_adj_verb &
;	   [ LOCAL.CAT.VAL.COMPS < [ LOCAL.CAT.HEAD basic_adj ] > ] ].
v_pp-vp_ssr_le := main_verb_mliszt & 
  [ SYNSEM ssr_pp_inf_verb &
	   [ LOCAL.CAT.VAL.COMPS.FIRST.OPT + ] ].

; DPF 29-aug-07 - These verbs like "become" supposedly don't combine with
; predicative VPs, but stative passives often seem to be fine, 
; as in ; "This picture became damaged/associated with Picasso" or
; "We became inspired by the music."  Rather than adding a lexical rule to
; convert them to predicative adjs, consider a HEAD supertype of basic_adj
; and passive-verb.  FIX.

v_ap-pp_seq_le := main_verb_mliszt & 
  [ SYNSEM seq_prdp_pp_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ LOCAL.CAT.HEAD basic_adj ], 
                                   [ OPT + ] > ] ].
v_pp-pp_seq_le := main_verb_mliszt & 
  [ SYNSEM seq_prdp_pp_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ LOCAL.CAT.HEAD prep ], 
                                   [ OPT + ] >,
             LKEYS [ --COMPKEY #cmin,
                     --+COMPKEY #cmin ] ] ].
v_prd-pp_seq_le := main_verb_mliszt & 
  [ SYNSEM seq_prdp_pp_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ LOCAL.CAT.HEAD a_or_p ],
                                   [ OPT + ] > ] ].
; feel good about
v_ap-pp_about_le := main_verb_mliszt & 
  [ SYNSEM seq_prdp_pp_about_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ LOCAL.CAT.HEAD v_or_a ], 
                                   [ OPT + ] > ] ].

v_np-pp_to_le := main_verb & 
  [ SYNSEM empty_to_trans_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ] >,
             LKEYS [ --COMPKEY #cmin,
                     --+COMPKEY #cmin,
                     --OCOMPKEY #ocmin,
                     --+OCOMPKEY #ocmin ] ] ].

v_np-pp*_to_le := main_verb & 
  [ SYNSEM empty_to_trans_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT + ] >,
             LKEYS [ --COMPKEY #cmin,
                     --+COMPKEY #cmin ] ] ].

v_np*-pp_to_le := main_verb & 
  [ SYNSEM empty_to_trans_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT + ], [ OPT - ] >,
             LKEYS [ --OCOMPKEY #ocmin,
                     --+OCOMPKEY #ocmin ] ] ].

v_np*-pp*_to_le := main_verb & 
  [ SYNSEM empty_to_trans_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT + ], [ OPT + ] > ] ].

v_-_unacc_le := main_verb & 
  [ SYNSEM unacc_verb ].

v_-_le := main_verb & 
  [ SYNSEM unerg_verb ].

v_-_imp_le := main_verb & 
  [ SYNSEM unerg_verb &
           [ LOCAL.CAT.HEAD.VFORM imp_vform ] ].
v_-_bse_le := main_verb & 
  [ SYNSEM unerg_verb &
           [ LOCAL.CAT.HEAD.VFORM bse_only ] ].

v_np_poss_le := main_verb & 
  [ SYNSEM poss_verb & 
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ] > ] ].

v_np_got_le := norm_nonconj_word &
  [ SYNSEM poss_verb & 
	   [ LOCAL non_fin_verb &
	         [ CAT [ HEAD [ VFORM psp,
				PRD - ],
			 VAL.COMPS < [ OPT - ] > ],
		   CONT.RELS <! relation !> ] ] ].
			  
v_prd_got_le := norm_nonconj_word &
  [ SYNSEM obj_equi_non_trans_prd_verb &
	   [ LOCAL non_fin_verb &
	         [ CAT.HEAD [ VFORM psp,
                              PRD - ] ] ] ].

v_cp_rkey-bse_le := v_cp_prop_raise_key_lexent &
  [ SYNSEM.LOCAL bse_verb ].

v_cp_rkey-3sg_le := v_cp_prop_raise_key_lexent &
  [ SYNSEM.LOCAL fin_verb & [ CAT [ HEAD.TAM indic_tam & 
                                             [ TENSE nonpast,
                                               ASPECT no_aspect ],
                                    VAL.SUBJ < [ LOCAL.AGR.PNG.PN 3s ] > ] ] ].

v_cp_rkey-n3sg_le := v_cp_prop_raise_key_lexent &
  [ SYNSEM.LOCAL fin_verb & [ CAT [ HEAD.TAM indic_tam & 
                                             [ TENSE nonpast,
                                               ASPECT no_aspect ],
                                    VAL.SUBJ < [ LOCAL.AGR.PNG.PN -3s ] > ] ]].

v_cp_rkey-pst_le := v_cp_prop_raise_key_lexent &
  [ SYNSEM.LOCAL past_or_subj_verb ].

v_cp_rkey-prp_le := v_cp_prop_raise_key_lexent &
  [ SYNSEM.LOCAL prp_verb ].

v_cp_rkey-psp_le := v_cp_prop_raise_key_lexent &
  [ SYNSEM.LOCAL psp_verb ].

v_adv_le := basic_main_verb & 
  [ INFLECTD -,
    SYNSEM adv_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ] > ] ].

; 'made': "Kim made sandy arrive' but "Sandy was made TO arrive'
v_vp_sorb-psv_le := basic_main_verb & 
  [ INFLECTD -,
    SYNSEM sor_verb &
            [ LOCAL verb_participle_affix &
                    [ CAT [ HEAD.VFORM pas,
			    VAL [ SUBJ < [ OPT - ] >,
				  COMPS < [ OPT - ], ... > ] ],
		      CONT psoa & [ RELS <! relation !> ] ] ] ].

; 'born'
v_-_psv_le := basic_main_verb & 
  [ INFLECTD +,
    SYNSEM passive_unerg_synsem &
           [ LOCAL.CONT.HCONS <! !> ] ].

; 'put' - "That was well put", but block in n-v compounds like "*idea-put"
v_-_psv-ncnh_le := basic_main_verb & 
  [ INFLECTD +,
    SYNSEM passive_unerg_synsem &
           [ LOCAL [ CAT.POSTHD +,
		     CONT.HCONS <! !> ] ] ].

; 'unevaluated (by Abrams)'
v_-_psv-neg_le := main_verb_newltop &
  [ INFLECTD +,
    SYNSEM passive_unerg_neg_synsem ].

v_np_thr-s_le := main_verb & 
  [ SYNSEM there_verb_synsem &
           [ LOCAL.CONT.HCONS <! !> ] ].

v_np_locinv_mv_le := loc_inv_mv_word.

v_np_locinv-is_le := loc_inv_be_word &
  [ SYNSEM.LOCAL [ CAT.HEAD.TAM.TENSE present,
                   AGR.PNG.PN 3s ] ].

v_np_locinv-are_le := loc_inv_be_word &
  [ SYNSEM.LOCAL [ CAT.HEAD.TAM.TENSE present,
                   AGR.PNG.PN 3p ] ].

v_np_locinv-was_le := loc_inv_be_word &
  [ SYNSEM.LOCAL [ CAT.HEAD.TAM.TENSE past,
                   AGR.PNG.PN 3s ] ].

v_np_locinv-were_le := loc_inv_be_word &
  [ SYNSEM.LOCAL [ CAT.HEAD.TAM.TENSE past,
                   AGR.PNG.PN 3p ] ].
