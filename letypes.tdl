;;; -*- Mode: tdl; Coding: utf-8; -*-
;;;
;;;  Copyright (c) 1994-2005
;;;    Dan Flickinger, Rob Malouf, Emily M. Bender
;;;    see erg/licence.txt for conditions
;;;
;;;  letypes.tdl
;;;
;;;  Lexical entry types (yield of lextypes hierarchy)
;;;
;;;  Created by Dan Flickinger, 15-June-1996
;;;
;;;  $Id$


; In the following type names, "mv" stands for "main_verb".  Complements
; marked with "*" in the type names are optional. 

v_atrans_le := main_verb & 
  [ SYNSEM atrans_verb ].

v_atrans_inf_le := main_verb & 
  [ SYNSEM atrans_inf_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ] > ] ].

v_cp_non_trans_le := main_verb & 
  [ SYNSEM cp_intrans_verb & 
            [ LOCAL.CAT.VAL.COMPS < [ OPT - ] > ] ].

v_cp_only_non_trans_le := main_verb & 
  [ SYNSEM cp_intrans_verb & 
            [ LOCAL.CAT.VAL.COMPS < [ OPT -,
                                      LOCAL.CAT.HEAD comp ] > ] ].

v_cp_fin_inf_non_trans_le := main_verb & 
  [ SYNSEM cp_fin_inf_intrans_verb & 
            [ LOCAL.CAT.VAL.COMPS < [ OPT - ] > ] ].

v_cp_ques_fin_inf_non_trans_le := main_verb & 
  [ SYNSEM cp_fin_inf_intrans_verb & 
            [ LOCAL.CAT.VAL.COMPS < [ OPT -,
                                      LOCAL.CONT.MSG.PRED int_m_rel ] > ] ].

v_cp_prop_non_trans_le := main_verb & 
  [ SYNSEM cp_prop_intrans_verb & 
            [ LOCAL.CAT.VAL.COMPS < [ OPT - ] > ] ].

; "find": "I find that Kim has left" but "*I find Kim has left"
v_cp_only_prop_non_trans_le := main_verb & 
  [ SYNSEM cp_only_prop_intrans_verb & 
            [ LOCAL.CAT.VAL.COMPS < [ OPT - ] > ] ].

v_cp_prop*_non_trans_le := main_verb & 
  [ SYNSEM cp_prop_intrans_verb &
            [ LOCAL.CAT.VAL.COMPS < [ OPT + ] > ] ].

; look/seem like
v_cp_like_non_trans_le := main_verb & 
  [ SYNSEM cp_like_intrans_verb & 
            [ LOCAL.CAT.VAL.COMPS < [ OPT - ] > ] ].

;; inform
v_np_trans_cp_le := main_verb & 
  [ SYNSEM np_trans_cp_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ] > ] ].
;; answer
v_np*_trans_cp_le := main_verb & 
  [ SYNSEM np_trans_cp_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT + ], [ OPT - ] > ] ].

; ask
v_np_trans_cp_ques_le := main_verb & 
  [ SYNSEM np_trans_cp_ques_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT + ], [ OPT - ] > ] ].

; persuade
v_np_trans_cp_prop_le := main_verb & 
  [ SYNSEM np_trans_cp_prop_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ] > ] ].

; tell: tell me whether to stay
v_np_trans_cp_fin_or_inf_le := main_verb & 
  [ SYNSEM np_trans_cp_fin_or_inf_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ] > ] ].

; ask, prefer 'ask that he be released'
v_cp_subj_le := main_verb & 
  [ SYNSEM cp_bse_intrans_verb &
            [ LOCAL.CAT.VAL.COMPS < [ OPT - ] > ] ].

; wait
v_cp_inf_le := main_verb & 
  [ SYNSEM for_to_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ] > ] ].

; try
v_subj_equi_le := main_verb & 
  [ SYNSEM subj_equi_verb &
            [ LOCAL.CAT.VAL.COMPS < [ OPT - ] > ] ].

v_subj_equi_prd_le := main_verb_mliszt & 
  [ SYNSEM subj_equi_prd_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ] > ] ].

v_subj_equi_prd_idiom_le := main_verb_mliszt & 
  [ SYNSEM subj_equi_prd_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ] > ],
    IDIOM + ].

; run low (on X)
v_subj_equi_prd_adj_le := main_verb_mliszt & 
  [ SYNSEM subj_equi_prd_adj_verb ].

; want into
v_subj_equi_prd_prep_le := main_verb_mliszt & 
  [ SYNSEM subj_equi_prd_prep_verb ].

v_subj_equi_empty_prep_le := main_verb_mliszt & 
  [ SYNSEM subj_equi_empty_prep_verb ].

; stop working
; go shopping
v_subj_equi_prp_le := main_verb_mliszt & 
  [ SYNSEM subj_equi_prp_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ] > ] ].

; help
v_subj_equi_bse_le := main_verb_mliszt & 
  [ SYNSEM subj_equi_bse_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ] > ] ].

; 'I will go read', 'Go read' '*He went read'
v_subj_equi_bse_go_le := main_verb_mliszt & 
  [ SYNSEM subj_equi_bse_verb &
	   [ LOCAL.CAT [ HEAD.VFORM bse,
                         VAL.COMPS < [ OPT - ] > ] ] ].

; 'We need not stay' but "*He needs not stay", "*We will need not stay"
v_subj_equi_bse_non3sg_le := main_verb_mliszt & 
  [ SYNSEM subj_equi_bse_verb &
	   [ LOCAL [ CAT.HEAD.VFORM fin,
                     AGR.PNG.PN non3sg ] ] ].

; have yet to
v_ssr_particle_le := ssr_particle_v_lexent &
  [ SYNSEM [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ] >,
             LKEYS [ --COMPKEY #ckey,
                     --+COMPKEY #ckey ] ] ].

; they try and find it
v_subj_equi_and_fin_le := main_verb & 
  [ SYNSEM subj_equi_and_verb &
           [ LOCAL [ CAT.HEAD.VFORM fin,
                     AGR.PNG.PN non3sg ] ] ].

; he will try and find it
v_subj_equi_and_bse_le := main_verb & 
  [ SYNSEM subj_equi_and_verb &
           [ LOCAL.CAT.HEAD.VFORM bse ] ].

; couldn't help but notice
v_subj_equi_but_bse_le := main_verb & 
  [ SYNSEM subj_equi_but_verb &
           [ LOCAL.CAT.HEAD.VFORM bse ] ].

v_obj_equi_le := main_verb & 
  [ SYNSEM obj_equi_verb &
            [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ] > ] ].

; help
v_obj_equi_bse_le := main_verb_mliszt & 
  [ SYNSEM obj_equi_bse_verb &
            [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ] > ] ].

v_obj_equi_prd_le := main_verb_mliszt & 
  [ SYNSEM obj_equi_prd_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ] > ] ].

v_obj_equi_prd_adj_le := main_verb_mliszt & 
  [ SYNSEM obj_equi_prd_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT -,
                                                LOCAL.CAT.HEAD adj ] > ] ].

; have x ready
; have x in stock
; I want x confirmed
; get x ready
v_obj_equi_non_trans_prd_le := main_verb_mliszt & 
  [ SYNSEM obj_equi_non_trans_prd_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ] >,
             LKEYS [ --OCOMPKEY #ockey,
                     --+OCOMPKEY #ockey ] ] ].

; I have X to get rid of
v_obj_equi_vpslash_le := main_verb & 
  [ SYNSEM obj_equi_vpslash_prd_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ] >,
             LKEYS [ --OCOMPKEY #ockey,
                     --+OCOMPKEY #ockey ] ] ].

; prevent X from Ving
v_obj_equi_from_le := main_verb & 
  [ SYNSEM obj_equi_from_verb &
            [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ] > ] ].


; promise
v_anom_equi_le := main_verb & 
  [ SYNSEM anom_equi_verb &
            [ LOCAL.CAT.VAL.COMPS < [ OPT + ], [ OPT - ] > ] ].

; use X to do Y
v_anom_equi_trans_le := main_verb & 
  [ SYNSEM anom_equi_trans_verb &
            [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ] > ] ].

; kim took too long to arrive
v_anom_equi_oblig_le := main_verb & 
  [ SYNSEM anom_equi_verb &
     [ LOCAL.CAT.VAL.COMPS < [ OPT - ], 
                             [ OPT -,
                               LOCAL.CAT.HEAD.KEYS.KEY non_ellipt_rel ] > ] ].

; have trouble sleeping
v_anom_equi_prp_le := main_verb_mliszt & 
  [ SYNSEM anom_equi_prp_verb &
            [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ] > ] ].

; turn out to
v_particle_inf_le := main_verb & 
  [ SYNSEM particle_inf_verb &
            [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ] >,
              LKEYS [ --COMPKEY #ckey,
                      --+COMPKEY #ckey ] ] ].

; keep on driving
v_particle_prp_le := main_verb_mliszt & 
  [ SYNSEM particle_prp_verb &
            [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ] >,
              LKEYS [ --COMPKEY #ckey,
                      --+COMPKEY #ckey ] ] ].

v_particle_cp_le := main_verb & 
  [ SYNSEM particle_cp_verb &
            [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ] >,
              LKEYS [ --COMPKEY #ckey,
                      --+COMPKEY #ckey ] ] ].

v_particle_oeq_le := main_verb & 
  [ SYNSEM particle_oeq_verb &
            [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ], [ OPT - ] >,
              LKEYS [ --COMPKEY #ckey,
                      --+COMPKEY #ckey ] ] ].

v_oeq_pp_inf_le := main_verb & 
  [ SYNSEM oeq_pp_inf_verb &
            [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ] >,
              LKEYS [ --COMPKEY #ckey,
                      --+COMPKEY #ckey ] ] ].

;; leave it to kim to arrange the meeting
v_expl_pp_inf_oeq_le := main_verb & 
  [ SYNSEM expl_pp_inf_oeq_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ], [ OPT + ] >,
             LKEYS [ --OCOMPKEY #ockey,
                     --+OCOMPKEY #ockey ] ] ].

;; arrange (with kim) to meet her
v_pp_inf_seq_le := main_verb & 
  [ SYNSEM pp_inf_seq_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT + ], [ OPT - ] > ] ].

;; arrange it with kim to meet her
v_expl_pp_inf_seq_le := main_verb & 
  [ SYNSEM expl_pp_inf_seq_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ], [ OPT - ] >,
             LKEYS [ --OCOMPKEY #ockey,
                     --+OCOMPKEY #ockey ] ] ].

;; it bothers kim that sally left; it bothers kim to leave
v_expl_it_subj_np_cp_le := main_verb & 
  [ SYNSEM expl_it_subj_np_cp_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], 
				   [ OPT - ] > ] ].

; cost
v_expl_it_subj_np_np_cp_inf_le := main_verb & 
  [ SYNSEM expl_it_subj_np_np_cp_inf_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT + ], 
                                   [ OPT + ],
				   [ OPT -,
				     LOCAL.CONT.MSG.PRED prpstn_m_rel ] > ] ].

; take: 'took him ten minutes to leave'
v_expl_it_subj_np_np_vp_inf_le := main_verb & 
  [ SYNSEM expl_it_subj_np_np_vp_inf_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT + ], 
                                   [ OPT - ],
				   [ OPT -,
				     LOCAL.CONT.MSG.PRED prpstn_m_rel ] > ] ].

; 'it advances our cause (a lot) to take this step"
; "it will cost us (a lot) to win"
v_expl_it_subj_np_np*_vp_inf_le := main_verb & 
  [ SYNSEM expl_it_subj_np_np_vp_inf_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], 
                                   [ OPT + ],
				   [ OPT -,
				     LOCAL.CONT.MSG.PRED prpstn_m_rel ] > ] ].

;; it seems (to kim) that sandy left
v_expl_it_subj_pp_cp_le := main_verb & 
  [ SYNSEM expl_it_subj_pp_cp_verb &
	   [ LOCAL.CAT.VAL.COMPS 
                            < [ OPT + ], 
                              [ OPT -,
                                LOCAL.CONT.MSG.PRED prpstn_or_like_m_rel ] >]].

;; it occurred *(to me) that Sandy left
v_expl_it_subj_pp_obl_cp_le := main_verb & 
  [ SYNSEM expl_it_subj_pp_cp_verb &
	   [ LOCAL.CAT.VAL.COMPS 
                            < [ OPT - ], 
                              [ OPT -,
                                LOCAL.CONT.MSG.PRED prpstn_or_like_m_rel ] >]].

;; it looks (to kim) like Sandy left
v_expl_it_subj_like_le := main_verb & 
  [ SYNSEM expl_it_subj_pp_cp_verb &
	   [ LOCAL.CAT.VAL.COMPS 
                            < [ OPT + ], 
                              [ OPT -,
                                LOCAL [ CAT.HEAD comp,
                                        CONT.MSG.PRED like_m_rel ] ] > ]].

;; It doesn't matter who stays
v_expl_it_subj_pp_cp_unsp_le := main_verb & 
  [ SYNSEM expl_it_subj_pp_cp_verb &
	   [ LOCAL.CAT.VAL.COMPS 
                            < [ OPT + ], 
                              [ OPT -,
                                LOCAL.CONT.MSG.PRED prop-or-ques_m_rel ] >] ].

; it turns out that kim arrived
v_expl_it_subj_prtcl_cp_le := main_verb & 
  [ SYNSEM expl_it_subj_prtcl_cp_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], 
				   [ OPT - ] > ] ].

; It follows that ...
v_expl_it_subj_cp_le := main_verb & 
  [ SYNSEM expl_it_subj_cp_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ] > ] ].

; it would help/wouldn't hurt to know ...
v_expl_it_subj_vp_le := main_verb & 
  [ SYNSEM expl_it_subj_vp_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ] > ] ].

; bet
v_np_np_cp_le := main_verb & 
  [ SYNSEM np_np_cp_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT + ], [ OPT + ], [ OPT + ] > ] ].

; suggest
v_pp_cp_le := main_verb & 
  [ SYNSEM pp_cp_verb &
	   [ LOCAL [ CAT.VAL.COMPS < [ OPT + ], [ OPT - ] > ] ] ].

; mean by X that Y
v_pp_oblig_cp_le := main_verb & 
  [ SYNSEM pp_cp_verb &
	   [ LOCAL [ CAT.VAL.COMPS < [ OPT - ], [ OPT - ] > ] ] ].

v_pp_cp_fin_le := main_verb & 
  [ SYNSEM pp_cp_fin_verb &
	   [ LOCAL [ CAT.VAL.COMPS < [ OPT + ], [ OPT - ] > ] ] ].

; 'see to it that X'
v_pp_expl_cp_le := main_verb & 
  [ SYNSEM pp_expl_cp_verb &
	   [ LOCAL [ CAT.VAL.COMPS < [ OPT - ], [ OPT - ] > ] ] ].

; would like
v_sor_non_trans_le := main_verb_mliszt & 
  [ SYNSEM sor_non_trans_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ] > ] ].

v_sor_le := main_verb_mliszt & 
  [ SYNSEM sor_verb &
            [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ] > ] ].

v_sorb_le := main_verb_mliszt & 
  [ SYNSEM sorb_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ] > ] ].

v_sor_pp_inf_le := main_verb_mliszt & 
  [ SYNSEM sor_pp_inf_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ] > ] ].

; make: 'kim made it clear that sandy arrived'
v_sor_prd_le := main_verb_mliszt & 
  [ SYNSEM sor_prd_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ] > ] ].

v_ditrans_le := main_verb & 
  [ SYNSEM ditrans_verb & 
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ] > ] ].

v_ditrans*_le := main_verb & 
  [ SYNSEM ditrans_verb & 
	   [ LOCAL.CAT.VAL.COMPS < [ OPT + ], [ OPT + ] > ] ].

v_ditrans_only_le := main_verb & 
  [ SYNSEM ditrans_only_verb & 
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ] >,
             LKEYS [ --OCOMPKEY #ockey,
                     --+OCOMPKEY #ockey ] ] ].

v_ditrans*_only_le := main_verb & 
  [ SYNSEM ditrans_only_verb & 
	   [ LOCAL.CAT.VAL.COMPS < [ OPT + ], [ OPT + ] > ] ].

v_ditrans_only_idiom_le := main_verb & 
  [ SYNSEM ditrans_only_verb & 
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ] >,
             LKEYS [ --OCOMPKEY #ockey,
                     --+OCOMPKEY #ockey ] ],
    IDIOM + ].

;; talk
v_double_pp*_le := main_verb & 
  [ SYNSEM double_pp_verb & 
	   [ LOCAL.CAT.VAL.COMPS < [ OPT + ], [ OPT + ] > ] ].
v_double_pp_le := main_verb & 
  [ SYNSEM double_pp_verb & 
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ] >,
             LKEYS [ --COMPKEY #ckey,
                     --+COMPKEY #ckey,
                     --OCOMPKEY #ockey,
                     --+OCOMPKEY #ockey ] ] ].

v_double_pp_empty_pp_le := main_verb & 
  [ SYNSEM double_pp_empty_pp_verb & 
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ] >,
             LKEYS [ --COMPKEY #ckey,
                     --+COMPKEY #ckey,
                     --OCOMPKEY #ockey,
                     --+OCOMPKEY #ockey ] ] ].

v_np_trans_double_pp*_le := main_verb & 
  [ SYNSEM np_trans_double_pp_verb & 
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT + ], 
                                   [ OPT - ] >,
             LKEYS [ --OCOMPKEY #ockey,
                     --+OCOMPKEY #ockey ] ] ].

v_np*_trans_double_pp_to*_le := main_verb & 
  [ SYNSEM np_trans_double_pp_verb & 
	   [ LOCAL.CAT.VAL.COMPS < [ OPT + ], [ OPT + ], 
                                   [ OPT +,
                                     LOCAL.CAT.HEAD.KEYS.KEY _to_p_sel_rel ]>,
             LKEYS [ --OCOMPKEY #ockey,
                     --+OCOMPKEY #ockey ] ] ].

v_np_trans_double_pp_to*_le := main_verb & 
  [ SYNSEM np_trans_double_pp_verb & 
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT + ], 
                                   [ OPT -,
                                     LOCAL.CAT.HEAD.KEYS.KEY _to_p_sel_rel ] >,
             LKEYS [ --OCOMPKEY #ockey,
                     --+OCOMPKEY #ockey ] ] ].

v_np*_trans_double_pp_for_le := main_verb & 
  [ SYNSEM np_trans_double_pp_verb & 
  	   [ LOCAL.CAT.VAL.COMPS < [ OPT + ], [ OPT + ], 
                                   [ OPT -,
                                     LOCAL.CAT.HEAD.KEYS.KEY _for_p_sel_rel ]>,
             LKEYS [ --OCOMPKEY #ockey,
                     --+OCOMPKEY #ockey ] ] ].

v_empty_prep_intrans_le := main_verb & 
  [ SYNSEM empty_prep_intrans_verb & 
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ] >,
             LKEYS [ --COMPKEY #ckey,
                     --+COMPKEY #ckey ] ] ].

v_empty_prep_trans_le := main_verb & 
  [ SYNSEM empty_prep_trans_verb & 
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ] >,
             LKEYS [ --OCOMPKEY #ockey,
                     --+OCOMPKEY #ockey ] ] ].

v_empty_prep_trans*_le := main_verb & 
  [ SYNSEM empty_prep_trans_verb & 
	   [ LOCAL.CAT.VAL.COMPS < [ OPT + ], [ OPT - ] >,
             LKEYS [ --OCOMPKEY #ockey,
                     --+OCOMPKEY #ockey ] ] ].

v_empty_prep*_trans_le := main_verb & 
  [ SYNSEM empty_prep_trans_verb & 
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT + ] > ] ].

v_empty_prep*_trans_imp_le := main_verb & 
  [ SYNSEM empty_prep_trans_verb & 
	   [ LOCAL.CAT [ HEAD.VFORM imp_vform,
                         VAL.COMPS < [ OPT - ], [ OPT + ] > ] ] ].
; take into account
v_empty_prep_trans_idiom_le := main_verb & 
  [ SYNSEM empty_prep_trans_verb & 
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ] >,
             LKEYS [ --OCOMPKEY #ockey,
                     --+OCOMPKEY #ockey ] ],
    IDIOM + ].

; came into being
v_empty_prep_intrans_idiom_le := main_verb & 
  [ SYNSEM empty_prep_intrans_verb & 
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ] >,
             LKEYS [ --COMPKEY #ckey,
                     --+COMPKEY #ckey ] ],
    IDIOM + ].

; 'interest kim in'
v_empty_prep_non_trans_le := main_verb & 
  [ SYNSEM empty_prep_non_trans_verb & 
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ] >,
             LKEYS [ --OCOMPKEY #ockey,
                     --+OCOMPKEY #ockey ] ] ].

;; 'prefer it if ...'
v_expl_obj_cp_le := main_verb &
  [ SYNSEM expl_obj_cp_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ] > ] ].

;; 'take it that ...'
v_expl_obj_cp_prop_le := main_verb &
  [ SYNSEM expl_obj_cp_verb &
	 [ LOCAL.CAT.VAL.COMPS < [ OPT - ], 
                                 [ OPT -,
                                   LOCAL [ CAT.HEAD comp,
                                           CONT.MSG.PRED prpstn_m_rel ] ] >]].
; 'make it clear that ...'
v_expl_obj_prd_le := main_verb_mliszt &
  [ SYNSEM expl_obj_prd_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ] > ] ].

v_np_trans_le := main_verb & 
  [ SYNSEM np_trans_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ] > ] ].

v_np*_trans_le := main_verb & 
  [ SYNSEM np_trans_verb ].

v_np_trans_noger_le := main_verb & 
  [ SYNSEM np_trans_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ] >,
             LKEYS.--OCOMPKEY never_unify_rel ] ].

; Temporary patch for e.g. 'take' which has an optional ARG3 role, which
; needs to be present so generator won't spuriously fill it.
v_np_trans_noarg3_le := main_verb & 
  [ SYNSEM np_trans_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ] >,
             LKEYS.KEYREL.ARG3 semarg ] ].

v_np*_trans_nonfin_le := main_verb & 
  [ SYNSEM np_trans_verb &
	   [ LOCAL.CAT [ HEAD [ VFORM non_fin,
                              TAM [ TENSE present,
                                    MOOD ind_or_mod_subj ] ],
                         VAL.COMPS < [ OPT - ] > ] ] ].

v_empty_prep_nonfin_le := main_verb & 
  [ SYNSEM empty_prep_intrans_verb & 
	   [ LOCAL.CAT [ HEAD [ VFORM non_fin,
                                TAM [ TENSE present,
                                      MOOD ind_or_mod_subj ] ],
                         VAL.COMPS < [ OPT - ] > ],
             LKEYS [ --COMPKEY #ckey,
                     --+COMPKEY #ckey ] ] ].

v_np_prep_trans_le := main_verb_mliszt & 
  [ SYNSEM prep_trans_verb & 
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ] >,
             LKEYS [ --OCOMPKEY #ockey,
                     --+OCOMPKEY #ockey ] ] ].

;; takes dir_state_modable_rel oblique complement.
;; put (takes variety of PP complements, so avoid chart dependency filter)
v_np_prep_trans_dors_le := main_verb_mliszt & 
  [ SYNSEM prep_trans_verb & 
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], 
                                   [ OPT -,
                                     LOCAL.CAT.HEAD.KEYS.KEY 
                                         dir_state_modable_rel ] > ] ].
;; ask about
v_np*_prep_trans_le := main_verb_mliszt &
  [ SYNSEM prep_trans_verb & 
           [ LOCAL.CAT.VAL.COMPS < [ OPT + ], [ OPT - ] >,
             LKEYS [ --OCOMPKEY #ockey,
                     --+OCOMPKEY #ockey ] ] ].

;; change one's mind about
v_np_prep_nmod_le := main_verb_mliszt &
  [ SYNSEM basic_prep_trans_verb & 
           [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ] >,
             LKEYS [ --OCOMPKEY #ockey,
                     --+OCOMPKEY #ockey ] ] ].

v_np_as_le := main_verb &
  [ SYNSEM np_as_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ],
                                   [ OPT - ] >,
             LKEYS [ --OCOMPKEY #ockey,
                     --+OCOMPKEY #ockey ] ] ].

v_np_non_trans_le := main_verb & 
  [ SYNSEM np_non_trans_verb & 
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ] > ] ].

v_np*_non_trans_le := main_verb & 
  [ SYNSEM np_non_trans_verb & 
	   [ LOCAL.CAT.VAL.COMPS < [ OPT + ] > ] ].

; 'become'
v_np_non_trans_id_le := main_verb & 
  [ SYNSEM np_non_trans_verb & 
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ] >,
             LKEYS.KEYREL [ ARG1.SORT #sort,
                            ARG2.SORT #sort ] ] ].

; 'become president'
v_nbar_le := main_verb & 
  [ SYNSEM nbar_verb & 
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ] > ] ].

; 'stood guard'
v_np_non_trans_idiom_le := main_verb & 
  [ SYNSEM np_non_trans_verb & 
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ] > ],
    IDIOM + ].

v_np_obj_comp_le := main_verb_mliszt & 
  [ SYNSEM np_comp_obj_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ] >,
             LKEYS [ --OCOMPKEY #ockey,
                     --+OCOMPKEY #ockey ] ] ].

v_particle_le := main_verb & 
  [ SYNSEM particle_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ] >,
             LKEYS [ --COMPKEY #ckey,
                     --+COMPKEY #ckey ] ] ].
v_particle_3only_le := main_verb & 
  [ SYNSEM particle_3only_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ] >,
             LKEYS [ --COMPKEY #ckey,
                     --+COMPKEY #ckey ] ] ].
v_particle_np_le := main_verb & 
  [ SYNSEM np_particle_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ] >,
             LKEYS [ --COMPKEY #ckey,
                     --+COMPKEY #ckey ] ] ].
v_np_particle_only_le := main_verb & 
  [ SYNSEM np_particle_noalt_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ] >,
             LKEYS [ --COMPKEY #ockey,
                     --+COMPKEY #ockey ] ],
    ALTS.NPPART - ].
v_particle_prd_le := main_verb & 
  [ SYNSEM particle_prd_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ] >,
             LKEYS [ --COMPKEY #ckey,
                     --+COMPKEY #ckey ] ] ].
v_particle_pp_le := main_verb & 
  [ SYNSEM particle_pp_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ] >,
             LKEYS [ --COMPKEY #ckey,
                     --+COMPKEY #ckey,
                     --OCOMPKEY #ockey,
                     --+OCOMPKEY #ockey ] ] ].

v_particle_empty_pp_le := main_verb & 
  [ SYNSEM particle_empty_pp_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ] >,
             LKEYS [ --COMPKEY #ckey,
                     --+COMPKEY #ckey,
                     --OCOMPKEY #ockey,
                     --+OCOMPKEY #ockey ] ] ].

v_particle_empty_pp*_le := main_verb & 
  [ SYNSEM particle_empty_pp_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT + ] >,
             LKEYS [ --COMPKEY #ckey,
                     --+COMPKEY #ckey ] ] ].

v_particle_np_pp_to_le := main_verb & 
  [ SYNSEM np_particle_pp_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ], 
                                   [ OPT -, 
                                     LOCAL.CAT.HEAD.KEYS.KEY _to_p_sel_rel ]>,
             LKEYS [ --COMPKEY #ckey,
                     --+COMPKEY #ckey,
                     --OCOMPKEY #ockey,
                     --+OCOMPKEY #ockey ] ] ].


v_particle_np_pp_for_le := main_verb & 
  [ SYNSEM np_particle_pp_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ], 
                                   [ OPT -, 
                                     LOCAL.CAT.HEAD.KEYS.KEY _for_p_sel_rel]>,
             LKEYS [ --COMPKEY #ckey,
                     --+COMPKEY #ckey,
                     --OCOMPKEY #ockey,
                     --+OCOMPKEY #ockey ] ] ].

v_particle_np_pp_from_le := main_verb & 
  [ SYNSEM np_particle_pp_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ], 
                                   [ OPT -, 
                                     LOCAL.CAT.HEAD.KEYS.KEY 
                                         _from_p_sel_rel ] >,
             LKEYS [ --COMPKEY #ckey,
                     --+COMPKEY #ckey,
                     --OCOMPKEY #ockey,
                     --+OCOMPKEY #ockey ] ] ].

v_np_prtcl_np_le := main_verb & 
  [ SYNSEM np_particle_np_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ], [ OPT - ] >,
             LKEYS [ --COMPKEY #ckey,
                     --+COMPKEY #ckey ] ] ].

v_prep_intrans_event_le := main_verb  & 
  [ SYNSEM prep_intrans_event_verb & 
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ] > ] ].
v_prep_intrans_le := main_verb  & 
  [ SYNSEM prep_intrans_verb & 
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ] >,
             LKEYS [ --COMPKEY #ckey,
                     --+COMPKEY #ckey ] ] ].

v_prep_dir_le := main_verb  & 
  [ SYNSEM prep_intrans_dir_verb & 
	   [ LOCAL.CAT.VAL.COMPS < [ OPT + ] > ] ].

v_prep_dir_oblig_le := main_verb  & 
  [ SYNSEM prep_intrans_dir_verb & 
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ] > ] ].

v_prep*_intrans_le := main_verb & 
  [ SYNSEM prep_intrans_verb & 
	   [ LOCAL.CAT.VAL.COMPS < [ OPT + ] > ] ].

v_unacc_dir_le := main_verb  & 
  [ SYNSEM prep_intrans_unacc_verb & 
	   [ LOCAL.CAT.VAL.COMPS < [ OPT + ] > ] ].

v_ssr_le := main_verb & 
  [ SYNSEM ssr_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ] > ] ].
v_ssr_prp_le := main_verb & 
  [ SYNSEM ssr_prp_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ] > ] ].
; 'have to': no imperative "*Have to leave!"
v_ssr_noimp_le := main_verb & 
  [ SYNSEM ssr_noimp_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ] > ] ].

v_prd_ssr_adj_le := main_verb_mliszt & 
  [ SYNSEM subj_prd_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT -,
                                     LOCAL.CAT.HEAD adj ] > ] ].
v_pp_inf_ssr_le := main_verb_mliszt & 
  [ SYNSEM ssr_pp_inf_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT + ], [ OPT - ] > ] ].

v_prdp_pp_seq_adj_le := main_verb_mliszt & 
  [ SYNSEM seq_prdp_pp_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT -,
                                     LOCAL.CAT.HEAD adj ], 
                                   [ OPT + ] > ] ].
v_prdp_pp_seq_prep_le := main_verb_mliszt & 
  [ SYNSEM seq_prdp_pp_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT -,
                                     LOCAL.CAT.HEAD prep ], 
                                   [ OPT + ] >,
             LKEYS [ --COMPKEY #ckey,
                     --+COMPKEY #ckey ] ] ].
v_prdp_pp_seq_a_or_p_le := main_verb_mliszt & 
  [ SYNSEM seq_prdp_pp_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT -,
                                     LOCAL.CAT.HEAD a_or_p ],
                                   [ OPT + ] > ] ].
; feel good about
v_prdp_pp_seq_about_le := main_verb_mliszt & 
  [ SYNSEM seq_prdp_pp_about_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT -,
                                     LOCAL.CAT.HEAD adj ], 
                                   [ OPT + ] > ] ].

v_to_trans_le := main_verb & 
  [ SYNSEM empty_to_trans_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ] >,
             LKEYS [ --COMPKEY #ckey,
                     --+COMPKEY #ckey,
                     --OCOMPKEY #ockey,
                     --+OCOMPKEY #ockey ] ] ].

v_to*_trans_le := main_verb & 
  [ SYNSEM empty_to_trans_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT + ] >,
             LKEYS [ --COMPKEY #ckey,
                     --+COMPKEY #ckey ] ] ].

v_to_trans*_le := main_verb & 
  [ SYNSEM empty_to_trans_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT + ], [ OPT - ] >,
             LKEYS [ --OCOMPKEY #ockey,
                     --+OCOMPKEY #ockey ] ] ].

v_to*_trans*_le := main_verb & 
  [ SYNSEM empty_to_trans_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT + ], [ OPT + ] > ] ].

v_unacc_le := main_verb & 
  [ SYNSEM unacc_verb ].

v_unerg_le := main_verb & 
  [ SYNSEM unerg_verb ].

v_unerg_imp_le := main_verb & 
  [ SYNSEM unerg_verb &
           [ LOCAL.CAT.HEAD.VFORM imp_vform ] ].
v_unerg_bse_le := main_verb & 
  [ SYNSEM unerg_verb &
           [ LOCAL.CAT.HEAD.VFORM bse_only ] ].

v_poss_le := main_verb & 
  [ SYNSEM poss_verb & 
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ] > ] ].

v_poss_got_le := amalg_word & 
  [ SYNSEM poss_verb & 
	   [ LOCAL non_fin_verb &
	         [ CAT [ HEAD [ VFORM psp,
				PRD - ],
			 VAL.COMPS < [ OPT - ] > ],
		   CONT.RELS <! relation !> ] ] ].
			  
v_poss_got_prd_le := amalg_word & 
  [ SYNSEM obj_equi_non_trans_prd_verb &
	   [ LOCAL non_fin_verb &
	         [ CAT [ HEAD [ VFORM psp,
				PRD - ],
			 VAL.COMPS < [ OPT - ], [ OPT - ] > ] ] ] ].

v_cp_prop_raise_key_bse_le := v_cp_prop_raise_key_lexent &
  [ SYNSEM.LOCAL bse_verb ].

v_cp_prop_raise_key_pres3sg_le := v_cp_prop_raise_key_lexent &
  [ SYNSEM.LOCAL pres_verb & [ CAT.VAL.SUBJ < [ LOCAL.AGR.PNG.PN 3sg ] > ] ].

v_cp_prop_raise_key_presnon3sg_le := v_cp_prop_raise_key_lexent &
  [ SYNSEM.LOCAL pres_verb & [ CAT.VAL.SUBJ < [ LOCAL.AGR.PNG.PN non3sg ] > ]].

v_cp_prop_raise_key_past_le := v_cp_prop_raise_key_lexent &
  [ SYNSEM.LOCAL past_or_subj_verb ].

v_cp_prop_raise_key_prp_le := v_cp_prop_raise_key_lexent &
  [ SYNSEM.LOCAL prp_verb ].

v_cp_prop_raise_key_psp_le := v_cp_prop_raise_key_lexent &
  [ SYNSEM.LOCAL psp_verb ].

v_adv_le := basic_main_verb & 
  [ INFLECTD -,
    SYNSEM adv_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ] > ] ].

; 'made': "Kim made sandy arrive' but "Sandy was made TO arrive'
v_sorb_pass_le := basic_main_verb & 
  [ INFLECTD -,
    SYNSEM sor_verb &
            [ LOCAL verb_participle_affix &
                    [ CAT [ HEAD.VFORM pas,
			    VAL [ SUBJ < [ OPT - ] >,
				  COMPS < [ OPT - ], ... > ] ],
		      CONT psoa & [ RELS <! relation !> ] ] ] ].

; 'born'
v_unerg_psv_le := basic_main_verb & 
  [ INFLECTD +,
    SYNSEM passive_unerg_synsem &
           [ LOCAL.CONT.HCONS <! !> ] ].

; 'unevaluated (by Abrams)'
v_unerg_psv_neg_le := main_verb_newltop &
  [ INFLECTD +,
    SYNSEM passive_unerg_neg_synsem ].

v_there_le := main_verb & 
  [ SYNSEM there_verb_synsem &
           [ LOCAL.CONT.HCONS <! !> ] ].

v_quote_top_le := main_verb &
  [ SYNSEM quoting_verb_top_synsem ].

v_quote_inv_le := main_verb &
  [ SYNSEM quoting_verb_inv_synsem ].

v_quote_mc_le := main_verb &
  [ SYNSEM quoting_verb_mc_synsem ].

v_loc_inv_mv_le := loc_inv_mv_word.

v_loc_inv_is_le := loc_inv_be_word &
  [ SYNSEM.LOCAL [ CAT.HEAD.TAM.TENSE present,
                   AGR.PNG.PN 3sg ] ].

v_loc_inv_are_le := loc_inv_be_word &
  [ SYNSEM.LOCAL [ CAT.HEAD.TAM.TENSE present,
                   AGR.PNG.PN 3pl ] ].

v_loc_inv_was_le := loc_inv_be_word &
  [ SYNSEM.LOCAL [ CAT.HEAD.TAM.TENSE past,
                   AGR.PNG.PN 3sg ] ].

v_loc_inv_were_le := loc_inv_be_word &
  [ SYNSEM.LOCAL [ CAT.HEAD.TAM.TENSE past,
                   AGR.PNG.PN 3pl ] ].
