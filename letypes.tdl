;;; -*- Mode: TDL; Package: DISCO -*-
;;;
;;;  letypes.tdl
;;;
;;;  Lexical entry types (yield of lextypes hierarchy)
;;;
;;;  Dan Flickinger, 15-June-1996
;;;  Last revised: Dan Flickinger, 24-Feb-97
;;;
;;;  $Id$

reg_lex_entry := lex_entry &
  [ SYNSEM.LOCAL.CONT.--STEMLISZT <! *top* !> ].

; In the following type names, "mv" stands for "main_verb".  Complements
; marked with "*" in the type names are optional. 

mv_atrans_le := main_verb & reg_lex_entry &
  [ SYNSEM atrans_verb ].

mv_atrans_inf_le := main_verb & reg_lex_entry &
  [ SYNSEM atrans_inf_verb &
	   [ LOCAL.CAT.VALENCE.COMPS < [ OPT - ] > ] ].

mv_cp_non_trans_le := main_verb & lex_entry &
  [ SYNSEM cp_intrans_verb & 
            [ LOCAL [ CAT.VALENCE.COMPS < [ OPT - ] > ,
		      CONT.--STEMLISZT <! relation, relation !> ] ] ].

mv_cp_prop_non_trans_le := main_verb & lex_entry &
  [ SYNSEM cp_prop_intrans_verb & 
            [ LOCAL [ CAT.VALENCE.COMPS < [ OPT - ] > ,
		      CONT.--STEMLISZT <! relation, relation !> ] ] ].

mv_cp_prop*_non_trans_le := main_verb & lex_entry &
  [ SYNSEM cp_prop_intrans_verb &
            [ LOCAL [ CAT.VALENCE.COMPS < [ OPT + ] > ,
		      CONT.--STEMLISZT <! relation, relation !> ] ] ].

mv_cp_prop_raise_key_le := main_verb_sans_key & lex_entry &
  [ SYNSEM cp_prop_raise_key_verb & 
            [ LOCAL [ CAT.VALENCE.COMPS < [ OPT - ] > ,
		      CONT.--STEMLISZT <! relation, relation, relation !> ] ]].

mv_cp_ques_non_trans_le := main_verb & lex_entry &
  [ SYNSEM cp_ques_intrans_verb & 
            [ LOCAL [ CAT.VALENCE.COMPS < [ OPT - ] > ,
		      CONT.--STEMLISZT <! relation, relation !> ] ] ].
;; inform
mv_np_trans_cp_le := main_verb & lex_entry &
  [ SYNSEM np_trans_cp_verb &
	   [ LOCAL [ CAT.VALENCE.COMPS < [ OPT - ], [ OPT - ] >,
		     CONT.--STEMLISZT <! relation, relation !> ] ] ].
;; answer
mv_np*_trans_cp_le := main_verb & lex_entry &
  [ SYNSEM np_trans_cp_verb &
	   [ LOCAL [ CAT.VALENCE.COMPS < [ OPT + ], [ OPT - ] >,
		     CONT.--STEMLISZT <! relation, relation !> ] ] ].

; ask
mv_np_trans_cp_ques_le := main_verb & lex_entry &
  [ SYNSEM np_trans_cp_ques_verb &
	   [ LOCAL [ CAT.VALENCE.COMPS < [ OPT + ], [ OPT - ] >,
		     CONT.--STEMLISZT <! relation, relation !> ] ] ].
;try
mv_subj_equi_le := main_verb & lex_entry &
  [ SYNSEM subj_equi_verb &
            [ LOCAL [ CAT.VALENCE.COMPS < [ OPT - ] > ,
		      CONT.--STEMLISZT <! relation, relation !> ] ] ].

mv_subj_equi_prd_le := main_verb & lex_entry &
  [ SYNSEM subj_equi_prd_verb &
	   [ LOCAL.CAT.VALENCE.COMPS < [ OPT - ] > ] ].

; stop
mv_subj_equi_prp_le := main_verb & reg_lex_entry &
  [ SYNSEM subj_equi_prp_verb &
	   [ LOCAL.CAT.VALENCE.COMPS < [ OPT - ] > ] ].

mv_obj_equi_le := main_verb & lex_entry &
  [ SYNSEM obj_equi_verb &
            [ LOCAL [ CAT.VALENCE.COMPS < [ OPT - ], [ OPT - ] >,
		      CONT.--STEMLISZT <! relation, relation !> ] ] ].

mv_obj_equi_prd_le := main_verb & lex_entry &
  [ SYNSEM obj_equi_prd_verb &
	   [ LOCAL.CAT.VALENCE.COMPS < [ OPT - ], [ OPT - ] > ] ].

; have X ready
mv_obj_equi_non_trans_prd_le := main_verb & lex_entry &
  [ SYNSEM obj_equi_non_trans_prd_verb &
	   [ LOCAL.CAT.VALENCE.COMPS < [ OPT - ], [ OPT - ] > ] ].

; promise
mv_anom_equi_le := main_verb & lex_entry &
  [ SYNSEM anom_equi_verb &
            [ LOCAL [ CAT.VALENCE.COMPS < [ OPT + ], [ OPT - ] >,
		      CONT.--STEMLISZT <! relation, relation !> ] ] ].

mv_anom_equi_prd_le := main_verb & lex_entry &
  [ SYNSEM anom_equi_prd_verb &
	   [ LOCAL.CAT.VALENCE.COMPS < [ OPT - ], [ OPT - ] > ] ].

; turn out to
mv_particle_inf_le := main_verb & lex_entry &
  [ SYNSEM particle_inf_verb &
            [ LOCAL [ CAT.VALENCE.COMPS < [ OPT - ], [ OPT - ] >,
		      CONT.--STEMLISZT <! relation, relation !> ] ] ].

mv_particle_cp_le := main_verb & lex_entry &
  [ SYNSEM particle_cp_verb &
            [ LOCAL [ CAT.VALENCE.COMPS < [ OPT - ], [ OPT - ] >,
		      CONT.--STEMLISZT <! relation, relation !> ] ] ].

mv_oeq_pp_inf_le := main_verb & lex_entry &
  [ SYNSEM oeq_pp_inf_verb &
            [ LOCAL [ CAT.VALENCE.COMPS < [ OPT - ], [ OPT - ] >,
		      CONT.--STEMLISZT <! relation, relation !> ] ] ].

;; leave it to Kim to arrange the meeting
mv_expl_pp_inf_oeq_le := main_verb & lex_entry &
  [ SYNSEM expl_pp_inf_oeq_verb &
	   [ LOCAL [ CAT.VALENCE.COMPS < [ OPT - ], [ OPT - ], [ OPT + ] >,
		     CONT.--STEMLISZT <! relation, relation !> ] ] ].

;; arrange (with Kim) to meet her
mv_pp_inf_seq_le := main_verb & lex_entry &
  [ SYNSEM pp_inf_seq_verb &
	   [ LOCAL [ CAT.VALENCE.COMPS < [ OPT + ], [ OPT - ] >,
		     CONT.--STEMLISZT <! relation, relation !> ] ] ].
;; arrange it with Kim to meet her
mv_expl_pp_inf_seq_le := main_verb & lex_entry &
  [ SYNSEM expl_pp_inf_seq_verb &
	   [ LOCAL [ CAT.VALENCE.COMPS < [ OPT - ], [ OPT - ], [ OPT - ] >,
		     CONT.--STEMLISZT <! relation, relation !> ] ] ].
;; it seems (to Kim) that Sandy left
mv_expl_it_subj_le := main_verb & lex_entry &
  [ SYNSEM expl_it_subj_verb &
	   [ LOCAL [ CAT.VALENCE.COMPS < [ OPT + ], [ OPT - ] >,
		     CONT.--STEMLISZT <! relation, relation !> ] ] ].
; bet
mv_np_np_cp_le := main_verb & lex_entry &
  [ SYNSEM np_np_cp_verb &
	   [ LOCAL [ CAT.VALENCE.COMPS < [ OPT + ], [ OPT + ], [ OPT + ] >,
		     CONT.--STEMLISZT <! relation, relation !> ] ] ].

; suggest
mv_pp_cp_le := main_verb & lex_entry &
  [ SYNSEM pp_cp_verb &
	   [ LOCAL [ CAT.VALENCE.COMPS < [ OPT + ], [ OPT - ] >,
		     CONT.--STEMLISZT <! relation, relation !> ] ] ].

; explain, agree
mv_pp_cp*_le := main_verb & lex_entry &
  [ SYNSEM pp_cp_verb &
	   [ LOCAL [ CAT.VALENCE.COMPS < [ OPT + ], [ OPT + ] >,
		     CONT.--STEMLISZT <! relation, relation !> ] ] ].

mv_sor_non_trans_le := main_verb & reg_lex_entry &
  [ SYNSEM sor_non_trans_verb &
	   [ LOCAL.CAT.VALENCE.COMPS < [ OPT - ], [ OPT - ] > ] ].

mv_sor_le := main_verb & reg_lex_entry &
  [ SYNSEM sor_verb &
            [ LOCAL.CAT.VALENCE.COMPS < [ OPT - ], ... > ] ].

mv_sorb_le := main_verb & reg_lex_entry &
  [ SYNSEM sorb_verb &
	   [ LOCAL.CAT.VALENCE.COMPS < [ OPT - ], [ OPT - ] > ] ].

mv_ditrans_le := main_verb & reg_lex_entry &
  [ SYNSEM ditrans_verb & 
	   [ LOCAL.CAT.VALENCE.COMPS < [ OPT - ], [ OPT - ] > ] ].

mv_ditrans_only_le := main_verb & reg_lex_entry &
  [ SYNSEM ditrans_only_verb & 
	   [ LOCAL.CAT.VALENCE.COMPS < [ OPT - ], [ OPT - ] > ] ].

mv_ditrans*_only_le := main_verb & reg_lex_entry &
  [ SYNSEM ditrans_only_verb & 
	   [ LOCAL.CAT.VALENCE.COMPS < [ OPT + ], [ OPT - ] > ] ].


;; talk
mv_double_pp*_le := main_verb & reg_lex_entry &
  [ SYNSEM double_pp_verb & 
	   [ LOCAL.CAT.VALENCE.COMPS < [ OPT + ], [ OPT + ] > ] ].
mv_double_pp_le := main_verb & reg_lex_entry &
  [ SYNSEM double_pp_verb & 
	   [ LOCAL.CAT.VALENCE.COMPS < [ OPT - ], [ OPT - ] > ] ].
mv_empty_prep_intrans_le := main_verb & reg_lex_entry &
  [ SYNSEM empty_prep_intrans_verb & 
	   [ LOCAL.CAT.VALENCE.COMPS < [ OPT - ] > ] ].
mv_empty_prep*_intrans_le := main_verb & reg_lex_entry &
  [ SYNSEM empty_prep_intrans_verb & 
	   [ LOCAL.CAT.VALENCE.COMPS < [ OPT + ] > ] ].
mv_empty_prep_trans_le := main_verb & reg_lex_entry &
  [ SYNSEM empty_prep_trans_verb & 
	   [ LOCAL.CAT.VALENCE.COMPS < [ OPT - ], [ OPT - ] > ] ].
mv_empty_prep_trans*_le := main_verb & reg_lex_entry &
  [ SYNSEM empty_prep_trans_verb & 
	   [ LOCAL.CAT.VALENCE.COMPS < [ OPT + ], [ OPT - ] > ] ].
mv_empty_prep*_trans_le := main_verb & reg_lex_entry &
  [ SYNSEM empty_prep_trans_verb & 
	   [ LOCAL.CAT.VALENCE.COMPS < [ OPT - ], [ OPT + ] > ] ].
mv_expl_prep_trans_le := main_verb & reg_lex_entry &
  [ SYNSEM expl_prep_trans_verb &
	   [ LOCAL.CAT.VALENCE.COMPS < [ OPT - ], [ OPT - ] > ] ].
;; 'prefer it if ...'
mv_expl_obj_cp_le := main_verb & lex_entry &
  [ SYNSEM expl_obj_cp_verb &
	   [ LOCAL [ CAT.VALENCE.COMPS < [ OPT - ], [ OPT - ] >,
		     CONT.--STEMLISZT <! relation, relation !> ] ] ].
mv_np*_trans_le := main_verb & reg_lex_entry &
  [ SYNSEM np_trans_verb &
	   [ LOCAL.CAT.VALENCE.COMPS < [ OPT + ] > ] ].
mv_np_trans_le := main_verb & reg_lex_entry &
  [ SYNSEM np_trans_verb &
	   [ LOCAL.CAT.VALENCE.COMPS < [ OPT - ] > ] ].
;; ask about
mv_np*_prep_trans_le := main_verb & reg_lex_entry &
  [ SYNSEM prep_trans_verb & 
	   [ LOCAL.CAT.VALENCE.COMPS < [ OPT + ], [ OPT - ] > ] ].
;; choose
mv_np*_prep*_trans_le := main_verb & lex_entry &
  [ SYNSEM prep_trans_verb & 
	   [ LOCAL.CAT.VALENCE.COMPS < [ OPT + ], [ OPT + ] > ] ].
mv_np_comp_le := main_verb & reg_lex_entry &
  [ SYNSEM np_comp_verb &
	   [ LOCAL.CAT.VALENCE.COMPS < [ OPT - ], [ OPT - ] > ] ].
mv_np_non_trans_le := main_verb & reg_lex_entry &
  [ SYNSEM np_non_trans_verb & 
	   [ LOCAL.CAT.VALENCE.COMPS < [ OPT - ] > ] ].
mv_np*_non_trans_le := main_verb & reg_lex_entry &
  [ SYNSEM np_non_trans_verb & 
	   [ LOCAL.CAT.VALENCE.COMPS < [ OPT + ] > ] ].
; take place
mv_np_non_trans_unacc_le := main_verb & reg_lex_entry &
  [ SYNSEM np_non_trans_unacc_verb &
	   [ LOCAL.CAT.VALENCE.COMPS < [ OPT - ] > ] ].
mv_np_obj_comp_le := main_verb & reg_lex_entry &
  [ SYNSEM np_comp_obj_verb &
	   [ LOCAL.CAT.VALENCE.COMPS < [ OPT - ], [ OPT - ] > ] ].
mv_particle_le := main_verb & reg_lex_entry &
  [ SYNSEM particle_verb &
	   [ LOCAL.CAT.VALENCE.COMPS < [ OPT - ] > ] ].
mv_particle_np_le := main_verb & reg_lex_entry &
  [ SYNSEM particle_NP_verb &
	   [ LOCAL.CAT.VALENCE.COMPS < [ OPT - ], [ OPT - ] > ] ].
mv_np_particle_only_le := main_verb & reg_lex_entry &
  [ SYNSEM NP_particle_verb &
	   [ LOCAL.CAT.VALENCE.COMPS < [ OPT - ], [ OPT - ] > ] ].
mv_particle_prd_le := main_verb & lex_entry &
  [ SYNSEM particle_prd_verb &
	   [ LOCAL.CAT.VALENCE.COMPS < [ OPT - ], [ OPT - ] > ] ].
mv_particle_pp_le := main_verb & reg_lex_entry &
  [ SYNSEM particle_pp_verb &
	   [ LOCAL.CAT.VALENCE.COMPS < [ OPT - ], [ OPT - ] > ] ].
mv_particle_pp*_le := main_verb & reg_lex_entry &
  [ SYNSEM particle_pp_verb &
	   [ LOCAL.CAT.VALENCE.COMPS < [ OPT - ], [ OPT + ] > ] ].
mv_particle_adv_le := main_verb & reg_lex_entry &
  [ SYNSEM particle_adv_verb &
	   [ LOCAL.CAT.VALENCE.COMPS < [ OPT - ], [ OPT - ] > ] ].
mv_particle_np_pp_to_le := main_verb & reg_lex_entry &
  [ SYNSEM particle_np_pp_verb &
	   [ LOCAL.CAT.VALENCE.COMPS < [ OPT - ], [ OPT - ], 
				       [ OPT +, 
					 LOCAL.CONT.KEY _to_rel ] > ] ].
mv_prep_intrans_event_le := main_verb & lex_entry &
  [ SYNSEM prep_intrans_event_verb & 
	   [ LOCAL.CAT.VALENCE.COMPS < [ OPT - ] > ] ].
mv_prep_intrans_le := main_verb & lex_entry &
  [ SYNSEM prep_intrans_verb & 
	   [ LOCAL.CAT.VALENCE.COMPS < [ OPT - ] > ] ].
mv_prep*_intrans_le := main_verb & lex_entry &
  [ SYNSEM prep_intrans_verb & 
	   [ LOCAL.CAT.VALENCE.COMPS < [ OPT + ] > ] ].
mv_prep_trans_le := main_verb & lex_entry &
  [ SYNSEM prep_trans_verb & 
	   [ LOCAL.CAT.VALENCE.COMPS < [ OPT - ], [ OPT - ] > ] ].
mv_prep*_trans_le := main_verb & lex_entry &
  [ SYNSEM prep_trans_verb & 
	   [ LOCAL.CAT.VALENCE.COMPS < [ OPT - ], [ OPT + ] > ] ].
mv_ssr_le := main_verb & reg_lex_entry &
  [ SYNSEM ssr_verb &
	   [ LOCAL.CAT.VALENCE.COMPS < [ OPT - ] > ] ].
mv_prd_ssr_le := main_verb & lex_entry &
  [ SYNSEM ssr_prd_verb &
	   [ LOCAL.CAT.VALENCE.COMPS < [ OPT - ] > ] ].
mv_pp_inf_ssr_le := main_verb & reg_lex_entry &
  [ SYNSEM ssr_pp_inf_verb &
	   [ LOCAL.CAT.VALENCE.COMPS < [ OPT + ], [ OPT - ] > ] ].
mv_prdp_pp_ssr_le := main_verb & lex_entry &
  [ SYNSEM ssr_prdp_pp_verb &
	   [ LOCAL.CAT.VALENCE.COMPS < [ OPT - ], [ OPT + ] > ] ].
mv_to_trans_le := main_verb & reg_lex_entry &
  [ SYNSEM to_trans_verb &
	   [ LOCAL.CAT.VALENCE.COMPS < [ OPT - ], [ OPT - ] > ] ].
mv_to*_trans_le := main_verb & reg_lex_entry &
  [ SYNSEM to_trans_verb &
	   [ LOCAL.CAT.VALENCE.COMPS < [ OPT - ], [ OPT + ] > ] ].
mv_unacc_le := main_verb & reg_lex_entry &
  [ SYNSEM unacc_verb ].
mv_unerg_le := main_verb & reg_lex_entry &
  [ SYNSEM unerg_verb ].
mv_poss_le := main_verb & reg_lex_entry &
  [ SYNSEM poss_verb & 
	   [ LOCAL.CAT.VALENCE.COMPS < [ OPT - ] > ] ].

proper_le := proper_name_sg & lex_entry.
proper_mle1 := proper_name_sg & multi_lex_entry1.
proper_mle2 := proper_name_sg & multi_lex_entry2.
proper_3mle3 := proper_name_sg & two_space_lex_entry3.

title_le := title_word & lex_entry.

intr_noun_word_le := intr_noun_word & lex_entry.
intr_temp_noun_le := intr_temp_noun_word & lex_entry.
irreg_intr_noun_le := irreg_intr_noun_word & lex_entry.
intr_temp_noun_nomod_le := intr_temp_noun_nomod_word & lex_entry.
noun_ppof_word_le := noun_ppof_word & lex_entry.
noun_ppcomp_word_le := noun_ppcomp_word & lex_entry.
temp_noun_ppcomp_word_le := temp_noun_ppcomp_word & lex_entry.
temp_noun_ppcomp_nomod_word_le := temp_noun_ppcomp_nomod_word & lex_entry.
noun_vpcomp_word_le := noun_vpcomp_word & lex_entry.
massn_le := mass_noun_word & lex_entry.
massn_mle1 := mass_noun_word & multi_lex_entry1.
deverbal_noun_intr_word_le := deverbal_noun_intr_word & lex_entry.
deverbal_massn_le := deverbal_mass_noun_word & lex_entry.
deverbal_massn_pp_le := deverbal_mass_noun_ppcomp_word & lex_entry.
plurn_le := plur_noun_word & lex_entry.
part_noun_le := part_noun_word & lex_entry.
part_noun_mle2 := part_noun_word & multi_lex_entry2.

poss_clitic_le := poss_clitic & lex_entry.
poss_of_le := poss_of & lex_entry.

intrans_adj_le := reg_intrans_adj & lex_entry.
trans_adj_le := reg_trans_adj & lex_entry.
reg_adj_equi_le := reg_adj_equi_word & lex_entry.
reg_adj_atrans_le := reg_adj_atrans_word & lex_entry.
reg_adj_atrans_cp_le := reg_adj_atrans_cp_word & lex_entry.
attr_intrans_adj_le := attr_intrans_adj & lex_entry.
pred_intrans_adj_le := pred_intrans_adj & lex_entry.
compound_adj_word_mle1 := compound_adj_word & multi_lex_entry1.
irreg_attr_adj_mle1 := irreg_attr_adj & multi_lex_entry1.
irreg_attr_adj_mle2 := irreg_attr_adj & multi_lex_entry2.
irreg_pred_intrans_adj_le := irreg_pred_intrans_adj & lex_entry.
irreg_pred_intrans_adj_mle1 := irreg_pred_intrans_adj & multi_lex_entry1.
irreg_pred_intrans_adj_mle2 := irreg_pred_intrans_adj & multi_lex_entry2.
irreg_trans_adj_mle2 := irreg_trans_adj & multi_lex_entry2.
wh_adjective_word_le := wh_adjective_word & lex_entry.
meas_adj_word_le := meas_adj_word & lex_entry.
adv_word_le := adverb_word & lex_entry.
adv_word_mle1 := adverb_word & multi_lex_entry1.
adv_pre_word_le := adv_pre_word & lex_entry.
adv_pre_word_3mle3 := adv_pre_word & two_space_lex_entry3.
adv_pre_word_nospec_le := adv_pre_word_nospec & lex_entry.
adv_post_word_le := adv_post_word & lex_entry.
adv_post_word_mle2 := adv_post_word & multi_lex_entry2.
vp_adv_word_le := vp_adverb_word & lex_entry.
vp_adv_post_word_le := vp_adv_post_word & lex_entry.
vp_adv_post_word_mle1 := vp_adv_post_word & multi_lex_entry1.
vp_adv_post_word_mle2 := vp_adv_post_word & multi_lex_entry2.
vp_adv_post_word_3mle2 := vp_adv_post_word & two_space_lex_entry2.
vp_adv_post_word_3mle3 := vp_adv_post_word & two_space_lex_entry3.
vp_adv_post_word_4mle3 := vp_adv_post_word & three_space_lex_entry3.
np_adv_word_le := np_adverb_word & lex_entry.
np_adv_word_mle1 := np_adverb_word & multi_lex_entry1.
np_adv_word_3mle3 := np_adverb_word & two_space_lex_entry3.

pers_pro_noagr_le := personal_pro & lex_entry.
pers_pro_le := personal_pro & lex_entry &
  [ SYNSEM.LOCAL [ CAT.AGR #agr,
		   CONT [ INDEX #agr &
			        [ PRONTYPE std_pron ] ] ] ].
pers_pro_mle2 := personal_pro & multi_lex_entry2 &
  [ SYNSEM.LOCAL [ CAT.AGR #agr,
	    CONT [ INDEX #agr &
			 [ PRONTYPE std_pron ] ] ] ].
poss_le := nonwh_poss_word & lex_entry & nonrel.
poss_pro_le := poss_pro_np & lex_entry.
refl_pro_le := reflexive_pro & lex_entry.
recip_pro_mle1 := reciprocal_pro & multi_lex_entry1.

expl_it_le := expletive_it_word & lex_entry.
expl_there_le := expletive_there_word & lex_entry.

generic_pro_le := generic_pro_word & lex_entry.
generic_pro_mle1 := generic_pro_word & multi_lex_entry1.
deictic_pro_le := deictic_pro_word & lex_entry.

wh_pro_word_le := wh_pro_word & lex_entry.
wh_adverb_word_le := wh_adverb_word & lex_entry.
wh_poss_le := wh_poss_word & lex_entry.
rel_poss_le := rel_poss_word & lex_entry.

rel_pro_word_le := rel_pro_word & lex_entry.
rel_adverb_word_le := rel_adverb_word & lex_entry.

prep_le := prep_word & lex_entry.
prep_mle1 := prep_word & multi_lex_entry1.
prep_mle2 := prep_word & multi_lex_entry2.
prep_3mle2 := prep_word & two_space_lex_entry2.
prep_4mle3 := prep_word & three_space_lex_entry3.
reg_prep_le := reg_prep_word & lex_entry.
reg_prep_mle1 := reg_prep_word & multi_lex_entry1.
prep_cp_le := prep_cp_word & lex_entry.
prep_cp_mle1 := prep_cp_word & multi_lex_entry1.
prep_nomod_le := prep_nomod_word & lex_entry.
prep_nomod_mle1 := prep_nomod_word & multi_lex_entry1.
prep_nomod_empty_le := prep_nomod_empty_word & lex_entry.
pp_le := pp_word & lex_entry.
pp_nomod_le := pp_nomod_word & lex_entry.
at_prep_le := at_prep_word & lex_entry.
before_prep_le := before_prep_word & lex_entry.
before_prep_mle1 := before_prep_word & multi_lex_entry1.
hour_prep_word_le := hour_prep_word & lex_entry.
prep_idiom_le := prep_idiom_word & lex_entry.
prep_idiom_mle1 := prep_idiom_pp_word & multi_lex_entry1.
prep_idiom_nomod_le := prep_idiom_nomod_word & lex_entry.
pp_idiom_le := pp_idiom_word & lex_entry.
pp_idiom_mle2 := pp_idiom_word & multi_lex_entry2.
ditrans_prep_le := ditrans_prep_word & lex_entry.
prep_no_n_mod_le := prep_no_n_mod_word & lex_entry.

subconj_le := subconj_word & lex_entry.
subconj_mle1 := subconj_word & multi_lex_entry1.
subconj_mle2 := subconj_word & multi_lex_entry2.
subconj_3mle2 := subconj_word & two_space_lex_entry2.
subconj_4mle3 := subconj_word & three_space_lex_entry3.
subconj_if_le := subconj_if_word & lex_entry.
subconj_inf_le := subconj_inf_word & lex_entry.
subconj_inf_3mle2 := subconj_inf_word & two_space_lex_entry2.

det_le := det_word & lex_entry & nonque.
det_nonpart_le := det_word_non_part & lex_entry & nonque.
det_wh_le := det_word & lex_entry.
det_mle1 := det_word & multi_lex_entry1 & nonque.
det_sg_le := det_word_sing & lex_entry & nonque.
det_pl_le := det_word_plur & lex_entry & nonque.
det_pl_3mle2 := det_word_plur & two_space_lex_entry2 & nonque.
det_ms_le := det_word_mass & lex_entry & nonque.
det_sm_le := det_word_sg_mass & lex_entry & nonque.
pdet_le := pdet_word & lex_entry & nonque.
pdet_sg_le := pdet_word_sing & lex_entry & nonque.
pdet_pl_le := pdet_word_plur & lex_entry & nonque.
pdet_pl_mass_le := pdet_word_pl_mass & lex_entry & nonque.
pdet_pl_mle2 := pdet_word_plur & multi_lex_entry2 & nonque.
pdet_pl_wh_mle1 := pdet_word_plur & multi_lex_entry1.
pdet_ms_le := pdet_word_mass & lex_entry & nonque.
pdet_ms_wh_mle1 := pdet_word_mass & multi_lex_entry1.
pdet_sm_le := pdet_word_sg_mass & lex_entry & nonque.
pdet_unsp_le := pdet_word_wh & lex_entry.
pdet_one_le := pdet_word_one & lex_entry.

coord_a_le := coord_word_atomic & lex_entry.
coord_c_le := coord_word_complex & lex_entry.
coord_c_3mle2 := coord_word_complex & two_space_lex_entry2.

that_c_le := lex_entry & that_compl_word.
to_c_prop_le := lex_entry & to_compl_prop_word.
to_c_nonprop_le := lex_entry & to_compl_nonprop_word.
for_c_le := lex_entry & for_compl_word.
whether_c_fin_le := lex_entry & whether_compl_word_fin.
whether_c_inf_le := lex_entry & whether_compl_word_inf.

not_le := neg_word & lex_entry.

lex_imp_mle1 := lex_imperative & multi_lex_entry1.

month_word_le := month_word & lex_entry.
month_year_word_le := month_year_word & lex_entry.
day_of_month_le := day_of_month_word & lex_entry.
day_of_week_le := day_of_week_word & lex_entry.
holiday_word_le := holiday_word & lex_entry.
holiday_word_mle1:= holiday_word & multi_lex_entry1.
holiday_word_3mle1 := holiday_word & two_space_lex_entry1.
holiday_word_3mle2 := holiday_word & two_space_lex_entry2.
holiday_word_4mle2 := holiday_word & three_space_lex_entry2.
holiday_word_4mle4 := holiday_word & three_space_lex_entry4.
season_word_le := season_word & lex_entry.
day_part_word_le := day_part_word & lex_entry.
def_day_part_word_le := def_day_part_word & lex_entry.
def_day_part_word_mle2 := def_day_part_word & multi_lex_entry2.
year_word_le := year_word & lex_entry.
year_word_mle2 := year_word & multi_lex_entry2.
year_word_3mle1 := year_word & two_space_lex_entry1.
hour_word_le := hour_word & lex_entry.
hour_word_mle1 := hour_word & multi_lex_entry1.
minute_word_le := minute_word & lex_entry.
minute_word_mle2 := minute_word & multi_lex_entry2.
hour_mod_word_le := hour_mod_word & lex_entry.
am_pm_word_le := am_pm_word & lex_entry.

ordinal_adj_le := ordinal_adj_word & lex_entry.

degree_spec_le := degree_spec_word & lex_entry.
degree_spec_mle1 := degree_spec_word & multi_lex_entry1.
degree_spec_mle2 := degree_spec_word & multi_lex_entry2.
degree_spec_3mle3 := degree_spec_word & two_space_lex_entry3.
wh_degree_spec_le := wh_deg_spec_word & lex_entry.

;det_spec_le := det_spec_word & reg_lex_entry.
;det_spec_mle1 := det_spec_word & multi_lex_entry1.
;det_spec_mle2 := det_spec_word & multi_lex_entry2.

how_about_le := how_about_word & lex_entry.
how_about_mle1 := how_about_word & multi_lex_entry1.
disc_adv_le := disc_adv_word & lex_entry.
disc_adv_mle1 := disc_adv_word & multi_lex_entry1.
disc_adv_mle2 := disc_adv_word & multi_lex_entry2.
disc_adv_3mle3 := disc_adv_word & two_space_lex_entry3.
disc_adv_4mle3 := disc_adv_word & three_space_lex_entry3.

comparison_spec_le := comparison_spec_word & lex_entry.

one_sing_le := one_word & lex_entry &
  [ SYNSEM int_adj_synsem & 
     [LOCAL [CAT [HEAD intadjn],
	     CONT [KEY const_rel & #key,
                   --STEMLISZT <! #key !>,
		   INDEX.PNG 3sg] ] ] ].

one_plur_le := one_word & lex_entry &
  [ SYNSEM.LOCAL [CAT [ MOD no-mod,
			HEAD intadj1],
		  CONT [KEY const_rel & #key,
			--STEMLISZT <!#key!>,
			INDEX.PNG 3pl] ] ].


bare_unspecified_card_le := 
  card_only_word & lex_entry &
  unspecified_num_without_complements.
bare_specified_card_le := 
  card_only_word & lex_entry &
  specified_num_without_complements.

complemented_unspecified_card_le := 
  norm_card_word & lex_entry & 
  unspecified_num_with_complements.
complemented_specified_card_le := 
  norm_card_word & lex_entry &
  specified_num_with_complements.

bare_unspecified_ord_le := 
  ord_word & 
  unspecified_num_without_complements.
bare_specified_ord_le := 
  ord_word & 
  specified_num_without_complements.
