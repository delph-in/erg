;;; -*- Mode: tdl; Coding: utf-8; -*-
;;;
;;;  Copyright (c) 1994-2018
;;;    Dan Flickinger, Rob Malouf, Emily M. Bender
;;;    see LICENSE for conditions
;;;
;;;  letypes.tdl
;;;
;;;  Lexical entry types (yield of lextypes hierarchy)
;;;
;;;  Created by Dan Flickinger, 15-June-1996
;;;
;;;  $Id: letypes.tdl 7479 2010-02-21 23:11:30Z danf $


; In the following type names, complements marked with "*" in the type names 
; are optional. 

v_-_it_le := v_-_it_lexent
"""
It-subj
<ex>It rains.
"""
.

v_vp_it_le := main_verb & 
"""
It-subj, Comps: VP (inf)         
<ex>It sufficed to wait.
"""
  [ SYNSEM atrans_inf_verb & 
	   [ LOCAL.CAT [ VAL.COMPS < [ OPT - ] > ] ] ].

v_np_it_le := v_np_it_lexent
"""
It-subj, NP complement
<ex>It rained money in the stock market.
"""
.

v_cp_le := v_cp_lexent
"""
Cmps S (fin, +/-Q, opt cmplzr)   
<ex>B proved (that) C won.
"""
.

v_cp_comp_le := v_cp_comp_lexent

"""
Cmps S (fin, +/-Q, obl cmplzr)   
<ex>B didn't mind that C won.
"""
.
;; DPF 2022-06-24 - Not used, so comment out.  Now have separate type for
;; question-CP complement.
#|
v_cp_fin-inf_le := main_verb & 
"""
Cmps S (fin/inf, +/-Q)           
<ex>B forgot whether to jump.
"""
  [ SYNSEM cp_fin_inf_intrans_verb ].
|#

v_cp_fin-inf-q_le := v_cp_fin-inf-q_lexent
"""
Cmps S (fin/inf, +Q), complement not extractable             
<ex>B wonders whether to jump.
<nex>Who he saw, we wondered.
"""
.

v_cp_fin-inf-q-mob_le := v_cp_fin-inf-q-mob_lexent
"""
Cmps S (fin/inf, +Q, extractable)             
<ex>What he said, we'll never know.
"""
.

v_cp_fin-inf-q-mc_le := v_cp_fin-inf-q-mc_lexent
"""
Cmps S (fin/inf, +Q), allows main clause question complements
<ex>B asks, why is the sky blue?
"""
.

;; DPF 2018-04-29 - Prevent these from undergoing the  CP-frag lexical rule,
;; to avoid apparently spurious ambiguity.
;;
v_cp_prop_le := v_cp_prop_lexent
"""
Cmps S (fin/inf, -Q, opt cmplzr) 
<ex>B hoped (that) C won. 
"""
.

v_cp_no-inv_le := v_cp_no-inv_lexent
"""
Cmps S (fin, +/-Q, opt cmplzr), no inverted quote
<ex>B marked that we won.
"""
.

v_cp_nfin_le := v_cp_nfin_lexent
"""
Cmps S (head nonfin)             
<ex>Beware that C doesn't win.
"""
.

; "find": "I find that Kim has left" but "*I find Kim has left"
v_cp_comp-prop_le := main_verb & 
"""
Cmps S (fin, -Q, obl cmplzr)     
<ex>B resented that C won.
"""
  [ SYNSEM cp_only_prop_intrans_verb ].

; look/seem like
v_cp_like_le := v_cp_like_lexent
"""
Cmps S (fin, -!, 'like' cmplzr)  
<ex>B looked like she won.
"""
.

;; inform
v_np-cp_le := v_np-cp_lexent
"""
Cmps NP,S (fin, +/-Q)            
<ex>B informed C that D won.
"""
.
;; DPF 2016-08-26 - This type is subsumed by the more general 
;; v_cp_fin-inf-q-mc_le which also admits *we asked them what to do*
;; DPF 2017-10-07 - Well, no.  This type takes two complements, an NP and a CP,
;; while v_cp_fin-inf-q-mc_le only takes one complement, a CP.  Sigh.
;; DPF 2020-04-21 - Block cp-frag lexical rule, since it ignores whether the
;; first (NP) complement is obligatory.
;;
; ask, [MC -] CP complement, embedded yes/no question
v_np-cp_q_le := v_np-cp_q_lexent
"""
Cmps NP,S (fin, +Q, MC-, INV+)            
<ex>B asked C `did you win?'
"""
.
; ask, [MC +] CP complement
v_np-cp_q-mc_le := v_np-cp_q-mc_lexent
"""
Cmps NP,S (fin, +Q, MC+, inverted)            
<ex>B asked C `who did you admire'
"""
.
; persuade
v_np-cp_prop_le := v_np-cp_prop_lexent
"""
Cmps NP,S (fin, -Q)              
<ex>B persuaded C that D won.
"""
.
; tell: tell me that they won
v_np-cp_fin-inf_le := v_np-cp_fin-inf_lexent
"""
Cmps NP,S (fin/inf, +/-Q)        
<ex>B told C that they won
<ex>B told C who won
"""
.
; question
v_np-cp_fin-inf-q_le := v_np-cp_fin-inf-q_lexent
"""
Cmps NP,S (fin/inf, +Q)        
<ex>B questioned C whether to jump.
<ex>B questioned C whether he jumped.
"""
.
; ask, prefer 'ask that he be released'
v_cp_sbjnct_le := v_cp_sbjnct_lexent
"""
Cmps S (bse, subjunctive mood)   
<ex>B required that C be here.
"""
.

;; Hack for Sherlock, archaic English
; remark 'That be the house, he remarked'
v_cp_sbjnct-xtr_le := v_cp_sbjnct-xtr_lexent
"""
Cmps S (bse, subjunctive mood, extractable)   
<ex>That be the house, he remarked.
"""
.

; ask, prefer 'ask that he be released'
v_cp_sbjnct-fin_le := v_cp_sbjnct-fin_lexent
"""
Cmps S (fin, subjunctive mood)   
<ex>B required that C be here.
"""
.

; wait
v_cp_inf-only_le := v_cp_inf-only_lexent
"""
Cmps S (inf, +/-Q)               
<ex>B waited for C to arrive.
"""
.

; try
v_vp_seq_le := v_vp_seq_lexent
"""
Cmps VP, s-equi                  
<ex>B intended to win.
"""
.
; refrain from
v_vp_seq-from_le := v_vp_seq-from_lexent
"""
Cmps VP, s-equi, from-VP         
<ex>B refrained from smoking.
"""
.

v_prd_seq_le := v_prd_seq_lexent
"""
Cmps Pred-phr, s-equi            
<ex>B remained doubtful.
"""
.

v_prd_seq-idm_le := v_prd_seq-idm_lexent
"""
Cmps Pred-phr, s-equi, idiom     
<ex>B made sure that C won.
"""
.
v_prd_seq-va_le := v_prd_seq-va_lexent
"""
Cmps VP or AP, s-equi             
<ex>B became frustrated.
"""
.

; run low (on X)
v_ap_seq_le := v_ap_seq_lexent
"""
Cmps Adj-phr, s-equi             
<ex>B proved competent.
"""
.

; want into
v_pp_seq_le := v_pp_seq_lexent
"""
Cmps PP, s-equi                  
<ex>B wanted into the game.
"""
.

v_pp_seq-e_le := v_pp_seq-e_lexent
"""
Cmps PP (sem empty), s-equi      
<ex>My battery shows as empty.
"""
.

; stop working
; go shopping
v_vp_seq-prp_le := v_vp_seq-prp_lexent
"""
Cmps VP (pres prtcpl), s-equi    
<ex>B loves playing chess.
"""
.

; help
v_vp_seq-bse_le := v_vp_seq-bse_lexent
"""
Cmps VP (base form), s-equi      
<ex>B helped finish the paper.
"""
.

; 'I will go read', 'Go read' '*He went read'
v_vp_seq-go_le := v_vp_seq-go_lexent
"""
Base form, Cmps VP (base) s-equi 
<ex>B will go play chess.
"""
.

; 'We needn't stay' but "*He needs not stay", "*We will need not stay"
; cf. "He needn't stay" (irreg)
v_vp_ssr-n3sg_le := v_vp_ssr-n3sg_lexent
"""
Non-3sg, Cmps VP (base), raising
<ex>We needn't wait here.
"""
.

; "need not"
v_vp_ssr-n3sg-r_le := v_vp_ssr-n3sg-r_lexent
"""
Non-3sg, Cmps VP (base) s-raising, oblig adverb
<ex>We need only wait here.
"""
.
; have yet to
v_p-vp_ssr_le := v_p-vp_ssr_lexent
"""
Cmps Prtcl, VP (inf), s-raising  
<ex>B has yet to win.
"""
.
; they try and find it
v_vp_seq-and_le := v_vp_seq-and_lexent
"""
Pres n3sg, Cmps VP (and), s-equi 
<ex>They try and find it.
"""
.

; he will try and find it
v_vp_seq-and-bse_le := v_vp_seq-and-bse_lexent
"""
Base form, Cmps VP (and), s-equi 
<ex>B will try and find it.
"""
.

; couldn't help but notice
v_vp_seq-but_le := v_vp_seq-but_lexent
"""
Base form, Cmps VP (but), s-equi 
<ex>B couldn't help but win.
"""
.

v_np-vp_oeq_le := v_np-vp_oeq_lexent
"""
Cmps NP,VP (inf), o-equi         
<ex>B invited C to stay.
"""
.

v_np-vp_oeq-ntr_le := v_np-vp_oeq-ntr_lexent
"""
Cmps NP,VP (inf), o-equi, no passive
<ex>B got C to stay.
"""
.

; help
v_np-vp_oeq-bse_le := v_np-vp_oeq-bse_lexent
"""
Cmps NP,VP (base), o-equi        
<ex>B helped C win.
"""
.

v_np-vp_oeq-psv_le := v_np-vp_oeq-psv_lexent
"""
Cmps NP,VP (inf), o-equi, only passive complement
<ex>The teacher promised the students to be allowed to play outside.
"""
.

v_np-prd_oeq_le := v_np-prd_oeq_lexent
"""
Cmps NP,Pred-phr, o-equi         
<ex>B proved C wrong.
"""
.

v_np-ap_oeq_le := v_np-ap_oeq_lexent
"""
Cmps NP,Adj-phr, o-equi          
<ex>B imagined C taller.
"""
.

; have x ready
; have x in stock
; I want x confirmed
; get x ready
v_np-prd_oeq-ntr_le := v_np-prd_oeq-ntr_lexent
"""
Cmps NP,Prd-phr, o-equi, no psv  
<ex>B wanted C ready.
"""
.
; I have X to get rid of
v_np-vpslnp_oeq_le := v_np-vpslnp_oeq_lexent
"""
Cmps NP and VP/NP, o-equi        
<ex>B had C to talk to.
"""
.
; prevent X from Ving
v_np-vp_oeq-from_le := v_np-vp_oeq-from_lexent
"""
Cmps NP,VP (prprt, from), o-equi 
<ex>B excused C from playing.
"""
.

; promise
v_np-vp_aeq-ntr_le := v_np-vp_aeq-ntr_lexent
"""
Cmps NP,VP (inf), a-equi, no psv 
<ex>B promised C to win.
"""
.
; use X to do Y
v_np-vp_aeq_le := v_np-vp_aeq_lexent
"""
Cmps NP,VP (inf), a-equi         
<ex>B used C to reach D.
"""
.

; ask X to be allowed to Y
v_np-vp_aeq-psv_le := v_np-vp_aeq-psv_lexent
"""
Cmps NP,VP (inf), a-equi, passive VP complement only         
<ex>B asked C to be allowed to leave.
"""
.

; kim took too long to arrive
v_np-vp_aeq-noel_le := v_np-vp_aeq-noel_lexent
"""
Cmps NP,VP (inf), a-equi, no ell 
<ex>B took an hour to win.
"""
.

; have trouble sleeping
v_np-vp_aeq-prp_le := v_np-vp_aeq-prp_lexent
"""
Cmps NP,VP (prprt), a-equi       
<ex>B had trouble sleeping.
"""
.

; turn out to
v_p-vp_seq_le := v_p-vp_seq_lexent
"""
Cmps Prtcl,VP, s-equi            
<ex>B turned out to be wrong.
"""
.
; keep on driving
v_p-vp_prp_le := v_p-vp_prp_lexent
"""
Cmps Prtcl,VP                    
<ex>B kept on winning.
"""
.
v_p-cp_le := v_p-cp_lexent
"""
Cmps Prtcl,S(fin, +/-Q, opt cmp) 
<ex>B found out (that) C won.
"""
.
v_p-pp*-cp_le := main_verb & 
"""
Cmps Prtcl,PP(opt,sel),Scomp     
<ex>B pointed out to C that S.
"""
  [ SYNSEM particle_pp_cp_verb &
	   [ LKEYS [ --COMPKEY #cmin,
                      --+COMPKEY #cmin ] ] ].

v_p-vp_oeq_le := v_p-vp_oeq_lexent
"""
Cmps Prtcl,VP, o-equi            
<ex>B geared up C to win.
"""
.
v_pp-vp_oeq_le := v_pp-vp_oeq_lexent
"""
Cmps PP(sel),VP, o-equi          
<ex>B appealed to C to win.
"""
.
v_pp-vp_oeq-bse_le := v_pp-vp_oeq-bse_lexent
"""
Cmps PP(sel),VP, o-equi          
<ex>B listened to C sing.
"""
.
v_pp*-vp_oeq_le := v_pp*-vp_oeq_lexent
"""
Cmps optional PP(sel),VP, o-equi
<ex>B signaled (to C) to open the door.
"""
.
;; leave it to kim to arrange the meeting
v_it-pp-vp_oeq_le := v_it-pp-vp_oeq_lexent
"""
Cmps Expl-it,PP,VP, o-equi       
<ex>B left it to C to hire D.
"""
.

;; consider it a privilege to hire D
v_it-np-vp_aeq_le := v_it-np-vp_aeq_lexent
"""
Cmps Expl-it,NP,VP, anom-equi       
<ex>B considers it a privilege to hire D
"""
.

;; arrange (with kim) to meet her
v_pp-vp_seq_le := v_pp-vp_seq_lexent
"""
Cmps PP,VP, s-equi               
<ex>B arranged with C to stay.
"""
.
;; arrange it with kim to meet her
v_it-pp-vp_seq_le := v_it-pp-vp_seq_lexent
"""
Cmps Expl-it,PP,VP s-equi        
<ex>B arranged it with C to X.
"""
.

;; *it bothers kim that sally left*; and by lex rule: *it bothers kim to go*
v_np-cp_it-s_le := v_np-cp_it-s_lexent
"""
It-subj, Cmps NP,S(fin/inf)      
<ex>It bothered B that C won.
"""
.

; ticks NP off that S
v_np-p-cp_it-s_le := v_np-p-cp_it-s_lexent
"""
It-subj, Cmps NP,ptcl,S
<ex>It ticked him off that we won.
"""
.
;; That Kim lost suggests that Sandy won. 
;; It suggests that Sandy won that Kim lost.
v_cp-cp_it-s_le := v_cp-cp_it-s_lexent
"""
It-subj, S ,S 
<ex>That B lost suggests that C won.
"""
.

; cost
v_np-np-cp_it-s_le := v_np-np-cp_it-s_lexent
"""
It-subj, Cmps NP,NP,S(fin/inf)   
<ex>It cost B $5 for C to go.
"""
.

; make (?)
v_np-np-cp_it-ob_le := v_np-np-cp_it-ob_lexent
"""
It-subj, Cmps NP,NP,S(fin/inf)   
<ex>It makes Kim the winner that the horse died.
"""
.

; matter
v_np-pp*-cp_it-s_le := v_np-pp*-cp_it-s_lexent
"""
It-subj, Cmps NP,PP,S(fin)   
<ex>It matters a lot to Kim that S.
"""
.

; take: 'took him ten minutes to leave'
v_np*-np-vp_it-s_le := v_np*-np-vp_it-s_lexent
"""
It-subj, Cmps NP,NP,VP           
<ex>It took B an hour to go.
"""
.
; take: 'took (him) until Friday to leave'
v_np*-pp-cp_it-s-inf_le := v_np*-pp-cp_it-s-inf_lexent
"""
It-subj, Cmps NP,PP,inf-VP-or-CP           
<ex>It took B until Friday to leave.
"""
.
; 'it advances our cause (a lot) to take this step"
; "it will cost us (a lot) to win"
v_np-np*-vp_it-s_le := v_np-np*-vp_it-s_lexent
"""
It-subj, Cmps NP,(NP),VP         
<ex>It cost B ($5) to go.
"""
.
; call
v_it-pp-cp_le := v_it-pp-cp_lexent
"""
Cmps it,PP,S(fin)   
<ex>He called it to their attention that S
"""
.

; cost/take
v_np-np-vpslnp_tgh_le := v_np-np-vpslnp_tgh_lexent
"""
subj,Cmps NP,NP,VP/NP
<ex>The book took (B) an hour to read.
"""
.

; make (only)
v_np-prd-cp_it-s_le := v_np-prd-cp_it-s_lexent
"""
It-subj, Cmps NP,PrdP ,S(fin/inf)   
<ex>It made B happy for C to go.
"""
.

;; it seems (to kim) that sandy left
v_pp*-cp_it-s_le := v_pp*-cp_it-s_lexent
"""
It-subj, Cmps (PP),S(fin)        
<ex>It seems to B that K won.
"""
.

;; it occurred *(to me) that Sandy left
v_pp-cp_it-s_le := v_pp-cp_it-s_lexent
"""
It-subj, Cmps PP,S(fin)          
<ex>It occurred to B to look.
"""
.
;; it looks (to kim) like Sandy left
v_pp*-cp_like_le := v_pp*-cp_like_lexent
"""
It-subj, Cmps (PP),S(like)       
<ex>It felt (to B) like K won.
"""
.

;; It doesn't matter who stays
v_pp*-cp_it-unsp_le := v_pp*-cp_it-unsp_lexent
"""
It-subj, Cmps (PP),S(+/-Q)       
<ex>It mattered whether S won.
"""
.

;; It dawned on Kim that ...
v_pp-cp_it-s-e_le := v_pp-cp_it-s-e_lexent
"""
It-subj, Cmps PP,S(fin, no to)   
<ex>It dawned on B that K won.
"""
.

; it turns out that kim arrived
v_p-cp_it-s_le := v_p-cp_it-s_lexent
"""
It-subj, Cmps Prtcl,S            
<ex>It turned out that S won.
"""
.

; It follows that ...
v_cp_it-s_le := v_cp_it-s_lexent
"""
It-subj, Cmps S                  
<ex>It followed that S won.
"""
.

; it would help/wouldn't hurt to know ...
v_vp_it-s_le := v_vp_it-s_lexent
"""
It-subj, Cmps VP                 
<ex>It doesn't pay to grumble.
"""
.

; bet
v_np-np-cp_le := v_np-np-cp_lexent
"""
Cmps NP,NP,S                     
<ex>B bet C $5 that S won.
"""
.

; report to
v_pp*-cp_le := v_pp*-cp_lexent
"""
Cmps PP(sel, opt),S non-Q
<ex>B reported to C that D won.
"""
.
; say of NP that S
v_pp-cp_le := v_pp-cp_lexent
"""
Cmps oblig PP, S non-Q
<ex>B said of C that she won.
"""
.
; say to
v_pp*-cp_fin-imp_le := v_pp*-cp_fin-imp_lexent
"""
Cmps PP(sel, opt),S(fin/inf), allow imperatives
<ex>B said to C that D won.
"""
.
; predict
v_pp*-cp_unsp_le := v_pp*-cp_unsp_lexent
"""
Cmps PP(sel, opt),S(fin/inf, +/-Q),
<ex>B predicted whether C would win.
"""
.

v_pp*-cp_fin_le := v_pp*-cp_fin_lexent
"""
Cmps PP(sel, opt),S(fin)         
<ex>B joked to C that D won.
"""
.
v_pp-cp_fin_le := v_pp-cp_fin_lexent
"""
Cmps PP(sel, oblig),S(fin)         
<ex>B impressed on C that D won.
"""
.
v_pp*-cp_inf_le := v_pp*-cp_inf_lexent
"""
Cmps PP(sel, oblig),S(inf)         
<ex>B pleaded (with C) for D to be hired.
"""
.
; 'see to it that X'
v_pp-it-cp_le := v_pp-it-cp_lexent
"""
Cmps PP(sel,expl-it),S(fin)      
<ex>B saw to it that C won.
"""
.

; would like
v_np-vp_sor-ntr_le := v_np-vp_sor-ntr_lexent
"""
Cmps NP,VP, s-o-raising, no psv  
<ex>B wanted it to rain.
"""
.

v_np-vp_sor_le := v_np-vp_sor_lexent
"""
Cmps NP,VP, s-o-raising          
<ex>B expected it to rain.
"""
.

v_np-vp_bse_le := v_np-vp_bse_lexent
"""
Cmps NP,VP(bse), s-o-raising     
<ex>B heard it rain.
"""
.

; make: 'kim made it clear that sandy arrived'
v_np-prd_sor_le := v_np-prd_sor_lexent
"""
Cmps NP,Adj, s-o-raising         
<ex>The smog made it cloudy.
"""
.

v_np-np_le := v_np-np_lexent
"""
Cmps NP(obl),NP(obl), dative alt 
<ex>B gave C the book.
"""
.
; 'leave (bequeath)'
v_np-np*_le := v_np-np*_lexent
"""
Cmps NP(obl),NP(opt), dative alt 
<ex>B left the book to C.
"""
.
v_np*-np_le := v_np*-np_lexent
"""
Cmps NP(opt),NP(oblig), dative alt 
<ex>B paid C the money.
"""
.
v_np-np_only_le := v_np-np_only_lexent
"""
Cmps NP(obl),NP(obl), no dat alt 
<ex>B declared C the winner.
"""
.
v_np*-np*_only_le := v_np*-np*_only_lexent
"""
Cmps NP(opt),NP(opt), no dat alt 
<ex>B asked C the question.
"""
.
v_np-np_idm_le := v_np-np_idm_lexent
"""
Cmps NP(obl),NP(obl), idiom      
<ex>B called it quits.
"""
.
;; talk
v_pp*-pp*_le := v_pp*-pp*_lexent
"""
Cmps PP(opt),PP(opt)             
<ex>B lied to C about D.
"""
.
v_pp-pp_le := v_pp-pp_lexent
"""
Cmps PP(obl),PP(obl)             
<ex>B ranged from C to D.
"""
.
v_pp-pp_e_le := v_pp-pp_e_lexent
"""
Cmps PP(obl),PP(sel,obl)         
<ex>B reported on C to D.
"""
.
v_np*-pp*-ppto_le := v_np*-pp*-ppto_lexent
"""
Cmps NP(opt),PP(sel,opt),PP(to)  
<ex>B changed C from D to E.
"""
.
v_np-pp*-ppto_le := v_np-pp*-ppto_lexent
"""
Cmps NP(obl),PP(sel,opt),PP(to)  
<ex>B converted C from D to E.
"""
.
v_np-pp*-ppfor_le := v_np-pp*-ppfor_lexent
"""
Cmps NP(oblig),PP(sel,opt),PP(for) 
<ex>B paid money to C for D.
"""
.

v_pp_e_le := v_pp_e_lexent
"""
Cmps PP(sel,obl)                 
<ex>B looked after C.
"""
.
v_pp_e3_le := main_verb & 
"""
Cmps PP(sel,obl)                 
<ex>B gave to worthy causes
"""
  [ SYNSEM empty_prep_intrans_arg3_verb & 
	   [ LOCAL.CAT [ VAL.COMPS < [ OPT - ] > ],
             LKEYS [ --COMPKEY #cmin,
                     --+COMPKEY #cmin ] ] ].

v_pp_refl-idm_le := v_pp_refl-idm_lexent
"""
PP complement, reflexive idiom
<ex>B came out of her shell.
"""
.
v_np-pp_e_le := v_np-pp_e_lexent
"""
Cmps NP(obl),PP(sel.obl)         
<ex>B compared C with D.
"""
.
v_np*-pp_e_le := v_np*-pp_e_lexent
"""
Cmps NP(opt),PP(sel,obl)         
<ex>B separated C from D.
"""
.
v_np-pp*_e-imp_le := v_np-pp*_e-imp_lexent
"""
Cmps NP(obl),PP(sel,opt), hd_imp_c  
<ex>Thank you for D.
"""
.
; take Kim for granted
v_np-pp_e-idm_le := v_np-pp_e-idm_lexent
"""
NP and empty-PP complements, idiom
Cmps NP(obl),PP(sel,obl), idiom  
<ex>B took C for granted.
"""
.
v_np-pp_e-refl-idm_le := v_np-pp_e-refl-idm_lexent
"""
Cmps reflexive NP(obl),PP(sel,obl), idiom  
<ex>B cast her lot with C.
"""
.
v_np-pp_e-refl2-idm_le := v_np-pp_e-refl2-idm_lexent
"""
Cmps reflexive NP(obl),reflexive PP(sel,obl), idiom  
<ex>B wore his heart on his sleeve.
"""
.
; came into being
v_pp_e-idm_le := main_verb & 
"""
Cmps NP(obl), idiom              
<ex>B came into being.
"""
  [ SYNSEM empty_prep_intrans_verb & 
	   [ LKEYS [ --COMPKEY #cmin,
                     --+COMPKEY #cmin ] ],
    IDIOM + ].

; 'interest kim in'
v_np-pp_e-ntr_le := v_np-pp_e-ntr_lexent
"""
Cmps NP(obl),PP(sel,obl), no psv 
<ex>B interested C in D.
"""
.

;; 'prefer it if ...'
v_it-cp_le := v_it-cp_lexent
"""
Cmps Expl-it,S(fin,+/-Q)         
<ex>B prefers it if C wins.
"""
.

;; 'hate it that ...'
v_it-cp_prop-c_le := v_it-cp_prop-c_lexent
"""
Cmps Expl-it,S(fin,-Q),obl cplzr 
<ex>B hates it that C won.
"""
.

;; 'take it (that) ...'
v_it-cp_prop_le := v_it-cp_prop_lexent
"""
Cmps Expl-it,S(fin,-Q)           
<ex>B took it (that) C won.
"""
.

#|
; 'make it clear that ...'
v_it-prd_le := v_it-prd_lexent
"""
Cmps Expl-it,Pred-phr            
<ex>B made it clear that C won
"""
.
|#

v_np_le := v_np_lexent
"""
Cmps NP(obl)                     
<ex>B chased C.
"""
.
v_np*_le := v_np*_lexent
"""
Cmps NP(opt)                     
<ex>B cleaned the room.
"""
.

;; DPF 2017-04-27 - No longer see why we would restrict these verbs (often
;; alternating with inchoatives) to exclude gerund complements, since we
;; need them for e.g. *they increased spending*.  So changed [HEAD basic_noun]
;; to supnoun on complement.
;; DPF 2020-05-14 - Perhaps a confusion about the name: noger here means the
;; verb itself does not undergo the (nominal) gerund lexical rule.  But we do
;; need a lexical verb type that excludes gerund complements, as for *seem*
;; in *He seemed arriving*, and does not passivize.
;;
v_np_noger_le := v_np_noger_lexent
"""
Cmps NP(obl,nongerund)           
<ex>B continued the tour.
"""
.
v_np*_noger_le := v_np*_noger_lexent
"""
Cmps NP(opt,nongerund)           
<ex>B blended until the milkshake was smooth.
"""
.
v_np_do-be_le := basic_main_verb_sans_key &
"""
Cmps NP(gap), only for do (but not doing) in do-be construction
<ex>The first thing B did was hire C.
"""
  [ SYNSEM do_be_verb &
	   [ LOCAL.CAT.HEAD [ VFORM non_prespart,
			      INV - ],
	     LKEYS.KEYREL.ARG2.IFORM non_prespart ],
    INFLECTD - ].


v_np_do-ing-be_le := basic_main_verb_sans_key &
"""
Cmps NP(gap), only for doing in do-be construction
<ex>The thing B was doing was hiring C.
"""
  [ INFLECTD -,
    SYNSEM do_be_verb &
	   [ LOCAL.CAT.HEAD [ VFORM prp,
			      INV - ],
	     LKEYS.KEYREL.ARG2.IFORM prp ] ].

v_np_done-be_le := basic_main_verb_sans_key &
"""
Cmps NP(gap), only for do (but not doing) in do-be construction
<ex>The first thing that must be done is hire C.
"""
  [ SYNSEM do_be_verb_passive &
	   [ LOCAL.CAT.HEAD.INV -,
	     LKEYS.KEYREL.ARG2.IFORM non_prespart ],
    INFLECTD + ].

;; DPF 2022-05-30 - Changed the only instance "beware" to be of type
;; v_np*_n3s-bse_le, since non-finite was the wrong constraint for a verb that
;; can be imperative or a complement of modals.
#|
v_np*_nfin_le := main_verb & 
"""
Cmps NP(opt), nonfin             
<ex>B should beware C.
"""
  [ SYNSEM np_trans_nfin_verb ].
|#

v_np_n3s-bse_le := v_np_n3s-bse_lexent
"""
Cmps NP(oblig), non-3sg or base
<ex>They underly C.
"""
.
v_np*_n3s-bse_le := v_np*_n3s-bse_lexent
"""
Cmps NP(opt), non-3sg or base
<ex>Beware the unseen dangers.
<ex>You should beware the risks.
"""
.
v_np_refl-idm_le := v_np_refl-idm_lexent
"""
Cmps reflexive NP, idiom                   
<ex>We wracked our brains.
"""
.
v_p-np_refl-idm_le := main_verb_mliszt & 
"""
Cmps particle + reflexive NP, idiom                   
<ex>We made up our minds.
"""
  [ SYNSEM np_particle_idiom_verb &
	   [ LKEYS [ --COMPKEY #cmin,
                     --+COMPKEY #cmin ] ],
    IDIOM + ].

v_np_sg-idm_le := v_np_sg-idm_lexent
"""
Cmps non-reflexive NP, singular, idiom                   
<ex>He kicked the bucket.
"""
.

v_np_pl-idm_le := v_np_pl-idm_lexent
"""
Cmps non-reflexive NP, plural, idiom                   
<ex>He sucked eggs.
"""
.

; 'elected him president'
v_np-nb_le := v_np-nb_lexent
"""
Cmps NP(obl),Nbar(obl)           
<ex>We elected B president.
"""
.

; 'see picture, page 2'
v_nb-np*_imp_le := v_nb-np*_imp_lexent
"""
Cmps Nbar(obl), NP(opt), hd_imp_c   
<ex>See pamphlet, page 2.
"""
.

v_pp_e-nfin_le := main_verb & 
"""
Cmps NP(obl), nonfin             
<ex>B should beware of C.
"""
  [ SYNSEM empty_prep_intrans_bse_verb ].

v_np-pp_le := v_np-pp_lexent
"""
Cmps NP(obl),PP(obl)             
<ex>B named C after D.
"""
.
;; takes dir_state_modable_rel oblique complement.
;; put (takes variety of PP complements, so avoid chart dependency filter)
v_np-pp_prop_le := v_np-pp_prop_lexent
"""
Cmps NP(obl),PP(obl), state rslt 
<ex>B put C on D.
"""
.

;; change one's mind about
v_np-pp_nmod_le := v_np-pp_nmod_lexent
"""
Cmps NP(obl),PP(obl, nmodifier)  
<ex>We change our mind about C
"""
.
v_np-pp_dir_le := v_np-pp_dir_lexent
"""
Cmps NP(obl),PP(dir, obl)
<ex>B raced C into D.
"""
.

v_np-pp_oeq-as_le := v_np-pp_oeq-as_lexent
"""
Cmps NP(obl),PP-prd(obl,as), o-equi  
<ex>B classifies C as important.
"""
.
v_np_ntr_le := v_np_ntr_lexent
"""
Cmps NP(obl), no psv, no attr-adj for -ing
<ex>B remains C.
"""
.
v_np*_ntr_le := v_np*_ntr_lexent
"""
Cmps NP(opt), no psv             
<ex>B promised C.
"""
.
v_np_ntr-noger_le := main_verb & 
"""
Cmps NP(obl), no psv, no gerund complement             
<ex>B seemed the best choice.
<nex>B seemed arriving.
"""
  [ SYNSEM np_non_trans_verb &
	   [ LOCAL.CAT [ VAL.COMPS < [ OPT -,
				       LOCAL.CAT.HEAD basic_noun] > ] ] ].

; 'become'
v_np_id_le := v_np_id_lexent
"""
Cmps NP, become                  
<ex>B became C.
"""
.
; 'become president'
v_nb_le := v_nb_lexent
"""
Cmps Nbar(obl,pred nom)          
<ex>B became president.
"""
.

; 'become obvious that Kim arrived.'
v_prd_ssr-va_le := v_prd_ssr-va_lexent
"""
Cmps VP or AP, subj-raising, expl-it subj
<ex>It became obvious that Kim arrived.
"""
.

; 'stood guard'
v_nb_idm_le := v_nb_idm_lexent
"""
Cmps Nbar(obl), idiom            
<ex>B stood guard.
"""
.

v_np-pp_seq-as_le := v_np-pp_seq-as_lexent
"""
Cmps NP(obl),PP(obl,as), s-equi  
<ex>B struck C as without D.
"""
.
v_p_le := v_p_lexent
"""
Cmps Prtcl                       
<ex>B turned up.
"""
.
v_p_3only_le := v_p_3only_lexent
"""
Cmps Prtcl, subj 3per            
<ex>Something is going on.
"""
.
v_p-np_le := v_p-np_lexent
"""
Cmps Prtcl,NP(obl), order alt    
<ex>B picked up the book.
"""
.
v_np-p_le := v_np-p_lexent
"""
Cmps NP(obl),Prtcl, no order alt 
<ex>We will see you around.
"""
.
v_np-p_idm_le := v_np-p_idm_lexent
"""
Cmps NP(obl),Prtcl, no order alt 
<ex>We will see you around.
"""
.
v_p-prd_le := v_p-prd_lexent
"""
Cmps Prtcl,Pred-phr              
<ex>B ended up sick.
"""
.
v_p-pp_le := v_p-pp_lexent
"""
Cmps Prtcl,PP(obl)               
<ex>B caught up on C.
"""
.

v_p-pp_e_le := v_p-pp_e_lexent
"""
Cmps Prtcl,PP(obl,sel)           
<ex>B ran out of C.
"""
.
v_p-pp*_e_le := main_verb & 
"""
Cmps Prtcl,PP(opt,sel)           
<ex>B heard back from C.
"""
  [ SYNSEM particle_empty_pp_verb &
	   [ LOCAL.CAT [ VAL.COMPS < synsem, [ OPT + ] > ],
             LKEYS [ --COMPKEY #cmin,
                     --+COMPKEY #cmin ] ] ].

; 'boils it down to'
v_p-np-pp_to_le := v_p-np-pp_to_lexent
"""
Cmps Prtcl,NP(obl),PP(obl,to)    
<ex>B made out the check to C.
"""
.

; 'made up of'
v_p-np-pp_of_le := main_verb & 
"""
Cmps Prtcl,NP(obl),PP(obl,of)    
<ex>This is made up of bricks.
"""
  [ SYNSEM np_particle_ppof_verb ].

v_p-np-pp_for_le := v_p-np-pp_for_lexent
"""
Cmps Prtcl,NP(obl),PP(obl,for)   
<ex>B traded in B for C.
"""
.

v_p-np-pp_from_le := main_verb & 
"""
Cmps Prtcl,NP(obl),PP(obl,from)  
<ex>B separated out C from D.
"""
  [ SYNSEM np_particle_ppfrom_verb ].

v_p-np-pp_in_le := v_p-np-pp_in_lexent
"""
Cmps Prtcl,NP(obl),PP(obl,in)  
<ex>B was caught up in the debate.
"""
.

v_p-np-pp_on_le := main_verb & 
"""
Cmps Prtcl,NP(obl),PP(obl,on)  
<ex>B fobbed this off on C.
"""
  [ SYNSEM np_particle_ppon_verb ].

v_p-np-pp_as_le := main_verb & 
"""
Cmps Prtcl,NP(obl),PP(obl,as)  
<ex>B singled him out as C.
"""
  [ SYNSEM np_particle_ppas_verb ].

v_np-p-np_le := v_np-p-np_lexent
"""
Cmps NP,Prtcl,NP                 
<ex>B gave C back the book.
"""
.
v_np-p-cp_idm_le := v_np-p-cp_idm_lexent
"""
Cmps NP,Prtcl,CP or VP, fin or inf, maybe only for idioms
<ex>B made up her mind that S.
<ex>B made up her mind to leave.
"""
.
v_np-p-cp_le := main_verb & 
"""
Cmps NP,Prtcl,CP or VP, fin or inf
<ex>B made up her mind that S.
<ex>B made up her mind to leave.
"""
  [ SYNSEM np_particle_cp_verb &
	   [ LOCAL.CAT.VAL.KCMP.LOCAL.CAT s_cat_unspec,
	     LKEYS [ --COMPKEY #cmin,
                     --+COMPKEY #cmin ] ] ].

v_np-p-vp_le := v_np-p-vp_lexent
"""
Cmps NP,Prtcl,VP inf
<ex>B made C out to be crazy.
"""
.
v_pp_arg_le := v_pp_arg_lexent
"""
Cmps PP, argmt coercion          
<ex>B suggested on Monday.
"""
.

v_pp_gap_le := v_pp_gap_lexent
"""
Cmps PP, obligatorily extracted
<ex>They sleep whenever they want.
"""
.
v_pp_le := v_pp_lexent
"""
Cmps PP(obl)                     
<ex>The cat felt like a dog.
"""
.
v_pp*_dir_le := v_pp*_dir_lexent
"""
Cmps PP(opt,dir)                 
<ex>B crept into the room.
"""
.
v_pp_dir_le := v_pp_dir_lexent
"""
Cmps PP(obl,dir)                 
<ex>B slipped into the room.
"""
.
v_pp_dir-noj_le := v_pp_dir-noj_lexent
"""
Cmps PP(obl,dir), no attrib adj for -ing form        
<ex>B got out of the room
<nex>the getting contestant
"""
.
v_pp*_le := v_pp*_lexent
"""
Cmps PP(opt)                     
<ex>B starred in C
"""
.
v_pp_unacc_le := v_pp_unacc_lexent
"""
Cmps PP(opt), unacc              
<ex>The seed grew into a tree.
"""
.

v_vp_ssr_le := v_vp_ssr_lexent
"""
Cmps VP(inf), s-s-rais           
<ex>There failed to be a link.
"""
.

v_vp_ssr-prp_le := v_vp_ssr-prp_lexent
"""
Cmps VP(prp), s-s-rais           
<ex>It finished raining.
"""
.

; 'have to': no imperative "*Have to leave!"
v_vp_ssr-nimp_le := v_vp_ssr-nimp_lexent
"""
Cmps VP(inf), s-s-rais, no hd_imp_c 
<ex>There tend to be problems.
"""
.

v_pp-vp_ssr_le := v_pp-vp_ssr_lexent
"""
Cmps PP(opt),VP(inf), s-s-rais   
<ex>It seems to B to be windy.
"""
.

; DPF 29-aug-07 - These verbs like "become" supposedly don't combine with
; predicative VPs, but stative passives often seem to be fine, 
; as in ; "This picture became damaged/associated with Picasso" or
; "We became inspired by the music."  Rather than adding a lexical rule to
; convert them to predicative adjs, consider a HEAD supertype of basic_adj
; and passive-verb.  FIX.

v_ap-pp_seq_le := v_ap-pp_seq_lexent
"""
Cmps AP,PP(opt), s-equi          
<ex>B sounded good to C.
"""
.

v_pp-pp_seq_le := v_pp-pp_seq_lexent
"""
Cmps PP(like),PP(opt), s-equi    
<ex>B sounded like C to D.
"""
.

v_prd-pp_seq_le := v_prd-pp_seq_lexent
"""
Cmps Pred-phr,PP(opt), s-equi    
<ex>B seemed good to C.
"""
.
; feel good about
v_ap-pp_about_le := v_ap-pp_about_lexent
"""
Cmps AP,PP(about, sel), s-equi   
<ex>B felt good about C.
"""
.

v_np-pp_to_le := v_np-pp_to_lexent
"""
Cmps NP(obl),PP(obl,to,sel)      
<ex>B attributed C to D.
"""
.
v_np-pp_to-unsp_le := main_verb & 
"""
Cmps NP(obl),PP(obl,to,sel), either Nbar or NP complement of `to'
<ex>B promoted C to president/the presidency.
"""
  [ SYNSEM empty_prep_trans_verb &
	   [ LOCAL.CAT [ VAL.COMPS < [ OPT - ], [ OPT - ] > ],
             LKEYS [ --COMPKEY #cmin,
                     --+COMPKEY #cmin,
                     --OCOMPKEY _to_p_sel_rel & #ocmin,
                     --+OCOMPKEY #ocmin ] ] ].

;; DPF 2018-12-20 - This type prevented N-V compounds as in "snow-bound" since
;; the optional selected-for PP blocks these.  So discard this type, and unfold
;; its instances into two types v_np-pp_to_le and v_np_le.
;;

v_np-pp*_to_le := main_verb & 
"""
Cmps NP(obl),PP(opt,to,sel)      
<ex>B converted C to D.
"""
  [ SYNSEM empty_to_trans_verb &
	   [ LOCAL.CAT [ VAL.COMPS < [ OPT - ], [ OPT + ] > ],
             LKEYS [ --COMPKEY #cmin,
                     --+COMPKEY #cmin ] ] ].


v_np*-pp_to_le := v_np*-pp_to_lexent
"""
Cmps NP(opt),PP(obl,to,sel)      
<ex>B added C to D.
"""
.
v_np*-pp*_to_le := v_np*-pp*_to_lexent
"""
Cmps NP(opt),PP(opt,to,sel)      
<ex>B explained C to D.
"""
.
v_-_unacc_le := v_-_unacc_lexent
"""
No cmps, unaccusative            
<ex>The plate gleamed.
"""
.

v_-_le := v_-_lexent
"""
No cmps, unergative              
<ex>B arose.
"""
.

v_-_imp_le := v_-_imp_lexent
"""
No cmps, unergative, hd_imp_c only  
<ex>Begone!
"""
.

v_-_bse_le := v_-_bse_lexent
"""
No cmps, base form only          
<ex>That will do.
"""
.

v_np_poss_le := v_np_poss_lexent
"""
Cmps NP, only have               
<ex>B has C.
"""
.

v_np_poss-cx_le := main_verb & 
"""
Cmps NP, only contracted have (no extraction)
<ex>B has C.
"""
  [ SYNSEM poss_verb &
	   [ LOCAL [ CAT [ HEAD.TAM.TENSE present,
			   VAL.COMPS < canonical_synsem > ],
		     AGR.PNG.PN -3s ] ] ].

;; DPF 19-feb-10 - Prevent "got there" via COMPS..NORM no_rel.
;; DPF 07-apr-10 - No longer remember why we have this, given the ordinary
;; NP-complement get_v2.  It does not appear in any of the treebanked data,
;; so let's try living without it, to avoid spurious ambiguity for e.g.
;; "he has got cats"

v_np_got_le := norm_nonconj_word &
"""
Cmps NP, only got                
<ex>B got C.
"""
  [ SYNSEM poss_got_verb ].
			  
v_cp_rkey-bse_le := v_cp_rkey-bse_lexent
"""
Cmps S, embedded subj tag, base  
<ex>I'll suppose C can, can he
"""
.

v_cp_rkey-3sg_le := v_cp_prop_raise_key_lexent &
"""
Cmps S, embedded subj tag, 3sing 
<ex>B supposes C can, can't he
"""
  [ SYNSEM cp_prop_raise_key_3sg_verb ].

v_cp_rkey-n3sg_le := v_cp_rkey-n3sg_lexent
"""
Cmps S, embedded subj tag, non3s 
<ex>We suppose C can, can't he
"""
.

v_cp_rkey-pst_le := v_cp_prop_raise_key_lexent &
"""
Cmps S, embedded subj tag, past  
<ex>I supposed C is, isn't he
"""
  [ SYNSEM cp_prop_raise_key_pst_verb ].

v_cp_rkey-prp_le := v_cp_prop_raise_key_lexent &
"""
Cmps S, embedded subj tag, prp   
<ex>I'm supposing C is, is he
"""
  [ SYNSEM cp_prop_raise_key_prp_verb ].

v_cp_rkey-psp_le := v_cp_prop_raise_key_lexent &
"""
Cmps S, embedded subj tag, psp   
<ex>I've supposed C is, is he
"""
  [ SYNSEM cp_prop_raise_key_psp_verb ].

v_adv_le := v_adv_lexent
"""
Cmps Adv-phr                     
<ex>B did badly.
"""
.

v_np-adv_le := v_np-adv_lexent
"""
Cmps NP, Adv-phr                     
<ex>B put it badly.
"""
.

; 'made': "Kim made sandy arrive' but "Sandy was made TO arrive'
v_vp_sorb-psv_le := v_vp_sorb-psv_lexent
"""
Cmps VP(inf), psv, s-o-rais      
<ex>B was made to arrive.
"""
.
; 'rumored': "It was rumored that they had arrived"
v_cp_psv_le := v_cp_psv_lexent
"""
Cmps CP, psv
<ex>It was rumored that they had arrived.
"""
.

; 'faded'
v_-_psv_le := norm_basic_main_verb &
"""
No cmps, psv                     
<ex>B was faded.
"""
  [ SYNSEM passive_unerg_synsem,
    INFLECTD + ].

; 'born'
v_-_psv-prd_le := norm_basic_main_verb &
"""
No cmps, psv, predicative only
<ex>B was born.
<nex>The born child cried.
"""
  [ INFLECTD +,
    SYNSEM passive_unerg_synsem &
	   [ LOCAL.CAT.POSTHD + ],
    ALTS.ATTRJ - ].

v_-_psv-prd-spr_le := norm_basic_main_verb &
"""
No cmps, psv, predicative only, obligatory specifier
<ex>B was as known for this as for that.
"""
  [ INFLECTD +,
    SYNSEM passive_unerg_synsem &
	     [ LOCAL.CAT [ VAL.SPR.FIRST expressed_synsem,
			   POSTHD + ] ],
    ALTS.ATTRJ - ].

; 'surrounded'
v_-_psv-with_le := norm_basic_main_verb &
"""
No cmps, psv, predicative only, oblig with-PP
<ex>The city was surrounded with mountains.
"""
  [ INFLECTD +,
    SYNSEM passive_unerg_with_synsem,
    ALTS.ATTRJ - ].

;; DPF 2016-09-26 - Removed NORM norm_rel because we want 
;; *the Chicago-based team* where the n-v_j-cpd_c rule requires its second dtr
;; to be NORM no_rel.  Maybe FIX whatever that constraint was doing.
;; 
; 'faded'
v_-_psv-att_le := norm_basic_main_verb &
"""
No cmps, psv, attributive only
<ex>The flopped issue disappeared.
"""
  [ SYNSEM passive_unerg_synsem &
	   [ LOCAL.CAT [ VAL.SUBJ < canonical_synsem >,
			 POSTHD - ],
	     NONLOC.SLASH.LIST < > ],
    INFLECTD + ].

; 'horseback riding'
v_-_prp_le := norm_basic_main_verb &
"""
No cmps, prp only
<ex>B went horseback riding
"""
  [ SYNSEM unerg_prp_verb,
    INFLECTD + ].

;; 'put' - "That was well put", but block in n-v compounds like "*idea-put"
;; Also block depictives via OPT -
;;
v_-_psv-ncnh_le := v_-_psv-ncnh_lexent
"""
No cmps, psv, no n-v-ed cmpnd    
<ex>That was put clearly.
"""
.
; 'unevaluated (by Abrams)'
v_-_psv-neg_le := main_verb_newltop &
"""
No cmps, psv, neg semantics      
<ex>B was unevaluated.
"""
  [ SYNSEM passive_unerg_neg_synsem,
    INFLECTD + ].

v_np_thr-s_le := v_np_thr-s_lexent
"""
Cmps NP, expl-there subj         
<ex>There existed many dogs.
"""
.

v_np_locinv-mv_le := v_np_locinv-mv_lexent
"""
Cmps NP, loc inversion           
<ex>In the room stood a clock.
"""
.

v_np_locinv-is_le := loc_inv_be_word &
"""
Cmps NP, loc inversion, aux is   
<ex>In the room is a clock.
"""
  [ SYNSEM.LOCAL [ CAT.HEAD.TAM.TENSE present,
                   AGR.PNG.PN 3s ] ].

v_np_locinv-are_le := loc_inv_be_word &
"""
Cmps NP, loc inversion, aux are  
<ex>In the room are clocks.
"""
  [ SYNSEM.LOCAL [ CAT.HEAD.TAM.TENSE present,
                   AGR.PNG.PN 3p ] ].

v_np_locinv-was_le := loc_inv_be_word &
"""
Cmps NP, loc inversion, aux was  
<ex>In the room was a clock.
"""
  [ SYNSEM.LOCAL [ CAT.HEAD.TAM.TENSE past,
                   AGR.PNG.PN 3s ] ].

v_np_locinv-were_le := loc_inv_be_word &
"""
Cmps NP, loc inversion, aux were 
<ex>In the room were clocks.
"""
  [ SYNSEM.LOCAL [ CAT.HEAD.TAM.TENSE past,
                   AGR.PNG.PN 3p ] ].

v_np_locinv-be_le := v_np_locinv-be_lexent
"""
Cmps NP, loc inversion, aux be 
<ex>In the room will be clocks.
"""
.
;; May he always be blessed
;;
v_np-vp_imp_le := main_verb_mliszt & 
"""
Cmps NP,VP(bse), imperative only
<ex>May he always be blessed
<ex>May there be peace on earth
"""
  [ SYNSEM sorb_verb &
	   [ LOCAL.CAT.HEAD.VFORM imp_vform ] ].

;; Salutations treated as subjectless sentences
;; "Dear John"
v_np_salut_le := v_np_salut_lexent &
"""
Cmps NP(obl)                     
<ex>Dear Kim
"""
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < [ OPT - ] > ].

;; Salutations treated as subjectless sentences
;; "Sincerely Mary"
v_np*_salut_le := v_np_salut_lexent
"""
Cmps NP(opt)                     
<ex>
"""
.

;; DPF 2018-08-24 - For some reason, PET's flop will not compile this file
;; without the following 99-character line preceded by a semicolon:
;; (and similarly for auxverbs.tdl but not lextypes.tdl)
;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
