;;; -*- Mode: TDL; Package: DISCO -*-
;;;
;;;  Copyright Daniel Flickinger 1994-1999
;;;  All Rights Reserved.
;;;  No use or redistribution without permission.
;;;
;;;  letypes.tdl
;;;
;;;  Lexical entry types (yield of lextypes hierarchy)
;;;
;;;  Created by Dan Flickinger, 15-June-1996
;;;
;;;  $Id$


; In the following type names, "mv" stands for "main_verb".  Complements
; marked with "*" in the type names are optional. 

mv_atrans_le := main_verb & 
  [ SYNSEM atrans_verb ].

mv_atrans_inf_le := main_verb & 
  [ SYNSEM atrans_inf_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ] > ] ].

mv_cp_non_trans_le := main_verb & 
  [ SYNSEM cp_intrans_verb & 
            [ LOCAL.CAT.VAL.COMPS < [ OPT - ] > ] ].

mv_cp_fin_inf_non_trans_le := main_verb & 
  [ SYNSEM cp_fin_inf_intrans_verb & 
            [ LOCAL.CAT.VAL.COMPS < [ OPT - ] > ] ].

mv_cp_prop_non_trans_le := main_verb & 
  [ SYNSEM cp_prop_intrans_verb & 
            [ LOCAL.CAT.VAL.COMPS < [ OPT - ] > ] ].

mv_cp_prop*_non_trans_le := main_verb & 
  [ SYNSEM cp_prop_intrans_verb &
            [ LOCAL.CAT.VAL.COMPS < [ OPT + ] > ] ].

mv_cp_ques_non_trans_le := main_verb & 
  [ SYNSEM cp_ques_intrans_verb & 
            [ LOCAL.CAT.VAL.COMPS < [ OPT - ] > ] ].
;; inform
mv_np_trans_cp_le := main_verb & 
  [ SYNSEM np_trans_cp_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ] > ] ].
;; answer
mv_np*_trans_cp_le := main_verb & 
  [ SYNSEM np_trans_cp_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT + ], [ OPT - ] > ] ].

; ask
mv_np_trans_cp_ques_le := main_verb & 
  [ SYNSEM np_trans_cp_ques_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT + ], [ OPT - ] > ] ].

; persuade
mv_np_trans_cp_prop_le := main_verb & 
  [ SYNSEM np_trans_cp_prop_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ] > ] ].
;try
mv_subj_equi_le := main_verb & 
  [ SYNSEM subj_equi_verb &
            [ LOCAL.CAT.VAL.COMPS < [ OPT - ] > ] ].

mv_subj_equi_prd_le := main_verb_std & 
  [ SYNSEM subj_equi_prd_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ] > ] ].

; stop
mv_subj_equi_prp_le := main_verb & 
  [ SYNSEM subj_equi_prp_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ] > ] ].

mv_obj_equi_le := main_verb & 
  [ SYNSEM obj_equi_verb &
            [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ] > ] ].

mv_obj_equi_prd_le := main_verb_std & 
  [ SYNSEM obj_equi_prd_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ] > ] ].

; have x ready
mv_obj_equi_non_trans_prd_le := main_verb_std & 
  [ SYNSEM obj_equi_non_trans_prd_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ] > ] ].

; promise
mv_anom_equi_le := main_verb & 
  [ SYNSEM anom_equi_verb &
            [ LOCAL.CAT.VAL.COMPS < [ OPT + ], [ OPT - ] > ] ].

; turn out to
mv_particle_inf_le := main_verb & 
  [ SYNSEM particle_inf_verb &
            [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ] > ] ].

mv_particle_cp_le := main_verb & 
  [ SYNSEM particle_cp_verb &
            [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ] > ] ].

mv_oeq_pp_inf_le := main_verb & 
  [ SYNSEM oeq_pp_inf_verb &
            [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ] > ] ].

;; leave it to kim to arrange the meeting
mv_expl_pp_inf_oeq_le := main_verb & 
  [ SYNSEM expl_pp_inf_oeq_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ], [ OPT + ] > ] ].

;; arrange (with kim) to meet her
mv_pp_inf_seq_le := main_verb & 
  [ SYNSEM pp_inf_seq_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT + ], [ OPT - ] > ] ].

;; arrange it with kim to meet her
mv_expl_pp_inf_seq_le := main_verb & 
  [ SYNSEM expl_pp_inf_seq_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ], [ OPT - ] > ] ].

;; it seems (to kim) that sandy left
mv_expl_it_subj_le := main_verb & 
  [ SYNSEM expl_it_subj_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT + ], 
				   [ OPT -,
				     LOCAL.KEYS.MESSAGE 
					 <! prpstn_or_like_rel !> ] > ] ].

mv_expl_it_subj_like_le := main_verb & 
  [ SYNSEM expl_it_subj_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT + ], 
				   [ OPT -,
				     LOCAL.KEYS.MESSAGE 
					 <! _like_mood_rel !> ] > ] ].


; bet
mv_np_np_cp_le := main_verb & 
  [ SYNSEM np_np_cp_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT + ], [ OPT + ], [ OPT + ] > ] ].

; suggest
mv_pp_cp_le := main_verb & 
  [ SYNSEM pp_cp_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT + ], [ OPT - ] > ] ].

; explain, agree
mv_pp_cp*_le := main_verb & 
  [ SYNSEM pp_cp_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT + ], [ OPT + ] > ] ].

mv_sor_non_trans_le := main_verb & 
  [ SYNSEM sor_non_trans_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ] > ] ].

mv_sor_le := main_verb & 
  [ SYNSEM sor_verb &
            [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ] > ] ].

mv_sorb_le := main_verb & 
  [ SYNSEM sorb_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ] > ] ].

mv_ditrans_le := main_verb & 
  [ SYNSEM ditrans_verb & 
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ] > ] ].

mv_ditrans_only_le := main_verb & 
  [ SYNSEM ditrans_only_verb & 
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ] > ] ].

mv_ditrans*_only_le := main_verb & 
  [ SYNSEM ditrans_only_verb & 
	   [ LOCAL.CAT.VAL.COMPS < [ OPT + ], [ OPT + ] > ] ].

mv_ditrans_opt_le := main_verb & 
  [ SYNSEM ditrans_verb & 
	   [ LOCAL.CAT.VAL.COMPS < [ OPT + ], [ OPT + ] > ] ].

;; talk
mv_double_pp*_le := main_verb & 
  [ SYNSEM double_pp_verb & 
	   [ LOCAL.CAT.VAL.COMPS < [ OPT + ], [ OPT + ] > ] ].
mv_double_pp_le := main_verb & 
  [ SYNSEM double_pp_verb & 
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ] > ] ].
mv_empty_prep_intrans_le := main_verb & 
  [ SYNSEM empty_prep_intrans_verb & 
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ] > ] ].
mv_empty_prep*_intrans_le := main_verb & 
  [ SYNSEM empty_prep_intrans_verb & 
	   [ LOCAL.CAT.VAL.COMPS < [ OPT + ] > ] ].
mv_empty_prep_trans_le := main_verb & 
  [ SYNSEM empty_prep_trans_verb & 
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ] > ] ].
mv_empty_prep_trans*_le := main_verb & 
  [ SYNSEM empty_prep_trans_verb & 
	   [ LOCAL.CAT.VAL.COMPS < [ OPT + ], [ OPT - ] > ] ].
mv_empty_prep*_trans_le := main_verb & 
  [ SYNSEM empty_prep_trans_verb & 
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT + ] > ] ].
mv_empty_prep*_trans*_le := main_verb & 
  [ SYNSEM empty_prep_trans_verb & 
	   [ LOCAL.CAT.VAL.COMPS < [ OPT + ], [ OPT + ] > ] ].
mv_expl_prep_trans_le := main_verb & 
  [ SYNSEM expl_prep_trans_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ] > ] ].
mv_empty_prep_non_trans_le := main_verb & 
  [ SYNSEM empty_prep_non_trans_verb & 
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ] > ] ].
;; 'prefer it if ...'
mv_expl_obj_cp_le := main_verb & 
  [ SYNSEM expl_obj_cp_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ] > ] ].

mv_np*_trans_le := main_verb & 
  [ SYNSEM np_trans_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT + ] > ] ].
mv_np_trans_le := main_verb & 
  [ SYNSEM np_trans_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ] > ] ].
;; ask about
mv_np*_prep_trans_le := main_verb & 
  [ SYNSEM prep_trans_verb & 
	   [ LOCAL.CAT.VAL.COMPS < [ OPT + ], [ OPT - ] > ] ].
;; choose
mv_np*_prep*_trans_le := main_verb_std & 
  [ SYNSEM prep_trans_verb & 
	   [ LOCAL.CAT.VAL.COMPS < [ OPT + ], [ OPT + ] > ] ].
mv_np_comp_le := main_verb & 
  [ SYNSEM np_comp_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ] > ] ].
mv_np_non_trans_le := main_verb & 
  [ SYNSEM np_non_trans_verb & 
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ] > ] ].
mv_np*_non_trans_le := main_verb & 
  [ SYNSEM np_non_trans_verb & 
	   [ LOCAL.CAT.VAL.COMPS < [ OPT + ] > ] ].
; take place
mv_np_non_trans_unacc_le := main_verb & 
  [ SYNSEM np_non_trans_unacc_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ] > ] ].
mv_np_obj_comp_le := main_verb & 
  [ SYNSEM np_comp_obj_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ] > ] ].
mv_particle_le := main_verb & 
  [ SYNSEM particle_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ] > ] ].
mv_particle_np_le := main_verb & 
  [ SYNSEM particle_np_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ] > ] ].
mv_prep_particle_np_le := main_verb & 
  [ SYNSEM prep_particle_np_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ] > ] ].
mv_np_particle_le := main_verb & 
  [ SYNSEM np_particle_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ] > ] ].
mv_np_prep_particle_only_le := main_verb & 
  [ SYNSEM np_prep_particle_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ] > ] ].
mv_particle_prd_le := main_verb_std & 
  [ SYNSEM particle_prd_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ] > ] ].
mv_particle_pp_le := main_verb & 
  [ SYNSEM particle_pp_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ] > ] ].
mv_particle_pp*_le := main_verb & 
  [ SYNSEM particle_pp_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT + ] > ] ].
mv_particle_np_pp_to_le := main_verb & 
  [ SYNSEM particle_np_pp_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ], 
				       [ OPT +, 
					 LOCAL.KEYS.KEY _to_rel_s ] > ] ].
mv_prep_intrans_event_le := main_verb_std & 
  [ SYNSEM prep_intrans_event_verb & 
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ] > ] ].
mv_prep_intrans_le := main_verb_std & 
  [ SYNSEM prep_intrans_verb & 
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ] > ] ].
mv_prep*_intrans_le := main_verb_std & 
  [ SYNSEM prep_intrans_verb & 
	   [ LOCAL.CAT.VAL.COMPS < [ OPT + ] > ] ].
mv_prep_intrans_unacc_le := main_verb_std & 
  [ SYNSEM prep_intrans_unacc_verb & 
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ] > ] ].
mv_prep*_intrans_unacc_le := main_verb_std & 
  [ SYNSEM prep_intrans_unacc_verb & 
	   [ LOCAL.CAT.VAL.COMPS < [ OPT + ] > ] ].
mv_prep_trans_le := main_verb_std & 
  [ SYNSEM prep_trans_verb & 
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ] > ] ].
mv_prep*_trans_le := main_verb_std & 
  [ SYNSEM prep_trans_verb & 
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT + ] > ] ].
mv_ssr_le := main_verb & 
  [ SYNSEM ssr_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ] > ] ].
mv_prd_ssr_le := main_verb_std & 
  [ SYNSEM ssr_prd_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ] > ] ].
mv_pp_inf_ssr_le := main_verb & 
  [ SYNSEM ssr_pp_inf_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT + ], [ OPT - ] > ] ].
mv_prdp_pp_ssr_le := main_verb_std & 
  [ SYNSEM ssr_prdp_pp_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT + ] > ] ].
mv_to_trans_le := main_verb & 
  [ SYNSEM to_trans_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT - ] > ] ].
mv_to*_trans_le := main_verb & 
  [ SYNSEM to_trans_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ], [ OPT + ] > ] ].
mv_to*_trans*_le := main_verb & 
  [ SYNSEM to_trans_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT + ], [ OPT + ] > ] ].
mv_unacc_le := main_verb & 
  [ SYNSEM unacc_verb ].
mv_unerg_le := main_verb & 
  [ SYNSEM unerg_verb ].
mv_poss_le := main_verb & 
  [ SYNSEM poss_verb & 
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ] > ] ].

mv_poss_got_le := amalg_word & 
  [ SYNSEM poss_verb & 
	   [ LOCAL non_fin_verb &
	         [ CAT [ HEAD [ VFORM psp,
				PRD -,
				MOD < > ],
			 VAL.COMPS < [ OPT - ] > ],
		   CONT.LISZT <! #key !>,
		   KEYS.KEY #key ] ] ].
			  
mv_poss_got_prd_le := amalg_word & 
  [ SYNSEM obj_equi_non_trans_prd_verb &
	   [ LOCAL non_fin_verb &
	         [ CAT [ HEAD [ VFORM psp,
				PRD -,
				MOD < > ],
			 VAL.COMPS < [ OPT - ], [ OPT - ] > ],
		   CONT.LISZT.LIST.FIRST #key,
		   KEYS.KEY #key ] ] ].

mv_cp_prop_raise_key_le := main_verb_sans_key & 
  [ SYNSEM cp_prop_raise_key_verb & 
            [ LOCAL.CAT.VAL.COMPS < [ OPT - ] > ] ].
mv_adv_le := main_verb_sans_key & 
  [ SYNSEM adv_verb &
	   [ LOCAL.CAT.VAL.COMPS < [ OPT - ] > ] ].

;;; non_affix_bearing &

mv_sorb_pass_le := main_verb_sans_key & 
  [ SYNSEM sor_verb &
            [ LOCAL [ CAT [ HEAD [ VFORM psp_irreg,
				   PRD - ],
			    VAL [ SUBJ < [ OPT - ] >,
				  COMPS < [ OPT - ], ... > ] ],
		      CONT psoa & [ INDEX #event,
				    LISZT <! #key !> ],
		      KEYS.KEY #key &
			  [ EVENT #event ] ] ] ].

#|

mv_unerg_nale := main_verb & 
  [ INFLECTED +,
    SYNSEM unerg_verb ] .

mv_np_trans_nale := main_verb & 
  [ INFLECTED +,
    SYNSEM np_trans_verb &
	   [ LOCAL [ CAT.VAL.COMPS < [ OPT - ] > ] ] ].

intr_noun_word_nale := intr_noun_word & 
  [ INFLECTED + ].

proper_nale := proper_name_sg & 
  [ INFLECTED + ].

intrans_adj_nale := reg_intrans_adj & 
  [ INFLECTED + ].

adv_word_nale := adverb_word & 
  [ INFLECTED + ].

|#
