;;; -*- Mode: TDL; Package: DISCO -*-
;;;
;;;  english.tdl
;;;
;;;  Top-level load file for English grammar
;;;
;;;  File created: 3-Nov-94 by Rob Malouf
;;;                CSLI, Stanford University
;;;  Last revised: Dan Flickinger, 20-Oct-97
;;;
;;;  $Id$

;;;  To load the English grammar, type the following at the PAGE prompt, where
;;;  <grammardir> is the path to the directory where your grammar files are:
;;;
;;;        load-grammar "<grammardir>/english" "tuneup"

:end!.
					
:leval (progn
	 (pushnew :page *features*)
	 (setq user::*unifier* :csli)	; Use CSLI unifier.
	 (setq pg::*lexical-sources*	; Get offline entries for GDBM file
	   (list (make-instance 'pg::tdl-lex)))
	 (setq fed::*def-filename* main::tmp-dir)).

:leval (setf tdl::*tdl-built-ins-file* 
	(dir-and-name tdl::*source-grammar* "tdl-built-ins" "tdl")).
:leval (let ((version (dir-and-name tdl::*source-grammar* "Version" "lisp")))
         (when (probe-file version) (load version))).
:leval (setq *data-dir* (dir-append tdl::*source-grammar* "data/")).

:leval (progn
	 (setq tdl::*simplify-fs-p* nil)
	 (setq tdl::*simplify-type-p* t)
	 (setq tdl::*simplify-instance-p* nil)
	 (setq main::*print-without-toplevel-fails* nil)
	 (setq lex::*normalize-unification-flag* nil)
	 (setq tdl::*and-open-world-reasoning-p*  nil)
	 (setq tdl::*ignore-errors-p* nil)
	 (setq tdl::*pprint-lists* t)
	 (setq unify::*verbose-warnings* nil)).

:leval (setf main::*scanner* main::*eng-scanner*)

;;; Set up English morphology

:leval (setf main::*morphology* main::*english-morphology*).
:leval (progn
	 (setq lex::*stem-path* '(disco::stem disco::first))
	 (setq lex::*form-into* 'disco::form)
	 (setq lex::%klaus-oude-grammar% nil)
	 (setq pg::*legal-combinations*
	   '((:rule :rule :lex-rule :c-lex-entry :lex-entry)
	     (:lex-rule :lex-entry :c-lex-entry :lex-rule)
	     (:c-lex-entry :morph)
	     (:lex-entry :morph)))
	 (setq lex::*affix-into* 'disco::affix)).

;;; Set MRS globals

:leval (progn
        (load-system "mrs2vit-eng")
	(load (dir-and-name *source-grammar* "mrsglobals-eng"))
	(main::tree-draw :on)
	(setf main::*ascii-trees* t)
	(setf main::*mrs-output-p* t)
	(setf main::*vm-arg-roles-only-p* t)
	(setf mrs::*raw-mrs-output-p* nil)
	(setf mrs::*mrs-to-vit* nil)
	).

; Optionally load MRS-to-VIT conversion code
:leval (progn
	(in-package :cl-user)
	(setf mrs::*ordered-mrs-rule-list* nil) 
	(with-open-file (istream (dir-and-name *data-dir* "raw1.rules")
			 :direction :input)
	 (loop (let ((rule (read istream nil nil)))
		(unless rule (return))
		(push rule mrs::*ordered-mrs-rule-list*))))
	(setf mrs::*ordered-mrs-rule-list* 
	 (nreverse mrs::*ordered-mrs-rule-list*))
	(load (dir-and-name *data-dir* "page-db-eng.lisp"))
	(setq mrs::%vit-indent% ",~%    ")
	(setq mrs::*mrs-to-vit* nil)
	).

;;; Load patches

:leval (setq *patches-dir* 
	(dir-append tdl::*source-grammar* "patches/")).
:leval (progn
	(excl:compile-file-if-needed (dir-and-name *patches-dir* "patches"))
	(load (dir-and-name *patches-dir* "patches"))
	).

;;
;;  Basic definitions and macros
;;

:deldomain :disco :errorp nil.
:defdomain :disco :errorp nil.
:begin :domain :disco.


:include "fundamentals".
:include "templates".

;;
;;  Lexical types (i.e., primitive word classes)
;;

:include "lextypes".

;;
;;  Syntactic rules
;;

:include "syntax".

;;
;;  Lexical rules
;;

:include "lexrules".

;;
;; Definitions for parse-tree labels
;;

:include "parse-nodes".

;;
;; Instances of grammar rules and lexical rules
;;

:include "constructions".
:include "roots".
:include "lexrinst".

;;
;; Expand all instances except for lexical entries, which are expanded on 
;; the fly at parse time
;;

:expand-all-instances.

;;;
;;; For drawing parse trees, accumulate list of parse nodes, and set 
;;; meta symbols
;;;

:leval (setf trees::*label-names* 
   '("CONJ" "S" "S-R" "ADV" "ADV-R" "ADV-D" "P-N" "P-I" "P-S" "PP-N" "PP-I" 
     "PP-S" 
;"N-C" 
     "N" "NP" "ADJ" "VPP" "VP" "V" "DET" "COMP" "NEG" "XP" "B")
;'("CONJ" "ADV" "PP" "NP" "ADJ" "VP" "V" "S" "P" "DET" "N" "COMP" "NEG" "XP" "B")
   trees::*node-labels* (trees::ordered-label-list)
   trees::*meta-symbols* (trees::get-instances :meta) foo nil).

;;
;;  Lexical entry types
;;

:include "letypes".
:include "multiletypes".
:include "auxverbs".


; Load file of irregular morphology forms

:leval (csli::cache-irregular-spellings 
	(with-open-file 
	 (istream (dir-and-name tdl::*source-grammar* "irregs.tab") 
	  :direction :input) (read istream))).


