;;; -*- Mode: TDL; Package: DISCO -*-
;;;
;;;  english.tdl
;;;
;;;  Top-level load file for English grammar
;;;
;;;  File created: 3-Nov-94 by Rob Malouf
;;;                CSLI, Stanford University
;;;  Last revised: Dan Flickinger, 15-Sept-97
;;;
;;;  $Id$

;;;  To load the English grammar, type the following at the PAGE prompt, where
;;;  <grammardir> is the path to the directory where your grammar files are:
;;;
;;;        load-grammar "<grammardir>/english" "tuneup"

:end!.

:set-switch tdl::*source-grammar* "~/grammar/".
:leval (setf main::*pagelite* t).

:leval (when (and main::*pagelite*
	      (not (find-package "CSLI-UNIFY")))
	(load (concatenate 'string tdl::*source-grammar* 
	       "cslipage/load-csli"))).

:leval (setf main::tmp-dir "~/tmp/").
:leval (setf fed::*def-filename* main::tmp-dir).
:leval (progn (in-package "DISCO") (shadowing-import '(tdl::message))).
:leval (setf tdl::*tdl-built-ins-file* 
	(concatenate 'string tdl::*source-grammar* 
	 "tdl-built-ins.tdl")).

:deldomain :disco :errorp nil.
:defdomain :disco :errorp nil.
:begin :domain :disco.

:leval (setf disco::*grammar-version* "4712").
:set-switch tdl::*simplify-fs-p* nil.
:set-switch tdl::*simplify-type-p* t.
:set-switch tdl::*simplify-instance-p* nil.

:leval (setf main::*print-without-toplevel-fails* nil).
:leval (setf lex::*normalize-unification-flag* nil).

:leval (unless main::*pagelite* (setf pg::*prune-fs* t)).
:leval (unless main::*pagelite*
	(load (concatenate 'string disco::*source-grammar* 
	       "cslipage/util/simple-lisp-scanner")) 
	(setf main::*scanner* main::*disco-scanner*)).

:leval (setf lex::*stem-path* (quote (stem))).
:leval (setf lex::%klaus-oude-grammar% nil).
:leval (setf pg::*legal-combinations*
        '((:rule :rule :lex-rule :c-lex-entry :lex-entry)
	  (:lex-rule :lex-entry :c-lex-entry :lex-rule)
	  (:c-lex-entry :morph)
	  (:lex-entry :morph))).
:leval (setf lex::*affix-into* "AFFIX")

:leval (setf tdl::*and-open-world-reasoning-p*  nil).
:leval (setf tdl::*ignore-errors-p* nil).
:leval (setf tdl::*pprint-lists* t).
:leval (setf unify::*verbose-warnings* nil).

:leval (setf main::*trees-output-p* nil).
:leval (setf main::*mrs-output-p* nil).
:leval (setf main::*use-large-lexicon* nil).

:leval (setf main::*tuneup-dir* disco::*source-grammar*)
:leval (setf user::*mrs2vit-path* 
	(concatenate 'string disco::*source-grammar* "cslipage/mrs/")).
:leval (setf lexicon::*result-rest* nil).

;; Load trees, mrs, old patches, and unifier patches for standard PAGE
:leval (unless main::*pagelite*
	(unless (find-package "CSLI-UNIFY") 
	 (defpackage "CSLI-UNIFY" (:export "PRINT-IN-FED")))
	(load (concatenate 'string disco::*source-grammar* 
	       "cslipage/util/csli-package"))
	(load (concatenate 'string disco::*source-grammar* 
	       "cslipage/util/mrspackage-aux.ofasl"))
	(load (concatenate 'string disco::*source-grammar* 
	       "cslipage/mrs/load-mrs2vit-eng"))
	(load (concatenate 'string disco::*source-grammar* 
	       "cslipage/trees/trees.system"))
	(load (concatenate 'string disco::*source-grammar* 
	       "cslipage/patches/oldpatches"))
	(load (concatenate 'string disco::*source-grammar* 
	       "cslipage/patches/new-upatches"))).

;; Load MRS patches
:leval (when main::*pagelite*
	(load (concatenate 'string disco::*source-grammar* 
	       "cslipage/mrs/load-mrs2vit-eng"))).
:leval (if main::*pagelite*
	(load (concatenate 'string disco::*source-grammar* 
	       "cslipage/patches/mrspatches"))
	(load (concatenate 'string disco::*source-grammar* 
	       "cslipage/patches/mrspatches.ofasl"))).
:leval (when main::*pagelite*
	(load (concatenate 'string disco::*source-grammar* 
	       "cslipage/util/mrspackage-aux"))
	(load (concatenate 'string disco::*source-grammar* 
	       "cslipage/patches/mrspatches-lite"))).

;; Load general patches
:leval (load (concatenate 'string disco::*source-grammar* 
                          "cslipage/patches/patches")).

;; Load TSDB code
:leval (load (concatenate 'string disco::*source-grammar* 
                          "tsdb/src/load-tsdb")).

;; Set MRS globals
:leval (setf mrs::*mrs-to-vit* nil).
:leval (setf main::*VM-arg-roles-only-p* nil).
:leval (setf mrs::*raw-mrs-output-p* nil).
:leval (setf mrs::%vit-indent% ",~%    ").
:leval (when mrs::*mrs-to-vit*
	(load (concatenate 'string disco::*source-grammar*
	       "cslipage/patches/db-eng"))
	(load (concatenate 'string disco::*source-grammar*
	      "cslipage/patches/mrsglobals-eng"))).

;;
;;  Load morphology code
;;
:leval (unless main::*pagelite*
	(load (concatenate 'string disco::*source-grammar* 
	       "cslipage/util/english-morphology"))
	(load (concatenate 'string disco::*source-grammar* 
	       "cslipage/util/call-english-morphology"))
	(setf main::*morphology* main::*english-morphology*)
	(load (concatenate 'string disco::*source-grammar* 
	       "cslipage/util/expand-le"))).

:leval (csli::cache-irregular-spellings).

;;
;;  Basic definitions and macros
;;

:include "fundamentals".

;;
;;  Lexical types (i.e., primitive word classes)
;;

:include "lextypes".

;;
;;  Syntactic rules
;;

:include "syntax".

;;
;;  Lexical rules
;;

:include "lexrules".

;;
;; Definitions for parse-tree labels
;;

:include "parse-nodes".

;;
;; Expand all instances except for lexical entries, which are expanded on 
;; the fly at parse time
;;

:expand-all-instances.

;;;
;;; For drawing parse trees, accumulate list of parse nodes, and set 
;;; meta symbols
;;;

:leval (setf trees::*node-labels* (trees::ordered-label-list) foo nil).
:leval (setf trees::*meta-symbols* (trees::get-instances :meta) foo nil).

;;
;;  Lexical entry types
;;

:include "letypes".
:include "auxverbs".


:leval (load "~/grammar/cslipage/util/comlex").
