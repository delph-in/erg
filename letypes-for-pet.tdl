;;; -*- Mode: tdl; Coding: utf-8; -*-
;;;
;;;  Copyright (c) 1994-2018
;;;    Dan Flickinger, Rob Malouf, Emily M. Bender
;;;    see LICENSE for conditions
;;;
;;;  letypes.tdl
;;;
;;;  Lexical entry types (yield of lextypes hierarchy)
;;;
;;;  Created by Dan Flickinger, 15-June-1996
;;;
;;;  $Id: letypes.tdl 7479 2010-02-21 23:11:30Z danf $


; In the following type names, complements marked with "*" in the type names 
; are optional. 

v_-_it_le := v_-_it_lexent

.

v_vp_it_le := main_verb & 

  [ SYNSEM atrans_inf_verb & 
	   [ LOCAL.CAT [ VAL.COMPS < [ OPT - ] > ] ] ].

v_np_it_le := v_np_it_lexent

.

v_cp_le := v_cp_lexent

.

v_cp_comp_le := v_cp_comp_lexent


.
;; DPF 2022-06-24 - Not used, so comment out.  Now have separate type for
;; question-CP complement.
#|
v_cp_fin-inf_le := main_verb & 

  [ SYNSEM cp_fin_inf_intrans_verb ].
|#

v_cp_fin-inf-q_le := v_cp_fin-inf-q_lexent

.

v_cp_fin-inf-q-mob_le := v_cp_fin-inf-q-mob_lexent

.

v_cp_fin-inf-q-mc_le := v_cp_fin-inf-q-mc_lexent

.

;; DPF 2018-04-29 - Prevent these from undergoing the  CP-frag lexical rule,
;; to avoid apparently spurious ambiguity.
;;
v_cp_prop_le := v_cp_prop_lexent

.

v_cp_no-inv_le := v_cp_no-inv_lexent

.

v_cp_nfin_le := v_cp_nfin_lexent

.

; "find": "I find that Kim has left" but "*I find Kim has left"
v_cp_comp-prop_le := main_verb & 

  [ SYNSEM cp_only_prop_intrans_verb ].

; look/seem like
v_cp_like_le := v_cp_like_lexent

.

;; inform
v_np-cp_le := v_np-cp_lexent

.
;; DPF 2016-08-26 - This type is subsumed by the more general 
;; v_cp_fin-inf-q-mc_le which also admits *we asked them what to do*
;; DPF 2017-10-07 - Well, no.  This type takes two complements, an NP and a CP,
;; while v_cp_fin-inf-q-mc_le only takes one complement, a CP.  Sigh.
;; DPF 2020-04-21 - Block cp-frag lexical rule, since it ignores whether the
;; first (NP) complement is obligatory.
;;
; ask, [MC -] CP complement, embedded yes/no question
v_np-cp_q_le := v_np-cp_q_lexent

.
; ask, [MC +] CP complement
v_np-cp_q-mc_le := v_np-cp_q-mc_lexent

.
; persuade
v_np-cp_prop_le := v_np-cp_prop_lexent

.
; tell: tell me that they won
v_np-cp_fin-inf_le := v_np-cp_fin-inf_lexent

.
; question
v_np-cp_fin-inf-q_le := v_np-cp_fin-inf-q_lexent

.
; ask, prefer 'ask that he be released'
v_cp_sbjnct_le := v_cp_sbjnct_lexent

.

;; Hack for Sherlock, archaic English
; remark 'That be the house, he remarked'
v_cp_sbjnct-xtr_le := v_cp_sbjnct-xtr_lexent

.

; ask, prefer 'ask that he be released'
v_cp_sbjnct-fin_le := v_cp_sbjnct-fin_lexent

.

; wait
v_cp_inf-only_le := v_cp_inf-only_lexent

.

; try
v_vp_seq_le := v_vp_seq_lexent

.
; refrain from
v_vp_seq-from_le := v_vp_seq-from_lexent

.

v_prd_seq_le := v_prd_seq_lexent

.

v_prd_seq-idm_le := v_prd_seq-idm_lexent

.
v_prd_seq-va_le := v_prd_seq-va_lexent

.

; run low (on X)
v_ap_seq_le := v_ap_seq_lexent

.

; want into
v_pp_seq_le := v_pp_seq_lexent

.

v_pp_seq-e_le := v_pp_seq-e_lexent

.

; stop working
; go shopping
v_vp_seq-prp_le := v_vp_seq-prp_lexent

.

; help
v_vp_seq-bse_le := v_vp_seq-bse_lexent

.

; 'I will go read', 'Go read' '*He went read'
v_vp_seq-go_le := v_vp_seq-go_lexent

.

; 'We needn't stay' but "*He needs not stay", "*We will need not stay"
; cf. "He needn't stay" (irreg)
v_vp_ssr-n3sg_le := v_vp_ssr-n3sg_lexent

.

; "need not"
v_vp_ssr-n3sg-r_le := v_vp_ssr-n3sg-r_lexent

.
; have yet to
v_p-vp_ssr_le := v_p-vp_ssr_lexent

.
; they try and find it
v_vp_seq-and_le := v_vp_seq-and_lexent

.

; he will try and find it
v_vp_seq-and-bse_le := v_vp_seq-and-bse_lexent

.

; couldn't help but notice
v_vp_seq-but_le := v_vp_seq-but_lexent

.

v_np-vp_oeq_le := v_np-vp_oeq_lexent

.

v_np-vp_oeq-ntr_le := v_np-vp_oeq-ntr_lexent

.

; help
v_np-vp_oeq-bse_le := v_np-vp_oeq-bse_lexent

.

v_np-vp_oeq-psv_le := v_np-vp_oeq-psv_lexent

.

v_np-prd_oeq_le := v_np-prd_oeq_lexent

.

v_np-ap_oeq_le := v_np-ap_oeq_lexent

.

; have x ready
; have x in stock
; I want x confirmed
; get x ready
v_np-prd_oeq-ntr_le := v_np-prd_oeq-ntr_lexent

.
; I have X to get rid of
v_np-vpslnp_oeq_le := v_np-vpslnp_oeq_lexent

.
; prevent X from Ving
v_np-vp_oeq-from_le := v_np-vp_oeq-from_lexent

.

; promise
v_np-vp_aeq-ntr_le := v_np-vp_aeq-ntr_lexent

.
; use X to do Y
v_np-vp_aeq_le := v_np-vp_aeq_lexent

.

; ask X to be allowed to Y
v_np-vp_aeq-psv_le := v_np-vp_aeq-psv_lexent

.

; kim took too long to arrive
v_np-vp_aeq-noel_le := v_np-vp_aeq-noel_lexent

.

; have trouble sleeping
v_np-vp_aeq-prp_le := v_np-vp_aeq-prp_lexent

.

; turn out to
v_p-vp_seq_le := v_p-vp_seq_lexent

.
; keep on driving
v_p-vp_prp_le := v_p-vp_prp_lexent

.
v_p-cp_le := v_p-cp_lexent

.
v_p-pp*-cp_le := main_verb & 

  [ SYNSEM particle_pp_cp_verb &
	   [ LKEYS [ --COMPKEY #cmin,
                      --+COMPKEY #cmin ] ] ].

v_p-vp_oeq_le := v_p-vp_oeq_lexent

.
v_pp-vp_oeq_le := v_pp-vp_oeq_lexent

.
v_pp-vp_oeq-bse_le := v_pp-vp_oeq-bse_lexent

.
v_pp*-vp_oeq_le := v_pp*-vp_oeq_lexent

.
;; leave it to kim to arrange the meeting
v_it-pp-vp_oeq_le := v_it-pp-vp_oeq_lexent

.

;; consider it a privilege to hire D
v_it-np-vp_aeq_le := v_it-np-vp_aeq_lexent

.

;; arrange (with kim) to meet her
v_pp-vp_seq_le := v_pp-vp_seq_lexent

.
;; arrange it with kim to meet her
v_it-pp-vp_seq_le := v_it-pp-vp_seq_lexent

.

;; *it bothers kim that sally left*; and by lex rule: *it bothers kim to go*
v_np-cp_it-s_le := v_np-cp_it-s_lexent

.

; ticks NP off that S
v_np-p-cp_it-s_le := v_np-p-cp_it-s_lexent

.
;; That Kim lost suggests that Sandy won. 
;; It suggests that Sandy won that Kim lost.
v_cp-cp_it-s_le := v_cp-cp_it-s_lexent

.

; cost
v_np-np-cp_it-s_le := v_np-np-cp_it-s_lexent

.

; make (?)
v_np-np-cp_it-ob_le := v_np-np-cp_it-ob_lexent

.

; matter
v_np-pp*-cp_it-s_le := v_np-pp*-cp_it-s_lexent

.

; take: 'took him ten minutes to leave'
v_np*-np-vp_it-s_le := v_np*-np-vp_it-s_lexent

.
; take: 'took (him) until Friday to leave'
v_np*-pp-cp_it-s-inf_le := v_np*-pp-cp_it-s-inf_lexent

.
; 'it advances our cause (a lot) to take this step"
; "it will cost us (a lot) to win"
v_np-np*-vp_it-s_le := v_np-np*-vp_it-s_lexent

.
; call
v_it-pp-cp_le := v_it-pp-cp_lexent

.

; cost/take
v_np-np-vpslnp_tgh_le := v_np-np-vpslnp_tgh_lexent

.

; make (only)
v_np-prd-cp_it-s_le := v_np-prd-cp_it-s_lexent

.

;; it seems (to kim) that sandy left
v_pp*-cp_it-s_le := v_pp*-cp_it-s_lexent

.

;; it occurred *(to me) that Sandy left
v_pp-cp_it-s_le := v_pp-cp_it-s_lexent

.
;; it looks (to kim) like Sandy left
v_pp*-cp_like_le := v_pp*-cp_like_lexent

.

;; It doesn't matter who stays
v_pp*-cp_it-unsp_le := v_pp*-cp_it-unsp_lexent

.

;; It dawned on Kim that ...
v_pp-cp_it-s-e_le := v_pp-cp_it-s-e_lexent

.

; it turns out that kim arrived
v_p-cp_it-s_le := v_p-cp_it-s_lexent

.

; It follows that ...
v_cp_it-s_le := v_cp_it-s_lexent

.

; it would help/wouldn't hurt to know ...
v_vp_it-s_le := v_vp_it-s_lexent

.

; bet
v_np-np-cp_le := v_np-np-cp_lexent

.

; report to
v_pp*-cp_le := v_pp*-cp_lexent

.
; say of NP that S
v_pp-cp_le := v_pp-cp_lexent

.
; say to
v_pp*-cp_fin-imp_le := v_pp*-cp_fin-imp_lexent

.
; predict
v_pp*-cp_unsp_le := v_pp*-cp_unsp_lexent

.

v_pp*-cp_fin_le := v_pp*-cp_fin_lexent

.
v_pp-cp_fin_le := v_pp-cp_fin_lexent

.
v_pp*-cp_inf_le := v_pp*-cp_inf_lexent

.
; 'see to it that X'
v_pp-it-cp_le := v_pp-it-cp_lexent

.

; would like
v_np-vp_sor-ntr_le := v_np-vp_sor-ntr_lexent

.

v_np-vp_sor_le := v_np-vp_sor_lexent

.

v_np-vp_bse_le := v_np-vp_bse_lexent

.

; make: 'kim made it clear that sandy arrived'
v_np-prd_sor_le := v_np-prd_sor_lexent

.

v_np-np_le := v_np-np_lexent

.
; 'leave (bequeath)'
v_np-np*_le := v_np-np*_lexent

.
v_np*-np_le := v_np*-np_lexent

.
v_np-np_only_le := v_np-np_only_lexent

.
v_np*-np*_only_le := v_np*-np*_only_lexent

.
v_np-np_idm_le := v_np-np_idm_lexent

.
;; talk
v_pp*-pp*_le := v_pp*-pp*_lexent

.
v_pp-pp_le := v_pp-pp_lexent

.
v_pp-pp_e_le := v_pp-pp_e_lexent

.
v_np*-pp*-ppto_le := v_np*-pp*-ppto_lexent

.
v_np-pp*-ppto_le := v_np-pp*-ppto_lexent

.
v_np-pp*-ppfor_le := v_np-pp*-ppfor_lexent

.

v_pp_e_le := v_pp_e_lexent

.
v_pp_e3_le := main_verb & 

  [ SYNSEM empty_prep_intrans_arg3_verb & 
	   [ LOCAL.CAT [ VAL.COMPS < [ OPT - ] > ],
             LKEYS [ --COMPKEY #cmin,
                     --+COMPKEY #cmin ] ] ].

v_pp_refl-idm_le := v_pp_refl-idm_lexent

.
v_np-pp_e_le := v_np-pp_e_lexent

.
v_np*-pp_e_le := v_np*-pp_e_lexent

.
v_np-pp*_e-imp_le := v_np-pp*_e-imp_lexent

.
; take Kim for granted
v_np-pp_e-idm_le := v_np-pp_e-idm_lexent

.
v_np-pp_e-refl-idm_le := v_np-pp_e-refl-idm_lexent

.
v_np-pp_e-refl2-idm_le := v_np-pp_e-refl2-idm_lexent

.
; came into being
v_pp_e-idm_le := main_verb & 

  [ SYNSEM empty_prep_intrans_verb & 
	   [ LKEYS [ --COMPKEY #cmin,
                     --+COMPKEY #cmin ] ],
    IDIOM + ].

; 'interest kim in'
v_np-pp_e-ntr_le := v_np-pp_e-ntr_lexent

.

;; 'prefer it if ...'
v_it-cp_le := v_it-cp_lexent

.

;; 'hate it that ...'
v_it-cp_prop-c_le := v_it-cp_prop-c_lexent

.

;; 'take it (that) ...'
v_it-cp_prop_le := v_it-cp_prop_lexent

.

#|
; 'make it clear that ...'
v_it-prd_le := v_it-prd_lexent

.
|#

v_np_le := v_np_lexent

.
v_np*_le := v_np*_lexent

.

;; DPF 2017-04-27 - No longer see why we would restrict these verbs (often
;; alternating with inchoatives) to exclude gerund complements, since we
;; need them for e.g. *they increased spending*.  So changed [HEAD basic_noun]
;; to supnoun on complement.
;; DPF 2020-05-14 - Perhaps a confusion about the name: noger here means the
;; verb itself does not undergo the (nominal) gerund lexical rule.  But we do
;; need a lexical verb type that excludes gerund complements, as for *seem*
;; in *He seemed arriving*, and does not passivize.
;;
v_np_noger_le := v_np_noger_lexent

.
v_np*_noger_le := v_np*_noger_lexent

.
v_np_do-be_le := basic_main_verb_sans_key &

  [ SYNSEM do_be_verb &
	   [ LOCAL.CAT.HEAD [ VFORM non_prespart,
			      INV - ],
	     LKEYS.KEYREL.ARG2.IFORM non_prespart ],
    INFLECTD - ].


v_np_do-ing-be_le := basic_main_verb_sans_key &

  [ INFLECTD -,
    SYNSEM do_be_verb &
	   [ LOCAL.CAT.HEAD [ VFORM prp,
			      INV - ],
	     LKEYS.KEYREL.ARG2.IFORM prp ] ].

v_np_done-be_le := basic_main_verb_sans_key &

  [ SYNSEM do_be_verb_passive &
	   [ LOCAL.CAT.HEAD.INV -,
	     LKEYS.KEYREL.ARG2.IFORM non_prespart ],
    INFLECTD + ].

;; DPF 2022-05-30 - Changed the only instance "beware" to be of type
;; v_np*_n3s-bse_le, since non-finite was the wrong constraint for a verb that
;; can be imperative or a complement of modals.
#|
v_np*_nfin_le := main_verb & 

  [ SYNSEM np_trans_nfin_verb ].
|#

v_np_n3s-bse_le := v_np_n3s-bse_lexent

.
v_np*_n3s-bse_le := v_np*_n3s-bse_lexent

.
v_np_refl-idm_le := v_np_refl-idm_lexent

.
v_p-np_refl-idm_le := main_verb_mliszt & 

  [ SYNSEM np_particle_idiom_verb &
	   [ LKEYS [ --COMPKEY #cmin,
                     --+COMPKEY #cmin ] ],
    IDIOM + ].

v_np_sg-idm_le := v_np_sg-idm_lexent

.

v_np_pl-idm_le := v_np_pl-idm_lexent

.

; 'elected him president'
v_np-nb_le := v_np-nb_lexent

.

; 'see picture, page 2'
v_nb-np*_imp_le := v_nb-np*_imp_lexent

.

v_pp_e-nfin_le := main_verb & 

  [ SYNSEM empty_prep_intrans_bse_verb ].

v_np-pp_le := v_np-pp_lexent

.
;; takes dir_state_modable_rel oblique complement.
;; put (takes variety of PP complements, so avoid chart dependency filter)
v_np-pp_prop_le := v_np-pp_prop_lexent

.

;; change one's mind about
v_np-pp_nmod_le := v_np-pp_nmod_lexent

.
v_np-pp_dir_le := v_np-pp_dir_lexent

.

v_np-pp_oeq-as_le := v_np-pp_oeq-as_lexent

.
v_np_ntr_le := v_np_ntr_lexent

.
v_np*_ntr_le := v_np*_ntr_lexent

.
v_np_ntr-nogap_le := v_np_ntr_lexent &

 [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST canonical_synsem ].

v_np_ntr-noger_le := main_verb & 

  [ SYNSEM np_non_trans_verb &
	   [ LOCAL.CAT [ VAL.COMPS < [ OPT -,
				       LOCAL.CAT.HEAD basic_noun] > ] ] ].

; 'become'
v_np_id_le := v_np_id_lexent

.
; 'become president'
v_nb_le := v_nb_lexent

.

; 'become obvious that Kim arrived.'
v_prd_ssr-va_le := v_prd_ssr-va_lexent

.

; 'stood guard'
v_nb_idm_le := v_nb_idm_lexent

.

v_np-pp_seq-as_le := v_np-pp_seq-as_lexent

.
v_p_le := v_p_lexent

.
v_p_3only_le := v_p_3only_lexent

.
v_p-np_le := v_p-np_lexent

.
v_np-p_le := v_np-p_lexent

.
v_np-p_idm_le := v_np-p_idm_lexent

.
v_p-prd_le := v_p-prd_lexent

.
v_p-pp_le := v_p-pp_lexent

.

v_p-pp_e_le := v_p-pp_e_lexent

.
v_p-pp*_e_le := main_verb & 

  [ SYNSEM particle_empty_pp_verb &
	   [ LOCAL.CAT [ VAL.COMPS < synsem, [ OPT + ] > ],
             LKEYS [ --COMPKEY #cmin,
                     --+COMPKEY #cmin ] ] ].

; 'boils it down to'
v_p-np-pp_to_le := v_p-np-pp_to_lexent

.

; 'made up of'
v_p-np-pp_of_le := main_verb & 

  [ SYNSEM np_particle_ppof_verb ].

v_p-np-pp_for_le := v_p-np-pp_for_lexent

.

v_p-np-pp_from_le := main_verb & 

  [ SYNSEM np_particle_ppfrom_verb ].

v_p-np-pp_in_le := v_p-np-pp_in_lexent

.

v_p-np-pp_on_le := main_verb & 

  [ SYNSEM np_particle_ppon_verb ].

v_p-np-pp_as_le := main_verb & 

  [ SYNSEM np_particle_ppas_verb ].

v_np-p-np_le := v_np-p-np_lexent

.
v_np-p-cp_idm_le := v_np-p-cp_idm_lexent

.
v_np-p-cp_le := main_verb & 

  [ SYNSEM np_particle_cp_verb &
	   [ LOCAL.CAT.VAL.KCMP.LOCAL.CAT s_cat_unspec,
	     LKEYS [ --COMPKEY #cmin,
                     --+COMPKEY #cmin ] ] ].

v_np-p-vp_le := v_np-p-vp_lexent

.
v_pp_arg_le := v_pp_arg_lexent

.

v_pp_gap_le := v_pp_gap_lexent

.
v_pp_le := v_pp_lexent

.
v_pp*_dir_le := v_pp*_dir_lexent

.
v_pp_dir_le := v_pp_dir_lexent

.
v_pp_dir-noj_le := v_pp_dir-noj_lexent

.
v_pp*_le := v_pp*_lexent

.
v_pp_unacc_le := v_pp_unacc_lexent

.

v_vp_ssr_le := v_vp_ssr_lexent

.

v_vp_ssr-prp_le := v_vp_ssr-prp_lexent

.

; 'have to': no imperative "*Have to leave!"
v_vp_ssr-nimp_le := v_vp_ssr-nimp_lexent

.

v_pp-vp_ssr_le := v_pp-vp_ssr_lexent

.

; DPF 29-aug-07 - These verbs like "become" supposedly don't combine with
; predicative VPs, but stative passives often seem to be fine, 
; as in ; "This picture became damaged/associated with Picasso" or
; "We became inspired by the music."  Rather than adding a lexical rule to
; convert them to predicative adjs, consider a HEAD supertype of basic_adj
; and passive-verb.  FIX.

v_ap-pp_seq_le := v_ap-pp_seq_lexent

.

v_pp-pp_seq_le := v_pp-pp_seq_lexent

.

v_prd-pp_seq_le := v_prd-pp_seq_lexent

.
; feel good about
v_ap-pp_about_le := v_ap-pp_about_lexent

.

v_np-pp_to_le := v_np-pp_to_lexent

.
v_np-pp_to-unsp_le := main_verb & 

  [ SYNSEM empty_prep_trans_verb &
	   [ LOCAL.CAT [ VAL.COMPS < [ OPT - ], [ OPT - ] > ],
             LKEYS [ --COMPKEY #cmin,
                     --+COMPKEY #cmin,
                     --OCOMPKEY _to_p_sel_rel & #ocmin,
                     --+OCOMPKEY #ocmin ] ] ].

;; DPF 2018-12-20 - This type prevented N-V compounds as in "snow-bound" since
;; the optional selected-for PP blocks these.  So discard this type, and unfold
;; its instances into two types v_np-pp_to_le and v_np_le.
;;

v_np-pp*_to_le := main_verb & 

  [ SYNSEM empty_to_trans_verb &
	   [ LOCAL.CAT [ VAL.COMPS < [ OPT - ], [ OPT + ] > ],
             LKEYS [ --COMPKEY #cmin,
                     --+COMPKEY #cmin ] ] ].


v_np*-pp_to_le := v_np*-pp_to_lexent

.
v_np*-pp*_to_le := v_np*-pp*_to_lexent

.
v_-_unacc_le := v_-_unacc_lexent

.

v_-_le := v_-_lexent

.

v_-_imp_le := v_-_imp_lexent

.

v_-_bse_le := v_-_bse_lexent

.

v_np_poss_le := v_np_poss_lexent

.

v_np_poss-cx_le := main_verb & 

  [ SYNSEM poss_verb &
	   [ LOCAL [ CAT [ HEAD.TAM.TENSE present,
			   VAL.COMPS < canonical_synsem > ],
		     AGR.PNG.PN -3s ] ] ].

;; DPF 19-feb-10 - Prevent "got there" via COMPS..NORM no_rel.
;; DPF 07-apr-10 - No longer remember why we have this, given the ordinary
;; NP-complement get_v2.  It does not appear in any of the treebanked data,
;; so let's try living without it, to avoid spurious ambiguity for e.g.
;; "he has got cats"

v_np_got_le := norm_nonconj_word &

  [ SYNSEM poss_got_verb ].
			  
v_cp_rkey-bse_le := v_cp_rkey-bse_lexent

.

v_cp_rkey-3sg_le := v_cp_prop_raise_key_lexent &

  [ SYNSEM cp_prop_raise_key_3sg_verb ].

v_cp_rkey-n3sg_le := v_cp_rkey-n3sg_lexent

.

v_cp_rkey-pst_le := v_cp_prop_raise_key_lexent &

  [ SYNSEM cp_prop_raise_key_pst_verb ].

v_cp_rkey-prp_le := v_cp_prop_raise_key_lexent &

  [ SYNSEM cp_prop_raise_key_prp_verb ].

v_cp_rkey-psp_le := v_cp_prop_raise_key_lexent &

  [ SYNSEM cp_prop_raise_key_psp_verb ].

v_adv_le := v_adv_lexent

.

v_np-adv_le := v_np-adv_lexent

.

; 'made': "Kim made sandy arrive' but "Sandy was made TO arrive'
v_vp_sorb-psv_le := v_vp_sorb-psv_lexent

.
; 'rumored': "It was rumored that they had arrived"
v_cp_psv_le := v_cp_psv_lexent

.

; 'faded'
v_-_psv_le := norm_basic_main_verb &

  [ SYNSEM passive_unerg_synsem,
    INFLECTD + ].

; 'born'
v_-_psv-prd_le := norm_basic_main_verb &

  [ INFLECTD +,
    SYNSEM passive_unerg_synsem &
	   [ LOCAL.CAT.POSTHD + ],
    ALTS.ATTRJ - ].

v_-_psv-prd-spr_le := norm_basic_main_verb &

  [ INFLECTD +,
    SYNSEM passive_unerg_synsem &
	     [ LOCAL.CAT [ VAL.SPR.FIRST expressed_synsem,
			   POSTHD + ] ],
    ALTS.ATTRJ - ].

; 'surrounded'
v_-_psv-with_le := norm_basic_main_verb &

  [ INFLECTD +,
    SYNSEM passive_unerg_with_synsem,
    ALTS.ATTRJ - ].

;; DPF 2016-09-26 - Removed NORM norm_rel because we want 
;; *the Chicago-based team* where the n-v_j-cpd_c rule requires its second dtr
;; to be NORM no_rel.  Maybe FIX whatever that constraint was doing.
;; 
; 'faded'
v_-_psv-att_le := norm_basic_main_verb &

  [ SYNSEM passive_unerg_synsem &
	   [ LOCAL.CAT [ VAL.SUBJ < canonical_synsem >,
			 POSTHD - ],
	     NONLOC.SLASH.LIST < > ],
    INFLECTD + ].

; 'horseback riding'
v_-_prp_le := norm_basic_main_verb &

  [ SYNSEM unerg_prp_verb,
    INFLECTD + ].

;; 'put' - "That was well put", but block in n-v compounds like "*idea-put"
;; Also block depictives via OPT -
;;
v_-_psv-ncnh_le := v_-_psv-ncnh_lexent

.
; 'unevaluated (by Abrams)'
v_-_psv-neg_le := main_verb_newltop &

  [ SYNSEM passive_unerg_neg_synsem,
    INFLECTD + ].

v_np_thr-s_le := v_np_thr-s_lexent

.

v_np_locinv-mv_le := v_np_locinv-mv_lexent

.

v_np_locinv-is_le := loc_inv_be_word &

  [ SYNSEM.LOCAL [ CAT.HEAD.TAM.TENSE present,
                   AGR.PNG.PN 3s ] ].

v_np_locinv-are_le := loc_inv_be_word &

  [ SYNSEM.LOCAL [ CAT.HEAD.TAM.TENSE present,
                   AGR.PNG.PN 3p ] ].

v_np_locinv-was_le := loc_inv_be_word &

  [ SYNSEM.LOCAL [ CAT.HEAD.TAM.TENSE past,
                   AGR.PNG.PN 3s ] ].

v_np_locinv-were_le := loc_inv_be_word &

  [ SYNSEM.LOCAL [ CAT.HEAD.TAM.TENSE past,
                   AGR.PNG.PN 3p ] ].

v_np_locinv-be_le := v_np_locinv-be_lexent

.
;; May he always be blessed
;;
v_np-vp_imp_le := main_verb_mliszt & 

  [ SYNSEM sorb_verb &
	   [ LOCAL.CAT.HEAD.VFORM imp_vform ] ].

;; Salutations treated as subjectless sentences
;; "Dear John"
v_np_salut_le := v_np_salut_lexent &

  [ SYNSEM.LOCAL.CAT.VAL.COMPS < [ OPT - ] > ].

;; Salutations treated as subjectless sentences
;; "Sincerely Mary"
v_np*_salut_le := v_np_salut_lexent

.

;; DPF 2018-08-24 - For some reason, PET's flop will not compile this file
;; without the following 99-character line preceded by a semicolon:
;; (and similarly for auxverbs.tdl but not lextypes.tdl)
;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
