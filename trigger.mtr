;;; Hey, emacs(1), this is -*- Mode: TDL; Package: LKB; -*- got it?

does1_pos_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           PRED neg_rel ],
                         [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE present,
			                      ASPECT no_aspect ] ] ] !> ],
   FLAGS.TRIGGER "does1_pos" ].

does1_pos_rule2 := generator_rule &
 [ CONTEXT [ HOOK.LTOP handle & #ltop,
             RELS <! [ LBL #ltop,
                       PRED int_m_rel ],
                         [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE present,
			                      ASPECT no_aspect ] ] ] !> ],
   FLAGS.TRIGGER "does1_pos" ].

does1_pos_rule3 := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           PRED ellipsis_rel,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE present,
			                      ASPECT no_aspect ] ] ] !> ],
   FLAGS.TRIGGER "does1_pos" ].

does1_pos_rule4 := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           PRED ne_m_rel ],
                         [ LBL handle,
                           PRED neg_rel ],
                         [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE present,
			                      ASPECT no_aspect ] ] ] !> ],
   FLAGS.TRIGGER "does1_pos" ].

does1_pos_rule5 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED conj_rel,
                       L-INDEX event ],
                     [ LBL handle,
                       PRED int_m_rel ],
                     [ LBL handle,
                       ARG0 event & [ E [ MOOD indicative,
                                          TENSE present,
			                  ASPECT no_aspect ] ] ] !> ],
   FLAGS.TRIGGER "does1_pos" ].

did1_pos_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           PRED neg_rel ],
                         [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE past,
	                                      ASPECT no_aspect ] ] ] !> ],
   FLAGS.TRIGGER "did1_pos" ].

did1_pos_rule2 := generator_rule &
 [ CONTEXT [ HOOK.LTOP handle & #ltop,
             RELS <! [ LBL #ltop,
                       PRED int_m_rel ],
                         [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE past,
	                                      ASPECT no_aspect ] ] ] !> ],
   FLAGS.TRIGGER "did1_pos" ].

did1_pos_rule3 := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           PRED ellipsis_rel,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE past,
	                                      ASPECT no_aspect ] ] ] !> ],
   FLAGS.TRIGGER "did1_pos" ].

did1_pos_rule4 := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           PRED ne_m_rel ],
                         [ LBL handle,
                           PRED neg_rel ],
                         [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE past,
	                                      ASPECT no_aspect ] ] ] !> ],
   FLAGS.TRIGGER "did1_pos" ].

did1_pos_rule5 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED conj_rel,
                       L-INDEX event ],
                     [ LBL handle,
                       PRED int_m_rel ],
                     [ LBL handle,
                       ARG0 event & [ E [ MOOD indicative,
                                          TENSE past,
	                                  ASPECT no_aspect ] ] ] !> ],
   FLAGS.TRIGGER "did1_pos" ].

does1_neg_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           PRED ne_m_rel ] !> ],
   FLAGS.TRIGGER "does1_neg_1" ].

did1_neg_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           PRED ne_m_rel ] !> ],
   FLAGS.TRIGGER "did1_neg_1" ].

do1_neg_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           PRED ne_m_rel ] !> ],
   FLAGS.TRIGGER "do1_neg_1" ].

will_neg_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           PRED ne_m_rel ],
                     [ LBL handle,
                           ARG0 event & [ E [ MOOD ind_or_mod_subj,
                                              TENSE future ] ] ] !> ],
   FLAGS.TRIGGER "will_aux_neg_1" ].

do1_pos_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                       PRED neg_rel ],
                     [ ARG0 event & [ E [ MOOD indicative,
                                          TENSE present,
                                          ASPECT no_aspect ] ] ] !> ],
   FLAGS.TRIGGER "do1_pos" ].

do1_pos_rule2 := generator_rule &
 [ CONTEXT [ HOOK.LTOP handle & #ltop,
             RELS <! [ LBL #ltop,
                       PRED int_m_rel ],
                     [ ARG0 event & [ E [ MOOD indicative,
                                          TENSE present,
                                          ASPECT no_aspect ] ] ] !> ],
   FLAGS.TRIGGER "do1_pos" ].

do1_pos_rule3 := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           PRED ellipsis_rel,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE present,
		                              ASPECT no_aspect ] ] ] !> ],
   FLAGS.TRIGGER "do1_pos" ].

do1_pos_rule4 := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           PRED ne_m_rel ],
                         [ LBL handle,
                           PRED neg_rel ] !> ],
   FLAGS.TRIGGER "do1_pos" ].

do1_pos_rule5 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED conj_rel,
                       L-INDEX event ],
                     [ LBL handle,
                       PRED int_m_rel ] !> ],
   FLAGS.TRIGGER "do1_pos" ].

has_aux_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle & #h,
                       ARG0 event & #e & [ E [ MOOD indicative,
                                               TENSE present,
                                               ASPECT.PERF + ] ] ] !> ],
   OUTPUT.HOOK [ LTOP #h, INDEX #e ],
   FLAGS.TRIGGER "has_aux" ]. 

; DPF 8-Jul-02 - Removed TENSE real_tense "A could have been hiring B"
have_bse_aux_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ ASPECT.PERF + ] ] ] !> ],
   FLAGS.TRIGGER "have_bse_aux" ]. 

have_bse_aux_cx_1_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ ASPECT.PERF + ] ] ] !> ],
   FLAGS.TRIGGER "have_bse_aux_cx_1" ]. 

have_fin_aux_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE present,
		                              ASPECT.PERF + ] ] ] !> ],
   FLAGS.TRIGGER "have_fin_aux" ]. 

have_aux_prp_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           PRED gerund_rel ] !> ],
   FLAGS.TRIGGER "have_aux_prp" ].

have_aux_prp_rule2 := generator_rule &
 [ CONTEXT [ RELS <! [ ARG0 event & [ E [ TENSE no_tense,
                                          ASPECT [ PERF +,
                                                   PROGR - ] ] ] ] !> ],
   FLAGS.TRIGGER "have_aux_prp" ]. 

had_aux_subj_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                       ARG0 event & [ E [ MOOD subjunctive,
                                          ASPECT.PERF + ] ] ] !> ],
   FLAGS.TRIGGER "had_aux_subj" ].

had_aux_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE past,
		                              ASPECT.PERF + ] ] ] !> ],
   FLAGS.TRIGGER "had_aux" ].

has_aux_cx_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE present,
		                              ASPECT.PERF + ] ] ] !> ],
   FLAGS.TRIGGER "has_aux_cx" ].

has_aux_cx_2_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE present,
		                              ASPECT.PERF + ] ] ] !> ],
   FLAGS.TRIGGER "has_aux_cx_2" ].

have_fin_aux1_cx_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE present,
	                                      ASPECT.PERF + ] ],
                           ARG1 ref-ind & [ PNG.PN non3sg ] ] !> ],
   FLAGS.TRIGGER "have_fin_aux_cx" ].

have_fin_aux2_cx_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE present,
	                                      ASPECT.PERF + ] ],
                           ARG2 ref-ind & [ PNG.PN non3sg ] ] !> ],
   FLAGS.TRIGGER "have_fin_aux_cx" ].

have_fin_aux3_cx_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE present,
	                                      ASPECT.PERF + ] ],
                           ARG3 ref-ind & [ PNG.PN non3sg ] ] !> ],
   FLAGS.TRIGGER "have_fin_aux_cx" ].

had_aux_cx_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE past,
		                              ASPECT.PERF + ] ] ] !> ],
   FLAGS.TRIGGER "had_aux_cx" ]. 

both_conj_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                       PRED _and_c_rel ] !> ],
   FLAGS.TRIGGER "both_conj" ]. 

both_conj_rule_2 := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                       PRED _as+well+as_c_rel ] !> ],
   FLAGS.TRIGGER "both_conj" ]. 

either_conj_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           PRED _or_c_rel ] !> ],
   FLAGS.TRIGGER "either_conj" ].

neither_conj_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           PRED _nor_c_rel ] !> ],
   FLAGS.TRIGGER "neither_conj" ].
#|
both_conj_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "both_conj" ]. 

either_conj_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "either_conj" ].

neither_conj_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "neither_conj" ].
|#
;; Removed [ TENSE no_tense ]
;; DPF 4-Jul-02 - Put [ TENSE no_tense ] back to avoid introducing "to" for
;; simple "Abrams works"
;; DPF 1-Jul-03 - But [ ASPECT no_aspect ] blocks Kim believes Browne to have 
;; barked", so drop it.

to_c_nonprop_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E.TENSE no_tense ] ] !> ],
   FLAGS.TRIGGER "to_c_nonprop" ].

there_expl_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           PRED _be_v_there_rel ] !> ],
   FLAGS.TRIGGER "there_expl" ].

will_aux_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD ind_or_mod_subj,
                                              TENSE future ] ] ] !> ],
   FLAGS.TRIGGER "will_aux_pos" ].

will_aux_cx_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD ind_or_mod_subj,
                                              TENSE future ] ] ] !> ],
   FLAGS.TRIGGER "will_aux_pos_cx" ].

will_aux_cx_2_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD ind_or_mod_subj,
                                              TENSE future ] ] ] !> ],
   FLAGS.TRIGGER "will_aux_pos_cx_2" ].

would_aux_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD modal_subj,
                                              TENSE future ] ] ] !> ],
   FLAGS.TRIGGER "would_aux_pos" ].

would_aux_cx_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD ind_or_mod_subj,
                                              TENSE future ] ] ] !> ],
   FLAGS.TRIGGER "would_aux_pos_cx" ].

would_aux_cx_2_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD ind_or_mod_subj,
                                              TENSE future ] ] ] !> ],
   FLAGS.TRIGGER "would_aux_pos_cx_2" ].

#|
would_like_aux_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD ind_or_mod_subj,
                                              TENSE future ] ] ] !> ],
   FLAGS.TRIGGER "would_like_aux_pos" ].

would_like_aux_cx_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD ind_or_mod_subj,
                                              TENSE future ] ] ] !> ],
   FLAGS.TRIGGER "would_like_aux_pos_cx" ].
|#

shall_aux_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD ind_or_mod_subj,
                                              TENSE future ] ] ] !> ],
   FLAGS.TRIGGER "shall_aux_pos" ].

be_c_is1_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE present,
					      ASPECT.STATIVE + ] ],
                           ARG1 ref-ind & [ PNG [ PN 3sg ] ] ] !> ],
   FLAGS.TRIGGER "be_c_is" ].

be_c_is2_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE present,
					      ASPECT.STATIVE + ] ],
                           ARG2 ref-ind & [ PNG [ PN 3sg ] ] ] !> ],
   FLAGS.TRIGGER "be_c_is" ].

be_c_is3_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE present,
					      ASPECT.STATIVE + ] ],
                           ARG3 ref-ind & [ PNG [ PN 3sg ] ] ] !> ],
   FLAGS.TRIGGER "be_c_is" ].

be_c_is_h1_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE present,
					      ASPECT.STATIVE + ] ],
                           ARG1 handle ] !> ],
   FLAGS.TRIGGER "be_c_is" ].

be_c_is_h2_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE present,
					      ASPECT.STATIVE + ] ],
                           ARG2 handle ] !> ],
   FLAGS.TRIGGER "be_c_is" ].

be_c_is_inf_rule := generator_rule &
 [ CONTEXT [ HOOK.INDEX [ E [ MOOD indicative,
                         TENSE present,
			 ASPECT.STATIVE + ] ],
             RELS <! [ LBL handle,
                       PRED expected_event_rel ],
                     [ ARG1 ref-ind & [ PNG [ PN 3sg ] ] ] !> ],
   FLAGS.TRIGGER "be_c_is" ].

be_c_is_th_expl_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           PRED _be_v_there_rel ],
                         [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE present ] ] ] !> ],
   FLAGS.TRIGGER "be_c_is" ].

be_c_is_cx1_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE present,
					      ASPECT.STATIVE + ] ],
                           ARG1 ref-ind & [ PNG.PN 3sg ] ] !> ],
   FLAGS.TRIGGER "be_c_is_cx" ].

be_c_is_cx2_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE present,
					      ASPECT.STATIVE + ] ],
                           ARG2 ref-ind & [ PNG.PN 3sg ] ] !> ],
   FLAGS.TRIGGER "be_c_is_cx" ].

be_c_is_cx3_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE present,
					      ASPECT.STATIVE + ] ],
                           ARG3 ref-ind & [ PNG.PN 3sg ] ] !> ],
   FLAGS.TRIGGER "be_c_is_cx" ].

be_c_is_cx_n_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE present,
					      ASPECT.STATIVE + ] ],
                           ARG1 handle ] !> ],
   FLAGS.TRIGGER "be_c_is_cx" ].

be_c_are1_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE present,
					      ASPECT.STATIVE + ] ],
                           ARG1 ref-ind & [ PNG [ PN non3sg ] ] ] !> ],
   FLAGS.TRIGGER "be_c_are" ].

be_c_are2_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE present,
					      ASPECT.STATIVE + ] ],
                           ARG2 ref-ind & [ PNG [ PN non3sg ] ] ] !> ],
   FLAGS.TRIGGER "be_c_are" ].

be_c_are3_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE present,
					      ASPECT.STATIVE + ] ],
                           ARG3 ref-ind & [ PNG [ PN non3sg ] ] ] !> ],
   FLAGS.TRIGGER "be_c_are" ].

be_c_are_h1_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE present,
					      ASPECT.STATIVE + ] ],
                           ARG1 handle ],
		     [ LBL handle,
		       ARG0 ref-ind & [ PNG [ PN non3sg ] ] ] !> ],
                           
   FLAGS.TRIGGER "be_c_are" ].

be_c_are_h2_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE present,
					      ASPECT.STATIVE + ] ],
                           ARG2 handle ],
		     [ LBL handle,
		       ARG0 ref-ind & [ PNG [ PN non3sg ] ] ] !> ],
   FLAGS.TRIGGER "be_c_are" ].

be_c_are_th_expl_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                       PRED _be_v_there_rel,
		       ARG1 ref-ind & [ PNG [ PN non3sg ] ] ],
                     [ LBL handle,
                       ARG0 event & [ E [ MOOD indicative,
                                          TENSE present ] ] ] !> ],
   FLAGS.TRIGGER "be_c_are" ].

be_c_are_cx1_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE present,
					      ASPECT.STATIVE + ] ],
                           ARG1 ref-ind & [ PNG.PN non3sg ] ] !> ],
   FLAGS.TRIGGER "be_c_are_cx" ].

be_c_are_cx2_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE present,
					      ASPECT.STATIVE + ] ],
                           ARG2 ref-ind & [ PNG.PN non3sg ] ] !> ],
   FLAGS.TRIGGER "be_c_are_cx" ].

be_c_are_cx3_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE present,
					      ASPECT.STATIVE + ] ],
                           ARG3 ref-ind & [ PNG.PN non3sg ] ] !> ],
   FLAGS.TRIGGER "be_c_are_cx" ].

be_c_am1_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE present,
					      ASPECT.STATIVE + ] ],
                           ARG1 ref-ind & [ PNG.PN 1sg ] ] !> ],
   FLAGS.TRIGGER "be_c_am" ].

be_c_am2_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE present,
					      ASPECT.STATIVE + ] ],
                           ARG2 ref-ind & [ PNG.PN 1sg ] ] !> ],
   FLAGS.TRIGGER "be_c_am" ].

be_c_am3_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE present,
					      ASPECT.STATIVE + ] ],
                           ARG3 ref-ind & [ PNG.PN 1sg ] ] !> ],
   FLAGS.TRIGGER "be_c_am" ].

be_c_am_h1_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE present,
					      ASPECT.STATIVE + ] ],
                           ARG1 handle ],
		     [ LBL handle,
		       ARG0 ref-ind & [ PNG.PN 1sg ] ] !> ],
   FLAGS.TRIGGER "be_c_am" ].

be_c_am_h2_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE present,
					      ASPECT.STATIVE + ] ],
                           ARG2 handle ],
		     [ LBL handle,
		       ARG0 ref-ind & [ PNG.PN 1sg ] ] !> ],
   FLAGS.TRIGGER "be_c_am" ].

be_c_am_cx1_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE present,
					      ASPECT.STATIVE + ] ],
                           ARG1 ref-ind & [ PNG.PN 1sg ] ] !> ],
   FLAGS.TRIGGER "be_c_am_cx" ].

be_c_am_cx2_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE present,
					      ASPECT.STATIVE + ] ],
                           ARG2 ref-ind & [ PNG.PN 1sg ] ] !> ],
   FLAGS.TRIGGER "be_c_am_cx" ].

be_c_am_cx3_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE present,
					      ASPECT.STATIVE + ] ],
                           ARG3 ref-ind & [ PNG.PN 1sg ] ] !> ],
   FLAGS.TRIGGER "be_c_am_cx" ].

be_c_was1_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE past,
					      ASPECT.STATIVE + ] ],
                           ARG1 ref-ind & [ PNG.PN 3sg ] ] !> ],
   FLAGS.TRIGGER "be_c_was" ].

be_c_was2_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE past,
					      ASPECT.STATIVE + ] ],
                           ARG2 ref-ind & [ PNG.PN 3sg ] ] !> ],
   FLAGS.TRIGGER "be_c_was" ].

be_c_was3_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE past,
					      ASPECT.STATIVE + ] ],
                           ARG3 ref-ind & [ PNG.PN 3sg ] ] !> ],
   FLAGS.TRIGGER "be_c_was" ].

be_c_was_h1_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE past,
					      ASPECT.STATIVE + ] ],
                           ARG1 handle ],
		     [ LBL handle,
		       ARG0 ref-ind & [ PNG.PN 3sg ] ] !> ],
   FLAGS.TRIGGER "be_c_was" ].

be_c_was_h2_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE past,
					      ASPECT.STATIVE + ] ],
                           ARG2 handle ],
		     [ LBL handle,
		       ARG0 ref-ind & [ PNG.PN 3sg ] ] !> ],
   FLAGS.TRIGGER "be_c_was" ].

be_c_was_subj_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                       ARG0 event & [ E [ MOOD subjunctive,
                                          TENSE real_tense,
					  ASPECT.STATIVE + ] ] ] !> ],
   FLAGS.TRIGGER "be_c_was_subj" ].

be_c_was_inf_rule := generator_rule &
 [ CONTEXT [ HOOK.INDEX [ E [ MOOD indicative,
                         TENSE past,
			 ASPECT.STATIVE + ] ],
             RELS <! [ LBL handle,
                       PRED expected_event_rel ],
                     [ ARG1 ref-ind & [ PNG [ PN 3sg ] ] ] !> ],
   FLAGS.TRIGGER "be_c_was" ].

be_c_was_th_expl_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           PRED _be_v_there_rel ],
                         [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE past ] ] ] !> ],
   FLAGS.TRIGGER "be_c_was" ].

be_c_were1_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE past,
					      ASPECT.STATIVE + ] ],
                           ARG1 ref-ind & [ PNG.PN non3sg ] ] !> ],
   FLAGS.TRIGGER "be_c_were" ].

be_c_were2_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE past,
					      ASPECT.STATIVE + ] ],
                           ARG2 ref-ind & [ PNG.PN non3sg ] ] !> ],
   FLAGS.TRIGGER "be_c_were" ].

be_c_were3_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE past,
					      ASPECT.STATIVE + ] ],
                           ARG3 ref-ind & [ PNG.PN non3sg ] ] !> ],
   FLAGS.TRIGGER "be_c_were" ].

be_c_were_h1_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE past,
					      ASPECT.STATIVE + ] ],
                           ARG1 handle ],
		     [ LBL handle,
		       ARG0 ref-ind & [ PNG.PN non3sg ] ] !> ],
   FLAGS.TRIGGER "be_c_were" ].

be_c_were_h2_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE past,
					      ASPECT.STATIVE + ] ],
                           ARG2 handle ],
		     [ LBL handle,
		       ARG0 ref-ind & [ PNG.PN non3sg ] ] !> ],
   FLAGS.TRIGGER "be_c_were" ].

be_c_were_th_expl_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           PRED _be_v_there_rel ],
                         [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE past ] ] ] !> ],
   FLAGS.TRIGGER "be_c_were" ].

be_c_were_subj_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                       ARG0 event & [ E [ MOOD subjunctive,
                                          TENSE real_tense,
					  ASPECT.STATIVE + ] ] ] !> ],
   FLAGS.TRIGGER "be_c_were_subj" ].

be_c_were_inf_rule := generator_rule &
 [ CONTEXT [ HOOK.INDEX [ E [ MOOD indicative,
                         TENSE past,
			 ASPECT.STATIVE + ] ],
             RELS <! [ LBL handle,
                       PRED expected_event_rel ],
                     [ ARG1 ref-ind & [ PNG [ PN non3sg ] ] ] !> ],
   FLAGS.TRIGGER "be_c_were" ].


; DPF 8-Jul-02 - Removed TENSE real_tense "A could have been hiring B"
be_c_been_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
        		                      ASPECT [ PERF +,
					               STATIVE + ] ] ] ] !> ],
   FLAGS.TRIGGER "be_c_been" ].

be_c_being_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE real_tense,
	        	                      ASPECT.PROGR + ] ] ] !> ],
   FLAGS.TRIGGER "be_c_being" ].

be_c_be_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
        	                              ASPECT [ PERF -,
 					               STATIVE + ] ] ] ] !> ],
   FLAGS.TRIGGER "be_c_be" ].

who_rel_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL #hand,
                           ARG0 ref-ind ],
                         [ LBL #hand,
                           PRED prpstn_m_rel ] !> ],
   FLAGS.TRIGGER "who2" ].

whom_rel_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL #hand,
                           ARG0 ref-ind ],
                         [ LBL #hand,
                           PRED prpstn_m_rel ] !> ],
   FLAGS.TRIGGER "whom2" ].

which_rel_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL #hand,
                           ARG0 ref-ind ],
                         [ LBL #hand,
                           PRED prpstn_m_rel ] !> ],
   FLAGS.TRIGGER "which_r" ].

that_rel_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL #hand,
                           ARG0 ref-ind ],
                         [ LBL #hand,
                           PRED prpstn_m_rel ] !> ],
   FLAGS.TRIGGER "that_r" ].

that_rel_npadv_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL #hand,
                           ARG0 ref-ind ],
                         [ LBL #hand,
                           PRED prpstn_m_rel ] !> ],
   FLAGS.TRIGGER "that_r_npadv" ].

and_num_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           PRED times_rel ] !> ],
   FLAGS.TRIGGER "and_num" ].

and_fract_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           PRED fraction_rel ] !> ],
   FLAGS.TRIGGER "and_fract" ].

and_fract_2_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           PRED fraction_rel ] !> ],
   FLAGS.TRIGGER "and_fract_2" ].

;none_det_rule := generator_rule &
; [ CONTEXT [ RELS <! [ LBL handle,
;                           PRED _no_q_rel ] !> ],
;   FLAGS.TRIGGER "none_pn1" ].

;none_det_2_rule := generator_rule &
; [ CONTEXT [ RELS <! [ LBL handle,
;                           PRED _no_q_rel ] !> ],
;   FLAGS.TRIGGER "none_pn2" ].

; For all of these, make the RELS be <! which_rel !> to generate with them
wh_the_hell_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "the_hell_wh_adv" ].

wh_the_fuck_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "the_fuck_wh_adv" ].

wh_the_heck_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "the_heck_wh_adv" ].

wh_on_earth_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "on_earth_wh_adv" ].

wh_in_the_world_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "in_the_world_wh_adv" ].

wh_oh_where_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "oh_where_wh_adv" ].

wh_exactly_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "exactly_wh_adv" ].

wh_else_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "else_wh_adv" ].

; These won't be used in generation as long as the never_unify_rel is here
adv_disc_umm_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "umm_root" ].
adv_disc_um_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "um_disc_adv" ].
adv_disc_umers_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "um_ersatz" ].
adv_disc_uh_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "uh_disc_adv" ].
adv_disc_please_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "please_root" ].
adv_disc_pleaseabb_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "please_abb_root" ].
adv_disc_imustsay_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "i_must_say_root" ].
adv_disc_imustsay_2_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "i_must_say_root_2" ].
adv_disc_imustsay_3_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "i_must_say_root_3" ].
adv_disc_imustsay_4_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "i_must_say_root_4" ].
adv_disc_youknow_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "you_know_disc" ].
adv_disc_youknow_2_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "you_know_2_disc" ].
adv_disc_imho_1_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "imho_disc" ].
adv_disc_imho_2_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "imho_disc_2" ].
adv_disc_lets_say_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "lets_say_disc" ].
adv_disc_lets_say_2_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "lets_say_2_disc" ].
adv_disc_lets_say_3_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "lets_say_3_disc" ].
adv_disc_lets_say_4_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "lets_say_4_disc" ].
adv_disc_lets_say_5_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "lets_say_5_disc" ].
adv_disc_lets_say_6_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "lets_say_6_disc" ].
adv_disc_like_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "like_disc_adv" ].
adv_disc_for_instance_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "for_instance_disc_adv" ].
adv_disc_for_example_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "for_example_disc_adv" ].
adv_I_guess_like_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "i_guess_disc" ].
adv_I_guess_like_2_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "i_guess_disc_2" ].
adv_I_guess_like_3_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "i_guess_disc_3" ].
adv_I_guess_like_4_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "i_guess_disc_4" ].
adv_however_2_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "however2" ].
adv_however_3_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "however_3" ].
adv_I_think_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "i_think_disc" ].
adv_I_think_2_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "i_think_disc_2" ].
adv_or_so_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "or_so_disc" ].
adv_maybe_disc_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "maybe_disc_adv" ].
adv_say_disc_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "say_disc_adv" ].
adv_i_mean_disc_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "i_mean_disc" ].
adv_i_mean_disc_2_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "i_mean_disc_2" ].
adv_thats_right_pre_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "thats_right_pre_root" ].
adv_though_pre_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "though_root_pre" ].
adv_though_post_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "though_root_post" ].
adv_disc_perhaps_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "perhaps_disc_adv" ].
adv_disc_e_g_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "e_g_disc_adv" ].
adv_disc_sort_of_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "sort_of_disc_adv" ].
adv_disc_in_a_way_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "in_a_way_disc_adv" ].
adv_yes_pre_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "yes_pre_root" ].
adv_alas_pre_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "alas_pre_root" ].

apostrophe_s_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED poss_rel ] !> ],
   FLAGS.TRIGGER "apostrophe_s_nq_lex" ].

punct_semicolon_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "semicolon_pct" ].
punct_semicolon_dash_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "semicolon_dash_pct" ].
punct_vert_bar_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "vertical_bar_punct_right" ].
punct_bang_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "bang_pct" ].
#|
punct_period_rule := generator_rule &
 [ CONTEXT [ HOOK.LTOP #ltop,
             RELS <! [ LBL #ltop,
                       PRED prop_imp_m_rel ] !> ],
   FLAGS.TRIGGER "period_pct" ].
punct_period_2_rule := generator_rule &
 [ CONTEXT [ HOOK.LTOP #ltop,
             RELS <! [ LBL #ltop,
                       PRED conj_rel ],
                     [ PRED prop_imp_m_rel ] !> ],
   FLAGS.TRIGGER "period_pct" ].
punct_qmark_rule := generator_rule &
 [ CONTEXT [ HOOK.LTOP #ltop,
             RELS <! [ LBL #ltop,
                       PRED int_m_rel ] !> ],
   FLAGS.TRIGGER "qmark_pct" ].
punct_qmark_2_rule := generator_rule &
 [ CONTEXT [ HOOK.LTOP #ltop,
             RELS <! [ LBL #ltop,
                       PRED conj_rel ],
                     [ PRED int_m_rel ] !> ],
   FLAGS.TRIGGER "qmark_pct" ].
|#

punct_sq_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "sq_pct" ].
punct_dq_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "dq_punct" ].
punct_dq2_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "dq_punct2" ].
punct_lp_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "lparen_pct" ].
punct_rp_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "rparen_pct" ].
hyphen_punctl_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "hyphen_punct_left" ].
hyphen_punctr_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "hyphen_punct_right" ].
punct_dblhl_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "dbl_hyphen_punct_left" ].
punct_dblhr_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "dbl_hyphen_punct_right" ].
punct_dblh_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "dbl_hyphen_punct" ].
punct_3dotsl_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "punct_3dots_l" ].
punct_3dotsr_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "punct_3dots_r" ].
punct_3dotsr2_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "punct_3dots_r_2" ].
punct_s_dash_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "s_dash_pct" ].
punct_s_dbldash_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "s_dbl_dash_pct" ].
punct_leftq_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "leftq_pct" ].

be_c_is_cx_2_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "be_c_is_cx_2" ].
be_c_am_cx_2_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "be_c_am_cx_2" ].
be_c_are_cx_2_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "be_c_are_cx_2" ].
have_bse_aux_cx_2_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "have_bse_aux_cx_2" ].
have_fin_aux_cx_2_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "have_fin_aux_cx_2" ].
had_aux_cx_2_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "had_aux_cx_2" ].

be_c_is_neg_tag_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           PRED ne_m_rel ],
                     [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE present,
					      ASPECT.STATIVE + ] ] ] !> ],
   FLAGS.TRIGGER "be_c_is_neg_1" ].

be_c_are_neg_tag_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           PRED ne_m_rel ],
                     [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE present,
					      ASPECT.STATIVE + ] ] ] !> ],
   FLAGS.TRIGGER "be_c_are_neg_1" ].

be_id_is_neg_tag_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           PRED ne_m_rel ],
                     [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE present ] ] ] !> ],
   FLAGS.TRIGGER "be_id_is_neg_1" ].

be_id_are_neg_tag_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           PRED ne_m_rel ],
                     [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE present ] ] ] !> ],
   FLAGS.TRIGGER "be_id_are_neg_1" ].

be_th_is_neg_tag_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           PRED ne_m_rel ],
                     [ LBL handle,
                           PRED _be_v_there_rel,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE present ] ] ] !> ],
   FLAGS.TRIGGER "be_th_cop_is_neg_1" ].

be_th_are_neg_tag_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           PRED ne_m_rel ],
                     [ LBL handle,
                           PRED _be_v_there_rel,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE present ] ] ] !> ],
   FLAGS.TRIGGER "be_th_cop_are_neg_1" ].

be_c_was_neg_tag_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           PRED ne_m_rel ],
                     [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE past,
					      ASPECT.STATIVE + ] ] ] !> ],
   FLAGS.TRIGGER "be_c_was_neg_1" ].

be_c_were_neg_tag_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           PRED ne_m_rel ],
                     [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE past,
					      ASPECT.STATIVE + ] ] ] !> ],
   FLAGS.TRIGGER "be_c_were_neg_1" ].

be_id_was_neg_tag_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           PRED ne_m_rel ],
                     [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE past ] ] ] !> ],
   FLAGS.TRIGGER "be_id_was_neg_1" ].

be_id_were_neg_tag_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           PRED ne_m_rel ],
                     [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE past ] ] ] !> ],
   FLAGS.TRIGGER "be_id_were_neg_1" ].

be_th_was_neg_tag_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           PRED ne_m_rel ],
                     [ LBL handle,
                           PRED _be_v_there_rel,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE past ] ] ] !> ],
   FLAGS.TRIGGER "be_th_cop_was_neg_1" ].

be_th_were_neg_tag_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           PRED ne_m_rel ],
                     [ LBL handle,
                           PRED _be_v_there_rel,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE past ] ] ] !> ],
   FLAGS.TRIGGER "be_th_cop_were_neg_1" ].

be_inv_is_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE present,
					      ASPECT.STATIVE + ] ],
                           ARG1 ref-ind & [ PNG.PN 3sg ] ] !> ],
   FLAGS.TRIGGER "be_inv_is" ].

be_inv_was_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE past,
					      ASPECT.STATIVE + ] ],
                           ARG1 ref-ind & [ PNG.PN 3sg ] ] !> ],
   FLAGS.TRIGGER "be_inv_was" ].

be_inv_are_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE present,
					      ASPECT.STATIVE + ] ],
                           ARG1 ref-ind & [ PNG.PN non3sg ] ] !> ],
   FLAGS.TRIGGER "be_inv_are" ].

be_inv_were_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE past,
					      ASPECT.STATIVE + ] ],
                           ARG1 ref-ind & [ PNG.PN non3sg ] ] !> ],
   FLAGS.TRIGGER "be_inv_were" ].

expletive_it_rain_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_rain_v_1_rel" ].

expletive_it_drizzle_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_drizzle_v_1_rel" ].

expletive_it_hail_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_hail_v_1_rel" ].

expletive_it_snow_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_snow_v_1_rel" ].

expletive_it_sprinkle_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_sprinkle_v_1_rel" ].

expletive_it_advance_v_x_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_advance_v_x_rel" ].

expletive_it_affect_v_x_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_affect_v_x_rel" ].

expletive_it_alarm_v_x_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_alarm_v_x_rel" ].

expletive_it_amaze_v_x_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_amaze_v_expl_rel" ].

expletive_it_anger_v_x_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_anger_v_expl_rel" ].

expletive_it_annoy_v_2_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_annoy_v_2_rel" ].

expletive_it_appall_v_x_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_appall_v_expl_rel" ].

expletive_it_appear_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_appear_v_to_rel" ].

expletive_it_astonish_v_x_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_astonish_v_expl_rel" ].

expletive_it_arrange_v_expl_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_arrange_v_expl_rel" ].

expletive_it_augment_v_x_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_augment_v_expl_rel" ].

expletive_it_baffle_v_x_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_baffle_v_expl_rel" ].

expletive_it_bother_v_expl_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_bother_v_expl_rel" ].

expletive_it_breezy_a_expl_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_breezy_a_expl_rel" ].

expletive_it_blustery_a_expl_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_blustery_a_expl_rel" ].

expletive_it_chilly_a_expl_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_chilly_a_expl_rel" ].

expletive_it_cloudy_a_expl_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_cloudy_a_expl_rel" ].

expletive_it_cold_a_eexpl_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_cold_a_eexpl_rel" ].

expletive_it_cool_a_expl_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_cool_a_expl_rel" ].

expletive_it_concern_v_x_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_concern_v_expl_rel" ].

expletive_it_confuse_v_x_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_confuse_v_expl_rel" ].

expletive_it_console_v_x_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_console_v_expl_rel" ].

expletive_it_cost_v_x_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_cost_v_x_rel" ].

expletive_it_damp_a_expl_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_damp_a_expl_rel" ].

expletive_it_delight_v_x_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_delight_v_expl_rel" ].

expletive_it_devastate_v_x_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_devastate_v_expl_rel" ].

expletive_it_dry_a_expl_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_dry_a_expl_rel" ].

expletive_it_excite_v_x_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_excite_v_expl_rel" ].

expletive_it_exist_v_expl_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_exist_v_expl_rel" ].

expletive_it_fascinate_v_x_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_fascinate_v_expl_rel" ].

expletive_it_feel_v_seem_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_feel_v_seem-to_rel" ].

expletive_it_flatter_v_x_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_flatter_v_expl_rel" ].

expletive_it_foggy_a_expl_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_foggy_a_expl_rel" ].

expletive_it_follow_v_x_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_follow_v_expl_rel" ].

expletive_it_fool_v_x_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_fool_v_expl_rel" ].

expletive_it_frighten_v_x_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_frighten_v_expl_rel" ].

expletive_it_frigid_a_expl_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_frigid_a_expl_rel" ].

expletive_it_frustrate_v_x_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_frustrate_v_expl_rel" ].

expletive_it_further_v_x_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_further_v_expl_rel" ].

expletive_it_gusty_a_expl_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_gusty_a_expl_rel" ].

expletive_it_happen_v_expl_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_happen_v_to_rel" ].

expletive_it_haunt_v_x_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_haunt_v_expl_rel" ].

expletive_it_horrify_v_x_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_horrify_v_expl_rel" ].

expletive_it_hot_a_expl_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_hot_a_expl_rel" ].

expletive_it_humiliate_v_x_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_humiliate_v_expl_rel" ].

expletive_it_hurt_v_x_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_hurt_v_expl_rel" ].

expletive_it_inspire_v_x_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_inspire_v_expl_rel" ].

expletive_it_interest_v_x_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_interest_v_expl_rel" ].

expletive_it_intimidate_v_x_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_intimidate_v_expl_rel" ].

expletive_it_intrigue_v_x_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_intrigue_v_expl_rel" ].

expletive_it_irritate_v_x_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_irritate_v_expl_rel" ].

expletive_it_leave_v_to_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_leave_v_to_rel" ].

expletive_it_look_v_seem_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_look_v_seem-to_rel" ].

expletive_it_make_v_1_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_make_v_1_rel" ].

expletive_it_matter_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_matter_v_to_rel" ].

expletive_it_mild_a_expl_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_mild_a_expl_rel" ].

expletive_it_occur_v_to_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_occur_v_to_rel" ].

expletive_it_offend_v_x_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_offend_v_expl_rel" ].

expletive_it_prefer_v_expl_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_prefer_v_expl_rel" ].

expletive_it_puzzle_v_x_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_puzzle_v_expl_rel" ].

expletive_it_rainy_a_expl_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_rainy_a_expl_rel" ].

expletive_it_seem_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_seem_v_to_rel" ].

expletive_it_sound_v_seem_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_sound_v_seem-to_rel" ].

expletive_it_strike_v_x_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_strike_v_expl_rel" ].

expletive_it_sunny_a_expl_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_sunny_a_expl_rel" ].

expletive_it_take_v_expl_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_take_v_expl_rel" ].

expletive_it_time_a_expl_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_time_a_expl-for_rel" ].

expletive_it_turn_v_out_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_turn_v_out_rel" ].

expletive_it_warm_a_expl_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_warm_a_expl_rel" ].

expletive_it_wet_a_expl_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_wet_a_expl_rel" ].

expletive_it_windy_a_expl_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_windy_a_expl_rel" ].

expletive_it_be_v_itcleft_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_be_v_itcleft_rel" ].

expletive_it_acceptable_a_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_acceptable_a_for_rel" ].

expletive_it_amazing_a_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_amazing_a_1_rel" ].

expletive_it_astonishing_a_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_astonishing_a_for_rel" ].

expletive_it_available_a_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_available_a_for_rel" ].

expletive_it_clear_a_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_clear_a_1_rel" ].

expletive_it_complicated_a_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_complicated_a_for_rel" ].

expletive_it_convenient_a_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_convenient_a_for_rel" ].

expletive_it_crucial_a_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_crucial_a_for_rel" ].

expletive_it_difficult_a_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_difficult_a_for_rel" ].

expletive_it_dreadful_a_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_dreadful_a_1_rel" ].

expletive_it_easier_a_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_easier_a_for_rel" ].

expletive_it_easiest_a_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_easiest_a_for_rel" ].

expletive_it_easy_a_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_easy_a_for_rel" ].

expletive_it_encouraging_a_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_encouraging_a_for_rel" ].

expletive_it_extraordinary_a_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_extraordinary_a_1_rel" ].

expletive_it_fun_a_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_fun_a_for_rel" ].

expletive_it_good_a_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_good_a_for_rel" ].

expletive_it_hard_a_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_hard_a_for_rel" ].

expletive_it_horrendous_a_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_horrendous_a_1_rel" ].

expletive_it_horrible_a_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_horrible_a_1_rel" ].

expletive_it_illegal_a_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_illegal_a_for_rel" ].

expletive_it_imperative_a_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_imperative_a_1_rel" ].

expletive_it_important_a_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_important_a_for_rel" ].

expletive_it_impossible_a_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_impossible_a_for_rel" ].

expletive_it_incredible_a_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_incredible_a_1_rel" ].

expletive_it_interesting_a_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_interesting_a_for_rel" ].

expletive_it_liberating_a_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_liberating_a_for_rel" ].

expletive_it_likely_a_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_likely_a_1_rel" ].

expletive_it_little_wonder_a_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_little+wonder_a_1_rel" ].

expletive_it_lucky_a_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_lucky_a_1_rel" ].

expletive_it_mild_a_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_mild_a_expl_rel" ].

expletive_it_necessary_a_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_necessary_a_for_rel" ].

expletive_it_nice_a_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_nice_a_for_rel" ].

expletive_it_obvious_a_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_obvious_a_1_rel" ].

expletive_it_odd_a_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_odd_a_1_rel" ].

expletive_it_okay_a_accept_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_okay_a_for_rel" ].

expletive_it_optional_a_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_optional_a_for_rel" ].

expletive_it_pointless_a_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_pointless_a_for_rel" ].

expletive_it_possible_a_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_possible_a_for_rel" ].

expletive_it_profitable_a_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_profitable_a_for_rel" ].

expletive_it_promising_a_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_promising_a_1_rel" ].

expletive_it_reasonable_a_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_reasonable_a_for_rel" ].

expletive_it_relieving_a_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_relieving_a_1_rel" ].

expletive_it_remarkable_a_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_remarkable_a_1_rel" ].

expletive_it_safe_a_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_safe_a_for_rel" ].

expletive_it_satisfactory_a_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_satisfactory_a_for_rel" ].

expletive_it_stupendous_a_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_stupendous_a_1_rel" ].

expletive_it_suffice_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_suffice_v_1_rel" ].

expletive_it_tough_a_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_tough_a_for_rel" ].

expletive_it_tragic_a_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_tragic_a_1_rel" ].

expletive_it_true_a_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_true_a_1_rel" ].

expletive_it_unfair_a_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_unfair_a_1_rel" ].

expletive_it_unlikely_a_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_unlikely_a_for_rel" ].

expletive_it_unnecessary_a_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_unnecessary_a_for_rel" ].

expletive_it_unreasonable_a_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_unreasonable_a_for_rel" ].

expletive_it_unsatisfactory_a_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_unsatisfactory_a_for_rel" ].

expletive_it_unwieldy_a_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_unwieldy_a_for_rel" ].

expletive_it_urgent_a_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_urgent_a_for_rel" ].

expletive_it_valuable_a_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_valuable_a_for_rel" ].

expletive_it_vital_a_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_vital_a_for_rel" ].

expletive_it_wise_a_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_wise_a_for_rel" ].

expletive_it_check_v_1_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_check_v_1_rel" ].

expletive_it_decide_v_1_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_decide_v_1_rel" ].

expletive_it_determine_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_determine_v_1_rel" ].

expletive_it_discover_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_discover_v_1_rel" ].

expletive_it_forget_v_1_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_forget_v_1_rel" ].

expletive_it_guarantee_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_guarantee_v_1_rel" ].

expletive_it_guess_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_guess_v_1_rel" ].

expletive_it_imagine_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_imagine_v_1_rel" ].

expletive_it_investigate_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_investigate_v_1_rel" ].

expletive_it_know_v_1_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_know_v_1_rel" ].

expletive_it_learn_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_learn_v_1_rel" ].

expletive_it_recall_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_recall_v_1_rel" ].

expletive_it_remember_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_remember_v_1_rel" ].

expletive_it_see_v_understand_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_see_v_understand_rel" ].

expletive_it_tell_v_1_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_tell_v_1_rel" ].

expletive_it_verify_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_verify_v_1_rel" ].

expletive_it_wonder_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_wonder_v_1_rel" ].

expletive_it_acknowledge_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_acknowledge_v_1_rel" ].

expletive_it_admit_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_admit_v_1_rel" ].

expletive_it_assume_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_assume_v_1_rel" ].

expletive_it_believe_v_1_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_believe_v_1_rel" ].

expletive_it_claim_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_claim_v_1_rel" ].

expletive_it_complain_v_1_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_complain_v_1_rel" ].

expletive_it_conclude_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_conclude_v_1_rel" ].

expletive_it_declare_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_declare_v_1_rel" ].

expletive_it_demand_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_demand_v_1_rel" ].

expletive_it_deny_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_deny_v_1_rel" ].

expletive_it_desire_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_desire_v_1_rel" ].

expletive_it_emphasize_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_emphasize_v_1_rel" ].

expletive_it_ensure_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_ensure_v_1_rel" ].

expletive_it_exhibit_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_exhibit_v_1_rel" ].

expletive_it_feel_v_1_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_feel_v_1_rel" ].

expletive_it_forecast_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_forecast_v_1_rel" ].

expletive_it_fret_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_fret_v_1_rel" ].

expletive_it_hope_v_1_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_hope_v_1_rel" ].

expletive_it_maintain_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_maintain_v_1_rel" ].

expletive_it_mean_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_mean_v_1_rel" ].

expletive_it_note_v_1_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_note_v_1_rel" ].

expletive_it_predict_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_predict_v_1_rel" ].

expletive_it_presume_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_presume_v_1_rel" ].

expletive_it_pretend_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_pretend_v_1_rel" ].

expletive_it_promise_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_promise_v_1_rel" ].

expletive_it_propose_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_propose_v_1_rel" ].

expletive_it_realize_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_realize_v_1_rel" ].

expletive_it_regret_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_regret_v_1_rel" ].

expletive_it_report_v_1_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_report_v_1_rel" ].

expletive_it_sense_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_sense_v_1_rel" ].

expletive_it_stress_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_stress_v_1_rel" ].

expletive_it_suspect_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_suspect_v_1_rel" ].

expletive_it_think_v_1_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_think_v_1_rel" ].

expletive_it_trust_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_trust_v_1_rel" ].

expletive_it_wish_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_wish_v_1_rel" ].

expletive_it_argue_v_1_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_argue_v_1_rel" ].

expletive_it_insist_v_1_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_insist_v_1_rel" ].

expletive_it_joke_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_joke_v_1_rel" ].

expletive_it_reckon_v_1_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_reckon_v_1_rel" ].

expletive_it_remark_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_remark_v_1_rel" ].

expletive_it_suppose_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_suppose_v_1_rel" ].

expletive_it_find_v_1_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_find_v_1_rel" ].

expletive_it_suppose_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_suppose_v_1_rel" ].

expletive_it_agree_v_1_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_agree_v_1_rel" ].

expletive_it_confirm_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_confirm_v_1_rel" ].

expletive_it_explain_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_explain_v_1_rel" ].

expletive_it_reconfirm_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_reconfirm_v_1_rel" ].

expletive_it_reply_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_reply_v_1_rel" ].

expletive_it_say_v_1_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_say_v_1_rel" ].

expletive_it_suggest_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_suggest_v_1_rel" ].

expletive_it_swear_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_swear_v_1_rel" ].

expletive_it_understand_v_by_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_understand_v_by_rel" ].

expletive_it_write_v_1_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_write_v_1_rel" ].

expletive_it_figure_v_out_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_figure_v_out_rel" ].

expletive_it_find_v_out_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_find_v_out_rel" ].

expletive_it_point_v_out_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_point_v_out_rel" ].

expletive_it_relief_n_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_relief_n_1_rel" ].

expletive_it_pleasure_n_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_pleasure_n_1_rel" ].

expletive_it_be_itcleft_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED _be_v_itcleft_rel ].

; FIX - maybe say ARG1 is not present, somehow?
be_c_is_itx_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                       PRED "_rain_v_1_rel",
                       ARG0 event & [ E [ MOOD indicative,
                                          TENSE present,
                                          ASPECT.STATIVE + ] ] ] !> ],
   FLAGS.TRIGGER "be_c_is" ].

that_compl_rule := generator_rule &
 [ CONTEXT [ RELS <! [ ARG1 #lbl ],
                     [ LBL #lbl,
                       PRED prpstn_m_rel,
                       ARG0.E.TENSE real_tense ] !> ],
   FLAGS.TRIGGER "that_c" ]. 

that_compl_subj_rule := generator_rule &
 [ CONTEXT [ RELS <! [ ARG1 #lbl ],
                     [ LBL #lbl,
                       PRED prpstn_m_rel,
                       ARG0.E.TENSE real_tense ] !> ],
   FLAGS.TRIGGER "that_c_subj" ]. 

to_compl_rule := generator_rule &
 [ CONTEXT [ RELS <! [ ARG1 #lbl ],
                     [ LBL #lbl,
                       PRED message_m_rel,
                       ARG0.E.TENSE no_tense ] !> ],
   FLAGS.TRIGGER "to_c_prop" ]. 

whether_compl_rule := generator_rule &
 [ CONTEXT [ RELS <! [ ARG1 #lbl ],
                     [ LBL #lbl,
                       PRED int_m_rel,
                       ARG0.E.TENSE real_tense ] !> ],
   FLAGS.TRIGGER "whether_c_fin" ]. 

whether_compl_inf_rule := generator_rule &
 [ CONTEXT [ RELS <! [ ARG1 #lbl ],
                     [ LBL #lbl,
                       PRED int_m_rel,
                       ARG0.E.TENSE no_tense ] !> ],
   FLAGS.TRIGGER "whether_c_inf" ]. 

whether_or_not_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "whether_or_not_c_fin" ].

whether_or_not_inf_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "whether_or_not_c_inf" ].

if_compl_rule := generator_rule &
 [ CONTEXT [ RELS <! [ ARG0 event,
                       ARG1 #lbl ],
                     [ LBL #lbl,
                       PRED int_m_rel,
                       ARG0.E.TENSE real_tense ] !> ],
   FLAGS.TRIGGER "if_c_indic" ]. 

if_compl_subj_rule := generator_rule &
 [ CONTEXT [ RELS <! [ ARG0 event,
                       ARG1 #lbl ],
                     [ LBL #lbl,
                       PRED int_m_rel,
                       ARG0.E.TENSE real_tense  ] !> ],
   FLAGS.TRIGGER "if_c_subjnct" ]. 

for_compl_rule := generator_rule &
 [ CONTEXT [ RELS <! [ ARG0 event,
                       ARG1 #lbl ],
                     [ LBL #lbl,
                       PRED prpstn_m_rel,
                       ARG0.E.TENSE no_tense  ] !> ],
   FLAGS.TRIGGER "for_c" ]. 

and_compl_rule := generator_rule &
 [ CONTEXT [ RELS <! [ ARG0 event,
                       ARG1 #lbl ],
                     [ LBL #lbl,
                       PRED prpstn_m_rel,
                       ARG0.E.TENSE no_tense  ] !> ],
   FLAGS.TRIGGER "and_c_prop" ]. 

but_compl_rule := generator_rule &
 [ CONTEXT [ RELS <! [ ARG0 event,
                       ARG1 #lbl ],
                     [ LBL #lbl,
                       PRED prpstn_m_rel,
                       ARG0.E.TENSE no_tense  ] !> ],
   FLAGS.TRIGGER "but_c_prop" ]. 

from_compl_rule := generator_rule &
 [ CONTEXT [ RELS <! [ ARG0 event,
                       ARG1 #lbl ],
                     [ LBL #lbl,
                       PRED prpstn_m_rel,
                       ARG0.E [ TENSE no_tense,
                                ASPECT.STATIVE + ] ] !> ],
   FLAGS.TRIGGER "from_c_prop" ]. 

like_compl_rule := generator_rule &
 [ CONTEXT [ RELS <! [ ARG0 event,
                       ARG1 #lbl ],
                     [ LBL #lbl,
                       PRED prpstn_or_like_m_rel,
                       ARG0.E.TENSE real_tense ] !> ],
   FLAGS.TRIGGER "like_c" ]. 

as_if_compl_rule := generator_rule &
 [ CONTEXT [ RELS <! [ ARG0 event,
                       ARG1 #lbl ],
                     [ LBL #lbl,
                       PRED prpstn_or_like_m_rel,
                       ARG0.E.TENSE real_tense ] !> ],
   FLAGS.TRIGGER "as_if_c" ]. 

as_though_compl_rule := generator_rule &
 [ CONTEXT [ RELS <! [ ARG0 event,
                       ARG1 #lbl ],
                     [ LBL #lbl,
                       PRED prpstn_or_like_m_rel,
                       ARG0.E.TENSE real_tense ] !> ],
   FLAGS.TRIGGER "as_though_c" ]. 

that_compl_rule2 := generator_rule &
 [ CONTEXT [ RELS <! [ ARG2 #lbl ],
                     [ LBL #lbl,
                       PRED prpstn_m_rel,
                       ARG0.E.TENSE real_tense ] !> ],
   FLAGS.TRIGGER "that_c" ]. 

that_compl_subj_rule2 := generator_rule &
 [ CONTEXT [ RELS <! [ ARG2 #lbl ],
                     [ LBL #lbl,
                       PRED prpstn_m_rel,
                       ARG0.E.TENSE real_tense ] !> ],
   FLAGS.TRIGGER "that_c_subj" ]. 

to_compl_rule2 := generator_rule &
 [ CONTEXT [ RELS <! [ ARG2 #lbl ],
                     [ LBL #lbl,
                       PRED message_m_rel,
                       ARG0.E.TENSE no_tense ] !> ],
   FLAGS.TRIGGER "to_c_prop" ]. 

whether_compl_rule2 := generator_rule &
 [ CONTEXT [ RELS <! [ ARG2 #lbl ],
                     [ LBL #lbl,
                       PRED int_m_rel,
                       ARG0.E.TENSE real_tense ] !> ],
   FLAGS.TRIGGER "whether_c_fin" ]. 

whether_compl_inf_rule2 := generator_rule &
 [ CONTEXT [ RELS <! [ ARG2 #lbl ],
                     [ LBL #lbl,
                       PRED int_m_rel,
                       ARG0.E.TENSE no_tense ] !> ],
   FLAGS.TRIGGER "whether_c_inf" ]. 

whether_or_not_rule2 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "whether_or_not_c_fin" ].

whether_or_not_inf_rule2 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "whether_or_not_c_inf" ].

if_compl_rule2 := generator_rule &
 [ CONTEXT [ RELS <! [ ARG0 event,
                       ARG2 #lbl ],
                     [ LBL #lbl,
                       PRED int_m_rel,
                       ARG0.E.TENSE real_tense ] !> ],
   FLAGS.TRIGGER "if_c_indic" ]. 

if_compl_subj_rule2 := generator_rule &
 [ CONTEXT [ RELS <! [ ARG0 event,
                       ARG2 #lbl ],
                     [ LBL #lbl,
                       PRED int_m_rel,
                       ARG0.E.TENSE real_tense ] !> ],
   FLAGS.TRIGGER "if_c_subjnct" ]. 

for_compl_rule2 := generator_rule &
 [ CONTEXT [ RELS <! [ ARG0 event,
                       ARG2 #lbl ],
                     [ LBL #lbl,
                       PRED prpstn_m_rel,
                       ARG0.E.TENSE no_tense ] !> ],
   FLAGS.TRIGGER "for_c" ]. 

and_compl_rule2 := generator_rule &
 [ CONTEXT [ RELS <! [ ARG0 event,
                       ARG2 #lbl ],
                     [ LBL #lbl,
                       PRED prpstn_m_rel,
                       ARG0.E.TENSE no_tense ] !> ],
   FLAGS.TRIGGER "and_c_prop" ]. 

but_compl_rule2 := generator_rule &
 [ CONTEXT [ RELS <! [ ARG0 event,
                       ARG2 #lbl ],
                     [ LBL #lbl,
                       PRED prpstn_m_rel,
                       ARG0.E.TENSE no_tense ] !> ],
   FLAGS.TRIGGER "but_c_prop" ]. 

from_compl_rule2 := generator_rule &
 [ CONTEXT [ RELS <! [ ARG0 event,
                       ARG2 #lbl ],
                     [ LBL #lbl,
                       PRED prpstn_m_rel,
                       ARG0.E [ TENSE no_tense,
                                ASPECT.STATIVE + ] ] !> ],
   FLAGS.TRIGGER "from_c_prop" ]. 

like_compl_rule2 := generator_rule &
 [ CONTEXT [ RELS <! [ ARG0 event,
                       ARG2 #lbl ],
                     [ LBL #lbl,
                       PRED prpstn_or_like_m_rel,
                       ARG0.E.TENSE real_tense ] !> ],
   FLAGS.TRIGGER "like_c" ]. 

as_if_compl_rule2 := generator_rule &
 [ CONTEXT [ RELS <! [ ARG0 event,
                       ARG2 #lbl ],
                     [ LBL #lbl,
                       PRED prpstn_or_like_m_rel,
                       ARG0.E.TENSE real_tense ] !> ],
   FLAGS.TRIGGER "as_if_c" ]. 

as_though_compl_rule2 := generator_rule &
 [ CONTEXT [ RELS <! [ ARG0 event,
                       ARG2 #lbl ],
                     [ LBL #lbl,
                       PRED prpstn_or_like_m_rel,
                       ARG0.E.TENSE real_tense ] !> ],
   FLAGS.TRIGGER "as_though_c" ]. 

that_compl_rule3 := generator_rule &
 [ CONTEXT [ RELS <! [ ARG3 #lbl ],
                     [ LBL #lbl,
                       PRED prpstn_m_rel,
                       ARG0.E.TENSE real_tense ] !> ],
   FLAGS.TRIGGER "that_c" ]. 

that_compl_subj_rule3 := generator_rule &
 [ CONTEXT [ RELS <! [ ARG3 #lbl ],
                     [ LBL #lbl,
                       PRED prpstn_m_rel,
                       ARG0.E.TENSE real_tense ] !> ],
   FLAGS.TRIGGER "that_c_subj" ]. 

to_compl_rule3 := generator_rule &
 [ CONTEXT [ RELS <! [ ARG3 #lbl ],
                     [ LBL #lbl,
                       PRED message_m_rel,
                       ARG0.E.TENSE no_tense ] !> ],
   FLAGS.TRIGGER "to_c_prop" ]. 

whether_compl_rule3 := generator_rule &
 [ CONTEXT [ RELS <! [ ARG3 #lbl ],
                     [ LBL #lbl,
                       PRED int_m_rel,
                       ARG0.E.TENSE real_tense ] !> ],
   FLAGS.TRIGGER "whether_c_fin" ]. 

whether_compl_inf_rule3 := generator_rule &
 [ CONTEXT [ RELS <! [ ARG3 #lbl ],
                     [ LBL #lbl,
                       PRED int_m_rel,
                       ARG0.E.TENSE no_tense ] !> ],
   FLAGS.TRIGGER "whether_c_inf" ]. 

whether_or_not_rule3 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "whether_or_not_c_fin" ].

whether_or_not_inf_rule3 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "whether_or_not_c_inf" ].

if_compl_rule3 := generator_rule &
 [ CONTEXT [ RELS <! [ ARG0 event,
                       ARG3 #lbl ],
                     [ LBL #lbl,
                       PRED int_m_rel,
                       ARG0.E.TENSE real_tense ] !> ],
   FLAGS.TRIGGER "if_c_indic" ]. 

if_compl_subj_rule3 := generator_rule &
 [ CONTEXT [ RELS <! [ ARG0 event,
                       ARG3 #lbl ],
                     [ LBL #lbl,
                       PRED int_m_rel,
                       ARG0.E.TENSE real_tense ] !> ],
   FLAGS.TRIGGER "if_c_subjnct" ]. 

for_compl_rule3 := generator_rule &
 [ CONTEXT [ RELS <! [ ARG0 event,
                       ARG3 #lbl ],
                     [ LBL #lbl,
                       PRED prpstn_m_rel,
                       ARG0.E.TENSE no_tense ] !> ],
   FLAGS.TRIGGER "for_c" ]. 

and_compl_rule3 := generator_rule &
 [ CONTEXT [ RELS <! [ ARG0 event,
                       ARG3 #lbl ],
                     [ LBL #lbl,
                       PRED prpstn_m_rel,
                       ARG0.E.TENSE no_tense ] !> ],
   FLAGS.TRIGGER "and_c_prop" ]. 

but_compl_rule3 := generator_rule &
 [ CONTEXT [ RELS <! [ ARG0 event,
                       ARG3 #lbl ],
                     [ LBL #lbl,
                       PRED prpstn_m_rel,
                       ARG0.E.TENSE no_tense ] !> ],
   FLAGS.TRIGGER "but_c_prop" ]. 

from_compl_rule3 := generator_rule &
 [ CONTEXT [ RELS <! [ ARG0 event,
                       ARG3 #lbl ],
                     [ LBL #lbl,
                       PRED prpstn_m_rel,
                       ARG0.E [ TENSE no_tense,
                                ASPECT.STATIVE + ] ] !> ],
   FLAGS.TRIGGER "from_c_prop" ]. 

like_compl_rule3 := generator_rule &
 [ CONTEXT [ RELS <! [ ARG0 event,
                       ARG3 #lbl ],
                     [ LBL #lbl,
                       PRED prpstn_or_like_m_rel,
                       ARG0.E.TENSE real_tense ] !> ],
   FLAGS.TRIGGER "like_c" ]. 

as_if_compl_rule3 := generator_rule &
 [ CONTEXT [ RELS <! [ ARG0 event,
                       ARG3 #lbl ],
                     [ LBL #lbl,
                       PRED prpstn_or_like_m_rel,
                       ARG0.E.TENSE real_tense ] !> ],
   FLAGS.TRIGGER "as_if_c" ]. 

as_though_compl_rule3 := generator_rule &
 [ CONTEXT [ RELS <! [ ARG0 event,
                       ARG3 #lbl ],
                     [ LBL #lbl,
                       PRED prpstn_or_like_m_rel,
                       ARG0.E.TENSE real_tense ] !> ],
   FLAGS.TRIGGER "as_though_c" ]. 

that_compl_rule4 := generator_rule &
 [ CONTEXT [ RELS <! [ ARG4 #lbl ],
                     [ LBL #lbl,
                       PRED prpstn_m_rel,
                       ARG0.E.TENSE real_tense ] !> ],
   FLAGS.TRIGGER "that_c" ]. 

that_compl_subj_rule4 := generator_rule &
 [ CONTEXT [ RELS <! [ ARG4 #lbl ],
                     [ LBL #lbl,
                       PRED prpstn_m_rel,
                       ARG0.E.TENSE real_tense ] !> ],
   FLAGS.TRIGGER "that_c_subj" ]. 

to_compl_rule4 := generator_rule &
 [ CONTEXT [ RELS <! [ ARG4 #lbl ],
                     [ LBL #lbl,
                       PRED message_m_rel,
                       ARG0.E.TENSE no_tense ] !> ],
   FLAGS.TRIGGER "to_c_prop" ]. 

whether_compl_rule4 := generator_rule &
 [ CONTEXT [ RELS <! [ ARG4 #lbl ],
                     [ LBL #lbl,
                       PRED int_m_rel,
                       ARG0.E.TENSE real_tense ] !> ],
   FLAGS.TRIGGER "whether_c_fin" ]. 

whether_compl_inf_rule4 := generator_rule &
 [ CONTEXT [ RELS <! [ ARG4 #lbl ],
                     [ LBL #lbl,
                       PRED int_m_rel,
                       ARG0.E.TENSE no_tense ] !> ],
   FLAGS.TRIGGER "whether_c_inf" ]. 

whether_or_not_rule4 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "whether_or_not_c_fin" ].

whether_or_not_inf_rule4 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "whether_or_not_c_inf" ].

if_compl_rule4 := generator_rule &
 [ CONTEXT [ RELS <! [ ARG0 event,
                       ARG4 #lbl ],
                     [ LBL #lbl,
                       PRED int_m_rel,
                       ARG0.E.TENSE real_tense ] !> ],
   FLAGS.TRIGGER "if_c_indic" ]. 

if_compl_subj_rule4 := generator_rule &
 [ CONTEXT [ RELS <! [ ARG0 event,
                       ARG4 #lbl ],
                     [ LBL #lbl,
                       PRED int_m_rel,
                       ARG0.E.TENSE real_tense ] !> ],
   FLAGS.TRIGGER "if_c_subjnct" ]. 

for_compl_rule4 := generator_rule &
 [ CONTEXT [ RELS <! [ ARG0 event,
                       ARG4 #lbl ],
                     [ LBL #lbl,
                       PRED prpstn_m_rel,
                       ARG0.E.TENSE no_tense ] !> ],
   FLAGS.TRIGGER "for_c" ]. 

and_compl_rule4 := generator_rule &
 [ CONTEXT [ RELS <! [ ARG0 event,
                       ARG4 #lbl ],
                     [ LBL #lbl,
                       PRED prpstn_m_rel,
                       ARG0.E.TENSE no_tense ] !> ],
   FLAGS.TRIGGER "and_c_prop" ]. 

but_compl_rule4 := generator_rule &
 [ CONTEXT [ RELS <! [ ARG0 event,
                       ARG4 #lbl ],
                     [ LBL #lbl,
                       PRED prpstn_m_rel,
                       ARG0.E.TENSE no_tense ] !> ],
   FLAGS.TRIGGER "but_c_prop" ]. 

from_compl_rule4 := generator_rule &
 [ CONTEXT [ RELS <! [ ARG0 event,
                       ARG4 #lbl ],
                     [ LBL #lbl,
                       PRED prpstn_m_rel,
                       ARG0.E [ TENSE no_tense,
                                ASPECT.STATIVE + ] ] !> ],
   FLAGS.TRIGGER "from_c_prop" ]. 

like_compl_rule4 := generator_rule &
 [ CONTEXT [ RELS <! [ ARG0 event,
                       ARG4 #lbl ],
                     [ LBL #lbl,
                       PRED prpstn_or_like_m_rel,
                       ARG0.E.TENSE real_tense ] !> ],
   FLAGS.TRIGGER "like_c" ]. 

as_if_compl_rule4 := generator_rule &
 [ CONTEXT [ RELS <! [ ARG0 event,
                       ARG4 #lbl ],
                     [ LBL #lbl,
                       PRED prpstn_or_like_m_rel,
                       ARG0.E.TENSE real_tense ] !> ],
   FLAGS.TRIGGER "as_if_c" ]. 

as_though_compl_rule4 := generator_rule &
 [ CONTEXT [ RELS <! [ ARG0 event,
                       ARG4 #lbl ],
                     [ LBL #lbl,
                       PRED prpstn_or_like_m_rel,
                       ARG0.E.TENSE real_tense ] !> ],
   FLAGS.TRIGGER "as_though_c" ]. 

that_compl_rule5 := generator_rule &
 [ CONTEXT [ RELS <! [ MARG #lbl ],
                     [ LBL #lbl,
                       PRED prpstn_m_rel,
                       ARG0.E.TENSE real_tense ] !> ],
   FLAGS.TRIGGER "that_c" ]. 

that_compl_subj_rule5 := generator_rule &
 [ CONTEXT [ RELS <! [ MARG #lbl ],
                     [ LBL #lbl,
                       PRED prpstn_m_rel,
                       ARG0.E.TENSE real_tense ] !> ],
   FLAGS.TRIGGER "that_c_subj" ]. 

to_compl_rule5 := generator_rule &
 [ CONTEXT [ RELS <! [ MARG #lbl ],
                     [ LBL #lbl,
                       PRED message_m_rel,
                       ARG0.E.TENSE no_tense ] !> ],
   FLAGS.TRIGGER "to_c_prop" ]. 

whether_compl_rule5 := generator_rule &
 [ CONTEXT [ RELS <! [ MARG #lbl ],
                     [ LBL #lbl,
                       PRED int_m_rel,
                       ARG0.E.TENSE real_tense ] !> ],
   FLAGS.TRIGGER "whether_c_fin" ]. 

whether_compl_inf_rule5 := generator_rule &
 [ CONTEXT [ RELS <! [ MARG #lbl ],
                     [ LBL #lbl,
                       PRED int_m_rel,
                       ARG0.E.TENSE no_tense ] !> ],
   FLAGS.TRIGGER "whether_c_inf" ]. 

whether_or_not_rule5 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "whether_or_not_c_fin" ].

whether_or_not_inf_rule5 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "whether_or_not_c_inf" ].

if_compl_rule5 := generator_rule &
 [ CONTEXT [ RELS <! [ MARG #lbl ],
                     [ LBL #lbl,
                       PRED int_m_rel,
                       ARG0.E.TENSE real_tense ] !> ],
   FLAGS.TRIGGER "if_c_indic" ]. 

if_compl_subj_rule5 := generator_rule &
 [ CONTEXT [ RELS <! [ MARG #lbl ],
                     [ LBL #lbl,
                       PRED int_m_rel,
                       ARG0.E.TENSE real_tense ] !> ],
   FLAGS.TRIGGER "if_c_subjnct" ]. 

for_compl_rule5 := generator_rule &
 [ CONTEXT [ RELS <! [ MARG #lbl ],
                     [ LBL #lbl,
                       PRED prpstn_m_rel,
                       ARG0.E.TENSE no_tense ] !> ],
   FLAGS.TRIGGER "for_c" ]. 

and_compl_rule5 := generator_rule &
 [ CONTEXT [ RELS <! [ MARG #lbl ],
                     [ LBL #lbl,
                       PRED prpstn_m_rel,
                       ARG0.E.TENSE no_tense ] !> ],
   FLAGS.TRIGGER "and_c_prop" ]. 

but_compl_rule5 := generator_rule &
 [ CONTEXT [ RELS <! [ MARG #lbl ],
                     [ LBL #lbl,
                       PRED prpstn_m_rel,
                       ARG0.E.TENSE no_tense ] !> ],
   FLAGS.TRIGGER "but_c_prop" ]. 

from_compl_rule5 := generator_rule &
 [ CONTEXT [ RELS <! [ MARG #lbl ],
                     [ LBL #lbl,
                       PRED prpstn_m_rel,
                       ARG0.E [ TENSE no_tense,
                                ASPECT.STATIVE + ] ] !> ],
   FLAGS.TRIGGER "from_c_prop" ]. 

like_compl_rule5 := generator_rule &
 [ CONTEXT [ RELS <! [ MARG #lbl ],
                     [ LBL #lbl,
                       PRED prpstn_or_like_m_rel,
                       ARG0.E.TENSE real_tense ] !> ],
   FLAGS.TRIGGER "like_c" ]. 

as_if_compl_rule5 := generator_rule &
 [ CONTEXT [ RELS <! [ MARG #lbl ],
                     [ LBL #lbl,
                       PRED prpstn_or_like_m_rel,
                       ARG0.E.TENSE real_tense ] !> ],
   FLAGS.TRIGGER "as_if_c" ]. 

as_though_compl_rule5 := generator_rule &
 [ CONTEXT [ RELS <! [ MARG #lbl ],
                     [ LBL #lbl,
                       PRED prpstn_or_like_m_rel,
                       ARG0.E.TENSE real_tense ] !> ],
   FLAGS.TRIGGER "as_though_c" ]. 

to_compl_rule6 := generator_rule &
 [ CONTEXT [ RELS <! [ LBL #lbl,
                       ARG0 ref-ind ],
                     [ LBL #lbl,
                       PRED prpstn_m_rel ],
                     [ ARG0 event & [ E.TENSE no_tense ] ] !> ],
   FLAGS.TRIGGER "to_c_prop" ]. 

; Empty prepositions/particles

about_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~[_-]about_rel" ] !> ],
   FLAGS.TRIGGER "about_prtcl" ]. 

across_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~[_-]across_rel" ] !> ],
   FLAGS.TRIGGER "across_prtcl" ]. 

after_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~[_-]after_rel" ] !> ],
   FLAGS.TRIGGER "after_prtcl" ]. 

against_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~[_-]against_rel" ] !> ],
   FLAGS.TRIGGER "against_prtcl" ]. 

ahead_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~[_-]ahead_rel" ] !> ],
   FLAGS.TRIGGER "ahead_prtcl" ]. 

along_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~[_-]along_rel" ] !> ],
   FLAGS.TRIGGER "along_prtcl" ]. 

among_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~[_-]among_rel" ] !> ],
   FLAGS.TRIGGER "among_prtcl" ]. 

apart_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~[_-]apart_rel" ] !> ],
   FLAGS.TRIGGER "apart_prtcl" ]. 

around_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~[_-]around_rel" ] !> ],
   FLAGS.TRIGGER "around_prtcl" ]. 

as_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~[_-]as_rel" ] !> ],
   FLAGS.TRIGGER "as_prtcl" ]. 

as_sel_rule3 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~[_-]as_rel" ] !> ],
   FLAGS.TRIGGER "as_prdp_p2" ]. 

as_sel_rule5 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~[_-]as_rel" ] !> ],
   FLAGS.TRIGGER "as_comp_prep" ]. 

as_sel_rule7 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~[_-]as_rel" ] !> ],
   FLAGS.TRIGGER "as_comp_prep_nc" ]. 

as_sel_rule9 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~[_-]as_rel" ] !> ],
   FLAGS.TRIGGER "as_it_adj_p" ]. 

as_sel_rule11 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~[_-]as_rel" ] !> ],
   FLAGS.TRIGGER "as_nbar" ]. 

as+to_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~[_-]as-to_rel" ] !> ],
   FLAGS.TRIGGER "as_to_prtcl" ]. 

aside_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~[_-]aside_rel" ] !> ],
   FLAGS.TRIGGER "aside_prtcl" ]. 

at_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~[_-]at_rel" ] !> ],
   FLAGS.TRIGGER "at_prtcl" ]. 

away_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~[_-]away_rel" ] !> ],
   FLAGS.TRIGGER "away_prtcl" ]. 

back_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~[_-]back_rel" ] !> ],
   FLAGS.TRIGGER "back_particle" ]. 

behind_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~[_-]behind_rel" ] !> ],
   FLAGS.TRIGGER "behind_prtcl" ]. 

between_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~[_-]between_rel" ] !> ],
   FLAGS.TRIGGER "between_prtcl" ]. 

by_pass_p_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ ARG0 event & [ E.ASPECT.STATIVE + ],
                       ARG1 ref-ind,
                       ARG2 individual ] !> ],
   FLAGS.TRIGGER "by_pass_p" ]. 

by_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~[_-]by_rel" ] !> ],
   FLAGS.TRIGGER "by_prtcl" ]. 

down_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~[_-]down_rel" ] !> ],
   FLAGS.TRIGGER "down_prtcl" ]. 

for_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~[_-]for_rel" ] !> ],
   FLAGS.TRIGGER "for_prtcl" ]. 

for_sel_rule3 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~[_-]for_rel" ] !> ],
   FLAGS.TRIGGER "for_nbar_p" ]. 

forth_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~[_-]forth_rel" ] !> ],
   FLAGS.TRIGGER "forth_prtcl" ]. 

forward_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~[_-]forward_rel" ] !> ],
   FLAGS.TRIGGER "forward_prtcl" ]. 

from_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~[_-]from_rel" ] !> ],
   FLAGS.TRIGGER "from_prtcl" ]. 

in_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~[_-]in_rel" ] !> ],
   FLAGS.TRIGGER "in_prtcl" ]. 

into_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~[_-]into_rel" ] !> ],
   FLAGS.TRIGGER "into_prtcl" ]. 

of_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~[_-]of_rel" ] !> ],
   FLAGS.TRIGGER "of_prtcl" ]. 

of_sel_rule2 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED day_rel ] !> ],
   FLAGS.TRIGGER "of_prtcl" ]. 

of_sel_rule3 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED mofy_rel ] !> ],
   FLAGS.TRIGGER "of_prtcl" ]. 

of_sel_rule4 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED place_n_rel ] !> ],
   FLAGS.TRIGGER "of_prtcl" ]. 

of_sel_rule5 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED day_part_rel ] !> ],
   FLAGS.TRIGGER "of_prtcl" ]. 

of_sel_rule6 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED def_day_part_rel ] !> ],
   FLAGS.TRIGGER "of_prtcl" ]. 

of_sel_rule7 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED nominalization_rel ] !> ],
   FLAGS.TRIGGER "of_prtcl" ]. 

of_sel_rule10 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~[_-]of-n_rel" ] !> ],
   FLAGS.TRIGGER "of_nbar_p" ]. 

off_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~[_-]off_rel" ] !> ],
   FLAGS.TRIGGER "off_prtcl" ]. 

on_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~[_-]on_rel" ] !> ],
   FLAGS.TRIGGER "on_prtcl" ]. 

onto_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~[_-]onto_rel" ] !> ],
   FLAGS.TRIGGER "onto_prtcl" ]. 

open_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~[_-]open_rel" ] !> ],
   FLAGS.TRIGGER "open_prtcl" ]. 

out+of_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~[_-]out-of_rel" ] !> ],
   FLAGS.TRIGGER "out_of_prtcl" ]. 

out_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~[_-]out_rel" ] !> ],
   FLAGS.TRIGGER "out_particle" ]. 

over_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~[_-]over_rel" ] !> ],
   FLAGS.TRIGGER "over_prtcl" ]. 

short_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~[_-]short_rel" ] !> ],
   FLAGS.TRIGGER "short_prtcl" ]. 

still_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~[_-]still_rel" ] !> ],
   FLAGS.TRIGGER "still_prtcl" ]. 

than_compar_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED comp_rel ] !> ],
   FLAGS.TRIGGER "than_p1" ]. 

than_compar_rule2 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED comp_rel ] !> ],
   FLAGS.TRIGGER "than_p1_nc" ]. 

through_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~[_-]through_rel" ] !> ],
   FLAGS.TRIGGER "through_prtcl" ]. 

than_compar_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED comp_rel ] !> ],
   FLAGS.TRIGGER "than_p1" ]. 

till_prtcl_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "till_p1" ].

till_prtcl_rule2 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "till_p2" ].

to_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~[_-]to_rel" ] !> ],
   FLAGS.TRIGGER "to_prtcl" ]. 

to_sel_rule2 := generator_rule &
 [ CONTEXT [ RELS <! [ ARG0 event,
                       ARG2 ref-ind,
                       ARG3 ref-ind ] !> ],
   FLAGS.TRIGGER "to_prtcl" ]. 

to_sel_rule3 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~[_-]to-n_rel" ] !> ],
   FLAGS.TRIGGER "to_nbar_p" ]. 

together_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~[_-]together_rel" ] !> ],
   FLAGS.TRIGGER "together_prtcl" ]. 

toward_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~[_-]toward_rel" ] !> ],
   FLAGS.TRIGGER "toward_prtcl" ]. 

towards_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~[_-]towards_rel" ] !> ],
   FLAGS.TRIGGER "towards_prtcl" ]. 

until_prtcl_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "until_prtcl" ].

up_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~[_-]up_rel" ] !> ],
   FLAGS.TRIGGER "up_prtcl" ]. 

upon_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~[_-]upon_rel" ] !> ],
   FLAGS.TRIGGER "upon_prtcl" ]. 

with_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~[_-]with_rel" ] !> ],
   FLAGS.TRIGGER "with_prtcl" ]. 

without_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~[_-]without_rel" ] !> ],
   FLAGS.TRIGGER "without_prtcl" ]. 

; Multiple empty particle/preps
around_sel_rule2 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~_around-for_rel" ] !> ],
   FLAGS.TRIGGER "around_prtcl" ]. 

around_sel_rule3 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~_around-to_rel" ] !> ],
   FLAGS.TRIGGER "around_prtcl" ]. 

back_sel_rule2 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~_back-at_rel" ] !> ],
   FLAGS.TRIGGER "back_particle" ]. 

back_sel_rule3 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~_back-from_rel" ] !> ],
   FLAGS.TRIGGER "back_particle" ]. 

down_sel_rule2 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~_down-to_rel" ] !> ],
   FLAGS.TRIGGER "down_prtcl" ]. 

forward_sel_rule2 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~_forward-to_rel" ] !> ],
   FLAGS.TRIGGER "forward_prtcl" ]. 

from_sel_rule2 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~_from-to_rel" ] !> ],
   FLAGS.TRIGGER "from_prtcl" ]. 

in_sel_rule2 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~_in-for_rel" ] !> ],
   FLAGS.TRIGGER "in_prtcl" ]. 

of_sel_rule8 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~_of-to_rel" ] !> ],
   FLAGS.TRIGGER "of_prtcl" ]. 

out_sel_rule2 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~_out-about_rel" ] !> ],
   FLAGS.TRIGGER "out_particle" ]. 

out_sel_rule3 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~_out-of_rel" ] !> ],
   FLAGS.TRIGGER "out_particle" ]. 

up_sel_rule2 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~_up-for_rel" ] !> ],
   FLAGS.TRIGGER "up_prtcl" ]. 

up_sel_rule3 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~_up-on_rel" ] !> ],
   FLAGS.TRIGGER "up_prtcl" ]. 

up_sel_rule4 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~_up-to_rel" ] !> ],
   FLAGS.TRIGGER "up_prtcl" ]. 

up_sel_rule5 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~_up-with_rel" ] !> ],
   FLAGS.TRIGGER "up_prtcl" ]. 


