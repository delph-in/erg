;;; Hey, emacs(1), this is -*- Mode: TDL; Package: LKB; -*- got it?

does1_pos_rule1 := arg0e_gtr &
 [ CONTEXT [ RELS <! [ PRED "~_v_",
                       ARG0 [ E [ MOOD indicative,
                                  TENSE present,
                                  ASPECT no_aspect ] ] ],
                     [ PRED neg_rel ] !> ],
   FLAGS.TRIGGER "does1_pos" ].

does1_pos_rule2 := arg0e_gtr &
 [ CONTEXT [ HOOK.LTOP #ltop,
             RELS <! [ PRED "~_v_",
                       ARG0 [ E [ MOOD indicative,
                                  TENSE present,
                                  ASPECT no_aspect ] ] ],
                     [ LBL #ltop,
                       PRED int_m_rel ] !> ],
   FLAGS.TRIGGER "does1_pos" ].

does1_pos_rule3 := arg0e_gtr &
 [ CONTEXT [ RELS <! [ PRED ellipsis_ref_rel,
                       ARG0 [ E [ MOOD indicative,
                                  TENSE present,
                                  ASPECT no_aspect ] ] ] !> ],
   FLAGS.TRIGGER "does1_pos" ].

does1_pos_rule5 := arg0e_gtr &
 [ CONTEXT [ RELS <! [ PRED "~_v_",
                       ARG0 #e & [ E [ MOOD indicative,
                                       TENSE present,
                                       ASPECT no_aspect ] ] ],
                     [ PRED conj_rel,
                       L-INDEX event & #e ],
                     [ PRED int_m_rel, ARG0 #e ] !> ],
   FLAGS.TRIGGER "does1_pos" ].

did1_pos_rule1 := arg0e_gtr &
 [ CONTEXT [ RELS <! [ PRED "~_v_",
                       ARG0 [ E [ MOOD indicative,
                                  TENSE past,
                                  ASPECT no_aspect ] ] ],
                     [ PRED neg_rel ] !> ],
   FLAGS.TRIGGER "did1_pos" ].

did1_pos_rule2 := arg0e_gtr &
 [ CONTEXT [ HOOK.LTOP #ltop,
             RELS <! [ LBL handle,
                       PRED "~_v_",
                       ARG0 [ E [ MOOD indicative,
                                  TENSE past,
                                  ASPECT no_aspect ] ] ],
                     [ LBL #ltop,
                       PRED int_m_rel ] !> ],
   FLAGS.TRIGGER "did1_pos" ].

did1_pos_rule3 := arg0e_gtr &
 [ CONTEXT [ RELS <! [ PRED ellipsis_rel,
                       ARG0 [ E [ MOOD indicative,
                                  TENSE past,
                                  ASPECT no_aspect ] ] ] !> ],
   FLAGS.TRIGGER "did1_pos" ].

did1_pos_rule5 := arg0e_gtr &
 [ CONTEXT [ RELS <! [ PRED "~_v_",
                       ARG0 [ E [ MOOD indicative,
                                  TENSE past,
                                  ASPECT no_aspect ] ] ],
                     [ PRED conj_rel,
                       L-INDEX event ],
                     [ PRED int_m_rel ] !> ],
   FLAGS.TRIGGER "did1_pos" ].

does1_neg_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED ne_x_rel ] !> ],
   FLAGS.TRIGGER "does1_neg_1" ].

did1_neg_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED ne_x_rel ] !> ],
   FLAGS.TRIGGER "did1_neg_1" ].

do1_neg_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED ne_x_rel ] !> ],
   FLAGS.TRIGGER "do1_neg_1" ].

will_neg_rule1 := arg0e_gtr &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ MOOD indicative,
                                  TENSE future ] ] ],
                     [ PRED ne_x_rel ] !> ],
   FLAGS.TRIGGER "will_aux_neg_1" ].

do1_pos_rule1 := arg0e_gtr &
 [ CONTEXT [ RELS <! [ PRED "~_v_",
                       ARG0 [ E [ MOOD indicative,
                                  TENSE present,
                                  ASPECT no_aspect ] ] ],
                     [ PRED neg_rel ] !> ],
   FLAGS.TRIGGER "do1_pos" ].

do1_pos_rule2 := arg0e_gtr &
 [ CONTEXT [ HOOK.LTOP #ltop,
             RELS <! [ PRED "~_v_",
                       ARG0 [ E [ MOOD indicative,
                                  TENSE present,
                                  ASPECT no_aspect ] ] ],
                     [ LBL #ltop,
                       PRED int_m_rel ] !> ],
   FLAGS.TRIGGER "do1_pos" ].

do1_pos_rule3 := arg0e_gtr &
 [ CONTEXT [ RELS <! [ PRED ellipsis_rel,
                       ARG0 [ E [ MOOD indicative,
                                  TENSE present,
                                  ASPECT no_aspect ] ] ] !> ],
   FLAGS.TRIGGER "do1_pos" ].

do1_pos_rule4 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED ne_x_rel ],
                     [ PRED neg_rel ] !> ],
   FLAGS.TRIGGER "do1_pos" ].

do1_pos_rule5 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED conj_rel,
                       L-INDEX event ],
                     [ PRED int_m_rel ] !> ],
   FLAGS.TRIGGER "do1_pos" ].

; OUTPUT.HOOK.INDEX currently no-op
has_aux_rule := arg0e_gtr &
 [ CONTEXT [ RELS <! [ LBL #h,
                       ARG0 #e & [ E [ MOOD indicative,
                                       TENSE present,
                                       ASPECT.PERF + ] ] ] !> ],
   OUTPUT.HOOK [ LTOP #h, INDEX #e ],
   FLAGS.TRIGGER "has_aux" ]. 

; DPF 8-Jul-02 - Removed TENSE real_tense "A could have been hiring B"
have_bse_aux_rule := arg0e_gtr &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ ASPECT.PERF + ] ] ] !> ],
   FLAGS.TRIGGER "have_bse_aux" ]. 

have_bse_aux_cx_1_rule := arg0e_gtr &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ ASPECT.PERF + ] ] ] !> ],
   FLAGS.TRIGGER "have_bse_aux_cx_1" ]. 

have_fin_aux_rule := arg0e_gtr &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ MOOD indicative,
                                  TENSE present,
                                  ASPECT.PERF + ] ] ] !> ],
   FLAGS.TRIGGER "have_fin_aux" ]. 

have_aux_prp_rule := arg0e_gtr &
 [ CONTEXT [ RELS <! [ ARG0.E.ASPECT.PERF + ],
                     [ PRED gerund_rel ] !> ],
   FLAGS.TRIGGER "have_aux_prp" ].

have_aux_prp_rule2 := arg0e_gtr &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE untensed,
                                  ASPECT [ PERF +,
                                           PROGR - ] ] ] ] !> ],
   FLAGS.TRIGGER "have_aux_prp" ]. 

had_aux_subj_rule := arg0e_gtr &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ MOOD subjunctive,
                                  ASPECT.PERF + ] ] ] !> ],
   FLAGS.TRIGGER "had_aux_subj" ].

had_aux_rule := arg0e_gtr &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ MOOD indicative,
                                  TENSE past,
                                  ASPECT.PERF + ] ] ] !> ],
   FLAGS.TRIGGER "had_aux" ].

has_aux_cx_rule := arg0e_gtr &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ MOOD indicative,
                                  TENSE present,
                                  ASPECT.PERF + ] ],
                       ARG1 #x & [ PNG.PN 3sg ] ] !> ],
   FLAGS [ EQUAL < semarg, #x >,
           TRIGGER "has_aux_cx" ] ].

has_aux_cx_2_rule := arg0e_gtr &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ MOOD indicative,
                                  TENSE present,
                                  ASPECT.PERF + ] ],
                       ARG1 #x & [ PNG.PN 3sg ] ] !> ],
   FLAGS [ EQUAL < semarg, #x >,
           TRIGGER "has_aux_cx_2" ] ].

have_fin_aux1_cx_rule := generator_rule &
 [ CONTEXT [ RELS <! [ ARG0 #e & event & 
                            [ E [ MOOD indicative,
                                  TENSE present,
                                  ASPECT.PERF + ] ],
                       ARG1 ref-ind & #x & [ PNG.PN non3sg ] ] !> ],
   FLAGS [ EQUAL < #e, #x >,
           TRIGGER "have_fin_aux_cx" ] ].

have_fin_aux2_cx_rule := arg0e_gtr &
 [ CONTEXT [ RELS <! [ ARG0 #e & event & 
                            [ E [ MOOD indicative,
                                  TENSE present,
                                  ASPECT.PERF + ] ],
                       ARG2 ref-ind & #x & [ PNG.PN non3sg ] ] !> ],
   FLAGS [ EQUAL < #e, #x >,
           TRIGGER "have_fin_aux_cx" ] ].

have_fin_aux3_cx_rule := arg0e_gtr &
 [ CONTEXT [ RELS <! [ ARG0 #e & event & 
                            [ E [ MOOD indicative,
                                  TENSE present,
                                  ASPECT.PERF + ] ],
                       ARG3 ref-ind & #x & [ PNG.PN non3sg ] ] !> ],
   FLAGS [ EQUAL < #e, #x >,
           TRIGGER "have_fin_aux_cx" ] ].

had_aux_cx_rule := arg0e_gtr &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ MOOD indicative,
                                  TENSE past,
                                  ASPECT.PERF + ] ] ] !> ],
   FLAGS.TRIGGER "had_aux_cx" ]. 

#|
both_conj_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED _and_c_rel ] !> ],
   FLAGS.TRIGGER "both_conj" ]. 

both_conj_rule_2 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED _as+well+as_c_rel ] !> ],
   FLAGS.TRIGGER "both_conj" ]. 

either_conj_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED _or_c_rel ] !> ],
   FLAGS.TRIGGER "either_conj" ].
|#

both_conj_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "both_conj" ]. 

either_conj_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "either_conj" ].

neither_conj_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED _nor_c_rel ] !> ],
   FLAGS.TRIGGER "neither_conj" ].

first_conj_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "first_conj" ].

;; For now, simply list the dozen or so closed-class verbs that require a
;; to_c_nonprop -- that is, verbs which do not take a message argument,
;; including the modals 'ought, used+to', the raising verbs 'begin,
;; cease, continue, fail, start', and the verbs 'get+to, happen+to, have+to,
;; tend+to', as well as 'start'

to_c_nonprop_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED _ought_v_modal_rel ] !> ],
   FLAGS.TRIGGER "to_c_nonprop" ].

to_c_nonprop_rule2 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED _used+to_v_modal_rel ] !> ],
   FLAGS.TRIGGER "to_c_nonprop" ].

to_c_nonprop_rule3 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "_begin_v_1_rel" ] !> ],
   FLAGS.TRIGGER "to_c_nonprop" ].

to_c_nonprop_rule4 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "_cease_v_1_rel" ] !> ],
   FLAGS.TRIGGER "to_c_nonprop" ].

to_c_nonprop_rule5 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "_continue_v_2_rel" ] !> ],
   FLAGS.TRIGGER "to_c_nonprop" ].

to_c_nonprop_rule6 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "_fail_v_1_rel" ] !> ],
   FLAGS.TRIGGER "to_c_nonprop" ].

to_c_nonprop_rule7 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "_start_v_1_rel" ] !> ],
   FLAGS.TRIGGER "to_c_nonprop" ].

to_c_nonprop_rule8 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "_happen_v_1_rel" ] !> ],
   FLAGS.TRIGGER "to_c_nonprop" ].

to_c_nonprop_rule9 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "_have_v_to_rel" ] !> ],
   FLAGS.TRIGGER "to_c_nonprop" ].

to_c_nonprop_rule10 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "_tend_v_1_rel" ] !> ],
   FLAGS.TRIGGER "to_c_nonprop" ].

to_c_nonprop_rule11 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED _got_v_to_rel ] !> ],
   FLAGS.TRIGGER "to_c_nonprop" ].

to_c_nonprop_rule12 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED _going+to_v_modal_rel ] !> ],
   FLAGS.TRIGGER "to_c_nonprop" ].

to_c_nonprop_rule13 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "_get_v_to_rel" ] !> ],
   FLAGS.TRIGGER "to_c_nonprop" ].

; Also trigger to_c_nonprop for for-to clauses with comparatives, as in
; 'Kim is too old for the manager to hire'
; FIX: Redo 'for' complementizer so it combines with to_c_prop, and eliminate
; this rule.
to_c_nonprop_inf_rule_2a := compl_prop_notense_arg2_gtr &
[ CONTEXT [ RELS <! [ PRED comp_too_rel,
                      ARG0 event ], relation !> ],
  FLAGS.TRIGGER "to_c_nonprop" ]. 

to_c_nonprop_inf_rule_2b := compl_prop_notense_arg2_gtr &
[ CONTEXT [ RELS <! [ PRED comp_enough_rel,
                      ARG0 event ], relation !> ],
  FLAGS.TRIGGER "to_c_nonprop" ]. 

; And trigger for instrumental relative clauses: 'money to buy food was scarce.

to_c_nonprop_instr_rule := generator_rule &
[ CONTEXT [ RELS <! [ PRED with_p_rel ] !> ],
  FLAGS.TRIGGER "to_c_nonprop" ]. 

there_expl_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED _be_v_there_rel ] !> ],
   FLAGS.TRIGGER "there_expl" ].

there_expl_rule2 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED ellipsis_expl_rel ] !> ],
   FLAGS.TRIGGER "there_expl" ].

will_aux_rule := arg0e_gtr &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ MOOD indicative,
                                  TENSE future ] ] ] !> ],
   FLAGS.TRIGGER "will_aux_pos" ].

will_aux_cx_rule := arg0e_gtr &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "will_aux_pos_cx" ].

will_aux_cx_2_rule := arg0e_gtr &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "will_aux_pos_cx_2" ].

; Only for questions

shall_aux_rule := arg0e_gtr &
 [ CONTEXT [ RELS <! [ ARG0 #e & [ E [ MOOD indicative,
                                       TENSE future ] ] ],
                     [ PRED int_m_rel,
                       ARG0 #e ] !> ],
   FLAGS.TRIGGER "shall_aux_pos" ].

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Copula rules

be_c_is1_rule := be_cop_x1_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ],
                       ARG1 [ PNG [ PN 3sg ] ] ] !> ],
   FLAGS.TRIGGER "be_c_is" ].

be_c_is2_rule := be_cop_x2_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ],
                       ARG2 [ PNG [ PN 3sg ] ] ] !> ],
   FLAGS.TRIGGER "be_c_is" ].

be_c_is3_rule := be_cop_x3_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ],
                       ARG3 [ PNG [ PN 3sg ] ] ] !> ],
   FLAGS.TRIGGER "be_c_is" ].

; Special case of prednom_state_rel: "it is a relief to stay home"
be_cop_prednom_is_rule := arg0e+1x_gtr &
 [ CONTEXT [ RELS <! [ PRED prednom_state_rel,
                       ARG0 [ E [ TENSE present,
                                  MOOD indicative ] ],
                       ARG1 [ PNG [ PN 3sg ] ] ] !> ],
   FLAGS.TRIGGER "be_c_is" ].

; Special case of unspec_loc_rel: "Kim is here"
be_cop_unspec_loc_is_rule := arg0e+1x_gtr &
 [ CONTEXT [ RELS <! [ PRED unspec_loc_rel,
                       ARG0 [ E [ TENSE present,
                                  MOOD indicative ] ],
                       ARG1 [ PNG [ PN 3sg ] ] ] !> ],
   FLAGS.TRIGGER "be_c_is" ].

; Special case of unspec_manner_rel: "how is that?"
be_cop_unspec_manner_is_rule := arg0e+1x_gtr &
 [ CONTEXT [ RELS <! [ PRED unspec_manner_rel,
                       ARG0 [ E [ TENSE present,
                                  MOOD indicative ] ],
                       ARG1 [ PNG [ PN 3sg ] ] ] !> ],
   FLAGS.TRIGGER "be_c_is" ].

; Special case of comparative
be_cop_compar_is_rule := arg0e_gtr &
 [ CONTEXT [ RELS <! [ PRED comp_or_superl_rel,
                       ARG0 [ E [ TENSE present,
                                  MOOD indicative ] ],
                       ARG1 #e ],
                     [ ARG0 #e,
                       ARG1 [ PNG [ PN 3sg ] ] ] !> ],
   FLAGS.TRIGGER "be_c_is" ].

be_c_is_h1_rule := be_cop_h1_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ] ] !> ],
   FLAGS.TRIGGER "be_c_is" ].

be_c_is_h2_rule := be_cop_h2_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ] ] !> ],
   FLAGS.TRIGGER "be_c_is" ].

be_c_is_2h_psv_rule := be_cop_2h_psv_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ] ]!> ],
   FLAGS.TRIGGER "be_c_is" ].

be_c_is_2x_psv_rule := be_cop_2x_psv_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ],
                       ARG2 [ PNG [ PN 3sg ] ] ] !> ],
   FLAGS.TRIGGER "be_c_is" ].

be_c_is_3x_psv_rule := be_cop_3x_psv_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ],
                       ARG3 [ PNG [ PN 3sg ] ] ] !> ],
   FLAGS.TRIGGER "be_c_is" ].

be_c_is_going+to_rule := be_cop_going+to_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ] ] !> ],
   FLAGS.TRIGGER "be_c_is" ].

;be_c_is_expl_1h_psv_rule := be_cop_expl_1h_psv_rule &
; [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ] ] !> ],
;   FLAGS.TRIGGER "be_c_is" ].

be_c_is_expl_2h_psv_rule := be_cop_expl_2h_psv_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ] ] !> ],
   FLAGS.TRIGGER "be_c_is" ].

be_c_is_prd_1x_rule := be_cop_prd_1x_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ],
                       ARG1 [ PNG [ PN 3sg ] ] ] !> ],
   FLAGS.TRIGGER "be_c_is" ].

be_c_is_prd_2x_rule := be_cop_prd_2x_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ],
                       ARG2 [ PNG [ PN 3sg ] ] ] !> ],
   FLAGS.TRIGGER "be_c_is" ].

be_c_is_prd_3x_rule := be_cop_prd_3x_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ],
                       ARG3 [ PNG [ PN 3sg ] ] ] !> ],
   FLAGS.TRIGGER "be_c_is" ].

be_c_is_prd_1h_rule := be_cop_prd_1h_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ] ] !> ],
   FLAGS.TRIGGER "be_c_is" ].

be_c_is_prd_2h_rule := be_cop_prd_2h_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ] ] !> ],
   FLAGS.TRIGGER "be_c_is" ].

be_c_is_inf_rule := be_cop_inf_rule &
 [ FLAGS.TRIGGER "be_c_is" ].

be_c_is_tag_th_expl_rule := be_cop_tag_th_expl_rule &
 [ CONTEXT [ RELS <! [ ARG1 [ PNG [ PN 3sg ] ] ],
                     [ ARG0 [ E [ TENSE present ] ] ] !> ],
   FLAGS.TRIGGER "be_c_is" ].

be_c_is_ellip_th_expl_rule := be_cop_ellip_th_expl_rule &
 [ CONTEXT [ RELS <! [ ARG1 [ PNG [ PN 3sg ] ] ],
                     [ ARG0 [ E [ TENSE present ] ] ] !> ],
   FLAGS.TRIGGER "be_c_is" ].

be_c_is_cx1_rule := arg0e+1x_gtr &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ MOOD indicative,
                                  TENSE present,
                                  ASPECT.PROGR + ] ],
                       ARG1 [ PNG.PN 3sg ] ] !> ],
   FLAGS.TRIGGER "be_c_is_cx" ].

be_c_is_cx2_rule := arg0e+2x_gtr &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ MOOD indicative,
                                  TENSE present,
                                  ASPECT.PROGR + ] ],
                       ARG2 [ PNG.PN 3sg ] ] !> ],
   FLAGS.TRIGGER "be_c_is_cx" ].

be_c_is_cx3_rule := arg0e+3x_gtr &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ MOOD indicative,
                                  TENSE present,
                                  ASPECT.PROGR + ] ],
                       ARG3 [ PNG.PN 3sg ] ] !> ],
   FLAGS.TRIGGER "be_c_is_cx" ].

be_c_is_cx_n_rule := arg0e+1h_gtr &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ MOOD indicative,
                                  TENSE present,
                                  ASPECT.PROGR + ] ] ] !> ],
   FLAGS.TRIGGER "be_c_is_cx" ].

; copula 'are'

be_c_are1_rule := be_cop_x1_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ],
                       ARG1 [ PNG [ PN non3sg ] ] ] !> ],
   FLAGS.TRIGGER "be_c_are" ].

be_c_are2_rule := be_cop_x2_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ],
                       ARG2 [ PNG [ PN non3sg ] ] ] !> ],
   FLAGS.TRIGGER "be_c_are" ].

be_c_are3_rule := be_cop_x3_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ],
                       ARG3 [ PNG [ PN non3sg ] ] ] !> ],
   FLAGS.TRIGGER "be_c_are" ].

be_c_are_2x_psv_rule := be_cop_2x_psv_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ],
                       ARG2 [ PNG [ PN non3sg ] ] ] !> ],
   FLAGS.TRIGGER "be_c_are" ].

be_c_are_3x_psv_rule := be_cop_3x_psv_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ],
                       ARG3 [ PNG [ PN non3sg ] ] ] !> ],
   FLAGS.TRIGGER "be_c_are" ].

;be_c_are_expl_1h_psv_rule := be_cop_expl_1h_psv_rule &
; [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ] ] !> ],
;   FLAGS.TRIGGER "be_c_are" ].

be_c_are_expl_2h_psv_rule := be_cop_expl_2h_psv_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ] ] !> ],
   FLAGS.TRIGGER "be_c_are" ].

be_c_are_prd_1x_rule := be_cop_prd_1x_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ],
                       ARG1 [ PNG [ PN non3sg ] ] ] !> ],
   FLAGS.TRIGGER "be_c_are" ].

be_c_are_prd_2x_rule := be_cop_prd_2x_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ],
                       ARG2 [ PNG [ PN non3sg ] ] ] !> ],
   FLAGS.TRIGGER "be_c_are" ].

be_c_are_prd_3x_rule := be_cop_prd_3x_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ],
                       ARG3 [ PNG [ PN non3sg ] ] ] !> ],
   FLAGS.TRIGGER "be_c_are" ].

; Special case of unspec_loc_rel: "They are here"
be_cop_unspec_loc_are_rule := arg0e+1x_gtr &
 [ CONTEXT [ RELS <! [ PRED unspec_loc_rel,
                       ARG0 [ E [ TENSE present ] ],
                       ARG1 [ PNG [ PN non3sg ] ] ] !> ],
   FLAGS.TRIGGER "be_c_are" ].

; Special case of unspec_manner_rel: "how are those?"
be_cop_unspec_manner_are_rule := arg0e+1x_gtr &
 [ CONTEXT [ RELS <! [ PRED unspec_manner_rel,
                       ARG0 [ E [ TENSE present ] ],
                       ARG1 [ PNG [ PN non3sg ] ] ] !> ],
   FLAGS.TRIGGER "be_c_are" ].

; Special case of comparative
be_cop_compar_are_rule := arg0e_gtr &
 [ CONTEXT [ RELS <! [ PRED comp_or_superl_rel,
                       ARG0 [ E [ TENSE present ] ],
                       ARG1 #e ],
                     [ ARG0 #e,
                       ARG1 [ PNG [ PN non3sg ] ] ] !> ],
   FLAGS.TRIGGER "be_c_are" ].

be_c_are_going+to_rule := be_cop_going+to_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ] ] !> ],
   FLAGS.TRIGGER "be_c_are" ].

be_c_are_inf_rule := be_cop_inf_rule &
 [ FLAGS.TRIGGER "be_c_are" ].

be_c_are_tag_th_expl_rule := be_cop_tag_th_expl_rule &
 [ CONTEXT [ RELS <! [ ARG1 [ PNG [ PN non3sg ] ] ],
                     [ ARG0 [ E [ TENSE present ] ] ] !> ],
   FLAGS.TRIGGER "be_c_are" ].

be_c_are_ellip_th_expl_rule := be_cop_ellip_th_expl_rule &
 [ CONTEXT [ RELS <! [ ARG1 [ PNG [ PN non3sg ] ] ],
                     [ ARG0 [ E [ TENSE present ] ] ] !> ],
   FLAGS.TRIGGER "be_c_are" ].

be_c_are_cx1_rule := arg0e+1x_gtr &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ MOOD indicative,
                                  TENSE present,
                                  ASPECT.PROGR + ] ],
                       ARG1 [ PNG.PN non3sg ] ] !> ],
   FLAGS.TRIGGER "be_c_are_cx" ].

be_c_are_cx2_rule := arg0e+2x_gtr &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ MOOD indicative,
                                  TENSE present,
                                  ASPECT.PROGR + ] ],
                       ARG2 [ PNG.PN non3sg ] ] !> ],
   FLAGS.TRIGGER "be_c_are_cx" ].

be_c_are_cx3_rule := arg0e+3x_gtr &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ MOOD indicative,
                                  TENSE present,
                                  ASPECT.PROGR + ] ],
                       ARG3 [ PNG.PN non3sg ] ] !> ],
   FLAGS.TRIGGER "be_c_are_cx" ].

; copula 'am'
be_c_am1_rule := be_cop_x1_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ],
                       ARG1 [ PNG [ PN 1sg ] ] ] !> ],
   FLAGS.TRIGGER "be_c_am" ].

be_c_am2_rule := be_cop_x2_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ],
                       ARG2 [ PNG [ PN 1sg ] ] ] !> ],
   FLAGS.TRIGGER "be_c_am" ].

be_c_am3_rule := be_cop_x3_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ],
                       ARG3 [ PNG [ PN 1sg ] ] ] !> ],
   FLAGS.TRIGGER "be_c_am" ].

be_c_am_2x_psv_rule := be_cop_2x_psv_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ],
                       ARG2 [ PNG [ PN 1sg ] ] ] !> ],
   FLAGS.TRIGGER "be_c_am" ].

be_c_am_3x_psv_rule := be_cop_3x_psv_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ],
                       ARG3 [ PNG [ PN 1sg ] ] ] !> ],
   FLAGS.TRIGGER "be_c_am" ].

be_c_am_prd_1x_rule := be_cop_prd_1x_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ],
                       ARG1 [ PNG [ PN 1sg ] ] ] !> ],
   FLAGS.TRIGGER "be_c_am" ].

be_c_am_prd_2x_rule := be_cop_prd_2x_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ],
                       ARG2 [ PNG [ PN 1sg ] ] ] !> ],
   FLAGS.TRIGGER "be_c_am" ].

be_c_am_prd_3x_rule := be_cop_prd_3x_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ],
                       ARG3 [ PNG [ PN 1sg ] ] ] !> ],
   FLAGS.TRIGGER "be_c_am" ].

be_c_am_going+to_rule := be_cop_going+to_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ] ] !> ],
   FLAGS.TRIGGER "be_c_am" ].

be_c_am_inf_rule := be_cop_inf_rule &
 [ FLAGS.TRIGGER "be_c_am" ].


be_c_am_cx1_rule := arg0e+1x_gtr &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ MOOD indicative,
                                  TENSE present,
                                  ASPECT.PROGR + ] ],
                       ARG1 [ PNG.PN 1sg ] ] !> ],
   FLAGS.TRIGGER "be_c_am_cx" ].

be_c_am_cx2_rule := arg0e+2x_gtr &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ MOOD indicative,
                                  TENSE present,
                                  ASPECT.PROGR + ] ],
                       ARG2 [ PNG.PN 1sg ] ] !> ],
   FLAGS.TRIGGER "be_c_am_cx" ].

be_c_am_cx3_rule := arg0e+3x_gtr &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ MOOD indicative,
                                  TENSE present,
                                  ASPECT.PROGR + ] ],
                       ARG3 [ PNG.PN 1sg ] ] !> ],
   FLAGS.TRIGGER "be_c_am_cx" ].

be_c_am_cx1b_rule := arg0e_gtr &
 [ CONTEXT [ RELS <! [ ARG0 #e & [ E [ MOOD indicative,
                                       TENSE present ] ],
                       ARG1 #x & ref-ind & [ PNG [ PN 1sg ] ] ] !> ],
   FILTER.RELS <! [ PRED prop_imp_m_rel,
                    ARG0 #e,
                    PSV semarg & #u ] !>,
   FLAGS [ EQUAL < semarg, #x, #u >,
           TRIGGER "be_c_am_cx" ] ].

be_c_am_cx2b_rule := arg0e_gtr &
 [ CONTEXT [ RELS <! [ ARG0 #e & [ E [ MOOD indicative,
                                       TENSE present ] ],
                       ARG2 #x & ref-ind & [ PNG [ PN 1sg ] ] ] !> ],
   FILTER.RELS <! [ PRED prop_imp_m_rel,
                    ARG0 #e,
                    PSV semarg & #u ] !>,
   FLAGS [ EQUAL < semarg, #x, #u >,
           TRIGGER "be_c_am_cx" ] ].

be_c_am_cx3b_rule := arg0e_gtr &
 [ CONTEXT [ RELS <! [ ARG0 #e & [ E [ MOOD indicative,
                                       TENSE present ] ],
                       ARG3 #x & ref-ind & [ PNG [ PN 1sg ] ] ] !> ],
   FILTER.RELS <! [ PRED prop_imp_m_rel,
                    ARG0 #e,
                    PSV semarg & #u ] !>,
   FLAGS [ EQUAL < semarg, #x, #u >,
           TRIGGER "be_c_am_cx" ] ].

be_c_am_cx1c_rule := arg0e+1x_gtr &
 [ CONTEXT [ RELS <! [ PRED "~_[pa]_",
                       ARG0 [ E [ MOOD indicative,
                                  TENSE present ] ],
                       ARG1 [ PNG [ PN 1sg ] ] ] !> ],
   FLAGS.TRIGGER "be_c_am_cx" ].

be_c_am_cx2c_rule := arg0e+2x_gtr &
 [ CONTEXT [ RELS <! [ PRED "~_[pa]_",
                       ARG0 [ E [ MOOD indicative,
                                  TENSE present ] ],
                       ARG2 [ PNG [ PN 1sg ] ] ] !> ],
   FLAGS.TRIGGER "be_c_am_cx" ].

be_c_am_cx3c_rule := arg0e+3x_gtr &
 [ CONTEXT [ RELS <! [ PRED "~_[pa]_",
                       ARG0 [ E [ MOOD indicative,
                                  TENSE present ] ],
                       ARG3 [ PNG [ PN 1sg ] ] ] !> ],
   FLAGS.TRIGGER "be_c_am_cx" ].

; copula 'was'
be_c_was1_rule := be_cop_x1_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE past ] ],
                       ARG1 [ PNG [ PN 1or3sg ] ] ] !> ],
   FLAGS.TRIGGER "be_c_was" ].

be_c_was2_rule := be_cop_x2_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE past ] ],
                       ARG2 [ PNG [ PN 1or3sg ] ] ] !> ],
   FLAGS.TRIGGER "be_c_was" ].

be_c_was3_rule := be_cop_x3_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE past ] ],
                       ARG3 [ PNG [ PN 1or3sg ] ] ] !> ],
   FLAGS.TRIGGER "be_c_was" ].

; Special case of prednom_state_rel: "it was a relief to stay home"
be_cop_prednom_was_rule := arg0e+1x_gtr &
 [ CONTEXT [ RELS <! [ PRED prednom_state_rel,
                       ARG0 [ E [ TENSE past,
                                  MOOD indicative ] ],
                       ARG1 [ PNG [ PN 1or3sg ] ] ] !> ],
   FLAGS.TRIGGER "be_c_was" ].

; Special case of unspec_loc_rel: "Kim was here"
be_cop_unspec_loc_was_rule := arg0e+1x_gtr &
 [ CONTEXT [ RELS <! [ PRED unspec_loc_rel,
                       ARG0 [ E [ TENSE past,
                                  MOOD indicative ] ],
                       ARG1 [ PNG [ PN 1or3sg ] ] ] !> ],
   FLAGS.TRIGGER "be_c_was" ].

; Special case of unspec_manner_rel: "How was that?"
be_cop_unspec_manner_was_rule := arg0e+1x_gtr &
 [ CONTEXT [ RELS <! [ PRED unspec_manner_rel,
                       ARG0 [ E [ TENSE past,
                                  MOOD indicative ] ],
                       ARG1 [ PNG [ PN 1or3sg ] ] ] !> ],
   FLAGS.TRIGGER "be_c_was" ].

; Special case of comparative
be_cop_compar_was_rule := arg0e_gtr &
 [ CONTEXT [ RELS <! [ PRED comp_or_superl_rel,
                       ARG0 [ E [ TENSE past,
                                  MOOD indicative ] ],
                       ARG1 #e ],
                     [ ARG0 #e,
                       ARG1 [ PNG [ PN 1or3sg ] ] ] !> ],
   FLAGS.TRIGGER "be_c_was" ].

be_c_was_h1_rule := be_cop_h1_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE past ] ] ] !> ],
   FLAGS.TRIGGER "be_c_was" ].

be_c_was_h2_rule := be_cop_h2_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE past ] ] ] !> ],
   FLAGS.TRIGGER "be_c_was" ].

be_c_was_2h_psv_rule := be_cop_2h_psv_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE past ] ] ] !> ],
   FLAGS.TRIGGER "be_c_was" ].

be_c_was_2x_psv_rule := be_cop_2x_psv_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE past ] ],
                       ARG2 [ PNG [ PN 1or3sg ] ] ] !> ],
   FLAGS.TRIGGER "be_c_was" ].

be_c_was_3x_psv_rule := be_cop_3x_psv_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE past ] ],
                       ARG3 [ PNG [ PN 1or3sg ] ] ] !> ],
   FLAGS.TRIGGER "be_c_was" ].

be_c_was_going+to_rule := be_cop_going+to_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE past ] ] ] !> ],
   FLAGS.TRIGGER "be_c_was" ].

;be_c_was_expl_1h_psv_rule := be_cop_expl_1h_psv_rule &
; [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE past ] ] ] !> ],
;   FLAGS.TRIGGER "be_c_was" ].

be_c_was_expl_2h_psv_rule := be_cop_expl_2h_psv_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE past ] ] ] !> ],
   FLAGS.TRIGGER "be_c_was" ].

be_c_was_prd_1x_rule := be_cop_prd_1x_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE past ] ],
                       ARG1 [ PNG [ PN 1or3sg ] ] ] !> ],
   FLAGS.TRIGGER "be_c_was" ].

be_c_was_prd_2x_rule := be_cop_prd_2x_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE past ] ],
                       ARG2 [ PNG [ PN 1or3sg ] ] ] !> ],
   FLAGS.TRIGGER "be_c_was" ].

be_c_was_prd_3x_rule := be_cop_prd_3x_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE past ] ],
                       ARG3 [ PNG [ PN 1or3sg ] ] ] !> ],
   FLAGS.TRIGGER "be_c_was" ].

be_c_was_prd_1h_rule := be_cop_prd_1h_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE past ] ] ] !> ],
   FLAGS.TRIGGER "be_c_was" ].

be_c_was_prd_2h_rule := be_cop_prd_2h_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE past ] ] ] !> ],
   FLAGS.TRIGGER "be_c_was" ].

be_c_was_inf_rule := be_cop_inf_rule &
 [ FLAGS.TRIGGER "be_c_was" ].

be_c_was_tag_th_expl_rule := be_cop_tag_th_expl_rule &
 [ CONTEXT [ RELS <! [ ARG1 [ PNG [ PN 1or3sg ] ] ],
                     [ ARG0 [ E [ TENSE past ] ] ] !> ],
   FLAGS.TRIGGER "be_c_was" ].

be_c_was_ellip_th_expl_rule := be_cop_ellip_th_expl_rule &
 [ CONTEXT [ RELS <! [ ARG1 [ PNG [ PN 1or3sg ] ] ],
                     [ ARG0 [ E [ TENSE past ] ] ] !> ],
   FLAGS.TRIGGER "be_c_was" ].

be_c_was_subj_rule := arg0e_gtr &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ MOOD subjunctive,
                                  TENSE real_tense,
                                  ASPECT [ PROGR + ] ] ] ] !> ],
   FLAGS.TRIGGER "be_c_was_subj" ].

; copula 'were'

be_c_were1_rule := be_cop_x1_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE past ] ],
                       ARG1 [ PNG [ PN non3sg ] ] ] !> ],
   FLAGS.TRIGGER "be_c_were" ].

be_c_were2_rule := be_cop_x2_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE past ] ],
                       ARG2 [ PNG [ PN non3sg ] ] ] !> ],
   FLAGS.TRIGGER "be_c_were" ].

be_c_were3_rule := be_cop_x3_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE past ] ],
                       ARG3 [ PNG [ PN non3sg ] ] ] !> ],
   FLAGS.TRIGGER "be_c_were" ].

be_c_were_2x_psv_rule := be_cop_2x_psv_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE past ] ],
                       ARG2 [ PNG [ PN non3sg ] ] ] !> ],
   FLAGS.TRIGGER "be_c_were" ].

be_c_were_3x_psv_rule := be_cop_3x_psv_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE past ] ],
                       ARG3 [ PNG [ PN non3sg ] ] ] !> ],
   FLAGS.TRIGGER "be_c_were" ].

;be_c_were_expl_1h_psv_rule := be_cop_expl_1h_psv_rule &
; [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE past ] ] ] !> ],
;   FLAGS.TRIGGER "be_c_were" ].

be_c_were_expl_2h_psv_rule := be_cop_expl_2h_psv_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE past ] ] ] !> ],
   FLAGS.TRIGGER "be_c_were" ].

be_c_were_prd_1x_rule := be_cop_prd_1x_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE past ] ],
                       ARG1 [ PNG [ PN non3sg ] ] ] !> ],
   FLAGS.TRIGGER "be_c_were" ].

be_c_were_prd_2x_rule := be_cop_prd_2x_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE past ] ],
                       ARG2 [ PNG [ PN non3sg ] ] ] !> ],
   FLAGS.TRIGGER "be_c_were" ].

be_c_were_prd_3x_rule := be_cop_prd_3x_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE past ] ],
                       ARG3 [ PNG [ PN non3sg ] ] ] !> ],
   FLAGS.TRIGGER "be_c_were" ].

; Special case of unspec_loc_rel: "They are here"
be_cop_unspec_loc_were_rule := arg0e+1x_gtr &
 [ CONTEXT [ RELS <! [ PRED unspec_loc_rel,
                       ARG0 [ E [ TENSE past ] ],
                       ARG1 [ PNG [ PN non3sg ] ] ] !> ],
   FLAGS.TRIGGER "be_c_were" ].

; Special case of unspec_manner_rel: "how were those?"
be_cop_unspec_manner_were_rule := arg0e+1x_gtr &
 [ CONTEXT [ RELS <! [ PRED unspec_manner_rel,
                       ARG0 [ E [ TENSE past ] ],
                       ARG1 [ PNG [ PN non3sg ] ] ] !> ],
   FLAGS.TRIGGER "be_c_were" ].

; Special case of comparative
be_cop_compar_were_rule := arg0e_gtr &
 [ CONTEXT [ RELS <! [ PRED comp_or_superl_rel,
                       ARG0 [ E [ TENSE past ] ],
                       ARG1 #e ],
                     [ ARG0 #e,
                       ARG1 [ PNG [ PN non3sg ] ] ] !> ],
   FLAGS.TRIGGER "be_c_were" ].

be_c_were_going+to_rule := be_cop_going+to_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE past ] ] ] !> ],
   FLAGS.TRIGGER "be_c_were" ].

be_c_were_inf_rule := be_cop_inf_rule &
 [ FLAGS.TRIGGER "be_c_were" ].

be_c_were_tag_th_expl_rule := be_cop_tag_th_expl_rule &
 [ CONTEXT [ RELS <! [ ARG1 [ PNG [ PN non3sg ] ] ],
                     [ ARG0 [ E [ TENSE past ] ] ] !> ],
   FLAGS.TRIGGER "be_c_were" ].

be_c_were_ellip_th_expl_rule := be_cop_ellip_th_expl_rule &
 [ CONTEXT [ RELS <! [ ARG1 [ PNG [ PN non3sg ] ] ],
                     [ ARG0 [ E [ TENSE past ] ] ] !> ],
   FLAGS.TRIGGER "be_c_were" ].

be_c_were_subj_rule := arg0e_gtr &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ MOOD subjunctive,
                                  TENSE real_tense,
                                  ASPECT.PROGR + ] ] ] !> ],
   FLAGS.TRIGGER "be_c_were_subj" ].


; DPF 8-Jul-02 - Removed TENSE real_tense "A could have been hiring B"

; copula 'been'

be_c_been1_rule := be_cop_x1_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ ASPECT.PERF + ] ] ] !> ],
   FLAGS.TRIGGER "be_c_been" ].

be_c_been2_rule := be_cop_x2_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ ASPECT.PERF + ] ] ] !> ],
   FLAGS.TRIGGER "be_c_been" ].

be_c_been3_rule := be_cop_x3_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ ASPECT.PERF + ] ] ] !> ],
   FLAGS.TRIGGER "be_c_been" ].

; Special case of prednom_state_rel: "it has been a relief to stay home"
be_cop_prednom_been_rule := arg0e+1x_gtr &
 [ CONTEXT [ RELS <! [ PRED prednom_state_rel,
                       ARG0 [ E [ ASPECT.PERF + ] ] ] !> ],
   FLAGS.TRIGGER "be_c_been" ].

; Special case of unspec_loc_rel: "Kim has been here"
be_cop_unspec_loc_been_rule := arg0e+1x_gtr &
 [ CONTEXT [ RELS <! [ PRED unspec_loc_rel,
                       ARG0 [ E [ ASPECT.PERF + ] ] ] !> ],
   FLAGS.TRIGGER "be_c_been" ].

; Special case of unspec_manner_rel: "how has that been?"
be_cop_unspec_manner_been_rule := arg0e+1x_gtr &
 [ CONTEXT [ RELS <! [ PRED unspec_manner_rel,
                       ARG0 [ E [ ASPECT.PERF + ] ] ] !> ],
   FLAGS.TRIGGER "be_c_been" ].

; Special case of comparative
be_cop_compar_been_rule := arg0e_gtr &
 [ CONTEXT [ RELS <! [ PRED comp_or_superl_rel,
                       ARG0 [ E [ ASPECT.PERF + ] ] ] !> ],
   FLAGS.TRIGGER "be_c_was" ].

be_c_been_h1_rule := be_cop_h1_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ ASPECT.PERF + ] ] ] !> ],
   FLAGS.TRIGGER "be_c_been" ].

be_c_been_h2_rule := be_cop_h2_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ ASPECT.PERF + ] ] ] !> ],
   FLAGS.TRIGGER "be_c_been" ].

be_c_been_2h_psv_rule := be_cop_2h_psv_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ ASPECT.PERF + ] ] ] !> ],
   FLAGS.TRIGGER "be_c_been" ].

be_c_been_2x_psv_rule := be_cop_2x_psv_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ ASPECT.PERF + ] ] ] !> ],
   FLAGS.TRIGGER "be_c_been" ].

be_c_been_3x_psv_rule := be_cop_3x_psv_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ ASPECT.PERF + ] ] ] !> ],
   FLAGS.TRIGGER "be_c_been" ].

be_c_been_prd_1x_rule := be_cop_prd_1x_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ ASPECT.PERF + ] ] ] !> ],
   FLAGS.TRIGGER "be_c_been" ].

be_c_been_prd_2x_rule := be_cop_prd_2x_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ ASPECT.PERF + ] ] ] !> ],
   FLAGS.TRIGGER "be_c_been" ].

be_c_been_prd_3x_rule := be_cop_prd_3x_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ ASPECT.PERF + ] ] ] !> ],
   FLAGS.TRIGGER "be_c_been" ].

be_c_been_prd_1h_rule := be_cop_prd_1h_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ ASPECT.PERF + ] ] ] !> ],
   FLAGS.TRIGGER "be_c_been" ].

be_c_been_prd_2h_rule := be_cop_prd_2h_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ ASPECT.PERF + ] ] ] !> ],
   FLAGS.TRIGGER "be_c_been" ].

be_c_been_inf_rule := be_cop_inf_rule &
 [ FLAGS.TRIGGER "be_c_been" ].

be_c_been_tag_th_expl_rule := be_cop_tag_th_expl_rule &
 [ CONTEXT [ RELS <! [ ARG1 [ PNG [ PN 3sg ] ] ],
                     [ ARG0 [ E [ ASPECT.PERF + ] ] ] !> ],
   FLAGS.TRIGGER "be_c_been" ].

be_c_been_ellip_th_expl_rule := be_cop_ellip_th_expl_rule &
 [ CONTEXT [ RELS <! relation, [ ARG0 [ E [ ASPECT.PERF + ] ] ] !> ],
   FLAGS.TRIGGER "be_c_been" ].

; copula 'being'

be_c_being_2h_psv_rule := be_cop_2h_psv_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE real_tense,
                                  ASPECT.PROGR + ] ] ] !> ],
   FLAGS.TRIGGER "be_c_being" ].

be_c_being_2x_psv_rule := be_cop_2x_psv_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE real_tense,
                                  ASPECT.PROGR + ] ] ] !> ],
   FLAGS.TRIGGER "be_c_being" ].

be_c_being_3x_psv_rule := be_cop_3x_psv_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE real_tense,
                                  ASPECT.PROGR + ] ] ] !> ],
   FLAGS.TRIGGER "be_c_being" ].

be_c_being_prd_1x_rule := be_cop_prd_1x_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ ASPECT.PROGR + ] ] ] !> ],
   FLAGS.TRIGGER "be_c_being" ].

be_c_being_prd_2x_rule := be_cop_prd_2x_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ ASPECT.PROGR + ] ] ] !> ],
   FLAGS.TRIGGER "be_c_being" ].

be_c_being_prd_3x_rule := be_cop_prd_3x_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ ASPECT.PROGR + ] ] ] !> ],
   FLAGS.TRIGGER "be_c_being" ].

be_c_being_prd_1h_rule := be_cop_prd_1h_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE real_tense,
                                  ASPECT.PROGR + ] ] ] !> ],
   FLAGS.TRIGGER "be_c_being" ].

be_c_being_prd_2h_rule := be_cop_prd_2h_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE real_tense,
                                  ASPECT.PROGR + ] ] ] !> ],
   FLAGS.TRIGGER "be_c_being" ].

; copula 'be'

; Predicative AP, PP except for modals (which don't introduce a message)
be_c_be_rule1a := arg0e_gtr &
 [ CONTEXT [ RELS <! [ PRED "~_[pa]_",
                       ARG0 #e & [ E [ TENSE untensed,
                                       ASPECT [ PERF - ] ] ],
                       ARG1 ref-ind & #x ],
                     [ PRED message_m_rel,
                       ARG0 #e ] !> ],
   FLAGS [ EQUAL < semarg, #x >,
           TRIGGER "be_c_be" ] ].

; Predicative AP,PP with future
be_c_be_rule1b := arg0e_gtr &
 [ CONTEXT [ RELS <! [ PRED "~_[pa]_",
                       ARG0 #e & [ E [ TENSE future,
                                       ASPECT [ PERF - ] ] ],
                       ARG1 ref-ind & #x ],
                     [ PRED message_m_rel,
                       ARG0 #e ] !> ],
   FLAGS [ EQUAL < semarg, #x >,
           TRIGGER "be_c_be" ] ].

#|
; These two don't work, for some reason, so replaced with the following two
be_c_be_rule1c := arg0e_gtr &
 [ CONTEXT [ RELS <! [ LBL #h,
                       PRED "~_[pa]_" ],
                     [ PRED "~_modal_",
                       ARG1 #h1 & handle ] !>,
             HCONS <! qeq & [ HARG #h1, LARG #h ] !> ],
   FLAGS [ EQUAL < semarg, #h1, #h >,
           TRIGGER "be_c_be" ] ].

be_c_be_rule1d := arg0e_gtr &
 [ CONTEXT [ RELS <! [ LBL #h,
                       PRED "prednom_state_rel" ],
                     [ PRED "~_modal_",
                       ARG1 #h1 & handle ] !>,
             HCONS <! qeq & [ HARG #h1, LARG #h ] !> ],
   FLAGS [ EQUAL < semarg, #h1 >,
           TRIGGER "be_c_be" ] ].
|#

; Predicative AP,PP with modals: "Kim must be happy."
be_c_be_rule1c := arg0e_gtr &
 [ CONTEXT [ RELS <! [ LBL #h & handle,
                       PRED "~_[pa]_" ],
                     [ PRED "~_modal_" ] !> ],
   FILTER.RELS <! [ PRED "~_n_", LBL #h ] !>,
   FLAGS [ EQUAL < semarg, #h >,
           TRIGGER "be_c_be" ] ].

be_c_be_rule1d := arg0e_gtr &
 [ CONTEXT [ RELS <! [ LBL #h & handle,
                       PRED "prednom_state_rel" ],
                     [ PRED "~_modal_" ] !> ],
   FILTER.RELS <! [ PRED "~_n_", LBL #h ] !>,
   FLAGS [ EQUAL < semarg, #h >,
           TRIGGER "be_c_be" ] ].

be_c_be_rule1e := arg0e_gtr &
 [ CONTEXT [ RELS <! [ LBL #h & handle,
                       PRED unspec_loc_rel ],
                     [ PRED "~_modal_" ] !> ],
   FILTER.RELS <! [ PRED "~_n_", LBL #h ] !>,
   FLAGS [ EQUAL < semarg, #h >,
           TRIGGER "be_c_be" ] ].

be_c_be_rule1f := arg0e_gtr &
 [ CONTEXT [ RELS <! [ LBL #h & handle,
                       PRED unspec_manner_rel ],
                     [ PRED "~_modal_" ] !> ],
   FILTER.RELS <! [ PRED "~_n_", LBL #h ] !>,
   FLAGS [ EQUAL < semarg, #h >,
           TRIGGER "be_c_be" ] ].

; Special case of comparative
be_cop_compar_be_rule := arg0e_gtr &
 [ CONTEXT [ RELS <! [ PRED comp_or_superl_rel,
                       ARG0 [ E [ TENSE past,
                                  MOOD indicative ] ] ] !> ],
   FLAGS.TRIGGER "be_c_be" ].

; ARG2 Passives with ordinary NP subjects, untensed
be_c_be_rule2a1 := arg0e_gtr &
 [ CONTEXT [ RELS <! [ PRED "~_[v]_",
                       ARG0 #e & [ E [ MOOD indicative,
                                       TENSE untensed,
                                       ASPECT [ PERF - ] ] ],
                       ARG2 #x & ref-ind ],
                     [ PRED message_m_rel,
                       ARG0 #e,
                       PSV semarg & #x ] !> ],
   FLAGS [ EQUAL < semarg, #x >,
           TRIGGER "be_c_be" ] ].

; ARG2 Passives with ordinary NP subjects, future
be_c_be_rule2a2 := arg0e_gtr &
 [ CONTEXT [ RELS <! [ PRED "~_[v]_",
                       ARG0 #e & [ E [ MOOD indicative,
                                       TENSE future,
                                       ASPECT [ PERF - ] ] ],
                       ARG2 #x & ref-ind ],
                     [ PRED message_m_rel,
                       ARG0 #e,
                       PSV semarg & #x ] !> ],
   FLAGS [ EQUAL < semarg, #x >,
           TRIGGER "be_c_be" ] ].

; ARG2 Passives with sentential subjects, untensed
be_c_be_rule2b1 := arg0e_gtr &
 [ CONTEXT [ RELS <! [ PRED "~_[v]_",
                       ARG0 #e & [ E [ MOOD indicative,
                                       TENSE untensed,
                                       ASPECT [ PERF - ] ] ],
                       ARG2 #h & handle ],
                     [ PRED message_m_rel,
                       ARG0 #e,
                       PSV semarg & #h ] !> ],
   FLAGS [ EQUAL < semarg, #h >,
           TRIGGER "be_c_be" ] ].

; ARG2 Passives with sentential subjects, future
be_c_be_rule2b2 := arg0e_gtr &
 [ CONTEXT [ RELS <! [ PRED "~_[v]_",
                       ARG0 #e & [ E [ MOOD indicative,
                                       TENSE future,
                                       ASPECT [ PERF - ] ] ],
                       ARG2 #h & handle ],
                     [ PRED message_m_rel,
                       ARG0 #e,
                       PSV semarg & #h ] !> ],
   FLAGS [ EQUAL < semarg, #h >,
           TRIGGER "be_c_be" ] ].

; For modals with ARG2 passives, since the modal's argument is not a message
be_c_be_rule2c := arg0e_gtr &
 [ CONTEXT [ RELS <! [ LBL #h, ARG2 #x & ref-ind ],
                     [ PRED "~_modal_", ARG0 #e, ARG1 #h ],
                     [ PRED message_m_rel, ARG0 #e, PSV #x ] !> ],
   FLAGS [ EQUAL < semarg, #x >,
           TRIGGER "be_c_be" ] ].

; For special case of psv w/_have_v_to_rel which doesn't have _modal_ in name
be_c_be_rule2d := arg0e_gtr &
 [ CONTEXT [ RELS <! [ LBL #h, ARG2 #h1 & handle ],
                     [ PRED "_have_v_to_rel", ARG0 #e, ARG1 #h ],
                     [ PRED message_m_rel, ARG0 #e, PSV #h1 ] !> ],
   FLAGS [ EQUAL < semarg, #h1 >,
           TRIGGER "be_c_be" ] ].

; _have_v_to_rel with ref-ind psv
be_c_be_rule2e := arg0e_gtr &
 [ CONTEXT [ RELS <! [ LBL #h, ARG2 #x & ref-ind ],
                     [ PRED "~_have_v_to_rel", ARG0 #e, ARG1 #h ],
                     [ PRED message_m_rel, ARG0 #e, PSV #x ] !> ],
   FLAGS [ EQUAL < semarg, #x >,
           TRIGGER "be_c_be" ] ].

; Modals with ARG2 clausal passives ('That Kim won could be argued')
be_c_be_rule2f := arg0e_gtr &
 [ CONTEXT [ RELS <! [ LBL #h, ARG2 #h1 & handle ],
                     [ PRED "~_modal_", ARG0 #e, ARG1 #h ],
                     [ PRED message_m_rel, ARG0 #e, PSV #h1 ] !> ],
   FLAGS [ EQUAL < semarg, #h1 >,
           TRIGGER "be_c_be" ] ].

; These next five are too predicate specific - needed for the few v_ssr_le's
; e.g. for "fail to be..." which is not modal but does not introduce message
be_c_be_rule2g1 := arg0e_gtr &
 [ CONTEXT [ RELS <! [ ARG2 #x1 & ref-ind ],
                     [ PRED "_begin_v_1_rel", ARG0 #e, ARG1 #h & handle ],
                     [ PRED message_m_rel, ARG0 #e, PSV #x1 ] !> ],
   FLAGS [ EQUAL < semarg, #h, #x1 >,
           TRIGGER "be_c_be" ] ].
be_c_be_rule2g2 := arg0e_gtr &
 [ CONTEXT [ RELS <! [ ARG2 #x1 & ref-ind ],
                     [ PRED "_cease_v_1_rel", ARG0 #e, ARG1 #h & handle ],
                     [ PRED message_m_rel, ARG0 #e, PSV #x1 ] !> ],
   FLAGS [ EQUAL < semarg, #h, #x1 >,
           TRIGGER "be_c_be" ] ].
be_c_be_rule2g3 := arg0e_gtr &
 [ CONTEXT [ RELS <! [ ARG2 #x1 & ref-ind ],
                     [ PRED "_continue_v_1_rel", ARG0 #e, ARG1 #h & handle ],
                     [ PRED message_m_rel, ARG0 #e, PSV #x1 ] !> ],
   FLAGS [ EQUAL < semarg, #h, #x1 >,
           TRIGGER "be_c_be" ] ].
be_c_be_rule2g4 := arg0e_gtr &
 [ CONTEXT [ RELS <! [ ARG2 #x1 & ref-ind ],
                     [ PRED "_fail_v_1_rel", ARG0 #e, ARG1 #h & handle ],
                     [ PRED message_m_rel, ARG0 #e, PSV #x1 ] !> ],
   FLAGS [ EQUAL < semarg, #h, #x1 >,
           TRIGGER "be_c_be" ] ].
be_c_be_rule2g5 := arg0e_gtr &
 [ CONTEXT [ RELS <! [ ARG2 #x1 & ref-ind ],
                     [ PRED "_start_v_1_rel", ARG0 #e, ARG1 #h & handle ],
                     [ PRED message_m_rel, ARG0 #e, PSV #x1 ] !> ],
   FLAGS [ EQUAL < semarg, #h, #x1 >,
           TRIGGER "be_c_be" ] ].

; ARG3 passives (assume ref-inds only)
be_c_be_rule3a := arg0e_gtr &
 [ CONTEXT [ RELS <! [ PRED "~_v_",
                       ARG0 #e & [ E [ MOOD indicative,
                                       TENSE untensed,
                                       ASPECT [ PERF - ] ] ],
                       ARG3 #x & ref-ind ],
                     [ PRED message_m_rel,
                       ARG0 #e,
                       PSV semarg & #x ] !> ],
   FLAGS [ EQUAL < semarg, #x >,
           TRIGGER "be_c_be" ] ].

; ARG3 modal passives ('Kim could be given a book')
; (also, assume no ARG4 passives)
be_c_be_rule3b := arg0e_gtr &
 [ CONTEXT [ RELS <! [ LBL #h, ARG3 #x & ref-ind ],
                     [ PRED "~_modal_", ARG0 #e, ARG1 #h ],
                     [ PRED message_m_rel, ARG0 #e, PSV #x ] !> ],
   FLAGS [ EQUAL < semarg, #x >,
           TRIGGER "be_c_be" ] ].

; Future progressive
be_c_be_rule4a := arg0e_gtr &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ MOOD indicative,
                                  TENSE future,
                                  ASPECT [ PERF -,
                                           PROGR + ] ] ] ] !> ],
   FLAGS.TRIGGER "be_c_be" ].

; Future with prednom_state_rel: 'It will be a relief to stay home'
be_c_be_rule4b := arg0e_gtr &
 [ CONTEXT [ RELS <! [ PRED prednom_state_rel,
                       ARG0 [ E [ MOOD indicative,
                                  TENSE future,
                                  ASPECT [ PERF - ] ] ] ] !> ],
   FLAGS.TRIGGER "be_c_be" ].

; Untensed with prednom_state_rel: 'It seems to be a relief to stay home'
be_c_be_rule4c := arg0e_gtr &
 [ CONTEXT [ RELS <! [ PRED prednom_state_rel,
                       ARG0 [ E [ MOOD indicative,
                                  TENSE untensed,
                                  ASPECT [ PERF - ] ] ] ] !> ],
   FLAGS.TRIGGER "be_c_be" ].


; Untensed progressive
be_c_be_rule5 := arg0e_gtr &
 [ CONTEXT [ RELS <! [ PRED "~_v_",
                       ARG0 #e & [ E [ MOOD indicative,
                                       TENSE untensed,
                                       ASPECT [ PERF -,
                                                PROGR + ] ] ] ] !> ],
   FILTER.RELS <! [ PRED nominalization_rel, ARG1 #h ],
                  [ PRED message_m_rel, LBL #h, ARG0 #e ] !>,
   FLAGS.TRIGGER "be_c_be" ].

; ARG1 handle-argument adjectives
be_c_be_rule6 := arg0e+1h_gtr &
 [ CONTEXT [ RELS <! [ PRED "~_a_",
                       ARG0 [ E [ MOOD indicative,
                                  TENSE untensed,
                                  ASPECT [ PERF - ] ] ] ] !> ],
   FLAGS.TRIGGER "be_c_be" ].

be_c_be_rule7 := arg0e+1h_gtr &
 [ CONTEXT [ RELS <! [ PRED "~_a_",
                       ARG0 [ E [ MOOD indicative,
                                  TENSE future,
                                  ASPECT [ PERF - ] ] ] ] !> ],
   FLAGS.TRIGGER "be_c_be" ].

; Imperatives for adj, prep: "Be happy"
be_c_be_rule8a := arg0e_gtr &
 [ CONTEXT [ RELS <! [ PRED "~_[pa]_",
                       ARG0 #e & [ E [ MOOD indicative,
                                       TENSE present,
                                       ASPECT [ PERF - ] ] ] ],
                     [ PRED imp_m_rel,
                       ARG0 #e ] !> ],
   FLAGS.TRIGGER "be_c_be" ].

; Imperative passives: "Be admired"
be_c_be_rule8b := arg0e_gtr &
 [ CONTEXT [ RELS <! [ PRED "~_v_",
                       ARG0 #e & [ E [ MOOD indicative,
                                       TENSE present,
                                       ASPECT [ PERF - ] ] ] ],
                     [ PRED imp_m_rel,
                       ARG0 #e,
                       PSV #x & ref-ind ] !> ],
   FLAGS [ EQUAL < semarg, #x >,
           TRIGGER "be_c_be" ] ].

; special case for time_adj in "be time for an interview"
be_c_be_rule9 := arg0e_gtr &
 [ CONTEXT [ RELS <! [ PRED "_time_a_expl-for_rel" ] !> ],
   FLAGS.TRIGGER "be_c_be" ].

who_rel_rule := arg0e+x_gtr &
 [ CONTEXT [ RELS <! [ LBL #hand,
                       PRED prpstn_m_rel,
                       ARG0.E.TENSE real_tense ],
                     [ LBL #hand, ARG0 #x ] !> ],
   FILTER.RELS <! [ PRED free_relative_q_rel, ARG0 #x ] !>,
   FLAGS.TRIGGER "who2" ].

whom_rel_rule := arg0e+x_gtr &
 [ CONTEXT [ RELS <! [ LBL #hand,
                       PRED prpstn_m_rel,
                       ARG0.E.TENSE real_tense ],
                     [ LBL #hand, ARG0 #x ] !> ],
   FILTER.RELS <! [ PRED free_relative_q_rel, ARG0 #x ] !>,
   FLAGS.TRIGGER "whom2" ].

which_rel_rule := arg0e+x_gtr &
 [ CONTEXT [ RELS <! [ LBL #hand,
                       PRED prpstn_m_rel,
                       ARG0.E.TENSE real_tense ],
                     [ LBL #hand, ARG0 #x ] !> ],
   FILTER.RELS <! [ PRED free_relative_q_rel, ARG0 #x ] !>,
   FLAGS.TRIGGER "which_r" ].

that_rel_rule := arg0e+x_gtr &
 [ CONTEXT [ RELS <! [ LBL #hand,
                       PRED prpstn_m_rel,
                       ARG0.E.TENSE real_tense ],
                     [ LBL #hand, ARG0 #x ] !> ],
   FILTER.RELS <! [ PRED free_relative_q_rel, ARG0 #x ] !>,
   FLAGS.TRIGGER "that_r" ].

that_rel_npadv_rule := arg0e+x_gtr &
 [ CONTEXT [ RELS <! [ LBL #hand,
                       PRED prpstn_m_rel,
                       ARG0.E.TENSE real_tense ],
                     [ LBL #hand, ARG0 #x ] !> ],
   FILTER.RELS <! [ PRED free_relative_q_rel, ARG0 #x ] !>,
   FLAGS.TRIGGER "that_r_npadv" ].

where_rel_rule := arg0e+x_gtr &
 [ CONTEXT [ RELS <! [ LBL #hand,
                       PRED prpstn_m_rel,
                       ARG0.E.TENSE real_tense ],
                     [ LBL #hand, ARG0 #x ] !> ],
   FILTER.RELS <! [ PRED free_relative_q_rel, ARG0 #x ] !>,
   FLAGS.TRIGGER "where_np_rel" ].

when_rel_rule := arg0e+x_gtr &
 [ CONTEXT [ RELS <! [ LBL #hand,
                       PRED prpstn_m_rel,
                       ARG0.E.TENSE real_tense ],
                     [ LBL #hand, ARG0 #x ] !> ],
   FILTER.RELS <! [ PRED free_relative_q_rel, ARG0 #x ] !>,
   FLAGS.TRIGGER "when_np_rel" ].

and_num_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED times_rel ] !> ],
   FLAGS.TRIGGER "and_num" ].

and_fract_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED fraction_rel ] !> ],
   FLAGS.TRIGGER "and_fract" ].

and_fract_2_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED fraction_rel ] !> ],
   FLAGS.TRIGGER "and_fract_2" ].

; For all of these, make the RELS be <! which_rel !> to generate with them
wh_the_hell_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "the_hell_wh_adv" ].

wh_the_fuck_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "the_fuck_wh_adv" ].

wh_the_heck_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "the_heck_wh_adv" ].

wh_on_earth_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "on_earth_wh_adv" ].

wh_in_the_world_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "in_the_world_wh_adv" ].

wh_oh_where_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "oh_where_wh_adv" ].

wh_exactly_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "exactly_wh_adv" ].

wh_else_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "else_wh_adv" ].

; These won't be used in generation as long as the never_unify_rel is here
adv_disc_umm_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "umm_root" ].
adv_disc_um_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "um_disc_adv" ].
adv_disc_umers_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "um_ersatz" ].
adv_disc_uh_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "uh_disc_adv" ].
adv_disc_please_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "please_root" ].
adv_disc_pleaseabb_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "please_abb_root" ].
adv_disc_imustsay_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "i_must_say_root" ].
adv_disc_imustsay_2_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "i_must_say_root_2" ].
adv_disc_imustsay_3_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "i_must_say_root_3" ].
adv_disc_imustsay_4_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "i_must_say_root_4" ].
adv_disc_youknow_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "you_know_disc" ].
adv_disc_youknow_2_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "you_know_2_disc" ].
adv_disc_imho_1_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "imho_disc" ].
adv_disc_imho_2_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "imho_disc_2" ].
adv_disc_lets_say_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "lets_say_disc" ].
adv_disc_lets_say_2_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "lets_say_2_disc" ].
adv_disc_lets_say_3_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "lets_say_3_disc" ].
adv_disc_lets_say_4_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "lets_say_4_disc" ].
adv_disc_lets_say_5_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "lets_say_5_disc" ].
adv_disc_lets_say_6_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "lets_say_6_disc" ].
adv_disc_like_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "like_disc_adv" ].
adv_disc_for_instance_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "for_instance_disc_adv" ].
adv_disc_for_example_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "for_example_disc_adv" ].
adv_I_guess_like_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "i_guess_disc" ].
adv_I_guess_like_2_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "i_guess_disc_2" ].
adv_I_guess_like_3_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "i_guess_disc_3" ].
adv_I_guess_like_4_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "i_guess_disc_4" ].
adv_however_2_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "however2" ].
adv_however_3_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "however_3" ].
adv_I_think_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "i_think_disc" ].
adv_I_think_2_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "i_think_disc_2" ].
adv_or_so_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "or_so_disc" ].
adv_maybe_disc_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "maybe_disc_adv" ].
adv_say_disc_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "say_disc_adv" ].
adv_i_mean_disc_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "i_mean_disc" ].
adv_i_mean_disc_2_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "i_mean_disc_2" ].
adv_thats_right_pre_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "thats_right_pre_root" ].
adv_though_pre_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "though_root_pre" ].
adv_though_post_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "though_root_post" ].
adv_disc_perhaps_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "perhaps_disc_adv" ].
adv_disc_e_g_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "e_g_disc_adv" ].
adv_disc_e_g_2_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "e_g_disc_adv2" ].
adv_disc_sort_of_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "sort_of_disc_adv" ].
adv_disc_in_a_way_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "in_a_way_disc_adv" ].
adv_yes_pre_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "yes_pre_root" ].
adv_sorry_pre_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "sorry_root_pre" ].
adv_for_one_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "for_one_disc_adv" ].
adv_i_dunno_1_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "i_dunno_s_adv1" ].
adv_i_dunno_2_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "i_dunno_s_adv2" ].
adv_disc_so_to_speak_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "so_to_speak_disc_adv" ].
adv_exclam_paren_post_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "exclam_paren_post" ].

apostrophe_s_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED poss_rel, ARG2 #x ] !> ],
   FILTER [ RELS <! [ PRED pron_rel, ARG0 #x ] !> ],
   FLAGS.TRIGGER "apostrophe_s_nq_lex" ].

punct_sq_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "sq_pct" ].
punct_dq_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "dq_punct" ].
punct_dq2_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "dq_punct2" ].
punct_lp_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "lparen_pct" ].
punct_rp_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "rparen_pct" ].
hyphen_punctr_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "hyphen_punct_right" ].
punct_dblh_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "dbl_hyphen_punct" ].
punct_3dotsl_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "punct_3dots_l" ].
punct_3dotsl_2_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "punct_3dots_l_2" ].
punct_3dotsr_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "punct_3dots_r" ].
punct_3dotsr2_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "punct_3dots_r_2" ].
punct_s_dash_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "s_dash_pct" ].
punct_s_dbldash_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "s_dbl_dash_pct" ].
punct_leftq_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "leftq_pct" ].

be_c_is_cx_2_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "be_c_is_cx_2" ].
be_c_am_cx_2_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "be_c_am_cx_2" ].
be_c_are_cx_2_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "be_c_are_cx_2" ].
have_bse_aux_cx_2_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "have_bse_aux_cx_2" ].
have_fin_aux_cx_2_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "have_fin_aux_cx_2" ].
had_aux_cx_2_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "had_aux_cx_2" ].

be_c_is_neg_tag_rule1 := arg0e_gtr &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ MOOD indicative,
                                  TENSE present ] ] ],
                     [ PRED ne_x_rel ] !> ],
   FLAGS.TRIGGER "be_c_is_neg_1" ].

be_c_are_neg_tag_rule1 := arg0e_gtr &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ MOOD indicative,
                                  TENSE present ] ] ],
                     [ PRED ne_x_rel ] !> ],
   FLAGS.TRIGGER "be_c_are_neg_1" ].

be_id_is_neg_tag_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ MOOD indicative,
                                  TENSE present ] ] ],
                     [ PRED ne_x_rel ] !> ],
   FLAGS.TRIGGER "be_id_is_neg_1" ].

be_id_are_neg_tag_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ MOOD indicative,
                                  TENSE present ] ] ],
                     [ PRED ne_x_rel ] !> ],
   FLAGS.TRIGGER "be_id_are_neg_1" ].

be_th_is_neg_tag_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED _be_v_there_rel,
                       ARG0 [ E [ MOOD indicative,
                                  TENSE present ] ] ],
                     [ PRED ne_x_rel ] !> ],
   FLAGS.TRIGGER "be_th_cop_is_neg_1" ].

be_th_are_neg_tag_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED _be_v_there_rel,
                       ARG0 [ E [ MOOD indicative,
                                  TENSE present ] ] ],
                     [ PRED ne_x_rel ] !> ],
   FLAGS.TRIGGER "be_th_cop_are_neg_1" ].

be_c_was_neg_tag_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ ARG0 #e & event &
                            [ E [ MOOD indicative,
                                  TENSE past ] ] ],
                     [ PRED ne_x_rel ] !> ],
   FLAGS [ EQUAL < #e >,
           TRIGGER "be_c_was_neg_1" ] ].

be_c_were_neg_tag_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ ARG0 #e & event & 
                            [ E [ MOOD indicative,
                                  TENSE past ] ] ],
                     [ PRED ne_x_rel ] !> ],
   FLAGS [ EQUAL < #e >,
           TRIGGER "be_c_were_neg_1" ] ].

be_id_was_neg_tag_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ ARG0 #e & event & 
                            [ E [ MOOD indicative,
                                  TENSE past ] ] ],
                     [ PRED ne_x_rel ] !> ],
   FLAGS [ EQUAL < #e >,
           TRIGGER "be_id_was_neg_1" ] ].

be_id_were_neg_tag_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ ARG0 #e & event & 
                            [ E [ MOOD indicative,
                                  TENSE past ] ] ],
                     [ PRED ne_x_rel ] !> ],
   FLAGS [ EQUAL < #e >,
           TRIGGER "be_id_were_neg_1" ] ].

be_th_was_neg_tag_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED _be_v_there_rel,
                       ARG0 #e & event & 
                            [ E [ MOOD indicative,
                                  TENSE past ] ] ],
                     [ PRED ne_x_rel ] !> ],
   FLAGS [ EQUAL < #e >,
           TRIGGER "be_th_cop_was_neg_1" ] ].

be_th_were_neg_tag_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED _be_v_there_rel,
                       ARG0 #e & event & 
                            [ E [ MOOD indicative,
                                  TENSE past ] ] ],
                     [ PRED ne_x_rel ] !> ],
   FLAGS [ EQUAL < #e >,
           TRIGGER "be_th_cop_were_neg_1" ] ].

be_inv_is_rule := arg0e+1x_gtr &
 [ CONTEXT [ RELS <! [ PRED "~_[pa]_",
                       ARG0 [ E [ MOOD indicative,
                                  TENSE present ] ],
                       ARG1 [ PNG.PN 3sg ] ] !> ],
   FLAGS.TRIGGER "be_inv_is" ].

be_inv_is_rule2 := arg0e+1x_gtr &
 [ CONTEXT [ RELS <! [ PRED ord_rel,
                       ARG0 [ E [ MOOD indicative,
                                  TENSE present ] ],
                       ARG1 [ PNG.PN 3sg ] ] !> ],
   FLAGS.TRIGGER "be_inv_is" ].

be_inv_was_rule := arg0e+1x_gtr &
 [ CONTEXT [ RELS <! [ PRED "~_[pa]_",
                       ARG0 [ E [ MOOD indicative,
                                  TENSE past ] ],
                       ARG1 [ PNG.PN 3sg ] ] !> ],
   FLAGS.TRIGGER "be_inv_was" ].

be_inv_was_rule2 := arg0e+1x_gtr &
 [ CONTEXT [ RELS <! [ PRED ord_rel,
                       ARG0 [ E [ MOOD indicative,
                                  TENSE past ] ],
                       ARG1 [ PNG.PN 3sg ] ] !> ],
   FLAGS.TRIGGER "be_inv_was" ].

be_inv_are_rule := arg0e+1x_gtr &
 [ CONTEXT [ RELS <! [ PRED "~_[pa]_",
                       ARG0 [ E [ MOOD indicative,
                                  TENSE present ] ],
                       ARG1 [ PNG.PN non3sg ] ] !> ],
   FLAGS.TRIGGER "be_inv_are" ].

be_inv_are_rule2 := arg0e+1x_gtr &
 [ CONTEXT [ RELS <! [ PRED ord_rel,
                       ARG0 [ E [ MOOD indicative,
                                  TENSE present ] ],
                       ARG1 [ PNG.PN non3sg ] ] !> ],
   FLAGS.TRIGGER "be_inv_are" ].

be_inv_were_rule := arg0e+1x_gtr &
 [ CONTEXT [ RELS <! [ PRED "~_[pa]_",
                       ARG0 [ E [ MOOD indicative,
                                  TENSE past ] ],
                       ARG1 [ PNG.PN non3sg ] ] !> ],
   FLAGS.TRIGGER "be_inv_were" ].

be_inv_were_rule2 := arg0e+1x_gtr &
 [ CONTEXT [ RELS <! [ PRED ord_rel,
                       ARG0 [ E [ MOOD indicative,
                                  TENSE past ] ],
                       ARG1 [ PNG.PN non3sg ] ] !> ],
   FLAGS.TRIGGER "be_inv_were" ].

expletive_it_rain_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_rain_v_1_rel" ].

expletive_it_drizzle_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_drizzle_v_1_rel" ].

expletive_it_hail_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_hail_v_1_rel" ].

expletive_it_snow_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_snow_v_1_rel" ].

expletive_it_snowy_a_expl_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_snowy_a_1_rel" ].

expletive_it_sprinkle_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_sprinkle_v_1_rel" ].

expletive_it_advance_v_x_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_advance_v_x_rel" ].

expletive_it_affect_v_x_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_affect_v_x_rel" ].

expletive_it_alarm_v_x_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_alarm_v_x_rel" ].

expletive_it_amaze_v_x_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_amaze_v_1_rel" ].

expletive_it_amaze_v_x_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_amuse_v_1_rel" ].

expletive_it_anger_v_x_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_anger_v_1_rel" ].

expletive_it_annoy_v_2_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_annoy_v_1_rel" ].

expletive_it_appall_v_x_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_appall_v_1_rel" ].

expletive_it_appear_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_appear_v_to_rel" ].

expletive_it_astonish_v_x_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_astonish_v_1_rel" ].

expletive_it_arrange_v_expl_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_arrange_v_with_rel" ].

expletive_it_augment_v_x_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_augment_v_1_rel" ].

expletive_it_baffle_v_x_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_baffle_v_1_rel" ].

expletive_it_bother_v_expl_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_bother_v_1_rel" ].

expletive_it_breezy_a_expl_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_breezy_a_1_rel" ].

expletive_it_blustery_a_expl_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_blustery_a_1_rel" ].

expletive_it_chilly_a_expl_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_chilly_a_1_rel" ].

expletive_it_cloudy_a_expl_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_cloudy_a_1_rel" ].

expletive_it_cold_a_expl_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_cold_a_1_rel" ].

expletive_it_cool_a_expl_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_cool_a_1_rel" ].

expletive_it_concern_v_x_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_concern_v_about_rel" ].

expletive_it_confuse_v_x_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_confuse_v_1_rel" ].

expletive_it_console_v_x_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_console_v_1_rel" ].

expletive_it_cost_v_x_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_cost_v_x_rel" ].

expletive_it_damp_a_expl_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_damp_a_1_rel" ].

expletive_it_delight_v_x_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_delight_v_1_rel" ].

expletive_it_devastate_v_x_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_devastate_v_1_rel" ].

expletive_it_prefer_v_expl_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_dislike_v_1_rel" ].

expletive_it_dry_a_expl_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_dry_a_1_rel" ].

expletive_it_excite_v_x_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_excite_v_1_rel" ].

expletive_it_exist_v_expl_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_exist_v_expl_rel" ].

expletive_it_fascinate_v_x_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_fascinate_v_1_rel" ].

expletive_it_feel_v_seem_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_feel_v_seem-to_rel" ].

expletive_it_flatter_v_x_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_flatter_v_1_rel" ].

expletive_it_foggy_a_expl_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_foggy_a_1_rel" ].

expletive_it_follow_v_x_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_follow_v_1_rel" ].

expletive_it_fool_v_x_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_fool_v_1_rel" ].

expletive_it_frighten_v_x_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_frighten_v_1_rel" ].

expletive_it_frigid_a_expl_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_frigid_a_1_rel" ].

expletive_it_frustrate_v_x_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_frustrate_v_1_rel" ].

expletive_it_further_v_x_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_further_v_1_rel" ].

expletive_it_gusty_a_expl_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_gusty_a_1_rel" ].

expletive_it_happen_v_expl_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_happen_v_to_rel" ].

expletive_it_hate_v_1_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_hate_v_1_rel" ].

expletive_it_haunt_v_x_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_haunt_v_1_rel" ].

expletive_it_help_v_expl_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_help_v_to_rel" ].

expletive_it_horrify_v_x_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_horrify_v_1_rel" ].

expletive_it_hot_a_expl_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_hot_a_1_rel" ].

expletive_it_humiliate_v_x_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_humiliate_v_1_rel" ].

expletive_it_hurt_v_x_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_hurt_v_1_rel" ].

expletive_it_inspire_v_x_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_inspire_v_1_rel" ].

expletive_it_interest_v_x_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_interest_v_1_rel" ].

expletive_it_intimidate_v_x_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_intimidate_v_1_rel" ].

expletive_it_intrigue_v_x_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_intrigue_v_1_rel" ].

expletive_it_irritate_v_x_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_irritate_v_1_rel" ].

expletive_it_leave_v_to_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_leave_v_to_rel" ].

expletive_it_look_v_seem_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_look_v_seem-to_rel" ].

expletive_it_make_v_1_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_make_v_cause_rel" ].

expletive_it_matter_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_matter_v_to_rel" ].

expletive_it_mild_a_expl_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_mild_a_1_rel" ].

expletive_it_occur_v_to_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_occur_v_to_rel" ].

expletive_it_offend_v_x_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_offend_v_1_rel" ].

expletive_it_pay_v_x_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_pay_v_1_rel" ].

expletive_it_prefer_v_expl_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_prefer_v_1_rel" ].

expletive_it_puzzle_v_x_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_puzzle_v_1_rel" ].

expletive_it_rainy_a_expl_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_rainy_a_1_rel" ].

expletive_it_seem_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_seem_v_to_rel" ].

expletive_it_sound_v_seem_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_sound_v_seem-to_rel" ].

expletive_it_strike_v_x_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_strike_v_1_rel" ].

expletive_it_sunny_a_expl_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_sunny_a_1_rel" ].

expletive_it_take_v_expl_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_take_v_2_rel" ].

expletive_it_time_a_expl_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_time_a_expl-for_rel" ].

expletive_it_turn_v_out_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_turn_v_out_rel" ].

expletive_it_warm_a_expl_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_warm_a_1_rel" ].

expletive_it_wet_a_expl_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_wet_a_1_rel" ].

expletive_it_windy_a_expl_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_windy_a_1_rel" ].

expletive_it_be_v_itcleft_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED _be_v_itcleft_rel ].

expletive_it_acceptable_a_rel := expletive_it_adj_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_acceptable_a_for_rel" ].

expletive_it_amazing_a_rel := expletive_it_adj_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_amazing_a_1_rel" ].

expletive_it_astonishing_a_rel := expletive_it_adj_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_astonishing_a_for_rel" ].

expletive_it_available_a_rel := expletive_it_adj_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_available_a_for_rel" ].

expletive_it_clear_a_rel := expletive_it_adj_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_clear_a_of_rel" ].

expletive_it_complicated_a_rel := expletive_it_adj_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_complicated_a_for_rel" ].

expletive_it_convenient_a_rel := expletive_it_adj_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_convenient_a_for_rel" ].

expletive_it_crucial_a_rel := expletive_it_adj_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_crucial_a_for_rel" ].

expletive_it_difficult_a_rel := expletive_it_adj_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_difficult_a_for_rel" ].

expletive_it_dreadful_a_rel := expletive_it_adj_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_dreadful_a_1_rel" ].

expletive_it_easier_a_rel := expletive_it_adj_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_easier_a_for_rel" ].

expletive_it_easiest_a_rel := expletive_it_adj_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_easiest_a_for_rel" ].

expletive_it_easy_a_rel := expletive_it_adj_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_easy_a_for_rel" ].

expletive_it_encouraging_a_rel := expletive_it_adj_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_encouraging_a_for_rel" ].

expletive_it_extraordinary_a_rel := expletive_it_adj_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_extraordinary_a_1_rel" ].

expletive_it_fun_a_rel := expletive_it_adj_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_fun_a_for_rel" ].

expletive_it_good_a_rel := expletive_it_adj_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_good_a_for_rel" ].

expletive_it_hard_a_rel := expletive_it_adj_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_hard_a_for_rel" ].

expletive_it_horrendous_a_rel := expletive_it_adj_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_horrendous_a_1_rel" ].

expletive_it_horrible_a_rel := expletive_it_adj_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_horrible_a_1_rel" ].

expletive_it_illegal_a_rel := expletive_it_adj_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_illegal_a_for_rel" ].

expletive_it_imperative_a_rel := expletive_it_adj_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_imperative_a_1_rel" ].

expletive_it_important_a_rel := expletive_it_adj_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_important_a_for_rel" ].

expletive_it_impossible_a_rel := expletive_it_adj_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_impossible_a_for_rel" ].

expletive_it_incredible_a_rel := expletive_it_adj_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_incredible_a_1_rel" ].

expletive_it_interesting_a_rel := expletive_it_adj_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_interesting_a_for_rel" ].

expletive_it_liberating_a_rel := expletive_it_adj_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_liberating_a_for_rel" ].

expletive_it_likely_a_rel := expletive_it_adj_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_likely_a_1_rel" ].

expletive_it_little_wonder_a_rel := expletive_it_adj_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_little+wonder_a_1_rel" ].

expletive_it_lucky_a_rel := expletive_it_adj_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_lucky_a_1_rel" ].

expletive_it_mild_a_rel := expletive_it_adj_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_mild_a_expl_readj_l" ].

expletive_it_necessary_a_rel := expletive_it_adj_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_necessary_a_for_rel" ].

expletive_it_nice_a_rel := expletive_it_adj_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_nice_a_for_rel" ].

expletive_it_obvious_a_rel := expletive_it_adj_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_obvious_a_to_rel" ].

expletive_it_odd_a_rel := expletive_it_adj_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_odd_a_1_rel" ].

expletive_it_okay_a_accept_rel := expletive_it_adj_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_okay_a_for_rel" ].

expletive_it_optional_a_rel := expletive_it_adj_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_optional_a_for_rel" ].

expletive_it_pointless_a_rel := expletive_it_adj_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_pointless_a_for_rel" ].

expletive_it_possible_a_rel := expletive_it_adj_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_possible_a_for_rel" ].

expletive_it_profitable_a_rel := expletive_it_adj_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_profitable_a_for_rel" ].

expletive_it_promising_a_rel := expletive_it_adj_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_promising_a_1_rel" ].

expletive_it_reasonable_a_rel := expletive_it_adj_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_reasonable_a_for_rel" ].

expletive_it_relieving_a_rel := expletive_it_adj_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_relieving_a_1_rel" ].

expletive_it_remarkable_a_rel := expletive_it_adj_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_remarkable_a_1_rel" ].

expletive_it_safe_a_rel := expletive_it_adj_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_safe_a_for_rel" ].

expletive_it_satisfactory_a_rel := expletive_it_adj_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_satisfactory_a_for_rel" ].

expletive_it_stupendous_a_rel := expletive_it_adj_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_stupendous_a_1_rel" ].

expletive_it_suffice_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_suffice_v_1_rel" ].

expletive_it_tough_a_rel := expletive_it_adj_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_tough_a_for_rel" ].

expletive_it_tragic_a_rel := expletive_it_adj_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_tragic_a_1_rel" ].

expletive_it_true_a_rel := expletive_it_adj_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_true_a_of_rel" ].

expletive_it_unfair_a_rel := expletive_it_adj_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_unfair_a_to_rel" ].

expletive_it_unlikely_a_rel := expletive_it_adj_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_unlikely_a_for_rel" ].

expletive_it_unnecessary_a_rel := expletive_it_adj_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_unnecessary_a_for_rel" ].

expletive_it_unreasonable_a_rel := expletive_it_adj_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_unreasonable_a_for_rel" ].

expletive_it_unsatisfactory_a_rel := expletive_it_adj_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_unsatisfactory_a_for_rel" ].

expletive_it_unwieldy_a_rel := expletive_it_adj_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_unwieldy_a_for_rel" ].

expletive_it_urgent_a_rel := expletive_it_adj_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_urgent_a_for_rel" ].

expletive_it_valuable_a_rel := expletive_it_adj_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_valuable_a_to-for_rel" ].

expletive_it_vital_a_rel := expletive_it_adj_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_vital_a_for_rel" ].

expletive_it_wise_a_rel := expletive_it_adj_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_wise_a_for_rel" ].

expletive_it_check_v_1_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_check_v_1_rel" ].

expletive_it_decide_v_1_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_decide_v_1_rel" ].

expletive_it_determine_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_determine_v_1_rel" ].

expletive_it_discover_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_discover_v_1_rel" ].

expletive_it_forget_v_1_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_forget_v_1_rel" ].

expletive_it_guarantee_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_guarantee_v_1_rel" ].

expletive_it_guess_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_guess_v_1_rel" ].

expletive_it_imagine_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_imagine_v_1_rel" ].

expletive_it_investigate_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_investigate_v_1_rel" ].

expletive_it_know_v_1_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_know_v_1_rel" ].

expletive_it_learn_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_learn_v_1_rel" ].

expletive_it_recall_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_recall_v_1_rel" ].

expletive_it_remember_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_remember_v_1_rel" ].

expletive_it_see_v_understand_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_see_v_understand_rel" ].

expletive_it_tell_v_1_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_tell_v_1_rel" ].

expletive_it_verify_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_verify_v_1_rel" ].

expletive_it_wonder_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_wonder_v_1_rel" ].

expletive_it_acknowledge_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_acknowledge_v_1_rel" ].

expletive_it_admit_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_admit_v_1_rel" ].

expletive_it_assume_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_assume_v_1_rel" ].

expletive_it_believe_v_1_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_believe_v_1_rel" ].

expletive_it_claim_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_claim_v_1_rel" ].

expletive_it_complain_v_1_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_complain_v_1_rel" ].

expletive_it_conclude_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_conclude_v_1_rel" ].

expletive_it_declare_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_declare_v_1_rel" ].

expletive_it_demand_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_demand_v_1_rel" ].

expletive_it_deny_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_deny_v_1_rel" ].

expletive_it_desire_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_desire_v_1_rel" ].

expletive_it_emphasize_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_emphasize_v_1_rel" ].

expletive_it_ensure_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_ensure_v_1_rel" ].

expletive_it_exhibit_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_exhibit_v_1_rel" ].

expletive_it_feel_v_1_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_feel_v_1_rel" ].

expletive_it_forecast_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_forecast_v_1_rel" ].

expletive_it_fret_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_fret_v_1_rel" ].

expletive_it_hope_v_1_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_hope_v_1_rel" ].

expletive_it_maintain_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_maintain_v_1_rel" ].

expletive_it_mean_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_mean_v_1_rel" ].

expletive_it_note_v_1_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_note_v_1_rel" ].

expletive_it_predict_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_predict_v_1_rel" ].

expletive_it_presume_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_presume_v_1_rel" ].

expletive_it_pretend_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_pretend_v_1_rel" ].

expletive_it_promise_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_promise_v_1_rel" ].

expletive_it_propose_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_propose_v_1_rel" ].

expletive_it_realize_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_realize_v_1_rel" ].

expletive_it_regret_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_regret_v_1_rel" ].

expletive_it_report_v_1_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_report_v_1_rel" ].

expletive_it_sense_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_sense_v_1_rel" ].

expletive_it_stress_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_stress_v_1_rel" ].

expletive_it_suspect_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_suspect_v_1_rel" ].

expletive_it_think_v_1_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_think_v_1_rel" ].

expletive_it_trust_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_trust_v_1_rel" ].

expletive_it_wish_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_wish_v_1_rel" ].

expletive_it_argue_v_1_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_argue_v_1_rel" ].

expletive_it_insist_v_1_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_insist_v_1_rel" ].

expletive_it_joke_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_joke_v_1_rel" ].

expletive_it_reckon_v_1_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_reckon_v_1_rel" ].

expletive_it_remark_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_remark_v_1_rel" ].

expletive_it_suppose_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_suppose_v_1_rel" ].

expletive_it_find_v_1_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_find_v_mental_rel" ].

expletive_it_suppose_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_suppose_v_1_rel" ].

expletive_it_agree_v_1_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_agree_v_1_rel" ].

expletive_it_confirm_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_confirm_v_1_rel" ].

expletive_it_explain_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_explain_v_1_rel" ].

expletive_it_reconfirm_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_reconfirm_v_1_rel" ].

expletive_it_reply_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_reply_v_1_rel" ].

expletive_it_say_v_1_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_say_v_1_rel" ].

expletive_it_suggest_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_suggest_v_1_rel" ].

expletive_it_swear_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_swear_v_1_rel" ].

expletive_it_understand_v_by_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_understand_v_by_rel" ].

expletive_it_write_v_1_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_write_v_1_rel" ].

expletive_it_figure_v_out_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_figure_v_out_rel" ].

expletive_it_find_v_out_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_find_v_out_rel" ].

expletive_it_point_v_out_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_point_v_out_rel" ].

expletive_it_relief_n_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_relief_n_1_rel" ].

expletive_it_pleasure_n_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_pleasure_n_of_rel" ].

expletive_it_be_itcleft_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED _be_v_itcleft_rel ].

; FIX - maybe say ARG1 is not present, somehow?
be_c_is_itx_rule1 := arg0e_gtr &
 [ CONTEXT [ RELS <! [ PRED "_rain_v_1_rel",
                       ARG0 [ E [ MOOD indicative,
                                  TENSE present ] ] ] !> ],
   FLAGS.TRIGGER "be_c_is" ].

be_c_was_itx_rule1 := arg0e_gtr &
 [ CONTEXT [ RELS <! [ PRED "_rain_v_1_rel",
                       ARG0 [ E [ MOOD indicative,
                                  TENSE past ] ] ] !> ],
   FLAGS.TRIGGER "be_c_was" ].

that_compl_rule_1 := compl_prop_arg1_gtr &
[ FLAGS.TRIGGER "that_c" ]. 

that_compl_rule_2 := compl_prop_arg2_gtr &
[ FLAGS.TRIGGER "that_c" ]. 

that_compl_rule_3 := compl_prop_arg3_gtr &
[ FLAGS.TRIGGER "that_c" ]. 

that_compl_rule_4 := compl_prop_arg4_gtr &
[ FLAGS.TRIGGER "that_c" ]. 

that_subj_compl_rule_1 := compl_prop_arg1_gtr &
[ FLAGS.TRIGGER "that_c_subj" ]. 

that_subj_compl_rule_2 := compl_prop_arg2_gtr &
[ FLAGS.TRIGGER "that_c_subj" ]. 

that_subj_compl_rule_3 := compl_prop_arg3_gtr &
[ FLAGS.TRIGGER "that_c_subj" ]. 

that_subj_compl_rule_4 := compl_prop_arg4_gtr &
[ FLAGS.TRIGGER "that_c_subj" ]. 

to_compl_rule_1 := compl_notense_arg1_gtr &
[ FLAGS.TRIGGER "to_c_prop" ]. 

to_compl_rule_2 := compl_notense_arg2_gtr &
[ FLAGS.TRIGGER "to_c_prop" ]. 

to_compl_rule_3 := compl_notense_arg3_gtr &
[ FLAGS.TRIGGER "to_c_prop" ]. 

to_compl_rule_4 := compl_notense_arg4_gtr &
[ FLAGS.TRIGGER "to_c_prop" ]. 

to_compl_rule_5 := compl_notense_marg_gtr &
[ FLAGS.TRIGGER "to_c_prop" ]. 

whether_compl_rule_1 := compl_int_arg1_gtr &
[ FLAGS.TRIGGER "whether_c_fin" ]. 

whether_compl_rule_2 := compl_int_arg2_gtr &
[ FLAGS.TRIGGER "whether_c_fin" ]. 

whether_compl_rule_3 := compl_int_arg3_gtr &
[ FLAGS.TRIGGER "whether_c_fin" ]. 

whether_compl_rule_4 := compl_int_arg4_gtr &
[ FLAGS.TRIGGER "whether_c_fin" ]. 

whether_compl_inf_rule_1 := compl_int_notense_arg1_gtr &
[ FLAGS.TRIGGER "whether_c_inf" ]. 

whether_compl_inf_rule_2 := compl_int_notense_arg2_gtr &
[ FLAGS.TRIGGER "whether_c_inf" ]. 

whether_compl_inf_rule_3 := compl_int_notense_arg3_gtr &
[ FLAGS.TRIGGER "whether_c_inf" ]. 

whether_compl_inf_rule_4 := compl_int_notense_arg4_gtr &
[ FLAGS.TRIGGER "whether_c_inf" ]. 

whether_or_not_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "whether_or_not_c_fin" ].

whether_or_not_inf_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "whether_or_not_c_inf" ].

if_compl_rule_1 := compl_int_arg1_gtr &
[ FLAGS.TRIGGER "if_c_indic" ]. 

if_compl_rule_2 := compl_int_arg2_gtr &
[ FLAGS.TRIGGER "if_c_indic" ]. 

if_compl_rule_3 := compl_int_arg3_gtr &
[ FLAGS.TRIGGER "if_c_indic" ]. 

if_compl_rule_4 := compl_int_arg4_gtr &
[ FLAGS.TRIGGER "if_c_indic" ]. 

if_compl_subj_rule_1 := compl_int_arg1_gtr &
[ FLAGS.TRIGGER "if_c_subjnct" ]. 

if_compl_subj_rule_2 := compl_int_arg2_gtr &
[ FLAGS.TRIGGER "if_c_subjnct" ]. 

if_compl_subj_rule_3 := compl_int_arg3_gtr &
[ FLAGS.TRIGGER "if_c_subjnct" ]. 

if_compl_subj_rule_4 := compl_int_arg4_gtr &
[ FLAGS.TRIGGER "if_c_subjnct" ]. 

for_compl_inf_rule_1 := compl_prop_notense_arg1_gtr &
[ FLAGS.TRIGGER "for_c" ]. 

for_compl_inf_rule_2 := compl_prop_notense_arg2_gtr &
[ FLAGS.TRIGGER "for_c" ]. 

for_compl_inf_rule_3 := compl_prop_notense_arg3_gtr &
[ FLAGS.TRIGGER "for_c" ]. 

for_compl_inf_rule_4 := compl_prop_notense_arg4_gtr &
[ FLAGS.TRIGGER "for_c" ]. 

; Verbs that select a VP complement marked with unusual complementizers
; 'and', 'but', 'from' ('Kim will try and do that', 'We can't help but notice'
; 'They kept him from leaving')

and_compl_inf_rule_1 := arg0e_gtr &
[ CONTEXT.RELS <! [ PRED "_try_v_1_rel", ARG2 #h & handle ] !>,
  FLAGS.TRIGGER "and_c_prop" ].   

but_compl_inf_rule_1 := arg0e_gtr &
[ CONTEXT.RELS <! [ PRED "_help_v_but_rel", ARG2 #h & handle ] !>,
  FLAGS.TRIGGER "but_c_prop" ].   

from_compl_inf_rule_1 := arg0e_gtr &
[ CONTEXT.RELS <! [ PRED "~[_-]from(-[^_]+)?_rel" ] !>,
  FLAGS.TRIGGER "from_c_prop" ]. 

like_compl_rule_1 := compl_prop_like_arg1_gtr &
[ FLAGS.TRIGGER "like_c" ]. 

like_compl_rule_2 := compl_prop_like_arg2_gtr &
[ FLAGS.TRIGGER "like_c" ]. 

like_compl_rule_3 := compl_prop_like_arg3_gtr &
[ FLAGS.TRIGGER "like_c" ]. 

like_compl_rule_4 := compl_prop_like_arg4_gtr &
[ FLAGS.TRIGGER "like_c" ]. 


as_if_compl_rule_1 := compl_prop_like_arg1_gtr &
[ FLAGS.TRIGGER "as_if_c" ]. 

as_if_compl_rule_2 := compl_prop_like_arg2_gtr &
[ FLAGS.TRIGGER "as_if_c" ]. 

as_if_compl_rule_3 := compl_prop_like_arg3_gtr &
[ FLAGS.TRIGGER "as_if_c" ]. 

as_if_compl_rule_4 := compl_prop_like_arg4_gtr &
[ FLAGS.TRIGGER "as_if_c" ]. 

as_though_compl_rule_1 := compl_prop_like_arg1_gtr &
[ FLAGS.TRIGGER "as_though_c" ]. 

as_though_compl_rule_2 := compl_prop_like_arg2_gtr &
[ FLAGS.TRIGGER "as_though_c" ]. 

as_though_compl_rule_3 := compl_prop_like_arg3_gtr &
[ FLAGS.TRIGGER "as_though_c" ]. 

as_though_compl_rule_4 := compl_prop_like_arg4_gtr &
[ FLAGS.TRIGGER "as_though_c" ]. 

; For infinitival relative clauses
to_compl_rule6 := generator_rule &
 [ CONTEXT [ RELS <! [ LBL #lbl,
                       ARG0 #x & ref-ind ],
                     [ LBL #lbl,
                       PRED prpstn_m_rel,
                       ARG0 #e ],
                     [ ARG0 #e & event & [ E.TENSE untensed ] ] !> ],
   FLAGS [ EQUAL < #e, #x >,
           TRIGGER "to_c_prop" ] ]. 

; Empty prepositions/particles

; The regex "(-[^_]+)?_rel" says either simply end in "_rel" or have as
; intervening character sequence one starting with hyphen followed by
; any number of characters excluding underscore, ending with "_rel".
; This allows for matching where the triggering sequence in the pred
; name is part of a more complex 'subsense' specification, such as
; "_different_a_from-than_rel".

about_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~[_-]about(-[^_]+)?_rel" ] !> ],
   FLAGS.TRIGGER "about_prtcl" ]. 

across_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~[_-]across(-[^_]+)?_rel" ] !> ],
   FLAGS.TRIGGER "across_prtcl" ]. 

after_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~[_-]after(-[^_]+)?_rel" ] !> ],
   FLAGS.TRIGGER "after_prtcl" ]. 

against_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~[_-]against(-[^_]+)?_rel" ] !> ],
   FLAGS.TRIGGER "against_prtcl" ]. 

ahead_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~[_-]ahead(-[^_]+)?_rel" ] !> ],
   FLAGS.TRIGGER "ahead_prtcl" ]. 

along_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~[_-]along(-[^_]+)?_rel" ] !> ],
   FLAGS.TRIGGER "along_prtcl" ]. 

among_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~[_-]among(-[^_]+)?_rel" ] !> ],
   FLAGS.TRIGGER "among_prtcl" ]. 

apart_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~[_-]apart(-[^_]+)?_rel" ] !> ],
   FLAGS.TRIGGER "apart_prtcl" ]. 

around_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~[_-]around(-[^_]+)?_rel" ] !> ],
   FLAGS.TRIGGER "around_prtcl" ]. 

as_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~[_-]as(-[^_]+)?_rel" ] !> ],
   FLAGS [ TRIGGER "as_prtcl" ] ]. 

as_sel_rule3 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~[_-]as(-[^_]+)?_rel" ] !> ],
   FLAGS [ TRIGGER "as_prdp_p2" ] ]. 

as_sel_rule5 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED comp_equal_rel ] !> ],
   FLAGS [ TRIGGER "as_comp_prep" ] ]. 

as_sel_rule7 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED comp_equal_rel ] !> ],
   FLAGS [ TRIGGER "as_comp_prep_nc" ] ]. 

as_sel_rule9 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~[_-]as(-[^_]+)?_rel" ] !> ],
   FLAGS [ TRIGGER "as_it_adj_p" ] ]. 

as_sel_rule11 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~[_-]as(-[^_]+)?_rel" ] !> ],
   FLAGS [ TRIGGER "as_nbar" ] ]. 

as+to_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~[_-]as+to(-[^_]+)?_rel" ] !> ],
   FLAGS.TRIGGER "as_to_prtcl" ]. 

aside_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~[_-]aside(-[^_]+)?_rel" ] !> ],
   FLAGS.TRIGGER "aside_prtcl" ]. 

at_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~[_-]at(-[^_]+)?_rel" ] !> ],
   FLAGS.TRIGGER "at_prtcl" ]. 

away_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~[_-]away(-[^_]+)?_rel" ] !> ],
   FLAGS.TRIGGER "away_prtcl" ]. 

back_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~[_-]back(-[^_]+)?_rel" ] !> ],
   FLAGS.TRIGGER "back_particle" ]. 

behind_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~[_-]behind(-[^_]+)?_rel" ] !> ],
   FLAGS.TRIGGER "behind_prtcl" ]. 

between_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~[_-]between(-[^_]+)?_rel" ] !> ],
   FLAGS.TRIGGER "between_prtcl" ]. 

by_pass_p_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~_v_",
                       ARG0 #e,
                       ARG1 #x & ref-ind,
                       ARG2 #y & individual ] !> ],
   FILTER.RELS <! [ PRED prop_imp_m_rel,
                    ARG0 #e,
                    PSV semarg & #u ] !>,
   FLAGS [ EQUAL < #x, #u >,
           SUBSUME < #y >,
           TRIGGER "by_pass_p" ] ].  

by_pass_p_rule2 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~_v_",
                       ARG0 #e,
                       ARG1 #x & ref-ind,
                       ARG3 #y & individual ] !> ],
   FILTER.RELS <! [ PRED prop_imp_m_rel,
                    ARG0 #e,
                    PSV semarg & #u ] !>,
   FLAGS [ EQUAL < #x, #u >,
           SUBSUME < #y >,
           TRIGGER "by_pass_p" ] ].  

by_pass_p_rule3 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~_v_",
                       ARG0 #e,
                       ARG1 #x & ref-ind,
                       ARG2 #y & handle ] !> ],
   FILTER.RELS <! [ PRED prop_imp_m_rel,
                    ARG0 #e,
                    PSV semarg & #u ] !>,
   FLAGS [ EQUAL < #x, #y, #u >,
           TRIGGER "by_pass_p" ] ].  

by_pass_p_rule4 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~_v_",
                       ARG0 #e,
                       ARG1 #x & ref-ind,
                       ARG2 #y & individual ],
                     [ PRED subord_rel,
                       SUBORD #h ],
                     [ LBL #h,
                       ARG0 #e ] !> ],
   FLAGS [ EQUAL < #x, #h >,
           SUBSUME < #y >,
           TRIGGER "by_pass_p" ] ].  

by_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~[_-]by(-[^_]+)?_rel" ] !> ],
   FLAGS.TRIGGER "by_prtcl" ]. 

dash_prtcl_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~[_-]dash(-[^_]+)?_rel" ] !> ],
   FLAGS.TRIGGER "dash_prtcl" ]. 

down_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~[_-]down(-[^_]+)?_rel" ] !> ],
   FLAGS.TRIGGER "down_prtcl" ]. 

for_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~[_-]for(-[^_]+)?_rel" ] !> ],
   FLAGS.TRIGGER "for_prtcl" ]. 

for_sel_rule3 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "for_nbar_p" ]. 

forth_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~[_-]forth(-[^_]+)?_rel" ] !> ],
   FLAGS.TRIGGER "forth_prtcl" ]. 

forward_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~[_-]forward(-[^_]+)?_rel" ] !> ],
   FLAGS.TRIGGER "forward_prtcl" ]. 

from_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~[_-]from(-[^_]+)?_rel" ] !> ],
   FLAGS.TRIGGER "from_prtcl" ]. 

in_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~[_-]in(-[^_]+)?_rel" ] !> ],
   FLAGS.TRIGGER "in_prtcl" ]. 

into_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~[_-]into(-[^_]+)?_rel" ] !> ],
   FLAGS.TRIGGER "into_prtcl" ]. 

of_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~[_-]of(-[^_]+)?_rel" ] !> ],
   FLAGS.TRIGGER "of_prtcl" ]. 

of_sel_rule2 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED day_rel ] !> ],
   FLAGS.TRIGGER "of_prtcl" ]. 

of_sel_rule3 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED mofy_rel ] !> ],
   FLAGS.TRIGGER "of_prtcl" ]. 

of_sel_rule4 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED place_n_rel ] !> ],
   FLAGS.TRIGGER "of_prtcl" ]. 

of_sel_rule5 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED day_part_rel ] !> ],
   FLAGS.TRIGGER "of_prtcl" ]. 

of_sel_rule6 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED def_day_part_rel ] !> ],
   FLAGS.TRIGGER "of_prtcl" ]. 

of_sel_rule7 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED nominalization_rel ] !> ],
   FLAGS.TRIGGER "of_prtcl" ]. 

of_sel_rule10 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~[_-]of-n_rel" ] !> ],
   FLAGS.TRIGGER "of_nbar_p" ]. 

of_sel_rule11 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~_of_rel" ] !> ],
   FLAGS.TRIGGER "of_nbar_p" ]. 

off_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~[_-]off(-[^_]+)?_rel" ] !> ],
   FLAGS.TRIGGER "off_prtcl" ]. 

on_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~[_-]on(-[^_]+)?_rel" ] !> ],
   FLAGS.TRIGGER "on_prtcl" ]. 

onto_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~[_-]onto(-[^_]+)?_rel" ] !> ],
   FLAGS.TRIGGER "onto_prtcl" ]. 

onward_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~[_-]onward(-[^_]+)?_rel" ] !> ],
   FLAGS.TRIGGER "onward_prtcl" ]. 

onwards_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~[_-]onwards(-[^_]+)?_rel" ] !> ],
   FLAGS.TRIGGER "onwards_prtcl" ]. 

open_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~[_-]open(-[^_]+)?_rel" ] !> ],
   FLAGS.TRIGGER "open_prtcl" ]. 

out+of_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~[_-]out+of_rel" ] !> ],
   FLAGS.TRIGGER "out_of_prtcl" ]. 

out_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~[_-]out(-[^_]+)?_rel" ] !> ],
   FLAGS.TRIGGER "out_particle" ]. 

over_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~[_-]over(-[^_]+)?_rel" ] !> ],
   FLAGS.TRIGGER "over_prtcl" ]. 

short_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~[_-]short(-[^_]+)?_rel" ] !> ],
   FLAGS.TRIGGER "short_prtcl" ]. 

still_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~[_-]still(-[^_]+)?_rel" ] !> ],
   FLAGS.TRIGGER "still_prtcl" ]. 

than_compar_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED comp_rel ] !> ],
   FILTER [ RELS <! [ PRED comp_rel, ARG2 #u & semarg ] !> ],
   FLAGS [ EQUAL < #u >,
           TRIGGER "than_p1" ] ]. 

than_compar_rule2 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED comp_rel ] !> ],
   FILTER [ RELS <! [ PRED comp_rel, ARG2 #u & semarg ] !> ],
   FLAGS [ EQUAL < #u >,
           TRIGGER "than_p1_nc" ] ]. 

through_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~[_-]through(-[^_]+)?_rel" ] !> ],
   FLAGS.TRIGGER "through_prtcl" ]. 

than_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~_than(-[^_]+)?_rel" ] !> ],
   FLAGS.TRIGGER "than_p1" ]. 

than_sel_rule2 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~_than(-[^_]+)?_rel" ] !> ],
   FLAGS.TRIGGER "than_p1_nc" ]. 

till_prtcl_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "till_p1" ].

till_prtcl_rule2 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "till_p2" ].

to_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~[_-]to(-[^_]+)?_rel" ] !> ],
   FLAGS.TRIGGER "to_prtcl" ]. 

to_sel_rule2 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~_v_",
                       ARG0 event & #e,
                       ARG2 ref-ind & #x1,
                       ARG3 ref-ind & #x2] !> ],
   FLAGS [ EQUAL < #e, #x1, #x2 >,
           TRIGGER "to_prtcl" ] ]. 

to_sel_rule3 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~[_-]to(-[^_]+)?_rel" ] !> ],
   FLAGS.TRIGGER "to_nbar_p" ]. 

together_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~[_-]together(-[^_]+)?_rel" ] !> ],
   FLAGS.TRIGGER "together_prtcl" ]. 

toward_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~[_-]toward(-[^_]+)?_rel" ] !> ],
   FLAGS.TRIGGER "toward_prtcl" ]. 

towards_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~[_-]towards(-[^_]+)?_rel" ] !> ],
   FLAGS.TRIGGER "towards_prtcl" ]. 

until_prtcl_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "until_prtcl" ].

up_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~[_-]up(-[^_]+)?_rel" ] !> ],
   FLAGS.TRIGGER "up_prtcl" ]. 

upon_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~[_-]upon(-[^_]+)?_rel" ] !> ],
   FLAGS.TRIGGER "upon_prtcl" ]. 

with_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~[_-]with(-[^_]+)?_rel" ] !> ],
   FLAGS.TRIGGER "with_prtcl" ]. 

without_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~[_-]without(-[^_]+)?_rel" ] !> ],
   FLAGS.TRIGGER "without_prtcl" ]. 

yet_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~[_-]yet(-[^_]+)?_rel" ] !> ],
   FLAGS.TRIGGER "yet_prtcl" ]. 

dash_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~[_-]dash(-[^_]+)?_rel" ] !> ],
   FLAGS.TRIGGER "dash_prtcl" ]. 

;;; Begin expletive copula (weather) section

expletive_is_snowy_a_expl_rel := expletive_is_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_snowy_a_1_rel" ].

expletive_is_breezy_a_expl_rel := expletive_is_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_breezy_a_1_rel" ].

expletive_is_blustery_a_expl_rel := expletive_is_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_blustery_a_1_rel" ].

expletive_is_chilly_a_expl_rel := expletive_is_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_chilly_a_1_rel" ].

expletive_is_cloudy_a_expl_rel := expletive_is_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_cloudy_a_1_rel" ].

expletive_is_cold_a_expl_rel := expletive_is_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_cold_a_1_rel" ].

expletive_is_cool_a_expl_rel := expletive_is_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_cool_a_1_rel" ].

expletive_is_damp_a_expl_rel := expletive_is_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_damp_a_1_rel" ].

expletive_is_dry_a_expl_rel := expletive_is_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_dry_a_1_rel" ].

expletive_is_foggy_a_expl_rel := expletive_is_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_foggy_a_1_rel" ].

expletive_is_frigid_a_expl_rel := expletive_is_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_frigid_a_1_rel" ].

expletive_is_gusty_a_expl_rel := expletive_is_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_gusty_a_1_rel" ].

expletive_is_hot_a_expl_rel := expletive_is_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_hot_a_1_rel" ].

expletive_is_mild_a_expl_rel := expletive_is_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_mild_a_1_rel" ].

expletive_is_rainy_a_expl_rel := expletive_is_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_rainy_a_1_rel" ].

expletive_is_sunny_a_expl_rel := expletive_is_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_sunny_a_1_rel" ].

expletive_is_time_a_expl_rel := expletive_is_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_time_a_expl-for_rel" ].

expletive_is_warm_a_expl_rel := expletive_is_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_warm_a_1_rel" ].

expletive_is_wet_a_expl_rel := expletive_is_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_wet_a_1_rel" ].

expletive_is_windy_a_expl_rel := expletive_is_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_windy_a_1_rel" ].

expletive_was_snowy_a_expl_rel := expletive_was_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_snowy_a_1_rel" ].

expletive_was_breezy_a_expl_rel := expletive_was_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_breezy_a_1_rel" ].

expletive_was_blustery_a_expl_rel := expletive_was_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_blustery_a_1_rel" ].

expletive_was_chilly_a_expl_rel := expletive_was_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_chilly_a_1_rel" ].

expletive_was_cloudy_a_expl_rel := expletive_was_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_cloudy_a_1_rel" ].

expletive_was_cold_a_expl_rel := expletive_was_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_cold_a_1_rel" ].

expletive_was_cool_a_expl_rel := expletive_was_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_cool_a_1_rel" ].

expletive_was_damp_a_expl_rel := expletive_was_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_damp_a_1_rel" ].

expletive_was_dry_a_expl_rel := expletive_was_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_dry_a_1_rel" ].

expletive_was_foggy_a_expl_rel := expletive_was_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_foggy_a_1_rel" ].

expletive_was_frigid_a_expl_rel := expletive_was_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_frigid_a_1_rel" ].

expletive_was_gusty_a_expl_rel := expletive_was_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_gusty_a_1_rel" ].

expletive_was_hot_a_expl_rel := expletive_was_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_hot_a_1_rel" ].

expletive_was_mild_a_expl_rel := expletive_was_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_mild_a_1_rel" ].

expletive_was_rainy_a_expl_rel := expletive_was_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_rainy_a_1_rel" ].

expletive_was_sunny_a_expl_rel := expletive_was_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_sunny_a_1_rel" ].

expletive_was_time_a_expl_rel := expletive_was_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_time_a_expl-for_rel" ].

expletive_was_warm_a_expl_rel := expletive_was_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_warm_a_1_rel" ].

expletive_was_wet_a_expl_rel := expletive_was_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_wet_a_1_rel" ].

expletive_was_windy_a_expl_rel := expletive_was_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_windy_a_1_rel" ].

expletive_be_snowy_a_expl_rel1 := expletive_be_adj_expl_gtr1 &
[ CONTEXT.RELS.LIST.FIRST.PRED "_snowy_a_1_rel" ].

expletive_be_breezy_a_expl_rel1 := expletive_be_adj_expl_gtr1 &
[ CONTEXT.RELS.LIST.FIRST.PRED "_breezy_a_1_rel" ].

expletive_be_blustery_a_expl_rel1 := expletive_be_adj_expl_gtr1 &
[ CONTEXT.RELS.LIST.FIRST.PRED "_blustery_a_1_rel" ].

expletive_be_chilly_a_expl_rel1 := expletive_be_adj_expl_gtr1 &
[ CONTEXT.RELS.LIST.FIRST.PRED "_chilly_a_1_rel" ].

expletive_be_cloudy_a_expl_rel1 := expletive_be_adj_expl_gtr1 &
[ CONTEXT.RELS.LIST.FIRST.PRED "_cloudy_a_1_rel" ].

expletive_be_cold_a_expl_rel1 := expletive_be_adj_expl_gtr1 &
[ CONTEXT.RELS.LIST.FIRST.PRED "_cold_a_1_rel" ].

expletive_be_cool_a_expl_rel1 := expletive_be_adj_expl_gtr1 &
[ CONTEXT.RELS.LIST.FIRST.PRED "_cool_a_1_rel" ].

expletive_be_damp_a_expl_rel1 := expletive_be_adj_expl_gtr1 &
[ CONTEXT.RELS.LIST.FIRST.PRED "_damp_a_1_rel" ].

expletive_be_dry_a_expl_rel1 := expletive_be_adj_expl_gtr1 &
[ CONTEXT.RELS.LIST.FIRST.PRED "_dry_a_1_rel" ].

expletive_be_foggy_a_expl_rel1 := expletive_be_adj_expl_gtr1 &
[ CONTEXT.RELS.LIST.FIRST.PRED "_foggy_a_1_rel" ].

expletive_be_frigid_a_expl_rel1 := expletive_be_adj_expl_gtr1 &
[ CONTEXT.RELS.LIST.FIRST.PRED "_frigid_a_1_rel" ].

expletive_be_gusty_a_expl_rel1 := expletive_be_adj_expl_gtr1 &
[ CONTEXT.RELS.LIST.FIRST.PRED "_gusty_a_1_rel" ].

expletive_be_hot_a_expl_rel1 := expletive_be_adj_expl_gtr1 &
[ CONTEXT.RELS.LIST.FIRST.PRED "_hot_a_1_rel" ].

expletive_be_mild_a_expl_rel1 := expletive_be_adj_expl_gtr1 &
[ CONTEXT.RELS.LIST.FIRST.PRED "_mild_a_1_rel" ].

expletive_be_rainy_a_expl_rel1 := expletive_be_adj_expl_gtr1 &
[ CONTEXT.RELS.LIST.FIRST.PRED "_rainy_a_1_rel" ].

expletive_be_sunny_a_expl_rel1 := expletive_be_adj_expl_gtr1 &
[ CONTEXT.RELS.LIST.FIRST.PRED "_sunny_a_1_rel" ].

expletive_be_time_a_expl_rel1 := expletive_be_adj_expl_gtr1 &
[ CONTEXT.RELS.LIST.FIRST.PRED "_time_a_expl-for_rel" ].

expletive_be_warm_a_expl_rel1 := expletive_be_adj_expl_gtr1 &
[ CONTEXT.RELS.LIST.FIRST.PRED "_warm_a_1_rel" ].

expletive_be_wet_a_expl_rel1 := expletive_be_adj_expl_gtr1 &
[ CONTEXT.RELS.LIST.FIRST.PRED "_wet_a_1_rel" ].

expletive_be_windy_a_expl_rel1 := expletive_be_adj_expl_gtr1 &
[ CONTEXT.RELS.LIST.FIRST.PRED "_windy_a_1_rel" ].

expletive_be_snowy_a_expl_rel2 := expletive_be_adj_expl_gtr2 &
[ CONTEXT.RELS.LIST.FIRST.PRED "_snowy_a_1_rel" ].

expletive_be_breezy_a_expl_rel2 := expletive_be_adj_expl_gtr2 &
[ CONTEXT.RELS.LIST.FIRST.PRED "_breezy_a_1_rel" ].

expletive_be_blustery_a_expl_rel2 := expletive_be_adj_expl_gtr2 &
[ CONTEXT.RELS.LIST.FIRST.PRED "_blustery_a_1_rel" ].

expletive_be_chilly_a_expl_rel2 := expletive_be_adj_expl_gtr2 &
[ CONTEXT.RELS.LIST.FIRST.PRED "_chilly_a_1_rel" ].

expletive_be_cloudy_a_expl_rel2 := expletive_be_adj_expl_gtr2 &
[ CONTEXT.RELS.LIST.FIRST.PRED "_cloudy_a_1_rel" ].

expletive_be_cold_a_expl_rel2 := expletive_be_adj_expl_gtr2 &
[ CONTEXT.RELS.LIST.FIRST.PRED "_cold_a_1_rel" ].

expletive_be_cool_a_expl_rel2 := expletive_be_adj_expl_gtr2 &
[ CONTEXT.RELS.LIST.FIRST.PRED "_cool_a_1_rel" ].

expletive_be_damp_a_expl_rel2 := expletive_be_adj_expl_gtr2 &
[ CONTEXT.RELS.LIST.FIRST.PRED "_damp_a_1_rel" ].

expletive_be_dry_a_expl_rel2 := expletive_be_adj_expl_gtr2 &
[ CONTEXT.RELS.LIST.FIRST.PRED "_dry_a_1_rel" ].

expletive_be_foggy_a_expl_rel2 := expletive_be_adj_expl_gtr2 &
[ CONTEXT.RELS.LIST.FIRST.PRED "_foggy_a_1_rel" ].

expletive_be_frigid_a_expl_rel2 := expletive_be_adj_expl_gtr2 &
[ CONTEXT.RELS.LIST.FIRST.PRED "_frigid_a_1_rel" ].

expletive_be_gusty_a_expl_rel2 := expletive_be_adj_expl_gtr2 &
[ CONTEXT.RELS.LIST.FIRST.PRED "_gusty_a_1_rel" ].

expletive_be_hot_a_expl_rel2 := expletive_be_adj_expl_gtr2 &
[ CONTEXT.RELS.LIST.FIRST.PRED "_hot_a_1_rel" ].

expletive_be_mild_a_expl_rel2 := expletive_be_adj_expl_gtr2 &
[ CONTEXT.RELS.LIST.FIRST.PRED "_mild_a_1_rel" ].

expletive_be_rainy_a_expl_rel2 := expletive_be_adj_expl_gtr2 &
[ CONTEXT.RELS.LIST.FIRST.PRED "_rainy_a_1_rel" ].

expletive_be_sunny_a_expl_rel2 := expletive_be_adj_expl_gtr2 &
[ CONTEXT.RELS.LIST.FIRST.PRED "_sunny_a_1_rel" ].

expletive_be_time_a_expl_rel2 := expletive_be_adj_expl_gtr2 &
[ CONTEXT.RELS.LIST.FIRST.PRED "_time_a_expl-for_rel" ].

expletive_be_warm_a_expl_rel2 := expletive_be_adj_expl_gtr2 &
[ CONTEXT.RELS.LIST.FIRST.PRED "_warm_a_1_rel" ].

expletive_be_wet_a_expl_rel2 := expletive_be_adj_expl_gtr2 &
[ CONTEXT.RELS.LIST.FIRST.PRED "_wet_a_1_rel" ].

expletive_be_windy_a_expl_rel2 := expletive_be_adj_expl_gtr2 &
[ CONTEXT.RELS.LIST.FIRST.PRED "_windy_a_1_rel" ].

expletive_been_snowy_a_expl_rel := expletive_been_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_snowy_a_1_rel" ].

expletive_been_breezy_a_expl_rel := expletive_been_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_breezy_a_1_rel" ].

expletive_been_blustery_a_expl_rel := expletive_been_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_blustery_a_1_rel" ].

expletive_been_chilly_a_expl_rel := expletive_been_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_chilly_a_1_rel" ].

expletive_been_cloudy_a_expl_rel := expletive_been_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_cloudy_a_1_rel" ].

expletive_been_cold_a_expl_rel := expletive_been_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_cold_a_1_rel" ].

expletive_been_cool_a_expl_rel := expletive_been_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_cool_a_1_rel" ].

expletive_been_damp_a_expl_rel := expletive_been_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_damp_a_1_rel" ].

expletive_been_dry_a_expl_rel := expletive_been_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_dry_a_1_rel" ].

expletive_been_foggy_a_expl_rel := expletive_been_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_foggy_a_1_rel" ].

expletive_been_frigid_a_expl_rel := expletive_been_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_frigid_a_1_rel" ].

expletive_been_gusty_a_expl_rel := expletive_been_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_gusty_a_1_rel" ].

expletive_been_hot_a_expl_rel := expletive_been_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_hot_a_1_rel" ].

expletive_been_mild_a_expl_rel := expletive_been_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_mild_a_1_rel" ].

expletive_been_rainy_a_expl_rel := expletive_been_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_rainy_a_1_rel" ].

expletive_been_sunny_a_expl_rel := expletive_been_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_sunny_a_1_rel" ].

expletive_been_time_a_expl_rel := expletive_been_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_time_a_expl-for_rel" ].

expletive_been_warm_a_expl_rel := expletive_been_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_warm_a_1_rel" ].

expletive_been_wet_a_expl_rel := expletive_been_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_wet_a_1_rel" ].

expletive_been_windy_a_expl_rel := expletive_been_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_windy_a_1_rel" ].

be_c_is_itx_rain_rule1 := arg0e_gtr &
 [ CONTEXT [ RELS <! [ PRED "_rain_v_1_rel",
                       ARG0 [ E [ MOOD indicative,
                                  TENSE present ] ] ] !> ],
   FLAGS.TRIGGER "be_c_is" ].

be_c_was_itx_rain_rule1 := arg0e_gtr &
 [ CONTEXT [ RELS <! [ PRED "_rain_v_1_rel",
                       ARG0 [ E [ MOOD indicative,
                                  TENSE past ] ] ] !> ],
   FLAGS.TRIGGER "be_c_was" ].

be_c_been_itx_rain_rule1 := arg0e_gtr &
 [ CONTEXT [ RELS <! [ PRED "_rain_v_1_rel",
                       ARG0 [ E.ASPECT.PERF + ] ] !> ],
   FLAGS.TRIGGER "be_c_been" ].

be_c_be_itx_rain_rule1 := arg0e_gtr &
 [ CONTEXT [ RELS <! [ PRED "_rain_v_1_rel",
                       ARG0 [ E.TENSE untensed ] ] !> ],
   FLAGS.TRIGGER "be_c_be" ].

be_c_is_itx_drizzle_rule1 := arg0e_gtr &
 [ CONTEXT [ RELS <! [ PRED "_drizzle_v_1_rel",
                       ARG0 [ E [ MOOD indicative,
                                  TENSE present ] ] ] !> ],
   FLAGS.TRIGGER "be_c_is" ].

be_c_was_itx_drizzle_rule1 := arg0e_gtr &
 [ CONTEXT [ RELS <! [ PRED "_drizzle_v_1_rel",
                       ARG0 [ E [ MOOD indicative,
                                  TENSE past ] ] ] !> ],
   FLAGS.TRIGGER "be_c_was" ].

be_c_been_itx_drizzle_rule1 := arg0e_gtr &
 [ CONTEXT [ RELS <! [ PRED "_drizzle_v_1_rel",
                       ARG0 [ E.ASPECT.PERF + ] ] !> ],
   FLAGS.TRIGGER "be_c_been" ].

be_c_be_itx_drizzle_rule1 := arg0e_gtr &
 [ CONTEXT [ RELS <! [ PRED "_drizzle_v_1_rel",
                       ARG0 [ E.TENSE untensed ] ] !> ],
   FLAGS.TRIGGER "be_c_be" ].

be_c_is_itx_hail_rule1 := arg0e_gtr &
 [ CONTEXT [ RELS <! [ PRED "_hail_v_1_rel",
                       ARG0 [ E [ MOOD indicative,
                                  TENSE present ] ] ] !> ],
   FLAGS.TRIGGER "be_c_is" ].

be_c_was_itx_hail_rule1 := arg0e_gtr &
 [ CONTEXT [ RELS <! [ PRED "_hail_v_1_rel",
                       ARG0 [ E [ MOOD indicative,
                                  TENSE past ] ] ] !> ],
   FLAGS.TRIGGER "be_c_was" ].

be_c_been_itx_hail_rule1 := arg0e_gtr &
 [ CONTEXT [ RELS <! [ PRED "_hail_v_1_rel",
                       ARG0 [ E.ASPECT.PERF + ] ] !> ],
   FLAGS.TRIGGER "be_c_been" ].

be_c_be_itx_hail_rule1 := arg0e_gtr &
 [ CONTEXT [ RELS <! [ PRED "_hail_v_1_rel",
                       ARG0 [ E.TENSE untensed ] ] !> ],
   FLAGS.TRIGGER "be_c_be" ].

be_c_is_itx_snow_rule1 := arg0e_gtr &
 [ CONTEXT [ RELS <! [ PRED "_snow_v_1_rel",
                       ARG0 [ E [ MOOD indicative,
                                  TENSE present ] ] ] !> ],
   FLAGS.TRIGGER "be_c_is" ].

be_c_was_itx_snow_rule1 := arg0e_gtr &
 [ CONTEXT [ RELS <! [ PRED "_snow_v_1_rel",
                       ARG0 [ E [ MOOD indicative,
                                  TENSE past ] ] ] !> ],
   FLAGS.TRIGGER "be_c_was" ].

be_c_been_itx_snow_rule1 := arg0e_gtr &
 [ CONTEXT [ RELS <! [ PRED "_snow_v_1_rel",
                       ARG0 [ E.ASPECT.PERF + ] ] !> ],
   FLAGS.TRIGGER "be_c_been" ].

be_c_be_itx_snow_rule1 := arg0e_gtr &
 [ CONTEXT [ RELS <! [ PRED "_snow_v_1_rel",
                       ARG0 [ E.TENSE untensed ] ] !> ],
   FLAGS.TRIGGER "be_c_be" ].

be_c_is_itx_sprinkle_rule1 := arg0e_gtr &
 [ CONTEXT [ RELS <! [ PRED "_sprinkle_v_1_rel",
                       ARG0 [ E [ MOOD indicative,
                                  TENSE present ] ] ] !> ],
   FLAGS.TRIGGER "be_c_is" ].

be_c_was_itx_sprinkle_rule1 := arg0e_gtr &
 [ CONTEXT [ RELS <! [ PRED "_sprinkle_v_1_rel",
                       ARG0 [ E [ MOOD indicative,
                                  TENSE past ] ] ] !> ],
   FLAGS.TRIGGER "be_c_was" ].

be_c_been_itx_sprinkle_rule1 := arg0e_gtr &
 [ CONTEXT [ RELS <! [ PRED "_sprinkle_v_1_rel",
                       ARG0 [ E.ASPECT.PERF + ] ] !> ],
   FLAGS.TRIGGER "be_c_been" ].

be_c_be_itx_sprinkle_rule1 := arg0e_gtr &
 [ CONTEXT [ RELS <! [ PRED "_sprinkle_v_1_rel",
                       ARG0 [ E.TENSE untensed ] ] !> ],
   FLAGS.TRIGGER "be_c_be" ].

;;; End expletive copula (weather) section