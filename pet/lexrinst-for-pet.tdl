;;; -*- Mode: tdl; Coding: utf-8; -*-
;;;
;;;  Copyright (c) 1994-2018
;;;    Dan Flickinger, Rob Malouf, Emily M. Bender
;;;    see LICENSE for conditions
;;;
;;;  lexrinst.tdl
;;;
;;;  Instances of lexical rules defined in lexrules.tdl
;;;
;;;  Created: Ann Copestake, 30-Sept-97
;;;
;;;  $Id: lexrinst.tdl 7043 2009-09-03 18:26:55Z oe $

v_aux-sb-inv_dlr := sai_nonell_lexrule &
  [ RNAME lsai ].

v_aux-sb-inv-ell_dlr := sai_ell_lexrule &
  [ RNAME lsaie ].

v_cond-inv_dlr := cond_sai &
  [ RNAME csai ].

v_aux-advadd_dlr := adv_addition &
  [ RNAME ladv ].

v_aux-neg-ell_dlr := adv_add_neg_ellipt &
  [ RNAME lnav ].

v_aux-neg-gap_dlr := adv_add_neg_gap &
  [ RNAME lnavx ].

v_aux-ell-ref_dlr := vp_ellipsis_ref &
  [ RNAME lver ].

v_aux-ell-xpl_dlr := vp_ellipsis_expl &
  [ RNAME lvex ].

v_aux-cx-noinv_dlr := contracted_aux_noninv_lexrule &
  [ RNAME lcx ].

v_nger-intr_dlr := intrans_nominal_gerund &
  [ RNAME lngi ].

v_nger-pp_dlr := intrans_pp_nominal_gerund &
  [ RNAME lngp ].

v_nger-tr_dlr := trans_nominal_gerund &
  [ RNAME lngt ].

n_det-mnth_dlr := month_det_lexrule &
  [ RNAME lmd ].

n_det-wkdy_dlr := weekday_det_lexrule &
  [ RNAME lwd ].

n_dom-ppof_dlr := dom_ppof_lexrule &
  [ RNAME ldp ].

j_att_dlr := attr_adj_lexrule &
  [ RNAME lja ].

v_j-nb-intr_dlr := attr_verb_part_lexrule &
  [ RNAME ljv ].


v_j-nb-prp-tr_dlr := attr_verb_part_tr_lexrule &
  [ RNAME ljvt ].

v_j-nb-pas-tr_dlr := attr_verb_part_psv_lexrule &
  [ RNAME ljvp ].

v_j-nb-pas-ptcl_dlr := attr_verb_part_ptcl_psv_lexrule &
  [ RNAME ljvr ].

v_j-nme-intr_dlr := attr_verb_part_intr_namemod_lexrule &
  [ RNAME ljvn ].

v_j-nme-intr-prp_dlr := attr_verb_part_intr_namemod_prp_lexrule &
  [ RNAME ljvnp ].

#|
v_j-nme-intr-pl-prp_dlr := attr_verb_part_intr_namemod_pl_prp_lexrule &
  [ RNAME ljvnpp ].
|#

v_j-nme-tr_dlr := attr_verb_part_tr_namemod_lexrule &
  [ RNAME ljnt ].

v_j-nme-tr-prp_dlr := attr_verb_part_tr_namemod_prp_lexrule &
  [ RNAME ljntp ].

#|
v_j-nme-tr-pl-prp_dlr := attr_verb_part_tr_namemod_pl_prp_lexrule &
  [ RNAME ljntpp ].
|#

det_prt-of-agr_dlr := part_ppof_agr_constr &
  [ RNAME lpca ].

det_prt-of-nagr_dlr := part_ppof_noagr_constr &
  [ RNAME lpcn ].

det_prt-nocmp_dlr := part_nocomp_constr &
  [ RNAME lpn ].

v_np-prtcl_dlr := NP_particle_lexrule &
  [ RNAME lnpp ].

v_dat_dlr := dative_shift_lexrule &
  [ RNAME ldat ].

v_it-cp-vp_dlr := verb_it_cp_vp_lexrule &
  [ RNAME lvcv ].

j_n-minut_dlr := minute_noprep_lexrule &
  [ RNAME lmin ].

j_n-minut-p_dlr := minute_prep_lexrule &
  [ RNAME lminp ].

n_n-hour_dlr := hour_np_lexrule &
  [ RNAME lhour ].

j_n-yofc_dlr := year_np_lexrule &
  [ RNAME lyear ].

v_aux-tag_dlr := tag &
  [ RNAME ltag ].

j_enough_dlr := enough_addition_nocomps &
  [ RNAME leno ].

j_enough-wc_dlr := enough_addition_wcomp &
  [ RNAME lenc ].

j_enough-wc-nogap_dlr := enough_addition_wcomp_nogap &
  [ RNAME lencn ].

j_tough_dlr := tough_adj_lexrule &
  [ RNAME ltgh ].

j_tough-compar_dlr := tough_adj_compar_lexrule &
  [ RNAME ltghc ].

;; DPF 2017-06-30 - This rule now works right for parsing, but still have to
;; figure out how to block overgeneration such as *tallly* or *uglily*
#|
j_r-i_odlr :=
%suffix (* ly) (!ty !tily)
adj_to_adv_int_lexrule &
  [ ND-AFF +,
    RNAME ljri ].
|#

;; DPF 2021-04-07 - Constrain to exclude inverted subject "it"
;;
v_inv-quot_dlr := inverted_quote_lexrule &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.--SIND.PNG.GEN animate,
    RNAME linq ].

v_cp-frag_dlr := cp_frag_lexrule &
  [ RNAME lcpf ].

n_n-ed_odlr :=
%suffix (* ed) (!ty !tied) (e ed) (!t!v!c !t!v!c!ced) 
noun_adj_lexrule &
  [ ND-AFF +,
    RNAME lnj ].

j_n-pre_odlr :=
%prefix (* pre) (* pre-) 
pre_noun_adj_lexrule &
  [ ND-AFF +,
    RNAME ljnp ].

j_n-pre-pn_odlr :=
%prefix (* pre-) 
pre_propn_adj_lexrule &
  [ ND-AFF +,
    RNAME ljnp ].

v_v-re_dlr :=
%prefix (* re) (* re-) 
v_v-re_rule &
 [ RNAME lre ].

v_v-pre_dlr :=
%prefix (* pre) (* pre-) 
v_v-pre_rule &
 [ RNAME lpre ].

v_v-mis_dlr :=
%prefix (* mis) (* mis-) 
v_v-mis_rule &
 [ RNAME lmis ].

;;;
;;; _fix_me_
;;; to make this rule functional, token mapping would have to not separate off
;;; *co-* (in `derivational_prefix_tmr').  however, doing that would then mean
;;; that either (a) we provide a prefixation rule for other parts of speech too
;;; (`co-author', maybe `co-educational') or minimally adjust existing lexical
;;; entries (currently MWEs); or (b) that we create a token-level ambiguity; i
;;; hesitate doing the latter.  but maybe it would not be so bad, in the end?
;;; the same problem applies to other derivational rules, of course.
;;;                                                             (13-mar-09; oe)

v_v-co_dlr :=
%prefix (* co-) (* co)
v_v-co_rule &
 [ ND-AFF + ].

v_v-un_dlr :=
%prefix (* un) (* un-) 
v_v-un_rule &
 [ RNAME lunv ].

v_v-counter_dlr :=
%prefix (* counter) (* counter-) 
v_v-counter_rule &
 [ RNAME lctv ] .

v_v-over_dlr :=
%prefix (* over) (* over-) 
v_v-over_rule &
 [ RNAME lovtv ].

v_v-out_dlr :=
%prefix (* out) (* out-) 
v_v-out_rule &
 [ RNAME lotv ].

v_v-self_dlr :=
%prefix (* self) (* self-) 
v_v-self_rule &
 [ RNAME lsfv ].

v_v-cross_dlr :=
%prefix (* cross) (* cross-) 
v_v-cross_rule &
 [ RNAME lcsv ].


v_v-under_dlr :=
%prefix (* under) (* under-) 
v_v-under_rule &
 [ RNAME luvtv ].

n_n-co_dlr :=
%prefix (* co) (* co-)
n_n-co_rule &
 [ RNAME lnco ].

n_n-co-ni_dlr :=
%prefix (* co) (* co-)
n_n-co-ni_rule &
 [ RNAME lncon ].

n_n-counter_dlr :=
%prefix (* counter) (* counter-) 
n_n-counter_rule &
 [ RNAME lctn ].

n_n-counter-ni_dlr :=
%prefix (* counter) (* counter-) 
n_n-counter-ni_rule &
 [ RNAME lctnn ].

n_n-mini_dlr :=
%prefix (* mini) (* mini-) 
n_n-mini_rule &
 [ RNAME lctn ].

n_n-mini-ni_dlr :=
%prefix (* mini) (* mini-) 
n_n-mini-ni_rule &
 [ RNAME lctnn ].

j_j-co_dlr :=
%prefix (* co-) (* co) 
j_j-co_rule &
 [ RNAME ljco ].

j_j-un_dlr :=
%prefix  (* un-) (* un)
j_j-un_rule &
 [ RNAME lunj ].

j_j-non_dlr :=
%prefix  (* non)
j_j-non_rule &
 [ RNAME lnnj ].

j_j-over_dlr :=
%prefix (* over-) (* over) 
j_j-over_rule &
 [ RNAME ljco ].

w_period_plr :=
%suffix (!. !..)
punctuation_period_rule &
 [ RNAME lpp ].

w_qmark_plr :=
%suffix (!p !p\?)
punctuation_qmark_rule &
 [ RNAME lpq ].

; <nex>
; <todo>
; </type>
w_comma_plr :=
%suffix (* ,)
punctuation_comma_rule &
 [ RNAME lpcm ].

;; DPF 22-12-31 - Allowed for cluster of italics with parentheses nested inside
;; FIX someday with more general solution for such clusters.
;;
w_italleft_plr :=
%prefix (!f ⌊/!f) (!f ❲!f) (!f ⌊/\(!f)
punctuation_italleft_rule &
 [ RNAME lpil ].

w_italright_plr :=
%suffix (!r !r/⌋) (!r !r❳) (!r !r\)/⌋)
punctuation_italright_rule &
 [ RNAME lpir ].

w_drop-ileft_plr :=
%prefix (!f ⌊/!f)
punct_drop_italleft_rule &
 [ RNAME lpxdl ].

w_drop-iright_plr :=
%suffix (!r !r/⌋)
punct_drop_italright_rule &
 [ RNAME lpxdr ].

w_rparen_plr :=
%suffix (!p !p\))
w_rparen_rule &
 [ RNAME lprp ].

