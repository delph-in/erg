
a_det := d_-_sg-nmd_le &
 [ ORTH < "a" >,
   SYNSEM [ LKEYS.KEYREL.PRED _a_q_rel,
            PHON.ONSET voc ] ].

a_one_adj := aj_-_i-one-nmd_le &
 [ ORTH < "a" >,
   SYNSEM.PHON.ONSET voc ].

a_one_fract := aj_np_i-frct-a_le &
 [ ORTH < "a" >,
   SYNSEM.PHON.ONSET voc ].

a_per_p := p_nb_i-nm_le &
 [ ORTH < "a" >,
   SYNSEM [ LKEYS.KEYREL.PRED _a_p_per_rel,
            PHON.ONSET voc ] ].

a_pred_p1 := p_np_i-prd-a_le &
 [ ORTH < "a" >,
   SYNSEM.PHON.ONSET voc ].

abrams := n_-_pn_le &
 [ ORTH < "Abrams" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Abrams",
            PHON.ONSET voc ] ].

after2 := p_cp_s-notop_le &
 [ ORTH < "after" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_after_x_h_rel",
            PHON.ONSET voc ] ].

after_conj := c_xp_after_le &
 [ ORTH < "after" >,
   SYNSEM.PHON.ONSET voc ].

after_nbar_nbar_p := p_nb_i-oblspr_le &
 [ ORTH < "after" >,
   SYNSEM [ LKEYS.KEYREL.PRED _after_p_n-n_rel,
            PHON.ONSET voc ] ].

after_p := p_np_i_le &
 [ ORTH < "after" >,
   SYNSEM [ LKEYS.KEYREL.PRED _after_p_rel,
            PHON.ONSET voc ] ].

after_pp := pp_-_i-nm-tmp_le &
 [ ORTH < "after" >,
   SYNSEM [ LKEYS.KEYREL.PRED _after_p_rel,
            PHON.ONSET voc ] ].

after_prtcl := p_np_ptcl_le &
 [ ORTH < "after" >,
   SYNSEM [ LKEYS.KEYREL.PRED _after_p_sel_rel,
            PHON.ONSET voc ] ].

all := d_-_prt-plm_le &
 [ ORTH < "all" >,
   SYNSEM [ LKEYS.KEYREL.PRED _all_q_rel,
            PHON.ONSET voc ] ].

all_adv1 := av_-_i-vp-x_le &
 [ ORTH < "all" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_all_a_1_rel",
            PHON.ONSET voc ] ].

all_but_adv1 := av_-_i-vp-pr_le &
 [ ORTH < "all", "but" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_all+but_a_1_rel",
            PHON.ONSET voc ] ].

all_deg2 := av_-_dg-ppdir_le &
 [ ORTH < "all" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_all_x_deg_rel",
            PHON.ONSET voc ] ].

all_det_adj := d_-_all-tm_le &
 [ ORTH < "all" >,
   SYNSEM [ LKEYS.ALTKEYREL.PRED "_all_a_1_rel",
            PHON.ONSET voc ] ].

all_pn := n_np_mc-a_le &
 [ ORTH < "all" >,
   SYNSEM [ LKEYS.ALTKEYREL.PRED _all_q_rel,
            PHON.ONSET voc ] ].

almost_adv := av_-_s-vp-pr_le &
 [ ORTH < "almost" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_almost_a_1_rel",
            PHON.ONSET voc ] ].

almost_deg := av_-_dg-jo_le &
 [ ORTH < "almost" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_almost_x_deg_rel",
            PHON.ONSET voc ] ].

almost_root_post := av_-_s-cp-nsp-po_le &
 [ ORTH < "almost" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_almost_a_1_rel",
            PHON.ONSET voc ] ].

although := p_cp_s_le &
 [ ORTH < "although" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_although_x_rel",
            PHON.ONSET voc ] ].

although_prd := p_prd_s_le &
 [ ORTH < "although" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_although_x_rel",
            PHON.ONSET voc ] ].

am_temp_2 := x_-_am-pm_le &
 [ ORTH < "AM" >,
   SYNSEM [ LKEYS.KEYREL [ CARG "am_time",
                             PRED "_am_x_rel" ],
            PHON.ONSET voc ] ].

an_det := d_-_sg-nmd-an_le &
 [ ORTH < "an" >,
   SYNSEM [ LKEYS.KEYREL.PRED _a_q_rel,
            PHON.ONSET voc ] ].

an_one_adj := aj_-_i-an-nmd_le &
 [ ORTH < "an" >,
   SYNSEM.PHON.ONSET voc ].

an_one_fract := aj_np_i-frct-an_le &
 [ ORTH < "an" >,
   SYNSEM.PHON.ONSET voc ].

an_per_p := p_nb_i-nm-an_le &
 [ ORTH < "an" >,
   SYNSEM [ LKEYS.KEYREL.PRED _a_p_per_rel,
            PHON.ONSET voc ] ].

an_pred_p1 := p_np_i-prd-an_le &
 [ ORTH < "an" >,
   SYNSEM.PHON.ONSET voc ].

and_c_prop := cm_vp_and_le &
 [ ORTH < "and" >,
   SYNSEM.PHON.ONSET voc ].

and_conj := c_xp_and_le &
 [ ORTH < "and" >,
   SYNSEM.PHON.ONSET voc ].

and_fract := c_xp_and-fract_le &
 [ ORTH < "and" >,
   SYNSEM.PHON.ONSET voc ].

and_num := c_xp_and-num_le &
 [ ORTH < "and" >,
   SYNSEM.PHON.ONSET voc ].

and_so_1 := c_xp_and-so_le &
 [ ORTH < "and", "so" >,
   SYNSEM.PHON.ONSET voc ].

any_deg := av_-_dg-any_le &
 [ ORTH < "any" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_any_x_deg_rel",
            PHON.ONSET voc ] ].

any_det := d_-_prt_le &
 [ ORTH < "any" >,
   SYNSEM [ LKEYS.KEYREL.PRED _any_q_rel,
            PHON.ONSET voc ] ].

anyone := n_-_pr_le &
 [ ORTH < "anyone" >,
   SYNSEM [ LKEYS [ ALTKEYREL.PRED _any_q_rel,
                    KEYREL.PRED person_rel ],
            PHON.ONSET voc ] ].

apostrophe_s_2_lex := n_-_cl-poss_le &
 [ ORTH < "'s" >,
   SYNSEM.PHON.ONSET con ].

apostrophe_s_3_lex := n_-_cl-poss-pl_le &
 [ ORTH < "'" >,
   SYNSEM.PHON.ONSET con ].

apostrophe_s_4_lex := n_-_cl-poss-pr_le &
 [ ORTH < "'" >,
   SYNSEM.PHON.ONSET con ].

apostrophe_s_nq_lex := n_-_cl-poss-nq_le &
 [ ORTH < "'s" >,
   SYNSEM.PHON.ONSET con ].

appeal_n1 := n_-_mc_le &
 [ ORTH < "appeal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_appeal_n_1_rel",
            PHON.ONSET voc ] ].

appeal_to_v1 := v_pp_e_le &
 [ ORTH < "appeal" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_appeal_v_to_rel" ],
            PHON.ONSET voc ] ].

appeal_v1 := v_pp-vp_oeq_le &
 [ ORTH < "appeal" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_appeal_v_to_rel" ],
            PHON.ONSET voc ] ].

appeal_v2 := v_np*_le &
 [ ORTH < "appeal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_appeal_v_1_rel",
            PHON.ONSET voc ] ].

appear_v1 := v_pp-vp_ssr_le &
 [ ORTH < "appear" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_appear_v_to_rel",
            PHON.ONSET voc ] ].

appear_v2 := v_ap-pp_seq_le &
 [ ORTH < "appear" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_appear_v_to_rel",
            PHON.ONSET voc ] ].

appear_v3 := v_pp*-cp_it-s_le &
 [ ORTH < "appear" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_appear_v_to_rel",
            PHON.ONSET voc ] ].

appear_v4 := v_-_le &
 [ ORTH < "appear" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_appear_v_1_rel",
            PHON.ONSET voc ] ].

applicant_n1 := n_-_c_le &
 [ ORTH < "applicant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_applicant_n_1_rel",
            PHON.ONSET voc ] ].

approve_of_v1 := v_pp_e_le &
 [ ORTH < "approve" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_approve_v_of_rel" ],
            PHON.ONSET voc ] ].

approve_v1 := v_np*_le &
 [ ORTH < "approve" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_approve_v_1_rel",
            PHON.ONSET voc ] ].

arrive_v1 := v_-_le &
 [ ORTH < "arrive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_arrive_v_1_rel",
            PHON.ONSET voc ] ].

as_comp_prep := p_prd_ptcl-ngap_le &
 [ ORTH < "as" >,
   SYNSEM [ LKEYS.KEYREL.PRED _as_p_comp_rel,
            PHON.ONSET voc ] ].

as_comp_prep_nc := p_np_ptcl-ngap_le &
 [ ORTH < "as" >,
   SYNSEM [ LKEYS.KEYREL.PRED _as_p_comp_rel,
            PHON.ONSET voc ] ].

as_eq_deg := av_pp_dg-as_le &
 [ ORTH < "as" >,
   SYNSEM.PHON.ONSET voc ].

as_eq_nc_deg := av_-_dg-cmp-so_le &
 [ ORTH < "as" >,
   SYNSEM [ LKEYS.KEYREL.PRED comp_equal_rel,
            PHON.ONSET voc ] ].

as_it_adj_p := p_ap_i_le &
 [ ORTH < "as" >,
   SYNSEM [ LKEYS.KEYREL.PRED _as_p_comp_rel,
            PHON.ONSET voc ] ].

as_nbar := p_nb_i-phr_le &
 [ ORTH < "as" >,
   SYNSEM [ LKEYS [ --COMPKEY non_temp_nom_rel,
                    KEYREL.PRED _as_p_nbar_rel ],
            PHON.ONSET voc ] ].

as_p1 := p_np_i-nger_le &
 [ ORTH < "as" >,
   SYNSEM [ LKEYS.KEYREL.PRED _as_p_rel,
            PHON.ONSET voc ] ].

as_prd := p_prd_s-v-p_le &
 [ ORTH < "as" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_as_x_prd_rel",
            PHON.ONSET voc ] ].

as_prdp_p1 := p_vp_i_le &
 [ ORTH < "as" >,
   SYNSEM [ LKEYS.KEYREL.PRED _as_p_rel,
            PHON.ONSET voc ] ].

as_prdp_p2 := p_prd_ptcl_le &
 [ ORTH < "as" >,
   SYNSEM [ LKEYS.KEYREL.PRED _as_p_sel_rel,
            PHON.ONSET voc ] ].

as_prtcl := p_np_ptcl_le &
 [ ORTH < "as" >,
   SYNSEM [ LKEYS.KEYREL.PRED _as_p_sel_rel,
            PHON.ONSET voc ] ].

as_subord := p_cp_s_le &
 [ ORTH < "as" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_as_x_subord_rel",
            PHON.ONSET voc ] ].

as_subord_inv := p_cp_inv-s_le &
 [ ORTH < "as" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_as_x_subord_rel",
            PHON.ONSET voc ] ].

at := p_np_i-reg_le &
 [ ORTH < "at" >,
   SYNSEM [ LKEYS.KEYREL.PRED _at_p_rel,
            PHON.ONSET voc ] ].

at_prtcl := p_np_ptcl_le &
 [ ORTH < "at" >,
   SYNSEM [ LKEYS.KEYREL.PRED _at_p_sel_rel,
            PHON.ONSET voc ] ].

at_temp := p_np_i-tmp_le &
 [ ORTH < "at" >,
   SYNSEM [ LKEYS [ --COMPKEY hour_or_time_rel,
                    KEYREL.PRED _at_p_temp_rel ],
            PHON.ONSET voc ] ].

be_c_am := v_prd_am_le &
 [ ORTH < "am" >,
   SYNSEM.PHON.ONSET voc ].

be_c_am_neg_1 := v_prd_am-n_le &
 [ ORTH < "aren't" >,
   SYNSEM.PHON.ONSET voc ].

be_c_are := v_prd_are_le &
 [ ORTH < "are" >,
   SYNSEM.PHON.ONSET voc ].

be_c_are_neg_1 := v_prd_are-n_le &
 [ ORTH < "aren't" >,
   SYNSEM.PHON.ONSET voc ].

be_c_be := v_prd_be_le &
 [ ORTH < "be" >,
   SYNSEM.PHON.ONSET con ].

be_c_been := v_prd_been_le &
 [ ORTH < "been" >,
   SYNSEM.PHON.ONSET con ].

be_c_being := v_prd_being_le &
 [ ORTH < "being" >,
   SYNSEM.PHON.ONSET con ].

be_c_is := v_prd_is_le &
 [ ORTH < "is" >,
   SYNSEM.PHON.ONSET voc ].

be_c_is_cx := v_prd_is-cx_le &
 [ ORTH < "s" >,
   SYNSEM.PHON.ONSET voc ].

be_c_is_cx_2 := v_prd_is-cx_le &
 [ ORTH < "'s" >,
   SYNSEM.PHON.ONSET con ].

be_c_is_neg_1 := v_prd_is-n_le &
 [ ORTH < "isn't" >,
   SYNSEM.PHON.ONSET voc ].

be_c_was := v_prd_was_le &
 [ ORTH < "was" >,
   SYNSEM.PHON.ONSET con ].

be_c_was_neg_1 := v_prd_was-n_le &
 [ ORTH < "wasn't" >,
   SYNSEM.PHON.ONSET con ].

be_c_was_neg_subj_1 := v_prd_was-n-sv_le &
 [ ORTH < "wasn't" >,
   SYNSEM.PHON.ONSET con ].

be_c_was_subj := v_prd_was-sv_le &
 [ ORTH < "was" >,
   SYNSEM.PHON.ONSET con ].

be_c_were := v_prd_wre_le &
 [ ORTH < "were" >,
   SYNSEM.PHON.ONSET con ].

be_c_were_neg_1 := v_prd_wre-n_le &
 [ ORTH < "weren't" >,
   SYNSEM.PHON.ONSET con ].

be_c_were_neg_subj_1 := v_prd_wre-n-sv_le &
 [ ORTH < "weren't" >,
   SYNSEM.PHON.ONSET con ].

be_c_were_subj := v_prd_wre-sv_le &
 [ ORTH < "were" >,
   SYNSEM.PHON.ONSET con ].

be_id_am := v_np_am_le &
 [ ORTH < "am" >,
   SYNSEM.PHON.ONSET voc ].

be_id_am_neg_1 := v_np_am-n_le &
 [ ORTH < "aren't" >,
   SYNSEM.PHON.ONSET voc ].

be_id_are := v_np_are_le &
 [ ORTH < "are" >,
   SYNSEM.PHON.ONSET voc ].

be_id_are_neg_1 := v_np_are-n_le &
 [ ORTH < "aren't" >,
   SYNSEM.PHON.ONSET voc ].

be_id_be := v_np_be_le &
 [ ORTH < "be" >,
   SYNSEM.PHON.ONSET con ].

be_id_been := v_np_been_le &
 [ ORTH < "been" >,
   SYNSEM.PHON.ONSET con ].

be_id_being := v_np_being_le &
 [ ORTH < "being" >,
   SYNSEM.PHON.ONSET con ].

be_id_is := v_np_is_le &
 [ ORTH < "is" >,
   SYNSEM.PHON.ONSET voc ].

be_id_is_cx := v_np_is-cx_le &
 [ ORTH < "s" >,
   SYNSEM.PHON.ONSET voc ].

be_id_is_cx_2 := v_np_is-cx_le &
 [ ORTH < "'s" >,
   SYNSEM.PHON.ONSET con ].

be_id_is_neg_1 := v_np_is-n_le &
 [ ORTH < "isn't" >,
   SYNSEM.PHON.ONSET voc ].

be_id_was := v_np_was_le &
 [ ORTH < "was" >,
   SYNSEM.PHON.ONSET con ].

be_id_was_neg_1 := v_np_was-n_le &
 [ ORTH < "wasn't" >,
   SYNSEM.PHON.ONSET con ].

be_id_was_neg_subj_1 := v_np_was-n-sv_le &
 [ ORTH < "wasn't" >,
   SYNSEM.PHON.ONSET con ].

be_id_was_subj := v_np_was-sv_le &
 [ ORTH < "was" >,
   SYNSEM.PHON.ONSET con ].

be_id_were := v_np_wre_le &
 [ ORTH < "were" >,
   SYNSEM.PHON.ONSET con ].

be_id_were_neg_1 := v_np_wre-n_le &
 [ ORTH < "weren't" >,
   SYNSEM.PHON.ONSET con ].

be_id_were_neg_subj_1 := v_np_wre-n-sv_le &
 [ ORTH < "weren't" >,
   SYNSEM.PHON.ONSET con ].

be_id_were_subj := v_np_wre-sv_le &
 [ ORTH < "were" >,
   SYNSEM.PHON.ONSET con ].

be_inv_are := v_np_locinv-are_le &
 [ ORTH < "are" >,
   SYNSEM.PHON.ONSET voc ].

be_inv_is := v_np_locinv-is_le &
 [ ORTH < "is" >,
   SYNSEM.PHON.ONSET voc ].

be_inv_was := v_np_locinv-was_le &
 [ ORTH < "was" >,
   SYNSEM.PHON.ONSET con ].

be_inv_were := v_np_locinv-were_le &
 [ ORTH < "were" >,
   SYNSEM.PHON.ONSET con ].

be_it_cop_be := v_np-rc_be_le &
 [ ORTH < "be" >,
   SYNSEM.PHON.ONSET con ].

be_it_cop_been := v_np-rc_been_le &
 [ ORTH < "been" >,
   SYNSEM.PHON.ONSET con ].

be_it_cop_being := v_np-rc_being_le &
 [ ORTH < "being" >,
   SYNSEM.PHON.ONSET con ].

be_it_cop_is := v_np-rc_is_le &
 [ ORTH < "is" >,
   SYNSEM.PHON.ONSET voc ].

be_it_cop_is_cx := v_np-rc_is-cx_le &
 [ ORTH < "s" >,
   SYNSEM.PHON.ONSET voc ].

be_it_cop_is_cx_2 := v_np-rc_is-cx_le &
 [ ORTH < "'s" >,
   SYNSEM.PHON.ONSET con ].

be_it_cop_is_neg_1 := v_np-rc_is-n_le &
 [ ORTH < "isn't" >,
   SYNSEM.PHON.ONSET voc ].

be_it_cop_was := v_np-rc_was_le &
 [ ORTH < "was" >,
   SYNSEM.PHON.ONSET con ].

be_it_cop_was_neg_1 := v_np-rc_was-n_le &
 [ ORTH < "wasn't" >,
   SYNSEM.PHON.ONSET con ].

be_it_cop_was_neg_subj_1 := v_np-rc_was-n-sv_le &
 [ ORTH < "wasn't" >,
   SYNSEM.PHON.ONSET con ].

be_it_cop_was_subj := v_np-rc_was-sv_le &
 [ ORTH < "was" >,
   SYNSEM.PHON.ONSET con ].

be_nv_are := v_cp_are_le &
 [ ORTH < "are" >,
   SYNSEM.PHON.ONSET voc ].

be_nv_are_neg_1 := v_cp_are-n_le &
 [ ORTH < "aren't" >,
   SYNSEM.PHON.ONSET voc ].

be_nv_be := v_cp_be_le &
 [ ORTH < "be" >,
   SYNSEM.PHON.ONSET con ].

be_nv_been := v_cp_been_le &
 [ ORTH < "been" >,
   SYNSEM.PHON.ONSET con ].

be_nv_being := v_cp_being_le &
 [ ORTH < "being" >,
   SYNSEM.PHON.ONSET con ].

be_nv_is := v_cp_is_le &
 [ ORTH < "is" >,
   SYNSEM.PHON.ONSET voc ].

be_nv_is_cx := v_cp_is-cx_le &
 [ ORTH < "s" >,
   SYNSEM.PHON.ONSET voc ].

be_nv_is_cx_2 := v_cp_is-cx_le &
 [ ORTH < "'s" >,
   SYNSEM.PHON.ONSET con ].

be_nv_is_neg_1 := v_cp_is-n_le &
 [ ORTH < "isn't" >,
   SYNSEM.PHON.ONSET voc ].

be_nv_was := v_cp_was_le &
 [ ORTH < "was" >,
   SYNSEM.PHON.ONSET con ].

be_nv_was_neg_1 := v_cp_was-n_le &
 [ ORTH < "wasn't" >,
   SYNSEM.PHON.ONSET con ].

be_nv_was_neg_subj_1 := v_cp_was-n-sv_le &
 [ ORTH < "wasn't" >,
   SYNSEM.PHON.ONSET con ].

be_nv_was_subj := v_cp_was-sv_le &
 [ ORTH < "was" >,
   SYNSEM.PHON.ONSET con ].

be_nv_were := v_cp_wre_le &
 [ ORTH < "were" >,
   SYNSEM.PHON.ONSET con ].

be_nv_were_neg_1 := v_cp_wre-n_le &
 [ ORTH < "weren't" >,
   SYNSEM.PHON.ONSET con ].

be_nv_were_neg_subj_1 := v_cp_wre-n-sv_le &
 [ ORTH < "weren't" >,
   SYNSEM.PHON.ONSET con ].

be_nv_were_subj := v_cp_wre-sv_le &
 [ ORTH < "were" >,
   SYNSEM.PHON.ONSET con ].

be_th_cop_are := v_np-xp_are_le &
 [ ORTH < "are" >,
   SYNSEM.PHON.ONSET voc ].

be_th_cop_are_neg_1 := v_np-xp_are-n_le &
 [ ORTH < "aren't" >,
   SYNSEM.PHON.ONSET voc ].

be_th_cop_be := v_np-xp_be_le &
 [ ORTH < "be" >,
   SYNSEM.PHON.ONSET con ].

be_th_cop_been := v_np-xp_been_le &
 [ ORTH < "been" >,
   SYNSEM.PHON.ONSET con ].

be_th_cop_being := v_np-xp_being_le &
 [ ORTH < "being" >,
   SYNSEM.PHON.ONSET con ].

be_th_cop_is := v_np-xp_is_le &
 [ ORTH < "is" >,
   SYNSEM.PHON.ONSET voc ].

be_th_cop_is_cx := v_np-xp_is-cx_le &
 [ ORTH < "s" >,
   SYNSEM.PHON.ONSET voc ].

be_th_cop_is_cx_2 := v_np-xp_is-cx_le &
 [ ORTH < "'s" >,
   SYNSEM.PHON.ONSET con ].

be_th_cop_is_neg_1 := v_np-xp_is-n_le &
 [ ORTH < "isn't" >,
   SYNSEM.PHON.ONSET voc ].

be_th_cop_is_plur := v_np-xp_is-pl_le &
 [ ORTH < "is" >,
   SYNSEM.PHON.ONSET voc ].

be_th_cop_was := v_np-xp_was_le &
 [ ORTH < "was" >,
   SYNSEM.PHON.ONSET con ].

be_th_cop_was_neg_1 := v_np-xp_was-n_le &
 [ ORTH < "wasn't" >,
   SYNSEM.PHON.ONSET con ].

be_th_cop_was_neg_subj_1 := v_np-xp_was-n-sv_le &
 [ ORTH < "wasn't" >,
   SYNSEM.PHON.ONSET con ].

be_th_cop_was_subj := v_np-xp_was-sv_le &
 [ ORTH < "was" >,
   SYNSEM.PHON.ONSET con ].

be_th_cop_were := v_np-xp_wre_le &
 [ ORTH < "were" >,
   SYNSEM.PHON.ONSET con ].

be_th_cop_were_neg_1 := v_np-xp_wre-n_le &
 [ ORTH < "weren't" >,
   SYNSEM.PHON.ONSET con ].

be_th_cop_were_neg_subj_1 := v_np-xp_wre-n-sv_le &
 [ ORTH < "weren't" >,
   SYNSEM.PHON.ONSET con ].

be_th_cop_were_subj := v_np-xp_wre-sv_le &
 [ ORTH < "were" >,
   SYNSEM.PHON.ONSET con ].

become_of_v1 := v_pp_e_le &
 [ ORTH < "become" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_become_v_of_rel" ],
            PHON.ONSET con ] ].

become_v1 := v_prd_seq-va_le &
 [ ORTH < "become" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_become_v_id_rel",
            PHON.ONSET con ] ].

become_v2 := v_np_id_le &
 [ ORTH < "become" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_become_v_id_rel",
            PHON.ONSET con ] ].

become_v3 := v_nb_le &
 [ ORTH < "become" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_become_v_id_rel",
            PHON.ONSET con ] ].

bee_n1 := n_-_c_le &
 [ ORTH < "bee" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bee_n_1_rel",
            PHON.ONSET con ] ].

before2 := p_cp_s-notop_le &
 [ ORTH < "before" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_before_x_h_rel",
            PHON.ONSET con ] ].

before3 := p_np_i_le &
 [ ORTH < "before" >,
   SYNSEM [ LKEYS.KEYREL.PRED _before_p_rel,
            PHON.ONSET con ] ].

before_adv1 := pp_-_i_le &
 [ ORTH < "before" >,
   SYNSEM [ LKEYS.KEYREL.PRED _before_p_rel,
            PHON.ONSET con ] ].

being_i_n1 := n_-_c-brno_le &
 [ ORTH < "being" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_being_n_i_rel",
            PHON.ONSET con ] ].

being_n1 := n_-_c-sg-ifl_le &
 [ ORTH < "being" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_being_n_1_rel",
            PHON.ONSET con ] ].

belief_n1 := n_cp_mc-fin_le &
 [ ORTH < "belief" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_belief_n_in_rel",
            PHON.ONSET con ] ].

belief_n2 := n_pp_mc_le &
 [ ORTH < "belief" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_belief_n_in_rel" ],
            PHON.ONSET con ] ].

believe_in_v1 := v_pp_e_le &
 [ ORTH < "believe" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_believe_v_in_rel" ],
            PHON.ONSET con ] ].

believe_v1 := v_np*_le &
 [ ORTH < "believe" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_believe_v_1_rel",
            PHON.ONSET con ] ].

believe_v3 := v_cp_prop_le &
 [ ORTH < "believe" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_believe_v_1_rel",
            PHON.ONSET con ] ].

believe_v4 := v_np-vp_sor_le &
 [ ORTH < "believe" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_believe_v_1_rel",
            PHON.ONSET con ] ].

bet_n1 := n_-_c_le &
 [ ORTH < "bet" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bet_n_1_rel",
            PHON.ONSET con ] ].

bet_on_v1 := v_np*-pp_e_le &
 [ ORTH < "bet" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_bet_v_on_rel" ],
            PHON.ONSET con ] ].

bet_v1 := v_np-np-cp_le &
 [ ORTH < "bet" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bet_v_on_rel",
            PHON.ONSET con ] ].

bet_v2 := v_np_le &
 [ ORTH < "bet" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bet_v_1_rel",
            PHON.ONSET con ] ].

better_a1 := aj_pp_i-cmp_le &
 [ ORTH < "better" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_good_a_at-for_rel",
            PHON.ONSET con ] ].

better_adv1 := av_-_i-vp_le &
 [ ORTH < "better" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_better_a_1_rel",
            PHON.ONSET con ] ].

better_aux := v_vp_mdl-p-niv_le &
 [ ORTH < "better" >,
   SYNSEM [ LKEYS.KEYREL.PRED _had+better_v_modal_rel,
            PHON.ONSET con ] ].

betters_n1 := n_-_c-pl-nocnh_le &
 [ ORTH < "better" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_betters_n_1_rel",
            PHON.ONSET con ] ].

bitch_n1 := n_-_c-ns_le &
 [ ORTH < "bitch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bitch_n_1_rel",
            PHON.ONSET con ] ].

bitch_v1 := v_pp*-cp_le &
 [ ORTH < "bitch" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_bitch_v_to_rel" ],
            PHON.ONSET con ] ].

bitch_v2 := v_-_le &
 [ ORTH < "bitch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bitch_v_to_rel",
            PHON.ONSET con ] ].

bob := n_-_pn_le &
 [ ORTH < "Bob" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Bob",
            PHON.ONSET con ] ].

bob_n2 := n_-_c_le &
 [ ORTH < "bob" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bob_n_1_rel",
            PHON.ONSET con ] ].

bob_v1 := v_np_noger_le &
 [ ORTH < "bob" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bob_v_cause_rel",
            PHON.ONSET con ] ].

bob_v2 := v_-_unacc_le &
 [ ORTH < "bob" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bob_v_1_rel",
            PHON.ONSET con ] ].

bookcase_n1 := n_-_c_le &
 [ ORTH < "bookcase" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bookcase_n_1_rel",
            PHON.ONSET con ] ].

both := d_-_prt-pl-both_le &
 [ ORTH < "both" >,
   SYNSEM [ LKEYS.KEYREL.PRED _both_q_rel,
            PHON.ONSET con ] ].

both_adv1 := av_-_i-vp-x-only_le &
 [ ORTH < "both" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_both_a_1_rel",
            PHON.ONSET con ] ].

both_conj := c_xp_both-mrk_le &
 [ ORTH < "both" >,
   SYNSEM.PHON.ONSET con ].

both_pn := n_np_mc-na_le &
 [ ORTH < "both" >,
   SYNSEM [ LKEYS.ALTKEYREL.PRED _both_q_rel,
            PHON.ONSET con ] ].

browne := n_-_pn_le &
 [ ORTH < "Browne" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Browne",
            PHON.ONSET con ] ].

but_c_prop := cm_vp_but_le &
 [ ORTH < "but" >,
   SYNSEM.PHON.ONSET con ].

but_conj := c_xp_but_le &
 [ ORTH < "but" >,
   SYNSEM.PHON.ONSET con ].

but_except_p := p_np_i-nsp-ngap_le &
 [ ORTH < "but" >,
   SYNSEM [ LKEYS.KEYREL.PRED _but_p_except_rel,
            PHON.ONSET con ] ].

but_root_post := av_-_s-cp-nsp-po_le &
 [ ORTH < "but" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_but_c_rel",
            PHON.ONSET con ] ].

buts_n1 := n_-_c-pl-nocnh_le &
 [ ORTH < "but" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_buts_n_1_rel",
            PHON.ONSET con ] ].

by_adv := pp_-_i-dir-nnm_le &
 [ ORTH < "by" >,
   SYNSEM [ LKEYS.KEYREL.PRED _by_p_rel,
            PHON.ONSET con ] ].

by_means := p_nb_i_le &
 [ ORTH < "by" >,
   SYNSEM [ LKEYS [ --COMPKEY non_temp_nom_rel,
                    KEYREL.PRED _by_p_means_rel ],
            PHON.ONSET con ] ].

by_means_ger := p_np_i-ger_le &
 [ ORTH < "by" >,
   SYNSEM [ LKEYS.KEYREL.PRED _by_p_means_rel,
            PHON.ONSET con ] ].

by_nbar_nbar_p := p_nb_i-oblspr_le &
 [ ORTH < "by" >,
   SYNSEM [ LKEYS.KEYREL.PRED _by_p_n-n_rel,
            PHON.ONSET con ] ].

by_p := p_np_i-dgsp_le &
 [ ORTH < "by" >,
   SYNSEM [ LKEYS.KEYREL.PRED _by_p_rel,
            PHON.ONSET con ] ].

by_pass_p := p_np_ptcl_le &
 [ ORTH < "by" >,
   SYNSEM [ LKEYS [ --COMPKEY non_temp_nom_rel,
                    KEYREL.PRED _by_p_cm_rel ],
            PHON.ONSET con ] ].

by_prtcl := p_np_ptcl_le &
 [ ORTH < "by" >,
   SYNSEM [ LKEYS.KEYREL.PRED _by_p_sel_rel,
            PHON.ONSET con ] ].

by_temp_p := p_np_i-tmp-vm_le &
 [ ORTH < "by" >,
   SYNSEM [ LKEYS [ --COMPKEY temp_abstr_rel,
                    KEYREL.PRED _by_p_temp_rel ],
            PHON.ONSET con ] ].

can_aux_neg2 := v_vp_mdl-n_le &
 [ ORTH < "cannot" >,
   SYNSEM [ LKEYS.KEYREL.PRED _can_v_modal_rel,
            PHON.ONSET con ] ].

can_aux_neg_1 := v_vp_mdl-n_le &
 [ ORTH < "can't" >,
   SYNSEM [ LKEYS.KEYREL.PRED _can_v_modal_rel,
            PHON.ONSET con ] ].

can_aux_pos := v_vp_mdl-p_le &
 [ ORTH < "can" >,
   SYNSEM [ LKEYS.KEYREL.PRED _can_v_modal_rel,
            PHON.ONSET con ] ].

can_n1 := n_-_c_le &
 [ ORTH < "can" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_can_n_1_rel",
            PHON.ONSET con ] ].

can_v1 := v_np_le &
 [ ORTH < "can" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_can_v_1_rel",
            PHON.ONSET con ] ].

cause_n1 := n_pp_mc-of_le &
 [ ORTH < "cause" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cause_n_of_rel",
            PHON.ONSET con ] ].

cause_v1 := v_np-vp_oeq_le &
 [ ORTH < "cause" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cause_v_1_rel",
            PHON.ONSET con ] ].

cause_v2 := v_np_le &
 [ ORTH < "cause" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cause_v_1_rel",
            PHON.ONSET con ] ].

cause_v3 := v_np-np_le &
 [ ORTH < "cause" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cause_v_1_rel",
            PHON.ONSET con ] ].

cease_v1 := v_np_noger_le &
 [ ORTH < "cease" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cease_v_cause_rel",
            PHON.ONSET con ] ].

cease_v2 := v_-_unacc_le &
 [ ORTH < "cease" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cease_v_1_rel",
            PHON.ONSET con ] ].

cease_v3 := v_vp_ssr_le &
 [ ORTH < "cease" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cease_v_1_rel",
            PHON.ONSET con ] ].

cease_v4 := v_vp_ssr-prp_le &
 [ ORTH < "cease" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cease_v_1_rel",
            PHON.ONSET con ] ].

chiang := n_-_pn_le &
 [ ORTH < "Chiang" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Chiang",
            PHON.ONSET con ] ].

competent_a1 := aj_-_i_le &
 [ ORTH < "competent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_competent_a_1_rel",
            PHON.ONSET con ] ].

competent_a2 := aj_vp_i-seq_le &
 [ ORTH < "competent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_competent_a_1_rel",
            PHON.ONSET con ] ].

competently_adv1 := av_-_i-vp_le &
 [ ORTH < "competently" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_competent_a_1_rel",
            PHON.ONSET con ] ].

consult_v1 := v_np_le &
 [ ORTH < "consult" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_consult_v_1_rel",
            PHON.ONSET con ] ].

consult_v2 := v_pp*-pp*_le &
 [ ORTH < "consult" >,
   SYNSEM [ LKEYS [ --COMPKEY _with_p_rel,
                    --OCOMPKEY _about_p_rel,
                    KEYREL.PRED "_consult_v_about_rel" ],
            PHON.ONSET con ] ].

consultant_n1 := n_-_c_le &
 [ ORTH < "consultant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_consultant_n_1_rel",
            PHON.ONSET con ] ].

continue_v1 := v_pp*_dir_le &
 [ ORTH < "continue" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_continue_v_1_rel",
            PHON.ONSET con ] ].

continue_v2 := v_np_noger_le &
 [ ORTH < "continue" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_continue_v_2_rel",
            PHON.ONSET con ] ].

continue_v3 := v_vp_ssr_le &
 [ ORTH < "continue" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_continue_v_2_rel",
            PHON.ONSET con ] ].

continue_v4 := v_vp_ssr-prp_le &
 [ ORTH < "continue" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_continue_v_2_rel",
            PHON.ONSET con ] ].

could_aux_neg_1 := v_vp_mdl-n-pst_le &
 [ ORTH < "couldn't" >,
   SYNSEM [ LKEYS.KEYREL.PRED _can_v_modal_rel,
            PHON.ONSET con ] ].

could_aux_neg_1b := v_vp_mdl-n_le &
 [ ORTH < "couldn't" >,
   SYNSEM [ LKEYS.KEYREL.PRED _could_v_modal_rel,
            PHON.ONSET con ] ].

could_aux_pos := v_vp_mdl-p-unsp_le &
 [ ORTH < "could" >,
   SYNSEM [ LKEYS.KEYREL.PRED _could_v_modal_rel,
            PHON.ONSET con ] ].

could_aux_pos2 := v_vp_mdl-p-pst_le &
 [ ORTH < "could" >,
   SYNSEM [ LKEYS.KEYREL.PRED _can_v_modal_rel,
            PHON.ONSET con ] ].

csli_n1 := n_-_pn_le &
 [ ORTH < "CSLI" >,
   SYNSEM [ LKEYS.KEYREL.CARG "CSLI",
            PHON.ONSET con ] ].

dare_aux_pos := v_vp_mdl-p_le &
 [ ORTH < "dare" >,
   SYNSEM [ LKEYS.KEYREL.PRED _dare_v_modal_rel,
            PHON.ONSET con ] ].

dare_v1 := v_vp_seq_le &
 [ ORTH < "dare" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dare_v_1_rel",
            PHON.ONSET con ] ].

dare_v2 := v_np-vp_oeq_le &
 [ ORTH < "dare" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dare_v_1_rel",
            PHON.ONSET con ] ].

dare_v3 := v_np_le &
 [ ORTH < "dare" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dare_v_1_rel",
            PHON.ONSET con ] ].

dare_v4 := v_vp_seq-n3sg_le &
 [ ORTH < "dare" >,
   SYNSEM [ LKEYS [ ALTKEYREL.PRED "_only_a_1_rel",
                    KEYREL.PRED "_dare_v_1_rel" ],
            PHON.ONSET con ] ].

dash_prtcl := p_np_ptcl_le &
 [ ORTH < "-" >,
   SYNSEM [ LKEYS.KEYREL.PRED _dashpnct_p_sel_rel,
            PHON.ONSET con ] ].

dash_s_root_pre := av_-_dc-pr_le &
 [ ORTH < "-" >,
   SYNSEM [ LKEYS.KEYREL.CARG "s-dash",
            PHON.ONSET con_or_voc ] ].

day_n := n_pp_c-day_le &
 [ ORTH < "day" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_day_n_of_rel",
            PHON.ONSET con ] ].

deny_v1 := v_np_le &
 [ ORTH < "deny" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_deny_v_to_rel",
            PHON.ONSET con ] ].

deny_v2 := v_pp*-cp_le &
 [ ORTH < "deny" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_deny_v_to_rel" ],
            PHON.ONSET con ] ].

deny_v3 := v_vp_seq-prp_le &
 [ ORTH < "deny" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_deny_v_to_rel",
            PHON.ONSET con ] ].

deny_v4 := v_np-np_le &
 [ ORTH < "deny" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_deny_v_to_rel",
            PHON.ONSET con ] ].

department_n1 := n_-_c_le &
 [ ORTH < "department" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_department_n_1_rel",
            PHON.ONSET con ] ].

devito := n_-_pn_le &
 [ ORTH < "Devito" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Devito",
            PHON.ONSET con ] ].

did1_neg_1 := v_vp_did-n_le &
 [ ORTH < "didn't" >,
   SYNSEM.PHON.ONSET con ].

did1_pos := v_vp_did_le &
 [ ORTH < "did" >,
   SYNSEM.PHON.ONSET con ].

do1_neg_1 := v_vp_do-f-n_le &
 [ ORTH < "don't" >,
   SYNSEM.PHON.ONSET con ].

do1_pos := v_vp_do-f_le &
 [ ORTH < "do" >,
   SYNSEM.PHON.ONSET con ].

do2 := v_np_le &
 [ ORTH < "do" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_do_v_1_rel",
            PHON.ONSET con ] ].

do_about_v1 := v_np-pp_e_le &
 [ ORTH < "do" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _about_p_sel_rel,
                    KEYREL.PRED "_do_v_about_rel" ],
            PHON.ONSET con ] ].

do_adv := v_adv_le &
 [ ORTH < "do" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_do_v_1_rel",
            PHON.ONSET con ] ].

do_up_v1 := v_p-np_le &
 [ ORTH < "do" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_do_v_up_rel" ],
            PHON.ONSET con ] ].

do_v3 := v_-_bse_le &
 [ ORTH < "do" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_do_v_suffice_rel",
            PHON.ONSET con ] ].

do_v4 := v_np-np_only_le &
 [ ORTH < "do" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_do_v_1_rel",
            PHON.ONSET con ] ].

do_with_v1 := v_np-pp_le &
 [ ORTH < "do" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _with_p_rel,
                    KEYREL.PRED "_do_v_1_rel" ],
            PHON.ONSET con ] ].

do_without_v1 := v_pp_e_le &
 [ ORTH < "do" >,
   SYNSEM [ LKEYS [ --COMPKEY _without_p_sel_rel,
                    KEYREL.PRED "_do_v_without_rel" ],
            PHON.ONSET con ] ].

doe_n1 := n_-_c-ntc_le &
 [ ORTH < "doe" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_doe_n_1_rel",
            PHON.ONSET con ] ].

does1_neg_1 := v_vp_does-n_le &
 [ ORTH < "doesn't" >,
   SYNSEM.PHON.ONSET con ].

does1_pos := v_vp_does_le &
 [ ORTH < "does" >,
   SYNSEM.PHON.ONSET con ].

dollar_n1 := n_-_c-meas_le &
 [ ORTH < "dollar" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dollar_n_1_rel",
            PHON.ONSET con ] ].

dont_1 := v_vp_dont-imp_le &
 [ ORTH < "don't" >,
   SYNSEM.PHON.ONSET con ].

dont_3 := v_vp_dont-imp_le &
 [ ORTH < "do", "not" >,
   SYNSEM.PHON.ONSET con ].

dozen_a1 := aj_-_i-crd-dzn_le &
 [ ORTH < "dozen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "12",
            PHON.ONSET con ] ].

dozens_n1 := n_-_c-pl-num_le &
 [ ORTH < "dozen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "12",
            PHON.ONSET con ] ].

during := p_np_i_le &
 [ ORTH < "during" >,
   SYNSEM [ LKEYS.KEYREL.PRED _during_p_rel,
            PHON.ONSET con ] ].

each := d_-_prt-sg_le &
 [ ORTH < "each" >,
   SYNSEM [ LKEYS.KEYREL.PRED _each_q_rel,
            PHON.ONSET voc ] ].

each_adv1 := av_-_i-vp-x_le &
 [ ORTH < "each" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_each_p_rel",
            PHON.ONSET voc ] ].

each_other := n_-_pr-recip_le &
 [ ORTH < "each", "other" >,
   SYNSEM.PHON.ONSET voc ].

each_pp := pp_-_i-nm_le &
 [ ORTH < "each" >,
   SYNSEM [ LKEYS.KEYREL.PRED _each_p_rel,
            PHON.ONSET voc ] ].

eat1 := v_np*_le &
 [ ORTH < "eat" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_eat_v_1_rel",
            PHON.ONSET voc ] ].

eat_in_v1 := v_p_le &
 [ ORTH < "eat" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_eat_v_in_rel" ],
            PHON.ONSET voc ] ].

eat_of_v1 := v_pp_e_le &
 [ ORTH < "eat" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_eat_v_of_rel" ],
            PHON.ONSET voc ] ].

eat_out_v1 := v_p_le &
 [ ORTH < "eat" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_eat_v_out_rel" ],
            PHON.ONSET voc ] ].

eat_up_v1 := v_p-np_le &
 [ ORTH < "eat" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_eat_v_up_rel" ],
            PHON.ONSET voc ] ].

eats_n1 := n_-_c-pl-nocnh_le &
 [ ORTH < "eat" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_eats_n_1_rel",
            PHON.ONSET voc ] ].

either_adv1 := av_-_i-vp-x_le &
 [ ORTH < "either" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_either_a_also_rel",
            PHON.ONSET voc ] ].

either_adv2 := av_-_i-vp-po-nmb_le &
 [ ORTH < "either" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_either_a_also_rel",
            PHON.ONSET voc ] ].

either_conj := c_xp_either-mrk_le &
 [ ORTH < "either" >,
   SYNSEM.PHON.ONSET voc ].

either_det := d_-_prt_le &
 [ ORTH < "either" >,
   SYNSEM [ LKEYS.KEYREL.PRED _either_q_rel,
            PHON.ONSET voc ] ].

employ_n1 := n_-_c-sg-nocnh_le &
 [ ORTH < "employ" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_employ_n_1_rel",
            PHON.ONSET voc ] ].

employ_v1 := v_np_le &
 [ ORTH < "employ" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_employ_v_1_rel",
            PHON.ONSET voc ] ].

employ_v2 := v_np-pp_oeq-as_le &
 [ ORTH < "employ" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_employ_v_as_rel",
            PHON.ONSET voc ] ].

employee_n1 := n_pp_c-of_le &
 [ ORTH < "employee" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_employee_n_of_rel",
            PHON.ONSET voc ] ].

engineer_n1 := n_-_c_le &
 [ ORTH < "engineer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_engineer_n_1_rel",
            PHON.ONSET voc ] ].

engineer_v1 := v_np_le &
 [ ORTH < "engineer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_engineer_v_1_rel",
            PHON.ONSET voc ] ].

enough := av_-_i-vp-po_le &
 [ ORTH < "enough" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_enough_a_1_rel",
            PHON.ONSET voc ] ].

enough_a1 := aj_-_i-prd_le &
 [ ORTH < "enough" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_enough_a_1_rel",
            PHON.ONSET voc ] ].

enough_deg := av_-_dg-enough_le &
 [ ORTH < "enough" >,
   SYNSEM.PHON.ONSET voc ].

enough_det := d_-_prt-plm_le &
 [ ORTH < "enough" >,
   SYNSEM [ LKEYS.KEYREL.PRED _enough_q_rel,
            PHON.ONSET voc ] ].

esquire_ttl := n_-_tt-post_le &
 [ ORTH < "Esquire" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_esquire_n_1_rel",
            PHON.ONSET voc ] ].

evaluate_v1 := v_np_le &
 [ ORTH < "evaluate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_evaluate_v_1_rel",
            PHON.ONSET voc ] ].

evaluate_v2 := v_cp_fin-inf-q_le &
 [ ORTH < "evaluate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_evaluate_v_1_rel",
            PHON.ONSET voc ] ].

ever_adv1 := av_-_i-vp_le &
 [ ORTH < "ever" >,
   SYNSEM [ LKEYS.KEYREL.PRED _ever_a_1_rel,
            PHON.ONSET voc ] ].

every := d_-_sg-every_le &
 [ ORTH < "every" >,
   SYNSEM [ LKEYS.KEYREL.PRED _every_q_rel,
            PHON.ONSET voc ] ].

every_interval_p := p_np_i-msr_le &
 [ ORTH < "every" >,
   SYNSEM [ LKEYS.KEYREL.PRED loc_nonsp_rel,
            PHON.ONSET voc ] ].

everyone := n_-_pr_le &
 [ ORTH < "everyone" >,
   SYNSEM [ LKEYS [ ALTKEYREL.PRED every_q_rel,
                    KEYREL.PRED person_rel ],
            PHON.ONSET voc ] ].

evidently_adv1 := av_-_s-vp-x_le &
 [ ORTH < "evidently" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_evident_a_to_rel",
            PHON.ONSET voc ] ].

evidently_adv2 := av_-_s-cpp_le &
 [ ORTH < "evidently" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_evident_a_to_rel",
            PHON.ONSET voc ] ].

fact_n1 := n_-_mc-ns_le &
 [ ORTH < "fact" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fact_n_1_rel",
            PHON.ONSET con ] ].

fact_n2 := n_cp_c-fin_le &
 [ ORTH < "fact" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fact_n_1_rel",
            PHON.ONSET con ] ].

fail_v1 := v_np*_le &
 [ ORTH < "fail" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fail_v_1_rel",
            PHON.ONSET con ] ].

fail_v2 := v_vp_ssr_le &
 [ ORTH < "fail" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fail_v_1_rel",
            PHON.ONSET con ] ].

few_a1 := aj_-_i-many_le &
 [ ORTH < "few" >,
   SYNSEM [ LKEYS.KEYREL.PRED little-few_a_rel,
            PHON.ONSET con ] ].

fewer_a1 := aj_pp_i-more_le &
 [ ORTH < "fewer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_few_a_1_rel",
            PHON.ONSET con ] ].

find_adj_v1 := v_np-prd_sor_le &
 [ ORTH < "find" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_find_v_mental_rel",
            PHON.ONSET con ] ].

find_n1 := n_-_c-nocnh_le &
 [ ORTH < "find" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_find_n_1_rel",
            PHON.ONSET con ] ].

find_out_v1 := v_p-pp_e_le &
 [ ORTH < "find" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    --OCOMPKEY _about_p_sel_rel,
                    KEYREL.PRED "_find_v_out-about_rel" ],
            PHON.ONSET con ] ].

find_out_v2 := v_p-cp_le &
 [ ORTH < "find" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_find_v_out_rel" ],
            PHON.ONSET con ] ].

find_out_v3 := v_p-np_le &
 [ ORTH < "find" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_find_v_out_rel" ],
            PHON.ONSET con ] ].

find_out_v4 := v_p_le &
 [ ORTH < "find" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_find_v_out_rel" ],
            PHON.ONSET con ] ].

find_v1 := v_np_le &
 [ ORTH < "find" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_find_v_1_rel",
            PHON.ONSET con ] ].

find_v2 := v_np-np_only_le &
 [ ORTH < "find" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_find_v_1_rel",
            PHON.ONSET con ] ].

find_v3 := v_cp_prop_le &
 [ ORTH < "find" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_find_v_1_rel",
            PHON.ONSET con ] ].

find_v4 := v_np-vp_sor_le &
 [ ORTH < "find" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_find_v_mental_rel",
            PHON.ONSET con ] ].

find_v5 := v_it-prd_le &
 [ ORTH < "find" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_find_v_1_rel",
            PHON.ONSET con ] ].

finish_n1 := n_-_c_le &
 [ ORTH < "finish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_finish_n_1_rel",
            PHON.ONSET con ] ].

finish_off_v1 := v_p-np_le &
 [ ORTH < "finish" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_finish_v_off_rel" ],
            PHON.ONSET con ] ].

finish_off_v2 := v_p_le &
 [ ORTH < "finish" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_finish_v_off_rel" ],
            PHON.ONSET con ] ].

finish_up_v1 := v_p_le &
 [ ORTH < "finish" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_finish_v_up_rel" ],
            PHON.ONSET con ] ].

finish_v1 := v_np*_le &
 [ ORTH < "finish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_finish_v_1_rel",
            PHON.ONSET con ] ].

finish_v2 := v_p-np_le &
 [ ORTH < "finish" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_finish_v_up_rel" ],
            PHON.ONSET con ] ].

finish_v3 := v_vp_ssr-prp_le &
 [ ORTH < "finish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_finish_v_1_rel",
            PHON.ONSET con ] ].

first := aj_-_i-ord-one_le &
 [ ORTH < "first" >,
   SYNSEM [ LKEYS.KEYREL.CARG "1",
            PHON.ONSET con ] ].

first_adv1 := av_-_i-vp_le &
 [ ORTH < "first" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_first_a_1_rel",
            PHON.ONSET con ] ].

first_conj := c_xp_first-mrk_le &
 [ ORTH < "first" >,
   SYNSEM.PHON.ONSET con ].

first_day := n_-_pn-dom-ord_le &
 [ ORTH < "first" >,
   SYNSEM [ LKEYS.KEYREL.CARG "1",
            PHON.ONSET con ] ].

first_n1 := n_-_c-nocnh_le &
 [ ORTH < "first" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_first_n_of_rel",
            PHON.ONSET con ] ].

five := aj_-_i-crd-one_le &
 [ ORTH < "five" >,
   SYNSEM [ LKEYS.KEYREL.CARG "5",
            PHON.ONSET con ] ].

five_c := aj_np_i-crd-one_le &
 [ ORTH < "five" >,
   SYNSEM [ LKEYS.KEYREL.CARG "5",
            PHON.ONSET con ] ].

five_day := n_-_pn-dom-card_le &
 [ ORTH < "five" >,
   SYNSEM [ LKEYS.KEYREL.CARG "5",
            PHON.ONSET con ] ].

five_hour := n_-_pn-hour_le &
 [ ORTH < "five" >,
   SYNSEM [ LKEYS.KEYREL.CARG "5",
            PHON.ONSET con ] ].

foot_apostr_n1 := n_-_c-meas-nocnh_le &
 [ ORTH < "'" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_foot_n_1_rel",
            PHON.ONSET con ] ].

for := p_np_i_le &
 [ ORTH < "for" >,
   SYNSEM [ LKEYS.KEYREL.PRED _for_p_rel,
            PHON.ONSET con ] ].

for_c := cm_np-vp_for_le &
 [ ORTH < "for" >,
   SYNSEM.PHON.ONSET con ].

for_nbar_p := p_nb_i-nmd_le &
 [ ORTH < "for" >,
   SYNSEM [ LKEYS.KEYREL.PRED _for_p_trgt_rel,
            PHON.ONSET con ] ].

for_prtcl := p_np_ptcl_le &
 [ ORTH < "for" >,
   SYNSEM [ LKEYS.KEYREL.PRED _for_p_sel_rel,
            PHON.ONSET con ] ].

for_subconj := p_cp_s-for_le &
 [ ORTH < "for" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_for_x_cond_rel",
            PHON.ONSET con ] ].

former_a1 := aj_-_i_le &
 [ ORTH < "former" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_former_a_1_rel",
            PHON.ONSET con ] ].

former_n1 := n_-_c-nocnh_le &
 [ ORTH < "former" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_former_n_1_rel",
            PHON.ONSET con ] ].

found_v1 := v_np_le &
 [ ORTH < "found" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_found_v_1_rel",
            PHON.ONSET con ] ].

france_n1 := n_-_pn_le &
 [ ORTH < "France" >,
   SYNSEM [ LKEYS.KEYREL.CARG "France",
            PHON.ONSET con ] ].

get_along_v1 := v_p_le &
 [ ORTH < "get" >,
   SYNSEM [ LKEYS [ --COMPKEY _along_p_sel_rel,
                    KEYREL.PRED "_get_v_along_rel" ],
            PHON.ONSET con ] ].

get_around_v1 := v_pp_e_le &
 [ ORTH < "get" >,
   SYNSEM [ LKEYS [ --COMPKEY _around_p_sel_rel,
                    KEYREL.PRED "_get_v_around_rel" ],
            PHON.ONSET con ] ].

get_around_v2 := v_p_le &
 [ ORTH < "get" >,
   SYNSEM [ LKEYS [ --COMPKEY _around_p_sel_rel,
                    KEYREL.PRED "_get_v_around_rel" ],
            PHON.ONSET con ] ].

get_around_v3 := v_p-pp_e_le &
 [ ORTH < "get" >,
   SYNSEM [ LKEYS [ --COMPKEY _around_p_sel_rel,
                    --OCOMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_get_v_around-to_rel" ],
            PHON.ONSET con ] ].

get_back_v1 := v_p-pp_le &
 [ ORTH < "get" >,
   SYNSEM [ LKEYS [ --COMPKEY _back_p_sel_rel,
                    --OCOMPKEY _to_p_rel,
                    KEYREL.PRED "_get_v_back_rel" ],
            PHON.ONSET con ] ].

get_back_v2 := v_p-np_le &
 [ ORTH < "get" >,
   SYNSEM [ LKEYS [ --COMPKEY _back_p_sel_rel,
                    KEYREL.PRED "_get_v_back_rel" ],
            PHON.ONSET con ] ].

get_down_to_v1 := v_p-pp_e_le &
 [ ORTH < "get" >,
   SYNSEM [ LKEYS [ --COMPKEY _down_p_sel_rel,
                    --OCOMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_get_v_down-to_rel" ],
            PHON.ONSET con ] ].

get_down_v2 := v_p-np_le &
 [ ORTH < "get" >,
   SYNSEM [ LKEYS [ --COMPKEY _down_p_sel_rel,
                    KEYREL.PRED "_get_v_down_rel" ],
            PHON.ONSET con ] ].

get_in_v1 := v_p-np_le &
 [ ORTH < "get" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_get_v_in_rel" ],
            PHON.ONSET con ] ].

get_off_v2 := v_p-np_le &
 [ ORTH < "get" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_get_v_off_rel" ],
            PHON.ONSET con ] ].

get_on_with_v1 := v_p-pp_le &
 [ ORTH < "get" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    --OCOMPKEY _with_p_rel,
                    KEYREL.PRED "_get_v_on_rel" ],
            PHON.ONSET con ] ].

get_out_v2 := v_p-np_le &
 [ ORTH < "get" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_get_v_out_rel" ],
            PHON.ONSET con ] ].

get_over_v1 := v_pp_e_le &
 [ ORTH < "get" >,
   SYNSEM [ LKEYS [ --COMPKEY _over_p_sel_rel,
                    KEYREL.PRED "_get_v_over_rel" ],
            PHON.ONSET con ] ].

get_prd_v1 := v_prd_seq_le &
 [ ORTH < "get" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_get_v_state_rel",
            PHON.ONSET con ] ].

get_prd_v2 := v_np-prd_oeq-ntr_le &
 [ ORTH < "get" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_get_v_state_rel",
            PHON.ONSET con ] ].

get_through_v1 := v_p_le &
 [ ORTH < "get" >,
   SYNSEM [ LKEYS [ --COMPKEY _through_p_sel_rel,
                    KEYREL.PRED "_get_v_through_rel" ],
            PHON.ONSET con ] ].

get_to_v1 := v_vp_ssr-nimp_le &
 [ ORTH < "get" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_get_v_to_rel",
            PHON.ONSET con ] ].

get_to_v2 := v_np-vp_oeq-ntr_le &
 [ ORTH < "get" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_get_v_cause_rel",
            PHON.ONSET con ] ].

get_up_v1 := v_p_le &
 [ ORTH < "get" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_get_v_up_rel" ],
            PHON.ONSET con ] ].

get_v1 := v_np-np_only_le &
 [ ORTH < "get" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_get_v_1_rel",
            PHON.ONSET con ] ].

get_v2 := v_np_ntr_le &
 [ ORTH < "get" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_get_v_1_rel",
            PHON.ONSET con ] ].

get_v3 := v_np-pp*-ppto_le &
 [ ORTH < "get" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _from_p_sel_rel,
                    KEYREL.PRED "_get_v_from-to_rel" ],
            PHON.ONSET con ] ].

get_x_of_v1_i := v_np-pp_e-idm_le &
 [ ORTH < "get" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_get_v_i_rel" ],
            PHON.ONSET con ] ].

go_about_v1 := v_pp_e_le &
 [ ORTH < "go" >,
   SYNSEM [ LKEYS [ --COMPKEY _about_p_sel_rel,
                    KEYREL.PRED "_go_v_about_rel" ],
            PHON.ONSET con ] ].

go_ahead_v1 := v_p_le &
 [ ORTH < "go" >,
   SYNSEM [ LKEYS [ --COMPKEY _ahead_p_sel_rel,
                    KEYREL.PRED "_go_v_ahead_rel" ],
            PHON.ONSET con ] ].

go_along_with_v1 := v_p_le &
 [ ORTH < "go" >,
   SYNSEM [ LKEYS [ --COMPKEY _along_p_sel_rel,
                    KEYREL.PRED "_go_v_along_rel" ],
            PHON.ONSET con ] ].

go_away_v1 := v_p_le &
 [ ORTH < "go" >,
   SYNSEM [ LKEYS [ --COMPKEY _away_p_sel_rel,
                    KEYREL.PRED "_go_v_away_rel" ],
            PHON.ONSET con ] ].

go_bse_vp_v1 := v_vp_seq-go_le &
 [ ORTH < "go" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_go_v_state_rel",
            PHON.ONSET con ] ].

go_for_v1 := v_pp_e_le &
 [ ORTH < "go" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_go_v_for_rel" ],
            PHON.ONSET con ] ].

go_in_v1 := v_pp_e_le &
 [ ORTH < "go" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_go_v_in_rel" ],
            PHON.ONSET con ] ].

go_n1 := n_-_c-nocnh_le &
 [ ORTH < "go" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_go_n_1_rel",
            PHON.ONSET con ] ].

go_n1_i := n_-_c-br-idm_le &
 [ ORTH < "go" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_go_n_i_rel",
            PHON.ONSET con ] ].

go_off_v1 := v_p_le &
 [ ORTH < "go" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_go_v_off_rel" ],
            PHON.ONSET con ] ].

go_on_v1 := v_p_3only_le &
 [ ORTH < "go" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_go_v_on_rel" ],
            PHON.ONSET con ] ].

go_out_v1 := v_p_le &
 [ ORTH < "go" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_go_v_out_rel" ],
            PHON.ONSET con ] ].

go_out_v2 := v_p-pp_le &
 [ ORTH < "go" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    --OCOMPKEY _with_p_rel,
                    KEYREL.PRED "_go_v_out_rel" ],
            PHON.ONSET con ] ].

go_over_v1 := v_pp_e_le &
 [ ORTH < "go" >,
   SYNSEM [ LKEYS [ --COMPKEY _over_p_sel_rel,
                    KEYREL.PRED "_go_v_over_rel" ],
            PHON.ONSET con ] ].

go_state_v1 := v_ap_seq_le &
 [ ORTH < "go" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_go_v_state_rel",
            PHON.ONSET con ] ].

go_through_v1 := v_pp_e_le &
 [ ORTH < "go" >,
   SYNSEM [ LKEYS [ --COMPKEY _through_p_sel_rel,
                    KEYREL.PRED "_go_v_through_rel" ],
            PHON.ONSET con ] ].

go_through_v2 := v_p_le &
 [ ORTH < "go" >,
   SYNSEM [ LKEYS [ --COMPKEY _through_p_sel_rel,
                    KEYREL.PRED "_go_v_through_rel" ],
            PHON.ONSET con ] ].

go_v1 := v_pp*_dir_le &
 [ ORTH < "go" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_go_v_1_rel",
            PHON.ONSET con ] ].

go_v2 := v_vp_seq-prp_le &
 [ ORTH < "go" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_go_v_ing_rel",
            PHON.ONSET con ] ].

go_v3 := v_np_locinv-mv_le &
 [ ORTH < "go" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_go_v_1_rel",
            PHON.ONSET con ] ].

going_to_v1 := v_vp_qsmd_le &
 [ ORTH < "going" >,
   SYNSEM [ LKEYS.KEYREL.PRED _going+to_v_modal_rel,
            PHON.ONSET con ] ].

good_a1 := aj_pp_i-obl_le &
 [ ORTH < "good" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_good_a_at-for_rel" ],
            PHON.ONSET con ] ].

good_a2 := aj_pp_i_le &
 [ ORTH < "good" >,
   SYNSEM [ LKEYS [ --COMPKEY _at_p_sel_rel,
                    KEYREL.PRED "_good_a_at-for_rel" ],
            PHON.ONSET con ] ].

good_a3 := aj_pp-vp_i-tgh_le &
 [ ORTH < "good" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_good_a_at-for_rel",
            PHON.ONSET con ] ].

good_a4 := aj_pp-vp_i-it_le &
 [ ORTH < "good" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_good_a_at-for_rel",
            PHON.ONSET con ] ].

good_n1 := n_-_m-nocnh_le &
 [ ORTH < "good" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_good_n_1_rel",
            PHON.ONSET con ] ].

good_s_adv := av_-_s-cp-mc-pr_le &
 [ ORTH < "good" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_good_a_at-for_rel",
            PHON.ONSET con ] ].

goods_n1 := n_-_c-pl-nocnh_le &
 [ ORTH < "good" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_goods_n_1_rel",
            PHON.ONSET con ] ].

got_poss := v_np_got_le &
 [ ORTH < "got" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_got_v_1_rel",
            PHON.ONSET con ] ].

got_poss_prd := v_prd_got_le &
 [ ORTH < "got" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_got_v_prd_rel",
            PHON.ONSET con ] ].

got_to_v1 := v_vp_qsmd-psp_le &
 [ ORTH < "got" >,
   SYNSEM [ LKEYS.KEYREL.PRED _got_v_to_rel,
            PHON.ONSET con ] ].

ha_root_post := av_-_s-cp-nsp-po_le &
 [ ORTH < "ha" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ha_a_1_rel",
            PHON.ONSET con ] ].

ha_root_pre := av_-_s-cp-mc-pr_le &
 [ ORTH < "ha" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ha_a_1_rel",
            PHON.ONSET con ] ].

had_aux := v_vp_had_le &
 [ ORTH < "had" >,
   SYNSEM.PHON.ONSET con ].

had_aux_cx := v_vp_had-cx_le &
 [ ORTH < "d" >,
   SYNSEM.PHON.ONSET con ].

had_aux_cx_2 := v_vp_had-cx_le &
 [ ORTH < "'d" >,
   SYNSEM.PHON.ONSET con ].

had_aux_subj := v_vp_had-sv_le &
 [ ORTH < "had" >,
   SYNSEM.PHON.ONSET con ].

had_better_aux := v_vp_mdl-p-niv_le &
 [ ORTH < "had", "better" >,
   SYNSEM [ LKEYS.KEYREL.PRED _had+better_v_modal_rel,
            PHON.ONSET con ] ].

hadnt_aux_1 := v_vp_had-n_le &
 [ ORTH < "hadn't" >,
   SYNSEM.PHON.ONSET con ].

hadnt_aux_subj_1 := v_vp_had-n-sv_le &
 [ ORTH < "hadn't" >,
   SYNSEM.PHON.ONSET con ].

half_adv1 := av_-_i-vp-pr_le &
 [ ORTH < "half" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_half_a_1_rel",
            PHON.ONSET con ] ].

half_hour := aj_-_i-mnt-pr_le &
 [ ORTH < "half" >,
   SYNSEM [ LKEYS.KEYREL.CARG "30",
            PHON.ONSET con ] ].

half_n1 := n_pp_c-ns-of_le &
 [ ORTH < "half" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_half_n_of_rel",
            PHON.ONSET con ] ].

half_pn1 := n_pp_mc-a-of_le &
 [ ORTH < "half" >,
   SYNSEM [ LKEYS.ALTKEYREL.PRED _half_q_rel,
            PHON.ONSET con ] ].

half_pn2 := n_-_mc-prt_le &
 [ ORTH < "half" >,
   SYNSEM [ LKEYS.ALTKEYREL.PRED _half_q_rel,
            PHON.ONSET con ] ].

half_pn3 := n_np_mc-a_le &
 [ ORTH < "half" >,
   SYNSEM [ LKEYS.ALTKEYREL.PRED _half_q_rel,
            PHON.ONSET con ] ].

hard_a1 := aj_pp_i_le &
 [ ORTH < "hard" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_hard_a_for_rel" ],
            PHON.ONSET con ] ].

hard_a2 := aj_pp-vp_i-it_le &
 [ ORTH < "hard" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hard_a_for_rel",
            PHON.ONSET con ] ].

hard_a3 := aj_pp-vp_i-tgh_le &
 [ ORTH < "hard" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hard_a_for_rel",
            PHON.ONSET con ] ].

hard_a4 := aj_pp_i-obl_le &
 [ ORTH < "hard" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_hard_a_on_rel" ],
            PHON.ONSET con ] ].

harder := aj_pp_i-cmp_le &
 [ ORTH < "harder" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hard_a_for_rel",
            PHON.ONSET con ] ].

has_aux := v_vp_has_le &
 [ ORTH < "has" >,
   SYNSEM.PHON.ONSET con ].

has_aux_cx := v_vp_has-cx_le &
 [ ORTH < "s" >,
   SYNSEM.PHON.ONSET voc ].

has_aux_cx_2 := v_vp_has-cx_le &
 [ ORTH < "'s" >,
   SYNSEM.PHON.ONSET con ].

hasnt_aux_1 := v_vp_has-n_le &
 [ ORTH < "hasn't" >,
   SYNSEM.PHON.ONSET con ].

have-poss := v_np_poss_le &
 [ ORTH < "have" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_have_v_1_rel",
            PHON.ONSET con ] ].

have-prd := v_np-prd_oeq-ntr_le &
 [ ORTH < "have" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_have_v_prd_rel",
            PHON.ONSET con ] ].

have_aux_prp := v_vp_have-prp_le &
 [ ORTH < "having" >,
   SYNSEM.PHON.ONSET con ].

have_back_v1 := v_p-np_le &
 [ ORTH < "have" >,
   SYNSEM [ LKEYS [ --COMPKEY _back_p_sel_rel,
                    KEYREL.PRED "_have_v_back_rel" ],
            PHON.ONSET con ] ].

have_bse_aux := v_vp_have-bse_le &
 [ ORTH < "have" >,
   SYNSEM.PHON.ONSET con ].

have_cause := v_np-vp_bse_le &
 [ ORTH < "have" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_have_v_cause_rel",
            PHON.ONSET con ] ].

have_fin_aux := v_vp_have-f_le &
 [ ORTH < "have" >,
   SYNSEM.PHON.ONSET con ].

have_oeq_vpsl := v_np-vpslnp_oeq_le &
 [ ORTH < "have" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_have_v_prd_rel",
            PHON.ONSET con ] ].

have_off_v1 := v_p-np_le &
 [ ORTH < "have" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_have_v_off_rel" ],
            PHON.ONSET con ] ].

have_prp_v1 := v_np-vp_aeq-prp_le &
 [ ORTH < "have" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_have_v_1_rel",
            PHON.ONSET con ] ].

have_to1 := v_vp_ssr-nimp_le &
 [ ORTH < "have" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_have_v_to_rel",
            PHON.ONSET con ] ].

have_to_do_with_v1 := v_pp_le &
 [ ORTH < "have" >,
   SYNSEM [ LKEYS [ --COMPKEY _to+do+with_p_rel,
                    KEYREL.PRED "_have_v_regarding_rel" ],
            PHON.ONSET con ] ].

have_yet_v1 := v_p-vp_ssr_le &
 [ ORTH < "have" >,
   SYNSEM [ LKEYS [ --COMPKEY _yet_p_sel_rel,
                    KEYREL.PRED "_have_v_yet_rel" ],
            PHON.ONSET con ] ].

hawaii_n2 := n_-_pn-abb_le &
 [ ORTH < "HI" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Hawaii",
            PHON.ONSET con ] ].

he := n_-_pr-he_le &
 [ ORTH < "he" >,
   SYNSEM.PHON.ONSET con ].

heavies_n1 := n_-_c-pl-nocnh_le &
 [ ORTH < "heavy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_heavies_n_1_rel",
            PHON.ONSET con ] ].

heavy_a1 := aj_-_i_le &
 [ ORTH < "heavy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_heavy_a_1_rel",
            PHON.ONSET con ] ].

help_but_bse_v1 := v_vp_seq-but_le &
 [ ORTH < "help" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_help_v_but_rel",
            PHON.ONSET con ] ].

help_n1 := n_-_mc_le &
 [ ORTH < "help" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_help_n_1_rel",
            PHON.ONSET con ] ].

help_out_v1 := v_p-np_le &
 [ ORTH < "help" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_help_v_out_rel" ],
            PHON.ONSET con ] ].

help_out_v2 := v_p_le &
 [ ORTH < "help" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_help_v_out_rel" ],
            PHON.ONSET con ] ].

help_v1 := v_np*_le &
 [ ORTH < "help" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_help_v_1_rel",
            PHON.ONSET con ] ].

help_v2 := v_vp_seq_le &
 [ ORTH < "help" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_help_v_to_rel",
            PHON.ONSET con ] ].

help_v3 := v_np-vp_oeq_le &
 [ ORTH < "help" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_help_v_to_rel",
            PHON.ONSET con ] ].

help_v4 := v_np-vp_oeq-bse_le &
 [ ORTH < "help" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_help_v_to_rel",
            PHON.ONSET con ] ].

help_v5 := v_vp_seq-bse_le &
 [ ORTH < "help" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_help_v_to_rel",
            PHON.ONSET con ] ].

help_v6 := v_it-cp_prop-c_le &
 [ ORTH < "help" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_help_v_to_rel",
            PHON.ONSET con ] ].

helped_v4 := v_vp_sorb-psv_le &
 [ ORTH < "helped" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_help_v_to_rel",
            PHON.ONSET con ] ].

her := n_-_pr-her_le &
 [ ORTH < "her" >,
   SYNSEM.PHON.ONSET con ].

her_poss := d_-_poss-her_le &
 [ ORTH < "her" >,
   SYNSEM.PHON.ONSET con ].

here_nom := n_-_ad-pl_le &
 [ ORTH < "here" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED _here_a_1_rel,
                    KEYREL.PRED place_n_rel ],
            PHON.ONSET con ] ].

herself := n_-_pr-herself_le &
 [ ORTH < "herself" >,
   SYNSEM.PHON.ONSET con ].

herself_adv := av_-_pr-herself_le &
 [ ORTH < "herself" >,
   SYNSEM.PHON.ONSET con ].

hi_root_post := av_-_dc-grt-po_le &
 [ ORTH < "hi" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hi",
            PHON.ONSET con ] ].

hi_root_pre := av_-_dc-grt-pr_le &
 [ ORTH < "hi" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hi",
            PHON.ONSET con ] ].

him := n_-_pr-him_le &
 [ ORTH < "him" >,
   SYNSEM.PHON.ONSET con ].

himself := n_-_pr-himself_le &
 [ ORTH < "himself" >,
   SYNSEM.PHON.ONSET con ].

himself_adv := av_-_pr-himself_le &
 [ ORTH < "himself" >,
   SYNSEM.PHON.ONSET con ].

hire_n1 := n_-_c-ntc_le &
 [ ORTH < "hire" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hire_n_1_rel",
            PHON.ONSET con ] ].

hire_v1 := v_np_le &
 [ ORTH < "hire" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hire_v_1_rel",
            PHON.ONSET con ] ].

his := n_-_pr-his_le &
 [ ORTH < "his" >,
   SYNSEM.PHON.ONSET con ].

his_nq := d_-_poss-his-ns_le &
 [ ORTH < "his" >,
   SYNSEM.PHON.ONSET con ].

his_poss := d_-_poss-his_le &
 [ ORTH < "his" >,
   SYNSEM.PHON.ONSET con ].

hour_n1 := n_-_c-nday_le &
 [ ORTH < "hour" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hour_n_1_rel",
            PHON.ONSET voc ] ].

how_adj := aj_-_i-wh_le &
 [ ORTH < "how" >,
   SYNSEM.PHON.ONSET con ].

how_adv := pp_-_i-wh_le &
 [ ORTH < "how" >,
   SYNSEM [ LKEYS [ ALTKEYREL.PRED manner_rel,
                    KEYREL.PRED unspec_manner_rel ],
            PHON.ONSET con ] ].

how_cp := x_-_wh-cp_le &
 [ ORTH < "how" >,
   SYNSEM [ LKEYS [ ALTKEYREL.PRED manner_rel,
                    KEYREL.PRED unspec_manner_rel ],
            PHON.ONSET con ] ].

how_deg := av_-_dg-v-wh_le &
 [ ORTH < "how" >,
   SYNSEM.PHON.ONSET con ].

how_freerel_np := n_-_pr-fr-wh_le &
 [ ORTH < "how" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED unspec_manner_rel,
                    KEYREL.PRED manner_rel ],
            PHON.ONSET con ] ].

hyphen_punct_right := pt_-_hyphn-rgt_le &
 [ ORTH < "-" >,
   SYNSEM.PHON.ONSET con_or_voc ].

i := n_-_pr-i_le &
 [ ORTH < "I" >,
   SYNSEM.PHON.ONSET voc ].

if_c_indic := cm_np-vp_i-if-ic_le &
 [ ORTH < "if" >,
   SYNSEM.PHON.ONSET voc ].

if_c_subjnct := cm_np-vp_i-if-sv_le &
 [ ORTH < "if" >,
   SYNSEM.PHON.ONSET voc ].

if_prd := p_prd_s_le &
 [ ORTH < "if" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_if_x_then_rel",
            PHON.ONSET voc ] ].

ifs_n1 := n_-_c-pl-nocnh_le &
 [ ORTH < "if" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ifs_n_1_rel",
            PHON.ONSET voc ] ].

in := p_np_i-reg_le &
 [ ORTH < "in" >,
   SYNSEM [ LKEYS.KEYREL.PRED _in_p_rel,
            PHON.ONSET voc ] ].

in_order_to := p_vp_inf_le &
 [ ORTH < "in", "order" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_in+order+to_x_rel",
            PHON.ONSET voc ] ].

in_pp := pp_-_i-dir-nnm_le &
 [ ORTH < "in" >,
   SYNSEM [ LKEYS.KEYREL.PRED _in_p_rel,
            PHON.ONSET voc ] ].

in_ppcomp := p_pp_i-coprd_le &
 [ ORTH < "in" >,
   SYNSEM [ LKEYS.KEYREL.PRED _in_p_rel,
            PHON.ONSET voc ] ].

in_prtcl := p_np_ptcl_le &
 [ ORTH < "in" >,
   SYNSEM [ LKEYS.KEYREL.PRED _in_p_sel_rel,
            PHON.ONSET voc ] ].

in_temp := p_np_i-tmp_le &
 [ ORTH < "in" >,
   SYNSEM [ LKEYS [ --COMPKEY non_day_or_deg_rel,
                    KEYREL.PRED _in_p_temp_rel ],
            PHON.ONSET voc ] ].

interview_n1 := n_-_c-ntc_le &
 [ ORTH < "interview" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_interview_n_1_rel",
            PHON.ONSET voc ] ].

interview_v1 := v_np*_le &
 [ ORTH < "interview" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_interview_v_1_rel",
            PHON.ONSET voc ] ].

into := p_np_i-nm-no-tm_le &
 [ ORTH < "into" >,
   SYNSEM [ LKEYS.KEYREL.PRED _into_p_rel,
            PHON.ONSET voc ] ].

into_prtcl := p_np_ptcl_le &
 [ ORTH < "into" >,
   SYNSEM [ LKEYS.KEYREL.PRED _into_p_sel_rel,
            PHON.ONSET voc ] ].

into_vmod := p_np_i-nnm_le &
 [ ORTH < "into" >,
   SYNSEM [ LKEYS.KEYREL.PRED _into_p_rel,
            PHON.ONSET voc ] ].

it := n_-_pr-it-x_le &
 [ ORTH < "it" >,
   SYNSEM.PHON.ONSET voc ].

it2 := n_-_pr-it_le &
 [ ORTH < "it" >,
   SYNSEM.PHON.ONSET voc ].

it_3 := n_np_pr-it_le &
 [ ORTH < "it" >,
   SYNSEM.PHON.ONSET voc ].

its_poss := d_-_poss-its_le &
 [ ORTH < "its" >,
   SYNSEM.PHON.ONSET voc ].

january := n_-_c-month_le &
 [ ORTH < "January" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Jan",
            PHON.ONSET con ] ].

july := n_-_c-month_le &
 [ ORTH < "July" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Jul",
            PHON.ONSET con ] ].

kim := n_-_pn_le &
 [ ORTH < "Kim" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Kim",
            PHON.ONSET con ] ].

know_about_v1 := v_np*-pp_e_le &
 [ ORTH < "know" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _about_p_sel_rel,
                    KEYREL.PRED "_know_v_about_rel" ],
            PHON.ONSET con ] ].

know_of_v1 := v_np-pp_e_le &
 [ ORTH < "know" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_know_v_of_rel" ],
            PHON.ONSET con ] ].

know_of_v2 := v_pp_e_le &
 [ ORTH < "know" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_know_v_of_rel" ],
            PHON.ONSET con ] ].

know_v1 := v_np*_le &
 [ ORTH < "know" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_know_v_1_rel",
            PHON.ONSET con ] ].

know_v2 := v_cp_fin-inf_le &
 [ ORTH < "know" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_know_v_1_rel",
            PHON.ONSET con ] ].

know_v3 := v_vp_seq_le &
 [ ORTH < "know" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_know_v_1_rel",
            PHON.ONSET con ] ].

know_v4 := v_np-vp_sor_le &
 [ ORTH < "know" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_know_v_1_rel",
            PHON.ONSET con ] ].

know_v5 := v_np-pp_oeq-as_le &
 [ ORTH < "know" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_know_v_as_rel",
            PHON.ONSET con ] ].

late_a1 := aj_-_i-att_le &
 [ ORTH < "late" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_late_a_for_rel",
            PHON.ONSET con ] ].

late_a2 := aj_pp_i-obl_le &
 [ ORTH < "late" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_late_a_for_rel" ],
            PHON.ONSET con ] ].

late_adv := n_-_ad-gr_le &
 [ ORTH < "late" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED _late_p_rel,
                    KEYREL.PRED time_n_rel ],
            PHON.ONSET con ] ].

late_det := d_-_proxday_le &
 [ ORTH < "late" >,
   SYNSEM [ LKEYS.ALTKEYREL.PRED "_late_a_for_rel",
            PHON.ONSET con ] ].

lay_a1 := aj_-_i-att_le &
 [ ORTH < "lay" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lay_a_1_rel",
            PHON.ONSET con ] ].

lay_down_v1 := v_p_le &
 [ ORTH < "lay" >,
   SYNSEM [ LKEYS [ --COMPKEY _down_p_sel_rel,
                    KEYREL.PRED "_lay_v_down_rel" ],
            PHON.ONSET con ] ].

lay_off_v1 := v_p-np_le &
 [ ORTH < "lay" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_lay_v_off_rel" ],
            PHON.ONSET con ] ].

lay_on_v1 := v_p-np_le &
 [ ORTH < "lay" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_lay_v_on_rel" ],
            PHON.ONSET con ] ].

lay_out_v1 := v_p-np_le &
 [ ORTH < "lay" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_lay_v_out_rel" ],
            PHON.ONSET con ] ].

lay_up_v1 := v_p-np_le &
 [ ORTH < "lay" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_lay_v_up_rel" ],
            PHON.ONSET con ] ].

lay_v1 := v_np-pp_prop_le &
 [ ORTH < "lay" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lay_v_1_rel",
            PHON.ONSET con ] ].

leave_behind_v1 := v_p-np_le &
 [ ORTH < "leave" >,
   SYNSEM [ LKEYS [ --COMPKEY _behind_p_sel_rel,
                    KEYREL.PRED "_leave_v_behind_rel" ],
            PHON.ONSET con ] ].

leave_in_v1 := v_p-np_le &
 [ ORTH < "leave" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_leave_v_in_rel" ],
            PHON.ONSET con ] ].

leave_n1 := n_-_m_le &
 [ ORTH < "leave" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_leave_n_1_rel",
            PHON.ONSET con ] ].

leave_off_v1 := v_p-np_le &
 [ ORTH < "leave" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_leave_v_off_rel" ],
            PHON.ONSET con ] ].

leave_open_v1 := v_p-np_le &
 [ ORTH < "leave" >,
   SYNSEM [ LKEYS [ --COMPKEY _open_a_sel_rel,
                    KEYREL.PRED "_leave_v_open_rel" ],
            PHON.ONSET con ] ].

leave_out_v1 := v_p-np_le &
 [ ORTH < "leave" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_leave_v_out_rel" ],
            PHON.ONSET con ] ].

leave_over_v1 := v_p-np_le &
 [ ORTH < "leave" >,
   SYNSEM [ LKEYS [ --COMPKEY _over_p_sel_rel,
                    KEYREL.PRED "_leave_v_over_rel" ],
            PHON.ONSET con ] ].

leave_to_v1 := v_it-pp-vp_oeq_le &
 [ ORTH < "leave" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_leave_v_to_rel" ],
            PHON.ONSET con ] ].

leave_v1 := v_np*_le &
 [ ORTH < "leave" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_leave_v_1_rel",
            PHON.ONSET con ] ].

leave_v1_i := v_nb_idm_le &
 [ ORTH < "leave" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_leave_v_i_rel",
            PHON.ONSET con ] ].

leave_v2 := v_np-prd_oeq_le &
 [ ORTH < "leave" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_leave_v_1_rel",
            PHON.ONSET con ] ].

leave_v4 := v_np-np*_le &
 [ ORTH < "leave" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_leave_v_transfer_rel",
            PHON.ONSET con ] ].

lee := n_-_pn_le &
 [ ORTH < "Lee" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Lee",
            PHON.ONSET con ] ].

like_back_v1 := v_p-np_le &
 [ ORTH < "like" >,
   SYNSEM [ LKEYS [ --COMPKEY _back_p_sel_rel,
                    KEYREL.PRED "_like_v_back_rel" ],
            PHON.ONSET con ] ].

like_c := cm_np-vp_i-like_le &
 [ ORTH < "like" >,
   SYNSEM.PHON.ONSET con ].

like_disc_adv := av_-_dc-like-pr_le &
 [ ORTH < "like" >,
   SYNSEM [ LKEYS.KEYREL.CARG "like",
            PHON.ONSET con ] ].

like_p := p_np_i_le &
 [ ORTH < "like" >,
   SYNSEM [ LKEYS.KEYREL.PRED _like_p_rel,
            PHON.ONSET con ] ].

like_p_2 := p_cp_s_le &
 [ ORTH < "like" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_like_x_preph_rel",
            PHON.ONSET con ] ].

like_prd_v1 := v_np-prd_oeq-ntr_le &
 [ ORTH < "like" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_like_v_1_rel",
            PHON.ONSET con ] ].

like_v1 := v_np_le &
 [ ORTH < "like" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_like_v_1_rel",
            PHON.ONSET con ] ].

like_v2 := v_vp_seq_le &
 [ ORTH < "like" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_like_v_1_rel",
            PHON.ONSET con ] ].

like_v3 := v_vp_seq-prp_le &
 [ ORTH < "like" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_like_v_1_rel",
            PHON.ONSET con ] ].

like_v4 := v_np-vp_sor-ntr_le &
 [ ORTH < "like" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_like_v_1_rel",
            PHON.ONSET con ] ].

list_n1 := n_pp_c-of_le &
 [ ORTH < "list" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_list_n_of_rel",
            PHON.ONSET con ] ].

list_v1 := v_np_noger_le &
 [ ORTH < "list" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_list_v_1_rel",
            PHON.ONSET con ] ].

list_v2 := v_np-pp_oeq-as_le &
 [ ORTH < "list" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_list_v_as_rel",
            PHON.ONSET con ] ].

list_v3 := v_-_unacc_le &
 [ ORTH < "list" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_list_v_2_rel",
            PHON.ONSET con ] ].

location_i_n1 := n_-_c-brno_le &
 [ ORTH < "location" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_location_n_1_rel",
            PHON.ONSET con ] ].

location_n1 := n_-_mc_le &
 [ ORTH < "location" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_location_n_1_rel",
            PHON.ONSET con ] ].

made_v2 := v_vp_sorb-psv_le &
 [ ORTH < "make" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_make_v_1_rel",
            PHON.ONSET con ] ].

make_n1 := n_pp_mc-nocnh-of_le &
 [ ORTH < "make" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_make_n_of_rel",
            PHON.ONSET con ] ].

make_out_v1 := v_p-np_le &
 [ ORTH < "make" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_make_v_out_rel" ],
            PHON.ONSET con ] ].

make_out_v2 := v_p-np-pp_to_le &
 [ ORTH < "make" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_make_v_out_rel" ],
            PHON.ONSET con ] ].

make_over_v1 := v_np-p_le &
 [ ORTH < "make" >,
   SYNSEM [ LKEYS [ --COMPKEY _over_p_sel_rel,
                    KEYREL.PRED "_make_v_over_rel" ],
            PHON.ONSET con ] ].

make_prd_v1 := v_prd_seq-idm_le &
 [ ORTH < "make" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_make_v_i_rel",
            PHON.ONSET con ] ].

make_up_for_v1 := v_p-pp_le &
 [ ORTH < "make" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    --OCOMPKEY _for_p_rel,
                    KEYREL.PRED "_make_v_up-for_rel" ],
            PHON.ONSET con ] ].

make_up_v1 := v_p-np_le &
 [ ORTH < "make" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_make_v_up_rel" ],
            PHON.ONSET con ] ].

make_up_v2 := v_p_le &
 [ ORTH < "make" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_make_v_up_rel" ],
            PHON.ONSET con ] ].

make_v1 := v_np_noarg3_le &
 [ ORTH < "make" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_make_v_1_rel",
            PHON.ONSET con ] ].

make_v2 := v_np-vp_bse_le &
 [ ORTH < "make" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_make_v_cause_rel",
            PHON.ONSET con ] ].

make_v3 := v_np-np_only_le &
 [ ORTH < "make" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_make_v_1_rel",
            PHON.ONSET con ] ].

make_v4 := v_np-prd_sor_le &
 [ ORTH < "make" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_make_v_cause_rel",
            PHON.ONSET con ] ].

make_v5 := v_it-prd_le &
 [ ORTH < "make" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_make_v_cause_rel",
            PHON.ONSET con ] ].

make_v6 := v_np-nb_le &
 [ ORTH < "make" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_make_v_1_rel",
            PHON.ONSET con ] ].

make_x_of_v1_i := v_np-pp_e-idm_le &
 [ ORTH < "make" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_make_v_i_rel" ],
            PHON.ONSET con ] ].

manage_v1 := v_np_le &
 [ ORTH < "manage" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_manage_v_1_rel",
            PHON.ONSET con ] ].

manage_v2 := v_vp_seq_le &
 [ ORTH < "manage" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_manage_v_1_rel",
            PHON.ONSET con ] ].

manage_v3 := v_-_le &
 [ ORTH < "manage" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_manage_v_cope_rel",
            PHON.ONSET con ] ].

manager_n1 := n_pp_c-of_le &
 [ ORTH < "manager" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_manager_n_of_rel",
            PHON.ONSET con ] ].

many_a1 := aj_-_i-many_le &
 [ ORTH < "many" >,
   SYNSEM [ LKEYS.KEYREL.PRED much-many_a_rel,
            PHON.ONSET con ] ].

may := n_-_c-month_le &
 [ ORTH < "May" >,
   SYNSEM [ LKEYS.KEYREL.CARG "May",
            PHON.ONSET con ] ].

may_aux_pos := v_vp_mdl-p_le &
 [ ORTH < "may" >,
   SYNSEM [ LKEYS.KEYREL.PRED _may_v_modal_rel,
            PHON.ONSET con ] ].

me := n_-_pr-me_le &
 [ ORTH < "me" >,
   SYNSEM.PHON.ONSET con ].

meet_n1 := n_-_c_le &
 [ ORTH < "meet" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_meet_n_1_rel",
            PHON.ONSET con ] ].

meet_up_v1 := v_p_le &
 [ ORTH < "meet" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_meet_v_up_rel" ],
            PHON.ONSET con ] ].

meet_up_v2 := v_p-pp_le &
 [ ORTH < "meet" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    --OCOMPKEY _with_p_rel,
                    KEYREL.PRED "_meet_v_up_rel" ],
            PHON.ONSET con ] ].

meet_v1 := v_np*_le &
 [ ORTH < "meet" >,
   SYNSEM [ LKEYS [ --COMPKEY non_temp_nom_rel,
                    KEYREL.PRED "_meet_v_1_rel" ],
            PHON.ONSET con ] ].

meeting_n1 := n_pp_c-nt-of_le &
 [ ORTH < "meeting" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_meeting_n_of_rel",
            PHON.ONSET con ] ].

member_n1 := n_-_c-ed_le &
 [ ORTH < "member" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_member_n_of_rel",
            PHON.ONSET con ] ].

merely_adv1 := av_-_i-vp-x_le &
 [ ORTH < "merely" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mere_a_1_rel",
            PHON.ONSET con ] ].

merely_deg := av_-_dg-jo_le &
 [ ORTH < "merely" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_merely_x_deg_rel",
            PHON.ONSET con ] ].

merely_deg2 := av_-_dg-m_le &
 [ ORTH < "merely" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_merely_x_deg_rel",
            PHON.ONSET con ] ].

might_aux_pos := v_vp_mdl-p-sv_le &
 [ ORTH < "might" >,
   SYNSEM [ LKEYS.KEYREL.PRED _might_v_modal_rel,
            PHON.ONSET con ] ].

might_n1 := n_-_m_le &
 [ ORTH < "might" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_might_n_1_rel",
            PHON.ONSET con ] ].

mine := n_-_pr-mine_le &
 [ ORTH < "mine" >,
   SYNSEM.PHON.ONSET con ].

mine_for_v1 := v_np-pp_e_le &
 [ ORTH < "mine" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_mine_v_for_rel" ],
            PHON.ONSET con ] ].

mine_n1 := n_pp_c-of_le &
 [ ORTH < "mine" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mine_n_of_rel",
            PHON.ONSET con ] ].

mine_nq := d_-_poss-mine_le &
 [ ORTH < "mine" >,
   SYNSEM.PHON.ONSET con ].

mine_v1 := v_np*_le &
 [ ORTH < "mine" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mine_v_1_rel",
            PHON.ONSET con ] ].

monday_n1 := n_-_c-dow_le &
 [ ORTH < "Monday" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Mon",
            PHON.ONSET con ] ].

monday_n2 := n_-_c-dow_le &
 [ ORTH < "Mon" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Mon",
            PHON.ONSET con ] ].

monday_n3 := n_-_c-dow_le &
 [ ORTH < "Mon." >,
   SYNSEM [ LKEYS.KEYREL.CARG "Mon",
            PHON.ONSET con ] ].

month_n1 := n_-_c-nday_le &
 [ ORTH < "month" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_month_n_1_rel",
            PHON.ONSET con ] ].

more_adj := aj_pp_i-more_le &
 [ ORTH < "more" >,
   SYNSEM [ LKEYS.KEYREL.PRED much-many_a_rel,
            PHON.ONSET con ] ].

more_adv1 := av_-_i-vp-po_le &
 [ ORTH < "more" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_more_a_1_rel",
            PHON.ONSET con ] ].

more_deg := av_pp_dg-cmp_le &
 [ ORTH < "more" >,
   SYNSEM [ LKEYS.KEYREL.PRED comp_rel,
            PHON.ONSET con ] ].

more_nc_deg := av_-_dg-cmp-more_le &
 [ ORTH < "more" >,
   SYNSEM [ LKEYS.KEYREL.PRED comp_rel,
            PHON.ONSET con ] ].

more_than_deg := av_-_dg_le &
 [ ORTH < "more", "than" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_more+than_x_rel",
            PHON.ONSET con ] ].

more_than_p := p_np_i-reg_le &
 [ ORTH < "more", "than" >,
   SYNSEM [ LKEYS.KEYREL.PRED _more+than_p_rel,
            PHON.ONSET con ] ].

mores_n1 := n_-_c-pl-nocnh_le &
 [ ORTH < "more" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mores_n_1_rel",
            PHON.ONSET con ] ].

most_adv1 := av_-_i-vp-po-nmb_le &
 [ ORTH < "most" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_most_a_1_rel",
            PHON.ONSET con ] ].

most_deg := av_-_dg-sup_le &
 [ ORTH < "most" >,
   SYNSEM [ LKEYS.KEYREL.PRED superl_rel,
            PHON.ONSET con ] ].

mother_n1 := n_pp_c-of_le &
 [ ORTH < "mother" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mother_n_of_rel",
            PHON.ONSET con ] ].

mother_n2 := n_-_pn_le &
 [ ORTH < "Mother" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Mother",
            PHON.ONSET con ] ].

mother_v1 := v_np_le &
 [ ORTH < "mother" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mother_v_1_rel",
            PHON.ONSET con ] ].

move_about_v1 := v_p_le &
 [ ORTH < "move" >,
   SYNSEM [ LKEYS [ --COMPKEY _about_p_sel_rel,
                    KEYREL.PRED "_move_v_about_rel" ],
            PHON.ONSET con ] ].

move_about_v2 := v_p-np_le &
 [ ORTH < "move" >,
   SYNSEM [ LKEYS [ --COMPKEY _about_p_sel_rel,
                    KEYREL.PRED "_move_v_about_rel" ],
            PHON.ONSET con ] ].

move_in_v1 := v_p_le &
 [ ORTH < "move" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_move_v_in_rel" ],
            PHON.ONSET con ] ].

move_in_v2 := v_p-np_le &
 [ ORTH < "move" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_move_v_in_rel" ],
            PHON.ONSET con ] ].

move_n1 := n_-_c_le &
 [ ORTH < "move" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_move_n_1_rel",
            PHON.ONSET con ] ].

move_on_v1 := v_p_le &
 [ ORTH < "move" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_move_v_on_rel" ],
            PHON.ONSET con ] ].

move_out_v1 := v_p_le &
 [ ORTH < "move" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_move_v_out_rel" ],
            PHON.ONSET con ] ].

move_out_v2 := v_p-np_le &
 [ ORTH < "move" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_move_v_out_rel" ],
            PHON.ONSET con ] ].

move_up_v1 := v_p_le &
 [ ORTH < "move" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_move_v_up_rel" ],
            PHON.ONSET con ] ].

move_v1 := v_pp*_dir_le &
 [ ORTH < "move" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_move_v_1_rel",
            PHON.ONSET con ] ].

move_v2 := v_np*-pp*-ppto_le &
 [ ORTH < "move" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _from_p_sel_rel,
                    KEYREL.PRED "_move_v_from-to_rel" ],
            PHON.ONSET con ] ].

move_v3 := v_np_noger_le &
 [ ORTH < "move" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_move_v_cause_rel",
            PHON.ONSET con ] ].

move_v4 := v_np-pp_prop_le &
 [ ORTH < "move" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_move_v_cause_rel",
            PHON.ONSET con ] ].

move_v5 := v_np-vp_oeq_le &
 [ ORTH < "move" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_move_v_cause_rel",
            PHON.ONSET con ] ].

much := av_-_dg-m_le &
 [ ORTH < "much" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_much_x_deg_rel",
            PHON.ONSET con ] ].

much_a1 := aj_-_i-much_le &
 [ ORTH < "much" >,
   SYNSEM [ LKEYS.KEYREL.PRED much-many_a_rel,
            PHON.ONSET con ] ].

much_adv := av_-_i-vp-only_le &
 [ ORTH < "much" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_much_a_1_rel",
            PHON.ONSET con ] ].

must_aux_pos := v_vp_mdl-p_le &
 [ ORTH < "must" >,
   SYNSEM [ LKEYS.KEYREL.PRED _must_v_modal_rel,
            PHON.ONSET con ] ].

must_n1 := n_-_c-nocnh_le &
 [ ORTH < "must" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_must_n_1_rel",
            PHON.ONSET con ] ].

my := d_-_poss-my_le &
 [ ORTH < "my" >,
   SYNSEM.PHON.ONSET con ].

my_excl_pre := av_-_s-cp-mc-pr_le &
 [ ORTH < "my" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_my_a_1_rel",
            PHON.ONSET con ] ].

myself := n_-_pr-myself_le &
 [ ORTH < "myself" >,
   SYNSEM.PHON.ONSET con ].

myself_adv := av_-_pr-myself_le &
 [ ORTH < "myself" >,
   SYNSEM.PHON.ONSET con ].

ne_n1 := n_pp_c-of_le &
 [ ORTH < "ne" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ne_n_of_rel",
            PHON.ONSET con ] ].

ne_n2 := n_-_ad-dir_le &
 [ ORTH < "ne" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED _northeast_a_1_rel,
                    KEYREL.PRED place_n_rel ],
            PHON.ONSET con ] ].

ne_n3 := n_-_c-dir_le &
 [ ORTH < "ne" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_northeast_n_1_rel",
            PHON.ONSET con ] ].

nebraska_n2 := n_-_pn-abb_le &
 [ ORTH < "NE" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Nebraska",
            PHON.ONSET con ] ].

need-prd := v_np-prd_oeq-ntr_le &
 [ ORTH < "need" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_need_v_pred_rel",
            PHON.ONSET con ] ].

need_n1 := n_pp_mc-of_le &
 [ ORTH < "need" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_need_n_of_rel",
            PHON.ONSET con ] ].

need_not_v1 := v_vp_seq-n3sg_le &
 [ ORTH < "need", "not" >,
   SYNSEM [ LKEYS [ ALTKEYREL.PRED neg_rel,
                    KEYREL.PRED "_need_v_1_rel" ],
            PHON.ONSET con ] ].

need_v1 := v_np_le &
 [ ORTH < "need" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_need_v_1_rel",
            PHON.ONSET con ] ].

need_v2 := v_vp_seq_le &
 [ ORTH < "need" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_need_v_1_rel",
            PHON.ONSET con ] ].

need_v3 := v_np-vp_sor-ntr_le &
 [ ORTH < "need" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_need_v_1_rel",
            PHON.ONSET con ] ].

neither_conj := c_xp_neither-mrk_le &
 [ ORTH < "neither" >,
   SYNSEM.PHON.ONSET con ].

neither_det := d_-_prt-sg_le &
 [ ORTH < "neither" >,
   SYNSEM [ LKEYS.KEYREL.PRED _neither_q_rel,
            PHON.ONSET con ] ].

never_adv1 := av_-_s-vp-x_le &
 [ ORTH < "never" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_never_a_1_rel",
            PHON.ONSET con ] ].

never_prdp := av_-_s-not-prdp_le &
 [ ORTH < "never" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_never_a_1_rel",
            PHON.ONSET con ] ].

no_det := d_-_no_le &
 [ ORTH < "no" >,
   SYNSEM [ LKEYS.KEYREL.PRED _no_q_rel,
            PHON.ONSET con ] ].

no_disc_root := av_-_s-cp-mc-pr_le &
 [ ORTH < "no" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_no_a_1_rel",
            PHON.ONSET con ] ].

no_eq_nc_deg := av_-_dg-any_le &
 [ ORTH < "no" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_no_x_deg_rel",
            PHON.ONSET con ] ].

no_more_adv1 := av_-_i-vp-po_le &
 [ ORTH < "no", "more" >,
   SYNSEM [ LKEYS.KEYREL.PRED _nomore_a_1_rel,
            PHON.ONSET con ] ].

no_more_det := d_-_prt-plm_le &
 [ ORTH < "no", "more" >,
   SYNSEM [ LKEYS.KEYREL.PRED _no+more_q_rel,
            PHON.ONSET con ] ].

no_root_post := av_-_s-cp-nsp-po_le &
 [ ORTH < "no" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_no_a_1_rel",
            PHON.ONSET con ] ].

none_pn1 := n_pp_mc-na-of_le &
 [ ORTH < "none" >,
   SYNSEM [ LKEYS.ALTKEYREL.PRED _no_q_rel,
            PHON.ONSET con ] ].

none_pn2 := n_-_mc-prt_le &
 [ ORTH < "none" >,
   SYNSEM [ LKEYS.ALTKEYREL.PRED _no_q_rel,
            PHON.ONSET con ] ].

noon := n_-_pn-hour_le &
 [ ORTH < "noon" >,
   SYNSEM [ LKEYS.KEYREL.CARG "12",
            PHON.ONSET con ] ].

noon_min := x_-_am-pm_le &
 [ ORTH < "noon" >,
   SYNSEM [ LKEYS.KEYREL [ CARG "pm_time",
                             PRED "_pm_x_rel" ],
            PHON.ONSET con ] ].

noon_nc_n1 := n_-_c-dpt_le &
 [ ORTH < "noon" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_noon_n_1_rel",
            PHON.ONSET con ] ].

nor_conj := c_xp_nor_le &
 [ ORTH < "nor" >,
   SYNSEM.PHON.ONSET con ].

not := av_-_s-not_le &
 [ ORTH < "not" >,
   SYNSEM [ LKEYS.KEYREL.PRED neg_rel,
            PHON.ONSET con ] ].

not_conj := c_xp_not_le &
 [ ORTH < "not" >,
   SYNSEM.PHON.ONSET con ].

not_deg := av_-_dg-det_le &
 [ ORTH < "not" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_not_x_deg_rel",
            PHON.ONSET con ] ].

not_many_a1 := aj_-_i-mneg_le &
 [ ORTH < "not", "many" >,
   SYNSEM.PHON.ONSET con ].

not_prdp := av_-_s-not-prdp_le &
 [ ORTH < "not" >,
   SYNSEM [ LKEYS.KEYREL.PRED neg_rel,
            PHON.ONSET con ] ].

nots_n1 := n_-_c-pl-nocnh_le &
 [ ORTH < "not" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nots_n_1_rel",
            PHON.ONSET con ] ].

now_adv := n_-_ad-time_le &
 [ ORTH < "now" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED _now_a_1_rel,
                    KEYREL.PRED time_n_rel ],
            PHON.ONSET con ] ].

now_adv2 := av_-_i-vp-pr_le &
 [ ORTH < "now" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_now_a_1_rel",
            PHON.ONSET con ] ].

now_aux_adv := av_-_i-vp-x-now_le &
 [ ORTH < "now" >,
   SYNSEM.PHON.ONSET con ].

now_disc_pre := av_-_s-cp-mc-pr_le &
 [ ORTH < "now" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_now_a_1_rel",
            PHON.ONSET con ] ].

number_n1 := n_-_c-gr_le &
 [ ORTH < "number" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_number_n_of_rel",
            PHON.ONSET con ] ].

number_n2 := n_pp_c-gr-of_le &
 [ ORTH < "number" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_number_n_of_rel",
            PHON.ONSET con ] ].

number_n3 := n_-_m_le &
 [ ORTH < "number" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_number_n_grm_rel",
            PHON.ONSET con ] ].

number_v1 := v_np_le &
 [ ORTH < "number" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_number_v_1_rel",
            PHON.ONSET con ] ].

of_nbar_p := p_nb_i-nmd_le &
 [ ORTH < "of" >,
   SYNSEM [ LKEYS.KEYREL.PRED _of_p_nbar_rel,
            PHON.ONSET voc ] ].

of_poss := p_np_i-nm-poss_le &
 [ ORTH < "of" >,
   SYNSEM [ LKEYS.KEYREL.PRED _of_p_rel,
            PHON.ONSET voc ] ].

of_poss_gen := p_np_i-poss-gen_le &
 [ ORTH < "of" >,
   SYNSEM.PHON.ONSET voc ].

of_prtcl := p_np_ptcl-of_le &
 [ ORTH < "of" >,
   SYNSEM [ LKEYS.KEYREL.PRED _of_p_sel_rel,
            PHON.ONSET voc ] ].

of_subconj := p_np_s_le &
 [ ORTH < "of" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_of_x_subord_rel",
            PHON.ONSET voc ] ].

off := p_np_i-reg_le &
 [ ORTH < "off" >,
   SYNSEM [ LKEYS.KEYREL.PRED _off_p_rel,
            PHON.ONSET voc ] ].

off_adv := pp_-_i-dir_le &
 [ ORTH < "off" >,
   SYNSEM [ LKEYS.KEYREL.PRED _off_p_rel,
            PHON.ONSET voc ] ].

off_prtcl := p_np_ptcl_le &
 [ ORTH < "off" >,
   SYNSEM [ LKEYS.KEYREL.PRED _off_p_sel_rel,
            PHON.ONSET voc ] ].

office1 := n_-_c_le &
 [ ORTH < "office" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_office_n_1_rel",
            PHON.ONSET voc ] ].

office_i_n1 := n_-_c-brj*_le &
 [ ORTH < "office" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_office_n_1_rel",
            PHON.ONSET voc ] ].

often_adv1 := av_-_i-vp-x_le &
 [ ORTH < "often" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_often_a_1_rel",
            PHON.ONSET voc ] ].

often_adv2 := av_-_i-vp-po_le &
 [ ORTH < "often" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_often_a_1_rel",
            PHON.ONSET voc ] ].

old_a1 := aj_-_i_le &
 [ ORTH < "old" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_old_a_1_rel",
            PHON.ONSET voc ] ].

old_n2 := n_-_c-pl-def_le &
 [ ORTH < "old" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_old_n_1_rel",
            PHON.ONSET voc ] ].

older := aj_pp_i-cmp_le &
 [ ORTH < "older" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_old_a_1_rel",
            PHON.ONSET voc ] ].

oldest_a1 := aj_-_i-sup_le &
 [ ORTH < "oldest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_old_a_1_rel",
            PHON.ONSET voc ] ].

on := p_np_i-reg_le &
 [ ORTH < "on" >,
   SYNSEM [ LKEYS.KEYREL.PRED _on_p_rel,
            PHON.ONSET voc ] ].

on_adv := pp_-_i-nnm_le &
 [ ORTH < "on" >,
   SYNSEM [ LKEYS.KEYREL.PRED _on_p_dir_rel,
            PHON.ONSET voc ] ].

on_day := p_np_i-tmp_le &
 [ ORTH < "on" >,
   SYNSEM [ LKEYS [ --COMPKEY day_rel,
                    KEYREL.PRED _on_p_temp_rel ],
            PHON.ONSET voc ] ].

on_ppcomp := p_pp_i-coprd_le &
 [ ORTH < "on" >,
   SYNSEM [ LKEYS.KEYREL.PRED _on_p_rel,
            PHON.ONSET voc ] ].

on_prtcl := p_np_ptcl_le &
 [ ORTH < "on" >,
   SYNSEM [ LKEYS.KEYREL.PRED _on_p_sel_rel,
            PHON.ONSET voc ] ].

one_adj := aj_-_i-one_le &
 [ ORTH < "one" >,
   SYNSEM.PHON.ONSET con ].

one_adj_fract := aj_np_i-frct-one_le &
 [ ORTH < "one" >,
   SYNSEM.PHON.ONSET con ].

one_day := n_-_pn-dom-card_le &
 [ ORTH < "one" >,
   SYNSEM [ LKEYS.KEYREL.CARG "1",
            PHON.ONSET con ] ].

one_hour := n_-_pn-hour_le &
 [ ORTH < "one" >,
   SYNSEM [ LKEYS.KEYREL.CARG "1",
            PHON.ONSET con ] ].

one_pro := n_-_pr-one_le &
 [ ORTH < "one" >,
   SYNSEM [ LKEYS [ ALTKEYREL.PRED pronoun_q_rel,
                    KEYREL.PRED "_one_n_1_rel" ],
            PHON.ONSET con ] ].

ones_n1 := n_-_c-pl-one_le &
 [ ORTH < "ones" >,
   SYNSEM.PHON.ONSET con ].

only_a1 := aj_-_i-only_le &
 [ ORTH < "only" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_only_a_1_rel",
            PHON.ONSET voc ] ].

only_adv1 := av_-_s-vp-x_le &
 [ ORTH < "only" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_only_a_1_rel",
            PHON.ONSET voc ] ].

only_adv2 := av_-_s-cp-pr_le &
 [ ORTH < "only" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_only_a_1_rel",
            PHON.ONSET voc ] ].

only_adv3 := av_-_s-vp-po_le &
 [ ORTH < "only" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_only_a_1_rel",
            PHON.ONSET voc ] ].

only_deg := av_-_dg-jomv_le &
 [ ORTH < "only" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_only_x_deg_rel",
            PHON.ONSET voc ] ].

or_conj_1 := c_xp_or_le &
 [ ORTH < "or" >,
   SYNSEM.PHON.ONSET voc ].

order_i_n1 := n_-_c-br_le &
 [ ORTH < "order" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_order_n_of_rel",
            PHON.ONSET voc ] ].

order_n1 := n_-_mc-ns_le &
 [ ORTH < "order" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_order_n_of_rel",
            PHON.ONSET voc ] ].

order_n2 := n_pp_c-obl_le &
 [ ORTH < "order" >,
   SYNSEM [ LKEYS [ --COMPKEY _from_p_sel_rel,
                    KEYREL.PRED "_order_n_from_rel" ],
            PHON.ONSET voc ] ].

order_n3 := n_vp_c_le &
 [ ORTH < "order" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_order_n_of_rel",
            PHON.ONSET voc ] ].

order_n4 := n_cp_c-bse_le &
 [ ORTH < "order" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_order_n_of_rel",
            PHON.ONSET voc ] ].

order_v1 := v_np*_le &
 [ ORTH < "order" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_order_v_1_rel",
            PHON.ONSET voc ] ].

order_v2 := v_np-vp_oeq_le &
 [ ORTH < "order" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_order_v_1_rel",
            PHON.ONSET voc ] ].

order_v3 := v_np-pp_le &
 [ ORTH < "order" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _from_p_rel,
                    KEYREL.PRED "_order_v_1_rel" ],
            PHON.ONSET voc ] ].

order_v4 := v_np-np_only_le &
 [ ORTH < "order" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_order_v_1_rel",
            PHON.ONSET voc ] ].

other_a1 := aj_-_i-att-nsp_le &
 [ ORTH < "other" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_other_a_1_rel",
            PHON.ONSET voc ] ].

other_n1 := n_-_c-nochd_le &
 [ ORTH < "other" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_other_n_1_rel",
            PHON.ONSET voc ] ].

ought_aux_pos := v_vp_oght-p_le &
 [ ORTH < "ought" >,
   SYNSEM [ LKEYS.KEYREL.PRED _ought_v_modal_rel,
            PHON.ONSET voc ] ].

ourselves := n_-_pr-ourslves_le &
 [ ORTH < "ourselves" >,
   SYNSEM.PHON.ONSET voc ].

ourselves_adv := av_-_pr-ourslvs_le &
 [ ORTH < "ourselves" >,
   SYNSEM.PHON.ONSET voc ].

own_a1 := aj_-_i-poss_le &
 [ ORTH < "own" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_own_a_1_rel",
            PHON.ONSET voc ] ].

own_n1 := n_-_c-poss_le &
 [ ORTH < "own" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_own_n_1_rel",
            PHON.ONSET voc ] ].

own_v1 := v_np_le &
 [ ORTH < "own" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_own_v_1_rel",
            PHON.ONSET voc ] ].

paloalto := n_-_pn-city_le &
 [ ORTH < "Palo", "Alto" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Palo_Alto",
            PHON.ONSET con ] ].

paris_n1 := n_-_pn-city_le &
 [ ORTH < "Paris" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Paris",
            PHON.ONSET con ] ].

pat := n_-_pn_le &
 [ ORTH < "Pat" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Pat",
            PHON.ONSET con ] ].

pat_n2 := n_-_c_le &
 [ ORTH < "pat" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pat_n_1_rel",
            PHON.ONSET con ] ].

pat_v1 := v_np*_le &
 [ ORTH < "pat" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pat_v_1_rel",
            PHON.ONSET con ] ].

people_n1 := n_pp_c-pl_le &
 [ ORTH < "people" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_people_n_of_rel" ],
            PHON.ONSET con ] ].

person_n1 := n_-_mc_le &
 [ ORTH < "person" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_person_n_1_rel",
            PHON.ONSET con ] ].

previously_adv1 := av_-_i-vp_le &
 [ ORTH < "previously" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_previous_a_1_rel",
            PHON.ONSET con ] ].

program_n1 := n_pp_c-of_le &
 [ ORTH < "program" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_program_n_of_rel",
            PHON.ONSET con ] ].

program_v1 := v_np_le &
 [ ORTH < "program" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_program_v_1_rel",
            PHON.ONSET con ] ].

programmer_n1 := n_pp_c-of_le &
 [ ORTH < "programmer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_programmer_n_of_rel",
            PHON.ONSET con ] ].

project_n1 := n_-_c_le &
 [ ORTH < "project" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_project_n_1_rel",
            PHON.ONSET con ] ].

project_v1 := v_np_le &
 [ ORTH < "project" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_project_v_1_rel",
            PHON.ONSET con ] ].

promise_n1 := n_pp_mc-of_le &
 [ ORTH < "promise" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_promise_n_of_rel",
            PHON.ONSET con ] ].

promise_v1 := v_np-vp_aeq-ntr_le &
 [ ORTH < "promise" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_promise_v_1_rel",
            PHON.ONSET con ] ].

promise_v2 := v_np*_le &
 [ ORTH < "promise" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_promise_v_1_rel",
            PHON.ONSET con ] ].

promise_v4 := v_np-np_le &
 [ ORTH < "promise" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_promise_v_1_rel",
            PHON.ONSET con ] ].

promise_v5 := v_pp*-cp_le &
 [ ORTH < "promise" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_promise_v_1_rel" ],
            PHON.ONSET con ] ].

promised_a1 := v_-_psv_le &
 [ ORTH < "promised" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_promise_v_1_rel",
            PHON.ONSET con ] ].

rain_n1 := n_-_mc_le &
 [ ORTH < "rain" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rain_n_1_rel",
            PHON.ONSET con ] ].

rain_v1 := v_-_it_le &
 [ ORTH < "rain" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rain_v_1_rel",
            PHON.ONSET con ] ].

rains_n1 := n_-_c-pl-nocnh_le &
 [ ORTH < "rain" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rains_n_1_rel",
            PHON.ONSET con ] ].

room_n1 := n_-_mc_le &
 [ ORTH < "room" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_room_n_1_rel",
            PHON.ONSET con ] ].

run_across_v1 := v_pp_e_le &
 [ ORTH < "run" >,
   SYNSEM [ LKEYS [ --COMPKEY _across_p_sel_rel,
                    KEYREL.PRED "_run_v_across_rel" ],
            PHON.ONSET con ] ].

run_around_v1 := v_p_le &
 [ ORTH < "run" >,
   SYNSEM [ LKEYS [ --COMPKEY _around_p_sel_rel,
                    KEYREL.PRED "_run_v_around_rel" ],
            PHON.ONSET con ] ].

run_back_v2 := v_p_le &
 [ ORTH < "run" >,
   SYNSEM [ LKEYS [ --COMPKEY _back_p_sel_rel,
                    KEYREL.PRED "_run_v_back_rel" ],
            PHON.ONSET con ] ].

run_for_v1 := v_pp_e_le &
 [ ORTH < "run" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_trgt_rel,
                    KEYREL.PRED "_run_v_for_rel" ],
            PHON.ONSET con ] ].

run_for_v2 := v_pp_e_le &
 [ ORTH < "run" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_run_v_for_rel" ],
            PHON.ONSET con ] ].

run_into_v1 := v_pp_e_le &
 [ ORTH < "run" >,
   SYNSEM [ LKEYS [ --COMPKEY _into_p_sel_rel,
                    KEYREL.PRED "_run_v_into_rel" ],
            PHON.ONSET con ] ].

run_n1 := n_pp_c-of_le &
 [ ORTH < "run" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_run_n_of_rel",
            PHON.ONSET con ] ].

run_off_v1 := v_p-np_le &
 [ ORTH < "run" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_run_v_off_rel" ],
            PHON.ONSET con ] ].

run_out_v1 := v_p-pp_e_le &
 [ ORTH < "run" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    --OCOMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_run_v_out-of_rel" ],
            PHON.ONSET con ] ].

run_out_v2 := v_p_le &
 [ ORTH < "run" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_run_v_out_rel" ],
            PHON.ONSET con ] ].

run_over_v3 := v_p_le &
 [ ORTH < "run" >,
   SYNSEM [ LKEYS [ --COMPKEY _over_p_sel_rel,
                    KEYREL.PRED "_run_v_over_rel" ],
            PHON.ONSET con ] ].

run_prd_v1 := v_ap_seq_le &
 [ ORTH < "run" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_run_v_prd_rel",
            PHON.ONSET con ] ].

run_v2 := v_np_le &
 [ ORTH < "run" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_run_v_operate_rel",
            PHON.ONSET con ] ].

run_v3 := v_pp*_dir_le &
 [ ORTH < "run" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_run_v_unspec_rel",
            PHON.ONSET con ] ].

run_v4 := v_np_locinv-mv_le &
 [ ORTH < "run" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_run_v_unspec_rel",
            PHON.ONSET con ] ].

s_dash_pct := pt_-_s-dash_le &
 [ ORTH < "-" >,
   SYNSEM.PHON.ONSET con_or_voc ].

said_v1 := v_vp_sorb-psv_le &
 [ ORTH < "say" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_say_v_1_rel",
            PHON.ONSET con ] ].

sandy := n_-_pn_le &
 [ ORTH < "Sandy" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Sandy",
            PHON.ONSET con ] ].

sandy_a1 := aj_-_i_le &
 [ ORTH < "sandy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sandy_a_1_rel",
            PHON.ONSET con ] ].

sara := n_-_pn-fem_le &
 [ ORTH < "Sara" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Sara",
            PHON.ONSET con ] ].

say_about_v1 := v_np-pp_e_le &
 [ ORTH < "say" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _about_p_sel_rel,
                    KEYREL.PRED "_say_v_about_rel" ],
            PHON.ONSET con ] ].

say_disc_adv := av_-_dc-like-pr_le &
 [ ORTH < "say" >,
   SYNSEM [ LKEYS.KEYREL.CARG "say",
            PHON.ONSET con ] ].

say_n1 := n_-_mc_le &
 [ ORTH < "say" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_say_n_1_rel",
            PHON.ONSET con ] ].

say_v1 := v_np*_le &
 [ ORTH < "say" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_say_v_1_rel",
            PHON.ONSET con ] ].

say_v2 := v_pp*-cp_le &
 [ ORTH < "say" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_say_v_to_rel" ],
            PHON.ONSET con ] ].

say_v3 := v_pp_arg_le &
 [ ORTH < "say" >,
   SYNSEM [ LKEYS [ --COMPKEY loc_abstr_rel,
                    KEYREL.PRED "_say_v_loc_rel" ],
            PHON.ONSET con ] ].

see_about_v1 := v_pp_e_le &
 [ ORTH < "see" >,
   SYNSEM [ LKEYS [ --COMPKEY _about_p_sel_rel,
                    KEYREL.PRED "_see_v_about_rel" ],
            PHON.ONSET con ] ].

see_around_v1 := v_np-p_le &
 [ ORTH < "see" >,
   SYNSEM [ LKEYS [ --COMPKEY _around_p_sel_rel,
                    KEYREL.PRED "_see_v_around_rel" ],
            PHON.ONSET con ] ].

see_imp_v1 := v_nb-np*_imp_le &
 [ ORTH < "see" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_see_v_1_rel",
            PHON.ONSET con ] ].

see_n1 := n_-_c-nocnh_le &
 [ ORTH < "see" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_see_n_1_rel",
            PHON.ONSET con ] ].

see_through_v1 := v_pp_e_le &
 [ ORTH < "see" >,
   SYNSEM [ LKEYS [ --COMPKEY _through_p_sel_rel,
                    KEYREL.PRED "_see_v_through_rel" ],
            PHON.ONSET con ] ].

see_to_v1 := v_pp_e_le &
 [ ORTH < "see" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_see_v_to_rel" ],
            PHON.ONSET con ] ].

see_v1 := v_np_le &
 [ ORTH < "see" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_see_v_1_rel",
            PHON.ONSET con ] ].

see_v2 := v_cp_fin-inf_le &
 [ ORTH < "see" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_see_v_1_rel",
            PHON.ONSET con ] ].

see_v3 := v_pp*_dir_le &
 [ ORTH < "see" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_see_v_1_rel",
            PHON.ONSET con ] ].

see_v4 := v_np-vp_bse_le &
 [ ORTH < "see" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_see_v_1_rel",
            PHON.ONSET con ] ].

see_v5 := v_np-pp_oeq-as_le &
 [ ORTH < "see" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_see_v_as_rel",
            PHON.ONSET con ] ].

see_v6 := v_pp-it-cp_le &
 [ ORTH < "see" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_see_v_to_rel" ],
            PHON.ONSET con ] ].

see_v7 := v_np-prd_oeq_le &
 [ ORTH < "see" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_see_v_1_rel",
            PHON.ONSET con ] ].

seven := aj_-_i-crd-one_le &
 [ ORTH < "seven" >,
   SYNSEM [ LKEYS.KEYREL.CARG "7",
            PHON.ONSET con ] ].

seven_c := aj_np_i-crd-one_le &
 [ ORTH < "seven" >,
   SYNSEM [ LKEYS.KEYREL.CARG "7",
            PHON.ONSET con ] ].

seven_day := n_-_pn-dom-card_le &
 [ ORTH < "seven" >,
   SYNSEM [ LKEYS.KEYREL.CARG "7",
            PHON.ONSET con ] ].

seven_hour := n_-_pn-hour_le &
 [ ORTH < "seven" >,
   SYNSEM [ LKEYS.KEYREL.CARG "7",
            PHON.ONSET con ] ].

several_adj := aj_-_i-num_le &
 [ ORTH < "several" >,
   SYNSEM [ LKEYS.KEYREL.CARG "several",
            PHON.ONSET con ] ].

shall_aux_pos := v_vp_will-p_le &
 [ ORTH < "shall" >,
   SYNSEM [ LKEYS.KEYREL.PRED _shall_v_modal_rel,
            PHON.ONSET con ] ].

she := n_-_pr-she_le &
 [ ORTH < "she" >,
   SYNSEM.PHON.ONSET con ].

should_aux_neg_1 := v_vp_mdl-n-sv_le &
 [ ORTH < "shouldn't" >,
   SYNSEM [ LKEYS.KEYREL.PRED _should_v_modal_rel,
            PHON.ONSET con ] ].

should_aux_pos := v_vp_mdl-p-sv_le &
 [ ORTH < "should" >,
   SYNSEM [ LKEYS.KEYREL.PRED _should_v_modal_rel,
            PHON.ONSET con ] ].

show_as_v1 := v_pp_seq-e_le &
 [ ORTH < "show" >,
   SYNSEM [ LKEYS [ --COMPKEY _as_p_sel_rel,
                    KEYREL.PRED "_show_v_as_rel" ],
            PHON.ONSET con ] ].

show_n1 := n_pp_c-ntc-of_le &
 [ ORTH < "show" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_show_n_of_rel",
            PHON.ONSET con ] ].

show_up_v1 := v_p_le &
 [ ORTH < "show" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_show_v_up_rel" ],
            PHON.ONSET con ] ].

show_v1 := v_np-np_le &
 [ ORTH < "show" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_show_v_1_rel",
            PHON.ONSET con ] ].

show_v2 := v_np*_le &
 [ ORTH < "show" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_show_v_1_rel",
            PHON.ONSET con ] ].

show_v3 := v_np-cp_le &
 [ ORTH < "show" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_show_v_1_rel",
            PHON.ONSET con ] ].

show_v4 := v_np-ap_oeq_le &
 [ ORTH < "show" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_show_v_1_rel",
            PHON.ONSET con ] ].

show_v6 := v_ap_seq_le &
 [ ORTH < "show" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_show_v_1_rel",
            PHON.ONSET con ] ].

showing_n1 := n_pp_c-of_le &
 [ ORTH < "showing" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_showing_n_of_rel",
            PHON.ONSET con ] ].

sleep_in_v1 := v_p_le &
 [ ORTH < "sleep" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_sleep_v_in_rel" ],
            PHON.ONSET con ] ].

sleep_n1 := n_-_mc_le &
 [ ORTH < "sleep" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sleep_n_1_rel",
            PHON.ONSET con ] ].

sleep_v1 := v_-_le &
 [ ORTH < "sleep" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sleep_v_1_rel",
            PHON.ONSET con ] ].

smile_at_v1 := v_pp_e_le &
 [ ORTH < "smile" >,
   SYNSEM [ LKEYS [ --COMPKEY _at_p_sel_rel,
                    KEYREL.PRED "_smile_v_at_rel" ],
            PHON.ONSET con ] ].

smile_n1 := n_-_c_le &
 [ ORTH < "smile" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_smile_n_1_rel",
            PHON.ONSET con ] ].

smile_v1 := v_np*_le &
 [ ORTH < "smile" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_smile_v_1_rel",
            PHON.ONSET con ] ].

so_a1 := aj_-_i-prd-ndpt_le &
 [ ORTH < "so" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_so_a_true_rel",
            PHON.ONSET con ] ].

so_a2 := aj_pp-cp_i-it-c_le &
 [ ORTH < "so" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_so_a_true_rel",
            PHON.ONSET con ] ].

so_a3 := aj_-_i-wthr_le &
 [ ORTH < "so" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_so_a_true_rel",
            PHON.ONSET con ] ].

so_adv1 := av_-_s-cp-pr_le &
 [ ORTH < "so" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_so_a_thus_rel",
            PHON.ONSET con ] ].

so_adv2 := av_-_i-vp-pr_le &
 [ ORTH < "so" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_so_a_1_rel",
            PHON.ONSET con ] ].

so_conj := p_cp_s_le &
 [ ORTH < "so" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_so_x_rel",
            PHON.ONSET con ] ].

so_cp := x_-_so-cp_le &
 [ ORTH < "so" >,
   SYNSEM.PHON.ONSET con ].

so_deg := av_cp_dg-so_le &
 [ ORTH < "so" >,
   SYNSEM.PHON.ONSET con ].

so_deg_nc := av_-_dg-cmp-so_le &
 [ ORTH < "so" >,
   SYNSEM [ LKEYS.KEYREL.PRED comp_so_rel,
            PHON.ONSET con ] ].

so_that_dadv := p_adv_s_le &
 [ ORTH < "so" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_so+that_x_rel",
            PHON.ONSET con ] ].

some := d_-_prt-div_le &
 [ ORTH < "some" >,
   SYNSEM [ LKEYS.KEYREL.PRED _some_q_rel,
            PHON.ONSET con ] ].

some_indiv := d_-_ndiv_le &
 [ ORTH < "some" >,
   SYNSEM [ LKEYS.KEYREL.PRED _some_q_indiv_rel,
            PHON.ONSET con ] ].

some_n1 := n_-_c-meas-nocnh_le &
 [ ORTH < "some" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_some_n_meas_rel",
            PHON.ONSET con ] ].

soon_adv1 := n_-_ad-gr-nm_le &
 [ ORTH < "soon" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED _soon_p_rel,
                    KEYREL.PRED time_n_rel ],
            PHON.ONSET con ] ].

soon_aux_adv := av_-_i-vp-x_le &
 [ ORTH < "soon" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_soon_a_1_rel",
            PHON.ONSET con ] ].

staff_n1 := n_-_c_le &
 [ ORTH < "staff" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_staff_n_of_rel",
            PHON.ONSET con ] ].

staff_v1 := v_np_le &
 [ ORTH < "staff" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_staff_v_1_rel",
            PHON.ONSET con ] ].

stand1 := v_-_le &
 [ ORTH < "stand" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stand_v_1_rel",
            PHON.ONSET con ] ].

stand_for_v1 := v_pp_e_le &
 [ ORTH < "stand" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_stand_v_for_rel" ],
            PHON.ONSET con ] ].

stand_in_for_v1 := v_p-pp_le &
 [ ORTH < "stand" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    --OCOMPKEY _for_p_rel,
                    KEYREL.PRED "_stand_v_in-for_rel" ],
            PHON.ONSET con ] ].

stand_in_v3 := v_p_le &
 [ ORTH < "stand" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_stand_v_in_rel" ],
            PHON.ONSET con ] ].

stand_n1 := n_-_c_le &
 [ ORTH < "stand" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stand_n_1_rel",
            PHON.ONSET con ] ].

stand_out_v1 := v_p_le &
 [ ORTH < "stand" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_stand_v_out_rel" ],
            PHON.ONSET con ] ].

stand_up_for_v1 := v_p-pp_le &
 [ ORTH < "stand" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    --OCOMPKEY _for_p_rel,
                    KEYREL.PRED "_stand_v_up-for_rel" ],
            PHON.ONSET con ] ].

stand_up_v1 := v_p-np_le &
 [ ORTH < "stand" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_stand_v_up_rel" ],
            PHON.ONSET con ] ].

stand_up_v2 := v_p_le &
 [ ORTH < "stand" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_stand_v_up_rel" ],
            PHON.ONSET con ] ].

stand_v1_i := v_nb_idm_le &
 [ ORTH < "stand" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stand_v_i_rel",
            PHON.ONSET con ] ].

stand_v2 := v_ap_seq_le &
 [ ORTH < "stand" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stand_v_1_rel",
            PHON.ONSET con ] ].

stand_v3 := v_np_locinv-mv_le &
 [ ORTH < "stand" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stand_v_1_rel",
            PHON.ONSET con ] ].

suppose_v1 := v_cp_prop_le &
 [ ORTH < "suppose" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_suppose_v_1_rel",
            PHON.ONSET con ] ].

suppose_v2 := v_cp_rkey-bse_le &
 [ ORTH < "suppose" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_suppose_v_1_rel",
            PHON.ONSET con ] ].

suppose_v2_non3sg := v_cp_rkey-n3sg_le &
 [ ORTH < "suppose" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_suppose_v_1_rel",
            PHON.ONSET con ] ].

suppose_v3 := v_-_le &
 [ ORTH < "suppose" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_suppose_v_1_rel",
            PHON.ONSET con ] ].

talk_into_v1 := v_np-pp_e_le &
 [ ORTH < "talk" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _into_p_sel_rel,
                    KEYREL.PRED "_talk_v_into_rel" ],
            PHON.ONSET con ] ].

talk_n1 := n_pp_mc-of_le &
 [ ORTH < "talk" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_talk_n_of-on_rel",
            PHON.ONSET con ] ].

talk_n2 := n_pp_c-obl_le &
 [ ORTH < "talk" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_talk_n_of-on_rel" ],
            PHON.ONSET con ] ].

talk_of_v1 := v_pp_e_le &
 [ ORTH < "talk" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_talk_v_of_rel" ],
            PHON.ONSET con ] ].

talk_over_v1 := v_p-np_le &
 [ ORTH < "talk" >,
   SYNSEM [ LKEYS [ --COMPKEY _over_p_sel_rel,
                    KEYREL.PRED "_talk_v_over_rel" ],
            PHON.ONSET con ] ].

talk_v1 := v_pp*-pp*_le &
 [ ORTH < "talk" >,
   SYNSEM [ LKEYS [ --COMPKEY to_or_with_p_rel,
                    --OCOMPKEY _about_p_rel,
                    KEYREL.PRED "_talk_v_about_rel" ],
            PHON.ONSET con ] ].

team_n1 := n_pp_c-of_le &
 [ ORTH < "team" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_team_n_of_rel",
            PHON.ONSET con ] ].

team_post_ttl := n_-_tt-post_le &
 [ ORTH < "Team" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_team_n_of_rel",
            PHON.ONSET con ] ].

team_up_v1 := v_p_le &
 [ ORTH < "team" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_team_v_up_rel" ],
            PHON.ONSET con ] ].

telephone_n1 := n_-_c-ns_le &
 [ ORTH < "telephone" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_telephone_n_1_rel",
            PHON.ONSET con ] ].

telephone_v1 := v_np*_le &
 [ ORTH < "telephone" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_telephone_v_1_rel",
            PHON.ONSET con ] ].

ten := aj_-_i-crd-two_le &
 [ ORTH < "ten" >,
   SYNSEM [ LKEYS.KEYREL.CARG "10",
            PHON.ONSET con ] ].

ten_day := n_-_pn-dom-card_le &
 [ ORTH < "ten" >,
   SYNSEM [ LKEYS.KEYREL.CARG "10",
            PHON.ONSET con ] ].

ten_hour := n_-_pn-hour_le &
 [ ORTH < "ten" >,
   SYNSEM [ LKEYS.KEYREL.CARG "10",
            PHON.ONSET con ] ].

tens_n2 := n_pp_c-pl-crd_le &
 [ ORTH < "ten" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.CARG "10" ],
            PHON.ONSET con ] ].

than_p1 := p_prd_ptcl-ngap_le &
 [ ORTH < "than" >,
   SYNSEM [ LKEYS.KEYREL.PRED _than_p_compar_rel,
            PHON.ONSET con ] ].

than_p1_nc := p_np_ptcl-ngap_le &
 [ ORTH < "than" >,
   SYNSEM [ LKEYS.KEYREL.PRED _than_p_compar_rel,
            PHON.ONSET con ] ].

than_p2 := p_np_i-than_le &
 [ ORTH < "than" >,
   SYNSEM [ LKEYS.KEYREL.PRED _than_p_ind_rel,
            PHON.ONSET con ] ].

that_c := cm_np-vp_i-that_le &
 [ ORTH < "that" >,
   SYNSEM.PHON.ONSET con ].

that_c_subj := cm_np-vp_i-th-sv_le &
 [ ORTH < "that" >,
   SYNSEM.PHON.ONSET con ].

that_deg := av_-_dg-tt_le &
 [ ORTH < "that" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_that_x_deg_rel",
            PHON.ONSET con ] ].

that_deix := n_-_pr-dei-sg_le &
 [ ORTH < "that" >,
   SYNSEM [ LKEYS.ALTKEYREL.PRED _that_q_dem_rel,
            PHON.ONSET con ] ].

that_det := d_-_sgm_le &
 [ ORTH < "that" >,
   SYNSEM [ LKEYS.KEYREL.PRED _that_q_dem_rel,
            PHON.ONSET con ] ].

that_is_root_post := av_-_s-cp-nsp-po_le &
 [ ORTH < "that", "is" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_that+is_a_1_rel",
            PHON.ONSET con ] ].

that_is_root_pre := av_-_s-cp-mc-pr_le &
 [ ORTH < "that", "is" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_that+is_a_1_rel",
            PHON.ONSET con ] ].

that_r := n_-_pr-rel-nwh_le &
 [ ORTH < "that" >,
   SYNSEM.PHON.ONSET con ].

that_r_npadv := n_-_pr-rel-ad_le &
 [ ORTH < "that" >,
   SYNSEM.PHON.ONSET con ].

the_1 := d_-_the_le &
 [ ORTH < "the" >,
   SYNSEM [ LKEYS.KEYREL.PRED _the_q_rel,
            PHON.ONSET con ] ].

the_most_adv1 := av_-_i-vp-po-nmb_le &
 [ ORTH < "the", "most" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_most_a_1_rel",
            PHON.ONSET con ] ].

their := d_-_poss-their_le &
 [ ORTH < "their" >,
   SYNSEM.PHON.ONSET con ].

them := n_-_pr-them_le &
 [ ORTH < "them" >,
   SYNSEM.PHON.ONSET con ].

them_2 := n_np_pr-them_le &
 [ ORTH < "them" >,
   SYNSEM.PHON.ONSET con ].

themselves := n_-_pr-themslves_le &
 [ ORTH < "themselves" >,
   SYNSEM.PHON.ONSET con ].

themselves_adv := av_-_pr-thmslvs_le &
 [ ORTH < "themselves" >,
   SYNSEM.PHON.ONSET con ].

then_adv := n_-_ad-br_le &
 [ ORTH < "then" >,
   SYNSEM [ LKEYS.ALT2KEYREL.PRED _then_p_temp_rel,
            PHON.ONSET con ] ].

then_adv2 := av_-_i-vp-x-only_le &
 [ ORTH < "then" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_then_a_1_rel",
            PHON.ONSET con ] ].

then_adv3 := av_-_s-cp-pr_le &
 [ ORTH < "then" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_then_a_1_rel",
            PHON.ONSET con ] ].

then_conj_1 := c_xp_then_le &
 [ ORTH < "then" >,
   SYNSEM.PHON.ONSET con ].

then_disc_post := av_-_s-cp-nsp-po_le &
 [ ORTH < "then" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_then_a_1_rel",
            PHON.ONSET con ] ].

there_expl := n_-_pr-there-x_le &
 [ ORTH < "there" >,
   SYNSEM.PHON.ONSET con ].

there_nom := n_-_ad-acc_le &
 [ ORTH < "there" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED _there_a_1_rel,
                    KEYREL.PRED place_n_rel ],
            PHON.ONSET con ] ].

these_deix := n_-_pr-dei-pl_le &
 [ ORTH < "these" >,
   SYNSEM [ LKEYS.ALTKEYREL.PRED _these_q_dem_rel,
            PHON.ONSET con ] ].

these_det := d_-_pl_le &
 [ ORTH < "these" >,
   SYNSEM [ LKEYS.KEYREL.PRED _these_q_dem_rel,
            PHON.ONSET con ] ].

they := n_-_pr-they_le &
 [ ORTH < "they" >,
   SYNSEM.PHON.ONSET con ].

they_2 := n_np_pr-they_le &
 [ ORTH < "they" >,
   SYNSEM.PHON.ONSET con ].

they_sg := n_-_pr-na_le &
 [ ORTH < "they" >,
   SYNSEM.PHON.ONSET con ].

think1 := v_pp*-cp_le &
 [ ORTH < "think" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_think_v_1_rel" ],
            PHON.ONSET con ] ].

think2 := v_pp_arg_le &
 [ ORTH < "think" >,
   SYNSEM [ LKEYS [ --COMPKEY loc_abstr_rel,
                    KEYREL.PRED "_think_v_loc_rel" ],
            PHON.ONSET con ] ].

think_about := v_np*-pp_e_le &
 [ ORTH < "think" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _about_p_sel_rel,
                    KEYREL.PRED "_think_v_about_rel" ],
            PHON.ONSET con ] ].

think_of := v_pp_e_le &
 [ ORTH < "think" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_think_v_of_rel" ],
            PHON.ONSET con ] ].

think_through_v1 := v_p-np_le &
 [ ORTH < "think" >,
   SYNSEM [ LKEYS [ --COMPKEY _through_p_sel_rel,
                    KEYREL.PRED "_think_v_through_rel" ],
            PHON.ONSET con ] ].

think_up_v1 := v_p-np_le &
 [ ORTH < "think" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_think_v_up_rel" ],
            PHON.ONSET con ] ].

think_v3 := v_np*_ntr_le &
 [ ORTH < "think" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_think_v_1_rel",
            PHON.ONSET con ] ].

thirties_n1 := n_-_c-pl-num_le &
 [ ORTH < "thirty" >,
   SYNSEM [ LKEYS.KEYREL.CARG "30",
            PHON.ONSET con ] ].

thirty := aj_-_i-crd-two_le &
 [ ORTH < "thirty" >,
   SYNSEM [ LKEYS.KEYREL.CARG "30",
            PHON.ONSET con ] ].

thirty_day := n_-_pn-dom-card_le &
 [ ORTH < "thirty" >,
   SYNSEM [ LKEYS.KEYREL.CARG "30",
            PHON.ONSET con ] ].

thirty_w_comps := aj_np_i-crd-nsp_le &
 [ ORTH < "thirty" >,
   SYNSEM [ LKEYS.KEYREL.CARG "30",
            PHON.ONSET con ] ].

this_deg := av_-_dg-tt_le &
 [ ORTH < "this" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_this_x_deg_rel",
            PHON.ONSET con ] ].

this_deix := n_-_pr-dei-sg_le &
 [ ORTH < "this" >,
   SYNSEM [ LKEYS.ALTKEYREL.PRED _this_q_dem_rel,
            PHON.ONSET con ] ].

this_det := d_-_sgm_le &
 [ ORTH < "this" >,
   SYNSEM [ LKEYS.KEYREL.PRED _this_q_dem_rel,
            PHON.ONSET con ] ].

those_deix := n_-_pr-dei-pl_le &
 [ ORTH < "those" >,
   SYNSEM [ LKEYS.ALTKEYREL.PRED _those_q_dem_rel,
            PHON.ONSET con ] ].

those_det := d_-_pl_le &
 [ ORTH < "those" >,
   SYNSEM [ LKEYS.KEYREL.PRED _those_q_dem_rel,
            PHON.ONSET con ] ].

those_ppof := n_pp_pr-dei-3pl_le &
 [ ORTH < "those" >,
   SYNSEM.PHON.ONSET con ].

three := aj_-_i-crd-one_le &
 [ ORTH < "three" >,
   SYNSEM [ LKEYS.KEYREL.CARG "3",
            PHON.ONSET con ] ].

three_c := aj_np_i-crd-one_le &
 [ ORTH < "three" >,
   SYNSEM [ LKEYS.KEYREL.CARG "3",
            PHON.ONSET con ] ].

three_day := n_-_pn-dom-card_le &
 [ ORTH < "three" >,
   SYNSEM [ LKEYS.KEYREL.CARG "3",
            PHON.ONSET con ] ].

three_hour := n_-_pn-hour_le &
 [ ORTH < "three" >,
   SYNSEM [ LKEYS.KEYREL.CARG "3",
            PHON.ONSET con ] ].

time_a1 := aj_pp_i-time_le &
 [ ORTH < "time" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_time_a_expl-for_rel" ],
            PHON.ONSET con ] ].

time_a2 := aj_pp-vp_i-it_le &
 [ ORTH < "time" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_time_a_expl-for_rel",
            PHON.ONSET con ] ].

time_n1 := n_-_c-time_le &
 [ ORTH < "time" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_time_n_of_rel",
            PHON.ONSET con ] ].

time_n2 := n_pp_c-t-of-nb_le &
 [ ORTH < "time" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_time_n_of_rel",
            PHON.ONSET con ] ].

time_v1 := v_np_le &
 [ ORTH < "time" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_time_v_1_rel",
            PHON.ONSET con ] ].

to := p_np_i-nnm_le &
 [ ORTH < "to" >,
   SYNSEM [ LKEYS.KEYREL.PRED _to_p_rel,
            PHON.ONSET con ] ].

to_c_prop := cm_vp_to_le &
 [ ORTH < "to" >,
   SYNSEM.PHON.ONSET con ].

to_c_prop_elided := cm_-_to_le &
 [ ORTH < "to" >,
   SYNSEM.PHON.ONSET con ].

to_nbar_p := p_nb_i-nmd_le &
 [ ORTH < "to" >,
   SYNSEM [ LKEYS.KEYREL.PRED _to_p_nbar_rel,
            PHON.ONSET con ] ].

to_nmod := p_np_i-nm-no-tm_le &
 [ ORTH < "to" >,
   SYNSEM [ LKEYS.KEYREL.PRED _to_p_rel,
            PHON.ONSET con ] ].

to_prtcl := p_np_ptcl_le &
 [ ORTH < "to" >,
   SYNSEM [ LKEYS.KEYREL.PRED _to_p_sel_rel,
            PHON.ONSET con ] ].

to_subord := p_vp_bse_le &
 [ ORTH < "to" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_in+order+to_x_rel",
            PHON.ONSET con ] ].

too := av_-_s-vp-only_le &
 [ ORTH < "too" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_too_a_also_rel",
            PHON.ONSET con ] ].

too_adv2 := pp_-_i-nm_le &
 [ ORTH < "too" >,
   SYNSEM [ LKEYS.KEYREL.PRED _too_a_also_rel,
            PHON.ONSET con ] ].

too_deg := av_vp_dg-too_le &
 [ ORTH < "too" >,
   SYNSEM.PHON.ONSET con ].

too_deg_nc := av_-_dg-cmp-so_le &
 [ ORTH < "too" >,
   SYNSEM [ LKEYS.KEYREL.PRED comp_too_rel,
            PHON.ONSET con ] ].

too_deg_sl := av_vpslnp_dg-too_le &
 [ ORTH < "too" >,
   SYNSEM.PHON.ONSET con ].

true_a1 := aj_pp_i_le &
 [ ORTH < "true" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_true_a_of_rel" ],
            PHON.ONSET con ] ].

true_a2 := aj_pp-cp_i-it-c_le &
 [ ORTH < "true" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_true_a_of_rel",
            PHON.ONSET con ] ].

trustworthy_a1 := aj_-_i_le &
 [ ORTH < "trustworthy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_trustworthy_a_1_rel",
            PHON.ONSET con ] ].

tuesday_n1 := n_-_c-dow_le &
 [ ORTH < "Tuesday" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Tue",
            PHON.ONSET con ] ].

twice_adv1 := av_-_i-vp_le &
 [ ORTH < "twice" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_twice_a_1_rel",
            PHON.ONSET con ] ].

twice_deg := av_-_dg-v_le &
 [ ORTH < "twice" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_twice_x_deg_rel",
            PHON.ONSET con ] ].

twice_pn1 := n_np_mc-a_le &
 [ ORTH < "twice" >,
   SYNSEM [ LKEYS.ALTKEYREL.PRED _twice_q_rel,
            PHON.ONSET con ] ].

two := aj_-_i-crd-one_le &
 [ ORTH < "two" >,
   SYNSEM [ LKEYS.KEYREL.CARG "2",
            PHON.ONSET con ] ].

two_c := aj_np_i-crd-one_le &
 [ ORTH < "two" >,
   SYNSEM [ LKEYS.KEYREL.CARG "2",
            PHON.ONSET con ] ].

two_day := n_-_pn-dom-card_le &
 [ ORTH < "two" >,
   SYNSEM [ LKEYS.KEYREL.CARG "2",
            PHON.ONSET con ] ].

two_hour := n_-_pn-hour_le &
 [ ORTH < "two" >,
   SYNSEM [ LKEYS.KEYREL.CARG "2",
            PHON.ONSET con ] ].

u_pro := n_-_pr-you_le &
 [ ORTH < "u" >,
   SYNSEM.PHON.ONSET con ].

unevaluated_a1 := aj_-_i-att_le &
 [ ORTH < "unevaluated" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unevaluated_a_1_rel",
            PHON.ONSET voc ] ].

unevaluated_v1 := v_-_psv-neg_le &
 [ ORTH < "unevaluated" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_evaluate_v_1_rel",
            PHON.ONSET voc ] ].

until := p_np_i-nnm-npro_le &
 [ ORTH < "until" >,
   SYNSEM [ LKEYS.KEYREL.PRED _until_p_rel,
            PHON.ONSET voc ] ].

until2 := p_cp_s-notop_le &
 [ ORTH < "until" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_until_x_h_rel",
            PHON.ONSET voc ] ].

until_p3 := p_pp_i-coprd_le &
 [ ORTH < "until" >,
   SYNSEM [ LKEYS.KEYREL.PRED _until_p_rel,
            PHON.ONSET voc ] ].

until_prtcl := p_np_ptcl_le &
 [ ORTH < "until" >,
   SYNSEM [ LKEYS.KEYREL.PRED _until_p_sel_rel,
            PHON.ONSET voc ] ].

urge1 := v_np-vp_oeq_le &
 [ ORTH < "urge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_urge_v_to_rel",
            PHON.ONSET voc ] ].

urge_n1 := n_-_c_le &
 [ ORTH < "urge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_urge_n_for_rel",
            PHON.ONSET voc ] ].

urge_n2 := n_vp_c_le &
 [ ORTH < "urge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_urge_n_for_rel",
            PHON.ONSET voc ] ].

urge_v2 := v_cp_sbjnct_le &
 [ ORTH < "urge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_urge_v_1_rel",
            PHON.ONSET voc ] ].

urge_v3 := v_np_le &
 [ ORTH < "urge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_urge_v_1_rel",
            PHON.ONSET voc ] ].

us := n_-_pr-us_le &
 [ ORTH < "us" >,
   SYNSEM.PHON.ONSET con ].

us_plus_np := n_np_pr-us_le &
 [ ORTH < "us" >,
   SYNSEM.PHON.ONSET voc ].

use_n1 := n_pp_mc-of-ns_le &
 [ ORTH < "use" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_use_n_of_rel",
            PHON.ONSET con ] ].

use_of_v1 := v_np-pp_le &
 [ ORTH < "use" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _of_p_rel,
                    KEYREL.PRED "_use_v_1_rel" ],
            PHON.ONSET con ] ].

use_up_v1 := v_p-np_le &
 [ ORTH < "use" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_use_v_up_rel" ],
            PHON.ONSET con ] ].

use_v1 := v_np_le &
 [ ORTH < "use" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_use_v_1_rel",
            PHON.ONSET con ] ].

use_v2 := v_np-vp_aeq_le &
 [ ORTH < "use" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_use_v_1_rel",
            PHON.ONSET con ] ].

use_v3 := v_np-pp_oeq-as_le &
 [ ORTH < "use" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_use_v_as_rel",
            PHON.ONSET con ] ].

used_a1 := aj_pp_i-obl_le &
 [ ORTH < "used" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_used_a_to_rel" ],
            PHON.ONSET con ] ].

used_a2 := aj_-_i_le &
 [ ORTH < "used" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_used_a_1_rel",
            PHON.ONSET con ] ].

used_to_aux_pos := v_vp_oght-p-pst_le &
 [ ORTH < "used" >,
   SYNSEM [ LKEYS.KEYREL.PRED _used+to_v_modal_rel,
            PHON.ONSET con ] ].

walk_n1 := n_-_c_le &
 [ ORTH < "walk" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_walk_n_1_rel",
            PHON.ONSET con ] ].

walk_over_v1 := v_p_le &
 [ ORTH < "walk" >,
   SYNSEM [ LKEYS [ --COMPKEY _over_p_sel_rel,
                    KEYREL.PRED "_walk_v_over_rel" ],
            PHON.ONSET con ] ].

walk_v1 := v_pp*_dir_le &
 [ ORTH < "walk" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_walk_v_1_rel",
            PHON.ONSET con ] ].

walk_v2 := v_np_noger_le &
 [ ORTH < "walk" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_walk_v_1_rel",
            PHON.ONSET con ] ].

washington_n2 := n_-_pn-abb_le &
 [ ORTH < "WA" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Washington",
            PHON.ONSET con ] ].

we := n_-_pr-we_le &
 [ ORTH < "we" >,
   SYNSEM.PHON.ONSET con ].

we_plus_np := n_np_pr-we_le &
 [ ORTH < "we" >,
   SYNSEM.PHON.ONSET con ].

what1 := n_-_pr-wh_le &
 [ ORTH < "what" >,
   SYNSEM [ LKEYS.KEYREL.PRED thing_rel,
            PHON.ONSET con ] ].

what2 := n_-_pr-fr_le &
 [ ORTH < "what" >,
   SYNSEM [ LKEYS.KEYREL.PRED thing_rel,
            PHON.ONSET con ] ].

what_det := d_-_wh_le &
 [ ORTH < "what" >,
   SYNSEM [ LKEYS.KEYREL.PRED _which_q_rel,
            PHON.ONSET con ] ].

what_det_freerel := d_-_freerel_le &
 [ ORTH < "what" >,
   SYNSEM [ LKEYS.KEYREL.PRED free_relative_q_rel,
            PHON.ONSET con ] ].

when2 := pp_-_i-rel_le &
 [ ORTH < "when" >,
   SYNSEM [ LKEYS [ ALTKEYREL.PRED temp_rel,
                    KEYREL.PRED temp_loc_x_rel ],
            PHON.ONSET con ] ].

when_freerel_np := n_-_pr-fr-wh_le &
 [ ORTH < "when" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED temp_loc_x_rel,
                    KEYREL.PRED temp_rel ],
            PHON.ONSET con ] ].

when_nom := n_-_ad-wh-tm_le &
 [ ORTH < "when" >,
   SYNSEM.PHON.ONSET con ].

when_np_rel := n_-_pr-rel-tm_le &
 [ ORTH < "when" >,
   SYNSEM.PHON.ONSET con ].

when_p1 := p_prd_i_le &
 [ ORTH < "when" >,
   SYNSEM [ LKEYS.KEYREL.PRED temp_loc_x_rel,
            PHON.ONSET con ] ].

when_subord := p_cp_s_le &
 [ ORTH < "when" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_when_x_subord_rel",
            PHON.ONSET con ] ].

when_subord_prd := p_prd_s_le &
 [ ORTH < "when" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_when_x_subord_rel",
            PHON.ONSET con ] ].

whenever_freerel_np := n_-_pr-fr-whever_le &
 [ ORTH < "whenever" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED temp_loc_x_rel,
                    KEYREL.PRED temp_rel ],
            PHON.ONSET con ] ].

whenever_subord_prd := p_prd_s_le &
 [ ORTH < "whenever" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_whenever_x_subord_rel",
            PHON.ONSET con ] ].

where2 := pp_-_i-rel_le &
 [ ORTH < "where" >,
   SYNSEM [ LKEYS [ ALTKEYREL.PRED place_n_rel,
                    KEYREL.PRED loc_nonsp_rel ],
            PHON.ONSET con ] ].

where_freerel_np := n_-_pr-fr-wh_le &
 [ ORTH < "where" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED loc_nonsp_rel,
                    KEYREL.PRED place_n_rel ],
            PHON.ONSET con ] ].

where_nom := n_-_ad-wh-pl_le &
 [ ORTH < "where" >,
   SYNSEM.PHON.ONSET con ].

where_np_rel := n_-_pr-rel-pl_le &
 [ ORTH < "where" >,
   SYNSEM.PHON.ONSET con ].

where_subord_prd := p_prd_s_le &
 [ ORTH < "where" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_where_x_subord_rel",
            PHON.ONSET con ] ].

wherein := pp_-_i-rel_le &
 [ ORTH < "wherein" >,
   SYNSEM [ LKEYS [ ALTKEYREL.PRED place_n_rel,
                    KEYREL.PRED loc_nonsp_rel ],
            PHON.ONSET con ] ].

whether_c_fin := cm_np-vp_i-wh_le &
 [ ORTH < "whether" >,
   SYNSEM.PHON.ONSET con ].

whether_c_inf := cm_vp_wh_le &
 [ ORTH < "whether" >,
   SYNSEM.PHON.ONSET con ].

whether_p1 := p_cp_s_le &
 [ ORTH < "whether" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_whether_x_rel",
            PHON.ONSET con ] ].

which1 := d_-_prt-unsp_le &
 [ ORTH < "which" >,
   SYNSEM [ LKEYS.KEYREL.PRED _which_q_rel,
            PHON.ONSET con ] ].

which_r := n_-_pr-rel-what_le &
 [ ORTH < "which" >,
   SYNSEM.PHON.ONSET con ].

while := p_cp_s_le &
 [ ORTH < "while" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_while_x_rel",
            PHON.ONSET con ] ].

while_n1 := n_-_c-sg-ifl_le &
 [ ORTH < "while" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_while_n_1_rel",
            PHON.ONSET con ] ].

while_prd := p_prd_s_le &
 [ ORTH < "while" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_while_x_rel",
            PHON.ONSET con ] ].

who1 := n_-_pr-who_le &
 [ ORTH < "who" >,
   SYNSEM [ LKEYS.KEYREL.PRED person_rel,
            PHON.ONSET con ] ].

who2 := n_-_pr-rel-who_le &
 [ ORTH < "who" >,
   SYNSEM.PHON.ONSET con ].

whom1 := n_-_pr-wh-acc_le &
 [ ORTH < "whom" >,
   SYNSEM [ LKEYS.KEYREL.PRED person_rel,
            PHON.ONSET con ] ].

whom2 := n_-_pr-rel-acc_le &
 [ ORTH < "whom" >,
   SYNSEM.PHON.ONSET con ].

whose_1 := d_-_wh-poss_le &
 [ ORTH < "whose" >,
   SYNSEM.PHON.ONSET con ].

whose_2 := d_-_poss-rel_le &
 [ ORTH < "whose" >,
   SYNSEM.PHON.ONSET con ].

will_aux_neg_1 := v_vp_will-n_le &
 [ ORTH < "won't" >,
   SYNSEM [ LKEYS.KEYREL.PRED _will_v_aux_rel,
            PHON.ONSET con ] ].

will_aux_pos := v_vp_will-p_le &
 [ ORTH < "will" >,
   SYNSEM [ LKEYS.KEYREL.PRED _will_v_aux_rel,
            PHON.ONSET con ] ].

will_aux_pos_cx := v_vp_will-p-cx_le &
 [ ORTH < "ll" >,
   SYNSEM [ LKEYS.KEYREL.PRED _will_v_aux_rel,
            PHON.ONSET con ] ].

will_aux_pos_cx_2 := v_vp_will-p-cx_le &
 [ ORTH < "'ll" >,
   SYNSEM [ LKEYS.KEYREL.PRED _will_v_aux_rel,
            PHON.ONSET con ] ].

will_n1 := n_-_c-ed-nocnh_le &
 [ ORTH < "will" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_will_n_1_rel",
            PHON.ONSET con ] ].

will_to_v1 := v_np-pp_e_le &
 [ ORTH < "will" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_will_v_to_rel" ],
            PHON.ONSET con ] ].

win_n1 := n_-_c_le &
 [ ORTH < "win" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_win_n_1_rel",
            PHON.ONSET con ] ].

win_v1 := v_np*_le &
 [ ORTH < "win" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_win_v_1_rel",
            PHON.ONSET con ] ].

with_p := p_np_i_le &
 [ ORTH < "with" >,
   SYNSEM [ LKEYS.KEYREL.PRED _with_p_rel,
            PHON.ONSET con ] ].

with_prtcl := p_np_ptcl_le &
 [ ORTH < "with" >,
   SYNSEM [ LKEYS.KEYREL.PRED _with_p_sel_rel,
            PHON.ONSET con ] ].

with_subord := p_cp_s-ncop_le &
 [ ORTH < "with" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_with_x_subord_rel",
            PHON.ONSET con ] ].

without := p_np_i_le &
 [ ORTH < "without" >,
   SYNSEM [ LKEYS.KEYREL.PRED _without_p_rel,
            PHON.ONSET con ] ].

without_nbar := p_nb_i_le &
 [ ORTH < "without" >,
   SYNSEM [ LKEYS.KEYREL.PRED _without_p_rel,
            PHON.ONSET con ] ].

without_prtcl := p_np_ptcl_le &
 [ ORTH < "without" >,
   SYNSEM [ LKEYS.KEYREL.PRED _without_p_sel_rel,
            PHON.ONSET con ] ].

woman1 := n_-_c_le &
 [ ORTH < "woman" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_woman_n_1_rel",
            PHON.ONSET con ] ].

wonder_about_v1 := v_pp_e_le &
 [ ORTH < "wonder" >,
   SYNSEM [ LKEYS [ --COMPKEY _about_p_sel_rel,
                    KEYREL.PRED "_wonder_v_about_rel" ],
            PHON.ONSET con ] ].

wonder_at_v1 := v_pp_e_le &
 [ ORTH < "wonder" >,
   SYNSEM [ LKEYS [ --COMPKEY _at_p_sel_rel,
                    KEYREL.PRED "_wonder_v_at_rel" ],
            PHON.ONSET con ] ].

wonder_n1 := n_-_mc_le &
 [ ORTH < "wonder" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wonder_n_1_rel",
            PHON.ONSET con ] ].

wonder_v1 := v_cp_fin-inf-q_le &
 [ ORTH < "wonder" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wonder_v_1_rel",
            PHON.ONSET con ] ].

wonder_v2 := v_-_le &
 [ ORTH < "wonder" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wonder_v_1_rel",
            PHON.ONSET con ] ].

work_in_v1 := v_p-np_le &
 [ ORTH < "work" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_work_v_in_rel" ],
            PHON.ONSET con ] ].

work_n1 := n_-_mc_le &
 [ ORTH < "work" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_work_n_1_rel",
            PHON.ONSET con ] ].

work_on_v1 := v_pp_e_le &
 [ ORTH < "work" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_work_v_on_rel" ],
            PHON.ONSET con ] ].

work_out_v1 := v_p-np_le &
 [ ORTH < "work" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_work_v_out_rel" ],
            PHON.ONSET con ] ].

work_out_v2 := v_p_le &
 [ ORTH < "work" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_work_v_out_rel" ],
            PHON.ONSET con ] ].

work_through_v1 := v_pp_e_le &
 [ ORTH < "work" >,
   SYNSEM [ LKEYS [ --COMPKEY _through_p_sel_rel,
                    KEYREL.PRED "_work_v_through_rel" ],
            PHON.ONSET con ] ].

work_v1 := v_np*_le &
 [ ORTH < "work" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_work_v_1_rel",
            PHON.ONSET con ] ].

working_a1 := aj_-_i-att_le &
 [ ORTH < "working" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_working_a_1_rel",
            PHON.ONSET con ] ].

workings_n1 := n_-_c-pl-nocnh_le &
 [ ORTH < "working" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_workings_n_1_rel",
            PHON.ONSET con ] ].

works_n1 := n_-_c-sg-nocnh_le &
 [ ORTH < "works" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_works_n_1_rel",
            PHON.ONSET con ] ].

works_n2 := n_-_c-pl-cpd_le &
 [ ORTH < "works" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_works_n_1_rel",
            PHON.ONSET con ] ].

would-be_a2 := aj_-_i-att_le &
 [ ORTH < "would", "be" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_would-be_a_1_rel",
            PHON.ONSET con ] ].

would_aux_pos := v_vp_mdl-p-unsp_le &
 [ ORTH < "would" >,
   SYNSEM [ LKEYS.KEYREL.PRED _would_v_modal_rel,
            PHON.ONSET con ] ].

would_aux_pos_cx := v_vp_mdl-p-cx_le &
 [ ORTH < "d" >,
   SYNSEM [ LKEYS.KEYREL.PRED _would_v_modal_rel,
            PHON.ONSET con ] ].

would_aux_pos_cx_2 := v_vp_mdl-p-cx_le &
 [ ORTH < "'d" >,
   SYNSEM [ LKEYS.KEYREL.PRED _would_v_modal_rel,
            PHON.ONSET con ] ].

x_to_y_adj_- := aj_pp_i-x-to-y_le &
 [ ORTH < "-" >,
   SYNSEM.PHON.ONSET con ].

x_to_y_adj_to := aj_pp_i-x-to-y_le &
 [ ORTH < "to" >,
   SYNSEM.PHON.ONSET con ].

x_to_y_nbar_hyphen := n_nb_x-to-y_le &
 [ ORTH < "-" >,
   SYNSEM.PHON.ONSET con ].

x_to_y_nbar_to := n_nb_x-to-y_le &
 [ ORTH < "to" >,
   SYNSEM.PHON.ONSET con ].

x_to_y_np_pl_- := n_np_x-to-y-pl_le &
 [ ORTH < "-" >,
   SYNSEM.PHON.ONSET con ].

x_to_y_np_pl_to := n_np_x-to-y-pl_le &
 [ ORTH < "to" >,
   SYNSEM.PHON.ONSET con ].

x_to_y_np_sg_- := n_np_x-to-y-sg_le &
 [ ORTH < "-" >,
   SYNSEM.PHON.ONSET con ].

x_to_y_np_sg_to := n_np_x-to-y-sg_le &
 [ ORTH < "to" >,
   SYNSEM.PHON.ONSET con ].

x_to_y_np_until := n_np_x-to-y-sg_le &
 [ ORTH < "until" >,
   SYNSEM.PHON.ONSET voc ].

year_n1 := n_-_c-year_le &
 [ ORTH < "year" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_year_n_1_rel",
            PHON.ONSET con ] ].

you := n_-_pr-you_le &
 [ ORTH < "you" >,
   SYNSEM.PHON.ONSET con ].

you_plus_np := n_np_pr-you_le &
 [ ORTH < "you" >,
   SYNSEM.PHON.ONSET con ].

yourselves := n_-_pr-yourslves_le &
 [ ORTH < "yourselves" >,
   SYNSEM.PHON.ONSET con ].

yourselves_adv := av_-_pr-yrslvs_le &
 [ ORTH < "yourselves" >,
   SYNSEM.PHON.ONSET con ].
