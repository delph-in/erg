
a_det := det_sg_nomod_a_le &
 [ STEM < "a" >,
   SYNSEM [ LKEYS.KEYREL.PRED _a_q_rel,
            PHON.ONSET voc ] ].

a_det_2 := det_sg_nomod_a_le &
 [ STEM < "_a" >,
   SYNSEM [ LKEYS.KEYREL.PRED _a_q_rel,
            PHON.ONSET voc ] ].

a_np1 := n_proper_sg_le &
 [ STEM < "_a" >,
   SYNSEM [ LKEYS.KEYREL.CARG "a",
            PHON.ONSET voc ] ].

a_one_adj := adj_one_prd_le &
 [ STEM < "a" >,
   SYNSEM.PHON.ONSET voc ].

a_one_adj_2 := adj_one_prd_le &
 [ STEM < "_a" >,
   SYNSEM.PHON.ONSET voc ].

a_one_fract := adj_one_fract_a_le &
 [ STEM < "a" >,
   SYNSEM.PHON.ONSET voc ].

a_per_p := p_nbar_comp_nmod_le &
 [ STEM < "a" >,
   SYNSEM [ LKEYS.KEYREL.PRED _a_p_per_rel,
            PHON.ONSET voc ] ].

a_pred_p1 := pred_a_prep_le &
 [ STEM < "a" >,
   SYNSEM.PHON.ONSET voc ].

abrams := n_proper_le &
 [ STEM < "abrams" >,
   SYNSEM [ LKEYS.KEYREL.CARG "abrams",
            PHON.ONSET voc ] ].

after2 := p_subconj_le &
 [ STEM < "after" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_after_x_h_rel",
            PHON.ONSET voc ] ].

after_conj := conj_complex_after_le &
 [ STEM < "after" >,
   SYNSEM.PHON.ONSET voc ].

after_p := p_le &
 [ STEM < "after" >,
   SYNSEM [ LKEYS.KEYREL.PRED _after_p_rel,
            PHON.ONSET voc ] ].

after_pp := pp_nmod_temp_le &
 [ STEM < "after" >,
   SYNSEM [ LKEYS.KEYREL.PRED _after_p_rel,
            PHON.ONSET voc ] ].

after_prtcl := p_prtcl_le &
 [ STEM < "after" >,
   SYNSEM [ LKEYS.KEYREL.PRED _after_p_sel_rel,
            PHON.ONSET voc ] ].

all := det_part_pl_mass_le &
 [ STEM < "all" >,
   SYNSEM [ LKEYS.KEYREL.PRED _all_q_rel,
            PHON.ONSET voc ] ].

all_adv1 := adv_vp_aux_le &
 [ STEM < "all" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_all_a_rel",
            PHON.ONSET voc ] ].

all_deg := adv_degree_spec_div_le &
 [ STEM < "all" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_all_x_deg_rel",
            PHON.ONSET voc ] ].

all_det_adj := det_all_temp_le &
 [ STEM < "all" >,
   SYNSEM [ LKEYS.ALTKEYREL.PRED _all_a_rel,
            PHON.ONSET voc ] ].

all_pn := n_part_npcomp_agr_le &
 [ STEM < "all" >,
   SYNSEM [ LKEYS.ALTKEYREL.PRED _all_q_rel,
            PHON.ONSET voc ] ].

almost_adv := adv_vp_pre_le &
 [ STEM < "almost" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_almost_a_rel",
            PHON.ONSET voc ] ].

almost_deg := adv_degree_spec_jov_le &
 [ STEM < "almost" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_almost_x_deg_rel",
            PHON.ONSET voc ] ].

almost_much_deg := adv_degree_spec_m_le &
 [ STEM < "almost" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_almost_x_m_rel",
            PHON.ONSET voc ] ].

although := p_subconj_le &
 [ STEM < "although" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_although_x_rel",
            PHON.ONSET voc ] ].

although_prd := p_subconj_prd_le &
 [ STEM < "although" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_although_x_rel",
            PHON.ONSET voc ] ].

am_temp_2 := xp_am_pm_le &
 [ STEM < "am" >,
   SYNSEM [ LKEYS.KEYREL [ CARG "am_time",
                             PRED "_am_x_rel" ],
            PHON.ONSET voc ] ].

an_det := det_sg_nomod_an_le &
 [ STEM < "an" >,
   SYNSEM [ LKEYS.KEYREL.PRED _a_q_rel,
            PHON.ONSET voc ] ].

an_one_adj := adj_one_prd_le &
 [ STEM < "an" >,
   SYNSEM.PHON.ONSET voc ].

an_one_fract := adj_one_fract_an_le &
 [ STEM < "an" >,
   SYNSEM.PHON.ONSET voc ].

an_per_p := p_nbar_comp_nmod_le &
 [ STEM < "an" >,
   SYNSEM [ LKEYS.KEYREL.PRED _a_p_per_rel,
            PHON.ONSET voc ] ].

an_pred_p1 := pred_an_prep_le &
 [ STEM < "an" >,
   SYNSEM.PHON.ONSET voc ].

and_c_prop := comp_inf_and_le &
 [ STEM < "and" >,
   SYNSEM.PHON.ONSET voc ].

and_conj := conj_complex_and_le &
 [ STEM < "and" >,
   SYNSEM.PHON.ONSET voc ].

and_conj_2 := conj_complex_and_both_le &
 [ STEM < "and" >,
   SYNSEM.PHON.ONSET voc ].

and_fract := conj_and_fract_le &
 [ STEM < "and" >,
   SYNSEM.PHON.ONSET voc ].

and_num := conj_and_num_le &
 [ STEM < "and" >,
   SYNSEM.PHON.ONSET voc ].

and_root := adv_s_pre_word_root_le &
 [ STEM < "and" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_and_a_rel",
            PHON.ONSET voc ] ].

and_so_1 := conj_complex_and_so_le &
 [ STEM < "and", "so" >,
   SYNSEM.PHON.ONSET voc ].

any_deg := adv_degree_spec_nospec_le &
 [ STEM < "any" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_any_x_deg_rel",
            PHON.ONSET voc ] ].

any_det := det_part_le &
 [ STEM < "any" >,
   SYNSEM [ LKEYS.KEYREL.PRED _any_q_rel,
            PHON.ONSET voc ] ].

anyone := n_generic_pro_le &
 [ STEM < "anyone" >,
   SYNSEM [ LKEYS [ ALTKEYREL.PRED any_q_rel,
                    KEYREL.PRED person_rel ],
            PHON.ONSET voc ] ].

apostrophe_s_2_lex := n_poss_clitic_le &
 [ STEM < "'s" >,
   SYNSEM.PHON.ONSET con ].

apostrophe_s_3_lex := n_poss_clitic_pl_le &
 [ STEM < "'" >,
   SYNSEM.PHON.ONSET con ].

appeal_n1 := n_mass_count_le &
 [ STEM < "appeal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_appeal_n_rel",
            PHON.ONSET voc ] ].

appeal_to_v1 := v_empty_prep_intrans_le &
 [ STEM < "appeal" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_appeal_v_to_rel" ],
            PHON.ONSET voc ] ].

appeal_v1 := v_oeq_pp_inf_le &
 [ STEM < "appeal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_appeal_v_1_rel",
            PHON.ONSET voc ] ].

appeal_v2 := v_np*_trans_le &
 [ STEM < "appeal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_appeal_v_1_rel",
            PHON.ONSET voc ] ].

appear_v1 := v_pp_inf_ssr_le &
 [ STEM < "appear" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_appear_v_rel",
            PHON.ONSET voc ] ].

appear_v2 := v_prdp_pp_seq_adj_le &
 [ STEM < "appear" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_appear_v_rel",
            PHON.ONSET voc ] ].

appear_v3 := v_expl_it_subj_pp_cp_le &
 [ STEM < "appear" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_appear_v_rel",
            PHON.ONSET voc ] ].

appear_v4 := v_unerg_le &
 [ STEM < "appear" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_appear_v_rel",
            PHON.ONSET voc ] ].

applicant_n1 := n_intr_le &
 [ STEM < "applicant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_applicant_n_rel",
            PHON.ONSET voc ] ].

approve_of_v1 := v_empty_prep_intrans_le &
 [ STEM < "approve" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_approve_v_of_rel" ],
            PHON.ONSET voc ] ].

approve_v1 := v_np*_trans_le &
 [ STEM < "approve" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_approve_v_1_rel",
            PHON.ONSET voc ] ].

approved_isect := adj_intrans_le &
 [ STEM < "approved" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_approved_a_rel",
            PHON.ONSET voc ] ].

arrive_v1 := v_unerg_le &
 [ STEM < "arrive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_arrive_v_rel",
            PHON.ONSET voc ] ].

as_comp_prep := p_noslash_prtcl_le &
 [ STEM < "as" >,
   SYNSEM [ LKEYS.KEYREL.PRED _as_p_comp_rel,
            PHON.ONSET voc ] ].

as_comp_prep_nc := p_noslash_prtcl_ncomp_le &
 [ STEM < "as" >,
   SYNSEM [ LKEYS.KEYREL.PRED _as_p_comp_rel,
            PHON.ONSET voc ] ].

as_eq_deg := as_degree_spec_le &
 [ STEM < "as" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_as_x_deg_rel",
            PHON.ONSET voc ] ].

as_eq_nc_deg := comp_degree_spec_nc_le &
 [ STEM < "as" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_as_x_deg_rel",
            PHON.ONSET voc ] ].

as_it_adj_p := p_as_adj_le &
 [ STEM < "as" >,
   SYNSEM [ LKEYS.KEYREL.PRED _as_p_comp_rel,
            PHON.ONSET voc ] ].

as_nbar := p_nbar_comp_nomod_le &
 [ STEM < "as" >,
   SYNSEM [ LKEYS [ --COMPKEY non_temp_nom_rel,
                    KEYREL.PRED _as_p_nbar_rel ],
            PHON.ONSET con ] ].

as_p1 := p_noger_le &
 [ STEM < "as" >,
   SYNSEM [ LKEYS.KEYREL.PRED _as_p_rel,
            PHON.ONSET voc ] ].

as_prd := p_subconj_prd_v_or_p_le &
 [ STEM < "as" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_as_x_prd_rel",
            PHON.ONSET voc ] ].

as_prdp_p1 := p_prdp_vp_le &
 [ STEM < "as" >,
   SYNSEM [ LKEYS.KEYREL.PRED _as_p_rel,
            PHON.ONSET voc ] ].

as_prdp_p2 := p_prdp_sel_le &
 [ STEM < "as" >,
   SYNSEM [ LKEYS.KEYREL.PRED _as_p_sel_rel,
            PHON.ONSET voc ] ].

as_prtcl := p_prtcl_le &
 [ STEM < "as" >,
   SYNSEM [ LKEYS.KEYREL.PRED _as_p_sel_rel,
            PHON.ONSET voc ] ].

as_subord := p_subconj_le &
 [ STEM < "as" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_as_x_subord_rel",
            PHON.ONSET voc ] ].

at := p_reg_le &
 [ STEM < "at" >,
   SYNSEM [ LKEYS.KEYREL.PRED _at_p_rel,
            PHON.ONSET voc ] ].

at_prtcl := p_prtcl_le &
 [ STEM < "at" >,
   SYNSEM [ LKEYS.KEYREL.PRED _at_p_sel_rel,
            PHON.ONSET voc ] ].

at_temp := p_temp_le &
 [ STEM < "at" >,
   SYNSEM [ LKEYS [ --COMPKEY hour_or_time_rel,
                    KEYREL.PRED _at_p_temp_rel ],
            PHON.ONSET voc ] ].

bang_pct := punct_bang_le &
 [ STEM < "!" >,
   SYNSEM.PHON.ONSET onset ].

be_c_am := vc_prd_am_le &
 [ STEM < "am" >,
   SYNSEM.PHON.ONSET voc ].

be_c_am_neg_1 := vc_prd_am_neg_le &
 [ STEM < "aren't" >,
   SYNSEM.PHON.ONSET voc ].

be_c_are := vc_prd_are_le &
 [ STEM < "are" >,
   SYNSEM.PHON.ONSET voc ].

be_c_are_neg_1 := vc_prd_are_neg_le &
 [ STEM < "aren't" >,
   SYNSEM.PHON.ONSET voc ].

be_c_be := vc_prd_be_le &
 [ STEM < "be" >,
   SYNSEM.PHON.ONSET con ].

be_c_been := vc_prd_been_le &
 [ STEM < "been" >,
   SYNSEM.PHON.ONSET con ].

be_c_being := vc_prd_being_le &
 [ STEM < "being" >,
   SYNSEM.PHON.ONSET con ].

be_c_is := vc_prd_is_le &
 [ STEM < "is" >,
   SYNSEM.PHON.ONSET voc ].

be_c_is_cx_2 := vc_prd_is_cx_le &
 [ STEM < "'s" >,
   SYNSEM.PHON.ONSET con ].

be_c_is_neg_1 := vc_prd_is_neg_le &
 [ STEM < "isn't" >,
   SYNSEM.PHON.ONSET voc ].

be_c_was := vc_prd_was_le &
 [ STEM < "was" >,
   SYNSEM.PHON.ONSET con ].

be_c_was_neg_1 := vc_prd_was_neg_le &
 [ STEM < "wasn't" >,
   SYNSEM.PHON.ONSET con ].

be_c_was_neg_subj_1 := vc_prd_was_neg_subj_le &
 [ STEM < "wasn't" >,
   SYNSEM.PHON.ONSET con ].

be_c_was_subj := vc_prd_was_subj_le &
 [ STEM < "was" >,
   SYNSEM.PHON.ONSET con ].

be_c_were := vc_prd_were_le &
 [ STEM < "were" >,
   SYNSEM.PHON.ONSET con ].

be_c_were_neg_1 := vc_prd_were_neg_le &
 [ STEM < "weren't" >,
   SYNSEM.PHON.ONSET con ].

be_c_were_neg_subj_1 := vc_prd_were_neg_subj_le &
 [ STEM < "weren't" >,
   SYNSEM.PHON.ONSET con ].

be_c_were_subj := vc_prd_were_subj_le &
 [ STEM < "were" >,
   SYNSEM.PHON.ONSET con ].

be_id_am := vc_id_am_le &
 [ STEM < "am" >,
   SYNSEM.PHON.ONSET voc ].

be_id_am_neg_1 := vc_id_am_neg_le &
 [ STEM < "aren't" >,
   SYNSEM.PHON.ONSET voc ].

be_id_are := vc_id_are_le &
 [ STEM < "are" >,
   SYNSEM.PHON.ONSET voc ].

be_id_are_neg_1 := vc_id_are_neg_le &
 [ STEM < "aren't" >,
   SYNSEM.PHON.ONSET voc ].

be_id_be := vc_id_be_le &
 [ STEM < "be" >,
   SYNSEM.PHON.ONSET con ].

be_id_been := vc_id_been_le &
 [ STEM < "been" >,
   SYNSEM.PHON.ONSET con ].

be_id_being := vc_id_being_le &
 [ STEM < "being" >,
   SYNSEM.PHON.ONSET con ].

be_id_is := vc_id_is_le &
 [ STEM < "is" >,
   SYNSEM.PHON.ONSET voc ].

be_id_is_cx_2 := vc_id_is_cx_le &
 [ STEM < "'s" >,
   SYNSEM.PHON.ONSET con ].

be_id_is_neg_1 := vc_id_is_neg_le &
 [ STEM < "isn't" >,
   SYNSEM.PHON.ONSET voc ].

be_id_was := vc_id_was_le &
 [ STEM < "was" >,
   SYNSEM.PHON.ONSET con ].

be_id_was_neg_1 := vc_id_was_neg_le &
 [ STEM < "wasn't" >,
   SYNSEM.PHON.ONSET con ].

be_id_was_neg_subj_1 := vc_id_was_neg_subj_le &
 [ STEM < "wasn't" >,
   SYNSEM.PHON.ONSET con ].

be_id_was_subj := vc_id_was_subj_le &
 [ STEM < "was" >,
   SYNSEM.PHON.ONSET con ].

be_id_were := vc_id_were_le &
 [ STEM < "were" >,
   SYNSEM.PHON.ONSET con ].

be_id_were_neg_1 := vc_id_were_neg_le &
 [ STEM < "weren't" >,
   SYNSEM.PHON.ONSET con ].

be_id_were_neg_subj_1 := vc_id_were_neg_subj_le &
 [ STEM < "weren't" >,
   SYNSEM.PHON.ONSET con ].

be_id_were_subj := vc_id_were_subj_le &
 [ STEM < "were" >,
   SYNSEM.PHON.ONSET con ].

be_inv_are := v_loc_inv_are_le &
 [ STEM < "are" >,
   SYNSEM.PHON.ONSET voc ].

be_inv_is := v_loc_inv_is_le &
 [ STEM < "is" >,
   SYNSEM.PHON.ONSET voc ].

be_inv_was := v_loc_inv_was_le &
 [ STEM < "was" >,
   SYNSEM.PHON.ONSET con ].

be_inv_were := v_loc_inv_were_le &
 [ STEM < "were" >,
   SYNSEM.PHON.ONSET con ].

be_it_cop_are := vc_it_are_le &
 [ STEM < "are" >,
   SYNSEM.PHON.ONSET voc ].

be_it_cop_are_neg_1 := vc_it_are_neg_le &
 [ STEM < "aren't" >,
   SYNSEM.PHON.ONSET voc ].

be_it_cop_be := vc_it_be_le &
 [ STEM < "be" >,
   SYNSEM.PHON.ONSET con ].

be_it_cop_been := vc_it_been_le &
 [ STEM < "been" >,
   SYNSEM.PHON.ONSET con ].

be_it_cop_being := vc_it_being_le &
 [ STEM < "being" >,
   SYNSEM.PHON.ONSET con ].

be_it_cop_is := vc_it_is_le &
 [ STEM < "is" >,
   SYNSEM.PHON.ONSET voc ].

be_it_cop_is_cx_2 := vc_it_s_cx_le &
 [ STEM < "'s" >,
   SYNSEM.PHON.ONSET con ].

be_it_cop_is_neg_1 := vc_it_is_neg_le &
 [ STEM < "isn't" >,
   SYNSEM.PHON.ONSET voc ].

be_it_cop_was := vc_it_was_le &
 [ STEM < "was" >,
   SYNSEM.PHON.ONSET con ].

be_it_cop_was_neg_1 := vc_it_was_neg_le &
 [ STEM < "wasn't" >,
   SYNSEM.PHON.ONSET con ].

be_it_cop_was_neg_subj_1 := vc_it_was_neg_subj_le &
 [ STEM < "wasn't" >,
   SYNSEM.PHON.ONSET con ].

be_it_cop_was_subj := vc_it_was_subj_le &
 [ STEM < "was" >,
   SYNSEM.PHON.ONSET con ].

be_it_cop_were := vc_it_were_le &
 [ STEM < "were" >,
   SYNSEM.PHON.ONSET con ].

be_it_cop_were_neg_1 := vc_it_were_neg_le &
 [ STEM < "weren't" >,
   SYNSEM.PHON.ONSET con ].

be_it_cop_were_neg_subj_1 := vc_it_were_neg_subj_le &
 [ STEM < "weren't" >,
   SYNSEM.PHON.ONSET con ].

be_it_cop_were_subj := vc_it_were_subj_le &
 [ STEM < "were" >,
   SYNSEM.PHON.ONSET con ].

be_th_cop_are := vc_there_are_le &
 [ STEM < "are" >,
   SYNSEM.PHON.ONSET voc ].

be_th_cop_are_neg_1 := vc_there_are_neg_le &
 [ STEM < "aren't" >,
   SYNSEM.PHON.ONSET voc ].

be_th_cop_be := vc_there_be_le &
 [ STEM < "be" >,
   SYNSEM.PHON.ONSET con ].

be_th_cop_been := vc_there_been_le &
 [ STEM < "been" >,
   SYNSEM.PHON.ONSET con ].

be_th_cop_being := vc_there_being_le &
 [ STEM < "being" >,
   SYNSEM.PHON.ONSET con ].

be_th_cop_is := vc_there_is_le &
 [ STEM < "is" >,
   SYNSEM.PHON.ONSET voc ].

be_th_cop_is_cx_2 := vc_there_s_cx_le &
 [ STEM < "'s" >,
   SYNSEM.PHON.ONSET con ].

be_th_cop_is_neg_1 := vc_there_is_neg_le &
 [ STEM < "isn't" >,
   SYNSEM.PHON.ONSET voc ].

be_th_cop_was := vc_there_was_le &
 [ STEM < "was" >,
   SYNSEM.PHON.ONSET con ].

be_th_cop_was_neg_1 := vc_there_was_neg_le &
 [ STEM < "wasn't" >,
   SYNSEM.PHON.ONSET con ].

be_th_cop_was_neg_subj_1 := vc_there_was_neg_subj_le &
 [ STEM < "wasn't" >,
   SYNSEM.PHON.ONSET con ].

be_th_cop_was_subj := vc_there_was_subj_le &
 [ STEM < "was" >,
   SYNSEM.PHON.ONSET con ].

be_th_cop_were := vc_there_were_le &
 [ STEM < "were" >,
   SYNSEM.PHON.ONSET con ].

be_th_cop_were_neg_1 := vc_there_were_neg_le &
 [ STEM < "weren't" >,
   SYNSEM.PHON.ONSET con ].

be_th_cop_were_neg_subj_1 := vc_there_were_neg_subj_le &
 [ STEM < "weren't" >,
   SYNSEM.PHON.ONSET con ].

be_th_cop_were_subj := vc_there_were_subj_le &
 [ STEM < "were" >,
   SYNSEM.PHON.ONSET con ].

become_of_v1 := v_empty_prep_intrans_le &
 [ STEM < "become" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_become_v_of_rel" ],
            PHON.ONSET con ] ].

become_v1 := v_prdp_pp_seq_adj_le &
 [ STEM < "become" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_become_v_1_rel",
            PHON.ONSET con ] ].

become_v2 := v_np_non_trans_id_le &
 [ STEM < "become" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_become_v_id_rel",
            PHON.ONSET con ] ].

bee_n1 := n_intr_le &
 [ STEM < "bee" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bee_n_rel",
            PHON.ONSET con ] ].

before2 := p_subconj_le &
 [ STEM < "before" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_before_x_h_rel",
            PHON.ONSET con ] ].

before3 := p_temp_spr_le &
 [ STEM < "before" >,
   SYNSEM [ LKEYS.KEYREL.PRED _before_p_rel,
            PHON.ONSET con ] ].

before_adv1 := pp_le &
 [ STEM < "before" >,
   SYNSEM [ LKEYS.KEYREL.PRED _before_p_rel,
            PHON.ONSET con ] ].

before_prtcl := p_prtcl_le &
 [ STEM < "before" >,
   SYNSEM [ LKEYS.KEYREL.PRED _before_p_sel_rel,
            PHON.ONSET con ] ].

being_n1 := n_intr_le &
 [ STEM < "being" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_being_n_rel",
            PHON.ONSET con ] ].

belief_n1 := n_cpcomp_fin_le &
 [ STEM < "belief" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_belief_n_1_rel",
            PHON.ONSET con ] ].

belief_n2 := n_ppcomp_le &
 [ STEM < "belief" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_belief_n_in_rel" ],
            PHON.ONSET con ] ].

believe_in_v1 := v_empty_prep_intrans_le &
 [ STEM < "believe" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_believe_v_in_rel" ],
            PHON.ONSET con ] ].

believe_v1 := v_np*_trans_le &
 [ STEM < "believe" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_believe_v_1_rel",
            PHON.ONSET con ] ].

believe_v3 := v_cp_prop_non_trans_le &
 [ STEM < "believe" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_believe_v_1_rel",
            PHON.ONSET con ] ].

believe_v4 := v_sor_le &
 [ STEM < "believe" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_believe_v_1_rel",
            PHON.ONSET con ] ].

bet_n1 := n_intr_le &
 [ STEM < "bet" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bet_n_rel",
            PHON.ONSET con ] ].

bet_on_v1 := v_empty_prep_trans*_le &
 [ STEM < "bet" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_bet_v_rel" ],
            PHON.ONSET con ] ].

bet_v1 := v_np_np_cp_le &
 [ STEM < "bet" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bet_v_rel",
            PHON.ONSET con ] ].

better_a1 := adj_comp_le &
 [ STEM < "better" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_good_a_rel",
            PHON.ONSET con ] ].

better_adv1 := adv_vp_post_le &
 [ STEM < "better" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_better_a_rel",
            PHON.ONSET con ] ].

better_aux := va_modal_pos_noninv_le &
 [ STEM < "better" >,
   SYNSEM [ LKEYS.KEYREL.PRED _had+better_v_rel,
            PHON.ONSET con ] ].

bob := n_proper_le &
 [ STEM < "bob" >,
   SYNSEM [ LKEYS.KEYREL.CARG "bob",
            PHON.ONSET con ] ].

bob_n2 := n_intr_le &
 [ STEM < "bob" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bob_n_rel",
            PHON.ONSET con ] ].

bob_v1 := v_np_trans_le &
 [ STEM < "bob" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bob_v_cause_rel",
            PHON.ONSET con ] ].

bob_v2 := v_unacc_le &
 [ STEM < "bob" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bob_v_1_rel",
            PHON.ONSET con ] ].

bookcase_n1 := n_intr_le &
 [ STEM < "bookcase" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bookcase_n_rel",
            PHON.ONSET con ] ].

both := det_part_pl_both_le &
 [ STEM < "both" >,
   SYNSEM [ LKEYS.KEYREL.PRED _both_q_rel,
            PHON.ONSET con ] ].

both_conj := conj_atomic_both_le &
 [ STEM < "both" >,
   SYNSEM.PHON.ONSET con ].

both_pn := n_part_npcomp_noagr_le &
 [ STEM < "both" >,
   SYNSEM [ LKEYS.ALTKEYREL.PRED _both_q_rel,
            PHON.ONSET con ] ].

browne := n_proper_le &
 [ STEM < "browne" >,
   SYNSEM [ LKEYS.KEYREL.CARG "browne",
            PHON.ONSET con ] ].

but_adv1 := adv_s_pre_word_root_le &
 [ STEM < "but" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_but_a_rel",
            PHON.ONSET con ] ].

but_c_prop := comp_inf_but_le &
 [ STEM < "but" >,
   SYNSEM.PHON.ONSET con ].

but_conj := conj_complex_but_le &
 [ STEM < "but" >,
   SYNSEM.PHON.ONSET con ].

but_except_p := p_nospec_nogap_le &
 [ STEM < "but" >,
   SYNSEM [ LKEYS.KEYREL.PRED _but_p_except_rel,
            PHON.ONSET con ] ].

by_adv := adv_int_vp_post_le &
 [ STEM < "by" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_by_p_rel",
            PHON.ONSET con ] ].

by_means := p_nbar_comp_le &
 [ STEM < "by" >,
   SYNSEM [ LKEYS [ --COMPKEY non_temp_nom_rel,
                    KEYREL.PRED _by_p_rel ],
            PHON.ONSET con ] ].

by_means_ger := p_gercomp_le &
 [ STEM < "by" >,
   SYNSEM [ LKEYS.KEYREL.PRED _by_p_rel,
            PHON.ONSET con ] ].

by_p := p_reg_degsp_le &
 [ STEM < "by" >,
   SYNSEM [ LKEYS.KEYREL.PRED _by_p_rel,
            PHON.ONSET con ] ].

by_pass_p := p_prtcl_le &
 [ STEM < "by" >,
   SYNSEM [ LKEYS [ --COMPKEY non_temp_nom_rel,
                    KEYREL.PRED _by_p_cm_rel ],
            PHON.ONSET con ] ].

by_prtcl := p_prtcl_le &
 [ STEM < "by" >,
   SYNSEM [ LKEYS.KEYREL.PRED _by_p_sel_rel,
            PHON.ONSET con ] ].

by_temp_p := p_temp_vmod_le &
 [ STEM < "by" >,
   SYNSEM [ LKEYS [ --COMPKEY temp_abstr_rel,
                    KEYREL.PRED _by_p_temp_rel ],
            PHON.ONSET con ] ].

can_aux_neg2 := va_modal_neg_le &
 [ STEM < "cannot" >,
   SYNSEM [ LKEYS.KEYREL.PRED _can_v_rel,
            PHON.ONSET con ] ].

can_aux_neg_1 := va_modal_neg_le &
 [ STEM < "can't" >,
   SYNSEM [ LKEYS.KEYREL.PRED _can_v_rel,
            PHON.ONSET con ] ].

can_aux_pos := va_modal_pos_le &
 [ STEM < "can" >,
   SYNSEM [ LKEYS.KEYREL.PRED _can_v_rel,
            PHON.ONSET con ] ].

can_n1 := n_intr_le &
 [ STEM < "can" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_can_n_rel",
            PHON.ONSET con ] ].

can_v1 := v_np_trans_le &
 [ STEM < "can" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_can_v_1_rel",
            PHON.ONSET con ] ].

cause_n1 := n_ppof_le &
 [ STEM < "cause" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cause_n_rel",
            PHON.ONSET con ] ].

cause_v1 := v_obj_equi_le &
 [ STEM < "cause" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cause_v_rel",
            PHON.ONSET con ] ].

cause_v2 := v_np_trans_le &
 [ STEM < "cause" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cause_v_rel",
            PHON.ONSET con ] ].

cause_v3 := v_ditrans_le &
 [ STEM < "cause" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cause_v_rel",
            PHON.ONSET con ] ].

cease_v1 := v_np_trans_le &
 [ STEM < "cease" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cease_v_cause_rel",
            PHON.ONSET con ] ].

cease_v2 := v_unacc_le &
 [ STEM < "cease" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cease_v_1_rel",
            PHON.ONSET con ] ].

cease_v3 := v_ssr_le &
 [ STEM < "cease" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cease_v_rel",
            PHON.ONSET con ] ].

cease_v4 := v_ssr_prp_le &
 [ STEM < "cease" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cease_v_rel",
            PHON.ONSET con ] ].

chiang := n_proper_le &
 [ STEM < "chiang" >,
   SYNSEM [ LKEYS.KEYREL.CARG "chiang",
            PHON.ONSET con ] ].

comma_punct_coord := punct_comma_coord_le &
 [ STEM < "," > ].

comma_punct_left := punct_comma_left_le &
 [ STEM < "," > ].

comma_punct_right := punct_comma_right_le &
 [ STEM < "," > ].

competent_a1 := adj_intrans_le &
 [ STEM < "competent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_competent_a_rel",
            PHON.ONSET con ] ].

competent_a2 := adj_reg_equi_le &
 [ STEM < "competent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_competent_a_rel",
            PHON.ONSET con ] ].

competently_adv1 := adv_int_vp_le &
 [ STEM < "competently" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_competent_a_rel",
            PHON.ONSET con ] ].

consult_v1 := v_np_trans_le &
 [ STEM < "consult" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_consult_v_rel",
            PHON.ONSET con ] ].

consult_v2 := v_double_pp*_le &
 [ STEM < "consult" >,
   SYNSEM [ LKEYS [ --COMPKEY _with_p_rel,
                    --OCOMPKEY _about_p_rel,
                    KEYREL.PRED "_consult_v_about_rel" ],
            PHON.ONSET con ] ].

consultant_n1 := n_intr_le &
 [ STEM < "consultant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_consultant_n_rel",
            PHON.ONSET con ] ].

continue_v1 := v_prep_dir_le &
 [ STEM < "continue" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_continue_v_1_rel",
            PHON.ONSET con ] ].

continue_v2 := v_np_trans_le &
 [ STEM < "continue" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_continue_v_2_rel",
            PHON.ONSET con ] ].

continue_v3 := v_ssr_le &
 [ STEM < "continue" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_continue_v_2_rel",
            PHON.ONSET con ] ].

continue_v4 := v_ssr_prp_le &
 [ STEM < "continue" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_continue_v_2_rel",
            PHON.ONSET con ] ].

could_aux_neg_1 := va_modal_neg_unsp_le &
 [ STEM < "couldn't" >,
   SYNSEM [ LKEYS.KEYREL.PRED _could_v_rel,
            PHON.ONSET con ] ].

could_aux_pos := va_modal_pos_unsp_le &
 [ STEM < "could" >,
   SYNSEM [ LKEYS.KEYREL.PRED _could_v_rel,
            PHON.ONSET con ] ].

csli_n1 := n_proper_le &
 [ STEM < "csli" >,
   SYNSEM [ LKEYS.KEYREL.CARG "csli",
            PHON.ONSET con ] ].

dare_aux_pos := va_modal_pos_le &
 [ STEM < "dare" >,
   SYNSEM [ LKEYS.KEYREL.PRED _dare_v_aux_rel,
            PHON.ONSET con ] ].

dare_v1 := v_subj_equi_le &
 [ STEM < "dare" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dare_v_rel",
            PHON.ONSET con ] ].

dare_v2 := v_obj_equi_le &
 [ STEM < "dare" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dare_v_rel",
            PHON.ONSET con ] ].

dare_v3 := v_np_trans_le &
 [ STEM < "dare" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dare_v_rel",
            PHON.ONSET con ] ].

dare_v4 := v_subj_equi_bse_le &
 [ STEM < "dare" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dare_v_rel",
            PHON.ONSET con ] ].

day_n := n_temp_ppcomp_day_le &
 [ STEM < "day" >,
   SYNSEM [ LKEYS.KEYREL.PRED _day_n_rel,
            PHON.ONSET con ] ].

day_title := n_title_le &
 [ STEM < "day" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_day_n_rel",
            PHON.ONSET con ] ].

deny_v1 := v_np_trans_le &
 [ STEM < "deny" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_deny_v_rel",
            PHON.ONSET con ] ].

deny_v2 := v_cp_prop_non_trans_le &
 [ STEM < "deny" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_deny_v_rel",
            PHON.ONSET con ] ].

deny_v3 := v_subj_equi_prp_le &
 [ STEM < "deny" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_deny_v_rel",
            PHON.ONSET con ] ].

deny_v4 := v_ditrans_le &
 [ STEM < "deny" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_deny_v_rel",
            PHON.ONSET con ] ].

department_n1 := n_intr_le &
 [ STEM < "department" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_department_n_rel",
            PHON.ONSET con ] ].

devito := n_proper_le &
 [ STEM < "devito" >,
   SYNSEM [ LKEYS.KEYREL.CARG "devito",
            PHON.ONSET con ] ].

did1_neg_1 := va_do_neg_past_le &
 [ STEM < "didn't" >,
   SYNSEM.PHON.ONSET con ].

did1_pos := va_did_le &
 [ STEM < "did" >,
   SYNSEM.PHON.ONSET con ].

do1_neg_1 := va_dont_neg_pres_le &
 [ STEM < "don't" >,
   SYNSEM.PHON.ONSET con ].

do1_pos := va_do_fin_le &
 [ STEM < "do" >,
   SYNSEM.PHON.ONSET con ].

do2 := v_np_trans_le &
 [ STEM < "do" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_do_v_1_rel",
            PHON.ONSET con ] ].

do_about_v1 := v_empty_prep_trans_le &
 [ STEM < "do" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _about_p_sel_rel,
                    KEYREL.PRED "_do_v_1_rel" ],
            PHON.ONSET con ] ].

do_adv := v_adv_le &
 [ STEM < "do" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_do_v_1_rel",
            PHON.ONSET con ] ].

do_up_v1 := v_particle_np_le &
 [ STEM < "do" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_do_v_up_rel" ],
            PHON.ONSET con ] ].

do_v3 := v_unerg_bse_le &
 [ STEM < "do" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_do_v_suffice_rel",
            PHON.ONSET con ] ].

do_v4 := v_ditrans_only_le &
 [ STEM < "do" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_do_v_1_rel",
            PHON.ONSET con ] ].

do_with_v1 := v_np_prep_trans_le &
 [ STEM < "do" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _with_p_rel,
                    KEYREL.PRED "_do_v_1_rel" ],
            PHON.ONSET con ] ].

do_without_v1 := v_empty_prep_intrans_le &
 [ STEM < "do" >,
   SYNSEM [ LKEYS [ --COMPKEY _without_p_sel_rel,
                    KEYREL.PRED "_do_v_without_rel" ],
            PHON.ONSET con ] ].

doe_n1 := n_intr_le &
 [ STEM < "doe" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_doe_n_rel",
            PHON.ONSET con ] ].

does1_neg_1 := va_doesnt_neg_pres_le &
 [ STEM < "doesn't" >,
   SYNSEM.PHON.ONSET con ].

does1_pos := va_does_le &
 [ STEM < "does" >,
   SYNSEM.PHON.ONSET con ].

dofm-date := n_day_of_month_le &
 [ STEM < "dateersatz" >,
   SYNSEM [ LKEYS.KEYREL.CARG "dofmersatz",
            PHON.ONSET onset ] ].

dofw-date := n_day_of_week_le &
 [ STEM < "dateersatz" >,
   SYNSEM [ LKEYS.KEYREL.CARG "dofwersatz",
            PHON.ONSET onset ] ].

dollar_n1 := n_intr_dollar_le &
 [ STEM < "dollar" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dollar_n_rel",
            PHON.ONSET con ] ].

dont_1 := va_dont_imp_le &
 [ STEM < "don't" >,
   SYNSEM.PHON.ONSET con ].

dont_3 := va_dont_imp_le &
 [ STEM < "do", "not" >,
   SYNSEM.PHON.ONSET con ].

dozen_a1 := adj_bare_specified_card_dozen_le &
 [ STEM < "dozen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "12",
            PHON.ONSET con ] ].

during := p_le &
 [ STEM < "during" >,
   SYNSEM [ LKEYS.KEYREL.PRED _during_p_rel,
            PHON.ONSET con ] ].

each := det_part_sg_le &
 [ STEM < "each" >,
   SYNSEM [ LKEYS.KEYREL.PRED _each_q_rel,
            PHON.ONSET voc ] ].

each_adv1 := adv_vp_aux_le &
 [ STEM < "each" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_each_p_rel",
            PHON.ONSET voc ] ].

each_other := n_recip_pro_le &
 [ STEM < "each", "other" >,
   SYNSEM.PHON.ONSET voc ].

each_pp := pp_nmod_le &
 [ STEM < "each" >,
   SYNSEM [ LKEYS.KEYREL.PRED _each_p_rel,
            PHON.ONSET voc ] ].

eat1 := v_np*_trans_le &
 [ STEM < "eat" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_eat_v_rel",
            PHON.ONSET voc ] ].

eat_in_v1 := v_particle_le &
 [ STEM < "eat" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_eat_v_in_rel" ],
            PHON.ONSET voc ] ].

eat_out_v1 := v_particle_le &
 [ STEM < "eat" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_eat_v_out_rel" ],
            PHON.ONSET voc ] ].

eat_up_v1 := v_particle_np_le &
 [ STEM < "eat" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_eat_v_up_rel" ],
            PHON.ONSET voc ] ].

eats_n1 := n_plur_le &
 [ STEM < "eat" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_eats_n_rel",
            PHON.ONSET voc ] ].

either := adv_vp_aux_le &
 [ STEM < "either" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_either_a_also_rel",
            PHON.ONSET voc ] ].

either_adv2 := adv_vp_post_le &
 [ STEM < "either" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_either_a_also_rel",
            PHON.ONSET voc ] ].

either_conj := conj_atomic_either_le &
 [ STEM < "either" >,
   SYNSEM.PHON.ONSET voc ].

either_det := det_part_le &
 [ STEM < "either" >,
   SYNSEM [ LKEYS.KEYREL.PRED _either_q_rel,
            PHON.ONSET voc ] ].

employ_n1 := n_intr_sg_le &
 [ STEM < "employ" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_employ_n_rel",
            PHON.ONSET voc ] ].

employ_v1 := v_np_trans_le &
 [ STEM < "employ" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_employ_v_rel",
            PHON.ONSET voc ] ].

employ_v2 := v_np_comp_le &
 [ STEM < "employ" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _as_p_sel_rel,
                    KEYREL.PRED "_employ_v_rel" ],
            PHON.ONSET voc ] ].

employee_n1 := n_ppof_le &
 [ STEM < "employee" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_employee_n_rel",
            PHON.ONSET voc ] ].

engineer_n1 := n_intr_le &
 [ STEM < "engineer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_engineer_n_rel",
            PHON.ONSET voc ] ].

engineer_v1 := v_np_trans_le &
 [ STEM < "engineer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_engineer_v_rel",
            PHON.ONSET voc ] ].

enough := adv_int_vp_post_le &
 [ STEM < "enough" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_enough_a_rel",
            PHON.ONSET voc ] ].

enough_deg := comp_degree_spec_enough_le &
 [ STEM < "enough" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_enough_x_deg_rel",
            PHON.ONSET voc ] ].

enough_det := det_part_pl_mass_le &
 [ STEM < "enough" >,
   SYNSEM [ LKEYS.KEYREL.PRED _enough_q_rel,
            PHON.ONSET voc ] ].

esquire_ttl := n_post_title_le &
 [ STEM < "esq" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_esquire_n_rel",
            PHON.ONSET voc ] ].

esquire_ttl_3 := n_post_title_le &
 [ STEM < ",", "esq" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_esquire_n_rel",
            PHON.ONSET voc ] ].

evaluate_v1 := v_np_trans_le &
 [ STEM < "evaluate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_evaluate_v_rel",
            PHON.ONSET voc ] ].

evaluate_v2 := v_cp_ques_fin_inf_non_trans_le &
 [ STEM < "evaluate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_evaluate_v_rel",
            PHON.ONSET voc ] ].

ever_adv1 := adv_vp_pre_le &
 [ STEM < "ever" >,
   SYNSEM [ LKEYS.KEYREL.PRED _ever_a_rel,
            PHON.ONSET voc ] ].

ever_adv2 := adv_s_pre_le &
 [ STEM < "ever" >,
   SYNSEM [ LKEYS.KEYREL.PRED _ever_a_rel,
            PHON.ONSET voc ] ].

every := det_sg_every_le &
 [ STEM < "every" >,
   SYNSEM [ LKEYS.KEYREL.PRED _every_q_rel,
            PHON.ONSET voc ] ].

everyone := n_generic_pro_le &
 [ STEM < "everyone" >,
   SYNSEM [ LKEYS [ ALTKEYREL.PRED every_q_rel,
                    KEYREL.PRED person_rel ],
            PHON.ONSET voc ] ].

evidently_adv1 := adv_vp_aux_le &
 [ STEM < "evidently" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_evident_a_rel",
            PHON.ONSET voc ] ].

evidently_adv2 := adv_s_prop_pre_le &
 [ STEM < "evidently" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_evident_a_rel",
            PHON.ONSET voc ] ].

fact_n1 := n_mass_count_le &
 [ STEM < "fact" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fact_n_rel",
            PHON.ONSET con ] ].

fact_n2 := n_cpcomp_fin_le &
 [ STEM < "fact" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fact_n_rel",
            PHON.ONSET con ] ].

fail_v1 := v_np*_trans_le &
 [ STEM < "fail" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fail_v_rel",
            PHON.ONSET con ] ].

fail_v2 := v_ssr_le &
 [ STEM < "fail" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fail1_v_rel",
            PHON.ONSET con ] ].

few := det_part_pl_le &
 [ STEM < "few" >,
   SYNSEM [ LKEYS.ALTKEYREL.PRED "_few_a_rel",
            PHON.ONSET con ] ].

few_a1 := adj_intrans_le &
 [ STEM < "few" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_few_a_rel",
            PHON.ONSET con ] ].

fewer_a1 := adj_comp_le &
 [ STEM < "fewer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_few_a_rel",
            PHON.ONSET con ] ].

find_adj_v1 := v_obj_equi_prd_adj_le &
 [ STEM < "find" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_find_v_mental_rel",
            PHON.ONSET con ] ].

find_n1 := n_intr_le &
 [ STEM < "find" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_find_n_rel",
            PHON.ONSET con ] ].

find_out_v1 := v_particle_empty_pp_le &
 [ STEM < "find" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    --OCOMPKEY _about_p_sel_rel,
                    KEYREL.PRED "_find_v_out_rel" ],
            PHON.ONSET con ] ].

find_out_v2 := v_particle_cp_le &
 [ STEM < "find" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_find_v_out_rel" ],
            PHON.ONSET con ] ].

find_out_v3 := v_particle_np_le &
 [ STEM < "find" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_find_v_out_rel" ],
            PHON.ONSET con ] ].

find_out_v4 := v_particle_le &
 [ STEM < "find" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_find_v_out_rel" ],
            PHON.ONSET con ] ].

find_v1 := v_np_trans_le &
 [ STEM < "find" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_find_v_1_rel",
            PHON.ONSET con ] ].

find_v2 := v_ditrans_only_le &
 [ STEM < "find" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_find_v_1_rel",
            PHON.ONSET con ] ].

find_v3 := v_cp_only_prop_non_trans_le &
 [ STEM < "find" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_find_v_1_rel",
            PHON.ONSET con ] ].

find_v4 := v_sor_le &
 [ STEM < "find" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_find_v_1_rel",
            PHON.ONSET con ] ].

find_v5 := v_expl_obj_prd_le &
 [ STEM < "find" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_find_v_1_rel",
            PHON.ONSET con ] ].

finish_n1 := n_intr_le &
 [ STEM < "finish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_finish_n_rel",
            PHON.ONSET con ] ].

finish_off_v1 := v_particle_np_le &
 [ STEM < "finish" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_finish_v_off_rel" ],
            PHON.ONSET con ] ].

finish_off_v2 := v_particle_le &
 [ STEM < "finish" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_finish_v_off_rel" ],
            PHON.ONSET con ] ].

finish_up_v1 := v_particle_le &
 [ STEM < "finish" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_finish_v_up_rel" ],
            PHON.ONSET con ] ].

finish_v1 := v_np*_trans_le &
 [ STEM < "finish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_finish_v_1_rel",
            PHON.ONSET con ] ].

finish_v2 := v_particle_np_le &
 [ STEM < "finish" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_finish_v_up_rel" ],
            PHON.ONSET con ] ].

finish_v3 := v_ssr_prp_le &
 [ STEM < "finish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_finish_v_1_rel",
            PHON.ONSET con ] ].

finished_a1 := adj_intrans_le &
 [ STEM < "finished" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_finished_a_rel",
            PHON.ONSET con ] ].

first := adj_bare_unspecified_ord_one_le &
 [ STEM < "first" >,
   SYNSEM [ LKEYS.KEYREL.CARG "01",
            PHON.ONSET con ] ].

first_adv1 := adv_int_vp_le &
 [ STEM < "first" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_first_a_rel",
            PHON.ONSET con ] ].

first_day := n_day_of_month_le &
 [ STEM < "first" >,
   SYNSEM [ LKEYS.KEYREL.CARG "1",
            PHON.ONSET con ] ].

five := adj_bare_unspecified_card_one_le &
 [ STEM < "five" >,
   SYNSEM [ LKEYS.KEYREL.CARG "5",
            PHON.ONSET con ] ].

five_c := adj_bare_unspecified_card_wcomps_one_le &
 [ STEM < "five" >,
   SYNSEM [ LKEYS.KEYREL.CARG "5",
            PHON.ONSET con ] ].

five_day := n_day_of_month_card_le &
 [ STEM < "five" >,
   SYNSEM [ LKEYS.KEYREL.CARG "5",
            PHON.ONSET con ] ].

five_hour := n_hour_le &
 [ STEM < "five" >,
   SYNSEM [ LKEYS.KEYREL.CARG "5",
            PHON.ONSET con ] ].

foot_apostr_n1 := n_meas_nocmpnd_le &
 [ STEM < "'" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_foot_n_rel",
            PHON.ONSET con ] ].

for := p_le &
 [ STEM < "for" >,
   SYNSEM [ LKEYS.KEYREL.PRED _for_p_rel,
            PHON.ONSET con ] ].

for_c := comp_for_le &
 [ STEM < "for" >,
   SYNSEM.PHON.ONSET con ].

for_nbar_p := p_nbar_comp_nomod_le &
 [ STEM < "for" >,
   SYNSEM [ LKEYS.KEYREL.PRED _for_p_trgt_rel,
            PHON.ONSET con ] ].

for_prtcl := p_prtcl_le &
 [ STEM < "for" >,
   SYNSEM [ LKEYS.KEYREL.PRED _for_p_sel_rel,
            PHON.ONSET con ] ].

former_a1 := adj_intrans_le &
 [ STEM < "former" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_former_a_rel",
            PHON.ONSET con ] ].

found_v1 := v_np_trans_le &
 [ STEM < "found" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_found_v_rel",
            PHON.ONSET con ] ].

france_n1 := n_proper_le &
 [ STEM < "france" >,
   SYNSEM [ LKEYS.KEYREL.CARG "france",
            PHON.ONSET con ] ].

get_along_v1 := v_particle_le &
 [ STEM < "get" >,
   SYNSEM [ LKEYS [ --COMPKEY _along_p_sel_rel,
                    KEYREL.PRED "_get_v_along_rel" ],
            PHON.ONSET con ] ].

get_around_v1 := v_empty_prep_intrans_le &
 [ STEM < "get" >,
   SYNSEM [ LKEYS [ --COMPKEY _around_p_sel_rel,
                    KEYREL.PRED "_get_v_around_rel" ],
            PHON.ONSET con ] ].

get_around_v2 := v_particle_le &
 [ STEM < "get" >,
   SYNSEM [ LKEYS [ --COMPKEY _around_p_sel_rel,
                    KEYREL.PRED "_get_v_around_rel" ],
            PHON.ONSET con ] ].

get_around_v3 := v_particle_empty_pp_le &
 [ STEM < "get" >,
   SYNSEM [ LKEYS [ --COMPKEY _around_p_sel_rel,
                    --OCOMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_get_v_around_rel" ],
            PHON.ONSET con ] ].

get_back_v1 := v_particle_pp_le &
 [ STEM < "get" >,
   SYNSEM [ LKEYS [ --COMPKEY _back_p_sel_rel,
                    --OCOMPKEY _to_p_rel,
                    KEYREL.PRED "_get_v_back_rel" ],
            PHON.ONSET con ] ].

get_back_v2 := v_particle_np_le &
 [ STEM < "get" >,
   SYNSEM [ LKEYS [ --COMPKEY _back_p_sel_rel,
                    KEYREL.PRED "_get_v_back_rel" ],
            PHON.ONSET con ] ].

get_down_to_v1 := v_particle_empty_pp_le &
 [ STEM < "get" >,
   SYNSEM [ LKEYS [ --COMPKEY _down_p_sel_rel,
                    --OCOMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_get_v_down+to_rel" ],
            PHON.ONSET con ] ].

get_down_v2 := v_particle_np_le &
 [ STEM < "get" >,
   SYNSEM [ LKEYS [ --COMPKEY _down_p_sel_rel,
                    KEYREL.PRED "_get_v_down_rel" ],
            PHON.ONSET con ] ].

get_in_v1 := v_particle_np_le &
 [ STEM < "get" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_get_v_in_rel" ],
            PHON.ONSET con ] ].

get_off_v2 := v_particle_np_le &
 [ STEM < "get" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_get_v_off_rel" ],
            PHON.ONSET con ] ].

get_on_with_v1 := v_particle_pp_le &
 [ STEM < "get" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    --OCOMPKEY _with_p_rel,
                    KEYREL.PRED "_get_v_on_rel" ],
            PHON.ONSET con ] ].

get_out_v2 := v_particle_np_le &
 [ STEM < "get" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_get_v_out_rel" ],
            PHON.ONSET con ] ].

get_over_v1 := v_empty_prep_intrans_le &
 [ STEM < "get" >,
   SYNSEM [ LKEYS [ --COMPKEY _over_p_sel_rel,
                    KEYREL.PRED "_get_v_over_rel" ],
            PHON.ONSET con ] ].

get_prd_v1 := v_subj_equi_prd_v_a_le &
 [ STEM < "get" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_get_v_state_rel",
            PHON.ONSET con ] ].

get_prd_v2 := v_obj_equi_non_trans_prd_le &
 [ STEM < "get" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_get_v_state_rel",
            PHON.ONSET con ] ].

get_through_v1 := v_particle_le &
 [ STEM < "get" >,
   SYNSEM [ LKEYS [ --COMPKEY _through_p_sel_rel,
                    KEYREL.PRED "_get_v_through_rel" ],
            PHON.ONSET con ] ].

get_to_v1 := v_ssr_le &
 [ STEM < "get" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_get_v_to_rel",
            PHON.ONSET con ] ].

get_to_v2 := v_obj_equi_le &
 [ STEM < "get" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_get_v_cause_rel",
            PHON.ONSET con ] ].

get_up_v1 := v_particle_le &
 [ STEM < "get" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_get_v_up_rel" ],
            PHON.ONSET con ] ].

get_v1 := v_ditrans_only_le &
 [ STEM < "get" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_get_v_1_rel",
            PHON.ONSET con ] ].

get_v2 := v_np_non_trans_le &
 [ STEM < "get" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_get_v_1_rel",
            PHON.ONSET con ] ].

get_v3 := v_np_trans_double_pp*_le &
 [ STEM < "get" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _from_p_sel_rel,
                    KEYREL.PRED "_get_v_1_rel" ],
            PHON.ONSET con ] ].

get_v4 := v_prep_dir_oblig_le &
 [ STEM < "get" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_get_v_1_rel",
            PHON.ONSET con ] ].

get_x_of_v1_i := v_empty_prep_trans_idiom_le &
 [ STEM < "get" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_get_v_i_rel" ],
            PHON.ONSET con ] ].

go_about_v1 := v_empty_prep_intrans_le &
 [ STEM < "go" >,
   SYNSEM [ LKEYS [ --COMPKEY _about_p_sel_rel,
                    KEYREL.PRED "_go_v_about_rel" ],
            PHON.ONSET con ] ].

go_ahead_v1 := v_particle_le &
 [ STEM < "go" >,
   SYNSEM [ LKEYS [ --COMPKEY _ahead_p_sel_rel,
                    KEYREL.PRED "_go_v_ahead_rel" ],
            PHON.ONSET con ] ].

go_along_with_v1 := v_particle_le &
 [ STEM < "go" >,
   SYNSEM [ LKEYS [ --COMPKEY _along_p_sel_rel,
                    KEYREL.PRED "_go_v_along_rel" ],
            PHON.ONSET con ] ].

go_away_v1 := v_particle_le &
 [ STEM < "go" >,
   SYNSEM [ LKEYS [ --COMPKEY _away_p_sel_rel,
                    KEYREL.PRED "_go_v_away_rel" ],
            PHON.ONSET con ] ].

go_bse_vp_v1 := v_subj_equi_bse_go_le &
 [ STEM < "go" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_go_v_state_rel",
            PHON.ONSET con ] ].

go_for_v1 := v_empty_prep_intrans_le &
 [ STEM < "go" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_go_v_for_rel" ],
            PHON.ONSET con ] ].

go_in_v1 := v_empty_prep_intrans_le &
 [ STEM < "go" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_go_v_in_rel" ],
            PHON.ONSET con ] ].

go_off_v1 := v_particle_le &
 [ STEM < "go" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_go_v_off_rel" ],
            PHON.ONSET con ] ].

go_on_v1 := v_particle_3only_le &
 [ STEM < "go" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_go_v_on_rel" ],
            PHON.ONSET con ] ].

go_out_v1 := v_particle_le &
 [ STEM < "go" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_go_v_out_rel" ],
            PHON.ONSET con ] ].

go_out_v2 := v_particle_pp_le &
 [ STEM < "go" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    --OCOMPKEY _with_p_rel,
                    KEYREL.PRED "_go_v_out_rel" ],
            PHON.ONSET con ] ].

go_over_v1 := v_empty_prep_intrans_le &
 [ STEM < "go" >,
   SYNSEM [ LKEYS [ --COMPKEY _over_p_sel_rel,
                    KEYREL.PRED "_go_v_over_rel" ],
            PHON.ONSET con ] ].

go_state_v1 := v_subj_equi_prd_adj_le &
 [ STEM < "go" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_go_v_state_rel",
            PHON.ONSET con ] ].

go_through_v1 := v_empty_prep_intrans_le &
 [ STEM < "go" >,
   SYNSEM [ LKEYS [ --COMPKEY _through_p_sel_rel,
                    KEYREL.PRED "_go_v_through_rel" ],
            PHON.ONSET con ] ].

go_through_v2 := v_particle_le &
 [ STEM < "go" >,
   SYNSEM [ LKEYS [ --COMPKEY _through_p_sel_rel,
                    KEYREL.PRED "_go_v_through_rel" ],
            PHON.ONSET con ] ].

go_v1 := v_prep_dir_le &
 [ STEM < "go" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_go_v_1_rel",
            PHON.ONSET con ] ].

go_v2 := v_subj_equi_prp_le &
 [ STEM < "go" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_go_v_ing_rel",
            PHON.ONSET con ] ].

going_to_v1 := va_quasimodal_le &
 [ STEM < "going" >,
   SYNSEM [ LKEYS.KEYREL.PRED _going+to_v_rel,
            PHON.ONSET con ] ].

good_a1 := adj_trans_oblig_le &
 [ STEM < "good" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_good_a_rel" ],
            PHON.ONSET con ] ].

good_a2 := adj_trans_le &
 [ STEM < "good" >,
   SYNSEM [ LKEYS [ --COMPKEY _at_p_sel_rel,
                    KEYREL.PRED "_good_a_rel" ],
            PHON.ONSET con ] ].

good_a3 := adj_tough_atrans_le &
 [ STEM < "good" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_good_a_rel",
            PHON.ONSET con ] ].

good_s_adv := adv_s_pre_word_root_le &
 [ STEM < "good" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_good_a_rel",
            PHON.ONSET con ] ].

goods_n1 := n_plur_nocmpnd_le &
 [ STEM < "good" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_goods_n_rel",
            PHON.ONSET con ] ].

got_poss := v_poss_got_le &
 [ STEM < "got" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_have_v_rel",
            PHON.ONSET con ] ].

got_poss_prd := v_poss_got_prd_le &
 [ STEM < "got" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_have_v_prd_rel",
            PHON.ONSET con ] ].

got_to_v1 := va_quasimodal_psp_le &
 [ STEM < "got" >,
   SYNSEM [ LKEYS.KEYREL.PRED _got_v_to_rel,
            PHON.ONSET con ] ].

ha_root_post := adv_disc_posth_le &
 [ STEM < "ha" >,
   SYNSEM [ LKEYS.KEYREL.CARG "ha",
            PHON.ONSET con ] ].

ha_root_pre := adv_disc_preh_le &
 [ STEM < "ha" >,
   SYNSEM [ LKEYS.KEYREL.CARG "ha",
            PHON.ONSET con ] ].

had_aux := va_had_le &
 [ STEM < "had" >,
   SYNSEM.PHON.ONSET con ].

had_aux_cx_2 := va_had_cx_le &
 [ STEM < "'d" >,
   SYNSEM.PHON.ONSET con ].

had_aux_subj := va_had_subj_le &
 [ STEM < "had" >,
   SYNSEM.PHON.ONSET con ].

had_better_aux := va_modal_pos_le &
 [ STEM < "had", "better" >,
   SYNSEM [ LKEYS.KEYREL.PRED _had+better_v_rel,
            PHON.ONSET con ] ].

hadnt_aux_1 := va_had_neg_le &
 [ STEM < "hadn't" >,
   SYNSEM.PHON.ONSET con ].

hadnt_aux_subj_1 := va_had_subj_neg_le &
 [ STEM < "hadn't" >,
   SYNSEM.PHON.ONSET con ].

half_hour := adj_minute_preh_le &
 [ STEM < "half" >,
   SYNSEM [ LKEYS.KEYREL.CARG "30",
            PHON.ONSET con ] ].

half_n1 := n_ppof_unsp_le &
 [ STEM < "half" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_half_n_rel",
            PHON.ONSET con ] ].

half_pn1 := n_part_ppof_agr_le &
 [ STEM < "half" >,
   SYNSEM [ LKEYS.ALTKEYREL.PRED _half_q_rel,
            PHON.ONSET con ] ].

half_pn2 := n_part_nocomp_le &
 [ STEM < "half" >,
   SYNSEM [ LKEYS.ALTKEYREL.PRED _half_q_rel,
            PHON.ONSET con ] ].

half_pn3 := n_part_npcomp_agr_le &
 [ STEM < "half" >,
   SYNSEM [ LKEYS.ALTKEYREL.PRED _half_q_rel,
            PHON.ONSET con ] ].

hard_a1 := adj_intrans_le &
 [ STEM < "hard" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hard_a_rel",
            PHON.ONSET con ] ].

hard_a2 := adj_reg_atrans_le &
 [ STEM < "hard" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hard_a_rel",
            PHON.ONSET con ] ].

hard_a3 := adj_tough_atrans_le &
 [ STEM < "hard" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hard_a_rel",
            PHON.ONSET con ] ].

hard_a4 := adj_trans_oblig_le &
 [ STEM < "hard" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_hard_a_rel" ],
            PHON.ONSET con ] ].

harder := adj_comp_le &
 [ STEM < "harder" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hard_a_rel",
            PHON.ONSET con ] ].

has_aux := va_has_le &
 [ STEM < "has" >,
   SYNSEM.PHON.ONSET con ].

has_aux_cx_2 := va_has_cx_le &
 [ STEM < "'s" >,
   SYNSEM.PHON.ONSET con ].

hasnt_aux_1 := va_has_neg_le &
 [ STEM < "hasn't" >,
   SYNSEM.PHON.ONSET con ].

have-poss := v_poss_le &
 [ STEM < "have" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_have_v_1_rel",
            PHON.ONSET con ] ].

have-prd := v_obj_equi_non_trans_prd_le &
 [ STEM < "have" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_have_v_prd_rel",
            PHON.ONSET con ] ].

have_aux_prp := va_have_prespart_le &
 [ STEM < "having" >,
   SYNSEM.PHON.ONSET con ].

have_back_v1 := v_particle_np_le &
 [ STEM < "have" >,
   SYNSEM [ LKEYS [ --COMPKEY _back_p_sel_rel,
                    KEYREL.PRED "_have_v_back_rel" ],
            PHON.ONSET con ] ].

have_bse_aux := va_have_bse_le &
 [ STEM < "have" >,
   SYNSEM.PHON.ONSET con ].

have_cause := v_sorb_le &
 [ STEM < "have" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_have_v_cause_rel",
            PHON.ONSET con ] ].

have_fin_aux := va_have_fin_le &
 [ STEM < "have" >,
   SYNSEM.PHON.ONSET con ].

have_oeq_vpsl := v_obj_equi_vpslash_le &
 [ STEM < "have" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_have_v_prd_rel",
            PHON.ONSET con ] ].

have_off_v1 := v_particle_np_le &
 [ STEM < "have" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_have_v_off_rel" ],
            PHON.ONSET con ] ].

have_prp_v1 := v_anom_equi_prp_le &
 [ STEM < "have" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_have_v_rel",
            PHON.ONSET con ] ].

have_to1 := v_ssr_le &
 [ STEM < "have" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_have_v_to_rel",
            PHON.ONSET con ] ].

have_to_do_with_v1 := v_prep_intrans_le &
 [ STEM < "have" >,
   SYNSEM [ LKEYS [ --COMPKEY _to+do+with_p_rel,
                    KEYREL.PRED "_have_v_regarding_rel" ],
            PHON.ONSET con ] ].

have_yet_v1 := v_ssr_particle_le &
 [ STEM < "have" >,
   SYNSEM [ LKEYS.--COMPKEY _yet_a_rel,
            PHON.ONSET con ] ].

hawaii_n2 := n_proper_abb_le &
 [ STEM < "hi" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hawaii",
            PHON.ONSET con ] ].

he := n_pers_pro_he_le &
 [ STEM < "he" >,
   SYNSEM.PHON.ONSET con ].

heavy_a1 := adj_intrans_le &
 [ STEM < "heavy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_heavy_a_rel",
            PHON.ONSET con ] ].

help_but_bse_v1 := v_subj_equi_but_bse_le &
 [ STEM < "help" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_help_v_but_rel",
            PHON.ONSET con ] ].

help_n1 := n_mass_count_le &
 [ STEM < "help" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_help_n_rel",
            PHON.ONSET con ] ].

help_out_v1 := v_particle_np_le &
 [ STEM < "help" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_help_v_out_rel" ],
            PHON.ONSET con ] ].

help_out_v2 := v_particle_le &
 [ STEM < "help" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_help_v_out_rel" ],
            PHON.ONSET con ] ].

help_v1 := v_np*_trans_le &
 [ STEM < "help" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_help_v_1_rel",
            PHON.ONSET con ] ].

help_v2 := v_subj_equi_le &
 [ STEM < "help" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_help_v_to_rel",
            PHON.ONSET con ] ].

help_v3 := v_obj_equi_le &
 [ STEM < "help" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_help_v_to_rel",
            PHON.ONSET con ] ].

help_v4 := v_obj_equi_bse_le &
 [ STEM < "help" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_help_v_to_rel",
            PHON.ONSET con ] ].

help_v5 := v_subj_equi_bse_le &
 [ STEM < "help" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_help_v_to_rel",
            PHON.ONSET con ] ].

help_v6 := v_expl_obj_cp_prop_le &
 [ STEM < "help" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_help_v_expl_rel",
            PHON.ONSET con ] ].

helped_v4 := v_sorb_pass_le &
 [ STEM < "helped" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_help_v_to_rel",
            PHON.ONSET con ] ].

her := n_pers_pro_her_le &
 [ STEM < "her" >,
   SYNSEM.PHON.ONSET con ].

her_poss := det_poss_her_le &
 [ STEM < "her" >,
   SYNSEM.PHON.ONSET con ].

here_nom := n_adv_pl_le &
 [ STEM < "here" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED _here_a_rel,
                    KEYREL.PRED _place_n_rel ],
            PHON.ONSET con ] ].

herself := n_refl_pro_herself_le &
 [ STEM < "herself" >,
   SYNSEM.PHON.ONSET con ].

hi_root_post := adv_disc_posth_grt_le &
 [ STEM < "hi" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hi",
            PHON.ONSET con ] ].

hi_root_pre := adv_disc_preh_grt_le &
 [ STEM < "hi" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hi",
            PHON.ONSET con ] ].

him := n_pers_pro_him_le &
 [ STEM < "him" >,
   SYNSEM.PHON.ONSET con ].

himself := n_refl_pro_himself_le &
 [ STEM < "himself" >,
   SYNSEM.PHON.ONSET con ].

hire_v1 := v_np_trans_le &
 [ STEM < "hire" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hire_v_rel",
            PHON.ONSET con ] ].

his := n_poss_pro_his_le &
 [ STEM < "his" >,
   SYNSEM.PHON.ONSET con ].

his_poss := det_poss_his_le &
 [ STEM < "his" >,
   SYNSEM.PHON.ONSET con ].

hour_n1 := n_temp_ppcomp_hour_le &
 [ STEM < "hour" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hour_n_rel",
            PHON.ONSET voc ] ].

how_adj := adj_wh_le &
 [ STEM < "how" >,
   SYNSEM.PHON.ONSET con ].

how_adv := pp_wh_le &
 [ STEM < "how" >,
   SYNSEM [ LKEYS [ ALTKEYREL.PRED manner_rel,
                    KEYREL.PRED unspec_manner_rel ],
            PHON.ONSET con ] ].

how_cp := s_compl_wh_phrase_le &
 [ STEM < "how" >,
   SYNSEM [ LKEYS [ ALTKEYREL.PRED manner_rel,
                    KEYREL.PRED unspec_manner_rel ],
            PHON.ONSET con ] ].

how_deg := adv_wh_degree_spec_le &
 [ STEM < "how" >,
   SYNSEM.PHON.ONSET con ].

how_freerel_np := n_freerel_pro_adv_le &
 [ STEM < "how" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED unspec_manner_rel,
                    KEYREL.PRED manner_rel ],
            PHON.ONSET con ] ].

how_many := det_part_pl_wh_le &
 [ STEM < "how", "many" >,
   SYNSEM [ LKEYS.ALTKEYREL.PRED number_rel,
            PHON.ONSET con ] ].

hyphen_punct_left := punct_hyphen_left_le &
 [ STEM < "-" >,
   SYNSEM.PHON.ONSET onset ].

hyphen_punct_right := punct_hyphen_right_le &
 [ STEM < "-" >,
   SYNSEM.PHON.ONSET onset ].

i := n_pers_pro_i_le &
 [ STEM < "i" >,
   SYNSEM.PHON.ONSET voc ].

if_c_indic := comp_if_indic_le &
 [ STEM < "if" >,
   SYNSEM.PHON.ONSET voc ].

if_c_subjnct := comp_if_subjnct_le &
 [ STEM < "if" >,
   SYNSEM.PHON.ONSET voc ].

if_prd := p_subconj_prd_le &
 [ STEM < "if" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_if_x_then_rel",
            PHON.ONSET voc ] ].

if_subconj_unspec := p_subconj_if_unspec_le &
 [ STEM < "if" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_if_x_then_rel",
            PHON.ONSET voc ] ].

in := p_reg_le &
 [ STEM < "in" >,
   SYNSEM [ LKEYS.KEYREL.PRED _in_p_rel,
            PHON.ONSET voc ] ].

in_order_to := p_subconj_inf_le &
 [ STEM < "in", "order", "to" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_in+order+to_x_rel",
            PHON.ONSET voc ] ].

in_pp := pp_le &
 [ STEM < "in" >,
   SYNSEM [ LKEYS.KEYREL.PRED _in_p_rel,
            PHON.ONSET voc ] ].

in_prtcl := p_prtcl_le &
 [ STEM < "in" >,
   SYNSEM [ LKEYS.KEYREL.PRED _in_p_sel_rel,
            PHON.ONSET voc ] ].

in_temp := p_temp_le &
 [ STEM < "in" >,
   SYNSEM [ LKEYS [ --COMPKEY non_day_or_deg_rel,
                    KEYREL.PRED _in_p_temp_rel ],
            PHON.ONSET voc ] ].

interview_n1 := n_intr_le &
 [ STEM < "interview" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_interview_n_rel",
            PHON.ONSET voc ] ].

interview_v1 := v_np*_trans_le &
 [ STEM < "interview" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_interview_v_rel",
            PHON.ONSET voc ] ].

into := p_nmod_no_tmod_le &
 [ STEM < "into" >,
   SYNSEM [ LKEYS.KEYREL.PRED _into_p_rel,
            PHON.ONSET voc ] ].

into_prtcl := p_prtcl_le &
 [ STEM < "into" >,
   SYNSEM [ LKEYS.KEYREL.PRED _into_p_sel_rel,
            PHON.ONSET voc ] ].

into_vmod := p_no_nmod_le &
 [ STEM < "into" >,
   SYNSEM [ LKEYS.KEYREL.PRED _into_p_rel,
            PHON.ONSET voc ] ].

it := n_expl_it_le &
 [ STEM < "it" >,
   SYNSEM.PHON.ONSET voc ].

it2 := n_pers_pro_it_le &
 [ STEM < "it" >,
   SYNSEM.PHON.ONSET voc ].

its := n_poss_pro_its_le &
 [ STEM < "its" >,
   SYNSEM.PHON.ONSET voc ].

its_poss := det_poss_its_le &
 [ STEM < "its" >,
   SYNSEM.PHON.ONSET voc ].

january := n_month_le &
 [ STEM < "january" >,
   SYNSEM [ LKEYS.KEYREL.CARG "jan",
            PHON.ONSET con ] ].

january_2 := n_month_year_le &
 [ STEM < "january" >,
   SYNSEM [ LKEYS.KEYREL.CARG "jan",
            PHON.ONSET con ] ].

july := n_month_le &
 [ STEM < "july" >,
   SYNSEM [ LKEYS.KEYREL.CARG "jul",
            PHON.ONSET con ] ].

july_2 := n_month_year_le &
 [ STEM < "july" >,
   SYNSEM [ LKEYS.KEYREL.CARG "jul",
            PHON.ONSET con ] ].

kim := n_proper_le &
 [ STEM < "kim" >,
   SYNSEM [ LKEYS.KEYREL.CARG "kim",
            PHON.ONSET con ] ].

know_about_v1 := v_empty_prep_trans*_le &
 [ STEM < "know" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _about_p_sel_rel,
                    KEYREL.PRED "_know_v_about_rel" ],
            PHON.ONSET con ] ].

know_of_v1 := v_empty_prep_trans_le &
 [ STEM < "know" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_know_v_of_rel" ],
            PHON.ONSET con ] ].

know_v1 := v_np*_trans_le &
 [ STEM < "know" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_know_v_1_rel",
            PHON.ONSET con ] ].

know_v2 := v_cp_fin_inf_non_trans_le &
 [ STEM < "know" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_know_v_1_rel",
            PHON.ONSET con ] ].

know_v3 := v_subj_equi_le &
 [ STEM < "know" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_know_v_1_rel",
            PHON.ONSET con ] ].

know_v4 := v_sor_le &
 [ STEM < "know" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_know_v_1_rel",
            PHON.ONSET con ] ].

know_v5 := v_np_comp_le &
 [ STEM < "know" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _as_p_sel_rel,
                    KEYREL.PRED "_know_v_1_rel" ],
            PHON.ONSET con ] ].

late_a1 := adj_attr_intrans_le &
 [ STEM < "late" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_late_a_rel",
            PHON.ONSET con ] ].

late_a2 := adj_trans_oblig_le &
 [ STEM < "late" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_late_a_rel" ],
            PHON.ONSET con ] ].

late_adv := n_adv_gradable_le &
 [ STEM < "late" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED _late_p_rel,
                    KEYREL.PRED _time_n_rel ],
            PHON.ONSET con ] ].

late_det := det_yesterday_tomorrow_le &
 [ STEM < "late" >,
   SYNSEM [ LKEYS.ALTKEYREL.PRED _late_a_rel,
            PHON.ONSET con ] ].

lay_down_v1 := v_particle_le &
 [ STEM < "lay" >,
   SYNSEM [ LKEYS [ --COMPKEY _down_p_sel_rel,
                    KEYREL.PRED "_lay_v_down_rel" ],
            PHON.ONSET con ] ].

lay_off_v1 := v_particle_np_le &
 [ STEM < "lay" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_lay_v_off_rel" ],
            PHON.ONSET con ] ].

lay_v1 := v_np_prep_trans_dors_le &
 [ STEM < "lay" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lay_v_1_rel",
            PHON.ONSET con ] ].

leave_behind_v1 := v_particle_np_le &
 [ STEM < "leave" >,
   SYNSEM [ LKEYS [ --COMPKEY _behind_p_sel_rel,
                    KEYREL.PRED "_leave_v_behind_rel" ],
            PHON.ONSET con ] ].

leave_n1 := n_mass_le &
 [ STEM < "leave" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_leave_n_rel",
            PHON.ONSET con ] ].

leave_off_v1 := v_particle_np_le &
 [ STEM < "leave" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_leave_v_off_rel" ],
            PHON.ONSET con ] ].

leave_open_v1 := v_particle_np_le &
 [ STEM < "leave" >,
   SYNSEM [ LKEYS [ --COMPKEY _open_a_sel_rel,
                    KEYREL.PRED "_leave_v_open_rel" ],
            PHON.ONSET con ] ].

leave_out_v1 := v_particle_np_le &
 [ STEM < "leave" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_leave_v_out_rel" ],
            PHON.ONSET con ] ].

leave_over_v1 := v_particle_np_le &
 [ STEM < "leave" >,
   SYNSEM [ LKEYS [ --COMPKEY _over_p_sel_rel,
                    KEYREL.PRED "_leave_v_over_rel" ],
            PHON.ONSET con ] ].

leave_to_v1 := v_expl_pp_inf_oeq_le &
 [ STEM < "leave" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_leave_v_to_rel" ],
            PHON.ONSET con ] ].

leave_v1 := v_np*_trans_le &
 [ STEM < "leave" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_leave_v_1_rel",
            PHON.ONSET con ] ].

leave_v2 := v_obj_equi_prd_le &
 [ STEM < "leave" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_leave_v_1_rel",
            PHON.ONSET con ] ].

leave_v4 := v_ditrans_le &
 [ STEM < "leave" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_leave_v_1_rel",
            PHON.ONSET con ] ].

lee := n_proper_le &
 [ STEM < "lee" >,
   SYNSEM [ LKEYS.KEYREL.CARG "lee",
            PHON.ONSET con ] ].

like_back_v1 := v_particle_np_le &
 [ STEM < "like" >,
   SYNSEM [ LKEYS [ --COMPKEY _back_p_sel_rel,
                    KEYREL.PRED "_like_v_back_rel" ],
            PHON.ONSET con ] ].

like_c := comp_like_le &
 [ STEM < "like" >,
   SYNSEM.PHON.ONSET con ].

like_disc_adv := adv_disc_like_preh_le &
 [ STEM < "like" >,
   SYNSEM [ LKEYS.KEYREL.CARG "like",
            PHON.ONSET con ] ].

like_isect := adj_intrans_le &
 [ STEM < "like" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_like_a_rel",
            PHON.ONSET con ] ].

like_p := p_le &
 [ STEM < "like" >,
   SYNSEM [ LKEYS.KEYREL.PRED _like_p_rel,
            PHON.ONSET con ] ].

like_p_2 := p_subconj_le &
 [ STEM < "like" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_like_x_preph_rel",
            PHON.ONSET con ] ].

like_prd_v1 := v_obj_equi_non_trans_prd_le &
 [ STEM < "like" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_like_v_rel",
            PHON.ONSET con ] ].

like_v1 := v_np_trans_le &
 [ STEM < "like" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_like_v_rel",
            PHON.ONSET con ] ].

like_v2 := v_subj_equi_le &
 [ STEM < "like" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_like_v_rel",
            PHON.ONSET con ] ].

like_v3 := v_subj_equi_prp_le &
 [ STEM < "like" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_like_v_rel",
            PHON.ONSET con ] ].

like_v4 := v_sor_non_trans_le &
 [ STEM < "like" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_like_v_rel",
            PHON.ONSET con ] ].

list_n1 := n_ppof_le &
 [ STEM < "list" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_list_n_rel",
            PHON.ONSET con ] ].

list_v1 := v_np_trans_le &
 [ STEM < "list" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_list_v_1_rel",
            PHON.ONSET con ] ].

list_v2 := v_np_comp_le &
 [ STEM < "list" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _as_p_sel_rel,
                    KEYREL.PRED "_list_v_1_rel" ],
            PHON.ONSET con ] ].

list_v3 := v_unacc_le &
 [ STEM < "list" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_list_v_2_rel",
            PHON.ONSET con ] ].

location_n1 := n_ppof_le &
 [ STEM < "location" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_location_n_rel",
            PHON.ONSET con ] ].

lparen_pct := punct_lp_le &
 [ STEM < "(" > ].

made_v2 := v_sorb_pass_le &
 [ STEM < "make" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_make_v_rel",
            PHON.ONSET con ] ].

make_n1 := n_ppof_le &
 [ STEM < "make" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_make_n_rel",
            PHON.ONSET con ] ].

make_out_v1 := v_particle_np_le &
 [ STEM < "make" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_make_v_out_rel" ],
            PHON.ONSET con ] ].

make_out_v2 := v_particle_np_pp_to_le &
 [ STEM < "make" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_make_v_out_rel" ],
            PHON.ONSET con ] ].

make_over_v1 := v_np_particle_only_le &
 [ STEM < "make" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _over_p_sel_rel,
                    KEYREL.PRED "_make_v_over_rel" ],
            PHON.ONSET con ] ].

make_sure_v1 := v_subj_equi_prd_le &
 [ STEM < "make" >,
   SYNSEM [ LKEYS [ --COMPKEY abstr_sure_rel,
                    KEYREL.PRED "_make_v_be_rel" ],
            PHON.ONSET con ] ].

make_up_for_v1 := v_particle_pp_le &
 [ STEM < "make" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    --OCOMPKEY _for_p_rel,
                    KEYREL.PRED "_make_v_up+for_rel" ],
            PHON.ONSET con ] ].

make_up_v1 := v_particle_np_le &
 [ STEM < "make" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_make_v_up_rel" ],
            PHON.ONSET con ] ].

make_up_v2 := v_particle_le &
 [ STEM < "make" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_make_v_up_rel" ],
            PHON.ONSET con ] ].

make_v1 := v_np_trans_le &
 [ STEM < "make" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_make_v_1_rel",
            PHON.ONSET con ] ].

make_v2 := v_sorb_le &
 [ STEM < "make" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_make_v_1_rel",
            PHON.ONSET con ] ].

make_v3 := v_ditrans_only_le &
 [ STEM < "make" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_make_v_1_rel",
            PHON.ONSET con ] ].

make_v4 := v_sor_prd_le &
 [ STEM < "make" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_make_v_1_rel",
            PHON.ONSET con ] ].

make_v5 := v_expl_obj_prd_le &
 [ STEM < "make" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_make_v_1_rel",
            PHON.ONSET con ] ].

make_x_of_v1_i := v_empty_prep_trans_idiom_le &
 [ STEM < "make" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_make_v_i_rel" ],
            PHON.ONSET con ] ].

manage_v1 := v_np_trans_le &
 [ STEM < "manage" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_manage_v_rel",
            PHON.ONSET con ] ].

manage_v2 := v_subj_equi_le &
 [ STEM < "manage" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_manage_v_rel",
            PHON.ONSET con ] ].

manage_v3 := v_unerg_le &
 [ STEM < "manage" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_manage_v_cope_rel",
            PHON.ONSET con ] ].

manager_n1 := n_ppof_le &
 [ STEM < "manager" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_manager_n_rel",
            PHON.ONSET con ] ].

many := det_part_pl_le &
 [ STEM < "many" >,
   SYNSEM [ LKEYS.ALTKEYREL.PRED "_many_a_rel",
            PHON.ONSET con ] ].

many_a1 := adj_intrans_le &
 [ STEM < "many" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_many_a_rel",
            PHON.ONSET con ] ].

may := n_month_le &
 [ STEM < "may" >,
   SYNSEM [ LKEYS.KEYREL.CARG "may",
            PHON.ONSET con ] ].

may_2 := n_month_year_le &
 [ STEM < "may" >,
   SYNSEM [ LKEYS.KEYREL.CARG "may",
            PHON.ONSET con ] ].

may_aux_pos := va_modal_pos_le &
 [ STEM < "may" >,
   SYNSEM [ LKEYS.KEYREL.PRED _may_v_rel,
            PHON.ONSET con ] ].

me := n_pers_pro_me_le &
 [ STEM < "me" >,
   SYNSEM.PHON.ONSET con ].

meet_up_v1 := v_particle_le &
 [ STEM < "meet" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_meet_v_up_rel" ],
            PHON.ONSET con ] ].

meet_up_v2 := v_particle_pp_le &
 [ STEM < "meet" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    --OCOMPKEY _with_p_rel,
                    KEYREL.PRED "_meet_v_up_rel" ],
            PHON.ONSET con ] ].

meet_v1 := v_np*_trans_le &
 [ STEM < "meet" >,
   SYNSEM [ LKEYS [ --COMPKEY non_temp_nom_rel,
                    KEYREL.PRED "_meet_v_1_rel" ],
            PHON.ONSET con ] ].

meeting_n1 := n_ppof_unsp_reg_le &
 [ STEM < "meeting" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_meeting_n_rel",
            PHON.ONSET con ] ].

member_n1 := n_ppof_le &
 [ STEM < "member" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_member_n_rel",
            PHON.ONSET con ] ].

merely_adv1 := adv_vp_aux_le &
 [ STEM < "merely" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mere_a_rel",
            PHON.ONSET con ] ].

might_aux_pos := va_modal_subj_pos_le &
 [ STEM < "might" >,
   SYNSEM [ LKEYS.KEYREL.PRED _might_v_rel,
            PHON.ONSET con ] ].

might_n1 := n_mass_le &
 [ STEM < "might" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_might_n_rel",
            PHON.ONSET con ] ].

mine := n_poss_pro_mine_le &
 [ STEM < "mine" >,
   SYNSEM.PHON.ONSET con ].

mine_for_v1 := v_empty_prep_trans_le &
 [ STEM < "mine" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_mine_v_rel" ],
            PHON.ONSET con ] ].

mine_n1 := n_ppof_le &
 [ STEM < "mine" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mine_n_rel",
            PHON.ONSET con ] ].

mine_v1 := v_np*_trans_le &
 [ STEM < "mine" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mine_v_rel",
            PHON.ONSET con ] ].

monday_n1 := n_day_of_week_le &
 [ STEM < "monday" >,
   SYNSEM [ LKEYS.KEYREL.CARG "mon",
            PHON.ONSET con ] ].

monday_n2 := n_day_of_week_le &
 [ STEM < "mon" >,
   SYNSEM [ LKEYS.KEYREL.CARG "mon",
            PHON.ONSET con ] ].

monday_n3 := n_day_of_week_le &
 [ STEM < "mon", "." >,
   SYNSEM [ LKEYS.KEYREL.CARG "mon",
            PHON.ONSET con ] ].

month-date := n_month_le &
 [ STEM < "dateersatz" >,
   SYNSEM [ LKEYS.KEYREL.CARG "dateersatz",
            PHON.ONSET onset ] ].

month_n1 := n_temp_ppcomp_nd_le &
 [ STEM < "month" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED _month_n_rel ],
            PHON.ONSET con ] ].

more_a1 := adv_comparison_spec_le &
 [ STEM < "more" >,
   SYNSEM [ LKEYS.KEYREL.PRED _more_x_comp_rel,
            PHON.ONSET con ] ].

more_adv1 := adv_int_vp_post_le &
 [ STEM < "more" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_more_a_rel",
            PHON.ONSET con ] ].

more_deg := more_degree_spec_le &
 [ STEM < "more" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_more_x_deg_rel",
            PHON.ONSET con ] ].

more_det := det_more_le &
 [ STEM < "more" >,
   SYNSEM [ LKEYS.KEYREL.PRED _more_q_rel,
            PHON.ONSET con ] ].

more_nc_deg := comp_degree_spec_nc_le &
 [ STEM < "more" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_more_x_deg_rel",
            PHON.ONSET con ] ].

more_pn1 := n_part_ppof_noagr_le &
 [ STEM < "more" >,
   SYNSEM [ LKEYS.ALTKEYREL.PRED _more_q_rel,
            PHON.ONSET con ] ].

more_pn2 := n_part_nocomp_le &
 [ STEM < "more" >,
   SYNSEM [ LKEYS.ALTKEYREL.PRED _more_q_rel,
            PHON.ONSET con ] ].

more_than_deg := adv_degree_spec_le &
 [ STEM < "more", "than" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_more+than_x_rel",
            PHON.ONSET con ] ].

more_than_dollar_adj := adj_dollar_le &
 [ STEM < "more", "than" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_more+than_a_dollar_rel",
            PHON.ONSET con ] ].

more_than_p := p_reg_le &
 [ STEM < "more", "than" >,
   SYNSEM [ LKEYS.KEYREL.PRED _more+than_p_rel,
            PHON.ONSET con ] ].

most := det_part_pl_mass_le &
 [ STEM < "most" >,
   SYNSEM [ LKEYS.KEYREL.PRED _most_q_rel,
            PHON.ONSET con ] ].

most_a1 := adv_comparison_spec_le &
 [ STEM < "most" >,
   SYNSEM [ LKEYS.KEYREL.PRED _most_x_comp_rel,
            PHON.ONSET con ] ].

most_deg := adv_degree_spec_tt_le &
 [ STEM < "most" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_most_x_deg_rel",
            PHON.ONSET con ] ].

mother_n1 := n_ppof_le &
 [ STEM < "mother" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mother_n_rel",
            PHON.ONSET con ] ].

mother_ttl := n_title_le &
 [ STEM < "mother" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mother_n_rel",
            PHON.ONSET con ] ].

move_about_v1 := v_particle_le &
 [ STEM < "move" >,
   SYNSEM [ LKEYS [ --COMPKEY _about_p_sel_rel,
                    KEYREL.PRED "_move_v_about_rel" ],
            PHON.ONSET con ] ].

move_about_v2 := v_particle_np_le &
 [ STEM < "move" >,
   SYNSEM [ LKEYS [ --COMPKEY _about_p_sel_rel,
                    KEYREL.PRED "_move_v_about_rel" ],
            PHON.ONSET con ] ].

move_in_v1 := v_particle_le &
 [ STEM < "move" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_move_v_in_rel" ],
            PHON.ONSET con ] ].

move_in_v2 := v_particle_np_le &
 [ STEM < "move" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_move_v_in_rel" ],
            PHON.ONSET con ] ].

move_n1 := n_intr_le &
 [ STEM < "move" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_move_n_rel",
            PHON.ONSET con ] ].

move_on_v1 := v_particle_le &
 [ STEM < "move" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_move_v_on_rel" ],
            PHON.ONSET con ] ].

move_out_v1 := v_particle_le &
 [ STEM < "move" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_move_v_out_rel" ],
            PHON.ONSET con ] ].

move_out_v2 := v_particle_np_le &
 [ STEM < "move" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_move_v_out_rel" ],
            PHON.ONSET con ] ].

move_up_v1 := v_particle_le &
 [ STEM < "move" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_move_v_up_rel" ],
            PHON.ONSET con ] ].

move_v1 := v_prep_dir_le &
 [ STEM < "move" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_move_v_1_rel",
            PHON.ONSET con ] ].

move_v2 := v_np*_trans_double_pp*_le &
 [ STEM < "move" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _from_p_sel_rel,
                    KEYREL.PRED "_move_v_cause_rel" ],
            PHON.ONSET con ] ].

move_v3 := v_np_trans_le &
 [ STEM < "move" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_move_v_cause_rel",
            PHON.ONSET con ] ].

mr_title := n_title_unsp_le &
 [ STEM < "mr" >,
   SYNSEM [ LKEYS.KEYREL.CARG "mr",
            PHON.ONSET con ] ].

mr_title_2 := n_title_unsp_le &
 [ STEM < "mr", "." >,
   SYNSEM [ LKEYS.KEYREL.CARG "mr",
            PHON.ONSET con ] ].

much := adv_degree_spec_m_le &
 [ STEM < "much" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_much_x_deg_rel",
            PHON.ONSET con ] ].

much_adv := adv_int_vp_post_le &
 [ STEM < "much" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_much_a_rel",
            PHON.ONSET con ] ].

much_det := det_part_ms_much_le &
 [ STEM < "much" >,
   SYNSEM [ LKEYS.KEYREL.PRED _much_q_rel,
            PHON.ONSET con ] ].

must_aux_pos := va_modal_pos_le &
 [ STEM < "must" >,
   SYNSEM [ LKEYS.KEYREL.PRED _must_v_rel,
            PHON.ONSET con ] ].

must_n1 := n_intr_le &
 [ STEM < "must" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_must_n_rel",
            PHON.ONSET con ] ].

my := det_poss_my_le &
 [ STEM < "my" >,
   SYNSEM.PHON.ONSET con ].

my_excl_pre := adv_disc_preh_le &
 [ STEM < "my" >,
   SYNSEM [ LKEYS.KEYREL.CARG "my",
            PHON.ONSET con ] ].

myself := n_refl_pro_myself_le &
 [ STEM < "myself" >,
   SYNSEM.PHON.ONSET con ].

ne_isect := adj_intrans_le &
 [ STEM < "ne" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_northeast_a_rel",
            PHON.ONSET con ] ].

ne_n1 := n_ppof_le &
 [ STEM < "ne" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ne_n_rel",
            PHON.ONSET con ] ].

ne_n2 := n_adv_dir_le &
 [ STEM < "ne" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED _northeast_a_rel,
                    KEYREL.PRED _place_n_rel ],
            PHON.ONSET con ] ].

nebraska_n2 := n_proper_abb_le &
 [ STEM < "ne" >,
   SYNSEM [ LKEYS.KEYREL.CARG "nebraska",
            PHON.ONSET con ] ].

need-prd := v_obj_equi_non_trans_prd_le &
 [ STEM < "need" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_need_v_pred_rel",
            PHON.ONSET con ] ].

need_n1 := n_ppof_le &
 [ STEM < "need" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_need_n_rel",
            PHON.ONSET con ] ].

need_v1 := v_np_trans_le &
 [ STEM < "need" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_need_v_1_rel",
            PHON.ONSET con ] ].

need_v2 := v_subj_equi_le &
 [ STEM < "need" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_need_v_1_rel",
            PHON.ONSET con ] ].

need_v3 := v_sor_non_trans_le &
 [ STEM < "need" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_need_v_1_rel",
            PHON.ONSET con ] ].

neither_conj := conj_atomic_neither_le &
 [ STEM < "neither" >,
   SYNSEM.PHON.ONSET con ].

neither_det := det_part_sg_le &
 [ STEM < "neither" >,
   SYNSEM [ LKEYS.KEYREL.PRED _neither_q_rel,
            PHON.ONSET con ] ].

never_adv1 := adv_vp_aux_le &
 [ STEM < "never" >,
   SYNSEM [ LKEYS.KEYREL.PRED _never_a_rel,
            PHON.ONSET con ] ].

never_prdp := adv_neg_prdp_le &
 [ STEM < "never" >,
   SYNSEM [ LKEYS.KEYREL.PRED _never_a_rel,
            PHON.ONSET con ] ].

no_det := det_no_le &
 [ STEM < "no" >,
   SYNSEM [ LKEYS.KEYREL.PRED _no_q_rel,
            PHON.ONSET con ] ].

no_disc_root := adv_disc_preh_le &
 [ STEM < "no" >,
   SYNSEM [ LKEYS.KEYREL.CARG "no",
            PHON.ONSET con ] ].

no_eq_nc_deg := adv_degree_spec_m_le &
 [ STEM < "no" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_no_x_deg_rel",
            PHON.ONSET con ] ].

no_more_adv1 := adv_int_vp_post_le &
 [ STEM < "no", "more" >,
   SYNSEM [ LKEYS.KEYREL.PRED _nomore_a_rel,
            PHON.ONSET con ] ].

no_more_det := det_part_pl_mass_le &
 [ STEM < "no", "more" >,
   SYNSEM [ LKEYS.KEYREL.PRED _no+more_q_rel,
            PHON.ONSET con ] ].

none_pn1 := n_part_ppof_noagr_le &
 [ STEM < "none" >,
   SYNSEM [ LKEYS.ALTKEYREL.PRED no_q_rel,
            PHON.ONSET con ] ].

none_pn2 := n_part_nocomp_le &
 [ STEM < "none" >,
   SYNSEM [ LKEYS.ALTKEYREL.PRED no_q_rel,
            PHON.ONSET con ] ].

noon := n_hour_le &
 [ STEM < "noon" >,
   SYNSEM [ LKEYS.KEYREL.CARG "12",
            PHON.ONSET con ] ].

noon_min := xp_am_pm_le &
 [ STEM < "noon" >,
   SYNSEM [ LKEYS.KEYREL [ CARG "pm_time",
                             PRED "_pm_x_rel" ],
            PHON.ONSET con ] ].

noon_n1 := n_intr_le &
 [ STEM < "noon" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_noon_n_rel",
            PHON.ONSET con ] ].

noon_nc_n1 := n_day_part_nocomp_le &
 [ STEM < "noon" >,
   SYNSEM [ LKEYS.KEYREL.PRED _noon_n_rel,
            PHON.ONSET con ] ].

nor_conj := conj_complex_nor_le &
 [ STEM < "nor" >,
   SYNSEM.PHON.ONSET con ].

nor_conj_2 := conj_complex_nor_neither_le &
 [ STEM < "nor" >,
   SYNSEM.PHON.ONSET con ].

not := adv_not_le &
 [ STEM < "not" >,
   SYNSEM.PHON.ONSET con ].

not_conj := conj_complex_not_le &
 [ STEM < "not" >,
   SYNSEM.PHON.ONSET con ].

not_prdp := adv_neg_prdp_le &
 [ STEM < "not" >,
   SYNSEM [ LKEYS.KEYREL.PRED neg_rel,
            PHON.ONSET con ] ].

now_adv := n_adv_tm_le &
 [ STEM < "now" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED _now_a_rel,
                    KEYREL.PRED _time_n_rel ],
            PHON.ONSET con ] ].

now_aux_adv := adv_int_vp_aux_now_le &
 [ STEM < "now" >,
   SYNSEM.PHON.ONSET con ].

now_disc_pre := adv_disc_preh_le &
 [ STEM < "now" >,
   SYNSEM [ LKEYS.KEYREL.CARG "now",
            PHON.ONSET con ] ].

number_abb_n1 := n_ppof_nocmpnd_le &
 [ STEM < "no" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_number_n_rel",
            PHON.ONSET con ] ].

number_abb_title := n_title_le &
 [ STEM < "no" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_number_n_rel",
            PHON.ONSET con ] ].

number_n1 := n_ppof_unsp_le &
 [ STEM < "number" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_number_n_rel",
            PHON.ONSET con ] ].

number_n2 := n_group_ppof_le &
 [ STEM < "number" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_number_n_rel",
            PHON.ONSET con ] ].

number_title := n_title_num_le &
 [ STEM < "number" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_number_n_rel",
            PHON.ONSET con ] ].

number_v1 := v_np_trans_le &
 [ STEM < "number" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_number_v_rel",
            PHON.ONSET con ] ].

numidentifierersatz_n1 := n_intr_le &
 [ STEM < "twodigitersatz" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_identifierersatz_n_rel",
            PHON.ONSET con ] ].

numidentifierersatz_n3 := n_intr_le &
 [ STEM < "fourdigitersatz" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_identifierersatz_n_rel",
            PHON.ONSET con ] ].

numvalcard2digit := adj_bare_unspecified_card_two_le &
 [ STEM < "twodigitersatz" >,
   SYNSEM [ LKEYS.KEYREL.CARG "dig2ersatz",
            PHON.ONSET onset ] ].

numvalcard4digit := adj_bare_unspecified_card_three_le &
 [ STEM < "fourdigitersatz" >,
   SYNSEM [ LKEYS.KEYREL.CARG "dig4ersatz",
            PHON.ONSET onset ] ].

numvalyofc2digit := n_year_le &
 [ STEM < "twodigitersatz" >,
   SYNSEM [ LKEYS.KEYREL.CARG "twodigitersatz",
            PHON.ONSET con ] ].

numvalyofc4digit := n_year_le &
 [ STEM < "fourdigitersatz" >,
   SYNSEM [ LKEYS.KEYREL.CARG "fourdigitersatz",
            PHON.ONSET con ] ].

of_nbar_p := p_nbar_comp_nomod_le &
 [ STEM < "of" >,
   SYNSEM [ LKEYS.KEYREL.PRED _of_p_nbar_rel,
            PHON.ONSET voc ] ].

of_poss := p_nmod_poss_le &
 [ STEM < "of" >,
   SYNSEM [ LKEYS.KEYREL.PRED _of_p_rel,
            PHON.ONSET voc ] ].

of_prtcl := p_prtcl_of_le &
 [ STEM < "of" >,
   SYNSEM [ LKEYS.KEYREL.PRED _of_p_sel_rel,
            PHON.ONSET voc ] ].

of_subconj := p_subconj_np_le &
 [ STEM < "of" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_of_x_subord_rel",
            PHON.ONSET voc ] ].

off := p_reg_le &
 [ STEM < "off" >,
   SYNSEM [ LKEYS.KEYREL.PRED _off_p_rel,
            PHON.ONSET voc ] ].

off_adv := pp_mob_le &
 [ STEM < "off" >,
   SYNSEM [ LKEYS.KEYREL.PRED _off_p_rel,
            PHON.ONSET voc ] ].

off_prtcl := p_prtcl_le &
 [ STEM < "off" >,
   SYNSEM [ LKEYS.KEYREL.PRED _off_p_sel_rel,
            PHON.ONSET voc ] ].

office1 := n_intr_le &
 [ STEM < "office" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_office_n_rel",
            PHON.ONSET voc ] ].

office_i_n1 := n_bare_jmod_opt_le &
 [ STEM < "office" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_office_n_rel",
            PHON.ONSET voc ] ].

office_post_ttl := n_post_title_le &
 [ STEM < "office" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_office_n_rel",
            PHON.ONSET voc ] ].

often_adv1 := adv_int_vp_aux_le &
 [ STEM < "often" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_often_a_rel",
            PHON.ONSET voc ] ].

often_adv2 := adv_int_vp_post_le &
 [ STEM < "often" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_often_a_rel",
            PHON.ONSET voc ] ].

old_a1 := adj_intrans_le &
 [ STEM < "old" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_old_a_rel",
            PHON.ONSET voc ] ].

older := adj_comp_le &
 [ STEM < "older" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_old_a_rel",
            PHON.ONSET voc ] ].

oldest_a1 := adj_superl_le &
 [ STEM < "oldest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_old_a_rel",
            PHON.ONSET voc ] ].

oldest_a1_prd := adj_superl_prd_le &
 [ STEM < "the", "oldest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_old_a_rel",
            PHON.ONSET con ] ].

on := p_reg_le &
 [ STEM < "on" >,
   SYNSEM [ LKEYS.KEYREL.PRED _on_p_rel,
            PHON.ONSET voc ] ].

on_adv := pp_no_nmod_le &
 [ STEM < "on" >,
   SYNSEM [ LKEYS.KEYREL.PRED _on_p_rel,
            PHON.ONSET voc ] ].

on_day := p_temp_le &
 [ STEM < "on" >,
   SYNSEM [ LKEYS [ --COMPKEY day_rel,
                    KEYREL.PRED _on_p_temp_rel ],
            PHON.ONSET voc ] ].

on_prtcl := p_prtcl_le &
 [ STEM < "on" >,
   SYNSEM [ LKEYS.KEYREL.PRED _on_p_sel_rel,
            PHON.ONSET voc ] ].

one_adj := adj_one_nonprd_le &
 [ STEM < "one" >,
   SYNSEM.PHON.ONSET con ].

one_adj_fract := adj_one_nonprd_fract_le &
 [ STEM < "one" >,
   SYNSEM.PHON.ONSET con ].

one_day := n_day_of_month_card_le &
 [ STEM < "one" >,
   SYNSEM [ LKEYS.KEYREL.CARG "1",
            PHON.ONSET con ] ].

one_hour := n_hour_le &
 [ STEM < "one" >,
   SYNSEM [ LKEYS.KEYREL.CARG "01",
            PHON.ONSET con ] ].

one_pro := n_generic_pro_jspr_le &
 [ STEM < "one" >,
   SYNSEM [ LKEYS [ ALTKEYREL.PRED pronoun_q_rel,
                    KEYREL.PRED _one_n_rel ],
            PHON.ONSET con ] ].

onedigitdomersatz := n_day_of_month_le &
 [ STEM < "onedigitordersatz" >,
   SYNSEM [ LKEYS.KEYREL.CARG "1digitdom",
            PHON.ONSET onset ] ].

onedigitordersatz := adj_bare_unspecified_ord_one_le &
 [ STEM < "onedigitordersatz" >,
   SYNSEM [ LKEYS.KEYREL [ CARG "dig1ersatz",
                             PRED const_rel ],
            PHON.ONSET onset ] ].

ones_n1 := n_ones_le &
 [ STEM < "ones" >,
   SYNSEM.PHON.ONSET con ].

only_a1 := adj_attr_nospec_le &
 [ STEM < "only" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_only_a_rel",
            PHON.ONSET voc ] ].

only_adv1 := adv_vp_aux_le &
 [ STEM < "only" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_only_a_rel",
            PHON.ONSET voc ] ].

only_adv2 := adv_s_pre_le &
 [ STEM < "only" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_only_a_rel",
            PHON.ONSET voc ] ].

only_adv3 := adv_vp_post_le &
 [ STEM < "only" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_only_a_rel",
            PHON.ONSET voc ] ].

only_deg := adv_degree_spec_jo_le &
 [ STEM < "only" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_only_x_deg_rel",
            PHON.ONSET voc ] ].

only_deg2 := adv_degree_spec_m_le &
 [ STEM < "only" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_only_x_deg_rel",
            PHON.ONSET voc ] ].

or_conj_1 := conj_complex_or_le &
 [ STEM < "or" >,
   SYNSEM.PHON.ONSET voc ].

or_conj_2 := conj_complex_or_either_le &
 [ STEM < "or" >,
   SYNSEM.PHON.ONSET voc ].

or_root := adv_disc_preh_le &
 [ STEM < "or" >,
   SYNSEM [ LKEYS.KEYREL.CARG "or",
            PHON.ONSET voc ] ].

or_so_disc := adv_disc_like_posth_le &
 [ STEM < "or", "so" >,
   SYNSEM [ LKEYS.KEYREL.CARG "or_so",
            PHON.ONSET voc ] ].

order_n1 := n_ppof_unspec_le &
 [ STEM < "order" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_order_n_rel",
            PHON.ONSET voc ] ].

order_n2 := n_ppcomp_oblig_le &
 [ STEM < "order" >,
   SYNSEM [ LKEYS [ --COMPKEY _from_p_sel_rel,
                    KEYREL.PRED "_order_n_rel" ],
            PHON.ONSET voc ] ].

order_ttl := n_title_le &
 [ STEM < "order" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_order_n_rel",
            PHON.ONSET voc ] ].

order_v1 := v_np*_trans_le &
 [ STEM < "order" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_order_v_rel",
            PHON.ONSET voc ] ].

order_v2 := v_obj_equi_le &
 [ STEM < "order" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_order_v_rel",
            PHON.ONSET voc ] ].

order_v3 := v_np_prep_trans_le &
 [ STEM < "order" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _from_p_rel,
                    KEYREL.PRED "_order_v_rel" ],
            PHON.ONSET voc ] ].

order_v4 := v_ditrans_only_le &
 [ STEM < "order" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_order_v_rel",
            PHON.ONSET voc ] ].

other_a1 := adj_attr_nospec_le &
 [ STEM < "other" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_other_a_rel",
            PHON.ONSET voc ] ].

other_n1 := n_no_cmpnd_le &
 [ STEM < "other" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_other_n_rel",
            PHON.ONSET voc ] ].

ought_aux_pos := va_ought_pos_le &
 [ STEM < "ought" >,
   SYNSEM [ LKEYS.KEYREL.PRED _ought_v_rel,
            PHON.ONSET voc ] ].

ourselves := n_refl_pro_ourselves_le &
 [ STEM < "ourselves" >,
   SYNSEM.PHON.ONSET voc ].

own_a1 := adj_poss_le &
 [ STEM < "own" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_own_a_rel",
            PHON.ONSET voc ] ].

own_n1 := n_intr_poss_le &
 [ STEM < "own" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_own_n_rel",
            PHON.ONSET voc ] ].

own_v1 := v_np_trans_le &
 [ STEM < "own" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_own_v_rel",
            PHON.ONSET voc ] ].

paloalto := n_proper_city_le &
 [ STEM < "palo", "alto" >,
   SYNSEM [ LKEYS.KEYREL.CARG "palo_alto",
            PHON.ONSET con ] ].

paris_n1 := n_proper_city_le &
 [ STEM < "paris" >,
   SYNSEM [ LKEYS.KEYREL.CARG "paris",
            PHON.ONSET con ] ].

pat := n_proper_le &
 [ STEM < "pat" >,
   SYNSEM [ LKEYS.KEYREL.CARG "pat",
            PHON.ONSET con ] ].

pat_n2 := n_intr_le &
 [ STEM < "pat" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pat_n_rel",
            PHON.ONSET con ] ].

pat_v1 := v_np_trans_le &
 [ STEM < "pat" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pat_v_rel",
            PHON.ONSET con ] ].

people_n1 := n_plur_ppcomp_le &
 [ STEM < "people" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_people_n_rel" ],
            PHON.ONSET con ] ].

period_pct := punct_period_le &
 [ STEM < "." >,
   SYNSEM.PHON.ONSET onset ].

person_n1 := n_intr_le &
 [ STEM < "person" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_person_n_rel",
            PHON.ONSET con ] ].

previously_adv1 := adv_int_vp_le &
 [ STEM < "previously" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_previous_a_rel",
            PHON.ONSET con ] ].

program_n1 := n_ppof_le &
 [ STEM < "program" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_program_n_rel",
            PHON.ONSET con ] ].

program_v1 := v_np_trans_le &
 [ STEM < "program" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_program_v_rel",
            PHON.ONSET con ] ].

programmer_n1 := n_ppof_le &
 [ STEM < "programmer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_programmer_n_rel",
            PHON.ONSET con ] ].

project_n1 := n_intr_le &
 [ STEM < "project" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_project_n_rel",
            PHON.ONSET con ] ].

project_v1 := v_np_trans_le &
 [ STEM < "project" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_project_v_rel",
            PHON.ONSET con ] ].

promise_n1 := n_ppof_le &
 [ STEM < "promise" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_promise_n_rel",
            PHON.ONSET con ] ].

promise_v1 := v_anom_equi_le &
 [ STEM < "promise" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_promise_v_rel",
            PHON.ONSET con ] ].

promise_v2 := v_np*_non_trans_le &
 [ STEM < "promise" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_promise_v_rel",
            PHON.ONSET con ] ].

promise_v4 := v_ditrans_le &
 [ STEM < "promise" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_promise_v_rel",
            PHON.ONSET con ] ].

promise_v5 := v_cp_prop_non_trans_le &
 [ STEM < "promise" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_promise_v_rel",
            PHON.ONSET con ] ].

qmark_pct := punct_qmark_le &
 [ STEM < "?" >,
   SYNSEM.PHON.ONSET onset ].

rain_n1 := n_mass_le &
 [ STEM < "rain" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rain_n_rel",
            PHON.ONSET con ] ].

rain_v1 := v_atrans_le &
 [ STEM < "rain" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rain_v_rel",
            PHON.ONSET con ] ].

room_n1 := n_mass_count_le &
 [ STEM < "room" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_room_n_rel",
            PHON.ONSET con ] ].

rparen_pct := punct_rp_le &
 [ STEM < ")" > ].

run_across_v1 := v_empty_prep_intrans_le &
 [ STEM < "run" >,
   SYNSEM [ LKEYS [ --COMPKEY _across_p_sel_rel,
                    KEYREL.PRED "_run_v_across_rel" ],
            PHON.ONSET con ] ].

run_around_v1 := v_particle_le &
 [ STEM < "run" >,
   SYNSEM [ LKEYS [ --COMPKEY _around_p_sel_rel,
                    KEYREL.PRED "_run_v_around_rel" ],
            PHON.ONSET con ] ].

run_back_v2 := v_particle_le &
 [ STEM < "run" >,
   SYNSEM [ LKEYS [ --COMPKEY _back_p_sel_rel,
                    KEYREL.PRED "_run_v_back_rel" ],
            PHON.ONSET con ] ].

run_for_v1 := v_empty_prep_intrans_le &
 [ STEM < "run" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_trgt_rel,
                    KEYREL.PRED "_run_v_for_rel" ],
            PHON.ONSET con ] ].

run_for_v2 := v_empty_prep_intrans_le &
 [ STEM < "run" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_run_v_for_rel" ],
            PHON.ONSET con ] ].

run_into_v1 := v_empty_prep_intrans_le &
 [ STEM < "run" >,
   SYNSEM [ LKEYS [ --COMPKEY _into_p_sel_rel,
                    KEYREL.PRED "_run_v_into_rel" ],
            PHON.ONSET con ] ].

run_n1 := n_ppof_le &
 [ STEM < "run" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_run_n_rel",
            PHON.ONSET con ] ].

run_off_v1 := v_particle_np_le &
 [ STEM < "run" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_run_v_off_rel" ],
            PHON.ONSET con ] ].

run_out_v1 := v_particle_empty_pp_le &
 [ STEM < "run" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    --OCOMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_run_v_out_rel" ],
            PHON.ONSET con ] ].

run_out_v2 := v_particle_le &
 [ STEM < "run" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_run_v_out_rel" ],
            PHON.ONSET con ] ].

run_over_v3 := v_particle_le &
 [ STEM < "run" >,
   SYNSEM [ LKEYS [ --COMPKEY _over_p_sel_rel,
                    KEYREL.PRED "_run_v_over_rel" ],
            PHON.ONSET con ] ].

run_prd_v1 := v_subj_equi_prd_adj_le &
 [ STEM < "run" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_run_v_prd_rel",
            PHON.ONSET con ] ].

run_v2 := v_np_trans_le &
 [ STEM < "run" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_run_v_operate_rel",
            PHON.ONSET con ] ].

run_v3 := v_prep_dir_le &
 [ STEM < "run" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_run_v_unspec_rel",
            PHON.ONSET con ] ].

s_dash_pct := punct_s_dash_le &
 [ STEM < "-" >,
   SYNSEM.PHON.ONSET onset ].

sandy := n_proper_le &
 [ STEM < "sandy" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sandy",
            PHON.ONSET con ] ].

sandy_a1 := adj_intrans_le &
 [ STEM < "sandy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sandy_a_rel",
            PHON.ONSET con ] ].

sara := n_proper_fem_le &
 [ STEM < "sara" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sara",
            PHON.ONSET con ] ].

say_about_v1 := v_empty_prep_trans_le &
 [ STEM < "say" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _about_p_sel_rel,
                    KEYREL.PRED "_say_v_about_rel" ],
            PHON.ONSET con ] ].

say_approx := adv_degree_spec_le &
 [ STEM < "say" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_say_x_approx_rel",
            PHON.ONSET con ] ].

say_disc_adv := adv_disc_like_preh_le &
 [ STEM < "say" >,
   SYNSEM [ LKEYS.KEYREL.CARG "say",
            PHON.ONSET con ] ].

say_quote_v1 := v_quote_top_le &
 [ STEM < "say" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_say_v_1_rel",
            PHON.ONSET con ] ].

say_quote_v2 := v_quote_inv_le &
 [ STEM < "say" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_say_v_1_rel",
            PHON.ONSET con ] ].

say_quote_v3 := v_quote_mc_le &
 [ STEM < "say" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_say_v_1_rel",
            PHON.ONSET con ] ].

say_v1 := v_np*_trans_le &
 [ STEM < "say" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_say_v_1_rel",
            PHON.ONSET con ] ].

say_v2 := v_pp_cp_le &
 [ STEM < "say" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_say_v_1_rel" ],
            PHON.ONSET con ] ].

say_v3 := v_prep_intrans_event_le &
 [ STEM < "say" >,
   SYNSEM [ LKEYS [ --COMPKEY loc_abstr_rel,
                    KEYREL.PRED "_say_v_loc_rel" ],
            PHON.ONSET con ] ].

see_about_v1 := v_empty_prep_intrans_le &
 [ STEM < "see" >,
   SYNSEM [ LKEYS [ --COMPKEY _about_p_sel_rel,
                    KEYREL.PRED "_see_v_about_rel" ],
            PHON.ONSET con ] ].

see_around_v1 := v_np_particle_only_le &
 [ STEM < "see" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _around_p_sel_rel,
                    KEYREL.PRED "_see_v_around_rel" ],
            PHON.ONSET con ] ].

see_n1 := n_intr_le &
 [ STEM < "see" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_see_n_rel",
            PHON.ONSET con ] ].

see_through_v1 := v_empty_prep_intrans_le &
 [ STEM < "see" >,
   SYNSEM [ LKEYS [ --COMPKEY _through_p_sel_rel,
                    KEYREL.PRED "_see_v_through_rel" ],
            PHON.ONSET con ] ].

see_to_v1 := v_empty_prep_intrans_le &
 [ STEM < "see" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_see_v_to_rel" ],
            PHON.ONSET con ] ].

see_v1 := v_np_trans_le &
 [ STEM < "see" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_see_v_1_rel",
            PHON.ONSET con ] ].

see_v2 := v_cp_fin_inf_non_trans_le &
 [ STEM < "see" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_see_v_understand_rel",
            PHON.ONSET con ] ].

see_v3 := v_prep_dir_le &
 [ STEM < "see" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_see_v_understand_rel",
            PHON.ONSET con ] ].

see_v4 := v_sorb_le &
 [ STEM < "see" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_see_v_1_rel",
            PHON.ONSET con ] ].

see_v5 := v_np_comp_le &
 [ STEM < "see" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _as_p_sel_rel,
                    KEYREL.PRED "_see_v_as_rel" ],
            PHON.ONSET con ] ].

see_v6 := v_pp_expl_cp_le &
 [ STEM < "see" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_see_v_to_it_rel" ],
            PHON.ONSET con ] ].

see_v7 := v_obj_equi_prd_le &
 [ STEM < "see" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_see_v_1_rel",
            PHON.ONSET con ] ].

seven := adj_bare_unspecified_card_one_le &
 [ STEM < "seven" >,
   SYNSEM [ LKEYS.KEYREL.CARG "7",
            PHON.ONSET con ] ].

seven_c := adj_bare_unspecified_card_wcomps_one_le &
 [ STEM < "seven" >,
   SYNSEM [ LKEYS.KEYREL.CARG "7",
            PHON.ONSET con ] ].

seven_day := n_day_of_month_card_le &
 [ STEM < "seven" >,
   SYNSEM [ LKEYS.KEYREL.CARG "7",
            PHON.ONSET con ] ].

seven_hour := n_hour_le &
 [ STEM < "seven" >,
   SYNSEM [ LKEYS.KEYREL.CARG "7",
            PHON.ONSET con ] ].

several := det_part_pl_le &
 [ STEM < "several" >,
   SYNSEM [ LKEYS.ALTKEYREL.PRED "_several_a_rel",
            PHON.ONSET con ] ].

shall_aux_pos := va_will_pos_le &
 [ STEM < "shall" >,
   SYNSEM [ LKEYS.KEYREL.PRED _shall_v_rel,
            PHON.ONSET con ] ].

she := n_pers_pro_she_le &
 [ STEM < "she" >,
   SYNSEM.PHON.ONSET con ].

should_aux_neg_1 := va_modal_subj_neg_le &
 [ STEM < "shouldn't" >,
   SYNSEM [ LKEYS.KEYREL.PRED _should_v_rel,
            PHON.ONSET con ] ].

should_aux_pos := va_modal_subj_pos_le &
 [ STEM < "should" >,
   SYNSEM [ LKEYS.KEYREL.PRED _should_v_rel,
            PHON.ONSET con ] ].

show_as_v1 := v_subj_equi_empty_prep_le &
 [ STEM < "show" >,
   SYNSEM [ LKEYS [ --COMPKEY _as_p_sel_rel,
                    KEYREL.PRED "_show_v_as_rel" ],
            PHON.ONSET con ] ].

show_n1 := n_ppof_le &
 [ STEM < "show" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_show_n_rel",
            PHON.ONSET con ] ].

show_up_v1 := v_particle_le &
 [ STEM < "show" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_show_v_up_rel" ],
            PHON.ONSET con ] ].

show_v1 := v_ditrans_le &
 [ STEM < "show" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_show_v_1_rel",
            PHON.ONSET con ] ].

show_v2 := v_np*_trans_le &
 [ STEM < "show" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_show_v_1_rel",
            PHON.ONSET con ] ].

show_v3 := v_np*_trans_cp_le &
 [ STEM < "show" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_show_v_1_rel",
            PHON.ONSET con ] ].

show_v4 := v_obj_equi_prd_adj_le &
 [ STEM < "show" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_show_v_1_rel",
            PHON.ONSET con ] ].

show_v6 := v_subj_equi_prd_adj_le &
 [ STEM < "show" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_show_v_1_rel",
            PHON.ONSET con ] ].

showing_n1 := n_ppof_le &
 [ STEM < "showing" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_showing_n_rel",
            PHON.ONSET con ] ].

sleep_in_v1 := v_particle_le &
 [ STEM < "sleep" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_sleep_v_in_rel" ],
            PHON.ONSET con ] ].

sleep_n1 := n_mass_le &
 [ STEM < "sleep" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sleep_n_rel",
            PHON.ONSET con ] ].

sleep_v1 := v_unerg_le &
 [ STEM < "sleep" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sleep_v_1_rel",
            PHON.ONSET con ] ].

smile_at_v1 := v_empty_prep_intrans_le &
 [ STEM < "smile" >,
   SYNSEM [ LKEYS [ --COMPKEY _at_p_sel_rel,
                    KEYREL.PRED "_smile_v_at_rel" ],
            PHON.ONSET con ] ].

smile_n1 := n_intr_le &
 [ STEM < "smile" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_smile_n_rel",
            PHON.ONSET con ] ].

smile_v1 := v_np*_trans_le &
 [ STEM < "smile" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_smile_v_1_rel",
            PHON.ONSET con ] ].

so_a1 := adj_pred_nomod_le &
 [ STEM < "so" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_so_a_rel",
            PHON.ONSET con ] ].

so_adv2 := adv_int_vp_pre_le &
 [ STEM < "so" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_so_a_rel",
            PHON.ONSET con ] ].

so_conj := conj_complex_so_le &
 [ STEM < "so" >,
   SYNSEM.PHON.ONSET con ].

so_cp := s_compl_phrase_le &
 [ STEM < "so" >,
   SYNSEM.PHON.ONSET con ].

so_deg := so_degree_spec_le &
 [ STEM < "so" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_so_x_deg_rel",
            PHON.ONSET con ] ].

so_deg_nc := comp_degree_spec_nc_le &
 [ STEM < "so" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_so_x_deg_rel",
            PHON.ONSET con ] ].

so_root := adv_s_pre_word_root_le &
 [ STEM < "so" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_so_a_rel",
            PHON.ONSET con ] ].

so_that_dadv := p_subconj_dadv_le &
 [ STEM < "so" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_so+that_x_rel",
            PHON.ONSET con ] ].

some := det_part_div_le &
 [ STEM < "some" >,
   SYNSEM [ LKEYS.KEYREL.PRED _some_q_rel,
            PHON.ONSET con ] ].

some_indiv := det_nondiv_le &
 [ STEM < "some" >,
   SYNSEM [ LKEYS.KEYREL.PRED _some_q_indiv_rel,
            PHON.ONSET con ] ].

soon_adv1 := n_adv_gradable_nom_le &
 [ STEM < "soon" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED _soon_p_rel,
                    KEYREL.PRED _time_n_rel ],
            PHON.ONSET con ] ].

soon_aux_adv := adv_int_vp_aux_le &
 [ STEM < "soon" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_soon_a_rel",
            PHON.ONSET con ] ].

sq_pct := punct_sq_le &
 [ STEM < "'" >,
   SYNSEM.PHON.ONSET onset ].

staff_n1 := n_ppof_le &
 [ STEM < "staff" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_staff_n_rel",
            PHON.ONSET con ] ].

staff_n2 := n_plur_ppcomp_le &
 [ STEM < "staff" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_staff_n_rel" ],
            PHON.ONSET con ] ].

staff_v1 := v_np_trans_le &
 [ STEM < "staff" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_staff_v_rel",
            PHON.ONSET con ] ].

stand1 := v_unerg_le &
 [ STEM < "stand" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stand_v_1_rel",
            PHON.ONSET con ] ].

stand_for_v1 := v_empty_prep_intrans_le &
 [ STEM < "stand" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_stand_v_for_rel" ],
            PHON.ONSET con ] ].

stand_in_for_v1 := v_particle_pp_le &
 [ STEM < "stand" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    --OCOMPKEY _for_p_rel,
                    KEYREL.PRED "_stand_v_in+for_rel" ],
            PHON.ONSET con ] ].

stand_in_v3 := v_particle_le &
 [ STEM < "stand" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_stand_v_in_rel" ],
            PHON.ONSET con ] ].

stand_n1 := n_intr_le &
 [ STEM < "stand" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stand_n_rel",
            PHON.ONSET con ] ].

stand_out_v1 := v_particle_le &
 [ STEM < "stand" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_stand_v_out_rel" ],
            PHON.ONSET con ] ].

stand_up_for_v1 := v_particle_pp_le &
 [ STEM < "stand" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    --OCOMPKEY _for_p_rel,
                    KEYREL.PRED "_stand_v_up+for_rel" ],
            PHON.ONSET con ] ].

stand_up_v1 := v_particle_np_le &
 [ STEM < "stand" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_stand_v_up_rel" ],
            PHON.ONSET con ] ].

stand_up_v2 := v_particle_le &
 [ STEM < "stand" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_stand_v_up_rel" ],
            PHON.ONSET con ] ].

stand_v1_i := v_np_non_trans_idiom_le &
 [ STEM < "stand" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stand_v_i_rel",
            PHON.ONSET con ] ].

stand_v2 := v_subj_equi_prd_adj_le &
 [ STEM < "stand" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stand_v_1_rel",
            PHON.ONSET con ] ].

suppose_v1 := v_cp_prop*_non_trans_le &
 [ STEM < "suppose" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_suppose_v_rel",
            PHON.ONSET con ] ].

suppose_v2 := v_cp_prop_raise_key_bse_le &
 [ STEM < "suppose" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_suppose_v_rel",
            PHON.ONSET con ] ].

suppose_v2_non3sg := v_cp_prop_raise_key_presnon3sg_le &
 [ STEM < "suppose" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_suppose_v_rel",
            PHON.ONSET con ] ].

talk_about_v1 := v_empty_prep_non_trans_le &
 [ STEM < "talk" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _about_p_sel_rel,
                    KEYREL.PRED "_talk_v_about_rel" ],
            PHON.ONSET con ] ].

talk_into_v1 := v_empty_prep_trans_le &
 [ STEM < "talk" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _into_p_sel_rel,
                    KEYREL.PRED "_talk_v_into_rel" ],
            PHON.ONSET con ] ].

talk_n1 := n_ppof_le &
 [ STEM < "talk" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_talk_n_rel",
            PHON.ONSET con ] ].

talk_n2 := n_ppcomp_oblig_le &
 [ STEM < "talk" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_talk_n_rel" ],
            PHON.ONSET con ] ].

talk_of_v1 := v_empty_prep_intrans_le &
 [ STEM < "talk" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_talk_v_of_rel" ],
            PHON.ONSET con ] ].

talk_over_v1 := v_particle_np_le &
 [ STEM < "talk" >,
   SYNSEM [ LKEYS [ --COMPKEY _over_p_sel_rel,
                    KEYREL.PRED "_talk_v_over_rel" ],
            PHON.ONSET con ] ].

talk_v1 := v_double_pp*_le &
 [ STEM < "talk" >,
   SYNSEM [ LKEYS [ --COMPKEY to_or_with_p_rel,
                    --OCOMPKEY _about_p_rel,
                    KEYREL.PRED "_talk_v_about_rel" ],
            PHON.ONSET con ] ].

team_n1 := n_ppof_le &
 [ STEM < "team" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_team_n_rel",
            PHON.ONSET con ] ].

team_up_v1 := v_particle_le &
 [ STEM < "team" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_team_v_up_rel" ],
            PHON.ONSET con ] ].

telephone_n1 := n_intr_nosort_le &
 [ STEM < "telephone" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_telephone_n_rel",
            PHON.ONSET con ] ].

telephone_v1 := v_np*_trans_le &
 [ STEM < "telephone" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_telephone_v_rel",
            PHON.ONSET con ] ].

ten := adj_bare_unspecified_card_two_le &
 [ STEM < "ten" >,
   SYNSEM [ LKEYS.KEYREL.CARG "10",
            PHON.ONSET con ] ].

ten_day := n_day_of_month_card_le &
 [ STEM < "ten" >,
   SYNSEM [ LKEYS.KEYREL.CARG "10",
            PHON.ONSET con ] ].

ten_hour := n_hour_le &
 [ STEM < "ten" >,
   SYNSEM [ LKEYS.KEYREL.CARG "10",
            PHON.ONSET con ] ].

than_p1 := p_noslash_prtcl_le &
 [ STEM < "than" >,
   SYNSEM [ LKEYS.KEYREL.PRED _than_p_compar_rel,
            PHON.ONSET con ] ].

than_p1_nc := p_noslash_prtcl_ncomp_le &
 [ STEM < "than" >,
   SYNSEM [ LKEYS.KEYREL.PRED _than_p_compar_rel,
            PHON.ONSET con ] ].

than_p2 := p_than_le &
 [ STEM < "than" >,
   SYNSEM [ LKEYS.KEYREL.PRED _than_p_ind_rel,
            PHON.ONSET con ] ].

that_c := comp_that_le &
 [ STEM < "that" >,
   SYNSEM.PHON.ONSET con ].

that_c_subj := comp_that_subj_le &
 [ STEM < "that" >,
   SYNSEM.PHON.ONSET con ].

that_deg := adv_degree_spec_div_tt_le &
 [ STEM < "that" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_that_x_deg_rel",
            PHON.ONSET con ] ].

that_deix := n_deictic_pro_sg_le &
 [ STEM < "that" >,
   SYNSEM [ LKEYS.ALTKEYREL.PRED _that_q_dem_rel,
            PHON.ONSET con ] ].

that_det := det_sm_le &
 [ STEM < "that" >,
   SYNSEM [ LKEYS.KEYREL.PRED _that_q_dem_rel,
            PHON.ONSET con ] ].

that_is_root_post := adv_disc_posth_le &
 [ STEM < "that", "is" >,
   SYNSEM [ LKEYS.KEYREL.CARG "that_is",
            PHON.ONSET con ] ].

that_is_root_pre := adv_disc_preh_le &
 [ STEM < "that", "is" >,
   SYNSEM [ LKEYS.KEYREL.CARG "that_is",
            PHON.ONSET con ] ].

that_r := n_rel_pro_nonwh_le &
 [ STEM < "that" >,
   SYNSEM.PHON.ONSET con ].

that_r_npadv := n_rel_pro_npadv_le &
 [ STEM < "that" >,
   SYNSEM.PHON.ONSET con ].

the_1 := det_the_le &
 [ STEM < "the" >,
   SYNSEM [ LKEYS.KEYREL.PRED _the_q_rel,
            PHON.ONSET con ] ].

the_most_det := det_part_pl_mass_le &
 [ STEM < "the", "most" >,
   SYNSEM [ LKEYS.KEYREL.PRED _the+most_q_rel,
            PHON.ONSET con ] ].

their := det_poss_their_le &
 [ STEM < "their" >,
   SYNSEM.PHON.ONSET con ].

them := n_pers_pro_them_le &
 [ STEM < "them" >,
   SYNSEM.PHON.ONSET con ].

themselves := n_refl_pro_themselves_le &
 [ STEM < "themselves" >,
   SYNSEM.PHON.ONSET con ].

then_adv := n_adv_nospr_le &
 [ STEM < "then" >,
   SYNSEM [ LKEYS.ALT2KEYREL.PRED _then_p_temp_rel,
            PHON.ONSET con ] ].

then_adv2 := adv_int_vp_pre_le &
 [ STEM < "then" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_then_a_rel",
            PHON.ONSET con ] ].

then_conj_1 := conj_complex_then_le &
 [ STEM < "then" >,
   SYNSEM.PHON.ONSET con ].

then_disc_post := adv_disc_posth_le &
 [ STEM < "then" >,
   SYNSEM [ LKEYS.KEYREL.CARG "then",
            PHON.ONSET con ] ].

then_disc_pre := adv_disc_preh_le &
 [ STEM < "then" >,
   SYNSEM [ LKEYS.KEYREL.CARG "then",
            PHON.ONSET con ] ].

there_expl := n_expl_there_le &
 [ STEM < "there" >,
   SYNSEM.PHON.ONSET con ].

there_nom := n_adv_acc_le &
 [ STEM < "there" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED _there_a_rel,
                    KEYREL.PRED _place_n_rel ],
            PHON.ONSET con ] ].

these_deix := n_deictic_pro_pl_le &
 [ STEM < "these" >,
   SYNSEM [ LKEYS.ALTKEYREL.PRED _these_q_dem_rel,
            PHON.ONSET con ] ].

these_det := det_pl_le &
 [ STEM < "these" >,
   SYNSEM [ LKEYS.KEYREL.PRED _these_q_dem_rel,
            PHON.ONSET con ] ].

they := n_pers_pro_they_le &
 [ STEM < "they" >,
   SYNSEM.PHON.ONSET con ].

they_sg := n_pers_pro_noagr_le &
 [ STEM < "they" >,
   SYNSEM.PHON.ONSET con ].

think1 := v_cp_prop_non_trans_le &
 [ STEM < "think" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_think_v_1_rel",
            PHON.ONSET con ] ].

think2 := v_prep_intrans_event_le &
 [ STEM < "think" >,
   SYNSEM [ LKEYS [ --COMPKEY loc_abstr_rel,
                    KEYREL.PRED "_think_v_loc_rel" ],
            PHON.ONSET con ] ].

think_about := v_empty_prep_trans*_le &
 [ STEM < "think" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _about_p_sel_rel,
                    KEYREL.PRED "_think_v_about_rel" ],
            PHON.ONSET con ] ].

think_of := v_empty_prep_trans*_le &
 [ STEM < "think" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_think_v_of_rel" ],
            PHON.ONSET con ] ].

think_quote_v1 := v_quote_top_le &
 [ STEM < "think" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_think_v_1_rel",
            PHON.ONSET con ] ].

think_quote_v2 := v_quote_inv_le &
 [ STEM < "think" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_think_v_1_rel",
            PHON.ONSET con ] ].

think_quote_v3 := v_quote_mc_le &
 [ STEM < "think" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_think_v_1_rel",
            PHON.ONSET con ] ].

think_through_v1 := v_particle_np_le &
 [ STEM < "think" >,
   SYNSEM [ LKEYS [ --COMPKEY _through_p_sel_rel,
                    KEYREL.PRED "_think_v_through_rel" ],
            PHON.ONSET con ] ].

think_up_v1 := v_particle_np_le &
 [ STEM < "think" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_think_v_up_rel" ],
            PHON.ONSET con ] ].

think_v3 := v_np*_non_trans_le &
 [ STEM < "think" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_think_v_1_rel",
            PHON.ONSET con ] ].

thirty := adj_bare_unspecified_card_two_le &
 [ STEM < "thirty" >,
   SYNSEM [ LKEYS.KEYREL.CARG "30",
            PHON.ONSET con ] ].

thirty_day := n_day_of_month_card_le &
 [ STEM < "thirty" >,
   SYNSEM [ LKEYS.KEYREL.CARG "30",
            PHON.ONSET con ] ].

thirty_w_comps := adj_complemented_unspecified_card_le &
 [ STEM < "thirty" >,
   SYNSEM [ LKEYS.KEYREL.CARG "30",
            PHON.ONSET con ] ].

this_deg := adv_degree_spec_div_tt_le &
 [ STEM < "this" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_this_x_deg_rel",
            PHON.ONSET con ] ].

this_deix := n_deictic_pro_sg_le &
 [ STEM < "this" >,
   SYNSEM [ LKEYS.ALTKEYREL.PRED _this_q_dem_rel,
            PHON.ONSET con ] ].

this_det := det_sm_le &
 [ STEM < "this" >,
   SYNSEM [ LKEYS.KEYREL.PRED _this_q_dem_rel,
            PHON.ONSET con ] ].

those_deix := n_deictic_pro_pl_le &
 [ STEM < "those" >,
   SYNSEM [ LKEYS.ALTKEYREL.PRED _those_q_dem_rel,
            PHON.ONSET con ] ].

those_det := det_pl_le &
 [ STEM < "those" >,
   SYNSEM [ LKEYS.KEYREL.PRED _those_q_dem_rel,
            PHON.ONSET con ] ].

three := adj_bare_unspecified_card_one_le &
 [ STEM < "three" >,
   SYNSEM [ LKEYS.KEYREL.CARG "3",
            PHON.ONSET con ] ].

three_c := adj_bare_unspecified_card_wcomps_one_le &
 [ STEM < "three" >,
   SYNSEM [ LKEYS.KEYREL.CARG "3",
            PHON.ONSET con ] ].

three_day := n_day_of_month_card_le &
 [ STEM < "three" >,
   SYNSEM [ LKEYS.KEYREL.CARG "3",
            PHON.ONSET con ] ].

three_hour := n_hour_le &
 [ STEM < "three" >,
   SYNSEM [ LKEYS.KEYREL.CARG "3",
            PHON.ONSET con ] ].

time_a1 := adj_atrans_pp_le &
 [ STEM < "time" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_time_a_expl_rel" ],
            PHON.ONSET con ] ].

time_a2 := adj_reg_atrans_le &
 [ STEM < "time" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_time_a_expl_rel",
            PHON.ONSET con ] ].

time_n1 := n_mass_count_time_le &
 [ STEM < "time" >,
   SYNSEM [ LKEYS.KEYREL.PRED _time_n_rel,
            PHON.ONSET con ] ].

time_n2 := n_temp_ppcomp_time_le &
 [ STEM < "time" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_nbar_rel,
                    KEYREL.PRED "_time_n_rel" ],
            PHON.ONSET con ] ].

time_v1 := v_np_trans_le &
 [ STEM < "time" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_time_v_rel",
            PHON.ONSET con ] ].

to := p_no_nmod_le &
 [ STEM < "to" >,
   SYNSEM [ LKEYS.KEYREL.PRED _to_p_rel,
            PHON.ONSET con ] ].

to_c_nonprop := comp_to_nonprop_le &
 [ STEM < "to" >,
   SYNSEM.PHON.ONSET con ].

to_c_nonprop_elided := comp_to_nonprop_elided_le &
 [ STEM < "to" >,
   SYNSEM.PHON.ONSET con ].

to_c_prop := comp_to_prop_le &
 [ STEM < "to" >,
   SYNSEM.PHON.ONSET con ].

to_c_prop_elided := comp_to_prop_elided_le &
 [ STEM < "to" >,
   SYNSEM.PHON.ONSET con ].

to_nbar_p := p_nbar_comp_nomod_to_le &
 [ STEM < "to" >,
   SYNSEM [ LKEYS.KEYREL.PRED _to_p_interval_rel,
            PHON.ONSET con ] ].

to_nmod := p_nmod_no_tmod_le &
 [ STEM < "to" >,
   SYNSEM [ LKEYS.KEYREL.PRED _to_p_rel,
            PHON.ONSET con ] ].

to_prtcl := p_prtcl_le &
 [ STEM < "to" >,
   SYNSEM [ LKEYS.KEYREL.PRED _to_p_sel_rel,
            PHON.ONSET con ] ].

to_subord := p_subconj_inf_le &
 [ STEM < "to" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_in+order+to_x_rel",
            PHON.ONSET con ] ].

too := adv_vp_post_le &
 [ STEM < "too" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_too_a_also_rel",
            PHON.ONSET con ] ].

too_deg := too_degree_spec_le &
 [ STEM < "too" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_too_x_deg_rel",
            PHON.ONSET con ] ].

too_deg_nc := comp_degree_spec_nc_le &
 [ STEM < "too" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_too_x_deg_rel",
            PHON.ONSET con ] ].

too_deg_sl := too_degree_spec_sl_le &
 [ STEM < "too" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_too_x_deg_rel",
            PHON.ONSET con ] ].

true_a1 := adj_trans_le &
 [ STEM < "true" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_true_a_rel" ],
            PHON.ONSET con ] ].

true_a2 := adj_reg_atrans_that_cp_le &
 [ STEM < "true" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_true_a_rel",
            PHON.ONSET con ] ].

trustworthy_a1 := adj_intrans_le &
 [ STEM < "trustworthy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_trustworthy_a_rel",
            PHON.ONSET con ] ].

tuesday_n1 := n_day_of_week_le &
 [ STEM < "tuesday" >,
   SYNSEM [ LKEYS.KEYREL.CARG "tue",
            PHON.ONSET con ] ].

twice_adv1 := adv_int_vp_post_le &
 [ STEM < "twice" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_twice_a_rel",
            PHON.ONSET con ] ].

twice_deg := adv_degree_spec_v_le &
 [ STEM < "twice" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_twice_x_deg_rel",
            PHON.ONSET con ] ].

two := adj_bare_unspecified_card_one_le &
 [ STEM < "two" >,
   SYNSEM [ LKEYS.KEYREL.CARG "2",
            PHON.ONSET con ] ].

two_c := adj_bare_unspecified_card_wcomps_one_le &
 [ STEM < "two" >,
   SYNSEM [ LKEYS.KEYREL.CARG "2",
            PHON.ONSET con ] ].

two_day := n_day_of_month_card_le &
 [ STEM < "two" >,
   SYNSEM [ LKEYS.KEYREL.CARG "2",
            PHON.ONSET con ] ].

two_digit_day := n_day_of_month_card_le &
 [ STEM < "twodigitersatz" >,
   SYNSEM [ LKEYS.KEYREL.CARG "twodigitersatz",
            PHON.ONSET con ] ].

two_digit_euro_day := n_day_of_month_euro_le &
 [ STEM < "twodigitersatz" >,
   SYNSEM [ LKEYS.KEYREL.CARG "twodigitersatz",
            PHON.ONSET con ] ].

two_digit_hour := n_hour_le &
 [ STEM < "twodigitersatz" >,
   SYNSEM [ LKEYS.KEYREL.CARG "twodigitersatz",
            PHON.ONSET con ] ].

two_hour := n_hour_le &
 [ STEM < "two" >,
   SYNSEM [ LKEYS.KEYREL.CARG "2",
            PHON.ONSET con ] ].

u_pro := n_pers_pro_you_le &
 [ STEM < "u" >,
   SYNSEM.PHON.ONSET con ].

unevaluated_a1 := adj_attr_intrans_le &
 [ STEM < "unevaluated" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unevaluated_a_rel",
            PHON.ONSET voc ] ].

unevaluated_v1 := v_unerg_psv_le &
 [ STEM < "unevaluated" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unevaluated_v_rel",
            PHON.ONSET voc ] ].

until := p_no_nmod_nopro_le &
 [ STEM < "until" >,
   SYNSEM [ LKEYS.KEYREL.PRED _until_p_rel,
            PHON.ONSET voc ] ].

until2 := p_subconj_le &
 [ STEM < "until" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_until_x_h_rel",
            PHON.ONSET voc ] ].

until_prtcl := p_prtcl_le &
 [ STEM < "until" >,
   SYNSEM [ LKEYS.KEYREL.PRED _until_p_sel_rel,
            PHON.ONSET voc ] ].

urge1 := v_obj_equi_le &
 [ STEM < "urge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_urge_v_to_rel",
            PHON.ONSET voc ] ].

urge_n1 := n_intr_le &
 [ STEM < "urge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_urge_n_rel",
            PHON.ONSET voc ] ].

urge_v2 := v_cp_subj_le &
 [ STEM < "urge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_urge_v_rel",
            PHON.ONSET voc ] ].

urge_v3 := v_np_trans_le &
 [ STEM < "urge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_urge_v_rel",
            PHON.ONSET voc ] ].

us := n_pers_pro_us_le &
 [ STEM < "us" >,
   SYNSEM.PHON.ONSET con ].

us_n1 := n_intr_named_le &
 [ STEM < "us" >,
   SYNSEM [ LKEYS.KEYREL.CARG "us",
            PHON.ONSET con ] ].

use_n1 := n_mass_count_ppof_le &
 [ STEM < "use" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_use_n_rel",
            PHON.ONSET con ] ].

use_n1_i := n_intr_nospr_le &
 [ STEM < "use" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_use_n_i_rel",
            PHON.ONSET con ] ].

use_of_v1 := v_np_prep_trans_le &
 [ STEM < "use" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _of_p_rel,
                    KEYREL.PRED "_use_v_1_rel" ],
            PHON.ONSET voc ] ].

use_up_v1 := v_particle_np_le &
 [ STEM < "use" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_use_v_up_rel" ],
            PHON.ONSET con ] ].

use_v1 := v_np_trans_le &
 [ STEM < "use" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_use_v_1_rel",
            PHON.ONSET con ] ].

use_v2 := v_anom_equi_trans_le &
 [ STEM < "use" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_use_v_1_rel",
            PHON.ONSET con ] ].

use_v3 := v_np_comp_le &
 [ STEM < "use" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _as_p_sel_rel,
                    KEYREL.PRED "_use_v_as_rel" ],
            PHON.ONSET con ] ].

used_a1 := adj_trans_oblig_le &
 [ STEM < "used" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_used_a_to_rel" ],
            PHON.ONSET con ] ].

used_a2 := adj_intrans_le &
 [ STEM < "used" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_used_a_1_rel",
            PHON.ONSET con ] ].

used_to_aux_pos := va_past_ought_pos_le &
 [ STEM < "used" >,
   SYNSEM [ LKEYS.KEYREL.PRED _used+to_v_aux_rel,
            PHON.ONSET con ] ].

walk_n1 := n_intr_le &
 [ STEM < "walk" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_walk_n_rel",
            PHON.ONSET con ] ].

walk_over_v1 := v_particle_le &
 [ STEM < "walk" >,
   SYNSEM [ LKEYS [ --COMPKEY _over_p_sel_rel,
                    KEYREL.PRED "_walk_v_over_rel" ],
            PHON.ONSET con ] ].

walk_v1 := v_prep_dir_le &
 [ STEM < "walk" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_walk_v_1_rel",
            PHON.ONSET con ] ].

walk_v2 := v_np_trans_le &
 [ STEM < "walk" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_walk_v_1_rel",
            PHON.ONSET con ] ].

washington_n2 := n_proper_abb_le &
 [ STEM < "wa" >,
   SYNSEM [ LKEYS.KEYREL.CARG "washington",
            PHON.ONSET con ] ].

we := n_pers_pro_we_le &
 [ STEM < "we" >,
   SYNSEM.PHON.ONSET con ].

what1 := n_wh_pro_le &
 [ STEM < "what" >,
   SYNSEM [ LKEYS.KEYREL.PRED thing_rel,
            PHON.ONSET con ] ].

what2 := n_freerel_pro_le &
 [ STEM < "what" >,
   SYNSEM [ LKEYS.KEYREL.PRED thing_rel,
            PHON.ONSET con ] ].

what_det := det_wh_le &
 [ STEM < "what" >,
   SYNSEM [ LKEYS.KEYREL.PRED _which_q_rel,
            PHON.ONSET con ] ].

what_det_freerel := det_freerel_le &
 [ STEM < "what" >,
   SYNSEM [ LKEYS.KEYREL.PRED free_relative_q_rel,
            PHON.ONSET con ] ].

when2 := pp_rel_le &
 [ STEM < "when" >,
   SYNSEM [ LKEYS [ ALTKEYREL.PRED temp_rel,
                    KEYREL.PRED temp_loc_rel ],
            PHON.ONSET con ] ].

when_freerel_np := n_freerel_pro_adv_le &
 [ STEM < "when" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED temp_loc_rel,
                    KEYREL.PRED temp_rel ],
            PHON.ONSET con ] ].

when_nom := n_wh_adv_tm_le &
 [ STEM < "when" >,
   SYNSEM.PHON.ONSET con ].

when_p1 := p_prdp_le &
 [ STEM < "when" >,
   SYNSEM [ LKEYS.KEYREL.PRED temp_loc_rel,
            PHON.ONSET con ] ].

when_subord_prd := p_subconj_prd_le &
 [ STEM < "when" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_when_x_subord_rel",
            PHON.ONSET con ] ].

whenever_freerel_np := n_freerel_ever_pro_adv_le &
 [ STEM < "whenever" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED temp_loc_rel,
                    KEYREL.PRED temp_rel ],
            PHON.ONSET con ] ].

where2 := pp_rel_le &
 [ STEM < "where" >,
   SYNSEM [ LKEYS [ ALTKEYREL.PRED _place_n_rel,
                    KEYREL.PRED unspec_loc_rel ],
            PHON.ONSET con ] ].

where_freerel_np := n_freerel_pro_adv_le &
 [ STEM < "where" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED unspec_loc_rel,
                    KEYREL.PRED _place_n_rel ],
            PHON.ONSET con ] ].

where_nom := n_wh_adv_pl_le &
 [ STEM < "where" >,
   SYNSEM.PHON.ONSET con ].

whether_c_fin := comp_whether_fin_le &
 [ STEM < "whether" >,
   SYNSEM.PHON.ONSET con ].

whether_c_inf := comp_whether_inf_le &
 [ STEM < "whether" >,
   SYNSEM.PHON.ONSET con ].

which1 := det_part_unsp_le &
 [ STEM < "which" >,
   SYNSEM [ LKEYS.KEYREL.PRED _which_q_rel,
            PHON.ONSET con ] ].

which_r := n_rel_pro_what_le &
 [ STEM < "which" >,
   SYNSEM.PHON.ONSET con ].

while := p_subconj_le &
 [ STEM < "while" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_while_x_rel",
            PHON.ONSET con ] ].

while_n1 := n_temp_nomod_le &
 [ STEM < "while" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_while_n_rel",
            PHON.ONSET con ] ].

while_prd := p_subconj_prd_le &
 [ STEM < "while" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_while_x_rel",
            PHON.ONSET con ] ].

who1 := n_wh_pro_le &
 [ STEM < "who" >,
   SYNSEM [ LKEYS.KEYREL.PRED person_rel,
            PHON.ONSET con ] ].

who2 := n_rel_pro_who_le &
 [ STEM < "who" >,
   SYNSEM.PHON.ONSET con ].

whom1 := n_wh_pro_acc_le &
 [ STEM < "whom" >,
   SYNSEM [ LKEYS.KEYREL.PRED person_rel,
            PHON.ONSET con ] ].

whom2 := n_rel_pro_acc_le &
 [ STEM < "whom" >,
   SYNSEM.PHON.ONSET con ].

whose_1 := det_wh_poss_le &
 [ STEM < "whose" >,
   SYNSEM [ LKEYS.ALTKEYREL.PRED person_rel,
            PHON.ONSET con ] ].

whose_2 := det_rel_poss_le &
 [ STEM < "whose" >,
   SYNSEM.PHON.ONSET con ].

will_aux_neg_1 := va_will_neg_le &
 [ STEM < "won't" >,
   SYNSEM [ LKEYS.KEYREL.PRED _will_v_aux_rel,
            PHON.ONSET con ] ].

will_aux_pos := va_will_pos_le &
 [ STEM < "will" >,
   SYNSEM [ LKEYS.KEYREL.PRED _will_v_aux_rel,
            PHON.ONSET con ] ].

will_aux_pos_cx_2 := va_will_pos_cx_le &
 [ STEM < "'ll" >,
   SYNSEM [ LKEYS.KEYREL.PRED _will_v_aux_rel,
            PHON.ONSET con ] ].

will_n1 := n_intr_le &
 [ STEM < "will" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_will_n_rel",
            PHON.ONSET con ] ].

will_n2 := n_proper_le &
 [ STEM < "will" >,
   SYNSEM [ LKEYS.KEYREL.CARG "will",
            PHON.ONSET con ] ].

win_n1 := n_intr_le &
 [ STEM < "win" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_win_n_rel",
            PHON.ONSET con ] ].

win_v1 := v_np*_trans_le &
 [ STEM < "win" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_win_v_rel",
            PHON.ONSET con ] ].

with_p := p_le &
 [ STEM < "with" >,
   SYNSEM [ LKEYS.KEYREL.PRED _with_p_rel,
            PHON.ONSET con ] ].

with_prtcl := p_prtcl_le &
 [ STEM < "with" >,
   SYNSEM [ LKEYS.KEYREL.PRED _with_p_sel_rel,
            PHON.ONSET con ] ].

with_subord := p_subconj_nocop_le &
 [ STEM < "with" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_with_x_subord_rel",
            PHON.ONSET con ] ].

without := p_le &
 [ STEM < "without" >,
   SYNSEM [ LKEYS.KEYREL.PRED _without_p_rel,
            PHON.ONSET con ] ].

without_nbar := p_nbar_comp_le &
 [ STEM < "without" >,
   SYNSEM [ LKEYS.KEYREL.PRED _without_p_rel,
            PHON.ONSET con ] ].

without_prtcl := p_prtcl_le &
 [ STEM < "without" >,
   SYNSEM [ LKEYS.KEYREL.PRED _without_p_sel_rel,
            PHON.ONSET con ] ].

woman1 := n_intr_le &
 [ STEM < "woman" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_woman_n_rel",
            PHON.ONSET con ] ].

wonder_about_v1 := v_empty_prep_intrans_le &
 [ STEM < "wonder" >,
   SYNSEM [ LKEYS [ --COMPKEY _about_p_sel_rel,
                    KEYREL.PRED "_wonder_v_rel" ],
            PHON.ONSET con ] ].

wonder_n1 := n_mass_count_le &
 [ STEM < "wonder" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wonder_n_rel",
            PHON.ONSET con ] ].

wonder_v1 := v_cp_ques_fin_inf_non_trans_le &
 [ STEM < "wonder" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wonder_v_rel",
            PHON.ONSET con ] ].

wonder_v2 := v_unerg_le &
 [ STEM < "wonder" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wonder_v_rel",
            PHON.ONSET con ] ].

work_in_v1 := v_particle_np_le &
 [ STEM < "work" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_work_v_in_rel" ],
            PHON.ONSET con ] ].

work_n1 := n_mass_count_le &
 [ STEM < "work" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_work_n_rel",
            PHON.ONSET con ] ].

work_on_v1 := v_empty_prep_intrans_le &
 [ STEM < "work" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_work_v_on_rel" ],
            PHON.ONSET con ] ].

work_out_v1 := v_particle_np_le &
 [ STEM < "work" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_work_v_out_rel" ],
            PHON.ONSET con ] ].

work_out_v2 := v_particle_le &
 [ STEM < "work" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_work_v_out_rel" ],
            PHON.ONSET con ] ].

work_through_v1 := v_empty_prep_intrans_le &
 [ STEM < "work" >,
   SYNSEM [ LKEYS [ --COMPKEY _through_p_sel_rel,
                    KEYREL.PRED "_work_v_through_rel" ],
            PHON.ONSET con ] ].

work_v1 := v_unerg_le &
 [ STEM < "work" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_work_v_1_rel",
            PHON.ONSET con ] ].

working_a1 := adj_attr_intrans_le &
 [ STEM < "working" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_working_a_rel",
            PHON.ONSET con ] ].

would_aux_pos := va_would_pos_le &
 [ STEM < "would" >,
   SYNSEM [ LKEYS.KEYREL.PRED _would_v_rel,
            PHON.ONSET con ] ].

would_aux_pos_cx_2 := va_would_pos_cx_le &
 [ STEM < "'d" >,
   SYNSEM [ LKEYS.KEYREL.PRED _would_v_rel,
            PHON.ONSET con ] ].

x_to_y_adj_- := adj_x_to_y_le &
 [ STEM < "-" >,
   SYNSEM.PHON.ONSET con ].

x_to_y_adj_to := adj_x_to_y_le &
 [ STEM < "to" >,
   SYNSEM.PHON.ONSET con ].

x_to_y_np_pl_- := n_x_to_y_plur_le &
 [ STEM < "-" >,
   SYNSEM.PHON.ONSET con ].

x_to_y_np_pl_to := n_x_to_y_plur_le &
 [ STEM < "to" >,
   SYNSEM.PHON.ONSET con ].

x_to_y_np_sg_- := n_x_to_y_sg_le &
 [ STEM < "-" >,
   SYNSEM.PHON.ONSET con ].

x_to_y_np_sg_to := n_x_to_y_sg_le &
 [ STEM < "to" >,
   SYNSEM.PHON.ONSET con ].

x_to_y_np_until := n_x_to_y_sg_le &
 [ STEM < "until" >,
   SYNSEM.PHON.ONSET voc ].

year_n1 := n_temp_ppcomp_year_le &
 [ STEM < "year" >,
   SYNSEM [ LKEYS.KEYREL.PRED _year_n_rel,
            PHON.ONSET con ] ].

year_ttl := n_title_le &
 [ STEM < "year" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_year_n_rel",
            PHON.ONSET con ] ].

you := n_pers_pro_you_le &
 [ STEM < "you" >,
   SYNSEM.PHON.ONSET con ].

yourselves := n_refl_pro_yourselves_le &
 [ STEM < "yourselves" >,
   SYNSEM.PHON.ONSET con ].
