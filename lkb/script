(time (let ((data-dir1 (make-pathname :directory 
                                '(:absolute "eo" "e1" "users" "dan" 
                                                           "grammar" "lkb")))
            (data-dir2 (make-pathname :directory 
                                '(:absolute "eo" "e1" "users" "dan" 
                                                           "grammar")))
)
   (setf *lkb-system-version* :page)
   (load (merge-pathnames
         (make-pathname :name "globals.lsp")
         data-dir1))
   (load (merge-pathnames
         (make-pathname :name "user-fns.lsp")
         data-dir1))
   (load (merge-pathnames
         (make-pathname :name "lkb-code-patches.lsp")
         data-dir1))
   (load (merge-pathnames
         (make-pathname :name "templates.lsp")
         data-dir1))
   (load (merge-pathnames
         (make-pathname :name "checkpaths.lsp")
         data-dir1))
   (read-irreg-form-file (merge-pathnames (make-pathname :name "irregs.tab")
                                          data-dir1))
   (read-tdl-type-files-aux
      (list
         (merge-pathnames
            (make-pathname :name "extra.tdl")
            data-dir1)
         (merge-pathnames
            (make-pathname :name "fundamentals.tdl")
            data-dir2)
         (merge-pathnames
            (make-pathname :name "lextypes.tdl")
            data-dir2)
         (merge-pathnames
            (make-pathname :name "syntax.tdl")
            data-dir2)
         (merge-pathnames
            (make-pathname :name "lexrules.tdl")
            data-dir2)
         (merge-pathnames
            (make-pathname :name "letypes.tdl")
            data-dir2)
         (merge-pathnames
            (make-pathname :name "auxverbs.tdl")
            data-dir2)
         (merge-pathnames
            (make-pathname :name "lkbpatches.tdl")
            data-dir1)
;         (merge-pathnames
;            (make-pathname :name "minisemrels.tdl")
;            data-dir1)
         (merge-pathnames
            (make-pathname :name "semrels.tdl")
            data-dir2)
         ))
   (setf *current-language* 'english)
;   (read-tdl-lex-file-aux (merge-pathnames
;         (make-pathname :name "minilex.tdl")
;         data-dir1) t)
   (read-tdl-lex-file-aux (merge-pathnames
         (make-pathname :name "lexicon.tdl")
         data-dir2) t)
   (read-tdl-grammar-file-aux (merge-pathnames 
         (make-pathname :name "constructions.tdl")
         data-dir2) t)
;;; morph rule files have to be read in twice -
;;; once as a morph file and again as a lexical rules file
;;; sigh ...
   (morph-file-read-aux (merge-pathnames 
         (make-pathname :name "inflr.lrl")
         data-dir1) t)
   (read-lex-rule-file-aux (merge-pathnames 
         (make-pathname :name "inflr.lrl")
         data-dir1) t)
   (read-tdl-psort-file-aux (merge-pathnames 
         (make-pathname :name "roots.tdl")
         data-dir2))
   (read-tdl-lex-rule-file-aux (merge-pathnames 
         (make-pathname :name "lexrinst.tdl")
         data-dir2) nil)
   (read-tdl-psort-file-aux (merge-pathnames 
         (make-pathname :name "parse-nodes.tdl")
         data-dir2) t)
   nil
   ))

; (time (batch-check-lexicon))

