;;; This file contains patches to the tdl files - i.e. changes which
;;; are necessary to make the TDL files work in the LKB which
;;; shouldn't be made to the TDL files themselves

;;; redefines stuff in fundamentals.tdl

*olist* :< *list*.

*ocons* := *olist* & *cons* &
  [ FIRST unexpressed & [ OPT + ],
    REST  *olist* ].

*onull* := *olist* & *null*.


*gaplist* :< *list*.

*gapcons* := *gaplist* & *cons* &
  [ FIRST gap,
    REST  *null* ].

*gapnull* := *gaplist* & *null*.

*unexplist* := *list*.

*unexpcons* := *unexplist* & *cons* &
  [ FIRST unexpressed,
    REST  *null* ].

;*unexpnull* := *unexplist* & *olist* & *null*.
*unexpnull* := *unexplist* & *onull*.

*prolist* := *list*.

*procons* := *prolist* & *cons* &
  [ FIRST pro_ss &
	  [ NON-LOCAL.SLASH <! !> ],
    REST *null* ].

*pronull* := *prolist* & *null*.

*substlist* :< *list*.

*substcons* := *substlist* & *cons* &
  [ FIRST.LOCAL.CAT.HEAD subst,
    REST  *substlist* ].

;*substnull* := *substlist* & *olist* & *null*.
*substnull* := *substlist* & *onull*.

*handlelist* := *list*.

*handlecons* := *handlelist* & 1-list &
  [ FIRST handle,
    REST  *null* ].

*handlenull* := *handlelist* & *onull*.

; LABEL and META used for labeling nodes in parse trees
; AAC - and they must have their features declared ...

label := sign &
   [ LABEL-NAME string ],
    status: label.

meta := sign &
  [  META-PREFIX string,
     META-SUFFIX string ],
    status: meta.

lex_entry := basic_lex_entry &
  [ INFLECTED - ].

standard_mle := basic_multi_lex_entry &
  [ INFLECTED - ].

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; The following patches are due to the need in Verbmobil to have "will, would"
;; and "going_to" be semantically empty.  Too hard to do with munging rules

quasimodal_word := generic_modal_verb_word & inf_aux_verb_word &
  [ SYNSEM.LOCAL [ CAT [ HEAD.MOD < >,
			 VAL [ SUBJ < @nomp_nom() > ] ],
		   CONT [ LISZT <! #key !>,
			  H-CONS <! qeq !> ],
		   KEYS.KEY #key ] ].

will_pos_lex_ent := pos_will_verb_word & add_cont & infl_lex_entry.
will_pos_le :< will_pos_lex_ent.
will_pos_cx_le := will_pos_lex_ent & contracted_aux_word.
will_neg_mle1 := will_verb_word & generic_modal_neg & basic_mle1.

would_aux_pos_le := modal_pos_le &
  [ SYNSEM.LOCAL [ CAT.HEAD.MOOD modal_subj*,
		   KEYS [ KEY [ LABEL #label,
				EVENT #event ],
			  --COMPKEY [ LABEL #label,
				      EVENT #event ] ] ] ].
would_aux_pos_cx_le := modal_pos_cx_le &
  [ SYNSEM.LOCAL [ CAT.HEAD.MOOD modal_subj*,
		   KEYS [ KEY.LABEL #label,
			  --COMPKEY.LABEL #label ] ] ].

would_aux_neg_le := modal_neg_le &
  [ SYNSEM.LOCAL [ CAT.HEAD.MOOD modal_subj*,
		   KEYS [ KEY.LABEL #label,
			  --COMPKEY.LABEL #label ] ] ].

would_aux_neg_mle1 := modal_neg_mle1 &
  [ SYNSEM.LOCAL [ CAT.HEAD.MOOD modal_subj*,
		   KEYS [ KEY.LABEL #label,
			  --COMPKEY.LABEL #label ] ] ].

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; PAGE does bring in constraints from inferred types at run time, so these
; redefinitions of subcat types are used in the LKB to reduce space usage.
; Unfortunately, they'll still have to be kept consistent by hand for now.

nomp_cat_min :< cat_min.

nomp_cat := nomp_cat_min & cat &
  [ HEAD nominal & strict_type &
	 [ POSS -,
	   PRD -,
	   MOOD ind_or_mod_subj ],
    VAL [ SUBJ *olist*,
	  SPR *olist*,
	  COMPS *olist* ],
    MC na_or_- ].

nomp_cat_nom_min :< nomp_cat_min.
nomp_cat_acc_min :< nomp_cat_min.

nomp_cat_nom := nomp_cat_nom_min & nomp_cat &
  [ HEAD.CASE nom ].

nomp_cat_acc := nomp_cat_acc_min & nomp_cat &
  [ HEAD mobile &  [ CASE acc ] ].

np_cat_nom_min :< nomp_cat_nom_min.
np_cat_acc_min :< nomp_cat_acc_min.

np_cat_nom := nomp_cat_nom & np_cat_nom_min &
  [ HEAD noun ].

np_cat_acc := nomp_cat_acc & np_cat_acc_min &
  [ HEAD noun ].

;;; 
;;; AAC - for generation - need a locus for instance
;;; specification that lives on a type which is never
;;; specialized futher

instloc :< *top*.

thing := mod-thing &
  [ INSTLOC instloc ].

