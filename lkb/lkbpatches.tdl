;;; This file contains patches to the tdl files - i.e. changes which
;;; are necessary to make the TDL files work in the LKB which
;;; shouldn't be made to the TDL files themselves

;;; redefines stuff in fundamentals.tdl

*olist* :< *list*.

*ocons* := *olist* & *cons* &
  [ FIRST unexpressed & [ OPT + ],
    REST  *olist* ].

*onull* := *olist* & *null*.


*gaplist* :< *list*.

*gapcons* := *gaplist* & *cons* &
  [ FIRST gap,
    REST  *null* ].

*gapnull* := *gaplist* & *null*.

*unexplist* := *list*.

*unexpcons* := *unexplist* & *cons* &
  [ FIRST unexpressed,
    REST  *null* ].

;*unexpnull* := *unexplist* & *olist* & *null*.
*unexpnull* := *unexplist* & *onull*.

*prolist* := *list*.

*procons* := *prolist* & *cons* &
  [ FIRST pro_ss &
	  [ NON-LOCAL.SLASH <! !> ],
    REST *null* ].

*pronull* := *prolist* & *null*.

*substlist* :< *list*.

*substcons* := *substlist* & *cons* &
  [ FIRST.LOCAL.CAT.HEAD subst,
    REST  *substlist* ].

;*substnull* := *substlist* & *olist* & *null*.
*substnull* := *substlist* & *onull*.

*handlelist* := *list*.

*handlecons* := *handlelist* & 1-list &
  [ FIRST handle,
    REST  *null* ].

*handlenull* := *handlelist* & *onull*.

; LABEL and META used for labeling nodes in parse trees
; AAC - and they must have their features declared ...

label := sign &
   [ LABEL-NAME symbol ],
    status: label.

meta := sign &
  [  META-PREFIX symbol,
     META-SUFFIX symbol ],
    status: meta.

lex_entry := basic_lex_entry &
  [ INFLECTED - ].

standard_mle := basic_multi_lex_entry &
  [ INFLECTED - ].

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; The following patches are due to the need in Verbmobil to have "will, would"
;; and "going_to" be semantically empty.  Too hard to do with munging rules

quasimodal_word := generic_modal_verb_word & inf_aux_verb_word &
  [ SYNSEM [ LOCAL [ CAT [ HEAD.MOD < >,
			   VAL [ SUBJ < @nomp_nom() > ] ],
		     CONT [ KEY #key,
			    LISZT <! #key !> ] ] ] ].

will_pos_lex_ent := pos_will_verb_word & add_cont & infl_lex_entry.
will_pos_le :< will_pos_lex_ent.
will_pos_cx_le := will_pos_lex_ent & contracted_aux_word.
will_neg_mle1 := will_verb_word & generic_modal_neg & basic_mle1.

would_aux_pos_le := modal_pos_le &
  [ SYNSEM.LOCAL [ CAT.HEAD.MOOD modal_subj*,
		   CONT [ KEY [ LABEL #label,
				EVENT #event ],
			  COMPKEY [ LABEL #label,
				    EVENT #event ] ] ] ].
would_aux_pos_cx_le := modal_pos_cx_le &
  [ SYNSEM.LOCAL [ CAT.HEAD.MOOD modal_subj*,
		   CONT [ KEY.LABEL #label,
			  COMPKEY.LABEL #label ] ] ].

would_aux_neg_mle1 := modal_neg_mle1 &
  [ SYNSEM.LOCAL [ CAT.HEAD.MOOD modal_subj*,
		   CONT [ KEY.LABEL #label,
			  COMPKEY.LABEL #label ] ] ].

