#!/usr/bin/perl -n


my $HTML_ENT_START = "__htmlstart__";
my $HTML_ENT_END = "__htmlend__";


# Sed script to produce Penn Treebank tokenization on arbitrary raw text.
# Yeah, sure.

# expected input: raw text with ONE SENTENCE TOKEN PER LINE

# by Robert MacIntyre, University of Pennsylvania, late 1995.

# If this wasn't such a trivial program, I'd include all that stuff about
# no warrantee, free use, etc. from the GNU General Public License.  If you
# want to be picky, assume that all of its terms apply.  Okay?

s/\.\.\./ ... /g;
s/\&quot;/\"/g;
s/\&(\S+);/$HTML_ENT_START$1$HTML_ENT_END/og;
s/([,;:])/ $1 /g;

# attempt to get correct directional quotes
s/^\"/`` /g;
s/([ \(\[\{\<])\"/$1 `` /g;
# close quotes handled at end



s/$HTML_ENT_START/\&/og;
s/$HTML_ENT_END/\;/og;

# s/\//\\\//g;

s/^\*+//;
s/\*+$//;

# Assume sentence tokenization has been done first, so split FINAL periods
# only. 
s/([^\.])(\.)([\]\)\}\>\"\']*)[ 	]*$/$1 $2$3 /g;
# however, we may as well split ALL question marks and exclamation points,
# since they shouldn't have the abbrev.-marker ambiguity problem
s/([?!])/ $1 /g;

# parentheses, brackets, etc.
#s/[][(){}<>]/ & /g;
# Some taggers, such as Adwait Ratnaparkhi's MXPOST, use the parsed-file
# version of these symbols.
# UNCOMMENT THE FOLLOWING 6 LINES if you're using MXPOST.
# s/\(/-LRB-/g;
# s/\)/-RRB-/g;
# s/\[/-LSB-/g;
# s/\]/-RSB-/g;
# s/{/-LCB-/g;
# s/}/-RCB-/g;

s/---/ -- /g;
s/--/ -- /g;

# NOTE THAT SPLIT WORDS ARE NOT MARKED.  Obviously this isn't great, since
# you might someday want to know how the words originally fit together --
# but it's too late to make a better system now, given the millions of
# words we've already done "wrong".

# First off, add a space to the beginning and end of each line, to reduce
# necessary number of regexps.
s/$/ /;
s/^/ /;

s/\"/ '' /g;
# possessive or close-single-quote
s/([^'])' /$1 ' /g;
# as in it's, I'm, we'd
s/'([smd]) / '$1 /ig;
s/'ll / 'll /ig;
s/'re / 're /ig;
s/'ve / 've /ig;
s/n't / n't /ig;

# s/ ([Cc])annot / ${1}an not /g;
# s/ ([Dd])'ye / ${1}' ye /g;
# s/ ([Gg])imme / ${1}im me /g;
# s/ ([Gg])onna / ${1}on na /g;
# s/ ([Gg])otta / ${1}ot ta /g;
# s/ ([Ll])emme / ${1}em me /g;
# s/ ([Mm])ore'n / ${1}ore 'n /g;
# s/ '([Tt])is / '$1 is /g;
# s/ '([Tt])was / '$1 was /g;
# s/ ([Ww])anna / $1an na /g;
# s/ \([Ww]\)haddya / {$1}ha dd ya /g;
# s/ \([Ww]\)hatcha / {$1}ha t cha /g;

# clean out extra spaces
s/  */ /g;
s/^ *//g;

chomp;

print;
