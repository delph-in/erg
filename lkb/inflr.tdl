%(letter-set (!c bdfglmnprstz))
%(letter-set (!s abcdefghijklmnopqrtuvwxyz))
%(letter-set (!t bcdfghjklmnpqrstvwxz))
%(letter-set (!v aeiou))


;;; irregular words are stored in a separate file - irregs.tab
;;; because the forms stored there are the values of affix
;;; all the rules here should have the name `affix-type'_infl_rule


plur_noun_infl_rule :=
%suffix (!s !ss) (!ss !ssses) (ss sses) (!ty !ties) (ch ches) (sh shes) (x xes) (z zes)
lex_rule_infl_affixed &
[ NEEDS-AFFIX +,
  --FINAL-ARG [ AFFIX plur_noun ]].

third_sg_fin_verb_infl_rule :=
%suffix (!s !ss) (!ss !ssses) (ss sses) (!ty !ties) (ch ches) (sh shes) (x xes) (z zes)
lex_rule_infl_affixed &
[ NEEDS-AFFIX +,
  --FINAL-ARG [ AFFIX third_sg_fin_verb ]].

past_verb_infl_rule :=
%suffix (* ed) (!ty !tied) (e ed) (!t!v!c !t!v!c!ced) 
lex_rule_infl_affixed &
[ NEEDS-AFFIX +,
  --FINAL-ARG [ AFFIX past_verb ]].

psp_verb_infl_rule :=
%suffix (* ed) (!ty !tied) (e ed) (!t!v!c !t!v!c!ced) 
lex_rule_infl_affixed &
[ NEEDS-AFFIX +,
  --FINAL-ARG [ AFFIX psp_verb ]].

subjunctive_verb_infl_rule :=
%suffix (* ed) (!ty !tied) (e ed) (!t!v!c !t!v!c!ced) 
lex_rule_infl_affixed &
[ NEEDS-AFFIX +,
  --FINAL-ARG [ AFFIX subjunctive_verb ]].

prp_verb_infl_rule :=
%suffix (!t!v!c !t!v!c!cing) (* ing) (e ing) (ee eeing) (ie ying)
lex_rule_infl_affixed &
[ NEEDS-AFFIX +,
  --FINAL-ARG [ AFFIX  prp_verb ]].

#|
er_comp_adj_infl_rule :=
%suffix (* er) (!t!v!c !t!v!c!cer) (!ty !tier) (e er)
lex_rule_infl_affixed &
[ NEEDS-AFFIX +,
  --FINAL-ARG [ AFFIX er_comp_adj ]]. 
|#

est_super_adj_infl_rule :=
%suffix (* est) (!t!v!c !t!v!c!cest) (!ty !tiest) (e est)
lex_rule_infl_affixed &
[ NEEDS-AFFIX +,
  --FINAL-ARG [ AFFIX est_super_adj ]]. 

#|

bse_verb_infl_rule :=
lex_rule_infl_affixed &
[ NEEDS-AFFIX -,
  STEM #stem,
  DTR  [ STEM #stem ],
  --FINAL-ARG [ AFFIX bse_verb ]]. 

|#

non_third_sg_fin_verb_infl_rule := lex_rule_infl_affixed &
[ NEEDS-AFFIX -,
  STEM #stem,
  DTR  [ STEM #stem ],
  --FINAL-ARG [ AFFIX non_third_sg_fin_verb ]].

sing_noun_infl_rule := lex_rule_infl_affixed &
[ NEEDS-AFFIX -,
  STEM #stem,
  DTR  [ STEM #stem ],
  --FINAL-ARG [ AFFIX sing_noun ]].

pos_adj_infl_rule := lex_rule_infl_affixed &
[ NEEDS-AFFIX -,
  STEM #stem,
  DTR  [ STEM #stem ],
  --FINAL-ARG [ AFFIX pos_adj ]].

no-affix_infl_rule := lex_rule_infl_no-affix &
[ NEEDS-AFFIX -,
  STEM #stem,
  DTR  [ STEM #stem ],
  --FINAL-ARG [ AFFIX no-affix ]].

-ly_infl_rule  := lex_rule_infl_affixed &
[ NEEDS-AFFIX -,
  STEM #stem,
  DTR  [ STEM #stem ],
  --FINAL-ARG [ AFFIX -ly ]].

;;;
;;; ((equal affix "-S") '("third_sg_fin_verb" "plur_noun"))
;;; ((equal affix "-ED") '("past_verb" "psp_verb" "subjunctive_verb"))
;;; ((equal affix "-ING") '("prp_verb"))
;;; ((equal affix "-ER") '("er_comp_adj"))
;;; ((equal affix "-EST") '("est_super_adj"))
;;; ((equal affix "") '("bse_verb" "non_third_sg_fin_verb" "sing_noun" 
;;;                            "pos_adj" "no-affix"))
;;; (t (list affix))))
;;;
;;; for example - there is a type `-ly' ... Hmm


