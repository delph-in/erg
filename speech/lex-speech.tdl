and_root_post := av_-_s-cp-mc-po_le &
 [ ORTH < "and" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_and_c_1_rel",
            PUNCT.PAIRED no_ppair,
            PHON.ONSET voc ] ].

or_root_post := av_-_s-cp-mc-po_le &
 [ ORTH < "or" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_or_c_1_rel",
            PHON.ONSET voc ] ].

reject_root_post := av_-_s-cp-mc-po_le &
 [ ORTH < "@reject@" >,
   SYNSEM [ LKEYS.KEYREL.PRED "reject_x_1_rel",
            PHON.ONSET con ] ].

delete_root_pre := av_-_dc-spch-pr_le &
 [ ORTH < "*delete*" >,
   SYNSEM [ LKEYS.KEYREL.PRED "delete_x_1_rel",
            PHON.ONSET con ] ].

delete_sp_fill := av_-_spfill_le &
 [ ORTH < "*delete*" >,
   SYNSEM [ LKEYS.KEYREL.CARG "delete",
            PHON.ONSET con ] ].

them_abb1 := n_-_pr-them_le &
 [ ORTH < "'em" >,
   SYNSEM.PHON.ONSET con ].

them_abb2 := n_-_pr-them_le &
 [ ORTH < "em" >,
   SYNSEM.PHON.ONSET con ].

uhf_disc_adv := av_-_dc-like-pr_le &
 [ ORTH < "uhf" >,
   SYNSEM [ LKEYS.KEYREL.CARG "uhf",
            PHON.ONSET con_or_voc ] ].

the_8_mal := d_-_the-mal_le &
 [ ORTH < "the-", "the" >,
   SYNSEM [ LKEYS.KEYREL.PRED _the_q_rel,
            PHON.ONSET con ] ].

yeah_disc_adv := av_-_dc-like-pr_le &
 [ ORTH < "yeah" >,
   SYNSEM [ LKEYS.KEYREL.CARG "yeah",
            PHON.ONSET con ] ].

oh_disc_adv := av_-_dc-like-pr_le &
 [ ORTH < "oh" >,
   SYNSEM [ LKEYS.KEYREL.CARG "oh",
            PHON.ONSET con ] ].

okay_disc_adv := av_-_dc-like-pr_le &
 [ ORTH < "okay" >,
   SYNSEM [ LKEYS.KEYREL.CARG "okay",
            PHON.ONSET voc ] ].

mkay_disc_adv := av_-_dc-like-pr_le &
 [ ORTH < "mkay" >,
   SYNSEM [ LKEYS.KEYREL.CARG "mkay",
            PHON.ONSET con_or_voc ] ].

duh_disc_adv := av_-_dc-like-pr_le &
 [ ORTH < "duh" >,
   SYNSEM [ LKEYS.KEYREL.CARG "duh",
            PHON.ONSET con ] ].

er_disc_adv := av_-_dc-like-pr_le &
 [ ORTH < "er" >,
   SYNSEM [ LKEYS.KEYREL.CARG "er",
            PHON.ONSET voc ] ].

er_disc_adv_2 := av_-_s-cp-nsp-po_le &
 [ ORTH < "er" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_er_a_1_rel",
            PHON.ONSET voc ] ].

yah_root_post := av_-_s-cp-nsp-po_le &
 [ ORTH < "yah" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_yah_a_1_rel",
            PHON.ONSET con ] ].

yah_root_pre := av_-_s-cp-mc-pr_le &
 [ ORTH < "yah" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_yah_a_1_rel",
            PHON.ONSET con ] ].

;; DPF 2016-08-09 - Block stutter entries with comma, since comma is already
;; allowed for `speech', so these introduce unwanted ambiguity.
;;
a_a_det_rbst2 := never_unify_le & [ ORTH < "_never_unify_" > ].
and_conj_stutter5 := never_unify_le & [ ORTH < "_never_unify_" > ].
he_stutter_2_rbst := never_unify_le & [ ORTH < "_never_unify_" > ].
he_stutter_4_rbst := never_unify_le & [ ORTH < "_never_unify_" > ].
her_poss_stutter_2 := never_unify_le & [ ORTH < "_never_unify_" > ].
his_poss_stutter_2 := never_unify_le & [ ORTH < "_never_unify_" > ].
i_stutter_2_rbst := never_unify_le & [ ORTH < "_never_unify_" > ].
it_stutter_4_rbst := never_unify_le & [ ORTH < "_never_unify_" > ].
its_poss_stutter_2 := never_unify_le & [ ORTH < "_never_unify_" > ].
my_poss_stutter_2 := never_unify_le & [ ORTH < "_never_unify_" > ].
of_poss_stutter_3_rbst := never_unify_le & [ ORTH < "_never_unify_" > ].
or_conj_stutter2 := never_unify_le & [ ORTH < "_never_unify_" > ].
our_poss_stutter_2 := never_unify_le & [ ORTH < "_never_unify_" > ].
she_stutter_4_rbst := never_unify_le & [ ORTH < "_never_unify_" > ].
the_stutter_2 := never_unify_le & [ ORTH < "_never_unify_" > ].
their_poss_stutter_2 := never_unify_le & [ ORTH < "_never_unify_" > ].
they_stutter_4_rbst := never_unify_le & [ ORTH < "_never_unify_" > ].
to_c_prop_stutter_2 := never_unify_le & [ ORTH < "_never_unify_" > ].
to_p_stutter_2 := never_unify_le & [ ORTH < "_never_unify_" > ].
we_stutter_5_rbst := never_unify_le & [ ORTH < "_never_unify_" > ].
you_stutter_4_rbst := never_unify_le & [ ORTH < "_never_unify_" > ].
your_poss_stutter_2 := never_unify_le & [ ORTH < "_never_unify_" > ].
