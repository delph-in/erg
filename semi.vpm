;;;
;;; a first attempt at mapping (systematically) between the grammar-internal
;;; name space (where, for example, there may be reasons to group sets of index
;;; properties in nested feature structures) and the external, SEM-I compliant
;;; interface.
;;;

;;;
;;; the correspondence between grammar-internal types and the one-letter codes
;;; encoding value types on MRS variables: the type mapping, conceptually, is
;;; applied parallel to the property mapping, i.e. context conditions in rules
;;; below should be cast in the appropriate name space.
;;;
;event          <> e
;ref-ind        <> x
;non_expl       >> i
;non_expl-ind   >> i
;event_or_index >> i
;individual     << i
;handle         <> h
;non_event      <> p
;*              >> u
;basic_semarg   << u


;;;
;;; from here on, sets of rules that map one or more properties into one or
;;; more properties: for each correspondence, values are compared to sub-rules
;;; in order, until the first match: at that point, output values are inserted
;;; into the result set of properties.  processing of rules continues against
;;; the original properties, so that there could be multiple matches: the `PN'
;;; to `PERS' and `NUM' decomposition, thus, could also be done in two separate
;;; rule sets.  at the end of the day, however, only properties resulting from
;;; successful matches will be in the output, i.e. everything not explicitly
;;; carried over will be deleted.
;;;

PNG.PN : PERS NUM
  1sg  <> 1 sg
  1pl  <> 1 pl
  1per <> 1 !
  1per << 1 *
  2sg  <> 2 sg
  2pl  <> 2 pl
  2per <> 2 !
  2per << 2 *
  3sg  <> 3 sg
  3pl  <> 3 pl
  3per <> 3 !
  3per << 3 *
  *    >> ! !
  !    << * *


PNG.GEN : GEND
  masc    <> m
  fem     <> f
  neut    <> n
  animate <> m-or-f
  *       >> !
  !       << *


DIV : DIV
  + <> +
  - <> -
  * >> !
  ! << *


PRONTYPE : PRONTYPE
  std_pron  <> std_pron
  zero_pron <> zero_pron
  refl      <> refl
  *         >> !
  !         << *


E.TENSE : TENSE
  past       <> past
  present    <> pres
  future     <> fut
  real_tense <> tensed
  untensed   <> untensed
  *          >> untensed
  untensed   << *
  untensed   << [e]


E.MOOD : MOOD 
  indicative      <> indicative
  subjunctive     <> subjunctive
  *               >> indicative
  indicative      << *
  indicative      << [e]

E.ASPECT.PROGR : PROG
  +       <> +
  -       <> -
  *       >> -
  -       << *
  -       << [e]

E.ASPECT.PERF : PERF
  +       <> +
  -       <> -
  *       >> -
  -       << *
  -       << [e]
