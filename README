;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; README
;
; Brief introduction to the English grammar (PAGE and LKB implementation)
; being developed at CSLI, Stanford University, in collaboration with
; member institutions of the ERGO consortium, and with colleagues of
; the German Verbmobil project.
;
; Dan Flickinger, 3-Jan-95
; Last revised:   29-Sept-98
;
; $Id$
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

29-Sept-98 Release Notes
-----------------------

This release is for PAGE 2.3 and for the LKB, incorporating improvements in
semantics, syntax, and the lexicon.  The focus of the lexical and semantic
work has been to provide broader coverage for the Verbmobil domain, while much
of the work on syntax has been to gain greater precision in our analyses,
avoiding unwanted parses through more accurate constraints on types and rules.
Phenomena which have been added include ellipsis and some additional
fragments, while further work has also been done on the semantics of
modification.  Additional machinery has also been added to provide for
post-parse alteration of MRS output, to match with application requirements.


Installing and setting up PAGE 2.3
----------------------------------
To obtain a Lisp image containing PAGE 2.3, which will serve as one platform 
for loading the English grammar, do the following, presently verified only for
Allegro Common Lisp running on Solaris.

1. FTP a copy of the PAGE2.3 release from the DFKI in Saarbruecken at
        page.dfki.uni-sb.de
   Currently, the ftp site is password-protected; for help, send email to 
	page@dfki.uni-sb.de

2. FTP the INSTALL2.3 instructions file, and do what it says.

3. For local setup, make the following modifications to your own files:

   ~/.login
        ;; Add or correct the following settings if at CSLI
	setenv PAGEROOT /usr/local/page2.3
	setenv ALLEGRO_CL_HOME /usr/local/acl/home
	setenv LD_LIBRARY_PATH /usr/dt/lib
	setenv CVSROOT /eo/e1/CVSROOT

   ~/.clinit.cl
	;; If you have source code for PAGE, add the following line:
        (load "/usr/local/page2.3/src/general/loadup.lisp")
   
   ~/.pagerc
        ;; Add the following three lines, adjusting as desired:
        (setq main::*source-grammar* "~/grammar/")
        (setq main::*grammar-input-dir* "~/grammar/")
        (setq main::tmp-dir "~/tmp/")


Installing the grammar
----------------------

To install a fresh copy of the grammar, use the cvs utility as follows:
1. Make sure you don't have a directory named "grammar" in your home
   directory (if you do, move it to another name):

	mkdir ~/grammar

2. Copy over the new files, which will cause a new directory called "grammar"
   to be created: 

	cvs checkout grammar

Loading the grammar into PAGE 
-----------------------------
To load the grammar into PAGE 2.1, do the following, assuming that you 
have put the English grammar files in your own directory <grammar-dir>:

1. Assuming you have a connection between Emacs and Lisp, add the following
   line to the end of your .emacs file (where "/usr/page" should actually
   point to the root of your PAGE 2.3 directory, if in a nonstandard place):

        (load "$PAGEROOT/page-emacs.el")

   Then start Emacs, and execute the following Emacs commands to bring up a 
   fresh PAGE Lisp image:
        
	M-X allegro
	M-X run-lisp    and take the defaults for each question except for
                        the one about which image, at which point enter:
        /usr/acl/bin/page2.1

   Notes: 1) If you don't have such a connection, you might seek assistance
             from the PAGE support line, or you might get useful advice from
             ERGO consortium members, including CSLI.
	  2) At CSLI, the machines Eo, Eoan, and Eon currently support PAGE.

2. Start PAGE by executing this Lisp command at the Lisp prompt:

       	(page)

3. Load the grammar with the PAGE command

       	load-grammar "english" "tuneup"


Parsing
-------
Once the grammar is loaded, it should parse sentences like those marked as
well-formed in the test suite file "<grammardir>/tsdb/csli/item", and it
should fail to parse sentences like those marked as ill-formed in the same
file (see notes on TSDB below).

To parse a sentence, give the PAGE command  

	one <CR>  

and then type the desired sentence, using vocabulary contained in the lexicon
file lexicon.tdl.

To get all parses, type

	all <CR>

then type the sentence as usual.  The system will present all parses in the 
order they were found.


Parse trees
-----------
To cause parse trees to be printed for the parse, you have two choices - either
a simple ASCII tree printed in the output buffer (standard output), or a more
elegant mousable tree in a separate window.  To determine whether you get a 
tree after a parse, and which kind, use the PAGE switch

	:draw-tree

with one of the three values:  

	:off | :on | :fancy

Then when you parse a sentence, if :draw-tree is :on, you get an ASCII tree,
and if it's :fancy, you get an X-windows tree.  You can mouse any node of the
fancy tree and get a FeGramEd display, but note that the leaves of these trees
are just the spellings for the words, so you have to click on the node above a
spelling to see its lexical entry.

The X-window tree also has a button which will show you the MRS semantics for 
the sentence in a separate pop-up window (and may also have a "VIT" button
for an alternate semantic representation which you may ignore).


Semantics
---------
To cause MRS semantics to be printed in the output buffer in addition to the 
parse tree, type

        mrsparse <CR>

followed by the sentence.

The resulting semantics for a parse can also be found in the top-level feature
structure's SYNSEM.LOCAL.CONT attribute.  It will be an MRS structure
consisting of a HANDEL attribute, an INDEX attribute, and a LISZT attribute
containing a list of atomic relations.  See the Copestake et al. manuscript
"Minimal Recursion Semantics: An Introduction" for details of this semantic
representation; a current draft can be found at the following Web site:

	http://hpsg.stanford.edu/hpsg/sag.html

To get MRS semantics for more than one parse of a sentence, type
  
       ambig <CR>

This will behave just like sentence-parse-bw (described above), but will
print an Emacs-buffer parse tree and the MRS semantics after each parse.

To get machine-readable semantics in addition to the pretty-printed version,
change the setting of the variable mrs::*raw-mrs-output-p* (in the file 
english.tdl) to T.


VIT (Verbmobil Interface Term) representations
----------------------------------------------
To produce a VIT from an MRS, set the following two globals:

	(setf mrs::*mrs-to-vit* t)
	(setf main::*VM-arg-roles-only-p* t).

Then parse a sentence using the PAGE prompt command "mrsparse".  The parse 
trees and resulting VIT expressions are printed to the Lisp output buffer.

To check the VIT for well-formedness, do the following (locally) on Eo:

	cd /eo/e1/vm2/vitADT/lib/Vit_Adt
	/opt/quintus/bin3.2/sun4-5/prolog
	ensure_loaded(vitADT).
        V = vit(...),vitCheck(V).          %% using cut-and-paste to insert the
                                           %% relevant vit(...) after the "=")
        ...
        halt.				   %% End the session.

If local at CSLI, you may view the VIT expressions graphically, using the tool
provided by W.Finkler.  At the Unix prompt, execute

    wish
    source /eo/e1/ergo/vm2/vits.tcl
    main

Then cut and paste the text for a VIT term (as produced by mrs2vit converter) 
from the Emacs buffer into the VITdraw tool's window, and click on "Draw".
This produces a window showing the VIT, with red, blue, and black lines.  The
boxes for the predicates can be dragged about, and the image can be printed
to PostScript.

To generate a new ESEMDB, use the awk script provided, e.g.:

   awk -f /eo/e1/vm2/util/semdb2lisp.awk /eo/e1/vm2/vmlex/ESEMDB.txt > ~/grammar/data/page-db-eng.lisp



Batch processing and test suites
--------------------------------

To batch-process a set of sentences, you can use the newly integrated TSDB
facility under active development in Saarbruecken (see Web page at the address
http://cl-www.dfki.uni-sb.de//tsnlp and especially the user manual there).

  1) To start up the TSDB graphical interface, execute the Lisp commands
 
	(load-system "tsdb")
	(tsdb::tsdb :podium)

     Instructions on how to use this utility are currently in preparation, 
     but in the meantime experiment.

  2) To pretty-print VIT results and check for well-formedness, do the query
     (assuming the variable tsdb::*tsdb-home* is set appropriately):

       (mrs::expand-tsdb-results "lingo/jul98/evm/98-09-20/page" "/tmp/vout" t)

     where the last argument determines whether or not the VIT checker is run.


  To create your own test suite, you have two choices:
  1) Do it the right way by following the methodology and using the tools
     described on the TSNLP web page identified above; or
  2) Employ the quick-and-dirty method of directly editing the file
	<grammardir>/tsdb/csli/item
     Each line in this file consists of 12 fields separated by the "@" sign. 
     Starting with the first line in the file, modify each line to replace the
     given sentence with one of your own, also specifying the intended
     well-formedness value for that example (it's the 0 or 1 in the field 
     immediately following the sentence field.  Delete any left over lines.


EBL facility
------------
The Explanation-Based Learning facility under development by Guenter Neumann
of the DFKI is available in experimental form (currently only at CSLI).  It 
records phrases seen during parsing, and provides lexically-driven retrieval 
of these stored templates or chunks, currently for parsing, but soon also for 
generation.  At present, the EBL machinery is only available locally at CSLI.

To load EBL, 
 	(load "/usr/local/page2.0/src/systems/dtree.system")
	(load "/usr/local/page2.0/src/systems/pebl.system")
	(load-system "dtree")
	(load-system "pebl")
To run EBL, at PAGE prompt, type
	:use-ebl
To get multiple parses one at a time, set the following flag:
	:leval (setf main::*support-backtrack* t)
To train interactively on a particular sentence
	:tp-ebl <sentence-string>
To use trained templates for a new sentence
	:ap-ebl <sentence-string>
To do incremental training (interleaved training and application), in Lisp
	(ebl-ap <sentence> :proto chunk-ap-batch :exhaustive t :add-lex t)
    For more examples, see EBL file call-chunk-corpus.lisp
To do batch incremental training, e.g.
        (ebl-from2file "~/grammar/ebl/csli-items.200" "~/tmp/ebl-test.out" 
	 #'ebl-ap :trace NIL :draw-chart NIL :save-chunk T 
        :proto chunk-ap-batch :exhaustive nil :add-lex t)
To see EBL decision trees,
	(ck::init-dtree)
To see a particular template, whose number is at right of a boxed node,
	(ck::show-dtree <index-integer>)
To see the feature structures for a template and/or for terminals
	(ck::show-dtree <index> :expand t :expand-terminals t)
To dump all EBL data structures
	(ck::save-chunk <filename-string>)
To erase existing EBL data from memory
	(ck::forget)
To reload 
	(ck::restore-chunk <filename>)


Web access
----------

A Web browser can let you parse sentences from any reasonable machine on the 
Internet and get back parse trees and MRS semantics.  If you are on a machine 
that also has the FeGramEd utility locally available, you can also get feature 
structures for parses, rule schemata, lexical rules, and lexical entries.  To
experiment with this interactive demo, go the Stanford HPSG Web page at

	http://hpsg.stanford.edu

and click on the "demonstration system" link found there.

Adding or redefining lexical entries in TDL
-------------------------------------------
After adding a new lexical entry, or making any other change to the grammar,
type 
        ldt. 

as usual to the TDL prompt, and then at the PAGE prompt, type

	load-grammar-from-tdl

This command also takes care of re-caching any lexical entries that have been 
added, deleted, or changed.

After making permanent changes to the files lexicon.tdl or semrels.tdl, 
rebuild the run-time lexical database by executing the following Lisp
function:

        (csli::tdltolex)

This will replace the files lexicon.dat and semrels.dat in your <grammar-dir>.

Alternatively, first execute the Lisp function

	(pg::close-lex (first pg::*lexical-sources*))

and then execute the Unix utility tdltolex at the Unix prompt:

	cd ~/grammar; tdltolex	


Exiting from PAGE
-----------------
To end a PAGE session, type the following to the PAGE prompt:

	shutdown

and confirm.  This will terminate all PAGE subprocesses, then terminate the 
Lisp process.


Contact
-------
Dan Flickinger
Center for the Study of Language and Information
Ventura Hall, Stanford University
Stanford, CA  94305
USA
telephone: 650 723-9320
email: dan@csli.stanford.edu


