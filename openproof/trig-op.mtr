;;; Hey, emacs(1), this is -*- Mode: TDL; Package: LKB; -*- got it?

does1_pos_rule1 := arg0e_gtr &
 [ CONTEXT [ RELS <! [ PRED "~._v_",
                       ARG0.E [ MOOD indicative,
                                TENSE present,
                                ASPECT no_aspect ] ],
                     [ PRED neg_rel ] !> ],
   FLAGS.TRIGGER "does1_pos" ].

does1_pos_rule2 := arg0e_gtr &
 [ CONTEXT [ RELS <! [ PRED "~._v_",
                       ARG0 [ E [ TENSE present,
                                  ASPECT no_aspect ],
                              SF ques ] ] !> ],
   FLAGS.TRIGGER "does1_pos" ].

does1_pos_rule3 := arg0e_gtr &
 [ CONTEXT [ RELS <! [ PRED ellipsis_ref_rel,
                       ARG0.E [ MOOD indicative,
                                TENSE present,
                                ASPECT no_aspect ] ] !> ],
   FLAGS.TRIGGER "does1_pos" ].

did1_pos_rule1 := arg0e_gtr &
 [ CONTEXT [ RELS <! [ PRED "~._v_",
                       ARG0.E [ MOOD indicative,
                                TENSE past,
                                ASPECT no_aspect ] ],
                     [ PRED neg_rel ] !> ],
   FLAGS.TRIGGER "did1_pos" ].

did1_pos_rule2 := arg0e_gtr &
 [ CONTEXT [ RELS <! [ PRED "~._v_",
                       ARG0 [ E [ MOOD indicative,
                                  TENSE past,
                                  ASPECT no_aspect ],
                              SF ques ] ] !> ],
   FLAGS.TRIGGER "did1_pos" ].

did1_pos_rule3 := arg0e_gtr &
 [ CONTEXT [ RELS <! [ PRED ellipsis_ref_rel,
                       ARG0.E [ MOOD indicative,
                                TENSE past,
                                ASPECT no_aspect ] ] !> ],
   FLAGS.TRIGGER "did1_pos" ].

do1_pos_rule1 := arg0e_gtr &
 [ CONTEXT [ RELS <! [ PRED "~._v_",
                       ARG0.E [ MOOD indicative,
                                TENSE present,
                                ASPECT no_aspect ] ],
                     [ PRED neg_rel ] !> ],
   FLAGS.TRIGGER "do1_pos" ].

do1_pos_rule2 := arg0e_gtr &
 [ CONTEXT [ RELS <! [ PRED "~._v_",
                       ARG0 [ E [ MOOD indicative,
                                  TENSE present,
                                  ASPECT no_aspect ],
                              SF ques ] ] !> ],
   FLAGS.TRIGGER "do1_pos" ].

do1_pos_rule3 := arg0e_gtr &
 [ CONTEXT [ RELS <! [ PRED ellipsis_ref_rel,
                       ARG0.E [ MOOD indicative,
                                TENSE present,
                                ASPECT no_aspect ] ] !> ],
   FLAGS.TRIGGER "do1_pos" ].

; OUTPUT.HOOK.INDEX currently no-op
has_aux_rule := arg0e_gtr &
 [ CONTEXT [ RELS <! [ LBL #h,
                       ARG0 #e & [ E [ MOOD indicative,
                                       TENSE present,
                                       ASPECT.PRF + ] ] ] !> ],
   OUTPUT.HOOK [ LTOP #h, INDEX #e ],
   FLAGS.TRIGGER "has_aux" ]. 

has_aux_cx_2_rule := arg0e_gtr &
 [ CONTEXT [ RELS <! [ LBL #h,
                       ARG0 #e & [ E [ MOOD indicative,
                                       TENSE present,
                                       ASPECT.PRF + ] ] ] !> ],
   OUTPUT.HOOK [ LTOP #h, INDEX #e ],
   FLAGS.TRIGGER "has_aux_cx_2" ]. 

; DPF 8-Jul-02 - Removed TENSE real_tense "A could have been hiring B"
have_bse_aux_rule := arg0e_gtr &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ ASPECT.PRF + ] ] ] !> ],
   FLAGS.TRIGGER "have_bse_aux" ]. 

have_fin_aux_rule := arg0e_gtr &
 [ CONTEXT [ RELS <! [ ARG0.E [ MOOD indicative,
                                TENSE present,
                                ASPECT.PRF + ] ] !> ],
   FLAGS.TRIGGER "have_fin_aux" ]. 

have_aux_prp_rule := arg0e_gtr &
 [ CONTEXT [ RELS <! [ ARG0.E.ASPECT.PRF + ],
                     [ PRED gerund_rel ] !> ],
   FLAGS.TRIGGER "have_aux_prp" ].

have_aux_prp_rule2 := arg0e_gtr &
 [ CONTEXT [ RELS <! [ ARG0.E [ TENSE untensed,
                                ASPECT [ PRF +,
                                         PROGR + ] ] ] !> ],
   FLAGS.TRIGGER "have_aux_prp" ]. 

had_aux_subj_rule := arg0e_gtr &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ MOOD subjunctive,
                                  ASPECT.PRF + ] ] ] !> ],
   FLAGS.TRIGGER "had_aux_subj" ].

had_aux_rule := arg0e_gtr &
 [ CONTEXT [ RELS <! [ ARG0.E [ MOOD indicative,
                                TENSE past,
                                ASPECT.PRF + ] ] !> ],
   FLAGS.TRIGGER "had_aux" ].

have_fin_aux1_cx_rule := generator_rule &
 [ CONTEXT [ RELS <! [ ARG0 #e & event & 
                            [ E [ MOOD indicative,
                                  TENSE present,
                                  ASPECT.PRF + ] ],
                       ARG1 basic_non_expl-ind & #x & [ PNG.PN -3s ] ] !> ],
   FLAGS [ EQUAL < #e >,
	   SUBSUME < #x >,
           TRIGGER "have_fin_aux_cx_2" ] ].

have_fin_aux2_cx_rule := arg0e_gtr &
 [ CONTEXT [ RELS <! [ ARG0 #e & event & 
                            [ E [ MOOD indicative,
                                  TENSE present,
                                  ASPECT.PRF + ] ],
                       ARG2 basic_non_expl-ind & #x & [ PNG.PN -3s ] ] !> ],
   FLAGS [ EQUAL < #e >,
	   SUBSUME < #x >,
           TRIGGER "have_fin_aux_cx_2" ] ].

have_fin_aux3_cx_rule := arg0e_gtr &
 [ CONTEXT [ RELS <! [ ARG0 #e & event & 
                            [ E [ MOOD indicative,
                                  TENSE present,
                                  ASPECT.PRF + ] ],
                       ARG3 basic_non_expl-ind & #x & [ PNG.PN -3s ] ] !> ],
   FLAGS [ EQUAL < #e >,
	   SUBSUME < #x >,
           TRIGGER "have_fin_aux_cx_2" ] ].

had_aux_cx_2_rule := arg0e_gtr &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ MOOD indicative,
                                  TENSE past,
                                  ASPECT.PRF + ] ] ] !> ],
   FLAGS.TRIGGER "had_aux_cx_2" ]. 

between_conj_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "between_conj" ]. 

between_mz_conj_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "between_mz_conj" ]. 

from_conj_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "from_conj" ].

from_mz_conj_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "from_mz_conj" ].

notonly_conj_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED _but+also_c_rel ] !> ],
   FLAGS.TRIGGER "not_only_conj" ].

notonly_inv_conj_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED _but+also_c_rel ] !> ],
   FLAGS.TRIGGER "not_only_inv_conj" ].

not_conj_mrk_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED _but_c_not_rel ] !> ],
   FLAGS.TRIGGER "not_mrk" ].

notjust_conj_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED _but+also_c_rel ] !> ],
   FLAGS.TRIGGER "not_just_conj" ].

rather_conj_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED _rather+than_c_rel ] !> ],
   FLAGS.TRIGGER "rather_conj" ].

much_rather_conj_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED _rather+than_c_rel ] !> ],
   FLAGS.TRIGGER "much_rather_conj" ].

first_conj_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "first_conj" ].

there_expl_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED _be_v_there_rel ] !> ],
   FLAGS.TRIGGER "there_expl" ].

there_expl_rule2 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED ellipsis_expl_rel ] !> ],
   FLAGS.TRIGGER "there_expl" ].

will_aux_rule := arg0e_gtr &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ MOOD indicative,
                                  TENSE future ] ] ] !> ],
   FLAGS.TRIGGER "will_aux_pos" ].

will_aux_inv_rule := arg0e_gtr &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ MOOD indicative,
                                  TENSE future ] ] ] !> ],
   FLAGS.TRIGGER "will_aux_inv" ].

will_aux_cx_rule := arg0e_gtr &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ MOOD indicative,
                                  TENSE future ] ] ] !> ],
   FLAGS.TRIGGER "will_aux_pos_cx_2" ].

will_aux_cx_2_rule := arg0e_gtr &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "will_aux_pos_cx" ].

; Only for questions

shall_aux_rule := arg0e_gtr &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ MOOD indicative,
				  TENSE future ],
			      SF ques ] ] !> ],
   FLAGS.TRIGGER "shall_aux_pos" ].

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Copula rules

be_c_is1_rule := be_cop_x1_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ],
                       ARG1 [ PNG [ PN 3s ] ] ] !> ],
   FLAGS.TRIGGER "be_c_is" ].

be_c_is2_rule := be_cop_x2_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ],
                       ARG2 [ PNG [ PN 3s ] ] ] !> ],
   FLAGS.TRIGGER "be_c_is" ].

be_c_is3_rule := be_cop_x3_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ],
                       ARG3 [ PNG [ PN 3s ] ] ] !> ],
   FLAGS.TRIGGER "be_c_is" ].

; Special case of prednom_state_rel: "it is a relief to stay home"
be_cop_prednom_is_rule := arg0e+1x_gtr &
 [ CONTEXT [ RELS <! [ PRED prednom_state_rel,
                       ARG0 [ E [ TENSE present,
                                  MOOD indicative ] ],
                       ARG1 [ PNG [ PN 3s ] ] ] !> ],
   FLAGS.TRIGGER "be_c_is" ].

;; Special case of loc_nonsp_rel: "Kim is here"
;;
be_cop_loc_nonsp_is_rule := arg0e+1x_gtr &
 [ CONTEXT [ RELS <! [ PRED loc_nonsp_rel,
                       ARG0 [ E [ TENSE present,
                                  MOOD indicative ] ],
                       ARG1 [ PNG [ PN 3s ] ] ] !> ],
   FLAGS.TRIGGER "be_c_is" ].

;; also unspec_mod_rel "The glacier is ice-blue." and unspec_loc_rel as in
;; "they were here" and unspec_adj_rel as in "how is that?"
;; Maybe also special case of partitive, with plural sem but singular agreemt?
;;
be_cop_unspec_mod_is_rule := arg0e+1x_gtr &
 [ CONTEXT [ RELS <! [ PRED unspec_loc_or_mod_rel,
                       ARG0 [ E [ TENSE present,
                                  MOOD indicative ] ],
                       ARG1 [ PNG [ PN 3s ] ] ] !> ],
   FLAGS.TRIGGER "be_c_is" ].

; Special case of unspec_manner_rel: "how is that?"
be_cop_unspec_manner_is_rule := arg0e+1x_gtr &
 [ CONTEXT [ RELS <! [ PRED unspec_manner_rel,
                       ARG0 [ E [ TENSE present,
                                  MOOD indicative ] ],
                       ARG1 [ PNG [ PN 3s ] ] ] !> ],
   FLAGS.TRIGGER "be_c_is" ].

; Special case of comparative
be_cop_compar_is_rule := arg0e_gtr &
 [ CONTEXT [ RELS <! [ PRED comp_or_superl_rel,
                       ARG0 [ E [ TENSE present,
                                  MOOD indicative ] ],
                       ARG1 #e ],
                     [ ARG0 #e,
                       ARG1 [ PNG [ PN 3s ] ] ] !> ],
   FLAGS.TRIGGER "be_c_is" ].

; Special case of partitive, with plural sem but singular agreemt
be_cop_part_is_rule := generator_rule &
 [ CONTEXT.RELS <! [ PRED part_of_rel,
                     ARG0 #x1 & ref-ind & [ PNG [ PN 3p ] ] ] !>,
   FLAGS [ EQUAL < #x1 >,
	   TRIGGER-CONSTRAINT.SYNSEM.LOCAL.CONT.HOOK.XARG #x1,
	   TRIGGER "be_c_is" ] ].

be_c_is_h1_rule := be_cop_h1_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ] ] !> ],
   FLAGS.TRIGGER "be_c_is" ].

be_c_is_h2_rule := be_cop_h2_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ] ] !> ],
   FLAGS.TRIGGER "be_c_is" ].

be_c_is_2h_psv_rule := be_cop_2h_psv_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ] ], relation !> ],
   FLAGS.TRIGGER "be_c_is" ].

be_c_is_3h_psv_rule := be_cop_3h_psv_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ] ], relation !> ],
   FLAGS.TRIGGER "be_c_is" ].

be_c_is_2x_psv_rule := be_cop_2x_psv_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ],
                       ARG2 [ PNG [ PN 3s ] ] ] !> ],
   FLAGS.TRIGGER "be_c_is" ].

be_c_is_3x_psv_rule := be_cop_3x_psv_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ],
                       ARG3 [ PNG [ PN 3s ] ] ] !> ],
   FLAGS.TRIGGER "be_c_is" ].

be_c_is_going+to_rule := be_cop_going+to_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ] ] !> ],
   FLAGS.TRIGGER "be_c_is" ].

;be_c_is_expl_1h_psv_rule := be_cop_expl_1h_psv_rule &
; [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ] ] !> ],
;   FLAGS.TRIGGER "be_c_is" ].

be_c_is_expl_2h_psv_rule := be_cop_expl_2h_psv_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ] ] !> ],
   FLAGS.TRIGGER "be_c_is" ].

be_c_is_expl_3h_psv_rule := be_cop_expl_3h_psv_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ] ] !> ],
   FLAGS.TRIGGER "be_c_is" ].


be_c_is_prd_1x_rule := be_cop_prd_1x_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ],
                       ARG1 [ PNG [ PN 3s ] ] ] !> ],
   FLAGS.TRIGGER "be_c_is" ].

be_c_is_prd_1x_cx_rule := be_cop_prd_1x_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ],
                       ARG1 [ PNG [ PN 3s ] ] ] !> ],
   FLAGS.TRIGGER "be_c_is_cx_2" ].

be_c_is_prd_2x_rule := be_cop_prd_2x_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ],
                       ARG2 [ PNG [ PN 3s ] ] ] !> ],
   FLAGS.TRIGGER "be_c_is" ].

be_c_is_prd_3x_rule := be_cop_prd_3x_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ],
                       ARG3 [ PNG [ PN 3s ] ] ] !> ],
   FLAGS.TRIGGER "be_c_is" ].

be_c_is_prd_1h_rule := be_cop_prd_1h_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ] ] !> ],
   FLAGS.TRIGGER "be_c_is" ].

be_c_is_prd_2h_rule := be_cop_prd_2h_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ] ] !> ],
   FLAGS.TRIGGER "be_c_is" ].

be_c_is_inf_rule := be_cop_inf_rule &
 [ FLAGS.TRIGGER "be_c_is" ].

be_c_is_ellip_th_expl_rule := be_cop_ellip_th_expl_rule &
 [ CONTEXT [ RELS <! [ ARG1 [ PNG [ PN 3s ] ] ],
                     [ ARG0 [ E [ TENSE present ] ] ] !> ],
   FLAGS.TRIGGER "be_c_is" ].

be_c_is_ellip_rule := be_cop_ellip_rule &
 [ CONTEXT [ RELS <! [ ARG1 [ PNG [ PN 3s ] ],
                       ARG0 [ E [ TENSE present ] ] ] !> ],
   FLAGS.TRIGGER "be_c_is" ].

be_c_is1_cx_rule := be_cop_x1_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ],
                       ARG1 [ PNG [ PN 3s ] ] ] !> ],
   FLAGS.TRIGGER "be_c_is_cx_2" ].

be_c_is2_cx_rule := be_cop_x2_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ],
                       ARG2 [ PNG [ PN 3s ] ] ] !> ],
   FLAGS.TRIGGER "be_c_is_cx_2" ].

be_c_is3_cx_rule := be_cop_x3_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ],
                       ARG3 [ PNG [ PN 3s ] ] ] !> ],
   FLAGS.TRIGGER "be_c_is_cx_2" ].

; Special case of prednom_state_rel: "it is a relief to stay home"
be_cop_prednom_is_cx_rule := arg0e+1x_gtr &
 [ CONTEXT [ RELS <! [ PRED prednom_state_rel,
                       ARG0 [ E [ TENSE present,
                                  MOOD indicative ] ],
                       ARG1 [ PNG [ PN 3s ] ] ] !> ],
   FLAGS.TRIGGER "be_c_is_cx_2" ].

; Special case of loc_nonsp_rel: "Kim's here"
be_cop_loc_nonsp_is_cx_rule := arg0e+1x_gtr &
 [ CONTEXT [ RELS <! [ PRED loc_nonsp_rel,
                       ARG0 [ E [ TENSE present,
                                  MOOD indicative ] ],
                       ARG1 [ PNG [ PN 3s ] ] ] !> ],
   FLAGS.TRIGGER "be_c_is_cx_2" ].

; also unspec_mod_rel "The glacier is ice-blue."
be_cop_unspec_mod_is_cx_rule := arg0e+1x_gtr &
 [ CONTEXT [ RELS <! [ PRED unspec_mod_rel,
                       ARG0 [ E [ TENSE present,
                                  MOOD indicative ] ],
                       ARG1 [ PNG [ PN 3s ] ] ] !> ],
   FLAGS.TRIGGER "be_c_is_cx_2" ].

; Special case of unspec_manner_rel: "how is that?"
be_cop_unspec_manner_is_cx_rule := arg0e+1x_gtr &
 [ CONTEXT [ RELS <! [ PRED unspec_manner_rel,
                       ARG0 [ E [ TENSE present,
                                  MOOD indicative ] ],
                       ARG1 [ PNG [ PN 3s ] ] ] !> ],
   FLAGS.TRIGGER "be_c_is_cx_2" ].

; Special case of comparative
be_cop_compar_is_cx_rule := arg0e_gtr &
 [ CONTEXT [ RELS <! [ PRED comp_or_superl_rel,
                       ARG0 [ E [ TENSE present,
                                  MOOD indicative ] ],
                       ARG1 #e ],
                     [ ARG0 #e,
                       ARG1 [ PNG [ PN 3s ] ] ] !> ],
   FLAGS.TRIGGER "be_c_is_cx_2" ].

be_c_is_h1_cx_rule := be_cop_h1_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ] ] !> ],
   FLAGS.TRIGGER "be_c_is_cx_2" ].

be_c_is_h2_cx_rule := be_cop_h2_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ] ] !> ],
   FLAGS.TRIGGER "be_c_is_cx_2" ].

be_c_is_2h_psv_cx_rule := be_cop_2h_psv_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ] ], relation !> ],
   FLAGS.TRIGGER "be_c_is_cx_2" ].

be_c_is_3h_psv_cx_rule := be_cop_3h_psv_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ] ], relation !> ],
   FLAGS.TRIGGER "be_c_is_cx_2" ].

be_c_is_2x_psv_cx_rule := be_cop_2x_psv_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ],
                       ARG2 [ PNG [ PN 3s ] ] ] !> ],
   FLAGS.TRIGGER "be_c_is_cx_2" ].

be_c_is_3x_psv_cx_rule := be_cop_3x_psv_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ],
                       ARG3 [ PNG [ PN 3s ] ] ] !> ],
   FLAGS.TRIGGER "be_c_is_cx_2" ].

be_c_is_going+to_cx_rule := be_cop_going+to_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ] ] !> ],
   FLAGS.TRIGGER "be_c_is_cx_2" ].

;be_c_is_expl_1h_psv_cx_rule := be_cop_expl_1h_psv_rule &
; [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ] ] !> ],
;   FLAGS.TRIGGER "be_c_is_cx_2" ].

be_c_is_expl_2h_psv_cx_rule := be_cop_expl_2h_psv_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ] ] !> ],
   FLAGS.TRIGGER "be_c_is_cx_2" ].

be_c_is_expl_3h_psv_cx_rule := be_cop_expl_3h_psv_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ] ] !> ],
   FLAGS.TRIGGER "be_c_is_cx_2" ].

be_c_is_prd_1x_cx2_rule := be_cop_prd_1x_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ],
                       ARG1 [ PNG [ PN 3s ] ] ] !> ],
   FLAGS.TRIGGER "be_c_is_cx_2" ].

be_c_is_prd_2x_cx_rule := be_cop_prd_2x_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ],
                       ARG2 [ PNG [ PN 3s ] ] ] !> ],
   FLAGS.TRIGGER "be_c_is_cx_2" ].

be_c_is_prd_3x_cx_rule := be_cop_prd_3x_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ],
                       ARG3 [ PNG [ PN 3s ] ] ] !> ],
   FLAGS.TRIGGER "be_c_is_cx_2" ].

be_c_is_prd_1h_cx_rule := be_cop_prd_1h_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ] ] !> ],
   FLAGS.TRIGGER "be_c_is_cx_2" ].

be_c_is_prd_2h_cx_rule := be_cop_prd_2h_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ] ] !> ],
   FLAGS.TRIGGER "be_c_is_cx_2" ].

be_c_is_inf_cx_rule := be_cop_inf_rule &
 [ FLAGS.TRIGGER "be_c_is_cx_2" ].

be_c_is_inf_cx_lq_rule := be_cop_inf_rule &
 [ FLAGS.TRIGGER "be_c_is_cx_lq_2" ].

; copula 'are'

be_c_are1_rule := be_cop_x1_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ],
                       ARG1 [ PNG [ PN -3s ] ] ] !> ],
   FLAGS.TRIGGER "be_c_are" ].

be_c_are2_rule := be_cop_x2_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ],
                       ARG2 [ PNG [ PN -3s ] ] ] !> ],
   FLAGS.TRIGGER "be_c_are" ].

be_c_are3_rule := be_cop_x3_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ],
                       ARG3 [ PNG [ PN -3s ] ] ] !> ],
   FLAGS.TRIGGER "be_c_are" ].

; Special case of prednom_state_rel: "They are a pleasure to interview."
be_cop_prednom_are_rule := arg0e+1x_gtr &
 [ CONTEXT [ RELS <! [ PRED prednom_state_rel,
                       ARG0 [ E [ TENSE present,
                                  MOOD indicative ] ],
                       ARG1 [ PNG [ PN 3s ] ] ] !> ],
   FLAGS.TRIGGER "be_c_are" ].

be_c_are_2x_psv_rule := be_cop_2x_psv_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ],
                       ARG2 [ PNG [ PN -3s ] ] ] !> ],
   FLAGS.TRIGGER "be_c_are" ].

be_c_are_3x_psv_rule := be_cop_3x_psv_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ],
                       ARG3 [ PNG [ PN -3s ] ] ] !> ],
   FLAGS.TRIGGER "be_c_are" ].

;be_c_are_expl_1h_psv_rule := be_cop_expl_1h_psv_rule &
; [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ] ], relation !> ],
;   FLAGS.TRIGGER "be_c_are" ].

be_c_are_expl_2h_psv_rule := be_cop_expl_2h_psv_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ] ] !> ],
   FLAGS.TRIGGER "be_c_are" ].

be_c_are_expl_3h_psv_rule := be_cop_expl_3h_psv_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ] ] !> ],
   FLAGS.TRIGGER "be_c_are" ].


be_c_are_prd_1x_rule := be_cop_prd_1x_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ],
                       ARG1 [ PNG [ PN -3s ] ] ] !> ],
   FLAGS.TRIGGER "be_c_are" ].

be_c_are_prd_2x_rule := be_cop_prd_2x_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ],
                       ARG2 [ PNG [ PN -3s ] ] ] !> ],
   FLAGS.TRIGGER "be_c_are" ].

be_c_are_prd_3x_rule := be_cop_prd_3x_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ],
                       ARG3 [ PNG [ PN -3s ] ] ] !> ],
   FLAGS.TRIGGER "be_c_are" ].

be_c_are_prd_1h_rule := be_cop_prd_1h_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ] ] !> ],
   FLAGS.TRIGGER "be_c_are" ].

be_c_are_prd_2h_rule := be_cop_prd_2h_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ] ] !> ],
   FLAGS.TRIGGER "be_c_are" ].

;; Special case of loc_nonsp_rel: "They are here"
be_cop_loc_nonsp_are_rule := arg0e+1x_gtr &
 [ CONTEXT [ RELS <! [ PRED loc_nonsp_rel,
                       ARG0 [ E [ TENSE present ] ],
                       ARG1 [ PNG [ PN -3s ] ] ] !> ],
   FLAGS.TRIGGER "be_c_are" ].

;; also unspec_mod_rel "The glaciers are ice-blue."
be_cop_unspec_mod_are_rule := arg0e+1x_gtr &
 [ CONTEXT [ RELS <! [ PRED unspec_mod_rel,
                       ARG0 [ E [ TENSE present ] ],
                       ARG1 [ PNG [ PN -3s ] ] ] !> ],
   FLAGS.TRIGGER "be_c_are" ].


; Special case of unspec_manner_rel: "how are those?"
be_cop_unspec_manner_are_rule := arg0e+1x_gtr &
 [ CONTEXT [ RELS <! [ PRED unspec_manner_rel,
                       ARG0 [ E [ TENSE present ] ],
                       ARG1 [ PNG [ PN -3s ] ] ] !> ],
   FLAGS.TRIGGER "be_c_are" ].

; Special case of comparative
be_cop_compar_are_rule := arg0e_gtr &
 [ CONTEXT [ RELS <! [ PRED comp_or_superl_rel,
                       ARG0 [ E [ TENSE present ] ],
                       ARG1 #e ],
                     [ ARG0 #e,
                       ARG1 [ PNG [ PN -3s ] ] ] !> ],
   FLAGS.TRIGGER "be_c_are" ].

be_c_are_going+to_rule := be_cop_going+to_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ] ] !> ],
   FLAGS.TRIGGER "be_c_are" ].

be_c_are_inf_rule := be_cop_inf_rule &
 [ FLAGS.TRIGGER "be_c_are" ].

be_c_are_ellip_th_expl_rule := be_cop_ellip_th_expl_rule &
 [ CONTEXT [ RELS <! [ ARG1 [ PNG [ PN -3s ] ] ],
                     [ ARG0 [ E [ TENSE present ] ] ] !> ],
   FLAGS.TRIGGER "be_c_are" ].

be_c_are_ellip_rule := be_cop_ellip_rule &
 [ CONTEXT [ RELS <! [ ARG1 [ PNG [ PN -3s ] ],
                       ARG0 [ E [ TENSE present ] ] ] !> ],
   FLAGS.TRIGGER "be_c_are" ].

be_c_are1_cx_rule := be_cop_x1_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ],
                       ARG1 [ PNG [ PN -3s ] ] ] !> ],
   FLAGS.TRIGGER "be_c_are_cx" ].

be_c_are2_cx_rule := be_cop_x2_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ],
                       ARG2 [ PNG [ PN -3s ] ] ] !> ],
   FLAGS.TRIGGER "be_c_are_cx" ].

be_c_are3_cx_rule := be_cop_x3_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ],
                       ARG3 [ PNG [ PN -3s ] ] ] !> ],
   FLAGS.TRIGGER "be_c_are_cx" ].

be_c_are_2x_psv_cx_rule := be_cop_2x_psv_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ],
                       ARG2 [ PNG [ PN -3s ] ] ] !> ],
   FLAGS.TRIGGER "be_c_are_cx" ].

be_c_are_3x_psv_cx_rule := be_cop_3x_psv_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ],
                       ARG3 [ PNG [ PN -3s ] ] ] !> ],
   FLAGS.TRIGGER "be_c_are_cx" ].

;be_c_are_expl_1h_psv_cx_rule := be_cop_expl_1h_psv_rule &
; [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ] ], relation !> ],
;   FLAGS.TRIGGER "be_c_are_cx" ].

be_c_are_expl_2h_psv_cx_rule := be_cop_expl_2h_psv_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ] ] !> ],
   FLAGS.TRIGGER "be_c_are_cx" ].

be_c_are_expl_3h_psv_cx_rule := be_cop_expl_3h_psv_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ] ] !> ],
   FLAGS.TRIGGER "be_c_are_cx" ].

be_c_are_prd_1x_cx_rule := be_cop_prd_1x_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ],
                       ARG1 [ PNG [ PN -3s ] ] ] !> ],
   FLAGS.TRIGGER "be_c_are_cx" ].

be_c_are_prd_2x_cx_rule := be_cop_prd_2x_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ],
                       ARG2 [ PNG [ PN -3s ] ] ] !> ],
   FLAGS.TRIGGER "be_c_are_cx" ].

be_c_are_prd_3x_cx_rule := be_cop_prd_3x_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ],
                       ARG3 [ PNG [ PN -3s ] ] ] !> ],
   FLAGS.TRIGGER "be_c_are_cx" ].

; Special case of loc_nonsp_rel: "They are here"
be_cop_loc_nonsp_are_cx_rule := arg0e+1x_gtr &
 [ CONTEXT [ RELS <! [ PRED loc_nonsp_rel,
                       ARG0 [ E [ TENSE present ] ],
                       ARG1 [ PNG [ PN -3s ] ] ] !> ],
   FLAGS.TRIGGER "be_c_are_cx" ].

; also unspec_mod_rel "The glaciers are ice-blue."
be_cop_unspec_mod_are_cx_rule := arg0e+1x_gtr &
 [ CONTEXT [ RELS <! [ PRED unspec_mod_rel,
                       ARG0 [ E [ TENSE present ] ],
                       ARG1 [ PNG [ PN -3s ] ] ] !> ],
   FLAGS.TRIGGER "be_c_are_cx" ].

; Special case of unspec_manner_rel: "how are those?"
be_cop_unspec_manner_are_cx_rule := arg0e+1x_gtr &
 [ CONTEXT [ RELS <! [ PRED unspec_manner_rel,
                       ARG0 [ E [ TENSE present ] ],
                       ARG1 [ PNG [ PN -3s ] ] ] !> ],
   FLAGS.TRIGGER "be_c_are_cx" ].

; Special case of comparative
be_cop_compar_are_cx_rule := arg0e_gtr &
 [ CONTEXT [ RELS <! [ PRED comp_or_superl_rel,
                       ARG0 [ E [ TENSE present ] ],
                       ARG1 #e ],
                     [ ARG0 #e,
                       ARG1 [ PNG [ PN -3s ] ] ] !> ],
   FLAGS.TRIGGER "be_c_are_cx" ].

be_c_are_going+to_cx_rule := be_cop_going+to_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ] ] !> ],
   FLAGS.TRIGGER "be_c_are_cx" ].

be_c_are_inf_cx_rule := be_cop_inf_rule &
 [ FLAGS.TRIGGER "be_c_are_cx" ].

; copula 'am'
be_c_am1_rule := be_cop_x1_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ],
                       ARG1 [ PNG [ PN 1s ] ] ] !> ],
   FLAGS.TRIGGER "be_c_am" ].

be_c_am2_rule := be_cop_x2_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ],
                       ARG2 [ PNG [ PN 1s ] ] ] !> ],
   FLAGS.TRIGGER "be_c_am" ].

be_c_am3_rule := be_cop_x3_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ],
                       ARG3 [ PNG [ PN 1s ] ] ] !> ],
   FLAGS.TRIGGER "be_c_am" ].

be_c_am_2x_psv_rule := be_cop_2x_psv_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ],
                       ARG2 [ PNG [ PN 1s ] ] ] !> ],
   FLAGS.TRIGGER "be_c_am" ].

be_c_am_3x_psv_rule := be_cop_3x_psv_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ],
                       ARG3 [ PNG [ PN 1s ] ] ] !> ],
   FLAGS.TRIGGER "be_c_am" ].

be_c_am_prd_1x_rule := be_cop_prd_1x_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ],
                       ARG1 [ PNG [ PN 1s ] ] ] !> ],
   FLAGS.TRIGGER "be_c_am" ].

be_c_am_prd_2x_rule := be_cop_prd_2x_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ],
                       ARG2 [ PNG [ PN 1s ] ] ] !> ],
   FLAGS.TRIGGER "be_c_am" ].

be_c_am_prd_3x_rule := be_cop_prd_3x_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ],
                       ARG3 [ PNG [ PN 1s ] ] ] !> ],
   FLAGS.TRIGGER "be_c_am" ].

be_c_am_going+to_rule := be_cop_going+to_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ] ] !> ],
   FLAGS.TRIGGER "be_c_am" ].

be_c_am_inf_rule := be_cop_inf_rule &
 [ FLAGS.TRIGGER "be_c_am" ].

be_c_am1_cx_rule := be_cop_x1_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ],
                       ARG1 [ PNG [ PN 1s ] ] ] !> ],
   FLAGS.TRIGGER "be_c_am_cx_2" ].

be_c_am2_cx_rule := be_cop_x2_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ],
                       ARG2 [ PNG [ PN 1s ] ] ] !> ],
   FLAGS.TRIGGER "be_c_am_cx_2" ].

be_c_am3_cx_rule := be_cop_x3_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ],
                       ARG3 [ PNG [ PN 1s ] ] ] !> ],
   FLAGS.TRIGGER "be_c_am_cx_2" ].

be_c_am_2x_psv_cx_rule := be_cop_2x_psv_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ],
                       ARG2 [ PNG [ PN 1s ] ] ] !> ],
   FLAGS.TRIGGER "be_c_am_cx_2" ].

be_c_am_3x_psv_cx_rule := be_cop_3x_psv_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ],
                       ARG3 [ PNG [ PN 1s ] ] ] !> ],
   FLAGS.TRIGGER "be_c_am_cx_2" ].

be_c_am_prd_1x_cx_rule := be_cop_prd_1x_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ],
                       ARG1 [ PNG [ PN 1s ] ] ] !> ],
   FLAGS.TRIGGER "be_c_am_cx_2" ].

be_c_am_prd_2x_cx_rule := be_cop_prd_2x_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ],
                       ARG2 [ PNG [ PN 1s ] ] ] !> ],
   FLAGS.TRIGGER "be_c_am_cx_2" ].

be_c_am_prd_3x_cx_rule := be_cop_prd_3x_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ],
                       ARG3 [ PNG [ PN 1s ] ] ] !> ],
   FLAGS.TRIGGER "be_c_am_cx_2" ].

be_c_am_going+to_cx_rule := be_cop_going+to_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE present ] ] ] !> ],
   FLAGS.TRIGGER "be_c_am_cx_2" ].

be_c_am_inf_cx_rule := be_cop_inf_rule &
 [ FLAGS.TRIGGER "be_c_am_cx_2" ].

; copula 'was'
be_c_was1_rule := be_cop_x1_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE past ] ],
                       ARG1 [ PNG [ PN 13s ] ] ] !> ],
   FLAGS.TRIGGER "be_c_was" ].

be_c_was2_rule := be_cop_x2_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE past ] ],
                       ARG2 [ PNG [ PN 13s ] ] ] !> ],
   FLAGS.TRIGGER "be_c_was" ].

be_c_was3_rule := be_cop_x3_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE past ] ],
                       ARG3 [ PNG [ PN 13s ] ] ] !> ],
   FLAGS.TRIGGER "be_c_was" ].

; Special case of prednom_state_rel: "it was a relief to stay home"
be_cop_prednom_was_rule := arg0e+1x_gtr &
 [ CONTEXT [ RELS <! [ PRED prednom_state_rel,
                       ARG0 [ E [ TENSE past,
                                  MOOD indicative ] ],
                       ARG1 [ PNG [ PN 13s ] ] ] !> ],
   FLAGS.TRIGGER "be_c_was" ].

; Special case of loc_nonsp_rel: "Kim was here"
be_cop_loc_nonsp_was_rule := arg0e+1x_gtr &
 [ CONTEXT [ RELS <! [ PRED loc_nonsp_rel,
                       ARG0 [ E [ TENSE past,
                                  MOOD indicative ] ],
                       ARG1 [ PNG [ PN 13s ] ] ] !> ],
   FLAGS.TRIGGER "be_c_was" ].

; also unspec_mod_rel "The glacier was ice-blue."
be_cop_unspec_mod_was_rule := arg0e+1x_gtr &
 [ CONTEXT [ RELS <! [ PRED unspec_loc_or_mod_rel,
                       ARG0 [ E [ TENSE past,
                                  MOOD indicative ] ],
                       ARG1 [ PNG [ PN 13s ] ] ] !> ],
   FLAGS.TRIGGER "be_c_was" ].

; Special case of unspec_manner_rel: "How was that?"
be_cop_unspec_manner_was_rule := arg0e+1x_gtr &
 [ CONTEXT [ RELS <! [ PRED unspec_manner_rel,
                       ARG0 [ E [ TENSE past,
                                  MOOD indicative ] ],
                       ARG1 [ PNG [ PN 13s ] ] ] !> ],
   FLAGS.TRIGGER "be_c_was" ].

; Special case of comparative
be_cop_compar_was_rule := arg0e_gtr &
 [ CONTEXT [ RELS <! [ PRED comp_or_superl_rel,
                       ARG0 [ E [ TENSE past,
                                  MOOD indicative ] ],
                       ARG1 #e ],
                     [ ARG0 #e,
                       ARG1 [ PNG [ PN 13s ] ] ] !> ],
   FLAGS.TRIGGER "be_c_was" ].

be_c_was_h1_rule := be_cop_h1_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE past ] ] ] !> ],
   FLAGS.TRIGGER "be_c_was" ].

be_c_was_h2_rule := be_cop_h2_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE past ] ] ] !> ],
   FLAGS.TRIGGER "be_c_was" ].

be_c_was_2h_psv_rule := be_cop_2h_psv_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE past ] ] ], relation !> ],
   FLAGS.TRIGGER "be_c_was" ].

be_c_was_3h_psv_rule := be_cop_3h_psv_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE past ] ] ], relation !> ],
   FLAGS.TRIGGER "be_c_was" ].

be_c_was_2x_psv_rule := be_cop_2x_psv_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE past ] ],
                       ARG2 [ PNG [ PN 13s ] ] ] !> ],
   FLAGS.TRIGGER "be_c_was" ].

be_c_was_3x_psv_rule := be_cop_3x_psv_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE past ] ],
                       ARG3 [ PNG [ PN 13s ] ] ] !> ],
   FLAGS.TRIGGER "be_c_was" ].

be_c_was_going+to_rule := be_cop_going+to_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE past ] ] ] !> ],
   FLAGS.TRIGGER "be_c_was" ].

;be_c_was_expl_1h_psv_rule := be_cop_expl_1h_psv_rule &
; [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE past ] ] ], relation !> ],
;   FLAGS.TRIGGER "be_c_was" ].

be_c_was_expl_2h_psv_rule := be_cop_expl_2h_psv_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE past ] ] ] !> ],
   FLAGS.TRIGGER "be_c_was" ].

be_c_was_expl_3h_psv_rule := be_cop_expl_3h_psv_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE past ] ] ] !> ],
   FLAGS.TRIGGER "be_c_was" ].

be_c_was_prd_1x_rule := be_cop_prd_1x_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE past ] ],
                       ARG1 [ PNG [ PN 13s ] ] ] !> ],
   FLAGS.TRIGGER "be_c_was" ].

be_c_was_prd_2x_rule := be_cop_prd_2x_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE past ] ],
                       ARG2 [ PNG [ PN 13s ] ] ] !> ],
   FLAGS.TRIGGER "be_c_was" ].

be_c_was_prd_3x_rule := be_cop_prd_3x_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE past ] ],
                       ARG3 [ PNG [ PN 13s ] ] ] !> ],
   FLAGS.TRIGGER "be_c_was" ].

be_c_was_prd_1h_rule := be_cop_prd_1h_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE past ] ] ] !> ],
   FLAGS.TRIGGER "be_c_was" ].

be_c_was_prd_2h_rule := be_cop_prd_2h_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE past ] ] ] !> ],
   FLAGS.TRIGGER "be_c_was" ].

be_c_was_inf_rule := be_cop_inf_rule &
 [ FLAGS.TRIGGER "be_c_was" ].

be_c_was_ellip_th_expl_rule := be_cop_ellip_th_expl_rule &
 [ CONTEXT [ RELS <! [ ARG1 [ PNG [ PN 13s ] ] ],
                     [ ARG0 [ E [ TENSE past ] ] ] !> ],
   FLAGS.TRIGGER "be_c_was" ].

be_c_was_ellip_rule := be_cop_ellip_rule &
 [ CONTEXT [ RELS <! [ ARG1 [ PNG [ PN 13s ] ],
                       ARG0 [ E [ TENSE past ] ] ] !> ],
   FLAGS.TRIGGER "be_c_was" ].

be_c_was_subj_rule := arg0e_gtr &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ MOOD subjunctive,
                                  TENSE real_tense ] ] ] !> ],
   FLAGS.TRIGGER "be_c_was_subj" ].

; copula 'were'

;; DPF 2013-06-12 - We cannot currently restrict "were" to non-3sg subjects, 
;; since we analyze |A number/group of consultants| as semantically singular, 
;; since we use the ordinary singular noun inflectional rule.  
;; DPF 2013-08-26 - Re 2013-06-12: Fixed by adding separate set of rules for
;; were with group noun subjects, so restored constraints on normal "were".
;;
be_c_were1_rule := be_cop_x1_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE past ] ],
                       ARG1 [ PNG [ PN -3s ] ] ] !> ],
   FLAGS.TRIGGER "be_c_were" ].

be_c_were2_rule := be_cop_x2_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE past ] ],
                       ARG2 [ PNG [ PN -3s ] ] ] !> ],
   FLAGS.TRIGGER "be_c_were" ].

be_c_were3_rule := be_cop_x3_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE past ] ],
                       ARG3 [ PNG [ PN -3s ] ] ] !> ],
   FLAGS.TRIGGER "be_c_were" ].

be_c_were1_group_rule := be_cop_were_group_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ ASPECT.PROGR + ] ], ARG1 #x ],
		     [ ARG0 #x ] !> ],
   FLAGS [ TRIGGER "be_c_were" ] ].

be_c_were2_group_rule := be_cop_were_group_rule &
 [ CONTEXT [ RELS <! [ ARG2 #x ], 
		     [ ARG0 #x ] !> ],
   FLAGS [ TRIGGER "be_c_were" ] ].

be_c_were3_group_rule := be_cop_were_group_rule &
 [ CONTEXT [ RELS <! [ ARG3 #x ],
		     [ ARG0 #x ] !> ],
   FLAGS [ TRIGGER "be_c_were" ] ].


; Special case of prednom_state_rel: "They were a pleasure to interview."
be_cop_prednom_were_rule := arg0e+1x_gtr &
 [ CONTEXT [ RELS <! [ PRED prednom_state_rel,
                       ARG0 [ E [ TENSE past,
                                  MOOD indicative ] ],
                       ARG1 [ PNG [ PN 3s ] ] ] !> ],
   FLAGS.TRIGGER "be_c_were" ].

be_c_were_2x_psv_rule := be_cop_2x_psv_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE past ] ],
                       ARG2 [ PNG [ PN -3s ] ] ] !> ],
   FLAGS.TRIGGER "be_c_were" ].

be_c_were_3x_psv_rule := be_cop_3x_psv_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE past ] ],
                       ARG3 [ PNG [ PN -3s ] ] ] !> ],
   FLAGS.TRIGGER "be_c_were" ].
#|
be_c_were_2x_psv_rule := be_cop_2x_psv_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE past ] ] ] !> ],
   FLAGS.TRIGGER "be_c_were" ].

be_c_were_3x_psv_rule := be_cop_3x_psv_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE past ] ] ] !> ],
   FLAGS.TRIGGER "be_c_were" ].
|#

;be_c_were_expl_1h_psv_rule := be_cop_expl_1h_psv_rule &
; [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE past ] ] ], relation !> ],
;   FLAGS.TRIGGER "be_c_were" ].

be_c_were_expl_2h_psv_rule := be_cop_expl_2h_psv_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE past ] ] ] !> ],
   FLAGS.TRIGGER "be_c_were" ].

be_c_were_expl_3h_psv_rule := be_cop_expl_3h_psv_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE past ] ] ] !> ],
   FLAGS.TRIGGER "be_c_were" ].

be_c_were_prd_1x_rule := be_cop_prd_1x_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE past ] ],
                       ARG1 [ PNG [ PN -3s ] ] ] !> ],
   FLAGS.TRIGGER "be_c_were" ].

be_c_were_prd_2x_rule := be_cop_prd_2x_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE past ] ],
                       ARG2 [ PNG [ PN -3s ] ] ] !> ],
   FLAGS.TRIGGER "be_c_were" ].

be_c_were_prd_3x_rule := be_cop_prd_3x_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE past ] ],
                       ARG3 [ PNG [ PN -3s ] ] ] !> ],
   FLAGS.TRIGGER "be_c_were" ].

be_c_were_prd_1h_rule := be_cop_prd_1h_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE past ] ] ] !> ],
   FLAGS.TRIGGER "be_c_were" ].

be_c_were_prd_2h_rule := be_cop_prd_2h_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE past ] ] ] !> ],
   FLAGS.TRIGGER "be_c_were" ].

; Special case of loc_nonsp_rel: "They were here"
be_cop_loc_nonsp_were_rule := arg0e+1x_gtr &
 [ CONTEXT [ RELS <! [ PRED loc_nonsp_rel,
                       ARG0 [ E [ TENSE past ] ],
                       ARG1 [ PNG [ PN -3s ] ] ] !> ],
   FLAGS.TRIGGER "be_c_were" ].

; also unspec_mod_rel "The glaciers were ice-blue."
be_cop_unspec_mod_were_rule := arg0e+1x_gtr &
 [ CONTEXT [ RELS <! [ PRED unspec_loc_or_mod_rel,
                       ARG0 [ E [ TENSE past ] ],
                       ARG1 [ PNG [ PN -3s ] ] ] !> ],
   FLAGS.TRIGGER "be_c_were" ].


; Special case of unspec_manner_rel: "how were those?"
be_cop_unspec_manner_were_rule := arg0e+1x_gtr &
 [ CONTEXT [ RELS <! [ PRED unspec_manner_rel,
                       ARG0 [ E [ TENSE past ] ],
                       ARG1 [ PNG [ PN -3s ] ] ] !> ],
   FLAGS.TRIGGER "be_c_were" ].

; Special case of comparative
be_cop_compar_were_rule := arg0e_gtr &
 [ CONTEXT [ RELS <! [ PRED comp_or_superl_rel,
                       ARG0 [ E [ TENSE past ] ],
                       ARG1 #e ],
                     [ ARG0 #e,
                       ARG1 [ PNG [ PN -3s ] ] ] !> ],
   FLAGS.TRIGGER "be_c_were" ].

be_c_were_going+to_rule := be_cop_going+to_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE past ] ] ] !> ],
   FLAGS.TRIGGER "be_c_were" ].

be_c_were_inf_rule := be_cop_inf_rule &
 [ FLAGS.TRIGGER "be_c_were" ].

be_c_were_ellip_th_expl_rule := be_cop_ellip_th_expl_rule &
 [ CONTEXT [ RELS <! [ ARG1 [ PNG [ PN -3s ] ] ],
                     [ ARG0 [ E [ TENSE past ] ] ] !> ],
   FLAGS.TRIGGER "be_c_were" ].

be_c_were_ellip_rule := be_cop_ellip_rule &
 [ CONTEXT [ RELS <! [ ARG1 [ PNG [ PN -3s ] ],
                       ARG0 [ E [ TENSE past ] ] ] !> ],
   FLAGS.TRIGGER "be_c_were" ].

be_c_were_subj_rule := arg0e_gtr &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ MOOD subjunctive,
                                  TENSE real_tense,
                                  ASPECT.PROGR + ] ] ] !> ],
   FLAGS.TRIGGER "be_c_were_subj" ].


; DPF 8-Jul-02 - Removed TENSE real_tense "A could have been hiring B"

; copula 'been'

be_c_been1_rule := be_cop_x1_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ ASPECT.PRF + ] ] ] !> ],
   FLAGS.TRIGGER "be_c_been" ].

be_c_been2_rule := be_cop_x2_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ ASPECT.PRF + ] ] ] !> ],
   FLAGS.TRIGGER "be_c_been" ].

be_c_been3_rule := be_cop_x3_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ ASPECT.PRF + ] ] ] !> ],
   FLAGS.TRIGGER "be_c_been" ].

; Special case of prednom_state_rel: "it has been a relief to stay home"
be_cop_prednom_been_rule := arg0e+1x_gtr &
 [ CONTEXT [ RELS <! [ PRED prednom_state_rel,
                       ARG0 [ E [ ASPECT.PRF + ] ] ] !> ],
   FLAGS.TRIGGER "be_c_been" ].

; Special case of loc_nonsp_rel: "Kim has been here"
be_cop_loc_nonsp_been_rule := arg0e+1x_gtr &
 [ CONTEXT [ RELS <! [ PRED loc_nonsp_rel,
                       ARG0 [ E [ ASPECT.PRF + ] ] ] !> ],
   FLAGS.TRIGGER "be_c_been" ].

; also unspec_mod_rel "The glacier has been ice-blue."
be_cop_unspec_mod_been_rule := arg0e+1x_gtr &
 [ CONTEXT [ RELS <! [ PRED unspec_loc_or_mod_rel,
                       ARG0 [ E [ ASPECT.PRF + ] ] ] !> ],
   FLAGS.TRIGGER "be_c_been" ].

; Special case of unspec_manner_rel: "how has that been?"
be_cop_unspec_manner_been_rule := arg0e+1x_gtr &
 [ CONTEXT [ RELS <! [ PRED unspec_manner_rel,
                       ARG0 [ E [ ASPECT.PRF + ] ] ] !> ],
   FLAGS.TRIGGER "be_c_been" ].

; Special case of comparative
be_cop_compar_been_rule := arg0e_gtr &
 [ CONTEXT [ RELS <! [ PRED comp_or_superl_rel,
                       ARG0 [ E [ ASPECT.PRF + ] ] ] !> ],
   FLAGS.TRIGGER "be_c_been" ].

be_c_been_h1_rule := be_cop_h1_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ ASPECT.PRF + ] ] ] !> ],
   FLAGS.TRIGGER "be_c_been" ].

be_c_been_h2_rule := be_cop_h2_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ ASPECT.PRF + ] ] ] !> ],
   FLAGS.TRIGGER "be_c_been" ].

be_c_been_2h_psv_rule := be_cop_2h_psv_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ ASPECT.PRF + ] ] ],relation !> ],
   FLAGS.TRIGGER "be_c_been" ].

be_c_been_3h_psv_rule := be_cop_3h_psv_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ ASPECT.PRF + ] ] ], relation !> ],
   FLAGS.TRIGGER "be_c_been" ].

be_c_been_2x_psv_rule := be_cop_2x_psv_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ ASPECT.PRF + ] ] ] !> ],
   FLAGS.TRIGGER "be_c_been" ].

be_c_been_3x_psv_rule := be_cop_3x_psv_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ ASPECT.PRF + ] ] ] !> ],
   FLAGS.TRIGGER "be_c_been" ].

be_c_been_prd_1x_rule := be_cop_prd_1x_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ ASPECT.PRF + ] ] ] !> ],
   FLAGS.TRIGGER "be_c_been" ].

be_c_been_prd_2x_rule := be_cop_prd_2x_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ ASPECT.PRF + ] ] ] !> ],
   FLAGS.TRIGGER "be_c_been" ].

be_c_been_prd_3x_rule := be_cop_prd_3x_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ ASPECT.PRF + ] ] ] !> ],
   FLAGS.TRIGGER "be_c_been" ].

be_c_been_prd_1h_rule := be_cop_prd_1h_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ ASPECT.PRF + ] ] ] !> ],
   FLAGS.TRIGGER "be_c_been" ].

be_c_been_prd_2h_rule := be_cop_prd_2h_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ ASPECT.PRF + ] ] ] !> ],
   FLAGS.TRIGGER "be_c_been" ].

be_c_been_inf_rule := be_cop_inf_rule &
 [ FLAGS.TRIGGER "be_c_been" ].

be_c_been_ellip_th_expl_rule := be_cop_ellip_th_expl_rule &
 [ CONTEXT [ RELS <! relation, [ ARG0 [ E [ ASPECT.PRF + ] ] ] !> ],
   FLAGS.TRIGGER "be_c_been" ].

be_c_been_ellip_rule := be_cop_ellip_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ ASPECT.PRF + ] ] ] !> ],
   FLAGS.TRIGGER "be_c_been" ].

; copula 'being'

be_c_being_2h_psv_rule := be_cop_2h_psv_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE real_tense,
                                  ASPECT.PROGR + ] ] ], relation !> ],
   FLAGS.TRIGGER "be_c_being" ].

be_c_being_3h_psv_rule := be_cop_3h_psv_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE real_tense,
                                  ASPECT.PROGR + ] ] ], relation !> ],
   FLAGS.TRIGGER "be_c_being" ].

be_c_being_2x_psv_rule := be_cop_2x_psv_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE real_tense,
                                  ASPECT.PROGR + ] ] ] !> ],
   FLAGS.TRIGGER "be_c_being" ].

be_c_being_3x_psv_rule := be_cop_3x_psv_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE real_tense,
                                  ASPECT.PROGR + ] ] ] !> ],
   FLAGS.TRIGGER "be_c_being" ].

be_c_being_prd_1x_rule := be_cop_prd_1x_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ ASPECT.PROGR + ] ] ] !> ],
   FLAGS.TRIGGER "be_c_being" ].

be_c_being_prd_2x_rule := be_cop_prd_2x_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ ASPECT.PROGR + ] ] ] !> ],
   FLAGS.TRIGGER "be_c_being" ].

be_c_being_prd_3x_rule := be_cop_prd_3x_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ ASPECT.PROGR + ] ] ] !> ],
   FLAGS.TRIGGER "be_c_being" ].

be_c_being_prd_1h_rule := be_cop_prd_1h_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE real_tense,
                                  ASPECT.PROGR + ] ] ] !> ],
   FLAGS.TRIGGER "be_c_being" ].

be_c_being_prd_2h_rule := be_cop_prd_2h_rule &
 [ CONTEXT [ RELS <! [ ARG0 [ E [ TENSE real_tense,
                                  ASPECT.PROGR + ] ] ] !> ],
   FLAGS.TRIGGER "be_c_being" ].

; copula 'be'

; Predicative AP, PP except for modals (which don't introduce a message)

#|
be_c_be_rule1a := arg0e_gtr &
 [ CONTEXT [ RELS <! [ PRED "~._[pa]_",
                       ARG0.E [ TENSE untensed,
                                ASPECT [ PRF - ] ],
                       ARG1 ref-ind & #x ] !> ],
   FLAGS [ EQUAL < semarg, #x >,
           TRIGGER "be_c_be" ] ].
|#

; Predicative AP,PP with future
be_c_be_rule1b := arg0e_gtr &
 [ CONTEXT [ RELS <! [ PRED "~._[pa]_",
                       ARG0 [ E [ TENSE future,
                                  ASPECT [ PRF - ] ] ],
                       ARG1 basic_non_expl-ind & #x ] !> ],
   FLAGS [ EQUAL < semarg >,
	   SUBSUME < #x >,
           TRIGGER "be_c_be" ] ].

; Predicative AP,PP with modals: "Kim must be happy."
be_c_be_rule1c := arg0e_gtr &
 [ CONTEXT [ RELS <! [ LBL #h & handle,
                       PRED "~._[pa]_" ],
                     [ PRED "~.modal_" ] !> ],
   FILTER.RELS <! [ PRED "~._n_", LBL #h ] !>,
   FLAGS [ EQUAL < semarg, #h >,
           TRIGGER "be_c_be" ] ].

be_c_be_rule1d := arg0e_gtr &
 [ CONTEXT [ RELS <! [ LBL #h & handle,
                       PRED "prednom_state_rel" ],
                     [ PRED "~.modal_" ] !> ],
   FILTER.RELS <! [ PRED "~._n_", LBL #h ] !>,
   FLAGS [ EQUAL < semarg, #h >,
           TRIGGER "be_c_be" ] ].

; Special case of loc_nonsp_rel: "The glacier might be here."
be_c_be_rule1e := arg0e_gtr &
 [ CONTEXT [ RELS <! [ LBL #h & handle,
                       PRED loc_nonsp_rel ],
                     [ PRED "~.modal_" ] !> ],
   FILTER.RELS <! [ PRED "~._n_", LBL #h ] !>,
   FLAGS [ EQUAL < semarg, #h >,
           TRIGGER "be_c_be" ] ].

; Special case of unspec_mod_rel: "The glacier might be ice-blue."
be_c_be_rule1e2 := arg0e_gtr &
 [ CONTEXT [ RELS <! [ LBL #h & handle,
                       PRED unspec_loc_or_mod_rel ],
                     [ PRED "~.modal_" ] !> ],
   FILTER.RELS <! [ PRED "~._n_", LBL #h ] !>,
   FLAGS [ EQUAL < semarg, #h >,
           TRIGGER "be_c_be" ] ].



be_c_be_rule1f := arg0e_gtr &
 [ CONTEXT [ RELS <! [ LBL #h & handle,
                       PRED unspec_manner_rel ],
                     [ PRED "~.modal_" ] !> ],
   FILTER.RELS <! [ PRED "~._n_", LBL #h ] !>,
   FLAGS [ EQUAL < semarg, #h >,
           TRIGGER "be_c_be" ] ].

; For e.g. "We sing in order to be hired" where all ARGs are unbound
be_c_be_rule1g := arg0e_gtr &
 [ CONTEXT [ RELS <! [ PRED "~._[v]_",
                       ARG0.E [ TENSE untensed,
                                ASPECT [ PRF - ] ],
                       ARG1 non_event & #p ] !> ],
   FLAGS [ EQUAL < semarg, #p >,
           TRIGGER "be_c_be" ] ].


; In case the input leaves the ARG1 completely unbound
be_c_be_rule1h := arg0e_gtr &
 [ CONTEXT [ RELS <! [ PRED "~._[v]_",
                       ARG0.E [ TENSE untensed,
                                ASPECT [ PRF - ] ],
                       ARG1 #u & semarg ] !> ],
   FLAGS [ EQUAL < semarg, #u >,
           TRIGGER "be_c_be" ] ].


; Special case of comparative
be_cop_compar_be_rule := arg0e_gtr &
 [ CONTEXT [ RELS <! [ PRED comp_or_superl_rel,
                       ARG0 [ E [ TENSE past,
                                  MOOD indicative ] ] ] !> ],
   FLAGS.TRIGGER "be_c_be" ].

; ARG2 Passives with ordinary NP subjects, untensed
be_c_be_rule2a1 := arg0e_gtr &
 [ CONTEXT [ RELS <! [ PRED "~._[v]_",
                       ARG0 [ E [ MOOD indicative,
                                  TENSE untensed,
                                  ASPECT [ PRF - ] ] ],
                       ARG2 #x & basic_non_expl-ind ] !> ],
   FLAGS [ EQUAL < semarg >,
	   SUBSUME < #x >,
           TRIGGER "be_c_be" ] ].

; ARG2 Passives with ordinary NP subjects, future
be_c_be_rule2a2 := arg0e_gtr &
 [ CONTEXT [ RELS <! [ PRED "~._[v]_",
                       ARG0 [ E [ MOOD indicative,
                                  TENSE future,
                                  ASPECT [ PRF - ] ] ],
                       ARG2 #x & basic_non_expl-ind ] !> ],
   FLAGS [ EQUAL < semarg >,
	   SUBSUME < #x >,
           TRIGGER "be_c_be" ] ].

; ARG2 Passives with sentential subjects, untensed
be_c_be_rule2b1 := arg0e_gtr &
 [ CONTEXT [ RELS <! [ PRED "~._[v]_",
                       ARG0 [ E [ MOOD indicative,
                                  TENSE untensed,
                                  ASPECT [ PRF - ] ] ],
                       ARG2 #h & handle ] !> ],
   FLAGS [ EQUAL < semarg, #h >,
           TRIGGER "be_c_be" ] ].

; ARG2 Passives with sentential subjects, future
be_c_be_rule2b2 := arg0e_gtr &
 [ CONTEXT [ RELS <! [ PRED "~._[v]_",
                       ARG0 [ E [ MOOD indicative,
                                  TENSE future,
                                  ASPECT [ PRF - ] ] ],
                       ARG2 #h & handle ] !> ],
   FLAGS [ EQUAL < semarg, #h >,
           TRIGGER "be_c_be" ] ].

; For modals with ARG2 passives, since the modal's argument is not a message
be_c_be_rule2c := arg0e_gtr &
 [ CONTEXT [ RELS <! [ LBL #h, ARG2 #x & basic_non_expl-ind ],
                     [ PRED "~.modal_", ARG1 #h ] !> ],
   FLAGS [ EQUAL < semarg >,
	   SUBSUME < #x >,
           TRIGGER "be_c_be" ] ].

; For special case of psv w/_have_v_to_rel which doesn't have _modal_ in name
be_c_be_rule2d := arg0e_gtr &
 [ CONTEXT [ RELS <! [ LBL #h, ARG2 #h1 & handle ],
                     [ PRED "_have_v_to_rel", ARG1 #h ] !> ],
   FLAGS [ EQUAL < semarg, #h1 >,
           TRIGGER "be_c_be" ] ].

; _have_v_to_rel with ref-ind psv
be_c_be_rule2e := arg0e_gtr &
 [ CONTEXT [ RELS <! [ LBL #h, ARG2 #x & basic_non_expl-ind ],
                     [ PRED "_have_v_to_rel", ARG1 #h ] !> ],
   FLAGS [ EQUAL < semarg >,
	   SUBSUME < #x >,
           TRIGGER "be_c_be" ] ].

; Modals with ARG2 clausal passives ('That Kim won could be argued')
be_c_be_rule2f := arg0e_gtr &
 [ CONTEXT [ RELS <! [ LBL #h, ARG2 #h1 & handle ],
                     [ PRED "~.modal_", ARG1 #h ] !> ],
   FLAGS [ EQUAL < semarg, #h1 >,
           TRIGGER "be_c_be" ] ].

; These next five are too predicate specific - needed for the few v_ssr_le's
; e.g. for "fail to be..." which is not modal but does not introduce message
be_c_be_rule2g1 := arg0e_gtr &
 [ CONTEXT [ RELS <! [ ARG2 #x1 & basic_non_expl-ind ],
                     [ PRED "_begin_v_1_rel", ARG1 #h & handle ] !> ],
   FLAGS [ EQUAL < semarg, #h >,
	   SUBSUME < #x1 >,
           TRIGGER "be_c_be" ] ].
be_c_be_rule2g2 := arg0e_gtr &
 [ CONTEXT [ RELS <! [ ARG2 #x1 & basic_non_expl-ind ],
                     [ PRED "_cease_v_1_rel", ARG1 #h & handle ] !> ],
   FLAGS [ EQUAL < semarg, #h >,
	   SUBSUME < #x1 >,
           TRIGGER "be_c_be" ] ].
be_c_be_rule2g3 := arg0e_gtr &
 [ CONTEXT [ RELS <! [ ARG2 #x1 & basic_non_expl-ind ],
                     [ PRED "_continue_v_1_rel", ARG1 #h & handle ] !> ],
   FLAGS [ EQUAL < semarg, #h >,
	   SUBSUME < #x1 >,
           TRIGGER "be_c_be" ] ].
be_c_be_rule2g4 := arg0e_gtr &
 [ CONTEXT [ RELS <! [ ARG2 #x1 & basic_non_expl-ind ],
                     [ PRED "_fail_v_1_rel", ARG1 #h & handle ] !> ],
   FLAGS [ EQUAL < semarg, #h >,
	   SUBSUME < #x1 >,
           TRIGGER "be_c_be" ] ].
be_c_be_rule2g5 := arg0e_gtr &
 [ CONTEXT [ RELS <! [ ARG2 #x1 & basic_non_expl-ind ],
                     [ PRED "_start_v_1_rel", ARG1 #h & handle ] !> ],
   FLAGS [ EQUAL < semarg, #h >,
	   SUBSUME < #x1 >,
           TRIGGER "be_c_be" ] ].

; ARG3 passives (assume ref-inds only)
be_c_be_rule3a := arg0e_gtr &
 [ CONTEXT [ RELS <! [ PRED "~._v_",
                       ARG0 [ E [ MOOD indicative,
                                  TENSE untensed,
                                  ASPECT [ PRF - ] ] ],
                       ARG3 #x & basic_non_expl-ind ] !> ],
   FLAGS [ EQUAL < semarg >,
	   SUBSUME < #x >,
           TRIGGER "be_c_be" ] ].

; ARG3 modal passives ('Kim could be given a book')
; (also, assume no ARG4 passives)
be_c_be_rule3b := arg0e_gtr &
 [ CONTEXT [ RELS <! [ LBL #h, ARG3 ref-ind ],
                     [ PRED "~.modal_", ARG1 #h ] !> ],
   FLAGS [ TRIGGER "be_c_be" ] ].

; Future progressive
be_c_be_rule4a := arg0e_gtr &
 [ CONTEXT [ RELS <! [ ARG0.E [ MOOD indicative,
                                TENSE future,
                                ASPECT [ PRF -,
                                         PROGR + ] ] ] !> ],
   FLAGS.TRIGGER "be_c_be" ].

; Future with prednom_state_rel: 'It will be a relief to stay home'
be_c_be_rule4b := arg0e_gtr &
 [ CONTEXT [ RELS <! [ PRED prednom_state_rel,
                       ARG0.E [ MOOD indicative,
                                TENSE future,
                                ASPECT.PRF - ] ] !> ],
   FLAGS.TRIGGER "be_c_be" ].

; Untensed with prednom_state_rel: 'It seems to be a relief to stay home'
be_c_be_rule4c := arg0e_gtr &
 [ CONTEXT [ RELS <! [ PRED prednom_state_rel,
                       ARG0.E [ MOOD indicative,
                                TENSE untensed,
                                ASPECT.PRF - ] ] !> ],
   FLAGS.TRIGGER "be_c_be" ].


; Untensed progressive
be_c_be_rule5 := arg0e_gtr &
 [ CONTEXT [ RELS <! [ PRED "~._v_",
                       ARG0.E [ MOOD indicative,
                                TENSE untensed,
                                ASPECT [ PRF -,
                                         PROGR + ] ] ] !> ],
   FLAGS.TRIGGER "be_c_be" ].

; ARG1 handle-argument adjectives
be_c_be_rule6 := arg0e+1h_gtr &
 [ CONTEXT [ RELS <! [ PRED "~._a_",
                       ARG0.E [ MOOD indicative,
                                TENSE untensed,
                                ASPECT.PRF - ] ] !> ],
   FLAGS.TRIGGER "be_c_be" ].

be_c_be_rule7 := arg0e+1h_gtr &
 [ CONTEXT [ RELS <! [ PRED "~._a_",
                       ARG0.E [ MOOD indicative,
                                TENSE future,
                                ASPECT.PRF - ] ] !> ],
   FLAGS.TRIGGER "be_c_be" ].

; Imperatives for adj, prep: "Be happy"
be_c_be_rule8a := arg0e_gtr &
 [ CONTEXT [ RELS <! [ PRED "~._[pa]_",
                       ARG0 [ E [ MOOD indicative,
                                  TENSE present,
                                  ASPECT.PRF - ],
                              SF comm ] ] !> ],
   FLAGS.TRIGGER "be_c_be" ].

; Imperative passives: "Be admired"
be_c_be_rule8b := arg0e_gtr &
 [ CONTEXT [ RELS <! [ PRED "~._v_",
                       ARG0 [ E [ MOOD indicative,
                                  TENSE present,
                                  ASPECT.PRF - ],
                              SF comm ] ] !> ],

   FLAGS [ TRIGGER "be_c_be" ] ].

; special case for time_adj in "be time for an interview"
be_c_be_rule9 := arg0e_gtr &
 [ CONTEXT [ RELS <! [ PRED "_time_a_expl-for_rel" ] !> ],
   FLAGS.TRIGGER "be_c_be" ].

who_rel_rule1 := arg0e+x_gtr &
 [ CONTEXT [ RELS <! [ LBL #hand,
                       PRED "~._v_",
		       ARG0.E.TENSE real_tense ],
                     [ LBL #hand, ARG0 #x ] !> ],
   FILTER.RELS <! [ PRED free_relative_q_rel, ARG0 #x ] !>,
   FLAGS [ TRIGGER-CONSTRAINT.SYNSEM.LOCAL.CONT.HOOK.INDEX #x,
	   TRIGGER "who2" ] ].

who_rel_rule1c := arg0e_gtr &
 [ CONTEXT [ RELS <! [ LBL #hand,
                       PRED subord_rel,
                       ARG0.SF prop ],
                     [ LBL #hand, ARG0 #x & ref-ind] !> ],
   FILTER.RELS <! [ PRED free_relative_q_rel, ARG0 #x ] !>,
   FLAGS [ EQUAL < semarg, #x, #hand >,
	   TRIGGER-CONSTRAINT.SYNSEM.LOCAL.CONT.HOOK.INDEX #x,
	   TRIGGER "who2" ] ].

who_rel_rule1b := arg0e+x_gtr &
 [ CONTEXT [ RELS <! [ LBL #hand,
                       PRED "~._[apc]_",
                       ARG0 [ SF prop,
			      E.TENSE real_tense ] ],
                     [ LBL #hand, ARG0 #x ] !> ],
   FILTER.RELS <! [ PRED free_relative_q_rel, ARG0 #x ] !>,
   FLAGS [ TRIGGER-CONSTRAINT.SYNSEM.LOCAL.CONT.HOOK.INDEX #x,
	   TRIGGER "who2" ] ].

; Intersective adverb modifier in relative clause
who_rel_rule2 := arg0e+x_gtr &
 [ CONTEXT [ RELS <! [ LBL #hand,
                       PRED "~._a_",
                       ARG1 event ],
                     [ LBL #hand, ARG0 #x ] !> ],
   FILTER.RELS <! [ PRED free_relative_q_rel, ARG0 #x ] !>,
   FLAGS [ TRIGGER-CONSTRAINT.SYNSEM.LOCAL.CONT.HOOK.INDEX #x,
	   TRIGGER "who2" ] ].

; DPF 2013-01-28 - Not sure what this rule is for
who_rel_rule3 := arg0e+xh_gtr &
 [ CONTEXT [ RELS <! [ LBL #hand,
		       ARG0.E.TENSE real_tense ],
                     [ LBL #hand, ARG0 #x ] !> ],
   FILTER.RELS <! [ PRED free_relative_q_rel, ARG0 #x ] !>,
   FLAGS [ TRIGGER-CONSTRAINT.SYNSEM.LOCAL.CONT.HOOK.INDEX #x,
	   TRIGGER "who2" ] ].

; Scopal adverb modifier in relative clause
who_rel_rule4 := arg0e_gtr &
 [ CONTEXT [ RELS <! [ LBL #hand, PRED "~_[pa]_", 
		       ARG1 #harg & handle ],
                     [ LBL #hand, ARG0 #x & basic_non_expl-ind ] !> ],
   FILTER.RELS <! [ PRED free_relative_q_rel, ARG0 #x ] !>,
   FLAGS [ EQUAL < semarg, #hand, #harg >,
	   SUBSUME < #x >,
	   TRIGGER-CONSTRAINT.SYNSEM.LOCAL.CONT.HOOK.INDEX #x,
	   TRIGGER "who2" ] ].

who_rel_itcleft_rule := arg0e+x_gtr &
 [ CONTEXT.RELS <! [ PRED _be_v_itcleft_rel ] !>,
   FLAGS.TRIGGER "who2" ].

who_rel_postvp_rule := arg0e+x_gtr &
 [ CONTEXT.RELS <! [], [], [ PRED "relative_mod_rel" ] !>,
   FLAGS.TRIGGER "who2" ].

whom_rel_rule1 := arg0e+x_gtr &
 [ CONTEXT [ RELS <! [ LBL #hand,
                       PRED "~._v_" ],
                     [ LBL #hand, ARG0 #x ] !> ],
   FILTER.RELS <! [ PRED free_relative_q_rel, ARG0 #x ] !>,
   FLAGS [ TRIGGER-CONSTRAINT.SYNSEM.LOCAL.CONT.HOOK.INDEX #x,
	   TRIGGER "whom2" ] ].

whom_rel_rule1b := arg0e+x_gtr &
 [ CONTEXT [ RELS <! [ LBL #hand,
                       PRED "~._[ap]_",
                       ARG0 [ SF prop,
			      E.TENSE real_tense ] ],
                     [ LBL #hand, ARG0 #x ] !> ],
   FILTER.RELS <! [ PRED free_relative_q_rel, ARG0 #x ] !>,
   FLAGS [ TRIGGER-CONSTRAINT.SYNSEM.LOCAL.CONT.HOOK.INDEX #x,
	   TRIGGER "whom2" ] ].

whom_rel_rule2 := arg0e+x_gtr &
 [ CONTEXT [ RELS <! [ LBL #hand,
                       PRED "~._a_",
		       ARG0.E.TENSE real_tense,
                       ARG1 event ],
                     [ LBL #hand, ARG0 #x ] !> ],
   FILTER.RELS <! [ PRED free_relative_q_rel, ARG0 #x ] !>,
   FLAGS [ TRIGGER-CONSTRAINT.SYNSEM.LOCAL.CONT.HOOK.INDEX #x,
	   TRIGGER "whom2" ] ].

whom_rel_rule3 := arg0e+xh_gtr &
 [ CONTEXT [ RELS <! [ LBL #hand,
		       ARG0.E.TENSE real_tense ],
                     [ LBL #hand, ARG0 #x ] !> ],
   FILTER.RELS <! [ PRED free_relative_q_rel, ARG0 #x ] !>,
   FLAGS [ TRIGGER-CONSTRAINT.SYNSEM.LOCAL.CONT.HOOK.INDEX #x,
	   TRIGGER "whom2" ] ].

whom_rel_itcleft_rule := arg0e+x_gtr &
 [ CONTEXT.RELS <! [ PRED _be_v_itcleft_rel ] !>,
   FLAGS.TRIGGER "whom2" ].

; DPF 31-jan-09 - For some reason, this rule is filtered out for the sentence
; "when we arrive, peaks which arose collapse." (on the free-relative reading)
; even though the ARG0 in the CONTEXT is not equal to the ARG0 in the FILTER.
; So comment out the filter, and add some extra generation cost for now.

which_rel_rule1 := arg0e+x_gtr &
 [ CONTEXT [ RELS <! [ LBL #hand,
                       PRED "~._v_",
		       ARG0.E.TENSE real_tense ],
                     [ LBL #hand ] !> ],
   FLAGS [ TRIGGER-CONSTRAINT.SYNSEM.LOCAL.CONT.HOOK.INDEX #x,
	   TRIGGER "which_r" ] ].

which_rel_rule1b := arg0e+x_gtr &
 [ CONTEXT [ RELS <! [ LBL #hand,
                       PRED "~._[ap]_",
                       ARG0 [ SF prop,
			      E.TENSE real_tense ] ],
                     [ LBL #hand ] !> ],
   FLAGS [ TRIGGER-CONSTRAINT.SYNSEM.LOCAL.CONT.HOOK.INDEX #x,
	   TRIGGER "which_r" ] ].

which_rel_rule1c := arg0e_gtr &
 [ CONTEXT [ RELS <! [ LBL #hand,
                       PRED subord_rel,
                       ARG0.SF prop ],
                     [ LBL #hand, ARG0 #x & ref-ind] !> ],
   FILTER.RELS <! [ PRED free_relative_q_rel, ARG0 #x ] !>,
   FLAGS [ EQUAL < semarg, #x, #hand >,
	   TRIGGER-CONSTRAINT.SYNSEM.LOCAL.CONT.HOOK.INDEX #x,
	   TRIGGER "which_r" ] ].

which_rel_rule2 := arg0e+x_gtr &
 [ CONTEXT [ RELS <! [ LBL #hand,
                       PRED "~._a_",
		       ARG0.E.TENSE real_tense,
                       ARG1 event ],
                     [ LBL #hand, ARG0 #x ] !> ],
   FILTER.RELS <! [ PRED free_relative_q_rel, ARG0 #x ] !>,
   FLAGS [ TRIGGER-CONSTRAINT.SYNSEM.LOCAL.CONT.HOOK.INDEX #x,
	   TRIGGER "which_r" ] ].

which_rel_rule3 := arg0e+xh_gtr &
 [ CONTEXT [ RELS <! [ LBL #hand,
		       ARG0.E.TENSE real_tense ],
                     [ LBL #hand, ARG0 #x ] !> ],
   FILTER.RELS <! [ PRED free_relative_q_rel, ARG0 #x ] !>,
   FLAGS [ TRIGGER-CONSTRAINT.SYNSEM.LOCAL.CONT.HOOK.INDEX #x,
	   TRIGGER "which_r" ] ].

which_rel_rule4 := arg0e_gtr &
 [ CONTEXT [ RELS <! [ LBL #hand, PRED "~_[pa]_", 
		       ARG1 #harg & handle ],
                     [ LBL #hand, ARG0 #x & basic_non_expl-ind ] !> ],
   FILTER.RELS <! [ PRED free_relative_q_rel, ARG0 #x ] !>,
   FLAGS [ EQUAL < semarg, #hand, #harg >,
	   SUBSUME < #x >,
	   TRIGGER-CONSTRAINT.SYNSEM.LOCAL.CONT.HOOK.INDEX #x,
	   TRIGGER "which_r" ] ].

which_rel_itcleft_rule := arg0e+x_gtr &
 [ CONTEXT.RELS <! [ PRED _be_v_itcleft_rel ] !>,
   FLAGS.TRIGGER "which_r" ].

which_rel_postvp_rule := arg0e+x_gtr &
 [ CONTEXT.RELS <! [], [], [ PRED "relative_mod_rel" ] !>,
   FLAGS.TRIGGER "which_r" ].

that_rel_rule1 := arg0e+x_gtr &
 [ CONTEXT [ RELS <! [ LBL #hand,
                       PRED "~._v_",
		       ARG0.E.TENSE real_tense ],
                     [ LBL #hand, ARG0 #x ] !> ],
   FILTER.RELS <! [ PRED free_relative_q_rel, ARG0 #x ] !>,
   FLAGS [ TRIGGER-CONSTRAINT.SYNSEM.LOCAL.CONT.HOOK.INDEX #x,
	   TRIGGER "that_r" ] ].

that_rel_rule1b := arg0e+x_gtr &
 [ CONTEXT [ RELS <! [ LBL #hand,
                       PRED "~._[ap]_",
                       ARG0 [ SF prop,
			      E.TENSE real_tense ] ],
                     [ LBL #hand, ARG0 #x ] !> ],
   FILTER.RELS <! [ PRED free_relative_q_rel, ARG0 #x ] !>,
   FLAGS [ TRIGGER-CONSTRAINT.SYNSEM.LOCAL.CONT.HOOK.INDEX #x,
	   TRIGGER "that_r" ] ].

that_rel_rule1c := arg0e_gtr &
 [ CONTEXT [ RELS <! [ LBL #hand,
                       PRED subord_rel,
                       ARG0.SF prop ],
                     [ LBL #hand, ARG0 #x & ref-ind] !> ],
   FILTER.RELS <! [ PRED free_relative_q_rel, ARG0 #x ] !>,
   FLAGS [ EQUAL < semarg, #x, #hand >,
	   TRIGGER-CONSTRAINT.SYNSEM.LOCAL.CONT.HOOK.INDEX #x,
	   TRIGGER "that_r" ] ].

that_rel_rule2 := arg0e+x_gtr &
 [ CONTEXT [ RELS <! [ LBL #hand,
                       PRED "~._a_",
		       ARG0.E.TENSE real_tense,
                       ARG1 event ],
                     [ LBL #hand, ARG0 #x ] !> ],
   FILTER.RELS <! [ PRED free_relative_q_rel, ARG0 #x ] !>,
   FLAGS [ TRIGGER-CONSTRAINT.SYNSEM.LOCAL.CONT.HOOK.INDEX #x,
	   TRIGGER "that_r" ] ].

that_rel_rule3 := arg0e+xh_gtr &
 [ CONTEXT [ RELS <! [ LBL #hand,
		       ARG0.E.TENSE real_tense ],
                     [ LBL #hand, ARG0 #x ] !> ],
   FILTER.RELS <! [ PRED free_relative_q_rel, ARG0 #x ] !>,
   FLAGS [ TRIGGER-CONSTRAINT.SYNSEM.LOCAL.CONT.HOOK.INDEX #x,
	   TRIGGER "that_r" ] ].

that_rel_itcleft_rule := arg0e+x_gtr &
 [ CONTEXT.RELS <! [ PRED _be_v_itcleft_rel ] !>,
   FLAGS.TRIGGER "that_r" ].


and_num_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED times_rel ] !> ],
   FLAGS.TRIGGER "and_num" ].

and_fract_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED fraction_rel ] !> ],
   FLAGS.TRIGGER "and_fract" ].

and_fract_2_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED fraction_rel ] !> ],
   FLAGS.TRIGGER "and_fract_2" ].

; For all of these, make the RELS be <! which_rel !> to generate with them
wh_the_hell_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "the_hell_wh_adv" ].

wh_the_devil_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "the_devil_wh_adv" ].

wh_the_fuck_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "the_fuck_wh_adv" ].

wh_the_heck_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "the_heck_wh_adv" ].

wh_on_earth_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "on_earth_wh_adv" ].

wh_in_the_world_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "in_the_world_wh_adv" ].

wh_oh_where_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "oh_where_wh_adv" ].

wh_exactly_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "exactly_wh_adv" ].

wh_else_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "else_wh_adv" ].

wh_more_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "more_wh_adv" ].

; For now, don't try generating VP-relatives like 
; 'Kim left, which was obvious'
;
which_cp_p1_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "which_cp_p1" ].

; These won't be used in generation as long as the never_unify_rel is here
adv_disc_er_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "er_disc_adv" ].
adv_disc_umm_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "umm_root" ].
adv_disc_um_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "um_disc_adv" ].
adv_disc_uh_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "uh_disc_adv" ].
adv_disc_ah_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "ah_root" ].
adv_disc_imustsay_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "i_must_say_root" ].
adv_disc_imustsay_3_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "i_must_say_root_3" ].
adv_disc_youknow_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "you_know_disc" ].
adv_disc_youknow_2_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "you_know_2_disc" ].
adv_disc_yknow_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "y_know_disc" ].
adv_disc_yknow2_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "y_know_2_disc" ].
adv_disc_yknow3_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "y_know_disc_3" ].
adv_disc_yknow4_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "y_know_disc_4" ].
adv_disc_yknow3_u_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "y_know_disc_3_u" ].
adv_disc_yknow4_u_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "y_know_disc_4_u" ].
adv_disc_yousee_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "you_see_disc" ].
adv_disc_yousee_2_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "you_see_2_disc" ].
adv_disc_eh_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "eh_disc_adv" ].
generic_uh_disc_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "generic_uh_disc_adv" ].
adv_disc_fucking_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "fucking_disc_adv" ].
adv_disc_to_stutter_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "to_c_prop_stutter_rbst" ].
adv_disc_to_stutter_2_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "to_c_prop_stutter_2" ].
adv_disc_to_cx_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "to_c_prop_cx" ].
adv_disc_to_cx_2_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "to_c_prop_cx_2" ].
adv_disc_to_cx_2_u_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "to_c_prop_cx_2_u" ].
adv_disc_imho_1_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "imho_disc" ].
adv_disc_imho_2_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "imho_disc_2" ].
adv_disc_kind_of_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "kind_of_scop" ].
adv_disc_lets_say_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "lets_say_disc" ].
adv_disc_lets_say_2_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "lets_say_2_disc" ].
adv_disc_lets_say_3_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "lets_say_3_disc" ].
adv_disc_lets_say_4_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "lets_say_4_disc" ].
adv_disc_lets_say_5_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "lets_say_5_disc" ].
adv_disc_lets_say_6_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "lets_say_6_disc" ].
adv_disc_like_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "like_disc_adv" ].
adv_disc_nay_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "nay_disc_adv" ].
adv_disc_star_h_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "star_star_h_adv" ].
adv_disc_that_is_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "that_is_disc_adv" ].
adv_disc_therefore_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "therefore_disc_adv" ].
adv_disc_threedots1_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "threedots_disc_adv1" ].
adv_disc_threedots2_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "threedots_disc_adv2" ].
adv_disc_threedots3_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "threedots_disc_adv3" ].
adv_disc_threedots4_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "threedots_disc_adv4" ].
adv_disc_threedots5_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "threedots_disc_adv5" ].
adv_disc_threedots6_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "threedots_disc_adv6" ].
adv_disc_thus_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "thus_disc_adv" ].
adv_disc_really_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "really_filler_post" ].
adv_disc_yes_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "yes_disc_adv" ].
adv_disc_for_instance_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "for_instance_disc_adv" ].
adv_disc_for_example_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "for_example_disc_adv" ].
adv_I_guess_like_3_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "i_guess_disc_3" ].
adv_gotcha_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "gotcha_post" ].
adv_basically_like_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "basically_disc_adv" ].
adv_however_2_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "however2" ].
adv_however_3_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "however_3" ].
adv_howsomever_1_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "howsomever_1" ].
adv_howsomever_2_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "howsomever_2" ].
adv_I_think_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "i_think_disc" ].
adv_maybe_disc_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "maybe_disc_adv" ].
adv_say_disc_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "say_disc_adv" ].
adv_i_mean_disc_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "i_mean_disc" ].
adv_thats_right_pre_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "thats_right_pre_root" ].
adv_thats_right_pre_2_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "thats_right_pre_root_2" ].
adv_though_post_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "though_root_post" ].
adv_disc_perhaps_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "perhaps_disc_adv" ].
adv_disc_e_g_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "e_g_disc_adv" ].
adv_disc_e_g_2_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "e_g_disc_adv2" ].
adv_disc_e_g_3_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "e_g_disc_adv3" ].
adv_disc_e_g_4_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "e_g_disc_adv4" ].
adv_disc_e_g_5_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "e_g_disc_adv5" ].
number_sign_av_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "number_sign_av" ].
adv_disc_sort_of_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "sort_of_disc_adv" ].
adv_disc_in_a_way_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "in_a_way_disc_adv" ].
adv_disc_or_so_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "or_so_adv" ].
adv_sorry_pre_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "sorry_root_pre" ].
adv_for_one_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "for_one_disc_adv" ].
adv_i_dunno_1_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "i_dunno_s_adv1" ].
adv_i_suppose_disc_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "i_suppose_disc" ].
adv_disc_so_to_speak_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "so_to_speak_disc_adv" ].
adv_exclam_paren_post_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "exclam_paren_post" ].
adv_disc_presto_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "presto_disc_adv" ].
adv_disc_asterisk_1_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "asterisk_adv_pre_1" ].
adv_disc_asterisk_2_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "asterisk_adv_pre_2" ].
adv_disc_asterisk_3_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "asterisk_adv_pre_3" ].
adv_disc_asterisk_4_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "asterisk_adv_post_1" ].
adv_disc_asterisk_5_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "asterisk_adv_post_2" ].
adv_disc_asterisk_6_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "asterisk_adv_post_3" ].
adv_disc_alas_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "alas_dadv1" ].
adv_smiley_emoticon_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "smiley_emoticon_adv" ].
adv_smiley_emoticon_2_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "smiley_emoticon_adv2" ].
adv_smiley_emoticon_3_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "smiley_emoticon_adv3" ].
adv_smiley_emoticon_4_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "smiley_emoticon_adv4" ].
adv_smiley_emoticon_5_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "smiley_emoticon_adv5" ].
adv_emoticon_p_1_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "emoticon_p_adv1" ].

apostrophe_s_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED poss_rel, ARG2 #x ] !> ],
   FILTER [ RELS <! [ PRED pron_rel, ARG0 #x ] !> ],
   FLAGS.TRIGGER "apostrophe_s_nq_lex" ].

apostrophe_s_2_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED poss_rel, ARG2 #x ] !> ],
   FILTER [ RELS <! [ PRED pron_rel, ARG0 #x ] !> ],
   FLAGS.TRIGGER "apostrophe_s_nq_2_lex" ].

apostrophe_s_lq_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED poss_rel, ARG2 #x ] !> ],
   FILTER [ RELS <! [ PRED pron_rel, ARG0 #x ] !> ],
   FLAGS.TRIGGER "apostrophe_s_nq_lq_lex" ].

;; For entries defined in gle.tdl
left_bracket_me_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "left_bracket_me" ].
right_bracket_me_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "right_bracket_me" ].

hyphen_punctr_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "hyphen_punct_right" ].
ndash_punctr_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "ndash_punct_right" ].
punct_dblh_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "dbl_hyphen_punct" ].
punct_dblh2_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "dbl_hyphen_punct2" ].
punct_trpl2_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "trpl_hyphen_punct2" ].
punct_s_dash_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "s_dash_pct" ].
punct_s_dbldash_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "s_dbl_dash_pct" ].
punct_s_dbldash_dq_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "s_dbl_dash_pct_dq" ].
punct_s_dbldash2_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "s_dbl_dash_pct2" ].
punct_s_trpldash2_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "s_trpl_dash_pct2" ].
punct_s_fourdash_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "s_four_dash_pct" ].
punct_s_fivedash_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "s_five_dash_pct" ].
punct_mdash_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "mdash_punct" ].
s_mdash_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "s_mdash_pct" ].
punct_ellipsis_l_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "punct_ellipsis_l" ].
punct_ellipsis_r_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "punct_ellipsis_r" ].
punct_ellipsis_r2_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "punct_ellipsis_r2" ].

be_c_is_cx_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "be_c_is_cx" ].
be_c_is_cx_3_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "be_c_is_cx_3" ].
be_c_am_cx_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "be_c_am_cx" ].
be_c_am_cx_3_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "be_c_am_cx_3" ].
be_c_are_cx_2_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "be_c_are_cx_2" ].
have_bse_aux_cx_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "have_bse_aux_cx_1" ].
have_bse_aux_cx_2_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "have_bse_aux_cx_2" ].
have_bse_aux_cx_3_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "have_bse_aux_cx_3" ].
have_fin_aux_cx_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "have_fin_aux_cx" ].
have_fin_aux_cx_3_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "have_fin_aux_cx_3" ].
has_aux_cx_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "has_aux_cx" ].
has_aux_cx_3_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "has_aux_cx_3" ].
has_aux_cx_lq_2_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "has_aux_cx_lq_2" ].
had_aux_cx_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "had_aux_cx" ].
had_aux_cx_3_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "had_aux_cx_3" ].
be_inv_is_cx_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "be_inv_is_cx" ].
be_inv_is_lq_cx_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "be_inv_is_lq_cx" ].
be_inv_is_cx_2_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "be_inv_is_cx_2" ].
be_inv_are_cx_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "be_inv_are_cx" ].
be_inv_are_cx_2_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "be_inv_are_cx_2" ].
will_aux_pos_cx_3_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "will_aux_pos_cx_3" ].

be_inv_is_rule := arg0e+1x_be_gtr &
 [ CONTEXT [ RELS <! [ PRED "~._[pa]_",
                       ARG0 [ E [ MOOD indicative,
				  TENSE present ] ],
                       ARG1 [ PNG.PN 3s ] ] !> ],
   FLAGS.TRIGGER "be_inv_is" ].

be_inv_is_rule2 := arg0e+1x_be_gtr &
 [ CONTEXT [ RELS <! [ PRED ord_rel,
                       ARG0 [ E [ MOOD indicative,
                                  TENSE present ] ],
                       ARG1 [ PNG.PN 3s ] ] !> ],
   FLAGS [ TRIGGER "be_inv_is" ] ].

be_inv_loc_nonsp_mod_is_rule := arg0e+1x_be_gtr &
 [ CONTEXT [ RELS <! [ PRED loc_nonsp_rel,
                       ARG0 [ E [ MOOD indicative,
                                  TENSE present ],
                              SF prop ],
                       ARG1 [ PNG.PN 3s ] ] !> ],
   FLAGS [ TRIGGER "be_inv_is" ] ].

be_inv_unspec_mod_is_rule := arg0e+1x_be_gtr &
 [ CONTEXT [ RELS <! [ PRED unspec_loc_or_mod_rel,
                       ARG0 [ E [ MOOD indicative,
                                  TENSE present ],
                              SF prop ],
                       ARG1 [ PNG.PN 3s ] ] !> ],
   FLAGS [ TRIGGER "be_inv_is" ] ].

be_inv_was_rule := arg0e+1x_be_gtr &
 [ CONTEXT [ RELS <! [ PRED "~._[pa]_",
                       ARG0 [ E [ MOOD indicative,
                                  TENSE past ] ],
                       ARG1 [ PNG.PN 3s ] ] !> ],
   FLAGS [ TRIGGER "be_inv_was" ] ].

be_inv_was_rule2 := arg0e+1x_be_gtr &
 [ CONTEXT [ RELS <! [ PRED ord_rel,
                       ARG0 [ E [ MOOD indicative,
                                  TENSE past ] ],
                       ARG1 [ PNG.PN 3s ] ] !> ],
   FLAGS [ TRIGGER "be_inv_was" ] ].

be_inv_loc_nonsp_mod_was_rule := arg0e+1x_be_gtr &
 [ CONTEXT [ RELS <! [ PRED loc_nonsp_rel,
                       ARG0 [ E [ MOOD indicative,
                                  TENSE past ],
                              SF prop ],
                       ARG1 [ PNG.PN 3s ] ] !> ],
   FLAGS [ TRIGGER "be_inv_was" ] ].

be_inv_nonsp_mod_was_rule := arg0e+1x_be_gtr &
 [ CONTEXT [ RELS <! [ PRED unspec_loc_or_mod_rel,
                       ARG0 [ E [ MOOD indicative,
                                  TENSE past ],
                              SF prop ],
                       ARG1 [ PNG.PN 3s ] ] !> ],
   FLAGS [ TRIGGER "be_inv_was" ] ].

be_inv_are_rule := arg0e+1x_be_gtr &
 [ CONTEXT [ RELS <! [ PRED "~._[pa]_",
                       ARG0 [ E [ MOOD indicative,
				  TENSE present ] ],
                       ARG1 [ PNG.PN -3s ] ] !> ],
   FLAGS [ TRIGGER "be_inv_are" ] ].

be_inv_are_rule2 := arg0e+1x_be_gtr &
 [ CONTEXT [ RELS <! [ PRED ord_rel,
                       ARG0 [ E [ MOOD indicative,
				  TENSE present ] ],
                       ARG1 [ PNG.PN -3s ] ] !> ],
   FLAGS [ TRIGGER "be_inv_are" ] ].

be_inv_be_rule := arg0e+1x_be_gtr &
 [ CONTEXT [ RELS <! [ PRED "~._[pa]_",
                       ARG0 [ E [ MOOD indicative,
				  TENSE no_tense ] ] ] !> ],
   FLAGS [ TRIGGER "be_inv_be" ] ] .

be_inv_be_rule2 := arg0e+1x_be_gtr &
 [ CONTEXT [ RELS <! [ PRED ord_rel,
                       ARG0 [ E [ MOOD indicative,
				  TENSE no_tense ] ] ] !> ],
   FLAGS [ TRIGGER "be_inv_be" ] ].

be_inv_loc_nonsp_mod_are_rule := arg0e+1x_be_gtr &
 [ CONTEXT [ RELS <! [ PRED loc_nonsp_rel,
                       ARG0 [ E [ MOOD indicative,
                                  TENSE present ],
                              SF prop ],
                       ARG1 [ PNG.PN -3s ] ] !> ],
   FLAGS.TRIGGER "be_inv_are" ].

be_inv_nonsp_mod_are_rule := arg0e+1x_be_gtr &
 [ CONTEXT [ RELS <! [ PRED unspec_loc_or_mod_rel,
                       ARG0 [ E [ MOOD indicative,
                                  TENSE present ],
                              SF prop ],
                       ARG1 [ PNG.PN -3s ] ] !> ],
   FLAGS.TRIGGER "be_inv_are" ].

be_inv_were_rule := arg0e+1x_be_gtr &
 [ CONTEXT [ RELS <! [ PRED "~._[pa]_",
                       ARG0 [ E [ MOOD indicative,
                                  TENSE past ] ],
                       ARG1 [ PNG.PN -3s ] ] !> ],
   FLAGS.TRIGGER "be_inv_were" ].

be_inv_were_rule2 := arg0e+1x_be_gtr &
 [ CONTEXT [ RELS <! [ PRED ord_rel,
                       ARG0 [ E [ MOOD indicative,
                                  TENSE past ] ],
                       ARG1 [ PNG.PN -3s ] ] !> ],
   FLAGS.TRIGGER "be_inv_were" ].

be_inv_loc_nonsp_mod_were_rule := arg0e+1x_be_gtr &
 [ CONTEXT [ RELS <! [ PRED loc_nonsp_rel,
                       ARG0 [ E [ MOOD indicative,
                                  TENSE past ],
                              SF prop ],
                       ARG1 [ PNG.PN -3s ] ] !> ],
   FLAGS.TRIGGER "be_inv_were" ].

be_inv_unspec_mod_were_rule := arg0e+1x_be_gtr &
 [ CONTEXT [ RELS <! [ PRED unspec_loc_or_mod_rel,
                       ARG0 [ E [ MOOD indicative,
                                  TENSE past ],
                              SF prop ],
                       ARG1 [ PNG.PN -3s ] ] !> ],
   FLAGS.TRIGGER "be_inv_were" ].

expletive_it_rain_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_rain_v_1_rel" ].

expletive_it_drizzle_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_drizzle_v_1_rel" ].

expletive_it_hail_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_hail_v_1_rel" ].

expletive_it_snow_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_snow_v_1_rel" ].

expletive_it_snowy_a_expl_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_snowy_a_1_rel" ].

expletive_it_sprinkle_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_sprinkle_v_1_rel" ].

expletive_it_advance_v_x_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_advance_v_x_rel" ].

expletive_it_affect_v_x_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_affect_v_x_rel" ].

expletive_it_alarm_v_x_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_alarm_v_x_rel" ].

expletive_it_a+long+way_a_expl_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_a+long+way_a_1_rel" ].

expletive_it_amaze_v_x_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_amaze_v_1_rel" ].

expletive_it_amuse_v_x_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_amuse_v_1_rel" ].

expletive_it_anger_v_x_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_anger_v_1_rel" ].

expletive_it_annoy_v_2_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_annoy_v_1_rel" ].

expletive_it_appall_v_x_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_appall_v_1_rel" ].

expletive_it_appear_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_appear_v_to_rel" ].

expletive_it_astonish_v_x_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_astonish_v_1_rel" ].

expletive_it_arrange_v_expl_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_arrange_v_with_rel" ].

expletive_it_arrange_v_2_expl_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_arrange_v_1_rel" ].

expletive_it_augment_v_x_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_augment_v_1_rel" ].

expletive_it_baffle_v_x_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_baffle_v_1_rel" ].

expletive_it_bother_v_expl_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_bother_v_1_rel" ].

expletive_it_breezy_a_expl_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_breezy_a_1_rel" ].

expletive_it_blustery_a_expl_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_blustery_a_1_rel" ].

expletive_it_chilly_a_expl_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_chilly_a_1_rel" ].

expletive_it_cloudy_a_expl_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_cloudy_a_1_rel" ].

expletive_it_cold_a_expl_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_cold_a_1_rel" ].

expletive_it_cool_a_expl_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_cool_a_1_rel" ].

expletive_it_concern_v_x_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_concern_v_about_rel" ].

expletive_it_confuse_v_x_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_confuse_v_1_rel" ].

expletive_it_console_v_x_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_console_v_1_rel" ].

expletive_it_cost_v_x_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_cost_v_x_rel" ].

expletive_it_damp_a_expl_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_damp_a_1_rel" ].

expletive_it_delight_v_x_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_delight_v_1_rel" ].

expletive_it_devastate_v_x_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_devastate_v_1_rel" ].

expletive_it_prefer_v_expl_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_dislike_v_1_rel" ].

expletive_it_dry_a_expl_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_dry_a_1_rel" ].

expletive_it_excite_v_x_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_excite_v_1_rel" ].

expletive_it_exist_v_expl_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_exist_v_expl_rel" ].

expletive_it_fascinate_v_x_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_fascinate_v_1_rel" ].

expletive_it_feel_v_seem_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_feel_v_seem-to_rel" ].

expletive_it_flatter_v_x_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_flatter_v_1_rel" ].

expletive_it_foggy_a_expl_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_foggy_a_1_rel" ].

expletive_it_follow_v_x_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_follow_v_1_rel" ].

expletive_it_fool_v_x_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_fool_v_1_rel" ].

expletive_it_frighten_v_x_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_frighten_v_1_rel" ].

expletive_it_frigid_a_expl_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_frigid_a_1_rel" ].

expletive_it_frustrate_v_x_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_frustrate_v_1_rel" ].

expletive_it_further_v_x_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_further_v_1_rel" ].

expletive_it_gusty_a_expl_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_gusty_a_1_rel" ].

expletive_it_happen_v_expl_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_happen_v_to_rel" ].

expletive_it_hate_v_1_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_hate_v_1_rel" ].

expletive_it_haunt_v_x_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_haunt_v_1_rel" ].

expletive_it_help_v_expl_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_help_v_to_rel" ].

expletive_it_horrify_v_x_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_horrify_v_1_rel" ].

expletive_it_hot_a_expl_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_hot_a_1_rel" ].

expletive_it_humiliate_v_x_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_humiliate_v_1_rel" ].

expletive_it_hurt_v_x_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_hurt_v_1_rel" ].

expletive_it_inspire_v_x_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_inspire_v_1_rel" ].

expletive_it_interest_v_x_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_interest_v_1_rel" ].

expletive_it_intimidate_v_x_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_intimidate_v_1_rel" ].

expletive_it_intrigue_v_x_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_intrigue_v_1_rel" ].

expletive_it_irritate_v_x_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_irritate_v_1_rel" ].

expletive_it_leave_v_to_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_leave_v_to_rel" ].

expletive_it_look_v_seem_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_look_v_seem-to_rel" ].

expletive_it_make_v_1_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_make_v_cause_rel" ].

expletive_it_matter_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_matter_v_to_rel" ].

expletive_it_mild_a_expl_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_mild_a_1_rel" ].

expletive_it_occur_v_to_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_occur_v_to_rel" ].

expletive_it_offend_v_x_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_offend_v_1_rel" ].

expletive_it_pay_v_x_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_pay_v_1_rel" ].

expletive_it_puzzle_v_x_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_puzzle_v_1_rel" ].

expletive_it_rainy_a_expl_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_rainy_a_1_rel" ].

expletive_it_seem_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_seem_v_to_rel" ].

expletive_it_so_true_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_so_a_true_rel" ].

expletive_it_sound_v_seem_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_sound_v_seem-to_rel" ].

expletive_it_steep_a_expl_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_steep_a_1_rel" ].

expletive_it_strike_v_x_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_strike_v_1_rel" ].

expletive_it_sunny_a_expl_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_sunny_a_1_rel" ].

expletive_it_take_v_expl_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_take_v_2_rel" ].

expletive_it_time_a_expl_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_time_a_expl-for_rel" ].

expletive_it_turn_v_out_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_turn_v_out_rel" ].

expletive_it_warm_a_expl_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_warm_a_1_rel" ].

expletive_it_wet_a_expl_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_wet_a_1_rel" ].

expletive_it_windy_a_expl_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_windy_a_1_rel" ].

expletive_it_be_v_itcleft_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED _be_v_itcleft_rel ].

expletive_it_adj_rel := expletive_it_adj_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "~._a_" ].

expletive_it_check_v_1_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_check_v_1_rel" ].

expletive_it_decide_v_1_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_decide_v_1_rel" ].

expletive_it_determine_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_determine_v_1_rel" ].

expletive_it_discover_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_discover_v_1_rel" ].

expletive_it_forget_v_1_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_forget_v_1_rel" ].

expletive_it_guarantee_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_guarantee_v_1_rel" ].

expletive_it_guess_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_guess_v_1_rel" ].

expletive_it_imagine_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_imagine_v_1_rel" ].

expletive_it_investigate_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_investigate_v_1_rel" ].

expletive_it_know_v_1_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_know_v_1_rel" ].

expletive_it_learn_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_learn_v_1_rel" ].

expletive_it_observe_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_observe_v_1_rel" ].

expletive_it_point_v_out_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_point_v_out-to_rel" ].

expletive_it_recall_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_recall_v_1_rel" ].

expletive_it_remember_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_remember_v_1_rel" ].

expletive_it_see_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_see_v_1_rel" ].

expletive_it_suffice_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_suffice_v_1_rel" ].

expletive_it_tell_v_1_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_tell_v_1_rel" ].

expletive_it_verify_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_verify_v_1_rel" ].

expletive_it_visualize_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_visualize_v_understand_rel" ].

expletive_it_vow_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_vow_v_1_rel" ].

expletive_it_warrant_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_warrant_v_1_rel" ].

expletive_it_wire_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_wire_v_1_rel" ].

expletive_it_whisper_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_whisper_v_1_rel" ].

expletive_it_wonder_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_wonder_v_1_rel" ].

expletive_it_accept_v_1_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_accept_v_1_rel" ].

expletive_it_acknowledge_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_acknowledge_v_1_rel" ].

expletive_it_add_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_add_v_to_rel" ].

expletive_it_adjudge_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_adjudge_v_1_rel" ].

expletive_it_admire_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_admire_v_1_rel" ].

expletive_it_admit_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_admit_v_to_rel" ].

expletive_it_advocate_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_advocate_v_1_rel" ].

expletive_it_affirm_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_affirm_v_1_rel" ].

expletive_it_allege_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_allege_v_1_rel" ].

expletive_it_announce_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_announce_v_1_rel" ].

expletive_it_anticipate_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_anticipate_v_1_rel" ].

expletive_it_appreciate_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_appreciate_v_1_rel" ].

expletive_it_articulate_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_articulate_v_1_rel" ].

expletive_it_ascertain_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_ascertain_v_1_rel" ].

expletive_it_ask_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_ask_v_1_rel" ].

expletive_it_assert_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_assert_v_1_rel" ].

expletive_it_assess_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_assess_v_1_rel" ].

expletive_it_assume_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_assume_v_1_rel" ].

expletive_it_attest_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_attest_v_1_rel" ].

expletive_it_bargain_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_bargain_v_1_rel" ].

expletive_it_believe_v_1_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_believe_v_1_rel" ].

expletive_it_bellow_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_bellow_v_1_rel" ].

expletive_it_boast_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_boast_v_1_rel" ].

expletive_it_brag_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_brag_v_1_rel" ].

expletive_it_calculate_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_calculate_v_1_rel" ].

expletive_it_certify_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_certify_v_1_rel" ].

expletive_it_circulate_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_circulate_v_1_rel" ].

expletive_it_cite_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_cite_v_1_rel" ].

expletive_it_claim_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_claim_v_1_rel" ].

expletive_it_clarify_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_clarify_v_1_rel" ].

expletive_it_command_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_command_v_1_rel" ].

expletive_it_comment_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_comment_v_1_rel" ].

expletive_it_complain_v_1_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_complain_v_1_rel" ].

expletive_it_comprehend_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_comprehend_v_1_rel" ].

expletive_it_concede_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_concede_v_1_rel" ].

expletive_it_conceive_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_conceive_v_1_rel" ].

expletive_it_conclude_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_conclude_v_1_rel" ].

expletive_it_consider_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_consider_v_1_rel" ].

expletive_it_construe_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_construe_v_1_rel" ].

expletive_it_contend_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_contend_v_1_rel" ].

expletive_it_counter_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_counter_v_1_rel" ].

expletive_it_debate_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_debate_v_1_rel" ].

expletive_it_declare_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_declare_v_1_rel" ].

expletive_it_decree_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_decree_v_1_rel" ].

expletive_it_demand_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_demand_v_1_rel" ].

expletive_it_demonstrate_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_demonstrate_v_1_rel" ].

expletive_it_deny_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_deny_v_1_rel" ].

expletive_it_desire_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_desire_v_1_rel" ].

expletive_it_detail_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_detail_v_1_rel" ].

expletive_it_detect_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_detect_v_1_rel" ].

expletive_it_diagnose_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_diagnose_v_1_rel" ].

expletive_it_dictate_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_dictate_v_1_rel" ].

expletive_it_discern_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_discern_v_1_rel" ].

expletive_it_disclose_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_disclose_v_1_rel" ].

expletive_it_discuss_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_discuss_v_1_rel" ].

expletive_it_dispute_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_dispute_v_1_rel" ].

expletive_it_document_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_document_v_1_rel" ].

expletive_it_doubt_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_doubt_v_1_rel" ].

expletive_it_dread_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_dread_v_1_rel" ].

expletive_it_dream_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_dream_v_1_rel" ].

expletive_it_educe_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_educe_v_1_rel" ].

expletive_it_elaborate_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_elaborate_v_1_rel" ].

expletive_it_emphasize_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_emphasize_v_to_rel" ].

expletive_it_enquire_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_enquire_v_1_rel" ].

expletive_it_ensure_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_ensure_v_1_rel" ].

expletive_it_entail_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_entail_v_1_rel" ].

expletive_it_envisage_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_envisage_v_1_rel" ].

expletive_it_envision_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_envision_v_1_rel" ].

expletive_it_establish_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_establish_v_1_rel" ].

expletive_it_estimate_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_estimate_v_at_rel" ].

expletive_it_exhibit_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_exhibit_v_1_rel" ].

expletive_it_expect_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_expect_v_1_rel" ].

expletive_it_explore_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_explore_v_1_rel" ].

expletive_it_fancy_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_fancy_v_1_rel" ].

expletive_it_fathom_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_fathom_v_1_rel" ].

expletive_it_fear_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_fear_v_1_rel" ].

expletive_it_feel_v_1_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_feel_v_1_rel" ].

expletive_it_figure_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_figure_v_1_rel" ].

expletive_it_forecast_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_forecast_v_1_rel" ].

expletive_it_fret_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_fret_v_1_rel" ].

expletive_it_gather_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_gather_v_1_rel" ].

expletive_it_gauge_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_gauge_v_1_rel" ].

expletive_it_generalize_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_generalize_v_1_rel" ].

expletive_it_grant_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_grant_v_1_rel" ].

expletive_it_grasp_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_grasp_v_1_rel" ].

expletive_it_hear_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_hear_v_1_rel" ].

expletive_it_highlight_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_highlight_v_1_rel" ].

expletive_it_hint_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_hint_v_1_rel" ].

expletive_it_hold_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_hold_v_1_rel" ].

expletive_it_hope_v_1_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_hope_v_1_rel" ].

expletive_it_hypothesize_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_hypothesize_v_1_rel" ].

expletive_it_illustrate_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_illustrate_v_1_rel" ].

expletive_it_imply_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_imply_v_1_rel" ].

expletive_it_infer_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_infer_v_1_rel" ].

expletive_it_inquire_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_inquire_v_1_rel" ].

expletive_it_insinuate_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_insinuate_v_1_rel" ].

expletive_it_insure_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_insure_v_1_rel" ].

expletive_it_intimate_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_intimate_v_1_rel" ].

expletive_it_judge_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_judge_v_1_rel" ].

expletive_it_justify_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_justify_v_1_rel" ].

expletive_it_maintain_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_maintain_v_1_rel" ].

expletive_it_mandate_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_mandate_v_1_rel" ].

expletive_it_mean_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_mean_v_1_rel" ].

expletive_it_mention_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_mention_v_1_rel" ].

expletive_it_murmur_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_murmur_v_1_rel" ].

expletive_it_muse_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_muse_v_1_rel" ].

expletive_it_mutter_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_mutter_v_1_rel" ].

expletive_it_note_v_1_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_note_v_1_rel" ].

expletive_it_notice_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_notice_v_1_rel" ].

expletive_it_object_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_object_v_1_rel" ].

expletive_it_outline_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_outline_v_1_rel" ].

expletive_it_overhear_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_overhear_v_1_rel" ].

expletive_it_perceive_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_perceive_v_1_rel" ].

expletive_it_pinpoint_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_pinpoint_v_1_rel" ].

expletive_it_posit_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_posit_v_1_rel" ].

expletive_it_postulate_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_postulate_v_1_rel" ].

expletive_it_pray_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_pray_v_1_rel" ].

expletive_it_predict_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_predict_v_1_rel" ].

expletive_it_presume_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_presume_v_1_rel" ].

expletive_it_presuppose_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_presuppose_v_1_rel" ].

expletive_it_pretend_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_pretend_v_1_rel" ].

expletive_it_proclaim_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_proclaim_v_1_rel" ].

expletive_it_profess_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_profess_v_1_rel" ].

expletive_it_promise_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_promise_v_1_rel" ].

expletive_it_propose_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_propose_v_1_rel" ].

expletive_it_protest_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_protest_v_1_rel" ].

expletive_it_prove_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_prove_v_1_rel" ].

expletive_it_provide_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_provide_v_1_rel" ].

expletive_it_query_v_rel := expletive_it_gtr & 
[ CONTEXT.RELS.LIST.FIRST.PRED "_query_v_1_rel" ].

expletive_it_question_v_rel := expletive_it_gtr & 
[ CONTEXT.RELS.LIST.FIRST.PRED "_question_v_1_rel" ].

expletive_it_rationalize_v_rel := expletive_it_gtr & 
[ CONTEXT.RELS.LIST.FIRST.PRED "_rationalize_v_1_rel" ].

expletive_it_read_v_rel := expletive_it_gtr & 
[ CONTEXT.RELS.LIST.FIRST.PRED "_read_v_1_rel" ].

expletive_it_reaffirm_v_rel := expletive_it_gtr & 
[ CONTEXT.RELS.LIST.FIRST.PRED "_reaffirm_v_1_rel" ].

expletive_it_realize_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_realize_v_1_rel" ].

expletive_it_reason_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_reason_v_1_rel" ].

expletive_it_reassert_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_reassert_v_1_rel" ].

expletive_it_recognize_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_recognize_v_1_rel" ].

expletive_it_recommend_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_recommend_v_1_rel" ].

expletive_it_reconsider_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_reconsider_v_1_rel" ].

expletive_it_recount_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_recount_v_1_rel" ].

expletive_it_reflect_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_reflect_v_1_rel" ].

expletive_it_regret_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_regret_v_1_rel" ].

expletive_it_reiterate_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_reiterate_v_1_rel" ].

expletive_it_relate_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_relate_v_1_rel" ].

expletive_it_report_v_1_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_report_v_1_rel" ].

expletive_it_request_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_request_v_1_rel" ].

expletive_it_require_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_require_v_1_rel" ].

expletive_it_resent_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_resent_v_1_rel" ].

expletive_it_resort_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_resort_v_1_rel" ].

expletive_it_reveal_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_reveal_v_1_rel" ].

expletive_it_rue_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_rue_v_1_rel" ].

expletive_it_sense_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_sense_v_1_rel" ].

expletive_it_shout_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_shout_v_1_rel" ].

expletive_it_shriek_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_shriek_v_1_rel" ].

expletive_it_signify_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_signify_v_1_rel" ].

expletive_it_sing_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_sing_v_1_rel" ].

expletive_it_specify_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_specify_v_1_rel" ].

expletive_it_speculate_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_speculate_v_1_rel" ].

expletive_it_state_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_state_v_1_rel" ].

expletive_it_stipulate_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_stipulate_v_1_rel" ].

expletive_it_stress_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_stress_v_1_rel" ].

expletive_it_suspect_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_suspect_v_1_rel" ].

expletive_it_test_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_test_v_1_rel" ].

expletive_it_testify_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_testify_v_1_rel" ].

expletive_it_theorize_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_theorize_v_1_rel" ].

expletive_it_think_v_1_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_think_v_1_rel" ].

expletive_it_trust_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_trust_v_1_rel" ].

expletive_it_underscore_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_underscore_v_1_rel" ].

expletive_it_urge_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_urge_v_1_rel" ].

expletive_it_wish_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_wish_v_1_rel" ].

expletive_it_worry_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_worry_v_1_rel" ].

expletive_it_venture_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_venture_v_1_rel" ].

expletive_it_argue_v_1_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_argue_v_1_rel" ].

expletive_it_insist_v_1_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_insist_v_1_rel" ].

expletive_it_joke_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_joke_v_1_rel" ].

expletive_it_reckon_v_1_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_reckon_v_1_rel" ].

expletive_it_remark_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_remark_v_1_rel" ].

expletive_it_suppose_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_suppose_v_1_rel" ].

expletive_it_find_v_1_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_find_v_mental_rel" ].

expletive_it_agree_v_1_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_agree_v_1_rel" ].

expletive_it_confirm_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_confirm_v_1_rel" ].

expletive_it_explain_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_explain_v_1_rel" ].

expletive_it_reconfirm_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_reconfirm_v_1_rel" ].

expletive_it_reply_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_reply_v_1_rel" ].

expletive_it_say_v_1_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_say_v_1_rel" ].

expletive_it_suggest_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_suggest_v_1_rel" ].

expletive_it_swear_v_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_swear_v_1_rel" ].

expletive_it_understand_v_by_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_understand_v_by_rel" ].

expletive_it_write_v_1_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_write_v_1_rel" ].

expletive_it_figure_v_out_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_figure_v_out_rel" ].

expletive_it_find_v_out_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_find_v_out_rel" ].

expletive_it_bitch_n_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_bitch_n_1_rel" ].

expletive_it_breeze_n_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_breeze_n_1_rel" ].

expletive_it_chore_n_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_chore_n_1_rel" ].

expletive_it_cinch_n_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_cinch_n_1_rel" ].

expletive_it_delight_n_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_delight_n_1_rel" ].

expletive_it_nuisance_n_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_nuisance_n_1_rel" ].

expletive_it_pain_n_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_pain_n_1_rel" ].

expletive_it_pleasure_n_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_pleasure_n_of_rel" ].

expletive_it_relief_n_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_relief_n_1_rel" ].

expletive_it_snap_n_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_snap_n_1_rel" ].

expletive_it_be_itcleft_rel := expletive_it_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED _be_v_itcleft_rel ].

; FIX - maybe say ARG1 is not present, somehow?
be_c_is_itx_rule1 := arg0e_gtr &
 [ CONTEXT [ RELS <! [ PRED "_rain_v_1_rel",
                       ARG0 [ E #tam & [ MOOD indicative,
					 TENSE present ] ] ] !> ],
   FLAGS [ TRIGGER-CONSTRAINT.SYNSEM.LOCAL.CONT.HOOK.INDEX.E #tam,
	   TRIGGER "be_c_is" ] ].

be_c_was_itx_rule1 := arg0e_gtr &
 [ CONTEXT [ RELS <! [ PRED "_rain_v_1_rel",
                       ARG0 [ E #tam & [ MOOD indicative,
					 TENSE past ] ] ] !> ],
   FLAGS [ TRIGGER-CONSTRAINT.SYNSEM.LOCAL.CONT.HOOK.INDEX.E #tam,
	   TRIGGER "be_c_was" ] ].

that_compl_rule_1 := compl_prop_gtr1 &
[ FLAGS.TRIGGER "that_c" ]. 

that_compl_rule_2 := compl_prop_gtr2 &
[ FLAGS.TRIGGER "that_c" ]. 

that_compl_rule_3 := compl_prop_gtr3 &
[ FLAGS.TRIGGER "that_c" ]. 

that_compl_rule_4 := compl_prop_gtr4 &
[ FLAGS.TRIGGER "that_c" ]. 

that_compl_rule5 := arg0e_gtr &
 [ CONTEXT [ RELS <! [ PRED comp_so_rel ],
                     [ PRED "~._v_",
                       ARG0 [ E.TENSE real_tense ] ] !> ],
   FLAGS.TRIGGER "that_c" ].

that_compl_conj_rule_1 := compl_prop_gtr1 &
[ FLAGS.TRIGGER "that_c_conj" ]. 

that_compl_conj_rule_2 := compl_prop_gtr2 &
[ FLAGS.TRIGGER "that_c_conj" ]. 

that_compl_conj_rule_3 := compl_prop_gtr3 &
[ FLAGS.TRIGGER "that_c_conj" ]. 

that_compl_conj_rule_4 := compl_prop_gtr4 &
[ FLAGS.TRIGGER "that_c_conj" ]. 

that_compl_conj_rule5 := arg0e_gtr &
 [ CONTEXT [ RELS <! [ PRED comp_so_rel ],
                     [ PRED "~._v_",
                       ARG0 [ E.TENSE real_tense ] ] !> ],
   FLAGS.TRIGGER "that_c_conj" ].

;; Only used for "not the case" hack entry for OpenProof
;;
that_subj_compl_rule_1 := compl_prop_gtr1 &
[ CONTEXT.RELS <! relation, [ ARG0 [ E.MOOD subjunctive ] ] !>,
  FLAGS.TRIGGER "that_c_subj" ]. 

that_subj_compl_rule_2 := compl_prop_gtr2 &
[ CONTEXT.RELS <! relation, [ ARG0 [ E.MOOD subjunctive ] ] !>,
  FLAGS.TRIGGER "that_c_subj" ]. 

that_subj_compl_rule_3 := compl_prop_gtr3 &
[ CONTEXT.RELS <! relation, [ ARG0 [ E.MOOD subjunctive ] ] !>,
  FLAGS.TRIGGER "that_c_subj" ]. 

that_subj_compl_rule_4 := compl_prop_gtr4 &
[ CONTEXT.RELS <! relation, [ ARG0 [ E.MOOD subjunctive ] ] !>,
  FLAGS.TRIGGER "that_c_subj" ]. 

to_compl_rule_1 := compl_notense_gtr1 &
[ FLAGS.TRIGGER "to_c_prop" ]. 

to_compl_rule_2 := compl_notense_gtr2 &
[ FLAGS.TRIGGER "to_c_prop" ]. 

to_compl_rule_3 := compl_notense_gtr3 &
[ FLAGS.TRIGGER "to_c_prop" ]. 

to_compl_rule_4 := arg0e_gtr &
 [ CONTEXT [ RELS <! [ PRED comp_deg_rel ],
                     [ PRED "~._v_",
                       ARG0 [ E.TENSE no_tense ] ] !> ],
   FLAGS.TRIGGER "to_c_prop" ].

to_compl_rule_5 := arg0e_gtr &
 [ CONTEXT [ RELS <! [ PRED "_for_x_cond_rel" ] !> ],
   FLAGS.TRIGGER "to_c_prop" ].

to_compl_rule_6 := arg0e_gtr &
 [ CONTEXT [ RELS <! [ PRED "_in+order+to_x_rel" ] !> ],
   FLAGS.TRIGGER "to_c_prop" ].

to_compl_rule_7 := be_cop_inf_rule &
 [ FLAGS.TRIGGER "to_c_prop" ].

to_compl_rule_8 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED nominalization_rel ],
		     [ ARG0 event & [ E.TENSE no_tense ] ] !> ],
   FLAGS.TRIGGER "to_c_prop" ].

for_compl_inf_rule_1 := compl_notense_gtr1 &
[ FLAGS.TRIGGER "for_c" ]. 

for_compl_inf_rule_2 := compl_notense_gtr2 &
[ FLAGS.TRIGGER "for_c" ]. 

for_compl_inf_rule_3 := compl_notense_gtr3 &
[ FLAGS.TRIGGER "for_c" ]. 

for_compl_inf_rule_4 := arg0e_gtr &
 [ CONTEXT [ RELS <! [ PRED comp_deg_rel ],
                     [ PRED "~._v_",
                       ARG0 [ E.TENSE no_tense ] ] !> ],
   FLAGS.TRIGGER "for_c" ].

for_compl_inf_rule5 := arg0e_gtr &
 [ CONTEXT [ RELS <! [ LBL #hand,
                       PRED "~._v_",
                       ARG0.E.TENSE untensed ],
                     [ LBL #hand, ARG0 #x & basic_non_expl-ind ] !> ],
   FLAGS [ EQUAL < semarg >,
	   SUBSUME < #x >,
           TRIGGER "for_c" ] ].

whether_compl_rule_1 := compl_ques_gtr1 &
[ FLAGS.TRIGGER "whether_c_fin" ]. 

whether_compl_rule_2 := compl_ques_gtr2 &
[ FLAGS.TRIGGER "whether_c_fin" ]. 

whether_compl_rule_3 := compl_ques_gtr3 &
[ FLAGS.TRIGGER "whether_c_fin" ]. 

whether_compl_rule_4 := compl_ques_gtr4 &
[ FLAGS.TRIGGER "whether_c_fin" ]. 

whether_compl_rule_5 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED nominalization_rel ] !> ],
   FLAGS.TRIGGER "whether_c_fin" ]. 

whether_compl_inf_rule_1 := compl_ques_notense_gtr1 &
[ FLAGS.TRIGGER "whether_c_inf" ]. 

whether_compl_inf_rule_2 := compl_ques_notense_gtr2 &
[ FLAGS.TRIGGER "whether_c_inf" ]. 

whether_compl_inf_rule_3 := compl_ques_notense_gtr3 &
[ FLAGS.TRIGGER "whether_c_inf" ]. 

whether_or_not_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "whether_or_not_c_fin" ].

whether_or_not_inf_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "whether_or_not_c_inf" ].

if_compl_rule_1 := compl_ques_gtr1 &
[ FLAGS.TRIGGER "if_c_indic" ]. 

if_compl_rule_2 := compl_ques_gtr2 &
[ FLAGS.TRIGGER "if_c_indic" ]. 

if_compl_rule_3 := compl_ques_gtr3 &
[ FLAGS.TRIGGER "if_c_indic" ]. 

if_compl_rule_4 := compl_ques_gtr4 &
[ FLAGS.TRIGGER "if_c_indic" ]. 

if_compl_subj_rule_1 := compl_ques_gtr1 &
[ CONTEXT.RELS <! relation, [ ARG0 [ E.MOOD subjunctive ] ] !>,
  FLAGS.TRIGGER "if_c_subjnct" ]. 

if_compl_subj_rule_2 := compl_ques_gtr2 &
[ CONTEXT.RELS <! relation, [ ARG0 [ E.MOOD subjunctive ] ] !>,
  FLAGS.TRIGGER "if_c_subjnct" ]. 

if_compl_subj_rule_3 := compl_ques_gtr3 &
[ CONTEXT.RELS <! relation, [ ARG0 [ E.MOOD subjunctive ] ] !>,
  FLAGS.TRIGGER "if_c_subjnct" ]. 

if_compl_subj_rule_4 := compl_ques_gtr4 &
[ CONTEXT.RELS <! relation, [ ARG0 [ E.MOOD subjunctive ] ] !>,
  FLAGS.TRIGGER "if_c_subjnct" ]. 

#|
like_compl_rule_1 := compl_like_gtr1 &
[ FLAGS.TRIGGER "like_c" ]. 

like_compl_rule_2 := compl_like_gtr2 &
[ FLAGS.TRIGGER "like_c" ]. 

like_compl_rule_3 := compl_like_gtr3 &
[ FLAGS.TRIGGER "like_c" ]. 

like_compl_rule_4 := compl_like_gtr4 &
[ FLAGS.TRIGGER "like_c" ]. 

as_if_compl_rule_1 := compl_like_gtr1 &
[ FLAGS.TRIGGER "as_if_c" ]. 

as_if_compl_rule_2 := compl_like_gtr2 &
[ FLAGS.TRIGGER "as_if_c" ]. 

as_if_compl_rule_3 := compl_like_gtr3 &
[ FLAGS.TRIGGER "as_if_c" ]. 

as_if_compl_rule_4 := compl_like_gtr4 &
[ FLAGS.TRIGGER "as_if_c" ]. 

as_though_compl_rule_1 := compl_like_gtr1 &
[ FLAGS.TRIGGER "as_though_c" ]. 

as_though_compl_rule_2 := compl_like_gtr2 &
[ FLAGS.TRIGGER "as_though_c" ]. 

as_though_compl_rule_3 := compl_like_gtr3 &
[ FLAGS.TRIGGER "as_though_c" ]. 

as_though_compl_rule_4 := compl_like_gtr4 &
[ FLAGS.TRIGGER "as_though_c" ]. 
|#

like_compl_rule_1 := compl_prop_gtr1 &
[ FLAGS.TRIGGER "like_c" ]. 

like_compl_rule_2 := compl_prop_gtr2 &
[ FLAGS.TRIGGER "like_c" ]. 

like_compl_rule_3 := compl_prop_gtr3 &
[ FLAGS.TRIGGER "like_c" ]. 

like_compl_rule_4 := compl_prop_gtr4 &
[ FLAGS.TRIGGER "like_c" ]. 

as_if_compl_rule_1 := compl_prop_gtr1 &
[ FLAGS.TRIGGER "as_if_c" ]. 

as_if_compl_rule_2 := compl_prop_gtr2 &
[ FLAGS.TRIGGER "as_if_c" ]. 

as_if_compl_rule_3 := compl_prop_gtr3 &
[ FLAGS.TRIGGER "as_if_c" ]. 

as_if_compl_rule_4 := compl_prop_gtr4 &
[ FLAGS.TRIGGER "as_if_c" ]. 

as_though_compl_rule_1 := compl_prop_gtr1 &
[ FLAGS.TRIGGER "as_though_c" ]. 

as_though_compl_rule_2 := compl_prop_gtr2 &
[ FLAGS.TRIGGER "as_though_c" ]. 

as_though_compl_rule_3 := compl_prop_gtr3 &
[ FLAGS.TRIGGER "as_though_c" ]. 

as_though_compl_rule_4 := compl_prop_gtr4 &
[ FLAGS.TRIGGER "as_though_c" ]. 

; Verbs that select a VP complement marked with unusual complementizers
; 'and', 'but', 'from' ('Kim will try and do that', 'We can't help but notice'
; 'They kept him from leaving')

and_compl_inf_rule_1 := arg0e_gtr &
[ CONTEXT.RELS <! [ PRED "_try_v_1_rel", ARG2 handle & #h ] !>,
  FLAGS [ EQUAL < semarg, #h >,
	  TRIGGER "and_c_prop" ] ].   

but_compl_inf_rule_1 := arg0e_gtr &
[ CONTEXT.RELS <! [ PRED "_help_v_but_rel", ARG2 handle & #h ] !>,
  FLAGS [ EQUAL < semarg, #h >,
	  TRIGGER "but_c_prop" ] ].   

from_compl_inf_rule_1 := arg0e_gtr &
[ CONTEXT.RELS <! [ PRED "~.[_-]from(-[^_]+)?_rel" ] !>,
  FLAGS.TRIGGER "from_c_prop" ]. 

; For infinitival relative clauses
to_compl_rule1 := arg0e_gtr &
 [ CONTEXT [ RELS <! [ LBL #hand,
                       PRED "~._v_",
                       ARG0.E.TENSE untensed ],
                     [ LBL #hand, ARG0 #x & basic_non_expl-ind ] !> ],
   FLAGS [ EQUAL < semarg >,
	   SUBSUME < #x >,
           TRIGGER "to_c_prop" ] ].

to_compl_rule2 := arg0e_gtr &
 [ CONTEXT [ RELS <! [ LBL #hand,
                       PRED "~._a_",
                       ARG1 event ],
                     [ LBL #hand, ARG0 #x & basic_non_expl-ind ] !> ],
   FLAGS [ EQUAL < semarg >,
	   SUBSUME < #x >,
           TRIGGER "to_c_prop" ] ].

to_compl_rule3 := arg0e_gtr &
 [ CONTEXT [ RELS <! [ LBL #hand,
                       ARG1 handle & #h ],
                     [ LBL #hand, ARG0 #x & basic_non_expl-ind ] !> ],
   FLAGS [ EQUAL < semarg, #h >,
	   SUBSUME < #x >,
           TRIGGER "to_c_prop" ] ].

; For infinitival relatives with there-copula, as in "What is there to do?"

to_compl_rule4 := arg0e_gtr &
 [ CONTEXT [ RELS <! [ LBL #hand,
                       PRED "~._v_",
                       ARG0.E.TENSE untensed ],
                     [ LBL #hand,
		       PRED _be_v_there_rel ] !> ],
   FLAGS [ EQUAL < semarg >,
           TRIGGER "to_c_prop" ] ].

to_compl_rule5 := arg0e_gtr &
 [ CONTEXT [ RELS <! [ LBL #hand,
                       PRED "~._a_",
                       ARG0.E.TENSE untensed ],
                     [ LBL #hand,
		       PRED _be_v_there_rel ] !> ],
   FLAGS [ EQUAL < semarg >,
           TRIGGER "to_c_prop" ] ].

; Empty prepositions/particles

; The regex "(-[^_]+)?_rel" says either simply end in "_rel" or have as
; intervening character sequence one starting with hyphen followed by
; any number of characters excluding underscore, ending with "_rel".
; This allows for matching where the triggering sequence in the pred
; name is part of a more complex 'subsense' specification, such as
; "_different_a_from-than_rel".

aback_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~.[_-]aback(-[^_]+)?_rel" ] !> ],
   FLAGS.TRIGGER "aback_prtcl" ]. 

about_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~.[_-]about(-[^_]+)?_rel" ] !> ],
   FLAGS.TRIGGER "about_prtcl" ]. 

across_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~.[_-]across(-[^_]+)?_rel" ] !> ],
   FLAGS.TRIGGER "across_prtcl" ]. 

after_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~.[_-]after(-[^_]+)?_rel" ] !> ],
   FLAGS.TRIGGER "after_prtcl" ]. 

against_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~.[_-]against(-[^_]+)?_rel" ] !> ],
   FLAGS.TRIGGER "against_prtcl" ]. 

ahead_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~.[_-]ahead(-[^_]+)?_rel" ] !> ],
   FLAGS.TRIGGER "ahead_prtcl" ]. 

along_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~.[_-]along(-[^_]+)?_rel" ] !> ],
   FLAGS.TRIGGER "along_prtcl" ]. 

among_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~.[_-]among(-[^_]+)?_rel" ] !> ],
   FLAGS.TRIGGER "among_prtcl" ]. 

apart_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~.[_-]apart(-[^_]+)?_rel" ] !> ],
   FLAGS.TRIGGER "apart_prtcl" ]. 

around_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~.[_-]around(-[^_]+)?_rel" ] !> ],
   FLAGS.TRIGGER "around_prtcl" ]. 

as_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~.[_-]as(-[^_]+)?_rel" ] !> ],
   FLAGS [ TRIGGER "as_prtcl" ] ]. 

as_sel_rule3 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~.[_-]as(-[^_]+)?_rel" ] !> ],
   FLAGS [ TRIGGER "as_prdp_p2" ] ]. 

as_sel_rule5 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED comp_equal_rel ] !> ],
   FLAGS [ TRIGGER "as_comp_prep" ] ]. 

as_sel_rule7 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED comp_equal_rel ] !> ],
   FLAGS [ TRIGGER "as_comp_prep_nc" ] ]. 

as_sel_rule8 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED comp_equal_rel ] !> ],
   FLAGS [ TRIGGER "as_comp_cp_gap" ] ]. 

as_sel_rule9 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED comp_equal_rel, ARG2 #i & basic_non_expl ],
                     [ PRED ellipsis_ref_rel ] !> ],
   FLAGS [ SUBSUME < #i >,
           TRIGGER "as_comp_prep_cp" ] ]. 

as_sel_rule12 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED comp_equal_rel ] !> ],
   FLAGS [ TRIGGER "as_comp_cp_ppgap" ] ]. 

as+to_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~.[_-]as+to(-[^_]+)?_rel" ] !> ],
   FLAGS.TRIGGER "as_to_prtcl" ]. 

aside_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~.[_-]aside(-[^_]+)?_rel" ] !> ],
   FLAGS.TRIGGER "aside_prtcl" ]. 

at_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~.[_-]at(-[^_]+)?_rel" ] !> ],
   FLAGS.TRIGGER "at_prtcl" ]. 

away_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~.[_-]away(-[^_]+)?_rel" ] !> ],
   FLAGS.TRIGGER "away_prtcl" ]. 

back_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~.[_-]back(-[^_]+)?_rel" ] !> ],
   FLAGS.TRIGGER "back_particle" ]. 

behind_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~.[_-]behind(-[^_]+)?_rel" ] !> ],
   FLAGS.TRIGGER "behind_prtcl" ]. 

between_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~.[_-]between(-[^_]+)?_rel" ] !> ],
   FLAGS.TRIGGER "between_prtcl" ]. 

by_pass_p_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~._v_",
                       ARG0 #e,
                       ARG1 #x & basic_non_expl-ind,
                       ARG2 #y & individual ] !> ],
   FLAGS [ SUBSUME < #x, #y >,
           TRIGGER "by_pass_p" ] ].  

by_pass_p_rule2 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~._v_",
                       ARG0 #e,
                       ARG1 #x & basic_non_expl-ind,
                       ARG3 #y & individual ] !> ],
   FLAGS [ SUBSUME < #x, #y >,
           TRIGGER "by_pass_p" ] ].  

by_pass_p_rule3 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~._v_",
                       ARG0 #e,
                       ARG1 #x & basic_non_expl-ind,
                       ARG2 #y & handle ] !> ],
   FLAGS [ EQUAL < #y >,
	   SUBSUME < #x >,
           TRIGGER "by_pass_p" ] ].  

by_pass_p_rule4 := generator_rule &
 [ CONTEXT [ RELS <! [ LBL #h,
                       PRED "~._v_",
                       ARG0 #e,
                       ARG1 #x & basic_non_expl-ind,
                       ARG2 #y & individual ],
                     [ PRED subord_rel,
                       ARG2 #h & handle ] !> ],
   FLAGS [ EQUAL < #h >,
           SUBSUME < #x, #y >,
           TRIGGER "by_pass_p" ] ].  

by_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~.[_-]by(-[^_]+)?_rel" ] !> ],
   FLAGS.TRIGGER "by_prtcl" ]. 

by_colon_sel_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "by_colon_prtcl" ]. 

down_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~.[_-]down(-[^_]+)?_rel" ] !> ],
   FLAGS.TRIGGER "down_prtcl" ]. 

even_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~.[_-]even(-[^_]+)?_rel" ] !> ],
   FLAGS.TRIGGER "even_prtcl" ]. 

for_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~.[_-]for(-[^_]+)?_rel" ] !> ],
   FLAGS.TRIGGER "for_prtcl" ]. 

for_sel_rule3 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "for_nbar_p" ]. 

for_colon_sel_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "for_colon_prtcl" ]. 

forth_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~.[_-]forth(-[^_]+)?_rel" ] !> ],
   FLAGS.TRIGGER "forth_prtcl" ]. 

forward_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~.[_-]forward(-[^_]+)?_rel" ] !> ],
   FLAGS.TRIGGER "forward_prtcl" ]. 

from_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~.[_-]from(-[^_]+)?_rel" ] !> ],
   FLAGS.TRIGGER "from_prtcl" ]. 

go_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~.[_-]go(-[^_]+)?_rel" ] !> ],
   FLAGS.TRIGGER "go_prtcl" ]. 

in_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~.[_-]in(-[^_]+)?_rel" ] !> ],
   FLAGS.TRIGGER "in_prtcl" ]. 

into_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~.[_-]into(-[^_]+)?_rel" ] !> ],
   FLAGS.TRIGGER "into_prtcl" ]. 

of_sel_rule1a := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~.[_-]of(-[^_]+)?_rel",
		       ARG0 #e1 & event ] !> ],
   FLAGS [ EQUAL < #e1 >,
	   TRIGGER "of_prtcl" ] ]. 

of_sel_rule1b := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~._n_of(-[^_]+)?_rel",
		       ARG1 #x1 & basic_non_expl-ind ] !> ],
   FLAGS [ SUBSUME < #x1 >,
	   TRIGGER "of_prtcl" ] ]. 

of_sel_rule1c := generator_rule &
 [ CONTEXT [ RELS <! [ PRED part_of_rel,
		       ARG1 #x1 & basic_non_expl-ind ] !> ],
   FLAGS [ SUBSUME < #x1 >,
	   TRIGGER "of_prtcl" ] ]. 

of_sel_rule2 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED day_rel ] !> ],
   FLAGS.TRIGGER "of_prtcl" ]. 

of_sel_rule3 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED mofy_rel ] !> ],
   FLAGS.TRIGGER "of_prtcl" ]. 

of_sel_rule4 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED place_n_rel ] !> ],
   FLAGS.TRIGGER "of_prtcl" ]. 

of_sel_rule5 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED day_part_rel ] !> ],
   FLAGS.TRIGGER "of_prtcl" ]. 

of_sel_rule6 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED def_day_part_rel ] !> ],
   FLAGS.TRIGGER "of_prtcl" ]. 

of_sel_rule7 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED nominalization_rel ] !> ],
   FLAGS.TRIGGER "of_prtcl" ]. 

of_sel_rule8 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED generic_entity_rel ] !> ],
   FLAGS.TRIGGER "of_prtcl" ]. 

of_sel_rule10 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~.[_-]of-n_rel" ] !> ],
   FLAGS.TRIGGER "of_nbar_p" ]. 

of_sel_rule11a := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~._of_rel",
		       ARG0 #e1 & event ] !> ],
   FLAGS [ EQUAL < #e1 >,
	   TRIGGER "of_nbar_p" ] ]. 

of_sel_rule11b := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~._n_of(-[^_]+)?_rel",
		       ARG1 #x1 & basic_non_expl-ind ] !> ],
   FLAGS [ SUBSUME < #x1 >,
	   TRIGGER "of_nbar_p" ] ]. 

of_sel_rule12 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~._ofj_rel" ] !> ],
   FLAGS [ TRIGGER "of_comp_prep" ] ]. 

off_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~.[_-]off(-[^_]+)?_rel" ] !> ],
   FLAGS.TRIGGER "off_prtcl" ]. 

on_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~.[_-]on(-[^_]+)?_rel" ] !> ],
   FLAGS.TRIGGER "on_prtcl" ]. 

onto_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~.[_-]onto(-[^_]+)?_rel" ] !> ],
   FLAGS.TRIGGER "onto_prtcl" ]. 

onward_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~.[_-]onward(-[^_]+)?_rel" ] !> ],
   FLAGS.TRIGGER "onward_prtcl" ]. 

onwards_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~.[_-]onwards(-[^_]+)?_rel" ] !> ],
   FLAGS.TRIGGER "onwards_prtcl" ]. 

open_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~.[_-]open(-[^_]+)?_rel" ] !> ],
   FLAGS.TRIGGER "open_prtcl" ]. 

out+of_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~.[_-]out+of_rel" ] !> ],
   FLAGS.TRIGGER "out_of_prtcl" ]. 

out_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~.[_-]out(-[^_]+)?_rel" ] !> ],
   FLAGS.TRIGGER "out_particle" ]. 

over_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~.[_-]over(-[^_]+)?_rel" ] !> ],
   FLAGS.TRIGGER "over_prtcl" ]. 

past_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~.[_-]past(-[^_]+)?_rel" ] !> ],
   FLAGS.TRIGGER "past_prtcl" ]. 

round_br_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~.[_-]around(-[^_]+)?_rel" ] !> ],
   FLAGS.TRIGGER "round_prtcl_br" ]. 

short_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~.[_-]short(-[^_]+)?_rel" ] !> ],
   FLAGS.TRIGGER "short_prtcl" ]. 

so_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~.[_-]so(-[^_]+)?_rel" ] !> ],
   FLAGS.TRIGGER "so_prtcl" ]. 

still_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~.[_-]still(-[^_]+)?_rel" ] !> ],
   FLAGS.TRIGGER "still_prtcl" ]. 

home_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~.[_-]home(-[^_]+)?_rel" ] !> ],
   FLAGS.TRIGGER "home_prtcl" ]. 

thin_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~.[_-]thin(-[^_]+)?_rel" ] !> ],
   FLAGS.TRIGGER "thin_prtcl" ]. 

than_compar_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED comp_rel, ARG2 #i & basic_non_expl ] !> ],
   FLAGS [ SUBSUME < #i >,
           TRIGGER "than_p1" ] ]. 

than_compar_rule2 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED comp_rel, ARG2 #i & basic_non_expl ] !> ],
   FLAGS [ SUBSUME < #i >,
           TRIGGER "than_p1_nc" ] ]. 

than_compar_rule3 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED comp_less_rel, ARG2 #i & basic_non_expl ] !> ],
   FLAGS [ SUBSUME < #i >,
           TRIGGER "than_p1" ] ]. 

than_compar_rule4 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED comp_less_rel, ARG2 #i & basic_non_expl ] !> ],
   FLAGS [ SUBSUME < #i >,
           TRIGGER "than_p1_nc" ] ]. 

than_compar_rule5 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED comp_rel, ARG2 #i & basic_non_expl ],
                     [ PRED ellipsis_ref_rel ] !> ],
   FLAGS [ SUBSUME < #i >,
           TRIGGER "than_p3" ] ]. 

than_compar_rule6 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED comp_less_rel, ARG2 #i & basic_non_expl ],
                     [ PRED ellipsis_ref_rel ] !> ],
   FLAGS [ SUBSUME < #i >,
           TRIGGER "than_p3" ] ]. 

than_compar_rule7 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED comp_rel, ARG2 #i & basic_non_expl ],
                     [ PRED non_ellipt_rel ] !> ],
   FLAGS [ SUBSUME < #i >,
           TRIGGER "than_p4" ] ]. 

than_compar_rule8 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED comp_rel, ARG2 #i & basic_non_expl ],
                     [ PRED non_ellipt_rel ] !> ],
   FLAGS [ SUBSUME < #i >,
           TRIGGER "than_p5" ] ]. 

through_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~.[_-]through(-[^_]+)?_rel" ] !> ],
   FLAGS.TRIGGER "through_prtcl" ]. 

than_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~._than(-[^_]+)?_rel" ] !> ],
   FLAGS.TRIGGER "than_p1" ]. 

than_sel_rule2 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~._than(-[^_]+)?_rel" ] !> ],
   FLAGS.TRIGGER "than_p1_nc" ]. 

till_prtcl_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "till_p1" ].

till_prtcl_rule2 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "till_p2" ].

to_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~.[_-]to(-[^_]+)?_rel" ] !> ],
   FLAGS.TRIGGER "to_prtcl" ]. 

to_sel_rule2 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~._v_",
                       ARG0 event & #e,
                       ARG2 basic_non_expl-ind & #x1,
                       ARG3 basic_non_expl-ind & #x2] !> ],
   FLAGS [ EQUAL < #e >,
	   SUBSUME < #x1, #x2 >,
           TRIGGER "to_prtcl" ] ]. 

together_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~.[_-]together(-[^_]+)?_rel" ] !> ],
   FLAGS.TRIGGER "together_prtcl" ]. 

toward_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~.[_-]toward(-[^_]+)?_rel" ] !> ],
   FLAGS.TRIGGER "toward_prtcl" ]. 

towards_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~.[_-]towards(-[^_]+)?_rel" ] !> ],
   FLAGS.TRIGGER "towards_prtcl" ]. 

under_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~.[_-]under(-[^_]+)?_rel" ] !> ],
   FLAGS.TRIGGER "under_prtcl" ]. 

until_prtcl_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "until_prtcl" ].

up_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~.[_-]up(-[^_]+)?_rel" ] !> ],
   FLAGS.TRIGGER "up_prtcl" ]. 

upon_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~.[_-]upon(-[^_]+)?_rel" ] !> ],
   FLAGS.TRIGGER "upon_prtcl" ]. 

upside_down_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~.[_-]upside+down(-[^_]+)?_rel" ] !> ],
   FLAGS.TRIGGER "upside_down_prtcl" ]. 

upside_down_sel_rule2 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~.[_-]upside+down(-[^_]+)?_rel" ] !> ],
   FLAGS.TRIGGER "upside_down_prtcl_2" ]. 

with_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~.[_-]with(-[^_]+)?_rel" ] !> ],
   FLAGS.TRIGGER "with_prtcl" ]. 

without_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~.[_-]without(-[^_]+)?_rel" ] !> ],
   FLAGS.TRIGGER "without_prtcl" ]. 

yet_sel_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED "~.[_-]yet(-[^_]+)?_rel" ] !> ],
   FLAGS.TRIGGER "yet_prtcl" ]. 

;;; Begin expletive copula (weather) section

expletive_is_snowy_a_expl_rel := expletive_is_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_snowy_a_1_rel" ].

expletive_is_so_a_expl_rel := expletive_is_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_so_a_true_rel" ].

expletive_is_a+long+way_a_expl_rel := expletive_is_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_a+long+way_a_1_rel" ].

expletive_is_breezy_a_expl_rel := expletive_is_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_breezy_a_1_rel" ].

expletive_is_blustery_a_expl_rel := expletive_is_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_blustery_a_1_rel" ].

expletive_is_chilly_a_expl_rel := expletive_is_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_chilly_a_1_rel" ].

expletive_is_cloudy_a_expl_rel := expletive_is_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_cloudy_a_1_rel" ].

expletive_is_cold_a_expl_rel := expletive_is_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_cold_a_1_rel" ].

expletive_is_cool_a_expl_rel := expletive_is_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_cool_a_1_rel" ].

expletive_is_damp_a_expl_rel := expletive_is_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_damp_a_1_rel" ].

expletive_is_dry_a_expl_rel := expletive_is_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_dry_a_1_rel" ].

expletive_is_foggy_a_expl_rel := expletive_is_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_foggy_a_1_rel" ].

expletive_is_frigid_a_expl_rel := expletive_is_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_frigid_a_1_rel" ].

expletive_is_gusty_a_expl_rel := expletive_is_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_gusty_a_1_rel" ].

expletive_is_hot_a_expl_rel := expletive_is_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_hot_a_1_rel" ].

expletive_is_mild_a_expl_rel := expletive_is_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_mild_a_1_rel" ].

expletive_is_rainy_a_expl_rel := expletive_is_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_rainy_a_1_rel" ].

expletive_is_sunny_a_expl_rel := expletive_is_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_sunny_a_1_rel" ].

expletive_is_time_a_expl_rel := expletive_is_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_time_a_expl-for_rel" ].

expletive_is_warm_a_expl_rel := expletive_is_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_warm_a_1_rel" ].

expletive_is_wet_a_expl_rel := expletive_is_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_wet_a_1_rel" ].

expletive_is_windy_a_expl_rel := expletive_is_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_windy_a_1_rel" ].

expletive_was_snowy_a_expl_rel := expletive_was_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_snowy_a_1_rel" ].

expletive_was_so_a_expl_rel := expletive_was_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_so_a_true_rel" ].

expletive_was_a+long+way_a_expl_rel := expletive_was_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_a+long+way_a_1_rel" ].

expletive_was_breezy_a_expl_rel := expletive_was_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_breezy_a_1_rel" ].

expletive_was_blustery_a_expl_rel := expletive_was_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_blustery_a_1_rel" ].

expletive_was_chilly_a_expl_rel := expletive_was_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_chilly_a_1_rel" ].

expletive_was_cloudy_a_expl_rel := expletive_was_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_cloudy_a_1_rel" ].

expletive_was_cold_a_expl_rel := expletive_was_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_cold_a_1_rel" ].

expletive_was_cool_a_expl_rel := expletive_was_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_cool_a_1_rel" ].

expletive_was_damp_a_expl_rel := expletive_was_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_damp_a_1_rel" ].

expletive_was_dry_a_expl_rel := expletive_was_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_dry_a_1_rel" ].

expletive_was_foggy_a_expl_rel := expletive_was_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_foggy_a_1_rel" ].

expletive_was_frigid_a_expl_rel := expletive_was_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_frigid_a_1_rel" ].

expletive_was_gusty_a_expl_rel := expletive_was_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_gusty_a_1_rel" ].

expletive_was_hot_a_expl_rel := expletive_was_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_hot_a_1_rel" ].

expletive_was_mild_a_expl_rel := expletive_was_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_mild_a_1_rel" ].

expletive_was_rainy_a_expl_rel := expletive_was_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_rainy_a_1_rel" ].

expletive_was_sunny_a_expl_rel := expletive_was_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_sunny_a_1_rel" ].

expletive_was_time_a_expl_rel := expletive_was_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_time_a_expl-for_rel" ].

expletive_was_warm_a_expl_rel := expletive_was_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_warm_a_1_rel" ].

expletive_was_wet_a_expl_rel := expletive_was_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_wet_a_1_rel" ].

expletive_was_windy_a_expl_rel := expletive_was_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_windy_a_1_rel" ].

expletive_be_snowy_a_expl_rel1 := expletive_be_adj_expl_gtr1 &
[ CONTEXT.RELS.LIST.FIRST.PRED "_snowy_a_1_rel" ].

expletive_be_so_a_expl_rel1 := expletive_be_adj_expl_gtr1 &
[ CONTEXT.RELS.LIST.FIRST.PRED "_so_a_true_rel" ].

expletive_be_a+long+way_a_expl_rel := expletive_be_adj_expl_gtr1 &
[ CONTEXT.RELS.LIST.FIRST.PRED "_a+long+way_a_1_rel" ].

expletive_be_breezy_a_expl_rel1 := expletive_be_adj_expl_gtr1 &
[ CONTEXT.RELS.LIST.FIRST.PRED "_breezy_a_1_rel" ].

expletive_be_blustery_a_expl_rel1 := expletive_be_adj_expl_gtr1 &
[ CONTEXT.RELS.LIST.FIRST.PRED "_blustery_a_1_rel" ].

expletive_be_chilly_a_expl_rel1 := expletive_be_adj_expl_gtr1 &
[ CONTEXT.RELS.LIST.FIRST.PRED "_chilly_a_1_rel" ].

expletive_be_cloudy_a_expl_rel1 := expletive_be_adj_expl_gtr1 &
[ CONTEXT.RELS.LIST.FIRST.PRED "_cloudy_a_1_rel" ].

expletive_be_cold_a_expl_rel1 := expletive_be_adj_expl_gtr1 &
[ CONTEXT.RELS.LIST.FIRST.PRED "_cold_a_1_rel" ].

expletive_be_cool_a_expl_rel1 := expletive_be_adj_expl_gtr1 &
[ CONTEXT.RELS.LIST.FIRST.PRED "_cool_a_1_rel" ].

expletive_be_damp_a_expl_rel1 := expletive_be_adj_expl_gtr1 &
[ CONTEXT.RELS.LIST.FIRST.PRED "_damp_a_1_rel" ].

expletive_be_dry_a_expl_rel1 := expletive_be_adj_expl_gtr1 &
[ CONTEXT.RELS.LIST.FIRST.PRED "_dry_a_1_rel" ].

expletive_be_foggy_a_expl_rel1 := expletive_be_adj_expl_gtr1 &
[ CONTEXT.RELS.LIST.FIRST.PRED "_foggy_a_1_rel" ].

expletive_be_frigid_a_expl_rel1 := expletive_be_adj_expl_gtr1 &
[ CONTEXT.RELS.LIST.FIRST.PRED "_frigid_a_1_rel" ].

expletive_be_gusty_a_expl_rel1 := expletive_be_adj_expl_gtr1 &
[ CONTEXT.RELS.LIST.FIRST.PRED "_gusty_a_1_rel" ].

expletive_be_hot_a_expl_rel1 := expletive_be_adj_expl_gtr1 &
[ CONTEXT.RELS.LIST.FIRST.PRED "_hot_a_1_rel" ].

expletive_be_mild_a_expl_rel1 := expletive_be_adj_expl_gtr1 &
[ CONTEXT.RELS.LIST.FIRST.PRED "_mild_a_1_rel" ].

expletive_be_rainy_a_expl_rel1 := expletive_be_adj_expl_gtr1 &
[ CONTEXT.RELS.LIST.FIRST.PRED "_rainy_a_1_rel" ].

expletive_be_sunny_a_expl_rel1 := expletive_be_adj_expl_gtr1 &
[ CONTEXT.RELS.LIST.FIRST.PRED "_sunny_a_1_rel" ].

expletive_be_time_a_expl_rel1 := expletive_be_adj_expl_gtr1 &
[ CONTEXT.RELS.LIST.FIRST.PRED "_time_a_expl-for_rel" ].

expletive_be_warm_a_expl_rel1 := expletive_be_adj_expl_gtr1 &
[ CONTEXT.RELS.LIST.FIRST.PRED "_warm_a_1_rel" ].

expletive_be_wet_a_expl_rel1 := expletive_be_adj_expl_gtr1 &
[ CONTEXT.RELS.LIST.FIRST.PRED "_wet_a_1_rel" ].

expletive_be_windy_a_expl_rel1 := expletive_be_adj_expl_gtr1 &
[ CONTEXT.RELS.LIST.FIRST.PRED "_windy_a_1_rel" ].

expletive_be_snowy_a_expl_rel2 := expletive_be_adj_expl_gtr2 &
[ CONTEXT.RELS.LIST.FIRST.PRED "_snowy_a_1_rel" ].

expletive_be_a+long+way_a_expl_rel2 := expletive_be_adj_expl_gtr2 &
[ CONTEXT.RELS.LIST.FIRST.PRED "_a+long+way_a_1_rel" ].

expletive_be_breezy_a_expl_rel2 := expletive_be_adj_expl_gtr2 &
[ CONTEXT.RELS.LIST.FIRST.PRED "_breezy_a_1_rel" ].

expletive_be_blustery_a_expl_rel2 := expletive_be_adj_expl_gtr2 &
[ CONTEXT.RELS.LIST.FIRST.PRED "_blustery_a_1_rel" ].

expletive_be_chilly_a_expl_rel2 := expletive_be_adj_expl_gtr2 &
[ CONTEXT.RELS.LIST.FIRST.PRED "_chilly_a_1_rel" ].

expletive_be_cloudy_a_expl_rel2 := expletive_be_adj_expl_gtr2 &
[ CONTEXT.RELS.LIST.FIRST.PRED "_cloudy_a_1_rel" ].

expletive_be_cold_a_expl_rel2 := expletive_be_adj_expl_gtr2 &
[ CONTEXT.RELS.LIST.FIRST.PRED "_cold_a_1_rel" ].

expletive_be_cool_a_expl_rel2 := expletive_be_adj_expl_gtr2 &
[ CONTEXT.RELS.LIST.FIRST.PRED "_cool_a_1_rel" ].

expletive_be_damp_a_expl_rel2 := expletive_be_adj_expl_gtr2 &
[ CONTEXT.RELS.LIST.FIRST.PRED "_damp_a_1_rel" ].

expletive_be_dry_a_expl_rel2 := expletive_be_adj_expl_gtr2 &
[ CONTEXT.RELS.LIST.FIRST.PRED "_dry_a_1_rel" ].

expletive_be_foggy_a_expl_rel2 := expletive_be_adj_expl_gtr2 &
[ CONTEXT.RELS.LIST.FIRST.PRED "_foggy_a_1_rel" ].

expletive_be_frigid_a_expl_rel2 := expletive_be_adj_expl_gtr2 &
[ CONTEXT.RELS.LIST.FIRST.PRED "_frigid_a_1_rel" ].

expletive_be_gusty_a_expl_rel2 := expletive_be_adj_expl_gtr2 &
[ CONTEXT.RELS.LIST.FIRST.PRED "_gusty_a_1_rel" ].

expletive_be_hot_a_expl_rel2 := expletive_be_adj_expl_gtr2 &
[ CONTEXT.RELS.LIST.FIRST.PRED "_hot_a_1_rel" ].

expletive_be_mild_a_expl_rel2 := expletive_be_adj_expl_gtr2 &
[ CONTEXT.RELS.LIST.FIRST.PRED "_mild_a_1_rel" ].

expletive_be_rainy_a_expl_rel2 := expletive_be_adj_expl_gtr2 &
[ CONTEXT.RELS.LIST.FIRST.PRED "_rainy_a_1_rel" ].

expletive_be_so_a_expl_rel2 := expletive_be_adj_expl_gtr2 &
[ CONTEXT.RELS.LIST.FIRST.PRED "_so_a_true_rel" ].

expletive_be_sunny_a_expl_rel2 := expletive_be_adj_expl_gtr2 &
[ CONTEXT.RELS.LIST.FIRST.PRED "_sunny_a_1_rel" ].

expletive_be_time_a_expl_rel2 := expletive_be_adj_expl_gtr2 &
[ CONTEXT.RELS.LIST.FIRST.PRED "_time_a_expl-for_rel" ].

expletive_be_warm_a_expl_rel2 := expletive_be_adj_expl_gtr2 &
[ CONTEXT.RELS.LIST.FIRST.PRED "_warm_a_1_rel" ].

expletive_be_wet_a_expl_rel2 := expletive_be_adj_expl_gtr2 &
[ CONTEXT.RELS.LIST.FIRST.PRED "_wet_a_1_rel" ].

expletive_be_windy_a_expl_rel2 := expletive_be_adj_expl_gtr2 &
[ CONTEXT.RELS.LIST.FIRST.PRED "_windy_a_1_rel" ].

expletive_been_snowy_a_expl_rel := expletive_been_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_snowy_a_1_rel" ].

expletive_been_so_true_a_expl_rel := expletive_been_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_so_a_true_rel" ].

expletive_been_a+long+way_a_expl_rel := expletive_been_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_a+long+way_a_1_rel" ].

expletive_been_breezy_a_expl_rel := expletive_been_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_breezy_a_1_rel" ].

expletive_been_blustery_a_expl_rel := expletive_been_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_blustery_a_1_rel" ].

expletive_been_chilly_a_expl_rel := expletive_been_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_chilly_a_1_rel" ].

expletive_been_cloudy_a_expl_rel := expletive_been_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_cloudy_a_1_rel" ].

expletive_been_cold_a_expl_rel := expletive_been_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_cold_a_1_rel" ].

expletive_been_cool_a_expl_rel := expletive_been_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_cool_a_1_rel" ].

expletive_been_damp_a_expl_rel := expletive_been_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_damp_a_1_rel" ].

expletive_been_dry_a_expl_rel := expletive_been_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_dry_a_1_rel" ].

expletive_been_foggy_a_expl_rel := expletive_been_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_foggy_a_1_rel" ].

expletive_been_frigid_a_expl_rel := expletive_been_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_frigid_a_1_rel" ].

expletive_been_gusty_a_expl_rel := expletive_been_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_gusty_a_1_rel" ].

expletive_been_hot_a_expl_rel := expletive_been_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_hot_a_1_rel" ].

expletive_been_mild_a_expl_rel := expletive_been_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_mild_a_1_rel" ].

expletive_been_rainy_a_expl_rel := expletive_been_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_rainy_a_1_rel" ].

expletive_been_sunny_a_expl_rel := expletive_been_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_sunny_a_1_rel" ].

expletive_been_time_a_expl_rel := expletive_been_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_time_a_expl-for_rel" ].

expletive_been_warm_a_expl_rel := expletive_been_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_warm_a_1_rel" ].

expletive_been_wet_a_expl_rel := expletive_been_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_wet_a_1_rel" ].

expletive_been_windy_a_expl_rel := expletive_been_adj_expl_gtr &
[ CONTEXT.RELS.LIST.FIRST.PRED "_windy_a_1_rel" ].

be_c_is_itx_rain_rule1 := arg0e_gtr &
 [ CONTEXT [ RELS <! [ PRED "_rain_v_1_rel",
                       ARG0 [ E [ MOOD indicative,
                                  TENSE present ] ] ] !> ],
   FLAGS.TRIGGER "be_c_is" ].

be_c_was_itx_rain_rule1 := arg0e_gtr &
 [ CONTEXT [ RELS <! [ PRED "_rain_v_1_rel",
                       ARG0 [ E [ MOOD indicative,
                                  TENSE past ] ] ] !> ],
   FLAGS.TRIGGER "be_c_was" ].

be_c_been_itx_rain_rule1 := arg0e_gtr &
 [ CONTEXT [ RELS <! [ PRED "_rain_v_1_rel",
                       ARG0 [ E.ASPECT.PRF + ] ] !> ],
   FLAGS.TRIGGER "be_c_been" ].

be_c_be_itx_rain_rule1 := arg0e_gtr &
 [ CONTEXT [ RELS <! [ PRED "_rain_v_1_rel",
                       ARG0 [ E.TENSE untensed ] ] !> ],
   FLAGS.TRIGGER "be_c_be" ].

be_c_is_itx_drizzle_rule1 := arg0e_gtr &
 [ CONTEXT [ RELS <! [ PRED "_drizzle_v_1_rel",
                       ARG0 [ E [ MOOD indicative,
                                  TENSE present ] ] ] !> ],
   FLAGS.TRIGGER "be_c_is" ].

be_c_was_itx_drizzle_rule1 := arg0e_gtr &
 [ CONTEXT [ RELS <! [ PRED "_drizzle_v_1_rel",
                       ARG0 [ E [ MOOD indicative,
                                  TENSE past ] ] ] !> ],
   FLAGS.TRIGGER "be_c_was" ].

be_c_been_itx_drizzle_rule1 := arg0e_gtr &
 [ CONTEXT [ RELS <! [ PRED "_drizzle_v_1_rel",
                       ARG0 [ E.ASPECT.PRF + ] ] !> ],
   FLAGS.TRIGGER "be_c_been" ].

be_c_be_itx_drizzle_rule1 := arg0e_gtr &
 [ CONTEXT [ RELS <! [ PRED "_drizzle_v_1_rel",
                       ARG0 [ E.TENSE untensed ] ] !> ],
   FLAGS.TRIGGER "be_c_be" ].

be_c_is_itx_hail_rule1 := arg0e_gtr &
 [ CONTEXT [ RELS <! [ PRED "_hail_v_1_rel",
                       ARG0 [ E [ MOOD indicative,
                                  TENSE present ] ] ] !> ],
   FLAGS.TRIGGER "be_c_is" ].

be_c_was_itx_hail_rule1 := arg0e_gtr &
 [ CONTEXT [ RELS <! [ PRED "_hail_v_1_rel",
                       ARG0 [ E [ MOOD indicative,
                                  TENSE past ] ] ] !> ],
   FLAGS.TRIGGER "be_c_was" ].

be_c_been_itx_hail_rule1 := arg0e_gtr &
 [ CONTEXT [ RELS <! [ PRED "_hail_v_1_rel",
                       ARG0 [ E.ASPECT.PRF + ] ] !> ],
   FLAGS.TRIGGER "be_c_been" ].

be_c_be_itx_hail_rule1 := arg0e_gtr &
 [ CONTEXT [ RELS <! [ PRED "_hail_v_1_rel",
                       ARG0 [ E.TENSE untensed ] ] !> ],
   FLAGS.TRIGGER "be_c_be" ].

be_c_is_itx_snow_rule1 := arg0e_gtr &
 [ CONTEXT [ RELS <! [ PRED "_snow_v_1_rel",
                       ARG0 [ E [ MOOD indicative,
                                  TENSE present ] ] ] !> ],
   FLAGS.TRIGGER "be_c_is" ].

be_c_was_itx_snow_rule1 := arg0e_gtr &
 [ CONTEXT [ RELS <! [ PRED "_snow_v_1_rel",
                       ARG0 [ E [ MOOD indicative,
                                  TENSE past ] ] ] !> ],
   FLAGS.TRIGGER "be_c_was" ].

be_c_been_itx_snow_rule1 := arg0e_gtr &
 [ CONTEXT [ RELS <! [ PRED "_snow_v_1_rel",
                       ARG0 [ E.ASPECT.PRF + ] ] !> ],
   FLAGS.TRIGGER "be_c_been" ].

be_c_be_itx_snow_rule1 := arg0e_gtr &
 [ CONTEXT [ RELS <! [ PRED "_snow_v_1_rel",
                       ARG0 [ E.TENSE untensed ] ] !> ],
   FLAGS.TRIGGER "be_c_be" ].

be_c_is_itx_sprinkle_rule1 := arg0e_gtr &
 [ CONTEXT [ RELS <! [ PRED "_sprinkle_v_1_rel",
                       ARG0 [ E [ MOOD indicative,
                                  TENSE present ] ] ] !> ],
   FLAGS.TRIGGER "be_c_is" ].

be_c_was_itx_sprinkle_rule1 := arg0e_gtr &
 [ CONTEXT [ RELS <! [ PRED "_sprinkle_v_1_rel",
                       ARG0 [ E [ MOOD indicative,
                                  TENSE past ] ] ] !> ],
   FLAGS.TRIGGER "be_c_was" ].

be_c_been_itx_sprinkle_rule1 := arg0e_gtr &
 [ CONTEXT [ RELS <! [ PRED "_sprinkle_v_1_rel",
                       ARG0 [ E.ASPECT.PRF + ] ] !> ],
   FLAGS.TRIGGER "be_c_been" ].

be_c_be_itx_sprinkle_rule1 := arg0e_gtr &
 [ CONTEXT [ RELS <! [ PRED "_sprinkle_v_1_rel",
                       ARG0 [ E.TENSE untensed ] ] !> ],
   FLAGS.TRIGGER "be_c_be" ].

;;; End expletive copula (weather) section

;; Hack for the unusual "the+case that" adjective (used in OpenProof generation"
;; which makes its own ARG0 be untensed, instead making its comp's ARG0 be the 
;; HOOK.INDEX value.
;;

be_c_is_the_case_rule1a := be_cop_promote_ind_gtr &
 [ CONTEXT.RELS <! [ PRED "_the+case_a_1_rel" ] !>,
   FLAGS.TRIGGER "be_c_is" ].

be_c_is_the_case_rule1b := be_cop_promote_ind_gtr &
 [ CONTEXT.RELS <! [ PRED "_the+case_a_2_rel" ] !>,
   FLAGS.TRIGGER "be_c_is" ].

be_c_is_cx_the_case_rule1a := be_cop_promote_ind_gtr &
 [ CONTEXT.RELS <! [ PRED "_the+case_a_1_rel" ] !>,
   FLAGS.TRIGGER "be_c_is_cx_2" ].

be_c_is_cx_the_case_rule1b := be_cop_promote_ind_gtr &
 [ CONTEXT.RELS <! [ PRED "_the+case_a_2_rel" ] !>,
   FLAGS.TRIGGER "be_c_is_cx_2" ].

;; For now, exclude be_it_cop entries as in |It was Kim who arrived.| which
;; now has the same RELS list as |Kim arrived.|, but now a non-empty ICONS.

be_it_cop_is_cx_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "be_it_cop_is_cx" ].

be_it_cop_is_cx_2_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "be_it_cop_is_cx_2" ].

be_it_cop_is_cx_3_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "be_it_cop_is_cx_3" ].

be_it_cop_is_cx_lq_2_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "be_it_cop_is_cx_lq_2" ].


of_of_prtcl_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   FLAGS.TRIGGER "of_of_prtcl" ].

;; Openproof-specific trigger rules

that_compl_not_case_rule1 := arg0e_gtr &
 [ CONTEXT.RELS <! [ PRED neg_rel ] !>,
   FLAGS.TRIGGER "that_c" ].

that_compl_conj_not_case_rule1 := arg0e_gtr &
 [ CONTEXT.RELS <! [ PRED neg_rel ] !>,
   FLAGS.TRIGGER "that_c_conj" ].

both_conj_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED _and_c_pr_rel ] !> ],
   FLAGS.TRIGGER "both_conj" ]. 

both_cp_conj_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED _and_c_pr_rel ] !> ],
   FLAGS.TRIGGER "both_cp_conj" ]. 

either_conj_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED _or_c_pr_rel ] !> ],
   FLAGS.TRIGGER "either_conj" ].

neither_conj_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED _nor_c_rel,
                       L-INDEX event ] !> ],
   FLAGS.TRIGGER "neither_conj" ].

neither_conj_x_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED _nor_c_rel,
                       L-INDEX ref-ind ] !> ],
   FLAGS.TRIGGER "neither_conj_x" ].

thecase_v1_rule := generator_rule &
 [ CONTEXT.RELS <! [ PRED _and_c_rel, ARG0 #arg & event ], 
		   [ PRED conj_rel, R-INDEX #arg ] !>,
   FLAGS.TRIGGER "the_case_v1" ]. 

thecase_v2_rule := generator_rule &
 [ CONTEXT.RELS <! [ PRED _and_c_rel, ARG0 #arg & event ], 
		   [ PRED conj_rel, R-INDEX #arg ] !>,
   FLAGS.TRIGGER "the_case_v2" ]. 

that_thecase_rule := generator_rule &
 [ CONTEXT.RELS <! [ PRED _and_c_rel, ARG0 #arg & event ], 
		   [ PRED conj_rel, R-INDEX #arg ] !>,
   FLAGS.TRIGGER "that_c" ]. 

that_conj_thecase_rule := generator_rule &
 [ CONTEXT.RELS <! [ PRED _and_c_rel, ARG0 #arg & event ], 
		   [ PRED conj_rel, R-INDEX #arg ] !>,
   FLAGS.TRIGGER "that_c_conj" ]. 
