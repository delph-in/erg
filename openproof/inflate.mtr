;;; -*- Mode: tdl; Coding: utf-8; -*-

add_properq_mtr := add_quant_mtr &
[ CONTEXT.RELS <! [ PRED named_rel ] !>,
  OUTPUT.RELS <! [ PRED proper_q_rel ] !> ].


;; "cube(x)"
;;
cube_op_gpr := openproof_mtr &
[ INPUT.RELS <! [ PRED "cube", LBL #h2, ARG0 #e3, ARG1 ref-ind & #x4 ] !>, 
  OUTPUT [ HOOK.INDEX #e3,
	   RELS <! [ LBL #h2, PRED _be_v_id_rel, ARG0 #e3, ARG1 #x4, ARG2 #x5 ],
		   [ LBL #h1, PRED "_cube_n_1_rel", ARG0 ref-ind & #x5 ] !> ] ].

;; "smaller(x,y)"
;;
smaller_op_gpr := openproof_mtr &
[ INPUT.RELS <! [ PRED "smaller", LBL #h1, ARG0 #e3, ARG1 ref-ind & #x4, 
		  ARG2 ref-ind & #x5 ] !>, 
  OUTPUT [ HOOK.INDEX #e3,
	   RELS <! [ PRED "_small_a_1_rel", LBL #h1, ARG0 #e3, ARG1 #x4 ],
		   [ PRED comp_rel, LBL #h1, ARG0 event, ARG1 #e3, ARG2 #x5 ] !> ],
  FLAGS.EQUAL < #h1 > ].

;; "larger(x,y)"
;;
larger_op_gpr := openproof_mtr &
[ INPUT.RELS <! [ PRED "larger", LBL #h1, ARG0 #e3, ARG1 ref-ind & #x4, 
		  ARG2 ref-ind & #x5 ] !>, 
  OUTPUT [ HOOK.INDEX #e3,
	   RELS <! [ PRED "_large_a_1_rel", LBL #h1, ARG0 #e3, ARG1 #x4 ],
		   [ PRED comp_rel, LBL #h1, ARG1 #e3, ARG2 #x5 ] !> ] ].

;; "between(x,y,z)"
;;
between_op_gpr := openproof_mtr &
[ INPUT.RELS <! [ PRED "between", LBL #h1, ARG0 #e3, ARG1 ref-ind & #x4, 
		  ARG2 ref-ind & #x5, ARG3 ref-ind & #x6  ] !>, 
  OUTPUT [ HOOK.INDEX #e3,
	   RELS <! [ PRED _and_c_rel, LBL handle, ARG0 ref-ind & #x7, 
		     L-INDEX #x5, R-INDEX #x6 ],
		   [ PRED _between_p_rel, LBL #h1, ARG0 #e3, 
		     ARG1 #x4, ARG2 #x7 ] !> ] ].

;;  FLAGS.EQUAL < #e3, #x4, #x5, #x6, #x7 > ].

;; "backof(x,y)"
;;
backof_op_gpr := openproof_mtr &
[ INPUT.RELS <! [ PRED "backof", LBL #h1, ARG0 #e3, ARG1 ref-ind & #x4, 
		  ARG2 ref-ind & #x5 ] !>, 
  OUTPUT [ HOOK.INDEX #e3,
	   RELS <! [ PRED _in+back+of_p_rel, LBL #h1, ARG0 #e3, ARG1 #x4, 
		     ARG2 #x5 ] !> ],
  FLAGS.EQUAL < #x4, #x5 > ].

;; "frontof(x,y)"
;;
frontof_op_gpr := openproof_mtr &
[ INPUT.RELS <! [ PRED "frontof", LBL #h1, ARG0 #e3, ARG1 ref-ind & #x4, 
		  ARG2 ref-ind & #x5 ] !>, 
  OUTPUT [ HOOK.INDEX #e3,
	   RELS <! [ PRED _in+front+of_p_rel, LBL #h1, ARG0 #e3, ARG1 #x4, 
		     ARG2 #x5 ] !> ],
  FLAGS.EQUAL < #x4, #x5 > ].

;; "large(x)"
;;
large_op_gpr := openproof_mtr &
[ INPUT.RELS <! [ PRED "large", LBL #h2, ARG0 #e3, ARG1 ref-ind & #x4 ] !>, 
  OUTPUT [ HOOK.INDEX #e3,
	   RELS <! [ PRED "_large_a_1_rel", LBL #h2, ARG0 #e3, ARG1 #x4 ] !> ],
  FLAGS.EQUAL < #x4 > ].

;; "small(x)"
;;
small_op_gpr := openproof_mtr &
[ INPUT.RELS <! [ PRED "small", LBL #h2, ARG0 #e3, ARG1 ref-ind & #x4 ] !>, 
  OUTPUT [ HOOK.INDEX #e3,
	   RELS <! [ PRED "_small_a_1_rel", LBL #h2, ARG0 #e3, ARG1 #x4 ] !> ],
  FLAGS.EQUAL < #x4 > ].


;; "rightof(x,y)"
;;
rightof_op_gpr := openproof_addquant_mtr &
[ INPUT.RELS <! [ PRED "rightof", LBL #h1, ARG0 #e3, ARG1 ref-ind & #x4, 
		  ARG2 ref-ind & #x5 ] !>, 
  OUTPUT [ HOOK.INDEX #e3,
	   RELS <! [ PRED "_right_n_1_rel", LBL #h2 & handle, ARG0 #x6 ],
		   [ PRED _the_q_rel, LBL handle, ARG0 #x6 & ref-ind ],
		   [ PRED _to_p_rel, LBL #h1, ARG0 #e3, ARG1 #x4, ARG2 #x6 ],
		   [ PRED _of_p_rel, LBL #h2, ARG0 event, 
		     ARG1 #x6, ARG2 ref-ind & #x5 ] !> ],
  FLAGS.EQUAL < #x4, #x5 > ].

;; "leftof(x,y)"
;;
leftof_op_gpr := openproof_addquant_mtr &
[ INPUT.RELS <! [ PRED "leftof", LBL #h1, ARG0 #e3, ARG1 ref-ind & #x4, 
		  ARG2 ref-ind & #x5 ] !>, 
  OUTPUT [ HOOK.INDEX #e3,
	   RELS <! [ PRED "_left_n_1_rel", LBL #h2 & handle, ARG0 #x6 ],
		   [ PRED _the_q_rel, LBL handle, ARG0 #x6 & ref-ind ],
		   [ PRED _to_p_rel, LBL #h1, ARG0 #e3, ARG1 #x4, ARG2 #x6 ],
		   [ PRED _of_p_rel, LBL #h2, ARG0 event, 
		     ARG1 #x6, ARG2 ref-ind & #x5 ] !> ],
  FLAGS.EQUAL < #x4, #x5 > ].

;; "samerow(x,y)"
;;
samerow_op_gpr := openproof_mtr &
[ INPUT.RELS <! [ PRED "samerow", LBL #h1, ARG0 #e3, ARG1 ref-ind & #x4, 
		  ARG2 ref-ind & #x5 ] !>, 
  OUTPUT [ HOOK.INDEX #e3,
	   RELS <! [ PRED _in_p_rel, LBL #h1, ARG0 #e3, ARG1 #x4, ARG2 #x6 ],
		   [ PRED "_row_n_of_rel", LBL #h2, ARG0 ref-ind & #x6 ],
	           [ PRED "_same_a_as_rel", LBL #h2, ARG0 event & #e7, 
		     ARG1 #x6 ],
	           [ PRED comp_equal_rel, LBL #h2, ARG1 #e7, ARG2 #x5 ] !> ] ].

;; "samesize(x,y)"
;;
samesize_op_gpr := openproof_mtr &
[ INPUT.RELS <! [ PRED "samesize", LBL #h1, ARG0 #e3, ARG1 ref-ind & #x4, 
		  ARG2 ref-ind & #x5 ] !>, 
  OUTPUT [ HOOK.INDEX #e3,
	   RELS <! [ PRED _be_v_id_rel, LBL #h1, ARG0 #e3 & [ E.ASPECT.PROGR -],
		     ARG1 #x4, ARG2 #x6 ],
		   [ PRED "_size_n_1_rel", LBL #h2, ARG0 ref-ind & #x6 ],
		   [ PRED "_same_a_as_rel", LBL #h2, 
		     ARG0 event & #e7 & [ E.TENSE untensed ], ARG1 #x6 ],
		   [ PRED comp_equal_rel, LBL #h2, ARG1 #e7, ARG2 #x5 ] !> ] ].

add_indefq_mtr := add_quant_mtr &
[ CONTEXT.RELS <! [ PRED "_cube_n_1_rel" ] !>,
  OUTPUT.RELS <! [ PRED _a_q_rel ] !> ].

add_udefq_mtr := add_quant_mtr &
[ CONTEXT.RELS <! [ PRED _and_c_rel ] !>,
  OUTPUT.RELS <! [ PRED udef_q_rel ] !> ].

add_defq_mtr := add_quant_mtr &
[ CONTEXT.RELS <! [ PRED "~._n_", ] !>,
  OUTPUT.RELS <! [ PRED _the_q_rel ] !> ].

