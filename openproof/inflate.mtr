;;; -*- Mode: tdl; Coding: utf-8; -*-

;; DPF 2013-10-28
;; Rules for inflating minimal MRSs into full MRSs for input to generator.
;; Initially developed to generate from FOL expressions, which are converted
;; to MRS format via Aaron Kalb's script in erg/openproof/scripts.
;; Aaron's script, for example, converts "smaller(b,a)" to the following
;;     [ LTOP: h1
;;       INDEX: e3
;;       RELS: < [ named_rel LBL: h8 ARG0: x6 CARG: "B" ]
;;               [ named_rel LBL: h9 ARG0: x7 CARG: "A" ]
;;               [ "smaller" LBL: h2 ARG0: e3 ARG1: x6 ARG2: x7 ] > ]
;; Then these rules apply to produce a full MRS acceptable to the generator.

;; Convert name preds
;;
name_op_mtr := named_op_mtr.

;; Add quantifier for each proper name.
;;
add_properq_mtr := add_quant_mtr &
[ CONTEXT.RELS <! [ PRED named_rel, ARG0 #x1 & ref-ind ] !>,
  OUTPUT.RELS <! [ PRED proper_q_rel, ARG0 #x1 & [ PNG.PN 3s ] ] !> ].


;; Predicate nouns
;;
cube_op_gpr := pred_noun_gpr &
[ INPUT.RELS <! [ PRED "cube" ] !>, 
  OUTPUT.RELS <! [ ], [ PRED "_cube_n_1_rel" ] !> ].

tetrahedron_op_gpr := pred_noun_gpr &
[ INPUT.RELS <! [ PRED "tet" ] !>, 
  OUTPUT.RELS <! [ ], [ PRED "_tetrahedron_n_1_rel" ] !> ].

dodecahedron_op_gpr := pred_noun_gpr &
[ INPUT.RELS <! [ PRED "dodec" ] !>, 
  OUTPUT.RELS <! [ ], [ PRED "_dodecahedron_n_1_rel" ] !> ].


;; Comparative adjectives
;;
smaller_op_gpr := compar_adj_op_gpr &
[ INPUT.RELS <! [ PRED "smaller" ] !>, 
  OUTPUT.RELS <! [ PRED "_small_a_1_rel" ], [ ] !> ].

larger_op_gpr := compar_adj_op_gpr &
[ INPUT.RELS <! [ PRED "larger" ] !>, 
  OUTPUT.RELS <! [ PRED "_large_a_1_rel" ], [ ] !> ].


;; Three-arg prepositions
;;
between_op_gpr := prep_threearg_op_gpr &
[ INPUT.RELS <! [ PRED "between" ] !>, 
  OUTPUT.RELS <! [ ], [ PRED _between_p_rel ] !> ].


;; Prepositions
;;
backof_op_gpr := prep_op_gpr &
[ INPUT.RELS <! [ PRED "backof" ] !>, 
  OUTPUT.RELS <! [ PRED _in+back+of_p_rel ] !> ].

frontof_op_gpr := prep_op_gpr &
[ INPUT.RELS <! [ PRED "frontof" ] !>, 
  OUTPUT.RELS <! [ PRED _in+front+of_p_rel ] !> ].

;; Two-place Verbs
;;
adjoin_op_gpr := verb_op_gpr &
[ INPUT.RELS <! [ PRED "adjoins" ] !>, 
  OUTPUT.RELS <! [ PRED "_adjoin_v_1_rel" ] !> ].

like_op_gpr := verb_op_gpr &
[ INPUT.RELS <! [ PRED "likes" ] !>, 
  OUTPUT.RELS <! [ PRED "_like_v_1_rel" ] !> ].

;; Adjectives
;;
large_op_gpr := adj_op_gpr &
[ INPUT.RELS <! [ PRED "large" ] !>, 
  OUTPUT.RELS <! [ PRED "_large_a_1_rel" ] !> ].

small_op_gpr := adj_op_gpr &
[ INPUT.RELS <! [ PRED "small" ] !>, 
  OUTPUT.RELS <! [ PRED "_small_a_1_rel" ] !> ].

medium_op_gpr := adj_op_gpr &
[ INPUT.RELS <! [ PRED "medium" ] !>, 
  OUTPUT.RELS <! [ PRED "_medium_a_1_rel" ] !> ].

happy_op_gpr := adj_op_gpr &
[ INPUT.RELS <! [ PRED "happy" ] !>, 
  OUTPUT.RELS <! [ PRED "_happy_a_with_rel" ] !> ].

;; Noun+of
;;
rightof_op_gpr := loc_of_op_gpr &
[ INPUT.RELS <! [ PRED "rightof" ] !>, 
  OUTPUT.RELS <! [ PRED "_right_n_of_rel", ARG0.PNG.PN 3s ], [ ], [ ] !> ].

leftof_op_gpr := loc_of_op_gpr &
[ INPUT.RELS <! [ PRED "leftof" ] !>, 
  OUTPUT.RELS <! [ PRED "_left_n_of_rel", ARG0.PNG.PN 3s ], [ ], [ ] !> ].


;; loc + same + Noun
;;
samerow_op_gpr := same_loc_op_gpr &
[ INPUT.RELS <! [ PRED "samerow" ] !>, 
  OUTPUT.RELS <! [ ], [ PRED "_row_n_of_rel", ARG0.PNG.PN 3s ], [ ], [ ] !> ].

samecol_op_gpr := same_loc_op_gpr &
[ INPUT.RELS <! [ PRED "samecol" ] !>, 
  OUTPUT.RELS <! [ ], [ PRED "_column_n_of_rel", ARG0.PNG.PN 3s ], [ ], [ ] !> ].


;; same + Noun
;;
samesize_op_gpr := same_noun_op_gpr &
[ INPUT.RELS <! [ PRED "samesize" ] !>, 
  OUTPUT.RELS <! [ ], [ PRED "_size_n_1_rel", ARG0.PNG.PN 3s ], [ ], [ ] !> ].

sameshape_op_gpr := same_noun_op_gpr &
[ INPUT.RELS <! [ PRED "sameshape" ] !>, 
  OUTPUT.RELS <! [ ], [ PRED "_shape_n_1_rel", ARG0.PNG.PN 3s ], [ ], [ ] !> ].



;; Add the indefinite quantifier for predicative nouns
;;
add_indefq_cube_mtr := add_quant_mtr &
[ CONTEXT.RELS <! [ PRED "_cube_n_1_rel" ] !>,
  OUTPUT.RELS <! [ PRED udef_a_q_rel ] !> ].

add_indefq_tet_mtr := add_quant_mtr &
[ CONTEXT.RELS <! [ PRED "_tetrahedron_n_1_rel" ] !>,
  OUTPUT.RELS <! [ PRED _a_q_rel ] !> ].

add_indefq_dodec_mtr := add_quant_mtr &
[ CONTEXT.RELS <! [ PRED "_dodecahedron_n_1_rel" ] !>,
  OUTPUT.RELS <! [ PRED _a_q_rel ] !> ].

;; Add the udef quantifier for coordinated NPs
;;
add_udefq_mtr := add_quant_mtr &
[ CONTEXT.RELS <! [ PRED _and_c_nopr_nrev_rel ] !>,
  OUTPUT.RELS <! [ PRED udef_q_rel ] !> ].

;; Add the definite quantifier for "right", "left"
;;
add_defq_mtr := add_quant_mtr &
[ CONTEXT.RELS <! [ PRED "~._n_", ] !>,
  OUTPUT.RELS <! [ PRED _the_q_rel ] !> ].


;; Change neg from taking event argument to handle argument
;;
neg_op_mtr := negation_op_mtr.

;; Conjunctions

and_op_mtr := conj_op_mtr &
[ INPUT.RELS <! [ PRED "and" ] !>,
  OUTPUT.RELS <! [ PRED _and_c_nopr_nrev_rel, ARG0.SORT collective ] !> ].

or_op_mtr := conj_op_mtr &
[ INPUT.RELS <! [ PRED "or" ] !>,
  OUTPUT.RELS <! [ PRED _or_c_nopr_nrev_rel, ARG0.SORT distributive ] !> ].


;; Add left and right handles for conj-rels
;;
add_conj_handles_mtr := add_conjunction_handles_mtr.

;; Correct for negation
adjust_neg_conj_left_mtr := adjust_neg_conj_index_left_mtr.
adjust_neg_conj_right_mtr := adjust_neg_conj_index_right_mtr.

#|
;; Replace "not" with "not the case that" for conjoined-S negation
neg_clause_op_mtr := negated_clause_op_mtr.
|#

;; Replace and+not with but
;;
and_not_to_but_op_mtr := and_neg_to_but_op_mtr &
 [ OUTPUT.RELS.LIST.FIRST [ CARG "and-neg-but-op-gpr", ARG0.PORD pr023 ] ].

;; if-then
;;
if_then_mtr := if_then_cond_mtr.

;; if-and-only-if
;;
iff_mtr := if_and_only_if_mtr.

;; Restrict to paired conjunction with conditionals (disambig):
;; |If P then either Q or R.|
;;
paired_or_cond := paired_conj_ifthen_gpr.

;; Restrict to the+case plus paired conjunction with conditionals (disambig):
;; |If P then it is the case both that Q and that R.|
;;
paired_and_cond := cond_and_thecase_gpr.