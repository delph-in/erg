;;; -*- Mode: tdl; Coding: utf-8; -*-

;; "cube(x)"
;;
cube_op_gpr := monotonic_mtr &
[ INPUT.RELS <! [ PRED "cube", LBL #h2, ARG0 #e3, ARG1 ref-ind & #x4 ] !>, 
  OUTPUT.RELS <! [ LBL #h2, PRED _be_v_id_rel, ARG0 #e3, ARG1 #x4, ARG2 #x5 ],
	         [ LBL #h1, PRED "_cube_n_1_rel", ARG0 ref-ind & #x5 ] !> ].

;; "smaller(x,y)"
;;
smaller_op_gpr := monotonic_mtr &
[ INPUT.RELS <! [ PRED "smaller", LBL #h1, ARG0 #e3, ARG1 ref-ind & #x4, 
		  ARG2 ref-ind & #x5 ] !>, 
  OUTPUT.RELS <! [ PRED "_small_a_1_rel", LBL #h1, ARG0 #e3, ARG1 #x4 ],
		 [ PRED comp_rel, LBL #h1, ARG1 #e3, ARG2 #x5 ] !> ].

;; "larger(x,y)"
;;
larger_op_gpr := monotonic_mtr &
[ INPUT.RELS <! [ PRED "larger", LBL #h1, ARG0 #e3, ARG1 ref-ind & #x4, 
		  ARG2 ref-ind & #x5 ] !>, 
  OUTPUT.RELS <! [ PRED "_large_a_1_rel", LBL #h1, ARG0 #e3, ARG1 #x4 ],
		 [ PRED comp_rel, LBL #h1, ARG1 #e3, ARG2 #x5 ] !> ].


;; "between(x,y,z)"
;;
between_op_gpr := monotonic_mtr &
[ INPUT.RELS <! [ PRED "between", LBL #h1, ARG0 #e3, ARG1 ref-ind & #x4, 
		  ARG2 ref-ind & #x5, ARG3 ref-ind & #x6  ] !>, 
  OUTPUT.RELS <! [ PRED _and_c_rel, LBL handle, ARG0 ref-ind & #x7, 
		   L-INDEX #x5, R-INDEX #x6 ],
		 [ PRED _between_p_rel, LBL #h1, ARG0 #e3, ARG1 #x4,
		   ARG2 #x7 ] !> ].

;; "backof(x,y)"
;;
backof_op_gpr := monotonic_mtr &
[ INPUT.RELS <! [ PRED "backof", LBL #h1, ARG0 #e3, ARG1 ref-ind & #x4, 
		  ARG2 ref-ind & #x5 ] !>, 
  OUTPUT.RELS <! [ PRED _in+back+of_p_rel, LBL #h1, ARG0 #e3, ARG1 #x4, 
		   ARG2 #x5 ] !> ].

;; "frontof(x,y)"
;;
frontof_op_gpr := monotonic_mtr &
[ INPUT.RELS <! [ PRED "frontof", LBL #h1, ARG0 #e3, ARG1 ref-ind & #x4, 
		  ARG2 ref-ind & #x5 ] !>, 
  OUTPUT.RELS <! [ PRED _in+front+of_p_rel, LBL #h1, ARG0 #e3, ARG1 #x4, 
		   ARG2 #x5 ] !> ].

;; "large(x)"
;;
large_op_gpr := monotonic_mtr &
[ INPUT.RELS <! [ PRED "large", LBL #h2, ARG0 #e3, ARG1 ref-ind & #x4 ] !>, 
  OUTPUT.RELS <! [ PRED "_large_a_1_rel", LBL #h2, ARG0 #e3, ARG1 #x4 ] !> ].

;; "small(x)"
;;
small_op_gpr := monotonic_mtr &
[ INPUT.RELS <! [ PRED "small", LBL #h2, ARG0 #e3, ARG1 ref-ind & #x4 ] !>, 
  OUTPUT.RELS <! [ PRED "_small_a_1_rel", LBL #h2, ARG0 #e3, ARG1 #x4 ] !> ].


;; "rightof(x,y)"
;;
rightof_op_gpr := monotonic_mtr &
[ INPUT.RELS <! [ PRED "rightof", LBL #h1, ARG0 #e3, ARG1 ref-ind & #x4, 
		  ARG2 ref-ind & #x5 ] !>, 
  OUTPUT.RELS <! [ PRED _to_p_rel, LBL #h1, ARG0 #e3, ARG1 #x4, ARG2 #x6 ],
		 [ PRED "_right_n_1_rel", LBL #h2, ARG0 ref-ind & #x6 ],
	         [ PRED _of_p_rel, LBL #h2, ARG1 #x6, ARG2 ref-ind & #x5 ] !> ].

;; "leftof(x,y)"
;;
leftof_op_gpr := monotonic_mtr &
[ INPUT.RELS <! [ PRED "leftof", LBL #h1, ARG0 #e3, ARG1 ref-ind & #x4, 
		  ARG2 ref-ind & #x5 ] !>, 
  OUTPUT.RELS <! [ PRED _to_p_rel, LBL #h1, ARG0 #e3, ARG1 #x4, ARG2 #x6 ],
		 [ PRED "_left_n_1_rel", LBL #h2, ARG0 ref-ind & #x6 ],
	         [ PRED _of_p_rel, LBL #h2, ARG1 #x6, ARG2 ref-ind & #x5 ] !> ].

;; "samerow(x,y)"
;;
samerow_op_gpr := monotonic_mtr &
[ INPUT.RELS <! [ PRED "samerow", LBL #h1, ARG0 #e3, ARG1 ref-ind & #x4, 
		  ARG2 ref-ind & #x5 ] !>, 
  OUTPUT.RELS <! [ PRED _in_p_rel, LBL #h1, ARG0 #e3, ARG1 #x4, ARG2 #x6 ],
		 [ PRED "_row_n_of_rel", LBL #h2, ARG0 ref-ind & #x6 ],
	         [ PRED "_same_a_as_rel", LBL #h2, ARG0 event & #e7, ARG1 #x6 ],
	         [ PRED comp_equal_rel, LBL #h2, ARG1 #e7, ARG2 #x5 ] !> ].

;; "samesize(x,y)"
;;
samesize_op_gpr := monotonic_mtr &
[ INPUT.RELS <! [ PRED "samesize", LBL #h1, ARG0 #e3, ARG1 ref-ind & #x4, 
		  ARG2 ref-ind & #x5 ] !>, 
  OUTPUT.RELS <! [ PRED _be_v_id_rel, LBL #h1, ARG0 #e3, ARG1 #x4, ARG2 #x6 ],
		 [ PRED "_size_n_1_rel", LBL #h2, ARG0 ref-ind & #x6 ],
	         [ PRED "_same_a_as_rel", LBL #h2, 
		   ARG0 event & #e7 & [ E [ ASPECT [ PROGR -, PRF - ], 
					    TENSE present ] ],
		   ARG1 #x6 ],
	         [ PRED comp_equal_rel, LBL #h2, ARG1 #e7, ARG2 #x5 ] !> ].


;; A is between B and C
threearg_prep_op_gpr := openproof_threearg_conj_mtr &
[ INPUT.RELS <! [ PRED named_rel, LBL handle & #h1, ARG0 ref-ind & #x2 &
	                                           [ PNG.GEN masc ] ],
                [ PRED named_rel, LBL handle & #h2, ARG0 ref-ind & #x4 &
	                                           [ PNG.GEN masc ] ],
                [ PRED named_rel, LBL handle & #h3, ARG0 ref-ind & #x6 &
	                                           [ PNG.GEN masc ] ],
		[ PRED _and_c_rel, LBL handle & #h4, ARG0 #x8 ],
                [ PRED _between_p_rel, ARG0 #e10, ARG1 #x2, ARG2 #x8 ] !>, 
  OUTPUT [ RELS <! +copy+ & [ LBL handle & #h1, ARG0 [ PNG.GEN neut ] ],
                   +copy+ & [ LBL handle & #h2, ARG0 [ PNG.GEN neut ] ],
                   +copy+ & [ LBL handle & #h3, ARG0 [ PNG.GEN neut ] ],
		   +copy+ & [ LBL handle & #h4 ],
		   +copy+ & [ LBL handle,
			      ARG0 [ E [ ASPECT [ PROGR -, PRF - ], 
					 TENSE present ] ] ],
		[ PRED proper_q_rel, LBL handle ],
		[ PRED proper_q_rel, LBL handle ],
		[ PRED proper_q_rel, LBL handle ],
		[ PRED udef_q_rel, LBL handle, ARG0 #x8 ] !> ],
  FLAGS.EQUAL < #x2, #x4, #x6, #e10 > ].


;; A is to the right of B
twoarg_pnp_op_gpr := openproof_twoarg_mtr &
[ CONTEXT.RELS <! [ PRED "~._n_", LBL handle & #h4, ARG0 #x5 & ref-ind ],
                  [ LBL #h4, ARG2 #x4 & ref-ind ] !>,
  INPUT.RELS <! [ PRED named_rel, LBL handle & #h1, ARG0 ref-ind & #x2 &
	                                           [ PNG.GEN masc ] ],
                [ PRED named_rel, LBL handle & #h2, ARG0 ref-ind & #x4 &
	                                           [ PNG.GEN masc ] ],
                [ LBL handle & #h3, ARG0 #e10, ARG1 #x2, ARG2 #x5 ] !>, 
  OUTPUT [ RELS <! +copy+ & [ LBL #h1, ARG0 [ PNG.GEN neut ] ],
                   +copy+ & [ LBL #h2, ARG0 [ PNG.GEN neut ] ],
		   +copy+ & [ LBL #h3, 
			      ARG0 [ E [ ASPECT [ PROGR -, PRF - ], 
					 TENSE present ] ],
			      ARG2.PNG.PN 3s ],
		   [ PRED proper_q_rel, LBL handle ],
		   [ PRED proper_q_rel, LBL handle ],
		   [ PRED _the_q_rel, LBL handle, ARG0 #x5 ] !> ],
  FLAGS.EQUAL < #x2, #x4, #e10 > ].

;; A is in back of B
twoarg_pp_op_gpr := openproof_twoarg_mtr &
[ INPUT.RELS <! [ PRED named_rel, LBL handle & #h1, ARG0 ref-ind & #x2 &
	                                           [ PNG.GEN masc ] ],
                [ PRED named_rel, LBL handle & #h2, ARG0 ref-ind & #x4 & 
	                                           [ PNG.GEN masc ] ],
                [ PRED "~._p_", ARG0 #e10, ARG1 #x2, ARG2 #x4 ] !>, 
  OUTPUT [ RELS <! +copy+ & [ LBL #h1, ARG0.PNG.GEN neut ],
                   +copy+ & [ LBL #h2, ARG0.PNG.GEN neut ],
		   +copy+ & [ LBL handle, 
			      ARG0 [ E [ ASPECT [ PROGR -, PRF - ], 
					 TENSE present ] ] ],
		[ PRED proper_q_rel, LBL handle ],
		[ PRED proper_q_rel, LBL handle ] !> ],
  FLAGS.EQUAL < #x2, #x4, #e10 > ].

;; A is larger than B

twoarg_ap_op_gpr := openproof_twoarg_mtr &
[ CONTEXT.RELS <! [ PRED comp_rel, ARG1 #e10, ARG2 #x4 ] !>,
  INPUT.RELS <! [ PRED named_rel, LBL handle & #h1, ARG0 ref-ind & #x2 &
	                                           [ PNG.GEN masc ] ],
                [ PRED named_rel, LBL handle & #h2, ARG0 ref-ind & #x4 & 
	                                           [ PNG.GEN masc ] ],
		[ PRED "~._a_", ARG0 #e10, ARG1 #x2 ] !>, 
  OUTPUT [ RELS <! +copy+ & [ LBL #h1, ARG0.PNG.GEN neut ],
                   +copy+ & [ LBL #h2, ARG0.PNG.GEN neut ],
		   +copy+ & [ LBL handle, 
			      ARG0 [ E [ ASPECT [ PROGR -, PRF - ], 
					 TENSE present ] ] ],
		[ PRED proper_q_rel, LBL handle ],
		[ PRED proper_q_rel, LBL handle ] !> ],
  FLAGS.EQUAL < #x2, #x4, #e10 > ].


;; A is large

onearg_op_gpr := openproof_onearg_mtr &
[ INPUT.RELS <! [ PRED named_rel, LBL handle & #h1, ARG0 ref-ind & #x2 &
	                                           [ PNG.GEN masc ] ],
                [ PRED "~._a_", ARG0 #e10, ARG1 #x2 ] !>, 
  OUTPUT [ RELS <! +copy+ & [ LBL #h1, ARG0 [ PNG.GEN neut ] ],
		   +copy+ & [ LBL handle, ARG0 [ E [ ASPECT [ PROGR -, PRF - ], TENSE present ] ] ],
		[ PRED proper_q_rel, LBL handle ] !> ],
  FLAGS.EQUAL < #x2, #e10 > ].

;; A is a cube
noun_pred_op_gpr := openproof_predn_mtr &
[ INPUT.RELS <! [ PRED "~._n_", LBL handle & #h1, ARG0 ref-ind & #x2 ],
                [ PRED named_rel, LBL handle & #h2, ARG0 ref-ind & #x4 & 
	                                           [ PNG.GEN masc ] ],
		[ PRED _be_v_id_rel, LBL handle, ARG0 #e10, 
		  ARG1 #x4, ARG2 #x2 ] !>, 
  OUTPUT [ HOOK.INDEX #e10,
           RELS <! +copy+ & [ LBL #h1, ARG0 #x2 & [ PNG.PN 3s ] ],
                   +copy+ & [ LBL #h2, ARG0 #x4 & [ PNG [ PN 3s, GEN neut ] ] ],
		   +copy+ & [ ARG0 #e10 & event & 
		    [ E [ ASPECT [ PROGR -, PRF - ], TENSE present ] ] ],
		   [ PRED _a_q_rel, LBL handle, ARG0 #x2 ],
                   [ PRED proper_q_rel, LBL handle, ARG0 #x4 ] !> ],
  FLAGS.EQUAL < #x2, #x4, #e10 > ].
