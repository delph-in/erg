a_parens_np := never_unify_le & [].
b_parens_np := never_unify_le & [].
c_parens_np := never_unify_le & [].
d_parens_np := never_unify_le & [].
b_period_np1 := never_unify_le & [].
c_period_np1 := never_unify_le & [].
d_period_np1 := never_unify_le & [].
e_period_np1 := never_unify_le & [].
f_period_np1 := never_unify_le & [].
d_comma_np1 := never_unify_le & [].
d_period_comma_np1 := never_unify_le & [].
r_comma_np1 := never_unify_le & [].
r_period_comma_np1 := never_unify_le & [].
be_c_is_neg_1 := never_unify_le & [].
be_c_are_neg_1 := never_unify_le & [].
be_c_being := never_unify_le & [].
be_id_being := never_unify_le & [].
however_adv2 := never_unify_le & [].
moreover_1 := never_unify_le & [].
moreover_root_post := never_unify_le & [].

a_period_np1 := n_-_pn-neut_le &
 [ ORTH < "A" >,
   SYNSEM [ LKEYS.KEYREL.CARG "A",
            PHON.ONSET voc ] ].

b_lower_np1 := n_-_pn-neut_le &
 [ ORTH < "B" >,
   SYNSEM [ LKEYS.KEYREL.CARG "B",
            PHON.ONSET con ] ].

c_lower_np1 := n_-_pn-neut_le &
 [ ORTH < "C" >,
   SYNSEM [ LOCAL.AGR.PNG.PN 3s,
            LKEYS.KEYREL.CARG "C",
            PHON.ONSET con ] ].

d_lower_np1 := n_-_pn-neut_le &
 [ ORTH < "D" >,
   SYNSEM [ LKEYS.KEYREL.CARG "D",
            PHON.ONSET con ] ].

e_lower_np1 := n_-_pn-neut_le &
 [ ORTH < "E" >,
   SYNSEM [ LKEYS.KEYREL.CARG "E",
            PHON.ONSET voc ] ].

f_lower_np1 := n_-_pn-neut_le &
 [ ORTH < "F" >,
   SYNSEM [ LKEYS.KEYREL.CARG "F",
            PHON.ONSET voc ] ].

between := p_np_i_le &
 [ ORTH < "between" >,
   SYNSEM [ LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CONJ.LCHEAD cnil,
            LKEYS.KEYREL.PRED _between_p_rel,
            PHON.ONSET con ] ].

in_case := p_cp_s_le &
 [ ORTH < "in", "case" >,
   SYNSEM [ LOCAL.CAT.POSTHD +,
            LKEYS.KEYREL.PRED "_in+case_x_rel",
            PHON.ONSET voc ] ].

be_id_are := v_np_are_le &
 [ ORTH < "are" >,
   SYNSEM [ LOCAL.CAT.VAL [ SUBJ.FIRST.LOCAL.AGR.PNG.PN #pn,
                            COMPS.FIRST.LOCAL.AGR.PNG.PN #pn ],
	    PHON.ONSET voc ] ].

be_id_are_neg_1 := v_np_are-n_le &
 [ ORTH < "aren't" >,
   SYNSEM [ LOCAL.CAT.VAL [ SUBJ.FIRST.LOCAL.AGR.PNG.PN #pn,
                            COMPS.FIRST.LOCAL.AGR.PNG.PN #pn ],
            PHON.ONSET voc ] ].

be_id_is := v_np_is_le &
 [ ORTH < "is" >,
   SYNSEM [ LOCAL.CAT.VAL [ SUBJ.FIRST.LOCAL.AGR.PNG.PN #pn,
                            COMPS.FIRST.LOCAL.AGR.PNG.PN #pn ],
	    PHON.ONSET voc ] ].

be_id_is_cx := v_np_is-cx_le &
 [ ORTH < "s" >,
   SYNSEM [ LOCAL.CAT.VAL [ SUBJ.FIRST.LOCAL.AGR.PNG.PN #pn,
                            COMPS.FIRST.LOCAL.AGR.PNG.PN #pn ],
	    PHON.ONSET voc ] ].

left_n1 := n_-_c-dir_le &
 [ ORTH < "left" >,
   SYNSEM [ LOCAL.CONT.HOOK.INDEX.PNG.PN 3s,
            LKEYS.KEYREL.PRED "_left_n_1_rel",
            PHON.ONSET con ] ].

nor_conj := c_xp_nor_le &
 [ ORTH < "nor" >,
   SYNSEM [ LOCAL [ CONJ lex-conj & [ CHEAD neither ],
                    CAT.VAL.COMPS.FIRST.LOCAL.CAT.MC na ],
            PHON.ONSET con ] ].

of_poss := p_np_i-nm-poss_le &
 [ ORTH < "of" >,
   SYNSEM [ LOCAL.CAT.HEAD.MINORS.NORM no_rel,
            LKEYS.KEYREL.PRED _of_p_rel,
            PHON.ONSET voc ] ].

only_deg := av_-_dg-jomv_le &
 [ ORTH < "only" >,
   SYNSEM [ LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CAT.POSTHD +,
            LKEYS.KEYREL.PRED "_only_x_deg_rel",
            PHON.ONSET voc ] ].

right_n1 := n_-_c-dir_le &
 [ ORTH < "right" >,
   SYNSEM [ LOCAL.CONT.HOOK.INDEX.PNG.PN 3s,
            LKEYS.KEYREL.PRED "_right_n_1_rel",
            PHON.ONSET con ] ].

row_n1 := n_pp_c-of_le &
 [ ORTH < "row" >,
   SYNSEM [ LOCAL.CONT.HOOK.INDEX.PNG.PN 3s,
            LKEYS.KEYREL.PRED "_row_n_of_rel",
            PHON.ONSET con ] ].

size_n1 := n_-_mc-ed_le &
 [ ORTH < "size" >,
   SYNSEM [ LOCAL.CONT.HOOK.INDEX.PNG.PN 3s,
            LKEYS.KEYREL.PRED "_size_n_1_rel",
            PHON.ONSET con ] ].

;; Block comma attaching, to avoid "if B is large, then, C is small"
then_adv3 := nonrs-nab &
 [ ORTH < "then" >,
   SYNSEM scopal_s_adverb_synsem &
          [ LOCAL [ CAT [ POSTHD -, 
	                  HEAD.MOD < [ LOCAL.CAT.MC bool ] > ],
	            CONJ cnil ],
	    PUNCT.RPUNCT comma_punct,
            LKEYS.KEYREL.PRED "_then_a_1_rel",
            PHON.ONSET con ] ].

