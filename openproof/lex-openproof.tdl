a_parens_np := never_unify_le & [].
b_parens_np := never_unify_le & [].
c_parens_np := never_unify_le & [].
d_parens_np := never_unify_le & [].
b_period_np1 := never_unify_le & [].
c_period_np1 := never_unify_le & [].
d_period_np1 := never_unify_le & [].
e_period_np1 := never_unify_le & [].
f_period_np1 := never_unify_le & [].
d_comma_np1 := never_unify_le & [].
d_period_comma_np1 := never_unify_le & [].
r_comma_np1 := never_unify_le & [].
r_period_comma_np1 := never_unify_le & [].
as_if_c := never_unify_le & [].
as_though_c := never_unify_le & [].
;be_c_is_neg_1 := never_unify_le & [].
;be_c_are_neg_1 := never_unify_le & [].
be_c_am := never_unify_le & [].
be_c_am_neg_1 := never_unify_le & [].
be_c_be := never_unify_le & [].
be_c_being := never_unify_le & [].
be_c_been := never_unify_le & [].
be_c_was := never_unify_le & [].
be_c_was_neg_1 := never_unify_le & [].
be_c_was_subj := never_unify_le & [].
be_c_was_neg_subj_1 := never_unify_le & [].
be_c_were := never_unify_le & [].
be_c_were_neg_1 := never_unify_le & [].
be_c_were_neg_subj_1 := never_unify_le & [].
be_c_were_subj := never_unify_le & [].
be_id_am := never_unify_le & [].
be_id_being := never_unify_le & [].
by_pass_p := never_unify_le & [].
did1_neg_1 := never_unify_le & [].
do1_pos := never_unify_le & [].
does1_pos := never_unify_le & [].
do1_neg_1 := never_unify_le & [].
does1_neg_1 := never_unify_le & [].
did1_neg_1 := never_unify_le & [].
for_prtcl := never_unify_le & [].
had_aux := never_unify_le & [].
had_aux_subj := never_unify_le & [].
has_aux := never_unify_le & [].
hasnt_aux_1 := never_unify_le & [].
have_aux_prp := never_unify_le & [].
have_bse_aux := never_unify_le & [].
have_fin_aux := never_unify_le & [].
have_fin_aux_neg_1 := never_unify_le & [].
however_adv2 := never_unify_le & [].
itself := never_unify_le & [].
like_c := never_unify_le & [].
moreover_1 := never_unify_le & [].
moreover_root_post := never_unify_le & [].
will_aux_inv := never_unify_le & [].
will_aux_neg_1 := never_unify_le & [].
will_aux_pos := never_unify_le & [].

a_period_np1 := n_-_pn-neut_le &
 [ ORTH < "A" >,
   SYNSEM [ LKEYS.KEYREL.CARG "A",
            PHON.ONSET voc ] ].

b_lower_np1 := n_-_pn-neut_le &
 [ ORTH < "B" >,
   SYNSEM [ LKEYS.KEYREL.CARG "B",
            PHON.ONSET con ] ].

c_lower_np1 := n_-_pn-neut_le &
 [ ORTH < "C" >,
   SYNSEM [ LOCAL.AGR.PNG.PN 3s,
            LKEYS.KEYREL.CARG "C",
            PHON.ONSET con ] ].

d_lower_np1 := n_-_pn-neut_le &
 [ ORTH < "D" >,
   SYNSEM [ LKEYS.KEYREL.CARG "D",
            PHON.ONSET con ] ].

e_lower_np1 := n_-_pn-neut_le &
 [ ORTH < "E" >,
   SYNSEM [ LKEYS.KEYREL.CARG "E",
            PHON.ONSET voc ] ].

f_lower_np1 := n_-_pn-neut_le &
 [ ORTH < "F" >,
   SYNSEM [ LKEYS.KEYREL.CARG "F",
            PHON.ONSET voc ] ].

be_c_is_cx_2 := v_prd_is-cx_le &
 [ ORTH < "'s" >,
   SYNSEM [ LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL [ CAT.HEAD partn &
							[ MINORS.MIN pron_rel ],
					     CONT.HOOK.INDEX non_conj_sement ],
	    PHON.ONSET con ] ].

be_id_is_cx_2 := v_np_is-cx_le &
 [ ORTH < "'s" >,
   SYNSEM [ LOCAL.CAT.VAL [ SUBJ.FIRST.LOCAL [ CAT.HEAD partn &
							[ MINORS.MIN pron_rel ],
					       CONT.HOOK.INDEX nonconj_ref-ind],
			    COMPS.FIRST.--SIND.PNG.PN 3s ],
	    PHON.ONSET con ] ].

between := p_np_i_le &
 [ ORTH < "between" >,
   SYNSEM [ LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CONJ.LCHEAD 
                                                    either_or_neither_or_cnil,
            LKEYS.KEYREL.PRED _between_p_rel,
            PHON.ONSET con ] ].

in_case := p_cp_s_le &
 [ ORTH < "in", "case" >,
   SYNSEM [ LOCAL.CAT.POSTHD +,
            LKEYS.KEYREL.PRED "_in+case_x_rel",
            PHON.ONSET voc ] ].

be_id_are := v_np_are_le &
 [ ORTH < "are" >,
   SYNSEM [ LOCAL.CAT.VAL [ SUBJ.FIRST.LOCAL.AGR.PNG.PN #pn,
                            COMPS.FIRST.LOCAL.AGR.PNG.PN #pn ],
	    PHON.ONSET voc ] ].

be_id_are_neg_1 := v_np_are-n_le &
 [ ORTH < "aren't" >,
   SYNSEM [ LOCAL.CAT.VAL [ SUBJ.FIRST.LOCAL.AGR.PNG.PN #pn,
                            COMPS.FIRST.LOCAL.AGR.PNG.PN #pn ],
            PHON.ONSET voc ] ].

be_id_is := v_np_is_le &
 [ ORTH < "is" >,
   SYNSEM [ LOCAL.CAT.VAL [ SUBJ.FIRST.LOCAL.AGR.PNG.PN #pn,
                            COMPS.FIRST.LOCAL.AGR.PNG.PN #pn ],
	    PHON.ONSET voc ] ].

be_id_is_cx := v_np_is-cx_le &
 [ ORTH < "s" >,
   SYNSEM [ LOCAL.CAT.VAL [ SUBJ.FIRST.LOCAL.AGR.PNG.PN #pn,
                            COMPS.FIRST.LOCAL.AGR.PNG.PN #pn ],
	    PHON.ONSET voc ] ].

be_id_is_neg_1 := v_np_is-n_le &
 [ ORTH < "isn't" >,
   SYNSEM [ LOCAL.CAT.VAL [ SUBJ.FIRST.LOCAL.AGR.PNG.PN #pn,
                            COMPS.FIRST.LOCAL.AGR.PNG.PN #pn ],
	    PHON.ONSET voc ] ].

if_subconj_unspec := p_cp_s-unsp_le &
 [ ORTH < "if" >,
   SYNSEM [ LOCAL.CAT.POSTHD -,
	    LKEYS.KEYREL.PRED "_if_x_then_rel",
            PHON.ONSET voc ] ].

if_subconj_unspec_post := p_cp_s-unsp_le &
 [ ORTH < "if" >,
   SYNSEM [ LOCAL.CAT [ POSTHD +,
			HEAD.MOD < [ MODIFD notmod_or_rmod,
				     LOCAL.CONT.HOOK.XARG.PRONTYPE not_pron]> ],
	    LKEYS.KEYREL.PRED "_if_x_then_rel",
            PHON.ONSET voc ] ].

left_n1 := n_-_c-dir_le &
 [ ORTH < "left" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_left_n_1_rel",
            PHON.ONSET con ] ].

nor_conj := c_xp_nor_le &
 [ ORTH < "nor" >,
   SYNSEM [ LOCAL [ CONJ lex-conj & [ CHEAD neither ],
                    CAT.VAL.COMPS.FIRST.LOCAL.CAT.MC na ],
            PHON.ONSET con ] ].

of_poss := p_np_i-nm-poss_le &
 [ ORTH < "of" >,
   SYNSEM [ LOCAL.CAT.HEAD.MINORS.NORM no_rel,
            LKEYS.KEYREL.PRED _of_p_rel,
            PHON.ONSET voc ] ].

only_if_subconj_1 := p_cp_s-rev_le &
 [ ORTH < "only", "if" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_only+if_x_rel",
            PHON.ONSET voc ] ].

right_n1 := n_-_c-dir_le &
 [ ORTH < "right" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_right_n_1_rel",
            PHON.ONSET con ] ].

row_n1 := n_pp_c-of_le &
 [ ORTH < "row" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_row_n_of_rel",
            PHON.ONSET con ] ].

shape_n1 := n_-_mc-ed_le &
 [ ORTH < "shape" >,
   SYNSEM [ LOCAL.AGR.PNG.PN 3s,
	    LKEYS.KEYREL.PRED "_shape_n_1_rel",
            PHON.ONSET con ] ].

shape_pl_n1 := n_-_c-pl-ifl_le &
 [ ORTH < "shape" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shape_n_1_rel",
            PHON.ONSET con ] ].

size_n1 := n_-_mc-ed_le &
 [ ORTH < "size" >,
   SYNSEM [ LOCAL.AGR.PNG.PN 3s,
	    LKEYS.KEYREL.PRED "_size_n_1_rel",
            PHON.ONSET con ] ].

size_pl_n1 := n_-_c-pl-ifl_le &
 [ ORTH < "size" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_size_n_1_rel",
            PHON.ONSET con ] ].

the_case_a1 := aj_pp-cp_i-it-brdg_le &
 [ ORTH < "the", "case" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_the+case_a_1_rel",
            PHON.ONSET con ] ].

;; Block comma attaching, to avoid "if B is large, then, C is small"
then_adv3 := nonrs-nab &
 [ ORTH < "then" >,
   SYNSEM scopal_s_adverb_synsem &
          [ LOCAL [ CAT [ POSTHD -, 
	                  HEAD.MOD < [ LOCAL.CAT.MC bool ] > ],
	            CONJ cnil ],
	    PUNCT.RPUNCT comma_punct,
            LKEYS.KEYREL.PRED "_then_a_1_rel",
            PHON.ONSET con ] ].

unless := p_cp_s-unsp_le &
 [ ORTH < "unless" >,
   SYNSEM [ LOCAL.CAT.POSTHD +,
            LKEYS.KEYREL.PRED "_unless_x_rel",
            PHON.ONSET voc ] ].

both_adv1 := av_-_i-vp-x_le &
 [ ORTH < "both" >,
   SYNSEM 
    [ LOCAL.CAT.HEAD.MOD.FIRST.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONJ.LCHEAD cnil,
      LKEYS.KEYREL.PRED "_both_a_1_rel",
      PHON.ONSET con ] ].

