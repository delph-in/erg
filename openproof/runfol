#!/bin/bash
# Argument = -f fol -r ruleset -x blockrules -a addrules

usage()
{
cat << EOF
usage: $0 options

This script produces paraphrases of an FOL expression

OPTIONS:
   -f      FOL string
   -r      Rule set filename
   -x      Blocked rule set filename
   -a      Added rule set filename
   -h      Show this message

EOF
}

FOL=
RULES=
BLOCKED=
ADDED=
while getopts “hf:r:x:a:” OPTION
do
     case $OPTION in
         h)
             usage
             exit 1
             ;;
         f)
             FOL=$OPTARG
             ;;
         r)
             RULES=$OPTARG
             ;;
         x)
             BLOCKED=$OPTARG
             ;;
         a)
             ADDED=$OPTARG
	     ;;
         ?)
             usage
             exit
    esac
done

if [[ -z $FOL ]] || [[ -z $RULES ]]
then
     usage
     exit 1
else
allrules="/tmp/allrules.$RANDOM"
blockrules="/tmp/blockrules.$RANDOM"
newrules="/tmp/newrules.$RANDOM"
userules="/tmp/rules.$RANDOM"
sort $RULES > $allrules;
if [[ -n $BLOCKED ]]
  then
   sort $BLOCKED > $blockrules;
   comm -23 $allrules $blockrules > $newrules
  else
   cp $allrules $newrules
fi;
if [[ -n $ADDED ]]
   then
   cat $ADDED $newrules > $userules
   else
   cp $newrules $userules
fi;
cd /home/danf/erg/openproof; python scripts/e2e.py $FOL | /home/danf/bin/ace.0919 -g inflatemrs.dat -f | /home/danf/bin/ace.0919 -g paraphrase-op.dat --transfer-config $userules | /home/danf/bin/ace.0919 -g ergopen.dat -e | scripts/xmlify
fi;
if [ -f $allrules ]; then
rm $allrules
fi;
if [ -f $blockrules ]; then
rm $blockrules
fi;
if [ -f $newrules ]; then
rm $newrules
fi;
if [ -f $userules ]; then
rm $userules
fi
