;;; -*- Mode: tdl; Coding: utf-8; -*-
;;;
;;;  Copyright (c) 1994-2013
;;;    Dan Flickinger, Rob Malouf, Emily M. Bender
;;;    see LICENSE for conditions
;;;
;;;  lexrinst.tdl
;;;
;;;  Instances of lexical rules defined in lexrules.tdl
;;;
;;;  Created: Ann Copestake, 30-Sept-97
;;;
;;;  $Id: lexrinst.tdl 7043 2009-09-03 18:26:55Z oe $

#|
v_aux-sb-inv_dlr := sai &
  [ RNAME lsai ].

v_cond-inv_dlr := cond_sai &
  [ RNAME csai ].
|#

v_aux-advadd_dlr := adv_addition &
  [ RNAME ladv ].

v_aux-neg-ell_dlr := adv_add_neg_ellipt &
  [ RNAME lnav ].

v_aux-ell-ref_dlr := vp_ellipsis_ref &
  [ RNAME lver ].

v_aux-ell-xpl_dlr := vp_ellipsis_expl &
  [ RNAME lvex ].

#|
v_nger-intr_dlr := intrans_nominal_gerund &
  [ RNAME lngi ].

v_nger-pp_dlr := intrans_pp_nominal_gerund &
  [ RNAME lngp ].

v_nger-tr_dlr := trans_nominal_gerund &
  [ RNAME lngt ].

n_det-mnth_dlr := month_det_lr &
  [ RNAME lmd ].

n_det-wkdy_dlr := weekday_det_lr &
  [ RNAME lwd ].
|#

j_att_dlr := attr_adj_lr &
  [ RNAME lja ].

#|
v_j-nb-intr_dlr := attr_verb_part_lr &
  [ RNAME ljv ].

v_j-nb-prp-tr_dlr := attr_verb_part_tr_lr &
  [ RNAME ljvt ].

v_j-nb-pas-tr_dlr := attr_verb_part_psv_lr &
  [ RNAME ljvp ].

v_j-nb-pas-ptcl_dlr := attr_verb_part_ptcl_psv_lr &
  [ RNAME ljvr ].

v_j-nme-intr_dlr := attr_verb_part_intr_namemod_lr &
  [ RNAME ljvn ].

v_j-nme-tr_dlr := attr_verb_part_tr_namemod_lr &
  [ RNAME ljnt ].
|#

det_prt-of-agr_dlr := part_ppof_agr_constr &
  [ RNAME lpca ].

det_prt-of-nagr_dlr := part_ppof_noagr_constr &
  [ RNAME lpcn ].

det_prt-nocmp_dlr := part_nocomp_constr &
  [ RNAME lpn ].

#|
v_np-prtcl_dlr := NP_particle_lr &
  [ RNAME lnpp ].

v_dat_dlr := dative_shift_lr &
  [ RNAME ldat ].

j_n-minut_dlr := minute_prep_lr &
  [ RNAME lmin ].

v_aux-tag_dlr := tag &
  [ RNAME ltag ].

j_enough_dlr := enough_addition_nocomps &
  [ RNAME leno ].

j_enough-wc_dlr := enough_addition_wcomp &
  [ RNAME lenc ].

j_tough_dlr := tough_adj_lr &
  [ RNAME ltgh ].

n_bipart_dlr := bipart_lr &
  [ RNAME lbpt ].

w_italics_dlr := foreign_lr &
  [ RNAME lfw ].

v_inv-quot_dlr := inverted_quote_lr &
  [ RNAME linq ].
|#

n_n-ed_odlr := 
%suffix (* ed) (!ty !tied) (e ed) (!t!v!c !t!v!c!ced) 
noun_adj_lr &
  [ ND-AFF +,
    RNAME lnj ].

j_n-pre_odlr := 
%prefix (* pre) (* pre-) 
pre_noun_adj_lr &
  [ ND-AFF +,
    RNAME ljnp ].

v_v-re_dlr := 
%prefix (* re) (* re-) 
verb_prefix_rule &
 [ ND-AFF +,
   RNAME lre,
   SYNSEM.PHON.ONSET con,
   C-CONT.RELS <! [ PRED "_re-_a_again_rel" ] !> ].

v_v-pre_dlr := 
%prefix (* pre) (* pre-) 
verb_prefix_rule &
 [ ND-AFF +,
   RNAME lpre,
   SYNSEM.PHON.ONSET con,
   C-CONT.RELS <! [ PRED "_pre-_a_ante_rel" ] !> ].

v_v-mis_dlr := 
%prefix (* mis) (* mis-) 
verb_prefix_rule &
 [ ND-AFF +,
   RNAME lmis,
   SYNSEM.PHON.ONSET con,
   C-CONT.RELS <! [ PRED "_mis-_a_error_rel" ] !> ].

;;;
;;; _fix_me_
;;; to make this rule functional, token mapping would have to not separate off
;;; |co-| (in `derivational_prefix_tmr').  however, doing that would then mean
;;; that either (a) we provide a prefixation rule for other parts of speech too
;;; (`co-author', maybe `co-educational') or minimally adjust existing lexical
;;; entries (currently MWEs); or (b) that we create a token-level ambiguity; i
;;; hesitate doing the latter.  but maybe it would not be so bad, in the end?
;;; the same problem applies to other derivational rules, of course.
;;;                                                             (13-mar-09; oe)
v_v-co_dlr := 
%prefix (* co-) 
verb_prefix_rule &
 [ ND-AFF +,
   RNAME lco,
   SYNSEM.PHON.ONSET con,
   C-CONT.RELS <! [ PRED "_co-_a_with_rel" ] !> ].

v_v-un_dlr := 
%prefix (* un) (* un-) 
verb_prefix_rule &
 [ ND-AFF +,
   RNAME lunv,
   SYNSEM.PHON.ONSET voc,
   C-CONT.RELS <! [ PRED "_un-_a_rvrs_rel" ] !> ].

v_v-counter_dlr := 
%prefix (* counter) (* counter-) 
verb_prefix_rule &
 [ ND-AFF +,
   RNAME lctv,
   SYNSEM.PHON.ONSET con,
   C-CONT.RELS <! [ PRED "_counter-_a_anti_rel" ] !> ].
