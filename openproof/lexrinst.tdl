;;; -*- Mode: tdl; Coding: utf-8; -*-
;;;
;;;  Copyright (c) 1994-2013
;;;    Dan Flickinger, Rob Malouf, Emily M. Bender
;;;    see LICENSE for conditions
;;;
;;;  lexrinst.tdl
;;;
;;;  Instances of lexical rules defined in lexrules.tdl
;;;
;;;  Created: Ann Copestake, 30-Sept-97
;;;
;;;  $Id: lexrinst.tdl 7043 2009-09-03 18:26:55Z oe $

#|
v_aux-sb-inv_dlr := sai &
  [ RNAME lsai ].

v_cond-inv_dlr := cond_sai &
  [ RNAME csai ].
|#

v_aux-advadd_dlr := adv_addition &
  [ RNAME ladv ].

v_aux-neg-ell_dlr := adv_add_neg_ellipt &
  [ RNAME lnav ].

v_aux-ell-ref_dlr := vp_ellipsis_ref &
  [ RNAME lver ].

v_aux-ell-xpl_dlr := vp_ellipsis_expl &
  [ RNAME lvex ].

j_att_dlr := attr_adj_lexrule &
  [ RNAME lja ].

det_prt-of-agr_dlr := part_ppof_agr_constr &
  [ RNAME lpca ].

det_prt-of-nagr_dlr := part_ppof_noagr_constr &
  [ RNAME lpcn ].

det_prt-nocmp_dlr := part_nocomp_constr &
  [ RNAME lpn ].

j_n-pre_odlr := 
%prefix (* pre) (* pre-) 
pre_noun_adj_lexrule &
  [ ND-AFF +,
    RNAME ljnp ].

v_v-re_dlr :=
%prefix (* re) (* re-) 
"""
Verb with *re-* prefix           
<ex>He re-tied his shoe.       
"""
v_v-re_rule &
 [ RNAME lre ].

v_v-pre_dlr :=
%prefix (* pre) (* pre-) 
"""
Verb with *pre-* prefix          
<ex>He pre-signed the check.   
"""
v_v-pre_rule &
 [ RNAME lpre ].

v_v-mis_dlr :=
%prefix (* mis) (* mis-) 
"""
Verb with *mis-* prefix          
<ex>He mis-tied his shoe.      
"""
v_v-mis_rule &
 [ RNAME lmis ].

;;;
;;; _fix_me_
;;; to make this rule functional, token mapping would have to not separate off
;;; *co-* (in `derivational_prefix_tmr').  however, doing that would then mean
;;; that either (a) we provide a prefixation rule for other parts of speech too
;;; (`co-author', maybe `co-educational') or minimally adjust existing lexical
;;; entries (currently MWEs); or (b) that we create a token-level ambiguity; i
;;; hesitate doing the latter.  but maybe it would not be so bad, in the end?
;;; the same problem applies to other derivational rules, of course.
;;;                                                             (13-mar-09; oe)

v_v-co_dlr :=
%prefix (* co-) (* co)
"""
Verb with *co-* prefix           
<ex>He co-wrote the paper.     
"""
v_v-co_rule &
 [ ND-AFF + ].

v_v-un_dlr :=
%prefix (* un) (* un-) 
"""
Verb with *un-* prefix           
<ex>He untied his shoe.
"""
v_v-un_rule &
 [ RNAME lunv ].

v_v-counter_dlr :=
%prefix (* counter) (* counter-) 
"""
Verb with *counter-* prefix           
<ex>He counter-signed the bill.
"""
v_v-counter_rule &
 [ RNAME lctv ] .

v_v-over_dlr :=
%prefix (* over) (* over-) 
"""
Verb with *over-* prefix           
<ex>He over-built the porch.
"""
v_v-over_rule &
 [ RNAME lovtv ].

v_v-out_dlr :=
%prefix (* out) (* out-) 
"""
Verb with *out-* prefix           
<ex>He out-played his opponent.
"""
v_v-out_rule &
 [ RNAME lotv ].

v_v-self_dlr :=
%prefix (* self) (* self-) 
"""
Verb with *self-* prefix           
<ex>He was self-insured.
"""
v_v-self_rule &
 [ RNAME lsfv ].

v_v-cross_dlr :=
%prefix (* cross) (* cross-) 
"""
Verb with *cross-* prefix           
<ex>He cross-examined the witness.
"""
v_v-cross_rule &
 [ RNAME lcsv ].


v_v-under_dlr :=
%prefix (* under) (* under-) 
"""
Verb with *under-* prefix           
<ex>The area is under-developed
"""
v_v-under_rule &
 [ RNAME luvtv ].

n_n-co_dlr :=
%prefix (* co) (* co-)
"""
Noun with *co-* prefix           
<ex>Our co-teacher arrived.
"""
n_n-co_rule &
 [ RNAME lnco ].

n_n-co-ni_dlr :=
%prefix (* co) (* co-)
"""
Noun with *co-* prefix, non-inflecting
<ex>Our co-derivatives group arrived.
"""
n_n-co-ni_rule &
 [ RNAME lncon ].

n_n-counter_dlr :=
%prefix (* counter) (* counter-) 
"""
Noun with *counter-* prefix           
<ex>The counter-proposal arrived.
"""
n_n-counter_rule &
 [ RNAME lctn ].

n_n-counter-ni_dlr :=
%prefix (* counter) (* counter-) 
"""
Noun with *counter-* prefix, non-inflecting
<ex>The counter-narcotics team arrived.
"""
n_n-counter-ni_rule &
 [ RNAME lctnn ].

n_n-mini_dlr :=
%prefix (* mini) (* mini-) 
"""
Noun with *mini-* prefix           
<ex>The mini-car arrived.
"""
n_n-mini_rule &
 [ RNAME lctn ].

n_n-mini-ni_dlr :=
%prefix (* mini) (* mini-) 
"""
Noun with *mini-* prefix, non-inflecting
<ex>The mini-car transporter arrived.
"""
n_n-mini-ni_rule &
 [ RNAME lctnn ].

j_j-co_dlr :=
%prefix (* co-) (* co) 
"""
Adjective with *co-* prefix           
<ex>The co-educational hall opened.
"""
j_j-co_rule &
 [ RNAME ljco ].

j_j-un_dlr :=
%prefix  (* un-) (* un)
"""
Adjective with *un-* prefix           
<ex>The unhappy cat arose.
"""
j_j-un_rule &
 [ RNAME lunj ].

j_j-non_dlr :=
%prefix  (* non)
"""
Adjective with *non* prefix           
<ex>The nonlinear solution failed.
"""
j_j-non_rule &
 [ RNAME lnnj ].

j_j-over_dlr :=
%prefix (* over-) (* over) 
"""
Adjective with *over-* prefix           
<ex>The over-optimistic player arrived.
"""
j_j-over_rule &
 [ RNAME ljco ].

w_period_plr :=
%suffix (!. !..)
punctuation_period_rule &
 [ RNAME lpp ].

w_comma_plr :=
%suffix (* ,)
punctuation_comma_rule &
 [ RNAME lpcm ].

w_semicol_plr :=
%suffix (!. !.;)
punctuation_semicol_rule &
 [ RNAME lpsc ].
