To do (2015-03-13)
(1) Vertical bars in ORTH for letter names
(2) Boolean flag for ambig
(3) Larger set of `rule' names including syntactic variants
(4) Pairing of rule+anchor to show where a (para) rule has applied in a sentence

------------------------------------------------------------------------------
FOL => English paraphrases

To test web server on cypriot, check to see that the server is running
(~/start-op-server) and then open this form in a browser:
/home/danf/openproof/form.html
Enter an FOL expression such as tet(c)&tet(d) in the first box, and the name 
of a rules file in the second, where the filename is "rules.all" or 
"rules.pro": one of the preset rules files in ~/erg/openproof/rules.*".

The python server code is in ~/openproof, with the main file as Server/server.py

;; Test run: Compile a version of the paraphrase grammar, then call Aaron 
;; Kalb's FOL converter to MRS syntax, then inflate, add paraphrased MRSs, 
;; generate, sort uniquely, and package output as XML

;; Note: need ACE version 0919 (later ones don't work)
;; basque:/home/danf/logon/lingo/answer/bin/linux.x86.64/ace.0919
;; cypriot:/home/danf/bin/ace.0919

;; 1. Compile the MRS-inflation, paraphrase, and generator grammars
;;
cd ~/erg
ace.0919 -G openproof/inflatemrs.dat -g openproof/config-inflate.tdl
ace.0919 -G openproof/paraphrase-op.dat -g openproof/config.tdl
ace.0919 -G openproof/ergopen.dat -g ace/config-open.tdl

;; 2. To run single examples interactively, call `runfol' with at least the
;; first two arguments


;; 2a. Run one particular example interactively, using just aggregation rules:
;;
cd ~/erg/openproof; ./runfol -f "small(c)&small(b)" -r rules.agg > /tmp/out7-12.txt; more /tmp/out7-12.txt

;; 2b. Run example, and apply all rules in "rules.*" except those in "no.*"
;; (here, exclude "only if" and "provided (that)" in conditionals):
;; 
cd ~/erg/openproof; ./runfol -f "small(a)-->large(b)" -r rules.all -x no.onlyif+prov > /tmp/out.txt

;; 2c. Run example, and apply all rules in "rules.*" except those in "no.*", 
;; and add those in "req.*" (here, obligatorily omit "then" in conditionals):
cd ~/erg/openproof; ./runfol -f "small(a)-->large(b)" -r rules.all -x no.optthen -a req.dropthen > /tmp/out.txt; more /tmp/out.txt


;; 3. Batch run 7-12 set of fols
;;
cd ~/erg/openproof; for i in $(cat 7-12.txt); do \python scripts/e2e.py $i | ace.0919 -g inflatemrs.dat -f | ace.0919 -g paraphrase-op.dat -f --transfer-config rules.all | ace.0919 -g ergopen.dat -e | sort -u; echo "---ITEM---"; done > /tmp/out7-12.txt
Time: 1:40 on 2014.07.26
      1:27 on 2014.09.09
      1:34 on 2015.03.19

;; 7-12 set with just coordination (aggregation) rules
;;
cd ~/erg/openproof; for i in $(cat 7-12.txt); do \python scripts/e2e.py $i | ace.0919 -g inflatemrs.dat -f | ace.0919 -g paraphrase-op.dat -f --transfer-config rules.agg | ace.0919 -g ergopen.dat -e | sort -u; echo "---ITEM---"; done > /tmp/out7-12c.txt

;; 7-12 set with just pronoun rules
;;
cd ~/erg/openproof; for i in $(cat 7-12.txt); do \python scripts/e2e.py $i | ace.0919 -g inflatemrs.dat -f | ace.0919 -g paraphrase-op.dat -f --transfer-config rules.pro | ace.0919 -g ergopen.dat -e | sort -u; echo "---ITEM---"; done > /tmp/out7-12p.txt

;; Batch run the full set of FOLS used currently in LPP book:
;;
cd ~/erg/openproof; for i in $(cat fols.txt); do \python scripts/e2e.py $i | ace.0919 -g inflatemrs.dat -f | ace.0919 -g paraphrase-op.dat -f --transfer-config rules.all | ace.0919 -g ergopen.dat -e | sort -u; echo "---ITEM---"; done > /tmp/out.txt
Time: 19:45 vs. 19:00 (old)
      19:00 15-02-08
      19:30 15-03-19

;; To evaluate using Aaron's script, do the following
;;
cd ~/erg/openproof
python scripts/corpus_test.py 7-12.txt scripts/712goals.txt out7-12.txt
python scripts/corpus_test.py fols.txt scripts/goals.txt out.txt


