coord_subj_compar_op_gpr := coord_subj_twoarg_op_gpr &
[ CONTEXT.RELS <! [ ], [ ], [ ARG0 #x7 ] !>,
  INPUT.RELS <! [ LBL #h1 ],
                [ ARG0 #e5 & event ], [ ],
		[ ARG0 #x8 ], [ ], 
		[ PRED comp_rel, ARG1 #e5, ARG2 #x8 ], 
		[ PRED comp_rel, LBL handle & #h1, ARG0 #e1, ARG2 #x7 ] !>,
  OUTPUT.RELS <! [ LBL #h2, ARG0 #e2 ], [ ], [ ],
 		 [ PRED comp_rel, LBL #h2, ARG0 #e1, ARG1 #e2, ARG2 #x7 ] !> ].

coord_subj_three_op_gpr := coord_subj_threearg_op_gpr.

coord_subj_two_neg_op_gpr := coord_subj_twoarg_neg_op_gpr.

coord_subj_two_pos_op_gpr := coord_subj_twoarg_op_gpr &
[ CONTEXT.RELS <! [ ], [ ], [ ARG0 #x1 ] !>,
  INPUT.RELS <! [ ARG2 #x1 ], [ ARG2 #x2 ], [ LBL #h2 ], [ ARG0 #x2 ], [ ] !>,
  OUTPUT.RELS <! [ LBL #h2, ARG2 #x1 ], [ ], [ ] !> ].

coord_subj_two_noprop_neg_op_gpr := coord_subj_twoarg_noprop_neg_op_gpr.

coord_subj_two_noprop_op_gpr := coord_subj_twoarg_noprop_pos_op_gpr.

coord_subj_one_neg_op_gpr := coord_subj_onearg_neg_op_gpr.

coord_subj_one_pos_op_gpr := coord_subj_onearg_pos_op_gpr.

coord_vp_two_op_gpr := coord_vp_twoarg_op_gpr.

coord_vp_one_op_gpr := coord_vp_onearg_op_gpr.

coord_pred_c_op_gpr := coord_pred_comp_op_gpr.

common_dobj_op_gpr := shared_dobj_op_gpr.

;; "B is larger than C or D"
common_vp_comp_op_gpr := shared_vp_comp_op_gpr.

;; "B is in the same column as C or D"
common_vp_same_n_op_gpr := shared_vp_same_n_op_gpr.

;; "B is to the right of C or D"
common_vp_dir_op_gpr := shared_vp_dir_op_gpr.

;; "to the right or to the left of D"
common_ppof_op_gpr := shared_ppof_op_gpr.

;; "to the right or left of D"
common_to_the_op_gpr := shared_to_the_op_gpr.

;; "B is a cube or a tetrahedron"
common_pred_op_gpr := shared_pred_op_gpr.

;; "B is small; moreover, B is a cube"
semicol_and_op_gpr := coord_sent_semi_op_gpr &
[ INPUT.RELS <! [ PRED _and_c_rel ] !>,
  OUTPUT.RELS <! [ ], [ PRED "_moreover_a_1_rel" ] !> ].

;; "B is small; however, C is large"
semicol_but_op_gpr := coord_sent_semi_op_gpr &
[ INPUT.RELS <! [ PRED _but_c_rel ] !>,
  OUTPUT.RELS <! [ ], [ PRED "_however_a_1_rel" ] !> ].

ifthen_to_onlyif_gpr := if_then_to_only_if_gpr.

ifnot_to_unless_gpr := if_not_to_unless_gpr.

iff_to_justincase_gpr := iff_to_just_in_case_gpr.

;; "B is small, and it is a cube"
conj_pro_subj_gpr := pro_subj_gpr &
[ CONTEXT.RELS <! [ ARG0 #e1 ], [ ARG0 #e2 ], [ ],
		  [ PRED conj_rel, L-INDEX #e1, R-INDEX #e2 ] !> ].

;; "If B is a cube, it is small"
cond_pro_subj_gpr := cond_s_pro_subj_gpr.

;; "B is small only if it is a cube"
onlyif_pro_subj_gpr := onlyif_s_pro_subj_gpr.

iff_pro_subj_gpr := bicond_s_pro_subj_gpr.

;; B is a large cube
adj_predn_gpr := adj_and_predn_gpr.
predn_adj_gpr := predn_and_adj_gpr.

;; It is not the case that ...
notthecase_op_gpr := not_the_case_op_gpr.

;; If B is large, then C is
vp_ellip_if_pos_one_gpr := vp_ellipsis_if_pos_onearg_gpr.

;; If B is large, then C isn't
vp_ellip_if_neg_one_gpr := vp_ellipsis_if_neg_onearg_gpr.

;; If B is a cube, then C is
vp_ellip_if_pos_two_gpr := vp_ellipsis_if_pos_twoarg_gpr.

;; If B is a cube, then C isn't
vp_ellip_if_neg_two_gpr := vp_ellipsis_if_neg_twoarg_gpr.
