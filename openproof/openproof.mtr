;; A is between B and C
threearg_prep_op_gpr := openproof_threearg_conj_mtr &
[ INPUT.RELS <! [ PRED named_rel, LBL handle & #h1, ARG0 ref-ind & #x2 &
	                                           [ PNG.GEN masc ] ],
                [ PRED named_rel, LBL handle & #h2, ARG0 ref-ind & #x4 &
	                                           [ PNG.GEN masc ] ],
                [ PRED named_rel, LBL handle & #h3, ARG0 ref-ind & #x6 &
	                                           [ PNG.GEN masc ] ],
		[ PRED _and_c_rel, LBL handle & #h4, ARG0 #x8 ],
                [ PRED _between_p_rel, ARG0 #e10, ARG1 #x2, ARG2 #x8 ] !>, 
  OUTPUT [ RELS <! +copy+ & [ LBL handle & #h1, ARG0 [ PNG.GEN neut ] ],
                   +copy+ & [ LBL handle & #h2, ARG0 [ PNG.GEN neut ] ],
                   +copy+ & [ LBL handle & #h3, ARG0 [ PNG.GEN neut ] ],
		   +copy+ & [ LBL handle & #h4 ],
		   +copy+ & [ LBL handle ],
		[ PRED proper_q_rel, LBL handle ],
		[ PRED proper_q_rel, LBL handle ],
		[ PRED proper_q_rel, LBL handle ],
		[ PRED udef_q_rel, LBL handle, ARG0 #x8 ] !> ],
  FLAGS.EQUAL < #x2, #x4, #x6, #e10 > ].

;; A is to the right of B
twoarg_pnp_op_gpr := openproof_twoarg_mtr &
[ CONTEXT.RELS <! [ PRED "~._n_", LBL handle & #h4, ARG0 #x5 & ref-ind ],
                  [ LBL #h4, ARG2 #x4 & ref-ind ] !>,
  INPUT.RELS <! [ PRED named_rel, LBL handle & #h1, ARG0 ref-ind & #x2 &
	                                           [ PNG.GEN masc ] ],
                [ PRED named_rel, LBL handle & #h2, ARG0 ref-ind & #x4 &
	                                           [ PNG.GEN masc ] ],
                [ LBL handle & #h3, ARG0 #e10, ARG1 #x2, ARG2 #x5 ] !>, 
  OUTPUT [ RELS <! +copy+ & [ LBL #h1, ARG0 [ PNG.GEN neut ] ],
                   +copy+ & [ LBL #h2, ARG0 [ PNG.GEN neut ] ],
		   +copy+ & [ LBL #h3, ARG2.PNG.PN 3s ],
		   [ PRED proper_q_rel, LBL handle ],
		   [ PRED proper_q_rel, LBL handle ],
		   [ PRED _the_q_rel, LBL handle, ARG0 #x5 ] !> ],
  FLAGS.EQUAL < #x2, #x4, #e10 > ].

;; A is in back of B
twoarg_pp_op_gpr := openproof_twoarg_mtr &
[ INPUT.RELS <! [ PRED named_rel, LBL handle & #h1, ARG0 ref-ind & #x2 &
	                                           [ PNG.GEN masc ] ],
                [ PRED named_rel, LBL handle & #h2, ARG0 ref-ind & #x4 & 
	                                           [ PNG.GEN masc ] ],
                [ PRED "~._p_", ARG0 #e10, ARG1 #x2, ARG2 #x4 ] !>, 
  OUTPUT [ RELS <! +copy+ & [ LBL #h1, ARG0.PNG.GEN neut ],
                   +copy+ & [ LBL #h2, ARG0.PNG.GEN neut ],
		   +copy+ & [ LBL handle ],
		[ PRED proper_q_rel, LBL handle ],
		[ PRED proper_q_rel, LBL handle ] !> ],
  FLAGS.EQUAL < #x2, #x4, #e10 > ].

;; A is larger than B

twoarg_ap_op_gpr := openproof_twoarg_mtr &
[ CONTEXT.RELS <! [ PRED comp_rel, ARG1 #e10, ARG2 #x4 ] !>,
  INPUT.RELS <! [ PRED named_rel, LBL handle & #h1, ARG0 ref-ind & #x2 &
	                                           [ PNG.GEN masc ] ],
                [ PRED named_rel, LBL handle & #h2, ARG0 ref-ind & #x4 & 
	                                           [ PNG.GEN masc ] ],
		[ PRED "~._a_", ARG0 #e10, ARG1 #x2 ] !>, 
  OUTPUT [ RELS <! +copy+ & [ LBL #h1, ARG0.PNG.GEN neut ],
                   +copy+ & [ LBL #h2, ARG0.PNG.GEN neut ],
		   +copy+ & [ LBL handle, ARG0.E.TENSE present ],
		[ PRED proper_q_rel, LBL handle ],
		[ PRED proper_q_rel, LBL handle ] !> ],
  FLAGS.EQUAL < #x2, #x4, #e10 > ].


;; A is large

onearg_op_gpr := openproof_onearg_mtr &
[ INPUT.RELS <! [ PRED named_rel, LBL handle & #h1, ARG0 ref-ind & #x2 &
	                                           [ PNG.GEN masc ] ],
                [ PRED "~._a_", ARG0 #e10, ARG1 #x2 ] !>, 
  OUTPUT [ RELS <! +copy+ & [ LBL #h1, ARG0 [ PNG.GEN neut ] ],
		   +copy+ & [ LBL handle ],
		[ PRED proper_q_rel, LBL handle ] !> ],
  FLAGS.EQUAL < #x2, #e10 > ].

;; A is a cube
noun_pred_op_gpr := openproof_predn_mtr &
[ INPUT.RELS <! [ PRED "~._n_", LBL handle & #h1, ARG0 ref-ind & #x2 ],
                [ PRED named_rel, LBL handle & #h2, ARG0 ref-ind & #x4 & 
	                                           [ PNG.GEN masc ] ],
		[ PRED _be_v_id_rel, LBL handle, ARG0 #e10, 
		  ARG1 #x4, ARG2 #x2 ] !>, 
  OUTPUT [ HOOK.INDEX #e10,
           RELS <! +copy+ & [ LBL #h1, ARG0 #x2 & [ PNG.PN 3s ] ],
                   +copy+ & [ LBL #h2, ARG0 #x4 & [ PNG [ PN 3s, GEN neut ] ] ],
		   +copy+ & [ ARG0 #e10 & event & 
		    [ E [ ASPECT [ PROGR -, PRF - ], TENSE present ], SF prop]],
		   [ PRED _a_q_rel, LBL handle, ARG0 #x2 ],
                   [ PRED proper_q_rel, LBL handle, ARG0 #x4 ] !> ],
  FLAGS.EQUAL < #x2, #x4, #e10 > ].

