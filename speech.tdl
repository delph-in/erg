;;; -*- Mode: tdl; Coding: utf-8; -*-
;;;
;;;  Copyright (c) 1994-2005
;;;    Dan Flickinger, Rob Malouf, Emily M. Bender
;;;    see LICENSE for conditions
;;;
;;;  speech.tdl
;;;
;;;  Top-level load file for PET for the English grammar for speech apps
;;;
;;;  File created: 2-Oct-09 by Dan Flickinger
;;;

:begin :type.

;;
;;  Basic definitions and macros
;;

:include "fundamentals".

;;
;;  Lexical types (i.e., primitive word classes)
;;

:include "lextypes".

;;
;; token mapping: manipulate the token lattice prior to lexical look-up
;;
:include "tmt".
:begin :instance :status token-mapping-rule.
:include "tmr/ptb".
:include "tmr/spelling".
:include "tmr/ne1".
:include "tmr/split".
:include "tmr/ne2".
:include "tmr/class".
:include "tmr/punctuation".
:include "tmr/pos".
:include "tmr/finis".
;;
;; _fix_me_
;; why not run these rules much earlier, say first?             (3-jun-09; oe)
;;
:include "tmr/transcript".
:end :instance.

;;
;; lexical filtering: reduce the chart after lexical instantiation and the
;; application of lexical rules, right before we turn loose syntactic rules.
;;
:begin :instance :status lexical-filtering-rule.
:include "lfr.tdl".
:end :instance.

;;
;;  Syntactic rules
;;

:include "syntax".
:include "speech/syntax-speech".

;;
;;  Lexical rules
;;

:include "lexrules".

:include "auxverbs".

:include "letypes".

:include "speech/types-speech".

:end :type.

;;
;; Lexicon entries (instances of status lex-entry or generic-lex-entry)
;;

:begin :instance :status lex-entry.
:include "lexicon".
:include "speech/lex-speech".
:end :instance.

:begin :instance :status generic-lex-entry.
:include "gle".
:end :instance.

;;
;; grammar rules and lexical rules (instances of status rule)
;;

:begin :instance :status rule.
:include "constructions".
:include "speech/constr-speech".
:end :instance.

:begin :instance :status lex-rule.
:include "lexrinst".
:include "inflr".
:include "inflr-pnct".
:end :instance.

;;
;; parse-tree labels (instances)
;;

:begin :instance.
:include "parse-nodes".
:end :instance.

;;
;; start symbols of the grammar (instances)
;;

:begin :instance.
:include "roots".
:end :instance.



