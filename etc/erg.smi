;;; Hey, emacs(1), this is -*- Mode: TDL; Coding: utf-8; -*- got it?

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; ERG Semantic Interface (SEM-I); Version 1.0 (17-mar-16; oe & danf)
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;
;;; the hierarchy of variable types: these are (pretty) close to universal.
;;;
variables:

  u.
  i < u.
  p < u.
  h < p.
  e < i : SF sf, TENSE tense, MOOD mood, PROG bool, PERF bool.
  x < i & p : PERS pers, NUM number, GEND gender, IND bool, PT pt.


;;;
;;; now for the range of valid variable properties, minimal variable type for
;;; which a property is appropriate, and value constraint(s).
;;;
properties:

  bool.
  + < bool.
  - < bool.

  tense.
  tensed < tense.
  past < tensed.
  pres < tensed.
  fut < tensed.
  untensed < tense.

  mood.
  subjunctive < mood.
  indicative < mood.

  gender.
  m-or-f < gender.
  m < m-or-f.
  f < m-or-f.
  n < gender.

  number.
  sg < number.
  pl < number.

  pers.
  1 < pers.
  2 < pers.
  3 < pers.

  pt.
  refl < pt.
  std < pt.
  zero < pt.
  notpro < pt.

  sf.
  prop-or-ques < sf.
  prop < prop-or-ques.
  ques < prop-or-ques.
  comm < sf.


;;;
;;; a quick summary of the inventory of valid role names and value constraints,
;;; if any (RSTR, for example, will always be handle-valued).  maybe redundant?
;;;
roles:

  ARG0 : i.
  ARG1 : u.
  ARG2 : u.
  ARG3 : u.
  ARG4 : h.
  ARG : u.
  RSTR : h.
  BODY : h.
  CARG : string.

;;;
;;; finally, the main ‘predicates’ section: for each valid semantic predicate,
;;; one or more entries detailing the range of admissible roles, constraints on
;;; role values (in terms of variable types), and additional variable property
;;; restrictions, if any.
;;;
predicates:

  ;;
  ;; a hierarchy of quantifiers, partly drawn from the grammar-internal type
  ;; hierarchy, partly stipulated manually (e.g. adding entries and renaming
  ;; some of the internal types; see ‘patches.lisp’ for details).
  ;;
  ;abstract_q : ARG0 x, BODY h, RSTR h.
  ;existential_q < abstract_q.
  ;universal_q < abstract_q.

  ;;
  ;; an abstraction found convenient in transfer-based MT
  ;; 
  can_able : ARG0 e, ARG1 i, ARG2 p.

  ;;
  ;; to have something to play with: an abstraction over various constructions
  ;; that express an underspecified two-place relation between two instances,
  ;; e.g.  ‘the orchestra performance’, ‘the orchestra's performance’, ‘the
  ;; performance of the orchestra’.  it may of course not always be the case
  ;; that all variants generated from these abstractions are grammatical and
  ;; close paraphrases, and use of ‘nn’ would have to be paired with suitable
  ;; quantifier abstractions, but this seems a potentially useful device for
  ;; providers of generator inputs, nevertheless.  without changes to the
  ;; grammar-internal hierarchy, we should be able to make this work now!
  ;;
  ;; _fix_me_
  ;; in 1214, ‘poss’ is a sub-type to ‘of_p’, and by default both make it into
  ;; the core SEM-I.  when we discussed this bit in an earlier ESD meeting, we
  ;; thought we wanted these two reversed (and deprecate ‘of_p’, which is only
  ;; used in ‘April 16’, and might as well be ‘poss’).  not quite sure what is
  ;; the best thing to do for this release; i believe we could in principle
  ;; use the patching alias to rename (i.e. swap) these two, but i struggle to
  ;; say with confidence whether that should just work for the generator?  as
  ;; i interpret the grammar, ‘of_p’ is actually intended as the generalization
  ;; over real ‘poss’essives and an overt ‘_of_p’.              (16-apr-16; oe)
  ;;
  nn : ARG0 e, ARG1 x, ARG2 x.
  of_p < nn.

  compound < nn.

  ;;
  ;; _fix_me_
  ;; in the older, manually curated predicate hierarchy that dan probably drew
  ;; up in the old LOGON days, we had a handful or so specializations below
  ;; ‘unspec_loc’.  i suspect we used to expose too many distinctions there,
  ;; but i believe at least ‘unspec_loc’ should be there and connect to the
  ;; specializations that actually make it into SEM-I auto-generation, e.g.
  ;; ‘(non)temp_loc_nonsp’.  we will need to work out better criteria for 
  ;; which abstractions to include in the SEM-I.               (21-apr-16; oe)
  ;;
  unspec_loc : ARG0 e, ARG1 i, ARG2 i.
  temp_loc_sp < unspec_loc.

  ;; Add abstraction for comparative degree words including `too' and `enough'
  comp_deg : ARG0 e, ARG1 i, ARG2 u.

;;
;; as of the 1214 release, SEM-I auto-generation now supports projecting part
;; of the grammar-internal type hierarchy as the SEMI-I predicate hierarchy.
;; to avoid unnecessary complexity in the external interface, only a small
;; fraction of the grammar-internal hierarchy is exposed: predicates will be
;; included in the SEM-I if they (a) are stipulated in the manually curated
;; SEM-I (this file); (b) occur in the semantics of what we call a grammar
;; entity (a rule, lexical rule, or lexical entry); or (c) are sub-types in 
;; the grammar to any of the predicates from (a) or (b), but not ‘block’ed.
;; for 1214 at least, a separate (small) set of ‘patches’ is applied in order
;; to rename predicates in the SEM-I; add additional ‘parent’ links between
;; predicates; add parent ‘link’s between grammar-internal types (that do not
;; correspond to externally visible predicates); and (c) block predicates in
;; (transitive) discovery of descendants.
;;
include: hierarchy.smi
include: abstract.smi
include: surface.smi
