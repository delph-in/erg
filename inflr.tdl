%(letter-set (!c bdfglmnprstz))
%(letter-set (!s abcdefghijklmnopqrtuvwxyz05))
%(letter-set (!t bcdfghjklmnpqrstvwxz))
%(letter-set (!v aeiou))

;;; irregular words are stored in a separate file - irregs.tab
;;; because the forms stored there are the values of affix
;;; all the rules here should have the name `affix-type'_infl_rule

plur_noun_infl_rule :=
%suffix (!s !ss) (!ss !ssses) (ss sses) (!ty !ties) (ch ches) (sh shes) (x xes) (z zes)
lex_rule_infl_affixed &
[ ND-AFF +,
  SYNSEM mass_or_count_synsem &
         [ LOCAL plur_noun ] ].

third_sg_fin_verb_infl_rule :=
%suffix (!s !ss) (!ss !ssses) (ss sses) (!ty !ties) (ch ches) (sh shes) (x xes) (z zes)
lex_rule_infl_affixed &
[ ND-AFF +,
  SYNSEM.LOCAL third_sg_fin_verb ].

psp_verb_infl_rule :=
%suffix (* ed) (!ty !tied) (e ed) (!t!v!c !t!v!c!ced) 
lex_rule_infl_affixed &
[ ND-AFF +,
  SYNSEM.LOCAL psp_verb ].

past_verb_infl_rule :=
%suffix (* ed) (!ty !tied) (e ed) (!t!v!c !t!v!c!ced) 
lex_rule_infl_affixed &
[ ND-AFF +,
  SYNSEM.LOCAL past_or_subj_verb ].

;;subjunctive_verb_infl_rule :=
;;%suffix (* ed) (!ty !tied) (e ed) (!t!v!c !t!v!c!ced) 
;;lex_rule_infl_affixed &
;;[ ND-AFF +,
;;  SYNSEM.LOCAL subjunctive_verb ].

prp_verb_infl_rule :=
%suffix (!t!v!c !t!v!c!cing) (* ing) (e ing) (ee eeing) (ie ying)
lex_rule_infl_affixed &
[ ND-AFF +,
  SYNSEM.LOCAL prp_verb ].

bse_verb_infl_rule := lex_rule_infl_affixed &
[ ND-AFF -,
  STEM #stem,
  DTR  [ STEM #stem ],
  SYNSEM.LOCAL bse_verb ].

non_third_sg_fin_verb_infl_rule := lex_rule_infl_affixed &
[ ND-AFF -,
  STEM #stem,
  DTR  [ STEM #stem ],
  SYNSEM.LOCAL non_third_sg_fin_verb ].

sing_noun_infl_rule := lex_rule_infl_affixed &
[ ND-AFF -,
  STEM #stem,
  DTR  [ STEM #stem ],
  SYNSEM count_noun_synsem & [ LOCAL sing_noun ] ].

mass_noun_infl_rule := lex_rule_infl_affixed &
[ ND-AFF -,
  STEM #stem,
  DTR  [ STEM #stem ],
  SYNSEM basic_mass_noun_synsem & [ LOCAL mass_noun ] ].

mass_count_infl_rule := lex_rule_infl_affixed &
[ ND-AFF -,
  STEM #stem,
  DTR  [ STEM #stem ],
  SYNSEM basic_mass_or_count_synsem & [ LOCAL mass_count_noun ] ].

plur_numcomp_noun_infl_rule := lex_rule_infl_affixed &
[ ND-AFF -,
  STEM #stem,
  DTR n_numcomp_le & [ STEM #stem ],
  SYNSEM.LOCAL plur_noun ].

pos_adj_infl_rule := lex_rule_infl_affixed &
[ ND-AFF -,
  STEM #stem,
  DTR  [ STEM #stem ],
  SYNSEM.LOCAL pos_adj ].

passive_infl_rule := 
%suffix (* ed) (!ty !tied) (e ed) (!t!v!c !t!v!c!ced) 
basic_passive_verb_lr &
[ ND-AFF +,
  DTR.SYNSEM trans_subst & 
               [ LOCAL [ CAT.VAL.COMPS [ FIRST [ LOCAL.CONT #objcont,
                                                 --SIND #objind,
                                                 NONLOC #ononloc ],
                                         REST #comps ],
                         CONT.MSG #msg ],
                 LKEYS.KEYREL #keyrel ],
    SYNSEM [ LOCAL [ CAT.VAL [ SUBJ < [ LOCAL.CONT #objcont,
                                        --SIND #objind,
                                        NONLOC #ononloc ] >,
                               COMPS.REST #comps ],
                     CONT [ HOOK [ INDEX.--PSV +,
                                   XARG #objind ],
                            MSG #msg & [ PSV #objind ] ] ],
             LKEYS.KEYREL #keyrel ] ].

; For "it was believed (by many) that Sandy left"
cp_passive_infl_rule := 
%suffix (* ed) (!ty !tied) (e ed) (!t!v!c !t!v!c!ced) 
basic_passive_verb_lr &
  [ ND-AFF +,
    DTR.SYNSEM cp_passivable_verb &
               [ LOCAL.CAT.VAL.COMPS #comps ],
    SYNSEM passive_atrans_synsem &
           [ LOCAL.CAT.VAL.COMPS.REST #comps ] ].

-ly_infl_rule  := lex_rule_infl_affixed &
[ ND-AFF -,
  STEM #stem,
  DTR  [ STEM #stem ],
  SYNSEM.LOCAL -ly ].

;;;
;;; ((equal affix "-S") '("third_sg_fin_verb" "plur_noun"))
;;; ((equal affix "-ED") '("past_verb" "psp_verb" "subjunctive_verb"))
;;; ((equal affix "-ING") '("prp_verb"))
;;; ((equal affix "-ER") '("er_comp_adj"))
;;; ((equal affix "-EST") '("est_super_adj"))
;;; ((equal affix "") '("bse_verb" "non_third_sg_fin_verb" "sing_noun" 
;;;                            "pos_adj"))
;;; (t (list affix))))
;;;
;;; for example - there is a type `-ly' ... Hmm

;possessed_word_lr := 
;%suffix (!s !ss) (!ss !ssses) (ss sses) (!ty !ties) (ch ches) (sh shes) (x xes) (z zes)
;  possessed_word_lexrule &
;  [ INFLECTD +,
;    ROBUST +,
;    ND-AFF +,
;    DTR [ SYNSEM.LOCAL.CAT.HEAD noun,
;          INFLECTD - ] ].
