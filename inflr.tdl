%(letter-set (!c bdfglmnprstz))
%(letter-set (!s abcdefghijklmnopqrtuvwxyz05))
%(letter-set (!t bcdfghjklmnpqrstvwxz))
%(letter-set (!v aeiou))

;;; irregular words are stored in a separate file - irregs.tab
;;; because the forms stored there are the values of affix
;;; all the rules here should have the name `affix-type'_infl_rule

plur_noun_infl_rule :=
%suffix (!s !ss) (!ss !ssses) (ss sses) (!ty !ties) (ch ches) (sh shes) (x xes) (z zes)
lex_rule_infl_affixed &
[ NEEDS-AFFIX +,
  SYNSEM.LOCAL plur_noun ].

third_sg_fin_verb_infl_rule :=
%suffix (!s !ss) (!ss !ssses) (ss sses) (!ty !ties) (ch ches) (sh shes) (x xes) (z zes)
lex_rule_infl_affixed &
[ NEEDS-AFFIX +,
  SYNSEM.LOCAL third_sg_fin_verb ].

psp_verb_infl_rule :=
%suffix (* ed) (!ty !tied) (e ed) (!t!v!c !t!v!c!ced) 
lex_rule_infl_affixed &
[ NEEDS-AFFIX +,
  SYNSEM.LOCAL psp_verb ].

past_verb_infl_rule :=
%suffix (* ed) (!ty !tied) (e ed) (!t!v!c !t!v!c!ced) 
lex_rule_infl_affixed &
[ NEEDS-AFFIX +,
  SYNSEM.LOCAL past_or_subj_verb ].

;;subjunctive_verb_infl_rule :=
;;%suffix (* ed) (!ty !tied) (e ed) (!t!v!c !t!v!c!ced) 
;;lex_rule_infl_affixed &
;;[ NEEDS-AFFIX +,
;;  SYNSEM.LOCAL subjunctive_verb ].

prp_verb_infl_rule :=
%suffix (!t!v!c !t!v!c!cing) (* ing) (e ing) (ee eeing) (ie ying)
lex_rule_infl_affixed &
[ NEEDS-AFFIX +,
  SYNSEM.LOCAL prp_verb ].

bse_verb_infl_rule := lex_rule_infl_affixed &
[ NEEDS-AFFIX -,
  STEM #stem,
  DTR  [ STEM #stem ],
  SYNSEM.LOCAL bse_verb ].

non_third_sg_fin_verb_infl_rule := lex_rule_infl_affixed &
[ NEEDS-AFFIX -,
  STEM #stem,
  DTR  [ STEM #stem ],
  SYNSEM.LOCAL non_third_sg_fin_verb ].

sing_noun_infl_rule := lex_rule_infl_affixed &
[ NEEDS-AFFIX -,
  STEM #stem,
  DTR  [ STEM #stem ],
  SYNSEM.LOCAL sing_noun ].

mass_noun_infl_rule := lex_rule_infl_affixed &
[ NEEDS-AFFIX -,
  STEM #stem,
  DTR  [ STEM #stem ],
  SYNSEM.LOCAL mass_noun ].

mass_count_infl_rule := lex_rule_infl_affixed &
[ NEEDS-AFFIX -,
  STEM #stem,
  DTR  [ STEM #stem ],
  SYNSEM.LOCAL mass_count_noun ].

pos_adj_infl_rule := lex_rule_infl_affixed &
[ NEEDS-AFFIX -,
  STEM #stem,
  DTR  [ STEM #stem ],
  SYNSEM.LOCAL pos_adj ].


;;; Bond:2000-11-01 mv_sorb_pass_le => v_sorb_pass_le
mv_sorb_pass_infl_rule := lex_rule_infl_affixed &
[ NEEDS-AFFIX -,
  STEM #stem,
  SYNSEM.LOCAL verb_participle_affix,
  DTR [ STEM #stem,
	SYNSEM sorbpass_verb & [ LOCAL.CAT.HEAD.VFORM psp_irreg ] ] ].
#|

no-affix_infl_rule := lex_rule_infl_no-affix &
[ NEEDS-AFFIX -,
  STEM #stem,
  DTR  [ STEM #stem ],
  SYNSEM.LOCAL no-affix ].
|#

-ly_infl_rule  := lex_rule_infl_affixed &
[ NEEDS-AFFIX -,
  STEM #stem,
  DTR  [ STEM #stem ],
  SYNSEM.LOCAL -ly ].

;;;
;;; ((equal affix "-S") '("third_sg_fin_verb" "plur_noun"))
;;; ((equal affix "-ED") '("past_verb" "psp_verb" "subjunctive_verb"))
;;; ((equal affix "-ING") '("prp_verb"))
;;; ((equal affix "-ER") '("er_comp_adj"))
;;; ((equal affix "-EST") '("est_super_adj"))
;;; ((equal affix "") '("bse_verb" "non_third_sg_fin_verb" "sing_noun" 
;;;                            "pos_adj" "no-affix"))
;;; (t (list affix))))
;;;
;;; for example - there is a type `-ly' ... Hmm

;possessed_word_lr := 
;%suffix (!s !ss) (!ss !ssses) (ss sses) (!ty !ties) (ch ches) (sh shes) (x xes) (z zes)
;  possessed_word_lexrule &
;  [ INFLECTED +,
;    ROBUST +,
;    NEEDS-AFFIX +,
;    DTR [ SYNSEM.LOCAL.STEMHEAD countnstem,
;          INFLECTED - ] ].
