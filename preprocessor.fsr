;;; -*- mode: fundamental; coding: iso-8859-1; indent-tabs-mode: t; -*-

;;;
;;; first shot at a finite-state language for preprocessing, normalization, and
;;; tokenization in LKB grammars.  requires LKB version after 1-feb-03.  note
;;; that the syntax is rigid: everything starting in column 2 (i.e. right after
;;; the rule type marker) is used as the match pattern until the first `\t'
;;; (tabulator sign); one or more tabulator sign are considered the separator
;;; between the matching pattern and the replacement, but other whitespace will
;;; be considered part of the patterns.  empty lines or lines with a semicolon
;;; in column 1 (i.e. in place of the rule type marker, this is not Lisp) will
;;; be ignored.
;;;
;;; rules are applied in order and, in the case of substitution rules, each see
;;; the output of the previous iteration.  token-level augmentation rules (the
;;; `+' type, for now) are different in that they add an alternative for the 
;;; token but the original form remains in the input buffer for subsequent rule
;;; applications (i.e. the alternative is _not_ visible to further rules).

;;;
;;; preprocessor rules versioning; auto-maintained upon CVS check-in.
;;; 
@$Date$

;;;
;;; tokenization pattern: after normalization, the string will be broken up at
;;; each occurrence of this pattern; the pattern match itself is deleted.
;;;
:[ \t]+

;;;
;;; string rewrite rules: all matches, over the entire string, are replaced by
;;; the right-hand side; grouping (using `(' and `)') in the pattern) and group
;;; references (`\1' for the first group, et al.) carry over part of the match.
;;;

;;;
;;; pad the full string with traling and leading whitespace; makes matches for
;;; word boundaries a little easier down the road.
!^(.+)$					 \1 

;;;
;;; separate hash sign from right-adjacent number(s)
;;;
!(#|\()([0-9])				\1 \2

;;;
;;; for now, separate all punctuation with whitespace on either side from the
;;; preceding and following word(s).
!([-.?!:;,]) 				 \1 
! ([-.?!:;,])				 \1 

;;;
;;; apostrophes are a bit tricky: generally, we want to separate leading and 
;;; trailing single quotes from adjacent word material, so that they become a
;;; separate token (e.g. |abrams'| --> |abrams '|); the possesive |'s|, on the
;;; other hand, we want to separate but then consider a single token.
;;;
!' 					 ' 
!([^ ])'s 				\1 's 

;;; Contracted auxiliaries:
!([^ ])'ll 				\1 'll 
!([^ ])'d 				\1 'd 
!([^ ])'ve 				\1 've 
!([^ ])'m 				\1 'm 
!([^ ])'re 				\1 're 

;;;
;;; from here on, token-specific rules, i.e. the pattern has to match the full
;;; string of the token (implicit `^' and ~$' anchoring).  three types of rules
;;; for now: (i) substitution (`-'), replacing the token with the right-hand
;;; side match, (ii) augmentation (`+'), adding an alternative spelling for the
;;; token, and ersatzing (`^'), effectively a substitution but recording what
;;; the original string was for later retrieval (to be implementend :-).
;;;
;-teh					the
;-recieved				received
;+its					it's
;+their					there
;+there					their
;+you					your
;+you're					your

^[0-9]{1}				OneDigitErsatz
^[0-9]{2}				TwoDigitErsatz
^[0-9]{3}				ThreeDigitErsatz
^[0-9]{4}				FourDigitErsatz
^[0-9]{5}				FiveDigitErsatz
^[0-9]{6}				SixDigitErsatz
^[0-9]{7}				SevenDigitErsatz
^[0-9]{8}				EightDigitErsatz
^[0-9]{9}				NineDigitErsatz
^[0-9]{10}				TenDigitErsatz
^[0-9]{11}				ElevenDigitErsatz
^[0-9]{12}				TwelveDigitErsatz
^[0-9]{13,}				ThirteenPlusDigitErsatz
