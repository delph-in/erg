does1_pos_rule1 := generator_rule &
 [ LCONDITION  [ RELS <! [ PRED neg_rel ] !> ],
   OUTPUT "does1_pos" ].

does1_pos_rule2 := generator_rule &
 [ LCONDITION  [ RELS <! [ PRED int_m_rel ] !> ],
   OUTPUT "does1_pos" ].

does1_pos_rule3 := generator_rule &
 [ LCONDITION  [ RELS <! [ PRED ellipsis_rel,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE present,
			                      ASPECT no_aspect ] ] ] !> ],
   OUTPUT "does1_pos" ].

does1_pos_rule4 := generator_rule &
 [ LCONDITION  [ RELS <! [ PRED ne_m_rel ],
                         [ PRED neg_rel ] !> ],
   OUTPUT "does1_pos" ].

did1_pos_rule1 := generator_rule &
 [ LCONDITION  [ RELS <! [ PRED neg_rel ] !> ],
   OUTPUT "did1_pos" ].

did1_pos_rule2 := generator_rule &
 [ LCONDITION  [ RELS <! [ PRED int_m_rel ] !> ],
   OUTPUT "did1_pos" ].

did1_pos_rule3 := generator_rule &
 [ LCONDITION  [ RELS <! [ PRED ellipsis_rel,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE past,
	                                      ASPECT no_aspect ] ] ] !> ],
   OUTPUT "did1_pos" ].

did1_pos_rule4 := generator_rule &
 [ LCONDITION  [ RELS <! [ PRED ne_m_rel ],
                         [ PRED neg_rel ] !> ],
   OUTPUT "did1_pos" ].

do1_pos_rule1 := generator_rule &
 [ LCONDITION  [ RELS <! [ PRED neg_rel ] !> ],
   OUTPUT "do1_pos" ].

do1_pos_rule2 := generator_rule &
 [ LCONDITION  [ RELS <! [ PRED int_m_rel ] !> ],
   OUTPUT "do1_pos" ].

do1_pos_rule3 := generator_rule &
 [ LCONDITION  [ RELS <! [ PRED ellipsis_rel,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE present,
		                              ASPECT no_aspect ] ] ] !> ],
   OUTPUT "do1_pos" ].

do1_pos_rule4 := generator_rule &
 [ LCONDITION  [ RELS <! [ PRED ne_m_rel ],
                         [ PRED neg_rel ] !> ],
   OUTPUT "do1_pos" ].

do1_neg_rule1 := generator_rule &
 [ LCONDITION  [ RELS <! [ PRED ne_m_rel ] !> ],
   OUTPUT "do1_neg_1" ].

does1_neg_rule1 := generator_rule &
 [ LCONDITION  [ RELS <! [ PRED ne_m_rel ] !> ],
   OUTPUT "does1_neg_1" ].

did1_neg_rule1 := generator_rule &
 [ LCONDITION  [ RELS <! [ PRED ne_m_rel ] !> ],
   OUTPUT "did1_neg_1" ].

has_aux_rule := generator_rule &
 [ LCONDITION  [ RELS <! [ ARG0 event & [ E [ MOOD indicative,
                                              TENSE present,
        		                      ASPECT.PERF + ] ] ] !> ],
   OUTPUT "has_aux" ]. 

; DPF 8-Jul-02 - Removed TENSE real_tense "A could have been hiring B"
have_bse_aux_rule := generator_rule &
 [ LCONDITION  [ RELS <! [ ARG0 event & [ E [ ASPECT.PERF + ] ] ] !> ],
   OUTPUT "have_bse_aux" ]. 

have_bse_aux_cx_1_rule := generator_rule &
 [ LCONDITION  [ RELS <! [ ARG0 event & [ E [ ASPECT.PERF + ] ] ] !> ],
   OUTPUT "have_bse_aux_cx_1" ]. 

have_fin_aux_rule := generator_rule &
 [ LCONDITION  [ RELS <! [ ARG0 event & [ E [ MOOD indicative,
                                              TENSE present,
		                              ASPECT.PERF + ] ] ] !> ],
   OUTPUT "have_fin_aux" ]. 

have_aux_prp_rule := generator_rule &
 [ LCONDITION  [ RELS <! [ PRED gerund_rel ] !> ],
   OUTPUT "have_aux_prp" ].

had_aux_subj_rule := generator_rule &
 [ LCONDITION  [ RELS <! [ ARG0 event & [ E [ MOOD indicative,
                                              TENSE past,
	        		              ASPECT.PERF + ] ] ] !> ],
   OUTPUT "had_aux_subj" ].

had_aux_rule := generator_rule &
 [ LCONDITION  [ RELS <! [ ARG0 event & [ E [ MOOD indicative,
                                              TENSE past,
		                              ASPECT.PERF + ] ] ] !> ],
   OUTPUT "had_aux" ].

has_aux_cx_rule := generator_rule &
 [ LCONDITION  [ RELS <! [ ARG0 event & [ E [ MOOD indicative,
                                              TENSE present,
		                              ASPECT.PERF + ] ] ] !> ],
   OUTPUT "has_aux_cx" ].

has_aux_cx_2_rule := generator_rule &
 [ LCONDITION  [ RELS <! [ ARG0 event & [ E [ MOOD indicative,
                                              TENSE present,
		                              ASPECT.PERF + ] ] ] !> ],
   OUTPUT "has_aux_cx_2" ].

have_fin_aux_cx_rule := generator_rule &
 [ LCONDITION  [ RELS <! [ ARG0 event & [ E [ MOOD indicative,
                                              TENSE present,
	                                      ASPECT.PERF + ] ],
                           ARG1 ref-ind & [ PNG.PN non3sg ] ] !> ],
   OUTPUT "have_fin_aux_cx" ].

have_fin_aux_cx_2_rule := generator_rule &
 [ LCONDITION  [ RELS <! [ ARG0 event & [ E [ MOOD indicative,
                                              TENSE present,
		                              ASPECT.PERF + ] ],
                           ARG1 ref-ind & [ PNG.PN non3sg ] ] !> ],
   OUTPUT "have_fin_aux_cx_2" ].

had_aux_cx_rule := generator_rule &
 [ LCONDITION  [ RELS <! [ ARG0 event & [ E [ MOOD indicative,
                                              TENSE past,
		                              ASPECT.PERF + ] ] ] !> ],
   OUTPUT "had_aux_cx" ]. 

had_aux_cx_2_rule := generator_rule &
 [ LCONDITION  [ RELS <! [ ARG0 event & [ E [ MOOD indicative,
                                              TENSE past,
		                              ASPECT.PERF + ] ] ] !> ],
   OUTPUT "had_aux_cx_2" ]. 

it_rule := generator_rule &
 [ LCONDITION  [ RELS <! [ ARG0 event ] !> ],
   OUTPUT "it" ].

#|
both_conj_rule := generator_rule &
 [ LCONDITION  [ RELS <! [ PRED _and_c_rel ] !> ],
   OUTPUT "both_conj" ]. 

either_conj_rule := generator_rule &
 [ LCONDITION  [ RELS <! [ PRED _or_c_rel ] !> ],
   OUTPUT "either_conj" ].

neither_conj_rule := generator_rule &
 [ LCONDITION  [ RELS <! [ PRED _nor_c_rel ] !> ],
   OUTPUT "neither_conj" ].
|#

;; Removed [ TENSE no_tense ]
;; DPF 4-Jul-02 - Put [ TENSE no_tense ] back to avoid introducing "to" for
;; simple "Abrams works"
;; DPF 1-Jul-03 - But [ ASPECT no_aspect ] blocks Kim believes Browne to have 
;; barked", so drop it.

to_c_nonprop_rule := generator_rule &
 [ LCONDITION  [ RELS <! [ ARG0 event & [ E.TENSE no_tense ] ] !> ],
   OUTPUT "to_c_nonprop" ].

there_expl_rule := generator_rule &
 [ LCONDITION  [ RELS <! [ PRED _be_v_there_rel ] !> ],
   OUTPUT "there_expl" ].

will_aux_rule := generator_rule &
 [ LCONDITION  [ RELS <! [ ARG0 event & [ E [ MOOD ind_or_mod_subj,
                                              TENSE future ] ] ] !> ],
   OUTPUT "will_aux_pos" ].

will_aux_cx_rule := generator_rule &
 [ LCONDITION  [ RELS <! [ ARG0 event & [ E [ MOOD ind_or_mod_subj,
                                              TENSE future ] ] ] !> ],
   OUTPUT "will_aux_pos_cx" ].

will_aux_cx_2_rule := generator_rule &
 [ LCONDITION  [ RELS <! [ ARG0 event & [ E [ MOOD ind_or_mod_subj,
                                              TENSE future ] ] ] !> ],
   OUTPUT "will_aux_pos_cx_2" ].

would_aux_rule := generator_rule &
 [ LCONDITION  [ RELS <! [ ARG0 event & [ E [ MOOD modal_subj,
                                              TENSE future ] ] ] !> ],
   OUTPUT "would_aux_pos" ].

would_aux_cx_rule := generator_rule &
 [ LCONDITION  [ RELS <! [ ARG0 event & [ E [ MOOD ind_or_mod_subj,
                                              TENSE future ] ] ] !> ],
   OUTPUT "would_aux_pos_cx" ].

would_aux_cx_2_rule := generator_rule &
 [ LCONDITION  [ RELS <! [ ARG0 event & [ E [ MOOD ind_or_mod_subj,
                                              TENSE future ] ] ] !> ],
   OUTPUT "would_aux_pos_cx_2" ].

#|
would_like_aux_rule := generator_rule &
 [ LCONDITION  [ RELS <! [ ARG0 event & [ E [ MOOD ind_or_mod_subj,
                                              TENSE future ] ] ] !> ],
   OUTPUT "would_like_aux_pos" ].

would_like_aux_cx_rule := generator_rule &
 [ LCONDITION  [ RELS <! [ ARG0 event & [ E [ MOOD ind_or_mod_subj,
                                              TENSE future ] ] ] !> ],
   OUTPUT "would_like_aux_pos_cx" ].
|#

shall_aux_rule := generator_rule &
 [ LCONDITION  [ RELS <! [ ARG0 event & [ E [ MOOD ind_or_mod_subj,
                                              TENSE future ] ] ] !> ],
   OUTPUT "shall_aux_pos" ].

be_c_is_rule := generator_rule &
 [ LCONDITION  [ RELS <! [ ARG0 event & [ E [ MOOD indicative,
                                              TENSE present,
        	                              ASPECT.PROGR + ] ] ] !> ],
   OUTPUT "be_c_is" ].

be_c_is_cx_rule := generator_rule &
 [ LCONDITION  [ RELS <! [ ARG0 event & [ E [ MOOD indicative,
                                      TENSE present,
		                      ASPECT.PROGR + ] ] ] !> ],
   OUTPUT "be_c_is_cx" ].

be_c_are_rule := generator_rule &
 [ LCONDITION  [ RELS <! [ ARG0 event & [ E [ MOOD indicative,
                                      TENSE present,
	                              ASPECT.PROGR + ] ],
                           ARG1 ref-ind & [ PNG.PN non3sg ] ] !> ],
   OUTPUT "be_c_are" ].

be_c_are_cx_rule := generator_rule &
 [ LCONDITION  [ RELS <! [ ARG0 event & [ E [ MOOD indicative,
                                      TENSE present,
		                      ASPECT.PROGR + ] ],
                           ARG1 ref-ind & [ PNG.PN non3sg ] ] !> ],
   OUTPUT "be_c_are_cx" ].

be_c_am_rule := generator_rule &
 [ LCONDITION  [ RELS <! [ ARG0 event & [ E [ MOOD indicative,
                                      TENSE present,
		                      ASPECT.PROGR + ] ],
                           ARG1 ref-ind & [ PNG.PN 1sg ] ] !> ],
   OUTPUT "be_c_am" ].

be_c_am_cx_rule := generator_rule &
 [ LCONDITION  [ RELS <! [ ARG0 event & [ E [ MOOD indicative,
                                      TENSE present,
	                              ASPECT.PROGR + ] ],
                           ARG1 ref-ind & [ PNG.PN 1sg ] ] !> ],
   OUTPUT "be_c_am_cx" ].

be_c_am_cx_2_rule := generator_rule &
 [ LCONDITION  [ RELS <! [ ARG0 event & [ E [ MOOD indicative,
                                      TENSE present,
		                      ASPECT.PROGR + ] ],
                           ARG1 ref-ind & [ PNG.PN 1sg ] ] !> ],
   OUTPUT "be_c_am_cx_2" ].

be_c_was_rule := generator_rule &
 [ LCONDITION  [ RELS <! [ ARG0 event & [ E [ MOOD indicative,
                                      TENSE past,
		                      ASPECT.PROGR + ] ] ] !> ],
   OUTPUT "be_c_was" ].

be_c_was_pass_rule := generator_rule &
 [ LCONDITION  [ RELS <! [ ARG0 event & [ E [ MOOD indicative,
                                              TENSE past ] ],
                           ARG1 ref-ind,
                           ARG2 ref-ind & [ PNG.PN 3sg ] ] !> ],
   OUTPUT "be_c_was" ].

be_c_was_subj_rule := generator_rule &
 [ LCONDITION  [ RELS <! [ ARG0 event & [ E [ MOOD subjunctive,
                                      TENSE no_aspect,
		                      ASPECT.PROGR + ] ] ] !> ],
   OUTPUT "be_c_was_subj" ].

be_c_were_rule := generator_rule &
 [ LCONDITION  [ RELS <! [ ARG0 event & [ E [ MOOD indicative,
                                              TENSE past,
	        	                      ASPECT.PROGR + ] ],
                           ARG1 ref-ind & [ PNG.PN non3sg ] ] !> ],
   OUTPUT "be_c_were" ].

be_c_were_rule2 := generator_rule &
 [ LCONDITION  [ RELS <! [ ARG0 event & [ E [ MOOD indicative,
                                              TENSE past,
	        	                      ASPECT.PROGR + ] ],
                           ARG2 ref-ind & [ PNG.PN non3sg ] ] !> ],
   OUTPUT "be_c_were" ].

be_c_were_subj_rule := generator_rule &
 [ LCONDITION  [ RELS <! [ ARG0 event & [ E [ MOOD subjunctive,
                                      TENSE real_tense,
	                              ASPECT.PROGR + ] ] ] !> ],
   OUTPUT "be_c_were_subj" ].

; DPF 8-Jul-02 - Removed TENSE real_tense "A could have been hiring B"
be_c_been_rule := generator_rule &
 [ LCONDITION  [ RELS <! [ ARG0 event & [ E [ MOOD indicative,
        		                      ASPECT.PERF + ] ] ] !> ],
   OUTPUT "be_c_been" ].

be_c_being_rule := generator_rule &
 [ LCONDITION  [ RELS <! [ ARG0 event & [ E [ MOOD indicative,
                                              TENSE real_tense,
	        	                      ASPECT.PROGR + ] ] ] !> ],
   OUTPUT "be_c_being" ].

be_c_be_rule := generator_rule &
 [ LCONDITION  [ RELS <! [ ARG0 event & [ E [ MOOD indicative,
        	                              ASPECT.PERF - ] ] ] !> ],
   OUTPUT "be_c_be" ].

who_rel_rule := generator_rule &
 [ LCONDITION  [ RELS <! [ LBL #hand,
                           ARG0 ref-ind ],
                         [ LBL #hand,
                           PRED prpstn_m_rel ] !> ],
   OUTPUT "who2" ].

whom_rel_rule := generator_rule &
 [ LCONDITION  [ RELS <! [ LBL #hand,
                           ARG0 ref-ind ],
                         [ LBL #hand,
                           PRED prpstn_m_rel ] !> ],
   OUTPUT "whom2" ].

which_rel_rule := generator_rule &
 [ LCONDITION  [ RELS <! [ LBL #hand,
                           ARG0 ref-ind ],
                         [ LBL #hand,
                           PRED prpstn_m_rel ] !> ],
   OUTPUT "which_r" ].

that_rel_rule := generator_rule &
 [ LCONDITION  [ RELS <! [ LBL #hand,
                           ARG0 ref-ind ],
                         [ LBL #hand,
                           PRED prpstn_m_rel ] !> ],
   OUTPUT "that_r" ].

and_num_rule := generator_rule &
 [ LCONDITION  [ RELS <! [ PRED times_rel ] !> ],
   OUTPUT "and_num" ].

and_fract_rule := generator_rule &
 [ LCONDITION  [ RELS <! [ PRED fraction_rel ] !> ],
   OUTPUT "and_fract" ].

;none_det_rule := generator_rule &
; [ LCONDITION  [ RELS <! [ PRED _no_q_rel ] !> ],
;   OUTPUT "none_pn1" ].

;none_det_2_rule := generator_rule &
; [ LCONDITION  [ RELS <! [ PRED _no_q_rel ] !> ],
;   OUTPUT "none_pn2" ].

; For all of these, make the RELS be <! which_rel !> to generate with them
wh_the_hell_rule := generator_rule &
 [ LCONDITION  [ RELS <! [ PRED never_unify_rel ] !> ],
   OUTPUT "the_hell_wh_adv" ].

wh_the_fuck_rule := generator_rule &
 [ LCONDITION  [ RELS <! [ PRED never_unify_rel ] !> ],
   OUTPUT "the_fuck_wh_adv" ].

wh_the_heck_rule := generator_rule &
 [ LCONDITION  [ RELS <! [ PRED never_unify_rel ] !> ],
   OUTPUT "the_heck_wh_adv" ].

wh_on_earth_rule := generator_rule &
 [ LCONDITION  [ RELS <! [ PRED never_unify_rel ] !> ],
   OUTPUT "on_earth_wh_adv" ].

wh_in_the_world_rule := generator_rule &
 [ LCONDITION  [ RELS <! [ PRED never_unify_rel ] !> ],
   OUTPUT "in_the_world_wh_adv" ].

wh_oh_where_rule := generator_rule &
 [ LCONDITION  [ RELS <! [ PRED never_unify_rel ] !> ],
   OUTPUT "oh_where_wh_adv" ].

wh_exactly_rule := generator_rule &
 [ LCONDITION  [ RELS <! [ PRED never_unify_rel ] !> ],
   OUTPUT "exactly_wh_adv" ].

; These won't be used in generation as long as the never_unify_rel is here
colon_punct_rule := generator_rule &
 [ LCONDITION  [ RELS <! [ PRED never_unify_rel ] !> ],
   OUTPUT "colon_punct_adv1" ].

dash_punct_rule := generator_rule &
 [ LCONDITION  [ RELS <! [ PRED never_unify_rel ] !> ],
   OUTPUT "dash_punct_adv1" ].

adv_disc_umm_rule := generator_rule &
 [ LCONDITION  [ RELS <! [ PRED never_unify_rel ] !> ],
   OUTPUT "umm_root" ].
adv_disc_um_rule := generator_rule &
 [ LCONDITION  [ RELS <! [ PRED never_unify_rel ] !> ],
   OUTPUT "um_disc_adv" ].
adv_disc_umers_rule := generator_rule &
 [ LCONDITION  [ RELS <! [ PRED never_unify_rel ] !> ],
   OUTPUT "um_ersatz" ].
adv_disc_uh_rule := generator_rule &
 [ LCONDITION  [ RELS <! [ PRED never_unify_rel ] !> ],
   OUTPUT "uh_disc_adv" ].
adv_disc_please_rule := generator_rule &
 [ LCONDITION  [ RELS <! [ PRED never_unify_rel ] !> ],
   OUTPUT "please_root" ].
adv_disc_pleaseabb_rule := generator_rule &
 [ LCONDITION  [ RELS <! [ PRED never_unify_rel ] !> ],
   OUTPUT "please_abb_root" ].
adv_disc_imustsay_rule := generator_rule &
 [ LCONDITION  [ RELS <! [ PRED never_unify_rel ] !> ],
   OUTPUT "i_must_say_root" ].
adv_disc_youknow_rule := generator_rule &
 [ LCONDITION  [ RELS <! [ PRED never_unify_rel ] !> ],
   OUTPUT "you_know_disc" ].
adv_disc_lets_say_rule := generator_rule &
 [ LCONDITION  [ RELS <! [ PRED never_unify_rel ] !> ],
   OUTPUT "lets_say_disc" ].
adv_disc_lets_say_2_rule := generator_rule &
 [ LCONDITION  [ RELS <! [ PRED never_unify_rel ] !> ],
   OUTPUT "lets_say_2_disc" ].
adv_disc_lets_say_3_rule := generator_rule &
 [ LCONDITION  [ RELS <! [ PRED never_unify_rel ] !> ],
   OUTPUT "lets_say_3_disc" ].
adv_disc_like_rule := generator_rule &
 [ LCONDITION  [ RELS <! [ PRED never_unify_rel ] !> ],
   OUTPUT "like_disc_adv" ].
adv_I_guess_like_rule := generator_rule &
 [ LCONDITION  [ RELS <! [ PRED never_unify_rel ] !> ],
   OUTPUT "i_guess_disc" ].
punct_semicolon_rule := generator_rule &
 [ LCONDITION  [ RELS <! [ PRED never_unify_rel ] !> ],
   OUTPUT "semicolon_pct" ].
punct_bang_rule := generator_rule &
 [ LCONDITION  [ RELS <! [ PRED never_unify_rel ] !> ],
   OUTPUT "bang_pct" ].
punct_period_rule := generator_rule &
 [ LCONDITION  [ RELS <! [ PRED never_unify_rel ] !> ],
   OUTPUT "period_pct" ].
punct_qmark_rule := generator_rule &
 [ LCONDITION  [ RELS <! [ PRED never_unify_rel ] !> ],
   OUTPUT "qmark_pct" ].

by_p_pass_rule := generator_rule &
 [ LCONDITION  [ RELS <! [ ARG0 event & [ E.TENSE real_tense ],
                           ARG1 ref-ind,
                           ARG2 ref-ind ] !> ],
   OUTPUT "by_pass_p" ].
