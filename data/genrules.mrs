does1_pos_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           PRED neg_rel ],
                         [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE present,
			                      ASPECT no_aspect ] ] ] !> ],
   OUTPUT "does1_pos" ].

does1_pos_rule2 := generator_rule &
 [ CONTEXT [ HOOK.LTOP handle & #ltop,
             RELS <! [ LBL #ltop,
                       PRED int_m_rel ],
                         [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE present,
			                      ASPECT no_aspect ] ] ] !> ],
   OUTPUT "does1_pos" ].

does1_pos_rule3 := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           PRED ellipsis_rel,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE present,
			                      ASPECT no_aspect ] ] ] !> ],
   OUTPUT "does1_pos" ].

does1_pos_rule4 := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           PRED ne_m_rel ],
                         [ LBL handle,
                           PRED neg_rel ],
                         [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE present,
			                      ASPECT no_aspect ] ] ] !> ],
   OUTPUT "does1_pos" ].

does1_pos_rule5 := generator_rule &
 [ CONTEXT [ HOOK.LTOP handle & #ltop,
             RELS <! [ LBL #ltop,
                       PRED conj_rel ],
                     [ LBL handle,
                       PRED int_m_rel ],
                     [ LBL handle,
                       ARG0 event & [ E [ MOOD indicative,
                                          TENSE present,
			                  ASPECT no_aspect ] ] ] !> ],
   OUTPUT "does1_pos" ].

did1_pos_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           PRED neg_rel ],
                         [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE past,
	                                      ASPECT no_aspect ] ] ] !> ],
   OUTPUT "did1_pos" ].

did1_pos_rule2 := generator_rule &
 [ CONTEXT [ HOOK.LTOP handle & #ltop,
             RELS <! [ LBL #ltop,
                       PRED int_m_rel ],
                         [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE past,
	                                      ASPECT no_aspect ] ] ] !> ],
   OUTPUT "did1_pos" ].

did1_pos_rule3 := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           PRED ellipsis_rel,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE past,
	                                      ASPECT no_aspect ] ] ] !> ],
   OUTPUT "did1_pos" ].

did1_pos_rule4 := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           PRED ne_m_rel ],
                         [ LBL handle,
                           PRED neg_rel ],
                         [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE past,
	                                      ASPECT no_aspect ] ] ] !> ],
   OUTPUT "did1_pos" ].

did1_pos_rule5 := generator_rule &
 [ CONTEXT [ HOOK.LTOP handle & #ltop,
             RELS <! [ LBL #ltop,
                       PRED conj_rel ],
                     [ LBL handle,
                       PRED int_m_rel ],
                     [ LBL handle,
                       ARG0 event & [ E [ MOOD indicative,
                                          TENSE past,
	                                  ASPECT no_aspect ] ] ] !> ],
   OUTPUT "did1_pos" ].

does1_neg_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           PRED ne_m_rel ] !> ],
   OUTPUT "does1_neg_1" ].

did1_neg_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           PRED ne_m_rel ] !> ],
   OUTPUT "did1_neg_1" ].

do1_neg_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           PRED ne_m_rel ] !> ],
   OUTPUT "do1_neg_1" ].

will_neg_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           PRED ne_m_rel ],
                     [ LBL handle,
                           ARG0 event & [ E [ MOOD ind_or_mod_subj,
                                              TENSE future ] ] ] !> ],
   OUTPUT "will_aux_neg_1" ].

do1_pos_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           PRED neg_rel ] !> ],
   OUTPUT "do1_pos" ].

do1_pos_rule2 := generator_rule &
 [ CONTEXT [ HOOK.LTOP handle & #ltop,
             RELS <! [ LBL #ltop,
                       PRED int_m_rel ] !> ],
   OUTPUT "do1_pos" ].

do1_pos_rule3 := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           PRED ellipsis_rel,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE present,
		                              ASPECT no_aspect ] ] ] !> ],
   OUTPUT "do1_pos" ].

do1_pos_rule4 := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           PRED ne_m_rel ],
                         [ LBL handle,
                           PRED neg_rel ] !> ],
   OUTPUT "do1_pos" ].

do1_pos_rule5 := generator_rule &
 [ CONTEXT [ HOOK.LTOP handle & #ltop,
             RELS <! [ LBL #ltop,
                       PRED conj_rel ],
                     [ LBL handle,
                       PRED int_m_rel ] !> ],
   OUTPUT "do1_pos" ].

has_aux_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE present,
        		                      ASPECT.PERF + ] ] ] !> ],
   OUTPUT "has_aux" ]. 

; DPF 8-Jul-02 - Removed TENSE real_tense "A could have been hiring B"
have_bse_aux_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ ASPECT.PERF + ] ] ] !> ],
   OUTPUT "have_bse_aux" ]. 

have_bse_aux_cx_1_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ ASPECT.PERF + ] ] ] !> ],
   OUTPUT "have_bse_aux_cx_1" ]. 

have_fin_aux_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE present,
		                              ASPECT.PERF + ] ] ] !> ],
   OUTPUT "have_fin_aux" ]. 

have_aux_prp_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           PRED gerund_rel ] !> ],
   OUTPUT "have_aux_prp" ].

had_aux_subj_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD subjunctive,
                                              TENSE past,
	        		              ASPECT.PERF + ] ] ] !> ],
   OUTPUT "had_aux_subj" ].

had_aux_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE past,
		                              ASPECT.PERF + ] ] ] !> ],
   OUTPUT "had_aux" ].

has_aux_cx_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE present,
		                              ASPECT.PERF + ] ] ] !> ],
   OUTPUT "has_aux_cx" ].

has_aux_cx_2_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE present,
		                              ASPECT.PERF + ] ] ] !> ],
   OUTPUT "has_aux_cx_2" ].

have_fin_aux1_cx_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE present,
	                                      ASPECT.PERF + ] ],
                           ARG1 ref-ind & [ PNG.PN non3sg ] ] !> ],
   OUTPUT "have_fin_aux_cx" ].

have_fin_aux2_cx_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE present,
	                                      ASPECT.PERF + ] ],
                           ARG2 ref-ind & [ PNG.PN non3sg ] ] !> ],
   OUTPUT "have_fin_aux_cx" ].

have_fin_aux3_cx_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE present,
	                                      ASPECT.PERF + ] ],
                           ARG3 ref-ind & [ PNG.PN non3sg ] ] !> ],
   OUTPUT "have_fin_aux_cx" ].

had_aux_cx_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE past,
		                              ASPECT.PERF + ] ] ] !> ],
   OUTPUT "had_aux_cx" ]. 

it_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           PRED "test-expl-type" ] !> ],
   OUTPUT "it" ].

both_conj_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                       PRED _and_c_both_rel ] !> ],
   OUTPUT "both_conj" ]. 

both_conj_rule_2 := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                       PRED _as+well+as_c_both_rel ] !> ],
   OUTPUT "both_conj" ]. 

either_conj_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           PRED _or_c_either_rel ] !> ],
   OUTPUT "either_conj" ].

neither_conj_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           PRED _nor_c_neither_rel ] !> ],
   OUTPUT "neither_conj" ].
#|
both_conj_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   OUTPUT "both_conj" ]. 

either_conj_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   OUTPUT "either_conj" ].

neither_conj_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   OUTPUT "neither_conj" ].
|#
;; Removed [ TENSE no_tense ]
;; DPF 4-Jul-02 - Put [ TENSE no_tense ] back to avoid introducing "to" for
;; simple "Abrams works"
;; DPF 1-Jul-03 - But [ ASPECT no_aspect ] blocks Kim believes Browne to have 
;; barked", so drop it.

to_c_nonprop_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E.TENSE no_tense ] ] !> ],
   OUTPUT "to_c_nonprop" ].

there_expl_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           PRED _be_v_there_rel ] !> ],
   OUTPUT "there_expl" ].

will_aux_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD ind_or_mod_subj,
                                              TENSE future ] ] ] !> ],
   OUTPUT "will_aux_pos" ].

will_aux_cx_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD ind_or_mod_subj,
                                              TENSE future ] ] ] !> ],
   OUTPUT "will_aux_pos_cx" ].

will_aux_cx_2_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD ind_or_mod_subj,
                                              TENSE future ] ] ] !> ],
   OUTPUT "will_aux_pos_cx_2" ].

would_aux_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD modal_subj,
                                              TENSE future ] ] ] !> ],
   OUTPUT "would_aux_pos" ].

would_aux_cx_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD ind_or_mod_subj,
                                              TENSE future ] ] ] !> ],
   OUTPUT "would_aux_pos_cx" ].

would_aux_cx_2_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD ind_or_mod_subj,
                                              TENSE future ] ] ] !> ],
   OUTPUT "would_aux_pos_cx_2" ].

#|
would_like_aux_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD ind_or_mod_subj,
                                              TENSE future ] ] ] !> ],
   OUTPUT "would_like_aux_pos" ].

would_like_aux_cx_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD ind_or_mod_subj,
                                              TENSE future ] ] ] !> ],
   OUTPUT "would_like_aux_pos_cx" ].
|#

shall_aux_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD ind_or_mod_subj,
                                              TENSE future ] ] ] !> ],
   OUTPUT "shall_aux_pos" ].

;;;
;;; _fix_me_
;;; in actual life, we cannot expect the input MRS for, say `Kim is in Berlin'
;;; to be compatible with [ PROGR + ], delete that much.    (23-jan-04; oe)
;;;
be_c_is1_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE present,
					      ASPECT.STATIVE + ] ],
                           ARG1 ref-ind & [ PNG [ PN 3sg ] ] ] !> ],
   OUTPUT "be_c_is" ].

be_c_is2_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE present,
					      ASPECT.STATIVE + ] ],
                           ARG2 ref-ind & [ PNG [ PN 3sg ] ] ] !> ],
   OUTPUT "be_c_is" ].

be_c_is3_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE present,
					      ASPECT.STATIVE + ] ],
                           ARG3 ref-ind & [ PNG [ PN 3sg ] ] ] !> ],
   OUTPUT "be_c_is" ].

be_c_is_h1_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE present,
					      ASPECT.STATIVE + ] ],
                           ARG1 handle ] !> ],
   OUTPUT "be_c_is" ].

be_c_is_h2_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE present,
					      ASPECT.STATIVE + ] ],
                           ARG2 handle ] !> ],
   OUTPUT "be_c_is" ].

be_c_is_expl_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE present ] ] ],
                         [ LBL handle,
                           PRED "test-expl-type",
                           ARG0 event,
		           ARG2 handle ] !> ],
   OUTPUT "be_c_is" ].

be_c_is_expl_2_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           PRED "test-expl-type",
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE present ] ],
		           ARG2 handle ] !> ],
   OUTPUT "be_c_is" ].

be_c_is_expl_3_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           PRED "test-expl-type",
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE present ] ] ] !> ],
   OUTPUT "be_c_is" ].

be_c_is_inf_rule := generator_rule &
 [ CONTEXT [ INDEX [ E [ MOOD indicative,
                         TENSE present,
			 ASPECT.STATIVE + ] ],
             RELS <! [ LBL handle,
                       PRED expected_inf_rel ],
                     [ ARG1 ref-ind & [ PNG [ PN 3sg ] ] ] !> ],
   OUTPUT "be_c_is" ].

be_c_is_th_expl_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           PRED _be_v_there_rel ],
                         [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE present ] ] ] !> ],
   OUTPUT "be_c_is" ].

be_c_is_cx1_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE present,
					      ASPECT.STATIVE + ] ],
                           ARG1 ref-ind & [ PNG.PN 3sg ] ] !> ],
   OUTPUT "be_c_is_cx" ].

be_c_is_cx2_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE present,
					      ASPECT.STATIVE + ] ],
                           ARG2 ref-ind & [ PNG.PN 3sg ] ] !> ],
   OUTPUT "be_c_is_cx" ].

be_c_is_cx3_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE present,
					      ASPECT.STATIVE + ] ],
                           ARG3 ref-ind & [ PNG.PN 3sg ] ] !> ],
   OUTPUT "be_c_is_cx" ].

be_c_is_cx_n_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE present,
					      ASPECT.STATIVE + ] ],
                           ARG1 handle ] !> ],
   OUTPUT "be_c_is_cx" ].

be_c_is_cx_expl_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE present ] ] ],
                         [ PRED "test-expl-type",
                           ARG0 event,
		           ARG2 handle ] !> ],
   OUTPUT "be_c_is_cx" ].

be_c_is_cx_expl_2_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE present ] ] ],
                         [ PRED "test-expl-type",
                           ARG0 event ] !> ],
   OUTPUT "be_c_is_cx" ].

be_c_are1_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE present,
					      ASPECT.STATIVE + ] ],
                           ARG1 ref-ind & [ PNG [ PN non3sg ] ] ] !> ],
   OUTPUT "be_c_are" ].

be_c_are2_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE present,
					      ASPECT.STATIVE + ] ],
                           ARG2 ref-ind & [ PNG [ PN non3sg ] ] ] !> ],
   OUTPUT "be_c_are" ].

be_c_are3_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE present,
					      ASPECT.STATIVE + ] ],
                           ARG3 ref-ind & [ PNG [ PN non3sg ] ] ] !> ],
   OUTPUT "be_c_are" ].

be_c_are_h1_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE present,
					      ASPECT.STATIVE + ] ],
                           ARG1 handle ],
		     [ LBL handle,
		       ARG0 ref-ind & [ PNG [ PN non3sg ] ] ] !> ],
                           
   OUTPUT "be_c_are" ].

be_c_are_h2_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE present,
					      ASPECT.STATIVE + ] ],
                           ARG2 handle ],
		     [ LBL handle,
		       ARG0 ref-ind & [ PNG [ PN non3sg ] ] ] !> ],
   OUTPUT "be_c_are" ].

be_c_are_th_expl_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                       PRED _be_v_there_rel,
		       ARG1 ref-ind & [ PNG [ PN non3sg ] ] ],
                     [ LBL handle,
                       ARG0 event & [ E [ MOOD indicative,
                                          TENSE present ] ] ] !> ],
   OUTPUT "be_c_are" ].

be_c_are_cx1_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE present,
					      ASPECT.STATIVE + ] ],
                           ARG1 ref-ind & [ PNG.PN non3sg ] ] !> ],
   OUTPUT "be_c_are_cx" ].

be_c_are_cx2_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE present,
					      ASPECT.STATIVE + ] ],
                           ARG2 ref-ind & [ PNG.PN non3sg ] ] !> ],
   OUTPUT "be_c_are_cx" ].

be_c_are_cx3_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE present,
					      ASPECT.STATIVE + ] ],
                           ARG3 ref-ind & [ PNG.PN non3sg ] ] !> ],
   OUTPUT "be_c_are_cx" ].

be_c_am1_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE present,
					      ASPECT.STATIVE + ] ],
                           ARG1 ref-ind & [ PNG.PN 1sg ] ] !> ],
   OUTPUT "be_c_am" ].

be_c_am2_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE present,
					      ASPECT.STATIVE + ] ],
                           ARG2 ref-ind & [ PNG.PN 1sg ] ] !> ],
   OUTPUT "be_c_am" ].

be_c_am3_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE present,
					      ASPECT.STATIVE + ] ],
                           ARG3 ref-ind & [ PNG.PN 1sg ] ] !> ],
   OUTPUT "be_c_am" ].

be_c_am_h1_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE present,
					      ASPECT.STATIVE + ] ],
                           ARG1 handle ],
		     [ LBL handle,
		       ARG0 ref-ind & [ PNG.PN 1sg ] ] !> ],
   OUTPUT "be_c_am" ].

be_c_am_h2_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE present,
					      ASPECT.STATIVE + ] ],
                           ARG2 handle ],
		     [ LBL handle,
		       ARG0 ref-ind & [ PNG.PN 1sg ] ] !> ],
   OUTPUT "be_c_am" ].

be_c_am_cx1_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE present,
					      ASPECT.STATIVE + ] ],
                           ARG1 ref-ind & [ PNG.PN 1sg ] ] !> ],
   OUTPUT "be_c_am_cx" ].

be_c_am_cx2_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE present,
					      ASPECT.STATIVE + ] ],
                           ARG2 ref-ind & [ PNG.PN 1sg ] ] !> ],
   OUTPUT "be_c_am_cx" ].

be_c_am_cx3_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE present,
					      ASPECT.STATIVE + ] ],
                           ARG3 ref-ind & [ PNG.PN 1sg ] ] !> ],
   OUTPUT "be_c_am_cx" ].

be_c_was1_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE past,
					      ASPECT.STATIVE + ] ],
                           ARG1 ref-ind & [ PNG.PN 3sg ] ] !> ],
   OUTPUT "be_c_was" ].

be_c_was2_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE past,
					      ASPECT.STATIVE + ] ],
                           ARG2 ref-ind & [ PNG.PN 3sg ] ] !> ],
   OUTPUT "be_c_was" ].

be_c_was3_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE past,
					      ASPECT.STATIVE + ] ],
                           ARG3 ref-ind & [ PNG.PN 3sg ] ] !> ],
   OUTPUT "be_c_was" ].

be_c_was_h1_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE past,
					      ASPECT.STATIVE + ] ],
                           ARG1 handle ],
		     [ LBL handle,
		       ARG0 ref-ind & [ PNG.PN 3sg ] ] !> ],
   OUTPUT "be_c_was" ].

be_c_was_h2_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE past,
					      ASPECT.STATIVE + ] ],
                           ARG2 handle ],
		     [ LBL handle,
		       ARG0 ref-ind & [ PNG.PN 3sg ] ] !> ],
   OUTPUT "be_c_was" ].

be_c_was_expl_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE past ] ] ],
                         [ LBL handle,
                           PRED "test-expl-type",
                           ARG0 event,
		           ARG2 handle ] !> ],
   OUTPUT "be_c_was" ].

be_c_was_expl_2_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           PRED "test-expl-type",
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE past ] ],
		           ARG2 handle ] !> ],
   OUTPUT "be_c_was" ].

be_c_was_expl_3_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           PRED "test-expl-type",
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE past ] ] ] !> ],
   OUTPUT "be_c_was" ].

be_c_was_subj_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                       ARG0 event & [ E [ MOOD subjunctive,
                                          TENSE real_tense,
					  ASPECT.STATIVE + ] ] ] !> ],
   OUTPUT "be_c_was_subj" ].

be_c_was_inf_rule := generator_rule &
 [ CONTEXT [ INDEX [ E [ MOOD indicative,
                         TENSE past,
			 ASPECT.STATIVE + ] ],
             RELS <! [ LBL handle,
                       PRED expected_inf_rel ],
                     [ ARG1 ref-ind & [ PNG [ PN 3sg ] ] ] !> ],
   OUTPUT "be_c_was" ].

be_c_was_th_expl_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           PRED _be_v_there_rel ],
                         [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE past ] ] ] !> ],
   OUTPUT "be_c_was" ].

be_c_were1_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE past,
					      ASPECT.STATIVE + ] ],
                           ARG1 ref-ind & [ PNG.PN non3sg ] ] !> ],
   OUTPUT "be_c_were" ].

be_c_were2_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE past,
					      ASPECT.STATIVE + ] ],
                           ARG2 ref-ind & [ PNG.PN non3sg ] ] !> ],
   OUTPUT "be_c_were" ].

be_c_were3_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE past,
					      ASPECT.STATIVE + ] ],
                           ARG3 ref-ind & [ PNG.PN non3sg ] ] !> ],
   OUTPUT "be_c_were" ].

be_c_were_h1_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE past,
					      ASPECT.STATIVE + ] ],
                           ARG1 handle ],
		     [ LBL handle,
		       ARG0 ref-ind & [ PNG.PN non3sg ] ] !> ],
   OUTPUT "be_c_were" ].

be_c_were_h2_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE past,
					      ASPECT.STATIVE + ] ],
                           ARG2 handle ],
		     [ LBL handle,
		       ARG0 ref-ind & [ PNG.PN non3sg ] ] !> ],
   OUTPUT "be_c_were" ].

be_c_were_th_expl_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           PRED _be_v_there_rel ],
                         [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE past ] ] ] !> ],
   OUTPUT "be_c_were" ].

be_c_were_subj_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                       ARG0 event & [ E [ MOOD subjunctive,
                                          TENSE real_tense,
					  ASPECT.STATIVE + ] ] ] !> ],
   OUTPUT "be_c_were_subj" ].

be_c_were_inf_rule := generator_rule &
 [ CONTEXT [ INDEX [ E [ MOOD indicative,
                         TENSE past,
			 ASPECT.STATIVE + ] ],
             RELS <! [ LBL handle,
                       PRED expected_inf_rel ],
                     [ ARG1 ref-ind & [ PNG [ PN non3sg ] ] ] !> ],
   OUTPUT "be_c_were" ].


; DPF 8-Jul-02 - Removed TENSE real_tense "A could have been hiring B"
be_c_been_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
        		                      ASPECT [ PERF +,
					               STATIVE + ] ] ] ] !> ],
   OUTPUT "be_c_been" ].

be_c_being_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE real_tense,
	        	                      ASPECT.PROGR + ] ] ] !> ],
   OUTPUT "be_c_being" ].

be_c_be_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
        	                              ASPECT [ PERF -,
 					               STATIVE + ] ] ] ] !> ],
   OUTPUT "be_c_be" ].

who_rel_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL #hand,
                           ARG0 ref-ind ],
                         [ LBL #hand,
                           PRED prpstn_m_rel ] !> ],
   OUTPUT "who2" ].

whom_rel_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL #hand,
                           ARG0 ref-ind ],
                         [ LBL #hand,
                           PRED prpstn_m_rel ] !> ],
   OUTPUT "whom2" ].

which_rel_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL #hand,
                           ARG0 ref-ind ],
                         [ LBL #hand,
                           PRED prpstn_m_rel ] !> ],
   OUTPUT "which_r" ].

that_rel_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL #hand,
                           ARG0 ref-ind ],
                         [ LBL #hand,
                           PRED prpstn_m_rel ] !> ],
   OUTPUT "that_r" ].

that_rel_npadv_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL #hand,
                           ARG0 ref-ind ],
                         [ LBL #hand,
                           PRED prpstn_m_rel ] !> ],
   OUTPUT "that_r_npadv" ].

who_rel_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED be_v_itcleft_rel ] !> ],
   OUTPUT "who2" ].

whom_rel_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED be_v_itcleft_rel ] !> ],
   OUTPUT "whom2" ].

which_rel_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED be_v_itcleft_rel ] !> ],
   OUTPUT "which_r" ].

that_rel_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED be_v_itcleft_rel ] !> ],
   OUTPUT "that_r" ].

that_rel_npadv_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED be_v_itcleft_rel ] !> ],
   OUTPUT "that_r_npadv" ].

and_num_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           PRED times_rel ] !> ],
   OUTPUT "and_num" ].

and_fract_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           PRED fraction_rel ] !> ],
   OUTPUT "and_fract" ].

and_fract_2_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           PRED fraction_rel ] !> ],
   OUTPUT "and_fract_2" ].

;none_det_rule := generator_rule &
; [ CONTEXT [ RELS <! [ LBL handle,
;                           PRED _no_q_rel ] !> ],
;   OUTPUT "none_pn1" ].

;none_det_2_rule := generator_rule &
; [ CONTEXT [ RELS <! [ LBL handle,
;                           PRED _no_q_rel ] !> ],
;   OUTPUT "none_pn2" ].

; For all of these, make the RELS be <! which_rel !> to generate with them
wh_the_hell_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   OUTPUT "the_hell_wh_adv" ].

wh_the_fuck_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   OUTPUT "the_fuck_wh_adv" ].

wh_the_heck_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   OUTPUT "the_heck_wh_adv" ].

wh_on_earth_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   OUTPUT "on_earth_wh_adv" ].

wh_in_the_world_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   OUTPUT "in_the_world_wh_adv" ].

wh_oh_where_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   OUTPUT "oh_where_wh_adv" ].

wh_exactly_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   OUTPUT "exactly_wh_adv" ].

wh_else_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   OUTPUT "else_wh_adv" ].

; These won't be used in generation as long as the never_unify_rel is here
adv_disc_umm_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   OUTPUT "umm_root" ].
adv_disc_um_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   OUTPUT "um_disc_adv" ].
adv_disc_umers_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   OUTPUT "um_ersatz" ].
adv_disc_uh_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   OUTPUT "uh_disc_adv" ].
adv_disc_please_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   OUTPUT "please_root" ].
adv_disc_pleaseabb_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   OUTPUT "please_abb_root" ].
adv_disc_imustsay_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   OUTPUT "i_must_say_root" ].
adv_disc_imustsay_2_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   OUTPUT "i_must_say_root_2" ].
adv_disc_imustsay_3_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   OUTPUT "i_must_say_root_3" ].
adv_disc_imustsay_4_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   OUTPUT "i_must_say_root_4" ].
adv_disc_youknow_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   OUTPUT "you_know_disc" ].
adv_disc_youknow_2_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   OUTPUT "you_know_2_disc" ].
adv_disc_imho_1_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   OUTPUT "imho_disc" ].
adv_disc_imho_2_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   OUTPUT "imho_disc_2" ].
adv_disc_lets_say_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   OUTPUT "lets_say_disc" ].
adv_disc_lets_say_2_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   OUTPUT "lets_say_2_disc" ].
adv_disc_lets_say_3_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   OUTPUT "lets_say_3_disc" ].
adv_disc_lets_say_4_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   OUTPUT "lets_say_4_disc" ].
adv_disc_lets_say_5_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   OUTPUT "lets_say_5_disc" ].
adv_disc_lets_say_6_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   OUTPUT "lets_say_6_disc" ].
adv_disc_like_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   OUTPUT "like_disc_adv" ].
adv_disc_for_instance_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   OUTPUT "for_instance_disc_adv" ].
adv_disc_for_example_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   OUTPUT "for_example_disc_adv" ].
adv_I_guess_like_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   OUTPUT "i_guess_disc" ].
adv_I_guess_like_2_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   OUTPUT "i_guess_disc_2" ].
adv_I_guess_like_3_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   OUTPUT "i_guess_disc_3" ].
adv_I_guess_like_4_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   OUTPUT "i_guess_disc_4" ].
adv_however_2_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   OUTPUT "however2" ].
adv_however_3_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   OUTPUT "however_3" ].
adv_I_think_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   OUTPUT "i_think_disc" ].
adv_I_think_2_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   OUTPUT "i_think_disc_2" ].
adv_or_so_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   OUTPUT "or_so_disc" ].
adv_maybe_disc_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   OUTPUT "maybe_disc_adv" ].
adv_say_disc_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   OUTPUT "say_disc_adv" ].
adv_i_mean_disc_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   OUTPUT "i_mean_disc" ].
adv_i_mean_disc_2_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   OUTPUT "i_mean_disc_2" ].
adv_though_pre_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   OUTPUT "though_root_pre" ].
adv_though_post_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   OUTPUT "though_root_post" ].
adv_disc_perhaps_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   OUTPUT "perhaps_disc_adv" ].
adv_disc_e_g_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   OUTPUT "e_g_disc_adv" ].
adv_disc_sort_of_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   OUTPUT "sort_of_disc_adv" ].
adv_disc_in_a_way_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   OUTPUT "in_a_way_disc_adv" ].

apostrophe_s_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED poss_rel ] !> ],
   OUTPUT "apostrophe_s_nq_lex" ].

punct_semicolon_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   OUTPUT "semicolon_pct" ].
punct_semicolon_dash_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   OUTPUT "semicolon_dash_pct" ].
punct_vert_bar_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   OUTPUT "vertical_bar_punct_right" ].
punct_bang_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   OUTPUT "bang_pct" ].

#|
punct_period_rule := generator_rule &
 [ CONTEXT [ HOOK.LTOP #ltop,
             RELS <! [ LBL #ltop,
                       PRED prop_imp_m_rel ] !> ],
   OUTPUT "period_pct" ].
punct_period_2_rule := generator_rule &
 [ CONTEXT [ HOOK.LTOP #ltop,
             RELS <! [ LBL #ltop,
                       PRED conj_rel ],
                     [ PRED prop_imp_m_rel ] !> ],
   OUTPUT "period_pct" ].
punct_qmark_rule := generator_rule &
 [ CONTEXT [ HOOK.LTOP #ltop,
             RELS <! [ LBL #ltop,
                       PRED int_m_rel ] !> ],
   OUTPUT "qmark_pct" ].
punct_qmark_2_rule := generator_rule &
 [ CONTEXT [ HOOK.LTOP #ltop,
             RELS <! [ LBL #ltop,
                       PRED conj_rel ],
                     [ PRED int_m_rel ] !> ],
   OUTPUT "qmark_pct" ].
|#

punct_period_no-use_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   OUTPUT "period_pct" ].
punct_qmark_no-use_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   OUTPUT "qmark_pct" ].

punct_sq_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   OUTPUT "sq_pct" ].
punct_dq_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   OUTPUT "dq_punct" ].
punct_dq2_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   OUTPUT "dq_punct2" ].
punct_lp_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   OUTPUT "lparen_pct" ].
punct_rp_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   OUTPUT "rparen_pct" ].
hyphen_punctl_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   OUTPUT "hyphen_punct_left" ].
hyphen_punctr_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   OUTPUT "hyphen_punct_right" ].
punct_dblhl_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   OUTPUT "dbl_hyphen_punct_left" ].
punct_dblhr_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   OUTPUT "dbl_hyphen_punct_right" ].
punct_commal_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   OUTPUT "comma_punct_left" ].
punct_commar_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   OUTPUT "comma_punct_right" ].
punct_commac_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   OUTPUT "comma_punct_coord" ].
punct_3dotsl_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   OUTPUT "punct_3dots_l" ].
punct_3dotsr_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   OUTPUT "punct_3dots_r" ].
punct_3dotsr2_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   OUTPUT "punct_3dots_r_2" ].
punct_s_dash_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   OUTPUT "s_dash_pct" ].
punct_s_dbldash_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   OUTPUT "s_dbl_dash_pct" ].
punct_colon_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   OUTPUT "colon_pct" ].
punct_s_colon_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   OUTPUT "s_colon_pct" ].
punct_leftq_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   OUTPUT "leftq_pct" ].

be_c_is_cx_2_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   OUTPUT "be_c_is_cx_2" ].
be_c_am_cx_2_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   OUTPUT "be_c_am_cx_2" ].
be_c_are_cx_2_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   OUTPUT "be_c_are_cx_2" ].
have_bse_aux_cx_2_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   OUTPUT "have_bse_aux_cx_2" ].
have_fin_aux_cx_2_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   OUTPUT "have_fin_aux_cx_2" ].
had_aux_cx_2_rule := generator_rule &
 [ CONTEXT [ RELS <! [ PRED never_unify_rel ] !> ],
   OUTPUT "had_aux_cx_2" ].

be_c_is_neg_tag_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           PRED ne_m_rel ],
                     [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE present,
					      ASPECT.STATIVE + ] ] ] !> ],
   OUTPUT "be_c_is_neg_1" ].

be_c_are_neg_tag_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           PRED ne_m_rel ],
                     [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE present,
					      ASPECT.STATIVE + ] ] ] !> ],
   OUTPUT "be_c_are_neg_1" ].

be_id_is_neg_tag_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           PRED ne_m_rel ],
                     [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE present ] ] ] !> ],
   OUTPUT "be_id_is_neg_1" ].

be_id_are_neg_tag_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           PRED ne_m_rel ],
                     [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE present ] ] ] !> ],
   OUTPUT "be_id_are_neg_1" ].

be_th_is_neg_tag_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           PRED ne_m_rel ],
                     [ LBL handle,
                           PRED _be_v_there_rel,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE present ] ] ] !> ],
   OUTPUT "be_th_cop_is_neg_1" ].

be_th_are_neg_tag_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           PRED ne_m_rel ],
                     [ LBL handle,
                           PRED _be_v_there_rel,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE present ] ] ] !> ],
   OUTPUT "be_th_cop_are_neg_1" ].

be_c_was_neg_tag_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           PRED ne_m_rel ],
                     [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE past,
					      ASPECT.STATIVE + ] ] ] !> ],
   OUTPUT "be_c_was_neg_1" ].

be_c_were_neg_tag_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           PRED ne_m_rel ],
                     [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE past,
					      ASPECT.STATIVE + ] ] ] !> ],
   OUTPUT "be_c_were_neg_1" ].

be_id_was_neg_tag_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           PRED ne_m_rel ],
                     [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE past ] ] ] !> ],
   OUTPUT "be_id_was_neg_1" ].

be_id_were_neg_tag_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           PRED ne_m_rel ],
                     [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE past ] ] ] !> ],
   OUTPUT "be_id_were_neg_1" ].

be_th_was_neg_tag_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           PRED ne_m_rel ],
                     [ LBL handle,
                           PRED _be_v_there_rel,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE past ] ] ] !> ],
   OUTPUT "be_th_cop_was_neg_1" ].

be_th_were_neg_tag_rule1 := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           PRED ne_m_rel ],
                     [ LBL handle,
                           PRED _be_v_there_rel,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE past ] ] ] !> ],
   OUTPUT "be_th_cop_were_neg_1" ].

be_inv_is_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE present,
					      ASPECT.STATIVE + ] ],
                           ARG1 ref-ind & [ PNG.PN 3sg ] ] !> ],
   OUTPUT "be_inv_is" ].

be_inv_was_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE past,
					      ASPECT.STATIVE + ] ],
                           ARG1 ref-ind & [ PNG.PN 3sg ] ] !> ],
   OUTPUT "be_inv_was" ].

be_inv_are_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE present,
					      ASPECT.STATIVE + ] ],
                           ARG1 ref-ind & [ PNG.PN non3sg ] ] !> ],
   OUTPUT "be_inv_are" ].

be_inv_were_rule := generator_rule &
 [ CONTEXT [ RELS <! [ LBL handle,
                           ARG0 event & [ E [ MOOD indicative,
                                              TENSE past,
					      ASPECT.STATIVE + ] ],
                           ARG1 ref-ind & [ PNG.PN non3sg ] ] !> ],
   OUTPUT "be_inv_were" ].
