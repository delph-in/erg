does1_pos_rule1 := generator_rule &
 [ LCONDITION  [ LISZT <! neg_rel,
		          [ EVENT [ E [ MOOD indicative,
                                        TENSE present,
			                ASPECT no_aspect ] ] ] !> ],
  OUTPUT "does1_pos" ].

does1_pos_rule2 := generator_rule &
 [ LCONDITION  [ LISZT <! int_rel,
		          [ EVENT [ E [ MOOD indicative,
                                        TENSE present,
			                ASPECT no_aspect ] ] ] !> ],
  OUTPUT "does1_pos" ].

does1_pos_rule3 := generator_rule &
 [ LCONDITION  [ LISZT <! ellipsis_rel &
		          [ EVENT [ E [ MOOD indicative,
                                        TENSE present,
			                ASPECT no_aspect ] ] ] !> ],
  OUTPUT "does1_pos" ].

did1_pos_rule1 := generator_rule &
 [ LCONDITION  [ LISZT <! neg_rel,
		          [ EVENT [ E [ MOOD indicative,
                                        TENSE past,
		                        ASPECT no_aspect ] ] ] !> ],
  OUTPUT "did1_pos" ].

did1_pos_rule2 := generator_rule &
 [ LCONDITION  [ LISZT <! int_rel,
		          [ EVENT [ E [ MOOD indicative,
                                        TENSE past,
		                        ASPECT no_aspect ] ] ] !> ],
  OUTPUT "did1_pos" ].

did1_pos_rule3 := generator_rule &
 [ LCONDITION  [ LISZT <! ellipsis_rel &
		          [ EVENT [ E [ MOOD indicative,
                                        TENSE past,
		                        ASPECT no_aspect ] ] ] !> ],
  OUTPUT "did1_pos" ].

do1_pos_rule1 := generator_rule &
 [ LCONDITION  [ LISZT <! neg_rel,
		          [ EVENT [ E [ MOOD indicative,
                                        TENSE present,
		                        ASPECT no_aspect ] ] ] !> ],
  OUTPUT "do1_pos" ].

do1_pos_rule2 := generator_rule &
 [ LCONDITION  [ LISZT <! int_rel,
		          [ EVENT [ E [ MOOD indicative,
                                        TENSE present,
		                        ASPECT no_aspect ] ] ] !> ],
  OUTPUT "do1_pos" ].

do1_pos_rule3 := generator_rule &
 [ LCONDITION  [ LISZT <! ellipsis_rel &
		          [ EVENT [ E [ MOOD indicative,
                                        TENSE present,
		                        ASPECT no_aspect ] ] ] !> ],
  OUTPUT "do1_pos" ].

has_aux_rule := generator_rule &
 [ LCONDITION  [ LISZT <! role_rel &
                          [ EVENT [ E [ MOOD indicative,
                                        TENSE present,
		                        ASPECT perf ] ] ] !> ],
  OUTPUT "has_aux" ]. 

has_aux_rule_2 := generator_rule &
 [ LCONDITION  [ LISZT <! role_rel &
                          [ EVENT [ E [ MOOD indicative,
                                        TENSE present,
		                        ASPECT progr+perf ] ] ] !> ],
  OUTPUT "has_aux" ]. 

have_bse_aux_rule := generator_rule &
 [ LCONDITION  [ LISZT <! [ EVENT [ E [ TENSE real_tense,
                                        ASPECT perf ] ] ] !> ],
  OUTPUT "have_bse_aux" ]. 

have_fin_aux_rule := generator_rule &
 [ LCONDITION  [ LISZT <! [ EVENT [ E [ MOOD indicative,
                                        TENSE present,
		                        ASPECT perf ] ] ] !> ],
  OUTPUT "have_fin_aux" ]. 

have_fin_aux_rule_2 := generator_rule &
 [ LCONDITION  [ LISZT <! [ EVENT [ E [ MOOD indicative,
                                        TENSE present,
		                        ASPECT progr+perf ] ] ] !> ],
  OUTPUT "have_fin_aux" ]. 

have_aux_prp_rule := generator_rule &
 [ LCONDITION  [ LISZT <! gerund_rel  !> ],
  OUTPUT "have_aux_prp" ].

had_aux_subj_rule := generator_rule &
 [ LCONDITION  [ LISZT <! [ EVENT [ E [ MOOD indicative,
                                        TENSE past,
			                ASPECT perf ] ] ] !> ],
  OUTPUT "had_aux_subj" ].

had_aux_subj_rule_2 := generator_rule &
 [ LCONDITION  [ LISZT <! [ EVENT [ E [ MOOD indicative,
                                        TENSE past,
			                ASPECT progr+perf ] ] ] !> ],
  OUTPUT "had_aux_subj" ].

had_aux_rule := generator_rule &
 [ LCONDITION  [ LISZT <! [ EVENT [ E [ MOOD indicative,
                                        TENSE past,
		                        ASPECT perf ] ] ] !> ],
  OUTPUT "had_aux" ].

had_aux_rule2 := generator_rule &
 [ LCONDITION  [ LISZT <! [ EVENT [ E [ MOOD indicative,
                                        TENSE past,
		                        ASPECT progr+perf ] ] ] !> ],
  OUTPUT "had_aux" ].

has_aux_cx_rule := generator_rule &
 [ LCONDITION  [ LISZT <! role_rel &
                          [ EVENT [ E [ MOOD indicative,
                                        TENSE present,
		                        ASPECT perf ] ] ] !> ],
  OUTPUT "has_aux_cx" ].

has_aux_cx_rule_2 := generator_rule &
 [ LCONDITION  [ LISZT <! role_rel &
                          [ EVENT [ E [ MOOD indicative,
                                        TENSE present,
		                        ASPECT progr+perf ] ] ] !> ],
  OUTPUT "has_aux_cx" ].

has_aux_cx_rule_3 := generator_rule &
 [ LCONDITION  [ LISZT <! role_rel &
                          [ EVENT [ E [ MOOD indicative,
                                        TENSE present,
		                        ASPECT progr+perf ] ] ] !> ],
  OUTPUT "has_aux_cx_2" ].

have_fin_aux_cx_rule := generator_rule &
 [ LCONDITION  [ LISZT <! role_rel &
                          [ EVENT [ E [ MOOD indicative,
                                        TENSE present,
		                        ASPECT perf ] ],
                            ARG1.PNG.PN non3sg ] !> ],
  OUTPUT "have_fin_aux_cx" ].

have_fin_aux_cx_rule_2 := generator_rule &
 [ LCONDITION  [ LISZT <! role_rel &
                          [ EVENT [ E [ MOOD indicative,
                                        TENSE present,
		                        ASPECT progr+perf ] ],
                            ARG1.PNG.PN non3sg ] !> ],
  OUTPUT "have_fin_aux_cx" ].

have_fin_aux_cx_rule_3 := generator_rule &
 [ LCONDITION  [ LISZT <! role_rel &
                          [ EVENT [ E [ MOOD indicative,
                                        TENSE present,
		                        ASPECT progr+perf ] ] ],
                          [ INST [ PNG [ PN non3sg ] ] ] !> ],
  OUTPUT "have_fin_aux_cx_2" ].

had_aux_cx_rule := generator_rule &
 [ LCONDITION  [ LISZT <! role_rel &
                          [ EVENT [ E [ MOOD indicative,
                                        TENSE past,
		                        ASPECT perf ] ] ] !> ],
  OUTPUT "had_aux_cx" ]. 

had_aux_cx_rule_2 := generator_rule &
 [ LCONDITION  [ LISZT <! role_rel &
                          [ EVENT [ E [ MOOD indicative,
                                        TENSE past,
		                        ASPECT progr+perf ] ] ] !> ],
  OUTPUT "had_aux_cx" ]. 

had_aux_cx_rule_3 := generator_rule &
 [ LCONDITION  [ LISZT <! [ EVENT [ E [ MOOD indicative,
                                        TENSE past,
		                        ASPECT progr+perf ] ] ] !> ],
  OUTPUT "had_aux_cx_2" ]. 

it_rule := generator_rule &
 [ LCONDITION  [ LISZT <! expl_rel  !> ],
  OUTPUT "it" ].

possessive_of_rule := generator_rule &
 [ LCONDITION  [ LISZT <! poss_rel  !> ],
  OUTPUT "possessive_of" ]. 

both_conj_rule := generator_rule &
  [ LCONDITION  [ LISZT <! _and_rel  !> ],
    OUTPUT "both_conj" ]. 

either_conj_rule := generator_rule &
 [ LCONDITION  [ LISZT <! _or_rel  !> ],
  OUTPUT "either_conj" ].

neither_conj_rule := generator_rule &
 [ LCONDITION  [ LISZT <! _nor_rel  !> ],
  OUTPUT "neither_conj" ].


;; Removed [ TENSE no_tense ]
to_c_nonprop_rule := generator_rule &
 [ LCONDITION  [ LISZT <! role_rel &
                          [ EVENT [ E [ ASPECT no_aspect ] ] ] !> ],
  OUTPUT "to_c_nonprop" ].

there_expl_rule := generator_rule &
 [ LCONDITION  [ LISZT <! _there_cop_rel !> ],
  OUTPUT "there_expl" ].

will_aux_rule := generator_rule &
 [ LCONDITION  [ LISZT <! [ EVENT [ E [ MOOD ind_or_mod_subj,
                                        TENSE future ] ] ] !> ],
  OUTPUT "will_aux_pos" ].

will_aux_cx_rule := generator_rule &
 [ LCONDITION  [ LISZT <! [ EVENT [ E [ MOOD ind_or_mod_subj,
                                        TENSE future ] ] ] !> ],
  OUTPUT "will_aux_pos_cx" ].

will_aux_cx_rule_2 := generator_rule &
 [ LCONDITION  [ LISZT <! [ EVENT [ E [ MOOD ind_or_mod_subj,
                                        TENSE future ] ] ] !> ],
  OUTPUT "will_aux_pos_cx_2" ].

would_aux_rule := generator_rule &
 [ LCONDITION  [ LISZT <! [ EVENT [ E [ MOOD ind_or_mod_subj,
                                        TENSE future ] ] ] !> ],
  OUTPUT "would_aux_pos" ].

would_aux_cx_rule := generator_rule &
 [ LCONDITION  [ LISZT <! [ EVENT [ E [ MOOD ind_or_mod_subj,
                                        TENSE future ] ] ] !> ],
  OUTPUT "would_aux_pos_cx" ].

would_aux_cx_rule_2 := generator_rule &
 [ LCONDITION  [ LISZT <! [ EVENT [ E [ MOOD ind_or_mod_subj,
                                        TENSE future ] ] ] !> ],
  OUTPUT "would_aux_pos_cx_2" ].

shall_aux_rule := generator_rule &
 [ LCONDITION  [ LISZT <! [ EVENT [ E [ MOOD ind_or_mod_subj,
                                        TENSE future ] ] ] !> ],
  OUTPUT "shall_aux_pos" ].

going_to_rule := generator_rule &
 [ LCONDITION  [ LISZT <! [ EVENT [ E [ MOOD ind_or_mod_subj,
                                        TENSE future ] ] ] !> ],
  OUTPUT "going_to_v1" ].

gonna_rule := generator_rule &
 [ LCONDITION  [ LISZT <! [ EVENT [ E [ MOOD ind_or_mod_subj,
                                        TENSE future ] ] ] !> ],
  OUTPUT "gonna_v1" ].

be_c_is_rule := generator_rule &
 [ LCONDITION  [ LISZT <! [ EVENT [ E [ MOOD indicative,
                                        TENSE present,
		                        ASPECT progr ] ],
                            ARG.PNG.PN 3sg ] !> ],
  OUTPUT "be_c_is" ].

be_c_is_cx_rule := generator_rule &
 [ LCONDITION  [ LISZT <! [ EVENT [ E [ MOOD indicative,
                                        TENSE present,
		                        ASPECT progr ] ],
                            ARG.PNG.PN 3sg ] !> ],
  OUTPUT "be_c_is_cx" ].

be_c_is_cx_rule_2 := generator_rule &
 [ LCONDITION  [ LISZT <! [ EVENT [ E [ MOOD indicative,
                                        TENSE present,
		                        ASPECT progr ] ],
                            ARG.PNG.PN 3sg ] !> ],
  OUTPUT "be_c_is_cx_2" ].

be_c_are_rule := generator_rule &
 [ LCONDITION  [ LISZT <! [ EVENT [ E [ MOOD indicative,
                                        TENSE present,
		                        ASPECT progr ] ],
                            ARG.PNG.PN non3sg ] !> ],
  OUTPUT "be_c_are" ].

be_c_am_rule := generator_rule &
 [ LCONDITION  [ LISZT <! [ EVENT [ E [ MOOD indicative,
                                        TENSE present,
		                        ASPECT progr ] ],
                            ARG.PNG.PN 1sg ] !> ],
  OUTPUT "be_c_am" ].

be_c_am_cx_rule := generator_rule &
 [ LCONDITION  [ LISZT <! [ EVENT [ E [ MOOD indicative,
                                        TENSE present,
		                        ASPECT progr ] ],
                            ARG.PNG.PN 1sg ] !> ],
  OUTPUT "be_c_am_cx" ].

be_c_am_cx_rule_2 := generator_rule &
 [ LCONDITION  [ LISZT <! [ EVENT [ E [ MOOD indicative,
                                        TENSE present,
		                        ASPECT progr ] ],
                            ARG.PNG.PN 1sg ] !> ],
  OUTPUT "be_c_am_cx_2" ].

be_c_was_rule := generator_rule &
 [ LCONDITION  [ LISZT <! [ EVENT [ E [ MOOD indicative,
                                        TENSE past,
		                        ASPECT progr ] ],
                            ARG.PNG.PN 3sg ] !> ],
  OUTPUT "be_c_was" ].

be_c_was_subj_rule := generator_rule &
 [ LCONDITION  [ LISZT <! [ EVENT [ E [ MOOD subjunctive,
                                        TENSE no_aspect,
		                        ASPECT progr ] ],
                            ARG.PNG.PN 3sg ] !> ],
  OUTPUT "be_c_was_subj" ].

be_c_were_rule := generator_rule &
 [ LCONDITION  [ LISZT <! [ EVENT [ E [ MOOD indicative,
                                        TENSE past,
		                        ASPECT progr ] ],
                            ARG.PNG.PN non3sg ] !> ],
  OUTPUT "be_c_were" ].

be_c_were_subj_rule := generator_rule &
 [ LCONDITION  [ LISZT <! [ EVENT [ E [ MOOD subjunctive,
                                        TENSE real_tense,
		                        ASPECT progr ] ] ] !> ],
  OUTPUT "be_c_were_subj" ].

be_c_been_rule := generator_rule &
 [ LCONDITION  [ LISZT <! [ EVENT [ E [ MOOD indicative,
                                        TENSE real_tense,
		                        ASPECT progr+perf ] ] ] !> ],
  OUTPUT "be_c_been" ].

be_c_being_rule := generator_rule &
 [ LCONDITION  [ LISZT <! [ EVENT [ E [ MOOD indicative,
                                        TENSE real_tense,
		                        ASPECT progr ] ] ] !> ],
  OUTPUT "be_c_being" ].

be_c_be_rule := generator_rule &
 [ LCONDITION  [ LISZT <! [ EVENT [ E [ MOOD indicative,
		                        ASPECT strict_nonprf ] ] ] !> ],
  OUTPUT "be_c_be" ].

who_rel_rule := generator_rule &
 [ LCONDITION  [ LISZT <! [ HANDEL #hand,
                            INST ref-ind ],
                            prpstn_rel & 
                            [ HANDEL #hand ] !> ],
   OUTPUT "who2" ].

whom_rel_rule := generator_rule &
 [ LCONDITION  [ LISZT <! [ HANDEL #hand,
                            INST ref-ind ],
                            prpstn_rel & 
                            [ HANDEL #hand ] !> ],
   OUTPUT "whom2" ].

which_rel_rule := generator_rule &
 [ LCONDITION  [ LISZT <! [ HANDEL #hand,
                            INST ref-ind ],
                            prpstn_rel & 
                            [ HANDEL #hand ] !> ],
   OUTPUT "which_r" ].

that_rel_rule := generator_rule &
 [ LCONDITION  [ LISZT <! [ HANDEL #hand,
                            INST ref-ind ],
                            prpstn_rel & 
                            [ HANDEL #hand ] !> ],
   OUTPUT "that_r" ].

and_num_rule := generator_rule &
 [ LCONDITION  [ LISZT <! times_rel !> ],
   OUTPUT "and_num" ].

