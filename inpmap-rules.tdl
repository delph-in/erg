;;;
;;; Normalize surviving XML punctuation marks
;;;

xml-mdash-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/([A-Za-z0-9]+)(&mdash;)([A-Za-z0-9]*)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1} - ${I1:+FORM:3}" ] > ].

xml-mdash2-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/([A-Za-z0-9]+)(& mdash;)([A-Za-z0-9]*)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1} - ${I1:+FORM:3}" ] > ].

xml-ndash-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/([A-Za-z0-9]+)(&ndash;)([A-Za-z0-9]*)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1} - ${I1:+FORM:3}" ] > ].

xml-ndash2-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/([A-Za-z0-9]+)(& ndash;)([A-Za-z0-9]*)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1} - ${I1:+FORM:3}" ] > ].

xml-rsquote-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/([A-Za-z0-9]+)(&rsquo; s)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}'s" ] > ].

xml-rsquote2-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/([A-Za-z0-9]+)(& rsquo; s)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}'s" ] > ].

xml-rsquote3-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/([A-Za-z0-9]+)(\\)(rquote s)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}'s" ] > ].

xml-rsquote4-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/([A-Za-z0-9]+)(rquote s)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}'s" ] > ].

xml-rsquotepl-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/([A-Za-z0-9]+)(&rsquo;)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}'" ] > ].

xml-rsquotepl2-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/([A-Za-z0-9]+)(& rsquo;)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}'" ] > ].

xml-rsquotepl3-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/([A-Za-z0-9]+)(\\)(rquote)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}'" ] > ].

xml-rsquotepl4-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/([A-Za-z0-9]+)(rquote)/"] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}'" ] > ].

xml-rsquotepl5-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/([A-Za-z09]+)(\\\\)(rquote)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}'" ] > ].

xml-rsquotepl6-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/([A-Za-z0-9]+)(\\222)" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}'" ] > ].

xml-rdquote-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/&rdquo;/" ] >,
    +OUTPUT  < [ +FORM "\"" ] > ].

xml-rdquote2-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/& rdquo;/" ] >,
    +OUTPUT  < [ +FORM "\"" ] > ].

xml-rdquote3-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/\“/" ] >,
    +OUTPUT  < [ +FORM "\"" ] > ].

xml-rdquote4-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/\”/" ] >,
    +OUTPUT  < [ +FORM "\"" ] > ].

xml-rdquote5-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/â€œ/" ] >,
    +OUTPUT  < [ +FORM "\"" ] > ].

xml-rdquote6-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/â€�/" ] >,
    +OUTPUT  < [ +FORM "\"" ] > ].

xml-ldquote-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/&ldquo;/" ] >,
    +OUTPUT  < [ +FORM "\"" ] > ].

xml-ldquote2-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/& ldquo;/" ] >,
    +OUTPUT  < [ +FORM "\"" ] > ].

xml-quot-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/&quot;/" ] >,
    +OUTPUT  < [ +FORM "\"" ] > ].

xml-quot2-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/& quot;/" ] >,
    +OUTPUT  < [ +FORM "\"" ] > ].

xml-vertbar-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/([A-Za-z0-9]+)¦" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}" ] > ].

xml-apos-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/&apos;/" ] >,
    +OUTPUT  < [ +FORM "'" ] > ].

xml-apos2-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/& apos;/" ] >,
    +OUTPUT  < [ +FORM "'" ] > ].

xml-amp-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/&amp;/" ] >,
    +OUTPUT  < [ +FORM "&" ] > ].

xml-amp2-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/& amp;/" ] >,
    +OUTPUT  < [ +FORM "&" ] > ].

xml-percnt-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/&percnt;/" ] >,
    +OUTPUT  < [ +FORM "%" ] > ].

xml-percnt2-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/& percnt;/" ] >,
    +OUTPUT  < [ +FORM "%" ] > ].

xml-bull-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/&bull;/" ] >,
    +OUTPUT  < [ +FORM "" ] > ].

xml-bull2-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/& bull;/" ] >,
    +OUTPUT  < [ +FORM "" ] > ].

xml-sol-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/&sol;/" ] >,
    +OUTPUT  < [ +FORM "/" ] > ].

xml-sol2-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/& sol;/" ] >,
    +OUTPUT  < [ +FORM "/" ] > ].

xml-deg-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/& deg;/" ] >,
    +OUTPUT  < [ +FORM "&deg;" ] > ].

xml-twoslq-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/``/" ] >,
    +OUTPUT  < [ +FORM "\"" ] > ].

xml-u0020-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/\\u0020/" ] >,
    +OUTPUT  < [ +FORM " " ] > ].

xml-unichar1-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/�/" ] >,
    +OUTPUT  < [ +FORM ":"] > ].

xml-unichar2-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/�/" ] >,
    +OUTPUT  < [ +FORM "-"] > ].

xml-unichar3-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/�/" ] >,
    +OUTPUT  < [ +FORM "-"] > ].

xml-unichar4-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/∼/" ] >,
    +OUTPUT  < [ +FORM "~"] > ].

xml-unichar5-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/Þ/" ] >,
    +OUTPUT  < [ +FORM ""] > ].

xml-unichar6-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/¤/" ] >,
    +OUTPUT  < [ +FORM ""] > ].

xml-emph-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/<emph> /" ] >,
    +OUTPUT  < [ +FORM ""] > ].

xml-emph2-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/< emph >/" ] >,
    +OUTPUT  < [ +FORM ""] > ].

xml-emph3-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/</emph>/" ] >,
    +OUTPUT  < [ +FORM ""] > ].

xml-emph4-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/< /emph >/" ] >,
    +OUTPUT  < [ +FORM ""] > ].

xml-emph5-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/< emph etype= \" bold \" >/" ] >,
    +OUTPUT  < [ +FORM ""] > ].

xml-emph6-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/< emph etype= \" boldital \" >/" ] >,
    +OUTPUT  < [ +FORM ""] > ].

xml-linebr-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/<linebrk/>/" ] >,
    +OUTPUT  < [ +FORM ""] > ].

xml-linebr2-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/< linebrk/ >/" ] >,
    +OUTPUT  < [ +FORM ""] > ].

xml-dotfill-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/< dotfill/ >/" ] >,
    +OUTPUT  < [ +FORM "threedots"] > ].

;;;
;;; Correct spurious formatting character sequences
;;;

xml-charseq1-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/\* \* h/" ] >,
    +OUTPUT  < [ +FORM "."] > ].

xml-charseq2-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/\* \* f/" ] >,
    +OUTPUT  < [ +FORM ""] > ].

xml-charseq3-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/``./" ] >,
    +OUTPUT  < [ +FORM "."] > ].

xml-charseq4-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/, ,/" ] >,
    +OUTPUT  < [ +FORM ","] > ].

;;;
;;; separate hash sign from right-adjacent number(s)
;;;
hash-num-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/(#)([0-9])/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1} ${I1:+FORM:2}" ] > ].

;;;
;;; Replace three or more dots with token 'threedots '
;;;
threedots-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/.{3,}/" ] >,
    +OUTPUT  < [ +FORM " threedots " ] > ].

;;;
;;; replace two dots with hyphen - used for ranges as in |26 .. 62|
;;;
twodots-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/ .{2} /" ] >,
    +OUTPUT  < [ +FORM " twodots " ] > ].

;;;
;;; Replace separator line of equal signs with a period.
;;;
equalsigns-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/={3,}/" ] >,
    +OUTPUT  < [ +FORM "." ] > ].

;;;
;;; Only for robust EC, VM: drop commas (sentence-final, pauses, etc)
;;;
;final-comma-rule := inpmap-rule &
;  [ +INPUT   < [ +FORM "/,/" ] >,
;    +OUTPUT  < [ +FORM "" ] > ].

;;;
;;; _fix_me_
;;; at least for hyphens, we should introduce a notion of `bound' tokens, 
;;; e.g. |^.| for a hyphen that was stripped off from one or more tokens: 
;;; |US-led| --> |US| |^-| |led|.  this way, separating hyphens as
;;; individual tokens need not create ambiguity with the parenthetical hyphen,

;;;
;;; Collapse triple-hyphen with double-hyphen (for now), and pad on both
;;; sides with whitespace
;;;
triple-hyphen-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/-{2,3}/" ] >,
    +OUTPUT  < [ +FORM "__" ] > ].

;;;
;;; Replace |«| and |»| with |"|
;;;
euro-quote-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/?:«|»/" ] >,
    +OUTPUT  < [ +FORM "\"" ] > ].

;;;
;;; Replace – with -
;;;
norm-hyphen-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/–/" ] >,
    +OUTPUT  < [ +FORM "-" ] > ].

;;;
;;; Separate funny punctuation with whitespace on either side from the
;;; preceding and following word(s).
;;;
punct-right-space-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/([a-zA-Z0-9])([#$%~+*\)§§])+ /" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1} ${I1:+FORM:2} " ] > ].

punct-left-space-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/ ([#$%~+*§§])([a-zA-Z0-9])/" ] >,
    +OUTPUT  < [ +FORM " ${I1:+FORM:1} ${I1:+FORM:2}" ] > ].

;;;
;;; DPF 18-oct-06 - Temporarily replace |+| with |plus| for PET tokenizer bug
;;;
plus-plus-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/ +/" ] >,
    +OUTPUT  < [ +FORM " plus " ] > ].

;;;
;;; For now, simplify punctuation clusters found in subordinate quoted Ss, as
;;; in "Who arrived?, she asked"  since current suffixing machinery doesn't
;;; produce result.  Also for "... two hrs., ..." FIX
;;;
punct-cluster-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/([a-zA-Z0-9])[.?!](,)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}${I1:+FORM:2}" ] > ].

;;;
;;; Also simplify awkward clause-final clusters
;;;
punct-cluster2-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/([:])([.?])/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:2}" ] > ].

punct-cluster3-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/([\"\)])([:])/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}" ] > ].

punct-cluster4-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/([,]) ([.?])/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:2}" ] > ].

;;;
;;; Eliminate any string-initial stranded punctuation (from faulty segmentatn)
;;;
initial-punct-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/ ([;,.!\)\?\*]+) /" ] >,
    +OUTPUT  < [ +FORM " " ] > ].

;;;
;;; Eliminate space preceding double quote when space on both sides
;;; (admittedly arbitrary, and not correct for S-initial stranded quote,
;;; but this is just a patch-up for odd punctuation convention).
;;;
quote-space-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/ (\") /" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1} " ] > ].

;;;
;;; Add one more hack for sentence-final double-quote, where we've already
;;; swallowed the padded final space
;;;
final-doubleq-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/ (\")([.?!])/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}${I1:+FORM:2}" ] > ].

;;;
;;; Add white space to the right of squished commas and colons
;;; except for numbers on both sides (but separate e.g. |2-day| and |V-neck|)
;;; Same for periods between capital letters: "D.B. Smith", "2.Kim"
;;; Add white space on both sides for forward slash
;;;
squished-punct1-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/([a-zA-ZÅåØø])([,:])([a-zA-ZÅåØø])/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}${I1:+FORM:2} ${I1:+FORM:3}" ] > ].

squished-punct2-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/([0-9])([,:])([a-zA-Z])/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}${I1:+FORM:2} ${I1:+FORM:3}" ] > ].

squished-punct3-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/([0-9])(-)([a-zA-Z][a-zA-Z]+)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1} ${I1:+FORM:2} ${I1:+FORM:3}" ] > ].

squished-punct4-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/ ([a-zA-ZαβΔÅåØø])([,:-])([a-zA-Z])/" ] >,
    +OUTPUT  < [ +FORM " ${I1:+FORM:1}${I1:+FORM:2} ${I1:+FORM:3}" ] > ].

squished-punct5-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/([a-zA-Z])([,:])([0-9])/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}${I1:+FORM:2} ${I1:+FORM:3}" ] > ].

squished-punct6-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/([A-Z0-9])(\.)([A-Z])(\.)([A-Z])/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}${I1:+FORM:2} ${I1:+FORM:3}${I1:+FORM:4} ${I1:+FORM:5}" ] > ].

squished-punct7-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/([A-Z0-9])(\.)([A-Z])/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}${I1:+FORM:2} ${I1:+FORM:3}" ] > ].

squished-punct8-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/ ([A-Z])([/-])([0-9]+)/" ] >,
    +OUTPUT  < [ +FORM " IdentifierErsatz" ] > ].

squished-punct9-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/([a-zA-ZÅåØø-])([→/])([a-zA-ZÅåØø])/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1} ${I1:+FORM:2} ${I1:+FORM:3}" ] > ].

squished-punct10-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/([a-zA-ZÅåØø])(/) ([a-zA-ZÅåØø])/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1} ${I1:+FORM:2} ${I1:+FORM:3}" ] > ].

squished-punct11-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/([0-9])(/)([a-zA-ZÅåØø])/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1} ${I1:+FORM:2} ${I1:+FORM:3}" ] > ].

squished-punct12-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/([a-zA-ZÅåØø])(/)([0-9])/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1} ${I1:+FORM:2} ${I1:+FORM:3}" ] > ].

squished-punct13-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/([a-zA-Z])(-)(a)(-)([a-zA-Z0-9ÅåØø])/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1} ${I1:+FORM:2} ${I1:+FORM:3}${I1:+FORM:4} ${I1:+FORM:5}" ] > ].

squished-punct14-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/([a-zA-ZÅåØø])(-)([a-zA-Z0-9ÅåØø])/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}${I1:+FORM:2} ${I1:+FORM:3}" ] > ].

;;;
;;; Fraction with space

fraction-space-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/[0-9]+ [0-9]{1,2}\/[0-9]{1,3}/" ] >,
    +OUTPUT  < [ +FORM "FractionErsatz" ] > ].

;;;
;;; Eliminate spurious space preceding right paren and following left paren
;;;
space-paren-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/ ([\)])/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}" ] > ].

paren-space-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/([\(]) /" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}" ] > ].

;;;
;;; Parenthetical plurals - remove parens
;;;
paren-plural-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/([A-Za-z]*)\(s\)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}s" ] > ].

;;;
;;; Add white space to left of ( and [
;;;
space-lbrack-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/([a-zA-Z0-9.])([\(\[])/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1} ${I1:+FORM:2}" ] > ].

;;;
;;; Add white space around colon if sandwiched with following alphanumeric
;;; (but not e.g. |http://...| and not ratios with numbers on both sides)
;;;
squished-punct15-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/([a-zA-Z0-9.])([:])([a-zA-Z])/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1} ${I1:+FORM:2} ${I1:+FORM:3}" ] > ].

squished-punct16-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/([a-zA-Z.])([:])([a-zA-Z0-9])/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1} ${I1:+FORM:2} ${I1:+FORM:3}" ] > ].

;;;
;;; And add white space to the left of colon when followed by white space:
;;;
squished-punct17-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/([a-zA-Z0-9.åø])([:]) /" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1} ${I1:+FORM:2} " ] > ].

;;;
;;; And the variants with surrounding punctuation
;;;
squished-punct18-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/([a-zA-Z])([,/])([a-zA-Z])([.?!,;])/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}${I1:+FORM:2} ${I1:+FORM:3}${I1:+FORM:4}" ] > ].

squished-punct19-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/([0-9])([,/])([a-zA-Z])([.?!,;])/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}${I1:+FORM:2} ${I1:+FORM:3}${I1:+FORM:4}" ] > ].

squished-punct20-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/([a-zA-Z])([,/])([0-9])([.?!,;])/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}${I1:+FORM:2} ${I1:+FORM:3}${I1:+FORM:4}" ] > ].

;;;
;;; apostrophes are a bit tricky: generally, we want to separate leading and 
;;; trailing single quotes from adjacent word material, so that they become a
;;; separate token (e.g. |abrams'| --> |abrams '|); the possessive |'s|, on 
;;; the other hand, we want to separate but then consider a single token.
;;;
apostrophe-s-1-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/([sS])' /" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1} ' " ] > ].

apostrophe-s-2-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/([^ ])'[sS] /" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1} 's" ] > ].

apostrophe-s-3-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/([^ ])'[sS]([.?!,;\"])/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1} 's${I1:+FORM:2}" ] > ].

;;;
;;; split off other contracted auxiliaries
;;;
contracted-aux-ll-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/([A-Za-z]+)('|ll|LL)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}" ], [ +FORM "${I1:+FORM:2}" ] > ].

contracted-aux-d-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/([A-Za-z]+)('[dD])/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}" ], [ +FORM "${I1:+FORM:2}" ] > ].

contracted-aux-ve-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/([A-Za-z]+)('|ve|VE)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}" ], [ +FORM "${I1:+FORM:2}" ] > ].

contracted-aux-m-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/([A-Za-z]+)('[mM])/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}" ], [ +FORM "${I1:+FORM:2}" ] > ].

contracted-aux-re-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/([A-Za-z]+)('|re|RE)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}" ], [ +FORM "${I1:+FORM:2}" ] > ].

;;;
;;; Remove space after initial "O'" and "L'"
;;;
space-after-o-l-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/ ([lLO])' /" ] >,
    +OUTPUT  < [ +FORM " \1'" ] > ].

;;;
;;; Experimental: mark capitalization with preceding special character |_|
;;; but right now only for single letters used as proper names.
;;; Add special case for sequence of two capitals separated by space, since
;;; the space after the first one gets consumed by the simple rule.
;;; Exclude "I" since it's so frequent as pronoun
;;;
initial-caps-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/ ([A-HJ-Z])([.?!,;:-]?) ([A-HJ-Z])([.?!,;:-]?) /" ] >,
    +OUTPUT  < [ +FORM " ${I1:+FORM:1}${I1:+FORM:2} _${I1:+FORM:3}${I1:+FORM:4} " ] > ].

two-caps-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/ ([\(\"]?)([A-HJ-Z])([\"\)]?)([.?!,;:-]?) /" ] >,
    +OUTPUT  < [ +FORM " ${I1:+FORM:1}_${I1:+FORM:2}${I1:+FORM:3}${I1:+FORM:4} " ] > ].

;;;
;;; Dates: 12-12-2005  12-12-05  12-2005
;;;

date-1-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/[0-9]{1,2}[/-][0-9]{1,2}[/-][0-9]{4}/" ] >,
    +OUTPUT  < [ +FORM "DateErsatz" ] > ].

date-2-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/[0-9]{1,2}[/-][0-9]{1,2}[/-][0-9]{2}/" ] >,
    +OUTPUT  < [ +FORM "DateErsatz" ] > ].

date-3-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/[0-9]{1,2}[/-][0-9]{4}/" ] >,
    +OUTPUT  < [ +FORM "DateErsatz" ] > ].

;;;
;;; phone numbers; making these a little more general would require more work.
;;;

us-phone-1-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/[0-9]{3}-[0-9]{4}/" ] >,
    +OUTPUT  < [ +FORM "threefournumberersatz" ] > ].

nor-phone-1-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/plus ?47 ?[0-9]{2} ?[0-9]{2} ?[0-9]{2} ?[0-9]{2}/" ]>,
    +OUTPUT  < [ +FORM "norphoneersatz" ] > ].

;;;
;;; product number identifiers like 1234-5678 or 1234- 5678
;;;

prod-identif-1-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/[0-9]{4,}-[0-9]{4,}/" ] >,
    +OUTPUT  < [ +FORM "numberersatz" ] > ].

prod-identif-2-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/[0-9]{4,}-/" ] >,
    +OUTPUT  < [ +FORM "numberersatz" ] > ].

;;;
;;; ranges, e.g 10-20
;;;

range-1-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/[0-9]{1,3}[.]?-[0-9]{1,3}/" ] >,
    +OUTPUT  < [ +FORM "RangeoridErsatz" ] > ].

;;; 2-2.5 or 2-2,5 (European)
range-2-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/[0-9]{1,3}-[0-9]{1,3}[.,][0-9]{1,2}/" ] >,
    +OUTPUT  < [ +FORM "RangeErsatz" ] > ].

range-3-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/[0-9]{1,3}[.,][0-9]{1,2}[.]?-[0-9]{1,3}[.,][0-9]{1,2}/" ] >,
    +OUTPUT  < [ +FORM "RangeErsatz" ] > ].

;;;
;;; Decades: |in the |1970s|, at least, the world was still in order ...|
;;;

decade-1-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/1[0-9][0-9]0[sS]/" ] >,
    +OUTPUT  < [ +FORM "DecadeErsatz" ] > ].

decade-2-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/[0-9]0[sS]/" ] >,
    +OUTPUT  < [ +FORM "DecadeErsatz" ] > ].

;;;
;;; mixed alphanumerics as identifiers; for the ecommerce corpus, we know that
;;; (by convention) five- and six-digit sequences are (product) identifiers.
;;;

mixed-alphanum-1-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/[0-9]*[A-Z]+[0-9][A-Z0-9]*/" ] >,
    +OUTPUT  < [ +FORM "IdentifierErsatz" ] > ].

mixed-alphanum-2-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/[0-9]+[A-Z]+[A-Z0-9]*/" ] >,
    +OUTPUT  < [ +FORM "IdentifierErsatz" ] > ].

mixed-alphanum-3-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/[0-9]*[A-Z]+\.[A-Z]*[0-9]+/" ] >,
    +OUTPUT  < [ +FORM "IdentifierErsatz" ] > ].

mixed-alphanum-4-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/[0-9]{5,6}/" ] >,
    +OUTPUT  < [ +FORM "IdentifierErsatz" ] > ].

;;;
;;; Identifiers used in tourism
;;;
mixed-alphanum-tourism-1-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/[0-9]{1,4}[/][0-9]{1,2}/" ] >,
    +OUTPUT  < [ +FORM "IdentifierErsatz" ] > ].

mixed-alphanum-tourism-2-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/[0-9]{1,4}[-][0-9]{1,2}[-][0-9]{1,4}/" ] >,
    +OUTPUT  < [ +FORM "IdentifierErsatz" ] > ].

;;;
;;; Identifiers used in Sciborg
;;;
mixed-alphanum-sciborg-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/[?][/][b][0-9]{6}[a-z]/" ] >,
    +OUTPUT  < [ +FORM "IdentifierErsatz" ] > ].

;;;
;;; Measure NPs
;;;

measure-np-1-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/[0-9]+([m'\"]|cm|mm|σ)/" ] >,
    +OUTPUT  < [ +FORM "MeasNPErsatz" ] > ].

measure-np-2-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/[0-9]+[Kk][m]/" ] >,
    +OUTPUT  < [ +FORM "MeasNPErsatz" ] > ].

measure-np-3-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/[0-9]+[,.][0-9]+[m'\"]/" ] >,
    +OUTPUT  < [ +FORM "MeasNPErsatz" ] > ].

measure-np-4-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/[0-9]+[,.][0-9]+[Kk][m]/" ] >,
    +OUTPUT  < [ +FORM "MeasNPErsatz" ] > ].

measure-np-5-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/[0-9]+[.,-][0-9]+[m'\"]/" ] >,
    +OUTPUT  < [ +FORM "MeasNPErsatz" ] > ].

measure-np-6-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/[0-9]+[.,-][0-9]+[Kk][m]/" ] >,
    +OUTPUT  < [ +FORM "MeasNPErsatz" ] > ].

measure-np-7-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/1:[0-9][0-9][0-9]+/" ] >,
    +OUTPUT  < [ +FORM "MeasNPErsatz" ] > ].

;;;
;;; Item identifiers: 1a, 3d, 1-a  (but crucially not 1st, 2nd, 3rd)
;;;

mixed-alphanum-5-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/[0-9]+[a-zA-Z]/" ] >,
    +OUTPUT  < [ +FORM "identifierersatz" ] > ].

mixed-alphanum-6-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/[0-9]{3}[0-9]+[a-zA-Z]+/" ] >,
    +OUTPUT  < [ +FORM "identifierersatz" ] > ].

mixed-alphanum-7-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/[0-9]+[-][a-zA-Z]/" ] >,
    +OUTPUT  < [ +FORM "identifierersatz" ] > ].

;;;
;;; _fix_me_
;;; in the case of hyphens, if we have decided to strip these off in the string
;;; rewrite rules already, the ersatzing at this point may fail.  it seems one
;;; would either have to allow ersatzing at the string level too and devise an
;;; encoding scheme (using 0x1 to 0x4, say, to number ersatz occurences) that
;;; makes sure ersatzes are not mangled in further string-level processing; at
;;; the end of the day, then, look up the original surface string and put the
;;; readable ersatz into the token.                           (2-feb-02; oe)
;;;

email-1-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/[-a-zA-Z0-9]+@[-.a-zA-Z0-9]+/" ] >,
    +OUTPUT  < [ +FORM "EmailErsatz" ] > ].

;;;
;;; Fractions
;;;

fraction-1-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/[0-9]{1}\/[0-9]{1,2}st/" ] >,
    +OUTPUT  < [ +FORM "FractionErsatz" ] > ].

fraction-2-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/[0-9]{1}\/[0-9]{1,2}nd/" ] >,
    +OUTPUT  < [ +FORM "FractionErsatz" ] > ].

fraction-3-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/[0-9]{1}\/[0-9]{1,2}rd/" ] >,
    +OUTPUT  < [ +FORM "FractionErsatz" ] > ].

fraction-4-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/[0-9]{1}\/[0-9]{1,2}th/" ] >,
    +OUTPUT  < [ +FORM "FractionErsatz" ] > ].

fraction-5-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/[0-9]{1,2}\/[0-9]{1,3}/" ] >,
    +OUTPUT  < [ +FORM "FractionErsatz" ] > ].

fraction-6-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/[0-9]{1,3},[0-9]{3}/" ] >,
    +OUTPUT  < [ +FORM "FractionErsatz" ] > ].

fraction-7-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/[0-9]{1,3},[0-9]{1,3},[0-9]{3}/" ] >,
    +OUTPUT  < [ +FORM "FractionErsatz" ] > ].

;;;
;;; Comma/period separated numbers (US vs. European): 
;;; 12,000 or 5,250.00 or 1.260,90 or 1.500,-
;;;
comma-number-1-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/[0-9]{1,3}[,.][0-9]{3}/" ] >,
    +OUTPUT  < [ +FORM "NumberErsatz" ] > ].

comma-number-2-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/[0-9]{1,3}[,.][0-9]{3}[,.][0-9]{2}/" ] >,
    +OUTPUT  < [ +FORM "NumberErsatz" ] > ].

comma-number-3-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/[0-9]{1,3}[,.][0-9]{3}[,.]-/" ] >,
    +OUTPUT  < [ +FORM "NumberErsatz" ] > ].

comma-number-4-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/[0-9]{1,3}[,.][0-9]{1,3}[,.][0-9]{3}/" ] >,
    +OUTPUT  < [ +FORM "NumberErsatz" ] > ].

;;;
;;; Cardinal numerals
;;;
cardinal-1-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/[2-9]{1}/" ] >,
    +OUTPUT  < [ +FORM "onedigitersatz" ] > ].

cardinal-2-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/[0-9]{2}/" ] >,
    +OUTPUT  < [ +FORM "twodigitersatz" ] > ].

cardinal-3-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/[0-9]{3}/" ] >,
    +OUTPUT  < [ +FORM "threedigitersatz" ] > ].

cardinal-4-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/[0-9]{4}/" ] >,
    +OUTPUT  < [ +FORM "fourdigitersatz" ] > ].

cardinal-5-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/[0-9]{5}/" ] >,
    +OUTPUT  < [ +FORM "fivedigitersatz" ] > ].

cardinal-6-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/[0-9]{6}/" ] >,
    +OUTPUT  < [ +FORM "sixdigitersatz" ] > ].

cardinal-7-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/[0-9]{7}/" ] >,
    +OUTPUT  < [ +FORM "sevendigitersatz" ] > ].

cardinal-8-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/[0-9]{8}/" ] >,
    +OUTPUT  < [ +FORM "eightdigitersatz" ] > ].

cardinal-9-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/[0-9]{9}/" ] >,
    +OUTPUT  < [ +FORM "ninedigitersatz" ] > ].

cardinal-10-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/[0-9]{10}/" ] >,
    +OUTPUT  < [ +FORM "tendigitersatz" ] > ].

cardinal-11-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/[0-9]{11}/" ] >,
    +OUTPUT  < [ +FORM "elevendigitersatz" ] > ].

cardinal-12-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/[0-9]{12}/" ] >,
    +OUTPUT  < [ +FORM "twelvedigitersatz" ] > ].

cardinal-13-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/[0-9]{13,}/" ] >,
    +OUTPUT  < [ +FORM "thirteenplusdigitersatz" ] > ].

neg-digit-1-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/\-[0-9]+/" ] >,
    +OUTPUT  < [ +FORM "negdigitersatz" ] > ].

neg-decimal-1-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/\-[0-9]+.[0-9]+/" ] >,
    +OUTPUT  < [ +FORM "negdecimalersatz" ] > ].

;;;
;;; Numerical ordinals like "360th"
;;;

ordinal-1-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/1st/" ] >,
    +OUTPUT  < [ +FORM "onedigitordersatz" ] > ].

ordinal-2-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/[0-9]1st/" ] >,
    +OUTPUT  < [ +FORM "twodigitordersatz" ] > ].

ordinal-3-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/[0-9]{2}1st/" ] >,
    +OUTPUT  < [ +FORM "threedigitordersatz" ] > ].

ordinal-4-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/[0-9]{3}1st/" ] >,
    +OUTPUT  < [ +FORM "fourdigitordersatz" ] > ].

ordinal-5-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/2nd/" ] >,
    +OUTPUT  < [ +FORM "onedigitordersatz" ] > ].

ordinal-6-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/[0-9]2nd/" ] >,
    +OUTPUT  < [ +FORM "twodigitordersatz" ] > ].

ordinal-7-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/[0-9]{2}2nd/" ] >,
    +OUTPUT  < [ +FORM "threedigitordersatz" ] > ].

ordinal-8-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/[0-9]{3}2nd/" ] >,
    +OUTPUT  < [ +FORM "fourdigitordersatz" ] > ].

ordinal-9-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/3rd/" ] >,
    +OUTPUT  < [ +FORM "onedigitordersatz" ] > ].

ordinal-10-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/[0-9]3rd/" ] >,
    +OUTPUT  < [ +FORM "twodigitordersatz" ] > ].

ordinal-11-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/[0-9]{2}3rd/" ] >,
    +OUTPUT  < [ +FORM "threedigitordersatz" ] > ].

ordinal-12-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/[0-9]{3}3rd/" ] >,
    +OUTPUT  < [ +FORM "fourdigitordersatz" ] > ].

ordinal-13-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/[0-9]th/" ] >,
    +OUTPUT  < [ +FORM "onedigitordersatz" ] > ].

ordinal-14-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/[0-9]{2}th/" ] >,
    +OUTPUT  < [ +FORM "twodigitordersatz" ] > ].

ordinal-15-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/[0-9]{3}th/" ] >,
    +OUTPUT  < [ +FORM "threedigitordersatz" ] > ].

ordinal-16-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/[0-9]{4}th/" ] >,
    +OUTPUT  < [ +FORM "fourdigitordersatz" ] > ].

;;;
;;; a couple of currencies, as they occur now and again
;;;

currency-1-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/US\$/" ] >,
    +OUTPUT  < [ +FORM "currencyersatz" ] > ].

currency-2-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/HK\$/" ] >,
    +OUTPUT  < [ +FORM "currencyersatz" ] > ].

currency-3-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/C\$/" ] >,
    +OUTPUT  < [ +FORM "currencyersatz" ] > ].

;;;
;;; temperatures
;;;

temperature-1-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/[-]?[0-9]{1,3}&deg;[CF]?/" ] >,
    +OUTPUT  < [ +FORM "temperatureersatz" ] > ].

;;;
;;; times
;;;

time-1-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/[0-2]?[0-9]:[0-5][0-9]/" ] >,
    +OUTPUT  < [ +FORM "clocktimeersatz" ] > ].

time-2-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/[0-2]?[0-9].[0-5][0-9]/" ] >,
    +OUTPUT  < [ +FORM "clockordecimalersatz" ] > ].

time-3-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/[0-2]?[0-9][:.]?[0-5][0-9][aApP][mM]/" ] >,
    +OUTPUT  < [ +FORM "clocktimeersatz" ] > ].

;;;
;;; ratios, e.g. 1:50,000
;;;

ratio-1-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/[0-9]{1,3}[:][0-9]{1,3}/" ] >,
    +OUTPUT  < [ +FORM "ratioersatz" ] > ].

ratio-2-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/[0-9]{1,3}[:][0-9]{1,3},[0-9]{3}/" ] >,
    +OUTPUT  < [ +FORM "ratioersatz" ] > ].

;;;
;;; General decimal conversion, ordered after clocktime
;;;

decimal-1-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/[0-9]*\.[0-9]+/" ] >,
    +OUTPUT  < [ +FORM "decimalersatz" ] > ].

;;;
;;; Section numbers: 3.2.4
;;;

section-1-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/[0-9]+\.[0-9]+\.[0-9]+/" ] >,
    +OUTPUT  < [ +FORM "identifierersatz" ] > ].


;;; Allow decimal variant in other countries, with comma rather than period

decimal-2-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/[0-9]+\,[0-9]+/" ] >,
    +OUTPUT  < [ +FORM "decimalersatz" ] > ].

;;;
;;; email and web addresses ... lots of room for improvement   (2-jul-03; oe)
;;;

web-1-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/<?http://.*>?/" ] >,
    +OUTPUT  < [ +FORM "webersatz" ] > ].

web-2-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/<?www\.[a-zA-Z0-9.?%/_-]+>?/" ] >,
    +OUTPUT  < [ +FORM "webersatz" ] > ].

web-3-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/<?[a-zA-Z]{2,}\.[a-zA-Z]{2,}>?/" ] >,
    +OUTPUT  < [ +FORM "webersatz" ] > ].

web-4-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/<?[a-zA-Z]{2,}\.[a-zA-Z]{2,}\.[a-zA-Z]{2,}>?/" ] >,
    +OUTPUT  < [ +FORM "webersatz" ] > ].

email-2-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/<?[a-zA-Z0-9_-]{2,}@[a-zA-Z0-9._-]{2,}>?/" ] >,
    +OUTPUT  < [ +FORM "emailersatz" ] > ].

;;;
;;; reduced year names; possibly another case where, in full generality, we
;;; would have to be able to strip off the leading apostrophe first and later, 
;;; in the token-level part, introduce a tokenization alternative, re-uniting
;;; the apostrophe and two-digit year.
;;;

year-1-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/'[0-9][0-9]/" ] >,
    +OUTPUT  < [ +FORM "yearersatz" ] > ].

;;;
;;; Range of years, as in |1970-75|
;;;

year-2-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/[0-9]{3,4}-[0-9]{2,4}/" ] >,
    +OUTPUT  < [ +FORM "yearersatz" ] > ].

;;;
;;; Special treatment for two-letter abbreviations like 
;;; OR (Oregon), IN (Indiana), CO (Colorado), US, and IT
;;; And similarly for ON, OFF, as in "the ON switch"
;;;

abb-or-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/OR/" ] >,
    +OUTPUT  < [ +FORM "_OR" ] > ].

abb-in-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/IN/" ] >,
    +OUTPUT  < [ +FORM "_IN" ] > ].

abb-co-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/CO/" ] >,
    +OUTPUT  < [ +FORM "_CO" ] > ].

abb-us-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/US/" ] >,
    +OUTPUT  < [ +FORM "_US" ] > ].

abb-it-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/IT/" ] >,
    +OUTPUT  < [ +FORM "_IT" ] > ].

abb-on-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/ON/" ] >,
    +OUTPUT  < [ +FORM "_ON" ] > ].

abb-off-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/OFF/" ] >,
    +OUTPUT  < [ +FORM "_OFF" ] > ].

;;;
;;; Replace left and right angle marks with variant, to avoid communication 
;;; troubles among preprocessor, [incr tsdb()], and PET.
;;;
leftangle-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/< /" ] >,
    +OUTPUT  < [ +FORM "leftangle " ] > ].

rightangle-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/ >/" ] >,
    +OUTPUT  < [ +FORM " rightangle" ] > ].


;;;
;;;  Squished compounds
;;;

split-compound-1-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/(back)(country)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}" ], [ +FORM "${I1:+FORM:2}" ] > ].


