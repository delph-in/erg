;;; -*- Mode: tdl; Coding: utf-8; -*-

;;;
;;; Normalize surviving XML punctuation marks
;;;

xml-mdash-rule := inpmap-rule &
  [ +CONTEXT < >,
    +INPUT   < [ +FORM "/([A-Za-zÅåØøÆæ0-9]+)(&mdash;)([A-Za-zÅåØøÆæ0-9]*)/", +TNT #tnt ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}", +TNT #tnt ],
    	       [ +FORM "-", +TNT #tnt ],
	       [ +FORM "${I1:+FORM:3}", +TNT #tnt ] > ].

xml-mdash2-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/([A-Za-zÅåØøÆæ0-9]+)(& mdash;)([A-Za-zÅåØøÆæ0-9]*)/", +TNT #tnt ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}", +TNT #tnt ],
    	       [ +FORM "-", +TNT #tnt ],
	       [ +FORM "${I1:+FORM:3}", +TNT #tnt ] > ].

xml-ndash-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/([A-Za-zÅåØøÆæ0-9]+)(&ndash;)([A-Za-zÅåØøÆæ0-9]*)/", +TNT #tnt ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}", +TNT #tnt ],
    	       [ +FORM "-", +TNT #tnt ],
	       [ +FORM "${I1:+FORM:3}", +TNT #tnt ] > ].

xml-ndash2-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/([A-Za-zÅåØøÆæ0-9]+)(& ndash;)([A-Za-zÅåØøÆæ0-9]*)/", +TNT #tnt ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}", +TNT #tnt ],
    	       [ +FORM "-", +TNT #tnt ],
	       [ +FORM "${I1:+FORM:3}", +TNT #tnt ] > ].

xml-rsquote-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([A-Za-zÅåØøÆæ0-9]+)(&rsquo; s)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}'s" ] > ].

xml-rsquote2-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([A-Za-zÅåØøÆæ0-9]+)(& rsquo; s)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}'s" ] > ].

xml-rsquote3-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([A-Za-zÅåØøÆæ0-9]+)(\)(rquote s)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}'s" ] > ].

xml-rsquote4-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([A-Za-zÅåØøÆæ0-9]+)(rquote s)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}'s" ] > ].

xml-rsquotepl-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([A-Za-zÅåØøÆæ0-9]+)(&rsquo;)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}'" ] > ].

xml-rsquotepl2-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([A-Za-zÅåØøÆæ0-9]+)(& rsquo;)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}'" ] > ].

xml-rsquotepl3-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([A-Za-zÅåØøÆæ0-9]+)(\)(rquote)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}'" ] > ].

xml-rsquotepl4-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([A-Za-zÅåØøÆæ0-9]+)(rquote)/"] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}'" ] > ].

xml-rsquotepl5-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([A-Za-zÅåØøÆæ0-9]+)(\)(rquote)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}'" ] > ].

xml-rsquotepl6-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([A-Za-zÅåØøÆæ0-9]+)(\222)" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}'" ] > ].

xml-rdquote-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([A-Za-zÅåØøÆæ0-9]+)&rdquo;([.\?!,;\":\)]*)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}\"" ] > ].

xml-rdquote2-rule := inpmap-x21-rule &
  [ +INPUT   < [ +FORM "/([A-Za-zÅåØøÆæ0-9]+)&/", +TNT #tnt ],
	       [ +FORM "/rdquo;([.\?!,;\":\)]*)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}\"${I2:+FORM:1}", +TNT #tnt ] >,
    +POSITION "I1<I2" ].

xml-rdquote3-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([A-Za-zÅåØøÆæ0-9]+)\“([.\?!,;\":\)]*)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}\"${I1:+FORM:2}" ] > ].

xml-rdquote4-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([A-Za-zÅåØøÆæ0-9]+)\”([.\?!,;\":\)]*)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}\"${I1:+FORM:2}" ] > ].

xml-rdquote5-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([A-Za-zÅåØøÆæ0-9]+)â€œ([.\?!,;\":\)]*)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}\"${I1:+FORM:2}" ] > ].

xml-rdquote6-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([A-Za-zÅåØøÆæ0-9]+)â€�([.\?!,;\":\)]*)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}\"${I1:+FORM:2}" ] > ].

xml-rdquote7-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([A-Za-zÅåØøÆæ0-9]+)”/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}\"" ] > ].

xml-ldquote-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/&ldquo;([A-Za-zÅåØøÆæ0-9]+)([.\?!,;\":\)]*)/" ] >,
    +OUTPUT  < [ +FORM "\"${I1:+FORM:1}${I1:+FORM:2}" ] > ].

xml-ldquote2-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/& ldquo;([A-Za-zÅåØøÆæ0-9]+)([.\?!,;\":\)]*)/" ] >,
    +OUTPUT  < [ +FORM "\"${I1:+FORM:1}${I1:+FORM:2}" ] > ].

xml-ldquote3-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/“([A-Za-zÅåØøÆæ0-9]+)([.\?!,;\":\)]*)/" ] >,
    +OUTPUT  < [ +FORM "\"${I1:+FORM:1}${I1:+FORM:2}" ] > ].

xml-quot-init-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/&quot;([A-Za-zÅåØøÆæ0-9&]+)([.\?!,;\":\)]*)/" ] >,
    +OUTPUT  < [ +FORM "\"${I1:+FORM:1}${I1:+FORM:2}" ] > ].

xml-quot2-init-rule := inpmap-x21-rule &
  [ +INPUT   < [ +FORM "/&/" ],
	       [ +FORM "/quot;([A-Za-zÅåØøÆæ0-9&]+)([.\?!,;\":\)]*)/" ] >,
    +OUTPUT  < [ +FORM "\"${I2:+FORM:1}${I2:+FORM:2}" ] >,
    +POSITION "I1<I2" ].

xml-quot-final-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([\"A-Za-zÅåØøÆæ0-9\.]+)([.\?!,;\":\)]*)&quot;/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}${I1:+FORM:2}\"" ] > ].

xml-quot2-final-rule := inpmap-x21-rule &
  [ +INPUT   < [ +FORM "/([\"A-Za-zÅåØøÆæ0-9\.]+)([.\?!,;\":\)]*)&/" ],
               [ +FORM "/quot;/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}${I1:+FORM:2}\"" ] >,
    +POSITION "I1<I2" ].

xml-vertbar-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([A-Za-zÅåØøÆæ0-9]+)¦" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}" ] > ].

xml-apos-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([A-Za-zÅåØøÆæ0-9]+)&apos;/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}'" ] > ].

xml-apos2-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([A-Za-zÅåØøÆæ0-9]+)& apos;/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}'" ] > ].

xml-amp-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/&amp;/" ] >,
    +OUTPUT  < [ +FORM "&" ] > ].

xml-amp2-rule := inpmap-x21-rule &
  [ +INPUT   < [ +FORM "/&/" ],
               [ +FORM "/amp;/", +TNT #tnt ] >,
    +OUTPUT  < [ +FORM "&", +TNT #tnt ] >,
    +POSITION "I1<I2" ].

xml-percnt-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([A-Za-zÅåØøÆæ0-9]+)&percnt;/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}%" ] > ].

xml-percnt2-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([A-Za-zÅåØøÆæ0-9]+)& percnt;/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}%" ] > ].

xml-bull-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/&bull;/" ] >,
    +OUTPUT  < [ +FORM "" ] > ].

xml-bull2-rule := inpmap-x21-rule &
  [ +INPUT   < [ +FORM "/&/" ],
    	       [ +FORM "/bull;/" ] >,
    +OUTPUT  < [ +FORM "" ] >,
    +POSITION "I1<I2" ].

xml-sol-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/&sol;/" ] >,
    +OUTPUT  < [ +FORM "/" ] > ].

xml-sol2-rule := inpmap-x21-rule &
  [ +INPUT   < [ +FORM "/&/" ],
    	       [ +FORM "/sol;/", +TNT #tnt ] >,
    +OUTPUT  < [ +FORM "/", +TNT #tnt ] >,
    +POSITION "I1<I2" ].

xml-deg-rule := inpmap-x21-rule &
  [ +INPUT   < [ +FORM "/([0-9]+)&/" ], 
	       [ +FORM "/deg;/", +TNT #tnt ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}&deg;", +TNT #tnt ] >,
    +POSITION "I1<I2" ].

xml-deg2-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([0-9]+)°/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}&deg;" ] > ].

xml-u0020-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/\u0020/" ] >,
    +OUTPUT  < > ].

xml-unichar1-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/�/" ] >,
    +OUTPUT  < [ +FORM ":"] > ].

xml-unichar2-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/�/" ] >,
    +OUTPUT  < [ +FORM "-"] > ].

xml-unichar3-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/�/" ] >,
    +OUTPUT  < [ +FORM "-"] > ].

xml-unichar4-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/∼/" ] >,
    +OUTPUT  < [ +FORM "~"] > ].

xml-unichar5-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/Þ/" ] >,
    +OUTPUT  < > ].

xml-unichar6-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/¤/" ] >,
    +OUTPUT  < > ].

xml-emph-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/<emph>/" ] >,
    +OUTPUT  < > ].

xml-emph2-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/</" ],
    	       [ +FORM "/emph/" ],
	       [ +FORM "/>/" ] >,
    +OUTPUT  < >,
    +POSITION "I1<I2<I3" ].

xml-emph3-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/</emph>/" ] >,
    +OUTPUT  < > ].

xml-emph4-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/</" ],
    	       [ +FORM "//emph/" ],
	       [ +FORM "/>/" ] >,
    +OUTPUT  < >,
    +POSITION "I1<I2<I3" ].

xml-emph5-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/< emph etype= \" bold \" >/" ] >,
    +OUTPUT  < > ].

xml-emph6-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/< emph etype= \" boldital \" >/" ] >,
    +OUTPUT  < > ].

xml-linebr-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/<linebrk/>/" ] >,
    +OUTPUT  < > ].

xml-linebr2-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/</" ],
    	       [ +FORM "/linebrk//" ],
	       [ +FORM "/>/" ] >,
    +OUTPUT  < >,
    +POSITION "I1<I2<I3" ].

xml-dotfill-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/</" ],
    	       [ +FORM "/dotfill/", +TNT #tnt ],
	       [ +FORM "/>/" ] >,
    +OUTPUT  < [ +FORM "threedot", +TNT #tnt ] >,
    +POSITION "I1<I2<I3" ].

;;;
;;; Correct spurious formatting character sequences
;;;

xml-charseq1-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "\*" ], [ +FORM "\*" ], [ +FORM "h", +TNT #tnt ] >,
    +OUTPUT  < [ +FORM ".", +TNT #tnt ] >,
    +POSITION "I1<I2<I3" ].

xml-charseq2-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "\*" ], [ +FORM "\*" ], [ +FORM "f" ], [ +FORM "/([A-Za-zÅåØøÆæ0-9,.\?]+)/", +TNT #tnt ] >,
    +OUTPUT  < [ +FORM "${I4:+FORM:1}", +TNT #tnt ] >,
    +POSITION "I1<I2<I3<I4" ].

xml-charseq3-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/``\\./" ] >,
    +OUTPUT  < [ +FORM "."] > ].

xml-charseq4-rule := inpmap-x21-rule &
  [ +INPUT   < [ +FORM "," ], [ +FORM ",", +TNT #tnt ] >,
    +OUTPUT  < [ +FORM ",", +TNT #tnt ] >,
    +POSITION "I1<I2" ].

xml-charseq5-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "\*", +CFROM #cfrom ], [ +FORM "\*" ], [ +FORM "h", +TNT #tnt, +CTO #cto ] >,
    +OUTPUT  < [ +FORM ";", +TNT #tnt, +CFROM #cfrom, +CTO #cto ] >,
    +POSITION "I1<I2<I3" ].

xml-charseq6-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "\*", +CFROM #cfrom ], [ +FORM "\*" ], [ +FORM "f", +TNT #tnt, +CTO #cto ] >,
    +OUTPUT  < [ +FORM " ", +TNT #tnt, +CFROM #cfrom, +CTO #cto ] >,
    +POSITION "I1<I2<I3" ].

strip-char1-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([A-Za-zÅåØøÆæ0-9.\?!\)]+)( )/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}" ] > ].

strip-char2-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/( )([A-Za-zÅåØøÆæ0-9.\?!\)]+)( )/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:2}" ] > ].

;;;
;;; Replace |«| and |»| with |"|
;;;
euro-quote-left-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/«([a-zA-ZÅåØøÆæ0-9ÅåØøÆæ']*)([.\?!,;\":\)]*)/" ] >,
    +OUTPUT  < [ +FORM "\"${I1:+FORM:1}${I1:+FORM:2}" ] > ].

euro-quote-right-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([a-zA-ZÅåØøÆæ0-9ÅåØøÆæ.\?']*)»([.\?!,;\":\)]*)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}\"${I1:+FORM:2}" ] > ].

euro-quote-both-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/«([a-zA-ZÅåØøÆæ0-9ÅåØøÆæ']+)»([.\?!,;\":\)]*)/" ] >,
    +OUTPUT  < [ +FORM "\"${I1:+FORM:1}\"${I1:+FORM:2}" ] > ].

;;;
;;; separate hash sign from right-adjacent number(s)
;;;
hash-num-rule := inpmap-x12-rule &
  [ +INPUT   < [ +FORM "/(#)([0-9])+/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}" ],
       	       [ +FORM "${I1:+FORM:2}" ] > ].

;;;
;;; separate multiple dots from left host
;;;
separate-dots-rule := inpmap-x12-rule &
  [ +INPUT   < [ +FORM "/([A-Za-zÅåØøÆæ0-9]+)(\\.{3,})/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}" ],
	       [ +FORM "${I1:+FORM:2}" ] > ].

;;;
;;; Replace three or more dots with token 'threedot '
;;;
threedot-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/(['`\"])?\\.{3,}/" ] >,
    +OUTPUT  < [ +FORM "threedot" ] > ].

threedot-rule-2 := inpmap-x21-rule &
  [ +INPUT   < [ +FORM "threedot", +TNT #tnt ], 
	       [ +FORM "/\\.{2,}/" ] >,
    +OUTPUT  < [ +FORM "threedot", +TNT #tnt ] >,
    +POSITION "I1<I2" ].

;;;
;;; replace two dots with hyphen - used for ranges as in |26 .. 62|
;;;
twodot-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/\\.\\./" ] >,
    +OUTPUT  < [ +FORM "twodot" ] > ].

;;;
;;; Replace separator line of equal signs with a period.
;;;
equalsigns-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/={3,}/" ] >,
    +OUTPUT  < [ +FORM "." ] > ].

;;;
;;; Only for robust EC, VM: drop commas (sentence-final, pauses, etc)
;;;
;final-comma-rule := inpmap-x11-rule &
;  [ +INPUT   < [ +FORM "/([a-zA-ZÅåØøÆæ0-9'\\.]+),/" ] >,
;    +OUTPUT  < [ +FORM "${I1:+FORM:1}" ] > ].

;;;
;;; _fix_me_
;;; at least for hyphens, we should introduce a notion of `bound' tokens, 
;;; e.g. |^.| for a hyphen that was stripped off from one or more tokens: 
;;; |US-led| --> |US| |^-| |led|.  this way, separating hyphens as
;;; individual tokens need not create ambiguity with the parenthetical hyphen,

;;;
;;; Collapse triple-hyphen with double-hyphen (for now), and pad on both
;;; sides with whitespace
;;;
#|
triple-hyphen-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/([a-zA-ZÅåØøÆæ0-9]*)-{2,3}([a-zA-ZÅåØøÆæ0-9]*)/", +TNT #tnt ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}", +TNT #tnt ],
    	       [ +FORM "\_\_", +TNT #tnt ],
	       [ +FORM "${I1:+FORM:2}", +TNT #tnt ] > ].
|#
;;;
;;; Replace – with -
;;;

norm-hyphen-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([a-zA-ZÅåØøÆæ0-9]+)–([a-zA-ZÅåØøÆæ0-9]*)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}-${I1:+FORM:2}" ] > ].

#|
norm-hyphen-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/([a-zA-ZÅåØøÆæ0-9]+)–([a-zA-ZÅåØøÆæ0-9]*)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}-" ],
     	       [ +FORM "${I1:+FORM:2}" ] > ].
|#

;;;
;;; Separate funny punctuation with whitespace on either side from the
;;; preceding and following word(s).
;;;

punct-right-space-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/([(\\[]*)([a-zA-ZÅåØøÆæ0-9]+)([=#$%~\(§§]+)([.\?!,;\":\)]*)/", +TNT #tnt ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}${I1:+FORM:2}", +TNT #tnt ],
    	       [ +FORM "${I1:+FORM:3}${I1:+FORM:4}", +TNT #tnt ] > ].

punct-left-space-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/([(\\[]*)([=#$%~+*\)§§]+)([a-zA-ZÅåØøÆæ0-9]+)([.\?!,;\":\)]*)/", +TNT #tnt ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}${I1:+FORM:2}", +TNT #tnt ],
               [ +FORM "${I1:+FORM:3}${I1:+FORM:4}", +TNT #tnt ] > ].

;;;
;;; DPF 18-oct-06 - Temporarily replace |+| with |plus| for PET tokenizer bug
;;;
plus-plus-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/\\+/" ] >,
    +OUTPUT  < [ +FORM "plus" ] > ].

;;;
;;; For now, simplify punctuation clusters found in subordinate quoted Ss, as
;;; in "Who arrived?, she asked"  since current suffixing machinery doesn't
;;; produce result.  Also for "... two hrs., ..." FIX
;;;
punct-cluster-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([a-zA-ZÅåØøÆæ0-9]+)[.?!](,)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}${I1:+FORM:2}" ] > ].

;;;
;;; Also simplify awkward clause-final clusters
;;;

punct-cluster2-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([a-zA-ZÅåØøÆæ0-9]*)([:\\]])([.?])/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}${I1:+FORM:3}" ] > ].

punct-cluster3-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([a-zA-ZÅåØøÆæ0-9]*)([\"\)])([:])/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}${I1:+FORM:2}" ] > ].

punct-cluster4-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/([a-zA-ZÅåØøÆæ0-9]*),/", +TNT #tnt ],
      	       [ +FORM "/([.?])/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}${I2:+FORM:1}", +TNT #tnt ] >,
    +POSITION "I1<I2" ].

punct-cluster5-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([a-zA-ZÅåØøÆæ0-9]*)([.\?])([\)])/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}${I1:+FORM:2}" ] > ].

; Eliminate spurious second comma
punct-cluster6-rule := inpmap-x21-rule &
  [ +INPUT   < [ +FORM "/([a-zA-ZÅåØøÆæ0-9]*),/", +TNT #tnt ], [ +FORM "," ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1},", +TNT #tnt ] >,
    +POSITION "I1<I2" ].

; Eliminate quotes with threedots: |cats...'|
punct-cluster7-rule := inpmap-x21-rule &
  [ +INPUT   < [ +FORM "threedot", +TNT #tnt ], [ +FORM "/['\"]/" ] >,
    +OUTPUT  < [ +FORM "threedot", +TNT #tnt ] >,
    +POSITION "I1<I2" ].

punct-cluster8-rule := inpmap-x21-rule &
  [ +INPUT   < [ +FORM "/['`\"]/" ], [ +FORM "threedot", +TNT #tnt ]>,
    +OUTPUT  < [ +FORM "threedot", +TNT #tnt ] >,
    +POSITION "I1<I2" ].

;;;
;;; Eliminate spaces for pair of double quotes when space on both sides
;;;

quote-pair-space-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/([\"])/" ],
	       [ +FORM "/([a-zA-ZÅåØøÆæ0-9]+)([.?]*)/", +TNT #tnt ],
	       [ +FORM "/([\"])/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}${I2:+FORM:1}${I2:+FORM:2}${I3:+FORM:1}", +TNT #tnt ] >,
    +POSITION "I1<I2<I3" ].

;;;
;;; Add one more hack for sentence-final double-quote, where we've already
;;; swallowed the padded final space
;;;
final-doubleq-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/(\")([.?!])/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}${I1:+FORM:2}" ] > ].

;;;
;;; Add white space to the right of squished commas and colons
;;; except for numbers on both sides (but separate e.g. |2-day| and |V-neck|)
;;; Same for periods between capital letters: "D.B. Smith", "2.Kim"
;;; Add white space on both sides for forward slash
;;;
squished-punct1-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/([\(\*]*)([a-zA-ZÅåØøÆæ\\-]+)([,:])([a-zA-ZÅåØøÆæ@.\\-]+)([.\?!,;\":\)]*)/", +TNT #tnt ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}${I1:+FORM:2}${I1:+FORM:3}", +TNT #tnt ],
               [ +FORM "${I1:+FORM:4}${I1:+FORM:5}", +TNT #tnt ] > ].

squished-punct2-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/([\(]*)([0-9]+)([,:])([a-zA-ZÅåØøÆæ]+)([.\?!,;\":\)]*)/", +TNT #tnt ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}${I1:+FORM:2}${I1:+FORM:3}", +TNT #tnt ],
               [ +FORM "${I1:+FORM:4}${I1:+FORM:5}", +TNT #tnt ] > ].

squished-punct3-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/([\(]*)([0-9.]+)(-)([a-zA-ZÅåØøÆæ][a-zA-ZÅåØøÆæ-]+)([.\?!,;\":\)]*)/", +TNT #tnt ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}${I1:+FORM:2}", +TNT #tnt ],
    	       [ +FORM "${I1:+FORM:3}", +TNT #tnt ],
               [ +FORM "${I1:+FORM:4}${I1:+FORM:5}", +TNT #tnt ] > ].

#|
squished-punct4-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/([\(]*)([a-zA-ZαβΔÅåØøÆæ]+)([,:-])([a-zA-ZÅåØøÆæ]+)([.\?!,;\":\)]*)/", +TNT #tnt] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}${I1:+FORM:2}${I1:+FORM:3}", +TNT #tnt ],
               [ +FORM "${I1:+FORM:4}${I1:+FORM:5}", +TNT #tnt ] > ].
|#
squished-punct4a-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/([\(\*]*)([a-zA-ZαβΔÅåØøÆæ']+)([,:-])([a-zA-ZÅåØøÆæ']+)([.\?!,;\":\)]*)/", +TNT #tnt] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}${I1:+FORM:2}${I1:+FORM:3}", +TNT #tnt ],
               [ +FORM "${I1:+FORM:4}${I1:+FORM:5}", +TNT #tnt ] > ].

; Allow digits and "s" to right of dash, for eg "mid-1900s" and "mid-1900's"
squished-punct4b-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/([\(\*]*)([a-zA-ZαβΔÅåØøÆæ]+)([,:-])([0-9']+)s([.\?!,;\":\)]*)/", +TNT #tnt] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}${I1:+FORM:2}${I1:+FORM:3}", +TNT #tnt ],
               [ +FORM "${I1:+FORM:4}s${I1:+FORM:5}", +TNT #tnt ] > ].

squished-punct5-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/([\(]*)([a-zA-ZÅåØøÆæ]+)([,:])([0-9]+)([.\?!,;\":\)]*)/", +TNT #tnt ] >,
    +OUTPUT  < [ +FORM "$${I1:+FORM:1}{I1:+FORM:2}${I1:+FORM:3}", +TNT #tnt ],
               [ +FORM "${I1:+FORM:4}${I1:+FORM:5}", +TNT #tnt ] > ].

squished-punct6-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/([\(]*)([A-ZÅØ0-9]+)(\\.)([A-ZÅØ+])(\\.)([A-ZÅØ]+)([.\?!,;\":\)]*)/", +TNT #tnt ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}${I1:+FORM:2}${I1:+FORM:3}", +TNT #tnt ],
    	       [ +FORM "${I1:+FORM:4}${I1:+FORM:5}", +TNT #tnt ],
               [ +FORM "${I1:+FORM:6}${I1:+FORM:7}", +TNT #tnt ] > ].

squished-punct7-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/([\(]*)([A-ZÅØ0-9]+)(\\.)([A-ZÅØ]+)([.\?!,;\":\)]*)/", +TNT #tnt ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}${I1:+FORM:2}${I1:+FORM:3}", +TNT #tnt ],
               [ +FORM "${I1:+FORM:4}${I1:+FORM:5}", +TNT #tnt ] > ].

; |IL-10| and |IL-10-induced|
;
squished-punct8-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([\(]*)([A-ZÅØ]+)([./-])([0-9]+)([-A-Za-zÅåØøÆæ]*)([.\?!,;\":\)]*)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}identifierersatz${I1:+FORM:5}${I1:+FORM:6}" ] > ].

; Replace squished slash with double slash token which is limited to
; lexical conjunction.
squished-punct9-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/([\(]*)([a-zA-ZÅåØøÆæ-]+)([→/])([a-zA-ZÅåØøÆæ-]+)([.\?!,;\":\)]*)/", +TNT #tnt ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}${I1:+FORM:2}", +TNT #tnt ],
    	       [ +FORM "//", +TNT #tnt ],
               [ +FORM "${I1:+FORM:4}${I1:+FORM:5}", +TNT #tnt ] > ].

squished-punct10-rule := inpmap-x12-rule &
  [ +INPUT   < [ +FORM "/([\(]*)([a-zA-ZÅåØøÆæ]+)(/)/", +TNT #tnt ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}${I1:+FORM:2}", +TNT #tnt ],
    	       [ +FORM "${I1:+FORM:3}", +TNT #tnt ] > ].

squished-punct11-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/([\(]*)([0-9]+)(/)([a-zA-ZÅåØøÆæ]+)([.\?!,;\":\)]*)/", +TNT #tnt ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}${I1:+FORM:2}", +TNT #tnt ],
    	       [ +FORM "${I1:+FORM:3}", +TNT #tnt ],
               [ +FORM "${I1:+FORM:4}${I1:+FORM:5}", +TNT #tnt ] > ].

squished-punct12-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/([\(]*)([a-zA-ZÅåØøÆæ]=)(/)([0-9]+)([.\?!,;\":\)]*)/", +TNT #tnt ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}${I1:+FORM:2}", +TNT #tnt ],
    	       [ +FORM "${I1:+FORM:3}", +TNT #tnt ],
               [ +FORM "${I1:+FORM:4}${I1:+FORM:5}", +TNT #tnt ] > ].

squished-punct13-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/([\(]*)([a-zA-ZÅåØøÆæ]+)(-)(a)(-)([a-zA-Z0-9ÅåØøÆæ]+)([.\?!,;\":\)]*)/", +TNT #tnt ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}${I1:+FORM:2}", +TNT #tnt ],
    	       [ +FORM "${I1:+FORM:3}", +TNT #tnt ],
               [ +FORM "${I1:+FORM:4}${I1:+FORM:5}", +TNT #tnt ],
    	       [ +FORM "${I1:+FORM:6}${I1:+FORM:7}", +TNT #tnt ] > ].

squished-punct14-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/([\(]*)([a-zA-ZÅåØøÆæ]+)(-)([0-9]+)([.\?!,;\":\)]*)/", +TNT #tnt ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}identifierersatz${I1:+FORM:5}", +TNT #tnt ] > ].

squished-punct15-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/([\(\"]*)([a-zA-Z0-9ÅåØøÆæ]+)(-)([a-zA-ZÅåØøÆæ-]+)([.\?!,;\":\)]*)/", +TNT #tnt ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}${I1:+FORM:2}${I1:+FORM:3}", +TNT #tnt ],
               [ +FORM "${I1:+FORM:4}${I1:+FORM:5}", +TNT #tnt ] > ].

;;;
;;; Fraction with space
;;;

fraction-space-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/([\(]*)[0-9]+([.\?!,;\":\)]*)/", +TNT #tnt ],
    	       [ +FORM "/[0-9]{1,2}\/[0-9]{1,3}/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}fractionersatz${I1:+FORM:2}", +TNT #tnt ] >,
    +POSITION "I1<I2" ].

;;;
;;; Eliminate space for double quote when space on both sides
;;;

quote-space-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/([\"])/" ],
	       [ +FORM "/([a-zA-ZÅåØøÆæ0-9]+)([.?]*)/", +TNT #tnt ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}${I2:+FORM:1}${I2:+FORM:2}", +TNT #tnt ] >,
    +POSITION "I1<I2" ].

double_lquote-space-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/``/" ],
	       [ +FORM "/([a-zA-ZÅåØøÆæ0-9'\)\-]+)([.?,]*)/", +TNT #tnt ] >,
    +OUTPUT  < [ +FORM "\"${I2:+FORM:1}${I2:+FORM:2}", +TNT #tnt ] >,
    +POSITION "I1<I2" ].

double_lquote-space-rule-2 := inpmap-rule &
  [ +INPUT   < [ +FORM "/``([a-zA-ZÅåØøÆæ0-9'\)\-]+)([.?,]*)/", +TNT #tnt ] >,
    +OUTPUT  < [ +FORM "\"${I1:+FORM:1}${I1:+FORM:2}", +TNT #tnt ] > ].

double_rquote-space-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/([\"a-zA-ZÅåØøÆæ0-9\-]+)([.?,!]*)/", +TNT #tnt ],
	       [ +FORM "/''([.?,\)]*)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}${I1:+FORM:2}\"${I2:+FORM:1}", +TNT #tnt ] >,
    +POSITION "I1<I2" ].

double_rquote-space-b-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/([\"a-zA-ZÅåØøÆæ0-9\-]+)([.?,]*)/", +TNT #tnt ],
	       [ +FORM "/([.;,'!\?\\]\)]+)/" ],
	       [ +FORM "/''/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}${I1:+FORM:2}${I2:+FORM:1}\"", +TNT #tnt ] >,
    +POSITION "I1<I2<I3" ].

double_rquote-space-c-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/([\"a-zA-ZÅåØøÆæ0-9\-]+)([.?,]*)''/", +TNT #tnt ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}${I1:+FORM:2}\"", +TNT #tnt ] > ].

double_rquote-space-d-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/([\"a-zA-ZÅåØøÆæ0-9\-]+)\\.?''([.?,\)]+)/", +TNT #tnt ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}\"${I1:+FORM:2}", +TNT #tnt ] > ].

double_rquote-space-e-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/([.?,]+)''/", +TNT #tnt ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}\"", +TNT #tnt ] > ].

double_rquote-space-2-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/([\"a-zA-ZÅåØøÆæ0-9\-]+)([.?,]*)/", +TNT #tnt ],
	       [ +FORM "/\"/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}${I1:+FORM:2}\"", +TNT #tnt ] >,
    +POSITION "I1<I2" ].

;;;
;;; Eliminate spurious space preceding and following most punctuation marks
;;;

space-punct-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/([\(\"'`]?)([a-zA-ZÅåØøÆæ0-9!.\*\\]\)\"\-\/,\?_]+)/", +TNT #tnt ],
               [ +FORM "/([.;,'!\?\\]\)\"]+)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}${I1:+FORM:2}${I2:+FORM:1}", +TNT #tnt ]>,
    +POSITION "I1<I2" ].

paren-space-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/([\(])/" ],
	       [ +FORM "/([\"]*)([a-zA-ZÅåØøÆæ0-9]+)([:;,.!\"\?\)]*)/", +TNT #tnt ]>,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}${I2:+FORM:1}${I2:+FORM:2}${I2:+FORM:3}", +TNT #tnt ] >,
    +POSITION "I1<I2" ].

quote-qmark-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/([a-zA-ZÅåØøÆæ0-9\*\\]\"\-\/,]+)/", +TNT #tnt ],
               [ +FORM "/([\"])/" ],
	       [ +FORM "/([\?])/" ]>,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}${I2:+FORM:1}${I3:+FORM:1}", +TNT #tnt ] >,
    +POSITION "I1<I2<I3" ].

;;;
;;; Eliminate any string-initial stranded punctuation (from faulty segmentatn)
;;;
stranded-punct-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/([;,.!\)\?\\*]+)/" ],
               [ +FORM "/([a-zA-ZÅåØøÆæ0-9\\-\?]+)/", +TNT #tnt ] >,
    +OUTPUT  < [ +FORM "${I2:+FORM:1}", +TNT #tnt ] >,
    +POSITION "I1<I2" ].

solitary-punct-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/([a-zA-ZÅåØøÆæ0-9!.\)\\-\?]+)/", +TNT #tnt ], 
               [ +FORM "/([;,.!\)\\*]+)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}", +TNT #tnt ] >,
    +POSITION "I1<I2" ].

;;;
;;; Parenthetical plurals - remove parens
;;;
paren-plural-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([A-Za-zÅåØøÆæ]*)\\(s\\)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}s" ] > ].

;;;
;;; Add white space to left of ( and [
;;;
space-lbrack-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/([a-zA-ZÅåØøÆæ0-9.]+)([\(\[])/", +TNT #tnt ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}", +TNT #tnt ],
    	       [ +FORM "${I1:+FORM:2}", +TNT #tnt ] > ].
;;;
;;; Add white space around colon if sandwiched with following alphanumeric
;;; (but not e.g. |http://...| and not ratios with numbers on both sides)
;;;
squished-punct16-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/([a-zA-ZÅåØøÆæ0-9.]+)([:])([a-zA-ZÅåØøÆæ]+)/", +TNT #tnt ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}", +TNT #tnt ],
    	       [ +FORM "${I1:+FORM:2}", +TNT #tnt ],
               [ +FORM "${I1:+FORM:3}", +TNT #tnt ] > ].

squished-punct17-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/([a-zA-ZÅåØøÆæ.]+)([:])([a-zA-ZÅåØøÆæ0-9]+)/", +TNT #tnt ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}", +TNT #tnt ],
    	       [ +FORM "${I1:+FORM:2}", +TNT #tnt ],
               [ +FORM "${I1:+FORM:3}", +TNT #tnt ] > ].

;;;
;;; And add white space to the left of colon when followed by white space:
;;;
squished-punct18-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/([a-zA-ZÅåØøÆæ0-9.]+)([:])/", +TNT #tnt ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}", +TNT #tnt ],
    	       [ +FORM "${I1:+FORM:2}", +TNT #tnt ] > ].

;;;
;;; And the variants with surrounding punctuation
;;;
squished-punct19-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/([a-zA-ZÅåØøÆæ]+)([,/])([a-zA-ZÅåØøÆæ]+)([.?!,;])/", +TNT #tnt ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}${I1:+FORM:2}", +TNT #tnt ],
               [ +FORM "${I1:+FORM:3}${I1:+FORM:4}", +TNT #tnt ] > ].

squished-punct20-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/([0-9]+)([,/])([a-zA-ZÅåØøÆæ]+)([.?!,;])/", +TNT #tnt ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}${I1:+FORM:2}", +TNT #tnt ],
               [ +FORM "${I1:+FORM:3}${I1:+FORM:4}", +TNT #tnt ] > ].

squished-punct21-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/([a-zA-ZÅåØøÆæ])([,/])([0-9])([.?!,;])/", +TNT #tnt ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}${I1:+FORM:2}", +TNT #tnt ],
               [ +FORM "${I1:+FORM:3}${I1:+FORM:4}", +TNT #tnt ] > ].

;;;
;;; Add space to left of left paren and to right of right paren
;;;

squished-punct22-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/([\(]*)([a-zA-ZÅåØøÆæ]+)([\(\[])([a-zA-ZÅåØøÆæ0-9]+)([.\?!,;\":\)]*)/", +TNT #tnt ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}${I1:+FORM:2}", +TNT #tnt ],
               [ +FORM "${I1:+FORM:3}${I1:+FORM:4}${I1:+FORM:5}", +TNT #tnt ] > ].

squished-punct23-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/([\(]*)([a-zA-ZÅåØøÆæ]+)([\\]\)])([a-zA-ZÅåØøÆæ0-9]+)([.\?!,;\":\)]*)/", +TNT #tnt ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}${I1:+FORM:2}${I1:+FORM:3}", +TNT #tnt ],
               [ +FORM "${I1:+FORM:4}${I1:+FORM:5}", +TNT #tnt ] > ].

squished-punct24-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/([a-zA-ZÅåØøÆæ0-9.]+)([—])([a-zA-ZÅåØøÆæ]+)([.?,]*)/", +TNT #tnt ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}", +TNT #tnt ],
    	       [ +FORM "---", +TNT #tnt ],
               [ +FORM "${I1:+FORM:3}${I1:+FORM:4}", +TNT #tnt ] > ].

;;;
;;; apostrophes are a bit tricky: generally, we want to separate leading and 
;;; trailing single quotes from adjacent word material, so that they become a
;;; separate token (e.g. |abrams'| --> |abrams '|); the possessive |'s|, on 
;;; the other hand, we want to separate but then consider a single token.
;;;
apostrophe-s-1-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/([\(\"]?)([a-zA-XÅåØøÆæ0-9]+[sS])'/", +TNT #tnt ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}${I1:+FORM:2}", +TNT #tnt ],
    	       [ +FORM "'", +TNT #tnt ] > ].

apostrophe-s-2-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/([\(\"]?)([a-zA-XÅåØøÆæ0-9.]+)'[sS]/", +TNT #tnt ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}${I1:+FORM:2}", +TNT #tnt ],
    	       [ +FORM "'s", +TNT #tnt ] > ].

apostrophe-s-3-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/([\(\"]?)([a-zA-XÅåØøÆæ0-9]+)'[sS]([.?!,;\"])/", +TNT #tnt ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}${I1:+FORM:2}", +TNT #tnt ],
    	       [ +FORM "'s${I1:+FORM:3}", +TNT #tnt ] > ].

;;;
;;; split off other contracted auxiliaries
;;;
contracted-aux-ll-rule := inpmap-x12-rule &
  [ +INPUT   < [ +FORM "/([\(\"]?)([A-Za-zÅåØøÆæ]+)('ll|'LL)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}${I1:+FORM:2}" ], [ +FORM "${I1:+FORM:3}" ] > ].

contracted-aux-d-rule := inpmap-x12-rule &
  [ +INPUT   < [ +FORM "/([\(\"]?)([A-Za-zÅåØøÆæ]+)('[dD])/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}${I1:+FORM:2}" ], [ +FORM "${I1:+FORM:3}" ] > ].

contracted-aux-ve-rule := inpmap-x12-rule &
  [ +INPUT   < [ +FORM "/([\(\"]?)([A-Za-zÅåØøÆæ]+)('ve|'VE)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}${I1:+FORM:2}" ], [ +FORM "${I1:+FORM:3}" ] > ].

contracted-aux-m-rule := inpmap-x12-rule &
  [ +INPUT   < [ +FORM "/([\(\"]?)([A-Za-zÅåØøÆæ]+)('[mM])/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}${I1:+FORM:2}" ], [ +FORM "${I1:+FORM:3}" ] > ].

contracted-aux-re-rule := inpmap-x12-rule &
  [ +INPUT   < [ +FORM "/([\(\"]?)([A-Za-zÅåØøÆæ]+)('re|'RE)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}${I1:+FORM:2}" ], [ +FORM "${I1:+FORM:3}" ] > ].

;;;
;;; PTB repairs
;;;

contracted-neg-rule := inpmap-x21-rule &
  [ +INPUT   < [ +FORM "/([a-zA-ZÅåØøÆæ]+)/", +TNT #tnt ], [ +FORM "/n't([.\?!,;:\\-]*)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}n't${I2:+FORM:1}", +TNT #tnt ] >,
    +POSITION "I1<I2" ].

;;;
;;; Remove space after initial "O'" and "L'"
;;;
space-after-o-l-rule := inpmap-x21-rule &
  [ +INPUT   < [ +FORM "/([\(]*)([lLoO])'/", +TNT #tnt ], 
	       [ +FORM "/([a-zA-ZÅåØøÆæ]+)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}${I1:+FORM:2}'${I2:+FORM:1}", +TNT #tnt ] >,
    +POSITION "I1<I2" ].

;;;
;;; Experimental: mark capitalization with preceding special character |_|
;;; but right now only for single letters used as proper names.
;;; Add special case for sequence of two capitals separated by space, since
;;; the space after the first one gets consumed by the simple rule.
;;; Exclude "I" since it's so frequent as pronoun
;;;
initial-caps-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/([A-HJ-Z])([a-zA-ZÅåØøÆæ]+)([.?!,;:-]?)/", +TNT #tnt ],
               [ +FORM "/([A-HJ-Z])([.?!,;:-]?)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}${I1:+FORM:2}${I1:+FORM:3}", +TNT #tnt ],
    	       [ +FORM "_${I2:+FORM:1}${I2:+FORM:2}", +TNT #tnt ] >,
    +POSITION "I1<I2" ].

punct-caps-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([\(\"]?)([A-HJ-Z])([\"\)]?)([.?!,;:-]?)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}_${I1:+FORM:2}${I1:+FORM:3}${I1:+FORM:4}" ] > ].

;;;
;;; Dates: 12-12-2005  12-12-05  12-2005
;;;

date-1-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([\(]*)([0-9]{1,2}[/-][0-9]{1,2}[/-][0-9]{4})([.\?!,;\":\)]*)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}dateersatz${I1:+FORM:3}" ] > ].

date-2-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([\(]*)([0-9]{1,2}[/-][0-9]{1,2}[/-][0-9]{2})([.\?!,;\":\)]*)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}dateersatz${I1:+FORM:3}" ] > ].

date-3-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([\(]*)([0-9]{1,2}[/-][0-9]{4})([.\?!,;\":\)]*)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}dateersatz${I1:+FORM:3}" ] > ].

;;;
;;; phone numbers; making these a little more general would require more work.
;;;

us-phone-1-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([\(]*)([0-9]{3}-[0-9]{4})([.\?!,;\":\)]*)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}threefournumberersatz${I1:+FORM:3}" ] > ].

nor-phone-1-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([\(]*)(plus ?47 ?[0-9]{2} ?[0-9]{2} ?[0-9]{2} ?[0-9]{2})([.\?!,;\":\)]*)/" ]>,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}norphoneersatz${I1:+FORM:3}" ] > ].

;;;
;;; product number identifiers like 1234-5678 or 1234- 5678
;;;

prod-identif-1-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([\(]*)([0-9]{4,}-[0-9]{4,})([.\?!,;\":\)]*)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}numberersatz${I1:+FORM:3}" ] > ].

prod-identif-2-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([\(]*)([0-9]{4,}-)([.\?!,;\":\)]*)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}numberersatz${I1:+FORM:3}" ] > ].

;;;
;;; ranges, e.g 10-20
;;;

range-1-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([\(]*)([0-9]{1,3}[.]?-[0-9]{1,3})([.\?!,;\":\)]*)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}rangeoridersatz${I1:+FORM:3}" ] > ].

;;; 2-2.5 or 2-2,5 (European)
range-2-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([\(]*)([0-9]{1,3}-[0-9]{1,3}[.,][0-9]{1,2})([.\?!,;\":\)]*)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}rangeersatz${I1:+FORM:3}" ] > ].

range-3-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([\(]*)([0-9]{1,3}[.,][0-9]{1,2}[.]?-[0-9]{1,3}[.,][0-9]{1,2})([.\?!,;\":\)]*)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}rangeersatz${I1:+FORM:3}" ] > ].

range-4-rule := inpmap-x21-rule &
  [ +INPUT   < [ +FORM "/([\(]*)([IV]+)-/", +TNT #tnt ],
	       [ +FORM "/([IV]+)([.\?!,;\":\)]*)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}romanersatz${I2:+FORM:2}", +TNT #tnt ] >,
    +POSITION "I1<I2" ].

;;;
;;; Decades: |in the |1970s|, at least, the world was still in order ...|
;;;

decade-1-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([\(]*)(1[0-9][0-9]0[sS])([.\?!,;\":\)]*)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}decadeersatz${I1:+FORM:3}" ] > ].

decade-2-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([\(]*)([0-9]0[sS])([.\?!,;\":\)]*)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}decadeersatz${I1:+FORM:3}" ] > ].

;;;
;;; mixed alphanumerics as identifiers; for the ecommerce corpus, we know that
;;; (by convention) five- and six-digit sequences are (product) identifiers.
;;;

mixed-alphanum-1-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([\(]*)([0-9]*[A-ZÅØ]+[0-9][A-ZÅØ0-9]*)([.\?!,;\":\)]*)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}identifierersatz${I1:+FORM:3}" ] > ].

mixed-alphanum-2-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([\(]*)([0-9]+\\(?[A-ZÅØ]+[A-ZÅØ0-9]*)\\)?([.\?!,;\":\)]*)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}identifierersatz${I1:+FORM:3}" ] > ].

mixed-alphanum-3-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([\(]*)([0-9]*[A-ZÅØ]+\\.[A-ZÅØ]*[0-9]+)([.\?!,;\":\)]*)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}identifierersatz${I1:+FORM:3}" ] > ].

; For ecommerce data
num-id-rule := inpmap-101-rule &
  [ +CONTEXT   < [ +FORM "/([\(]*)([0-9]{5,6})([\.\?!,;\":\)]*)/",
		 +TNT #tnt ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}numidersatz${I1:+FORM:3}",
		 +TNT #tnt ] > ].

;;;
;;; Identifiers used in tourism
;;;
;mixed-alphanum-tourism-1-rule := inpmap-x11-rule &
;  [ +INPUT   < [ +FORM "/([\(]*)([0-9]{1,4}[/][0-9]{1,2})([.\?!,;\":\)]*)/" ] >,
;    +OUTPUT  < [ +FORM "${I1:+FORM:1}identifierersatz${I1:+FORM:3}" ] > ].

mixed-alphanum-tourism-2-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([\(]*)([0-9]{1,4}[-][0-9]{1,2}[-][0-9]{1,4})([.\?!,;\":\)]*)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}identifierersatz${I1:+FORM:3}" ] > ].

;;;
;;; Identifiers used in Sciborg
;;;
mixed-alphanum-sciborg-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([\(]*)([?][/][b][0-9]{6}[a-zåø])([.\?!,;\":\)]*)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}identifierersatz${I1:+FORM:3}" ] > ].

;;;
;;; Measure NPs
;;;

measure-np-1-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([\(]*)([0-9]+([m'\"]|cm|mm|σ))([.\?!,;\":\)]*)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}measnpersatz${I1:+FORM:4}" ] > ].

measure-np-2-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([\(]*)([0-9]+[Kk][m])([.\?!,;\":\)]*)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}measnpersatz${I1:+FORM:3}" ] > ].

measure-np-3-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([\(]*)([0-9]+[,.][0-9]+[m'\"])([.\?!,;\":\)]*)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}measnpersatz${I1:+FORM:3}" ] > ].

measure-np-4-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([\(]*)([0-9]+[,.][0-9]+[Kk][m])([.\?!,;\":\)]*)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}measnpersatz${I1:+FORM:3}" ] > ].

measure-np-5-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([\(]*)([0-9]+[.,-][0-9]+[m'\"])([.\?!,;\":\)]*)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}measnpersatz${I1:+FORM:3}" ] > ].

measure-np-6-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([\(]*)([0-9]+[.,-][0-9]+[Kk][m])([.\?!,;\":\)]*)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}measnpersatz${I1:+FORM:3}" ] > ].

measure-np-7-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([\(]*)(1:[0-9][0-9][0-9]+)([.\?!,;\":\)]*)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}measnpersatz${I1:+FORM:3}" ] > ].

;;;
;;; dollar ranges: |$20 - $30|
;;;

dollar-range-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "$", +TNT #tnt, +IDS #ids, +CFROM #cfrom ],
 	       [ +FORM "/([0-9]+)/" ],
 	       [ +FORM "-" ],
	       [ +FORM "$" ],
 	       [ +FORM "/([0-9]+)/", +CTO #cto ] >,
    +OUTPUT  < [ +FORM "measnpersatz", 
		 +TNT #tnt, +IDS #ids, +CFROM #cfrom, +CTO #cto ] >,
    +POSITION "I1<I2<I3<I4<I5" ].

;;;
;;; Item identifiers: 1a, 3d, 1-a  (but crucially not 1st, 2nd, 3rd)
;;;

mixed-alphanum-5-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([\(]*)([0-9]+[a-zA-ZÅåØøÆæ])([.\?!,;\":\)]*)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}identifierersatz${I1:+FORM:3}" ] > ].

mixed-alphanum-6-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([\(]*)([0-9]{3}[0-9]+[a-zA-ZÅåØøÆæ]+)([.\?!,;\":\)]*)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}identifierersatz${I1:+FORM:3}" ] > ].

mixed-alphanum-7-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([\(]*)([0-9]+[-][a-zA-ZÅåØøÆæ])([.\?!,;\":\)]*)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}identifierersatz${I1:+FORM:3}" ] > ].

mixed-alphanum-8-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([\(]*)([a-zA-ZÅåØøÆæ]+)([0-9]+)([.\?!,;\":\)]*)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}identifierersatz${I1:+FORM:4}" ] > ].

;;;
;;; _fix_me_
;;; in the case of hyphens, if we have decided to strip these off in the string
;;; rewrite rules already, the ersatzing at this point may fail.  it seems one
;;; would either have to allow ersatzing at the string level too and devise an
;;; encoding scheme (using 0x1 to 0x4, say, to number ersatz occurences) that
;;; makes sure ersatzes are not mangled in further string-level processing; at
;;; the end of the day, then, look up the original surface string and put the
;;; readable ersatz into the token.                           (2-feb-02; oe)
;;;

email-1-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([\(]*)([-a-zA-ZÅåØøÆæ0-9]+@[-.a-zA-ZÅåØøÆæ0-9]+)([.\?!,;\":\)]*)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}emailersatz${I1:+FORM:3}" ] > ].

;;;
;;; Fractions
;;;

fraction-1-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([\(]*)([0-9]{1}\/[0-9]{1,2}st)([.\?!,;\":\)]*)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}fractionersatz${I1:+FORM:3}" ] > ].

fraction-2-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([\(]*)([0-9]{1}\/[0-9]{1,2}nd)([.\?!,;\":\)]*)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}fractionersatz${I1:+FORM:3}" ] > ].

fraction-3-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([\(]*)([0-9]{1}\/[0-9]{1,2}rd)([.\?!,;\":\)]*)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}fractionersatz${I1:+FORM:3}" ] > ].

fraction-4-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([\(]*)([0-9]{1}\/[0-9]{1,2}th)([.\?!,;\":\)]*)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}fractionersatz${I1:+FORM:3}" ] > ].

fraction-5-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([\(]*)([0-9]{1,2}\/[0-9]{1,3})([.\?!,;\":\)]*)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}fractionersatz${I1:+FORM:3}" ] > ].

fraction-6-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([\(]*)([0-9]{1,3},[0-9]{3})([.\?!,;\":\)]*)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}fractionersatz${I1:+FORM:3}" ] > ].

fraction-7-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([\(]*)([0-9]{1,3},[0-9]{1,3},[0-9]{3})([.\?!,;\":\)]*)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}fractionersatz${I1:+FORM:3}" ] > ].

;;;
;;; Comma/period separated numbers (US vs. European): 
;;; 12,000 or 5,250.00 or 1.260,90 or 1.500,-
;;;
comma-number-1-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([\(]*)([0-9]{1,3}[,.][0-9]{3})([.\?!,;\":\)]*)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}numberersatz${I1:+FORM:3}" ] > ].

comma-number-2-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([\(]*)([0-9]{1,3}[,.][0-9]{3}[,.][0-9]{2})([.\?!,;\":\)]*)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}numberersatz${I1:+FORM:3}" ] > ].

comma-number-3-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([\(]*)([0-9]{1,3}[,.][0-9]{3}[,.]-)([.\?!,;\":\)]*)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}numberersatz${I1:+FORM:3}" ] > ].

comma-number-4-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([\(]*)([0-9]{1,3}[,.][0-9]{1,3}[,.][0-9]{3})([.\?!,;\":\)]*)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}numberersatz${I1:+FORM:3}" ] > ].

;;;
;;; Numerical ordinals like "360th"
;;;

ordinal-1-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([\(]*)(1st)([.\?!,;\":\)]*)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}onedigitordersatz${I1:+FORM:3}" ] > ].

ordinal-2-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([\(]*)([0-9]1st)([.\?!,;\":\)]*)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}twodigitordersatz${I1:+FORM:3}" ] > ].

ordinal-3-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([\(]*)([0-9]{2}1st)([.\?!,;\":\)]*)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}threedigitordersatz${I1:+FORM:3}" ] > ].

ordinal-4-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([\(]*)([0-9]{3}1st)([.\?!,;\":\)]*)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}fourdigitordersatz${I1:+FORM:3}" ] > ].

ordinal-5-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([\(]*)(2nd)([.\?!,;\":\)]*)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}onedigitordersatz${I1:+FORM:3}" ] > ].

ordinal-6-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([\(]*)([0-9]2nd)([.\?!,;\":\)]*)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}twodigitordersatz${I1:+FORM:3}" ] > ].

ordinal-7-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([\(]*)([0-9]{2}2nd)([.\?!,;\":\)]*)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}threedigitordersatz${I1:+FORM:3}" ] > ].

ordinal-8-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([\(]*)([0-9]{3}2nd)([.\?!,;\":\)]*)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}fourdigitordersatz${I1:+FORM:3}" ] > ].

ordinal-9-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([\(]*)(3rd)([.\?!,;\":\)]*)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}onedigitordersatz${I1:+FORM:3}" ] > ].

ordinal-10-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([\(]*)([0-9]3rd)([.\?!,;\":\)]*)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}twodigitordersatz${I1:+FORM:3}" ] > ].

ordinal-11-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([\(]*)([0-9]{2}3rd)([.\?!,;\":\)]*)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}threedigitordersatz${I1:+FORM:3}" ] > ].

ordinal-12-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([\(]*)([0-9]{3}3rd)([.\?!,;\":\)]*)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}fourdigitordersatz${I1:+FORM:3}" ] > ].

ordinal-13-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([\(]*)([0-9]th)([.\?!,;\":\)]*)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}onedigitordersatz${I1:+FORM:3}" ] > ].

ordinal-14-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([\(]*)([0-9]{2}th)([.\?!,;\":\)]*)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}twodigitordersatz${I1:+FORM:3}" ] > ].

ordinal-15-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([\(]*)([0-9]{3}th)([.\?!,;\":\)]*)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}threedigitordersatz${I1:+FORM:3}" ] > ].

ordinal-16-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([\(]*)([0-9]{4}th)([.\?!,;\":\)]*)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}fourdigitordersatz${I1:+FORM:3}" ] > ].

ordinal-17-rule := inpmap-x21-rule &
  [ +INPUT   < [ +FORM "/([\(]*)([0-9])/", +TNT #tnt ],
	       [ +FORM "/th([.\?!,;\":\)]*)/" ]>,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}onedigitordersatz${I2:+FORM:1}",
		 +TNT #tnt ] >,
    +POSITION "I1<I2" ].
               
ordinal-18-rule := inpmap-x21-rule &
  [ +INPUT   < [ +FORM "/([\(]*)([0-9]{2})/", +TNT #tnt ],
	       [ +FORM "/th([.\?!,;\":\)]*)/" ]>,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}twodigitordersatz${I2:+FORM:1}",
		 +TNT #tnt ] >,
    +POSITION "I1<I2" ].
               
ordinal-19-rule := inpmap-x21-rule &
  [ +INPUT   < [ +FORM "/([\(]*)([0-9]{3})/", +TNT #tnt ],
	       [ +FORM "/th([.\?!,;\":\)]*)/" ]>,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}threedigitordersatz${I2:+FORM:1}",
		 +TNT #tnt ] >,
    +POSITION "I1<I2" ].
               
ordinal-20-rule := inpmap-x21-rule &
  [ +INPUT   < [ +FORM "/([\(]*)([0-9]{4})/", +TNT #tnt ],
	       [ +FORM "/th([.\?!,;\":\)]*)/" ]>,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}fourdigitordersatz${I2:+FORM:1}",
		 +TNT #tnt ] >,
    +POSITION "I1<I2" ].

;;;
;;; Cardinals with parens
;;;

cardinal-1paren-rule := inpmap-101-rule &
  [ +CONTEXT < [ +FORM "/([1-9]{1})([\)])/" ] >,
    +OUTPUT  < [ +FORM "nthersatz" ] > ].

cardinal-2paren-rule := inpmap-101-rule &
  [ +CONTEXT < [ +FORM "/([\(])([1-9]{1})([\)])/" ] >,
    +OUTPUT  < [ +FORM "nthersatz" ] > ].

;;;
;;; Cardinal numerals
;;;
cardinal-1-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([\(]*)([2-9]{1})([.\?!,;\":\)]*)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}onedigitersatz${I1:+FORM:3}" ] > ].

cardinal-2-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([\(]*)([0-9]{2})([.\?!,;\":\)]*)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}twodigitersatz${I1:+FORM:3}" ] > ].

cardinal-3-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([\(]*)([0-9]{3})([.\?!,;\":\)]*)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}threedigitersatz${I1:+FORM:3}" ] > ].

cardinal-4-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([\(]*)([0-9]{4})([.\?!,;\":\)]*)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}fourdigitersatz${I1:+FORM:3}" ] > ].

cardinal-5-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([\(]*)([0-9]{5})([.\?!,;\":\)]*)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}fivedigitersatz${I1:+FORM:3}" ] > ].

cardinal-6-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([\(]*)([0-9]{6})([.\?!,;\":\)]*)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}sixdigitersatz${I1:+FORM:3}" ] > ].

cardinal-7-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([\(]*)([0-9]{7})([.\?!,;\":\)]*)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}sevendigitersatz${I1:+FORM:3}" ] > ].

cardinal-8-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([\(]*)([0-9]{8})([.\?!,;\":\)]*)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}eightdigitersatz${I1:+FORM:3}" ] > ].

cardinal-9-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([\(]*)([0-9]{9})([.\?!,;\":\)]*)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}ninedigitersatz${I1:+FORM:3}" ] > ].

cardinal-10-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([\(]*)([0-9]{10})([.\?!,;\":\)]*)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}tendigitersatz${I1:+FORM:3}" ] > ].

cardinal-11-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([\(]*)([0-9]{11})([.\?!,;\":\)]*)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}elevendigitersatz${I1:+FORM:3}" ] > ].

cardinal-12-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([\(]*)([0-9]{12})([.\?!,;\":\)]*)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}twelvedigitersatz${I1:+FORM:3}" ] > ].

cardinal-13-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([\(]*)([0-9]{13,})([.\?!,;\":\)]*)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}thirteenplusdigitersatz${I1:+FORM:3}" ] > ].

neg-digit-1-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([\(]*)(\-[0-9]+)([.\?!,;\":\)]*)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}negdigitersatz${I1:+FORM:3}" ] > ].

neg-decimal-1-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([\(]*)(\-[0-9]+.[0-9]+)([.\?!,;\":\)]*)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}negdecimalersatz${I1:+FORM:3}" ] > ].

;;;
;;; a couple of currencies, as they occur now and again
;;;

currency-1-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([\(]*)(US\$)([.\?!,;\":\)]*)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}currencyersatz${I1:+FORM:3}" ] > ].

currency-2-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([\(]*)(HK\$)([.\?!,;\":\)]*)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}currencyersatz${I1:+FORM:3}" ] > ].

currency-3-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([\(]*)(C\$)([.\?!,;\":\)]*)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}currencyersatz${I1:+FORM:3}" ] > ].

;;;
;;; temperatures
;;;

temperature-1-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([\(]*)([-]?[0-9]{1,3}&deg;[CF]?)([.\?!,;\":\)]*)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}temperatureersatz${I1:+FORM:3}" ] > ].

;;;
;;; times
;;;

time-1-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([\(]*)([0-2]?[0-9]:[0-5][0-9])([.\?!,;\":\)]*)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}clocktimeersatz${I1:+FORM:3}" ] > ].

time-2-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([\(]*)([0-2]?[0-9].[0-5][0-9])([.\?!,;\":\)]*)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}clockordecimalersatz${I1:+FORM:3}" ] > ].

time-3-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([\(]*)([0-2]?[0-9][:.]?[0-5][0-9][aApP][mM])([.\?!,;\":\)]*)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}clocktimeersatz${I1:+FORM:3}" ] > ].

;;;
;;; ratios, e.g. 1:50,000
;;;

ratio-1-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([\(]*)([0-9]{1,3}[:][0-9]{1,3})([.\?!,;\":\)]*)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}ratioersatz${I1:+FORM:3}" ] > ].

ratio-2-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([\(]*)([0-9]{1,3}[:][0-9]{1,3},[0-9]{3})([.\?!,;\":\)]*)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}ratioersatz${I1:+FORM:3}" ] > ].

;;;
;;; General decimal conversion, ordered after clocktime
;;;

decimal-1-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([\(]*)([0-9]*\\.[0-9]+)([.\?!,;\":\)]*)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}decimalersatz${I1:+FORM:3}" ] > ].

;;;
;;; Section numbers: 3.2.4
;;;

section-1-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([\(]*)([0-9]+\\.[0-9]+\\.[0-9]+)([.\?!,;\":\)]*)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}identifierersatz${I1:+FORM:3}" ] > ].


;;; Allow decimal variant in other countries, with comma rather than period

decimal-2-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([\(]*)([0-9]+\,[0-9]+)([.\?!,;\":\)]*)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}decimalersatz${I1:+FORM:3}" ] > ].

;;;
;;; email and web addresses ... lots of room for improvement   (2-jul-03; oe)
;;;

web-1-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([\(]*)(<?http:?//.*>?)([.\?!,;\":\)]*)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}webersatz${I1:+FORM:3}" ] > ].

web-2-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([\(]*)(<?www\\.[a-zA-ZÅåØøÆæ0-9.?%/_\\-~]+>?)([.\?!,;\":\)]*)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}webersatz${I1:+FORM:3}" ] > ].

web-3-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([\(]*)(<?[a-zA-ZÅåØøÆæ]{2,}\\.[a-zA-ZÅåØøÆæ]{2,}>?)([.\?!,;\":\)]*)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}webersatz${I1:+FORM:3}" ] > ].

web-4-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([\(]*)(<?[a-zA-ZÅåØøÆæ]{2,}\\.[a-zA-ZÅåØøÆæ]{2,}\\.[a-zA-ZÅåØøÆæ]{2,}>?)([.\?!,;\":\)]*)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}webersatz${I1:+FORM:3}" ] > ].

web-5-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/([\(]*)<?http/", +CFROM #cfrom ],
	       [ +FORM ":" ],
	       [ +FORM "///www.([A-Za-zÅåØøÆæ0-9\./_\\-~]+)([.\?!,;\":\)]*)/",
		 +TNT #tnt, +IDS #ids, +CTO #cto ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}webersatz${I3:+FORM:2}",
		 +TNT #tnt, +IDS #ids, +CFROM #cfrom, +CTO #cto ] > ].

email-2-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([\(\*]*)(<?[a-zA-ZÅåØøÆæ0-9_\\-]{2,}@[a-zA-ZÅåØøÆæ0-9._\\-]{2,}>?)([.\?!,;\":\)]*)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}emailersatz${I1:+FORM:3}" ] > ].

;;;
;;; reduced year names; possibly another case where, in full generality, we
;;; would have to be able to strip off the leading apostrophe first and later, 
;;; in the token-level part, introduce a tokenization alternative, re-uniting
;;; the apostrophe and two-digit year.
;;;

year-1-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([\(]*)('[0-9][0-9])([.\?!,;\":\)]*)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}yearersatz${I1:+FORM:3}" ] > ].

;;;
;;; Range of years, as in |1970-75|
;;;

year-2-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([\(]*)([0-9]{3,4}-[0-9]{2,4})([.\?!,;\":\)]*)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}yearersatz${I1:+FORM:3}" ] > ].

;;;
;;; Special treatment for two-letter abbreviations like 
;;; OR (Oregon), IN (Indiana), CO (Colorado), US, and IT
;;; And similarly for ON, OFF, as in "the ON switch"
;;;

abb-or-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([\(]*)(OR)([.\?!,;\":\)]*)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}_OR${I1:+FORM:3}" ] > ].

abb-in-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([\(]*)(IN)([.\?!,;\":\)]*)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}_IN${I1:+FORM:3}" ] > ].

abb-co-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([\(]*)(CO)([.\?!,;\":\)]*)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}_CO${I1:+FORM:3}" ] > ].

abb-us-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([\(]*)(US)([.\?!,;\":\)]*)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}_US${I1:+FORM:3}" ] > ].

abb-it-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([\(]*)(IT)([.\?!,;\":\)]*)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}_IT${I1:+FORM:3}" ] > ].

abb-on-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([\(]*)(ON)([.\?!,;\":\)]*)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}_ON${I1:+FORM:3}" ] > ].

abb-off-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([\(]*)(OFF)([.\?!,;\":\)]*)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}_OFF${I1:+FORM:3}" ] > ].

abb-is-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/([\(]*)(IS)([.\?!,;\":\)]*)/" ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}_IS${I1:+FORM:3}" ] > ].

;;;
;;; Replace left and right angle marks with variant, to avoid communication 
;;; troubles among preprocessor, [incr tsdb()], and PET.
;;;
leftangle-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/< /" ] >,
    +OUTPUT  < [ +FORM "leftangle " ] > ].

rightangle-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "/ >/" ] >,
    +OUTPUT  < [ +FORM " rightangle" ] > ].

;;;
;;;  Squished compounds
;;;

split-compound-1-rule := inpmap-rule &
  [ +INPUT   < [ +FORM "/(back)(country)/", +TNT #tnt ] >,
    +OUTPUT  < [ +FORM "${I1:+FORM:1}", +TNT #tnt ], [ +FORM "${I1:+FORM:2}", +TNT #tnt ] > ].

;;;
;;; Irregular spelling rules
;;;

#|
lie-rule := inpmap-x11-rule &
  [ +CONTEXT < [ +FORM "lay"] >,
    +OUTPUT  < [ +LEXID "$lie_v3",
		 +INFLR "$past_verb_orule" ] > ].

put-rule := inpmap-x11-rule &
  [ +CONTEXT < [ +FORM "put"] >,
    +OUTPUT  < [ +STEM "put",
		 +INFLR "$past_verb_orule" ] > ].
|#

;;;
;;; Assign +CLASS for words with leading uppercase, so we keep these unknowns.
;;; But for now, not on sentence initial words.
;;;

mixed-case-proper-1-rule := inpmap-rule &
   [ +CONTEXT < [ ] >,
     +INPUT   < [ +FORM "/([A-ZÅØ])([A-Za-zÅåØøÆæ0-9,.\?]+)/",
		  +TNT #tnt & [ +TAGS.FIRST "NNP" ],
		  +IDS #ids, +CFROM #cfrom, +CTO #cto ] >,
     +OUTPUT  < [ +FORM "${I1:+FORM:1}${I1:+FORM:2}",
		  +CLASS initcap,
		  +TNT #tnt, +IDS #ids, +CFROM #cfrom, +CTO #cto ] >,
     +POSITION "C1<I1"  ].

mixed-case-proper-2-rule := inpmap-rule &
   [ +CONTEXT < [ ] >,
     +INPUT  < [ +FORM "/([A-ZÅØ])([A-Za-zÅåØøÆæ0-9,.\?]+)/",
	 	 +TNT #tnt & [ +TAGS.REST.FIRST "NNP" ],
		 +IDS #ids, +CFROM #cfrom, +CTO #cto ] >,
     +OUTPUT  < [ +FORM "${I1:+FORM:1}${I1:+FORM:2}",
		  +CLASS initcap,
		  +TNT #tnt, +IDS #ids, +CFROM #cfrom, +CTO #cto ] >,
     +POSITION "C1<I1"  ].

;;;
;;; Make everything remaining be lower case - see GG
;;;

lower-case-rule := inpmap-011-rule &
   [ +INPUT   < [ +FORM "/(.*[A-ZÄÖÜØÅ].*)/" ] > ,
     +OUTPUT  < [ +FORM "${lc(I1:+FORM:1)}" ] > ].

;;;
;;; Spelling correction
;;;

everytime-rule := inpmap-x12-rule &
  [ +INPUT   < [ +FORM "everytime"] >,
    +OUTPUT  < [ +FORM "every" ],
	       [ +FORM "time" ] > ].

dont-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "dont"] >,
    +OUTPUT  < [ +FORM "don't" ] > ].

wont-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "wont"] >,
    +OUTPUT  < [ +FORM "won't" ] > ].

recieve-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "recieve"] >,
    +OUTPUT  < [ +FORM "receive" ] > ].

labled-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "labled"] >,
    +OUTPUT  < [ +FORM "labeled" ] > ].

didnt-rule := inpmap-x11-rule &
  [ +INPUT   < [ +FORM "didn;t"] >,
    +OUTPUT  < [ +FORM "didn't" ] > ].

didnt-rule-2 := inpmap-x21-rule &
  [ +INPUT   < [ +FORM "didn;", +TNT #tnt],
	       [ +FORM "t"]>,
    +OUTPUT  < [ +FORM "didn't", +TNT #tnt ] >,
    +POSITION "I1<I2" ].

;;;
;;; create input item for each TNT reading:
;;; All but the last tag will give rise to a token for unknown word, since
;;; the +PRED value is constrained to generic_unk_rel, only consistent with
;;; non-native lexical entries.  This ensures that only one native-compatible
;;; token will be posited for each chart cell, and we ignore POS constraints
;;; for native entries.
;;;

explode-tnt-rule := inpmap-012-rule &
  [ +INPUT   < [ +FORM #form ,
		 +CLASS #class,
                 +TNT.+TAGS [ FIRST #tag , REST #tagrest & *cons* ],
                 +TNT.+PRBS [ FIRST #prb , REST #prbrest & *cons* ] ] > ,
    +OUTPUT  < [ +FORM #form,
		 +CLASS #class,
		 +PRED generic_unk_rel,
                 +TNT.+TAGS < #tag >,
                 +TNT.+PRBS < #prb > ] ,
               [ +FORM #form,
		 +CLASS #class,
                 +TNT.+TAGS #tagrest,
                 +TNT.+PRBS #prbrest ] > ,
    +POSITION "O1=O2" ].

assign-default-class := inpmap-rule &  
  [ +INPUT   < [ +FORM #form,
		 +CLASS noclass, +PRED #pred,
                 +TNT #tnt, +IDS #ids, +CFROM #cfrom, +CTO #cto ] >,
    +OUTPUT  < [ +FORM #form,
		 +CLASS loweralpha, +PRED #pred,
                 +TNT #tnt, +IDS #ids, +CFROM #cfrom, +CTO #cto ] > ].
