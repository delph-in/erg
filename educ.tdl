;;; -*- Mode: tdl; Coding: utf-8; -*-
;;;
;;;  Copyright (c) 1994-2018
;;;    Dan Flickinger, Rob Malouf, Emily M. Bender
;;;    see LICENSE for conditions
;;;
;;;  english.tdl
;;;
;;;  Top-level load file for PET for the English grammar
;;;
;;;  File created: 3-Nov-94 by Rob Malouf
;;;
;;;  $Id: english.tdl 6583 2009-06-03 12:18:27Z oe $

:begin :type.

;;
;;  Basic definitions and macros
;;

:include "fundamentals".

;;
;;  Lexical types (i.e., primitive word classes)
;;

:include "lextypes".

;;
;; token mapping: manipulate the token lattice prior to lexical look-up
;;
:include "tmt".
:begin :instance :status token-mapping-rule.
;;:include "tmr/ner".
:include "tmr/gml".
:include "tmr/ptb".
;; Comment out so we can catch these as robust errors
;;:include "tmr/spelling".
:include "tmr/ne1".
:include "educ/tmr-ne-educ".
:include "tmr/split".
:include "tmr/ne2".
:include "tmr/class".
:include "tmr/ne3".
:include "educ/tmr-educ".
:include "tmr/punctuation".
:include "tmr/pos".
;:include "tmr/bridge".
:include "tmr/finis".
:end :instance.

:begin :instance :status post-generation-mapping-rule.
:include "tmr/post-generation".
:end :instance.

;;
;; lexical filtering: reduce the chart after lexical instantiation and the
;; application of lexical rules, right before we turn loose syntactic rules.
;;
:begin :instance :status lexical-filtering-rule.
:include "lfr.tdl".
:include "educ/lfr-educ.tdl".
:end :instance.

;;
;;  Syntactic rules
;;

:include "syntax".
:include "educ/syntax-mask".
:include "ctype".
:include "educ/ctype-educ".

;;
;;  Lexical rules
;;

:include "lexrules".

;; Dependency annotation support for rule types

;;:include "dts".

;; Delimiters (strong and weak brackets)

:include "delims".

:include "auxverbs".

:include "letypes".

:include "educ/lextypes-educ".
:include "educ/sempos".

:include "educ/letypes-mask".
:include "educ/letypes-mal".

:end :type.

;;
;; Lexicon entries (instances of status lex-entry or generic-lex-entry)
;;

:begin :instance :status lex-entry.
:include "lexicon".
:include "lexicon-rbst".
:include "educ/lexicon-mal".
:include "educ/lexicon-mask".
:include "ple".
:include "educ/ple-educ".
:end :instance.

:begin :instance :status generic-lex-entry.
:include "gle".
:include "educ/gle-educ".
:end :instance.

;;
;; grammar rules and lexical rules (instances of status rule)
;;

:begin :instance :status rule.
:include "constructions".
:include "educ/constr-mask".
:include "educ/constr-mal".
:end :instance.

:begin :instance :status lex-rule.
:include "inflr".
:include "educ/lexrinst-mask".
:include "educ/lexrinst-mal".
:include "educ/lexrinst-tok".
:end :instance.

;;
;; parse-tree labels (instances)
;;

:begin :instance.
:include "parse-nodes".
:end :instance.

;;
;; start symbols of the grammar (instances)
;;

:begin :instance.
:include "roots".
:include "educ/roots-educ".
:end :instance.



