;;; -*- Mode: tdl; Coding: utf-8; -*-
;;;
;;;  Copyright Emily M. Bender 2003-2005
;;;  All Rights Reserved.
;;;  No use or redistribution without permission.
;;;
;;;  mal-lex.tdl
;;;
;;;  mal lex entries for Arboretum project.
;;;

; Underspecified determiner for repairing bare singular
; NPs in generation.  Note the special KEY.

a_or_the_det_rbst := d_-_sg-nmd_le &
  [ ORTH < "a/the" >,
    SYNSEM [ LKEYS.KEYREL.PRED mal_bare_div_q_rel,
	     PHON.ONSET voc ] ].

; Exclude for now - too much ambiguity
#|
; For extraneous determiner
an_some_rbst := mal_det_div_le &
 [ ORTH < "an" >,
   SYNSEM [ LKEYS.KEYREL.PRED _some_q_rel,
	    PHON.ONSET voc ] ].

a_some_rbst := mal_det_div_le &
 [ ORTH < "a" >,
   SYNSEM [ LKEYS.KEYREL.PRED _some_q_rel,
	    PHON.ONSET voc ] ].
|#

; Mal lex entry for "allow" taking a CP complement
; with gerund meaning.

allow_v_rbst := mal_v_inf_cp_comp_le &
  [ ORTH < "allow" >,
    SYNSEM [ LKEYS.KEYREL.PRED "_allow_v_1_rel",
	     PHON.ONSET voc ] ].

apple_fruit_n1_rbst := n_-_c_le &
 [ ORTH < "apple", "fruit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_apple+fruit_n_1_rel",
            PHON.ONSET voc ],
   GENRE robust ].

be_th_cop_is_rbst := mal_vc_there_is_le &
 [ ORTH < "is" >,
   SYNSEM.PHON.ONSET voc ].

be_th_cop_are_rbst := mal_vc_there_are_le &
 [ ORTH < "are" >,
   SYNSEM.PHON.ONSET voc ].

be_th_cop_was_rbst := mal_vc_there_was_le &
 [ ORTH < "was" >,
   SYNSEM.PHON.ONSET con ].

be_th_cop_were_rbst := mal_vc_there_were_le &
 [ ORTH < "were" >,
   SYNSEM.PHON.ONSET con ].

be_c_is_rbst := mal_vc_prd_is_le &
 [ ORTH < "is" >,
   SYNSEM.PHON.ONSET voc ].

be_c_are_rbst := mal_vc_prd_are_le &
 [ ORTH < "are" >,
   SYNSEM.PHON.ONSET voc ].

be_c_was_rbst := mal_vc_prd_was_le &
 [ ORTH < "was" >,
   SYNSEM.PHON.ONSET con ].

be_c_were_rbst := mal_vc_prd_were_le &
 [ ORTH < "were" >,
   SYNSEM.PHON.ONSET con ].

be_c_be_rbst := mal_vc_prd_be_le &
 [ ORTH < "be" >,
   SYNSEM.PHON.ONSET con ].

be_c_been_rbst := mal_vc_prd_be_le &
 [ ORTH < "been" >,
   SYNSEM.PHON.ONSET con ].

be_np_be_rbst := mal_vc_np_be_le &
 [ ORTH < "be" >,
   SYNSEM.PHON.ONSET con ].

be_np_been_rbst := mal_vc_np_be_le &
 [ ORTH < "been" >,
   SYNSEM.PHON.ONSET con ].

; Inflected forms of do

does1_neg_1_rbst := mal_va_doesnt_neg_pres_le &
 [ ORTH < "don't" >,
   SYNSEM.PHON.ONSET con ].

does1_neg_2_rbst := mal_va_doesnt_neg_pres_le &
 [ ORTH < "don", "'t" >,
   SYNSEM.PHON.ONSET con ].

do1_pos_sg_rbst := mal_va_does_le &
 [ ORTH < "do" >,
   SYNSEM.PHON.ONSET con ].

do1_neg_1_rbst := mal_va_dont_neg_pres_le &
 [ ORTH < "doesn't" >,
   SYNSEM.PHON.ONSET con ].

do1_neg_2_rbst := mal_va_dont_neg_pres_le &
 [ ORTH < "doesn", "'t" >,
   SYNSEM.PHON.ONSET con ].

does1_pos_pl_rbst := mal_va_do_fin_le &
 [ ORTH < "does" >,
   SYNSEM.PHON.ONSET con ].

dog_weekend_n1_rbst := n_-_c_le &
 [ ORTH < "dog", "weekend" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dog+weekend_n_1_rel",
            PHON.ONSET con ],
   GENRE robust ].

dog_puppy_n1_rbst := n_-_c_le &
 [ ORTH < "dog", "puppy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dog+puppy_n_1_rel",
            PHON.ONSET con ],
   GENRE robust ].

hamster_pet_n1_rbst := n_-_c_le &
 [ ORTH < "hamster", "pet" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hamster+pet_n_1_rel",
            PHON.ONSET con ],
   GENRE robust ].

has_aux_rbst := mal_va_has_le &
 [ ORTH < "have" >,
   SYNSEM.PHON.ONSET con ].

have_fin_aux_rbst := mal_va_have_fin_le &
 [ ORTH < "has" >,
   SYNSEM.PHON.ONSET con ].

people_n1_rbst := mal_n_plur_ppcomp_le &
 [ ORTH < "peoples" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
		    KEYREL.PRED "_people_n_rel" ],
	    PHON.ONSET con ] ].

picture_story_n1_rbst := n_-_c_le &
 [ ORTH < "picture", "story" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_picture+story_n_1_rel",
            PHON.ONSET con ],
   GENRE robust ].

pizza_pepperoni_n1_rbst := n_-_m_le &
 [ ORTH < "pizza", "pepperoni" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pizza+pepperoni_n_1_rel",
            PHON.ONSET con ],
   GENRE robust ].

#|
soccer_n1_rbst := n_-_m_le &
 [ ORTH < "soccer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_soccer_n_1_rel",
            LOCAL.CAT.VAL.SPR < expressed_synsem >,
            PHON.ONSET con ],
   GENRE robust ].
|#

; For proper names
the_prop_1_rbst := d_-_the-rbst_le &
 [ ORTH < "the" >,
   SYNSEM [ LOCAL.CAT.VAL.SPEC < [ --MIN named_np_rel,
				   LOCAL.AGR.PNG.PN 3s ] >,
	    LKEYS.KEYREL.PRED _the_q_prop_rel,
            PHON.ONSET con ] ].

they+that_rbst := mal_n_deictic_pro_le &
 [ ORTH < "they/that" >,
   SYNSEM [ LKEYS.ALTKEYREL.PRED _they+that_q_mal_rel,
	    PHON.ONSET con ] ].

that_det_rbst := mal_det_pl_le &
 [ ORTH < "that" >,
   SYNSEM [ LKEYS.KEYREL.PRED _those_q_dem_rel,
	    PHON.ONSET con ] ].

this_det_rbst := mal_det_pl_le &
 [ ORTH < "this" >,
   SYNSEM [ LKEYS.KEYREL.PRED _these_q_dem_rel,
	    PHON.ONSET con ] ].

#|
trip_v1_rbst := v_-_unacc_le &
 [ ORTH < "trip" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_trip_v_1_rel",
	    PHON.ONSET con ],
   GENRE robust ].
|#

; "I want arrive"

want_v_rbst := mal_v_subj_equi_le &
  [ ORTH < "want" >,
    SYNSEM [ LKEYS.KEYREL.PRED "_want_v_1_rel",
	     PHON.ONSET con ] ].

work_n1_rbst := n_-_m_le &
 [ ORTH < "work" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_work_n_1_rel",
            LOCAL.CAT.VAL.SPR < [ LOCAL.CAT.HEAD.MINORS.ALTMIN def_q_rel ] >,
            PHON.ONSET con ],
   GENRE robust ].

