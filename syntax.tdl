;;; -*- Mode: TDL; Package: DISCO -*-
;;;
;;;  Copyright Daniel Flickinger 1994-1999
;;;  All Rights Reserved.
;;;  No use or redistribution without permission.
;;;
;;;  syntax.tdl
;;;
;;;  The grammar rules for English
;;;
;;;  Created: Rob Malouf, 3-Nov-1994
;;;
;;;  $Id$

:begin :type.

;;
;;  Phrase structure schemata
;;

; Headed phrases must obey the Head Feature Principle and the Revised Marking
; Principle.  They do not all obey the NLFP with respect to QUE, but it
; appears that all CLAUSE phrases account for QUE on mother and non-head-dtr.
; Hence moved the QUE coreference to NON-CLAUSE.  Headed phrases also identify
; the value of AGR on mother and head daughter, unlike e.g. the coordelination
; schemata which identify HEAD but not AGR.

headed_phrase := phrase & 
  [ ROOT -,
    SYNSEM.LOCAL [ CAT.HEAD head & #head,
                   AGR #agr,
		   CONJ #conj,
		   KEYS.KEY #key ],
    HEAD-DTR.SYNSEM.LOCAL local &
		 [ CAT.HEAD #head,
                   AGR #agr,
		   CONJ #conj,
		   KEYS.KEY #key ] ].

non_headed_phrase := phrase &
  [ ROOT - ].

; Most but not all phrases have SYNSEM phr_synsem; head_complement constructions
; have their SYNSEM type determined by the head-dtr.

phrasal := phrase &
  [ SYNSEM phr_synsem ].

; Head/nexus phrases pass up the REL and QUE values of the head daughter
; (which has amalgamated the REL and QUE values of its arguments a la Ivan's
; relative clause paper) to the mother.  

head_nexus_rel_phrase := headed_phrase &
  [ SYNSEM.NON-LOCAL.REL #rel,
    HEAD-DTR.SYNSEM.NON-LOCAL.REL #rel ].

head_nexus_que_phrase := headed_phrase &
  [ SYNSEM.NON-LOCAL.QUE #que,
    HEAD-DTR.SYNSEM.NON-LOCAL.QUE #que ].

head_nexus_phrase := head_nexus_rel_phrase & head_nexus_que_phrase.

; In a head/local dependent phrase, the SLASH feature of the mother is
; token-identical to that of the head daughter, which has already amalgamated
; the SLASH values of its arguments.  See discussion of head_nexus_phrase for
; treatment of REL and QUE.

head_valence_phrase := head_nexus_phrase &
  [ SYNSEM.NON-LOCAL.SLASH #slash,
    HEAD-DTR.SYNSEM.NON-LOCAL.SLASH #slash ].

; All phrases are either unary or binary.

unary_phrase := phrase &
  [ INFLECTED +,
    STEM #stem,
    SYNSEM.LOCAL.CONT [ LISZT *diff-list* &
			      [ LIST #first,
				LAST #last ],
			H-CONS *diff-list* &
			      [ LIST #scfirst,
				LAST #sclast ],
			TOP-H #top & handle ],
    C-CONT [ LISZT [ LIST #middle,
		     LAST #last ],
	     H-CONS [ LIST #scmiddle,
		      LAST #sclast ] ],
    ARGS < sign & [ INFLECTED +,
		    STEM #stem,
                    SYNSEM.LOCAL local &
				 [ CONT [ LISZT *diff-list* &
						[ LIST #first,
						  LAST #middle ],
					  H-CONS *diff-list* &
						[ LIST #scfirst,
						  LAST #scmiddle ],
                                          TOP-H #top ] ],
                    ROOT - ] > ].

binary_phrase := phrase &
  [ INFLECTED +,
    SYNSEM.LOCAL.CONT [ LISZT *diff-list* &
			      [ LIST #first,
				LAST #last ],
			H-CONS *diff-list* &
			      [ LIST #scfirst,
				LAST #sclast ],
			TOP-H #top & handle ],
    C-CONT [ LISZT *diff-list* & 
		   [ LIST #middle2,
		     LAST #last ],
	     H-CONS *diff-list* &
		   [ LIST #scmiddle2,
		     LAST #sclast ] ],
    ARGS < sign & [ INFLECTED +,
		    ROOT -,
                    SYNSEM.LOCAL local &
				 [ CONT [ LISZT *diff-list* &
						[ LIST #first,
						  LAST #middle1 ],
					  H-CONS *diff-list* &
						[ LIST #scfirst,
						  LAST #scmiddle1 ],
					  TOP-H #top ] ] ],
	   sign & [ INFLECTED +,
		    ROOT -,
                    SYNSEM.LOCAL local &
				 [ CONT [ LISZT *diff-list* &
						[ LIST #middle1,
						  LAST #middle2 ],
					  H-CONS *diff-list* &
						[ LIST #scmiddle1,
						  LAST #scmiddle2 ],
					  TOP-H #top ] ] ] > ].

binary_headed_phrase := headed_phrase & binary_phrase &
  [ NON-HEAD-DTR sign ].

binary_rule_left_to_right := rule &
  [ ARGS < [ KEY-ARG + ] , [ KEY-ARG bool ] > ].

binary_rule_right_to_left := rule &
  [ ARGS < [ KEY-ARG bool ], [ KEY-ARG + ] > ].

head_only := unary_phrase & headed_phrase &
  [ HEAD-DTR #head & [ SYNSEM.LOCAL.CONJ cnil ],
    ARGS < #head > ].

head_initial := binary_headed_phrase &
  [ HEAD-DTR #head,
    NON-HEAD-DTR #non-head & [ SYNSEM.LOCAL.CONJ cnil ],
    ARGS < #head, #non-head > ].

head_final := binary_headed_phrase &
  [ HEAD-DTR #head,
    NON-HEAD-DTR #non-head & [ SYNSEM.LOCAL.CONJ cnil ],
    ARGS < #non-head, #head > ].

; C-CONT is the semantic contribution of the phrase itself.  The handle and
; index of the phrase come from the handle and index of C-CONT (which are
; possibly but not necessarily identified with the handle and index of one of
; the daughters).  The liszt of the phrase is the append of the liszt of
; C-CONT and the liszts of the daughters.

head_compositional := headed_phrase &
  [ C-CONT [ TOP #hand,
	     INDEX #index ],
    HEAD-DTR.SYNSEM.LOCAL.CONT [ TOP #hand,
				 INDEX #index ] ].

non_clause := head_nexus_phrase &
  [ SYNSEM.LOCAL [ CAT.MC na,
		   KEYS.MESSAGE 0-dlist ] ].



; ERB (05-10-97) The immediate subtypes of clause are now rel_cl and
; non_rel_clause.  The latter groups together decl, imp, and (wh_)interrog,
; which are similar in that they can't serve as modifiers and have empty REL
; values.  That type used to be (misleadingly) named msg_clause.  The
; remaining constraint (MESSAGE message) has been moved to the type clause
; where it belongs.

; We will need to loosen this to allow nominal clauses (i.e., ACC-ing gerunds)

clause := phrasal &
  [ SYNSEM [ LOCAL [ CAT [ HEAD v_or_g,
			   VAL.COMPS *olist* ],
		     CONJ cnil ],
	     NON-LOCAL.QUE 0-dlist ] ].

mc_phrase := phrase &
  [ SYNSEM [ LOCAL.CAT.MC +,
	     NON-LOCAL [ SLASH 0-dlist,
			 QUE 0-dlist ] ] ].

; The [MC bool] constraint lives here rather than on clause because we want
; to treat relative clauses as clauses, but we need to distinguish them as the
; only clauses which can serve as modifiers.  That is, on the one hand we need
; to distinguish relative clauses from ordinary finite subj_head declaratives, 
; where both have a non-empty MOD value, but only the former can appear in a
; head-modifier phrase; and on the other hand we need to distinguish
; extracted-subject finite clauses from ordinary finite S/NP clauses, since 
; only the latter can be the dtr in a thatless-relative construction.  So the
; head-adjunct rule says the adjunct must be [MC na], and the thatless_rel
; rule says the dtr must be [MC +].

non_rel_clause := head_nexus_rel_phrase & clause &
  [ SYNSEM [ LOCAL.KEYS.MESSAGE 1-dlist &
			  <! message & #msg &
				   [ HANDEL #mhand,
				     SOA #soahand ] !>,
	     NON-LOCAL.REL 0-dlist ],
    HEAD-DTR.SYNSEM [ LOCAL.CONT [ TOP #hdhand,
				   INDEX #ind ],
		      NON-LOCAL [ QUE 0-dlist,
				  REL 0-dlist ] ],
    C-CONT [ TOP #mhand,
	     INDEX #ind,
	     LISZT.LIST < #msg, ... >,
	     H-CONS <! qeq &
		     [ SC-ARG #soahand,
		       OUTSCPD #hdhand ] !> ] ].

decl := non_rel_clause & 
  [ SYNSEM.LOCAL [ CAT [ HEAD.INV -,
			 MC bool ],
		   KEYS.MESSAGE 1-dlist &
				<! prpstn_rel !> ],
    C-CONT.LISZT <! relation !> ].

; Added [SYNSEM..SPR < >] on imp to preserve intended constraints on modifiers
; which only attach to VP and N-bar.
; HACK - DPF 3-Oct-99 - For more useful Verbmobil fragments, constrained the
; daughter to be phrasal, blocking one-word imperatives.

imp := non_rel_clause & head_valence_phrase & head_only &
  [ SYNSEM.LOCAL [ CAT [ HEAD [ INV -,
				VFORM imp_vform,
				TENSE pres+noasp ],
			 VAL [ SUBJ < >,
			       SPR < >,
			       COMPS < > ],
			 MC + ],
		   KEYS.MESSAGE 1-dlist &
		       <! imp_rel !> ],
    C-CONT.LISZT <! relation,
		    pron_rel & [ HANDEL #hand,
				 INST #inst & full_ref-ind &
				      [ PRONTYPE zero_pron ] ] !>,
    HEAD-DTR.SYNSEM [ LOCAL [ CAT [ HEAD verb,
				    MC na,
				    VAL [ SUBJ < unexpressed &
					       [ LOCAL.CONT.INDEX #inst &
							   [ PNG.PN 2per ] ] >,
					  COMPS *olist* ] ],
			      KEYS.KEY.HANDEL #hand ] ] ].


; ERB (05-10-97) There is no longer a subtype of interrog for polar questions,
; as a result of streamlining the hcomp family (subordinate polar questions
; didn't inherit from the old ynq type anyway).  So interrog and its sole
; subtype wh_interrog could be collapsed into each other, but it seems clearer
; to have the separate.  I don't know what the effect of losing the constraint
; on SLASH in matrix polar questions will be.

interrog := non_rel_clause & 
  [ SYNSEM [ LOCAL.KEYS.MESSAGE 1-dlist &
				<! int_rel !>,
	     NON-LOCAL.SLASH 0-dlist ],
    C-CONT.LISZT <! relation !> ].

; Restrict NON-HEAD-DTR to be [HEAD subst] to avoid trying non-partitive
; determiner "whose" as filler in filler-head-wh rules.  Assume all
; wh-interrog phrases are [MOOD ind_or_mod_subj].


wh_interrog := interrog & binary_headed_phrase &
  [ SYNSEM.LOCAL [ CAT [ HEAD verbal &
			      [ MOOD ind_or_mod_subj & strict_sort ] ],
		   KEYS.MESSAGE 1-dlist &
		       <! [ PARAMS <! #que & handle !> ] !> ],
    NON-HEAD-DTR.SYNSEM [ LOCAL.CAT.HEAD subst,
			  NON-LOCAL.QUE 1-dlist &
					[ LIST < #que > ] ] ].

; This type has subtypes for filler_head.  If we assumed only
; finite subj_head phrases, and explicitly made the relevant filler_head
; phrases be finite (which we do), we wouldn't have to stipulate VFORM here.

wh_interrog_fin := wh_interrog &
  [ SYNSEM.LOCAL.CAT [ HEAD verb & [ VFORM fin,
				     TENSE tense ],
		       VAL.SUBJ *olist*,
		       MC bool ] ].

; DPF (28-Apr-99) Need this construction to get simple yes-no questions like
; "Did Kim fall", while keeping the phrase "did Kim devour" with an empty
; MESSAGE so it can be the head of "What did Kim devour", where this filler-head
; rule introduces the interrogative message.

yesno_phrase := interrog & head_valence_phrase & head_only &
  [ SYNSEM.LOCAL [ CAT [ HEAD.INV +,
			 VAL #val,
			 MC + ],
                   KEYS.MESSAGE <! #msg !> ],
    C-CONT [ TOP #top,
             LISZT <! #msg &
                      [ HANDEL #top,
                        SOA #soahand ] !>,
             H-CONS <! qeq &
                     [ SC-ARG #soahand,
                       OUTSCPD #dtrhand ] !> ],
    HEAD-DTR.SYNSEM.LOCAL [ CAT [ HEAD verb,
				  MC -,
				  VAL #val & [ SUBJ *olist*,
                                               SPR *olist*,
                                               COMPS *olist* ] ],
                            CONT.TOP #dtrhand ] ].


; Since MOD is a head feature, and projections of finite verbs can be relative
; clauses, we introduce the [MOD nbar] property directly on finite verbs, rather
; than in the rel_cl phrase type as before.  Then we have to be sure that finite
; VPs do not appear as postnominal modifiers, and likewise for declarative S's.
; The former is blocked because the head-adjunct rule requires that the adjunct 
; be [SUBJ *olist*].  The latter we block by requiring that the adjunct in a 
; head-adjunct phrase be [MC na], while making declarative head_subj phrases 
; be [MC bool].  Thus relative clauses must also be [MC na].

; DPF 27-May-99 - Avoid making rel_cl a headed_phrase, so it can be marked as
; [PRD +] even though its 'head' daughter is necessarily {PRD -].  Will be
; easier with defaults.

rel_cl := clause &
  [ ROOT -,
    SYNSEM [ LOCAL [ CAT [ HEAD verb &
			      [ VFORM fin_or_inf,
				INV -,
				PRD +,
				MOOD ind_or_mod_subj & strict_sort,
				MOD < [ LOCAL intersective_mod &
					      [ CONT.INDEX #ind ] ] > ],
			   POSTHEAD +,
			   MC na ],
		     CONT.INDEX #ind,
		     KEYS.MESSAGE 0-dlist,
		     CONJ cnil ],
	     NON-LOCAL.REL 0-dlist ] ].

; We prevent PP adjunct extraction from feeding thatless_rel rule by requiring
; that the gap be [ MOD < > ], to block "the man kim slept walks." To handle
; "I remember the time Kim fell" maybe we can make the words "time" and
; "place" take an S/PP complement, not treat them as thatless_rels.  Also, 
; to block "*Sandy likes the man walks" and "*Sandy likes the man who thinks 
; went home", we require the S/NP to be [ MC + ], which excludes subject
; extraction for that daughter.

; The dtr is required to be [MC +] in order to block subject-extracted S/NPs
; from being admitted as relative clauses.  This constraint would be removed
; for those dialects which accept examples like "There's a man wants to talk to
; you waiting outside."

; ERB (14-12-97) I am trying to get the non-finite ones to work and to
; have only one type that will make both "The man Kim likes" and "The
; man to talk to" (but not "The man to talk to Sandy".)  The new
; constraints are: on the head-dtr HEAD verb, VFORM fin_or_inf, and
; SUBJ list(pro).  I also need to make to_c_prop HEAD verb and 
; MC +.  The latter is because we want to require MC + of the head-dtr
; to exclude subject extraction as above, adn to exclude that-declaratives
; from being the head-dtr of this cx.  (To avoid a really ugly second
; parse for "The man that Kim likes.")

; ERB (14-12-97) to_c_prop doesn't have to be a verb.  non_wh_rel_cl
; can just say HEAD verbal -- that-decls will be ruled out because they
; are MC -.  To_c_prop has to be MC + anyway because we need the
; MC + on the head-dtr in order to bar subj extractions from this
; cx.

; ERB (19-01-98) MC + moved to appropriate subtype.  See notes below.

; ERB (19-01-98) Part of what's keeping to_c_prop from serving directly
; as a modifier without first building a non_wh_rel is that hadj requires
; SUBJ *olist* and pro_ss is OPT -.  This means that non_wh_rel_cl can't
; copy up the SUBJ requirement.  I don't know what exactly the constraints
; are on the other valence features, so I am just copying them up for now.
; (Previously all of VAL was identified.)
; DPF (21-Apr-98) Make SYNSEM.COMPS be < > on mother and *olist* on daughter.

; DPF (26-05-98) Added [MOD < [ NON-LOCAL.QUE 0-dlist] >] to the mother, to 
; block thatless relatives modifying WH-partitives, as in the unwanted NP 
; "how many books are t"

; DPF (06-Sept-98) Added reg_nom_rel constraint on MOD < [ LOCAL.KEYS.KEY ] >, 
; to avoid infinitival relatives modifying temporal nouns as in "we should meet 
; next week to celebrate".  
; DPF (27-Jan-99) Updated this to non_temp_nom_rel.
; DPF 09-Jan-00 - Added HEAD-DTR..MODIFIED notmod_or_rmod to block adverb-initial
; relative clauses as in "The book apparently Sandy bought is new"

non_wh_rel_cl := unary_phrase & rel_cl &
  [ SYNSEM [ LOCAL [ CAT [ HEAD [ VFORM #vform,
				  TENSE #tense,
				  AUX #aux,
				  INV #inv,
				  MOOD #mood,
				  MOD #mod &
				      < [ LOCAL [ KEYS.KEY #mkey &
							   non_temp_nom_rel,
						  CONT.INDEX #ind ],
					  NON-LOCAL.QUE 0-dlist ] > ],
			   VAL [ SUBJ < >,
				 SPR #spr,
				 COMPS < > ] ],
		     KEYS.KEY #key ],
	     NON-LOCAL.SLASH 0-dlist ],
    ARGS < [ SYNSEM [ LOCAL [ CAT [ HEAD verbal &
					 [ VFORM #vform,
					   TENSE #tense,
					   AUX #aux,
					   INV #inv,
					   MOOD #mood,
					   MOD #mod ],
				    VAL [ SUBJ *prolist*,
                                          SPR #spr,
                                          COMPS *olist* ] ],
			      CONT.TOP #top,
			      CONJ cnil,
			      KEYS.KEY #key ],
		      NON-LOCAL [ SLASH 1-dlist &
					[ LIST < [ CAT [ HEAD noun &
							      [ PRD -,
								MOD < > ],   
							 VAL [ SPR *olist*,
							       COMPS < > ] ],
						   AGR #ind,
						   CONT.INDEX #ind,
						   KEYS.KEY #mkey ] > ],
				  QUE 0-dlist,
				  REL 0-dlist ],
		      MODIFIED notmod_or_rmod & strict_sort ] ] >,
    C-CONT.TOP #top ].


; ERB (19-01-98) As much as it hurts, I don't think it is possible
; to avoid differentiating a inf and fin non_wh_rel_cl.  The facts of
; (Standard American) English seem to be that finite non-wh relatives
; do not allow extraction of the highest subject, but non-finite ones
; do:
;
; (1) Kim likes the book Sandy bought.
; (2) *Kim likes the person buys books.
; (3) Kim found a book to buy for Sandy.
; (4) Kim found a person to buy Sandy a book.
;
; A simple hack involving case won't work, because embedded subjects
; can be extracted in the finite case:
;
; (5) Sandy likes the program Kim thinks works.
;
; Another tack is to treat (3) and (4) above differently, where
; the to in (3) is to_c_prop and the to in (4) is to_c_nonprop.
; The motivation for this is that the former allows a discourse
; PRO interpretation, while the latter doesn't, so it is tempting
; to says that the latter doesn't involve PRO at all.  The idea is
; that to_c_prop builds a non_wh_rel which can then serve as a 
; modifier, while to_c_nonprop has a MOD value to start off with,
; and can be a modifier directly once it builds a hcomp.  To_c_nonprop
; would bind the index of its MOD value to that of its subject.
;
; However, this is unsatisfactory for several reasons.  First, the
; ones like (4), built with to_c_nonprop, have no message for the
; relative.  Second, since MOD is a head feature now, to_c_prop must
; also be MOD < nbar > .  Once this is true, there is no obvious way to
; keep it from serving directly as a modifier without building a
; non_wh_rel. Finally, we run into problems with lexical SLASH
; amalgamation.  Something has to be said about the subject value of
; to_c_nonprop, otherwise it runs the risk of having a non-terminated
; SLASH value.  However, on the one hand, to_c_nonprop is the to of
; raising constructions, so sometimes its SUBJ must be able to be
; canonical_synsem, and on the other, on this analysis, it can also
; head modifiers in which its SUBJ goes unexpressed.  To take care
; of the latter, something must be said in the lexical entry, but
; unexpressed is not compatible with canonical_synsem.
;
; The only other possibility I can see is to let the subject extraction
; apply lower, as in to [like Sandy] in [a person to like Sandy], but
; this requires letting subject extraction apply to base forms, which
; would most likely be a royal mess.
;
; In sum, given the facts of SAE and the rest of the grammar as
; it is, (3) and (4) must be built with the same to.  In (3) there
; is an extracted complement and in (4) there is an extracted 
; subject.  In the case of infinitival non_wh_rels, the grammar
; doesn't care.  In the case of finite ones, it does.

fin_non_wh_rel_cl := non_wh_rel_cl &
  [ ARGS < [ SYNSEM.LOCAL.CAT [ HEAD verb &
				     [ VFORM fin,
				       TENSE tense,
				       MOD < [ LOCAL.CAT nbar_cat ] > ],
				MC + ] ] >,
    C-CONT [ LISZT <! !>,
	     H-CONS <! !> ] ].

inf_non_wh_rel_cl := non_wh_rel_cl &
  [ ARGS < [ SYNSEM.LOCAL [ CAT.HEAD comp & [ VFORM inf ],
			    KEYS.MESSAGE 1-dlist ] ] >,
    C-CONT [ LISZT <! !>,
	     H-CONS <! !> ] ].

; The version of the Non-local Feature Principle here assumes that there will
; only be one value on the SLASH list.  To handle multiple gaps, we'll need
; more general set-manipulation functions.  This version also doesn't use a
; distinction between INHERITED and TO-BIND non-local features.  Instead, it
; treats non-local features like valence features.

; ERB (17-10-96) in order to get "Kim knows who to ask" under the current
; hacks (i.e., no PRO), I need a head_filler_phrase that takes something like
; "to ask" (i.e., VFORM in, SUBJ nomp) as its head.  So I am making a
; separate parallel type that will only be inherited by the embedded wh
; nonfinite questions.

; N.B. Since all head_filler constructions inherit from type clause, which
; inherits from head_compositional, this type does not (though it could,
; redundantly).

; Added [ SUBJ *prolist* ] constraint to NON-HEAD-DTR, to ensure termination
; of the QUE and REL attributes now that we're doing lexical threading, and
; PPs (among others) wouldn't otherwise know if they were QUE empty or not.
;
; (DPF 23-Aug-98) But if we make thie SUBJ *prolist*, then we can't get 
; extraction of raising predicates, as in "how does Kim look", since the
; subject of the "how" adjective is identified with that of "look".  Hence
; we move this constraint to the extracted-adjunct rule, since it seems to
; hold true for adjuncts, but not for complements.
; DPF 23-Sept-99 - Made mother be POSTHEAD +, to avoid clauses as prenominal
; modifiers.

basic_head_filler_phrase := binary_phrase &
  [ SYNSEM [ LOCAL [ CAT [ VAL [ COMPS < >,
				 SPR < > ],
			   POSTHEAD + ],
		     CONJ cnil ],
	     NON-LOCAL.SLASH 0-dlist ],
    ARGS < [ SYNSEM [ LOCAL #slash & local &
			    [ CAT.VAL [ SUBJ *prolist*,
					COMPS *olist*,
					SPR *olist* ],
			      CTXT.ACTIVATED + ],
		      NON-LOCAL.SLASH 0-dlist ] ],
	   [ SYNSEM [ LOCAL.CAT [ HEAD verbal & strict_type,
				  VAL [ COMPS *olist* ] ],
		      NON-LOCAL [ SLASH 1-dlist &
					[ LIST [ FIRST #slash,
						 REST < > & #last ],
					  LAST #last ],
				  QUE 0-dlist,
				  REL 0-dlist ] ] ] > ].

head_filler_phrase := basic_head_filler_phrase & head_final &
		      head_nexus_que_phrase.

head_filler_phrase_fin := head_filler_phrase &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ *olist* & #subj,
    HEAD-DTR.SYNSEM.LOCAL.CAT [ HEAD verb & [ VFORM fin,
					      TENSE tense ],
				VAL.SUBJ #subj ] ].

head_filler_phrase_inf := head_filler_phrase &
  [ HEAD-DTR.SYNSEM.LOCAL [ CAT.HEAD verbal & [ VFORM inf ],
			    KEYS.MESSAGE 1-dlist &
				     <! hypo_rel !> ] ].

; N.B. Since all head_subj_phrase constructions inherit from type clause,
; which inherits from head_compositional, this type does not (though it could,
; redundantly).
;
; 1-May-96 (DPF) Restricted head to be verb only, to block spurious parses
; where NP modifed by PP was also analyzed as its subject.
; 12-Jun-96 (RPM) Allow verbal gerunds to head head/subj phrases.
; DPF (28-Apr-99) Added INV - to head-dtr, since most auxiliary verbs are
; underspecified for INV.
;  
; DPF 27-May-99 - Constrained subj to be unslashed, in order to block, e.g.
; "the consultant that kim hired slept fell".
; DPF 23-Sept-99 - Made mother be POSTHEAD +, to avoid clauses as prenominal
; modifiers.

head_subj_phrase := head_valence_phrase & head_final &
  [ SYNSEM.LOCAL [ CAT [ HEAD v_or_g & strict_type &
			      [ VFORM fin,
				TENSE tense,
				PRD - ],
			 POSTHEAD +,
			 VAL [ SUBJ < >,
			       COMPS < >,
			       SPR < > ] ],
		   CONJ cnil ],
    HEAD-DTR.SYNSEM.LOCAL.CAT [ HEAD.INV -,
				VAL [ SUBJ < #synsem >,
				      COMPS *olist* ],
				MC na ],
    NON-HEAD-DTR.SYNSEM #synsem & canonical_synsem &
		 [ LOCAL [ CAT [ HEAD subst & [ POSS - ],
				 VAL [ SUBJ *olist*,
				       COMPS *olist*,
				       SPR *olist* ] ] ],
		   NON-LOCAL [ SLASH 0-dlist,
			       REL 0-dlist,
			       QUE 0-dlist ] ] ].

; A head/comps phrase is a phrase that combines a head with something selected
; for by the COMPS feature.  Head/comps phrases come in two denominations:
; head/comp phrases and head/marker phrases.  A head/comp phrases is like the
; usual VP rule, and its head (and therefore the whole phrase) must be CONJ
; cnil.  A head/comp phrase is unmarked for MC, but will inherit a MC
; specification from its head daughter.  Head/marker phrases takes the place
; of the P&S94 head/marker rule.  The head must be lexical (i.e., of type
; "word") and CONJ non-cnil. 
;
; DPF 10-Aug-99 - Moved the propagation of ALTKEY from head_marker-phrase up to
; head_comp_or_marker_phrase.

head_comp_or_marker_phrase := head_valence_phrase & head_compositional & 
			      head_initial &
  [ SYNSEM canonical_synsem &
	   [ LOCAL [ CAT [ MC #mc,
			   VAL [ SUBJ #subj,
				 COMPS #comps,
				 SPR #spr ] ],
		     KEYS [ ALTKEY #altkey,
			    MESSAGE #hmsg ] ] ],
    HEAD-DTR.SYNSEM.LOCAL [ CAT [ MC #mc,
				  VAL [ SUBJ #subj,
					COMPS < #synsem . #comps >,
					SPR #spr ] ],
                            KEYS [ ALTKEY #altkey,
				   MESSAGE #hmsg ] ],
    NON-HEAD-DTR.SYNSEM #synsem & canonical_synsem,
    C-CONT [ LISZT <! !>,
	     H-CONS <! !> ] ].

; ERB (03-10-96) hcomp_nc is no longer marked as non-clause because some of them
; are "clauses" in the sense of having a message (e.g., "Kim wants [to leave]").
; This is actually in need of revision: we are probably going to need to 
; distinguish between to-headed hcomp_ncs which are selected by equi predicates 
; or otherwise have PRO subjects and whether-headed hcomp_ncs on the one hand, 
; and all other instances on the other with a restriction equivalent to SUBJ 
; list(PRO) in order to block "To rain is difficult" etc.  I think this should 
; be possible without resorting to anything like VFORM whether to identify cases
; -- see Ivan's interrogatives paper.

; ERB (05-10-97) In order for one single hcomp rule to build things like "how
; about on Friday", the restriction HEAD subst needs to be removed from this
; rule, or else root-marker needs to inherit from subst.  I am opting for the
; former.

; DPF (25-Aug-98) The head_comp_phrase is not marked POSTHEAD + since we want to
; build "twenty-one" using this rule, but still allow it to serve as a
; prenominal modifier  as in "twenty-one books".  So instead we use the PRED
; feature to distinguish prenominal from postnominal modifiers, and conspire to
; make all PRED - entries have an empty COMPS list.  

head_comp_phrase := head_comp_or_marker_phrase &
  [ SYNSEM [ LOCAL [ CAT.POSTHEAD #ph,
		     CONJ cnil ],
	     LEX #lex ],
    HEAD-DTR [ SYNSEM.LOCAL.CAT [ POSTHEAD #ph,
                                  HC-LEX #lex ] ] ].

head_marker_phrase := head_comp_or_marker_phrase &
  [ SYNSEM [ LOCAL.CONJ strict-conj,
	     NON-LOCAL #nonlocal,
	     LEX #lex ],
    HEAD-DTR word_or_lexrule & [ SYNSEM.LOCAL.CONT.TOP #ctop ],
    NON-HEAD-DTR.SYNSEM [ LOCAL.CAT.HC-LEX #lex,
			  NON-LOCAL #nonlocal ],
    C-CONT.TOP #ctop ].

head_marker_phrase_prop := head_marker_phrase &
  [ HEAD-DTR.SYNSEM.LOCAL.KEYS.ALTKEY.R-HANDEL #rhand,
    NON-HEAD-DTR.SYNSEM [ LOCAL [ CAT.HEAD verbal,
				  CONT.TOP #rhand,
				  KEYS.MESSAGE 1-dlist ] ] ].
    
head_marker_phrase_nonprop := head_marker_phrase &
  [ NON-HEAD-DTR.SYNSEM.LOCAL.KEYS.MESSAGE 0-dlist ].

; Skip an optional complement as long as there is still another obligatory
; complement on the list (here assumed to be the second complement, since it's
; hard and perhaps unnecessary to allow the obligatory one to appear in an
; arbitrary position).
; DPF (27-Apr-99) Note that this formulation unfortunately does not get
; "Kim bet Abrams won" with the first two optional complements missing, since
; the rule forces the complement after the omitted one to be expressed.

head_opt_comp_phrase := head_valence_phrase & head_only & head_compositional &
  [ SYNSEM canonical_synsem &
	   [ LOCAL [ CAT [ VAL [ SUBJ #subj,
				 COMPS #comps,
				 SPR #spr ],
			   POSTHEAD + ],
		     KEYS.MESSAGE #msg ],
	     LEX #lex ],
    HEAD-DTR [ SYNSEM.LOCAL [ CAT [ VAL [ SUBJ #subj,
					  COMPS < unexpressed & [ OPT + ]
						  . #comps & < expressed_synsem, 
							       ... > >,
					  SPR #spr ],
				    HC-LEX #lex ],
			      KEYS.MESSAGE #msg ] ],
    C-CONT [ LISZT <! !>,
	     H-CONS <! !> ] ].


; ERB (19-01-98) If to_c_prop can undergo subject extraction (see notes
; near non_wh_rel) then this can't require HEAD v_or_p.  That constraint
; will be moved to extracted_comp_phrase.  Extrasubj will say 
; HEAD verbal.
; DPF 10-Jun-99 Changed SYNSEM..MOOD from indicative to ind_or_mod_subj, since
; we weren't getting "Abrams would have hired Browne"

extracted_arg_phrase := head_valence_phrase & head_only &
  [ SYNSEM.LOCAL [ CAT.HEAD.MOOD ind_or_mod_subj,
		   CONJ cnil ],
    HEAD-DTR.SYNSEM.LOCAL.CONJ cnil ].

; To block extraction of subjects of inverted auxiliaries, introduce (hack)
; restriction to accusative case on the extracted complement. This restriction
; is irrelevant (and probably unwanted) if the complement is not an NP, but we
; avoid using an awkward disjunction this way.  We also block extraction of
; complements out of subjunctive-verb-headed phrases.
; DPF (28-Apr-99) Added identity of MESSAGE for mother and head-dtr, since it
; wasn't being propagated.

; *** We still need special extraction rules for fronting CPs and VPs.

extracted_comp_phrase := extracted_arg_phrase & head_compositional &
  [ SYNSEM canonical_synsem &
	   [ LOCAL [ CAT [ VAL [ SUBJ #subj,
				 SPR #spr,
				 COMPS #comps ],
			   MC #mc ],
		     KEYS.MESSAGE #msg ],
	     LEX #lex ],
    HEAD-DTR [ SYNSEM 
	       [ LOCAL [ CAT [ HEAD v_or_p,
			       VAL [ SUBJ #subj,
				     SPR #spr,
				     COMPS < gap &
					     [ LOCAL local &
						     [ CAT.HEAD mobile ],
					       NON-LOCAL.SLASH #slash ]
					     . #comps > ],
			       MC #mc,
			       HC-LEX #lex ],
			 KEYS.MESSAGE #msg ],
		 NON-LOCAL.SLASH #slash ] ],
    C-CONT [ LISZT <! !>,
	     H-CONS <! !> ] ].

; Assume only finite clauses have explicit subjects that can be extracted, and
; restrict these to indicative verbs (not subjunctives). 

; ERB (19-01-98) We are assuming that there is subject extraction
; in "just the teacher [to talk to Sandy]" so the VFORM must be 
; loosened here.  See notes near non_wh_rel.  Also, HEAD verbal.
; What's to block whether from undergoing subject extraction?
; (cf. *Sandy Kim knows whether to elect Clinton president.)
; DPF (27-Apr-98) Made HEAD-DTR..HEAD be strict_type to block non-verbal heads
; from unifying (e.g. "red")
; DPF (1-Apr-99) Made mother be SPR < > to block spurious modification by PPs.

extracted_subj_phrase := extracted_arg_phrase &
  [ SYNSEM.LOCAL.CAT [ VAL [ SUBJ < >,
			     SPR < >,
			     COMPS < > ],
		       MC - ],
    HEAD-DTR.SYNSEM [ LOCAL.CAT [ HEAD verbal & strict_type &
					 [ VFORM fin_or_inf,
					   MOD < synsem_min > ],
				    VAL [ SUBJ < gap &
						 [ LOCAL #local & local &
						    [ CONT.INDEX ref-ind ] ] >,
					  COMPS *olist* ],
				    MC na ],
		      NON-LOCAL.SLASH.LIST < #local > ] ].

extracted_subj_phrase_fin := extracted_subj_phrase & decl &
  [ HEAD-DTR.SYNSEM.LOCAL [ CAT.HEAD [ VFORM fin,
				       TENSE tense ],
			    KEYS.MESSAGE 0-dlist ] ].

extracted_subj_phrase_inf := extracted_subj_phrase &
  [ HEAD-DTR.SYNSEM.LOCAL [ CAT.HEAD.VFORM inf,
			    CONT.TOP #top,
			    KEYS.MESSAGE 1-dlist ],
    C-CONT [ TOP #top,
	     LISZT <! !>,
	     H-CONS <! !> ] ].


; For specifiers of nouns (det and non-det), adjectives and prepositions.
; Also for specifiers of determiners, as in "almost all".  Needs to be modified
; to also allow "exactly which books".
; DPF 3-Oct-99 - Added rentrancy for hd-dtr's HEAD value and the SPEC..HEAD of
; the non-hd-dtr, to allow e.g. the degree-specifier "that" to appear with
; adverbees but not PPs.

head_spec_phrase := head_valence_phrase & head_final & non_clause & phrasal &
  [ SYNSEM [ LOCAL [ CAT [ VAL [ SUBJ #subj,
				 COMPS < >,
				 SPR #spr,
				 SPEC #spec ],
			   POSTHEAD #ph ],
		     KEYS.ALTKEY #altkey ] ],
    HEAD-DTR.SYNSEM [ LOCAL [ CAT [ HEAD #head,
				    VAL [ SUBJ #subj,
					  COMPS *olist*,
					  SPR < #synsem & 
						 canonical_synsem . #spr>,
					  SPEC #spec ],
				    POSTHEAD #ph,
				    MC na ],
			      CONT [ TOP #htop,
				     INDEX #ind ],
			      CONJ cnil,
			      KEYS.KEY #key ] ],
    NON-HEAD-DTR.SYNSEM #synsem &
		        [ LOCAL [ CAT [ MC na,
					VAL.SPEC 
					< [ LOCAL [ CAT.HEAD #head,
						    KEYS.KEY #key,
						    CONT [ TOP #htop,
							   INDEX #ind ] ] ] > ],
                                  CONT.TOP #top,
				  KEYS.ALTKEY #altkey ] ],
    C-CONT [ TOP #top,
             INDEX #ind,
             LISZT <! !>,
	     H-CONS <! !> ] ].

; The SYNSEM value of the head of a head/modifier phrase is token-identical to
; the MOD value of the adjunct daughter.  Additionally, the adjunct daughter
; must be complement-saturated.  The SLASH value is not set in the basic
; schema, but rather in each of the subtypes: in head_mod_phrase_simple the
; SLASH value is passed up from both daughters, but in the
; extracted_adj_phrase the SLASH value of the mother is effectively the
; adjunct that would have modified the head.
; 
; DPF (6-Sept-98) Constrained HEAD-DTR to have empty QUE as well as REL, to 
; block adverbs modifying "how", "where", etc.  
; DPF (4-Mar-99) But this unfortunately also blocks "which consultant who fell"
; since making "consultant" be QUE empty means via lexical threading that its
; specifier must also be QUE empty.  So we would have to find some other way of
; blocking modifiers of "where" etc, but perhaps the generalization is wrong
; anyway; consider "right where", "exactly when" "just how".

; DPF 25-Aug-99 - Removed CONJ cnil from HEAD-DTR, to allow "oh, and your name"

head_mod_phrase := head_nexus_phrase & phrasal &
  [ SYNSEM [ LOCAL.CAT [ VAL [ SUBJ #subj,
			       SPR #spr,
			       COMPS < > ],
			 MC #mc ],
	     MODIFIED hasmod ],
    HEAD-DTR.SYNSEM [ LOCAL [ CAT [ VAL [ SUBJ #subj,
					  SPR #spr,
					  COMPS *olist* ],
				    MC #mc ] ],
		      NON-LOCAL [ REL 0-dlist ] ],
    C-CONT.LISZT <! !> ].

; Added restriction on adjunct's specifier to prevent unsaturated nouns
; (like 'afternoon') from serving as modifiers before they pick up their
; specifiers.

; head_mod_phrase_simple takes the MESSAGE value from its non-head dtr's 
; MESSAGE.  Most modifiers identify their message with their
; modifiee's message, but tags don't.  (Modifiers cannot simply identify their
; own message with that of their modifiee, since some signs (like "not")
; can be either a modifier or an argument, and hence need a message value 
; independent of that of their modifiee.

; SLASH of mother is append of SLASH lists for the two daughters.  In principle
; this allows distinct slash values on the two daughters, without enforcing
; parasitic gaps.  So we restrict the LIST.REST value of SLASH on the mother to
; be the empty list -- a hack which works in PAGE since not strictly typed, but 
; what we really want to say is that SLASH on the mother is either a singleton 
; list, or the empty list.
;; 15-Jun-98 Removed this hack, since it doesn't work in the LKB, and is wrong
;; anyway, failing to generalize to e.g. head-complement structures, which
;; present the same problem of distinct SLASH values coming from each of the
;; two daughters.

; Removed identification of hddtr's MESSAGE with mother's - wrong for tags,
; at least.  Should be handled independently by each modifier.

;; DPF 26-Feb-99 - Added [ KEY independent_rel] to NON-HEAD-DTR to distinguish
;; modifier phrases from verb-particle constructions, where the particle's
;; KEY is specialized to a subtype of 'selected_rel'.

;; DPF 7-Apr-99 - Moved C-CONT.INDEX to the scopal and intersective variants,
;; since intersectives take their index from the head-dtr, while scopals take
;; it from the non-head-dtr.  The crucial case for intersectives is for
;; participial modifiers of nouns, like "manager interviewing Browne" where
;; the index of the modifier is an event variable.

;; DPF 7-Jun-99 - Removed REL 0-dlist from nonhead, to allow slashed finite
;; rels to keep the REL value on their mother, so it can be distinguished from
;; ordinary clauses.

head_mod_phrase_simple := head_mod_phrase & binary_headed_phrase &
  [ SYNSEM [ LOCAL.KEYS.MESSAGE #msg,
	     NON-LOCAL [ SLASH *diff-list* &
			       [ LIST #first,
				 LAST #last ],
			 REL 0-dlist ] ],
    HEAD-DTR.SYNSEM [ LOCAL [ CAT #localcat,
			      AGR #agr,
			      CONT [ TOP #htop,
				     INDEX #hind ],
			      CONJ #conj,
			      KEYS [ KEY #key,
                                     ALTKEY #altkey,
				     MESSAGE #hmsg ] ],
                      NON-LOCAL #nonloc &
			     [ SLASH *diff-list* &
	                              [ LIST #middle,
					LAST #last ] ],
                      MODIFIED #modif ],
    NON-HEAD-DTR.SYNSEM [ LOCAL [ CAT [ HEAD head & strict_type &
					     [ MOD < [ LOCAL local & 
						       [ CAT #localcat,
							 AGR #agr,
							 CONT 
							  [ TOP #htop,
							    INDEX #hind ],
							 CONJ #conj,
							 KEYS 
                                                          [ KEY #key,
                                                            ALTKEY #altkey,
							    MESSAGE #hmsg ] ],
						       NON-LOCAL #nonloc,
                                                       MODIFIED #modif ] > ],
					VAL [ COMPS *olist*,
					      SPR *olist* ],
					MC na ],
				  CONT.TOP #hand,
				  CONJ cnil,
				  KEYS [ KEY independent_rel,
					 MESSAGE #msg ] ],
			  NON-LOCAL [ SLASH *diff-list* &
					    [ LIST #first,
					      LAST #middle ],
				      QUE 0-dlist ] ],
    C-CONT.TOP #hand ].


;; DPF (12-Jul-98) Changed POSTHEAD on mother from that of head-dtr to simply -, 
;; since want to prevent this rule from feeding head-adj rule.
;; DPF (25-Sept-98) Since we're no longer treating all head-complement phrases as
;; POSTHEAD -, we have to strengthen the constraint on the non-head-dtr's COMPS 
;; value to be truly the empty list, not just *olist*.

adj_head_phrase := head_mod_phrase_simple & head_final &
  [ SYNSEM [ LOCAL.CAT.POSTHEAD #ph,
	     MODIFIED lmod* ],
    HEAD-DTR.SYNSEM.LOCAL.CAT.POSTHEAD #ph,
    NON-HEAD-DTR.SYNSEM [ LOCAL.CAT [ HEAD.PRD -,
				      VAL.COMPS < >,
				      POSTHEAD - ],
			  NON-LOCAL [ SLASH 0-dlist,
				      REL 0-dlist ] ] ].

; ERB (07-11-96) Non-head dtr is QUE 0-dlist to rule out "*Leaving when do you
; think would bother Sandy?" or "*Your house where did the government foreclose
; on?"  Not on higher type because "How long a book did you write?"

head_adj_phrase := head_mod_phrase_simple & head_initial &
  [ SYNSEM [ LOCAL.CAT.POSTHEAD +,
	     MODIFIED rmod* ],
    HEAD-DTR.SYNSEM.MODIFIED notmod_or_rmod & strict_sort,
    NON-HEAD-DTR.SYNSEM [ LOCAL.CAT.POSTHEAD +,
			  NON-LOCAL.QUE 0-dlist ] ].

; DPF (07-17-98) Split head_adj_phrase and adj_head_phrase into two each,
; one for intersective modifiers and one for scopal modifiers, in order to
; get desired results for recursive modification as in "apparently difficult
; problem" (cf. Kasper '98).  This split is also used in generation, where
; we delay construction of intersective modification, but not scopal.

scopal_mod_phrase := head_mod_phrase_simple &
  [ NON-HEAD-DTR.SYNSEM.LOCAL [ CAT.HEAD.MOD < [ LOCAL scopal_mod ] >,
				CONT.INDEX #index ],
    C-CONT [ INDEX #index,
	     H-CONS <! !> ] ].

isect_mod_phrase := head_mod_phrase_simple &
  [ HEAD-DTR.SYNSEM.LOCAL.CONT [ TOP #hand,
				 INDEX #index ],
    NON-HEAD-DTR.SYNSEM.LOCAL [ CAT.HEAD.MOD < [ LOCAL intersective_mod ] >,
				CONT.TOP #hand ],
    C-CONT [ INDEX #index,
	     H-CONS <! !> ] ].

adj_head_scop_phrase := adj_head_phrase & scopal_mod_phrase.
head_adj_scop_phrase := head_adj_phrase & scopal_mod_phrase &
  [ NON-HEAD-DTR.SYNSEM.NON-LOCAL.REL 0-dlist ].
adj_head_int_phrase := adj_head_phrase & isect_mod_phrase.
head_adj_int_phrase := head_adj_phrase & isect_mod_phrase.

; Further split the head_adj_int_phrase in order to enforce one aspect of the 
; Complex-NP constraint prohibiting extraction from nominal adjuncts.
;
; DPF (27-May-99) Moreover, the nom_adj rule constrains the NON-HEAD-DTR to be 
; PRD +, in order to prevent finite VPs from serving as modifiers.  This was 
; being blocked earlier by pretending that all post-head modifiers had to have
; SUBJ *olist*, but this meant making predicative participles not specify an
; OPT value on their SUBJ - dubious generalization, and besides, it made it
; difficult to get the parse-node labels right, since passive verbs looked
; like S's.
;
; DPF 3-June-99 -- Further constrained nom_adj rule to make the modifier be
; phrasal, to block "Kim met the consultant hired." It's too strong a
; constraint, but we'll revisit the question when we move to making post-nominal
; modifiers attach at NP rather than N.  Among the disadvantages is the fact
; that we can't do "Get him something nice".
; DPF 9-Sept-99 - Added [PRD -] to head-dtr to avoid modifiers of e.g. minute-word. 
; - 20-Nov-99: But this also blocked "the eleventh any time after three"

n_adj_int_phrase := head_adj_int_phrase &
  [ HEAD-DTR.SYNSEM.LOCAL.CAT.HEAD noun,
    NON-HEAD-DTR.SYNSEM phr_synsem & [ LOCAL.CAT.HEAD.PRD +,
				       NON-LOCAL [ SLASH 0-dlist,
						   REL 0-dlist ] ] ].

h_adj_int_phrase := head_adj_int_phrase &
  [ HEAD-DTR.SYNSEM.LOCAL.CAT.HEAD adverbee,
    NON-HEAD-DTR.SYNSEM.NON-LOCAL.REL 0-dlist ].

; For now, restrict adjunct extraction to posthead modifiers of VPs (and the
; special case of inverted auxiliary-headed Ss, which still have a non-empty but
; never realized SUBJ - see discussion of sai_synsem in lextypes.tdl). This will
; still produce two parses for "Tuesday Kim might dance", but the alternatives
; (e.g., blocking modification of all auxiliaries except the copula) seem even
; less attractive.  Also block extraction of adjuncts out of
; subjunctive-verb-headed phrases.

; ERB (12-11-96) This is the exception; the reason I couldn't put the MESSAGE
; stuff on head_mod_phrase.

; DPF (23-Aug-98) Given our splitting up of the head-modifier type into 
; separate subtypes for intersective and scopal modification, we have to do
; the same for extracted adjuncts as well.
; DPF (09-Jan-99) But it is not clear that we ever need to extract scopal
; modifiers, since the ones that are post-head (maybe always adverbs) also seem
; to be available as modifiers of S, and not restricted to POSTHEAD +.  So we'll
; try doing without the scopal variant.
;
; DPF 19-Oct-99 - We used to make the value of SLASH's MOD feature be the
; whole SYNSEM of the HEAD, but this interacted badly with coordination
; of two extracted_adj phrases: it resulted in the CONT features of the
; two conjoined phrases being identified, since coordination enforces
; across-the-board identity of SLASH.  This resulted in circular LISZT
; values, which are undesirable.  So now we identify the values of the
; relevant LOCAL features in SLASH..MOD and in HEAD-DTR, avoiding false
; identity of the LISZT values.  Test case: "Kim arises and arises".

extracted_adj_phrase := head_mod_phrase & head_only & 
  [ SYNSEM [ LOCAL [ CAT [ POSTHEAD #ph,
			   MC #mc ],
		     KEYS.MESSAGE #msg ],
	     NON-LOCAL.SLASH 1-dlist &
		   [ LIST < local &
			    [ CAT [ POSTHEAD +,
				    HEAD.MOD < [ LOCAL [ CAT #cat,
                                                         CONT [ TOP #htop,
                                                                INDEX #hind ],
                                                         CONJ #conj,
                                                         CTXT #ctxt ] ] >,
				    VAL [ SUBJ *prolist*,
                                          COMPS *olist*,
					  SPR *olist* ] ],
			      CONT.TOP #hand,
			      KEYS [ KEY independent_rel,
				     MESSAGE #msg ] ] > ] ],
    HEAD-DTR.SYNSEM canonical_synsem &
	   [ LOCAL local_basic &
		   [ CAT #cat &
                         [ HEAD verb &
				[ MOOD ind_or_mod_subj & 
				       strict_sort ],
			   VAL.SUBJ < synsem &
				      [ NON-LOCAL.SLASH 0-dlist ] >,
			   POSTHEAD #ph,
			   MC #mc ],
                     CONT [ TOP #htop,
                            INDEX #hind ],
                     CONJ #conj,
                     CTXT #ctxt ],
             NON-LOCAL.SLASH 0-dlist,
	     MODIFIED notmod ],
    C-CONT [ TOP #hand,
	     H-CONS <! !> ] ].

; DPF (1-May-99) Removed identity of SLASH..KEY.HANDEL and HEAD-DTR..KEY.HANDEL
; since this should be redundant for most cases, and is wrong for free relatives
; like "where Kim slept" since in this construction the KEY of the free-rel and
; the KEY of its sister's SLASH must be identified in order to allow "where Kim
; put the book" while blocking "where kim relied".  But this identity means we
; can't have the HANDEL of that SLASH..KEY be the same as the HANDEL of the
; head of this extracted-adj phrase, because that would mean that the HANDEL of
; the ex-adj head's KEY ("slept" in "where she slept" would be wrongly identified
; with the HANDEL of the KEY for "where" (which is 'place_rel').

extracted_adj_int_phrase := extracted_adj_phrase &
  [ SYNSEM.NON-LOCAL.SLASH 1-dlist &
			   <! [ CAT.HEAD.MOD < [ LOCAL intersective_mod ] >,
                                CONT [ TOP #hand ] ] !>,
    HEAD-DTR.SYNSEM.LOCAL.CONT [ TOP #hand,
				 INDEX individual & #index ],
    C-CONT.INDEX #index ].

#|
extracted_adj_scop_phrase := extracted_adj_phrase &
  [ SYNSEM.NON-LOCAL.SLASH 1-dlist &
			   <! [ CAT.HEAD.MOD < [ LOCAL scopal_mod ] > ] !>,
    NON-HEAD-DTR.SYNSEM.LOCAL.CONT.INDEX individual & #index,
    C-CONT.INDEX #index ].
|#

;;
;; Bare plural and mass NPs, distinguished by the INDEX feature [ DIVISIBLE + ]
;;
; DPF 9-Sept-99 - Changed head-dtr's SPR to be canonical_synsem rather than
; non_canonical.  Don't know why it was that way, but it was allowing e.g. the
; proper noun 'Tuesday' to undergo this rule.

bare_np_phrase := head_only & non_clause & phrasal &
  [ SYNSEM [ LOCAL [ CAT.VAL [ SUBJ < >,
			       COMPS < >,
			       SPR < > ],
		     KEYS.MESSAGE #msg ],
	     NON-LOCAL.SLASH #slash ],
    HEAD-DTR.SYNSEM 
	   [ LOCAL [ CAT [ HEAD noun,
			   VAL [ SUBJ *olist*,
				 COMPS *olist*,
				 SPR < canonical_synsem &
				       [ OPT -,
					 LOCAL local &
					     [ KEYS.KEY #quant ],
					 NON-LOCAL [ SLASH 0-dlist,
						     REL 0-dlist,
						     QUE 0-dlist ] ] > ] ],
		     CONJ cnil,
		     CONT [ TOP #nhand,
			    INDEX #index & [ DIVISIBLE + ] ],
		     KEYS [ KEY basic_nom_rel,
			    MESSAGE #msg ] ],
	     NON-LOCAL.SLASH #slash ],
    C-CONT [ INDEX #index,
	     LISZT <! udef_rel & #quant &
		    [ BV #index,
		      RESTR #rhand ] !>,
	     H-CONS <! qeq &
		     [ SC-ARG #rhand,
		       OUTSCPD #nhand ] !> ] ].

;; Verbal gerunds with no subject

bare_vger_phrase := head_only & non_clause & phrasal &
  [ SYNSEM [ LOCAL [ CAT.VAL [ SUBJ < >,
			       COMPS < >,
			       SPR < > ],
		     KEYS.MESSAGE #msg ],
	     NON-LOCAL.SLASH #slash ],
    HEAD-DTR.SYNSEM 
	   [ LOCAL [ CAT [ HEAD gerund,
			   VAL [ SUBJ < synsem & [ LOCAL.CONT.INDEX #sind ] >,
				 SPR < synsem >,
				 COMPS *olist* ] ],
		     CONJ cnil,
		     CONT [ TOP #hand,
			    INDEX #index & [ DIVISIBLE + ] ],
		     KEYS [ KEY gerund_rel &
				[ HANDEL #vhand ],
			    MESSAGE #msg ] ],
	     NON-LOCAL.SLASH #slash ],
    C-CONT [ INDEX #index,
	     LISZT <! pron_rel &
		    [ HANDEL #vhand,
		      INST #sind & [ PRONTYPE zero_pron ] ],
		      udef_rel &
		    [ BV #index,
		      RESTR #rhand ] !>,
	     H-CONS <! qeq &
		     [ SC-ARG #rhand,
		       OUTSCPD #hand ] !> ] ].

;; 
;; Noun-noun compounds
;;

; Make left member be [ COMPS < > ] to avoid spurious ambiguity since we have
; separate lexical entries to handle optional nominal complements.
; DPF (22-Oct-98) Can't do the above, since it's not true for most nouns, and
; also won't work for "two fifteen meeting" where the am_pm argument is not
; expressed, but can't be discharged by the optcomp rule.

; DPF (4-Mar-99) - Removed the gratuitous some_rel, which was wrong for
; proper name left members of N-N compounds, and also wrong for hour words like
; "a one o'clock meeting" since "one o'clock" already supplied a def_rel of
; its own.

; Added [ ALTKEY no_rel ] to non-head-dtr to block partitives, deverbal nouns, and
; other unwanted NPs with complex lexical semantics.
; DPF 09-Jan-00 - Also added [ ALTKEY no_rel ] to head-dtr, to block adj-nouns
; from compounds, as in "*Devito five" (ignoring for now "the Jackson five").

n_n_cmpnd_phr := head_final &
  [ SYNSEM lex_synsem &
	   [ LOCAL [ CAT [ HEAD.MOD < >,
			   VAL #valence,
			   MC #mc ],
		     KEYS.MESSAGE #msg ],
	     NON-LOCAL [ SLASH #slash,
			 QUE 0-dlist,
			 REL 0-dlist ] ],
    HEAD-DTR.SYNSEM nonpronominal_synsem &
	   [ LOCAL [ CAT [ HEAD noun*,
			   VAL #valence &
			       [ SPR < synsem & [ OPT - ] > ],
			   MC #mc ],
		     CONT [ TOP #top,
			    INDEX #hind & ref-ind ],
		     KEYS [ MESSAGE #msg,
			    ALTKEY no_rel ],
		     CONJ cnil ],
	     NON-LOCAL [ SLASH #slash,
			 QUE 0-dlist,
			 REL 0-dlist ] ],
    NON-HEAD-DTR.SYNSEM nonpronominal_synsem &
	   [ LOCAL [ CAT [ HEAD noun* & [ PRD - ],
			   VAL [ COMPS *olist*,
				 SPR *unexplist* ] ],
		     AGR.PNG.PN 3sg,
		     CONT.INDEX #modind & ref-ind,
		     KEYS [ KEY nom_rel,
			    ALTKEY no_rel ] ],
	     NON-LOCAL [ SLASH 0-dlist,
			 QUE 0-dlist,
			 REL 0-dlist ] ],
    C-CONT [ TOP #top,
	     INDEX #hind,
	     LISZT.LIST < unspec_rel & [ HANDEL #top,
					 HINST #hind,
					 NHINST #modind ], ... > ] ].

np_n_cmpnd_phr := n_n_cmpnd_phr &
  [ NON-HEAD-DTR.SYNSEM.LOCAL.CAT.VAL.SPR *unexpnull*,
    C-CONT [ LISZT <! unspec_rel !>,
	     H-CONS <! !> ] ].

np_n_cmpnd_phr_2 := n_n_cmpnd_phr &
  [ NON-HEAD-DTR.SYNSEM.LOCAL.CAT.VAL.SPR *unexpcons* &
					  < [ OPT + ] >,
    C-CONT [ LISZT <! unspec_rel !>,
	     H-CONS <! !> ] ].

noun_n_cmpnd_phr := n_n_cmpnd_phr &
  [ NON-HEAD-DTR.SYNSEM.LOCAL [ CAT.VAL.SPR *unexpcons* &
					    < [ OPT - ] >,
				CONT [ TOP #ntop,
				       INDEX #nind ] ],
    C-CONT [ LISZT <! unspec_rel, udef_rel & [ BV #nind,
					       RESTR #rhand ] !>,
	     H-CONS <! qeq & [ SC-ARG #rhand,
			       OUTSCPD #ntop ] !> ] ].

;; Appositives
;; For now, restrict this to temporal nouns and proper names, since it's an 
;; overly enthusiastic rule.  So only get "Tuesday the tenth" and "Jim Smith"
;; (well, and also "Jim the tenth", but then it's only a hack anyway).
;; Use CASE feature hack on non-head to avoid unwanted "minor" NPs like 
;; minute_word as appositives: "seven thirty"

appos_phr := head_initial &
  [ SYNSEM phr_synsem &
	   [ LOCAL.CAT [ HEAD.PRD #prd,
                         VAL #valence ],
	     NON-LOCAL [ SLASH 0-dlist,
			 QUE 0-dlist,
			 REL 0-dlist ] ],
    HEAD-DTR.SYNSEM canonical_synsem &
	   [ LOCAL [ CAT [ HEAD noun & [ PRD #prd ],
			   VAL #valence &
			       [ SPR *olist*,
				 COMPS *olist* ] ],
		     CONT [ TOP #top,
			    INDEX #hind & ref-ind ],
		     KEYS.KEY apposition_rel,
		     AGR.PNG.PN #agr,
		     CONJ cnil ],
	     NON-LOCAL [ SLASH 0-dlist,
			 QUE 0-dlist,
			 REL 0-dlist ] ],
    NON-HEAD-DTR.SYNSEM canonical_synsem &
	   [ LOCAL [ CAT [ HEAD noun &
                                [ CASE nom ],
			   VAL [ SPR *olist*,
				 COMPS *olist* ] ],
		     CONT [ TOP #top,
			    INDEX #modind & ref-ind ],
		     KEYS.KEY apposition_rel,
		     AGR.PNG.PN #agr ],
	     NON-LOCAL [ SLASH 0-dlist,
			 QUE 0-dlist,
			 REL 0-dlist ] ],
    C-CONT [ TOP #top,
	     INDEX #hind,
	     LISZT <! _cop_id_rel & [ HANDEL #top,
                                      ARG #modind,
                                      ARG3 #hind ] !>,
	     H-CONS <! !> ] ].

letter_phr := binary_phrase &
  [ SYNSEM phr_synsem &
	   [ LOCAL [ CAT #cat,
                     KEYS.KEY spell_rel & 
                         [ HANDEL #top,
                           INST #ind & [ PNG png & [ PN 3sg* ] ],
                           LETTERS [ LIST < #let . #letlist >,
                                     LAST #letlast ] ],
                     CONJ cnil ],
	     NON-LOCAL #nonloc ],
    ARGS < [ SYNSEM lex_synsem &
                    [ LOCAL [ CAT #cat & [ HEAD no_head ],
                              CONT.LISZT <! !>,
                              KEYS.KEY spell_rel & [ LETTERS.LIST.FIRST #let ],
                              CONJ cnil ],
                      NON-LOCAL #nonloc ] ],
           [ SYNSEM synsem &
                    [ LOCAL[ KEYS.KEY spell_rel & [ LETTERS [ LIST #letlist,
                                                              LAST #letlast ] ],
                             CONT.LISZT <! !> ] ] ] >,
    C-CONT [ TOP #top,
	     INDEX #ind,
	     LISZT <! !>,
	     H-CONS <! !> ] ].

letter_phr2 := unary_phrase &
 [ SYNSEM np_synsem &
          [ LOCAL [ CAT nomp_cat_min &
                        [ HEAD noun,
                          VAL.SPR < > ],
                    CONJ cnil,
                    KEYS.KEY #key ],
            NON-LOCAL #nonloc ],
   ARGS < [ SYNSEM [ LOCAL [ CAT.HEAD no_head,
			     CONT.LISZT <! !>,
                             KEYS.KEY #key & spell_rel &
                                      [ HANDEL #hand,
                                        INST #ind ],
			     CONJ cnil ],
                     NON-LOCAL #nonloc ] ] >,
   C-CONT [ INDEX #ind,
            LISZT <! #key, udef_rel & [ BV #ind,
                                        RESTR #rhand ] !>,
            H-CONS <! qeq & [ SC-ARG #rhand,
                              OUTSCPD #hand ] !> ] ].
;;
;; Temporal NP modifiers
;;

; DPF 11-Jun-99 - Added SUBJ..OPT - to prevent these temporal NPs from filling
; ordinary NP argument positions.
;
; DPF 26-Jul-99 - Changed [HEAD noun] to [HEAD prep] to avoid double parse
; for "Thursday the fourth" where "the fourth" attaches after "Thursday"
; is itself a temp_mod phrase.
; DPF 9-Sept-99 - Added PRD - to mother, to block temp-mods as complements of
; copula.
; DPF 30-Sept-99 - But this blocks all post-nominal modification with temporal NPs,
; sigh.  Besides, the most natural reading of "The meeting is Tuesday" is with
; the temp-mod reading rather than the identity one.

temp_mod_phrase := unary_phrase & phrasal &
  [ SYNSEM [ LOCAL [ CAT [ HEAD prep &
				[ MOD < [ LOCAL intersective_mod &
					  [ CAT n_or_v_cat,
					    CONT.INDEX #ind,
					    KEYS.MESSAGE 0-dlist ] ] > ],
			   POSTHEAD +,
			   VAL [ SUBJ < synsem &
					[ LOCAL [ CAT nomp_cat_min,
						  CONJ cnil,
						  CONT.INDEX #ind,
						  THROLE arg1 ],
					  NON-LOCAL [ SLASH 0-dlist,
						      REL 0-dlist,
						      QUE 0-dlist ],
					  OPT - ] >,
				 SPR < synsem & [ LOCAL local_min &
					   [ CAT [ HEAD adv,
						   VAL [ SPR *olist*,
							 COMPS *olist* ] ],
					     KEYS.KEY degree_rel &
						 [ HANDEL #khand,
						   DARG #darg ] ],
				     NON-LOCAL.QUE 0-dlist,
				     OPT + ] >,
				 COMPS #comps ],
			   MC na ],
		     CONT.INDEX #ind,
		     CONJ cnil,
		     KEYS [ KEY loc_rel & #key & 
				      [ HANDEL #khand,
					ARG #ind & event_or_index,
					ARG3 #index,
					DIM #darg ],
			    MESSAGE 0-dlist ] ],
	     NON-LOCAL #nonloc ],
    ROOT -,
    ARGS < [ SYNSEM [ LOCAL [ CAT [ HEAD noun,
				    VAL [ SPR *olist*,
					  COMPS #comps & *olist* ] ],
			      CONT.INDEX #index,
			      CONJ cnil,
			      KEYS.KEY modable_rel ],
		      NON-LOCAL #nonloc ] ] >,
    C-CONT [ TOP #khand,
	     LISZT <! #key !>,
	     H-CONS <! !> ] ].

numadj_noun_phrase := unary_phrase & phrasal &
  [ SYNSEM [ LOCAL [ CAT [ HEAD noun* & 
				[ POSS -,
				  MOD < > ],
			   VAL [ SUBJ < >,
				 SPR < synsem &
				       [ LOCAL local_min &
					       [ CAT [ HEAD det,
						       VAL [ SUBJ < >,
							     SPR *olist*,
							     COMPS *olist* ] ],
						 KEYS.KEY quant_or_wh_rel ],
					 OPT - ] >,
				 COMPS < > ] ],
		     KEYS [ KEY pron_rel & #key &
			      [ HANDEL #hand,
				INST #inst & ref-ind &
				       [ PNG png & [ PN 3pl* ],
					 PRONTYPE impers ] ],
			    ALTKEY #altkey ],
		     AGR #inst,
		     CONJ cnil,
		     CONT nom-obj &
			  [ INDEX #inst,
			    H-CONS <! !> ] ],
	     NON-LOCAL #nonloc ],
    ROOT -,
    ARGS < [ SYNSEM [ LOCAL [ CAT [ HEAD intadj,
				    VAL [ SPR *olist*,
					  COMPS < > ] ],
			      CONT.INDEX #inst & [ DIVISIBLE + ],
			      KEYS.KEY const_rel & #altkey &
				  [ HANDEL #hand,
				    ARG #inst ],
			      CONJ cnil ],
		      NON-LOCAL #nonloc ] ] >,
    C-CONT [ LISZT <! #key !>,
	     H-CONS <! !> ] ].


; DPF 12-Mar-99 - Can't simply identify HEAD of HEAD-DTR with SLASH..HEAD of 
; NON-HEAD-DTR, since these two HEAD values themselves include MOD, which 
; includes SUBJ values, which include CONT, and since the free relative
; combines with an S (not a VP), that SUBJ.CONT of the S/NP is now identified
; with the semantics of the S/NP's subject, but now it's not possible to
; use the free_rel phrase as a VP modifier, because it will eventually want to
; unify that same MOD.SUBJ.CONT with that of the subject of the VP that the
; free_rel modifies, but the LISZT value of that attribute is already bound to 
; the earlier subject's LISZT.
;   So we have each free-rel lexical entry specify the relevant constraints on
; the SLASH of its sister in this construction.
;   The QUE value of the free relatives is a singleton list containing an index
; instead of a handle - this distinguishes free relatives from question words,
; and makes available this index for interpretation at the top of the phrase,
; which may be desirable if there is indeed ambiguity in the meaning of
; examples like "I'll interview whoever's frog wins this race."  (We're not
; doing anything with that index just now, beyond checking for its presence.)
; DPF (1-May-99) Removed identification of HEAD-DTR..KEY and NHD-DTR..SLASH..KEY
; since the slash's KEY is already identified with the main verb's KEY in the
; non-head dtr, for independent reasons.  Don't know what work this was supposed
; to do, anyway.
;
; DPF 10-Jun-99 - Added SUBJ *olist* to head-dtr, to prevent e.g. "one to three".

free_rel_phrase := head_initial & head_compositional &
  [ SYNSEM [ LOCAL [ CAT [ HEAD n_or_p,
			   MC na,
			   VAL [ SUBJ < >,
				 COMPS < >,
				 SPR < > ],
			   POSTHEAD + ],
		     KEYS.MESSAGE 0-dlist ],
	     NON-LOCAL [ SLASH 0-dlist,
			 QUE 0-dlist,
			 REL 0-dlist ] ],
    HEAD-DTR.SYNSEM [ LOCAL local_min &
			    [ CAT.VAL [ COMPS < >,
					SPR *olist*,
					SUBJ *olist* ],
			      CONT.INDEX #ind,
			      KEYS [ KEY #key,
				     ALTKEY.HANDEL #althand ] ],
		      NON-LOCAL [ QUE 1-dlist & <! index !>,
				  SLASH 1-dlist &
				      <! local_min & #loc !> ] ],
    NON-HEAD-DTR.SYNSEM [ LOCAL [ CAT [ HEAD verb &
					     [ VFORM fin,
					       TENSE tense,
					       INV - ],
					VAL [ SUBJ *olist*,
					      SPR *olist*,
					      COMPS *olist* ] ],
				  CONT.TOP #althand,
				  KEYS.MESSAGE 1-dlist ],
			  NON-LOCAL [ SLASH 1-dlist &
					    <! #loc &
					       [ CAT.VAL [ COMPS *olist*,
							   SPR *olist* ],
						 CONT.INDEX #ind,
						 KEYS.KEY #key ] !>,
				      QUE 0-dlist,
				      REL 0-dlist ] ],
    C-CONT [ LISZT <! !>,
	     H-CONS <! !> ] ].

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Coordinate structures
;;
; To enable coordination of categories that are similar but not identical, we
; introduce intermediate types for some attribute values, including those for
; HEAD, AUX, and AGR.  Lexical items and the phrases they project will have
; these intermediate types as values, while signs that select for a given
; type will usually specify values for the above features using their most
; specific types.  For example, a preposition will be [ HEAD prep* ] but a
; verb which subcategorizes for a PP will specify that its complement must be
; [ HEAD prep ], assuming that HEAD values are of type 'head' organized in a
; type hierarchy as follows (simplified for exposition):
; 	
; 		head
;            /   |   \
; 	verb*  prep*  noun*
;         /  \  /  |  \  /  \
;      verb  v+p  prep p+n   noun
; 
; Most heads will select for a specific value for HEAD, but the copula "be"
; leaves the HEAD value underspecified, requiring only that its complement be
; [ PRD + ], so it will happily take as complement the conjoined phrase
; "in Paris and shopping", where the value of HEAD for this phrase is the
; unification of 'verb*' and 'prep*", namely 'v+p'.  This assumes that the
; constituent coordination schema simply requires that the CAT values of both
; conjuncts unify.
; 
; In a similar manner, the conjunction of two verb phrases, one headed by a
; main verb and one by an auxiliary, will work as long as no other constraints
; are imposed on the attribute AUX for this conjoined phrase.  Here the feature
; AUX is boolean-valued, with the following sort hierarchy for this value type:
; 
; 		bool
; 	 	/   \
;             +*     -*
; 	     /  \   /  \
;  	    +  +_and_-  -
; 
; Then in the sentence "Kim sings and has danced" the VP is [ AUX +_and_- ],
; and since declarative clauses impose no constraint on the value for AUX, the
; sentence is correctly admitted. In contrast, the auxiliary verb "do" requires
; its complement to be [ AUX - ], and since the sort '-' does not unify with
; the sort '+_and_-', the following example is correctly ruled out: 
; "*Kim did sing and have danced".
; 
; Elaborations:
; 
; 1. Since some heads only partially constrain their complements, as with
; "consider" which accepts either an AP or an NP complement, we enrich the
; above hierarchies to include a notion of 'strict' or most specific values,
; so "consider" can restrict its complement to be [ HEAD a_or_n & strict_type ]
; assuming the following more elaborate (though again partial) hierarchy:
; 
;                        head
;              	       /  |   			    
; 		      /   |    strict_type
; 	             /  a_or_n   / /  | 
;                   /       / \_/ /   | 
;                  /       /   /\/    |
;                 prep*   adj*/ /noun*|
;                 |  _\__/_|_/\/  /\  |
;                 | /  \/  |  /\ /  \ |
;                prep p+a  adj a+n  noun
; 
; Here the only consistent values for the complement of "consider" are 'adj'
; or 'noun'.  Of course this isn't quite right, since we thereby exclude the
; coordination "consider Kim a friend and reliable".  What we would need is a
; way of specifying for the complement of "consider" all and only the most
; specific values subsumed by 'a_or_n'.  But at present if a head needs to
; impose partial constraint on an attribute, we cannot also get the kind of
; non-identical coordination we showed for the copula.  Leave for future work.
; 
; 2. We also undergenerate coordination of non-identical phrases in those cases
; where more than one sign imposes constraints on a single attribute.  For
; example, both determiners and verbs can constrain the AGR value of a noun
; phrase, but as soon as one of them does, we are left with a "strict" value,
; which precludes coordination with a non-identical value.  Thus we currently
; get the following incorrect pattern of grammaticality assignments:
; 
; 	a.  Abrams and the consultant
; 	b.  Abrams and the consultants
; 	c.  Abrams and this consultant
; 	d. *Abrams and these consultants
; 
; Example (b) is okay because the determiner "the" does not constrain the AGR
; value of the noun it specifies, so the NP "the consultants" will still be
; (nonstrict) [AGR 3pl*], and hence the conjoined "Abrams and the consultants"
; unifies [AGR 3sg*] and [AGR 3pl*] to give [AGR 3sg+3pl] (assuming a hierarchy
; for AGR analogous to those above for 'head' and 'bool').  Example (d) fails
; because "these" constrains its noun to be (strict) [AGR 3pl], and thus the NP
; "these consultants" will also be [AGR 3pl], and will not coordinate with
; "Abrams" because their CAT values will not unify.
;   We set the KEY of the mother to be that of the right-hand daughter, rather
; arbitrarily, but the KEY needs to be set, since many lexical types select
; an argument based on the KEY value.
;   We also need to set the type of the index on the mother, to match the types
; of the indices on the daughters.  It looks like this will force us to make the
; kind of index a feature, not just a type, but for now we wrongly make the
; index be that of the right-hand daughter.  This does not break subject-verb
; agreement for plural NPs, since we only change INDEX in this hack, not AGR.
;   And we have to make sure that the SCOPE attributes of two conjoined 
; quantified phrases are identified, but not clear how to do this.
;   DPF (27-Apr-99) Both conjuncts have KEY constrained to independent_rel, since
; they may be relations underspecified for use as particles - by doing this, we
; exclude coordination of particles themselves, but this is probably okay.
;   DPF (1-May-99) At present we overgenerate with conjoined propositions because
; we cannot identify the MESSAGE values of the two conjuncts - that would wrongly
; make the SOA values of those two messages be identified. Hence we accept e.g.
; "*I wonder who left and that Sandy arrived".  As long as MESSAGE values are
; typed relations, there doesn't seem to be a way out of this awkwardness.
;   DPF (1-May-99) In the long run, we cannot simply identify the whole local 
; values of SLASH for the two conjuncts, since this would mean that the handles 
; of the two extracted elements would be wrongly identified - wrong at least for
; ordinary complements, which identify their TOP handle with that of their head,
; meaning that in "the book Kim saw and Sandy liked" the handles for "saw" and 
; "liked" would be identified, which is bad since these handles each fill a SOA 
; role in distinct messages.  

; DPF 20-Nov-99 - Made all coord_phr's be LEX - in order to avoid, among other
; things, coordinate structures as right members of noun-noun compounds, as in
; 'the seventeenth, twentieth, or twenty-third'.

coord_phr := binary_phrase & non_headed_phrase & 
  [ SYNSEM [ LOCAL [ CAT #cat,
 		     CONT.INDEX #ind,
		     AGR #agr,
		     KEYS.KEY #key ],
             NON-LOCAL #non-local,
	     LEX - ],
    LCONJ-DTR sign & #left &
		[ SYNSEM [ LOCAL [ CAT #cat,
				   CONT.INDEX individual,
				   KEYS.KEY independent_rel ],
			   NON-LOCAL #non-local ] ],
    RCONJ-DTR phrase & #right &
		[ SYNSEM [ LOCAL [ CAT #cat,
				   CONT.INDEX individual & #ind,
				   AGR #agr,
				   KEYS.KEY #key & independent_rel ],
			   NON-LOCAL #non-local ] ],
    ARGS < #left, #right > ].

; ROOT_GAP_CLAUSE is for elliptical constructions consisting only of an adverb
; and some NP which would be an argument in the elided verb phrase modified by 
; the adverb.  Examples: "not Kim", "maybe Sandy"
; (Note "*Sandy bothered not Kim" but "Who did Sandy bother?  Not Kim.")
;
; Let's see if we can restrict this rule to only admit scopal adverb for MOD-DTR>
; DPF 02-Jan-00 - Misses e.g. "Sunday night as well"
;
; DPF 9-Jun-99 - Changed SYNSEM.HEAD to be 'root-marker' rather than 'verbal'
; since we don't want "so anytime before" as a head-mod phrase.
;
; DPF 27-Jul-99 - Changed MOD-DTR's SUBJ to be unconstrained, since e.g.
; "perhaps" is now an S-modifier, and we need "perhaps on Tuesday".

root_gap_clause := binary_phrase & non_headed_phrase & phrasal &
  [ SYNSEM [ LOCAL [ CAT [ HEAD adv &
				[ MOD < > ],
			   VAL [ SUBJ *olist*,
				 SPR *olist*,
				 COMPS *olist* ],
			   MC - ],
		     CONT.INDEX event_or_index,
		     CONJ cnil,
		     KEYS [ KEY #key,
			    MESSAGE 0-dlist ] ],
	     NON-LOCAL #nloc,
	     MODIFIED hasmod ],
    MOD-DTR sign &
      [ SYNSEM [ LOCAL [ CAT [ HEAD.MOD < [ LOCAL.CAT [ HEAD verb,
							VAL.COMPS *olist* ] ] >,
			       VAL.COMPS < >,
			       MC na ],
			 CONT [ TOP #mhand,
				INDEX #mindex ],
			 CONJ cnil,
			 KEYS [ KEY arg_rel,
				MESSAGE 0-dlist ] ],
		 NON-LOCAL [ SLASH 0-dlist,
			     REL 0-dlist,
			     QUE 0-dlist ] ] ],
    NONMOD-DTR sign &
	   [ SYNSEM [ LOCAL [ CAT [ HEAD strict_type & subst &
					 [ PRD - ],
				    MC na,
				    VAL [ SPR *olist*,
					  COMPS *olist* ] ],
                              CONT [ INDEX ref-ind ],
                              CONJ cnil,
			      KEYS.KEY #key ],
		      NON-LOCAL #nloc ] ],
    C-CONT [ TOP #mhand,
	     INDEX #mindex,
	     LISZT <! !>,
	     H-CONS <! !> ] ].



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Proto-instance types

subjh_rule_decl := binary_rule_right_to_left & head_subj_phrase & decl &
  [ SYNSEM.LOCAL.CAT.MC bool ].

hcomp_rule := binary_rule_left_to_right & head_comp_phrase.

hoptcomp_rule := rule & head_opt_comp_phrase.

hmark_prop_rule := binary_rule_left_to_right & head_marker_phrase_prop.
hmark_nonprop_rule := binary_rule_left_to_right & head_marker_phrase_nonprop.

extracomp_rule := rule & extracted_comp_phrase.

extrasubj_fin_rule := rule & extracted_subj_phrase_fin.
extrasubj_inf_rule := rule & extracted_subj_phrase_inf.

#|
hspec_nc_rule := binary_rule_right_to_left & head_spec_noncompos.

hspec_c_rule := binary_rule_right_to_left & head_spec_compos.
|#
hspec_rule := binary_rule_right_to_left & head_spec_phrase.

adjh_s_rule := binary_rule_left_to_right & adj_head_scop_phrase.
adjh_i_rule := binary_rule_left_to_right & adj_head_int_phrase.

hadj_s_rule := binary_rule_right_to_left & head_adj_scop_phrase.
hadj_i_n_rule := binary_rule_right_to_left & n_adj_int_phrase.
hadj_i_h_rule := binary_rule_right_to_left & h_adj_int_phrase.

extradj_i_rule := rule & extracted_adj_int_phrase.

;; extradj_s_rule := rule & extracted_adj_scop_phrase.


fin_non_wh_rel_rule := rule & fin_non_wh_rel_cl.

inf_non_wh_rel_rule := rule & inf_non_wh_rel_cl.

; ERB (19-01-98) The single non_wh_rel_rule dream didn't come true.
; non_wh_rel_rule := rule & non_wh_rel_cl.

bare_np_rule := rule & bare_np_phrase.

bare_vger_rule := rule & bare_vger_phrase.

;n_n_cmpnd_rule := binary_rule_right_to_left & n_n_cmpnd_phr.
np_n_cmpnd_rule := binary_rule_right_to_left & np_n_cmpnd_phr.
np_n_cmpnd_rule_2 := binary_rule_right_to_left & np_n_cmpnd_phr_2.
noun_n_cmpnd_rule := binary_rule_right_to_left & noun_n_cmpnd_phr.
appos_rule := binary_rule_right_to_left & appos_phr.
letter_rule := rule & letter_phr.
letter_rule2 := rule & letter_phr2.
temp_mod_rule := rule & temp_mod_phrase.
numadj_noun_rule := rule & numadj_noun_phrase.

;; DPF 22-Dec-98 - Modified filler_head_rule_non_wh to require head to be 
;; VFORM fin, in order to block "*Kim hire".  The VFORM used to be fin_or_imp,
;; to allow an extraction analysis of "On Monday hire Kim", but this also
;; allowed a spurious second analysis for "On Monday tell Kim that Sandy left".
;; So a new construction for left dislocation is needed for "On Monday hire Kim",
;; one which would also admit "As for that book, who did it offend?" where a
;; (double) extraction analysis would otherwise be required.

;; DPF 29-Jan-99 - Constrained nonhead_dtr to be HEAD n_or_p, in order to block
;; Yoda examples like "Happy you will be" or "Making a mess you are".  More
;; generally these should simply be dispreferred, but we'll block them for now.
;
; DPF 10-Jun-99 - Note that filler_head_rule_non_wh does not currently inherit 
; from non_rel_clause, but perhaps should.
; 
; DPF 10-Jun-99 - Removed mc_phrase parent from filler_head_rule_non_wh, since
; topicalized constructions can be embedded, as in "Kim thinks on Tuesday we
; should be in Berlin"

filler_head_rule_non_wh := binary_rule_left_to_right & head_filler_phrase_fin & 
                           head_compositional &
  [ SYNSEM [ LOCAL.KEYS.MESSAGE #msg,
	     NON-LOCAL.QUE 0-dlist ],
    HEAD-DTR.SYNSEM.LOCAL [ CAT [ HEAD verbal & strict_type &
				       [ INV - ],
				  MC + ],
			    KEYS.MESSAGE 1-dlist & #msg ],
    NON-HEAD-DTR.SYNSEM [ LOCAL.CAT.HEAD n_or_p & strict_type,
			  NON-LOCAL [ QUE 0-dlist,
				      REL 0-dlist ] ],
    C-CONT [ LISZT <! !>,
	     H-CONS <! !> ] ].
  
filler_head_rule_wh_root := binary_rule_left_to_right & 
			    head_filler_phrase_fin & wh_interrog_fin & 
                            mc_phrase &
  [ SYNSEM.LOCAL.CAT.HEAD.INV +,
    HEAD-DTR.SYNSEM.LOCAL.CAT.MC - ].

;; DPF (21-Apr-98) To block use of fill_head_wh_subj in "Kim knows who Sandy saw"
;; added constraint that filler must be [CASE NOM].

filler_head_rule_wh_subj := binary_rule_left_to_right & 
			    head_filler_phrase_fin & wh_interrog_fin & 
			    mc_phrase &
  [ SYNSEM.LOCAL.CAT.HEAD.INV -,
    HEAD-DTR.SYNSEM.LOCAL [ CAT.VAL.SUBJ < >,
			    KEYS.MESSAGE 1-dlist ],
    NON-HEAD-DTR.SYNSEM.LOCAL.CAT.HEAD noun & [ CASE nom ] ].

;; DPF (21-Apr-98) Removed constraint making HEAD-DTR [MC -], since this was
;; blocking "Abrams knows who Kim saw."

filler_head_rule_wh_nr_fin := binary_rule_left_to_right & 
			      head_filler_phrase_fin & wh_interrog_fin &
  [ SYNSEM.LOCAL.CAT [ HEAD.INV -,
		       MC - ],
    HEAD-DTR.SYNSEM.LOCAL.KEYS.MESSAGE 1-dlist ].

; DPF 13-Nov-99 - Restricted SUBJ on mother to be 'unexpressed' to prevent
; the subject-extraction rule from applying.
; DPF 13-Nov-99 - Changed [MC na] to [MC -] since e.g. "know" wants an MC -
; complement, as in "kim knows who to hire".

filler_head_rule_wh_nr_inf := binary_rule_left_to_right & 
			      head_filler_phrase_inf & wh_interrog &
  [ SYNSEM.LOCAL.CAT [ HEAD.INV -,
		       VAL.SUBJ < unexpressed >,
		       MC - ],
    HEAD-DTR.SYNSEM.LOCAL.CAT.VAL.SUBJ < pro_ss > ].

filler_head_rule_rel := binary_rule_left_to_right & rel_cl & 
			basic_head_filler_phrase &
  [ SYNSEM.LOCAL [ CAT [ HEAD [ VFORM #vform,
				TENSE #tense,
				AUX #aux,
				INV #inv,
				MOOD #mood,
				MOD #mod & < [ LOCAL.CONT.INDEX #ind ] > ],
			 VAL.SUBJ *olist* & #subj ],
		   KEYS.KEY #key ],
    ARGS < [ SYNSEM [ LOCAL.CONJ cnil,
		      NON-LOCAL [ QUE 0-dlist,
				  REL 1-dlist &
				      [ LIST < [ INDEX #ind ] > ] ] ] ],
	   [ SYNSEM [ LOCAL [ CAT [ HEAD verb & [ VFORM #vform & fin,
						  TENSE #tense & tense,
						  AUX #aux,
						  INV #inv,
						  MOOD #mood,
						  MOD #mod ],
				    VAL.SUBJ #subj,
				    MC - ],
			      CONJ cnil,
			      KEYS [ KEY #key,
				     MESSAGE 1-dlist &
					 <! [ HANDEL #mhand ] !> ] ],
		      NON-LOCAL [ QUE 0-dlist,
				  REL 0-dlist ] ] ] >,
    C-CONT [ TOP #mhand,
	     LISZT <! !>,
	     H-CONS <! !> ] ].

; ERB (05-10-96) This no longer inherits from mc_phrase because it also
; serves to make nonroot phrases, such as the bracketed phrase in: "On Tuesday
; [plan to meet Kim]".

imperative_rule := rule & imp.

yesno_rule := rule & yesno_phrase.

; The top_coord_rule is for building the top of a (potential iterated)
; coordinate structure and the mid_coord_rule is for building intermediate
; parts of an iterated coordinate structure.  The mid_coord_rule (and the
; head/marker schema) collect the handels and indices of the conjuncts under
; the CONJ feature and passes them (with the lexically specified coordination
; relation) up from the right conjunct.  The top_coord_rule uses handels and
; liszts from the CONJ value to build the values for an n-ary coordination 
; relation.  We could skip all this feature passing if we weren't limited by 
; performance considerations to binary trees.  That is, we could build 
; coordinate structures like:					  
;       						  
;       						  
;      coord_phrase					  
;             +-			          -+	  
;             | conj_rel  		           |	  
;      LISZT  | C-HANDELS  [h1], [h2], ..., [hn]   |	  
;             | C-INDICES  [i1], [i2], ..., [in]   |	  
;             +-    		                  -+	  
;             /             /                \ 	 	  
;            /  	   /    	      \  	  
;           /   	  /     	       \ 	  
;          /    	 /      		\ 	  
;         /     	/       		 \ 	  
;      phrase        phrase    	       	       phrase	  
;      TOP   [h1]    TOP   [h2] ...            TOP   [hn]
;      INDEX [i1]    INDEX [i2]                INDEX [in]
;        |             |                	 |  
;        |             |                         |  
;       Kim          Sandy       ...            Lee 
;       			     
; then we could eliminate the features HANDELS and INDICES.  These
; feature are just for bookkeeping.  The feature LEFT, on the other hand, is
; essential to the analysis.  The LEFT value is a list of (up to) two
; elements.  The first element is the required CONJ value of the left conjunct
; in a top_coord_phrase and the second element is the CONJ value of the left
; conjunct in a mid_coord_phrase.  For example, a LEFT value of < either, or >
; permits a coordinate structure like "either Kim or Sandy or Chris or Lee".
                                  
top_coord_rule := binary_rule_right_to_left & coord_phr &
  [ SYNSEM.LOCAL.CONJ cnil,
    LCONJ-DTR.SYNSEM.LOCAL local &
		      [ CONJ conj & #left,
			CONT.INDEX #lind ],
    RCONJ-DTR.SYNSEM.LOCAL local &
		      [ CONT.TOP #ctop,
			CONT.INDEX #ind,
			KEYS.ALTKEY.L-INDEX #lind,
			CONJ complex-conj &
				  [ CHEAD [ LEFT <#left, ...> ] ] ],
    C-CONT [ TOP #ctop,
	     INDEX #ind & conj-ind,
	     LISZT <! !>,
	     H-CONS <! !> ] ].


mid_coord_rule := binary_rule_right_to_left & coord_phr &
  [ SYNSEM.LOCAL [ CONJ complex-conj &
		      [ CHEAD #chead ],
		   KEYS.ALTKEY #altkey ],
    LCONJ-DTR.SYNSEM.LOCAL [ CONJ conj & #left,
			     CONT.INDEX #lind ],
    RCONJ-DTR.SYNSEM.LOCAL [ CONT [ TOP #ctop,
				    INDEX #ind ],
			     CONJ complex-conj &
				  [ CHEAD #chead & 
					  [ LEFT < *top*, #left > ] ],
			     KEYS.ALTKEY.L-INDEX #cind ],
    C-CONT [ TOP #ctop,
	     INDEX #ind & conj-ind &
		   [ PNG.PN non1sg ],
	     LISZT <! conj_rel & #altkey &
		      [ C-ARG #cind & non_expl,
			R-INDEX #lind ] !>,
	     H-CONS <! !> ] ].

; Coordination of propositions, with non-empty MESSAGE.
top_coord_prop_rule := top_coord_rule &
  [ SYNSEM.LOCAL [ CAT.HEAD verbal,
		   CONT.INDEX conj_full_non_expl,
		   KEYS.MESSAGE 1-dlist ],
    LCONJ-DTR.SYNSEM.LOCAL [ CONT.TOP #lhand,
			     KEYS.MESSAGE 1-dlist ],
    RCONJ-DTR.SYNSEM.LOCAL.KEYS [ ALTKEY.L-HANDEL #lhand,
				  MESSAGE 1-dlist ] ].

; Coordination of all non-propositions, including NPs, VPs, PPs, etc.
mid_coord_prop_rule := mid_coord_rule &
  [ SYNSEM.LOCAL [ CAT.HEAD verbal,
		   CONT.INDEX conj_full_non_expl,
		   KEYS.MESSAGE 1-dlist ],
    LCONJ-DTR.SYNSEM.LOCAL [ CONT.TOP #lhand,
			     KEYS.MESSAGE 1-dlist ],
    RCONJ-DTR.SYNSEM.LOCAL.KEYS [ ALTKEY.L-HANDEL #chand,
				  MESSAGE 1-dlist ],
    C-CONT.LISZT <! [ HANDEL #chand,
		      R-HANDEL #lhand ] !> ].

; In order to use the same lexical entries for both prop and nonprop coordination,
; in the nonprop cases we unify the SYNSEM's TOP handle with the first of the
; handles in the conjunction's HANDELS list.

top_coord_nonprop_rule := top_coord_rule &
  [ SYNSEM.LOCAL.KEYS.MESSAGE 0-dlist,
    LCONJ-DTR.SYNSEM.LOCAL.KEYS.MESSAGE 0-dlist,
    RCONJ-DTR.SYNSEM.LOCAL.KEYS.MESSAGE 0-dlist ].

mid_coord_nonprop_rule := mid_coord_rule &
  [ SYNSEM.LOCAL.KEYS.MESSAGE 0-dlist,
    LCONJ-DTR.SYNSEM.LOCAL.KEYS.MESSAGE 0-dlist,
    RCONJ-DTR.SYNSEM.LOCAL.KEYS.MESSAGE 0-dlist ].

; DPF 27-Jul-99 - Removed NONMOD-DTR..HEAD restriction (was n_or_a), since
; we want "perhaps in Berlin" with this rule.
root_gap_rule_premod := binary_rule_left_to_right & root_gap_clause &
  [ MOD-DTR #left &
	    [ SYNSEM.LOCAL.CAT.POSTHEAD - ],
    NONMOD-DTR #right,
    ARGS < #left, #right > ].

root_gap_rule_postmod := binary_rule_right_to_left & root_gap_clause &
  [ MOD-DTR #right &
	    [ SYNSEM.LOCAL.CAT.POSTHEAD + ],
    NONMOD-DTR #left,
    ARGS < #left, #right > ].

free_rel_rule := binary_rule_left_to_right & free_rel_phrase.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Unary rules that define admissible outputs for the parser.

root_phrase := phrasal & rule &
  [ INFLECTED +,
    ROOT +,
    SYNSEM.LOCAL [ CAT #cat,
		   CONT [ LISZT *diff-list* &
				[ LIST #first,
				  LAST #last ],
			  H-CONS *diff-list* &
				[ LIST #scfirst,
				  LAST #sclast ],
                          TOP #top,
			  TOP-H #top & handle ],
		   KEYS [ KEY #key,
			  MESSAGE 0-dlist ] ],
    C-CONT [ LISZT [ LIST #middle,
		     LAST #last ],
	     H-CONS [ LIST #scmiddle,
		      LAST #sclast ] ],
    ARGS < sign & [ INFLECTED +,
		    ROOT -,
                    SYNSEM.LOCAL local &
				 [ CAT #cat,
				   CONT [ LISZT *diff-list* &
						[ LIST #first,
						  LAST #middle ],
					  H-CONS *diff-list* &
						[ LIST #scfirst,
						  LAST #scmiddle ],
					  TOP-H #top ],
				   KEYS.KEY #key ] ] > ].


root_clause := root_phrase &
  [ ARGS < [ SYNSEM [ LOCAL [ CAT [ HEAD verb &
				        [ MOOD ind_or_mod_subj & strict_sort],
				    VAL [ SUBJ *olist*,
					  SPR *olist*,
					  COMPS *olist* ],
				    MC + ],
			      CONT [ INDEX #index,
				     TOP #mhand,
				     TOP-H #mhand & handle ],
			      CONJ cnil ],
		      NON-LOCAL [ SLASH 0-dlist & [ LIST < > ],
				  REL 0-dlist & [ LIST < > ],
				  QUE 0-dlist & [ LIST < > ] ] ] ] >,
    C-CONT [ LISZT <! !>,
             INDEX #index,
	     H-CONS <! !> ] ].

:end :type.
