;;; -*- Mode: tdl; Coding: utf-8; -*-
;;;
;;;  Copyright (c) 1994-2013
;;;    Dan Flickinger, Rob Malouf, Emily M. Bender
;;;    see LICENSE for conditions
;;;
;;;  roots.tdl
;;;

; The instances in this file are needed by the parser to know which phrase 
; types to accept as successful parses of the full input string.

; Recommended for generation
; <type val="root_strict">
; <description>Formal edited written English, ending with clause punctuation.
; <ex>We admire Oslo.
; <nex>We gotta admire Oslo.
; <todo>
; <native> 
; </type>
root_strict := phrase &
  [ INFLECTD +,
    SYNSEM root_synsem &
             [ LOCAL.CAT.HEAD verb_or_conj-s,
               PUNCT.RPUNCT basic_clause_punct ],
    GENRE edited,
    DIALECT us,
    ORTH root_orth ].

; Recommended for parsing, unless domain is all edited text
; <type val="root_informal">
; <description>Nonformal written English, does not require clause punctuation.
; <ex>You gotta admire Oslo.
; <nex>
; <todo>
; <native> 
; </type>
root_informal := phrase &
  [ INFLECTD +,
    SYNSEM root_synsem,
    GENRE standard,
    ORTH root_orth ].

root_robust := phrase &
  [ INFLECTD +,
    SYNSEM basic_root_synsem &
             [ LOCAL [ CAT [ HEAD verb_or_frag & 
				  [ MOD *anti_list*,
				    VFORM fin_or_bse_or_imp ],
			     MC na_or_+ ],
                       CONJ cnil_or_lexconj ] ],
    GENRE robust,
    ORTH root_orth ].

; robust sentences only
root_robust_s := phrase &
  [ INFLECTD +,
    SYNSEM basic_root_synsem &
             [ LOCAL [ CAT [ HEAD verb_or_conj-s & 
				  [ MOD *anti_list*,
				    VFORM fin_or_bse_or_imp ],
			     VAL.SUBJ *anti_list*,
			     MC + ],
                       CONJ cnil ],
	       PUNCT.RPUNCT clause_or_pair_or_no_punct ],
    GENRE robust,
    ORTH root_orth ].

root_formal := phrase &
  [ INFLECTD +,
    SYNSEM root_synsem &
             [ LOCAL.CAT.HEAD verb_or_conj-s,
               PUNCT.RPUNCT basic_clause_punct ],
    GENRE formal,
    DIALECT us,
    ORTH root_orth ].

; For robust spoken language phenomena, like sentence final |and|
; Restrict to only CONJ cnil, since already have cl_cnj-frg_c for 
; |and Kim stayed|
; <type val="root_spoken">
; <description>Full sentences reflecting spoken phenomena
; <ex>Kim will, um, stay, and.
; <nex>
; <todo>
; <native> 
; </type>
root_spoken := phrase &
  [ INFLECTD +,
    SYNSEM basic_root_synsem &
             [ LOCAL [ CAT [ HEAD verb & [ VFORM fin_or_imp ],
			     MC + ],
                       CONJ cnil ],
	       PUNCT.RPUNCT clause_or_pair_or_no_punct ],
    GENRE spoken,
    ORTH root_orth ].

; <type val="root_spoken_frag">
; <description>Fragments (not full sentences) reflecting spoken phenomena
; <ex>the, um, cat
; <nex>
; <todo>
; <native> 
; </type>
root_spoken_frag := phrase &
  [ INFLECTD +,
    SYNSEM basic_root_synsem &
             [ LOCAL [ CAT [ HEAD frag,
			     MC + ],
                       CONJ cnil_or_lexconj ],
	       PUNCT.RPUNCT clause_or_pair_or_no_punct ],
    GENRE spoken,
    ORTH root_orth ].


; Informal fragments
; <type val="root_inffrag">
; <description>Fragments (not full sentences), nonformal
; <ex>cats, dogs and horses
; <nex>
; <todo>
; <native> 
; </type>
root_inffrag := sign &
  [ SYNSEM root_frag_synsem,
    ORTH root_orth ].

; For well-formed fragments in formal genre
; <type val="root_inffrag">
; <description>Fragments (not full sentences), formal written english
; <ex>cats, dogs, and horses
; <nex>
; <todo>
; <native> 
; </type>
root_frag := sign &
  [ SYNSEM root_frag_synsem &
	   [ PUNCT.RPUNCT clause_or_no_punct ],
    GENRE formal,
    DIALECT us,
    ORTH root_orth ].

; Used to determine on which candidate root edges to not apply the idiom checks
; (for efficiency)
root_non_idiom := sign &
  [ IDIOM - ].

;;; The following four are used for `fragmented' (in the LOGON sense) input 
;;; for generator

root_phr := sign &
  [ SYNSEM phr_synsem &
	   [ LOCAL [ CAT [ HEAD [ INV -,
                                  TAM.MOOD indicative,
                                  MINORS.MIN norm_rel ],
			   VAL [ COMPS < >,
                                 SPR *olist* ] ],
		     CONJ cnil ],
             NONLOC [ SLASH 0-dlist & [ LIST < > ],
			 REL 0-dlist & [ LIST < > ] ],
             LEX -,
             PUNCT no_punctuation ],
    INFLECTD +,
    ORTH root_orth ].

root_lex := sign &
  [ SYNSEM [ LEX +,
             LOCAL [ CAT.HEAD non_frag &
			      [ AUX na ],
                     CONJ cnil ],
             PUNCT.RPUNCT clause_or_no_punct ],
    INFLECTD +,
    ORTH root_orth ].

; DPF 09-Jan-00 - Removed MSG message from root_conj, to admit eg "or on 
; Tuesday"

root_conj := sign &
  [ SYNSEM [ LOCAL [ CAT.VAL.COMPS < >,
		     CONJ lex-conj ],
             NONLOC [ SLASH 0-dlist & [ LIST < > ],
			 REL 0-dlist & [ LIST < > ] ],
             PUNCT no_punctuation ],
    INFLECTD +,
    ORTH root_orth ].

root_subord := sign &
  [ SYNSEM [ LOCAL [ CAT [ HEAD prep,
			   VAL.COMPS < > ],
		     CONJ cnil ],
             NONLOC [ SLASH 0-dlist & [ LIST < > ],
                      REL 0-dlist & [ LIST < > ] ],
             PUNCT no_punctuation ],
    INFLECTD +,
    ORTH root_orth ].

; Exclude imperatives and questions (e.g. for grammar checking)

root_decl := phrase &
  [ INFLECTD +,
    SYNSEM root_synsem &
	     [ LOCAL.CONT.HOOK.INDEX.SF prop ],
    GENRE standard,
    ORTH root_orth ].

root_standard := phrase &
  [ INFLECTD +,
    SYNSEM root_synsem,
    GENRE standard,
    DIALECT us,
    ORTH root_orth ].

root_question := phrase &
  [ INFLECTD +,
    SYNSEM root_synsem &
	     [ LOCAL.CONT.HOOK.INDEX.SF ques ],
    GENRE standard,
    DIALECT us,
    ORTH root_orth ].

root_command := phrase &
  [ INFLECTD +,
    SYNSEM root_synsem &
	     [ LOCAL.CONT.HOOK.INDEX.SF comm ],
    GENRE standard,
    DIALECT us,
    ORTH root_orth ].

root_robust_ques := phrase &
  [ INFLECTD +,
    SYNSEM basic_root_synsem &
	     [ LOCAL [ CAT [ HEAD verbal_or_conj-s & [ VFORM fin ],
			     MC + ],
		       CONT.HOOK.INDEX.SF ques,
		       CONJ cnil ],
	       PUNCT.RPUNCT clause_or_pair_or_no_punct &
		            [ PSF prop ] ],
    GENRE standard,
    DIALECT us,
    ORTH root_orth ].

root_bridge := phrase &
  [ SYNSEM.LOCAL.CAT.HEAD bridge_head,
    INFLECTD - ].
