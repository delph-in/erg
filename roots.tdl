;;; -*- Mode: TDL; Package: DISCO -*-
;;;
;;;  Copyright Daniel Flickinger 1994-1999
;;;  All Rights Reserved.
;;;  No use or redistribution without permission.
;;;
;;;  roots.tdl
;;;

;:begin :instance.

; The instances in this file are needed by the PAGE parser
; to know which phrase types to accept as successful parses of the full 
; input string.  They should be the only instances of phrase that fail to 
; assign some other status  (e.g. 'rule or 'lex-entry), so they alone get to 
; be of status 'root-node (assigned on type sign), which is what the parser 
; requires.  This is obscure, but works.

:begin :instance.

root_strict := phrase & 
  [ ROOT + ].

root := sign &
  [ SYNSEM [ LOCAL [ CAT [ HEAD.INV -,
                           VAL.COMPS *olist* ],
		     CONT.TOP-H handle,
		     KEYS.MESSAGE 0-dlist ],
	     NON-LOCAL [ SLASH 0-dlist & [ LIST < > ],
			 REL 0-dlist & [ LIST < > ] ] ],
    ROOT -,
    INFLECTED + ].

root_conj := sign &
  [ SYNSEM [ LOCAL [ CAT.VAL.COMPS *olist*,
		     CONT.TOP-H handle,
                     KEYS [ ALTKEY [ C-HANDELS #hands,
				     C-INDICES #inds ],
			    MESSAGE 1-dlist ],
		     CONJ strict-conj &
                                 [ HANDELS #hands,
                                   INDICES #inds ] ],
             NON-LOCAL [ SLASH 0-dlist & [ LIST < > ],
			 REL 0-dlist & [ LIST < > ] ] ],
    ROOT -,
    INFLECTED + ].

root_subord := sign &
  [ SYNSEM [ LOCAL [ CAT [ HEAD prep*,
			   VAL.COMPS *olist* ],
		     CONT.TOP-H handle,
		     KEYS.MESSAGE 1-dlist,
		     CONJ cnil ],
             NON-LOCAL [ SLASH 0-dlist & [ LIST < > ],
			 REL 0-dlist & [ LIST < > ] ] ],
    ROOT -,
    INFLECTED + ].

:end :instance.


