;;; -*- Mode: TDL; Package: DISCO -*-
;;;
;;;  Copyright (c) 1994-2005
;;;    Dan Flickinger, Rob Malouf, Emily M. Bender
;;;    see erg/licence.txt for conditions
;;;
;;;  roots.tdl
;;;

; The instances in this file are needed by the parser to know which phrase 
; types to accept as successful parses of the full input string.

root_strict := phrase &
  [ INFLECTD +,
    ROBUST -,
    POSSCL -,
    SYNSEM [ LOCAL [ CAT [ HEAD verbal &
                                [ TAM ind_or_mod_subj_tam ],
                           VAL [ SUBJ *olist*,
                                 SPR *olist*,
                                 COMPS < > ],
                           MC + ],
                     CONT [ MSG message & [ PRED #pred ] ],
                     CONJ cnil ],
             NONLOC [ SLASH 0-dlist & [ LIST < > ],
                         REL 0-dlist & [ LIST < > ],
                         QUE 0-dlist & [ LIST < > ] ],
             PUNCT.RPUNCT clause_or_no_punct & [ MSGPRED #pred ] ] ].

; Copy of above, but with ROBUST +
root_strict_robust := phrase &
  [ INFLECTD +,
    ROBUST +,
    POSSCL -,
    SYNSEM [ LOCAL [ CAT [ HEAD verbal &
                                [ TAM ind_or_mod_subj_tam ],
                           VAL [ SUBJ *olist*,
                                 SPR *olist*,
                                 COMPS < > ],
                           MC + ],
                     CONT.HOOK.INDEX.E.TENSE real_tense,
                     CONJ cnil ],
             NONLOC [ SLASH 0-dlist & [ LIST < > ],
                         REL 0-dlist & [ LIST < > ],
                         QUE 0-dlist & [ LIST < > ] ],
             ROOT - ] ].

; For well-formed fragments of all kinds
root_frag := sign &
  [ SYNSEM synsem &
	   [ LOCAL [ CAT [ HEAD frag,
                           MC na_or_+ ],
                     CONJ cnil ],
             NONLOC.SLASH 0-dlist & [ LIST < > ] ] ].

; Used to determine on which candidate root edges to not apply the idiom checks
; (for efficiency)
root_non_idiom := sign &
  [ IDIOM - ].