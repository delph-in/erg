; >> a.bit.a.1.tdl
; a.bit.a.1.tdl
; MULTIKEY < "bit" >

:begin :instance.

a_bit := degree_spec_mle2 &
  [ STEM < "a", "bit" >,
    SYNSEM.LOCAL.CONT.KEY _a_bit_rel ].

:end :instance.

; <<>>
; >> a.c.1.tdl
; a.c.1.tdl

:begin :instance.

a-det := det_sg_le &
  [ STEM < "a" >,
    SYNSEM.LOCAL.CONT.KEY _a_quant_rel ].

:end :instance.


; <<>>
; >> a.couple.of.c.1.tdl
; a.couple.of.c.1.tdl
; MULTIKEY < "couple" >

:begin :instance.

a_couple_of := det_pl_3mle2 &
  [ STEM < "a", "couple", "of" >,
    SYNSEM.LOCAL.CONT.KEY _a_couple_of_rel ].

:end :instance.


; <<>>
; >> a.few.c.1.tdl
; a.few.c.1.tdl
; MULTIKEY < "few" >

:begin :instance.

a_few := pdet_pl_mle2 &
  [ STEM < "a", "few" >,
    SYNSEM.LOCAL.CONT.KEY _a_few_rel ].

:end :instance.


; <<>>
; >> a.half.c.1.tdl
; a.half.c.1.tdl
; MULTIKEY < "half" >

:begin :instance.

a_half := degree_spec_mle2 &
  [ STEM < "a", "half" >,
    SYNSEM.LOCAL.CONT.KEY _half_rel ].

:end :instance.


; <<>>
; >> a.little.a.1.tdl
; a.little.a.1.tdl
; MULTIKEY < "little" >

:begin :instance.

a_little := degree_spec_mle2 &
  [ STEM < "a", "little" >,
    SYNSEM.LOCAL.CONT.KEY _a_little_rel ].

:end :instance.


; <<>>
; >> a.lot.a.1.tdl
; a.lot.a.1.tdl
; MULTIKEY < "lot" >

:begin :instance.

a_lot := degree_spec_mle2 &
  [ STEM < "a", "lot" >,
    SYNSEM.LOCAL.CONT.KEY _a_lot_rel ].

:end :instance.


; <<>>
; >> a.lot.c.1.tdl
; a.lot.c.1.tdl
; MULTIKEY < "lot" >

:begin :instance.

a_lot_det := part_noun_mle2 &
  [ STEM < "a", "lot" >,
    SYNSEM.LOCAL.CONT.ALTKEY _a_lot_q_rel ].

:end :instance.


; <<>>
; >> a.quarter.n.1.tdl
; a.quarter.n.1.tdl
; MULTIKEY < "quarter" >

:begin :instance.

a_quarter := minute_word_mle2 &
  [ STEM < "a", "quarter" >,
    SYNSEM.LOCAL [ CAT.POSTHEAD -,
		   CONT.KEY.MINUTE 15 ] ].

:end :instance.


; <<>>
; >> a.few.c.2.tdl
; a.few.c.2.tdl
; MULTIKEY < "few" >

:begin :instance.

a_few_part := part_noun_mle2 &
  [ STEM < "a", "few" >,
    SYNSEM.LOCAL.CONT.ALTKEY _a_few_rel ].

:end :instance.


; <<>>
; >> able.a.1.vm.tdl
; able.a.1.vm.tdl

:begin :instance.

able_a1 := reg_adj_equi_le &
  [ STEM < "able" >,
    SYNSEM.LOCAL.CONT.KEY _able_rel ].

:end :instance.


; <<>>
; >> abolish.v.1.tdl
; abolish.v.1.tdl

:begin :instance.

abolish_v1 := mv_np_trans_le &
  [ STEM < "abolish" >,
    SYNSEM.LOCAL.CONT.KEY _abolish_rel ].

:end :instance.


; <<>>
; >> about.hour.c.1.vm.tdl
; about.hour.c.1.vm.tdl

:begin :instance.

about_hour := hour_mod_word_le &
  [ STEM < "about" >,
    SYNSEM.LOCAL.CONT.KEY _about_temp_rel ].

:end :instance.


; <<>>
; >> about.p.1.tdl
; about.p.1.tdl

:begin :instance.

about := prep_nomod_le &
  [ STEM < "about" >,
    SYNSEM.LOCAL.CONT.KEY _about_rel ].

:end :instance.


; <<>>
; >> about.a.1.tdl
; about.a.1.tdl

:begin :instance.

about_deg := degree_spec_le &
  [ STEM < "about" >,
    SYNSEM.LOCAL.CONT.KEY _about_approx_rel ].

:end :instance.


; <<>>
; >> above.all.a.1.vm.tdl
; above.all.a.1.vm.tdl
; MULTIKEY < "all" >

:begin :instance.

above_all_adv1 := vp_adv_post_word_mle2 &
  [ STEM < "above", "all" >,
    SYNSEM.LOCAL.CONT.KEY _above_all_rel ].

:end :instance.


; <<>>
; >> above.p.1.tdl
; above.p.1.tdl

:begin :instance.

above := reg_prep_le &
  [ STEM < "above" >,
    SYNSEM.LOCAL.CONT.KEY _above_rel ].

:end :instance.


; <<>>
; >> abrams.n.1.tdl
; abrams.n.1.tdl

:begin :instance.

abrams := proper_le &
  [ STEM < "abrams" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'abrams ].

:end :instance.


; <<>>
; >> abroad.a.1.tdl
; abroad.a.1.tdl

:begin :instance.

abroad_adv := np_adv_word_le &
  [ STEM < "abroad" >,
    SYNSEM.LOCAL.CONT [ KEY _abroad_rel,
			MODCONT.KEY loc_rel ] ].

:end :instance.


; <<>>
; >> absence.n.1.vm.tdl
; absence.n.1.vm.tdl

:begin :instance.

absence_n1 := intr_noun_word_le &
  [ STEM < "absence" >,
    SYNSEM.LOCAL.CONT.KEY _absence_rel ].

:end :instance.


; <<>>
; >> absent.a.1.vm.tdl
; absent.a.1.vm.tdl

:begin :instance.

absent_a1 := intrans_adj_le &
  [ STEM < "absent" >,
    SYNSEM.LOCAL.CONT.KEY _absent_rel ].

:end :instance.


; <<>>
; >> absolute.a.1.vm.tdl
; absolute.a.1.vm.tdl

:begin :instance.

absolute_a1 := intrans_adj_le &
  [ STEM < "absolute" >,
    SYNSEM.LOCAL.CONT.KEY _absolute_rel ].

:end :instance.


; <<>>
; >> absolutely.a.1.vm.tdl
; absolutely.a.1.vm.tdl

:begin :instance.

absolutely_adv1 := adv_pre_word_le &
  [ STEM < "absolutely" >,
    SYNSEM.LOCAL.CONT.KEY _absolutely_rel ].

:end :instance.


; <<>>
; >> abstain.v.1.tdl
; abstain.v.1.tdl

:begin :instance.

abstain_v1 := mv_empty_prep*_intrans_le &
  [ STEM < "abstain" >,
    SYNSEM.LOCAL.CONT [ KEY _abstain_from_rel,
			COMPKEY _from_rel ] ].

:end :instance.


; <<>>
; >> accept.v.1.tdl
; accept.v.1.tdl

:begin :instance.

accept_v1 := mv_np_trans_le &
  [ STEM < "accept" >,
    SYNSEM.LOCAL.CONT.KEY _accept_rel ].

:end :instance.


; <<>>
; >> acceptable.a.1.vm.tdl
; acceptable.a.1.vm.tdl

:begin :instance.

acceptable_a1 := intrans_adj_le &
  [ STEM < "acceptable" >,
    SYNSEM.LOCAL.CONT.KEY _acceptable_rel ].

:end :instance.


; <<>>
; >> acceptable.a.2.vm.tdl
; acceptable.a.2.vm.tdl

:begin :instance.

acceptable_a2 := reg_adj_atrans_le &
  [ STEM < "acceptable" >,
    SYNSEM.LOCAL.CONT.KEY _acceptable_rel ].

:end :instance.


; <<>>
; >> acceptance.n.1.vm.tdl
; acceptance.n.1.vm.tdl

:begin :instance.

acceptance_n1 := massn_le &
  [ STEM < "acceptance" >,
    SYNSEM.LOCAL.CONT.KEY _acceptance_rel ].

:end :instance.


; <<>>
; >> accidental.a.1.vm.tdl
; accidental.a.1.vm.tdl

:begin :instance.

accidental_a1 := intrans_adj_le &
  [ STEM < "accidental" >,
    SYNSEM.LOCAL.CONT.KEY _accidental_rel ].

:end :instance.


; <<>>
; >> accidentally.a.1.vm.tdl
; accidentally.a.1.vm.tdl

:begin :instance.

accidentally_adv1 := adv_word_le &
  [ STEM < "accidentally" >,
    SYNSEM.LOCAL.CONT.KEY _accidentally_rel ].

:end :instance.


; <<>>
; >> accommodation.n.1.vm.tdl
; accommodation.n.1.vm.tdl

:begin :instance.

accommodation_n1 := massn_le &
  [ STEM < "accommodation" >,
    SYNSEM.LOCAL.CONT.KEY _accommodation_rel ].

:end :instance.


; <<>>
; >> accommodation.n.2.vm.tdl
; accommodation.n.2.vm.tdl

:begin :instance.

accommodation_n2 := intr_noun_word_le &
  [ STEM < "accommodation" >,
    SYNSEM.LOCAL.CONT.KEY _accommodation_rel ].

:end :instance.


; <<>>
; >> accomplish.v.1.vm.tdl
; accomplish.v.1.vm.tdl

:begin :instance.

accomplish_v1 := mv_np_trans_le &
  [ STEM < "accomplish" >,
    SYNSEM.LOCAL.CONT.KEY _accomplish_rel ].

:end :instance.


; <<>>
; >> according.to.p.1.tdl
; according.to.p.1.tdl

:begin :instance.

according_to := prep_mle1 &
  [ STEM < "according", "to" >,
    SYNSEM.LOCAL.CONT.KEY _according_to_rel ].

:end :instance.


; <<>>
; >> accordingly.a.1.vm.tdl
; accordingly.a.1.vm.tdl

:begin :instance.

accordingly_adv1 := vp_adv_post_word_le &
  [ STEM < "accordingly" >,
    SYNSEM.LOCAL.CONT.KEY _accordingly_rel ].

:end :instance.


; <<>>
; >> account.n.1.vm.tdl
; account.n.1.vm.tdl

:begin :instance.

account_n1 := massn_le &
  [ STEM < "account" >,
    SYNSEM.LOCAL.CONT.KEY _account_rel ].

:end :instance.


; <<>>
; >> account.n.2.vm.tdl
; account.n.2.vm.tdl

:begin :instance.

account_n2 := intr_noun_word_le &
  [ STEM < "account" >,
    SYNSEM.LOCAL.CONT.KEY _account_rel ].

:end :instance.


; <<>>
; >> account.v.1.tdl
; account.v.1.tdl

:begin :instance.

account_v1 := mv_empty_prep_intrans_le &
  [ STEM < "account" >,
    SYNSEM.LOCAL.CONT [ KEY_account_for_rel,
			COMPKEY _for_rel ] ].

:end :instance.


; <<>>
; >> accurate.a.1.vm.tdl
; accurate.a.1.vm.tdl

:begin :instance.

accurate_a1 := intrans_adj_le &
  [ STEM < "accurate" >,
    SYNSEM.LOCAL.CONT.KEY _accurate_rel ].

:end :instance.


; <<>>
; >> achieve.v.1.vm.tdl
; achieve.v.1.vm.tdl

:begin :instance.

achieve_v1 := mv_np_trans_le &
  [ STEM < "achieve" >,
    SYNSEM.LOCAL.CONT.KEY _achieve_rel ].

:end :instance.


; <<>>
; >> across.p.1.tdl
; across.p.1.tdl

:begin :instance.

across := reg_prep_le &
  [ STEM < "across" >,
    SYNSEM.LOCAL.CONT.KEY _across_rel ].

:end :instance.


; <<>>
; >> active.a.1.vm.tdl
; active.a.1.vm.tdl

:begin :instance.

active_a1 := intrans_adj_le &
  [ STEM < "active" >,
    SYNSEM.LOCAL.CONT.KEY _active_rel ].

:end :instance.


; <<>>
; >> activity.n.1.vm.tdl
; activity.n.1.vm.tdl

:begin :instance.

activity_n1 := intr_noun_word_le &
  [ STEM < "activity" >,
    SYNSEM.LOCAL.CONT.KEY _activity_rel ].

:end :instance.


; <<>>
; >> actual.a.1.vm.tdl
; actual.a.1.vm.tdl

:begin :instance.

actual_a1 := intrans_adj_le &
  [ STEM < "actual" >,
    SYNSEM.LOCAL.CONT.KEY _actual_rel ].

:end :instance.


; <<>>
; >> actually.a.1.vm.tdl
; actually.a.1.vm.tdl

:begin :instance.

actually_adv1 := adv_pre_word_le &
  [ STEM < "actually" >,
    SYNSEM.LOCAL.CONT.KEY _actually_rel ].

:end :instance.


; <<>>
; >> adapt.v.1.vm.tdl
; adapt.v.1.vm.tdl

:begin :instance.

adapt_v1 := mv_unerg_le &
  [ STEM < "adapt" >,
    SYNSEM.LOCAL.CONT.KEY _adapt_to_rel ].

:end :instance.


; <<>>
; >> adapt.v.2.vm.tdl
; adapt.v.2.vm.tdl

:begin :instance.

adapt_v2 := mv_empty_prep_intrans_le &
  [ STEM < "adapt" >,
    SYNSEM.LOCAL.CONT [ KEY_adapt_to_rel,
			COMPKEY _to_rel ] ].

:end :instance.


; <<>>
; >> adapt.v.3.vm.tdl
; adapt.v.3.vm.tdl

:begin :instance.

adapt_v3 := mv_np_trans_le &
  [ STEM < "adapt" >,
    SYNSEM.LOCAL.CONT.KEY _adapt_rel ].

:end :instance.


; <<>>
; >> add.v.1.tdl
; add.v.1.tdl

:begin :instance.

add_v1 := mv_np_trans_le &
  [ STEM < "add" >,
    SYNSEM.LOCAL.CONT.KEY _add_rel ].

:end :instance.


; <<>>
; >> add.on.v.1.vm.tdl
; add.on.v.1.vm.tdl

:begin :instance.

add_on_v1 := mv_particle_np_le &
  [ STEM < "add" >,
    SYNSEM.LOCAL.CONT [ KEY _add_on_rel,
			COMPKEY _on_rel ] ].

:end :instance.


; <<>>
; >> add.v.2.tdl
; add.v.2.tdl

:begin :instance.

add_to_v1 := mv_empty_prep_intrans_le &
  [ STEM < "add" >,
    SYNSEM.LOCAL.CONT [ KEY _add_to_rel,
			COMPKEY _to_rel ] ].

:end :instance.


; <<>>
; >> addition.n.1.vm.tdl
; addition.n.1.vm.tdl

:begin :instance.

addition_n1 := deverbal_noun_intr_word_le &
  [ STEM < "addition" >,
    SYNSEM.LOCAL.CONT.ALTKEY _add_rel ].

:end :instance.


; <<>>
; >> additional.a.1.vm.tdl
; additional.a.1.vm.tdl

:begin :instance.

additional_a1 := intrans_adj_le &
  [ STEM < "additional" >,
    SYNSEM.LOCAL.CONT.KEY _additional_rel ].

:end :instance.


; <<>>
; >> address.n.1.vm.tdl
; address.n.1.vm.tdl

:begin :instance.

address_n1 := intr_noun_word_le &
  [ STEM < "address" >,
    SYNSEM.LOCAL.CONT.KEY _address_rel ].

:end :instance.


; <<>>
; >> admit.v.1.vm.tdl
; admit.v.1.vm.tdl

:begin :instance.

admit_v1 := mv_np_trans_le &
  [ STEM < "admit" >,
    SYNSEM.LOCAL.CONT.KEY _admit_rel ].

:end :instance.


; <<>>
; >> admit.v.2.vm.tdl
; admit.v.2.vm.tdl

:begin :instance.

admit_v2 := mv_cp_prop_non_trans_le &
  [ STEM < "admit" >,
    SYNSEM.LOCAL.CONT.KEY _admit_rel ].

:end :instance.


; <<>>
; >> admit.v.3.vm.tdl
; admit.v.3.vm.tdl

:begin :instance.

admit_v3 := mv_unerg_le &
  [ STEM < "admit" >,
    SYNSEM.LOCAL.CONT.KEY _admit_rel ].

:end :instance.


; <<>>
; >> ado.n.1.vm.tdl
; ado.n.1.vm.tdl

:begin :instance.

ado_n1 := massn_le &
  [ STEM < "ado" >,
    SYNSEM.LOCAL.CONT.KEY _ado_rel ].

:end :instance.


; <<>>
; >> adoption.n.1.vm.tdl
; adoption.n.1.vm.tdl

:begin :instance.

adoption_n1 := massn_le &
  [ STEM < "adoption" >,
    SYNSEM.LOCAL.CONT.KEY _adoption_rel ].

:end :instance.


; <<>>
; >> advance.v.1.vm.tdl
; advance.v.1.vm.tdl

:begin :instance.

advance_v1 := mv_np_trans_le &
  [ STEM < "advance" >,
    SYNSEM.LOCAL.CONT.KEY _advance_rel ].

:end :instance.


; <<>>
; >> advance.v.2.vm.tdl
; advance.v.2.vm.tdl

:begin :instance.

advance_v2 := mv_ditrans_only_le &
  [ STEM < "advance" >,
    SYNSEM.LOCAL.CONT.KEY _advance_amount_rel ].

:end :instance.


; <<>>
; >> advantage.n.1.vm.tdl
; advantage.n.1.vm.tdl

:begin :instance.

advantage_n1 := massn_le &
  [ STEM < "advantage" >,
    SYNSEM.LOCAL.CONT.KEY _advantage_rel ].

:end :instance.


; <<>>
; >> advent.n.1.tdl
; advent.n.1.tdl

:begin :instance.

advent := season_word_le &
  [ STEM < "advent" >,
    SYNSEM.LOCAL.CONT.KEY.SEASON 'advent ].

:end :instance.


; <<>>
; >> advice.n.1.tdl
; advice.n.1.tdl

:begin :instance.

advice_n1 := massn_le &
  [ STEM < "advice" >,
    SYNSEM.LOCAL.CONT.KEY _advice_rel ].

:end :instance.


; <<>>
; >> affair.n.1.vm.tdl
; affair.n.1.vm.tdl

:begin :instance.

affair_n1 := intr_noun_word_le &
  [ STEM < "affair" >,
    SYNSEM.LOCAL.CONT.KEY _affair_rel ].

:end :instance.


; <<>>
; >> affect.v.1.vm.tdl
; affect.v.1.vm.tdl

:begin :instance.

affect_v1 := mv_np_trans_le &
  [ STEM < "affect" >,
    SYNSEM.LOCAL.CONT.KEY _affect_rel ].

:end :instance.


; <<>>
; >> afraid.a.1.vm.tdl
; afraid.a.1.vm.tdl

:begin :instance.

afraid_a1 := pred_intrans_adj_le &
  [ STEM < "afraid" >,
    SYNSEM.LOCAL.CONT.KEY _afraid_rel ].

:end :instance.


; <<>>
; >> after.all.a.1.vm.tdl
; after.all.a.1.vm.tdl
; MULTIKEY < "all" >

:begin :instance.

after_all_adv1 := vp_adv_post_word_mle2 &
  [ STEM < "after", "all" >,
    SYNSEM.LOCAL.CONT.KEY _after_all_rel ].

:end :instance.


; <<>>
; >> after.c.1.tdl
; after.c.1.tdl

:begin :instance.

after_conj := subconj_le &
  [ STEM < "after" >,
    SYNSEM.LOCAL.CONT.KEY _after_subord_rel ].

:end :instance.


; <<>>
; >> after.p.1.tdl
; after.p.1.tdl

:begin :instance.

after := prep_le &
  [ STEM < "after" >,
    SYNSEM.LOCAL.CONT.KEY _after_rel ].

:end :instance.


; <<>>
; >> after.p.2.tdl
; after.p.2.tdl

:begin :instance.

after_hour := hour_prep_word_le &
  [ STEM < "after" >,
    SYNSEM.LOCAL.CONT.KEY _after_hour_rel ].

:end :instance.


; <<>>
; >> afternoon.sg.n.1.vm.tdl
; afternoon.sg.n.1.vm.tdl

:begin :instance.

afternoon_sg_n1 := day_part_word_le &
  [ STEM < "afternoon" >,
    SYNSEM.LOCAL.CONT.KEY _afternoon_rel & [ INST.PNG [ PN 3sg*,
							GEN neut* ] ] ].

:end :instance.


; <<>>
; >> afternoon.pl.n.1.vm.tdl
; afternoon.pl.n.1.vm.tdl

:begin :instance.

afternoon_pl_n1 := day_part_word_le &
  [ STEM < "afternoons" >,
    SYNSEM.LOCAL.CONT.KEY _afternoon_rel & [ INST.PNG.PN 3pl* ] ].

:end :instance.


; <<>>
; >> the.afternoon.n.1.tdl
; the.afternoon.n.1.tdl

:begin :instance.

afternoon_def := def_day_part_word_le &
  [ STEM < "afternoon" >,
    SYNSEM.LOCAL.CONT.KEY _def_afternoon_rel ].

:end :instance.


; <<>>
; >> afterward.a.1.vm.tdl
; afterward.a.1.vm.tdl

:begin :instance.

afterward_adv1 := np_adv_word_le &
  [ STEM < "afterward" >,
    SYNSEM.LOCAL.CONT.KEY _afterward_rel ].

:end :instance.


; <<>>
; >> afterwards.a.1.vm.tdl
; afterwards.a.1.vm.tdl

:begin :instance.

afterwards_adv1 := np_adv_word_le &
  [ STEM < "afterwards" >,
    SYNSEM.LOCAL.CONT.KEY _afterwards_rel ].

:end :instance.


; <<>>
; >> again.a.1.vm.tdl
; again.a.1.vm.tdl

:begin :instance.

again_adv1 := adv_post_word_le &
  [ STEM < "again" >,
    SYNSEM.LOCAL.CONT.KEY _again_rel ].

:end :instance.


; <<>>
; >> against.p.1.tdl
; against.p.1.tdl

:begin :instance.

against := prep_le &
  [ STEM < "against" >,
    SYNSEM.LOCAL.CONT.KEY _against_rel ].

:end :instance.


; <<>>
; >> age.n.1.vm.tdl
; age.n.1.vm.tdl

:begin :instance.

age_n1 := intr_temp_noun_le &
  [ STEM < "age" >,
    SYNSEM.LOCAL.CONT.KEY _age_rel ].

:end :instance.


; <<>>
; >> age.n.2.vm.tdl
; age.n.2.vm.tdl

:begin :instance.

age_n2 := intr_temp_noun_nomod_le &
  [ STEM < "age" >,
    SYNSEM.LOCAL.CONT.KEY _age_rel ].

:end :instance.


; <<>>
; >> agenda.n.1.vm.tdl
; agenda.n.1.vm.tdl

:begin :instance.

agenda_n1 := intr_noun_word_le &
  [ STEM < "agenda" >,
    SYNSEM.LOCAL.CONT.KEY _agenda_rel ].

:end :instance.


; <<>>
; >> ago.a.1.vm.tdl
; ago.a.1.vm.tdl

:begin :instance.

ago_a1 := intrans_adj_le &
  [ STEM < "ago" >,
    SYNSEM.LOCAL.CONT.KEY _ago_rel ].

:end :instance.


; <<>>
; >> agree.v.1.vm.tdl
; agree.v.1.vm.tdl

:begin :instance.

agree_v1 := mv_pp_cp*_le &
  [ STEM < "agree" >,
    SYNSEM.LOCAL.CONT [ KEY _agree_rel,
			COMPKEY _with_rel ] ].

:end :instance.


; <<>>
; >> agree.on.v.1.vm.tdl
; agree.on.v.1.vm.tdl

:begin :instance.

agree_on_v1 := mv_empty_prep_intrans_le &
  [ STEM < "agree" >,
    SYNSEM.LOCAL.CONT [ KEY _agree_on_rel,
			COMPKEY _on_idiom_rel ] ].

:end :instance.


; <<>>
; >> agree.to.v.1.vm.tdl
; agree.to.v.1.vm.tdl

:begin :instance.

agree_to_v1 := mv_empty_prep_intrans_le &
  [ STEM < "agree" >,
    SYNSEM.LOCAL.CONT [ KEY _agree_to_rel,
			COMPKEY _to_rel ] ].

:end :instance.


; <<>>
; >> agreeable.a.1.vm.tdl
; agreeable.a.1.vm.tdl

:begin :instance.

agreeable_a1 := intrans_adj_le &
  [ STEM < "agreeable" >,
    SYNSEM.LOCAL.CONT.KEY _agreeable_rel ].

:end :instance.


; <<>>
; >> agreed.c.1.vm.tdl
; agreed.c.1.vm.tdl

:begin :instance.

agreed_root := disc_adv_le &
  [ STEM < "agreed" >,
    SYNSEM.LOCAL.CONT.KEY.EXCL 'agreed ].

:end :instance.

; <<>>
; >> agreement.n.1.vm.tdl
; agreement.n.1.vm.tdl

:begin :instance.

agreement_n1 := deverbal_massn_le &
  [ STEM < "agreement" >,
    SYNSEM.LOCAL.CONT.ALTKEY _agree_rel ].

:end :instance.


; <<>>
; >> agreement.n.2.vm.tdl
; agreement.n.2.vm.tdl

:begin :instance.

agreement_n2 := deverbal_noun_intr_word_le &
  [ STEM < "agreement" >,
    SYNSEM.LOCAL.CONT.ALTKEY _agree_rel ].

:end :instance.


; <<>>
; >> agreement.n.3.vm.tdl
; agreement.n.3.vm.tdl

:begin :instance.

agreement_n3 := deverbal_massn_pp_le &
  [ STEM < "agreement" >,
    SYNSEM.LOCAL.CONT [ ALTKEY _agree_rel,
			COMPKEY _on_rel ] ].

:end :instance.


; <<>>
; >> ah.c.1.vm.tdl
; ah.c.1.vm.tdl

:begin :instance.

ah_root := disc_adv_le &
  [ STEM < "ah" >,
    SYNSEM.LOCAL.CONT.KEY.EXCL 'ah ].

:end :instance.

; <<>>
; >> aha.c.1.vm.tdl
; aha.c.1.vm.tdl

:begin :instance.

aha_root := disc_adv_le &
  [ STEM < "aha" >,
    SYNSEM.LOCAL.CONT.KEY.EXCL 'aha ].

:end :instance.

; <<>>
; >> ahead.a.1.tdl
; ahead.a.1.tdl

:begin :instance.

ahead_adv := np_adv_word_le &
  [ STEM < "ahead" >,
    SYNSEM.LOCAL.CONT.KEY _ahead_rel ].

:end :instance.


; <<>>
; >> ahead.of.p.1.tdl
; ahead.of.p.1.tdl

:begin :instance.

ahead_of := prep_mle1 &
  [ STEM < "ahead", "of" >,
    SYNSEM.LOCAL.CONT.KEY _ahead_of_rel ].

:end :instance.


; <<>>
; >> aim.v.1.tdl
; aim.v.1.tdl

:begin :instance.

aim_at_v1 := mv_empty_prep_intrans_le &
  [ STEM < "aim" >,
    SYNSEM.LOCAL.CONT [ KEY _aim_at_rel,
			COMPKEY _at_rel ] ].

:end :instance.


; <<>>
; >> air.n.1.vm.tdl
; air.n.1.vm.tdl

:begin :instance.

air_n1 := massn_le &
  [ STEM < "air" >,
    SYNSEM.LOCAL.CONT.KEY _air_rel ].

:end :instance.


; <<>>
; >> airplane.n.1.vm.tdl
; airplane.n.1.vm.tdl

:begin :instance.

airplane_n1 := intr_noun_word_le &
  [ STEM < "airplane" >,
    SYNSEM.LOCAL.CONT.KEY _airplane_rel ].

:end :instance.


; <<>>
; >> airport.n.1.vm.tdl
; airport.n.1.vm.tdl

:begin :instance.

airport_n1 := intr_noun_word_le &
  [ STEM < "airport" >,
    SYNSEM.LOCAL.CONT.KEY _airport_rel ].

:end :instance.


; <<>>
; >> albeit.c.1.tdl
; albeit.c.1.tdl

:begin :instance.

albeit := subconj_le &
  [ STEM < "albeit" >,
    SYNSEM.LOCAL.CONT.KEY _albeit_rel ].

:end :instance.


; <<>>
; >> algorithm.n.1.vm.tdl
; algorithm.n.1.vm.tdl

:begin :instance.

algorithm_n1 := intr_noun_word_le &
  [ STEM < "algorithm" >,
    SYNSEM.LOCAL.CONT.KEY _algorithm_rel ].

:end :instance.


; <<>>
; >> alias.n.1.vm.tdl
; alias.n.1.vm.tdl

:begin :instance.

alias_n1 := intr_noun_word_le &
  [ STEM < "alias" >,
    SYNSEM.LOCAL.CONT.KEY _alias_rel ].

:end :instance.


; <<>>
; >> alike.a.1.vm.tdl
; alike.a.1.vm.tdl

:begin :instance.

alike_a1 := intrans_adj_le &
  [ STEM < "alike" >,
    SYNSEM.LOCAL.CONT.KEY _alike_rel ].

:end :instance.


; <<>>
; >> all.c.1.tdl
; all.c.1.tdl

:begin :instance.

all := pdet_pl_mass_le &
  [ STEM < "all" >,
    SYNSEM.LOCAL.CONT.KEY _all_rel ].

:end :instance.


; <<>>
; >> all.over.a.1.vm.tdl
; all.over.a.1.vm.tdl
; MULTIKEY < "over" >

:begin :instance.

all_over_adv1 := adv_post_word_mle2 &
  [ STEM < "all", "over" >,
    SYNSEM.LOCAL.CONT.KEY _all_over_rel ].

:end :instance.


; <<>>
; >> all.right.a.1.vm.tdl
; all.right.a.1.vm.tdl
; MULTIKEY < "right" >

:begin :instance.

allright_a1 := irreg_trans_adj_mle2 &
  [ STEM < "all", "right" >,
    SYNSEM.LOCAL.CONT [ KEY _allright_rel,
			COMPKEY _with_rel ] ].

:end :instance.


; <<>>
; >> all.right.c.1.vm.tdl
; all.right.c.1.vm.tdl
; MULTIKEY < "right" >

:begin :instance.

allright_root := disc_adv_mle2 &
  [ STEM < "all", "right" >,
    SYNSEM.LOCAL.CONT.KEY.EXCL 'all_right ].

:end :instance.


; <<>>
; >> all.saints.day.n.1.tdl
; all.saints.day.n.1.tdl
; MULTIKEY < "saints" >

:begin :instance.

all_saints_day := holiday_word_3mle2 &
  [ STEM < "all", "saints", "day" >,
    SYNSEM.LOCAL.CONT.KEY.DAY 'all_saints_day ].

:end :instance.


; <<>>
; >> all.the.c.1.tdl
; all.the.c.1.tdl

:begin :instance.

all_the := det_mle1 &
  [ STEM < "all", "the" >,
    SYNSEM.LOCAL.CONT.KEY _all_def_rel ].

:end :instance.


; <<>>
; >> all.right.a.2.vm.tdl
; all.right.a.2.vm.tdl
; MULTIKEY < "right" >

:begin :instance.

allright_a2 := vp_adv_post_word_mle2 &
  [ STEM < "all", "right" >,
    SYNSEM.LOCAL.CONT.KEY _allright_adv_rel ].

:end :instance.


; <<>>
; >> allow.for.v.1.vm.tdl
; allow.for.v.1.vm.tdl

:begin :instance.

allow_for_v1 := mv_empty_prep_intrans_le &
  [ STEM < "allow" >,
    SYNSEM.LOCAL.CONT [ KEY _allow_for_rel,
			COMPKEY _for_rel ] ].

:end :instance.


; <<>>
; >> allow.v.1.vm.tdl
; allow.v.1.vm.tdl

:begin :instance.

allow_v1 := mv_obj_equi_le &
  [ STEM < "allow" >,
    SYNSEM.LOCAL.CONT.KEY _allow_rel ].

:end :instance.


; <<>>
; >> almost.a.2.tdl
; almost.a.2.tdl

:begin :instance.

almost_adv := vp_adv_pre_word_le &
  [ STEM < "almost" >,
    SYNSEM.LOCAL.CONT.KEY _almost_adv_rel ].

:end :instance.


; <<>>
; >> almost.c.1.tdl
; almost.c.1.tdl

:begin :instance.

almost_deg := degree_spec_le &
  [ STEM < "almost" >,
    SYNSEM.LOCAL.CONT.KEY _almost_deg_rel ].

:end :instance.


; <<>>
; >> alone.a.1.vm.tdl
; alone.a.1.vm.tdl

:begin :instance.

alone_a1 := pred_intrans_adj_le &
  [ STEM < "alone" >,
    SYNSEM.LOCAL.CONT.KEY _alone_rel ].

:end :instance.


; <<>>
; >> alone.a.2.vm.tdl
; alone.a.2.vm.tdl

:begin :instance.

alone := vp_adv_post_word_le &
  [ STEM < "alone" >,
    SYNSEM.LOCAL.CONT.KEY _alone_adv_rel ].

:end :instance.


; <<>>
; >> along.p.1.tdl
; along.p.1.tdl

:begin :instance.

along := reg_prep_le &
  [ STEM < "along" >,
    SYNSEM.LOCAL.CONT.KEY _along_rel ].

:end :instance.


; <<>>
; >> along.with.p.1.tdl
; along.with.p.1.tdl

:begin :instance.

along_with := reg_prep_mle1 &
  [ STEM < "along", "with" >,
    SYNSEM.LOCAL.CONT.KEY _along_with_rel ].

:end :instance.


; <<>>
; >> aloud.a.1.tdl
; aloud.a.1.tdl

:begin :instance.

aloud_a1 := intrans_adj_le &
  [ STEM < "aloud" >,
    SYNSEM.LOCAL.CONT.KEY _aloud_rel ].

:end :instance.


; <<>>
; >> alphabet.n.1.vm.tdl
; alphabet.n.1.vm.tdl

:begin :instance.

alphabet_n1 := intr_noun_word_le &
  [ STEM < "alphabet" >,
    SYNSEM.LOCAL.CONT.KEY _alphabet_rel ].

:end :instance.


; <<>>
; >> already.a.1.vm.tdl
; already.a.1.vm.tdl

:begin :instance.

already_adv1 := adv_word_le &
  [ STEM < "already" >,
    SYNSEM.LOCAL.CONT.KEY _already_rel ].

:end :instance.


; <<>>
; >> alright.c.1.vm.tdl
; alright.c.1.vm.tdl

:begin :instance.

alright_root := disc_adv_le &
  [ STEM < "alright" >,
    SYNSEM.LOCAL.CONT.KEY.EXCL 'all_right ].

:end :instance.


; <<>>
; >> also.a.1.vm.tdl
; also.a.1.vm.tdl

:begin :instance.

also_adv1 := adv_pre_word_le &
  [ STEM < "also" >,
    SYNSEM.LOCAL.CONT.KEY _also_rel ].

:end :instance.


; <<>>
; >> alternate.between.v.1.tdl
; alternate.between.v.1.tdl

:begin :instance.

alternate_between_v1 := mv_empty_prep_intrans_le &
  [ STEM < "alternate" >,
    SYNSEM.LOCAL.CONT [ KEY _alternate_between_rel,
			COMPKEY _between_rel ] ].

:end :instance.


; <<>>
; >> alternate.v.1.tdl
; alternate.v.1.tdl

:begin :instance.

alternate_v1 := mv_np_trans_le &
  [ STEM < "alternate" >,
    SYNSEM.LOCAL.CONT.KEY _alternate_rel ].

:end :instance.


; <<>>
; >> alternative.a.1.vm.tdl
; alternative.a.1.vm.tdl

:begin :instance.

alternative_a1 := intrans_adj_le &
  [ STEM < "alternative" >,
    SYNSEM.LOCAL.CONT.KEY _alternative_rel ].

:end :instance.


; <<>>
; >> alternative.n.1.vm.tdl
; alternative.n.1.vm.tdl

:begin :instance.

alternative_n1 := intr_noun_word_le &
  [ STEM < "alternative" >,
    SYNSEM.LOCAL.CONT.KEY _alternative_n_rel ].

:end :instance.


; <<>>
; >> alternatively.a.1.vm.tdl
; alternatively.a.1.vm.tdl

:begin :instance.

alternatively_adv1 := vp_adv_post_word_le &
  [ STEM < "alternatively" >,
    SYNSEM.LOCAL.CONT.KEY _alternatively_rel ].

:end :instance.


; <<>>
; >> although.c.1.tdl
; although.c.1.tdl

:begin :instance.

although := subconj_le &
  [ STEM < "although" >,
    SYNSEM.LOCAL.CONT.KEY _although_rel ].

:end :instance.


; <<>>
; >> altogether.a.1.vm.tdl
; altogether.a.1.vm.tdl

:begin :instance.

altogether_adv1 := vp_adv_post_word_le &
  [ STEM < "altogether" >,
    SYNSEM.LOCAL.CONT.KEY _altogether_rel ].

:end :instance.


; <<>>
; >> always.a.1.vm.tdl
; always.a.1.vm.tdl

:begin :instance.

always_adv1 := adv_word_le &
  [ STEM < "always" >,
    SYNSEM.LOCAL.CONT.KEY _always_rel ].

:end :instance.


; <<>>
; >> am.vx.1.tdl
; am.vx.1.tdl

:begin :instance.

be_c_am := be_c_am_le &
  [ STEM < "am" > ].

:end :instance.


; <<>>
; >> am.vx.2.tdl
; am.vx.2.tdl

:begin :instance.

be_id_am := be_id_am_le &
  [ STEM < "am" > ].

:end :instance.


; <<>>
; >> a.m.n.1.tdl
; a.m.n.1.tdl

:begin :instance.

am_temp := am_pm_word_le &
  [ STEM < "a.m." >,
    SYNSEM.LOCAL.CONT.KEY am_rel ].

:end :instance.


; <<>>
; >> a.m.n.2.tdl
; a.m.n.2.tdl

:begin :instance.

am_temp_2 := am_pm_word_le &
  [ STEM < "am" >,
    SYNSEM.LOCAL.CONT.KEY am_rel ].

:end :instance.


; <<>>
; >> amazing.a.1.vm.tdl
; amazing.a.1.vm.tdl

:begin :instance.

amazing_a1 := intrans_adj_le &
  [ STEM < "amazing" >,
    SYNSEM.LOCAL.CONT.KEY _amazing_rel ].

:end :instance.


; <<>>
; >> ambience.n.1.vm.tdl
; ambience.n.1.vm.tdl

:begin :instance.

ambience_n1 := intr_noun_word_le &
  [ STEM < "ambience" >,
    SYNSEM.LOCAL.CONT.KEY _ambience_rel ].

:end :instance.


; <<>>
; >> america.n.1.vm.tdl
; america.n.1.vm.tdl

:begin :instance.

America_n1 := proper_le &
  [ STEM < "america" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'America ].

:end :instance.


; <<>>
; >> american.a.1.vm.tdl
; american.a.1.vm.tdl

:begin :instance.

american_a1 := intrans_adj_le &
  [ STEM < "american" >,
    SYNSEM.LOCAL.CONT.KEY _american_rel ].

:end :instance.


; <<>>
; >> among.p.1.tdl
; among.p.1.tdl

:begin :instance.

among := reg_prep_le &
  [ STEM < "among" >,
    SYNSEM.LOCAL.CONT.KEY _among_rel ].

:end :instance.


; <<>>
; >> amount.n.1.vm.tdl
; amount.n.1.vm.tdl

:begin :instance.

amount_n1 := intr_noun_word_le &
  [ STEM < "amount" >,
    SYNSEM.LOCAL.CONT.KEY _amount_rel ].

:end :instance.


; <<>>
; >> amsterdam.n.1.vm.tdl
; amsterdam.n.1.vm.tdl

:begin :instance.

Amsterdam_n1 := proper_le &
  [ STEM < "amsterdam" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'Amsterdam ].

:end :instance.


; <<>>
; >> an.c.1.tdl
; an.c.1.tdl

:begin :instance.

an := det_sg_le &
  [ STEM < "an" >,
    SYNSEM.LOCAL.CONT.KEY _a_quant_rel ].

:end :instance.


; <<>>
; >> analyze.v.1.vm.tdl
; analyze.v.1.vm.tdl

:begin :instance.

analyze_v1 := mv_np_trans_le &
  [ STEM < "analyze" >,
    SYNSEM.LOCAL.CONT.KEY _analyze_rel ].

:end :instance.


; <<>>
; >> and.c.1.tdl
; and.c.1.tdl

:begin :instance.

and_conj := coord_c_le &
  [ STEM < "and" >,
    SYNSEM.LOCAL [ CONJ complex-conj & [ CHEAD [ LEFT < cnil, cnil >,
                                                 RELTN _and_rel ] ],
                   AGR.PNG.PN 3pl ] ].

:end :instance.


; <<>>
; >> and.c.2.tdl
; and.c.2.tdl

:begin :instance.

and_conj_2 := coord_c_le &
  [ STEM < "and" >,
    SYNSEM.LOCAL [ CONJ complex-conj & [ CHEAD [ LEFT < both >,
                                                 RELTN _and_rel ] ],
                   AGR.PNG.PN 3pl ] ].

:end :instance.


; <<>>
; >> and.so.on.a.1.vm.tdl
; and.so.on.a.1.vm.tdl
; MULTIKEY < "so" >

:begin :instance.

and_so_on_adv1 := vp_adv_post_word_3mle2 &
  [ STEM < "and", "so", "on" >,
    SYNSEM.LOCAL.CONT.KEY _and_so_on_rel ].

:end :instance.


; <<>>
; >> anew.a.1.vm.tdl
; anew.a.1.vm.tdl

:begin :instance.

anew_adv1 := vp_adv_post_word_le &
  [ STEM < "anew" >,
    SYNSEM.LOCAL.CONT.KEY _anew_rel ].

:end :instance.


; <<>>
; >> angry.a.1.vm.tdl
; angry.a.1.vm.tdl

:begin :instance.

angry_a1 := intrans_adj_le &
  [ STEM < "angry" >,
    SYNSEM.LOCAL.CONT.KEY _angry_rel ].

:end :instance.


; <<>>
; >> anniversary.n.1.vm.tdl
; anniversary.n.1.vm.tdl

:begin :instance.

anniversary_n1 := intr_noun_word_le &
  [ STEM < "anniversary" >,
    SYNSEM.LOCAL.CONT.KEY _anniversary_rel ].

:end :instance.


; <<>>
; >> announce.v.1.vm.tdl
; announce.v.1.vm.tdl

:begin :instance.

announce_v1 := mv_np_trans_le &
  [ STEM < "announce" >,
    SYNSEM.LOCAL.CONT.KEY _announce_rel ].

:end :instance.


; <<>>
; >> announce.v.2.vm.tdl
; announce.v.2.vm.tdl

:begin :instance.

announce_v2 := mv_cp_non_trans_le &
  [ STEM < "announce" >,
    SYNSEM.LOCAL.CONT.KEY _announce_rel ].

:end :instance.


; <<>>
; >> annoying.a.1.vm.tdl
; annoying.a.1.vm.tdl

:begin :instance.

annoying_a1 := intrans_adj_le &
  [ STEM < "annoying" >,
    SYNSEM.LOCAL.CONT.KEY _annoying_rel ].

:end :instance.


; <<>>
; >> annoyingly.a.1.vm.tdl
; annoyingly.a.1.vm.tdl

:begin :instance.

annoyingly := vp_adv_post_word_le &
  [ STEM < "annoyingly" >,
    SYNSEM.LOCAL.CONT.KEY _annoyingly_rel ].

:end :instance.


; <<>>
; >> annual.a.1.vm.tdl
; annual.a.1.vm.tdl

:begin :instance.

annual_a1 := intrans_adj_le &
  [ STEM < "annual" >,
    SYNSEM.LOCAL.CONT.KEY _annual_rel ].

:end :instance.


; <<>>
; >> another.c.1.tdl
; another.c.1.tdl

:begin :instance.

another := pdet_sg_le &
  [ STEM < "another" >,
    SYNSEM.LOCAL.CONT.KEY _another_rel ].

:end :instance.


; <<>>
; >> answer.n.1.tdl
; answer.n.1.tdl

:begin :instance.

answer_n1 := intr_noun_word_le &
  [ STEM < "answer" >,
    SYNSEM.LOCAL.CONT.KEY _answer_n_rel ].

:end :instance.


; <<>>
; >> answer.v.1.vm.tdl
; answer.v.1.vm.tdl

:begin :instance.

answer_v1 := mv_np*_trans_cp_le &
  [ STEM < "answer" >,
    SYNSEM.LOCAL.CONT.KEY _answer_v_rel ].

:end :instance.


; <<>>
; >> answer.v.2.vm.tdl
; answer.v.2.vm.tdl

:begin :instance.

answer_v2 := mv_np*_trans_le &
  [ STEM < "answer" >,
    SYNSEM.LOCAL.CONT.KEY _answer_v_rel ].

:end :instance.


; <<>>
; >> anxiety.n.1.vm.tdl
; anxiety.n.1.vm.tdl

:begin :instance.

anxiety_n1 := massn_le &
  [ STEM < "anxiety" >,
    SYNSEM.LOCAL.CONT.KEY _anxiety_rel ].

:end :instance.


; <<>>
; >> any.c.1.tdl
; any.c.1.tdl

:begin :instance.

any_det := pdet_le &
  [ STEM < "any" >,
    SYNSEM.LOCAL.CONT.KEY _any_rel ].

:end :instance.


; <<>>
; >> anybody.n.1.tdl
; anybody.n.1.tdl

:begin :instance.

anybody := generic_pro_le &
  [ STEM < "anybody" >,
    SYNSEM.LOCAL.CONT [ KEY _person_rel,
			ALTKEY _any_rel ] ].
:end :instance.


; <<>>
; >> anyhow.a.1.vm.tdl
; anyhow.a.1.vm.tdl

:begin :instance.

anyhow_adv1 := vp_adv_post_word_le &
  [ STEM < "anyhow" >,
    SYNSEM.LOCAL.CONT.KEY _anyhow_rel ].

:end :instance.


; <<>>
; >> anymore.a.1.vm.tdl
; anymore.a.1.vm.tdl

:begin :instance.

anymore_adv1 := vp_adv_post_word_le &
  [ STEM < "anymore" >,
    SYNSEM.LOCAL.CONT.KEY _anymore_rel ].

:end :instance.


; <<>>
; >> anyone.n.1.tdl
; anyone.n.1.tdl

:begin :instance.

anyone := generic_pro_le &
  [ STEM < "anyone" >,
    SYNSEM.LOCAL.CONT [ KEY _person_rel,
			ALTKEY _any_rel ] ].
:end :instance.


; <<>>
; >> anything.n.1.tdl
; anything.n.1.tdl

:begin :instance.

anything := generic_pro_le &
  [ STEM < "anything" >,
    SYNSEM.LOCAL.CONT [ KEY _thing_rel,
			ALTKEY _any_rel ] ].
:end :instance.


; <<>>
; >> anytime.a.1.vm.tdl
; anytime.a.1.vm.tdl

:begin :instance.

anytime_adv1 := vp_adv_post_word_le &
  [ STEM < "anytime" >,
    SYNSEM.LOCAL.CONT.KEY _anytime_rel ].

:end :instance.


; <<>>
; >> anyway.a.1.vm.tdl
; anyway.a.1.vm.tdl

:begin :instance.

anyway_adv1 := vp_adv_post_word_le &
  [ STEM < "anyway" >,
    SYNSEM.LOCAL.CONT.KEY _anyway_rel ].

:end :instance.


; <<>>
; >> apart.a.1.tdl
; apart.a.1.tdl

:begin :instance.

apart_a1 := pred_intrans_adj_le &
  [ STEM < "apart" >,
    SYNSEM.LOCAL.CONT.KEY _apart_rel ].

:end :instance.


; <<>>
; >> apart.from.p.1.tdl
; apart.from.p.1.tdl

:begin :instance.

apart_from := prep_mle1 &
  [ STEM < "apart", "from" >,
    SYNSEM.LOCAL.CONT.KEY _apart_from_rel ].

:end :instance.


; <<>>
; >> aperitif.n.1.vm.tdl
; aperitif.n.1.vm.tdl

:begin :instance.

aperitif_n1 := intr_noun_word_le &
  [ STEM < "aperitif" >,
    SYNSEM.LOCAL.CONT.KEY _aperitif_rel ].

:end :instance.


; <<>>
; >> apologize.v.1.vm.tdl
; apologize.v.1.vm.tdl

:begin :instance.

apologize_v1 := mv_double_pp*_le &
  [ STEM < "apologize" >,
    SYNSEM.LOCAL.CONT [ KEY _apologize_rel,
			COMPKEY _to_rel,
			OCOMPKEY _for_rel ] ].

:end :instance.


; <<>>
; >> apology.n.1.vm.tdl
; apology.n.1.vm.tdl

:begin :instance.

apology_n1 := intr_noun_word_le &
  [ STEM < "apology" >,
    SYNSEM.LOCAL.CONT.KEY _apology_rel ].

:end :instance.


; <<>>
; >> apparently.a.1.vm.tdl
; apparently.a.1.vm.tdl

:begin :instance.

apparently_adv1 := adv_pre_word_le &
  [ STEM < "apparently" >,
    SYNSEM.LOCAL.CONT.KEY _apparently_rel ].

:end :instance.


; <<>>
; >> appeal.v.1.vm.tdl
; appeal.v.1.vm.tdl

:begin :instance.

appeal_v1 := mv_oeq_pp_inf_le &
  [ STEM < "appeal" >,
    SYNSEM.LOCAL.CONT.KEY _appeal_v_rel ].

:end :instance.


; <<>>
; >> appear.v.1.vm.tdl
; appear.v.1.vm.tdl

:begin :instance.

appear_v1 := mv_pp_inf_ssr_le &
  [ STEM < "appear" >,
    SYNSEM.LOCAL.CONT.KEY _appear_rel ].

:end :instance.


; <<>>
; >> appear.v.2.vm.tdl
; appear.v.2.vm.tdl

:begin :instance.

appear_v2 := mv_prdp_pp_ssr_le &
  [ STEM < "appear" >,
    SYNSEM.LOCAL [ CAT.VALENCE [ SUBJ < [ LOCAL.CONT nom-obj ] >,
				 COMPS.FIRST.LOCAL.CAT.HEAD adj ],
		   CONT.KEY _appear_rel ] ].

:end :instance.


; <<>>
; >> appearance.n.1.vm.tdl
; appearance.n.1.vm.tdl

:begin :instance.

appearance_n1 := intr_noun_word_le &
  [ STEM < "appearance" >,
    SYNSEM.LOCAL.CONT.KEY _appearance_rel ].

:end :instance.


; <<>>
; >> applicant.n.1.tdl
; applicant.n.1.tdl

:begin :instance.

applicant_n1 := intr_noun_word_le &
  [ STEM < "applicant" >,
    SYNSEM.LOCAL.CONT.KEY _applicant_rel ].

:end :instance.


; <<>>
; >> application.n.1.vm.tdl
; application.n.1.vm.tdl

:begin :instance.

application_n1 := intr_noun_word_le &
  [ STEM < "application" >,
    SYNSEM.LOCAL.CONT.KEY _application_rel ].

:end :instance.


; <<>>
; >> applied.a.1.vm.tdl
; applied.a.1.vm.tdl

:begin :instance.

applied_a1 := intrans_adj_le &
  [ STEM < "applied" >,
    SYNSEM.LOCAL.CONT.KEY _applied_rel ].

:end :instance.


; <<>>
; >> apply.v.1.tdl
; apply.v.1.tdl

:begin :instance.

apply_to_v1 := mv_double_pp*_le &
  [ STEM < "apply" >,
    SYNSEM.LOCAL.CONT [ KEY _apply_to_rel,
			COMPKEY _to_rel,
			OCOMPKEY _for_rel ] ].

:end :instance.


; <<>>
; >> apply.v.1.vm.tdl
; apply.v.1.vm.tdl

:begin :instance.

apply_v1 := mv_prep*_trans_le &
  [ STEM < "apply" >,
    SYNSEM.LOCAL.CONT.KEY _apply_rel ].

:end :instance.


; <<>>
; >> appoint.v.1.vm.tdl
; appoint.v.1.vm.tdl

:begin :instance.

appoint_v1 := mv_np_trans_le &
  [ STEM < "appoint" >,
    SYNSEM.LOCAL.CONT.KEY _appoint_rel ].

:end :instance.


; <<>>
; >> appointment.n.1.vm.tdl
; appointment.n.1.vm.tdl

:begin :instance.

appointment_n1 := intr_noun_word_le &
  [ STEM < "appointment" >,
    SYNSEM.LOCAL.CONT.KEY appointment_rel ].

:end :instance.


; <<>>
; >> appreciate.v.1.vm.tdl
; appreciate.v.1.vm.tdl

:begin :instance.

appreciate_v1 := mv_np_trans_le &
  [ STEM < "appreciate" >,
    SYNSEM.LOCAL.CONT.KEY _appreciate_rel ].

:end :instance.


; <<>>
; >> approach.n.1.vm.tdl
; approach.n.1.vm.tdl

:begin :instance.

approach_n1 := intr_noun_word_le &
  [ STEM < "approach" >,
    SYNSEM.LOCAL.CONT.KEY _approach_n_rel ].

:end :instance.


; <<>>
; >> approach.v.1.vm.tdl
; approach.v.1.vm.tdl

:begin :instance.

approach_v1 := mv_np*_trans_le &
  [ STEM < "approach" >,
    SYNSEM.LOCAL.CONT.KEY _approach_v_rel ].

:end :instance.


; <<>>
; >> appropriate.a.1.vm.tdl
; appropriate.a.1.vm.tdl

:begin :instance.

appropriate_a1 := intrans_adj_le &
  [ STEM < "appropriate" >,
    SYNSEM.LOCAL.CONT.KEY _appropriate_rel ].

:end :instance.


; <<>>
; >> approve.of.v.1.tdl
; approve.of.v.1.tdl

:begin :instance.

approve_of_v1 := mv_empty_prep_intrans_le &
  [ STEM < "approve" >,
    SYNSEM.LOCAL.CONT [ KEY _approve_of_rel,
			COMPKEY _of_rel ] ].

:end :instance.


; <<>>
; >> approve.v.1.tdl
; approve.v.1.tdl

:begin :instance.

approve_v1 := mv_np_trans_le &
  [ STEM < "approve" >,
    SYNSEM.LOCAL.CONT.KEY _approve_rel ].

:end :instance.


; <<>>
; >> approximately.a.1.tdl
; approximately.a.1.tdl

:begin :instance.

approximately := degree_spec_le &
  [ STEM < "approximately" >,
    SYNSEM.LOCAL.CONT.KEY _approximately_rel ].

:end :instance.


; <<>>
; >> april.n.1.tdl
; april.n.1.tdl

:begin :instance.

april := month_word_le &
  [ STEM < "april" >,
    SYNSEM.LOCAL.CONT.KEY.MONTH 'apr ].

:end :instance.


; <<>>
; >> april.n.2.tdl
; april.n.2.tdl

:begin :instance.

april_2 := month_year_word_le &
  [ STEM < "april" >,
    SYNSEM.LOCAL.CONT.KEY.MONTH 'apr ].

:end :instance.


; <<>>
; >> arbitrary.a.1.vm.tdl
; arbitrary.a.1.vm.tdl

:begin :instance.

arbitrary_a1 := intrans_adj_le &
  [ STEM < "arbitrary" >,
    SYNSEM.LOCAL.CONT.KEY _arbitrary_rel ].

:end :instance.


; <<>>
; >> are.vx.1.tdl
; are.vx.1.tdl

:begin :instance.

be_c_are := be_c_are_le &
  [ STEM < "are" > ].

:end :instance.


; <<>>
; >> are.vx.2.tdl
; are.vx.2.tdl

:begin :instance.

be_id_are := be_id_are_le &
  [ STEM < "are" > ].

:end :instance.


; <<>>
; >> are.vx.3.tdl
; are.vx.3.tdl

:begin :instance.

be_th_cop_are := be_th_cop_are_le &
  [ STEM < "are" > ].

:end :instance.


; <<>>
; >> area.n.1.vm.tdl
; area.n.1.vm.tdl

:begin :instance.

area_n1 := intr_noun_word_le &
  [ STEM < "area" >,
    SYNSEM.LOCAL.CONT.KEY _area_rel ].

:end :instance.


; <<>>
; >> arent.vx.1.tdl
; arent.vx.1.tdl

:begin :instance.

be_c_am_neg := be_c_am_neg_le &
  [ STEM < "aren", "t" > ].

:end :instance.


; <<>>
; >> arent.vx.2.tdl
; arent.vx.2.tdl

:begin :instance.

be_c_are_neg := be_c_are_neg_le &
  [ STEM < "aren", "t" > ].

:end :instance.


; <<>>
; >> arent.vx.3.tdl
; arent.vx.3.tdl

:begin :instance.

be_id_am_neg := be_id_am_neg_le &
  [ STEM < "aren", "t" > ].

:end :instance.


; <<>>
; >> arent.vx.4.tdl
; arent.vx.4.tdl

:begin :instance.

be_id_are_neg := be_id_are_neg_le &
  [ STEM < "aren", "t" > ].

:end :instance.


; <<>>
; >> arent.vx.5.tdl
; arent.vx.5.tdl

:begin :instance.

be_th_cop_are_neg := be_th_cop_are_neg_le &
  [ STEM < "aren", "t" > ].

:end :instance.


; <<>>
; >> argue.about.v.1.tdl
; argue.about.v.1.tdl

:begin :instance.

argue_about_v1 := mv_empty_prep_intrans_le &
  [ STEM < "argue" >,
    SYNSEM.LOCAL.CONT [ KEY _argue_about_rel,
			COMPKEY _about_rel ] ].

:end :instance.


; <<>>
; >> argue.v.1.tdl
; argue.v.1.tdl

:begin :instance.

argue_v1 := mv_cp_prop*_non_trans_le &
  [ STEM < "argue" >,
    SYNSEM.LOCAL.CONT.KEY _argue_rel ].

:end :instance.


; <<>>
; >> arise.v.1.vm.tdl
; arise.v.1.vm.tdl

:begin :instance.

arise_v1 := mv_unerg_le &
  [ STEM < "arise" >,
    SYNSEM.LOCAL.CONT.KEY _arise_rel ].

:end :instance.


; <<>>
; >> around.a.1.tdl
; around.a.1.tdl

:begin :instance.

around_adv := vp_adv_post_word_le &
  [ STEM < "around" >,
    SYNSEM.LOCAL.CONT.KEY _around_adv_rel ].

:end :instance.


; <<>>
; >> around.p.1.tdl
; around.p.1.tdl

:begin :instance.

around := reg_prep_le &
  [ STEM < "around" >,
    SYNSEM.LOCAL.CONT.KEY _around_rel ].

:end :instance.


; <<>>
; >> around.p.2.tdl
; around.p.2.tdl

:begin :instance.

around_temp := at_prep_le &
  [ STEM < "around" >,
    SYNSEM.LOCAL.CONT.KEY _around_temp_rel ].

:end :instance.


; <<>>
; >> arrange.v.1.vm.tdl
; arrange.v.1.vm.tdl

:begin :instance.

arrange_v1 := mv_np_trans_le &
  [ STEM < "arrange" >,
    SYNSEM.LOCAL.CONT.KEY _arrange_rel ].

:end :instance.


; <<>>
; >> arrange.v.2.vm.tdl
; arrange.v.2.vm.tdl

:begin :instance.

arrange_v2 := mv_empty_prep_intrans_le &
  [ STEM < "arrange" >,
    SYNSEM.LOCAL.CONT [ KEY _arrange_for_rel,
			COMPKEY _for_rel ] ].

:end :instance.


; <<>>
; >> arrange.v.3.vm.tdl
; arrange.v.3.vm.tdl

:begin :instance.

arrange_v3 := mv_cp_non_trans_le &
  [ STEM < "arrange" >,
    SYNSEM.LOCAL.CONT.KEY _arrange_sit_rel ].

:end :instance.


; <<>>
; >> arrange.for.v.1.tdl
; arrange.for.v.1.tdl

:begin :instance.

arrange_for_v1 := mv_expl_pp_inf_seq_le &
  [ STEM < "arrange" >,
    SYNSEM.LOCAL.CONT [ KEY _arrange_for_thm_rel,
			OCOMPKEY _for_rel ] ].

:end :instance.


; <<>>
; >> arrange.with.v.1.tdl
; arrange.with.v.1.tdl

:begin :instance.

arrange_with_v1 := mv_pp_inf_seq_le &
  [ STEM < "arrange" >,
    SYNSEM.LOCAL.CONT [ KEY _arrange_with_rel,
			COMPKEY _with_rel ] ].

:end :instance.


; <<>>
; >> arrange.with.v.2.tdl
; arrange.with.v.2.tdl

:begin :instance.

arrange_with_v2 := mv_expl_pp_inf_seq_le &
  [ STEM < "arrange" >,
    SYNSEM.LOCAL.CONT [ KEY _arrange_with_rel,
			OCOMPKEY _with_rel ] ].

:end :instance.


; <<>>
; >> arrangement.n.1.vm.tdl
; arrangement.n.1.vm.tdl

:begin :instance.

arrangement_n1 := deverbal_noun_intr_word_le &
  [ STEM < "arrangement" >,
    SYNSEM.LOCAL.CONT.ALTKEY _arrange_rel ].

:end :instance.


; <<>>
; >> arrive.v.1.vm.tdl
; arrive.v.1.vm.tdl

:begin :instance.

arrive_v1 := mv_unerg_le &
  [ STEM < "arrive" >,
    SYNSEM.LOCAL.CONT.KEY _arrive_rel ].

:end :instance.


; <<>>
; >> artificial.a.1.vm.tdl
; artificial.a.1.vm.tdl

:begin :instance.

artificial_a1 := intrans_adj_le &
  [ STEM < "artificial" >,
    SYNSEM.LOCAL.CONT.KEY _artificial_rel ].

:end :instance.


; <<>>
; >> artless.a.1.vm.tdl
; artless.a.1.vm.tdl

:begin :instance.

artless_a1 := intrans_adj_le &
  [ STEM < "artless" >,
    SYNSEM.LOCAL.CONT.KEY _artless_rel ].

:end :instance.


; <<>>
; >> as.a.1.tdl
; as.a.1.tdl

:begin :instance.

as_deg := degree_spec_le &
  [ STEM < "as" >,
    SYNSEM.LOCAL.CONT.KEY _as_deg_rel ].

:end :instance.


; <<>>
; >> as.p.1.tdl
; as.p.1.tdl

:begin :instance.

as_2 := reg_prep_le &
  [ STEM < "as" >,
    SYNSEM.LOCAL.CONT.KEY _as_rel ].

:end :instance.


; <<>>
; >> as.p.2.tdl
; as.p.2.tdl

:begin :instance.

as := prep_idiom_nomod_le &
  [ STEM < "as" >,
    SYNSEM
       [ LOCAL [ CAT.VALENCE [ SUBJ #subj,
			       COMPS < [ LOCAL [ CAT [ HEAD subst,
						       VALENCE [ SUBJ #subj,
								 COMPS < > ] ],
						 CONT [ TOP #hand,
							INDEX #index ] ] ] > ],
			       CONT [ TOP #hand,
			INDEX #index,
			MODCONT.LISZT <! _as_rel !> ] ] ] ].

:end :instance.


; <<>>
; >> as.follows.a.1.vm.tdl
; as.follows.a.1.vm.tdl
; MULTIKEY < "follows" >

:begin :instance.

as_follows_adv1 := vp_adv_post_word_mle2 &
  [ STEM < "as", "follows" >,
    SYNSEM.LOCAL.CONT.KEY _as_follows_adv_rel ].

:end :instance.


; <<>>
; >> as.if.c.1.tdl
; as.if.c.1.tdl

:begin :instance.

as_if := subconj_mle2 &
  [ STEM < "as", "if" >,
    SYNSEM.LOCAL.CONT.KEY _as_if_rel ].

:end :instance.


; <<>>
; >> as.though.c.1.tdl
; as.though.c.1.tdl

:begin :instance.

as_though := subconj_mle2 &
  [ STEM < "as", "though" >,
    SYNSEM.LOCAL.CONT.KEY _as_though_rel ].

:end :instance.

; <<>>
; >> as.it.happens.a.1.vm.tdl
; as.it.happens.a.1.vm.tdl
; MULTIKEY < "happens" >

:begin :instance.

as_it_happens_adv1 := adv_pre_word_3mle3 &
  [ STEM < "as", "it", "happens" >,
    SYNSEM.LOCAL.CONT.KEY _as_it_happens_rel ].

:end :instance.


; <<>>
; >> as.of.p.1.vm.tdl
; as.of.p.1.vm.tdl

:begin :instance.

as_of := prep_idiom_mle1 &
  [ STEM < "as", "of" >,
    SYNSEM [ LOCAL.CONT.KEY _as_of_rel ] ].

:end :instance.


; <<>>
; >> as.long.as.c.1.tdl
; as.long.as.c.1.tdl
; MULTIKEY < "long" >

:begin :instance.

as_long_as_subord := subconj_3mle2 &
  [ STEM < "as", "long", "as" >,
    SYNSEM.LOCAL.CONT.KEY _as_long_as_rel ].

:end :instance.


; <<>>
; >> as.c.1.tdl
; as.c.1.tdl

:begin :instance.

as_subord := subconj_le &
  [ STEM < "as" >,
    SYNSEM.LOCAL.CONT.KEY _as_subord_rel ].

:end :instance.


; <<>>
; >> as.far.as.c.1.tdl
; as.far.as.c.1.tdl
; MULTIKEY < "far" >

:begin :instance.

as_far_as_subord := subconj_3mle2 &
  [ STEM < "as", "far", "as" >,
    SYNSEM.LOCAL.CONT.KEY _as_far_as_rel ].

:end :instance.


; <<>>
; >> as.soon.as.c.1.tdl
; as.soon.as.c.1.tdl
; MULTIKEY < "soon" >

:begin :instance.

as_soon_as_subord := subconj_3mle2 &
  [ STEM < "as", "soon", "as" >,
    SYNSEM.LOCAL.CONT.KEY _as_soon_as_rel ].

:end :instance.


; <<>>
; >> as.well.as.c.1.tdl
; as.well.as.c.1.tdl
; MULTIKEY < "well" >

:begin :instance.

as_well_as_conj_1 := coord_c_3mle2 &
  [ STEM < "as", "well", "as" >,
    SYNSEM.LOCAL [ CONJ complex-conj & [ CHEAD [ LEFT < cnil, cnil >,
                                                 RELTN _and_rel ] ],
                   AGR.PNG.PN 3pl ] ].

:end :instance.


; <<>>
; >> as.well.as.c.2.tdl
; as.well.as.c.2.tdl
; MULTIKEY < "well" >

:begin :instance.

as_well_as_conj_2 := coord_c_3mle2 &
  [ STEM < "as", "well", "as" >,
    SYNSEM.LOCAL [ CONJ complex-conj & [ CHEAD [ LEFT < both >,
                                                 RELTN _and_rel ] ],
                   AGR.PNG.PN 3pl ] ].
:end :instance.


; <<>>
; >> as.well.a.1.vm.tdl
; as.well.a.1.vm.tdl
; MULTIKEY < "well" >

:begin :instance.

as_well := vp_adv_post_word_mle2 &
  [ STEM < "as", "well" >,
    SYNSEM.LOCAL.CONT.KEY _as_well_rel ].

:end :instance.


; <<>>
; >> as.for.p.1.tdl
; as.for.p.1.tdl

:begin :instance.

as_for_p := prep_mle1 &
  [ STEM < "as", "for" >,
    SYNSEM.LOCAL.CONT.KEY _as_for_rel ].

:end :instance.


; <<>>
; >> ascension.day.n.1.tdl
; ascension.day.n.1.tdl

:begin :instance.

ascension_day := holiday_word_mle1 &
  [ STEM < "ascension", "day" >,
    SYNSEM.LOCAL.CONT.KEY.DAY 'ascension_day ].

:end :instance.


; <<>>
; >> ash.wednesday.n.1.tdl
; ash.wednesday.n.1.tdl

:begin :instance.

ash_wednesday := holiday_word_mle1 &
  [ STEM < "ash", "wednesday" >,
    SYNSEM.LOCAL.CONT.KEY.DAY 'ash_wednesday ].

:end :instance.


; <<>>
; >> aside.a.1.tdl
; aside.a.1.tdl

:begin :instance.

aside_adv := np_adv_word_le &
  [ STEM < "aside" >,
    SYNSEM.LOCAL.CONT.KEY _aside_rel ].

:end :instance.


; <<>>
; >> aside.from.p.1.tdl
; aside.from.p.1.tdl

:begin :instance.

aside_from := prep_mle1 &
  [ STEM < "aside", "from" >,
    SYNSEM.LOCAL.CONT.KEY _aside_from_rel ].

:end :instance.


; <<>>
; >> ask.about.v.1.vm.tdl
; ask.about.v.1.vm.tdl

:begin :instance.

ask_about_v1 := mv_np*_prep_trans_le &
  [ STEM < "ask" >,
    SYNSEM.LOCAL.CONT [ KEY _ask_about_rel,
			OCOMPKEY _about_rel ] ].

:end :instance.


; <<>>
; >> ask.for.v.1.vm.tdl
; ask.for.v.1.vm.tdl

:begin :instance.

ask_for_v1 := mv_empty_prep_trans*_le &
  [ STEM < "ask" >,
    SYNSEM.LOCAL.CONT [ KEY _ask_for_rel,
			OCOMPKEY _for_rel ] ].

:end :instance.


; <<>>
; >> ask.v.1.tdl
; ask.v.1.tdl

:begin :instance.

ask_v1 := mv_ditrans*_only_le &
  [ STEM < "ask" >,
    SYNSEM.LOCAL.CONT.KEY _ask3_rel ].

:end :instance.


; <<>>
; >> ask.v.2.tdl
; ask.v.2.tdl

:begin :instance.

ask_v2 := mv_obj_equi_le &
  [ STEM < "ask" >,
    SYNSEM.LOCAL.CONT.KEY _ask2_rel ].

:end :instance.


; <<>>
; >> ask.v.3.tdl
; ask.v.3.tdl

:begin :instance.

ask_v3 := mv_np_trans_cp_ques_le &
  [ STEM < "ask" >,
    SYNSEM.LOCAL.CONT.KEY _ask3_rel ].

:end :instance.


; <<>>
; >> asleep.a.1.vm.tdl
; asleep.a.1.vm.tdl

:begin :instance.

asleep_a1 := pred_intrans_adj_le &
  [ STEM < "asleep" >,
    SYNSEM.LOCAL.CONT.KEY _asleep_rel ].

:end :instance.


; <<>>
; >> assemble.v.1.vm.tdl
; assemble.v.1.vm.tdl

:begin :instance.

assemble_v1 := mv_np_trans_le &
  [ STEM < "assemble" >,
    SYNSEM.LOCAL.CONT.KEY _assemble_rel ].

:end :instance.


; <<>>
; >> assess.v.1.vm.tdl
; assess.v.1.vm.tdl

:begin :instance.

assess_v1 := mv_np_trans_le &
  [ STEM < "assess" >,
    SYNSEM.LOCAL.CONT.KEY _assess_rel ].

:end :instance.


; <<>>
; >> assistance.n.1.vm.tdl
; assistance.n.1.vm.tdl

:begin :instance.

assistance_n1 := massn_le &
  [ STEM < "assistance" >,
    SYNSEM.LOCAL.CONT.KEY _assistance_rel ].

:end :instance.


; <<>>
; >> associate.with.v.1.vm.tdl
; associate.with.v.1.vm.tdl

:begin :instance.

associate_with_v1 := mv_prep_trans_le &
  [ STEM < "associate" >,
    SYNSEM.LOCAL.CONT [ KEY _associate_rel,
			OCOMPKEY _with_rel ] ].

:end :instance.


; <<>>
; >> assume.v.1.vm.tdl
; assume.v.1.vm.tdl

:begin :instance.

assume_v1 := mv_cp_prop_non_trans_le &
  [ STEM < "assume" >,
    SYNSEM.LOCAL.CONT.KEY _assume_rel ].

:end :instance.


; <<>>
; >> assumption.day.n.1.tdl
; assumption.day.n.1.tdl

:begin :instance.

assumption_day := holiday_word_mle1 &
  [ STEM < "assumption", "day" >,
    SYNSEM.LOCAL.CONT.KEY.DAY 'assumption_day ].

:end :instance.


; <<>>
; >> assumption.n.1.vm.tdl
; assumption.n.1.vm.tdl

:begin :instance.

assumption_n1 := deverbal_noun_intr_word_le &
  [ STEM < "assumption" >,
    SYNSEM.LOCAL.CONT.ALTKEY _assume_rel ].

:end :instance.


; <<>>
; >> assure.v.1.vm.tdl
; assure.v.1.vm.tdl

:begin :instance.

assure_v1 := mv_ditrans*_only_le &
  [ STEM < "assure" >,
    SYNSEM.LOCAL.CONT.KEY _assure_rel ].

:end :instance.


; <<>>
; >> asterisk.n.1.vm.tdl
; asterisk.n.1.vm.tdl

:begin :instance.

asterisk_n1 := intr_noun_word_le &
  [ STEM < "asterisk" >,
    SYNSEM.LOCAL.CONT.KEY _asterisk_rel ].

:end :instance.


; <<>>
; >> astray.a.1.tdl
; astray.a.1.tdl

:begin :instance.

astray_adv := np_adv_word_le &
  [ STEM < "astray" >,
    SYNSEM.LOCAL.CONT.KEY _astray_rel ].

:end :instance.


; <<>>
; >> at.all.a.1.vm.tdl
; at.all.a.1.vm.tdl

:begin :instance.

at_all_adv1 := vp_adv_post_word_mle1 &
  [ STEM < "at", "all" >,
    SYNSEM.LOCAL.CONT.KEY _at_all_rel ].

:end :instance.


; <<>>
; >> at.least.a.1.tdl
; at.least.a.1.tdl
; MULTIKEY < "least" >

:begin :instance.

at_least_deg := degree_spec_mle2 &
  [ STEM < "at", "least" >,
    SYNSEM.LOCAL.CONT.KEY _at_least_rel ].

:end :instance.


; <<>>
; >> at.p.1.tdl
; at.p.1.tdl

:begin :instance.

at := reg_prep_le &
  [ STEM < "at" >,
    SYNSEM.LOCAL.CONT.KEY _at_rel ].

:end :instance.


; <<>>
; >> at.p.2.tdl
; at.p.2.tdl

:begin :instance.

at_temp := at_prep_le &
  [ STEM < "at" >,
    SYNSEM.LOCAL.CONT.KEY _at_temp_rel ].

:end :instance.


; <<>>
; >> at.the.most.a.1.tdl
; at.the.most.a.1.tdl
; MULTIKEY < "most" >

:begin :instance.

at_the_most_deg := degree_spec_3mle3 &
  [ STEM < "at", "the", "most" >,
    SYNSEM.LOCAL.CONT.KEY _at_the_most_deg_rel ].

:end :instance.


; <<>>
; >> at.worst.a.1.tdl
; at.worst.a.1.tdl
; MULTIKEY < "worst" >

:begin :instance.

at_worst_deg := degree_spec_mle2 &
  [ STEM < "at", "worst" >,
    SYNSEM.LOCAL.CONT.KEY _at_worst_rel ].

:end :instance.


; <<>>
; >> at.most.a.1.vm.tdl
; at.most.a.1.vm.tdl
; MULTIKEY < "most" >

:begin :instance.

at_most := vp_adv_post_word_mle2 &
  [ STEM < "at", "most" >,
    SYNSEM.LOCAL.CONT.KEY _at_most_rel ].

:end :instance.


; <<>>
; >> at.the.earliest.a.1.vm.tdl
; at.the.earliest.a.1.vm.tdl
; MULTIKEY < "earliest" >

:begin :instance.

at_the_earliest := vp_adv_post_word_3mle3 &
  [ STEM < "at", "the", "earliest" >,
    SYNSEM.LOCAL.CONT.KEY _at_the_earliest_rel ].

:end :instance.


; <<>>
; >> at.the.latest.a.1.vm.tdl
; at.the.latest.a.1.vm.tdl
; MULTIKEY < "latest" >

:begin :instance.

at_the_latest := vp_adv_post_word_3mle3 &
  [ STEM < "at", "the", "latest" >,
    SYNSEM.LOCAL.CONT.KEY _at_the_latest_rel ].

:end :instance.


; <<>>
; >> atmosphere.n.1.vm.tdl
; atmosphere.n.1.vm.tdl

:begin :instance.

atmosphere_n1 := intr_noun_word_le &
  [ STEM < "atmosphere" >,
    SYNSEM.LOCAL.CONT.KEY _atmosphere_rel ].

:end :instance.


; <<>>
; >> attempt.n.1.vm.tdl
; attempt.n.1.vm.tdl

:begin :instance.

attempt_n1 := intr_noun_word_le &
  [ STEM < "attempt" >,
    SYNSEM.LOCAL.CONT.KEY _attempt_rel ].

:end :instance.


; <<>>
; >> attend.v.1.vm.tdl
; attend.v.1.vm.tdl

:begin :instance.

attend_v1 := mv_np*_trans_le &
  [ STEM < "attend" >,
    SYNSEM.LOCAL.CONT.KEY _attend_rel ].

:end :instance.


; <<>>
; >> attendance.n.1.vm.tdl
; attendance.n.1.vm.tdl

:begin :instance.

attendance_n1 := massn_le &
  [ STEM < "attendance" >,
    SYNSEM.LOCAL.CONT.KEY _attendance_rel ].

:end :instance.


; <<>>
; >> audible.a.1.vm.tdl
; audible.a.1.vm.tdl

:begin :instance.

audible_a1 := intrans_adj_le &
  [ STEM < "audible" >,
    SYNSEM.LOCAL.CONT.KEY _audible_rel ].

:end :instance.


; <<>>
; >> augsburg.n.1.vm.tdl
; augsburg.n.1.vm.tdl

:begin :instance.

Augsburg_n1 := proper_le &
  [ STEM < "augsburg" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'Augsburg ].

:end :instance.


; <<>>
; >> august.n.1.tdl
; august.n.1.tdl

:begin :instance.

august := month_word_le &
  [ STEM < "august" >,
    SYNSEM.LOCAL.CONT.KEY.MONTH 'aug ].

:end :instance.


; <<>>
; >> august.n.2.tdl
; august.n.2.tdl

:begin :instance.

august_2 := month_year_word_le &
  [ STEM < "august" >,
    SYNSEM.LOCAL.CONT.KEY.MONTH 'aug ].

:end :instance.


; <<>>
; >> authentic.a.1.vm.tdl
; authentic.a.1.vm.tdl

:begin :instance.

authentic_a1 := intrans_adj_le &
  [ STEM < "authentic" >,
    SYNSEM.LOCAL.CONT.KEY _authentic_rel ].

:end :instance.


; <<>>
; >> auto.n.1.vm.tdl
; auto.n.1.vm.tdl

:begin :instance.

auto_n1 := intr_noun_word_le &
  [ STEM < "auto" >,
    SYNSEM.LOCAL.CONT.KEY _automobile_rel ].

:end :instance.


; <<>>
; >> automobile.n.1.vm.tdl
; automobile.n.1.vm.tdl

:begin :instance.

automobile_n1 := intr_noun_word_le &
  [ STEM < "automobile" >,
    SYNSEM.LOCAL.CONT.KEY _automobile_rel ].

:end :instance.


; <<>>
; >> autumn.n.1.tdl
; autumn.n.1.tdl

:begin :instance.

autumn_season := season_word_le &
  [ STEM < "autumn" >,
    SYNSEM.LOCAL.CONT.KEY.SEASON 'fall ].

:end :instance.


; <<>>
; >> available.a.1.vm.tdl
; available.a.1.vm.tdl

:begin :instance.

available_a1 := intrans_adj_le &
  [ STEM < "available" >,
    SYNSEM.LOCAL.CONT.KEY _available_rel ].

:end :instance.


; <<>>
; >> avoid.v.1.vm.tdl
; avoid.v.1.vm.tdl

:begin :instance.

avoid_v1 := mv_np_trans_le &
  [ STEM < "avoid" >,
    SYNSEM.LOCAL.CONT.KEY _avoid_rel ].

:end :instance.


; <<>>
; >> awake.a.1.vm.tdl
; awake.a.1.vm.tdl

:begin :instance.

awake_a1 := pred_intrans_adj_le &
  [ STEM < "awake" >,
    SYNSEM.LOCAL.CONT.KEY _awake_rel ].

:end :instance.


; <<>>
; >> aware.a.1.vm.tdl
; aware.a.1.vm.tdl

:begin :instance.

aware_a1 := intrans_adj_le &
  [ STEM < "aware" >,
    SYNSEM.LOCAL.CONT.KEY _aware_rel ].

:end :instance.


; <<>>
; >> away.a.1.tdl
; away.a.1.tdl

:begin :instance.

away_adv := np_adv_word_le &
  [ STEM < "away" >,
    SYNSEM.LOCAL.CONT.KEY _away_rel ].

:end :instance.


; <<>>
; >> awfully.a.1.tdl
; awfully.a.1.tdl

:begin :instance.

awfully_deg := degree_spec_le &
  [ STEM < "awfully" >,
    SYNSEM.LOCAL.CONT.KEY _awfully_deg_rel ].

:end :instance.

; <<>>
; >> awkward.a.1.vm.tdl
; awkward.a.1.vm.tdl

:begin :instance.

awkward_a1 := intrans_adj_le &
  [ STEM < "awkward" >,
    SYNSEM.LOCAL.CONT.KEY _awkward_rel ].

:end :instance.


; <<>>
; >> awkwardly.a.1.vm.tdl
; awkwardly.a.1.vm.tdl

:begin :instance.

awkwardly := adv_word_le &
  [ STEM < "awkwardly" >,
    SYNSEM.LOCAL.CONT.KEY _awkwardly_rel ].

:end :instance.


; <<>>
; >> back.a.1.vm.tdl
; back.a.1.vm.tdl

:begin :instance.

back_adv1 := np_adv_word_le &
  [ STEM < "back" >,
    SYNSEM.LOCAL.CONT.KEY _back_adv_rel ].

:end :instance.


; <<>>
; >> backward.a.1.vm.tdl
; backward.a.1.vm.tdl

:begin :instance.

backward_adv1 := np_adv_word_le &
  [ STEM < "backward" >,
    SYNSEM.LOCAL.CONT.KEY _backward_rel ].

:end :instance.


; <<>>
; >> backwards.a.1.vm.tdl
; backwards.a.1.vm.tdl

:begin :instance.

backwards_adv1 := np_adv_word_le &
  [ STEM < "backwards" >,
    SYNSEM.LOCAL.CONT.KEY _backwards_rel ].

:end :instance.


; <<>>
; >> bad.a.1.vm.tdl
; bad.a.1.vm.tdl

:begin :instance.

bad_a1 := intrans_adj_le &
  [ STEM < "bad" >,
    SYNSEM.LOCAL.CONT.KEY _bad_rel ].

:end :instance.


; <<>>
; >> badly.a.1.vm.tdl
; badly.a.1.vm.tdl

:begin :instance.

badly_adv1 := vp_adv_post_word_le &
  [ STEM < "badly" >,
    SYNSEM.LOCAL.CONT.KEY _badly_rel ].

:end :instance.


; <<>>
; >> balance.n.1.vm.tdl
; balance.n.1.vm.tdl

:begin :instance.

balance_n1 := intr_noun_word_le &
  [ STEM < "balance" >,
    SYNSEM.LOCAL.CONT.KEY _balance_rel ].

:end :instance.


; <<>>
; >> bare.a.1.vm.tdl
; bare.a.1.vm.tdl

:begin :instance.

bare_a1 := intrans_adj_le &
  [ STEM < "bare" >,
    SYNSEM.LOCAL.CONT.KEY _bare_rel ].

:end :instance.


; <<>>
; >> barely.a.1.tdl
; barely.a.1.tdl

:begin :instance.

barely_deg := degree_spec_le &
  [ STEM < "barely" >,
    SYNSEM.LOCAL.CONT.KEY _barely_deg_rel ].

:end :instance.


; <<>>
; >> bargain.over.v.1.tdl
; bargain.over.v.1.tdl

:begin :instance.

bargain_over_v1 := mv_empty_prep_intrans_le &
  [ STEM < "bargain" >,
    SYNSEM.LOCAL.CONT [ KEY _bargain_over_rel,
			COMPKEY _over_rel ] ].

:end :instance.


; <<>>
; >> bargain.v.1.tdl
; bargain.v.1.tdl

:begin :instance.

bargain_v1 := mv_np_trans_le &
  [ STEM < "bargain" >,
    SYNSEM.LOCAL.CONT.KEY _bargain_rel ].

:end :instance.


; <<>>
; >> bargain.v.2.tdl
; bargain.v.2.tdl

:begin :instance.

bargain_v2 := mv_cp_non_trans_le &
  [ STEM < "bargain" >,
    SYNSEM.LOCAL.CONT.KEY _bargain_rel ].

:end :instance.


; <<>>
; >> base.n.1.vm.tdl
; base.n.1.vm.tdl

:begin :instance.

base_n1 := intr_noun_word_le &
  [ STEM < "base" >,
    SYNSEM.LOCAL.CONT.KEY _base_rel ].

:end :instance.


; <<>>
; >> base.v.1.vm.tdl
; base.v.1.vm.tdl

:begin :instance.

base_v1 := mv_prep_trans_le &
  [ STEM < "base" >,
    SYNSEM.LOCAL.CONT [ KEY _base_v_rel,
			OCOMPKEY _on_rel ] ].

:end :instance.


; <<>>
; >> basement.n.1.vm.tdl
; basement.n.1.vm.tdl

:begin :instance.

basement_n1 := intr_noun_word_le &
  [ STEM < "basement" >,
    SYNSEM.LOCAL.CONT.KEY _basement_rel ].

:end :instance.


; <<>>
; >> basically.a.1.vm.tdl
; basically.a.1.vm.tdl

:begin :instance.

basically_adv1 := adv_pre_word_le &
  [ STEM < "basically" >,
    SYNSEM.LOCAL.CONT.KEY _basically_rel ].

:end :instance.


; <<>>
; >> battle.against.v.1.tdl
; battle.against.v.1.tdl

:begin :instance.

battle_against_v1 := mv_empty_prep_intrans_le &
  [ STEM < "battle" >,
    SYNSEM.LOCAL.CONT [ KEY _battle_against_rel,
			COMPKEY _against_rel ] ].

:end :instance.


; <<>>
; >> battle.v.1.tdl
; battle.v.1.tdl

:begin :instance.

battle_v1 := mv_np*_trans_le &
  [ STEM < "battle" >,
    SYNSEM.LOCAL.CONT.KEY _battle_rel ].

:end :instance.


; <<>>
; >> bavarian.a.1.vm.tdl
; bavarian.a.1.vm.tdl

:begin :instance.

bavarian_a1 := intrans_adj_le &
  [ STEM < "bavarian" >,
    SYNSEM.LOCAL.CONT.KEY _bavarian_rel ].

:end :instance.


; <<>>
; >> be.vx.1.tdl
; be.vx.1.tdl

:begin :instance.

be_c_be := be_c_be_le &
  [ STEM < "be" > ].

:end :instance.


; <<>>
; >> be.vx.2.tdl
; be.vx.2.tdl

:begin :instance.

be_id_be := be_id_be_le &
  [ STEM < "be" > ].

:end :instance.


; <<>>
; >> be.vx.3.tdl
; be.vx.3.tdl

:begin :instance.

be_th_cop_be := be_th_cop_be_le &
  [ STEM < "be" > ].

:end :instance.


; <<>>
; >> beat.v.1.vm.tdl
; beat.v.1.vm.tdl

:begin :instance.

beat_v1 := mv_np_trans_le &
  [ STEM < "beat" >,
    SYNSEM.LOCAL.CONT.KEY _beat_rel ].

:end :instance.


; <<>>
; >> beautiful.a.1.vm.tdl
; beautiful.a.1.vm.tdl

:begin :instance.

beautiful_a1 := intrans_adj_le &
  [ STEM < "beautiful" >,
    SYNSEM.LOCAL.CONT.KEY _beautiful_adj_rel ].

:end :instance.


; <<>>
; >> beautifully.a.1.vm.tdl
; beautifully.a.1.vm.tdl

:begin :instance.

beautifully := vp_adv_post_word_le &
  [ STEM < "beautifully" >,
    SYNSEM.LOCAL.CONT.KEY _beautifully_rel ].

:end :instance.


; <<>>
; >> because.c.1.tdl
; because.c.1.tdl

:begin :instance.

because := subconj_le &
  [ STEM < "because" >,
    SYNSEM.LOCAL.CONT.KEY _because_rel ].

:end :instance.


; <<>>
; >> because.of.p.1.tdl
; because.of.p.1.tdl

:begin :instance.

because_of_p := prep_mle1 &
  [ STEM < "because", "of" >,
    SYNSEM.LOCAL.CONT.KEY _because_of_rel ].

:end :instance.


; <<>>
; >> become.v.1.tdl
; become.v.1.tdl

:begin :instance.

become_v1 := mv_prd_ssr_le &
  [ STEM < "become" >,
    SYNSEM.LOCAL [ CAT.VALENCE [ SUBJ < [ LOCAL.CONT nom-obj ] >,
				 COMPS < [ LOCAL.CAT.HEAD adj ] > ],
		   CONT.KEY _become_rel ] ].

:end :instance.


; <<>>
; >> become.v.2.tdl
; become.v.2.tdl

:begin :instance.

become_v2 := mv_np_non_trans_le &
  [ STEM < "become" >,
    SYNSEM.LOCAL.CONT.KEY _become_id_rel ].

:end :instance.


; <<>>
; >> been.vx.1.tdl
; been.vx.1.tdl

:begin :instance.

be_c_been := be_c_been_le &
  [ STEM < "been" > ].

:end :instance.


; <<>>
; >> been.vx.2.tdl
; been.vx.2.tdl

:begin :instance.

be_id_been := be_id_been_le &
  [ STEM < "been" > ].

:end :instance.


; <<>>
; >> been.vx.3.tdl
; been.vx.3.tdl

:begin :instance.

be_th_cop_been := be_th_cop_been_le &
  [ STEM < "been" > ].

:end :instance.


; <<>>
; >> beer.n.1.vm.tdl
; beer.n.1.vm.tdl

:begin :instance.

beer_n1 := intr_noun_word_le &
  [ STEM < "beer" >,
    SYNSEM.LOCAL.CONT.KEY _beer_rel ].

:end :instance.


; <<>>
; >> beer.n.2.vm.tdl
; beer.n.2.vm.tdl

:begin :instance.

beer_n2 := massn_le &
  [ STEM < "beer" >,
    SYNSEM.LOCAL.CONT.KEY _beer_rel ].

:end :instance.


; <<>>
; >> beetle.n.1.vm.tdl
; beetle.n.1.vm.tdl

:begin :instance.

beetle_n1 := intr_noun_word_le &
  [ STEM < "beetle" >,
    SYNSEM.LOCAL.CONT.KEY _beetle_rel ].

:end :instance.


; <<>>
; >> before.p.1.tdl
; before.p.1.tdl

:begin :instance.

before1 := before_prep_le &
  [ STEM < "before" >,
    SYNSEM.LOCAL.CONT.KEY _before_i_rel ].

:end :instance.


; <<>>
; >> before.p.2.tdl
; before.p.2.tdl

:begin :instance.

before2 := prep_cp_le &
  [ STEM < "before" >,
    SYNSEM.LOCAL.CONT.KEY _before_d_rel ].

:end :instance.


; <<>>
; >> before.p.3.tdl
; before.p.3.tdl

:begin :instance.

before3 := prep_le &
  [ STEM < "before" >,
    SYNSEM.LOCAL.CONT.KEY _before_rel ].

:end :instance.


; <<>>
; >> beforehand.a.1.vm.tdl
; beforehand.a.1.vm.tdl

:begin :instance.

beforehand_adv1 := np_adv_word_le &
  [ STEM < "beforehand" >,
    SYNSEM.LOCAL.CONT.KEY _beforehand_rel ].

:end :instance.


; <<>>
; >> begin.v.1.vm.tdl
; begin.v.1.vm.tdl

:begin :instance.

begin_v1 := mv_unerg_le &
  [ STEM < "begin" >,
    SYNSEM.LOCAL.CONT.KEY _begin_rel ].

:end :instance.


; <<>>
; >> begin.v.2.vm.tdl
; begin.v.2.vm.tdl

:begin :instance.

begin_v2 := mv_subj_equi_le &
  [ STEM < "begin" >,
    SYNSEM.LOCAL.CONT.KEY _begin2_rel ].

:end :instance.


; <<>>
; >> begin.v.3.vm.tdl
; begin.v.3.vm.tdl

:begin :instance.

begin_v3 := mv_subj_equi_prp_le &
  [ STEM < "begin" >,
    SYNSEM.LOCAL.CONT.KEY _begin2_rel ].

:end :instance.


; <<>>
; >> beginning.n.1.tdl
; beginning.n.1.tdl

:begin :instance.

beginning1 := noun_ppof_word_le &
  [ STEM < "beginning" >,
    SYNSEM.LOCAL.CONT.KEY _beginning_rel ].

:end :instance.


; <<>>
; >> begrudge.v.1.tdl
; begrudge.v.1.tdl

:begin :instance.

begrudge1 := mv_ditrans_only_le &
  [ STEM < "begrudge" >,
    SYNSEM.LOCAL.CONT.KEY _begrudge_rel ].

:end :instance.


; <<>>
; >> behind.p.1.tdl
; behind.p.1.tdl

:begin :instance.

behind := reg_prep_le &
  [ STEM < "behind" >,
    SYNSEM.LOCAL.CONT.KEY _behind_rel ].

:end :instance.


; <<>>
; >> being.vx.1.tdl
; being.vx.1.tdl

:begin :instance.

be_c_being := be_c_being_le &
  [ STEM < "being" > ].

:end :instance.


; <<>>
; >> being.vx.2.tdl
; being.vx.2.tdl

:begin :instance.

be_id_being := be_id_being_le &
  [ STEM < "being" > ].

:end :instance.


; <<>>
; >> being.vx.3.tdl
; being.vx.3.tdl

:begin :instance.

be_th_cop_being := be_th_cop_being_le &
  [ STEM < "being" > ].

:end :instance.


; <<>>
; >> believe.in.v.1.tdl
; believe.in.v.1.tdl

:begin :instance.

believe_in_v1 := mv_empty_prep_intrans_le &
  [ STEM < "believe" >,
    SYNSEM.LOCAL.CONT [ KEY _believe_in_rel,
			COMPKEY _in_rel ] ].

:end :instance.


; <<>>
; >> believe.v.1.tdl
; believe.v.1.tdl

:begin :instance.

believe_v1 := mv_np_trans_le &
  [ STEM < "believe" >,
    SYNSEM.LOCAL.CONT.KEY _believe_rel ].

:end :instance.


; <<>>
; >> believe.v.2.tdl
; believe.v.2.tdl

:begin :instance.

believe_v2 := mv_unerg_le &
  [ STEM < "believe" >,
    SYNSEM.LOCAL.CONT.KEY _believe_rel ].

:end :instance.


; <<>>
; >> believe.v.3.tdl
; believe.v.3.tdl

:begin :instance.

believe_v3 := mv_cp_non_trans_le &
  [ STEM < "believe" >,
    SYNSEM.LOCAL.CONT.KEY _believe_rel ].

:end :instance.


; <<>>
; >> belong.v.1.vm.tdl
; belong.v.1.vm.tdl

:begin :instance.

belong_v1 := mv_empty_prep_intrans_le &
  [ STEM < "belong" >,
    SYNSEM.LOCAL.CONT [ KEY _belong_to_rel,
			COMPKEY _to_rel ] ].

:end :instance.


; <<>>
; >> below.p.1.tdl
; below.p.1.tdl

:begin :instance.

below := reg_prep_le &
  [ STEM < "below" >,
    SYNSEM.LOCAL.CONT.KEY _below_rel ].

:end :instance.


; <<>>
; >> benefit.v.1.vm.tdl
; benefit.v.1.vm.tdl

:begin :instance.

benefit_v1 := mv_np_trans_le &
  [ STEM < "benefit" >,
    SYNSEM.LOCAL.CONT.KEY _benefit_rel ].

:end :instance.


; <<>>
; >> berlin.n.1.vm.tdl
; berlin.n.1.vm.tdl

:begin :instance.

Berlin_n1 := proper_le &
  [ STEM < "berlin" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'Berlin ].

:end :instance.


; <<>>
; >> beside.p.1.tdl
; beside.p.1.tdl

:begin :instance.

beside := reg_prep_le &
  [ STEM < "beside" >,
    SYNSEM.LOCAL.CONT.KEY _beside_rel ].

:end :instance.


; <<>>
; >> besides.a.1.vm.tdl
; besides.a.1.vm.tdl

:begin :instance.

besides_adv1 := adv_post_word_le &
  [ STEM < "besides" >,
    SYNSEM.LOCAL.CONT.KEY _besides_adv_rel ].

:end :instance.


; <<>>
; >> besides.p.1.tdl
; besides.p.1.tdl

:begin :instance.

besides := prep_le &
  [ STEM < "besides" >,
    SYNSEM.LOCAL.CONT.KEY _besides_rel ].

:end :instance.


; <<>>
; >> best.a.1.vm.tdl
; best.a.1.vm.tdl

:begin :instance.

best_a1 := intrans_adj_le &
  [ STEM < "best" >,
    SYNSEM.LOCAL.CONT.KEY _best_rel ].

:end :instance.


; <<>>
; >> bet.v.1.tdl
; bet.v.1.tdl

:begin :instance.

bet_v1 := mv_np_np_cp_le &
  [ STEM < "bet" >,
    SYNSEM.LOCAL.CONT.KEY _bet_v_rel ].

:end :instance.


; <<>>
; >> better.a.1.vm.tdl
; better.a.1.vm.tdl

:begin :instance.

better_a1 := intrans_adj_le &
  [ STEM < "better" >,
    SYNSEM.LOCAL.CONT.KEY _better_rel ].

:end :instance.


; <<>>
; >> between.p.1.tdl
; between.p.1.tdl

:begin :instance.

between_temp := before_prep_le &
  [ STEM < "between" >,
    SYNSEM.LOCAL [ CAT.VALENCE.COMPS < [ LOCAL.CONT.INDEX.PNG.PN 3pl* ], ...>,
		   CONT.KEY _between_rel ] ].

:end :instance.


; <<>>
; >> between.p.2.tdl
; between.p.2.tdl

:begin :instance.

between := prep_le &
  [ STEM < "between" >,
    SYNSEM.LOCAL.CONT.KEY _between_rel ].

:end :instance.


; <<>>
; >> beyond.p.1.tdl
; beyond.p.1.tdl

:begin :instance.

beyond := reg_prep_le &
  [ STEM < "beyond" >,
    SYNSEM.LOCAL.CONT.KEY _beyond_rel ].

:end :instance.


; <<>>
; >> bielefeld.n.1.vm.tdl
; bielefeld.n.1.vm.tdl

:begin :instance.

Bielefeld_n1 := proper_le &
  [ STEM < "bielefeld" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'Bielefeld ].

:end :instance.


; <<>>
; >> big.a.1.vm.tdl
; big.a.1.vm.tdl

:begin :instance.

big_a1 := intrans_adj_le &
  [ STEM < "big" >,
    SYNSEM.LOCAL.CONT.KEY _big_rel ].

:end :instance.


; <<>>
; >> bigger.a.1.vm.tdl
; bigger.a.1.vm.tdl

:begin :instance.

bigger_a1 := intrans_adj_le &
  [ STEM < "bigger" >,
    SYNSEM.LOCAL.CONT.KEY _bigger_rel ].

:end :instance.


; <<>>
; >> bind.v.1.vm.tdl
; bind.v.1.vm.tdl

:begin :instance.

bind_v1 := mv_np_trans_le &
  [ STEM < "bind" >,
    SYNSEM.LOCAL.CONT.KEY _bind_rel ].

:end :instance.


; <<>>
; >> birthday.n.1.vm.tdl
; birthday.n.1.vm.tdl

:begin :instance.

birthday_n1 := intr_noun_word_le &
  [ STEM < "birthday" >,
    SYNSEM.LOCAL.CONT.KEY _birthday_rel ].

:end :instance.


; <<>>
; >> bistro.n.1.vm.tdl
; bistro.n.1.vm.tdl

:begin :instance.

bistro_n1 := intr_noun_word_le &
  [ STEM < "bistro" >,
    SYNSEM.LOCAL.CONT.KEY _bistro_rel ].

:end :instance.


; <<>>
; >> blank.a.1.vm.tdl
; blank.a.1.vm.tdl

:begin :instance.

blank_a1 := intrans_adj_le &
  [ STEM < "blank" >,
    SYNSEM.LOCAL.CONT.KEY _blank_rel ].

:end :instance.


; <<>>
; >> block.n.1.vm.tdl
; block.n.1.vm.tdl

:begin :instance.

block_n1 := intr_noun_word_le &
  [ STEM < "block" >,
    SYNSEM.LOCAL.CONT.KEY _block_rel ].

:end :instance.


; <<>>
; >> block.v.1.vm.tdl
; block.v.1.vm.tdl

:begin :instance.

block_v1 := mv_np_trans_le &
  [ STEM < "block" >,
    SYNSEM.LOCAL.CONT.KEY _block_v_rel ].

:end :instance.


; <<>>
; >> bochum.n.1.vm.tdl
; bochum.n.1.vm.tdl

:begin :instance.

Bochum_n1 := proper_le &
  [ STEM < "bochum" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'Bochum ].

:end :instance.


; <<>>
; >> bonn.n.1.vm.tdl
; bonn.n.1.vm.tdl

:begin :instance.

Bonn_n1 := proper_le &
  [ STEM < "bonn" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'Bonn ].

:end :instance.


; <<>>
; >> book.n.1.tdl
; book.n.1.tdl

:begin :instance.

book1 := intr_noun_word_le &
  [ STEM < "book" >,
    SYNSEM.LOCAL.CONT.KEY _book_n_rel ].

:end :instance.


; <<>>
; >> book.up.v.1.vm.tdl
; book.up.v.1.vm.tdl

:begin :instance.

book_up_v1 := mv_particle_np_le &
  [ STEM < "book" >,
    SYNSEM.LOCAL.CONT [ KEY _book_up_rel,
			COMPKEY _up_rel ] ].

:end :instance.


; <<>>
; >> book.v.1.vm.tdl
; book.v.1.vm.tdl

:begin :instance.

book_v1 := mv_ditrans_only_le &
  [ STEM < "book" >,
    SYNSEM.LOCAL.CONT.KEY _book_v_rel ].

:end :instance.


; <<>>
; >> booked.a.1.vm.tdl
; booked.a.1.vm.tdl

:begin :instance.

booked_a1 := intrans_adj_le &
  [ STEM < "booked" >,
    SYNSEM.LOCAL.CONT.KEY _booked_rel ].

:end :instance.


; <<>>
; >> bookcase.n.1.tdl
; bookcase.n.1.tdl

:begin :instance.

bookcase_n1 := intr_noun_word_le &
  [ STEM < "bookcase" >,
    SYNSEM.LOCAL.CONT.KEY _bookcase_rel ].

:end :instance.


; <<>>
; >> born.a.1.vm.tdl
; born.a.1.vm.tdl

:begin :instance.

born_a1 := intrans_adj_le &
  [ STEM < "born" >,
    SYNSEM.LOCAL.CONT.KEY _born_adj_rel ].

:end :instance.


; <<>>
; >> botanical.a.1.vm.tdl
; botanical.a.1.vm.tdl

:begin :instance.

botanical_a1 := intrans_adj_le &
  [ STEM < "botanical" >,
    SYNSEM.LOCAL.CONT.KEY _botanical_adj_rel ].

:end :instance.



; <<>>
; >> both.c.1.tdl
; both.c.1.tdl

:begin :instance.

both := pdet_pl_le &
  [ STEM < "both" >,
    SYNSEM.LOCAL.CONT.KEY _both_rel ].

:end :instance.


; <<>>
; >> both.c.2.tdl
; both.c.2.tdl

:begin :instance.

both_conj := coord_a_le &
  [ STEM < "both" >,
    SYNSEM.LOCAL.CONJ both ].

:end :instance.


; <<>>
; >> bother.v.1.tdl
; bother.v.1.tdl

:begin :instance.

bother1 := mv_np_trans_le &
  [ STEM < "bother" >,
    SYNSEM.LOCAL.CONT.KEY _bother_rel ].

:end :instance.


; <<>>
; >> branch.n.1.vm.tdl
; branch.n.1.vm.tdl

:begin :instance.

branch_n1 := intr_noun_word_le &
  [ STEM < "branch" >,
    SYNSEM.LOCAL.CONT.KEY _branch_rel ].

:end :instance.


; <<>>
; >> braunschweig.n.1.vm.tdl
; braunschweig.n.1.vm.tdl

:begin :instance.

Braunschweig_n1 := proper_le &
  [ STEM < "braunschweig" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'Braunschweig ].

:end :instance.


; <<>>
; >> break.n.1.vm.tdl
; break.n.1.vm.tdl

:begin :instance.

break_n1 := intr_noun_word_le &
  [ STEM < "break" >,
    SYNSEM.LOCAL.CONT.KEY _break_n_rel ].

:end :instance.


; <<>>
; >> break.v.1.vm.tdl
; break.v.1.vm.tdl

:begin :instance.

break_v1 := mv_np_trans_le &
  [ STEM < "break" >,
    SYNSEM.LOCAL.CONT.KEY _break_rel ].

:end :instance.


; <<>>
; >> break.v.2.vm.tdl
; break.v.2.vm.tdl

:begin :instance.

break_v2 := mv_unacc_le &
  [ STEM < "break" >,
    SYNSEM.LOCAL.CONT.KEY _break_und_rel ].

:end :instance.


; <<>>
; >> breakfast.n.1.tdl
; breakfast.n.1.tdl

:begin :instance.

breakfast_time_n1 := hour_word_le &
  [ STEM < "breakfast" >,
    SYNSEM.LOCAL.CONT.KEY _breakfast_time_rel ].

:end :instance.


; <<>>
; >> breakfast.n.1.vm.tdl
; breakfast.n.1.vm.tdl

:begin :instance.

breakfast_n1 := massn_le &
  [ STEM < "breakfast" >,
    SYNSEM.LOCAL.CONT.KEY _breakfast_rel ].

:end :instance.


; <<>>
; >> breakfast.v.1.vm.tdl
; breakfast.v.1.vm.tdl

:begin :instance.

breakfast_v1 := mv_unerg_le &
  [ STEM < "breakfast" >,
    SYNSEM.LOCAL.CONT.KEY _breakfast_v_rel ].

:end :instance.


; <<>>
; >> breeze.n.1.vm.tdl
; breeze.n.1.vm.tdl

:begin :instance.

breeze_n1 := intr_noun_word_le &
  [ STEM < "breeze" >,
    SYNSEM.LOCAL.CONT.KEY _breeze_rel ].

:end :instance.


; <<>>
; >> brief.a.1.vm.tdl
; brief.a.1.vm.tdl

:begin :instance.

brief_a1 := intrans_adj_le &
  [ STEM < "brief" >,
    SYNSEM.LOCAL.CONT.KEY _brief_rel ].

:end :instance.


; <<>>
; >> briefly.a.1.vm.tdl
; briefly.a.1.vm.tdl

:begin :instance.

briefly_adv1 := vp_adv_word_le &
  [ STEM < "briefly" >,
    SYNSEM.LOCAL.CONT.KEY _briefly_rel ].

:end :instance.


; <<>>
; >> bring.forth.v.1.tdl
; bring.forth.v.1.tdl

:begin :instance.

bring_forth_v1 := mv_particle_np_le &
  [ STEM < "bring" >,
    SYNSEM.LOCAL.CONT [ KEY _bring_forth_rel,
			COMPKEY _forth_rel ] ].

:end :instance.


; <<>>
; >> bring.forward.v.1.vm.tdl
; bring.forward.v.1.vm.tdl

:begin :instance.

bring_forward_v1 := mv_particle_np_le &
  [ STEM < "bring" >,
    SYNSEM.LOCAL.CONT [ KEY _bring_forward_rel,
			COMPKEY _forward_rel ] ].

:end :instance.


; <<>>
; >> bring.off.v.1.vm.tdl
; bring.off.v.1.vm.tdl

:begin :instance.

bring_off_v1 := mv_particle_np_le &
  [ STEM < "bring" >,
    SYNSEM.LOCAL.CONT [ KEY _bring_off_rel,
			COMPKEY _off_rel ] ].

:end :instance.


; <<>>
; >> bring.to.v.1.tdl
; bring.to.v.1.tdl

:begin :instance.

bring_to_v1 := mv_np_particle_only_le &
  [ STEM < "bring" >,
    SYNSEM.LOCAL.CONT [ KEY _bring_to_rel,
			COMPKEY _to_rel ] ].

:end :instance.


; <<>>
; >> bring.v.1.tdl
; bring.v.1.tdl

:begin :instance.

bring_v1 := mv_prep*_trans_le &
  [ STEM < "bring" >,
    SYNSEM.LOCAL.CONT [ KEY _bring_rel,
			OCOMPKEY dir_rel ] ].

:end :instance.


; <<>>
; >> bring.v.2.tdl
; bring.v.2.tdl

:begin :instance.

bring_v2 := mv_ditrans_only_le &
  [ STEM < "bring" >,
    SYNSEM.LOCAL.CONT.KEY _bring_rel ].

:end :instance.


; <<>>
; >> brown.n.1.vm.tdl
; brown.n.1.vm.tdl

:begin :instance.

Brown_n1 := proper_le &
  [ STEM < "brown" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'Brown ].

:end :instance.


; <<>>
; >> browne.n.1.tdl
; browne.n.1.tdl

:begin :instance.

browne := proper_le &
  [ STEM < "browne" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'browne ].

:end :instance.


; <<>>
; >> brunswick.n.1.vm.tdl
; brunswick.n.1.vm.tdl

:begin :instance.

Brunswick_n1 := proper_le &
  [ STEM < "brunswick" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'Brunswick ].

:end :instance.


; <<>>
; >> brussels.n.1.vm.tdl
; brussels.n.1.vm.tdl

:begin :instance.

Brussels_n1 := proper_le &
  [ STEM < "brussels" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'Brussels ].

:end :instance.


; <<>>
; >> building.n.1.tdl
; building.n.1.tdl

:begin :instance.

building_n1 := intr_noun_word_le &
  [ STEM < "building" >,
    SYNSEM.LOCAL.CONT.KEY _building_rel ].

:end :instance.


; <<>>
; >> bumblebee.n.1.vm.tdl
; bumblebee.n.1.vm.tdl

:begin :instance.

bumblebee_n1 := intr_noun_word_le &
  [ STEM < "bumblebee" >,
    SYNSEM.LOCAL.CONT.KEY _bumblebee_rel ].

:end :instance.


; <<>>
; >> business.n.1.vm.tdl
; business.n.1.vm.tdl

:begin :instance.

business_n1 := intr_noun_word_le &
  [ STEM < "business" >,
    SYNSEM.LOCAL.CONT.KEY _business_rel ].

:end :instance.


; <<>>
; >> busy.a.1.vm.tdl
; busy.a.1.vm.tdl

:begin :instance.

busy_a1 := intrans_adj_le &
  [ STEM < "busy" >,
    SYNSEM.LOCAL.CONT.KEY _busy_adj_rel ].

:end :instance.


; <<>>
; >> but.c.1.tdl
; but.c.1.tdl

:begin :instance.

but_conj := coord_c_le &
  [ STEM < "but" >,
    SYNSEM.LOCAL.CONJ complex-conj & [ CHEAD [ LEFT < cnil >,
					       RELTN _but_rel ] ] ].

:end :instance.


; <<>>
; >> but.a.1.vm.tdl
; but.a.1.vm.tdl

:begin :instance.

but_adv1 := adv_pre_word_nospec_le &
  [ STEM < "but" >,
    SYNSEM.LOCAL.CONT.KEY but_scop_rel ].

:end :instance.


; <<>>
; >> buy.v.1.vm.tdl
; buy.v.1.vm.tdl

:begin :instance.

buy_v1 := mv_np_trans_le &
  [ STEM < "buy" >,
    SYNSEM.LOCAL.CONT.KEY _buy_rel ].

:end :instance.


; <<>>
; >> by.means.of.p.1.tdl
; by.means.of.p.1.tdl
; MULTIKEY < "means" >

:begin :instance.

by_means_of := prep_3mle2 &
  [ STEM < "by", "means", "of" >,
    SYNSEM.LOCAL.CONT.KEY _by_means_of_rel ].

:end :instance.


; <<>>
; >> by.p.1.tdl
; by.p.1.tdl

:begin :instance.

by_temp := before_prep_le &
  [ STEM < "by" >,
    SYNSEM.LOCAL.CONT.KEY _by_temp_rel ].

:end :instance.


; <<>>
; >> by.p.2.tdl
; by.p.2.tdl

:begin :instance.

by_pass_p := prep_nomod_le &
  [ STEM < "by" >,
    SYNSEM.LOCAL.CONT.KEY _by_pass_rel ].

:end :instance.


; <<>>
; >> by.p.3.tdl
; by.p.3.tdl

:begin :instance.

by_p := prep_le &
  [ STEM < "by" >,
    SYNSEM.LOCAL.CONT.KEY _by_rel ].

:end :instance.


; <<>>
; >> by.the.way.c.1.vm.tdl
; by.the.way.c.1.vm.tdl
; MULTIKEY < "way" >

:begin :instance.

by_the_way_root := disc_adv_3mle3 &
  [ STEM < "by", "the", "way" >,
    SYNSEM.LOCAL.CONT.KEY.EXCL 'by_the_way ].

:end :instance.

; <<>>
; >> by.the.hour.a.1.vm.tdl
; by.the.hour.a.1.vm.tdl
; MULTIKEY < "hour" >

:begin :instance.

by_the_hour := vp_adv_post_word_3mle3 &
  [ STEM < "by", "the", "hour" >,
    SYNSEM.LOCAL.CONT.KEY _by_the_hour_rel ].

:end :instance.


; <<>>
; >> bye.bye.c.1.vm.tdl
; bye.bye.c.1.vm.tdl

:begin :instance.

bye_bye_root := disc_adv_le &
  [ STEM < "bye-bye" >,
    SYNSEM.LOCAL.CONT.KEY.EXCL 'bye_bye ].

:end :instance.


; <<>>
; >> cafe.n.1.vm.tdl
; cafe.n.1.vm.tdl

:begin :instance.

cafe_n1 := intr_noun_word_le &
  [ STEM < "cafe" >,
    SYNSEM.LOCAL.CONT.KEY _cafe_rel ].

:end :instance.


; <<>>
; >> cafeteria.n.1.vm.tdl
; cafeteria.n.1.vm.tdl

:begin :instance.

cafeteria_n1 := intr_noun_word_le &
  [ STEM < "cafeteria" >,
    SYNSEM.LOCAL.CONT.KEY _cafeteria_rel ].

:end :instance.


; <<>>
; >> calculate.v.1.vm.tdl
; calculate.v.1.vm.tdl

:begin :instance.

calculate_v1 := mv_np_trans_le &
  [ STEM < "calculate" >,
    SYNSEM.LOCAL.CONT.KEY _calculate_rel ].

:end :instance.


; <<>>
; >> calculate.v.2.vm.tdl
; calculate.v.2.vm.tdl

:begin :instance.

calculate_v2 := mv_cp_non_trans_le &
  [ STEM < "calculate" >,
    SYNSEM.LOCAL.CONT.KEY _calculate_rel ].

:end :instance.


; <<>>
; >> calendar.n.1.vm.tdl
; calendar.n.1.vm.tdl

:begin :instance.

calendar_n1 := intr_noun_word_le &
  [ STEM < "calendar" >,
    SYNSEM.LOCAL.CONT.KEY _calendar_rel ].

:end :instance.


; <<>>
; >> call.back.v.1.vm.tdl
; call.back.v.1.vm.tdl

:begin :instance.

call_back_v1 := mv_particle_np_le &
  [ STEM < "call" >,
    SYNSEM.LOCAL.CONT [ KEY _call_back_rel,
			COMPKEY _back_adv_rel ] ].

:end :instance.


; <<>>
; >> call.off.v.1.vm.tdl
; call.off.v.1.vm.tdl

:begin :instance.

call_off_v1 := mv_particle_np_le &
  [ STEM < "call" >,
    SYNSEM.LOCAL.CONT [ KEY _call_off_rel,
			COMPKEY _off_rel ] ].

:end :instance.


; <<>>
; >> call.up.v.1.tdl
; call.up.v.1.tdl

:begin :instance.

call_up_v1 := mv_particle_np_le &
  [ STEM < "call" >,
    SYNSEM.LOCAL.CONT [ KEY _call_up_rel,
			COMPKEY _up_rel ] ].

:end :instance.


; <<>>
; >> call.v.1.tdl
; call.v.1.tdl

:begin :instance.

call_v1 := mv_np*_trans_le &
  [ STEM < "call" >,
    SYNSEM.LOCAL.CONT.KEY _call_rel ].

:end :instance.


; <<>>
; >> call.n.1.vm.tdl
; call.n.1.vm.tdl

:begin :instance.

call_n1 := intr_noun_word_le &
  [ STEM < "call" >,
    SYNSEM.LOCAL.CONT.KEY _call_n_rel ].

:end :instance.


; <<>>
; >> calm.a.1.vm.tdl
; calm.a.1.vm.tdl

:begin :instance.

calm_a1 := intrans_adj_le &
  [ STEM < "calm" >,
    SYNSEM.LOCAL.CONT.KEY _calm_rel ].

:end :instance.


; <<>>
; >> calm.down.v.1.tdl
; calm.down.v.1.tdl

:begin :instance.

calm_down_v1 := mv_particle_np_le &
  [ STEM < "calm" >,
    SYNSEM.LOCAL.CONT [ KEY _calm_down_rel,
			COMPKEY _down_rel ] ].

:end :instance.


; <<>>
; >> calm.v.1.tdl
; calm.v.1.tdl

:begin :instance.

calm_v1 := mv_np_trans_le &
  [ STEM < "calm" >,
    SYNSEM.LOCAL.CONT.KEY _calm_v_rel ].

:end :instance.


; <<>>
; >> can.vx.1.tdl
; can.vx.1.tdl

:begin :instance.

can_aux_pos := modal_pos_le & 
  [ STEM < "can" >,
    SYNSEM.LOCAL [ CAT.HEAD.TENSE present*,
                   CONT.KEY _can_rel ] ].

:end :instance.


; <<>>
; >> cant.vx.1.tdl
; cant.vx.1.tdl

:begin :instance.

can_aux_neg := modal_neg_mle1 &
  [ STEM < "can", "t" >,
    SYNSEM.LOCAL [ CAT.HEAD.TENSE present*,
                   CONT.KEY _can_rel ] ].

:end :instance.


; <<>>
; >> canaria.n.1.vm.tdl
; canaria.n.1.vm.tdl

:begin :instance.

Canaria_n1 := proper_le &
  [ STEM < "canaria" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'Canaria ].

:end :instance.


; <<>>
; >> cancel.v.1.vm.tdl
; cancel.v.1.vm.tdl

:begin :instance.

cancel_v1 := mv_np_trans_le &
  [ STEM < "cancel" >,
    SYNSEM.LOCAL.CONT.KEY _cancel_rel ].

:end :instance.


; <<>>
; >> cane.n.1.vm.tdl
; cane.n.1.vm.tdl

:begin :instance.

cane_n1 := intr_noun_word_le &
  [ STEM < "cane" >,
    SYNSEM.LOCAL.CONT.KEY _cane_rel ].

:end :instance.


; <<>>
; >> cannot.vx.1.tdl
; cannot.vx.1.tdl

:begin :instance.

can_aux_neg2 := modal_neg_le &
  [ STEM < "cannot" >,
    SYNSEM.LOCAL [ CAT.HEAD.TENSE present*,
                   CONT.KEY _can_rel ] ].

:end :instance.


; <<>>
; >> canteen.n.1.vm.tdl
; canteen.n.1.vm.tdl

:begin :instance.

canteen_n1 := intr_noun_word_le &
  [ STEM < "canteen" >,
    SYNSEM.LOCAL.CONT.KEY _canteen_rel ].

:end :instance.


; <<>>
; >> capital.a.1.vm.tdl
; capital.a.1.vm.tdl

:begin :instance.

capital_a1 := intrans_adj_le &
  [ STEM < "capital" >,
    SYNSEM.LOCAL.CONT.KEY _capital_rel ].

:end :instance.


; <<>>
; >> capital.n.1.vm.tdl
; capital.n.1.vm.tdl

:begin :instance.

capital_n1 := intr_noun_word_le &
  [ STEM < "capital" >,
    SYNSEM.LOCAL.CONT.KEY _capital_n_rel ].

:end :instance.


; <<>>
; >> car.n.1.vm.tdl
; car.n.1.vm.tdl

:begin :instance.

car_n1 := intr_noun_word_le &
  [ STEM < "car" >,
    SYNSEM.LOCAL.CONT.KEY _car_rel ].

:end :instance.


; <<>>
; >> card.n.1.vm.tdl
; card.n.1.vm.tdl

:begin :instance.

card_n1 := intr_noun_word_le &
  [ STEM < "card" >,
    SYNSEM.LOCAL.CONT.KEY _card_rel ].

:end :instance.


; <<>>
; >> care.n.1.vm.tdl
; care.n.1.vm.tdl

:begin :instance.

care_n1 := massn_le &
  [ STEM < "care" >,
    SYNSEM.LOCAL.CONT.KEY _care_n_rel ].

:end :instance.


; <<>>
; >> care.v.1.vm.tdl
; care.v.1.vm.tdl

:begin :instance.

care_v1 := mv_unerg_le &
  [ STEM < "care" >,
    SYNSEM.LOCAL.CONT.KEY _care_rel ].

:end :instance.


; <<>>
; >> careful.a.1.vm.tdl
; careful.a.1.vm.tdl

:begin :instance.

careful_a1 := intrans_adj_le &
  [ STEM < "careful" >,
    SYNSEM.LOCAL.CONT.KEY _careful_rel ].

:end :instance.


; <<>>
; >> caretaker.n.1.vm.tdl
; caretaker.n.1.vm.tdl

:begin :instance.

caretaker_n1 := intr_noun_word_le &
  [ STEM < "caretaker" >,
    SYNSEM.LOCAL.CONT.KEY _caretaker_rel ].

:end :instance.


; <<>>
; >> carnival.n.1.vm.tdl
; carnival.n.1.vm.tdl

:begin :instance.

carnival_n1 := intr_noun_word_le &
  [ STEM < "carnival" >,
    SYNSEM.LOCAL.CONT.KEY _carnival_rel ].

:end :instance.


; <<>>
; >> carnival.n.2.tdl
; carnival.n.2.tdl

:begin :instance.

carnival := holiday_word_le &
  [ STEM < "carnival" >,
    SYNSEM.LOCAL.CONT.KEY.DAY 'carnival ].

:end :instance.


; <<>>
; >> carry.on.v.1.vm.tdl
; carry.on.v.1.vm.tdl

:begin :instance.

carry_on_v1 := mv_particle_np_le &
  [ STEM < "carry" >,
    SYNSEM.LOCAL.CONT [ KEY _carry_on2_rel,
			COMPKEY _on_rel ] ].

:end :instance.


; <<>>
; >> carry.on.v.2.vm.tdl
; carry.on.v.2.vm.tdl

:begin :instance.

carry_on_v2 := mv_particle_le &
  [ STEM < "carry" >,
    SYNSEM.LOCAL.CONT [ KEY _carry_on_rel,
			COMPKEY _on_rel ] ].

:end :instance.


; <<>>
; >> carry.out.v.1.vm.tdl
; carry.out.v.1.vm.tdl

:begin :instance.

carry_out_v1 := mv_particle_np_le &
  [ STEM < "carry" >,
    SYNSEM.LOCAL.CONT [ KEY _carry_out_rel,
			COMPKEY _out_rel ] ].

:end :instance.


; <<>>
; >> carry.v.1.tdl
; carry.v.1.tdl

:begin :instance.

carry_v1 := mv_prep*_trans_le &
  [ STEM < "carry" >,
    SYNSEM.LOCAL.CONT [ KEY _carry_rel,
			OCOMPKEY dir_rel ] ].

:end :instance.


; <<>>
; >> case.n.1.vm.tdl
; case.n.1.vm.tdl

:begin :instance.

case_n1 := intr_noun_word_le &
  [ STEM < "case" >,
    SYNSEM.LOCAL.CONT.KEY _case_rel ].

:end :instance.


; <<>>
; >> casual.a.1.vm.tdl
; casual.a.1.vm.tdl

:begin :instance.

casual_a1 := intrans_adj_le &
  [ STEM < "casual" >,
    SYNSEM.LOCAL.CONT.KEY _casual_rel ].

:end :instance.


; <<>>
; >> catch.v.1.vm.tdl
; catch.v.1.vm.tdl

:begin :instance.

catch_v1 := mv_np_trans_le &
  [ STEM < "catch" >,
    SYNSEM.LOCAL.CONT.KEY _catch_rel ].

:end :instance.


; <<>>
; >> cause.v.1.vm.tdl
; cause.v.1.vm.tdl

:begin :instance.

cause_v1 := mv_obj_equi_le &
  [ STEM < "cause" >,
    SYNSEM.LOCAL.CONT.KEY _cause_rel ].

:end :instance.


; <<>>
; >> cease.v.3.tdl
; cease.v.3.tdl

:begin :instance.

cease_v3 := mv_subj_equi_le &
  [ STEM < "cease" >,
    SYNSEM.LOCAL.CONT.KEY _cease_to_rel ].

:end :instance.


; <<>>
; >> cease.v.4.tdl
; cease.v.4.tdl

:begin :instance.

cease_v4 := mv_subj_equi_prp_le &
  [ STEM < "cease" >,
    SYNSEM.LOCAL.CONT.KEY _cease_to_rel ].

:end :instance.


; <<>>
; >> cebit.n.1.vm.tdl
; cebit.n.1.vm.tdl

:begin :instance.

CeBIT_n1 := proper_le &
  [ STEM < "cebit" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'CeBIT ].

:end :instance.


; <<>>
; >> celebrate.v.1.vm.tdl
; celebrate.v.1.vm.tdl

:begin :instance.

celebrate_v1 := mv_np*_trans_le &
  [ STEM < "celebrate" >,
    SYNSEM.LOCAL.CONT.KEY _celebrate_rel ].

:end :instance.


; <<>>
; >> center.n.1.vm.tdl
; center.n.1.vm.tdl

:begin :instance.

center_n1 := intr_noun_word_le &
  [ STEM < "center" >,
    SYNSEM.LOCAL.CONT.KEY _center_rel ].

:end :instance.


; <<>>
; >> certain.a.1.vm.tdl
; certain.a.1.vm.tdl

:begin :instance.

certain_a1 := intrans_adj_le &
  [ STEM < "certain" >,
    SYNSEM.LOCAL.CONT.KEY _certain_adj_rel ].

:end :instance.


; <<>>
; >> certainly.a.1.vm.tdl
; certainly.a.1.vm.tdl

:begin :instance.

certainly_adv1 := adv_pre_word_le &
  [ STEM < "certainly" >,
    SYNSEM.LOCAL.CONT.KEY _certainly_rel ].

:end :instance.


; <<>>
; >> chair.n.1.tdl
; chair.n.1.tdl

:begin :instance.

chair1 := intr_noun_word_le &
  [ STEM < "chair" >,
    SYNSEM.LOCAL.CONT.KEY _chair_rel ].

:end :instance.


; <<>>
; >> chance.n.1.vm.tdl
; chance.n.1.vm.tdl

:begin :instance.

chance_n1 := intr_noun_word_le &
  [ STEM < "chance" >,
    SYNSEM.LOCAL.CONT.KEY _chance_rel ].

:end :instance.


; <<>>
; >> change.n.1.vm.tdl
; change.n.1.vm.tdl

:begin :instance.

change_n1 := massn_le &
  [ STEM < "change" >,
    SYNSEM.LOCAL.CONT.KEY _change_n_rel ].

:end :instance.


; <<>>
; >> change.v.1.vm.tdl
; change.v.1.vm.tdl

:begin :instance.

change_v1 := mv_np_trans_le &
  [ STEM < "change" >,
    SYNSEM.LOCAL.CONT.KEY _change_v_rel ].

:end :instance.


; <<>>
; >> change.v.2.vm.tdl
; change.v.2.vm.tdl

:begin :instance.

change_v2 := mv_unacc_le &
  [ STEM < "change" >,
    SYNSEM.LOCAL.CONT.KEY _change_rel ].

:end :instance.


; <<>>
; >> chaos.n.1.vm.tdl
; chaos.n.1.vm.tdl

:begin :instance.

chaos_n1 := massn_le &
  [ STEM < "chaos" >,
    SYNSEM.LOCAL.CONT.KEY _chaos_rel ].

:end :instance.


; <<>>
; >> charge.n.1.vm.tdl
; charge.n.1.vm.tdl

:begin :instance.

charge_n1 := massn_le &
  [ STEM < "charge" >,
    SYNSEM.LOCAL.CONT.KEY _charge_n_rel ].

:end :instance.


; <<>>
; >> charge.v.1.vm.tdl
; charge.v.1.vm.tdl

:begin :instance.

charge_v1 := mv_prep*_trans_le &
  [ STEM < "charge" >,
    SYNSEM.LOCAL.CONT [ KEY _charge_rel,
			OCOMPKEY _to_rel ] ].

:end :instance.


; <<>>
; >> check.out.v.1.vm.tdl
; check.out.v.1.vm.tdl

:begin :instance.

check_out_v1 := mv_particle_np_le &
  [ STEM < "check" >,
    SYNSEM.LOCAL.CONT [ KEY _check_out_rel,
			COMPKEY _out_rel ] ].

:end :instance.


; <<>>
; >> check.v.1.vm.tdl
; check.v.1.vm.tdl

:begin :instance.

check_v1 := mv_np_trans_le &
  [ STEM < "check" >,
    SYNSEM.LOCAL.CONT.KEY _check_rel ].

:end :instance.


; <<>>
; >> cheese.n.1.vm.tdl
; cheese.n.1.vm.tdl

:begin :instance.

cheese_n1 := massn_le &
  [ STEM < "cheese" >,
    SYNSEM.LOCAL.CONT.KEY _cheese_rel ].

:end :instance.


; <<>>
; >> chiang.n.1.tdl
; chiang.n.1.tdl

:begin :instance.

chiang := proper_le &
  [ STEM < "chiang" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'chiang ].

:end :instance.


; <<>>
; >> child.n.1.vm.tdl
; child.n.1.vm.tdl

:begin :instance.

child_n1 := intr_noun_word_le &
  [ STEM < "child" >,
    SYNSEM.LOCAL.CONT.KEY _child_rel ].

:end :instance.


; <<>>
; >> chinese.a.1.vm.tdl
; chinese.a.1.vm.tdl

:begin :instance.

chinese_a1 := intrans_adj_le &
  [ STEM < "chinese" >,
    SYNSEM.LOCAL.CONT.KEY _chinese_rel ].

:end :instance.


; <<>>
; >> chinese.n.1.vm.tdl
; chinese.n.1.vm.tdl

:begin :instance.

Chinese_n1 := proper_le &
  [ STEM < "chinese" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'Chinese ].

:end :instance.


; <<>>
; >> choice.n.1.vm.tdl
; choice.n.1.vm.tdl

:begin :instance.

choice_n1 := intr_noun_word_le &
  [ STEM < "choice" >,
    SYNSEM.LOCAL.CONT.KEY _choice_rel ].

:end :instance.


; <<>>
; >> choose.v.1.vm.tdl
; choose.v.1.vm.tdl

:begin :instance.

choose_v1 := mv_np*_prep*_trans_le &
  [ STEM < "choose" >,
    SYNSEM.LOCAL.CONT [ KEY _choose_rel,
			OCOMPKEY _from_rel ] ].

:end :instance.


; <<>>
; >> christi.n.1.vm.tdl
; christi.n.1.vm.tdl

:begin :instance.

Christi_n1 := proper_le &
  [ STEM < "christi" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'Christi ].

:end :instance.


; <<>>
; >> christian.a.1.vm.tdl
; christian.a.1.vm.tdl

:begin :instance.

christian_a1 := intrans_adj_le &
  [ STEM < "christian" >,
    SYNSEM.LOCAL.CONT.KEY _christian_rel ].

:end :instance.


; <<>>
; >> christmas.day.n.1.tdl
; christmas.day.n.1.tdl

:begin :instance.

christmas_day := holiday_word_mle1 &
  [ STEM < "christmas", "day" >,
    SYNSEM.LOCAL.CONT.KEY.DAY 'christmas_day ].

:end :instance.


; <<>>
; >> christmas.eve.n.1.tdl
; christmas.eve.n.1.tdl

:begin :instance.

christmas_eve := holiday_word_mle1 &
  [ STEM < "christmas", "eve" >,
    SYNSEM.LOCAL.CONT.KEY.DAY 'christmas_eve ].

:end :instance.


; <<>>
; >> christmas.n.1.tdl
; christmas.n.1.tdl

:begin :instance.

christmas := season_word_le &
  [ STEM < "christmas" >,
    SYNSEM.LOCAL.CONT.KEY.SEASON 'christmas ].

:end :instance.


; <<>>
; >> circumstance.n.1.vm.tdl
; circumstance.n.1.vm.tdl

:begin :instance.

circumstance_n1 := intr_noun_word_le &
  [ STEM < "circumstance" >,
    SYNSEM.LOCAL.CONT.KEY _circumstance_rel ].

:end :instance.


; <<>>
; >> city.n.1.vm.tdl
; city.n.1.vm.tdl

:begin :instance.

city_n1 := intr_noun_word_le &
  [ STEM < "city" >,
    SYNSEM.LOCAL.CONT.KEY _city_rel ].

:end :instance.


; <<>>
; >> claim.n.1.vm.tdl
; claim.n.1.vm.tdl

:begin :instance.

claim_n1 := intr_noun_word_le &
  [ STEM < "claim" >,
    SYNSEM.LOCAL.CONT.KEY _claim_rel ].

:end :instance.


; <<>>
; >> claim.v.1.vm.tdl
; claim.v.1.vm.tdl

:begin :instance.

claim_v1 := mv_np_trans_le &
  [ STEM < "claim" >,
    SYNSEM.LOCAL.CONT.KEY _claim_v_rel ].

:end :instance.


; <<>>
; >> claim.v.2.vm.tdl
; claim.v.2.vm.tdl

:begin :instance.

claim_v2 := mv_cp_non_trans_le &
  [ STEM < "claim" >,
    SYNSEM.LOCAL.CONT.KEY _claim_v_rel ].

:end :instance.


; <<>>
; >> clarify.v.1.vm.tdl
; clarify.v.1.vm.tdl

:begin :instance.

clarify_v1 := mv_np_trans_le &
  [ STEM < "clarify" >,
    SYNSEM.LOCAL.CONT.KEY _clarify_rel ].

:end :instance.


; <<>>
; >> class.n.1.vm.tdl
; class.n.1.vm.tdl

:begin :instance.

class_n1 := intr_noun_word_le &
  [ STEM < "class" >,
    SYNSEM.LOCAL.CONT.KEY _class_rel ].

:end :instance.


; <<>>
; >> clear.a.1.vm.tdl
; clear.a.1.vm.tdl

:begin :instance.

clear_a1 := intrans_adj_le &
  [ STEM < "clear" >,
    SYNSEM.LOCAL.CONT.KEY _clear_adj_rel ].

:end :instance.


; <<>>
; >> clearly.a.1.vm.tdl
; clearly.a.1.vm.tdl

:begin :instance.

clearly_adv1 := adv_pre_word_le &
  [ STEM < "clearly" >,
    SYNSEM.LOCAL.CONT.KEY _clearly_rel ].

:end :instance.


; <<>>
; >> clever.a.1.vm.tdl
; clever.a.1.vm.tdl

:begin :instance.

clever_a1 := intrans_adj_le &
  [ STEM < "clever" >,
    SYNSEM.LOCAL.CONT.KEY _clever_rel ].

:end :instance.


; <<>>
; >> clock.n.1.vm.tdl
; clock.n.1.vm.tdl

:begin :instance.

clock_n1 := intr_noun_word_le &
  [ STEM < "clock" >,
    SYNSEM.LOCAL.CONT.KEY _clock_rel ].

:end :instance.


; <<>>
; >> close.a.1.vm.tdl
; close.a.1.vm.tdl

:begin :instance.

close_a1 := trans_adj_le &
  [ STEM < "close" >,
    SYNSEM.LOCAL.CONT [ KEY _close_adj_rel,
			COMPKEY _to_rel ] ].

:end :instance.


; <<>>
; >> close.v.1.tdl
; close.v.1.tdl

:begin :instance.

close_v1 := mv_np_trans_le &
  [ STEM < "close" >,
    SYNSEM.LOCAL.CONT.KEY _close_rel ].

:end :instance.


; <<>>
; >> close.v.2.tdl
; close.v.2.tdl

:begin :instance.

close_v2 := mv_unacc_le &
  [ STEM < "close" >,
    SYNSEM.LOCAL.CONT.KEY _close_und_rel ].

:end :instance.


; <<>>
; >> close.to.p.1.tdl
; close.to.p.1.tdl

:begin :instance.

close_to_p := prep_mle1 &
  [ STEM < "close", "to" >,
    SYNSEM.LOCAL.CONT.KEY _close_to_rel ].

:end :instance.


; <<>>
; >> closely.a.1.vm.tdl
; closely.a.1.vm.tdl

:begin :instance.

closely := adv_word_le &
  [ STEM < "closely" >,
    SYNSEM.LOCAL.CONT.KEY _closely_rel ].

:end :instance.


; <<>>
; >> closer.a.1.vm.tdl
; closer.a.1.vm.tdl

:begin :instance.

closer_a1 := trans_adj_le &
  [ STEM < "closer" >,
    SYNSEM.LOCAL.CONT [ KEY _closer_rel,
			COMPKEY _to_rel ] ].

:end :instance.


; <<>>
; >> closest.a.1.vm.tdl
; closest.a.1.vm.tdl

:begin :instance.

closest_a1 := trans_adj_le &
  [ STEM < "closest" >,
    SYNSEM.LOCAL.CONT [ KEY _closest_rel,
			COMPKEY _to_rel ] ].

:end :instance.


; <<>>
; >> clumsy.a.1.vm.tdl
; clumsy.a.1.vm.tdl

:begin :instance.

clumsy_a1 := intrans_adj_le &
  [ STEM < "clumsy" >,
    SYNSEM.LOCAL.CONT.KEY _clumsy_adj_rel ].

:end :instance.


; <<>>
; >> co-worker.n.1.vm.tdl
; co-worker.n.1.vm.tdl

:begin :instance.

co-worker_n1 := intr_noun_word_le &
  [ STEM < "co-worker" >,
    SYNSEM.LOCAL.CONT.KEY _co-worker_rel ].

:end :instance.


; <<>>
; >> coach.n.1.vm.tdl
; coach.n.1.vm.tdl

:begin :instance.

coach_n1 := intr_noun_word_le &
  [ STEM < "coach" >,
    SYNSEM.LOCAL.CONT.KEY _coach_rel ].

:end :instance.


; <<>>
; >> coach.v.1.vm.tdl
; coach.v.1.vm.tdl

:begin :instance.

coach_v1 := mv_np_trans_le &
  [ STEM < "coach" >,
    SYNSEM.LOCAL.CONT.KEY _coach_v_rel ].

:end :instance.


; <<>>
; >> coal.n.1.vm.tdl
; coal.n.1.vm.tdl

:begin :instance.

coal_n1 := massn_le &
  [ STEM < "coal" >,
    SYNSEM.LOCAL.CONT.KEY _coal_rel ].

:end :instance.


; <<>>
; >> coffee.n.1.vm.tdl
; coffee.n.1.vm.tdl

:begin :instance.

coffee_n1 := massn_le &
  [ STEM < "coffee" >,
    SYNSEM.LOCAL.CONT.KEY _coffee_rel ].

:end :instance.


; <<>>
; >> coincide.v.1.vm.tdl
; coincide.v.1.vm.tdl

:begin :instance.

coincide_v1 := mv_unerg_le &
  [ STEM < "coincide" >,
    SYNSEM.LOCAL.CONT [ KEY _coincide_rel ] ].

:end :instance.


; <<>>
; >> coincide.with.v.1.vm.tdl
; coincide.with.v.1.vm.tdl

:begin :instance.

coincide_with_v1 := mv_empty_prep_intrans_le &
  [ STEM < "coincide" >,
    SYNSEM.LOCAL.CONT [ KEY _coincide_with_rel,
			COMPKEY _with_rel ] ].

:end :instance.


; <<>>
; >> colleague.n.1.vm.tdl
; colleague.n.1.vm.tdl

:begin :instance.

colleague_n1 := intr_noun_word_le &
  [ STEM < "colleague" >,
    SYNSEM.LOCAL.CONT.KEY _colleague_rel ].

:end :instance.


; <<>>
; >> collect.v.1.vm.tdl
; collect.v.1.vm.tdl

:begin :instance.

collect_v1 := mv_np_trans_le &
  [ STEM < "collect" >,
    SYNSEM.LOCAL.CONT [ KEY _collect_rel ] ].

:end :instance.


; <<>>
; >> cologne.n.1.vm.tdl
; cologne.n.1.vm.tdl

:begin :instance.

Cologne_n1 := proper_le &
  [ STEM < "cologne" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'Cologne ].

:end :instance.


; <<>>
; >> combination.n.1.vm.tdl
; combination.n.1.vm.tdl

:begin :instance.

combination_n1 := intr_noun_word_le &
  [ STEM < "combination" >,
    SYNSEM.LOCAL.CONT.KEY _combination_rel ].

:end :instance.


; <<>>
; >> combine.v.1.vm.tdl
; combine.v.1.vm.tdl

:begin :instance.

combine_v1 := mv_prep*_trans_le &
  [ STEM < "combine" >,
    SYNSEM.LOCAL.CONT [ KEY _combine_rel,
			OCOMPKEY _with_rel ] ].

:end :instance.


; <<>>
; >> come.across.v.1.tdl
; come.across.v.1.tdl

:begin :instance.

come_across_v1 := mv_particle_le &
  [ STEM < "come" >,
    SYNSEM.LOCAL.CONT [ KEY _come_across_rel,
			COMPKEY _across_rel ] ].

:end :instance.


; <<>>
; >> come.around.v.1.vm.tdl
; come.around.v.1.vm.tdl

:begin :instance.

come_around_v1 := mv_particle_le &
  [ STEM < "come" >,
    SYNSEM.LOCAL.CONT [ KEY _come_around_rel,
			COMPKEY _around_adv_rel ] ].

:end :instance.


; <<>>
; >> come.back.v.1.vm.tdl
; come.back.v.1.vm.tdl

:begin :instance.

come_back_v1 := mv_particle_pp_le &
  [ STEM < "come" >,
    SYNSEM.LOCAL.CONT [ KEY _come_back_to_rel,
			COMPKEY _back_adv_rel,
			OCOMPKEY _to_rel ] ].

:end :instance.


; <<>>
; >> come.back.v.2.vm.tdl
; come.back.v.2.vm.tdl

:begin :instance.

come_back_v2 := mv_particle_le &
  [ STEM < "come" >,
    SYNSEM.LOCAL.CONT [ KEY _come_back_rel,
			COMPKEY _back_adv_rel ] ].

:end :instance.


; <<>>
; >> come.over.v.1.vm.tdl
; come.over.v.1.vm.tdl

:begin :instance.

come_over_v1 := mv_particle_le &
  [ STEM < "come" >,
    SYNSEM.LOCAL.CONT [ KEY _come_over_rel,
			COMPKEY _over_rel ] ].

:end :instance.


; <<>>
; >> come.together.v.1.vm.tdl
; come.together.v.1.vm.tdl

:begin :instance.

come_together_v1 := mv_particle_le &
  [ STEM < "come" >,
    SYNSEM.LOCAL.CONT [ KEY _come_together_rel,
			COMPKEY _together_rel ] ].

:end :instance.


; <<>>
; >> come.up.v.1.vm.tdl
; come.up.v.1.vm.tdl

:begin :instance.

come_up_v1 := mv_particle_le &
  [ STEM < "come" >,
    SYNSEM.LOCAL.CONT [ KEY _come_up_rel,
			COMPKEY _up_rel ] ].

:end :instance.


; <<>>
; >> come.v.1.tdl
; come.v.1.tdl

:begin :instance.

come_v1 := mv_prep*_intrans_le &
  [ STEM < "come" >,
    SYNSEM.LOCAL.CONT [ KEY _come_rel,
			COMPKEY dir_rel ] ].

:end :instance.


; <<>>
; >> comfortable.a.1.vm.tdl
; comfortable.a.1.vm.tdl

:begin :instance.

comfortable_a1 := intrans_adj_le &
  [ STEM < "comfortable" >,
    SYNSEM.LOCAL.CONT.KEY _comfortable_rel ].

:end :instance.


; <<>>
; >> commitment.n.1.vm.tdl
; commitment.n.1.vm.tdl

:begin :instance.

commitment_n1 := intr_noun_word_le &
  [ STEM < "commitment" >,
    SYNSEM.LOCAL.CONT.KEY _commitment_rel ].

:end :instance.


; <<>>
; >> committed.a.1.vm.tdl
; committed.a.1.vm.tdl

:begin :instance.

committed_a1 := intrans_adj_le &
  [ STEM < "committed" >,
    SYNSEM.LOCAL.CONT.KEY _committed_rel ].

:end :instance.


; <<>>
; >> committee.n.1.tdl
; committee.n.1.tdl

:begin :instance.

committee_n1 := intr_noun_word_le &
  [ STEM < "committee" >,
    SYNSEM.LOCAL.CONT.KEY _committee_rel ].

:end :instance.


; <<>>
; >> common.a.1.vm.tdl
; common.a.1.vm.tdl

:begin :instance.

common_a1 := intrans_adj_le &
  [ STEM < "common" >,
    SYNSEM.LOCAL.CONT.KEY _common_rel ].

:end :instance.


; <<>>
; >> communal.a.1.vm.tdl
; communal.a.1.vm.tdl

:begin :instance.

communal_a1 := intrans_adj_le &
  [ STEM < "communal" >,
    SYNSEM.LOCAL.CONT.KEY _communal_rel ].

:end :instance.


; <<>>
; >> company.n.1.tdl
; company.n.1.tdl

:begin :instance.

company_n1 := intr_noun_word_le &
  [ STEM < "company" >,
    SYNSEM.LOCAL.CONT.KEY _company_rel ].

:end :instance.


; <<>>
; >> compare.v.1.tdl
; compare.v.1.tdl

:begin :instance.

compare_v1 := mv_prep_trans_le &
  [ STEM < "compare" >,
    SYNSEM.LOCAL.CONT [ KEY _compare_rel,
			OCOMPKEY _to_rel ] ].

:end :instance.


; <<>>
; >> compare.with.v.1.tdl
; compare.with.v.1.tdl

:begin :instance.

compare_with_v1 := mv_empty_prep*_trans_le &
  [ STEM < "compare" >,
    SYNSEM.LOCAL.CONT [ KEY _compare_with_rel,
			OCOMPKEY _with_rel ] ].

:end :instance.


; <<>>
; >> comparison.n.1.vm.tdl
; comparison.n.1.vm.tdl

:begin :instance.

comparison_n1 := intr_noun_word_le &
  [ STEM < "comparison" >,
    SYNSEM.LOCAL.CONT.KEY _comparison_rel ].

:end :instance.


; <<>>
; >> comparison.n.2.vm.tdl
; comparison.n.2.vm.tdl

:begin :instance.

comparison_n2 := massn_le &
  [ STEM < "comparison" >,
    SYNSEM.LOCAL.CONT.KEY _comparison_rel ].

:end :instance.


; <<>>
; >> compartment.n.1.vm.tdl
; compartment.n.1.vm.tdl

:begin :instance.

compartment_n1 := intr_noun_word_le &
  [ STEM < "compartment" >,
    SYNSEM.LOCAL.CONT.KEY _compartment_rel ].

:end :instance.


; <<>>
; >> competent.a.2.vm.tdl
; competent.a.2.vm.tdl

:begin :instance.

competent_a2 := intrans_adj_le &
  [ STEM < "competent" >,
    SYNSEM.LOCAL.CONT.KEY _competent_rel ].

:end :instance.


; <<>>
; >> competently.a.2.vm.tdl
; competently.a.2.vm.tdl

:begin :instance.

competently_adv1 := vp_adv_word_le &
  [ STEM < "competently" >,
    SYNSEM.LOCAL.CONT.KEY _competently_rel ].

:end :instance.


; <<>>
; >> competitor.n.1.tdl
; competitor.n.1.tdl

:begin :instance.

competitor_n1 := intr_noun_word_le &
  [ STEM < "competitor" >,
    SYNSEM.LOCAL.CONT.KEY _competitor_rel ].

:end :instance.


; <<>>
; >> complete.a.1.vm.tdl
; complete.a.1.vm.tdl

:begin :instance.

complete_a1 := intrans_adj_le &
  [ STEM < "complete" >,
    SYNSEM.LOCAL.CONT.KEY _complete_adj_rel ].

:end :instance.


; <<>>
; >> complete.v.1.vm.tdl
; complete.v.1.vm.tdl

:begin :instance.

complete_v1 := mv_np_trans_le &
  [ STEM < "complete" >,
    SYNSEM.LOCAL.CONT.KEY _complete_rel ].

:end :instance.


; <<>>
; >> completely.a.1.tdl
; completely.a.1.tdl

:begin :instance.

completely_deg := degree_spec_le &
  [ STEM < "completely" >,
    SYNSEM.LOCAL.CONT.KEY _completely_deg_rel ].

:end :instance.


; <<>>
; >> completely.a.2.tdl
; completely.a.2.tdl

:begin :instance.

completely := vp_adv_word_le &
  [ STEM < "completely" >,
    SYNSEM.LOCAL.CONT.KEY _completely_rel ].

:end :instance.


; <<>>
; >> complication.n.1.vm.tdl
; complication.n.1.vm.tdl

:begin :instance.

complication_n1 := intr_noun_word_le &
  [ STEM < "complication" >,
    SYNSEM.LOCAL.CONT.KEY _complication_rel ].

:end :instance.


; <<>>
; >> comply.with.v.1.vm.tdl
; comply.with.v.1.vm.tdl

:begin :instance.

comply_with_v1 := mv_empty_prep*_intrans_le &
  [ STEM < "comply" >,
    SYNSEM.LOCAL.CONT [ KEY _comply_with_rel,
			COMPKEY _with_rel ] ].

:end :instance.


; <<>>
; >> compsci.n.1.vm.tdl
; compsci.n.1.vm.tdl

:begin :instance.

CompSci_n1 := proper_le &
  [ STEM < "compsci" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'CompSci ].

:end :instance.


; <<>>
; >> computer.n.1.vm.tdl
; computer.n.1.vm.tdl

:begin :instance.

computer_n1 := intr_noun_word_le &
  [ STEM < "computer" >,
    SYNSEM.LOCAL.CONT.KEY _computer_rel ].

:end :instance.


; <<>>
; >> computer.science.n.1.vm.tdl
; computer.science.n.1.vm.tdl

:begin :instance.

computer_science_n1 := massn_mle1 &
  [ STEM < "computer", "science" >,
    SYNSEM.LOCAL.CONT.KEY _computer_science_rel ].

:end :instance.


; <<>>
; >> concern.n.1.vm.tdl
; concern.n.1.vm.tdl

:begin :instance.

concern_n1 := intr_noun_word_le &
  [ STEM < "concern" >,
    SYNSEM.LOCAL.CONT.KEY _concern_n_rel ].

:end :instance.


; <<>>
; >> concern.n.2.vm.tdl
; concern.n.2.vm.tdl

:begin :instance.

concern_n2 := massn_le &
  [ STEM < "concern" >,
    SYNSEM.LOCAL.CONT.KEY _concern_n_rel ].

:end :instance.


; <<>>
; >> concern.v.1.vm.tdl
; concern.v.1.vm.tdl

:begin :instance.

concern_v1 := mv_np_trans_le &
  [ STEM < "concern" >,
    SYNSEM.LOCAL.CONT.KEY _concern_rel ].

:end :instance.


; <<>>
; >> concerned.a.1.vm.tdl
; concerned.a.1.vm.tdl

:begin :instance.

concerned_a1 := intrans_adj_le &
  [ STEM < "concerned" >,
    SYNSEM.LOCAL.CONT.KEY _concerned_rel ].

:end :instance.


; <<>>
; >> concerning.p.1.vm.tdl
; concerning.p.1.vm.tdl

:begin :instance.

concerning_p := prep_le &
  [ STEM < "concerning" >,
    SYNSEM.LOCAL.CONT.KEY _concerning_rel ].

:end :instance.


; <<>>
; >> concise.a.1.vm.tdl
; concise.a.1.vm.tdl

:begin :instance.

concise_a1 := intrans_adj_le &
  [ STEM < "concise" >,
    SYNSEM.LOCAL.CONT.KEY _concise_rel ].

:end :instance.


; <<>>
; >> conclude.v.1.vm.tdl
; conclude.v.1.vm.tdl

:begin :instance.

conclude_v1 := mv_cp_prop_non_trans_le &
  [ STEM < "conclude" >,
    SYNSEM.LOCAL.CONT.KEY _conclude_rel ].

:end :instance.


; <<>>
; >> conclusion.n.1.vm.tdl
; conclusion.n.1.vm.tdl

:begin :instance.

conclusion_n1 := deverbal_noun_intr_word_le &
  [ STEM < "conclusion" >,
    SYNSEM.LOCAL.CONT.ALTKEY _conclude_rel ].

:end :instance.


; <<>>
; >> concrete.a.1.vm.tdl
; concrete.a.1.vm.tdl

:begin :instance.

concrete_a1 := intrans_adj_le &
  [ STEM < "concrete" >,
    SYNSEM.LOCAL.CONT.KEY _concrete_rel ].

:end :instance.


; <<>>
; >> conference.n.1.vm.tdl
; conference.n.1.vm.tdl

:begin :instance.

conference_n1 := intr_noun_word_le &
  [ STEM < "conference" >,
    SYNSEM.LOCAL.CONT.KEY _conference_rel ].

:end :instance.


; <<>>
; >> confine.v.1.vm.tdl
; confine.v.1.vm.tdl

:begin :instance.

confine_v1 := mv_prep*_trans_le &
  [ STEM < "confine" >,
    SYNSEM.LOCAL.CONT [ KEY _confine_rel,
			OCOMPKEY _to_rel ] ].

:end :instance.


; <<>>
; >> confirm.v.1.vm.tdl
; confirm.v.1.vm.tdl

:begin :instance.

confirm_v1 := mv_np_trans_le &
  [ STEM < "confirm" >,
    SYNSEM.LOCAL.CONT.KEY _confirm_rel ].

:end :instance.


; <<>>
; >> confirm.v.2.vm.tdl
; confirm.v.2.vm.tdl

:begin :instance.

confirm_v2 := mv_pp_cp*_le &
  [ STEM < "confirm" >,
    SYNSEM.LOCAL.CONT [ KEY _confirm_rel,
			COMPKEY _to_rel ] ].

:end :instance.


; <<>>
; >> conformable.a.1.vm.tdl
; conformable.a.1.vm.tdl

:begin :instance.

conformable_a1 := intrans_adj_le &
  [ STEM < "conformable" >,
    SYNSEM.LOCAL.CONT.KEY _conformable_rel ].

:end :instance.


; <<>>
; >> congress.n.1.vm.tdl
; congress.n.1.vm.tdl

:begin :instance.

congress_n1 := intr_noun_word_le &
  [ STEM < "congress" >,
    SYNSEM.LOCAL.CONT.KEY _congress_rel ].

:end :instance.


; <<>>
; >> connect.v.1.vm.tdl
; connect.v.1.vm.tdl

:begin :instance.

connect_v1 := mv_np_trans_le &
  [ STEM < "connect" >,
    SYNSEM.LOCAL.CONT.KEY _connect_rel ].

:end :instance.


; <<>>
; >> connect.v.2.vm.tdl
; connect.v.2.vm.tdl

:begin :instance.

connect_v2 := mv_unacc_le &
  [ STEM < "connect" >,
    SYNSEM.LOCAL.CONT.KEY _connect_und_rel ].

:end :instance.


; <<>>
; >> connected.a.1.vm.tdl
; connected.a.1.vm.tdl

:begin :instance.

connected_a1 := intrans_adj_le &
  [ STEM < "connected" >,
    SYNSEM.LOCAL.CONT.KEY _connected_rel ].

:end :instance.


; <<>>
; >> connection.n.1.vm.tdl
; connection.n.1.vm.tdl

:begin :instance.

connection_n1 := deverbal_noun_intr_word_le &
  [ STEM < "connection" >,
    SYNSEM.LOCAL.CONT.ALTKEY _connect_rel ].

:end :instance.


; <<>>
; >> consecutive.a.1.vm.tdl
; consecutive.a.1.vm.tdl

:begin :instance.

consecutive_a1 := intrans_adj_le &
  [ STEM < "consecutive" >,
    SYNSEM.LOCAL.CONT.KEY _consecutive_rel ].

:end :instance.


; <<>>
; >> consequence.n.1.vm.tdl
; consequence.n.1.vm.tdl

:begin :instance.

consequence_n1 := intr_noun_word_le &
  [ STEM < "consequence" >,
    SYNSEM.LOCAL.CONT.KEY _consequence_rel ].

:end :instance.


; <<>>
; >> consequently.a.1.vm.tdl
; consequently.a.1.vm.tdl

:begin :instance.

consequently_adv1 := adv_pre_word_le &
  [ STEM < "consequently" >,
    SYNSEM.LOCAL.CONT.KEY _consequently_rel ].

:end :instance.


; <<>>
; >> consider.v.1.tdl
; consider.v.1.tdl

:begin :instance.

consider_v1 := mv_obj_equi_le &
  [ STEM < "consider" >,
    SYNSEM.LOCAL.CONT.KEY _consider2_rel ].

:end :instance.


; <<>>
; >> consider.v.2.tdl
; consider.v.2.tdl

:begin :instance.

consider_v2 := mv_obj_equi_prd_le &
  [ STEM < "consider" >,
    SYNSEM.LOCAL.CONT.KEY _consider2_rel ].

:end :instance.


; <<>>
; >> consider.v.3.tdl
; consider.v.3.tdl

:begin :instance.

consider_v3 := mv_ditrans_only_le &
  [ STEM < "consider" >,
    SYNSEM.LOCAL.CONT.KEY _consider3_rel ].

:end :instance.


; <<>>
; >> consider.v.4.tdl
; consider.v.4.tdl

:begin :instance.

consider_v4 := mv_np_comp_le &
  [ STEM < "consider" >,
    SYNSEM.LOCAL [ CAT.VALENCE.COMPS 
			 < [ LOCAL.CONT.INDEX #ind ],
			   [ LOCAL.CONT.INDEX #ind ] >,
		   CONT [ KEY _consider2_rel,
			  OCOMPKEY _as_rel ] ] ].

:end :instance.


; <<>>
; >> consider.v.5.vm.tdl
; consider.v.5.vm.tdl

:begin :instance.

consider_v5 := mv_np_trans_le &
  [ STEM < "consider" >,
    SYNSEM.LOCAL.CONT.KEY _consider_rel ].

:end :instance.


; <<>>
; >> consideration.n.1.vm.tdl
; consideration.n.1.vm.tdl

:begin :instance.

consideration_n1 := deverbal_massn_le &
  [ STEM < "consideration" >,
    SYNSEM.LOCAL.CONT.ALTKEY _consider_rel ].

:end :instance.


; <<>>
; >> considering.p.1.vm.tdl
; considering.p.1.vm.tdl

:begin :instance.

considering_p := prep_le &
  [ STEM < "considering" >,
    SYNSEM.LOCAL.CONT.KEY _considering_rel ].

:end :instance.


; <<>>
; >> constant.a.1.vm.tdl
; constant.a.1.vm.tdl

:begin :instance.

constant_a1 := intrans_adj_le &
  [ STEM < "constant" >,
    SYNSEM.LOCAL.CONT.KEY _constant_rel ].

:end :instance.


; <<>>
; >> constantly.a.1.vm.tdl
; constantly.a.1.vm.tdl

:begin :instance.

constantly_adv1 := adv_word_le &
  [ STEM < "constantly" >,
    SYNSEM.LOCAL.CONT.KEY _constantly_rel ].

:end :instance.


; <<>>
; >> consultant.n.1.tdl
; consultant.n.1.tdl

:begin :instance.

consultant_n1 := intr_noun_word_le &
  [ STEM < "consultant" >,
    SYNSEM.LOCAL.CONT.KEY _consultant_rel ].

:end :instance.


; <<>>
; >> contact.n.1.vm.tdl
; contact.n.1.vm.tdl

:begin :instance.

contact_n1 := massn_le &
  [ STEM < "contact" >,
    SYNSEM.LOCAL.CONT.KEY _contact_n_rel ].

:end :instance.


; <<>>
; >> contact.v.1.vm.tdl
; contact.v.1.vm.tdl

:begin :instance.

contact_v1 := mv_np_trans_le &
  [ STEM < "contact" >,
    SYNSEM.LOCAL.CONT.KEY _contact_rel ].

:end :instance.


; <<>>
; >> contain.v.1.vm.tdl
; contain.v.1.vm.tdl

:begin :instance.

contain_v1 := mv_np_trans_le &
  [ STEM < "contain" >,
    SYNSEM.LOCAL.CONT.KEY _contain_rel ].

:end :instance.


; <<>>
; >> contented.a.1.vm.tdl
; contented.a.1.vm.tdl

:begin :instance.

contented_a1 := intrans_adj_le &
  [ STEM < "contented" >,
    SYNSEM.LOCAL.CONT.KEY _contented_rel ].

:end :instance.


; <<>>
; >> contentedly.a.1.vm.tdl
; contentedly.a.1.vm.tdl

:begin :instance.

contentedly := adv_word_le &
  [ STEM < "contentedly" >,
    SYNSEM.LOCAL.CONT.KEY _contentedly_rel ].

:end :instance.


; <<>>
; >> contingent.a.1.vm.tdl
; contingent.a.1.vm.tdl

:begin :instance.

contingent_a1 := intrans_adj_le &
  [ STEM < "contingent" >,
    SYNSEM.LOCAL.CONT.KEY _contingent_rel ].

:end :instance.


; <<>>
; >> continue.v.1.vm.tdl
; continue.v.1.vm.tdl

:begin :instance.

continue_v1 := mv_unerg_le &
  [ STEM < "continue" >,
    SYNSEM.LOCAL.CONT.KEY _continue_rel ].

:end :instance.


; <<>>
; >> continue.v.2.vm.tdl
; continue.v.2.vm.tdl

:begin :instance.

continue_v2 := mv_np_trans_le &
  [ STEM < "continue" >,
    SYNSEM.LOCAL.CONT.KEY _continue_cause_rel ].

:end :instance.


; <<>>
; >> continue.v.3.vm.tdl
; continue.v.3.vm.tdl

:begin :instance.

continue_v3 := mv_subj_equi_le &
  [ STEM < "continue" >,
    SYNSEM.LOCAL.CONT.KEY _continue_to_rel ].

:end :instance.


; <<>>
; >> continue.v.4.vm.tdl
; continue.v.4.vm.tdl

:begin :instance.

continue_v4 := mv_subj_equi_prp_le &
  [ STEM < "continue" >,
    SYNSEM.LOCAL.CONT.KEY _continue_to_rel ].

:end :instance.


; <<>>
; >> continuous.a.1.vm.tdl
; continuous.a.1.vm.tdl

:begin :instance.

continuous_a1 := intrans_adj_le &
  [ STEM < "continuous" >,
    SYNSEM.LOCAL.CONT.KEY _continuous_rel ].

:end :instance.


; <<>>
; >> contrary.a.1.vm.tdl
; contrary.a.1.vm.tdl

:begin :instance.

contrary_a1 := intrans_adj_le &
  [ STEM < "contrary" >,
    SYNSEM.LOCAL.CONT.KEY _contrary_rel ].

:end :instance.


; <<>>
; >> convenient.a.1.vm.tdl
; convenient.a.1.vm.tdl

:begin :instance.

convenient_a1 := intrans_adj_le &
  [ STEM < "convenient" >,
    SYNSEM.LOCAL.CONT.KEY _convenient_rel ].

:end :instance.


; <<>>
; >> conveniently.a.1.vm.tdl
; conveniently.a.1.vm.tdl

:begin :instance.

conveniently := adv_word_le &
  [ STEM < "conveniently" >,
    SYNSEM.LOCAL.CONT.KEY _conveniently_rel ].

:end :instance.


; <<>>
; >> convention.n.1.vm.tdl
; convention.n.1.vm.tdl

:begin :instance.

convention_n1 := intr_noun_word_le &
  [ STEM < "convention" >,
    SYNSEM.LOCAL.CONT.KEY _convention_rel ].

:end :instance.


; <<>>
; >> conversation.n.1.vm.tdl
; conversation.n.1.vm.tdl

:begin :instance.

conversation_n1 := intr_noun_word_le &
  [ STEM < "conversation" >,
    SYNSEM.LOCAL.CONT.KEY _conversation_rel ].

:end :instance.


; <<>>
; >> conversation.n.2.vm.tdl
; conversation.n.2.vm.tdl

:begin :instance.

conversation_n2 := massn_le &
  [ STEM < "conversation" >,
    SYNSEM.LOCAL.CONT.KEY _conversation_rel ].

:end :instance.


; <<>>
; >> convince.v.1.tdl
; convince.v.1.tdl

:begin :instance.

convince_v1 := mv_obj_equi_le &
  [ STEM < "convince" >,
    SYNSEM.LOCAL.CONT.KEY _convince2_rel ].

:end :instance.


; <<>>
; >> convince.v.2.tdl
; convince.v.2.tdl

:begin :instance.

convince_v2 := mv_np_trans_cp_le &
  [ STEM < "convince" >,
    SYNSEM.LOCAL.CONT.KEY _convince_rel ].

:end :instance.


; <<>>
; >> cool.a.1.vm.tdl
; cool.a.1.vm.tdl

:begin :instance.

cool_a1 := intrans_adj_le &
  [ STEM < "cool" >,
    SYNSEM.LOCAL.CONT.KEY _cool_rel ].

:end :instance.


; <<>>
; >> coordinate.v.1.vm.tdl
; coordinate.v.1.vm.tdl

:begin :instance.

coordinate_v1 := mv_np_trans_le &
  [ STEM < "coordinate" >,
    SYNSEM.LOCAL.CONT.KEY _coordinate_rel ].

:end :instance.


; <<>>
; >> corn.n.2.vm.tdl
; corn.n.2.vm.tdl

:begin :instance.

corn_n2 := massn_le &
  [ STEM < "corn" >,
    SYNSEM.LOCAL.CONT.KEY _corn_rel ].

:end :instance.


; <<>>
; >> corpus.Christi.n.1.vm.tdl
; corpus.Christi.n.1.vm.tdl

:begin :instance.

Corpus_Christi_n1 := proper_mle1 &
  [ STEM < "corpus", "christi" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'Corpus_Christi ].

:end :instance.


; <<>>
; >> corpus.christi.n.1.tdl
; corpus.christi.n.1.tdl

:begin :instance.

corpus_christi := holiday_word_mle1 &
  [ STEM < "corpus", "christi" >,
    SYNSEM.LOCAL.CONT.KEY.DAY 'corpus_christi ].

:end :instance.


; <<>>
; >> correct.v.1.vm.tdl
; correct.v.1.vm.tdl

:begin :instance.

correct_v1 := mv_np_trans_le &
  [ STEM < "correct" >,
    SYNSEM.LOCAL.CONT.KEY _correct_rel ].

:end :instance.


; <<>>
; >> correct.a.1.tdl
; correct.a.1.tdl

:begin :instance.

correct_a1 := intrans_adj_le &
  [ STEM < "correct" >,
    SYNSEM.LOCAL.CONT.KEY _correct_a_rel ].

:end :instance.


; <<>>
; >> correctly.a.1.vm.tdl
; correctly.a.1.vm.tdl

:begin :instance.

correctly := adv_word_le &
  [ STEM < "correctly" >,
    SYNSEM.LOCAL.CONT.KEY _correctly_rel ].

:end :instance.


; <<>>
; >> correspond.v.1.vm.tdl
; correspond.v.1.vm.tdl

:begin :instance.

correspond_v1 := mv_empty_prep_intrans_le &
  [ STEM < "correspond" >,
    SYNSEM.LOCAL.CONT [ KEY _correspond_with_rel,
			COMPKEY _with_rel ] ].

:end :instance.


; <<>>
; >> cosy.a.1.vm.tdl
; cosy.a.1.vm.tdl

:begin :instance.

cosy_a1 := intrans_adj_le &
  [ STEM < "cosy" >,
    SYNSEM.LOCAL.CONT.KEY _cosy_rel ].

:end :instance.


; <<>>
; >> could.vx.1.tdl
; could.vx.1.tdl

:begin :instance.

could_aux_pos := modal_pos_le & 
  [ STEM < "could" >,
    SYNSEM.LOCAL [ CAT.HEAD.MOOD modal_subj*,
                   CONT.KEY _could_rel ] ].

:end :instance.


; <<>>
; >> couldnt.vx.1.tdl
; couldnt.vx.1.tdl

:begin :instance.

could_aux_neg := modal_neg_mle1 &
  [ STEM < "couldn", "t" >,
    SYNSEM.LOCAL [ CAT.HEAD.MOOD modal_subj*,
                   CONT.KEY _could_rel ] ].

:end :instance.


; <<>>
; >> count.on.v.1.vm.tdl
; count.on.v.1.vm.tdl

:begin :instance.

count_on_v1 := mv_empty_prep_intrans_le &
  [ STEM < "count" >,
    SYNSEM.LOCAL.CONT [ KEY _count_on_rel,
			COMPKEY _on_rel ] ].

:end :instance.


; <<>>
; >> counter-proposal.n.1.vm.tdl
; counter-proposal.n.1.vm.tdl

:begin :instance.

counter-proposal_n1 := intr_noun_word_le &
  [ STEM < "counter-proposal" >,
    SYNSEM.LOCAL.CONT.KEY _counter-proposal_rel ].

:end :instance.


; <<>>
; >> course.n.1.vm.tdl
; course.n.1.vm.tdl

:begin :instance.

course_n1 := intr_noun_word_le &
  [ STEM < "course" >,
    SYNSEM.LOCAL.CONT.KEY _course_rel ].

:end :instance.


; <<>>
; >> courtyard.n.1.vm.tdl
; courtyard.n.1.vm.tdl

:begin :instance.

courtyard_n1 := intr_noun_word_le &
  [ STEM < "courtyard" >,
    SYNSEM.LOCAL.CONT.KEY _courtyard_rel ].

:end :instance.


; <<>>
; >> crazy.a.1.vm.tdl
; crazy.a.1.vm.tdl

:begin :instance.

crazy_a1 := intrans_adj_le &
  [ STEM < "crazy" >,
    SYNSEM.LOCAL.CONT.KEY _crazy_rel ].

:end :instance.


; <<>>
; >> create.v.1.vm.tdl
; create.v.1.vm.tdl

:begin :instance.

create_v1 := mv_np_trans_le &
  [ STEM < "create" >,
    SYNSEM.LOCAL.CONT.KEY _create_rel ].

:end :instance.


; <<>>
; >> cross.off.v.1.vm.tdl
; cross.off.v.1.vm.tdl

:begin :instance.

cross_off_v1 := mv_particle_np_le &
  [ STEM < "cross" >,
    SYNSEM.LOCAL.CONT [ KEY _cross_off_rel,
			COMPKEY _off_rel ] ].

:end :instance.


; <<>>
; >> csli.n.1.vm.tdl
; csli.n.1.vm.tdl
 
:begin :instance.
 
CSLI_n1 := proper_le &
  [ STEM < "csli" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'CSLI ].
 
:end :instance.
 
 
; <<>>
; >> cup.n.1.vm.tdl
; cup.n.1.vm.tdl

:begin :instance.

cup_n1 := intr_noun_word_le &
  [ STEM < "cup" >,
    SYNSEM.LOCAL.CONT.KEY _cup_rel ].

:end :instance.


; <<>>
; >> currency.n.1.vm.tdl
; currency.n.1.vm.tdl

:begin :instance.

currency_n1 := intr_noun_word_le &
  [ STEM < "currency" >,
    SYNSEM.LOCAL.CONT.KEY _currency_rel ].

:end :instance.


; <<>>
; >> curriculum.n.1.vm.tdl
; curriculum.n.1.vm.tdl

:begin :instance.

curriculum_n1 := intr_noun_word_le &
  [ STEM < "curriculum" >,
    SYNSEM.LOCAL.CONT.KEY _curriculum_rel ].

:end :instance.


; <<>>
; >> cut.short.v.1.vm.tdl
; cut.short.v.1.vm.tdl

:begin :instance.

cut_short_v1 := mv_particle_np_le &
  [ STEM < "cut" >,
    SYNSEM.LOCAL.CONT [ KEY _cut_short_rel,
			COMPKEY _short_rel ] ].

:end :instance.


; <<>>
; >> czerczinsky.n.1.vm.tdl
; czerczinsky.n.1.vm.tdl

:begin :instance.

Czerczinsky_n1 := proper_le &
  [ STEM < "czerczinsky" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'Czerczinsky ].

:end :instance.


; <<>>
; >> daily.a.1.vm.tdl
; daily.a.1.vm.tdl

:begin :instance.

daily_adv1 := vp_adv_post_word_le &
  [ STEM < "daily" >,
    SYNSEM.LOCAL.CONT.KEY _daily_rel ].

:end :instance.


; <<>>
; >> danger.n.1.vm.tdl
; danger.n.1.vm.tdl

:begin :instance.

danger_n1 := intr_noun_word_le &
  [ STEM < "danger" >,
    SYNSEM.LOCAL.CONT.KEY _danger_rel ].

:end :instance.


; <<>>
; >> danger.n.2.vm.tdl
; danger.n.2.vm.tdl

:begin :instance.

danger_n2 := massn_le &
  [ STEM < "danger" >,
    SYNSEM.LOCAL.CONT.KEY _danger_rel ].

:end :instance.


; <<>>
; >> dare.v.1.vm.tdl
; dare.v.1.vm.tdl

:begin :instance.

dare_v1 := mv_subj_equi_le &
  [ STEM < "dare" >,
    SYNSEM.LOCAL.CONT.KEY _dare_rel ].

:end :instance.


; <<>>
; >> dare.vx.1.tdl
; dare.vx.1.tdl

:begin :instance.

dare_aux_pos := modal_pos_le & 
  [ STEM < "dare" >,
    SYNSEM.LOCAL [ CAT.HEAD.TENSE present*,
                   CONT.KEY _dare_aux_rel ] ].

:end :instance.


; <<>>
; >> darent.vx.1.tdl
; darent.vx.1.tdl

:begin :instance.

dare_aux_neg := modal_neg_mle1 &
  [ STEM < "daren", "t" >,
    SYNSEM.LOCAL [ CAT.HEAD.TENSE present*,
                   CONT.KEY _dare_aux_rel ] ].

:end :instance.


; <<>>
; >> darmstadt.n.1.vm.tdl
; darmstadt.n.1.vm.tdl

:begin :instance.

Darmstadt_n1 := proper_le &
  [ STEM < "darmstadt" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'Darmstadt ].

:end :instance.


; <<>>
; >> data.n.1.vm.tdl
; data.n.1.vm.tdl

:begin :instance.

data_n1 := intr_noun_word_le &
  [ STEM < "data" >,
    SYNSEM.LOCAL.CONT.KEY _data_rel ].

:end :instance.


; <<>>
; >> date.n.1.vm.tdl
; date.n.1.vm.tdl

:begin :instance.

date_n1 := intr_noun_word_le &
  [ STEM < "date" >,
    SYNSEM.LOCAL.CONT.KEY _date_rel ].

:end :instance.


; <<>>
; >> datum.n.1.vm.tdl
; datum.n.1.vm.tdl

:begin :instance.

datum_n1 := intr_noun_word_le &
  [ STEM < "datum" >,
    SYNSEM.LOCAL.CONT.KEY _data_rel ].

:end :instance.


; <<>>
; >> daughter.n.1.vm.tdl
; daughter.n.1.vm.tdl

:begin :instance.

daughter_n1 := noun_ppof_word_le &
  [ STEM < "daughter" >,
    SYNSEM.LOCAL.CONT.KEY _daughter_rel ].

:end :instance.


; <<>>
; >> day.n.1.tdl
; day.n.1.tdl

:begin :instance.

day_n := intr_temp_noun_le &
  [ STEM < "day" >,
    SYNSEM.LOCAL.CONT.KEY _day_rel ].

:end :instance.


; <<>>
; >> day.n.2.tdl
; day.n.2.tdl

:begin :instance.

day_n2 := intr_temp_noun_nomod_le &
  [ STEM < "day" >,
    SYNSEM.LOCAL.CONT.KEY _day_rel ].

:end :instance.


; <<>>
; >> day-long.a.1.vm.tdl
; day-long.a.1.vm.tdl

:begin :instance.

day-long_a1 := intrans_adj_le &
  [ STEM < "day-long" >,
    SYNSEM.LOCAL.CONT.KEY _day-long_rel ].

:end :instance.


; <<>>
; >> daytime.n.1.vm.tdl
; daytime.n.1.vm.tdl

:begin :instance.

daytime_n1 := intr_noun_word_le &
  [ STEM < "daytime" >,
    SYNSEM.LOCAL.CONT.KEY _daytime_n_rel ].

:end :instance.


; <<>>
; >> deadline.n.1.vm.tdl
; deadline.n.1.vm.tdl

:begin :instance.

deadline_n1 := intr_noun_word_le &
  [ STEM < "deadline" >,
    SYNSEM.LOCAL.CONT.KEY _deadline_rel ].

:end :instance.


; <<>>
; >> deal.n.1.vm.tdl
; deal.n.1.vm.tdl

:begin :instance.

deal_n1 := intr_noun_word_le &
  [ STEM < "deal" >,
    SYNSEM.LOCAL.CONT.KEY _deal_rel ].

:end :instance.


; <<>>
; >> deal.v.1.tdl
; deal.v.1.tdl

:begin :instance.

deal_with_v1 := mv_empty_prep_intrans_le &
  [ STEM < "deal" >,
    SYNSEM.LOCAL.CONT [ KEY _deal_with_rel,
			COMPKEY _with_rel ] ].

:end :instance.


; <<>>
; >> dear.a.1.vm.tdl
; dear.a.1.vm.tdl

:begin :instance.

dear_a1 := intrans_adj_le &
  [ STEM < "dear" >,
    SYNSEM.LOCAL.CONT.KEY _dear_rel ].

:end :instance.


; <<>>
; >> december.n.1.tdl
; december.n.1.tdl

:begin :instance.

december := month_word_le &
  [ STEM < "december" >,
    SYNSEM.LOCAL.CONT.KEY.MONTH 'dec ].

:end :instance.


; <<>>
; >> december.n.2.tdl
; december.n.2.tdl

:begin :instance.

december_2 := month_year_word_le &
  [ STEM < "december" >,
    SYNSEM.LOCAL.CONT.KEY.MONTH 'dec ].

:end :instance.


; <<>>
; >> decide.on.v.1.vm.tdl
; decide.on.v.1.vm.tdl

:begin :instance.

decide_on_v1 := mv_empty_prep_intrans_le &
  [ STEM < "decide" >,
    SYNSEM.LOCAL.CONT [ KEY _decide_on_rel,
			COMPKEY _on_rel ] ].

:end :instance.


; <<>>
; >> decide.v.1.vm.tdl
; decide.v.1.vm.tdl

:begin :instance.

decide_v1 := mv_subj_equi_le &
  [ STEM < "decide" >,
    SYNSEM.LOCAL.CONT.KEY _decide_rel ].

:end :instance.


; <<>>
; >> decidedly.a.1.vm.tdl
; decidedly.a.1.vm.tdl

:begin :instance.

decidedly_adv1 := adv_pre_word_le &
  [ STEM < "decidedly" >,
    SYNSEM.LOCAL.CONT.KEY _decidedly_rel ].

:end :instance.


; <<>>
; >> decision.n.1.vm.tdl
; decision.n.1.vm.tdl

:begin :instance.

decision_n1 := deverbal_noun_intr_word_le &
  [ STEM < "decision" >,
    SYNSEM.LOCAL.CONT.ALTKEY _decide_rel ].

:end :instance.


; <<>>
; >> declare.v.1.vm.tdl
; declare.v.1.vm.tdl

:begin :instance.

declare_v1 := mv_np_trans_le &
  [ STEM < "declare" >,
    SYNSEM.LOCAL.CONT.KEY _declare_rel ].

:end :instance.


; <<>>
; >> declare.v.2.vm.tdl
; declare.v.2.vm.tdl

:begin :instance.

declare_v2 := mv_unerg_le &
  [ STEM < "declare" >,
    SYNSEM.LOCAL.CONT.KEY _declare_rel ].

:end :instance.


; <<>>
; >> declare.v.3.vm.tdl
; declare.v.3.vm.tdl

:begin :instance.

declare_v3 := mv_cp_non_trans_le &
  [ STEM < "declare" >,
    SYNSEM.LOCAL.CONT.KEY _declare_rel ].

:end :instance.


; <<>>
; >> decline.v.1.vm.tdl
; decline.v.1.vm.tdl

:begin :instance.

decline_v1 := mv_np_trans_le &
  [ STEM < "decline" >,
    SYNSEM.LOCAL.CONT.KEY _decline_rel ].

:end :instance.


; <<>>
; >> decline.v.2.vm.tdl
; decline.v.2.vm.tdl

:begin :instance.

decline_v2:= mv_subj_equi_le &
  [ STEM < "decline" >,
    SYNSEM.LOCAL.CONT.KEY _decline2_rel ].

:end :instance.


; <<>>
; >> deduction.n.1.vm.tdl
; deduction.n.1.vm.tdl

:begin :instance.

deduction_n1 := intr_noun_word_le &
  [ STEM < "deduction" >,
    SYNSEM.LOCAL.CONT.KEY _deduction_rel ].

:end :instance.


; <<>>
; >> deep.a.1.vm.tdl
; deep.a.1.vm.tdl

:begin :instance.

deep_a1 := intrans_adj_le &
  [ STEM < "deep" >,
    SYNSEM.LOCAL.CONT.KEY _deep_rel ].

:end :instance.


; <<>>
; >> defeat.n.1.vm.tdl
; defeat.n.1.vm.tdl

:begin :instance.

defeat_n1 := intr_noun_word_le &
  [ STEM < "defeat" >,
    SYNSEM.LOCAL.CONT.KEY _defeat_rel ].

:end :instance.


; <<>>
; >> defect.n.1.vm.tdl
; defect.n.1.vm.tdl

:begin :instance.

defect_n1 := intr_noun_word_le &
  [ STEM < "defect" >,
    SYNSEM.LOCAL.CONT.KEY _defect_rel ].

:end :instance.


; <<>>
; >> defer.v.1.vm.tdl
; defer.v.1.vm.tdl

:begin :instance.

defer_v1 := mv_np_trans_le &
  [ STEM < "defer" >,
    SYNSEM.LOCAL.CONT.KEY _defer_rel ].

:end :instance.


; <<>>
; >> definite.a.1.vm.tdl
; definite.a.1.vm.tdl

:begin :instance.

definite_a1 := intrans_adj_le &
  [ STEM < "definite" >,
    SYNSEM.LOCAL.CONT.KEY _definite_rel ].

:end :instance.


; <<>>
; >> definitely.a.1.vm.tdl
; definitely.a.1.vm.tdl

:begin :instance.

definitely_adv1 := adv_pre_word_le &
  [ STEM < "definitely" >,
    SYNSEM.LOCAL.CONT.KEY _definitely_rel ].

:end :instance.


; <<>>
; >> definitive.a.1.tdl
; definitive.a.1.tdl

:begin :instance.

definitive_a1 := intrans_adj_le &
  [ STEM < "definitive" >,
    SYNSEM.LOCAL.CONT.KEY _definitive_rel ].

:end :instance.


; <<>>
; >> definitively.a.1.vm.tdl
; definitively.a.1.vm.tdl

:begin :instance.

definitively := adv_word_le &
  [ STEM < "definitively" >,
    SYNSEM.LOCAL.CONT.KEY _definitively_rel ].

:end :instance.


; <<>>
; >> degree.n.1.vm.tdl
; degree.n.1.vm.tdl

:begin :instance.

degree_n1 := intr_noun_word_le &
  [ STEM < "degree" >,
    SYNSEM.LOCAL.CONT.KEY _degree_noun_rel ].

:end :instance.


; <<>>
; >> delay.n.1.vm.tdl
; delay.n.1.vm.tdl

:begin :instance.

delay_n1 := intr_noun_word_le &
  [ STEM < "delay" >,
    SYNSEM.LOCAL.CONT.KEY _delay_n_rel ].

:end :instance.


; <<>>
; >> delighted.a.1.vm.tdl
; delighted.a.1.vm.tdl

:begin :instance.

delighted_a1 := intrans_adj_le &
  [ STEM < "delighted" >,
    SYNSEM.LOCAL.CONT.KEY _delighted_rel ].

:end :instance.


; <<>>
; >> demand.n.1.vm.tdl
; demand.n.1.vm.tdl

:begin :instance.

demand_n1 := intr_noun_word_le &
  [ STEM < "demand" >,
    SYNSEM.LOCAL.CONT.KEY _demand_n_rel ].

:end :instance.


; <<>>
; >> demand.v.1.vm.tdl
; demand.v.1.vm.tdl

:begin :instance.

demand_v1 := mv_np_trans_le &
  [ STEM < "demand" >,
    SYNSEM.LOCAL.CONT.KEY _demand_v_rel ].

:end :instance.


; <<>>
; >> demand.v.2.vm.tdl
; demand.v.2.vm.tdl

:begin :instance.

demand_v2 := mv_cp_prop_non_trans_le &
  [ STEM < "demand" >,
    SYNSEM.LOCAL.CONT.KEY _demand_v_rel ].

:end :instance.


; <<>>
; >> denominator.n.1.vm.tdl
; denominator.n.1.vm.tdl

:begin :instance.

denominator_n1 := intr_noun_word_le &
  [ STEM < "denominator" >,
    SYNSEM.LOCAL.CONT.KEY _denominator_rel ].

:end :instance.


; <<>>
; >> dentist.n.1.vm.tdl
; dentist.n.1.vm.tdl

:begin :instance.

dentist_n1 := intr_noun_word_le &
  [ STEM < "dentist" >,
    SYNSEM.LOCAL.CONT.KEY _dentist_rel ].

:end :instance.


; <<>>
; >> dentist.a.1.vm.tdl
; dentist.a.1.vm.tdl

:begin :instance.

dentists_a1 := compound_adj_word_mle1 &
  [ STEM < "dentist", "s" >,
    SYNSEM.LOCAL.CONT.KEY _dentist_adj_rel ].

:end :instance.


; <<>>
; >> depart.v.2.vm.tdl
; depart.v.2.vm.tdl

:begin :instance.

depart_v2 := mv_unerg_le &
  [ STEM < "depart" >,
    SYNSEM.LOCAL.CONT.KEY _depart_rel ].

:end :instance.


; <<>>
; >> department.n.1.tdl
; department.n.1.tdl

:begin :instance.

department_n1 := intr_noun_word_le &
  [ STEM < "department" >,
    SYNSEM.LOCAL.CONT.KEY _department_rel ].

:end :instance.


; <<>>
; >> departmental.a.1.vm.tdl
; departmental.a.1.vm.tdl

:begin :instance.

departmental_a1 := intrans_adj_le &
  [ STEM < "departmental" >,
    SYNSEM.LOCAL.CONT.KEY _departmental_rel ].

:end :instance.


; <<>>
; >> departure.n.1.vm.tdl
; departure.n.1.vm.tdl

:begin :instance.

departure_n1 := noun_ppof_word_le &
  [ STEM < "departure" >,
    SYNSEM.LOCAL.CONT.KEY _departure_rel ].

:end :instance.


; <<>>
; >> depend.v.1.tdl
; depend.v.1.tdl

:begin :instance.

depend_on_v1 := mv_empty_prep_intrans_le &
  [ STEM < "depend" >,
    SYNSEM.LOCAL.CONT [ KEY _depend_on_rel,
			COMPKEY _on_rel ] ].

:end :instance.


; <<>>
; >> dependent.a.1.vm.tdl
; dependent.a.1.vm.tdl

:begin :instance.

dependent_a1 := intrans_adj_le &
  [ STEM < "dependent" >,
    SYNSEM.LOCAL.CONT.KEY _dependent_rel ].

:end :instance.


; <<>>
; >> desire.n.1.vm.tdl
; desire.n.1.vm.tdl

:begin :instance.

desire_n1 := intr_noun_word_le &
  [ STEM < "desire" >,
    SYNSEM.LOCAL.CONT.KEY _desire_n_rel ].

:end :instance.


; <<>>
; >> desire.v.1.vm.tdl
; desire.v.1.vm.tdl

:begin :instance.

desire_v1 := mv_np_trans_le &
  [ STEM < "desire" >,
    SYNSEM.LOCAL.CONT.KEY _desire_v_rel ].

:end :instance.


; <<>>
; >> desire.v.2.vm.tdl
; desire.v.2.vm.tdl

:begin :instance.

desire_v2 := mv_subj_equi_le &
  [ STEM < "desire" >,
    SYNSEM.LOCAL.CONT.KEY _desire_v2_rel ].

:end :instance.


; <<>>
; >> desire.v.3.vm.tdl
; desire.v.3.vm.tdl

:begin :instance.

desire_v3 := mv_cp_non_trans_le &
  [ STEM < "desire" >,
    SYNSEM.LOCAL.CONT.KEY _desire_v_rel ].

:end :instance.


; <<>>
; >> desk.n.1.vm.tdl
; desk.n.1.vm.tdl

:begin :instance.

desk_n1 := intr_noun_word_le &
  [ STEM < "desk" >,
    SYNSEM.LOCAL.CONT.KEY _desk_rel ].

:end :instance.


; <<>>
; >> despite.p.1.tdl
; despite.p.1.tdl

:begin :instance.

despite := prep_le &
  [ STEM < "despite" >,
    SYNSEM.LOCAL.CONT.KEY _despite_rel ].

:end :instance.


; <<>>
; >> detail.n.1.vm.tdl
; detail.n.1.vm.tdl

:begin :instance.

detail_n1 := intr_noun_word_le &
  [ STEM < "detail" >,
    SYNSEM.LOCAL.CONT.KEY _detail_rel ].

:end :instance.


; <<>>
; >> detailed.a.1.vm.tdl
; detailed.a.1.vm.tdl

:begin :instance.

detailed_a1 := intrans_adj_le &
  [ STEM < "detailed" >,
    SYNSEM.LOCAL.CONT.KEY _detailed_rel ].

:end :instance.


; <<>>
; >> determine.v.1.vm.tdl
; determine.v.1.vm.tdl

:begin :instance.

determine_v1 := mv_np_trans_le &
  [ STEM < "determine" >,
    SYNSEM.LOCAL.CONT.KEY _determine_rel ].

:end :instance.


; <<>>
; >> determine.v.2.vm.tdl
; determine.v.2.vm.tdl

:begin :instance.

determine_v2 := mv_cp_non_trans_le &
  [ STEM < "determine" >,
    SYNSEM.LOCAL.CONT.KEY _determine_rel ].

:end :instance.


; <<>>
; >> develop.v.1.vm.tdl
; develop.v.1.vm.tdl

:begin :instance.

develop_v1 := mv_np_trans_le &
  [ STEM < "develop" >,
    SYNSEM.LOCAL.CONT.KEY _develop_rel ].

:end :instance.


; <<>>
; >> devito.n.1.tdl
; devito.n.1.tdl

:begin :instance.

devito := proper_le &
  [ STEM < "devito" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'devito ].

:end :instance.


; <<>>
; >> devote.v.1.vm.tdl
; devote.v.1.vm.tdl

:begin :instance.

devote_v1 := mv_to_trans_le &
  [ STEM < "devote" >,
    SYNSEM.LOCAL.CONT.KEY _devote_rel ].

:end :instance.


; <<>>
; >> dfki.n.1.vm.tdl
; dfki.n.1.vm.tdl

:begin :instance.

DFKI_n1 := proper_le &
  [ STEM < "dfki" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'DFKI ].

:end :instance.


; <<>>
; >> dial.v.1.vm.tdl
; dial.v.1.vm.tdl

:begin :instance.

dial_v1 := mv_np_trans_le &
  [ STEM < "dial" >,
    SYNSEM.LOCAL.CONT.KEY _dial_rel ].

:end :instance.


; <<>>
; >> diary.n.1.vm.tdl
; diary.n.1.vm.tdl

:begin :instance.

diary_n1 := intr_noun_word_le &
  [ STEM < "diary" >,
    SYNSEM.LOCAL.CONT.KEY _diary_rel ].

:end :instance.


; <<>>
; >> dicussion.n.1.vm.tdl
; dicussion.n.1.vm.tdl

:begin :instance.

dicussion_n1 := intr_noun_word_le &
  [ STEM < "dicussion" >,
    SYNSEM.LOCAL.CONT.KEY _dicussion_rel ].

:end :instance.


; <<>>
; >> didnt.vx.1.tdl
; didnt.vx.1.tdl

:begin :instance.

did1_neg := do_aux_neg_past_mle1 &
  [ STEM < "didn", "t" > ].

:end :instance.


; <<>>
; >> didnt.vx.2.tdl
; didnt.vx.2.tdl

:begin :instance.

did1_neg_subj := do_aux_neg_subj_mle1 &
  [ STEM < "didn", "t" > ].

:end :instance.


; <<>>
; >> die.v.1.tdl
; die.v.1.tdl

:begin :instance.

die1 := mv_unacc_le &
  [ STEM < "die" >,
    SYNSEM.LOCAL.CONT.KEY _die_rel ].

:end :instance.


; <<>>
; >> differ.from.v.1.vm.tdl
; differ.from.v.1.vm.tdl

:begin :instance.

differ_from_v1 := mv_empty_prep*_intrans_le &
  [ STEM < "differ" >,
    SYNSEM.LOCAL.CONT [ KEY _differ_from_rel,
			COMPKEY _from_rel ] ].

:end :instance.


; <<>>
; >> difference.n.1.vm.tdl
; difference.n.1.vm.tdl

:begin :instance.

difference_n1 := intr_noun_word_le &
  [ STEM < "difference" >,
    SYNSEM.LOCAL.CONT.KEY _difference_rel ].

:end :instance.


; <<>>
; >> different.a.1.vm.tdl
; different.a.1.vm.tdl

:begin :instance.

different_a1 := trans_adj_le &
  [ STEM < "different" >,
    SYNSEM.LOCAL.CONT [ KEY _different_rel,
			COMPKEY _from_rel ] ].

:end :instance.


; <<>>
; >> differently.a.1.vm.tdl
; differently.a.1.vm.tdl

:begin :instance.

differently := vp_adv_post_word_le &
  [ STEM < "differently" >,
    SYNSEM.LOCAL.CONT.KEY _differently_rel ].

:end :instance.


; <<>>
; >> difficult.a.1.vm.tdl
; difficult.a.1.vm.tdl

:begin :instance.

difficult_a1 := intrans_adj_le &
  [ STEM < "difficult" >,
    SYNSEM.LOCAL.CONT.KEY _difficult_rel ].

:end :instance.


; <<>>
; >> difficulty.n.1.vm.tdl
; difficulty.n.1.vm.tdl

:begin :instance.

difficulty_n1 := intr_noun_word_le &
  [ STEM < "difficulty" >,
    SYNSEM.LOCAL.CONT.KEY _difficulty_rel ].

:end :instance.


; <<>>
; >> digest.v.1.vm.tdl
; digest.v.1.vm.tdl

:begin :instance.

digest_v1 := mv_np_trans_le &
  [ STEM < "digest" >,
    SYNSEM.LOCAL.CONT.KEY _digest_rel ].

:end :instance.


; <<>>
; >> dine.v.1.tdl
; dine.v.1.tdl

:begin :instance.

dine1 := mv_unerg_le & 
  [ STEM < "dine" >,
    SYNSEM.LOCAL.CONT.KEY _dine_rel ].

:end :instance.


; <<>>
; >> dinner.n.1.tdl
; dinner.n.1.tdl

:begin :instance.

dinner_time_n1 := hour_word_le &
  [ STEM < "dinner" >,
    SYNSEM.LOCAL.CONT.KEY _dinner_time_rel ].

:end :instance.


; <<>>
; >> dinner.n.1.vm.tdl
; dinner.n.1.vm.tdl

:begin :instance.

dinner_n1 := intr_noun_word_le &
  [ STEM < "dinner" >,
    SYNSEM.LOCAL.CONT.KEY _dinner_rel ].

:end :instance.


; <<>>
; >> direct.a.1.vm.tdl
; direct.a.1.vm.tdl

:begin :instance.

direct_a1 := intrans_adj_le &
  [ STEM < "direct" >,
    SYNSEM.LOCAL.CONT.KEY _direct_rel ].

:end :instance.


; <<>>
; >> direction.n.1.vm.tdl
; direction.n.1.vm.tdl

:begin :instance.

direction_n1 := intr_noun_word_le &
  [ STEM < "direction" >,
    SYNSEM.LOCAL.CONT.KEY _direction_rel ].

:end :instance.


; <<>>
; >> directive.n.1.vm.tdl
; directive.n.1.vm.tdl

:begin :instance.

directive_n1 := intr_noun_word_le &
  [ STEM < "directive" >,
    SYNSEM.LOCAL.CONT.KEY _directive_rel ].

:end :instance.


; <<>>
; >> directly.a.1.vm.tdl
; directly.a.1.vm.tdl

:begin :instance.

directly_adv1 := vp_adv_post_word_le &
  [ STEM < "directly" >,
    SYNSEM.LOCAL.CONT.KEY _directly_rel ].

:end :instance.


; <<>>
; >> director.n.1.vm.tdl
; director.n.1.vm.tdl

:begin :instance.

director_n1 := intr_noun_word_le &
  [ STEM < "director" >,
    SYNSEM.LOCAL.CONT.KEY _director_rel ].

:end :instance.


; <<>>
; >> disadvantageous.a.1.vm.tdl
; disadvantageous.a.1.vm.tdl

:begin :instance.

disadvantageous_a1 := intrans_adj_le &
  [ STEM < "disadvantageous" >,
    SYNSEM.LOCAL.CONT.KEY _disadvantageous_rel ].

:end :instance.


; <<>>
; >> disagree.v.1.vm.tdl
; disagree.v.1.vm.tdl

:begin :instance.

disagree_v1 := mv_unerg_le &
  [ STEM < "disagree" >,
    SYNSEM.LOCAL.CONT.KEY _disagree_rel ].

:end :instance.


; <<>>
; >> disagree.with.v.1.vm.tdl
; disagree.with.v.1.vm.tdl

:begin :instance.

disagree_with_v1 := mv_empty_prep_intrans_le &
  [ STEM < "disagree" >,
    SYNSEM.LOCAL.CONT [ KEY _disagree_with_rel,
			COMPKEY _with_rel ] ].

:end :instance.


; <<>>
; >> disappoint.v.1.vm.tdl
; disappoint.v.1.vm.tdl

:begin :instance.

disappoint_v1 := mv_np_trans_le &
  [ STEM < "disappoint" >,
    SYNSEM.LOCAL.CONT.KEY _disappoint_rel ].

:end :instance.


; <<>>
; >> discontinue.v.1.vm.tdl
; discontinue.v.1.vm.tdl

:begin :instance.

discontinue_v1 := mv_np_trans_le &
  [ STEM < "discontinue" >,
    SYNSEM.LOCAL.CONT.KEY _discontinue_rel ].

:end :instance.


; <<>>
; >> discover.v.1.vm.tdl
; discover.v.1.vm.tdl

:begin :instance.

discover_v1 := mv_np_trans_le &
  [ STEM < "discover" >,
    SYNSEM.LOCAL.CONT.KEY _discover_rel ].

:end :instance.


; <<>>
; >> discover.v.2.vm.tdl
; discover.v.2.vm.tdl

:begin :instance.

discover_v2 := mv_unerg_le &
  [ STEM < "discover" >,
    SYNSEM.LOCAL.CONT.KEY _discover_rel ].

:end :instance.


; <<>>
; >> discover.v.3.vm.tdl
; discover.v.3.vm.tdl

:begin :instance.

discover_v3 := mv_cp_non_trans_le &
  [ STEM < "discover" >,
    SYNSEM.LOCAL.CONT.KEY _discover_rel ].

:end :instance.


; <<>>
; >> discuss.v.1.vm.tdl
; discuss.v.1.vm.tdl

:begin :instance.

discuss_v1 := mv_np_trans_le &
  [ STEM < "discuss" >,
    SYNSEM.LOCAL.CONT.KEY _discuss_rel ].

:end :instance.


; <<>>
; >> discussion.n.1.vm.tdl
; discussion.n.1.vm.tdl

:begin :instance.

discussion_n1 := deverbal_noun_intr_word_le &
  [ STEM < "discussion" >,
    SYNSEM.LOCAL.CONT.ALTKEY _discuss_rel ].

:end :instance.


; <<>>
; >> discussion.n.2.vm.tdl
; discussion.n.2.vm.tdl

:begin :instance.

discussion_n2 := deverbal_massn_le &
  [ STEM < "discussion" >,
    SYNSEM.LOCAL.CONT.ALTKEY _discuss_rel ].

:end :instance.


; <<>>
; >> dislike.v.1.vm.tdl
; dislike.v.1.vm.tdl

:begin :instance.

dislike_v1 := mv_np_trans_le &
  [ STEM < "dislike" >,
    SYNSEM.LOCAL.CONT.KEY _dislike_rel ].

:end :instance.


; <<>>
; >> displace.v.1.vm.tdl
; displace.v.1.vm.tdl

:begin :instance.

displace_v1 := mv_np_trans_le &
  [ STEM < "displace" >,
    SYNSEM.LOCAL.CONT.KEY _displace_rel ].

:end :instance.


; <<>>
; >> disposal.n.1.vm.tdl
; disposal.n.1.vm.tdl

:begin :instance.

disposal_n1 := massn_le &
  [ STEM < "disposal" >,
    SYNSEM.LOCAL.CONT.KEY _disposal_rel ].

:end :instance.


; <<>>
; >> distance.n.1.vm.tdl
; distance.n.1.vm.tdl

:begin :instance.

distance_n1 := intr_noun_word_le &
  [ STEM < "distance" >,
    SYNSEM.LOCAL.CONT.KEY _distance_rel ].

:end :instance.


; <<>>
; >> distance.n.2.vm.tdl
; distance.n.2.vm.tdl

:begin :instance.

distance_n2 := massn_le &
  [ STEM < "distance" >,
    SYNSEM.LOCAL.CONT.KEY _distance_rel ].

:end :instance.


; <<>>
; >> distasteful.a.1.vm.tdl
; distasteful.a.1.vm.tdl

:begin :instance.

distasteful_a1 := intrans_adj_le &
  [ STEM < "distasteful" >,
    SYNSEM.LOCAL.CONT.KEY _distasteful_rel ].

:end :instance.


; <<>>
; >> distress.n.1.vm.tdl
; distress.n.1.vm.tdl

:begin :instance.

distress_n1 := massn_le &
  [ STEM < "distress" >,
    SYNSEM.LOCAL.CONT.KEY _distress_rel ].

:end :instance.


; <<>>
; >> distribute.v.1.vm.tdl
; distribute.v.1.vm.tdl

:begin :instance.

distribute_v1 := mv_np_trans_le &
  [ STEM < "distribute" >,
    SYNSEM.LOCAL.CONT.KEY _distribute_rel ].

:end :instance.


; <<>>
; >> distribution.n.1.vm.tdl
; distribution.n.1.vm.tdl

:begin :instance.

distribution_n1 := massn_le &
  [ STEM < "distribution" >,
    SYNSEM.LOCAL.CONT.KEY _distribution_rel ].

:end :instance.


; <<>>
; >> disturb.v.1.vm.tdl
; disturb.v.1.vm.tdl

:begin :instance.

disturb_v1 := mv_np_trans_le &
  [ STEM < "disturb" >,
    SYNSEM.LOCAL.CONT.KEY _disturb_rel ].

:end :instance.


; <<>>
; >> divide.v.1.vm.tdl
; divide.v.1.vm.tdl

:begin :instance.

divide_v1 := mv_np_trans_le &
  [ STEM < "divide" >,
    SYNSEM.LOCAL.CONT.KEY _divide_rel ].

:end :instance.


; <<>>
; >> do.v.2.tdl
; do.v.2.tdl

:begin :instance.

do2 := mv_np_trans_le &
  [ STEM < "do" >,
    SYNSEM.LOCAL.CONT.KEY _do_rel &
	                  [ UND non_expl-ind ] ].

:end :instance.


; <<>>
; >> do.vx.1.tdl
; do.vx.1.tdl

:begin :instance.

do1_pos := do_aux_pos_le &
  [ STEM < "do" > ].

:end :instance.


; <<>>
; >> do.without.v.1.vm.tdl
; do.without.v.1.vm.tdl

:begin :instance.

do_without_v1 := mv_empty_prep_intrans_le &
  [ STEM < "do" >,
    SYNSEM.LOCAL.CONT [ KEY _do_without_rel,
			COMPKEY _without_rel ] ].

:end :instance.


; <<>>
; >> doable.a.1.vm.tdl
; doable.a.1.vm.tdl

:begin :instance.

doable_a1 := intrans_adj_le &
  [ STEM < "doable" >,
    SYNSEM.LOCAL.CONT.KEY _doable_rel ].

:end :instance.


; <<>>
; >> doctor.n.1.vm.tdl
; doctor.n.1.vm.tdl

:begin :instance.

doctor_n1 := intr_noun_word_le &
  [ STEM < "doctor" >,
    SYNSEM.LOCAL.CONT.KEY _doctor_rel ].

:end :instance.


; <<>>
; >> doctor.n.2.tdl
; doctor.n.2.tdl

:begin :instance.

doctor_ttl := title_le &
  [ STEM < "doctor" >,
    SYNSEM.LOCAL.CONT.KEY _doctor_ttl_rel ].

:end :instance.


; <<>>
; >> doctors.a.1.vm.tdl
; doctor.a.1.vm.tdl

:begin :instance.

doctors_a1 := compound_adj_word_mle1 &
  [ STEM < "doctor", "s" >,
    SYNSEM.LOCAL.CONT.KEY _doctors_rel ].

:end :instance.


; <<>>
; >> doctoral.a.1.vm.tdl
; doctoral.a.1.vm.tdl

:begin :instance.

doctoral_a1 := intrans_adj_le &
  [ STEM < "doctoral" >,
    SYNSEM.LOCAL.CONT.KEY _doctoral_rel ].

:end :instance.


; <<>>
; >> document.n.1.vm.tdl
; document.n.1.vm.tdl

:begin :instance.

document_n1 := intr_noun_word_le &
  [ STEM < "document" >,
    SYNSEM.LOCAL.CONT.KEY _document_rel ].

:end :instance.


; <<>>
; >> doesnt.vx.1.tdl
; doesnt.vx.1.tdl

:begin :instance.

does1_neg := doesnt_aux_neg_pres_mle1 &
  [ STEM < "doesn", "t" > ].

:end :instance.


; <<>>
; >> dollar.n.1.tdl
; dollar.n.1.tdl

:begin :instance.

dollar_n1 := intr_noun_word_le &
  [ STEM < "dollar" >,
    SYNSEM.LOCAL.CONT.KEY _dollar_rel ].

:end :instance.


; <<>>
; >> domain.n.1.vm.tdl
; domain.n.1.vm.tdl

:begin :instance.

domain_n1 := intr_noun_word_le &
  [ STEM < "domain" >,
    SYNSEM.LOCAL.CONT.KEY _domain_rel ].

:end :instance.


; <<>>
; >> dont.c.1.tdl
; dont.c.1.tdl

:begin :instance.

dont := lex_imp_mle1 &
  [ STEM < "don", "t" >,
    SYNSEM.LOCAL [ AGR.PNG.PN 2per,
		   CONT.KEY _dont_rel ] ].

:end :instance.


; <<>>
; >> dont.c.2.tdl
; dont.c.2.tdl

:begin :instance.

dont_2 := lex_imp_mle1 &
  [ STEM < "do", "not" >,
    SYNSEM.LOCAL [ AGR.PNG.PN 2per,
		   CONT.KEY _dont_rel ] ].

:end :instance.


; <<>>
; >> dont.vx.1.tdl
; dont.vx.1.tdl

:begin :instance.

do1_neg := dont_aux_neg_pres_mle1 &
  [ STEM < "don", "t" > ].

:end :instance.


; <<>>
; >> donate.v.1.tdl
; donate.v.1.tdl

:begin :instance.

donate1 := mv_to*_trans_le &
  [ STEM < "donate" >,
    SYNSEM.LOCAL.CONT.KEY _donate_rel ].

:end :instance.


; <<>>
; >> donation.n.1.vm.tdl
; donation.n.1.vm.tdl

:begin :instance.

donation_n1 := deverbal_noun_intr_word_le &
  [ STEM < "donation" >,
    SYNSEM.LOCAL.CONT.ALTKEY _donate_rel ].

:end :instance.


; <<>>
; >> double.a.1.vm.tdl
; double.a.1.vm.tdl

:begin :instance.

double_a1 := intrans_adj_le &
  [ STEM < "double" >,
    SYNSEM.LOCAL.CONT.KEY _double_rel ].

:end :instance.


; <<>>
; >> doubtless.a.1.vm.tdl
; doubtless.a.1.vm.tdl

:begin :instance.

doubtless_adv1 := adv_pre_word_le &
  [ STEM < "doubtless" >,
    SYNSEM.LOCAL.CONT.KEY _doubtless_rel ].

:end :instance.


; <<>>
; >> down.p.1.tdl
; down.p.1.tdl

:begin :instance.

down := prep_nomod_le &
  [ STEM < "down" >,
    SYNSEM.LOCAL.CONT.KEY _down_rel ].

:end :instance.


; <<>>
; >> downright.a.1.tdl
; downright.a.1.tdl

:begin :instance.

downright_deg := degree_spec_le &
  [ STEM < "downright" >,
    SYNSEM.LOCAL.CONT.KEY _downright_deg_rel ].

:end :instance.


; <<>>
; >> downstroke.n.1.vm.tdl
; downstroke.n.1.vm.tdl

:begin :instance.

downstroke_n1 := intr_noun_word_le &
  [ STEM < "downstroke" >,
    SYNSEM.LOCAL.CONT.KEY _downstroke_rel ].

:end :instance.


; <<>>
; >> dr.n.1.tdl
; dr.n.1.tdl

:begin :instance.

dr_ttl := title_le &
  [ STEM < "dr" >,
    SYNSEM.LOCAL.CONT.KEY _doctor_ttl_rel ].

:end :instance.


; <<>>
; >> draft.n.1.vm.tdl
; draft.n.1.vm.tdl

:begin :instance.

draft_n1 := intr_noun_word_le &
  [ STEM < "draft" >,
    SYNSEM.LOCAL.CONT.KEY _draft_rel ].

:end :instance.


; <<>>
; >> draw.aside.v.1.tdl
; draw.aside.v.1.tdl

:begin :instance.

draw_aside_v1 := mv_particle_np_le &
  [ STEM < "draw" >,
    SYNSEM.LOCAL.CONT [ KEY _draw_aside_rel,
			COMPKEY _aside_rel ] ].

:end :instance.


; <<>>
; >> draw.aside.v.2.tdl
; draw.aside.v.2.tdl

:begin :instance.

draw_aside_v2 := mv_particle_le &
  [ STEM < "draw" >,
    SYNSEM.LOCAL.CONT [ KEY _draw_aside_rel,
			COMPKEY _aside_rel ] ].

:end :instance.


; <<>>
; >> draw.away.v.1.tdl
; draw.away.v.1.tdl

:begin :instance.

draw_away_v1 := mv_particle_np_le &
  [ STEM < "draw" >,
    SYNSEM.LOCAL.CONT [ KEY _draw_away_rel,
			COMPKEY _away_rel ] ].

:end :instance.


; <<>>
; >> draw.away.v.2.tdl
; draw.away.v.2.tdl

:begin :instance.

draw_away_v2 := mv_particle_le &
  [ STEM < "draw" >,
    SYNSEM.LOCAL.CONT [ KEY _draw_away_rel,
			COMPKEY _away_rel ] ].

:end :instance.


; <<>>
; >> draw.back.v.1.tdl
; draw.back.v.1.tdl

:begin :instance.

draw_back_v1 := mv_particle_np_le &
  [ STEM < "draw" >,
    SYNSEM.LOCAL.CONT [ KEY _draw_back_rel,
			COMPKEY _back_adv_rel ] ].

:end :instance.


; <<>>
; >> draw.back.v.2.tdl
; draw.back.v.2.tdl

:begin :instance.

draw_back_v2 := mv_particle_le &
  [ STEM < "draw" >,
    SYNSEM.LOCAL.CONT [ KEY _draw_back_rel,
			COMPKEY _back_adv_rel ] ].

:end :instance.


; <<>>
; >> draw.forth.v.1.tdl
; draw.forth.v.1.tdl

:begin :instance.

draw_forth_v1 := mv_particle_np_le &
  [ STEM < "draw" >,
    SYNSEM.LOCAL.CONT [ KEY _draw_forth_rel,
			COMPKEY _forth_rel ] ].

:end :instance.


; <<>>
; >> draw.on.v.1.tdl
; draw.on.v.1.tdl

:begin :instance.

draw_on_v1 := mv_particle_np_le &
  [ STEM < "draw" >,
    SYNSEM.LOCAL.CONT [ KEY _draw_on_rel,
			COMPKEY _on_rel ] ].

:end :instance.


; <<>>
; >> drawing.n.1.vm.tdl
; drawing.n.1.vm.tdl

:begin :instance.

drawing_n1 := intr_noun_word_le &
  [ STEM < "drawing" >,
    SYNSEM.LOCAL.CONT.KEY _drawing_rel ].

:end :instance.


; <<>>
; >> drink.n.1.vm.tdl
; drink.n.1.vm.tdl

:begin :instance.

drink_n1 := intr_noun_word_le &
  [ STEM < "drink" >,
    SYNSEM.LOCAL.CONT.KEY _drink_n_rel ].

:end :instance.


; <<>>
; >> drink.v.1.tdl
; drink.v.1.tdl

:begin :instance.

drink_v1 := mv_np*_trans_le &
  [ STEM < "drink" >,
    SYNSEM.LOCAL.CONT.KEY _drink_rel ].

:end :instance.


; <<>>
; >> drive.v.1.vm.tdl
; drive.v.1.vm.tdl

:begin :instance.

drive_v1 := mv_np_trans_le &
  [ STEM < "drive" >,
    SYNSEM.LOCAL.CONT.KEY _drive_rel ].

:end :instance.


; <<>>
; >> driver.n.1.vm.tdl
; driver.n.1.vm.tdl

:begin :instance.

driver_n1 := intr_noun_word_le &
  [ STEM < "driver" >,
    SYNSEM.LOCAL.CONT.KEY _driver_rel ].

:end :instance.


; <<>>
; >> drop.v.1.vm.tdl
; drop.v.1.vm.tdl

:begin :instance.

drop_v1 := mv_np_trans_le &
  [ STEM < "drop" >,
    SYNSEM.LOCAL.CONT.KEY _drop_rel ].

:end :instance.


; <<>>
; >> drop.v.2.vm.tdl
; drop.v.2.vm.tdl

:begin :instance.

drop_v2 := mv_unacc_le &
  [ STEM < "drop" >,
    SYNSEM.LOCAL.CONT.KEY _drop_und_rel ].

:end :instance.


; <<>>
; >> drunk.a.1.vm.tdl
; drunk.a.1.vm.tdl

:begin :instance.

drunk_a1 := intrans_adj_le &
  [ STEM < "drunk" >,
    SYNSEM.LOCAL.CONT.KEY _drunk_rel ].

:end :instance.


; <<>>
; >> due.a.1.vm.tdl
; due.a.1.vm.tdl

:begin :instance.

due_a1 := intrans_adj_le &
  [ STEM < "due" >,
    SYNSEM.LOCAL.CONT.KEY _due_rel ].

:end :instance.


; <<>>
; >> due.to.p.1.tdl
; due.to.p.1.tdl

:begin :instance.

due_to_p := prep_mle1 &
  [ STEM < "due", "to" >,
    SYNSEM.LOCAL.CONT.KEY _due_to_rel ].

:end :instance.


; <<>>
; >> dummy.a.1.tdl
; dummy.a.1.tdl

:begin :instance.

dummy_a1 := intrans_adj_le &
  [ STEM < "dummy" >,
    SYNSEM.LOCAL.CONT.KEY _dummy_rel ].

:end :instance.


; <<>>
; >> duration.n.1.vm.tdl
; duration.n.1.vm.tdl

:begin :instance.

duration_n1 := intr_noun_word_le &
  [ STEM < "duration" >,
    SYNSEM.LOCAL.CONT.KEY _duration_rel ].

:end :instance.


; <<>>
; >> during.p.1.tdl
; during.p.1.tdl

:begin :instance.

during := prep_le &
  [ STEM < "during" >,
    SYNSEM.LOCAL.CONT.KEY _during_rel ].

:end :instance.


; <<>>
; >> dusseldorf.n.1.vm.tdl
; dusseldorf.n.1.vm.tdl

:begin :instance.

Dusseldorf_n1 := proper_le &
  [ STEM < "dusseldorf" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'Dusseldorf ].

:end :instance.


; <<>>
; >> duty.n.1.vm.tdl
; duty.n.1.vm.tdl

:begin :instance.

duty_n1 := intr_noun_word_le &
  [ STEM < "duty" >,
    SYNSEM.LOCAL.CONT.KEY _duty_rel ].

:end :instance.


; <<>>
; >> duty.n.2.vm.tdl
; duty.n.2.vm.tdl

:begin :instance.

duty_n2 := massn_le &
  [ STEM < "duty" >,
    SYNSEM.LOCAL.CONT.KEY _duty_rel ].

:end :instance.


; <<>>
; >> each.c.1.tdl
; each.c.1.tdl

:begin :instance.

each := pdet_sg_le &
  [ STEM < "each" >,
    SYNSEM.LOCAL.CONT.KEY _each_rel ].

:end :instance.


; <<>>
; >> each.other.n.1.tdl
; each.other.n.1.tdl

:begin :instance.

each_other := recip_pro_mle1 &
  [ STEM < "each", "other" >,
    SYNSEM.LOCAL.CONT.KEY.INST.PNG.PN non1sg ].

:end :instance.


; <<>>
; >> earlier.a.1.vm.tdl
; earlier.a.1.vm.tdl

:begin :instance.

earlier_a1 := intrans_adj_le &
  [ STEM < "earlier" >,
    SYNSEM.LOCAL.CONT.KEY _earlier_rel ].

:end :instance.


; <<>>
; >> earliest.a.1.vm.tdl
; earliest.a.1.vm.tdl

:begin :instance.

earliest_a1 := intrans_adj_le &
  [ STEM < "earliest" >,
    SYNSEM.LOCAL.CONT.KEY _earliest_rel ].

:end :instance.


; <<>>
; >> early.a.1.vm.tdl
; early.a.1.vm.tdl

:begin :instance.

early_a1 := intrans_adj_le &
  [ STEM < "early" >,
    SYNSEM.LOCAL.CONT.KEY _early_rel ].

:end :instance.


; <<>>
; >> early.a.2.vm.tdl
; early.a.2.vm.tdl

:begin :instance.

early := vp_adv_post_word_le &
  [ STEM < "early" >,
    SYNSEM.LOCAL.CONT.KEY _early_adv_rel ].

:end :instance.


; <<>>
; >> earnest.a.1.vm.tdl
; earnest.a.1.vm.tdl

:begin :instance.

earnest_a1 := intrans_adj_le &
  [ STEM < "earnest" >,
    SYNSEM.LOCAL.CONT.KEY _earnest_rel ].

:end :instance.


; <<>>
; >> easily.a.1.vm.tdl
; easily.a.1.vm.tdl

:begin :instance.

easily_adv1 := adv_pre_word_le &
  [ STEM < "easily" >,
    SYNSEM.LOCAL.CONT.KEY _easily_rel ].

:end :instance.


; <<>>
; >> easter.n.1.tdl
; easter.n.1.tdl

:begin :instance.

easter := holiday_word_le &
  [ STEM < "easter" >,
    SYNSEM.LOCAL.CONT.KEY.DAY 'easter ].

:end :instance.


; <<>>
; >> easter.monday.n.1.tdl
; easter.monday.n.1.tdl

:begin :instance.

easter_monday := holiday_word_mle1 &
  [ STEM < "easter", "monday" >,
    SYNSEM.LOCAL.CONT.KEY.DAY 'easter_monday ].

:end :instance.


; <<>>
; >> easter.sunday.n.1.tdl
; easter.sunday.n.1.tdl

:begin :instance.

easter_sunday := holiday_word_mle1 &
  [ STEM < "easter", "sunday" >,
    SYNSEM.LOCAL.CONT.KEY.DAY 'easter_sunday ].

:end :instance.


; <<>>
; >> easter.weekend.n.1.tdl
; easter.weekend.n.1.tdl

:begin :instance.

easter_weekend := holiday_word_mle1 &
  [ STEM < "easter", "weekend" >,
    SYNSEM.LOCAL.CONT.KEY.DAY 'easter_weekend ].

:end :instance.


; <<>>
; >> easy.a.1.vm.tdl
; easy.a.1.vm.tdl

:begin :instance.

easy_a1 := intrans_adj_le &
  [ STEM < "easy" >,
    SYNSEM.LOCAL.CONT.KEY _easy_adj_rel ].

:end :instance.


; <<>>
; >> eat.v.1.tdl
; eat.v.1.tdl

:begin :instance.

eat1 := mv_np*_trans_le &
  [ STEM < "eat" >,
    SYNSEM.LOCAL.CONT.KEY _eat_rel ].

:end :instance.


; <<>>
; >> education.n.1.vm.tdl
; education.n.1.vm.tdl

:begin :instance.

education_n1 := massn_le &
  [ STEM < "education" >,
    SYNSEM.LOCAL.CONT.KEY _education_rel ].

:end :instance.


; <<>>
; >> educational.a.1.vm.tdl
; educational.a.1.vm.tdl

:begin :instance.

educational_a1 := intrans_adj_le &
  [ STEM < "educational" >,
    SYNSEM.LOCAL.CONT.KEY _educational_rel ].

:end :instance.


; <<>>
; >> effect.n.1.vm.tdl
; effect.n.1.vm.tdl

:begin :instance.

effect_n1 := intr_noun_word_le &
  [ STEM < "effect" >,
    SYNSEM.LOCAL.CONT.KEY _effect_rel ].

:end :instance.


; <<>>
; >> efficient.a.1.vm.tdl
; efficient.a.1.vm.tdl

:begin :instance.

efficient_a1 := intrans_adj_le &
  [ STEM < "efficient" >,
    SYNSEM.LOCAL.CONT.KEY _efficient_rel ].

:end :instance.


; <<>>
; >> eh.c.1.vm.tdl
; eh.c.1.vm.tdl

:begin :instance.

eh_root := disc_adv_le &
  [ STEM < "eh" >,
    SYNSEM.LOCAL.CONT.KEY.EXCL 'eh ].

:end :instance.


; <<>>
; >> eight.c.1.tdl
; eight.c.1.tdl

:begin :instance.

eight := bare_unspecified_card_le & 
  [  STEM < "eight" >,
     SYNSEM.LOCAL [ CAT.HEAD intadj1,
		    CONT.--STEMLISZT.LIST < [ CONST_VALUE 2 ], ... > ] ].
:end :instance.


; <<>>
; >> eight.hour.n.1.tdl
; eight.hour.n.1.tdl

:begin :instance.

eight_hour := hour_word_le &
  [ STEM < "eight" >,
    SYNSEM.LOCAL.CONT.KEY.HOUR 8 ].

:end :instance.


; <<>>
; >> eighteen.c.1.tdl
; eighteen.c.1.tdl

:begin :instance.

eighteen := bare_unspecified_card_le & 
  [  STEM < "eighteen" >,
     SYNSEM.LOCAL [ CAT.HEAD intadj1,
		    CONT.--STEMLISZT.LIST < [ CONST_VALUE 18 ], ... > ] ].
:end :instance.


; <<>>
; >> eighteenth.a.1.vm.tdl
; eighteenth.a.1.vm.tdl

:begin :instance.

eighteenth := ordinal_adj_le &
  [ STEM < "eighteenth" >,
    SYNSEM.LOCAL.CONT.KEY.ORD 18 ].

:end :instance.


; <<>>
; >> eighteenth.day.n.1.tdl
; eighteenth.day.n.1.tdl

:begin :instance.

eighteenth_day := day_of_month_le &
  [ STEM < "eighteenth" >,
    SYNSEM.LOCAL.CONT.KEY.DAY 18 ].

:end :instance.


; <<>>
; >> eighth.a.1.vm.tdl
; eighth.a.1.vm.tdl

:begin :instance.

eighth := ordinal_adj_le &
  [ STEM < "eighth" >,
    SYNSEM.LOCAL.CONT.KEY.ORD 8 ].

:end :instance.


; <<>>
; >> eighth.day.n.1.tdl
; eighth.day.n.1.tdl

:begin :instance.

eighth_day := day_of_month_le &
  [ STEM < "eighth" >,
    SYNSEM.LOCAL.CONT.KEY.DAY 8 ].

:end :instance.


; <<>>
; >> eighty.c.1.tdl
; eighty.c.1.tdl

:begin :instance.

eighty_w_comps := complemented_unspecified_card_le & 
  [ STEM < "eighty" >,
    SYNSEM.LOCAL [ CAT [HEAD intadj2,
			VALENCE.COMPS.FIRST.LOCAL.CAT.HEAD intadj1],
		   CONT.--STEMLISZT.LIST < [ CONST_VALUE 80 ], [] > ] ].

:end :instance.


; <<>>
; >> either.c.1.tdl
; either.c.1.tdl

:begin :instance.

either_conj := coord_a_le &
  [ STEM < "either" >,
    SYNSEM.LOCAL.CONJ either ].

:end :instance.


; <<>>
; >> either.a.2.tdl
; either.a.2.tdl

:begin :instance.

either := adv_post_word_le &
  [ STEM < "either" >,
    SYNSEM.LOCAL.CONT.KEY _either_also_rel ].

:end :instance.


; <<>>
; >> either.c.3.tdl
; either.c.3.tdl

:begin :instance.

either_det := pdet_le &
  [ STEM < "either" >,
    SYNSEM.LOCAL.CONT.KEY _either_rel ].

:end :instance.


; <<>>
; >> elect.v.1.vm.tdl
; elect.v.1.vm.tdl

:begin :instance.

elect_v1 := mv_subj_equi_le &
  [ STEM < "elect" >,
    SYNSEM.LOCAL.CONT.KEY _elect_rel ].

:end :instance.


; <<>>
; >> eleven.c.1.tdl
; eleven.c.1.tdl

:begin :instance.

eleven := bare_unspecified_card_le & 
  [  STEM < "eleven" >,
     SYNSEM.LOCAL [ CAT.HEAD intadj1,
		    CONT.--STEMLISZT.LIST < [ CONST_VALUE 11 ], ... > ] ].
:end :instance.


; <<>>
; >> eleven.hour.n.1.tdl
; eleven.hour.n.1.tdl

:begin :instance.

eleven_hour := hour_word_le &
  [ STEM < "eleven" >,
    SYNSEM.LOCAL.CONT.KEY.HOUR 11 ].

:end :instance.


; <<>>
; >> eleventh.a.1.vm.tdl
; eleventh.a.1.vm.tdl

:begin :instance.

eleventh := ordinal_adj_le &
  [ STEM < "eleventh" >,
    SYNSEM.LOCAL.CONT.KEY.ORD 11 ].

:end :instance.


; <<>>
; >> eleventh.day.n.1.tdl
; eleventh.day.n.1.tdl

:begin :instance.

eleventh_day := day_of_month_le &
  [ STEM < "eleventh" >,
    SYNSEM.LOCAL.CONT.KEY.DAY 11 ].

:end :instance.


; <<>>
; >> embarrassed.a.1.vm.tdl
; embarrassed.a.1.vm.tdl

:begin :instance.

embarrassed_a1 := intrans_adj_le &
  [ STEM < "embarrassed" >,
    SYNSEM.LOCAL.CONT.KEY _embarrassed_rel ].

:end :instance.


; <<>>
; >> emergency.n.1.vm.tdl
; emergency.n.1.vm.tdl

:begin :instance.

emergency_n1 := intr_noun_word_le &
  [ STEM < "emergency" >,
    SYNSEM.LOCAL.CONT.KEY _emergency_rel ].

:end :instance.


; <<>>
; >> eminent.a.1.vm.tdl
; eminent.a.1.vm.tdl

:begin :instance.

eminent_a1 := intrans_adj_le &
  [ STEM < "eminent" >,
    SYNSEM.LOCAL.CONT.KEY _eminent_rel ].

:end :instance.


; <<>>
; >> employ.v.1.vm.tdl
; employ.v.1.vm.tdl

:begin :instance.

employ_v1 := mv_np_trans_le &
  [ STEM < "employ" >,
    SYNSEM.LOCAL.CONT.KEY _employ_rel ].

:end :instance.


; <<>>
; >> employee.n.1.tdl
; employee.n.1.tdl

:begin :instance.

employee_n1 := intr_noun_word_le &
  [ STEM < "employee" >,
    SYNSEM.LOCAL.CONT.KEY _employee_rel ].

:end :instance.


; <<>>
; >> employer.n.1.vm.tdl
; employer.n.1.vm.tdl

:begin :instance.

employer_n1 := intr_noun_word_le &
  [ STEM < "employer" >,
    SYNSEM.LOCAL.CONT.KEY _employer_rel ].

:end :instance.


; <<>>
; >> emptiness.n.1.vm.tdl
; emptiness.n.1.vm.tdl

:begin :instance.

emptiness_n1 := massn_le &
  [ STEM < "emptiness" >,
    SYNSEM.LOCAL.CONT.KEY _emptiness_rel ].

:end :instance.


; <<>>
; >> empty.a.1.vm.tdl
; empty.a.1.vm.tdl

:begin :instance.

empty_a1 := intrans_adj_le &
  [ STEM < "empty" >,
    SYNSEM.LOCAL.CONT.KEY _empty_rel ].

:end :instance.


; <<>>
; >> enable.v.1.vm.tdl
; enable.v.1.vm.tdl

:begin :instance.

enable_v1 := mv_obj_equi_le &
  [ STEM < "enable" >,
    SYNSEM.LOCAL.CONT.KEY _enable_rel ].

:end :instance.


; <<>>
; >> encourage.v.1.tdl
; encourage.v.1.tdl

:begin :instance.

encourage1 := mv_obj_equi_le &
  [ STEM < "encourage" >,
    SYNSEM.LOCAL.CONT.KEY _encourage2_rel ].

:end :instance.


; <<>>
; >> encourage.v.2.tdl
; encourage.v.2.tdl

:begin :instance.

encourage_v1 := mv_np_trans_cp_le &
  [ STEM < "encourage" >,
    SYNSEM.LOCAL.CONT.KEY _encourage_rel ].

:end :instance.


; <<>>
; >> end.n.1.tdl
; end.n.1.tdl

:begin :instance.

end1 := noun_ppof_word_le &
  [ STEM < "end" >,
    SYNSEM.LOCAL.CONT.KEY _end_rel ].

:end :instance.


; <<>>
; >> endorse.v.1.vm.tdl
; endorse.v.1.vm.tdl

:begin :instance.

endorse_v1 := mv_np_trans_le &
  [ STEM < "endorse" >,
    SYNSEM.LOCAL.CONT.KEY _endorse_rel ].

:end :instance.


; <<>>
; >> engage.in.v.1.vm.tdl
; engage.in.v.1.vm.tdl

:begin :instance.

engage_in_v1 := mv_empty_prep_intrans_le &
  [ STEM < "engage" >,
    SYNSEM.LOCAL.CONT [ KEY _engage_in_rel,
			COMPKEY _in_rel ] ].

:end :instance.


; <<>>
; >> engaged.a.1.vm.tdl
; engaged.a.1.vm.tdl

:begin :instance.

engaged_a1 := intrans_adj_le &
  [ STEM < "engaged" >,
    SYNSEM.LOCAL.CONT.KEY _engaged_rel ].

:end :instance.


; <<>>
; >> engineer.n.1.tdl
; engineer.n.1.tdl

:begin :instance.

engineer_n1 := intr_noun_word_le &
  [ STEM < "engineer" >,
    SYNSEM.LOCAL.CONT.KEY _engineer_rel ].

:end :instance.


; <<>>
; >> english.a.1.vm.tdl
; english.a.1.vm.tdl

:begin :instance.

english_a1 := intrans_adj_le &
  [ STEM < "english" >,
    SYNSEM.LOCAL.CONT.KEY _english_rel ].

:end :instance.


; <<>>
; >> english.n.1.vm.tdl
; english.n.1.vm.tdl

:begin :instance.

English_n1 := proper_le &
  [ STEM < "english" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'English ].

:end :instance.


; <<>>
; >> english.n.2.vm.tdl
; english.n.2.vm.tdl

:begin :instance.

english_n2 := intr_noun_word_le &
  [ STEM < "english" >,
    SYNSEM.LOCAL.CONT.KEY _english_n_rel ].

:end :instance.


; <<>>
; >> enjoy.v.1.tdl
; enjoy.v.1.tdl

:begin :instance.

enjoy_v1 := mv_np_trans_le &
  [ STEM < "enjoy" >,
    SYNSEM.LOCAL.CONT.KEY _enjoy_rel ].

:end :instance.


; <<>>
; >> enjoy.v.2.tdl
; enjoy.v.2.tdl

:begin :instance.

enjoy_v2 := mv_subj_equi_prp_le &
  [ STEM < "enjoy" >,
    SYNSEM.LOCAL.CONT.KEY _enjoy2_rel ].

:end :instance.


; <<>>
; >> enormous.a.1.vm.tdl
; enormous.a.1.vm.tdl

:begin :instance.

enormous_a1 := intrans_adj_le &
  [ STEM < "enormous" >,
    SYNSEM.LOCAL.CONT.KEY _enormous_rel ].

:end :instance.


; <<>>
; >> enough.c.1.tdl
; enough.c.1.tdl

:begin :instance.

enough_det := pdet_pl_mass_le &
  [ STEM < "enough" >,
    SYNSEM.LOCAL.CONT.KEY _enough_rel ].

:end :instance.


; <<>>
; >> enough.a.1.vm.tdl
; enough.a.1.vm.tdl

:begin :instance.

enough := vp_adv_post_word_le &
  [ STEM < "enough" >,
    SYNSEM.LOCAL.CONT.KEY _enough_grad_rel ].

:end :instance.


; <<>>
; >> entertainment.n.1.vm.tdl
; entertainment.n.1.vm.tdl

:begin :instance.

entertainment_n1 := massn_le &
  [ STEM < "entertainment" >,
    SYNSEM.LOCAL.CONT.KEY _entertainment_rel ].

:end :instance.


; <<>>
; >> entire.a.1.vm.tdl
; entire.a.1.vm.tdl

:begin :instance.

entire_a1 := intrans_adj_le &
  [ STEM < "entire" >,
    SYNSEM.LOCAL.CONT.KEY _entire_rel ].

:end :instance.


; <<>>
; >> entirely.a.1.vm.tdl
; entirely.a.1.vm.tdl

:begin :instance.

entirely_adv1 := adv_word_le &
  [ STEM < "entirely" >,
    SYNSEM.LOCAL.CONT.KEY _entirely_rel ].

:end :instance.


; <<>>
; >> entrance.n.1.vm.tdl
; entrance.n.1.vm.tdl

:begin :instance.

entrance_n1 := intr_noun_word_le &
  [ STEM < "entrance" >,
    SYNSEM.LOCAL.CONT.KEY _entrance_rel ].

:end :instance.


; <<>>
; >> entry.n.1.vm.tdl
; entry.n.1.vm.tdl

:begin :instance.

entry_n1 := intr_noun_word_le &
  [ STEM < "entry" >,
    SYNSEM.LOCAL.CONT.KEY _entry_rel ].

:end :instance.


; <<>>
; >> envisage.v.1.vm.tdl
; envisage.v.1.vm.tdl

:begin :instance.

envisage_v1 := mv_np_trans_le &
  [ STEM < "envisage" >,
    SYNSEM.LOCAL.CONT.KEY _envisage_rel ].

:end :instance.


; <<>>
; >> epiphany.n.1.tdl
; epiphany.n.1.tdl

:begin :instance.

epiphany := holiday_word_le &
  [ STEM < "epiphany" >,
    SYNSEM.LOCAL.CONT.KEY.DAY 'epiphany ].

:end :instance.


; <<>>
; >> equal.a.1.vm.tdl
; equal.a.1.vm.tdl

:begin :instance.

equal_a1 := intrans_adj_le &
  [ STEM < "equal" >,
    SYNSEM.LOCAL.CONT.KEY _equal_adj_rel ].

:end :instance.


; <<>>
; >> equal.v.1.vm.tdl
; equal.v.1.vm.tdl

:begin :instance.

equal_v1 := mv_np_trans_le &
  [ STEM < "equal" >,
    SYNSEM.LOCAL.CONT.KEY _equal_v_rel ].

:end :instance.


; <<>>
; >> equally.a.1.tdl
; equally.a.1.tdl

:begin :instance.

equally_deg := degree_spec_le &
  [ STEM < "equally" >,
    SYNSEM.LOCAL.CONT.KEY _equally_deg_rel ].

:end :instance.


; <<>>
; >> equipment.n.1.vm.tdl
; equipment.n.1.vm.tdl

:begin :instance.

equipment_n1 := massn_le &
  [ STEM < "equipment" >,
    SYNSEM.LOCAL.CONT.KEY _equipment_rel ].

:end :instance.


; <<>>
; >> er.c.1.vm.tdl
; er.c.1.vm.tdl

:begin :instance.

er_root := disc_adv_le &
  [ STEM < "er" >,
    SYNSEM.LOCAL.CONT.KEY.EXCL 'er ].

:end :instance.


; <<>>
; >> erfurt.n.1.vm.tdl
; erfurt.n.1.vm.tdl

:begin :instance.

Erfurt_n1 := proper_le &
  [ STEM < "erfurt" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'Erfurt ].

:end :instance.


; <<>>
; >> escape.v.1.vm.tdl
; escape.v.1.vm.tdl

:begin :instance.

escape_v1 := mv_np*_trans_le &
  [ STEM < "escape" >,
    SYNSEM.LOCAL.CONT.KEY _escape_v_rel ].

:end :instance.


; <<>>
; >> especially.a.1.tdl
; especially.a.1.tdl

:begin :instance.

especially_deg := degree_spec_le &
  [ STEM < "especially" >,
    SYNSEM.LOCAL.CONT.KEY _especially_deg_rel ].

:end :instance.


; <<>>
; >> especially.a.2.tdl
; especially.a.2.tdl

:begin :instance.

especially := vp_adv_word_le &
  [ STEM < "especially" >,
    SYNSEM.LOCAL.CONT.KEY _especially_rel ].

:end :instance.


; <<>>
; >> esquire.a.1.tdl
; esquire.a.1.tdl

:begin :instance.

esquire_ttl := post_title_le &
  [ STEM < "esq" >,
    SYNSEM.LOCAL.CONT.KEY _esquire_rel ].

:end :instance.


; <<>>
; >> essential.a.1.vm.tdl
; essential.a.1.vm.tdl

:begin :instance.

essential_a1 := intrans_adj_le &
  [ STEM < "essential" >,
    SYNSEM.LOCAL.CONT.KEY _essential_rel ].

:end :instance.


; <<>>
; >> essentially.a.1.vm.tdl
; essentially.a.1.vm.tdl

:begin :instance.

essentially_adv1 := adv_pre_word_le &
  [ STEM < "essentially" >,
    SYNSEM.LOCAL.CONT.KEY _essentially_rel ].

:end :instance.


; <<>>
; >> esteemed.a.1.vm.tdl
; esteemed.a.1.vm.tdl

:begin :instance.

esteemed_a1 := intrans_adj_le &
  [ STEM < "esteemed" >,
    SYNSEM.LOCAL.CONT.KEY _esteemed_rel ].

:end :instance.


; <<>>
; >> ettlingen.n.1.vm.tdl
; ettlingen.n.1.vm.tdl

:begin :instance.

Ettlingen_n1 := proper_le &
  [ STEM < "ettlingen" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'Ettlingen ].

:end :instance.


; <<>>
; >> evaluate.v.1.vm.tdl
; evaluate.v.1.vm.tdl

:begin :instance.

evaluate_v1 := mv_np_trans_le &
  [ STEM < "evaluate" >,
    SYNSEM.LOCAL.CONT.KEY _evaluate_rel ].

:end :instance.


; <<>>
; >> eve.n.1.vm.tdl
; eve.n.1.vm.tdl

:begin :instance.

Eve_n1 := proper_le &
  [ STEM < "eve" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'Eve ].

:end :instance.


; <<>>
; >> even.a.1.vm.tdl
; even.a.1.vm.tdl

:begin :instance.

even_adv1 := adv_pre_word_le &
  [ STEM < "even" >,
    SYNSEM.LOCAL.CONT.KEY _even_adv_rel ].

:end :instance.


; <<>>
; >> even.a.2.tdl
; even.a.2.tdl

:begin :instance.

even_adj := intrans_adj_le &
  [ STEM < "even" >,
    SYNSEM.LOCAL.CONT.KEY _even_adj_rel ].

:end :instance.


; <<>>
; >> evening.sg.n.1.vm.tdl
; evening.sg.n.1.vm.tdl

:begin :instance.

evening_sg_n1 := day_part_word_le &
  [ STEM < "evening" >,
    SYNSEM.LOCAL.CONT.KEY _evening_rel & [ INST.PNG [ PN 3sg*,
						      GEN neut* ] ] ].

:end :instance.


; <<>>
; >> evening.pl.n.1.vm.tdl
; evening.pl.n.1.vm.tdl

:begin :instance.

evening_pl_n1 := day_part_word_le &
  [ STEM < "evenings" >,
    SYNSEM.LOCAL.CONT.KEY _evening_rel & [ INST.PNG.PN 3pl* ] ].

:end :instance.


; <<>>
; >> evenly.a.1.vm.tdl
; evenly.a.1.vm.tdl

:begin :instance.

evenly_adv1 := vp_adv_word_le &
  [ STEM < "evenly" >,
    SYNSEM.LOCAL.CONT.KEY _evenly_rel ].

:end :instance.


; <<>>
; >> event.n.1.vm.tdl
; event.n.1.vm.tdl

:begin :instance.

event_n1 := intr_noun_word_le &
  [ STEM < "event" >,
    SYNSEM.LOCAL.CONT.KEY _event_item_rel ].

:end :instance.


; <<>>
; >> eventual.a.1.vm.tdl
; eventual.a.1.vm.tdl

:begin :instance.

eventual_a1 := intrans_adj_le &
  [ STEM < "eventual" >,
    SYNSEM.LOCAL.CONT.KEY _eventual_rel ].

:end :instance.


; <<>>
; >> eventually.a.1.vm.tdl
; eventually.a.1.vm.tdl

:begin :instance.

eventually_adv1 := vp_adv_word_le &
  [ STEM < "eventually" >,
    SYNSEM.LOCAL.CONT.KEY _eventually_rel ].

:end :instance.


; <<>>
; >> ever.a.1.vm.tdl
; ever.a.1.vm.tdl

:begin :instance.

ever_adv1 := adv_pre_word_le &
  [ STEM < "ever" >,
    SYNSEM.LOCAL.CONT.KEY _ever_rel ].

:end :instance.


; <<>>
; >> every.c.1.tdl
; every.c.1.tdl

:begin :instance.

every := det_sg_le &
  [ STEM < "every" >,
    SYNSEM.LOCAL.CONT.KEY _every_rel ].

:end :instance.


; <<>>
; >> everybody.n.1.tdl
; everybody.n.1.tdl

:begin :instance.

everybody := generic_pro_le &
  [ STEM < "everybody" >,
    SYNSEM.LOCAL.CONT [ KEY _person_rel,
			ALTKEY _every_rel ] ].
:end :instance.

; <<>>
; >> everyone.n.1.tdl
; everyone.n.1.tdl

:begin :instance.

everyone := generic_pro_le &
  [ STEM < "everyone" >,
    SYNSEM.LOCAL.CONT [ KEY _person_rel,
			ALTKEY _every_rel ] ].
:end :instance.

; <<>>
; >> everything.n.1.tdl
; everything.n.1.tdl

:begin :instance.

everything := generic_pro_le &
  [ STEM < "everything" >,
    SYNSEM.LOCAL.CONT [ KEY _thing_rel,
			ALTKEY _every_rel ] ].
:end :instance.


; <<>>
; >> evident.a.1.vm.tdl
; evident.a.1.vm.tdl

:begin :instance.

evident_a1 := intrans_adj_le &
  [ STEM < "evident" >,
    SYNSEM.LOCAL.CONT.KEY _evident_rel ].

:end :instance.


; <<>>
; >> evidently.a.1.vm.tdl
; evidently.a.1.vm.tdl

:begin :instance.

evidently_adv1 := adv_pre_word_le &
  [ STEM < "evidently" >,
    SYNSEM.LOCAL.CONT.KEY _evidently_rel ].

:end :instance.


; <<>>
; >> exact.a.1.vm.tdl
; exact.a.1.vm.tdl

:begin :instance.

exact_a1 := intrans_adj_le &
  [ STEM < "exact" >,
    SYNSEM.LOCAL.CONT.KEY _exact_rel ].

:end :instance.


; <<>>
; >> exactly.a.1.tdl
; exactly.a.1.tdl

:begin :instance.

exactly_deg := degree_spec_le &
  [ STEM < "exactly" >,
    SYNSEM.LOCAL.CONT.KEY _exactly_deg_rel ].

:end :instance.


; <<>>
; >> exactly.disc.c.1.vm.tdl
; exactly.disc.c.1.vm.tdl

:begin :instance.

exactly_root := disc_adv_le &
  [ STEM < "exactly" >,
    SYNSEM.LOCAL.CONT.KEY.EXCL 'exactly ].

:end :instance.

; <<>>
; >> exaggerate.v.1.vm.tdl
; exaggerate.v.1.vm.tdl

:begin :instance.

exaggerate_v1 := mv_np*_trans_le &
  [ STEM < "exaggerate" >,
    SYNSEM.LOCAL.CONT.KEY _exaggerate_rel ].

:end :instance.


; <<>>
; >> exam.n.1.vm.tdl
; exam.n.1.vm.tdl

:begin :instance.

exam_n1 := intr_noun_word_le &
  [ STEM < "exam" >,
    SYNSEM.LOCAL.CONT.KEY _exam_rel ].

:end :instance.


; <<>>
; >> example.n.1.vm.tdl
; example.n.1.vm.tdl

:begin :instance.

example_n1 := intr_noun_word_le &
  [ STEM < "example" >,
    SYNSEM.LOCAL.CONT.KEY _example_rel ].

:end :instance.


; <<>>
; >> exceedingly.a.1.vm.tdl
; exceedingly.a.1.vm.tdl

:begin :instance.

exceedingly := vp_adv_post_word_le &
  [ STEM < "exceedingly" >,
    SYNSEM.LOCAL.CONT.KEY _exceedingly_rel ].

:end :instance.


; <<>>
; >> excellent.a.1.vm.tdl
; excellent.a.1.vm.tdl

:begin :instance.

excellent_a1 := intrans_adj_le &
  [ STEM < "excellent" >,
    SYNSEM.LOCAL.CONT.KEY _excellent_rel ].

:end :instance.


; <<>>
; >> except.for.p.1.tdl
; except.for.p.1.tdl

:begin :instance.

except_for := prep_mle1 &
  [ STEM < "except", "for" >,
    SYNSEM.LOCAL.CONT.KEY _except_for_rel ].

:end :instance.


; <<>>
; >> except.p.1.tdl
; except.p.1.tdl

:begin :instance.

except := prep_le &
  [ STEM < "except" >,
    SYNSEM.LOCAL.CONT.KEY _except_rel ].

:end :instance.


; <<>>
; >> exception.n.1.vm.tdl
; exception.n.1.vm.tdl

:begin :instance.

exception_n1 := intr_noun_word_le &
  [ STEM < "exception" >,
    SYNSEM.LOCAL.CONT.KEY _exception_rel ].

:end :instance.


; <<>>
; >> exceptionally.a.1.tdl
; exceptionally.a.1.tdl

:begin :instance.

exceptionally_deg := degree_spec_le &
  [ STEM < "exceptionally" >,
    SYNSEM.LOCAL.CONT.KEY _exceptionally_deg_rel ].

:end :instance.


; <<>>
; >> exchange.v.1.vm.tdl
; exchange.v.1.vm.tdl

:begin :instance.

exchange_v1 := mv_np_trans_le &
  [ STEM < "exchange" >,
    SYNSEM.LOCAL.CONT.KEY _exchange_rel ].

:end :instance.


; <<>>
; >> excited.a.1.vm.tdl
; excited.a.1.vm.tdl

:begin :instance.

excited_a1 := intrans_adj_le &
  [ STEM < "excited" >,
    SYNSEM.LOCAL.CONT.KEY _excited_rel ].

:end :instance.


; <<>>
; >> exclude.v.1.vm.tdl
; exclude.v.1.vm.tdl

:begin :instance.

exclude_v1 := mv_np_trans_le &
  [ STEM < "exclude" >,
    SYNSEM.LOCAL.CONT.KEY _exclude_rel ].

:end :instance.


; <<>>
; >> exclusive.a.1.vm.tdl
; exclusive.a.1.vm.tdl

:begin :instance.

exclusive_a1 := intrans_adj_le &
  [ STEM < "exclusive" >,
    SYNSEM.LOCAL.CONT.KEY _exclusive_rel ].

:end :instance.


; <<>>
; >> exclusively.a.1.vm.tdl
; exclusively.a.1.vm.tdl

:begin :instance.

exclusively_adv1 := adv_word_le &
  [ STEM < "exclusively" >,
    SYNSEM.LOCAL.CONT.KEY _exclusively_rel ].

:end :instance.


; <<>>
; >> excursion.n.1.vm.tdl
; excursion.n.1.vm.tdl

:begin :instance.

excursion_n1 := intr_noun_word_le &
  [ STEM < "excursion" >,
    SYNSEM.LOCAL.CONT.KEY _excursion_rel ].

:end :instance.


; <<>>
; >> excuse.v.1.vm.tdl
; excuse.v.1.vm.tdl

:begin :instance.

excuse_v1 := mv_np_trans_le &
  [ STEM < "excuse" >,
    SYNSEM.LOCAL.CONT.KEY _excuse_rel ].

:end :instance.


; <<>>
; >> executive.n.1.vm.tdl
; executive.n.1.vm.tdl

:begin :instance.

executive_n1 := intr_noun_word_le &
  [ STEM < "executive" >,
    SYNSEM.LOCAL.CONT.KEY _executive_n_rel ].

:end :instance.


; <<>>
; >> exercise.n.1.vm.tdl
; exercise.n.1.vm.tdl

:begin :instance.

exercise_n1 := intr_noun_word_le &
  [ STEM < "exercise" >,
    SYNSEM.LOCAL.CONT.KEY _exercise_rel ].

:end :instance.


; <<>>
; >> exercise.n.2.vm.tdl
; exercise.n.2.vm.tdl

:begin :instance.

exercise_n2 := massn_le &
  [ STEM < "exercise" >,
    SYNSEM.LOCAL.CONT.KEY _exercise_rel ].

:end :instance.


; <<>>
; >> exhausting.a.1.vm.tdl
; exhausting.a.1.vm.tdl

:begin :instance.

exhausting_a1 := intrans_adj_le &
  [ STEM < "exhausting" >,
    SYNSEM.LOCAL.CONT.KEY _exhausting_rel ].

:end :instance.


; <<>>
; >> exhaustingly.a.1.vm.tdl
; exhaustingly.a.1.vm.tdl

:begin :instance.

exhaustingly := vp_adv_post_word_le &
  [ STEM < "exhaustingly" >,
    SYNSEM.LOCAL.CONT.KEY _exhaustingly_rel ].

:end :instance.


; <<>>
; >> exist.v.1.vm.tdl
; exist.v.1.vm.tdl

:begin :instance.

exist_v1 := mv_unacc_le &
  [ STEM < "exist" >,
    SYNSEM.LOCAL.CONT.KEY _exist_rel ].

:end :instance.


; <<>>
; >> existence.n.1.vm.tdl
; existence.n.1.vm.tdl

:begin :instance.

existence_n1 := massn_le &
  [ STEM < "existence" >,
    SYNSEM.LOCAL.CONT.KEY _existence_rel ].

:end :instance.


; <<>>
; >> exit.n.1.tdl
; exit.n.1.tdl

:begin :instance.

exit1 := intr_noun_word_le &
  [ STEM < "exit" >,
    SYNSEM.LOCAL.CONT.KEY _exit_rel ].

:end :instance.


; <<>>
; >> expect.v.1.tdl
; expect.v.1.tdl

:begin :instance.

expect1 := mv_np_trans_le &
  [ STEM < "expect" >,
    SYNSEM.LOCAL.CONT.KEY _expect1_rel ].

:end :instance.


; <<>>
; >> expect.v.2.tdl
; expect.v.2.tdl

:begin :instance.

expect2 := mv_subj_equi_le &
  [ STEM < "expect" >,
    SYNSEM.LOCAL.CONT.KEY _expect2_rel ].

:end :instance.


; <<>>
; >> expect.v.3.tdl
; expect.v.3.tdl

:begin :instance.

expect3 := mv_sor_le &
  [ STEM < "expect" >,
    SYNSEM.LOCAL.CONT.KEY _expect2_rel ].

:end :instance.


; <<>>
; >> expel.v.1.vm.tdl
; expel.v.1.vm.tdl

:begin :instance.

expel_v1 := mv_np_trans_le &
  [ STEM < "expel" >,
    SYNSEM.LOCAL.CONT.KEY _expel_rel ].

:end :instance.


; <<>>
; >> expense.n.1.vm.tdl
; expense.n.1.vm.tdl

:begin :instance.

expense_n1 := intr_noun_word_le &
  [ STEM < "expense" >,
    SYNSEM.LOCAL.CONT.KEY _expense_rel ].

:end :instance.


; <<>>
; >> experience.n.1.vm.tdl
; experience.n.1.vm.tdl

:begin :instance.

experience_n1 := intr_noun_word_le &
  [ STEM < "experience" >,
    SYNSEM.LOCAL.CONT.KEY _experience_rel ].

:end :instance.


; <<>>
; >> experienced.a.1.vm.tdl
; experienced.a.1.vm.tdl

:begin :instance.

experienced_a1 := trans_adj_le &
  [ STEM < "experienced" >,
    SYNSEM.LOCAL.CONT [ KEY _experienced_rel,
			COMPKEY _in_rel ] ].

:end :instance.


; <<>>
; >> experiment.n.1.vm.tdl
; experiment.n.1.vm.tdl

:begin :instance.

experiment_n1 := intr_noun_word_le &
  [ STEM < "experiment" >,
    SYNSEM.LOCAL.CONT.KEY _experiment_rel ].

:end :instance.


; <<>>
; >> expert.n.1.vm.tdl
; expert.n.1.vm.tdl

:begin :instance.

expert_n1 := intr_noun_word_le &
  [ STEM < "expert" >,
    SYNSEM.LOCAL.CONT.KEY _expert_rel ].

:end :instance.


; <<>>
; >> explain.v.1.tdl
; explain.v.1.tdl

:begin :instance.

explain_v1 := mv_pp_cp*_le &
  [ STEM < "explain" >,
    SYNSEM.LOCAL.CONT [ KEY _explain_rel,
			COMPKEY _to_rel ] ].

:end :instance.


; <<>>
; >> explain.v.2.tdl
; explain.v.2.tdl

:begin :instance.

explain_v2 := mv_np_trans_le &
  [ STEM < "explain" >,
    SYNSEM.LOCAL.CONT.KEY _explain_rel ].
:end :instance.


; <<>>
; >> explicitly.a.1.vm.tdl
; explicitly.a.1.vm.tdl

:begin :instance.

explicitly_adv1 := adv_pre_word_le &
  [ STEM < "explicitly" >,
    SYNSEM.LOCAL.CONT.KEY _explicitly_rel ].

:end :instance.


; <<>>
; >> extend.v.1.vm.tdl
; extend.v.1.vm.tdl

:begin :instance.

extend_v1 := mv_np_trans_le &
  [ STEM < "extend" >,
    SYNSEM.LOCAL.CONT.KEY _extend_rel ].

:end :instance.


; <<>>
; >> extended.a.1.vm.tdl
; extended.a.1.vm.tdl

:begin :instance.

extended_a1 := intrans_adj_le &
  [ STEM < "extended" >,
    SYNSEM.LOCAL.CONT.KEY _extended_rel ].

:end :instance.


; <<>>
; >> extension.n.1.vm.tdl
; extension.n.1.vm.tdl

:begin :instance.

extension_n1 := intr_noun_word_le &
  [ STEM < "extension" >,
    SYNSEM.LOCAL.CONT.KEY _extension_rel ].

:end :instance.


; <<>>
; >> extensive.a.1.vm.tdl
; extensive.a.1.vm.tdl

:begin :instance.

extensive_a1 := intrans_adj_le &
  [ STEM < "extensive" >,
    SYNSEM.LOCAL.CONT.KEY _extensive_rel ].

:end :instance.


; <<>>
; >> extensively.a.1.vm.tdl
; extensively.a.1.vm.tdl

:begin :instance.

extensively := adv_word_le &
  [ STEM < "extensively" >,
    SYNSEM.LOCAL.CONT.KEY _extensively_rel ].

:end :instance.


; <<>>
; >> extent.n.1.vm.tdl
; extent.n.1.vm.tdl

:begin :instance.

extent_n1 := intr_noun_word_le &
  [ STEM < "extent" >,
    SYNSEM.LOCAL.CONT.KEY _extent_rel ].

:end :instance.


; <<>>
; >> external.a.1.vm.tdl
; external.a.1.vm.tdl

:begin :instance.

external_a1 := intrans_adj_le &
  [ STEM < "external" >,
    SYNSEM.LOCAL.CONT.KEY _external_rel ].

:end :instance.


; <<>>
; >> externally.a.1.vm.tdl
; externally.a.1.vm.tdl

:begin :instance.

externally := adv_word_le &
  [ STEM < "externally" >,
    SYNSEM.LOCAL.CONT.KEY _externally_rel ].

:end :instance.


; <<>>
; >> extreme.a.1.vm.tdl
; extreme.a.1.vm.tdl

:begin :instance.

extreme_a1 := intrans_adj_le &
  [ STEM < "extreme" >,
    SYNSEM.LOCAL.CONT.KEY _extreme_rel ].

:end :instance.


; <<>>
; >> extremely.a.1.tdl
; extremely.a.1.tdl

:begin :instance.

extremely_deg := degree_spec_le &
  [ STEM < "extremely" >,
    SYNSEM.LOCAL.CONT.KEY _extremely_deg_rel ].

:end :instance.


; <<>>
; >> eye.n.1.vm.tdl
; eye.n.1.vm.tdl

:begin :instance.

eye_n1 := intr_noun_word_le &
  [ STEM < "eye" >,
    SYNSEM.LOCAL.CONT.KEY _eye_rel ].

:end :instance.


; <<>>
; >> fabulous.a.1.vm.tdl
; fabulous.a.1.vm.tdl

:begin :instance.

fabulous_a1 := intrans_adj_le &
  [ STEM < "fabulous" >,
    SYNSEM.LOCAL.CONT.KEY _fabulous_rel ].

:end :instance.


; <<>>
; >> face.n.1.vm.tdl
; face.n.1.vm.tdl

:begin :instance.

face_n1 := intr_noun_word_le &
  [ STEM < "face" >,
    SYNSEM.LOCAL.CONT.KEY _face_n_rel ].

:end :instance.


; <<>>
; >> face.v.1.vm.tdl
; face.v.1.vm.tdl

:begin :instance.

face_v1 := mv_np_trans_le &
  [ STEM < "face" >,
    SYNSEM.LOCAL.CONT.KEY _face_rel ].

:end :instance.


; <<>>
; >> fact.n.1.vm.tdl
; fact.n.1.vm.tdl

:begin :instance.

fact_n1 := intr_noun_word_le &
  [ STEM < "fact" >,
    SYNSEM.LOCAL.CONT.KEY _fact_rel ].

:end :instance.


; <<>>
; >> factory.n.1.vm.tdl
; factory.n.1.vm.tdl

:begin :instance.

factory_n1 := intr_noun_word_le &
  [ STEM < "factory" >,
    SYNSEM.LOCAL.CONT.KEY _factory_rel ].

:end :instance.


; <<>>
; >> fail.v.1.tdl
; fail.v.1.tdl

:begin :instance.

fail_v1 := mv_np_trans_le &
  [ STEM < "fail" >,
    SYNSEM.LOCAL.CONT.KEY _fail_rel ].

:end :instance.


; <<>>
; >> fail.v.2.tdl
; fail.v.2.tdl

:begin :instance.

fail_v2 := mv_ssr_le &
  [ STEM < "fail" >,
    SYNSEM.LOCAL.CONT.KEY _fail1_rel ].

:end :instance.


; <<>>
; >> fail.v.3.tdl
; fail.v.3.tdl

:begin :instance.

fail_v3 := mv_unerg_le &
  [ STEM < "fail" >,
    SYNSEM.LOCAL.CONT.KEY _fail_rel ].

:end :instance.


; <<>>
; >> fair.n.1.vm.tdl
; fair.n.1.vm.tdl

:begin :instance.

fair_n1 := intr_noun_word_le &
  [ STEM < "fair" >,
    SYNSEM.LOCAL.CONT.KEY _fair_n_rel ].

:end :instance.


; <<>>
; >> fair.a.1.tdl
; fair.a.1.tdl

:begin :instance.

fair_a1 := intrans_adj_le &
  [ STEM < "fair" >,
    SYNSEM.LOCAL.CONT.KEY _fair_adj_rel ].

:end :instance.


; <<>>
; >> fairly.a.1.tdl
; fairly.a.1.tdl

:begin :instance.

fairly_deg := degree_spec_le &
  [ STEM < "fairly" >,
    SYNSEM.LOCAL.CONT.KEY _fairly_deg_rel ].

:end :instance.


; <<>>
; >> fall.n.1.tdl
; fall.n.1.tdl

:begin :instance.

fall_season := season_word_le &
  [ STEM < "fall" >,
    SYNSEM.LOCAL.CONT.KEY.SEASON 'fall ].

:end :instance.


; <<>>
; >> fall.n.1.vm.tdl
; fall.n.1.vm.tdl

:begin :instance.

fall_n1 := intr_temp_noun_le &
  [ STEM < "fall" >,
    SYNSEM.LOCAL.CONT.KEY _fall_s_rel ].

:end :instance.


; <<>>
; >> fall.n.2.vm.tdl
; fall.n.2.vm.tdl

:begin :instance.

fall_n2 := intr_temp_noun_nomod_le &
  [ STEM < "fall" >,
    SYNSEM.LOCAL.CONT.KEY _fall_s_rel ].

:end :instance.


; <<>>
; >> fall.v.1.tdl
; fall.v.1.tdl

:begin :instance.

fall1 := mv_unacc_le &
  [ STEM < "fall" >,
    SYNSEM.LOCAL.CONT.KEY _fall_rel ].

:end :instance.


; <<>>
; >> false.a.1.vm.tdl
; false.a.1.vm.tdl

:begin :instance.

false_a1 := intrans_adj_le &
  [ STEM < "false" >,
    SYNSEM.LOCAL.CONT.KEY _false_rel ].

:end :instance.


; <<>>
; >> family.n.1.vm.tdl
; family.n.1.vm.tdl

:begin :instance.

family_n1 := intr_noun_word_le &
  [ STEM < "family" >,
    SYNSEM.LOCAL.CONT.KEY _family_rel ].

:end :instance.


; <<>>
; >> fantastic.a.1.vm.tdl
; fantastic.a.1.vm.tdl

:begin :instance.

fantastic_a1 := intrans_adj_le &
  [ STEM < "fantastic" >,
    SYNSEM.LOCAL.CONT.KEY _fantastic_rel ].

:end :instance.


; <<>>
; >> fantastically.a.1.vm.tdl
; fantastically.a.1.vm.tdl

:begin :instance.

fantastically := vp_adv_post_word_le &
  [ STEM < "fantastically" >,
    SYNSEM.LOCAL.CONT.KEY _fantastically_rel ].

:end :instance.


; <<>>
; >> far.a.1.vm.tdl
; far.a.1.vm.tdl

:begin :instance.

far_a1 := intrans_adj_le &
  [ STEM < "far" >,
    SYNSEM.LOCAL.CONT.KEY _far_rel ].

:end :instance.


; <<>>
; >> far.a.2.vm.tdl
; far.a.2.vm.tdl

:begin :instance.

far := vp_adv_post_word_le &
  [ STEM < "far" >,
    SYNSEM.LOCAL.CONT.KEY _far_grad_rel ].

:end :instance.


; <<>>
; >> far.off.a.1.vm.tdl
; far.off.a.1.vm.tdl

:begin :instance.

far_off := vp_adv_post_word_mle1 &
  [ STEM < "far", "off" >,
    SYNSEM.LOCAL.CONT.KEY _far_off_rel ].

:end :instance.


; <<>>
; >> farm.n.1.vm.tdl
; farm.n.1.vm.tdl

:begin :instance.

farm_n1 := intr_noun_word_le &
  [ STEM < "farm" >,
    SYNSEM.LOCAL.CONT.KEY _farm_rel ].

:end :instance.


; <<>>
; >> fast.a.1.vm.tdl
; fast.a.1.vm.tdl

:begin :instance.

fast_a1 := intrans_adj_le &
  [ STEM < "fast" >,
    SYNSEM.LOCAL.CONT.KEY _fast_rel ].

:end :instance.


; <<>>
; >> fast.a.2.vm.tdl
; fast.a.2.vm.tdl

:begin :instance.

fast := vp_adv_post_word_le &
  [ STEM < "fast" >,
    SYNSEM.LOCAL.CONT.KEY _fast_adv_rel ].

:end :instance.


; <<>>
; >> faster.a.1.vm.tdl
; faster.a.1.vm.tdl

:begin :instance.

faster_a1 := intrans_adj_le &
  [ STEM < "faster" >,
    SYNSEM.LOCAL.CONT.KEY _faster_rel ].

:end :instance.


; <<>>
; >> fat.a.1.vm.tdl
; fat.a.1.vm.tdl

:begin :instance.

fat_a1 := intrans_adj_le &
  [ STEM < "fat" >,
    SYNSEM.LOCAL.CONT.KEY _fat_rel ].

:end :instance.


; <<>>
; >> father.n.1.vm.tdl
; father.n.1.vm.tdl

:begin :instance.

father_n1 := noun_ppof_word_le &
  [ STEM < "father" >,
    SYNSEM.LOCAL.CONT.KEY _father_rel ].

:end :instance.


; <<>>
; >> favor.n.1.vm.tdl
; favor.n.1.vm.tdl

:begin :instance.

favor_n1 := intr_noun_word_le &
  [ STEM < "favor" >,
    SYNSEM.LOCAL.CONT.KEY _favor_n_rel ].

:end :instance.


; <<>>
; >> favorable.a.1.vm.tdl
; favorable.a.1.vm.tdl

:begin :instance.

favorable_a1 := intrans_adj_le &
  [ STEM < "favorable" >,
    SYNSEM.LOCAL.CONT.KEY _favorable_rel ].

:end :instance.


; <<>>
; >> favorably.a.1.vm.tdl
; favorably.a.1.vm.tdl

:begin :instance.

favorably := adv_word_le &
  [ STEM < "favorably" >,
    SYNSEM.LOCAL.CONT.KEY _favorably_rel ].

:end :instance.


; <<>>
; >> fax.n.1.vm.tdl
; fax.n.1.vm.tdl

:begin :instance.

fax_n1 := intr_noun_word_le &
  [ STEM < "fax" >,
    SYNSEM.LOCAL.CONT.KEY _fax_n_rel ].

:end :instance.


; <<>>
; >> fax.v.1.vm.tdl
; fax.v.1.vm.tdl

:begin :instance.

fax_v1 := mv_ditrans_le &
  [ STEM < "fax" >,
    SYNSEM.LOCAL.CONT.KEY _fax_v_rel ].

:end :instance.


; <<>>
; >> fear.n.1.vm.tdl
; fear.n.1.vm.tdl

:begin :instance.

fear_n1 := massn_le &
  [ STEM < "fear" >,
    SYNSEM.LOCAL.CONT.KEY _fear_rel ].

:end :instance.


; <<>>
; >> feasible.a.1.vm.tdl
; feasible.a.1.vm.tdl

:begin :instance.

feasible_a1 := intrans_adj_le &
  [ STEM < "feasible" >,
    SYNSEM.LOCAL.CONT.KEY _feasible_rel ].

:end :instance.


; <<>>
; >> february.n.1.tdl
; february.n.1.tdl

:begin :instance.

february := month_word_le &
  [ STEM < "february" >,
    SYNSEM.LOCAL.CONT.KEY.MONTH 'feb ].

:end :instance.


; <<>>
; >> february.n.2.tdl
; february.n.2.tdl

:begin :instance.

february_2 := month_year_word_le &
  [ STEM < "february" >,
    SYNSEM.LOCAL.CONT.KEY.MONTH 'feb ].

:end :instance.


; <<>>
; >> federal.a.1.vm.tdl
; federal.a.1.vm.tdl

:begin :instance.

federal_a1 := intrans_adj_le &
  [ STEM < "federal" >,
    SYNSEM.LOCAL.CONT.KEY _federal_rel ].

:end :instance.


; <<>>
; >> feel.v.1.tdl
; feel.v.1.tdl

:begin :instance.

feel_v1 := mv_np_trans_le &
  [ STEM < "feel" >,
    SYNSEM.LOCAL.CONT.KEY _feel_rel ].

:end :instance.


; <<>>
; >> feel.v.2.tdl
; feel.v.2.tdl

:begin :instance.

feel_v2 := mv_sorb_le &
  [ STEM < "feel" >,
    SYNSEM.LOCAL.CONT.KEY _feel2_rel ].

:end :instance.


; <<>>
; >> ferrari.n.1.vm.tdl
; ferrari.n.1.vm.tdl

:begin :instance.

Ferrari_n1 := proper_le &
  [ STEM < "ferrari" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'Ferrari ].

:end :instance.


; <<>>
; >> festive.a.1.vm.tdl
; festive.a.1.vm.tdl

:begin :instance.

festive_a1 := intrans_adj_le &
  [ STEM < "festive" >,
    SYNSEM.LOCAL.CONT.KEY _festive_rel ].

:end :instance.


; <<>>
; >> festivities.n.1.vm.tdl
; festivities.n.1.vm.tdl

:begin :instance.

festivities_n1 := plurn_le &
  [ STEM < "festivities" >,
    SYNSEM.LOCAL.CONT.KEY _festivities_rel ].

:end :instance.


; <<>>
; >> fetch.v.1.vm.tdl
; fetch.v.1.vm.tdl

:begin :instance.

fetch_v1 := mv_np_trans_le &
  [ STEM < "fetch" >,
    SYNSEM.LOCAL.CONT.KEY _fetch_rel ].

:end :instance.


; <<>>
; >> few.c.1.tdl
; few.c.1.tdl

:begin :instance.

few := pdet_pl_le &
  [ STEM < "few" >,
    SYNSEM.LOCAL.CONT.KEY _few_rel ].

:end :instance.


; <<>>
; >> fewer.a.1.vm.tdl
; fewer.a.1.vm.tdl

:begin :instance.

fewer_a1 := intrans_adj_le &
  [ STEM < "fewer" >,
    SYNSEM.LOCAL.CONT.KEY _fewer_rel ].

:end :instance.


; <<>>
; >> fewest.a.1.vm.tdl
; fewest.a.1.vm.tdl

:begin :instance.

fewest_a1 := intrans_adj_le &
  [ STEM < "fewest" >,
    SYNSEM.LOCAL.CONT.KEY _fewest_rel ].

:end :instance.


; <<>>
; >> field.n.1.vm.tdl
; field.n.1.vm.tdl

:begin :instance.

field_n1 := intr_noun_word_le &
  [ STEM < "field" >,
    SYNSEM.LOCAL.CONT.KEY _field_rel ].

:end :instance.


; <<>>
; >> fifteen.c.1.tdl
; fifteen.c.1.tdl

:begin :instance.

fifteen := bare_unspecified_card_le & 
  [ STEM < "fifteen" >,
    SYNSEM.LOCAL [ CAT.HEAD intadj1,
	           CONT.--STEMLISZT.LIST < [ CONST_VALUE 15 ], ... > ] ].
:end :instance.


; <<>>
; >> fifteen.minute.n.1.tdl
; fifteen.minute.n.1.tdl

:begin :instance.

fifteen_minute := minute_word_le & 
  [ STEM < "fifteen" >,
    SYNSEM.LOCAL.CONT.KEY.MINUTE 15 ].

:end :instance.


; <<>>
; >> fifteenth.a.1.vm.tdl
; fifteenth.a.1.vm.tdl

:begin :instance.

fifteenth := ordinal_adj_le &
  [ STEM < "fifteenth" >,
    SYNSEM.LOCAL.CONT.KEY.ORD 15 ].

:end :instance.


; <<>>
; >> fifteenth.day.n.1.tdl
; fifteenth.day.n.1.tdl

:begin :instance.

fifteenth_day := day_of_month_le &
  [ STEM < "fifteenth" >,
    SYNSEM.LOCAL.CONT.KEY.DAY 15 ].

:end :instance.


; <<>>
; >> fifth.a.1.vm.tdl
; fifth.a.1.vm.tdl

:begin :instance.

fifth := ordinal_adj_le &
  [ STEM < "fifth" >,
    SYNSEM.LOCAL.CONT.KEY.ORD 5 ].

:end :instance.


; <<>>
; >> fifth.day.n.1.tdl
; fifth.day.n.1.tdl

:begin :instance.

fifth_day := day_of_month_le &
  [ STEM < "fifth" >,
    SYNSEM.LOCAL.CONT.KEY.DAY 5 ].

:end :instance.


; <<>>
; >> fiftieth.a.1.vm.tdl
; fiftieth.a.1.vm.tdl

:begin :instance.

fiftieth := ordinal_adj_le &
  [ STEM < "fiftieth" >,
    SYNSEM.LOCAL.CONT.KEY.ORD 50 ].

:end :instance.


; <<>>
; >> fifty.c.1.tdl
; fifty.c.1.tdl

:begin :instance.

fifty_w_comps := complemented_unspecified_card_le & 
  [ STEM < "fifty" >,
    SYNSEM.LOCAL [ CAT [HEAD intadj2,
			VALENCE.COMPS.FIRST.LOCAL.CAT.HEAD intadj1],
		   CONT.--STEMLISZT.LIST < [ CONST_VALUE 50 ], [] > ] ].

:end :instance.


; <<>>
; >> fiftyfirst.a.1.vm.tdl
; fiftyfirst.a.1.vm.tdl

:begin :instance.

fiftyfirst := ordinal_adj_le &
  [ STEM < "fiftyfirst" >,
    SYNSEM.LOCAL.CONT.KEY.ORD 51 ].

:end :instance.


; <<>>
; >> fiftysecond.a.1.vm.tdl
; fiftysecond.a.1.vm.tdl

:begin :instance.

fiftysecond := ordinal_adj_le &
  [ STEM < "fiftysecond" >,
    SYNSEM.LOCAL.CONT.KEY.ORD 52 ].

:end :instance.


; <<>>
; >> figure.n.1.tdl
; figure.n.1.tdl

:begin :instance.

figure_n1 := intr_noun_word_le &
  [ STEM < "figure" >,
    SYNSEM.LOCAL.CONT.KEY _figure_n_rel ].

:end :instance.


; <<>>
; >> figure.v.3.tdl
; figure.v.3.tdl

:begin :instance.

figure_v3 := mv_cp_non_trans_le &
  [ STEM < "figure" >,
    SYNSEM.LOCAL.CONT.KEY _figure_v_rel ].

:end :instance.


; <<>>
; >> figure.out.v.1.vm.tdl
; figure.out.v.1.vm.tdl

:begin :instance.

figure_out_v1 := mv_particle_np_le &
  [ STEM < "figure" >,
    SYNSEM.LOCAL.CONT [ KEY _figure_out_rel,
			COMPKEY _out_rel ] ].

:end :instance.


; <<>>
; >> fill.v.1.vm.tdl
; fill.v.1.vm.tdl

:begin :instance.

fill_v1 := mv_np_trans_le &
  [ STEM < "fill" >,
    SYNSEM.LOCAL.CONT.KEY _fill_rel ].

:end :instance.


; <<>>
; >> final.a.1.vm.tdl
; final.a.1.vm.tdl

:begin :instance.

final_a1 := intrans_adj_le &
  [ STEM < "final" >,
    SYNSEM.LOCAL.CONT.KEY _final_rel ].

:end :instance.


; <<>>
; >> finally.a.1.vm.tdl
; finally.a.1.vm.tdl

:begin :instance.

finally_adv1 := adv_word_le &
  [ STEM < "finally" >,
    SYNSEM.LOCAL.CONT.KEY _finally_rel ].

:end :instance.


; <<>>
; >> find.out.v.1.vm.tdl
; find.out.v.1.vm.tdl

:begin :instance.

find_out_v1 := mv_particle_np_le &
  [ STEM < "find" >,
    SYNSEM.LOCAL.CONT [ KEY _find_out_rel,
			COMPKEY _out_rel ] ].

:end :instance.


; <<>>
; >> find.out.v.2.vm.tdl
; find.out.v.2.vm.tdl

:begin :instance.

find_out_v2 := mv_particle_cp_le &
  [ STEM < "find" >,
    SYNSEM.LOCAL.CONT [ KEY _find_out_rel,
			COMPKEY _out_rel ] ].

:end :instance.


; <<>>
; >> find.v.1.tdl
; find.v.1.tdl

:begin :instance.

find_v1 := mv_np_trans_le &
  [ STEM < "find" >,
    SYNSEM.LOCAL.CONT.KEY _find_rel ].

:end :instance.


; <<>>
; >> find.v.2.tdl
; find.v.2.tdl

:begin :instance.

find_v2 := mv_obj_equi_prd_le &
  [ STEM < "find" >,
    SYNSEM.LOCAL.CONT.KEY _find2_rel ].

:end :instance.


; <<>>
; >> fine.disc.c.1.vm.tdl
; fine.disc.c.1.vm.tdl

:begin :instance.

fine_root := disc_adv_le &
  [ STEM < "fine" >,
    SYNSEM.LOCAL.CONT.KEY.EXCL 'fine ].

:end :instance.

; <<>>
; >> fine.a.1.vm.tdl
; fine.a.1.vm.tdl

:begin :instance.

fine_a1 := vp_adv_post_word_le &
  [ STEM < "fine" >,
    SYNSEM.LOCAL.CONT.KEY _fine_adv_rel ].

:end :instance.


; <<>>
; >> fine.a.2.vm.tdl
; fine.a.2.vm.tdl

:begin :instance.

fine_adj := intrans_adj_le &
  [ STEM < "fine" >,
    SYNSEM.LOCAL.CONT.KEY _fine_rel ].

:end :instance.


; <<>>
; >> finish.v.1.vm.tdl
; finish.v.1.vm.tdl

:begin :instance.

finish_v1 := mv_np_trans_le &
  [ STEM < "finish" >,
    SYNSEM.LOCAL.CONT.KEY _finish_rel ].

:end :instance.


; <<>>
; >> finished.a.1.vm.tdl
; finished.a.1.vm.tdl

:begin :instance.

finished_a1 := intrans_adj_le &
  [ STEM < "finished" >,
    SYNSEM.LOCAL.CONT.KEY _finished_rel ].

:end :instance.


; <<>>
; >> finite.a.1.vm.tdl
; finite.a.1.vm.tdl

:begin :instance.

finite_a1 := intrans_adj_le &
  [ STEM < "finite" >,
    SYNSEM.LOCAL.CONT.KEY _finite_rel ].

:end :instance.


; <<>>
; >> firm.n.1.tdl
; firm.n.1.tdl

:begin :instance.

firm_n1 := intr_noun_word_le &
  [ STEM < "firm" >,
    SYNSEM.LOCAL.CONT.KEY _firm_rel ].

:end :instance.


; <<>>
; >> firm.a.1.tdl
; firm.a.1.tdl

:begin :instance.

firm_a1 := intrans_adj_le &
  [ STEM < "firm" >,
    SYNSEM.LOCAL.CONT.KEY _firm_a_rel ].

:end :instance.


; <<>>
; >> first.day.n.1.tdl
; first.day.n.1.tdl

:begin :instance.

first_day := day_of_month_le &
  [ STEM < "first" >,
    SYNSEM.LOCAL.CONT.KEY.DAY 1 ].

:end :instance.


; <<>>
; >> first.day.n.2.tdl
; first.day.n.2.tdl

:begin :instance.

first_day_num := day_of_month_le &
  [ STEM < "1st" >,
    SYNSEM.LOCAL.CONT.KEY.DAY 1 ].

:end :instance.


; <<>>
; >> first.thing.a.1.vm.tdl
; first.thing.a.1.vm.tdl
; MULTIKEY < "thing" >

:begin :instance.

first_thing_adv1 := vp_adv_post_word_mle2 &
  [ STEM < "first", "thing" >,
    SYNSEM.LOCAL.CONT.KEY _first_thing_rel ].

:end :instance.


; <<>>
; >> first-class.a.1.vm.tdl
; first-class.a.1.vm.tdl

:begin :instance.

first-class_a1 := intrans_adj_le &
  [ STEM < "first-class" >,
    SYNSEM.LOCAL.CONT.KEY _first-class_rel ].

:end :instance.


; <<>>
; >> the.first.of.may.n.1.tdl
; the.first.of.may.n.1.tdl
; MULTIKEY < "first" >

:begin :instance.

first_of_may := holiday_word_4mle2 &
  [ STEM < "the", "first", "of", "may" >,
    SYNSEM.LOCAL.CONT.KEY.DAY 'first_of_may ].

:end :instance.


; <<>>
; >> firstly.a.1.vm.tdl
; firstly.a.1.vm.tdl

:begin :instance.

firstly_adv1 := adv_pre_word_le &
  [ STEM < "firstly" >,
    SYNSEM.LOCAL.CONT.KEY _firstly_rel ].

:end :instance.


; <<>>
; >> fish.n.1.vm.tdl
; fish.n.1.vm.tdl

:begin :instance.

fish_n1 := intr_noun_word_le &
  [ STEM < "fish" >,
    SYNSEM.LOCAL.CONT.KEY _fish_rel ].

:end :instance.


; <<>>
; >> fist.n.1.vm.tdl
; fist.n.1.vm.tdl

:begin :instance.

fist_n1 := intr_noun_word_le &
  [ STEM < "fist" >,
    SYNSEM.LOCAL.CONT.KEY _fist_rel ].

:end :instance.


; <<>>
; >> fit.a.1.vm.tdl
; fit.a.1.vm.tdl

:begin :instance.

fit_a1 := intrans_adj_le &
  [ STEM < "fit" >,
    SYNSEM.LOCAL.CONT.KEY _fit_a_rel ].

:end :instance.


; <<>>
; >> fit.in.v.1.vm.tdl
; fit.in.v.1.vm.tdl

:begin :instance.

fit_in_v1 := mv_particle_np_le &
  [ STEM < "fit" >,
    SYNSEM.LOCAL.CONT [ KEY _fit_in_rel,
			COMPKEY _in_rel ] ].

:end :instance.


; <<>>
; >> fit.in.v.2.vm.tdl
; fit.in.v.2.vm.tdl

:begin :instance.

fit_in_v2 := mv_particle_le &
  [ STEM < "fit" >,
    SYNSEM.LOCAL.CONT [ KEY _fit_in_rel,
			COMPKEY _in_rel ] ].

:end :instance.


; <<>>
; >> fit.in.with.v.1.vm.tdl
; fit.in.with.v.1.vm.tdl

:begin :instance.

fit_in_with_v1 := mv_particle_pp_le &
  [ STEM < "fit" >,
    SYNSEM.LOCAL.CONT [ KEY _fit_in_with_rel,
			COMPKEY _in_rel,
			OCOMPKEY _with_rel ] ].

:end :instance.


; <<>>
; >> fit.v.1.vm.tdl
; fit.v.1.vm.tdl

:begin :instance.

fit_v1 := mv_unerg_le &
  [ STEM < "fit" >,
    SYNSEM.LOCAL.CONT.KEY _fit_rel ].

:end :instance.


; <<>>
; >> five.c.1.tdl
; five.c.1.tdl

:begin :instance.

five := bare_unspecified_card_le & 
  [  STEM < "five" >,
     SYNSEM.LOCAL [ CAT.HEAD intadj1,
		    CONT.--STEMLISZT.LIST < [ CONST_VALUE 5 ], ... > ] ].
:end :instance.


; <<>>
; >> five.hour.n.1.tdl
; five.hour.n.1.tdl

:begin :instance.

five_hour := hour_word_le &
  [ STEM < "five" >,
    SYNSEM.LOCAL.CONT.KEY.HOUR 5 ].

:end :instance.


; <<>>
; >> fix.v.1.vm.tdl
; fix.v.1.vm.tdl

:begin :instance.

fix_v1 := mv_np_trans_le &
  [ STEM < "fix" >,
    SYNSEM.LOCAL.CONT.KEY _fix_rel ].

:end :instance.


; <<>>
; >> flat.a.1.vm.tdl
; flat.a.1.vm.tdl

:begin :instance.

flat_a1 := intrans_adj_le &
  [ STEM < "flat" >,
    SYNSEM.LOCAL.CONT.KEY _flat_rel ].

:end :instance.


; <<>>
; >> flatly.a.1.vm.tdl
; flatly.a.1.vm.tdl

:begin :instance.

flatly_adv1 := vp_adv_word_le &
  [ STEM < "flatly" >,
    SYNSEM.LOCAL.CONT.KEY _flatly_rel ].

:end :instance.


; <<>>
; >> flex.n.1.vm.tdl
; flex.n.1.vm.tdl

:begin :instance.

Flex_n1 := proper_le &
  [ STEM < "flex" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'Flex ].

:end :instance.


; <<>>
; >> flexible.a.1.vm.tdl
; flexible.a.1.vm.tdl

:begin :instance.

flexible_a1 := intrans_adj_le &
  [ STEM < "flexible" >,
    SYNSEM.LOCAL.CONT.KEY _flexible_rel ].

:end :instance.


; <<>>
; >> flexibly.a.1.vm.tdl
; flexibly.a.1.vm.tdl

:begin :instance.

flexibly := adv_word_le &
  [ STEM < "flexibly" >,
    SYNSEM.LOCAL.CONT.KEY _flexibly_rel ].

:end :instance.


; <<>>
; >> flight.n.1.vm.tdl
; flight.n.1.vm.tdl

:begin :instance.

flight_n1 := intr_noun_word_le &
  [ STEM < "flight" >,
    SYNSEM.LOCAL.CONT.KEY _flight_rel ].

:end :instance.


; <<>>
; >> floor.n.1.vm.tdl
; floor.n.1.vm.tdl

:begin :instance.

floor_n1 := intr_noun_word_le &
  [ STEM < "floor" >,
    SYNSEM.LOCAL.CONT.KEY _floor_rel ].

:end :instance.


; <<>>
; >> fly.v.1.vm.tdl
; fly.v.1.vm.tdl

:begin :instance.

fly_v1 := mv_unerg_le &
  [ STEM < "fly" >,
    SYNSEM.LOCAL.CONT.KEY _fly_rel ].

:end :instance.


; <<>>
; >> fly.n.2.tdl
; fly.n.2.tdl

:begin :instance.

fly_n1 := intr_noun_word_le &
  [ STEM < "fly" >,
    SYNSEM.LOCAL.CONT.KEY _fly_n_rel ].

:end :instance.


; <<>>
; >> fly.off.v.1.vm.tdl
; fly.off.v.1.vm.tdl

:begin :instance.

fly_off_v1 := mv_particle_pp*_le &
  [ STEM < "fly" >,
    SYNSEM.LOCAL.CONT [ KEY _fly_off_rel,
			COMPKEY _off_rel,
			OCOMPKEY _to_rel ] ].

:end :instance.


; <<>>
; >> focus.v.1.vm.tdl
; focus.v.1.vm.tdl

:begin :instance.

focus_v1 := mv_empty_prep_intrans_le &
  [ STEM < "focus" >,
    SYNSEM.LOCAL.CONT [ KEY _focus_on_rel,
			COMPKEY _on_rel ] ].

:end :instance.


; <<>>
; >> follow.around.v.1.tdl
; follow.around.v.1.tdl

:begin :instance.

follow_around_v1 := mv_particle_np_le &
  [ STEM < "follow" >,
    SYNSEM.LOCAL.CONT [ KEY _follow_around_rel,
			COMPKEY _around_rel ] ].

:end :instance.


; <<>>
; >> follow.up.v.1.vm.tdl
; follow.up.v.1.vm.tdl

:begin :instance.

follow_up_v1 := mv_particle_pp*_le &
  [ STEM < "follow" >,
    SYNSEM.LOCAL.CONT [ KEY _follow_up_rel,
			COMPKEY _up_rel,
			OCOMPKEY _on_rel ] ].

:end :instance.


; <<>>
; >> follow.up.v.2.vm.tdl
; follow.up.v.2.vm.tdl

:begin :instance.

follow_up_v2 := mv_particle_np_le &
  [ STEM < "follow" >,
    SYNSEM.LOCAL.CONT [ KEY _follow_up_n_rel,
			COMPKEY _up_rel ] ].

:end :instance.


; <<>>
; >> follow.v.1.tdl
; follow.v.1.tdl

:begin :instance.

follow_v1 := mv_np_trans_le &
  [ STEM < "follow" >,
    SYNSEM.LOCAL.CONT.KEY _follow_rel ].

:end :instance.


; <<>>
; >> following.a.1.vm.tdl
; following.a.1.vm.tdl

:begin :instance.

following_a1 := intrans_adj_le &
  [ STEM < "following" >,
    SYNSEM.LOCAL.CONT.KEY _following_rel ].

:end :instance.


; <<>>
; >> fond.a.1.vm.tdl
; fond.a.1.vm.tdl

:begin :instance.

fond_a1 := trans_adj_le &
  [ STEM < "fond" >,
    SYNSEM.LOCAL.CONT [ KEY _fond_rel,
			COMPKEY _of_rel ] ].

:end :instance.


; <<>>
; >> food.n.1.vm.tdl
; food.n.1.vm.tdl

:begin :instance.

food_n1 := massn_le &
  [ STEM < "food" >,
    SYNSEM.LOCAL.CONT.KEY _food_rel ].

:end :instance.


; <<>>
; >> fool.n.1.vm.tdl
; fool.n.1.vm.tdl

:begin :instance.

fool_n1 := intr_noun_word_le &
  [ STEM < "fool" >,
    SYNSEM.LOCAL.CONT.KEY _fool_rel ].

:end :instance.


; <<>>
; >> for.p.1.tdl
; for.p.1.tdl

:begin :instance.

for := prep_le &
  [ STEM < "for" >,
    SYNSEM.LOCAL.CONT.KEY _for_rel ].

:end :instance.


; <<>>
; >> for.c.1.tdl
; for.c.1.tdl

:begin :instance.

for_c := for_c_le &
  [ STEM < "for" > ].

:end :instance.


; <<>>
; >> for.example.c.1.vm.tdl
; for.example.c.1.vm.tdl
; MULTIKEY < "example" >

:begin :instance.

for_example_root := disc_adv_mle2 &
  [ STEM < "for", "example" >,
    SYNSEM.LOCAL.CONT.KEY.EXCL 'for_example ].

:end :instance.


; <<>>
; >> for.once.a.1.vm.tdl
; for.once.a.1.vm.tdl
; MULTIKEY < "once" >

:begin :instance.

for_once_adv1 := vp_adv_post_word_mle2 &
  [ STEM < "for", "once" >,
    SYNSEM.LOCAL.CONT.KEY _for_once_rel ].

:end :instance.


; <<>>
; >> for.the.time.being.a.1.vm.tdl
; for.the.time.being.a.1.vm.tdl
; MULTIKEY < "time" >

:begin :instance.

for_the_time_being_adv := vp_adv_post_word_4mle3 &
  [ STEM < "for", "the", "time", "being" >,
    SYNSEM.LOCAL.CONT.KEY _for_the_time_being_rel ].

:end :instance.


; <<>>
; >> for.lack.of.p.1.vm.tdl
; for.lack.of.p.1.vm.tdl
; MULTIKEY < "lack" >

:begin :instance.

for_lack_of_p := prep_3mle2 &
  [ STEM < "for", "lack", "of" >,
    SYNSEM.LOCAL.CONT.KEY _for_lack_of_rel ].

:end :instance.


; <<>>
; >> for.example.a.1.vm.tdl
; for.example.a.1.vm.tdl
; MULTIKEY < "example" >

:begin :instance.

for_example_a1 := vp_adv_post_word_mle2 &
  [ STEM < "for", "example" >,
    SYNSEM.LOCAL.CONT.KEY _for_example_rel ].

:end :instance.


; <<>>
; >> for.free.a.1.vm.tdl
; for.free.a.1.vm.tdl
; MULTIKEY < "free" >

:begin :instance.

for_free_a1 := vp_adv_post_word_mle2 &
  [ STEM < "for", "free" >,
    SYNSEM.LOCAL.CONT.KEY _for_free_rel ].

:end :instance.


; <<>>
; >> foregoing.a.1.vm.tdl
; foregoing.a.1.vm.tdl

:begin :instance.

foregoing_a1 := intrans_adj_le &
  [ STEM < "foregoing" >,
    SYNSEM.LOCAL.CONT.KEY _foregoing_rel ].

:end :instance.


; <<>>
; >> foreign.a.1.vm.tdl
; foreign.a.1.vm.tdl

:begin :instance.

foreign_a1 := intrans_adj_le &
  [ STEM < "foreign" >,
    SYNSEM.LOCAL.CONT.KEY _foreign_rel ].

:end :instance.


; <<>>
; >> foremost.a.1.vm.tdl
; foremost.a.1.vm.tdl

:begin :instance.

foremost_a1 := intrans_adj_le &
  [ STEM < "foremost" >,
    SYNSEM.LOCAL.CONT.KEY _foremost_rel ].

:end :instance.


; <<>>
; >> forestall.v.1.vm.tdl
; forestall.v.1.vm.tdl

:begin :instance.

forestall_v1 := mv_np_trans_le &
  [ STEM < "forestall" >,
    SYNSEM.LOCAL.CONT.KEY _forestall_rel ].

:end :instance.


; <<>>
; >> forget.v.1.vm.tdl
; forget.v.1.vm.tdl

:begin :instance.

forget_v1 := mv_np_trans_le &
  [ STEM < "forget" >,
    SYNSEM.LOCAL.CONT.KEY _forget_rel ].

:end :instance.


; <<>>
; >> forget.v.2.vm.tdl
; forget.v.2.vm.tdl

:begin :instance.

forget_v2 := mv_cp_non_trans_le &
  [ STEM < "forget" >,
    SYNSEM.LOCAL.CONT.KEY _forget_rel ].

:end :instance.


; <<>>
; >> forget.v.3.vm.tdl
; forget.v.3.vm.tdl

:begin :instance.

forget_v3 := mv_unerg_le &
  [ STEM < "forget" >,
    SYNSEM.LOCAL.CONT.KEY _forget_rel ].

:end :instance.


; <<>>
; >> forget.v.3.vm.tdl
; forget.v.3.vm.tdl

:begin :instance.

forget_about_v := mv_empty_prep_intrans_le &
  [ STEM < "forget" >,
    SYNSEM.LOCAL.CONT [ KEY _forget_about_rel,
			COMPKEY _about_rel ] ].

:end :instance.


; <<>>
; >> form.v.1.vm.tdl
; form.v.1.vm.tdl

:begin :instance.

form_v1 := mv_np_trans_le &
  [ STEM < "form" >,
    SYNSEM.LOCAL.CONT.KEY _form_rel ].

:end :instance.


; <<>>
; >> form.v.2.vm.tdl
; form.v.2.vm.tdl

:begin :instance.

form_v2 := mv_unacc_le &
  [ STEM < "form" >,
    SYNSEM.LOCAL.CONT.KEY _form_und_rel ].

:end :instance.


; <<>>
; >> formality.n.1.vm.tdl
; formality.n.1.vm.tdl

:begin :instance.

formality_n1 := intr_noun_word_le &
  [ STEM < "formality" >,
    SYNSEM.LOCAL.CONT.KEY _formality_rel ].

:end :instance.


; <<>>
; >> former.a.1.vm.tdl
; former.a.1.vm.tdl

:begin :instance.

former_a1 := intrans_adj_le &
  [ STEM < "former" >,
    SYNSEM.LOCAL.CONT.KEY _former_rel ].

:end :instance.


; <<>>
; >> formerly.a.1.vm.tdl
; formerly.a.1.vm.tdl

:begin :instance.

formerly_adv1 := adv_pre_word_le &
  [ STEM < "formerly" >,
    SYNSEM.LOCAL.CONT.KEY _formerly_rel ].

:end :instance.


; <<>>
; >> forth.a.1.tdl
; forth.a.1.tdl

:begin :instance.

forth_adv := np_adv_word_le &
  [ STEM < "forth" >,
    SYNSEM.LOCAL.CONT.KEY _forth_rel ].

:end :instance.


; <<>>
; >> forthcoming.a.1.vm.tdl
; forthcoming.a.1.vm.tdl

:begin :instance.

forthcoming_a1 := intrans_adj_le &
  [ STEM < "forthcoming" >,
    SYNSEM.LOCAL.CONT.KEY _forthcoming_rel ].

:end :instance.


; <<>>
; >> fortieth.a.1.vm.tdl
; fortieth.a.1.vm.tdl

:begin :instance.

fortieth := ordinal_adj_le &
  [ STEM < "fortieth" >,
    SYNSEM.LOCAL.CONT.KEY.ORD 40 ].

:end :instance.


; <<>>
; >> fortnight.n.1.vm.tdl
; fortnight.n.1.vm.tdl

:begin :instance.

fortnight_n1 := intr_temp_noun_le &
  [ STEM < "fortnight" >,
    SYNSEM.LOCAL.CONT.KEY _fortnight_rel ].

:end :instance.


; <<>>
; >> fortnight.n.2.vm.tdl
; fortnight.n.2.vm.tdl

:begin :instance.

fortnight_n2 := intr_temp_noun_nomod_le &
  [ STEM < "fortnight" >,
    SYNSEM.LOCAL.CONT.KEY _fortnight_rel ].

:end :instance.


; <<>>
; >> fortnightly.a.1.vm.tdl
; fortnightly.a.1.vm.tdl

:begin :instance.

fortnightly_adv1 := vp_adv_post_word_le &
  [ STEM < "fortnightly" >,
    SYNSEM.LOCAL.CONT.KEY _fortnightly_rel ].

:end :instance.


; <<>>
; >> fortunate.a.1.vm.tdl
; fortunate.a.1.vm.tdl

:begin :instance.

fortunate_a1 := intrans_adj_le &
  [ STEM < "fortunate" >,
    SYNSEM.LOCAL.CONT.KEY _fortunate_rel ].

:end :instance.


; <<>>
; >> fortunately.a.1.vm.tdl
; fortunately.a.1.vm.tdl

:begin :instance.

fortunately_adv1 := adv_word_le &
  [ STEM < "fortunately" >,
    SYNSEM.LOCAL.CONT.KEY _fortunately_rel ].

:end :instance.


; <<>>
; >> fortune.n.1.vm.tdl
; fortune.n.1.vm.tdl

:begin :instance.

fortune_n1 := intr_noun_word_le &
  [ STEM < "fortune" >,
    SYNSEM.LOCAL.CONT.KEY _fortune_rel ].

:end :instance.


; <<>>
; >> forty.c.1.tdl
; forty.c.1.tdl

:begin :instance.

forty_w_comps := complemented_unspecified_card_le & 
  [ STEM < "forty" >,
    SYNSEM.LOCAL [ CAT [HEAD intadj2,
			VALENCE.COMPS.FIRST.LOCAL.CAT.HEAD intadj1],
		   CONT.--STEMLISZT.LIST < [ CONST_VALUE 40 ], [] > ] ].

:end :instance.


; <<>>
; >> forty-five.minute.n.1.tdl
; forty-five.minute.n.1.tdl

:begin :instance.

fortyfive_minute := minute_word_le &
  [ STEM < "forty-five" >,
    SYNSEM.LOCAL [ CAT.POSTHEAD +,
		   CONT.KEY.MINUTE 45 ] ].

:end :instance.


; <<>>
; >> fortyeighth.a.1.vm.tdl
; fortyeighth.a.1.vm.tdl

:begin :instance.

fortyeighth := ordinal_adj_le &
  [ STEM < "fortyeighth" >,
    SYNSEM.LOCAL.CONT.KEY.ORD 48 ].

:end :instance.


; <<>>
; >> fortyfifth.a.1.vm.tdl
; fortyfifth.a.1.vm.tdl

:begin :instance.

fortyfifth := ordinal_adj_le &
  [ STEM < "fortyfifth" >,
    SYNSEM.LOCAL.CONT.KEY.ORD 45 ].

:end :instance.


; <<>>
; >> fortyfirst.a.1.vm.tdl
; fortyfirst.a.1.vm.tdl

:begin :instance.

fortyfirst := ordinal_adj_le &
  [ STEM < "fortyfirst" >,
    SYNSEM.LOCAL.CONT.KEY.ORD 41 ].

:end :instance.


; <<>>
; >> fortyfourth.a.1.vm.tdl
; fortyfourth.a.1.vm.tdl

:begin :instance.

fortyfourth := ordinal_adj_le &
  [ STEM < "fortyfourth" >,
    SYNSEM.LOCAL.CONT.KEY.ORD 44 ].

:end :instance.


; <<>>
; >> fortyninth.a.1.vm.tdl
; fortyninth.a.1.vm.tdl

:begin :instance.

fortyninth := ordinal_adj_le &
  [ STEM < "fortyninth" >,
    SYNSEM.LOCAL.CONT.KEY.ORD 49 ].

:end :instance.


; <<>>
; >> fortysecond.a.1.vm.tdl
; fortysecond.a.1.vm.tdl

:begin :instance.

fortysecond := ordinal_adj_le &
  [ STEM < "fortysecond" >,
    SYNSEM.LOCAL.CONT.KEY.ORD 42 ].

:end :instance.


; <<>>
; >> fortyseventh.a.1.vm.tdl
; fortyseventh.a.1.vm.tdl

:begin :instance.

fortyseventh := ordinal_adj_le &
  [ STEM < "fortyseventh" >,
    SYNSEM.LOCAL.CONT.KEY.ORD 47 ].

:end :instance.


; <<>>
; >> fortysixth.a.1.vm.tdl
; fortysixth.a.1.vm.tdl

:begin :instance.

fortysixth := ordinal_adj_le &
  [ STEM < "fortysixth" >,
    SYNSEM.LOCAL.CONT.KEY.ORD 46 ].

:end :instance.


; <<>>
; >> fortythird.a.1.vm.tdl
; fortythird.a.1.vm.tdl

:begin :instance.

fortythird := ordinal_adj_le &
  [ STEM < "fortythird" >,
    SYNSEM.LOCAL.CONT.KEY.ORD 43 ].

:end :instance.


; <<>>
; >> forward.a.1.tdl
; forward.a.1.tdl

:begin :instance.

forward_adv := np_adv_word_le &
  [ STEM < "forward" >,
    SYNSEM.LOCAL.CONT.KEY _forward_rel ].

:end :instance.


; <<>>
; >> forwards.a.1.vm.tdl
; forwards.a.1.vm.tdl

:begin :instance.

forwards_adv1 := np_adv_word_le &
  [ STEM < "forwards" >,
    SYNSEM.LOCAL.CONT.KEY _forwards_rel ].

:end :instance.


; <<>>
; >> foundation.n.1.vm.tdl
; foundation.n.1.vm.tdl

:begin :instance.

foundation_n1 := intr_noun_word_le &
  [ STEM < "foundation" >,
    SYNSEM.LOCAL.CONT.KEY _foundation_rel ].

:end :instance.


; <<>>
; >> four.c.1.tdl
; four.c.1.tdl

:begin :instance.

four := bare_unspecified_card_le & 
  [  STEM < "four" >,
     SYNSEM.LOCAL [ CAT.HEAD intadj1,
		    CONT.--STEMLISZT.LIST < [ CONST_VALUE 4 ], ... > ] ].
:end :instance.


; <<>>
; >> four.hour.n.1.tdl
; four.hour.n.1.tdl

:begin :instance.

four_hour := hour_word_le &
  [ STEM < "four" >,
    SYNSEM.LOCAL.CONT.KEY.HOUR 4 ].

:end :instance.


; <<>>
; >> fourteen.c.1.tdl
; fourteen.c.1.tdl

:begin :instance.

fourteen := bare_unspecified_card_le & 
  [  STEM < "fourteen" >,
     SYNSEM.LOCAL [ CAT.HEAD intadj1,
		    CONT.--STEMLISZT.LIST < [ CONST_VALUE 14 ], ... > ] ].
:end :instance.


; <<>>
; >> fourteenth.a.1.vm.tdl
; fourteenth.a.1.vm.tdl

:begin :instance.

fourteenth := ordinal_adj_le &
  [ STEM < "fourteenth" >,
    SYNSEM.LOCAL.CONT.KEY.ORD 14 ].

:end :instance.


; <<>>
; >> fourteenth.day.n.1.tdl
; fourteenth.day.n.1.tdl

:begin :instance.

fourteenth_day := day_of_month_le &
  [ STEM < "fourteenth" >,
    SYNSEM.LOCAL.CONT.KEY.DAY 14 ].

:end :instance.


; <<>>
; >> fourth.a.1.vm.tdl
; fourth.a.1.vm.tdl

:begin :instance.

fourth := ordinal_adj_le &
  [ STEM < "fourth" >,
    SYNSEM.LOCAL.CONT.KEY.ORD 4 ].

:end :instance.


; <<>>
; >> fourth.day.n.1.tdl
; fourth.day.n.1.tdl

:begin :instance.

fourth_day := day_of_month_le &
  [ STEM < "fourth" >,
    SYNSEM.LOCAL.CONT.KEY.DAY 4 ].

:end :instance.


; <<>>
; >> framework.n.1.vm.tdl
; framework.n.1.vm.tdl

:begin :instance.

framework_n1 := intr_noun_word_le &
  [ STEM < "framework" >,
    SYNSEM.LOCAL.CONT.KEY _framework_rel ].

:end :instance.


; <<>>
; >> france.n.1.vm.tdl
; france.n.1.vm.tdl

:begin :instance.

France_n1 := proper_le &
  [ STEM < "france" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'France ].

:end :instance.


; <<>>
; >> frank.a.1.vm.tdl
; frank.a.1.vm.tdl

:begin :instance.

frank_a1 := intrans_adj_le &
  [ STEM < "frank" >,
    SYNSEM.LOCAL.CONT.KEY _frank_rel ].

:end :instance.


; <<>>
; >> frankfurt.n.1.vm.tdl
; frankfurt.n.1.vm.tdl

:begin :instance.

Frankfurt_n1 := proper_le &
  [ STEM < "frankfurt" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'Frankfurt ].

:end :instance.


; <<>>
; >> free.a.1.vm.tdl
; free.a.1.vm.tdl

:begin :instance.

free_a1 := intrans_adj_le &
  [ STEM < "free" >,
    SYNSEM.LOCAL.CONT.KEY _free_rel ].

:end :instance.


; <<>>
; >> freely.a.1.vm.tdl
; freely.a.1.vm.tdl

:begin :instance.

freely := adv_word_le &
  [ STEM < "freely" >,
    SYNSEM.LOCAL.CONT.KEY _freely_rel ].

:end :instance.


; <<>>
; >> french.a.1.vm.tdl
; french.a.1.vm.tdl

:begin :instance.

french_a1 := intrans_adj_le &
  [ STEM < "french" >,
    SYNSEM.LOCAL.CONT.KEY _french_rel ].

:end :instance.


; <<>>
; >> frequent.a.1.vm.tdl
; frequent.a.1.vm.tdl

:begin :instance.

frequent_a1 := intrans_adj_le &
  [ STEM < "frequent" >,
    SYNSEM.LOCAL.CONT.KEY _frequent_rel ].

:end :instance.


; <<>>
; >> frequently.a.1.vm.tdl
; frequently.a.1.vm.tdl

:begin :instance.

frequently_adv1 := vp_adv_word_le &
  [ STEM < "frequently" >,
    SYNSEM.LOCAL.CONT.KEY _frequently_rel ].

:end :instance.


; <<>>
; >> fresh.a.1.vm.tdl
; fresh.a.1.vm.tdl

:begin :instance.

fresh_a1 := intrans_adj_le &
  [ STEM < "fresh" >,
    SYNSEM.LOCAL.CONT.KEY _fresh_rel ].

:end :instance.


; <<>>
; >> freshly.a.1.vm.tdl
; freshly.a.1.vm.tdl

:begin :instance.

freshly_adv1 := vp_adv_post_word_le &
  [ STEM < "freshly" >,
    SYNSEM.LOCAL.CONT.KEY _freshly_rel ].

:end :instance.


; <<>>
; >> friday.n.1.tdl
; friday.n.1.tdl

:begin :instance.

friday1 := day_of_week_le &
  [ STEM < "friday" >,
    SYNSEM.LOCAL.CONT.KEY.DAY 'fri ].

:end :instance.


; <<>>
; >> friday.n.2.tdl
; friday.n.2.tdl

:begin :instance.

friday_cn := intr_temp_noun_le &
  [ STEM < "friday" >,
    SYNSEM.LOCAL.CONT.KEY dofw_rel & [ DAY 'friday ] ].

:end :instance.


; <<>>
; >> friend.n.1.vm.tdl
; friend.n.1.vm.tdl

:begin :instance.

friend_n1 := intr_noun_word_le &
  [ STEM < "friend" >,
    SYNSEM.LOCAL.CONT.KEY _friend_rel ].

:end :instance.


; <<>>
; >> friendly.a.1.vm.tdl
; friendly.a.1.vm.tdl

:begin :instance.

friendly_a1 := intrans_adj_le &
  [ STEM < "friendly" >,
    SYNSEM.LOCAL.CONT.KEY _friendly_rel ].

:end :instance.


; <<>>
; >> friendship.n.1.tdl
; friendship.n.1.tdl

:begin :instance.

friendship_n1 := massn_le &
  [ STEM < "friendship" >,
    SYNSEM.LOCAL.CONT.KEY _friendship_rel ].

:end :instance.


; <<>>
; >> fright.n.1.vm.tdl
; fright.n.1.vm.tdl

:begin :instance.

fright_n1 := massn_le &
  [ STEM < "fright" >,
    SYNSEM.LOCAL.CONT.KEY _fright_rel ].

:end :instance.


; <<>>
; >> from.p.1.tdl
; from.p.1.tdl

:begin :instance.

from := reg_prep_le &
  [ STEM < "from" >,
    SYNSEM.LOCAL.CONT.KEY _from_rel ].

:end :instance.


; <<>>
; >> from.p.2.tdl
; from.p.2.tdl

:begin :instance.

from_to := ditrans_prep_le &
  [ STEM < "from" >,
    SYNSEM.LOCAL [ CAT.VALENCE.COMPS < synsem, 
				       [ LOCAL [ CAT.VALENCE.COMPS < >,
						 CONT [ KEY until_rel &
							    [ HANDEL #hand,
							      ARG #arg ],
							COMPKEY temp_rel ]]] >,
		   CONT [ TOP #hand,
			  KEY _from_to_rel &
				[ ARG #arg ] ,
			  COMPKEY temp_rel ] ] ].

:end :instance.


; <<>>
; >> from.p.3.tdl
; from.p.3.tdl

:begin :instance.

from_time_on := ditrans_prep_le &
  [ STEM < "from" >,
    SYNSEM.LOCAL.CONT [ KEY _from_time_on_rel,
			COMPKEY temp_rel,
			OCOMPKEY _on_rel ] ].

:end :instance.


; <<>>
; >> fruit.n.1.vm.tdl
; fruit.n.1.vm.tdl

:begin :instance.

fruit_n1 := massn_le &
  [ STEM < "fruit" >,
    SYNSEM.LOCAL.CONT.KEY _fruit_rel ].

:end :instance.


; <<>>
; >> frustration.n.1.vm.tdl
; frustration.n.1.vm.tdl

:begin :instance.

frustration_n1 := massn_le &
  [ STEM < "frustration" >,
    SYNSEM.LOCAL.CONT.KEY _frustration_rel ].

:end :instance.


; <<>>
; >> full.a.1.vm.tdl
; full.a.1.vm.tdl

:begin :instance.

full_a1 := intrans_adj_le &
  [ STEM < "full" >,
    SYNSEM.LOCAL.CONT.KEY _full_rel ].

:end :instance.


; <<>>
; >> fully.a.1.vm.tdl
; fully.a.1.vm.tdl

:begin :instance.

fully_adv1 := adv_word_le &
  [ STEM < "fully" >,
    SYNSEM.LOCAL.CONT.KEY _fully_rel ].

:end :instance.


; <<>>
; >> funny.a.1.vm.tdl
; funny.a.1.vm.tdl

:begin :instance.

funny_a1 := intrans_adj_le &
  [ STEM < "funny" >,
    SYNSEM.LOCAL.CONT.KEY _funny_rel ].

:end :instance.


; <<>>
; >> further.a.1.vm.tdl
; further.a.1.vm.tdl

:begin :instance.

further_a1 := intrans_adj_le &
  [ STEM < "further" >,
    SYNSEM.LOCAL.CONT.KEY _further_rel ].

:end :instance.


; <<>>
; >> further.a.2.vm.tdl
; further.a.2.vm.tdl

:begin :instance.

further := adv_word_le &
  [ STEM < "further" >,
    SYNSEM.LOCAL.CONT.KEY _further_adv_rel ].

:end :instance.


; <<>>
; >> furthermore.c.1.vm.tdl
; furthermore.c.1.vm.tdl

:begin :instance.

furthermore_root := disc_adv_le &
  [ STEM < "furthermore" >,
    SYNSEM.LOCAL.CONT.KEY.EXCL 'furthermore ].

:end :instance.

; <<>>
; >> future.a.1.vm.tdl
; future.a.1.vm.tdl

:begin :instance.

future_a1 := intrans_adj_le &
  [ STEM < "future" >,
    SYNSEM.LOCAL.CONT.KEY _future_adj_rel ].

:end :instance.


; <<>>
; >> future.n.1.vm.tdl
; future.n.1.vm.tdl

:begin :instance.

future_n1 := intr_noun_word_le &
  [ STEM < "future" >,
    SYNSEM.LOCAL.CONT.KEY _future_rel ].

:end :instance.


; <<>>
; >> gain.v.1.vm.tdl
; gain.v.1.vm.tdl

:begin :instance.

gain_v1 := mv_np_trans_le &
  [ STEM < "gain" >,
    SYNSEM.LOCAL.CONT.KEY _gain_rel ].

:end :instance.


; <<>>
; >> game.n.1.vm.tdl
; game.n.1.vm.tdl

:begin :instance.

game_n1 := intr_noun_word_le &
  [ STEM < "game" >,
    SYNSEM.LOCAL.CONT.KEY _game_rel ].

:end :instance.


; <<>>
; >> gap.n.1.vm.tdl
; gap.n.1.vm.tdl

:begin :instance.

gap_n1 := intr_noun_word_le &
  [ STEM < "gap" >,
    SYNSEM.LOCAL.CONT.KEY _gap_rel ].

:end :instance.


; <<>>
; >> garage.n.1.vm.tdl
; garage.n.1.vm.tdl

:begin :instance.

garage_n1 := intr_noun_word_le &
  [ STEM < "garage" >,
    SYNSEM.LOCAL.CONT.KEY _garage_rel ].

:end :instance.


; <<>>
; >> garden.n.1.vm.tdl
; garden.n.1.vm.tdl

:begin :instance.

garden_n1 := intr_noun_word_le &
  [ STEM < "garden" >,
    SYNSEM.LOCAL.CONT.KEY _garden_rel ].

:end :instance.


; <<>>
; >> gate.n.1.vm.tdl
; gate.n.1.vm.tdl

:begin :instance.

gate_n1 := intr_noun_word_le &
  [ STEM < "gate" >,
    SYNSEM.LOCAL.CONT.KEY _gate_rel ].

:end :instance.


; <<>>
; >> gather.v.1.vm.tdl
; gather.v.1.vm.tdl

:begin :instance.

gather_v1 := mv_unerg_le &
  [ STEM < "gather" >,
    SYNSEM.LOCAL.CONT.KEY _gather_coll_rel ].

:end :instance.


; <<>>
; >> gather.v.2.vm.tdl
; gather.v.2.vm.tdl

:begin :instance.

gather_v2 := mv_np_trans_le &
  [ STEM < "gather" >,
    SYNSEM.LOCAL.CONT.KEY _gather_rel ].

:end :instance.


; <<>>
; >> gathering.n.1.vm.tdl
; gathering.n.1.vm.tdl

:begin :instance.

gathering_n1 := noun_ppof_word_le &
  [ STEM < "gathering" >,
    SYNSEM.LOCAL.CONT.KEY _gathering_rel ].

:end :instance.


; <<>>
; >> generally.a.1.vm.tdl
; generally.a.1.vm.tdl

:begin :instance.

generally_adv1 := adv_pre_word_le &
  [ STEM < "generally" >,
    SYNSEM.LOCAL.CONT.KEY _generally_rel ].

:end :instance.


; <<>>
; >> gentleman.n.1.vm.tdl
; gentleman.n.1.vm.tdl

:begin :instance.

gentleman_n1 := intr_noun_word_le &
  [ STEM < "gentleman" >,
    SYNSEM.LOCAL.CONT.KEY _gentleman_rel ].

:end :instance.


; <<>>
; >> genuine.a.1.vm.tdl
; genuine.a.1.vm.tdl

:begin :instance.

genuine_a1 := intrans_adj_le &
  [ STEM < "genuine" >,
    SYNSEM.LOCAL.CONT.KEY _genuine_rel ].

:end :instance.


; <<>>
; >> german.a.1.vm.tdl
; german.a.1.vm.tdl

:begin :instance.

german_a1 := intrans_adj_le &
  [ STEM < "german" >,
    SYNSEM.LOCAL.CONT.KEY _german_rel ].

:end :instance.


; <<>>
; >> german.n.1.vm.tdl
; german.n.1.vm.tdl

:begin :instance.

German_n1 := proper_le &
  [ STEM < "german" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'German ].

:end :instance.


; <<>>
; >> germany.n.1.vm.tdl
; germany.n.1.vm.tdl

:begin :instance.

Germany_n1 := proper_le &
  [ STEM < "germany" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'Germany ].

:end :instance.


; <<>>
; >> get.away.v.1.vm.tdl
; get.away.v.1.vm.tdl

:begin :instance.

get_away_v1 := mv_particle_le &
  [ STEM < "get" >,
    SYNSEM.LOCAL.CONT [ KEY _get_away_rel,
			COMPKEY _away_rel ] ].

:end :instance.


; <<>>
; >> get.back.together.v.1.vm.tdl
; get.back.together.v.1.vm.tdl

:begin :instance.

get_back_together_v1 := mv_particle_adv_le &
  [ STEM < "get" >,
    SYNSEM.LOCAL.CONT [ KEY _get_back_return_rel,
			COMPKEY _back_adv_rel,
			OCOMPKEY _together_rel ] ].

:end :instance.


; <<>>
; >> get.hold.v.1.vm.tdl
; get.hold.v.1.vm.tdl

:begin :instance.

get_hold_v1 := mv_prep_trans_le &
  [ STEM < "get" >,
    SYNSEM.LOCAL.CONT [ KEY _get_hold_rel,
			COMPKEY _hold_n_rel,
			OCOMPKEY _of_rel ] ].

:end :instance.


; <<>>
; >> get.over.v.1.vm.tdl
; get.over.v.1.vm.tdl

:begin :instance.

get_over_v1 := mv_empty_prep_intrans_le &
  [ STEM < "get" >,
    SYNSEM.LOCAL.CONT [ KEY _get_over_rel,
			COMPKEY _over_rel ] ].

:end :instance.


; <<>>
; >> get.through.v.1.vm.tdl
; get.through.v.1.vm.tdl

:begin :instance.

get_through_v1 := mv_particle_le &
  [ STEM < "get" >,
    SYNSEM.LOCAL.CONT [ KEY _get_through_rel, 
			COMPKEY _through_rel ] ].

:end :instance.


; <<>>
; >> get.together.with.v.1.vm.tdl
; get.together.with.v.1.vm.tdl

:begin :instance.

get_together_v1 := mv_particle_le &
  [ STEM < "get" >,
    SYNSEM.LOCAL.CONT [ KEY _get_together_rel,
			COMPKEY _together_rel ] ].

:end :instance.


; <<>>
; >> get.together.with.v.1.vm.tdl
; get.together.with.v.1.vm.tdl

:begin :instance.

get_together_with_v1 := mv_particle_pp_le &
  [ STEM < "get" >,
    SYNSEM.LOCAL.CONT [ KEY _get_together_with_rel,
			COMPKEY _together_rel,
			OCOMPKEY _with_rel ] ].

:end :instance.


; <<>>
; >> get.v.1.tdl
; get.v.1.tdl

:begin :instance.

get_v1 := mv_np_trans_le &
  [ STEM < "get" >,
    SYNSEM.LOCAL.CONT.KEY _get_rel ].

:end :instance.


; <<>>
; >> get.v.2.tdl
; get.v.2.tdl

:begin :instance.

get_prd_v1 := mv_subj_equi_prd_le &
  [ STEM < "get" >,
    SYNSEM.LOCAL [ CAT.VALENCE.COMPS 
			< [ LOCAL.CAT.HEAD adverbee & [ VFORM pas ] ] >,
		   CONT.KEY _get_state_rel ] ].

:end :instance.


; <<>>
; >> get.up.v.1.vm.tdl
; get.up.v.1.vm.tdl

:begin :instance.

get_up_v1 := mv_particle_le &
  [ STEM < "get" >,
    SYNSEM.LOCAL.CONT [ KEY _get_up_rel,
			COMPKEY _up_rel ] ].

:end :instance.


; <<>>
; >> give.v.1.tdl
; give.v.1.tdl

:begin :instance.

give1 := mv_ditrans_le &
  [ STEM < "give" >,
    SYNSEM.LOCAL.CONT.KEY _give_rel ].

:end :instance.


; <<>>
; >> glad.a.1.vm.tdl
; glad.a.1.vm.tdl

:begin :instance.

glad_a1 := intrans_adj_le &
  [ STEM < "glad" >,
    SYNSEM.LOCAL.CONT.KEY _glad_rel ].

:end :instance.


; <<>>
; >> gladly.a.1.vm.tdl
; gladly.a.1.vm.tdl

:begin :instance.

gladly_adv1 := vp_adv_post_word_le &
  [ STEM < "gladly" >,
    SYNSEM.LOCAL.CONT.KEY _gladly_rel ].

:end :instance.


; <<>>
; >> glass.n.1.vm.tdl
; glass.n.1.vm.tdl

:begin :instance.

glass_n1 := noun_ppof_word_le &
  [ STEM < "glass" >,
    SYNSEM.LOCAL.CONT.KEY _glass_rel ].

:end :instance.


; <<>>
; >> go.along_with.v.1.vm.tdl
; go.along_with.v.1.vm.tdl

:begin :instance.

go_along_with_v1 := mv_particle_pp*_le &
  [ STEM < "go" >,
    SYNSEM.LOCAL.CONT [ KEY _go_along_with_rel,
			COMPKEY _along_rel,
			OCOMPKEY _with_rel ] ].

:end :instance.


; <<>>
; >> go.on.v.1.tdl
; go.on.v.1.tdl

:begin :instance.

go_on_v1 := mv_particle_le &
  [ STEM < "go" >,
    SYNSEM.LOCAL.CONT [ KEY _go_on_rel,
			COMPKEY _on_rel ] ].

:end :instance.


; <<>>
; >> go.out.v.1.vm.tdl
; go.out.v.1.vm.tdl

:begin :instance.

go_out_v1 := mv_particle_le &
  [ STEM < "go" >,
    SYNSEM.LOCAL.CONT [ KEY _go_out_rel,
			COMPKEY _out_rel ] ].

:end :instance.


; <<>>
; >> go.over.v.1.tdl
; go.over.v.1.tdl

:begin :instance.

go_over_v1 := mv_empty_prep_intrans_le &
  [ STEM < "go" >,
    SYNSEM.LOCAL.CONT [ KEY _go_over_rel,
			COMPKEY _over_rel ] ].

:end :instance.


; <<>>
; >> go.through.v.1.tdl
; go.through.v.1.tdl

:begin :instance.

go_through_v1 := mv_empty_prep_intrans_le &
  [ STEM < "go" >,
    SYNSEM.LOCAL.CONT [ KEY _go_through_rel,
			COMPKEY _through_rel ] ].

:end :instance.


; <<>>
; >> go.v.1.tdl
; go.v.1.tdl

:begin :instance.

go_v1 := mv_prep*_intrans_le &
  [ STEM < "go" >,
    SYNSEM.LOCAL.CONT [ KEY _go_rel,
			COMPKEY dir_rel ] ].

:end :instance.


; <<>>
; >> go.v.2.vm.tdl
; go.v.2.vm.tdl

:begin :instance.

go_v2 := mv_prd_ssr_le &
  [ STEM < "go" >,
    SYNSEM.LOCAL [ CAT.VALENCE.COMPS < [ LOCAL.CAT.HEAD verb &
							[ VFORM prp ] ] >,
		   CONT.KEY _go_ing_rel ] ].

:end :instance.


; <<>>
; >> go.along.v.1.vm.tdl
; go.along.v.1.vm.tdl

:begin :instance.

go_along_v1 := mv_particle_le &
  [ STEM < "go" >,
    SYNSEM.LOCAL.CONT [ KEY _go_along_rel,
			COMPKEY _along_rel ] ].

:end :instance.


; <<>>
; >> go.away.v.1.vm.tdl
; go.away.v.1.vm.tdl

:begin :instance.

go_away_v1 := mv_particle_le &
  [ STEM < "go" >,
    SYNSEM.LOCAL.CONT [ KEY _go_away_rel,
			COMPKEY _away_rel ] ].

:end :instance.


; <<>>
; >> go.state.v.2.tdl
; go.state.v.2.tdl

:begin :instance.

go_state_v1 := mv_subj_equi_prd_le &
  [ STEM < "go" >,
    SYNSEM.LOCAL [ CAT.VALENCE.COMPS 
			< [ LOCAL.CAT.HEAD adj ] >,
		   CONT.KEY _go_state_rel ] ].

:end :instance.


; <<>>
; >> goal.n.1.vm.tdl
; goal.n.1.vm.tdl

:begin :instance.

goal_n1 := intr_noun_word_le &
  [ STEM < "goal" >,
    SYNSEM.LOCAL.CONT.KEY _goal_rel ].

:end :instance.


; <<>>
; >> going.by.p.1.vm.tdl
; going.by.p.1.vm.tdl

:begin :instance.

going_by := prep_mle1 &
  [ STEM < "going", "by" >,
    SYNSEM.LOCAL.CONT.KEY _going_by_rel ].

:end :instance.


; <<>>
; >> going.to.v.1.tdl
; going.to.v.1.tdl

:begin :instance.

going_to_v1 := quasimodal_le &
  [ STEM < "going" >,
    SYNSEM.LOCAL [ CAT [ HEAD [ VFORM prp, 
				PRD + ],
			 VALENCE.COMPS.FIRST.LOCAL.CONT.INDEX.TIME #e ],
		   CONT.LISZT <! _going_to_rel &
			         [ HANDEL #hand ],
			         temp_prec_rel & 
			         [ HANDEL #hand,
				   EARLIER #s,
				   LATER #e ] !>,
		   CTXT.C-INDS.SPEECH #s ] ].

:end :instance.


; <<>>
; >> golden.a.1.vm.tdl
; golden.a.1.vm.tdl

:begin :instance.

golden_a1 := intrans_adj_le &
  [ STEM < "golden" >,
    SYNSEM.LOCAL.CONT.KEY _golden_rel ].

:end :instance.


; <<>>
; >> good.a.1.tdl
; good.a.1.tdl

:begin :instance.

good_a1 := intrans_adj_le &
  [ STEM < "good" >,
    SYNSEM.LOCAL.CONT.KEY _good_rel ].

:end :instance.


; <<>>
; >> good.disc.c.1.vm.tdl
; good.disc.c.1.vm.tdl

:begin :instance.

good_root := disc_adv_le &
  [ STEM < "good" >,
    SYNSEM.LOCAL.CONT.KEY.EXCL 'good ].

:end :instance.


; <<>>
; >> good.friday.n.1.tdl
; good.friday.n.1.tdl

:begin :instance.

good_friday := holiday_word_mle1 &
  [ STEM < "good", "friday" >,
    SYNSEM.LOCAL.CONT.KEY.DAY 'good_friday ].

:end :instance.


; <<>>
; >> good.heavens.c.1.vm.tdl
; good.heavens.c.1.vm.tdl
; MULTIKEY < "heavens" >

:begin :instance.

good_heavens := disc_adv_mle2 &
  [ STEM < "good", "heavens" >,
    SYNSEM.LOCAL.CONT.KEY.EXCL 'good_heavens ].

:end :instance.


; <<>>
; >> goodbye.n.1.vm.tdl
; goodbye.n.1.vm.tdl

:begin :instance.

goodbye_n1 := intr_noun_word_le &
  [ STEM < "goodbye" >,
    SYNSEM.LOCAL.CONT.KEY _goodbye_n_rel ].

:end :instance.


; <<>>
; >> goods.n.1.vm.tdl
; goods.n.1.vm.tdl

:begin :instance.

goods_n1 := plurn_le &
  [ STEM < "goods" >,
    SYNSEM.LOCAL.CONT.KEY _goods_rel ].

:end :instance.


; <<>>
; >> goose.n.1.vm.tdl
; goose.n.1.vm.tdl

:begin :instance.

goose_n1 := intr_noun_word_le &
  [ STEM < "goose" >,
    SYNSEM.LOCAL.CONT.KEY _goose_rel ].

:end :instance.


; <<>>
; >> goose.n.2.vm.tdl
; goose.n.2.vm.tdl

:begin :instance.

goose_n2 := massn_le &
  [ STEM < "goose" >,
    SYNSEM.LOCAL.CONT.KEY _goose_meat_rel ].

:end :instance.


; <<>>
; >> government.n.1.vm.tdl
; government.n.1.vm.tdl

:begin :instance.

government_n1 := noun_ppof_word_le &
  [ STEM < "government" >,
    SYNSEM.LOCAL.CONT.KEY _government_rel ].

:end :instance.


; <<>>
; >> grab.v.1.vm.tdl
; grab.v.1.vm.tdl

:begin :instance.

grab_v1 := mv_np_trans_le &
  [ STEM < "grab" >,
    SYNSEM.LOCAL.CONT.KEY _grab_rel ].

:end :instance.


; <<>>
; >> gran.n.1.vm.tdl
; gran.n.1.vm.tdl

:begin :instance.

Gran_n1 := proper_le &
  [ STEM < "gran" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'Gran ].

:end :instance.


; <<>>
; >> grandmother.n.1.vm.tdl
; grandmother.n.1.vm.tdl

:begin :instance.

grandmother_n1 := intr_noun_word_le &
  [ STEM < "grandmother" >,
    SYNSEM.LOCAL.CONT.KEY _grandmother_rel ].

:end :instance.


; <<>>
; >> grasp.v.1.vm.tdl
; grasp.v.1.vm.tdl

:begin :instance.

grasp_v1 := mv_np_trans_le &
  [ STEM < "grasp" >,
    SYNSEM.LOCAL.CONT.KEY _grasp_rel ].

:end :instance.


; <<>>
; >> gratis.a.1.vm.tdl
; gratis.a.1.vm.tdl

:begin :instance.

gratis_adv1 := vp_adv_post_word_le &
  [ STEM < "gratis" >,
    SYNSEM.LOCAL.CONT.KEY _gratis_rel ].

:end :instance.


; <<>>
; >> gratuitously.a.1.vm.tdl
; gratuitously.a.1.vm.tdl

:begin :instance.

gratuitously_adv1 := adv_word_le &
  [ STEM < "gratuitously" >,
    SYNSEM.LOCAL.CONT.KEY _gratuitously_rel ].

:end :instance.


; <<>>
; >> grave.a.1.vm.tdl
; grave.a.1.vm.tdl

:begin :instance.

grave_a1 := intrans_adj_le &
  [ STEM < "grave" >,
    SYNSEM.LOCAL.CONT.KEY _grave_rel ].

:end :instance.


; <<>>
; >> great.disc.c.1.vm.tdl
; great.disc.c.1.vm.tdl

:begin :instance.

great_root := disc_adv_le &
  [ STEM < "great" >,
    SYNSEM.LOCAL.CONT.KEY.EXCL 'great ].

:end :instance.


; <<>>
; >> great.a.1.vm.tdl
; great.a.1.vm.tdl

:begin :instance.

great_a1 := vp_adv_post_word_le &
  [ STEM < "great" >,
    SYNSEM.LOCAL.CONT.KEY _great_adv_rel ].

:end :instance.


; <<>>
; >> great.a.2.vm.tdl
; great.a.2.vm.tdl

:begin :instance.

great_adj := intrans_adj_le &
  [ STEM < "great" >,
    SYNSEM.LOCAL.CONT.KEY _great_rel ].

:end :instance.


; <<>>
; >> greatly.a.1.vm.tdl
; greatly.a.1.vm.tdl

:begin :instance.

greatly_adv1 := vp_adv_word_le &
  [ STEM < "greatly" >,
    SYNSEM.LOCAL.CONT.KEY _greatly_rel ].

:end :instance.


; <<>>
; >> greek.a.1.vm.tdl
; greek.a.1.vm.tdl

:begin :instance.

greek_a1 := intrans_adj_le &
  [ STEM < "greek" >,
    SYNSEM.LOCAL.CONT.KEY _greek_rel ].

:end :instance.


; <<>>
; >> greek.n.1.vm.tdl
; greek.n.1.vm.tdl

:begin :instance.

Greek_n1 := proper_le &
  [ STEM < "greek" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'Greek ].

:end :instance.


; <<>>
; >> greet.v.1.vm.tdl
; greet.v.1.vm.tdl

:begin :instance.

greet_v1 := mv_np_trans_le &
  [ STEM < "greet" >,
    SYNSEM.LOCAL.CONT.KEY _greet_rel ].

:end :instance.


; <<>>
; >> greeting.n.1.vm.tdl
; greeting.n.1.vm.tdl

:begin :instance.

greeting_n1 := intr_noun_word_le &
  [ STEM < "greeting" >,
    SYNSEM.LOCAL.CONT.KEY _greeting_rel ].

:end :instance.


; <<>>
; >> grossheim.n.1.vm.tdl
; grossheim.n.1.vm.tdl

:begin :instance.

Grossheim_n1 := proper_le &
  [ STEM < "grossheim" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'Grossheim ].

:end :instance.


; <<>>
; >> ground.a.1.vm.tdl
; ground.a.1.vm.tdl

:begin :instance.

ground_a1 := intrans_adj_le &
  [ STEM < "ground" >,
    SYNSEM.LOCAL.CONT.KEY _ground_adj_rel ].

:end :instance.


; <<>>
; >> ground.n.1.vm.tdl
; ground.n.1.vm.tdl

:begin :instance.

ground_n1 := massn_le &
  [ STEM < "ground" >,
    SYNSEM.LOCAL.CONT.KEY _ground_rel ].

:end :instance.


; <<>>
; >> group.n.1.vm.tdl
; group.n.1.vm.tdl

:begin :instance.

group_n1 := noun_ppof_word_le &
  [ STEM < "group" >,
    SYNSEM.LOCAL.CONT.KEY _group_rel ].

:end :instance.


; <<>>
; >> grow.v.1.vm.tdl
; grow.v.1.vm.tdl

:begin :instance.

grow_v1 := mv_np_trans_le &
  [ STEM < "grow" >,
    SYNSEM.LOCAL.CONT.KEY _grow_rel ].

:end :instance.


; <<>>
; >> guess.v.1.vm.tdl
; guess.v.1.vm.tdl

:begin :instance.

guess_v1 := mv_np_trans_le &
  [ STEM < "guess" >,
    SYNSEM.LOCAL.CONT.KEY _guess_rel ].

:end :instance.


; <<>>
; >> guess.v.2.vm.tdl
; guess.v.2.vm.tdl

:begin :instance.

guess_v2 := mv_cp_non_trans_le &
  [ STEM < "guess" >,
    SYNSEM.LOCAL.CONT.KEY _guess_rel ].

:end :instance.


; <<>>
; >> guess.v.3.vm.tdl
; guess.v.3.vm.tdl

:begin :instance.

guess_v3 := mv_unerg_le &
  [ STEM < "guess" >,
    SYNSEM.LOCAL.CONT.KEY _guess_rel ].

:end :instance.


; <<>>
; >> gun.n.1.vm.tdl
; gun.n.1.vm.tdl

:begin :instance.

gun_n1 := intr_noun_word_le &
  [ STEM < "gun" >,
    SYNSEM.LOCAL.CONT.KEY _gun_rel ].

:end :instance.


; <<>>
; >> ha.c.1.vm.tdl
; ha.c.1.vm.tdl

:begin :instance.

ha_root := disc_adv_le &
  [ STEM < "ha" >,
    SYNSEM.LOCAL.CONT.KEY.EXCL 'ha ].

:end :instance.


; <<>>
; >> ha.ha.c.1.vm.tdl
; ha.ha.c.1.vm.tdl

:begin :instance.

ha_ha_root := disc_adv_mle1 &
  [ STEM < "ha", "ha" >,
    SYNSEM.LOCAL.CONT.KEY.EXCL 'ha_ha ].

:end :instance.


; <<>>
; >> had.vx.1.tdl
; had.vx.1.tdl

:begin :instance.

had_aux := had_aux_le &
  [ STEM < "had" > ].

:end :instance.


; <<>>
; >> had.cx.vx.1.tdl
; had.cx.vx.1.tdl

:begin :instance.

had_aux_cx := had_aux_le &
  [ STEM < "d" > ].

:end :instance.


; <<>>
; >> had.vx.2.tdl
; had.vx.2.tdl

:begin :instance.

had_aux_subj := had_aux_subj_le &
  [ STEM < "had" > ].

:end :instance.


; <<>>
; >> hadnt.vx.1.tdl
; hadnt.vx.1.tdl

:begin :instance.

hadnt_aux := had_aux_neg_mle1 &
  [ STEM < "hadn", "t" > ].

:end :instance.


; <<>>
; >> hadnt.vx.2.tdl
; hadnt.vx.2.tdl

:begin :instance.

hadnt_aux_subj := had_aux_subj_neg_mle1 &
  [ STEM < "hadn", "t" > ].

:end :instance.


; <<>>
; >> hairdresser.n.1.vm.tdl
; hairdresser.n.1.vm.tdl

:begin :instance.

hairdresser_n1 := intr_noun_word_le &
  [ STEM < "hairdresser" >,
    SYNSEM.LOCAL.CONT.KEY _hairdresser_rel ].

:end :instance.


; <<>>
; >> half.a.1.tdl
; half.a.1.tdl

:begin :instance.

half_deg := degree_spec_le &
  [ STEM < "half" >,
    SYNSEM.LOCAL.CONT.KEY _half_rel ].

:end :instance.


; <<>>
; >> half.hour.n.1.tdl
; half.hour.n.1.tdl

:begin :instance.

half_hour := minute_word_le &
  [ STEM < "half" >,
    SYNSEM.LOCAL [ CAT.POSTHEAD -,
		   CONT.KEY.MINUTE 30 ] ].

:end :instance.


; <<>>
; >> half-way.a.1.vm.tdl
; half-way.a.1.vm.tdl

:begin :instance.

half-way_a1 := intrans_adj_le &
  [ STEM < "half-way" >,
    SYNSEM.LOCAL.CONT.KEY _half-way_rel ].

:end :instance.


; <<>>
; >> hall.n.1.vm.tdl
; hall.n.1.vm.tdl

:begin :instance.

hall_n1 := intr_noun_word_le &
  [ STEM < "hall" >,
    SYNSEM.LOCAL.CONT.KEY _hall_rel ].

:end :instance.


; <<>>
; >> hamburg.n.1.vm.tdl
; hamburg.n.1.vm.tdl

:begin :instance.

Hamburg_n1 := proper_le &
  [ STEM < "hamburg" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'Hamburg ].

:end :instance.


; <<>>
; >> hand.in.v.1.vm.tdl
; hand.in.v.1.vm.tdl

:begin :instance.

hand_in_v1 := mv_particle_np_le &
  [ STEM < "hand" >,
    SYNSEM.LOCAL.CONT [ KEY _hand_in_rel,
			COMPKEY _in_rel ] ].

:end :instance.


; <<>>
; >> hand.n.1.vm.tdl
; hand.n.1.vm.tdl

:begin :instance.

hand_n1 := intr_noun_word_le &
  [ STEM < "hand" >,
    SYNSEM.LOCAL.CONT.KEY _hand_rel ].

:end :instance.


; <<>>
; >> hand.v.1.vm.tdl
; hand.v.1.vm.tdl

:begin :instance.

hand_v1 := mv_ditrans_le &
  [ STEM < "hand" >,
    SYNSEM.LOCAL.CONT.KEY _hand_v_rel ].

:end :instance.


; <<>>
; >> handle.n.1.vm.tdl
; handle.n.1.vm.tdl

:begin :instance.

handle_n1 := intr_noun_word_le &
  [ STEM < "handle" >,
    SYNSEM.LOCAL.CONT.KEY _handle_rel ].

:end :instance.


; <<>>
; >> handle.v.1.vm.tdl
; handle.v.1.vm.tdl

:begin :instance.

handle_v1 := mv_np_trans_le &
  [ STEM < "handle" >,
    SYNSEM.LOCAL.CONT.KEY _handle_v_rel ].

:end :instance.


; <<>>
; >> handsome.a.1.vm.tdl
; handsome.a.1.vm.tdl

:begin :instance.

handsome_a1 := intrans_adj_le &
  [ STEM < "handsome" >,
    SYNSEM.LOCAL.CONT.KEY _handsome_rel ].

:end :instance.


; <<>>
; >> hang.on.c.1.vm.tdl
; hang.on.c.1.vm.tdl

:begin :instance.

hang_on_root := disc_adv_mle1 &
  [ STEM < "hang", "on" >,
    SYNSEM.LOCAL.CONT.KEY.EXCL 'hang_on ].

:end :instance.


; <<>>
; >> hannover.n.1.vm.tdl
; hannover.n.1.vm.tdl

:begin :instance.

Hannover_n1 := proper_le &
  [ STEM < "hannover" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'Hannover ].

:end :instance.


; <<>>
; >> hanover.n.1.vm.tdl
; hanover.n.1.vm.tdl

:begin :instance.

Hanover_n1 := proper_le &
  [ STEM < "hanover" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'Hanover ].

:end :instance.


; <<>>
; >> happen.v.1.vm.tdl
; happen.v.1.vm.tdl

:begin :instance.

happen_v1 := mv_unerg_le &
  [ STEM < "happen" >,
    SYNSEM.LOCAL.CONT.KEY _happen_rel ].

:end :instance.


; <<>>
; >> happen.v.2.vm.tdl
; happen.v.2.vm.tdl

:begin :instance.

happen_v2 := mv_ssr_le &
  [ STEM < "happen" >,
    SYNSEM.LOCAL.CONT.KEY _happen2_rel ].

:end :instance.


; <<>>
; >> happen.v.1.tdl
; happen.v.1.tdl

:begin :instance.

happen_to_v1 := mv_empty_prep_intrans_le &
  [ STEM < "happen" >,
    SYNSEM.LOCAL.CONT [ KEY _happen_to_rel,
			COMPKEY _to_rel ] ].

:end :instance.


; <<>>
; >> hard.a.1.vm.tdl
; hard.a.1.vm.tdl

:begin :instance.

hard_a1 := intrans_adj_le &
  [ STEM < "hard" >,
    SYNSEM.LOCAL.CONT.KEY _hard_adj_rel ].

:end :instance.


; <<>>
; >> hardly.a.1.vm.tdl
; hardly.a.1.vm.tdl

:begin :instance.

hardly_adv1 := adv_pre_word_le &
  [ STEM < "hardly" >,
    SYNSEM.LOCAL.CONT.KEY _hardly_rel ].

:end :instance.


; <<>>
; >> has.vx.1.tdl
; has.vx.1.tdl

:begin :instance.

has_aux := has_aux_le &
  [ STEM < "has" > ].

:end :instance.


; <<>>
; >> has.cx.vx.1.tdl
; has.cx.vx.1.tdl

:begin :instance.

has_aux_cx := has_aux_le &
  [ STEM < "s" > ].

:end :instance.


; <<>>
; >> hasnt.vx.1.tdl
; hasnt.vx.1.tdl

:begin :instance.

hasnt_aux := has_aux_neg_mle1 &
  [ STEM < "hasn", "t" > ].

:end :instance.


; <<>>
; >> hat.n.1.vm.tdl
; hat.n.1.vm.tdl

:begin :instance.

hat_n1 := intr_noun_word_le &
  [ STEM < "hat" >,
    SYNSEM.LOCAL.CONT.KEY _hat_rel ].

:end :instance.


; <<>>
; >> have.to.do.with.v.1.vm.tdl
; have.to.do.with.v.1.vm.tdl

:begin :instance.

have_to_do_with_v1 := mv_empty_prep_intrans_le &
  [ STEM < "have" >,
    SYNSEM.LOCAL.CONT [ KEY _have_to_do_with_rel,
			COMPKEY _to_do_with_rel ] ].

:end :instance.


; <<>>
; >> have.v.2.tdl
; have.v.2.tdl

:begin :instance.

have-poss := mv_poss_le &
  [ STEM < "have" >,
    SYNSEM.LOCAL.CONT.KEY _have_rel ].

:end :instance.


; <<>>
; >> have.v.3.tdl
; have.v.3.tdl

:begin :instance.

have-prd := mv_obj_equi_non_trans_prd_le &
  [ STEM < "have" >,
    SYNSEM.LOCAL.CONT.KEY _have_prd_rel  ].

:end :instance.


; <<>>
; >> have.v.4.tdl
; have.v.4.tdl

:begin :instance.

have_to1 := mv_ssr_le &
  [ STEM < "have" >,
    SYNSEM.LOCAL.CONT.KEY _have_to_rel ].

:end :instance.


; <<>>
; >> have.vx.1.tdl
; have.vx.1.tdl

:begin :instance.

have_fin_aux := have_fin_aux_le &
  [ STEM < "have" > ].

:end :instance.


; <<>>
; >> have.cx.vx.1.tdl
; have.cx.vx.1.tdl

:begin :instance.

have_fin_aux_cx := have_fin_aux_le &
  [ STEM < "ve" > ].

:end :instance.


; <<>>
; >> have.vx.2.tdl
; have.vx.2.tdl

:begin :instance.

have_bse_aux := have_bse_aux_le &
  [ STEM < "have" > ].

:end :instance.


; <<>>
; >> havent.vx.1.tdl
; havent.vx.1.tdl

:begin :instance.

have_fin_aux_neg := have_fin_aux_neg_mle1 &
  [ STEM < "haven", "t" > ].

:end :instance.


; <<>>
; >> having.vx.1.tdl
; having.vx.1.tdl

:begin :instance.

have_aux_prp := have_prespart_le &
  [ STEM < "having" > ].

:end :instance.


; <<>>
; >> he.n.1.tdl
; he.n.1.tdl

:begin :instance.

he := pers_pro_le &
  [ STEM < "he" >,
    SYNSEM.LOCAL [ CAT.HEAD.CASE nom,
		   CONT.KEY.INST [ PNG [ PN 3sg*,
					 GEN masc* ],
				   PRONTYPE std_3 ] ] ].
:end :instance.


; <<>>
; >> head.n.1.vm.tdl
; head.n.1.vm.tdl

:begin :instance.

head_n1 := intr_noun_word_le &
  [ STEM < "head" >,
    SYNSEM.LOCAL.CONT.KEY _head_rel ].

:end :instance.


; <<>>
; >> hear.about.v.1.vm.tdl
; hear.about.v.1.vm.tdl

:begin :instance.

hear_about_v1 := mv_empty_prep_intrans_le &
  [ STEM < "hear" >,
    SYNSEM.LOCAL.CONT [ KEY _hear_about_rel,
			COMPKEY _about_rel ] ].

:end :instance.


; <<>>
; >> hear.from.v.1.vm.tdl
; hear.from.v.1.vm.tdl

:begin :instance.

hear_from_v1 := mv_empty_prep_intrans_le &
  [ STEM < "hear" >,
    SYNSEM.LOCAL.CONT [ KEY _hear_from_rel,
			COMPKEY _from_rel ] ].

:end :instance.


; <<>>
; >> hear.of.v.1.vm.tdl
; hear.of.v.1.vm.tdl

:begin :instance.

hear_of_v1 := mv_empty_prep_intrans_le &
  [ STEM < "hear" >,
    SYNSEM.LOCAL.CONT [ KEY _hear_of_rel,
			COMPKEY _of_rel ] ].

:end :instance.


; <<>>
; >> hear.v.1.tdl
; hear.v.1.tdl

:begin :instance.

hear_v1 := mv_np_trans_le &
  [ STEM < "hear" >,
    SYNSEM.LOCAL.CONT.KEY _hear_rel ].

:end :instance.


; <<>>
; >> hear.v.2.tdl
; hear.v.2.tdl

:begin :instance.

hear_v2 := mv_cp_non_trans_le &
  [ STEM < "hear" >,
    SYNSEM.LOCAL.CONT.KEY _hear_rel ].

:end :instance.


; <<>>
; >> hear.v.3.tdl
; hear.v.3.tdl

:begin :instance.

hear_v3 := mv_sorb_le &
  [ STEM < "hear" >,
    SYNSEM.LOCAL.CONT.KEY _hear2_rel ].

:end :instance.


; <<>>
; >> hearty.a.1.vm.tdl
; hearty.a.1.vm.tdl

:begin :instance.

hearty_a1 := intrans_adj_le &
  [ STEM < "hearty" >,
    SYNSEM.LOCAL.CONT.KEY _hearty_rel ].

:end :instance.


; <<>>
; >> heavier.a.1.vm.tdl
; heavier.a.1.vm.tdl

:begin :instance.

heavier_a1 := intrans_adj_le &
  [ STEM < "heavier" >,
    SYNSEM.LOCAL.CONT.KEY _heavier_rel ].

:end :instance.


; <<>>
; >> heavy.a.1.vm.tdl
; heavy.a.1.vm.tdl

:begin :instance.

heavy_a1 := intrans_adj_le &
  [ STEM < "heavy" >,
    SYNSEM.LOCAL.CONT.KEY _heavy_rel ].

:end :instance.


; <<>>
; >> hectic.a.1.vm.tdl
; hectic.a.1.vm.tdl

:begin :instance.

hectic_a1 := intrans_adj_le &
  [ STEM < "hectic" >,
    SYNSEM.LOCAL.CONT.KEY _hectic_rel ].

:end :instance.


; <<>>
; >> heidelberg.n.1.vm.tdl
; heidelberg.n.1.vm.tdl

:begin :instance.

Heidelberg_n1 := proper_le &
  [ STEM < "heidelberg" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'Heidelberg ].

:end :instance.


; <<>>
; >> helman.n.1.tdl
; helman.n.1.tdl

:begin :instance.

helman := proper_le &
  [ STEM < "helman" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'helman ].

:end :instance.


; <<>>
; >> helwig.n.1.tdl
; helwig.n.1.tdl

:begin :instance.

helwig := proper_le &
  [ STEM < "helwig" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'helwig ].

:end :instance.


; <<>>
; >> help.v.1.tdl
; help.v.1.tdl

:begin :instance.

help_v1 := mv_np*_trans_le &
  [ STEM < "help" >,
    SYNSEM.LOCAL.CONT.KEY _help_rel ].

:end :instance.


; <<>>
; >> help.v.2.tdl
; help.v.2.tdl

:begin :instance.

help_v2 := mv_subj_equi_le &
  [ STEM < "help" >,
    SYNSEM.LOCAL.CONT.KEY _help_to_rel ].

:end :instance.


; <<>>
; >> help.v.3.tdl
; help.v.3.tdl

:begin :instance.

help_v3 := mv_sor_le &
  [ STEM < "help" >,
    SYNSEM.LOCAL.CONT.KEY _help_to_rel ].

:end :instance.


; <<>>
; >> help.v.4.tdl
; help.v.4.tdl

:begin :instance.

help_v4 := mv_sorb_le &
  [ STEM < "help" >,
    SYNSEM.LOCAL.CONT.KEY _help_to_rel ].

:end :instance.


; <<>>
; >> hence.a.1.vm.tdl
; hence.a.1.vm.tdl

:begin :instance.

hence_adv1 := adv_pre_word_le &
  [ STEM < "hence" >,
    SYNSEM.LOCAL.CONT.KEY _hence_rel ].

:end :instance.


; <<>>
; >> her.n.1.tdl
; her.n.1.tdl

:begin :instance.

her_poss := poss_le &
  [ STEM < "her" >,
    SYNSEM.LOCAL.CONT.ALTKEY.INST [ PNG [ PN 3sg*,
					  GEN fem* ],
				    PRONTYPE std_3 ] ].
:end :instance.


; <<>>
; >> her.n.2.tdl
; her.n.2.tdl

:begin :instance.

her := pers_pro_le &
  [ STEM < "her" >,
    SYNSEM.LOCAL [ CAT.HEAD.CASE acc,
		   CONT.KEY.INST [ PNG [ PN 3sg*,
					 GEN fem* ],
				   PRONTYPE std_3 ] ] ].
:end :instance.


; <<>>
; >> here.a.1.tdl
; here.a.1.tdl

:begin :instance.

here_adv := np_adv_word_le &
  [ STEM < "here" >,
    SYNSEM.LOCAL.CONT.KEY _here_rel ].

:end :instance.


; <<>>
; >> herewith.a.1.vm.tdl
; herewith.a.1.vm.tdl

:begin :instance.

herewith_adv1 := vp_adv_post_word_le &
  [ STEM < "herewith" >,
    SYNSEM.LOCAL.CONT.KEY _herewith_rel ].

:end :instance.


; <<>>
; >> hers.n.1.tdl
; hers.n.1.tdl

:begin :instance.

hers := poss_pro_le &
  [ STEM < "hers" >,
    SYNSEM.LOCAL.CONT.LISZT.LIST.FIRST.INST.PNG [ PN 3sg*,
						  GEN fem* ] ].

:end :instance.


; <<>>
; >> herself.n.1.tdl
; herself.n.1.tdl

:begin :instance.

herself := refl_pro_le &
  [ STEM < "herself" >,
    SYNSEM.LOCAL.CONT.KEY.INST.PNG [ PN 3sg*,
				     GEN fem* ] ].

:end :instance.


; <<>>
; >> hey.c.1.vm.tdl
; hey.c.1.vm.tdl

:begin :instance.

hey_root := disc_adv_le &
  [ STEM < "hey" >,
    SYNSEM.LOCAL.CONT.KEY.EXCL 'hey ].

:end :instance.

; <<>>
; >> high.a.1.vm.tdl
; high.a.1.vm.tdl

:begin :instance.

high_a1 := intrans_adj_le &
  [ STEM < "high" >,
    SYNSEM.LOCAL.CONT.KEY _high_rel ].

:end :instance.


; <<>>
; >> highly.a.1.vm.tdl
; highly.a.1.vm.tdl

:begin :instance.

highly_adv1 := adv_word_le &
  [ STEM < "highly" >,
    SYNSEM.LOCAL.CONT.KEY _highly_rel ].

:end :instance.


; <<>>
; >> hill.n.1.vm.tdl
; hill.n.1.vm.tdl

:begin :instance.

hill_n1 := intr_noun_word_le &
  [ STEM < "hill" >,
    SYNSEM.LOCAL.CONT.KEY _hill_rel ].

:end :instance.


; <<>>
; >> him.n.1.tdl
; him.n.1.tdl

:begin :instance.

him := pers_pro_le &
  [ STEM < "him" >,
    SYNSEM.LOCAL [ CAT.HEAD.CASE acc,
		   CONT.KEY.INST [ PNG [ PN 3sg*,
					 GEN masc* ],
				   PRONTYPE std_3 ] ] ].
:end :instance.


; <<>>
; >> himself.n.1.tdl
; himself.n.1.tdl

:begin :instance.

himself := refl_pro_le &
  [ STEM < "himself" >,
    SYNSEM.LOCAL.CONT.KEY.INST.PNG [ PN 3sg*,
				     GEN masc* ] ].

:end :instance.


; <<>>
; >> hire.v.1.tdl
; hire.v.1.tdl

:begin :instance.

hire_v1 := mv_np_trans_le &
  [ STEM < "hire" >,
    SYNSEM.LOCAL.CONT.KEY _hire_rel ].

:end :instance.


; <<>>
; >> his.n.1.tdl
; his.n.1.tdl

:begin :instance.

his_poss := poss_le &
  [ STEM < "his" >,
    SYNSEM.LOCAL.CONT.ALTKEY.INST [ PNG [ PN 3sg*,
					  GEN masc* ],
				    PRONTYPE std_3 ] ].

:end :instance.


; <<>>
; >> his.n.2.tdl
; his.n.2.tdl

:begin :instance.

his := poss_pro_le &
  [ STEM < "his" >,
    SYNSEM.LOCAL.CONT.LISZT.LIST.FIRST.INST.PNG [ PN 3sg*,
						  GEN masc* ] ].

:end :instance.


; <<>>
; >> hit.v.1.vm.tdl
; hit.v.1.vm.tdl

:begin :instance.

hit_v1 := mv_np_trans_le &
  [ STEM < "hit" >,
    SYNSEM.LOCAL.CONT.KEY _hit_rel ].

:end :instance.


; <<>>
; >> hither.a.1.vm.tdl
; hither.a.1.vm.tdl

:begin :instance.

hither_adv1 := np_adv_word_le &
  [ STEM < "hither" >,
    SYNSEM.LOCAL.CONT.KEY _hither_rel ].

:end :instance.


; <<>>
; >> hitherto.a.1.tdl
; hitherto.a.1.tdl

:begin :instance.

hitherto_deg := degree_spec_le &
  [ STEM < "hitherto" >,
    SYNSEM.LOCAL.CONT.KEY _hitherto_deg_rel ].

:end :instance.


; <<>>
; >> hm.c.1.vm.tdl
; hm.c.1.vm.tdl

:begin :instance.

hm_root := disc_adv_le &
  [ STEM < "hm" >,
    SYNSEM.LOCAL.CONT.KEY.EXCL 'hm ].

:end :instance.

; <<>>
; >> hmm.c.1.vm.tdl
; hmm.c.1.vm.tdl

:begin :instance.

hmm_root := disc_adv_le &
  [ STEM < "hmm" >,
    SYNSEM.LOCAL.CONT.KEY.EXCL 'hmm ].

:end :instance.

; <<>>
; >> hof.n.1.vm.tdl
; hof.n.1.vm.tdl

:begin :instance.

Hof_n1 := proper_le &
  [ STEM < "hof" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'Hof ].

:end :instance.


; <<>>
; >> hold.n.1.vm.tdl
; hold.n.1.vm.tdl

:begin :instance.

hold_n1 := massn_le &
  [ STEM < "hold" >,
    SYNSEM.LOCAL.CONT.KEY _hold_n_rel ].

:end :instance.


; <<>>
; >> hold.v.1.vm.tdl
; hold.v.1.vm.tdl

:begin :instance.

hold_v1 := mv_np_trans_le &
  [ STEM < "hold" >,
    SYNSEM.LOCAL.CONT.KEY _hold_rel ].

:end :instance.


; <<>>
; >> holger.n.1.vm.tdl
; holger.n.1.vm.tdl

:begin :instance.

Holger_n1 := proper_le &
  [ STEM < "holger" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'Holger ].

:end :instance.


; <<>>
; >> holiday.n.1.vm.tdl
; holiday.n.1.vm.tdl

:begin :instance.

holiday_n1 := intr_temp_noun_le &
  [ STEM < "holiday" >,
    SYNSEM.LOCAL.CONT.KEY _holiday_rel ].

:end :instance.


; <<>>
; >> holiday.n.2.vm.tdl
; holiday.n.2.vm.tdl

:begin :instance.

holiday_n2 := intr_temp_noun_nomod_le &
  [ STEM < "holiday" >,
    SYNSEM.LOCAL.CONT.KEY _holiday_rel ].

:end :instance.


; <<>>
; >> holy.a.1.vm.tdl
; holy.a.1.vm.tdl

:begin :instance.

holy_a1 := intrans_adj_le &
  [ STEM < "holy" >,
    SYNSEM.LOCAL.CONT.KEY _holy_rel ].

:end :instance.


; <<>>
; >> holy.saturday.n.1.tdl
; holy.saturday.n.1.tdl

:begin :instance.

holy_saturday := holiday_word_mle1 &
  [ STEM < "holy", "saturday" >,
    SYNSEM.LOCAL.CONT.KEY.DAY 'holy_saturday ].

:end :instance.


; <<>>
; >> holy.week.n.1.tdl
; holy.week.n.1.tdl

:begin :instance.

holy_week := holiday_word_mle1 &
  [ STEM < "holy", "week" >,
    SYNSEM.LOCAL.CONT.KEY.DAY 'holy_week ].

:end :instance.


; <<>>
; >> home.a.1.tdl
; home.a.1.tdl

:begin :instance.

home_adv := np_adv_word_le &
  [ STEM < "home" >,
    SYNSEM.LOCAL.CONT.KEY _home_loc_rel ].

:end :instance.


; <<>>
; >> home.n.1.vm.tdl
; home.n.1.vm.tdl

:begin :instance.

home_n1 := intr_noun_word_le &
  [ STEM < "home" >,
    SYNSEM.LOCAL.CONT.KEY _home_rel ].

:end :instance.


; <<>>
; >> home.n.2.vm.tdl
; home.n.2.vm.tdl

:begin :instance.

home_n2 := massn_le &
  [ STEM < "home" >,
    SYNSEM.LOCAL.CONT.KEY _home_rel ].

:end :instance.


; <<>>
; >> homework.n.1.vm.tdl
; homework.n.1.vm.tdl

:begin :instance.

homework_n1 := massn_le &
  [ STEM < "homework" >,
    SYNSEM.LOCAL.CONT.KEY _homework_rel ].

:end :instance.


; <<>>
; >> honest.a.1.vm.tdl
; honest.a.1.vm.tdl

:begin :instance.

honest_a1 := intrans_adj_le &
  [ STEM < "honest" >,
    SYNSEM.LOCAL.CONT.KEY _honest_rel ].

:end :instance.


; <<>>
; >> honestly.a.1.vm.tdl
; honestly.a.1.vm.tdl

:begin :instance.

honestly_adv1 := adv_pre_word_le &
  [ STEM < "honestly" >,
    SYNSEM.LOCAL.CONT.KEY _honestly_rel ].

:end :instance.


; <<>>
; >> honolulu.n.1.vm.tdl
; honolulu.n.1.vm.tdl

:begin :instance.

Honolulu_n1 := proper_le &
  [ STEM < "honolulu" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'Honolulu ].

:end :instance.


; <<>>
; >> hope.for.v.1.vm.tdl
; hope.for.v.1.vm.tdl

:begin :instance.

hope_for_v1 := mv_empty_prep_intrans_le &
  [ STEM < "hope" >,
    SYNSEM.LOCAL.CONT [ KEY _hope_for_rel,
			COMPKEY _for_rel ] ].

:end :instance.


; <<>>
; >> hope.n.1.tdl
; hope.n.1.tdl

:begin :instance.

hope_n1 := massn_le &
  [ STEM < "hope" >,
    SYNSEM.LOCAL.CONT.KEY _hope_rel ].

:end :instance.


; <<>>
; >> hope.v.1.tdl
; hope.v.1.tdl

:begin :instance.

hope_v1 := mv_cp_prop_non_trans_le &
  [ STEM < "hope" >,
    SYNSEM.LOCAL.CONT.KEY _hope_v_rel ].

:end :instance.


; <<>>
; >> hopefully.a.1.vm.tdl
; hopefully.a.1.vm.tdl

:begin :instance.

hopefully_adv1 := adv_word_le &
  [ STEM < "hopefully" >,
    SYNSEM.LOCAL.CONT.KEY _hopefully_rel ].

:end :instance.


; <<>>
; >> horoscope.n.1.vm.tdl
; horoscope.n.1.vm.tdl

:begin :instance.

horoscope_n1 := intr_noun_word_le &
  [ STEM < "horoscope" >,
    SYNSEM.LOCAL.CONT.KEY _horoscope_rel ].

:end :instance.


; <<>>
; >> hot.a.1.vm.tdl
; hot.a.1.vm.tdl

:begin :instance.

hot_a1 := intrans_adj_le &
  [ STEM < "hot" >,
    SYNSEM.LOCAL.CONT.KEY _hot_rel ].

:end :instance.


; <<>>
; >> hotel.n.1.vm.tdl
; hotel.n.1.vm.tdl

:begin :instance.

hotel_n1 := intr_noun_word_le &
  [ STEM < "hotel" >,
    SYNSEM.LOCAL.CONT.KEY _hotel_rel ].

:end :instance.


; <<>>
; >> hour.n.1.vm.tdl
; hour.n.1.vm.tdl

:begin :instance.

hour_n1 := intr_noun_word_le &
  [ STEM < "hour" >,
    SYNSEM.LOCAL.CONT.KEY _hour_rel ].

:end :instance.


; <<>>
; >> hour.a.1.vm.tdl
; hour.a.1.vm.tdl

:begin :instance.

hour_a1 := meas_adj_word_le &
  [ STEM < "hour" >,
    SYNSEM.LOCAL.CONT.KEY _hour_adj_rel ].

:end :instance.


; <<>>
; >> hourly.a.1.vm.tdl
; hourly.a.1.vm.tdl

:begin :instance.

hourly_adv1 := vp_adv_post_word_le &
  [ STEM < "hourly" >,
    SYNSEM.LOCAL.CONT.KEY _hourly_rel ].

:end :instance.


; <<>>
; >> hours-long.a.1.vm.tdl
; hours-long.a.1.vm.tdl

:begin :instance.

hours_long_a1 := intrans_adj_le &
  [ STEM < "hours-long" >,
    SYNSEM.LOCAL.CONT.KEY _hours_long_rel ].

:end :instance.


; <<>>
; >> house.n.1.vm.tdl
; house.n.1.vm.tdl

:begin :instance.

house_n1 := intr_noun_word_le &
  [ STEM < "house" >,
    SYNSEM.LOCAL.CONT.KEY _house_rel ].

:end :instance.


; <<>>
; >> how.many.c.1.tdl
; how.many.c.1.tdl

:begin :instance.

how_many := pdet_pl_wh_mle1 &
  [ STEM < "how", "many" >,
    SYNSEM [ LOCAL.CONT.KEY _how_many_rel & [ HANDEL #hand ],
	     NON-LOCAL.QUE <! #hand !> ] ].

:end :instance.


; <<>>
; >> how.a.1.tdl
; how.a.1.tdl

:begin :instance.

how_adv := wh_adverb_word_le &
  [ STEM < "how" >,
    SYNSEM.LOCAL.CONT.MODCONT.LISZT <! _in_rel, *top*, 
				     manner_rel !> ].

:end :instance.


; <<>>
; >> how.a.2.tdl
; how.a.2.tdl

:begin :instance.

how_deg := wh_degree_spec_le &
  [ STEM < "how" > ].

:end :instance.


; <<>>
; >> how.a.3.tdl
; how.a.3.tdl

:begin :instance.

how_adj := wh_adjective_word_le &
  [ STEM < "how" > ].

:end :instance.


; <<>>
; >> how.about.c.1.vm.tdl
; how.about.c.1.vm.tdl

:begin :instance.

how_about := how_about_mle1 &
  [ STEM < "how", "about" >,
    SYNSEM.LOCAL.CONT.MESSAGE _which_rel ].

:end :instance.


; <<>>
; >> how.bout.c.1.vm.tdl
; how.bout.c.1.vm.tdl

:begin :instance.

how_bout := how_about_mle1 &
  [ STEM < "how", "'bout" >,
    SYNSEM.LOCAL.CONT.MESSAGE _which_rel ].

:end :instance.


; <<>>
; >> how.much.c.1.tdl
; how.much.c.1.tdl

:begin :instance.

how_much := pdet_ms_wh_mle1 &
  [ STEM < "how", "much" >,
    SYNSEM [ LOCAL.CONT.KEY _how_much_rel & [ HANDEL #hand ],
	     NON-LOCAL.QUE <! #hand !> ] ].

:end :instance.


; <<>>
; >> how.many.c.2.tdl
; how.many.c.2.tdl
; MULTIKEY < "many" >

:begin :instance.

how_many_part := part_noun_mle2 &
  [ STEM < "how", "many" >,
    SYNSEM.LOCAL.CONT.ALTKEY _how_many_rel ].

:end :instance.


; <<>>
; >> how.much.c.2.tdl
; how.much.c.2.tdl
; MULTIKEY < "much" >

:begin :instance.

how_much_part := part_noun_mle2 &
  [ STEM < "how", "much" >,
    SYNSEM.LOCAL.CONT.ALTKEY _how_much_rel ].

:end :instance.


; <<>>
; >> however.c.1.tdl
; however.c.1.tdl

:begin :instance.

however := subconj_le &
  [ STEM < "however" >,
    SYNSEM.LOCAL.CONT.KEY _however_rel ].

:end :instance.


; <<>>
; >> hundred.c.1.vm.tdl
; hundred.c.1.vm.tdl

:begin :instance.

hundred := bare_specified_card_le & 
    [ STEM < "hundred" >,
      SYNSEM.LOCAL [ CAT [HEAD intadj3,
			  VALENCE.SPR.LOCAL.CAT.HEAD intadj1],
		     CONT.--STEMLISZT.LIST < [ CONST_VALUE 100 ], [] > ] ].

:end :instance.


; <<>>
; >> hungry.a.1.vm.tdl
; hungry.a.1.vm.tdl

:begin :instance.

hungry_a1 := intrans_adj_le &
  [ STEM < "hungry" >,
    SYNSEM.LOCAL.CONT.KEY _hungry_rel ].

:end :instance.


; <<>>
; >> hunt.up.v.1.vm.tdl
; hunt.up.v.1.vm.tdl

:begin :instance.

hunt_up_v1 := mv_particle_np_le &
  [ STEM < "hunt" >,
    SYNSEM.LOCAL.CONT [ KEY _hunt_up_rel,
			COMPKEY _up_rel ] ].

:end :instance.


; <<>>
; >> husband.n.1.vm.tdl
; husband.n.1.vm.tdl

:begin :instance.

husband_n1 := intr_noun_word_le &
  [ STEM < "husband" >,
    SYNSEM.LOCAL.CONT.KEY _husband_rel ].

:end :instance.


; <<>>
; >> hutsell.n.1.tdl
; hutsell.n.1.tdl

:begin :instance.

hutsell := proper_le &
  [ STEM < "hutsell" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'hutsell ].

:end :instance.


; <<>>
; >> hyphen.n.1.vm.tdl
; hyphen.n.1.vm.tdl

:begin :instance.

hyphen_n1 := intr_noun_word_le &
  [ STEM < "hyphen" >,
    SYNSEM.LOCAL.CONT.KEY _hyphen_rel ].

:end :instance.


; <<>>
; >> hyphenated.a.1.vm.tdl
; hyphenated.a.1.vm.tdl

:begin :instance.

hyphenated_a1 := intrans_adj_le &
  [ STEM < "hyphenated" >,
    SYNSEM.LOCAL.CONT.KEY _hyphenated_rel ].

:end :instance.


; <<>>
; >> i.n.1.tdl
; i.n.1.tdl

:begin :instance.

i := pers_pro_le &
  [ STEM < "i" >,
    SYNSEM.LOCAL [ CAT.HEAD.CASE nom,
		   CONT.KEY.INST [ PNG.PN 1sg*,
				   PRONTYPE std_1sg ] ] ].

:end :instance.


; <<>>
; >> icphs.n.1.vm.tdl
; icphs.n.1.vm.tdl

:begin :instance.

icphs_n1 :=  proper_le &
  [ STEM < "icphs" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'icphs ].

:end :instance.


; <<>>
; >> idea.n.1.vm.tdl
; idea.n.1.vm.tdl

:begin :instance.

idea_n1 := intr_noun_word_le &
  [ STEM < "idea" >,
    SYNSEM.LOCAL.CONT.KEY _idea_rel ].

:end :instance.


; <<>>
; >> ideal.a.1.vm.tdl
; ideal.a.1.vm.tdl

:begin :instance.

ideal_a1 := intrans_adj_le &
  [ STEM < "ideal" >,
    SYNSEM.LOCAL.CONT.KEY _ideal_adj_rel ].

:end :instance.


; <<>>
; >> ideal.n.1.vm.tdl
; ideal.n.1.vm.tdl

:begin :instance.

ideal_n1 := intr_noun_word_le &
  [ STEM < "ideal" >,
    SYNSEM.LOCAL.CONT.KEY _ideal_rel ].

:end :instance.


; <<>>
; >> if.c.1.tdl
; if.c.1.tdl

:begin :instance.

if := subconj_if_le &
  [ STEM < "if" >,
    SYNSEM.LOCAL.CONT.KEY _if_then_rel ].

:end :instance.


; <<>>
; >> if.c.2.tdl
; if.c.2.tdl

:begin :instance.

if_c := whether_c_fin_le &
  [ STEM < "if" > ].

:end :instance.


; <<>>
; >> if.necessary.a.1.vm.tdl
; if.necessary.a.1.vm.tdl
; MULTIKEY < "necessary" >

:begin :instance.

if_necessary_adv1 := vp_adv_post_word_mle2 &
  [ STEM < "if", "necessary" >,
    SYNSEM.LOCAL.CONT.KEY _if_necessary_rel ].

:end :instance.


; <<>>
; >> ignore.v.1.vm.tdl
; ignore.v.1.vm.tdl

:begin :instance.

ignore_v1 := mv_np_trans_le &
  [ STEM < "ignore" >,
    SYNSEM.LOCAL.CONT.KEY _ignore_rel ].

:end :instance.


; <<>>
; >> ill.a.1.vm.tdl
; ill.a.1.vm.tdl

:begin :instance.

ill_a1 := intrans_adj_le &
  [ STEM < "ill" >,
    SYNSEM.LOCAL.CONT.KEY _ill_rel ].

:end :instance.


; <<>>
; >> imagine.v.1.vm.tdl
; imagine.v.1.vm.tdl

:begin :instance.

imagine_v1 := mv_np_trans_le &
  [ STEM < "imagine" >,
    SYNSEM.LOCAL.CONT.KEY _imagine_rel ].

:end :instance.


; <<>>
; >> imagine.v.2.vm.tdl
; imagine.v.2.vm.tdl

:begin :instance.

imagine_v2 := mv_cp_non_trans_le &
  [ STEM < "imagine" >,
    SYNSEM.LOCAL.CONT.KEY _imagine_rel ].

:end :instance.


; <<>>
; >> imagine.v.3.vm.tdl
; imagine.v.3.vm.tdl

:begin :instance.

imagine_v3 := mv_unerg_le &
  [ STEM < "imagine" >,
    SYNSEM.LOCAL.CONT.KEY _imagine_rel ].

:end :instance.


; <<>>
; >> immediate.a.1.vm.tdl
; immediate.a.1.vm.tdl

:begin :instance.

immediate_a1 := intrans_adj_le &
  [ STEM < "immediate" >,
    SYNSEM.LOCAL.CONT.KEY _immediate_rel ].

:end :instance.


; <<>>
; >> immediately.a.1.vm.tdl
; immediately.a.1.vm.tdl

:begin :instance.

immediately_adv1 := adv_word_le &
  [ STEM < "immediately" >,
    SYNSEM.LOCAL.CONT.KEY _immediately_rel ].

:end :instance.


; <<>>
; >> imminent.a.1.vm.tdl
; imminent.a.1.vm.tdl

:begin :instance.

imminent_a1 := intrans_adj_le &
  [ STEM < "imminent" >,
    SYNSEM.LOCAL.CONT.KEY _imminent_rel ].

:end :instance.


; <<>>
; >> impending.a.1.vm.tdl
; impending.a.1.vm.tdl

:begin :instance.

impending_a1 := intrans_adj_le &
  [ STEM < "impending" >,
    SYNSEM.LOCAL.CONT.KEY _impending_rel ].

:end :instance.


; <<>>
; >> important.a.1.tdl
; important.a.1.tdl

:begin :instance.

important_a1 := intrans_adj_le &
  [ STEM < "important" >,
    SYNSEM.LOCAL.CONT.KEY _important_adj_rel ].

:end :instance.


; <<>>
; >> importantly.a.1.vm.tdl
; importantly.a.1.vm.tdl

:begin :instance.

importantly := adv_word_le &
  [ STEM < "importantly" >,
    SYNSEM.LOCAL.CONT.KEY _importantly_rel ].

:end :instance.


; <<>>
; >> impossible.a.1.vm.tdl
; impossible.a.1.vm.tdl

:begin :instance.

impossible_a1 := intrans_adj_le &
  [ STEM < "impossible" >,
    SYNSEM.LOCAL.CONT.KEY _impossible_rel ].

:end :instance.


; <<>>
; >> impossible.a.2.vm.tdl
; impossible.a.2.vm.tdl

:begin :instance.

impossible_a2 := reg_adj_atrans_le &
  [ STEM < "impossible" >,
    SYNSEM.LOCAL.CONT.KEY _impossible2_rel ].

:end :instance.


; <<>>
; >> impossibly.a.1.vm.tdl
; impossibly.a.1.vm.tdl

:begin :instance.

impossibly_adv1 := vp_adv_post_word_le &
  [ STEM < "impossibly" >,
    SYNSEM.LOCAL.CONT.KEY _impossibly_rel ].

:end :instance.


; <<>>
; >> impression.n.1.vm.tdl
; impression.n.1.vm.tdl

:begin :instance.

impression_n1 := noun_ppof_word_le &
  [ STEM < "impression" >,
    SYNSEM.LOCAL.CONT.KEY _impression_rel ].

:end :instance.


; <<>>
; >> improbably.a.1.vm.tdl
; improbably.a.1.vm.tdl

:begin :instance.

improbably_adv1 := vp_adv_post_word_le &
  [ STEM < "improbably" >,
    SYNSEM.LOCAL.CONT.KEY _improbably_rel ].

:end :instance.


; <<>>
; >> in.accordance.with.p.1.vm.tdl
; in.accordance.with.p.1.vm.tdl
; MULTIKEY < "accordance" >

:begin :instance.

in_accordance_with := prep_3mle2 &
  [ STEM < "in", "accordance", "with" >,
    SYNSEM.LOCAL.CONT.KEY _in_accordance_with_rel ].

:end :instance.


; <<>>
; >> in.addition.a.1.vm.tdl
; in.addition.a.1.vm.tdl
; MULTIKEY < "addition" >

:begin :instance.

in_addition_adv1 := vp_adv_post_word_mle2 &
  [ STEM < "in", "addition" >,
    SYNSEM.LOCAL.CONT.KEY _in_addition_rel ].

:end :instance.


; <<>>
; >> in.all.a.1.vm.tdl
; in.all.a.1.vm.tdl
; MULTIKEY < "all" >

:begin :instance.

in_all_adv1 := vp_adv_post_word_mle2 &
  [ STEM < "in", "all" >,
    SYNSEM.LOCAL.CONT.KEY _in_all_rel ].

:end :instance.


; <<>>
; >> in.addition.to.p.1.vm.tdl
; in.addition.to.p.1.vm.tdl
; MULTIKEY < "addition" >

:begin :instance.

in_addition_to := prep_3mle2 &
  [ STEM < "in", "addition", "to" >,
    SYNSEM.LOCAL.CONT.KEY _in_addition_to_rel ].

:end :instance.


; <<>>
; >> in.back.of.p.1.vm.tdl
; in.back.of.p.1.vm.tdl
; MULTIKEY < "back" >

:begin :instance.

in_back_of := prep_3mle2 &
  [ STEM < "in", "back", "of" >,
    SYNSEM.LOCAL.CONT.KEY _in_back_of_rel ].

:end :instance.


; <<>>
; >> in.between.p.1.vm.tdl
; in.between.p.1.vm.tdl
; MULTIKEY < "between" >

:begin :instance.

in_between := prep_mle2 &
  [ STEM < "in", "between" >,
    SYNSEM.LOCAL.CONT.KEY _in_between_rel ].

:end :instance.


; <<>>
; >> in.case.c.1.tdl
; in.case.c.1.tdl
; MULTIKEY < "case" >

:begin :instance.

in_case := subconj_mle2 &
  [ STEM < "in", "case" >,
    SYNSEM.LOCAL.CONT.KEY _in_case_rel ].

:end :instance.


; <<>>
; >> in.fact.c.1.vm.tdl
; in.fact.c.1.vm.tdl
; MULTIKEY < "fact" >

:begin :instance.

in_fact_root := disc_adv_mle2 &
  [ STEM < "in", "fact" >,
    SYNSEM.LOCAL.CONT.KEY.EXCL 'in_fact ].

:end :instance.


; <<>>
; >> in.front.of.p.1.vm.tdl
; in.front.of.p.1.vm.tdl
; MULTIKEY < "front" >

:begin :instance.

in_front_of := prep_3mle2 &
  [ STEM < "in", "front", "of" >,
    SYNSEM.LOCAL.CONT.KEY _in_front_of_rel ].

:end :instance.


; <<>>
; >> in.lieu.of.p.1.vm.tdl
; in.lieu.of.p.1.vm.tdl
; MULTIKEY < "lieu" >

:begin :instance.

in_lieu_of := prep_3mle2 &
  [ STEM < "in", "lieu", "of" >,
    SYNSEM.LOCAL.CONT.KEY _in_lieu_of_rel ].

:end :instance.


; <<>>
; >> in.mind.a.1.vm.tdl
; in.mind.a.1.vm.tdl
; MULTIKEY < "mind" >

:begin :instance.

in_mind_a1 := irreg_pred_intrans_adj_mle2 &
  [ STEM < "in", "mind" >,
    SYNSEM.LOCAL.CONT.KEY _in_mind_rel ].

:end :instance.


; <<>>
; >> in.p.1.tdl
; in.p.1.tdl

:begin :instance.

in := reg_prep_le &
  [ STEM < "in" >,
    SYNSEM.LOCAL.CONT.KEY _in_rel ].

:end :instance.


; <<>>
; >> in.order.to.p.1.tdl
; in.order.to.p.1.tdl
; MULTIKEY < "order" >

:begin :instance.

in_order_to := subconj_inf_3mle2 &
  [ STEM < "in", "order", "to" >,
    SYNSEM.LOCAL.CONT.KEY _in_order_to_rel ].

:end :instance.


; <<>>
; >> in.p.2.tdl
; in.p.2.tdl

:begin :instance.

in_temp := prep_le &
  [ STEM < "in" >,
    SYNSEM.LOCAL.CONT [ KEY _in_temp_rel,
			COMPKEY non_day_rel ] ].

:end :instance.


; <<>>
; >> in.time.a.1.vm.tdl
; in.time.a.1.vm.tdl
; MULTIKEY < "time" >

:begin :instance.

in_time_adv1 := vp_adv_post_word_mle2 &
  [ STEM < "in", "time" >,
    SYNSEM.LOCAL.CONT.KEY _in_time_rel ].

:end :instance.


; <<>>
; >> in.principle.a.1.vm.tdl
; in.principle.a.1.vm.tdl
; MULTIKEY < "principle" >

:begin :instance.

in_principle_adv1 := vp_adv_post_word_mle2 &
  [ STEM < "in", "principle" >,
    SYNSEM.LOCAL.CONT.KEY _in_principle_rel ].

:end :instance.


; <<>>
; >> in.question.p.1.vm.tdl
; in.question.p.1.vm.tdl
; MULTIKEY < "question" >

:begin :instance.

in_question := pp_idiom_mle2 &
  [ STEM < "in", "question" >,
    SYNSEM.LOCAL.CONT.MODCONT [ LISZT <! _in_rel & [ PREP #inst ],
				       _question_topic_rel & 
				       [ INST #inst & index &
					      [ PNG [ PN 3sg,
						      GEN neut ] ] ] !> ] ].

:end :instance.


; <<>>
; >> in.spite.of.p.1.vm.tdl
; in.spite.of.p.1.vm.tdl
; MULTIKEY < "spite" >

:begin :instance.

in_spite_of := prep_3mle2 &
  [ STEM < "in", "spite", "of" >,
    SYNSEM.LOCAL.CONT.KEY _in_spite_of_rel ].

:end :instance.


; <<>>
; >> in.the.course.of.p.1.vm.tdl
; in.the.course.of.p.1.vm.tdl
; MULTIKEY < "course" >

:begin :instance.

in_the_course_of := prep_4mle3 &
  [ STEM < "in", "the", "course", "of" >,
    SYNSEM.LOCAL.CONT.KEY _in_the_course_of_rel ].

:end :instance.


; <<>>
; >> in.the.long.run.a.1.vm.tdl
; in.the.long.run.a.1.vm.tdl
; MULTIKEY < "long" >

:begin :instance.

in_the_long_run_adv1 := vp_adv_post_word_4mle3 &
  [ STEM < "in", "the", "long", "run" >,
    SYNSEM.LOCAL.CONT.KEY _in_the_long_run_rel ].

:end :instance.


; <<>>
; >> in.the.meantime.a.1.vm.tdl
; in.the.meantime.a.1.vm.tdl
; MULTIKEY < "meantime" >

:begin :instance.

in_the_meantime_adv1 := vp_adv_post_word_3mle3 &
  [ STEM < "in", "the", "meantime" >,
    SYNSEM.LOCAL.CONT.KEY _in_the_meantime_rel ].

:end :instance.


; <<>>
; >> in.touch.a.1.vm.tdl
; in.touch.a.1.vm.tdl
; MULTIKEY < "touch" >

:begin :instance.

in_touch_a1 := irreg_trans_adj_mle2 &
  [ STEM < "in", "touch" >,
    SYNSEM.LOCAL.CONT [ KEY _in_touch_rel,
			COMPKEY _with_rel ] ].

:end :instance.


; <<>>
; >> in.so.far.as.c.1.tdl
; in.so.far.as.c.1.tdl
; MULTIKEY < "far" >

:begin :instance.

in_so_far_as_subord := subconj_4mle3 &
  [ STEM < "in", "so", "far", "as" >,
    SYNSEM.LOCAL.CONT.KEY _in_so_far_as_rel ].

:end :instance.


; <<>>
; >> in.vain.a.1.vm.tdl
; in.vain.a.1.vm.tdl
; MULTIKEY < "vain" >

:begin :instance.

in_vain_adv1 := vp_adv_post_word_mle2 &
  [ STEM < "in", "vain" >,
    SYNSEM.LOCAL.CONT.KEY _in_vain_rel ].

:end :instance.


; <<>>
; >> include.v.1.vm.tdl
; include.v.1.vm.tdl

:begin :instance.

include_v1 := mv_prep*_trans_le &
  [ STEM < "include" >,
    SYNSEM.LOCAL.CONT.KEY _include_rel ].

:end :instance.


; <<>>
; >> including.p.1.vm.tdl
; including.p.1.vm.tdl

:begin :instance.

including_p := prep_le &
  [ STEM < "including" >,
    SYNSEM.LOCAL.CONT.KEY _including_rel ].

:end :instance.


; <<>>
; >> inclusive.a.1.vm.tdl
; inclusive.a.1.vm.tdl

:begin :instance.

inclusive_a1 := intrans_adj_le &
  [ STEM < "inclusive" >,
    SYNSEM.LOCAL.CONT.KEY _inclusive_adj_rel ].

:end :instance.


; <<>>
; >> inclusively.a.1.vm.tdl
; inclusively.a.1.vm.tdl

:begin :instance.

inclusively_adv1 := vp_adv_post_word_le &
  [ STEM < "inclusively" >,
    SYNSEM.LOCAL.CONT.KEY _inclusively_rel ].

:end :instance.


; <<>>
; >> inconvenient.a.1.vm.tdl
; inconvenient.a.1.vm.tdl

:begin :instance.

inconvenient_a1 := intrans_adj_le &
  [ STEM < "inconvenient" >,
    SYNSEM.LOCAL.CONT.KEY _inconvenient_rel ].

:end :instance.


; <<>>
; >> incredible.a.1.vm.tdl
; incredible.a.1.vm.tdl

:begin :instance.

incredible_a1 := intrans_adj_le &
  [ STEM < "incredible" >,
    SYNSEM.LOCAL.CONT.KEY _incredible_rel ].

:end :instance.


; <<>>
; >> incredibly.a.1.vm.tdl
; incredibly.a.1.vm.tdl

:begin :instance.

incredibly := vp_adv_post_word_le &
  [ STEM < "incredibly" >,
    SYNSEM.LOCAL.CONT.KEY _incredibly_rel ].

:end :instance.


; <<>>
; >> indeed.c.1.vm.tdl
; indeed.c.1.vm.tdl

:begin :instance.

indeed_root := disc_adv_le &
  [ STEM < "indeed" >,
    SYNSEM.LOCAL.CONT.KEY.EXCL 'indeed ].

:end :instance.


; <<>>
; >> independent.a.1.vm.tdl
; independent.a.1.vm.tdl

:begin :instance.

independent_a1 := intrans_adj_le &
  [ STEM < "independent" >,
    SYNSEM.LOCAL.CONT.KEY _independent_rel ].

:end :instance.


; <<>>
; >> individual.a.1.vm.tdl
; individual.a.1.vm.tdl

:begin :instance.

individual_a1 := intrans_adj_le &
  [ STEM < "individual" >,
    SYNSEM.LOCAL.CONT.KEY _individual_adj_rel ].

:end :instance.


; <<>>
; >> individual.n.1.vm.tdl
; individual.n.1.vm.tdl

:begin :instance.

individual_n1 := noun_ppof_word_le &
  [ STEM < "individual" >,
    SYNSEM.LOCAL.CONT.KEY _individual_rel ].

:end :instance.


; <<>>
; >> individually.a.1.vm.tdl
; individually.a.1.vm.tdl

:begin :instance.

individually := adv_word_le &
  [ STEM < "individually" >,
    SYNSEM.LOCAL.CONT.KEY _individually_rel ].

:end :instance.


; <<>>
; >> indonesia.n.1.vm.tdl
; indonesia.n.1.vm.tdl

:begin :instance.

Indonesia_n1 := proper_le &
  [ STEM < "indonesia" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'Indonesia ].

:end :instance.


; <<>>
; >> indonesian.a.1.vm.tdl
; indonesian.a.1.vm.tdl

:begin :instance.

indonesian_a1 := intrans_adj_le &
  [ STEM < "indonesian" >,
    SYNSEM.LOCAL.CONT.KEY _indonesian_rel ].

:end :instance.


; <<>>
; >> indulge.v.1.vm.tdl
; indulge.v.1.vm.tdl

:begin :instance.

indulge_v1 := mv_np*_trans_le &
  [ STEM < "indulge" >,
    SYNSEM.LOCAL.CONT.KEY _indulge_rel ].

:end :instance.


; <<>>
; >> indulge.v.2.vm.tdl
; indulge.v.2.vm.tdl

:begin :instance.

indulge_v2 := mv_empty_prep_intrans_le &
  [ STEM < "indulge" >,
    SYNSEM.LOCAL.CONT [ KEY _indulge_in_rel,
			COMPKEY _in_rel ] ].

:end :instance.


; <<>>
; >> industrialized.a.1.vm.tdl
; industrialized.a.1.vm.tdl

:begin :instance.

industrialized_a1 := intrans_adj_le &
  [ STEM < "industrialized" >,
    SYNSEM.LOCAL.CONT.KEY _industrialized_rel ].

:end :instance.


; <<>>
; >> inferior.a.1.vm.tdl
; inferior.a.1.vm.tdl

:begin :instance.

inferior_a1 := intrans_adj_le &
  [ STEM < "inferior" >,
    SYNSEM.LOCAL.CONT.KEY _inferior_rel ].

:end :instance.


; <<>>
; >> inform.v.1.vm.tdl
; inform.v.1.vm.tdl

:begin :instance.

inform_v1 := mv_np_trans_cp_le &
  [ STEM < "inform" >,
    SYNSEM.LOCAL.CONT.KEY _inform_rel ].

:end :instance.


; <<>>
; >> informal.a.1.vm.tdl
; informal.a.1.vm.tdl

:begin :instance.

informal_a1 := intrans_adj_le &
  [ STEM < "informal" >,
    SYNSEM.LOCAL.CONT.KEY _informal_rel ].

:end :instance.


; <<>>
; >> informally.a.1.vm.tdl
; informally.a.1.vm.tdl

:begin :instance.

informally := adv_word_le &
  [ STEM < "informally" >,
    SYNSEM.LOCAL.CONT.KEY _informally_rel ].

:end :instance.


; <<>>
; >> information.n.1.vm.tdl
; information.n.1.vm.tdl

:begin :instance.

information_n1 := massn_le &
  [ STEM < "information" >,
    SYNSEM.LOCAL.CONT.KEY _information_rel ].

:end :instance.


; <<>>
; >> inside.p.1.tdl
; inside.p.1.tdl

:begin :instance.

inside := reg_prep_le &
  [ STEM < "inside" >,
    SYNSEM.LOCAL.CONT.KEY _inside_rel ].

:end :instance.


; <<>>
; >> inside.p.2.tdl
; inside.p.2.tdl

:begin :instance.

inside_pp := pp_le &
  [ STEM < "inside" >,
    SYNSEM.LOCAL.CONT.KEY _inside_rel ].

:end :instance.


; <<>>
; >> insignificant.a.1.vm.tdl
; insignificant.a.1.vm.tdl

:begin :instance.

insignificant_a1 := intrans_adj_le &
  [ STEM < "insignificant" >,
    SYNSEM.LOCAL.CONT.KEY _insignificant_rel ].

:end :instance.


; <<>>
; >> insist.v.1.vm.tdl
; insist.v.1.vm.tdl

:begin :instance.

insist_v1 := mv_cp_prop*_non_trans_le &
  [ STEM < "insist" >,
    SYNSEM.LOCAL.CONT.KEY _insist_rel ].

:end :instance.


; <<>>
; >> insist.v.2.vm.tdl
; insist.v.2.vm.tdl

:begin :instance.

insist_v2 := mv_empty_prep_intrans_le &
  [ STEM < "insist" >,
    SYNSEM.LOCAL.CONT [ KEY _insist_on_rel,
			COMPKEY _on_rel ] ].

:end :instance.


; <<>>
; >> instance.n.1.vm.tdl
; instance.n.1.vm.tdl

:begin :instance.

instance_n1 := intr_noun_word_le &
  [ STEM < "instance" >,
    SYNSEM.LOCAL.CONT.KEY _instance_rel ].

:end :instance.


; <<>>
; >> instant.a.1.vm.tdl
; instant.a.1.vm.tdl

:begin :instance.

instant_a1 := intrans_adj_le &
  [ STEM < "instant" >,
    SYNSEM.LOCAL.CONT.KEY _instant_rel ].

:end :instance.


; <<>>
; >> instead.a.1.vm.tdl
; instead.a.1.vm.tdl

:begin :instance.

instead_adv1 := vp_adv_post_word_le &
  [ STEM < "instead" >,
    SYNSEM.LOCAL.CONT.KEY _instead_rel ].

:end :instance.


; <<>>
; >> instead.of.p.1.tdl
; instead.of.p.1.tdl

:begin :instance.

instead_of := reg_prep_mle1 &
  [ STEM < "instead", "of" >,
    SYNSEM.LOCAL.CONT.KEY _instead_of_rel ].

:end :instance.


; <<>>
; >> institute.n.1.vm.tdl
; institute.n.1.vm.tdl

:begin :instance.

institute_n1 := intr_noun_word_le &
  [ STEM < "institute" >,
    SYNSEM.LOCAL.CONT.KEY _institute_rel ].

:end :instance.


; <<>>
; >> instruct.v.1.vm.tdl
; instruct.v.1.vm.tdl

:begin :instance.

instruct_v1 := mv_obj_equi_le &
  [ STEM < "instruct" >,
    SYNSEM.LOCAL.CONT.KEY _instruct_rel ].

:end :instance.


; <<>>
; >> instrument.n.1.vm.tdl
; instrument.n.1.vm.tdl

:begin :instance.

instrument_n1 := intr_noun_word_le &
  [ STEM < "instrument" >,
    SYNSEM.LOCAL.CONT.KEY _instrument_rel ].

:end :instance.


; <<>>
; >> intend.v.1.vm.tdl
; intend.v.1.vm.tdl

:begin :instance.

intend_v1 := mv_subj_equi_le &
  [ STEM < "intend" >,
    SYNSEM.LOCAL.CONT.KEY _intend_rel ].

:end :instance.


; <<>>
; >> intensive.a.1.vm.tdl
; intensive.a.1.vm.tdl

:begin :instance.

intensive_a1 := intrans_adj_le &
  [ STEM < "intensive" >,
    SYNSEM.LOCAL.CONT.KEY _intensive_rel ].

:end :instance.


; <<>>
; >> intensively.a.1.vm.tdl
; intensively.a.1.vm.tdl

:begin :instance.

intensively := adv_word_le &
  [ STEM < "intensively" >,
    SYNSEM.LOCAL.CONT.KEY _intensively_rel ].

:end :instance.


; <<>>
; >> intercity.n.1.vm.tdl
; intercity.n.1.vm.tdl

:begin :instance.

Intercity_n1 := proper_le &
  [ STEM < "intercity" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'Intercity ].

:end :instance.


; <<>>
; >> interest.in.v.1.vm.tdl
; interest.in.v.1.vm.tdl

:begin :instance.

interest_in_v1 := mv_empty_prep_trans_le &
  [ STEM < "interest" >,
    SYNSEM.LOCAL.CONT [ KEY _interest_in_rel,
			OCOMPKEY _in_rel ] ].

:end :instance.


; <<>>
; >> interest.n.1.vm.tdl
; interest.n.1.vm.tdl

:begin :instance.

interest_n1 := intr_noun_word_le &
  [ STEM < "interest" >,
    SYNSEM.LOCAL.CONT.KEY _interest_n_rel ].

:end :instance.


; <<>>
; >> interested.a.1.vm.tdl
; interested.a.1.vm.tdl

:begin :instance.

interested_a1 := intrans_adj_le &
  [ STEM < "interested" >,
    SYNSEM.LOCAL.CONT.KEY _interested_rel ].

:end :instance.


; <<>>
; >> interfere.v.1.vm.tdl
; interfere.v.1.vm.tdl

:begin :instance.

interfere_v1 := mv_unerg_le &
  [ STEM < "interfere" >,
    SYNSEM.LOCAL.CONT.KEY _interfere_rel ].

:end :instance.


; <<>>
; >> interfere.with.v.1.vm.tdl
; interfere.with.v.1.vm.tdl

:begin :instance.

interfere_with_v1 := mv_empty_prep_intrans_le &
  [ STEM < "interfere" >,
    SYNSEM.LOCAL.CONT [ KEY _interfere_rel,
			COMPKEY _with_rel ] ].

:end :instance.


; <<>>
; >> interfere.in.v.1.vm.tdl
; interfere.in.v.1.vm.tdl

:begin :instance.

interfere_in_v1 := mv_empty_prep_intrans_le &
  [ STEM < "interfere" >,
    SYNSEM.LOCAL.CONT [ KEY _interfere_in_rel,
			COMPKEY _in_rel ] ].

:end :instance.


; <<>>
; >> international.a.1.vm.tdl
; international.a.1.vm.tdl

:begin :instance.

international_a1 := intrans_adj_le &
  [ STEM < "international" >,
    SYNSEM.LOCAL.CONT.KEY _international_rel ].

:end :instance.


; <<>>
; >> internationally.a.1.vm.tdl
; internationally.a.1.vm.tdl

:begin :instance.

internationally := vp_adv_post_word_le &
  [ STEM < "internationally" >,
    SYNSEM.LOCAL.CONT.KEY _internationally_rel ].

:end :instance.


; <<>>
; >> interrogate.v.1.vm.tdl
; interrogate.v.1.vm.tdl

:begin :instance.

interrogate_v1 := mv_np_trans_le &
  [ STEM < "interrogate" >,
    SYNSEM.LOCAL.CONT.KEY _interrogate_rel ].

:end :instance.


; <<>>
; >> interval.n.1.vm.tdl
; interval.n.1.vm.tdl

:begin :instance.

interval_n1 := intr_noun_word_le &
  [ STEM < "interval" >,
    SYNSEM.LOCAL.CONT.KEY _interval_rel ].

:end :instance.


; <<>>
; >> interview.v.1.tdl
; interview.v.1.tdl

:begin :instance.

interview_v1 := mv_np*_trans_le &
  [ STEM < "interview" >,
    SYNSEM.LOCAL.CONT.KEY _interview_v_rel ].

:end :instance.


; <<>>
; >> interview.n.1.tdl
; interview.n.1.tdl

:begin :instance.

interview_n1 := intr_noun_word_le &
  [ STEM < "interview" >,
    SYNSEM.LOCAL.CONT.KEY _interview_rel ].

:end :instance.


; <<>>
; >> into.p.1.tdl
; into.p.1.tdl

:begin :instance.

into := prep_nomod_le &
  [ STEM < "into" >,
    SYNSEM.LOCAL.CONT.KEY _into_rel ].

:end :instance.


; <<>>
; >> introduce.v.1.vm.tdl
; introduce.v.1.vm.tdl

:begin :instance.

introduce_v1 := mv_empty_prep*_trans_le &
  [ STEM < "introduce" >,
    SYNSEM.LOCAL.CONT [ KEY _introduce_to_rel,
			OCOMPKEY _to_rel ] ].

:end :instance.


; <<>>
; >> introduction.n.1.vm.tdl
; introduction.n.1.vm.tdl

:begin :instance.

introduction_n1 := intr_noun_word_le &
  [ STEM < "introduction" >,
    SYNSEM.LOCAL.CONT.KEY _introduction_rel ].

:end :instance.


; <<>>
; >> invite.v.1.vm.tdl
; invite.v.1.vm.tdl

:begin :instance.

invite_v1 := mv_empty_prep*_trans_le &
  [ STEM < "invite" >,
    SYNSEM.LOCAL.CONT [ KEY _invite_rel,
			OCOMPKEY _to_rel ] ].

:end :instance.


; <<>>
; >> invite.v.2.vm.tdl
; invite.v.2.vm.tdl

:begin :instance.

invite_v2 := mv_obj_equi_le &
  [ STEM < "invite" >,
    SYNSEM.LOCAL.CONT.KEY _invite_to_rel ].

:end :instance.


; <<>>
; >> involve.v.1.vm.tdl
; involve.v.1.vm.tdl

:begin :instance.

involve_v1 := mv_np_trans_le &
  [ STEM < "involve" >,
    SYNSEM.LOCAL.CONT.KEY _involve_rel ].

:end :instance.


; <<>>
; >> is.vx.1.tdl
; is.vx.1.tdl

:begin :instance.

be_c_is := be_c_is_le &
  [ STEM < "is" > ].

:end :instance.


; <<>>
; >> is.cx.vx.1.tdl
; is.cx.vx.1.tdl

:begin :instance.

be_c_is_cx := be_c_is_le &
  [ STEM < "s" > ].

:end :instance.


; <<>>
; >> is.vx.2.tdl
; is.vx.2.tdl

:begin :instance.

be_id_is := be_id_is_le &
  [ STEM < "is" > ].

:end :instance.


; <<>>
; >> is.cx.vx.2.tdl
; is.cx.vx.2.tdl

:begin :instance.

be_id_is_cx := be_id_is_le &
  [ STEM < "s" > ].

:end :instance.


; <<>>
; >> is.vx.3.tdl
; is.vx.3.tdl

:begin :instance.

be_th_cop_is := be_th_cop_is_le &
  [ STEM < "is" > ].

:end :instance.


; <<>>
; >> is.cx.vx.3.tdl
; is.cx.vx.3.tdl

:begin :instance.

be_th_cop_is_cx := be_th_cop_s_cx_le &
  [ STEM < "s" > ].

:end :instance.


; <<>>
; >> island.n.1.vm.tdl
; island.n.1.vm.tdl

:begin :instance.

island_n1 := intr_noun_word_le &
  [ STEM < "island" >,
    SYNSEM.LOCAL.CONT.KEY _island_rel ].

:end :instance.


; <<>>
; >> isnt.vx.1.tdl
; isnt.vx.1.tdl

:begin :instance.

be_c_is_neg := be_c_is_neg_le &
  [ STEM < "isn", "t" > ].

:end :instance.


; <<>>
; >> isnt.vx.2.tdl
; isnt.vx.2.tdl

:begin :instance.

be_id_is_neg := be_id_is_neg_le &
  [ STEM < "isn", "t" > ].

:end :instance.


; <<>>
; >> isnt.vx.3.tdl
; isnt.vx.3.tdl

:begin :instance.

be_th_cop_is_neg := be_th_cop_is_neg_le &
  [ STEM < "isn", "t" > ].

:end :instance.


; <<>>
; >> isolated.a.1.vm.tdl
; isolated.a.1.vm.tdl

:begin :instance.

isolated_a1 := intrans_adj_le &
  [ STEM < "isolated" >,
    SYNSEM.LOCAL.CONT.KEY _isolated_rel ].

:end :instance.


; <<>>
; >> issue.n.1.vm.tdl
; issue.n.1.vm.tdl

:begin :instance.

issue_n1 := intr_noun_word_le &
  [ STEM < "issue" >,
    SYNSEM.LOCAL.CONT.KEY _issue_rel ].

:end :instance.


; <<>>
; >> it.n.1.tdl
; it.n.1.tdl

:begin :instance.

it := expl_it_le &
  [ STEM < "it" > ].

:end :instance.


; <<>>
; >> it.n.2.tdl
; it.n.2.tdl

:begin :instance.

it2 := pers_pro_le &
  [ STEM < "it" >,
    SYNSEM.LOCAL [ CONT.KEY.INST [ PNG [ PN 3sg*,
					 GEN neut* ],
				   PRONTYPE std_3 ],
		   CTXT.ACTIVATED - ] ].

:end :instance.


; <<>>
; >> italian.a.1.vm.tdl
; italian.a.1.vm.tdl

:begin :instance.

italian_a1 := intrans_adj_le &
  [ STEM < "italian" >,
    SYNSEM.LOCAL.CONT.KEY _italian_rel ].

:end :instance.


; <<>>
; >> italian.n.1.vm.tdl
; italian.n.1.vm.tdl

:begin :instance.

Italian_n1 := proper_le &
  [ STEM < "italian" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'Italian ].

:end :instance.


; <<>>
; >> italy.n.1.vm.tdl
; italy.n.1.vm.tdl

:begin :instance.

Italy_n1 := proper_le &
  [ STEM < "italy" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'Italy ].

:end :instance.


; <<>>
; >> its.n.1.tdl
; its.n.1.tdl

:begin :instance.

its_poss := poss_le &
  [ STEM < "its" >,
    SYNSEM.LOCAL.CONT.ALTKEY.INST [ PNG [ PN 3sg*,
					  GEN neut* ],
				    PRONTYPE std_3 ] ].
:end :instance.


; <<>>
; >> its.n.2.tdl
; its.n.2.tdl

:begin :instance.

its := poss_pro_le &
  [ STEM < "its" >,
    SYNSEM.LOCAL.CONT.LISZT.LIST.FIRST.INST.PNG [ PN 3sg*,
						  GEN neut* ] ].

:end :instance.


; <<>>
; >> itself.n.1.tdl
; itself.n.1.tdl

:begin :instance.

itself := refl_pro_le &
  [ STEM < "itself" >,
    SYNSEM.LOCAL.CONT.KEY.INST.PNG [ PN 3sg*,
				     GEN neut* ] ].

:end :instance.


; <<>>
; >> jaguar.n.1.vm.tdl
; jaguar.n.1.vm.tdl

:begin :instance.

Jaguar_n1 := proper_le &
  [ STEM < "jaguar" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'Jaguar ].

:end :instance.


; <<>>
; >> jam.n.1.vm.tdl
; jam.n.1.vm.tdl

:begin :instance.

jam_n1 := massn_le &
  [ STEM < "jam" >,
    SYNSEM.LOCAL.CONT.KEY _jam_rel ].

:end :instance.


; <<>>
; >> janitor.n.1.vm.tdl
; janitor.n.1.vm.tdl

:begin :instance.

janitor_n1 := intr_noun_word_le &
  [ STEM < "janitor" >,
    SYNSEM.LOCAL.CONT.KEY _janitor_rel ].

:end :instance.


; <<>>
; >> january.n.1.tdl
; january.n.1.tdl

:begin :instance.

january := month_word_le &
  [ STEM < "january" >,
    SYNSEM.LOCAL.CONT.KEY.MONTH 'jan ].

:end :instance.


; <<>>
; >> january.n.2.tdl
; january.n.2.tdl

:begin :instance.

january_2 := month_year_word_le &
  [ STEM < "january" >,
    SYNSEM.LOCAL.CONT.KEY.MONTH 'jan ].

:end :instance.


; <<>>
; >> japanese.a.1.vm.tdl
; japanese.a.1.vm.tdl

:begin :instance.

japanese_a1 := intrans_adj_le &
  [ STEM < "japanese" >,
    SYNSEM.LOCAL.CONT.KEY _japanese_rel ].

:end :instance.


; <<>>
; >> job.n.1.vm.tdl
; job.n.1.vm.tdl

:begin :instance.

job_n1 := intr_noun_word_le &
  [ STEM < "job" >,
    SYNSEM.LOCAL.CONT.KEY _job_rel ].

:end :instance.


; <<>>
; >> jochen.n.1.vm.tdl
; jochen.n.1.vm.tdl

:begin :instance.

Jochen_n1 := proper_le &
  [ STEM < "jochen" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'Jochen ].

:end :instance.


; <<>>
; >> john.n.1.tdl
; john.n.1.tdl

:begin :instance.

john := proper_le &
  [ STEM < "john" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'john ].

:end :instance.


; <<>>
; >> join.v.1.vm.tdl
; join.v.1.vm.tdl

:begin :instance.

join_v1 := mv_np*_trans_le &
  [ STEM < "join" >,
    SYNSEM.LOCAL.CONT.KEY _join_rel ].

:end :instance.


; <<>>
; >> joint.a.1.vm.tdl
; joint.a.1.vm.tdl

:begin :instance.

joint_a1 := intrans_adj_le &
  [ STEM < "joint" >,
    SYNSEM.LOCAL.CONT.KEY _joint_rel ].

:end :instance.


; <<>>
; >> jointly.a.1.vm.tdl
; jointly.a.1.vm.tdl

:begin :instance.

jointly_adv1 := vp_adv_word_le &
  [ STEM < "jointly" >,
    SYNSEM.LOCAL.CONT.KEY _jointly_rel ].

:end :instance.


; <<>>
; >> journey.n.1.vm.tdl
; journey.n.1.vm.tdl

:begin :instance.

journey_n1 := noun_ppcomp_word_le &
  [ STEM < "journey" >,
    SYNSEM.LOCAL.CONT.KEY _journey_rel ].

:end :instance.


; <<>>
; >> july.n.1.tdl
; july.n.1.tdl

:begin :instance.

july := month_word_le &
  [ STEM < "july" >,
    SYNSEM.LOCAL.CONT.KEY.MONTH 'jul ].

:end :instance.


; <<>>
; >> july.n.2.tdl
; july.n.2.tdl

:begin :instance.

july_2 := month_year_word_le &
  [ STEM < "july" >,
    SYNSEM.LOCAL.CONT.KEY.MONTH 'jul ].

:end :instance.


; <<>>
; >> june.n.1.tdl
; june.n.1.tdl

:begin :instance.

june := month_word_le &
  [ STEM < "june" >,
    SYNSEM.LOCAL.CONT.KEY.MONTH 'jun ].

:end :instance.


; <<>>
; >> june.n.2.tdl
; june.n.2.tdl

:begin :instance.

june_2 := month_year_word_le &
  [ STEM < "june" >,
    SYNSEM.LOCAL.CONT.KEY.MONTH 'jun ].

:end :instance.


; <<>>
; >> just.a.1.vm.tdl
; just.a.1.vm.tdl

:begin :instance.

just_adv1 := adv_pre_word_le &
  [ STEM < "just" >,
    SYNSEM.LOCAL.CONT.KEY _just_rel ].

:end :instance.


; <<>>
; >> just.like.c.1.vm.tdl
; just.like.c.1.vm.tdl

:begin :instance.

just_like := how_about_mle1 &
  [ STEM < "just", "like" >,
    SYNSEM.LOCAL.CONT.MESSAGE _just_like_rel ].

:end :instance.


; <<>>
; >> kaefer-Plex.n.1.vm.tdl
; kaefer-Plex.n.1.vm.tdl

:begin :instance.

Kaefer-Plex_n1 := proper_le &
  [ STEM < "kaefer-Plex" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'Kaefer-Plex ].

:end :instance.


; <<>>
; >> karlsruhe.n.1.vm.tdl
; karlsruhe.n.1.vm.tdl

:begin :instance.

Karlsruhe_n1 := proper_le &
  [ STEM < "karlsruhe" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'Karlsruhe ].

:end :instance.


; <<>>
; >> kassel.n.1.vm.tdl
; kassel.n.1.vm.tdl

:begin :instance.

Kassel_n1 := proper_le &
  [ STEM < "kassel" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'Kassel ].

:end :instance.


; <<>>
; >> keen.a.1.vm.tdl
; keen.a.1.vm.tdl

:begin :instance.

keen_a1 := intrans_adj_le &
  [ STEM < "keen" >,
    SYNSEM.LOCAL.CONT.KEY _keen_rel ].

:end :instance.


; <<>>
; >> keep.to.v.1.vm.tdl
; keep.to.v.1.vm.tdl

:begin :instance.

keep_to_v1 := mv_empty_prep_intrans_le &
  [ STEM < "keep" >,
    SYNSEM.LOCAL.CONT [ KEY _keep_to_rel,
			COMPKEY _to_rel ] ].

:end :instance.


; <<>>
; >> keep.v.1.tdl
; keep.v.1.tdl

:begin :instance.

keep-prd := mv_subj_equi_prd_le &
  [ STEM < "keep" >,
    SYNSEM.LOCAL.CONT.KEY _keep_prd_rel ].

:end :instance.


; <<>>
; >> keep.v.2.tdl
; keep.v.2.tdl

:begin :instance.

keep-prd_v2 := mv_obj_equi_prd_le &
  [ STEM < "keep" >,
    SYNSEM.LOCAL.CONT.KEY _keep_prd2_rel ].

:end :instance.


; <<>>
; >> kenya.n.1.vm.tdl
; kenya.n.1.vm.tdl

:begin :instance.

Kenya_n1 := proper_le &
  [ STEM < "kenya" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'Kenya ].

:end :instance.


; <<>>
; >> key.n.1.vm.tdl
; key.n.1.vm.tdl

:begin :instance.

key_n1 := intr_noun_word_le &
  [ STEM < "key" >,
    SYNSEM.LOCAL.CONT.KEY _key_rel ].

:end :instance.


; <<>>
; >> kiel.n.1.vm.tdl
; kiel.n.1.vm.tdl

:begin :instance.

Kiel_n1 := proper_le &
  [ STEM < "kiel" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'Kiel ].

:end :instance.


; <<>>
; >> kim.n.1.tdl
; kim.n.1.tdl

:begin :instance.

kim := proper_le &
  [ STEM < "kim" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'kim ].

:end :instance.


; <<>>
; >> kind.a.1.vm.tdl
; kind.a.1.vm.tdl

:begin :instance.

kind_a1 := intrans_adj_le &
  [ STEM < "kind" >,
    SYNSEM.LOCAL.CONT.KEY _kind_rel ].

:end :instance.


; <<>>
; >> king.n.1.vm.tdl
; king.n.1.vm.tdl

:begin :instance.

king_n1 := intr_noun_word_le &
  [ STEM < "king" >,
    SYNSEM.LOCAL.CONT.KEY _king_rel ].

:end :instance.


; <<>>
; >> klein.n.1.vm.tdl
; klein.n.1.vm.tdl

:begin :instance.

Klein_n1 := proper_le &
  [ STEM < "klein" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'Klein ].

:end :instance.


; <<>>
; >> knotty.a.1.vm.tdl
; knotty.a.1.vm.tdl

:begin :instance.

knotty_a1 := intrans_adj_le &
  [ STEM < "knotty" >,
    SYNSEM.LOCAL.CONT.KEY _knotty_rel ].

:end :instance.


; <<>>
; >> know.v.1.tdl
; know.v.1.tdl

:begin :instance.

know_v1 := mv_np*_trans_le &
  [ STEM < "know" >,
    SYNSEM.LOCAL.CONT.KEY _know_rel ].

:end :instance.

; <<>>
; >> know.v.2.tdl
; know.v.2.tdl

:begin :instance.

know_v2 := mv_cp_non_trans_le &
  [ STEM < "know" >,
    SYNSEM.LOCAL.CONT.KEY _know_rel ].

:end :instance.

; <<>>
; >> know.v.3.tdl
; know.v.3.tdl

:begin :instance.

know_v3 := mv_subj_equi_le &
  [ STEM < "know" >,
    SYNSEM.LOCAL.CONT.KEY _know2_rel ].

:end :instance.


; <<>>
; >> know.v.4.tdl
; know.v.4.tdl

:begin :instance.

know_v4 := mv_sor_le &
  [ STEM < "know" >,
    SYNSEM.LOCAL.CONT.KEY _know2_rel ].

:end :instance.


; <<>>
; >> koepp.n.1.vm.tdl
; koepp.n.1.vm.tdl

:begin :instance.

Koepp_n1 := proper_le &
  [ STEM < "koepp" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'Koepp ].

:end :instance.


; <<>>
; >> korn.n.1.vm.tdl
; korn.n.1.vm.tdl

:begin :instance.

Korn_n1 := proper_le &
  [ STEM < "korn" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'Korn ].

:end :instance.


; <<>>
; >> lack.v.1.vm.tdl
; lack.v.1.vm.tdl

:begin :instance.

lack_v1 := mv_np_trans_le &
  [ STEM < "lack" >,
    SYNSEM.LOCAL.CONT.KEY _lack_rel ].

:end :instance.


; <<>>
; >> lad.n.1.vm.tdl
; lad.n.1.vm.tdl

:begin :instance.

lad_n1 := intr_noun_word_le &
  [ STEM < "lad" >,
    SYNSEM.LOCAL.CONT.KEY _lad_rel ].

:end :instance.


; <<>>
; >> lagemann.n.1.vm.tdl
; lagemann.n.1.vm.tdl

:begin :instance.

Lagemann_n1 := proper_le &
  [ STEM < "lagemann" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'Lagemann ].

:end :instance.


; <<>>
; >> lake.n.1.vm.tdl
; lake.n.1.vm.tdl

:begin :instance.

lake_n1 := intr_noun_word_le &
  [ STEM < "lake" >,
    SYNSEM.LOCAL.CONT.KEY _lake_rel ].

:end :instance.


; <<>>
; >> landesbank.n.1.vm.tdl
; landesbank.n.1.vm.tdl

:begin :instance.

Landesbank_n1 := proper_le &
  [ STEM < "landesbank" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'Landesbank ].

:end :instance.


; <<>>
; >> lange.n.1.vm.tdl
; lange.n.1.vm.tdl

:begin :instance.

Lange_n1 := proper_le &
  [ STEM < "lange" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'Lange ].

:end :instance.


; <<>>
; >> language.n.1.vm.tdl
; language.n.1.vm.tdl

:begin :instance.

language_n1 := intr_noun_word_le &
  [ STEM < "language" >,
    SYNSEM.LOCAL.CONT.KEY _language_rel ].

:end :instance.


; <<>>
; >> large.a.1.vm.tdl
; large.a.1.vm.tdl

:begin :instance.

large_a1 := intrans_adj_le &
  [ STEM < "large" >,
    SYNSEM.LOCAL.CONT.KEY _large_rel ].

:end :instance.


; <<>>
; >> largely.a.1.vm.tdl
; largely.a.1.vm.tdl

:begin :instance.

largely := adv_word_le &
  [ STEM < "largely" >,
    SYNSEM.LOCAL.CONT.KEY _largely_rel ].

:end :instance.


; <<>>
; >> larger.a.1.vm.tdl
; larger.a.1.vm.tdl

:begin :instance.

larger_a1 := intrans_adj_le &
  [ STEM < "larger" >,
    SYNSEM.LOCAL.CONT.KEY _larger_rel ].

:end :instance.


; <<>>
; >> last.a.1.vm.tdl
; last.a.1.vm.tdl

:begin :instance.

last_adv1 := vp_adv_post_word_le &
  [ STEM < "last" >,
    SYNSEM.LOCAL.CONT.KEY _last_adv_rel ].

:end :instance.


; <<>>
; >> last.v.1.vm.tdl
; last.v.1.vm.tdl

:begin :instance.

last_v1 := mv_unacc_le &
  [ STEM < "last" >,
    SYNSEM.LOCAL.CONT.KEY _last_v_rel ].

:end :instance.


; <<>>
; >> last.a.1.tdl
; last.a.1.tdl

:begin :instance.

last_a1 := intrans_adj_le &
  [ STEM < "last" >,
    SYNSEM.LOCAL.CONT.KEY _last_adj_rel ].

:end :instance.


; <<>>
; >> lasting.a.1.vm.tdl
; lasting.a.1.vm.tdl

:begin :instance.

lasting_a1 := intrans_adj_le &
  [ STEM < "lasting" >,
    SYNSEM.LOCAL.CONT.KEY _lasting_rel ].

:end :instance.


; <<>>
; >> late.a.1.tdl
; late.a.1.tdl

:begin :instance.

late_a1 := intrans_adj_le &
  [ STEM < "late" >,
    SYNSEM.LOCAL.CONT.KEY _late_rel ].

:end :instance.


; <<>>
; >> late.a.1.vm.tdl
; late.a.1.vm.tdl

:begin :instance.

late := vp_adv_post_word_le &
  [ STEM < "late" >,
    SYNSEM.LOCAL.CONT.KEY _late_adv_rel ].

:end :instance.


; <<>>
; >> later.a.1.vm.tdl
; later.a.1.vm.tdl

:begin :instance.

later_adv1 := vp_adv_post_word_le &
  [ STEM < "later" >,
    SYNSEM.LOCAL.CONT.KEY _later_adv_rel ].

:end :instance.


; <<>>
; >> later.a.2.vm.tdl
; later.a.2.vm.tdl

:begin :instance.

later_a1 := attr_intrans_adj_le &
  [ STEM < "later" >,
    SYNSEM.LOCAL.CONT.KEY _later_rel ].

:end :instance.


; <<>>
; >> latest.a.1.vm.tdl
; latest.a.1.vm.tdl

:begin :instance.

latest_a1 := intrans_adj_le &
  [ STEM < "latest" >,
    SYNSEM.LOCAL.CONT.KEY _latest_rel ].

:end :instance.


; <<>>
; >> laundry.n.1.vm.tdl
; laundry.n.1.vm.tdl

:begin :instance.

laundry_n1 := massn_le &
  [ STEM < "laundry" >,
    SYNSEM.LOCAL.CONT.KEY _laundry_rel ].

:end :instance.


; <<>>
; >> lavergne.n.1.vm.tdl
; lavergne.n.1.vm.tdl

:begin :instance.

Lavergne_n1 := proper_le &
  [ STEM < "lavergne" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'Lavergne ].

:end :instance.


; <<>>
; >> lay.v.1.tdl
; lay.v.1.tdl

:begin :instance.

lay_v1 := mv_prep_trans_le &
  [ STEM < "lay" >,
    SYNSEM.LOCAL.CONT [ KEY _lay_rel,
			OCOMPKEY dir_rel ] ].

:end :instance.


; <<>>
; >> lay.down.v.1.tdl
; lay.down.v.1.tdl

:begin :instance.

lay_down_v1 := mv_particle_le &
  [ STEM < "lay" >,
    SYNSEM.LOCAL.CONT [ KEY _lay_down_rel,
			COMPKEY _down_rel ] ].

:end :instance.


; <<>>
; >> lay.off.v.1.tdl
; lay.off.v.1.tdl

:begin :instance.

lay_off_v1 := mv_particle_np_le &
  [ STEM < "lay" >,
    SYNSEM.LOCAL.CONT [ KEY _lay_off_rel,
			COMPKEY _off_rel ] ].

:end :instance.


; <<>>
; >> lead.v.1.tdl
; lead.v.1.tdl

:begin :instance.

lead_v1 := mv_np_trans_le &
  [ STEM < "lead" >,
    SYNSEM.LOCAL.CONT.KEY _lead_v_rel ].

:end :instance.


; <<>>
; >> leadership.n.1.vm.tdl
; leadership.n.1.vm.tdl

:begin :instance.

leadership_n1 := massn_le &
  [ STEM < "leadership" >,
    SYNSEM.LOCAL.CONT.KEY _leadership_rel ].

:end :instance.


; <<>>
; >> learn.v.1.vm.tdl
; learn.v.1.vm.tdl

:begin :instance.

learn_v1 := mv_np_trans_le &
  [ STEM < "learn" >,
    SYNSEM.LOCAL.CONT.KEY _learn_rel ].

:end :instance.


; <<>>
; >> learn.v.2.vm.tdl
; learn.v.2.vm.tdl

:begin :instance.

learn_v2 := mv_cp_non_trans_le &
  [ STEM < "learn" >,
    SYNSEM.LOCAL.CONT.KEY _learn_rel ].

:end :instance.


; <<>>
; >> learn.v.3.vm.tdl
; learn.v.3.vm.tdl

:begin :instance.

learn_v3 := mv_unerg_le &
  [ STEM < "learn" >,
    SYNSEM.LOCAL.CONT.KEY _learn_rel ].

:end :instance.


; <<>>
; >> learn.v.4.vm.tdl
; learn.v.4.vm.tdl

:begin :instance.

learn_v4 := mv_subj_equi_le &
  [ STEM < "learn" >,
    SYNSEM.LOCAL.CONT.KEY _learn2_rel ].

:end :instance.


; <<>>
; >> least.a.1.vm.tdl
; least.a.1.vm.tdl

:begin :instance.

least_a1 := comparison_spec_le &
  [ STEM < "least" >,
    SYNSEM.LOCAL.CONT.KEY comp_least_rel ].

:end :instance.


; <<>>
; >> leave.behind.v.1.tdl
; leave.behind.v.1.tdl

:begin :instance.

leave_behind_v1 := mv_particle_np_le &
  [ STEM < "leave" >,
    SYNSEM.LOCAL.CONT [ KEY _leave_behind_rel,
			COMPKEY _behind_rel ] ].

:end :instance.


; <<>>
; >> leave.out.v.1.vm.tdl
; leave.out.v.1.vm.tdl

:begin :instance.

leave_out_v1 := mv_particle_np_le &
  [ STEM < "leave" >,
    SYNSEM.LOCAL.CONT [ KEY _leave_out_rel,
			COMPKEY _out_rel ] ].

:end :instance.


; <<>>
; >> leave.to.v.1.vm.tdl
; leave.to.v.1.vm.tdl

:begin :instance.

leave_to_v1 := mv_expl_pp_inf_oeq_le &
  [ STEM < "leave" >,
    SYNSEM.LOCAL.CONT [ KEY _leave_to_rel,
			OCOMPKEY _to_rel ] ].

:end :instance.


; <<>>
; >> leave.v.1.tdl
; leave.v.1.tdl

:begin :instance.

leave_v1 := mv_np*_non_trans_le &
  [ STEM < "leave" >,
    SYNSEM.LOCAL.CONT.KEY _leave_rel ].

:end :instance.


; <<>>
; >> leave.v.2.tdl
; leave.v.2.tdl

:begin :instance.

leave_v2 := mv_prep_trans_le &
  [ STEM < "leave" >,
    SYNSEM.LOCAL.CONT [ KEY _leave_rel,
			OCOMPKEY dir_rel ] ].

:end :instance.


; <<>>
; >> leave.v.3.vm.tdl
; leave.v.3.vm.tdl

:begin :instance.

leave_v3 := mv_ditrans_le &
  [ STEM < "leave" >,
    SYNSEM.LOCAL.CONT.KEY _leave3_rel ].

:end :instance.


; <<>>
; >> lecture.n.1.vm.tdl
; lecture.n.1.vm.tdl

:begin :instance.

lecture_n1 := intr_noun_word_le &
  [ STEM < "lecture" >,
    SYNSEM.LOCAL.CONT.KEY _lecture_rel ].

:end :instance.


; <<>>
; >> lee.n.1.tdl
; lee.n.1.tdl

:begin :instance.

lee := proper_le &
  [ STEM < "lee" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'lee ].

:end :instance.


; <<>>
; >> leeway.n.1.vm.tdl
; leeway.n.1.vm.tdl

:begin :instance.

leeway_n1 := massn_le &
  [ STEM < "leeway" >,
    SYNSEM.LOCAL.CONT.KEY _leeway_rel ].

:end :instance.


; <<>>
; >> left.a.1.vm.tdl
; left.a.1.vm.tdl

:begin :instance.

left_a1 := irreg_pred_intrans_adj_le &
  [ STEM < "left" >,
    SYNSEM.LOCAL.CONT.KEY _left_over_rel ].

:end :instance.


; <<>>
; >> left.over.a.1.vm.tdl
; left.over.a.1.vm.tdl

:begin :instance.

left_over_a1 := irreg_attr_adj_mle1 &
  [ STEM < "left", "over" >,
    SYNSEM.LOCAL.CONT.KEY _left_over_rel ].

:end :instance.


; <<>>
; >> left.over.a.2.vm.tdl
; left.over.a.2.vm.tdl

:begin :instance.

left_over_a2 := irreg_pred_intrans_adj_mle1 &
  [ STEM < "left", "over" >,
    SYNSEM.LOCAL.CONT.KEY _left_over_rel ].

:end :instance.


; <<>>
; >> legitimate.a.1.vm.tdl
; legitimate.a.1.vm.tdl

:begin :instance.

legitimate_a1 := intrans_adj_le &
  [ STEM < "legitimate" >,
    SYNSEM.LOCAL.CONT.KEY _legitimate_rel ].

:end :instance.


; <<>>
; >> leipzig.n.1.vm.tdl
; leipzig.n.1.vm.tdl

:begin :instance.

Leipzig_n1 := proper_le &
  [ STEM < "leipzig" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'Leipzig ].

:end :instance.


; <<>>
; >> leisure.n.1.vm.tdl
; leisure.n.1.vm.tdl

:begin :instance.

leisure_n1 := massn_le &
  [ STEM < "leisure" >,
    SYNSEM.LOCAL.CONT.KEY _leisure_rel ].

:end :instance.


; <<>>
; >> lent.n.1.tdl
; lent.n.1.tdl

:begin :instance.

lent := season_word_le &
  [ STEM < "lent" >,
    SYNSEM.LOCAL.CONT.KEY.SEASON 'lent ].

:end :instance.


; <<>>
; >> less.a.1.vm.tdl
; less.a.1.vm.tdl

:begin :instance.

less_a1 := comparison_spec_le &
  [ STEM < "less" >,
    SYNSEM.LOCAL.CONT.KEY comp_less_rel ].

:end :instance.


; <<>>
; >> less.than.c.1.tdl
; less.than.c.1.tdl

:begin :instance.

less_than_deg := degree_spec_mle1 &
  [ STEM < "less", "than" >,
    SYNSEM.LOCAL.CONT.KEY _less_than_rel ].

:end :instance.


; <<>>
; >> less.c.1.tdl
; less.c.1.tdl

:begin :instance.

less_q := pdet_ms_le &
  [ STEM < "less" >,
    SYNSEM.LOCAL.CONT.KEY _less_rel ].

:end :instance.


; <<>>
; >> let.us.c.1.tdl
; let.us.c.1.tdl

:begin :instance.

let_us := lex_imp_mle1 &
  [ STEM < "let", "us" >,
    SYNSEM.LOCAL [ AGR.PNG.PN 1pl*,
		   CONT.KEY _lets_rel ] ].

:end :instance.


; <<>>
; >> let.v.1.tdl
; let.v.1.tdl

:begin :instance.

let_v1 := mv_sorb_le &
  [ STEM < "let" >,
    SYNSEM.LOCAL.CONT.KEY _let_rel ].

:end :instance.


; <<>>
; >> lets.c.1.tdl
; lets.c.1.tdl

:begin :instance.

lets := lex_imp_mle1 &
  [ STEM < "let", "s" >,
    SYNSEM.LOCAL [ AGR.PNG.PN 1pl*,
		   CONT.KEY _lets_rel ] ].

:end :instance.


; <<>>
; >> letter.n.1.vm.tdl
; letter.n.1.vm.tdl

:begin :instance.

letter_n1 := intr_noun_word_le &
  [ STEM < "letter" >,
    SYNSEM.LOCAL.CONT.KEY _letter_rel ].

:end :instance.


; <<>>
; >> level.a.1.vm.tdl
; level.a.1.vm.tdl

:begin :instance.

level_a1 := intrans_adj_le &
  [ STEM < "level" >,
    SYNSEM.LOCAL.CONT.KEY _level_rel ].

:end :instance.


; <<>>
; >> library.n.1.vm.tdl
; library.n.1.vm.tdl

:begin :instance.

library_n1 := intr_noun_word_le &
  [ STEM < "library" >,
    SYNSEM.LOCAL.CONT.KEY _library_rel ].

:end :instance.


; <<>>
; >> lie.v.1.vm.tdl
; lie.v.1.vm.tdl

:begin :instance.

lie_v1 := mv_unerg_le &
  [ STEM < "lie" >,
    SYNSEM.LOCAL.CONT.KEY _lie_rel ].

:end :instance.


; <<>>
; >> life.n.1.vm.tdl
; life.n.1.vm.tdl

:begin :instance.

life_n1 := massn_le &
  [ STEM < "life" >,
    SYNSEM.LOCAL.CONT.KEY _life_rel ].

:end :instance.


; <<>>
; >> lifting.n.1.vm.tdl
; lifting.n.1.vm.tdl

:begin :instance.

lifting_n1 := intr_noun_word_le &
  [ STEM < "lifting" >,
    SYNSEM.LOCAL.CONT.KEY _lifting_rel ].

:end :instance.


; <<>>
; >> light.a.1.vm.tdl
; light.a.1.vm.tdl

:begin :instance.

light_a1 := intrans_adj_le &
  [ STEM < "light" >,
    SYNSEM.LOCAL.CONT.KEY _light_adj_rel ].

:end :instance.


; <<>>
; >> lightly.a.1.vm.tdl
; lightly.a.1.vm.tdl

:begin :instance.

lightly := adv_word_le &
  [ STEM < "lightly" >,
    SYNSEM.LOCAL.CONT.KEY _lightly_rel ].

:end :instance.


; <<>>
; >> like.c.1.tdl
; like.c.1.tdl

:begin :instance.

like := subconj_le &
  [ STEM < "like" >,
    SYNSEM.LOCAL.CONT.KEY _like_subord_rel ].

:end :instance.


; <<>>
; >> like.p.1.tdl
; like.p.1.tdl

:begin :instance.

like_p := prep_le &
  [ STEM < "like" >,
    SYNSEM.LOCAL.CONT.KEY _like_p_rel ].

:end :instance.


; <<>>
; >> like.v.1.vm.tdl
; like.v.1.vm.tdl

:begin :instance.

like_v1 := mv_np_trans_le &
  [ STEM < "like" >,
    SYNSEM.LOCAL.CONT.KEY _like_obj_rel ].

:end :instance.


; <<>>
; >> like.v.2.vm.tdl
; like.v.2.vm.tdl

:begin :instance.

like_v2 := mv_subj_equi_le &
  [ STEM < "like" >,
    SYNSEM.LOCAL.CONT.KEY _like_rel ].

:end :instance.


; <<>>
; >> like.v.3.vm.tdl
; like.v.3.vm.tdl

:begin :instance.

like_v3 := mv_subj_equi_prp_le &
  [ STEM < "like" >,
    SYNSEM.LOCAL.CONT.KEY _like_rel ].

:end :instance.


; <<>>
; >> likely.a.1.vm.tdl
; likely.a.1.vm.tdl

:begin :instance.

likely_a1 := intrans_adj_le &
  [ STEM < "likely" >,
    SYNSEM.LOCAL.CONT.KEY _likely_rel ].

:end :instance.


; <<>>
; >> likewise.a.1.vm.tdl
; likewise.a.1.vm.tdl

:begin :instance.

likewise_adv1 := vp_adv_post_word_le &
  [ STEM < "likewise" >,
    SYNSEM.LOCAL.CONT.KEY _likewise_rel ].

:end :instance.


; <<>>
; >> limit.n.1.vm.tdl
; limit.n.1.vm.tdl

:begin :instance.

limit_n1 := intr_noun_word_le &
  [ STEM < "limit" >,
    SYNSEM.LOCAL.CONT.KEY _limit_n_rel ].

:end :instance.


; <<>>
; >> limit.v.1.vm.tdl
; limit.v.1.vm.tdl

:begin :instance.

limit_v1 := mv_np_trans_le &
  [ STEM < "limit" >,
    SYNSEM.LOCAL.CONT.KEY _limit_v_rel ].

:end :instance.


; <<>>
; >> limit.v.2.vm.tdl
; limit.v.2.vm.tdl

:begin :instance.

limit_v2 := mv_empty_prep_trans_le &
  [ STEM < "limit" >,
    SYNSEM.LOCAL.CONT.KEY _limit_v_rel ].

:end :instance.


; <<>>
; >> limited.a.1.vm.tdl
; limited.a.1.vm.tdl

:begin :instance.

limited_a1 := intrans_adj_le &
  [ STEM < "limited" >,
    SYNSEM.LOCAL.CONT.KEY _limited_rel ].

:end :instance.


; <<>>
; >> lindau.n.1.vm.tdl
; lindau.n.1.vm.tdl

:begin :instance.

Lindau_n1 := proper_le &
  [ STEM < "lindau" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'Lindau ].

:end :instance.


; <<>>
; >> linguistics.n.1.vm.tdl
; linguistics.n.1.vm.tdl

:begin :instance.

linguistics_n1 := massn_le &
  [ STEM < "linguistics" >,
    SYNSEM.LOCAL.CONT.KEY _linguistics_rel ].

:end :instance.


; <<>>
; >> lisa.n.1.vm.tdl
; lisa.n.1.vm.tdl

:begin :instance.

Lisa_n1 := proper_le &
  [ STEM < "lisa" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'Lisa ].

:end :instance.


; <<>>
; >> list.n.1.vm.tdl
; list.n.1.vm.tdl

:begin :instance.

list_n1 := intr_noun_word_le &
  [ STEM < "list" >,
    SYNSEM.LOCAL.CONT.KEY _list_n_rel ].

:end :instance.


; <<>>
; >> list.v.1.vm.tdl
; list.v.1.vm.tdl

:begin :instance.

list_v1 := mv_np_trans_le &
  [ STEM < "list" >,
    SYNSEM.LOCAL.CONT.KEY _list_v_rel ].

:end :instance.


; <<>>
; >> little.a.1.vm.tdl
; little.a.1.vm.tdl

:begin :instance.

little_a1 := intrans_adj_le &
  [ STEM < "little" >,
    SYNSEM.LOCAL.CONT.KEY _little_rel ].

:end :instance.


; <<>>
; >> little.c.1.tdl
; little.c.1.tdl

:begin :instance.

little_det := pdet_ms_le &
  [ STEM < "little" >,
    SYNSEM.LOCAL.CONT.KEY _little_q_rel ].

:end :instance.


; <<>>
; >> live.v.1.vm.tdl
; live.v.1.vm.tdl

:begin :instance.

live_v1 := mv_unerg_le &
  [ STEM < "live" >,
    SYNSEM.LOCAL.CONT.KEY _live_rel ].

:end :instance.


; <<>>
; >> lobby.n.1.vm.tdl
; lobby.n.1.vm.tdl

:begin :instance.

lobby_n1 := intr_noun_word_le &
  [ STEM < "lobby" >,
    SYNSEM.LOCAL.CONT.KEY _lobby_rel ].

:end :instance.


; <<>>
; >> lobster.n.1.vm.tdl
; lobster.n.1.vm.tdl

:begin :instance.

lobster_n1 := intr_noun_word_le &
  [ STEM < "lobster" >,
    SYNSEM.LOCAL.CONT.KEY _lobster_rel ].

:end :instance.


; <<>>
; >> lobster.n.2.vm.tdl
; lobster.n.2.vm.tdl

:begin :instance.

lobster_n2 := massn_le &
  [ STEM < "lobster" >,
    SYNSEM.LOCAL.CONT.KEY _lobster_rel ].

:end :instance.


; <<>>
; >> locality.n.1.vm.tdl
; locality.n.1.vm.tdl

:begin :instance.

locality_n1 := intr_noun_word_le &
  [ STEM < "locality" >,
    SYNSEM.LOCAL.CONT.KEY _locality_rel ].

:end :instance.


; <<>>
; >> location.n.1.vm.tdl
; location.n.1.vm.tdl

:begin :instance.

location_n1 := noun_ppof_word_le &
  [ STEM < "location" >,
    SYNSEM.LOCAL.CONT.KEY _location_rel ].

:end :instance.


; <<>>
; >> lock.v.1.vm.tdl
; lock.v.1.vm.tdl

:begin :instance.

lock_v1 := mv_np_trans_le &
  [ STEM < "lock" >,
    SYNSEM.LOCAL.CONT.KEY _lock_rel ].

:end :instance.


; <<>>
; >> long.a.1.vm.tdl
; long.a.1.vm.tdl

:begin :instance.

long_a1 := intrans_adj_le &
  [ STEM < "long" >,
    SYNSEM.LOCAL.CONT.KEY _long_rel ].

:end :instance.


; <<>>
; >> long.a.2.vm.tdl
; long.a.2.vm.tdl

:begin :instance.

long := vp_adv_post_word_le &
  [ STEM < "long" >,
    SYNSEM.LOCAL.CONT.KEY _long_adv_rel ].

:end :instance.


; <<>>
; >> long-run.a.1.vm.tdl
; long-run.a.1.vm.tdl

:begin :instance.

long_run_a1 := intrans_adj_le &
  [ STEM < "long-run" >,
    SYNSEM.LOCAL.CONT.KEY _long_run_adj_rel ].

:end :instance.


; <<>>
; >> long-term.a.1.vm.tdl
; long-term.a.1.vm.tdl

:begin :instance.

long_term_a1 := intrans_adj_le &
  [ STEM < "long-term" >,
    SYNSEM.LOCAL.CONT.KEY _long_term_rel ].

:end :instance.


; <<>>
; >> longer.a.1.vm.tdl
; longer.a.1.vm.tdl

:begin :instance.

longer_a1 := intrans_adj_le &
  [ STEM < "longer" >,
    SYNSEM.LOCAL.CONT.KEY _longer_rel ].

:end :instance.


; <<>>
; >> look.after.v.1.tdl
; look.after.v.1.tdl

:begin :instance.

look_after_v1 := mv_empty_prep_intrans_le &
  [ STEM < "look" >,
    SYNSEM.LOCAL.CONT [ KEY _look_after_rel,
			COMPKEY _after_rel ] ].

:end :instance.


; <<>>
; >> look.around.v.1.vm.tdl
; look.around.v.1.vm.tdl

:begin :instance.

look_around_v1 := mv_particle_le &
  [ STEM < "look" >,
    SYNSEM.LOCAL.CONT [ KEY _look_around_rel,
			COMPKEY _around_adv_rel ] ].

:end :instance.


; <<>>
; >> look.at.v.1.vm.tdl
; look.at.v.1.vm.tdl

:begin :instance.

look_at_v1 := mv_empty_prep_intrans_le &
  [ STEM < "look" >,
    SYNSEM.LOCAL.CONT [ KEY _look_at_rel,
			COMPKEY _at_rel ] ].

:end :instance.


; <<>>
; >> look.for.v.1.vm.tdl
; look.for.v.1.vm.tdl

:begin :instance.

look_for_v1 := mv_empty_prep_intrans_le &
  [ STEM < "look" >,
    SYNSEM.LOCAL.CONT [ KEY _look_for_rel,
			COMPKEY _for_rel ] ].

:end :instance.


; <<>>
; >> look.forward.to.v.1.vm.tdl
; look.forward.to.v.1.vm.tdl

:begin :instance.

look_forward_to_v1 := mv_particle_pp*_le &
  [ STEM < "look" >,
    SYNSEM.LOCAL.CONT [ KEY _look_forward_to_rel,
			COMPKEY _forward_rel,
			OCOMPKEY _to_rel ] ].

:end :instance.


; <<>>
; >> look.n.1.vm.tdl
; look.n.1.vm.tdl

:begin :instance.

look_n1 := noun_ppcomp_word_le &
  [ STEM < "look" >,
    SYNSEM.LOCAL.CONT [ KEY _look_n_rel,
			COMPKEY _at_rel ] ].

:end :instance.


; <<>>
; >> look.seem.v.1.vm.tdl
; look.seem.v.1.vm.tdl

:begin :instance.

look_seem_v1 := mv_prdp_pp_ssr_le &
  [ STEM < "look" >,
    SYNSEM.LOCAL [ CAT.VALENCE [ SUBJ < [ LOCAL.CONT nom-obj ] >,
				 COMPS < [ LOCAL.CAT.HEAD adj ],
					 synsem > ],
		   CONT.KEY _look_seem_rel ] ].

:end :instance.


; <<>>
; >> look.up.to.v.1.tdl
; look.up.to.v.1.tdl

:begin :instance.

look_up_to_v1 := mv_particle_pp_le &
  [ STEM < "look" >,
    SYNSEM.LOCAL.CONT [ KEY _look_up_to_rel,
			COMPKEY _up_rel,
			OCOMPKEY _to_rel ] ].

:end :instance.


; <<>>
; >> look.up.v.1.vm.tdl
; look.up.v.1.vm.tdl

:begin :instance.

look_up_v1 := mv_particle_np_le &
  [ STEM < "look" >,
    SYNSEM.LOCAL.CONT [ KEY _look_up_rel,
			COMPKEY _up_rel ] ].

:end :instance.


; <<>>
; >> lose.by.v.1.tdl
; lose.by.v.1.tdl

:begin :instance.

lose_by_v1 := mv_empty_prep_intrans_le &
  [ STEM < "lose" >,
    SYNSEM.LOCAL.CONT [ KEY _lose_by_rel,
			COMPKEY _by_rel ] ].

:end :instance.


; <<>>
; >> lose.v.1.tdl
; lose.v.1.tdl

:begin :instance.

lose_v1 := mv_unerg_le &
  [ STEM < "lose" >,
    SYNSEM.LOCAL.CONT.KEY _lose_i_rel ].

:end :instance.


; <<>>
; >> lose.v.3.tdl
; lose.v.3.tdl

:begin :instance.

lose_v3 := mv_np_trans_le &
  [ STEM < "lose" >,
    SYNSEM.LOCAL.CONT.KEY _lose_rel ].

:end :instance.


; <<>>
; >> lost.a.1.vm.tdl
; lost.a.1.vm.tdl

:begin :instance.

lost_a1 := intrans_adj_le &
  [ STEM < "lost" >,
    SYNSEM.LOCAL.CONT.KEY _lost_rel ].

:end :instance.


; <<>>
; >> loud.a.1.vm.tdl
; loud.a.1.vm.tdl

:begin :instance.

loud_a1 := intrans_adj_le &
  [ STEM < "loud" >,
    SYNSEM.LOCAL.CONT.KEY _loud_adj_rel ].

:end :instance.


; <<>>
; >> loudly.a.1.vm.tdl
; loudly.a.1.vm.tdl

:begin :instance.

loudly_adv1 := vp_adv_word_le &
  [ STEM < "loudly" >,
    SYNSEM.LOCAL.CONT.KEY _loudly_rel ].

:end :instance.


; <<>>
; >> love.v.1.vm.tdl
; love.v.1.vm.tdl

:begin :instance.

love_v1 := mv_np*_trans_le &
  [ STEM < "love" >,
    SYNSEM.LOCAL.CONT.KEY _love_rel ].

:end :instance.


; <<>>
; >> love.v.2.vm.tdl
; love.v.2.vm.tdl

:begin :instance.

love_v2 := mv_subj_equi_le &
  [ STEM < "love" >,
    SYNSEM.LOCAL.CONT.KEY _love_to_rel ].

:end :instance.


; <<>>
; >> love.v.3.vm.tdl
; love.v.3.vm.tdl

:begin :instance.

love_v3 := mv_subj_equi_prp_le &
  [ STEM < "love" >,
    SYNSEM.LOCAL.CONT.KEY _love_to_rel ].

:end :instance.


; <<>>
; >> low.a.1.vm.tdl
; low.a.1.vm.tdl

:begin :instance.

low_a1 := intrans_adj_le &
  [ STEM < "low" >,
    SYNSEM.LOCAL.CONT.KEY _low_rel ].

:end :instance.


; <<>>
; >> low.a.2.vm.tdl
; low.a.2.vm.tdl

:begin :instance.

low := vp_adv_post_word_le &
  [ STEM < "low" >,
    SYNSEM.LOCAL.CONT.KEY _low_adv_rel ].

:end :instance.


; <<>>
; >> lower.a.1.vm.tdl
; lower.a.1.vm.tdl

:begin :instance.

lower_a1 := intrans_adj_le &
  [ STEM < "lower" >,
    SYNSEM.LOCAL.CONT.KEY _lower_adj_rel ].

:end :instance.


; <<>>
; >> lower.v.1.vm.tdl
; lower.v.1.vm.tdl

:begin :instance.

lower_v1 := mv_np_trans_le &
  [ STEM < "lower" >,
    SYNSEM.LOCAL.CONT.KEY _lower_rel ].

:end :instance.


; <<>>
; >> lucid.a.1.vm.tdl
; lucid.a.1.vm.tdl

:begin :instance.

lucid_a1 := intrans_adj_le &
  [ STEM < "lucid" >,
    SYNSEM.LOCAL.CONT.KEY _lucid_rel ].

:end :instance.


; <<>>
; >> luck.n.1.vm.tdl
; luck.n.1.vm.tdl

:begin :instance.

luck_n1 := massn_le &
  [ STEM < "luck" >,
    SYNSEM.LOCAL.CONT.KEY _luck_rel ].

:end :instance.


; <<>>
; >> luckily.a.1.vm.tdl
; luckily.a.1.vm.tdl

:begin :instance.

luckily_adv1 := vp_adv_post_word_le &
  [ STEM < "luckily" >,
    SYNSEM.LOCAL.CONT.KEY _luckily_rel ].

:end :instance.


; <<>>
; >> ludwigshafen.n.1.vm.tdl
; ludwigshafen.n.1.vm.tdl

:begin :instance.

Ludwigshafen_n1 := proper_le &
  [ STEM < "ludwigshafen" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'Ludwigshafen ].

:end :instance.


; <<>>
; >> luebeck.n.1.vm.tdl
; luebeck.n.1.vm.tdl

:begin :instance.

Luebeck_n1 := proper_le &
  [ STEM < "luebeck" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'Luebeck ].

:end :instance.


; <<>>
; >> lunch.n.1.tdl
; lunch.n.1.tdl

:begin :instance.

lunch_time_n1 := hour_word_le &
  [ STEM < "lunch" >,
    SYNSEM.LOCAL.CONT.KEY _lunch_time_rel ].

:end :instance.


; <<>>
; >> lunch.n.1.vm.tdl
; lunch.n.1.vm.tdl

:begin :instance.

lunch_n1 := massn_le &
  [ STEM < "lunch" >,
    SYNSEM.LOCAL.CONT.KEY _lunch_rel ].

:end :instance.


; <<>>
; >> lunch.v.1.vm.tdl
; lunch.v.1.vm.tdl

:begin :instance.

lunch_v1 := mv_unerg_le &
  [ STEM < "lunch" >,
    SYNSEM.LOCAL.CONT.KEY _lunch_v_rel ].

:end :instance.


; <<>>
; >> maam.c.1.vm.tdl
; maam.c.1.vm.tdl

:begin :instance.

maam_root := disc_adv_le &
  [ STEM < "maam" >,
    SYNSEM.LOCAL.CONT.KEY.EXCL 'maam ].

:end :instance.


; <<>>
; >> machine.n.1.vm.tdl
; machine.n.1.vm.tdl

:begin :instance.

machine_n1 := intr_noun_word_le &
  [ STEM < "machine" >,
    SYNSEM.LOCAL.CONT.KEY _machine_rel ].

:end :instance.


; <<>>
; >> mad.a.1.vm.tdl
; mad.a.1.vm.tdl

:begin :instance.

mad_a1 := intrans_adj_le &
  [ STEM < "mad" >,
    SYNSEM.LOCAL.CONT.KEY _mad_rel ].

:end :instance.


; <<>>
; >> maddening.a.1.vm.tdl
; maddening.a.1.vm.tdl

:begin :instance.

maddening_a1 := intrans_adj_le &
  [ STEM < "maddening" >,
    SYNSEM.LOCAL.CONT.KEY _maddening_rel ].

:end :instance.


; <<>>
; >> magazine.n.1.vm.tdl
; magazine.n.1.vm.tdl

:begin :instance.

magazine_n1 := intr_noun_word_le &
  [ STEM < "magazine" >,
    SYNSEM.LOCAL.CONT.KEY _magazine_rel ].

:end :instance.


; <<>>
; >> main.a.1.vm.tdl
; main.a.1.vm.tdl

:begin :instance.

main_a1 := intrans_adj_le &
  [ STEM < "main" >,
    SYNSEM.LOCAL.CONT.KEY _main_rel ].

:end :instance.


; <<>>
; >> mainly.a.1.vm.tdl
; mainly.a.1.vm.tdl

:begin :instance.

mainly := adv_word_le &
  [ STEM < "mainly" >,
    SYNSEM.LOCAL.CONT.KEY _mainly_rel ].

:end :instance.


; <<>>
; >> mainz.n.1.vm.tdl
; mainz.n.1.vm.tdl

:begin :instance.

Mainz_n1 := proper_le &
  [ STEM < "mainz" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'Mainz ].

:end :instance.


; <<>>
; >> major.a.1.vm.tdl
; major.a.1.vm.tdl

:begin :instance.

major_a1 := intrans_adj_le &
  [ STEM < "major" >,
    SYNSEM.LOCAL.CONT.KEY _major_rel ].

:end :instance.


; <<>>
; >> majorca.n.1.vm.tdl
; majorca.n.1.vm.tdl

:begin :instance.

Majorca_n1 := proper_le &
  [ STEM < "majorca" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'Majorca ].

:end :instance.


; <<>>
; >> majority.n.1.tdl
; majority.n.1.tdl

:begin :instance.

majority_n1 := noun_ppof_word_le &
  [ STEM < "majority" >,
    SYNSEM.LOCAL.CONT.KEY _majority_rel ].

:end :instance.


; <<>>
; >> make.note.of.v.1.vm.tdl
; make.note.of.v.1.vm.tdl

:begin :instance.

make_note_of_v1 := mv_prep_trans_le &
  [ STEM < "make" >,
    SYNSEM.LOCAL.CONT [ KEY _make_a_note_of_rel,
			COMPKEY _note_rel,
			OCOMPKEY _of_rel ] ].

:end :instance.


; <<>>
; >> make.over.v.1.tdl
; make.over.v.1.tdl

:begin :instance.

make_over_v1 := mv_np_particle_only_le &
  [ STEM < "make" >,
    SYNSEM.LOCAL.CONT [ KEY _make_over_rel,
			COMPKEY _over_rel ] ].

:end :instance.


; <<>>
; >> make.v.2.tdl
; make.v.2.tdl

:begin :instance.

make_v2 := mv_sorb_le &
  [ STEM < "make" >,
    SYNSEM.LOCAL.CONT.KEY _make2_rel ].

:end :instance.


; <<>>
; >> make.v.1.vm.tdl
; make.v.1.vm.tdl

:begin :instance.

make_v1 := mv_np_trans_le &
  [ STEM < "make" >,
    SYNSEM.LOCAL.CONT.KEY _make_rel ].

:end :instance.


; <<>>
; >> make.v.3.vm.tdl
; make.v.3.vm.tdl

:begin :instance.

make_v3 := mv_ditrans_le &
  [ STEM < "make" >,
    SYNSEM.LOCAL.CONT.KEY _make_ditr_rel ].

:end :instance.


; <<>>
; >> maladroit.a.1.vm.tdl
; maladroit.a.1.vm.tdl

:begin :instance.

maladroit_a1 := intrans_adj_le &
  [ STEM < "maladroit" >,
    SYNSEM.LOCAL.CONT.KEY _maladroit_rel ].

:end :instance.


; <<>>
; >> mallorca.n.1.vm.tdl
; mallorca.n.1.vm.tdl

:begin :instance.

Mallorca_n1 := proper_le &
  [ STEM < "mallorca" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'Majorca ].

:end :instance.


; <<>>
; >> man.n.1.tdl
; man.n.1.tdl

:begin :instance.

man1 := intr_noun_word_le &
  [ STEM < "man" >,
    SYNSEM.LOCAL.CONT.KEY _man_rel ].

:end :instance.


; <<>>
; >> manage.v.1.vm.tdl
; manage.v.1.vm.tdl

:begin :instance.

manage_v1 := mv_np_trans_le &
  [ STEM < "manage" >,
    SYNSEM.LOCAL.CONT.KEY _manage_rel ].

:end :instance.


; <<>>
; >> manage.v.2.vm.tdl
; manage.v.2.vm.tdl

:begin :instance.

manage_v2 := mv_subj_equi_le &
  [ STEM < "manage" >,
    SYNSEM.LOCAL.CONT.KEY _manage2_rel ].

:end :instance.


; <<>>
; >> management.n.1.vm.tdl
; management.n.1.vm.tdl

:begin :instance.

management_n1 := massn_le &
  [ STEM < "management" >,
    SYNSEM.LOCAL.CONT.KEY _management_rel ].

:end :instance.


; <<>>
; >> manager.n.1.tdl
; manager.n.1.tdl

:begin :instance.

manager_n1 := noun_ppof_word_le &
  [ STEM < "manager" >,
    SYNSEM.LOCAL.CONT.KEY _manager_rel ].

:end :instance.


; <<>>
; >> manner.n.1.vm.tdl
; manner.n.1.vm.tdl

:begin :instance.

manner_n1 := intr_noun_word_le &
  [ STEM < "manner" >,
    SYNSEM.LOCAL.CONT.KEY _manner_rel ].

:end :instance.


; <<>>
; >> mannheim.n.1.vm.tdl
; mannheim.n.1.vm.tdl

:begin :instance.

Mannheim_n1 := proper_le &
  [ STEM < "mannheim" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'Mannheim ].

:end :instance.


; <<>>
; >> many.c.1.tdl
; many.c.1.tdl

:begin :instance.

many := pdet_pl_le &
  [ STEM < "many" >,
    SYNSEM.LOCAL.CONT.KEY _many_rel ].

:end :instance.


; <<>>
; >> map.n.1.vm.tdl
; map.n.1.vm.tdl

:begin :instance.

map_n1 := intr_noun_word_le &
  [ STEM < "map" >,
    SYNSEM.LOCAL.CONT.KEY _map_rel ].

:end :instance.


; <<>>
; >> march.n.1.tdl
; march.n.1.tdl

:begin :instance.

march := month_word_le &
  [ STEM < "march" >,
    SYNSEM.LOCAL.CONT.KEY.MONTH 'mar ].

:end :instance.


; <<>>
; >> march.n.2.tdl
; march.n.2.tdl

:begin :instance.

march_2 := month_year_word_le &
  [ STEM < "march" >,
    SYNSEM.LOCAL.CONT.KEY.MONTH 'mar ].

:end :instance.


; <<>>
; >> mardi.gras.n.1.tdl
; mardi.gras.n.1.tdl

:begin :instance.

mardi_gras := holiday_word_mle1 &
  [ STEM < "mardi", "gras" >,
    SYNSEM.LOCAL.CONT.KEY.DAY 'mardi_gras ].

:end :instance.


; <<>>
; >> maredo.n.1.vm.tdl
; maredo.n.1.vm.tdl

:begin :instance.

Maredo_n1 := proper_le &
  [ STEM < "maredo" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'Maredo ].

:end :instance.


; <<>>
; >> marienplatz.n.1.vm.tdl
; marienplatz.n.1.vm.tdl

:begin :instance.

Marienplatz_n1 := proper_le &
  [ STEM < "marienplatz" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'Marienplatz ].

:end :instance.


; <<>>
; >> maritim.n.1.vm.tdl
; maritim.n.1.vm.tdl

:begin :instance.

Maritim_n1 := proper_le &
  [ STEM < "maritim" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'Maritim ].

:end :instance.


; <<>>
; >> mark.v.1.vm.tdl
; mark.v.1.vm.tdl

:begin :instance.

mark_v1 := mv_np_trans_le &
  [ STEM < "mark" >,
    SYNSEM.LOCAL.CONT.KEY _mark_rel ].

:end :instance.


; <<>>
; >> marvellously.a.1.vm.tdl
; marvellously.a.1.vm.tdl

:begin :instance.

marvellously := vp_adv_post_word_le &
  [ STEM < "marvelously" >,
    SYNSEM.LOCAL.CONT.KEY _marvelously_rel ].

:end :instance.


; <<>>
; >> marvelous.a.1.vm.tdl
; marvelous.a.1.vm.tdl

:begin :instance.

marvelous_a1 := intrans_adj_le &
  [ STEM < "marvelous" >,
    SYNSEM.LOCAL.CONT.KEY _marvelous_rel ].

:end :instance.


; <<>>
; >> match.up.v.1.vm.tdl
; match.up.v.1.vm.tdl

:begin :instance.

match_up_v1 := mv_particle_le &
  [ STEM < "match" >,
    SYNSEM.LOCAL.CONT [ KEY _match_coll_rel,
			COMPKEY _up_rel ] ].

:end :instance.


; <<>>
; >> match.up.v.2.vm.tdl
; match.up.v.2.vm.tdl

:begin :instance.

match_up_v2 := mv_particle_np_le &
  [ STEM < "match" >,
    SYNSEM.LOCAL.CONT [ KEY _match_v_rel,
			COMPKEY _up_rel ] ].

:end :instance.


; <<>>
; >> match.v.1.vm.tdl
; match.v.1.vm.tdl

:begin :instance.

match_v1 := mv_np_trans_le &
  [ STEM < "match" >,
    SYNSEM.LOCAL.CONT.KEY _match_v_rel ].

:end :instance.


; <<>>
; >> match.v.2.vm.tdl
; match.v.2.vm.tdl

:begin :instance.

match_v2 := mv_unerg_le &
  [ STEM < "match" >,
    SYNSEM.LOCAL.CONT.KEY _match_coll_rel ].

:end :instance.


; <<>>
; >> match.v.3.vm.tdl
; match.v.3.vm.tdl

:begin :instance.

match_v3 := mv_empty_prep_intrans_le &
  [ STEM < "match" >,
    SYNSEM.LOCAL.CONT [ KEY _match_with_rel,
			COMPKEY _with_rel ] ].

:end :instance.


; <<>>
; >> material.n.1.vm.tdl
; material.n.1.vm.tdl

:begin :instance.

material_n1 := massn_le &
  [ STEM < "material" >,
    SYNSEM.LOCAL.CONT.KEY _material_rel ].

:end :instance.


; <<>>
; >> matter.n.1.vm.tdl
; matter.n.1.vm.tdl

:begin :instance.

matter_n1 := intr_noun_word_le &
  [ STEM < "matter" >,
    SYNSEM.LOCAL.CONT.KEY _matter_n_rel ].

:end :instance.


; <<>>
; >> matter.v.1.vm.tdl
; matter.v.1.vm.tdl

:begin :instance.

matter_v1 := mv_unerg_le &
  [ STEM < "matter" >,
    SYNSEM.LOCAL.CONT.KEY _matter_rel ].

:end :instance.


; <<>>
; >> mattress.n.1.vm.tdl
; mattress.n.1.vm.tdl

:begin :instance.

mattress_n1 := intr_noun_word_le &
  [ STEM < "mattress" >,
    SYNSEM.LOCAL.CONT.KEY _mattress_rel ].

:end :instance.


; <<>>
; >> maxim.n.1.vm.tdl
; maxim.n.1.vm.tdl

:begin :instance.

Maxim_n1 := proper_le &
  [ STEM < "maxim" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'Maxim ].

:end :instance.


; <<>>
; >> maximally.a.1.vm.tdl
; maximally.a.1.vm.tdl

:begin :instance.

maximally_adv1 := vp_adv_post_word_le &
  [ STEM < "maximally" >,
    SYNSEM.LOCAL.CONT.KEY _maximally_rel ].

:end :instance.


; <<>>
; >> maximum.a.1.vm.tdl
; maximum.a.1.vm.tdl

:begin :instance.

maximum_adv1 := np_adv_word_le &
  [ STEM < "maximum" >,
    SYNSEM.LOCAL.CONT [ KEY _maximum_adv_rel,
			MODCONT.KEY _at_rel ] ].

:end :instance.


; <<>>
; >> maximum.a.2.vm.tdl
; maximum.a.2.vm.tdl

:begin :instance.

maximum_a1 := intrans_adj_le &
  [ STEM < "maximum" >,
    SYNSEM.LOCAL.CONT.KEY _maximum_rel ].

:end :instance.


; <<>>
; >> may.n.1.tdl
; may.n.1.tdl

:begin :instance.

may := month_word_le &
  [ STEM < "may" >,
    SYNSEM.LOCAL.CONT.KEY.MONTH 'may ].

:end :instance.


; <<>>
; >> may.n.2.tdl
; may.n.2.tdl

:begin :instance.

may_2 := month_year_word_le &
  [ STEM < "may" >,
    SYNSEM.LOCAL.CONT.KEY.MONTH 'may ].

:end :instance.


; <<>>
; >> may.vx.1.tdl
; may.vx.1.tdl

:begin :instance.

may_aux_pos := modal_pos_le & 
  [ STEM < "may" >,
    SYNSEM.LOCAL [ CAT.HEAD.TENSE present*,
                   CONT.KEY _may_rel ] ].

:end :instance.


; <<>>
; >> maybe.a.1.vm.tdl
; maybe.a.1.vm.tdl

:begin :instance.

maybe_adv1 := adv_pre_word_nospec_le &
  [ STEM < "maybe" >,
    SYNSEM.LOCAL.CONT.KEY _maybe_rel ].

:end :instance.


; <<>>
; >> me.n.1.tdl
; me.n.1.tdl

:begin :instance.

me := pers_pro_le &
  [ STEM < "me" >,
    SYNSEM.LOCAL [ CAT.HEAD.CASE acc,
		   CONT.KEY.INST [ PNG.PN 1sg*,
				   PRONTYPE std_1sg ] ] ].
:end :instance.


; <<>>
; >> meal.n.1.vm.tdl
; meal.n.1.vm.tdl

:begin :instance.

meal_n1 := intr_noun_word_le &
  [ STEM < "meal" >,
    SYNSEM.LOCAL.CONT.KEY _meal_rel ].

:end :instance.


; <<>>
; >> mean.a.1.vm.tdl
; mean.a.1.vm.tdl

:begin :instance.

mean_a1 := intrans_adj_le &
  [ STEM < "mean" >,
    SYNSEM.LOCAL.CONT.KEY _mean_adj_rel ].

:end :instance.


; <<>>
; >> mean.v.1.vm.tdl
; mean.v.1.vm.tdl

:begin :instance.

mean_v1 := mv_np_trans_le &
  [ STEM < "mean" >,
    SYNSEM.LOCAL.CONT.KEY _mean_rel ].

:end :instance.


; <<>>
; >> mean.v.2.vm.tdl
; mean.v.2.vm.tdl

:begin :instance.

mean_v2 := mv_cp_non_trans_le &
  [ STEM < "mean" >,
    SYNSEM.LOCAL.CONT.KEY _mean_rel ].

:end :instance.


; <<>>
; >> mean.v.3.vm.tdl
; mean.v.3.vm.tdl

:begin :instance.

mean_v3 := mv_unerg_le &
  [ STEM < "mean" >,
    SYNSEM.LOCAL.CONT.KEY _mean_rel ].

:end :instance.


; <<>>
; >> mean.v.4.vm.tdl
; mean.v.4.vm.tdl

:begin :instance.

mean_v4 := mv_subj_equi_le &
  [ STEM < "mean" >,
    SYNSEM.LOCAL.CONT.KEY _mean2_rel ].

:end :instance.


; <<>>
; >> mean.v.5.vm.tdl
; mean.v.5.vm.tdl

:begin :instance.

mean_v5 := mv_sor_non_trans_le &
  [ STEM < "mean" >,
    SYNSEM.LOCAL.CONT.KEY _mean2_rel ].

:end :instance.


; <<>>
; >> means.n.1.vm.tdl
; means.n.1.vm.tdl

:begin :instance.

means_n1 := intr_noun_word_le &
  [ STEM < "means" >,
    SYNSEM.LOCAL.CONT.KEY _means_rel ].

:end :instance.


; <<>>
; >> meantime.n.1.vm.tdl
; meantime.n.1.vm.tdl

:begin :instance.

meantime_n1 := intr_noun_word_le &
  [ STEM < "meantime" >,
    SYNSEM.LOCAL.CONT.KEY _meantime_rel ].

:end :instance.


; <<>>
; >> meanwhile.a.1.vm.tdl
; meanwhile.a.1.vm.tdl

:begin :instance.

meanwhile_adv1 := vp_adv_post_word_le &
  [ STEM < "meanwhile" >,
    SYNSEM.LOCAL.CONT.KEY _meanwhile_rel ].

:end :instance.


; <<>>
; >> medium.n.1.vm.tdl
; medium.n.1.vm.tdl

:begin :instance.

medium_n1 := intr_noun_word_le &
  [ STEM < "medium" >,
    SYNSEM.LOCAL.CONT.KEY _medium_rel ].

:end :instance.


; <<>>
; >> meet.v.1.vm.tdl
; meet.v.1.vm.tdl

:begin :instance.

meet_v1 := mv_unerg_le &
  [ STEM < "meet" >,
    SYNSEM.LOCAL.CONT.KEY _meet_rel ].

:end :instance.


; <<>>
; >> meet.v.2.vm.tdl
; meet.v.2.vm.tdl

:begin :instance.

meet_v2 := mv_np_trans_le &
  [ STEM < "meet" >,
    SYNSEM.LOCAL.CONT.KEY _meet_someone_rel ].

:end :instance.


; <<>>
; >> meldau.n.1.vm.tdl
; meldau.n.1.vm.tdl

:begin :instance.

Meldau_n1 := proper_le &
  [ STEM < "meldau" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'Meldau ].

:end :instance.


; <<>>
; >> member.n.1.vm.tdl
; member.n.1.vm.tdl

:begin :instance.

member_n1 := noun_ppof_word_le &
  [ STEM < "member" >,
    SYNSEM.LOCAL.CONT.KEY _member_rel ].

:end :instance.


; <<>>
; >> memorial.day.n.1.tdl
; memorial.day.n.1.tdl

:begin :instance.

memorial_day := holiday_word_mle1 &
  [ STEM < "memorial", "day" >,
    SYNSEM.LOCAL.CONT.KEY.DAY 'memorial_day ].

:end :instance.


; <<>>
; >> memory.n.1.vm.tdl
; memory.n.1.vm.tdl

:begin :instance.

memory_n1 := noun_ppof_word_le &
  [ STEM < "memory" >,
    SYNSEM.LOCAL.CONT.KEY _memory_rel ].

:end :instance.


; <<>>
; >> mensa.n.1.vm.tdl
; mensa.n.1.vm.tdl

:begin :instance.

mensa_n1 := intr_noun_word_le &
  [ STEM < "mensa" >,
    SYNSEM.LOCAL.CONT.KEY _mensa_rel ].

:end :instance.


; <<>>
; >> mention.v.1.vm.tdl
; mention.v.1.vm.tdl

:begin :instance.

mention_v1 := mv_np_trans_le &
  [ STEM < "mention" >,
    SYNSEM.LOCAL.CONT.KEY _mention_rel ].

:end :instance.


; <<>>
; >> mention.v.2.vm.tdl
; mention.v.2.vm.tdl

:begin :instance.

mention_v2 := mv_cp_non_trans_le &
  [ STEM < "mention" >,
    SYNSEM.LOCAL.CONT.KEY _mention_rel ].

:end :instance.


; <<>>
; >> menu.n.1.vm.tdl
; menu.n.1.vm.tdl

:begin :instance.

menu_n1 := intr_noun_word_le &
  [ STEM < "menu" >,
    SYNSEM.LOCAL.CONT.KEY _menu_rel ].

:end :instance.


; <<>>
; >> mercedes.n.1.vm.tdl
; mercedes.n.1.vm.tdl

:begin :instance.

Mercedes_n1 := proper_le &
  [ STEM < "mercedes" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'Mercedes ].

:end :instance.


; <<>>
; >> merely.a.1.vm.tdl
; merely.a.1.vm.tdl

:begin :instance.

merely_adv1 := adv_pre_word_le &
  [ STEM < "merely" >,
    SYNSEM.LOCAL.CONT.KEY _merely_rel ].

:end :instance.


; <<>>
; >> merry.a.1.vm.tdl
; merry.a.1.vm.tdl

:begin :instance.

merry_a1 := intrans_adj_le &
  [ STEM < "merry" >,
    SYNSEM.LOCAL.CONT.KEY _merry_rel ].

:end :instance.


; <<>>
; >> metaphysical.a.1.vm.tdl
; metaphysical.a.1.vm.tdl

:begin :instance.

metaphysical_a1 := intrans_adj_le &
  [ STEM < "metaphysical" >,
    SYNSEM.LOCAL.CONT.KEY _metaphysical_rel ].

:end :instance.


; <<>>
; >> metaphysically.a.1.vm.tdl
; metaphysically.a.1.vm.tdl

:begin :instance.

metaphysically := adv_word_le &
  [ STEM < "metaphysically" >,
    SYNSEM.LOCAL.CONT.KEY _metaphysically_rel ].

:end :instance.


; <<>>
; >> microsoft.n.1.vm.tdl
; microsoft.n.1.vm.tdl

:begin :instance.

Microsoft_n1 := proper_le &
  [ STEM < "microsoft" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'Microsoft ].

:end :instance.


; <<>>
; >> midday.n.1.tdl
; midday.n.1.tdl

:begin :instance.

midday := hour_word_le &
  [ STEM < "midday" >,
    SYNSEM.LOCAL.CONT.KEY.HOUR 12 ].

:end :instance.


; <<>>
; >> middle.a.1.vm.tdl
; middle.a.1.vm.tdl

:begin :instance.

middle_a1 := intrans_adj_le &
  [ STEM < "middle" >,
    SYNSEM.LOCAL.CONT.KEY _middle_adj_rel ].

:end :instance.


; <<>>
; >> middle.n.1.vm.tdl
; middle.n.1.vm.tdl

:begin :instance.

middle_n1 := noun_ppof_word_le &
  [ STEM < "middle" >,
    SYNSEM.LOCAL.CONT.KEY _middle_rel ].

:end :instance.


; <<>>
; >> midnight.n.1.tdl
; midnight.n.1.tdl

:begin :instance.

midnight := hour_word_le &
  [ STEM < "midnight" >,
    SYNSEM.LOCAL.CONT.KEY.HOUR 0 ].

:end :instance.


; <<>>
; >> midst.n.1.vm.tdl
; midst.n.1.vm.tdl

:begin :instance.

midst_n1 := noun_ppof_word_le &
  [ STEM < "midst" >,
    SYNSEM.LOCAL.CONT.KEY _midst_rel ].

:end :instance.


; <<>>
; >> might.vx.1.tdl
; might.vx.1.tdl

:begin :instance.

might_aux_pos := modal_pos_le & 
  [ STEM < "might" >,
    SYNSEM.LOCAL [ CAT.HEAD [ TENSE present*,
                              MOOD modal_subj* ],
                   CONT.KEY _might_rel ] ].

:end :instance.


; <<>>
; >> mightnt.vx.1.tdl
; mightnt.vx.1.tdl

:begin :instance.

might_aux_neg := modal_neg_mle1 &
  [ STEM < "mightn", "t" >,
    SYNSEM.LOCAL [ CAT.HEAD [ TENSE present*,
                              MOOD modal_subj* ],
                   CONT.KEY _might_rel ] ].

:end :instance.


; <<>>
; >> million.c.1.vm.tdl
; million.c.1.vm.tdl

:begin :instance.

million := bare_specified_card_le & 
    [ STEM < "million" >,
      SYNSEM.LOCAL [ CAT [HEAD intadj9,
			  VALENCE.SPR.LOCAL.CAT.HEAD intadj6],
		     CONT.--STEMLISZT.LIST < [ CONST_VALUE 1000000 ], [] > ] ].

:end :instance.


; <<>>
; >> mind.v.1.vm.tdl
; mind.v.1.vm.tdl

:begin :instance.

mind_v1 := mv_np_trans_le &
  [ STEM < "mind" >,
    SYNSEM.LOCAL.CONT.KEY _mind_rel ].

:end :instance.


; <<>>
; >> mind.v.2.vm.tdl
; mind.v.2.vm.tdl

:begin :instance.

mind_v2 := mv_cp_non_trans_le &
  [ STEM < "mind" >,
    SYNSEM.LOCAL.CONT.KEY _mind_rel ].

:end :instance.


; <<>>
; >> mind.v.3.vm.tdl
; mind.v.3.vm.tdl

:begin :instance.

mind_v3 := mv_unerg_le &
  [ STEM < "mind" >,
    SYNSEM.LOCAL.CONT.KEY _mind_rel ].

:end :instance.


; <<>>
; >> mine.n.1.tdl
; mine.n.1.tdl

:begin :instance.

mine := poss_pro_le &
  [ STEM < "mine" >,
    SYNSEM.LOCAL.CONT.LISZT.LIST.FIRST.INST.PNG.PN 1sg* ].

:end :instance.


; <<>>
; >> ministry.n.1.vm.tdl
; ministry.n.1.vm.tdl

:begin :instance.

ministry_n1 := noun_ppof_word_le &
  [ STEM < "ministry" >,
    SYNSEM.LOCAL.CONT.KEY _ministry_rel ].

:end :instance.


; <<>>
; >> minor.a.1.vm.tdl
; minor.a.1.vm.tdl

:begin :instance.

minor_a1 := intrans_adj_le &
  [ STEM < "minor" >,
    SYNSEM.LOCAL.CONT.KEY _minor_rel ].

:end :instance.


; <<>>
; >> minute.n.1.vm.tdl
; minute.n.1.vm.tdl

:begin :instance.

minute_n1 := intr_temp_noun_le &
  [ STEM < "minute" >,
    SYNSEM.LOCAL.CONT.KEY _minute_rel ].

:end :instance.


; <<>>
; >> minute.n.2.vm.tdl
; minute.n.2.vm.tdl

:begin :instance.

minute_n2 := intr_temp_noun_nomod_le &
  [ STEM < "minute" >,
    SYNSEM.LOCAL.CONT.KEY _minute_rel ].

:end :instance.


; <<>>
; >> miraculous.a.1.vm.tdl
; miraculous.a.1.vm.tdl

:begin :instance.

miraculous_a1 := intrans_adj_le &
  [ STEM < "miraculous" >,
    SYNSEM.LOCAL.CONT.KEY _miraculous_rel ].

:end :instance.


; <<>>
; >> misery.n.1.vm.tdl
; misery.n.1.vm.tdl

:begin :instance.

misery_n1 := massn_le &
  [ STEM < "misery" >,
    SYNSEM.LOCAL.CONT.KEY _misery_rel ].

:end :instance.


; <<>>
; >> misplace.v.1.vm.tdl
; misplace.v.1.vm.tdl

:begin :instance.

misplace_v1 := mv_np_trans_le &
  [ STEM < "misplace" >,
    SYNSEM.LOCAL.CONT.KEY _misplace_rel ].

:end :instance.


; <<>>
; >> miss.n.1.tdl
; miss.n.1.tdl

:begin :instance.

miss_title := title_le &
  [ STEM < "miss" >,
    SYNSEM.LOCAL.CONT.KEY _miss_ttl_rel ].

:end :instance.


; <<>>
; >> miss.out.v.1.tdl
; miss.out.v.1.tdl

:begin :instance.

miss_out_v1 := mv_particle_np_le &
  [ STEM < "miss" >,
    SYNSEM.LOCAL.CONT [ KEY _miss_out_rel,
			COMPKEY _out_rel ] ].

:end :instance.


; <<>>
; >> miss.v.1.tdl
; miss.v.1.tdl

:begin :instance.

miss_v1 := mv_np_trans_le &
  [ STEM < "miss" >,
    SYNSEM.LOCAL.CONT.KEY _miss_rel ].

:end :instance.


; <<>>
; >> missing.a.1.vm.tdl
; missing.a.1.vm.tdl

:begin :instance.

missing_a1 := intrans_adj_le &
  [ STEM < "missing" >,
    SYNSEM.LOCAL.CONT.KEY _missing_rel ].

:end :instance.


; <<>>
; >> missus.n.1.tdl
; missus.n.1.tdl

:begin :instance.

missus := title_le &
  [ STEM < "Missus" >,
    SYNSEM.LOCAL.CONT.KEY _missus_rel ].

:end :instance.


; <<>>
; >> mistake.n.1.vm.tdl
; mistake.n.1.vm.tdl

:begin :instance.

mistake_n1 := intr_noun_word_le &
  [ STEM < "mistake" >,
    SYNSEM.LOCAL.CONT.KEY _mistake_rel ].

:end :instance.


; <<>>
; >> mistaken.a.1.vm.tdl
; mistaken.a.1.vm.tdl

:begin :instance.

mistaken_a1 := intrans_adj_le &
  [ STEM < "mistaken" >,
    SYNSEM.LOCAL.CONT.KEY _mistaken_rel ].

:end :instance.


; <<>>
; >> mister.n.1.tdl
; mister.n.1.tdl

:begin :instance.

mister := title_le &
  [ STEM < "Mister" >,
    SYNSEM.LOCAL.CONT.KEY _mister_rel ].

:end :instance.


; <<>>
; >> misunderstand.v.1.vm.tdl
; misunderstand.v.1.vm.tdl

:begin :instance.

misunderstand_v1 := mv_np*_trans_le &
  [ STEM < "misunderstand" >,
    SYNSEM.LOCAL.CONT.KEY _misunderstand_rel ].

:end :instance.


; <<>>
; >> misunderstanding.n.1.vm.tdl
; misunderstanding.n.1.vm.tdl

:begin :instance.

misunderstanding_n1 := deverbal_noun_intr_word_le &
  [ STEM < "misunderstanding" >,
    SYNSEM.LOCAL.CONT.ALTKEY _misunderstand_rel ].

:end :instance.


; <<>>
; >> mode.n.1.vm.tdl
; mode.n.1.vm.tdl

:begin :instance.

mode_n1 := intr_noun_word_le &
  [ STEM < "mode" >,
    SYNSEM.LOCAL.CONT.KEY _mode_rel ].

:end :instance.


; <<>>
; >> modify.v.1.vm.tdl
; modify.v.1.vm.tdl

:begin :instance.

modify_v1 := mv_np_trans_le &
  [ STEM < "modify" >,
    SYNSEM.LOCAL.CONT.KEY _modify_rel ].

:end :instance.


; <<>>
; >> moecki.n.1.vm.tdl
; moecki.n.1.vm.tdl

:begin :instance.

Moecki_n1 := proper_le &
  [ STEM < "moecki" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'Moecki ].

:end :instance.


; <<>>
; >> moment.n.1.vm.tdl
; moment.n.1.vm.tdl

:begin :instance.

moment_n1 := intr_temp_noun_le &
  [ STEM < "moment" >,
    SYNSEM.LOCAL.CONT.KEY _moment_rel ].

:end :instance.


; <<>>
; >> moment.n.2.vm.tdl
; moment.n.2.vm.tdl

:begin :instance.

moment_n2 := intr_temp_noun_nomod_le &
  [ STEM < "moment" >,
    SYNSEM.LOCAL.CONT.KEY _moment_rel ].

:end :instance.


; <<>>
; >> monaco.n.1.vm.tdl
; monaco.n.1.vm.tdl

:begin :instance.

Monaco_n1 := proper_le &
  [ STEM < "monaco" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'Monaco ].

:end :instance.


; <<>>
; >> monday.n.1.tdl
; monday.n.1.tdl

:begin :instance.

monday1 := day_of_week_le &
  [ STEM < "monday" >,
    SYNSEM.LOCAL.CONT.KEY.DAY 'mon ].

:end :instance.


; <<>>
; >> monday.n.2.tdl
; monday.n.2.tdl

:begin :instance.

monday_cn := intr_temp_noun_le &
  [ STEM < "monday" >,
    SYNSEM.LOCAL.CONT.KEY dofw_rel & [ DAY 'monday ] ].

:end :instance.


; <<>>
; >> money.n.1.tdl
; money.n.1.tdl

:begin :instance.

money_n1 := massn_le &
  [ STEM < "money" >,
    SYNSEM.LOCAL.CONT.KEY _money_rel ].

:end :instance.


; <<>>
; >> month.n.1.vm.tdl
; month.n.1.vm.tdl

:begin :instance.

month_n1 := temp_noun_ppcomp_word_le &
  [ STEM < "month" >,
    SYNSEM.LOCAL.CONT.KEY _month_rel ].

:end :instance.


; <<>>
; >> month.n.2.vm.tdl
; month.n.2.vm.tdl

:begin :instance.

month_n2 := temp_noun_ppcomp_nomod_word_le &
  [ STEM < "month" >,
    SYNSEM.LOCAL.CONT.KEY _month_rel ].

:end :instance.


; <<>>
; >> monthly.a.1.vm.tdl
; monthly.a.1.vm.tdl

:begin :instance.

monthly_adv1 := vp_adv_post_word_le &
  [ STEM < "monthly" >,
    SYNSEM.LOCAL.CONT.KEY _monthly_adv_rel ].

:end :instance.


; <<>>
; >> monthly.a.2.vm.tdl
; monthly.a.2.vm.tdl

:begin :instance.

monthly_a1 := intrans_adj_le &
  [ STEM < "monthly" >,
    SYNSEM.LOCAL.CONT.KEY _monthly_rel ].

:end :instance.


; <<>>
; >> mood.n.1.tdl
; mood.n.1.tdl

:begin :instance.

mood_n1 := intr_noun_word_le &
  [ STEM < "mood" >,
    SYNSEM.LOCAL.CONT.KEY _mood_rel ].

:end :instance.


; <<>>
; >> more.c.1.tdl
; more.c.1.tdl

:begin :instance.

more := pdet_pl_mass_le &
  [ STEM < "more" >,
    SYNSEM.LOCAL.CONT.KEY _more_q_rel ].

:end :instance.


; <<>>
; >> more.a.1.tdl
; more.a.1.tdl

:begin :instance.

more_a1 := comparison_spec_le &
  [ STEM < "more" >,
    SYNSEM.LOCAL.CONT.KEY more_sc_adv_rel ].

:end :instance.


; <<>>
; >> more.or.less.a.1.vm.tdl
; more.or.less.a.1.vm.tdl
; MULTIKEY < "less" >

:begin :instance.

more_or_less_adv1 := vp_adv_post_word_3mle3 &
  [ STEM < "more", "or", "less" >,
    SYNSEM.LOCAL.CONT.KEY _more_or_less_rel ].

:end :instance.


; <<>>
; >> more.than.a.1.tdl
; more.than.a.1.tdl

:begin :instance.

more_than := degree_spec_mle1 &
  [ STEM < "more", "than" >,
    SYNSEM.LOCAL.CONT.KEY _more_than_rel ].

:end :instance.


; <<>>
; >> moreover.c.1.vm.tdl
; moreover.c.1.vm.tdl

:begin :instance.

moreover_root := disc_adv_le &
  [ STEM < "moreover" >,
    SYNSEM.LOCAL.CONT.KEY.EXCL 'moreover ].

:end :instance.


; <<>>
; >> morning.sg.n.1.vm.tdl
; morning.sg.n.1.vm.tdl

:begin :instance.

morning_sg_n1 := day_part_word_le &
  [ STEM < "morning" >,
    SYNSEM.LOCAL.CONT.KEY _morning_rel & [ INST.PNG [ PN 3sg*,
						      GEN neut* ] ] ].

:end :instance.


; <<>>
; >> morning.pl.n.1.vm.tdl
; morning.pl.n.1.vm.tdl

:begin :instance.

morning_pl_n1 := day_part_word_le &
  [ STEM < "mornings" >,
    SYNSEM.LOCAL.CONT.KEY _morning_rel & [ INST.PNG.PN 3pl* ] ].

:end :instance.


; <<>>
; >> most.c.1.tdl
; most.c.1.tdl

:begin :instance.

most := pdet_pl_mass_le &
  [ STEM < "most" >,
    SYNSEM.LOCAL.CONT.KEY _most_rel ].

:end :instance.


; <<>>
; >> most.a.1.tdl
; most.a.1.tdl

:begin :instance.

most_a1 := comparison_spec_le &
  [ STEM < "most" >,
    SYNSEM.LOCAL.CONT.KEY comp_most_rel].

:end :instance.


; <<>>
; >> mostly.a.1.vm.tdl
; mostly.a.1.vm.tdl

:begin :instance.

mostly_adv1 := vp_adv_post_word_le &
  [ STEM < "mostly" >,
    SYNSEM.LOCAL.CONT.KEY _mostly_rel ].

:end :instance.


; <<>>
; >> mother.n.1.vm.tdl
; mother.n.1.vm.tdl

:begin :instance.

mother_n1 := intr_noun_word_le &
  [ STEM < "mother" >,
    SYNSEM.LOCAL.CONT.KEY _mother_rel ].

:end :instance.


; <<>>
; >> mothers.day.n.1.tdl
; mothers.day.n.1.tdl

:begin :instance.

mothers_day := holiday_word_3mle1 &
  [ STEM < "mother", "s", "day" >,
    SYNSEM.LOCAL.CONT.KEY.DAY 'mothers_day ].

:end :instance.


; <<>>
; >> motivated.a.1.vm.tdl
; motivated.a.1.vm.tdl

:begin :instance.

motivated_a1 := intrans_adj_le &
  [ STEM < "motivated" >,
    SYNSEM.LOCAL.CONT.KEY _motivated_rel ].

:end :instance.


; <<>>
; >> motive.n.1.vm.tdl
; motive.n.1.vm.tdl

:begin :instance.

motive_n1 := intr_noun_word_le &
  [ STEM < "motive" >,
    SYNSEM.LOCAL.CONT.KEY _motive_rel ].

:end :instance.


; <<>>
; >> motor.n.1.vm.tdl
; motor.n.1.vm.tdl

:begin :instance.

motor_n1 := intr_noun_word_le &
  [ STEM < "motor" >,
    SYNSEM.LOCAL.CONT.KEY _motor_rel ].

:end :instance.


; <<>>
; >> motto.n.1.vm.tdl
; motto.n.1.vm.tdl

:begin :instance.

motto_n1 := intr_noun_word_le &
  [ STEM < "motto" >,
    SYNSEM.LOCAL.CONT.KEY _motto_rel ].

:end :instance.


; <<>>
; >> mount.v.1.vm.tdl
; mount.v.1.vm.tdl

:begin :instance.

mount_v1 := mv_np_trans_le &
  [ STEM < "mount" >,
    SYNSEM.LOCAL.CONT.KEY _mount_rel ].

:end :instance.


; <<>>
; >> mountain.n.1.vm.tdl
; mountain.n.1.vm.tdl

:begin :instance.

mountain_n1 := intr_noun_word_le &
  [ STEM < "mountain" >,
    SYNSEM.LOCAL.CONT.KEY _mountain_rel ].

:end :instance.


; <<>>
; >> move.v.1.vm.tdl
; move.v.1.vm.tdl

:begin :instance.

move_v1 := mv_unacc_le &
  [ STEM < "move" >,
    SYNSEM.LOCAL.CONT.KEY _move_und_rel ].

:end :instance.


; <<>>
; >> move.v.2.vm.tdl
; move.v.2.vm.tdl

:begin :instance.

move_v2 := mv_prep_trans_le &
  [ STEM < "move" >,
    SYNSEM.LOCAL.CONT [ KEY _move_to_rel,
			OCOMPKEY dir_rel ] ].

:end :instance.


; <<>>
; >> move.v.3.tdl
; move.v.3.tdl

:begin :instance.

move_v3 := mv_np_trans_le &
  [ STEM < "move" >,
    SYNSEM.LOCAL.CONT.KEY _move_rel ].

:end :instance.


; <<>>
; >> mr.n.1.tdl
; mr.n.1.tdl

:begin :instance.

mr_title := title_le &
  [ STEM < "mr" >,
    SYNSEM.LOCAL.CONT.KEY _mister_rel ].

:end :instance.


; <<>>
; >> mrs.n.1.tdl
; mrs.n.1.tdl

:begin :instance.

mrs_title := title_le &
  [ STEM < "mrs" >,
    SYNSEM.LOCAL.CONT.KEY _missus_rel ].

:end :instance.


; <<>>
; >> ms.n.1.tdl
; ms.n.1.tdl

:begin :instance.

ms_title := title_le &
  [ STEM < "Ms" >,
    SYNSEM.LOCAL.CONT.KEY _ms_rel ].

:end :instance.


; <<>>
; >> much.a.1.tdl
; much.a.1.tdl

:begin :instance.

much := degree_spec_le &
  [ STEM < "much" >,
    SYNSEM.LOCAL.CONT.KEY _much_rel ].

:end :instance.


; <<>>
; >> much.c.1.tdl
; much.c.1.tdl

:begin :instance.

much_det := pdet_ms_le &
  [ STEM < "much" >,
    SYNSEM.LOCAL.CONT.KEY _much_q_rel ].

:end :instance.


; <<>>
; >> mueller.n.1.vm.tdl
; mueller.n.1.vm.tdl

:begin :instance.

Mueller_n1 := proper_le &
  [ STEM < "mueller" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'Mueller ].

:end :instance.


; <<>>
; >> muenster.n.1.vm.tdl
; muenster.n.1.vm.tdl

:begin :instance.

Muenster_n1 := proper_le &
  [ STEM < "muenster" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'Muenster ].

:end :instance.


; <<>>
; >> mug.n.1.vm.tdl
; mug.n.1.vm.tdl

:begin :instance.

mug_n1 := intr_noun_word_le &
  [ STEM < "mug" >,
    SYNSEM.LOCAL.CONT.KEY _mug_rel ].

:end :instance.


; <<>>
; >> munich.n.1.vm.tdl
; munich.n.1.vm.tdl

:begin :instance.

Munich_n1 := proper_le &
  [ STEM < "munich" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'Munich ].

:end :instance.


; <<>>
; >> must.vx.1.tdl
; must.vx.1.tdl

:begin :instance.

must_aux_pos := modal_pos_le & 
  [ STEM < "must" >,
    SYNSEM.LOCAL [ CAT.HEAD.TENSE present*,
                   CONT.KEY _must_rel ] ].

:end :instance.


; <<>>
; >> mustnt.vx.1.tdl
; mustnt.vx.1.tdl

:begin :instance.

must_aux_neg := modal_neg_mle1 &
  [ STEM < "mustn", "t" >,
    SYNSEM.LOCAL [ CAT.HEAD.TENSE present*,
                   CONT.KEY _must_rel ] ].

:end :instance.


; <<>>
; >> mutual.a.1.vm.tdl
; mutual.a.1.vm.tdl

:begin :instance.

mutual_a1 := intrans_adj_le &
  [ STEM < "mutual" >,
    SYNSEM.LOCAL.CONT.KEY _mutual_rel ].

:end :instance.


; <<>>
; >> my.n.1.tdl
; my.n.1.tdl

:begin :instance.

my := poss_le &
  [ STEM < "my" >,
    SYNSEM.LOCAL.CONT.ALTKEY.INST [ PNG.PN 1sg*,
				    PRONTYPE std_1sg ] ].
:end :instance.


; <<>>
; >> myself.n.1.tdl
; myself.n.1.tdl

:begin :instance.

myself := refl_pro_le &
  [ STEM < "myself" >,
    SYNSEM.LOCAL.CONT.KEY.INST.PNG.PN 1sg* ].

:end :instance.


; <<>>
; >> name.n.1.vm.tdl
; name.n.1.vm.tdl

:begin :instance.

name_n1 := intr_noun_word_le &
  [ STEM < "name" >,
    SYNSEM.LOCAL.CONT.KEY _name_rel ].

:end :instance.


; <<>>
; >> name.v.1.vm.tdl
; name.v.1.vm.tdl

:begin :instance.

name_v1 := mv_np_trans_le &
  [ STEM < "name" >,
    SYNSEM.LOCAL.CONT.KEY _name_v_rel ].

:end :instance.


; <<>>
; >> namely.a.1.vm.tdl
; namely.a.1.vm.tdl

:begin :instance.

namely_adv1 := adv_post_word_le &
  [ STEM < "namely" >,
    SYNSEM.LOCAL.CONT.KEY _namely_rel ].

:end :instance.


; <<>>
; >> narrow.a.1.vm.tdl
; narrow.a.1.vm.tdl

:begin :instance.

narrow_a1 := intrans_adj_le &
  [ STEM < "narrow" >,
    SYNSEM.LOCAL.CONT.KEY _narrow_rel ].

:end :instance.


; <<>>
; >> nasty.a.1.vm.tdl
; nasty.a.1.vm.tdl

:begin :instance.

nasty_a1 := intrans_adj_le &
  [ STEM < "nasty" >,
    SYNSEM.LOCAL.CONT.KEY _nasty_rel ].

:end :instance.


; <<>>
; >> national.a.1.vm.tdl
; national.a.1.vm.tdl

:begin :instance.

national_a1 := intrans_adj_le &
  [ STEM < "national" >,
    SYNSEM.LOCAL.CONT.KEY _national_rel ].

:end :instance.


; <<>>
; >> natural.a.1.vm.tdl
; natural.a.1.vm.tdl

:begin :instance.

natural_a1 := intrans_adj_le &
  [ STEM < "natural" >,
    SYNSEM.LOCAL.CONT.KEY _natural_rel ].

:end :instance.


; <<>>
; >> naturally.a.1.vm.tdl
; naturally.a.1.vm.tdl

:begin :instance.

naturally_adv1 := adv_pre_word_le &
  [ STEM < "naturally" >,
    SYNSEM.LOCAL.CONT.KEY _naturally_rel ].

:end :instance.


; <<>>
; >> near.a.1.vm.tdl
; near.a.1.vm.tdl

:begin :instance.

near_a1 := trans_adj_le &
  [ STEM < "near" >,
    SYNSEM.LOCAL.CONT [ KEY _near_rel,
			COMPKEY _to_rel ] ].

:end :instance.


; <<>>
; >> near.p.1.tdl
; near.p.1.tdl

:begin :instance.

near := reg_prep_le &
  [ STEM < "near" >,
    SYNSEM.LOCAL.CONT.KEY _near_p_rel ].

:end :instance.


; <<>>
; >> nearby.a.1.vm.tdl
; nearby.a.1.vm.tdl

:begin :instance.

nearby_adv1 := np_adv_word_le &
  [ STEM < "nearby" >,
    SYNSEM.LOCAL.CONT.KEY _nearby_rel ].

:end :instance.


; <<>>
; >> nearby.a.2.vm.tdl
; nearby.a.2.vm.tdl

:begin :instance.

nearby_a1 := intrans_adj_le &
  [ STEM < "nearby" >,
    SYNSEM.LOCAL.CONT.KEY _nearby_adj_rel ].

:end :instance.


; <<>>
; >> nearly.a.1.vm.tdl
; nearly.a.1.vm.tdl

:begin :instance.

nearly_adv1 := adv_pre_word_le &
  [ STEM < "nearly" >,
    SYNSEM.LOCAL.CONT.KEY _nearly_rel ].

:end :instance.


; <<>>
; >> nearly.c.1.vm.tdl
; nearly.c.1.vm.tdl

:begin :instance.

nearly_deg := degree_spec_le &
  [ STEM < "nearly" >,
    SYNSEM.LOCAL.CONT.KEY _nearly_deg_rel ].

:end :instance.


; <<>>
; >> necessarily.a.1.vm.tdl
; necessarily.a.1.vm.tdl

:begin :instance.

necessarily := adv_word_le &
  [ STEM < "necessarily" >,
    SYNSEM.LOCAL.CONT.KEY _necessarily_rel ].

:end :instance.


; <<>>
; >> necessary.a.1.vm.tdl
; necessary.a.1.vm.tdl

:begin :instance.

necessary_a1 := intrans_adj_le &
  [ STEM < "necessary" >,
    SYNSEM.LOCAL.CONT.KEY _necessary_rel ].

:end :instance.


; <<>>
; >> necessity.n.1.vm.tdl
; necessity.n.1.vm.tdl

:begin :instance.

necessity_n1 := massn_le &
  [ STEM < "necessity" >,
    SYNSEM.LOCAL.CONT.KEY _necessity_rel ].

:end :instance.


; <<>>
; >> need.v.1.tdl
; need.v.1.tdl

:begin :instance.

need_v1 := mv_np_trans_le &
  [ STEM < "need" >,
    SYNSEM.LOCAL.CONT.KEY _need_rel ].

:end :instance.


; <<>>
; >> need.v.2.tdl
; need.v.2.tdl

:begin :instance.

need_v2 := mv_subj_equi_le &
  [ STEM < "need" >,
    SYNSEM.LOCAL.CONT.KEY _need2_rel ].

:end :instance.


; <<>>
; >> need.v.3.tdl
; need.v.3.tdl

:begin :instance.

need_v3 := mv_sor_non_trans_le &
  [ STEM < "need" >,
    SYNSEM.LOCAL.CONT.KEY _need2_rel ].

:end :instance.


; <<>>
; >> need.vx.1.tdl
; need.vx.1.tdl

:begin :instance.

need_aux_pos := modal_pos_le & 
  [ STEM < "need" >,
    SYNSEM.LOCAL [ CAT.HEAD.TENSE present*,
                   CONT.KEY _need_aux_rel ] ].

:end :instance.


; <<>>
; >> neednt.vx.1.tdl
; neednt.vx.1.tdl

:begin :instance.

need_aux_neg := modal_neg_mle1 &
  [ STEM < "needn", "t" >,
    SYNSEM.LOCAL [ CAT.HEAD.TENSE present*,
                   CONT.KEY _need_aux_rel ] ].

:end :instance.


; <<>>
; >> negotiate.v.1.vm.tdl
; negotiate.v.1.vm.tdl

:begin :instance.

negotiate_v1 := mv_empty_prep_intrans_le &
  [ STEM < "negotiate" >,
    SYNSEM.LOCAL.CONT [ KEY _negotiate_with_rel,
			COMPKEY _with_rel ] ].

:end :instance.


; <<>>
; >> neither.c.1.tdl
; neither.c.1.tdl

:begin :instance.

neither_conj := coord_a_le &
  [ STEM < "neither" >,
    SYNSEM.LOCAL.CONJ neither ].

:end :instance.


; <<>>
; >> neither.c.2.tdl
; neither.c.2.tdl

:begin :instance.

neither_det := pdet_le &
  [ STEM < "neither" >,
    SYNSEM.LOCAL.CONT.KEY _neither_rel ].

:end :instance.


; <<>>
; >> nelson.n.1.tdl
; nelson.n.1.tdl

:begin :instance.

nelson := proper_le &
  [ STEM < "nelson" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'nelson ].

:end :instance.


; <<>>
; >> network.n.1.vm.tdl
; network.n.1.vm.tdl

:begin :instance.

network_n1 := intr_noun_word_le &
  [ STEM < "network" >,
    SYNSEM.LOCAL.CONT.KEY _network_rel ].

:end :instance.


; <<>>
; >> neuperlach.n.1.vm.tdl
; neuperlach.n.1.vm.tdl

:begin :instance.

Neuperlach_n1 := proper_le &
  [ STEM < "neuperlach" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'Neuperlach ].

:end :instance.


; <<>>
; >> neutral.a.1.vm.tdl
; neutral.a.1.vm.tdl

:begin :instance.

neutral_a1 := intrans_adj_le &
  [ STEM < "neutral" >,
    SYNSEM.LOCAL.CONT.KEY _neutral_rel ].

:end :instance.


; <<>>
; >> neutrally.a.1.vm.tdl
; neutrally.a.1.vm.tdl

:begin :instance.

neutrally := adv_word_le &
  [ STEM < "neutrally" >,
    SYNSEM.LOCAL.CONT.KEY _neutrally_rel ].

:end :instance.


; <<>>
; >> never.a.1.vm.tdl
; never.a.1.vm.tdl

:begin :instance.

never_adv1 := adv_pre_word_le &
  [ STEM < "never" >,
    SYNSEM.LOCAL.CONT.KEY _never_rel ].

:end :instance.


; <<>>
; >> nevertheless.a.1.vm.tdl
; nevertheless.a.1.vm.tdl

:begin :instance.

nevertheless_adv1 := adv_pre_word_le &
  [ STEM < "nevertheless" >,
    SYNSEM.LOCAL.CONT.KEY _nevertheless_rel ].

:end :instance.


; <<>>
; >> new.a.1.vm.tdl
; new.a.1.vm.tdl

:begin :instance.

new_a1 := intrans_adj_le &
  [ STEM < "new" >,
    SYNSEM.LOCAL.CONT.KEY _new_rel ].

:end :instance.


; <<>>
; >> new.years.day.n.1.tdl
; new.years.day.n.1.tdl
; MULTIKEY < "year" >

:begin :instance.

new_years_day := holiday_word_4mle2 &
  [ STEM < "new", "year", "s", "day" >,
    SYNSEM.LOCAL.CONT.KEY.DAY 'new_years_day ].

:end :instance.


; <<>>
; >> new.years.day.n.2.tdl
; new.years.day.n.2.tdl
; MULTIKEY < "years" >

:begin :instance.

new_years_day_2 := holiday_word_3mle2 &
  [ STEM < "new", "years", "day" >,
    SYNSEM.LOCAL.CONT.KEY.DAY 'new_years_day ].

:end :instance.


; <<>>
; >> new.years.eve.n.1.tdl
; new.years.eve.n.1.tdl
; MULTIKEY < "year" >

:begin :instance.

new_years_eve := holiday_word_4mle2 &
  [ STEM < "new", "year", "s", "eve" >,
    SYNSEM.LOCAL.CONT.KEY.DAY 'new_years_eve ].

:end :instance.


; <<>>
; >> new.years.eve.n.2.tdl
; new.years.eve.n.2.tdl
; MULTIKEY < "years" >

:begin :instance.

new_years_eve_2 := holiday_word_3mle2 &
  [ STEM < "new", "years", "eve" >,
    SYNSEM.LOCAL.CONT.KEY.DAY 'new_years_eve ].

:end :instance.


; <<>>
; >> newly.a.1.vm.tdl
; newly.a.1.vm.tdl

:begin :instance.

newly := adv_word_le &
  [ STEM < "newly" >,
    SYNSEM.LOCAL.CONT.KEY _newly_rel ].

:end :instance.


; <<>>
; >> news.n.1.tdl
; news.n.1.tdl

:begin :instance.

news_n1 := massn_le &
  [ STEM < "news" >,
    SYNSEM.LOCAL.CONT.KEY _news_rel ].

:end :instance.


; <<>>
; >> next.a.1.vm.tdl
; next.a.1.vm.tdl

:begin :instance.

next_a1 := intrans_adj_le &
  [ STEM < "next" >,
    SYNSEM.LOCAL.CONT.KEY _next_rel ].

:end :instance.


; <<>>
; >> next.to.p.1.tdl
; next.to.p.1.tdl

:begin :instance.

next_to := prep_mle1 &
  [ STEM < "next", "to" >,
    SYNSEM.LOCAL.CONT.KEY _next_to_rel ].

:end :instance.


; <<>>
; >> nice.a.1.vm.tdl
; nice.a.1.vm.tdl

:begin :instance.

nice_a1 := intrans_adj_le &
  [ STEM < "nice" >,
    SYNSEM.LOCAL.CONT.KEY _nice_rel ].

:end :instance.


; <<>>
; >> nicely.a.1.vm.tdl
; nicely.a.1.vm.tdl

:begin :instance.

nicely_adv1 := vp_adv_post_word_le &
  [ STEM < "nicely" >,
    SYNSEM.LOCAL.CONT.KEY _nicely_rel ].

:end :instance.


; <<>>
; >> nicest.a.1.vm.tdl
; nicest.a.1.vm.tdl

:begin :instance.

nicest_a1 := intrans_adj_le &
  [ STEM < "nicest" >,
    SYNSEM.LOCAL.CONT.KEY _nicest_rel ].

:end :instance.


; <<>>
; >> night.sg.n.1.vm.tdl
; night.sg.n.1.vm.tdl

:begin :instance.

night_sg_n1 := day_part_word_le &
  [ STEM < "night" >,
    SYNSEM.LOCAL.CONT.KEY _night_rel & [ INST.PNG [ PN 3sg*,
						    GEN neut* ] ] ].

:end :instance.


; <<>>
; >> night.pl.n.1.vm.tdl
; night.pl.n.1.vm.tdl

:begin :instance.

night_pl_n1 := day_part_word_le &
  [ STEM < "nights" >,
    SYNSEM.LOCAL.CONT.KEY _night_rel & [ INST.PNG.PN 3pl* ] ].

:end :instance.


; <<>>
; >> nikolaus.n.1.vm.tdl
; nikolaus.n.1.vm.tdl

:begin :instance.

Nikolaus_n1 := proper_le &
  [ STEM < "nikolaus" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'Nikolaus ].

:end :instance.


; <<>>
; >> nine.c.1.tdl
; nine.c.1.tdl

:begin :instance.

nine := bare_unspecified_card_le & 
  [  STEM < "nine" >,
     SYNSEM.LOCAL [ CAT.HEAD intadj1,
		    CONT.--STEMLISZT.LIST < [ CONST_VALUE 9 ], ... > ] ].

:end :instance.


; <<>>
; >> nine.hour.n.1.tdl
; nine.hour.n.1.tdl

:begin :instance.

nine_hour := hour_word_le &
  [ STEM < "nine" >,
    SYNSEM.LOCAL.CONT.KEY.HOUR 9 ].

:end :instance.


; <<>>
; >> nineteen.c.1.tdl
; nineteen.c.1.tdl

:begin :instance.

nineteen := bare_unspecified_card_le & 
  [  STEM < "nineteen" >,
     SYNSEM.LOCAL [ CAT.HEAD intadj1,
		    CONT.--STEMLISZT.LIST < [ CONST_VALUE 19 ], ... > ] ].
:end :instance.


; <<>>
; >> nineteen.eighty-four.n.1.vm.tdl
; nineteen.eighty-four.n.1.vm.tdl

:begin :instance.

nineteen_eightyfour := year_word_3mle1 &
  [ STEM < "nineteen", "eighty", "four" >,
    SYNSEM.LOCAL.CONT.KEY.YEAR 1984 ].

:end :instance.


; <<>>
; >> nineteen.eighty-four.n.2.vm.tdl
; nineteen.eighty-four.n.2.vm.tdl

:begin :instance.

nineteen_eightyfour_2 := year_word_le &
  [ STEM < "1995" >,
    SYNSEM.LOCAL.CONT.KEY.YEAR 1984 ].

:end :instance.


; <<>>
; >> nineteen.ninety-five.n.1.vm.tdl
; nineteen.ninety-five.n.1.vm.tdl

:begin :instance.

nineteen_ninetyfive := year_word_3mle1 &
  [ STEM < "nineteen", "ninety", "five" >,
    SYNSEM.LOCAL.CONT.KEY.YEAR 1995 ].

:end :instance.


; <<>>
; >> nineteen.ninety-five.n.2.vm.tdl
; nineteen.ninety-five.n.2.vm.tdl

:begin :instance.

nineteen_ninetyfive_2 := year_word_le &
  [ STEM < "1995" >,
    SYNSEM.LOCAL.CONT.KEY.YEAR 1995 ].

:end :instance.


; <<>>
; >> nineteen.ninety-four.n.1.vm.tdl
; nineteen.ninety-four.n.1.vm.tdl

:begin :instance.

nineteen_ninetyfour := year_word_3mle1 &
  [ STEM < "nineteen", "ninety", "four" >,
    SYNSEM.LOCAL.CONT.KEY.YEAR 1994 ].

:end :instance.


; <<>>
; >> nineteen.ninety-four.n.2.vm.tdl
; nineteen.ninety-four.n.2.vm.tdl

:begin :instance.

nineteen_ninetyfour_2 := year_word_le &
  [ STEM < "1994" >,
    SYNSEM.LOCAL.CONT.KEY.YEAR 1994 ].

:end :instance.


; <<>>
; >> nineteen.ninety-eight.n.1.vm.tdl
; nineteen.ninety-eight.n.1.vm.tdl

:begin :instance.

nineteen_ninetyeight := year_word_3mle1 &
  [ STEM < "nineteen", "ninety", "eight" >,
    SYNSEM.LOCAL.CONT.KEY.YEAR 1998 ].

:end :instance.


; <<>>
; >> nineteen.ninety-eight.n.2.vm.tdl
; nineteen.ninety-eight.n.2.vm.tdl

:begin :instance.

nineteen_ninetyeight_2 := year_word_le &
  [ STEM < "1998" >,
    SYNSEM.LOCAL.CONT.KEY.YEAR 1998 ].

:end :instance.


; <<>>
; >> nineteen.ninety-nine.n.1.vm.tdl
; nineteen.ninety-nine.n.1.vm.tdl

:begin :instance.

nineteen_ninetynine := year_word_3mle1 &
  [ STEM < "nineteen", "ninety", "nine" >,
    SYNSEM.LOCAL.CONT.KEY.YEAR 1999 ].

:end :instance.


; <<>>
; >> nineteen.ninety-nine.n.2.vm.tdl
; nineteen.ninety-nine.n.2.vm.tdl

:begin :instance.

nineteen_ninetynine_2 := year_word_le &
  [ STEM < "1999" >,
    SYNSEM.LOCAL.CONT.KEY.YEAR 1999 ].

:end :instance.


; <<>>
; >> nineteen.ninety-six.n.1.vm.tdl
; nineteen.ninety-six.n.1.vm.tdl

:begin :instance.

nineteen_ninetysix := year_word_3mle1 &
  [ STEM < "nineteen", "ninety", "six" >,
    SYNSEM.LOCAL.CONT.KEY.YEAR 1996 ].

:end :instance.


; <<>>
; >> nineteen.ninety-six.n.2.vm.tdl
; nineteen.ninety-six.n.2.vm.tdl

:begin :instance.

nineteen_ninetysix_2 := year_word_le &
  [ STEM < "1996" >,
    SYNSEM.LOCAL.CONT.KEY.YEAR 1996 ].

:end :instance.


; <<>>
; >> nineteen.ninety-seven.n.1.vm.tdl
; nineteen.ninety-seven.n.1.vm.tdl

:begin :instance.

nineteen_ninetyseven := year_word_3mle1 &
  [ STEM < "nineteen", "ninety", "seven" >,
    SYNSEM.LOCAL.CONT.KEY.YEAR 1997 ].

:end :instance.


; <<>>
; >> nineteen.ninety-seven.n.2.vm.tdl
; nineteen.ninety-seven.n.2.vm.tdl

:begin :instance.

nineteen_ninetyseven_2 := year_word_le &
  [ STEM < "1997" >,
    SYNSEM.LOCAL.CONT.KEY.YEAR 1997 ].

:end :instance.


; <<>>
; >> nineteen.ninety-three.n.1.vm.tdl
; nineteen.ninety-three.n.1.vm.tdl

:begin :instance.

nineteen_ninetythree := year_word_3mle1 &
  [ STEM < "nineteen", "ninety", "three" >,
    SYNSEM.LOCAL.CONT.KEY.YEAR 1993 ].

:end :instance.


; <<>>
; >> nineteen.ninety-three.n.2.vm.tdl
; nineteen.ninety-three.n.2.vm.tdl

:begin :instance.

nineteen_ninetythree_2 := year_word_le &
  [ STEM < "1993" >,
    SYNSEM.LOCAL.CONT.KEY.YEAR 1993 ].

:end :instance.


; <<>>
; >> nineteen-ninety-five.n.1.vm.tdl
; nineteen-ninety-five.n.1.vm.tdl

:begin :instance.

nineteenninetyfive := year_word_le &
  [ STEM < "nineteen-ninety-five" >,
    SYNSEM.LOCAL.CONT.KEY.YEAR 1995 ].

:end :instance.


; <<>>
; >> nineteen-ninety-four.n.1.vm.tdl
; nineteen-ninety-four.n.1.vm.tdl

:begin :instance.

nineteenninetyfour := year_word_le &
  [ STEM < "nineteen-ninety-four" >,
    SYNSEM.LOCAL.CONT.KEY.YEAR 1994 ].

:end :instance.


; <<>>
; >> nineteen-ninety-eight.n.1.vm.tdl
; nineteen-ninety-eight.n.1.vm.tdl

:begin :instance.

nineteenninetyeight := year_word_le &
  [ STEM < "nineteen-ninety-eight" >,
    SYNSEM.LOCAL.CONT.KEY.YEAR 1998 ].

:end :instance.


; <<>>
; >> nineteen-ninety-nine.n.1.vm.tdl
; nineteen-ninety-nine.n.1.vm.tdl

:begin :instance.

nineteenninetynine := year_word_le &
  [ STEM < "nineteen-ninety-nine" >,
    SYNSEM.LOCAL.CONT.KEY.YEAR 1999 ].

:end :instance.


; <<>>
; >> nineteen-ninety-six.n.1.vm.tdl
; nineteen-ninety-six.n.1.vm.tdl

:begin :instance.

nineteenninetysix := year_word_le &
  [ STEM < "nineteen-ninety-six" >,
    SYNSEM.LOCAL.CONT.KEY.YEAR 1996 ].

:end :instance.


; <<>>
; >> nineteen-ninety-seven.n.1.vm.tdl
; nineteen-ninety-seven.n.1.vm.tdl

:begin :instance.

nineteenninetyseven := year_word_le &
  [ STEM < "nineteen-ninety-seven" >,
    SYNSEM.LOCAL.CONT.KEY.YEAR 1997 ].

:end :instance.


; <<>>
; >> nineteen-ninety-three.n.1.vm.tdl
; nineteen-ninety-three.n.1.vm.tdl

:begin :instance.

nineteenninetythree := year_word_le &
  [ STEM < "nineteen-ninety-three" >,
    SYNSEM.LOCAL.CONT.KEY.YEAR 1993 ].

:end :instance.


; <<>>
; >> nineteenth.a.1.vm.tdl
; nineteenth.a.1.vm.tdl

:begin :instance.

nineteenth := ordinal_adj_le &
  [ STEM < "nineteenth" >,
    SYNSEM.LOCAL.CONT.KEY.ORD 19 ].

:end :instance.


; <<>>
; >> nineteenth.day.n.1.tdl
; nineteenth.day.n.1.tdl

:begin :instance.

nineteenth_day := day_of_month_le &
  [ STEM < "nineteenth" >,
    SYNSEM.LOCAL.CONT.KEY.DAY 19 ].

:end :instance.


; <<>>
; >> ninety.c.1.tdl
; ninety.c.1.tdl

:begin :instance.

ninety_w_comps := complemented_unspecified_card_le & 
  [ STEM < "ninety" >,
    SYNSEM.LOCAL [ CAT [HEAD intadj2,
			VALENCE.COMPS.FIRST.LOCAL.CAT.HEAD intadj1],
		   CONT.--STEMLISZT.LIST < [ CONST_VALUE 90 ], [] > ] ].

:end :instance.


; <<>>
; >> ninety-five.n.1.vm.tdl
; ninety-five.n.1.vm.tdl

:begin :instance.

ninetyfive_year := year_word_le &
  [ STEM < "ninety-five" >,
    SYNSEM.LOCAL.CONT.KEY.YEAR 1995 ].

:end :instance.


; <<>>
; >> ninety-four.n.1.vm.tdl
; ninety-four.n.1.vm.tdl

:begin :instance.

ninetyfour_year := year_word_le &
  [ STEM < "ninety-four" >,
    SYNSEM.LOCAL.CONT.KEY.YEAR 1994 ].

:end :instance.


; <<>>
; >> ninety-eight.n.1.vm.tdl
; ninety-eight.n.1.vm.tdl

:begin :instance.

ninetyeight_year := year_word_le &
  [ STEM < "ninety-eight" >,
    SYNSEM.LOCAL.CONT.KEY.YEAR 1998 ].

:end :instance.


; <<>>
; >> ninety-nine.n.1.vm.tdl
; ninety-nine.n.1.vm.tdl

:begin :instance.

ninetynine_year := year_word_le &
  [ STEM < "ninety-nine" >,
    SYNSEM.LOCAL.CONT.KEY.YEAR 1999 ].

:end :instance.


; <<>>
; >> ninety-six.n.1.vm.tdl
; ninety-six.n.1.vm.tdl

:begin :instance.

ninetysix_year := year_word_le &
  [ STEM < "ninety-six" >,
    SYNSEM.LOCAL.CONT.KEY.YEAR 1996 ].

:end :instance.


; <<>>
; >> ninety-seven.n.1.vm.tdl
; ninety-seven.n.1.vm.tdl

:begin :instance.

ninetyseven_year := year_word_le &
  [ STEM < "ninety-seven" >,
    SYNSEM.LOCAL.CONT.KEY.YEAR 1997 ].

:end :instance.


; <<>>
; >> ninety-three.n.1.vm.tdl
; ninety-three.n.1.vm.tdl

:begin :instance.

ninetythree_year := year_word_le &
  [ STEM < "ninety-three" >,
    SYNSEM.LOCAL.CONT.KEY.YEAR 1993 ].

:end :instance.


; <<>>
; >> ninth.a.1.vm.tdl
; ninth.a.1.vm.tdl

:begin :instance.

ninth := ordinal_adj_le &
  [ STEM < "ninth" >,
    SYNSEM.LOCAL.CONT.KEY.ORD 9 ].

:end :instance.


; <<>>
; >> ninth.day.n.1.tdl
; ninth.day.n.1.tdl

:begin :instance.

ninth_day := day_of_month_le &
  [ STEM < "ninth" >,
    SYNSEM.LOCAL.CONT.KEY.DAY 9 ].

:end :instance.


; <<>>
; >> no.c.1.tdl
; no.c.1.tdl

:begin :instance.

no_det := det_le &
  [ STEM < "no" >,
    SYNSEM.LOCAL.CONT.KEY _no_det_rel ].

:end :instance.


; <<>>
; >> no.disc.c.1.vm.tdl
; no.disc.c.1.vm.tdl

:begin :instance.

no_disc_root := disc_adv_le &
  [ STEM < "no" >,
    SYNSEM.LOCAL.CONT.KEY.EXCL 'no ].

:end :instance.

; <<>>
; >> no.one.n.1.tdl
; no.one.n.1.tdl

:begin :instance.

no_one := generic_pro_mle1 &
  [ STEM < "no", "one" >,
    SYNSEM.LOCAL.CONT [ KEY _person_rel,
			ALTKEY _no_det_rel ] ].
:end :instance.


; <<>>
; >> noble.a.1.vm.tdl
; noble.a.1.vm.tdl

:begin :instance.

noble_a1 := intrans_adj_le &
  [ STEM < "noble" >,
    SYNSEM.LOCAL.CONT.KEY _noble_rel ].

:end :instance.


; <<>>
; >> nobody.n.1.tdl
; nobody.n.1.tdl

:begin :instance.

nobody := generic_pro_le &
  [ STEM < "nobody" >,
    SYNSEM.LOCAL.CONT [ KEY _person_rel,
			ALTKEY _no_det_rel ] ].
:end :instance.


; <<>>
; >> noise.n.1.vm.tdl
; noise.n.1.vm.tdl

:begin :instance.

noise_n1 := massn_le &
  [ STEM < "noise" >,
    SYNSEM.LOCAL.CONT.KEY _noise_rel ].

:end :instance.



; <<>>
; >> noise.n.2.vm.tdl
; noise.n.2.vm.tdl

:begin :instance.

noise_n2 := intr_noun_word_le &
  [ STEM < "noise" >,
    SYNSEM.LOCAL.CONT.KEY _noise_rel ].

:end :instance.


; <<>>
; >> noisily.a.1.vm.tdl
; noisily.a.1.vm.tdl

:begin :instance.

noisily := adv_word_le &
  [ STEM < "noisily" >,
    SYNSEM.LOCAL.CONT.KEY _noisily_rel ].

:end :instance.


; <<>>
; >> noisy.a.1.vm.tdl
; noisy.a.1.vm.tdl

:begin :instance.

noisy_a1 := intrans_adj_le &
  [ STEM < "noisy" >,
    SYNSEM.LOCAL.CONT.KEY _noisy_rel ].

:end :instance.


; <<>>
; >> none.c.1.tdl
; none.c.1.tdl

:begin :instance.

none := part_noun_le &
  [ STEM < "none" >,
    SYNSEM.LOCAL.CONT.ALTKEY _no_det_rel ].

:end :instance.


; <<>>
; >> nonsense.n.1.vm.tdl
; nonsense.n.1.vm.tdl

:begin :instance.

nonsense_n1 := massn_le &
  [ STEM < "nonsense" >,
    SYNSEM.LOCAL.CONT.KEY _nonsense_rel ].

:end :instance.


; <<>>
; >> noon.n.1.tdl
; noon.n.1.tdl

:begin :instance.

noon := hour_word_le &
  [ STEM < "noon" >,
    SYNSEM.LOCAL.CONT.KEY.HOUR 12 ].

:end :instance.


; <<>>
; >> noontime.n.1.tdl
; noontime.n.1.tdl

:begin :instance.

noontime := hour_word_le &
  [ STEM < "noontime" >,
    SYNSEM.LOCAL.CONT.KEY.HOUR 12 ].

:end :instance.


; <<>>
; >> nor.c.1.tdl
; nor.c.1.tdl

:begin :instance.

nor_conj_1 := coord_a_le &
  [ STEM < "nor" >,
    SYNSEM.LOCAL.CONJ nor ].

:end :instance.


; <<>>
; >> nor.c.2.tdl
; nor.c.2.tdl

:begin :instance.

nor_conj_2 := coord_c_le &
  [ STEM < "nor" >,
    SYNSEM.LOCAL.CONJ complex-conj & 
			[ CHEAD [ LEFT < neither, nor >,
				  RELTN _nor_rel ] ] ].

:end :instance.


; <<>>
; >> normal.a.1.vm.tdl
; normal.a.1.vm.tdl

:begin :instance.

normal_a1 := intrans_adj_le &
  [ STEM < "normal" >,
    SYNSEM.LOCAL.CONT.KEY _normal_rel ].

:end :instance.


; <<>>
; >> normally.a.1.vm.tdl
; normally.a.1.vm.tdl

:begin :instance.

normally_adv1 := adv_pre_word_le &
  [ STEM < "normally" >,
    SYNSEM.LOCAL.CONT.KEY _normally_rel ].

:end :instance.


; <<>>
; >> north.Pole.n.1.vm.tdl
; north.Pole.n.1.vm.tdl
; MULTIKEY < "Pole" >

:begin :instance.

North_Pole_n1 := proper_3mle3 &
  [ STEM < "The", "North", "Pole" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'North_Pole ].

:end :instance.


; <<>>
; >> not.c.1.tdl
; not.c.1.tdl

:begin :instance.

not := not_le &
  [ STEM < "not" > ].

:end :instance.


; <<>>
; >> not.disc.c.1.vm.tdl
; not.disc.c.1.vm.tdl

:begin :instance.

not_disc := how_about_le &
  [ STEM < "not" >,
    SYNSEM.LOCAL.CONT.MESSAGE _not_disc_rel ].

:end :instance.

; <<>>
; >> note.down.v.1.vm.tdl
; note.down.v.1.vm.tdl

:begin :instance.

note_down_v1 := mv_particle_np_le &
  [ STEM < "note" >,
    SYNSEM.LOCAL.CONT [ KEY _note_down_rel,
			COMPKEY _down_rel ] ].

:end :instance.


; <<>>
; >> note.n.1.vm.tdl
; note.n.1.vm.tdl

:begin :instance.

note_n1 := noun_ppof_word_le &
  [ STEM < "note" >,
    SYNSEM.LOCAL.CONT.KEY _note_rel ].

:end :instance.


; <<>>
; >> note.v.1.vm.tdl
; note.v.1.vm.tdl

:begin :instance.

note_v1 := mv_np_trans_le &
  [ STEM < "note" >,
    SYNSEM.LOCAL.CONT.KEY _note_v_rel ].

:end :instance.


; <<>>
; >> nothing.n.1.tdl
; nothing.n.1.tdl

:begin :instance.

nothing := generic_pro_le &
  [ STEM < "nothing" >,
    SYNSEM.LOCAL.CONT [ KEY _thing_rel,
			ALTKEY _no_det_rel ] ].
:end :instance.


; <<>>
; >> notice.v.1.tdl
; notice.v.1.tdl

:begin :instance.

notice_v1 := mv_np_trans_le &
  [ STEM < "notice" >,
    SYNSEM.LOCAL.CONT.KEY _notice_rel ].

:end :instance.


; <<>>
; >> notice.v.2.tdl
; notice.v.2.tdl

:begin :instance.

notice_v2 := mv_cp_non_trans_le &
  [ STEM < "notice" >,
    SYNSEM.LOCAL.CONT.KEY _notice_rel ].

:end :instance.


; <<>>
; >> notice.v.3.tdl
; notice.v.3.tdl

:begin :instance.

notice_v3 := mv_unerg_le &
  [ STEM < "notice" >,
    SYNSEM.LOCAL.CONT.KEY _notice_rel ].

:end :instance.


; <<>>
; >> notice.v.4.tdl
; notice.v.4.tdl

:begin :instance.

notice_v4 := mv_sorb_le &
  [ STEM < "notice" >,
    SYNSEM.LOCAL.CONT.KEY _notice2_rel ].

:end :instance.


; <<>>
; >> november.n.1.tdl
; november.n.1.tdl

:begin :instance.

november := month_word_le &
  [ STEM < "november" >,
    SYNSEM.LOCAL.CONT.KEY.MONTH 'nov ].

:end :instance.


; <<>>
; >> november.n.2.tdl
; november.n.2.tdl

:begin :instance.

november_2 := month_year_word_le &
  [ STEM < "november" >,
    SYNSEM.LOCAL.CONT.KEY.MONTH 'nov ].

:end :instance.


; <<>>
; >> now.a.1.tdl
; now.a.1.tdl

:begin :instance.

now_adv := np_adv_word_le &
  [ STEM < "now" >,
    SYNSEM.LOCAL.CONT.KEY _now_rel ].

:end :instance.


; <<>>
; >> number.n.1.tdl
; number.n.1.tdl

:begin :instance.

number_n1 := noun_ppof_word_le &
  [ STEM < "number" >,
    SYNSEM.LOCAL.CONT.KEY _number_n_rel ].

:end :instance.


; <<>>
; >> nuremberg.n.1.vm.tdl
; nuremberg.n.1.vm.tdl

:begin :instance.

Nuremberg_n1 := proper_le &
  [ STEM < "nuremberg" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'Nuremberg ].

:end :instance.


; <<>>
; >> oclock.n.1.tdl
; oclock.n.1.tdl
; MULTIKEY < "clock" >

:begin :instance.

oclock := minute_word_mle2 &
  [ STEM < "o", "clock" >,
    SYNSEM.LOCAL [ CAT.POSTHEAD +,
		   CONT.KEY.MINUTE 00 ] ].

:end :instance.


; <<>>
; >> object.n.1.vm.tdl
; object.n.1.vm.tdl

:begin :instance.

object_n1 := intr_noun_word_le &
  [ STEM < "object" >,
    SYNSEM.LOCAL.CONT.KEY _object_rel ].

:end :instance.


; <<>>
; >> object.to.v.1.vm.tdl
; object.to.v.1.vm.tdl

:begin :instance.

object_to_v1 := mv_empty_prep*_intrans_le &
  [ STEM < "object" >,
    SYNSEM.LOCAL.CONT [ KEY _object_to_rel,
			COMPKEY _to_rel ] ].

:end :instance.


; <<>>
; >> objection.n.1.vm.tdl
; objection.n.1.vm.tdl

:begin :instance.

objection_n1 := intr_noun_word_le &
  [ STEM < "objection" >,
    SYNSEM.LOCAL.CONT.KEY _objection_rel ].

:end :instance.


; <<>>
; >> obligation.n.1.vm.tdl
; obligation.n.1.vm.tdl

:begin :instance.

obligation_n1 := intr_noun_word_le &
  [ STEM < "obligation" >,
    SYNSEM.LOCAL.CONT.KEY _obligation_rel ].

:end :instance.


; <<>>
; >> obligatory.a.1.vm.tdl
; obligatory.a.1.vm.tdl

:begin :instance.

obligatory_a1 := intrans_adj_le &
  [ STEM < "obligatory" >,
    SYNSEM.LOCAL.CONT.KEY _obligatory_rel ].

:end :instance.


; <<>>
; >> oblige.v.1.vm.tdl
; oblige.v.1.vm.tdl

:begin :instance.

oblige_v1 := mv_np*_trans_le &
  [ STEM < "oblige" >,
    SYNSEM.LOCAL.CONT.KEY _oblige_rel ].

:end :instance.


; <<>>
; >> obliged.a.1.vm.tdl
; obliged.a.1.vm.tdl

:begin :instance.

obliged_a1 := intrans_adj_le &
  [ STEM < "obliged" >,
    SYNSEM.LOCAL.CONT.KEY _obliged_rel ].

:end :instance.


; <<>>
; >> observe.v.1.tdl
; observe.v.1.tdl

:begin :instance.

observe_v1 := mv_np_trans_le &
  [ STEM < "observe" >,
    SYNSEM.LOCAL.CONT.KEY _observe_rel ].

:end :instance.


; <<>>
; >> observe.v.2.tdl
; observe.v.2.tdl

:begin :instance.

observe_v2 := mv_cp_non_trans_le &
  [ STEM < "observe" >,
    SYNSEM.LOCAL.CONT.KEY _observe_rel ].

:end :instance.


; <<>>
; >> observe.v.3.tdl
; observe.v.3.tdl

:begin :instance.

observe_v3 := mv_sorb_le &
  [ STEM < "observe" >,
    SYNSEM.LOCAL.CONT.KEY _observe2_rel ].

:end :instance.


; <<>>
; >> obvious.a.1.vm.tdl
; obvious.a.1.vm.tdl

:begin :instance.

obvious_a1 := intrans_adj_le &
  [ STEM < "obvious" >,
    SYNSEM.LOCAL.CONT.KEY _obvious_rel ].

:end :instance.


; <<>>
; >> obviously.a.1.vm.tdl
; obviously.a.1.vm.tdl

:begin :instance.

obviously_adv1 := adv_pre_word_le &
  [ STEM < "obviously" >,
    SYNSEM.LOCAL.CONT.KEY _obviously_rel ].

:end :instance.


; <<>>
; >> occasion.n.1.vm.tdl
; occasion.n.1.vm.tdl

:begin :instance.

occasion_n1 := intr_noun_word_le &
  [ STEM < "occasion" >,
    SYNSEM.LOCAL.CONT.KEY _occasion_rel ].

:end :instance.


; <<>>
; >> occasionally.a.1.vm.tdl
; occasionally.a.1.vm.tdl

:begin :instance.

occasionally_adv1 := adv_pre_word_le &
  [ STEM < "occasionally" >,
    SYNSEM.LOCAL.CONT.KEY _occasionally_rel ].

:end :instance.


; <<>>
; >> occupied.a.1.vm.tdl
; occupied.a.1.vm.tdl

:begin :instance.

occupied_a1 := intrans_adj_le &
  [ STEM < "occupied" >,
    SYNSEM.LOCAL.CONT.KEY _occupied_rel ].

:end :instance.


; <<>>
; >> occupy.v.2.vm.tdl
; occupy.v.2.vm.tdl

:begin :instance.

occupy_v2 := mv_np_trans_le &
  [ STEM < "occupy" >,
    SYNSEM.LOCAL.CONT.KEY _occupy_rel ].

:end :instance.


; <<>>
; >> october.n.1.tdl
; october.n.1.tdl

:begin :instance.

october := month_word_le &
  [ STEM < "october" >,
    SYNSEM.LOCAL.CONT.KEY.MONTH 'oct ].

:end :instance.


; <<>>
; >> october.n.2.tdl
; october.n.2.tdl

:begin :instance.

october_2 := month_year_word_le &
  [ STEM < "october" >,
    SYNSEM.LOCAL.CONT.KEY.MONTH 'oct ].

:end :instance.


; <<>>
; >> of.c.1.tdl
; of.c.1.tdl

:begin :instance.

possessive_of := poss_of_le &
  [ STEM < "of" > ].

:end :instance.



; <<>>
; >> of.course.c.1.vm.tdl
; of.course.c.1.vm.tdl
; MULTIKEY < "course" >

:begin :instance.

of_course_root := disc_adv_mle2 &
  [ STEM < "of", "course" >,
    SYNSEM.LOCAL.CONT.KEY.EXCL 'of_course ].

:end :instance.

; <<>>
; >> of.p.1.tdl
; of.p.1.tdl

:begin :instance.

of_p := prep_nomod_empty_le &
  [ STEM < "of" >,
    SYNSEM.LOCAL.CONT.KEY _of_rel ].

:end :instance.


; <<>>
; >> of.course.a.1.vm.tdl
; of.course.a.1.vm.tdl
; MULTIKEY < "course" >

:begin :instance.

of_course_a1 := vp_adv_post_word_mle2 &
  [ STEM < "of", "course" >,
    SYNSEM.LOCAL.CONT.KEY _of_course_rel ].

:end :instance.


; <<>>
; >> off.p.1.tdl
; off.p.1.tdl

:begin :instance.

off := reg_prep_le &
  [ STEM < "off" >,
    SYNSEM.LOCAL.CONT.KEY _off_rel ].

:end :instance.


; <<>>
; >> offer.n.1.vm.tdl
; offer.n.1.vm.tdl

:begin :instance.

offer_n1 := intr_noun_word_le &
  [ STEM < "offer" >,
    SYNSEM.LOCAL.CONT.KEY _offer_rel ].

:end :instance.


; <<>>
; >> offer.v.1.vm.tdl
; offer.v.1.vm.tdl

:begin :instance.

offer_v1 := mv_ditrans_le &
  [ STEM < "offer" >,
    SYNSEM.LOCAL.CONT.KEY _offer_v_rel ].

:end :instance.


; <<>>
; >> offer.v.2.vm.tdl
; offer.v.2.vm.tdl

:begin :instance.

offer_v2 := mv_np_trans_le &
  [ STEM < "offer" >,
    SYNSEM.LOCAL.CONT.KEY _offer_v_rel ].

:end :instance.


; <<>>
; >> offer.v.3.vm.tdl
; offer.v.3.vm.tdl

:begin :instance.

offer_v3 := mv_subj_equi_le &
  [ STEM < "offer" >,
    SYNSEM.LOCAL.CONT.KEY _offer_v2_rel ].

:end :instance.


; <<>>
; >> office.n.1.tdl
; office.n.1.tdl

:begin :instance.

office1 := intr_noun_word_le &
  [ STEM < "office" >,
    SYNSEM.LOCAL.CONT.KEY _office_rel ].

:end :instance.


; <<>>
; >> official.a.1.vm.tdl
; official.a.1.vm.tdl

:begin :instance.

official_a1 := intrans_adj_le &
  [ STEM < "official" >,
    SYNSEM.LOCAL.CONT.KEY _official_rel ].

:end :instance.


; <<>>
; >> officially.a.1.vm.tdl
; officially.a.1.vm.tdl

:begin :instance.

officially := adv_word_le &
  [ STEM < "officially" >,
    SYNSEM.LOCAL.CONT.KEY _officially_rel ].

:end :instance.


; <<>>
; >> often.a.1.vm.tdl
; often.a.1.vm.tdl

:begin :instance.

often_adv1 := adv_word_le &
  [ STEM < "often" >,
    SYNSEM.LOCAL.CONT.KEY _often_rel ].

:end :instance.


; <<>>
; >> oh.c.1.vm.tdl
; oh.c.1.vm.tdl

:begin :instance.

oh_root := disc_adv_le &
  [ STEM < "oh" >,
    SYNSEM.LOCAL.CONT.KEY.EXCL 'oh ].

:end :instance.

; <<>>
; >> oh.dear.c.1.vm.tdl
; oh.dear.c.1.vm.tdl

:begin :instance.

oh_dear_root := disc_adv_mle1 &
  [ STEM < "oh", "dear" >,
    SYNSEM.LOCAL.CONT.KEY.EXCL 'oh_dear ].

:end :instance.


; <<>>
; >> oil.n.1.vm.tdl
; oil.n.1.vm.tdl

:begin :instance.

oil_n1 := massn_le &
  [ STEM < "oil" >,
    SYNSEM.LOCAL.CONT.KEY _oil_rel ].

:end :instance.


; <<>>
; >> ok.a.1.vm.tdl
; ok.a.1.vm.tdl

:begin :instance.

ok_a1 := intrans_adj_le &
  [ STEM < "ok" >,
    SYNSEM.LOCAL.CONT.KEY _okay_accept_rel ].

:end :instance.


; <<>>
; >> okay.a.2.vm.tdl
; okay.a.2.vm.tdl

:begin :instance.

okay_a1 := intrans_adj_le &
  [ STEM < "okay" >,
    SYNSEM.LOCAL.CONT.KEY _okay_accept_rel ].

:end :instance.


; <<>>
; >> okay.c.1.vm.tdl
; okay.c.1.vm.tdl

:begin :instance.

okay_root := disc_adv_le &
  [ STEM < "okay" >,
    SYNSEM.LOCAL.CONT.KEY.EXCL 'okay ].

:end :instance.


; <<>>
; >> okay.a.3.vm.tdl
; okay.a.3.vm.tdl

:begin :instance.

okay_adj_expl := reg_adj_atrans_le &
  [ STEM < "okay" >,
    SYNSEM.LOCAL.CONT.KEY _okay_accept2_rel ].

:end :instance.


; <<>>
; >> old.a.1.vm.tdl
; old.a.1.vm.tdl

:begin :instance.

old_a1 := intrans_adj_le &
  [ STEM < "old" >,
    SYNSEM.LOCAL.CONT.KEY _old_rel ].

:end :instance.


; <<>>
; >> olympic.a.1.vm.tdl
; olympic.a.1.vm.tdl

:begin :instance.

olympic_a1 := intrans_adj_le &
  [ STEM < "olympic" >,
    SYNSEM.LOCAL.CONT.KEY _olympic_rel ].

:end :instance.


; <<>>
; >> on.p.1.tdl
; on.p.1.tdl

:begin :instance.

on := reg_prep_le &
  [ STEM < "on" >,
    SYNSEM.LOCAL.CONT.KEY _on_rel ].

:end :instance.


; <<>>
; >> on.p.2.tdl
; on.p.2.tdl

:begin :instance.

on_day := prep_le &
  [ STEM < "on" >,
    SYNSEM.LOCAL.CONT [ KEY _on_temp_rel,
			COMPKEY day_rel ] ].

:end :instance.


; <<>>
; >> on.p.3.tdl
; on.p.3.tdl

:begin :instance.

on_idiom := prep_nomod_le &
  [ STEM < "on" >,
    SYNSEM.LOCAL.CONT.KEY _on_idiom_rel ].

:end :instance.


; <<>>
; >> on.the.basis.of.p.1.tdl
; on.the.basis.of.p.1.tdl
; MULTIKEY < "basis" >

:begin :instance.

on_the_basis_of := prep_4mle3 &
  [ STEM < "on", "the", "basis", "of" >,
    SYNSEM.LOCAL.CONT.KEY _on_the_basis_of_rel ].

:end :instance.


; <<>>
; >> on.the.other.hand.c.1.vm.tdl
; on.the.other.hand.c.1.vm.tdl
; MULTIKEY < "other" >

:begin :instance.

on_the_other_hand_root := disc_adv_4mle3 &
  [ STEM < "on", "the", "other", "hand" >,
    SYNSEM.LOCAL.CONT.KEY.EXCL 'on_the_other_hand ].

:end :instance.


; <<>>
; >> on.the.part.of.p.1.tdl
; on.the.part.of.p.1.tdl
; MULTIKEY < "part" >

:begin :instance.

on_the_part_of := prep_4mle3 &
  [ STEM < "on", "the", "part", "of" >,
    SYNSEM.LOCAL.CONT.KEY _on_the_part_of_rel ].

:end :instance.


; <<>>
; >> on.time.a.1.vm.tdl
; on.time.a.1.vm.tdl
; MULTIKEY < "time" >

:begin :instance.

on-time_a1 := irreg_attr_adj_mle2 &
  [ STEM < "on", "time" >,
    SYNSEM.LOCAL.CONT.KEY _on_time_adj_rel ].

:end :instance.


; <<>>
; >> on.time.a.2.vm.tdl
; on.time.a.2.vm.tdl
; MULTIKEY < "time" >

:begin :instance.

on-time_a2 := irreg_pred_intrans_adj_mle2 &
  [ STEM < "on", "time" >,
    SYNSEM.LOCAL.CONT.KEY _on_time_adj_rel ].

:end :instance.


; <<>>
; >> on.vacation.p.1.vm.tdl
; on.vacation.p.1.vm.tdl
; MULTIKEY < "vacation" >

:begin :instance.

on_vacation := pp_idiom_mle2 &
  [ STEM < "on", "vacation" >,
    SYNSEM.LOCAL.CONT [ TOP #hand,
			MODCONT.LISZT <! _on_rel & [ PREP #inst ],
				       _vacation_rel &
				       [ HANDEL #hand,
					 INST #inst & index &
						[ PNG [ PN 3sg,
							GEN neut ] ] ] !> ] ].

:end :instance.


; <<>>
; >> on.time.a.2.vm.tdl
; on.time.a.2.vm.tdl
; MULTIKEY < "time" >

:begin :instance.

on_time := vp_adv_post_word_mle2 &
  [ STEM < "on", "time" >,
    SYNSEM.LOCAL.CONT.KEY _on_time_rel ].

:end :instance.


; <<>>
; >> once.a.1.vm.tdl
; once.a.1.vm.tdl

:begin :instance.

once_adv1 := vp_adv_post_word_le &
  [ STEM < "once" >,
    SYNSEM.LOCAL.CONT.KEY _once_rel ].

:end :instance.


; <<>>
; >> once.c.1.tdl
; once.c.1.tdl

:begin :instance.

once_conj := subconj_le &
  [ STEM < "once" >,
    SYNSEM.LOCAL.CONT.KEY _once_subord_rel ].

:end :instance.


; <<>>
; >> once.again.a.1.vm.tdl
; once.again.a.1.vm.tdl

:begin :instance.

once_again := vp_adv_post_word_mle1 &
  [ STEM < "once", "again" >,
    SYNSEM.LOCAL.CONT.KEY _once_again_rel ].

:end :instance.


; <<>>
; >> one.n.1.tdl
; one.n.1.tdl

:begin :instance.

one_pro := pers_pro_le &
  [ STEM < "one" >,
    SYNSEM.LOCAL.CONT.KEY.INST [ PNG.PN 3sg*,
				 PRONTYPE std_3 ] ].
:end :instance.


; <<>>
; >> one.n.2.tdl
; one.n.2.tdl

:begin :instance.

one_n1 := intr_noun_word_le &
  [ STEM < "one" >,
    SYNSEM.LOCAL.CONT.KEY pron_rel &
		          [ INST.PNG.PN 3sg*,
			    PRONTYPE impers ] ].
:end :instance.


; <<>>
; >> one,hour.n.1.tdl
; one,hour.n.1.tdl

:begin :instance.

one_hour := hour_word_le &
  [ STEM < "one" >,
    SYNSEM.LOCAL.CONT.KEY.HOUR 1 ].

:end :instance.


; <<>>
; >> one.c.1.tdl
; one.c.1.tdl

:begin :instance.

one_determiner := pdet_one_le &
  [ STEM < "one" > ].

:end :instance.


; <<>>
; >> one.c.2.tdl
; one.c.2.tdl

:begin :instance.

one_sing := one_sing_le & 
  [ STEM < "one" > ].

:end :instance.


; <<>>
; >> one.c.3.tdl
; one.c.3.tdl

:begin :instance.

one_plur := one_plur_le & 
  [ STEM < "one" >].

:end :instance.


; <<>>
; >> one.another.n.1.tdl
; one.another.n.1.tdl
; MULTIKEY < "another" >

:begin :instance.

one_another := pers_pro_mle2 &
  [ STEM < "one", "another" >,
    SYNSEM.LOCAL [ CAT.HEAD.CASE acc,
		   CONT.KEY.INST.PNG.PN 3sg* ] ].
:end :instance.


; <<>>
; >> only.a.1.vm.tdl
; only.a.1.vm.tdl

:begin :instance.

only_adv1 := adv_pre_word_le &
  [ STEM < "only" >,
    SYNSEM.LOCAL.CONT.KEY _only_rel ].

:end :instance.


; <<>>
; >> only.a.2.vm.tdl
; only.a.2.vm.tdl

:begin :instance.

only_deg := degree_spec_le &
  [ STEM < "only" >,
    SYNSEM.LOCAL.CONT.KEY _only_i_rel ].

:end :instance.


; <<>>
; >> onto.p.1.tdl
; onto.p.1.tdl

:begin :instance.

onto := prep_nomod_le &
  [ STEM < "onto" >,
    SYNSEM.LOCAL.CONT.KEY _onto_rel ].

:end :instance.


; <<>>
; >> open.a.1.tdl
; open.a.1.tdl

:begin :instance.

open_a1 := intrans_adj_le &
  [ STEM < "open" >,
    SYNSEM.LOCAL.CONT.KEY _open_rel ].

:end :instance.


; <<>>
; >> open.v.1.tdl
; open.v.1.tdl

:begin :instance.

open_v1 := mv_np_trans_le &
  [ STEM < "open" >,
    SYNSEM.LOCAL.CONT.KEY _open_v_rel ].

:end :instance.


; <<>>
; >> open.v.2.tdl
; open.v.2.tdl

:begin :instance.

open_v2 := mv_unacc_le &
  [ STEM < "open" >,
    SYNSEM.LOCAL.CONT.KEY _open_und_rel ].

:end :instance.


; <<>>
; >> open.ended.a.1.vm.tdl
; open.ended.a.1.vm.tdl

:begin :instance.

open_ended_a1 := irreg_attr_adj_mle1 &
  [ STEM < "open", "ended" >,
    SYNSEM.LOCAL.CONT.KEY _open_ended_rel ].

:end :instance.


; <<>>
; >> open.ended.a.2.vm.tdl
; open.ended.a.2.vm.tdl

:begin :instance.

open_ended_a2 := irreg_pred_intrans_adj_mle1 &
  [ STEM < "open", "ended" >,
    SYNSEM.LOCAL.CONT.KEY _open_ended_rel ].

:end :instance.


; <<>>
; >> opening.n.1.vm.tdl
; opening.n.1.vm.tdl

:begin :instance.

opening_n1 := intr_noun_word_le &
  [ STEM < "opening" >,
    SYNSEM.LOCAL.CONT.KEY _opening_rel ].

:end :instance.


; <<>>
; >> operate.v.1.tdl
; operate.v.1.tdl

:begin :instance.

operate_v1 := mv_unerg_le &
  [ STEM < "operate" >,
    SYNSEM.LOCAL.CONT.KEY _operate_rel ].

:end :instance.


; <<>>
; >> operation.n.1.vm.tdl
; operation.n.1.vm.tdl

:begin :instance.

operation_n1 := intr_noun_word_le &
  [ STEM < "operation" >,
    SYNSEM.LOCAL.CONT.KEY _operation_rel ].

:end :instance.


; <<>>
; >> opinion.n.1.vm.tdl
; opinion.n.1.vm.tdl

:begin :instance.

opinion_n1 := intr_noun_word_le &
  [ STEM < "opinion" >,
    SYNSEM.LOCAL.CONT.KEY _opinion_rel ].

:end :instance.


; <<>>
; >> opportune.a.1.vm.tdl
; opportune.a.1.vm.tdl

:begin :instance.

opportune_a1 := intrans_adj_le &
  [ STEM < "opportune" >,
    SYNSEM.LOCAL.CONT.KEY _opportune_rel ].

:end :instance.


; <<>>
; >> opportunely.a.1.vm.tdl
; opportunely.a.1.vm.tdl

:begin :instance.

opportunely := vp_adv_post_word_le &
  [ STEM < "opportunely" >,
    SYNSEM.LOCAL.CONT.KEY _opportunely_rel ].

:end :instance.


; <<>>
; >> opportunity.n.1.vm.tdl
; opportunity.n.1.vm.tdl

:begin :instance.

opportunity_n1 := intr_noun_word_le &
  [ STEM < "opportunity" >,
    SYNSEM.LOCAL.CONT.KEY _opportunity_rel ].

:end :instance.


; <<>>
; >> opposite.a.1.vm.tdl
; opposite.a.1.vm.tdl

:begin :instance.

opposite_a1 := intrans_adj_le &
  [ STEM < "opposite" >,
    SYNSEM.LOCAL.CONT.KEY _opposite_rel ].

:end :instance.


; <<>>
; >> opposite.n.1.vm.tdl
; opposite.n.1.vm.tdl

:begin :instance.

opposite_n1 := intr_noun_word_le &
  [ STEM < "opposite" >,
    SYNSEM.LOCAL.CONT.KEY _opposite_n_rel ].

:end :instance.


; <<>>
; >> opposition.n.1.vm.tdl
; opposition.n.1.vm.tdl

:begin :instance.

opposition_n1 := massn_le &
  [ STEM < "opposition" >,
    SYNSEM.LOCAL.CONT.KEY _opposition_rel ].

:end :instance.


; <<>>
; >> optimal.a.1.vm.tdl
; optimal.a.1.vm.tdl

:begin :instance.

optimal_a1 := intrans_adj_le &
  [ STEM < "optimal" >,
    SYNSEM.LOCAL.CONT.KEY _optimal_rel ].

:end :instance.


; <<>>
; >> optimally.a.1.vm.tdl
; optimally.a.1.vm.tdl

:begin :instance.

optimally := adv_word_le &
  [ STEM < "optimally" >,
    SYNSEM.LOCAL.CONT.KEY _optimally_rel ].

:end :instance.


; <<>>
; >> option.n.1.vm.tdl
; option.n.1.vm.tdl

:begin :instance.

option_n1 := intr_noun_word_le &
  [ STEM < "option" >,
    SYNSEM.LOCAL.CONT.KEY _option_rel ].

:end :instance.


; <<>>
; >> or.c.1.tdl
; or.c.1.tdl

:begin :instance.

or_conj_1 := coord_c_le &
  [ STEM < "or" >,
    SYNSEM.LOCAL [ CAT.VALENCE.COMPS.FIRST.LOCAL.AGR #agr,
                   AGR #agr,
                   CONJ complex-conj & [ CHEAD [ LEFT < cnil, cnil >,
                                                RELTN _or_rel ] ] ] ].  

:end :instance.


; <<>>
; >> or.c.2.tdl
; or.c.2.tdl

:begin :instance.

or_conj_2 := coord_c_le &
  [ STEM < "or" >,
    SYNSEM.LOCAL [ CAT.VALENCE.COMPS.FIRST.LOCAL.AGR #agr,
                   AGR #agr,
                   CONJ complex-conj & [ CHEAD [ LEFT < either >,
                                                 RELTN _or_rel ] ] ] ].

:end :instance.


; <<>>
; >> order.n.1.vm.tdl
; order.n.1.vm.tdl

:begin :instance.

order_n1 := intr_noun_word_le &
  [ STEM < "order" >,
    SYNSEM.LOCAL.CONT.KEY _order_rel ].

:end :instance.


; <<>>
; >> ordinary.a.1.vm.tdl
; ordinary.a.1.vm.tdl

:begin :instance.

ordinary_a1 := intrans_adj_le &
  [ STEM < "ordinary" >,
    SYNSEM.LOCAL.CONT.KEY _ordinary_rel ].

:end :instance.


; <<>>
; >> organization.n.1.vm.tdl
; organization.n.1.vm.tdl

:begin :instance.

organization_n1 := deverbal_noun_intr_word_le &
  [ STEM < "organization" >,
    SYNSEM.LOCAL.CONT.ALTKEY _organize_rel ].

:end :instance.


; <<>>
; >> organizational.a.1.vm.tdl
; organizational.a.1.vm.tdl

:begin :instance.

organizational_a1 := intrans_adj_le &
  [ STEM < "organizational" >,
    SYNSEM.LOCAL.CONT.KEY _organizational_rel ].

:end :instance.


; <<>>
; >> organize.v.1.vm.tdl
; organize.v.1.vm.tdl

:begin :instance.

organize_v1 := mv_np_trans_le &
  [ STEM < "organize" >,
    SYNSEM.LOCAL.CONT.KEY _organize_rel ].

:end :instance.


; <<>>
; >> original.a.1.vm.tdl
; original.a.1.vm.tdl

:begin :instance.

original_a1 := intrans_adj_le &
  [ STEM < "original" >,
    SYNSEM.LOCAL.CONT.KEY _original_rel ].

:end :instance.


; <<>>
; >> originally.a.1.vm.tdl
; originally.a.1.vm.tdl

:begin :instance.

originally_adv1 := adv_pre_word_le &
  [ STEM < "originally" >,
    SYNSEM.LOCAL.CONT.KEY _originally_rel ].

:end :instance.


; <<>>
; >> osnabrueck.n.1.vm.tdl
; osnabrueck.n.1.vm.tdl

:begin :instance.

Osnabrueck_n1 := proper_le &
  [ STEM < "osnabrueck" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'Osnabrueck ].

:end :instance.


; <<>>
; >> other.a.1.vm.tdl
; other.a.1.vm.tdl

:begin :instance.

other_a1 := intrans_adj_le &
  [ STEM < "other" >,
    SYNSEM.LOCAL.CONT.KEY _other_rel ].

:end :instance.


; <<>>
; >> otherwise.a.1.vm.tdl
; otherwise.a.1.vm.tdl

:begin :instance.

otherwise_adv1 := adv_pre_word_le &
  [ STEM < "otherwise" >,
    SYNSEM.LOCAL.CONT.KEY _otherwise_adv_rel ].

:end :instance.


; <<>>
; >> otherwise.a.2.vm.tdl
; otherwise.a.2.tdl

:begin :instance.

otherwise_adv2 := vp_adv_post_word_le &
  [ STEM < "otherwise" >,
    SYNSEM.LOCAL.CONT.KEY _otherwise_adv_rel ].

:end :instance.


; <<>>
; >> otherwise.c.2.tdl
; otherwise.c.2.tdl

:begin :instance.

otherwise_sc := subconj_le &
  [ STEM < "otherwise" >,
    SYNSEM.LOCAL.CONT.KEY _otherwise_rel ].

:end :instance.


; <<>>
; >> ouch.c.1.vm.tdl
; ouch.c.1.vm.tdl

:begin :instance.

ouch_root := disc_adv_le &
  [ STEM < "ouch" >,
    SYNSEM.LOCAL.CONT.KEY.EXCL 'ouch ].

:end :instance.


; <<>>
; >> ought.vx.1.tdl
; ought.vx.1.tdl

:begin :instance.

ought_aux_pos := ought_pos_le & 
  [ STEM < "ought" >,
    SYNSEM.LOCAL [ CAT.HEAD.TENSE present*,
                   CONT.KEY _ought_rel ] ].

:end :instance.


; <<>>
; >> oughtnt.vx.1.tdl
; oughtnt.vx.1.tdl

:begin :instance.

ought_aux_neg := ought_neg_mle1 &
  [ STEM < "oughtn", "t" >,
    SYNSEM.LOCAL [ CAT.HEAD.TENSE present*,
                   CONT.KEY _ought_rel ] ].

:end :instance.


; <<>>
; >> our.n.1.tdl
; our.n.1.tdl

:begin :instance.

our := poss_le &
  [ STEM < "our" >,
    SYNSEM.LOCAL.CONT.ALTKEY.INST [ PNG.PN 1pl*,
				    PRONTYPE std_1pl ] ].
:end :instance.


; <<>>
; >> ours.n.1.tdl
; ours.n.1.tdl

:begin :instance.

ours := poss_pro_le &
  [ STEM < "ours" >,
    SYNSEM.LOCAL.CONT.LISZT.LIST.FIRST.INST.PNG.PN 1pl* ].

:end :instance.


; <<>>
; >> ourselves.n.1.tdl
; ourselves.n.1.tdl

:begin :instance.

ourselves := refl_pro_le &
  [ STEM < "ourselves" >,
    SYNSEM.LOCAL.CONT.KEY.INST.PNG.PN 1pl* ].

:end :instance.


; <<>>
; >> out.of.p.1.tdl
; out.of.p.1.tdl

:begin :instance.

out_of := prep_nomod_mle1 &
  [ STEM < "out", "of" >,
    SYNSEM.LOCAL.CONT.KEY _out_of_rel ].

:end :instance.


; <<>>
; >> out.p.1.tdl
; out.p.1.tdl

:begin :instance.

out := prep_nomod_le &
  [ STEM < "out" >,
    SYNSEM.LOCAL.CONT.KEY _out_rel ].

:end :instance.


; <<>>
; >> out.a.1.vm.tdl
; out.a.1.vm.tdl

:begin :instance.

out_a1 := intrans_adj_le &
  [ STEM < "out" >,
    SYNSEM.LOCAL.CONT.KEY _out_adj_rel ].

:end :instance.


; <<>>
; >> out.of.town.a.1.tdl
; out.of.town.a.1.tdl
; MULTIKEY < "town" >

:begin :instance.

out_of_town := np_adv_word_3mle3 &
  [ STEM < "out", "of", "town" >,
    SYNSEM.LOCAL.CONT.KEY _out_of_town_rel ].

:end :instance.


; <<>>
; >> outright.a.2.tdl
; outright.a.2.tdl

:begin :instance.

outright := vp_adv_word_le &
  [ STEM < "outright" >,
    SYNSEM.LOCAL.CONT.KEY _outright_adv_rel ].

:end :instance.


; <<>>
; >> outright.a.3.tdl
; outright.a.3.tdl

:begin :instance.

outright_deg := degree_spec_le &
  [ STEM < "outright" >,
    SYNSEM.LOCAL.CONT.KEY _outright_deg_rel ].

:end :instance.


; <<>>
; >> outright.a.1.tdl
; outright.a.1.tdl

:begin :instance.

outright_a1 := intrans_adj_le &
  [ STEM < "outright" >,
    SYNSEM.LOCAL.CONT.KEY _outright_rel ].

:end :instance.


; <<>>
; >> outside.p.1.tdl
; outside.p.1.tdl

:begin :instance.

outside := reg_prep_le &
  [ STEM < "outside" >,
    SYNSEM.LOCAL.CONT.KEY _outside_rel ].

:end :instance.


; <<>>
; >> outside.p.2.tdl
; outside.p.2.tdl

:begin :instance.

outside_pp := pp_le &
  [ STEM < "outside" >,
    SYNSEM.LOCAL.CONT.KEY _outside_adv_rel ].

:end :instance.


; <<>>
; >> outside.a.1.tdl
; outside.a.1.tdl

:begin :instance.

outside_a1 := intrans_adj_le &
  [ STEM < "outside" >,
    SYNSEM.LOCAL.CONT.KEY _outside_adj_rel ].

:end :instance.


; <<>>
; >> outstanding.a.1.vm.tdl
; outstanding.a.1.vm.tdl

:begin :instance.

outstanding_a1 := intrans_adj_le &
  [ STEM < "outstanding" >,
    SYNSEM.LOCAL.CONT.KEY _outstanding_rel ].

:end :instance.


; <<>>
; >> over.p.1.tdl
; over.p.1.tdl

:begin :instance.

over := reg_prep_le &
  [ STEM < "over" >,
    SYNSEM.LOCAL.CONT.KEY _over_rel ].

:end :instance.


; <<>>
; >> over.with.a.1.vm.tdl
; over.with.a.1.vm.tdl

:begin :instance.

over_with_a1 := irreg_pred_intrans_adj_mle1 &
  [ STEM < "over", "with" >,
    SYNSEM.LOCAL [ CAT.HEAD.PRD +,
		   CONT.KEY _over_with_rel ] ].

:end :instance.


; <<>>
; >> over.a.1.tdl
; over.a.1.tdl

:begin :instance.

over_a1 := pred_intrans_adj_le &
  [ STEM < "over" >,
    SYNSEM.LOCAL.CONT.KEY _over_mod_rel ].

:end :instance.


; <<>>
; >> overhear.v.1.tdl
; overhear.v.1.tdl

:begin :instance.

overhear_v1 := mv_np_trans_le &
  [ STEM < "overhear" >,
    SYNSEM.LOCAL.CONT.KEY _overhear_rel ].

:end :instance.


; <<>>
; >> overhear.v.2.tdl
; overhear.v.2.tdl

:begin :instance.

overhear_v2 := mv_cp_non_trans_le &
  [ STEM < "overhear" >,
    SYNSEM.LOCAL.CONT.KEY _overhear_rel ].

:end :instance.


; <<>>
; >> overhear.v.3.tdl
; overhear.v.3.tdl

:begin :instance.

overhear_v3 := mv_sorb_le &
  [ STEM < "overhear" >,
    SYNSEM.LOCAL.CONT.KEY _overhear2_rel ].

:end :instance.


; <<>>
; >> overlap.v.1.vm.tdl
; overlap.v.1.vm.tdl

:begin :instance.

overlap_v1 := mv_empty_prep_intrans_le &
  [ STEM < "overlap" >,
    SYNSEM.LOCAL.CONT [ KEY _overlap_with_rel,
			COMPKEY _with_rel ] ].

:end :instance.


; <<>>
; >> overlap.v.2.vm.tdl
; overlap.v.2.vm.tdl

:begin :instance.

overlap_v2 := mv_unerg_le &
  [ STEM < "overlap" >,
    SYNSEM.LOCAL.CONT.KEY _overlap_rel ].

:end :instance.


; <<>>
; >> overlook.v.1.vm.tdl
; overlook.v.1.vm.tdl

:begin :instance.

overlook_v1 := mv_np_trans_le &
  [ STEM < "overlook" >,
    SYNSEM.LOCAL.CONT.KEY _overlook_rel ].

:end :instance.


; <<>>
; >> owe.v.1.vm.tdl
; owe.v.1.vm.tdl

:begin :instance.

owe_v1 := mv_ditrans_le &
  [ STEM < "owe" >,
    SYNSEM.LOCAL.CONT.KEY _owe_v_rel ].

:end :instance.


; <<>>
; >> own.v.1.vm.tdl
; own.v.1.vm.tdl

:begin :instance.

own_v1 := mv_np_trans_le &
  [ STEM < "own" >,
    SYNSEM.LOCAL.CONT.KEY _own_v_rel ].

:end :instance.


; <<>>
; >> own.a.1.vm.tdl
; own.a.1.vm.tdl

:begin :instance.

own_a1 := intrans_adj_le &
  [ STEM < "own" >,
    SYNSEM.LOCAL.CONT.KEY _own_a_rel ].

:end :instance.


; <<>>
; >> pack.v.1.vm.tdl
; pack.v.1.vm.tdl

:begin :instance.

pack_v1 := mv_np*_trans_le &
  [ STEM < "pack" >,
    SYNSEM.LOCAL.CONT.KEY _pack_rel ].

:end :instance.


; <<>>
; >> packed.a.1.vm.tdl
; packed.a.1.vm.tdl

:begin :instance.

packed_a1 := intrans_adj_le &
  [ STEM < "packed" >,
    SYNSEM.LOCAL.CONT.KEY _packed_rel ].

:end :instance.


; <<>>
; >> palo.alto.n.1.tdl
; palo.alto.n.1.tdl

:begin :instance.

paloalto := proper_mle1 &
  [ STEM < "palo", "alto" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'palo_alto ].

:end :instance.


; <<>>
; >> paper.n.1.vm.tdl
; paper.n.1.vm.tdl

:begin :instance.

paper_n1 := intr_noun_word_le &
  [ STEM < "paper" >,
    SYNSEM.LOCAL.CONT.KEY _paper_rel ].

:end :instance.


; <<>>
; >> pardon.v.1.vm.tdl
; pardon.v.1.vm.tdl

:begin :instance.

pardon_v1 := mv_np_trans_le &
  [ STEM < "pardon" >,
    SYNSEM.LOCAL.CONT.KEY _pardon_rel ].

:end :instance.


; <<>>
; >> parent.n.1.vm.tdl
; parent.n.1.vm.tdl

:begin :instance.

parent_n1 := intr_noun_word_le &
  [ STEM < "parent" >,
    SYNSEM.LOCAL.CONT.KEY _parent_rel ].

:end :instance.


; <<>>
; >> paris.n.1.vm.tdl
; paris.n.1.vm.tdl

:begin :instance.

Paris_n1 := proper_le &
  [ STEM < "paris" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'Paris ].

:end :instance.


; <<>>
; >> parish.n.1.vm.tdl
; parish.n.1.vm.tdl

:begin :instance.

parish_n1 := intr_noun_word_le &
  [ STEM < "parish" >,
    SYNSEM.LOCAL.CONT.KEY _parish_rel ].

:end :instance.


; <<>>
; >> part.n.1.vm.tdl
; part.n.1.vm.tdl

:begin :instance.

part_n1 := intr_noun_word_le &
  [ STEM < "part" >,
    SYNSEM.LOCAL.CONT.KEY _part_rel ].

:end :instance.


; <<>>
; >> partially.a.1.vm.tdl
; partially.a.1.vm.tdl

:begin :instance.

partially_adv1 := adv_pre_word_le &
  [ STEM < "partially" >,
    SYNSEM.LOCAL.CONT.KEY _partially_rel ].

:end :instance.


; <<>>
; >> participant.n.1.vm.tdl
; participant.n.1.vm.tdl

:begin :instance.

participant_n1 := intr_noun_word_le &
  [ STEM < "participant" >,
    SYNSEM.LOCAL.CONT.KEY _participant_rel ].

:end :instance.


; <<>>
; >> participate.in.v.1.vm.tdl
; participate.in.v.1.vm.tdl

:begin :instance.

participate_in_v1 := mv_empty_prep*_intrans_le &
  [ STEM < "participate" >,
    SYNSEM.LOCAL.CONT [ KEY _participate_in_rel,
			COMPKEY _in_rel ] ].

:end :instance.


; <<>>
; >> particular.a.1.vm.tdl
; particular.a.1.vm.tdl

:begin :instance.

particular_a1 := intrans_adj_le &
  [ STEM < "particular" >,
    SYNSEM.LOCAL.CONT.KEY _particular_rel ].

:end :instance.


; <<>>
; >> particularly.a.1.vm.tdl
; particularly.a.1.vm.tdl

:begin :instance.

particularly_adv1 := adv_pre_word_le &
  [ STEM < "particularly" >,
    SYNSEM.LOCAL.CONT.KEY _particularly_rel ].

:end :instance.


; <<>>
; >> partly.a.1.tdl
; partly.a.1.tdl

:begin :instance.

partly_deg := degree_spec_le &
  [ STEM < "partly" >,
    SYNSEM.LOCAL.CONT.KEY _partly_deg_rel ].

:end :instance.


; <<>>
; >> partly.a.2.tdl
; partly.a.2.tdl

:begin :instance.

partly := adv_pre_word_le &
  [ STEM < "partly" >,
    SYNSEM.LOCAL.CONT.KEY _partly_rel ].

:end :instance.


; <<>>
; >> partner.n.1.vm.tdl
; partner.n.1.vm.tdl

:begin :instance.

partner_n1 := intr_noun_word_le &
  [ STEM < "partner" >,
    SYNSEM.LOCAL.CONT.KEY _partner_rel ].

:end :instance.


; <<>>
; >> party.n.1.vm.tdl
; party.n.1.vm.tdl

:begin :instance.

party_n1 := intr_noun_word_le &
  [ STEM < "party" >,
    SYNSEM.LOCAL.CONT.KEY _party_rel ].

:end :instance.


; <<>>
; >> pass.on.v.1.vm.tdl
; pass.on.v.1.vm.tdl

:begin :instance.

pass_on_v1 := mv_particle_np_le &
  [ STEM < "pass" >,
    SYNSEM.LOCAL.CONT [ KEY _pass_on_rel,
			COMPKEY _on_rel ] ].

:end :instance.


; <<>>
; >> pass.v.1.vm.tdl
; pass.v.1.vm.tdl

:begin :instance.

pass_v1 := mv_np_trans_le &
  [ STEM < "pass" >,
    SYNSEM.LOCAL.CONT.KEY _pass_rel  ].

:end :instance.


; <<>>
; >> past.p.1.tdl
; past.p.1.tdl

:begin :instance.

past_hour := hour_prep_word_le &
  [ STEM < "past" >,
    SYNSEM.LOCAL.CONT.KEY _after_hour_rel ].

:end :instance.


; <<>>
; >> patch.n.1.vm.tdl
; patch.n.1.vm.tdl

:begin :instance.

patch_n1 := intr_noun_word_le &
  [ STEM < "patch" >,
    SYNSEM.LOCAL.CONT.KEY _patch_rel ].

:end :instance.


; <<>>
; >> path.n.1.vm.tdl
; path.n.1.vm.tdl

:begin :instance.

path_n1 := intr_noun_word_le &
  [ STEM < "path" >,
    SYNSEM.LOCAL.CONT.KEY _path_rel ].

:end :instance.


; <<>>
; >> patience.n.1.tdl
; patience.n.1.tdl

:begin :instance.

patience_n1 := massn_le &
  [ STEM < "patience" >,
    SYNSEM.LOCAL.CONT.KEY _patience_rel ].

:end :instance.


; <<>>
; >> pause.n.1.vm.tdl
; pause.n.1.vm.tdl

:begin :instance.

pause_n1 := intr_noun_word_le &
  [ STEM < "pause" >,
    SYNSEM.LOCAL.CONT.KEY _pause_rel ].

:end :instance.


; <<>>
; >> pause.v.1.vm.tdl
; pause.v.1.vm.tdl

:begin :instance.

pause_v1 := mv_unerg_le &
  [ STEM < "pause" >,
    SYNSEM.LOCAL.CONT.KEY _pause_v_rel ].

:end :instance.


; <<>>
; >> pavilion.n.1.vm.tdl
; pavilion.n.1.vm.tdl

:begin :instance.

pavilion_n1 := intr_noun_word_le &
  [ STEM < "pavilion" >,
    SYNSEM.LOCAL.CONT.KEY _pavilion_rel ].

:end :instance.


; <<>>
; >> peaceful.a.1.vm.tdl
; peaceful.a.1.vm.tdl

:begin :instance.

peaceful_a1 := intrans_adj_le &
  [ STEM < "peaceful" >,
    SYNSEM.LOCAL.CONT.KEY _peaceful_rel ].

:end :instance.


; <<>>
; >> peculiar.a.1.vm.tdl
; peculiar.a.1.vm.tdl

:begin :instance.

peculiar_a1 := intrans_adj_le &
  [ STEM < "peculiar" >,
    SYNSEM.LOCAL.CONT.KEY _peculiar_rel ].

:end :instance.


; <<>>
; >> peer.v.1.tdl
; peer.v.1.tdl

:begin :instance.

peer_v1 := mv_prep_intrans_le &
  [ STEM < "peer" >,
    SYNSEM.LOCAL.CONT [ KEY _peer_v_rel,
			COMPKEY dir_rel ] ].

:end :instance.


; <<>>
; >> pen.n.1.vm.tdl
; pen.n.1.vm.tdl

:begin :instance.

pen_n1 := intr_noun_word_le &
  [ STEM < "pen" >,
    SYNSEM.LOCAL.CONT.KEY _pen_rel ].

:end :instance.


; <<>>
; >> pending.a.1.vm.tdl
; pending.a.1.vm.tdl

:begin :instance.

pending_a1 := intrans_adj_le &
  [ STEM < "pending" >,
    SYNSEM.LOCAL.CONT.KEY _pending_rel ].

:end :instance.


; <<>>
; >> pension.n.1.vm.tdl
; pension.n.1.vm.tdl

:begin :instance.

pension_n1 := intr_noun_word_le &
  [ STEM < "pension" >,
    SYNSEM.LOCAL.CONT.KEY _pension_rel ].

:end :instance.


; <<>>
; >> people.n.1.vm.tdl
; people.n.1.vm.tdl

:begin :instance.

people_n1 := plurn_le &
  [ STEM < "people" >,
    SYNSEM.LOCAL.CONT.KEY _people_rel ].

:end :instance.


; <<>>
; >> per.p.1.tdl
; per.p.1.tdl

:begin :instance.

per_p := prep_le &
  [ STEM < "per" >,
    SYNSEM.LOCAL.CONT.KEY _per_rel ].

:end :instance.


; <<>>
; >> perfect.a.1.vm.tdl
; perfect.a.1.vm.tdl

:begin :instance.

perfect_a1 := intrans_adj_le &
  [ STEM < "perfect" >,
    SYNSEM.LOCAL.CONT.KEY _perfect_adj_rel ].

:end :instance.


; <<>>
; >> perfectly.a.1.vm.tdl
; perfectly.a.1.vm.tdl

:begin :instance.

perfectly_adv1 := adv_post_word_le &
  [ STEM < "perfectly" >,
    SYNSEM.LOCAL.CONT.KEY _perfectly_rel ].

:end :instance.


; <<>>
; >> perfectly.a.2.vm.tdl
; perfectly.a.2.vm.tdl

:begin :instance.

perfectly_deg := degree_spec_le &
  [ STEM < "perfectly" >,
    SYNSEM.LOCAL.CONT.KEY _perfectly_deg_rel ].

:end :instance.


; <<>>
; >> performance.n.1.vm.tdl
; performance.n.1.vm.tdl

:begin :instance.

performance_n1 := intr_noun_word_le &
  [ STEM < "performance" >,
    SYNSEM.LOCAL.CONT.KEY _performance_rel ].

:end :instance.


; <<>>
; >> perhaps.a.1.vm.tdl
; perhaps.a.1.vm.tdl

:begin :instance.

perhaps_adv1 := adv_word_le &
  [ STEM < "perhaps" >,
    SYNSEM.LOCAL.CONT.KEY _perhaps_rel ].

:end :instance.


; <<>>
; >> period.n.1.vm.tdl
; period.n.1.vm.tdl

:begin :instance.

period_n1 := intr_noun_word_le &
  [ STEM < "period" >,
    SYNSEM.LOCAL.CONT.KEY _period_rel ].

:end :instance.


; <<>>
; >> permanent.a.1.vm.tdl
; permanent.a.1.vm.tdl

:begin :instance.

permanent_a1 := intrans_adj_le &
  [ STEM < "permanent" >,
    SYNSEM.LOCAL.CONT.KEY _permanent_rel ].

:end :instance.


; <<>>
; >> permeate.into.v.1.tdl
; permeate.into.v.1.tdl

:begin :instance.

permeate_into_v1 := mv_empty_prep_intrans_le &
  [ STEM < "permeate" >,
    SYNSEM.LOCAL.CONT [ KEY _permeate_into_rel,
			COMPKEY _into_rel ] ].

:end :instance.


; <<>>
; >> permeate.v.1.tdl
; permeate.v.1.tdl

:begin :instance.

permeate_v1 := mv_np_trans_le &
  [ STEM < "permeate" >,
    SYNSEM.LOCAL.CONT.KEY _permeate_rel ].

:end :instance.


; <<>>
; >> permit.v.1.vm.tdl
; permit.v.1.vm.tdl

:begin :instance.

permit_v1 := mv_obj_equi_le &
  [ STEM < "permit" >,
    SYNSEM.LOCAL.CONT.KEY _permit_rel ].

:end :instance.


; <<>>
; >> person.n.1.vm.tdl
; person.n.1.vm.tdl

:begin :instance.

person_n1 := intr_noun_word_le &
  [ STEM < "person" >,
    SYNSEM.LOCAL.CONT.KEY _person_rel ].

:end :instance.


; <<>>
; >> personal.a.1.vm.tdl
; personal.a.1.vm.tdl

:begin :instance.

personal_a1 := intrans_adj_le &
  [ STEM < "personal" >,
    SYNSEM.LOCAL.CONT.KEY _personal_rel ].

:end :instance.


; <<>>
; >> personally.a.1.vm.tdl
; personally.a.1.vm.tdl

:begin :instance.

personally_adv1 := adv_pre_word_le &
  [ STEM < "personally" >,
    SYNSEM.LOCAL.CONT.KEY _personally_rel ].

:end :instance.


; <<>>
; >> persuade.v.1.tdl
; persuade.v.1.tdl

:begin :instance.

persuade1 := mv_obj_equi_le &
  [ STEM < "persuade" >,
    SYNSEM.LOCAL.CONT.KEY _persuade2_rel ].

:end :instance.


; <<>>
; >> persuade.v.2.tdl
; persuade.v.2.tdl

:begin :instance.

persuade_v1 := mv_np_trans_cp_le &
  [ STEM < "persuade" >,
    SYNSEM.LOCAL.CONT.KEY _persuade_rel ].

:end :instance.


; <<>>
; >> petz.n.1.vm.tdl
; petz.n.1.vm.tdl

:begin :instance.

Petz_n1 := proper_le &
  [ STEM < "petz" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'Petz ].

:end :instance.


; <<>>
; >> pfaff.n.1.vm.tdl
; pfaff.n.1.vm.tdl

:begin :instance.

Pfaff_n1 := proper_le &
  [ STEM < "pfaff" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'Pfaff ].

:end :instance.


; <<>>
; >> phd.n.1.tdl
; phd.n.1.tdl

:begin :instance.

phd_n1 := intr_noun_word_le &
  [ STEM < "phd" >,
    SYNSEM.LOCAL.CONT.KEY _phd_rel ].

:end :instance.


; <<>>
; >> pheasant.n.1.vm.tdl
; pheasant.n.1.vm.tdl

:begin :instance.

pheasant_n1 := intr_noun_word_le &
  [ STEM < "pheasant" >,
    SYNSEM.LOCAL.CONT.KEY _pheasant_rel ].

:end :instance.


; <<>>
; >> phone.n.1.vm.tdl
; phone.n.1.vm.tdl

:begin :instance.

phone_n1 := intr_noun_word_le &
  [ STEM < "phone" >,
    SYNSEM.LOCAL.CONT.KEY _phone_rel ].

:end :instance.


; <<>>
; >> photo.n.1.vm.tdl
; photo.n.1.vm.tdl

:begin :instance.

photo_n1 := intr_noun_word_le &
  [ STEM < "photo" >,
    SYNSEM.LOCAL.CONT.KEY _photograph_rel ].

:end :instance.


; <<>>
; >> photocopier.n.1.vm.tdl
; photocopier.n.1.vm.tdl

:begin :instance.

photocopier_n1 := intr_noun_word_le &
  [ STEM < "photocopier" >,
    SYNSEM.LOCAL.CONT.KEY _photocopier_rel ].

:end :instance.


; <<>>
; >> photograph.n.1.vm.tdl
; photograph.n.1.vm.tdl

:begin :instance.

photograph_n1 := intr_noun_word_le &
  [ STEM < "photograph" >,
    SYNSEM.LOCAL.CONT.KEY _photograph_rel ].

:end :instance.


; <<>>
; >> pick.up.v.1.vm.tdl
; pick.up.v.1.vm.tdl

:begin :instance.

pick_up_v1 := mv_particle_np_le &
  [ STEM < "pick" >,
    SYNSEM.LOCAL.CONT [ KEY _pick_up_rel,
			COMPKEY _up_rel ] ].

:end :instance.


; <<>>
; >> piece.n.1.vm.tdl
; piece.n.1.vm.tdl

:begin :instance.

piece_n1 := intr_noun_word_le &
  [ STEM < "piece" >,
    SYNSEM.LOCAL.CONT.KEY _piece_rel ].

:end :instance.


; <<>>
; >> pig.n.1.vm.tdl
; pig.n.1.vm.tdl

:begin :instance.

pig_n1 := intr_noun_word_le &
  [ STEM < "pig" >,
    SYNSEM.LOCAL.CONT.KEY _pig_rel ].

:end :instance.


; <<>>
; >> pillau.n.1.vm.tdl
; pillau.n.1.vm.tdl

:begin :instance.

Pillau_n1 := proper_le &
  [ STEM < "pillau" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'Pillau ].

:end :instance.


; <<>>
; >> pity.n.1.vm.tdl
; pity.n.1.vm.tdl

:begin :instance.

pity_n1 := intr_noun_word_le &
  [ STEM < "pity" >,
    SYNSEM.LOCAL.CONT.KEY _pity_n_rel ].

:end :instance.


; <<>>
; >> place.n.1.vm.tdl
; place.n.1.vm.tdl

:begin :instance.

place_n1 := intr_noun_word_le &
  [ STEM < "place" >,
    SYNSEM.LOCAL.CONT.KEY _place_rel ].

:end :instance.


; <<>>
; >> plain.a.1.vm.tdl
; plain.a.1.vm.tdl

:begin :instance.

plain_a1 := intrans_adj_le &
  [ STEM < "plain" >,
    SYNSEM.LOCAL.CONT.KEY _plain_rel ].

:end :instance.


; <<>>
; >> plainly.a.1.vm.tdl
; plainly.a.1.vm.tdl

:begin :instance.

plainly_adv1 := adv_pre_word_le &
  [ STEM < "plainly" >,
    SYNSEM.LOCAL.CONT.KEY _plainly_rel ].

:end :instance.


; <<>>
; >> plan.for.v.2.vm.tdl
; plan.for.v.2.vm.tdl

:begin :instance.

plan_for_v2 := mv_empty_prep_intrans_le &
  [ STEM < "plan" >,
    SYNSEM.LOCAL.CONT [ KEY _plan_for_rel,
			OCOMPKEY _for_rel ] ].

:end :instance.


; <<>>
; >> plan.n.1.vm.tdl
; plan.n.1.vm.tdl

:begin :instance.

plan_n1 := intr_noun_word_le &
  [ STEM < "plan" >,
    SYNSEM.LOCAL.CONT.KEY _plan_n_rel ].

:end :instance.


; <<>>
; >> plan.on.v.2.vm.tdl
; plan.on.v.2.vm.tdl

:begin :instance.

plan_on_v2 := mv_empty_prep_intrans_le &
  [ STEM < "plan" >,
    SYNSEM.LOCAL.CONT [ KEY _plan_on_rel,
 			OCOMPKEY _on_rel ] ].

:end :instance.


; <<>>
; >> plan.v.1.vm.tdl
; plan.v.1.vm.tdl

:begin :instance.

plan_v1 := mv_np*_trans_le &
  [ STEM < "plan" >,
    SYNSEM.LOCAL.CONT.KEY _plan_v_rel ].

:end :instance.


; <<>>
; >> plan.v.2.vm.tdl
; plan.v.2.vm.tdl

:begin :instance.

plan_v2 := mv_subj_equi_le &
  [ STEM < "plan" >,
    SYNSEM.LOCAL.CONT.KEY _plan_v2_rel ].

:end :instance.


; <<>>
; >> plane.n.1.vm.tdl
; plane.n.1.vm.tdl

:begin :instance.

plane_n1 := intr_noun_word_le &
  [ STEM < "plane" >,
    SYNSEM.LOCAL.CONT.KEY _plane_rel ].

:end :instance.


; <<>>
; >> platform.n.1.vm.tdl
; platform.n.1.vm.tdl

:begin :instance.

platform_n1 := intr_noun_word_le &
  [ STEM < "platform" >,
    SYNSEM.LOCAL.CONT.KEY _platform_rel ].

:end :instance.


; <<>>
; >> plauen.n.1.vm.tdl
; plauen.n.1.vm.tdl

:begin :instance.

Plauen_n1 := proper_le &
  [ STEM < "plauen" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'Plauen ].

:end :instance.


; <<>>
; >> play.n.1.vm.tdl
; play.n.1.vm.tdl

:begin :instance.

play_n1 := intr_noun_word_le &
  [ STEM < "play" >,
    SYNSEM.LOCAL.CONT.KEY _play_rel ].

:end :instance.


; <<>>
; >> play.v.1.vm.tdl
; play.v.1.vm.tdl

:begin :instance.

play_v1 := mv_np*_trans_le &
  [ STEM < "play" >,
    SYNSEM.LOCAL.CONT.KEY _play_v_rel ].

:end :instance.


; <<>>
; >> pleasant.a.1.vm.tdl
; pleasant.a.1.vm.tdl

:begin :instance.

pleasant_a1 := intrans_adj_le &
  [ STEM < "pleasant" >,
    SYNSEM.LOCAL.CONT.KEY _pleasant_rel ].

:end :instance.


; <<>>
; >> pleasantly.a.1.vm.tdl
; pleasantly.a.1.vm.tdl

:begin :instance.

pleasantly := adv_word_le &
  [ STEM < "pleasantly" >,
    SYNSEM.LOCAL.CONT.KEY _pleasantly_rel ].

:end :instance.


; <<>>
; >> please.c.1.vm.tdl
; please.c.1.vm.tdl

:begin :instance.

please_root := disc_adv_le &
  [ STEM < "please" >,
    SYNSEM.LOCAL.CONT.KEY.EXCL 'please_polite ].

:end :instance.

; <<>>
; >> please.v.1.vm.tdl
; please.v.1.vm.tdl

:begin :instance.

please_v1 := mv_np_trans_le &
  [ STEM < "please" >,
    SYNSEM.LOCAL.CONT.KEY _please_rel ].

:end :instance.


; <<>>
; >> please.a.1.vm.tdl
; please.a.1.vm.tdl

:begin :instance.

please_adv1 := adv_pre_word_le &
  [ STEM < "please" >,
    SYNSEM.LOCAL.CONT.KEY _please_adv_rel ].

:end :instance.


; <<>>
; >> pleased.a.1.vm.tdl
; pleased.a.1.vm.tdl

:begin :instance.

pleased_a1 := intrans_adj_le &
  [ STEM < "pleased" >,
    SYNSEM.LOCAL.CONT.KEY _pleased_rel ].

:end :instance.


; <<>>
; >> pleasure.n.1.vm.tdl
; pleasure.n.1.vm.tdl

:begin :instance.

pleasure_n1 := intr_noun_word_le &
  [ STEM < "pleasure" >,
    SYNSEM.LOCAL.CONT.KEY _pleasure_rel ].

:end :instance.


; <<>>
; >> plus.c.1.tdl
; plus.c.1.tdl

:begin :instance.

plus_conj := coord_c_le &
  [ STEM < "plus" >,
    SYNSEM.LOCAL [ CONJ complex-conj & [ CHEAD [ LEFT < cnil >,
                                                 RELTN _plus_rel ] ],
                   AGR.PNG.PN 3pl ] ].
:end :instance.


; <<>>
; >> p.m.n.1.tdl
; p.m.n.1.tdl

:begin :instance.

pm_temp := am_pm_word_le &
  [ STEM < "p.m." >,
    SYNSEM.LOCAL.CONT.KEY pm_rel ].

:end :instance.


; <<>>
; >> p.m.n.2.tdl
; p.m.n.2.tdl

:begin :instance.

pm_temp_2 := am_pm_word_le &
  [ STEM < "pm" >,
    SYNSEM.LOCAL.CONT.KEY pm_rel ].

:end :instance.


; <<>>
; >> point.n.1.vm.tdl
; point.n.1.vm.tdl

:begin :instance.

point_n1 := intr_noun_word_le &
  [ STEM < "point" >,
    SYNSEM.LOCAL.CONT.KEY _point_rel ].

:end :instance.


; <<>>
; >> pointless.a.1.vm.tdl
; pointless.a.1.vm.tdl

:begin :instance.

pointless_a1 := intrans_adj_le &
  [ STEM < "pointless" >,
    SYNSEM.LOCAL.CONT.KEY _pointless_rel ].

:end :instance.


; <<>>
; >> poor.a.1.vm.tdl
; poor.a.1.vm.tdl

:begin :instance.

poor_a1 := intrans_adj_le &
  [ STEM < "poor" >,
    SYNSEM.LOCAL.CONT.KEY _poor_rel ].

:end :instance.


; <<>>
; >> portable.a.1.vm.tdl
; portable.a.1.vm.tdl

:begin :instance.

portable_a1 := intrans_adj_le &
  [ STEM < "portable" >,
    SYNSEM.LOCAL.CONT.KEY _portable_rel ].

:end :instance.


; <<>>
; >> position.n.1.vm.tdl
; position.n.1.vm.tdl

:begin :instance.

position_n1 := intr_noun_word_le &
  [ STEM < "position" >,
    SYNSEM.LOCAL.CONT.KEY _position_rel ].

:end :instance.


; <<>>
; >> positive.a.1.vm.tdl
; positive.a.1.vm.tdl

:begin :instance.

positive_a1 := intrans_adj_le &
  [ STEM < "positive" >,
    SYNSEM.LOCAL.CONT.KEY _positive_rel ].

:end :instance.


; <<>>
; >> possibility.n.1.vm.tdl
; possibility.n.1.vm.tdl

:begin :instance.

possibility_n1 := intr_noun_word_le &
  [ STEM < "possibility" >,
    SYNSEM.LOCAL.CONT.KEY _possibility_rel ].

:end :instance.


; <<>>
; >> possible.a.1.vm.tdl
; possible.a.1.vm.tdl

:begin :instance.

possible_a1 := intrans_adj_le &
  [ STEM < "possible" >,
    SYNSEM.LOCAL.CONT.KEY _possible_rel ].

:end :instance.


; <<>>
; >> possible.a.2.vm.tdl
; possible.a.2.vm.tdl

:begin :instance.

possible_a2 := reg_adj_atrans_le &
  [ STEM < "possible" >,
    SYNSEM.LOCAL.CONT.KEY _possible2_rel ].

:end :instance.


; <<>>
; >> possibly.a.1.vm.tdl
; possibly.a.1.vm.tdl

:begin :instance.

possibly_adv1 := adv_pre_word_le &
  [ STEM < "possibly" >,
    SYNSEM.LOCAL.CONT.KEY _possibly_rel ].

:end :instance.


; <<>>
; >> post-meeting.a.1.vm.tdl
; post-meeting.a.1.vm.tdl

:begin :instance.

post-meeting_a1 := intrans_adj_le &
  [ STEM < "post-meeting" >,
    SYNSEM.LOCAL.CONT.KEY _post-meeting_rel ].

:end :instance.


; <<>>
; >> post-mortem.n.1.vm.tdl
; post-mortem.n.1.vm.tdl

:begin :instance.

post-mortem_n1 := intr_noun_word_le &
  [ STEM < "post-mortem" >,
    SYNSEM.LOCAL.CONT.KEY _postmortem_rel ].

:end :instance.


; <<>>
; >> post-trip.a.1.vm.tdl
; post-trip.a.1.vm.tdl

:begin :instance.

post-trip_a1 := intrans_adj_le &
  [ STEM < "post-trip" >,
    SYNSEM.LOCAL.CONT.KEY _post_trip_rel ].

:end :instance.


; <<>>
; >> poster.n.1.vm.tdl
; poster.n.1.vm.tdl

:begin :instance.

poster_n1 := intr_noun_word_le &
  [ STEM < "poster" >,
    SYNSEM.LOCAL.CONT.KEY _poster_rel ].

:end :instance.


; <<>>
; >> posterior.a.1.vm.tdl
; posterior.a.1.vm.tdl

:begin :instance.

posterior_a1 := intrans_adj_le &
  [ STEM < "posterior" >,
    SYNSEM.LOCAL.CONT.KEY _posterior_rel ].

:end :instance.


; <<>>
; >> postpone.v.1.vm.tdl
; postpone.v.1.vm.tdl

:begin :instance.

postpone_v1 := mv_np_trans_le &
  [ STEM < "postpone" >,
    SYNSEM.LOCAL.CONT.KEY _postpone_rel ].

:end :instance.


; <<>>
; >> potential.a.1.vm.tdl
; potential.a.1.vm.tdl

:begin :instance.

potential_a1 := intrans_adj_le &
  [ STEM < "potential" >,
    SYNSEM.LOCAL.CONT.KEY _potential_rel ].

:end :instance.


; <<>>
; >> pound.n.1.tdl
; pound.n.1.tdl

:begin :instance.

pound_n1 := intr_noun_word_le &
  [ STEM < "pound" >,
    SYNSEM.LOCAL.CONT.KEY _pound_rel ].

:end :instance.


; <<>>
; >> practicable.a.1.vm.tdl
; practicable.a.1.vm.tdl

:begin :instance.

practicable_a1 := intrans_adj_le &
  [ STEM < "practicable" >,
    SYNSEM.LOCAL.CONT.KEY _practicable_rel ].

:end :instance.


; <<>>
; >> practical.a.1.vm.tdl
; practical.a.1.vm.tdl

:begin :instance.

practical_a1 := intrans_adj_le &
  [ STEM < "practical" >,
    SYNSEM.LOCAL.CONT.KEY _practical_rel ].

:end :instance.


; <<>>
; >> practically.a.1.vm.tdl
; practically.a.1.vm.tdl

:begin :instance.

practically_adv1 := adv_pre_word_le &
  [ STEM < "practically" >,
    SYNSEM.LOCAL.CONT.KEY _practically_rel ].

:end :instance.


; <<>>
; >> practice.n.1.vm.tdl
; practice.n.1.vm.tdl

:begin :instance.

practice_n1 := intr_noun_word_le &
  [ STEM < "practice" >,
    SYNSEM.LOCAL.CONT.KEY _practice_rel ].

:end :instance.


; <<>>
; >> practice.upon.v.1.tdl
; practice.upon.v.1.tdl

:begin :instance.

practice_upon_v1 := mv_empty_prep_intrans_le &
  [ STEM < "practice" >,
    SYNSEM.LOCAL.CONT [ KEY _practice_upon_rel,
			COMPKEY _upon_rel ] ].

:end :instance.


; <<>>
; >> practice.v.1.tdl
; practice.v.1.tdl

:begin :instance.

practice_v1 := mv_np*_trans_le &
  [ STEM < "practice" >,
    SYNSEM.LOCAL.CONT.KEY _practice_v_rel ].

:end :instance.


; <<>>
; >> practise.upon.v.1.tdl
; practise.upon.v.1.tdl

:begin :instance.

practise_upon_v1 := mv_empty_prep_intrans_le &
  [ STEM < "practise" >,
    SYNSEM.LOCAL.CONT [ KEY _practice_upon_rel,
			COMPKEY _upon_rel ] ].

:end :instance.


; <<>>
; >> practise.v.1.tdl
; practise.v.1.tdl

:begin :instance.

practise_v1 := mv_np*_trans_le &
  [ STEM < "practise" >,
    SYNSEM.LOCAL.CONT.KEY _practice_v_rel ].

:end :instance.


; <<>>
; >> prayer.n.1.vm.tdl
; prayer.n.1.vm.tdl

:begin :instance.

prayer_n1 := intr_noun_word_le &
  [ STEM < "prayer" >,
    SYNSEM.LOCAL.CONT.KEY _prayer_rel ].

:end :instance.


; <<>>
; >> prayer.n.2.vm.tdl
; prayer.n.2.vm.tdl

:begin :instance.

prayer_n2 := massn_le &
  [ STEM < "prayer" >,
    SYNSEM.LOCAL.CONT.KEY _prayer_rel ].

:end :instance.


; <<>>
; >> precautionarily.a.1.vm.tdl
; precautionarily.a.1.vm.tdl

:begin :instance.

precautionarily := adv_word_le &
  [ STEM < "precautionarily" >,
    SYNSEM.LOCAL.CONT.KEY _precautionarily_rel ].

:end :instance.


; <<>>
; >> precautionary.a.1.vm.tdl
; precautionary.a.1.vm.tdl

:begin :instance.

precautionary_a1 := intrans_adj_le &
  [ STEM < "precautionary" >,
    SYNSEM.LOCAL.CONT.KEY _precautionary_rel ].

:end :instance.


; <<>>
; >> preceding.a.1.vm.tdl
; preceding.a.1.vm.tdl

:begin :instance.

preceding_a1 := intrans_adj_le &
  [ STEM < "preceding" >,
    SYNSEM.LOCAL.CONT.KEY _preceding_rel ].

:end :instance.


; <<>>
; >> precise.a.1.vm.tdl
; precise.a.1.vm.tdl

:begin :instance.

precise_a1 := intrans_adj_le &
  [ STEM < "precise" >,
    SYNSEM.LOCAL.CONT.KEY _precise_rel ].

:end :instance.


; <<>>
; >> precisely.a.1.vm.tdl
; precisely.a.1.vm.tdl

:begin :instance.

precisely := adv_word_le &
  [ STEM < "precisely" >,
    SYNSEM.LOCAL.CONT.KEY _precisely_rel ].

:end :instance.


; <<>>
; >> prefer.v.1.vm.tdl
; prefer.v.1.vm.tdl

:begin :instance.

prefer_v1 := mv_np_trans_le &
  [ STEM < "prefer" >,
    SYNSEM.LOCAL.CONT.KEY _prefer_rel ].

:end :instance.


; <<>>
; >> prefer.v.2.vm.tdl
; prefer.v.2.vm.tdl

:begin :instance.

prefer_v2 := mv_expl_obj_cp_le &
  [ STEM < "prefer" >,
    SYNSEM.LOCAL.CONT.KEY _prefer_rel ].

:end :instance.


; <<>>
; >> prefer.v.3.vm.tdl
; prefer.v.3.vm.tdl

:begin :instance.

prefer_v3 := mv_subj_equi_le &
  [ STEM < "prefer" >,
    SYNSEM.LOCAL.CONT.KEY _prefer2_rel ].

:end :instance.


; <<>>
; >> preferable.a.1.vm.tdl
; preferable.a.1.vm.tdl

:begin :instance.

preferable_a1 := intrans_adj_le &
  [ STEM < "preferable" >,
    SYNSEM.LOCAL.CONT.KEY _preferable_rel ].

:end :instance.


; <<>>
; >> preferably.a.1.vm.tdl
; preferably.a.1.vm.tdl

:begin :instance.

preferably_adv1 := adv_pre_word_le &
  [ STEM < "preferably" >,
    SYNSEM.LOCAL.CONT.KEY _preferably_rel ].

:end :instance.


; <<>>
; >> preference.n.1.vm.tdl
; preference.n.1.vm.tdl

:begin :instance.

preference_n1 := intr_noun_word_le &
  [ STEM < "preference" >,
    SYNSEM.LOCAL.CONT.KEY _preference_rel ].

:end :instance.


; <<>>
; >> preliminarily.a.1.vm.tdl
; preliminarily.a.1.vm.tdl

:begin :instance.

preliminarily := adv_word_le &
  [ STEM < "preliminarily" >,
    SYNSEM.LOCAL.CONT.KEY _preliminarily_rel ].

:end :instance.


; <<>>
; >> preliminary.a.1.vm.tdl
; preliminary.a.1.vm.tdl

:begin :instance.

preliminary_a1 := intrans_adj_le &
  [ STEM < "preliminary" >,
    SYNSEM.LOCAL.CONT.KEY _preliminary_rel ].

:end :instance.


; <<>>
; >> preparation.n.1.vm.tdl
; preparation.n.1.vm.tdl

:begin :instance.

preparation_n1 := deverbal_noun_intr_word_le &
  [ STEM < "preparation" >,
    SYNSEM.LOCAL.CONT.ALTKEY _prepare_rel ].

:end :instance.


; <<>>
; >> preparation.n.2.vm.tdl
; preparation.n.2.vm.tdl

:begin :instance.

preparation_n2 := deverbal_massn_le &
  [ STEM < "preparation" >,
    SYNSEM.LOCAL.CONT.ALTKEY _prepare_rel ].

:end :instance.


; <<>>
; >> preparatory.a.1.vm.tdl
; preparatory.a.1.vm.tdl

:begin :instance.

preparatory_a1 := intrans_adj_le &
  [ STEM < "preparatory" >,
    SYNSEM.LOCAL.CONT.KEY _preparatory_rel ].

:end :instance.


; <<>>
; >> prepare.v.1.vm.tdl
; prepare.v.1.vm.tdl

:begin :instance.

prepare_v1 := mv_np*_trans_le &
  [ STEM < "prepare" >,
    SYNSEM.LOCAL.CONT.KEY _prepare_rel ].

:end :instance.


; <<>>
; >> prepare.for.v.1.vm.tdl
; prepare.for.v.1.vm.tdl

:begin :instance.

prepare_for_v1 := mv_empty_prep_intrans_le &
  [ STEM < "prepare" >,
    SYNSEM.LOCAL.CONT [ KEY _prepare_for_rel,
			OCOMPKEY _for_rel ] ].

:end :instance.


; <<>>
; >> prepare.v.2.vm.tdl
; prepare.v.2.vm.tdl

:begin :instance.

prepare_v2 := mv_subj_equi_le &
  [ STEM < "prepare" >,
    SYNSEM.LOCAL.CONT.KEY _prepare2_rel ].

:end :instance.


; <<>>
; >> prepared.a.1.vm.tdl
; prepared.a.1.vm.tdl

:begin :instance.

prepared_a1 := intrans_adj_le &
  [ STEM < "prepared" >,
    SYNSEM.LOCAL.CONT.KEY _prepared_rel ].

:end :instance.


; <<>>
; >> presence.n.1.vm.tdl
; presence.n.1.vm.tdl

:begin :instance.

presence_n1 := intr_noun_word_le &
  [ STEM < "presence" >,
    SYNSEM.LOCAL.CONT.KEY _presence_rel ].

:end :instance.


; <<>>
; >> present.a.1.vm.tdl
; present.a.1.vm.tdl

:begin :instance.

present_a1 := intrans_adj_le &
  [ STEM < "present" >,
    SYNSEM.LOCAL.CONT.KEY _present_adj_rel ].

:end :instance.


; <<>>
; >> present.n.1.vm.tdl
; present.n.1.vm.tdl

:begin :instance.

present_n1 := intr_noun_word_le &
  [ STEM < "present" >,
    SYNSEM.LOCAL.CONT.KEY _present_n_rel ].

:end :instance.


; <<>>
; >> present.v.1.vm.tdl
; present.v.1.vm.tdl

:begin :instance.

present_v1 := mv_to*_trans_le &
  [ STEM < "present" >,
    SYNSEM.LOCAL.CONT.KEY _present_v_rel ].

:end :instance.


; <<>>
; >> present.with.v.1.vm.tdl
; present.with.v.1.vm.tdl

:begin :instance.

present_with_v1 := mv_prep_trans_le &
  [ STEM < "present" >,
    SYNSEM.LOCAL.CONT [ KEY _present_with_rel,
			OCOMPKEY _with_rel ] ].

:end :instance.


; <<>>
; >> presentation.n.1.vm.tdl
; presentation.n.1.vm.tdl

:begin :instance.

presentation_n1 := intr_noun_word_le &
  [ STEM < "presentation" >,
    SYNSEM.LOCAL.CONT.KEY _presentation_rel ].

:end :instance.


; <<>>
; >> presently.a.1.vm.tdl
; presently.a.1.vm.tdl

:begin :instance.

presently := adv_word_le &
  [ STEM < "presently" >,
    SYNSEM.LOCAL.CONT.KEY _presently_rel ].

:end :instance.


; <<>>
; >> press.v.1.tdl
; press.v.1.tdl

:begin :instance.

press_v1 := mv_np_trans_le &
  [ STEM < "press" >,
    SYNSEM.LOCAL.CONT.KEY _press_v_rel ].

:end :instance.


; <<>>
; >> press.n.1.vm.tdl
; press.n.1.vm.tdl

:begin :instance.

press_n1 := intr_noun_word_le &
  [ STEM < "press" >,
    SYNSEM.LOCAL.CONT.KEY _press_rel ].

:end :instance.


; <<>>
; >> pressure.n.1.vm.tdl
; pressure.n.1.vm.tdl

:begin :instance.

pressure_n1 := massn_le &
  [ STEM < "pressure" >,
    SYNSEM.LOCAL.CONT.KEY _pressure_rel ].

:end :instance.


; <<>>
; >> pretty.a.1.vm.tdl
; pretty.a.1.vm.tdl

:begin :instance.

pretty_a1 := intrans_adj_le &
  [ STEM < "pretty" >,
    SYNSEM.LOCAL.CONT.KEY _pretty_adj_rel ].

:end :instance.


; <<>>
; >> pretty.a.2.tdl
; pretty.a.2.tdl

:begin :instance.

pretty_deg := degree_spec_le &
  [ STEM < "pretty" >,
    SYNSEM.LOCAL.CONT.KEY _pretty_rel ].

:end :instance.


; <<>>
; >> prevent.v.1.vm.tdl
; prevent.v.1.vm.tdl

:begin :instance.

prevent_v1 := mv_np_trans_le &
  [ STEM < "prevent" >,
    SYNSEM.LOCAL.CONT.KEY _prevent_rel ].

:end :instance.


; <<>>
; >> previous.a.1.vm.tdl
; previous.a.1.vm.tdl

:begin :instance.

previous_a1 := intrans_adj_le &
  [ STEM < "previous" >,
    SYNSEM.LOCAL.CONT.KEY _previous_rel ].

:end :instance.


; <<>>
; >> previously.a.1.vm.tdl
; previously.a.1.vm.tdl

:begin :instance.

previously_adv1 := adv_pre_word_le &
  [ STEM < "previously" >,
    SYNSEM.LOCAL.CONT.KEY _previously_rel ].

:end :instance.


; <<>>
; >> price.n.1.vm.tdl
; price.n.1.vm.tdl

:begin :instance.

price_n1 := intr_noun_word_le &
  [ STEM < "price" >,
    SYNSEM.LOCAL.CONT.KEY _price_rel ].

:end :instance.


; <<>>
; >> principal.a.1.vm.tdl
; principal.a.1.vm.tdl

:begin :instance.

principal_a1 := intrans_adj_le &
  [ STEM < "principal" >,
    SYNSEM.LOCAL.CONT.KEY _principal_rel ].

:end :instance.


; <<>>
; >> principally.a.1.vm.tdl
; principally.a.1.vm.tdl

:begin :instance.

principally_adv1 := adv_pre_word_le &
  [ STEM < "principally" >,
    SYNSEM.LOCAL.CONT.KEY _principally_rel ].

:end :instance.


; <<>>
; >> principle.n.1.vm.tdl
; principle.n.1.vm.tdl

:begin :instance.

principle_n1 := intr_noun_word_le &
  [ STEM < "principle" >,
    SYNSEM.LOCAL.CONT.KEY _principle_rel ].

:end :instance.


; <<>>
; >> prior.to.p.1.tdl
; prior.to.p.1.tdl

:begin :instance.

prior_to := prep_mle1 &
  [ STEM < "prior", "to" >,
    SYNSEM.LOCAL.CONT.KEY _prior_to_rel ].

:end :instance.


; <<>>
; >> prior.to.p.2.tdl
; prior.to.p.2.tdl

:begin :instance.

prior_to_temp := before_prep_mle1 &
  [ STEM < "prior", "to" >,
    SYNSEM.LOCAL.CONT.KEY _prior_to_rel ].

:end :instance.


; <<>>
; >> private.a.1.vm.tdl
; private.a.1.vm.tdl

:begin :instance.

private_a1 := intrans_adj_le &
  [ STEM < "private" >,
    SYNSEM.LOCAL.CONT.KEY _private_rel ].

:end :instance.


; <<>>
; >> privately.a.1.vm.tdl
; privately.a.1.vm.tdl

:begin :instance.

privately_adv1 := vp_adv_post_word_le &
  [ STEM < "privately" >,
    SYNSEM.LOCAL.CONT.KEY _privately_rel ].

:end :instance.


; <<>>
; >> probable.a.1.vm.tdl
; probable.a.1.vm.tdl

:begin :instance.

probable_a1 := intrans_adj_le &
  [ STEM < "probable" >,
    SYNSEM.LOCAL.CONT.KEY _probable_rel ].

:end :instance.


; <<>>
; >> probably.a.1.vm.tdl
; probably.a.1.vm.tdl

:begin :instance.

probably_adv1 := adv_pre_word_le &
  [ STEM < "probably" >,
    SYNSEM.LOCAL.CONT.KEY _probably_rel ].

:end :instance.


; <<>>
; >> problem.n.1.vm.tdl
; problem.n.1.vm.tdl

:begin :instance.

problem_n1 := intr_noun_word_le &
  [ STEM < "problem" >,
    SYNSEM.LOCAL.CONT.KEY _problem_rel ].

:end :instance.


; <<>>
; >> problematic.a.1.vm.tdl
; problematic.a.1.vm.tdl

:begin :instance.

problematic_a1 := intrans_adj_le &
  [ STEM < "problematic" >,
    SYNSEM.LOCAL.CONT.KEY _problematic_rel ].

:end :instance.


; <<>>
; >> problematically.a.1.vm.tdl
; problematically.a.1.vm.tdl

:begin :instance.

problematically := vp_adv_post_word_le &
  [ STEM < "problematically" >,
    SYNSEM.LOCAL.CONT.KEY _problematically_rel ].

:end :instance.


; <<>>
; >> proceed.v.1.vm.tdl
; proceed.v.1.vm.tdl

:begin :instance.

proceed_v1 := mv_unerg_le &
  [ STEM < "proceed" >,
    SYNSEM.LOCAL.CONT.KEY _proceed_rel ].

:end :instance.


; <<>>
; >> proceed.v.2.vm.tdl
; proceed.v.2.vm.tdl

:begin :instance.

proceed_v2 := mv_subj_equi_le &
  [ STEM < "proceed" >,
    SYNSEM.LOCAL.CONT.KEY _proceed2_rel ].

:end :instance.


; <<>>
; >> proceed.with.v.1.vm.tdl
; proceed.with.v.1.vm.tdl

:begin :instance.

proceed_with_v1 := mv_empty_prep_intrans_le &
  [ STEM < "proceed" >,
    SYNSEM.LOCAL.CONT [ KEY _proceed_with_rel,
			COMPKEY _with_rel ] ].

:end :instance.


; <<>>
; >> produce.v.1.vm.tdl
; produce.v.1.vm.tdl

:begin :instance.

produce_v1 := mv_np_trans_le &
  [ STEM < "produce" >,
    SYNSEM.LOCAL.CONT.KEY _produce_rel ].

:end :instance.


; <<>>
; >> product.n.1.vm.tdl
; product.n.1.vm.tdl

:begin :instance.

product_n1 := intr_noun_word_le &
  [ STEM < "product" >,
    SYNSEM.LOCAL.CONT.KEY _product_rel ].

:end :instance.


; <<>>
; >> professor.n.1.vm.tdl
; professor.n.1.vm.tdl

:begin :instance.

professor_n1 := intr_noun_word_le &
  [ STEM < "professor" >,
    SYNSEM.LOCAL.CONT.KEY _professor_rel ].

:end :instance.


; <<>>
; >> program.n.1.vm.tdl
; program.n.1.vm.tdl

:begin :instance.

program_n1 := intr_noun_word_le &
  [ STEM < "program" >,
    SYNSEM.LOCAL.CONT.KEY _program_rel ].

:end :instance.


; <<>>
; >> programmer.n.1.tdl
; programmer.n.1.tdl

:begin :instance.

programmer_n1 := intr_noun_word_le &
  [ STEM < "programmer" >,
    SYNSEM.LOCAL.CONT.KEY _programmer_rel ].

:end :instance.


; <<>>
; >> project.n.1.vm.tdl
; project.n.1.vm.tdl

:begin :instance.

project_n1 := intr_noun_word_le &
  [ STEM < "project" >,
    SYNSEM.LOCAL.CONT.KEY _project_rel ].

:end :instance.


; <<>>
; >> prominent.a.1.vm.tdl
; prominent.a.1.vm.tdl

:begin :instance.

prominent_a1 := intrans_adj_le &
  [ STEM < "prominent" >,
    SYNSEM.LOCAL.CONT.KEY _prominent_rel ].

:end :instance.


; <<>>
; >> promise.v.1.tdl
; promise.v.1.tdl

:begin :instance.

promise1 := mv_anom_equi_le &
  [ STEM < "promise" >,
    SYNSEM.LOCAL.CONT.KEY _promise1_rel ].

:end :instance.


; <<>>
; >> proper.a.1.vm.tdl
; proper.a.1.vm.tdl

:begin :instance.

proper_a1 := intrans_adj_le &
  [ STEM < "proper" >,
    SYNSEM.LOCAL.CONT.KEY _proper_rel ].

:end :instance.


; <<>>
; >> properly.a.1.vm.tdl
; properly.a.1.vm.tdl

:begin :instance.

properly_adv1 := adv_word_le &
  [ STEM < "properly" >,
    SYNSEM.LOCAL.CONT.KEY _properly_rel ].

:end :instance.


; <<>>
; >> proposal.n.1.tdl
; proposal.n.1.tdl

:begin :instance.

proposal_n1 := intr_noun_word_le &
  [ STEM < "proposal" >,
    SYNSEM.LOCAL.CONT.KEY _proposal_rel ].

:end :instance.


; <<>>
; >> propose.v.1.vm.tdl
; propose.v.1.vm.tdl

:begin :instance.

propose_v1 := mv_np_trans_le &
  [ STEM < "propose" >,
    SYNSEM.LOCAL.CONT.KEY _propose_rel ].

:end :instance.


; <<>>
; >> propose.v.2.vm.tdl
; propose.v.2.vm.tdl

:begin :instance.

propose_v2 := mv_cp_non_trans_le &
  [ STEM < "propose" >,
    SYNSEM.LOCAL.CONT.KEY _propose_rel ].

:end :instance.


; <<>>
; >> propose.v.3.vm.tdl
; propose.v.3.vm.tdl

:begin :instance.

propose_v3 := mv_unerg_le &
  [ STEM < "propose" >,
    SYNSEM.LOCAL.CONT.KEY _propose_rel ].

:end :instance.


; <<>>
; >> protection.n.1.vm.tdl
; protection.n.1.vm.tdl

:begin :instance.

protection_n1 := massn_le &
  [ STEM < "protection" >,
    SYNSEM.LOCAL.CONT.KEY _protection_rel ].

:end :instance.


; <<>>
; >> protestant.n.1.vm.tdl
; protestant.n.1.vm.tdl

:begin :instance.

protestant_n1 := intr_noun_word_le &
  [ STEM < "protestant" >,
    SYNSEM.LOCAL.CONT.KEY _protestant_rel ].

:end :instance.


; <<>>
; >> prove.v.1.vm.tdl
; prove.v.1.vm.tdl

:begin :instance.

prove_v1 := mv_np_trans_le &
  [ STEM < "prove" >,
    SYNSEM.LOCAL.CONT.KEY _prove_rel ].

:end :instance.


; <<>>
; >> prove.v.2.vm.tdl
; prove.v.2.vm.tdl

:begin :instance.

prove_v2 := mv_cp_non_trans_le &
  [ STEM < "prove" >,
    SYNSEM.LOCAL.CONT.KEY _prove_rel ].

:end :instance.


; <<>>
; >> prove.v.3.vm.tdl
; prove.v.3.vm.tdl

:begin :instance.

prove_v3 := mv_unerg_le &
  [ STEM < "prove" >,
    SYNSEM.LOCAL.CONT.KEY _prove_rel ].

:end :instance.


; <<>>
; >> provide.v.1.vm.tdl
; provide.v.1.vm.tdl

:begin :instance.

provide_v1 := mv_np_trans_le &
  [ STEM < "provide" >,
    SYNSEM.LOCAL.CONT.KEY _provide_rel ].

:end :instance.


; <<>>
; >> provided.c.1.tdl
; provided.c.1.tdl

:begin :instance.

provided_subord := subconj_le &
  [ STEM < "provided" >,
    SYNSEM.LOCAL.CONT.KEY _provided_rel ].

:end :instance.


; <<>>
; >> provided.that.c.1.tdl
; provided.that.c.1.tdl

:begin :instance.

provided_that_subord := subconj_mle1 &
  [ STEM < "provided", "that" >,
    SYNSEM.LOCAL.CONT.KEY _provided_rel ].

:end :instance.


; <<>>
; >> providing.c.1.tdl
; providing.c.1.tdl

:begin :instance.

providing_subord := subconj_le &
  [ STEM < "providing" >,
    SYNSEM.LOCAL.CONT.KEY _providing_rel ].

:end :instance.


; <<>>
; >> providing.that.c.1.tdl
; providing.that.c.1.tdl

:begin :instance.

providing_that_subord := subconj_mle1 &
  [ STEM < "providing", "that" >,
    SYNSEM.LOCAL.CONT.KEY _providing_rel ].

:end :instance.


; <<>>
; >> public.a.1.vm.tdl
; public.a.1.vm.tdl

:begin :instance.

public_a1 := intrans_adj_le &
  [ STEM < "public" >,
    SYNSEM.LOCAL.CONT.KEY _public_rel ].

:end :instance.


; <<>>
; >> publication.n.1.vm.tdl
; publication.n.1.vm.tdl

:begin :instance.

publication_n1 := intr_noun_word_le &
  [ STEM < "publication" >,
    SYNSEM.LOCAL.CONT.KEY _publication_rel ].

:end :instance.


; <<>>
; >> publish.v.1.vm.tdl
; publish.v.1.vm.tdl

:begin :instance.

publish_v1 := mv_np_trans_le &
  [ STEM < "publish" >,
    SYNSEM.LOCAL.CONT.KEY _publish_rel ].

:end :instance.


; <<>>
; >> pull.v.1.tdl
; pull.v.1.tdl

:begin :instance.

pull_v1 := mv_prep*_trans_le &
  [ STEM < "pull" >,
    SYNSEM.LOCAL.CONT [ KEY _pull_rel,
			OCOMPKEY dir_rel ] ].

:end :instance.


; <<>>
; >> punctual.a.1.vm.tdl
; punctual.a.1.vm.tdl

:begin :instance.

punctual_a1 := intrans_adj_le &
  [ STEM < "punctual" >,
    SYNSEM.LOCAL.CONT.KEY _punctual_adj_rel ].

:end :instance.


; <<>>
; >> pure.a.1.vm.tdl
; pure.a.1.vm.tdl

:begin :instance.

pure_a1 := intrans_adj_le &
  [ STEM < "pure" >,
    SYNSEM.LOCAL.CONT.KEY _pure_adj_rel ].

:end :instance.


; <<>>
; >> purely.a.1.vm.tdl
; purely.a.1.vm.tdl

:begin :instance.

purely := vp_adv_post_word_le &
  [ STEM < "purely" >,
    SYNSEM.LOCAL.CONT.KEY _purely_rel ].

:end :instance.


; <<>>
; >> purpose.n.1.vm.tdl
; purpose.n.1.vm.tdl

:begin :instance.

purpose_n1 := intr_noun_word_le &
  [ STEM < "purpose" >,
    SYNSEM.LOCAL.CONT.KEY _purpose_rel ].

:end :instance.


; <<>>
; >> push.v.1.tdl
; push.v.1.tdl

:begin :instance.

push_v1 := mv_prep*_trans_le &
  [ STEM < "push" >,
    SYNSEM.LOCAL.CONT [ KEY _push_rel,
			OCOMPKEY dir_rel ] ].

:end :instance.


; <<>>
; >> put.by.v.1.tdl
; put.by.v.1.tdl

:begin :instance.

put_by_v1 := mv_particle_np_le &
  [ STEM < "put" >,
    SYNSEM.LOCAL.CONT [ KEY _put_by_rel,
			COMPKEY _by_rel ] ].

:end :instance.


; <<>>
; >> put.down.v.1.vm.tdl
; put.down.v.1.vm.tdl

:begin :instance.

put_down_v1 := mv_particle_np_le &
  [ STEM < "put" >,
    SYNSEM.LOCAL.CONT [ KEY _put_down_rel,
			COMPKEY _down_rel ] ].

:end :instance.


; <<>>
; >> put.off.v.1.vm.tdl
; put.off.v.1.vm.tdl

:begin :instance.

put_off_v1 := mv_particle_np_le &
  [ STEM < "put" >,
    SYNSEM.LOCAL.CONT [ KEY _put_off_rel,
			COMPKEY _off_rel ] ].

:end :instance.


; <<>>
; >> put.through.v.1.vm.tdl
; put.through.v.1.vm.tdl

:begin :instance.

put_through_v1 := mv_particle_np_pp_to_le &
  [ STEM < "put" >,
    SYNSEM.LOCAL.CONT [ KEY _put_through_rel,
			COMPKEY _through_rel ] ].

:end :instance.


; <<>>
; >> put.v.1.tdl
; put.v.1.tdl

:begin :instance.

put_v1 := mv_prep_trans_le &
  [ STEM < "put" >,
    SYNSEM.LOCAL.CONT [ KEY _put_rel,
			OCOMPKEY dir_rel ] ].

:end :instance.


; <<>>
; >> quantity.n.1.tdl
; quantity.n.1.tdl

:begin :instance.

quantity_n1 := intr_noun_word_le &
  [ STEM < "quantity" >,
    SYNSEM.LOCAL.CONT.KEY _quantity_rel ].

:end :instance.


; <<>>
; >> quarter.n.1.vm.tdl
; quarter.n.1.vm.tdl

:begin :instance.

quarter_n1 := noun_ppof_word_le &
  [ STEM < "quarter" >,
    SYNSEM.LOCAL.CONT.KEY _quarter_rel ].

:end :instance.


; <<>>
; >> quasi.a.1.vm.tdl
; quasi.a.1.vm.tdl

:begin :instance.

quasi_adv1 := adv_pre_word_le &
  [ STEM < "quasi" >,
    SYNSEM.LOCAL.CONT.KEY _quasi_rel ].

:end :instance.


; <<>>
; >> question.n.1.vm.tdl
; question.n.1.vm.tdl

:begin :instance.

question_n1 := intr_noun_word_le &
  [ STEM < "question" >,
    SYNSEM.LOCAL.CONT.KEY _question_rel ].

:end :instance.


; <<>>
; >> questionable.a.1.vm.tdl
; questionable.a.1.vm.tdl

:begin :instance.

questionable_a1 := intrans_adj_le &
  [ STEM < "questionable" >,
    SYNSEM.LOCAL.CONT.KEY _questionable_rel ].

:end :instance.


; <<>>
; >> quick.a.1.vm.tdl
; quick.a.1.vm.tdl

:begin :instance.

quick_a1 := intrans_adj_le &
  [ STEM < "quick" >,
    SYNSEM.LOCAL.CONT.KEY _quick_rel ].

:end :instance.


; <<>>
; >> quicker.a.1.vm.tdl
; quicker.a.1.vm.tdl

:begin :instance.

quicker_a1 := intrans_adj_le &
  [ STEM < "quicker" >,
    SYNSEM.LOCAL.CONT.KEY _quicker_rel ].

:end :instance.


; <<>>
; >> quickly.a.1.vm.tdl
; quickly.a.1.vm.tdl

:begin :instance.

quickly_adv1 := adv_word_le &
  [ STEM < "quickly" >,
    SYNSEM.LOCAL.CONT.KEY _quickly_rel ].

:end :instance.


; <<>>
; >> quiet.a.1.vm.tdl
; quiet.a.1.vm.tdl

:begin :instance.

quiet_a1 := intrans_adj_le &
  [ STEM < "quiet" >,
    SYNSEM.LOCAL.CONT.KEY _quiet_rel ].

:end :instance.


; <<>>
; >> quietly.a.1.vm.tdl
; quietly.a.1.vm.tdl

:begin :instance.

quietly := adv_word_le &
  [ STEM < "quietly" >,
    SYNSEM.LOCAL.CONT.KEY _quietly_rel ].

:end :instance.


; <<>>
; >> quite.a.1.tdl
; quite.a.1.tdl

:begin :instance.

quite_deg := degree_spec_le &
  [ STEM < "quite" >,
    SYNSEM.LOCAL.CONT.KEY _quite_rel ].

:end :instance.


; <<>>
; >> rain.v.1.tdl
; rain.v.1.tdl

:begin :instance.

rain1 := mv_atrans_le &
  [ STEM < "rain" >,
    SYNSEM.LOCAL.CONT.KEY _rain_rel ].

:end :instance.


; <<>>
; >> raise.v.1.vm.tdl
; raise.v.1.vm.tdl

:begin :instance.

raise_v1 := mv_np_trans_le &
  [ STEM < "raise" >,
    SYNSEM.LOCAL.CONT.KEY _raise_rel ].

:end :instance.


; <<>>
; >> range.n.1.vm.tdl
; range.n.1.vm.tdl

:begin :instance.

range_n1 := intr_noun_word_le &
 [ STEM < "range" >,
   SYNSEM.LOCAL.CONT.KEY _range_rel ].

:end :instance.


; <<>>
; >> rapid.a.1.vm.tdl
; rapid.a.1.vm.tdl

:begin :instance.

rapid_a1 := intrans_adj_le &
  [ STEM < "rapid" >,
    SYNSEM.LOCAL.CONT.KEY _rapid_rel ].

:end :instance.


; <<>>
; >> rapidly.a.1.vm.tdl
; rapidly.a.1.vm.tdl

:begin :instance.

rapidly := adv_word_le &
  [ STEM < "rapidly" >,
    SYNSEM.LOCAL.CONT.KEY _rapidly_rel ].

:end :instance.


; <<>>
; >> rare.a.1.vm.tdl
; rare.a.1.vm.tdl

:begin :instance.

rare_a1 := intrans_adj_le &
  [ STEM < "rare" >,
    SYNSEM.LOCAL.CONT.KEY _rare_rel ].

:end :instance.


; <<>>
; >> rarely.a.1.vm.tdl
; rarely.a.1.vm.tdl

:begin :instance.

rarely_adv1 := adv_word_le &
  [ STEM < "rarely" >,
    SYNSEM.LOCAL.CONT.KEY _rarely_rel ].

:end :instance.


; <<>>
; >> rash.a.1.vm.tdl
; rash.a.1.vm.tdl

:begin :instance.

rash_a1 := intrans_adj_le &
  [ STEM < "rash" >,
    SYNSEM.LOCAL.CONT.KEY _rash_rel ].

:end :instance.


; <<>>
; >> rate.n.1.vm.tdl
; rate.n.1.vm.tdl

:begin :instance.

rate_n1 := intr_noun_word_le &
  [ STEM < "rate" >,
    SYNSEM.LOCAL.CONT.KEY _rate_rel ].

:end :instance.


; <<>>
; >> rather.a.1.tdl
; rather.a.1.tdl

:begin :instance.

rather_deg := degree_spec_le &
  [ STEM < "rather" >,
    SYNSEM.LOCAL.CONT.KEY _rather_rel ].

:end :instance.


; <<>>
; >> reach.out.v.1.tdl
; reach.out.v.1.tdl

:begin :instance.

reach_out_v1 := mv_particle_le &
  [ STEM < "reach" >,
    SYNSEM.LOCAL.CONT [ KEY _reach_out_rel,
			COMPKEY _reach_out_rel ] ].

:end :instance.


; <<>>
; >> reach.v.1.tdl
; reach.v.1.tdl

:begin :instance.

reach_v1 := mv_np_trans_le &
  [ STEM < "reach" >,
    SYNSEM.LOCAL.CONT.KEY _reach_rel ].

:end :instance.


; <<>>
; >> read.v.1.tdl
; read.v.1.tdl

:begin :instance.

read_v1 := mv_np*_trans_le &
  [ STEM < "read" >,
    SYNSEM.LOCAL.CONT.KEY _read_rel ].

:end :instance.


; <<>>
; >> readily.a.1.vm.tdl
; readily.a.1.vm.tdl

:begin :instance.

readily := adv_word_le &
  [ STEM < "readily" >,
    SYNSEM.LOCAL.CONT.KEY _readily_rel ].

:end :instance.


; <<>>
; >> ready.a.1.vm.tdl
; ready.a.1.vm.tdl

:begin :instance.

ready_a1 := intrans_adj_le &
  [ STEM < "ready" >,
    SYNSEM.LOCAL.CONT.KEY _ready_rel ].

:end :instance.


; <<>>
; >> real.a.1.tdl
; real.a.1.tdl

:begin :instance.

real_adv := degree_spec_le &
  [ STEM < "real" >,
    SYNSEM.LOCAL.CONT.KEY _real_deg_rel ].

:end :instance.


; <<>>
; >> real.a.2.tdl
; real.a.2.tdl

:begin :instance.

real_a1 := intrans_adj_le &
  [ STEM < "real" >,
    SYNSEM.LOCAL.CONT.KEY _real_adj_rel ].

:end :instance.


; <<>>
; >> realize.v.1.vm.tdl
; realize.v.1.vm.tdl

:begin :instance.

realize_v1 := mv_np_trans_le &
  [ STEM < "realize" >,
    SYNSEM.LOCAL.CONT.KEY _realize_rel ].

:end :instance.


; <<>>
; >> realize.v.2.vm.tdl
; realize.v.2.vm.tdl

:begin :instance.

realize_v2 := mv_cp_prop_non_trans_le &
  [ STEM < "realize" >,
    SYNSEM.LOCAL.CONT.KEY _realize_rel ].

:end :instance.


; <<>>
; >> really.a.1.tdl
; really.a.1.tdl

:begin :instance.

really_deg := degree_spec_le &
  [ STEM < "really" >,
    SYNSEM.LOCAL.CONT.KEY _really_deg_rel ].

:end :instance.


; <<>>
; >> really.a.2.tdl
; really.a.2.tdl

:begin :instance.

really_adv := adv_pre_word_le &
  [ STEM < "really" >,
    SYNSEM.LOCAL.CONT.KEY _really_rel ].

:end :instance.


; <<>>
; >> rearrange.v.1.vm.tdl
; rearrange.v.1.vm.tdl

:begin :instance.

rearrange_v1 := mv_np_trans_le &
  [ STEM < "rearrange" >,
    SYNSEM.LOCAL.CONT.KEY _rearrange_rel ].

:end :instance.


; <<>>
; >> reason.n.1.vm.tdl
; reason.n.1.vm.tdl

:begin :instance.

reason_n1 := intr_noun_word_le &
  [ STEM < "reason" >,
    SYNSEM.LOCAL.CONT.KEY _reason_rel ].

:end :instance.


; <<>>
; >> reason.n.2.vm.tdl
; reason.n.2.vm.tdl

:begin :instance.

reason_n2 := massn_le &
  [ STEM < "reason" >,
    SYNSEM.LOCAL.CONT.KEY _reason_rel ].

:end :instance.


; <<>>
; >> reasonable.a.1.vm.tdl
; reasonable.a.1.vm.tdl

:begin :instance.

reasonable_a1 := intrans_adj_le &
  [ STEM < "reasonable" >,
    SYNSEM.LOCAL.CONT.KEY _reasonable_rel ].

:end :instance.


; <<>>
; >> reasonable.a.2.vm.tdl
; reasonable.a.2.vm.tdl

:begin :instance.

reasonable_a2 := reg_adj_atrans_le &
  [ STEM < "reasonable" >,
    SYNSEM.LOCAL.CONT.KEY _reasonable_rel ].

:end :instance.


; <<>>
; >> reasonableness.n.1.vm.tdl
; reasonableness.n.1.vm.tdl

:begin :instance.

reasonableness_n1 := massn_le &
  [ STEM < "reasonableness" >,
   SYNSEM.LOCAL.CONT.KEY _reasonableness_rel ].

:end :instance.


; <<>>
; >> reasonably.a.1.vm.tdl
; reasonably.a.1.vm.tdl

:begin :instance.

reasonably := adv_word_le &
  [ STEM < "reasonably" >,
    SYNSEM.LOCAL.CONT.KEY _reasonably_rel ].

:end :instance.


; <<>>
; >> rebel.n.1.vm.tdl
; rebel.n.1.vm.tdl

:begin :instance.

rebel_n1 := intr_noun_word_le &
  [ STEM < "rebel" >,
    SYNSEM.LOCAL.CONT.KEY _rebel_rel ].

:end :instance.


; <<>>
; >> rebel.v.1.vm.tdl
; rebel.v.1.vm.tdl

:begin :instance.

rebel_v1 := mv_np*_prep*_trans_le &
  [ STEM < "rebel" >,
    SYNSEM.LOCAL.CONT [ KEY _rebel_v_rel,
			OCOMPKEY _against_rel ] ].

:end :instance.


; <<>>
; >> recap.v.1.vm.tdl
; recap.v.1.vm.tdl

:begin :instance.

recap_v1 := mv_np*_trans_le &
  [ STEM < "recap" >,
    SYNSEM.LOCAL.CONT.KEY _recap_rel ].

:end :instance.


; <<>>
; >> recapitulate.v.1.vm.tdl
; recapitulate.v.1.vm.tdl

:begin :instance.

recapitulate_v1 := mv_np*_trans_le &
  [ STEM < "recapitulate" >,
    SYNSEM.LOCAL.CONT.KEY _recapitulate_rel ].

:end :instance.


; <<>>
; >> receive.v.1.vm.tdl
; receive.v.1.vm.tdl

:begin :instance.

receive_v1 := mv_np_trans_le &
  [ STEM < "receive" >,
    SYNSEM.LOCAL.CONT.KEY _receive_rel ].

:end :instance.


; <<>>
; >> recently.a.1.vm.tdl
; recently.a.1.vm.tdl

:begin :instance.

recently_adv1 := adv_word_le &
  [ STEM < "recently" >,
    SYNSEM.LOCAL.CONT.KEY _recently_rel ].

:end :instance.


; <<>>
; >> receptive.a.1.vm.tdl
; receptive.a.1.vm.tdl

:begin :instance.

receptive_a1 := intrans_adj_le &
  [ STEM < "receptive" >,
    SYNSEM.LOCAL.CONT.KEY _receptive_rel ].

:end :instance.


; <<>>
; >> reckon.v.1.vm.tdl
; reckon.v.1.vm.tdl

:begin :instance.

reckon_v1 := mv_cp_prop*_non_trans_le &
  [ STEM < "reckon" >,
    SYNSEM.LOCAL.CONT.KEY _reckon_on_rel ].

:end :instance.


; <<>>
; >> recommendable.a.1.vm.tdl
; recommendable.a.1.vm.tdl

:begin :instance.

recommendable_a1 := intrans_adj_le &
  [ STEM < "recommendable" >,
    SYNSEM.LOCAL.CONT.KEY _recommendable_rel ].

:end :instance.


; <<>>
; >> recommendation.n.1.vm.tdl
; recommendation.n.1.vm.tdl

:begin :instance.

recommendation_n1 := intr_noun_word_le &
  [ STEM < "recommendation" >,
    SYNSEM.LOCAL.CONT.KEY _recommendation_rel ].

:end :instance.


; <<>>
; >> reconcile.with.v.1.vm.tdl
; reconcile.with.v.1.vm.tdl

:begin :instance.

reconcile_with_v1 := mv_empty_prep_trans*_le &
  [ STEM < "reconcile" >,
    SYNSEM.LOCAL.CONT [ KEY _reconcile_with_rel,
			COMPKEY _with_rel ] ].

:end :instance.



; <<>>
; >> reconsider.v.1.vm.tdl
; reconsider.v.1.vm.tdl

:begin :instance.

reconsider_v1 := mv_np*_trans_le &
  [ STEM < "reconsider" >,
    SYNSEM.LOCAL.CONT.KEY _reconsider_rel ].

:end :instance.


; <<>>
; >> record.v.1.vm.tdl
; record.v.1.vm.tdl

:begin :instance.

record_v1 := mv_np*_trans_le &
  [ STEM < "record" >,
    SYNSEM.LOCAL.CONT.KEY _record_rel ].

:end :instance.


; <<>>
; >> recover.v.1.vm.tdl
; recover.v.1.vm.tdl

:begin :instance.

recover_v1 := mv_unacc_le &
  [ STEM < "recover" >,
    SYNSEM.LOCAL.CONT.KEY _recover_recup_rel ].

:end :instance.


; <<>>
; >> recover.v.2.vm.tdl
; recover.v.2.vm.tdl

:begin :instance.

recover_v2 := mv_np_trans_le &
  [ STEM < "recover" >,
    SYNSEM.LOCAL.CONT.KEY _recover_rel ].

:end :instance.


; <<>>
; >> red.a.1.tdl
; red.a.1.tdl

:begin :instance.

red1 := intrans_adj_le &
  [ STEM < "red" >,
    SYNSEM.LOCAL.CONT.KEY _red_rel ].

:end :instance.


; <<>>
; >> redoute.n.1.vm.tdl
; redoute.n.1.vm.tdl

:begin :instance.

Redoute_n1 := proper_le &
  [ STEM < "redoute" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'Redoute ].

:end :instance.


; <<>>
; >> reduce.v.1.vm.tdl
; reduce.v.1.vm.tdl

:begin :instance.

reduce_v1 := mv_np_trans_le &
  [ STEM < "reduce" >,
    SYNSEM.LOCAL.CONT.KEY _reduce_rel ].

:end :instance.


; <<>>
; >> reduction.n.1.vm.tdl
; reduction.n.1.vm.tdl

:begin :instance.

reduction_n1 := intr_noun_word_le &
  [ STEM < "reduction" >,
    SYNSEM.LOCAL.CONT.KEY _reduction_rel ].

:end :instance.


; <<>>
; >> reference.n.1.vm.tdl
; reference.n.1.vm.tdl

:begin :instance.

reference_n1 := intr_noun_word_le &
  [ STEM < "reference" >,
    SYNSEM.LOCAL.CONT.KEY _reference_rel ].

:end :instance.


; <<>>
; >> reformation.day.n.1.tdl
; reformation.day.n.1.tdl

:begin :instance.

reformation_day := holiday_word_mle1 &
  [ STEM < "reformation", "day" >,
    SYNSEM.LOCAL.CONT.KEY.DAY 'reformation_day ].

:end :instance.


; <<>>
; >> refresh.v.1.vm.tdl
; refresh.v.1.vm.tdl

:begin :instance.

refresh_v1 := mv_np_trans_le &
  [ STEM < "refresh" >,
    SYNSEM.LOCAL.CONT.KEY _refresh_rel ].

:end :instance.


; <<>>
; >> refuse.v.1.vm.tdl
; refuse.v.1.vm.tdl

:begin :instance.

refuse_v1 := mv_subj_equi_le &
  [ STEM < "refuse" >,
    SYNSEM.LOCAL.CONT.KEY _refuse_rel ].

:end :instance.


; <<>>
; >> regard.v.1.tdl
; regard.v.1.tdl

:begin :instance.

regard_v1 := mv_np_comp_le &
  [ STEM < "regard" >,
    SYNSEM.LOCAL [ CAT.VALENCE.COMPS 
			 < [ LOCAL.CONT.INDEX #ind ],
			   [ LOCAL.CONT.INDEX #ind ] >,
		   CONT [ KEY _regard_rel,
			  OCOMPKEY _as_rel ] ] ].

:end :instance.


; <<>>
; >> regarding.p.1.vm.tdl
; regarding.p.1.vm.tdl

:begin :instance.

regarding_p := prep_le &
  [ STEM < "regarding" >,
    SYNSEM.LOCAL.CONT.KEY _regarding_rel ].

:end :instance.


; <<>>
; >> regards.n.1.vm.tdl
; regards.n.1.vm.tdl

:begin :instance.

regards_n1 := plurn_le &
  [ STEM < "regards" >,
    SYNSEM.LOCAL.CONT.KEY _regards_rel ].

:end :instance.


; <<>>
; >> regeneration.n.1.vm.tdl
; regeneration.n.1.vm.tdl

:begin :instance.

regeneration_n1 := massn_le &
  [ STEM < "regeneration" >,
    SYNSEM.LOCAL.CONT.KEY _regeneration_rel ].

:end :instance.


; <<>>
; >> regret.v.1.vm.tdl
; regret.v.1.vm.tdl

:begin :instance.

regret_v1 := mv_np_trans_le &
  [ STEM < "regret" >,
    SYNSEM.LOCAL.CONT.KEY _regret_rel ].

:end :instance.


; <<>>
; >> regret.v.2.vm.tdl
; regret.v.2.vm.tdl

:begin :instance.

regret_v2 := mv_cp_non_trans_le &
  [ STEM < "regret" >,
    SYNSEM.LOCAL.CONT.KEY _regret_rel ].

:end :instance.


; <<>>
; >> regular.a.1.vm.tdl
; regular.a.1.vm.tdl

:begin :instance.

regular_a1 := intrans_adj_le &
  [ STEM < "regular" >,
    SYNSEM.LOCAL.CONT.KEY _regular_rel ].

:end :instance.


; <<>>
; >> regularity.n.1.vm.tdl
; regularity.n.1.vm.tdl

:begin :instance.

regularity_n1 := massn_le &
  [ STEM < "regularity" >,
    SYNSEM.LOCAL.CONT.KEY _regularity_rel ].

:end :instance.


; <<>>
; >> regularly.a.1.vm.tdl
; regularly.a.1.vm.tdl

:begin :instance.

regularly_adv1 := adv_word_le &
  [ STEM < "regularly" >,
    SYNSEM.LOCAL.CONT.KEY _regularly_rel ].

:end :instance.


; <<>>
; >> reject.v.1.vm.tdl
; reject.v.1.vm.tdl

:begin :instance.

reject_v1 := mv_np_trans_le &
  [ STEM < "reject" >,
    SYNSEM.LOCAL.CONT.KEY _reject_rel ].

:end :instance.


; <<>>
; >> relation.n.1.vm.tdl
; relation.n.1.vm.tdl

:begin :instance.

relation_n1 := intr_noun_word_le &
  [ STEM < "relation" >,
    SYNSEM.LOCAL.CONT.KEY _relation_rel ].

:end :instance.


; <<>>
; >> relationship.n.1.vm.tdl
; relationship.n.1.vm.tdl

:begin :instance.

relationship_n1 := intr_noun_word_le &
  [ STEM < "relationship" >,
    SYNSEM.LOCAL.CONT.KEY _relationship_rel ].

:end :instance.


; <<>>
; >> relative.a.1.vm.tdl
; relative.a.1.vm.tdl

:begin :instance.

relative_a1 := intrans_adj_le &
  [ STEM < "relative" >,
    SYNSEM.LOCAL.CONT.KEY _relative_rel ].

:end :instance.


; <<>>
; >> relatively.a.1.vm.tdl
; relatively.a.1.vm.tdl

:begin :instance.

relatively_adv1 := adv_word_le &
  [ STEM < "relatively" >,
    SYNSEM.LOCAL.CONT.KEY _relatively_rel ].

:end :instance.


; <<>>
; >> relax.v.1.vm.tdl
; relax.v.1.vm.tdl

:begin :instance.

relax_v1 := mv_unerg_le &
  [ STEM < "relax" >,
    SYNSEM.LOCAL.CONT.KEY _relax_rel ].

:end :instance.


; <<>>
; >> relax.v.2.vm.tdl
; relax.v.2.vm.tdl

:begin :instance.

relax_v2 := mv_np_trans_le &
  [ STEM < "relax" >,
    SYNSEM.LOCAL.CONT.KEY _relax_cause_rel ].

:end :instance.


; <<>>
; >> relaxed.a.1.vm.tdl
; relaxed.a.1.vm.tdl

:begin :instance.

relaxed_a1 := intrans_adj_le &
  [ STEM < "relaxed" >,
    SYNSEM.LOCAL.CONT.KEY _relaxed_rel ].

:end :instance.


; <<>>
; >> relevant.a.1.vm.tdl
; relevant.a.1.vm.tdl

:begin :instance.

relevant_a1 := intrans_adj_le &
  [ STEM < "relevant" >,
    SYNSEM.LOCAL.CONT.KEY _relevant_rel ].

:end :instance.


; <<>>
; >> reliable.a.1.vm.tdl
; reliable.a.1.vm.tdl

:begin :instance.

reliable_a1 := intrans_adj_le &
  [ STEM < "reliable" >,
    SYNSEM.LOCAL.CONT.KEY _reliable_rel ].

:end :instance.


; <<>>
; >> relieve.v.1.vm.tdl
; relieve.v.1.vm.tdl

:begin :instance.

relieve_v1 := mv_np_trans_le &
  [ STEM < "relieve" >,
    SYNSEM.LOCAL.CONT.KEY _relieve_rel ].

:end :instance.


; <<>>
; >> religious.a.1.vm.tdl
; religious.a.1.vm.tdl

:begin :instance.

religious_a1 := intrans_adj_le &
  [ STEM < "religious" >,
    SYNSEM.LOCAL.CONT.KEY _religious_rel ].

:end :instance.


; <<>>
; >> religiously.a.1.vm.tdl
; religiously.a.1.vm.tdl

:begin :instance.

religiously := adv_word_le &
  [ STEM < "religiously" >,
    SYNSEM.LOCAL.CONT.KEY _religiously_rel ].

:end :instance.


; <<>>
; >> reluctant.a.1.vm.tdl
; reluctant.a.1.vm.tdl

:begin :instance.

reluctant_a1 := intrans_adj_le &
  [ STEM < "reluctant" >,
    SYNSEM.LOCAL.CONT.KEY _reluctant_rel ].

:end :instance.


; <<>>
; >> reluctant.a.2.vm.tdl
; reluctant.a.2.vm.tdl

:begin :instance.

reluctant_a2 := reg_adj_equi_le &
  [ STEM < "reluctant" >,
    SYNSEM.LOCAL.CONT.KEY _reluctant_rel ].

:end :instance.


; <<>>
; >> reluctantly.a.1.vm.tdl
; reluctantly.a.1.vm.tdl

:begin :instance.

reluctantly_adv1 := vp_adv_word_le &
  [ STEM < "reluctantly" >,
    SYNSEM.LOCAL.CONT.KEY _reluctantly_rel ].

:end :instance.


; <<>>
; >> remain.v.1.vm.tdl
; remain.v.1.vm.tdl

:begin :instance.

remain_v1 := mv_subj_equi_prd_le &
  [ STEM < "remain" >,
    SYNSEM.LOCAL [ CAT.VALENCE.COMPS < [ LOCAL.CAT.HEAD adj ] >,
		   CONT.KEY _remain_rel ] ].

:end :instance.


; <<>>
; >> remain.v.2.vm.tdl
; remain.v.2.vm.tdl

:begin :instance.

remain_v2 := mv_unacc_le &
  [ STEM < "remain" >,
    SYNSEM.LOCAL.CONT.KEY _remain_und_rel ].

:end :instance.


; <<>>
; >> remaining.a.1.vm.tdl
; remaining.a.1.vm.tdl

:begin :instance.

remaining_a1 := intrans_adj_le &
  [ STEM < "remaining" >,
    SYNSEM.LOCAL.CONT.KEY _remaining_rel ].

:end :instance.


; <<>>
; >> remember.v.1.vm.tdl
; remember.v.1.vm.tdl

:begin :instance.

remember_v1 := mv_np_trans_le &
  [ STEM < "remember" >,
    SYNSEM.LOCAL.CONT.KEY _remember_rel ].

:end :instance.


; <<>>
; >> remember.v.2.vm.tdl
; remember.v.2.vm.tdl

:begin :instance.

remember_v2 := mv_cp_non_trans_le &
  [ STEM < "remember" >,
    SYNSEM.LOCAL.CONT.KEY _remember_rel ].

:end :instance.


; <<>>
; >> remember.v.3.vm.tdl
; remember.v.3.vm.tdl

:begin :instance.

remember_v3 := mv_unerg_le &
  [ STEM < "remember" >,
    SYNSEM.LOCAL.CONT.KEY _remember_rel ].

:end :instance.


; <<>>
; >> remind.v.1.vm.tdl
; remind.v.1.vm.tdl

:begin :instance.

remind_v1 := mv_empty_prep_trans_le &
  [ STEM < "remind" >,
    SYNSEM.LOCAL.CONT [ KEY _remind_of_rel,
			OCOMPKEY _of_rel ] ].

:end :instance.


; <<>>
; >> remove.v.1.vm.tdl
; remove.v.1.vm.tdl

:begin :instance.

remove_v1 := mv_np_trans_le &
  [ STEM < "remove" >,
    SYNSEM.LOCAL.CONT.KEY _remove_rel ].

:end :instance.


; <<>>
; >> rendezvous.n.1.vm.tdl
; rendezvous.n.1.vm.tdl

:begin :instance.

rendezvous_n1 := intr_noun_word_le &
  [ STEM < "rendezvous" >,
    SYNSEM.LOCAL.CONT.KEY _rendezvous_rel ].

:end :instance.


; <<>>
; >> renew.v.1.tdl
; renew.v.1.tdl

:begin :instance.

renew_v1 := mv_np_trans_le &
  [ STEM < "renew" >,
    SYNSEM.LOCAL.CONT.KEY _renew_rel ].

:end :instance.


; <<>>
; >> repeat.v.1.vm.tdl
; repeat.v.1.vm.tdl

:begin :instance.

repeat_v1 := mv_np_trans_le &
  [ STEM < "repeat" >,
    SYNSEM.LOCAL.CONT.KEY _repeat_rel ].

:end :instance.


; <<>>
; >> repentance.n.1.vm.tdl
; repentance.n.1.vm.tdl

:begin :instance.

repentance_n1 := massn_le &
  [ STEM < "repentance" >,
    SYNSEM.LOCAL.CONT.KEY _repentance_rel ].

:end :instance.


; <<>>
; >> replace.v.1.vm.tdl
; replace.v.1.vm.tdl

:begin :instance.

replace_v1 := mv_prep*_trans_le &
  [ STEM < "replace" >,
    SYNSEM.LOCAL.CONT [ KEY _replace_rel,
			OCOMPKEY loc_rel ] ].

:end :instance.


; <<>>
; >> report.n.1.vm.tdl
; report.n.1.vm.tdl

:begin :instance.

report_n1 := intr_noun_word_le &
  [ STEM < "report" >,
    SYNSEM.LOCAL.CONT.KEY _report_rel ].

:end :instance.


; <<>>
; >> report.v.2.vm.tdl
; report.v.2.vm.tdl

:begin :instance.

report_v2 := mv_cp_prop*_non_trans_le &
  [ STEM < "report" >,
    SYNSEM.LOCAL.CONT.KEY _report_v_rel ].

:end :instance.


; <<>>
; >> reporter.n.1.vm.tdl
; reporter.n.1.vm.tdl

:begin :instance.

reporter_n1 := intr_noun_word_le &
  [ STEM < "reporter" >,
    SYNSEM.LOCAL.CONT.KEY _reporter_rel ].

:end :instance.


; <<>>
; >> repugnant.a.1.vm.tdl
; repugnant.a.1.vm.tdl

:begin :instance.

repugnant_a1 := intrans_adj_le &
  [ STEM < "repugnant" >,
    SYNSEM.LOCAL.CONT.KEY _repugnant_rel ].

:end :instance.


; <<>>
; >> request.n.1.vm.tdl
; request.n.1.vm.tdl

:begin :instance.

request_n1 := intr_noun_word_le &
  [ STEM < "request" >,
    SYNSEM.LOCAL.CONT.KEY _request_rel ].

:end :instance.


; <<>>
; >> request.v.1.tdl
; request.v.1.tdl

:begin :instance.

request_v1 := mv_np_trans_le &
  [ STEM < "request" >,
    SYNSEM.LOCAL.CONT.KEY _request_v_rel ].

:end :instance.


; <<>>
; >> require.v.1.vm.tdl
; require.v.1.vm.tdl

:begin :instance.

require_v1 := mv_np_trans_le &
  [ STEM < "require" >,
    SYNSEM.LOCAL.CONT.KEY _require_rel ].

:end :instance.


; <<>>
; >> require.v.2.vm.tdl
; require.v.2.vm.tdl

:begin :instance.

require_v2 := mv_obj_equi_le &
  [ STEM < "require" >,
    SYNSEM.LOCAL.CONT.KEY _require2_rel ].

:end :instance.


; <<>>
; >> reschedule.v.1.vm.tdl
; reschedule.v.1.vm.tdl

:begin :instance.

reschedule_v1 := mv_np_trans_le &
  [ STEM < "reschedule" >,
    SYNSEM.LOCAL.CONT.KEY _reschedule_rel ].

:end :instance.


; <<>>
; >> reschedule.v.2.vm.tdl
; reschedule.v.2.vm.tdl

:begin :instance.

reschedule_v2 := mv_empty_prep_trans_le &
  [ STEM < "reschedule" >,
    SYNSEM.LOCAL.CONT [ KEY _reschedule_for_rel,
			OCOMPKEY _for_rel ] ].

:end :instance.


; <<>>
; >> reservation.n.1.vm.tdl
; reservation.n.1.vm.tdl

:begin :instance.

reservation_n1 := intr_noun_word_le &
  [ STEM < "reservation" >,
    SYNSEM.LOCAL.CONT.KEY _reservation_rel ].

:end :instance.


; <<>>
; >> reserve.v.1.vm.tdl
; reserve.v.1.vm.tdl

:begin :instance.

reserve_v1 := mv_np_trans_le &
  [ STEM < "reserve" >,
    SYNSEM.LOCAL.CONT.KEY _reserve_rel ].

:end :instance.


; <<>>
; >> resolutely.a.1.vm.tdl
; resolutely.a.1.vm.tdl

:begin :instance.

resolutely_adv1 := vp_adv_word_le &
  [ STEM < "resolutely" >,
    SYNSEM.LOCAL.CONT.KEY _resolutely_rel ].

:end :instance.


; <<>>
; >> resort.v.1.vm.tdl
; resort.v.1.vm.tdl

:begin :instance.

resort_v1 := mv_empty_prep_intrans_le &
  [ STEM < "resort" >,
    SYNSEM.LOCAL.CONT [ KEY _resort_to_rel,
			COMPKEY _to_rel ] ].

:end :instance.


; <<>>
; >> respect.v.2.vm.tdl
; respect.v.2.vm.tdl

:begin :instance.

respect_v2 := mv_np_trans_le &
  [ STEM < "respect" >,
    SYNSEM.LOCAL.CONT.KEY _respect_rel ].

:end :instance.


; <<>>
; >> respectively.a.1.vm.tdl
; respectively.a.1.vm.tdl

:begin :instance.

respectively_adv1 := vp_adv_post_word_le &
  [ STEM < "respectively" >,
    SYNSEM.LOCAL.CONT.KEY _respectively_rel ].

:end :instance.


; <<>>
; >> responsible.a.1.vm.tdl
; responsible.a.1.vm.tdl

:begin :instance.

responsible_a1 := intrans_adj_le &
  [ STEM < "responsible" >,
    SYNSEM.LOCAL.CONT.KEY _responsible_rel ].

:end :instance.


; <<>>
; >> rest.n.1.vm.tdl
; rest.n.1.vm.tdl

:begin :instance.

rest_n1 := noun_ppof_word_le &
  [ STEM < "rest" >,
    SYNSEM.LOCAL.CONT.KEY _rest_remainder_rel ].

:end :instance.


; <<>>
; >> rest.n.2.vm.tdl
; rest.n.2.vm.tdl

:begin :instance.

rest_n2 := intr_noun_word_le &
  [ STEM < "rest" >,
    SYNSEM.LOCAL.CONT.KEY _rest_sleep_rel ].

:end :instance.


; <<>>
; >> rest.v.1.vm.tdl
; rest.v.1.vm.tdl

:begin :instance.

rest_v1 := mv_unerg_le &
  [ STEM < "rest" >,
    SYNSEM.LOCAL.CONT.KEY _rest_rel ].

:end :instance.


; <<>>
; >> rest.v.2.vm.tdl
; rest.v.2.vm.tdl

:begin :instance.

rest_v2 := mv_np_trans_le &
  [ STEM < "rest" >,
    SYNSEM.LOCAL.CONT.KEY _rest_cause_rel ].

:end :instance.


; <<>>
; >> restaurant.n.1.vm.tdl
; restaurant.n.1.vm.tdl

:begin :instance.

restaurant_n1 := intr_noun_word_le &
  [ STEM < "restaurant" >,
    SYNSEM.LOCAL.CONT.KEY _restaurant_rel ].

:end :instance.


; <<>>
; >> restrict.v.1.vm.tdl
; restrict.v.1.vm.tdl

:begin :instance.

restrict_v1 := mv_empty_prep_trans_le &
  [ STEM < "restrict" >,
    SYNSEM.LOCAL.CONT [ KEY _restrict_to_rel,
			OCOMPKEY _to_rel ] ].

:end :instance.


; <<>>
; >> restrict.v.2.vm.tdl
; restrict.v.2.vm.tdl

:begin :instance.

restrict_v2 := mv_np_trans_le &
  [ STEM < "restrict" >,
    SYNSEM.LOCAL.CONT.KEY _restrict_rel ].

:end :instance.


; <<>>
; >> restricted.a.1.vm.tdl
; restricted.a.1.vm.tdl

:begin :instance.

restricted_a1 := intrans_adj_le &
  [ STEM < "restricted" >,
    SYNSEM.LOCAL.CONT.KEY _restricted_rel ].

:end :instance.


; <<>>
; >> restriction.n.1.vm.tdl
; restriction.n.1.vm.tdl

:begin :instance.

restriction_n1 := deverbal_noun_intr_word_le &
  [ STEM < "restriction" >,
    SYNSEM.LOCAL.CONT.ALTKEY _restrict_to_rel ].

:end :instance.


; <<>>
; >> result.n.1.vm.tdl
; result.n.1.vm.tdl

:begin :instance.

result_n1 := intr_noun_word_le &
  [ STEM < "result" >,
    SYNSEM.LOCAL.CONT.KEY _result_n_rel ].

:end :instance.


; <<>>
; >> return.n.1.vm.tdl
; return.n.1.vm.tdl

:begin :instance.

return_n1 := intr_noun_word_le &
  [ STEM < "return" >,
    SYNSEM.LOCAL.CONT.KEY _return_n_rel ].

:end :instance.


; <<>>
; >> return.v.2.vm.tdl
; return.v.2.vm.tdl

:begin :instance.

return_v2 := mv_unacc_le &
  [ STEM < "return" >,
    SYNSEM.LOCAL.CONT.KEY _return_v_rel ].

:end :instance.


; <<>>
; >> reunion.n.1.vm.tdl
; reunion.n.1.vm.tdl

:begin :instance.

reunion_n1 := intr_noun_word_le &
  [ STEM < "reunion" >,
    SYNSEM.LOCAL.CONT.KEY _reunion_rel ].

:end :instance.


; <<>>
; >> reverse.a.1.vm.tdl
; reverse.a.1.vm.tdl

:begin :instance.

reverse_a1 := intrans_adj_le &
  [ STEM < "reverse" >,
    SYNSEM.LOCAL.CONT.KEY _reverse_adj_rel ].

:end :instance.


; <<>>
; >> reverse.v.1.vm.tdl
; reverse.v.1.vm.tdl

:begin :instance.

reverse_v1 := mv_np_trans_le &
  [ STEM < "reverse" >,
    SYNSEM.LOCAL.CONT.KEY _reverse_rel ].

:end :instance.


; <<>>
; >> revert.v.1.vm.tdl
; revert.v.1.vm.tdl

:begin :instance.

revert_v1 := mv_np_trans_le &
  [ STEM < "revert" >,
    SYNSEM.LOCAL.CONT.KEY _revert_rel ].

:end :instance.


; <<>>
; >> review.v.1.vm.tdl
; review.v.1.vm.tdl

:begin :instance.

review_v1 := mv_np_trans_le &
  [ STEM < "review" >,
    SYNSEM.LOCAL.CONT.KEY _review_rel ].

:end :instance.


; <<>>
; >> revise.v.1.vm.tdl
; revise.v.1.vm.tdl

:begin :instance.

revise_v1 := mv_np_trans_le &
  [ STEM < "revise" >,
    SYNSEM.LOCAL.CONT.KEY _revise_rel ].

:end :instance.


; <<>>
; >> revive.v.1.tdl
; revive.v.1.tdl

:begin :instance.

revive_v1 := mv_unacc_le &
  [ STEM < "revive" >,
    SYNSEM.LOCAL.CONT.KEY _revive_und_rel ].

:end :instance.


; <<>>
; >> revive.v.2.vm.tdl
; revive.v.2.vm.tdl

:begin :instance.

revive_v2 := mv_np_trans_le &
  [ STEM < "revive" >,
    SYNSEM.LOCAL.CONT.KEY _revive_rel ].

:end :instance.


; <<>>
; >> revolve.v.1.tdl
; revolve.v.1.tdl

:begin :instance.

revolve_v1 := mv_prep*_intrans_le &
  [ STEM < "revolve" >,
    SYNSEM.LOCAL.CONT [ KEY _revolve_rel,
			COMPKEY _around_rel ] ].

:end :instance.


; <<>>
; >> rhetoric.n.1.vm.tdl
; rhetoric.n.1.vm.tdl

:begin :instance.

rhetoric_n1 := massn_le &
  [ STEM < "rhetoric" >,
    SYNSEM.LOCAL.CONT.KEY _rhetoric_rel ].

:end :instance.


; <<>>
; >> rhineland.n.1.vm.tdl
; rhineland.n.1.vm.tdl

:begin :instance.

Rhineland_n1 := proper_le &
  [ STEM < "rhineland" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'Rhineland ].

:end :instance.


; <<>>
; >> rhythm.n.1.vm.tdl
; rhythm.n.1.vm.tdl

:begin :instance.

rhythm_n1 := massn_le &
  [ STEM < "rhythm" >,
    SYNSEM.LOCAL.CONT.KEY _rhythm_rel ].

:end :instance.


; <<>>
; >> rhythm.n.2.vm.tdl
; rhythm.n.2.vm.tdl

:begin :instance.

rhythm_n2 := intr_noun_word_le &
  [ STEM < "rhythm" >,
    SYNSEM.LOCAL.CONT.KEY _rhythm_rel ].

:end :instance.


; <<>>
; >> rice.n.1.tdl
; rice.n.1.tdl

:begin :instance.

rice1 := massn_le &
  [ STEM < "rice" >,
    SYNSEM.LOCAL.CONT.KEY _rice_rel ].

:end :instance.


; <<>>
; >> rid.a.1.vm.tdl
; rid.a.1.vm.tdl

:begin :instance.

rid_a1 := trans_adj_le &
  [ STEM < "rid" >,
    SYNSEM.LOCAL.CONT [ KEY _rid_rel,
			COMPKEY _of_rel ] ].

:end :instance.


; <<>>
; >> ride.n.1.vm.tdl
; ride.n.1.vm.tdl

:begin :instance.

ride_n1 := intr_noun_word_le &
  [ STEM < "ride" >,
    SYNSEM.LOCAL.CONT.KEY _ride_rel ].

:end :instance.


; <<>>
; >> ride.v.1.vm.tdl
; ride.v.1.vm.tdl

:begin :instance.

ride_v1 := mv_np_trans_le &
  [ STEM < "ride" >,
    SYNSEM.LOCAL.CONT.KEY _ride_v_rel ].

:end :instance.


; <<>>
; >> ridiculous.a.1.vm.tdl
; ridiculous.a.1.vm.tdl

:begin :instance.

ridiculous_a1 := intrans_adj_le &
  [ STEM < "ridiculous" >,
    SYNSEM.LOCAL.CONT.KEY _ridiculous_rel ].

:end :instance.


; <<>>
; >> ridiculuously.a.1.vm.tdl
; ridiculuously.a.1.vm.tdl

:begin :instance.

ridiculously := vp_adv_post_word_le &
  [ STEM < "ridiculuously" >,
    SYNSEM.LOCAL.CONT.KEY _ridiculously_rel ].

:end :instance.


; <<>>
; >> right.a.1.vm.tdl
; right.a.1.vm.tdl

:begin :instance.

right_a1 := intrans_adj_le &
  [ STEM < "right" >,
    SYNSEM.LOCAL.CONT.KEY _right_rel ].

:end :instance.


; <<>>
; >> right.a.2.vm.tdl
; right.a.2.vm.tdl

:begin :instance.

right_adv1 := adv_pre_word_le &
  [ STEM < "right" >,
    SYNSEM.LOCAL.CONT.KEY _right_adv_rel ].

:end :instance.


; <<>>
; >> right.away.a.1.vm.tdl
; right.away.a.1.vm.tdl

:begin :instance.

right_away_adv1 := np_adv_word_mle1 &
  [ STEM < "right", "away" >,
    SYNSEM.LOCAL.CONT.KEY _right_away_rel ].

:end :instance.


; <<>>
; >> right.now.a.1.vm.tdl
; right.now.a.1.vm.tdl

:begin :instance.

right_now_adv1 := np_adv_word_mle1 &
  [ STEM < "right", "now" >,
    SYNSEM.LOCAL.CONT.KEY _right_now_rel ].

:end :instance.


; <<>>
; >> rigid.a.1.vm.tdl
; rigid.a.1.vm.tdl

:begin :instance.

rigid_a1 := intrans_adj_le &
  [ STEM < "rigid" >,
    SYNSEM.LOCAL.CONT.KEY _rigid_rel ].

:end :instance.


; <<>>
; >> ring.v.1.vm.tdl
; ring.v.1.vm.tdl

:begin :instance.

ring_v1 := mv_particle_np_le &
  [ STEM < "ring" >,
    SYNSEM.LOCAL.CONT [ KEY _ring_up_rel,
			COMPKEY _up_rel ] ].

:end :instance.


; <<>>
; >> rise.n.1.vm.tdl
; rise.n.1.vm.tdl

:begin :instance.

rise_n1 := intr_noun_word_le &
  [ STEM < "rise" >,
    SYNSEM.LOCAL.CONT.KEY _rise_rel ].

:end :instance.


; <<>>
; >> rise.v.2.vm.tdl
; rise.v.2.vm.tdl

:begin :instance.

rise_v2 := mv_unacc_le &
  [ STEM < "rise" >,
    SYNSEM.LOCAL.CONT.KEY _rise_v_rel ].

:end :instance.


; <<>>
; >> road.n.1.vm.tdl
; road.n.1.vm.tdl

:begin :instance.

road_n1 := intr_noun_word_le &
  [ STEM < "road" >,
    SYNSEM.LOCAL.CONT.KEY _road_rel ].

:end :instance.


; <<>>
; >> roll.n.1.vm.tdl
; roll.n.1.vm.tdl

:begin :instance.

roll_n1 := intr_noun_word_le &
  [ STEM < "roll" >,
    SYNSEM.LOCAL.CONT.KEY _roll_rel ].

:end :instance.


; <<>>
; >> roll.v.1.vm.tdl
; roll.v.1.vm.tdl

:begin :instance.

roll_v1 := mv_unacc_le &
  [ STEM < "roll" >,
    SYNSEM.LOCAL.CONT.KEY _roll_v_rel ].

:end :instance.


; <<>>
; >> roll.v.2.vm.tdl
; roll.v.2.vm.tdl

:begin :instance.

roll_v2 := mv_np_trans_le &
  [ STEM < "roll" >,
    SYNSEM.LOCAL.CONT.KEY _roll_cause_rel ].

:end :instance.


; <<>>
; >> romantic.a.1.vm.tdl
; romantic.a.1.vm.tdl

:begin :instance.

romantic_a1 := intrans_adj_le &
  [ STEM < "romantic" >,
    SYNSEM.LOCAL.CONT.KEY _romantic_rel ].

:end :instance.


; <<>>
; >> room.n.1.vm.tdl
; room.n.1.vm.tdl

:begin :instance.

room_n1 := massn_le &
  [ STEM < "room" >,
    SYNSEM.LOCAL.CONT.KEY _room_space_rel ].

:end :instance.


; <<>>
; >> room.n.2.vm.tdl
; room.n.2.vm.tdl

:begin :instance.

room_n2 := intr_noun_word_le &
  [ STEM < "room" >,
    SYNSEM.LOCAL.CONT.KEY _room_rel ].

:end :instance.


; <<>>
; >> rostock.n.1.vm.tdl
; rostock.n.1.vm.tdl

:begin :instance.

Rostock_n1 := proper_le &
  [ STEM < "rostock" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'Rostock ].

:end :instance.


; <<>>
; >> rotate.v.1.vm.tdl
; rotate.v.1.vm.tdl

:begin :instance.

rotate_v1 := mv_unacc_le &
  [ STEM < "rotate" >,
    SYNSEM.LOCAL.CONT.KEY _rotate_rel ].

:end :instance.


; <<>>
; >> rotate.v.2.vm.tdl
; rotate.v.2.vm.tdl

:begin :instance.

rotate_v2 := mv_np_trans_le &
  [ STEM < "rotate" >,
    SYNSEM.LOCAL.CONT.KEY _rotate_cause_rel ].

:end :instance.


; <<>>
; >> roughly.a.1.tdl
; roughly.a.1.tdl

:begin :instance.

roughly_adv := degree_spec_le &
  [ STEM < "roughly" >,
    SYNSEM.LOCAL.CONT.KEY _roughly_rel ].

:end :instance.


; <<>>
; >> round.a.1.vm.tdl
; round.a.1.vm.tdl

:begin :instance.

round_a1 := intrans_adj_le &
  [ STEM < "round" >,
    SYNSEM.LOCAL.CONT.KEY _round_rel ].

:end :instance.


; <<>>
; >> roundabout.a.1.vm.tdl
; roundabout.a.1.vm.tdl

:begin :instance.

roundabout_a1 := intrans_adj_le &
  [ STEM < "roundabout" >,
    SYNSEM.LOCAL.CONT.KEY _roundabout_adj_rel ].

:end :instance.


; <<>>
; >> roundabout.n.1.vm.tdl
; roundabout.n.1.vm.tdl

:begin :instance.

roundabout_n1 := intr_noun_word_le &
  [ STEM < "roundabout" >,
    SYNSEM.LOCAL.CONT.KEY _roundabout_rel ].

:end :instance.


; <<>>
; >> route.n.1.vm.tdl
; route.n.1.vm.tdl

:begin :instance.

route_n1 := intr_noun_word_le &
  [ STEM < "route" >,
    SYNSEM.LOCAL.CONT.KEY _route_rel ].

:end :instance.


; <<>>
; >> routine.a.1.vm.tdl
; routine.a.1.vm.tdl

:begin :instance.

routine_a1 := intrans_adj_le &
  [ STEM < "routine" >,
    SYNSEM.LOCAL.CONT.KEY _routine_adj_rel ].

:end :instance.


; <<>>
; >> routine.n.1.vm.tdl
; routine.n.1.vm.tdl

:begin :instance.

routine_n1 := intr_noun_word_le &
  [ STEM < "routine" >,
    SYNSEM.LOCAL.CONT.KEY _routine_rel ].

:end :instance.


; <<>>
; >> row.n.1.vm.tdl
; row.n.1.vm.tdl

:begin :instance.

row_n1 := intr_noun_word_le &
  [ STEM < "row" >,
    SYNSEM.LOCAL.CONT.KEY _row_n_rel ].

:end :instance.


; <<>>
; >> row.n.2.vm.tdl
; row.n.2.vm.tdl

:begin :instance.

row_n2 := intr_noun_word_le &
  [ STEM < "row" >,
    SYNSEM.LOCAL.CONT.KEY _row_fight_rel ].

:end :instance.


; <<>>
; >> rubbish.c.1.vm.tdl
; rubbish.c.1.vm.tdl

:begin :instance.

rubbish_root := disc_adv_le &
  [ STEM < "rubbish" >,
    SYNSEM.LOCAL.CONT.KEY.EXCL 'rubbish ].

:end :instance.


; <<>>
; >> rule.v.1.vm.tdl
; rule.v.1.vm.tdl

:begin :instance.

rule_v1 := mv_particle_np_le &
  [ STEM < "rule" >,
    SYNSEM.LOCAL.CONT [ KEY _rule_out_rel,
			COMPKEY _out_rel ] ].

:end :instance.


; <<>>
; >> run.into.v.1.vm.tdl
; run.into.v.1.vm.tdl

:begin :instance.

run_into_v1 := mv_empty_prep_intrans_le &
  [ STEM < "run" >,
    SYNSEM.LOCAL.CONT [ KEY _run_into_rel,
			COMPKEY _into_rel ] ].

:end :instance.


; <<>>
; >> run.n.1.vm.tdl
; run.n.1.vm.tdl

:begin :instance.

run_n1 := intr_noun_word_le &
  [ STEM < "run" >,
    SYNSEM.LOCAL.CONT.KEY _run_n_rel ].

:end :instance.


; <<>>
; >> run.off.v.1.vm.tdl
; run.off.v.1.vm.tdl

:begin :instance.

run_off_v1 := mv_particle_np_le &
  [ STEM < "run" >,
    SYNSEM.LOCAL.CONT [ KEY _run_off_rel,
			COMPKEY _off_rel ] ].

:end :instance.


; <<>>
; >> s.c.1.tdl
; s.c.1.tdl

:begin :instance.

apostrophe_s := poss_clitic_le &
  [ STEM < "s" > ].

:end :instance.


; <<>>
; >> saarbruecken.n.1.vm.tdl
; saarbruecken.n.1.vm.tdl

:begin :instance.

Saarbruecken_n1 := proper_le &
  [ STEM < "saarbruecken" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'Saarbruecken ].

:end :instance.


; <<>>
; >> sacrifice.n.1.tdl
; sacrifice.n.1.tdl

:begin :instance.

sacrifice_n1 := massn_le &
  [ STEM < "sacrifice" >,
    SYNSEM.LOCAL.CONT.KEY _sacrifice_rel ].

:end :instance.


; <<>>
; >> sad.a.1.vm.tdl
; sad.a.1.vm.tdl

:begin :instance.

sad_a1 := intrans_adj_le &
  [ STEM < "sad" >,
    SYNSEM.LOCAL.CONT.KEY _sad_rel ].

:end :instance.


; <<>>
; >> sadly.a.1.vm.tdl
; sadly.a.1.vm.tdl

:begin :instance.

sadly := adv_word_le &
  [ STEM < "sadly" >,
    SYNSEM.LOCAL.CONT.KEY _sadly_rel ].

:end :instance.


; <<>>
; >> safe.a.1.vm.tdl
; safe.a.1.vm.tdl

:begin :instance.

safe_a1 := intrans_adj_le &
  [ STEM < "safe" >,
    SYNSEM.LOCAL.CONT.KEY _safe_rel ].

:end :instance.


; <<>>
; >> safety.n.1.vm.tdl
; safety.n.1.vm.tdl

:begin :instance.

safety_n1 := massn_le &
  [ STEM < "safety" >,
    SYNSEM.LOCAL.CONT.KEY _safety_rel ].

:end :instance.


; <<>>
; >> sail.v.1.vm.tdl
; sail.v.1.vm.tdl

:begin :instance.

sail_v1 := mv_unerg_le &
  [ STEM < "sail" >,
    SYNSEM.LOCAL.CONT.KEY _sail_rel ].

:end :instance.


; <<>>
; >> salad.n.1.vm.tdl
; salad.n.1.vm.tdl

:begin :instance.

salad_n1 := intr_noun_word_le &
  [ STEM < "salad" >,
    SYNSEM.LOCAL.CONT.KEY _salad_rel ].

:end :instance.


; <<>>
; >> salad.n.2.vm.tdl
; salad.n.2.vm.tdl

:begin :instance.

salad_n2 := massn_le &
  [ STEM < "salad" >,
    SYNSEM.LOCAL.CONT.KEY _salad_rel ].

:end :instance.


; <<>>
; >> sales.a.1.vm.tdl
; sales.a.1.vm.tdl

:begin :instance.

sales_a1 := intrans_adj_le &
  [ STEM < "sales" >,
    SYNSEM.LOCAL.CONT.KEY _sales_rel ].

:end :instance.


; <<>>
; >> same.a.1.vm.tdl
; same.a.1.vm.tdl

:begin :instance.

same_a1 := attr_intrans_adj_le &
  [ STEM < "same" >,
    SYNSEM.LOCAL.CONT.KEY _same_rel ].

:end :instance.


; <<>>
; >> sandy.n.1.tdl
; sandy.n.1.tdl

:begin :instance.

sandy := proper_le &
  [ STEM < "sandy" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'sandy ].

:end :instance.


; ERB (12-12-97) Sara needs a gender.

; <<>>
; >> sara.n.1.tdl
; sara.n.1.tdl

:begin :instance.

sara := proper_le &
  [ STEM < "sara" >,
    SYNSEM.LOCAL [ CONT.KEY.NAMED 'sara,
		   AGR.PNG.GEN fem* ] ].

:end :instance.

; <<>>
; >> satisfy.v.1.vm.tdl
; satisfy.v.1.vm.tdl

:begin :instance.

satisfy_v1 := mv_np_trans_le &
  [ STEM < "satisfy" >,
    SYNSEM.LOCAL.CONT.KEY _satisfy_rel ].

:end :instance.


; <<>>
; >> saturday.n.1.tdl
; saturday.n.1.tdl

:begin :instance.

saturday1 := day_of_week_le &
  [ STEM < "saturday" >,
    SYNSEM.LOCAL.CONT.KEY.DAY 'sat ].

:end :instance.


; <<>>
; >> saturday.n.2.tdl
; saturday.n.2.tdl

:begin :instance.

saturday_cn := intr_temp_noun_le &
  [ STEM < "saturday" >,
    SYNSEM.LOCAL.CONT.KEY dofw_rel & [ DAY 'saturday ] ].

:end :instance.


; <<>>
; >> sausage.n.1.vm.tdl
; sausage.n.1.vm.tdl

:begin :instance.

sausage_n1 := intr_noun_word_le &
  [ STEM < "sausage" >,
    SYNSEM.LOCAL.CONT.KEY _sausage_rel ].

:end :instance.


; <<>>
; >> sausage.n.2.vm.tdl
; sausage.n.2.vm.tdl

:begin :instance.

sausage_n2 := massn_le &
  [ STEM < "sausage" >,
    SYNSEM.LOCAL.CONT.KEY _sausage_rel ].

:end :instance.


; <<>>
; >> save.v.1.vm.tdl
; save.v.1.vm.tdl

:begin :instance.

save_v1 := mv_np_trans_le &
  [ STEM < "save" >,
    SYNSEM.LOCAL.CONT.KEY _save_rel ].

:end :instance.


; <<>>
; >> say.v.1.tdl
; say.v.1.tdl

:begin :instance.

say_v1 := mv_np_trans_le &
  [ STEM < "say" >,
    SYNSEM.LOCAL.CONT.KEY _say_rel ].

:end :instance.


; <<>>
; >> say.v.2.tdl
; say.v.2.tdl

:begin :instance.

say_v2 := mv_cp_non_trans_le &
  [ STEM < "say" >,
    SYNSEM.LOCAL.CONT.KEY _say_rel ].

:end :instance.


; <<>>
; >> say.v.3.vm.tdl
; say.v.3.vm.tdl

:begin :instance.

say_v3 := mv_prep_intrans_event_le &
  [ STEM < "say" >,
    SYNSEM.LOCAL.CONT.KEY _say_loc_rel ].

:end :instance.


; <<>>
; >> say.hour.c.1.vm.tdl
; say.hour.c.1.vm.tdl

:begin :instance.

say_approx := hour_mod_word_le &
  [ STEM < "say" >,
    SYNSEM.LOCAL.CONT.KEY _say_approx_rel ].

:end :instance.


; <<>>
; >> scarce.a.1.vm.tdl
; scarce.a.1.vm.tdl

:begin :instance.

scarce_a1 := intrans_adj_le &
  [ STEM < "scarce" >,
    SYNSEM.LOCAL.CONT.KEY _scarce_rel ].

:end :instance.


; <<>>
; >> scarcely.a.1.vm.tdl
; scarcely.a.1.vm.tdl

:begin :instance.

scarcely_adv1 := adv_pre_word_le &
  [ STEM < "scarcely" >,
    SYNSEM.LOCAL.CONT.KEY _scarcely_rel ].

:end :instance.


; <<>>
; >> schedule.n.1.vm.tdl
; schedule.n.1.vm.tdl

:begin :instance.

schedule_n1 := intr_noun_word_le &
  [ STEM < "schedule" >,
    SYNSEM.LOCAL.CONT.KEY _schedule_n_rel ].

:end :instance.


; <<>>
; >> schedule.v.1.vm.tdl
; schedule.v.1.vm.tdl

:begin :instance.

schedule_v1 := mv_np_trans_le &
  [ STEM < "schedule" >,
    SYNSEM.LOCAL.CONT.KEY _schedule_rel ].

:end :instance.


; <<>>
; >> schedule.v.2.vm.tdl
; schedule.v.2.vm.tdl

:begin :instance.

schedule_v2 := mv_empty_prep_trans_le &
  [ STEM < "schedule" >,
    SYNSEM.LOCAL.CONT [ KEY _schedule_for_rel,
			OCOMPKEY _for_rel ] ].

:end :instance.


; <<>>
; >> scheduled.a.1.vm.tdl
; scheduled.a.1.vm.tdl

:begin :instance.

scheduled_a1 := intrans_adj_le &
  [ STEM < "scheduled" >,
    SYNSEM.LOCAL.CONT.KEY _scheduled_rel ].

:end :instance.


; <<>>
; >> schedulewise.a.1.vm.tdl
; schedulewise.a.1.vm.tdl

:begin :instance.

schedulewise_adv1 := vp_adv_post_word_le &
  [ STEM < "schedulewise" >,
    SYNSEM.LOCAL.CONT.KEY _schedulewise_rel ].

:end :instance.


; <<>>
; >> scheduling.n.1.vm.tdl
; scheduling.n.1.vm.tdl

:begin :instance.

scheduling_n1 := deverbal_noun_intr_word_le &
  [ STEM < "scheduling" >,
    SYNSEM.LOCAL.CONT.ALTKEY _schedule_rel ].

:end :instance.


; <<>>
; >> scheytt.n.1.vm.tdl
; scheytt.n.1.vm.tdl

:begin :instance.

Scheytt_n1 := proper_le &
  [ STEM < "scheytt" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'Scheytt ].

:end :instance.


; <<>>
; >> schmidt.n.1.vm.tdl
; schmidt.n.1.vm.tdl

:begin :instance.

Schmidt_n1 := proper_le &
  [ STEM < "schmidt" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'Schmidt ].

:end :instance.


; <<>>
; >> schmidtke.n.1.vm.tdl
; schmidtke.n.1.vm.tdl

:begin :instance.

Schmidtke_n1 := proper_le &
  [ STEM < "schmidtke" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'Schmidtke ].

:end :instance.


; <<>>
; >> school.n.1.vm.tdl
; school.n.1.vm.tdl

:begin :instance.

school_n1 := massn_le &
  [ STEM < "school" >,
    SYNSEM.LOCAL.CONT.KEY _school_rel ].

:end :instance.


; <<>>
; >> school.n.2.vm.tdl
; school.n.2.vm.tdl

:begin :instance.

school_n2 := intr_noun_word_le &
  [ STEM < "school" >,
    SYNSEM.LOCAL.CONT.KEY _school_rel ].

:end :instance.


; <<>>
; >> schwerin.n.1.vm.tdl
; schwerin.n.1.vm.tdl

:begin :instance.

Schwerin_n1 := proper_le &
  [ STEM < "schwerin" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'Schwerin ].

:end :instance.


; <<>>
; >> science.n.1.vm.tdl
; science.n.1.vm.tdl

:begin :instance.

science_n1 := massn_le &
  [ STEM < "science" >,
    SYNSEM.LOCAL.CONT.KEY _science_rel ].

:end :instance.


; <<>>
; >> science.n.2.vm.tdl
; science.n.2.vm.tdl

:begin :instance.

science_n2 := intr_noun_word_le &
  [ STEM < "science" >,
    SYNSEM.LOCAL.CONT.KEY _science_rel ].

:end :instance.


; <<>>
; >> scope.n.1.vm.tdl
; scope.n.1.vm.tdl

:begin :instance.

scope_n1 := intr_noun_word_le &
  [ STEM < "scope" >,
    SYNSEM.LOCAL.CONT.KEY _scope_rel ].

:end :instance.


; <<>>
; >> scratch.v.1.vm.tdl
; scratch.v.1.vm.tdl

:begin :instance.

scratch_v1 := mv_particle_np_le &
  [ STEM < "scratch" >,
    SYNSEM.LOCAL.CONT [ KEY _scratch_up_rel,
			COMPKEY _up_rel ] ].

:end :instance.


; <<>>
; >> screen.n.1.vm.tdl
; screen.n.1.vm.tdl

:begin :instance.

screen_n1 := intr_noun_word_le &
  [ STEM < "screen" >,
    SYNSEM.LOCAL.CONT.KEY _screen_rel ].

:end :instance.


; <<>>
; >> screen.v.1.vm.tdl
; screen.v.1.vm.tdl

:begin :instance.

screen_v1 := mv_np_trans_le &
  [ STEM < "screen" >,
    SYNSEM.LOCAL.CONT.KEY _screen_v_rel ].

:end :instance.


; <<>>
; >> scrupulous.a.1.vm.tdl
; scrupulous.a.1.vm.tdl

:begin :instance.

scrupulous_a1 := intrans_adj_le &
  [ STEM < "scrupulous" >,
    SYNSEM.LOCAL.CONT.KEY _scrupulous_rel ].

:end :instance.


; <<>>
; >> sea.n.1.vm.tdl
; sea.n.1.vm.tdl

:begin :instance.

sea_n1 := intr_noun_word_le &
  [ STEM < "sea" >,
    SYNSEM.LOCAL.CONT.KEY _sea_rel ].

:end :instance.


; <<>>
; >> season.n.1.vm.tdl
; season.n.1.vm.tdl

:begin :instance.

season_n1 := intr_temp_noun_le &
  [ STEM < "season" >,
    SYNSEM.LOCAL.CONT.KEY _season_rel ].

:end :instance.


; <<>>
; >> season.n.2.vm.tdl
; season.n.2.vm.tdl

:begin :instance.

season_n2 := intr_temp_noun_nomod_le &
  [ STEM < "season" >,
    SYNSEM.LOCAL.CONT.KEY _season_rel ].

:end :instance.


; <<>>
; >> second.day.n.1.tdl
; second.day.n.1.tdl

:begin :instance.

second_day := day_of_month_le &
  [ STEM < "second" >,
    SYNSEM.LOCAL.CONT.KEY.DAY 2 ].

:end :instance.


; <<>>
; >> second.day.n.2.tdl
; second.day.n.2.tdl

:begin :instance.

second_day_num := day_of_month_le &
  [ STEM < "2nd" >,
    SYNSEM.LOCAL.CONT.KEY.DAY 2 ].

:end :instance.


; <<>>
; >> secondly.c.1.vm.tdl
; secondly.c.1.vm.tdl

:begin :instance.

secondly_root := disc_adv_le &
  [ STEM < "secondly" >,
    SYNSEM.LOCAL.CONT.KEY.EXCL 'secondly ].

:end :instance.


; <<>>
; >> secretary.n.1.vm.tdl
; secretary.n.1.vm.tdl

:begin :instance.

secretary_n1 := intr_noun_word_le &
  [ STEM < "secretary" >,
    SYNSEM.LOCAL.CONT.KEY _secretary_rel ].

:end :instance.


; <<>>
; >> secure.a.1.vm.tdl
; secure.a.1.vm.tdl

:begin :instance.

secure_a1 := intrans_adj_le &
  [ STEM < "secure" >,
    SYNSEM.LOCAL.CONT.KEY _secure_rel ].

:end :instance.


; <<>>
; >> security.n.1.vm.tdl
; security.n.1.vm.tdl

:begin :instance.

security_n1 := massn_le &
  [ STEM < "security" >,
    SYNSEM.LOCAL.CONT.KEY _security_rel ].

:end :instance.


; <<>>
; >> see.about.v.1.vm.tdl
; see.about.v.1.vm.tdl

:begin :instance.

see_about_v1 := mv_empty_prep_intrans_le &
  [ STEM < "see" >,
    SYNSEM.LOCAL.CONT [ KEY _see_about_rel,
			COMPKEY _about_rel ] ].

:end :instance.


; <<>>
; >> see.to.v.1.vm.tdl
; see.to.v.1.vm.tdl

:begin :instance.

see_to_v1 := mv_empty_prep_intrans_le &
  [ STEM < "see" >,
    SYNSEM.LOCAL.CONT [ KEY _see_to_rel,
			COMPKEY _to_rel ] ].

:end :instance.


; <<>>
; >> see.v.1.tdl
; see.v.1.tdl

:begin :instance.

see_v1 := mv_np_trans_le &
  [ STEM < "see" >,
    SYNSEM.LOCAL.CONT.KEY _see_rel ].

:end :instance.


; <<>>
; >> see.v.2.tdl
; see.v.2.tdl

:begin :instance.

see_v2 := mv_cp_non_trans_le &
  [ STEM < "see" >,
    SYNSEM.LOCAL.CONT.KEY _see_rel ].

:end :instance.


; <<>>
; >> see.v.3.tdl
; see.v.3.tdl

:begin :instance.

see_v3 := mv_unerg_le &
  [ STEM < "see" >,
    SYNSEM.LOCAL.CONT.KEY _see_rel ].

:end :instance.


; <<>>
; >> see.v.4.tdl
; see.v.4.tdl

:begin :instance.

see_v4 := mv_cp_prop*_non_trans_le &
  [ STEM < "see" >,
    SYNSEM.LOCAL.CONT.KEY _see_understand_rel ].

:end :instance.


; <<>>
; >> see.v.5.tdl
; see.v.5.tdl

:begin :instance.

see_v5 := mv_np_comp_le &
  [ STEM < "see" >,
    SYNSEM.LOCAL [ CAT.VALENCE.COMPS 
			 < [ LOCAL.CONT.INDEX #ind ],
			   [ LOCAL.CONT.INDEX #ind ] >,
		   CONT [ KEY _see_consider_rel,
			  OCOMPKEY _as_rel ] ] ].

:end :instance.


; <<>>
; >> seem.v.1.tdl
; seem.v.1.tdl

:begin :instance.

seem1 := mv_pp_inf_ssr_le &
  [ STEM < "seem" >,
    SYNSEM.LOCAL.CONT.KEY _seem_rel ].

:end :instance.


; <<>>
; >> seem.v.2.tdl
; seem.v.2.tdl

:begin :instance.

seem2 := mv_prdp_pp_ssr_le &
  [ STEM < "seem" >,
    SYNSEM.LOCAL [ CAT.VALENCE.COMPS.FIRST.LOCAL.CAT.HEAD adj,
		   CONT.KEY _sound_seem_rel ] ].

:end :instance.


; <<>>
; >> seem.v.3.tdl
; seem.v.3.tdl

:begin :instance.

seem_v3 := mv_expl_it_subj_le &
  [ STEM < "seem" >,
    SYNSEM.LOCAL.CONT.KEY _seem_rel ].

:end :instance.


; <<>>
; >> segregate.v.1.vm.tdl
; segregate.v.1.vm.tdl

:begin :instance.

segregate_v1 := mv_np_trans_le &
  [ STEM < "segregate" >,
    SYNSEM.LOCAL.CONT.KEY _segregate_rel ].

:end :instance.


; <<>>
; >> seize.v.1.vm.tdl
; seize.v.1.vm.tdl

:begin :instance.

seize_v1 := mv_np_trans_le &
  [ STEM < "seize" >,
    SYNSEM.LOCAL.CONT.KEY _seize_rel ].

:end :instance.


; <<>>
; >> seldom.a.1.vm.tdl
; seldom.a.1.vm.tdl

:begin :instance.

seldom_adv1 := adv_word_le &
  [ STEM < "seldom" >,
    SYNSEM.LOCAL.CONT.KEY _seldom_rel ].

:end :instance.


; <<>>
; >> select.v.1.vm.tdl
; select.v.1.vm.tdl

:begin :instance.

select_v1 := mv_np_trans_le &
  [ STEM < "select" >,
    SYNSEM.LOCAL.CONT.KEY _select_rel ].

:end :instance.


; <<>>
; >> selection.n.1.vm.tdl
; selection.n.1.vm.tdl

:begin :instance.

selection_n1 := deverbal_noun_intr_word_le &
  [ STEM < "selection" >,
    SYNSEM.LOCAL.CONT.ALTKEY _select_rel ].

:end :instance.


; <<>>
; >> self-assured.a.1.vm.tdl
; self-assured.a.1.vm.tdl

:begin :instance.

self-assured_a1 := intrans_adj_le &
  [ STEM < "self-assured" >,
    SYNSEM.LOCAL.CONT.KEY _self-assured_rel ].

:end :instance.


; <<>>
; >> selfless.a.1.vm.tdl
; selfless.a.1.vm.tdl

:begin :instance.

selfless_a1 := intrans_adj_le &
  [ STEM < "selfless" >,
    SYNSEM.LOCAL.CONT.KEY _selfless_rel ].

:end :instance.


; <<>>
; >> sell.v.1.vm.tdl
; sell.v.1.vm.tdl

:begin :instance.

sell_v1 := mv_ditrans_le &
  [ STEM < "sell" >,
    SYNSEM.LOCAL.CONT.KEY _sell_v_rel ].

:end :instance.


; <<>>
; >> seminar.n.1.vm.tdl
; seminar.n.1.vm.tdl

:begin :instance.

seminar_n1 := intr_noun_word_le &
  [ STEM < "seminar" >,
    SYNSEM.LOCAL.CONT.KEY _seminar_rel ].

:end :instance.


; <<>>
; >> send.v.1.tdl
; send.v.1.tdl

:begin :instance.

send_v1 := mv_ditrans_le &
  [ STEM < "send" >,
    SYNSEM.LOCAL.CONT.KEY _send_rel ].

:end :instance.


; <<>>
; >> send.v.2.tdl
; send.v.2.tdl

:begin :instance.

send_v2 := mv_prep_trans_le &
  [ STEM < "send" >,
    SYNSEM.LOCAL.CONT [ KEY _send_rel, 
			OCOMPKEY dir_rel ] ].

:end :instance.


; <<>>
; >> senior.a.1.vm.tdl
; senior.a.1.vm.tdl

:begin :instance.

senior_a1 := intrans_adj_le &
  [ STEM < "senior" >,
    SYNSEM.LOCAL.CONT.KEY _senior_rel ].

:end :instance.


; <<>>
; >> sense.n.1.vm.tdl
; sense.n.1.vm.tdl

:begin :instance.

sense_n1 := massn_le &
  [ STEM < "sense" >,
    SYNSEM.LOCAL.CONT.KEY _sense_rel ].

:end :instance.


; <<>>
; >> sensible.a.1.vm.tdl
; sensible.a.1.vm.tdl

:begin :instance.

sensible_a1 := intrans_adj_le &
  [ STEM < "sensible" >,
    SYNSEM.LOCAL.CONT.KEY _sensible_rel ].

:end :instance.


; <<>>
; >> separate.a.1.vm.tdl
; separate.a.1.vm.tdl

:begin :instance.

separate_a1 := intrans_adj_le &
  [ STEM < "separate" >,
    SYNSEM.LOCAL.CONT.KEY _separate_distinct_rel ].

:end :instance.


; <<>>
; >> separately.a.1.vm.tdl
; separately.a.1.vm.tdl

:begin :instance.

separately_adv1 := vp_adv_post_word_le &
  [ STEM < "separately" >,
    SYNSEM.LOCAL.CONT.KEY _separately_rel ].

:end :instance.


; <<>>
; >> september.n.1.tdl
; september.n.1.tdl

:begin :instance.

september := month_word_le &
  [ STEM < "september" >,
    SYNSEM.LOCAL.CONT.KEY.MONTH 'sep ].

:end :instance.


; <<>>
; >> september.n.2.tdl
; september.n.2.tdl

:begin :instance.

september_2 := month_year_word_le &
  [ STEM < "september" >,
    SYNSEM.LOCAL.CONT.KEY.MONTH 'sep ].

:end :instance.


; <<>>
; >> series.n.1.vm.tdl
; series.n.1.vm.tdl

:begin :instance.

series_n1 := intr_noun_word_le &
  [ STEM < "series" >,
    SYNSEM.LOCAL.CONT.KEY _series_rel ].

:end :instance.


; <<>>
; >> serious.a.1.vm.tdl
; serious.a.1.vm.tdl

:begin :instance.

serious_a1 := intrans_adj_le &
  [ STEM < "serious" >,
    SYNSEM.LOCAL.CONT.KEY _serious_rel ].

:end :instance.


; <<>>
; >> seriously.a.1.tdl
; seriously.a.1.tdl

:begin :instance.

seriously_adv := degree_spec_le &
  [ STEM < "seriously" >,
    SYNSEM.LOCAL.CONT.KEY _seriously_adv_rel ].

:end :instance.


; <<>>
; >> seriously.a.2.tdl
; seriously.a.2.tdl

:begin :instance.

seriously := adv_pre_word_le &
  [ STEM < "seriously" >,
    SYNSEM.LOCAL.CONT.KEY _seriously_rel ].

:end :instance.


; <<>>
; >> serve.v.1.tdl
; serve.v.1.tdl

:begin :instance.

serve_v1 := mv_np*_trans_le &
  [ STEM < "serve" >,
    SYNSEM.LOCAL.CONT.KEY _serve_rel ].

:end :instance.


; <<>>
; >> session.n.1.vm.tdl
; session.n.1.vm.tdl

:begin :instance.

session_n1 := intr_noun_word_le &
  [ STEM < "session" >,
    SYNSEM.LOCAL.CONT.KEY _session_rel ].

:end :instance.


; <<>>
; >> set.apart.v.1.tdl
; set.apart.v.1.tdl

:begin :instance.

set_apart_v1 := mv_np_particle_only_le &
  [ STEM < "set" >,
    SYNSEM.LOCAL.CONT [ KEY _set_apart_rel,
			COMPKEY _apart_rel ] ].

:end :instance.


; <<>>
; >> set.off.v.1.vm.tdl
; set.off.v.1.vm.tdl

:begin :instance.

set_off_v1 := mv_particle_np_le &
  [ STEM < "set" >,
    SYNSEM.LOCAL.CONT [ KEY _set_off_rel,
			COMPKEY _off_rel ] ].

:end :instance.


; <<>>
; >> set.up.v.1.vm.tdl
; set.up.v.1.vm.tdl

:begin :instance.

set_up_v1 := mv_particle_np_le &
  [ STEM < "set" >,
    SYNSEM.LOCAL.CONT [ KEY _set_up_rel,
			COMPKEY _up_rel ] ].

:end :instance.


; <<>>
; >> set.v.1.tdl
; set.v.1.tdl

:begin :instance.

set_v1 := mv_prep_trans_le &
  [ STEM < "set" >,
    SYNSEM.LOCAL.CONT [ KEY _set_rel,
			OCOMPKEY dir_rel ] ].

:end :instance.


; <<>>
; >> set.a.1.vm.tdl
; set.a.1.vm.tdl

:begin :instance.

set_a1 := intrans_adj_le &
  [ STEM < "set" >,
    SYNSEM.LOCAL.CONT.KEY _set_adj_rel ].

:end :instance.


; <<>>
; >> setting.n.1.vm.tdl
; setting.n.1.vm.tdl

:begin :instance.

setting_n1 := intr_noun_word_le &
  [ STEM < "setting" >,
    SYNSEM.LOCAL.CONT.KEY _setting_rel ].

:end :instance.


; <<>>
; >> settle.v.1.vm.tdl
; settle.v.1.vm.tdl

:begin :instance.

settle_v1 := mv_np*_trans_le &
  [ STEM < "settle" >,
    SYNSEM.LOCAL.CONT.KEY _settle_rel ].

:end :instance.


; <<>>
; >> seven.c.1.tdl
; seven.c.1.tdl

:begin :instance.

seven := bare_unspecified_card_le & 
  [  STEM < "seven" >,
     SYNSEM.LOCAL [ CAT.HEAD intadj1,
		    CONT.--STEMLISZT.LIST < [ CONST_VALUE 7 ], ... > ] ].
:end :instance.


; <<>>
; >> seven.hour.n.1.tdl
; seven.hour.n.1.tdl

:begin :instance.

seven_hour := hour_word_le &
  [ STEM < "seven" >,
    SYNSEM.LOCAL.CONT.KEY.HOUR 7 ].

:end :instance.


; <<>>
; >> seventeen.c.1.tdl
; seventeen.c.1.tdl

:begin :instance.

seventeen := bare_unspecified_card_le & 
  [  STEM < "seventeen" >,
     SYNSEM.LOCAL [ CAT.HEAD intadj1,
		    CONT.--STEMLISZT.LIST < [ CONST_VALUE 17 ], ... > ] ].
:end :instance.


; <<>>
; >> seventeenth.a.1.vm.tdl
; seventeenth.a.1.vm.tdl

:begin :instance.

seventeenth := ordinal_adj_le &
  [ STEM < "seventeenth" >,
    SYNSEM.LOCAL.CONT.KEY.ORD 17 ].

:end :instance.


; <<>>
; >> seventeenth.day.n.1.tdl
; seventeenth.day.n.1.tdl

:begin :instance.

seventeenth_day := day_of_month_le &
  [ STEM < "seventeenth" >,
    SYNSEM.LOCAL.CONT.KEY.DAY 17 ].

:end :instance.


; <<>>
; >> seventh.a.1.vm.tdl
; seventh.a.1.vm.tdl

:begin :instance.

seventh := ordinal_adj_le &
  [ STEM < "seventh" >,
    SYNSEM.LOCAL.CONT.KEY.ORD 7 ].

:end :instance.


; <<>>
; >> seventh.day.n.1.tdl
; seventh.day.n.1.tdl

:begin :instance.

seventh_day := day_of_month_le &
  [ STEM < "seventh" >,
    SYNSEM.LOCAL.CONT.KEY.DAY 7 ].

:end :instance.


; <<>>
; >> seventy.c.1.tdl
; seventy.c.1.tdl

:begin :instance.

seventy_w_comps := complemented_unspecified_card_le & 
  [ STEM < "seventy" >,
    SYNSEM.LOCAL [ CAT [HEAD intadj2,
			VALENCE.COMPS.FIRST.LOCAL.CAT.HEAD intadj1],
		   CONT.--STEMLISZT.LIST < [ CONST_VALUE 70 ], [] > ] ].

:end :instance.


; <<>>
; >> sever.v.1.vm.tdl
; sever.v.1.vm.tdl

:begin :instance.

sever_v1 := mv_np_trans_le &
  [ STEM < "sever" >,
    SYNSEM.LOCAL.CONT.KEY _sever_rel ].

:end :instance.


; <<>>
; >> several.c.1.tdl
; several.c.1.tdl

:begin :instance.

several := pdet_pl_le &
  [ STEM < "several" >,
    SYNSEM.LOCAL.CONT.KEY _several_rel ].

:end :instance.


; <<>>
; >> shall.vx.1.tdl
; shall.vx.1.tdl

:begin :instance.

shall_aux_pos := will_aux_pos_le &
  [ STEM < "shall" > ].

:end :instance.


; <<>>
; >> sharp.a.1.vm.tdl
; sharp.a.1.vm.tdl

:begin :instance.

sharp_a1 := intrans_adj_le &
  [ STEM < "sharp" >,
    SYNSEM.LOCAL.CONT.KEY _sharp_rel ].

:end :instance.


; <<>>
; >> sharply.a.1.vm.tdl
; sharply.a.1.vm.tdl

:begin :instance.

sharply := adv_word_le &
  [ STEM < "sharply" >,
    SYNSEM.LOCAL.CONT.KEY _sharply_rel ].

:end :instance.


; <<>>
; >> she.n.1.tdl
; she.n.1.tdl

:begin :instance.

she := pers_pro_le &
  [ STEM < "she" >,
    SYNSEM.LOCAL [ CAT.HEAD.CASE nom,
		   CONT.KEY.INST [ PNG [ PN 3sg*,
					 GEN fem* ],
				   PRONTYPE std_3 ] ] ].
:end :instance.


; <<>>
; >> sheet.n.1.vm.tdl
; sheet.n.1.vm.tdl

:begin :instance.

sheet_n1 := intr_noun_word_le &
  [ STEM < "sheet" >,
    SYNSEM.LOCAL.CONT.KEY _sheet_rel ].

:end :instance.


; <<>>
; >> sheraton.n.1.vm.tdl
; sheraton.n.1.vm.tdl

:begin :instance.

Sheraton_n1 := proper_le &
  [ STEM < "sheraton" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'Sheraton ].

:end :instance.


; <<>>
; >> shetland.n.1.vm.tdl
; shetland.n.1.vm.tdl

:begin :instance.

Shetland_n1 := proper_le &
  [ STEM < "shetland" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'Shetland ].

:end :instance.


; <<>>
; >> shift.v.1.vm.tdl
; shift.v.1.vm.tdl

:begin :instance.

shift_v1 := mv_np_trans_le &
  [ STEM < "shift" >,
    SYNSEM.LOCAL.CONT.KEY _shift_rel ].

:end :instance.


; <<>>
; >> shit.c.1.vm.tdl
; shit.c.1.vm.tdl

:begin :instance.

shit_root := disc_adv_le &
  [ STEM < "shit" >,
    SYNSEM.LOCAL.CONT.KEY.EXCL 'shit ].

:end :instance.


; <<>>
; >> shop.n.1.vm.tdl
; shop.n.1.vm.tdl

:begin :instance.

shop_n1 := intr_noun_word_le &
  [ STEM < "shop" >,
    SYNSEM.LOCAL.CONT.KEY _shop_business_rel ].

:end :instance.


; <<>>
; >> shop.v.2.vm.tdl
; shop.v.2.vm.tdl

:begin :instance.

shop_v2 := mv_unerg_le &
  [ STEM < "shop" >,
    SYNSEM.LOCAL.CONT.KEY _shop_buy_rel ].

:end :instance.


; <<>>
; >> short.a.1.vm.tdl
; short.a.1.vm.tdl

:begin :instance.

short_a1 := intrans_adj_le &
  [ STEM < "short" >,
    SYNSEM.LOCAL.CONT.KEY _short_rel ].

:end :instance.


; <<>>
; >> short-term.a.1.vm.tdl
; short-term.a.1.vm.tdl

:begin :instance.

short_term_a1 := intrans_adj_le &
  [ STEM < "short-term" >,
    SYNSEM.LOCAL.CONT.KEY _short_term_rel ].

:end :instance.


; <<>>
; >> shorten.v.1.vm.tdl
; shorten.v.1.vm.tdl

:begin :instance.

shorten_v1 := mv_np_trans_le &
  [ STEM < "shorten" >,
    SYNSEM.LOCAL.CONT.KEY _shorten_rel ].

:end :instance.


; <<>>
; >> shortly.a.1.vm.tdl
; shortly.a.1.vm.tdl

:begin :instance.

shortly_adv1 := vp_adv_post_word_le &
  [ STEM < "shortly" >,
    SYNSEM.LOCAL.CONT.KEY _shortly_rel ].

:end :instance.


; <<>>
; >> should.vx.1.tdl
; should.vx.1.tdl

:begin :instance.

should_aux_pos := modal_pos_le & 
  [ STEM < "should" >,
    SYNSEM.LOCAL [ CAT.HEAD.MOOD modal_subj*,
                   CONT.KEY _should_rel ] ].

:end :instance.


; <<>>
; >> shouldnt.vx.1.tdl
; shouldnt.vx.1.tdl

:begin :instance.

should_aux_neg := modal_neg_mle1 &
  [ STEM < "shouldn", "t" >,
    SYNSEM.LOCAL [ CAT.HEAD.MOOD modal_subj*,
                   CONT.KEY _should_rel ] ].

:end :instance.


; <<>>
; >> show.n.1.vm.tdl
; show.n.1.vm.tdl

:begin :instance.

show_n1 := intr_noun_word_le &
  [ STEM < "show" >,
    SYNSEM.LOCAL.CONT.KEY _show_event_rel ].

:end :instance.


; <<>>
; >> show.that.v.1.tdl
; show.that.v.1.tdl

:begin :instance.

show_that_v1 := mv_cp_non_trans_le &
  [ STEM < "show" >,
    SYNSEM.LOCAL.CONT.KEY _show_that_rel ].

:end :instance.


; <<>>
; >> show.v.1.tdl
; show.v.1.tdl

:begin :instance.

show_v1 := mv_ditrans_le &
  [ STEM < "show" >,
    SYNSEM.LOCAL.CONT.KEY _show_rel ].

:end :instance.


; <<>>
; >> show.v.2.tdl
; show.v.2.tdl

:begin :instance.

show_v2 := mv_np_trans_le &
  [ STEM < "show" >,
    SYNSEM.LOCAL.CONT.KEY _show_rel ].

:end :instance.


; <<>>
; >> shrimp.n.1.vm.tdl
; shrimp.n.1.vm.tdl

:begin :instance.

shrimp_n1 := intr_noun_word_le &
  [ STEM < "shrimp" >,
    SYNSEM.LOCAL.CONT.KEY _shrimp_rel ].

:end :instance.


; <<>>
; >> shrove.tuesday.n.1.tdl
; shrove.tuesday.n.1.tdl

:begin :instance.

shrove_tuesday := holiday_word_mle1 &
  [ STEM < "shrove", "tuesday" >,
    SYNSEM.LOCAL.CONT.KEY.DAY 'shrove_tuesday ].

:end :instance.


; <<>>
; >> shut.a.1.vm.tdl
; shut.a.1.vm.tdl

:begin :instance.

shut_a1 := intrans_adj_le &
  [ STEM < "shut" >,
    SYNSEM.LOCAL.CONT.KEY _shut_adj_rel ].

:end :instance.


; <<>>
; >> shut.v.1.vm.tdl
; shut.v.1.vm.tdl

:begin :instance.

shut_v1 := mv_np_trans_le &
  [ STEM < "shut" >,
    SYNSEM.LOCAL.CONT.KEY _shut_rel ].

:end :instance.


; <<>>
; >> side.n.1.vm.tdl
; side.n.1.vm.tdl

:begin :instance.

side_n1 := intr_noun_word_le &
  [ STEM < "side" >,
    SYNSEM.LOCAL.CONT.KEY _side_rel ].

:end :instance.


; <<>>
; >> siemens.n.1.vm.tdl
; siemens.n.1.vm.tdl

:begin :instance.

Siemens_n1 := proper_le &
  [ STEM < "siemens" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'Siemens ].

:end :instance.


; <<>>
; >> sift.v.1.vm.tdl
; sift.v.1.vm.tdl

:begin :instance.

sift_v1 := mv_np_trans_le &
  [ STEM < "sift" >,
    SYNSEM.LOCAL.CONT.KEY _sift_rel ].

:end :instance.


; <<>>
; >> sight.n.1.vm.tdl
; sight.n.1.vm.tdl

:begin :instance.

sight_n1 := intr_noun_word_le &
  [ STEM < "sight" >,
    SYNSEM.LOCAL.CONT.KEY _sight_rel ].

:end :instance.


; <<>>
; >> sign.n.1.vm.tdl
; sign.n.1.vm.tdl

:begin :instance.

sign_n1 := intr_noun_word_le &
  [ STEM < "sign" >,
    SYNSEM.LOCAL.CONT.KEY _sign_rel ].

:end :instance.


; <<>>
; >> silence.n.1.vm.tdl
; silence.n.1.vm.tdl

:begin :instance.

silence_n1 := massn_le &
  [ STEM < "silence" >,
    SYNSEM.LOCAL.CONT.KEY _silence_rel ].

:end :instance.


; <<>>
; >> silent.a.1.vm.tdl
; silent.a.1.vm.tdl

:begin :instance.

silent_a1 := intrans_adj_le &
  [ STEM < "silent" >,
    SYNSEM.LOCAL.CONT.KEY _silent_rel ].

:end :instance.


; <<>>
; >> silly.a.1.vm.tdl
; silly.a.1.vm.tdl

:begin :instance.

silly_a1 := intrans_adj_le &
  [ STEM < "silly" >,
    SYNSEM.LOCAL.CONT.KEY _silly_rel ].

:end :instance.


; <<>>
; >> silvester.n.1.tdl
; silvester.n.1.tdl

:begin :instance.

silvester := holiday_word_le &
  [ STEM < "silvester" >,
    SYNSEM.LOCAL.CONT.KEY.DAY 'silvester ].

:end :instance.


; <<>>
; >> similar.a.1.vm.tdl
; similar.a.1.vm.tdl

:begin :instance.

similar_to_a1 := trans_adj_le &
  [ STEM < "similar" >,
    SYNSEM.LOCAL.CONT [ KEY _similar_adj_rel,
			COMPKEY _to_rel ] ].

:end :instance.


; <<>>
; >> similarly.a.1.vm.tdl
; similarly.a.1.vm.tdl

:begin :instance.

similarly := adv_word_le &
  [ STEM < "similarly" >,
    SYNSEM.LOCAL.CONT.KEY _similarly_rel ].

:end :instance.


; <<>>
; >> simple.a.1.vm.tdl
; simple.a.1.vm.tdl

:begin :instance.

simple_a1 := intrans_adj_le &
  [ STEM < "simple" >,
    SYNSEM.LOCAL.CONT.KEY _simple_rel ].

:end :instance.


; <<>>
; >> simply.a.1.vm.tdl
; simply.a.1.vm.tdl

:begin :instance.

simply_adv1 := adv_pre_word_le &
  [ STEM < "simply" >,
    SYNSEM.LOCAL.CONT.KEY _simply_rel ].

:end :instance.


; <<>>
; >> since.c.1.tdl
; since.c.1.tdl

:begin :instance.

since_subord := subconj_le &
  [ STEM < "since" >,
    SYNSEM.LOCAL.CONT.KEY _since_subord_rel ].

:end :instance.


; <<>>
; >> since.c.1.vm.tdl
; since.c.1.vm.tdl

:begin :instance.

since_root := disc_adv_le &
  [ STEM < "since" >,
    SYNSEM.LOCAL.CONT.KEY.EXCL 'since ].

:end :instance.


; <<>>
; >> since.p.1.tdl
; since.p.1.tdl

:begin :instance.

since := prep_le &
  [ STEM < "since" >,
    SYNSEM.LOCAL.CONT.KEY _since_rel ].

:end :instance.


; <<>>
; >> since.p.2.tdl
; since.p.2.tdl

:begin :instance.

since2 := prep_cp_le &
  [ STEM < "since" >,
    SYNSEM.LOCAL.CONT.KEY _since_rel ].

:end :instance.


; <<>>
; >> since.p.3.tdl
; since.p.3.tdl

:begin :instance.

since_temp := before_prep_le &
  [ STEM < "since" >,
    SYNSEM.LOCAL.CONT.KEY _since_rel ].

:end :instance.


; <<>>
; >> sincere.a.1.vm.tdl
; sincere.a.1.vm.tdl

:begin :instance.

sincere_a1 := intrans_adj_le &
  [ STEM < "sincere" >,
    SYNSEM.LOCAL.CONT.KEY _sincere_rel ].

:end :instance.


; <<>>
; >> single.a.1.vm.tdl
; single.a.1.vm.tdl

:begin :instance.

single_a1 := intrans_adj_le &
  [ STEM < "single" >,
    SYNSEM.LOCAL.CONT.KEY _single_rel ].

:end :instance.


; <<>>
; >> sir.c.1.vm.tdl
; sir.c.1.vm.tdl

:begin :instance.

sir_root := disc_adv_le &
  [ STEM < "sir" >,
    SYNSEM.LOCAL.CONT.KEY.EXCL 'sir ].

:end :instance.


; <<>>
; >> sit.down.v.1.vm.tdl
; sit.down.v.1.vm.tdl

:begin :instance.

sit_down_v1 := mv_particle_le &
  [ STEM < "sit" >,
    SYNSEM.LOCAL.CONT [ KEY _sit_down_rel,
			COMPKEY _down_rel ] ].

:end :instance.


; <<>>
; >> sit.v.1.vm.tdl
; sit.v.1.vm.tdl

:begin :instance.

sit_v1 := mv_unacc_le &
  [ STEM < "sit" >,
    SYNSEM.LOCAL.CONT.KEY _sit_rel ].

:end :instance.


; <<>>
; >> situation.n.1.vm.tdl
; situation.n.1.vm.tdl

:begin :instance.

situation_n1 := intr_noun_word_le &
  [ STEM < "situation" >,
    SYNSEM.LOCAL.CONT.KEY _situation_rel ].

:end :instance.


; <<>>
; >> six.c.1.tdl
; six.c.1.tdl

:begin :instance.

six := bare_unspecified_card_le & 
  [  STEM < "six" >,
     SYNSEM.LOCAL [ CAT.HEAD intadj1,
		    CONT.--STEMLISZT.LIST < [ CONST_VALUE 6 ], ... > ] ].
:end :instance.


; <<>>
; >> six.hour.n.1.tdl
; six.hour.n.1.tdl

:begin :instance.

six_hour := hour_word_le &
  [ STEM < "six" >,
    SYNSEM.LOCAL.CONT.KEY.HOUR 6 ].

:end :instance.


; <<>>
; >> sixteen.c.1.tdl
; sixteen.c.1.tdl

:begin :instance.

sixteen := bare_unspecified_card_le & 
  [  STEM < "sixteen" >,
     SYNSEM.LOCAL [ CAT.HEAD intadj1,
		    CONT.--STEMLISZT.LIST < [ CONST_VALUE 16 ], ... > ] ].
:end :instance.


; <<>>
; >> sixteenth.a.1.vm.tdl
; sixteenth.a.1.vm.tdl

:begin :instance.

sixteenth := ordinal_adj_le &
  [ STEM < "sixteenth" >,
    SYNSEM.LOCAL.CONT.KEY.ORD 16 ].

:end :instance.


; <<>>
; >> sixteenth.day.n.1.tdl
; sixteenth.day.n.1.tdl

:begin :instance.

sixteenth_day := day_of_month_le &
  [ STEM < "sixteenth" >,
    SYNSEM.LOCAL.CONT.KEY.DAY 16 ].

:end :instance.


; <<>>
; >> sixth.a.1.vm.tdl
; sixth.a.1.vm.tdl

:begin :instance.

sixth := ordinal_adj_le &
  [ STEM < "sixth" >,
    SYNSEM.LOCAL.CONT.KEY.ORD 6 ].

:end :instance.


; <<>>
; >> sixth.day.n.1.tdl
; sixth.day.n.1.tdl

:begin :instance.

sixth_day := day_of_month_le &
  [ STEM < "sixth" >,
    SYNSEM.LOCAL.CONT.KEY.DAY 6 ].

:end :instance.


; <<>>
; >> sixty.c.1.tdl
; sixty.c.1.tdl

:begin :instance.

sixty_w_comps := complemented_unspecified_card_le & 
  [ STEM < "sixty" >,
    SYNSEM.LOCAL [ CAT [HEAD intadj2,
			VALENCE.COMPS.FIRST.LOCAL.CAT.HEAD intadj1],
		   CONT.--STEMLISZT.LIST < [ CONST_VALUE 60 ], [] > ] ].

:end :instance.


; <<>>
; >> ski.v.1.vm.tdl
; ski.v.1.vm.tdl

:begin :instance.

ski_v1 := mv_unerg_le &
  [ STEM < "ski" >,
    SYNSEM.LOCAL.CONT.KEY _ski_rel ].

:end :instance.


; <<>>
; >> skip.v.1.vm.tdl
; skip.v.1.vm.tdl

:begin :instance.

skip_v1 := mv_np_trans_le &
  [ STEM < "skip" >,
    SYNSEM.LOCAL.CONT.KEY _skip_rel ].

:end :instance.


; <<>>
; >> sleep.v.1.tdl
; sleep.v.1.tdl

:begin :instance.

sleep1 := mv_unerg_le &
  [ STEM < "sleep" >,
    SYNSEM.LOCAL.CONT.KEY _sleep_rel ].

:end :instance.


; <<>>
; >> slide.n.1.vm.tdl
; slide.n.1.vm.tdl

:begin :instance.

slide_n1 := intr_noun_word_le &
  [ STEM < "slide" >,
    SYNSEM.LOCAL.CONT.KEY _slide_rel ].

:end :instance.


; <<>>
; >> slight.a.1.vm.tdl
; slight.a.1.vm.tdl

:begin :instance.

slight_a1 := intrans_adj_le &
  [ STEM < "slight" >,
    SYNSEM.LOCAL.CONT.KEY _slight_adj_rel ].

:end :instance.


; <<>>
; >> slightly.a.1.vm.tdl
; slightly.a.1.vm.tdl

:begin :instance.

slightly := adv_word_le &
  [ STEM < "slightly" >,
    SYNSEM.LOCAL.CONT.KEY _slightly_rel ].

:end :instance.


; <<>>
; >> slot.n.1.vm.tdl
; slot.n.1.vm.tdl

:begin :instance.

slot_n1 := intr_noun_word_le &
  [ STEM < "slot" >,
    SYNSEM.LOCAL.CONT.KEY _slot_rel ].

:end :instance.


; <<>>
; >> slow.a.1.vm.tdl
; slow.a.1.vm.tdl

:begin :instance.

slow_a1 := intrans_adj_le &
  [ STEM < "slow" >,
    SYNSEM.LOCAL.CONT.KEY _slow_rel ].

:end :instance.


; <<>>
; >> slowly.a.1.vm.tdl
; slowly.a.1.vm.tdl

:begin :instance.

slowly_adv1 := vp_adv_word_le &
  [ STEM < "slowly" >,
    SYNSEM.LOCAL.CONT.KEY _slowly_rel ].

:end :instance.


; <<>>
; >> small.a.1.vm.tdl
; small.a.1.vm.tdl

:begin :instance.

small_a1 := intrans_adj_le &
  [ STEM < "small" >,
    SYNSEM.LOCAL.CONT.KEY _small_rel ].

:end :instance.


; <<>>
; >> smaller.a.1.vm.tdl
; smaller.a.1.vm.tdl

:begin :instance.

smaller_a1 := intrans_adj_le &
  [ STEM < "smaller" >,
    SYNSEM.LOCAL.CONT.KEY _smaller_rel ].

:end :instance.


; <<>>
; >> smile.n.1.vm.tdl
; smile.n.1.vm.tdl

:begin :instance.

smile_n1 := intr_noun_word_le &
  [ STEM < "smile" >,
    SYNSEM.LOCAL.CONT.KEY _smile_n_rel ].

:end :instance.


; <<>>
; >> smile.v.1.tdl
; smile.v.1.tdl

:begin :instance.

smile_v1 := mv_unerg_le &
  [ STEM < "smile" >,
    SYNSEM.LOCAL.CONT.KEY _smile_v_rel ].

:end :instance.


; <<>>
; >> smith.n.1.tdl
; smith.n.1.tdl

:begin :instance.

smith := proper_le &
  [ STEM < "smith" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'smith ].

:end :instance.


; <<>>
; >> smoothly.a.1.vm.tdl
; smoothly.a.1.vm.tdl

:begin :instance.

smoothly_adv1 := vp_adv_word_le &
  [ STEM < "smoothly" >,
    SYNSEM.LOCAL.CONT.KEY _smoothly_rel ].

:end :instance.


; <<>>
; >> snack.n.1.vm.tdl
; snack.n.1.vm.tdl

:begin :instance.

snack_n1 := intr_noun_word_le &
  [ STEM < "snack" >,
    SYNSEM.LOCAL.CONT.KEY _snack_rel ].

:end :instance.


; <<>>
; >> so.a.1.tdl
; so.a.1.tdl

:begin :instance.

so_deg := degree_spec_le &
  [ STEM < "so" >,
    SYNSEM.LOCAL.CONT.KEY _so_rel ].

:end :instance.


; <<>>
; >> so.c.1.tdl
; so.c.1.tdl

:begin :instance.

so_subord := subconj_le &
  [ STEM < "so" >,
    SYNSEM.LOCAL.CONT.KEY _so_that_rel ].

:end :instance.


; <<>>
; >> so.that.c.tdl
; so.that.c.tdl

:begin :instance.

so_that := subconj_mle2 &
  [ STEM < "so", "that" >,
    SYNSEM.LOCAL.CONT.KEY _so_that_rel ].

:end :instance.


; <<>>
; >> so.c.2.vm.tdl
; so.c.2.vm.tdl

:begin :instance.

so_root := disc_adv_le &
  [ STEM < "so" >,
    SYNSEM.LOCAL.CONT.KEY.EXCL 'so ].

:end :instance.

; <<>>
; >> so.far.a.1.vm.tdl
; so.far.a.1.vm.tdl
; MULTIKEY < "far" >

:begin :instance.

so_far_adv1 := vp_adv_post_word_mle2 &
  [ STEM < "so", "far" >,
    SYNSEM.LOCAL.CONT.KEY _so_far_rel ].

:end :instance.


; <<>>
; >> so.to.speak.a.1.vm.tdl
; so.to.speak.a.1.vm.tdl
; MULTIKEY < "speak" >

:begin :instance.

so_to_speak_adv1 := vp_adv_post_word_3mle3 &
  [ STEM < "so", "to", "speak" >,
    SYNSEM.LOCAL.CONT.KEY _so_to_speak_rel ].

:end :instance.


; <<>>
; >> social.a.1.vm.tdl
; social.a.1.vm.tdl

:begin :instance.

social_a1 := intrans_adj_le &
  [ STEM < "social" >,
    SYNSEM.LOCAL.CONT.KEY _social_rel ].

:end :instance.


; <<>>
; >> software.n.1.vm.tdl
; software.n.1.vm.tdl

:begin :instance.

software_n1 := massn_le &
  [ STEM < "software" >,
    SYNSEM.LOCAL.CONT.KEY _software_rel ].

:end :instance.


; <<>>
; >> solely.a.1.vm.tdl
; solely.a.1.vm.tdl

:begin :instance.

solely_adv1 := adv_pre_word_le &
  [ STEM < "solely" >,
    SYNSEM.LOCAL.CONT.KEY _solely_rel ].

:end :instance.


; <<>>
; >> solid.a.1.vm.tdl
; solid.a.1.vm.tdl

:begin :instance.

solid_a1 := intrans_adj_le &
  [ STEM < "solid" >,
    SYNSEM.LOCAL.CONT.KEY _solid_adj_rel ].

:end :instance.


; <<>>
; >> solidly.a.1.vm.tdl
; solidly.a.1.vm.tdl

:begin :instance.

solidly := adv_word_le &
  [ STEM < "solidly" >,
    SYNSEM.LOCAL.CONT.KEY _solidly_rel ].

:end :instance.


; <<>>
; >> solution.n.1.vm.tdl
; solution.n.1.vm.tdl

:begin :instance.

solution_n1 := intr_noun_word_le &
  [ STEM < "solution" >,
    SYNSEM.LOCAL.CONT.KEY _solution_rel ].

:end :instance.


; <<>>
; >> solve.v.1.vm.tdl
; solve.v.1.vm.tdl

:begin :instance.

solve_v1 := mv_np_trans_le &
  [ STEM < "solve" >,
    SYNSEM.LOCAL.CONT.KEY _solve_rel ].

:end :instance.


; <<>>
; >> some.c.1.tdl
; some.c.1.tdl

:begin :instance.

some := pdet_le &
  [ STEM < "some" >,
    SYNSEM.LOCAL.CONT.KEY _some_rel &
	                  [ BV.DIVISIBLE + ] ].

:end :instance.


; <<>>
; >> some.c.2.tdl
; some.c.2.tdl

:begin :instance.

some_indiv := det_le &
  [ STEM < "some" >,
    SYNSEM.LOCAL.CONT.KEY _some_indiv_rel &
	                  [ BV.DIVISIBLE - ] ].

:end :instance.


; <<>>
; >> somebody.n.1.tdl
; somebody.n.1.tdl

:begin :instance.

somebody := generic_pro_le &
  [ STEM < "somebody" >,
    SYNSEM.LOCAL.CONT [ KEY _person_rel,
			ALTKEY _some_rel ] ].
:end :instance.


; <<>>
; >> somehow.a.1.vm.tdl
; somehow.a.1.vm.tdl

:begin :instance.

somehow_adv1 := vp_adv_word_le &
  [ STEM < "somehow" >,
    SYNSEM.LOCAL.CONT.KEY _somehow_rel ].

:end :instance.


; <<>>
; >> someone.n.1.tdl
; someone.n.1.tdl

:begin :instance.

someone := generic_pro_le &
  [ STEM < "someone" >,
    SYNSEM.LOCAL.CONT [ KEY _person_rel,
			ALTKEY _some_rel ] ].
:end :instance.


; <<>>
; >> someplace.a.1.vm.tdl
; someplace.a.1.vm.tdl

:begin :instance.

someplace_adv1 := vp_adv_post_word_le &
  [ STEM < "someplace" >,
    SYNSEM.LOCAL.CONT.KEY _someplace_rel ].

:end :instance.


; <<>>
; >> something.n.1.tdl
; something.n.1.tdl

:begin :instance.

something := generic_pro_le &
  [ STEM < "something" >,
    SYNSEM.LOCAL.CONT [ KEY _thing_rel,
			ALTKEY _some_rel ] ].
:end :instance.


; <<>>
; >> sometime.a.1.vm.tdl
; sometime.a.1.vm.tdl

:begin :instance.

sometime_adv1 := vp_adv_post_word_le &
  [ STEM < "sometime" >,
    SYNSEM.LOCAL.CONT.KEY _sometime_rel ].

:end :instance.


; <<>>
; >> sometime.a.2.vm.tdl
; sometime.a.2.vm.tdl

:begin :instance.

sometime_adv2 := vp_adv_post_word_le &
  [ STEM < "some", "time" >,
    SYNSEM.LOCAL.CONT.KEY _sometime_rel ].

:end :instance.


; <<>>
; >> sometimes.a.1.vm.tdl
; sometimes.a.1.vm.tdl

:begin :instance.

sometimes_adv1 := adv_word_le &
  [ STEM < "sometimes" >,
    SYNSEM.LOCAL.CONT.KEY _sometimes_rel ].

:end :instance.


; <<>>
; >> somewhat.a.1.tdl
; somewhat.a.1.tdl

:begin :instance.

somewhat_adv := degree_spec_le &
  [ STEM < "somewhat" >,
    SYNSEM.LOCAL.CONT.KEY _somewhat_adv_rel ].

:end :instance.


; <<>>
; >> somewhere.a.1.vm.tdl
; somewhere.a.1.vm.tdl

:begin :instance.

somewhere_adv1 := vp_adv_post_word_le &
  [ STEM < "somewhere" >,
    SYNSEM.LOCAL.CONT.KEY _somewhere_rel ].

:end :instance.


; <<>>
; >> son.n.1.vm.tdl
; son.n.1.vm.tdl

:begin :instance.

son_n1 := noun_ppof_word_le &
  [ STEM < "son" >,
    SYNSEM.LOCAL.CONT.KEY _son_rel ].

:end :instance.


; <<>>
; >> sonorous.a.1.vm.tdl
; sonorous.a.1.vm.tdl

:begin :instance.

sonorous_a1 := intrans_adj_le &
  [ STEM < "sonorous" >,
    SYNSEM.LOCAL.CONT.KEY _sonorous_rel ].

:end :instance.


; <<>>
; >> soon.a.1.vm.tdl
; soon.a.1.vm.tdl

:begin :instance.

soon_adv1 := vp_adv_word_le &
  [ STEM < "soon" >,
    SYNSEM.LOCAL.CONT.KEY _soon_rel ].

:end :instance.


; <<>>
; >> sooner.a.1.vm.tdl
; sooner.a.1.vm.tdl

:begin :instance.

sooner_adv1 := vp_adv_word_le &
  [ STEM < "sooner" >,
    SYNSEM.LOCAL.CONT.KEY _sooner_rel ].

:end :instance.


; <<>>
; >> sorry.a.1.vm.tdl
; sorry.a.1.vm.tdl

:begin :instance.

sorry_a1 := reg_adj_cp_le &
  [ STEM < "sorry" >,
    SYNSEM.LOCAL.CONT.KEY _sorry_rel ].

:end :instance.


; <<>>
; >> sort.n.1.vm.tdl
; sort.n.1.vm.tdl

:begin :instance.

sort_n1 := intr_noun_word_le &
  [ STEM < "sort" >,
    SYNSEM.LOCAL.CONT.KEY _sort_rel ].

:end :instance.


; <<>>
; >> sort.v.2.vm.tdl
; sort.v.2.vm.tdl

:begin :instance.

sort_v2 := mv_particle_np_le &
  [ STEM < "sort" >,
    SYNSEM.LOCAL.CONT [ KEY _sort_out_rel,
			COMPKEY _out_rel ] ].

:end :instance.


; <<>>
; >> sound.n.1.vm.tdl
; sound.n.1.vm.tdl

:begin :instance.

sound_n1 := intr_noun_word_le &
  [ STEM < "sound" >,
    SYNSEM.LOCAL.CONT.KEY _sound_rel ].

:end :instance.


; <<>>
; >> sound.v.2.vm.tdl
; sound.v.2.vm.tdl

:begin :instance.

sound_v2 := mv_prdp_pp_ssr_le &
  [ STEM < "sound" >,
    SYNSEM.LOCAL [ CAT.VALENCE [ SUBJ < [ LOCAL.CONT nom-obj ] >,
				 COMPS.FIRST.LOCAL.CAT.HEAD adj ],
		   CONT.KEY _sound_seem_rel ] ].

:end :instance.


; <<>>
; >> source.n.1.vm.tdl
; source.n.1.vm.tdl

:begin :instance.

source_n1 := intr_noun_word_le &
  [ STEM < "source" >,
    SYNSEM.LOCAL.CONT.KEY _source_rel ].

:end :instance.


; <<>>
; >> space.n.1.vm.tdl
; space.n.1.vm.tdl

:begin :instance.

space_n1 := intr_noun_word_le &
  [ STEM < "space" >,
    SYNSEM.LOCAL.CONT.KEY _space_rel ].

:end :instance.


; <<>>
; >> spare.a.1.vm.tdl
; spare.a.1.vm.tdl

:begin :instance.

spare_a1 := intrans_adj_le &
  [ STEM < "spare" >,
    SYNSEM.LOCAL.CONT.KEY _spare_rel ].

:end :instance.


; <<>>
; >> speak.v.1.vm.tdl
; speak.v.1.vm.tdl

:begin :instance.

speak_v1 := mv_np*_prep*_trans_le &
  [ STEM < "speak" >,
    SYNSEM.LOCAL.CONT [ KEY _speak_rel,
			OCOMPKEY _to_rel ] ].

:end :instance.


; <<>>
; >> special.a.1.vm.tdl
; special.a.1.vm.tdl

:begin :instance.

special_a1 := intrans_adj_le &
  [ STEM < "special" >,
    SYNSEM.LOCAL.CONT.KEY _special_rel ].

:end :instance.


; <<>>
; >> specially.a.1.vm.tdl
; specially.a.1.vm.tdl

:begin :instance.

specially := adv_word_le &
  [ STEM < "specially" >,
    SYNSEM.LOCAL.CONT.KEY _specially_rel ].

:end :instance.


; <<>>
; >> specific.a.1.vm.tdl
; specific.a.1.vm.tdl

:begin :instance.

specific_a1 := intrans_adj_le &
  [ STEM < "specific" >,
    SYNSEM.LOCAL.CONT.KEY _specific_rel ].

:end :instance.


; <<>>
; >> specifically.a.1.vm.tdl
; specifically.a.1.vm.tdl

:begin :instance.

specifically_adv1 := adv_word_le &
  [ STEM < "specifically" >,
    SYNSEM.LOCAL.CONT.KEY _specifically_rel ].

:end :instance.


; <<>>
; >> spell.v.1.vm.tdl
; spell.v.1.vm.tdl

:begin :instance.

spell_v1 := mv_np_trans_le &
  [ STEM < "spell" >,
    SYNSEM.LOCAL.CONT.KEY _spell_rel ].

:end :instance.


; <<>>
; >> spend.v.1.vm.tdl
; spend.v.1.vm.tdl

:begin :instance.

spend_v1 := mv_np_trans_le &
  [ STEM < "spend" >,
    SYNSEM.LOCAL.CONT.KEY _spend_rel ].

:end :instance.


; <<>>
; >> splendid.a.1.vm.tdl
; splendid.a.1.vm.tdl

:begin :instance.

splendid_a1 := intrans_adj_le &
  [ STEM < "splendid" >,
    SYNSEM.LOCAL.CONT.KEY _splendid_rel ].

:end :instance.


; <<>>
; >> splendidly.a.1.vm.tdl
; splendidly.a.1.vm.tdl

:begin :instance.

splendidly := vp_adv_post_word_le &
  [ STEM < "splendidly" >,
    SYNSEM.LOCAL.CONT.KEY _splendidly_rel ].

:end :instance.


; <<>>
; >> spontaneously.a.1.vm.tdl
; spontaneously.a.1.vm.tdl

:begin :instance.

spontaneously_adv1 := vp_adv_word_le &
  [ STEM < "spontaneously" >,
    SYNSEM.LOCAL.CONT.KEY _spontaneously_rel ].

:end :instance.


; <<>>
; >> sports.n.1.vm.tdl
; sports.n.1.vm.tdl

:begin :instance.

sports_n1 := massn_le &
  [ STEM < "sports" >,
    SYNSEM.LOCAL.CONT.KEY _sports_rel ].

:end :instance.


; <<>>
; >> spread.v.1.vm.tdl
; spread.v.1.vm.tdl

:begin :instance.

spread_v1 := mv_np*_trans_le & 
  [ STEM < "spread" >,
    SYNSEM.LOCAL.CONT.KEY _spread_rel ].

:end :instance.


; <<>>
; >> spring.n.1.tdl
; spring.n.1.tdl

:begin :instance.

spring_season := season_word_le &
  [ STEM < "spring" >,
    SYNSEM.LOCAL.CONT.KEY _spring_s_rel ].

:end :instance.


; <<>>
; >> spring.n.1.vm.tdl
; spring.n.1.vm.tdl

:begin :instance.

spring_n1 := intr_temp_noun_le &
  [ STEM < "spring" >,
    SYNSEM.LOCAL.CONT.KEY season_rel & [ SEASON 'spring ] ].

:end :instance.


; <<>>
; >> spring.n.2.vm.tdl
; spring.n.2.vm.tdl

:begin :instance.

spring_n2 := intr_temp_noun_nomod_le &
  [ STEM < "spring" >,
    SYNSEM.LOCAL.CONT.KEY season_rel & [ SEASON 'spring ] ].

:end :instance.


; <<>>
; >> squeeze.in.v.1.vm.tdl
; squeeze.in.v.1.vm.tdl

:begin :instance.

squeeze_in_v1 := mv_particle_np_le &
  [ STEM < "squeeze" >,
    SYNSEM.LOCAL.CONT [ KEY _squeeze_in_rel,
			COMPKEY _in_rel ] ].

:end :instance.


; <<>>
; >> st.nicholas.day.n.1.tdl
; st.nicholas.day.n.1.tdl
; MULTIKEY < "nicholas" >

:begin :instance.

st_nicholas_day := holiday_word_3mle2 &
  [ STEM < "st", "nicholas", "day" >,
    SYNSEM.LOCAL.CONT.KEY.DAY 'st_nicholas_day ].

:end :instance.


; <<>>
; >> staff.n.1.vm.tdl
; staff.n.1.vm.tdl

:begin :instance.

staff_n1 := intr_noun_word_le &
  [ STEM < "staff" >,
    SYNSEM.LOCAL.CONT.KEY _staff_rel ].

:end :instance.


; <<>>
; >> staff.n.2.vm.tdl
; staff.n.2.vm.tdl

:begin :instance.

staff_n2 := plurn_le &
  [ STEM < "staff" >,
    SYNSEM.LOCAL.CONT.KEY _staff_rel ].

:end :instance.


; <<>>
; >> stage.n.1.vm.tdl
; stage.n.1.vm.tdl

:begin :instance.

stage_n1 := intr_noun_word_le &
  [ STEM < "stage" >,
    SYNSEM.LOCAL.CONT.KEY _stage_rel ].

:end :instance.


; <<>>
; >> stake.n.1.vm.tdl
; stake.n.1.vm.tdl

:begin :instance.

stake_n1 := intr_noun_word_le &
  [ STEM < "stake" >,
    SYNSEM.LOCAL.CONT.KEY _stake_n_rel ].

:end :instance.


; <<>>
; >> stand.up.v.1.vm.tdl
; stand.up.v.1.vm.tdl

:begin :instance.

stand_up_v1 := mv_particle_np_le &
  [ STEM < "stand" >,
    SYNSEM.LOCAL.CONT [ KEY _stand_up_cause_rel,
			COMPKEY _up_rel ] ].

:end :instance.


; <<>>
; >> stand.up.v.2.vm.tdl
; stand.up.v.2.vm.tdl

:begin :instance.

stand_up_v2 := mv_particle_le &
  [ STEM < "stand" >,
    SYNSEM.LOCAL.CONT [ KEY _stand_up_rel,
			COMPKEY _up_rel ] ].

:end :instance.


; <<>>
; >> stanford.university.n.1.tdl
; stanford.university.n.1.tdl

:begin :instance.

su := proper_mle1 &
  [ STEM < "stanford", "university" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'stanford_univ ].

:end :instance.


; <<>>
; >> star.n.1.vm.tdl
; star.n.1.vm.tdl

:begin :instance.

star_n1 := intr_noun_word_le &
  [ STEM < "star" >,
    SYNSEM.LOCAL.CONT.KEY _star_rel ].

:end :instance.


; <<>>
; >> start.v.1.tdl
; start.v.1.tdl

:begin :instance.

start_v1 := mv_unerg_le &
  [ STEM < "start" >,
    SYNSEM.LOCAL.CONT.KEY _start_rel ].

:end :instance.


; <<>>
; >> start.v.2.tdl
; start.v.2.tdl

:begin :instance.

start_v2 := mv_np_trans_le &
  [ STEM < "start" >,
    SYNSEM.LOCAL.CONT.KEY _start_cause_rel ].

:end :instance.


; <<>>
; >> start.v.3.tdl
; start.v.3.tdl

:begin :instance.

start_v3 := mv_subj_equi_le &
  [ STEM < "start" >,
    SYNSEM.LOCAL.CONT.KEY _start_to_rel ].

:end :instance.


; <<>>
; >> start.v.4.tdl
; start.v.4.tdl

:begin :instance.

start_v4 := mv_subj_equi_prp_le &
  [ STEM < "start" >,
    SYNSEM.LOCAL.CONT.KEY _start_to_rel ].

:end :instance.


; <<>>
; >> start.out.v.1.vm.tdl
; start.out.v.1.vm.tdl

:begin :instance.

start_out_v1 := mv_particle_le &
  [ STEM < "start" >,
    SYNSEM.LOCAL.CONT [ KEY _start_out_rel,
			COMPKEY _out_rel ] ].

:end :instance.


; <<>>
; >> start.n.1.vm.tdl
; start.n.1.vm.tdl

:begin :instance.

start_n1 := intr_noun_word_le &
  [ STEM < "start" >,
    SYNSEM.LOCAL.CONT.KEY _start_n_rel ].

:end :instance.


; <<>>
; >> state.n.1.vm.tdl
; state.n.1.vm.tdl

:begin :instance.

state_n1 := intr_noun_word_le &
  [ STEM < "state" >,
    SYNSEM.LOCAL.CONT.KEY _state_rel ].

:end :instance.


; <<>>
; >> state.v.1.vm.tdl
; state.v.1.vm.tdl

:begin :instance.

state_v1 := mv_np_trans_le &
  [ STEM < "state" >,
    SYNSEM.LOCAL.CONT.KEY _state_v_rel ].

:end :instance.


; <<>>
; >> state.v.2.vm.tdl
; state.v.2.vm.tdl

:begin :instance.

state_v2 := mv_cp_non_trans_le &
  [ STEM < "state" >,
    SYNSEM.LOCAL.CONT.KEY _state_v_rel ].

:end :instance.


; <<>>
; >> statement.n.1.vm.tdl
; statement.n.1.vm.tdl

:begin :instance.

statement_n1 := intr_noun_word_le &
  [ STEM < "statement" >,
    SYNSEM.LOCAL.CONT.KEY _statement_rel ].

:end :instance.


; <<>>
; >> station.n.1.vm.tdl
; station.n.1.vm.tdl

:begin :instance.

station_n1 := intr_noun_word_le &
  [ STEM < "station" >,
    SYNSEM.LOCAL.CONT.KEY _station_n_rel ].

:end :instance.


; <<>>
; >> stationary.a.1.vm.tdl
; stationary.a.1.vm.tdl

:begin :instance.

stationary_a1 := intrans_adj_le &
  [ STEM < "stationary" >,
    SYNSEM.LOCAL.CONT.KEY _stationary_rel ].

:end :instance.


; <<>>
; >> stay.n.1.vm.tdl
; stay.n.1.vm.tdl

:begin :instance.

stay_n1 := intr_noun_word_le &
  [ STEM < "stay" >,
    SYNSEM.LOCAL.CONT.KEY _stay_sojourn_rel ].

:end :instance.


; <<>>
; >> stay.v.1.vm.tdl
; stay.v.1.vm.tdl

:begin :instance.

stay_v1 := mv_subj_equi_prd_le &
  [ STEM < "stay" >,
    SYNSEM.LOCAL [ CAT.VALENCE.COMPS < [ LOCAL.CAT.HEAD 
                                                   a_or_p & strict_head ] >,
                   CONT.KEY _stay2_rel ] ].

:end :instance.


; <<>>
; >> stay.v.2.vm.tdl
; stay.v.2.vm.tdl

:begin :instance.

stay_v2 := mv_unerg_le &
  [ STEM < "stay" >,
    SYNSEM.LOCAL.CONT.KEY _stay_rel ].

:end :instance.


; <<>>
; >> steady.a.1.vm.tdl
; steady.a.1.vm.tdl

:begin :instance.

steady_a1 := intrans_adj_le &
  [ STEM < "steady" >,
    SYNSEM.LOCAL.CONT.KEY _steady_rel ].

:end :instance.


; <<>>
; >> step.n.1.vm.tdl
; step.n.1.vm.tdl

:begin :instance.

step_n1 := intr_noun_word_le &
  [ STEM < "step" >,
    SYNSEM.LOCAL.CONT.KEY _step_rel ].

:end :instance.


; <<>>
; >> step.v.1.vm.tdl
; step.v.1.vm.tdl

:begin :instance.

step_v1 := mv_prep*_intrans_le &
  [ STEM < "step" >,
    SYNSEM.LOCAL.CONT [ KEY _step_v_rel,
			COMPKEY dir_rel ] ].

:end :instance.


; <<>>
; >> stern.a.1.vm.tdl
; stern.a.1.vm.tdl

:begin :instance.

stern_a1 := intrans_adj_le &
  [ STEM < "stern" >,
    SYNSEM.LOCAL.CONT.KEY _stern_rel ].

:end :instance.


; <<>>
; >> stick.v.1.vm.tdl
; stick.v.1.vm.tdl

:begin :instance.

stick_v1 := mv_empty_prep_intrans_le &
  [ STEM < "stick" >,
    SYNSEM.LOCAL.CONT [ KEY _stick_to_rel,
			COMPKEY _to_rel ] ].

:end :instance.


; <<>>
; >> still.a.1.vm.tdl
; still.a.1.vm.tdl

:begin :instance.

still_adv1 := adv_pre_word_le &
  [ STEM < "still" >,
    SYNSEM.LOCAL.CONT.KEY _still_rel ].

:end :instance.


; <<>>
; >> stockholm.n.1.vm.tdl
; stockholm.n.1.vm.tdl

:begin :instance.

Stockholm_n1 := proper_le &
  [ STEM < "stockholm" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'Stockholm ].

:end :instance.


; <<>>
; >> stop.c.1.vm.tdl
; stop.c.1.vm.tdl

:begin :instance.

stop_root := disc_adv_le &
  [ STEM < "stop" >,
    SYNSEM.LOCAL.CONT.KEY.EXCL 'stop ].

:end :instance.


; <<>>
; >> stop.v.1.vm.tdl
; stop.v.1.vm.tdl

:begin :instance.

stop_v1 := mv_unerg_le &
  [ STEM < "stop" >,
    SYNSEM.LOCAL.CONT.KEY _stop_rel ].

:end :instance.


; <<>>
; >> stop.v.2.vm.tdl
; stop.v.2.vm.tdl

:begin :instance.

stop_v2 := mv_np_trans_le &
  [ STEM < "stop" >,
    SYNSEM.LOCAL.CONT.KEY _stop_cause_rel ].

:end :instance.


; <<>>
; >> story.n.1.vm.tdl
; story.n.1.vm.tdl

:begin :instance.

story_n1 := intr_noun_word_le &
  [ STEM < "story" >,
    SYNSEM.LOCAL.CONT.KEY _story_rel ].

:end :instance.


; <<>>
; >> straight.a.1.vm.tdl
; straight.a.1.vm.tdl

:begin :instance.

straight_a1 := intrans_adj_le &
  [ STEM < "straight" >,
    SYNSEM.LOCAL.CONT.KEY _straight_rel ].

:end :instance.


; <<>>
; >> straightforward.a.1.vm.tdl
; straightforward.a.1.vm.tdl

:begin :instance.

straightforward_a1 := intrans_adj_le &
  [ STEM < "straightforward" >,
    SYNSEM.LOCAL.CONT.KEY _straightforward_rel ].

:end :instance.


; <<>>
; >> strange.a.1.vm.tdl
; strange.a.1.vm.tdl

:begin :instance.

strange_a1 := intrans_adj_le &
  [ STEM < "strange" >,
    SYNSEM.LOCAL.CONT.KEY _strange_rel ].

:end :instance.


; <<>>
; >> strangely.a.1.vm.tdl
; strangely.a.1.vm.tdl

:begin :instance.

strangely := adv_word_le &
  [ STEM < "strangely" >,
    SYNSEM.LOCAL.CONT.KEY _strangely_rel ].

:end :instance.


; <<>>
; >> strassburg.n.1.vm.tdl
; strassburg.n.1.vm.tdl

:begin :instance.

Strassburg_n1 := proper_le &
  [ STEM < "strassburg" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'Strassburg ].

:end :instance.


; <<>>
; >> strategy.n.1.vm.tdl
; strategy.n.1.vm.tdl

:begin :instance.

strategy_n1 := intr_noun_word_le &
  [ STEM < "strategy" >,
    SYNSEM.LOCAL.CONT.KEY _strategy_rel ].

:end :instance.


; <<>>
; >> street.n.1.vm.tdl
; street.n.1.vm.tdl

:begin :instance.

street_n1 := intr_noun_word_le &
  [ STEM < "street" >,
    SYNSEM.LOCAL.CONT.KEY _street_rel ].

:end :instance.


; <<>>
; >> strength.n.1.vm.tdl
; strength.n.1.vm.tdl

:begin :instance.

strength_n1 := intr_noun_word_le &
  [ STEM < "strength" >,
    SYNSEM.LOCAL.CONT.KEY _strength_rel ].

:end :instance.


; <<>>
; >> strength.n.2.vm.tdl
; strength.n.2.vm.tdl

:begin :instance.

strength_n2 := massn_le &
  [ STEM < "strength" >,
    SYNSEM.LOCAL.CONT.KEY _strength_rel ].

:end :instance.


; <<>>
; >> stress.n.1.vm.tdl
; stress.n.1.vm.tdl

:begin :instance.

stress_n1 := massn_le &
  [ STEM < "stress" >,
    SYNSEM.LOCAL.CONT.KEY _stress_rel ].

:end :instance.


; <<>>
; >> stressful.a.1.vm.tdl
; stressful.a.1.vm.tdl

:begin :instance.

stressful_a1 := intrans_adj_le &
  [ STEM < "stressful" >,
    SYNSEM.LOCAL.CONT.KEY _stressful_rel ].

:end :instance.


; <<>>
; >> stressfully.a.1.vm.tdl
; stressfully.a.1.vm.tdl

:begin :instance.

stressfully := adv_word_le &
  [ STEM < "stressfully" >,
    SYNSEM.LOCAL.CONT.KEY _stressfully_rel ].

:end :instance.


; <<>>
; >> strict.a.1.vm.tdl
; strict.a.1.vm.tdl

:begin :instance.

strict_a1 := intrans_adj_le &
  [ STEM < "strict" >,
    SYNSEM.LOCAL.CONT.KEY _strict_rel ].

:end :instance.


; <<>>
; >> strictly.a.1.vm.tdl
; strictly.a.1.vm.tdl

:begin :instance.

strictly_adv1 := adv_pre_word_le &
  [ STEM < "strictly" >,
    SYNSEM.LOCAL.CONT.KEY _strictly_rel ].

:end :instance.


; <<>>
; >> strictly.speaking.a.1.vm.tdl
; strictly.speaking.a.1.vm.tdl

:begin :instance.

strictly_speaking_adv1 := adv_word_mle1 &
  [ STEM < "strictly", "speaking" >,
    SYNSEM.LOCAL.CONT.KEY _strictly_speaking_rel ].

:end :instance.


; <<>>
; >> strike.v.1.vm.tdl
; strike.v.1.vm.tdl

:begin :instance.

strike_v1 := mv_np_obj_comp_le &
  [ STEM < "strike" >,
    SYNSEM.LOCAL [ CAT.VALENCE 
		   [ SUBJ < [ LOCAL.CONT.INDEX #ind ] >,
		     COMPS < *top*,
			    [ LOCAL.CAT.VALENCE.SUBJ 
					  < [ LOCAL.CONT.INDEX #ind ] > ] > ],
		   CONT [ KEY _strike_rel,
			  OCOMPKEY _as_rel ] ] ].

:end :instance.


; <<>>
; >> strong.a.1.vm.tdl
; strong.a.1.vm.tdl

:begin :instance.

strong_a1 := intrans_adj_le &
  [ STEM < "strong" >,
    SYNSEM.LOCAL.CONT.KEY _strong_rel ].

:end :instance.


; <<>>
; >> strongly.a.1.vm.tdl
; strongly.a.1.vm.tdl

:begin :instance.

strongly_adv1 := vp_adv_word_le &
  [ STEM < "strongly" >,
    SYNSEM.LOCAL.CONT.KEY _strongly_rel ].

:end :instance.


; <<>>
; >> structure.n.1.vm.tdl
; structure.n.1.vm.tdl

:begin :instance.

structure_n1 := intr_noun_word_le &
  [ STEM < "structure" >,
    SYNSEM.LOCAL.CONT.KEY _structure_rel ].

:end :instance.


; <<>>
; >> structure.v.1.vm.tdl
; structure.v.1.vm.tdl

:begin :instance.

structure_v1 := mv_np_trans_le &
  [ STEM < "structure" >,
    SYNSEM.LOCAL.CONT.KEY _structure_action_rel ].

:end :instance.


; <<>>
; >> student.n.1.vm.tdl
; student.n.1.vm.tdl

:begin :instance.

student_n1 := intr_noun_word_le &
  [ STEM < "student" >,
    SYNSEM.LOCAL.CONT.KEY _student_rel ].

:end :instance.


; <<>>
; >> study.n.1.vm.tdl
; study.n.1.vm.tdl

:begin :instance.

study_n1 := intr_noun_word_le &
  [ STEM < "study" >,
    SYNSEM.LOCAL.CONT.KEY _study_room_rel ].

:end :instance.


; <<>>
; >> study.v.1.vm.tdl
; study.v.1.vm.tdl

:begin :instance.

study_v1 := mv_np*_trans_le &
  [ STEM < "study" >,
    SYNSEM.LOCAL.CONT.KEY _study_rel ].

:end :instance.


; <<>>
; >> stuff.n.1.vm.tdl
; stuff.n.1.vm.tdl

:begin :instance.

stuff_n1 := massn_le &
  [ STEM < "stuff" >,
    SYNSEM.LOCAL.CONT.KEY _stuff_n_rel ].

:end :instance.


; <<>>
; >> stumble.v.1.vm.tdl
; stumble.v.1.vm.tdl

:begin :instance.

stumble_v1 := mv_unerg_le &
  [ STEM < "stumble" >,
    SYNSEM.LOCAL.CONT.KEY _stumble_rel ].

:end :instance.


; <<>>
; >> stupid.a.1.vm.tdl
; stupid.a.1.vm.tdl

:begin :instance.

stupid_a1 := intrans_adj_le &
  [ STEM < "stupid" >,
    SYNSEM.LOCAL.CONT.KEY _stupid_rel ].

:end :instance.


; <<>>
; >> stupidly.a.1.vm.tdl
; stupidly.a.1.vm.tdl

:begin :instance.

stupidly := adv_word_le &
  [ STEM < "stupidly" >,
    SYNSEM.LOCAL.CONT.KEY _stupidly_rel ].

:end :instance.


; <<>>
; >> stuttgart.n.1.vm.tdl
; stuttgart.n.1.vm.tdl

:begin :instance.

Stuttgart_n1 := proper_le &
  [ STEM < "stuttgart" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'Stuttgart ].

:end :instance.


; <<>>
; >> style.n.1.vm.tdl
; style.n.1.vm.tdl

:begin :instance.

style_n1 := intr_noun_word_le &
  [ STEM < "style" >,
    SYNSEM.LOCAL.CONT.KEY _style_rel ].

:end :instance.


; <<>>
; >> style.n.2.vm.tdl
; style.n.2.vm.tdl

:begin :instance.

style_n2 := massn_le &
  [ STEM < "style" >,
    SYNSEM.LOCAL.CONT.KEY _style_rel ].

:end :instance.


; <<>>
; >> subject.n.1.vm.tdl
; subject.n.1.vm.tdl

:begin :instance.

subject_n1 := intr_noun_word_le &
  [ STEM < "subject" >,
    SYNSEM.LOCAL.CONT.KEY _subject_rel ].

:end :instance.


; <<>>
; >> submission.n.1.vm.tdl
; submission.n.1.vm.tdl

:begin :instance.

submission_n1 := intr_noun_word_le &
  [ STEM < "submission" >,
    SYNSEM.LOCAL.CONT.KEY _submission_rel ].

:end :instance.


; <<>>
; >> submit.v.1.vm.tdl
; submit.v.1.vm.tdl

:begin :instance.

submit_v1 := mv_np_trans_le &
  [ STEM < "submit" >,
    SYNSEM.LOCAL.CONT.KEY _submit_rel ].

:end :instance.


; <<>>
; >> subsequent.a.1.vm.tdl
; subsequent.a.1.vm.tdl

:begin :instance.

subsequent_a1 := intrans_adj_le &
  [ STEM < "subsequent" >,
    SYNSEM.LOCAL.CONT.KEY _subsequent_rel ].

:end :instance.


; <<>>
; >> subway.n.1.vm.tdl
; subway.n.1.vm.tdl

:begin :instance.

subway_n1 := intr_noun_word_le &
  [ STEM < "subway" >,
    SYNSEM.LOCAL.CONT.KEY _subway_rel ].

:end :instance.


; <<>>
; >> succeed.in.v.1.tdl
; succeed.in.v.1.tdl

:begin :instance.

succeed_v2 := mv_empty_prep_intrans_le &
  [ STEM < "succeed" >,
    SYNSEM.LOCAL.CONT [ KEY _succeed_in_rel,
			COMPKEY _in_rel ] ].

:end :instance.


; <<>>
; >> succeed.v.1.tdl
; succeed.v.1.tdl

:begin :instance.

succeed_v1 := mv_unerg_le &
  [ STEM < "succeed" >,
    SYNSEM.LOCAL.CONT.KEY _succeed_rel ].

:end :instance.


; <<>>
; >> success.n.1.vm.tdl
; success.n.1.vm.tdl

:begin :instance.

success_n1 := massn_le &
  [ STEM < "success" >,
    SYNSEM.LOCAL.CONT.KEY _success_rel ].

:end :instance.


; <<>>
; >> successful.a.1.vm.tdl
; successful.a.1.vm.tdl

:begin :instance.

successful_a1 := intrans_adj_le &
  [ STEM < "successful" >,
    SYNSEM.LOCAL.CONT.KEY _successful_rel ].

:end :instance.


; <<>>
; >> succession.n.1.vm.tdl
; succession.n.1.vm.tdl

:begin :instance.

succession_n1 := noun_ppof_word_le &
  [ STEM < "succession" >,
    SYNSEM.LOCAL.CONT.KEY _succession_rel ].

:end :instance.


; <<>>
; >> successive.a.1.vm.tdl
; successive.a.1.vm.tdl

:begin :instance.

successive_a1 := intrans_adj_le &
  [ STEM < "successive" >,
    SYNSEM.LOCAL.CONT.KEY _successive_rel ].

:end :instance.


; <<>>
; >> successively.a.1.vm.tdl
; successively.a.1.vm.tdl

:begin :instance.

successively := adv_word_le &
  [ STEM < "successively" >,
    SYNSEM.LOCAL.CONT.KEY _successively_rel ].

:end :instance.


; <<>>
; >> such.a.1.tdl
; such.a.1.tdl

:begin :instance.

such_deg := degree_spec_le &
  [ STEM < "such" >,
    SYNSEM.LOCAL.CONT.KEY _such_deg_rel ].

:end :instance.


; <<>>
; >> such.c.1.tdl
; such.c.1.tdl

:begin :instance.

such := det_le &
  [ STEM < "such" >,
    SYNSEM.LOCAL.CONT.KEY _such_rel ].

:end :instance.


; <<>>
; >> such.as.c.1.tdl
; such.as.c.1.tdl

:begin :instance.

such_as := prep_cp_mle1 &
  [ STEM < "such", "as" >,
    SYNSEM.LOCAL.CONT.KEY _such_as_rel ].

:end :instance.


; <<>>
; >> such.that.c.1.tdl
; such.that.c.1.tdl

:begin :instance.

such_that := prep_cp_mle1 &
  [ STEM < "such", "that" >,
    SYNSEM.LOCAL.CONT.KEY _such_that_rel ].

:end :instance.


; <<>>
; >> sudden.a.1.vm.tdl
; sudden.a.1.vm.tdl

:begin :instance.

sudden_a1 := intrans_adj_le &
  [ STEM < "sudden" >,
    SYNSEM.LOCAL.CONT.KEY _sudden_rel ].

:end :instance.


; <<>>
; >> suddently.a.1.vm.tdl
; suddently.a.1.vm.tdl

:begin :instance.

suddenly_adv1 := adv_word_le &
  [ STEM < "suddenly" >,
    SYNSEM.LOCAL.CONT.KEY _suddenly_rel ].

:end :instance.


; <<>>
; >> sudniz.n.1.vm.tdl
; sudniz.n.1.vm.tdl

:begin :instance.

Sudniz_n1 := proper_le &
  [ STEM < "sudniz" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'Sudniz ].

:end :instance.


; <<>>
; >> suffice.v.1.vm.tdl
; suffice.v.1.vm.tdl

:begin :instance.

suffice_v1 := mv_unerg_le &
  [ STEM < "suffice" >,
    SYNSEM.LOCAL.CONT.KEY _suffice_rel ].

:end :instance.


; <<>>
; >> suffice.v.2.vm.tdl
; suffice.v.2.vm.tdl

:begin :instance.

suffice_v2 := mv_atrans_inf_le &
  [ STEM < "suffice" >,
    SYNSEM.LOCAL.CONT.KEY _suffice2_rel ].

:end :instance.


; <<>>
; >> sufficient.a.1.vm.tdl
; sufficient.a.1.vm.tdl

:begin :instance.

sufficient_a1 := intrans_adj_le &
  [ STEM < "sufficient" >,
    SYNSEM.LOCAL.CONT.KEY _sufficient_rel ].

:end :instance.


; <<>>
; >> sufficiently.a.1.tdl
; sufficiently.a.1.tdl

:begin :instance.

sufficiently_adv := degree_spec_le &
  [ STEM < "sufficiently" >,
    SYNSEM.LOCAL.CONT.KEY _sufficiently_adv_rel ].

:end :instance.


; <<>>
; >> sufficiently.a.2.tdl
; sufficiently.a.2.tdl

:begin :instance.

sufficiently := vp_adv_post_word_le &
  [ STEM < "sufficiently" >,
    SYNSEM.LOCAL.CONT.KEY _sufficiently_rel ].

:end :instance.


; <<>>
; >> suggest.v.1.vm.tdl
; suggest.v.1.vm.tdl

:begin :instance.

suggest_v1 := mv_to*_trans_le &
  [ STEM < "suggest" >,
    SYNSEM.LOCAL.CONT.KEY _suggest_rel ].

:end :instance.


; <<>>
; >> suggest.v.2.vm.tdl
; suggest.v.2.vm.tdl

:begin :instance.

suggest_v2 := mv_prep_intrans_event_le &
  [ STEM < "suggest" >,
    SYNSEM.LOCAL.CONT [ KEY _suggest_loc_rel,
			COMPKEY loc_rel ] ].

:end :instance.


; <<>>
; >> suggest.v.3.tdl
; suggest.v.3.tdl

:begin :instance.

suggest_v3 := mv_pp_cp_le &
  [ STEM < "suggest" >,
    SYNSEM.LOCAL.CONT [ KEY _suggest_rel,
			COMPKEY _to_rel ] ].

:end :instance.


; <<>>
; >> suggestion.n.1.vm.tdl
; suggestion.n.1.vm.tdl

:begin :instance.

suggestion_n1 := deverbal_noun_intr_word_le &
  [ STEM < "suggestion" >,
    SYNSEM.LOCAL.CONT.ALTKEY _suggest_rel ].

:end :instance.


; <<>>
; >> suit.v.1.vm.tdl
; suit.v.1.vm.tdl

:begin :instance.

suit_v1 := mv_np_trans_le &
  [ STEM < "suit" >,
    SYNSEM.LOCAL.CONT.KEY _suit_rel ].

:end :instance.


; <<>>
; >> suit.v.2.vm.tdl
; suit.v.2.vm.tdl

:begin :instance.

suit_v2 := mv_expl_prep_trans_le &
  [ STEM < "suit" >,
    SYNSEM.LOCAL.CONT.KEY _suit_time_rel ].

:end :instance.


; <<>>
; >> suitability.n.1.vm.tdl
; suitability.n.1.vm.tdl

:begin :instance.

suitability_n1 := intr_noun_word_le &
  [ STEM < "suitability" >,
    SYNSEM.LOCAL.CONT.KEY _suitability_rel ].

:end :instance.


; <<>>
; >> suitable.a.1.vm.tdl
; suitable.a.1.vm.tdl

:begin :instance.

suitable_a1 := intrans_adj_le &
  [ STEM < "suitable" >,
    SYNSEM.LOCAL.CONT.KEY _suitable_rel ].

:end :instance.


; <<>>
; >> suitably.a.1.vm.tdl
; suitably.a.1.vm.tdl

:begin :instance.

suitably := adv_word_le &
  [ STEM < "suitably" >,
    SYNSEM.LOCAL.CONT.KEY _suitably_rel ].

:end :instance.


; <<>>
; >> sum.n.1.vm.tdl
; sum.n.1.vm.tdl

:begin :instance.

sum_n1 := intr_noun_word_le &
  [ STEM < "sum" >,
    SYNSEM.LOCAL.CONT.KEY _sum_rel ].

:end :instance.


; <<>>
; >> sum.up.v.1.vm.tdl
; sum.up.v.1.vm.tdl

:begin :instance.

sum_up_v1 := mv_particle_np_le &
  [ STEM < "sum" >,
    SYNSEM.LOCAL.CONT [ KEY _sum_up_rel,
			COMPKEY _up_rel ] ].

:end :instance.


; <<>>
; >> sum.up.v.2.vm.tdl
; sum.up.v.2.vm.tdl

:begin :instance.

sum_up_v2 := mv_particle_le &
  [ STEM < "sum" >,
    SYNSEM.LOCAL.CONT [ KEY _sum_up_rel,
			COMPKEY _up_rel ] ].

:end :instance.


; <<>>
; >> summarize.v.1.vm.tdl
; summarize.v.1.vm.tdl

:begin :instance.

summarize_v1 := mv_np*_trans_le &
  [ STEM < "summarize" >,
    SYNSEM.LOCAL.CONT.KEY _summarize_rel ].

:end :instance.


; <<>>
; >> summer.n.1.tdl
; summer.n.1.tdl

:begin :instance.

summer_season := season_word_le &
  [ STEM < "summer" >,
    SYNSEM.LOCAL.CONT.KEY.SEASON 'summer ].

:end :instance.


; <<>>
; >> summer.n.1.vm.tdl
; summer.n.1.vm.tdl

:begin :instance.

summer_n1 := intr_temp_noun_le &
  [ STEM < "summer" >,
    SYNSEM.LOCAL.CONT.KEY _summer_s_rel ].

:end :instance.


; <<>>
; >> summer.n.2.vm.tdl
; summer.n.2.vm.tdl

:begin :instance.

summer_n2 := intr_temp_noun_nomod_le &
  [ STEM < "summer" >,
    SYNSEM.LOCAL.CONT.KEY _summer_s_rel ].

:end :instance.


; <<>>
; >> summon.v.1.vm.tdl
; summon.v.1.vm.tdl

:begin :instance.

summon_v1 := mv_to*_trans_le &
  [ STEM < "summon" >,
    SYNSEM.LOCAL.CONT.KEY _summon_rel ].

:end :instance.


; <<>>
; >> sunday.n.1.tdl
; sunday.n.1.tdl

:begin :instance.

sunday1 := day_of_week_le &
  [ STEM < "sunday" >,
    SYNSEM.LOCAL.CONT.KEY.DAY 'sun ].

:end :instance.


; <<>>
; >> sunday.n.2.tdl
; sunday.n.2.tdl

:begin :instance.

sunday_cn := intr_temp_noun_le &
  [ STEM < "sunday" >,
    SYNSEM.LOCAL.CONT.KEY dofw_rel & [ DAY 'sunday ] ].

:end :instance.


; <<>>
; >> super.a.1.vm.tdl
; super.a.1.vm.tdl

:begin :instance.

super_a1 := intrans_adj_le &
  [ STEM < "super" >,
    SYNSEM.LOCAL.CONT.KEY _super_rel ].

:end :instance.


; <<>>
; >> superbly.a.1.vm.tdl
; superbly.a.1.vm.tdl

:begin :instance.

superbly_adv1 := vp_adv_post_word_le &
  [ STEM < "superbly" >,
    SYNSEM.LOCAL.CONT.KEY _superbly_rel ].

:end :instance.


; <<>>
; >> superior.a.1.vm.tdl
; superior.a.1.vm.tdl

:begin :instance.

superior_a1 := intrans_adj_le &
  [ STEM < "superior" >,
    SYNSEM.LOCAL.CONT.KEY _superior_rel ].

:end :instance.


; <<>>
; >> superstitious.a.1.vm.tdl
; superstitious.a.1.vm.tdl

:begin :instance.

superstitious_a1 := intrans_adj_le &
  [ STEM < "superstitious" >,
    SYNSEM.LOCAL.CONT.KEY _superstitious_rel ].

:end :instance.


; <<>>
; >> superstitiously.a.1.vm.tdl
; superstitiously.a.1.vm.tdl

:begin :instance.

superstitiously := adv_word_le &
  [ STEM < "superstitiously" >,
    SYNSEM.LOCAL.CONT.KEY _superstitiously_rel ].

:end :instance.


; <<>>
; >> supper.n.1.vm.tdl
; supper.n.1.vm.tdl

:begin :instance.

supper_n1 := massn_le &
  [ STEM < "supper" >,
    SYNSEM.LOCAL.CONT.KEY _supper_rel ].

:end :instance.


; <<>>
; >> suppose.v.1.vm.tdl
; suppose.v.1.vm.tdl

:begin :instance.

suppose_v1 := mv_cp_prop*_non_trans_le &
  [ STEM < "suppose" >,
    SYNSEM.LOCAL.CONT.KEY _suppose_rel ].

:end :instance.


; <<>>
; >> suppose.v.2.vm.tdl
; suppose.v.2.vm.tdl

:begin :instance.

suppose_v2 := mv_cp_prop_raise_key_le &
  [ STEM < "suppose" >,
    SYNSEM.LOCAL.CONT.ALTKEY _suppose_rel ].

:end :instance.


; <<>>
; >> supposed.a.1.vm.tdl
; supposed.a.1.vm.tdl

:begin :instance.

supposed_a1 := reg_adj_equi_le &
  [ STEM < "supposed" >,
    SYNSEM.LOCAL.CONT.KEY _supposed_rel ].

:end :instance.


; <<>>
; >> sure.a.1.vm.tdl
; sure.a.1.vm.tdl

:begin :instance.

sure_a1 := intrans_adj_le &
  [ STEM < "sure" >,
    SYNSEM.LOCAL.CONT.KEY _sure_rel ].

:end :instance.


; <<>>
; >> surely.a.1.vm.tdl
; surely.a.1.vm.tdl

:begin :instance.

surely_adv1 := adv_word_le &
  [ STEM < "surely" >,
    SYNSEM.LOCAL.CONT.KEY _surely_rel ].

:end :instance.


; <<>>
; >> surprise.n.1.vm.tdl
; surprise.n.1.vm.tdl

:begin :instance.

surprise_n1 := intr_noun_word_le &
  [ STEM < "surprise" >,
    SYNSEM.LOCAL.CONT.KEY _surprise_rel ].

:end :instance.


; <<>>
; >> surprise.v.1.vm.tdl
; surprise.v.1.vm.tdl

:begin :instance.

surprise_v1 := mv_np_trans_le &
  [ STEM < "surprise" >,
    SYNSEM.LOCAL.CONT.KEY _surprise_v_rel ].

:end :instance.


; <<>>
; >> suspend.v.1.vm.tdl
; suspend.v.1.vm.tdl

:begin :instance.

suspend_v1 := mv_np_trans_le &
  [ STEM < "suspend" >,
    SYNSEM.LOCAL.CONT.KEY _suspend_rel ].

:end :instance.


; <<>>
; >> swell.a.1.vm.tdl
; swell.a.1.vm.tdl

:begin :instance.

swell_a1 := intrans_adj_le &
  [ STEM < "swell" >,
    SYNSEM.LOCAL.CONT.KEY _swell_rel ].

:end :instance.


; <<>>
; >> swim.v.1.vm.tdl
; swim.v.1.vm.tdl

:begin :instance.

swim_v1 := mv_unerg_le &
  [ STEM < "swim" >,
    SYNSEM.LOCAL.CONT.KEY _swim_rel ].

:end :instance.


; <<>>
; >> switch.n.1.vm.tdl
; switch.n.1.vm.tdl

:begin :instance.

switch_n1 := intr_noun_word_le &
  [ STEM < "switch" >,
    SYNSEM.LOCAL.CONT.KEY _switch_n_rel ].

:end :instance.


; <<>>
; >> switch.v.1.vm.tdl
; switch.v.1.vm.tdl

:begin :instance.

switch_v1 := mv_prep*_intrans_le &
  [ STEM < "switch" >,
    SYNSEM.LOCAL.CONT [ KEY _switch_v_rel,
			COMPKEY dir_rel ] ].

:end :instance.


; <<>>
; >> switch.v.2.vm.tdl
; switch.v.2.vm.tdl

:begin :instance.

switch_v2 := mv_np_trans_le &
  [ STEM < "switch" >,
    SYNSEM.LOCAL.CONT.KEY _switch_rel ].

:end :instance.


; <<>>
; >> sympathetic.a.1.vm.tdl
; sympathetic.a.1.vm.tdl

:begin :instance.

sympathetic_a1 := intrans_adj_le &
  [ STEM < "sympathetic" >,
    SYNSEM.LOCAL.CONT.KEY _sympathetic_rel ].

:end :instance.


; <<>>
; >> system.n.1.vm.tdl
; system.n.1.vm.tdl

:begin :instance.

system_n1 := intr_noun_word_le &
  [ STEM < "system" >,
    SYNSEM.LOCAL.CONT.KEY _system_rel ].

:end :instance.


; <<>>
; >> systematically.a.1.vm.tdl
; systematically.a.1.vm.tdl

:begin :instance.

systematically_adv1 := vp_adv_word_le &
  [ STEM < "systematically" >,
    SYNSEM.LOCAL.CONT.KEY _systematically_rel ].

:end :instance.


; <<>>
; >> table.n.1.vm.tdl
; table.n.1.vm.tdl

:begin :instance.

table_n1 := intr_noun_word_le &
  [ STEM < "table" >,
    SYNSEM.LOCAL.CONT.KEY _table_rel ].

:end :instance.


; <<>>
; >> tackle.v.1.vm.tdl
; tackle.v.1.vm.tdl

:begin :instance.

tackle_v1 := mv_np_trans_le &
  [ STEM < "tackle" >,
    SYNSEM.LOCAL.CONT.KEY _tackle_rel ].

:end :instance.


; <<>>
; >> tai.Pen.n.1.vm.tdl
; tai.Pen.n.1.vm.tdl

:begin :instance.

Tai_Pen_n1 := proper_mle1 &
  [ STEM < "tai", "pen" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'Tai_Pen ].

:end :instance.


; <<>>
; >> take.adv.v.1.vm.tdl
; take.adv.v.1.vm.tdl

:begin :instance.

take_adv_v1 := mv_prep_trans_le &
  [ STEM < "take" >,
    SYNSEM.LOCAL.CONT [ KEY _take_advantage_rel,
			COMPKEY _advantage_rel,
			OCOMPKEY _of_rel ] ].

:end :instance.


; <<>>
; >> take.away.v.1.vm.tdl
; take.away.v.1.vm.tdl

:begin :instance.

take_away_v1 := mv_particle_np_le &
  [ STEM < "take" >,
    SYNSEM.LOCAL.CONT [ KEY _take_away_rel,
			COMPKEY _away_rel ] ].

:end :instance.


; <<>>
; >> take.care.v.1.vm.tdl
; take.care.v.1.vm.tdl

:begin :instance.

take_care_v1 := mv_prep_trans_le &
  [ STEM < "take" >,
    SYNSEM.LOCAL.CONT [ KEY _take_care_rel,
			COMPKEY _care_n_rel,
			OCOMPKEY _of_rel ] ].

:end :instance.


; <<>>
; >> take.charge_of.v.1.vm.tdl
; take.charge_of.v.1.vm.tdl

:begin :instance.

take_charge_of_v1 := mv_prep_trans_le &
  [ STEM < "take" >,
    SYNSEM.LOCAL.CONT [ KEY _take_charge_of_rel,
			COMPKEY _charge_n_rel,
			OCOMPKEY _of_rel ] ].

:end :instance.


; <<>>
; >> take.down.v.1.vm.tdl
; take.down.v.1.vm.tdl

:begin :instance.

take_down_v1 := mv_particle_np_le &
  [ STEM < "take" >,
    SYNSEM.LOCAL.CONT [ KEY _take_down_rel,
			COMPKEY _down_rel ] ].

:end :instance.


; <<>>
; >> take.hold.v.1.vm.tdl
; take.hold.v.1.vm.tdl

:begin :instance.

take_hold_v1 := mv_prep_trans_le &
  [ STEM < "take" >,
    SYNSEM.LOCAL.CONT [ KEY _take_hold_rel,
			COMPKEY _hold_n_rel,
			OCOMPKEY _of_rel ] ].

:end :instance.


; <<>>
; >> take.into.v.1.vm.tdl
; take.into.v.1.vm.tdl

:begin :instance.

take_into_v1 := mv_empty_prep_trans_le &
  [ STEM < "take" >,
    SYNSEM.LOCAL [ CAT.VALENCE.COMPS 
			       < *top*, 
				[ LOCAL.CONT [ KEY _into_rel,
                                               COMPKEY _account_rel ] ] >,
		   CONT.KEY _take_into_rel ] ].

:end :instance.


; <<>>
; >> take.off.v.1.vm.tdl
; take.off.v.1.vm.tdl

:begin :instance.

take_off_v1 := mv_particle_np_le &
  [ STEM < "take" >,
    SYNSEM.LOCAL.CONT [ KEY _take_off_rel,
			COMPKEY _off_rel ] ].

:end :instance.


; <<>>
; >> take.out.v.1.vm.tdl
; take.out.v.1.vm.tdl

:begin :instance.

take_out_v1 := mv_particle_np_le &
  [ STEM < "take" >,
    SYNSEM.LOCAL.CONT [ KEY _take_out_rel,
			COMPKEY _out_rel ] ].

:end :instance.


; <<>>
; >> take.over.v.1.vm.tdl
; take.over.v.1.vm.tdl

:begin :instance.

take_over_v1 := mv_particle_np_le &
  [ STEM < "take" >,
    SYNSEM.LOCAL.CONT [ KEY _take_over_rel,
			COMPKEY _over_rel ] ].

:end :instance.


; <<>>
; >> take.place.v.1.vm.tdl
; take.place.v.1.vm.tdl

:begin :instance.

take_place_v1 := mv_np_non_trans_unacc_le &
  [ STEM < "take" >,
    SYNSEM.LOCAL.CONT [ KEY _take_place_rel,
			COMPKEY _i_place_rel ] ].

:end :instance.


; <<>>
; >> take.up.v.1.vm.tdl
; take.up.v.1.vm.tdl

:begin :instance.

take_up_v1 := mv_particle_np_le &
  [ STEM < "take" >,
    SYNSEM.LOCAL.CONT [ KEY _take_up_rel,
			COMPKEY _up_rel ] ].

:end :instance.


; <<>>
; >> take.v.1.vm.tdl
; take.v.1.vm.tdl

:begin :instance.

take_v1 := mv_prep*_trans_le &
  [ STEM < "take" >,
    SYNSEM.LOCAL.CONT [ KEY _take_rel,
			OCOMPKEY dir_rel ] ].

:end :instance.


; <<>>
; >> take.part.in.v.1.vm.tdl
; take.part.in.v.1.vm.tdl

:begin :instance.

take_part_in_v1 := mv_prep_trans_le &
  [ STEM < "take" >,
    SYNSEM.LOCAL.CONT [ KEY _take_part_in_rel,
			COMPKEY _part_rel,
			OCOMPKEY _in_rel ] ].

:end :instance.


; <<>>
; >> talent.n.1.vm.tdl
; talent.n.1.vm.tdl

:begin :instance.

talent_n1 := intr_noun_word_le &
  [ STEM < "talent" >,
    SYNSEM.LOCAL.CONT.KEY _talent_rel ].

:end :instance.


; <<>>
; >> talk.n.1.vm.tdl
; talk.n.1.vm.tdl

:begin :instance.

talk_n1 := intr_noun_word_le &
  [ STEM < "talk" >,
    SYNSEM.LOCAL.CONT.KEY _talk_n_rel ].

:end :instance.


; <<>>
; >> talk.over.v.1.vm.tdl
; talk.over.v.1.vm.tdl

:begin :instance.

talk_over_v1 := mv_particle_np_le &
  [ STEM < "talk" >,
    SYNSEM.LOCAL.CONT [ KEY _talk_over_rel,
			COMPKEY _over_rel ] ].

:end :instance.


; <<>>
; >> talk.v.1.vm.tdl
; talk.v.1.vm.tdl

:begin :instance.

talk_v1 := mv_double_pp*_le &
  [ STEM < "talk" >,
    SYNSEM.LOCAL.CONT [ KEY _talk_about_rel,
			COMPKEY _to_rel,
			OCOMPKEY _about_rel ] ].

:end :instance.


; <<>>
; >> tall.a.1.vm.tdl
; tall.a.1.vm.tdl

:begin :instance.

tall_a1 := intrans_adj_le &
  [ STEM < "tall" >,
    SYNSEM.LOCAL.CONT.KEY _tall_rel ].

:end :instance.


; <<>>
; >> task.n.1.vm.tdl
; task.n.1.vm.tdl

:begin :instance.

task_n1 := intr_noun_word_le &
  [ STEM < "task" >,
    SYNSEM.LOCAL.CONT.KEY _task_rel ].

:end :instance.


; <<>>
; >> taste.v.1.vm.tdl
; taste.v.1.vm.tdl

:begin :instance.

taste_v1 := mv_np_trans_le &
  [ STEM < "taste" >,
    SYNSEM.LOCAL.CONT.KEY _taste_rel ].

:end :instance.


; <<>>
; >> taxi.n.1.vm.tdl
; taxi.n.1.vm.tdl

:begin :instance.

taxi_n1 := intr_noun_word_le &
  [ STEM < "taxi" >,
    SYNSEM.LOCAL.CONT.KEY _taxi_rel ].

:end :instance.


; <<>>
; >> tea.n.1.vm.tdl
; tea.n.1.vm.tdl

:begin :instance.

tea_n1 := massn_le &
  [ STEM < "tea" >,
    SYNSEM.LOCAL.CONT.KEY _tea_rel ].

:end :instance.


; <<>>
; >> tea.time.n.1.tdl
; tea.time.n.1.tdl

:begin :instance.

tea_time_n1 := hour_word_mle1 &
  [ STEM < "tea", "time" >,
    SYNSEM.LOCAL.CONT.KEY _tea_time_rel ].

:end :instance.


; <<>>
; >> teach.v.1.vm.tdl
; teach.v.1.vm.tdl

:begin :instance.

teach_v1 := mv_np*_trans_le &
  [ STEM < "teach" >,
    SYNSEM.LOCAL.CONT.KEY _teach_rel ].

:end :instance.


; <<>>
; >> teacher.n.1.vm.tdl
; teacher.n.1.vm.tdl

:begin :instance.

teacher_n1 := intr_noun_word_le &
  [ STEM < "teacher" >,
    SYNSEM.LOCAL.CONT.KEY _teacher_rel ].

:end :instance.


; <<>>
; >> team.n.1.vm.tdl
; team.n.1.vm.tdl

:begin :instance.

team_n1 := intr_noun_word_le &
  [ STEM < "team" >,
    SYNSEM.LOCAL.CONT.KEY _team_rel ].

:end :instance.


; <<>>
; >> tear.v.1.vm.tdl
; tear.v.1.vm.tdl

:begin :instance.

tear_v1 := mv_np_trans_le &
  [ STEM < "tear" >,
    SYNSEM.LOCAL.CONT.KEY _tear_rel ].

:end :instance.


; <<>>
; >> tear.v.2.vm.tdl
; tear.v.2.vm.tdl

:begin :instance.

tear_v2 := mv_unacc_le &
  [ STEM < "tear" >,
    SYNSEM.LOCAL.CONT.KEY _tear_und_rel ].

:end :instance.


; <<>>
; >> technical.a.1.vm.tdl
; technical.a.1.vm.tdl

:begin :instance.

technical_a1 := intrans_adj_le &
  [ STEM < "technical" >,
    SYNSEM.LOCAL.CONT.KEY _technical_rel ].

:end :instance.


; <<>>
; >> technicality.n.1.vm.tdl
; technicality.n.1.vm.tdl

:begin :instance.

technicality_n1 := intr_noun_word_le &
  [ STEM < "technicality" >,
    SYNSEM.LOCAL.CONT.KEY _technicality_rel ].

:end :instance.


; <<>>
; >> technically.a.1.vm.tdl
; technically.a.1.vm.tdl

:begin :instance.

technically := adv_word_le &
  [ STEM < "technically" >,
    SYNSEM.LOCAL.CONT.KEY _technically_rel ].

:end :instance.


; <<>>
; >> technique.n.1.vm.tdl
; technique.n.1.vm.tdl

:begin :instance.

technique_n1 := intr_noun_word_le &
  [ STEM < "technique" >,
    SYNSEM.LOCAL.CONT.KEY _technique_rel ].

:end :instance.


; <<>>
; >> technology.n.1.vm.tdl
; technology.n.1.vm.tdl

:begin :instance.

technology_n1 := massn_le &
  [ STEM < "technology" >,
    SYNSEM.LOCAL.CONT.KEY _technology_rel ].

:end :instance.


; <<>>
; >> telephone.n.1.vm.tdl
; telephone.n.1.vm.tdl

:begin :instance.

telephone_n1 := intr_noun_word_le &
  [ STEM < "telephone" >,
    SYNSEM.LOCAL.CONT.KEY _telephone_rel ].

:end :instance.


; <<>>
; >> telephone.v.1.vm.tdl
; telephone.v.1.vm.tdl

:begin :instance.

telephone_v1 := mv_np*_trans_le &
  [ STEM < "telephone" >,
    SYNSEM.LOCAL.CONT.KEY _telephone_v_rel ].

:end :instance.


; <<>>
; >> tell.about.v.1.tdl
; tell.about.v.1.tdl

:begin :instance.

tell_about_v1 := mv_prep_trans_le &
  [ STEM < "tell" >,
    SYNSEM.LOCAL.CONT [ KEY _tell_rel,
			OCOMPKEY _about_rel ] ].

:end :instance.


; <<>>
; >> tell.v.1.tdl
; tell.v.1.tdl

:begin :instance.

tell_v1 := mv_ditrans*_only_le &
  [ STEM < "tell" >,
    SYNSEM.LOCAL.CONT.KEY _tell3_rel ].

:end :instance.


; <<>>
; >> tell.v.2.tdl
; tell.v.2.tdl

:begin :instance.

tell_v2 := mv_np_trans_cp_le &
  [ STEM < "tell" >,
    SYNSEM.LOCAL.CONT.KEY _tell_rel ].

:end :instance.


; <<>>
; >> tell.v.3.tdl
; tell.v.3.tdl

:begin :instance.

tell_v3 := mv_obj_equi_le &
  [ STEM < "tell" >,
    SYNSEM.LOCAL.CONT.KEY _tell2_rel ].

:end :instance.


; <<>>
; >> tempt.v.1.vm.tdl
; tempt.v.1.vm.tdl

:begin :instance.

tempt_v1 := mv_np_trans_le &
  [ STEM < "tempt" >,
    SYNSEM.LOCAL.CONT.KEY _tempt_rel ].

:end :instance.


; <<>>
; >> ten.c.1.tdl
; ten.c.1.tdl

:begin :instance.

ten := bare_unspecified_card_le & 
  [  STEM < "ten" >,
     SYNSEM.LOCAL [ CAT.HEAD intadj1,
		    CONT.--STEMLISZT.LIST < [ CONST_VALUE 10 ], ... > ] ].

:end :instance.


; <<>>
; >> ten.hour.n.1.tdl
; ten.hour.n.1.tdl

:begin :instance.

ten_hour := hour_word_le &
  [ STEM < "ten" >,
    SYNSEM.LOCAL.CONT.KEY.HOUR 10 ].

:end :instance.


; <<>>
; >> tend.v.1.vm.tdl
; tend.v.1.vm.tdl

:begin :instance.

tend_v1 := mv_ssr_le &
  [ STEM < "tend" >,
    SYNSEM.LOCAL.CONT.KEY _tend_rel ].

:end :instance.


; <<>>
; >> tennis.n.1.vm.tdl
; tennis.n.1.vm.tdl

:begin :instance.

tennis_n1 := massn_le &
  [ STEM < "tennis" >,
    SYNSEM.LOCAL.CONT.KEY _tennis_rel ].

:end :instance.


; <<>>
; >> tentative.a.1.tdl
; tentative.a.1.tdl

:begin :instance.

tentative_a1 := intrans_adj_le &
  [ STEM < "tentative" >,
    SYNSEM.LOCAL.CONT.KEY _tentative_rel ].

:end :instance.


; <<>>
; >> tentatively.a.1.vm.tdl
; tentatively.a.1.vm.tdl

:begin :instance.

tentatively := adv_word_le &
  [ STEM < "tentatively" >,
    SYNSEM.LOCAL.CONT.KEY _tentatively_rel ].

:end :instance.


; <<>>
; >> tenth.a.1.vm.tdl
; tenth.a.1.vm.tdl

:begin :instance.

tenth := ordinal_adj_le &
  [ STEM < "tenth" >,
    SYNSEM.LOCAL.CONT.KEY.ORD 10 ].

:end :instance.


; <<>>
; >> tenth.day.n.1.tdl
; tenth.day.n.1.tdl

:begin :instance.

tenth_day := day_of_month_le &
  [ STEM < "tenth" >,
    SYNSEM.LOCAL.CONT.KEY.DAY 10 ].

:end :instance.


; <<>>
; >> term.n.1.vm.tdl
; term.n.1.vm.tdl

:begin :instance.

term_n1 := intr_noun_word_le &
  [ STEM < "term" >,
    SYNSEM.LOCAL.CONT.KEY _term_rel ].

:end :instance.


; <<>>
; >> terminate.v.1.vm.tdl
; terminate.v.1.vm.tdl

:begin :instance.

terminate_v1 := mv_np_trans_le &
  [ STEM < "terminate" >,
    SYNSEM.LOCAL.CONT.KEY _terminate_rel ].

:end :instance.


; <<>>
; >> terminate.v.2.vm.tdl
; terminate.v.2.vm.tdl

:begin :instance.

terminate_v2 := mv_unacc_le &
  [ STEM < "terminate" >,
    SYNSEM.LOCAL.CONT.KEY _terminate_und_rel ].

:end :instance.


; <<>>
; >> terrible.a.1.vm.tdl
; terrible.a.1.vm.tdl

:begin :instance.

terrible_a1 := intrans_adj_le &
  [ STEM < "terrible" >,
    SYNSEM.LOCAL.CONT.KEY _terrible_rel ].

:end :instance.


; <<>>
; >> terribly.a.1.tdl
; terribly.a.1.tdl

:begin :instance.

terribly_deg := degree_spec_le &
  [ STEM < "terribly" >,
    SYNSEM.LOCAL.CONT.KEY _terribly_deg_rel ].

:end :instance.


; <<>>
; >> terribly.a.2.tdl
; terribly.a.2.tdl

:begin :instance.

terribly := vp_adv_post_word_le &
  [ STEM < "terribly" >,
    SYNSEM.LOCAL.CONT.KEY _terribly_rel ].

:end :instance.


; <<>>
; >> terrific.a.1.vm.tdl
; terrific.a.1.vm.tdl

:begin :instance.

terrific_a1 := intrans_adj_le &
  [ STEM < "terrific" >,
    SYNSEM.LOCAL.CONT.KEY _terrific_rel ].

:end :instance.


; <<>>
; >> terror.n.1.vm.tdl
; terror.n.1.vm.tdl

:begin :instance.

terror_n1 := massn_le &
  [ STEM < "terror" >,
    SYNSEM.LOCAL.CONT.KEY _terror_rel ].

:end :instance.


; <<>>
; >> test.n.1.vm.tdl
; test.n.1.vm.tdl

:begin :instance.

test_n1 := intr_noun_word_le &
  [ STEM < "test" >,
    SYNSEM.LOCAL.CONT.KEY _test_rel ].

:end :instance.


; <<>>
; >> text.n.1.vm.tdl
; text.n.1.vm.tdl

:begin :instance.

text_n1 := intr_noun_word_le &
  [ STEM < "text" >,
    SYNSEM.LOCAL.CONT.KEY _text_rel ].

:end :instance.


; <<>>
; >> thai.n.1.vm.tdl
; thai.n.1.vm.tdl

:begin :instance.

Thai_n1 := proper_le &
  [ STEM < "thai" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'Thai ].

:end :instance.


; <<>>
; >> thank.v.1.vm.tdl
; thank.v.1.vm.tdl

:begin :instance.

thank_v1 := mv_np_trans_le &
  [ STEM < "thank" >,
    SYNSEM.LOCAL.CONT.KEY _thank_rel ].

:end :instance.


; <<>>
; >> thanks.n.1.vm.tdl
; thanks.n.1.vm.tdl

:begin :instance.

thanks_n1 := plurn_le &
  [ STEM < "thanks" >,
    SYNSEM.LOCAL.CONT.KEY _thanks_rel ].

:end :instance.


; <<>>
; >> that.c.1.tdl
; that.c.1.tdl

:begin :instance.

that_det := det_sm_le &
  [ STEM < "that" >,
    SYNSEM.LOCAL.CONT.KEY _that_dem_rel ].

:end :instance.


; <<>>
; >> that.c.2.tdl
; that.c.2.tdl

:begin :instance.

that_c := that_c_le &
  [ STEM < "that" > ].

:end :instance.


; <<>>
; >> that.is.c.1.vm.tdl
; that.is.c.1.vm.tdl

:begin :instance.

that_is_root := disc_adv_mle1 &
  [ STEM < "that", "is" >,
    SYNSEM.LOCAL.CONT.KEY.EXCL 'that_is ].

:end :instance.

; <<>>
; >> that.n.1.tdl
; that.n.1.tdl

:begin :instance.

that_deix := deictic_pro_le &
  [ STEM < "that" >,
    SYNSEM.LOCAL.CONT [ KEY.INST [ PNG [ PN 3sg*,
					 GEN neut* ],
				   PRONTYPE demon ],
			ALTKEY _that_dem_rel ] ].
:end :instance.


; <<>>
; >> that.n.2.tdl
; that.n.2.tdl

:begin :instance.

that_r := rel_pro_word_le &
  [ STEM < "that" >,
    SYNSEM [ LOCAL.CONT.KEY reg_nom_rel ] ].

:end :instance.


; <<>>
; >> the.Czerczinsky.n.1.vm.tdl
; the.Czerczinsky.n.1.vm.tdl
; MULTIKEY < "czerczinsky" >

:begin :instance.

The_Czerczinsky_n1 := proper_mle2 &
  [ STEM < "the", "czerczinsky" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'Czerczinsky ].

:end :instance.


; <<>>
; >> the.c.1.tdl
; the.c.1.tdl

:begin :instance.

the := det_nonpart_le &
  [ STEM < "the" >,
    SYNSEM.LOCAL.CONT.KEY _def_rel ].

:end :instance.


; <<>>
; >> the.day.after.n.1.tdl
; the.day.after.n.1.tdl
; MULTIKEY < "after" >

:begin :instance.

the_day_after := day_of_week_3mle3 &
  [ STEM < "the", "day", "after" >,
    SYNSEM.LOCAL.CONT.KEY _the_day_after_rel ].

:end :instance.


; <<>>
; >> the.day.of.gu.n.1.tdl
; the.day.of.gu.n.1.tdl
; MULTIKEY < "unity" >

:begin :instance.

german_unity_day := holiday_word_4mle4 &
  [ STEM < "day", "of", "german", "unity" >,
    SYNSEM.LOCAL.CONT.KEY.DAY 'day_of_german_unity ].

:end :instance.


; <<>>
; >> the.day.of.p_and_r.n.1.tdl
; the.day.of.p_and_r.n.1.tdl
; MULTIKEY < "prayer_and_repentance" >

:begin :instance.

volkstrauertag := holiday_word_4mle4 &
  [ STEM < "the", "day", "of", "prayer_and_repentance" >,
    SYNSEM.LOCAL.CONT.KEY.DAY 'day_of_prayer_and_repentance ].

:end :instance.


; <<>>
; >> the.evening.n.1.tdl
; the.evening.n.1.tdl
; MULTIKEY < "evening" >

:begin :instance.

evening_def := def_day_part_word_le &
  [ STEM < "evening" >,
    SYNSEM.LOCAL.CONT.KEY _def_evening_rel ].

:end :instance.


; <<>>
; >> the.media.n.1.vm.tdl
; the.media.n.1.vm.tdl
; MULTIKEY < "media" >

:begin :instance.

the_media_n1 := proper_mle2 &
  [ STEM < "the", "media" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'the_media ].

:end :instance.


; <<>>
; >> the.morning.n.1.tdl
; the.morning.n.1.tdl

:begin :instance.

morning_def := def_day_part_word_le &
  [ STEM < "morning" >,
    SYNSEM.LOCAL.CONT.KEY _def_morning_rel ].

:end :instance.


; <<>>
; >> the.same.a.1.vm.tdl
; the.same.a.1.vm.tdl
; MULTIKEY < "same" >

:begin :instance.

the_same_a1 := irreg_pred_intrans_adj_mle2 &
  [ STEM < "the", "same" >,
    SYNSEM.LOCAL.CONT.KEY _same_rel ].

:end :instance.


; <<>>
; >> theater.n.1.vm.tdl
; theater.n.1.vm.tdl

:begin :instance.

theater_n1 := intr_noun_word_le &
  [ STEM < "theater" >,
    SYNSEM.LOCAL.CONT.KEY _theater_rel ].

:end :instance.


; <<>>
; >> their.n.1.tdl
; their.n.1.tdl

:begin :instance.

their := poss_le &
  [ STEM < "their" >,
    SYNSEM.LOCAL.CONT.ALTKEY.INST [ PNG.PN 3pl*,
				    PRONTYPE std_3 ] ].

:end :instance.


; <<>>
; >> theirs.n.1.tdl
; theirs.n.1.tdl

:begin :instance.

theirs := poss_pro_le &
  [ STEM < "theirs" >,
    SYNSEM.LOCAL.CONT.LISZT.LIST.FIRST.INST.PNG.PN 3pl* ].

:end :instance.


; <<>>
; >> them.n.1.tdl
; them.n.1.tdl

:begin :instance.

them := pers_pro_le &
  [ STEM < "them" >,
    SYNSEM.LOCAL [ CAT.HEAD.CASE acc,
		   CONT.KEY.INST [ PNG.PN 3pl*,
				   PRONTYPE std_3 ] ] ].
:end :instance.


; <<>>
; >> theme.n.1.vm.tdl
; theme.n.1.vm.tdl

:begin :instance.

theme_n1 := intr_noun_word_le &
  [ STEM < "theme" >,
    SYNSEM.LOCAL.CONT.KEY _theme_rel ].

:end :instance.


; <<>>
; >> themselves.n.1.tdl
; themselves.n.1.tdl

:begin :instance.

themselves := refl_pro_le &
  [ STEM < "themselves" >,
    SYNSEM.LOCAL.CONT.KEY.INST.PNG.PN 3pl* ].

:end :instance.


; <<>>
; >> then.a.1.vm.tdl
; then.a.1.vm.tdl

:begin :instance.

then_adv := np_adv_word_le &
  [ STEM < "then" >,
    SYNSEM.LOCAL.CONT.KEY _then_temp_rel ].

:end :instance.


; <<>>
; >> then.disc.c.1.vm.tdl
; then.disc.c.1.vm.tdl

:begin :instance.

then_disc_root := disc_adv_le &
  [ STEM < "then" >,
    SYNSEM.LOCAL.CONT.KEY _discourse_then_rel ].

:end :instance.


; <<>>
; >> then.c.1.tdl
; then.c.1.tdl

:begin :instance.

then_conj := subconj_le &
  [ STEM < "then" >,
    SYNSEM.LOCAL.CONT.KEY _then_subord_rel ].

:end :instance.


; <<>>
; >> theoretical.a.1.vm.tdl
; theoretical.a.1.vm.tdl

:begin :instance.

theoretical_a1 := intrans_adj_le &
  [ STEM < "theoretical" >,
    SYNSEM.LOCAL.CONT.KEY _theoretical_rel ].

:end :instance.


; <<>>
; >> theoretically.a.1.vm.tdl
; theoretically.a.1.vm.tdl

:begin :instance.

theoretically_adv1 := vp_adv_word_le &
  [ STEM < "theoretically" >,
    SYNSEM.LOCAL.CONT.KEY _theoretically_rel ].

:end :instance.


; <<>>
; >> there.a.1.vm.tdl
; there.a.1.vm.tdl

:begin :instance.

there_adv1 := np_adv_word_le &
  [ STEM < "there" >,
    SYNSEM.LOCAL.CONT.KEY _there_rel ].

:end :instance.


; <<>>
; >> there.n.1.tdl
; there.n.1.tdl

:begin :instance.

there_expl := expl_there_le &
  [ STEM < "there" > ].

:end :instance.


; <<>>
; >> thereabouts.a.1.vm.tdl
; thereabouts.a.1.vm.tdl

:begin :instance.

thereabouts_adv1 := np_adv_word_le &
  [ STEM < "thereabouts" >,
    SYNSEM.LOCAL.CONT.KEY _thereabouts_rel ].

:end :instance.


; <<>>
; >> thereby.a.1.vm.tdl
; thereby.a.1.vm.tdl

:begin :instance.

thereby_adv1 := adv_pre_word_le &
  [ STEM < "thereby" >,
    SYNSEM.LOCAL.CONT.KEY _thereby_rel ].

:end :instance.


; <<>>
; >> therefore.c.1.vm.tdl
; therefore.c.1.vm.tdl

:begin :instance.

therefore_root := disc_adv_le &
  [ STEM < "therefore" >,
    SYNSEM.LOCAL.CONT.KEY.EXCL 'therefore ].

:end :instance.


; <<>>
; >> therefore.c.2.tdl
; therefore.c.2.tdl

:begin :instance.

therefore_subord := subconj_le &
  [ STEM < "therefore" >,
    SYNSEM.LOCAL.CONT.KEY _therefore_rel ].

:end :instance.


; <<>>
; >> these.c.1.tdl
; these.c.1.tdl

:begin :instance.

these_det := det_pl_le &
  [ STEM < "these" >,
    SYNSEM.LOCAL.CONT.KEY _these_dem_rel ].

:end :instance.


; <<>>
; >> these.n.1.tdl
; these.n.1.tdl

:begin :instance.

these_deix := deictic_pro_le &
  [ STEM < "these" >,
    SYNSEM.LOCAL.CONT [ KEY.INST [ PNG [ PN 3sg*,
					 GEN neut* ],
				   PRONTYPE demon ],
			ALTKEY _these_dem_rel ] ].
:end :instance.


; <<>>
; >> they.n.1.tdl
; they.n.1.tdl

:begin :instance.

they := pers_pro_le &
  [ STEM < "they" >,
    SYNSEM.LOCAL [ CAT.HEAD.CASE nom,
		   CONT.KEY.INST [ PNG.PN 3pl*,
				   PRONTYPE std_3 ] ] ].
:end :instance.


; <<>>
; >> they.n.2.tdl
; they.n.2.tdl

:begin :instance.

they_sg := pers_pro_noagr_le &
  [ STEM < "they" >,
    SYNSEM.LOCAL [ CAT.HEAD.CASE nom,
                   AGR.PNG.PN 3pl*,
		   CONT.KEY.INST.PNG [ PN 3sg*,
				       GEN andro* ] ] ].
:end :instance.


; <<>>
; >> thing.n.1.vm.tdl
; thing.n.1.vm.tdl

:begin :instance.

thing_n1 := intr_noun_word_le &
  [ STEM < "thing" >,
    SYNSEM.LOCAL.CONT.KEY _thing_rel ].

:end :instance.


; <<>>
; >> think.about.v.1.tdl
; think.about.v.1.tdl

:begin :instance.

think_about := mv_empty_prep_intrans_le &
  [ STEM < "think" >,
    SYNSEM.LOCAL.CONT [ KEY _think_about_rel,
			COMPKEY _about_rel ] ].

:end :instance.


; <<>>
; >> think.of.v.1.tdl
; think.of.v.1.tdl

:begin :instance.

think_of := mv_empty_prep_intrans_le &
  [ STEM < "think" >,
    SYNSEM.LOCAL.CONT [ KEY _think_of_rel,
			COMPKEY _of_rel ] ].

:end :instance.


; <<>>
; >> think.through.v.1.vm.tdl
; think.through.v.1.vm.tdl

:begin :instance.

think_through_v1 := mv_particle_np_le &
  [ STEM < "think" >,
    SYNSEM.LOCAL.CONT [ KEY _think_through_rel,
			COMPKEY _through_rel ] ].

:end :instance.


; <<>>
; >> think.v.1.tdl
; think.v.1.tdl

:begin :instance.

think1 := mv_cp_prop_non_trans_le &
  [ STEM < "think" >,
    SYNSEM.LOCAL.CONT.KEY _think_rel ].

:end :instance.


; <<>>
; >> think.v.2.tdl
; think.v.2.tdl

:begin :instance.

think2 := mv_prep_intrans_event_le &
  [ STEM < "think" >,
    SYNSEM.LOCAL.CONT [ KEY _think_loc_rel,
			COMPKEY loc_rel ] ].

:end :instance.


; <<>>
; >> think.v.3.tdl
; think.v.3.tdl

:begin :instance.

think_v3 := mv_np_non_trans_le &
  [ STEM < "think" >,
    SYNSEM.LOCAL.CONT.KEY _think_rel ].

:end :instance.


; <<>>
; >> third.a.1.vm.tdl
; third.a.1.vm.tdl

:begin :instance.

third := ordinal_adj_le &
  [ STEM < "third" >,
    SYNSEM.LOCAL.CONT.KEY.ORD 3 ].

:end :instance.


; <<>>
; >> third.day.n.1.tdl
; third.day.n.1.tdl

:begin :instance.

third_day := day_of_month_le &
  [ STEM < "third" >,
    SYNSEM.LOCAL.CONT.KEY.DAY 3 ].

:end :instance.


; <<>>
; >> thirteen.c.1.tdl
; thirteen.c.1.tdl

:begin :instance.

thirteen := bare_unspecified_card_le & 
  [  STEM < "thirteen" >,
     SYNSEM.LOCAL [ CAT.HEAD intadj1,
		    CONT.--STEMLISZT.LIST < [ CONST_VALUE 13 ], ... > ] ].
:end :instance.


; <<>>
; >> thirteenth.a.1.vm.tdl
; thirteenth.a.1.vm.tdl

:begin :instance.

thirteenth := ordinal_adj_le &
  [ STEM < "thirteenth" >,
    SYNSEM.LOCAL.CONT.KEY.ORD 13 ].

:end :instance.


; <<>>
; >> thirteenth.day.n.1.tdl
; thirteenth.day.n.1.tdl

:begin :instance.

thirteenth_day := day_of_month_le &
  [ STEM < "thirteenth" >,
    SYNSEM.LOCAL.CONT.KEY.DAY 13 ].

:end :instance.


; <<>>
; >> thirtieth.a.1.vm.tdl
; thirtieth.a.1.vm.tdl

:begin :instance.

thirtieth := ordinal_adj_le &
  [ STEM < "thirtieth" >,
    SYNSEM.LOCAL.CONT.KEY.ORD 30 ].

:end :instance.


; <<>>
; >> thirtieth.day.n.1.tdl
; thirtieth.day.n.1.tdl

:begin :instance.

thirtieth_day := day_of_month_le &
  [ STEM < "thirtieth" >,
    SYNSEM.LOCAL.CONT.KEY.DAY 30 ].

:end :instance.


; <<>>
; >> thirty.c.1.tdl
; thirty.c.1.tdl

:begin :instance.

thirty_w_comps := complemented_unspecified_card_le & 
  [ STEM < "thirty" >,
    SYNSEM.LOCAL [ CAT [HEAD intadj2,
			VALENCE.COMPS.FIRST.LOCAL.CAT.HEAD intadj1],
		   CONT.--STEMLISZT.LIST < [ CONST_VALUE 30 ], [] > ] ].

:end :instance.


; <<>>
; >> thirty.minute.n.1.tdl
; thirty.minute.n.1.tdl

:begin :instance.

thirty_minute := minute_word_le &
  [ STEM < "thirty" >,
    SYNSEM.LOCAL [ CAT.POSTHEAD +,
		   CONT.KEY.MINUTE 30 ] ].

:end :instance.


; <<>>
; >> thirtyeighth.a.1.vm.tdl
; thirtyeighth.a.1.vm.tdl

:begin :instance.

thirtyeighth := ordinal_adj_le &
  [ STEM < "thirtyeighth" >,
    SYNSEM.LOCAL.CONT.KEY.ORD 38 ].

:end :instance.


; <<>>
; >> thirtyfifth.a.1.vm.tdl
; thirtyfifth.a.1.vm.tdl

:begin :instance.

thirtyfifth := ordinal_adj_le &
  [ STEM < "thirtyfifth" >,
    SYNSEM.LOCAL.CONT.KEY.ORD 35 ].

:end :instance.


; <<>>
; >> thirtyfirst.a.1.vm.tdl
; thirtyfirst.a.1.vm.tdl

:begin :instance.

thirtyfirst := ordinal_adj_le &
  [ STEM < "thirtyfirst" >,
    SYNSEM.LOCAL.CONT.KEY.ORD 31 ].

:end :instance.


; <<>>
; >> thirtyfirst.day.n.1.tdl
; thirtyfirst.day.n.1.tdl

:begin :instance.

thirtyfirst_day := day_of_month_mle &
  [ STEM < "thirty", "first" >,
    SYNSEM.LOCAL.CONT.KEY.DAY 31 ].

:end :instance.


; <<>>
; >> thirtyfourth.a.1.vm.tdl
; thirtyfourth.a.1.vm.tdl

:begin :instance.

thirtyfourth := ordinal_adj_le &
  [ STEM < "thirtyfourth" >,
    SYNSEM.LOCAL.CONT.KEY.ORD 34 ].

:end :instance.


; <<>>
; >> thirtyninth.a.1.vm.tdl
; thirtyninth.a.1.vm.tdl

:begin :instance.

thirtyninth := ordinal_adj_le &
  [ STEM < "thirtyninth" >,
    SYNSEM.LOCAL.CONT.KEY.ORD 39 ].

:end :instance.


; <<>>
; >> thirtysecond.a.1.vm.tdl
; thirtysecond.a.1.vm.tdl

:begin :instance.

thirtysecond := ordinal_adj_le &
  [ STEM < "thirtysecond" >,
    SYNSEM.LOCAL.CONT.KEY.ORD 32 ].

:end :instance.


; <<>>
; >> thirtyseventh.a.1.vm.tdl
; thirtyseventh.a.1.vm.tdl

:begin :instance.

thirtyseventh := ordinal_adj_le &
  [ STEM < "thirtyseventh" >,
    SYNSEM.LOCAL.CONT.KEY.ORD 37 ].

:end :instance.


; <<>>
; >> thirtysixth.a.1.vm.tdl
; thirtysixth.a.1.vm.tdl

:begin :instance.

thirtysixth := ordinal_adj_le &
  [ STEM < "thirtysixth" >,
    SYNSEM.LOCAL.CONT.KEY.ORD 36 ].

:end :instance.


; <<>>
; >> thirtythird.a.1.vm.tdl
; thirtythird.a.1.vm.tdl

:begin :instance.

thirtythird := ordinal_adj_le &
  [ STEM < "thirtythird" >,
    SYNSEM.LOCAL.CONT.KEY.ORD 33 ].

:end :instance.


; <<>>
; >> this.c.1.tdl
; this.c.1.tdl

:begin :instance.

this_det := det_sm_le &
  [ STEM < "this" >,
    SYNSEM.LOCAL.CONT.KEY _this_dem_rel ].

:end :instance.


; <<>>
; >> this.n.1.tdl
; this.n.1.tdl

:begin :instance.

this_deix := deictic_pro_le &
  [ STEM < "this" >,
    SYNSEM.LOCAL.CONT [ KEY.INST [ PNG [ PN 3sg*,
					 GEN neut* ],
				   PRONTYPE demon ],
			ALTKEY _this_dem_rel ] ].
:end :instance.


; <<>>
; >> thorough.a.1.vm.tdl
; thorough.a.1.vm.tdl

:begin :instance.

thorough_a1 := intrans_adj_le &
  [ STEM < "thorough" >,
    SYNSEM.LOCAL.CONT.KEY _thorough_rel ].

:end :instance.


; <<>>
; >> thoroughly.a.1.vm.tdl
; thoroughly.a.1.vm.tdl

:begin :instance.

thoroughly_adv1 := vp_adv_word_le &
  [ STEM < "thoroughly" >,
    SYNSEM.LOCAL.CONT.KEY _thoroughly_rel ].

:end :instance.


; <<>>
; >> those.c.1.tdl
; those.c.1.tdl

:begin :instance.

those_det := det_pl_le &
  [ STEM < "those" >,
    SYNSEM.LOCAL.CONT.KEY _those_dem_rel ].

:end :instance.


; <<>>
; >> those.n.1.tdl
; those.n.1.tdl

:begin :instance.

those_deix := deictic_pro_le &
  [ STEM < "those" >,
    SYNSEM.LOCAL.CONT [ KEY.INST [ PNG [ PN 3sg*,
					 GEN neut* ],
				   PRONTYPE demon ],
			ALTKEY _those_dem_rel ] ].
:end :instance.


; <<>>
; >> though.c.1.vm.tdl
; though.c.1.vm.tdl

:begin :instance.

though_root := disc_adv_le &
  [ STEM < "though" >,
    SYNSEM.LOCAL.CONT.KEY.EXCL 'though ].

:end :instance.

; <<>>
; >> though.c.2.tdl
; though.c.2.tdl

:begin :instance.

though_subord := subconj_le &
  [ STEM < "though" >,
    SYNSEM.LOCAL.CONT.KEY _though_rel ].

:end :instance.


; <<>>
; >> though.a.1.vm.tdl
; though.a.1.vm.tdl

:begin :instance.

though := vp_adv_post_word_le &
  [ STEM < "though" >,
    SYNSEM.LOCAL.CONT.KEY _though_adv_rel ].

:end :instance.


; <<>>
; >> thought.n.1.vm.tdl
; thought.n.1.vm.tdl

:begin :instance.

thought_n1 := intr_noun_word_le &
  [ STEM < "thought" >,
    SYNSEM.LOCAL.CONT.KEY _thought_rel ].

:end :instance.


; <<>>
; >> thousand.c.1.vm.tdl
; thousand.c.1.vm.tdl

:begin :instance.

thousand := bare_specified_card_le & 
    [ STEM < "thousand" >,
      SYNSEM.LOCAL [ CAT [HEAD intadj6,
			  VALENCE.SPR.LOCAL.CAT.HEAD intadj3],
		     CONT.--STEMLISZT.LIST < [ CONST_VALUE 1000 ], [] > ] ].

:end :instance.


; <<>>
; >> three.c.1.tdl
; three.c.1.tdl

:begin :instance.

three := bare_unspecified_card_le & 
  [  STEM < "three" >,
     SYNSEM.LOCAL [ CAT.HEAD intadj1,
		    CONT.--STEMLISZT.LIST < [ CONST_VALUE 3 ], ... > ] ].
:end :instance.


; <<>>
; >> three.hour.n.1.tdl
; three.hour.n.1.tdl

:begin :instance.

three_hour := hour_word_le &
  [ STEM < "three" >,
    SYNSEM.LOCAL.CONT.KEY.HOUR 3 ].

:end :instance.


; <<>>
; >> through.p.1.tdl
; through.p.1.tdl

:begin :instance.

through := reg_prep_le &
  [ STEM < "through" >,
    SYNSEM.LOCAL.CONT.KEY _through_rel ].

:end :instance.


; <<>>
; >> throughout.p.1.tdl
; throughout.p.1.tdl

:begin :instance.

throughout := reg_prep_le &
  [ STEM < "throughout" >,
    SYNSEM.LOCAL.CONT.KEY _throughout_rel ].

:end :instance.


; <<>>
; >> throw.open.v.1.tdl
; throw.open.v.1.tdl

:begin :instance.

throw_open_v1 := mv_particle_np_le &
  [ STEM < "throw" >,
    SYNSEM.LOCAL.CONT [ KEY _throw_open_rel,
			COMPKEY _open_rel ] ].

:end :instance.


; <<>>
; >> throw.v.1.tdl
; throw.v.1.tdl

:begin :instance.

throw_v1 := mv_np_trans_le &
  [ STEM < "throw" >,
    SYNSEM.LOCAL.CONT.KEY _throw_rel ].

:end :instance.


; <<>>
; >> thursday.n.1.tdl
; thursday.n.1.tdl

:begin :instance.

thursday1 := day_of_week_le &
  [ STEM < "thursday" >,
    SYNSEM.LOCAL.CONT.KEY.DAY 'thu ].

:end :instance.


; <<>>
; >> thursday.n.2.tdl
; thursday.n.2.tdl

:begin :instance.

thursday_cn := intr_temp_noun_le &
  [ STEM < "thursday" >,
    SYNSEM.LOCAL.CONT.KEY dofw_rel & [ DAY 'thursday ] ].

:end :instance.


; <<>>
; >> thus.a.1.vm.tdl
; thus.a.1.vm.tdl

:begin :instance.

thus := adv_pre_word_le &
  [ STEM < "thus" >,
    SYNSEM.LOCAL.CONT.KEY _thus_rel ].

:end :instance.


; <<>>
; >> ticket.n.1.vm.tdl
; ticket.n.1.vm.tdl

:begin :instance.

ticket_n1 := intr_noun_word_le &
  [ STEM < "ticket" >,
    SYNSEM.LOCAL.CONT.KEY _ticket_rel ].

:end :instance.


; <<>>
; >> tie.up.v.1.vm.tdl
; tie.up.v.1.vm.tdl

:begin :instance.

tie_up_v1 := mv_particle_np_le &
  [ STEM < "tie" >,
    SYNSEM.LOCAL.CONT [ KEY _tie_up_rel,
			COMPKEY _up_rel ] ].

:end :instance.


; <<>>
; >> tie.v.1.vm.tdl
; tie.v.1.vm.tdl

:begin :instance.

tie_v1 := mv_np_trans_le &
  [ STEM < "tie" >,
    SYNSEM.LOCAL.CONT.KEY _tie_v_rel ].

:end :instance.


; <<>>
; >> tied.up.a.1.vm.tdl
; tied.up.a.1.vm.tdl

:begin :instance.

tied_up_a1 := irreg_pred_intrans_adj_mle1 &
  [ STEM < "tied", "up" >,
    SYNSEM.LOCAL.CONT.KEY _tied_up_rel ].

:end :instance.


; <<>>
; >> tight.a.1.vm.tdl
; tight.a.1.vm.tdl

:begin :instance.

tight_a1 := intrans_adj_le &
  [ STEM < "tight" >,
    SYNSEM.LOCAL.CONT.KEY _tight_rel ].

:end :instance.


; <<>>
; >> tightly.a.1.vm.tdl
; tightly.a.1.vm.tdl

:begin :instance.

tightly := adv_word_le &
  [ STEM < "tightly" >,
    SYNSEM.LOCAL.CONT.KEY _tightly_rel ].

:end :instance.


; <<>>
; >> till.p.1.tdl
; till.p.1.tdl

:begin :instance.

till_hour := hour_prep_word_le &
  [ STEM < "till" >,
    SYNSEM.LOCAL.CONT.KEY _before_hour_rel ].

:end :instance.


; <<>>
; >> till.c.1.tdl
; till.c.1.tdl

:begin :instance.

till := prep_cp_le &
  [ STEM < "till" >,
    SYNSEM.LOCAL.CONT.KEY _until_rel ].

:end :instance.


; <<>>
; >> time.n.1.tdl
; time.n.1.tdl

:begin :instance.

time1 := massn_le &
  [ STEM < "time" >,
    SYNSEM.LOCAL.CONT.KEY _time_rel ].

:end :instance.


; <<>>
; >> time.n.1.vm.tdl
; time.n.1.vm.tdl

:begin :instance.

time_n1 := intr_noun_word_le &
  [ STEM < "time" >,
    SYNSEM.LOCAL.CONT.KEY _time_occur_rel ].

:end :instance.


; <<>>
; >> timetable.n.1.vm.tdl
; timetable.n.1.vm.tdl

:begin :instance.

timetable_n1 := intr_noun_word_le &
  [ STEM < "timetable" >,
    SYNSEM.LOCAL.CONT.KEY _timetable_rel ].

:end :instance.


; <<>>
; >> tired.a.1.vm.tdl
; tired.a.1.vm.tdl

:begin :instance.

tired_a1 := intrans_adj_le &
  [ STEM < "tired" >,
    SYNSEM.LOCAL.CONT.KEY _tired_rel ].

:end :instance.


; <<>>
; >> title.n.1.vm.tdl
; title.n.1.vm.tdl

:begin :instance.

title_n1 := intr_noun_word_le &
  [ STEM < "title" >,
    SYNSEM.LOCAL.CONT.KEY _title_rel ].

:end :instance.


; <<>>
; >> to.p.1.tdl
; to.p.1.tdl

:begin :instance.

to := prep_nomod_le &
  [ STEM < "to" >,
    SYNSEM.LOCAL.CONT.KEY _to_rel ].

:end :instance.


; <<>>
; >> to.be.honest.a.1.vm.tdl
; to.be.honest.a.1.vm.tdl
; MULTIKEY < "honest" >

:begin :instance.

to_be_honest_adv1 := vp_adv_post_word_3mle3 &
  [ STEM < "to", "be", "honest" >,
    SYNSEM.LOCAL.CONT.KEY _to_be_honest_rel ].

:end :instance.


; <<>>
; >> to.make.sure.a.1.vm.tdl
; to.make.sure.a.1.vm.tdl
; MULTIKEY < "sure" >

:begin :instance.

to_make_sure_adv1 := vp_adv_post_word_3mle3 &
  [ STEM < "to", "make", "sure" >,
    SYNSEM.LOCAL.CONT.KEY _to_make_sure_rel ].

:end :instance.


; <<>>
; >> to.c.1.tdl
; to.c.1.tdl

:begin :instance.

to_c_prop := to_c_prop_le &
  [ STEM < "to" > ].

:end :instance.


; <<>>
; >> to.c.2.tdl
; to.c.2.tdl

:begin :instance.

to_c_nonprop := to_c_nonprop_le &
  [ STEM < "to" > ].

:end :instance.


; <<>>
; >> to.do.with.p.1.vm.tdl
; to.do.with.p.1.vm.tdl
; MULTIKEY < "do" >

:begin :instance.

to_do_with := prep_3mle2 &
  [ STEM < "to", "do", "with" >,
    SYNSEM.LOCAL.CONT.KEY _to_do_with_rel ].

:end :instance.


; <<>>
; >> to.p.2.tdl
; to.p.2.tdl

:begin :instance.

to_hour := hour_prep_word_le &
  [ STEM < "to" >,
    SYNSEM.LOCAL.CONT.KEY _before_hour_rel ].

:end :instance.


; <<>>
; >> to.until.p.1.tdl
; to.until.p.1.tdl

:begin :instance.

to_until := prep_le &
  [ STEM < "to" >,
    SYNSEM.LOCAL [ CAT.HEAD.MOD.CONT.KEY temp_rel,
		   CONT [ KEY _to_until_rel,
			  COMPKEY temp_rel ] ] ].

:end :instance.


; <<>>
; >> to.p.3.tdl
; to.p.3.tdl

:begin :instance.

to_subord := subconj_inf_le &
  [ STEM < "to" >,
    SYNSEM.LOCAL.CONT.KEY _in_order_to_rel ].

:end :instance.


; <<>>
; >> today.a.1.tdl
; today.a.1.tdl

:begin :instance.

today := day_of_week_le &
  [ STEM < "today" >,
    SYNSEM.LOCAL.CONT.KEY _today_rel ].

:end :instance.


; <<>>
; >> together.a.1.tdl
; together.a.1.tdl

:begin :instance.

together := vp_adv_post_word_le &
  [ STEM < "together" >,
    SYNSEM.LOCAL.CONT.KEY _together_rel ].

:end :instance.


; <<>>
; >> tolerable.a.1.vm.tdl
; tolerable.a.1.vm.tdl

:begin :instance.

tolerable_a1 := intrans_adj_le &
  [ STEM < "tolerable" >,
    SYNSEM.LOCAL.CONT.KEY _tolerable_rel ].

:end :instance.


; <<>>
; >> tolerably.a.1.vm.tdl
; tolerably.a.1.vm.tdl

:begin :instance.

tolerably_adv1 := adv_pre_word_le &
  [ STEM < "tolerably" >,
    SYNSEM.LOCAL.CONT.KEY _tolerably_rel ].

:end :instance.


; <<>>
; >> tomorrow.n.1.tdl
; tomorrow.n.1.tdl

:begin :instance.

tomorrow := day_of_week_le &
  [ STEM < "tomorrow" >,
    SYNSEM.LOCAL.CONT.KEY _tomorrow_rel ].

:end :instance.


; <<>>
; >> tonight.n.1.tdl
; tonight.n.1.tdl

:begin :instance.

tonight := day_of_week_le &
  [ STEM < "tonight" >,
    SYNSEM.LOCAL.CONT.KEY.DAY 'tonight ].

:end :instance.


; <<>>
; >> too.a.1.tdl
; too.a.1.tdl

:begin :instance.

too_deg := degree_spec_le &
  [ STEM < "too" >,
    SYNSEM.LOCAL.CONT.KEY _too_deg_rel ].

:end :instance.


; <<>>
; >> too.a.2.tdl
; too.a.2.tdl

:begin :instance.

too := adv_post_word_le &
  [ STEM < "too" >,
    SYNSEM.LOCAL.CONT.KEY _too_also_rel ].

:end :instance.


; <<>>
; >> top.a.1.vm.tdl
; top.a.1.vm.tdl

:begin :instance.

top_a1 := intrans_adj_le &
  [ STEM < "top" >,
    SYNSEM.LOCAL.CONT.KEY _top_rel ].

:end :instance.


; <<>>
; >> top.n.1.vm.tdl
; top.n.1.vm.tdl

:begin :instance.

top_n1 := intr_noun_word_le &
  [ STEM < "top" >,
    SYNSEM.LOCAL.CONT.KEY _top_n_rel ].

:end :instance.


; <<>>
; >> topic.n.1.vm.tdl
; topic.n.1.vm.tdl

:begin :instance.

topic_n1 := intr_noun_word_le &
  [ STEM < "topic" >,
    SYNSEM.LOCAL.CONT.KEY _topic_rel ].

:end :instance.


; <<>>
; >> total.a.1.vm.tdl
; total.a.1.vm.tdl

:begin :instance.

total_a1 := intrans_adj_le &
  [ STEM < "total" >,
    SYNSEM.LOCAL.CONT.KEY _total_rel ].

:end :instance.


; <<>>
; >> totally.a.1.tdl
; totally.a.1.tdl

:begin :instance.

totally_deg := degree_spec_le &
  [ STEM < "totally" >,
    SYNSEM.LOCAL.CONT.KEY _totally_deg_rel ].

:end :instance.


; <<>>
; >> totally.a.2.tdl
; totally.a.2.tdl

:begin :instance.

totally := adv_pre_word_le &
  [ STEM < "totally" >,
    SYNSEM.LOCAL.CONT.KEY _totally_rel ].

:end :instance.


; <<>>
; >> touch.v.1.vm.tdl
; touch.v.1.vm.tdl

:begin :instance.

touch_v1 := mv_np_trans_le &
  [ STEM < "touch" >,
    SYNSEM.LOCAL.CONT.KEY _touch_rel ].

:end :instance.


; <<>>
; >> touch.v.2.vm.tdl
; touch.v.2.vm.tdl

:begin :instance.

touch_v2 := mv_unerg_le &
  [ STEM < "touch" >,
    SYNSEM.LOCAL.CONT.KEY _touch_meet_rel ].

:end :instance.


; <<>>
; >> tour.n.1.vm.tdl
; tour.n.1.vm.tdl

:begin :instance.

tour_n1 := intr_noun_word_le &
  [ STEM < "tour" >,
    SYNSEM.LOCAL.CONT.KEY _tour_rel ].

:end :instance.


; <<>>
; >> towards.p.1.tdl
; towards.p.1.tdl

:begin :instance.

towards := prep_le &
  [ STEM < "towards" >,
    SYNSEM.LOCAL.CONT.KEY _towards_rel ].

:end :instance.


; <<>>
; >> town.n.1.vm.tdl
; town.n.1.vm.tdl

:begin :instance.

town_n1 := intr_noun_word_le &
  [ STEM < "town" >,
    SYNSEM.LOCAL.CONT.KEY _town_rel ].

:end :instance.


; <<>>
; >> track.n.1.vm.tdl
; track.n.1.vm.tdl

:begin :instance.

track_n1 := intr_noun_word_le &
  [ STEM < "track" >,
    SYNSEM.LOCAL.CONT.KEY _track_n_rel ].

:end :instance.


; <<>>
; >> track.v.1.vm.tdl
; track.v.1.vm.tdl

:begin :instance.

track_v1 := mv_np_trans_le &
  [ STEM < "track" >,
    SYNSEM.LOCAL.CONT.KEY _track_v_rel ].

:end :instance.


; <<>>
; >> tragic.a.1.vm.tdl
; tragic.a.1.vm.tdl

:begin :instance.

tragic_a1 := intrans_adj_le &
  [ STEM < "tragic" >,
    SYNSEM.LOCAL.CONT.KEY _tragic_rel ].

:end :instance.


; <<>>
; >> train.n.1.vm.tdl
; train.n.1.vm.tdl

:begin :instance.

train_n1 := intr_noun_word_le &
  [ STEM < "train" >,
    SYNSEM.LOCAL.CONT.KEY _train_n_rel ].

:end :instance.


; <<>>
; >> train.v.1.vm.tdl
; train.v.1.vm.tdl

:begin :instance.

train_v1 := mv_np_trans_le &
  [ STEM < "train" >,
    SYNSEM.LOCAL.CONT.KEY _train_v_rel ].

:end :instance.


; <<>>
; >> training.n.1.vm.tdl
; training.n.1.vm.tdl

:begin :instance.

training_n1 := intr_noun_word_le &
  [ STEM < "training" >,
    SYNSEM.LOCAL.CONT.KEY _training_n_rel ].

:end :instance.


; <<>>
; >> tranquil.a.1.vm.tdl
; tranquil.a.1.vm.tdl

:begin :instance.

tranquil_a1 := intrans_adj_le &
  [ STEM < "tranquil" >,
    SYNSEM.LOCAL.CONT.KEY _tranquil_rel ].

:end :instance.


; <<>>
; >> transact.v.1.vm.tdl
; transact.v.1.vm.tdl

:begin :instance.

transact_v1 := mv_np_trans_le &
  [ STEM < "transact" >,
    SYNSEM.LOCAL.CONT.KEY _transact_rel ].

:end :instance.


; <<>>
; >> transportation.n.1.vm.tdl
; transportation.n.1.vm.tdl

:begin :instance.

transportation_n1 := massn_le &
  [ STEM < "transportation" >,
    SYNSEM.LOCAL.CONT.KEY _transportation_rel ].

:end :instance.


; <<>>
; >> travel.n.1.vm.tdl
; travel.n.1.vm.tdl

:begin :instance.

travel_n1 := massn_le &
  [ STEM < "travel" >,
    SYNSEM.LOCAL.CONT.KEY _travel_n_rel ].

:end :instance.


; <<>>
; >> travel.v.1.vm.tdl
; travel.v.1.vm.tdl

:begin :instance.

travel_v1 := mv_prep*_intrans_le &
  [ STEM < "travel" >,
    SYNSEM.LOCAL.CONT.KEY _travel_v_rel ].

:end :instance.


; <<>>
; >> tree.n.1.vm.tdl
; tree.n.1.vm.tdl

:begin :instance.

tree_n1 := intr_noun_word_le &
  [ STEM < "tree" >,
    SYNSEM.LOCAL.CONT.KEY _tree_rel ].

:end :instance.


; <<>>
; >> trick.n.1.vm.tdl
; trick.n.1.vm.tdl

:begin :instance.

trick_n1 := intr_noun_word_le &
  [ STEM < "trick" >,
    SYNSEM.LOCAL.CONT.KEY _trick_rel ].

:end :instance.


; <<>>
; >> trip.n.1.vm.tdl
; trip.n.1.vm.tdl

:begin :instance.

trip_n1 := noun_ppcomp_word_le &
  [ STEM < "trip" >,
    SYNSEM.LOCAL.CONT.KEY _trip_rel ].

:end :instance.


; <<>>
; >> trouble.n.1.vm.tdl
; trouble.n.1.vm.tdl

:begin :instance.

trouble_n1 := massn_le &
  [ STEM < "trouble" >,
    SYNSEM.LOCAL.CONT.KEY _trouble_rel ].

:end :instance.


; <<>>
; >> trouble.v.1.vm.tdl
; trouble.v.1.vm.tdl

:begin :instance.

trouble_v1 := mv_np_trans_le &
  [ STEM < "trouble" >,
    SYNSEM.LOCAL.CONT.KEY _trouble_v_rel ].

:end :instance.


; <<>>
; >> troublesome.a.1.vm.tdl
; troublesome.a.1.vm.tdl

:begin :instance.

troublesome_a1 := intrans_adj_le &
  [ STEM < "troublesome" >,
    SYNSEM.LOCAL.CONT.KEY _troublesome_rel ].

:end :instance.


; <<>>
; >> true.a.1.vm.tdl
; true.a.1.vm.tdl

:begin :instance.

true_a1 := reg_adj_atrans_cp_le &
  [ STEM < "true" >,
    SYNSEM.LOCAL.CONT.KEY _true_rel ].

:end :instance.


; <<>>
; >> truly.a.1.vm.tdl
; truly.a.1.vm.tdl

:begin :instance.

truly := adv_word_le &
  [ STEM < "truly" >,
    SYNSEM.LOCAL.CONT.KEY _truly_rel ].

:end :instance.


; <<>>
; >> trust.v.1.vm.tdl
; trust.v.1.vm.tdl

:begin :instance.

trust_v1 := mv_np_trans_le &
  [ STEM < "trust" >,
    SYNSEM.LOCAL.CONT.KEY _trust_rel ].

:end :instance.


; <<>>
; >> trust.v.2.vm.tdl
; trust.v.2.vm.tdl

:begin :instance.

trust_v2 := mv_cp_prop_non_trans_le &
  [ STEM < "trust" >,
    SYNSEM.LOCAL.CONT.KEY _trust_rel ].

:end :instance.


; <<>>
; >> trustworthy.a.1.vm.tdl
; trustworthy.a.1.vm.tdl

:begin :instance.

trustworthy_a1 := intrans_adj_le &
  [ STEM < "trustworthy" >,
    SYNSEM.LOCAL.CONT.KEY _trustworthy_rel ].

:end :instance.


; <<>>
; >> truth.n.1.vm.tdl
; truth.n.1.vm.tdl

:begin :instance.

truth_n1 := massn_le &
  [ STEM < "truth" >,
    SYNSEM.LOCAL.CONT.KEY _truth_rel ].

:end :instance.


; <<>>
; >> try.v.1.tdl
; try.v.1.tdl

:begin :instance.

try_v1 := mv_np_trans_le &
  [ STEM < "try" >,
    SYNSEM.LOCAL.CONT.KEY _try_rel ].

:end :instance.


; <<>>
; >> try.v.2.tdl
; try.v.2.tdl

:begin :instance.

try_v2 := mv_subj_equi_le &
  [ STEM < "try" >,
    SYNSEM.LOCAL.CONT.KEY _try2_rel ].

:end :instance.


; <<>>
; >> tuebingen.n.1.vm.tdl
; tuebingen.n.1.vm.tdl

:begin :instance.

Tuebingen_n1 := proper_le &
  [ STEM < "tuebingen" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'Tuebingen ].

:end :instance.


; <<>>
; >> tuesday.n.1.tdl
; tuesday.n.1.tdl

:begin :instance.

tuesday1 := day_of_week_le &
  [ STEM < "tuesday" >,
    SYNSEM.LOCAL.CONT.KEY.DAY 'tue ].

:end :instance.


; <<>>
; >> tuesday.n.2.tdl
; tuesday.n.2.tdl

:begin :instance.

tuesday_cn := intr_temp_noun_le &
  [ STEM < "tuesday" >,
    SYNSEM.LOCAL.CONT.KEY dofw_rel & [ DAY 'tuesday ] ].

:end :instance.


; <<>>
; >> tuition.n.1.vm.tdl
; tuition.n.1.vm.tdl

:begin :instance.

tuition_n1 := massn_le &
  [ STEM < "tuition" >,
    SYNSEM.LOCAL.CONT.KEY _tuition_rel ].

:end :instance.


; <<>>
; >> turn.down.v.1.vm.tdl
; turn.down.v.1.vm.tdl

:begin :instance.

turn_down_v1 := mv_particle_np_le &
  [ STEM < "turn" >,
    SYNSEM.LOCAL.CONT [ KEY _turn_down_rel,
			COMPKEY _down_rel ] ].

:end :instance.


; <<>>
; >> turn.n.1.vm.tdl
; turn.n.1.vm.tdl

:begin :instance.

turn_n1 := intr_noun_word_le &
  [ STEM < "turn" >,
    SYNSEM.LOCAL.CONT.KEY _turn_n_rel ].

:end :instance.


; <<>>
; >> turn.off.v.1.vm.tdl
; turn.off.v.1.vm.tdl

:begin :instance.

turn_off_v1 := mv_particle_np_le &
  [ STEM < "turn" >,
    SYNSEM.LOCAL.CONT [ KEY _turn_off_rel,
			COMPKEY _off_rel ] ].

:end :instance.


; <<>>
; >> turn.out.v.1.vm.tdl
; turn.out.v.1.vm.tdl

:begin :instance.

turn_out_v1 := mv_particle_inf_le &
  [ STEM < "turn" >,
    SYNSEM.LOCAL.CONT [ KEY _turn_out_rel,
			COMPKEY _out_rel ] ].

:end :instance.


; <<>>
; >> turn.out.v.2.vm.tdl
; turn.out.v.2.vm.tdl

:begin :instance.

turn_out_v2 := mv_particle_prd_le &
  [ STEM < "turn" >,
    SYNSEM.LOCAL.CONT [ KEY _turn_out_rel,
			COMPKEY _out_rel ] ].

:end :instance.


; <<>>
; >> turn.v.1.vm.tdl
; turn.v.1.vm.tdl

:begin :instance.

turn_v1 := mv_unerg_le &
  [ STEM < "turn" >,
    SYNSEM.LOCAL.CONT.KEY _turn_v_rel ].

:end :instance.


; <<>>
; >> twelfth.day.n.1.tdl
; twelfth.day.n.1.tdl

:begin :instance.

twelfth_day := day_of_month_le &
  [ STEM < "twelfth" >,
    SYNSEM.LOCAL.CONT.KEY.DAY 12 ].

:end :instance.


; <<>>
; >> twelve.c.1.tdl
; twelve.c.1.tdl

:begin :instance.

twelve := bare_unspecified_card_le & 
  [  STEM < "twelve" >,
     SYNSEM.LOCAL [ CAT.HEAD intadj1,
		    CONT.--STEMLISZT.LIST < [ CONST_VALUE 12 ], ... > ] ].
:end :instance.


; <<>>
; >> twelve.hour.n.1.tdl
; twelve.hour.n.1.tdl

:begin :instance.

twelve_hour := hour_word_le &
  [ STEM < "twelve" >,
    SYNSEM.LOCAL.CONT.KEY.HOUR 12 ].

:end :instance.


; <<>>
; >> twentieth.day.n.1.tdl
; twentieth.day.n.1.tdl

:begin :instance.

twentieth_day := day_of_month_le &
  [ STEM < "twentieth" >,
    SYNSEM.LOCAL.CONT.KEY.DAY 20 ].

:end :instance.


; <<>>
; >> twenty.c.1.tdl
; twenty.c.1.tdl

:begin :instance.

twenty_w_comps := complemented_unspecified_card_le & 
  [ STEM < "twenty" >,
    SYNSEM.LOCAL [ CAT [HEAD intadj2,
			VALENCE.COMPS.FIRST.LOCAL.CAT.HEAD intadj1],
		   CONT.--STEMLISZT <! [], [ CONST_VALUE 20 ] !> ] ].
:end :instance.


; <<>>
; >> twenty.minute.n.1.tdl
; twenty.minute.n.1.tdl

:begin :instance.

twenty_minute := minute_word_le &
  [ STEM < "twenty" >,
    SYNSEM.LOCAL [ CAT.POSTHEAD +,
		   CONT.KEY.MINUTE 20 ] ].

:end :instance.


; <<>>
; >> twentyeighth.a.1.vm.tdl
; twentyeighth.a.1.vm.tdl

:begin :instance.

twentyeighth := ordinal_adj_le &
  [ STEM < "twentyeighth" >,
    SYNSEM.LOCAL.CONT.KEY.ORD 28 ].

:end :instance.


; <<>>
; >> twentyeighth.day.n.1.tdl
; twentyeighth.day.n.1.tdl

:begin :instance.

twentyeighth_day := day_of_month_mle &
  [ STEM < "twenty", "eighth" >,
    SYNSEM.LOCAL.CONT.KEY.DAY 28 ].

:end :instance.


; <<>>
; >> twentyfifth.a.1.vm.tdl
; twentyfifth.a.1.vm.tdl

:begin :instance.

twentyfifth := ordinal_adj_le &
  [ STEM < "twentyfifth" >,
    SYNSEM.LOCAL.CONT.KEY.ORD 25 ].

:end :instance.


; <<>>
; >> twentyfifth.day.n.1.tdl
; twentyfifth.day.n.1.tdl

:begin :instance.

twentyfifth_day := day_of_month_mle &
  [ STEM < "twenty", "fifth" >,
    SYNSEM.LOCAL.CONT.KEY.DAY 25 ].

:end :instance.


; <<>>
; >> twentyfirst.a.1.vm.tdl
; twentyfirst.a.1.vm.tdl

:begin :instance.

twentyfirst := ordinal_adj_le &
  [ STEM < "twentyfirst" >,
    SYNSEM.LOCAL.CONT.KEY.ORD 21 ].

:end :instance.


; <<>>
; >> twentyfirst.day.n.1.tdl
; twentyfirst.day.n.1.tdl

:begin :instance.

twentyfirst_day := day_of_month_mle &
  [ STEM < "twenty", "first" >,
    SYNSEM.LOCAL.CONT.KEY.DAY 21 ].

:end :instance.


; <<>>
; >> twentyfourth.a.1.vm.tdl
; twentyfourth.a.1.vm.tdl

:begin :instance.

twentyfourth := ordinal_adj_le &
  [ STEM < "twentyfourth" >,
    SYNSEM.LOCAL.CONT.KEY.ORD 24 ].

:end :instance.


; <<>>
; >> twentyfourth.day.n.1.tdl
; twentyfourth.day.n.1.tdl

:begin :instance.

twentyfourth_day := day_of_month_mle &
  [ STEM < "twenty", "fourth" >,
    SYNSEM.LOCAL.CONT.KEY.DAY 24 ].

:end :instance.


; <<>>
; >> twentyninth.a.1.vm.tdl
; twentyninth.a.1.vm.tdl

:begin :instance.

twentyninth := ordinal_adj_le &
  [ STEM < "twentyninth" >,
    SYNSEM.LOCAL.CONT.KEY.ORD 29 ].

:end :instance.


; <<>>
; >> twentyninth.day.n.1.tdl
; twentyninth.day.n.1.tdl

:begin :instance.

twentyninth_day := day_of_month_mle &
  [ STEM < "twenty", "ninth" >,
    SYNSEM.LOCAL.CONT.KEY.DAY 29 ].

:end :instance.


; <<>>
; >> twentysecond.a.1.vm.tdl
; twentysecond.a.1.vm.tdl

:begin :instance.

twentysecond := ordinal_adj_le &
  [ STEM < "twentysecond" >,
    SYNSEM.LOCAL.CONT.KEY.ORD 22 ].

:end :instance.


; <<>>
; >> twentysecond.day.n.1.tdl
; twentysecond.day.n.1.tdl

:begin :instance.

twentysecond_day := day_of_month_mle &
  [ STEM < "twenty", "second" >,
    SYNSEM.LOCAL.CONT.KEY.DAY 22 ].

:end :instance.


; <<>>
; >> twentyseventh.a.1.vm.tdl
; twentyseventh.a.1.vm.tdl

:begin :instance.

twentyseventh := ordinal_adj_le &
  [ STEM < "twentyseventh" >,
    SYNSEM.LOCAL.CONT.KEY.ORD 27 ].

:end :instance.


; <<>>
; >> twentyseventh.day.n.1.tdl
; twentyseventh.day.n.1.tdl

:begin :instance.

twentyseventh_day := day_of_month_mle &
  [ STEM < "twenty", "seventh" >,
    SYNSEM.LOCAL.CONT.KEY.DAY 27 ].

:end :instance.


; <<>>
; >> twentysixth.a.1.vm.tdl
; twentysixth.a.1.vm.tdl

:begin :instance.

twentysixth := ordinal_adj_le &
  [ STEM < "twentysixth" >,
    SYNSEM.LOCAL.CONT.KEY.ORD 26 ].

:end :instance.


; <<>>
; >> twentysixth.day.n.1.tdl
; twentysixth.day.n.1.tdl

:begin :instance.

twentysixth_day := day_of_month_mle &
  [ STEM < "twenty", "sixth" >,
    SYNSEM.LOCAL.CONT.KEY.DAY 26 ].

:end :instance.


; <<>>
; >> twentythird.a.1.vm.tdl
; twentythird.a.1.vm.tdl

:begin :instance.

twentythird := ordinal_adj_le &
  [ STEM < "twentythird" >,
    SYNSEM.LOCAL.CONT.KEY.ORD 23 ].

:end :instance.


; <<>>
; >> twentythird.day.n.1.tdl
; twentythird.day.n.1.tdl

:begin :instance.

twentythird_day := day_of_month_mle &
  [ STEM < "twenty", "third" >,
    SYNSEM.LOCAL.CONT.KEY.DAY 23 ].

:end :instance.


; <<>>
; >> twice.a.1.vm.tdl
; twice.a.1.vm.tdl

:begin :instance.

twice_adv1 := vp_adv_post_word_le &
  [ STEM < "twice" >,
    SYNSEM.LOCAL.CONT.KEY _twice_rel ].

:end :instance.


; <<>>
; >> two.c.1.tdl
; two.c.1.tdl

:begin :instance.

two := bare_unspecified_card_le & 
  [  STEM < "two" >,
     SYNSEM.LOCAL [ CAT.HEAD intadj1,
		    CONT.--STEMLISZT.LIST < [ CONST_VALUE 2 ], ... > ] ].
:end :instance.


; <<>>
; >> two.hour.n.1.tdl
; two.hour.n.1.tdl

:begin :instance.

two_hour := hour_word_le &
  [ STEM < "two" >,
    SYNSEM.LOCAL.CONT.KEY.HOUR 2 ].

:end :instance.


; <<>>
; >> two-thousand.n.1.vm.tdl
; two-thousand.n.1.vm.tdl
; MULTIKEY < "thousand" >

:begin :instance.

two-thousand := year_word_mle2 &
  [ STEM < "two", "thousand" >,
    SYNSEM.LOCAL.CONT.KEY.YEAR 2000 ].

:end :instance.


; <<>>
; >> two-thousand.n.2.vm.tdl
; two-thousand.n.2.vm.tdl

:begin :instance.

two-thousand_2 := year_word_le &
  [ STEM < "2000" >,
    SYNSEM.LOCAL.CONT.KEY.YEAR 2000 ].

:end :instance.


; <<>>
; >> ulf.n.1.vm.tdl
; ulf.n.1.vm.tdl

:begin :instance.

Ulf_n1 := proper_le &
  [ STEM < "ulf" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'Ulf ].

:end :instance.


; <<>>
; >> ultimate.a.1.vm.tdl
; ultimate.a.1.vm.tdl

:begin :instance.

ultimate_a1 := intrans_adj_le &
  [ STEM < "ultimate" >,
    SYNSEM.LOCAL.CONT.KEY _ultimate_rel ].

:end :instance.


; <<>>
; >> umlaut.n.1.vm.tdl
; umlaut.n.1.vm.tdl

:begin :instance.

umlaut_n1 := intr_noun_word_le &
  [ STEM < "umlaut" >,
    SYNSEM.LOCAL.CONT.KEY _umlaut_rel ].

:end :instance.


; <<>>
; >> umm.c.1.vm.tdl
; umm.c.1.vm.tdl

:begin :instance.

umm_root := disc_adv_le &
  [ STEM < "umm" >,
    SYNSEM.LOCAL.CONT.KEY.EXCL 'umm ].

:end :instance.

; <<>>
; >> umpteen.c.1.tdl
; umpteen.c.1.tdl

:begin :instance.

umpteen := det_pl_le &
  [ STEM < "umpteen" >,
    SYNSEM.LOCAL.CONT.KEY _umpteen_rel ].

:end :instance.


; <<>>
; >> unable.a.1.vm.tdl
; unable.a.1.vm.tdl

:begin :instance.

unable_a1 := intrans_adj_le &
  [ STEM < "unable" >,
    SYNSEM.LOCAL.CONT.KEY _unable_rel ].

:end :instance.


; <<>>
; >> unaffected.a.1.vm.tdl
; unaffected.a.1.vm.tdl

:begin :instance.

unaffected_a1 := intrans_adj_le &
  [ STEM < "unaffected" >,
    SYNSEM.LOCAL.CONT.KEY _unaffected_rel ].

:end :instance.


; <<>>
; >> unavailable.a.1.vm.tdl
; unavailable.a.1.vm.tdl

:begin :instance.

unavailable_a1 := intrans_adj_le &
  [ STEM < "unavailable" >,
    SYNSEM.LOCAL.CONT.KEY _unavailable_rel ].

:end :instance.


; <<>>
; >> unawares.a.1.vm.tdl
; unawares.a.1.vm.tdl

:begin :instance.

unawares_a1 := intrans_adj_le &
  [ STEM < "unawares" >,
    SYNSEM.LOCAL.CONT.KEY _unawares_rel ].

:end :instance.


; <<>>
; >> unbearable.a.1.vm.tdl
; unbearable.a.1.vm.tdl

:begin :instance.

unbearable_a1 := intrans_adj_le &
  [ STEM < "unbearable" >,
    SYNSEM.LOCAL.CONT.KEY _unbearable_rel ].

:end :instance.


; <<>>
; >> under.p.1.tdl
; under.p.1.tdl

:begin :instance.

under := reg_prep_le &
  [ STEM < "under" >,
    SYNSEM.LOCAL.CONT.KEY _under_rel ].

:end :instance.


; <<>>
; >> understand.v.1.vm.tdl
; understand.v.1.vm.tdl

:begin :instance.

understand_v1 := mv_np_trans_le &
  [ STEM < "understand" >,
    SYNSEM.LOCAL.CONT.KEY _understand_rel ].

:end :instance.


; <<>>
; >> understand.v.2.vm.tdl
; understand.v.2.vm.tdl

:begin :instance.

understand_v2 := mv_pp_cp_le &
  [ STEM < "understand" >,
    SYNSEM.LOCAL.CONT [ KEY _understand_by_rel,
			COMPKEY _by_rel ] ].
:end :instance.


; <<>>
; >> understand.v.3.vm.tdl
; understand.v.3.vm.tdl

:begin :instance.

understand_v3 := mv_unerg_le &
  [ STEM < "understand" >,
    SYNSEM.LOCAL.CONT.KEY _understand_rel ].

:end :instance.


; <<>>
; >> undertake.v.1.vm.tdl
; undertake.v.1.vm.tdl

:begin :instance.

undertake_v1 := mv_np_trans_le &
  [ STEM < "undertake" >,
    SYNSEM.LOCAL.CONT.KEY _undertake_rel ].

:end :instance.


; <<>>
; >> undoubted.a.1.vm.tdl
; undoubted.a.1.vm.tdl

:begin :instance.

undoubted_a1 := intrans_adj_le &
  [ STEM < "undoubted" >,
    SYNSEM.LOCAL.CONT.KEY _undoubted_rel ].

:end :instance.


; <<>>
; >> unevaluated.a.1.vm.tdl
; unevaluated.a.1.vm.tdl

:begin :instance.

unevaluated_a1 := intrans_adj_le &
  [ STEM < "unevaluated" >,
    SYNSEM.LOCAL.CONT.KEY _unevaluated_rel ].

:end :instance.


; <<>>
; >> unexpected.a.1.vm.tdl
; unexpected.a.1.vm.tdl

:begin :instance.

unexpected_a1 := intrans_adj_le &
  [ STEM < "unexpected" >,
    SYNSEM.LOCAL.CONT.KEY _unexpected_rel ].

:end :instance.


; <<>>
; >> unexpectedly.a.1.vm.tdl
; unexpectedly.a.1.vm.tdl

:begin :instance.

unexpectedly_adv1 := vp_adv_word_le &
  [ STEM < "unexpectedly" >,
    SYNSEM.LOCAL.CONT.KEY _unexpectedly_rel ].

:end :instance.


; <<>>
; >> unfavorable.a.1.vm.tdl
; unfavorable.a.1.vm.tdl

:begin :instance.

unfavorable_a1 := intrans_adj_le &
  [ STEM < "unfavorable" >,
    SYNSEM.LOCAL.CONT.KEY _unfavorable_rel ].

:end :instance.


; <<>>
; >> unfavorably.a.1.vm.tdl
; unfavorably.a.1.vm.tdl

:begin :instance.

unfavorably := adv_word_le &
  [ STEM < "unfavorably" >,
    SYNSEM.LOCAL.CONT.KEY _unfavorably_rel ].

:end :instance.


; <<>>
; >> unfortunate.a.1.vm.tdl
; unfortunate.a.1.vm.tdl

:begin :instance.

unfortunate_a1 := intrans_adj_le &
  [ STEM < "unfortunate" >,
    SYNSEM.LOCAL.CONT.KEY _unfortunate_rel ].

:end :instance.


; <<>>
; >> unfortunately.a.1.vm.tdl
; unfortunately.a.1.vm.tdl

:begin :instance.

unfortunately_adv1 := vp_adv_word_le &
  [ STEM < "unfortunately" >,
    SYNSEM.LOCAL.CONT.KEY _unfortunately_rel ].

:end :instance.


; <<>>
; >> unhurried.a.1.vm.tdl
; unhurried.a.1.vm.tdl

:begin :instance.

unhurried_a1 := intrans_adj_le &
  [ STEM < "unhurried" >,
    SYNSEM.LOCAL.CONT.KEY _unhurried_rel ].

:end :instance.


; <<>>
; >> unhurriedly.a.1.vm.tdl
; unhurriedly.a.1.vm.tdl

:begin :instance.

unhurriedly_adv1 := vp_adv_word_le &
  [ STEM < "unhurriedly" >,
    SYNSEM.LOCAL.CONT.KEY _unhurriedly_rel ].

:end :instance.


; <<>>
; >> uniform.a.1.vm.tdl
; uniform.a.1.vm.tdl

:begin :instance.

uniform_a1 := intrans_adj_le &
  [ STEM < "uniform" >,
    SYNSEM.LOCAL.CONT.KEY _uniform_adj_rel ].

:end :instance.


; <<>>
; >> uniform.n.1.vm.tdl
; uniform.n.1.vm.tdl

:begin :instance.

uniform_n1 := intr_noun_word_le &
  [ STEM < "uniform" >,
    SYNSEM.LOCAL.CONT.KEY _uniform_rel ].

:end :instance.


; <<>>
; >> unimportant.a.1.vm.tdl
; unimportant.a.1.vm.tdl

:begin :instance.

unimportant_a1 := intrans_adj_le &
  [ STEM < "unimportant" >,
    SYNSEM.LOCAL.CONT.KEY _unimportant_rel ].

:end :instance.


; <<>>
; >> union.n.1.vm.tdl
; union.n.1.vm.tdl

:begin :instance.

union_n1 := intr_noun_word_le &
  [ STEM < "union" >,
    SYNSEM.LOCAL.CONT.KEY _union_rel ].

:end :instance.


; <<>>
; >> united.a.1.vm.tdl
; united.a.1.vm.tdl

:begin :instance.

united_a1 := intrans_adj_le &
  [ STEM < "united" >,
    SYNSEM.LOCAL.CONT.KEY _united_rel ].

:end :instance.


; <<>>
; >> unity.n.1.vm.tdl
; unity.n.1.vm.tdl

:begin :instance.

unity_n1 := massn_le &
  [ STEM < "unity" >,
    SYNSEM.LOCAL.CONT.KEY _unity_rel ].

:end :instance.


; <<>>
; >> university.n.1.vm.tdl
; university.n.1.vm.tdl

:begin :instance.

university_n1 := intr_noun_word_le &
  [ STEM < "university" >,
    SYNSEM.LOCAL.CONT.KEY _university_rel ].

:end :instance.


; <<>>
; >> unless.c.1.tdl
; unless.c.1.tdl

:begin :instance.

unless := subconj_le &
  [ STEM < "unless" >,
    SYNSEM.LOCAL.CONT.KEY _unless_rel ].

:end :instance.


; <<>>
; >> unlikely.a.1.vm.tdl
; unlikely.a.1.vm.tdl

:begin :instance.

unlikely_a1 := intrans_adj_le &
  [ STEM < "unlikely" >,
    SYNSEM.LOCAL.CONT.KEY _unlikely_rel ].

:end :instance.


; <<>>
; >> unluckily.a.1.vm.tdl
; unluckily.a.1.vm.tdl

:begin :instance.

unluckily_adv1 := vp_adv_word_le &
  [ STEM < "unluckily" >,
    SYNSEM.LOCAL.CONT.KEY _unluckily_rel ].

:end :instance.


; <<>>
; >> unpack.v.1.vm.tdl
; unpack.v.1.vm.tdl

:begin :instance.

unpack_v1 := mv_np*_trans_le &
  [ STEM < "unpack" >,
    SYNSEM.LOCAL.CONT.KEY _unpack_rel ].

:end :instance.


; <<>>
; >> unpleasant.a.1.vm.tdl
; unpleasant.a.1.vm.tdl

:begin :instance.

unpleasant_a1 := intrans_adj_le &
  [ STEM < "unpleasant" >,
    SYNSEM.LOCAL.CONT.KEY _unpleasant_rel ].

:end :instance.


; <<>>
; >> unpleasantly.a.1.vm.tdl
; unpleasantly.a.1.vm.tdl

:begin :instance.

unpleasantly := vp_adv_post_word_le &
  [ STEM < "unpleasantly" >,
    SYNSEM.LOCAL.CONT.KEY _unpleasantly_rel ].

:end :instance.


; <<>>
; >> until.p.1.tdl
; until.p.1.tdl

:begin :instance.

until := prep_no_n_mod_le &
  [ STEM < "until" >,
    SYNSEM.LOCAL.CONT [ KEY _until_rel,
			COMPKEY temp_rel ] ].

:end :instance.


; <<>>
; >> until.p.2.tdl
; until.p.2.tdl

:begin :instance.

until_hour := hour_prep_word_le &
  [ STEM < "until" >,
    SYNSEM.LOCAL.CONT.KEY _before_hour_rel ].

:end :instance.


; <<>>
; >> until.c.1.tdl
; until.c.1.tdl

:begin :instance.

until2 := prep_cp_le &
  [ STEM < "until" >,
    SYNSEM.LOCAL.CONT.KEY _until_rel ].

:end :instance.


; <<>>
; >> unwilling.a.1.vm.tdl
; unwilling.a.1.vm.tdl

:begin :instance.

unwilling_a1 := reg_adj_equi_le &
  [ STEM < "unwilling" >,
    SYNSEM.LOCAL.CONT.KEY _unwilling_rel ].

:end :instance.


; <<>>
; >> unwillingly.a.1.vm.tdl
; unwillingly.a.1.vm.tdl

:begin :instance.

unwillingly_adv1 := vp_adv_word_le &
  [ STEM < "unwillingly" >,
    SYNSEM.LOCAL.CONT.KEY _unwillingly_rel ].

:end :instance.


; <<>>
; >> up.p.1.tdl
; up.p.1.tdl

:begin :instance.

up := prep_nomod_le &
  [ STEM < "up" >,
    SYNSEM.LOCAL.CONT.KEY _up_rel ].

:end :instance.


; <<>>
; >> up.to.a.1.tdl
; up.to.a.1.tdl

:begin :instance.

up_to_deg := degree_spec_mle1 &
  [ STEM < "up", "to" >,
    SYNSEM.LOCAL.CONT.KEY _up_to_rel ].

:end :instance.


; <<>>
; >> update.v.1.vm.tdl
; update.v.1.vm.tdl

:begin :instance.

update_v1 := mv_np_trans_le &
  [ STEM < "update" >,
    SYNSEM.LOCAL.CONT.KEY _update_rel ].

:end :instance.


; <<>>
; >> upon.p.1.tdl
; upon.p.1.tdl

:begin :instance.

upon := reg_prep_le &
  [ STEM < "upon" >,
    SYNSEM.LOCAL.CONT.KEY _upon_rel ].

:end :instance.


; <<>>
; >> upper.a.1.vm.tdl
; upper.a.1.vm.tdl

:begin :instance.

upper_a1 := intrans_adj_le &
  [ STEM < "upper" >,
    SYNSEM.LOCAL.CONT.KEY _upper_rel ].

:end :instance.


; <<>>
; >> upright.a.1.vm.tdl
; upright.a.1.vm.tdl

:begin :instance.

upright_a1 := intrans_adj_le &
  [ STEM < "upright" >,
    SYNSEM.LOCAL.CONT.KEY _upright_rel ].

:end :instance.


; <<>>
; >> upstairs.a.1.vm.tdl
; upstairs.a.1.vm.tdl

:begin :instance.

upstairs_adv1 := np_adv_word_le &
  [ STEM < "upstairs" >,
    SYNSEM.LOCAL.CONT.KEY _upstairs_rel ].

:end :instance.


; <<>>
; >> urge.v.1.tdl
; urge.v.1.tdl

:begin :instance.

urge1 := mv_obj_equi_le &
  [ STEM < "urge" >,
    SYNSEM.LOCAL.CONT.KEY _urge2_rel ].

:end :instance.


; <<>>
; >> urgent.a.1.vm.tdl
; urgent.a.1.vm.tdl

:begin :instance.

urgent_a1 := intrans_adj_le &
  [ STEM < "urgent" >,
    SYNSEM.LOCAL.CONT.KEY _urgent_rel ].

:end :instance.


; <<>>
; >> urgently.a.1.vm.tdl
; urgently.a.1.vm.tdl

:begin :instance.

urgently_adv1 := adv_word_le &
  [ STEM < "urgently" >,
    SYNSEM.LOCAL.CONT.KEY _urgently_rel ].

:end :instance.


; <<>>
; >> us.n.1.tdl
; us.n.1.tdl

:begin :instance.

us := pers_pro_le &
  [ STEM < "us" >,
    SYNSEM.LOCAL [ CAT.HEAD.CASE acc,
		   CONT.KEY.INST [ PNG.PN 1pl*,
				   PRONTYPE std_1pl ] ] ].
:end :instance.


; <<>>
; >> use.n.1.vm.tdl
; use.n.1.vm.tdl

:begin :instance.

use_n1 := massn_le &
  [ STEM < "use" >,
    SYNSEM.LOCAL.CONT.KEY _use_rel ].

:end :instance.


; <<>>
; >> use.n.2.vm.tdl
; use.n.2.vm.tdl

:begin :instance.

use_n2 := intr_noun_word_le &
  [ STEM < "use" >,
    SYNSEM.LOCAL.CONT.KEY _use_rel ].

:end :instance.


; <<>>
; >> use.v.1.vm.tdl
; use.v.1.vm.tdl

:begin :instance.

use_v1 := mv_np_trans_le &
  [ STEM < "use" >,
    SYNSEM.LOCAL.CONT.KEY _use_v_rel ].

:end :instance.


; <<>>
; >> used.vx.1.tdl
; used.vx.1.tdl

:begin :instance.

used_to_aux_pos := past_ought_pos_le & 
  [ STEM < "used" >,
    SYNSEM.LOCAL [ CAT.HEAD.TENSE past*,
                   CONT.KEY _used_to_rel ] ].

:end :instance.


; <<>>
; >> useful.a.1.vm.tdl
; useful.a.1.vm.tdl

:begin :instance.

useful_a1 := intrans_adj_le &
  [ STEM < "useful" >,
    SYNSEM.LOCAL.CONT.KEY _useful_rel ].

:end :instance.


; <<>>
; >> useless.a.1.vm.tdl
; useless.a.1.vm.tdl

:begin :instance.

useless_a1 := intrans_adj_le &
  [ STEM < "useless" >,
    SYNSEM.LOCAL.CONT.KEY _useless_adj_rel ].

:end :instance.


; <<>>
; >> uselessly.a.1.vm.tdl
; uselessly.a.1.vm.tdl

:begin :instance.

uselessly := adv_word_le &
  [ STEM < "uselessly" >,
    SYNSEM.LOCAL.CONT.KEY _uselessly_rel ].

:end :instance.


; <<>>
; >> usual.a.1.vm.tdl
; usual.a.1.vm.tdl

:begin :instance.

usual_a1 := intrans_adj_le &
  [ STEM < "usual" >,
    SYNSEM.LOCAL.CONT.KEY _usual_rel ].

:end :instance.


; <<>>
; >> usually.a.1.vm.tdl
; usually.a.1.vm.tdl

:begin :instance.

usually_adv1 := adv_pre_word_le &
  [ STEM < "usually" >,
    SYNSEM.LOCAL.CONT.KEY _usually_rel ].

:end :instance.


; <<>>
; >> utmost.a.1.vm.tdl
; utmost.a.1.vm.tdl

:begin :instance.

utmost_a1 := intrans_adj_le &
  [ STEM < "utmost" >,
    SYNSEM.LOCAL.CONT.KEY _utmost_rel ].

:end :instance.


; <<>>
; >> vacancy.n.1.vm.tdl
; vacancy.n.1.vm.tdl

:begin :instance.

vacancy_n1 := intr_noun_word_le &
  [ STEM < "vacancy" >,
    SYNSEM.LOCAL.CONT.KEY _vacancy_rel ].

:end :instance.


; <<>>
; >> vacant.a.1.vm.tdl
; vacant.a.1.vm.tdl

:begin :instance.

vacant_a1 := intrans_adj_le &
  [ STEM < "vacant" >,
    SYNSEM.LOCAL.CONT.KEY _vacant_rel ].

:end :instance.


; <<>>
; >> vacation.n.1.vm.tdl
; vacation.n.1.vm.tdl

:begin :instance.

vacation_n1 := intr_noun_word_le &
  [ STEM < "vacation" >,
    SYNSEM.LOCAL.CONT.KEY _vacation_rel ].

:end :instance.


; <<>>
; >> vain.a.1.vm.tdl
; vain.a.1.vm.tdl

:begin :instance.

vain_a1 := intrans_adj_le &
  [ STEM < "vain" >,
    SYNSEM.LOCAL.CONT.KEY _vain_rel ].

:end :instance.


; <<>>
; >> vegetarian.a.1.vm.tdl
; vegetarian.a.1.vm.tdl

:begin :instance.

vegetarian_a1 := intrans_adj_le &
  [ STEM < "vegetarian" >,
    SYNSEM.LOCAL.CONT.KEY _vegetarian_adj_rel ].

:end :instance.


; <<>>
; >> vegetarian.n.1.vm.tdl
; vegetarian.n.1.vm.tdl

:begin :instance.

vegetarian_n1 := intr_noun_word_le &
  [ STEM < "vegetarian" >,
    SYNSEM.LOCAL.CONT.KEY _vegetarian_rel ].

:end :instance.


; <<>>
; >> very.a.1.tdl
; very.a.1.tdl

:begin :instance.

very := degree_spec_le &
  [ STEM < "very" >,
    SYNSEM.LOCAL.CONT.KEY _very_deg_rel ].

:end :instance.


; <<>>
; >> veteran.n.1.vm.tdl
; veteran.n.1.vm.tdl

:begin :instance.

veteran_n1 := intr_noun_word_le &
  [ STEM < "veteran" >,
    SYNSEM.LOCAL.CONT.KEY _veteran_rel ].

:end :instance.


; <<>>
; >> veterans.day.n.1.tdl
; veterans.day.n.1.tdl

:begin :instance.

veterans_day := holiday_word_mle1 &
  [ STEM < "veterans", "day" >,
    SYNSEM.LOCAL.CONT.KEY.DAY 'veterans_day ].

:end :instance.


; <<>>
; >> via.p.1.tdl
; via.p.1.tdl

:begin :instance.

via := reg_prep_le &
  [ STEM < "via" >,
    SYNSEM.LOCAL.CONT.KEY _via_rel ].

:end :instance.


; <<>>
; >> vibration.n.1.vm.tdl
; vibration.n.1.vm.tdl

:begin :instance.

vibration_n1 := intr_noun_word_le &
  [ STEM < "vibration" >,
    SYNSEM.LOCAL.CONT.KEY _vibration_rel ].

:end :instance.


; <<>>
; >> video.n.1.vm.tdl
; video.n.1.vm.tdl

:begin :instance.

video_n1 := intr_noun_word_le &
  [ STEM < "video" >,
    SYNSEM.LOCAL.CONT.KEY _video_rel ].

:end :instance.


; <<>>
; >> vienna.n.1.vm.tdl
; vienna.n.1.vm.tdl

:begin :instance.

Vienna_n1 := proper_le &
  [ STEM < "vienna" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'Vienna ].

:end :instance.


; <<>>
; >> view.n.1.vm.tdl
; view.n.1.vm.tdl

:begin :instance.

view_n1 := intr_noun_word_le &
  [ STEM < "view" >,
    SYNSEM.LOCAL.CONT.KEY _view_rel ].

:end :instance.


; <<>>
; >> view.v.1.vm.tdl
; view.v.1.vm.tdl

:begin :instance.

view_v1 := mv_np_trans_le &
  [ STEM < "view" >,
    SYNSEM.LOCAL.CONT.KEY _view_v_rel ].

:end :instance.


; <<>>
; >> villa.n.1.vm.tdl
; villa.n.1.vm.tdl

:begin :instance.

villa_n1 := intr_noun_word_le &
  [ STEM < "villa" >,
    SYNSEM.LOCAL.CONT.KEY _villa_rel ].

:end :instance.


; <<>>
; >> village.n.1.vm.tdl
; village.n.1.vm.tdl

:begin :instance.

village_n1 := intr_noun_word_le &
  [ STEM < "village" >,
    SYNSEM.LOCAL.CONT.KEY _village_rel ].

:end :instance.


; <<>>
; >> virgin.n.1.vm.tdl
; virgin.n.1.vm.tdl

:begin :instance.

virgin_n1 := intr_noun_word_le &
  [ STEM < "virgin" >,
    SYNSEM.LOCAL.CONT.KEY _virgin_rel ].

:end :instance.


; <<>>
; >> virginal.a.1.vm.tdl
; virginal.a.1.vm.tdl

:begin :instance.

virginal_a1 := intrans_adj_le &
  [ STEM < "virginal" >,
    SYNSEM.LOCAL.CONT.KEY _virginal_rel ].

:end :instance.


; <<>>
; >> virtual.a.1.vm.tdl
; virtual.a.1.vm.tdl

:begin :instance.

virtual_a1 := intrans_adj_le &
  [ STEM < "virtual" >,
    SYNSEM.LOCAL.CONT.KEY _virtual_rel ].

:end :instance.


; <<>>
; >> virtually.a.1.vm.tdl
; virtually.a.1.vm.tdl

:begin :instance.

virtually_adv1 := adv_pre_word_le &
  [ STEM < "virtually" >,
    SYNSEM.LOCAL.CONT.KEY _virtually_rel ].

:end :instance.


; <<>>
; >> visit.n.1.vm.tdl
; visit.n.1.vm.tdl

:begin :instance.

visit_n1 := intr_noun_word_le &
  [ STEM < "visit" >,
    SYNSEM.LOCAL.CONT.KEY _visit_n_rel ].

:end :instance.


; <<>>
; >> visit.v.1.vm.tdl
; visit.v.1.vm.tdl

:begin :instance.

visit_v1 := mv_np_trans_le &
  [ STEM < "visit" >,
    SYNSEM.LOCAL.CONT.KEY _visit_v_rel ].

:end :instance.


; <<>>
; >> visitor.n.1.vm.tdl
; visitor.n.1.vm.tdl

:begin :instance.

visitor_n1 := intr_noun_word_le &
  [ STEM < "visitor" >,
    SYNSEM.LOCAL.CONT.KEY _visitor_rel ].

:end :instance.


; <<>>
; >> vivid.a.1.vm.tdl
; vivid.a.1.vm.tdl

:begin :instance.

vivid_a1 := intrans_adj_le &
  [ STEM < "vivid" >,
    SYNSEM.LOCAL.CONT.KEY _vivid_rel ].

:end :instance.


; <<>>
; >> vividly.a.1.vm.tdl
; vividly.a.1.vm.tdl

:begin :instance.

vividly := adv_word_le &
  [ STEM < "vividly" >,
    SYNSEM.LOCAL.CONT.KEY _vividly_rel ].

:end :instance.


; <<>>
; >> voice.n.1.vm.tdl
; voice.n.1.vm.tdl

:begin :instance.

voice_n1 := intr_noun_word_le &
  [ STEM < "voice" >,
    SYNSEM.LOCAL.CONT.KEY _voice_rel ].

:end :instance.


; <<>>
; >> vote.for.v.1.vm.tdl
; vote.for.v.1.vm.tdl

:begin :instance.

vote_for_v1 := mv_empty_prep_intrans_le &
  [ STEM < "vote" >,
    SYNSEM.LOCAL.CONT [ KEY _vote_for_rel,
			COMPKEY _for_rel ] ].

:end :instance.


; <<>>
; >> vote.n.1.vm.tdl
; vote.n.1.vm.tdl

:begin :instance.

vote_n1 := intr_noun_word_le &
  [ STEM < "vote" >,
    SYNSEM.LOCAL.CONT.KEY _vote_n_rel ].

:end :instance.


; <<>>
; >> vote.v.1.vm.tdl
; vote.v.1.vm.tdl

:begin :instance.

vote_v1 := mv_unerg_le &
  [ STEM < "vote" >,
    SYNSEM.LOCAL.CONT.KEY _vote_v_rel ].

:end :instance.


; <<>>
; >> vowel.n.1.vm.tdl
; vowel.n.1.vm.tdl

:begin :instance.

vowel_n1 := intr_noun_word_le &
  [ STEM < "vowel" >,
    SYNSEM.LOCAL.CONT.KEY _vowel_rel ].

:end :instance.


; <<>>
; >> voyage.n.1.vm.tdl
; voyage.n.1.vm.tdl

:begin :instance.

voyage_n1 := intr_noun_word_le &
  [ STEM < "voyage" >,
    SYNSEM.LOCAL.CONT.KEY _voyage_rel ].

:end :instance.


; <<>>
; >> wait.for.v.1.vm.tdl
; wait.for.v.1.vm.tdl

:begin :instance.

wait_for_v1 := mv_empty_prep_intrans_le &
  [ STEM < "wait" >,
    SYNSEM.LOCAL.CONT [ KEY _wait_for_rel,
			COMPKEY _for_rel ] ].

:end :instance.


; <<>>
; >> wait.v.1.vm.tdl
; wait.v.1.vm.tdl

:begin :instance.

wait_v1 := mv_unerg_le &
  [ STEM < "wait" >,
    SYNSEM.LOCAL.CONT.KEY _wait_v_rel ].

:end :instance.


; <<>>
; >> waiter.n.1.vm.tdl
; waiter.n.1.vm.tdl

:begin :instance.

waiter_n1 := intr_noun_word_le &
  [ STEM < "waiter" >,
    SYNSEM.LOCAL.CONT.KEY _waiter_rel ].

:end :instance.


; <<>>
; >> walk.v.1.tdl
; walk.v.1.tdl

:begin :instance.

walk1 := mv_unerg_le &
  [ STEM < "walk" >,
    SYNSEM.LOCAL.CONT.KEY _walk_rel ].

:end :instance.


; <<>>
; >> want.v.1.tdl
; want.v.1.tdl

:begin :instance.

want_v1 := mv_np_trans_le &
  [ STEM < "want" >,
    SYNSEM.LOCAL.CONT.KEY _want_rel ].

:end :instance.


; <<>>
; >> want.v.2.tdl
; want.v.2.tdl

:begin :instance.

want_v2 := mv_subj_equi_le &
  [ STEM < "want" >,
    SYNSEM.LOCAL.CONT.KEY _want2_rel ].

:end :instance.


; <<>>
; >> want.v.3.tdl
; want.v.3.tdl

:begin :instance.

want_v3 := mv_sor_non_trans_le &
  [ STEM < "want" >,
    SYNSEM.LOCAL.CONT.KEY _want2_rel ].

:end :instance.


; <<>>
; >> warm.a.1.vm.tdl
; warm.a.1.vm.tdl

:begin :instance.

warm_a1 := intrans_adj_le &
  [ STEM < "warm" >,
    SYNSEM.LOCAL.CONT.KEY _warm_rel ].

:end :instance.


; <<>>
; >> warm.up.v.1.vm.tdl
; warm.up.v.1.vm.tdl

:begin :instance.

warm_up_v1 := mv_particle_np_le &
  [ STEM < "warm" >,
    SYNSEM.LOCAL.CONT [ KEY _warm_up_rel,
			COMPKEY _up_rel ] ].

:end :instance.


; <<>>
; >> warmly.a.1.vm.tdl
; warmly.a.1.vm.tdl

:begin :instance.

warmly_adv1 := vp_adv_word_le &
  [ STEM < "warmly" >,
    SYNSEM.LOCAL.CONT.KEY _warmly_rel ].

:end :instance.


; <<>>
; >> was.vx.1.tdl
; was.vx.1.tdl

:begin :instance.

be_c_was := be_c_was_le &
  [ STEM < "was" > ].

:end :instance.


; <<>>
; >> was.vx.2.tdl
; was.vx.2.tdl

:begin :instance.

be_id_was := be_id_was_le &
  [ STEM < "was" > ].

:end :instance.


; <<>>
; >> was.vx.3.tdl
; was.vx.3.tdl

:begin :instance.

be_th_cop_was := be_th_cop_was_le &
  [ STEM < "was" > ].

:end :instance.


; <<>>
; >> washington.n.1.vm.tdl
; washington.n.1.vm.tdl

:begin :instance.

Washington_n1 := proper_le &
  [ STEM < "washington" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'Washington ].

:end :instance.


; <<>>
; >> wasnt.vx.1.tdl
; wasnt.vx.1.tdl

:begin :instance.

be_id_was_neg := be_id_was_neg_le &
  [ STEM < "wasn", "t" > ].

:end :instance.


; <<>>
; >> wasnt.vx.3.tdl
; wasnt.vx.3.tdl

:begin :instance.

be_th_cop_was_neg := be_th_cop_was_neg_le &
  [ STEM < "wasn", "t" > ].

:end :instance.


; <<>>
; >> wasnt.vx.2.tdl
; wasnt.vx.2.tdl

:begin :instance.

be_c_was_neg := be_c_was_neg_le &
  [ STEM < "wasn", "t" > ].

:end :instance.


; <<>>
; >> waste.n.1.tdl
; waste.n.1.tdl

:begin :instance.

waste_n1 := massn_le &
  [ STEM < "waste" >,
    SYNSEM.LOCAL.CONT.KEY _waste_n_rel ].

:end :instance.


; <<>>
; >> waste.v.1.vm.tdl
; waste.v.1.vm.tdl

:begin :instance.

waste_v1 := mv_np_trans_le &
  [ STEM < "waste" >,
    SYNSEM.LOCAL.CONT.KEY _waste_rel ].

:end :instance.


; <<>>
; >> watch.v.1.tdl
; watch.v.1.tdl

:begin :instance.

watch_v1 := mv_np_trans_le &
  [ STEM < "watch" >,
    SYNSEM.LOCAL.CONT.KEY _watch_rel ].

:end :instance.


; <<>>
; >> watch.v.2.tdl
; watch.v.2.tdl

:begin :instance.

watch_v2 := mv_sorb_le &
  [ STEM < "watch" >,
    SYNSEM.LOCAL.CONT.KEY _watch2_rel ].

:end :instance.


; <<>>
; >> way.n.1.vm.tdl
; way.n.1.vm.tdl

:begin :instance.

way_n1 := noun_vpcomp_word_le &
  [ STEM < "way" >,
    SYNSEM.LOCAL.CONT.KEY _way_rel ].

:end :instance.


; <<>>
; >> we.n.1.tdl
; we.n.1.tdl

:begin :instance.

we := pers_pro_le &
  [ STEM < "we" >,
    SYNSEM.LOCAL [ CAT.HEAD.CASE nom,
		   CONT.KEY.INST [ PNG.PN 1pl*,
				   PRONTYPE std_1pl ] ] ].
:end :instance.


; <<>>
; >> weak.a.1.vm.tdl
; weak.a.1.vm.tdl

:begin :instance.

weak_a1 := intrans_adj_le &
  [ STEM < "weak" >,
    SYNSEM.LOCAL.CONT.KEY _weak_rel ].

:end :instance.


; <<>>
; >> weather.n.1.vm.tdl
; weather.n.1.vm.tdl

:begin :instance.

weather_n1 := massn_le &
  [ STEM < "weather" >,
    SYNSEM.LOCAL.CONT.KEY _weather_rel ].

:end :instance.


; <<>>
; >> wedding.n.1.vm.tdl
; wedding.n.1.vm.tdl

:begin :instance.

wedding_n1 := intr_noun_word_le &
  [ STEM < "wedding" >,
    SYNSEM.LOCAL.CONT.KEY _wedding_rel ].

:end :instance.


; <<>>
; >> wednesday.n.1.tdl
; wednesday.n.1.tdl

:begin :instance.

wednesday1 := day_of_week_le &
  [ STEM < "wednesday" >,
    SYNSEM.LOCAL.CONT.KEY.DAY 'wed ].

:end :instance.


; <<>>
; >> wednesday.n.2.tdl
; wednesday.n.2.tdl

:begin :instance.

wednesday_cn := intr_temp_noun_le &
  [ STEM < "wednesday" >,
    SYNSEM.LOCAL.CONT.KEY dofw_rel & [ DAY 'wednesday ] ].

:end :instance.


; <<>>
; >> week.n.1.tdl
; week.n.1.tdl

:begin :instance.

week1 := temp_noun_ppcomp_word_le &
  [ STEM < "week" >,
    SYNSEM.LOCAL.CONT.KEY _week_rel ].

:end :instance.


; <<>>
; >> week.n.2.tdl
; week.n.2.tdl

:begin :instance.

week_n2 := temp_noun_ppcomp_nomod_word_le &
  [ STEM < "week" >,
    SYNSEM.LOCAL.CONT.KEY _week_rel ].

:end :instance.


; <<>>
; >> weekday.n.1.vm.tdl
; weekday.n.1.vm.tdl

:begin :instance.

weekday_n1 := intr_temp_noun_le &
  [ STEM < "weekday" >,
    SYNSEM.LOCAL.CONT.KEY _weekday_rel ].

:end :instance.


; <<>>
; >> weekday.n.2.vm.tdl
; weekday.n.2.vm.tdl

:begin :instance.

weekday_n2 := intr_temp_noun_nomod_le &
  [ STEM < "weekday" >,
    SYNSEM.LOCAL.CONT.KEY _weekday_rel ].

:end :instance.


; <<>>
; >> weekend.n.1.vm.tdl
; weekend.n.1.vm.tdl

:begin :instance.

weekend_n1 := intr_temp_noun_le &
  [ STEM < "weekend" >,
    SYNSEM.LOCAL.CONT.KEY _weekend_rel ].

:end :instance.


; <<>>
; >> weekend.n.2.vm.tdl
; weekend.n.2.vm.tdl

:begin :instance.

weekend_n2 := intr_temp_noun_nomod_le &
  [ STEM < "weekend" >,
    SYNSEM.LOCAL.CONT.KEY _weekend_rel ].

:end :instance.


; <<>>
; >> weekly.a.1.vm.tdl
; weekly.a.1.vm.tdl

:begin :instance.

weekly_adv1 := vp_adv_post_word_le &
  [ STEM < "weekly" >,
    SYNSEM.LOCAL.CONT.KEY _weekly_adv_rel ].

:end :instance.


; <<>>
; >> weekly.a.2.vm.tdl
; weekly.a.2.vm.tdl

:begin :instance.

weekly_a1 := intrans_adj_le &
  [ STEM < "weekly" >,
    SYNSEM.LOCAL.CONT.KEY _weekly_rel ].

:end :instance.


; <<>>
; >> weimar.n.1.vm.tdl
; weimar.n.1.vm.tdl

:begin :instance.

Weimar_n1 := proper_le &
  [ STEM < "weimar" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'Weimar ].

:end :instance.


; <<>>
; >> welcome.a.1.vm.tdl
; welcome.a.1.vm.tdl

:begin :instance.

welcome_a1 := intrans_adj_le &
  [ STEM < "welcome" >,
    SYNSEM.LOCAL.CONT.KEY _welcome_adj_rel ].

:end :instance.


; <<>>
; >> welcome.v.1.vm.tdl
; welcome.v.1.vm.tdl

:begin :instance.

welcome_v1 := mv_np_trans_le &
  [ STEM < "welcome" >,
    SYNSEM.LOCAL.CONT.KEY _welcome_rel ].

:end :instance.


; <<>>
; >> well.a.1.vm.tdl
; well.a.1.vm.tdl

:begin :instance.

well := vp_adv_post_word_le &
  [ STEM < "well" >,
    SYNSEM.LOCAL.CONT.KEY _well_rel ].

:end :instance.


; <<>>
; >> well.disc.c.1.vm.tdl
; well.disc.c.1.vm.tdl

:begin :instance.

well_root := disc_adv_le &
  [ STEM < "well" >,
    SYNSEM.LOCAL.CONT.KEY.EXCL 'well ].

:end :instance.


; <<>>
; >> were.vx.1.tdl
; were.vx.1.tdl

:begin :instance.

be_c_were := be_c_were_le &
  [ STEM < "were" > ].

:end :instance.


; <<>>
; >> were.vx.2.tdl
; were.vx.2.tdl

:begin :instance.

be_id_were := be_id_were_le &
  [ STEM < "were" > ].

:end :instance.


; <<>>
; >> were.vx.3.tdl
; were.vx.3.tdl

:begin :instance.

be_th_cop_were := be_th_cop_were_le &
  [ STEM < "were" > ].

:end :instance.


; <<>>
; >> werent.vx.1.tdl
; werent.vx.1.tdl

:begin :instance.

be_c_were_neg := be_c_were_neg_le &
  [ STEM < "weren", "t" > ].

:end :instance.


; <<>>
; >> werent.vx.2.tdl
; werent.vx.2.tdl

:begin :instance.

be_id_were_neg := be_id_were_neg_le &
  [ STEM < "weren", "t" > ].

:end :instance.


; <<>>
; >> werent.vx.3.tdl
; werent.vx.3.tdl

:begin :instance.

be_th_cop_were_neg := be_th_cop_were_neg_le &
  [ STEM < "weren", "t" > ].

:end :instance.


; <<>>
; >> what.about.c.1.vm.tdl
; what.about.c.1.vm.tdl

:begin :instance.

what_about := how_about_mle1 &
  [ STEM < "what", "about" >,
    SYNSEM.LOCAL.CONT.MESSAGE _whatabout_rel ].

:end :instance.


; <<>>
; >> what.n.1.tdl
; what.n.1.tdl

:begin :instance.

what1 := wh_pro_word_le &
  [ STEM < "what" >,
    SYNSEM [ LOCAL.CONT.KEY nonperson_rel ] ].

:end :instance.


; <<>>
; >> what.c.2.tdl
; what.c.2.tdl

:begin :instance.

what_det := det_wh_le &
  [ STEM < "what" >,
    SYNSEM [ LOCAL.CONT.KEY _which_rel & [ HANDEL #hand ],
	     NON-LOCAL.QUE <! #hand !> ] ].

:end :instance.


; <<>>
; >> whatever.n.1.tdl
; whatever.n.1.tdl

:begin :instance.

whatever1 := wh_pro_word_le &
  [ STEM < "whatever" >,
    SYNSEM [ LOCAL.CONT.KEY _whatever_rel ] ].

:end :instance.


; <<>>
; >> when.a.1.tdl
; when.a.1.tdl

:begin :instance.

when1 := wh_adverb_word_le &
  [ STEM < "when" >,
    SYNSEM.LOCAL.CONT.MODCONT.LISZT <! temp_loc_rel, *top*, 
				     temp_rel !> ].

:end :instance.


; <<>>
; >> when.a.2.tdl
; when.a.2.tdl

:begin :instance.

when2 := rel_adverb_word_le &
  [ STEM < "when" >,
    SYNSEM.LOCAL.CONT.MODCONT.LISZT <! temp_loc_rel, *top*, 
				     temp_rel !> ].

:end :instance.


; <<>>
; >> when.p.1.tdl
; when.p.1.tdl

:begin :instance.

when_prep := prep_cp_le &
  [ STEM < "when" >,
    SYNSEM.LOCAL.CONT.KEY _when_rel ].

:end :instance.


; <<>>
; >> whenever.p.1.tdl
; whenever.p.1.tdl

:begin :instance.

whenever_prep := prep_cp_le &
  [ STEM < "whenever" >,
    SYNSEM.LOCAL.CONT.KEY _whenever_rel ].

:end :instance.


; <<>>
; >> where.a.1.tdl
; where.a.1.tdl

:begin :instance.

where1 := wh_adverb_word_le &
  [ STEM < "where" >,
    SYNSEM.LOCAL.CONT.MODCONT.LISZT <! loc_rel, *top*, 
				     place_rel !> ].

:end :instance.


; <<>>
; >> where.a.2.tdl
; where.a.2.tdl

:begin :instance.

where2 := rel_adverb_word_le &
  [ STEM < "where" >,
    SYNSEM.LOCAL.CONT.MODCONT.LISZT <! loc_rel, *top*, 
				     place_rel !> ].

:end :instance.


; <<>>
; where.p.tdl

:begin :instance.

where := prep_cp_le &
  [ STEM < "where" >,
    SYNSEM.LOCAL.CONT.KEY _where_rel ].

:end :instance.


; <<>>
; >> whereas.c.1.tdl
; whereas.c.1.tdl

:begin :instance.

whereas := subconj_le &
  [ STEM < "whereas" >,
    SYNSEM.LOCAL.CONT.KEY _whereas_rel ].

:end :instance.


; <<>>
; >> whereby.c.1.tdl
; whereby.c.1.tdl

:begin :instance.

whereby := subconj_le &
  [ STEM < "whereby" >,
    SYNSEM.LOCAL.CONT.KEY _whereby_rel ].

:end :instance.


; <<>>
; >> wherever.p.1.tdl
; whenever.p.1.tdl

:begin :instance.

wherever_prep := prep_cp_le &
  [ STEM < "wherever" >,
    SYNSEM.LOCAL.CONT.KEY _wherever_rel ].

:end :instance.


; <<>>
; >> whether.c.1.tdl
; whether.c.1.tdl

:begin :instance.

whether_c_fin := whether_c_fin_le &
  [ STEM < "whether" > ].

:end :instance.


; <<>>
; >> whether.c.2.tdl
; whether.c.2.tdl

:begin :instance.

whether_c_inf := whether_c_inf_le &
  [ STEM < "whether" > ].

:end :instance.


; <<>>
; >> which.c.1.tdl
; which.c.1.tdl

:begin :instance.

which1 := pdet_unsp_le &
  [ STEM < "which" >,
    SYNSEM [ LOCAL.CONT.KEY _which_rel & [ HANDEL #hand ],
	     NON-LOCAL.QUE <! #hand !> ] ].

:end :instance.


; <<>>
; >> which.n.1.tdl
; which.n.1.tdl

:begin :instance.

which_r := rel_pro_word_le &
  [ STEM < "which" >,
    SYNSEM [ LOCAL.CONT.KEY nonperson_rel ] ].

:end :instance.


; <<>>
; >> while.n.1.vm.tdl
; while.n.1.vm.tdl

:begin :instance.

while_n1 := intr_noun_word_le &
  [ STEM < "while" >,
    SYNSEM.LOCAL.CONT.KEY _while_n_rel ].

:end :instance.


; <<>>
; >> while.p.1.tdl
; while.p.1.tdl

:begin :instance.

while := prep_cp_le &
  [ STEM < "while" >,
    SYNSEM.LOCAL.CONT.KEY _while_rel ].

:end :instance.


; <<>>
; >> whit.monday.n.1.tdl
; whit.monday.n.1.tdl

:begin :instance.

whit_monday := holiday_word_mle1 &
  [ STEM < "whit", "monday" >,
    SYNSEM.LOCAL.CONT.KEY.DAY 'whit_monday ].

:end :instance.


; <<>>
; >> whit.week.n.1.tdl
; whit.week.n.1.tdl

:begin :instance.

whit_week := holiday_word_mle1 &
  [ STEM < "whit", "week" >,
    SYNSEM.LOCAL.CONT.KEY.DAY 'whit_week ].

:end :instance.


; <<>>
; >> white.a.1.vm.tdl
; white.a.1.vm.tdl

:begin :instance.

white_a1 := intrans_adj_le &
  [ STEM < "white" >,
    SYNSEM.LOCAL.CONT.KEY _white_rel ].

:end :instance.


; <<>>
; >> whitsun.n.1.tdl
; whitsun.n.1.tdl

:begin :instance.

whitsun := season_word_le &
  [ STEM < "whitsun" >,
    SYNSEM.LOCAL.CONT.KEY.SEASON 'whitsun ].

:end :instance.


; <<>>
; >> whitsuntide.n.1.tdl
; whitsuntide.n.1.tdl

:begin :instance.

whitsuntide := season_word_le &
  [ STEM < "whitsuntide" >,
    SYNSEM.LOCAL.CONT.KEY.SEASON 'whitsuntide ].

:end :instance.


; <<>>
; >> whitsun.week.n.1.tdl
; whitsun.week.n.1.tdl

:begin :instance.

whitsun_week := holiday_word_mle1 &
  [ STEM < "whitsun", "week" >,
    SYNSEM.LOCAL.CONT.KEY.DAY 'whitsun_week ].

:end :instance.


; <<>>
; >> who.n.1.tdl
; who.n.1.tdl

:begin :instance.

who1 := wh_pro_word_le &
  [ STEM < "who" >,
    SYNSEM [ LOCAL.CONT.KEY person_rel ] ].

:end :instance.


; <<>>
; >> who.n.2.tdl
; who.n.2.tdl

:begin :instance.

who2 := rel_pro_word_le &
  [ STEM < "who" >,
    SYNSEM [ LOCAL.CONT.KEY person_rel ] ].

:end :instance.


; <<>>
; >> whole.a.1.vm.tdl
; whole.a.1.vm.tdl

:begin :instance.

whole_a1 := intrans_adj_le &
  [ STEM < "whole" >,
    SYNSEM.LOCAL.CONT.KEY _whole_rel ].

:end :instance.


; <<>>
; >> wholly.a.1.tdl
; wholly.a.1.tdl

:begin :instance.

wholly_deg := degree_spec_le &
  [ STEM < "wholly" >,
    SYNSEM.LOCAL.CONT.KEY _wholly_deg_rel ].

:end :instance.


; <<>>
; >> whom.n.1.tdl
; whom.n.1.tdl

:begin :instance.

whom1 := wh_pro_word_le &
  [ STEM < "whom" >,
    SYNSEM [ LOCAL [ CAT.HEAD.CASE acc,
		     CONT.KEY person_rel ] ] ].
:end :instance.


; <<>>
; >> whom.n.2.tdl
; whom.n.2.tdl

:begin :instance.

whom2 := rel_pro_word_le &
  [ STEM < "whom" >,
    SYNSEM [ LOCAL [ CAT.HEAD.CASE acc,
		     CONT.KEY person_rel ] ] ].

:end :instance.


; <<>>
; >> whose.n.1.tdl
; whose.n.1.tdl

:begin :instance.

whose_1 := wh_poss_le &
  [ STEM < "whose" > ].

:end :instance.


; <<>>
; >> whose.n.1.tdl
; whose.n.1.tdl

:begin :instance.

whose_2 := rel_poss_le &
  [ STEM < "whose" > ].

:end :instance.


; <<>>
; >> why.a.1.tdl
; why.a.1.tdl

:begin :instance.

why1 := wh_adverb_word_le &
  [ STEM < "why" >,
    SYNSEM.LOCAL.CONT.MODCONT.LISZT <! _for_rel, *top*, 
				     reason_rel !> ].

:end :instance.


; <<>>
; >> why.a.2.tdl
; why.a.2.tdl

:begin :instance.

why2 := rel_adverb_word_le &
  [ STEM < "why" >,
    SYNSEM.LOCAL.CONT.MODCONT.LISZT <! _for_rel, *top*, 
				     reason_rel !> ].

:end :instance.


; <<>>
; >> wicked.a.1.vm.tdl
; wicked.a.1.vm.tdl

:begin :instance.

wicked_a1 := intrans_adj_le &
  [ STEM < "wicked" >,
    SYNSEM.LOCAL.CONT.KEY _wicked_rel ].

:end :instance.


; <<>>
; >> wiesbaden.n.1.vm.tdl
; wiesbaden.n.1.vm.tdl

:begin :instance.

Wiesbaden_n1 := proper_le &
  [ STEM < "wiesbaden" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'Wiesbaden ].

:end :instance.


; <<>>
; >> wife.n.1.vm.tdl
; wife.n.1.vm.tdl

:begin :instance.

wife_n1 := intr_noun_word_le &
  [ STEM < "wife" >,
    SYNSEM.LOCAL.CONT.KEY _wife_rel ].

:end :instance.


; <<>>
; >> wild.a.1.vm.tdl
; wild.a.1.vm.tdl

:begin :instance.

wild_a1 := intrans_adj_le &
  [ STEM < "wild" >,
    SYNSEM.LOCAL.CONT.KEY _wild_rel ].

:end :instance.


; <<>>
; >> wildly.a.1.vm.tdl
; wildly.a.1.vm.tdl

:begin :instance.

wildly_adv1 := adv_word_le &
  [ STEM < "wildly" >,
    SYNSEM.LOCAL.CONT.KEY _wildly_rel ].

:end :instance.


; <<>>
; >> will.vx.1.tdl
; will.vx.1.tdl

:begin :instance.

will_aux_pos := will_aux_pos_le &
  [ STEM < "will" > ].

:end :instance.


; <<>>
; >> will.cx.vx.1.tdl
; will.cx.vx.1.tdl

:begin :instance.

will_aux_pos_cx := will_aux_pos_le &
  [ STEM < "ll" > ].

:end :instance.


; <<>>
; >> willien.n.1.vm.tdl
; willien.n.1.vm.tdl

:begin :instance.

Willien_n1 := proper_le &
  [ STEM < "willien" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'Willien ].

:end :instance.


; <<>>
; >> willing.a.1.vm.tdl
; willing.a.1.vm.tdl

:begin :instance.

willing_a1 := reg_adj_equi_le &
  [ STEM < "willing" >,
    SYNSEM.LOCAL.CONT.KEY _willing_rel ].

:end :instance.


; <<>>
; >> willingly.a.1.vm.tdl
; willingly.a.1.vm.tdl

:begin :instance.

willingly_adv1 := vp_adv_word_le &
  [ STEM < "willingly" >,
    SYNSEM.LOCAL.CONT.KEY _willingly_rel ].

:end :instance.


; <<>>
; >> wilson.n.1.tdl
; wilson.n.1.tdl

:begin :instance.

wilson := proper_le &
  [ STEM < "wilson" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'wilson ].

:end :instance.


; <<>>
; >> wine.n.1.vm.tdl
; wine.n.1.vm.tdl

:begin :instance.

wine_n1 := massn_le &
  [ STEM < "wine" >,
    SYNSEM.LOCAL.CONT.KEY _wine_rel ].

:end :instance.


; <<>>
; >> winter.n.1.tdl
; winter.n.1.tdl

:begin :instance.

winter_season := season_word_le &
  [ STEM < "winter" >,
    SYNSEM.LOCAL.CONT.KEY _winter_s_rel ].

:end :instance.


; <<>>
; >> winter.n.1.vm.tdl
; winter.n.1.vm.tdl

:begin :instance.

winter_n1 := intr_temp_noun_le &
  [ STEM < "winter" >,
    SYNSEM.LOCAL.CONT.KEY season_rel & [ SEASON 'winter ] ].

:end :instance.


; <<>>
; >> winter.n.2.vm.tdl
; winter.n.2.vm.tdl

:begin :instance.

winter_n2 := intr_temp_noun_nomod_le &
  [ STEM < "winter" >,
    SYNSEM.LOCAL.CONT.KEY season_rel & [ SEASON 'winter ] ].

:end :instance.


; <<>>
; >> wise.a.1.vm.tdl
; wise.a.1.vm.tdl

:begin :instance.

wise_a1 := intrans_adj_le &
  [ STEM < "wise" >,
    SYNSEM.LOCAL.CONT.KEY _wise_rel ].

:end :instance.


; <<>>
; >> wish.n.1.vm.tdl
; wish.n.1.vm.tdl

:begin :instance.

wish_n1 := intr_noun_word_le &
  [ STEM < "wish" >,
    SYNSEM.LOCAL.CONT.KEY _wish_rel ].

:end :instance.


; <<>>
; >> wish.v.1.vm.tdl
; wish.v.1.vm.tdl

:begin :instance.

wish_v1 := mv_ditrans_only_le &
  [ STEM < "wish" >,
    SYNSEM.LOCAL.CONT.KEY _wish_v_rel ].

:end :instance.


; <<>>
; >> wish.v.2.vm.tdl
; wish.v.2.vm.tdl

:begin :instance.

wish_v2 := mv_subj_equi_le &
  [ STEM < "wish" >,
    SYNSEM.LOCAL.CONT.KEY _wish_v2_rel ].

:end :instance.


; <<>>
; >> wish.v.3.vm.tdl
; wish.v.3.vm.tdl

:begin :instance.

wish_v3 := mv_sor_non_trans_le &
  [ STEM < "wish" >,
    SYNSEM.LOCAL.CONT.KEY _wish_v2_rel ].

:end :instance.


; <<>>
; >> wish.v.4.vm.tdl
; wish.v.4.vm.tdl

:begin :instance.

wish_v4 := mv_unerg_le &
  [ STEM < "wish" >,
    SYNSEM.LOCAL.CONT.KEY _wish_v_rel ].

:end :instance.


; <<>>
; >> with.p.1.tdl
; with.p.1.tdl

:begin :instance.

with_p := prep_le &
  [ STEM < "with" >,
    SYNSEM.LOCAL.CONT.KEY _with_rel ].

:end :instance.


; <<>>
; >> within.p.1.tdl
; within.p.1.tdl

:begin :instance.

within := prep_le &
  [ STEM < "within" >,
    SYNSEM.LOCAL.CONT.KEY _within_rel ].

:end :instance.


; <<>>
; >> without.p.1.tdl
; without.p.1.tdl

:begin :instance.

without := prep_le &
  [ STEM < "without" >,
    SYNSEM.LOCAL.CONT.KEY _without_rel ].

:end :instance.


; <<>>
; >> woellnatz.n.1.vm.tdl
; woellnatz.n.1.vm.tdl

:begin :instance.

Woellnatz_n1 := proper_le &
  [ STEM < "woellnatz" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'Woellnatz ].

:end :instance.


; <<>>
; >> woman.n.1.tdl
; woman.n.1.tdl

:begin :instance.

woman1 := intr_noun_word_le &
  [ STEM < "woman" >,
    SYNSEM.LOCAL.CONT.KEY _woman_rel ].

:end :instance.


; <<>>
; >> wont.vx.1.tdl
; wont.vx.1.tdl

:begin :instance.

will_aux_neg := will_aux_neg_mle1 &
  [ STEM < "won", "t" > ].

:end :instance.


; <<>>
; >> wonder.v.1.vm.tdl
; wonder.v.1.vm.tdl

:begin :instance.

wonder_v1 := mv_cp_ques_non_trans_le &
  [ STEM < "wonder" >,
    SYNSEM.LOCAL.CONT.KEY _wonder_rel ].

:end :instance.


; <<>>
; >> wonderful.c.1.vm.tdl
; wonderful.c.1.vm.tdl

:begin :instance.

wonderful_root := disc_adv_le &
  [ STEM < "wonderful" >,
    SYNSEM.LOCAL.CONT.KEY.EXCL 'wonderful ].

:end :instance.

; <<>>
; >> wonderful.a.1.vm.tdl
; wonderful.a.1.vm.tdl

:begin :instance.

wonderful_a1 := intrans_adj_le &
  [ STEM < "wonderful" >,
    SYNSEM.LOCAL.CONT.KEY _wonderful_rel ].

:end :instance.


; <<>>
; >> wonderfully.a.1.vm.tdl
; wonderfully.a.1.vm.tdl

:begin :instance.

wonderfully := vp_adv_post_word_le &
  [ STEM < "wonderfully" >,
    SYNSEM.LOCAL.CONT.KEY _wonderfully_rel ].

:end :instance.


; <<>>
; >> word.n.1.vm.tdl
; word.n.1.vm.tdl

:begin :instance.

word_n1 := intr_noun_word_le &
  [ STEM < "word" >,
    SYNSEM.LOCAL.CONT.KEY _word_rel ].

:end :instance.


; <<>>
; >> work.n.1.vm.tdl
; work.n.1.vm.tdl

:begin :instance.

work_n1 := massn_le &
  [ STEM < "work" >,
    SYNSEM.LOCAL.CONT.KEY _work_n_rel ].

:end :instance.


; <<>>
; >> work.out.v.1.vm.tdl
; work.out.v.1.vm.tdl

:begin :instance.

work_out_v1 := mv_particle_le &
  [ STEM < "work" >,
    SYNSEM.LOCAL.CONT [ KEY _work_out_rel,
			COMPKEY _out_rel ] ].

:end :instance.


; <<>>
; >> work.v.1.vm.tdl
; work.v.1.vm.tdl

:begin :instance.

work_v1 := mv_unacc_le &
  [ STEM < "work" >,
    SYNSEM.LOCAL.CONT.KEY _work_acceptable_rel ].

:end :instance.


; <<>>
; >> work.v.2.vm.tdl
; work.v.2.vm.tdl

:begin :instance.

work_v2 := mv_unerg_le &
  [ STEM < "work" >,
    SYNSEM.LOCAL.CONT.KEY _work_v_rel ].

:end :instance.


; <<>>
; >> work.through.v.1.vm.tdl
; work.through.v.1.vm.tdl

:begin :instance.

work_through_v1 := mv_empty_prep_intrans_le &
  [ STEM < "work" >,
    SYNSEM.LOCAL.CONT [ KEY _work_through_rel,
			COMPKEY _through_rel ] ].

:end :instance.


; <<>>
; >> workday.n.1.vm.tdl
; workday.n.1.vm.tdl

:begin :instance.

workday_n1 := intr_temp_noun_le &
  [ STEM < "workday" >,
    SYNSEM.LOCAL.CONT.KEY _workday_rel ].

:end :instance.


; <<>>
; >> workday.n.2.vm.tdl
; workday.n.2.vm.tdl

:begin :instance.

workday_n2 := intr_temp_noun_nomod_le &
  [ STEM < "workday" >,
    SYNSEM.LOCAL.CONT.KEY _workday_rel ].

:end :instance.


; <<>>
; >> working.a.1.vm.tdl
; working.a.1.vm.tdl

:begin :instance.

working_a1 := intrans_adj_le &
  [ STEM < "working" >,
    SYNSEM.LOCAL.CONT.KEY _working_rel ].

:end :instance.


; <<>>
; >> workshop.n.1.vm.tdl
; workshop.n.1.vm.tdl

:begin :instance.

workshop_n1 := intr_noun_word_le &
  [ STEM < "workshop" >,
    SYNSEM.LOCAL.CONT.KEY _workshop_rel ].

:end :instance.


; <<>>
; >> world.n.1.vm.tdl
; world.n.1.vm.tdl

:begin :instance.

world_n1 := intr_noun_word_le &
  [ STEM < "world" >,
    SYNSEM.LOCAL.CONT.KEY _world_rel ].

:end :instance.


; <<>>
; >> worry.about.v.1.vm.tdl
; worry.about.v.1.vm.tdl

:begin :instance.

worry_about_v1 := mv_empty_prep_intrans_le &
  [ STEM < "worry" >,
    SYNSEM.LOCAL.CONT [ KEY _worry_about_rel,
			COMPKEY _about_rel ] ].

:end :instance.


; <<>>
; >> worry.v.2.vm.tdl
; worry.v.2.vm.tdl

:begin :instance.

worry_v2 := mv_unerg_le &
  [ STEM < "worry" >,
    SYNSEM.LOCAL.CONT.KEY _worry_about_rel ].

:end :instance.


; <<>>
; >> worse.a.1.vm.tdl
; worse.a.1.vm.tdl

:begin :instance.

worse_a1 := intrans_adj_le &
  [ STEM < "worse" >,
    SYNSEM.LOCAL.CONT.KEY _worse_rel ].

:end :instance.


; <<>>
; >> worst.a.1.vm.tdl
; worst.a.1.vm.tdl

:begin :instance.

worst_a1 := intrans_adj_le &
  [ STEM < "worst" >,
    SYNSEM.LOCAL.CONT.KEY _worst_rel ].

:end :instance.


; <<>>
; >> worthwhile.a.1.vm.tdl
; worthwhile.a.1.vm.tdl

:begin :instance.

worthwhile_a1 := intrans_adj_le &
  [ STEM < "worthwhile" >,
    SYNSEM.LOCAL.CONT.KEY _worthwhile_rel ].

:end :instance.


; <<>>
; >> would.vx.1.tdl
; would.vx.1.tdl

:begin :instance.

would_aux_pos := modal_pos_le & 
  [ STEM < "would" >,
    SYNSEM.LOCAL [ CAT.HEAD.MOOD modal_subj*,
                   CONT.KEY _would_rel ] ].

:end :instance.


; <<>>
; >> would.cx.vx.1.tdl
; would.cx.vx.1.tdl

:begin :instance.

would_aux_pos_cx := modal_pos_le & 
  [ STEM < "d" >,
    SYNSEM.LOCAL [ CAT.HEAD.MOOD modal_subj*,
                   CONT.KEY _would_rel ] ].

:end :instance.


; <<>>
; >> wouldnt.vx.1.tdl
; wouldnt.vx.1.tdl

:begin :instance.

would_aux_neg := modal_neg_mle1 &
  [ STEM < "wouldn", "t" >,
    SYNSEM.LOCAL [ CAT.HEAD.MOOD modal_subj*,
                   CONT.KEY _would_rel ] ].

:end :instance.


; <<>>
; >> wrap.up.v.1.vm.tdl
; wrap.up.v.1.vm.tdl

:begin :instance.

wrap_up_v1 := mv_particle_le &
  [ STEM < "wrap" >,
    SYNSEM.LOCAL.CONT [ KEY _wrap_up_v_rel,
			COMPKEY _up_rel ] ].

:end :instance.


; <<>>
; >> wrap.up.n.1.vm.tdl
; wrap.up.n.1.vm.tdl

:begin :instance.

wrap_up_n1 := intr_noun_word_le &
  [ STEM < "wrap-up" >,
    SYNSEM.LOCAL.CONT.KEY _wrap_up_rel ].

:end :instance.


; <<>>
; >> write.down.v.1.vm.tdl
; write.down.v.1.vm.tdl

:begin :instance.

write_down_v1 := mv_particle_np_le &
  [ STEM < "write" >,
    SYNSEM.LOCAL.CONT [ KEY _write_down_rel,
			COMPKEY _down_rel ] ].

:end :instance.


; <<>>
; >> write.in.v.1.vm.tdl
; write.in.v.1.vm.tdl

:begin :instance.

write_in_v1 := mv_particle_np_le &
  [ STEM < "write" >,
    SYNSEM.LOCAL.CONT [ KEY _write_in_rel,
			COMPKEY _in_rel ] ].

:end :instance.


; <<>>
; >> write.up.v.1.vm.tdl
; write.up.v.1.vm.tdl

:begin :instance.

write_up_v1 := mv_particle_np_le &
  [ STEM < "write" >,
    SYNSEM.LOCAL.CONT [ KEY _write_up_rel,
			COMPKEY _up_rel ] ].

:end :instance.


; <<>>
; >> write.v.1.vm.tdl
; write.v.1.vm.tdl

:begin :instance.

write_v1 := mv_np_trans_le &
  [ STEM < "write" >,
    SYNSEM.LOCAL.CONT.KEY _write_rel ].

:end :instance.


; <<>>
; >> writing.up.n.1.vm.tdl
; writing.up.n.1.vm.tdl

:begin :instance.

writing_up_n1 := intr_noun_word_le &
  [ STEM < "writing-up" >,
    SYNSEM.LOCAL.CONT.KEY _writing_up_rel ].

:end :instance.


; <<>>
; >> wrong.a.1.vm.tdl
; wrong.a.1.vm.tdl

:begin :instance.

wrong_a1 := intrans_adj_le &
  [ STEM < "wrong" >,
    SYNSEM.LOCAL.CONT.KEY _wrong_rel ].

:end :instance.


; <<>>
; >> wrongly.a.1.vm.tdl
; wrongly.a.1.vm.tdl

:begin :instance.

wrongly_adv1 := adv_word_le &
  [ STEM < "wrongly" >,
    SYNSEM.LOCAL.CONT.KEY _wrongly_rel ].

:end :instance.


; <<>>
; >> wuerzburg.n.1.vm.tdl
; wuerzburg.n.1.vm.tdl

:begin :instance.

Wuerzburg_n1 := proper_le &
  [ STEM < "wuerzburg" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'Wuerzburg ].

:end :instance.


; <<>>
; >> year.n.1.vm.tdl
; year.n.1.vm.tdl

:begin :instance.

year_n1 := intr_temp_noun_le &
  [ STEM < "year" >,
    SYNSEM.LOCAL.CONT.KEY _year_rel ].

:end :instance.


; <<>>
; >> year.n.2.vm.tdl
; year.n.2.vm.tdl

:begin :instance.

year_n2 := intr_temp_noun_nomod_le &
  [ STEM < "year" >,
    SYNSEM.LOCAL.CONT.KEY _year_rel ].

:end :instance.


; <<>>
; >> yearly.a.1.vm.tdl
; yearly.a.1.vm.tdl

:begin :instance.

yearly_adv1 := vp_adv_post_word_le &
  [ STEM < "yearly" >,
    SYNSEM.LOCAL.CONT.KEY _yearly_adv_rel ].

:end :instance.


; <<>>
; >> yearly.a.2.vm.tdl
; yearly.a.2.vm.tdl

:begin :instance.

yearly_a1 := intrans_adj_le &
  [ STEM < "yearly" >,
    SYNSEM.LOCAL.CONT.KEY _yearly_rel ].

:end :instance.


; <<>>
; >> yes.c.1.vm.tdl
; yes.c.1.vm.tdl

:begin :instance.

yes_root := disc_adv_le &
  [ STEM < "yes" >,
    SYNSEM.LOCAL.CONT.KEY.EXCL 'yes ].

:end :instance.


; <<>>
; >> yesterday.n.1.tdl
; yesterday.n.1.tdl

:begin :instance.

yesterday := day_of_week_le &
  [ STEM < "yesterday" >,
    SYNSEM.LOCAL.CONT.KEY _yesterday_rel ].

:end :instance.


; <<>>
; >> yet.a.1.vm.tdl
; yet.a.1.vm.tdl

:begin :instance.

yet_adv1 := vp_adv_post_word_le &
  [ STEM < "yet" >,
    SYNSEM.LOCAL.CONT.KEY _yet_rel ].

:end :instance.


; <<>>
; >> york.n.1.vm.tdl
; york.n.1.vm.tdl

:begin :instance.

York_n1 := proper_le &
  [ STEM < "york" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'York ].

:end :instance.


; <<>>
; >> you.are.welcome.c.1.vm.tdl
; you.are.welcome.c.1.vm.tdl
; MULTIKEY < "welcome" >

:begin :instance.

you_are_welcome_root := disc_adv_3mle3 &
  [ STEM < "you", "are", "welcome" >,
    SYNSEM.LOCAL.CONT.KEY.EXCL 'you_are_welcome ].

:end :instance.


; <<>>
; >> you.know.c.1.vm.tdl
; you.know.c.1.vm.tdl
; MULTIKEY < "know" >

:begin :instance.

you_know_root := disc_adv_mle2 &
  [ STEM < "you", "know" >,
    SYNSEM.LOCAL.CONT.KEY.EXCL 'you_know ].

:end :instance.


; <<>>
; >> you.n.1.tdl
; you.n.1.tdl

:begin :instance.

you := pers_pro_le &
  [ STEM < "you" >,
    SYNSEM.LOCAL.CONT.KEY.INST [ PNG.PN 2per,
				 PRONTYPE std_2 ] ].

:end :instance.


; <<>>
; >> your.n.1.tdl
; your.n.1.tdl

:begin :instance.

your := poss_le &
  [ STEM < "your" >,
    SYNSEM.LOCAL.CONT.ALTKEY.INST [ PNG.PN 2per,
				    PRONTYPE std_2 ] ].

:end :instance.


; <<>>
; >> yours.n.1.tdl
; yours.n.1.tdl

:begin :instance.

yours := poss_pro_le &
  [ STEM < "yours" >,
    SYNSEM.LOCAL.CONT.LISZT.LIST.FIRST.INST.PNG.PN 2per ].

:end :instance.


; <<>>
; >> yourself.n.1.tdl
; yourself.n.1.tdl

:begin :instance.

yourself := refl_pro_le &
  [ STEM < "yourself" >,
    SYNSEM.LOCAL.CONT.KEY.INST.PNG.PN 2sg* ].

:end :instance.


; <<>>
; >> yourselves.n.1.tdl
; yourselves.n.1.tdl

:begin :instance.

yourselves := refl_pro_le &
  [ STEM < "yourselves" >,
    SYNSEM.LOCAL.CONT.KEY.INST.PNG.PN 2pl* ].

:end :instance.


; <<>>
; >> zero.c.1.tdl
; zero.c.1.tdl

:begin :instance.

zero_det := det_pl_le &
  [ STEM < "zero" >,
    SYNSEM.LOCAL.CONT.KEY _no_det_rel ].

:end :instance.

; <<>>
; >> zurich.n.1.vm.tdl
; zurich.n.1.vm.tdl

:begin :instance.

Zurich_n1 := proper_le &
  [ STEM < "zurich" >,
    SYNSEM.LOCAL.CONT.KEY.NAMED 'Zurich ].

:end :instance.


; <<>>
; >> first.n.1.vm.tdl
; first.n.1.vm.tdl

:begin :instance.

first := bare_unspecified_ord_le & 
	 [ STEM < "first" >,
	   SYNSEM.LOCAL [ CAT.HEAD intadj1,
			  CONT.--STEMLISZT <! const_rel & [ CONST_VALUE 1 ] !> ] ].


:end :instance.

; <<>>
; >> second.n.1.vm.tdl
; second.n.1.vm.tdl

:begin :instance.

second := bare_unspecified_ord_le & 
	 [ STEM < "second" >,
	   SYNSEM.LOCAL [ CAT.HEAD intadj1,
			  CONT.--STEMLISZT <! const_rel & [ CONST_VALUE 2 ] !> ] ].


:end :instance.

; <<>>
; >> twelfth.n.1.vm.tdl
; twelfth.n.1.vm.tdl

:begin :instance.

twelfth := bare_unspecified_ord_le &
	 [ STEM < "twelfth" >,
	   SYNSEM.LOCAL [ CAT.HEAD intadj2,
			  CONT.--STEMLISZT <! const_rel & [ CONST_VALUE 12 ] !> ] ].


:end :instance.
; <<>>
; >> twentieth.n.1.vm.tdl
; twentieth.n.1.vm.tdl

:begin :instance.

twentieth := bare_unspecified_ord_le &
	 [ STEM < "twentieth" >,
	   SYNSEM.LOCAL [ CAT.HEAD intadj2,
			  CONT.--STEMLISZT <! const_rel & [ CONST_VALUE 20 ] !> ] ].



:end :instance.
; <<>>
; >> hundredth.n.1.vm.tdl
; hundredth.n.1.vm.tdl

:begin :instance.

hundredth := bare_specified_ord_le &
  [ STEM < "hundredth" >,
   SYNSEM.LOCAL [ CAT [ HEAD intadj3,
			VALENCE.SPR.LOCAL.CAT.HEAD intadj3- ],
		  CONT.--STEMLISZT <! relation,
				    const_rel & [ CONST_VALUE 100 ] !> ] ].

:end :instance.

; <<>>
; >> thousandth.n.1.vm.tdl
; thousandth.n.1.vm.tdl

:begin :instance.

thousandth := bare_specified_ord_le &
  [ STEM < "thousandth" >,
   SYNSEM.LOCAL [ CAT [ HEAD intadj6,
			VALENCE.SPR.LOCAL.CAT.HEAD intadj3- ],
		  CONT.--STEMLISZT <! relation,
				      const_rel & [ CONST_VALUE 1000 ] !> ] ].
:end :instance.

; <<>>
