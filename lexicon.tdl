
1000s_n1 := n_plur_xmod_le &
 [ STEM < "1000s" >,
   SYNSEM [ LKEYS.KEYREL.CARG "1000",
            PHON.ONSET con ] ].

100s_n1 := n_plur_xmod_le &
 [ STEM < "100s" >,
   SYNSEM [ LKEYS.KEYREL.CARG "100",
            PHON.ONSET con ] ].

100s_n2 := n_plur_ppcomp_card_le &
 [ STEM < "100s" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.CARG "100" ],
            PHON.ONSET con ] ].

2001_a_space_odyssey_n1 := n_proper_le &
 [ STEM < "2001", "a", "space", "odyssey" >,
   SYNSEM [ LKEYS.KEYREL.CARG "2001_a_space_odyssey",
            PHON.ONSET con ] ].

200s_n1 := n_plur_xmod_le &
 [ STEM < "200s" >,
   SYNSEM [ LKEYS.KEYREL.CARG "200",
            PHON.ONSET con ] ].

20s_n1 := n_plur_xmod_le &
 [ STEM < "20s" >,
   SYNSEM [ LKEYS.KEYREL.CARG "20",
            PHON.ONSET con ] ].

24_7_a1 := adj_intrans_le &
 [ STEM < "24/7" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_24/7_a_1_rel",
            PHON.ONSET con ] ].

24_7_adv := adv_int_vp_le &
 [ STEM < "24/7" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_24/7_a_1_rel",
            PHON.ONSET con ] ].

300s_n1 := n_plur_xmod_le &
 [ STEM < "300s" >,
   SYNSEM [ LKEYS.KEYREL.CARG "300",
            PHON.ONSET con ] ].

30s_n1 := n_plur_xmod_le &
 [ STEM < "30s" >,
   SYNSEM [ LKEYS.KEYREL.CARG "30",
            PHON.ONSET con ] ].

3d_adj := adj_bare_unspecified_ord_one_le &
 [ STEM < "3d" >,
   SYNSEM [ LKEYS.KEYREL.CARG "3",
            PHON.ONSET con ] ].

3d_n1 := n_proper_le &
 [ STEM < "3d" >,
   SYNSEM [ LKEYS.KEYREL.CARG "3d",
            PHON.ONSET con ] ].

400s_n1 := n_plur_xmod_le &
 [ STEM < "400s" >,
   SYNSEM [ LKEYS.KEYREL.CARG "400",
            PHON.ONSET con ] ].

40s_n1 := n_plur_xmod_le &
 [ STEM < "40s" >,
   SYNSEM [ LKEYS.KEYREL.CARG "40",
            PHON.ONSET con ] ].

49er_n1 := n_intr_le &
 [ STEM < "49er" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_49er_n_1_rel",
            PHON.ONSET con ] ].

500s_n1 := n_plur_xmod_le &
 [ STEM < "500s" >,
   SYNSEM [ LKEYS.KEYREL.CARG "500",
            PHON.ONSET con ] ].

50s_n1 := n_plur_xmod_le &
 [ STEM < "50s" >,
   SYNSEM [ LKEYS.KEYREL.CARG "50",
            PHON.ONSET con ] ].

600s_n1 := n_plur_xmod_le &
 [ STEM < "600s" >,
   SYNSEM [ LKEYS.KEYREL.CARG "600",
            PHON.ONSET con ] ].

60s_n1 := n_plur_xmod_le &
 [ STEM < "60s" >,
   SYNSEM [ LKEYS.KEYREL.CARG "60",
            PHON.ONSET con ] ].

700s_n1 := n_plur_xmod_le &
 [ STEM < "700s" >,
   SYNSEM [ LKEYS.KEYREL.CARG "700",
            PHON.ONSET con ] ].

70s_n1 := n_plur_xmod_le &
 [ STEM < "70s" >,
   SYNSEM [ LKEYS.KEYREL.CARG "70",
            PHON.ONSET con ] ].

800s_n1 := n_plur_xmod_le &
 [ STEM < "800s" >,
   SYNSEM [ LKEYS.KEYREL.CARG "800",
            PHON.ONSET voc ] ].

80s_n1 := n_plur_xmod_le &
 [ STEM < "80s" >,
   SYNSEM [ LKEYS.KEYREL.CARG "80",
            PHON.ONSET voc ] ].

900s_n1 := n_plur_xmod_le &
 [ STEM < "900s" >,
   SYNSEM [ LKEYS.KEYREL.CARG "900",
            PHON.ONSET con ] ].

90s_n1 := n_plur_xmod_le &
 [ STEM < "90s" >,
   SYNSEM [ LKEYS.KEYREL.CARG "90",
            PHON.ONSET con ] ].

911_n1 := n_proper_le &
 [ STEM < "911" >,
   SYNSEM [ LKEYS.KEYREL.CARG "911",
            PHON.ONSET con ] ].

911_n2 := n_proper_le &
 [ STEM < "9-1-1" >,
   SYNSEM [ LKEYS.KEYREL.CARG "911",
            PHON.ONSET con ] ].

94_5_kdge_radio_n1 := n_proper_le &
 [ STEM < "94.5", "KDGE", "radio" >,
   SYNSEM [ LKEYS.KEYREL.CARG "94_5_KDGE_Radio",
            PHON.ONSET con ] ].

9_11_n1 := n_proper_le &
 [ STEM < "9", "11" >,
   SYNSEM [ LKEYS.KEYREL.CARG "9_11",
            PHON.ONSET con ] ].

9_11_n2 := n_proper_le &
 [ STEM < "9-11" >,
   SYNSEM [ LKEYS.KEYREL.CARG "9_11",
            PHON.ONSET con ] ].

_u_shaped_a1 := adj_intrans_le &
 [ STEM < "_u-", "shaped" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_u+shaped_a_1_rel",
            PHON.ONSET con ] ].

a+bit_det := det_part_ms_noagr_le &
 [ STEM < "a", "bit" >,
   SYNSEM [ LKEYS.KEYREL.PRED _a+bit_q_rel,
            PHON.ONSET voc ] ].

a+bit_det_2 := det_part_ms_noagr_le &
 [ STEM < "_A", "bit" >,
   SYNSEM [ LKEYS.KEYREL.PRED _a+bit_q_rel,
            PHON.ONSET voc ] ].

a+little_det := det_part_ms_noagr_le &
 [ STEM < "a", "little" >,
   SYNSEM [ LKEYS.KEYREL.PRED _a+little_q_rel,
            PHON.ONSET voc ] ].

a+little_det_2 := det_part_ms_noagr_le &
 [ STEM < "_A", "little" >,
   SYNSEM [ LKEYS.KEYREL.PRED _a+little_q_rel,
            PHON.ONSET voc ] ].

a_bit_adv1 := adv_int_vp_post_le &
 [ STEM < "a", "bit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_a+bit_a_1_rel",
            PHON.ONSET voc ] ].

a_bit_adv2 := adv_int_vp_post_le &
 [ STEM < "_A", "bit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_a+bit_a_1_rel",
            PHON.ONSET voc ] ].

a_bit_deg := adv_degree_spec_m_le &
 [ STEM < "a", "bit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_a+bit_x_much_rel",
            PHON.ONSET voc ] ].

a_bit_deg2 := adv_degree_spec_m_le &
 [ STEM < "_A", "bit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_a+bit_x_much_rel",
            PHON.ONSET voc ] ].

a_couple_adj := several_a_few_num_le &
 [ STEM < "a", "couple" >,
   SYNSEM [ LKEYS.KEYREL.CARG "a+couple",
            PHON.ONSET voc ] ].

a_couple_det := det_part_pl_le &
 [ STEM < "a", "couple" >,
   SYNSEM [ LKEYS.ALTKEYREL.PRED "_a+couple_a_1_rel",
            PHON.ONSET voc ] ].

a_couple_det2 := det_part_pl_le &
 [ STEM < "_A", "couple" >,
   SYNSEM [ LKEYS.ALTKEYREL.PRED "_a+couple_a_1_rel",
            PHON.ONSET voc ] ].

a_det := det_sg_nomod_a_le &
 [ STEM < "a" >,
   SYNSEM [ LKEYS.KEYREL.PRED _a_q_rel,
            PHON.ONSET voc ] ].

a_det_2 := det_sg_nomod_a_le &
 [ STEM < "_a" >,
   SYNSEM [ LKEYS.KEYREL.PRED _a_q_rel,
            PHON.ONSET voc ] ].

a_few := det_part_pl_le &
 [ STEM < "a", "few" >,
   SYNSEM [ LKEYS.ALTKEYREL.PRED "_a+few_a_1_rel",
            PHON.ONSET voc ] ].

a_few_adj := several_a_few_num_le &
 [ STEM < "a", "few" >,
   SYNSEM [ LKEYS.KEYREL.CARG "a+few",
            PHON.ONSET voc ] ].

a_few_adj_2 := several_a_few_num_le &
 [ STEM < "_a", "few" >,
   SYNSEM [ LKEYS.KEYREL.CARG "a+few",
            PHON.ONSET voc ] ].

a_few_det2 := det_part_pl_le &
 [ STEM < "_A", "few" >,
   SYNSEM [ LKEYS.ALTKEYREL.PRED "_a+few_a_1_rel",
            PHON.ONSET voc ] ].

a_few_more := det_part_pl_le &
 [ STEM < "a", "few", "more" >,
   SYNSEM [ LKEYS.ALTKEYREL.PRED "_a+few+more_a_1_rel",
            PHON.ONSET voc ] ].

a_half := adv_degree_spec_v_le &
 [ STEM < "a", "half" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_a+half_x_rel",
            PHON.ONSET voc ] ].

a_half_deg_2 := adv_degree_spec_v_le &
 [ STEM < "_A", "half" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_a+half_x_rel",
            PHON.ONSET voc ] ].

a_half_fract := fraction_le &
 [ STEM < "a", "half" >,
   SYNSEM [ LKEYS.KEYREL.CARG "1/2",
            PHON.ONSET voc ] ].

a_half_fract_2 := fraction_le &
 [ STEM < "a-", "half" >,
   SYNSEM [ LKEYS.KEYREL.CARG "1/2",
            PHON.ONSET voc ] ].

a_half_fract_3 := fraction_le &
 [ STEM < "a-half" >,
   SYNSEM [ LKEYS.KEYREL.CARG "1/2",
            PHON.ONSET voc ] ].

a_half_fract_4 := fraction_le &
 [ STEM < "Â½" >,
   SYNSEM [ LKEYS.KEYREL.CARG "1/2",
            PHON.ONSET voc ] ].

a_little := adv_degree_spec_v_le &
 [ STEM < "a", "little" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_a+little_x_very_rel",
            PHON.ONSET voc ] ].

a_little_2 := adv_degree_spec_m_le &
 [ STEM < "a", "little" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_a+little_x_much_rel",
            PHON.ONSET voc ] ].

a_little_adv1 := adv_int_vp_post_le &
 [ STEM < "a", "little" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_a+little_a_1_rel",
            PHON.ONSET voc ] ].

a_little_bit := adv_degree_spec_m_le &
 [ STEM < "a", "little", "bit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_a+little+bit_x_rel",
            PHON.ONSET voc ] ].

a_little_bit_adv1 := adv_int_vp_post_le &
 [ STEM < "a", "little", "bit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_a+little+bit_a_1_rel",
            PHON.ONSET voc ] ].

a_little_bit_adv2 := adv_degree_spec_m_le &
 [ STEM < "_A", "little", "bit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_a+little+bit_x_rel",
            PHON.ONSET voc ] ].

a_little_deg_3 := adv_degree_spec_v_le &
 [ STEM < "_A", "little" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_a+little_x_very_rel",
            PHON.ONSET voc ] ].

a_little_deg_4 := adv_degree_spec_m_le &
 [ STEM < "_A", "little" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_a+little_x_much_rel",
            PHON.ONSET voc ] ].

a_lot := adv_degree_spec_m_le &
 [ STEM < "a", "lot" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_a+lot_x_rel",
            PHON.ONSET voc ] ].

a_lot_adv1 := adv_int_vp_post_le &
 [ STEM < "a", "lot" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_a+lot_a_1_rel",
            PHON.ONSET voc ] ].

a_lot_adv2 := adv_int_vp_post_le &
 [ STEM < "alot" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_a+lot_a_1_rel",
            PHON.ONSET voc ] ].

a_lot_deg_2 := adv_degree_spec_m_le &
 [ STEM < "_A", "lot" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_a+lot_x_rel",
            PHON.ONSET voc ] ].

a_np1 := n_proper_sg_le &
 [ STEM < "_a" >,
   SYNSEM [ LKEYS.KEYREL.CARG "a",
            PHON.ONSET voc ] ].

a_one_adj := adj_one_prd_le &
 [ STEM < "a" >,
   SYNSEM.PHON.ONSET voc ].

a_one_adj_2 := adj_one_prd_le &
 [ STEM < "_a" >,
   SYNSEM.PHON.ONSET voc ].

a_one_fract := adj_one_fract_a_le &
 [ STEM < "a" >,
   SYNSEM.PHON.ONSET voc ].

a_per_p := p_nbar_comp_nmod_le &
 [ STEM < "a" >,
   SYNSEM [ LKEYS.KEYREL.PRED _a_p_per_rel,
            PHON.ONSET voc ] ].

a_period_np2 := n_proper_le &
 [ STEM < "_a." >,
   SYNSEM [ LKEYS.KEYREL.CARG "a",
            PHON.ONSET voc ] ].

a_pred_p1 := pred_a_prep_le &
 [ STEM < "a" >,
   SYNSEM.PHON.ONSET voc ].

a_quarter := adj_minute_preh_le &
 [ STEM < "a", "quarter" >,
   SYNSEM [ LKEYS.KEYREL.CARG "15",
            PHON.ONSET voc ] ].

a_quarter_adj2 := adj_minute_preh_le &
 [ STEM < "_A", "quarter" >,
   SYNSEM [ LKEYS.KEYREL.CARG "15",
            PHON.ONSET voc ] ].

a_thousand_flower_n1 := n_proper_le &
 [ STEM < "a", "thousand", "flower" >,
   SYNSEM [ LKEYS.KEYREL.CARG "a_thousand_flower",
            PHON.ONSET voc ] ].

a_totter_adv1 := adv_int_vp_post_le &
 [ STEM < "a", "totter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_a+totter_a_1_rel",
            PHON.ONSET voc ] ].

a_totter_adv2 := adv_int_vp_post_le &
 [ STEM < "a-", "totter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_a+totter_a_1_rel",
            PHON.ONSET voc ] ].

a_trifle_adv1 := adv_int_vp_le &
 [ STEM < "a", "trifle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_a+trifle_a_1_rel",
            PHON.ONSET voc ] ].

a_ways_adv1 := adv_int_vp_post_le &
 [ STEM < "a", "ways" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_a+ways_a_1_rel",
            PHON.ONSET voc ] ].

a_ways_adv2 := adv_int_vp_post_le &
 [ STEM < "_A", "ways" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_a+ways_a_1_rel",
            PHON.ONSET voc ] ].

a_ways_deg := adv_degree_spec_m_le &
 [ STEM < "a", "ways" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_a+ways_x_much_rel",
            PHON.ONSET voc ] ].

a_ways_deg2 := adv_degree_spec_m_le &
 [ STEM < "_A", "ways" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_a+ways_x_much_rel",
            PHON.ONSET voc ] ].

aachen_n1 := n_proper_city_le &
 [ STEM < "aachen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "aachen",
            PHON.ONSET voc ] ].

aaron_n1 := n_proper_le &
 [ STEM < "aaron" >,
   SYNSEM [ LKEYS.KEYREL.CARG "aaron",
            PHON.ONSET voc ] ].

aase_n1 := n_proper_le &
 [ STEM < "aase" >,
   SYNSEM [ LKEYS.KEYREL.CARG "aase",
            PHON.ONSET voc ] ].

aaseng_n1 := n_proper_le &
 [ STEM < "aaseng" >,
   SYNSEM [ LKEYS.KEYREL.CARG "aaseng",
            PHON.ONSET voc ] ].

aasmund_n1 := n_proper_le &
 [ STEM < "aasmund" >,
   SYNSEM [ LKEYS.KEYREL.CARG "aasmund",
            PHON.ONSET voc ] ].

aba_n1 := n_mass_le &
 [ STEM < "aba" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_aba_n_1_rel",
            PHON.ONSET voc ] ].

abacinate_v1 := v_np_trans_le &
 [ STEM < "abacinate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_abacinate_v_1_rel",
            PHON.ONSET voc ] ].

abaculus_n1 := n_intr_le &
 [ STEM < "abaculus" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_abaculus_n_1_rel",
            PHON.ONSET voc ] ].

abacus_n1 := n_intr_le &
 [ STEM < "abacus" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_abacus_n_1_rel",
            PHON.ONSET voc ] ].

abaft := p_reg_le &
 [ STEM < "abaft" >,
   SYNSEM [ LKEYS.KEYREL.PRED _abaft_p_rel,
            PHON.ONSET voc ] ].

abaft_nom := n_adv_event_le &
 [ STEM < "abaft" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED _abaft_p_rel,
                    KEYREL.PRED place_n_rel ],
            PHON.ONSET voc ] ].

abalienate_v1 := v_np_trans_le &
 [ STEM < "abalienate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_abalienate_v_1_rel",
            PHON.ONSET voc ] ].

abandon_n1 := n_mass_le &
 [ STEM < "abandon" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_abandon_n_1_rel",
            PHON.ONSET voc ] ].

abandon_v1 := v_np*_trans_le &
 [ STEM < "abandon" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_abandon_v_1_rel",
            PHON.ONSET voc ] ].

abandonment_n1 := n_mass_le &
 [ STEM < "abandonment" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_abandonment_n_1_rel",
            PHON.ONSET voc ] ].

abase_v1 := v_np_trans_le &
 [ STEM < "abase" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_abase_v_1_rel",
            PHON.ONSET voc ] ].

abasement_n1 := n_mass_count_le &
 [ STEM < "abasement" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_abasement_n_1_rel",
            PHON.ONSET voc ] ].

abashed_a1 := adj_intrans_le &
 [ STEM < "abashed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_abashed_a_1_rel",
            PHON.ONSET voc ] ].

abatable_a1 := adj_intrans_le &
 [ STEM < "abatable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_abatable_a_1_rel",
            PHON.ONSET voc ] ].

abate_v1 := v_np_trans_noger_le &
 [ STEM < "abate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_abate_v_cause_rel",
            PHON.ONSET voc ] ].

abate_v2 := v_unacc_le &
 [ STEM < "abate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_abate_v_1_rel",
            PHON.ONSET voc ] ].

abatement_n1 := n_mass_count_le &
 [ STEM < "abatement" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_abatement_n_1_rel",
            PHON.ONSET voc ] ].

abatis_n1 := n_intr_le &
 [ STEM < "abatis" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_abatis_n_1_rel",
            PHON.ONSET voc ] ].

abb_n1 := n_mass_le &
 [ STEM < "abb" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_abb_n_1_rel",
            PHON.ONSET voc ] ].

abbatial_a1 := adj_intrans_le &
 [ STEM < "abbatial" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_abbatial_a_1_rel",
            PHON.ONSET voc ] ].

abbey_n1 := n_intr_le &
 [ STEM < "abbey" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_abbey_n_1_rel",
            PHON.ONSET voc ] ].

abbot_n1 := n_proper_le &
 [ STEM < "abbot" >,
   SYNSEM [ LKEYS.KEYREL.CARG "abbot",
            PHON.ONSET voc ] ].

abbreviate_v1 := v_np_trans_le &
 [ STEM < "abbreviate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_abbreviate_v_1_rel",
            PHON.ONSET voc ] ].

abbreviation_n1 := n_intr_le &
 [ STEM < "abbreviation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_abbreviation_n_1_rel",
            PHON.ONSET voc ] ].

abc_n1 := n_proper_le &
 [ STEM < "abc" >,
   SYNSEM [ LKEYS.KEYREL.CARG "abc",
            PHON.ONSET voc ] ].

abc_n2 := n_intr_named_le &
 [ STEM < "a", "b", "c" >,
   SYNSEM [ LKEYS.KEYREL.CARG "abc",
            PHON.ONSET con ] ].

abdicate_v1 := v_np*_trans_le &
 [ STEM < "abdicate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_abdicate_v_1_rel",
            PHON.ONSET voc ] ].

abdication_n1 := n_mass_le &
 [ STEM < "abdication" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_abdication_n_1_rel",
            PHON.ONSET voc ] ].

abdomen_n1 := n_intr_le &
 [ STEM < "abdomen" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_abdomen_n_1_rel",
            PHON.ONSET voc ] ].

abdominal_a1 := adj_intrans_le &
 [ STEM < "abdominal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_abdominal_a_1_rel",
            PHON.ONSET voc ] ].

abduce_v1 := v_np*_trans_le &
 [ STEM < "abduce" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_abduce_v_1_rel",
            PHON.ONSET voc ] ].

abduct_v1 := v_np*_trans_le &
 [ STEM < "abduct" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_abduct_v_1_rel",
            PHON.ONSET voc ] ].

abeam_adv1 := pp_le &
 [ STEM < "abeam" >,
   SYNSEM [ LKEYS.KEYREL.PRED _abeam_p_rel,
            PHON.ONSET voc ] ].

abed_a1 := adj_pred_intrans_le &
 [ STEM < "abed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_abed_a_1_rel",
            PHON.ONSET voc ] ].

abel_n1 := n_proper_le &
 [ STEM < "abel" >,
   SYNSEM [ LKEYS.KEYREL.CARG "abel",
            PHON.ONSET voc ] ].

aberrant_a1 := adj_intrans_le &
 [ STEM < "aberrant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_aberrant_a_1_rel",
            PHON.ONSET voc ] ].

aberration_n1 := n_mass_count_le &
 [ STEM < "aberration" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_aberration_n_1_rel",
            PHON.ONSET voc ] ].

abet_v1 := v_np*_trans_le &
 [ STEM < "abet" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_abet_v_1_rel",
            PHON.ONSET voc ] ].

abetment_n1 := n_mass_le &
 [ STEM < "abetment" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_abetment_n_1_rel",
            PHON.ONSET voc ] ].

abeyance_n1 := n_mass_le &
 [ STEM < "abeyance" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_abeyance_n_1_rel",
            PHON.ONSET voc ] ].

abide_v1 := v_np_trans_noger_le &
 [ STEM < "abide" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_abide_v_2_rel",
            PHON.ONSET voc ] ].

abide_v2 := v_unerg_le &
 [ STEM < "abide" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_abide_v_2_rel",
            PHON.ONSET voc ] ].

ability_n1 := n_intr_le &
 [ STEM < "ability" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ability_n_1_rel",
            PHON.ONSET voc ] ].

ability_n2 := n_vpcomp_le &
 [ STEM < "ability" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ability_n_1_rel",
            PHON.ONSET voc ] ].

abisko := n_proper_le &
 [ STEM < "abisko" >,
   SYNSEM [ LKEYS.KEYREL.CARG "abisko",
            PHON.ONSET voc ] ].

abject_a1 := adj_intrans_le &
 [ STEM < "abject" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_abject_a_1_rel",
            PHON.ONSET voc ] ].

abjectly_adv := adv_int_vp_le &
 [ STEM < "abjectly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_abject_a_1_rel",
            PHON.ONSET voc ] ].

ablaze_a1 := adj_pred_intrans_le &
 [ STEM < "ablaze" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ablaze_a_1_rel",
            PHON.ONSET voc ] ].

able_a1 := adj_intrans_le &
 [ STEM < "able" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_able_a_1_rel",
            PHON.ONSET voc ] ].

able_a2 := adj_reg_equi_le &
 [ STEM < "able" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_able_a_1_rel",
            PHON.ONSET voc ] ].

abnet_n1 := n_intr_le &
 [ STEM < "abnet" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_abnet_n_1_rel",
            PHON.ONSET voc ] ].

abnormal_isect := adj_intrans_le &
 [ STEM < "abnormal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_abnormal_a_1_rel",
            PHON.ONSET voc ] ].

abnormally_adv := adv_int_vp_le &
 [ STEM < "abnormally" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_abnormal_a_1_rel",
            PHON.ONSET voc ] ].

aboard := p_reg_le &
 [ STEM < "aboard" >,
   SYNSEM [ LKEYS.KEYREL.PRED _aboard_p_rel,
            PHON.ONSET voc ] ].

aboard_pp := pp_le &
 [ STEM < "aboard" >,
   SYNSEM [ LKEYS.KEYREL.PRED _aboard_p_rel,
            PHON.ONSET voc ] ].

abode_n1 := n_mass_count_le &
 [ STEM < "abode" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_abode_n_1_rel",
            PHON.ONSET voc ] ].

abolish_v1 := v_np_trans_le &
 [ STEM < "abolish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_abolish_v_1_rel",
            PHON.ONSET voc ] ].

aboriginal_a1 := adj_intrans_le &
 [ STEM < "aboriginal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_aboriginal_a_1_rel",
            PHON.ONSET voc ] ].

aborigine_n1 := n_intr_le &
 [ STEM < "aborigine" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_aborigine_n_1_rel",
            PHON.ONSET voc ] ].

abound_v1 := v_prep*_intrans_le &
 [ STEM < "abound" >,
   SYNSEM [ LKEYS [ --COMPKEY _with_p_rel,
                    KEYREL.PRED "_abound_v_1_rel" ],
            PHON.ONSET voc ] ].

about := p_nmod_le &
 [ STEM < "about" >,
   SYNSEM [ LKEYS.KEYREL.PRED _about_p_rel,
            PHON.ONSET voc ] ].

about_a1 := adj_reg_equi_le &
 [ STEM < "about" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_about_a_1_rel",
            PHON.ONSET voc ] ].

about_adv := pp_no_nmod_le &
 [ STEM < "about" >,
   SYNSEM [ LKEYS.KEYREL.PRED _about_p_rel,
            PHON.ONSET voc ] ].

about_deg := adv_degree_spec_jov_le &
 [ STEM < "about" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_about_x_approx_rel",
            PHON.ONSET voc ] ].

about_prtcl := p_prtcl_le &
 [ STEM < "about" >,
   SYNSEM [ LKEYS.KEYREL.PRED _about_p_sel_rel,
            PHON.ONSET voc ] ].

above := p_reg_le &
 [ STEM < "above" >,
   SYNSEM [ LKEYS.KEYREL.PRED _above_p_rel,
            PHON.ONSET voc ] ].

above_a1 := adj_intrans_le &
 [ STEM < "above" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_above_a_1_rel",
            PHON.ONSET voc ] ].

above_adv1 := pp_reg_le &
 [ STEM < "above" >,
   SYNSEM [ LKEYS.KEYREL.PRED _above_p_rel,
            PHON.ONSET voc ] ].

above_all_adv1 := adv_int_vp_aux_le &
 [ STEM < "above", "all" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_above+all_a_1_rel",
            PHON.ONSET voc ] ].

above_all_adv2 := adv_int_vp_post_le &
 [ STEM < "above", "all" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_above+all_a_1_rel",
            PHON.ONSET voc ] ].

above_dollar_adj := adj_dollar_le &
 [ STEM < "above" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_above_a_dollar_rel",
            PHON.ONSET voc ] ].

above_n1 := n_no_cmpnd_le &
 [ STEM < "above" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_above_n_1_rel",
            PHON.ONSET voc ] ].

above_named_a1 := adj_attr_intrans_le &
 [ STEM < "above-", "named" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_above+named_a_1_rel",
            PHON.ONSET voc ] ].

aboveground_a1 := adj_intrans_le &
 [ STEM < "aboveground" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_aboveground_a_1_rel",
            PHON.ONSET voc ] ].

aboveground_adv1 := pp_le &
 [ STEM < "aboveground" >,
   SYNSEM [ LKEYS.KEYREL.PRED _aboveground_p_rel,
            PHON.ONSET voc ] ].

abraham_n1 := n_proper_le &
 [ STEM < "abraham" >,
   SYNSEM [ LKEYS.KEYREL.CARG "abraham",
            PHON.ONSET voc ] ].

abrams := n_proper_le &
 [ STEM < "abrams" >,
   SYNSEM [ LKEYS.KEYREL.CARG "abrams",
            PHON.ONSET voc ] ].

abreast_a1 := adj_trans_le &
 [ STEM < "abreast" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_abreast_a_of_rel" ],
            PHON.ONSET voc ] ].

abridge_v1 := v_np_trans_le &
 [ STEM < "abridge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_abridge_v_1_rel",
            PHON.ONSET con ] ].

abridged_a1 := adj_intrans_le &
 [ STEM < "abridged" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_abridged_a_1_rel",
            PHON.ONSET voc ] ].

abridgment_n1 := n_mass_count_le &
 [ STEM < "abridgment" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_abridgment_n_1_rel",
            PHON.ONSET voc ] ].

abroad_adv := pp_le &
 [ STEM < "abroad" >,
   SYNSEM [ LKEYS.KEYREL.PRED _abroad_p_rel,
            PHON.ONSET voc ] ].

abrupt_a1 := adj_intrans_le &
 [ STEM < "abrupt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_abrupt_a_1_rel",
            PHON.ONSET voc ] ].

abruptly_adv1 := adv_int_vp_le &
 [ STEM < "abruptly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_abrupt_a_1_rel",
            PHON.ONSET voc ] ].

abscess_n1 := n_intr_le &
 [ STEM < "abscess" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_abscess_n_1_rel",
            PHON.ONSET voc ] ].

abscond_with_v1 := v_empty_prep_intrans_le &
 [ STEM < "abscond" >,
   SYNSEM [ LKEYS [ --COMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_abscond_v_with_rel" ],
            PHON.ONSET voc ] ].

absence_n1 := n_mass_count_le &
 [ STEM < "absence" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_absence_n_1_rel",
            PHON.ONSET voc ] ].

absent_a1 := adj_intrans_le &
 [ STEM < "absent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_absent_a_1_rel",
            PHON.ONSET voc ] ].

absolute_a1 := adj_intrans_le &
 [ STEM < "absolute" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_absolute_a_1_rel",
            PHON.ONSET voc ] ].

absolutely_adv1 := adv_vp_pre_le &
 [ STEM < "absolutely" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_absolute_a_scop_rel",
            PHON.ONSET voc ] ].

absorb_v1 := v_np_trans_le &
 [ STEM < "absorb" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_absorb_v_1_rel",
            PHON.ONSET voc ] ].

absorb_v2 := v_np_prep_trans_le &
 [ STEM < "absorb" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _into_p_rel,
                    KEYREL.PRED "_absorb_v_1_rel" ],
            PHON.ONSET voc ] ].

abstain_v1 := v_empty_prep_intrans_le &
 [ STEM < "abstain" >,
   SYNSEM [ LKEYS [ --COMPKEY _from_p_sel_rel,
                    KEYREL.PRED "_abstain_v_from_rel" ],
            PHON.ONSET voc ] ].

abstain_v2 := v_unerg_le &
 [ STEM < "abstain" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_abstain_v_from_rel",
            PHON.ONSET voc ] ].

abstract_a1 := adj_intrans_le &
 [ STEM < "abstract" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_abstract_a_1_rel",
            PHON.ONSET voc ] ].

abstract_n1 := n_intr_le &
 [ STEM < "abstract" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_abstract_n_1_rel",
            PHON.ONSET voc ] ].

abstractly_adv := adv_int_vp_le &
 [ STEM < "abstractly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_abstract_a_1_rel",
            PHON.ONSET voc ] ].

abundance_n1 := n_mass_count_le &
 [ STEM < "abundance" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_abundance_n_1_rel",
            PHON.ONSET voc ] ].

abundant_a1 := adj_intrans_le &
 [ STEM < "abundant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_abundant_a_1_rel",
            PHON.ONSET voc ] ].

abundantly := adv_int_vp_le &
 [ STEM < "abundantly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_abundant_a_1_rel",
            PHON.ONSET voc ] ].

abuse_n1 := n_ppof_le &
 [ STEM < "abuse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_abuse_n_of_rel",
            PHON.ONSET voc ] ].

abuse_v1 := v_np_trans_le &
 [ STEM < "abuse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_abuse_v_1_rel",
            PHON.ONSET voc ] ].

abut_v1 := v_np*_trans_le &
 [ STEM < "abut" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_abut_v_1_rel",
            PHON.ONSET voc ] ].

abutment_n1 := n_mass_count_le &
 [ STEM < "abutment" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_abutment_n_1_rel",
            PHON.ONSET voc ] ].

abyss_n1 := n_intr_le &
 [ STEM < "abyss" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_abyss_n_1_rel",
            PHON.ONSET voc ] ].

academic_a1 := adj_intrans_le &
 [ STEM < "academic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_academic_a_1_rel",
            PHON.ONSET voc ] ].

academic_n1 := n_intr_le &
 [ STEM < "academic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_academic_n_1_rel",
            PHON.ONSET voc ] ].

academical_a1 := adj_intrans_le &
 [ STEM < "academical" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_academical_a_1_rel",
            PHON.ONSET voc ] ].

academy_n1 := n_intr_le &
 [ STEM < "academy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_academy_n_1_rel",
            PHON.ONSET voc ] ].

academy_post_ttl := n_post_title_le &
 [ STEM < "academy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_academy_n_1_rel",
            PHON.ONSET voc ] ].

acapulco_n1 := n_proper_city_le &
 [ STEM < "acapulco" >,
   SYNSEM [ LKEYS.KEYREL.CARG "acapulco",
            PHON.ONSET voc ] ].

accelerate_v1 := v_np_trans_noger_le &
 [ STEM < "accelerate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_accelerate_v_cause_rel",
            PHON.ONSET voc ] ].

accelerate_v2 := v_prep_dir_le &
 [ STEM < "accelerate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_accelerate_v_1_rel",
            PHON.ONSET voc ] ].

accent_n1 := n_mass_count_le &
 [ STEM < "accent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_accent_n_1_rel",
            PHON.ONSET voc ] ].

accent_v1 := v_np_trans_le &
 [ STEM < "accent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_accent_v_1_rel",
            PHON.ONSET voc ] ].

accept_v1 := v_np_trans_le &
 [ STEM < "accept" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_accept_v_1_rel",
            PHON.ONSET voc ] ].

accept_v2 := v_cp_non_trans_le &
 [ STEM < "accept" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_accept_v_1_rel",
            PHON.ONSET voc ] ].

accept_v3 := v_np_as_le &
 [ STEM < "accept" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_accept_v_as_rel",
            PHON.ONSET voc ] ].

acceptable_a1 := adj_trans_le &
 [ STEM < "acceptable" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_acceptable_a_for_rel" ],
            PHON.ONSET voc ] ].

acceptable_a2 := adj_reg_atrans_le &
 [ STEM < "acceptable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_acceptable_a_for_rel",
            PHON.ONSET voc ] ].

acceptable_a3 := adj_reg_atrans_cp_le &
 [ STEM < "acceptable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_acceptable_a_for_rel",
            PHON.ONSET voc ] ].

acceptably_a1 := adv_int_vp_le &
 [ STEM < "acceptably" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_acceptable_a_for_rel",
            PHON.ONSET voc ] ].

acceptance_n1 := n_mass_le &
 [ STEM < "acceptance" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_acceptance_n_1_rel",
            PHON.ONSET voc ] ].

acceptive_a1 := adj_intrans_le &
 [ STEM < "acceptive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_acceptive_a_1_rel",
            PHON.ONSET voc ] ].

access_n1 := n_mass_count_le &
 [ STEM < "access" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_access_n_1_rel",
            PHON.ONSET voc ] ].

access_v1 := v_np_trans_le &
 [ STEM < "access" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_access_v_1_rel",
            PHON.ONSET voc ] ].

accessibility_n1 := n_mass_le &
 [ STEM < "accessibility" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_accessibility_n_1_rel",
            PHON.ONSET voc ] ].

accessible_a1 := adj_trans_pp_ind_le &
 [ STEM < "accessible" >,
   SYNSEM [ LKEYS [ --COMPKEY _by_p_rel,
                    KEYREL.PRED "_accessible_a_1_rel" ],
            PHON.ONSET voc ] ].

accession_n1 := n_mass_le &
 [ STEM < "accession" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_accession_n_1_rel",
            PHON.ONSET voc ] ].

accessory_n1 := n_intr_le &
 [ STEM < "accessory" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_accessory_n_1_rel",
            PHON.ONSET voc ] ].

accident_n1 := n_intr_le &
 [ STEM < "accident" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_accident_n_1_rel",
            PHON.ONSET voc ] ].

accidental_a1 := adj_intrans_le &
 [ STEM < "accidental" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_accidental_a_1_rel",
            PHON.ONSET voc ] ].

accidental_a2 := adj_reg_atrans_cp_le &
 [ STEM < "accidental" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_accidental_a_1_rel",
            PHON.ONSET voc ] ].

accidentally_adv1 := adv_int_vp_le &
 [ STEM < "accidentally" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_accidental_a_1_rel",
            PHON.ONSET voc ] ].

acclimate_v1 := v_np*_prep_trans_le &
 [ STEM < "acclimate" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _to_p_rel,
                    KEYREL.PRED "_acclimate_v_1_rel" ],
            PHON.ONSET voc ] ].

acclimate_v2 := v_np*_trans_le &
 [ STEM < "acclimate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_acclimate_v_1_rel",
            PHON.ONSET voc ] ].

acclimatize_v1 := v_np_trans_le &
 [ STEM < "acclimatize" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_acclimatize_v_1_rel",
            PHON.ONSET voc ] ].

accommodate_v1 := v_np_trans_le &
 [ STEM < "accommodate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_accommodate_v_1_rel",
            PHON.ONSET voc ] ].

accommodate_v2 := v_np_as_le &
 [ STEM < "accommodate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_accommodate_v_as_rel",
            PHON.ONSET voc ] ].

accommodation_n1 := n_mass_count_le &
 [ STEM < "accommodation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_accommodation_n_1_rel",
            PHON.ONSET voc ] ].

accompaniment_n1 := n_mass_count_le &
 [ STEM < "accompaniment" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_accompaniment_n_1_rel",
            PHON.ONSET voc ] ].

accompany_v1 := v_np*_trans_le &
 [ STEM < "accompany" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_accompany_v_1_rel",
            PHON.ONSET voc ] ].

accomplish_v1 := v_np_trans_le &
 [ STEM < "accomplish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_accomplish_v_1_rel",
            PHON.ONSET voc ] ].

accomplishment_n1 := n_mass_count_le &
 [ STEM < "accomplishment" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_accomplishment_n_1_rel",
            PHON.ONSET voc ] ].

accord_n1 := n_mass_count_le &
 [ STEM < "accord" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_accord_n_1_rel",
            PHON.ONSET voc ] ].

accord_v1 := v_ditrans_only_le &
 [ STEM < "accord" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_accord_v_1_rel",
            PHON.ONSET voc ] ].

accord_v2 := v_empty_prep_intrans_le &
 [ STEM < "accord" >,
   SYNSEM [ LKEYS [ --COMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_accord_v_with_rel" ],
            PHON.ONSET voc ] ].

accordance_n1 := n_mass_ppcomp_le &
 [ STEM < "accordance" >,
   SYNSEM [ LKEYS [ --COMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_accordance_n_with_rel" ],
            PHON.ONSET voc ] ].

according_to := p_le &
 [ STEM < "according", "to" >,
   SYNSEM [ LKEYS.KEYREL.PRED _according+to_p_rel,
            PHON.ONSET voc ] ].

accordingly_adv1 := adv_int_vp_post_le &
 [ STEM < "accordingly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_according_a_1_rel",
            PHON.ONSET voc ] ].

account_n1 := n_ppof_le &
 [ STEM < "account" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_account_n_of_rel",
            PHON.ONSET voc ] ].

account_n1_i := n_intr_nospr_le &
 [ STEM < "account" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_account_n_of_rel",
            PHON.ONSET voc ] ].

account_n3 := n_intr_le &
 [ STEM < "acc't" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_account_n_of_rel",
            PHON.ONSET voc ] ].

account_n4 := n_intr_le &
 [ STEM < "acc", "'t" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_account_n_of_rel",
            PHON.ONSET voc ] ].

account_title := n_title_le &
 [ STEM < "account" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_account_n_of_rel",
            PHON.ONSET voc ] ].

account_v1 := v_empty_prep_intrans_le &
 [ STEM < "account" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_account_v_for_rel" ],
            PHON.ONSET voc ] ].

accountable_a1 := adj_intrans_le &
 [ STEM < "accountable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_accountable_a_1_rel",
            PHON.ONSET voc ] ].

accountant_n1 := n_intr_le &
 [ STEM < "accountant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_accountant_n_1_rel",
            PHON.ONSET voc ] ].

accrue_v1 := v_np_trans_noger_le &
 [ STEM < "accrue" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_accrue_v_cause_rel",
            PHON.ONSET voc ] ].

accrue_v2 := v_unacc_le &
 [ STEM < "accrue" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_accrue_v_1_rel",
            PHON.ONSET voc ] ].

accrue_v3 := v_empty_prep_intrans_le &
 [ STEM < "accrue" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_accrue_v_to_rel" ],
            PHON.ONSET voc ] ].

accumulate_v1 := v_np_trans_noger_le &
 [ STEM < "accumulate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_accumulate_v_cause_rel",
            PHON.ONSET voc ] ].

accumulate_v2 := v_unacc_le &
 [ STEM < "accumulate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_accumulate_v_1_rel",
            PHON.ONSET voc ] ].

accumulation_n1 := n_mass_count_ppof_le &
 [ STEM < "accumulation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_accumulation_n_of_rel",
            PHON.ONSET voc ] ].

accuracy_n1 := n_mass_le &
 [ STEM < "accuracy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_accuracy_n_1_rel",
            PHON.ONSET voc ] ].

accurate_a1 := adj_intrans_le &
 [ STEM < "accurate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_accurate_a_1_rel",
            PHON.ONSET voc ] ].

accurately := adv_int_vp_le &
 [ STEM < "accurately" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_accurate_a_1_rel",
            PHON.ONSET voc ] ].

accusation_n1 := n_mass_count_le &
 [ STEM < "accusation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_accusation_n_1_rel",
            PHON.ONSET voc ] ].

accuse_v1 := v_empty_prep*_trans_le &
 [ STEM < "accuse" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_accuse_v_of_rel" ],
            PHON.ONSET voc ] ].

accustom_to_v1 := v_empty_prep*_trans_le &
 [ STEM < "accustom" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_accustom_v_to_rel" ],
            PHON.ONSET con ] ].

accustom_v1 := v_obj_equi_le &
 [ STEM < "accustom" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_accustom_v_1_rel",
            PHON.ONSET voc ] ].

ace_n1 := n_intr_le &
 [ STEM < "ace" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ace_n_1_rel",
            PHON.ONSET voc ] ].

ace_v1 := v_np_trans_le &
 [ STEM < "ace" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ace_v_1_rel",
            PHON.ONSET voc ] ].

acer_n1 := n_proper_le &
 [ STEM < "acer" >,
   SYNSEM [ LKEYS.KEYREL.CARG "acer",
            PHON.ONSET voc ] ].

ach_root_pre := adv_s_pre_word_root_le &
 [ STEM < "ach" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ach_a_1_rel",
            PHON.ONSET voc ] ].

ache_for_v1 := v_empty_prep_intrans_le &
 [ STEM < "ache" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_ache_v_for_rel" ],
            PHON.ONSET voc ] ].

ache_n1 := n_intr_le &
 [ STEM < "ache" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ache_n_1_rel",
            PHON.ONSET voc ] ].

ache_v1 := v_unerg_le &
 [ STEM < "ache" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ache_v_1_rel",
            PHON.ONSET voc ] ].

ache_v2 := v_subj_equi_le &
 [ STEM < "ache" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ache_v_1_rel",
            PHON.ONSET voc ] ].

ache_with_v1 := v_empty_prep_intrans_le &
 [ STEM < "ache" >,
   SYNSEM [ LKEYS [ --COMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_ache_v_with_rel" ],
            PHON.ONSET voc ] ].

achieve_v1 := v_np_trans_le &
 [ STEM < "achieve" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_achieve_v_1_rel",
            PHON.ONSET voc ] ].

achievement_n1 := n_mass_count_ppof_le &
 [ STEM < "achievement" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_achievement_n_of_rel",
            PHON.ONSET voc ] ].

acid_n1 := n_mass_count_le &
 [ STEM < "acid" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_acid_n_1_rel",
            PHON.ONSET voc ] ].

acknowledge_v1 := v_np*_trans_le &
 [ STEM < "acknowledge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_acknowledge_v_1_rel",
            PHON.ONSET voc ] ].

acknowledge_v2 := v_cp_non_trans_le &
 [ STEM < "acknowledge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_acknowledge_v_1_rel",
            PHON.ONSET voc ] ].

acknowledge_v3 := v_np_as_le &
 [ STEM < "acknowledge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_acknowledge_v_as_rel",
            PHON.ONSET voc ] ].

acknowledgement_n1 := n_mass_count_ppof_le &
 [ STEM < "acknowledgement" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_acknowledgement_n_of_rel",
            PHON.ONSET voc ] ].

acme_n1 := n_proper_le &
 [ STEM < "acme" >,
   SYNSEM [ LKEYS.KEYREL.CARG "acme",
            PHON.ONSET voc ] ].

acoustic_a1 := adj_intrans_le &
 [ STEM < "acoustic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_acoustic_a_1_rel",
            PHON.ONSET voc ] ].

acoustics_n1 := n_plur_nocmpnd_le &
 [ STEM < "acoustic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_acoustics_n_1_rel",
            PHON.ONSET voc ] ].

acquaint_with_v1 := v_np*_prep_trans_le &
 [ STEM < "acquaint" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _with_p_rel,
                    KEYREL.PRED "_acquaint_v_1_rel" ],
            PHON.ONSET voc ] ].

acquaintance_n := n_intr_le &
 [ STEM < "acquaintance" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_acquaintance_n_1_rel",
            PHON.ONSET voc ] ].

acquainted_a1 := adj_intrans_le &
 [ STEM < "acquainted" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_acquainted_a_1_rel",
            PHON.ONSET voc ] ].

acquire_v1 := v_np_trans_le &
 [ STEM < "acquire" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_acquire_v_1_rel",
            PHON.ONSET voc ] ].

acquirement_n1 := n_mass_count_le &
 [ STEM < "acquirement" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_acquirement_n_1_rel",
            PHON.ONSET voc ] ].

acquisition_n1 := n_mass_count_ppof_le &
 [ STEM < "acquisition" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_acquisition_n_of_rel",
            PHON.ONSET voc ] ].

acquit_of_v1 := v_empty_prep*_trans_le &
 [ STEM < "acquit" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_acquit_v_of_rel" ],
            PHON.ONSET voc ] ].

acquit_v1 := v_np*_trans_le &
 [ STEM < "acquit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_acquit_v_of_rel",
            PHON.ONSET voc ] ].

acre_n1 := n_meas_le &
 [ STEM < "acre" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_acre_n_1_rel",
            PHON.ONSET voc ] ].

acreage_n1 := n_mass_count_le &
 [ STEM < "acreage" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_acreage_n_1_rel",
            PHON.ONSET voc ] ].

acrobatic_a1 := adj_intrans_le &
 [ STEM < "acrobatic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_acrobatic_a_1_rel",
            PHON.ONSET voc ] ].

acrobatics_n1 := n_plur_nocmpnd_le &
 [ STEM < "acrobatic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_acrobatics_n_1_rel",
            PHON.ONSET voc ] ].

acronym_n1 := n_intr_le &
 [ STEM < "acronym" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_acronym_n_1_rel",
            PHON.ONSET voc ] ].

acrophobia_n1 := n_mass_le &
 [ STEM < "acrophobia" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_acrophobia_n_1_rel",
            PHON.ONSET voc ] ].

across := p_reg_le &
 [ STEM < "across" >,
   SYNSEM [ LKEYS.KEYREL.PRED _across_p_rel,
            PHON.ONSET voc ] ].

across_pp := pp_dir_le &
 [ STEM < "across" >,
   SYNSEM [ LKEYS.KEYREL.PRED _across_p_rel,
            PHON.ONSET voc ] ].

across_prtcl := p_prtcl_le &
 [ STEM < "across" >,
   SYNSEM [ LKEYS.KEYREL.PRED _across_p_sel_rel,
            PHON.ONSET voc ] ].

act_as_v1 := v_empty_prep_intrans_le &
 [ STEM < "act" >,
   SYNSEM [ LKEYS [ --COMPKEY _as_p_sel_rel,
                    KEYREL.PRED "_act_v_as_rel" ],
            PHON.ONSET voc ] ].

act_n1 := n_ppof_le &
 [ STEM < "act" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_act_n_of_rel",
            PHON.ONSET voc ] ].

act_on_v1 := v_empty_prep_intrans_le &
 [ STEM < "act" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_act_v_on_rel" ],
            PHON.ONSET voc ] ].

act_seem_v1 := v_prdp_pp_seq_adj_le &
 [ STEM < "act" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_act_v_seem+to_rel",
            PHON.ONSET voc ] ].

act_up_v1 := v_particle_le &
 [ STEM < "act" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_act_v_up_rel" ],
            PHON.ONSET voc ] ].

act_v1 := v_unerg_le &
 [ STEM < "act" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_act_v_1_rel",
            PHON.ONSET voc ] ].

act_v2 := v_cp_like_non_trans_le &
 [ STEM < "act" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_act_v_1_rel",
            PHON.ONSET voc ] ].

actinal_a1 := adj_intrans_le &
 [ STEM < "actinal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_actinal_a_1_rel",
            PHON.ONSET voc ] ].

action_n1 := n_mass_count_le &
 [ STEM < "action" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_action_n_1_rel",
            PHON.ONSET voc ] ].

activate_v1 := v_np*_trans_le &
 [ STEM < "activate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_activate_v_1_rel",
            PHON.ONSET voc ] ].

active_a1 := adj_intrans_le &
 [ STEM < "active" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_active_a_1_rel",
            PHON.ONSET voc ] ].

actively_adv := adv_int_vp_le &
 [ STEM < "actively" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_active_a_1_rel",
            PHON.ONSET voc ] ].

activity_n1 := n_mass_count_nosort_le &
 [ STEM < "activity" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_activity_n_1_rel",
            PHON.ONSET voc ] ].

actor_n1 := n_intr_le &
 [ STEM < "actor" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_actor_n_1_rel",
            PHON.ONSET voc ] ].

actress_n1 := n_intr_le &
 [ STEM < "actress" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_actress_n_1_rel",
            PHON.ONSET voc ] ].

actual_a1 := adj_intrans_le &
 [ STEM < "actual" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_actual_a_1_rel",
            PHON.ONSET voc ] ].

actually_adv1 := adv_vp_aux_le &
 [ STEM < "actually" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_actual_a_1_rel",
            PHON.ONSET voc ] ].

actually_adv2 := adv_s_le &
 [ STEM < "actually" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_actual_a_1_rel",
            PHON.ONSET voc ] ].

actuate_v1 := v_np_trans_le &
 [ STEM < "actuate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_actuate_v_1_rel",
            PHON.ONSET voc ] ].

acute_a1 := adj_intrans_le &
 [ STEM < "acute" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_acute_a_1_rel",
            PHON.ONSET voc ] ].

ad_hoc_a1 := adj_intrans_le &
 [ STEM < "ad", "hoc" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ad+hoc_a_1_rel",
            PHON.ONSET voc ] ].

ad_n1 := n_intr_le &
 [ STEM < "ad" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ad_n_1_rel",
            PHON.ONSET voc ] ].

ad_temp_1 := xp_bc_ad_le &
 [ STEM < "ad" >,
   SYNSEM [ LKEYS.KEYREL [ CARG "AD_time",
                             PRED "_ad_x_rel" ],
            PHON.ONSET voc ] ].

ad_temp_2 := xp_bc_ad_le &
 [ STEM < "a", "d" >,
   SYNSEM [ LKEYS.KEYREL [ CARG "AD_time",
                             PRED "_ad_x_rel" ],
            PHON.ONSET voc ] ].

ad_temp_3 := xp_bc_ad_le &
 [ STEM < "a.d." >,
   SYNSEM [ LKEYS.KEYREL [ CARG "AD_time",
                             PRED "_ad_x_rel" ],
            PHON.ONSET voc ] ].

ad_temp_4 := xp_bc_ad_le &
 [ STEM < "a.d" >,
   SYNSEM [ LKEYS.KEYREL [ CARG "AD_time",
                             PRED "_ad_x_rel" ],
            PHON.ONSET voc ] ].

adam_n1 := n_proper_le &
 [ STEM < "adam" >,
   SYNSEM [ LKEYS.KEYREL.CARG "adam",
            PHON.ONSET voc ] ].

adams_n1 := n_proper_le &
 [ STEM < "adams" >,
   SYNSEM [ LKEYS.KEYREL.CARG "adams",
            PHON.ONSET voc ] ].

adapt_to_v2 := v_empty_prep_trans_le &
 [ STEM < "adapt" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_adapt_v_to_rel" ],
            PHON.ONSET voc ] ].

adapt_v1 := v_empty_prep_intrans_le &
 [ STEM < "adapt" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_adapt_v_to_rel" ],
            PHON.ONSET voc ] ].

adapt_v2 := v_np*_trans_le &
 [ STEM < "adapt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_adapt_v_1_rel",
            PHON.ONSET voc ] ].

adaptable_a1 := adj_intrans_le &
 [ STEM < "adaptable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_adaptable_a_1_rel",
            PHON.ONSET voc ] ].

adaptation_n1 := n_mass_count_le &
 [ STEM < "adaptation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_adaptation_n_1_rel",
            PHON.ONSET voc ] ].

add_on_v1 := v_particle_np_le &
 [ STEM < "add" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_add_v_on_rel" ],
            PHON.ONSET voc ] ].

add_to_v1 := v_to_trans*_le &
 [ STEM < "add" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_add_v_to_rel",
            PHON.ONSET voc ] ].

add_up_to_v1 := v_particle_empty_pp_le &
 [ STEM < "add" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    --OCOMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_add_v_up-to_rel" ],
            PHON.ONSET voc ] ].

add_up_v1 := v_particle_np_le &
 [ STEM < "add" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_add_v_up_rel" ],
            PHON.ONSET voc ] ].

add_up_v2 := v_particle_le &
 [ STEM < "add" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_add_v_up_rel" ],
            PHON.ONSET voc ] ].

add_v1 := v_np_trans_le &
 [ STEM < "add" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_add_v_to_rel",
            PHON.ONSET voc ] ].

add_v2 := v_cp_non_trans_le &
 [ STEM < "add" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_add_v_to_rel",
            PHON.ONSET voc ] ].

added_a1 := adj_attr_intrans_le &
 [ STEM < "added" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_added_a_1_rel",
            PHON.ONSET voc ] ].

addict_n1 := n_intr_le &
 [ STEM < "addict" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_addict_n_1_rel",
            PHON.ONSET voc ] ].

addict_v1 := v_to_trans_le &
 [ STEM < "addict" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_addict_v_to_rel",
            PHON.ONSET voc ] ].

addicted_a1 := adj_intrans_le &
 [ STEM < "addicted" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_addicted_a_1_rel",
            PHON.ONSET voc ] ].

addison_n1 := n_proper_le &
 [ STEM < "addison" >,
   SYNSEM [ LKEYS.KEYREL.CARG "addison",
            PHON.ONSET voc ] ].

addition_n1 := n_mass_count_le &
 [ STEM < "addition" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_addition_n_1_rel",
            PHON.ONSET voc ] ].

additional_a1 := adj_intrans_le &
 [ STEM < "additional" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_additional_a_1_rel",
            PHON.ONSET voc ] ].

additionally_isect := adv_int_vp_le &
 [ STEM < "additionally" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_additional_a_1_rel",
            PHON.ONSET voc ] ].

address_n1 := n_intr_le &
 [ STEM < "address" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_address_n_1_rel",
            PHON.ONSET voc ] ].

address_v1 := v_to*_trans_le &
 [ STEM < "address" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_address_v_to_rel",
            PHON.ONSET voc ] ].

addressee_n1 := n_intr_le &
 [ STEM < "addressee" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_addressee_n_1_rel",
            PHON.ONSET voc ] ].

adduce_v1 := v_np_trans_le &
 [ STEM < "adduce" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_adduce_v_1_rel",
            PHON.ONSET voc ] ].

adequate_isect := adj_intrans_le &
 [ STEM < "adequate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_adequate_a_1_rel",
            PHON.ONSET voc ] ].

adequately_isect := adv_int_vp_le &
 [ STEM < "adequately" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_adequate_a_1_rel",
            PHON.ONSET voc ] ].

adhere_to_v1 := v_empty_prep_intrans_le &
 [ STEM < "adhere" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_adhere_v_to_rel" ],
            PHON.ONSET voc ] ].

adhere_v1 := v_unerg_le &
 [ STEM < "adhere" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_adhere_v_1_rel",
            PHON.ONSET voc ] ].

adherence_n1 := n_mass_le &
 [ STEM < "adherence" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_adherence_n_1_rel",
            PHON.ONSET voc ] ].

adherent_a1 := adj_intrans_le &
 [ STEM < "adherent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_adherent_a_1_rel",
            PHON.ONSET voc ] ].

adherent_n1 := n_intr_le &
 [ STEM < "adherent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_adherent_n_1_rel",
            PHON.ONSET voc ] ].

adhesive_a1 := adj_intrans_le &
 [ STEM < "adhesive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_adhesive_a_1_rel",
            PHON.ONSET voc ] ].

adhesive_n1 := n_no_cmpnd_le &
 [ STEM < "adhesive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_adhesive_n_1_rel",
            PHON.ONSET voc ] ].

adhesive_n2 := n_mass_no_cmpnd_le &
 [ STEM < "adhesive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_adhesive_n_1_rel",
            PHON.ONSET voc ] ].

adieu_n1 := n_intr_le &
 [ STEM < "adieu" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_adieu_n_1_rel",
            PHON.ONSET voc ] ].

adieu_root_pre := adv_disc_preh_grt_le &
 [ STEM < "adieu" >,
   SYNSEM [ LKEYS.KEYREL.CARG "adieu",
            PHON.ONSET con ] ].

adj_abb_n1 := n_intr_le &
 [ STEM < "adj." >,
   SYNSEM [ LKEYS.KEYREL.PRED "_adjective_n_1_rel",
            PHON.ONSET voc ] ].

adj_abb_n2 := n_intr_le &
 [ STEM < "adj" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_adjective_n_1_rel",
            PHON.ONSET voc ] ].

adjacent_a1 := adj_intrans_le &
 [ STEM < "adjacent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_adjacent_a_1_rel",
            PHON.ONSET voc ] ].

adjectivally := adv_int_vp_le &
 [ STEM < "adjectivally" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_adjectival_a_1_rel",
            PHON.ONSET voc ] ].

adjective_n1 := n_intr_le &
 [ STEM < "adjective" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_adjective_n_1_rel",
            PHON.ONSET voc ] ].

adjectively := adv_int_vp_le &
 [ STEM < "adjectively" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_adjective_a_1_rel",
            PHON.ONSET voc ] ].

adjoin_v1 := v_np_trans_le &
 [ STEM < "adjoin" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_adjoin_v_1_rel",
            PHON.ONSET voc ] ].

adjoin_v2 := v_np_prep_trans_dors_le &
 [ STEM < "adjoin" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_adjoin_v_1_rel",
            PHON.ONSET voc ] ].

adjourn_v1 := v_np_trans_le &
 [ STEM < "adjourn" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_adjourn_v_1_rel",
            PHON.ONSET voc ] ].

adjudge_v1 := v_np_trans_le &
 [ STEM < "adjudge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_adjudge_v_1_rel",
            PHON.ONSET voc ] ].

adjudge_v2 := v_cp_non_trans_le &
 [ STEM < "adjudge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_adjudge_v_1_rel",
            PHON.ONSET voc ] ].

adjunct_a1 := adj_intrans_le &
 [ STEM < "adjunct" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_adjunct_a_1_rel",
            PHON.ONSET voc ] ].

adjunct_n1 := n_intr_le &
 [ STEM < "adjunct" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_adjunct_n_1_rel",
            PHON.ONSET voc ] ].

adjust_to_v1 := v_prep_intrans_le &
 [ STEM < "adjust" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_rel,
                    KEYREL.PRED "_adjust_v_1_rel" ],
            PHON.ONSET voc ] ].

adjust_v1 := v_np*_trans_le &
 [ STEM < "adjust" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_adjust_v_to_rel",
            PHON.ONSET voc ] ].

adjust_v2 := v_to_trans_le &
 [ STEM < "adjust" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_adjust_v_to_rel",
            PHON.ONSET voc ] ].

adjustable_a1 := adj_intrans_le &
 [ STEM < "adjustable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_adjustable_a_1_rel",
            PHON.ONSET voc ] ].

adjustment_n1 := n_mass_count_le &
 [ STEM < "adjustment" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_adjustment_n_1_rel",
            PHON.ONSET voc ] ].

admin_n1 := n_intr_le &
 [ STEM < "admin" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_admin_n_1_rel",
            PHON.ONSET voc ] ].

administer_v1 := v_to*_trans_le &
 [ STEM < "administer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_administer_v_to_rel",
            PHON.ONSET voc ] ].

administration_n1 := n_mass_count_ppof_le &
 [ STEM < "administration" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_administration_n_of_rel",
            PHON.ONSET voc ] ].

administrative_isect := adj_intrans_le &
 [ STEM < "administrative" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_administrative_a_1_rel",
            PHON.ONSET voc ] ].

administratively_adv1 := adv_int_vp_post_le &
 [ STEM < "administratively" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_administrative_a_1_rel",
            PHON.ONSET voc ] ].

administrator_n1 := n_ppof_le &
 [ STEM < "administrator" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_administrator_n_of_rel",
            PHON.ONSET voc ] ].

admirable_a1 := adj_intrans_le &
 [ STEM < "admirable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_admirable_a_1_rel",
            PHON.ONSET voc ] ].

admiration_n1 := n_mass_ppcomp_le &
 [ STEM < "admiration" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_admiration_n_of_rel" ],
            PHON.ONSET voc ] ].

admire_v1 := v_np_trans_le &
 [ STEM < "admire" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_admire_v_1_rel",
            PHON.ONSET voc ] ].

admire_v2 := v_cp_non_trans_le &
 [ STEM < "admire" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_admire_v_1_rel",
            PHON.ONSET voc ] ].

admission_n1 := n_mass_count_ppof_le &
 [ STEM < "admission" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_admission_n_of_rel",
            PHON.ONSET voc ] ].

admit_to_v1 := v_empty_prep_intrans_le &
 [ STEM < "admit" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_admit_v_to_rel" ],
            PHON.ONSET voc ] ].

admit_v1 := v_np*_trans_le &
 [ STEM < "admit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_admit_v_to_rel",
            PHON.ONSET voc ] ].

admit_v2 := v_cp_non_trans_le &
 [ STEM < "admit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_admit_v_to_rel",
            PHON.ONSET voc ] ].

admit_v3 := v_to_trans_le &
 [ STEM < "admit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_admit_v_to_rel",
            PHON.ONSET voc ] ].

admittedly_adv1 := adv_int_vp_post_le &
 [ STEM < "admittedly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_admitted_a_1_rel",
            PHON.ONSET voc ] ].

ado_n1 := n_mass_le &
 [ STEM < "ado" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ado_n_1_rel",
            PHON.ONSET voc ] ].

adolescent_a1 := adj_intrans_le &
 [ STEM < "adolescent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_adolescent_a_1_rel",
            PHON.ONSET voc ] ].

adolescent_n1 := n_intr_le &
 [ STEM < "adolescent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_adolescent_n_1_rel",
            PHON.ONSET voc ] ].

adopt_v1 := v_np*_trans_le &
 [ STEM < "adopt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_adopt_v_1_rel",
            PHON.ONSET voc ] ].

adoption_n1 := n_mass_le &
 [ STEM < "adoption" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_adoption_n_1_rel",
            PHON.ONSET voc ] ].

adore_v1 := v_np_trans_le &
 [ STEM < "adore" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_adore_v_1_rel",
            PHON.ONSET voc ] ].

adorn_v1 := v_np_trans_le &
 [ STEM < "adorn" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_adorn_v_1_rel",
            PHON.ONSET voc ] ].

adrenaline_n1 := n_intr_le &
 [ STEM < "adrenaline" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_adrenaline_n_1_rel",
            PHON.ONSET voc ] ].

adult_n1 := n_intr_le &
 [ STEM < "adult" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_adult_n_1_rel",
            PHON.ONSET voc ] ].

adv_abb_n1 := n_intr_le &
 [ STEM < "adv." >,
   SYNSEM [ LKEYS.KEYREL.PRED "_adverb_n_1_rel",
            PHON.ONSET voc ] ].

adv_abb_n2 := n_intr_le &
 [ STEM < "adv" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_adverb_n_1_rel",
            PHON.ONSET voc ] ].

advance_i_n1 := n_bare_nomod_le &
 [ STEM < "advance" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_advance_n_1_rel",
            PHON.ONSET voc ] ].

advance_n1 := n_intr_le &
 [ STEM < "advance" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_advance_n_1_rel",
            PHON.ONSET voc ] ].

advance_v1 := v_np_trans_noger_le &
 [ STEM < "advance" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_advance_v_1_rel",
            PHON.ONSET voc ] ].

advance_v2 := v_ditrans_le &
 [ STEM < "advance" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_advance_v_1_rel",
            PHON.ONSET voc ] ].

advance_v3 := v_prep_dir_le &
 [ STEM < "advance" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_advance_v_1_rel",
            PHON.ONSET voc ] ].

advance_v4 := v_expl_it_subj_np_np*_vp_inf_le &
 [ STEM < "advance" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_advance_v_x_rel",
            PHON.ONSET voc ] ].

advanced_a1 := adj_intrans_le &
 [ STEM < "advanced" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_advanced_a_1_rel",
            PHON.ONSET voc ] ].

advancement_n1 := n_mass_count_le &
 [ STEM < "advancement" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_advancement_n_1_rel",
            PHON.ONSET voc ] ].

advantage_n1 := n_intr_nosort_le &
 [ STEM < "advantage" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_advantage_n_1_rel",
            PHON.ONSET voc ] ].

advantage_n1_i := n_intr_nospr_le &
 [ STEM < "advantage" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_advantage_n_1_rel",
            PHON.ONSET voc ] ].

advantage_n2 := n_cpcomp_fin_le &
 [ STEM < "advantage" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_advantage_n_1_rel",
            PHON.ONSET voc ] ].

advantageous_a1 := adj_intrans_le &
 [ STEM < "advantageous" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_advantageous_a_1_rel",
            PHON.ONSET voc ] ].

advantageously_adv1 := adv_int_vp_post_le &
 [ STEM < "advantageously" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_advantageous_a_1_rel",
            PHON.ONSET voc ] ].

advent_n := n_intr_le &
 [ STEM < "advent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_advent_n_1_rel",
            PHON.ONSET voc ] ].

advent_n1 := n_season_div_le &
 [ STEM < "advent" >,
   SYNSEM [ LKEYS.KEYREL.CARG "advent",
            PHON.ONSET voc ] ].

advent_n2 := n_season_wspec_le &
 [ STEM < "advent" >,
   SYNSEM [ LKEYS.KEYREL.CARG "advent",
            PHON.ONSET voc ] ].

advent_n3 := n_season_np_le &
 [ STEM < "advent" >,
   SYNSEM [ LKEYS.KEYREL.CARG "advent",
            PHON.ONSET voc ] ].

adventure_n1 := n_mass_count_le &
 [ STEM < "adventure" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_adventure_n_1_rel",
            PHON.ONSET voc ] ].

adventurer_n1 := n_intr_le &
 [ STEM < "adventurer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_adventurer_n_1_rel",
            PHON.ONSET voc ] ].

adventurous_a1 := adj_intrans_le &
 [ STEM < "adventurous" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_adventurous_a_1_rel",
            PHON.ONSET voc ] ].

adverb_n1 := n_intr_le &
 [ STEM < "adverb" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_adverb_n_1_rel",
            PHON.ONSET voc ] ].

adverbal_a1 := adj_intrans_le &
 [ STEM < "adverbal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_adverbal_a_1_rel",
            PHON.ONSET voc ] ].

adverbial_a1 := adj_intrans_le &
 [ STEM < "adverbial" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_adverbial_a_1_rel",
            PHON.ONSET voc ] ].

adversary_n1 := n_intr_le &
 [ STEM < "adversary" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_adversary_n_1_rel",
            PHON.ONSET voc ] ].

adversative_a1 := adj_intrans_le &
 [ STEM < "adversative" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_adversative_a_1_rel",
            PHON.ONSET voc ] ].

adverse_a1 := adj_intrans_le &
 [ STEM < "adverse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_adverse_a_1_rel",
            PHON.ONSET voc ] ].

adversely := adv_int_vp_le &
 [ STEM < "adversely" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_adverse_a_1_rel",
            PHON.ONSET voc ] ].

advertise_for_v1 := v_empty_prep_intrans_le &
 [ STEM < "advertise" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_advertise_v_for_rel" ],
            PHON.ONSET voc ] ].

advertise_v1 := v_np*_trans_le &
 [ STEM < "advertise" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_advertise_v_1_rel",
            PHON.ONSET voc ] ].

advertise_v2 := v_np_as_le &
 [ STEM < "advertise" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_advertise_v_as_rel",
            PHON.ONSET voc ] ].

advertisement_n1 := n_intr_le &
 [ STEM < "advertisement" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_advertisement_n_1_rel",
            PHON.ONSET voc ] ].

advice_n1 := n_mass_le &
 [ STEM < "advice" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_advice_n_1_rel",
            PHON.ONSET voc ] ].

advisable_a1 := adj_intrans_le &
 [ STEM < "advisable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_advisable_a_1_rel",
            PHON.ONSET voc ] ].

advise_against_v1 := v_empty_prep_intrans_le &
 [ STEM < "advise" >,
   SYNSEM [ LKEYS [ --COMPKEY _against_p_sel_rel,
                    KEYREL.PRED "_advise_v_against_rel" ],
            PHON.ONSET voc ] ].

advise_v1 := v_np*_trans_le &
 [ STEM < "advise" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_advise_v_1_rel",
            PHON.ONSET voc ] ].

advise_v2 := v_np*_trans_cp_le &
 [ STEM < "advise" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_advise_v_1_rel",
            PHON.ONSET voc ] ].

advise_v3 := v_empty_prep_trans*_le &
 [ STEM < "advise" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_advise_v_of_rel" ],
            PHON.ONSET voc ] ].

advise_v4 := v_obj_equi_le &
 [ STEM < "advise" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_advise_v_1_rel",
            PHON.ONSET voc ] ].

advise_v5 := v_np_as_le &
 [ STEM < "advise" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_advise_v_as_rel",
            PHON.ONSET voc ] ].

advisor_n1 := n_intr_le &
 [ STEM < "advisor" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_advisor_n_1_rel",
            PHON.ONSET voc ] ].

advocate_n1 := n_intr_le &
 [ STEM < "advocate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_advocate_n_1_rel",
            PHON.ONSET voc ] ].

advocate_v1 := v_np_trans_le &
 [ STEM < "advocate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_advocate_v_1_rel",
            PHON.ONSET voc ] ].

advocate_v2 := v_cp_prop_non_trans_le &
 [ STEM < "advocate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_advocate_v_1_rel",
            PHON.ONSET voc ] ].

advocate_v3 := v_np_as_le &
 [ STEM < "advocate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_advocate_v_as_rel",
            PHON.ONSET voc ] ].

aerial_a1 := adj_intrans_le &
 [ STEM < "aerial" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_aerial_a_1_rel",
            PHON.ONSET voc ] ].

aerial_n1 := n_intr_le &
 [ STEM < "aerial" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_aerial_n_1_rel",
            PHON.ONSET voc ] ].

aesthetic_a1 := adj_intrans_le &
 [ STEM < "aesthetic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_aesthetic_a_1_rel",
            PHON.ONSET voc ] ].

aesthetic_n1 := n_intr_le &
 [ STEM < "aesthetic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_aesthetic_n_1_rel",
            PHON.ONSET voc ] ].

affair_n1 := n_intr_le &
 [ STEM < "affair" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_affair_n_1_rel",
            PHON.ONSET voc ] ].

affect_n1 := n_mass_count_le &
 [ STEM < "affect" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_affect_n_1_rel",
            PHON.ONSET voc ] ].

affect_v1 := v_np_trans_le &
 [ STEM < "affect" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_affect_v_1_rel",
            PHON.ONSET voc ] ].

affect_v2 := v_expl_it_subj_np_cp_le &
 [ STEM < "affect" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_affect_v_x_rel",
            PHON.ONSET voc ] ].

affection_n1 := n_mass_count_le &
 [ STEM < "affection" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_affection_n_1_rel",
            PHON.ONSET voc ] ].

affiliate_n1 := n_ppof_le &
 [ STEM < "affiliate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_affiliate_n_of_rel",
            PHON.ONSET voc ] ].

affiliate_with_v1 := v_empty_prep*_trans_le &
 [ STEM < "affiliate" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_affiliate_v_with_rel" ],
            PHON.ONSET voc ] ].

affiliate_with_v2 := v_empty_prep_intrans_le &
 [ STEM < "affiliate" >,
   SYNSEM [ LKEYS [ --COMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_affiliate_v_with_rel" ],
            PHON.ONSET voc ] ].

affirm_v1 := v_np_trans_le &
 [ STEM < "affirm" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_affirm_v_1_rel",
            PHON.ONSET voc ] ].

affirm_v2 := v_cp_non_trans_le &
 [ STEM < "affirm" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_affirm_v_1_rel",
            PHON.ONSET voc ] ].

affirmation_n1 := n_mass_count_ppof_le &
 [ STEM < "affirmation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_affirmation_n_of_rel",
            PHON.ONSET voc ] ].

affirmative_a1 := adj_intrans_le &
 [ STEM < "affirmative" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_affirmative_a_1_rel",
            PHON.ONSET voc ] ].

affirmative_n1 := n_intr_le &
 [ STEM < "affirmative" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_affirmative_n_1_rel",
            PHON.ONSET voc ] ].

affix_n1 := n_intr_le &
 [ STEM < "affix" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_affix_n_1_rel",
            PHON.ONSET voc ] ].

afflict_v1 := v_np_trans_le &
 [ STEM < "afflict" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_afflict_v_1_rel",
            PHON.ONSET voc ] ].

afflict_with_v1 := v_empty_prep_trans_le &
 [ STEM < "afflict" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_afflict_v_with_rel" ],
            PHON.ONSET voc ] ].

affliction_n1 := n_mass_count_le &
 [ STEM < "affliction" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_affliction_n_1_rel",
            PHON.ONSET voc ] ].

afflictive_a1 := adj_intrans_le &
 [ STEM < "afflictive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_afflictive_a_1_rel",
            PHON.ONSET voc ] ].

afford_v1 := v_np_trans_le &
 [ STEM < "afford" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_afford_v_1_rel",
            PHON.ONSET voc ] ].

afford_v2 := v_ditrans_le &
 [ STEM < "afford" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_afford_v_1_rel",
            PHON.ONSET voc ] ].

afford_with_v1 := v_empty_prep_trans_le &
 [ STEM < "afford" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_afford_v_with_rel" ],
            PHON.ONSET voc ] ].

affordable_a1 := adj_intrans_le &
 [ STEM < "affordable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_affordable_a_1_rel",
            PHON.ONSET voc ] ].

affront_n1 := n_intr_le &
 [ STEM < "affront" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_affront_n_1_rel",
            PHON.ONSET voc ] ].

affront_v1 := v_np_trans_le &
 [ STEM < "affront" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_affront_v_1_rel",
            PHON.ONSET voc ] ].

afghanistan_n1 := n_proper_le &
 [ STEM < "afghanistan" >,
   SYNSEM [ LKEYS.KEYREL.CARG "afghanistan",
            PHON.ONSET voc ] ].

afoot_a1 := adj_pred_intrans_le &
 [ STEM < "afoot" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_afoot_a_1_rel",
            PHON.ONSET voc ] ].

aforementioned_a1 := adj_intrans_le &
 [ STEM < "aforementioned" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_aforementioned_a_1_rel",
            PHON.ONSET voc ] ].

afraid_a1 := adj_pred_trans_le &
 [ STEM < "afraid" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_afraid_a_of_rel" ],
            PHON.ONSET voc ] ].

afraid_a2 := adj_reg_cp_le &
 [ STEM < "afraid" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_afraid_a_of_rel",
            PHON.ONSET voc ] ].

africa_n1 := n_proper_le &
 [ STEM < "africa" >,
   SYNSEM [ LKEYS.KEYREL.CARG "africa",
            PHON.ONSET voc ] ].

african_a1 := adj_intrans_le &
 [ STEM < "african" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_african_a_1_rel",
            PHON.ONSET voc ] ].

african_n1 := n_intr_le &
 [ STEM < "african" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_african_n_1_rel",
            PHON.ONSET voc ] ].

aft_adv := pp_le &
 [ STEM < "aft" >,
   SYNSEM [ LKEYS.KEYREL.PRED _aft_p_rel,
            PHON.ONSET voc ] ].

after2 := p_subconj_le &
 [ STEM < "after" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_after_x_h_rel",
            PHON.ONSET voc ] ].

after_all_adv1 := adv_int_vp_post_le &
 [ STEM < "after", "all" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_after+all_a_1_rel",
            PHON.ONSET voc ] ].

after_all_adv2 := adv_int_vp_post_le &
 [ STEM < "afterall" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_after+all_a_1_rel",
            PHON.ONSET voc ] ].

after_conj := conj_complex_after_le &
 [ STEM < "after" >,
   SYNSEM.PHON.ONSET voc ].

after_p := p_le &
 [ STEM < "after" >,
   SYNSEM [ LKEYS.KEYREL.PRED _after_p_rel,
            PHON.ONSET voc ] ].

after_pp := pp_nmod_temp_le &
 [ STEM < "after" >,
   SYNSEM [ LKEYS.KEYREL.PRED _after_p_rel,
            PHON.ONSET voc ] ].

after_prtcl := p_prtcl_le &
 [ STEM < "after" >,
   SYNSEM [ LKEYS.KEYREL.PRED _after_p_sel_rel,
            PHON.ONSET voc ] ].

after_sail_n1 := n_intr_le &
 [ STEM < "after", "sail" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_after+sail_n_1_rel",
            PHON.ONSET voc ] ].

afternoon_nc_n1 := n_day_part_nocomp_le &
 [ STEM < "afternoon" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_afternoon_n_of_rel",
            PHON.ONSET voc ] ].

afternoon_pl_def := n_def_day_part_pl_le &
 [ STEM < "afternoons" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_afternoon_n_of_rel",
            PHON.ONSET voc ] ].

afternoon_pl_n1 := n_day_part_pl_le &
 [ STEM < "afternoons" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_afternoon_n_of_rel",
            PHON.ONSET voc ] ].

afternoon_sg_def := n_def_day_part_sg_le &
 [ STEM < "afternoon" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_afternoon_n_of_rel",
            PHON.ONSET voc ] ].

afternoon_sg_n1 := n_day_part_sg_le &
 [ STEM < "afternoon" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_afternoon_n_of_rel",
            PHON.ONSET voc ] ].

afternoonish_a1 := adj_intrans_le &
 [ STEM < "afternoonish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_afternoonish_a_1_rel",
            PHON.ONSET voc ] ].

afterward_adv1 := pp_le &
 [ STEM < "afterward" >,
   SYNSEM [ LKEYS.KEYREL.PRED _afterward_p_rel,
            PHON.ONSET voc ] ].

afterwards_adv1 := pp_vpmod_le &
 [ STEM < "afterwards" >,
   SYNSEM [ LKEYS.KEYREL.PRED _afterwards_p_rel,
            PHON.ONSET voc ] ].

afterwards_pp := pp_nmod_temp_le &
 [ STEM < "afterwards" >,
   SYNSEM [ LKEYS.KEYREL.PRED _afterwards_p_rel,
            PHON.ONSET voc ] ].

again_adv1 := adv_int_vp_le &
 [ STEM < "again" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_again_a_1_rel",
            PHON.ONSET voc ] ].

against := p_le &
 [ STEM < "against" >,
   SYNSEM [ LKEYS.KEYREL.PRED _against_p_rel,
            PHON.ONSET voc ] ].

against_prtcl := p_prtcl_le &
 [ STEM < "against" >,
   SYNSEM [ LKEYS.KEYREL.PRED _against_p_sel_rel,
            PHON.ONSET voc ] ].

agate_n1 := n_mass_count_le &
 [ STEM < "agate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_agate_n_1_rel",
            PHON.ONSET voc ] ].

age_n1 := n_intr_le &
 [ STEM < "age" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_age_n_1_rel",
            PHON.ONSET voc ] ].

age_old_a1 := adj_intrans_le &
 [ STEM < "age-", "old" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_age-old_a_1_rel",
            PHON.ONSET voc ] ].

age_v1 := v_unacc_le &
 [ STEM < "age" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_age_v_1_rel",
            PHON.ONSET voc ] ].

age_v2 := v_np_trans_noger_le &
 [ STEM < "age" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_age_v_cause_rel",
            PHON.ONSET voc ] ].

aged_title := n_title_num_le &
 [ STEM < "aged" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_aged_n_1_rel",
            PHON.ONSET voc ] ].

agency_n := n_intr_le &
 [ STEM < "agency" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_agency_n_1_rel",
            PHON.ONSET voc ] ].

agenda_n1 := n_intr_le &
 [ STEM < "agenda" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_agenda_n_1_rel",
            PHON.ONSET voc ] ].

agent_n := n_intr_le &
 [ STEM < "agent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_agent_n_1_rel",
            PHON.ONSET voc ] ].

agfa_n1 := n_proper_le &
 [ STEM < "agfa" >,
   SYNSEM [ LKEYS.KEYREL.CARG "agfa",
            PHON.ONSET voc ] ].

aggravate_v1 := v_np_trans_le &
 [ STEM < "aggravate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_aggravate_v_1_rel",
            PHON.ONSET voc ] ].

aggregate_n1 := n_intr_le &
 [ STEM < "aggregate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_aggregate_n_1_rel",
            PHON.ONSET voc ] ].

aggregate_v1 := v_np_trans_le &
 [ STEM < "aggregate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_aggregate_v_1_rel",
            PHON.ONSET voc ] ].

aggregation_n1 := n_mass_count_ppof_le &
 [ STEM < "aggregation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_aggregation_n_of_rel",
            PHON.ONSET voc ] ].

aggressive_a1 := adj_intrans_le &
 [ STEM < "aggressive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_aggressive_a_1_rel",
            PHON.ONSET voc ] ].

agile_a1 := adj_intrans_le &
 [ STEM < "agile" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_agile_a_1_rel",
            PHON.ONSET voc ] ].

agitate_for_v1 := v_empty_prep_intrans_le &
 [ STEM < "agitate" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_agitate_v_for_rel" ],
            PHON.ONSET voc ] ].

agitate_v1 := v_np_trans_le &
 [ STEM < "agitate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_agitate_v_1_rel",
            PHON.ONSET voc ] ].

agitation_n1 := n_mass_le &
 [ STEM < "agitation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_agitation_n_1_rel",
            PHON.ONSET voc ] ].

agnes_n1 := n_proper_le &
 [ STEM < "agnes" >,
   SYNSEM [ LKEYS.KEYREL.CARG "agnes",
            PHON.ONSET voc ] ].

ago_p1 := pp_post_le &
 [ STEM < "ago" >,
   SYNSEM [ LKEYS.KEYREL.PRED _ago_p_rel,
            PHON.ONSET voc ] ].

agree_on_v1 := v_empty_prep_intrans_le &
 [ STEM < "agree" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_agree_v_on_rel" ],
            PHON.ONSET voc ] ].

agree_to_v1 := v_empty_prep_intrans_le &
 [ STEM < "agree" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_agree_v_to_rel" ],
            PHON.ONSET voc ] ].

agree_v1 := v_pp_cp_le &
 [ STEM < "agree" >,
   SYNSEM [ LKEYS [ --COMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_agree_v_with_rel" ],
            PHON.ONSET voc ] ].

agree_v2 := v_double_pp*_le &
 [ STEM < "agree" >,
   SYNSEM [ LKEYS [ --COMPKEY _with_p_rel,
                    --OCOMPKEY _about_p_rel,
                    KEYREL.PRED "_agree_v_on_rel" ],
            PHON.ONSET voc ] ].

agree_v3 := v_subj_equi_le &
 [ STEM < "agree" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_agree_v_1_rel",
            PHON.ONSET voc ] ].

agreeable_a1 := adj_intrans_le &
 [ STEM < "agreeable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_agreeable_a_1_rel",
            PHON.ONSET voc ] ].

agreeably_adv1 := adv_int_vp_post_le &
 [ STEM < "agreeably" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_agreeable_a_1_rel",
            PHON.ONSET voc ] ].

agreed_root_post := adv_s_post_word_nospec_le &
 [ STEM < "agreed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_agreed_a_1_rel",
            PHON.ONSET voc ] ].

agreed_root_pre := adv_s_pre_word_root_le &
 [ STEM < "agreed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_agreed_a_1_rel",
            PHON.ONSET voc ] ].

agreement_n1 := n_mass_count_le &
 [ STEM < "agreement" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_agreement_n_1_rel",
            PHON.ONSET voc ] ].

agricultural_a1 := adj_intrans_le &
 [ STEM < "agricultural" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_agricultural_a_1_rel",
            PHON.ONSET voc ] ].

agriculture_n1 := n_mass_le &
 [ STEM < "agriculture" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_agriculture_n_1_rel",
            PHON.ONSET voc ] ].

aground_a1 := adj_pred_intrans_le &
 [ STEM < "aground" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_aground_a_1_rel",
            PHON.ONSET voc ] ].

agtr_nd := n_proper_le &
 [ STEM < "agtr" >,
   SYNSEM [ LKEYS.KEYREL.CARG "agtr",
            PHON.ONSET voc ] ].

ah_root := adv_s_pre_word_root_le &
 [ STEM < "ah" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ah_a_1_rel",
            PHON.ONSET voc ] ].

aha_root := adv_s_pre_word_root_le &
 [ STEM < "aha" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_aha_a_1_rel",
            PHON.ONSET voc ] ].

ahead_adv := pp_le &
 [ STEM < "ahead" >,
   SYNSEM [ LKEYS.KEYREL.PRED _ahead_p_rel,
            PHON.ONSET voc ] ].

ahead_of := p_le &
 [ STEM < "ahead", "of" >,
   SYNSEM [ LKEYS.KEYREL.PRED _ahead+of_p_rel,
            PHON.ONSET voc ] ].

ahead_prtcl := pp_prtcl_le &
 [ STEM < "ahead" >,
   SYNSEM [ LKEYS.KEYREL.PRED _ahead_p_sel_rel,
            PHON.ONSET voc ] ].

ahold_n1_i := n_intr_nospr_le &
 [ STEM < "ahold" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ahold_n_i_rel",
            PHON.ONSET voc ] ].

ahold_n2_i := n_intr_nospr_le &
 [ STEM < "a", "hold" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ahold_n_i_rel",
            PHON.ONSET voc ] ].

ai_n := n_mass_le &
 [ STEM < "ai" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ai_n_1_rel",
            PHON.ONSET voc ] ].

aid_n1 := n_mass_count_le &
 [ STEM < "aid" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_aid_n_1_rel",
            PHON.ONSET voc ] ].

aid_v1 := v_np*_trans_le &
 [ STEM < "aid" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_aid_v_1_rel",
            PHON.ONSET voc ] ].

aids_n1 := n_proper_le &
 [ STEM < "aids" >,
   SYNSEM [ LKEYS.KEYREL.CARG "aids",
            PHON.ONSET voc ] ].

ail_v1 := v_unacc_le &
 [ STEM < "ail" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ail_v_1_rel",
            PHON.ONSET voc ] ].

ail_v2 := v_np_trans_noger_le &
 [ STEM < "ail" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ail_v_cause_rel",
            PHON.ONSET voc ] ].

ailment_n1 := n_intr_le &
 [ STEM < "ailment" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ailment_n_1_rel",
            PHON.ONSET voc ] ].

aim_at_v1 := v_empty_prep_intrans_le &
 [ STEM < "aim" >,
   SYNSEM [ LKEYS [ --COMPKEY _at_p_sel_rel,
                    KEYREL.PRED "_aim_v_at_rel" ],
            PHON.ONSET voc ] ].

aim_at_v2 := v_empty_prep_trans_le &
 [ STEM < "aim" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _at_p_sel_rel,
                    KEYREL.PRED "_aim_v_at_rel" ],
            PHON.ONSET voc ] ].

aim_n1 := n_intr_le &
 [ STEM < "aim" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_aim_n_1_rel",
            PHON.ONSET voc ] ].

aim_v := v_empty_prep_intrans_le &
 [ STEM < "aim" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_aim_v_for_rel" ],
            PHON.ONSET voc ] ].

aim_v1 := v_np*_trans_le &
 [ STEM < "aim" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_aim_v_1_rel",
            PHON.ONSET voc ] ].

aim_v2 := v_subj_equi_le &
 [ STEM < "aim" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_aim_v_1_rel",
            PHON.ONSET voc ] ].

aint_be_c_am_neg_1 := vc_prd_am_neg_le &
 [ STEM < "ain't" >,
   SYNSEM.PHON.ONSET voc ].

aint_be_c_am_neg_2 := vc_prd_am_neg_le &
 [ STEM < "ain", "'t" >,
   SYNSEM.PHON.ONSET voc ].

aint_be_c_are_neg_1 := vc_prd_are_neg_le &
 [ STEM < "ain't" >,
   SYNSEM.PHON.ONSET voc ].

aint_be_c_are_neg_2 := vc_prd_are_neg_le &
 [ STEM < "ain", "'t" >,
   SYNSEM.PHON.ONSET voc ].

aint_be_c_is_neg_1 := vc_prd_is_neg_le &
 [ STEM < "ain't" >,
   SYNSEM.PHON.ONSET voc ].

aint_be_c_is_neg_2 := vc_prd_is_neg_le &
 [ STEM < "ain", "'t" >,
   SYNSEM.PHON.ONSET voc ].

aint_be_id_am_neg_1 := vc_id_am_neg_le &
 [ STEM < "ain't" >,
   SYNSEM.PHON.ONSET voc ].

aint_be_id_am_neg_2 := vc_id_am_neg_le &
 [ STEM < "ain", "'t" >,
   SYNSEM.PHON.ONSET voc ].

aint_be_id_are_neg_1 := vc_id_are_neg_le &
 [ STEM < "ain't" >,
   SYNSEM.PHON.ONSET voc ].

aint_be_id_are_neg_2 := vc_id_are_neg_le &
 [ STEM < "ain", "'t" >,
   SYNSEM.PHON.ONSET voc ].

aint_be_id_is_neg_1 := vc_id_is_neg_le &
 [ STEM < "ain't" >,
   SYNSEM.PHON.ONSET voc ].

aint_be_id_is_neg_2 := vc_id_is_neg_le &
 [ STEM < "ain", "'t" >,
   SYNSEM.PHON.ONSET voc ].

aint_be_it_cop_is_neg_1 := vc_it_is_neg_le &
 [ STEM < "ain't" >,
   SYNSEM.PHON.ONSET voc ].

aint_be_it_cop_is_neg_2 := vc_it_is_neg_le &
 [ STEM < "ain", "'t" >,
   SYNSEM.PHON.ONSET voc ].

aint_be_nv_are_neg_1 := vc_nv_are_neg_le &
 [ STEM < "ain't" >,
   SYNSEM.PHON.ONSET voc ].

aint_be_nv_are_neg_2 := vc_nv_are_neg_le &
 [ STEM < "ain", "'t" >,
   SYNSEM.PHON.ONSET voc ].

aint_be_nv_is_neg_1 := vc_nv_is_neg_le &
 [ STEM < "ain't" >,
   SYNSEM.PHON.ONSET voc ].

aint_be_nv_is_neg_2 := vc_nv_is_neg_le &
 [ STEM < "ain", "'t" >,
   SYNSEM.PHON.ONSET voc ].

aint_be_th_cop_are_neg_1 := vc_there_are_neg_le &
 [ STEM < "ain't" >,
   SYNSEM.PHON.ONSET voc ].

aint_be_th_cop_are_neg_2 := vc_there_are_neg_le &
 [ STEM < "ain", "'t" >,
   SYNSEM.PHON.ONSET voc ].

aint_be_th_cop_is_neg_1 := vc_there_is_neg_le &
 [ STEM < "ain't" >,
   SYNSEM.PHON.ONSET voc ].

aint_be_th_cop_is_neg_2 := vc_there_is_neg_le &
 [ STEM < "ain", "'t" >,
   SYNSEM.PHON.ONSET voc ].

aint_pl_have_aux_1 := va_have_fin_neg_le &
 [ STEM < "ain't" >,
   SYNSEM.PHON.ONSET voc ].

aint_pl_have_aux_2 := va_have_fin_neg_le &
 [ STEM < "ain", "'t" >,
   SYNSEM.PHON.ONSET voc ].

aint_sg_have_aux_1 := va_has_neg_le &
 [ STEM < "ain't" >,
   SYNSEM.PHON.ONSET voc ].

aint_sg_have_aux_2 := va_has_neg_le &
 [ STEM < "ain", "'t" >,
   SYNSEM.PHON.ONSET voc ].

air_conditioner_n1 := n_intr_le &
 [ STEM < "air", "conditioner" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_air+conditioner_n_1_rel",
            PHON.ONSET voc ] ].

air_france_n1 := n_proper_le &
 [ STEM < "air", "france" >,
   SYNSEM [ LKEYS.KEYREL.CARG "air_france",
            PHON.ONSET voc ] ].

air_n1 := n_mass_le &
 [ STEM < "air" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_air_n_1_rel",
            PHON.ONSET voc ] ].

air_out_v1 := v_particle_np_le &
 [ STEM < "air" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_air_v_out_rel" ],
            PHON.ONSET voc ] ].

air_out_v2 := v_particle_le &
 [ STEM < "air" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_air_v_out_rel" ],
            PHON.ONSET voc ] ].

air_v1 := v_unacc_le &
 [ STEM < "air" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_air_v_1_rel",
            PHON.ONSET voc ] ].

air_v2 := v_np_trans_noger_le &
 [ STEM < "air" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_air_v_cause_rel",
            PHON.ONSET voc ] ].

aircraft_n1 := n_intr_le &
 [ STEM < "aircraft" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_aircraft_n_1_rel",
            PHON.ONSET voc ] ].

airline_n1 := n_intr_le &
 [ STEM < "airline" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_airline_n_1_rel",
            PHON.ONSET voc ] ].

airmail_n1 := n_mass_le &
 [ STEM < "airmail" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_airmail_n_1_rel",
            PHON.ONSET voc ] ].

airplane_n1 := n_intr_le &
 [ STEM < "airplane" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_airplane_n_1_rel",
            PHON.ONSET voc ] ].

airport_n1 := n_intr_le &
 [ STEM < "airport" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_airport_n_1_rel",
            PHON.ONSET voc ] ].

airway_n1 := n_intr_le &
 [ STEM < "airway" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_airway_n_1_rel",
            PHON.ONSET voc ] ].

airy_a1 := adj_intrans_le &
 [ STEM < "airy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_airy_a_1_rel",
            PHON.ONSET voc ] ].

akd_nd := n_proper_le &
 [ STEM < "akd" >,
   SYNSEM [ LKEYS.KEYREL.CARG "akd",
            PHON.ONSET voc ] ].

akdt_nd := n_proper_le &
 [ STEM < "akdt" >,
   SYNSEM [ LKEYS.KEYREL.CARG "akdt",
            PHON.ONSET voc ] ].

akin_a1 := adj_pred_trans_le &
 [ STEM < "akin" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_akin_a_1_rel" ],
            PHON.ONSET voc ] ].

alabama_n1 := n_proper_le &
 [ STEM < "alabama" >,
   SYNSEM [ LKEYS.KEYREL.CARG "alabama",
            PHON.ONSET voc ] ].

alabama_n2 := n_proper_abb_le &
 [ STEM < "ab" >,
   SYNSEM [ LKEYS.KEYREL.CARG "alabama",
            PHON.ONSET voc ] ].

aladdin_n1 := n_proper_le &
 [ STEM < "aladdin" >,
   SYNSEM [ LKEYS.KEYREL.CARG "aladdin",
            PHON.ONSET voc ] ].

alan_n1 := n_proper_le &
 [ STEM < "alan" >,
   SYNSEM [ LKEYS.KEYREL.CARG "alan",
            PHON.ONSET voc ] ].

alarm_n1 := n_mass_count_le &
 [ STEM < "alarm" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_alarm_n_1_rel",
            PHON.ONSET voc ] ].

alarm_v1 := v_np_trans_le &
 [ STEM < "alarm" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_alarm_v_1_rel",
            PHON.ONSET voc ] ].

alarm_v2 := v_expl_it_subj_np_cp_le &
 [ STEM < "alarm" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_alarm_v_x_rel",
            PHON.ONSET voc ] ].

alas_post_root := adv_s_post_word_nospec_le &
 [ STEM < "alas" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_alas_a_1_rel",
            PHON.ONSET voc ] ].

alas_pre_root := adv_s_pre_word_root_le &
 [ STEM < "alas" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_alas_a_1_rel",
            PHON.ONSET voc ] ].

alaska_n1 := n_proper_le &
 [ STEM < "alaska" >,
   SYNSEM [ LKEYS.KEYREL.CARG "alaska",
            PHON.ONSET voc ] ].

alaska_n2 := n_proper_abb_le &
 [ STEM < "al" >,
   SYNSEM [ LKEYS.KEYREL.CARG "alaska",
            PHON.ONSET voc ] ].

albeit := p_subconj_le &
 [ STEM < "albeit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_albeit_x_rel",
            PHON.ONSET voc ] ].

alberta_n1 := n_proper_le &
 [ STEM < "alberta" >,
   SYNSEM [ LKEYS.KEYREL.CARG "alberta",
            PHON.ONSET voc ] ].

album_n1 := n_intr_le &
 [ STEM < "album" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_album_n_1_rel",
            PHON.ONSET voc ] ].

alcohol_n1 := n_intr_le &
 [ STEM < "alcohol" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_alcohol_n_1_rel",
            PHON.ONSET voc ] ].

alcoholic_a1 := adj_intrans_le &
 [ STEM < "alcoholic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_alcoholic_a_1_rel",
            PHON.ONSET voc ] ].

alcoholic_n1 := n_intr_le &
 [ STEM < "alcoholic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_alcoholic_n_1_rel",
            PHON.ONSET voc ] ].

alcoholics_anonymous := n_proper_le &
 [ STEM < "alcoholics", "anonymous" >,
   SYNSEM [ LKEYS.KEYREL.CARG "alcoholics_anonymous",
            PHON.ONSET voc ] ].

alderman_n1 := n_intr_le &
 [ STEM < "alderman" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_alderman_n_1_rel",
            PHON.ONSET voc ] ].

aldous_n1 := n_proper_le &
 [ STEM < "aldous" >,
   SYNSEM [ LKEYS.KEYREL.CARG "aldous",
            PHON.ONSET voc ] ].

aldrin_n1 := n_proper_le &
 [ STEM < "aldrin" >,
   SYNSEM [ LKEYS.KEYREL.CARG "aldrin",
            PHON.ONSET voc ] ].

ale_n1 := n_mass_count_le &
 [ STEM < "ale" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ale_n_1_rel",
            PHON.ONSET voc ] ].

alehouse_n1 := n_intr_le &
 [ STEM < "alehouse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_alehouse_n_1_rel",
            PHON.ONSET voc ] ].

aleph := n_proper_le &
 [ STEM < "aleph" >,
   SYNSEM [ LKEYS.KEYREL.CARG "aleph",
            PHON.ONSET voc ] ].

alert_a1 := adj_intrans_le &
 [ STEM < "alert" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_alert_a_1_rel",
            PHON.ONSET voc ] ].

alert_n1 := n_intr_le &
 [ STEM < "alert" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_alert_n_1_rel",
            PHON.ONSET voc ] ].

alert_v1 := v_np_trans_cp_le &
 [ STEM < "alert" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_alert_v_1_rel",
            PHON.ONSET voc ] ].

alert_v2 := v_to*_trans_le &
 [ STEM < "alert" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_alert_v_to_rel",
            PHON.ONSET voc ] ].

alex_n1 := n_proper_le &
 [ STEM < "alex" >,
   SYNSEM [ LKEYS.KEYREL.CARG "alex",
            PHON.ONSET voc ] ].

algae_n1 := n_mass_count_le &
 [ STEM < "algae" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_algae_n_1_rel",
            PHON.ONSET con ] ].

algorithm_n1 := n_intr_le &
 [ STEM < "algorithm" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_algorithm_n_1_rel",
            PHON.ONSET voc ] ].

ali_n1 := n_proper_le &
 [ STEM < "ali" >,
   SYNSEM [ LKEYS.KEYREL.CARG "ali",
            PHON.ONSET voc ] ].

alias_n1 := n_intr_le &
 [ STEM < "alias" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_alias_n_1_rel",
            PHON.ONSET voc ] ].

alice_n1 := n_proper_le &
 [ STEM < "alice" >,
   SYNSEM [ LKEYS.KEYREL.CARG "alice",
            PHON.ONSET voc ] ].

alienate_v1 := v_np_trans_le &
 [ STEM < "alienate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_alienate_v_1_rel",
            PHON.ONSET voc ] ].

alienation_n1 := n_mass_count_le &
 [ STEM < "alienation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_alienation_n_1_rel",
            PHON.ONSET voc ] ].

alight_a1 := adj_intrans_le &
 [ STEM < "alight" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_alight_a_1_rel",
            PHON.ONSET voc ] ].

alight_v1 := v_unerg_le &
 [ STEM < "alight" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_alight_v_1_rel",
            PHON.ONSET voc ] ].

align_v1 := v_unacc_le &
 [ STEM < "align" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_align_v_1_rel",
            PHON.ONSET voc ] ].

align_v2 := v_np_trans_noger_le &
 [ STEM < "align" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_align_v_cause_rel",
            PHON.ONSET voc ] ].

align_with_v1 := v_empty_prep_trans_le &
 [ STEM < "align" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_align_v_with_rel" ],
            PHON.ONSET voc ] ].

alignment_n1 := n_ppof_le &
 [ STEM < "alignment" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_alignment_n_of_rel",
            PHON.ONSET voc ] ].

alike_a1 := adj_pred_intrans_le &
 [ STEM < "alike" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_alike_a_1_rel",
            PHON.ONSET voc ] ].

aliment_n1 := n_mass_le &
 [ STEM < "aliment" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_aliment_n_1_rel",
            PHON.ONSET voc ] ].

alive_a1 := adj_pred_intrans_le &
 [ STEM < "alive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_alive_a_1_rel",
            PHON.ONSET voc ] ].

alkali_n1 := n_intr_le &
 [ STEM < "alkali" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_alkali_n_1_rel",
            PHON.ONSET voc ] ].

alkaline_a1 := adj_intrans_le &
 [ STEM < "alkaline" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_alkaline_a_1_rel",
            PHON.ONSET voc ] ].

alkaline_n1 := n_intr_le &
 [ STEM < "alkaline" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_alkaline_n_1_rel",
            PHON.ONSET voc ] ].

all := det_part_pl_mass_le &
 [ STEM < "all" >,
   SYNSEM [ LKEYS.KEYREL.PRED _all_q_rel,
            PHON.ONSET voc ] ].

all_adv1 := adv_int_vp_aux_le &
 [ STEM < "all" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_all_a_1_rel",
            PHON.ONSET voc ] ].

all_afternoon_long_adv1 := adv_int_vp_post_le &
 [ STEM < "all", "afternoon", "long" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_all+afternoon+long_a_1_rel",
            PHON.ONSET voc ] ].

all_around_adv1 := adv_int_vp_post_le &
 [ STEM < "all", "around" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_all+around_a_1_rel",
            PHON.ONSET voc ] ].

all_around_p := p_reg_le &
 [ STEM < "all", "around" >,
   SYNSEM [ LKEYS.KEYREL.PRED _all+around_p_rel,
            PHON.ONSET voc ] ].

all_but_adv1 := adv_int_vp_pre_le &
 [ STEM < "all", "but" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_all+but_a_1_rel",
            PHON.ONSET con ] ].

all_day_a1 := adj_attr_intrans_le &
 [ STEM < "all-", "day" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_all+day_a_1_rel",
            PHON.ONSET voc ] ].

all_day_a2 := adj_attr_intrans_le &
 [ STEM < "all", "day" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_all+day_a_1_rel",
            PHON.ONSET voc ] ].

all_day_long_adv1 := adv_int_vp_post_le &
 [ STEM < "all", "day", "long" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_all+day+long_a_1_rel",
            PHON.ONSET voc ] ].

all_deg := adv_degree_spec_v_le &
 [ STEM < "all" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_all_x_deg_rel",
            PHON.ONSET voc ] ].

all_deg2 := adv_degree_spec_prep_dir_only_le &
 [ STEM < "all" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_all_x_deg_rel",
            PHON.ONSET voc ] ].

all_det_adj := det_all_temp_le &
 [ STEM < "all" >,
   SYNSEM [ LKEYS.ALTKEYREL.PRED "_all_a_1_rel",
            PHON.ONSET voc ] ].

all_month_long_adv1 := adv_int_vp_post_le &
 [ STEM < "all", "month", "long" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_all+month+long_a_1_rel",
            PHON.ONSET voc ] ].

all_morning_long_adv1 := adv_int_vp_post_le &
 [ STEM < "all", "morning", "long" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_all+morning+long_a_1_rel",
            PHON.ONSET voc ] ].

all_night_a1 := adj_attr_intrans_le &
 [ STEM < "all-", "night" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_all+night_a_1_rel",
            PHON.ONSET voc ] ].

all_night_a2 := adj_attr_intrans_le &
 [ STEM < "all", "night" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_all+night_a_1_rel",
            PHON.ONSET voc ] ].

all_night_long_adv1 := adv_int_vp_post_le &
 [ STEM < "all", "night", "long" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_all+night+long_a_1_rel",
            PHON.ONSET voc ] ].

all_over_adv1 := adv_int_vp_post_le &
 [ STEM < "all", "over" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_all+over_a_1_rel",
            PHON.ONSET voc ] ].

all_over_p := p_reg_le &
 [ STEM < "all", "over" >,
   SYNSEM [ LKEYS.KEYREL.PRED _all+over_p_rel,
            PHON.ONSET voc ] ].

all_pn := n_part_npcomp_agr_le &
 [ STEM < "all" >,
   SYNSEM [ LKEYS.ALTKEYREL.PRED _all_q_rel,
            PHON.ONSET voc ] ].

all_right_a1 := adj_intrans_le &
 [ STEM < "all", "right" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_allright_a_1_rel",
            PHON.ONSET voc ] ].

all_saints_day := n_holiday_le &
 [ STEM < "all", "saints", "day" >,
   SYNSEM [ LKEYS.KEYREL.CARG "all_saints_day",
            PHON.ONSET voc ] ].

all_season_long_adv1 := adv_int_vp_post_le &
 [ STEM < "all", "season", "long" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_all+season+long_a_1_rel",
            PHON.ONSET voc ] ].

all_summer_long_adv1 := adv_int_vp_post_le &
 [ STEM < "all", "summer", "long" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_all+summer+long_a_1_rel",
            PHON.ONSET voc ] ].

all_the_more_deg := adv_degree_spec_v_le &
 [ STEM < "all", "the", "more" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_all+the+more_x_rel",
            PHON.ONSET voc ] ].

all_the_way := adv_int_vp_le &
 [ STEM < "all", "the", "way" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_all+the+way_a_1_rel",
            PHON.ONSET voc ] ].

all_the_way_deg := adv_degree_spec_le &
 [ STEM < "all", "the", "way" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_all+the+way_x_deg_rel",
            PHON.ONSET voc ] ].

all_week_long_adv1 := adv_int_vp_post_le &
 [ STEM < "all", "week", "long" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_all+week+long_a_1_rel",
            PHON.ONSET voc ] ].

all_winter_long_adv1 := adv_int_vp_post_le &
 [ STEM < "all", "winter", "long" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_all+winter+long_a_1_rel",
            PHON.ONSET voc ] ].

all_year_long_adv1 := adv_int_vp_post_le &
 [ STEM < "all", "year", "long" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_all+year+long_a_1_rel",
            PHON.ONSET voc ] ].

allegation_n1 := n_mass_count_le &
 [ STEM < "allegation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_allegation_n_1_rel",
            PHON.ONSET voc ] ].

allege_v1 := v_cp_prop_non_trans_le &
 [ STEM < "allege" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_allege_v_1_rel",
            PHON.ONSET voc ] ].

allege_v2 := v_sor_le &
 [ STEM < "allege" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_allege_v_1_rel",
            PHON.ONSET con ] ].

alleged_a1 := adj_attr_intrans_le &
 [ STEM < "alleged" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_alleged_a_1_rel",
            PHON.ONSET voc ] ].

allegedly_adv1 := adv_int_vp_aux_le &
 [ STEM < "allegedly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_alleged_a_1_rel",
            PHON.ONSET voc ] ].

allegheny_n1 := n_proper_le &
 [ STEM < "allegheny" >,
   SYNSEM [ LKEYS.KEYREL.CARG "allegheny",
            PHON.ONSET voc ] ].

allegiance_n1 := n_mass_count_le &
 [ STEM < "allegiance" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_allegiance_n_1_rel",
            PHON.ONSET voc ] ].

allen_n1 := n_proper_le &
 [ STEM < "allen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "allen",
            PHON.ONSET voc ] ].

allequippa_n1 := n_proper_city_le &
 [ STEM < "allequippa" >,
   SYNSEM [ LKEYS.KEYREL.CARG "allequippa",
            PHON.ONSET voc ] ].

allergic_a1 := adj_intrans_le &
 [ STEM < "allergic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_allergic_a_1_rel",
            PHON.ONSET voc ] ].

allergy_n1 := n_intr_le &
 [ STEM < "allergy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_allergy_n_1_rel",
            PHON.ONSET voc ] ].

alleviate_v1 := v_np_trans_le &
 [ STEM < "alleviate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_alleviate_v_1_rel",
            PHON.ONSET voc ] ].

alley_n1 := n_proper_le &
 [ STEM < "alley" >,
   SYNSEM [ LKEYS.KEYREL.CARG "alley",
            PHON.ONSET voc ] ].

alley_post_ttl := n_post_title_le &
 [ STEM < "alley" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_alley_n_1_rel",
            PHON.ONSET voc ] ].

alleyway_n1 := n_intr_le &
 [ STEM < "alleyway" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_alleyway_n_1_rel",
            PHON.ONSET voc ] ].

alliance_n1 := n_intr_le &
 [ STEM < "alliance" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_alliance_n_1_rel",
            PHON.ONSET voc ] ].

allied_chemicals_n1 := n_proper_le &
 [ STEM < "allied", "chemicals" >,
   SYNSEM [ LKEYS.KEYREL.CARG "allied_chemicals",
            PHON.ONSET voc ] ].

allocate_v1 := v_to*_trans_le &
 [ STEM < "allocate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_allocate_v_to_rel",
            PHON.ONSET voc ] ].

allocation_n1 := n_mass_count_ppof_le &
 [ STEM < "allocation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_allocation_n_of_rel",
            PHON.ONSET voc ] ].

allot_v1 := v_to*_trans_le &
 [ STEM < "allot" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_allot_v_to_rel",
            PHON.ONSET voc ] ].

allotment_n1 := n_mass_count_le &
 [ STEM < "allotment" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_allotment_n_1_rel",
            PHON.ONSET voc ] ].

allotted_isect := adj_intrans_le &
 [ STEM < "allotted" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_allotted_a_1_rel",
            PHON.ONSET voc ] ].

allow_for_v1 := v_empty_prep_intrans_le &
 [ STEM < "allow" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_allow_v_for_rel" ],
            PHON.ONSET voc ] ].

allow_v1 := v_obj_equi_le &
 [ STEM < "allow" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_allow_v_1_rel",
            PHON.ONSET voc ] ].

allow_v2 := v_np_trans_le &
 [ STEM < "allow" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_allow_v_1_rel",
            PHON.ONSET voc ] ].

allow_v3 := v_ditrans_le &
 [ STEM < "allow" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_allow_v_1_rel",
            PHON.ONSET voc ] ].

allow_v4 := v_np_prep_trans_dors_le &
 [ STEM < "allow" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_allow_v_1_rel",
            PHON.ONSET voc ] ].

allowance_n1 := n_mass_count_le &
 [ STEM < "allowance" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_allowance_n_1_rel",
            PHON.ONSET voc ] ].

allright_a2 := adv_int_vp_post_le &
 [ STEM < "all", "right" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_allright_a_1_rel",
            PHON.ONSET voc ] ].

allright_isect := adj_intrans_le &
 [ STEM < "allright" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_allright_a_1_rel",
            PHON.ONSET voc ] ].

allright_root_post := adv_s_post_word_nospec_le &
 [ STEM < "all", "right" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_all+right_a_1_rel",
            PHON.ONSET voc ] ].

allright_root_pre := adv_s_pre_word_root_le &
 [ STEM < "all", "right" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_all+right_a_1_rel",
            PHON.ONSET voc ] ].

allude_v1 := v_empty_prep_intrans_le &
 [ STEM < "allude" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_allude_v_to_rel" ],
            PHON.ONSET voc ] ].

allure_n1 := n_mass_le &
 [ STEM < "allure" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_allure_n_1_rel",
            PHON.ONSET voc ] ].

allure_v1 := v_np_trans_le &
 [ STEM < "allure" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_allure_v_1_rel",
            PHON.ONSET voc ] ].

allurement_n1 := n_mass_count_le &
 [ STEM < "allurement" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_allurement_n_1_rel",
            PHON.ONSET voc ] ].

allusion_n1 := n_mass_count_le &
 [ STEM < "allusion" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_allusion_n_1_rel",
            PHON.ONSET voc ] ].

alluvial_a1 := adj_intrans_le &
 [ STEM < "alluvial" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_alluvial_a_1_rel",
            PHON.ONSET voc ] ].

ally_n1 := n_intr_le &
 [ STEM < "ally" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ally_n_1_rel",
            PHON.ONSET voc ] ].

ally_to_v1 := v_empty_prep*_trans_le &
 [ STEM < "ally" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_ally_v_to_rel" ],
            PHON.ONSET voc ] ].

ally_with_v1 := v_empty_prep*_trans_le &
 [ STEM < "ally" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_ally_v_with_rel" ],
            PHON.ONSET voc ] ].

alma_mater_n1 := n_intr_le &
 [ STEM < "alma", "mater" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_alma+mater_n_1_rel",
            PHON.ONSET voc ] ].

almanac_n1 := n_intr_le &
 [ STEM < "almanac" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_almanac_n_1_rel",
            PHON.ONSET voc ] ].

almen := n_proper_le &
 [ STEM < "almen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "almen",
            PHON.ONSET voc ] ].

almond_shaped_a1 := adj_intrans_le &
 [ STEM < "almond-", "shaped" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_almond+shaped_a_1_rel",
            PHON.ONSET voc ] ].

almost_adv := adv_vp_pre_le &
 [ STEM < "almost" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_almost_a_1_rel",
            PHON.ONSET voc ] ].

almost_deg := adv_degree_spec_jov_le &
 [ STEM < "almost" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_almost_x_deg_rel",
            PHON.ONSET voc ] ].

almost_much_deg := adv_degree_spec_m_le &
 [ STEM < "almost" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_almost_x_m_rel",
            PHON.ONSET voc ] ].

almost_root_post := adv_s_post_word_nospec_le &
 [ STEM < "almost" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_almost_a_1_rel",
            PHON.ONSET voc ] ].

aloft_a1 := adj_pred_intrans_le &
 [ STEM < "aloft" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_aloft_a_1_rel",
            PHON.ONSET voc ] ].

alone := adv_int_vp_post_le &
 [ STEM < "alone" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_alone_a_1_rel",
            PHON.ONSET voc ] ].

alone_a1 := adj_pred_intrans_le &
 [ STEM < "alone" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_alone_a_1_rel",
            PHON.ONSET voc ] ].

alone_adv2 := adv_int_vp_aux_le &
 [ STEM < "alone" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_alone_a_1_rel",
            PHON.ONSET voc ] ].

along := p_reg_le &
 [ STEM < "along" >,
   SYNSEM [ LKEYS.KEYREL.PRED _along_p_rel,
            PHON.ONSET voc ] ].

along_prtcl := p_prtcl_le &
 [ STEM < "along" >,
   SYNSEM [ LKEYS.KEYREL.PRED _along_p_sel_rel,
            PHON.ONSET voc ] ].

along_with := p_reg_le &
 [ STEM < "along", "with" >,
   SYNSEM [ LKEYS.KEYREL.PRED _along+with_p_rel,
            PHON.ONSET voc ] ].

alongside := p_reg_le &
 [ STEM < "alongside" >,
   SYNSEM [ LKEYS.KEYREL.PRED _alongside_p_rel,
            PHON.ONSET voc ] ].

alongside_pp := pp_le &
 [ STEM < "alongside" >,
   SYNSEM [ LKEYS.KEYREL.PRED _alongside_p_rel,
            PHON.ONSET voc ] ].

aloud_a1 := adj_intrans_le &
 [ STEM < "aloud" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_aloud_a_1_rel",
            PHON.ONSET voc ] ].

alpha := n_proper_le &
 [ STEM < "alpha" >,
   SYNSEM [ LKEYS.KEYREL.CARG "alpha",
            PHON.ONSET voc ] ].

alphabet_n1 := n_intr_le &
 [ STEM < "alphabet" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_alphabet_n_1_rel",
            PHON.ONSET voc ] ].

alphabetic_a1 := adj_intrans_le &
 [ STEM < "alphabetic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_alphabetic_a_1_rel",
            PHON.ONSET voc ] ].

alpine_a1 := adj_intrans_le &
 [ STEM < "alpine" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_alpine_a_1_rel",
            PHON.ONSET voc ] ].

alps := n_plur_nocmpnd_le &
 [ STEM < "alp" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_alps_n_1_rel",
            PHON.ONSET voc ] ].

already_adv1 := adv_int_vp_aux_le &
 [ STEM < "already" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_already_a_1_rel",
            PHON.ONSET voc ] ].

already_adv3 := adv_int_vp_post_le &
 [ STEM < "already" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_already_a_1_rel",
            PHON.ONSET voc ] ].

already_m_deg := adv_degree_spec_m_le &
 [ STEM < "already" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_already_x_mdeg_rel",
            PHON.ONSET voc ] ].

alright_a1 := adj_intrans_le &
 [ STEM < "alright" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_allright_a_1_rel",
            PHON.ONSET voc ] ].

alright_root_post := adv_s_post_word_nospec_le &
 [ STEM < "alright" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_all+right_a_1_rel",
            PHON.ONSET voc ] ].

alright_root_pre := adv_s_pre_word_root_le &
 [ STEM < "alright" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_all+right_a_1_rel",
            PHON.ONSET voc ] ].

alrighty_excl_post := adv_s_post_word_nospec_le &
 [ STEM < "alrighty" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_alrighty_a_1_rel",
            PHON.ONSET voc ] ].

alrighty_excl_pre := adv_s_pre_word_root_le &
 [ STEM < "alrighty" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_alrighty_a_1_rel",
            PHON.ONSET voc ] ].

also_adv1 := adv_vp_aux_le &
 [ STEM < "also" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_also_a_1_rel",
            PHON.ONSET voc ] ].

also_adv2 := adv_s_pre_le &
 [ STEM < "also" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_also_a_1_rel",
            PHON.ONSET voc ] ].

also_root := adv_s_post_word_nospec_le &
 [ STEM < "also" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_also_a_1_rel",
            PHON.ONSET voc ] ].

alta := n_proper_le &
 [ STEM < "alta" >,
   SYNSEM [ LKEYS.KEYREL.CARG "alta",
            PHON.ONSET voc ] ].

alte-oper_n1 := n_proper_le &
 [ STEM < "alte", "oper" >,
   SYNSEM [ LKEYS.KEYREL.CARG "alte-oper",
            PHON.ONSET voc ] ].

alteoper_nd := n_proper_le &
 [ STEM < "alte", "oper" >,
   SYNSEM [ LKEYS.KEYREL.CARG "alteoper",
            PHON.ONSET voc ] ].

alter_v1 := v_np*_trans_le &
 [ STEM < "alter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_alter_v_1_rel",
            PHON.ONSET voc ] ].

alter_v2 := v_obj_equi_le &
 [ STEM < "alter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_alter_v_1_rel",
            PHON.ONSET voc ] ].

alteration_n1 := n_mass_count_le &
 [ STEM < "alteration" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_alteration_n_1_rel",
            PHON.ONSET voc ] ].

alternate_a1 := adj_intrans_le &
 [ STEM < "alternate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_alternate_a_1_rel",
            PHON.ONSET voc ] ].

alternate_between_v1 := v_empty_prep_intrans_le &
 [ STEM < "alternate" >,
   SYNSEM [ LKEYS [ --COMPKEY _between_p_sel_rel,
                    KEYREL.PRED "_alternate_v_between_rel" ],
            PHON.ONSET voc ] ].

alternate_n1 := n_ppcomp_le &
 [ STEM < "alternate" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_alternate_n_to_rel" ],
            PHON.ONSET voc ] ].

alternate_v1 := v_np*_trans_le &
 [ STEM < "alternate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_alternate_v_1_rel",
            PHON.ONSET voc ] ].

alternation_n1 := n_mass_count_le &
 [ STEM < "alternation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_alternation_n_1_rel",
            PHON.ONSET voc ] ].

alternative_a1 := adj_intrans_le &
 [ STEM < "alternative" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_alternative_a_1_rel",
            PHON.ONSET voc ] ].

alternative_n1 := n_ppcomp_nosort_le &
 [ STEM < "alternative" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_alternative_n_to_rel" ],
            PHON.ONSET voc ] ].

alternatively_adv1 := adv_int_vp_post_le &
 [ STEM < "alternatively" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_alternative_a_1_rel",
            PHON.ONSET voc ] ].

although := p_subconj_le &
 [ STEM < "although" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_although_x_rel",
            PHON.ONSET voc ] ].

although_prd := p_subconj_prd_le &
 [ STEM < "although" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_although_x_rel",
            PHON.ONSET voc ] ].

altitude_n1 := n_mass_count_le &
 [ STEM < "altitude" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_altitude_n_1_rel",
            PHON.ONSET voc ] ].

altogether_adv1 := adv_int_vp_post_le &
 [ STEM < "altogether" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_altogether_a_1_rel",
            PHON.ONSET voc ] ].

aluminum_n1 := n_mass_le &
 [ STEM < "aluminum" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_aluminum_n_1_rel",
            PHON.ONSET voc ] ].

always_adv1 := adv_int_vp_aux_le &
 [ STEM < "always" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_always_a_1_rel",
            PHON.ONSET voc ] ].

alyssa_n1 := n_proper_le &
 [ STEM < "alyssa" >,
   SYNSEM [ LKEYS.KEYREL.CARG "alyssa",
            PHON.ONSET voc ] ].

am_temp := xp_am_pm_le &
 [ STEM < "a.m." >,
   SYNSEM [ LKEYS.KEYREL [ CARG "am_time",
                             PRED "_am_x_rel" ],
            PHON.ONSET voc ] ].

am_temp_2 := xp_am_pm_le &
 [ STEM < "am" >,
   SYNSEM [ LKEYS.KEYREL [ CARG "am_time",
                             PRED "_am_x_rel" ],
            PHON.ONSET voc ] ].

am_temp_3 := xp_am_pm_le &
 [ STEM < "a.m" >,
   SYNSEM [ LKEYS.KEYREL [ CARG "am_time",
                             PRED "_am_x_rel" ],
            PHON.ONSET voc ] ].

amalgamate_v1 := v_np_trans_noger_le &
 [ STEM < "amalgamate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_amalgamate_v_cause_rel",
            PHON.ONSET voc ] ].

amalgamate_v2 := v_unacc_le &
 [ STEM < "amalgamate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_amalgamate_v_1_rel",
            PHON.ONSET voc ] ].

amalgamate_v3 := v_np_prep_trans_le &
 [ STEM < "amalgamate" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _with_p_rel,
                    KEYREL.PRED "_amalgamate_v_cause_rel" ],
            PHON.ONSET voc ] ].

amalgamate_v4 := v_np_prep_trans_le &
 [ STEM < "amalgamate" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _into_p_rel,
                    KEYREL.PRED "_amalgamate_v_cause_rel" ],
            PHON.ONSET voc ] ].

amanda := n_proper_le &
 [ STEM < "amanda" >,
   SYNSEM [ LKEYS.KEYREL.CARG "amanda",
            PHON.ONSET voc ] ].

amanuel_n1 := n_proper_le &
 [ STEM < "amanuel" >,
   SYNSEM [ LKEYS.KEYREL.CARG "amanuel",
            PHON.ONSET voc ] ].

amaze_v1 := v_np_trans_le &
 [ STEM < "amaze" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_amaze_v_1_rel",
            PHON.ONSET voc ] ].

amaze_v2 := v_expl_it_subj_np_cp_le &
 [ STEM < "amaze" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_amaze_v_1_rel",
            PHON.ONSET voc ] ].

amazing_a1 := adj_trans_le &
 [ STEM < "amazing" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_amazing_a_to_rel" ],
            PHON.ONSET voc ] ].

amazing_a2 := adj_reg_atrans_cp_le &
 [ STEM < "amazing" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_amazing_a_to_rel",
            PHON.ONSET voc ] ].

amazingly_adv := adv_int_vp_le &
 [ STEM < "amazingly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_amazing_a_to_rel",
            PHON.ONSET voc ] ].

amazon_n1 := n_proper_le &
 [ STEM < "amazon" >,
   SYNSEM [ LKEYS.KEYREL.CARG "amazon",
            PHON.ONSET voc ] ].

amazon_n2 := n_proper_le &
 [ STEM < "amazon", "com" >,
   SYNSEM [ LKEYS.KEYREL.CARG "amazon_dot_com",
            PHON.ONSET voc ] ].

ambassador_n1 := n_intr_le &
 [ STEM < "ambassador" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ambassador_n_1_rel",
            PHON.ONSET voc ] ].

ambassador_ttl := n_title_le &
 [ STEM < "ambassador" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ambassador_n_1_rel",
            PHON.ONSET voc ] ].

ambassadorial_a1 := adj_intrans_le &
 [ STEM < "ambassadorial" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ambassadorial_a_1_rel",
            PHON.ONSET voc ] ].

ambiance_n1 := n_mass_le &
 [ STEM < "ambiance" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ambiance_n_1_rel",
            PHON.ONSET voc ] ].

ambience_n1 := n_intr_le &
 [ STEM < "ambience" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ambience_n_1_rel",
            PHON.ONSET voc ] ].

ambition_n1 := n_mass_count_le &
 [ STEM < "ambition" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ambition_n_1_rel",
            PHON.ONSET voc ] ].

ambitious_a1 := adj_intrans_le &
 [ STEM < "ambitious" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ambitious_a_1_rel",
            PHON.ONSET voc ] ].

ambulance_n1 := n_intr_le &
 [ STEM < "ambulance" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ambulance_n_1_rel",
            PHON.ONSET voc ] ].

amend_v1 := v_np*_trans_le &
 [ STEM < "amend" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_amend_v_1_rel",
            PHON.ONSET voc ] ].

amend_v2 := v_obj_equi_le &
 [ STEM < "amend" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_amend_v_1_rel",
            PHON.ONSET voc ] ].

amendment_n1 := n_mass_count_ppof_le &
 [ STEM < "amendment" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_amendment_n_of_rel",
            PHON.ONSET voc ] ].

amenities_n1 := n_plur_le &
 [ STEM < "amenity" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_amenities_n_1_rel",
            PHON.ONSET voc ] ].

america_n1 := n_proper_le &
 [ STEM < "america" >,
   SYNSEM [ LKEYS.KEYREL.CARG "america",
            PHON.ONSET voc ] ].

american_a1 := adj_intrans_le &
 [ STEM < "american" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_american_a_1_rel",
            PHON.ONSET voc ] ].

american_airlines_n1 := n_proper_le &
 [ STEM < "american", "airlines" >,
   SYNSEM [ LKEYS.KEYREL.CARG "american_airlines",
            PHON.ONSET voc ] ].

american_assurance_underwriting_company_n1 := n_proper_le &
 [ STEM < "american", "assurance", "underwriting", "company" >,
   SYNSEM [ LKEYS.KEYREL.CARG "american_assurance_underwriting_company",
            PHON.ONSET voc ] ].

american_assurance_underwriting_company_shanghai_branch_n1 := n_proper_le &
 [ STEM < "american", "assurance", "underwriting", "company,", "shanghai", "branch" >,
   SYNSEM [ LKEYS.KEYREL.CARG "american_assurance_underwriting_company_shanghai_branch",
            PHON.ONSET voc ] ].

american_assurance_underwriting_company_shanghai_branch_n2 := n_proper_le &
 [ STEM < "american", "assurance", "underwriting", "company", "shanghai", "branch" >,
   SYNSEM [ LKEYS.KEYREL.CARG "american_assurance_underwriting_company_shanghai_branch",
            PHON.ONSET voc ] ].

american_express_n1 := n_proper_le &
 [ STEM < "american", "express" >,
   SYNSEM [ LKEYS.KEYREL.CARG "american_express",
            PHON.ONSET voc ] ].

american_express_n2 := n_proper_le &
 [ STEM < "amex" >,
   SYNSEM [ LKEYS.KEYREL.CARG "american_express",
            PHON.ONSET voc ] ].

american_n1 := n_intr_le &
 [ STEM < "american" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_american_n_1_rel",
            PHON.ONSET voc ] ].

american_scoundrel_wall_n1 := n_proper_le &
 [ STEM < "american", "scoundrel", "wall" >,
   SYNSEM [ LKEYS.KEYREL.CARG "american_scoundrel_wall",
            PHON.ONSET voc ] ].

amiable_isect := adj_intrans_le &
 [ STEM < "amiable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_amiable_a_1_rel",
            PHON.ONSET voc ] ].

amiably_isect := adv_int_vp_le &
 [ STEM < "amiably" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_amiable_a_1_rel",
            PHON.ONSET voc ] ].

amicably := adv_int_vp_le &
 [ STEM < "amicably" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_amicable_a_1_rel",
            PHON.ONSET voc ] ].

amid_p := p_le &
 [ STEM < "amid" >,
   SYNSEM [ LKEYS.KEYREL.PRED _amid_p_rel,
            PHON.ONSET voc ] ].

amidst_p1 := p_le &
 [ STEM < "amidst" >,
   SYNSEM [ LKEYS.KEYREL.PRED _amidst_p_rel,
            PHON.ONSET voc ] ].

amiss_a1 := adj_pred_intrans_le &
 [ STEM < "amiss" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_amiss_a_1_rel",
            PHON.ONSET voc ] ].

ammonia_n1 := n_mass_le &
 [ STEM < "ammonia" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ammonia_n_1_rel",
            PHON.ONSET voc ] ].

ammunition_n1 := n_mass_le &
 [ STEM < "ammunition" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ammunition_n_1_rel",
            PHON.ONSET voc ] ].

among := p_reg_le &
 [ STEM < "among" >,
   SYNSEM [ LKEYS.KEYREL.PRED _among_p_rel,
            PHON.ONSET voc ] ].

among_prtcl := p_prtcl_le &
 [ STEM < "among" >,
   SYNSEM [ LKEYS.KEYREL.PRED _among_p_sel_rel,
            PHON.ONSET voc ] ].

amongst := p_reg_le &
 [ STEM < "amongst" >,
   SYNSEM [ LKEYS.KEYREL.PRED _amongst_p_rel,
            PHON.ONSET voc ] ].

amorous_a1 := adj_intrans_le &
 [ STEM < "amorous" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_amorous_a_1_rel",
            PHON.ONSET voc ] ].

amount_n1 := n_ppof_le &
 [ STEM < "amount" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_amount_n_of_rel",
            PHON.ONSET voc ] ].

amount_to_v1 := v_empty_prep_intrans_le &
 [ STEM < "amount" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_amount_v_to_rel" ],
            PHON.ONSET voc ] ].

ampere_n1 := n_meas_le &
 [ STEM < "ampere" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ampere_n_1_rel",
            PHON.ONSET voc ] ].

amphibian_a1 := adj_intrans_le &
 [ STEM < "amphibian" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_amphibian_a_1_rel",
            PHON.ONSET voc ] ].

amphibian_n1 := n_intr_le &
 [ STEM < "amphibian" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_amphibian_n_1_rel",
            PHON.ONSET voc ] ].

amphipod_n1 := n_intr_le &
 [ STEM < "amphipod" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_amphipod_n_1_rel",
            PHON.ONSET voc ] ].

amphitheater_n1 := n_intr_le &
 [ STEM < "amphitheater" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_amphitheater_n_1_rel",
            PHON.ONSET voc ] ].

ample_a1 := adj_intrans_le &
 [ STEM < "ample" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ample_a_1_rel",
            PHON.ONSET voc ] ].

amplifier_n1 := n_ppof_le &
 [ STEM < "amplifier" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_amplifier_n_of_rel",
            PHON.ONSET voc ] ].

amplify_v1 := v_np*_trans_le &
 [ STEM < "amplify" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_amplify_v_1_rel",
            PHON.ONSET voc ] ].

amply_adv := adv_int_vp_le &
 [ STEM < "amply" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ample_a_1_rel",
            PHON.ONSET voc ] ].

amps_n1 := n_proper_le &
 [ STEM < "amps" >,
   SYNSEM [ LKEYS.KEYREL.CARG "amps",
            PHON.ONSET voc ] ].

amsterdam_n1 := n_proper_city_le &
 [ STEM < "amsterdam" >,
   SYNSEM [ LKEYS.KEYREL.CARG "amsterdam",
            PHON.ONSET voc ] ].

amtrak_n1 := n_proper_le &
 [ STEM < "amtrak" >,
   SYNSEM [ LKEYS.KEYREL.CARG "amtrak",
            PHON.ONSET voc ] ].

amund_n1 := n_proper_le &
 [ STEM < "amund" >,
   SYNSEM [ LKEYS.KEYREL.CARG "amund",
            PHON.ONSET voc ] ].

amundsen_n1 := n_proper_le &
 [ STEM < "amundsen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "amundsen",
            PHON.ONSET voc ] ].

amuse_v1 := v_np_trans_le &
 [ STEM < "amuse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_amuse_v_1_rel",
            PHON.ONSET voc ] ].

amuse_v2 := v_expl_it_subj_np_cp_le &
 [ STEM < "amuse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_amuse_v_1_rel",
            PHON.ONSET voc ] ].

amusement_n1 := n_mass_count_le &
 [ STEM < "amusement" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_amusement_n_1_rel",
            PHON.ONSET voc ] ].

amusing_isect := adj_intrans_le &
 [ STEM < "amusing" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_amusing_a_1_rel",
            PHON.ONSET voc ] ].

amy_n1 := n_proper_le &
 [ STEM < "amy" >,
   SYNSEM [ LKEYS.KEYREL.CARG "amy",
            PHON.ONSET voc ] ].

amythest_n1 := n_intr_le &
 [ STEM < "amythest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_amythest_n_1_rel",
            PHON.ONSET voc ] ].

an_det := det_sg_nomod_an_le &
 [ STEM < "an" >,
   SYNSEM [ LKEYS.KEYREL.PRED _a_q_rel,
            PHON.ONSET voc ] ].

an_one_adj := adj_one_prd_an_le &
 [ STEM < "an" >,
   SYNSEM.PHON.ONSET voc ].

an_one_fract := adj_one_fract_an_le &
 [ STEM < "an" >,
   SYNSEM.PHON.ONSET voc ].

an_per_p := p_nbar_comp_nmod_an_le &
 [ STEM < "an" >,
   SYNSEM [ LKEYS.KEYREL.PRED _a_p_per_rel,
            PHON.ONSET voc ] ].

an_pred_p1 := pred_an_prep_le &
 [ STEM < "an" >,
   SYNSEM.PHON.ONSET voc ].

analog_a1 := adj_intrans_le &
 [ STEM < "analog" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_analog_a_1_rel",
            PHON.ONSET voc ] ].

analog_digital_a1 := adj_intrans_le &
 [ STEM < "analog", "/", "digital" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_digital+analog_a_1_rel",
            PHON.ONSET voc ] ].

analogically_adv := adv_int_vp_le &
 [ STEM < "analogically" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_analogical_a_1_rel",
            PHON.ONSET voc ] ].

analogy_n1 := n_mass_count_le &
 [ STEM < "analogy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_analogy_n_1_rel",
            PHON.ONSET voc ] ].

analysis_n1 := n_mass_count_ppof_le &
 [ STEM < "analysis" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_analysis_n_of_rel",
            PHON.ONSET voc ] ].

analyze_v1 := v_np_trans_le &
 [ STEM < "analyze" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_analyze_v_1_rel",
            PHON.ONSET voc ] ].

anapophysis_n1 := n_mass_le &
 [ STEM < "anapophysis" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_anapophysis_n_1_rel",
            PHON.ONSET voc ] ].

anat_abb_n1 := n_mass_le &
 [ STEM < "anat." >,
   SYNSEM [ LKEYS.KEYREL.PRED "_anatomy_n_1_rel",
            PHON.ONSET voc ] ].

anat_abb_n2 := n_mass_le &
 [ STEM < "anat" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_anatomy_n_1_rel",
            PHON.ONSET voc ] ].

ancestor_n1 := n_intr_le &
 [ STEM < "ancestor" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ancestor_n_1_rel",
            PHON.ONSET voc ] ].

ancestral_a1 := adj_intrans_le &
 [ STEM < "ancestral" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ancestral_a_1_rel",
            PHON.ONSET voc ] ].

anchor_n1 := n_intr_le &
 [ STEM < "anchor" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_anchor_n_1_rel",
            PHON.ONSET voc ] ].

anchor_v1 := v_np*_trans_le &
 [ STEM < "anchor" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_anchor_v_1_rel",
            PHON.ONSET voc ] ].

ancient_a1 := adj_intrans_le &
 [ STEM < "ancient" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ancient_a_1_rel",
            PHON.ONSET voc ] ].

anciently_adv := adv_int_vp_le &
 [ STEM < "anciently" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ancient_a_1_rel",
            PHON.ONSET voc ] ].

ancillary_a1 := adj_intrans_le &
 [ STEM < "ancillary" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ancillary_a_1_rel",
            PHON.ONSET voc ] ].

and_also_1 := conj_complex_and_also_le &
 [ STEM < "and", "also" >,
   SYNSEM.PHON.ONSET voc ].

and_c_prop := comp_inf_and_le &
 [ STEM < "and" >,
   SYNSEM.PHON.ONSET voc ].

and_conj := conj_complex_and_le &
 [ STEM < "and" >,
   SYNSEM.PHON.ONSET voc ].

and_conj_2 := conj_complex_and_both_le &
 [ STEM < "and" >,
   SYNSEM.PHON.ONSET voc ].

and_conj_2_amp := conj_complex_amp_both_le &
 [ STEM < "&" >,
   SYNSEM.PHON.ONSET con ].

and_conj_amp := conj_complex_amp_le &
 [ STEM < "&" >,
   SYNSEM.PHON.ONSET con ].

and_finally_1 := conj_complex_and_finally_le &
 [ STEM < "and", "finally" >,
   SYNSEM.PHON.ONSET voc ].

and_fract := conj_and_fract_le &
 [ STEM < "and" >,
   SYNSEM.PHON.ONSET voc ].

and_fract_2 := conj_and_fract_le &
 [ STEM < "-", "and", "-" >,
   SYNSEM.PHON.ONSET voc ].

and_num := conj_and_num_le &
 [ STEM < "and" >,
   SYNSEM.PHON.ONSET voc ].

and_or_conj_1 := conj_complex_and_or_le &
 [ STEM < "and", "/", "or" >,
   SYNSEM.PHON.ONSET voc ].

and_or_conj_2 := conj_complex_and_or_le &
 [ STEM < "and/or" >,
   SYNSEM.PHON.ONSET voc ].

and_or_conj_3 := conj_complex_and_or_le &
 [ STEM < "/" >,
   SYNSEM.PHON.ONSET con ].

and_so_1 := conj_complex_and_so_le &
 [ STEM < "and", "so" >,
   SYNSEM.PHON.ONSET voc ].

and_so_on_adv1 := adv_int_vp_post_le &
 [ STEM < "and", "so", "on" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_and+so+on_a_1_rel",
            PHON.ONSET voc ] ].

and_then_1 := conj_complex_and_then_le &
 [ STEM < "and", "then" >,
   SYNSEM.PHON.ONSET voc ].

and_then_2 := conj_complex_and_then_le &
 [ STEM < "and", ",", "then" >,
   SYNSEM.PHON.ONSET voc ].

and_then_3 := conj_complex_and_then_first_le &
 [ STEM < "and", "then" >,
   SYNSEM.PHON.ONSET voc ].

and_vice_versa_adv1 := adv_int_vp_post_le &
 [ STEM < "and", "vice", "versa" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_and+vice+versa_a_1_rel",
            PHON.ONSET voc ] ].

and_yet_1 := conj_complex_and_yet_le &
 [ STEM < "and", "yet" >,
   SYNSEM.PHON.ONSET voc ].

andenes := n_proper_city_le &
 [ STEM < "andenes" >,
   SYNSEM [ LKEYS.KEYREL.CARG "andenes",
            PHON.ONSET voc ] ].

andersen_n1 := n_proper_le &
 [ STEM < "andersen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "andersen",
            PHON.ONSET voc ] ].

andersfjellet := n_proper_le &
 [ STEM < "andersfjellet" >,
   SYNSEM [ LKEYS.KEYREL.CARG "andersfjellet",
            PHON.ONSET voc ] ].

andreas_n1 := n_proper_le &
 [ STEM < "andreas" >,
   SYNSEM [ LKEYS.KEYREL.CARG "andreas",
            PHON.ONSET voc ] ].

andrevatnet_n1 := n_proper_le &
 [ STEM < "andrevatnet" >,
   SYNSEM [ LKEYS.KEYREL.CARG "andrevatnet",
            PHON.ONSET voc ] ].

andrew_n1 := n_proper_le &
 [ STEM < "andrew" >,
   SYNSEM [ LKEYS.KEYREL.CARG "andrew",
            PHON.ONSET voc ] ].

andy_n1 := n_proper_le &
 [ STEM < "andy" >,
   SYNSEM [ LKEYS.KEYREL.CARG "andy",
            PHON.ONSET voc ] ].

anecdote_n1 := n_intr_le &
 [ STEM < "anecdote" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_anecdote_n_1_rel",
            PHON.ONSET voc ] ].

anemone_n1 := n_intr_le &
 [ STEM < "anemone" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_anemone_n_1_rel",
            PHON.ONSET voc ] ].

anestÃ¸len := n_proper_le &
 [ STEM < "anestÃ¸len" >,
   SYNSEM [ LKEYS.KEYREL.CARG "anestÃ¸len",
            PHON.ONSET voc ] ].

anew_adv1 := adv_int_vp_post_le &
 [ STEM < "anew" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_anew_a_1_rel",
            PHON.ONSET voc ] ].

angel_n1 := n_intr_le &
 [ STEM < "angel" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_angel_n_1_rel",
            PHON.ONSET voc ] ].

angelica_n1 := n_proper_le &
 [ STEM < "angelica" >,
   SYNSEM [ LKEYS.KEYREL.CARG "angelica",
            PHON.ONSET voc ] ].

anger_n1 := n_mass_le &
 [ STEM < "anger" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_anger_n_1_rel",
            PHON.ONSET voc ] ].

anger_v1 := v_np_trans_le &
 [ STEM < "anger" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_anger_v_1_rel",
            PHON.ONSET voc ] ].

anger_v2 := v_expl_it_subj_np_cp_le &
 [ STEM < "anger" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_anger_v_1_rel",
            PHON.ONSET voc ] ].

angle_for_v1 := v_empty_prep_intrans_le &
 [ STEM < "angle" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_angle_v_for_rel" ],
            PHON.ONSET voc ] ].

angle_n1 := n_intr_le &
 [ STEM < "angle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_angle_n_1_rel",
            PHON.ONSET voc ] ].

angle_v1 := v_unerg_le &
 [ STEM < "angle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_angle_v_1_rel",
            PHON.ONSET voc ] ].

angle_v2 := v_np_trans_le &
 [ STEM < "angle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_angle_v_2_rel",
            PHON.ONSET voc ] ].

anglicanism_n1 := n_proper_le &
 [ STEM < "anglicanism" >,
   SYNSEM [ LKEYS.KEYREL.CARG "anglicanism",
            PHON.ONSET voc ] ].

angling_n1 := n_mass_le &
 [ STEM < "angling" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_angling_n_1_rel",
            PHON.ONSET voc ] ].

angry_a1 := adj_trans_le &
 [ STEM < "angry" >,
   SYNSEM [ LKEYS [ --COMPKEY _at_p_sel_rel,
                    KEYREL.PRED "_angry_a_at_rel" ],
            PHON.ONSET voc ] ].

anhui_n1 := n_proper_le &
 [ STEM < "anhui" >,
   SYNSEM [ LKEYS.KEYREL.CARG "anhui",
            PHON.ONSET voc ] ].

animal_n1 := n_intr_le &
 [ STEM < "animal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_animal_n_1_rel",
            PHON.ONSET voc ] ].

animate_a1 := adj_intrans_le &
 [ STEM < "animate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_animate_a_1_rel",
            PHON.ONSET voc ] ].

animate_v1 := v_np_trans_le &
 [ STEM < "animate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_animate_v_1_rel",
            PHON.ONSET voc ] ].

animation_n1 := n_mass_count_ppof_le &
 [ STEM < "animation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_animation_n_of_rel",
            PHON.ONSET voc ] ].

anise_n1 := n_mass_le &
 [ STEM < "anise" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_anise_n_1_rel",
            PHON.ONSET voc ] ].

ankle_n1 := n_intr_le &
 [ STEM < "ankle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ankle_n_1_rel",
            PHON.ONSET voc ] ].

ann_n1 := n_proper_le &
 [ STEM < "ann" >,
   SYNSEM [ LKEYS.KEYREL.CARG "ann",
            PHON.ONSET voc ] ].

annals_n1 := n_plur_nocmpnd_le &
 [ STEM < "annal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_annals_n_1_rel",
            PHON.ONSET voc ] ].

anne := n_proper_le &
 [ STEM < "anne" >,
   SYNSEM [ LKEYS.KEYREL.CARG "anne",
            PHON.ONSET voc ] ].

annex_n1 := n_intr_le &
 [ STEM < "annex" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_annex_n_1_rel",
            PHON.ONSET voc ] ].

annex_v1 := v_np_trans_le &
 [ STEM < "annex" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_annex_v_1_rel",
            PHON.ONSET voc ] ].

annihilation_n1 := n_mass_count_le &
 [ STEM < "annihilation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_annihilation_n_1_rel",
            PHON.ONSET voc ] ].

anniversary_n1 := n_ppof_le &
 [ STEM < "anniversary" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_anniversary_n_of_rel",
            PHON.ONSET voc ] ].

annotate_v1 := v_np*_trans_le &
 [ STEM < "annotate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_annotate_v_1_rel",
            PHON.ONSET voc ] ].

annotation_n1 := n_mass_count_le &
 [ STEM < "annotation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_annotation_n_1_rel",
            PHON.ONSET voc ] ].

announce_v1 := v_to*_trans_le &
 [ STEM < "announce" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_announce_v_to_rel",
            PHON.ONSET voc ] ].

announce_v2 := v_cp_non_trans_le &
 [ STEM < "announce" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_announce_v_1_rel",
            PHON.ONSET voc ] ].

announcement_n1 := n_ppof_le &
 [ STEM < "announcement" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_announcement_n_of_rel",
            PHON.ONSET voc ] ].

annoy_v1 := v_np_trans_le &
 [ STEM < "annoy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_annoy_v_1_rel",
            PHON.ONSET voc ] ].

annoy_v2 := v_expl_it_subj_np_cp_le &
 [ STEM < "annoy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_annoy_v_1_rel",
            PHON.ONSET voc ] ].

annoyed_a1 := adj_intrans_le &
 [ STEM < "annoyed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_annoyed_a_1_rel",
            PHON.ONSET voc ] ].

annoyed_a2 := adj_reg_that_cp_le &
 [ STEM < "annoyed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_annoyed_a_1_rel",
            PHON.ONSET voc ] ].

annoyingly := adv_int_vp_post_le &
 [ STEM < "annoyingly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_annoying_a_1_rel",
            PHON.ONSET voc ] ].

annual_a1 := adj_intrans_le &
 [ STEM < "annual" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_annual_a_1_rel",
            PHON.ONSET voc ] ].

annually_isect := adv_int_vp_le &
 [ STEM < "annually" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_annual_a_1_rel",
            PHON.ONSET voc ] ].

anonymous_a1 := adj_intrans_le &
 [ STEM < "anonymous" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_anonymous_a_1_rel",
            PHON.ONSET voc ] ].

anonymously_adv1 := adv_int_vp_le &
 [ STEM < "anonymously" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_anonymous_a_1_rel",
            PHON.ONSET voc ] ].

anorak_n1 := n_intr_le &
 [ STEM < "anorak" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_anorak_n_1_rel",
            PHON.ONSET voc ] ].

anorexia_n1 := n_mass_le &
 [ STEM < "anorexia" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_anorexia_n_1_rel",
            PHON.ONSET voc ] ].

anorexia_nervosa_n1 := n_mass_le &
 [ STEM < "anorexia", "nervosa" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_anorexia_nervosa_n_1_rel",
            PHON.ONSET voc ] ].

another := det_part_sg_le &
 [ STEM < "another" >,
   SYNSEM [ LKEYS.KEYREL.PRED _another_q_rel,
            PHON.ONSET voc ] ].

another_d2 := det_part_another_le &
 [ STEM < "another" >,
   SYNSEM [ LKEYS.KEYREL.PRED _another_q_rel,
            PHON.ONSET voc ] ].

another_fract := adj_one_fract_le &
 [ STEM < "another" >,
   SYNSEM.PHON.ONSET voc ].

another_pl := det_pl_modn_le &
 [ STEM < "another" >,
   SYNSEM [ LKEYS.KEYREL.PRED _another_q_rel,
            PHON.ONSET voc ] ].

anren_n1 := n_proper_le &
 [ STEM < "anren" >,
   SYNSEM [ LKEYS.KEYREL.CARG "anren",
            PHON.ONSET voc ] ].

answer_n1 := n_ppcomp_le &
 [ STEM < "answer" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_answer_n_to_rel" ],
            PHON.ONSET voc ] ].

answer_v1 := v_np*_trans_cp_le &
 [ STEM < "answer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_answer_v_1_rel",
            PHON.ONSET voc ] ].

answer_v2 := v_np*_trans_le &
 [ STEM < "answer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_answer_v_1_rel",
            PHON.ONSET voc ] ].

answering_isect := adj_intrans_le &
 [ STEM < "answering" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_answering_a_1_rel",
            PHON.ONSET voc ] ].

ant_n1 := n_intr_le &
 [ STEM < "ant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ant_n_1_rel",
            PHON.ONSET voc ] ].

antagonist_n1 := n_intr_le &
 [ STEM < "antagonist" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_antagonist_n_1_rel",
            PHON.ONSET voc ] ].

antagonistic_a1 := adj_intrans_le &
 [ STEM < "antagonistic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_antagonistic_a_1_rel",
            PHON.ONSET voc ] ].

antagonistically := adv_int_vp_le &
 [ STEM < "antagonistically" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_antagonistic_a_1_rel",
            PHON.ONSET voc ] ].

antagonize_v1 := v_np_trans_le &
 [ STEM < "antagonize" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_antagonize_v_1_rel",
            PHON.ONSET voc ] ].

antarctica_n1 := n_proper_le &
 [ STEM < "antarctica" >,
   SYNSEM [ LKEYS.KEYREL.CARG "antarctica",
            PHON.ONSET voc ] ].

antecedent_a1 := adj_intrans_le &
 [ STEM < "antecedent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_antecedent_a_1_rel",
            PHON.ONSET voc ] ].

antecedent_n1 := n_intr_le &
 [ STEM < "antecedent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_antecedent_n_1_rel",
            PHON.ONSET voc ] ].

antenna_n1 := n_intr_le &
 [ STEM < "antenna" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_antenna_n_1_rel",
            PHON.ONSET voc ] ].

anterior_a1 := adj_intrans_le &
 [ STEM < "anterior" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_anterior_a_1_rel",
            PHON.ONSET voc ] ].

anterior_n1 := n_mass_count_le &
 [ STEM < "anterior" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_anterior_n_1_rel",
            PHON.ONSET voc ] ].

anteroom_n := n_intr_le &
 [ STEM < "anteroom" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_anteroom_n_1_rel",
            PHON.ONSET voc ] ].

anthem_n1 := n_intr_le &
 [ STEM < "anthem" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_anthem_n_1_rel",
            PHON.ONSET voc ] ].

anther_n1 := n_intr_le &
 [ STEM < "anther" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_anther_n_1_rel",
            PHON.ONSET voc ] ].

anthozoa := n_proper_le &
 [ STEM < "anthozoa" >,
   SYNSEM [ LKEYS.KEYREL.CARG "anthozoa",
            PHON.ONSET voc ] ].

anthracite_n1 := n_mass_le &
 [ STEM < "anthracite" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_anthracite_n_1_rel",
            PHON.ONSET voc ] ].

anthropoid_a1 := adj_intrans_le &
 [ STEM < "anthropoid" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_anthropoid_a_1_rel",
            PHON.ONSET voc ] ].

anthropoid_n1 := n_intr_le &
 [ STEM < "anthropoid" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_anthropoid_n_1_rel",
            PHON.ONSET voc ] ].

anthropology_n1 := n_intr_le &
 [ STEM < "anthropology" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_anthropology_n_1_rel",
            PHON.ONSET voc ] ].

anti_cancer_a1 := adj_intrans_le &
 [ STEM < "anticancer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_anti+cancer_a_1_rel",
            PHON.ONSET voc ] ].

anti_cancer_a2 := adj_intrans_le &
 [ STEM < "anti", "cancer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_anti+cancer_a_1_rel",
            PHON.ONSET voc ] ].

anticipate_prp_v1 := v_subj_equi_prp_le &
 [ STEM < "anticipate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_anticipate_v_1_rel",
            PHON.ONSET voc ] ].

anticipate_v1 := v_np_trans_le &
 [ STEM < "anticipate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_anticipate_v_1_rel",
            PHON.ONSET voc ] ].

anticipate_v2 := v_cp_non_trans_le &
 [ STEM < "anticipate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_anticipate_v_1_rel",
            PHON.ONSET voc ] ].

antiquated_a1 := adj_intrans_le &
 [ STEM < "antiquated" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_antiquated_a_1_rel",
            PHON.ONSET voc ] ].

antique_a1 := adj_intrans_le &
 [ STEM < "antique" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_antique_a_1_rel",
            PHON.ONSET voc ] ].

antique_n1 := n_intr_le &
 [ STEM < "antique" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_antique_n_1_rel",
            PHON.ONSET voc ] ].

antiquity_n1 := n_mass_count_le &
 [ STEM < "antiquity" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_antiquity_n_1_rel",
            PHON.ONSET voc ] ].

antiseptic_a1 := adj_intrans_le &
 [ STEM < "antiseptic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_antiseptic_a_1_rel",
            PHON.ONSET voc ] ].

antiseptic_n1 := n_intr_le &
 [ STEM < "antiseptic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_antiseptic_n_1_rel",
            PHON.ONSET voc ] ].

antithesis_n1 := n_intr_le &
 [ STEM < "antithesis" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_antithesis_n_1_rel",
            PHON.ONSET voc ] ].

antler_n1 := n_intr_le &
 [ STEM < "antler" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_antler_n_1_rel",
            PHON.ONSET voc ] ].

antonym_n1 := n_intr_le &
 [ STEM < "antonym" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_antonym_n_1_rel",
            PHON.ONSET voc ] ].

antsy_a1 := adj_trans_le &
 [ STEM < "antsy" >,
   SYNSEM [ LKEYS [ --COMPKEY _about_p_sel_rel,
                    KEYREL.PRED "_antsy_a_about_rel" ],
            PHON.ONSET voc ] ].

antwerp := n_proper_le &
 [ STEM < "antwerp" >,
   SYNSEM [ LKEYS.KEYREL.CARG "antwerp",
            PHON.ONSET voc ] ].

anubis_n1 := n_proper_le &
 [ STEM < "anubis" >,
   SYNSEM [ LKEYS.KEYREL.CARG "anubis",
            PHON.ONSET voc ] ].

anuj_n1 := n_proper_le &
 [ STEM < "anuj" >,
   SYNSEM [ LKEYS.KEYREL.CARG "anuj",
            PHON.ONSET voc ] ].

anxiety_n1 := n_mass_le &
 [ STEM < "anxiety" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_anxiety_n_1_rel",
            PHON.ONSET voc ] ].

anxious_a1 := adj_intrans_le &
 [ STEM < "anxious" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_anxious_a_1_rel",
            PHON.ONSET voc ] ].

anxious_a2 := adj_reg_equi_le &
 [ STEM < "anxious" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_anxious_a_1_rel",
            PHON.ONSET voc ] ].

anxiously_adv1 := adv_int_vp_post_le &
 [ STEM < "anxiously" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_anxious_a_1_rel",
            PHON.ONSET voc ] ].

any_deg := adv_degree_spec_nospec_le &
 [ STEM < "any" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_any_x_deg_rel",
            PHON.ONSET voc ] ].

any_det := det_part_le &
 [ STEM < "any" >,
   SYNSEM [ LKEYS.KEYREL.PRED _any_q_rel,
            PHON.ONSET voc ] ].

any_more_adv1 := adv_int_vp_post_le &
 [ STEM < "any", "more" >,
   SYNSEM [ LKEYS.KEYREL.PRED _anymore_a_1_rel,
            PHON.ONSET voc ] ].

any_more_det := det_part_pl_mass_le &
 [ STEM < "any", "more" >,
   SYNSEM [ LKEYS.KEYREL.PRED _any+more_q_rel,
            PHON.ONSET voc ] ].

anybody := n_generic_pro_le &
 [ STEM < "anybody" >,
   SYNSEM [ LKEYS [ ALTKEYREL.PRED _any_q_rel,
                    KEYREL.PRED person_rel ],
            PHON.ONSET voc ] ].

anyhow_adv1 := adv_int_vp_post_nonmob_le &
 [ STEM < "anyhow" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_anyhow_a_1_rel",
            PHON.ONSET voc ] ].

anyhow_s_adv := adv_s_pre_word_root_le &
 [ STEM < "anyhow" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_anyhow_a_1_rel",
            PHON.ONSET voc ] ].

anymore_adv1 := adv_int_vp_post_le &
 [ STEM < "anymore" >,
   SYNSEM [ LKEYS.KEYREL.PRED _anymore_a_1_rel,
            PHON.ONSET voc ] ].

anyone := n_generic_pro_le &
 [ STEM < "anyone" >,
   SYNSEM [ LKEYS [ ALTKEYREL.PRED _any_q_rel,
                    KEYREL.PRED person_rel ],
            PHON.ONSET voc ] ].

anyplace_n1 := n_generic_pro_adv_le &
 [ STEM < "anyplace" >,
   SYNSEM [ LKEYS [ ALTKEYREL.PRED _any_q_rel,
                    KEYREL.PRED place_n_rel ],
            PHON.ONSET voc ] ].

anything := n_generic_pro_le &
 [ STEM < "anything" >,
   SYNSEM [ LKEYS [ ALTKEYREL.PRED _any_q_rel,
                    KEYREL.PRED thing_rel ],
            PHON.ONSET voc ] ].

anytime_n1 := n_generic_pro_adv_le &
 [ STEM < "anytime" >,
   SYNSEM [ LKEYS [ ALTKEYREL.PRED _any_q_rel,
                    KEYREL.PRED time_n_rel ],
            PHON.ONSET voc ] ].

anyuan_n1 := n_proper_le &
 [ STEM < "anyuan" >,
   SYNSEM [ LKEYS.KEYREL.CARG "anyuan",
            PHON.ONSET voc ] ].

anyvalue_n1 := n_proper_nale &
 [ STEM < "anyvalue" >,
   SYNSEM.PHON.ONSET voc ].

anyway_adv1 := adv_int_vp_post_le &
 [ STEM < "anyway" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_anyway_a_1_rel",
            PHON.ONSET voc ] ].

anyway_adv2 := adv_s_pre_word_root_le &
 [ STEM < "anyway" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_anyway_a_1_rel",
            PHON.ONSET voc ] ].

anyways_adv1 := adv_int_vp_post_le &
 [ STEM < "anyways" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_anyways_a_1_rel",
            PHON.ONSET voc ] ].

anyways_adv2 := adv_s_pre_word_root_le &
 [ STEM < "anyways" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_anyways_a_1_rel",
            PHON.ONSET voc ] ].

anywhere_n1 := n_generic_pro_adv_le &
 [ STEM < "anywhere" >,
   SYNSEM [ LKEYS [ ALTKEYREL.PRED _any_q_rel,
                    KEYREL.PRED place_n_rel ],
            PHON.ONSET voc ] ].

anywhere_n2 := n_generic_pro_adv_le &
 [ STEM < "any", "where" >,
   SYNSEM [ LKEYS [ ALTKEYREL.PRED _any_q_rel,
                    KEYREL.PRED place_n_rel ],
            PHON.ONSET voc ] ].

anywise_adv1 := adv_int_vp_post_nonmob_le &
 [ STEM < "anywise" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_anywise_a_1_rel",
            PHON.ONSET voc ] ].

anywise_s_adv := adv_s_pre_word_root_le &
 [ STEM < "anywise" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_anywise_a_1_rel",
            PHON.ONSET voc ] ].

anzus_n1 := n_proper_le &
 [ STEM < "anzus" >,
   SYNSEM [ LKEYS.KEYREL.CARG "anzus",
            PHON.ONSET voc ] ].

aol_n1 := n_proper_le &
 [ STEM < "aol" >,
   SYNSEM [ LKEYS.KEYREL.CARG "aol",
            PHON.ONSET voc ] ].

apart_a1 := adj_pred_intrans_le &
 [ STEM < "apart" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_apart_a_1_rel",
            PHON.ONSET voc ] ].

apart_from := p_le &
 [ STEM < "apart", "from" >,
   SYNSEM [ LKEYS.KEYREL.PRED _apart+from_p_rel,
            PHON.ONSET voc ] ].

apart_prtcl := adj_prtcl_le &
 [ STEM < "apart" >,
   SYNSEM [ LKEYS.KEYREL.PRED _apart_a_sel_rel,
            PHON.ONSET voc ] ].

apartment_n1 := n_intr_le &
 [ STEM < "apartment" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_apartment_n_1_rel",
            PHON.ONSET voc ] ].

apathetic_a1 := adj_intrans_le &
 [ STEM < "apathetic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_apathetic_a_1_rel",
            PHON.ONSET voc ] ].

apathetically_adv1 := adv_int_vp_le &
 [ STEM < "apathetically" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_apathetic_a_1_rel",
            PHON.ONSET voc ] ].

ape_n1 := n_intr_le &
 [ STEM < "ape" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ape_n_1_rel",
            PHON.ONSET voc ] ].

ape_v1 := v_np_trans_le &
 [ STEM < "ape" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ape_v_1_rel",
            PHON.ONSET voc ] ].

aperient_a1 := adj_intrans_le &
 [ STEM < "aperient" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_aperient_a_1_rel",
            PHON.ONSET voc ] ].

aperient_n1 := n_intr_le &
 [ STEM < "aperient" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_aperient_n_1_rel",
            PHON.ONSET voc ] ].

aperitif_n1 := n_intr_le &
 [ STEM < "aperitif" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_aperitif_n_1_rel",
            PHON.ONSET voc ] ].

aperture_n1 := n_intr_le &
 [ STEM < "aperture" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_aperture_n_1_rel",
            PHON.ONSET voc ] ].

apex_n1 := n_proper_le &
 [ STEM < "apex" >,
   SYNSEM [ LKEYS.KEYREL.CARG "apex",
            PHON.ONSET voc ] ].

api_n1 := n_proper_le &
 [ STEM < "api" >,
   SYNSEM [ LKEYS.KEYREL.CARG "api",
            PHON.ONSET voc ] ].

api_n2 := n_proper_le &
 [ STEM < "a.p.i." >,
   SYNSEM [ LKEYS.KEYREL.CARG "api",
            PHON.ONSET voc ] ].

aplenty_a1 := adj_pred_intrans_le &
 [ STEM < "aplenty" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_aplenty_a_1_rel",
            PHON.ONSET voc ] ].

apollyon := n_proper_le &
 [ STEM < "apollyon" >,
   SYNSEM [ LKEYS.KEYREL.CARG "apollyon",
            PHON.ONSET voc ] ].

apologetic_a1 := adj_intrans_le &
 [ STEM < "apologetic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_apologetic_a_1_rel",
            PHON.ONSET voc ] ].

apologetically_adv1 := adv_int_vp_le &
 [ STEM < "apologetically" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_apologetic_a_1_rel",
            PHON.ONSET voc ] ].

apologize_v1 := v_double_pp*_le &
 [ STEM < "apologize" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_rel,
                    --OCOMPKEY _for_p_rel,
                    KEYREL.PRED "_apologize_v_1_rel" ],
            PHON.ONSET voc ] ].

apology_n1 := n_intr_le &
 [ STEM < "apology" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_apology_n_1_rel",
            PHON.ONSET voc ] ].

apostle_n1 := n_intr_le &
 [ STEM < "apostle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_apostle_n_1_rel",
            PHON.ONSET voc ] ].

apostrophe_n1 := n_intr_le &
 [ STEM < "apostrophe" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_apostrophe_n_1_rel",
            PHON.ONSET voc ] ].

apostrophe_s_2_lex := n_poss_clitic_le &
 [ STEM < "'s" >,
   SYNSEM.PHON.ONSET con ].

apostrophe_s_3_lex := n_poss_clitic_pl_le &
 [ STEM < "'" >,
   SYNSEM.PHON.ONSET con ].

apostrophe_s_lex := n_poss_clitic_le &
 [ STEM < "s" >,
   SYNSEM.PHON.ONSET voc ].

apostrophe_s_nq_lex := n_poss_clitic_noquant_le &
 [ STEM < "'s" >,
   SYNSEM.PHON.ONSET con ].

app_n1 := n_intr_le &
 [ STEM < "app" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_app_n_1_rel",
            PHON.ONSET voc ] ].

appall_n1 := n_mass_le &
 [ STEM < "appall" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_appall_n_1_rel",
            PHON.ONSET voc ] ].

appall_v1 := v_np_trans_le &
 [ STEM < "appall" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_appall_v_1_rel",
            PHON.ONSET voc ] ].

appall_v2 := v_expl_it_subj_np_cp_le &
 [ STEM < "appall" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_appall_v_1_rel",
            PHON.ONSET voc ] ].

apparatus_n1 := n_intr_le &
 [ STEM < "apparatus" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_apparatus_n_1_rel",
            PHON.ONSET voc ] ].

apparent_isect := adj_intrans_le &
 [ STEM < "apparent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_apparent_a_1_rel",
            PHON.ONSET voc ] ].

apparently_adv1 := adv_vp_aux_le &
 [ STEM < "apparently" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_apparent_a_1_rel",
            PHON.ONSET voc ] ].

apparently_adv2 := adv_s_pre_le &
 [ STEM < "apparently" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_apparent_a_1_rel",
            PHON.ONSET voc ] ].

apparently_adv3 := adv_negmod_le &
 [ STEM < "apparently" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_apparent_a_1_rel",
            PHON.ONSET voc ] ].

appeal_n1 := n_mass_count_le &
 [ STEM < "appeal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_appeal_n_1_rel",
            PHON.ONSET voc ] ].

appeal_to_v1 := v_empty_prep_intrans_le &
 [ STEM < "appeal" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_appeal_v_to_rel" ],
            PHON.ONSET voc ] ].

appeal_v1 := v_oeq_pp_inf_le &
 [ STEM < "appeal" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_appeal_v_to_rel" ],
            PHON.ONSET voc ] ].

appeal_v2 := v_np*_trans_le &
 [ STEM < "appeal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_appeal_v_1_rel",
            PHON.ONSET voc ] ].

appealing_a1 := adj_trans_le &
 [ STEM < "appealing" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_appealing_a_to_rel" ],
            PHON.ONSET voc ] ].

appear_v1 := v_pp_inf_ssr_le &
 [ STEM < "appear" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_appear_v_to_rel",
            PHON.ONSET voc ] ].

appear_v2 := v_prdp_pp_seq_adj_le &
 [ STEM < "appear" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_appear_v_to_rel",
            PHON.ONSET voc ] ].

appear_v3 := v_expl_it_subj_pp_cp_le &
 [ STEM < "appear" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_appear_v_to_rel",
            PHON.ONSET voc ] ].

appear_v4 := v_unerg_le &
 [ STEM < "appear" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_appear_v_1_rel",
            PHON.ONSET voc ] ].

appearance_n1 := n_ppof_le &
 [ STEM < "appearance" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_appearance_n_of_rel",
            PHON.ONSET voc ] ].

appellation_n1 := n_intr_le &
 [ STEM < "appellation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_appellation_n_1_rel",
            PHON.ONSET voc ] ].

append_v1 := v_np*_trans_le &
 [ STEM < "append" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_append_v_1_rel",
            PHON.ONSET voc ] ].

appendage_n1 := n_intr_le &
 [ STEM < "appendage" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_appendage_n_1_rel",
            PHON.ONSET voc ] ].

appendant_a1 := adj_trans_le &
 [ STEM < "appendant" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_appendant_a_to_rel" ],
            PHON.ONSET voc ] ].

appendant_n1 := n_intr_le &
 [ STEM < "appendant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_appendant_n_1_rel",
            PHON.ONSET voc ] ].

appendix_n1 := n_intr_le &
 [ STEM < "appendix" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_appendix_n_1_rel",
            PHON.ONSET voc ] ].

appertain_to_v1 := v_empty_prep_intrans_le &
 [ STEM < "appertain" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_appertain_v_to_rel" ],
            PHON.ONSET voc ] ].

appetite_n1 := n_intr_le &
 [ STEM < "appetite" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_appetite_n_1_rel",
            PHON.ONSET voc ] ].

appetizer_n1 := n_intr_le &
 [ STEM < "appetizer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_appetizer_n_1_rel",
            PHON.ONSET voc ] ].

appetizing_a1 := adj_intrans_le &
 [ STEM < "appetizing" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_appetizing_a_1_rel",
            PHON.ONSET voc ] ].

appetizingly_a1 := adv_int_vp_le &
 [ STEM < "appetizingly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_appetizing_a_1_rel",
            PHON.ONSET voc ] ].

apple_n1 := n_intr_le &
 [ STEM < "apple" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_apple_n_1_rel",
            PHON.ONSET voc ] ].

applesauce_n1 := n_mass_le &
 [ STEM < "applesauce" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_applesauce_n_1_rel",
            PHON.ONSET voc ] ].

appliance_n1 := n_intr_le &
 [ STEM < "appliance" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_appliance_n_1_rel",
            PHON.ONSET voc ] ].

applicable_a1 := adj_intrans_le &
 [ STEM < "applicable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_applicable_a_1_rel",
            PHON.ONSET voc ] ].

applicant_n1 := n_intr_le &
 [ STEM < "applicant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_applicant_n_1_rel",
            PHON.ONSET voc ] ].

application_n1 := n_mass_count_ppof_le &
 [ STEM < "application" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_application_n_of_rel",
            PHON.ONSET voc ] ].

applied_a1 := adj_intrans_le &
 [ STEM < "applied" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_applied_a_1_rel",
            PHON.ONSET voc ] ].

apply_to_v1 := v_double_pp_le &
 [ STEM < "apply" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_rel,
                    --OCOMPKEY _for_p_rel,
                    KEYREL.PRED "_apply_v_to_rel" ],
            PHON.ONSET voc ] ].

apply_v1 := v_np_trans_noger_le &
 [ STEM < "apply" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_apply_v_2_rel",
            PHON.ONSET voc ] ].

apply_v2 := v_np_prep_trans_le &
 [ STEM < "apply" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _to_p_rel,
                    KEYREL.PRED "_apply_v_to_rel" ],
            PHON.ONSET voc ] ].

apply_v3 := v_empty_prep_intrans_le &
 [ STEM < "apply" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_apply_v_for_rel" ],
            PHON.ONSET voc ] ].

apply_v4 := v_unacc_le &
 [ STEM < "apply" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_apply_v_1_rel",
            PHON.ONSET voc ] ].

apply_v5 := v_empty_prep_intrans_le &
 [ STEM < "apply" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_apply_v_to_rel" ],
            PHON.ONSET voc ] ].

apply_v6 := v_subj_equi_le &
 [ STEM < "apply" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_apply_v_1_rel",
            PHON.ONSET voc ] ].

appoint_v1 := v_np_trans_le &
 [ STEM < "appoint" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_appoint_v_1_rel",
            PHON.ONSET voc ] ].

appoint_v2 := v_np_as_le &
 [ STEM < "appoint" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_appoint_v_as_rel",
            PHON.ONSET voc ] ].

appoint_v3 := v_ditrans_only_le &
 [ STEM < "appoint" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_appoint_v_1_rel",
            PHON.ONSET voc ] ].

appointment_n1 := n_intr_le &
 [ STEM < "appointment" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_appointment_n_1_rel",
            PHON.ONSET voc ] ].

apportion_v1 := v_np_trans_le &
 [ STEM < "apportion" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_apportion_v_1_rel",
            PHON.ONSET voc ] ].

apportionment_n1 := n_mass_count_le &
 [ STEM < "apportionment" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_apportionment_n_1_rel",
            PHON.ONSET voc ] ].

apposition_n1 := n_mass_count_le &
 [ STEM < "apposition" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_apposition_n_1_rel",
            PHON.ONSET voc ] ].

appraise_v1 := v_np_trans_le &
 [ STEM < "appraise" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_appraise_v_1_rel",
            PHON.ONSET voc ] ].

appreciable_a1 := adj_intrans_le &
 [ STEM < "appreciable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_appreciable_a_1_rel",
            PHON.ONSET voc ] ].

appreciate_v1 := v_np_trans_le &
 [ STEM < "appreciate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_appreciate_v_1_rel",
            PHON.ONSET voc ] ].

appreciate_v2 := v_unerg_le &
 [ STEM < "appreciate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_appreciate_v_2_rel",
            PHON.ONSET voc ] ].

appreciate_v3 := v_cp_non_trans_le &
 [ STEM < "appreciate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_appreciate_v_1_rel",
            PHON.ONSET voc ] ].

appreciation_n1 := n_mass_ppcomp_le &
 [ STEM < "appreciation" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_appreciation_n_for_rel" ],
            PHON.ONSET voc ] ].

appreciation_n2 := n_intr_sg_le &
 [ STEM < "appreciation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_appreciation_n_for_rel",
            PHON.ONSET voc ] ].

appreciative_a1 := adj_intrans_le &
 [ STEM < "appreciative" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_appreciative_a_1_rel",
            PHON.ONSET voc ] ].

apprehend_v1 := v_np_trans_le &
 [ STEM < "apprehend" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_apprehend_v_1_rel",
            PHON.ONSET voc ] ].

apprehension_n1 := n_mass_count_le &
 [ STEM < "apprehension" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_apprehension_n_1_rel",
            PHON.ONSET voc ] ].

apprentice_n1 := n_intr_le &
 [ STEM < "apprentice" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_apprentice_n_1_rel",
            PHON.ONSET voc ] ].

approach_n1 := n_ppcomp_le &
 [ STEM < "approach" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_approach_n_to_rel" ],
            PHON.ONSET voc ] ].

approach_v1 := v_np*_trans_le &
 [ STEM < "approach" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_approach_v_1_rel",
            PHON.ONSET voc ] ].

appropriate_a1 := adj_trans_le &
 [ STEM < "appropriate" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_appropriate_a_to_rel" ],
            PHON.ONSET voc ] ].

appropriate_v1 := v_np_trans_le &
 [ STEM < "appropriate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_appropriate_v_1_rel",
            PHON.ONSET voc ] ].

appropriately_isect := adv_int_vp_le &
 [ STEM < "appropriately" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_appropriate_a_1_rel",
            PHON.ONSET voc ] ].

appropriation_n1 := n_mass_count_le &
 [ STEM < "appropriation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_appropriation_n_1_rel",
            PHON.ONSET voc ] ].

approval_n1 := n_ppof_le &
 [ STEM < "approval" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_approval_n_of_rel",
            PHON.ONSET voc ] ].

approve_of_v1 := v_empty_prep_intrans_le &
 [ STEM < "approve" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_approve_v_of_rel" ],
            PHON.ONSET voc ] ].

approve_v1 := v_np*_trans_le &
 [ STEM < "approve" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_approve_v_1_rel",
            PHON.ONSET voc ] ].

approved_isect := adj_intrans_le &
 [ STEM < "approved" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_approved_a_1_rel",
            PHON.ONSET voc ] ].

approx_thirty_minute := adj_approx_minute_le &
 [ STEM < "thirtyish" >,
   SYNSEM [ LKEYS.KEYREL.CARG "30",
            PHON.ONSET con ] ].

approximate_a1 := adj_intrans_le &
 [ STEM < "approximate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_approximate_a_1_rel",
            PHON.ONSET voc ] ].

approximate_v1 := v_np_trans_le &
 [ STEM < "approximate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_approximate_v_1_rel",
            PHON.ONSET voc ] ].

approximately := adv_degree_spec_le &
 [ STEM < "approximately" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_approximately_x_rel",
            PHON.ONSET voc ] ].

approximately_abb := adv_degree_spec_le &
 [ STEM < "approx." >,
   SYNSEM [ LKEYS.KEYREL.PRED "_approximately_x_rel",
            PHON.ONSET voc ] ].

approximation_n1 := n_mass_count_ppof_le &
 [ STEM < "approximation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_approximation_n_of_rel",
            PHON.ONSET voc ] ].

appurtenance_n1 := n_intr_le &
 [ STEM < "appurtenance" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_appurtenance_n_1_rel",
            PHON.ONSET voc ] ].

apricot_computer_n1 := n_proper_le &
 [ STEM < "apricot", "computer" >,
   SYNSEM [ LKEYS.KEYREL.CARG "apricot_computer",
            PHON.ONSET voc ] ].

april := n_month_le &
 [ STEM < "april" >,
   SYNSEM [ LKEYS.KEYREL.CARG "apr",
            PHON.ONSET voc ] ].

april_2 := n_month_year_le &
 [ STEM < "april" >,
   SYNSEM [ LKEYS.KEYREL.CARG "apr",
            PHON.ONSET voc ] ].

april_abb_n1 := n_month_le &
 [ STEM < "apr" >,
   SYNSEM [ LKEYS.KEYREL.CARG "apr",
            PHON.ONSET voc ] ].

april_abb_n2 := n_month_year_le &
 [ STEM < "apr" >,
   SYNSEM [ LKEYS.KEYREL.CARG "apr",
            PHON.ONSET voc ] ].

april_abb_n3 := n_month_le &
 [ STEM < "apr." >,
   SYNSEM [ LKEYS.KEYREL.CARG "apr",
            PHON.ONSET voc ] ].

april_abb_n4 := n_month_year_le &
 [ STEM < "apr." >,
   SYNSEM [ LKEYS.KEYREL.CARG "apr",
            PHON.ONSET voc ] ].

april_the_det := det_month_le &
 [ STEM < "april", "the" >,
   SYNSEM [ LKEYS.ALTKEYREL.CARG "apr",
            PHON.ONSET voc ] ].

apropos_a1 := adj_intrans_le &
 [ STEM < "apropos" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_apropos_a_1_rel",
            PHON.ONSET voc ] ].

aptly_adv := adv_int_vp_le &
 [ STEM < "aptly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_apt_a_1_rel",
            PHON.ONSET voc ] ].

aquarium_n1 := n_intr_le &
 [ STEM < "aquarium" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_aquarium_n_1_rel",
            PHON.ONSET voc ] ].

aquatic_a1 := adj_intrans_le &
 [ STEM < "aquatic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_aquatic_a_1_rel",
            PHON.ONSET voc ] ].

arab_a1 := adj_intrans_le &
 [ STEM < "arab" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_arab_a_1_rel",
            PHON.ONSET voc ] ].

arab_n1 := n_intr_le &
 [ STEM < "arab" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_arab_n_1_rel",
            PHON.ONSET voc ] ].

arabian_a1 := adj_intrans_le &
 [ STEM < "arabian" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_arabian_a_1_rel",
            PHON.ONSET voc ] ].

arabian_n1 := n_intr_le &
 [ STEM < "arabian" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_arabian_n_1_rel",
            PHON.ONSET voc ] ].

arabian_n2 := n_proper_le &
 [ STEM < "arabian" >,
   SYNSEM [ LKEYS.KEYREL.CARG "arabian",
            PHON.ONSET voc ] ].

arabic_a1 := adj_intrans_le &
 [ STEM < "arabic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_arabic_a_1_rel",
            PHON.ONSET voc ] ].

arabic_n1 := n_proper_le &
 [ STEM < "arabic" >,
   SYNSEM [ LKEYS.KEYREL.CARG "arabic",
            PHON.ONSET voc ] ].

arabica_n1 := n_proper_le &
 [ STEM < "arabica" >,
   SYNSEM [ LKEYS.KEYREL.CARG "arabica",
            PHON.ONSET voc ] ].

arability_n1 := n_mass_le &
 [ STEM < "arability" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_arability_n_1_rel",
            PHON.ONSET voc ] ].

aral_n1 := n_intr_named_le &
 [ STEM < "aral" >,
   SYNSEM [ LKEYS.KEYREL.CARG "aral",
            PHON.ONSET con ] ].

arbitrarily_isect := adv_int_vp_le &
 [ STEM < "arbitrarily" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_arbitrary_a_1_rel",
            PHON.ONSET voc ] ].

arbitrary_a1 := adj_intrans_le &
 [ STEM < "arbitrary" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_arbitrary_a_1_rel",
            PHON.ONSET voc ] ].

arbitrator_n1 := n_intr_le &
 [ STEM < "arbitrator" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_arbitrator_n_1_rel",
            PHON.ONSET voc ] ].

arbo_n1 := n_proper_le &
 [ STEM < "arbo" >,
   SYNSEM [ LKEYS.KEYREL.CARG "arbo",
            PHON.ONSET voc ] ].

arbor_n1 := n_intr_le &
 [ STEM < "arbor" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_arbor_n_1_rel",
            PHON.ONSET voc ] ].

arborescent_a1 := adj_intrans_le &
 [ STEM < "arborescent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_arborescent_a_1_rel",
            PHON.ONSET voc ] ].

arc_de_triomphe_n1 := n_proper_le &
 [ STEM < "arc", "de", "triomphe" >,
   SYNSEM [ LKEYS.KEYREL.CARG "arc_de_triomphe",
            PHON.ONSET voc ] ].

arc_n1 := n_intr_le &
 [ STEM < "arc" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_arc_n_1_rel",
            PHON.ONSET voc ] ].

arc_v1 := v_np_trans_noger_le &
 [ STEM < "arc" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_arc_v_cause_rel",
            PHON.ONSET con ] ].

arc_v2 := v_unacc_le &
 [ STEM < "arc" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_arc_v_1_rel",
            PHON.ONSET con ] ].

arcade_n1 := n_intr_le &
 [ STEM < "arcade" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_arcade_n_1_rel",
            PHON.ONSET voc ] ].

arch_a1 := adj_intrans_le &
 [ STEM < "arch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_arch_a_1_rel",
            PHON.ONSET voc ] ].

arch_n1 := n_intr_le &
 [ STEM < "arch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_arch_n_1_rel",
            PHON.ONSET voc ] ].

arch_of_triumph_n1 := n_intr_named_le &
 [ STEM < "arch", "of", "triumph" >,
   SYNSEM [ LKEYS.KEYREL.CARG "arch_of_triumph",
            PHON.ONSET voc ] ].

arch_v1 := v_np_trans_noger_le &
 [ STEM < "arch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_arch_v_cause_rel",
            PHON.ONSET voc ] ].

arch_v2 := v_unacc_le &
 [ STEM < "arch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_arch_v_1_rel",
            PHON.ONSET voc ] ].

arch_v3 := v_prep_dir_oblig_le &
 [ STEM < "arch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_arch_v_cause_rel",
            PHON.ONSET voc ] ].

archaeologist_n3 := n_intr_le &
 [ STEM < "archaeologist" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_archeologist_n_1_rel",
            PHON.ONSET voc ] ].

archbishop_n1 := n_intr_le &
 [ STEM < "archbishop" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_archbishop_n_1_rel",
            PHON.ONSET voc ] ].

archegonium_n1 := n_intr_le &
 [ STEM < "archegonium" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_archegonium_n_1_rel",
            PHON.ONSET voc ] ].

archeologist_n1 := n_intr_le &
 [ STEM < "archeologist" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_archeologist_n_1_rel",
            PHON.ONSET voc ] ].

archeologist_n2 := n_intr_le &
 [ STEM < "archÃ¦ologist" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_archeologist_n_1_rel",
            PHON.ONSET voc ] ].

archepiscopal_a1 := adj_intrans_le &
 [ STEM < "archepiscopal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_archepiscopal_a_1_rel",
            PHON.ONSET voc ] ].

archery_n1 := n_mass_le &
 [ STEM < "archery" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_archery_n_1_rel",
            PHON.ONSET voc ] ].

archiepiscopal_a1 := adj_intrans_le &
 [ STEM < "archiepiscopal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_archiepiscopal_a_1_rel",
            PHON.ONSET voc ] ].

archimedes_n1 := n_proper_le &
 [ STEM < "archimedes" >,
   SYNSEM [ LKEYS.KEYREL.CARG "archimedes",
            PHON.ONSET voc ] ].

archipelago_n1 := n_intr_le &
 [ STEM < "archipelago" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_archipelago_n_1_rel",
            PHON.ONSET voc ] ].

architect_n1 := n_ppof_le &
 [ STEM < "architect" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_architect_n_of_rel",
            PHON.ONSET voc ] ].

architectural_a1 := adj_intrans_le &
 [ STEM < "architectural" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_architectural_a_1_rel",
            PHON.ONSET voc ] ].

architecturally_adv1 := adv_int_vp_post_le &
 [ STEM < "architecturally" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_architectural_a_1_rel",
            PHON.ONSET voc ] ].

architecture_n1 := n_mass_le &
 [ STEM < "architecture" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_architecture_n_1_rel",
            PHON.ONSET voc ] ].

architrave_n1 := n_intr_le &
 [ STEM < "architrave" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_architrave_n_1_rel",
            PHON.ONSET voc ] ].

archive_n1 := n_intr_le &
 [ STEM < "archive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_archive_n_1_rel",
            PHON.ONSET voc ] ].

archive_v1 := v_np_trans_le &
 [ STEM < "archive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_archive_v_1_rel",
            PHON.ONSET voc ] ].

archway_n1 := n_intr_le &
 [ STEM < "archway" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_archway_n_1_rel",
            PHON.ONSET voc ] ].

arctic_a1 := adj_intrans_le &
 [ STEM < "arctic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_arctic_a_1_rel",
            PHON.ONSET voc ] ].

arctic_n1 := n_no_cmpnd_le &
 [ STEM < "arctic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_arctic_n_1_rel",
            PHON.ONSET voc ] ].

arduous_a1 := adj_intrans_le &
 [ STEM < "arduous" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_arduous_a_1_rel",
            PHON.ONSET voc ] ].

area_n1 := n_mass_count_ppof_le &
 [ STEM < "area" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_area_n_of_rel",
            PHON.ONSET voc ] ].

area_post_ttl := n_post_title_le &
 [ STEM < "area" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_area_n_of_rel",
            PHON.ONSET voc ] ].

arena_post_ttl := n_post_title_le &
 [ STEM < "arena" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_arena_n_1_rel",
            PHON.ONSET voc ] ].

arentzbu_n1 := n_proper_le &
 [ STEM < "arentzbu" >,
   SYNSEM [ LKEYS.KEYREL.CARG "arentzbu",
            PHON.ONSET voc ] ].

argentina_n1 := n_proper_le &
 [ STEM < "argentina" >,
   SYNSEM [ LKEYS.KEYREL.CARG "argentina",
            PHON.ONSET voc ] ].

argue_about_v1 := v_empty_prep_intrans_le &
 [ STEM < "argue" >,
   SYNSEM [ LKEYS [ --COMPKEY _about_p_sel_rel,
                    KEYREL.PRED "_argue_v_about_rel" ],
            PHON.ONSET voc ] ].

argue_for_v1 := v_empty_prep_intrans_le &
 [ STEM < "argue" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_argue_v_for_rel" ],
            PHON.ONSET voc ] ].

argue_over_v1 := v_empty_prep_intrans_le &
 [ STEM < "argue" >,
   SYNSEM [ LKEYS [ --COMPKEY _over_p_sel_rel,
                    KEYREL.PRED "_argue_v_over_rel" ],
            PHON.ONSET voc ] ].

argue_v1 := v_cp_prop*_non_trans_le &
 [ STEM < "argue" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_argue_v_1_rel",
            PHON.ONSET voc ] ].

argue_v2 := v_np*_trans_le &
 [ STEM < "argue" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_argue_v_1_rel",
            PHON.ONSET voc ] ].

argument_n1 := n_intr_le &
 [ STEM < "argument" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_argument_n_1_rel",
            PHON.ONSET voc ] ].

argumentation_n1 := n_intr_le &
 [ STEM < "argumentation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_argumentation_n_1_rel",
            PHON.ONSET voc ] ].

arhats_n1 := n_proper_le &
 [ STEM < "arhats" >,
   SYNSEM [ LKEYS.KEYREL.CARG "arhats",
            PHON.ONSET voc ] ].

aria_n1 := n_intr_le &
 [ STEM < "aria" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_aria_n_1_rel",
            PHON.ONSET voc ] ].

arise_v1 := v_unerg_le &
 [ STEM < "arise" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_arise_v_1_rel",
            PHON.ONSET voc ] ].

arise_v2 := v_empty_prep_intrans_le &
 [ STEM < "arise" >,
   SYNSEM [ LKEYS [ --COMPKEY _from_p_sel_rel,
                    KEYREL.PRED "_arise_v_from_rel" ],
            PHON.ONSET voc ] ].

arithmetic_n1 := n_mass_le &
 [ STEM < "arithmetic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_arithmetic_n_1_rel",
            PHON.ONSET voc ] ].

arithmetical_a1 := adj_intrans_le &
 [ STEM < "arithmetical" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_arithmetical_a_1_rel",
            PHON.ONSET voc ] ].

arizona_n1 := n_proper_le &
 [ STEM < "arizona" >,
   SYNSEM [ LKEYS.KEYREL.CARG "arizona",
            PHON.ONSET voc ] ].

arizona_n2 := n_proper_abb_le &
 [ STEM < "az" >,
   SYNSEM [ LKEYS.KEYREL.CARG "arizona",
            PHON.ONSET voc ] ].

arkansas_n1 := n_proper_le &
 [ STEM < "arkansas" >,
   SYNSEM [ LKEYS.KEYREL.CARG "arkansas",
            PHON.ONSET voc ] ].

arkansas_n2 := n_proper_abb_le &
 [ STEM < "ar" >,
   SYNSEM [ LKEYS.KEYREL.CARG "arkansas",
            PHON.ONSET voc ] ].

arm_n1 := n_intr_le &
 [ STEM < "arm" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_arm_n_1_rel",
            PHON.ONSET voc ] ].

armada_n1 := n_intr_le &
 [ STEM < "armada" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_armada_n_1_rel",
            PHON.ONSET voc ] ].

armament_n1 := n_mass_count_le &
 [ STEM < "armament" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_armament_n_1_rel",
            PHON.ONSET voc ] ].

armchair_n1 := n_intr_le &
 [ STEM < "armchair" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_armchair_n_1_rel",
            PHON.ONSET voc ] ].

armed_a1 := adj_intrans_le &
 [ STEM < "armed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_armed_a_1_rel",
            PHON.ONSET voc ] ].

army_n1 := n_ppof_le &
 [ STEM < "army" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_army_n_of_rel",
            PHON.ONSET voc ] ].

arne_n1 := n_proper_le &
 [ STEM < "arne" >,
   SYNSEM [ LKEYS.KEYREL.CARG "arne",
            PHON.ONSET voc ] ].

arnesen_n1 := n_proper_le &
 [ STEM < "arnesen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "arnesen",
            PHON.ONSET voc ] ].

arnfinn_n1 := n_proper_le &
 [ STEM < "arnfinn" >,
   SYNSEM [ LKEYS.KEYREL.CARG "arnfinn",
            PHON.ONSET voc ] ].

arnold_n1 := n_proper_le &
 [ STEM < "arnold" >,
   SYNSEM [ LKEYS.KEYREL.CARG "arnold",
            PHON.ONSET voc ] ].

aromatic_a1 := adj_intrans_le &
 [ STEM < "aromatic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_aromatic_a_1_rel",
            PHON.ONSET voc ] ].

around := p_le &
 [ STEM < "around" >,
   SYNSEM [ LKEYS.KEYREL.PRED _around_p_rel,
            PHON.ONSET voc ] ].

around_adv := pp_no_nmod_le &
 [ STEM < "around" >,
   SYNSEM [ LKEYS.KEYREL.PRED _around_p_rel,
            PHON.ONSET voc ] ].

around_deg := adv_degree_spec_le &
 [ STEM < "around" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_around_x_deg_rel",
            PHON.ONSET voc ] ].

around_dollar_adj := adj_dollar_le &
 [ STEM < "around" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_around_a_dollar_rel",
            PHON.ONSET voc ] ].

around_prtcl := p_prtcl_le &
 [ STEM < "around" >,
   SYNSEM [ LKEYS.KEYREL.PRED _around_p_sel_rel,
            PHON.ONSET voc ] ].

arouse_v1 := v_np_trans_le &
 [ STEM < "arouse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_arouse_v_1_rel",
            PHON.ONSET voc ] ].

arrange_for_v1 := v_expl_pp_inf_seq_le &
 [ STEM < "arrange" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_arrange_v_for_rel" ],
            PHON.ONSET voc ] ].

arrange_v1 := v_np_trans_le &
 [ STEM < "arrange" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_arrange_v_1_rel",
            PHON.ONSET voc ] ].

arrange_v2 := v_empty_prep_intrans_le &
 [ STEM < "arrange" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_arrange_v_for_rel" ],
            PHON.ONSET voc ] ].

arrange_v3 := v_cp_non_trans_le &
 [ STEM < "arrange" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_arrange_v_1_rel",
            PHON.ONSET voc ] ].

arrange_v4 := v_cp_inf_le &
 [ STEM < "arrange" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_arrange_v_1_rel",
            PHON.ONSET voc ] ].

arrange_with_v1 := v_pp_inf_seq_le &
 [ STEM < "arrange" >,
   SYNSEM [ LKEYS [ --COMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_arrange_v_with_rel" ],
            PHON.ONSET voc ] ].

arrange_with_v2 := v_expl_pp_inf_seq_le &
 [ STEM < "arrange" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_arrange_v_with_rel" ],
            PHON.ONSET voc ] ].

arrangement_n1 := n_intr_le &
 [ STEM < "arrangement" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_arrangement_n_1_rel",
            PHON.ONSET voc ] ].

arranging_n1 := n_intr_le &
 [ STEM < "arranging" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_arranging_n_1_rel",
            PHON.ONSET voc ] ].

array_n1 := n_intr_le &
 [ STEM < "array" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_array_n_1_rel",
            PHON.ONSET voc ] ].

array_v1 := v_np_trans_le &
 [ STEM < "array" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_array_v_1_rel",
            PHON.ONSET voc ] ].

arrear_nom := n_adv_pl_le &
 [ STEM < "arrear" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED _arrear_a_1_rel,
                    KEYREL.PRED place_n_rel ],
            PHON.ONSET voc ] ].

arrears_n1 := n_plur_nocmpnd_le &
 [ STEM < "arrear" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_arrears_n_1_rel",
            PHON.ONSET voc ] ].

arrest_n1 := n_mass_count_le &
 [ STEM < "arrest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_arrest_n_1_rel",
            PHON.ONSET voc ] ].

arrest_v1 := v_np*_trans_le &
 [ STEM < "arrest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_arrest_v_1_rel",
            PHON.ONSET voc ] ].

arrival_n1 := n_intr_nosort_le &
 [ STEM < "arrival" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_arrival_n_1_rel",
            PHON.ONSET voc ] ].

arrival_n2 := n_mass_no_cmpnd_le &
 [ STEM < "arrival" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_arrival_n_1_rel",
            PHON.ONSET voc ] ].

arrive_v1 := v_unerg_le &
 [ STEM < "arrive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_arrive_v_1_rel",
            PHON.ONSET voc ] ].

arrow_n1 := n_intr_le &
 [ STEM < "arrow" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_arrow_n_1_rel",
            PHON.ONSET voc ] ].

arrowhead_n1 := n_intr_le &
 [ STEM < "arrowhead" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_arrowhead_n_1_rel",
            PHON.ONSET voc ] ].

arsenic_n1 := n_mass_le &
 [ STEM < "arsenic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_arsenic_n_1_rel",
            PHON.ONSET voc ] ].

art_n1 := n_mass_count_le &
 [ STEM < "art" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_art_n_1_rel",
            PHON.ONSET voc ] ].

artery_n1 := n_intr_le &
 [ STEM < "artery" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_artery_n_1_rel",
            PHON.ONSET voc ] ].

artful_a1 := adj_intrans_le &
 [ STEM < "artful" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_artful_a_1_rel",
            PHON.ONSET voc ] ].

arthur_n1 := n_proper_le &
 [ STEM < "arthur" >,
   SYNSEM [ LKEYS.KEYREL.CARG "arthur",
            PHON.ONSET voc ] ].

article_n1 := n_ppof_le &
 [ STEM < "article" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_article_n_of_rel",
            PHON.ONSET voc ] ].

articulate_a1 := adj_intrans_le &
 [ STEM < "articulate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_articulate_a_1_rel",
            PHON.ONSET voc ] ].

articulate_v1 := v_np_trans_le &
 [ STEM < "articulate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_articulate_v_1_rel",
            PHON.ONSET voc ] ].

articulate_v2 := v_cp_non_trans_le &
 [ STEM < "articulate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_articulate_v_1_rel",
            PHON.ONSET voc ] ].

articulation_n1 := n_mass_count_le &
 [ STEM < "articulation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_articulation_n_1_rel",
            PHON.ONSET voc ] ].

artifact_n1 := n_intr_le &
 [ STEM < "artifact" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_artifact_n_1_rel",
            PHON.ONSET voc ] ].

artifice_n1 := n_mass_count_le &
 [ STEM < "artifice" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_artifice_n_1_rel",
            PHON.ONSET voc ] ].

artificial_a1 := adj_intrans_le &
 [ STEM < "artificial" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_artificial_a_1_rel",
            PHON.ONSET voc ] ].

artificially := adv_int_vp_le &
 [ STEM < "artificially" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_artificial_a_1_rel",
            PHON.ONSET voc ] ].

artillery_n1 := n_mass_le &
 [ STEM < "artillery" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_artillery_n_1_rel",
            PHON.ONSET voc ] ].

artist_n1 := n_intr_le &
 [ STEM < "artist" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_artist_n_1_rel",
            PHON.ONSET voc ] ].

artistic_a1 := adj_intrans_le &
 [ STEM < "artistic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_artistic_a_1_rel",
            PHON.ONSET voc ] ].

artistical_a1 := adj_intrans_le &
 [ STEM < "artistical" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_artistical_a_1_rel",
            PHON.ONSET voc ] ].

artless_a1 := adj_intrans_le &
 [ STEM < "artless" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_artless_a_1_rel",
            PHON.ONSET voc ] ].

arvid_n1 := n_proper_le &
 [ STEM < "arvid" >,
   SYNSEM [ LKEYS.KEYREL.CARG "arvid",
            PHON.ONSET voc ] ].

as_abb_post_ttl := n_post_title_le &
 [ STEM < "as." >,
   SYNSEM [ LKEYS.KEYREL.PRED "_as_n_abb_rel",
            PHON.ONSET voc ] ].

as_always_adv1 := adv_int_vp_post_le &
 [ STEM < "as", "always" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_as+always_a_1_rel",
            PHON.ONSET voc ] ].

as_comp_prep := p_noslash_prtcl_le &
 [ STEM < "as" >,
   SYNSEM [ LKEYS.KEYREL.PRED _as_p_comp_rel,
            PHON.ONSET voc ] ].

as_comp_prep_nc := p_noslash_prtcl_ncomp_le &
 [ STEM < "as" >,
   SYNSEM [ LKEYS.KEYREL.PRED _as_p_comp_rel,
            PHON.ONSET voc ] ].

as_eq_deg := as_degree_spec_le &
 [ STEM < "as" >,
   SYNSEM.PHON.ONSET voc ].

as_eq_nc_deg := comp_degree_spec_nc_le &
 [ STEM < "as" >,
   SYNSEM [ LKEYS.KEYREL.PRED comp_equal_rel,
            PHON.ONSET voc ] ].

as_far_as_subord := p_subconj_le &
 [ STEM < "as", "far", "as" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_as+far+as_x_rel",
            PHON.ONSET voc ] ].

as_follows_adv1 := adv_int_vp_post_le &
 [ STEM < "as", "follows" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_as+follows_a_1_rel",
            PHON.ONSET voc ] ].

as_for_p := p_le &
 [ STEM < "as", "for" >,
   SYNSEM [ LKEYS.KEYREL.PRED _as+for_p_rel,
            PHON.ONSET voc ] ].

as_if := p_subconj_le &
 [ STEM < "as", "if" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_as+if_x_rel",
            PHON.ONSET voc ] ].

as_if_c := comp_like_le &
 [ STEM < "as", "if" >,
   SYNSEM.PHON.ONSET voc ].

as_if_p := p_le &
 [ STEM < "as", "if" >,
   SYNSEM [ LKEYS.KEYREL.PRED _as+if_p_rel,
            PHON.ONSET voc ] ].

as_if_prd := p_subconj_prd_le &
 [ STEM < "as", "if" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_as+if_x_rel",
            PHON.ONSET voc ] ].

as_it_adj_p := p_as_adj_le &
 [ STEM < "as" >,
   SYNSEM [ LKEYS.KEYREL.PRED _as_p_comp_rel,
            PHON.ONSET voc ] ].

as_it_happens_adv1 := adv_int_vp_le &
 [ STEM < "as", "it", "happens" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_as+it+happens_a_1_rel",
            PHON.ONSET voc ] ].

as_long_as_subord := p_subconj_le &
 [ STEM < "as", "long", "as" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_as+long+as_x_rel",
            PHON.ONSET voc ] ].

as_nbar := p_nbar_comp_le &
 [ STEM < "as" >,
   SYNSEM [ LKEYS [ --COMPKEY non_temp_nom_rel,
                    KEYREL.PRED _as_p_nbar_rel ],
            PHON.ONSET con ] ].

as_of := p_le &
 [ STEM < "as", "of" >,
   SYNSEM [ LKEYS.KEYREL.PRED _as+of_p_rel,
            PHON.ONSET voc ] ].

as_of_yet_adv1 := adv_int_vp_post_le &
 [ STEM < "as", "of", "yet" >,
   SYNSEM [ LKEYS.KEYREL.PRED _as+of+yet_a_1_rel,
            PHON.ONSET voc ] ].

as_p1 := p_noger_le &
 [ STEM < "as" >,
   SYNSEM [ LKEYS.KEYREL.PRED _as_p_rel,
            PHON.ONSET voc ] ].

as_prd := p_subconj_prd_v_or_p_le &
 [ STEM < "as" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_as_x_prd_rel",
            PHON.ONSET voc ] ].

as_prdp_p1 := p_prdp_vp_le &
 [ STEM < "as" >,
   SYNSEM [ LKEYS.KEYREL.PRED _as_p_rel,
            PHON.ONSET voc ] ].

as_prdp_p2 := p_prdp_sel_le &
 [ STEM < "as" >,
   SYNSEM [ LKEYS.KEYREL.PRED _as_p_sel_rel,
            PHON.ONSET voc ] ].

as_prtcl := p_prtcl_le &
 [ STEM < "as" >,
   SYNSEM [ LKEYS.KEYREL.PRED _as_p_sel_rel,
            PHON.ONSET voc ] ].

as_root_pre := adv_s_pre_word_root_le &
 [ STEM < "as" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_as_a_1_rel",
            PHON.ONSET voc ] ].

as_subord := p_subconj_le &
 [ STEM < "as" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_as_x_subord_rel",
            PHON.ONSET voc ] ].

as_though := p_subconj_le &
 [ STEM < "as", "though" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_as+though_x_rel",
            PHON.ONSET voc ] ].

as_though_c := comp_like_le &
 [ STEM < "as", "though" >,
   SYNSEM.PHON.ONSET voc ].

as_though_prd := p_subconj_prd_le &
 [ STEM < "as", "though" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_as+though_x_rel",
            PHON.ONSET voc ] ].

as_to_p1 := p_reg_le &
 [ STEM < "as", "to" >,
   SYNSEM [ LKEYS.KEYREL.PRED _as+to_p_rel,
            PHON.ONSET voc ] ].

as_to_prtcl := p_prtcl_le &
 [ STEM < "as", "to" >,
   SYNSEM [ LKEYS.KEYREL.PRED _as+to_p_sel_rel,
            PHON.ONSET voc ] ].

as_usual_adv1 := adv_int_vp_post_le &
 [ STEM < "as", "usual" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_as+usual_a_1_rel",
            PHON.ONSET voc ] ].

as_well := adv_vp_post_le &
 [ STEM < "as", "well" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_as+well_a_1_rel",
            PHON.ONSET voc ] ].

as_well_adv2 := adv_vp_aux_le &
 [ STEM < "as", "well" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_as+well_a_1_rel",
            PHON.ONSET voc ] ].

as_well_as_conj_1 := conj_complex_as_well_as_le &
 [ STEM < "as", "well", "as" >,
   SYNSEM.PHON.ONSET voc ].

as_well_as_conj_2 := conj_complex_as_well_as_both_le &
 [ STEM < "as", "well", "as" >,
   SYNSEM.PHON.ONSET voc ].

asap_adv1 := adv_int_vp_post_le &
 [ STEM < "asap" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_asap_a_1_rel",
            PHON.ONSET voc ] ].

ascend_v1 := v_np*_trans_le &
 [ STEM < "ascend" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ascend_v_1_rel",
            PHON.ONSET voc ] ].

ascend_v2 := v_prep_dir_oblig_le &
 [ STEM < "ascend" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ascend_v_1_rel",
            PHON.ONSET voc ] ].

ascendant_a1 := adj_intrans_le &
 [ STEM < "ascendant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ascendant_a_1_rel",
            PHON.ONSET voc ] ].

ascender_n1 := n_intr_le &
 [ STEM < "ascender" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ascender_n_1_rel",
            PHON.ONSET voc ] ].

ascension_day := n_holiday_le &
 [ STEM < "ascension", "day" >,
   SYNSEM [ LKEYS.KEYREL.CARG "ascension_day",
            PHON.ONSET voc ] ].

ascension_n1 := n_intr_le &
 [ STEM < "ascension" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ascension_n_1_rel",
            PHON.ONSET voc ] ].

ascent_n1 := n_mass_count_le &
 [ STEM < "ascent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ascent_n_1_rel",
            PHON.ONSET voc ] ].

ascertain_v1 := v_np_trans_le &
 [ STEM < "ascertain" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ascertain_v_1_rel",
            PHON.ONSET voc ] ].

ascertain_v2 := v_cp_non_trans_le &
 [ STEM < "ascertain" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ascertain_v_1_rel",
            PHON.ONSET voc ] ].

ascidian_n1 := n_intr_le &
 [ STEM < "ascidian" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ascidian_n_1_rel",
            PHON.ONSET voc ] ].

ascii_n1 := n_proper_le &
 [ STEM < "ascii" >,
   SYNSEM [ LKEYS.KEYREL.CARG "ascii",
            PHON.ONSET voc ] ].

ascribe_v1 := v_empty_prep_intrans_le &
 [ STEM < "ascribe" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_ascribe_v_to_rel" ],
            PHON.ONSET voc ] ].

ash_n1 := n_mass_count_le &
 [ STEM < "ash" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ash_n_1_rel",
            PHON.ONSET voc ] ].

ash_wednesday := n_holiday_le &
 [ STEM < "ash", "wednesday" >,
   SYNSEM [ LKEYS.KEYREL.CARG "ash_wednesday",
            PHON.ONSET voc ] ].

ashamed_a1 := adj_intrans_le &
 [ STEM < "ashamed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ashamed_a_1_rel",
            PHON.ONSET voc ] ].

ashore_adv := pp_le &
 [ STEM < "ashore" >,
   SYNSEM [ LKEYS.KEYREL.PRED _ashore_p_rel,
            PHON.ONSET voc ] ].

asia_n1 := n_proper_le &
 [ STEM < "asia" >,
   SYNSEM [ LKEYS.KEYREL.CARG "asia",
            PHON.ONSET voc ] ].

asia_petrol_n1 := n_proper_le &
 [ STEM < "asia", "petrol" >,
   SYNSEM [ LKEYS.KEYREL.CARG "asia_petrol",
            PHON.ONSET voc ] ].

asian_a1 := adj_intrans_le &
 [ STEM < "asian" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_asian_a_1_rel",
            PHON.ONSET voc ] ].

asian_n1 := n_intr_le &
 [ STEM < "asian" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_asian_n_1_rel",
            PHON.ONSET voc ] ].

aside_adv := pp_le &
 [ STEM < "aside" >,
   SYNSEM [ LKEYS.KEYREL.PRED _aside_p_rel,
            PHON.ONSET voc ] ].

aside_from := p_le &
 [ STEM < "aside", "from" >,
   SYNSEM [ LKEYS.KEYREL.PRED _aside+from_p_rel,
            PHON.ONSET voc ] ].

aside_prtcl := p_prtcl_le &
 [ STEM < "aside" >,
   SYNSEM [ LKEYS.KEYREL.PRED _aside_p_sel_rel,
            PHON.ONSET voc ] ].

ask_about_v1 := v_empty_prep_trans*_le &
 [ STEM < "ask" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _about_p_sel_rel,
                    KEYREL.PRED "_ask_v_about_rel" ],
            PHON.ONSET voc ] ].

ask_for_v1 := v_empty_prep_trans*_le &
 [ STEM < "ask" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_ask_v_for_rel" ],
            PHON.ONSET voc ] ].

ask_quote_v1 := v_quote_top_le &
 [ STEM < "ask" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ask_v_1_rel",
            PHON.ONSET voc ] ].

ask_quote_v2 := v_quote_inv_le &
 [ STEM < "ask" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ask_v_1_rel",
            PHON.ONSET voc ] ].

ask_quote_v3 := v_quote_mc_le &
 [ STEM < "ask" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ask_v_1_rel",
            PHON.ONSET voc ] ].

ask_v1 := v_ditrans*_only_le &
 [ STEM < "ask" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ask_v_1_rel",
            PHON.ONSET voc ] ].

ask_v2 := v_obj_equi_le &
 [ STEM < "ask" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ask_v_1_rel",
            PHON.ONSET voc ] ].

ask_v3 := v_np_trans_cp_ques_le &
 [ STEM < "ask" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ask_v_1_rel",
            PHON.ONSET voc ] ].

ask_v4 := v_subj_equi_le &
 [ STEM < "ask" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ask_v_1_rel",
            PHON.ONSET voc ] ].

ask_v5 := v_cp_subj_le &
 [ STEM < "ask" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ask_v_1_rel",
            PHON.ONSET voc ] ].

ask_v6 := v_cp_inf_le &
 [ STEM < "ask" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ask_v_1_rel",
            PHON.ONSET voc ] ].

asleep_a1 := adj_pred_intrans_le &
 [ STEM < "asleep" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_asleep_a_1_rel",
            PHON.ONSET voc ] ].

asmodeus := n_proper_le &
 [ STEM < "asmodeus" >,
   SYNSEM [ LKEYS.KEYREL.CARG "asmodeus",
            PHON.ONSET voc ] ].

aspartame_n1 := n_proper_le &
 [ STEM < "aspartame" >,
   SYNSEM [ LKEYS.KEYREL.CARG "aspartame",
            PHON.ONSET voc ] ].

aspect_n1 := n_mass_count_le &
 [ STEM < "aspect" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_aspect_n_1_rel",
            PHON.ONSET voc ] ].

aspen_n1 := n_intr_le &
 [ STEM < "aspen" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_aspen_n_1_rel",
            PHON.ONSET voc ] ].

asphodel_n1 := n_intr_le &
 [ STEM < "asphodel" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_asphodel_n_1_rel",
            PHON.ONSET voc ] ].

aspiration_n1 := n_mass_count_le &
 [ STEM < "aspiration" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_aspiration_n_1_rel",
            PHON.ONSET voc ] ].

aspire_to_v1 := v_empty_prep_intrans_le &
 [ STEM < "aspire" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_aspire_v_to_rel" ],
            PHON.ONSET voc ] ].

aspire_v1 := v_subj_equi_le &
 [ STEM < "aspire" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_aspire_v_to_rel",
            PHON.ONSET voc ] ].

aspiring_a1 := adj_intrans_le &
 [ STEM < "aspiring" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_aspiring_a_1_rel",
            PHON.ONSET voc ] ].

ass_n1 := n_intr_le &
 [ STEM < "ass" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ass_n_1_rel",
            PHON.ONSET voc ] ].

assassinate_v1 := v_np_trans_le &
 [ STEM < "assassinate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_assassinate_v_1_rel",
            PHON.ONSET voc ] ].

assassination_n1 := n_mass_count_ppof_le &
 [ STEM < "assassination" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_assassination_n_of_rel",
            PHON.ONSET voc ] ].

assault_n1 := n_mass_count_le &
 [ STEM < "assault" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_assault_n_1_rel",
            PHON.ONSET voc ] ].

assault_v1 := v_np_trans_le &
 [ STEM < "assault" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_assault_v_1_rel",
            PHON.ONSET voc ] ].

assay_n1 := n_mass_count_le &
 [ STEM < "assay" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_assay_n_1_rel",
            PHON.ONSET voc ] ].

assay_v1 := v_subj_equi_le &
 [ STEM < "assay" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_assay_v_1_rel",
            PHON.ONSET voc ] ].

assay_v2 := v_np*_trans_le &
 [ STEM < "assay" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_assay_v_1_rel",
            PHON.ONSET voc ] ].

assemblage_n1 := n_mass_count_le &
 [ STEM < "assemblage" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_assemblage_n_1_rel",
            PHON.ONSET voc ] ].

assemble_v1 := v_np_trans_noger_le &
 [ STEM < "assemble" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_assemble_v_cause_rel",
            PHON.ONSET voc ] ].

assemble_v2 := v_unacc_le &
 [ STEM < "assemble" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_assemble_v_1_rel",
            PHON.ONSET voc ] ].

assembly_n1 := n_mass_count_ppof_le &
 [ STEM < "assembly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_assembly_n_of_rel",
            PHON.ONSET voc ] ].

assent_n1 := n_mass_count_le &
 [ STEM < "assent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_assent_n_1_rel",
            PHON.ONSET voc ] ].

assent_to_v1 := v_empty_prep_intrans_le &
 [ STEM < "assent" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_assent_v_to_rel" ],
            PHON.ONSET voc ] ].

assent_v1 := v_unerg_le &
 [ STEM < "assent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_assent_v_1_rel",
            PHON.ONSET voc ] ].

assert_v1 := v_np_trans_le &
 [ STEM < "assert" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_assert_v_1_rel",
            PHON.ONSET voc ] ].

assert_v2 := v_cp_non_trans_le &
 [ STEM < "assert" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_assert_v_1_rel",
            PHON.ONSET voc ] ].

assertion_n1 := n_mass_count_ppof_le &
 [ STEM < "assertion" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_assertion_n_of_rel",
            PHON.ONSET voc ] ].

assertion_n2 := n_cpcomp_fin_le &
 [ STEM < "assertion" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_assertion_n_of_rel",
            PHON.ONSET voc ] ].

assess_v1 := v_np_trans_le &
 [ STEM < "assess" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_assess_v_1_rel",
            PHON.ONSET voc ] ].

assess_v2 := v_np_as_le &
 [ STEM < "assess" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_assess_v_as_rel",
            PHON.ONSET voc ] ].

assess_v3 := v_obj_equi_le &
 [ STEM < "assess" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_assess_v_1_rel",
            PHON.ONSET voc ] ].

assess_v4 := v_cp_non_trans_le &
 [ STEM < "assess" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_assess_v_1_rel",
            PHON.ONSET voc ] ].

assessment_n1 := n_mass_count_le &
 [ STEM < "assessment" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_assessment_n_1_rel",
            PHON.ONSET voc ] ].

asset_n1 := n_intr_le &
 [ STEM < "asset" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_asset_n_1_rel",
            PHON.ONSET voc ] ].

assign_v1 := v_ditrans_le &
 [ STEM < "assign" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_assign_v_to_rel",
            PHON.ONSET voc ] ].

assign_v2 := v_np_trans_le &
 [ STEM < "assign" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_assign_v_1_rel",
            PHON.ONSET voc ] ].

assign_v3 := v_obj_equi_le &
 [ STEM < "assign" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_assign_v_1_rel",
            PHON.ONSET voc ] ].

assignment_n1 := n_mass_count_ppof_le &
 [ STEM < "assignment" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_assignment_n_of_rel",
            PHON.ONSET voc ] ].

assimilate_v1 := v_np*_trans_le &
 [ STEM < "assimilate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_assimilate_v_1_rel",
            PHON.ONSET voc ] ].

assimilation_n1 := n_mass_le &
 [ STEM < "assimilation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_assimilation_n_1_rel",
            PHON.ONSET voc ] ].

assist_n1 := n_intr_le &
 [ STEM < "assist" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_assist_n_1_rel",
            PHON.ONSET voc ] ].

assist_v1 := v_np*_trans_le &
 [ STEM < "assist" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_assist_v_1_rel",
            PHON.ONSET voc ] ].

assistance_n1 := n_mass_le &
 [ STEM < "assistance" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_assistance_n_1_rel",
            PHON.ONSET voc ] ].

assistant_n1 := n_intr_le &
 [ STEM < "assistant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_assistant_n_1_rel",
            PHON.ONSET voc ] ].

associate_n1 := n_ppof_le &
 [ STEM < "associate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_associate_n_of_rel",
            PHON.ONSET voc ] ].

associate_with_v1 := v_empty_prep_trans_le &
 [ STEM < "associate" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_associate_v_with_rel" ],
            PHON.ONSET voc ] ].

associate_with_v2 := v_empty_prep_intrans_le &
 [ STEM < "associate" >,
   SYNSEM [ LKEYS [ --COMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_associate_v_with_rel" ],
            PHON.ONSET voc ] ].

association_n1 := n_mass_count_ppof_le &
 [ STEM < "association" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_association_n_of_rel",
            PHON.ONSET voc ] ].

assortment_n1 := n_intr_le &
 [ STEM < "assortment" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_assortment_n_1_rel",
            PHON.ONSET voc ] ].

assume_v1 := v_cp_prop_non_trans_le &
 [ STEM < "assume" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_assume_v_1_rel",
            PHON.ONSET voc ] ].

assume_v2 := v_np_trans_le &
 [ STEM < "assume" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_assume_v_1_rel",
            PHON.ONSET voc ] ].

assume_v3 := v_obj_equi_le &
 [ STEM < "assume" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_assume_v_1_rel",
            PHON.ONSET voc ] ].

assumption_day := n_holiday_le &
 [ STEM < "assumption", "day" >,
   SYNSEM [ LKEYS.KEYREL.CARG "assumption_day",
            PHON.ONSET voc ] ].

assumption_n1 := n_intr_le &
 [ STEM < "assumption" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_assumption_n_1_rel",
            PHON.ONSET voc ] ].

assurance_n1 := n_mass_count_cpcomp_fin_le &
 [ STEM < "assurance" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_assurance_n_1_rel",
            PHON.ONSET voc ] ].

assurance_n2 := n_mass_count_le &
 [ STEM < "assurance" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_assurance_n_1_rel",
            PHON.ONSET voc ] ].

assure_v1 := v_ditrans_only_le &
 [ STEM < "assure" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_assure_v_of_rel",
            PHON.ONSET voc ] ].

assure_v2 := v_np_trans_le &
 [ STEM < "assure" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_assure_v_of_rel",
            PHON.ONSET voc ] ].

assure_v3 := v_np_trans_cp_prop_le &
 [ STEM < "assure" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_assure_v_of_rel",
            PHON.ONSET voc ] ].

assure_v4 := v_empty_prep_trans_le &
 [ STEM < "assure" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_assure_v_of_rel" ],
            PHON.ONSET voc ] ].

asterisk_n1 := n_intr_le &
 [ STEM < "asterisk" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_asterisk_n_1_rel",
            PHON.ONSET voc ] ].

astonish_v1 := v_np_trans_le &
 [ STEM < "astonish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_astonish_v_1_rel",
            PHON.ONSET voc ] ].

astonish_v2 := v_expl_it_subj_np_cp_le &
 [ STEM < "astonish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_astonish_v_1_rel",
            PHON.ONSET voc ] ].

astonished_a1 := adj_trans_le &
 [ STEM < "astonished" >,
   SYNSEM [ LKEYS [ --COMPKEY _at_p_sel_rel,
                    KEYREL.PRED "_astonished_a_at_rel" ],
            PHON.ONSET voc ] ].

astonishing_a1 := adj_reg_atrans_le &
 [ STEM < "astonishing" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_astonishing_a_for_rel",
            PHON.ONSET voc ] ].

astonishing_a2 := adj_reg_atrans_cp_le &
 [ STEM < "astonishing" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_astonishing_a_for_rel",
            PHON.ONSET voc ] ].

astonishment_n1 := n_mass_le &
 [ STEM < "astonishment" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_astonishment_n_1_rel",
            PHON.ONSET voc ] ].

astound_v1 := v_np_trans_le &
 [ STEM < "astound" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_astound_v_1_rel",
            PHON.ONSET voc ] ].

astounding_a1 := adj_intrans_le &
 [ STEM < "astounding" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_astounding_a_1_rel",
            PHON.ONSET voc ] ].

astray_adv := pp_le &
 [ STEM < "astray" >,
   SYNSEM [ LKEYS.KEYREL.PRED _astray_p_rel,
            PHON.ONSET voc ] ].

astride := p_le &
 [ STEM < "astride" >,
   SYNSEM [ LKEYS.KEYREL.PRED _astride_p_rel,
            PHON.ONSET voc ] ].

astrologer_n1 := n_intr_le &
 [ STEM < "astrologer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_astrologer_n_1_rel",
            PHON.ONSET voc ] ].

astronaut_n1 := n_intr_le &
 [ STEM < "astronaut" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_astronaut_n_1_rel",
            PHON.ONSET voc ] ].

astronomical_a1 := adj_intrans_le &
 [ STEM < "astronomical" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_astronomical_a_1_rel",
            PHON.ONSET con ] ].

astronomically := adv_int_vp_le &
 [ STEM < "astronomically" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_astronomical_a_1_rel",
            PHON.ONSET voc ] ].

astronomy_n1 := n_mass_le &
 [ STEM < "astronomy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_astronomy_n_1_rel",
            PHON.ONSET voc ] ].

asunder_a1 := adj_pred_intrans_le &
 [ STEM < "asunder" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_asunder_a_1_rel",
            PHON.ONSET voc ] ].

at := p_reg_le &
 [ STEM < "at" >,
   SYNSEM [ LKEYS.KEYREL.PRED _at_p_rel,
            PHON.ONSET voc ] ].

at_all_adv1 := adv_int_vp_post_le &
 [ STEM < "at", "all" >,
   SYNSEM [ LKEYS.KEYREL.PRED _at+all_a_1_rel,
            PHON.ONSET voc ] ].

at_any_rate_adv1 := adv_int_vp_post_le &
 [ STEM < "at", "any", "rate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_at+any+rate_a_1_rel",
            PHON.ONSET voc ] ].

at_any_rate_adv2 := adv_int_vp_aux_le &
 [ STEM < "at", "any", "rate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_at+any+rate_a_1_rel",
            PHON.ONSET voc ] ].

at_first_adv1 := adv_int_vp_le &
 [ STEM < "at", "first" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_at+first_a_1_rel",
            PHON.ONSET con ] ].

at_last_adv1 := adv_int_vp_aux_le &
 [ STEM < "at", "last" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_at+last_a_1_rel",
            PHON.ONSET voc ] ].

at_least_adv := adv_int_vp_le &
 [ STEM < "at", "least" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_at+least_a_1_rel",
            PHON.ONSET voc ] ].

at_least_deg := adv_degree_spec_jov_le &
 [ STEM < "at", "least" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_at+least_x_deg_rel",
            PHON.ONSET voc ] ].

at_least_dollar_adj := adj_dollar_le &
 [ STEM < "at", "least" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_at+least_a_dollar_rel",
            PHON.ONSET voc ] ].

at_least_m_deg := adv_degree_spec_m_le &
 [ STEM < "at", "least" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_at+least_x_m_rel",
            PHON.ONSET voc ] ].

at_most := adv_int_vp_post_le &
 [ STEM < "at", "most" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_at+most_a_1_rel",
            PHON.ONSET voc ] ].

at_most_deg := adv_degree_spec_le &
 [ STEM < "at", "most" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_at+most_x_deg_rel",
            PHON.ONSET voc ] ].

at_once_adv1 := adv_int_vp_le &
 [ STEM < "at", "once" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_at+once_a_1_rel",
            PHON.ONSET voc ] ].

at_prtcl := p_prtcl_le &
 [ STEM < "at" >,
   SYNSEM [ LKEYS.KEYREL.PRED _at_p_sel_rel,
            PHON.ONSET voc ] ].

at_temp := p_temp_le &
 [ STEM < "at" >,
   SYNSEM [ LKEYS [ --COMPKEY hour_or_time_rel,
                    KEYREL.PRED _at_p_temp_rel ],
            PHON.ONSET voc ] ].

at_the_earliest := adv_int_vp_post_le &
 [ STEM < "at", "the", "earliest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_at+the+earliest_a_1_rel",
            PHON.ONSET voc ] ].

at_the_latest := adv_int_vp_post_le &
 [ STEM < "at", "the", "latest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_at+the+latest_a_1_rel",
            PHON.ONSET voc ] ].

at_the_most_deg := adv_degree_spec_le &
 [ STEM < "at", "the", "most" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_at+the+most_x_deg_rel",
            PHON.ONSET voc ] ].

at_worst_deg := adv_degree_spec_le &
 [ STEM < "at", "worst" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_at+worst_x_rel",
            PHON.ONSET voc ] ].

atandt_n1 := n_proper_le &
 [ STEM < "at", "&", "t" >,
   SYNSEM [ LKEYS.KEYREL.CARG "att",
            PHON.ONSET voc ] ].

atandt_n2 := n_proper_le &
 [ STEM < "at&t" >,
   SYNSEM [ LKEYS.KEYREL.CARG "att",
            PHON.ONSET voc ] ].

atheist_n1 := n_intr_le &
 [ STEM < "atheist" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_atheist_n_1_rel",
            PHON.ONSET voc ] ].

athens_n1 := n_proper_city_le &
 [ STEM < "athens" >,
   SYNSEM [ LKEYS.KEYREL.CARG "athens",
            PHON.ONSET voc ] ].

atherton_n1 := n_proper_city_le &
 [ STEM < "atherton" >,
   SYNSEM [ LKEYS.KEYREL.CARG "atherton",
            PHON.ONSET voc ] ].

athlete_n1 := n_intr_le &
 [ STEM < "athlete" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_athlete_n_1_rel",
            PHON.ONSET voc ] ].

athletic_isect := adj_intrans_le &
 [ STEM < "athletic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_athletic_a_1_rel",
            PHON.ONSET voc ] ].

athletically := adv_int_vp_le &
 [ STEM < "athletically" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_athletic_a_1_rel",
            PHON.ONSET voc ] ].

athwart := p_reg_le &
 [ STEM < "athwart" >,
   SYNSEM [ LKEYS.KEYREL.PRED _athwart_p_rel,
            PHON.ONSET voc ] ].

athwart_pp := pp_le &
 [ STEM < "athwart" >,
   SYNSEM [ LKEYS.KEYREL.PRED _athwart_p_rel,
            PHON.ONSET voc ] ].

atlanta_n1 := n_proper_city_le &
 [ STEM < "atlanta" >,
   SYNSEM [ LKEYS.KEYREL.CARG "atlanta",
            PHON.ONSET voc ] ].

atlantic_city_n1 := n_proper_city_le &
 [ STEM < "atlantic", "city" >,
   SYNSEM [ LKEYS.KEYREL.CARG "atlantic_city",
            PHON.ONSET voc ] ].

atlantic_n1 := n_intr_named_le &
 [ STEM < "atlantic" >,
   SYNSEM [ LKEYS.KEYREL.CARG "atlantic",
            PHON.ONSET voc ] ].

atlas_n1 := n_intr_le &
 [ STEM < "atlas" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_atlas_n_1_rel",
            PHON.ONSET voc ] ].

atlas_n2 := n_proper_le &
 [ STEM < "atlas" >,
   SYNSEM [ LKEYS.KEYREL.CARG "atlas",
            PHON.ONSET voc ] ].

atm_n1 := n_intr_le &
 [ STEM < "atm" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_atm_n_1_rel",
            PHON.ONSET voc ] ].

atmosphere_n1 := n_mass_count_le &
 [ STEM < "atmosphere" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_atmosphere_n_1_rel",
            PHON.ONSET voc ] ].

atmospheric_a1 := adj_intrans_le &
 [ STEM < "atmospheric" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_atmospheric_a_1_rel",
            PHON.ONSET voc ] ].

atomic_a1 := adj_intrans_le &
 [ STEM < "atomic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_atomic_a_1_rel",
            PHON.ONSET voc ] ].

atop := p_reg_le &
 [ STEM < "atop" >,
   SYNSEM [ LKEYS.KEYREL.PRED _atop_p_rel,
            PHON.ONSET voc ] ].

atremble_a1 := adj_pred_intrans_le &
 [ STEM < "atremble" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_atremble_a_1_rel",
            PHON.ONSET voc ] ].

atrium_n1 := n_intr_le &
 [ STEM < "atrium" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_atrium_n_1_rel",
            PHON.ONSET voc ] ].

atrociously := adv_int_vp_le &
 [ STEM < "atrociously" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_atrocious_a_1_rel",
            PHON.ONSET voc ] ].

att_n1 := n_proper_le &
 [ STEM < "att" >,
   SYNSEM [ LKEYS.KEYREL.CARG "att",
            PHON.ONSET voc ] ].

attach_v1 := v_np_trans_le &
 [ STEM < "attach" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_attach_v_1_rel",
            PHON.ONSET voc ] ].

attach_v2 := v_np_prep_trans_dors_le &
 [ STEM < "attach" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_attach_v_1_rel",
            PHON.ONSET voc ] ].

attachment_n1 := n_mass_count_ppof_le &
 [ STEM < "attachment" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_attachment_n_of_rel",
            PHON.ONSET voc ] ].

attack_n1 := n_mass_count_le &
 [ STEM < "attack" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_attack_n_1_rel",
            PHON.ONSET voc ] ].

attack_v1 := v_np*_trans_le &
 [ STEM < "attack" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_attack_v_1_rel",
            PHON.ONSET voc ] ].

attain_v1 := v_np_trans_le &
 [ STEM < "attain" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_attain_v_1_rel",
            PHON.ONSET voc ] ].

attainment_n1 := n_mass_count_ppof_le &
 [ STEM < "attainment" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_attainment_n_of_rel",
            PHON.ONSET voc ] ].

attempt_n1 := n_intr_le &
 [ STEM < "attempt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_attempt_n_1_rel",
            PHON.ONSET voc ] ].

attempt_n2 := n_vpcomp_le &
 [ STEM < "attempt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_attempt_n_1_rel",
            PHON.ONSET voc ] ].

attempt_v1 := v_np_trans_le &
 [ STEM < "attempt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_attempt_v_1_rel",
            PHON.ONSET voc ] ].

attempt_v2 := v_subj_equi_le &
 [ STEM < "attempt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_attempt_v_1_rel",
            PHON.ONSET voc ] ].

attend_to_v1 := v_empty_prep_intrans_le &
 [ STEM < "attend" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_attend_v_to_rel" ],
            PHON.ONSET voc ] ].

attend_v1 := v_np*_trans_le &
 [ STEM < "attend" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_attend_v_1_rel",
            PHON.ONSET voc ] ].

attendance_n1 := n_mass_le &
 [ STEM < "attendance" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_attendance_n_1_rel",
            PHON.ONSET voc ] ].

attendant_n := n_intr_le &
 [ STEM < "attendant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_attendant_n_1_rel",
            PHON.ONSET voc ] ].

attention_n1 := n_mass_count_ppto_le &
 [ STEM < "attention" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_attention_n_to_rel",
            PHON.ONSET voc ] ].

attention_n2 := n_mass_count_le &
 [ STEM < "attention" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_attention_n_to_rel",
            PHON.ONSET voc ] ].

attentive_a1 := adj_intrans_le &
 [ STEM < "attentive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_attentive_a_1_rel",
            PHON.ONSET voc ] ].

attentively := adv_int_vp_le &
 [ STEM < "attentively" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_attentive_a_1_rel",
            PHON.ONSET voc ] ].

attest_to_v1 := v_empty_prep_intrans_le &
 [ STEM < "attest" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_attest_v_to_rel" ],
            PHON.ONSET voc ] ].

attest_v1 := v_cp_non_trans_le &
 [ STEM < "attest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_attest_v_1_rel",
            PHON.ONSET voc ] ].

attest_v2 := v_unerg_le &
 [ STEM < "attest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_attest_v_1_rel",
            PHON.ONSET voc ] ].

attic_a1 := adj_intrans_le &
 [ STEM < "attic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_attic_a_1_rel",
            PHON.ONSET voc ] ].

attic_n1 := n_intr_le &
 [ STEM < "attic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_attic_n_1_rel",
            PHON.ONSET voc ] ].

attitude_n1 := n_mass_count_le &
 [ STEM < "attitude" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_attitude_n_1_rel",
            PHON.ONSET voc ] ].

attract_v1 := v_np_trans_le &
 [ STEM < "attract" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_attract_v_1_rel",
            PHON.ONSET voc ] ].

attracted_a1 := adj_trans_oblig_le &
 [ STEM < "attracted" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_attracted_a_to_rel" ],
            PHON.ONSET voc ] ].

attraction_n1 := n_mass_count_ppof_le &
 [ STEM < "attraction" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_attraction_n_of_rel",
            PHON.ONSET voc ] ].

attractive_isect := adj_intrans_le &
 [ STEM < "attractive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_attractive_a_1_rel",
            PHON.ONSET voc ] ].

attractively_a1 := adv_int_vp_le &
 [ STEM < "attractively" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_attractive_a_1_rel",
            PHON.ONSET voc ] ].

attribute_n1 := n_intr_le &
 [ STEM < "attribute" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_attribute_n_1_rel",
            PHON.ONSET voc ] ].

attribute_v1 := v_to_trans_le &
 [ STEM < "attribute" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_attribute_v_to_rel",
            PHON.ONSET voc ] ].

aubrey := n_proper_le &
 [ STEM < "aubrey" >,
   SYNSEM [ LKEYS.KEYREL.CARG "aubrey",
            PHON.ONSET voc ] ].

auction_v1 := v_np_trans_le &
 [ STEM < "auction" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_auction_v_1_rel",
            PHON.ONSET voc ] ].

audible_a1 := adj_intrans_le &
 [ STEM < "audible" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_audible_a_1_rel",
            PHON.ONSET voc ] ].

audience_n1 := n_intr_le &
 [ STEM < "audience" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_audience_n_1_rel",
            PHON.ONSET voc ] ].

audio_n1 := n_mass_le &
 [ STEM < "audio" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_audio_n_1_rel",
            PHON.ONSET voc ] ].

audio_visual_a1 := adj_intrans_le &
 [ STEM < "audio", "visual" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_audio+visual_a_1_rel",
            PHON.ONSET voc ] ].

audio_visual_a2 := adj_intrans_le &
 [ STEM < "audio-", "visual" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_audio+visual_a_1_rel",
            PHON.ONSET voc ] ].

audit_v1 := v_np_trans_le &
 [ STEM < "audit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_audit_v_1_rel",
            PHON.ONSET voc ] ].

auditorium_n1 := n_intr_le &
 [ STEM < "auditorium" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_auditorium_n_1_rel",
            PHON.ONSET voc ] ].

auditorium_post_ttl := n_post_title_le &
 [ STEM < "auditorium" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_auditorium_n_1_rel",
            PHON.ONSET voc ] ].

aught := n_generic_pro_le &
 [ STEM < "aught" >,
   SYNSEM [ LKEYS [ ALTKEYREL.PRED _any_q_rel,
                    KEYREL.PRED thing_rel ],
            PHON.ONSET voc ] ].

augment_v1 := v_np_trans_le &
 [ STEM < "augment" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_augment_v_1_rel",
            PHON.ONSET voc ] ].

augment_v2 := v_expl_it_subj_np_cp_le &
 [ STEM < "augment" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_augment_v_1_rel",
            PHON.ONSET voc ] ].

augmentation_n1 := n_mass_count_le &
 [ STEM < "augmentation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_augmentation_n_1_rel",
            PHON.ONSET voc ] ].

augsburg_n1 := n_proper_city_le &
 [ STEM < "augsburg" >,
   SYNSEM [ LKEYS.KEYREL.CARG "augsburg",
            PHON.ONSET voc ] ].

august := n_month_le &
 [ STEM < "august" >,
   SYNSEM [ LKEYS.KEYREL.CARG "aug",
            PHON.ONSET voc ] ].

august_2 := n_month_year_le &
 [ STEM < "august" >,
   SYNSEM [ LKEYS.KEYREL.CARG "aug",
            PHON.ONSET voc ] ].

august_abb_n1 := n_month_le &
 [ STEM < "aug" >,
   SYNSEM [ LKEYS.KEYREL.CARG "aug",
            PHON.ONSET voc ] ].

august_abb_n22 := n_month_year_le &
 [ STEM < "aug" >,
   SYNSEM [ LKEYS.KEYREL.CARG "aug",
            PHON.ONSET voc ] ].

august_abb_n3 := n_month_le &
 [ STEM < "aug." >,
   SYNSEM [ LKEYS.KEYREL.CARG "aug",
            PHON.ONSET voc ] ].

august_abb_n4 := n_month_year_le &
 [ STEM < "aug." >,
   SYNSEM [ LKEYS.KEYREL.CARG "aug",
            PHON.ONSET voc ] ].

august_the_det := det_month_le &
 [ STEM < "august", "the" >,
   SYNSEM [ LKEYS.ALTKEYREL.CARG "aug",
            PHON.ONSET voc ] ].

augustine_n1 := n_proper_le &
 [ STEM < "augustine" >,
   SYNSEM [ LKEYS.KEYREL.CARG "augustine",
            PHON.ONSET voc ] ].

aunt_n1 := n_intr_le &
 [ STEM < "aunt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_aunt_n_1_rel",
            PHON.ONSET voc ] ].

aunt_title := n_title_le &
 [ STEM < "aunt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_aunt_n_1_rel",
            PHON.ONSET voc ] ].

aurland := n_proper_le &
 [ STEM < "aurland" >,
   SYNSEM [ LKEYS.KEYREL.CARG "aurland",
            PHON.ONSET voc ] ].

aurlandsdal := n_proper_le &
 [ STEM < "aurlandsdal" >,
   SYNSEM [ LKEYS.KEYREL.CARG "aurlandsdal",
            PHON.ONSET voc ] ].

aurlandsdalen := n_proper_le &
 [ STEM < "aurlandsdalen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "aurlandsdalen",
            PHON.ONSET voc ] ].

aurlandsfjord := n_proper_le &
 [ STEM < "aurlandsfjord" >,
   SYNSEM [ LKEYS.KEYREL.CARG "aurlandsfjord",
            PHON.ONSET voc ] ].

auscultation_n1 := n_mass_le &
 [ STEM < "auscultation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_auscultation_n_1_rel",
            PHON.ONSET voc ] ].

auspiciousness_n1 := n_mass_le &
 [ STEM < "auspiciousness" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_auspiciousness_n_1_rel",
            PHON.ONSET voc ] ].

austere_a1 := adj_intrans_le &
 [ STEM < "austere" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_austere_a_1_rel",
            PHON.ONSET voc ] ].

australia_n1 := n_proper_le &
 [ STEM < "australia" >,
   SYNSEM [ LKEYS.KEYREL.CARG "australia",
            PHON.ONSET voc ] ].

australian_a1 := adj_intrans_le &
 [ STEM < "australian" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_australian_a_1_rel",
            PHON.ONSET voc ] ].

austre_and_vestre_hestlÃ¦gerhÃ¸_n1 := n_proper_le &
 [ STEM < "austre", "and", "vestre", "hestlÃ¦gerhÃ¸" >,
   SYNSEM [ LKEYS.KEYREL.CARG "austre+and+vestre+hestlÃ¦gerhÃ¸",
            PHON.ONSET voc ] ].

austre_hestlÃ¦gerhÃ¸_n1 := n_proper_le &
 [ STEM < "austre", "hestlÃ¦gerhÃ¸" >,
   SYNSEM [ LKEYS.KEYREL.CARG "austre+hestlÃ¦gerhÃ¸",
            PHON.ONSET voc ] ].

austre_n1 := n_proper_le &
 [ STEM < "austre" >,
   SYNSEM [ LKEYS.KEYREL.CARG "austre",
            PHON.ONSET voc ] ].

austria_n1 := n_proper_le &
 [ STEM < "austria" >,
   SYNSEM [ LKEYS.KEYREL.CARG "austria",
            PHON.ONSET voc ] ].

austrian_a1 := adj_intrans_le &
 [ STEM < "austrian" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_austrian_a_1_rel",
            PHON.ONSET voc ] ].

authentic_a1 := adj_intrans_le &
 [ STEM < "authentic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_authentic_a_1_rel",
            PHON.ONSET voc ] ].

author_n1 := n_ppof_le &
 [ STEM < "author" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_author_n_of_rel",
            PHON.ONSET voc ] ].

author_ttl := n_title_le &
 [ STEM < "author" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_author_n_of_rel",
            PHON.ONSET con ] ].

author_v1 := v_np_trans_le &
 [ STEM < "author" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_author_v_1_rel",
            PHON.ONSET voc ] ].

authority_n1 := n_mass_count_le &
 [ STEM < "authority" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_authority_n_1_rel",
            PHON.ONSET voc ] ].

authorization_n1 := n_mass_count_ppof_le &
 [ STEM < "authorization" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_authorization_n_of_rel",
            PHON.ONSET voc ] ].

authorize_v1 := v_obj_equi_le &
 [ STEM < "authorize" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_authorize_v_1_rel",
            PHON.ONSET voc ] ].

authorize_v2 := v_np_trans_le &
 [ STEM < "authorize" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_authorize_v_1_rel",
            PHON.ONSET voc ] ].

auto_immune_a1 := adj_intrans_le &
 [ STEM < "auto", "immune" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_auto+immune_a_1_rel",
            PHON.ONSET voc ] ].

auto_immune_a2 := adj_intrans_le &
 [ STEM < "autoimmune" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_auto+immune_a_1_rel",
            PHON.ONSET voc ] ].

auto_n1 := n_intr_le &
 [ STEM < "auto" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_automobile_n_1_rel",
            PHON.ONSET voc ] ].

automate_v1 := v_np_trans_le &
 [ STEM < "automate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_automate_v_1_rel",
            PHON.ONSET voc ] ].

automated_a1 := adj_intrans_le &
 [ STEM < "automated" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_automated_a_1_rel",
            PHON.ONSET voc ] ].

automatic_a1 := adj_intrans_le &
 [ STEM < "automatic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_automatic_a_1_rel",
            PHON.ONSET voc ] ].

automatically := adv_int_vp_le &
 [ STEM < "automatically" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_automatic_a_1_rel",
            PHON.ONSET voc ] ].

automation_n1 := n_mass_ppcomp_le &
 [ STEM < "automation" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_automation_n_of_rel" ],
            PHON.ONSET voc ] ].

automobile_n1 := n_intr_le &
 [ STEM < "automobile" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_automobile_n_1_rel",
            PHON.ONSET voc ] ].

autumn_n1 := n_season_div_le &
 [ STEM < "autumn" >,
   SYNSEM [ LKEYS.KEYREL.CARG "fall",
            PHON.ONSET voc ] ].

autumn_n2 := n_season_wspec_le &
 [ STEM < "autumn" >,
   SYNSEM [ LKEYS.KEYREL.CARG "fall",
            PHON.ONSET voc ] ].

autumn_n3 := n_season_np_le &
 [ STEM < "autumn" >,
   SYNSEM [ LKEYS.KEYREL.CARG "fall",
            PHON.ONSET voc ] ].

auxiliary_a1 := adj_intrans_le &
 [ STEM < "auxiliary" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_auxiliary_a_1_rel",
            PHON.ONSET voc ] ].

auxiliary_n1 := n_intr_le &
 [ STEM < "auxiliary" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_auxiliary_n_1_rel",
            PHON.ONSET voc ] ].

av_a1 := adj_intrans_le &
 [ STEM < "av" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_av_a_1_rel",
            PHON.ONSET voc ] ].

av_n1 := n_mass_le &
 [ STEM < "av" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_av_n_1_rel",
            PHON.ONSET voc ] ].

ava_n1 := n_proper_le &
 [ STEM < "ava" >,
   SYNSEM [ LKEYS.KEYREL.CARG "ava",
            PHON.ONSET voc ] ].

avail_n1 := n_mass_le &
 [ STEM < "avail" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_avail_n_1_rel",
            PHON.ONSET voc ] ].

avail_v1 := v_empty_prep*_trans_le &
 [ STEM < "avail" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_avail_v_of_rel" ],
            PHON.ONSET voc ] ].

availability_n1 := n_mass_le &
 [ STEM < "availability" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_availability_n_1_rel",
            PHON.ONSET voc ] ].

available_a1 := adj_attr_intrans_le &
 [ STEM < "available" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_available_a_1_rel",
            PHON.ONSET voc ] ].

available_a2 := adj_pred_intrans_le &
 [ STEM < "available" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_available_a_1_rel",
            PHON.ONSET voc ] ].

available_a3 := adj_tough_atrans_le &
 [ STEM < "available" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_available_a_for_rel",
            PHON.ONSET voc ] ].

avalanche_n1 := n_intr_le &
 [ STEM < "avalanche" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_avalanche_n_1_rel",
            PHON.ONSET voc ] ].

avantgarde_adj := adj_intrans_le &
 [ STEM < "avantgarde" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_avantgarde_a_1_rel",
            PHON.ONSET voc ] ].

avbr_nd := n_proper_le &
 [ STEM < "avbr" >,
   SYNSEM [ LKEYS.KEYREL.CARG "avbr",
            PHON.ONSET voc ] ].

avdalen_n1 := n_proper_le &
 [ STEM < "avdalen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "avdalen",
            PHON.ONSET voc ] ].

avenue_des_champs_elysees_n1 := n_proper_le &
 [ STEM < "avenue", "des", "champs", "elysees" >,
   SYNSEM [ LKEYS.KEYREL.CARG "avenue_des_champs_elysees",
            PHON.ONSET voc ] ].

avenue_n1 := n_intr_le &
 [ STEM < "avenue" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_avenue_n_1_rel",
            PHON.ONSET voc ] ].

avenue_n2 := n_intr_le &
 [ STEM < "ave" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_avenue_n_1_rel",
            PHON.ONSET voc ] ].

avenue_post_ttl := n_post_title_le &
 [ STEM < "avenue" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_avenue_n_1_rel",
            PHON.ONSET voc ] ].

average_a1 := adj_intrans_le &
 [ STEM < "average" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_average_a_1_rel",
            PHON.ONSET voc ] ].

average_n1 := n_ppof_nocmpnd_le &
 [ STEM < "average" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_average_n_of_rel",
            PHON.ONSET voc ] ].

average_out_v1 := v_particle_le &
 [ STEM < "average" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_average_v_out_rel" ],
            PHON.ONSET voc ] ].

average_out_v2 := v_particle_np_le &
 [ STEM < "average" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_average_v_out_rel" ],
            PHON.ONSET voc ] ].

average_v1 := v_np*_trans_le &
 [ STEM < "average" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_average_v_1_rel",
            PHON.ONSET voc ] ].

averse_a1 := adj_trans_le &
 [ STEM < "averse" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_averse_a_to_rel" ],
            PHON.ONSET voc ] ].

aversion_n1 := n_ppcomp_le &
 [ STEM < "aversion" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_aversion_n_to_rel" ],
            PHON.ONSET voc ] ].

avert_v1 := v_empty_prep*_trans_le &
 [ STEM < "avert" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _from_p_sel_rel,
                    KEYREL.PRED "_avert_v_from_rel" ],
            PHON.ONSET voc ] ].

avery_n1 := n_proper_le &
 [ STEM < "avery" >,
   SYNSEM [ LKEYS.KEYREL.CARG "avery",
            PHON.ONSET voc ] ].

avoid_prp_v1 := v_subj_equi_prp_le &
 [ STEM < "avoid" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_avoid_v_1_rel",
            PHON.ONSET voc ] ].

avoid_v1 := v_np_trans_le &
 [ STEM < "avoid" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_avoid_v_1_rel",
            PHON.ONSET voc ] ].

await_v1 := v_np*_trans_le &
 [ STEM < "await" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_await_v_1_rel",
            PHON.ONSET voc ] ].

awake_a1 := adj_pred_intrans_le &
 [ STEM < "awake" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_awake_a_1_rel",
            PHON.ONSET voc ] ].

awake_v1 := v_np_trans_noger_le &
 [ STEM < "awake" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_awake_v_cause_rel",
            PHON.ONSET voc ] ].

awake_v2 := v_unacc_le &
 [ STEM < "awake" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_awake_v_1_rel",
            PHON.ONSET voc ] ].

awaken_v1 := v_np_trans_noger_le &
 [ STEM < "awaken" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_awaken_v_cause_rel",
            PHON.ONSET voc ] ].

awaken_v2 := v_unacc_le &
 [ STEM < "awaken" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_awaken_v_1_rel",
            PHON.ONSET voc ] ].

award_n1 := n_ppcomp_le &
 [ STEM < "award" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_award_n_for_rel" ],
            PHON.ONSET voc ] ].

award_v1 := v_ditrans_le &
 [ STEM < "award" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_award_v_1_rel",
            PHON.ONSET voc ] ].

award_v2 := v_np_trans_le &
 [ STEM < "award" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_award_v_1_rel",
            PHON.ONSET voc ] ].

aware_a1 := adj_trans_le &
 [ STEM < "aware" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_aware_a_of_rel" ],
            PHON.ONSET voc ] ].

aware_a2 := adj_reg_that_cp_le &
 [ STEM < "aware" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_aware_a_of_rel",
            PHON.ONSET voc ] ].

awareness_n1 := n_mass_le &
 [ STEM < "awareness" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_awareness_n_1_rel",
            PHON.ONSET voc ] ].

away_nom := n_adv_event_le &
 [ STEM < "away" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED _away_p_rel,
                    KEYREL.PRED place_n_rel ],
            PHON.ONSET voc ] ].

away_prtcl := pp_prtcl_le &
 [ STEM < "away" >,
   SYNSEM [ LKEYS.KEYREL.PRED _away_p_sel_rel,
            PHON.ONSET voc ] ].

awesome_a1 := adj_intrans_le &
 [ STEM < "awesome" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_awesome_a_1_rel",
            PHON.ONSET voc ] ].

awestruck_a1 := adj_trans_le &
 [ STEM < "awestruck" >,
   SYNSEM [ LKEYS [ --COMPKEY _by_p_sel_rel,
                    KEYREL.PRED "_awestruck_a_by_rel" ],
            PHON.ONSET voc ] ].

awful_isect := adj_intrans_le &
 [ STEM < "awful" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_awful_a_1_rel",
            PHON.ONSET voc ] ].

awfully_adv := adv_int_vp_post_le &
 [ STEM < "awfully" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_awful_a_1_rel",
            PHON.ONSET voc ] ].

awfully_deg := adv_degree_spec_v_le &
 [ STEM < "awfully" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_awfully_x_rel",
            PHON.ONSET voc ] ].

awhile_nom := n_adv_simp_acc_le &
 [ STEM < "awhile" >,
   SYNSEM [ LKEYS.KEYREL.PRED _awhile_n_1_rel,
            PHON.ONSET voc ] ].

awkward_a1 := adj_intrans_le &
 [ STEM < "awkward" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_awkward_a_1_rel",
            PHON.ONSET voc ] ].

awkwardly := adv_int_vp_le &
 [ STEM < "awkwardly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_awkward_a_1_rel",
            PHON.ONSET voc ] ].

awning_n1 := n_intr_le &
 [ STEM < "awning" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_awning_n_1_rel",
            PHON.ONSET voc ] ].

awry_isect := adj_intrans_le &
 [ STEM < "awry" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_awry_a_1_rel",
            PHON.ONSET voc ] ].

ax_n1 := n_intr_sg_le &
 [ STEM < "ax" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ax_n_1_rel",
            PHON.ONSET voc ] ].

axe_n1 := n_intr_le &
 [ STEM < "axe" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ax_n_1_rel",
            PHON.ONSET voc ] ].

axel_n1 := n_proper_le &
 [ STEM < "axel" >,
   SYNSEM [ LKEYS.KEYREL.CARG "axel",
            PHON.ONSET voc ] ].

axial_a1 := adj_intrans_le &
 [ STEM < "axial" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_axial_a_1_rel",
            PHON.ONSET voc ] ].

axis_n1 := n_intr_le &
 [ STEM < "axis" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_axis_n_1_rel",
            PHON.ONSET voc ] ].

axle_n1 := n_intr_le &
 [ STEM < "axle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_axle_n_1_rel",
            PHON.ONSET voc ] ].

axletree_n1 := n_intr_le &
 [ STEM < "axletree" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_axletree_n_1_rel",
            PHON.ONSET voc ] ].

ay_excl_post := adv_s_post_word_nospec_le &
 [ STEM < "ay" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ay_a_1_rel",
            PHON.ONSET voc ] ].

ay_excl_pre := adv_s_pre_word_root_le &
 [ STEM < "ay" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ay_a_1_rel",
            PHON.ONSET voc ] ].

aye_disc_root := adv_s_pre_word_root_le &
 [ STEM < "aye" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_aye_a_1_rel",
            PHON.ONSET voc ] ].

aye_n1 := n_intr_le &
 [ STEM < "aye" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_aye_n_1_rel",
            PHON.ONSET voc ] ].

ayers := n_proper_le &
 [ STEM < "ayers" >,
   SYNSEM [ LKEYS.KEYREL.CARG "ayers",
            PHON.ONSET voc ] ].

ayers_rock_n1 := n_proper_le &
 [ STEM < "ayer", "'s", "rock" >,
   SYNSEM [ LKEYS.KEYREL.CARG "ayers_rock",
            PHON.ONSET voc ] ].

azalea_n1 := n_intr_le &
 [ STEM < "azalea" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_azalea_n_1_rel",
            PHON.ONSET voc ] ].

azalea_n2 := n_mass_kind_le &
 [ STEM < "azalea" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_azalea_n_kind_rel",
            PHON.ONSET voc ] ].

b_n1 := n_proper_le &
 [ STEM < "b" >,
   SYNSEM [ LKEYS.KEYREL.CARG "b",
            PHON.ONSET con ] ].

b_np1 := n_proper_le &
 [ STEM < "_b" >,
   SYNSEM [ LKEYS.KEYREL.CARG "b",
            PHON.ONSET con ] ].

b_period_np1 := n_proper_le &
 [ STEM < "b." >,
   SYNSEM [ LKEYS.KEYREL.CARG "b",
            PHON.ONSET con ] ].

b_period_np2 := n_proper_le &
 [ STEM < "_b." >,
   SYNSEM [ LKEYS.KEYREL.CARG "b",
            PHON.ONSET con ] ].

ba := n_proper_le &
 [ STEM < "ba" >,
   SYNSEM [ LKEYS.KEYREL.CARG "ba",
            PHON.ONSET con ] ].

baba_n1 := n_proper_le &
 [ STEM < "baba" >,
   SYNSEM [ LKEYS.KEYREL.CARG "baba",
            PHON.ONSET con ] ].

babble_n1 := n_mass_le &
 [ STEM < "babble" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_babble_n_1_rel",
            PHON.ONSET con ] ].

babble_on_v1 := v_particle_pp_le &
 [ STEM < "babble" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    --OCOMPKEY _about_p_rel,
                    KEYREL.PRED "_babble_v_on_rel" ],
            PHON.ONSET con ] ].

babble_on_v2 := v_particle_le &
 [ STEM < "babble" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_babble_v_on_rel" ],
            PHON.ONSET con ] ].

babble_v1 := v_double_pp*_le &
 [ STEM < "babble" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_rel,
                    --OCOMPKEY _about_p_rel,
                    KEYREL.PRED "_babble_v_about_rel" ],
            PHON.ONSET con ] ].

babe_n1 := n_proper_le &
 [ STEM < "babe" >,
   SYNSEM [ LKEYS.KEYREL.CARG "babe",
            PHON.ONSET con ] ].

babe_root_post := adv_disc_posth_le &
 [ STEM < "babe" >,
   SYNSEM [ LKEYS.KEYREL.CARG "babe",
            PHON.ONSET con ] ].

babe_root_pre := adv_disc_preh_le &
 [ STEM < "babe" >,
   SYNSEM [ LKEYS.KEYREL.CARG "babe",
            PHON.ONSET con ] ].

baby_n1 := n_intr_le &
 [ STEM < "baby" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_baby_n_1_rel",
            PHON.ONSET con ] ].

baby_root_post := adv_disc_posth_le &
 [ STEM < "baby" >,
   SYNSEM [ LKEYS.KEYREL.CARG "baby",
            PHON.ONSET con ] ].

baby_root_pre := adv_disc_preh_le &
 [ STEM < "baby" >,
   SYNSEM [ LKEYS.KEYREL.CARG "baby",
            PHON.ONSET con ] ].

babysit_v1 := v_np_trans_le &
 [ STEM < "babysit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_babysit_v_1_rel",
            PHON.ONSET con ] ].

bachelor_n1 := n_intr_le &
 [ STEM < "bachelor" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bachelor_n_1_rel",
            PHON.ONSET con ] ].

back_and_forth_adv := adv_int_vp_le &
 [ STEM < "back", "and", "forth" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_back+and+forth_a_1_rel",
            PHON.ONSET con ] ].

back_away_v1 := v_particle_le &
 [ STEM < "back" >,
   SYNSEM [ LKEYS [ --COMPKEY _away_p_sel_rel,
                    KEYREL.PRED "_back_v_away_rel" ],
            PHON.ONSET con ] ].

back_deg := adv_degree_spec_v_le &
 [ STEM < "back" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_back_x_deg_rel",
            PHON.ONSET con ] ].

back_down_v1 := v_particle_le &
 [ STEM < "back" >,
   SYNSEM [ LKEYS [ --COMPKEY _down_p_sel_rel,
                    KEYREL.PRED "_back_v_down_rel" ],
            PHON.ONSET con ] ].

back_n1 := n_intr_le &
 [ STEM < "back" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_back_n_1_rel",
            PHON.ONSET con ] ].

back_nom := n_adv_event_le &
 [ STEM < "back" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED _back_p_rel,
                    KEYREL.PRED place_n_rel ],
            PHON.ONSET con ] ].

back_off_v1 := v_particle_le &
 [ STEM < "back" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_back_v_off_rel" ],
            PHON.ONSET con ] ].

back_order_n1 := n_mass_count_le &
 [ STEM < "back", "order" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_back+order_n_1_rel",
            PHON.ONSET con ] ].

back_order_n2 := n_mass_count_le &
 [ STEM < "backorder" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_back+order_n_1_rel",
            PHON.ONSET con ] ].

back_order_v1 := v_np*_trans_le &
 [ STEM < "back", "order" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_back+order_v_1_rel",
            PHON.ONSET con ] ].

back_order_v2 := v_np*_trans_le &
 [ STEM < "back-", "order" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_back+order_v_1_rel",
            PHON.ONSET con ] ].

back_out_of_v1 := v_particle_empty_pp_le &
 [ STEM < "back" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    --OCOMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_back_v_out-of_rel" ],
            PHON.ONSET con ] ].

back_out_v1 := v_particle_le &
 [ STEM < "back" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_back_v_out_rel" ],
            PHON.ONSET con ] ].

back_particle := pp_prtcl_le &
 [ STEM < "back" >,
   SYNSEM [ LKEYS.KEYREL.PRED _back_p_sel_rel,
            PHON.ONSET con ] ].

back_up_v1 := v_particle_le &
 [ STEM < "back" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_back_v_up_rel" ],
            PHON.ONSET con ] ].

back_up_v2 := v_particle_np_le &
 [ STEM < "back" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_back_v_up_rel" ],
            PHON.ONSET con ] ].

back_v1 := v_np_trans_le &
 [ STEM < "back" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_back_v_1_rel",
            PHON.ONSET con ] ].

backchannel_n1 := n_intr_le &
 [ STEM < "backchannel" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_backchannel_n_1_rel",
            PHON.ONSET con ] ].

backcountry_n1 := n_intr_le &
 [ STEM < "backcountry" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_back+country_n_1_rel",
            PHON.ONSET con ] ].

backcountry_n2 := n_intr_le &
 [ STEM < "back", "country" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_back+country_n_1_rel",
            PHON.ONSET con ] ].

backgammon_n1 := n_mass_le &
 [ STEM < "backgammon" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_backgammon_n_1_rel",
            PHON.ONSET con ] ].

background_n1 := n_mass_count_le &
 [ STEM < "background" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_background_n_1_rel",
            PHON.ONSET con ] ].

backorder_v1 := v_np*_trans_le &
 [ STEM < "backorder" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_back+order_v_1_rel",
            PHON.ONSET con ] ].

backpack_n1 := n_intr_le &
 [ STEM < "backpack" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_backpack_n_1_rel",
            PHON.ONSET con ] ].

backpack_v1 := v_prep_dir_le &
 [ STEM < "backpack" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_backpack_v_1_rel",
            PHON.ONSET con ] ].

backside_n1 := n_intr_le &
 [ STEM < "backside" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_backside_n_1_rel",
            PHON.ONSET con ] ].

backtrace_n1 := n_mass_count_le &
 [ STEM < "backtrace" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_backtrace_n_1_rel",
            PHON.ONSET con ] ].

backup_n1 := n_intr_le &
 [ STEM < "backup" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_backup_n_1_rel",
            PHON.ONSET con ] ].

backward_adv1 := pp_le &
 [ STEM < "backward" >,
   SYNSEM [ LKEYS.KEYREL.PRED _backward_p_rel,
            PHON.ONSET con ] ].

backwards_adv1 := pp_le &
 [ STEM < "backwards" >,
   SYNSEM [ LKEYS.KEYREL.PRED _backwards_p_rel,
            PHON.ONSET con ] ].

bad_a1 := adj_intrans_le &
 [ STEM < "bad" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bad_a_1_rel",
            PHON.ONSET con ] ].

bad_adv1 := adv_int_vp_post_le &
 [ STEM < "bad" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bad_a_1_rel",
            PHON.ONSET con ] ].

badder := adj_comp_le &
 [ STEM < "badder" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bad_a_1_rel",
            PHON.ONSET con ] ].

baddest_a1 := adj_superl_le &
 [ STEM < "baddest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bad_a_1_rel",
            PHON.ONSET con ] ].

baden_n1 := n_proper_city_le &
 [ STEM < "baden" >,
   SYNSEM [ LKEYS.KEYREL.CARG "baden",
            PHON.ONSET con ] ].

badge_n1 := n_intr_le &
 [ STEM < "badge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_badge_n_1_rel",
            PHON.ONSET con ] ].

badger_n1 := n_intr_le &
 [ STEM < "badger" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_badger_n_1_rel",
            PHON.ONSET con ] ].

badly_adv1 := adv_int_vp_post_le &
 [ STEM < "badly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bad_a_1_rel",
            PHON.ONSET con ] ].

badminton_n1 := n_mass_le &
 [ STEM < "badminton" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_badminton_n_1_rel",
            PHON.ONSET con ] ].

baffle_n1 := n_intr_le &
 [ STEM < "baffle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_baffle_n_1_rel",
            PHON.ONSET con ] ].

baffle_v1 := v_np_trans_le &
 [ STEM < "baffle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_baffle_v_1_rel",
            PHON.ONSET con ] ].

baffle_v2 := v_expl_it_subj_np_cp_le &
 [ STEM < "baffle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_baffle_v_1_rel",
            PHON.ONSET con ] ].

bag_n1 := n_ppof_le &
 [ STEM < "bag" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bag_n_of_rel",
            PHON.ONSET con ] ].

bag_v1 := v_np_trans_le &
 [ STEM < "bag" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bag_v_1_rel",
            PHON.ONSET con ] ].

bagaskardshogdin := n_proper_le &
 [ STEM < "bagaskardshogdin" >,
   SYNSEM [ LKEYS.KEYREL.CARG "bagaskardshogdin",
            PHON.ONSET con ] ].

bagel_n1 := n_intr_le &
 [ STEM < "bagel" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bagel_n_1_rel",
            PHON.ONSET con ] ].

baggage_n1 := n_mass_count_le &
 [ STEM < "baggage" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_baggage_n_1_rel",
            PHON.ONSET con ] ].

bagger_n1 := n_intr_le &
 [ STEM < "bagger" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bagger_n_1_rel",
            PHON.ONSET con ] ].

bahamas_n1 := n_proper_le &
 [ STEM < "bahamas" >,
   SYNSEM [ LKEYS.KEYREL.CARG "bahamas",
            PHON.ONSET con ] ].

bahncard_n1 := n_intr_le &
 [ STEM < "bahn", "card" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bahn+card_n_1_rel",
            PHON.ONSET con ] ].

bahncard_n2 := n_intr_le &
 [ STEM < "bahn-", "card" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bahn+card_n_1_rel",
            PHON.ONSET con ] ].

baht_n1 := n_intr_le &
 [ STEM < "baht" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_baht_n_1_rel",
            PHON.ONSET con ] ].

baht_n2 := n_plur_nocmpnd_le &
 [ STEM < "baht" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_baht_n_1_rel",
            PHON.ONSET con ] ].

bai_chongxi_n1 := n_proper_le &
 [ STEM < "bai", "chongxi" >,
   SYNSEM [ LKEYS.KEYREL.CARG "bai_chongxi",
            PHON.ONSET con ] ].

bai_n1 := n_proper_le &
 [ STEM < "bai" >,
   SYNSEM [ LKEYS.KEYREL.CARG "bai",
            PHON.ONSET con ] ].

bail_n1 := n_mass_le &
 [ STEM < "bail" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bail_n_1_rel",
            PHON.ONSET con ] ].

bail_out_of_v1 := v_empty_prep_trans_le &
 [ STEM < "bail" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _out+of_p_sel_rel,
                    KEYREL.PRED "_bail_v_out+of_rel" ],
            PHON.ONSET con ] ].

bail_out_v1 := v_particle_np_le &
 [ STEM < "bail" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_bail_v_out_rel" ],
            PHON.ONSET con ] ].

bail_v1 := v_unerg_le &
 [ STEM < "bail" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bail_v_1_rel",
            PHON.ONSET con ] ].

bake_v1 := v_unacc_le &
 [ STEM < "bake" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bake_v_1_rel",
            PHON.ONSET con ] ].

bake_v2 := v_np_trans_noger_le &
 [ STEM < "bake" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bake_v_cause_rel",
            PHON.ONSET con ] ].

bake_v3 := v_ditrans_only_le &
 [ STEM < "bake" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bake_v_cause_rel",
            PHON.ONSET con ] ].

bakkaheleren := n_proper_le &
 [ STEM < "bakkaheleren" >,
   SYNSEM [ LKEYS.KEYREL.CARG "bakkaheleren",
            PHON.ONSET con ] ].

bakkahelleren := n_proper_le &
 [ STEM < "bakkahelleren" >,
   SYNSEM [ LKEYS.KEYREL.CARG "bakkahelleren",
            PHON.ONSET con ] ].

bakkeberg_n1 := n_proper_le &
 [ STEM < "bakkeberg" >,
   SYNSEM [ LKEYS.KEYREL.CARG "bakkeberg",
            PHON.ONSET con ] ].

balance_n1 := n_mass_count_ppof_le &
 [ STEM < "balance" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_balance_n_of_rel",
            PHON.ONSET con ] ].

balance_out_v1 := v_particle_np_le &
 [ STEM < "balance" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_balance_v_out_rel" ],
            PHON.ONSET con ] ].

balance_v1 := v_np*_trans_le &
 [ STEM < "balance" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_balance_v_1_rel",
            PHON.ONSET con ] ].

balcony_n1 := n_intr_le &
 [ STEM < "balcony" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_balcony_n_1_rel",
            PHON.ONSET con ] ].

bald_a1 := adj_intrans_le &
 [ STEM < "bald" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bald_a_1_rel",
            PHON.ONSET con ] ].

bale_n1 := n_intr_le &
 [ STEM < "bale" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bale_n_1_rel",
            PHON.ONSET con ] ].

bale_v1 := v_np*_trans_le &
 [ STEM < "bale" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bale_v_1_rel",
            PHON.ONSET con ] ].

balestrand := n_proper_le &
 [ STEM < "balestrand" >,
   SYNSEM [ LKEYS.KEYREL.CARG "balestrand",
            PHON.ONSET con ] ].

balk_n1 := n_intr_le &
 [ STEM < "balk" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_balk_n_1_rel",
            PHON.ONSET con ] ].

balk_v1 := v_empty_prep_intrans_le &
 [ STEM < "balk" >,
   SYNSEM [ LKEYS [ --COMPKEY _at_p_sel_rel,
                    KEYREL.PRED "_balk_v_at_rel" ],
            PHON.ONSET con ] ].

balk_v2 := v_unerg_le &
 [ STEM < "balk" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_balk_v_1_rel",
            PHON.ONSET con ] ].

ball_n1 := n_ppof_le &
 [ STEM < "ball" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ball_n_of_rel",
            PHON.ONSET con ] ].

ballast_n1 := n_mass_le &
 [ STEM < "ballast" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ballast_n_1_rel",
            PHON.ONSET con ] ].

ballast_v1 := v_np_trans_le &
 [ STEM < "ballast" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ballast_v_1_rel",
            PHON.ONSET con ] ].

ballet_n1 := n_mass_le &
 [ STEM < "ballet" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ballet_n_1_rel",
            PHON.ONSET con ] ].

ballpark_post_ttl := n_post_title_le &
 [ STEM < "ballpark" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ballpark_n_1_rel",
            PHON.ONSET con ] ].

balocan_n1 := n_proper_le &
 [ STEM < "balocan" >,
   SYNSEM [ LKEYS.KEYREL.CARG "balocan",
            PHON.ONSET con ] ].

baltic_n1 := n_intr_named_le &
 [ STEM < "baltic" >,
   SYNSEM [ LKEYS.KEYREL.CARG "baltic",
            PHON.ONSET con ] ].

balustrade_n1 := n_intr_le &
 [ STEM < "balustrade" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_balustrade_n_1_rel",
            PHON.ONSET con ] ].

bamberg_n1 := n_proper_city_le &
 [ STEM < "bamberg" >,
   SYNSEM [ LKEYS.KEYREL.CARG "bamberg",
            PHON.ONSET con ] ].

bamboo_n1 := n_mass_le &
 [ STEM < "bamboo" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bamboo_n_1_rel",
            PHON.ONSET con ] ].

bamford_n1 := n_proper_le &
 [ STEM < "bamford" >,
   SYNSEM [ LKEYS.KEYREL.CARG "bamford",
            PHON.ONSET con ] ].

ban_n1 := n_intr_le &
 [ STEM < "ban" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ban_n_1_rel",
            PHON.ONSET con ] ].

ban_v1 := v_empty_prep*_trans_le &
 [ STEM < "ban" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _from_p_sel_rel,
                    KEYREL.PRED "_ban_v_from_rel" ],
            PHON.ONSET con ] ].

banana_n1 := n_intr_le &
 [ STEM < "banana" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_banana_n_1_rel",
            PHON.ONSET con ] ].

band_n1 := n_intr_le &
 [ STEM < "band" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_band_n_1_rel",
            PHON.ONSET con ] ].

bandage_n1 := n_intr_le &
 [ STEM < "bandage" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bandage_n_1_rel",
            PHON.ONSET con ] ].

bandage_up_v1 := v_particle_np_le &
 [ STEM < "bandage" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_bandage_v_up_rel" ],
            PHON.ONSET con ] ].

bandage_v1 := v_np*_trans_le &
 [ STEM < "bandage" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bandage_v_1_rel",
            PHON.ONSET con ] ].

banff_n1 := n_proper_city_le &
 [ STEM < "banff" >,
   SYNSEM [ LKEYS.KEYREL.CARG "banff",
            PHON.ONSET con ] ].

bang_n1 := n_intr_le &
 [ STEM < "bang" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bang_n_1_rel",
            PHON.ONSET con ] ].

bang_up_v1 := v_particle_np_le &
 [ STEM < "bang" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_bang_v_up_rel" ],
            PHON.ONSET con ] ].

bang_v1 := v_np_trans_le &
 [ STEM < "bang" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bang_v_1_rel",
            PHON.ONSET con ] ].

bangke_n1 := n_proper_le &
 [ STEM < "bangke" >,
   SYNSEM [ LKEYS.KEYREL.CARG "bangke",
            PHON.ONSET con ] ].

banish_v1 := v_empty_prep*_trans_le &
 [ STEM < "banish" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _from_p_sel_rel,
                    KEYREL.PRED "_banish_v_from_rel" ],
            PHON.ONSET con ] ].

banishment_n1 := n_mass_le &
 [ STEM < "banishment" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_banishment_n_1_rel",
            PHON.ONSET con ] ].

banister_n1 := n_intr_le &
 [ STEM < "banister" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_banister_n_1_rel",
            PHON.ONSET con ] ].

bank_n1 := n_ppof_le &
 [ STEM < "bank" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bank_n_of_rel",
            PHON.ONSET con ] ].

bank_post_ttl := n_post_title_le &
 [ STEM < "bank" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bank_n_of_rel",
            PHON.ONSET con ] ].

banking_n1 := n_mass_le &
 [ STEM < "banking" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_banking_n_1_rel",
            PHON.ONSET con ] ].

bankrupt_a1 := adj_intrans_le &
 [ STEM < "bankrupt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bankrupt_a_1_rel",
            PHON.ONSET con ] ].

bankrupt_v1 := v_np_trans_le &
 [ STEM < "bankrupt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bankrupt_v_1_rel",
            PHON.ONSET con ] ].

banner_n1 := n_intr_le &
 [ STEM < "banner" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_banner_n_1_rel",
            PHON.ONSET con ] ].

banquet_n1 := n_intr_le &
 [ STEM < "banquet" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_banquet_n_1_rel",
            PHON.ONSET con ] ].

bansongyuan_n1 := n_proper_le &
 [ STEM < "bansongyuan" >,
   SYNSEM [ LKEYS.KEYREL.CARG "bansongyuan",
            PHON.ONSET con ] ].

banter_n1 := n_mass_le &
 [ STEM < "banter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_banter_n_1_rel",
            PHON.ONSET con ] ].

banter_v1 := v_unerg_le &
 [ STEM < "banter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_banter_v_1_rel",
            PHON.ONSET con ] ].

baoshan_n1 := n_proper_le &
 [ STEM < "baoshan" >,
   SYNSEM [ LKEYS.KEYREL.CARG "baoshan",
            PHON.ONSET con ] ].

baptize_v1 := v_np*_trans_le &
 [ STEM < "baptize" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_baptize_v_1_rel",
            PHON.ONSET con ] ].

bar_code_n1 := n_intr_le &
 [ STEM < "bar-", "code" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bar_code_n_1_rel",
            PHON.ONSET con ] ].

bar_n1 := n_intr_le &
 [ STEM < "bar" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bar_n_1_rel",
            PHON.ONSET con ] ].

bar_v1 := v_empty_prep*_trans_le &
 [ STEM < "bar" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _from_p_sel_rel,
                    KEYREL.PRED "_bar_v_from_rel" ],
            PHON.ONSET con ] ].

barbados_n1 := n_proper_le &
 [ STEM < "barbados" >,
   SYNSEM [ LKEYS.KEYREL.CARG "barbados",
            PHON.ONSET con ] ].

barbara_n1 := n_proper_le &
 [ STEM < "barbara" >,
   SYNSEM [ LKEYS.KEYREL.CARG "barbara",
            PHON.ONSET con ] ].

barbarism_n1 := n_mass_count_le &
 [ STEM < "barbarism" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_barbarism_n_1_rel",
            PHON.ONSET con ] ].

barbarous_a1 := adj_intrans_le &
 [ STEM < "barbarous" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_barbarous_a_1_rel",
            PHON.ONSET con ] ].

barberry_n1 := n_intr_le &
 [ STEM < "barberry" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_barberry_n_1_rel",
            PHON.ONSET con ] ].

barbie_n1 := n_proper_le &
 [ STEM < "barbie" >,
   SYNSEM [ LKEYS.KEYREL.CARG "barbie",
            PHON.ONSET con ] ].

barbule_n1 := n_intr_le &
 [ STEM < "barbule" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_barbule_n_1_rel",
            PHON.ONSET con ] ].

barck_n1 := n_proper_le &
 [ STEM < "barck" >,
   SYNSEM [ LKEYS.KEYREL.CARG "barck",
            PHON.ONSET con ] ].

bard_n1 := n_intr_le &
 [ STEM < "bard" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bard_n_1_rel",
            PHON.ONSET con ] ].

bare_a1 := adj_intrans_le &
 [ STEM < "bare" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bare_a_1_rel",
            PHON.ONSET con ] ].

bare_v1 := v_np_trans_le &
 [ STEM < "bare" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bare_v_1_rel",
            PHON.ONSET con ] ].

barely_adv1 := adv_int_vp_pre_le &
 [ STEM < "barely" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bare_a_1_rel",
            PHON.ONSET con ] ].

barely_deg := adv_degree_spec_jov_le &
 [ STEM < "barely" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_barely_x_deg_rel",
            PHON.ONSET con ] ].

bargain_n1 := n_intr_le &
 [ STEM < "bargain" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bargain_n_1_rel",
            PHON.ONSET con ] ].

bargain_over_v1 := v_empty_prep_intrans_le &
 [ STEM < "bargain" >,
   SYNSEM [ LKEYS [ --COMPKEY _over_p_sel_rel,
                    KEYREL.PRED "_bargain_v_over_rel" ],
            PHON.ONSET con ] ].

bargain_v1 := v_np*_trans_le &
 [ STEM < "bargain" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bargain_v_1_rel",
            PHON.ONSET con ] ].

bargain_v2 := v_cp_non_trans_le &
 [ STEM < "bargain" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bargain_v_1_rel",
            PHON.ONSET con ] ].

bark_n1 := n_intr_le &
 [ STEM < "bark" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bark_n_1_rel",
            PHON.ONSET con ] ].

bark_v1 := v_unerg_le &
 [ STEM < "bark" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bark_v_1_rel",
            PHON.ONSET con ] ].

barley_n1 := n_mass_le &
 [ STEM < "barley" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_barley_n_1_rel",
            PHON.ONSET con ] ].

barn_n1 := n_intr_le &
 [ STEM < "barn" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_barn_n_1_rel",
            PHON.ONSET con ] ].

baroque_isect := adj_intrans_le &
 [ STEM < "baroque" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_baroque_a_1_rel",
            PHON.ONSET con ] ].

barrage_n1 := n_intr_le &
 [ STEM < "barrage" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_barrage_n_1_rel",
            PHON.ONSET con ] ].

barrage_v1 := v_np_trans_le &
 [ STEM < "barrage" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_barrage_v_1_rel",
            PHON.ONSET con ] ].

barrel_n1 := n_ppof_le &
 [ STEM < "barrel" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_barrel_n_of_rel",
            PHON.ONSET con ] ].

barren_a1 := adj_intrans_le &
 [ STEM < "barren" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_barren_a_1_rel",
            PHON.ONSET con ] ].

barrens_n1 := n_plur_le &
 [ STEM < "barren" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_barrens_n_1_rel",
            PHON.ONSET con ] ].

barricade_n1 := n_intr_le &
 [ STEM < "barricade" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_barricade_n_1_rel",
            PHON.ONSET con ] ].

barricade_v1 := v_np_trans_le &
 [ STEM < "barricade" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_barricade_v_1_rel",
            PHON.ONSET con ] ].

barrier_n1 := n_intr_le &
 [ STEM < "barrier" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_barrier_n_1_rel",
            PHON.ONSET con ] ].

bart_n1 := n_proper_le &
 [ STEM < "bart" >,
   SYNSEM [ LKEYS.KEYREL.CARG "bart",
            PHON.ONSET con ] ].

baryshnikov_n1 := n_proper_le &
 [ STEM < "baryshnikov" >,
   SYNSEM [ LKEYS.KEYREL.CARG "baryshnikov",
            PHON.ONSET con ] ].

base_n1 := n_intr_le &
 [ STEM < "base" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_base_n_1_rel",
            PHON.ONSET con ] ].

base_v1 := v_np_prep_trans_le &
 [ STEM < "base" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _on_p_rel,
                    KEYREL.PRED "_base_v_on_rel" ],
            PHON.ONSET con ] ].

baseball_n1 := n_mass_count_le &
 [ STEM < "baseball" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_baseball_n_1_rel",
            PHON.ONSET con ] ].

based_isect := adj_intrans_le &
 [ STEM < "based" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_based_a_1_rel",
            PHON.ONSET con ] ].

baseline_n1 := n_intr_le &
 [ STEM < "baseline" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_baseline_n_1_rel",
            PHON.ONSET con ] ].

basement_n1 := n_intr_le &
 [ STEM < "basement" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_basement_n_1_rel",
            PHON.ONSET con ] ].

basf_nd := n_proper_le &
 [ STEM < "basf" >,
   SYNSEM [ LKEYS.KEYREL.CARG "basf",
            PHON.ONSET con ] ].

bash_v1 := v_np_trans_le &
 [ STEM < "bash" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bash_v_1_rel",
            PHON.ONSET con ] ].

bashford := n_proper_le &
 [ STEM < "bashford" >,
   SYNSEM [ LKEYS.KEYREL.CARG "bashford",
            PHON.ONSET con ] ].

bashful_a1 := adj_intrans_le &
 [ STEM < "bashful" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bashful_a_1_rel",
            PHON.ONSET con ] ].

basic_a1 := adj_intrans_le &
 [ STEM < "basic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_basic_a_1_rel",
            PHON.ONSET con ] ].

basic_grad := adv_degree_spec_v_le &
 [ STEM < "basic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_basic_x_rel",
            PHON.ONSET con ] ].

basically_adv1 := adv_vp_pre_le &
 [ STEM < "basically" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_basic_a_1_rel",
            PHON.ONSET con ] ].

basically_adv2 := adv_s_pre_le &
 [ STEM < "basically" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_basic_a_1_rel",
            PHON.ONSET con ] ].

basin_n1 := n_intr_le &
 [ STEM < "basin" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_basin_n_1_rel",
            PHON.ONSET con ] ].

basis_n1 := n_intr_le &
 [ STEM < "basis" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_basis_n_1_rel",
            PHON.ONSET con ] ].

bask_v1 := v_unerg_le &
 [ STEM < "bask" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bask_v_1_rel",
            PHON.ONSET con ] ].

basket_n1 := n_intr_le &
 [ STEM < "basket" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_basket_n_1_rel",
            PHON.ONSET con ] ].

basketball_n1 := n_mass_count_le &
 [ STEM < "basketball" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_basketball_n_1_rel",
            PHON.ONSET con ] ].

basque_n1 := n_proper_le &
 [ STEM < "basque" >,
   SYNSEM [ LKEYS.KEYREL.CARG "basque",
            PHON.ONSET con ] ].

bass_n1 := n_mass_count_le &
 [ STEM < "bass" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bass_n_1_rel",
            PHON.ONSET con ] ].

bastard_a1 := adj_intrans_le &
 [ STEM < "bastard" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bastard_a_1_rel",
            PHON.ONSET con ] ].

bastard_n1 := n_intr_le &
 [ STEM < "bastard" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bastard_n_1_rel",
            PHON.ONSET con ] ].

bastille_day_n1 := n_proper_le &
 [ STEM < "bastille", "day" >,
   SYNSEM [ LKEYS.KEYREL.CARG "bastille_day",
            PHON.ONSET con ] ].

bastille_n1 := n_intr_le &
 [ STEM < "bastille" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bastille_n_1_rel",
            PHON.ONSET con ] ].

bastion_n1 := n_intr_le &
 [ STEM < "bastion" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bastion_n_1_rel",
            PHON.ONSET con ] ].

bat_n1 := n_intr_le &
 [ STEM < "bat" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bat_n_1_rel",
            PHON.ONSET con ] ].

batalion_n1 := n_intr_le &
 [ STEM < "batalion" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_batalion_n_no_rel",
            PHON.ONSET con ] ].

bath_n1 := n_intr_le &
 [ STEM < "bath" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bath_n_1_rel",
            PHON.ONSET con ] ].

bathe_v1 := v_np*_trans_le &
 [ STEM < "bathe" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bathe_v_1_rel",
            PHON.ONSET con ] ].

bathroom_n1 := n_intr_le &
 [ STEM < "bathroom" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bathroom_n_1_rel",
            PHON.ONSET con ] ].

batsman_n1 := n_intr_le &
 [ STEM < "batsman" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_batsman_n_1_rel",
            PHON.ONSET con ] ].

battalion_n1 := n_intr_le &
 [ STEM < "battalion" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_battalion_n_1_rel",
            PHON.ONSET con ] ].

batter_n1 := n_mass_count_le &
 [ STEM < "batter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_batter_n_1_rel",
            PHON.ONSET con ] ].

batter_v1 := v_empty_prep*_trans_le &
 [ STEM < "batter" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _into_p_sel_rel,
                    KEYREL.PRED "_batter_v_into_rel" ],
            PHON.ONSET con ] ].

battery_n1 := n_intr_le &
 [ STEM < "battery" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_battery_n_1_rel",
            PHON.ONSET con ] ].

battle_against_v1 := v_empty_prep_intrans_le &
 [ STEM < "battle" >,
   SYNSEM [ LKEYS [ --COMPKEY _against_p_sel_rel,
                    KEYREL.PRED "_battle_v_against_rel" ],
            PHON.ONSET con ] ].

battle_n1 := n_intr_le &
 [ STEM < "battle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_battle_n_1_rel",
            PHON.ONSET con ] ].

battle_v1 := v_np*_trans_le &
 [ STEM < "battle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_battle_v_1_rel",
            PHON.ONSET con ] ].

battle_with_v1 := v_empty_prep_intrans_le &
 [ STEM < "battle" >,
   SYNSEM [ LKEYS [ --COMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_battle_v_with_rel" ],
            PHON.ONSET con ] ].

battlefield_n1 := n_intr_le &
 [ STEM < "battlefield" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_battlefield_n_1_rel",
            PHON.ONSET con ] ].

bavarian_a1 := adj_intrans_le &
 [ STEM < "bavarian" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bavarian_a_1_rel",
            PHON.ONSET con ] ].

bay_n1 := n_intr_le &
 [ STEM < "bay" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bay_n_1_rel",
            PHON.ONSET con ] ].

bay_v1 := v_unerg_le &
 [ STEM < "bay" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bay_v_1_rel",
            PHON.ONSET con ] ].

bayreuth_n1 := n_proper_city_le &
 [ STEM < "bayreuth" >,
   SYNSEM [ LKEYS.KEYREL.CARG "bayreuth",
            PHON.ONSET con ] ].

bazaar_n1 := n_intr_le &
 [ STEM < "bazaar" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bazaar_n_1_rel",
            PHON.ONSET con ] ].

bazaar_post_ttl := n_post_title_le &
 [ STEM < "bazaar" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bazaar_n_1_rel",
            PHON.ONSET con ] ].

bb_n1 := n_intr_le &
 [ STEM < "bb" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bb_n_1_rel",
            PHON.ONSET con ] ].

bbb_n1 := n_intr_named_le &
 [ STEM < "bbb" >,
   SYNSEM [ LKEYS.KEYREL.CARG "bbb",
            PHON.ONSET con ] ].

bbc_n1 := n_intr_named_le &
 [ STEM < "bbc" >,
   SYNSEM [ LKEYS.KEYREL.CARG "bbc",
            PHON.ONSET con ] ].

bc_temp_1 := xp_bc_ad_le &
 [ STEM < "bc" >,
   SYNSEM [ LKEYS.KEYREL [ CARG "BC_time",
                             PRED "_bc_x_rel" ],
            PHON.ONSET con ] ].

bc_temp_2 := xp_bc_ad_le &
 [ STEM < "b", "c" >,
   SYNSEM [ LKEYS.KEYREL [ CARG "BC_time",
                             PRED "_bc_x_rel" ],
            PHON.ONSET con ] ].

bc_temp_3 := xp_bc_ad_le &
 [ STEM < "b.c." >,
   SYNSEM [ LKEYS.KEYREL [ CARG "BC_time",
                             PRED "_bc_x_rel" ],
            PHON.ONSET con ] ].

bc_temp_4 := xp_bc_ad_le &
 [ STEM < "b.c" >,
   SYNSEM [ LKEYS.KEYREL [ CARG "BC_time",
                             PRED "_bc_x_rel" ],
            PHON.ONSET con ] ].

be_c_am := vc_prd_am_le &
 [ STEM < "am" >,
   SYNSEM.PHON.ONSET voc ].

be_c_am_cx := vc_prd_am_cx_le &
 [ STEM < "m" >,
   SYNSEM.PHON.ONSET voc ].

be_c_am_cx_2 := vc_prd_am_cx_le &
 [ STEM < "'m" >,
   SYNSEM.PHON.ONSET con ].

be_c_am_cx_neg_1 := vc_prd_am_neg_noinv_le &
 [ STEM < "'m", "not" >,
   SYNSEM.PHON.ONSET onset ].

be_c_am_neg_1 := vc_prd_am_neg_le &
 [ STEM < "aren't" >,
   SYNSEM.PHON.ONSET voc ].

be_c_am_neg_2 := vc_prd_am_neg_le &
 [ STEM < "aren", "'t" >,
   SYNSEM.PHON.ONSET voc ].

be_c_are := vc_prd_are_le &
 [ STEM < "are" >,
   SYNSEM.PHON.ONSET voc ].

be_c_are_cx := vc_prd_are_cx_le &
 [ STEM < "'re" >,
   SYNSEM.PHON.ONSET con ].

be_c_are_cx_2 := vc_prd_are_cx_le &
 [ STEM < "re" >,
   SYNSEM.PHON.ONSET con ].

be_c_are_cx_neg_1 := vc_prd_are_neg_noinv_le &
 [ STEM < "'re", "not" >,
   SYNSEM.PHON.ONSET onset ].

be_c_are_neg_1 := vc_prd_are_neg_le &
 [ STEM < "aren't" >,
   SYNSEM.PHON.ONSET voc ].

be_c_are_neg_2 := vc_prd_are_neg_le &
 [ STEM < "aren", "'t" >,
   SYNSEM.PHON.ONSET voc ].

be_c_be := vc_prd_be_le &
 [ STEM < "be" >,
   SYNSEM.PHON.ONSET con ].

be_c_been := vc_prd_been_le &
 [ STEM < "been" >,
   SYNSEM.PHON.ONSET con ].

be_c_being := vc_prd_being_le &
 [ STEM < "being" >,
   SYNSEM.PHON.ONSET con ].

be_c_is := vc_prd_is_le &
 [ STEM < "is" >,
   SYNSEM.PHON.ONSET voc ].

be_c_is_cx := vc_prd_is_cx_le &
 [ STEM < "s" >,
   SYNSEM.PHON.ONSET voc ].

be_c_is_cx_2 := vc_prd_is_cx_le &
 [ STEM < "'s" >,
   SYNSEM.PHON.ONSET con ].

be_c_is_cx_neg_1 := vc_prd_is_neg_noinv_le &
 [ STEM < "'s", "not" >,
   SYNSEM.PHON.ONSET onset ].

be_c_is_neg_1 := vc_prd_is_neg_le &
 [ STEM < "isn't" >,
   SYNSEM.PHON.ONSET voc ].

be_c_is_neg_2 := vc_prd_is_neg_le &
 [ STEM < "isn", "'t" >,
   SYNSEM.PHON.ONSET voc ].

be_c_was := vc_prd_was_le &
 [ STEM < "was" >,
   SYNSEM.PHON.ONSET con ].

be_c_was_neg_1 := vc_prd_was_neg_le &
 [ STEM < "wasn't" >,
   SYNSEM.PHON.ONSET con ].

be_c_was_neg_2 := vc_prd_was_neg_le &
 [ STEM < "wasn", "'t" >,
   SYNSEM.PHON.ONSET con ].

be_c_was_neg_subj_1 := vc_prd_was_neg_subj_le &
 [ STEM < "wasn't" >,
   SYNSEM.PHON.ONSET con ].

be_c_was_neg_subj_2 := vc_prd_was_neg_subj_le &
 [ STEM < "wasn", "'t" >,
   SYNSEM.PHON.ONSET con ].

be_c_was_subj := vc_prd_was_subj_le &
 [ STEM < "was" >,
   SYNSEM.PHON.ONSET con ].

be_c_were := vc_prd_were_le &
 [ STEM < "were" >,
   SYNSEM.PHON.ONSET con ].

be_c_were_neg_1 := vc_prd_were_neg_le &
 [ STEM < "weren't" >,
   SYNSEM.PHON.ONSET con ].

be_c_were_neg_2 := vc_prd_were_neg_le &
 [ STEM < "weren", "'t" >,
   SYNSEM.PHON.ONSET con ].

be_c_were_neg_subj_1 := vc_prd_were_neg_subj_le &
 [ STEM < "weren't" >,
   SYNSEM.PHON.ONSET con ].

be_c_were_neg_subj_2 := vc_prd_were_neg_subj_le &
 [ STEM < "weren", "'t" >,
   SYNSEM.PHON.ONSET con ].

be_c_were_subj := vc_prd_were_subj_le &
 [ STEM < "were" >,
   SYNSEM.PHON.ONSET con ].

be_id_am := vc_id_am_le &
 [ STEM < "am" >,
   SYNSEM.PHON.ONSET voc ].

be_id_am_cx := vc_id_am_cx_le &
 [ STEM < "m" >,
   SYNSEM.PHON.ONSET voc ].

be_id_am_cx_2 := vc_id_am_cx_le &
 [ STEM < "'m" >,
   SYNSEM.PHON.ONSET con ].

be_id_am_cx_neg_1 := vc_id_am_neg_noinv_le &
 [ STEM < "'m", "not" >,
   SYNSEM.PHON.ONSET onset ].

be_id_am_neg_1 := vc_id_am_neg_le &
 [ STEM < "aren't" >,
   SYNSEM.PHON.ONSET voc ].

be_id_am_neg_2 := vc_id_am_neg_le &
 [ STEM < "aren", "'t" >,
   SYNSEM.PHON.ONSET voc ].

be_id_are := vc_id_are_le &
 [ STEM < "are" >,
   SYNSEM.PHON.ONSET voc ].

be_id_are_cx := vc_id_are_cx_le &
 [ STEM < "'re" >,
   SYNSEM.PHON.ONSET con ].

be_id_are_cx_2 := vc_id_are_cx_le &
 [ STEM < "re" >,
   SYNSEM.PHON.ONSET con ].

be_id_are_cx_neg_1 := vc_id_are_neg_noinv_le &
 [ STEM < "'re", "not" >,
   SYNSEM.PHON.ONSET onset ].

be_id_are_neg_1 := vc_id_are_neg_le &
 [ STEM < "aren't" >,
   SYNSEM.PHON.ONSET voc ].

be_id_are_neg_2 := vc_id_are_neg_le &
 [ STEM < "aren", "'t" >,
   SYNSEM.PHON.ONSET voc ].

be_id_be := vc_id_be_le &
 [ STEM < "be" >,
   SYNSEM.PHON.ONSET con ].

be_id_been := vc_id_been_le &
 [ STEM < "been" >,
   SYNSEM.PHON.ONSET con ].

be_id_being := vc_id_being_le &
 [ STEM < "being" >,
   SYNSEM.PHON.ONSET con ].

be_id_is := vc_id_is_le &
 [ STEM < "is" >,
   SYNSEM.PHON.ONSET voc ].

be_id_is_cx := vc_id_is_cx_le &
 [ STEM < "s" >,
   SYNSEM.PHON.ONSET voc ].

be_id_is_cx_2 := vc_id_is_cx_le &
 [ STEM < "'s" >,
   SYNSEM.PHON.ONSET con ].

be_id_is_cx_neg_1 := vc_id_is_neg_noinv_le &
 [ STEM < "'s", "not" >,
   SYNSEM.PHON.ONSET onset ].

be_id_is_neg_1 := vc_id_is_neg_le &
 [ STEM < "isn't" >,
   SYNSEM.PHON.ONSET voc ].

be_id_is_neg_2 := vc_id_is_neg_le &
 [ STEM < "isn", "'t" >,
   SYNSEM.PHON.ONSET voc ].

be_id_was := vc_id_was_le &
 [ STEM < "was" >,
   SYNSEM.PHON.ONSET con ].

be_id_was_neg_1 := vc_id_was_neg_le &
 [ STEM < "wasn't" >,
   SYNSEM.PHON.ONSET con ].

be_id_was_neg_2 := vc_id_was_neg_le &
 [ STEM < "wasn", "'t" >,
   SYNSEM.PHON.ONSET con ].

be_id_was_neg_subj_1 := vc_id_was_neg_subj_le &
 [ STEM < "wasn't" >,
   SYNSEM.PHON.ONSET con ].

be_id_was_neg_subj_2 := vc_id_was_neg_subj_le &
 [ STEM < "wasn", "'t" >,
   SYNSEM.PHON.ONSET con ].

be_id_was_subj := vc_id_was_subj_le &
 [ STEM < "was" >,
   SYNSEM.PHON.ONSET con ].

be_id_were := vc_id_were_le &
 [ STEM < "were" >,
   SYNSEM.PHON.ONSET con ].

be_id_were_neg_1 := vc_id_were_neg_le &
 [ STEM < "weren't" >,
   SYNSEM.PHON.ONSET con ].

be_id_were_neg_2 := vc_id_were_neg_le &
 [ STEM < "weren", "'t" >,
   SYNSEM.PHON.ONSET con ].

be_id_were_neg_subj_1 := vc_id_were_neg_subj_le &
 [ STEM < "weren't" >,
   SYNSEM.PHON.ONSET con ].

be_id_were_neg_subj_2 := vc_id_were_neg_subj_le &
 [ STEM < "weren", "'t" >,
   SYNSEM.PHON.ONSET con ].

be_id_were_subj := vc_id_were_subj_le &
 [ STEM < "were" >,
   SYNSEM.PHON.ONSET con ].

be_inv_are := v_loc_inv_are_le &
 [ STEM < "are" >,
   SYNSEM.PHON.ONSET voc ].

be_inv_is := v_loc_inv_is_le &
 [ STEM < "is" >,
   SYNSEM.PHON.ONSET voc ].

be_inv_was := v_loc_inv_was_le &
 [ STEM < "was" >,
   SYNSEM.PHON.ONSET con ].

be_inv_were := v_loc_inv_were_le &
 [ STEM < "were" >,
   SYNSEM.PHON.ONSET con ].

be_it_cop_be := vc_it_be_le &
 [ STEM < "be" >,
   SYNSEM.PHON.ONSET con ].

be_it_cop_been := vc_it_been_le &
 [ STEM < "been" >,
   SYNSEM.PHON.ONSET con ].

be_it_cop_being := vc_it_being_le &
 [ STEM < "being" >,
   SYNSEM.PHON.ONSET con ].

be_it_cop_is := vc_it_is_le &
 [ STEM < "is" >,
   SYNSEM.PHON.ONSET voc ].

be_it_cop_is_cx := vc_it_s_cx_le &
 [ STEM < "s" >,
   SYNSEM.PHON.ONSET voc ].

be_it_cop_is_cx_2 := vc_it_s_cx_le &
 [ STEM < "'s" >,
   SYNSEM.PHON.ONSET con ].

be_it_cop_is_neg_1 := vc_it_is_neg_le &
 [ STEM < "isn't" >,
   SYNSEM.PHON.ONSET voc ].

be_it_cop_is_neg_2 := vc_it_is_neg_le &
 [ STEM < "isn", "'t" >,
   SYNSEM.PHON.ONSET voc ].

be_it_cop_was := vc_it_was_le &
 [ STEM < "was" >,
   SYNSEM.PHON.ONSET con ].

be_it_cop_was_neg_1 := vc_it_was_neg_le &
 [ STEM < "wasn't" >,
   SYNSEM.PHON.ONSET con ].

be_it_cop_was_neg_2 := vc_it_was_neg_le &
 [ STEM < "wasn", "'t" >,
   SYNSEM.PHON.ONSET con ].

be_it_cop_was_neg_subj_1 := vc_it_was_neg_subj_le &
 [ STEM < "wasn't" >,
   SYNSEM.PHON.ONSET con ].

be_it_cop_was_neg_subj_2 := vc_it_was_neg_subj_le &
 [ STEM < "wasn", "'t" >,
   SYNSEM.PHON.ONSET con ].

be_it_cop_was_subj := vc_it_was_subj_le &
 [ STEM < "was" >,
   SYNSEM.PHON.ONSET con ].

be_nv_are := vc_nv_are_le &
 [ STEM < "are" >,
   SYNSEM.PHON.ONSET voc ].

be_nv_are_neg_1 := vc_nv_are_neg_le &
 [ STEM < "aren't" >,
   SYNSEM.PHON.ONSET voc ].

be_nv_are_neg_2 := vc_nv_are_neg_le &
 [ STEM < "aren", "'t" >,
   SYNSEM.PHON.ONSET voc ].

be_nv_be := vc_nv_be_le &
 [ STEM < "be" >,
   SYNSEM.PHON.ONSET con ].

be_nv_been := vc_nv_been_le &
 [ STEM < "been" >,
   SYNSEM.PHON.ONSET con ].

be_nv_being := vc_nv_being_le &
 [ STEM < "being" >,
   SYNSEM.PHON.ONSET con ].

be_nv_is := vc_nv_is_le &
 [ STEM < "is" >,
   SYNSEM.PHON.ONSET voc ].

be_nv_is_cx := vc_nv_is_cx_le &
 [ STEM < "s" >,
   SYNSEM.PHON.ONSET voc ].

be_nv_is_cx_2 := vc_nv_is_cx_le &
 [ STEM < "'s" >,
   SYNSEM.PHON.ONSET con ].

be_nv_is_cx_neg_1 := vc_nv_is_neg_noinv_le &
 [ STEM < "'s", "not" >,
   SYNSEM.PHON.ONSET onset ].

be_nv_is_neg_1 := vc_nv_is_neg_le &
 [ STEM < "isn't" >,
   SYNSEM.PHON.ONSET voc ].

be_nv_is_neg_2 := vc_nv_is_neg_le &
 [ STEM < "isn", "'t" >,
   SYNSEM.PHON.ONSET voc ].

be_nv_was := vc_nv_was_le &
 [ STEM < "was" >,
   SYNSEM.PHON.ONSET con ].

be_nv_was_neg_1 := vc_nv_was_neg_le &
 [ STEM < "wasn't" >,
   SYNSEM.PHON.ONSET con ].

be_nv_was_neg_2 := vc_nv_was_neg_le &
 [ STEM < "wasn", "'t" >,
   SYNSEM.PHON.ONSET con ].

be_nv_was_neg_subj_1 := vc_nv_was_neg_subj_le &
 [ STEM < "wasn't" >,
   SYNSEM.PHON.ONSET con ].

be_nv_was_neg_subj_2 := vc_nv_was_neg_subj_le &
 [ STEM < "wasn", "'t" >,
   SYNSEM.PHON.ONSET con ].

be_nv_was_subj := vc_nv_was_subj_le &
 [ STEM < "was" >,
   SYNSEM.PHON.ONSET con ].

be_nv_were := vc_nv_were_le &
 [ STEM < "were" >,
   SYNSEM.PHON.ONSET con ].

be_nv_were_neg_1 := vc_nv_were_neg_le &
 [ STEM < "weren't" >,
   SYNSEM.PHON.ONSET con ].

be_nv_were_neg_2 := vc_nv_were_neg_le &
 [ STEM < "weren", "'t" >,
   SYNSEM.PHON.ONSET con ].

be_nv_were_neg_subj_1 := vc_nv_were_neg_subj_le &
 [ STEM < "weren't" >,
   SYNSEM.PHON.ONSET con ].

be_nv_were_neg_subj_2 := vc_nv_were_neg_subj_le &
 [ STEM < "weren", "'t" >,
   SYNSEM.PHON.ONSET con ].

be_nv_were_subj := vc_nv_were_subj_le &
 [ STEM < "were" >,
   SYNSEM.PHON.ONSET con ].

be_th_cop_are := vc_there_are_le &
 [ STEM < "are" >,
   SYNSEM.PHON.ONSET voc ].

be_th_cop_are_neg_1 := vc_there_are_neg_le &
 [ STEM < "aren't" >,
   SYNSEM.PHON.ONSET voc ].

be_th_cop_are_neg_2 := vc_there_are_neg_le &
 [ STEM < "aren", "'t" >,
   SYNSEM.PHON.ONSET voc ].

be_th_cop_be := vc_there_be_le &
 [ STEM < "be" >,
   SYNSEM.PHON.ONSET con ].

be_th_cop_been := vc_there_been_le &
 [ STEM < "been" >,
   SYNSEM.PHON.ONSET con ].

be_th_cop_being := vc_there_being_le &
 [ STEM < "being" >,
   SYNSEM.PHON.ONSET con ].

be_th_cop_is := vc_there_is_le &
 [ STEM < "is" >,
   SYNSEM.PHON.ONSET voc ].

be_th_cop_is_cx := vc_there_s_cx_le &
 [ STEM < "s" >,
   SYNSEM.PHON.ONSET voc ].

be_th_cop_is_cx_2 := vc_there_s_cx_le &
 [ STEM < "'s" >,
   SYNSEM.PHON.ONSET con ].

be_th_cop_is_cx_neg_1 := vc_there_is_neg_noinv_le &
 [ STEM < "'s", "not" >,
   SYNSEM.PHON.ONSET onset ].

be_th_cop_is_neg_1 := vc_there_is_neg_le &
 [ STEM < "isn't" >,
   SYNSEM.PHON.ONSET voc ].

be_th_cop_is_neg_2 := vc_there_is_neg_le &
 [ STEM < "isn", "'t" >,
   SYNSEM.PHON.ONSET voc ].

be_th_cop_is_plur := vc_there_is_plur_le &
 [ STEM < "is" >,
   SYNSEM.PHON.ONSET voc ].

be_th_cop_was := vc_there_was_le &
 [ STEM < "was" >,
   SYNSEM.PHON.ONSET con ].

be_th_cop_was_neg_1 := vc_there_was_neg_le &
 [ STEM < "wasn't" >,
   SYNSEM.PHON.ONSET con ].

be_th_cop_was_neg_2 := vc_there_was_neg_le &
 [ STEM < "wasn", "'t" >,
   SYNSEM.PHON.ONSET con ].

be_th_cop_was_neg_subj_1 := vc_there_was_neg_subj_le &
 [ STEM < "wasn't" >,
   SYNSEM.PHON.ONSET con ].

be_th_cop_was_neg_subj_2 := vc_there_was_neg_subj_le &
 [ STEM < "wasn", "'t" >,
   SYNSEM.PHON.ONSET con ].

be_th_cop_was_subj := vc_there_was_subj_le &
 [ STEM < "was" >,
   SYNSEM.PHON.ONSET con ].

be_th_cop_were := vc_there_were_le &
 [ STEM < "were" >,
   SYNSEM.PHON.ONSET con ].

be_th_cop_were_neg_1 := vc_there_were_neg_le &
 [ STEM < "weren't" >,
   SYNSEM.PHON.ONSET con ].

be_th_cop_were_neg_2 := vc_there_were_neg_le &
 [ STEM < "weren", "'t" >,
   SYNSEM.PHON.ONSET con ].

be_th_cop_were_neg_subj_1 := vc_there_were_neg_subj_le &
 [ STEM < "weren't" >,
   SYNSEM.PHON.ONSET con ].

be_th_cop_were_neg_subj_2 := vc_there_were_neg_subj_le &
 [ STEM < "weren", "'t" >,
   SYNSEM.PHON.ONSET con ].

be_th_cop_were_subj := vc_there_were_subj_le &
 [ STEM < "were" >,
   SYNSEM.PHON.ONSET con ].

beach_n1 := n_intr_le &
 [ STEM < "beach" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_beach_n_1_rel",
            PHON.ONSET con ] ].

beach_v1 := v_np_trans_le &
 [ STEM < "beach" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_beach_v_1_rel",
            PHON.ONSET con ] ].

beacon_n1 := n_intr_le &
 [ STEM < "beacon" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_beacon_n_1_rel",
            PHON.ONSET con ] ].

beam_at_v1 := v_empty_prep_intrans_le &
 [ STEM < "beam" >,
   SYNSEM [ LKEYS [ --COMPKEY _at_p_sel_rel,
                    KEYREL.PRED "_beam_v_at_rel" ],
            PHON.ONSET con ] ].

beam_n1 := n_ppof_le &
 [ STEM < "beam" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_beam_n_of_rel",
            PHON.ONSET con ] ].

beam_out_v1 := v_particle_np_le &
 [ STEM < "beam" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_beam_v_out_rel" ],
            PHON.ONSET con ] ].

beam_v1 := v_np*_trans_le &
 [ STEM < "beam" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_beam_v_1_rel",
            PHON.ONSET con ] ].

beam_v2 := v_ditrans_le &
 [ STEM < "beam" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_beam_v_1_rel",
            PHON.ONSET con ] ].

bean_n1 := n_intr_le &
 [ STEM < "bean" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bean_n_1_rel",
            PHON.ONSET con ] ].

bear_n1 := n_intr_le &
 [ STEM < "bear" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bear_n_1_rel",
            PHON.ONSET con ] ].

bear_n2 := n_mass_kind_le &
 [ STEM < "bear" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bear_n_kind_rel",
            PHON.ONSET con ] ].

bear_out_v1 := v_particle_np_le &
 [ STEM < "bear" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_bear_v_out_rel" ],
            PHON.ONSET con ] ].

bear_v1 := v_np_trans_le &
 [ STEM < "bear" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bear_v_1_rel",
            PHON.ONSET con ] ].

bear_v2 := v_subj_equi_le &
 [ STEM < "bear" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bear_v_1_rel",
            PHON.ONSET voc ] ].

bear_v3 := v_prep_dir_le &
 [ STEM < "bear" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bear_v_1_rel",
            PHON.ONSET con ] ].

bear_with_v1 := v_empty_prep_intrans_le &
 [ STEM < "bear" >,
   SYNSEM [ LKEYS [ --COMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_bear_v_with_rel" ],
            PHON.ONSET con ] ].

bearable_a1 := adj_intrans_le &
 [ STEM < "bearable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bearable_a_1_rel",
            PHON.ONSET con ] ].

bearer_n1 := n_intr_le &
 [ STEM < "bearer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bearer_n_1_rel",
            PHON.ONSET con ] ].

bearing_n1 := n_mass_count_le &
 [ STEM < "bearing" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bearing_n_1_rel",
            PHON.ONSET con ] ].

beast_n1 := n_intr_le &
 [ STEM < "beast" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_beast_n_1_rel",
            PHON.ONSET con ] ].

beat_n1 := n_intr_le &
 [ STEM < "beat" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_beat_n_1_rel",
            PHON.ONSET con ] ].

beat_up_v1 := v_particle_np_le &
 [ STEM < "beat" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_beat_v_up_rel" ],
            PHON.ONSET con ] ].

beat_v1 := v_np*_trans_le &
 [ STEM < "beat" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_beat_v_to_rel",
            PHON.ONSET con ] ].

beat_v2 := v_to_trans_le &
 [ STEM < "beat" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_beat_v_to_rel",
            PHON.ONSET con ] ].

beautiful_a1 := adj_intrans_le &
 [ STEM < "beautiful" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_beautiful_a_1_rel",
            PHON.ONSET con ] ].

beautifully := adv_int_vp_post_le &
 [ STEM < "beautifully" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_beautiful_a_1_rel",
            PHON.ONSET con ] ].

beauty_n1 := n_mass_count_le &
 [ STEM < "beauty" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_beauty_n_1_rel",
            PHON.ONSET con ] ].

because := p_subconj_le &
 [ STEM < "because" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_because_x_rel",
            PHON.ONSET con ] ].

because_of_p := p_le &
 [ STEM < "because", "of" >,
   SYNSEM [ LKEYS.KEYREL.PRED _because+of_p_rel,
            PHON.ONSET con ] ].

becher_n1 := n_proper_le &
 [ STEM < "becher" >,
   SYNSEM [ LKEYS.KEYREL.CARG "becher",
            PHON.ONSET con ] ].

beckon_to_v1 := v_empty_prep_intrans_le &
 [ STEM < "beckon" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_beckon_v_to_rel" ],
            PHON.ONSET con ] ].

beckon_to_v2 := v_oeq_pp_inf_le &
 [ STEM < "beckon" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_beckon_v_to_rel" ],
            PHON.ONSET voc ] ].

beckon_v1 := v_to*_trans_le &
 [ STEM < "beckon" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_beckon_v_to_rel",
            PHON.ONSET con ] ].

beckon_v2 := v_unerg_le &
 [ STEM < "beckon" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_beckon_v_to_rel",
            PHON.ONSET con ] ].

become_of_v1 := v_empty_prep_intrans_le &
 [ STEM < "become" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_become_v_of_rel" ],
            PHON.ONSET con ] ].

become_v1 := v_prdp_pp_seq_adj_le &
 [ STEM < "become" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_become_v_to_rel",
            PHON.ONSET con ] ].

become_v2 := v_np_non_trans_id_le &
 [ STEM < "become" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_become_v_id_rel",
            PHON.ONSET con ] ].

become_v3 := v_nbar_le &
 [ STEM < "become" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_become_v_id_rel",
            PHON.ONSET con ] ].

bed_down_v1 := v_particle_np_le &
 [ STEM < "bed" >,
   SYNSEM [ LKEYS [ --COMPKEY _down_p_sel_rel,
                    KEYREL.PRED "_bed_v_down_rel" ],
            PHON.ONSET con ] ].

bed_i_n1 := n_bare_nomod_le &
 [ STEM < "bed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bed_n_1_rel",
            PHON.ONSET con ] ].

bed_n1 := n_intr_le &
 [ STEM < "bed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bed_n_1_rel",
            PHON.ONSET con ] ].

bed_v1 := v_np_trans_le &
 [ STEM < "bed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bed_v_1_rel",
            PHON.ONSET con ] ].

bedewed_a1 := adj_intrans_le &
 [ STEM < "bedewed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bedewed_a_1_rel",
            PHON.ONSET con ] ].

bedrock_n1 := n_mass_le &
 [ STEM < "bedrock" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bedrock_n_1_rel",
            PHON.ONSET con ] ].

bedroom_n1 := n_intr_le &
 [ STEM < "bedroom" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bedroom_n_1_rel",
            PHON.ONSET con ] ].

bee_n1 := n_intr_le &
 [ STEM < "bee" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bee_n_1_rel",
            PHON.ONSET con ] ].

beef_n1 := n_mass_le &
 [ STEM < "beef" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_beef_n_1_rel",
            PHON.ONSET con ] ].

beehive_n1 := n_proper_le &
 [ STEM < "beehive" >,
   SYNSEM [ LKEYS.KEYREL.CARG "beehive",
            PHON.ONSET con ] ].

beer_n1 := n_mass_count_le &
 [ STEM < "beer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_beer_n_1_rel",
            PHON.ONSET con ] ].

beethoven_n1 := n_proper_le &
 [ STEM < "beethoven" >,
   SYNSEM [ LKEYS.KEYREL.CARG "beethoven",
            PHON.ONSET con ] ].

beetle_n1 := n_intr_le &
 [ STEM < "beetle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_beetle_n_1_rel",
            PHON.ONSET con ] ].

befall_v1 := v_np_trans_le &
 [ STEM < "befall" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_befall_v_1_rel",
            PHON.ONSET con ] ].

befit_v1 := v_np_trans_le &
 [ STEM < "befit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_befit_v_1_rel",
            PHON.ONSET con ] ].

befitting_isect := adj_intrans_le &
 [ STEM < "befitting" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_befitting_a_1_rel",
            PHON.ONSET con ] ].

before2 := p_subconj_le &
 [ STEM < "before" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_before_x_h_rel",
            PHON.ONSET con ] ].

before3 := p_temp_spr_le &
 [ STEM < "before" >,
   SYNSEM [ LKEYS.KEYREL.PRED _before_p_rel,
            PHON.ONSET con ] ].

before_adv1 := pp_le &
 [ STEM < "before" >,
   SYNSEM [ LKEYS.KEYREL.PRED _before_p_rel,
            PHON.ONSET con ] ].

beforehand_adv1 := pp_le &
 [ STEM < "beforehand" >,
   SYNSEM [ LKEYS.KEYREL.PRED _beforehand_p_rel,
            PHON.ONSET con ] ].

beg_for_v1 := v_empty_prep_trans*_le &
 [ STEM < "beg" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_beg_v_for_rel" ],
            PHON.ONSET con ] ].

beg_off_v1 := v_particle_prp_le &
 [ STEM < "beg" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_beg_v_off_rel" ],
            PHON.ONSET con ] ].

beg_v1 := v_np*_trans_le &
 [ STEM < "beg" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_beg_v_1_rel",
            PHON.ONSET con ] ].

beg_v2 := v_obj_equi_le &
 [ STEM < "beg" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_beg_v_1_rel",
            PHON.ONSET voc ] ].

beg_v3 := v_subj_equi_le &
 [ STEM < "beg" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_beg_v_1_rel",
            PHON.ONSET voc ] ].

beg_v4 := v_anom_equi_le &
 [ STEM < "beg" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_beg_v_1_rel",
            PHON.ONSET con ] ].

beget_v1 := v_np_trans_le &
 [ STEM < "beget" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_beget_v_1_rel",
            PHON.ONSET con ] ].

beggar_n1 := n_intr_le &
 [ STEM < "beggar" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_beggar_n_1_rel",
            PHON.ONSET con ] ].

begin_quote_v1 := v_quote_top_le &
 [ STEM < "begin" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_begin_v_1_rel",
            PHON.ONSET voc ] ].

begin_quote_v2 := v_quote_inv_le &
 [ STEM < "begin" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_begin_v_1_rel",
            PHON.ONSET voc ] ].

begin_quote_v3 := v_quote_mc_le &
 [ STEM < "begin" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_begin_v_1_rel",
            PHON.ONSET voc ] ].

begin_v2 := v_np*_trans_le &
 [ STEM < "begin" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_begin_v_1_rel",
            PHON.ONSET con ] ].

begin_v3 := v_ssr_le &
 [ STEM < "begin" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_begin_v_1_rel",
            PHON.ONSET con ] ].

begin_v4 := v_ssr_prp_le &
 [ STEM < "begin" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_begin_v_1_rel",
            PHON.ONSET con ] ].

beginner_n1 := n_intr_le &
 [ STEM < "beginner" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_beginner_n_1_rel",
            PHON.ONSET con ] ].

beginning1 := n_intr_le &
 [ STEM < "beginning" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_beginning_n_1_rel",
            PHON.ONSET con ] ].

begone_v1 := v_unerg_imp_le &
 [ STEM < "begone" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_begone_v_1_rel",
            PHON.ONSET con ] ].

begonia_n1 := n_intr_le &
 [ STEM < "begonia" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_begonia_n_1_rel",
            PHON.ONSET con ] ].

begotten_a1 := adj_intrans_le &
 [ STEM < "begotten" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_begotten_a_1_rel",
            PHON.ONSET con ] ].

begrudge1 := v_ditrans_only_le &
 [ STEM < "begrudge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_begrudge_v_1_rel",
            PHON.ONSET con ] ].

beguiling_a1 := adj_intrans_le &
 [ STEM < "beguiling" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_beguiling_a_1_rel",
            PHON.ONSET con ] ].

behalf_n1 := n_intr_sg_le &
 [ STEM < "behalf" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_behalf_n_1_rel",
            PHON.ONSET con ] ].

behave_adv_v1 := v_adv_le &
 [ STEM < "behave" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_behave_v_1_rel",
            PHON.ONSET con ] ].

behave_v1 := v_unerg_le &
 [ STEM < "behave" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_behave_v_1_rel",
            PHON.ONSET con ] ].

behave_v2 := v_cp_like_non_trans_le &
 [ STEM < "behave" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_behave_v_1_rel",
            PHON.ONSET con ] ].

behavior_n1 := n_mass_count_le &
 [ STEM < "behavior" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_behavior_n_1_rel",
            PHON.ONSET con ] ].

behead_v1 := v_np_trans_le &
 [ STEM < "behead" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_behead_v_1_rel",
            PHON.ONSET con ] ].

behind := p_reg_le &
 [ STEM < "behind" >,
   SYNSEM [ LKEYS.KEYREL.PRED _behind_p_rel,
            PHON.ONSET con ] ].

behind_adv := pp_le &
 [ STEM < "behind" >,
   SYNSEM [ LKEYS.KEYREL.PRED _behind_p_rel,
            PHON.ONSET con ] ].

behind_prtcl := p_prtcl_le &
 [ STEM < "behind" >,
   SYNSEM [ LKEYS.KEYREL.PRED _behind_p_sel_rel,
            PHON.ONSET con ] ].

behold_v1 := v_np*_trans_le &
 [ STEM < "behold" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_behold_v_1_rel",
            PHON.ONSET con ] ].

beijing_n1 := n_proper_city_le &
 [ STEM < "beijing" >,
   SYNSEM [ LKEYS.KEYREL.CARG "beijing",
            PHON.ONSET con ] ].

being_i_n1 := n_bare_nomod_le &
 [ STEM < "being" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_being_n_i_rel",
            PHON.ONSET con ] ].

being_n1 := n_intr_le &
 [ STEM < "being" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_being_n_1_rel",
            PHON.ONSET con ] ].

beito_n1 := n_proper_le &
 [ STEM < "beito" >,
   SYNSEM [ LKEYS.KEYREL.CARG "beito",
            PHON.ONSET con ] ].

beitostÃ¸len_n1 := n_proper_le &
 [ STEM < "beitostÃ¸len" >,
   SYNSEM [ LKEYS.KEYREL.CARG "beitostÃ¸len",
            PHON.ONSET con ] ].

beixingming_n1 := n_proper_le &
 [ STEM < "beixingming" >,
   SYNSEM [ LKEYS.KEYREL.CARG "beixingming",
            PHON.ONSET con ] ].

belay_n1 := n_intr_le &
 [ STEM < "belay" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_belay_n_1_rel",
            PHON.ONSET con ] ].

belay_v1 := v_np_trans_le &
 [ STEM < "belay" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_belay_v_1_rel",
            PHON.ONSET con ] ].

belch_v1 := v_unerg_le &
 [ STEM < "belch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_belch_v_1_rel",
            PHON.ONSET con ] ].

belgian_a1 := adj_intrans_le &
 [ STEM < "belgian" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_belgian_a_1_rel",
            PHON.ONSET con ] ].

belgian_n1 := n_intr_le &
 [ STEM < "belgian" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_belgian_n_1_rel",
            PHON.ONSET con ] ].

belgian_n2 := n_proper_le &
 [ STEM < "belgian" >,
   SYNSEM [ LKEYS.KEYREL.CARG "belgian",
            PHON.ONSET con ] ].

belgium_n1 := n_proper_le &
 [ STEM < "belgium" >,
   SYNSEM [ LKEYS.KEYREL.CARG "belgium",
            PHON.ONSET con ] ].

belief_n1 := n_cpcomp_fin_le &
 [ STEM < "belief" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_belief_n_in_rel",
            PHON.ONSET con ] ].

belief_n2 := n_ppcomp_le &
 [ STEM < "belief" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_belief_n_in_rel" ],
            PHON.ONSET con ] ].

believe_in_v1 := v_empty_prep_intrans_le &
 [ STEM < "believe" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_believe_v_in_rel" ],
            PHON.ONSET con ] ].

believe_v1 := v_np*_trans_le &
 [ STEM < "believe" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_believe_v_1_rel",
            PHON.ONSET con ] ].

believe_v3 := v_cp_non_trans_le &
 [ STEM < "believe" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_believe_v_1_rel",
            PHON.ONSET con ] ].

believe_v4 := v_sor_le &
 [ STEM < "believe" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_believe_v_1_rel",
            PHON.ONSET con ] ].

believer_n1 := n_intr_le &
 [ STEM < "believer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_believer_n_1_rel",
            PHON.ONSET con ] ].

belittlement_n1 := n_mass_le &
 [ STEM < "belittlement" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_belittlement_n_1_rel",
            PHON.ONSET con ] ].

belize_n1 := n_proper_le &
 [ STEM < "belize" >,
   SYNSEM [ LKEYS.KEYREL.CARG "belize",
            PHON.ONSET con ] ].

bell_n1 := n_intr_le &
 [ STEM < "bell" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bell_n_1_rel",
            PHON.ONSET con ] ].

bell_n2 := n_proper_le &
 [ STEM < "bell" >,
   SYNSEM [ LKEYS.KEYREL.CARG "bell",
            PHON.ONSET con ] ].

belle := n_proper_le &
 [ STEM < "belle" >,
   SYNSEM [ LKEYS.KEYREL.CARG "belle",
            PHON.ONSET con ] ].

bellefonte_n1 := n_proper_le &
 [ STEM < "bellefonte" >,
   SYNSEM [ LKEYS.KEYREL.CARG "bellefonte",
            PHON.ONSET con ] ].

bellow_at_v1 := v_empty_prep_intrans_le &
 [ STEM < "bellow" >,
   SYNSEM [ LKEYS [ --COMPKEY _at_p_sel_rel,
                    KEYREL.PRED "_bellow_v_at_rel" ],
            PHON.ONSET con ] ].

bellow_n1 := n_intr_le &
 [ STEM < "bellow" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bellow_n_1_rel",
            PHON.ONSET con ] ].

bellow_v1 := v_np*_trans_le &
 [ STEM < "bellow" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bellow_v_1_rel",
            PHON.ONSET con ] ].

bellow_v2 := v_cp_non_trans_le &
 [ STEM < "bellow" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bellow_v_1_rel",
            PHON.ONSET con ] ].

bellows_n2 := n_plur_le &
 [ STEM < "bellow" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bellows_n_1_rel",
            PHON.ONSET con ] ].

belong_v1 := v_empty_prep_intrans_le &
 [ STEM < "belong" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_belong_v_to_rel" ],
            PHON.ONSET con ] ].

belong_v2 := v_unerg_le &
 [ STEM < "belong" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_belong_v_to_rel",
            PHON.ONSET con ] ].

beloved_a1 := adj_intrans_le &
 [ STEM < "beloved" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_beloved_a_1_rel",
            PHON.ONSET con ] ].

below := p_reg_le &
 [ STEM < "below" >,
   SYNSEM [ LKEYS.KEYREL.PRED _below_p_rel,
            PHON.ONSET con ] ].

below_adv1 := pp_le &
 [ STEM < "below" >,
   SYNSEM [ LKEYS.KEYREL.PRED _below_p_rel,
            PHON.ONSET con ] ].

below_dollar_adj := adj_dollar_le &
 [ STEM < "below" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_below_a_dollar_rel",
            PHON.ONSET con ] ].

belt_n1 := n_intr_le &
 [ STEM < "belt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_belt_n_1_rel",
            PHON.ONSET con ] ].

ben_n1 := n_proper_le &
 [ STEM < "ben" >,
   SYNSEM [ LKEYS.KEYREL.CARG "ben",
            PHON.ONSET con ] ].

bench_n1 := n_intr_le &
 [ STEM < "bench" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bench_n_1_rel",
            PHON.ONSET con ] ].

bend_n1 := n_intr_le &
 [ STEM < "bend" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bend_n_1_rel",
            PHON.ONSET con ] ].

bend_v1 := v_np*_trans_le &
 [ STEM < "bend" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bend_v_1_rel",
            PHON.ONSET con ] ].

beneath := p_reg_le &
 [ STEM < "beneath" >,
   SYNSEM [ LKEYS.KEYREL.PRED _beneath_p_rel,
            PHON.ONSET con ] ].

beneath_pp := pp_le &
 [ STEM < "beneath" >,
   SYNSEM [ LKEYS.KEYREL.PRED _beneath_p_rel,
            PHON.ONSET con ] ].

benediction_n1 := n_mass_count_le &
 [ STEM < "benediction" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_benediction_n_1_rel",
            PHON.ONSET con ] ].

beneficial_a1 := adj_intrans_le &
 [ STEM < "beneficial" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_beneficial_a_1_rel",
            PHON.ONSET con ] ].

beneficiary_n1 := n_intr_le &
 [ STEM < "beneficiary" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_beneficiary_n_1_rel",
            PHON.ONSET con ] ].

benefit_n1 := n_mass_count_ppof_le &
 [ STEM < "benefit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_benefit_n_of_rel",
            PHON.ONSET con ] ].

benefit_v1 := v_np_trans_le &
 [ STEM < "benefit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_benefit_v_1_rel",
            PHON.ONSET con ] ].

benefit_v2 := v_empty_prep_intrans_le &
 [ STEM < "benefit" >,
   SYNSEM [ LKEYS [ --COMPKEY _from_p_sel_rel,
                    KEYREL.PRED "_benefit_v_from_rel" ],
            PHON.ONSET con ] ].

benevolence_n1 := n_mass_count_le &
 [ STEM < "benevolence" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_benevolence_n_1_rel",
            PHON.ONSET con ] ].

benevolent_a1 := adj_intrans_le &
 [ STEM < "benevolent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_benevolent_a_1_rel",
            PHON.ONSET con ] ].

bengal_a1 := adj_intrans_le &
 [ STEM < "bengal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bengal_a_1_rel",
            PHON.ONSET con ] ].

benign_a1 := adj_intrans_le &
 [ STEM < "benign" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_benign_a_1_rel",
            PHON.ONSET con ] ].

benignant_a1 := adj_intrans_le &
 [ STEM < "benignant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_benignant_a_1_rel",
            PHON.ONSET con ] ].

bequeath_v1 := v_ditrans_le &
 [ STEM < "bequeath" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bequeath_v_1_rel",
            PHON.ONSET con ] ].

bequeath_v2 := v_np_trans_le &
 [ STEM < "bequeath" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bequeath_v_1_rel",
            PHON.ONSET con ] ].

bequest_n1 := n_intr_le &
 [ STEM < "bequest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bequest_n_1_rel",
            PHON.ONSET con ] ].

berate_v1 := v_np_trans_le &
 [ STEM < "berate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_berate_v_1_rel",
            PHON.ONSET con ] ].

bereave_v1 := v_empty_prep_trans_le &
 [ STEM < "bereave" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_bereave_v_of_rel" ],
            PHON.ONSET con ] ].

berekvam := n_proper_le &
 [ STEM < "berekvam" >,
   SYNSEM [ LKEYS.KEYREL.CARG "berekvam",
            PHON.ONSET con ] ].

berg := n_proper_le &
 [ STEM < "berg" >,
   SYNSEM [ LKEYS.KEYREL.CARG "berg",
            PHON.ONSET con ] ].

bergaÃ¥ntjern_n1 := n_proper_le &
 [ STEM < "bergaÃ¥ntjern" >,
   SYNSEM [ LKEYS.KEYREL.CARG "bergaÃ¥ntjern",
            PHON.ONSET con ] ].

bergaÃ¥ntjÃ¸rn_n1 := n_proper_le &
 [ STEM < "bergaÃ¥ntjÃ¸rn" >,
   SYNSEM [ LKEYS.KEYREL.CARG "bergaÃ¥ntjÃ¸rn",
            PHON.ONSET con ] ].

berge_n1 := n_proper_le &
 [ STEM < "berge" >,
   SYNSEM [ LKEYS.KEYREL.CARG "berge",
            PHON.ONSET con ] ].

bergedalen := n_proper_le &
 [ STEM < "bergedalen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "bergedalen",
            PHON.ONSET con ] ].

bergedalsbekken := n_proper_le &
 [ STEM < "bergedalsbekken" >,
   SYNSEM [ LKEYS.KEYREL.CARG "bergedalsbekken",
            PHON.ONSET con ] ].

bergen_n1 := n_proper_city_le &
 [ STEM < "bergen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "bergen",
            PHON.ONSET con ] ].

bergman_n1 := n_proper_le &
 [ STEM < "bergman" >,
   SYNSEM [ LKEYS.KEYREL.CARG "bergman",
            PHON.ONSET con ] ].

bergo_n1 := n_proper_le &
 [ STEM < "bergo" >,
   SYNSEM [ LKEYS.KEYREL.CARG "bergo",
            PHON.ONSET con ] ].

berkeley_n1 := n_proper_city_le &
 [ STEM < "berkeley" >,
   SYNSEM [ LKEYS.KEYREL.CARG "berkeley",
            PHON.ONSET con ] ].

berlin_n1 := n_proper_city_le &
 [ STEM < "berlin" >,
   SYNSEM [ LKEYS.KEYREL.CARG "berlin",
            PHON.ONSET con ] ].

bernt_n1 := n_proper_le &
 [ STEM < "bernt" >,
   SYNSEM [ LKEYS.KEYREL.CARG "bernt",
            PHON.ONSET con ] ].

berry_n1 := n_intr_le &
 [ STEM < "berry" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_berry_n_1_rel",
            PHON.ONSET con ] ].

berteau_n1 := n_proper_le &
 [ STEM < "berteau" >,
   SYNSEM [ LKEYS.KEYREL.CARG "berteau",
            PHON.ONSET con ] ].

berth_n1 := n_intr_le &
 [ STEM < "berth" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_berth_n_1_rel",
            PHON.ONSET con ] ].

berth_v1 := v_np*_trans_le &
 [ STEM < "berth" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_berth_v_1_rel",
            PHON.ONSET con ] ].

beset_v1 := v_empty_prep*_trans_le &
 [ STEM < "beset" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_beset_v_with_rel" ],
            PHON.ONSET con ] ].

beside := p_reg_le &
 [ STEM < "beside" >,
   SYNSEM [ LKEYS.KEYREL.PRED _beside_p_rel,
            PHON.ONSET con ] ].

besides := p_le &
 [ STEM < "besides" >,
   SYNSEM [ LKEYS.KEYREL.PRED _besides_p_rel,
            PHON.ONSET con ] ].

besides_adv1 := adv_s_post_word_nospec_le &
 [ STEM < "besides" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_besides_a_1_rel",
            PHON.ONSET con ] ].

besides_adv2 := adv_s_pre_word_root_le &
 [ STEM < "besides" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_besides_a_1_rel",
            PHON.ONSET con ] ].

besiege_v1 := v_np_trans_le &
 [ STEM < "besiege" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_besiege_v_1_rel",
            PHON.ONSET con ] ].

bessegen := n_proper_le &
 [ STEM < "bessegen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "bessegen",
            PHON.ONSET con ] ].

besseggen_n1 := n_proper_city_le &
 [ STEM < "besseggen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "besseggen",
            PHON.ONSET con ] ].

besseter_n1 := n_proper_le &
 [ STEM < "besseter" >,
   SYNSEM [ LKEYS.KEYREL.CARG "besseter",
            PHON.ONSET con ] ].

bessheim_n1 := n_proper_le &
 [ STEM < "bessheim" >,
   SYNSEM [ LKEYS.KEYREL.CARG "bessheim",
            PHON.ONSET con ] ].

besshÃ¸_n1 := n_proper_le &
 [ STEM < "besshÃ¸" >,
   SYNSEM [ LKEYS.KEYREL.CARG "besshÃ¸",
            PHON.ONSET con ] ].

besstrond_n1 := n_proper_le &
 [ STEM < "besstrond" >,
   SYNSEM [ LKEYS.KEYREL.CARG "besstrond",
            PHON.ONSET con ] ].

besstrondrundhÃ¸_n1 := n_proper_le &
 [ STEM < "besstrondrundhÃ¸" >,
   SYNSEM [ LKEYS.KEYREL.CARG "besstrondrundhÃ¸",
            PHON.ONSET con ] ].

bessvastn_n1 := n_proper_le &
 [ STEM < "bessvastn" >,
   SYNSEM [ LKEYS.KEYREL.CARG "bessvastn",
            PHON.ONSET con ] ].

bessvatn := n_proper_le &
 [ STEM < "bessvatn" >,
   SYNSEM [ LKEYS.KEYREL.CARG "bessvatn",
            PHON.ONSET con ] ].

bessvatnet := n_proper_le &
 [ STEM < "bessvatnet" >,
   SYNSEM [ LKEYS.KEYREL.CARG "bessvatnet",
            PHON.ONSET con ] ].

best-western_n1 := n_intr_named_le &
 [ STEM < "best", "western" >,
   SYNSEM [ LKEYS.KEYREL.CARG "best-western",
            PHON.ONSET con ] ].

best_a1 := adj_superl_le &
 [ STEM < "best" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_good_a_for_rel",
            PHON.ONSET con ] ].

best_a4 := adj_reg_atrans_le &
 [ STEM < "best" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_best_a_1_rel",
            PHON.ONSET con ] ].

best_adv1 := adv_int_vp_pre_le &
 [ STEM < "best" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_best_a_1_rel",
            PHON.ONSET con ] ].

best_adv2 := adv_int_vp_post_nonmob_le &
 [ STEM < "best" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_best_a_1_rel",
            PHON.ONSET con ] ].

best_known_a1 := adj_superl_le &
 [ STEM < "best", "known" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_well+known_a_1_rel",
            PHON.ONSET con ] ].

best_of_all_adv1 := adv_int_vp_post_le &
 [ STEM < "best", "of", "all" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_best+of+all_a_1_rel",
            PHON.ONSET con ] ].

best_off_a1 := adj_superl_le &
 [ STEM < "best", "off" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_well+off_a_1_rel",
            PHON.ONSET con ] ].

best_selling_a1 := adj_attr_intrans_le &
 [ STEM < "best", "selling" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_best+selling_a_1_rel",
            PHON.ONSET con ] ].

best_selling_a2 := adj_attr_intrans_le &
 [ STEM < "best-", "selling" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_best+selling_a_1_rel",
            PHON.ONSET con ] ].

bestow_v1 := v_empty_prep*_trans_le &
 [ STEM < "bestow" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_bestow_v_on_rel" ],
            PHON.ONSET con ] ].

bestride_v1 := v_np_trans_le &
 [ STEM < "bestride" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bestride_v_1_rel",
            PHON.ONSET con ] ].

bestrond_n1 := n_proper_le &
 [ STEM < "bestrond" >,
   SYNSEM [ LKEYS.KEYREL.CARG "bestrond",
            PHON.ONSET con ] ].

bestseller_n1 := n_intr_le &
 [ STEM < "bestseller" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bestseller_n_1_rel",
            PHON.ONSET con ] ].

besvatn_n1 := n_proper_le &
 [ STEM < "besvatn" >,
   SYNSEM [ LKEYS.KEYREL.CARG "besvatn",
            PHON.ONSET con ] ].

bet_n1 := n_intr_le &
 [ STEM < "bet" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bet_n_1_rel",
            PHON.ONSET con ] ].

bet_on_v1 := v_empty_prep_trans*_le &
 [ STEM < "bet" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_bet_v_on_rel" ],
            PHON.ONSET con ] ].

bet_v1 := v_np_np_cp_le &
 [ STEM < "bet" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bet_v_on_rel",
            PHON.ONSET con ] ].

betake_v1 := v_np_trans_le &
 [ STEM < "betake" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_betake_v_1_rel",
            PHON.ONSET con ] ].

betoken_v1 := v_np_trans_le &
 [ STEM < "betoken" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_betoken_v_1_rel",
            PHON.ONSET con ] ].

betray_v1 := v_to*_trans_le &
 [ STEM < "betray" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_betray_v_to_rel",
            PHON.ONSET con ] ].

betsy_n1 := n_proper_le &
 [ STEM < "betsy" >,
   SYNSEM [ LKEYS.KEYREL.CARG "betsy",
            PHON.ONSET con ] ].

better_a1 := adj_comp_le &
 [ STEM < "better" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_good_a_for_rel",
            PHON.ONSET con ] ].

better_adv1 := adv_int_vp_post_le &
 [ STEM < "better" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_better_a_1_rel",
            PHON.ONSET con ] ].

better_aux := va_modal_pos_noninv_le &
 [ STEM < "better" >,
   SYNSEM [ LKEYS.KEYREL.PRED _had+better_v_modal_rel,
            PHON.ONSET con ] ].

better_known_a1 := adj_comp_le &
 [ STEM < "better", "known" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_well+known_a_1_rel",
            PHON.ONSET con ] ].

better_off_a1 := adj_comp_le &
 [ STEM < "better", "off" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_well+off_a_1_rel",
            PHON.ONSET con ] ].

between := p_le &
 [ STEM < "between" >,
   SYNSEM [ LKEYS.KEYREL.PRED _between_p_rel,
            PHON.ONSET con ] ].

between_prtcl := p_prtcl_le &
 [ STEM < "between" >,
   SYNSEM [ LKEYS.KEYREL.PRED _between_p_sel_rel,
            PHON.ONSET con ] ].

betwixt := p_le &
 [ STEM < "betwixt" >,
   SYNSEM [ LKEYS.KEYREL.PRED _betwixt_p_rel,
            PHON.ONSET con ] ].

beware_v1 := v_np*_trans_nonfin_le &
 [ STEM < "beware" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_beware_v_1_rel",
            PHON.ONSET con ] ].

beware_v2 := v_empty_prep_nonfin_le &
 [ STEM < "beware" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_beware_v_1_rel" ],
            PHON.ONSET con ] ].

bewilder_v1 := v_np_trans_le &
 [ STEM < "bewilder" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bewilder_v_1_rel",
            PHON.ONSET con ] ].

bewitch_v1 := v_np_trans_le &
 [ STEM < "bewitch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bewitch_v_1_rel",
            PHON.ONSET con ] ].

beyond := p_reg_le &
 [ STEM < "beyond" >,
   SYNSEM [ LKEYS.KEYREL.PRED _beyond_p_rel,
            PHON.ONSET con ] ].

beyond_nom := n_adv_pl_le &
 [ STEM < "beyond" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED _beyond_p_rel,
                    KEYREL.PRED place_n_rel ],
            PHON.ONSET con ] ].

bhiksuni_n1 := n_proper_le &
 [ STEM < "bhiksuni" >,
   SYNSEM [ LKEYS.KEYREL.CARG "bhiksuni",
            PHON.ONSET con ] ].

bias_n1 := n_mass_count_le &
 [ STEM < "bias" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bias_n_1_rel",
            PHON.ONSET con ] ].

bias_v1 := v_empty_prep*_trans_le &
 [ STEM < "bias" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _against_p_sel_rel,
                    KEYREL.PRED "_bias_v_against_rel" ],
            PHON.ONSET con ] ].

bias_v2 := v_empty_prep_trans_le &
 [ STEM < "bias" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _towards_p_sel_rel,
                    KEYREL.PRED "_bias_v_towards_rel" ],
            PHON.ONSET con ] ].

bible_n1 := n_intr_le &
 [ STEM < "bible" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bible_n_1_rel",
            PHON.ONSET con ] ].

bibliographer_n1 := n_intr_le &
 [ STEM < "bibliographer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bibliographer_n_1_rel",
            PHON.ONSET con ] ].

bicycle_n1 := n_intr_le &
 [ STEM < "bicycle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bicycle_n_1_rel",
            PHON.ONSET con ] ].

bicycle_v1 := v_unerg_le &
 [ STEM < "bicycle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bicycle_v_1_rel",
            PHON.ONSET con ] ].

bicyclist_n1 := n_intr_le &
 [ STEM < "bicyclist" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bicyclist_n_1_rel",
            PHON.ONSET con ] ].

bid_n1 := n_intr_le &
 [ STEM < "bid" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bid_n_1_rel",
            PHON.ONSET con ] ].

bid_v1 := v_obj_equi_le &
 [ STEM < "bid" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bid_v_1_rel",
            PHON.ONSET con ] ].

bid_v2 := v_np_trans_le &
 [ STEM < "bid" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bid_v_1_rel",
            PHON.ONSET con ] ].

bid_v3 := v_subj_equi_le &
 [ STEM < "bid" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bid_v_1_rel",
            PHON.ONSET voc ] ].

bidder_n1 := n_intr_le &
 [ STEM < "bidder" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bidder_n_1_rel",
            PHON.ONSET con ] ].

bielefeld_n1 := n_proper_city_le &
 [ STEM < "bielefeld" >,
   SYNSEM [ LKEYS.KEYREL.CARG "bielefeld",
            PHON.ONSET con ] ].

big_a1 := adj_intrans_le &
 [ STEM < "big" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_big_a_1_rel",
            PHON.ONSET con ] ].

big_ass_a1 := adj_intrans_le &
 [ STEM < "big", "ass" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_big+ass_a_1_rel",
            PHON.ONSET con ] ].

big_mac_n1 := n_intr_le &
 [ STEM < "big", "mac" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_big+mac_n_1_rel",
            PHON.ONSET con ] ].

bigger_a1 := adj_comp_le &
 [ STEM < "bigger" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_big_a_1_rel",
            PHON.ONSET con ] ].

biggest := adj_superl_le &
 [ STEM < "biggest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_big_a_1_rel",
            PHON.ONSET con ] ].

bike_n1 := n_intr_le &
 [ STEM < "bike" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bike_n_1_rel",
            PHON.ONSET con ] ].

bike_v1 := v_prep_dir_le &
 [ STEM < "bike" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bike_v_1_rel",
            PHON.ONSET con ] ].

biker_n1 := n_intr_le &
 [ STEM < "biker" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_biker_n_1_rel",
            PHON.ONSET con ] ].

bikini_n1 := n_intr_le &
 [ STEM < "bikini" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bikini_n_1_rel",
            PHON.ONSET con ] ].

bilberry_n1 := n_intr_le &
 [ STEM < "bilberry" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bilberry_n_1_rel",
            PHON.ONSET con ] ].

bill := n_proper_le &
 [ STEM < "bill" >,
   SYNSEM [ LKEYS.KEYREL.CARG "bill",
            PHON.ONSET con ] ].

bill_for_v1 := v_empty_prep*_trans_le &
 [ STEM < "bill" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_bill_v_for_rel" ],
            PHON.ONSET con ] ].

bill_n1 := n_intr_le &
 [ STEM < "bill" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bill_n_1_rel",
            PHON.ONSET con ] ].

billet_n1 := n_intr_le &
 [ STEM < "billet" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_billet_n_1_rel",
            PHON.ONSET con ] ].

billiards_n1 := n_plur_le &
 [ STEM < "billiard" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_billiards_n_1_rel",
            PHON.ONSET con ] ].

billing_n1 := n_mass_count_le &
 [ STEM < "billing" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_billing_n_1_rel",
            PHON.ONSET con ] ].

billion := adj_bare_specified_card_billion_le &
 [ STEM < "billion" >,
   SYNSEM [ LKEYS.KEYREL.CARG "1000000000",
            PHON.ONSET con ] ].

billion_comps := adj_complemented_specified_card_billion_le &
 [ STEM < "billion" >,
   SYNSEM [ LKEYS.KEYREL.CARG "1000000000",
            PHON.ONSET con ] ].

billions_n1 := n_plur_xmod_le &
 [ STEM < "billions" >,
   SYNSEM [ LKEYS.KEYREL.CARG "1000000000",
            PHON.ONSET con ] ].

billions_n2 := n_plur_ppcomp_card_le &
 [ STEM < "billions" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.CARG "1000000000" ],
            PHON.ONSET con ] ].

billow_n1 := n_intr_le &
 [ STEM < "billow" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_billow_n_1_rel",
            PHON.ONSET con ] ].

billow_v1 := v_unerg_le &
 [ STEM < "billow" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_billow_v_1_rel",
            PHON.ONSET con ] ].

billy_n1 := n_proper_le &
 [ STEM < "billy" >,
   SYNSEM [ LKEYS.KEYREL.CARG "billy",
            PHON.ONSET con ] ].

biloxi_n1 := n_proper_city_le &
 [ STEM < "biloxi" >,
   SYNSEM [ LKEYS.KEYREL.CARG "biloxi",
            PHON.ONSET con ] ].

bimonthly_adv := adv_int_vp_le &
 [ STEM < "bimonthly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bimonth_a_1_rel",
            PHON.ONSET con ] ].

bimonthly_isect := adj_intrans_le &
 [ STEM < "bimonthly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bimonth_a_1_rel",
            PHON.ONSET con ] ].

bin_n1 := n_intr_le &
 [ STEM < "bin" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bin_n_1_rel",
            PHON.ONSET con ] ].

binary_a1 := adj_intrans_le &
 [ STEM < "binary" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_binary_a_1_rel",
            PHON.ONSET con ] ].

bind_n1 := n_intr_le &
 [ STEM < "bind" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bind_n_1_rel",
            PHON.ONSET con ] ].

bind_v1 := v_to*_trans_le &
 [ STEM < "bind" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bind_v_to_rel",
            PHON.ONSET con ] ].

bindery_n1 := n_intr_le &
 [ STEM < "bindery" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bindery_n_1_rel",
            PHON.ONSET con ] ].

binding_a1 := adj_intrans_le &
 [ STEM < "binding" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_binding_a_1_rel",
            PHON.ONSET con ] ].

bingo_n1 := n_intr_le &
 [ STEM < "bingo" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bingo_n_1_rel",
            PHON.ONSET con ] ].

binoculars_n1 := n_plur_le &
 [ STEM < "binocular" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_binoculars_n_1_rel",
            PHON.ONSET con ] ].

biochemist_n1 := n_intr_le &
 [ STEM < "biochemist" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_biochemist_n_1_rel",
            PHON.ONSET con ] ].

biographer_n1 := n_intr_le &
 [ STEM < "biographer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_biographer_n_1_rel",
            PHON.ONSET con ] ].

biography_n1 := n_intr_le &
 [ STEM < "biography" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_biography_n_1_rel",
            PHON.ONSET con ] ].

biological_isect := adj_intrans_le &
 [ STEM < "biological" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_biological_a_1_rel",
            PHON.ONSET con ] ].

biologically := adv_int_vp_le &
 [ STEM < "biologically" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_biological_a_1_rel",
            PHON.ONSET con ] ].

biology_n1 := n_mass_le &
 [ STEM < "biology" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_biology_n_1_rel",
            PHON.ONSET con ] ].

biomedicine_n1 := n_mass_le &
 [ STEM < "biomedicine" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_biomedicine_n_1_rel",
            PHON.ONSET con ] ].

biped_n1 := n_intr_le &
 [ STEM < "biped" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_biped_n_1_rel",
            PHON.ONSET con ] ].

birch_n1 := n_intr_le &
 [ STEM < "birch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_birch_n_1_rel",
            PHON.ONSET con ] ].

bird_n1 := n_intr_le &
 [ STEM < "bird" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bird_n_1_rel",
            PHON.ONSET con ] ].

birdland_n1 := n_proper_le &
 [ STEM < "birdland" >,
   SYNSEM [ LKEYS.KEYREL.CARG "birdland",
            PHON.ONSET con ] ].

birds_eye_a1 := adj_attr_intrans_le &
 [ STEM < "bird", "'s", "eye" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_birds+eye_a_1_rel",
            PHON.ONSET con ] ].

birds_eye_a2 := adj_attr_intrans_le &
 [ STEM < "birds", "eye" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_birds+eye_a_1_rel",
            PHON.ONSET con ] ].

birdwatch_v1 := v_unerg_le &
 [ STEM < "birdwatch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_birdwatch_v_1_rel",
            PHON.ONSET con ] ].

birth_n1 := n_mass_count_le &
 [ STEM < "birth" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_birth_n_1_rel",
            PHON.ONSET con ] ].

birthday_n1 := n_intr_le &
 [ STEM < "birthday" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_birthday_n_1_rel",
            PHON.ONSET con ] ].

birthplace_n1 := n_intr_le &
 [ STEM < "birthplace" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_birthplace_n_1_rel",
            PHON.ONSET con ] ].

birv_nd := n_proper_le &
 [ STEM < "birv" >,
   SYNSEM [ LKEYS.KEYREL.CARG "birv",
            PHON.ONSET con ] ].

biscuit_n1 := n_intr_le &
 [ STEM < "biscuit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_biscuit_n_1_rel",
            PHON.ONSET con ] ].

biscuit_n2 := n_intr_le &
 [ STEM < "bisquit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_biscuit_n_1_rel",
            PHON.ONSET con ] ].

bishop_n1 := n_intr_le &
 [ STEM < "bishop" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bishop_n_1_rel",
            PHON.ONSET con ] ].

bismuth_n1 := n_mass_le &
 [ STEM < "bismuth" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bismuth_n_1_rel",
            PHON.ONSET con ] ].

bistro_n1 := n_intr_le &
 [ STEM < "bistro" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bistro_n_1_rel",
            PHON.ONSET con ] ].

bit_n1 := n_meas_le &
 [ STEM < "bit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bit_n_1_rel",
            PHON.ONSET con ] ].

bite_n1 := n_ppof_le &
 [ STEM < "bite" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bite_n_of_rel",
            PHON.ONSET con ] ].

bite_sized_a1 := adj_intrans_le &
 [ STEM < "bite-", "sized" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bite-sized_a_1_rel",
            PHON.ONSET con ] ].

bite_v1 := v_np*_trans_le &
 [ STEM < "bite" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bite_v_1_rel",
            PHON.ONSET con ] ].

bitigrenda_n1 := n_proper_le &
 [ STEM < "bitigrenda" >,
   SYNSEM [ LKEYS.KEYREL.CARG "bitigrenda",
            PHON.ONSET con ] ].

bitihorn_n1 := n_proper_le &
 [ STEM < "bitihorn" >,
   SYNSEM [ LKEYS.KEYREL.CARG "bitihorn",
            PHON.ONSET con ] ].

bitter_isect := adj_intrans_le &
 [ STEM < "bitter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bitter_a_1_rel",
            PHON.ONSET con ] ].

bitterfeld_n1 := n_proper_city_le &
 [ STEM < "bitterfeld" >,
   SYNSEM [ LKEYS.KEYREL.CARG "bitterfeld",
            PHON.ONSET con ] ].

bitterly_vdeg := adv_degree_spec_v_le &
 [ STEM < "bitterly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bitterly_x_deg_rel",
            PHON.ONSET con ] ].

bitterness_n1 := n_mass_le &
 [ STEM < "bitterness" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bitterness_n_1_rel",
            PHON.ONSET con ] ].

bivalve_n1 := n_intr_le &
 [ STEM < "bivalve" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bivalve_n_1_rel",
            PHON.ONSET con ] ].

bjorn_n1 := n_proper_le &
 [ STEM < "bjorn" >,
   SYNSEM [ LKEYS.KEYREL.CARG "bjorn",
            PHON.ONSET con ] ].

bjorndalsnuten := n_proper_le &
 [ STEM < "bjorndalsnuten" >,
   SYNSEM [ LKEYS.KEYREL.CARG "bjorndalsnuten",
            PHON.ONSET con ] ].

bjornhollia := n_proper_le &
 [ STEM < "bjornhollia" >,
   SYNSEM [ LKEYS.KEYREL.CARG "bjornhollia",
            PHON.ONSET con ] ].

bjÃ¸mbÃ¸ltjÃ¸rna_n1 := n_proper_le &
 [ STEM < "bjÃ¸mbÃ¸ltjÃ¸rna" >,
   SYNSEM [ LKEYS.KEYREL.CARG "bjÃ¸mbÃ¸ltjÃ¸rna",
            PHON.ONSET con ] ].

bjÃ¸nnstigvarden := n_proper_le &
 [ STEM < "bjÃ¸nnstigvarden" >,
   SYNSEM [ LKEYS.KEYREL.CARG "bjÃ¸nnstigvarden",
            PHON.ONSET con ] ].

bjÃ¸rg_n1 := n_proper_le &
 [ STEM < "bjÃ¸rg" >,
   SYNSEM [ LKEYS.KEYREL.CARG "bjÃ¸rg",
            PHON.ONSET con ] ].

bjÃ¸rgen_n1 := n_proper_le &
 [ STEM < "bjÃ¸rgen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "bjÃ¸rgen",
            PHON.ONSET con ] ].

bjÃ¸rgo := n_proper_le &
 [ STEM < "bjÃ¸rgo" >,
   SYNSEM [ LKEYS.KEYREL.CARG "bjÃ¸rgo",
            PHON.ONSET con ] ].

bjÃ¸rn_n1 := n_proper_le &
 [ STEM < "bjÃ¸rn" >,
   SYNSEM [ LKEYS.KEYREL.CARG "bjÃ¸rn",
            PHON.ONSET con ] ].

bjÃ¸rnabyksefoss := n_proper_le &
 [ STEM < "bjÃ¸rnabyksefoss" >,
   SYNSEM [ LKEYS.KEYREL.CARG "bjÃ¸rnabyksefoss",
            PHON.ONSET con ] ].

bjÃ¸rnbÃ¸ltjÃ¸rna_n1 := n_proper_le &
 [ STEM < "bjÃ¸rnbÃ¸ltjÃ¸rna" >,
   SYNSEM [ LKEYS.KEYREL.CARG "bjÃ¸rnbÃ¸ltjÃ¸rna",
            PHON.ONSET con ] ].

bjÃ¸rndal := n_proper_le &
 [ STEM < "bjÃ¸rndal" >,
   SYNSEM [ LKEYS.KEYREL.CARG "bjÃ¸rndal",
            PHON.ONSET con ] ].

bjÃ¸rndalen := n_proper_le &
 [ STEM < "bjÃ¸rndalen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "bjÃ¸rndalen",
            PHON.ONSET con ] ].

bjÃ¸rndalsnuten := n_proper_le &
 [ STEM < "bjÃ¸rndalsnuten" >,
   SYNSEM [ LKEYS.KEYREL.CARG "bjÃ¸rndalsnuten",
            PHON.ONSET con ] ].

bjÃ¸rndalstindane := n_proper_pl_le &
 [ STEM < "bjÃ¸rndalstindane" >,
   SYNSEM [ LKEYS.KEYREL.CARG "bjÃ¸rndalstindane",
            PHON.ONSET con ] ].

bjÃ¸rndalstinden := n_proper_le &
 [ STEM < "bjÃ¸rndalstinden" >,
   SYNSEM [ LKEYS.KEYREL.CARG "bjÃ¸rndalstinden",
            PHON.ONSET con ] ].

bjÃ¸rnhollia := n_proper_le &
 [ STEM < "bjÃ¸rnhollia" >,
   SYNSEM [ LKEYS.KEYREL.CARG "bjÃ¸rnhollia",
            PHON.ONSET con ] ].

bjÃ¸rnstigen_n1 := n_proper_le &
 [ STEM < "bjÃ¸rnstigen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "bjÃ¸rnstigen",
            PHON.ONSET con ] ].

black_hills_n1 := n_proper_city_le &
 [ STEM < "black", "hills" >,
   SYNSEM [ LKEYS.KEYREL.CARG "black_hills",
            PHON.ONSET con ] ].

black_isect := adj_intrans_le &
 [ STEM < "black" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_black_a_1_rel",
            PHON.ONSET con ] ].

black_n1 := n_mass_count_le &
 [ STEM < "black" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_black_n_1_rel",
            PHON.ONSET con ] ].

blacken_v1 := v_np_trans_noger_le &
 [ STEM < "blacken" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_blacken_v_cause_rel",
            PHON.ONSET con ] ].

blacken_v2 := v_unacc_le &
 [ STEM < "blacken" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_blacken_v_1_rel",
            PHON.ONSET con ] ].

blackfly_n1 := n_intr_le &
 [ STEM < "blackfly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_blackfly_n_1_rel",
            PHON.ONSET con ] ].

blackness_n1 := n_mass_le &
 [ STEM < "blackness" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_blackness_n_1_rel",
            PHON.ONSET con ] ].

bladder_n1 := n_intr_le &
 [ STEM < "bladder" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bladder_n_1_rel",
            PHON.ONSET con ] ].

blade_n1 := n_intr_le &
 [ STEM < "blade" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_blade_n_1_rel",
            PHON.ONSET con ] ].

blade_runner_n1 := n_proper_le &
 [ STEM < "bladerunner" >,
   SYNSEM [ LKEYS.KEYREL.CARG "blade_runner",
            PHON.ONSET con ] ].

blade_runner_n2 := n_proper_le &
 [ STEM < "blade", "runner" >,
   SYNSEM [ LKEYS.KEYREL.CARG "blade_runner",
            PHON.ONSET con ] ].

blame_for_v1 := v_empty_prep*_trans_le &
 [ STEM < "blame" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_blame_v_for_rel" ],
            PHON.ONSET con ] ].

blame_n1 := n_mass_le &
 [ STEM < "blame" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_blame_n_1_rel",
            PHON.ONSET con ] ].

blame_on_v1 := v_empty_prep_trans_le &
 [ STEM < "blame" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_blame_v_on_rel" ],
            PHON.ONSET con ] ].

blank_a1 := adj_intrans_le &
 [ STEM < "blank" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_blank_a_1_rel",
            PHON.ONSET con ] ].

blank_on_v1 := v_empty_prep_trans_le &
 [ STEM < "blank" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_blank_v_on_rel" ],
            PHON.ONSET con ] ].

blanket_n1 := n_intr_le &
 [ STEM < "blanket" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_blanket_n_1_rel",
            PHON.ONSET con ] ].

blase_a1 := adj_intrans_le &
 [ STEM < "blase" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_blasÃ©_a_1_rel",
            PHON.ONSET con ] ].

blast_away_v1 := v_particle_np_le &
 [ STEM < "blast" >,
   SYNSEM [ LKEYS [ --COMPKEY _away_p_sel_rel,
                    KEYREL.PRED "_blast_v_away_rel" ],
            PHON.ONSET con ] ].

blast_n1 := n_intr_le &
 [ STEM < "blast" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_blast_n_1_rel",
            PHON.ONSET con ] ].

blast_off_v1 := v_particle_le &
 [ STEM < "blast" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_blast_v_off_rel" ],
            PHON.ONSET con ] ].

blast_open_v1 := v_particle_np_le &
 [ STEM < "blast" >,
   SYNSEM [ LKEYS [ --COMPKEY _open_a_sel_rel,
                    KEYREL.PRED "_blast_v_open_rel" ],
            PHON.ONSET con ] ].

blast_out_v1 := v_particle_np_le &
 [ STEM < "blast" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_blast_v_out_rel" ],
            PHON.ONSET con ] ].

blast_root_pre := adv_s_pre_word_root_le &
 [ STEM < "blast" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_blast_a_1_rel",
            PHON.ONSET con ] ].

blast_v1 := v_np*_trans_le &
 [ STEM < "blast" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_blast_v_1_rel",
            PHON.ONSET con ] ].

blasÃ©_a1 := adj_intrans_le &
 [ STEM < "blasÃ©" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_blasÃ©_a_1_rel",
            PHON.ONSET con ] ].

blaze_n1 := n_intr_le &
 [ STEM < "blaze" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_blaze_n_1_rel",
            PHON.ONSET con ] ].

blaze_v1 := v_unerg_le &
 [ STEM < "blaze" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_blaze_v_1_rel",
            PHON.ONSET con ] ].

blaze_v2 := v_np_trans_le &
 [ STEM < "blaze" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_blaze_v_1_rel",
            PHON.ONSET con ] ].

bleach_n1 := n_mass_le &
 [ STEM < "bleach" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bleach_n_1_rel",
            PHON.ONSET con ] ].

bleach_v1 := v_np*_trans_le &
 [ STEM < "bleach" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bleach_v_1_rel",
            PHON.ONSET con ] ].

bleak_a1 := adj_intrans_le &
 [ STEM < "bleak" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bleak_a_1_rel",
            PHON.ONSET con ] ].

bleary_a1 := adj_intrans_le &
 [ STEM < "bleary" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bleary_a_1_rel",
            PHON.ONSET con ] ].

bleary_eyed_a1 := adj_intrans_le &
 [ STEM < "bleary", "eyed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bleary+eyed_a_1_rel",
            PHON.ONSET con ] ].

bleed_v1 := v_np_trans_noger_le &
 [ STEM < "bleed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bleed_v_cause_rel",
            PHON.ONSET con ] ].

bleed_v2 := v_unacc_le &
 [ STEM < "bleed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bleed_v_1_rel",
            PHON.ONSET con ] ].

bleep_n1 := n_intr_le &
 [ STEM < "bleep" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bleep_n_1_rel",
            PHON.ONSET con ] ].

bleep_out_v1 := v_particle_np_le &
 [ STEM < "bleep" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_bleep_v_out_rel" ],
            PHON.ONSET con ] ].

bleiklindi := n_proper_le &
 [ STEM < "bleiklindi" >,
   SYNSEM [ LKEYS.KEYREL.CARG "bleiklindi",
            PHON.ONSET con ] ].

blemish_n1 := n_intr_le &
 [ STEM < "blemish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_blemish_n_1_rel",
            PHON.ONSET con ] ].

blemish_v1 := v_np_trans_le &
 [ STEM < "blemish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_blemish_v_1_rel",
            PHON.ONSET con ] ].

blend_n1 := n_intr_le &
 [ STEM < "blend" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_blend_n_1_rel",
            PHON.ONSET con ] ].

blend_v1 := v_np_trans_noger_le &
 [ STEM < "blend" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_blend_v_cause_rel",
            PHON.ONSET con ] ].

blend_v2 := v_unacc_le &
 [ STEM < "blend" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_blend_v_1_rel",
            PHON.ONSET con ] ].

bless_v1 := v_np_trans_le &
 [ STEM < "bless" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bless_v_1_rel",
            PHON.ONSET con ] ].

blessed_a1 := adj_intrans_le &
 [ STEM < "blessed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_blessed_a_1_rel",
            PHON.ONSET con ] ].

blessing_n1 := n_intr_le &
 [ STEM < "blessing" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_blessing_n_1_rel",
            PHON.ONSET con ] ].

bletoppen := n_proper_le &
 [ STEM < "bletoppen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "bletoppen",
            PHON.ONSET con ] ].

blind_isect := adj_intrans_le &
 [ STEM < "blind" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_blind_a_1_rel",
            PHON.ONSET con ] ].

blind_n1 := n_intr_le &
 [ STEM < "blind" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_blind_n_1_rel",
            PHON.ONSET con ] ].

blind_v1 := v_to*_trans_le &
 [ STEM < "blind" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_blind_v_to_rel",
            PHON.ONSET con ] ].

blindly := adv_int_vp_le &
 [ STEM < "blindly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_blind_a_1_rel",
            PHON.ONSET con ] ].

blink_n1 := n_intr_le &
 [ STEM < "blink" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_blink_n_1_rel",
            PHON.ONSET con ] ].

blink_v1 := v_np*_trans_le &
 [ STEM < "blink" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_blink_v_1_rel",
            PHON.ONSET con ] ].

bliss_n1 := n_mass_le &
 [ STEM < "bliss" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bliss_n_1_rel",
            PHON.ONSET con ] ].

blissful_a1 := adj_intrans_le &
 [ STEM < "blissful" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_blissful_a_1_rel",
            PHON.ONSET con ] ].

blissfully_adv1 := adv_int_vp_le &
 [ STEM < "blissfully" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_blissful_a_1_rel",
            PHON.ONSET con ] ].

blister_n1 := n_intr_le &
 [ STEM < "blister" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_blister_n_1_rel",
            PHON.ONSET con ] ].

blister_v1 := v_np_trans_noger_le &
 [ STEM < "blister" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_blister_v_cause_rel",
            PHON.ONSET con ] ].

blister_v2 := v_unacc_le &
 [ STEM < "blister" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_blister_v_1_rel",
            PHON.ONSET con ] ].

block_n1 := n_ppof_le &
 [ STEM < "block" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_block_n_of_rel",
            PHON.ONSET con ] ].

block_off_v1 := v_particle_np_le &
 [ STEM < "block" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_block_v_off_rel" ],
            PHON.ONSET con ] ].

block_out_v1 := v_particle_np_le &
 [ STEM < "block" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_block_v_out_rel" ],
            PHON.ONSET con ] ].

block_v1 := v_np_trans_le &
 [ STEM < "block" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_block_v_1_rel",
            PHON.ONSET con ] ].

blonde_adj := adj_intrans_le &
 [ STEM < "blonde" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_blonde_a_1_rel",
            PHON.ONSET con ] ].

blonde_n1 := n_intr_le &
 [ STEM < "blonde" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_blonde_n_1_rel",
            PHON.ONSET con ] ].

blood_n := n_mass_le &
 [ STEM < "blood" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_blood_n_1_rel",
            PHON.ONSET con ] ].

bloodstopper_n1 := n_intr_le &
 [ STEM < "bloodstopper" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bloodstopper_n_1_rel",
            PHON.ONSET con ] ].

bloom_v1 := v_unerg_le &
 [ STEM < "bloom" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bloom_v_1_rel",
            PHON.ONSET con ] ].

blossom_n1 := n_intr_le &
 [ STEM < "blossom" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_blossom_n_1_rel",
            PHON.ONSET con ] ].

blossom_v1 := v_unerg_le &
 [ STEM < "blossom" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_blossom_v_1_rel",
            PHON.ONSET con ] ].

blouse_n1 := n_intr_le &
 [ STEM < "blouse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_blouse_n_1_rel",
            PHON.ONSET con ] ].

blow_away_v1 := v_particle_np_le &
 [ STEM < "blow" >,
   SYNSEM [ LKEYS [ --COMPKEY _away_p_sel_rel,
                    KEYREL.PRED "_blow_v_away_rel" ],
            PHON.ONSET con ] ].

blow_down_v1 := v_particle_np_le &
 [ STEM < "blow" >,
   SYNSEM [ LKEYS [ --COMPKEY _down_p_sel_rel,
                    KEYREL.PRED "_blow_v_down_rel" ],
            PHON.ONSET con ] ].

blow_n1 := n_intr_le &
 [ STEM < "blow" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_blow_n_1_rel",
            PHON.ONSET con ] ].

blow_off_v1 := v_particle_np_le &
 [ STEM < "blow" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_blow_v_off_rel" ],
            PHON.ONSET con ] ].

blow_out_v1 := v_particle_np_le &
 [ STEM < "blow" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_blow_v_out_rel" ],
            PHON.ONSET con ] ].

blow_up_v1 := v_particle_np_le &
 [ STEM < "blow" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_blow_v_up_rel" ],
            PHON.ONSET con ] ].

blow_up_v2 := v_particle_le &
 [ STEM < "blow" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_blow_v_up_rel" ],
            PHON.ONSET con ] ].

blow_v2 := v_empty_prep*_trans_le &
 [ STEM < "blow" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_blow_v_on_rel" ],
            PHON.ONSET con ] ].

blow_v3 := v_unacc_le &
 [ STEM < "blow" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_blow_v_1_rel",
            PHON.ONSET con ] ].

blue_isect := adj_intrans_le &
 [ STEM < "blue" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_blue_a_1_rel",
            PHON.ONSET con ] ].

blue_n1 := n_color_le &
 [ STEM < "blue" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_blue_n_1_rel",
            PHON.ONSET con ] ].

blueberry_n1 := n_mass_count_le &
 [ STEM < "blueberry" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_blueberry_n_1_rel",
            PHON.ONSET con ] ].

bluetooth_n1 := n_proper_le &
 [ STEM < "bluetooth" >,
   SYNSEM [ LKEYS.KEYREL.CARG "bluetooth",
            PHON.ONSET con ] ].

blunt_a1 := adj_intrans_le &
 [ STEM < "blunt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_blunt_a_1_rel",
            PHON.ONSET con ] ].

blunt_v1 := v_np_trans_le &
 [ STEM < "blunt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_blunt_v_1_rel",
            PHON.ONSET con ] ].

blur_n1 := n_intr_le &
 [ STEM < "blur" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_blur_n_1_rel",
            PHON.ONSET con ] ].

blur_out_v1 := v_particle_np_le &
 [ STEM < "blur" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_blur_v_out_rel" ],
            PHON.ONSET con ] ].

blur_v1 := v_np_trans_le &
 [ STEM < "blur" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_blur_v_cause_rel",
            PHON.ONSET con ] ].

blur_v2 := v_unacc_le &
 [ STEM < "blur" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_blur_v_1_rel",
            PHON.ONSET con ] ].

blurrier_a1 := adj_comp_le &
 [ STEM < "blurrier" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_blurry_a_1_rel",
            PHON.ONSET con ] ].

blurriest_a1 := adj_superl_le &
 [ STEM < "blurriest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_blurry_a_1_rel",
            PHON.ONSET con ] ].

blurry_a1 := adj_intrans_le &
 [ STEM < "blurry" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_blurry_a_1_rel",
            PHON.ONSET con ] ].

blush_n1 := n_mass_count_le &
 [ STEM < "blush" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_blush_n_1_rel",
            PHON.ONSET con ] ].

blush_v1 := v_unerg_le &
 [ STEM < "blush" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_blush_v_1_rel",
            PHON.ONSET con ] ].

blustery_a1 := adj_intrans_le &
 [ STEM < "blustery" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_blustery_a_1_rel",
            PHON.ONSET con ] ].

blustery_a2 := adj_atrans_le &
 [ STEM < "blustery" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_blustery_a_1_rel",
            PHON.ONSET con ] ].

blÃ¥bretinden_n1 := n_proper_city_le &
 [ STEM < "blÃ¥bretinden" >,
   SYNSEM [ LKEYS.KEYREL.CARG "blÃ¥bretinden",
            PHON.ONSET con ] ].

blÃ¥nipa_n1 := n_proper_city_le &
 [ STEM < "blÃ¥nipa" >,
   SYNSEM [ LKEYS.KEYREL.CARG "blÃ¥nipa",
            PHON.ONSET con ] ].

blÃ¥tjÃ¸rnÃ¥a := n_proper_le &
 [ STEM < "blÃ¥tjÃ¸rnÃ¥a" >,
   SYNSEM [ LKEYS.KEYREL.CARG "blÃ¥tjÃ¸rnÃ¥a",
            PHON.ONSET con ] ].

bmft_nd := n_proper_le &
 [ STEM < "bmft" >,
   SYNSEM [ LKEYS.KEYREL.CARG "bmft",
            PHON.ONSET con ] ].

boa_n1 := n_intr_le &
 [ STEM < "boa" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_boa_n_1_rel",
            PHON.ONSET con ] ].

board_n1 := n_mass_count_le &
 [ STEM < "board" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_board_n_1_rel",
            PHON.ONSET con ] ].

board_up_v1 := v_particle_np_le &
 [ STEM < "board" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_board_v_up_rel" ],
            PHON.ONSET con ] ].

board_v1 := v_np*_trans_le &
 [ STEM < "board" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_board_v_1_rel",
            PHON.ONSET con ] ].

boarder_n1 := n_intr_le &
 [ STEM < "boarder" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_boarder_n_1_rel",
            PHON.ONSET con ] ].

boast_n1 := n_intr_le &
 [ STEM < "boast" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_boast_n_1_rel",
            PHON.ONSET con ] ].

boast_of_v1 := v_empty_prep_intrans_le &
 [ STEM < "boast" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_boast_v_of_rel" ],
            PHON.ONSET con ] ].

boast_v1 := v_cp_non_trans_le &
 [ STEM < "boast" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_boast_v_1_rel",
            PHON.ONSET con ] ].

boast_v2 := v_np_trans_le &
 [ STEM < "boast" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_boast_v_1_rel",
            PHON.ONSET con ] ].

boat_n1 := n_intr_le &
 [ STEM < "boat" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_boat_n_1_rel",
            PHON.ONSET con ] ].

boathouse_n1 := n_intr_le &
 [ STEM < "boathouse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_boathouse_n_1_rel",
            PHON.ONSET con ] ].

boatshed_n1 := n_intr_le &
 [ STEM < "boatshed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_boatshed_n_1_rel",
            PHON.ONSET con ] ].

boatswain_n1 := n_intr_le &
 [ STEM < "boatswain" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_boatswain_n_1_rel",
            PHON.ONSET con ] ].

bob := n_proper_le &
 [ STEM < "bob" >,
   SYNSEM [ LKEYS.KEYREL.CARG "bob",
            PHON.ONSET con ] ].

bob_n2 := n_intr_le &
 [ STEM < "bob" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bob_n_1_rel",
            PHON.ONSET con ] ].

bob_v1 := v_np_trans_le &
 [ STEM < "bob" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bob_v_cause_rel",
            PHON.ONSET con ] ].

bob_v2 := v_unacc_le &
 [ STEM < "bob" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bob_v_1_rel",
            PHON.ONSET con ] ].

bobbin_n1 := n_intr_le &
 [ STEM < "bobbin" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bobbin_n_1_rel",
            PHON.ONSET con ] ].

bobsled := v_prep_dir_le &
 [ STEM < "bobsled" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bobsled_v_1_rel",
            PHON.ONSET con ] ].

bocci_n1 := n_proper_le &
 [ STEM < "bocci" >,
   SYNSEM [ LKEYS.KEYREL.CARG "bocci",
            PHON.ONSET con ] ].

bochum_n1 := n_proper_city_le &
 [ STEM < "bochum" >,
   SYNSEM [ LKEYS.KEYREL.CARG "bochum",
            PHON.ONSET con ] ].

bock_n1 := n_proper_le &
 [ STEM < "bock" >,
   SYNSEM [ LKEYS.KEYREL.CARG "bock",
            PHON.ONSET con ] ].

bodhisattva_n1 := n_proper_le &
 [ STEM < "bodhisattva" >,
   SYNSEM [ LKEYS.KEYREL.CARG "bodhisattva",
            PHON.ONSET con ] ].

bodies_politic_n1 := n_plur_le &
 [ STEM < "bodies", "politic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_body+politic_n_1_rel",
            PHON.ONSET con ] ].

bodily := adv_int_vp_le &
 [ STEM < "bodily" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bodily_a_1_rel",
            PHON.ONSET con ] ].

bodily_a1 := adj_intrans_le &
 [ STEM < "bodily" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bodily_a_1_rel",
            PHON.ONSET con ] ].

body_n1 := n_intr_le &
 [ STEM < "body" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_body_n_1_rel",
            PHON.ONSET con ] ].

body_politic_n1 := n_intr_sg_le &
 [ STEM < "body", "politic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_body+politic_n_1_rel",
            PHON.ONSET con ] ].

bodÃ¸ := n_proper_le &
 [ STEM < "bodÃ¸" >,
   SYNSEM [ LKEYS.KEYREL.CARG "bodÃ¸",
            PHON.ONSET con ] ].

boeck_n1 := n_proper_le &
 [ STEM < "boeck" >,
   SYNSEM [ LKEYS.KEYREL.CARG "boeck",
            PHON.ONSET con ] ].

bog_down_v1 := v_particle_le &
 [ STEM < "bog" >,
   SYNSEM [ LKEYS [ --COMPKEY _down_p_sel_rel,
                    KEYREL.PRED "_bog_v_down_rel" ],
            PHON.ONSET con ] ].

bog_down_v2 := v_np_particle_only_le &
 [ STEM < "bog" >,
   SYNSEM [ LKEYS [ --COMPKEY _down_p_sel_rel,
                    KEYREL.PRED "_bog_v_down_rel" ],
            PHON.ONSET con ] ].

bog_n1 := n_intr_le &
 [ STEM < "bog" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bog_n_1_rel",
            PHON.ONSET con ] ].

boggy_a1 := adj_intrans_le &
 [ STEM < "boggy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_boggy_a_1_rel",
            PHON.ONSET con ] ].

boil_down_v1 := v_particle_np_le &
 [ STEM < "boil" >,
   SYNSEM [ LKEYS [ --COMPKEY _down_p_sel_rel,
                    KEYREL.PRED "_boil_v_down_rel" ],
            PHON.ONSET con ] ].

boil_down_v2 := v_particle_pp_le &
 [ STEM < "boil" >,
   SYNSEM [ LKEYS [ --COMPKEY _down_p_sel_rel,
                    --OCOMPKEY _to_p_rel,
                    KEYREL.PRED "_boil_v_down_rel" ],
            PHON.ONSET con ] ].

boil_down_v3 := v_particle_np_pp_to_le &
 [ STEM < "boil" >,
   SYNSEM [ LKEYS [ --COMPKEY _down_p_sel_rel,
                    KEYREL.PRED "_boil_v_down_rel" ],
            PHON.ONSET con ] ].

boil_down_v4 := v_particle_le &
 [ STEM < "boil" >,
   SYNSEM [ LKEYS [ --COMPKEY _down_p_sel_rel,
                    KEYREL.PRED "_boil_v_down_rel" ],
            PHON.ONSET con ] ].

boil_n1 := n_intr_le &
 [ STEM < "boil" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_boil_n_1_rel",
            PHON.ONSET con ] ].

boil_over_v1 := v_particle_le &
 [ STEM < "boil" >,
   SYNSEM [ LKEYS [ --COMPKEY _over_p_sel_rel,
                    KEYREL.PRED "_boil_v_over_rel" ],
            PHON.ONSET con ] ].

boil_up_v1 := v_particle_le &
 [ STEM < "boil" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_boil_v_up_rel" ],
            PHON.ONSET con ] ].

boil_v1 := v_unacc_le &
 [ STEM < "boil" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_boil_v_1_rel",
            PHON.ONSET con ] ].

boil_v2 := v_np_trans_le &
 [ STEM < "boil" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_boil_v_cause_rel",
            PHON.ONSET con ] ].

boiler_n1 := n_intr_le &
 [ STEM < "boiler" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_boiler_n_1_rel",
            PHON.ONSET con ] ].

bolhovd := n_proper_le &
 [ STEM < "bolhovd" >,
   SYNSEM [ LKEYS.KEYREL.CARG "bolhovd",
            PHON.ONSET con ] ].

bolivia_n1 := n_proper_le &
 [ STEM < "bolivia" >,
   SYNSEM [ LKEYS.KEYREL.CARG "bolivia",
            PHON.ONSET con ] ].

bolster_n1 := n_intr_le &
 [ STEM < "bolster" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bolster_n_1_rel",
            PHON.ONSET con ] ].

bolster_v1 := v_np_trans_le &
 [ STEM < "bolster" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bolster_v_1_rel",
            PHON.ONSET con ] ].

bolt_n1 := n_intr_le &
 [ STEM < "bolt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bolt_n_1_rel",
            PHON.ONSET con ] ].

bolt_v1 := v_np_prep_trans_dors_le &
 [ STEM < "bolt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bolt_v_1_rel",
            PHON.ONSET con ] ].

bolt_v2 := v_np*_trans_le &
 [ STEM < "bolt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bolt_v_1_rel",
            PHON.ONSET con ] ].

bolu_marquis_n1 := n_proper_le &
 [ STEM < "bolu", "marquis" >,
   SYNSEM [ LKEYS.KEYREL.CARG "bolu_marquis",
            PHON.ONSET con ] ].

bomb_n1 := n_intr_le &
 [ STEM < "bomb" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bomb_n_1_rel",
            PHON.ONSET con ] ].

bomb_out_v1 := v_particle_np_le &
 [ STEM < "bomb" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_bomb_v_out_rel" ],
            PHON.ONSET con ] ].

bomb_v1 := v_np*_trans_le &
 [ STEM < "bomb" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bomb_v_1_rel",
            PHON.ONSET con ] ].

bombard_v1 := v_np_trans_le &
 [ STEM < "bombard" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bombard_v_1_rel",
            PHON.ONSET con ] ].

bombay_n1 := n_proper_city_le &
 [ STEM < "bombay" >,
   SYNSEM [ LKEYS.KEYREL.CARG "bombay",
            PHON.ONSET con ] ].

bond_n1 := n_proper_le &
 [ STEM < "bond" >,
   SYNSEM [ LKEYS.KEYREL.CARG "bond",
            PHON.ONSET con ] ].

bond_n2 := n_intr_le &
 [ STEM < "bond" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bond_n_1_rel",
            PHON.ONSET con ] ].

bond_v1 := v_np*_trans_le &
 [ STEM < "bond" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bond_v_1_rel",
            PHON.ONSET con ] ].

bondage_n1 := n_mass_le &
 [ STEM < "bondage" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bondage_n_1_rel",
            PHON.ONSET con ] ].

bone_n1 := n_mass_count_le &
 [ STEM < "bone" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bone_n_1_rel",
            PHON.ONSET con ] ].

bonn_n1 := n_proper_city_le &
 [ STEM < "bonn" >,
   SYNSEM [ LKEYS.KEYREL.CARG "bonn",
            PHON.ONSET con ] ].

bonus_n1 := n_ppof_le &
 [ STEM < "bonus" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bonus_n_of_rel",
            PHON.ONSET con ] ].

bony_a1 := adj_intrans_le &
 [ STEM < "bony" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bony_a_1_rel",
            PHON.ONSET con ] ].

book_n1 := n_ppof_le &
 [ STEM < "book" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_book_n_of_rel",
            PHON.ONSET con ] ].

book_ttl := n_title_le &
 [ STEM < "book" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_book_n_of_rel",
            PHON.ONSET con ] ].

book_up_v1 := v_particle_np_le &
 [ STEM < "book" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_book_v_up_rel" ],
            PHON.ONSET con ] ].

book_v1 := v_ditrans_only_le &
 [ STEM < "book" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_book_v_1_rel",
            PHON.ONSET con ] ].

book_v2 := v_np_trans_le &
 [ STEM < "book" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_book_v_1_rel",
            PHON.ONSET con ] ].

book_v3 := v_obj_equi_prd_le &
 [ STEM < "book" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_book_v_1_rel",
            PHON.ONSET con ] ].

book_v4 := v_empty_prep_trans_le &
 [ STEM < "book" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _into_p_sel_rel,
                    KEYREL.PRED "_book_v_into_rel" ],
            PHON.ONSET con ] ].

bookcase_n1 := n_intr_le &
 [ STEM < "bookcase" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bookcase_n_1_rel",
            PHON.ONSET con ] ].

booked_a1 := adj_intrans_le &
 [ STEM < "booked" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_booked_a_1_rel",
            PHON.ONSET con ] ].

booklet_n1 := n_ppof_le &
 [ STEM < "booklet" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_booklet_n_of_rel",
            PHON.ONSET con ] ].

booklet_ttl := n_title_le &
 [ STEM < "booklet" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_booklet_n_of_rel",
            PHON.ONSET con ] ].

bookshop_n1 := n_intr_le &
 [ STEM < "bookshop" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bookshop_n_1_rel",
            PHON.ONSET con ] ].

bookshop_post_ttl := n_post_title_le &
 [ STEM < "bookshop" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bookshop_n_1_rel",
            PHON.ONSET con ] ].

bookstall_n1 := n_intr_le &
 [ STEM < "bookstall" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bookstall_n_1_rel",
            PHON.ONSET con ] ].

bookstore_n1 := n_intr_le &
 [ STEM < "bookstore" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bookstore_n_1_rel",
            PHON.ONSET con ] ].

bookstore_of_foreign_languages_n1 := n_proper_le &
 [ STEM < "bookstore", "of", "foreign", "languages" >,
   SYNSEM [ LKEYS.KEYREL.CARG "bookstore_of_foreign_languages",
            PHON.ONSET con ] ].

bookstore_post_ttl := n_post_title_le &
 [ STEM < "bookstore" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bookstore_n_1_rel",
            PHON.ONSET con ] ].

boom_n1 := n_intr_le &
 [ STEM < "boom" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_boom_n_1_rel",
            PHON.ONSET con ] ].

boost_n1 := n_intr_le &
 [ STEM < "boost" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_boost_n_1_rel",
            PHON.ONSET con ] ].

boost_v1 := v_to*_trans_le &
 [ STEM < "boost" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_boost_v_to_rel",
            PHON.ONSET con ] ].

boot_n1 := n_intr_le &
 [ STEM < "boot" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_boot_n_1_rel",
            PHON.ONSET con ] ].

boot_out_v1 := v_particle_np_le &
 [ STEM < "boot" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_boot_v_out_rel" ],
            PHON.ONSET con ] ].

boot_up_v1 := v_particle_np_le &
 [ STEM < "boot" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_boot_v_up_rel" ],
            PHON.ONSET con ] ].

boot_up_v2 := v_particle_le &
 [ STEM < "boot" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_boot_v_up_rel" ],
            PHON.ONSET con ] ].

boot_v1 := v_np*_trans_le &
 [ STEM < "boot" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_boot_v_1_rel",
            PHON.ONSET con ] ].

boottree_n1 := n_intr_le &
 [ STEM < "boottree" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_boottree_n_1_rel",
            PHON.ONSET con ] ].

border_n1 := n_intr_le &
 [ STEM < "border" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_border_n_1_rel",
            PHON.ONSET con ] ].

border_on_v1 := v_empty_prep_intrans_le &
 [ STEM < "border" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_border_v_on_rel" ],
            PHON.ONSET con ] ].

border_v1 := v_np_trans_le &
 [ STEM < "border" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_border_v_1_rel",
            PHON.ONSET con ] ].

bore_v1 := v_np*_trans_le &
 [ STEM < "bore" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bore_v_1_rel",
            PHON.ONSET con ] ].

boredom_n1 := n_intr_le &
 [ STEM < "boredom" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_boredom_n_1_rel",
            PHON.ONSET con ] ].

borg_n1 := n_proper_le &
 [ STEM < "borg" >,
   SYNSEM [ LKEYS.KEYREL.CARG "borg",
            PHON.ONSET con ] ].

borgny_n1 := n_proper_le &
 [ STEM < "borgny" >,
   SYNSEM [ LKEYS.KEYREL.CARG "borgny",
            PHON.ONSET con ] ].

borgund := n_proper_le &
 [ STEM < "borgund" >,
   SYNSEM [ LKEYS.KEYREL.CARG "borgund",
            PHON.ONSET con ] ].

boring_isect := adj_intrans_le &
 [ STEM < "boring" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_boring_a_1_rel",
            PHON.ONSET con ] ].

born_a1 := v_unerg_psv_le &
 [ STEM < "born" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bear_v_2_rel",
            PHON.ONSET con ] ].

borne_isect := adj_intrans_le &
 [ STEM < "borne" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_borne_a_1_rel",
            PHON.ONSET con ] ].

borrow_v1 := v_np*_trans_le &
 [ STEM < "borrow" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_borrow_v_from_rel",
            PHON.ONSET con ] ].

borrow_v2 := v_empty_prep_trans*_le &
 [ STEM < "borrow" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _from_p_sel_rel,
                    KEYREL.PRED "_borrow_v_from_rel" ],
            PHON.ONSET con ] ].

boshill_n1 := n_proper_le &
 [ STEM < "boshill" >,
   SYNSEM [ LKEYS.KEYREL.CARG "boshill",
            PHON.ONSET con ] ].

boss_n1 := n_intr_le &
 [ STEM < "boss" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_boss_n_1_rel",
            PHON.ONSET con ] ].

boston := n_proper_city_le &
 [ STEM < "boston" >,
   SYNSEM [ LKEYS.KEYREL.CARG "boston",
            PHON.ONSET con ] ].

botanical_a1 := adj_intrans_le &
 [ STEM < "botanical" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_botanical_a_1_rel",
            PHON.ONSET con ] ].

botanically_adv := adv_int_vp_le &
 [ STEM < "botanically" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_botanical_a_1_rel",
            PHON.ONSET con ] ].

botanist_n1 := n_intr_le &
 [ STEM < "botanist" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_botanist_n_1_rel",
            PHON.ONSET con ] ].

botanize_v1 := v_np_trans_le &
 [ STEM < "botanize" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_botanize_v_1_rel",
            PHON.ONSET con ] ].

botany_n1 := n_mass_le &
 [ STEM < "botany" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_botany_n_1_rel",
            PHON.ONSET con ] ].

both := det_part_pl_both_le &
 [ STEM < "both" >,
   SYNSEM [ LKEYS.KEYREL.PRED _both_q_rel,
            PHON.ONSET con ] ].

both_conj := conj_atomic_both_le &
 [ STEM < "both" >,
   SYNSEM.PHON.ONSET con ].

both_pn := n_part_npcomp_noagr_le &
 [ STEM < "both" >,
   SYNSEM [ LKEYS.ALTKEYREL.PRED _both_q_rel,
            PHON.ONSET con ] ].

bother_about_v1 := v_empty_prep_intrans_le &
 [ STEM < "bother" >,
   SYNSEM [ LKEYS [ --COMPKEY _about_p_sel_rel,
                    KEYREL.PRED "_bother_v_about_rel" ],
            PHON.ONSET con ] ].

bother_n1 := n_intr_le &
 [ STEM < "bother" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bother_n_1_rel",
            PHON.ONSET con ] ].

bother_prp_v1 := v_subj_equi_prp_le &
 [ STEM < "bother" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bother_v_1_rel",
            PHON.ONSET con ] ].

bother_v1 := v_np*_trans_le &
 [ STEM < "bother" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bother_v_1_rel",
            PHON.ONSET con ] ].

bother_v2 := v_expl_it_subj_np_cp_le &
 [ STEM < "bother" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bother_v_1_rel",
            PHON.ONSET con ] ].

bother_v3 := v_subj_equi_le &
 [ STEM < "bother" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bother_v_1_rel",
            PHON.ONSET con ] ].

bother_with_v1 := v_empty_prep_intrans_le &
 [ STEM < "bother" >,
   SYNSEM [ LKEYS [ --COMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_bother_v_with_rel" ],
            PHON.ONSET con ] ].

bothered_a1 := adj_intrans_le &
 [ STEM < "bothered" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bothered_a_1_rel",
            PHON.ONSET con ] ].

bothered_a2 := adj_reg_that_cp_le &
 [ STEM < "bothered" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bothered_a_1_rel",
            PHON.ONSET con ] ].

botnemark_n1 := n_proper_city_le &
 [ STEM < "botnemark" >,
   SYNSEM [ LKEYS.KEYREL.CARG "botnemark",
            PHON.ONSET con ] ].

botnemarka_n1 := n_proper_city_le &
 [ STEM < "botnemarka" >,
   SYNSEM [ LKEYS.KEYREL.CARG "botnemark",
            PHON.ONSET con ] ].

bottenviken := n_proper_le &
 [ STEM < "bottenviken" >,
   SYNSEM [ LKEYS.KEYREL.CARG "bottenviken",
            PHON.ONSET con ] ].

bottle_n1 := n_ppof_le &
 [ STEM < "bottle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bottle_n_of_rel",
            PHON.ONSET con ] ].

bottom_line_n1 := n_intr_le &
 [ STEM < "bottom", "line" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bottom+line_n_1_rel",
            PHON.ONSET con ] ].

bottom_n1 := n_intr_le &
 [ STEM < "bottom" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bottom_n_1_rel",
            PHON.ONSET con ] ].

bottomless_a1 := adj_intrans_le &
 [ STEM < "bottomless" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bottomless_a_1_rel",
            PHON.ONSET con ] ].

bough_n1 := n_intr_le &
 [ STEM < "bough" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bough_n_1_rel",
            PHON.ONSET con ] ].

boulder_n1 := n_intr_le &
 [ STEM < "boulder" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_boulder_n_1_rel",
            PHON.ONSET con ] ].

boulevard_n1 := n_intr_le &
 [ STEM < "boulevard" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_boulevard_n_1_rel",
            PHON.ONSET con ] ].

boulevard_post_ttl := n_post_title_le &
 [ STEM < "boulevard" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_boulevard_n_1_rel",
            PHON.ONSET con ] ].

bounce_back_v1 := v_particle_np_le &
 [ STEM < "bounce" >,
   SYNSEM [ LKEYS [ --COMPKEY _back_p_sel_rel,
                    KEYREL.PRED "_bounce_v_back_rel" ],
            PHON.ONSET con ] ].

bounce_back_v2 := v_particle_le &
 [ STEM < "bounce" >,
   SYNSEM [ LKEYS [ --COMPKEY _back_p_sel_rel,
                    KEYREL.PRED "_bounce_v_back_rel" ],
            PHON.ONSET con ] ].

bounce_n1 := n_mass_count_le &
 [ STEM < "bounce" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bounce_n_1_rel",
            PHON.ONSET con ] ].

bounce_v1 := v_prep_dir_le &
 [ STEM < "bounce" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bounce_v_1_rel",
            PHON.ONSET con ] ].

bounce_v2 := v_np_trans_noger_le &
 [ STEM < "bounce" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bounce_v_cause_rel",
            PHON.ONSET con ] ].

bound_n1 := n_intr_le &
 [ STEM < "bound" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bound_n_1_rel",
            PHON.ONSET con ] ].

boundary_n1 := n_intr_le &
 [ STEM < "boundary" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_boundary_n_1_rel",
            PHON.ONSET con ] ].

bouquet_n1 := n_proper_le &
 [ STEM < "bouquet" >,
   SYNSEM [ LKEYS.KEYREL.CARG "bouquet",
            PHON.ONSET con ] ].

bourgeois_a1 := adj_intrans_le &
 [ STEM < "bourgeois" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bourgeois_a_1_rel",
            PHON.ONSET con ] ].

bourgeois_n1 := n_plur_nocmpnd_le &
 [ STEM < "bourgeois" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bourgeois_n_1_rel",
            PHON.ONSET con ] ].

bouvier_n1 := n_proper_le &
 [ STEM < "bouvier" >,
   SYNSEM [ LKEYS.KEYREL.CARG "bouvier",
            PHON.ONSET con ] ].

bow_down_v1 := v_particle_pp_le &
 [ STEM < "bow" >,
   SYNSEM [ LKEYS [ --COMPKEY _down_p_sel_rel,
                    --OCOMPKEY _to_p_rel,
                    KEYREL.PRED "_bow_v_down_rel" ],
            PHON.ONSET con ] ].

bow_down_v2 := v_particle_le &
 [ STEM < "bow" >,
   SYNSEM [ LKEYS [ --COMPKEY _down_p_sel_rel,
                    KEYREL.PRED "_bow_v_down_rel" ],
            PHON.ONSET con ] ].

bow_n1 := n_intr_le &
 [ STEM < "bow" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bow_n_1_rel",
            PHON.ONSET con ] ].

bow_out_v1 := v_particle_pp_le &
 [ STEM < "bow" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    --OCOMPKEY _of_p_rel,
                    KEYREL.PRED "_bow_v_out_rel" ],
            PHON.ONSET con ] ].

bow_out_v2 := v_particle_le &
 [ STEM < "bow" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_bow_v_out_rel" ],
            PHON.ONSET con ] ].

bow_to_v1 := v_empty_prep_intrans_le &
 [ STEM < "bow" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_bow_v_to_rel" ],
            PHON.ONSET con ] ].

bow_v1 := v_np*_trans_le &
 [ STEM < "bow" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bow_v_1_rel",
            PHON.ONSET con ] ].

bow_wow_n1 := n_intr_le &
 [ STEM < "bow-", "wow" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bow-wow_n_1_rel",
            PHON.ONSET con ] ].

bow_wow_n2 := n_intr_le &
 [ STEM < "bow", "wow" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bow-wow_n_1_rel",
            PHON.ONSET con ] ].

bowel_n1 := n_intr_le &
 [ STEM < "bowel" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bowel_n_1_rel",
            PHON.ONSET con ] ].

bower_n1 := n_intr_le &
 [ STEM < "bower" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bower_n_1_rel",
            PHON.ONSET con ] ].

bowl_n1 := n_intr_le &
 [ STEM < "bowl" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bowl_n_1_rel",
            PHON.ONSET con ] ].

bowling_n1 := n_proper_le &
 [ STEM < "bowling" >,
   SYNSEM [ LKEYS.KEYREL.CARG "bowling",
            PHON.ONSET con ] ].

bowsprit_n1 := n_intr_le &
 [ STEM < "bowsprit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bowsprit_n_1_rel",
            PHON.ONSET con ] ].

box_in_v1 := v_particle_np_le &
 [ STEM < "box" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_box_v_in_rel" ],
            PHON.ONSET con ] ].

box_n1 := n_ppof_le &
 [ STEM < "box" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_box_n_of_rel",
            PHON.ONSET con ] ].

box_n2 := n_proper_le &
 [ STEM < "box" >,
   SYNSEM [ LKEYS.KEYREL.CARG "box",
            PHON.ONSET con ] ].

box_title := n_title_le &
 [ STEM < "box" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_box_n_of_rel",
            PHON.ONSET con ] ].

box_up_v1 := v_particle_np_le &
 [ STEM < "box" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_box_v_up_rel" ],
            PHON.ONSET con ] ].

box_v1 := v_np_trans_le &
 [ STEM < "box" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_box_v_1_rel",
            PHON.ONSET con ] ].

boxer_n1 := n_intr_le &
 [ STEM < "boxer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_boxer_n_1_rel",
            PHON.ONSET con ] ].

boxing_day_n1 := n_proper_le &
 [ STEM < "boxing", "day" >,
   SYNSEM [ LKEYS.KEYREL.CARG "boxing_day",
            PHON.ONSET con ] ].

boxing_n1 := n_mass_count_le &
 [ STEM < "boxing" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_boxing_n_1_rel",
            PHON.ONSET con ] ].

boxwood_n1 := n_mass_le &
 [ STEM < "boxwood" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_boxwood_n_1_rel",
            PHON.ONSET con ] ].

boy_n1 := n_intr_le &
 [ STEM < "boy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_boy_n_1_rel",
            PHON.ONSET con ] ].

boy_root_post := adv_s_post_word_nospec_le &
 [ STEM < "boy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_boy_a_1_rel",
            PHON.ONSET con ] ].

boy_root_pre := adv_s_pre_word_root_le &
 [ STEM < "boy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_boy_a_1_rel",
            PHON.ONSET con ] ].

boys_of_summer_n1 := n_proper_le &
 [ STEM < "boys", "of", "summer" >,
   SYNSEM [ LKEYS.KEYREL.CARG "boys_of_summer",
            PHON.ONSET con ] ].

bra_n1 := n_intr_le &
 [ STEM < "bra" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bra_n_1_rel",
            PHON.ONSET con ] ].

braathens := n_proper_le &
 [ STEM < "braathens" >,
   SYNSEM [ LKEYS.KEYREL.CARG "braathens",
            PHON.ONSET con ] ].

brace_n1 := n_intr_le &
 [ STEM < "brace" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_brace_n_1_rel",
            PHON.ONSET con ] ].

brace_v1 := v_np_prep_trans_le &
 [ STEM < "brace" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _for_p_rel,
                    KEYREL.PRED "_brace_v_1_rel" ],
            PHON.ONSET con ] ].

brace_v2 := v_np_trans_le &
 [ STEM < "brace" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_brace_v_1_rel",
            PHON.ONSET con ] ].

brace_v3 := v_prep_intrans_le &
 [ STEM < "brace" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_rel,
                    KEYREL.PRED "_brace_v_1_rel" ],
            PHON.ONSET con ] ].

brace_v4 := v_obj_equi_le &
 [ STEM < "brace" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_brace_v_1_rel",
            PHON.ONSET con ] ].

brack_n1 := n_proper_le &
 [ STEM < "brack" >,
   SYNSEM [ LKEYS.KEYREL.CARG "brack",
            PHON.ONSET con ] ].

brackish_a1 := adj_intrans_le &
 [ STEM < "brackish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_brackish_a_1_rel",
            PHON.ONSET con ] ].

bract_n1 := n_intr_le &
 [ STEM < "bract" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bract_n_1_rel",
            PHON.ONSET con ] ].

brahma_n1 := n_proper_le &
 [ STEM < "brahma" >,
   SYNSEM [ LKEYS.KEYREL.CARG "brahma",
            PHON.ONSET con ] ].

braille_n1 := n_proper_le &
 [ STEM < "braille" >,
   SYNSEM [ LKEYS.KEYREL.CARG "braille",
            PHON.ONSET con ] ].

brain_n1 := n_intr_le &
 [ STEM < "brain" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_brain_n_1_rel",
            PHON.ONSET con ] ].

brambling_n1 := n_intr_le &
 [ STEM < "brambling" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_brambling_n_1_rel",
            PHON.ONSET con ] ].

brambling_n2 := n_mass_kind_le &
 [ STEM < "brambling" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_brambling_n_kind_rel",
            PHON.ONSET con ] ].

bran_n1 := n_mass_count_le &
 [ STEM < "bran" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bran_n_1_rel",
            PHON.ONSET con ] ].

branch_davidian_n1 := n_proper_le &
 [ STEM < "branch", "davidian" >,
   SYNSEM [ LKEYS.KEYREL.CARG "branch_davidian",
            PHON.ONSET con ] ].

branch_n1 := n_ppof_le &
 [ STEM < "branch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_branch_n_of_rel",
            PHON.ONSET con ] ].

branch_off_v1 := v_particle_le &
 [ STEM < "branch" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_branch_v_off_rel" ],
            PHON.ONSET con ] ].

branch_out_v1 := v_particle_le &
 [ STEM < "branch" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_branch_v_out_rel" ],
            PHON.ONSET con ] ].

branch_v1 := v_unerg_le &
 [ STEM < "branch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_branch_v_1_rel",
            PHON.ONSET con ] ].

brand_n1 := n_ppcomp_spr_le &
 [ STEM < "brand" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_brand_n_of_rel",
            PHON.ONSET con ] ].

brand_n2 := n_intr_le &
 [ STEM < "brand" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_brand_n_of_rel",
            PHON.ONSET con ] ].

brand_new_a1 := adj_intrans_le &
 [ STEM < "brand", "new" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_brand+new_a_1_rel",
            PHON.ONSET con ] ].

brand_new_a2 := adj_intrans_le &
 [ STEM < "brand-", "new" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_brand+new_a_1_rel",
            PHON.ONSET con ] ].

brandenburg_n1 := n_proper_city_le &
 [ STEM < "brandenburg" >,
   SYNSEM [ LKEYS.KEYREL.CARG "brandenburg",
            PHON.ONSET con ] ].

brandt_n1 := n_proper_le &
 [ STEM < "brandt" >,
   SYNSEM [ LKEYS.KEYREL.CARG "brandt",
            PHON.ONSET con ] ].

branson := n_proper_le &
 [ STEM < "branson" >,
   SYNSEM [ LKEYS.KEYREL.CARG "branson",
            PHON.ONSET con ] ].

brasilian_isect := adj_intrans_le &
 [ STEM < "brasilian" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_brasilian_a_1_rel",
            PHON.ONSET con ] ].

braunschweig_n1 := n_proper_city_le &
 [ STEM < "braunschweig" >,
   SYNSEM [ LKEYS.KEYREL.CARG "braunschweig",
            PHON.ONSET con ] ].

brave_a1 := adj_intrans_le &
 [ STEM < "brave" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_brave_a_1_rel",
            PHON.ONSET con ] ].

brave_n1 := n_intr_le &
 [ STEM < "brave" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_brave_n_1_rel",
            PHON.ONSET con ] ].

brave_new_world_n1 := n_proper_le &
 [ STEM < "brave", "new", "world" >,
   SYNSEM [ LKEYS.KEYREL.CARG "brave_new_world",
            PHON.ONSET con ] ].

brave_v1 := v_np_trans_le &
 [ STEM < "brave" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_brave_v_1_rel",
            PHON.ONSET con ] ].

bravely_adv1 := adv_int_vp_le &
 [ STEM < "bravely" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_brave_a_1_rel",
            PHON.ONSET con ] ].

braver := adj_comp_le &
 [ STEM < "braver" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_brave_a_1_rel",
            PHON.ONSET con ] ].

bravest_a1 := adj_superl_le &
 [ STEM < "bravest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_brave_a_1_rel",
            PHON.ONSET con ] ].

brazen_a1 := adj_intrans_le &
 [ STEM < "brazen" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_brazen_a_1_rel",
            PHON.ONSET con ] ].

brazil_n1 := n_proper_le &
 [ STEM < "brazil" >,
   SYNSEM [ LKEYS.KEYREL.CARG "brazil",
            PHON.ONSET con ] ].

brazilian_a1 := adj_intrans_le &
 [ STEM < "brazilian" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_brazilian_a_1_rel",
            PHON.ONSET con ] ].

breach_n1 := n_intr_le &
 [ STEM < "breach" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_breach_n_1_rel",
            PHON.ONSET con ] ].

breach_v1 := v_np_trans_le &
 [ STEM < "breach" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_breach_v_1_rel",
            PHON.ONSET con ] ].

bread_n1 := n_mass_count_le &
 [ STEM < "bread" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bread_n_1_rel",
            PHON.ONSET con ] ].

breaded_a1 := adj_intrans_le &
 [ STEM < "breaded" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_breaded_a_1_rel",
            PHON.ONSET con ] ].

breadth_n1 := n_mass_count_ppof_le &
 [ STEM < "breadth" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_breadth_n_of_rel",
            PHON.ONSET con ] ].

break_down_v1 := v_particle_np_le &
 [ STEM < "break" >,
   SYNSEM [ LKEYS [ --COMPKEY _down_p_sel_rel,
                    KEYREL.PRED "_break_v_down_rel" ],
            PHON.ONSET con ] ].

break_down_v2 := v_particle_le &
 [ STEM < "break" >,
   SYNSEM [ LKEYS [ --COMPKEY _down_p_sel_rel,
                    KEYREL.PRED "_break_v_down_rel" ],
            PHON.ONSET con ] ].

break_in_v1 := v_particle_np_le &
 [ STEM < "break" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_break_v_in_rel" ],
            PHON.ONSET con ] ].

break_in_v2 := v_particle_le &
 [ STEM < "break" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_break_v_in_rel" ],
            PHON.ONSET con ] ].

break_n1 := n_intr_le &
 [ STEM < "break" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_break_n_1_rel",
            PHON.ONSET con ] ].

break_off_v1 := v_particle_np_le &
 [ STEM < "break" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_break_v_off_rel" ],
            PHON.ONSET con ] ].

break_off_v2 := v_particle_le &
 [ STEM < "break" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_break_v_off_rel" ],
            PHON.ONSET con ] ].

break_out_v1 := v_particle_np_le &
 [ STEM < "break" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_break_v_out_rel" ],
            PHON.ONSET con ] ].

break_out_v2 := v_particle_le &
 [ STEM < "break" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_break_v_out_rel" ],
            PHON.ONSET con ] ].

break_up_v1 := v_particle_np_le &
 [ STEM < "break" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_break_v_up_rel" ],
            PHON.ONSET con ] ].

break_up_v2 := v_particle_le &
 [ STEM < "break" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_break_v_up_rel" ],
            PHON.ONSET con ] ].

break_v1 := v_np_trans_le &
 [ STEM < "break" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_break_v_cause_rel",
            PHON.ONSET con ] ].

break_v2 := v_unacc_le &
 [ STEM < "break" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_break_v_1_rel",
            PHON.ONSET con ] ].

breakdown_n1 := n_intr_le &
 [ STEM < "breakdown" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_breakdown_n_1_rel",
            PHON.ONSET con ] ].

breakdown_n2 := n_intr_le &
 [ STEM < "break", "down" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_breakdown_n_1_rel",
            PHON.ONSET con ] ].

breaker_n1 := n_intr_le &
 [ STEM < "breaker" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_breaker_n_1_rel",
            PHON.ONSET con ] ].

breakfast_n1 := n_mass_count_le &
 [ STEM < "breakfast" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_breakfast_n_1_rel",
            PHON.ONSET con ] ].

breakfast_time_n1 := n_mealtime_le &
 [ STEM < "breakfast" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_breakfast_n_1_rel",
            PHON.ONSET con ] ].

breakfast_v1 := v_unerg_le &
 [ STEM < "breakfast" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_breakfast_v_1_rel",
            PHON.ONSET con ] ].

breast_n1 := n_intr_le &
 [ STEM < "breast" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_breast_n_1_rel",
            PHON.ONSET con ] ].

breast_v1 := v_np_trans_le &
 [ STEM < "breast" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_breast_v_1_rel",
            PHON.ONSET con ] ].

breastband_n1 := n_intr_le &
 [ STEM < "breastband" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_breastband_n_1_rel",
            PHON.ONSET con ] ].

breath_n1 := n_mass_count_le &
 [ STEM < "breath" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_breath_n_1_rel",
            PHON.ONSET con ] ].

breathe_v1 := v_np*_trans_le &
 [ STEM < "breathe" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_breathe_v_1_rel",
            PHON.ONSET con ] ].

breather_n1 := n_intr_le &
 [ STEM < "breather" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_breather_n_1_rel",
            PHON.ONSET con ] ].

breathless_a1 := adj_intrans_le &
 [ STEM < "breathless" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_breathless_a_1_rel",
            PHON.ONSET con ] ].

breathlessly_adv := adv_int_vp_le &
 [ STEM < "breathlessly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_breathless_a_1_rel",
            PHON.ONSET con ] ].

breathtaking_a1 := adj_intrans_le &
 [ STEM < "breathtaking" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_breathtaking_a_1_rel",
            PHON.ONSET con ] ].

breech_n1 := n_intr_le &
 [ STEM < "breech" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_breech_n_1_rel",
            PHON.ONSET con ] ].

breech_v1 := v_np_trans_le &
 [ STEM < "breech" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_breech_v_1_rel",
            PHON.ONSET con ] ].

breed_n1 := n_ppcomp_spr_le &
 [ STEM < "breed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_breed_n_of-n_rel",
            PHON.ONSET con ] ].

breed_n2 := n_intr_le &
 [ STEM < "breed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_breed_n_of-n_rel",
            PHON.ONSET con ] ].

breed_v1 := v_np*_trans_le &
 [ STEM < "breed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_breed_v_1_rel",
            PHON.ONSET con ] ].

breeder_n1 := n_intr_le &
 [ STEM < "breeder" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_breeder_n_1_rel",
            PHON.ONSET con ] ].

breeze_n1 := n_intr_le &
 [ STEM < "breeze" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_breeze_n_1_rel",
            PHON.ONSET con ] ].

breezier_a1 := adj_comp_le &
 [ STEM < "breezier" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_breezy_a_1_rel",
            PHON.ONSET con ] ].

breezier_a2 := adj_atrans_comp_le &
 [ STEM < "breezier" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_breezy_a_1_rel",
            PHON.ONSET con ] ].

breeziest_a1 := adj_superl_le &
 [ STEM < "breeziest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_breezy_a_1_rel",
            PHON.ONSET con ] ].

breeziest_a2 := adj_atrans_superl_le &
 [ STEM < "breeziest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_breezy_a_1_rel",
            PHON.ONSET con ] ].

breezy_a1 := adj_intrans_le &
 [ STEM < "breezy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_breezy_a_1_rel",
            PHON.ONSET con ] ].

breezy_a2 := adj_atrans_le &
 [ STEM < "breezy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_breezy_a_1_rel",
            PHON.ONSET con ] ].

breheimen_n1 := n_proper_le &
 [ STEM < "breheimen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "breheimen",
            PHON.ONSET con ] ].

breibakka := n_proper_le &
 [ STEM < "breibakka" >,
   SYNSEM [ LKEYS.KEYREL.CARG "breibakka",
            PHON.ONSET con ] ].

breidalen := n_proper_le &
 [ STEM < "breidalen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "breidalen",
            PHON.ONSET con ] ].

breidalsbotn := n_proper_le &
 [ STEM < "breidalsbotn" >,
   SYNSEM [ LKEYS.KEYREL.CARG "breidalsbotn",
            PHON.ONSET con ] ].

bremen_n1 := n_proper_city_le &
 [ STEM < "bremen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "bremen",
            PHON.ONSET con ] ].

bremuseum := n_proper_le &
 [ STEM < "bremuseum" >,
   SYNSEM [ LKEYS.KEYREL.CARG "bremuseum",
            PHON.ONSET con ] ].

breve_n1 := n_intr_le &
 [ STEM < "breve" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_breve_n_1_rel",
            PHON.ONSET con ] ].

brew_n1 := n_intr_le &
 [ STEM < "brew" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_brew_n_1_rel",
            PHON.ONSET con ] ].

brew_v1 := v_np_trans_le &
 [ STEM < "brew" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_brew_v_1_rel",
            PHON.ONSET con ] ].

brewer_n1 := n_intr_le &
 [ STEM < "brewer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_brewer_n_1_rel",
            PHON.ONSET con ] ].

brian := n_proper_le &
 [ STEM < "brian" >,
   SYNSEM [ LKEYS.KEYREL.CARG "brian",
            PHON.ONSET con ] ].

brick_n1 := n_mass_count_le &
 [ STEM < "brick" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_brick_n_1_rel",
            PHON.ONSET con ] ].

bridal_a1 := adj_intrans_le &
 [ STEM < "bridal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bridal_a_1_rel",
            PHON.ONSET con ] ].

bride_n1 := n_intr_le &
 [ STEM < "bride" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bride_n_1_rel",
            PHON.ONSET con ] ].

bridge_n1 := n_intr_le &
 [ STEM < "bridge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bridge_n_1_rel",
            PHON.ONSET con ] ].

bridge_post_ttl := n_post_title_le &
 [ STEM < "bridge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bridge_n_1_rel",
            PHON.ONSET con ] ].

bridge_v1 := v_np_trans_le &
 [ STEM < "bridge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bridge_v_1_rel",
            PHON.ONSET con ] ].

bridle_v1 := v_empty_prep_intrans_le &
 [ STEM < "bridle" >,
   SYNSEM [ LKEYS [ --COMPKEY _at_p_sel_rel,
                    KEYREL.PRED "_bridle_v_at_rel" ],
            PHON.ONSET con ] ].

brief_a1 := adj_intrans_le &
 [ STEM < "brief" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_brief_a_1_rel",
            PHON.ONSET con ] ].

brief_n1 := n_intr_le &
 [ STEM < "brief" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_brief_n_1_rel",
            PHON.ONSET con ] ].

brief_v1 := v_empty_prep*_trans_le &
 [ STEM < "brief" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_brief_v_on_rel" ],
            PHON.ONSET con ] ].

brief_v2 := v_np_trans_cp_le &
 [ STEM < "brief" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_brief_v_1_rel",
            PHON.ONSET con ] ].

brief_v3 := v_obj_equi_le &
 [ STEM < "brief" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_brief_v_1_rel",
            PHON.ONSET con ] ].

briefcase_n1 := n_intr_le &
 [ STEM < "briefcase" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_briefcase_n_1_rel",
            PHON.ONSET con ] ].

briefer_a1 := adj_comp_le &
 [ STEM < "briefer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_brief_a_1_rel",
            PHON.ONSET con ] ].

briefest_a1 := adj_superl_le &
 [ STEM < "briefest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_brief_a_1_rel",
            PHON.ONSET con ] ].

briefing_n1 := n_ppof_le &
 [ STEM < "briefing" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_briefing_n_of_rel",
            PHON.ONSET con ] ].

briefly_adv1 := adv_int_vp_le &
 [ STEM < "briefly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_brief_a_1_rel",
            PHON.ONSET con ] ].

bright_isect := adj_intrans_le &
 [ STEM < "bright" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bright_a_1_rel",
            PHON.ONSET con ] ].

brighten_v1 := v_np_trans_le &
 [ STEM < "brighten" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_brighten_v_cause_rel",
            PHON.ONSET con ] ].

brighten_v2 := v_unacc_le &
 [ STEM < "brighten" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_brighten_v_1_rel",
            PHON.ONSET con ] ].

brighter_a1 := adj_comp_le &
 [ STEM < "brighter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bright_a_1_rel",
            PHON.ONSET con ] ].

brightest_a1 := adj_superl_le &
 [ STEM < "brightest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bright_a_1_rel",
            PHON.ONSET con ] ].

brightly := adv_int_vp_le &
 [ STEM < "brightly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bright_a_1_rel",
            PHON.ONSET con ] ].

brightness_n1 := n_mass_le &
 [ STEM < "brightness" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_brightness_n_1_rel",
            PHON.ONSET con ] ].

briksdalsbreen := n_proper_le &
 [ STEM < "briksdalsbreen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "briksdalsbreen",
            PHON.ONSET con ] ].

brilliance_n1 := n_mass_le &
 [ STEM < "brilliance" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_brilliance_n_1_rel",
            PHON.ONSET con ] ].

brilliant_isect := adj_intrans_le &
 [ STEM < "brilliant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_brilliant_a_1_rel",
            PHON.ONSET con ] ].

brilliantly := adv_int_vp_le &
 [ STEM < "brilliantly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_brilliant_a_1_rel",
            PHON.ONSET con ] ].

brim_n1 := n_ppof_le &
 [ STEM < "brim" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_brim_n_of_rel",
            PHON.ONSET con ] ].

brine_cured_a1 := adj_intrans_le &
 [ STEM < "brine-", "cured" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_brine+cured_a_1_rel",
            PHON.ONSET con ] ].

brine_cured_a2 := adj_intrans_le &
 [ STEM < "brine", "cured" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_brine+cured_a_1_rel",
            PHON.ONSET con ] ].

brine_n1 := n_mass_le &
 [ STEM < "brine" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_brine_n_1_rel",
            PHON.ONSET con ] ].

bring_about_v1 := v_particle_np_le &
 [ STEM < "bring" >,
   SYNSEM [ LKEYS [ --COMPKEY _about_p_sel_rel,
                    KEYREL.PRED "_bring_v_about_rel" ],
            PHON.ONSET con ] ].

bring_along_v1 := v_particle_np_le &
 [ STEM < "bring" >,
   SYNSEM [ LKEYS [ --COMPKEY _along_p_sel_rel,
                    KEYREL.PRED "_bring_v_along_rel" ],
            PHON.ONSET con ] ].

bring_down_v1 := v_particle_np_le &
 [ STEM < "bring" >,
   SYNSEM [ LKEYS [ --COMPKEY _down_p_sel_rel,
                    KEYREL.PRED "_bring_v_down_rel" ],
            PHON.ONSET con ] ].

bring_forth_v1 := v_particle_np_le &
 [ STEM < "bring" >,
   SYNSEM [ LKEYS [ --COMPKEY _forth_p_sel_rel,
                    KEYREL.PRED "_bring_v_forth_rel" ],
            PHON.ONSET con ] ].

bring_forward_v1 := v_particle_np_le &
 [ STEM < "bring" >,
   SYNSEM [ LKEYS [ --COMPKEY _forward_p_sel_rel,
                    KEYREL.PRED "_bring_v_forward_rel" ],
            PHON.ONSET con ] ].

bring_in_v1 := v_particle_np_le &
 [ STEM < "bring" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_bring_v_in_rel" ],
            PHON.ONSET con ] ].

bring_off_v1 := v_particle_np_le &
 [ STEM < "bring" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_bring_v_off_rel" ],
            PHON.ONSET con ] ].

bring_over_v1 := v_particle_np_le &
 [ STEM < "bring" >,
   SYNSEM [ LKEYS [ --COMPKEY _over_p_sel_rel,
                    KEYREL.PRED "_bring_v_over_rel" ],
            PHON.ONSET con ] ].

bring_to_v1 := v_np_particle_only_le &
 [ STEM < "bring" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_bring_v_to_rel" ],
            PHON.ONSET con ] ].

bring_up_v1 := v_particle_np_le &
 [ STEM < "bring" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_bring_v_up_rel" ],
            PHON.ONSET con ] ].

bring_v1 := v_np_trans_le &
 [ STEM < "bring" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bring_v_1_rel",
            PHON.ONSET con ] ].

bring_v2 := v_np_prep_trans_dors_le &
 [ STEM < "bring" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bring_v_1_rel",
            PHON.ONSET con ] ].

bring_v3 := v_ditrans_only_le &
 [ STEM < "bring" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bring_v_1_rel",
            PHON.ONSET con ] ].

bring_v4 := v_obj_equi_le &
 [ STEM < "bring" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bring_v_1_rel",
            PHON.ONSET con ] ].

brink_n1 := n_ppof_le &
 [ STEM < "brink" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_brink_n_of_rel",
            PHON.ONSET con ] ].

brisk_a1 := adj_intrans_le &
 [ STEM < "brisk" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_brisk_a_1_rel",
            PHON.ONSET con ] ].

bristol_n1 := n_proper_city_le &
 [ STEM < "bristol" >,
   SYNSEM [ LKEYS.KEYREL.CARG "bristol",
            PHON.ONSET con ] ].

britain := n_proper_le &
 [ STEM < "britain" >,
   SYNSEM [ LKEYS.KEYREL.CARG "britain",
            PHON.ONSET con ] ].

british_a1 := adj_intrans_le &
 [ STEM < "british" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_british_a_1_rel",
            PHON.ONSET con ] ].

british_air_n1 := n_proper_le &
 [ STEM < "british", "air" >,
   SYNSEM [ LKEYS.KEYREL.CARG "british_air",
            PHON.ONSET con ] ].

british_airways_n1 := n_proper_le &
 [ STEM < "british", "airways" >,
   SYNSEM [ LKEYS.KEYREL.CARG "britishairways",
            PHON.ONSET con ] ].

brittle_a1 := adj_intrans_le &
 [ STEM < "brittle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_brittle_a_1_rel",
            PHON.ONSET con ] ].

brittle_n1 := n_mass_count_le &
 [ STEM < "brittle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_brittle_n_1_rel",
            PHON.ONSET con ] ].

bro := n_proper_le &
 [ STEM < "bro" >,
   SYNSEM [ LKEYS.KEYREL.CARG "bro",
            PHON.ONSET con ] ].

broad_a1 := adj_intrans_le &
 [ STEM < "broad" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_broad_a_1_rel",
            PHON.ONSET con ] ].

broadcast_n1 := n_mass_count_le &
 [ STEM < "broadcast" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_broadcast_n_1_rel",
            PHON.ONSET con ] ].

broadcast_v1 := v_np*_trans_le &
 [ STEM < "broadcast" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_broadcast_v_to_rel",
            PHON.ONSET con ] ].

broadcast_v2 := v_to_trans_le &
 [ STEM < "broadcast" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_broadcast_v_to_rel",
            PHON.ONSET con ] ].

broadcasting_n1 := n_ppof_le &
 [ STEM < "broadcasting" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_broadcasting_n_of_rel",
            PHON.ONSET con ] ].

broadcloth_n1 := n_mass_count_le &
 [ STEM < "broadcloth" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_broadcloth_n_1_rel",
            PHON.ONSET con ] ].

broaden_v1 := v_np_trans_le &
 [ STEM < "broaden" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_broaden_v_cause_rel",
            PHON.ONSET con ] ].

broaden_v2 := v_unacc_le &
 [ STEM < "broaden" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_broaden_v_1_rel",
            PHON.ONSET con ] ].

broaden_v3 := v_obj_equi_le &
 [ STEM < "broaden" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_broaden_v_cause_rel",
            PHON.ONSET con ] ].

broaden_v4 := v_subj_equi_le &
 [ STEM < "broaden" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_broaden_v_1_rel",
            PHON.ONSET voc ] ].

broader := adj_comp_le &
 [ STEM < "broader" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_broad_a_1_rel",
            PHON.ONSET con ] ].

broadest_a1 := adj_superl_le &
 [ STEM < "broadest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_broad_a_1_rel",
            PHON.ONSET con ] ].

broadly_adv := adv_int_vp_le &
 [ STEM < "broadly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_broad_a_1_rel",
            PHON.ONSET con ] ].

broadsword_n1 := n_intr_le &
 [ STEM < "broadsword" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_broadsword_n_1_rel",
            PHON.ONSET con ] ].

broadway_n1 := n_proper_le &
 [ STEM < "broadway" >,
   SYNSEM [ LKEYS.KEYREL.CARG "broadway",
            PHON.ONSET con ] ].

brochure_n1 := n_ppof_le &
 [ STEM < "brochure" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_brochure_n_of_rel",
            PHON.ONSET con ] ].

brochure_ttl := n_title_le &
 [ STEM < "brochure" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_brochure_n_of_rel",
            PHON.ONSET con ] ].

broke_robust := adj_intrans_le &
 [ STEM < "broke" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_broken_a_1_rel",
            PHON.ONSET con ] ].

broker_n1 := n_intr_le &
 [ STEM < "broker" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_broker_n_1_rel",
            PHON.ONSET con ] ].

broker_v1 := v_np_trans_le &
 [ STEM < "broker" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_broker_v_1_rel",
            PHON.ONSET con ] ].

brontosaurus_n1 := n_intr_le &
 [ STEM < "brontosaurus" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_brontosaurus_n_1_rel",
            PHON.ONSET con ] ].

bronze_a1 := adj_intrans_le &
 [ STEM < "bronze" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bronze_a_1_rel",
            PHON.ONSET con ] ].

bronze_n1 := n_mass_le &
 [ STEM < "bronze" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bronze_n_1_rel",
            PHON.ONSET con ] ].

brood_n1 := n_intr_le &
 [ STEM < "brood" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_brood_n_1_rel",
            PHON.ONSET con ] ].

brood_v1 := v_unerg_le &
 [ STEM < "brood" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_brood_v_1_rel",
            PHON.ONSET con ] ].

brook_n1 := n_intr_le &
 [ STEM < "brook" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_brook_n_1_rel",
            PHON.ONSET con ] ].

brook_v1 := v_np_trans_le &
 [ STEM < "brook" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_brook_v_1_rel",
            PHON.ONSET con ] ].

brother_in_law_n1 := n_intr_le &
 [ STEM < "brother-", "in-", "law" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_brother+in+law_n_1_rel",
            PHON.ONSET con ] ].

brother_n1 := n_ppof_le &
 [ STEM < "brother" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_brother_n_of_rel",
            PHON.ONSET con ] ].

brother_n2 := n_proper_le &
 [ STEM < "brother" >,
   SYNSEM [ LKEYS.KEYREL.CARG "brother",
            PHON.ONSET con ] ].

brown_adj := adj_intrans_le &
 [ STEM < "brown" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_brown_a_1_rel",
            PHON.ONSET con ] ].

brown_n1 := n_proper_le &
 [ STEM < "brown" >,
   SYNSEM [ LKEYS.KEYREL.CARG "brown",
            PHON.ONSET con ] ].

brown_n2 := n_mass_count_le &
 [ STEM < "brown" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_brown_n_1_rel",
            PHON.ONSET con ] ].

browne := n_proper_le &
 [ STEM < "browne" >,
   SYNSEM [ LKEYS.KEYREL.CARG "browne",
            PHON.ONSET con ] ].

browse_v1 := v_np*_trans_le &
 [ STEM < "browse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_browse_v_1_rel",
            PHON.ONSET con ] ].

browser_n1 := n_intr_le &
 [ STEM < "browser" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_browser_n_1_rel",
            PHON.ONSET con ] ].

bruaas_n1 := n_proper_le &
 [ STEM < "bruaas" >,
   SYNSEM [ LKEYS.KEYREL.CARG "bruaas",
            PHON.ONSET con ] ].

bruise_n1 := n_intr_le &
 [ STEM < "bruise" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bruise_n_1_rel",
            PHON.ONSET con ] ].

bruise_v1 := v_np_trans_le &
 [ STEM < "bruise" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bruise_v_cause_rel",
            PHON.ONSET con ] ].

bruise_v2 := v_unacc_le &
 [ STEM < "bruise" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bruise_v_1_rel",
            PHON.ONSET con ] ].

brunch_n1 := n_intr_le &
 [ STEM < "brunch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_brunch_n_1_rel",
            PHON.ONSET con ] ].

brunei_n1 := n_proper_le &
 [ STEM < "brunei" >,
   SYNSEM [ LKEYS.KEYREL.CARG "brunei",
            PHON.ONSET con ] ].

brunswick_n1 := n_proper_city_le &
 [ STEM < "brunswick" >,
   SYNSEM [ LKEYS.KEYREL.CARG "brunswick",
            PHON.ONSET con ] ].

brurskardet_n1 := n_proper_city_le &
 [ STEM < "brurskardet" >,
   SYNSEM [ LKEYS.KEYREL.CARG "brurskardet",
            PHON.ONSET con ] ].

brush_aside_v1 := v_particle_np_le &
 [ STEM < "brush" >,
   SYNSEM [ LKEYS [ --COMPKEY _aside_p_sel_rel,
                    KEYREL.PRED "_brush_v_aside_rel" ],
            PHON.ONSET con ] ].

brush_away_v1 := v_particle_np_le &
 [ STEM < "brush" >,
   SYNSEM [ LKEYS [ --COMPKEY _away_p_sel_rel,
                    KEYREL.PRED "_brush_v_away_rel" ],
            PHON.ONSET con ] ].

brush_n1 := n_mass_count_le &
 [ STEM < "brush" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_brush_n_1_rel",
            PHON.ONSET con ] ].

brush_off_v1 := v_particle_np_le &
 [ STEM < "brush" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_brush_v_off_rel" ],
            PHON.ONSET con ] ].

brush_v1 := v_np*_trans_le &
 [ STEM < "brush" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_brush_v_1_rel",
            PHON.ONSET con ] ].

brush_v2 := v_np_prep_trans_dors_le &
 [ STEM < "brush" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_brush_v_1_rel",
            PHON.ONSET con ] ].

brussels_n1 := n_proper_city_le &
 [ STEM < "brussels" >,
   SYNSEM [ LKEYS.KEYREL.CARG "brussels",
            PHON.ONSET con ] ].

brutally_adv := adv_int_vp_le &
 [ STEM < "brutally" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_brutal_a_1_rel",
            PHON.ONSET con ] ].

brute_a1 := adj_intrans_le &
 [ STEM < "brute" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_brute_a_1_rel",
            PHON.ONSET con ] ].

brute_n1 := n_intr_le &
 [ STEM < "brute" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_brute_n_1_rel",
            PHON.ONSET con ] ].

brÃ¥kdalen_n1 := n_proper_city_le &
 [ STEM < "brÃ¥kdalen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "brÃ¥kdalen",
            PHON.ONSET con ] ].

bub_n1 := n_proper_le &
 [ STEM < "bub" >,
   SYNSEM [ LKEYS.KEYREL.CARG "bub",
            PHON.ONSET con ] ].

bubble_n1 := n_intr_le &
 [ STEM < "bubble" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bubble_n_1_rel",
            PHON.ONSET con ] ].

bubble_over_v1 := v_particle_le &
 [ STEM < "bubble" >,
   SYNSEM [ LKEYS [ --COMPKEY _over_p_sel_rel,
                    KEYREL.PRED "_bubble_v_over_rel" ],
            PHON.ONSET con ] ].

bubble_up_v1 := v_particle_le &
 [ STEM < "bubble" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_bubble_v_up_rel" ],
            PHON.ONSET con ] ].

bubble_v1 := v_unerg_le &
 [ STEM < "bubble" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bubble_v_1_rel",
            PHON.ONSET con ] ].

buccinum := n_proper_le &
 [ STEM < "buccinum" >,
   SYNSEM [ LKEYS.KEYREL.CARG "buccinum",
            PHON.ONSET con ] ].

buck_money_n1 := n_intr_le &
 [ STEM < "buck" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_buck_n_money_rel",
            PHON.ONSET con ] ].

bucket_n1 := n_intr_le &
 [ STEM < "bucket" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bucket_n_1_rel",
            PHON.ONSET con ] ].

bud_n1 := n_intr_le &
 [ STEM < "bud" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bud_n_1_rel",
            PHON.ONSET con ] ].

bud_v1 := v_unerg_le &
 [ STEM < "bud" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bud_v_1_rel",
            PHON.ONSET con ] ].

buddha_n1 := n_proper_le &
 [ STEM < "buddha" >,
   SYNSEM [ LKEYS.KEYREL.CARG "buddha",
            PHON.ONSET con ] ].

buddhism_n1 := n_mass_le &
 [ STEM < "buddhism" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_buddhism_n_1_rel",
            PHON.ONSET con ] ].

buddhist_a1 := adj_intrans_le &
 [ STEM < "buddhist" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_buddhist_a_1_rel",
            PHON.ONSET con ] ].

buddhist_n1 := n_intr_le &
 [ STEM < "buddhist" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_buddhist_n_1_rel",
            PHON.ONSET con ] ].

buddy_n1 := n_intr_le &
 [ STEM < "buddy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_buddy_n_1_rel",
            PHON.ONSET con ] ].

budgerigar_n1 := n_intr_le &
 [ STEM < "budgerigar" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_budgerigar_n_1_rel",
            PHON.ONSET con ] ].

budget_n1 := n_intr_le &
 [ STEM < "budget" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_budget_n_1_rel",
            PHON.ONSET con ] ].

budgie_n1 := n_intr_le &
 [ STEM < "budgie" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_budgie_n_1_rel",
            PHON.ONSET con ] ].

budweiser_n1 := n_proper_le &
 [ STEM < "budweiser" >,
   SYNSEM [ LKEYS.KEYREL.CARG "budweiser",
            PHON.ONSET con ] ].

buechner_nd := n_proper_le &
 [ STEM < "buechner" >,
   SYNSEM [ LKEYS.KEYREL.CARG "buechner",
            PHON.ONSET con ] ].

buehne_nd := n_proper_le &
 [ STEM < "buehne" >,
   SYNSEM [ LKEYS.KEYREL.CARG "buehne",
            PHON.ONSET con ] ].

buff_adj := adj_intrans_le &
 [ STEM < "buff" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_buff_a_1_rel",
            PHON.ONSET con ] ].

buffalo_n1 := n_proper_city_le &
 [ STEM < "buffalo" >,
   SYNSEM [ LKEYS.KEYREL.CARG "buffalo",
            PHON.ONSET con ] ].

buffer_n1 := n_intr_le &
 [ STEM < "buffer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_buffer_n_1_rel",
            PHON.ONSET con ] ].

buffet_n1 := n_intr_le &
 [ STEM < "buffet" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_buffet_n_1_rel",
            PHON.ONSET con ] ].

buffet_v2 := v_np_trans_le &
 [ STEM < "buffet" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_buffet_v_1_rel",
            PHON.ONSET con ] ].

bug_n1 := n_intr_le &
 [ STEM < "bug" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bug_n_1_rel",
            PHON.ONSET con ] ].

bug_n2 := n_mass_le &
 [ STEM < "bug" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bug_n_sea_rel",
            PHON.ONSET con ] ].

bug_v1 := v_np_trans_le &
 [ STEM < "bug" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bug_v_1_rel",
            PHON.ONSET con ] ].

bugle_n1 := n_intr_le &
 [ STEM < "bugle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bugle_n_1_rel",
            PHON.ONSET con ] ].

build_in_v1 := v_particle_np_le &
 [ STEM < "build" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_build_v_in_rel" ],
            PHON.ONSET con ] ].

build_into_v1 := v_empty_prep_trans_le &
 [ STEM < "build" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _into_p_sel_rel,
                    KEYREL.PRED "_build_v_into_rel" ],
            PHON.ONSET con ] ].

build_on_v1 := v_empty_prep_intrans_le &
 [ STEM < "build" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_build_v_on_rel" ],
            PHON.ONSET con ] ].

build_on_v2 := v_particle_le &
 [ STEM < "build" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_build_v_on_rel" ],
            PHON.ONSET con ] ].

build_up_v1 := v_particle_np_le &
 [ STEM < "build" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_build_v_up_rel" ],
            PHON.ONSET con ] ].

build_up_v2 := v_particle_le &
 [ STEM < "build" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_build_v_up_rel" ],
            PHON.ONSET con ] ].

build_v1 := v_np*_trans_le &
 [ STEM < "build" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_build_v_1_rel",
            PHON.ONSET con ] ].

build_v2 := v_obj_equi_prd_le &
 [ STEM < "build" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_build_v_1_rel",
            PHON.ONSET con ] ].

builder_n1 := n_ppof_le &
 [ STEM < "builder" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_builder_n_of_rel",
            PHON.ONSET con ] ].

building_n1 := n_intr_le &
 [ STEM < "building" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_building_n_1_rel",
            PHON.ONSET con ] ].

building_post_ttl := n_post_title_le &
 [ STEM < "building" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_building_n_1_rel",
            PHON.ONSET con ] ].

built_in_a1 := adj_intrans_le &
 [ STEM < "built", "in" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_built+in_a_1_rel",
            PHON.ONSET con ] ].

built_in_a2 := adj_intrans_le &
 [ STEM < "built-", "in" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_built+in_a_1_rel",
            PHON.ONSET con ] ].

bukkehÃ¸_n1 := n_proper_le &
 [ STEM < "bukkehÃ¸" >,
   SYNSEM [ LKEYS.KEYREL.CARG "bukkehÃ¸",
            PHON.ONSET con ] ].

bukkelÃ¦geret_n1 := n_proper_le &
 [ STEM < "bukkelÃ¦geret" >,
   SYNSEM [ LKEYS.KEYREL.CARG "bukkelÃ¦geret",
            PHON.ONSET con ] ].

bulge_n1 := n_intr_le &
 [ STEM < "bulge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bulge_n_1_rel",
            PHON.ONSET con ] ].

bulge_v1 := v_unerg_le &
 [ STEM < "bulge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bulge_v_1_rel",
            PHON.ONSET con ] ].

bulk_n1 := n_mass_le &
 [ STEM < "bulk" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bulk_n_1_rel",
            PHON.ONSET con ] ].

bulkier := adj_comp_le &
 [ STEM < "bulkier" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bulky_a_1_rel",
            PHON.ONSET con ] ].

bulky_adj := adj_intrans_le &
 [ STEM < "bulky" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bulky_a_1_rel",
            PHON.ONSET con ] ].

bull_n1 := n_intr_le &
 [ STEM < "bull" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bull_n_1_rel",
            PHON.ONSET con ] ].

bullet_n1 := n_intr_le &
 [ STEM < "bullet" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bullet_n_1_rel",
            PHON.ONSET con ] ].

bullock_n1 := n_proper_le &
 [ STEM < "bullock" >,
   SYNSEM [ LKEYS.KEYREL.CARG "bullock",
            PHON.ONSET con ] ].

bully_n1 := n_intr_le &
 [ STEM < "bully" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bully_n_1_rel",
            PHON.ONSET con ] ].

bully_v1 := v_empty_prep*_trans_le &
 [ STEM < "bully" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _into_p_sel_rel,
                    KEYREL.PRED "_bully_v_into_rel" ],
            PHON.ONSET con ] ].

bum_n1 := n_intr_le &
 [ STEM < "bum" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bum_n_1_rel",
            PHON.ONSET con ] ].

bumblebee_n1 := n_intr_le &
 [ STEM < "bumblebee" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bumblebee_n_1_rel",
            PHON.ONSET con ] ].

bummer_n1 := n_intr_le &
 [ STEM < "bummer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bummer_n_1_rel",
            PHON.ONSET con ] ].

bump_into_v1 := v_empty_prep_intrans_le &
 [ STEM < "bump" >,
   SYNSEM [ LKEYS [ --COMPKEY _into_p_sel_rel,
                    KEYREL.PRED "_bump_v_into_rel" ],
            PHON.ONSET con ] ].

bump_n1 := n_intr_le &
 [ STEM < "bump" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bump_n_1_rel",
            PHON.ONSET con ] ].

bump_v1 := v_np*_trans_le &
 [ STEM < "bump" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bump_v_1_rel",
            PHON.ONSET con ] ].

bump_v2 := v_np_prep_trans_dors_le &
 [ STEM < "bump" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bump_v_1_rel",
            PHON.ONSET con ] ].

bunch_n1 := n_ppof_nosort_le &
 [ STEM < "bunch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bunch_n_of_rel",
            PHON.ONSET con ] ].

bunch_n2 := n_group_ppof_le &
 [ STEM < "bunch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bunch_n_of_rel",
            PHON.ONSET con ] ].

bunch_v1 := v_unerg_le &
 [ STEM < "bunch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bunch_v_1_rel",
            PHON.ONSET con ] ].

bund_n1 := n_proper_le &
 [ STEM < "bund" >,
   SYNSEM [ LKEYS.KEYREL.CARG "bund_n_1_rel",
            PHON.ONSET con ] ].

bundesbahn_n1 := n_intr_le &
 [ STEM < "bundesbahn" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bundesbahn_n_1_rel",
            PHON.ONSET con ] ].

bundle_n1 := n_intr_le &
 [ STEM < "bundle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bundle_n_1_rel",
            PHON.ONSET con ] ].

bundle_up_v1 := v_particle_np_le &
 [ STEM < "bundle" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_bundle_v_up_rel" ],
            PHON.ONSET con ] ].

bundle_up_v2 := v_particle_le &
 [ STEM < "bundle" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_bundle_v_up_rel" ],
            PHON.ONSET con ] ].

bundle_v1 := v_np_trans_le &
 [ STEM < "bundle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bundle_v_1_rel",
            PHON.ONSET con ] ].

bundle_v2 := v_np_prep_trans_dors_le &
 [ STEM < "bundle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bundle_v_1_rel",
            PHON.ONSET con ] ].

bunk_n1 := n_mass_count_le &
 [ STEM < "bunk" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bunk_n_1_rel",
            PHON.ONSET con ] ].

bunk_v1 := v_unerg_le &
 [ STEM < "bunk" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bunk_v_1_rel",
            PHON.ONSET con ] ].

bunt_n1 := n_intr_le &
 [ STEM < "bunt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bunt_n_1_rel",
            PHON.ONSET con ] ].

bunt_v1 := v_np*_trans_le &
 [ STEM < "bunt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bunt_v_1_rel",
            PHON.ONSET con ] ].

bunting_n1 := n_mass_le &
 [ STEM < "bunting" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bunting_n_1_rel",
            PHON.ONSET con ] ].

bunznudders_n1 := n_proper_le &
 [ STEM < "bunznudders" >,
   SYNSEM [ LKEYS.KEYREL.CARG "bunznudders",
            PHON.ONSET con ] ].

burden_v1 := v_np_trans_le &
 [ STEM < "burden" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_burden_v_1_rel",
            PHON.ONSET con ] ].

burdensome_a1 := adj_intrans_le &
 [ STEM < "burdensome" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_burdensome_a_1_rel",
            PHON.ONSET con ] ].

bureau_n1 := n_intr_le &
 [ STEM < "bureau" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bureau_n_1_rel",
            PHON.ONSET con ] ].

bureaucracy_n1 := n_intr_le &
 [ STEM < "bureaucracy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bureaucracy_n_1_rel",
            PHON.ONSET con ] ].

burgeon_v1 := v_unerg_le &
 [ STEM < "burgeon" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_burgeon_v_1_rel",
            PHON.ONSET con ] ].

burkina_faso_n1 := n_proper_le &
 [ STEM < "burkina", "faso" >,
   SYNSEM [ LKEYS.KEYREL.CARG "burkina_faso",
            PHON.ONSET con ] ].

burma_n1 := n_proper_le &
 [ STEM < "burma" >,
   SYNSEM [ LKEYS.KEYREL.CARG "burma",
            PHON.ONSET con ] ].

burn_down_v1 := v_particle_np_le &
 [ STEM < "burn" >,
   SYNSEM [ LKEYS [ --COMPKEY _down_p_sel_rel,
                    KEYREL.PRED "_burn_v_down_rel" ],
            PHON.ONSET con ] ].

burn_down_v2 := v_particle_le &
 [ STEM < "burn" >,
   SYNSEM [ LKEYS [ --COMPKEY _down_p_sel_rel,
                    KEYREL.PRED "_burn_v_down_rel" ],
            PHON.ONSET con ] ].

burn_n1 := n_intr_le &
 [ STEM < "burn" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_burn_n_1_rel",
            PHON.ONSET con ] ].

burn_off_v1 := v_particle_np_le &
 [ STEM < "burn" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_burn_v_off_rel" ],
            PHON.ONSET con ] ].

burn_off_v2 := v_particle_le &
 [ STEM < "burn" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_burn_v_off_rel" ],
            PHON.ONSET con ] ].

burn_out_v1 := v_particle_np_le &
 [ STEM < "burn" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_burn_v_out_rel" ],
            PHON.ONSET con ] ].

burn_out_v2 := v_particle_le &
 [ STEM < "burn" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_burn_v_out_rel" ],
            PHON.ONSET con ] ].

burn_up_v1 := v_particle_np_le &
 [ STEM < "burn" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_burn_v_up_rel" ],
            PHON.ONSET con ] ].

burn_up_v2 := v_particle_le &
 [ STEM < "burn" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_burn_v_up_rel" ],
            PHON.ONSET con ] ].

burn_v1 := v_np_trans_le &
 [ STEM < "burn" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_burn_v_cause_rel",
            PHON.ONSET con ] ].

burn_v2 := v_unacc_le &
 [ STEM < "burn" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_burn_v_1_rel",
            PHON.ONSET con ] ].

burner_n1 := n_intr_le &
 [ STEM < "burner" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_burner_n_1_rel",
            PHON.ONSET con ] ].

burr_n1 := n_proper_le &
 [ STEM < "burr" >,
   SYNSEM [ LKEYS.KEYREL.CARG "burr",
            PHON.ONSET con ] ].

burrow_n1 := n_intr_le &
 [ STEM < "burrow" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_burrow_n_1_rel",
            PHON.ONSET con ] ].

burrow_v1 := v_prep_dir_le &
 [ STEM < "burrow" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_burrow_v_1_rel",
            PHON.ONSET con ] ].

burst_n1 := n_intr_le &
 [ STEM < "burst" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_burst_n_1_rel",
            PHON.ONSET con ] ].

burst_v1 := v_np_trans_le &
 [ STEM < "burst" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_burst_v_cause_rel",
            PHON.ONSET con ] ].

burst_v2 := v_unacc_le &
 [ STEM < "burst" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_burst_v_1_rel",
            PHON.ONSET con ] ].

burst_v3 := v_prep_dir_le &
 [ STEM < "burst" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_burst_v_1_rel",
            PHON.ONSET con ] ].

bury_v1 := v_np_trans_le &
 [ STEM < "bury" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bury_v_1_rel",
            PHON.ONSET con ] ].

bus-line_n1 := n_intr_le &
 [ STEM < "bus", "line" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bus+line_n_1_rel",
            PHON.ONSET con ] ].

bus_in_v1 := v_particle_np_le &
 [ STEM < "bus" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_bus_v_in_rel" ],
            PHON.ONSET con ] ].

bus_n1 := n_intr_le &
 [ STEM < "bus" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bus_n_1_rel",
            PHON.ONSET con ] ].

bus_v1 := v_prep_dir_le &
 [ STEM < "bus" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bus_v_1_rel",
            PHON.ONSET con ] ].

bus_v2 := v_np_trans_noger_le &
 [ STEM < "bus" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bus_v_1_rel",
            PHON.ONSET con ] ].

busch_n1 := n_proper_le &
 [ STEM < "busch" >,
   SYNSEM [ LKEYS.KEYREL.CARG "busch",
            PHON.ONSET con ] ].

bush_n1 := n_mass_count_le &
 [ STEM < "bush" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bush_n_1_rel",
            PHON.ONSET con ] ].

bush_n2 := n_proper_le &
 [ STEM < "bush" >,
   SYNSEM [ LKEYS.KEYREL.CARG "bush",
            PHON.ONSET con ] ].

bushed_a1 := adj_intrans_le &
 [ STEM < "bushed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bushed_a_1_rel",
            PHON.ONSET con ] ].

bushel_n1 := n_meas_le &
 [ STEM < "bushel" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bushel_n_1_rel",
            PHON.ONSET con ] ].

bushy_a1 := adj_intrans_le &
 [ STEM < "bushy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bushy_a_1_rel",
            PHON.ONSET con ] ].

busier := adj_comp_le &
 [ STEM < "busier" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_busy_a_1_rel",
            PHON.ONSET con ] ].

busiest_a1 := adj_superl_le &
 [ STEM < "busiest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_busy_a_1_rel",
            PHON.ONSET con ] ].

busily := adv_int_vp_le &
 [ STEM < "busily" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_busy_a_1_rel",
            PHON.ONSET con ] ].

business_like_a1 := adj_intrans_le &
 [ STEM < "business", "like" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_business+like_a_1_rel",
            PHON.ONSET con ] ].

business_n1 := n_mass_count_le &
 [ STEM < "business" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_business_n_1_rel",
            PHON.ONSET con ] ].

businessman_n1 := n_intr_le &
 [ STEM < "businessman" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_businessman_n_1_rel",
            PHON.ONSET con ] ].

businesswoman_n1 := n_intr_le &
 [ STEM < "businesswoman" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_businesswoman_n_1_rel",
            PHON.ONSET con ] ].

bust_n1 := n_intr_le &
 [ STEM < "bust" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bust_n_1_rel",
            PHON.ONSET con ] ].

bust_v1 := v_np_trans_le &
 [ STEM < "bust" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bust_v_cause_rel",
            PHON.ONSET con ] ].

bust_v2 := v_unacc_le &
 [ STEM < "bust" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bust_v_1_rel",
            PHON.ONSET con ] ].

bustle_n1 := n_mass_count_le &
 [ STEM < "bustle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bustle_n_1_rel",
            PHON.ONSET con ] ].

bustle_v1 := v_unerg_le &
 [ STEM < "bustle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bustle_v_1_rel",
            PHON.ONSET con ] ].

busy_a1 := adj_intrans_le &
 [ STEM < "busy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_busy_a_1_rel",
            PHON.ONSET con ] ].

but_c_prop := comp_inf_but_le &
 [ STEM < "but" >,
   SYNSEM.PHON.ONSET con ].

but_conj := conj_complex_but_le &
 [ STEM < "but" >,
   SYNSEM.PHON.ONSET con ].

but_except_p := p_nospec_nogap_le &
 [ STEM < "but" >,
   SYNSEM [ LKEYS.KEYREL.PRED _but_p_except_rel,
            PHON.ONSET con ] ].

but_not_1 := conj_complex_but_not_le &
 [ STEM < "but", "not" >,
   SYNSEM.PHON.ONSET con ].

but_root_post := adv_s_post_word_nospec_le &
 [ STEM < "but" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_but_c_rel",
            PHON.ONSET con ] ].

but_then_1 := conj_complex_but_then_le &
 [ STEM < "but", "then" >,
   SYNSEM.PHON.ONSET con ].

butler_n1 := n_intr_le &
 [ STEM < "butler" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_butler_n_1_rel",
            PHON.ONSET con ] ].

butler_n2 := n_proper_le &
 [ STEM < "butler" >,
   SYNSEM [ LKEYS.KEYREL.CARG "butler",
            PHON.ONSET con ] ].

butt_n1 := n_intr_le &
 [ STEM < "butt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_butt_n_1_rel",
            PHON.ONSET con ] ].

butter_n1 := n_mass_le &
 [ STEM < "butter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_butter_n_1_rel",
            PHON.ONSET con ] ].

butter_v1 := v_np_trans_le &
 [ STEM < "butter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_butter_v_1_rel",
            PHON.ONSET con ] ].

buttercup_n1 := n_intr_le &
 [ STEM < "buttercup" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_buttercup_n_1_rel",
            PHON.ONSET con ] ].

butterfly_n1 := n_intr_le &
 [ STEM < "butterfly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_butterfly_n_1_rel",
            PHON.ONSET con ] ].

buttermilk_n1 := n_mass_le &
 [ STEM < "buttermilk" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_buttermilk_n_1_rel",
            PHON.ONSET con ] ].

button_n1 := n_intr_le &
 [ STEM < "button" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_button_n_1_rel",
            PHON.ONSET con ] ].

buttress_n1 := n_intr_le &
 [ STEM < "buttress" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_buttress_n_1_rel",
            PHON.ONSET con ] ].

buxom_a1 := adj_intrans_le &
 [ STEM < "buxom" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_buxom_a_1_rel",
            PHON.ONSET con ] ].

buy_into_v1 := v_empty_prep_intrans_le &
 [ STEM < "buy" >,
   SYNSEM [ LKEYS [ --COMPKEY _into_p_sel_rel,
                    KEYREL.PRED "_buy_v_into_rel" ],
            PHON.ONSET con ] ].

buy_n1 := n_intr_le &
 [ STEM < "buy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_buy_n_1_rel",
            PHON.ONSET con ] ].

buy_out_v1 := v_particle_np_le &
 [ STEM < "buy" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_buy_v_out_rel" ],
            PHON.ONSET con ] ].

buy_up_v1 := v_particle_np_le &
 [ STEM < "buy" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_buy_v_up_rel" ],
            PHON.ONSET con ] ].

buy_v1 := v_np*_trans_le &
 [ STEM < "buy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_buy_v_1_rel",
            PHON.ONSET con ] ].

buy_v4 := v_ditrans_only_le &
 [ STEM < "buy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_buy_v_1_rel",
            PHON.ONSET con ] ].

buy_v5 := v_empty_prep_trans_le &
 [ STEM < "buy" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _from_p_sel_rel,
                    KEYREL.PRED "_buy_v_from_rel" ],
            PHON.ONSET con ] ].

buyer_n1 := n_ppof_le &
 [ STEM < "buyer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_buyer_n_of_rel",
            PHON.ONSET con ] ].

buzz_n1 := n_mass_count_le &
 [ STEM < "buzz" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_buzz_n_1_rel",
            PHON.ONSET con ] ].

buzz_v1 := v_unerg_le &
 [ STEM < "buzz" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_buzz_v_1_rel",
            PHON.ONSET con ] ].

buzz_v2 := v_np_trans_le &
 [ STEM < "buzz" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_buzz_v_2_rel",
            PHON.ONSET con ] ].

by_adv := pp_dir_nomod_le &
 [ STEM < "by" >,
   SYNSEM [ LKEYS.KEYREL.PRED _by_p_rel,
            PHON.ONSET con ] ].

by_chance_adv1 := adv_int_vp_le &
 [ STEM < "by", "chance" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_by+chance_a_1_rel",
            PHON.ONSET con ] ].

by_far_adv1 := adv_int_vp_aux_le &
 [ STEM < "by", "far" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_by+far_a_1_rel",
            PHON.ONSET con ] ].

by_far_adv2 := adv_int_vp_post_le &
 [ STEM < "by", "far" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_by+far_a_1_rel",
            PHON.ONSET con ] ].

by_gum_root_post := adv_s_post_word_nospec_le &
 [ STEM < "by", "gum" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_by+gum_a_1_rel",
            PHON.ONSET con ] ].

by_gum_root_pre := adv_s_pre_word_root_le &
 [ STEM < "by", "gum" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_by+gum_a_1_rel",
            PHON.ONSET con ] ].

by_means := p_nbar_comp_le &
 [ STEM < "by" >,
   SYNSEM [ LKEYS [ --COMPKEY non_temp_nom_rel,
                    KEYREL.PRED _by_p_means_rel ],
            PHON.ONSET con ] ].

by_means_ger := p_gercomp_le &
 [ STEM < "by" >,
   SYNSEM [ LKEYS.KEYREL.PRED _by_p_means_rel,
            PHON.ONSET con ] ].

by_means_of := p_le &
 [ STEM < "by", "means", "of" >,
   SYNSEM [ LKEYS.KEYREL.PRED _by+means+of_p_rel,
            PHON.ONSET con ] ].

by_no_means_adv1 := adv_int_vp_aux_le &
 [ STEM < "by", "no", "means" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_by+no+means_a_1_rel",
            PHON.ONSET con ] ].

by_p := p_reg_degsp_le &
 [ STEM < "by" >,
   SYNSEM [ LKEYS.KEYREL.PRED _by_p_rel,
            PHON.ONSET con ] ].

by_pass_p := p_prtcl_le &
 [ STEM < "by" >,
   SYNSEM [ LKEYS [ --COMPKEY non_temp_nom_rel,
                    KEYREL.PRED _by_p_cm_rel ],
            PHON.ONSET con ] ].

by_prtcl := p_prtcl_le &
 [ STEM < "by" >,
   SYNSEM [ LKEYS.KEYREL.PRED _by_p_sel_rel,
            PHON.ONSET con ] ].

by_temp_p := p_temp_vmod_le &
 [ STEM < "by" >,
   SYNSEM [ LKEYS [ --COMPKEY temp_abstr_rel,
                    KEYREL.PRED _by_p_temp_rel ],
            PHON.ONSET con ] ].

by_the_hour := adv_int_vp_post_le &
 [ STEM < "by", "the", "hour" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_by+the+hour_a_1_rel",
            PHON.ONSET con ] ].

by_the_way := adv_int_vp_le &
 [ STEM < "by", "the", "way" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_by+the+way_a_1_rel",
            PHON.ONSET con ] ].

by_the_way_adv1 := adv_int_vp_post_le &
 [ STEM < "by", "the", "way" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_by+the+way_a_1_rel",
            PHON.ONSET con ] ].

by_the_way_adv2 := adv_int_vp_aux_le &
 [ STEM < "by", "the", "way" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_by+the+way_a_1_rel",
            PHON.ONSET con ] ].

by_way_of := p_reg_le &
 [ STEM < "by", "way", "of" >,
   SYNSEM [ LKEYS.KEYREL.PRED _by+way+of_p_rel,
            PHON.ONSET con ] ].

bye_bye_root_post := adv_disc_posth_grt_le &
 [ STEM < "bye", "bye" >,
   SYNSEM [ LKEYS.KEYREL.CARG "bye_bye",
            PHON.ONSET con ] ].

bye_bye_root_pre := adv_disc_preh_grt_le &
 [ STEM < "bye", "bye" >,
   SYNSEM [ LKEYS.KEYREL.CARG "bye_bye",
            PHON.ONSET con ] ].

bye_root_post := adv_disc_posth_grt_le &
 [ STEM < "bye" >,
   SYNSEM [ LKEYS.KEYREL.CARG "bye",
            PHON.ONSET con ] ].

bye_root_pre := adv_disc_preh_grt_le &
 [ STEM < "bye" >,
   SYNSEM [ LKEYS.KEYREL.CARG "bye",
            PHON.ONSET con ] ].

byfjellene_n1 := n_proper_city_le &
 [ STEM < "byfjellene" >,
   SYNSEM [ LKEYS.KEYREL.CARG "byfjellene",
            PHON.ONSET con ] ].

bygdin := n_proper_le &
 [ STEM < "bygdin" >,
   SYNSEM [ LKEYS.KEYREL.CARG "bygdin",
            PHON.ONSET con ] ].

bygdisheim_n1 := n_proper_le &
 [ STEM < "bygdisheim" >,
   SYNSEM [ LKEYS.KEYREL.CARG "bygdisheim",
            PHON.ONSET con ] ].

bygin_n1 := n_proper_le &
 [ STEM < "bygin" >,
   SYNSEM [ LKEYS.KEYREL.CARG "bygin",
            PHON.ONSET con ] ].

bypass_n1 := n_intr_le &
 [ STEM < "bypass" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bypass_n_1_rel",
            PHON.ONSET con ] ].

bypass_v1 := v_np*_trans_le &
 [ STEM < "bypass" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bypass_v_1_rel",
            PHON.ONSET con ] ].

byway_n1 := n_intr_le &
 [ STEM < "byway" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_byway_n_1_rel",
            PHON.ONSET con ] ].

bÃ¸relva := n_proper_le &
 [ STEM < "bÃ¸relva" >,
   SYNSEM [ LKEYS.KEYREL.CARG "bÃ¸relva",
            PHON.ONSET con ] ].

bÃ¸rgefjell_n1 := n_proper_city_le &
 [ STEM < "bÃ¸rgefjell" >,
   SYNSEM [ LKEYS.KEYREL.CARG "bÃ¸rgefjell",
            PHON.ONSET con ] ].

bÃ¸rtinden := n_proper_le &
 [ STEM < "bÃ¸rtinden" >,
   SYNSEM [ LKEYS.KEYREL.CARG "bÃ¸rtinden",
            PHON.ONSET con ] ].

bÃ¸rvasstindene := n_proper_le &
 [ STEM < "bÃ¸rvasstindene" >,
   SYNSEM [ LKEYS.KEYREL.CARG "bÃ¸rvasstindene",
            PHON.ONSET con ] ].

bÃ¸rvatnet := n_proper_le &
 [ STEM < "bÃ¸rvatnet" >,
   SYNSEM [ LKEYS.KEYREL.CARG "bÃ¸rvatnet",
            PHON.ONSET con ] ].

bÃ¸verbreen_n1 := n_proper_le &
 [ STEM < "bÃ¸verbreen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "bÃ¸verbreen",
            PHON.ONSET con ] ].

bÃ¸verdalen_n1 := n_proper_le &
 [ STEM < "bÃ¸verdalen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "bÃ¸verdalen",
            PHON.ONSET con ] ].

bÃ¸verdaler_n1 := n_intr_le &
 [ STEM < "bÃ¸verdaler" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bÃ¸verdaler_n_1_rel",
            PHON.ONSET con ] ].

bÃ¸vertun_n1 := n_proper_le &
 [ STEM < "bÃ¸vertun" >,
   SYNSEM [ LKEYS.KEYREL.CARG "bÃ¸vertun",
            PHON.ONSET con ] ].

bÃ¸yabreen := n_proper_le &
 [ STEM < "bÃ¸yabreen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "bÃ¸yabreen",
            PHON.ONSET con ] ].

bÃ¸yesen_n1 := n_proper_le &
 [ STEM < "bÃ¸yesen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "bÃ¸yesen",
            PHON.ONSET con ] ].

c-technologies_n1 := n_proper_le &
 [ STEM < "c-", "technologies" >,
   SYNSEM [ LKEYS.KEYREL.CARG "c-technologies",
            PHON.ONSET con ] ].

c-technologies_n2 := n_proper_le &
 [ STEM < "c", "technologies" >,
   SYNSEM [ LKEYS.KEYREL.CARG "c-technologies",
            PHON.ONSET con ] ].

c_n1 := n_proper_le &
 [ STEM < "c" >,
   SYNSEM [ LKEYS.KEYREL.CARG "c",
            PHON.ONSET con ] ].

c_np1 := n_proper_le &
 [ STEM < "_c" >,
   SYNSEM [ LKEYS.KEYREL.CARG "c",
            PHON.ONSET con ] ].

c_period_np1 := n_proper_le &
 [ STEM < "c." >,
   SYNSEM [ LKEYS.KEYREL.CARG "c",
            PHON.ONSET con ] ].

c_period_np2 := n_proper_le &
 [ STEM < "_c." >,
   SYNSEM [ LKEYS.KEYREL.CARG "c",
            PHON.ONSET con ] ].

cab_n1 := n_intr_le &
 [ STEM < "cab" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cab_n_1_rel",
            PHON.ONSET con ] ].

cabbage_n1 := n_mass_count_le &
 [ STEM < "cabbage" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cabbage_n_1_rel",
            PHON.ONSET con ] ].

cabin_n1 := n_intr_le &
 [ STEM < "cabin" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cabin_n_1_rel",
            PHON.ONSET con ] ].

cabin_post_ttl := n_post_title_le &
 [ STEM < "cabin" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cabin_n_1_rel",
            PHON.ONSET con ] ].

cable_n := n_intr_le &
 [ STEM < "cable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cable_n_1_rel",
            PHON.ONSET con ] ].

cable_v1 := v_ditrans_le &
 [ STEM < "cable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cable_v_1_rel",
            PHON.ONSET con ] ].

cactus_n1 := n_intr_le &
 [ STEM < "cactus" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cactus_n_1_rel",
            PHON.ONSET con ] ].

cadmium_n1 := n_mass_count_le &
 [ STEM < "cadmium" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cadmium_n_1_rel",
            PHON.ONSET con ] ].

caduceus_n1 := n_intr_le &
 [ STEM < "caduceus" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_caduceus_n_1_rel",
            PHON.ONSET con ] ].

caesar_n1 := n_proper_le &
 [ STEM < "caesar" >,
   SYNSEM [ LKEYS.KEYREL.CARG "caesar",
            PHON.ONSET con ] ].

caesar_ttl := n_title_le &
 [ STEM < "caesar" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_caesar_n_1_rel",
            PHON.ONSET con ] ].

cafe_n1 := n_intr_le &
 [ STEM < "cafe" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cafe_n_1_rel",
            PHON.ONSET con ] ].

cafe_n2 := n_intr_le &
 [ STEM < "cafÃ©" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cafe_n_1_rel",
            PHON.ONSET con ] ].

cafe_post_ttl := n_post_title_le &
 [ STEM < "cafe" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cafe_n_1_rel",
            PHON.ONSET con ] ].

cafe_post_ttl2 := n_post_title_le &
 [ STEM < "cafÃ©" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cafe_n_1_rel",
            PHON.ONSET con ] ].

cafeteria_n1 := n_intr_le &
 [ STEM < "cafeteria" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cafeteria_n_1_rel",
            PHON.ONSET con ] ].

caffeinated_a1 := adj_intrans_le &
 [ STEM < "caffeinated" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_caffeinated_a_1_rel",
            PHON.ONSET con ] ].

caffeine_n1 := n_mass_le &
 [ STEM < "caffeine" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_caffeine_n_1_rel",
            PHON.ONSET con ] ].

cage_n1 := n_intr_le &
 [ STEM < "cage" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cage_n_1_rel",
            PHON.ONSET con ] ].

cage_n2 := n_proper_le &
 [ STEM < "cage" >,
   SYNSEM [ LKEYS.KEYREL.CARG "cage",
            PHON.ONSET con ] ].

cage_v1 := v_np_trans_le &
 [ STEM < "cage" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cage_v_1_rel",
            PHON.ONSET con ] ].

cai_yuanpei_n1 := n_proper_le &
 [ STEM < "cai", "yuanpei" >,
   SYNSEM [ LKEYS.KEYREL.CARG "cai_yuanpei",
            PHON.ONSET voc ] ].

cairn_n1 := n_intr_le &
 [ STEM < "cairn" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cairn_n_1_rel",
            PHON.ONSET con ] ].

cairned_a1 := adj_intrans_le &
 [ STEM < "cairned" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cairned_a_1_rel",
            PHON.ONSET con ] ].

caisson_n1 := n_intr_le &
 [ STEM < "caisson" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_caisson_n_1_rel",
            PHON.ONSET con ] ].

cajole_v1 := v_obj_equi_le &
 [ STEM < "cajole" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cajole_v_1_rel",
            PHON.ONSET con ] ].

cajole_v2 := v_np*_trans_le &
 [ STEM < "cajole" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cajole_v_1_rel",
            PHON.ONSET con ] ].

cake_n1 := n_intr_le &
 [ STEM < "cake" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cake_n_1_rel",
            PHON.ONSET con ] ].

calamitous_a1 := adj_intrans_le &
 [ STEM < "calamitous" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_calamitous_a_1_rel",
            PHON.ONSET con ] ].

calcareous_a1 := adj_intrans_le &
 [ STEM < "calcareous" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_calcareous_a_1_rel",
            PHON.ONSET con ] ].

calcify_v1 := v_np_trans_le &
 [ STEM < "calcify" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_calcify_v_1_rel",
            PHON.ONSET con ] ].

calcium_n1 := n_mass_le &
 [ STEM < "calcium" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_calcium_n_1_rel",
            PHON.ONSET con ] ].

calculate_v1 := v_np_trans_le &
 [ STEM < "calculate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_calculate_v_1_rel",
            PHON.ONSET con ] ].

calculate_v2 := v_cp_non_trans_le &
 [ STEM < "calculate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_calculate_v_1_rel",
            PHON.ONSET con ] ].

calculation_n1 := n_ppof_le &
 [ STEM < "calculation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_calculation_n_of_rel",
            PHON.ONSET con ] ].

calculator_n1 := n_intr_le &
 [ STEM < "calculator" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_calculator_n_1_rel",
            PHON.ONSET con ] ].

calculous_a1 := adj_intrans_le &
 [ STEM < "calculous" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_calculous_a_1_rel",
            PHON.ONSET con ] ].

calculus_n1 := n_mass_count_le &
 [ STEM < "calculus" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_calculus_n_1_rel",
            PHON.ONSET con ] ].

caldera_n1 := n_intr_le &
 [ STEM < "caldera" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_caldera_n_1_rel",
            PHON.ONSET con ] ].

calendar_n1 := n_intr_le &
 [ STEM < "calendar" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_calendar_n_1_rel",
            PHON.ONSET con ] ].

calender_n1 := n_intr_le &
 [ STEM < "calender" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_calender_n_1_rel",
            PHON.ONSET con ] ].

calender_v1 := v_np_trans_le &
 [ STEM < "calender" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_calender_v_1_rel",
            PHON.ONSET con ] ].

calf_n1 := n_intr_le &
 [ STEM < "calf" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_calf_n_1_rel",
            PHON.ONSET con ] ].

calgary_n1 := n_proper_city_le &
 [ STEM < "calgary" >,
   SYNSEM [ LKEYS.KEYREL.CARG "calgary",
            PHON.ONSET con ] ].

calhoun_n1 := n_proper_le &
 [ STEM < "calhoun" >,
   SYNSEM [ LKEYS.KEYREL.CARG "calhoun",
            PHON.ONSET con ] ].

caliber_n1 := n_intr_le &
 [ STEM < "caliber" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_caliber_n_1_rel",
            PHON.ONSET con ] ].

calibre_n1 := n_intr_le &
 [ STEM < "calibre" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_calibre_n_1_rel",
            PHON.ONSET con ] ].

caliente_n1 := n_mass_count_le &
 [ STEM < "caliente" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_caliente_n_1_rel",
            PHON.ONSET con ] ].

california_n1 := n_proper_le &
 [ STEM < "california" >,
   SYNSEM [ LKEYS.KEYREL.CARG "california",
            PHON.ONSET con ] ].

california_n2 := n_proper_abb_le &
 [ STEM < "ca" >,
   SYNSEM [ LKEYS.KEYREL.CARG "california",
            PHON.ONSET con ] ].

caligula_n1 := n_proper_le &
 [ STEM < "caligula" >,
   SYNSEM [ LKEYS.KEYREL.CARG "caligula",
            PHON.ONSET con ] ].

call_back_v1 := v_particle_np_le &
 [ STEM < "call" >,
   SYNSEM [ LKEYS [ --COMPKEY _back_p_sel_rel,
                    KEYREL.PRED "_call_v_back_rel" ],
            PHON.ONSET con ] ].

call_back_v2 := v_particle_le &
 [ STEM < "call" >,
   SYNSEM [ LKEYS [ --COMPKEY _back_p_sel_rel,
                    KEYREL.PRED "_call_v_back_rel" ],
            PHON.ONSET con ] ].

call_ditrans_v1 := v_ditrans_only_le &
 [ STEM < "call" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_call_v_name_rel",
            PHON.ONSET con ] ].

call_for_v1 := v_empty_prep_intrans_le &
 [ STEM < "call" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_call_v_for_rel" ],
            PHON.ONSET con ] ].

call_n1 := n_intr_le &
 [ STEM < "call" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_call_n_1_rel",
            PHON.ONSET con ] ].

call_off_v1 := v_particle_np_le &
 [ STEM < "call" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_call_v_off_rel" ],
            PHON.ONSET con ] ].

call_quits_v1_i := v_ditrans_only_idiom_le &
 [ STEM < "call" >,
   SYNSEM [ LKEYS [ --COMPKEY pron_rel,
                    KEYREL.PRED "_call_v_i_rel" ],
            PHON.ONSET con ] ].

call_up_v1 := v_particle_np_le &
 [ STEM < "call" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_call_v_up_rel" ],
            PHON.ONSET con ] ].

call_v1 := v_np*_trans_le &
 [ STEM < "call" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_call_v_1_rel",
            PHON.ONSET con ] ].

call_v2 := v_subj_equi_le &
 [ STEM < "call" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_call_v_1_rel",
            PHON.ONSET con ] ].

call_v3 := v_obj_equi_prd_le &
 [ STEM < "call" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_call_v_1_rel",
            PHON.ONSET con ] ].

call_v4 := v_np_prep_trans_le &
 [ STEM < "call" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _about_p_rel,
                    KEYREL.PRED "_call_v_1_rel" ],
            PHON.ONSET con ] ].

caller_n1 := n_ppof_le &
 [ STEM < "caller" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_caller_n_of_rel",
            PHON.ONSET con ] ].

calligrapher_n1 := n_intr_le &
 [ STEM < "calligrapher" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_calligrapher_n_1_rel",
            PHON.ONSET con ] ].

calligraphy_n1 := n_mass_le &
 [ STEM < "calligraphy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_calligraphy_n_1_rel",
            PHON.ONSET con ] ].

callosity_a1 := n_intr_le &
 [ STEM < "callosity" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_callosity_a_1_rel",
            PHON.ONSET con ] ].

callyx_n1 := n_intr_le &
 [ STEM < "callyx" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_callyx_n_1_rel",
            PHON.ONSET con ] ].

calm_a1 := adj_intrans_le &
 [ STEM < "calm" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_calm_a_1_rel",
            PHON.ONSET con ] ].

calm_down_v1 := v_particle_np_le &
 [ STEM < "calm" >,
   SYNSEM [ LKEYS [ --COMPKEY _down_p_sel_rel,
                    KEYREL.PRED "_calm_v_down_rel" ],
            PHON.ONSET con ] ].

calm_down_v2 := v_particle_le &
 [ STEM < "calm" >,
   SYNSEM [ LKEYS [ --COMPKEY _down_p_sel_rel,
                    KEYREL.PRED "_calm_v_down_rel" ],
            PHON.ONSET con ] ].

calm_n1 := n_mass_le &
 [ STEM < "calm" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_calm_n_1_rel",
            PHON.ONSET con ] ].

calm_v1 := v_np_trans_le &
 [ STEM < "calm" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_calm_v_1_rel",
            PHON.ONSET con ] ].

calmly := adv_int_vp_le &
 [ STEM < "calmly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_calm_a_1_rel",
            PHON.ONSET con ] ].

calorie_n1 := n_intr_le &
 [ STEM < "calorie" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_calorie_n_1_rel",
            PHON.ONSET con ] ].

cam_n1 := n_intr_le &
 [ STEM < "cam" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cam_n_1_rel",
            PHON.ONSET con ] ].

camber_n1 := n_intr_le &
 [ STEM < "camber" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_camber_n_1_rel",
            PHON.ONSET con ] ].

cambridge_n1 := n_proper_city_le &
 [ STEM < "cambridge" >,
   SYNSEM [ LKEYS.KEYREL.CARG "cambridge",
            PHON.ONSET con ] ].

camcorder_n1 := n_intr_le &
 [ STEM < "camcorder" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_camcorder_n_1_rel",
            PHON.ONSET con ] ].

camera_n1 := n_intr_le &
 [ STEM < "camera" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_camera_n_1_rel",
            PHON.ONSET con ] ].

camouflage_n1 := n_mass_le &
 [ STEM < "camouflage" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_camouflage_n_1_rel",
            PHON.ONSET con ] ].

camouflage_v1 := v_np_trans_le &
 [ STEM < "camouflage" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_camouflage_v_1_rel",
            PHON.ONSET con ] ].

camp_a1 := adj_intrans_le &
 [ STEM < "camp" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_camp_a_1_rel",
            PHON.ONSET con ] ].

camp_n1 := n_mass_count_le &
 [ STEM < "camp" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_camp_n_1_rel",
            PHON.ONSET con ] ].

camp_out_v1 := v_particle_le &
 [ STEM < "camp" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_camp_v_out_rel" ],
            PHON.ONSET con ] ].

camp_v1 := v_unerg_le &
 [ STEM < "camp" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_camp_v_1_rel",
            PHON.ONSET con ] ].

campaign_n1 := n_intr_le &
 [ STEM < "campaign" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_campaign_n_1_rel",
            PHON.ONSET con ] ].

campaign_v1 := v_unerg_le &
 [ STEM < "campaign" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_campaign_v_1_rel",
            PHON.ONSET con ] ].

campfire_n1 := n_intr_le &
 [ STEM < "campfire" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_campfire_n_1_rel",
            PHON.ONSET con ] ].

campground_n1 := n_intr_le &
 [ STEM < "campground" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_campground_n_1_rel",
            PHON.ONSET con ] ].

camphor_n1 := n_mass_le &
 [ STEM < "camphor" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_camphor_n_1_rel",
            PHON.ONSET con ] ].

campsite_n1 := n_intr_le &
 [ STEM < "campsite" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_campsite_n_1_rel",
            PHON.ONSET con ] ].

campus_n1 := n_intr_le &
 [ STEM < "campus" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_campus_n_1_rel",
            PHON.ONSET con ] ].

can_aux_neg2 := va_modal_neg_le &
 [ STEM < "cannot" >,
   SYNSEM [ LKEYS.KEYREL.PRED _can_v_modal_rel,
            PHON.ONSET con ] ].

can_aux_neg_1 := va_modal_neg_le &
 [ STEM < "can't" >,
   SYNSEM [ LKEYS.KEYREL.PRED _can_v_modal_rel,
            PHON.ONSET con ] ].

can_aux_neg_2 := va_modal_neg_le &
 [ STEM < "can", "'t" >,
   SYNSEM [ LKEYS.KEYREL.PRED _can_v_modal_rel,
            PHON.ONSET con ] ].

can_aux_pos := va_modal_pos_le &
 [ STEM < "can" >,
   SYNSEM [ LKEYS.KEYREL.PRED _can_v_modal_rel,
            PHON.ONSET con ] ].

can_n1 := n_intr_le &
 [ STEM < "can" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_can_n_1_rel",
            PHON.ONSET con ] ].

can_v1 := v_np_trans_le &
 [ STEM < "can" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_can_v_1_rel",
            PHON.ONSET con ] ].

canada_n1 := n_proper_le &
 [ STEM < "canada" >,
   SYNSEM [ LKEYS.KEYREL.CARG "canada",
            PHON.ONSET con ] ].

canadian_a1 := adj_intrans_le &
 [ STEM < "canadian" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_canadian_a_1_rel",
            PHON.ONSET con ] ].

canadian_n1 := n_intr_le &
 [ STEM < "canadian" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_canadian_n_1_rel",
            PHON.ONSET con ] ].

canal_n1 := n_intr_le &
 [ STEM < "canal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_canal_n_1_rel",
            PHON.ONSET con ] ].

canaria_n1 := n_proper_city_le &
 [ STEM < "canaria" >,
   SYNSEM [ LKEYS.KEYREL.CARG "canaria",
            PHON.ONSET con ] ].

cancel_out_v1 := v_particle_np_le &
 [ STEM < "cancel" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_cancel_v_out_rel" ],
            PHON.ONSET con ] ].

cancel_out_v2 := v_particle_le &
 [ STEM < "cancel" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_cancel_v_out_rel" ],
            PHON.ONSET con ] ].

cancel_v1 := v_np*_trans_le &
 [ STEM < "cancel" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cancel_v_1_rel",
            PHON.ONSET con ] ].

cancelable_a1 := adj_intrans_le &
 [ STEM < "cancelable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cancelable_a_1_rel",
            PHON.ONSET con ] ].

cancellation_n1 := n_mass_count_ppof_le &
 [ STEM < "cancellation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cancellation_n_of_rel",
            PHON.ONSET con ] ].

cancelled_isect := adj_attr_intrans_le &
 [ STEM < "cancelled" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cancelled_a_1_rel",
            PHON.ONSET con ] ].

cancer_n1 := n_mass_count_le &
 [ STEM < "cancer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cancer_n_1_rel",
            PHON.ONSET con ] ].

cancun_n1 := n_proper_city_le &
 [ STEM < "cancun" >,
   SYNSEM [ LKEYS.KEYREL.CARG "cancun",
            PHON.ONSET con ] ].

candidate_n1 := n_intr_le &
 [ STEM < "candidate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_candidate_n_1_rel",
            PHON.ONSET con ] ].

candle_n1 := n_intr_le &
 [ STEM < "candle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_candle_n_1_rel",
            PHON.ONSET con ] ].

candy_n1 := n_mass_count_le &
 [ STEM < "candy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_candy_n_1_rel",
            PHON.ONSET con ] ].

cane_n1 := n_intr_le &
 [ STEM < "cane" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cane_n_1_rel",
            PHON.ONSET con ] ].

canine_a1 := adj_intrans_le &
 [ STEM < "canine" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_canine_a_1_rel",
            PHON.ONSET con ] ].

canine_n1 := n_intr_le &
 [ STEM < "canine" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_canine_n_1_rel",
            PHON.ONSET con ] ].

cannabis_n1 := n_mass_le &
 [ STEM < "cannabis" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cannabis_n_1_rel",
            PHON.ONSET con ] ].

cannon_n1 := n_intr_le &
 [ STEM < "cannon" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cannon_n_1_rel",
            PHON.ONSET con ] ].

canon_n1 := n_proper_le &
 [ STEM < "canon" >,
   SYNSEM [ LKEYS.KEYREL.CARG "canon",
            PHON.ONSET con ] ].

canopy_n1 := n_intr_le &
 [ STEM < "canopy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_canopy_n_1_rel",
            PHON.ONSET con ] ].

canteen_n1 := n_intr_le &
 [ STEM < "canteen" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_canteen_n_1_rel",
            PHON.ONSET con ] ].

canterbury_n1 := n_proper_le &
 [ STEM < "canterbury" >,
   SYNSEM [ LKEYS.KEYREL.CARG "canterbury",
            PHON.ONSET con ] ].

canvas_n1 := n_mass_count_le &
 [ STEM < "canvas" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_canvas_n_1_rel",
            PHON.ONSET con ] ].

canyon_n1 := n_intr_le &
 [ STEM < "canyon" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_canyon_n_1_rel",
            PHON.ONSET con ] ].

caobao_n1 := n_proper_le &
 [ STEM < "caobao" >,
   SYNSEM [ LKEYS.KEYREL.CARG "caobao",
            PHON.ONSET con ] ].

caohejing_n1 := n_proper_le &
 [ STEM < "caohejing" >,
   SYNSEM [ LKEYS.KEYREL.CARG "caohejing",
            PHON.ONSET con ] ].

caoxi_n1 := n_proper_le &
 [ STEM < "caoxi" >,
   SYNSEM [ LKEYS.KEYREL.CARG "caoxi",
            PHON.ONSET con ] ].

cap_n1 := n_intr_le &
 [ STEM < "cap" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cap_n_1_rel",
            PHON.ONSET con ] ].

cap_v1 := v_empty_prep*_trans_le &
 [ STEM < "cap" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _at_p_sel_rel,
                    KEYREL.PRED "_cap_v_at_rel" ],
            PHON.ONSET con ] ].

capability_n1 := n_mass_count_ppcomp_le &
 [ STEM < "capability" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_capability_n_to_rel" ],
            PHON.ONSET con ] ].

capable_a1 := adj_trans_le &
 [ STEM < "capable" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_capable_a_of_rel" ],
            PHON.ONSET con ] ].

capacious_a1 := adj_intrans_le &
 [ STEM < "capacious" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_capacious_a_1_rel",
            PHON.ONSET con ] ].

capacity_n1 := n_intr_le &
 [ STEM < "capacity" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_capacity_n_1_rel",
            PHON.ONSET con ] ].

cape_n1 := n_intr_le &
 [ STEM < "cape" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cape_n_1_rel",
            PHON.ONSET con ] ].

capillary_n1 := n_intr_le &
 [ STEM < "capillary" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_capillary_n_1_rel",
            PHON.ONSET con ] ].

capital_a1 := adj_intrans_le &
 [ STEM < "capital" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_capital_a_1_rel",
            PHON.ONSET con ] ].

capital_n1 := n_intr_le &
 [ STEM < "capital" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_capital_n_1_rel",
            PHON.ONSET con ] ].

capitalist_a1 := adj_intrans_le &
 [ STEM < "capitalist" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_capitalist_a_1_rel",
            PHON.ONSET con ] ].

capitalist_n1 := n_intr_le &
 [ STEM < "capitalist" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_capitalist_n_1_rel",
            PHON.ONSET con ] ].

capitalize_on_v1 := v_empty_prep_intrans_le &
 [ STEM < "capitalize" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_capitalize_v_on_rel" ],
            PHON.ONSET con ] ].

capitalize_v1 := v_unerg_le &
 [ STEM < "capitalize" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_capitalize_v_1_rel",
            PHON.ONSET con ] ].

capitulum_n1 := n_intr_le &
 [ STEM < "capitulum" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_capitulum_n_1_rel",
            PHON.ONSET con ] ].

capricious_a1 := adj_intrans_le &
 [ STEM < "capricious" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_capricious_a_1_rel",
            PHON.ONSET con ] ].

capsule_n1 := n_intr_le &
 [ STEM < "capsule" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_capsule_n_1_rel",
            PHON.ONSET con ] ].

captain_n := n_ppof_le &
 [ STEM < "captain" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_captain_n_of_rel",
            PHON.ONSET con ] ].

captain_ttl := n_title_le &
 [ STEM < "captain" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_captain_n_of_rel",
            PHON.ONSET con ] ].

captains_bend_n1 := n_proper_le &
 [ STEM < "captain", "'s", "bend" >,
   SYNSEM [ LKEYS.KEYREL.CARG "captains_bend",
            PHON.ONSET con ] ].

captivate_v1 := v_np_trans_le &
 [ STEM < "captivate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_captivate_v_1_rel",
            PHON.ONSET con ] ].

capture_n1 := n_mass_count_ppof_le &
 [ STEM < "capture" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_capture_n_of_rel",
            PHON.ONSET con ] ].

capture_v1 := v_np_trans_le &
 [ STEM < "capture" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_capture_v_1_rel",
            PHON.ONSET con ] ].

car-pool_n1 := n_intr_le &
 [ STEM < "car", "pool" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_car+pool_n_1_rel",
            PHON.ONSET con ] ].

car_n1 := n_intr_le &
 [ STEM < "car" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_car_n_1_rel",
            PHON.ONSET con ] ].

carbon_n1 := n_mass_count_le &
 [ STEM < "carbon" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_carbon_n_1_rel",
            PHON.ONSET con ] ].

carbonate_n1 := n_mass_count_le &
 [ STEM < "carbonate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_carbonate_n_1_rel",
            PHON.ONSET con ] ].

carbonic_a1 := adj_intrans_le &
 [ STEM < "carbonic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_carbonic_a_1_rel",
            PHON.ONSET con ] ].

card_gle := adj_bare_unspecified_card_three_le &
 [ STEM < "_card_" >,
   SYNSEM.LKEYS.KEYREL.CARG "_card_" ].

card_n1 := n_intr_le &
 [ STEM < "card" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_card_n_1_rel",
            PHON.ONSET con ] ].

cardiac_a1 := adj_intrans_le &
 [ STEM < "cardiac" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cardiac_a_1_rel",
            PHON.ONSET con ] ].

cardinal_a1 := adj_intrans_le &
 [ STEM < "cardinal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cardinal_a_1_rel",
            PHON.ONSET con ] ].

cardinal_n1 := n_intr_le &
 [ STEM < "cardinal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cardinal_n_1_rel",
            PHON.ONSET con ] ].

cardwithcommas := adj_bare_unspecified_card_three_le &
 [ STEM < "numberersatz" >,
   SYNSEM [ LKEYS.KEYREL.CARG "card3ersatz",
            PHON.ONSET onset ] ].

care_about_v1 := v_empty_prep_intrans_le &
 [ STEM < "care" >,
   SYNSEM [ LKEYS [ --COMPKEY _about_p_sel_rel,
                    KEYREL.PRED "_care_v_about_rel" ],
            PHON.ONSET con ] ].

care_for_v1 := v_empty_prep_intrans_le &
 [ STEM < "care" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_care_v_for_rel" ],
            PHON.ONSET con ] ].

care_n1 := n_mass_le &
 [ STEM < "care" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_care_n_1_rel",
            PHON.ONSET con ] ].

care_n1_i := n_intr_nospr_le &
 [ STEM < "care" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_care_n_1_rel",
            PHON.ONSET con ] ].

care_of_prep := p_reg_le &
 [ STEM < "c/o" >,
   SYNSEM [ LKEYS.KEYREL.PRED _care+of_p_rel,
            PHON.ONSET con ] ].

care_of_prep_2 := p_reg_le &
 [ STEM < "c", "/", "o" >,
   SYNSEM [ LKEYS.KEYREL.PRED _care+of_p_rel,
            PHON.ONSET con ] ].

care_of_prep_3 := p_reg_le &
 [ STEM < "care", "of" >,
   SYNSEM [ LKEYS.KEYREL.PRED _care+of_p_rel,
            PHON.ONSET con ] ].

care_v1 := v_unerg_le &
 [ STEM < "care" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_care_v_1_rel",
            PHON.ONSET con ] ].

care_v2 := v_cp_non_trans_le &
 [ STEM < "care" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_care_v_1_rel",
            PHON.ONSET con ] ].

care_v3 := v_subj_equi_le &
 [ STEM < "care" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_care_v_1_rel",
            PHON.ONSET voc ] ].

careen_v1 := v_prep_dir_le &
 [ STEM < "careen" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_careen_v_1_rel",
            PHON.ONSET con ] ].

career_n1 := n_intr_le &
 [ STEM < "career" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_career_n_1_rel",
            PHON.ONSET con ] ].

careful_a1 := adj_trans_le &
 [ STEM < "careful" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_careful_a_with-about-of_rel" ],
            PHON.ONSET con ] ].

careful_a3 := adj_trans_oblig_le &
 [ STEM < "careful" >,
   SYNSEM [ LKEYS [ --COMPKEY _about_p_sel_rel,
                    KEYREL.PRED "_careful_a_with-about-of_rel" ],
            PHON.ONSET con ] ].

careful_a4 := adj_trans_oblig_le &
 [ STEM < "careful" >,
   SYNSEM [ LKEYS [ --COMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_careful_a_with-about-of_rel" ],
            PHON.ONSET con ] ].

carefully := adv_int_vp_le &
 [ STEM < "carefully" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_careful_a_with-about-of_rel",
            PHON.ONSET con ] ].

careless_a1 := adj_intrans_le &
 [ STEM < "careless" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_careless_a_1_rel",
            PHON.ONSET con ] ].

carelessly := adv_int_vp_le &
 [ STEM < "carelessly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_careless_a_1_rel",
            PHON.ONSET con ] ].

caretaker_n1 := n_ppof_le &
 [ STEM < "caretaker" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_caretaker_n_of_rel",
            PHON.ONSET con ] ].

cargo_n1 := n_mass_count_le &
 [ STEM < "cargo" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cargo_n_1_rel",
            PHON.ONSET con ] ].

caribbean_a1 := adj_intrans_le &
 [ STEM < "caribbean" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_caribbean_a_1_rel",
            PHON.ONSET con ] ].

caricature_n := n_intr_le &
 [ STEM < "caricature" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_caricature_n_1_rel",
            PHON.ONSET con ] ].

carmen_n1 := n_proper_le &
 [ STEM < "carmen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "carmen",
            PHON.ONSET con ] ].

carnival := n_holiday_le &
 [ STEM < "carnival" >,
   SYNSEM [ LKEYS.KEYREL.CARG "carnival",
            PHON.ONSET con ] ].

carnival_n1 := n_intr_le &
 [ STEM < "carnival" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_carnival_n_1_rel",
            PHON.ONSET con ] ].

carnivora_n1 := n_plur_le &
 [ STEM < "carnivora" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_carnivora_n_1_rel",
            PHON.ONSET con ] ].

carnivorous_a1 := adj_intrans_le &
 [ STEM < "carnivorous" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_carnivorous_a_1_rel",
            PHON.ONSET con ] ].

carol := n_proper_le &
 [ STEM < "carol" >,
   SYNSEM [ LKEYS.KEYREL.CARG "carol",
            PHON.ONSET con ] ].

carolingian_a1 := adj_intrans_le &
 [ STEM < "carolingian" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_carolingian_a_1_rel",
            PHON.ONSET con ] ].

carpentry_n1 := n_mass_le &
 [ STEM < "carpentry" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_carpentry_n_1_rel",
            PHON.ONSET con ] ].

carpet_n1 := n_mass_count_le &
 [ STEM < "carpet" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_carpet_n_1_rel",
            PHON.ONSET con ] ].

carpet_v1 := v_np_trans_le &
 [ STEM < "carpet" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_carpet_v_1_rel",
            PHON.ONSET con ] ].

carriage_n1 := n_intr_le &
 [ STEM < "carriage" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_carriage_n_1_rel",
            PHON.ONSET con ] ].

carribean_n1 := n_intr_named_le &
 [ STEM < "carribean" >,
   SYNSEM [ LKEYS.KEYREL.CARG "carribean",
            PHON.ONSET con ] ].

carrier_n1 := n_ppof_le &
 [ STEM < "carrier" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_carrier_n_of_rel",
            PHON.ONSET con ] ].

carrot_n1 := n_intr_le &
 [ STEM < "carrot" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_carrot_n_1_rel",
            PHON.ONSET con ] ].

carry_away_v1 := v_particle_np_le &
 [ STEM < "carry" >,
   SYNSEM [ LKEYS [ --COMPKEY _away_p_sel_rel,
                    KEYREL.PRED "_carry_v_away_rel" ],
            PHON.ONSET con ] ].

carry_in_v1 := v_particle_np_le &
 [ STEM < "carry" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_carry_v_in_rel" ],
            PHON.ONSET con ] ].

carry_on_n1 := n_intr_le &
 [ STEM < "carry", "on" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_carry+on_n_1_rel",
            PHON.ONSET con ] ].

carry_on_v1 := v_particle_np_le &
 [ STEM < "carry" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_carry_v_on_rel" ],
            PHON.ONSET con ] ].

carry_on_v2 := v_particle_le &
 [ STEM < "carry" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_carry_v_on_rel" ],
            PHON.ONSET con ] ].

carry_out_v1 := v_particle_np_le &
 [ STEM < "carry" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_carry_v_out_rel" ],
            PHON.ONSET con ] ].

carry_v1 := v_np_trans_le &
 [ STEM < "carry" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_carry_v_1_rel",
            PHON.ONSET con ] ].

carry_v2 := v_np_prep_trans_dors_le &
 [ STEM < "carry" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_carry_v_1_rel",
            PHON.ONSET con ] ].

carry_v3 := v_unerg_le &
 [ STEM < "carry" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_carry_v_sound_rel",
            PHON.ONSET con ] ].

cart_n1 := n_intr_le &
 [ STEM < "cart" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cart_n_1_rel",
            PHON.ONSET con ] ].

carter_n1 := n_proper_le &
 [ STEM < "carter" >,
   SYNSEM [ LKEYS.KEYREL.CARG "carter",
            PHON.ONSET con ] ].

carton_n1 := n_ppof_le &
 [ STEM < "carton" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_carton_n_of_rel",
            PHON.ONSET con ] ].

cartridge_n1 := n_intr_le &
 [ STEM < "cartridge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cartridge_n_1_rel",
            PHON.ONSET con ] ].

carve_up_v1 := v_particle_np_le &
 [ STEM < "carve" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_carve_v_up_rel" ],
            PHON.ONSET con ] ].

carve_v1 := v_np*_trans_le &
 [ STEM < "carve" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_carve_v_1_rel",
            PHON.ONSET con ] ].

carve_v2 := v_np_prep_trans_le &
 [ STEM < "carve" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _into_p_rel,
                    KEYREL.PRED "_carve_v_1_rel" ],
            PHON.ONSET con ] ].

carve_v3 := v_np_prep_trans_le &
 [ STEM < "carve" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _in_p_rel,
                    KEYREL.PRED "_carve_v_1_rel" ],
            PHON.ONSET con ] ].

carving_n1 := n_intr_le &
 [ STEM < "carving" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_carving_n_1_rel",
            PHON.ONSET con ] ].

cascade_n1 := n_intr_le &
 [ STEM < "cascade" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cascade_n_1_rel",
            PHON.ONSET con ] ].

cascade_v1 := v_prep_dir_le &
 [ STEM < "cascade" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cascade_v_1_rel",
            PHON.ONSET con ] ].

case_n1 := n_ppof_le &
 [ STEM < "case" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_case_n_of_rel",
            PHON.ONSET con ] ].

case_v1 := v_np_trans_le &
 [ STEM < "case" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_case_v_1_rel",
            PHON.ONSET con ] ].

case_v2 := v_empty_prep_trans_le &
 [ STEM < "case" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_case_v_in_rel" ],
            PHON.ONSET con ] ].

casement_n1 := n_intr_le &
 [ STEM < "casement" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_casement_n_1_rel",
            PHON.ONSET con ] ].

cash_in_v1 := v_particle_np_le &
 [ STEM < "cash" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_cash_v_in_rel" ],
            PHON.ONSET con ] ].

cash_n1 := n_mass_le &
 [ STEM < "cash" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cash_n_1_rel",
            PHON.ONSET con ] ].

cash_v1 := v_np_trans_le &
 [ STEM < "cash" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cash_v_1_rel",
            PHON.ONSET con ] ].

cashier_n1 := n_intr_le &
 [ STEM < "cashier" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cashier_n_1_rel",
            PHON.ONSET con ] ].

cashiers_check_n1 := n_intr_le &
 [ STEM < "cashier's", "check" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cashiers+check_n_1_rel",
            PHON.ONSET con ] ].

casing_n1 := n_intr_le &
 [ STEM < "casing" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_casing_n_1_rel",
            PHON.ONSET con ] ].

casino_n1 := n_intr_le &
 [ STEM < "casino" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_casino_n_1_rel",
            PHON.ONSET con ] ].

casio_n1 := n_proper_le &
 [ STEM < "casio" >,
   SYNSEM [ LKEYS.KEYREL.CARG "casio",
            PHON.ONSET con ] ].

cask_n1 := n_intr_le &
 [ STEM < "cask" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cask_n_1_rel",
            PHON.ONSET con ] ].

caspian_n1 := n_intr_named_le &
 [ STEM < "caspian" >,
   SYNSEM [ LKEYS.KEYREL.CARG "caspian",
            PHON.ONSET con ] ].

cast_down_v1 := v_particle_np_le &
 [ STEM < "cast" >,
   SYNSEM [ LKEYS [ --COMPKEY _down_p_sel_rel,
                    KEYREL.PRED "_cast_v_down_rel" ],
            PHON.ONSET con ] ].

cast_n1 := n_intr_le &
 [ STEM < "cast" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cast_n_1_rel",
            PHON.ONSET con ] ].

cast_off_v1 := v_particle_np_le &
 [ STEM < "cast" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_cast_v_off_rel" ],
            PHON.ONSET con ] ].

cast_off_v2 := v_particle_le &
 [ STEM < "cast" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_cast_v_off_rel" ],
            PHON.ONSET con ] ].

cast_out_v1 := v_particle_np_le &
 [ STEM < "cast" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_cast_v_out_rel" ],
            PHON.ONSET con ] ].

cast_v1 := v_np_trans_le &
 [ STEM < "cast" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cast_v_1_rel",
            PHON.ONSET con ] ].

cast_v2 := v_np_prep_trans_dors_le &
 [ STEM < "cast" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cast_v_1_rel",
            PHON.ONSET con ] ].

cast_v3 := v_np_as_le &
 [ STEM < "cast" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cast_v_as_rel",
            PHON.ONSET con ] ].

castle_n1 := n_intr_le &
 [ STEM < "castle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_castle_n_1_rel",
            PHON.ONSET con ] ].

castle_post_ttl := n_post_title_le &
 [ STEM < "castle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_castle_n_1_rel",
            PHON.ONSET con ] ].

castrate_v1 := v_np_trans_le &
 [ STEM < "castrate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_castrate_v_1_rel",
            PHON.ONSET con ] ].

casual_a1 := adj_intrans_le &
 [ STEM < "casual" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_casual_a_1_rel",
            PHON.ONSET con ] ].

cat_n1 := n_intr_le &
 [ STEM < "cat" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cat_n_1_rel",
            PHON.ONSET con ] ].

catalog_n1 := n_ppof_le &
 [ STEM < "catalog" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_catalogue_n_of_rel",
            PHON.ONSET con ] ].

catalogue_n1 := n_ppof_le &
 [ STEM < "catalogue" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_catalogue_n_of_rel",
            PHON.ONSET con ] ].

catamaran_n1 := n_intr_le &
 [ STEM < "catamaran" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_catamaran_n_1_rel",
            PHON.ONSET con ] ].

cataract_n1 := n_intr_le &
 [ STEM < "cataract" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cataract_n_1_rel",
            PHON.ONSET con ] ].

catastrophic_isect := adj_intrans_le &
 [ STEM < "catastrophic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_catastrophic_a_1_rel",
            PHON.ONSET con ] ].

catastrophically := adv_int_vp_le &
 [ STEM < "catastrophically" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_catastrophic_a_1_rel",
            PHON.ONSET con ] ].

catch_n1 := n_intr_le &
 [ STEM < "catch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_catch_n_1_rel",
            PHON.ONSET con ] ].

catch_on_v2 := v_particle_cp_le &
 [ STEM < "catch" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_catch_v_on_rel" ],
            PHON.ONSET con ] ].

catch_up_v1 := v_particle_le &
 [ STEM < "catch" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_catch_v_up_rel" ],
            PHON.ONSET con ] ].

catch_up_v2 := v_particle_pp_le &
 [ STEM < "catch" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    --OCOMPKEY _on_p_rel,
                    KEYREL.PRED "_catch_v_up_rel" ],
            PHON.ONSET con ] ].

catch_up_v3 := v_particle_pp_le &
 [ STEM < "catch" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    --OCOMPKEY _with_p_rel,
                    KEYREL.PRED "_catch_v_up_rel" ],
            PHON.ONSET con ] ].

catch_v1 := v_np_trans_le &
 [ STEM < "catch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_catch_v_1_rel",
            PHON.ONSET con ] ].

catch_v2 := v_obj_equi_prd_le &
 [ STEM < "catch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_catch_v_1_rel",
            PHON.ONSET con ] ].

catcher_n1 := n_intr_le &
 [ STEM < "catcher" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_catcher_n_1_rel",
            PHON.ONSET con ] ].

catchier := adj_comp_le &
 [ STEM < "catchier" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_catchy_a_1_rel",
            PHON.ONSET con ] ].

catchiest := adj_superl_le &
 [ STEM < "catchiest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_catchy_a_1_rel",
            PHON.ONSET con ] ].

catchy_a1 := adj_intrans_le &
 [ STEM < "catchy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_catchy_a_1_rel",
            PHON.ONSET con ] ].

categorize_v1 := v_np_trans_le &
 [ STEM < "categorize" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_categorize_v_1_rel",
            PHON.ONSET con ] ].

categorize_v2 := v_np_as_le &
 [ STEM < "categorize" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_categorize_v_as_rel",
            PHON.ONSET con ] ].

category_n1 := n_ppof_le &
 [ STEM < "category" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_category_n_of_rel",
            PHON.ONSET con ] ].

cater_for_v1 := v_empty_prep_intrans_le &
 [ STEM < "cater" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_cater_v_for_rel" ],
            PHON.ONSET con ] ].

cater_to_v1 := v_empty_prep_intrans_le &
 [ STEM < "cater" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_cater_v_to_rel" ],
            PHON.ONSET con ] ].

cater_v1 := v_np_trans_le &
 [ STEM < "cater" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cater_v_1_rel",
            PHON.ONSET con ] ].

cathartic_a1 := adj_intrans_le &
 [ STEM < "cathartic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cathartic_a_1_rel",
            PHON.ONSET con ] ].

cathedral_n1 := n_intr_le &
 [ STEM < "cathedral" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cathedral_n_1_rel",
            PHON.ONSET con ] ].

cathedral_post_ttl := n_post_title_le &
 [ STEM < "cathedral" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cathedral_n_1_rel",
            PHON.ONSET con ] ].

catholic_isect := adj_intrans_le &
 [ STEM < "catholic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_catholic_a_1_rel",
            PHON.ONSET con ] ].

catholic_n1 := n_intr_le &
 [ STEM < "catholic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_catholic_n_1_rel",
            PHON.ONSET con ] ].

cattle_n1 := n_plur_le &
 [ STEM < "cattle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cattle_n_1_rel",
            PHON.ONSET con ] ].

caucasian_a1 := adj_intrans_le &
 [ STEM < "caucasian" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_caucasian_a_1_rel",
            PHON.ONSET con ] ].

caucasian_n1 := n_intr_named_le &
 [ STEM < "caucasian" >,
   SYNSEM [ LKEYS.KEYREL.CARG "_caucasian",
            PHON.ONSET con ] ].

causal_a1 := adj_intrans_le &
 [ STEM < "causal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_causal_a_1_rel",
            PHON.ONSET con ] ].

cause_n1 := n_ppof_le &
 [ STEM < "cause" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cause_n_of_rel",
            PHON.ONSET con ] ].

cause_v1 := v_obj_equi_le &
 [ STEM < "cause" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cause_v_1_rel",
            PHON.ONSET con ] ].

cause_v2 := v_np_trans_le &
 [ STEM < "cause" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cause_v_1_rel",
            PHON.ONSET con ] ].

cause_v3 := v_ditrans_le &
 [ STEM < "cause" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cause_v_1_rel",
            PHON.ONSET con ] ].

caution_n1 := n_mass_count_le &
 [ STEM < "caution" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_caution_n_1_rel",
            PHON.ONSET con ] ].

caution_v1 := v_np_trans_cp_le &
 [ STEM < "caution" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_caution_v_1_rel",
            PHON.ONSET con ] ].

caution_v2 := v_np_trans_le &
 [ STEM < "caution" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_caution_v_1_rel",
            PHON.ONSET con ] ].

cautious_a1 := adj_intrans_le &
 [ STEM < "cautious" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cautious_a_1_rel",
            PHON.ONSET con ] ].

cautiously_adv := adv_int_vp_le &
 [ STEM < "cautiously" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cautious_a_1_rel",
            PHON.ONSET con ] ].

cavalier_n1 := n_intr_le &
 [ STEM < "cavalier" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cavalier_n_1_rel",
            PHON.ONSET con ] ].

cavalry_n1 := n_mass_le &
 [ STEM < "cavalry" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cavalry_n_1_rel",
            PHON.ONSET con ] ].

cave_n1 := n_intr_le &
 [ STEM < "cave" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cave_n_1_rel",
            PHON.ONSET con ] ].

cave_post_ttl := n_post_title_le &
 [ STEM < "cave" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cave_n_1_rel",
            PHON.ONSET con ] ].

caviar_n1 := n_intr_le &
 [ STEM < "caviar" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_caviar_n_1_rel",
            PHON.ONSET con ] ].

cavity_n1 := n_intr_le &
 [ STEM < "cavity" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cavity_n_1_rel",
            PHON.ONSET con ] ].

cbs_n1 := n_proper_le &
 [ STEM < "cbs" >,
   SYNSEM [ LKEYS.KEYREL.CARG "cbs",
            PHON.ONSET con ] ].

cc_n1 := n_intr_le &
 [ STEM < "cc" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cc_n_1_rel",
            PHON.ONSET con ] ].

cc_v1 := v_np_trans_le &
 [ STEM < "cc" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cc_v_1_rel",
            PHON.ONSET con ] ].

cc_v2 := v_np_prep_trans_dors_le &
 [ STEM < "cc" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cc_v_1_rel",
            PHON.ONSET con ] ].

cd_n1 := n_intr_le &
 [ STEM < "cd" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cd_n_1_rel",
            PHON.ONSET con ] ].

cdma_n1 := n_proper_le &
 [ STEM < "cdma" >,
   SYNSEM [ LKEYS.KEYREL.CARG "cdma",
            PHON.ONSET con ] ].

cdrom_n1 := n_intr_le &
 [ STEM < "cdrom" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cdrom_n_1_rel",
            PHON.ONSET con ] ].

cdrom_n2 := n_intr_le &
 [ STEM < "cd", "rom" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cdrom_n_1_rel",
            PHON.ONSET con ] ].

cdt_n1 := n_intr_le &
 [ STEM < "cdt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cdt_n_1_rel",
            PHON.ONSET con ] ].

cease_v1 := v_np_trans_le &
 [ STEM < "cease" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cease_v_cause_rel",
            PHON.ONSET con ] ].

cease_v2 := v_unacc_le &
 [ STEM < "cease" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cease_v_1_rel",
            PHON.ONSET con ] ].

cease_v3 := v_ssr_le &
 [ STEM < "cease" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cease_v_1_rel",
            PHON.ONSET con ] ].

cease_v4 := v_ssr_prp_le &
 [ STEM < "cease" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cease_v_1_rel",
            PHON.ONSET con ] ].

cebit_n1 := n_proper_le &
 [ STEM < "cebit" >,
   SYNSEM [ LKEYS.KEYREL.CARG "cebit",
            PHON.ONSET con ] ].

ceiling_n1 := n_intr_le &
 [ STEM < "ceiling" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ceiling_n_1_rel",
            PHON.ONSET con ] ].

celebrant_n1 := n_intr_le &
 [ STEM < "celebrant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_celebrant_n_1_rel",
            PHON.ONSET con ] ].

celebrate_v1 := v_np*_trans_le &
 [ STEM < "celebrate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_celebrate_v_1_rel",
            PHON.ONSET con ] ].

celebration_n1 := n_ppof_le &
 [ STEM < "celebration" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_celebration_n_of_rel",
            PHON.ONSET con ] ].

celeron_n1 := n_proper_le &
 [ STEM < "celeron" >,
   SYNSEM [ LKEYS.KEYREL.CARG "celeron",
            PHON.ONSET con ] ].

celestial_a1 := adj_intrans_le &
 [ STEM < "celestial" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_celestial_a_1_rel",
            PHON.ONSET con ] ].

celibacy_n1 := n_mass_le &
 [ STEM < "celibacy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_celibacy_n_1_rel",
            PHON.ONSET con ] ].

cell_n1 := n_intr_le &
 [ STEM < "cell" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cell_n_1_rel",
            PHON.ONSET con ] ].

cell_phone_n1 := n_intr_le &
 [ STEM < "cellphone" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cell+phone_n_1_rel",
            PHON.ONSET con ] ].

cellar_n1 := n_intr_le &
 [ STEM < "cellar" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cellar_n_1_rel",
            PHON.ONSET con ] ].

celle_n1 := n_proper_le &
 [ STEM < "celle" >,
   SYNSEM [ LKEYS.KEYREL.CARG "celle",
            PHON.ONSET con ] ].

cellular_a1 := adj_intrans_le &
 [ STEM < "cellular" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cellular_a_1_rel",
            PHON.ONSET con ] ].

cellule_n1 := n_intr_le &
 [ STEM < "cellule" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cellule_n_1_rel",
            PHON.ONSET con ] ].

cellulose_n1 := n_mass_le &
 [ STEM < "cellulose" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cellulose_n_1_rel",
            PHON.ONSET con ] ].

celsius := n_proper_le &
 [ STEM < "celsius" >,
   SYNSEM [ LKEYS.KEYREL.CARG "celsius",
            PHON.ONSET con ] ].

cement_n1 := n_mass_count_le &
 [ STEM < "cement" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cement_n_1_rel",
            PHON.ONSET con ] ].

cement_v1 := v_np_trans_le &
 [ STEM < "cement" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cement_v_1_rel",
            PHON.ONSET con ] ].

cemetery_n1 := n_intr_le &
 [ STEM < "cemetery" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cemetery_n_1_rel",
            PHON.ONSET con ] ].

censure_n1 := n_mass_le &
 [ STEM < "censure" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_censure_n_1_rel",
            PHON.ONSET con ] ].

censure_v1 := v_np_trans_le &
 [ STEM < "censure" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_censure_v_1_rel",
            PHON.ONSET con ] ].

cent_n1 := n_intr_le &
 [ STEM < "cent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cent_n_1_rel",
            PHON.ONSET con ] ].

centenarian_n1 := n_intr_le &
 [ STEM < "centenarian" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_centenarian_n_1_rel",
            PHON.ONSET con ] ].

centenary_n1 := n_intr_le &
 [ STEM < "centenary" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_centenary_n_1_rel",
            PHON.ONSET con ] ].

centennial_n1 := n_intr_le &
 [ STEM < "centennial" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_centennial_n_1_rel",
            PHON.ONSET con ] ].

center_around_v1 := v_empty_prep_intrans_le &
 [ STEM < "center" >,
   SYNSEM [ LKEYS [ --COMPKEY _around_p_sel_rel,
                    KEYREL.PRED "_center_v_around_rel" ],
            PHON.ONSET con ] ].

center_n1 := n_ppof_le &
 [ STEM < "center" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_center_n_of_rel",
            PHON.ONSET con ] ].

center_on_v1 := v_empty_prep_intrans_le &
 [ STEM < "center" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_center_v_on_rel" ],
            PHON.ONSET con ] ].

center_post_ttl := n_post_title_le &
 [ STEM < "center" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_center_n_of_rel",
            PHON.ONSET con ] ].

center_v1 := v_np_trans_le &
 [ STEM < "center" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_center_v_1_rel",
            PHON.ONSET con ] ].

centerpiece_n1 := n_intr_le &
 [ STEM < "centerpiece" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_centerpiece_n_1_rel",
            PHON.ONSET con ] ].

centimeter_abb_n1 := n_meas_le &
 [ STEM < "cm" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_centimeter_n_1_rel",
            PHON.ONSET con ] ].

centimeter_abb_n2 := n_meas_le &
 [ STEM < "cm." >,
   SYNSEM [ LKEYS.KEYREL.PRED "_centimeter_n_1_rel",
            PHON.ONSET con ] ].

centimeter_n1 := n_meas_le &
 [ STEM < "centimeter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_centimeter_n_1_rel",
            PHON.ONSET con ] ].

central := adj_intrans_le &
 [ STEM < "central" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_central_a_1_rel",
            PHON.ONSET con ] ].

central-station_n1 := n_proper_le &
 [ STEM < "central", "station" >,
   SYNSEM [ LKEYS.KEYREL.CARG "central_station",
            PHON.ONSET con ] ].

central-station_n2 := n_intr_named_le &
 [ STEM < "central", "station" >,
   SYNSEM [ LKEYS.KEYREL.CARG "central_station",
            PHON.ONSET con ] ].

central_park_n1 := n_proper_le &
 [ STEM < "central", "park" >,
   SYNSEM [ LKEYS.KEYREL.CARG "central_park",
            PHON.ONSET con ] ].

centrally := adv_int_vp_le &
 [ STEM < "centrally" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_central_a_1_rel",
            PHON.ONSET con ] ].

centre_post_ttl := n_post_title_le &
 [ STEM < "centre" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_centre_n_1_rel",
            PHON.ONSET con ] ].

centrifugal_a1 := adj_intrans_le &
 [ STEM < "centrifugal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_centrifugal_a_1_rel",
            PHON.ONSET con ] ].

century_n1 := n_intr_temp_nd_le &
 [ STEM < "century" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_century_n_1_rel",
            PHON.ONSET con ] ].

cephalon_n1 := n_intr_le &
 [ STEM < "cephalon" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cephalon_n_1_rel",
            PHON.ONSET con ] ].

cepstral_n1 := n_proper_le &
 [ STEM < "cepstral" >,
   SYNSEM [ LKEYS.KEYREL.CARG "cepstral",
            PHON.ONSET con ] ].

cepstrel_n1 := n_proper_le &
 [ STEM < "cepstrel" >,
   SYNSEM [ LKEYS.KEYREL.CARG "cepstrel",
            PHON.ONSET con ] ].

ceramic_a1 := adj_intrans_le &
 [ STEM < "ceramic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ceramic_a_1_rel",
            PHON.ONSET con ] ].

ceramic_n1 := n_mass_le &
 [ STEM < "ceramic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ceramic_n_1_rel",
            PHON.ONSET con ] ].

cereal_n1 := n_mass_count_le &
 [ STEM < "cereal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cereal_n_1_rel",
            PHON.ONSET con ] ].

ceremonial_a1 := adj_intrans_le &
 [ STEM < "ceremonial" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ceremonial_a_1_rel",
            PHON.ONSET con ] ].

ceremonial_n1 := n_intr_le &
 [ STEM < "ceremonial" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ceremonial_n_1_rel",
            PHON.ONSET con ] ].

ceremony_n1 := n_intr_le &
 [ STEM < "ceremony" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ceremony_n_1_rel",
            PHON.ONSET con ] ].

certain_a1 := adj_reg_cp_le &
 [ STEM < "certain" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_certain_a_of_rel",
            PHON.ONSET con ] ].

certain_a2 := adj_trans_oblig_le &
 [ STEM < "certain" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_certain_a_of_rel" ],
            PHON.ONSET con ] ].

certain_a3 := adj_reg_equi_le &
 [ STEM < "certain" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_certain_a_of_rel",
            PHON.ONSET con ] ].

certain_a4 := adj_intrans_le &
 [ STEM < "certain" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_certain_a_of_rel",
            PHON.ONSET con ] ].

certain_a5 := adj_trans_oblig_le &
 [ STEM < "certain" >,
   SYNSEM [ LKEYS [ --COMPKEY _about_p_sel_rel,
                    KEYREL.PRED "_certain_a_about_rel" ],
            PHON.ONSET con ] ].

certainly_adv1 := adv_vp_aux_le &
 [ STEM < "certainly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_certain_a_1_rel",
            PHON.ONSET con ] ].

certainly_adv2 := adv_s_pre_le &
 [ STEM < "certainly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_certain_a_1_rel",
            PHON.ONSET con ] ].

certainly_adv3 := adv_negmod_le &
 [ STEM < "certainly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_certain_a_1_rel",
            PHON.ONSET con ] ].

certainty_n1 := n_mass_count_le &
 [ STEM < "certainty" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_certainty_n_1_rel",
            PHON.ONSET con ] ].

certificate_n1 := n_ppof_le &
 [ STEM < "certificate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_certificate_n_of_rel",
            PHON.ONSET con ] ].

certify_v1 := v_np_trans_le &
 [ STEM < "certify" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_certify_v_1_rel",
            PHON.ONSET con ] ].

certify_v2 := v_cp_prop_non_trans_le &
 [ STEM < "certify" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_certify_v_1_rel",
            PHON.ONSET con ] ].

cessation_n1 := n_mass_count_le &
 [ STEM < "cessation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cessation_n_1_rel",
            PHON.ONSET con ] ].

cf_v1 := v_np_trans_le &
 [ STEM < "cf" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cf_v_1_rel",
            PHON.ONSET con ] ].

cf_v2 := v_np_trans_le &
 [ STEM < "cf." >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cf_v_1_rel",
            PHON.ONSET con ] ].

chafe_v1 := v_np*_trans_le &
 [ STEM < "chafe" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chafe_v_1_rel",
            PHON.ONSET con ] ].

chain_n := n_ppof_le &
 [ STEM < "chain" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chain_n_of_rel",
            PHON.ONSET con ] ].

chair_n1 := n_intr_le &
 [ STEM < "chair" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chair_n_1_rel",
            PHON.ONSET con ] ].

chair_v1 := v_np*_trans_le &
 [ STEM < "chair" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chair_v_1_rel",
            PHON.ONSET con ] ].

chairman_n1 := n_ppof_le &
 [ STEM < "chairman" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chairman_n_of_rel",
            PHON.ONSET con ] ].

chairman_ttl := n_title_le &
 [ STEM < "chairman" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chairman_n_of_rel",
            PHON.ONSET con ] ].

chairwoman_n1 := n_ppof_le &
 [ STEM < "chairwoman" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chairwoman_n_of_rel",
            PHON.ONSET con ] ].

chairwoman_ttl := n_title_le &
 [ STEM < "chairwoman" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chairwoman_n_of_rel",
            PHON.ONSET con ] ].

chalfant_n1 := n_proper_le &
 [ STEM < "chalfant" >,
   SYNSEM [ LKEYS.KEYREL.CARG "chalfant",
            PHON.ONSET con ] ].

chalk_n1 := n_mass_count_le &
 [ STEM < "chalk" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chalk_n_1_rel",
            PHON.ONSET con ] ].

chalk_up_v1 := v_particle_np_le &
 [ STEM < "chalk" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_chalk_v_up_rel" ],
            PHON.ONSET con ] ].

chalk_up_v2 := v_particle_np_pp_to_le &
 [ STEM < "chalk" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_chalk_v_up_rel" ],
            PHON.ONSET con ] ].

chalk_v1 := v_np_trans_le &
 [ STEM < "chalk" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chalk_v_1_rel",
            PHON.ONSET con ] ].

challenge_n1 := n_mass_count_le &
 [ STEM < "challenge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_challenge_n_1_rel",
            PHON.ONSET con ] ].

challenge_n2 := n_cpcomp_inf_le &
 [ STEM < "challenge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_challenge_n_1_rel",
            PHON.ONSET con ] ].

challenge_v1 := v_to*_trans_le &
 [ STEM < "challenge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_challenge_v_to_rel",
            PHON.ONSET con ] ].

challenge_v2 := v_obj_equi_le &
 [ STEM < "challenge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_challenge_v_1_rel",
            PHON.ONSET con ] ].

challenging_a1 := adj_intrans_le &
 [ STEM < "challenging" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_challenging_a_1_rel",
            PHON.ONSET con ] ].

chamber_n1 := n_intr_le &
 [ STEM < "chamber" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chamber_n_1_rel",
            PHON.ONSET con ] ].

chamber_post_ttl := n_post_title_le &
 [ STEM < "chamber" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chamber_n_1_rel",
            PHON.ONSET con ] ].

champagne_n1 := n_mass_le &
 [ STEM < "champagne" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_champagne_n_1_rel",
            PHON.ONSET con ] ].

champion_n1 := n_ppof_le &
 [ STEM < "champion" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_champion_n_of_rel",
            PHON.ONSET con ] ].

championship_n1 := n_intr_le &
 [ STEM < "championship" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_championship_n_1_rel",
            PHON.ONSET con ] ].

chan_n1 := n_proper_le &
 [ STEM < "chan" >,
   SYNSEM [ LKEYS.KEYREL.CARG "chan",
            PHON.ONSET con ] ].

chance_n1 := n_mass_count_ppof_le &
 [ STEM < "chance" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chance_n_of_rel",
            PHON.ONSET con ] ].

chance_n2 := n_cpcomp_optthat_le &
 [ STEM < "chance" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chance_n_of_rel",
            PHON.ONSET con ] ].

chance_n3 := n_vpcomp_le &
 [ STEM < "chance" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chance_n_of_rel",
            PHON.ONSET con ] ].

chancellor_n1 := n_ppof_le &
 [ STEM < "chancellor" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chancellor_n_of_rel",
            PHON.ONSET con ] ].

chancellor_ttl := n_title_le &
 [ STEM < "chancellor" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chancellor_n_of_rel",
            PHON.ONSET con ] ].

chandelier_n1 := n_intr_le &
 [ STEM < "chandelier" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chandelier_n_1_rel",
            PHON.ONSET con ] ].

changde_n1 := n_proper_le &
 [ STEM < "changde" >,
   SYNSEM [ LKEYS.KEYREL.CARG "changde",
            PHON.ONSET con ] ].

change_into_v1 := v_empty_prep_intrans_le &
 [ STEM < "change" >,
   SYNSEM [ LKEYS [ --COMPKEY _into_p_sel_rel,
                    KEYREL.PRED "_change_v_into_rel" ],
            PHON.ONSET con ] ].

change_into_v2 := v_empty_prep_trans_le &
 [ STEM < "change" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _into_p_sel_rel,
                    KEYREL.PRED "_change_v_into_rel" ],
            PHON.ONSET con ] ].

change_n1 := n_mass_count_ppof_le &
 [ STEM < "change" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_change_n_of_rel",
            PHON.ONSET con ] ].

change_n2 := n_ppcomp_spr_le &
 [ STEM < "change" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_change_n_of_rel",
            PHON.ONSET con ] ].

change_v1 := v_np_trans_le &
 [ STEM < "change" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_change_v_cause_rel",
            PHON.ONSET con ] ].

change_v2 := v_unacc_le &
 [ STEM < "change" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_change_v_1_rel",
            PHON.ONSET con ] ].

change_v3 := v_np*_trans_double_pp_to*_le &
 [ STEM < "change" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _from_p_sel_rel,
                    KEYREL.PRED "_change_v_from-to_rel" ],
            PHON.ONSET con ] ].

change_v4 := v_np_prep_nmod_le &
 [ STEM < "change" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _about_p_rel,
                    KEYREL.PRED "_change_v_1_rel" ],
            PHON.ONSET con ] ].

changeable_isect := adj_intrans_le &
 [ STEM < "changeable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_changeable_a_1_rel",
            PHON.ONSET con ] ].

changjiang_n1 := n_proper_le &
 [ STEM < "changjiang" >,
   SYNSEM [ LKEYS.KEYREL.CARG "changjiang",
            PHON.ONSET con ] ].

changning_n1 := n_proper_le &
 [ STEM < "changning" >,
   SYNSEM [ LKEYS.KEYREL.CARG "changning",
            PHON.ONSET con ] ].

changshu_n1 := n_proper_le &
 [ STEM < "changshu" >,
   SYNSEM [ LKEYS.KEYREL.CARG "changshu",
            PHON.ONSET con ] ].

channel_n1 := n_intr_le &
 [ STEM < "channel" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_channel_n_1_rel",
            PHON.ONSET con ] ].

channel_v1 := v_np_trans_le &
 [ STEM < "channel" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_channel_v_1_rel",
            PHON.ONSET con ] ].

channel_v2 := v_np_prep_trans_dors_le &
 [ STEM < "channel" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_channel_v_1_rel",
            PHON.ONSET con ] ].

channelize_v1 := v_np_trans_le &
 [ STEM < "channelize" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_channelize_v_1_rel",
            PHON.ONSET con ] ].

chant_n1 := n_mass_count_le &
 [ STEM < "chant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chant_n_1_rel",
            PHON.ONSET con ] ].

chant_v1 := v_np*_trans_le &
 [ STEM < "chant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chant_v_1_rel",
            PHON.ONSET con ] ].

chaos_n1 := n_mass_le &
 [ STEM < "chaos" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chaos_n_1_rel",
            PHON.ONSET con ] ].

chaotic_a1 := adj_intrans_le &
 [ STEM < "chaotic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chaotic_a_1_rel",
            PHON.ONSET con ] ].

chapel_n1 := n_intr_le &
 [ STEM < "chapel" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chapel_n_1_rel",
            PHON.ONSET con ] ].

chapel_post_ttl := n_post_title_le &
 [ STEM < "chapel" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chapel_n_1_rel",
            PHON.ONSET con ] ].

chapter_n1 := n_intr_le &
 [ STEM < "chapter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chapter_n_1_rel",
            PHON.ONSET con ] ].

chapter_ttl := n_title_le &
 [ STEM < "chapter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chapter_n_1_rel",
            PHON.ONSET con ] ].

character_n1 := n_mass_count_le &
 [ STEM < "character" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_character_n_1_rel",
            PHON.ONSET con ] ].

characterise_v1 := v_np*_trans_le &
 [ STEM < "characterise" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_characterise_v_1_rel",
            PHON.ONSET con ] ].

characteristic_isect := adj_intrans_le &
 [ STEM < "characteristic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_characteristic_a_1_rel",
            PHON.ONSET con ] ].

characteristic_n1 := n_intr_le &
 [ STEM < "characteristic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_characteristic_n_1_rel",
            PHON.ONSET con ] ].

characteristically := adv_int_vp_le &
 [ STEM < "characteristically" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_characteristic_a_1_rel",
            PHON.ONSET con ] ].

characterize_v1 := v_np*_trans_le &
 [ STEM < "characterize" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_characterise_v_1_rel",
            PHON.ONSET con ] ].

characterize_v2 := v_np_as_le &
 [ STEM < "characterize" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_characterize_v_as_rel",
            PHON.ONSET con ] ].

charcoal_n1 := n_mass_count_le &
 [ STEM < "charcoal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_charcoal_n_1_rel",
            PHON.ONSET con ] ].

charge_n1 := n_ppof_le &
 [ STEM < "charge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_charge_n_of_rel",
            PHON.ONSET con ] ].

charge_n1_i := n_intr_nospr_le &
 [ STEM < "charge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_charge_n_of_rel",
            PHON.ONSET con ] ].

charge_up_v1 := v_particle_np_le &
 [ STEM < "charge" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_charge_v_up_rel" ],
            PHON.ONSET con ] ].

charge_v1 := v_ditrans_only_le &
 [ STEM < "charge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_charge_v_to_rel",
            PHON.ONSET con ] ].

charge_v2 := v_empty_prep*_trans_le &
 [ STEM < "charge" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_charge_v_with_rel" ],
            PHON.ONSET con ] ].

charge_v3 := v_np_trans_noger_le &
 [ STEM < "charge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_charge_v_1_rel",
            PHON.ONSET con ] ].

charge_v4 := v_prep_dir_le &
 [ STEM < "charge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_charge_v_1_rel",
            PHON.ONSET con ] ].

charge_v5 := v_to_trans_le &
 [ STEM < "charge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_charge_v_to_rel",
            PHON.ONSET con ] ].

charger_n1 := n_ppof_le &
 [ STEM < "charger" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_charger_n_of_rel",
            PHON.ONSET con ] ].

charioteer_n1 := n_intr_le &
 [ STEM < "charioteer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_charioteer_n_1_rel",
            PHON.ONSET con ] ].

charitable_a1 := adj_intrans_le &
 [ STEM < "charitable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_charitable_a_1_rel",
            PHON.ONSET con ] ].

charity_n1 := n_mass_count_le &
 [ STEM < "charity" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_charity_n_1_rel",
            PHON.ONSET con ] ].

charles_n1 := n_proper_le &
 [ STEM < "charles" >,
   SYNSEM [ LKEYS.KEYREL.CARG "charles",
            PHON.ONSET con ] ].

charlotte_n1 := n_proper_le &
 [ STEM < "charlotte" >,
   SYNSEM [ LKEYS.KEYREL.CARG "charlotte",
            PHON.ONSET con ] ].

charm_n1 := n_intr_le &
 [ STEM < "charm" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_charm_n_1_rel",
            PHON.ONSET con ] ].

charm_v1 := v_np_trans_le &
 [ STEM < "charm" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_charm_v_1_rel",
            PHON.ONSET con ] ].

charming_a1 := adj_intrans_le &
 [ STEM < "charming" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_charming_a_1_rel",
            PHON.ONSET con ] ].

chart_n1 := n_ppof_le &
 [ STEM < "chart" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chart_n_of_rel",
            PHON.ONSET con ] ].

chart_v1 := v_np*_trans_le &
 [ STEM < "chart" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chart_v_1_rel",
            PHON.ONSET con ] ].

charter_n1 := n_intr_le &
 [ STEM < "charter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_charter_n_1_rel",
            PHON.ONSET con ] ].

charter_v1 := v_np_trans_le &
 [ STEM < "charter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_charter_v_1_rel",
            PHON.ONSET con ] ].

chase_after_v1 := v_empty_prep_trans_le &
 [ STEM < "chase" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _after_p_sel_rel,
                    KEYREL.PRED "_chase_v_after_rel" ],
            PHON.ONSET con ] ].

chase_away_v1 := v_particle_np_le &
 [ STEM < "chase" >,
   SYNSEM [ LKEYS [ --COMPKEY _away_p_sel_rel,
                    KEYREL.PRED "_chase_v_away_rel" ],
            PHON.ONSET con ] ].

chase_down_v1 := v_particle_np_le &
 [ STEM < "chase" >,
   SYNSEM [ LKEYS [ --COMPKEY _down_p_sel_rel,
                    KEYREL.PRED "_chase_v_down_rel" ],
            PHON.ONSET con ] ].

chase_n1 := n_intr_le &
 [ STEM < "chase" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chase_n_1_rel",
            PHON.ONSET con ] ].

chase_up_v1 := v_particle_np_le &
 [ STEM < "chase" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_chase_v_up_rel" ],
            PHON.ONSET con ] ].

chase_v1 := v_np_trans_le &
 [ STEM < "chase" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chase_v_1_rel",
            PHON.ONSET con ] ].

chase_v2 := v_np_prep_trans_dors_le &
 [ STEM < "chase" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chase_v_1_rel",
            PHON.ONSET con ] ].

chasm_n1 := n_intr_le &
 [ STEM < "chasm" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chasm_n_1_rel",
            PHON.ONSET con ] ].

chasseur_n1 := n_intr_le &
 [ STEM < "chasseur" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chasseur_n_1_rel",
            PHON.ONSET con ] ].

chastisement_n1 := n_mass_count_le &
 [ STEM < "chastisement" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chastisement_n_1_rel",
            PHON.ONSET con ] ].

chastity_n1 := n_mass_le &
 [ STEM < "chastity" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chastity_n_1_rel",
            PHON.ONSET con ] ].

chat_n1 := n_mass_count_le &
 [ STEM < "chat" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chat_n_1_rel",
            PHON.ONSET con ] ].

chat_up_v1 := v_particle_np_le &
 [ STEM < "chat" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_chat_v_up_rel" ],
            PHON.ONSET con ] ].

chat_v1 := v_double_pp*_le &
 [ STEM < "chat" >,
   SYNSEM [ LKEYS [ --COMPKEY to_or_with_p_rel,
                    --OCOMPKEY _about_p_rel,
                    KEYREL.PRED "_chat_v_1_rel" ],
            PHON.ONSET con ] ].

chattel_n1 := n_mass_count_le &
 [ STEM < "chattel" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chattel_n_1_rel",
            PHON.ONSET con ] ].

chatter_n1 := n_mass_le &
 [ STEM < "chatter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chatter_n_1_rel",
            PHON.ONSET con ] ].

chatter_on_v1 := v_particle_le &
 [ STEM < "chatter" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_chatter_v_on_rel" ],
            PHON.ONSET con ] ].

chatter_on_v2 := v_particle_pp_le &
 [ STEM < "chatter" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    --OCOMPKEY _about_p_rel,
                    KEYREL.PRED "_chatter_v_on_rel" ],
            PHON.ONSET con ] ].

chatter_v1 := v_unerg_le &
 [ STEM < "chatter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chatter_v_1_rel",
            PHON.ONSET con ] ].

cheap := adj_intrans_le &
 [ STEM < "cheap" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cheap_a_1_rel",
            PHON.ONSET con ] ].

cheaper := adj_comp_le &
 [ STEM < "cheaper" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cheap_a_1_rel",
            PHON.ONSET con ] ].

cheaper_adv := adv_int_vp_post_le &
 [ STEM < "cheaper" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cheaper_a_1_rel",
            PHON.ONSET con ] ].

cheapest := adj_superl_le &
 [ STEM < "cheapest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cheap_a_1_rel",
            PHON.ONSET con ] ].

cheaply := adv_int_vp_le &
 [ STEM < "cheaply" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cheap_a_1_rel",
            PHON.ONSET con ] ].

cheat_v1 := v_np*_trans_le &
 [ STEM < "cheat" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cheat_v_1_rel",
            PHON.ONSET con ] ].

cheat_v2 := v_empty_prep_trans_le &
 [ STEM < "cheat" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _out+of_p_sel_rel,
                    KEYREL.PRED "_cheat_v_out+of_rel" ],
            PHON.ONSET con ] ].

cheat_v3 := v_empty_prep_trans_le &
 [ STEM < "cheat" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_cheat_v_out+of_rel" ],
            PHON.ONSET con ] ].

check-in_n1 := n_mass_count_le &
 [ STEM < "check", "in" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_check+in_n_1_rel",
            PHON.ONSET con ] ].

check_in_a1 := adj_intrans_le &
 [ STEM < "check", "in" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_check+in_a_1_rel",
            PHON.ONSET con ] ].

check_in_v1 := v_particle_np_le &
 [ STEM < "check" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_check_v_in_rel" ],
            PHON.ONSET con ] ].

check_in_v2 := v_particle_le &
 [ STEM < "check" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_check_v_in_rel" ],
            PHON.ONSET con ] ].

check_into_v1 := v_empty_prep_intrans_le &
 [ STEM < "check" >,
   SYNSEM [ LKEYS [ --COMPKEY _into_p_sel_rel,
                    KEYREL.PRED "_check_v_into_rel" ],
            PHON.ONSET con ] ].

check_into_v2 := v_empty_prep_trans_le &
 [ STEM < "check" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _into_p_sel_rel,
                    KEYREL.PRED "_check_v_into_rel" ],
            PHON.ONSET con ] ].

check_n := n_ppof_le &
 [ STEM < "check" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_check_n_of_rel",
            PHON.ONSET con ] ].

check_on_v1 := v_empty_prep_intrans_le &
 [ STEM < "check" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_check_v_on_rel" ],
            PHON.ONSET con ] ].

check_out_of_v1 := v_particle_empty_pp_le &
 [ STEM < "check" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    --OCOMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_check_v_out-of_rel" ],
            PHON.ONSET con ] ].

check_out_v1 := v_particle_np_le &
 [ STEM < "check" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_check_v_out_rel" ],
            PHON.ONSET con ] ].

check_out_v2 := v_particle_le &
 [ STEM < "check" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_check_v_out_rel" ],
            PHON.ONSET con ] ].

check_through_v1 := v_empty_prep_intrans_le &
 [ STEM < "check" >,
   SYNSEM [ LKEYS [ --COMPKEY _through_p_sel_rel,
                    KEYREL.PRED "_check_v_through_rel" ],
            PHON.ONSET con ] ].

check_ttl := n_title_le &
 [ STEM < "check" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_check_n_of_rel",
            PHON.ONSET con ] ].

check_up_on_v1 := v_particle_empty_pp_le &
 [ STEM < "check" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    --OCOMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_check_v_up-on_rel" ],
            PHON.ONSET con ] ].

check_v1 := v_np*_trans_le &
 [ STEM < "check" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_check_v_1_rel",
            PHON.ONSET con ] ].

check_v3 := v_cp_fin_inf_non_trans_le &
 [ STEM < "check" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_check_v_1_rel",
            PHON.ONSET con ] ].

check_v4 := v_subj_equi_le &
 [ STEM < "check" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_check_v_1_rel",
            PHON.ONSET con ] ].

checking_n1 := n_mass_le &
 [ STEM < "checking" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_checking_n_1_rel",
            PHON.ONSET con ] ].

checkout_n1 := n_intr_le &
 [ STEM < "checkout" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_checkout_n_1_rel",
            PHON.ONSET con ] ].

checkup_n1 := n_intr_le &
 [ STEM < "checkup" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_checkup_n_1_rel",
            PHON.ONSET con ] ].

cheek_n1 := n_mass_count_le &
 [ STEM < "cheek" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cheek_n_1_rel",
            PHON.ONSET con ] ].

cheer_n1 := n_mass_count_le &
 [ STEM < "cheer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cheer_n_1_rel",
            PHON.ONSET voc ] ].

cheer_on_v1 := v_particle_np_le &
 [ STEM < "cheer" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_cheer_v_on_rel" ],
            PHON.ONSET con ] ].

cheer_up_v1 := v_particle_np_le &
 [ STEM < "cheer" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_cheer_v_up_rel" ],
            PHON.ONSET con ] ].

cheer_up_v2 := v_particle_le &
 [ STEM < "cheer" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_cheer_v_up_rel" ],
            PHON.ONSET con ] ].

cheer_v1 := v_np*_trans_le &
 [ STEM < "cheer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cheer_v_1_rel",
            PHON.ONSET con ] ].

cheerful_a1 := adj_intrans_le &
 [ STEM < "cheerful" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cheerful_a_1_rel",
            PHON.ONSET con ] ].

cheerfully_adv1 := adv_int_vp_le &
 [ STEM < "cheerfully" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cheerful_a_1_rel",
            PHON.ONSET con ] ].

cheerfulness_n1 := n_mass_le &
 [ STEM < "cheerfulness" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cheerfulness_n_1_rel",
            PHON.ONSET con ] ].

cheerless_a1 := adj_intrans_le &
 [ STEM < "cheerless" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cheerless_a_1_rel",
            PHON.ONSET con ] ].

cheers_gr_post := adv_disc_posth_le &
 [ STEM < "cheers" >,
   SYNSEM [ LKEYS.KEYREL.CARG "cheers",
            PHON.ONSET con ] ].

cheers_gr_pre := adv_disc_preh_le &
 [ STEM < "cheers" >,
   SYNSEM [ LKEYS.KEYREL.CARG "cheers",
            PHON.ONSET con ] ].

cheers_v1 := v_unerg_imp_le &
 [ STEM < "cheers" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cheers_v_1_rel",
            PHON.ONSET con ] ].

cheese_n1 := n_mass_le &
 [ STEM < "cheese" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cheese_n_1_rel",
            PHON.ONSET con ] ].

chef_n1 := n_intr_le &
 [ STEM < "chef" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chef_n_1_rel",
            PHON.ONSET con ] ].

chemical_n1 := n_intr_le &
 [ STEM < "chemical" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chemical_n_1_rel",
            PHON.ONSET con ] ].

chemistry_n1 := n_intr_le &
 [ STEM < "chemistry" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chemistry_n_1_rel",
            PHON.ONSET con ] ].

chemnitz_n1 := n_proper_city_le &
 [ STEM < "chemnitz" >,
   SYNSEM [ LKEYS.KEYREL.CARG "chemnitz",
            PHON.ONSET con ] ].

chen_alim_n1 := n_proper_le &
 [ STEM < "chen", "alim" >,
   SYNSEM [ LKEYS.KEYREL.CARG "chen_alim",
            PHON.ONSET con ] ].

chen_huacheng_n1 := n_proper_le &
 [ STEM < "chen", "huacheng" >,
   SYNSEM [ LKEYS.KEYREL.CARG "chen_huacheng",
            PHON.ONSET con ] ].

chen_tanqiu_n1 := n_proper_le &
 [ STEM < "chen", "tanqiu" >,
   SYNSEM [ LKEYS.KEYREL.CARG "chen_tanqiu",
            PHON.ONSET con ] ].

chen_wangdao_n1 := n_proper_le &
 [ STEM < "chen", "wangdao" >,
   SYNSEM [ LKEYS.KEYREL.CARG "chen_wangdao",
            PHON.ONSET con ] ].

chen_yi_n1 := n_proper_le &
 [ STEM < "chen", "yi" >,
   SYNSEM [ LKEYS.KEYREL.CARG "chen_yi",
            PHON.ONSET con ] ].

chengxiang_n1 := n_proper_le &
 [ STEM < "chengxiang" >,
   SYNSEM [ LKEYS.KEYREL.CARG "chengxiang",
            PHON.ONSET con ] ].

chenxiangge_n1 := n_proper_le &
 [ STEM < "chenxiangge" >,
   SYNSEM [ LKEYS.KEYREL.CARG "chenxiangge",
            PHON.ONSET con ] ].

cheque_n := n_intr_le &
 [ STEM < "cheque" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_check_n_1_rel",
            PHON.ONSET con ] ].

cherish_v1 := v_np_trans_le &
 [ STEM < "cherish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cherish_v_1_rel",
            PHON.ONSET con ] ].

cherish_v2 := v_np_as_le &
 [ STEM < "cherish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cherish_v_as_rel",
            PHON.ONSET con ] ].

chernobyl_n1 := n_proper_city_le &
 [ STEM < "chernobyl" >,
   SYNSEM [ LKEYS.KEYREL.CARG "chernobyl",
            PHON.ONSET con ] ].

cherry_n1 := n_mass_count_le &
 [ STEM < "cherry" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cherry_n_1_rel",
            PHON.ONSET con ] ].

chess_n1 := n_mass_le &
 [ STEM < "chess" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chess_n_1_rel",
            PHON.ONSET con ] ].

chessboard_n1 := n_intr_le &
 [ STEM < "chessboard" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chessboard_n_1_rel",
            PHON.ONSET con ] ].

chesstree_n1 := n_intr_le &
 [ STEM < "chesstree" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chesstree_n_1_rel",
            PHON.ONSET con ] ].

chest_n1 := n_intr_le &
 [ STEM < "chest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chest_n_1_rel",
            PHON.ONSET con ] ].

chestnut_a1 := n_intr_le &
 [ STEM < "chestnut" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chestnut_a_1_rel",
            PHON.ONSET con ] ].

chew_off_v1 := v_particle_np_le &
 [ STEM < "chew" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_chew_v_off_rel" ],
            PHON.ONSET con ] ].

chew_out_v1 := v_particle_np_le &
 [ STEM < "chew" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_chew_v_out_rel" ],
            PHON.ONSET con ] ].

chew_v1 := v_np*_trans_le &
 [ STEM < "chew" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chew_v_1_rel",
            PHON.ONSET con ] ].

chiang := n_proper_le &
 [ STEM < "chiang" >,
   SYNSEM [ LKEYS.KEYREL.CARG "chiang",
            PHON.ONSET con ] ].

chiaroscuro_n1 := n_mass_le &
 [ STEM < "chiaroscuro" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chiaroscuro_n_1_rel",
            PHON.ONSET con ] ].

chicago_n1 := n_proper_city_le &
 [ STEM < "chicago" >,
   SYNSEM [ LKEYS.KEYREL.CARG "chicago",
            PHON.ONSET con ] ].

chick_n1 := n_intr_le &
 [ STEM < "chick" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chick_n_1_rel",
            PHON.ONSET con ] ].

chickadee_n1 := n_intr_le &
 [ STEM < "chickadee" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chickadee_n_1_rel",
            PHON.ONSET con ] ].

chicken_n1 := n_intr_le &
 [ STEM < "chicken" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chicken_n_1_rel",
            PHON.ONSET con ] ].

chide_v1 := v_np_trans_le &
 [ STEM < "chide" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chide_v_1_rel",
            PHON.ONSET con ] ].

chief_n1 := n_intr_le &
 [ STEM < "chief" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chief_n_1_rel",
            PHON.ONSET con ] ].

chiefly := adv_int_vp_le &
 [ STEM < "chiefly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chief_a_1_rel",
            PHON.ONSET con ] ].

child_n1 := n_intr_le &
 [ STEM < "child" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_child_n_1_rel",
            PHON.ONSET con ] ].

childbirth_n1 := n_mass_le &
 [ STEM < "childbirth" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_childbirth_n_1_rel",
            PHON.ONSET con ] ].

childrens_technoland_n1 := n_proper_le &
 [ STEM < "children", "'s", "technoland" >,
   SYNSEM [ LKEYS.KEYREL.CARG "childrens_technoland",
            PHON.ONSET con ] ].

chile_n1 := n_proper_le &
 [ STEM < "chile" >,
   SYNSEM [ LKEYS.KEYREL.CARG "chile",
            PHON.ONSET con ] ].

chill_n1 := n_intr_le &
 [ STEM < "chill" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chill_n_1_rel",
            PHON.ONSET con ] ].

chill_out_v1 := v_particle_le &
 [ STEM < "chill" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_chill_v_out_rel" ],
            PHON.ONSET con ] ].

chill_v1 := v_np*_trans_le &
 [ STEM < "chill" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chill_v_1_rel",
            PHON.ONSET con ] ].

chillier_a1 := adj_comp_le &
 [ STEM < "chillier" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chilly_a_1_rel",
            PHON.ONSET con ] ].

chillier_a2 := adj_atrans_comp_le &
 [ STEM < "chillier" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chilly_a_1_rel",
            PHON.ONSET con ] ].

chilliest_a1 := adj_superl_le &
 [ STEM < "chilliest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chilly_a_1_rel",
            PHON.ONSET con ] ].

chilliest_a2 := adj_atrans_superl_le &
 [ STEM < "chilliest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chilly_a_1_rel",
            PHON.ONSET con ] ].

chilly_a1 := adj_intrans_le &
 [ STEM < "chilly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chilly_a_1_rel",
            PHON.ONSET con ] ].

chilly_a2 := adj_atrans_le &
 [ STEM < "chilly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chilly_a_1_rel",
            PHON.ONSET con ] ].

chime_n1 := n_intr_le &
 [ STEM < "chime" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chime_n_1_rel",
            PHON.ONSET con ] ].

chimney_n1 := n_intr_le &
 [ STEM < "chimney" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chimney_n_1_rel",
            PHON.ONSET con ] ].

chin_n1 := n_intr_le &
 [ STEM < "chin" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chin_n_1_rel",
            PHON.ONSET con ] ].

chin_v1 := v_np*_trans_le &
 [ STEM < "chin" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chin_v_1_rel",
            PHON.ONSET con ] ].

china_airlines_n1 := n_proper_le &
 [ STEM < "china", "airlines" >,
   SYNSEM [ LKEYS.KEYREL.CARG "china_airlines",
            PHON.ONSET con ] ].

china_n1 := n_proper_le &
 [ STEM < "china" >,
   SYNSEM [ LKEYS.KEYREL.CARG "china",
            PHON.ONSET con ] ].

chinese_a1 := adj_intrans_le &
 [ STEM < "chinese" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chinese_a_1_rel",
            PHON.ONSET con ] ].

chinese_n1 := n_proper_le &
 [ STEM < "chinese" >,
   SYNSEM [ LKEYS.KEYREL.CARG "chinese",
            PHON.ONSET con ] ].

chinese_n2 := n_plur_nocmpnd_le &
 [ STEM < "chinese" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chinese_n_1_rel",
            PHON.ONSET con ] ].

chip_away_v1 := v_particle_pp_le &
 [ STEM < "chip" >,
   SYNSEM [ LKEYS [ --COMPKEY _away_p_sel_rel,
                    --OCOMPKEY _at_p_rel,
                    KEYREL.PRED "_chip_v_away_rel" ],
            PHON.ONSET con ] ].

chip_in_v1 := v_particle_np_le &
 [ STEM < "chip" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_chip_v_in_rel" ],
            PHON.ONSET con ] ].

chip_n1 := n_intr_le &
 [ STEM < "chip" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chip_n_1_rel",
            PHON.ONSET con ] ].

chip_v1 := v_np_trans_le &
 [ STEM < "chip" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chip_v_cause_rel",
            PHON.ONSET con ] ].

chip_v2 := v_unacc_le &
 [ STEM < "chip" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chip_v_1_rel",
            PHON.ONSET con ] ].

chiricahua_n1 := n_proper_city_le &
 [ STEM < "chiricahua" >,
   SYNSEM [ LKEYS.KEYREL.CARG "chiricahua",
            PHON.ONSET con ] ].

chiropractor_n1 := n_intr_le &
 [ STEM < "chiropractor" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chiropractor_n_1_rel",
            PHON.ONSET con ] ].

chisel_n1 := n_intr_le &
 [ STEM < "chisel" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chisel_n_1_rel",
            PHON.ONSET con ] ].

chisel_v1 := v_np_trans_le &
 [ STEM < "chisel" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chisel_v_1_rel",
            PHON.ONSET con ] ].

chiwu_n1 := n_proper_le &
 [ STEM < "chiwu" >,
   SYNSEM [ LKEYS.KEYREL.CARG "chiwu",
            PHON.ONSET con ] ].

chloride_n1 := n_mass_le &
 [ STEM < "chloride" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chloride_n_1_rel",
            PHON.ONSET con ] ].

chlorine_n1 := n_mass_le &
 [ STEM < "chlorine" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chlorine_n_1_rel",
            PHON.ONSET con ] ].

chloroplast_n1 := n_intr_le &
 [ STEM < "chloroplast" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chloroplast_n_1_rel",
            PHON.ONSET con ] ].

chocolate_n1 := n_mass_count_le &
 [ STEM < "chocolate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chocolate_n_1_rel",
            PHON.ONSET con ] ].

choice_a1 := adj_intrans_le &
 [ STEM < "choice" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_choice_a_1_rel",
            PHON.ONSET con ] ].

choice_n1 := n_mass_count_ppof_le &
 [ STEM < "choice" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_choice_n_of_rel",
            PHON.ONSET con ] ].

choicer := adj_comp_le &
 [ STEM < "choicer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_choice_a_1_rel",
            PHON.ONSET con ] ].

choicest_a1 := adj_superl_le &
 [ STEM < "choicest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_choice_a_1_rel",
            PHON.ONSET con ] ].

choir_n1 := n_intr_le &
 [ STEM < "choir" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_choir_n_1_rel",
            PHON.ONSET con ] ].

choke_n1 := n_intr_le &
 [ STEM < "choke" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_choke_n_1_rel",
            PHON.ONSET con ] ].

choke_off_v1 := v_particle_np_le &
 [ STEM < "choke" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_choke_v_off_rel" ],
            PHON.ONSET con ] ].

choke_up_v1 := v_particle_np_le &
 [ STEM < "choke" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_choke_v_up_rel" ],
            PHON.ONSET con ] ].

choke_up_v2 := v_particle_le &
 [ STEM < "choke" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_choke_v_up_rel" ],
            PHON.ONSET con ] ].

choke_v1 := v_np_trans_le &
 [ STEM < "choke" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_choke_v_cause_rel",
            PHON.ONSET con ] ].

choke_v2 := v_unacc_le &
 [ STEM < "choke" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_choke_v_1_rel",
            PHON.ONSET con ] ].

chokecherry_n1 := n_intr_le &
 [ STEM < "chokecherry" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chokecherry_n_1_rel",
            PHON.ONSET con ] ].

chong_sheng_n1 := n_proper_le &
 [ STEM < "chong", "sheng" >,
   SYNSEM [ LKEYS.KEYREL.CARG "chong_sheng",
            PHON.ONSET con ] ].

chongen_n1 := n_proper_le &
 [ STEM < "chongen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "chongen",
            PHON.ONSET con ] ].

chongming_n1 := n_proper_le &
 [ STEM < "chongming" >,
   SYNSEM [ LKEYS.KEYREL.CARG "chongming",
            PHON.ONSET con ] ].

choose_v1 := v_np*_trans_le &
 [ STEM < "choose" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_choose_v_1_rel",
            PHON.ONSET con ] ].

choose_v2 := v_np*_prep_trans_le &
 [ STEM < "choose" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _from_p_rel,
                    KEYREL.PRED "_choose_v_1_rel" ],
            PHON.ONSET con ] ].

choose_v3 := v_subj_equi_le &
 [ STEM < "choose" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_choose_v_1_rel",
            PHON.ONSET con ] ].

choose_v4 := v_obj_equi_le &
 [ STEM < "choose" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_choose_v_1_rel",
            PHON.ONSET con ] ].

choose_v5 := v_np_as_le &
 [ STEM < "choose" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_choose_v_as_rel",
            PHON.ONSET con ] ].

chop_down_v1 := v_particle_np_le &
 [ STEM < "chop" >,
   SYNSEM [ LKEYS [ --COMPKEY _down_p_sel_rel,
                    KEYREL.PRED "_chop_v_down_rel" ],
            PHON.ONSET con ] ].

chop_n1 := n_intr_le &
 [ STEM < "chop" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chop_n_1_rel",
            PHON.ONSET con ] ].

chop_off_v1 := v_particle_np_le &
 [ STEM < "chop" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_chop_v_off_rel" ],
            PHON.ONSET con ] ].

chop_up_v1 := v_particle_np_le &
 [ STEM < "chop" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_chop_v_up_rel" ],
            PHON.ONSET con ] ].

chop_v1 := v_np*_trans_le &
 [ STEM < "chop" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chop_v_1_rel",
            PHON.ONSET con ] ].

choral_a1 := adj_intrans_le &
 [ STEM < "choral" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_choral_a_1_rel",
            PHON.ONSET con ] ].

choral_n1 := n_intr_le &
 [ STEM < "choral" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_choral_n_1_rel",
            PHON.ONSET con ] ].

chord_n1 := n_intr_le &
 [ STEM < "chord" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chord_n_1_rel",
            PHON.ONSET con ] ].

chore_n1 := n_intr_le &
 [ STEM < "chore" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chore_n_1_rel",
            PHON.ONSET con ] ].

chore_n2 := n_vpcomp_expl_le &
 [ STEM < "chore" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chore_n_1_rel",
            PHON.ONSET con ] ].

chorister_n1 := n_intr_le &
 [ STEM < "chorister" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chorister_n_1_rel",
            PHON.ONSET con ] ].

chorus_n1 := n_intr_le &
 [ STEM < "chorus" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chorus_n_1_rel",
            PHON.ONSET con ] ].

chris_n1 := n_proper_le &
 [ STEM < "chris" >,
   SYNSEM [ LKEYS.KEYREL.CARG "chris",
            PHON.ONSET con ] ].

christ_n1 := n_proper_le &
 [ STEM < "christ" >,
   SYNSEM [ LKEYS.KEYREL.CARG "christ",
            PHON.ONSET con ] ].

christa_n1 := n_proper_le &
 [ STEM < "christa" >,
   SYNSEM [ LKEYS.KEYREL.CARG "christa",
            PHON.ONSET con ] ].

christen_v1 := v_np_trans_le &
 [ STEM < "christen" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_christen_v_1_rel",
            PHON.ONSET con ] ].

christen_v2 := v_ditrans_only_le &
 [ STEM < "christen" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_christen_v_1_rel",
            PHON.ONSET con ] ].

christi_n1 := n_proper_le &
 [ STEM < "christi" >,
   SYNSEM [ LKEYS.KEYREL.CARG "christi",
            PHON.ONSET con ] ].

christian_a1 := adj_intrans_le &
 [ STEM < "christian" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_christian_a_1_rel",
            PHON.ONSET con ] ].

christian_n1 := n_proper_le &
 [ STEM < "christian" >,
   SYNSEM [ LKEYS.KEYREL.CARG "christian",
            PHON.ONSET con ] ].

christiania_n1 := n_proper_le &
 [ STEM < "christiania" >,
   SYNSEM [ LKEYS.KEYREL.CARG "christiania",
            PHON.ONSET con ] ].

christianity := n_proper_le &
 [ STEM < "christianity" >,
   SYNSEM [ LKEYS.KEYREL.CARG "christianity",
            PHON.ONSET con ] ].

christmas_day := n_holiday_le &
 [ STEM < "christmas", "day" >,
   SYNSEM [ LKEYS.KEYREL.CARG "christmas_day",
            PHON.ONSET con ] ].

christmas_eve := n_holiday_le &
 [ STEM < "christmas", "eve" >,
   SYNSEM [ LKEYS.KEYREL.CARG "christmas_eve",
            PHON.ONSET con ] ].

christmas_n1 := n_season_div_le &
 [ STEM < "christmas" >,
   SYNSEM [ LKEYS.KEYREL.CARG "christmas",
            PHON.ONSET con ] ].

christmas_n2 := n_season_wspec_le &
 [ STEM < "christmas" >,
   SYNSEM [ LKEYS.KEYREL.CARG "christmas",
            PHON.ONSET con ] ].

christmas_n3 := n_season_np_le &
 [ STEM < "christmas" >,
   SYNSEM [ LKEYS.KEYREL.CARG "christmas",
            PHON.ONSET con ] ].

christmas_time_n1 := n_season_div_le &
 [ STEM < "christmas", "time" >,
   SYNSEM [ LKEYS.KEYREL.CARG "christmas_time",
            PHON.ONSET con ] ].

christmassy_a1 := adj_intrans_le &
 [ STEM < "christmassy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_christmassy_a_1_rel",
            PHON.ONSET con ] ].

chromium_n1 := n_mass_le &
 [ STEM < "chromium" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chromium_n_1_rel",
            PHON.ONSET con ] ].

chronic_a1 := adj_intrans_le &
 [ STEM < "chronic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chronic_a_1_rel",
            PHON.ONSET con ] ].

chronological_a1 := adj_intrans_le &
 [ STEM < "chronological" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chronological_a_1_rel",
            PHON.ONSET con ] ].

chuansha_n1 := n_proper_le &
 [ STEM < "chuansha" >,
   SYNSEM [ LKEYS.KEYREL.CARG "chuansha",
            PHON.ONSET con ] ].

chuanyang_n1 := n_proper_le &
 [ STEM < "chuanyang" >,
   SYNSEM [ LKEYS.KEYREL.CARG "chuanyang",
            PHON.ONSET con ] ].

chuck_v1 := v_np_trans_le &
 [ STEM < "chuck" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chuck_v_1_rel",
            PHON.ONSET con ] ].

chuckle_n1 := n_intr_le &
 [ STEM < "chuckle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chuckle_n_1_rel",
            PHON.ONSET con ] ].

chuckle_v1 := v_unerg_le &
 [ STEM < "chuckle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chuckle_v_1_rel",
            PHON.ONSET con ] ].

chug_v1 := v_np*_trans_le &
 [ STEM < "chug" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chug_v_1_rel",
            PHON.ONSET con ] ].

chunk_n1 := n_ppof_le &
 [ STEM < "chunk" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chunk_n_of_rel",
            PHON.ONSET con ] ].

church_n1 := n_mass_count_le &
 [ STEM < "church" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_church_n_1_rel",
            PHON.ONSET con ] ].

church_post_ttl := n_post_title_le &
 [ STEM < "church" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_church_n_1_rel",
            PHON.ONSET con ] ].

churchill_n1 := n_proper_le &
 [ STEM < "churchill" >,
   SYNSEM [ LKEYS.KEYREL.CARG "churchill",
            PHON.ONSET con ] ].

churn_n1 := n_intr_le &
 [ STEM < "churn" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_churn_n_1_rel",
            PHON.ONSET con ] ].

churn_v1 := v_unerg_le &
 [ STEM < "churn" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_churn_v_1_rel",
            PHON.ONSET con ] ].

churn_v2 := v_np_trans_le &
 [ STEM < "churn" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_churn_v_cause_rel",
            PHON.ONSET con ] ].

cider_n1 := n_mass_count_le &
 [ STEM < "cider" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cider_n_1_rel",
            PHON.ONSET con ] ].

cigarette_n1 := n_intr_le &
 [ STEM < "cigarette" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cigarette_n_1_rel",
            PHON.ONSET con ] ].

cindy_n1 := n_proper_le &
 [ STEM < "cindy" >,
   SYNSEM [ LKEYS.KEYREL.CARG "cindy",
            PHON.ONSET con ] ].

cinema_n1 := n_intr_le &
 [ STEM < "cinema" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cinema_n_1_rel",
            PHON.ONSET con ] ].

circle_n1 := n_ppof_le &
 [ STEM < "circle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_circle_n_of_rel",
            PHON.ONSET con ] ].

circle_v1 := v_np_trans_noger_le &
 [ STEM < "circle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_circle_v_1_rel",
            PHON.ONSET con ] ].

circle_v2 := v_prep_dir_le &
 [ STEM < "circle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_circle_v_1_rel",
            PHON.ONSET con ] ].

circuit_city_n1 := n_proper_le &
 [ STEM < "circuit", "city" >,
   SYNSEM [ LKEYS.KEYREL.CARG "circuit_city",
            PHON.ONSET con ] ].

circuit_n1 := n_intr_le &
 [ STEM < "circuit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_circuit_n_1_rel",
            PHON.ONSET con ] ].

circuitous_a1 := adj_intrans_le &
 [ STEM < "circuitous" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_circuitous_a_1_rel",
            PHON.ONSET con ] ].

circular_n1 := n_intr_le &
 [ STEM < "circular" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_circular_n_1_rel",
            PHON.ONSET con ] ].

circularly_adv := adv_int_vp_le &
 [ STEM < "circularly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_circular_a_1_rel",
            PHON.ONSET con ] ].

circulate_v1 := v_np_trans_le &
 [ STEM < "circulate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_circulate_v_cause_rel",
            PHON.ONSET con ] ].

circulate_v2 := v_unacc_le &
 [ STEM < "circulate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_circulate_v_1_rel",
            PHON.ONSET con ] ].

circulate_v3 := v_cp_non_trans_le &
 [ STEM < "circulate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_circulate_v_1_rel",
            PHON.ONSET con ] ].

circulation_n1 := n_mass_count_ppof_le &
 [ STEM < "circulation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_circulation_n_of_rel",
            PHON.ONSET con ] ].

circumference_n1 := n_intr_le &
 [ STEM < "circumference" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_circumference_n_1_rel",
            PHON.ONSET con ] ].

circumnavigate_v1 := v_np_trans_le &
 [ STEM < "circumnavigate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_circumnavigate_v_1_rel",
            PHON.ONSET con ] ].

circumscribe_v1 := v_np_trans_le &
 [ STEM < "circumscribe" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_circumscribe_v_1_rel",
            PHON.ONSET con ] ].

circumstance_n1 := n_intr_le &
 [ STEM < "circumstance" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_circumstance_n_1_rel",
            PHON.ONSET con ] ].

circumvent_v1 := v_np_trans_le &
 [ STEM < "circumvent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_circumvent_v_1_rel",
            PHON.ONSET con ] ].

circus_n1 := n_intr_le &
 [ STEM < "circus" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_circus_n_1_rel",
            PHON.ONSET con ] ].

cirque_n1 := n_intr_le &
 [ STEM < "cirque" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cirque_n_1_rel",
            PHON.ONSET con ] ].

cishu_n1 := n_proper_le &
 [ STEM < "cishu" >,
   SYNSEM [ LKEYS.KEYREL.CARG "cishu",
            PHON.ONSET con ] ].

cistern_n1 := n_intr_le &
 [ STEM < "cistern" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cistern_n_1_rel",
            PHON.ONSET con ] ].

cite_v1 := v_empty_prep*_trans_le &
 [ STEM < "cite" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_cite_v_for_rel" ],
            PHON.ONSET con ] ].

cite_v2 := v_np_as_le &
 [ STEM < "cite" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cite_v_as_rel",
            PHON.ONSET con ] ].

citibank_n1 := n_proper_le &
 [ STEM < "citibank" >,
   SYNSEM [ LKEYS.KEYREL.CARG "citibank",
            PHON.ONSET con ] ].

citizen_n1 := n_intr_le &
 [ STEM < "citizen" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_citizen_n_1_rel",
            PHON.ONSET con ] ].

citizenship_n1 := n_mass_le &
 [ STEM < "citizenship" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_citizenship_n_1_rel",
            PHON.ONSET con ] ].

city_n2 := n_intr_le &
 [ STEM < "city" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_city_n_1_rel",
            PHON.ONSET con ] ].

civil_a1 := adj_intrans_le &
 [ STEM < "civil" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_civil_a_1_rel",
            PHON.ONSET con ] ].

civility_n1 := n_mass_count_le &
 [ STEM < "civility" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_civility_n_1_rel",
            PHON.ONSET con ] ].

cjss_n1 := n_proper_abb_le &
 [ STEM < "cjss" >,
   SYNSEM [ LKEYS.KEYREL.CARG "cjss",
            PHON.ONSET con ] ].

claim_n1 := n_ppof_nosort_le &
 [ STEM < "claim" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_claim_n_of_rel",
            PHON.ONSET con ] ].

claim_n2 := n_cpcomp_fin_le &
 [ STEM < "claim" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_claim_n_of_rel",
            PHON.ONSET con ] ].

claim_v1 := v_np_trans_le &
 [ STEM < "claim" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_claim_v_1_rel",
            PHON.ONSET con ] ].

claim_v2 := v_cp_prop_non_trans_le &
 [ STEM < "claim" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_claim_v_1_rel",
            PHON.ONSET con ] ].

claim_v3 := v_subj_equi_le &
 [ STEM < "claim" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_claim_v_1_rel",
            PHON.ONSET con ] ].

claim_v4 := v_np_as_le &
 [ STEM < "claim" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_claim_v_as_rel",
            PHON.ONSET con ] ].

claimant_n1 := n_intr_le &
 [ STEM < "claimant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_claimant_n_1_rel",
            PHON.ONSET con ] ].

clamber_v1 := v_prep_dir_le &
 [ STEM < "clamber" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_clamber_v_1_rel",
            PHON.ONSET con ] ].

clan_n1 := n_intr_le &
 [ STEM < "clan" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_clan_n_1_rel",
            PHON.ONSET con ] ].

clap_in_v1 := v_empty_prep_trans_le &
 [ STEM < "clap" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_clap_v_in_rel" ],
            PHON.ONSET con ] ].

clap_n1 := n_intr_le &
 [ STEM < "clap" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_clap_n_1_rel",
            PHON.ONSET con ] ].

clap_v1 := v_np*_trans_le &
 [ STEM < "clap" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_clap_v_1_rel",
            PHON.ONSET con ] ].

clarify_v1 := v_np_trans_le &
 [ STEM < "clarify" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_clarify_v_1_rel",
            PHON.ONSET con ] ].

clarify_v2 := v_cp_non_trans_le &
 [ STEM < "clarify" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_clarify_v_1_rel",
            PHON.ONSET con ] ].

clarinet_n1 := n_intr_le &
 [ STEM < "clarinet" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_clarinet_n_1_rel",
            PHON.ONSET con ] ].

clarity_n1 := n_intr_le &
 [ STEM < "clarity" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_clarity_n_1_rel",
            PHON.ONSET con ] ].

clark_n1 := n_proper_le &
 [ STEM < "clark" >,
   SYNSEM [ LKEYS.KEYREL.CARG "clark",
            PHON.ONSET con ] ].

clash_v1 := v_unerg_le &
 [ STEM < "clash" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_clash_v_with_rel",
            PHON.ONSET con ] ].

clash_with_v1 := v_empty_prep_intrans_le &
 [ STEM < "clash" >,
   SYNSEM [ LKEYS [ --COMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_clash_v_with_rel" ],
            PHON.ONSET con ] ].

clasp_n1 := n_intr_le &
 [ STEM < "clasp" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_clasp_n_1_rel",
            PHON.ONSET con ] ].

clasp_v1 := v_np_trans_le &
 [ STEM < "clasp" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_clasp_v_1_rel",
            PHON.ONSET con ] ].

class_among_v1 := v_empty_prep_trans_le &
 [ STEM < "class" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _among_p_sel_rel,
                    KEYREL.PRED "_class_v_among_rel" ],
            PHON.ONSET con ] ].

class_n1 := n_mass_count_ppof_le &
 [ STEM < "class" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_class_n_of_rel",
            PHON.ONSET con ] ].

class_v1 := v_np_as_le &
 [ STEM < "class" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_class_v_as_rel",
            PHON.ONSET con ] ].

class_with_v1 := v_empty_prep_trans_le &
 [ STEM < "class" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_class_v_with_rel" ],
            PHON.ONSET con ] ].

classic_a1 := adj_intrans_le &
 [ STEM < "classic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_classic_a_1_rel",
            PHON.ONSET con ] ].

classic_n1 := n_no_cmpnd_le &
 [ STEM < "classic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_classic_n_1_rel",
            PHON.ONSET con ] ].

classical_isect := adj_intrans_le &
 [ STEM < "classical" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_classical_a_1_rel",
            PHON.ONSET con ] ].

classically := adv_int_vp_le &
 [ STEM < "classically" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_classical_a_1_rel",
            PHON.ONSET con ] ].

classicism_n1 := n_mass_le &
 [ STEM < "classicism" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_classicism_n_1_rel",
            PHON.ONSET con ] ].

classification_n1 := n_mass_count_ppof_le &
 [ STEM < "classification" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_classification_n_of_rel",
            PHON.ONSET con ] ].

classify_v1 := v_np*_trans_le &
 [ STEM < "classify" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_classify_v_1_rel",
            PHON.ONSET con ] ].

classify_v2 := v_np_as_le &
 [ STEM < "classify" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_classify_v_as_rel",
            PHON.ONSET con ] ].

claude_n1 := n_proper_le &
 [ STEM < "claude" >,
   SYNSEM [ LKEYS.KEYREL.CARG "claude",
            PHON.ONSET con ] ].

claudio_n1 := n_proper_le &
 [ STEM < "claudio" >,
   SYNSEM [ LKEYS.KEYREL.CARG "claudio",
            PHON.ONSET con ] ].

clause_n1 := n_intr_le &
 [ STEM < "clause" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_clause_n_1_rel",
            PHON.ONSET con ] ].

claw_n1 := n_intr_le &
 [ STEM < "claw" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_claw_n_1_rel",
            PHON.ONSET con ] ].

claw_v1 := v_prep_dir_le &
 [ STEM < "claw" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_claw_v_1_rel",
            PHON.ONSET con ] ].

claw_v2 := v_np_trans_noger_le &
 [ STEM < "claw" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_claw_v_1_rel",
            PHON.ONSET con ] ].

clay_n1 := n_proper_le &
 [ STEM < "clay" >,
   SYNSEM [ LKEYS.KEYREL.CARG "clay",
            PHON.ONSET con ] ].

clean_isect := adj_intrans_le &
 [ STEM < "clean" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_clean_a_1_rel",
            PHON.ONSET con ] ].

clean_of_v1 := v_empty_prep_trans_le &
 [ STEM < "clean" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_clean_v_of_rel" ],
            PHON.ONSET con ] ].

clean_out_v1 := v_particle_np_le &
 [ STEM < "clean" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_clean_v_out_rel" ],
            PHON.ONSET con ] ].

clean_up_v1 := v_particle_np_le &
 [ STEM < "clean" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_clean_v_up_rel" ],
            PHON.ONSET con ] ].

clean_up_v2 := v_particle_le &
 [ STEM < "clean" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_clean_v_up_rel" ],
            PHON.ONSET con ] ].

clean_v1 := v_np*_trans_le &
 [ STEM < "clean" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_clean_v_1_rel",
            PHON.ONSET con ] ].

cleaner_n1 := n_ppof_le &
 [ STEM < "cleaner" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cleaner_n_of_rel",
            PHON.ONSET con ] ].

cleanly := adv_int_vp_le &
 [ STEM < "cleanly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_clean_a_1_rel",
            PHON.ONSET con ] ].

cleanse_of_v1 := v_empty_prep*_trans_le &
 [ STEM < "cleanse" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_cleanse_v_of_rel" ],
            PHON.ONSET con ] ].

clear_a1 := adj_trans_le &
 [ STEM < "clear" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_clear_a_of_rel" ],
            PHON.ONSET con ] ].

clear_a2 := adj_reg_atrans_cp_le &
 [ STEM < "clear" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_clear_a_of_rel",
            PHON.ONSET con ] ].

clear_away_v1 := v_particle_np_le &
 [ STEM < "clear" >,
   SYNSEM [ LKEYS [ --COMPKEY _away_p_sel_rel,
                    KEYREL.PRED "_clear_v_away_rel" ],
            PHON.ONSET con ] ].

clear_from_v1 := v_empty_prep_trans_le &
 [ STEM < "clear" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _from_p_sel_rel,
                    KEYREL.PRED "_clear_v_from_rel" ],
            PHON.ONSET con ] ].

clear_of_v1 := v_empty_prep_trans_le &
 [ STEM < "clear" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_clear_v_of_rel" ],
            PHON.ONSET con ] ].

clear_off_v1 := v_particle_np_le &
 [ STEM < "clear" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_clear_v_off_rel" ],
            PHON.ONSET con ] ].

clear_off_v2 := v_particle_le &
 [ STEM < "clear" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_clear_v_off_rel" ],
            PHON.ONSET con ] ].

clear_out_v1 := v_particle_np_le &
 [ STEM < "clear" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_clear_v_out_rel" ],
            PHON.ONSET con ] ].

clear_out_v2 := v_particle_le &
 [ STEM < "clear" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_clear_v_out_rel" ],
            PHON.ONSET con ] ].

clear_up_v1 := v_particle_np_le &
 [ STEM < "clear" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_clear_v_up_rel" ],
            PHON.ONSET con ] ].

clear_up_v2 := v_particle_le &
 [ STEM < "clear" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_clear_v_up_rel" ],
            PHON.ONSET con ] ].

clear_v1 := v_np*_trans_le &
 [ STEM < "clear" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_clear_v_1_rel",
            PHON.ONSET con ] ].

clear_v2 := v_obj_equi_le &
 [ STEM < "clear" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_clear_v_1_rel",
            PHON.ONSET con ] ].

clearer := adj_comp_le &
 [ STEM < "clearer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_clear_a_of_rel",
            PHON.ONSET con ] ].

clearest_a1 := adj_superl_le &
 [ STEM < "clearest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_clear_a_of_rel",
            PHON.ONSET con ] ].

clearly_adv1 := adv_int_vp_aux_le &
 [ STEM < "clearly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_clear_a_of_rel",
            PHON.ONSET con ] ].

clearness_n1 := n_mass_le &
 [ STEM < "clearness" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_clearness_n_1_rel",
            PHON.ONSET con ] ].

cleat_n1 := n_intr_le &
 [ STEM < "cleat" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cleat_n_1_rel",
            PHON.ONSET con ] ].

cleave_to_v1 := v_empty_prep_intrans_le &
 [ STEM < "cleave" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_cleave_v_to_rel" ],
            PHON.ONSET con ] ].

cleave_v1 := v_np_trans_le &
 [ STEM < "cleave" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cleave_v_1_rel",
            PHON.ONSET con ] ].

cleft_n1 := n_intr_le &
 [ STEM < "cleft" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cleft_n_1_rel",
            PHON.ONSET con ] ].

clergy_n1 := n_plur_le &
 [ STEM < "clergy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_clergy_n_1_rel",
            PHON.ONSET con ] ].

clergyman_n1 := n_intr_le &
 [ STEM < "clergyman" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_clergyman_n_1_rel",
            PHON.ONSET con ] ].

clerical_a1 := adj_intrans_le &
 [ STEM < "clerical" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_clerical_a_1_rel",
            PHON.ONSET con ] ].

clerk_n1 := n_intr_le &
 [ STEM < "clerk" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_clerk_n_1_rel",
            PHON.ONSET con ] ].

clerk_v1 := v_unerg_le &
 [ STEM < "clerk" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_clerk_v_1_rel",
            PHON.ONSET con ] ].

cleveland_n1 := n_proper_city_le &
 [ STEM < "cleveland" >,
   SYNSEM [ LKEYS.KEYREL.CARG "cleveland",
            PHON.ONSET con ] ].

clever_a1 := adj_intrans_le &
 [ STEM < "clever" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_clever_a_1_rel",
            PHON.ONSET con ] ].

cleverly_adv1 := adv_int_vp_le &
 [ STEM < "cleverly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_clever_a_1_rel",
            PHON.ONSET con ] ].

click_n1 := n_intr_le &
 [ STEM < "click" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_click_n_1_rel",
            PHON.ONSET con ] ].

click_on_v1 := v_empty_prep_intrans_le &
 [ STEM < "click" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_click_v_on_rel" ],
            PHON.ONSET con ] ].

click_v1 := v_np_trans_le &
 [ STEM < "click" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_click_v_cause_rel",
            PHON.ONSET con ] ].

click_v2 := v_unacc_le &
 [ STEM < "click" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_click_v_1_rel",
            PHON.ONSET con ] ].

clie_n1 := n_intr_le &
 [ STEM < "clie" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_clie_n_1_rel",
            PHON.ONSET con ] ].

client_n1 := n_intr_le &
 [ STEM < "client" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_client_n_1_rel",
            PHON.ONSET con ] ].

cliff_n1 := n_intr_le &
 [ STEM < "cliff" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cliff_n_1_rel",
            PHON.ONSET con ] ].

cliff_top_a1 := adj_intrans_le &
 [ STEM < "clifftop" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_clifftop_a_1_rel",
            PHON.ONSET con ] ].

cliff_top_a2 := adj_intrans_le &
 [ STEM < "cliff-", "top" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_clifftop_a_1_rel",
            PHON.ONSET con ] ].

cliffside_n1 := n_proper_le &
 [ STEM < "cliffside" >,
   SYNSEM [ LKEYS.KEYREL.CARG "cliffside",
            PHON.ONSET con ] ].

climate_n1 := n_intr_nosort_le &
 [ STEM < "climate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_climate_n_1_rel",
            PHON.ONSET con ] ].

climatic_a1 := adj_intrans_le &
 [ STEM < "climatic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_climatic_a_1_rel",
            PHON.ONSET con ] ].

climb_n1 := n_intr_le &
 [ STEM < "climb" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_climb_n_1_rel",
            PHON.ONSET con ] ].

climb_v1 := v_np_trans_noger_le &
 [ STEM < "climb" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_climb_v_1_rel",
            PHON.ONSET con ] ].

climb_v2 := v_prep_dir_le &
 [ STEM < "climb" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_climb_v_1_rel",
            PHON.ONSET con ] ].

climbable_a1 := adj_intrans_le &
 [ STEM < "climbable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_climbable_a_1_rel",
            PHON.ONSET con ] ].

climber_n1 := n_ppof_le &
 [ STEM < "climber" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_climber_n_of_rel",
            PHON.ONSET con ] ].

climes_n1 := n_plur_le &
 [ STEM < "clime" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_climes_n_1_rel",
            PHON.ONSET con ] ].

clinch_n1 := n_intr_le &
 [ STEM < "clinch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_clinch_n_1_rel",
            PHON.ONSET con ] ].

clinch_v1 := v_np*_trans_le &
 [ STEM < "clinch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_clinch_v_1_rel",
            PHON.ONSET con ] ].

cling_on_v1 := v_particle_le &
 [ STEM < "cling" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_cling_v_on_rel" ],
            PHON.ONSET con ] ].

cling_to_v1 := v_prep_intrans_le &
 [ STEM < "cling" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_rel,
                    KEYREL.PRED "_cling_v_1_rel" ],
            PHON.ONSET con ] ].

clinic_n1 := n_intr_le &
 [ STEM < "clinic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_clinic_n_1_rel",
            PHON.ONSET con ] ].

clinker_n1 := n_intr_le &
 [ STEM < "clinker" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_clinker_n_1_rel",
            PHON.ONSET con ] ].

clinton_n1 := n_proper_le &
 [ STEM < "clinton" >,
   SYNSEM [ LKEYS.KEYREL.CARG "clinton",
            PHON.ONSET con ] ].

clip_n1 := n_intr_le &
 [ STEM < "clip" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_clip_n_1_rel",
            PHON.ONSET con ] ].

clip_v1 := v_np_trans_le &
 [ STEM < "clip" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_clip_v_1_rel",
            PHON.ONSET con ] ].

clip_v2 := v_np_prep_trans_dors_le &
 [ STEM < "clip" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_clip_v_1_rel",
            PHON.ONSET con ] ].

clique_n1 := n_intr_le &
 [ STEM < "clique" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_clique_n_1_rel",
            PHON.ONSET con ] ].

cloak_in_v1 := v_empty_prep*_trans_le &
 [ STEM < "cloak" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_cloak_v_in_rel" ],
            PHON.ONSET con ] ].

cloak_n1 := n_intr_le &
 [ STEM < "cloak" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cloak_n_1_rel",
            PHON.ONSET con ] ].

clock_n1 := n_intr_le &
 [ STEM < "clock" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_clock_n_1_rel",
            PHON.ONSET con ] ].

clocktime-ersatz := n_hour_min_le &
 [ STEM < "clocktimeersatz" >,
   SYNSEM [ LKEYS.KEYREL.CARG "clocktimeersatz",
            PHON.ONSET onset ] ].

clocktime-ersatz_2 := n_hour_min_le &
 [ STEM < "clockordecimalersatz" >,
   SYNSEM [ LKEYS.KEYREL.CARG "clocktimeersatz",
            PHON.ONSET onset ] ].

close_a1 := adj_trans_le &
 [ STEM < "close" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_close_a_to_rel" ],
            PHON.ONSET con ] ].

close_by_adv1 := pp_le &
 [ STEM < "close", "by" >,
   SYNSEM [ LKEYS.KEYREL.PRED _close+by_p_rel,
            PHON.ONSET con ] ].

close_down_v1 := v_particle_np_le &
 [ STEM < "close" >,
   SYNSEM [ LKEYS [ --COMPKEY _down_p_sel_rel,
                    KEYREL.PRED "_close_v_down_rel" ],
            PHON.ONSET con ] ].

close_down_v2 := v_particle_le &
 [ STEM < "close" >,
   SYNSEM [ LKEYS [ --COMPKEY _down_p_sel_rel,
                    KEYREL.PRED "_close_v_down_rel" ],
            PHON.ONSET con ] ].

close_in_v1 := v_particle_np_le &
 [ STEM < "close" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_close_v_in_rel" ],
            PHON.ONSET con ] ].

close_in_v2 := v_particle_le &
 [ STEM < "close" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_close_v_in_rel" ],
            PHON.ONSET con ] ].

close_n1 := n_ppof_le &
 [ STEM < "close" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_close_n_of_rel",
            PHON.ONSET con ] ].

close_off_v1 := v_particle_np_le &
 [ STEM < "close" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_close_v_off_rel" ],
            PHON.ONSET con ] ].

close_off_v2 := v_particle_le &
 [ STEM < "close" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_close_v_off_rel" ],
            PHON.ONSET con ] ].

close_out_v1 := v_particle_np_le &
 [ STEM < "close" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_close_v_out_rel" ],
            PHON.ONSET con ] ].

close_out_v2 := v_particle_le &
 [ STEM < "close" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_close_v_out_rel" ],
            PHON.ONSET con ] ].

close_post_ttl := n_post_title_le &
 [ STEM < "close" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_close_n_of_rel",
            PHON.ONSET con ] ].

close_to_p := p_le &
 [ STEM < "close", "to" >,
   SYNSEM [ LKEYS.KEYREL.PRED _close+to_p_rel,
            PHON.ONSET con ] ].

close_up_v1 := v_particle_np_le &
 [ STEM < "close" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_close_v_up_rel" ],
            PHON.ONSET con ] ].

close_up_v2 := v_particle_le &
 [ STEM < "close" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_close_v_up_rel" ],
            PHON.ONSET con ] ].

close_v1 := v_np_trans_le &
 [ STEM < "close" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_close_v_cause_rel",
            PHON.ONSET con ] ].

close_v2 := v_unacc_le &
 [ STEM < "close" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_close_v_1_rel",
            PHON.ONSET con ] ].

closed_isect := adj_intrans_le &
 [ STEM < "closed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_closed_a_1_rel",
            PHON.ONSET con ] ].

closely := adv_int_vp_le &
 [ STEM < "closely" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_close_a_to_rel",
            PHON.ONSET con ] ].

closer_a1 := adj_comp_trans_le &
 [ STEM < "closer" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_close_a_to_rel" ],
            PHON.ONSET con ] ].

closest_a1 := adj_trans_le &
 [ STEM < "closest" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_closest_a_to_rel" ],
            PHON.ONSET con ] ].

closet_n1 := n_intr_le &
 [ STEM < "closet" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_closet_n_1_rel",
            PHON.ONSET con ] ].

cloth_n1 := n_mass_count_le &
 [ STEM < "cloth" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cloth_n_1_rel",
            PHON.ONSET con ] ].

clothe_v1 := v_empty_prep*_trans_le &
 [ STEM < "clothe" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_clothe_v_in_rel" ],
            PHON.ONSET con ] ].

clothes_n1 := n_plur_nocmpnd_le &
 [ STEM < "clothe" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_clothes_n_1_rel",
            PHON.ONSET con ] ].

clotheshorse_n1 := n_intr_le &
 [ STEM < "clotheshorse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_clotheshorse_n_1_rel",
            PHON.ONSET con ] ].

clothesline_n1 := n_mass_count_le &
 [ STEM < "clothesline" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_clothesline_n_1_rel",
            PHON.ONSET con ] ].

clothing_n1 := n_mass_le &
 [ STEM < "clothing" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_clothing_n_1_rel",
            PHON.ONSET con ] ].

cloud_free_a1 := adj_intrans_le &
 [ STEM < "cloud-", "free" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cloud+free_a_1_rel",
            PHON.ONSET con ] ].

cloud_n1 := n_ppof_le &
 [ STEM < "cloud" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cloud_n_of_rel",
            PHON.ONSET con ] ].

cloud_v1 := v_np_trans_le &
 [ STEM < "cloud" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cloud_v_1_rel",
            PHON.ONSET con ] ].

cloudberry_n1 := n_intr_le &
 [ STEM < "cloudberry" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cloudberry_n_1_rel",
            PHON.ONSET con ] ].

cloudier_a1 := adj_comp_le &
 [ STEM < "cloudier" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cloudy_a_1_rel",
            PHON.ONSET con ] ].

cloudier_a2 := adj_atrans_comp_le &
 [ STEM < "cloudier" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cloudy_a_1_rel",
            PHON.ONSET con ] ].

cloudiest_a1 := adj_superl_le &
 [ STEM < "cloudiest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cloudy_a_1_rel",
            PHON.ONSET con ] ].

cloudiest_a2 := adj_atrans_superl_le &
 [ STEM < "cloudiest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cloudy_a_1_rel",
            PHON.ONSET con ] ].

cloudiness_n1 := n_mass_count_le &
 [ STEM < "cloudiness" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cloudiness_n_1_rel",
            PHON.ONSET con ] ].

cloudless_a1 := adj_intrans_le &
 [ STEM < "cloudless" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cloudless_a_1_rel",
            PHON.ONSET con ] ].

cloudy_a1 := adj_intrans_le &
 [ STEM < "cloudy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cloudy_a_1_rel",
            PHON.ONSET con ] ].

cloudy_a2 := adj_atrans_le &
 [ STEM < "cloudy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cloudy_a_1_rel",
            PHON.ONSET con ] ].

clover_n1 := n_mass_le &
 [ STEM < "clover" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_clover_n_1_rel",
            PHON.ONSET con ] ].

clover_n2 := n_proper_le &
 [ STEM < "clover" >,
   SYNSEM [ LKEYS.KEYREL.CARG "clover",
            PHON.ONSET con ] ].

clown_around_v1 := v_particle_le &
 [ STEM < "clown" >,
   SYNSEM [ LKEYS [ --COMPKEY _around_p_sel_rel,
                    KEYREL.PRED "_clown_v_around_rel" ],
            PHON.ONSET con ] ].

clown_n1 := n_intr_le &
 [ STEM < "clown" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_clown_n_1_rel",
            PHON.ONSET con ] ].

clown_v1 := v_unerg_le &
 [ STEM < "clown" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_clown_v_1_rel",
            PHON.ONSET con ] ].

club_n1 := n_intr_le &
 [ STEM < "club" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_club_n_1_rel",
            PHON.ONSET con ] ].

club_post_ttl := n_post_title_le &
 [ STEM < "club" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_club_n_1_rel",
            PHON.ONSET con ] ].

clue_n1 := n_intr_le &
 [ STEM < "clue" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_clue_n_1_rel",
            PHON.ONSET con ] ].

clueless_a1 := adj_intrans_le &
 [ STEM < "clueless" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_clueless_a_1_rel",
            PHON.ONSET con ] ].

clump_n1 := n_ppof_nosort_le &
 [ STEM < "clump" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_clump_n_of_rel",
            PHON.ONSET con ] ].

clump_v1 := v_unerg_le &
 [ STEM < "clump" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_clump_v_1_rel",
            PHON.ONSET con ] ].

clumsily := adv_int_vp_le &
 [ STEM < "clumsily" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_clumsy_a_1_rel",
            PHON.ONSET con ] ].

clumsy_a1 := adj_intrans_le &
 [ STEM < "clumsy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_clumsy_a_1_rel",
            PHON.ONSET con ] ].

cluster_n1 := n_ppof_le &
 [ STEM < "cluster" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cluster_n_of_rel",
            PHON.ONSET con ] ].

cluster_v1 := v_prep_dir_le &
 [ STEM < "cluster" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cluster_v_1_rel",
            PHON.ONSET con ] ].

clutch_at_v1 := v_empty_prep_intrans_le &
 [ STEM < "clutch" >,
   SYNSEM [ LKEYS [ --COMPKEY _at_p_sel_rel,
                    KEYREL.PRED "_clutch_v_at_rel" ],
            PHON.ONSET con ] ].

clutch_n1 := n_ppof_le &
 [ STEM < "clutch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_clutch_n_of_rel",
            PHON.ONSET con ] ].

clutch_v1 := v_np_trans_le &
 [ STEM < "clutch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_clutch_v_1_rel",
            PHON.ONSET con ] ].

cluttered_a1 := adj_intrans_le &
 [ STEM < "cluttered" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cluttered_a_1_rel",
            PHON.ONSET con ] ].

cnn_n1 := n_proper_le &
 [ STEM < "cnn" >,
   SYNSEM [ LKEYS.KEYREL.CARG "cnn",
            PHON.ONSET con ] ].

co-owner_n1 := n_intr_le &
 [ STEM < "co", "owner" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_co-owner_n_1_rel",
            PHON.ONSET con ] ].

co-owner_n2 := n_intr_le &
 [ STEM < "co-", "owner" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_co-owner_n_1_rel",
            PHON.ONSET con ] ].

co-worker_n1 := n_intr_le &
 [ STEM < "co", "worker" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_co-worker_n_1_rel",
            PHON.ONSET con ] ].

co-worker_n2 := n_intr_le &
 [ STEM < "co-", "worker" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_co-worker_n_1_rel",
            PHON.ONSET con ] ].

coach_n1 := n_intr_le &
 [ STEM < "coach" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_coach_n_1_rel",
            PHON.ONSET con ] ].

coach_v1 := v_np_trans_le &
 [ STEM < "coach" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_coach_v_1_rel",
            PHON.ONSET con ] ].

coachman_n1 := n_intr_le &
 [ STEM < "coachman" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_coachman_n_1_rel",
            PHON.ONSET con ] ].

coal_n1 := n_mass_le &
 [ STEM < "coal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_coal_n_1_rel",
            PHON.ONSET con ] ].

coalescence_n1 := n_mass_count_le &
 [ STEM < "coalescence" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_coalescence_n_1_rel",
            PHON.ONSET con ] ].

coalition_n1 := n_intr_le &
 [ STEM < "coalition" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_coalition_n_1_rel",
            PHON.ONSET con ] ].

coarse_a1 := adj_intrans_le &
 [ STEM < "coarse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_coarse_a_1_rel",
            PHON.ONSET con ] ].

coast_n1 := n_intr_le &
 [ STEM < "coast" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_coast_n_1_rel",
            PHON.ONSET con ] ].

coast_v1 := v_prep_dir_le &
 [ STEM < "coast" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_coast_v_1_rel",
            PHON.ONSET con ] ].

coastal_a1 := adj_intrans_le &
 [ STEM < "coastal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_coastal_a_1_rel",
            PHON.ONSET con ] ].

coastline_n1 := n_intr_le &
 [ STEM < "coastline" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_coastline_n_1_rel",
            PHON.ONSET con ] ].

coat_n1 := n_ppof_le &
 [ STEM < "coat" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_coat_n_of_rel",
            PHON.ONSET con ] ].

coat_v1 := v_np_trans_le &
 [ STEM < "coat" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_coat_v_1_rel",
            PHON.ONSET con ] ].

coating_n1 := n_ppof_le &
 [ STEM < "coating" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_coating_n_of_rel",
            PHON.ONSET con ] ].

cobalt_a1 := adj_intrans_le &
 [ STEM < "cobalt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cobalt_a_1_rel",
            PHON.ONSET con ] ].

cobalt_n1 := n_mass_le &
 [ STEM < "cobalt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cobalt_n_1_rel",
            PHON.ONSET con ] ].

cobble_n1 := n_intr_le &
 [ STEM < "cobble" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cobble_n_1_rel",
            PHON.ONSET con ] ].

cobblestone_n1 := n_intr_le &
 [ STEM < "cobblestone" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cobblestone_n_1_rel",
            PHON.ONSET con ] ].

cobblestone_n2 := n_intr_le &
 [ STEM < "cobble", "stone" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cobblestone_n_1_rel",
            PHON.ONSET con ] ].

cobra_n1 := n_intr_le &
 [ STEM < "cobra" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cobra_n_1_rel",
            PHON.ONSET con ] ].

coburg_n1 := n_proper_le &
 [ STEM < "coburg" >,
   SYNSEM [ LKEYS.KEYREL.CARG "coburg",
            PHON.ONSET con ] ].

coca_cola_n1 := n_proper_le &
 [ STEM < "coca", "cola" >,
   SYNSEM [ LKEYS.KEYREL.CARG "coca_cola",
            PHON.ONSET con ] ].

cock_n1 := n_intr_le &
 [ STEM < "cock" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cock_n_1_rel",
            PHON.ONSET con ] ].

cock_v1 := v_np_trans_le &
 [ STEM < "cock" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cock_v_1_rel",
            PHON.ONSET con ] ].

cocktail_n1 := n_intr_le &
 [ STEM < "cocktail" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cocktail_n_1_rel",
            PHON.ONSET con ] ].

cod_n1 := n_mass_count_le &
 [ STEM < "cod" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cod_n_1_rel",
            PHON.ONSET con ] ].

code_n1 := n_mass_count_le &
 [ STEM < "code" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_code_n_1_rel",
            PHON.ONSET con ] ].

code_up_v1 := v_particle_np_le &
 [ STEM < "code" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_code_v_up_rel" ],
            PHON.ONSET con ] ].

code_v1 := v_np*_trans_le &
 [ STEM < "code" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_code_v_1_rel",
            PHON.ONSET con ] ].

coder_n1 := n_intr_le &
 [ STEM < "coder" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_coder_n_1_rel",
            PHON.ONSET con ] ].

coerce_v1 := v_obj_equi_le &
 [ STEM < "coerce" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_coerce_v_1_rel",
            PHON.ONSET con ] ].

coerce_v2 := v_np_trans_le &
 [ STEM < "coerce" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_coerce_v_1_rel",
            PHON.ONSET con ] ].

coercion_n1 := n_mass_le &
 [ STEM < "coercion" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_coercion_n_1_rel",
            PHON.ONSET con ] ].

coffee_n1 := n_mass_count_le &
 [ STEM < "coffee" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_coffee_n_1_rel",
            PHON.ONSET con ] ].

coffin_n1 := n_intr_le &
 [ STEM < "coffin" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_coffin_n_1_rel",
            PHON.ONSET con ] ].

cognac_n1 := n_mass_count_le &
 [ STEM < "cognac" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cognac_n_1_rel",
            PHON.ONSET con ] ].

cognate_a1 := adj_trans_le &
 [ STEM < "cognate" >,
   SYNSEM [ LKEYS [ --COMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_cognate_a_with_rel" ],
            PHON.ONSET con ] ].

cognizance_n1 := n_mass_le &
 [ STEM < "cognizance" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cognizance_n_1_rel",
            PHON.ONSET con ] ].

coherent_a1 := adj_intrans_le &
 [ STEM < "coherent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_coherent_a_1_rel",
            PHON.ONSET con ] ].

coherently := adv_int_vp_le &
 [ STEM < "coherently" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_coherent_a_1_rel",
            PHON.ONSET con ] ].

cohesive_a1 := adj_intrans_le &
 [ STEM < "cohesive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cohesive_a_1_rel",
            PHON.ONSET con ] ].

coil_n1 := n_intr_le &
 [ STEM < "coil" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_coil_n_1_rel",
            PHON.ONSET con ] ].

coil_up_v1 := v_particle_np_le &
 [ STEM < "coil" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_coil_v_up_rel" ],
            PHON.ONSET con ] ].

coil_up_v2 := v_particle_le &
 [ STEM < "coil" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_coil_v_up_rel" ],
            PHON.ONSET con ] ].

coil_v1 := v_unerg_le &
 [ STEM < "coil" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_coil_v_1_rel",
            PHON.ONSET con ] ].

coil_v2 := v_np_trans_le &
 [ STEM < "coil" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_coil_v_cause_rel",
            PHON.ONSET con ] ].

coin_n1 := n_intr_le &
 [ STEM < "coin" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_coin_n_1_rel",
            PHON.ONSET con ] ].

coin_v1 := v_np_trans_le &
 [ STEM < "coin" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_coin_v_1_rel",
            PHON.ONSET con ] ].

coincide_v1 := v_unerg_le &
 [ STEM < "coincide" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_coincide_v_1_rel",
            PHON.ONSET con ] ].

coincide_with_v1 := v_empty_prep_intrans_le &
 [ STEM < "coincide" >,
   SYNSEM [ LKEYS [ --COMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_coincide_v_with_rel" ],
            PHON.ONSET con ] ].

coincidence_n1 := n_intr_le &
 [ STEM < "coincidence" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_coincidence_n_1_rel",
            PHON.ONSET con ] ].

coincident_a1 := adj_intrans_le &
 [ STEM < "coincident" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_coincident_a_1_rel",
            PHON.ONSET con ] ].

coinciding_isect := adj_attr_intrans_le &
 [ STEM < "coinciding" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_coinciding_a_1_rel",
            PHON.ONSET con ] ].

coincidingly := adv_int_vp_le &
 [ STEM < "coincidingly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_coinciding_a_1_rel",
            PHON.ONSET con ] ].

coke_n1 := n_mass_count_le &
 [ STEM < "coke" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_coke_n_1_rel",
            PHON.ONSET con ] ].

col_n1 := n_intr_le &
 [ STEM < "col" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_col_n_1_rel",
            PHON.ONSET con ] ].

cola_n1 := n_intr_le &
 [ STEM < "cola" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cola_n_1_rel",
            PHON.ONSET con ] ].

cold_a1 := adj_intrans_le &
 [ STEM < "cold" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cold_a_1_rel",
            PHON.ONSET con ] ].

cold_a2 := adj_atrans_le &
 [ STEM < "cold" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cold_a_1_rel",
            PHON.ONSET con ] ].

cold_n := n_mass_count_le &
 [ STEM < "cold" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cold_n_1_rel",
            PHON.ONSET con ] ].

colder_a1 := adj_comp_le &
 [ STEM < "colder" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cold_a_1_rel",
            PHON.ONSET con ] ].

colder_a2 := adj_atrans_comp_le &
 [ STEM < "colder" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cold_a_1_rel",
            PHON.ONSET con ] ].

coldest_a1 := adj_superl_le &
 [ STEM < "coldest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cold_a_1_rel",
            PHON.ONSET con ] ].

coldest_a2 := adj_atrans_superl_le &
 [ STEM < "coldest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cold_a_1_rel",
            PHON.ONSET con ] ].

coldly := adv_int_vp_le &
 [ STEM < "coldly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cold_a_1_rel",
            PHON.ONSET con ] ].

coleoptera_n1 := n_proper_le &
 [ STEM < "coleoptera" >,
   SYNSEM [ LKEYS.KEYREL.CARG "coleoptera",
            PHON.ONSET con ] ].

colgate := n_proper_le &
 [ STEM < "colgate" >,
   SYNSEM [ LKEYS.KEYREL.CARG "colgate",
            PHON.ONSET con ] ].

colin_n1 := n_proper_le &
 [ STEM < "colin" >,
   SYNSEM [ LKEYS.KEYREL.CARG "colin",
            PHON.ONSET con ] ].

collaborator_n1 := n_intr_le &
 [ STEM < "collaborator" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_collaborator_n_1_rel",
            PHON.ONSET con ] ].

collapse_n1 := n_mass_count_le &
 [ STEM < "collapse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_collapse_n_1_rel",
            PHON.ONSET con ] ].

collapse_v1 := v_np_trans_le &
 [ STEM < "collapse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_collapse_v_cause_rel",
            PHON.ONSET con ] ].

collapse_v2 := v_unacc_dir_le &
 [ STEM < "collapse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_collapse_v_1_rel",
            PHON.ONSET con ] ].

collateral_a1 := adj_intrans_le &
 [ STEM < "collateral" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_collateral_a_1_rel",
            PHON.ONSET con ] ].

collateral_n1 := n_mass_le &
 [ STEM < "collateral" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_collateral_n_1_rel",
            PHON.ONSET con ] ].

colleague_n1 := n_intr_le &
 [ STEM < "colleague" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_colleague_n_1_rel",
            PHON.ONSET con ] ].

collect_v1 := v_np_trans_le &
 [ STEM < "collect" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_collect_v_1_rel",
            PHON.ONSET con ] ].

collection_n := n_ppof_le &
 [ STEM < "collection" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_collection_n_of_rel",
            PHON.ONSET con ] ].

collective_n1 := n_proper_le &
 [ STEM < "collective" >,
   SYNSEM [ LKEYS.KEYREL.CARG "collective",
            PHON.ONSET con ] ].

collectively_adv := adv_int_vp_le &
 [ STEM < "collectively" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_collective_a_1_rel",
            PHON.ONSET con ] ].

collector_n1 := n_intr_le &
 [ STEM < "collector" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_collector_n_1_rel",
            PHON.ONSET con ] ].

college_n1 := n_mass_count_ppof_le &
 [ STEM < "college" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_college_n_of_rel",
            PHON.ONSET con ] ].

collision_n1 := n_mass_count_le &
 [ STEM < "collision" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_collision_n_1_rel",
            PHON.ONSET con ] ].

colloquially := adv_int_vp_le &
 [ STEM < "colloquially" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_colloquial_a_1_rel",
            PHON.ONSET con ] ].

colloquium_n1 := n_intr_le &
 [ STEM < "colloquium" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_colloquium_n_1_rel",
            PHON.ONSET con ] ].

cologne_n1 := n_proper_city_le &
 [ STEM < "cologne" >,
   SYNSEM [ LKEYS.KEYREL.CARG "cologne",
            PHON.ONSET con ] ].

colombia_n1 := n_proper_le &
 [ STEM < "colombia" >,
   SYNSEM [ LKEYS.KEYREL.CARG "colombia",
            PHON.ONSET con ] ].

colombian_a1 := adj_intrans_le &
 [ STEM < "colombian" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_colombian_a_1_rel",
            PHON.ONSET con ] ].

colombian_n1 := n_intr_le &
 [ STEM < "colombian" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_colombian_n_1_rel",
            PHON.ONSET con ] ].

colonize_v1 := v_np_trans_le &
 [ STEM < "colonize" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_colonize_v_1_rel",
            PHON.ONSET con ] ].

colonnade_n1 := n_intr_le &
 [ STEM < "colonnade" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_colonnade_n_1_rel",
            PHON.ONSET con ] ].

colony_n1 := n_intr_le &
 [ STEM < "colony" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_colony_n_1_rel",
            PHON.ONSET con ] ].

color_n1 := n_mass_count_le &
 [ STEM < "color" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_color_n_1_rel",
            PHON.ONSET con ] ].

color_v1 := v_np*_trans_le &
 [ STEM < "color" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_color_v_1_rel",
            PHON.ONSET con ] ].

colorado_n1 := n_proper_le &
 [ STEM < "colorado" >,
   SYNSEM [ LKEYS.KEYREL.CARG "colorado",
            PHON.ONSET con ] ].

colorado_n2 := n_proper_abb_le &
 [ STEM < "co" >,
   SYNSEM [ LKEYS.KEYREL.CARG "colorado",
            PHON.ONSET con ] ].

colorful_isect := adj_intrans_le &
 [ STEM < "colorful" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_colorful_a_1_rel",
            PHON.ONSET con ] ].

colorfully := adv_int_vp_le &
 [ STEM < "colorfully" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_colorful_a_1_rel",
            PHON.ONSET con ] ].

colour_n1 := n_mass_count_le &
 [ STEM < "colour" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_color_n_1_rel",
            PHON.ONSET con ] ].

colourful_a1 := adj_intrans_le &
 [ STEM < "colourful" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_colourful_a_1_rel",
            PHON.ONSET con ] ].

columbia_n1 := n_proper_city_le &
 [ STEM < "columbia" >,
   SYNSEM [ LKEYS.KEYREL.CARG "columbia",
            PHON.ONSET con ] ].

columbian_a1 := adj_intrans_le &
 [ STEM < "columbian" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_columbian_a_1_rel",
            PHON.ONSET con ] ].

columbus_day_hd := n_holiday_le &
 [ STEM < "columbus", "day" >,
   SYNSEM [ LKEYS.KEYREL.CARG "columbus_day",
            PHON.ONSET con ] ].

columbus_n1 := n_proper_le &
 [ STEM < "columbus" >,
   SYNSEM [ LKEYS.KEYREL.CARG "columbus",
            PHON.ONSET con ] ].

column_n1 := n_ppof_le &
 [ STEM < "column" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_column_n_of_rel",
            PHON.ONSET con ] ].

combat_n1 := n_mass_le &
 [ STEM < "combat" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_combat_n_1_rel",
            PHON.ONSET con ] ].

combat_v1 := v_np_trans_le &
 [ STEM < "combat" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_combat_v_1_rel",
            PHON.ONSET con ] ].

combatant_n1 := n_intr_le &
 [ STEM < "combatant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_combatant_n_1_rel",
            PHON.ONSET con ] ].

combination_n1 := n_ppof_le &
 [ STEM < "combination" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_combination_n_of_rel",
            PHON.ONSET con ] ].

combine_n1 := n_intr_le &
 [ STEM < "combine" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_combine_n_1_rel",
            PHON.ONSET con ] ].

combine_v1 := v_prep*_intrans_le &
 [ STEM < "combine" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_combine_v_1_rel",
            PHON.ONSET con ] ].

combine_v2 := v_np_trans_le &
 [ STEM < "combine" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_combine_v_cause_rel",
            PHON.ONSET con ] ].

combine_v3 := v_np_prep_trans_le &
 [ STEM < "combine" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _with_p_rel,
                    KEYREL.PRED "_combine_v_cause_rel" ],
            PHON.ONSET con ] ].

come_about_v1 := v_particle_le &
 [ STEM < "come" >,
   SYNSEM [ LKEYS [ --COMPKEY _about_p_sel_rel,
                    KEYREL.PRED "_come_v_about_rel" ],
            PHON.ONSET con ] ].

come_across_as_v1 := v_particle_pp_le &
 [ STEM < "come" >,
   SYNSEM [ LKEYS [ --COMPKEY _across_p_sel_rel,
                    --OCOMPKEY _as_p_rel,
                    KEYREL.PRED "_come_v_across_rel" ],
            PHON.ONSET con ] ].

come_across_v1 := v_particle_le &
 [ STEM < "come" >,
   SYNSEM [ LKEYS [ --COMPKEY _across_p_sel_rel,
                    KEYREL.PRED "_come_v_across_rel" ],
            PHON.ONSET con ] ].

come_across_v2 := v_empty_prep_intrans_le &
 [ STEM < "come" >,
   SYNSEM [ LKEYS [ --COMPKEY _across_p_sel_rel,
                    KEYREL.PRED "_come_v_across_rel" ],
            PHON.ONSET con ] ].

come_along_v1 := v_particle_pp_le &
 [ STEM < "come" >,
   SYNSEM [ LKEYS [ --COMPKEY _along_p_sel_rel,
                    --OCOMPKEY _to_p_rel,
                    KEYREL.PRED "_come_v_along_rel" ],
            PHON.ONSET con ] ].

come_along_v2 := v_particle_le &
 [ STEM < "come" >,
   SYNSEM [ LKEYS [ --COMPKEY _along_p_sel_rel,
                    KEYREL.PRED "_come_v_along_rel" ],
            PHON.ONSET con ] ].

come_around_v1 := v_particle_le &
 [ STEM < "come" >,
   SYNSEM [ LKEYS [ --COMPKEY _around_p_sel_rel,
                    KEYREL.PRED "_come_v_around_rel" ],
            PHON.ONSET con ] ].

come_back_v1 := v_particle_pp_le &
 [ STEM < "come" >,
   SYNSEM [ LKEYS [ --COMPKEY _back_p_sel_rel,
                    --OCOMPKEY _to_p_rel,
                    KEYREL.PRED "_come_v_back_rel" ],
            PHON.ONSET con ] ].

come_back_v2 := v_particle_le &
 [ STEM < "come" >,
   SYNSEM [ LKEYS [ --COMPKEY _back_p_sel_rel,
                    KEYREL.PRED "_come_v_back_rel" ],
            PHON.ONSET con ] ].

come_in_v1 := v_particle_le &
 [ STEM < "come" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_come_v_in_rel" ],
            PHON.ONSET con ] ].

come_into_being_v1_i := v_empty_prep_trans_idiom_le &
 [ STEM < "come" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _into_p_sel_rel,
                    KEYREL.PRED "_come_v_i_rel" ],
            PHON.ONSET con ] ].

come_on_v1 := v_particle_le &
 [ STEM < "come" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_come_v_on_rel" ],
            PHON.ONSET con ] ].

come_out_v1 := v_particle_le &
 [ STEM < "come" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_come_v_out_rel" ],
            PHON.ONSET con ] ].

come_out_with_v1 := v_particle_pp_le &
 [ STEM < "come" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    --OCOMPKEY _with_p_rel,
                    KEYREL.PRED "_come_v_out_rel" ],
            PHON.ONSET con ] ].

come_over_v1 := v_particle_le &
 [ STEM < "come" >,
   SYNSEM [ LKEYS [ --COMPKEY _over_p_sel_rel,
                    KEYREL.PRED "_come_v_over_rel" ],
            PHON.ONSET con ] ].

come_together_v1 := v_particle_le &
 [ STEM < "come" >,
   SYNSEM [ LKEYS [ --COMPKEY _together_p_sel_rel,
                    KEYREL.PRED "_come_v_together_rel" ],
            PHON.ONSET con ] ].

come_up_v1 := v_particle_le &
 [ STEM < "come" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_come_v_up_rel" ],
            PHON.ONSET con ] ].

come_up_with_v1 := v_particle_pp_le &
 [ STEM < "come" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    --OCOMPKEY _with_p_rel,
                    KEYREL.PRED "_come_v_up_rel" ],
            PHON.ONSET con ] ].

come_v1 := v_prep_dir_le &
 [ STEM < "come" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_come_v_1_rel",
            PHON.ONSET con ] ].

come_v2 := v_subj_equi_le &
 [ STEM < "come" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_come_v_1_rel",
            PHON.ONSET voc ] ].

come_v3 := v_loc_inv_mv_le &
 [ STEM < "come" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_come_v_1_rel",
            PHON.ONSET con ] ].

comedy_n := n_intr_le &
 [ STEM < "comedy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_comedy_n_1_rel",
            PHON.ONSET con ] ].

comeliness_n1 := n_mass_le &
 [ STEM < "comeliness" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_comeliness_n_1_rel",
            PHON.ONSET con ] ].

comely_a1 := adj_intrans_le &
 [ STEM < "comely" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_comely_a_1_rel",
            PHON.ONSET con ] ].

comfort_n := n_mass_count_le &
 [ STEM < "comfort" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_comfort_n_1_rel",
            PHON.ONSET con ] ].

comfort_v1 := v_np_trans_le &
 [ STEM < "comfort" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_comfort_v_1_rel",
            PHON.ONSET con ] ].

comfortable_a1 := adj_intrans_le &
 [ STEM < "comfortable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_comfortable_a_1_rel",
            PHON.ONSET con ] ].

comfortably := adv_int_vp_le &
 [ STEM < "comfortably" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_comfortable_a_1_rel",
            PHON.ONSET con ] ].

comic_n := n_intr_le &
 [ STEM < "comic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_comic_n_1_rel",
            PHON.ONSET con ] ].

comma_n := n_intr_le &
 [ STEM < "comma" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_comma_n_1_rel",
            PHON.ONSET con ] ].

command_n1 := n_mass_count_le &
 [ STEM < "command" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_command_n_1_rel",
            PHON.ONSET con ] ].

command_v1 := v_obj_equi_le &
 [ STEM < "command" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_command_v_1_rel",
            PHON.ONSET con ] ].

command_v2 := v_np_trans_le &
 [ STEM < "command" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_command_v_1_rel",
            PHON.ONSET con ] ].

command_v3 := v_cp_prop_non_trans_le &
 [ STEM < "command" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_command_v_1_rel",
            PHON.ONSET con ] ].

commander_n1 := n_ppof_le &
 [ STEM < "commander" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_commander_n_of_rel",
            PHON.ONSET con ] ].

commander_ttl := n_title_le &
 [ STEM < "commander" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_commander_n_of_rel",
            PHON.ONSET con ] ].

commemorate_v1 := v_np_trans_le &
 [ STEM < "commemorate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_commemorate_v_1_rel",
            PHON.ONSET con ] ].

commemoration_n1 := n_mass_count_le &
 [ STEM < "commemoration" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_commemoration_n_1_rel",
            PHON.ONSET con ] ].

commence_v1 := v_np*_trans_le &
 [ STEM < "commence" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_commence_v_1_rel",
            PHON.ONSET con ] ].

commence_v2 := v_ssr_prp_le &
 [ STEM < "commence" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_commence_v_1_rel",
            PHON.ONSET con ] ].

commencement_n1 := n_ppof_le &
 [ STEM < "commencement" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_commencement_n_of_rel",
            PHON.ONSET con ] ].

commend_v1 := v_empty_prep*_trans_le &
 [ STEM < "commend" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_commend_v_on_rel" ],
            PHON.ONSET con ] ].

commend_v2 := v_empty_prep_trans_le &
 [ STEM < "commend" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_commend_v_for_rel" ],
            PHON.ONSET con ] ].

commend_v3 := v_to_trans_le &
 [ STEM < "commend" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_commend_v_to_rel",
            PHON.ONSET con ] ].

commendable_a1 := adj_intrans_le &
 [ STEM < "commendable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_commendable_a_1_rel",
            PHON.ONSET con ] ].

comment_n1 := n_intr_le &
 [ STEM < "comment" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_comment_n_1_rel",
            PHON.ONSET con ] ].

comment_v1 := v_empty_prep_intrans_le &
 [ STEM < "comment" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_comment_v_on_rel" ],
            PHON.ONSET con ] ].

comment_v2 := v_unerg_le &
 [ STEM < "comment" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_comment_v_1_rel",
            PHON.ONSET con ] ].

comment_v3 := v_cp_non_trans_le &
 [ STEM < "comment" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_comment_v_1_rel",
            PHON.ONSET con ] ].

commentary_n1 := n_mass_count_le &
 [ STEM < "commentary" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_commentary_n_1_rel",
            PHON.ONSET con ] ].

commerce_n1 := n_mass_le &
 [ STEM < "commerce" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_commerce_n_1_rel",
            PHON.ONSET con ] ].

commercial_a1 := adj_intrans_le &
 [ STEM < "commercial" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_commercial_a_1_rel",
            PHON.ONSET con ] ].

commercial_n1 := n_intr_le &
 [ STEM < "commercial" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_commercial_n_1_rel",
            PHON.ONSET con ] ].

commission_n1 := n_mass_count_ppof_le &
 [ STEM < "commission" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_commission_n_of_rel",
            PHON.ONSET con ] ].

commission_v1 := v_np_trans_le &
 [ STEM < "commission" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_commission_v_1_rel",
            PHON.ONSET con ] ].

commission_v2 := v_obj_equi_le &
 [ STEM < "commission" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_commission_v_1_rel",
            PHON.ONSET con ] ].

commit_v1 := v_to*_trans_le &
 [ STEM < "commit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_commit_v_to_rel",
            PHON.ONSET con ] ].

commitment_n1 := n_ppcomp_le &
 [ STEM < "commitment" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_commitment_n_to_rel" ],
            PHON.ONSET con ] ].

committed_a1 := adj_intrans_le &
 [ STEM < "committed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_committed_a_1_rel",
            PHON.ONSET con ] ].

committee_n1 := n_ppof_le &
 [ STEM < "committee" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_committee_n_of_rel",
            PHON.ONSET con ] ].

commodity_n1 := n_intr_le &
 [ STEM < "commodity" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_commodity_n_1_rel",
            PHON.ONSET con ] ].

common_a1 := adj_intrans_le &
 [ STEM < "common" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_common_a_1_rel",
            PHON.ONSET con ] ].

common_i_n1 := n_bare_nomod_le &
 [ STEM < "common" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_common_n_1_rel",
            PHON.ONSET con ] ].

common_n1 := n_intr_le &
 [ STEM < "common" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_common_n_1_rel",
            PHON.ONSET con ] ].

commoner := adj_comp_le &
 [ STEM < "commoner" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_common_a_1_rel",
            PHON.ONSET con ] ].

commoner_n1 := n_intr_le &
 [ STEM < "commoner" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_commoner_n_1_rel",
            PHON.ONSET con ] ].

commonest_a1 := adj_superl_le &
 [ STEM < "commonest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_common_a_1_rel",
            PHON.ONSET con ] ].

commonly := adv_int_vp_le &
 [ STEM < "commonly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_common_a_1_rel",
            PHON.ONSET con ] ].

commonplace_a1 := adj_intrans_le &
 [ STEM < "commonplace" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_commonplace_a_1_rel",
            PHON.ONSET con ] ].

commonwealth_n1 := n_intr_le &
 [ STEM < "commonwealth" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_commonwealth_n_1_rel",
            PHON.ONSET con ] ].

commotion_n1 := n_mass_count_le &
 [ STEM < "commotion" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_commotion_n_1_rel",
            PHON.ONSET con ] ].

communal_a1 := adj_intrans_le &
 [ STEM < "communal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_communal_a_1_rel",
            PHON.ONSET con ] ].

communally := adv_int_vp_le &
 [ STEM < "communally" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_communal_a_1_rel",
            PHON.ONSET con ] ].

commune_n1 := n_intr_le &
 [ STEM < "commune" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_commune_n_1_rel",
            PHON.ONSET con ] ].

commune_with_v1 := v_empty_prep_intrans_le &
 [ STEM < "commune" >,
   SYNSEM [ LKEYS [ --COMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_commune_v_with_rel" ],
            PHON.ONSET con ] ].

communicate_v1 := v_unerg_le &
 [ STEM < "communicate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_communicate_v_1_rel",
            PHON.ONSET con ] ].

communicate_v2 := v_to*_trans_le &
 [ STEM < "communicate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_communicate_v_to_rel",
            PHON.ONSET con ] ].

communicate_v3 := v_pp_cp_fin_le &
 [ STEM < "communicate" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_communicate_v_to_rel" ],
            PHON.ONSET con ] ].

communicate_with_v1 := v_empty_prep_intrans_le &
 [ STEM < "communicate" >,
   SYNSEM [ LKEYS [ --COMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_communicate_v_with_rel" ],
            PHON.ONSET con ] ].

communication_n1 := n_mass_count_ppof_le &
 [ STEM < "communication" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_communication_n_of_rel",
            PHON.ONSET con ] ].

communicative_a1 := adj_intrans_le &
 [ STEM < "communicative" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_communicative_a_1_rel",
            PHON.ONSET con ] ].

communist_a1 := adj_intrans_le &
 [ STEM < "communist" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_communist_a_1_rel",
            PHON.ONSET con ] ].

communist_international_n1 := n_proper_le &
 [ STEM < "communist", "international" >,
   SYNSEM [ LKEYS.KEYREL.CARG "communist_international",
            PHON.ONSET con ] ].

communist_n1 := n_intr_le &
 [ STEM < "communist" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_communist_n_1_rel",
            PHON.ONSET con ] ].

community_n1 := n_ppof_le &
 [ STEM < "community" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_community_n_of_rel",
            PHON.ONSET con ] ].

commute_v1 := v_np*_trans_le &
 [ STEM < "commute" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_commute_v_1_rel",
            PHON.ONSET con ] ].

commuter_n1 := n_intr_le &
 [ STEM < "commuter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_commuter_n_1_rel",
            PHON.ONSET con ] ].

compact_isect := adj_intrans_le &
 [ STEM < "compact" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_compact_a_1_rel",
            PHON.ONSET con ] ].

companion_n1 := n_intr_le &
 [ STEM < "companion" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_companion_n_1_rel",
            PHON.ONSET con ] ].

company_n1 := n_mass_count_ppof_le &
 [ STEM < "company" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_company_n_of_rel",
            PHON.ONSET con ] ].

compaq_n1 := n_proper_le &
 [ STEM < "compaq" >,
   SYNSEM [ LKEYS.KEYREL.CARG "compaq",
            PHON.ONSET con ] ].

comparable_a1 := adj_intrans_le &
 [ STEM < "comparable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_comparable_a_1_rel",
            PHON.ONSET con ] ].

comparably_a1 := adv_int_vp_post_le &
 [ STEM < "comparably" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_comparable_a_1_rel",
            PHON.ONSET con ] ].

comparably_deg := adv_degree_spec_v_le &
 [ STEM < "comparably" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_comparably_x_deg_rel",
            PHON.ONSET con ] ].

comparative_abb_n1 := n_intr_le &
 [ STEM < "compar." >,
   SYNSEM [ LKEYS.KEYREL.PRED "_comparative_n_1_rel",
            PHON.ONSET con ] ].

comparative_isect := adj_intrans_le &
 [ STEM < "comparative" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_comparative_a_1_rel",
            PHON.ONSET con ] ].

comparatively := adv_int_vp_le &
 [ STEM < "comparatively" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_comparative_a_1_rel",
            PHON.ONSET con ] ].

compare_to_v1 := v_empty_prep_trans_le &
 [ STEM < "compare" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_compare_v_to_rel" ],
            PHON.ONSET con ] ].

compare_v1 := v_np_trans_le &
 [ STEM < "compare" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_compare_v_1_rel",
            PHON.ONSET con ] ].

compare_with_v1 := v_empty_prep_trans_le &
 [ STEM < "compare" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_compare_v_with_rel" ],
            PHON.ONSET con ] ].

compare_with_v2 := v_empty_prep_intrans_le &
 [ STEM < "compare" >,
   SYNSEM [ LKEYS [ --COMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_compare_v_with_rel" ],
            PHON.ONSET con ] ].

comparison_n1 := n_mass_count_le &
 [ STEM < "comparison" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_comparison_n_1_rel",
            PHON.ONSET con ] ].

compartment_n1 := n_intr_le &
 [ STEM < "compartment" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_compartment_n_1_rel",
            PHON.ONSET con ] ].

compass_n1 := n_intr_le &
 [ STEM < "compass" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_compass_n_1_rel",
            PHON.ONSET con ] ].

compassion_n1 := n_mass_ppcomp_le &
 [ STEM < "compassion" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_compassion_n_for_rel" ],
            PHON.ONSET con ] ].

compatible_isect := adj_trans_le &
 [ STEM < "compatible" >,
   SYNSEM [ LKEYS [ --COMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_compatible_a_with_rel" ],
            PHON.ONSET con ] ].

compatibly := adv_int_vp_le &
 [ STEM < "compatibly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_compatible_a_with_rel",
            PHON.ONSET con ] ].

compatriot_n1 := n_intr_le &
 [ STEM < "compatriot" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_compatriot_n_1_rel",
            PHON.ONSET con ] ].

compel_v1 := v_obj_equi_le &
 [ STEM < "compel" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_compel_v_1_rel",
            PHON.ONSET con ] ].

compel_v2 := v_np_trans_le &
 [ STEM < "compel" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_compel_v_1_rel",
            PHON.ONSET con ] ].

compendium_n1 := n_intr_le &
 [ STEM < "compendium" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_compendium_n_1_rel",
            PHON.ONSET con ] ].

compensate_v1 := v_np*_trans_le &
 [ STEM < "compensate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_compensate_v_1_rel",
            PHON.ONSET con ] ].

compensate_v2 := v_empty_prep_intrans_le &
 [ STEM < "compensate" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_compensate_v_for_rel" ],
            PHON.ONSET con ] ].

compensation_n1 := n_mass_count_le &
 [ STEM < "compensation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_compensation_n_1_rel",
            PHON.ONSET con ] ].

compete_v1 := v_unerg_le &
 [ STEM < "compete" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_compete_v_1_rel",
            PHON.ONSET con ] ].

competence_n1 := n_mass_count_le &
 [ STEM < "competence" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_competence_n_1_rel",
            PHON.ONSET con ] ].

competency_n1 := n_mass_count_le &
 [ STEM < "competency" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_competency_n_1_rel",
            PHON.ONSET con ] ].

competent_a1 := adj_intrans_le &
 [ STEM < "competent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_competent_a_1_rel",
            PHON.ONSET con ] ].

competent_a2 := adj_reg_equi_le &
 [ STEM < "competent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_competent_a_1_rel",
            PHON.ONSET con ] ].

competently_adv1 := adv_int_vp_le &
 [ STEM < "competently" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_competent_a_1_rel",
            PHON.ONSET con ] ].

competition_n1 := n_mass_count_le &
 [ STEM < "competition" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_competition_n_1_rel",
            PHON.ONSET con ] ].

competitive_a1 := adj_intrans_le &
 [ STEM < "competitive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_competitive_a_1_rel",
            PHON.ONSET con ] ].

competitor_n1 := n_intr_le &
 [ STEM < "competitor" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_competitor_n_1_rel",
            PHON.ONSET con ] ].

compilation_n := n_ppof_le &
 [ STEM < "compilation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_compilation_n_of_rel",
            PHON.ONSET con ] ].

compile_v1 := v_np*_trans_le &
 [ STEM < "compile" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_compile_v_1_rel",
            PHON.ONSET con ] ].

complain_v1 := v_unerg_le &
 [ STEM < "complain" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_complain_v_1_rel",
            PHON.ONSET con ] ].

complain_v2 := v_cp_non_trans_le &
 [ STEM < "complain" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_complain_v_1_rel",
            PHON.ONSET con ] ].

complain_v3 := v_double_pp*_le &
 [ STEM < "complain" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_rel,
                    --OCOMPKEY _about_p_rel,
                    KEYREL.PRED "_complain_v_about_rel" ],
            PHON.ONSET con ] ].

complain_v4 := v_empty_prep_intrans_le &
 [ STEM < "complain" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_complain_v_of_rel" ],
            PHON.ONSET con ] ].

complaint_n1 := n_mass_count_le &
 [ STEM < "complaint" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_complaint_n_1_rel",
            PHON.ONSET con ] ].

complement_n1 := n_intr_le &
 [ STEM < "complement" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_complement_n_1_rel",
            PHON.ONSET con ] ].

complement_v1 := v_np*_trans_le &
 [ STEM < "complement" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_complement_v_1_rel",
            PHON.ONSET con ] ].

complete_a1 := adj_intrans_le &
 [ STEM < "complete" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_complete_a_1_rel",
            PHON.ONSET con ] ].

complete_v1 := v_np_trans_le &
 [ STEM < "complete" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_complete_v_2_rel",
            PHON.ONSET con ] ].

complete_v2 := v_unacc_le &
 [ STEM < "complete" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_complete_v_1_rel",
            PHON.ONSET con ] ].

completely := adv_int_vp_le &
 [ STEM < "completely" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_complete_a_1_rel",
            PHON.ONSET con ] ].

completion_n1 := n_mass_count_ppof_le &
 [ STEM < "completion" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_completion_n_of_rel",
            PHON.ONSET con ] ].

complex_a1 := adj_intrans_le &
 [ STEM < "complex" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_complex_a_1_rel",
            PHON.ONSET con ] ].

complex_n1 := n_ppof_le &
 [ STEM < "complex" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_complex_n_of_rel",
            PHON.ONSET con ] ].

complexion_n1 := n_mass_count_le &
 [ STEM < "complexion" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_complexion_n_1_rel",
            PHON.ONSET con ] ].

complexity_n1 := n_mass_count_le &
 [ STEM < "complexity" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_complexity_n_1_rel",
            PHON.ONSET con ] ].

compliance_n1 := n_mass_le &
 [ STEM < "compliance" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_compliance_n_1_rel",
            PHON.ONSET con ] ].

complicate_v1 := v_np_trans_le &
 [ STEM < "complicate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_complicate_v_1_rel",
            PHON.ONSET con ] ].

complicated_a1 := adj_trans_le &
 [ STEM < "complicated" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_complicated_a_for_rel" ],
            PHON.ONSET con ] ].

complicated_a2 := adj_reg_atrans_le &
 [ STEM < "complicated" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_complicated_a_for_rel",
            PHON.ONSET con ] ].

complication_n1 := n_intr_le &
 [ STEM < "complication" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_complication_n_1_rel",
            PHON.ONSET con ] ].

compliment_n1 := n_intr_le &
 [ STEM < "compliment" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_compliment_n_1_rel",
            PHON.ONSET con ] ].

compliment_v1 := v_empty_prep*_trans_le &
 [ STEM < "compliment" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_compliment_v_on_rel" ],
            PHON.ONSET con ] ].

comply_v1 := v_unerg_le &
 [ STEM < "comply" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_comply_v_with_rel",
            PHON.ONSET con ] ].

comply_with_v1 := v_empty_prep_intrans_le &
 [ STEM < "comply" >,
   SYNSEM [ LKEYS [ --COMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_comply_v_with_rel" ],
            PHON.ONSET con ] ].

component_n1 := n_intr_le &
 [ STEM < "component" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_component_n_1_rel",
            PHON.ONSET con ] ].

compose_v1 := v_obj_equi_le &
 [ STEM < "compose" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_compose_v_1_rel",
            PHON.ONSET con ] ].

compose_v2 := v_np*_trans_le &
 [ STEM < "compose" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_compose_v_1_rel",
            PHON.ONSET con ] ].

composed_a1 := adj_trans_oblig_le &
 [ STEM < "composed" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_composed_a_of_rel" ],
            PHON.ONSET con ] ].

composer_n1 := n_ppof_le &
 [ STEM < "composer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_composer_n_of_rel",
            PHON.ONSET con ] ].

composer_title := n_title_le &
 [ STEM < "composer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_composer_n_of_rel",
            PHON.ONSET con ] ].

composite_a1 := adj_intrans_le &
 [ STEM < "composite" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_composite_a_1_rel",
            PHON.ONSET con ] ].

composite_n1 := n_intr_le &
 [ STEM < "composite" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_composite_n_1_rel",
            PHON.ONSET con ] ].

composition_n1 := n_mass_count_le &
 [ STEM < "composition" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_composition_n_1_rel",
            PHON.ONSET con ] ].

compositor_n1 := n_intr_le &
 [ STEM < "compositor" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_compositor_n_1_rel",
            PHON.ONSET con ] ].

compound_n1 := n_intr_le &
 [ STEM < "compound" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_compound_n_1_rel",
            PHON.ONSET con ] ].

compound_v1 := v_np*_trans_le &
 [ STEM < "compound" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_compound_v_1_rel",
            PHON.ONSET con ] ].

comprehend_v1 := v_np*_trans_le &
 [ STEM < "comprehend" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_comprehend_v_1_rel",
            PHON.ONSET con ] ].

comprehend_v2 := v_cp_non_trans_le &
 [ STEM < "comprehend" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_comprehend_v_1_rel",
            PHON.ONSET con ] ].

comprehend_v3 := v_obj_equi_le &
 [ STEM < "comprehend" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_comprehend_v_1_rel",
            PHON.ONSET con ] ].

comprehension_n1 := n_mass_le &
 [ STEM < "comprehension" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_comprehension_n_1_rel",
            PHON.ONSET con ] ].

comprehensive_a1 := adj_intrans_le &
 [ STEM < "comprehensive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_comprehensive_a_1_rel",
            PHON.ONSET con ] ].

compress_n1 := n_intr_le &
 [ STEM < "compress" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_compress_n_1_rel",
            PHON.ONSET con ] ].

compress_v1 := v_np_trans_le &
 [ STEM < "compress" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_compress_v_1_rel",
            PHON.ONSET con ] ].

compressible_a1 := adj_intrans_le &
 [ STEM < "compressible" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_compressible_a_1_rel",
            PHON.ONSET con ] ].

compression_n1 := n_mass_count_ppof_le &
 [ STEM < "compression" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_compression_n_of_rel",
            PHON.ONSET con ] ].

comprise_v1 := v_np_trans_le &
 [ STEM < "comprise" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_comprise_v_1_rel",
            PHON.ONSET con ] ].

compromise_n1 := n_intr_le &
 [ STEM < "compromise" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_compromise_n_1_rel",
            PHON.ONSET con ] ].

compromise_v1 := v_np_trans_le &
 [ STEM < "compromise" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_compromise_v_1_rel",
            PHON.ONSET con ] ].

compsci_n1 := n_proper_le &
 [ STEM < "compsci" >,
   SYNSEM [ LKEYS.KEYREL.CARG "compsci",
            PHON.ONSET con ] ].

compulsory_a1 := adj_intrans_le &
 [ STEM < "compulsory" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_compulsory_a_1_rel",
            PHON.ONSET con ] ].

compusa_n1 := n_proper_le &
 [ STEM < "compusa" >,
   SYNSEM [ LKEYS.KEYREL.CARG "compusa",
            PHON.ONSET con ] ].

computation_n1 := n_mass_count_le &
 [ STEM < "computation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_computation_n_1_rel",
            PHON.ONSET con ] ].

compute_v1 := v_np_trans_le &
 [ STEM < "compute" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_compute_v_1_rel",
            PHON.ONSET con ] ].

computer_n1 := n_intr_le &
 [ STEM < "computer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_computer_n_1_rel",
            PHON.ONSET con ] ].

computer_science_n1 := n_mass_le &
 [ STEM < "computer", "science" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_computer+science_n_1_rel",
            PHON.ONSET con ] ].

comrade_n1 := n_intr_le &
 [ STEM < "comrade" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_comrade_n_1_rel",
            PHON.ONSET con ] ].

comrade_ttl := n_title_le &
 [ STEM < "comrade" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_comrade_n_1_rel",
            PHON.ONSET con ] ].

concave_a1 := adj_intrans_le &
 [ STEM < "concave" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_concave_a_1_rel",
            PHON.ONSET con ] ].

concave_n1 := n_intr_le &
 [ STEM < "concave" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_concave_n_1_rel",
            PHON.ONSET con ] ].

conceal_v1 := v_empty_prep*_trans_le &
 [ STEM < "conceal" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _from_p_sel_rel,
                    KEYREL.PRED "_conceal_v_from_rel" ],
            PHON.ONSET con ] ].

concealment_n1 := n_mass_count_le &
 [ STEM < "concealment" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_concealment_n_1_rel",
            PHON.ONSET con ] ].

concede_v1 := v_np*_trans_le &
 [ STEM < "concede" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_concede_v_1_rel",
            PHON.ONSET con ] ].

concede_v2 := v_cp_non_trans_le &
 [ STEM < "concede" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_concede_v_1_rel",
            PHON.ONSET con ] ].

conceit_n1 := n_mass_count_le &
 [ STEM < "conceit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_conceit_n_1_rel",
            PHON.ONSET con ] ].

conceivable_a1 := adj_intrans_le &
 [ STEM < "conceivable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_conceivable_a_1_rel",
            PHON.ONSET con ] ].

conceivably_a1 := adv_int_vp_le &
 [ STEM < "conceivably" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_conceivable_a_1_rel",
            PHON.ONSET con ] ].

conceive_of_v1 := v_empty_prep_intrans_le &
 [ STEM < "conceive" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_conceive_v_of_rel" ],
            PHON.ONSET con ] ].

conceive_v1 := v_np*_trans_le &
 [ STEM < "conceive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_conceive_v_1_rel",
            PHON.ONSET con ] ].

conceive_v2 := v_cp_non_trans_le &
 [ STEM < "conceive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_conceive_v_1_rel",
            PHON.ONSET con ] ].

conceive_v3 := v_obj_equi_le &
 [ STEM < "conceive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_conceive_v_1_rel",
            PHON.ONSET con ] ].

concentrate_n1 := n_mass_count_le &
 [ STEM < "concentrate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_concentrate_n_1_rel",
            PHON.ONSET con ] ].

concentrate_v1 := v_empty_prep_intrans_le &
 [ STEM < "concentrate" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_concentrate_v_on_rel" ],
            PHON.ONSET con ] ].

concentrate_v2 := v_unerg_le &
 [ STEM < "concentrate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_concentrate_v_1_rel",
            PHON.ONSET con ] ].

concentrate_v3 := v_empty_prep*_trans_le &
 [ STEM < "concentrate" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_concentrate_v_on_rel" ],
            PHON.ONSET con ] ].

concentrated_isect := adj_intrans_le &
 [ STEM < "concentrated" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_concentrated_a_1_rel",
            PHON.ONSET con ] ].

concentration_n1 := n_mass_count_ppof_le &
 [ STEM < "concentration" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_concentration_n_of_rel",
            PHON.ONSET con ] ].

concept_n1 := n_intr_le &
 [ STEM < "concept" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_concept_n_1_rel",
            PHON.ONSET con ] ].

conceptacle_n1 := n_intr_le &
 [ STEM < "conceptacle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_conceptacle_n_1_rel",
            PHON.ONSET con ] ].

conception_n1 := n_ppof_le &
 [ STEM < "conception" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_conception_n_of_rel",
            PHON.ONSET con ] ].

conceptual_a1 := adj_intrans_le &
 [ STEM < "conceptual" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_conceptual_a_1_rel",
            PHON.ONSET con ] ].

conceptually_isect := adv_int_vp_le &
 [ STEM < "conceptually" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_conceptual_a_1_rel",
            PHON.ONSET con ] ].

concern_n1 := n_mass_count_le &
 [ STEM < "concern" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_concern_n_1_rel",
            PHON.ONSET con ] ].

concern_v1 := v_np_trans_le &
 [ STEM < "concern" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_concern_v_1_rel",
            PHON.ONSET con ] ].

concern_v2 := v_empty_prep_trans_le &
 [ STEM < "concern" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_concern_v_with_rel" ],
            PHON.ONSET con ] ].

concern_v3 := v_expl_it_subj_np_cp_le &
 [ STEM < "concern" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_concern_v_about_rel",
            PHON.ONSET con ] ].

concerned_a1 := adj_trans_le &
 [ STEM < "concerned" >,
   SYNSEM [ LKEYS [ --COMPKEY _about_p_sel_rel,
                    KEYREL.PRED "_concerned_a_about_rel" ],
            PHON.ONSET con ] ].

concerned_a2 := adj_reg_that_cp_le &
 [ STEM < "concerned" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_concerned_a_about_rel",
            PHON.ONSET con ] ].

concerned_a3 := adj_trans_oblig_le &
 [ STEM < "concerned" >,
   SYNSEM [ LKEYS [ --COMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_concerned_a_with_rel" ],
            PHON.ONSET con ] ].

concerning_p := p_le &
 [ STEM < "concerning" >,
   SYNSEM [ LKEYS.KEYREL.PRED _concerning_p_rel,
            PHON.ONSET con ] ].

concert-goer_n1 := n_intr_le &
 [ STEM < "concert", "goer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_concertgoer_n_1_rel",
            PHON.ONSET con ] ].

concert-goer_n2 := n_intr_le &
 [ STEM < "concertgoer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_concertgoer_n_1_rel",
            PHON.ONSET con ] ].

concert_n1 := n_intr_le &
 [ STEM < "concert" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_concert_n_1_rel",
            PHON.ONSET con ] ].

concession_n1 := n_intr_le &
 [ STEM < "concession" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_concession_n_1_rel",
            PHON.ONSET con ] ].

concessionaire_n1 := n_intr_le &
 [ STEM < "concessionaire" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_concessionaire_n_1_rel",
            PHON.ONSET con ] ].

concierge_n1 := n_intr_le &
 [ STEM < "concierge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_concierge_n_1_rel",
            PHON.ONSET con ] ].

concise_a1 := adj_intrans_le &
 [ STEM < "concise" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_concise_a_1_rel",
            PHON.ONSET con ] ].

conclude_v1 := v_pp_cp_fin_le &
 [ STEM < "conclude" >,
   SYNSEM [ LKEYS [ --COMPKEY _from_p_sel_rel,
                    KEYREL.PRED "_conclude_v_1_rel" ],
            PHON.ONSET con ] ].

conclude_v2 := v_np*_trans_le &
 [ STEM < "conclude" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_conclude_v_1_rel",
            PHON.ONSET con ] ].

conclusion_n1 := n_ppof_nosort_le &
 [ STEM < "conclusion" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_conclusion_n_of_rel",
            PHON.ONSET con ] ].

conclusive_a1 := adj_intrans_le &
 [ STEM < "conclusive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_conclusive_a_1_rel",
            PHON.ONSET con ] ].

concomitant_a1 := adj_intrans_le &
 [ STEM < "concomitant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_concomitant_a_1_rel",
            PHON.ONSET con ] ].

concorde_n1 := n_proper_le &
 [ STEM < "concorde" >,
   SYNSEM [ LKEYS.KEYREL.CARG "concorde",
            PHON.ONSET con ] ].

concrete_a1 := adj_intrans_le &
 [ STEM < "concrete" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_concrete_a_1_rel",
            PHON.ONSET con ] ].

concretely_isect := adv_int_vp_le &
 [ STEM < "concretely" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_concrete_a_1_rel",
            PHON.ONSET con ] ].

concretion_n1 := n_mass_count_le &
 [ STEM < "concretion" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_concretion_n_1_rel",
            PHON.ONSET con ] ].

concurrently_adv1 := adv_int_vp_le &
 [ STEM < "concurrently" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_concurrent_a_1_rel",
            PHON.ONSET con ] ].

condemn_v1 := v_to*_trans_le &
 [ STEM < "condemn" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_condemn_v_to_rel",
            PHON.ONSET con ] ].

condemn_v2 := v_np_as_le &
 [ STEM < "condemn" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_condemn_v_as_rel",
            PHON.ONSET con ] ].

condense_v1 := v_np_trans_le &
 [ STEM < "condense" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_condense_v_cause_rel",
            PHON.ONSET con ] ].

condense_v2 := v_unacc_le &
 [ STEM < "condense" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_condense_v_1_rel",
            PHON.ONSET con ] ].

condenser_n1 := n_ppof_le &
 [ STEM < "condenser" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_condenser_n_of_rel",
            PHON.ONSET con ] ].

condition_n1 := n_mass_count_le &
 [ STEM < "condition" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_condition_n_1_rel",
            PHON.ONSET con ] ].

condition_on_v1 := v_empty_prep_trans_le &
 [ STEM < "condition" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_condition_v_on_rel" ],
            PHON.ONSET con ] ].

condition_v1 := v_np_trans_le &
 [ STEM < "condition" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_condition_v_1_rel",
            PHON.ONSET con ] ].

condition_v2 := v_obj_equi_le &
 [ STEM < "condition" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_condition_v_1_rel",
            PHON.ONSET con ] ].

conditional_a1 := adj_intrans_le &
 [ STEM < "conditional" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_conditional_a_1_rel",
            PHON.ONSET con ] ].

conditioner_n1 := n_mass_count_le &
 [ STEM < "conditioner" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_conditioner_n_1_rel",
            PHON.ONSET con ] ].

condo_n1 := n_intr_le &
 [ STEM < "condo" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_condo_n_1_rel",
            PHON.ONSET con ] ].

condor_n1 := n_proper_le &
 [ STEM < "condor" >,
   SYNSEM [ LKEYS.KEYREL.CARG "condor",
            PHON.ONSET con ] ].

conduce_v1 := v_unerg_le &
 [ STEM < "conduce" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_conduce_v_1_rel",
            PHON.ONSET con ] ].

conducive_a1 := adj_trans_le &
 [ STEM < "conducive" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_conducive_a_to_rel" ],
            PHON.ONSET con ] ].

conduct_n1 := n_mass_count_le &
 [ STEM < "conduct" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_conduct_n_1_rel",
            PHON.ONSET con ] ].

conduct_v1 := v_np*_trans_le &
 [ STEM < "conduct" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_conduct_v_1_rel",
            PHON.ONSET con ] ].

conductor_n1 := n_ppof_le &
 [ STEM < "conductor" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_conductor_n_of_rel",
            PHON.ONSET con ] ].

cone_n1 := n_ppof_le &
 [ STEM < "cone" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cone_n_of_rel",
            PHON.ONSET con ] ].

confederacy_n1 := n_mass_count_le &
 [ STEM < "confederacy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_confederacy_n_1_rel",
            PHON.ONSET con ] ].

confederate_a1 := adj_intrans_le &
 [ STEM < "confederate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_confederate_a_1_rel",
            PHON.ONSET con ] ].

confederate_n1 := n_intr_le &
 [ STEM < "confederate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_confederate_n_1_rel",
            PHON.ONSET con ] ].

confer_v1 := v_unerg_le &
 [ STEM < "confer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_confer_v_1_rel",
            PHON.ONSET con ] ].

confer_v2 := v_empty_prep*_trans_le &
 [ STEM < "confer" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_confer_v_on_rel" ],
            PHON.ONSET con ] ].

conference_n1 := n_ppof_le &
 [ STEM < "conference" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_conference_n_of_rel",
            PHON.ONSET con ] ].

confess_v1 := v_to*_trans_le &
 [ STEM < "confess" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_confess_v_to_rel",
            PHON.ONSET con ] ].

confess_v2 := v_pp_cp_fin_le &
 [ STEM < "confess" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_confess_v_1_rel" ],
            PHON.ONSET con ] ].

confess_v3 := v_empty_prep_intrans_le &
 [ STEM < "confess" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_confess_v_to_rel" ],
            PHON.ONSET con ] ].

confide_v1 := v_to*_trans_le &
 [ STEM < "confide" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_confide_v_to_rel",
            PHON.ONSET con ] ].

confide_v2 := v_pp_cp_fin_le &
 [ STEM < "confide" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_confide_v_to_rel" ],
            PHON.ONSET con ] ].

confide_v3 := v_empty_prep_intrans_le &
 [ STEM < "confide" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_confide_v_to_rel" ],
            PHON.ONSET con ] ].

confide_v4 := v_empty_prep_intrans_le &
 [ STEM < "confide" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_confide_v_in_rel" ],
            PHON.ONSET con ] ].

confidence_n1 := n_mass_count_le &
 [ STEM < "confidence" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_confidence_n_1_rel",
            PHON.ONSET con ] ].

confident_a1 := adj_trans_le &
 [ STEM < "confident" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_confident_a_of-about_rel" ],
            PHON.ONSET con ] ].

confident_a2 := adj_trans_oblig_le &
 [ STEM < "confident" >,
   SYNSEM [ LKEYS [ --COMPKEY _about_p_sel_rel,
                    KEYREL.PRED "_confident_a_of-about_rel" ],
            PHON.ONSET con ] ].

confidential_a1 := adj_intrans_le &
 [ STEM < "confidential" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_confidential_a_1_rel",
            PHON.ONSET con ] ].

confidentiality_n1 := n_mass_le &
 [ STEM < "confidentiality" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_confidentiality_n_1_rel",
            PHON.ONSET con ] ].

configuration_n1 := n_mass_count_ppof_le &
 [ STEM < "configuration" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_configuration_n_of_rel",
            PHON.ONSET con ] ].

configure_v1 := v_np_trans_le &
 [ STEM < "configure" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_configure_v_1_rel",
            PHON.ONSET con ] ].

confine_v1 := v_to*_trans_le &
 [ STEM < "confine" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_confine_v_to_rel",
            PHON.ONSET con ] ].

confined_a1 := adj_intrans_le &
 [ STEM < "confined" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_confined_a_1_rel",
            PHON.ONSET con ] ].

confinement_n1 := n_mass_count_le &
 [ STEM < "confinement" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_confinement_n_1_rel",
            PHON.ONSET con ] ].

confines_n1 := n_plur_nocmpnd_le &
 [ STEM < "confines" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_confines_n_1_rel",
            PHON.ONSET con ] ].

confirm_v1 := v_np*_trans_le &
 [ STEM < "confirm" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_confirm_v_1_rel",
            PHON.ONSET con ] ].

confirm_v2 := v_pp_cp_fin_le &
 [ STEM < "confirm" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_confirm_v_1_rel" ],
            PHON.ONSET con ] ].

confirm_v3 := v_np_as_le &
 [ STEM < "confirm" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_confirm_v_as_rel",
            PHON.ONSET con ] ].

confirmation_n1 := n_mass_count_ppof_le &
 [ STEM < "confirmation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_confirmation_n_of_rel",
            PHON.ONSET con ] ].

confirmation_n3x := n_mass_count_cpcomp_fin_le &
 [ STEM < "confirmation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_confirmation_n_of_rel",
            PHON.ONSET con ] ].

confirmed_a1 := adj_intrans_le &
 [ STEM < "confirmed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_confirmed_a_1_rel",
            PHON.ONSET con ] ].

confiscate_v1 := v_np_trans_le &
 [ STEM < "confiscate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_confiscate_v_1_rel",
            PHON.ONSET con ] ].

conflict_n1 := n_intr_le &
 [ STEM < "conflict" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_conflict_n_1_rel",
            PHON.ONSET con ] ].

conflict_v1 := v_double_pp*_le &
 [ STEM < "conflict" >,
   SYNSEM [ LKEYS [ --COMPKEY _with_p_rel,
                    --OCOMPKEY _about_p_rel,
                    KEYREL.PRED "_conflict_v_1_rel" ],
            PHON.ONSET con ] ].

conflict_v2 := v_empty_prep_intrans_le &
 [ STEM < "conflict" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_conflict_v_on_rel" ],
            PHON.ONSET con ] ].

conflicting_isect := adj_intrans_le &
 [ STEM < "conflicting" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_conflicting_a_1_rel",
            PHON.ONSET con ] ].

confluence_n1 := n_intr_le &
 [ STEM < "confluence" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_confluence_n_1_rel",
            PHON.ONSET con ] ].

conform_v1 := v_empty_prep_intrans_le &
 [ STEM < "conform" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_conform_v_to_rel" ],
            PHON.ONSET con ] ].

conform_v2 := v_unerg_le &
 [ STEM < "conform" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_conform_v_1_rel",
            PHON.ONSET con ] ].

conform_v3 := v_empty_prep_intrans_le &
 [ STEM < "conform" >,
   SYNSEM [ LKEYS [ --COMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_conform_v_with_rel" ],
            PHON.ONSET con ] ].

conformable_a1 := adj_intrans_le &
 [ STEM < "conformable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_conformable_a_1_rel",
            PHON.ONSET con ] ].

conformity_n1 := n_mass_le &
 [ STEM < "conformity" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_conformity_n_1_rel",
            PHON.ONSET con ] ].

confound_v1 := v_np_trans_le &
 [ STEM < "confound" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_confound_v_1_rel",
            PHON.ONSET con ] ].

confront_v1 := v_np*_trans_le &
 [ STEM < "confront" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_confront_v_1_rel",
            PHON.ONSET con ] ].

confucianism_n1 := n_mass_le &
 [ STEM < "confucianism" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_confucianism_n_1_rel",
            PHON.ONSET con ] ].

confuse_v1 := v_np*_trans_le &
 [ STEM < "confuse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_confuse_v_1_rel",
            PHON.ONSET con ] ].

confuse_v2 := v_empty_prep_trans_le &
 [ STEM < "confuse" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_confuse_v_with_rel" ],
            PHON.ONSET con ] ].

confuse_v3 := v_expl_it_subj_np_cp_le &
 [ STEM < "confuse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_confuse_v_1_rel",
            PHON.ONSET con ] ].

confused_a2 := adj_trans_oblig_le &
 [ STEM < "confused" >,
   SYNSEM [ LKEYS [ --COMPKEY _about_p_sel_rel,
                    KEYREL.PRED "_confused_a_about_rel" ],
            PHON.ONSET con ] ].

confused_isect := adj_intrans_le &
 [ STEM < "confused" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_confused_a_about_rel",
            PHON.ONSET con ] ].

confusing_isect := adj_intrans_le &
 [ STEM < "confusing" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_confusing_a_1_rel",
            PHON.ONSET con ] ].

confusion_n1 := n_mass_count_le &
 [ STEM < "confusion" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_confusion_n_1_rel",
            PHON.ONSET con ] ].

congeal_v1 := v_unacc_le &
 [ STEM < "congeal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_congeal_v_1_rel",
            PHON.ONSET con ] ].

congenial_a1 := adj_intrans_le &
 [ STEM < "congenial" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_congenial_a_1_rel",
            PHON.ONSET con ] ].

congenital_a1 := adj_intrans_le &
 [ STEM < "congenital" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_congenital_a_1_rel",
            PHON.ONSET con ] ].

congo_n1 := n_proper_le &
 [ STEM < "congo" >,
   SYNSEM [ LKEYS.KEYREL.CARG "congo",
            PHON.ONSET con ] ].

congratulate_v1 := v_empty_prep*_trans_le &
 [ STEM < "congratulate" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_congratulate_v_on_rel" ],
            PHON.ONSET con ] ].

congratulate_v2 := v_empty_prep_trans_le &
 [ STEM < "congratulate" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_congratulate_v_for_rel" ],
            PHON.ONSET con ] ].

congratulations_n1 := n_plur_le &
 [ STEM < "congratulation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_congratulations_n_1_rel",
            PHON.ONSET con ] ].

congress_n1 := n_intr_le &
 [ STEM < "congress" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_congress_n_1_rel",
            PHON.ONSET con ] ].

congress_n2 := n_proper_le &
 [ STEM < "congress" >,
   SYNSEM [ LKEYS.KEYREL.CARG "congress",
            PHON.ONSET con ] ].

congress_post_ttl := n_post_title_le &
 [ STEM < "congress" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_congress_n_1_rel",
            PHON.ONSET con ] ].

congruent_a1 := adj_intrans_le &
 [ STEM < "congruent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_congruent_a_1_rel",
            PHON.ONSET con ] ].

congruous_a1 := adj_trans_le &
 [ STEM < "congruous" >,
   SYNSEM [ LKEYS [ --COMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_congruous_a_with_rel" ],
            PHON.ONSET con ] ].

conjoin_v1 := v_np_trans_le &
 [ STEM < "conjoin" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_conjoin_v_1_rel",
            PHON.ONSET con ] ].

conjunction_n1 := n_mass_count_le &
 [ STEM < "conjunction" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_conjunction_n_1_rel",
            PHON.ONSET con ] ].

conjure_up_v1 := v_particle_np_le &
 [ STEM < "conjure" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_conjure_v_up_rel" ],
            PHON.ONSET con ] ].

conjure_v1 := v_np_trans_le &
 [ STEM < "conjure" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_conjure_v_1_rel",
            PHON.ONSET con ] ].

connect_v1 := v_to*_trans_le &
 [ STEM < "connect" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_connect_v_to_rel",
            PHON.ONSET con ] ].

connect_v2 := v_unacc_le &
 [ STEM < "connect" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_connect_v_1_rel",
            PHON.ONSET con ] ].

connect_v3 := v_empty_prep_trans_le &
 [ STEM < "connect" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_connect_v_with_rel" ],
            PHON.ONSET con ] ].

connected_a1 := adj_intrans_le &
 [ STEM < "connected" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_connected_a_1_rel",
            PHON.ONSET con ] ].

connecticut_n1 := n_proper_le &
 [ STEM < "connecticut" >,
   SYNSEM [ LKEYS.KEYREL.CARG "connecticut",
            PHON.ONSET con ] ].

connecticut_n2 := n_proper_abb_le &
 [ STEM < "cn" >,
   SYNSEM [ LKEYS.KEYREL.CARG "connecticut",
            PHON.ONSET con ] ].

connection_n1 := n_ppof_le &
 [ STEM < "connection" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_connection_n_of_rel",
            PHON.ONSET con ] ].

connective_a1 := adj_intrans_le &
 [ STEM < "connective" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_connective_a_1_rel",
            PHON.ONSET con ] ].

connective_n1 := n_intr_le &
 [ STEM < "connective" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_connective_n_1_rel",
            PHON.ONSET con ] ].

connectivity_n1 := n_mass_le &
 [ STEM < "connectivity" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_connectivity_n_1_rel",
            PHON.ONSET con ] ].

conquer_v1 := v_np*_trans_le &
 [ STEM < "conquer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_conquer_v_1_rel",
            PHON.ONSET con ] ].

conquest_n1 := n_mass_count_le &
 [ STEM < "conquest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_conquest_n_1_rel",
            PHON.ONSET con ] ].

consanguinity_n1 := n_mass_le &
 [ STEM < "consanguinity" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_consanguinity_n_1_rel",
            PHON.ONSET con ] ].

conscience_n1 := n_mass_count_le &
 [ STEM < "conscience" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_conscience_n_1_rel",
            PHON.ONSET con ] ].

conscious_a1 := adj_intrans_le &
 [ STEM < "conscious" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_conscious_a_1_rel",
            PHON.ONSET con ] ].

consciously_adv1 := adv_int_vp_le &
 [ STEM < "consciously" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_conscious_a_1_rel",
            PHON.ONSET con ] ].

consciousness_n1 := n_mass_le &
 [ STEM < "consciousness" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_consciousness_n_1_rel",
            PHON.ONSET con ] ].

consecrate_v1 := v_np_trans_le &
 [ STEM < "consecrate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_consecrate_v_1_rel",
            PHON.ONSET con ] ].

consecution_n1 := n_intr_le &
 [ STEM < "consecution" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_consecution_n_1_rel",
            PHON.ONSET con ] ].

consecutive_a1 := adj_intrans_le &
 [ STEM < "consecutive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_consecutive_a_1_rel",
            PHON.ONSET con ] ].

consecutively_isect := adv_int_vp_le &
 [ STEM < "consecutively" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_consecutive_a_1_rel",
            PHON.ONSET con ] ].

consent_n1 := n_mass_le &
 [ STEM < "consent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_consent_n_1_rel",
            PHON.ONSET con ] ].

consent_v1 := v_empty_prep_intrans_le &
 [ STEM < "consent" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_consent_v_to_rel" ],
            PHON.ONSET con ] ].

consent_v2 := v_unerg_le &
 [ STEM < "consent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_consent_v_to_rel",
            PHON.ONSET con ] ].

consent_v3 := v_subj_equi_le &
 [ STEM < "consent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_consent_v_1_rel",
            PHON.ONSET con ] ].

consequence_n1 := n_mass_count_le &
 [ STEM < "consequence" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_consequence_n_1_rel",
            PHON.ONSET con ] ].

consequently_adv1 := adv_int_vp_pre_le &
 [ STEM < "consequently" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_consequent_a_1_rel",
            PHON.ONSET con ] ].

consequently_adv2 := adv_s_pre_word_nospec_le &
 [ STEM < "consequently" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_consequently_a_1_rel",
            PHON.ONSET con ] ].

consequently_adv3 := adv_s_post_word_nospec_le &
 [ STEM < "consequently" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_consequently_a_1_rel",
            PHON.ONSET con ] ].

conservation_n1 := n_mass_count_ppof_le &
 [ STEM < "conservation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_conservation_n_of_rel",
            PHON.ONSET con ] ].

conservative_a1 := adj_intrans_le &
 [ STEM < "conservative" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_conservative_a_1_rel",
            PHON.ONSET con ] ].

conservative_n1 := n_intr_le &
 [ STEM < "conservative" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_conservative_n_1_rel",
            PHON.ONSET con ] ].

conserve_v1 := v_np_trans_le &
 [ STEM < "conserve" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_conserve_v_1_rel",
            PHON.ONSET con ] ].

conserve_v2 := v_np_as_le &
 [ STEM < "conserve" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_conserve_v_as_rel",
            PHON.ONSET con ] ].

consider_v1 := v_obj_equi_le &
 [ STEM < "consider" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_consider_v_1_rel",
            PHON.ONSET con ] ].

consider_v2 := v_obj_equi_prd_le &
 [ STEM < "consider" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_consider_v_1_rel",
            PHON.ONSET con ] ].

consider_v3 := v_ditrans_only_le &
 [ STEM < "consider" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_consider_v_1_rel",
            PHON.ONSET con ] ].

consider_v4 := v_np_as_le &
 [ STEM < "consider" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_consider_v_as_rel",
            PHON.ONSET con ] ].

consider_v5 := v_np*_trans_le &
 [ STEM < "consider" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_consider_v_1_rel",
            PHON.ONSET con ] ].

consider_v6 := v_subj_equi_prp_le &
 [ STEM < "consider" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_consider_v_1_rel",
            PHON.ONSET con ] ].

considerable_isect := adj_intrans_le &
 [ STEM < "considerable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_considerable_a_1_rel",
            PHON.ONSET con ] ].

considerably := adv_int_vp_le &
 [ STEM < "considerably" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_considerable_a_1_rel",
            PHON.ONSET con ] ].

considerate_a1 := adj_trans_le &
 [ STEM < "considerate" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_considerate_a_of_rel" ],
            PHON.ONSET con ] ].

consideration_n1 := n_mass_count_ppof_le &
 [ STEM < "consideration" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_consideration_n_of_rel",
            PHON.ONSET con ] ].

consign_v1 := v_to*_trans_le &
 [ STEM < "consign" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_consign_v_to_rel",
            PHON.ONSET con ] ].

consignment_n1 := n_mass_count_ppof_le &
 [ STEM < "consignment" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_consignment_n_of_rel",
            PHON.ONSET con ] ].

consist_in_v1 := v_empty_prep_intrans_le &
 [ STEM < "consist" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_consist_v_in_rel" ],
            PHON.ONSET con ] ].

consist_of_v1 := v_empty_prep_intrans_le &
 [ STEM < "consist" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_consist_v_of_rel" ],
            PHON.ONSET con ] ].

consistence_n1 := n_mass_le &
 [ STEM < "consistence" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_consistence_n_1_rel",
            PHON.ONSET con ] ].

consistency_n1 := n_mass_count_le &
 [ STEM < "consistency" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_consistency_n_1_rel",
            PHON.ONSET con ] ].

consistent_isect := adj_intrans_le &
 [ STEM < "consistent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_consistent_a_1_rel",
            PHON.ONSET con ] ].

consistently_isect := adv_int_vp_le &
 [ STEM < "consistently" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_consistent_a_1_rel",
            PHON.ONSET con ] ].

consolation_n1 := n_intr_nosort_le &
 [ STEM < "consolation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_consolation_n_1_rel",
            PHON.ONSET con ] ].

console_n1 := n_intr_le &
 [ STEM < "console" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_console_n_1_rel",
            PHON.ONSET con ] ].

console_v1 := v_np_trans_le &
 [ STEM < "console" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_console_v_1_rel",
            PHON.ONSET con ] ].

console_v2 := v_expl_it_subj_np_cp_le &
 [ STEM < "console" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_console_v_1_rel",
            PHON.ONSET con ] ].

console_v3 := v_np_trans_cp_le &
 [ STEM < "console" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_console_v_1_rel",
            PHON.ONSET con ] ].

consolidate_v1 := v_np_trans_le &
 [ STEM < "consolidate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_consolidate_v_1_rel",
            PHON.ONSET con ] ].

consonant_a1 := adj_intrans_le &
 [ STEM < "consonant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_consonant_a_1_rel",
            PHON.ONSET con ] ].

consonant_n1 := n_intr_le &
 [ STEM < "consonant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_consonant_n_1_rel",
            PHON.ONSET con ] ].

consortium_n1 := n_ppof_le &
 [ STEM < "consortium" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_consortium_n_of_rel",
            PHON.ONSET con ] ].

conspicuous_a1 := adj_intrans_le &
 [ STEM < "conspicuous" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_conspicuous_a_1_rel",
            PHON.ONSET con ] ].

conspiracy_n1 := n_intr_le &
 [ STEM < "conspiracy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_conspiracy_n_1_rel",
            PHON.ONSET con ] ].

conspire_v1 := v_subj_equi_le &
 [ STEM < "conspire" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_conspire_v_1_rel",
            PHON.ONSET con ] ].

constant_a1 := adj_intrans_le &
 [ STEM < "constant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_constant_a_1_rel",
            PHON.ONSET con ] ].

constantly_adv1 := adv_int_vp_le &
 [ STEM < "constantly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_constant_a_1_rel",
            PHON.ONSET con ] ].

constituent_a1 := adj_intrans_le &
 [ STEM < "constituent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_constituent_a_1_rel",
            PHON.ONSET con ] ].

constituent_n1 := n_intr_le &
 [ STEM < "constituent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_constituent_n_1_rel",
            PHON.ONSET con ] ].

constitute_v1 := v_np_trans_le &
 [ STEM < "constitute" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_constitute_v_1_rel",
            PHON.ONSET con ] ].

constitution_n1 := n_mass_count_le &
 [ STEM < "constitution" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_constitution_n_1_rel",
            PHON.ONSET con ] ].

constitutional_a1 := adj_intrans_le &
 [ STEM < "constitutional" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_constitutional_a_1_rel",
            PHON.ONSET con ] ].

constitutional_n1 := n_intr_le &
 [ STEM < "constitutional" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_constitutional_n_1_rel",
            PHON.ONSET con ] ].

constitutive_a1 := adj_intrans_le &
 [ STEM < "constitutive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_constitutive_a_1_rel",
            PHON.ONSET con ] ].

constrain_v1 := v_empty_prep*_trans_le &
 [ STEM < "constrain" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _from_p_sel_rel,
                    KEYREL.PRED "_constrain_v_from_rel" ],
            PHON.ONSET con ] ].

constrain_v2 := v_obj_equi_le &
 [ STEM < "constrain" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_constrain_v_1_rel",
            PHON.ONSET con ] ].

constraint_n1 := n_intr_le &
 [ STEM < "constraint" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_constraint_n_1_rel",
            PHON.ONSET con ] ].

constrict_v1 := v_unacc_le &
 [ STEM < "constrict" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_constrict_v_1_rel",
            PHON.ONSET con ] ].

constrict_v2 := v_np_trans_le &
 [ STEM < "constrict" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_constrict_v_cause_rel",
            PHON.ONSET con ] ].

construct_n1 := n_intr_le &
 [ STEM < "construct" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_construct_n_1_rel",
            PHON.ONSET con ] ].

construct_v1 := v_np_trans_le &
 [ STEM < "construct" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_construct_v_1_rel",
            PHON.ONSET con ] ].

construct_v2 := v_obj_equi_le &
 [ STEM < "construct" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_construct_v_1_rel",
            PHON.ONSET con ] ].

construction_n := n_mass_count_ppof_le &
 [ STEM < "construction" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_construction_n_of_rel",
            PHON.ONSET con ] ].

constructive_isect := adj_intrans_le &
 [ STEM < "constructive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_constructive_a_1_rel",
            PHON.ONSET con ] ].

constructively := adv_int_vp_le &
 [ STEM < "constructively" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_constructive_a_1_rel",
            PHON.ONSET con ] ].

construe_v1 := v_np_trans_le &
 [ STEM < "construe" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_construe_v_1_rel",
            PHON.ONSET con ] ].

construe_v2 := v_np_as_le &
 [ STEM < "construe" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_construe_v_as_rel",
            PHON.ONSET con ] ].

construe_v3 := v_obj_equi_le &
 [ STEM < "construe" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_construe_v_1_rel",
            PHON.ONSET con ] ].

construe_v4 := v_cp_prop_non_trans_le &
 [ STEM < "construe" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_construe_v_1_rel",
            PHON.ONSET con ] ].

consul_n1 := n_intr_le &
 [ STEM < "consul" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_consul_n_1_rel",
            PHON.ONSET con ] ].

consul_ttl := n_title_le &
 [ STEM < "consul" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_consul_n_1_rel",
            PHON.ONSET con ] ].

consulate_n1 := n_intr_le &
 [ STEM < "consulate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_consulate_n_1_rel",
            PHON.ONSET con ] ].

consult_v1 := v_np_trans_le &
 [ STEM < "consult" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_consult_v_1_rel",
            PHON.ONSET con ] ].

consult_v2 := v_double_pp*_le &
 [ STEM < "consult" >,
   SYNSEM [ LKEYS [ --COMPKEY _with_p_rel,
                    --OCOMPKEY _about_p_rel,
                    KEYREL.PRED "_consult_v_about_rel" ],
            PHON.ONSET con ] ].

consultancy_n1 := n_intr_le &
 [ STEM < "consultancy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_consultancy_n_1_rel",
            PHON.ONSET con ] ].

consultant_n1 := n_intr_le &
 [ STEM < "consultant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_consultant_n_1_rel",
            PHON.ONSET con ] ].

consultation_n1 := n_ppof_le &
 [ STEM < "consultation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_consultation_n_of_rel",
            PHON.ONSET con ] ].

consume_v1 := v_np_trans_le &
 [ STEM < "consume" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_consume_v_1_rel",
            PHON.ONSET con ] ].

consume_v2 := v_np_prep_trans_le &
 [ STEM < "consume" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _with_p_rel,
                    KEYREL.PRED "_consume_v_1_rel" ],
            PHON.ONSET con ] ].

consumer_n1 := n_ppof_le &
 [ STEM < "consumer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_consumer_n_of_rel",
            PHON.ONSET con ] ].

consumption_n1 := n_mass_le &
 [ STEM < "consumption" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_consumption_n_1_rel",
            PHON.ONSET con ] ].

contact_n1 := n_mass_count_le &
 [ STEM < "contact" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_contact_n_1_rel",
            PHON.ONSET con ] ].

contact_v1 := v_np_trans_le &
 [ STEM < "contact" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_contact_v_1_rel",
            PHON.ONSET con ] ].

contain_v1 := v_np_trans_le &
 [ STEM < "contain" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_contain_v_1_rel",
            PHON.ONSET con ] ].

container_n1 := n_ppof_le &
 [ STEM < "container" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_container_n_of_rel",
            PHON.ONSET con ] ].

contaminate_v1 := v_np_trans_le &
 [ STEM < "contaminate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_contaminate_v_1_rel",
            PHON.ONSET con ] ].

contemplate_v1 := v_np_trans_le &
 [ STEM < "contemplate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_contemplate_v_1_rel",
            PHON.ONSET con ] ].

contemplate_v2 := v_subj_equi_prp_le &
 [ STEM < "contemplate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_contemplate_v_1_rel",
            PHON.ONSET con ] ].

contemplative_isect := adj_intrans_le &
 [ STEM < "contemplative" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_contemplative_a_1_rel",
            PHON.ONSET con ] ].

contemplatively := adv_int_vp_le &
 [ STEM < "contemplatively" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_contemplative_a_1_rel",
            PHON.ONSET con ] ].

contemporaneous_a1 := adj_intrans_le &
 [ STEM < "contemporaneous" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_contemporaneous_a_1_rel",
            PHON.ONSET con ] ].

contemporarily := adv_int_vp_le &
 [ STEM < "contemporarily" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_contemporary_a_1_rel",
            PHON.ONSET con ] ].

contemporary_a1 := adj_intrans_le &
 [ STEM < "contemporary" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_contemporary_a_1_rel",
            PHON.ONSET con ] ].

contemporary_n1 := n_no_cmpnd_le &
 [ STEM < "contemporary" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_contemporary_n_1_rel",
            PHON.ONSET con ] ].

contempt_n1 := n_mass_le &
 [ STEM < "contempt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_contempt_n_1_rel",
            PHON.ONSET con ] ].

contend_v1 := v_unerg_le &
 [ STEM < "contend" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_contend_v_1_rel",
            PHON.ONSET con ] ].

contend_v2 := v_cp_prop_non_trans_le &
 [ STEM < "contend" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_contend_v_1_rel",
            PHON.ONSET con ] ].

contend_with_v1 := v_empty_prep_intrans_le &
 [ STEM < "contend" >,
   SYNSEM [ LKEYS [ --COMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_contend_v_with_rel" ],
            PHON.ONSET con ] ].

content_a1 := adj_trans_le &
 [ STEM < "content" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_content_a_to_rel" ],
            PHON.ONSET con ] ].

content_n1 := n_intr_le &
 [ STEM < "content" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_content_n_1_rel",
            PHON.ONSET con ] ].

content_v1 := v_empty_prep*_trans_le &
 [ STEM < "content" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_content_v_with_rel" ],
            PHON.ONSET con ] ].

contented_a1 := adj_intrans_le &
 [ STEM < "contented" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_contented_a_1_rel",
            PHON.ONSET con ] ].

contentedly := adv_int_vp_le &
 [ STEM < "contentedly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_contented_a_1_rel",
            PHON.ONSET con ] ].

contention_n1 := n_mass_count_le &
 [ STEM < "contention" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_contention_n_1_rel",
            PHON.ONSET con ] ].

contest_n1 := n_intr_le &
 [ STEM < "contest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_contest_n_1_rel",
            PHON.ONSET con ] ].

contest_v1 := v_np_trans_le &
 [ STEM < "contest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_contest_v_1_rel",
            PHON.ONSET con ] ].

context_n1 := n_mass_count_le &
 [ STEM < "context" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_context_n_1_rel",
            PHON.ONSET con ] ].

contiguity_n1 := n_mass_count_le &
 [ STEM < "contiguity" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_contiguity_n_1_rel",
            PHON.ONSET con ] ].

continence_n1 := n_mass_le &
 [ STEM < "continence" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_continence_n_1_rel",
            PHON.ONSET con ] ].

continent_n1 := n_intr_le &
 [ STEM < "continent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_continent_n_1_rel",
            PHON.ONSET con ] ].

continental_a1 := adj_intrans_le &
 [ STEM < "continental" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_continental_a_1_rel",
            PHON.ONSET con ] ].

continental_n1 := n_proper_le &
 [ STEM < "continental" >,
   SYNSEM [ LKEYS.KEYREL.CARG "continental",
            PHON.ONSET con ] ].

contingency_n1 := n_mass_count_le &
 [ STEM < "contingency" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_contingency_n_1_rel",
            PHON.ONSET con ] ].

contingent_a1 := adj_intrans_le &
 [ STEM < "contingent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_contingent_a_1_rel",
            PHON.ONSET con ] ].

continual_a1 := adj_intrans_le &
 [ STEM < "continual" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_continual_a_1_rel",
            PHON.ONSET con ] ].

continually := adv_int_vp_le &
 [ STEM < "continually" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_continual_a_1_rel",
            PHON.ONSET con ] ].

continuance_n1 := n_mass_count_le &
 [ STEM < "continuance" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_continuance_n_1_rel",
            PHON.ONSET con ] ].

continue_v1 := v_prep_dir_le &
 [ STEM < "continue" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_continue_v_1_rel",
            PHON.ONSET con ] ].

continue_v2 := v_np_trans_noger_le &
 [ STEM < "continue" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_continue_v_2_rel",
            PHON.ONSET con ] ].

continue_v3 := v_ssr_le &
 [ STEM < "continue" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_continue_v_2_rel",
            PHON.ONSET con ] ].

continue_v4 := v_ssr_prp_le &
 [ STEM < "continue" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_continue_v_2_rel",
            PHON.ONSET con ] ].

continuous_a1 := adj_intrans_le &
 [ STEM < "continuous" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_continuous_a_1_rel",
            PHON.ONSET con ] ].

continuously_isect := adv_int_vp_le &
 [ STEM < "continuously" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_continuous_a_1_rel",
            PHON.ONSET con ] ].

contour_n1 := n_intr_le &
 [ STEM < "contour" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_contour_n_1_rel",
            PHON.ONSET con ] ].

contract_n1 := n_intr_le &
 [ STEM < "contract" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_contract_n_1_rel",
            PHON.ONSET con ] ].

contract_out_v1 := v_particle_np_le &
 [ STEM < "contract" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_contract_v_out_rel" ],
            PHON.ONSET con ] ].

contract_out_v2 := v_particle_np_pp_to_le &
 [ STEM < "contract" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_contract_v_out_rel" ],
            PHON.ONSET con ] ].

contract_v1 := v_subj_equi_le &
 [ STEM < "contract" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_contract_v_1_rel",
            PHON.ONSET con ] ].

contract_v2 := v_np_trans_le &
 [ STEM < "contract" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_contract_v_1_rel",
            PHON.ONSET con ] ].

contract_v3 := v_obj_equi_le &
 [ STEM < "contract" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_contract_v_1_rel",
            PHON.ONSET con ] ].

contract_v4 := v_unacc_le &
 [ STEM < "contract" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_contract_v_2_rel",
            PHON.ONSET con ] ].

contraction_n1 := n_mass_count_le &
 [ STEM < "contraction" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_contraction_n_1_rel",
            PHON.ONSET con ] ].

contractor_n1 := n_intr_le &
 [ STEM < "contractor" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_contractor_n_1_rel",
            PHON.ONSET con ] ].

contradict_v1 := v_np_trans_le &
 [ STEM < "contradict" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_contradict_v_1_rel",
            PHON.ONSET con ] ].

contradiction_n1 := n_intr_le &
 [ STEM < "contradiction" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_contradiction_n_1_rel",
            PHON.ONSET con ] ].

contradistinction_n1 := n_mass_count_le &
 [ STEM < "contradistinction" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_contradistinction_n_1_rel",
            PHON.ONSET con ] ].

contradistinguish_v1 := v_np_trans_le &
 [ STEM < "contradistinguish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_contradistinguish_v_1_rel",
            PHON.ONSET con ] ].

contrariety_n1 := n_mass_le &
 [ STEM < "contrariety" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_contrariety_n_1_rel",
            PHON.ONSET con ] ].

contrary_a1 := adj_intrans_le &
 [ STEM < "contrary" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_contrary_a_1_rel",
            PHON.ONSET con ] ].

contrast_i_n1 := n_bare_jmod_opt_le &
 [ STEM < "contrast" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_contrast_n_1_rel",
            PHON.ONSET con ] ].

contrast_n1 := n_mass_count_le &
 [ STEM < "contrast" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_contrast_n_1_rel",
            PHON.ONSET con ] ].

contrast_v1 := v_empty_prep_trans*_le &
 [ STEM < "contrast" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_contrast_v_with_rel" ],
            PHON.ONSET con ] ].

contrast_v2 := v_np*_trans_le &
 [ STEM < "contrast" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_contrast_v_with_rel",
            PHON.ONSET con ] ].

contrast_with_v1 := v_empty_prep_intrans_le &
 [ STEM < "contrast" >,
   SYNSEM [ LKEYS [ --COMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_contrast_v_with_rel" ],
            PHON.ONSET con ] ].

contribute_v1 := v_np*_trans_le &
 [ STEM < "contribute" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_contribute_v_to_rel",
            PHON.ONSET con ] ].

contribute_v2 := v_to_trans*_le &
 [ STEM < "contribute" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_contribute_v_to_rel",
            PHON.ONSET con ] ].

contribution_n1 := n_ppof_le &
 [ STEM < "contribution" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_contribution_n_of_rel",
            PHON.ONSET con ] ].

contrivance_n1 := n_intr_le &
 [ STEM < "contrivance" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_contrivance_n_1_rel",
            PHON.ONSET con ] ].

control_n1 := n_mass_count_ppof_le &
 [ STEM < "control" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_control_n_of_rel",
            PHON.ONSET con ] ].

control_v1 := v_np_trans_le &
 [ STEM < "control" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_control_v_1_rel",
            PHON.ONSET con ] ].

control_v2 := v_cp_ques_fin_inf_non_trans_le &
 [ STEM < "control" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_control_v_1_rel",
            PHON.ONSET con ] ].

controller_n1 := n_ppof_le &
 [ STEM < "controller" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_controller_n_of_rel",
            PHON.ONSET con ] ].

controversy_n1 := n_mass_count_le &
 [ STEM < "controversy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_controversy_n_1_rel",
            PHON.ONSET con ] ].

convenience_n1 := n_mass_count_le &
 [ STEM < "convenience" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_convenience_n_1_rel",
            PHON.ONSET con ] ].

convenient_a1 := adj_trans_le &
 [ STEM < "convenient" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_convenient_a_for_rel" ],
            PHON.ONSET con ] ].

convenient_a2 := adj_reg_atrans_le &
 [ STEM < "convenient" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_convenient_a_for_rel",
            PHON.ONSET con ] ].

convenient_a3 := adj_reg_atrans_cp_le &
 [ STEM < "convenient" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_convenient_a_for_rel",
            PHON.ONSET con ] ].

conveniently := adv_int_vp_le &
 [ STEM < "conveniently" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_convenient_a_for_rel",
            PHON.ONSET con ] ].

convent_n1 := n_intr_le &
 [ STEM < "convent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_convent_n_1_rel",
            PHON.ONSET con ] ].

convention-hall_n1 := n_intr_le &
 [ STEM < "convention", "hall" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_convention+hall_n_1_rel",
            PHON.ONSET con ] ].

convention_n1 := n_intr_le &
 [ STEM < "convention" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_convention_n_1_rel",
            PHON.ONSET con ] ].

conventional_a1 := adj_intrans_le &
 [ STEM < "conventional" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_conventional_a_1_rel",
            PHON.ONSET con ] ].

conventionality_n1 := n_mass_le &
 [ STEM < "conventionality" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_conventionality_n_1_rel",
            PHON.ONSET con ] ].

converge_on_v1 := v_prep*_intrans_le &
 [ STEM < "converge" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_rel,
                    KEYREL.PRED "_converge_v_1_rel" ],
            PHON.ONSET con ] ].

convergence_n1 := n_mass_le &
 [ STEM < "convergence" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_convergence_n_1_rel",
            PHON.ONSET con ] ].

conversation_n1 := n_mass_count_le &
 [ STEM < "conversation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_conversation_n_1_rel",
            PHON.ONSET con ] ].

converse_a1 := adj_intrans_le &
 [ STEM < "converse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_converse_a_1_rel",
            PHON.ONSET con ] ].

converse_n1 := n_mass_le &
 [ STEM < "converse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_converse_n_1_rel",
            PHON.ONSET con ] ].

converse_n2 := n_proper_le &
 [ STEM < "converse" >,
   SYNSEM [ LKEYS.KEYREL.CARG "converse",
            PHON.ONSET con ] ].

converse_v1 := v_double_pp*_le &
 [ STEM < "converse" >,
   SYNSEM [ LKEYS [ --COMPKEY _with_p_rel,
                    --OCOMPKEY _about_p_rel,
                    KEYREL.PRED "_converse_v_about_rel" ],
            PHON.ONSET con ] ].

conversion_n1 := n_mass_count_le &
 [ STEM < "conversion" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_conversion_n_1_rel",
            PHON.ONSET con ] ].

convert_n1 := n_intr_le &
 [ STEM < "convert" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_convert_n_1_rel",
            PHON.ONSET con ] ].

convert_v1 := v_to*_trans_le &
 [ STEM < "convert" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_convert_v_to_rel",
            PHON.ONSET con ] ].

convert_v2 := v_prep_intrans_le &
 [ STEM < "convert" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_rel,
                    KEYREL.PRED "_convert_v_1_rel" ],
            PHON.ONSET con ] ].

convert_v3 := v_unerg_le &
 [ STEM < "convert" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_convert_v_1_rel",
            PHON.ONSET con ] ].

convert_v4 := v_np_trans_double_pp_to*_le &
 [ STEM < "convert" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _from_p_sel_rel,
                    KEYREL.PRED "_convert_v_from-to_rel" ],
            PHON.ONSET con ] ].

convert_v5 := v_obj_equi_le &
 [ STEM < "convert" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_convert_v_1_rel",
            PHON.ONSET con ] ].

converter_n1 := n_intr_le &
 [ STEM < "converter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_converter_n_1_rel",
            PHON.ONSET con ] ].

convertible_n1 := n_intr_le &
 [ STEM < "convertible" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_convertible_n_1_rel",
            PHON.ONSET con ] ].

convex_n1 := n_intr_le &
 [ STEM < "convex" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_convex_n_1_rel",
            PHON.ONSET con ] ].

convey_v1 := v_to*_trans_le &
 [ STEM < "convey" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_convey_v_to_rel",
            PHON.ONSET con ] ].

convey_v2 := v_pp_cp_fin_le &
 [ STEM < "convey" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_convey_v_1_rel" ],
            PHON.ONSET con ] ].

convey_v3 := v_np_prep_trans_dors_le &
 [ STEM < "convey" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_convey_v_1_rel",
            PHON.ONSET con ] ].

conveyance_n1 := n_mass_count_le &
 [ STEM < "conveyance" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_conveyance_n_1_rel",
            PHON.ONSET con ] ].

convict_n1 := n_intr_le &
 [ STEM < "convict" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_convict_n_1_rel",
            PHON.ONSET con ] ].

convict_v1 := v_empty_prep*_trans_le &
 [ STEM < "convict" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_convict_v_of_rel" ],
            PHON.ONSET con ] ].

conviction_n1 := n_ppof_le &
 [ STEM < "conviction" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_conviction_n_of_rel",
            PHON.ONSET con ] ].

convince_v1 := v_obj_equi_le &
 [ STEM < "convince" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_convince_v_of_rel",
            PHON.ONSET con ] ].

convince_v2 := v_np_trans_cp_prop_le &
 [ STEM < "convince" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_convince_v_of_rel",
            PHON.ONSET con ] ].

convince_v3 := v_empty_prep_trans_le &
 [ STEM < "convince" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_convince_v_of_rel" ],
            PHON.ONSET con ] ].

convivial_a1 := adj_intrans_le &
 [ STEM < "convivial" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_convivial_a_1_rel",
            PHON.ONSET con ] ].

convoke_v1 := v_np_trans_le &
 [ STEM < "convoke" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_convoke_v_1_rel",
            PHON.ONSET con ] ].

convoluted_a1 := adj_intrans_le &
 [ STEM < "convoluted" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_convoluted_a_1_rel",
            PHON.ONSET con ] ].

convolution_n1 := n_intr_le &
 [ STEM < "convolution" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_convolution_n_1_rel",
            PHON.ONSET con ] ].

convolve_v1 := v_np_trans_le &
 [ STEM < "convolve" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_convolve_v_1_rel",
            PHON.ONSET con ] ].

cook_n1 := n_intr_le &
 [ STEM < "cook" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cook_n_1_rel",
            PHON.ONSET con ] ].

cook_v1 := v_np*_trans_le &
 [ STEM < "cook" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cook_v_1_rel",
            PHON.ONSET con ] ].

cook_v2 := v_ditrans_only_le &
 [ STEM < "cook" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cook_v_1_rel",
            PHON.ONSET con ] ].

cookery_n1 := n_mass_le &
 [ STEM < "cookery" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cookery_n_1_rel",
            PHON.ONSET con ] ].

cookie_n1 := n_intr_le &
 [ STEM < "cookie" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cookie_n_1_rel",
            PHON.ONSET con ] ].

cookset_n1 := n_intr_le &
 [ STEM < "cookset" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cookset_n_1_rel",
            PHON.ONSET con ] ].

cool_a1 := adj_intrans_le &
 [ STEM < "cool" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cool_a_1_rel",
            PHON.ONSET con ] ].

cool_a2 := adj_atrans_le &
 [ STEM < "cool" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cool_a_1_rel",
            PHON.ONSET con ] ].

cool_down_v1 := v_particle_le &
 [ STEM < "cool" >,
   SYNSEM [ LKEYS [ --COMPKEY _down_p_sel_rel,
                    KEYREL.PRED "_cool_v_down_rel" ],
            PHON.ONSET con ] ].

cool_down_v2 := v_particle_np_le &
 [ STEM < "cool" >,
   SYNSEM [ LKEYS [ --COMPKEY _down_p_sel_rel,
                    KEYREL.PRED "_cool_v_down_rel" ],
            PHON.ONSET con ] ].

cool_off_v1 := v_particle_le &
 [ STEM < "cool" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_cool_v_off_rel" ],
            PHON.ONSET con ] ].

cool_off_v2 := v_particle_np_le &
 [ STEM < "cool" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_cool_v_off_rel" ],
            PHON.ONSET con ] ].

cool_v1 := v_np_trans_le &
 [ STEM < "cool" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cool_v_cause_rel",
            PHON.ONSET con ] ].

cool_v2 := v_unacc_le &
 [ STEM < "cool" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cool_v_1_rel",
            PHON.ONSET con ] ].

cooler_a1 := adj_comp_le &
 [ STEM < "cooler" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cool_a_1_rel",
            PHON.ONSET con ] ].

cooler_a2 := adj_atrans_comp_le &
 [ STEM < "cooler" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cool_a_1_rel",
            PHON.ONSET con ] ].

coolest_a1 := adj_superl_le &
 [ STEM < "coolest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cool_a_1_rel",
            PHON.ONSET con ] ].

coolest_a2 := adj_atrans_superl_le &
 [ STEM < "coolest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cool_a_1_rel",
            PHON.ONSET con ] ].

coolly := adv_int_vp_le &
 [ STEM < "coolly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cool_a_1_rel",
            PHON.ONSET con ] ].

coop_n1 := n_intr_le &
 [ STEM < "coop" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_coop_n_1_rel",
            PHON.ONSET con ] ].

coop_up_v1 := v_particle_np_le &
 [ STEM < "coop" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_coop_v_up_rel" ],
            PHON.ONSET con ] ].

cooper_n1 := n_proper_le &
 [ STEM < "cooper" >,
   SYNSEM [ LKEYS.KEYREL.CARG "cooper",
            PHON.ONSET con ] ].

cooper_n2 := n_intr_le &
 [ STEM < "cooper" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cooper_n_1_rel",
            PHON.ONSET con ] ].

cooperate_v1 := v_unerg_le &
 [ STEM < "cooperate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cooperate_v_1_rel",
            PHON.ONSET con ] ].

cooperate_with_v1 := v_empty_prep_intrans_le &
 [ STEM < "cooperate" >,
   SYNSEM [ LKEYS [ --COMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_cooperate_v_with_rel" ],
            PHON.ONSET con ] ].

cooperation_n1 := n_intr_le &
 [ STEM < "cooperation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cooperation_n_1_rel",
            PHON.ONSET con ] ].

cooperation_n2 := n_intr_le &
 [ STEM < "coÃ¶peration" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cooperation_n_1_rel",
            PHON.ONSET con ] ].

cooperative_isect := adj_intrans_le &
 [ STEM < "cooperative" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cooperative_a_1_rel",
            PHON.ONSET con ] ].

cooperative_n1 := n_no_cmpnd_le &
 [ STEM < "cooperative" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cooperative_n_1_rel",
            PHON.ONSET con ] ].

cooperatively := adv_int_vp_le &
 [ STEM < "cooperatively" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cooperative_a_1_rel",
            PHON.ONSET con ] ].

coordinate_n1 := n_intr_le &
 [ STEM < "coordinate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_coordinate_n_1_rel",
            PHON.ONSET con ] ].

coordinate_n2 := n_intr_le &
 [ STEM < "coÃ¶rdinate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_coordinate_n_1_rel",
            PHON.ONSET con ] ].

coordinate_v1 := v_np*_trans_le &
 [ STEM < "coordinate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_coordinate_v_1_rel",
            PHON.ONSET con ] ].

coordinate_v2 := v_np*_trans_le &
 [ STEM < "coÃ¶rdinate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_coordinate_v_1_rel",
            PHON.ONSET con ] ].

coordinate_v3 := v_obj_equi_le &
 [ STEM < "coordinate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_coordinate_v_1_rel",
            PHON.ONSET con ] ].

coordinate_v4 := v_obj_equi_le &
 [ STEM < "coÃ¶rdinate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_coordinate_v_1_rel",
            PHON.ONSET con ] ].

coordinately_adv1 := adv_int_vp_le &
 [ STEM < "coordinately" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_coordinate_a_1_rel",
            PHON.ONSET con ] ].

coordination_n1 := n_mass_ppcomp_le &
 [ STEM < "coordination" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_coordination_n_of_rel" ],
            PHON.ONSET con ] ].

cop_n1 := n_intr_le &
 [ STEM < "cop" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cop_n_1_rel",
            PHON.ONSET con ] ].

cope_v1 := v_empty_prep_intrans_le &
 [ STEM < "cope" >,
   SYNSEM [ LKEYS [ --COMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_cope_v_with_rel" ],
            PHON.ONSET con ] ].

cope_v2 := v_unerg_le &
 [ STEM < "cope" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cope_v_with_rel",
            PHON.ONSET con ] ].

copenhagen := n_proper_le &
 [ STEM < "copenhagen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "copenhagen",
            PHON.ONSET con ] ].

copious_isect := adj_intrans_le &
 [ STEM < "copious" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_copious_a_1_rel",
            PHON.ONSET con ] ].

copper_n1 := n_mass_le &
 [ STEM < "copper" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_copper_n_1_rel",
            PHON.ONSET con ] ].

coptic := n_proper_le &
 [ STEM < "coptic" >,
   SYNSEM [ LKEYS.KEYREL.CARG "coptic",
            PHON.ONSET con ] ].

coptic_a1 := adj_intrans_le &
 [ STEM < "coptic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_coptic_a_1_rel",
            PHON.ONSET con ] ].

copulate_v1 := v_unerg_le &
 [ STEM < "copulate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_copulate_v_1_rel",
            PHON.ONSET con ] ].

copy_down_v1 := v_particle_np_le &
 [ STEM < "copy" >,
   SYNSEM [ LKEYS [ --COMPKEY _down_p_sel_rel,
                    KEYREL.PRED "_copy_v_down_rel" ],
            PHON.ONSET con ] ].

copy_n1 := n_mass_count_le &
 [ STEM < "copy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_copy_n_1_rel",
            PHON.ONSET con ] ].

copy_out_v1 := v_particle_np_le &
 [ STEM < "copy" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_copy_v_out_rel" ],
            PHON.ONSET con ] ].

copy_v1 := v_np*_trans_le &
 [ STEM < "copy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_copy_v_1_rel",
            PHON.ONSET con ] ].

copy_v2 := v_np_prep_trans_dors_le &
 [ STEM < "copy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_copy_v_1_rel",
            PHON.ONSET con ] ].

cord_n1 := n_mass_count_le &
 [ STEM < "cord" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cord_n_1_rel",
            PHON.ONSET con ] ].

cord_v1 := v_np_trans_le &
 [ STEM < "cord" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cord_v_1_rel",
            PHON.ONSET con ] ].

cordage_n1 := n_mass_le &
 [ STEM < "cordage" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cordage_n_1_rel",
            PHON.ONSET con ] ].

cordiality_n1 := n_mass_le &
 [ STEM < "cordiality" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cordiality_n_1_rel",
            PHON.ONSET con ] ].

cordless_a1 := adj_intrans_le &
 [ STEM < "cordless" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cordless_a_1_rel",
            PHON.ONSET con ] ].

core_n1 := n_intr_le &
 [ STEM < "core" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_core_n_1_rel",
            PHON.ONSET con ] ].

corgi_n1 := n_intr_le &
 [ STEM < "corgi" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_corgi_n_1_rel",
            PHON.ONSET con ] ].

corinthian_a1 := adj_intrans_le &
 [ STEM < "corinthian" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_corinthian_a_1_rel",
            PHON.ONSET con ] ].

corinthian_n1 := n_intr_le &
 [ STEM < "corinthian" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_corinthian_n_1_rel",
            PHON.ONSET con ] ].

corn_n1 := n_mass_le &
 [ STEM < "corn" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_corn_n_1_rel",
            PHON.ONSET con ] ].

corner_n1 := n_ppof_le &
 [ STEM < "corner" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_corner_n_of_rel",
            PHON.ONSET con ] ].

corolla_n1 := n_intr_le &
 [ STEM < "corolla" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_corolla_n_1_rel",
            PHON.ONSET con ] ].

corona_n1 := n_intr_le &
 [ STEM < "corona" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_corona_n_1_rel",
            PHON.ONSET con ] ].

coronado_n1 := n_proper_le &
 [ STEM < "coronado" >,
   SYNSEM [ LKEYS.KEYREL.CARG "coronado",
            PHON.ONSET con ] ].

corporate_isect := adj_intrans_le &
 [ STEM < "corporate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_corporate_a_1_rel",
            PHON.ONSET con ] ].

corporately := adv_int_vp_le &
 [ STEM < "corporately" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_corporate_a_1_rel",
            PHON.ONSET con ] ].

corporation_n1 := n_intr_le &
 [ STEM < "corporation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_corporation_n_1_rel",
            PHON.ONSET con ] ].

corporation_post_ttl := n_post_title_le &
 [ STEM < "corporation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_corporation_n_1_rel",
            PHON.ONSET con ] ].

corporeal_a1 := adj_intrans_le &
 [ STEM < "corporeal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_corporeal_a_1_rel",
            PHON.ONSET con ] ].

corps_n1 := n_intr_le &
 [ STEM < "corps" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_corps_n_1_rel",
            PHON.ONSET con ] ].

corpus_callosum_n1 := n_intr_le &
 [ STEM < "corpus", "callosum" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_corpus_callosum_n_1_rel",
            PHON.ONSET con ] ].

corpus_christi := n_holiday_le &
 [ STEM < "corpus", "christi" >,
   SYNSEM [ LKEYS.KEYREL.CARG "corpus_christi",
            PHON.ONSET con ] ].

corpus_christi_n1 := n_proper_city_le &
 [ STEM < "corpus", "christi" >,
   SYNSEM [ LKEYS.KEYREL.CARG "corpus_christi",
            PHON.ONSET con ] ].

corpus_n1 := n_intr_le &
 [ STEM < "corpus" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_corpus_n_1_rel",
            PHON.ONSET con ] ].

correct_a1 := adj_intrans_le &
 [ STEM < "correct" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_correct_a_1_rel",
            PHON.ONSET con ] ].

correct_root_post := adv_s_post_word_nospec_le &
 [ STEM < "correct" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_correct_a_1_rel",
            PHON.ONSET con ] ].

correct_root_pre := adv_s_pre_word_root_le &
 [ STEM < "correct" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_correct_a_1_rel",
            PHON.ONSET con ] ].

correct_v1 := v_np_trans_le &
 [ STEM < "correct" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_correct_v_1_rel",
            PHON.ONSET con ] ].

corrective_a1 := adj_intrans_le &
 [ STEM < "corrective" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_corrective_a_1_rel",
            PHON.ONSET con ] ].

corrective_n1 := n_intr_le &
 [ STEM < "corrective" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_corrective_n_1_rel",
            PHON.ONSET con ] ].

correctly := adv_int_vp_le &
 [ STEM < "correctly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_correct_a_1_rel",
            PHON.ONSET con ] ].

correctness_n1 := n_mass_le &
 [ STEM < "correctness" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_correctness_n_1_rel",
            PHON.ONSET con ] ].

correlate_n1 := n_intr_le &
 [ STEM < "correlate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_correlate_n_1_rel",
            PHON.ONSET con ] ].

correlate_v1 := v_np_trans_le &
 [ STEM < "correlate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_correlate_v_cause_rel",
            PHON.ONSET con ] ].

correlate_v2 := v_unacc_le &
 [ STEM < "correlate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_correlate_v_1_rel",
            PHON.ONSET con ] ].

correlative_n1 := n_intr_le &
 [ STEM < "correlative" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_correlative_n_1_rel",
            PHON.ONSET con ] ].

correlatively_adv := adv_int_vp_le &
 [ STEM < "correlatively" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_correlative_a_1_rel",
            PHON.ONSET con ] ].

correspond_v1 := v_empty_prep_intrans_le &
 [ STEM < "correspond" >,
   SYNSEM [ LKEYS [ --COMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_correspond_v_to_rel" ],
            PHON.ONSET con ] ].

correspond_v2 := v_empty_prep_intrans_le &
 [ STEM < "correspond" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_correspond_v_to_rel" ],
            PHON.ONSET con ] ].

correspond_v3 := v_unerg_le &
 [ STEM < "correspond" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_correspond_v_1_rel",
            PHON.ONSET con ] ].

correspondence_n1 := n_mass_le &
 [ STEM < "correspondence" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_correspondence_n_1_rel",
            PHON.ONSET con ] ].

corresponding_isect := adj_intrans_le &
 [ STEM < "corresponding" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_corresponding_a_1_rel",
            PHON.ONSET con ] ].

correspondingly := adv_int_vp_aux_le &
 [ STEM < "correspondingly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_corresponding_a_1_rel",
            PHON.ONSET con ] ].

corridor_n1 := n_intr_le &
 [ STEM < "corridor" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_corridor_n_1_rel",
            PHON.ONSET con ] ].

corroborate_v1 := v_np_trans_le &
 [ STEM < "corroborate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_corroborate_v_1_rel",
            PHON.ONSET con ] ].

corrosive_a1 := adj_intrans_le &
 [ STEM < "corrosive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_corrosive_a_1_rel",
            PHON.ONSET con ] ].

corrosive_n1 := n_intr_le &
 [ STEM < "corrosive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_corrosive_n_1_rel",
            PHON.ONSET con ] ].

corrupt_a1 := adj_intrans_le &
 [ STEM < "corrupt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_corrupt_a_1_rel",
            PHON.ONSET con ] ].

corrupt_v1 := v_np_trans_le &
 [ STEM < "corrupt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_corrupt_v_1_rel",
            PHON.ONSET con ] ].

corruption_n1 := n_mass_count_le &
 [ STEM < "corruption" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_corruption_n_1_rel",
            PHON.ONSET con ] ].

corset_n1 := n_intr_le &
 [ STEM < "corset" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_corset_n_1_rel",
            PHON.ONSET con ] ].

corvette_n1 := n_proper_le &
 [ STEM < "corvette" >,
   SYNSEM [ LKEYS.KEYREL.CARG "corvette",
            PHON.ONSET con ] ].

cosily := adv_int_vp_le &
 [ STEM < "cosily" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cosy_a_1_rel",
            PHON.ONSET con ] ].

cosine_n1 := n_intr_le &
 [ STEM < "cosine" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cosine_n_1_rel",
            PHON.ONSET con ] ].

cosmopolitan_a1 := adj_intrans_le &
 [ STEM < "cosmopolitan" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cosmopolitan_a_1_rel",
            PHON.ONSET con ] ].

cost_n1 := n_mass_count_le &
 [ STEM < "cost" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cost_n_1_rel",
            PHON.ONSET con ] ].

cost_v1 := v_ditrans_only_le &
 [ STEM < "cost" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cost_v_1_rel",
            PHON.ONSET con ] ].

cost_v2 := v_np_non_trans_le &
 [ STEM < "cost" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cost_v_1_rel",
            PHON.ONSET con ] ].

cost_v3 := v_expl_it_subj_np_np_cp_inf_le &
 [ STEM < "cost" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cost_v_x_rel",
            PHON.ONSET con ] ].

cost_v4 := v_expl_it_subj_np_np_vp_inf_le &
 [ STEM < "cost" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cost_v_x_rel",
            PHON.ONSET con ] ].

cost_v5 := v_expl_it_subj_np_np*_vp_inf_le &
 [ STEM < "cost" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cost_v_x_rel",
            PHON.ONSET con ] ].

costa_rica_n1 := n_proper_le &
 [ STEM < "costa", "rica" >,
   SYNSEM [ LKEYS.KEYREL.CARG "costa_rica",
            PHON.ONSET con ] ].

costa_rican_a1 := adj_intrans_le &
 [ STEM < "costa", "rican" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_costa+rican_a_1_rel",
            PHON.ONSET con ] ].

costa_rican_n1 := n_intr_le &
 [ STEM < "costa", "rican" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_costa+rican_n_1_rel",
            PHON.ONSET con ] ].

costlier_a1 := adj_comp_le &
 [ STEM < "costlier" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_costly_a_1_rel",
            PHON.ONSET con ] ].

costliest := adj_superl_le &
 [ STEM < "costliest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_costly_a_1_rel",
            PHON.ONSET con ] ].

costly_a1 := adj_intrans_le &
 [ STEM < "costly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_costly_a_1_rel",
            PHON.ONSET con ] ].

costume_n1 := n_intr_le &
 [ STEM < "costume" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_costume_n_1_rel",
            PHON.ONSET con ] ].

cosy_a1 := adj_intrans_le &
 [ STEM < "cosy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cosy_a_1_rel",
            PHON.ONSET con ] ].

cottage_n1 := n_intr_le &
 [ STEM < "cottage" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cottage_n_1_rel",
            PHON.ONSET con ] ].

cotter_n1 := n_intr_le &
 [ STEM < "cotter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cotter_n_1_rel",
            PHON.ONSET con ] ].

cotton_n1 := n_mass_le &
 [ STEM < "cotton" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cotton_n_1_rel",
            PHON.ONSET con ] ].

cotyledon_n1 := n_intr_le &
 [ STEM < "cotyledon" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cotyledon_n_1_rel",
            PHON.ONSET con ] ].

couch_n1 := n_intr_le &
 [ STEM < "couch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_couch_n_1_rel",
            PHON.ONSET con ] ].

cough_n1 := n_intr_le &
 [ STEM < "cough" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cough_n_1_rel",
            PHON.ONSET con ] ].

cough_up_v1 := v_particle_np_le &
 [ STEM < "cough" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_cough_v_up_rel" ],
            PHON.ONSET con ] ].

cough_v1 := v_unerg_le &
 [ STEM < "cough" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cough_v_1_rel",
            PHON.ONSET con ] ].

could_aux_neg_1 := va_modal_neg_unsp_le &
 [ STEM < "couldn't" >,
   SYNSEM [ LKEYS.KEYREL.PRED _could_v_modal_rel,
            PHON.ONSET con ] ].

could_aux_neg_2 := va_modal_neg_unsp_le &
 [ STEM < "couldn", "'t" >,
   SYNSEM [ LKEYS.KEYREL.PRED _could_v_modal_rel,
            PHON.ONSET con ] ].

could_aux_pos := va_modal_pos_unsp_le &
 [ STEM < "could" >,
   SYNSEM [ LKEYS.KEYREL.PRED _could_v_modal_rel,
            PHON.ONSET con ] ].

council_n1 := n_mass_count_ppof_le &
 [ STEM < "council" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_council_n_of_rel",
            PHON.ONSET con ] ].

counsel_n1 := n_mass_le &
 [ STEM < "counsel" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_counsel_n_1_rel",
            PHON.ONSET con ] ].

counsel_v1 := v_np_trans_le &
 [ STEM < "counsel" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_counsel_v_1_rel",
            PHON.ONSET con ] ].

count_as_v1 := v_empty_prep_intrans_le &
 [ STEM < "count" >,
   SYNSEM [ LKEYS [ --COMPKEY _as_p_sel_rel,
                    KEYREL.PRED "_count_v_as_rel" ],
            PHON.ONSET con ] ].

count_for_v1 := v_empty_prep_intrans_le &
 [ STEM < "count" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_count_v_for_rel" ],
            PHON.ONSET con ] ].

count_in_v1 := v_np_particle_only_le &
 [ STEM < "count" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_count_v_in_rel" ],
            PHON.ONSET con ] ].

count_n1 := n_intr_le &
 [ STEM < "count" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_count_n_1_rel",
            PHON.ONSET con ] ].

count_on_v1 := v_empty_prep_intrans_le &
 [ STEM < "count" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_count_v_on_rel" ],
            PHON.ONSET con ] ].

count_out_v1 := v_particle_np_le &
 [ STEM < "count" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_count_v_out_rel" ],
            PHON.ONSET con ] ].

count_ttl := n_title_le &
 [ STEM < "count" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_count_n_1_rel",
            PHON.ONSET con ] ].

count_v1 := v_unacc_le &
 [ STEM < "count" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_count_v_1_rel",
            PHON.ONSET con ] ].

count_v2 := v_np*_trans_le &
 [ STEM < "count" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_count_v_1_rel",
            PHON.ONSET con ] ].

countable_a1 := adj_intrans_le &
 [ STEM < "countable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_countable_a_1_rel",
            PHON.ONSET con ] ].

countenance_n1 := n_mass_count_le &
 [ STEM < "countenance" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_countenance_n_1_rel",
            PHON.ONSET con ] ].

countenance_v1 := v_np_trans_le &
 [ STEM < "countenance" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_countenance_v_1_rel",
            PHON.ONSET con ] ].

counter-proposal_n1 := n_intr_le &
 [ STEM < "counter", "proposal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_counter+proposal_n_1_rel",
            PHON.ONSET con ] ].

counter-proposal_n2 := n_intr_le &
 [ STEM < "counter-", "proposal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_counter+proposal_n_1_rel",
            PHON.ONSET con ] ].

counter_n1 := n_intr_le &
 [ STEM < "counter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_counter_n_1_rel",
            PHON.ONSET con ] ].

counter_narcotic_a1 := adj_intrans_le &
 [ STEM < "counter", "narcotic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_counter+narcotic_a_1_rel",
            PHON.ONSET con ] ].

counter_narcotic_a2 := adj_intrans_le &
 [ STEM < "counter-", "narcotic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_counter+narcotic_a_1_rel",
            PHON.ONSET con ] ].

counter_narcotics_n1 := n_intr_le &
 [ STEM < "counter", "narcotics" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_counter+narcotics_n_1_rel",
            PHON.ONSET con ] ].

counter_narcotics_n2 := n_intr_le &
 [ STEM < "counter-", "narcotics" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_counter+narcotics_n_1_rel",
            PHON.ONSET con ] ].

counter_v1 := v_np_trans_le &
 [ STEM < "counter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_counter_v_1_rel",
            PHON.ONSET con ] ].

counter_v2 := v_cp_prop_non_trans_le &
 [ STEM < "counter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_counter_v_1_rel",
            PHON.ONSET con ] ].

counteract_v1 := v_np_trans_le &
 [ STEM < "counteract" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_counteract_v_1_rel",
            PHON.ONSET con ] ].

counteract_v2 := v_np_trans_le &
 [ STEM < "counter-", "act" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_counteract_v_1_rel",
            PHON.ONSET con ] ].

counterbalance_n1 := n_mass_count_le &
 [ STEM < "counterbalance" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_counterbalance_n_1_rel",
            PHON.ONSET con ] ].

counterbalance_v1 := v_np_trans_le &
 [ STEM < "counterbalance" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_counterbalance_v_1_rel",
            PHON.ONSET con ] ].

counterfeit_a1 := adj_intrans_le &
 [ STEM < "counterfeit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_counterfeit_a_1_rel",
            PHON.ONSET con ] ].

counterfeit_n1 := n_intr_le &
 [ STEM < "counterfeit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_counterfeit_n_1_rel",
            PHON.ONSET con ] ].

counterfeit_v1 := v_np_trans_le &
 [ STEM < "counterfeit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_counterfeit_v_1_rel",
            PHON.ONSET con ] ].

counteroffer_n1 := n_intr_le &
 [ STEM < "counteroffer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_counteroffer_n_1_rel",
            PHON.ONSET con ] ].

counterpart_n1 := n_ppcomp_le &
 [ STEM < "counterpart" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_counterpart_n_to_rel" ],
            PHON.ONSET con ] ].

countervail_v1 := v_np_trans_le &
 [ STEM < "countervail" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_countervail_v_1_rel",
            PHON.ONSET con ] ].

countless_a1 := adj_attr_intrans_le &
 [ STEM < "countless" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_countless_a_1_rel",
            PHON.ONSET con ] ].

country_n1 := n_mass_count_ppof_le &
 [ STEM < "country" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_country_n_of_rel",
            PHON.ONSET con ] ].

countryside_n1 := n_mass_count_le &
 [ STEM < "countryside" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_countryside_n_1_rel",
            PHON.ONSET con ] ].

county_n1 := n_mass_count_ppof_le &
 [ STEM < "county" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_county_n_of_rel",
            PHON.ONSET con ] ].

county_post_ttl := n_post_title_le &
 [ STEM < "county" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_county_n_of_rel",
            PHON.ONSET con ] ].

couple_adj := adj_bare_unspecified_card_one_le &
 [ STEM < "couple" >,
   SYNSEM [ LKEYS.KEYREL.CARG "2",
            PHON.ONSET con ] ].

couple_n1 := n_intr_le &
 [ STEM < "couple" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_couple_n_1_rel",
            PHON.ONSET con ] ].

couple_v1 := v_empty_prep*_trans_le &
 [ STEM < "couple" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_couple_v_with_rel" ],
            PHON.ONSET con ] ].

couplet_n1 := n_intr_le &
 [ STEM < "couplet" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_couplet_n_1_rel",
            PHON.ONSET con ] ].

coupon_n1 := n_intr_le &
 [ STEM < "coupon" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_coupon_n_1_rel",
            PHON.ONSET con ] ].

courage_n1 := n_mass_le &
 [ STEM < "courage" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_courage_n_1_rel",
            PHON.ONSET con ] ].

course_n1 := n_ppof_le &
 [ STEM < "course" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_course_n_of_rel",
            PHON.ONSET con ] ].

course_n2 := n_bare_jmod_le &
 [ STEM < "course" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_course_n_of_rel",
            PHON.ONSET con ] ].

court_i_n1 := n_bare_le &
 [ STEM < "court" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_court_n_of_rel",
            PHON.ONSET con ] ].

court_n1 := n_ppof_le &
 [ STEM < "court" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_court_n_of_rel",
            PHON.ONSET con ] ].

court_v1 := v_np*_trans_le &
 [ STEM < "court" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_court_v_1_rel",
            PHON.ONSET con ] ].

courtesy_n1 := n_mass_count_le &
 [ STEM < "courtesy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_courtesy_n_1_rel",
            PHON.ONSET con ] ].

courtney := n_proper_le &
 [ STEM < "courtney" >,
   SYNSEM [ LKEYS.KEYREL.CARG "courtney",
            PHON.ONSET con ] ].

courtyard_n1 := n_intr_le &
 [ STEM < "courtyard" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_courtyard_n_1_rel",
            PHON.ONSET con ] ].

cousin_n1 := n_intr_le &
 [ STEM < "cousin" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cousin_n_1_rel",
            PHON.ONSET con ] ].

cousin_title := n_title_le &
 [ STEM < "cousin" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cousin_n_1_rel",
            PHON.ONSET con ] ].

cousteau_n1 := n_proper_le &
 [ STEM < "cousteau" >,
   SYNSEM [ LKEYS.KEYREL.CARG "cousteau",
            PHON.ONSET con ] ].

cover_n1 := n_mass_count_le &
 [ STEM < "cover" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cover_n_1_rel",
            PHON.ONSET con ] ].

cover_up_v1 := v_particle_np_le &
 [ STEM < "cover" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_cover_v_up_rel" ],
            PHON.ONSET con ] ].

cover_v1 := v_np*_trans_le &
 [ STEM < "cover" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cover_v_1_rel",
            PHON.ONSET con ] ].

cover_v2 := v_empty_prep_intrans_le &
 [ STEM < "cover" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_cover_v_for_rel" ],
            PHON.ONSET con ] ].

cover_v3 := v_np_prep_trans_le &
 [ STEM < "cover" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _with_p_rel,
                    KEYREL.PRED "_cover_v_1_rel" ],
            PHON.ONSET con ] ].

coverage_n1 := n_mass_ppcomp_le &
 [ STEM < "coverage" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_coverage_n_of_rel" ],
            PHON.ONSET con ] ].

covered_up_isect := adj_intrans_le &
 [ STEM < "covered", "up" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_covered+up_a_1_rel",
            PHON.ONSET con ] ].

covert_a1 := adj_intrans_le &
 [ STEM < "covert" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_covert_a_1_rel",
            PHON.ONSET con ] ].

covet_v1 := v_np_trans_le &
 [ STEM < "covet" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_covet_v_1_rel",
            PHON.ONSET con ] ].

cow_n1 := n_intr_le &
 [ STEM < "cow" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cow_n_1_rel",
            PHON.ONSET con ] ].

cow_v1 := v_np_trans_le &
 [ STEM < "cow" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cow_v_1_rel",
            PHON.ONSET con ] ].

cowherd_n1 := n_intr_le &
 [ STEM < "cowherd" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cowherd_n_1_rel",
            PHON.ONSET con ] ].

cowshed_n1 := n_intr_le &
 [ STEM < "cowshed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cowshed_n_1_rel",
            PHON.ONSET con ] ].

cozy_a1 := adj_intrans_le &
 [ STEM < "cozy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cozy_a_1_rel",
            PHON.ONSET con ] ].

cpr_n1 := n_proper_le &
 [ STEM < "cpr" >,
   SYNSEM [ LKEYS.KEYREL.CARG "cpr",
            PHON.ONSET con ] ].

cpu_n1 := n_intr_le &
 [ STEM < "cpu" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cpu_n_1_rel",
            PHON.ONSET con ] ].

crab_n1 := n_mass_count_le &
 [ STEM < "crab" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_crab_n_1_rel",
            PHON.ONSET con ] ].

crack_down_v1 := v_particle_pp_le &
 [ STEM < "crack" >,
   SYNSEM [ LKEYS [ --COMPKEY _down_p_sel_rel,
                    --OCOMPKEY _on_p_rel,
                    KEYREL.PRED "_crack_v_down_rel" ],
            PHON.ONSET con ] ].

crack_down_v2 := v_particle_le &
 [ STEM < "crack" >,
   SYNSEM [ LKEYS [ --COMPKEY _down_p_sel_rel,
                    KEYREL.PRED "_crack_v_down_rel" ],
            PHON.ONSET con ] ].

crack_n1 := n_mass_count_le &
 [ STEM < "crack" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_crack_n_1_rel",
            PHON.ONSET con ] ].

crack_up_v1 := v_particle_np_le &
 [ STEM < "crack" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_crack_v_up_rel" ],
            PHON.ONSET con ] ].

crack_up_v2 := v_particle_le &
 [ STEM < "crack" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_crack_v_up_rel" ],
            PHON.ONSET con ] ].

crack_v1 := v_np_trans_le &
 [ STEM < "crack" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_crack_v_cause_rel",
            PHON.ONSET con ] ].

crack_v2 := v_unacc_le &
 [ STEM < "crack" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_crack_v_1_rel",
            PHON.ONSET con ] ].

cracker_n1 := n_ppof_le &
 [ STEM < "cracker" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cracker_n_of_rel",
            PHON.ONSET con ] ].

crackle_n1 := n_intr_le &
 [ STEM < "crackle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_crackle_n_1_rel",
            PHON.ONSET con ] ].

crackle_v1 := v_unerg_le &
 [ STEM < "crackle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_crackle_v_1_rel",
            PHON.ONSET con ] ].

cradle_n1 := n_intr_le &
 [ STEM < "cradle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cradle_n_1_rel",
            PHON.ONSET con ] ].

cradle_v1 := v_np_trans_le &
 [ STEM < "cradle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cradle_v_1_rel",
            PHON.ONSET con ] ].

craft_n1 := n_mass_count_le &
 [ STEM < "craft" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_craft_n_1_rel",
            PHON.ONSET con ] ].

craft_v1 := v_np_trans_le &
 [ STEM < "craft" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_craft_v_1_rel",
            PHON.ONSET con ] ].

crafty_a1 := adj_intrans_le &
 [ STEM < "crafty" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_crafty_a_1_rel",
            PHON.ONSET con ] ].

crag_n1 := n_intr_le &
 [ STEM < "crag" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_crag_n_1_rel",
            PHON.ONSET con ] ].

craggy_a1 := adj_intrans_le &
 [ STEM < "craggy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_craggy_a_1_rel",
            PHON.ONSET con ] ].

craig := n_proper_le &
 [ STEM < "craig" >,
   SYNSEM [ LKEYS.KEYREL.CARG "craig",
            PHON.ONSET con ] ].

cram_v1 := v_prep_dir_le &
 [ STEM < "cram" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cram_v_1_rel",
            PHON.ONSET con ] ].

cram_v2 := v_np_prep_trans_dors_le &
 [ STEM < "cram" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cram_v_1_rel",
            PHON.ONSET con ] ].

cram_with_v1 := v_empty_prep_trans_le &
 [ STEM < "cram" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_cram_v_with_rel" ],
            PHON.ONSET con ] ].

cramped_a1 := adj_intrans_le &
 [ STEM < "cramped" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cramped_a_1_rel",
            PHON.ONSET con ] ].

crampon_n1 := n_intr_le &
 [ STEM < "crampon" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_crampon_n_1_rel",
            PHON.ONSET con ] ].

cranberry_n1 := n_intr_le &
 [ STEM < "cranberry" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cranberry_n_1_rel",
            PHON.ONSET con ] ].

crane_n1 := n_intr_le &
 [ STEM < "crane" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_crane_n_1_rel",
            PHON.ONSET con ] ].

crane_v1 := v_np_trans_le &
 [ STEM < "crane" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_crane_v_1_rel",
            PHON.ONSET con ] ].

cranny_n1 := n_intr_le &
 [ STEM < "cranny" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cranny_n_1_rel",
            PHON.ONSET con ] ].

crap_n1 := n_mass_count_le &
 [ STEM < "crap" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_crap_n_1_rel",
            PHON.ONSET con ] ].

crappy_adj := adj_intrans_le &
 [ STEM < "crappy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_crappy_a_1_rel",
            PHON.ONSET con ] ].

crash_into_v1 := v_empty_prep_trans_le &
 [ STEM < "crash" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _into_p_sel_rel,
                    KEYREL.PRED "_crash_v_cause-into_rel" ],
            PHON.ONSET con ] ].

crash_into_v2 := v_empty_prep_intrans_le &
 [ STEM < "crash" >,
   SYNSEM [ LKEYS [ --COMPKEY _into_p_sel_rel,
                    KEYREL.PRED "_crash_v_into_rel" ],
            PHON.ONSET con ] ].

crash_n := n_intr_le &
 [ STEM < "crash" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_crash_n_1_rel",
            PHON.ONSET con ] ].

crash_v1 := v_unacc_dir_le &
 [ STEM < "crash" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_crash_v_1_rel",
            PHON.ONSET con ] ].

crash_v2 := v_np_trans_le &
 [ STEM < "crash" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_crash_v_cause_rel",
            PHON.ONSET con ] ].

crave_v1 := v_np_trans_le &
 [ STEM < "crave" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_crave_v_1_rel",
            PHON.ONSET con ] ].

craving_n1 := n_ppcomp_le &
 [ STEM < "craving" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_craving_n_for_rel" ],
            PHON.ONSET con ] ].

crawl_n1 := n_intr_le &
 [ STEM < "crawl" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_crawl_n_1_rel",
            PHON.ONSET con ] ].

crawl_v1 := v_prep_dir_le &
 [ STEM < "crawl" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_crawl_v_dir_rel",
            PHON.ONSET con ] ].

crawl_v2 := v_unerg_le &
 [ STEM < "crawl" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_crawl_v_1_rel",
            PHON.ONSET con ] ].

crawler_n1 := n_intr_le &
 [ STEM < "crawler" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_crawler_n_1_rel",
            PHON.ONSET con ] ].

crayfish_n1 := n_intr_le &
 [ STEM < "crayfish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_crayfish_n_1_rel",
            PHON.ONSET con ] ].

crazy_a1 := adj_intrans_le &
 [ STEM < "crazy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_crazy_a_1_rel",
            PHON.ONSET con ] ].

cream_n1 := n_mass_count_le &
 [ STEM < "cream" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cream_n_1_rel",
            PHON.ONSET con ] ].

crease_n1 := n_intr_le &
 [ STEM < "crease" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_crease_n_1_rel",
            PHON.ONSET con ] ].

crease_v1 := v_unacc_le &
 [ STEM < "crease" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_crease_v_1_rel",
            PHON.ONSET con ] ].

crease_v2 := v_np_trans_le &
 [ STEM < "crease" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_crease_v_cause_rel",
            PHON.ONSET con ] ].

create_v1 := v_np*_trans_le &
 [ STEM < "create" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_create_v_1_rel",
            PHON.ONSET con ] ].

creation_n1 := n_mass_count_ppof_le &
 [ STEM < "creation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_creation_n_of_rel",
            PHON.ONSET con ] ].

creative_a1 := adj_intrans_le &
 [ STEM < "creative" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_creative_a_1_rel",
            PHON.ONSET con ] ].

creator_n1 := n_intr_le &
 [ STEM < "creator" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_creator_n_1_rel",
            PHON.ONSET con ] ].

creature_n1 := n_intr_le &
 [ STEM < "creature" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_creature_n_1_rel",
            PHON.ONSET con ] ].

credit_back_v1 := v_particle_np_le &
 [ STEM < "credit" >,
   SYNSEM [ LKEYS [ --COMPKEY _back_p_sel_rel,
                    KEYREL.PRED "_credit_v_back_rel" ],
            PHON.ONSET con ] ].

credit_back_v2 := v_particle_np_pp_to_le &
 [ STEM < "credit" >,
   SYNSEM [ LKEYS [ --COMPKEY _back_p_sel_rel,
                    KEYREL.PRED "_credit_v_back_rel" ],
            PHON.ONSET con ] ].

credit_n1 := n_mass_count_le &
 [ STEM < "credit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_credit_n_1_rel",
            PHON.ONSET con ] ].

credit_v1 := v_np_prep_trans_le &
 [ STEM < "credit" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _to_p_rel,
                    KEYREL.PRED "_credit_v_1_rel" ],
            PHON.ONSET con ] ].

credit_v2 := v_np_trans_le &
 [ STEM < "credit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_credit_v_1_rel",
            PHON.ONSET con ] ].

credit_v3 := v_np_prep_trans_le &
 [ STEM < "credit" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _for_p_rel,
                    KEYREL.PRED "_credit_v_1_rel" ],
            PHON.ONSET con ] ].

credulity_n1 := n_mass_le &
 [ STEM < "credulity" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_credulity_n_1_rel",
            PHON.ONSET con ] ].

creed_n1 := n_intr_le &
 [ STEM < "creed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_creed_n_1_rel",
            PHON.ONSET con ] ].

creek_n1 := n_intr_le &
 [ STEM < "creek" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_creek_n_1_rel",
            PHON.ONSET con ] ].

creek_post_ttl := n_post_title_le &
 [ STEM < "creek" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_creek_n_1_rel",
            PHON.ONSET con ] ].

creep_n1 := n_intr_le &
 [ STEM < "creep" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_creep_n_1_rel",
            PHON.ONSET con ] ].

creep_v1 := v_prep_dir_le &
 [ STEM < "creep" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_creep_v_1_rel",
            PHON.ONSET con ] ].

creeps_n1 := n_plur_nocmpnd_le &
 [ STEM < "creep" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_creeps_n_1_rel",
            PHON.ONSET con ] ].

crest_n1 := n_proper_le &
 [ STEM < "crest" >,
   SYNSEM [ LKEYS.KEYREL.CARG "crest",
            PHON.ONSET con ] ].

crest_n2 := n_intr_le &
 [ STEM < "crest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_crest_n_1_rel",
            PHON.ONSET con ] ].

crevasse_n1 := n_intr_le &
 [ STEM < "crevasse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_crevasse_n_1_rel",
            PHON.ONSET con ] ].

crevassed_a1 := adj_intrans_le &
 [ STEM < "crevassed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_crevassed_a_1_rel",
            PHON.ONSET con ] ].

crevice_n1 := n_intr_le &
 [ STEM < "crevice" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_crevice_n_1_rel",
            PHON.ONSET con ] ].

crew_n1 := n_ppof_le &
 [ STEM < "crew" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_crew_n_of_rel",
            PHON.ONSET con ] ].

crib_n1 := n_intr_le &
 [ STEM < "crib" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_crib_n_1_rel",
            PHON.ONSET con ] ].

crib_v1 := v_np_trans_le &
 [ STEM < "crib" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_crib_v_1_rel",
            PHON.ONSET con ] ].

cribbage_n1 := n_proper_le &
 [ STEM < "cribbage" >,
   SYNSEM [ LKEYS.KEYREL.CARG "cribbage",
            PHON.ONSET con ] ].

crime_n1 := n_mass_count_le &
 [ STEM < "crime" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_crime_n_1_rel",
            PHON.ONSET con ] ].

criminal_a1 := adj_intrans_le &
 [ STEM < "criminal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_criminal_a_1_rel",
            PHON.ONSET con ] ].

criminal_n1 := n_intr_le &
 [ STEM < "criminal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_criminal_n_1_rel",
            PHON.ONSET con ] ].

crimson_a1 := adj_intrans_le &
 [ STEM < "crimson" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_crimson_a_1_rel",
            PHON.ONSET con ] ].

crimson_n1 := n_mass_count_le &
 [ STEM < "crimson" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_crimson_n_1_rel",
            PHON.ONSET con ] ].

cripple_n1 := n_intr_le &
 [ STEM < "cripple" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cripple_n_1_rel",
            PHON.ONSET con ] ].

cripple_v1 := v_np_trans_le &
 [ STEM < "cripple" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cripple_v_1_rel",
            PHON.ONSET con ] ].

crisis_n1 := n_intr_le &
 [ STEM < "crisis" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_crisis_n_1_rel",
            PHON.ONSET con ] ].

crisp_a1 := adj_intrans_le &
 [ STEM < "crisp" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_crisp_a_1_rel",
            PHON.ONSET con ] ].

crisp_n1 := n_intr_le &
 [ STEM < "crisp" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_crisp_n_1_rel",
            PHON.ONSET con ] ].

crisp_up_v1 := v_particle_np_le &
 [ STEM < "crisp" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_crisp_v_up_rel" ],
            PHON.ONSET con ] ].

crispbread_n1 := n_mass_le &
 [ STEM < "crispbread" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_crispbread_n_1_rel",
            PHON.ONSET con ] ].

crisscross_v1 := v_np_trans_le &
 [ STEM < "crisscross" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_crisscross_v_1_rel",
            PHON.ONSET con ] ].

crisscross_v2 := v_np_trans_le &
 [ STEM < "criss-", "cross" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_crisscross_v_1_rel",
            PHON.ONSET con ] ].

crisscross_v3 := v_np_trans_le &
 [ STEM < "criss", "cross" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_crisscross_v_1_rel",
            PHON.ONSET con ] ].

cristal_n1 := n_proper_le &
 [ STEM < "cristal" >,
   SYNSEM [ LKEYS.KEYREL.CARG "cristal",
            PHON.ONSET con ] ].

criterion_n1 := n_intr_le &
 [ STEM < "criterion" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_criterion_n_1_rel",
            PHON.ONSET con ] ].

critical_isect := adj_intrans_le &
 [ STEM < "critical" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_critical_a_1_rel",
            PHON.ONSET con ] ].

critically := adv_int_vp_le &
 [ STEM < "critically" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_critical_a_1_rel",
            PHON.ONSET con ] ].

criticism_n1 := n_mass_count_le &
 [ STEM < "criticism" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_criticism_n_1_rel",
            PHON.ONSET con ] ].

criticize_v1 := v_empty_prep*_trans_le &
 [ STEM < "criticize" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_criticize_v_for_rel" ],
            PHON.ONSET con ] ].

criticize_v2 := v_unerg_le &
 [ STEM < "criticize" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_criticize_v_1_rel",
            PHON.ONSET con ] ].

critique_n1 := n_ppof_le &
 [ STEM < "critique" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_critique_n_of_rel",
            PHON.ONSET con ] ].

croft_n1 := n_intr_le &
 [ STEM < "croft" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_croft_n_1_rel",
            PHON.ONSET con ] ].

crook_n1 := n_intr_le &
 [ STEM < "crook" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_crook_n_1_rel",
            PHON.ONSET con ] ].

crook_v1 := v_np_trans_le &
 [ STEM < "crook" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_crook_v_1_rel",
            PHON.ONSET con ] ].

crooked_a1 := adj_intrans_le &
 [ STEM < "crooked" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_crooked_a_1_rel",
            PHON.ONSET con ] ].

crop_n1 := n_intr_le &
 [ STEM < "crop" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_crop_n_1_rel",
            PHON.ONSET con ] ].

crop_up_v1 := v_particle_le &
 [ STEM < "crop" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_crop_v_up_rel" ],
            PHON.ONSET con ] ].

crop_v1 := v_np_trans_le &
 [ STEM < "crop" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_crop_v_1_rel",
            PHON.ONSET con ] ].

cross_a1 := adj_intrans_le &
 [ STEM < "cross" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cross_a_with-at_rel",
            PHON.ONSET con ] ].

cross_a2 := adj_trans_oblig_le &
 [ STEM < "cross" >,
   SYNSEM [ LKEYS [ --COMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_cross_a_at-with_rel" ],
            PHON.ONSET con ] ].

cross_a3 := adj_trans_oblig_le &
 [ STEM < "cross" >,
   SYNSEM [ LKEYS [ --COMPKEY _at_p_sel_rel,
                    KEYREL.PRED "_cross_a_at-with_rel" ],
            PHON.ONSET con ] ].

cross_country_adv1 := adv_int_vp_post_le &
 [ STEM < "cross", "country" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cross+country_a_1_rel",
            PHON.ONSET con ] ].

cross_country_adv2 := adv_int_vp_post_le &
 [ STEM < "cross-", "country" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cross+country_a_1_rel",
            PHON.ONSET con ] ].

cross_country_n1 := n_mass_le &
 [ STEM < "cross", "country" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cross+country_n_1_rel",
            PHON.ONSET con ] ].

cross_country_n2 := n_mass_le &
 [ STEM < "cross-", "country" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cross+country_n_1_rel",
            PHON.ONSET con ] ].

cross_n1 := n_intr_le &
 [ STEM < "cross" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cross_n_1_rel",
            PHON.ONSET con ] ].

cross_off_v1 := v_particle_np_le &
 [ STEM < "cross" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_cross_v_off_rel" ],
            PHON.ONSET con ] ].

cross_out_v1 := v_particle_np_le &
 [ STEM < "cross" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_cross_v_out_rel" ],
            PHON.ONSET con ] ].

cross_v1 := v_np_trans_noger_le &
 [ STEM < "cross" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cross_v_1_rel",
            PHON.ONSET con ] ].

cross_v2 := v_prep_dir_le &
 [ STEM < "cross" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cross_v_1_rel",
            PHON.ONSET con ] ].

cross_v3 := v_unerg_le &
 [ STEM < "cross" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cross_v_1_rel",
            PHON.ONSET con ] ].

crossbar_n1 := n_intr_le &
 [ STEM < "crossbar" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_crossbar_n_1_rel",
            PHON.ONSET con ] ].

crossbeam_n1 := n_intr_le &
 [ STEM < "crossbeam" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_crossbeam_n_1_rel",
            PHON.ONSET con ] ].

crossing_n1 := n_intr_le &
 [ STEM < "crossing" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_crossing_n_1_rel",
            PHON.ONSET con ] ].

crossroad_n1 := n_intr_le &
 [ STEM < "crossroad" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_crossroad_n_1_rel",
            PHON.ONSET con ] ].

crosstree_n1 := n_intr_le &
 [ STEM < "crosstree" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_crosstree_n_1_rel",
            PHON.ONSET con ] ].

crosswise_isect := adj_intrans_le &
 [ STEM < "crosswise" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_crosswise_a_1_rel",
            PHON.ONSET con ] ].

crouch_n1 := n_intr_le &
 [ STEM < "crouch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_crouch_n_1_rel",
            PHON.ONSET con ] ].

crouch_v1 := v_unerg_le &
 [ STEM < "crouch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_crouch_v_1_rel",
            PHON.ONSET con ] ].

crow_n1 := n_intr_le &
 [ STEM < "crow" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_crow_n_1_rel",
            PHON.ONSET con ] ].

crow_v1 := v_unerg_le &
 [ STEM < "crow" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_crow_v_1_rel",
            PHON.ONSET con ] ].

crow_v2 := v_cp_prop_non_trans_le &
 [ STEM < "crow" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_crow_v_1_rel",
            PHON.ONSET con ] ].

crowbar_n1 := n_intr_le &
 [ STEM < "crowbar" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_crowbar_n_1_rel",
            PHON.ONSET con ] ].

crowd_n := n_ppof_le &
 [ STEM < "crowd" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_crowd_n_of_rel",
            PHON.ONSET con ] ].

crowd_n2 := n_group_ppof_le &
 [ STEM < "crowd" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_crowd_n_of_rel",
            PHON.ONSET con ] ].

crowd_out_v1 := v_particle_np_le &
 [ STEM < "crowd" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_crowd_v_out_rel" ],
            PHON.ONSET con ] ].

crowd_v1 := v_prep_dir_le &
 [ STEM < "crowd" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_crowd_v_1_rel",
            PHON.ONSET con ] ].

crowd_v2 := v_np_trans_noger_le &
 [ STEM < "crowd" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_crowd_v_1_rel",
            PHON.ONSET con ] ].

crowded_isect := adj_intrans_le &
 [ STEM < "crowded" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_crowded_a_1_rel",
            PHON.ONSET con ] ].

crowfoot_n1 := n_intr_le &
 [ STEM < "crowfoot" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_crowfoot_n_1_rel",
            PHON.ONSET con ] ].

crown_n1 := n_intr_le &
 [ STEM < "crown" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_crown_n_1_rel",
            PHON.ONSET con ] ].

crown_v1 := v_np_trans_le &
 [ STEM < "crown" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_crown_v_1_rel",
            PHON.ONSET con ] ].

crown_v2 := v_ditrans_only_le &
 [ STEM < "crown" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_crown_v_1_rel",
            PHON.ONSET con ] ].

crown_v3 := v_np_as_le &
 [ STEM < "crown" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_crown_v_as_rel",
            PHON.ONSET con ] ].

crucial_a1 := adj_trans_le &
 [ STEM < "crucial" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_crucial_a_for_rel" ],
            PHON.ONSET con ] ].

crucial_a2 := adj_reg_atrans_le &
 [ STEM < "crucial" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_crucial_a_for_rel",
            PHON.ONSET con ] ].

crucial_a3 := adj_reg_atrans_cp_le &
 [ STEM < "crucial" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_crucial_a_for_rel",
            PHON.ONSET con ] ].

crucially_pcisect := adv_int_vp_le &
 [ STEM < "crucially" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_crucial_a_for_rel",
            PHON.ONSET con ] ].

crude_a1 := adj_intrans_le &
 [ STEM < "crude" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_crude_a_1_rel",
            PHON.ONSET con ] ].

crude_n1 := n_mass_le &
 [ STEM < "crude" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_crude_n_1_rel",
            PHON.ONSET con ] ].

crudely_adv := adv_int_vp_le &
 [ STEM < "crudely" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_crude_a_1_rel",
            PHON.ONSET con ] ].

cruel_a1 := adj_intrans_le &
 [ STEM < "cruel" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cruel_a_1_rel",
            PHON.ONSET con ] ].

cruelly := adv_int_vp_le &
 [ STEM < "cruelly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cruel_a_1_rel",
            PHON.ONSET con ] ].

cruise_n1 := n_intr_le &
 [ STEM < "cruise" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cruise_n_1_rel",
            PHON.ONSET con ] ].

cruise_v1 := v_np_trans_noger_le &
 [ STEM < "cruise" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cruise_v_1_rel",
            PHON.ONSET con ] ].

cruise_v2 := v_prep_dir_le &
 [ STEM < "cruise" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cruise_v_1_rel",
            PHON.ONSET con ] ].

crumble_n1 := n_mass_count_le &
 [ STEM < "crumble" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_crumble_n_1_rel",
            PHON.ONSET con ] ].

crumble_v1 := v_np_trans_le &
 [ STEM < "crumble" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_crumble_v_cause_rel",
            PHON.ONSET con ] ].

crumble_v2 := v_unacc_dir_le &
 [ STEM < "crumble" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_crumble_v_1_rel",
            PHON.ONSET con ] ].

crummy_a1 := adj_intrans_le &
 [ STEM < "crummy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_crummy_a_1_rel",
            PHON.ONSET con ] ].

crunch_n1 := n_intr_le &
 [ STEM < "crunch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_crunch_n_1_rel",
            PHON.ONSET con ] ].

crush_n1 := n_intr_le &
 [ STEM < "crush" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_crush_n_1_rel",
            PHON.ONSET con ] ].

crush_v1 := v_np_trans_le &
 [ STEM < "crush" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_crush_v_cause_rel",
            PHON.ONSET con ] ].

crush_v2 := v_unacc_le &
 [ STEM < "crush" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_crush_v_1_rel",
            PHON.ONSET con ] ].

crust_n1 := n_mass_count_le &
 [ STEM < "crust" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_crust_n_1_rel",
            PHON.ONSET con ] ].

crustacean_n1 := n_intr_le &
 [ STEM < "crustacean" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_crustacean_n_1_rel",
            PHON.ONSET con ] ].

cry_for_v1 := v_empty_prep_intrans_le &
 [ STEM < "cry" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_cry_v_for_rel" ],
            PHON.ONSET con ] ].

cry_n1 := n_intr_le &
 [ STEM < "cry" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cry_n_1_rel",
            PHON.ONSET con ] ].

cry_out_v1 := v_particle_le &
 [ STEM < "cry" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_cry_v_out_rel" ],
            PHON.ONSET con ] ].

cry_out_v2 := v_particle_pp_le &
 [ STEM < "cry" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    --OCOMPKEY _for_p_rel,
                    KEYREL.PRED "_cry_v_out_rel" ],
            PHON.ONSET con ] ].

cry_v1 := v_unerg_le &
 [ STEM < "cry" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cry_v_1_rel",
            PHON.ONSET con ] ].

crystal_n1 := n_mass_count_le &
 [ STEM < "crystal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_crystal_n_1_rel",
            PHON.ONSET con ] ].

crystal_n2 := n_proper_le &
 [ STEM < "crystal" >,
   SYNSEM [ LKEYS.KEYREL.CARG "crystal",
            PHON.ONSET con ] ].

crystalization_n1 := n_mass_count_le &
 [ STEM < "crystalization" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_crystalization_n_1_rel",
            PHON.ONSET con ] ].

crystalline_a1 := adj_intrans_le &
 [ STEM < "crystalline" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_crystalline_a_1_rel",
            PHON.ONSET con ] ].

crystallographic_a1 := adj_intrans_le &
 [ STEM < "crystallographic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_crystallographic_a_1_rel",
            PHON.ONSET con ] ].

cs_n1 := n_proper_le &
 [ STEM < "c", "s" >,
   SYNSEM [ LKEYS.KEYREL.CARG "cs",
            PHON.ONSET con ] ].

cs_n2 := n_proper_le &
 [ STEM < "cs" >,
   SYNSEM [ LKEYS.KEYREL.CARG "cs",
            PHON.ONSET con ] ].

cs_n3 := n_proper_le &
 [ STEM < "c-", "s" >,
   SYNSEM [ LKEYS.KEYREL.CARG "cs",
            PHON.ONSET con ] ].

csli_n1 := n_proper_le &
 [ STEM < "csli" >,
   SYNSEM [ LKEYS.KEYREL.CARG "csli",
            PHON.ONSET con ] ].

csr_n1 := n_intr_le &
 [ STEM < "csr" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_csr_n_1_rel",
            PHON.ONSET con ] ].

cuba_n1 := n_proper_le &
 [ STEM < "cuba" >,
   SYNSEM [ LKEYS.KEYREL.CARG "cuba",
            PHON.ONSET con ] ].

cuban_a1 := adj_intrans_le &
 [ STEM < "cuban" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cuban_a_1_rel",
            PHON.ONSET con ] ].

cuban_n1 := n_intr_le &
 [ STEM < "cuban" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cuban_n_1_rel",
            PHON.ONSET con ] ].

cube_n1 := n_intr_le &
 [ STEM < "cube" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cube_n_1_rel",
            PHON.ONSET con ] ].

cube_v1 := v_np_trans_le &
 [ STEM < "cube" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cube_v_1_rel",
            PHON.ONSET con ] ].

cuckoo_a1 := adj_intrans_le &
 [ STEM < "cuckoo" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cuckoo_a_1_rel",
            PHON.ONSET con ] ].

cuckoo_n1 := n_intr_le &
 [ STEM < "cuckoo" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cuckoo_n_1_rel",
            PHON.ONSET con ] ].

cue_i_n1 := n_bare_nomod_le &
 [ STEM < "cue" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cue_n_1_rel",
            PHON.ONSET con ] ].

cue_n1 := n_intr_le &
 [ STEM < "cue" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cue_n_1_rel",
            PHON.ONSET con ] ].

cue_v1 := v_np*_trans_le &
 [ STEM < "cue" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cue_v_1_rel",
            PHON.ONSET con ] ].

cuisine_n1 := n_mass_count_le &
 [ STEM < "cuisine" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cuisine_n_1_rel",
            PHON.ONSET con ] ].

culinary_a1 := adj_intrans_le &
 [ STEM < "culinary" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_culinary_a_1_rel",
            PHON.ONSET con ] ].

cull_n1 := n_intr_le &
 [ STEM < "cull" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cull_n_1_rel",
            PHON.ONSET con ] ].

cull_v1 := v_np_trans_le &
 [ STEM < "cull" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cull_v_1_rel",
            PHON.ONSET con ] ].

culminate_v1 := v_empty_prep_intrans_le &
 [ STEM < "culminate" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_culminate_v_in_rel" ],
            PHON.ONSET con ] ].

culminate_v2 := v_unerg_le &
 [ STEM < "culminate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_culminate_v_1_rel",
            PHON.ONSET con ] ].

cult_n1 := n_intr_le &
 [ STEM < "cult" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cult_n_1_rel",
            PHON.ONSET con ] ].

cultivate_v1 := v_np_trans_le &
 [ STEM < "cultivate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cultivate_v_1_rel",
            PHON.ONSET con ] ].

cultivated_a1 := adj_intrans_le &
 [ STEM < "cultivated" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cultivated_a_1_rel",
            PHON.ONSET con ] ].

cultivation_n1 := n_mass_ppcomp_le &
 [ STEM < "cultivation" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_cultivation_n_of_rel" ],
            PHON.ONSET con ] ].

cultural_isect := adj_intrans_le &
 [ STEM < "cultural" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cultural_a_1_rel",
            PHON.ONSET con ] ].

culturally_isect := adv_int_vp_le &
 [ STEM < "culturally" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cultural_a_1_rel",
            PHON.ONSET con ] ].

culture_n1 := n_mass_count_le &
 [ STEM < "culture" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_culture_n_1_rel",
            PHON.ONSET con ] ].

cumbersome_a1 := adj_intrans_le &
 [ STEM < "cumbersome" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cumbersome_a_1_rel",
            PHON.ONSET con ] ].

cunning_a1 := adj_intrans_le &
 [ STEM < "cunning" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cunning_a_1_rel",
            PHON.ONSET con ] ].

cunning_n1 := n_mass_le &
 [ STEM < "cunning" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cunning_n_1_rel",
            PHON.ONSET con ] ].

cup_n1 := n_ppof_le &
 [ STEM < "cup" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cup_n_of_rel",
            PHON.ONSET con ] ].

cupboard_n1 := n_intr_le &
 [ STEM < "cupboard" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cupboard_n_1_rel",
            PHON.ONSET con ] ].

cupertino_n1 := n_proper_city_le &
 [ STEM < "cupertino" >,
   SYNSEM [ LKEYS.KEYREL.CARG "cupertino",
            PHON.ONSET con ] ].

curate_n1 := n_intr_le &
 [ STEM < "curate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_curate_n_1_rel",
            PHON.ONSET con ] ].

curate_v1 := v_np*_trans_le &
 [ STEM < "curate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_curate_v_1_rel",
            PHON.ONSET con ] ].

curb_n1 := n_intr_le &
 [ STEM < "curb" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_curb_n_1_rel",
            PHON.ONSET con ] ].

curb_v1 := v_np_trans_le &
 [ STEM < "curb" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_curb_v_1_rel",
            PHON.ONSET con ] ].

curd_n1 := n_mass_count_le &
 [ STEM < "curd" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_curd_n_1_rel",
            PHON.ONSET con ] ].

curdle_v1 := v_np_trans_le &
 [ STEM < "curdle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_curdle_v_cause_rel",
            PHON.ONSET con ] ].

curdle_v2 := v_unacc_le &
 [ STEM < "curdle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_curdle_v_1_rel",
            PHON.ONSET con ] ].

cure_n1 := n_intr_le &
 [ STEM < "cure" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cure_n_1_rel",
            PHON.ONSET con ] ].

cure_v1 := v_empty_prep*_trans_le &
 [ STEM < "cure" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_cure_v_of_rel" ],
            PHON.ONSET con ] ].

curfew_n1 := n_intr_le &
 [ STEM < "curfew" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_curfew_n_1_rel",
            PHON.ONSET con ] ].

curie_n1 := n_proper_le &
 [ STEM < "curie" >,
   SYNSEM [ LKEYS.KEYREL.CARG "curie",
            PHON.ONSET con ] ].

curie_n2 := n_intr_le &
 [ STEM < "curie" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_curie_n_1_rel",
            PHON.ONSET con ] ].

curio_n1 := n_intr_le &
 [ STEM < "curio" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_curio_n_1_rel",
            PHON.ONSET con ] ].

curiosity_n1 := n_mass_count_le &
 [ STEM < "curiosity" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_curiosity_n_1_rel",
            PHON.ONSET con ] ].

curious_a1 := adj_trans_le &
 [ STEM < "curious" >,
   SYNSEM [ LKEYS [ --COMPKEY _about_p_sel_rel,
                    KEYREL.PRED "_curious_a_about_rel" ],
            PHON.ONSET con ] ].

curious_a2 := adj_reg_cp_le &
 [ STEM < "curious" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_curious_a_about_rel",
            PHON.ONSET con ] ].

curious_a3 := adj_trans_le &
 [ STEM < "curious" >,
   SYNSEM [ LKEYS [ --COMPKEY _as+to_p_sel_rel,
                    KEYREL.PRED "_curious_a_as+to_rel" ],
            PHON.ONSET con ] ].

curious_a4 := adj_reg_equi_le &
 [ STEM < "curious" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_curious_a_about_rel",
            PHON.ONSET con ] ].

curiously_a1 := adv_int_vp_le &
 [ STEM < "curiously" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_curious_a_about_rel",
            PHON.ONSET con ] ].

curl_n1 := n_intr_le &
 [ STEM < "curl" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_curl_n_1_rel",
            PHON.ONSET con ] ].

curl_v1 := v_unacc_dir_le &
 [ STEM < "curl" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_curl_v_1_rel",
            PHON.ONSET con ] ].

curl_v2 := v_np_trans_le &
 [ STEM < "curl" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_curl_v_cause_rel",
            PHON.ONSET con ] ].

currency_ersatz_n1 := n_numcomp_gen_le &
 [ STEM < "currencyersatz" >,
   SYNSEM.PHON.ONSET con ].

currency_n1 := n_mass_count_le &
 [ STEM < "currency" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_currency_n_1_rel",
            PHON.ONSET con ] ].

currencyersatzarp := n_numcomp_gen_le &
 [ STEM < "currencyersatzarp" >,
   SYNSEM.PHON.ONSET con ].

currencyersatzats := n_numcomp_gen_le &
 [ STEM < "currencyersatzats" >,
   SYNSEM.PHON.ONSET con ].

currencyersatzaud := n_numcomp_gen_le &
 [ STEM < "currencyersatzaud" >,
   SYNSEM.PHON.ONSET con ].

currencyersatzbef := n_numcomp_gen_le &
 [ STEM < "currencyersatzbef" >,
   SYNSEM.PHON.ONSET con ].

currencyersatzbrl := n_numcomp_gen_le &
 [ STEM < "currencyersatzbrl" >,
   SYNSEM.PHON.ONSET con ].

currencyersatzchf := n_numcomp_gen_le &
 [ STEM < "currencyersatzchf" >,
   SYNSEM.PHON.ONSET con ].

currencyersatzclp := n_numcomp_gen_le &
 [ STEM < "currencyersatzclp" >,
   SYNSEM.PHON.ONSET con ].

currencyersatzcnd := n_numcomp_gen_le &
 [ STEM < "currencyersatzcnd" >,
   SYNSEM.PHON.ONSET con ].

currencyersatzcny := n_numcomp_gen_le &
 [ STEM < "currencyersatzcny" >,
   SYNSEM.PHON.ONSET con ].

currencyersatzczk := n_numcomp_gen_le &
 [ STEM < "currencyersatzczk" >,
   SYNSEM.PHON.ONSET con ].

currencyersatzdem := n_numcomp_gen_le &
 [ STEM < "currencyersatzdem" >,
   SYNSEM.PHON.ONSET con ].

currencyersatzdollarsymb := n_numcomp_le &
 [ STEM < "currencyersatzdollarsymb" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dollar_n_1_rel",
            PHON.ONSET con ] ].

currencyersatzegp := n_numcomp_gen_le &
 [ STEM < "currencyersatzegp" >,
   SYNSEM.PHON.ONSET con ].

currencyersatzesp := n_numcomp_gen_le &
 [ STEM < "currencyersatzesp" >,
   SYNSEM.PHON.ONSET con ].

currencyersatzeur := n_numcomp_gen_le &
 [ STEM < "currencyersatzeur" >,
   SYNSEM.PHON.ONSET con ].

currencyersatzfim := n_numcomp_gen_le &
 [ STEM < "currencyersatzfim" >,
   SYNSEM.PHON.ONSET con ].

currencyersatzfrf := n_numcomp_gen_le &
 [ STEM < "currencyersatzfrf" >,
   SYNSEM.PHON.ONSET con ].

currencyersatzgbp := n_numcomp_gen_le &
 [ STEM < "currencyersatzgbp" >,
   SYNSEM.PHON.ONSET con ].

currencyersatzgrd := n_numcomp_gen_le &
 [ STEM < "currencyersatzgrd" >,
   SYNSEM.PHON.ONSET con ].

currencyersatzhkd := n_numcomp_gen_le &
 [ STEM < "currencyersatzhkd" >,
   SYNSEM.PHON.ONSET con ].

currencyersatziep := n_numcomp_gen_le &
 [ STEM < "currencyersatziep" >,
   SYNSEM.PHON.ONSET con ].

currencyersatzils := n_numcomp_gen_le &
 [ STEM < "currencyersatzils" >,
   SYNSEM.PHON.ONSET con ].

currencyersatzinr := n_numcomp_gen_le &
 [ STEM < "currencyersatzinr" >,
   SYNSEM.PHON.ONSET con ].

currencyersatzitl := n_numcomp_gen_le &
 [ STEM < "currencyersatzitl" >,
   SYNSEM.PHON.ONSET con ].

currencyersatzjpy := n_numcomp_gen_le &
 [ STEM < "currencyersatzjpy" >,
   SYNSEM.PHON.ONSET con ].

currencyersatzkrw := n_numcomp_gen_le &
 [ STEM < "currencyersatzkrw" >,
   SYNSEM.PHON.ONSET con ].

currencyersatzmxp := n_numcomp_gen_le &
 [ STEM < "currencyersatzmxp" >,
   SYNSEM.PHON.ONSET con ].

currencyersatzmyr := n_numcomp_gen_le &
 [ STEM < "currencyersatzmyr" >,
   SYNSEM.PHON.ONSET con ].

currencyersatznlg := n_numcomp_gen_le &
 [ STEM < "currencyersatznlg" >,
   SYNSEM.PHON.ONSET con ].

currencyersatznok := n_numcomp_gen_le &
 [ STEM < "currencyersatznok" >,
   SYNSEM.PHON.ONSET con ].

currencyersatznzd := n_numcomp_gen_le &
 [ STEM < "currencyersatznzd" >,
   SYNSEM.PHON.ONSET con ].

currencyersatzpkr := n_numcomp_gen_le &
 [ STEM < "currencyersatzpkr" >,
   SYNSEM.PHON.ONSET con ].

currencyersatzpte := n_numcomp_gen_le &
 [ STEM < "currencyersatzpte" >,
   SYNSEM.PHON.ONSET con ].

currencyersatzsek := n_numcomp_gen_le &
 [ STEM < "currencyersatzsek" >,
   SYNSEM.PHON.ONSET con ].

currencyersatzsgd := n_numcomp_gen_le &
 [ STEM < "currencyersatzsgd" >,
   SYNSEM.PHON.ONSET con ].

currencyersatzsur := n_numcomp_gen_le &
 [ STEM < "currencyersatzsur" >,
   SYNSEM.PHON.ONSET con ].

currencyersatzthb := n_numcomp_gen_le &
 [ STEM < "currencyersatzthb" >,
   SYNSEM.PHON.ONSET con ].

currencyersatztwd := n_numcomp_gen_le &
 [ STEM < "currencyersatztwd" >,
   SYNSEM.PHON.ONSET con ].

currencyersatzusd := n_numcomp_le &
 [ STEM < "currencyersatzusd" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dollar_n_1_rel",
            PHON.ONSET con ] ].

currencyersatzzar := n_numcomp_gen_le &
 [ STEM < "currencyersatzzar" >,
   SYNSEM.PHON.ONSET con ].

current_a1 := adj_intrans_le &
 [ STEM < "current" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_current_a_1_rel",
            PHON.ONSET con ] ].

current_n1 := n_mass_count_le &
 [ STEM < "current" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_current_n_1_rel",
            PHON.ONSET con ] ].

currently_a2 := adv_int_vp_post_le &
 [ STEM < "currently" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_current_a_1_rel",
            PHON.ONSET con ] ].

currently_a3 := adv_int_a_or_p_le &
 [ STEM < "currently" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_current_a_1_rel",
            PHON.ONSET con ] ].

currently_isect := adv_int_vp_aux_le &
 [ STEM < "currently" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_current_a_1_rel",
            PHON.ONSET con ] ].

curriculum_n1 := n_intr_le &
 [ STEM < "curriculum" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_curriculum_n_1_rel",
            PHON.ONSET con ] ].

curry_n1 := n_mass_count_le &
 [ STEM < "curry" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_curry_n_1_rel",
            PHON.ONSET con ] ].

curry_v1 := v_np_trans_le &
 [ STEM < "curry" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_curry_v_1_rel",
            PHON.ONSET con ] ].

curse_n1 := n_intr_le &
 [ STEM < "curse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_curse_n_1_rel",
            PHON.ONSET con ] ].

curse_v1 := v_np*_trans_le &
 [ STEM < "curse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_curse_v_1_rel",
            PHON.ONSET con ] ].

curtail_v1 := v_np_trans_le &
 [ STEM < "curtail" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_curtail_v_1_rel",
            PHON.ONSET con ] ].

curtain_n1 := n_intr_le &
 [ STEM < "curtain" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_curtain_n_1_rel",
            PHON.ONSET con ] ].

curve_n1 := n_intr_le &
 [ STEM < "curve" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_curve_n_1_rel",
            PHON.ONSET con ] ].

curve_v1 := v_unacc_dir_le &
 [ STEM < "curve" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_curve_v_1_rel",
            PHON.ONSET con ] ].

curve_v2 := v_np_trans_le &
 [ STEM < "curve" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_curve_v_cause_rel",
            PHON.ONSET con ] ].

cushion_n1 := n_intr_le &
 [ STEM < "cushion" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cushion_n_1_rel",
            PHON.ONSET con ] ].

cushion_v1 := v_np_trans_le &
 [ STEM < "cushion" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cushion_v_1_rel",
            PHON.ONSET con ] ].

cushman_n1 := n_proper_le &
 [ STEM < "cushman" >,
   SYNSEM [ LKEYS.KEYREL.CARG "cushman",
            PHON.ONSET con ] ].

custody_n1 := n_mass_le &
 [ STEM < "custody" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_custody_n_1_rel",
            PHON.ONSET con ] ].

custom_n1 := n_ppof_nosort_le &
 [ STEM < "custom" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_custom_n_of_rel",
            PHON.ONSET con ] ].

customarily := adv_int_vp_le &
 [ STEM < "customarily" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_customary_a_1_rel",
            PHON.ONSET con ] ].

customary_a1 := adj_intrans_le &
 [ STEM < "customary" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_customary_a_1_rel",
            PHON.ONSET con ] ].

customer_abb_n1 := n_ppof_le &
 [ STEM < "cust" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_customer_n_of_rel",
            PHON.ONSET con ] ].

customer_abb_n2 := n_ppof_le &
 [ STEM < "cust." >,
   SYNSEM [ LKEYS.KEYREL.PRED "_customer_n_of_rel",
            PHON.ONSET con ] ].

customer_n1 := n_ppof_le &
 [ STEM < "customer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_customer_n_of_rel",
            PHON.ONSET con ] ].

customer_ttl := n_title_le &
 [ STEM < "customer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_customer_n_of_rel",
            PHON.ONSET con ] ].

customizable_a1 := adj_trans_le &
 [ STEM < "customizable" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_customizable_a_for_rel" ],
            PHON.ONSET con ] ].

customize_v1 := v_np*_trans_le &
 [ STEM < "customize" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_customize_v_1_rel",
            PHON.ONSET con ] ].

customs_n1 := n_intr_le &
 [ STEM < "customs" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_customs_n_1_rel",
            PHON.ONSET con ] ].

cut_apart_v1 := v_particle_np_le &
 [ STEM < "cut" >,
   SYNSEM [ LKEYS [ --COMPKEY _apart_a_sel_rel,
                    KEYREL.PRED "_cut_v_apart_rel" ],
            PHON.ONSET con ] ].

cut_back_v1 := v_particle_np_le &
 [ STEM < "cut" >,
   SYNSEM [ LKEYS [ --COMPKEY _back_p_sel_rel,
                    KEYREL.PRED "_cut_v_back_rel" ],
            PHON.ONSET con ] ].

cut_back_v2 := v_particle_pp_le &
 [ STEM < "cut" >,
   SYNSEM [ LKEYS [ --COMPKEY _back_p_sel_rel,
                    --OCOMPKEY _on_p_rel,
                    KEYREL.PRED "_cut_v_back_rel" ],
            PHON.ONSET con ] ].

cut_back_v3 := v_particle_le &
 [ STEM < "cut" >,
   SYNSEM [ LKEYS [ --COMPKEY _back_p_sel_rel,
                    KEYREL.PRED "_cut_v_back_rel" ],
            PHON.ONSET con ] ].

cut_down_v1 := v_particle_np_le &
 [ STEM < "cut" >,
   SYNSEM [ LKEYS [ --COMPKEY _down_p_sel_rel,
                    KEYREL.PRED "_cut_v_down_rel" ],
            PHON.ONSET con ] ].

cut_down_v2 := v_particle_pp_le &
 [ STEM < "cut" >,
   SYNSEM [ LKEYS [ --COMPKEY _down_p_sel_rel,
                    --OCOMPKEY _on_p_rel,
                    KEYREL.PRED "_cut_v_down_rel" ],
            PHON.ONSET con ] ].

cut_down_v3 := v_particle_le &
 [ STEM < "cut" >,
   SYNSEM [ LKEYS [ --COMPKEY _down_p_sel_rel,
                    KEYREL.PRED "_cut_v_down_rel" ],
            PHON.ONSET con ] ].

cut_in_v1 := v_particle_np_le &
 [ STEM < "cut" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_cut_v_in_rel" ],
            PHON.ONSET con ] ].

cut_into_v1 := v_prep_intrans_le &
 [ STEM < "cut" >,
   SYNSEM [ LKEYS [ --COMPKEY _into_p_rel,
                    KEYREL.PRED "_cut_v_1_rel" ],
            PHON.ONSET con ] ].

cut_n1 := n_intr_le &
 [ STEM < "cut" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cut_n_1_rel",
            PHON.ONSET con ] ].

cut_off_n1 := n_intr_le &
 [ STEM < "cut", "off" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cut+off_n_1_rel",
            PHON.ONSET con ] ].

cut_off_n2 := n_intr_le &
 [ STEM < "cut-", "off" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cut+off_n_1_rel",
            PHON.ONSET con ] ].

cut_off_v1 := v_particle_np_le &
 [ STEM < "cut" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_cut_v_off_rel" ],
            PHON.ONSET con ] ].

cut_out_v1 := v_particle_np_le &
 [ STEM < "cut" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_cut_v_out_rel" ],
            PHON.ONSET con ] ].

cut_prd := v_obj_equi_prd_adj_le &
 [ STEM < "cut" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cut_v_1_rel",
            PHON.ONSET con ] ].

cut_short_v1 := v_particle_np_le &
 [ STEM < "cut" >,
   SYNSEM [ LKEYS [ --COMPKEY _short_a_sel_rel,
                    KEYREL.PRED "_cut_v_short_rel" ],
            PHON.ONSET con ] ].

cut_up_v1 := v_particle_np_le &
 [ STEM < "cut" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_cut_v_up_rel" ],
            PHON.ONSET con ] ].

cut_v1 := v_np*_trans_le &
 [ STEM < "cut" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cut_v_1_rel",
            PHON.ONSET con ] ].

cute_adj := adj_intrans_le &
 [ STEM < "cute" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cute_a_1_rel",
            PHON.ONSET con ] ].

cutlery_n1 := n_mass_le &
 [ STEM < "cutlery" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cutlery_n_1_rel",
            PHON.ONSET con ] ].

cutter_n1 := n_intr_le &
 [ STEM < "cutter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cutter_n_1_rel",
            PHON.ONSET con ] ].

cuttlefish_n1 := n_intr_le &
 [ STEM < "cuttlefish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cuttlefish_n_1_rel",
            PHON.ONSET con ] ].

cuz_subconj := p_subconj_le &
 [ STEM < "cuz" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_because_x_rel",
            PHON.ONSET con ] ].

cyberspace_n1 := n_mass_count_le &
 [ STEM < "cyberspace" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cyberspace_n_1_rel",
            PHON.ONSET con ] ].

cycle_n1 := n_intr_le &
 [ STEM < "cycle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cycle_n_1_rel",
            PHON.ONSET con ] ].

cycle_v1 := v_prep_dir_le &
 [ STEM < "cycle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cycle_v_1_rel",
            PHON.ONSET con ] ].

cycling_n1 := n_mass_le &
 [ STEM < "cycling" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cycling_n_1_rel",
            PHON.ONSET con ] ].

cyclist_n1 := n_intr_le &
 [ STEM < "cyclist" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cyclist_n_1_rel",
            PHON.ONSET con ] ].

cyert_n1 := n_proper_le &
 [ STEM < "cyert" >,
   SYNSEM [ LKEYS.KEYREL.CARG "cyert",
            PHON.ONSET con ] ].

cylinder_n1 := n_intr_le &
 [ STEM < "cylinder" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cylinder_n_1_rel",
            PHON.ONSET con ] ].

cylindrical_a1 := adj_intrans_le &
 [ STEM < "cylindrical" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cylindrical_a_1_rel",
            PHON.ONSET con ] ].

cypress_n1 := n_mass_count_le &
 [ STEM < "cypress" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cypress_n_1_rel",
            PHON.ONSET con ] ].

czerczinsky_n1 := n_proper_le &
 [ STEM < "czerczinsky" >,
   SYNSEM [ LKEYS.KEYREL.CARG "czerczinsky",
            PHON.ONSET con ] ].

d2_n1 := n_intr_le &
 [ STEM < "d2" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_d2_n_1_rel",
            PHON.ONSET con ] ].

d_np1 := n_proper_le &
 [ STEM < "_d" >,
   SYNSEM [ LKEYS.KEYREL.CARG "d",
            PHON.ONSET con ] ].

d_period_np1 := n_proper_le &
 [ STEM < "d." >,
   SYNSEM [ LKEYS.KEYREL.CARG "d",
            PHON.ONSET con ] ].

d_period_np2 := n_proper_le &
 [ STEM < "_d." >,
   SYNSEM [ LKEYS.KEYREL.CARG "d",
            PHON.ONSET con ] ].

da_cheng_n1 := n_proper_le &
 [ STEM < "da", "cheng" >,
   SYNSEM [ LKEYS.KEYREL.CARG "da_cheng",
            PHON.ONSET con ] ].

da_vinci_n1 := n_proper_le &
 [ STEM < "da", "vinci" >,
   SYNSEM [ LKEYS.KEYREL.CARG "da_vinci",
            PHON.ONSET con ] ].

dabaishu_n1 := n_proper_le &
 [ STEM < "dabaishu" >,
   SYNSEM [ LKEYS.KEYREL.CARG "dabaishu",
            PHON.ONSET con ] ].

dad_n1 := n_intr_le &
 [ STEM < "dad" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dad_n_1_rel",
            PHON.ONSET con ] ].

dad_n2 := n_proper_le &
 [ STEM < "dad" >,
   SYNSEM [ LKEYS.KEYREL.CARG "dad",
            PHON.ONSET con ] ].

daddy_n1 := n_intr_le &
 [ STEM < "daddy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_daddy_n_1_rel",
            PHON.ONSET con ] ].

daddy_n2 := n_proper_le &
 [ STEM < "daddy" >,
   SYNSEM [ LKEYS.KEYREL.CARG "daddy",
            PHON.ONSET con ] ].

daffodil_n1 := n_intr_le &
 [ STEM < "daffodil" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_daffodil_n_1_rel",
            PHON.ONSET con ] ].

daguangming_n1 := n_proper_le &
 [ STEM < "daguangming" >,
   SYNSEM [ LKEYS.KEYREL.CARG "daguangming",
            PHON.ONSET con ] ].

dai_sun_n1 := n_proper_le &
 [ STEM < "dai", "sun" >,
   SYNSEM [ LKEYS.KEYREL.CARG "dai_sun",
            PHON.ONSET con ] ].

daily_a1 := adj_intrans_le &
 [ STEM < "daily" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_daily_a_1_rel",
            PHON.ONSET con ] ].

daily_adv1 := adv_int_vp_post_le &
 [ STEM < "daily" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_daily_a_1_rel",
            PHON.ONSET con ] ].

dairy_n1 := n_intr_le &
 [ STEM < "dairy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dairy_n_1_rel",
            PHON.ONSET con ] ].

dairying_n1 := n_mass_le &
 [ STEM < "dairying" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dairying_n_1_rel",
            PHON.ONSET con ] ].

dairymaid_n1 := n_intr_le &
 [ STEM < "dairymaid" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dairymaid_n_1_rel",
            PHON.ONSET con ] ].

dais_n1 := n_intr_le &
 [ STEM < "dais" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dais_n_1_rel",
            PHON.ONSET con ] ].

daisy_n1 := n_intr_le &
 [ STEM < "daisy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_daisy_n_1_rel",
            PHON.ONSET con ] ].

dajing_n1 := n_proper_le &
 [ STEM < "dajing" >,
   SYNSEM [ LKEYS.KEYREL.CARG "dajing",
            PHON.ONSET con ] ].

dalen_n1 := n_proper_le &
 [ STEM < "dalen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "dalen",
            PHON.ONSET con ] ].

dalesman_n1 := n_intr_le &
 [ STEM < "dalesman" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dalesman_n_1_rel",
            PHON.ONSET con ] ].

dallas_n1 := n_proper_city_le &
 [ STEM < "dallas" >,
   SYNSEM [ LKEYS.KEYREL.CARG "dallas",
            PHON.ONSET con ] ].

dalu_xincun_n1 := n_proper_le &
 [ STEM < "dalu", "xincun" >,
   SYNSEM [ LKEYS.KEYREL.CARG "dalu_xincun",
            PHON.ONSET con ] ].

dam_n1 := n_intr_le &
 [ STEM < "dam" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dam_n_1_rel",
            PHON.ONSET con ] ].

dam_up_v1 := v_particle_np_le &
 [ STEM < "dam" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_dam_v_up_rel" ],
            PHON.ONSET con ] ].

dam_v1 := v_np_trans_le &
 [ STEM < "dam" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dam_v_1_rel",
            PHON.ONSET con ] ].

damage_n1 := n_mass_ppcomp_le &
 [ STEM < "damage" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_damage_n_to_rel" ],
            PHON.ONSET con ] ].

damage_v1 := v_np_trans_le &
 [ STEM < "damage" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_damage_v_1_rel",
            PHON.ONSET con ] ].

damages_n1 := n_plur_le &
 [ STEM < "damage" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_damages_n_1_rel",
            PHON.ONSET con ] ].

damask_n1 := n_mass_count_le &
 [ STEM < "damask" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_damask_n_1_rel",
            PHON.ONSET con ] ].

damaskeen_n1 := n_mass_count_le &
 [ STEM < "damaskeen" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_damaskeen_n_1_rel",
            PHON.ONSET con ] ].

dame_n1 := n_intr_le &
 [ STEM < "dame" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dame_n_1_rel",
            PHON.ONSET con ] ].

dame_ttl := n_title_le &
 [ STEM < "dame" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dame_n_1_rel",
            PHON.ONSET con ] ].

dammtor := n_proper_city_le &
 [ STEM < "dammtor" >,
   SYNSEM [ LKEYS.KEYREL.CARG "dammtor",
            PHON.ONSET con ] ].

damn_n1 := n_intr_le &
 [ STEM < "damn" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_damn_n_1_rel",
            PHON.ONSET con ] ].

damn_v1 := v_to*_trans_le &
 [ STEM < "damn" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_damn_v_to_rel",
            PHON.ONSET con ] ].

damp_a1 := adj_intrans_le &
 [ STEM < "damp" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_damp_a_1_rel",
            PHON.ONSET con ] ].

damp_a2 := adj_atrans_le &
 [ STEM < "damp" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_damp_a_1_rel",
            PHON.ONSET con ] ].

damp_down_v1 := v_particle_np_le &
 [ STEM < "damp" >,
   SYNSEM [ LKEYS [ --COMPKEY _down_p_sel_rel,
                    KEYREL.PRED "_damp_v_down_rel" ],
            PHON.ONSET con ] ].

damp_n1 := n_mass_no_cmpnd_le &
 [ STEM < "damp" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_damp_n_1_rel",
            PHON.ONSET con ] ].

damp_out_v1 := v_particle_np_le &
 [ STEM < "damp" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_damp_v_out_rel" ],
            PHON.ONSET con ] ].

damp_v1 := v_np_trans_le &
 [ STEM < "damp" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_damp_v_1_rel",
            PHON.ONSET con ] ].

dampness_n1 := n_mass_le &
 [ STEM < "dampness" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dampness_n_1_rel",
            PHON.ONSET con ] ].

dan_n1 := n_proper_le &
 [ STEM < "dan" >,
   SYNSEM [ LKEYS.KEYREL.CARG "dan",
            PHON.ONSET con ] ].

dana_n1 := n_proper_le &
 [ STEM < "dana" >,
   SYNSEM [ LKEYS.KEYREL.CARG "dana",
            PHON.ONSET con ] ].

dance_n1 := n_mass_count_le &
 [ STEM < "dance" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dance_n_1_rel",
            PHON.ONSET con ] ].

dance_v1 := v_np*_trans_le &
 [ STEM < "dance" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dance_v_1_rel",
            PHON.ONSET con ] ].

dancehall_n1 := n_intr_le &
 [ STEM < "dancehall" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dancehall_n_1_rel",
            PHON.ONSET con ] ].

dancehall_post_ttl := n_post_title_le &
 [ STEM < "dancehall" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dancehall_n_1_rel",
            PHON.ONSET con ] ].

dang_a1 := adj_intrans_le &
 [ STEM < "dang" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dang_a_1_rel",
            PHON.ONSET con ] ].

dang_root_post := adv_s_post_word_nospec_le &
 [ STEM < "dang" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dang_a_1_rel",
            PHON.ONSET con ] ].

dang_root_pre := adv_s_pre_word_root_le &
 [ STEM < "dang" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dang_a_1_rel",
            PHON.ONSET con ] ].

danger_n1 := n_mass_count_le &
 [ STEM < "danger" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_danger_n_1_rel",
            PHON.ONSET con ] ].

dangerous_a1 := adj_intrans_le &
 [ STEM < "dangerous" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dangerous_a_1_rel",
            PHON.ONSET con ] ].

dangle_v1 := v_np_trans_noger_le &
 [ STEM < "dangle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dangle_v_cause_rel",
            PHON.ONSET con ] ].

dangle_v2 := v_unacc_le &
 [ STEM < "dangle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dangle_v_1_rel",
            PHON.ONSET con ] ].

danish_a1 := adj_intrans_le &
 [ STEM < "danish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_danish_a_1_rel",
            PHON.ONSET con ] ].

danish_n1 := n_proper_le &
 [ STEM < "danish" >,
   SYNSEM [ LKEYS.KEYREL.CARG "danish",
            PHON.ONSET con ] ].

danish_n2 := n_intr_le &
 [ STEM < "danish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_danish_n_1_rel",
            PHON.ONSET con ] ].

danny_n1 := n_proper_le &
 [ STEM < "danny" >,
   SYNSEM [ LKEYS.KEYREL.CARG "danny",
            PHON.ONSET con ] ].

danube_n1 := n_proper_le &
 [ STEM < "danube" >,
   SYNSEM [ LKEYS.KEYREL.CARG "danube",
            PHON.ONSET con ] ].

danza_n1 := n_proper_le &
 [ STEM < "danza" >,
   SYNSEM [ LKEYS.KEYREL.CARG "danza",
            PHON.ONSET con ] ].

daoguang_n1 := n_proper_le &
 [ STEM < "daoguang" >,
   SYNSEM [ LKEYS.KEYREL.CARG "daoguang",
            PHON.ONSET con ] ].

dare_aux_neg_1 := va_modal_neg_le &
 [ STEM < "daren't" >,
   SYNSEM [ LKEYS.KEYREL.PRED _dare_v_modal_rel,
            PHON.ONSET con ] ].

dare_aux_neg_2 := va_modal_neg_le &
 [ STEM < "daren", "'t" >,
   SYNSEM [ LKEYS.KEYREL.PRED _dare_v_modal_rel,
            PHON.ONSET con ] ].

dare_aux_pos := va_modal_pos_le &
 [ STEM < "dare" >,
   SYNSEM [ LKEYS.KEYREL.PRED _dare_v_modal_rel,
            PHON.ONSET con ] ].

dare_v1 := v_subj_equi_le &
 [ STEM < "dare" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dare_v_1_rel",
            PHON.ONSET con ] ].

dare_v2 := v_obj_equi_le &
 [ STEM < "dare" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dare_v_1_rel",
            PHON.ONSET con ] ].

dare_v3 := v_np_trans_le &
 [ STEM < "dare" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dare_v_1_rel",
            PHON.ONSET con ] ].

dare_v4 := v_subj_equi_bse_le &
 [ STEM < "dare" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dare_v_1_rel",
            PHON.ONSET con ] ].

dark_isect := adj_intrans_le &
 [ STEM < "dark" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dark_a_1_rel",
            PHON.ONSET con ] ].

dark_n1 := n_intr_le &
 [ STEM < "dark" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dark_n_1_rel",
            PHON.ONSET con ] ].

darken_v1 := v_np_trans_noger_le &
 [ STEM < "darken" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_darken_v_cause_rel",
            PHON.ONSET con ] ].

darken_v2 := v_unacc_le &
 [ STEM < "darken" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_darken_v_1_rel",
            PHON.ONSET con ] ].

darker := adj_comp_le &
 [ STEM < "darker" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dark_a_1_rel",
            PHON.ONSET con ] ].

darkest_a1 := adj_superl_le &
 [ STEM < "darkest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dark_a_1_rel",
            PHON.ONSET con ] ].

darkly := adv_int_vp_le &
 [ STEM < "darkly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dark_a_1_rel",
            PHON.ONSET con ] ].

darkness_n1 := n_mass_le &
 [ STEM < "darkness" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_darkness_n_1_rel",
            PHON.ONSET con ] ].

darlene_n1 := n_proper_le &
 [ STEM < "darlene" >,
   SYNSEM [ LKEYS.KEYREL.CARG "darlene",
            PHON.ONSET con ] ].

darling_a1 := adj_intrans_le &
 [ STEM < "darling" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_darling_a_1_rel",
            PHON.ONSET con ] ].

darling_n1 := n_intr_le &
 [ STEM < "darling" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_darling_n_1_rel",
            PHON.ONSET con ] ].

darmstadt_n1 := n_proper_city_le &
 [ STEM < "darmstadt" >,
   SYNSEM [ LKEYS.KEYREL.CARG "darmstadt",
            PHON.ONSET con ] ].

darn_a1 := adj_intrans_le &
 [ STEM < "darn" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_darn_a_1_rel",
            PHON.ONSET con ] ].

darn_root_post := adv_s_post_word_nospec_le &
 [ STEM < "darn" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_darn_a_1_rel",
            PHON.ONSET con ] ].

darn_root_pre := adv_s_pre_word_root_le &
 [ STEM < "darn" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_darn_a_1_rel",
            PHON.ONSET con ] ].

darned_a1 := adj_intrans_le &
 [ STEM < "darned" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_darned_a_1_rel",
            PHON.ONSET con ] ].

dart_n1 := n_intr_le &
 [ STEM < "dart" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dart_n_1_rel",
            PHON.ONSET con ] ].

dart_v1 := v_prep_dir_le &
 [ STEM < "dart" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dart_v_1_rel",
            PHON.ONSET con ] ].

darth_vader_n1 := n_proper_le &
 [ STEM < "darth", "vader" >,
   SYNSEM [ LKEYS.KEYREL.CARG "darth_vader",
            PHON.ONSET con ] ].

dartmouth_n1 := n_proper_city_le &
 [ STEM < "dartmouth" >,
   SYNSEM [ LKEYS.KEYREL.CARG "dartmouth",
            PHON.ONSET con ] ].

dash_n1 := n_intr_le &
 [ STEM < "dash" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dash_n_1_rel",
            PHON.ONSET con ] ].

dash_s_root_pre := adv_disc_preh_le &
 [ STEM < "-" >,
   SYNSEM [ LKEYS.KEYREL.CARG "s-dash",
            PHON.ONSET onset ] ].

dash_v1 := v_prep_dir_le &
 [ STEM < "dash" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dash_v_1_rel",
            PHON.ONSET con ] ].

dash_v2 := v_np_trans_noger_le &
 [ STEM < "dash" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dash_v_2_rel",
            PHON.ONSET con ] ].

dashijie_n1 := n_proper_le &
 [ STEM < "dashijie" >,
   SYNSEM [ LKEYS.KEYREL.CARG "dashijie",
            PHON.ONSET con ] ].

data_n1 := n_mass_le &
 [ STEM < "data" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_data_n_1_rel",
            PHON.ONSET con ] ].

database_n1 := n_ppof_le &
 [ STEM < "database" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_database_n_of_rel",
            PHON.ONSET con ] ].

date_back_v1 := v_particle_pp_le &
 [ STEM < "date" >,
   SYNSEM [ LKEYS [ --COMPKEY _back_p_sel_rel,
                    --OCOMPKEY _to_p_rel,
                    KEYREL.PRED "_date_v_back_rel" ],
            PHON.ONSET con ] ].

date_from_v1 := v_empty_prep_intrans_le &
 [ STEM < "date" >,
   SYNSEM [ LKEYS [ --COMPKEY _from_p_sel_rel,
                    KEYREL.PRED "_date_v_from_rel" ],
            PHON.ONSET con ] ].

date_n1 := n_temp_ppcomp_day_le &
 [ STEM < "date" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_date_n_of_rel",
            PHON.ONSET con ] ].

date_v1 := v_ditrans_only_le &
 [ STEM < "date" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_date_v_1_rel",
            PHON.ONSET con ] ].

date_v2 := v_np*_trans_le &
 [ STEM < "date" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_date_v_1_rel",
            PHON.ONSET con ] ].

dative_n1 := n_mass_count_le &
 [ STEM < "dative" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dative_n_1_rel",
            PHON.ONSET con ] ].

datum_n1 := n_intr_le &
 [ STEM < "datum" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_data_n_1_rel",
            PHON.ONSET con ] ].

daughter_n1 := n_intr_le &
 [ STEM < "daughter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_daughter_n_1_rel",
            PHON.ONSET con ] ].

daunt_v1 := v_np_trans_le &
 [ STEM < "daunt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_daunt_v_1_rel",
            PHON.ONSET con ] ].

dave_n1 := n_proper_le &
 [ STEM < "dave" >,
   SYNSEM [ LKEYS.KEYREL.CARG "dave",
            PHON.ONSET con ] ].

david_n1 := n_proper_le &
 [ STEM < "david" >,
   SYNSEM [ LKEYS.KEYREL.CARG "david",
            PHON.ONSET con ] ].

davies_n1 := n_proper_le &
 [ STEM < "davies" >,
   SYNSEM [ LKEYS.KEYREL.CARG "davies",
            PHON.ONSET con ] ].

dawn := n_hour_le &
 [ STEM < "dawn" >,
   SYNSEM [ LKEYS.KEYREL.CARG "dawn",
            PHON.ONSET con ] ].

dawn_n2 := n_intr_le &
 [ STEM < "dawn" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dawn_n_1_rel",
            PHON.ONSET con ] ].

daxin_n1 := n_proper_le &
 [ STEM < "daxin" >,
   SYNSEM [ LKEYS.KEYREL.CARG "daxin",
            PHON.ONSET con ] ].

day-long_a1 := adj_attr_intrans_le &
 [ STEM < "day", "long" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_day+long_a_1_rel",
            PHON.ONSET con ] ].

day-long_a2 := adj_attr_intrans_le &
 [ STEM < "day-", "long" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_day+long_a_1_rel",
            PHON.ONSET con ] ].

day_before_easter_hd := n_holiday_le &
 [ STEM < "day", "before", "easter" >,
   SYNSEM [ LKEYS.KEYREL.CARG "day_before_easter",
            PHON.ONSET con ] ].

day_dream_v1 := v_unerg_le &
 [ STEM < "day", "dream" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_day_v_dream_rel",
            PHON.ONSET con ] ].

day_dream_v2 := v_unerg_le &
 [ STEM < "day-", "dream" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_day_v_dream_rel",
            PHON.ONSET con ] ].

day_n := n_temp_ppcomp_day_le &
 [ STEM < "day" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_day_n_of_rel",
            PHON.ONSET con ] ].

day_title := n_title_le &
 [ STEM < "day" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_day_n_of_rel",
            PHON.ONSET con ] ].

day_to_day_a1 := adj_intrans_le &
 [ STEM < "day", "to", "day" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_day+to+day_a_1_rel",
            PHON.ONSET con ] ].

day_to_day_a2 := adj_intrans_le &
 [ STEM < "day-", "to-", "day" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_day+to+day_a_1_rel",
            PHON.ONSET con ] ].

day_to_day_adv1 := adv_int_vp_post_le &
 [ STEM < "day", "to", "day" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_day+to+day_a_1_rel",
            PHON.ONSET con ] ].

day_to_day_adv2 := adv_int_vp_post_le &
 [ STEM < "day-", "to-", "day" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_day+to+day_a_1_rel",
            PHON.ONSET con ] ].

daybreak := n_hour_le &
 [ STEM < "daybreak" >,
   SYNSEM [ LKEYS.KEYREL.CARG "daybreak",
            PHON.ONSET con ] ].

daydream_v1 := v_unerg_le &
 [ STEM < "daydream" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_day_v_dream_rel",
            PHON.ONSET con ] ].

daylight_n1 := n_mass_count_le &
 [ STEM < "daylight" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_daylight_n_1_rel",
            PHON.ONSET con ] ].

days-long_a1 := adj_intrans_le &
 [ STEM < "days", "long" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_day+long_a_1_rel",
            PHON.ONSET con ] ].

days-long_a2 := adj_intrans_le &
 [ STEM < "days-", "long" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_day+long_a_1_rel",
            PHON.ONSET con ] ].

daytime_n1 := n_intr_le &
 [ STEM < "daytime" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_daytime_n_1_rel",
            PHON.ONSET con ] ].

daytrip_n1 := n_intr_le &
 [ STEM < "daytrip" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_daytrip_n_1_rel",
            PHON.ONSET con ] ].

dazzle_n1 := n_mass_le &
 [ STEM < "dazzle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dazzle_n_1_rel",
            PHON.ONSET con ] ].

dazzle_v1 := v_np*_trans_le &
 [ STEM < "dazzle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dazzle_v_1_rel",
            PHON.ONSET con ] ].

dbl_dash_s_root_pre := adv_disc_preh_le &
 [ STEM < "__" >,
   SYNSEM [ LKEYS.KEYREL.CARG "s-dash",
            PHON.ONSET onset ] ].

dbl_hyphen_punct := punct_dbl_hyphen_le &
 [ STEM < "__" >,
   SYNSEM.PHON.ONSET onset ].

dc4800_n1 := n_intr_le &
 [ STEM < "dc4800" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dc4800_n_1_rel",
            PHON.ONSET con ] ].

de_beers_n1 := n_proper_le &
 [ STEM < "de", "beers" >,
   SYNSEM [ LKEYS.KEYREL.CARG "de_beers",
            PHON.ONSET con ] ].

deacon_n1 := n_intr_le &
 [ STEM < "deacon" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_deacon_n_1_rel",
            PHON.ONSET con ] ].

deactivate_v1 := v_np_trans_le &
 [ STEM < "deactivate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_deactivate_v_1_rel",
            PHON.ONSET con ] ].

deactivate_v2 := v_np_trans_le &
 [ STEM < "de", "activate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_deactivate_v_1_rel",
            PHON.ONSET con ] ].

dead_a1 := adj_intrans_le &
 [ STEM < "dead" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dead_a_1_rel",
            PHON.ONSET con ] ].

dead_n1 := n_intr_le &
 [ STEM < "dead" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dead_n_1_rel",
            PHON.ONSET con ] ].

dead_poets_society_n1 := n_proper_le &
 [ STEM < "dead", "poets", "society" >,
   SYNSEM [ LKEYS.KEYREL.CARG "dead_poets_society",
            PHON.ONSET con ] ].

dead_poets_society_n2 := n_proper_le &
 [ STEM < "dead", "poet", "'s", "society" >,
   SYNSEM [ LKEYS.KEYREL.CARG "dead_poets_society",
            PHON.ONSET con ] ].

deadline_n1 := n_ppof_le &
 [ STEM < "deadline" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_deadline_n_of_rel",
            PHON.ONSET con ] ].

deadly_isect := adj_intrans_le &
 [ STEM < "deadly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_deadly_a_1_rel",
            PHON.ONSET con ] ].

deal_in_v1 := v_empty_prep_intrans_le &
 [ STEM < "deal" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_deal_v_in_rel" ],
            PHON.ONSET con ] ].

deal_n1 := n_mass_count_le &
 [ STEM < "deal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_deal_n_1_rel",
            PHON.ONSET con ] ].

deal_v1 := v_np_trans_le &
 [ STEM < "deal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_deal_v_1_rel",
            PHON.ONSET con ] ].

deal_v2 := v_ditrans_le &
 [ STEM < "deal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_deal_v_1_rel",
            PHON.ONSET con ] ].

deal_with_v1 := v_empty_prep_intrans_le &
 [ STEM < "deal" >,
   SYNSEM [ LKEYS [ --COMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_deal_v_with_rel" ],
            PHON.ONSET con ] ].

dealer_n1 := n_intr_le &
 [ STEM < "dealer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dealer_n_1_rel",
            PHON.ONSET con ] ].

dear_a1 := adj_intrans_le &
 [ STEM < "dear" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dear_a_1_rel",
            PHON.ONSET con ] ].

dear_post_ttl := n_post_title_le &
 [ STEM < "dear" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dear_n_1_rel",
            PHON.ONSET con ] ].

dear_root_post := adv_disc_posth_le &
 [ STEM < "dear" >,
   SYNSEM [ LKEYS.KEYREL.CARG "dear",
            PHON.ONSET con ] ].

dear_root_pre := adv_disc_preh_le &
 [ STEM < "dear" >,
   SYNSEM [ LKEYS.KEYREL.CARG "dear",
            PHON.ONSET con ] ].

dearth_n1 := n_intr_sg_le &
 [ STEM < "dearth" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dearth_n_1_rel",
            PHON.ONSET con ] ].

death_n1 := n_mass_count_le &
 [ STEM < "death" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_death_n_1_rel",
            PHON.ONSET con ] ].

deathless_a1 := adj_intrans_le &
 [ STEM < "deathless" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_deathless_a_1_rel",
            PHON.ONSET con ] ].

deathly_a1 := adj_intrans_le &
 [ STEM < "deathly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_deathly_a_1_rel",
            PHON.ONSET con ] ].

debark_v1 := v_np*_trans_le &
 [ STEM < "debark" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_debark_v_1_rel",
            PHON.ONSET con ] ].

debatable_a1 := adj_intrans_le &
 [ STEM < "debatable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_debatable_a_1_rel",
            PHON.ONSET con ] ].

debate_n := n_mass_count_le &
 [ STEM < "debate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_debate_n_1_rel",
            PHON.ONSET con ] ].

debate_v1 := v_np*_trans_le &
 [ STEM < "debate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_debate_v_1_rel",
            PHON.ONSET con ] ].

debate_v2 := v_cp_ques_fin_inf_non_trans_le &
 [ STEM < "debate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_debate_v_1_rel",
            PHON.ONSET con ] ].

debbie := n_proper_le &
 [ STEM < "debbie" >,
   SYNSEM [ LKEYS.KEYREL.CARG "debbie",
            PHON.ONSET con ] ].

debit_n1 := n_intr_le &
 [ STEM < "debit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_debit_n_1_rel",
            PHON.ONSET con ] ].

debit_v1 := v_np_trans_le &
 [ STEM < "debit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_debit_v_1_rel",
            PHON.ONSET con ] ].

debris_n1 := n_mass_le &
 [ STEM < "debris" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_debris_n_1_rel",
            PHON.ONSET con ] ].

debt_n1 := n_mass_count_le &
 [ STEM < "debt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_debt_n_1_rel",
            PHON.ONSET con ] ].

debtor_n1 := n_intr_le &
 [ STEM < "debtor" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_debtor_n_1_rel",
            PHON.ONSET con ] ].

debussy_n1 := n_proper_le &
 [ STEM < "debussy" >,
   SYNSEM [ LKEYS.KEYREL.CARG "debussy",
            PHON.ONSET con ] ].

decade_ersatz_n1 := n_plur_xmod_le &
 [ STEM < "decadeersatz" >,
   SYNSEM [ LKEYS.KEYREL.CARG "10",
            PHON.ONSET con ] ].

decade_gle := n_plur_xmod_le &
 [ STEM < "_decade_" >,
   SYNSEM [ LKEYS.KEYREL.CARG "_decade_",
            PHON.ONSET con ] ].

decade_n1 := n_intr_temp_nd_le &
 [ STEM < "decade" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_decade_n_1_rel",
            PHON.ONSET con ] ].

decapitate_v1 := v_np_trans_le &
 [ STEM < "decapitate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_decapitate_v_1_rel",
            PHON.ONSET con ] ].

decare_n1 := n_meas_le &
 [ STEM < "decare" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_decare_n_1_rel",
            PHON.ONSET con ] ].

decay_n1 := n_mass_le &
 [ STEM < "decay" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_decay_n_1_rel",
            PHON.ONSET con ] ].

decay_v1 := v_unacc_le &
 [ STEM < "decay" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_decay_v_1_rel",
            PHON.ONSET con ] ].

decease_n1 := n_mass_le &
 [ STEM < "decease" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_decease_n_1_rel",
            PHON.ONSET con ] ].

deceased_a1 := adj_intrans_le &
 [ STEM < "deceased" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_deceased_a_1_rel",
            PHON.ONSET con ] ].

deceased_n1 := n_intr_le &
 [ STEM < "deceased" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_deceased_n_1_rel",
            PHON.ONSET con ] ].

deceive_v1 := v_np*_trans_le &
 [ STEM < "deceive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_deceive_v_1_rel",
            PHON.ONSET con ] ].

deceive_v2 := v_np_trans_cp_le &
 [ STEM < "deceive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_deceive_v_1_rel",
            PHON.ONSET con ] ].

deceivingly_isect := adv_int_vp_le &
 [ STEM < "deceivingly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_deceiving_a_1_rel",
            PHON.ONSET con ] ].

december := n_month_le &
 [ STEM < "december" >,
   SYNSEM [ LKEYS.KEYREL.CARG "dec",
            PHON.ONSET con ] ].

december_2 := n_month_year_le &
 [ STEM < "december" >,
   SYNSEM [ LKEYS.KEYREL.CARG "dec",
            PHON.ONSET con ] ].

december_abb_n1 := n_month_le &
 [ STEM < "dec" >,
   SYNSEM [ LKEYS.KEYREL.CARG "dec",
            PHON.ONSET con ] ].

december_abb_n2 := n_month_year_le &
 [ STEM < "dec" >,
   SYNSEM [ LKEYS.KEYREL.CARG "dec",
            PHON.ONSET con ] ].

december_abb_n3 := n_month_le &
 [ STEM < "dec." >,
   SYNSEM [ LKEYS.KEYREL.CARG "dec",
            PHON.ONSET con ] ].

december_abb_n4 := n_month_year_le &
 [ STEM < "dec." >,
   SYNSEM [ LKEYS.KEYREL.CARG "dec",
            PHON.ONSET con ] ].

december_the_det := det_month_le &
 [ STEM < "december", "the" >,
   SYNSEM [ LKEYS.ALTKEYREL.CARG "dec",
            PHON.ONSET con ] ].

decent_isect := adj_intrans_le &
 [ STEM < "decent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_decent_a_1_rel",
            PHON.ONSET con ] ].

decently_a1 := adv_int_vp_le &
 [ STEM < "decently" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_decent_a_1_rel",
            PHON.ONSET con ] ].

deception_n1 := n_mass_count_le &
 [ STEM < "deception" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_deception_n_1_rel",
            PHON.ONSET con ] ].

deceptive_a1 := adj_intrans_le &
 [ STEM < "deceptive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_deceptive_a_1_rel",
            PHON.ONSET con ] ].

decide_against_v1 := v_empty_prep_intrans_le &
 [ STEM < "decide" >,
   SYNSEM [ LKEYS [ --COMPKEY _against_p_sel_rel,
                    KEYREL.PRED "_decide_v_against_rel" ],
            PHON.ONSET con ] ].

decide_on_v1 := v_empty_prep_intrans_le &
 [ STEM < "decide" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_decide_v_on_rel" ],
            PHON.ONSET con ] ].

decide_v1 := v_subj_equi_le &
 [ STEM < "decide" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_decide_v_1_rel",
            PHON.ONSET con ] ].

decide_v2 := v_np*_trans_le &
 [ STEM < "decide" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_decide_v_1_rel",
            PHON.ONSET con ] ].

decide_v3 := v_cp_fin_inf_non_trans_le &
 [ STEM < "decide" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_decide_v_1_rel",
            PHON.ONSET con ] ].

decidedly_adv1 := adv_int_vp_pre_le &
 [ STEM < "decidedly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_decided_a_1_rel",
            PHON.ONSET con ] ].

deciding_a1 := adj_intrans_le &
 [ STEM < "deciding" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_deciding_a_1_rel",
            PHON.ONSET con ] ].

decimalersatz := adj_bare_unspecified_card_three_le &
 [ STEM < "decimalersatz" >,
   SYNSEM [ LKEYS.KEYREL.CARG "dec3ersatz",
            PHON.ONSET onset ] ].

decimalersatz_2 := adj_bare_unspecified_card_three_le &
 [ STEM < "clockordecimalersatz" >,
   SYNSEM [ LKEYS.KEYREL.CARG "dec3ersatz",
            PHON.ONSET onset ] ].

decision_n1 := n_intr_le &
 [ STEM < "decision" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_decision_n_1_rel",
            PHON.ONSET con ] ].

decisive_a1 := adj_intrans_le &
 [ STEM < "decisive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_decisive_a_1_rel",
            PHON.ONSET con ] ].

decisively_a1 := adv_int_vp_le &
 [ STEM < "decisively" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_decisive_a_1_rel",
            PHON.ONSET con ] ].

deck_i_n1 := n_bare_nomod_le &
 [ STEM < "deck" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_deck_n_1_rel",
            PHON.ONSET con ] ].

deck_n1 := n_intr_le &
 [ STEM < "deck" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_deck_n_1_rel",
            PHON.ONSET con ] ].

declaration_n1 := n_mass_count_ppof_le &
 [ STEM < "declaration" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_declaration_n_of_rel",
            PHON.ONSET con ] ].

declare_v1 := v_np*_trans_le &
 [ STEM < "declare" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_declare_v_1_rel",
            PHON.ONSET con ] ].

declare_v3 := v_cp_non_trans_le &
 [ STEM < "declare" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_declare_v_1_rel",
            PHON.ONSET con ] ].

declare_v4 := v_obj_equi_le &
 [ STEM < "declare" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_declare_v_1_rel",
            PHON.ONSET con ] ].

declare_v5 := v_obj_equi_prd_le &
 [ STEM < "declare" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_declare_v_1_rel",
            PHON.ONSET con ] ].

declare_v6 := v_ditrans_only_le &
 [ STEM < "declare" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_declare_v_1_rel",
            PHON.ONSET con ] ].

declension_n1 := n_mass_count_le &
 [ STEM < "declension" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_declension_n_1_rel",
            PHON.ONSET con ] ].

declination_n1 := n_intr_le &
 [ STEM < "declination" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_declination_n_1_rel",
            PHON.ONSET con ] ].

decline_n1 := n_mass_le &
 [ STEM < "decline" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_decline_n_1_rel",
            PHON.ONSET con ] ].

decline_v1 := v_np*_trans_le &
 [ STEM < "decline" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_decline_v_1_rel",
            PHON.ONSET con ] ].

decline_v2 := v_subj_equi_le &
 [ STEM < "decline" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_decline_v_1_rel",
            PHON.ONSET con ] ].

declining_a1 := adj_intrans_le &
 [ STEM < "declining" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_declining_a_1_rel",
            PHON.ONSET con ] ].

declivity_n1 := n_mass_count_le &
 [ STEM < "declivity" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_declivity_n_1_rel",
            PHON.ONSET con ] ].

decoction_n1 := n_intr_le &
 [ STEM < "decoction" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_decoction_n_1_rel",
            PHON.ONSET con ] ].

decompose_v1 := v_unacc_le &
 [ STEM < "decompose" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_decompose_v_1_rel",
            PHON.ONSET con ] ].

decompose_v2 := v_np_trans_noger_le &
 [ STEM < "decompose" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_decompose_v_cause_rel",
            PHON.ONSET con ] ].

decomposition_n1 := n_mass_count_ppof_le &
 [ STEM < "decomposition" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_decomposition_n_of_rel",
            PHON.ONSET con ] ].

decompress_v1 := v_np_trans_le &
 [ STEM < "decompress" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_decompress_v_1_rel",
            PHON.ONSET con ] ].

decorate_v1 := v_np*_trans_le &
 [ STEM < "decorate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_decorate_v_1_rel",
            PHON.ONSET con ] ].

decoration_n1 := n_mass_count_ppof_le &
 [ STEM < "decoration" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_decoration_n_of_rel",
            PHON.ONSET con ] ].

decorative_a1 := adj_intrans_le &
 [ STEM < "decorative" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_decorative_a_1_rel",
            PHON.ONSET con ] ].

decorum_n1 := n_mass_le &
 [ STEM < "decorum" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_decorum_n_1_rel",
            PHON.ONSET con ] ].

decrease_n1 := n_mass_count_le &
 [ STEM < "decrease" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_decrease_n_1_rel",
            PHON.ONSET con ] ].

decrease_v1 := v_np_trans_noger_le &
 [ STEM < "decrease" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_decrease_v_cause_rel",
            PHON.ONSET con ] ].

decrease_v2 := v_unacc_le &
 [ STEM < "decrease" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_decrease_v_1_rel",
            PHON.ONSET con ] ].

decree_n1 := n_intr_le &
 [ STEM < "decree" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_decree_n_1_rel",
            PHON.ONSET con ] ].

decree_v1 := v_np_trans_le &
 [ STEM < "decree" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_decree_v_1_rel",
            PHON.ONSET con ] ].

decree_v2 := v_cp_non_trans_le &
 [ STEM < "decree" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_decree_v_1_rel",
            PHON.ONSET con ] ].

decree_v3 := v_sor_le &
 [ STEM < "decree" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_decree_v_1_rel",
            PHON.ONSET con ] ].

dedicate_v1 := v_to*_trans_le &
 [ STEM < "dedicate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dedicate_v_to_rel",
            PHON.ONSET con ] ].

deduce_v1 := v_np_trans_le &
 [ STEM < "deduce" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_deduce_v_1_rel",
            PHON.ONSET con ] ].

deduce_v2 := v_pp_cp_le &
 [ STEM < "deduce" >,
   SYNSEM [ LKEYS [ --COMPKEY _from_p_sel_rel,
                    KEYREL.PRED "_deduce_v_from_rel" ],
            PHON.ONSET con ] ].

deduct_v1 := v_empty_prep*_trans_le &
 [ STEM < "deduct" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _from_p_sel_rel,
                    KEYREL.PRED "_deduct_v_from_rel" ],
            PHON.ONSET con ] ].

deduction_n1 := n_intr_le &
 [ STEM < "deduction" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_deduction_n_1_rel",
            PHON.ONSET con ] ].

deem_prd := v_obj_equi_prd_adj_le &
 [ STEM < "deem" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_deem_v_1_rel",
            PHON.ONSET con ] ].

deem_v1 := v_obj_equi_le &
 [ STEM < "deem" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_deem_v_1_rel",
            PHON.ONSET con ] ].

deep_a1 := adj_intrans_le &
 [ STEM < "deep" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_deep_a_1_rel",
            PHON.ONSET con ] ].

deep_adv := adv_int_vp_post_le &
 [ STEM < "deep" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_deep_a_1_rel",
            PHON.ONSET con ] ].

deep_deg := adv_degree_spec_m_le &
 [ STEM < "deep" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_deep_x_deg_rel",
            PHON.ONSET con ] ].

deepen_v1 := v_np_trans_noger_le &
 [ STEM < "deepen" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_deepen_v_cause_rel",
            PHON.ONSET con ] ].

deepen_v2 := v_unacc_le &
 [ STEM < "deepen" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_deepen_v_1_rel",
            PHON.ONSET con ] ].

deeper := adj_comp_le &
 [ STEM < "deeper" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_deep_a_1_rel",
            PHON.ONSET con ] ].

deepest_a1 := adj_superl_le &
 [ STEM < "deepest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_deep_a_1_rel",
            PHON.ONSET con ] ].

deeply_adv1 := adv_int_vp_le &
 [ STEM < "deeply" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_deep_a_1_rel",
            PHON.ONSET con ] ].

deer_n1 := n_intr_le &
 [ STEM < "deer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_deer_n_1_rel",
            PHON.ONSET con ] ].

default_n1 := n_intr_le &
 [ STEM < "default" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_default_n_1_rel",
            PHON.ONSET con ] ].

default_v1 := v_empty_prep_intrans_le &
 [ STEM < "default" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_default_v_on_rel" ],
            PHON.ONSET con ] ].

default_v2 := v_unerg_le &
 [ STEM < "default" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_default_v_1_rel",
            PHON.ONSET con ] ].

defeat_n1 := n_mass_count_le &
 [ STEM < "defeat" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_defeat_n_1_rel",
            PHON.ONSET con ] ].

defeat_v1 := v_np_trans_le &
 [ STEM < "defeat" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_defeat_v_1_rel",
            PHON.ONSET con ] ].

defect_n1 := n_intr_le &
 [ STEM < "defect" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_defect_n_1_rel",
            PHON.ONSET con ] ].

defective_a1 := adj_intrans_le &
 [ STEM < "defective" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_defective_a_1_rel",
            PHON.ONSET con ] ].

defence_n1 := n_mass_count_le &
 [ STEM < "defence" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_defence_n_1_rel",
            PHON.ONSET con ] ].

defend_against_v1 := v_empty_prep_intrans_le &
 [ STEM < "defend" >,
   SYNSEM [ LKEYS [ --COMPKEY _against_p_sel_rel,
                    KEYREL.PRED "_defend_v_against_rel" ],
            PHON.ONSET con ] ].

defend_v1 := v_np*_trans_le &
 [ STEM < "defend" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_defend_v_from_rel",
            PHON.ONSET con ] ].

defend_v2 := v_empty_prep_trans_le &
 [ STEM < "defend" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _from_p_sel_rel,
                    KEYREL.PRED "_defend_v_from_rel" ],
            PHON.ONSET con ] ].

defendant_n1 := n_intr_le &
 [ STEM < "defendant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_defendant_n_1_rel",
            PHON.ONSET con ] ].

defense_n1 := n_mass_count_le &
 [ STEM < "defense" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_defense_n_1_rel",
            PHON.ONSET con ] ].

defensive_a1 := adj_intrans_le &
 [ STEM < "defensive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_defensive_a_1_rel",
            PHON.ONSET con ] ].

defensive_n1 := n_intr_le &
 [ STEM < "defensive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_defensive_n_1_rel",
            PHON.ONSET con ] ].

defer_v1 := v_np_trans_le &
 [ STEM < "defer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_defer_v_1_rel",
            PHON.ONSET con ] ].

deficiency_n1 := n_mass_count_le &
 [ STEM < "deficiency" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_deficiency_n_1_rel",
            PHON.ONSET con ] ].

deficient_a1 := adj_intrans_le &
 [ STEM < "deficient" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_deficient_a_1_rel",
            PHON.ONSET con ] ].

deficit_n1 := n_ppof_le &
 [ STEM < "deficit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_deficit_n_of_rel",
            PHON.ONSET con ] ].

defile_n1 := n_intr_le &
 [ STEM < "defile" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_defile_n_1_rel",
            PHON.ONSET con ] ].

defile_v1 := v_np_trans_le &
 [ STEM < "defile" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_defile_v_1_rel",
            PHON.ONSET con ] ].

definable_a1 := adj_intrans_le &
 [ STEM < "definable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_definable_a_1_rel",
            PHON.ONSET con ] ].

define_away_v1 := v_particle_np_le &
 [ STEM < "define" >,
   SYNSEM [ LKEYS [ --COMPKEY _away_p_sel_rel,
                    KEYREL.PRED "_define_v_away_rel" ],
            PHON.ONSET con ] ].

define_v1 := v_np_trans_le &
 [ STEM < "define" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_define_v_1_rel",
            PHON.ONSET con ] ].

define_v2 := v_cp_ques_fin_inf_non_trans_le &
 [ STEM < "define" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_define_v_1_rel",
            PHON.ONSET con ] ].

define_v3 := v_np_as_le &
 [ STEM < "define" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_define_v_as_rel",
            PHON.ONSET con ] ].

definite_a1 := adj_intrans_le &
 [ STEM < "definite" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_definite_a_1_rel",
            PHON.ONSET con ] ].

definitely_adv1 := adv_vp_aux_le &
 [ STEM < "definitely" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_definite_a_1_rel",
            PHON.ONSET con ] ].

definitely_adv2 := adv_s_pre_le &
 [ STEM < "definitely" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_definite_a_1_rel",
            PHON.ONSET con ] ].

definitely_adv3 := adv_negmod_le &
 [ STEM < "definitely" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_definite_a_1_rel",
            PHON.ONSET con ] ].

definition_n1 := n_mass_count_le &
 [ STEM < "definition" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_definition_n_1_rel",
            PHON.ONSET con ] ].

definitive_a1 := adj_intrans_le &
 [ STEM < "definitive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_definitive_a_1_rel",
            PHON.ONSET con ] ].

definitively := adv_int_vp_le &
 [ STEM < "definitively" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_definitive_a_1_rel",
            PHON.ONSET con ] ].

deflect_v1 := v_np_trans_le &
 [ STEM < "deflect" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_deflect_v_1_rel",
            PHON.ONSET con ] ].

deflection_n1 := n_mass_count_le &
 [ STEM < "deflection" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_deflection_n_1_rel",
            PHON.ONSET con ] ].

deforestation_n1 := n_mass_ppcomp_le &
 [ STEM < "deforestation" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_deforestation_n_of_rel" ],
            PHON.ONSET con ] ].

deformity_n1 := n_mass_count_le &
 [ STEM < "deformity" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_deformity_n_1_rel",
            PHON.ONSET con ] ].

defy_v1 := v_np_trans_le &
 [ STEM < "defy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_defy_v_1_rel",
            PHON.ONSET con ] ].

defy_v2 := v_obj_equi_le &
 [ STEM < "defy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_defy_v_1_rel",
            PHON.ONSET con ] ].

degenerate_a1 := adj_intrans_le &
 [ STEM < "degenerate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_degenerate_a_1_rel",
            PHON.ONSET con ] ].

degenerate_into_v1 := v_empty_prep_intrans_le &
 [ STEM < "degenerate" >,
   SYNSEM [ LKEYS [ --COMPKEY _into_p_sel_rel,
                    KEYREL.PRED "_degenerate_v_into_rel" ],
            PHON.ONSET con ] ].

degenerate_n1 := n_no_cmpnd_le &
 [ STEM < "degenerate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_degenerate_n_1_rel",
            PHON.ONSET con ] ].

degenerate_v1 := v_unerg_le &
 [ STEM < "degenerate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_degenerate_v_1_rel",
            PHON.ONSET con ] ].

degrade_v1 := v_np*_trans_le &
 [ STEM < "degrade" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_degrade_v_1_rel",
            PHON.ONSET con ] ].

degree_n1 := n_ppof_le &
 [ STEM < "degree" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_degree_n_of_rel",
            PHON.ONSET con ] ].

degree_twiddle := adv_degree_spec_le &
 [ STEM < "~" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_approx_x_rel",
            PHON.ONSET onset ] ].

dehe_n1 := n_proper_le &
 [ STEM < "dehe" >,
   SYNSEM [ LKEYS.KEYREL.CARG "dehe",
            PHON.ONSET con ] ].

deign_v1 := v_subj_equi_le &
 [ STEM < "deign" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_deign_v_1_rel",
            PHON.ONSET con ] ].

deja_vu_n1 := n_intr_le &
 [ STEM < "deja", "vu" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_deja+vu_n_1_rel",
            PHON.ONSET con ] ].

dejection_n1 := n_mass_le &
 [ STEM < "dejection" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dejection_n_1_rel",
            PHON.ONSET con ] ].

delaware_n1 := n_proper_le &
 [ STEM < "delaware" >,
   SYNSEM [ LKEYS.KEYREL.CARG "delaware",
            PHON.ONSET con ] ].

delaware_n2 := n_proper_abb_le &
 [ STEM < "de" >,
   SYNSEM [ LKEYS.KEYREL.CARG "delaware",
            PHON.ONSET con ] ].

delay_n1 := n_mass_count_le &
 [ STEM < "delay" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_delay_n_1_rel",
            PHON.ONSET con ] ].

delay_v1 := v_np*_trans_le &
 [ STEM < "delay" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_delay_v_1_rel",
            PHON.ONSET con ] ].

delayed_a1 := adj_intrans_le &
 [ STEM < "delayed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_delayed_a_1_rel",
            PHON.ONSET con ] ].

delegate_n1 := n_intr_le &
 [ STEM < "delegate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_delegate_n_1_rel",
            PHON.ONSET con ] ].

delegate_to_v1 := v_empty_prep_intrans_le &
 [ STEM < "delegate" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_delegate_v_to_rel" ],
            PHON.ONSET con ] ].

delegate_v1 := v_np*_trans_le &
 [ STEM < "delegate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_delegate_v_to_rel",
            PHON.ONSET con ] ].

delegate_v2 := v_to_trans_le &
 [ STEM < "delegate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_delegate_v_to_rel",
            PHON.ONSET con ] ].

delegation_n1 := n_mass_count_le &
 [ STEM < "delegation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_delegation_n_1_rel",
            PHON.ONSET con ] ].

delete_v1 := v_np_trans_le &
 [ STEM < "delete" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_delete_v_1_rel",
            PHON.ONSET con ] ].

delete_v2 := v_np_prep_trans_le &
 [ STEM < "delete" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _from_p_rel,
                    KEYREL.PRED "_delete_v_1_rel" ],
            PHON.ONSET con ] ].

deliberately_adv1 := adv_int_vp_le &
 [ STEM < "deliberately" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_deliberate_a_1_rel",
            PHON.ONSET con ] ].

deliberation_n1 := n_mass_count_le &
 [ STEM < "deliberation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_deliberation_n_1_rel",
            PHON.ONSET con ] ].

deliberative_a1 := adj_intrans_le &
 [ STEM < "deliberative" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_deliberative_a_1_rel",
            PHON.ONSET con ] ].

delicate_a1 := adj_intrans_le &
 [ STEM < "delicate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_delicate_a_1_rel",
            PHON.ONSET con ] ].

delicateness_n1 := n_mass_le &
 [ STEM < "delicateness" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_delicateness_n_1_rel",
            PHON.ONSET con ] ].

delicates_n1 := n_plur_nocmpnd_le &
 [ STEM < "delicate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_delicates_n_1_rel",
            PHON.ONSET con ] ].

delicious_isect := adj_intrans_le &
 [ STEM < "delicious" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_delicious_a_1_rel",
            PHON.ONSET con ] ].

deliciously_adv1 := adv_int_vp_post_le &
 [ STEM < "deliciously" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_delicious_a_1_rel",
            PHON.ONSET con ] ].

delight_n1 := n_mass_count_le &
 [ STEM < "delight" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_delight_n_1_rel",
            PHON.ONSET con ] ].

delight_v1 := v_np_trans_le &
 [ STEM < "delight" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_delight_v_1_rel",
            PHON.ONSET con ] ].

delight_v2 := v_expl_it_subj_np_cp_le &
 [ STEM < "delight" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_delight_v_1_rel",
            PHON.ONSET con ] ].

delighted_a1 := adj_intrans_le &
 [ STEM < "delighted" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_delighted_a_1_rel",
            PHON.ONSET con ] ].

delightful_adj := adj_intrans_le &
 [ STEM < "delightful" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_delightful_a_1_rel",
            PHON.ONSET con ] ].

delightfully_adv1 := adv_int_vp_post_le &
 [ STEM < "delightfully" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_delightful_a_1_rel",
            PHON.ONSET con ] ].

delilah_n1 := n_proper_le &
 [ STEM < "delilah" >,
   SYNSEM [ LKEYS.KEYREL.CARG "delilah",
            PHON.ONSET con ] ].

delineate_v1 := v_np_trans_le &
 [ STEM < "delineate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_delineate_v_1_rel",
            PHON.ONSET con ] ].

delineation_n1 := n_mass_count_le &
 [ STEM < "delineation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_delineation_n_1_rel",
            PHON.ONSET con ] ].

deliver_from_v1 := v_empty_prep_trans_le &
 [ STEM < "deliver" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _from_p_sel_rel,
                    KEYREL.PRED "_deliver_v_from_rel" ],
            PHON.ONSET con ] ].

deliver_v1 := v_np*_trans_le &
 [ STEM < "deliver" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_deliver_v_to_rel",
            PHON.ONSET con ] ].

deliver_v2 := v_to_trans*_le &
 [ STEM < "deliver" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_deliver_v_to_rel",
            PHON.ONSET con ] ].

deliverable_a1 := adj_intrans_le &
 [ STEM < "deliverable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_deliverable_a_1_rel",
            PHON.ONSET con ] ].

deliverance_n1 := n_mass_le &
 [ STEM < "deliverance" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_deliverance_n_1_rel",
            PHON.ONSET con ] ].

delivery_n1 := n_mass_count_ppof_le &
 [ STEM < "delivery" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_delivery_n_of_rel",
            PHON.ONSET con ] ].

dell_n1 := n_proper_le &
 [ STEM < "dell" >,
   SYNSEM [ LKEYS.KEYREL.CARG "dell",
            PHON.ONSET con ] ].

delta_n1 := n_intr_le &
 [ STEM < "delta" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_delta_n_1_rel",
            PHON.ONSET con ] ].

delta_n2 := n_proper_le &
 [ STEM < "delta" >,
   SYNSEM [ LKEYS.KEYREL.CARG "delta",
            PHON.ONSET con ] ].

delude_v1 := v_np_trans_le &
 [ STEM < "delude" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_delude_v_1_rel",
            PHON.ONSET con ] ].

deluge_n1 := n_ppof_le &
 [ STEM < "deluge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_deluge_n_of_rel",
            PHON.ONSET con ] ].

deluge_v1 := v_np_trans_le &
 [ STEM < "deluge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_deluge_v_1_rel",
            PHON.ONSET con ] ].

delve_v1 := v_prep_dir_le &
 [ STEM < "delve" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_delve_v_1_rel",
            PHON.ONSET con ] ].

demand_from_v1 := v_empty_prep_trans_le &
 [ STEM < "demand" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _from_p_sel_rel,
                    KEYREL.PRED "_demand_v_from_rel" ],
            PHON.ONSET con ] ].

demand_n1 := n_mass_count_le &
 [ STEM < "demand" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_demand_n_1_rel",
            PHON.ONSET con ] ].

demand_of_v1 := v_empty_prep_trans_le &
 [ STEM < "demand" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_demand_v_of_rel" ],
            PHON.ONSET con ] ].

demand_v1 := v_np_trans_le &
 [ STEM < "demand" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_demand_v_1_rel",
            PHON.ONSET con ] ].

demand_v2 := v_cp_prop_non_trans_le &
 [ STEM < "demand" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_demand_v_1_rel",
            PHON.ONSET con ] ].

demand_v3 := v_subj_equi_le &
 [ STEM < "demand" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_demand_v_1_rel",
            PHON.ONSET con ] ].

demand_v4 := v_cp_subj_le &
 [ STEM < "demand" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_demand_v_1_rel",
            PHON.ONSET con ] ].

demanding_a1 := adj_intrans_le &
 [ STEM < "demanding" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_demanding_a_1_rel",
            PHON.ONSET con ] ].

demean_v1 := v_np_trans_le &
 [ STEM < "demean" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_demean_v_1_rel",
            PHON.ONSET con ] ].

demeanor_n1 := n_mass_le &
 [ STEM < "demeanor" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_demeanor_n_1_rel",
            PHON.ONSET con ] ].

demise_n1 := n_intr_sg_le &
 [ STEM < "demise" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_demise_n_1_rel",
            PHON.ONSET con ] ].

demo_n1 := n_ppof_le &
 [ STEM < "demo" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_demo_n_of_rel",
            PHON.ONSET con ] ].

demo_v1 := v_to*_trans_le &
 [ STEM < "demo" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_demo_v_to_rel",
            PHON.ONSET con ] ].

democracy_n1 := n_mass_count_le &
 [ STEM < "democracy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_democracy_n_1_rel",
            PHON.ONSET con ] ].

democrat_n1 := n_intr_le &
 [ STEM < "democrat" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_democrat_n_1_rel",
            PHON.ONSET con ] ].

democratic_a1 := adj_intrans_le &
 [ STEM < "democratic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_democratic_a_1_rel",
            PHON.ONSET con ] ].

demolish_v1 := v_np_trans_le &
 [ STEM < "demolish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_demolish_v_1_rel",
            PHON.ONSET con ] ].

demonstrative_a1 := adj_intrans_le &
 [ STEM < "demonstrative" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_demonstrative_a_1_rel",
            PHON.ONSET con ] ].

demonstrative_n1 := n_intr_le &
 [ STEM < "demonstrative" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_demonstrative_n_1_rel",
            PHON.ONSET con ] ].

demosthenes_n1 := n_proper_le &
 [ STEM < "demosthenes" >,
   SYNSEM [ LKEYS.KEYREL.CARG "demosthenes",
            PHON.ONSET con ] ].

den_n1 := n_intr_le &
 [ STEM < "den" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_den_n_1_rel",
            PHON.ONSET con ] ].

den_norske_turistforening_n1 := n_proper_le &
 [ STEM < "den", "norske", "turistforening" >,
   SYNSEM [ LKEYS.KEYREL.CARG "den_norske_turistforening",
            PHON.ONSET con ] ].

deng_xiaoping_n1 := n_proper_le &
 [ STEM < "deng", "xiaoping" >,
   SYNSEM [ LKEYS.KEYREL.CARG "deng_xiaoping",
            PHON.ONSET con ] ].

dengxiaoping_n1 := n_proper_le &
 [ STEM < "dengxiaoping" >,
   SYNSEM [ LKEYS.KEYREL.CARG "deng_xiaoping",
            PHON.ONSET con ] ].

denial_n1 := n_mass_count_ppof_le &
 [ STEM < "denial" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_denial_n_of_rel",
            PHON.ONSET con ] ].

denizen_n1 := n_intr_le &
 [ STEM < "denizen" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_denizen_n_1_rel",
            PHON.ONSET con ] ].

denmark_n1 := n_proper_le &
 [ STEM < "denmark" >,
   SYNSEM [ LKEYS.KEYREL.CARG "denmark",
            PHON.ONSET con ] ].

dennison_n1 := n_proper_le &
 [ STEM < "dennison" >,
   SYNSEM [ LKEYS.KEYREL.CARG "dennison",
            PHON.ONSET con ] ].

denny_n1 := n_proper_le &
 [ STEM < "denny" >,
   SYNSEM [ LKEYS.KEYREL.CARG "denny",
            PHON.ONSET con ] ].

denominate_v1 := v_np_trans_le &
 [ STEM < "denominate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_denominate_v_1_rel",
            PHON.ONSET con ] ].

denomination_n1 := n_intr_le &
 [ STEM < "denomination" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_denomination_n_1_rel",
            PHON.ONSET con ] ].

denominator_n1 := n_intr_le &
 [ STEM < "denominator" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_denominator_n_1_rel",
            PHON.ONSET con ] ].

denote_v1 := v_np_trans_le &
 [ STEM < "denote" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_denote_v_1_rel",
            PHON.ONSET con ] ].

denote_v2 := v_cp_prop_non_trans_le &
 [ STEM < "denote" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_denote_v_1_rel",
            PHON.ONSET con ] ].

denounce_v1 := v_np_trans_le &
 [ STEM < "denounce" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_denounce_v_1_rel",
            PHON.ONSET con ] ].

denounce_v2 := v_np_as_le &
 [ STEM < "denounce" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_denounce_v_as_rel",
            PHON.ONSET con ] ].

dense_a1 := adj_intrans_le &
 [ STEM < "dense" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dense_a_1_rel",
            PHON.ONSET con ] ].

densely_adv1 := adv_int_vp_le &
 [ STEM < "densely" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dense_a_1_rel",
            PHON.ONSET con ] ].

dental_a1 := adj_intrans_le &
 [ STEM < "dental" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dental_a_1_rel",
            PHON.ONSET con ] ].

dental_n1 := n_intr_le &
 [ STEM < "dental" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dental_n_1_rel",
            PHON.ONSET con ] ].

dentist_n1 := n_intr_le &
 [ STEM < "dentist" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dentist_n_1_rel",
            PHON.ONSET con ] ].

dentists_a1 := adj_compound_le &
 [ STEM < "dentist", "'s" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dentist_a_1_rel",
            PHON.ONSET con ] ].

dentists_a2 := adj_compound_le &
 [ STEM < "dentists", "'" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dentist_a_1_rel",
            PHON.ONSET con ] ].

denver_n1 := n_proper_city_le &
 [ STEM < "denver" >,
   SYNSEM [ LKEYS.KEYREL.CARG "denver",
            PHON.ONSET con ] ].

deny_v1 := v_np_trans_le &
 [ STEM < "deny" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_deny_v_1_rel",
            PHON.ONSET con ] ].

deny_v2 := v_cp_non_trans_le &
 [ STEM < "deny" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_deny_v_1_rel",
            PHON.ONSET con ] ].

deny_v3 := v_subj_equi_prp_le &
 [ STEM < "deny" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_deny_v_1_rel",
            PHON.ONSET con ] ].

deny_v4 := v_ditrans_le &
 [ STEM < "deny" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_deny_v_1_rel",
            PHON.ONSET con ] ].

depart_v2 := v_np*_non_trans_le &
 [ STEM < "depart" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_depart_v_1_rel",
            PHON.ONSET con ] ].

department_n1 := n_intr_le &
 [ STEM < "department" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_department_n_1_rel",
            PHON.ONSET con ] ].

departmental_a1 := adj_intrans_le &
 [ STEM < "departmental" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_departmental_a_1_rel",
            PHON.ONSET con ] ].

departure_n1 := n_intr_le &
 [ STEM < "departure" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_departure_n_1_rel",
            PHON.ONSET con ] ].

depend_on_v1 := v_empty_prep_intrans_le &
 [ STEM < "depend" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_depend_v_on_rel" ],
            PHON.ONSET con ] ].

depend_v1 := v_np_trans_le &
 [ STEM < "depend" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_depend_v_1_rel",
            PHON.ONSET con ] ].

dependable_a1 := adj_intrans_le &
 [ STEM < "dependable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dependable_a_1_rel",
            PHON.ONSET con ] ].

dependence_n1 := n_intr_le &
 [ STEM < "dependence" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dependence_n_1_rel",
            PHON.ONSET con ] ].

dependent_a1 := adj_trans_le &
 [ STEM < "dependent" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_dependent_a_on_rel" ],
            PHON.ONSET con ] ].

dependent_n1 := n_intr_le &
 [ STEM < "dependent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dependent_n_1_rel",
            PHON.ONSET con ] ].

depending_a1 := adj_trans_le &
 [ STEM < "depending" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_depending_a_on_rel" ],
            PHON.ONSET con ] ].

depict_v1 := v_np_trans_le &
 [ STEM < "depict" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_depict_v_1_rel",
            PHON.ONSET con ] ].

depict_v2 := v_np_as_le &
 [ STEM < "depict" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_depict_v_as_rel",
            PHON.ONSET con ] ].

deplete_v1 := v_empty_prep*_trans_le &
 [ STEM < "deplete" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_deplete_v_of_rel" ],
            PHON.ONSET con ] ].

deploy_v1 := v_np_trans_le &
 [ STEM < "deploy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_deploy_v_cause_rel",
            PHON.ONSET con ] ].

deploy_v2 := v_unacc_dir_le &
 [ STEM < "deploy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_deploy_v_1_rel",
            PHON.ONSET con ] ].

deploy_v3 := v_obj_equi_le &
 [ STEM < "deploy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_deploy_v_cause_rel",
            PHON.ONSET con ] ].

deploy_v4 := v_np_as_le &
 [ STEM < "deploy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_deploy_v_as_rel",
            PHON.ONSET con ] ].

depopulate_v1 := v_unacc_le &
 [ STEM < "depopulate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_depopulate_v_1_rel",
            PHON.ONSET con ] ].

depopulate_v2 := v_np_trans_noger_le &
 [ STEM < "depopulate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_depopulate_v_cause_rel",
            PHON.ONSET con ] ].

deport_v1 := v_np_trans_le &
 [ STEM < "deport" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_deport_v_1_rel",
            PHON.ONSET con ] ].

deportment_n1 := n_mass_le &
 [ STEM < "deportment" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_deportment_n_1_rel",
            PHON.ONSET con ] ].

deposit_n1 := n_mass_count_ppof_le &
 [ STEM < "deposit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_deposit_n_of_rel",
            PHON.ONSET con ] ].

deposit_v1 := v_np_trans_le &
 [ STEM < "deposit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_deposit_v_1_rel",
            PHON.ONSET con ] ].

deposit_v2 := v_np_prep_trans_dors_le &
 [ STEM < "deposit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_deposit_v_1_rel",
            PHON.ONSET con ] ].

deposition_n1 := n_mass_count_ppof_le &
 [ STEM < "deposition" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_deposition_n_of_rel",
            PHON.ONSET con ] ].

depreciatory_a1 := adj_intrans_le &
 [ STEM < "depreciatory" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_depreciatory_a_1_rel",
            PHON.ONSET con ] ].

depress_v1 := v_np_trans_le &
 [ STEM < "depress" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_depress_v_1_rel",
            PHON.ONSET con ] ].

depression_n1 := n_mass_count_le &
 [ STEM < "depression" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_depression_n_1_rel",
            PHON.ONSET con ] ].

deprivation_n1 := n_mass_count_le &
 [ STEM < "deprivation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_deprivation_n_1_rel",
            PHON.ONSET con ] ].

deprive_v1 := v_empty_prep*_trans_le &
 [ STEM < "deprive" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_deprive_v_of_rel" ],
            PHON.ONSET con ] ].

dept_n1 := n_intr_le &
 [ STEM < "dept" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_department_n_1_rel",
            PHON.ONSET con ] ].

depth_n1 := n_mass_count_ppof_le &
 [ STEM < "depth" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_depth_n_of_rel",
            PHON.ONSET con ] ].

der-talismann_n1 := n_proper_le &
 [ STEM < "der", "talismann" >,
   SYNSEM [ LKEYS.KEYREL.CARG "der-talismann",
            PHON.ONSET con ] ].

derange_v1 := v_np_trans_le &
 [ STEM < "derange" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_derange_v_1_rel",
            PHON.ONSET con ] ].

deranged_a1 := adj_intrans_le &
 [ STEM < "deranged" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_deranged_a_1_rel",
            PHON.ONSET con ] ].

deregulate_v1 := v_np_trans_le &
 [ STEM < "deregulate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_deregulate_v_1_rel",
            PHON.ONSET con ] ].

derive_v1 := v_np_trans_le &
 [ STEM < "derive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_derive_v_1_rel",
            PHON.ONSET con ] ].

derive_v2 := v_np*_prep_trans_le &
 [ STEM < "derive" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _from_p_rel,
                    KEYREL.PRED "_derive_v_1_rel" ],
            PHON.ONSET con ] ].

dervish_n1 := n_intr_le &
 [ STEM < "dervish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dervish_n_1_rel",
            PHON.ONSET con ] ].

descant_n1 := n_mass_count_le &
 [ STEM < "descant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_descant_n_1_rel",
            PHON.ONSET con ] ].

descend_v1 := v_prep_dir_le &
 [ STEM < "descend" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_descend_v_1_rel",
            PHON.ONSET con ] ].

descend_v2 := v_np_trans_noger_le &
 [ STEM < "descend" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_descend_v_1_rel",
            PHON.ONSET con ] ].

descendant_n1 := n_intr_le &
 [ STEM < "descendant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_descendant_n_1_rel",
            PHON.ONSET con ] ].

descendent_n1 := n_ppof_le &
 [ STEM < "descendent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_descendent_n_of_rel",
            PHON.ONSET con ] ].

descent_n1 := n_mass_count_le &
 [ STEM < "descent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_descent_n_1_rel",
            PHON.ONSET con ] ].

describe_v1 := v_to*_trans_le &
 [ STEM < "describe" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_describe_v_to_rel",
            PHON.ONSET con ] ].

describe_v2 := v_np_as_le &
 [ STEM < "describe" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_describe_v_as_rel",
            PHON.ONSET con ] ].

description_n1 := n_mass_count_ppof_le &
 [ STEM < "description" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_description_n_of_rel",
            PHON.ONSET con ] ].

descriptive_a1 := adj_intrans_le &
 [ STEM < "descriptive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_descriptive_a_1_rel",
            PHON.ONSET con ] ].

descry_v1 := v_np_trans_le &
 [ STEM < "descry" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_descry_v_1_rel",
            PHON.ONSET con ] ].

desert_n1 := n_mass_count_le &
 [ STEM < "desert" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_desert_n_1_rel",
            PHON.ONSET con ] ].

desert_v2 := v_np*_trans_le &
 [ STEM < "desert" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_desert_v_1_rel",
            PHON.ONSET con ] ].

desertion_n1 := n_mass_count_le &
 [ STEM < "desertion" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_desertion_n_1_rel",
            PHON.ONSET con ] ].

deserve_v1 := v_np_trans_le &
 [ STEM < "deserve" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_deserve_v_1_rel",
            PHON.ONSET con ] ].

deserve_v2 := v_subj_equi_le &
 [ STEM < "deserve" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_deserve_v_1_rel",
            PHON.ONSET con ] ].

design_n1 := n_mass_count_ppof_le &
 [ STEM < "design" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_design_n_of_rel",
            PHON.ONSET con ] ].

design_v1 := v_np_trans_le &
 [ STEM < "design" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_design_v_1_rel",
            PHON.ONSET con ] ].

design_v2 := v_obj_equi_le &
 [ STEM < "design" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_design_v_1_rel",
            PHON.ONSET con ] ].

designate_n1 := n_intr_le &
 [ STEM < "designate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_designate_n_1_rel",
            PHON.ONSET con ] ].

designate_v1 := v_np_trans_le &
 [ STEM < "designate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_designate_v_1_rel",
            PHON.ONSET con ] ].

designate_v2 := v_np_as_le &
 [ STEM < "designate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_designate_v_as_rel",
            PHON.ONSET con ] ].

designate_v3 := v_ditrans_only_le &
 [ STEM < "designate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_designate_v_1_rel",
            PHON.ONSET con ] ].

designation_n1 := n_ppof_le &
 [ STEM < "designation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_designation_n_of_rel",
            PHON.ONSET con ] ].

designer_n1 := n_ppof_le &
 [ STEM < "designer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_designer_n_of_rel",
            PHON.ONSET con ] ].

desirable_a1 := adj_trans_le &
 [ STEM < "desirable" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_desirable_a_to_rel" ],
            PHON.ONSET con ] ].

desire_n1 := n_mass_count_ppcomp_le &
 [ STEM < "desire" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_desire_n_for_rel" ],
            PHON.ONSET con ] ].

desire_n2 := n_vpcomp_le &
 [ STEM < "desire" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_desire_n_for_rel",
            PHON.ONSET con ] ].

desire_n3 := n_cpcomp_fin_le &
 [ STEM < "desire" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_desire_n_for_rel",
            PHON.ONSET con ] ].

desire_n4 := n_cpcomp_bse_le &
 [ STEM < "desire" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_desire_n_for_rel",
            PHON.ONSET con ] ].

desire_v1 := v_np*_trans_le &
 [ STEM < "desire" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_desire_v_1_rel",
            PHON.ONSET con ] ].

desire_v2 := v_subj_equi_le &
 [ STEM < "desire" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_desire_v_1_rel",
            PHON.ONSET con ] ].

desire_v3 := v_cp_prop_non_trans_le &
 [ STEM < "desire" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_desire_v_1_rel",
            PHON.ONSET con ] ].

desist_v1 := v_unerg_le &
 [ STEM < "desist" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_desist_v_1_rel",
            PHON.ONSET con ] ].

desk_n1 := n_intr_le &
 [ STEM < "desk" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_desk_n_1_rel",
            PHON.ONSET con ] ].

desktop_n1 := n_intr_le &
 [ STEM < "desktop" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_desktop_n_1_rel",
            PHON.ONSET con ] ].

desmond_n1 := n_proper_le &
 [ STEM < "desmond" >,
   SYNSEM [ LKEYS.KEYREL.CARG "desmond",
            PHON.ONSET con ] ].

desolate_a1 := adj_intrans_le &
 [ STEM < "desolate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_desolate_a_1_rel",
            PHON.ONSET con ] ].

desolate_v1 := v_np_trans_le &
 [ STEM < "desolate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_desolate_v_1_rel",
            PHON.ONSET con ] ].

despair_n1 := n_mass_count_le &
 [ STEM < "despair" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_despair_n_1_rel",
            PHON.ONSET con ] ].

despair_of_v1 := v_empty_prep_intrans_le &
 [ STEM < "despair" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_despair_v_of_rel" ],
            PHON.ONSET con ] ].

despair_v1 := v_unerg_le &
 [ STEM < "despair" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_despair_v_1_rel",
            PHON.ONSET con ] ].

desperate_a1 := adj_trans_le &
 [ STEM < "desperate" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_desperate_a_for_rel" ],
            PHON.ONSET con ] ].

desperately_isect := adv_int_vp_le &
 [ STEM < "desperately" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_desperate_a_for_rel",
            PHON.ONSET con ] ].

despise_v1 := v_np_trans_le &
 [ STEM < "despise" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_despise_v_1_rel",
            PHON.ONSET con ] ].

despise_v2 := v_np_as_le &
 [ STEM < "despise" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_despise_v_as_rel",
            PHON.ONSET con ] ].

despite := p_le &
 [ STEM < "despite" >,
   SYNSEM [ LKEYS.KEYREL.PRED _despite_p_rel,
            PHON.ONSET con ] ].

dessert_n1 := n_mass_count_le &
 [ STEM < "dessert" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dessert_n_1_rel",
            PHON.ONSET con ] ].

destination_n1 := n_intr_le &
 [ STEM < "destination" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_destination_n_1_rel",
            PHON.ONSET con ] ].

destination_title := n_title_le &
 [ STEM < "destination" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_destination_n_1_rel",
            PHON.ONSET con ] ].

destination_wilderness := n_proper_le &
 [ STEM < "destination", "wilderness" >,
   SYNSEM [ LKEYS.KEYREL.CARG "destination_wilderness",
            PHON.ONSET con ] ].

destine_v1 := v_np_trans_le &
 [ STEM < "destine" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_destine_v_1_rel",
            PHON.ONSET con ] ].

destined_a1 := adj_reg_equi_le &
 [ STEM < "destined" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_destined_a_1_rel",
            PHON.ONSET con ] ].

destiny_n1 := n_mass_count_le &
 [ STEM < "destiny" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_destiny_n_1_rel",
            PHON.ONSET con ] ].

destitute_a1 := adj_intrans_le &
 [ STEM < "destitute" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_destitute_a_1_rel",
            PHON.ONSET con ] ].

destitution_n1 := n_mass_le &
 [ STEM < "destitution" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_destitution_n_1_rel",
            PHON.ONSET con ] ].

destroy_v1 := v_np_trans_le &
 [ STEM < "destroy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_destroy_v_1_rel",
            PHON.ONSET con ] ].

destroyer_n1 := n_intr_le &
 [ STEM < "destroyer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_destroyer_n_1_rel",
            PHON.ONSET con ] ].

destruction_n1 := n_mass_ppcomp_le &
 [ STEM < "destruction" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_destruction_n_of_rel" ],
            PHON.ONSET con ] ].

det_glade_hjÃ¸rnet_n1 := n_proper_le &
 [ STEM < "det", "glade", "hjÃ¸rnet" >,
   SYNSEM [ LKEYS.KEYREL.CARG "det_glade_hjÃ¸rnet",
            PHON.ONSET con ] ].

detail_n1 := n_mass_count_le &
 [ STEM < "detail" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_detail_n_1_rel",
            PHON.ONSET con ] ].

detail_v1 := v_np_trans_le &
 [ STEM < "detail" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_detail_v_1_rel",
            PHON.ONSET con ] ].

detail_v2 := v_cp_non_trans_le &
 [ STEM < "detail" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_detail_v_1_rel",
            PHON.ONSET con ] ].

detain_v1 := v_np_trans_le &
 [ STEM < "detain" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_detain_v_1_rel",
            PHON.ONSET con ] ].

detect_v1 := v_np*_trans_le &
 [ STEM < "detect" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_detect_v_1_rel",
            PHON.ONSET con ] ].

detect_v2 := v_cp_non_trans_le &
 [ STEM < "detect" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_detect_v_1_rel",
            PHON.ONSET con ] ].

detective_n1 := n_intr_le &
 [ STEM < "detective" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_detective_n_1_rel",
            PHON.ONSET con ] ].

detector_n1 := n_ppof_le &
 [ STEM < "detector" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_detector_n_of_rel",
            PHON.ONSET con ] ].

deter_v1 := v_np_trans_le &
 [ STEM < "deter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_deter_v_1_rel",
            PHON.ONSET con ] ].

deter_v2 := v_obj_equi_from_le &
 [ STEM < "deter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_deter_v_from_rel",
            PHON.ONSET con ] ].

detergent_n1 := n_mass_count_le &
 [ STEM < "detergent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_detergent_n_1_rel",
            PHON.ONSET con ] ].

deteriorate_v1 := v_unacc_le &
 [ STEM < "deteriorate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_deteriorate_v_1_rel",
            PHON.ONSET con ] ].

determinate_a1 := adj_intrans_le &
 [ STEM < "determinate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_determinate_a_1_rel",
            PHON.ONSET con ] ].

determination_n1 := n_mass_count_ppof_le &
 [ STEM < "determination" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_determination_n_of_rel",
            PHON.ONSET con ] ].

determine_v1 := v_np_trans_le &
 [ STEM < "determine" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_determine_v_1_rel",
            PHON.ONSET con ] ].

determine_v2 := v_cp_fin_inf_non_trans_le &
 [ STEM < "determine" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_determine_v_1_rel",
            PHON.ONSET con ] ].

determine_v3 := v_obj_equi_le &
 [ STEM < "determine" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_determine_v_1_rel",
            PHON.ONSET con ] ].

determined_a2 := adj_reg_equi_le &
 [ STEM < "determined" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_determined_a_1_rel",
            PHON.ONSET con ] ].

determined_isect := adj_intrans_le &
 [ STEM < "determined" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_determined_a_1_rel",
            PHON.ONSET con ] ].

detour_n1 := n_intr_le &
 [ STEM < "detour" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_detour_n_1_rel",
            PHON.ONSET con ] ].

detract_from_v1 := v_empty_prep_intrans_le &
 [ STEM < "detract" >,
   SYNSEM [ LKEYS [ --COMPKEY _from_p_sel_rel,
                    KEYREL.PRED "_detract_v_from_rel" ],
            PHON.ONSET con ] ].

detroit_n1 := n_proper_city_le &
 [ STEM < "detroit" >,
   SYNSEM [ LKEYS.KEYREL.CARG "detroit",
            PHON.ONSET con ] ].

deuce_n1 := n_mass_count_le &
 [ STEM < "deuce" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_deuce_n_1_rel",
            PHON.ONSET con ] ].

deutsche_mark_n1 := n_intr_le &
 [ STEM < "deutsche", "mark" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_deutschmark_n_1_rel",
            PHON.ONSET con ] ].

deutschmark_n1 := n_intr_le &
 [ STEM < "deutschmark" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_deutschmark_n_1_rel",
            PHON.ONSET con ] ].

deutschmark_n2 := n_intr_le &
 [ STEM < "deutsch", "mark" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_deutschmark_n_1_rel",
            PHON.ONSET con ] ].

deutschmark_n3 := n_intr_le &
 [ STEM < "deutsch-", "mark" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_deutschmark_n_1_rel",
            PHON.ONSET con ] ].

devastate_v1 := v_np_trans_le &
 [ STEM < "devastate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_devastate_v_1_rel",
            PHON.ONSET con ] ].

devastate_v2 := v_expl_it_subj_np_cp_le &
 [ STEM < "devastate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_devastate_v_1_rel",
            PHON.ONSET con ] ].

devastation_n1 := n_mass_le &
 [ STEM < "devastation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_devastation_n_1_rel",
            PHON.ONSET con ] ].

develop_into_v1 := v_empty_prep_intrans_le &
 [ STEM < "develop" >,
   SYNSEM [ LKEYS [ --COMPKEY _into_p_sel_rel,
                    KEYREL.PRED "_develop_v_into_rel" ],
            PHON.ONSET con ] ].

develop_v1 := v_np_trans_noger_le &
 [ STEM < "develop" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_develop_v_cause_rel",
            PHON.ONSET con ] ].

develop_v2 := v_unacc_le &
 [ STEM < "develop" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_develop_v_1_rel",
            PHON.ONSET con ] ].

develop_v3 := v_subj_equi_le &
 [ STEM < "develop" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_develop_v_1_rel",
            PHON.ONSET con ] ].

developed_a1 := adj_pred_intrans_le &
 [ STEM < "developed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_developed_a_1_rel",
            PHON.ONSET con ] ].

developer_n1 := n_ppof_le &
 [ STEM < "developer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_developer_n_of_rel",
            PHON.ONSET con ] ].

development_n1 := n_ppof_le &
 [ STEM < "development" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_development_n_of_rel",
            PHON.ONSET con ] ].

deviate_a1 := adj_intrans_le &
 [ STEM < "deviate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_deviate_a_1_rel",
            PHON.ONSET con ] ].

deviate_n1 := n_intr_le &
 [ STEM < "deviate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_deviate_n_1_rel",
            PHON.ONSET con ] ].

deviate_v1 := v_prep*_intrans_le &
 [ STEM < "deviate" >,
   SYNSEM [ LKEYS [ --COMPKEY _from_p_rel,
                    KEYREL.PRED "_deviate_v_1_rel" ],
            PHON.ONSET con ] ].

deviation_n1 := n_ppcomp_le &
 [ STEM < "deviation" >,
   SYNSEM [ LKEYS [ --COMPKEY _from_p_sel_rel,
                    KEYREL.PRED "_deviation_n_from_rel" ],
            PHON.ONSET con ] ].

device_n1 := n_intr_le &
 [ STEM < "device" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_device_n_1_rel",
            PHON.ONSET con ] ].

device_title := n_title_le &
 [ STEM < "device" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_device_n_1_rel",
            PHON.ONSET con ] ].

devil_n1 := n_intr_le &
 [ STEM < "devil" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_devil_n_1_rel",
            PHON.ONSET con ] ].

devise_v1 := v_np_trans_le &
 [ STEM < "devise" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_devise_v_1_rel",
            PHON.ONSET con ] ].

devisee_n1 := n_intr_le &
 [ STEM < "devisee" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_devisee_n_1_rel",
            PHON.ONSET con ] ].

devito := n_proper_le &
 [ STEM < "devito" >,
   SYNSEM [ LKEYS.KEYREL.CARG "devito",
            PHON.ONSET con ] ].

devote_v1 := v_to_trans_le &
 [ STEM < "devote" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_devote_v_to_rel",
            PHON.ONSET con ] ].

devotee_n1 := n_intr_le &
 [ STEM < "devotee" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_devotee_n_1_rel",
            PHON.ONSET con ] ].

devotion_n1 := n_mass_ppcomp_le &
 [ STEM < "devotion" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_devotion_n_to_rel" ],
            PHON.ONSET con ] ].

devour_v1 := v_np_trans_le &
 [ STEM < "devour" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_devour_v_1_rel",
            PHON.ONSET con ] ].

dew_n1 := n_mass_count_le &
 [ STEM < "dew" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dew_n_1_rel",
            PHON.ONSET con ] ].

dewitt_n1 := n_proper_le &
 [ STEM < "dewitt" >,
   SYNSEM [ LKEYS.KEYREL.CARG "dewitt",
            PHON.ONSET con ] ].

dexterity_n1 := n_mass_le &
 [ STEM < "dexterity" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dexterity_n_1_rel",
            PHON.ONSET con ] ].

dexterous_a1 := adj_intrans_le &
 [ STEM < "dexterous" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dexterous_a_1_rel",
            PHON.ONSET con ] ].

dextrous_a1 := adj_intrans_le &
 [ STEM < "dextrous" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dexterous_a_1_rel",
            PHON.ONSET con ] ].

dfki_n1 := n_proper_le &
 [ STEM < "dfki" >,
   SYNSEM [ LKEYS.KEYREL.CARG "dfki",
            PHON.ONSET con ] ].

dfki_n2 := n_intr_named_le &
 [ STEM < "dfki" >,
   SYNSEM [ LKEYS.KEYREL.CARG "dfki",
            PHON.ONSET con ] ].

dgfs_nd := n_proper_le &
 [ STEM < "dgfs" >,
   SYNSEM [ LKEYS.KEYREL.CARG "dgfs",
            PHON.ONSET con ] ].

dhl_n1 := n_proper_le &
 [ STEM < "dhl" >,
   SYNSEM [ LKEYS.KEYREL.CARG "dhl",
            PHON.ONSET con ] ].

di_n1 := n_proper_le &
 [ STEM < "di" >,
   SYNSEM [ LKEYS.KEYREL.CARG "di",
            PHON.ONSET con ] ].

diagnose_v1 := v_empty_prep*_trans_le &
 [ STEM < "diagnose" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_diagnose_v_with_rel" ],
            PHON.ONSET con ] ].

diagnose_v2 := v_np_as_le &
 [ STEM < "diagnose" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_diagnose_v_as_rel",
            PHON.ONSET con ] ].

diagnose_v3 := v_cp_non_trans_le &
 [ STEM < "diagnose" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_diagnose_v_1_rel",
            PHON.ONSET con ] ].

diagonal_a1 := adj_attr_intrans_le &
 [ STEM < "diagonal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_diagonal_a_1_rel",
            PHON.ONSET con ] ].

diagonally := adv_int_vp_le &
 [ STEM < "diagonally" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_diagonal_a_1_rel",
            PHON.ONSET con ] ].

diagram_n1 := n_intr_le &
 [ STEM < "diagram" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_diagram_n_1_rel",
            PHON.ONSET con ] ].

dial_in_v1 := v_particle_np_le &
 [ STEM < "dial" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_dial_v_in_rel" ],
            PHON.ONSET con ] ].

dial_in_v2 := v_particle_pp_le &
 [ STEM < "dial" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    --OCOMPKEY _to_p_rel,
                    KEYREL.PRED "_dial_v_in_rel" ],
            PHON.ONSET con ] ].

dial_n1 := n_intr_le &
 [ STEM < "dial" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dial_n_1_rel",
            PHON.ONSET con ] ].

dial_v1 := v_np*_trans_le &
 [ STEM < "dial" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dial_v_1_rel",
            PHON.ONSET con ] ].

dialog_n1 := n_intr_le &
 [ STEM < "dialog" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dialogue_n_1_rel",
            PHON.ONSET con ] ].

dialogue_n1 := n_intr_le &
 [ STEM < "dialogue" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dialogue_n_1_rel",
            PHON.ONSET con ] ].

diameter_abb_n1 := n_intr_le &
 [ STEM < "dia" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_diameter_n_1_rel",
            PHON.ONSET con ] ].

diameter_n1 := n_intr_le &
 [ STEM < "diameter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_diameter_n_1_rel",
            PHON.ONSET con ] ].

diamond_n1 := n_intr_le &
 [ STEM < "diamond" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_diamond_n_1_rel",
            PHON.ONSET con ] ].

diana_n1 := n_proper_le &
 [ STEM < "diana" >,
   SYNSEM [ LKEYS.KEYREL.CARG "diana",
            PHON.ONSET con ] ].

dianshan_n1 := n_proper_le &
 [ STEM < "dianshan" >,
   SYNSEM [ LKEYS.KEYREL.CARG "dianshan",
            PHON.ONSET con ] ].

diaphragm_n1 := n_intr_le &
 [ STEM < "diaphragm" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_diaphragm_n_1_rel",
            PHON.ONSET con ] ].

diarthrosis_n1 := n_mass_le &
 [ STEM < "diarthrosis" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_diarthrosis_n_1_rel",
            PHON.ONSET con ] ].

diary_n1 := n_intr_le &
 [ STEM < "diary" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_diary_n_1_rel",
            PHON.ONSET con ] ].

diatom_n1 := n_intr_le &
 [ STEM < "diatom" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_diatom_n_1_rel",
            PHON.ONSET con ] ].

diatonic_a1 := adj_intrans_le &
 [ STEM < "diatonic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_diatonic_a_1_rel",
            PHON.ONSET con ] ].

dick_n1 := n_proper_le &
 [ STEM < "dick" >,
   SYNSEM [ LKEYS.KEYREL.CARG "dick",
            PHON.ONSET con ] ].

dictate_v1 := v_np*_trans_le &
 [ STEM < "dictate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dictate_v_1_rel",
            PHON.ONSET con ] ].

dictate_v2 := v_cp_non_trans_le &
 [ STEM < "dictate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dictate_v_1_rel",
            PHON.ONSET con ] ].

dictates_n1 := n_plur_le &
 [ STEM < "dictate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dictates_n_1_rel",
            PHON.ONSET con ] ].

dictionary_n1 := n_ppof_le &
 [ STEM < "dictionary" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dictionary_n_of_rel",
            PHON.ONSET con ] ].

did1_neg_1 := va_do_neg_past_le &
 [ STEM < "didn't" >,
   SYNSEM.PHON.ONSET con ].

did1_neg_2 := va_do_neg_past_le &
 [ STEM < "didn", "'t" >,
   SYNSEM.PHON.ONSET con ].

did1_pos := va_did_le &
 [ STEM < "did" >,
   SYNSEM.PHON.ONSET con ].

die_down_v1 := v_particle_le &
 [ STEM < "die" >,
   SYNSEM [ LKEYS [ --COMPKEY _down_p_sel_rel,
                    KEYREL.PRED "_die_v_down_rel" ],
            PHON.ONSET con ] ].

die_n1 := n_intr_le &
 [ STEM < "die" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_die_n_1_rel",
            PHON.ONSET con ] ].

die_of_v1 := v_empty_prep_intrans_le &
 [ STEM < "die" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_die_v_of_rel" ],
            PHON.ONSET con ] ].

die_off_v1 := v_particle_le &
 [ STEM < "die" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_die_v_off_rel" ],
            PHON.ONSET con ] ].

die_out_v1 := v_particle_le &
 [ STEM < "die" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_die_v_out_rel" ],
            PHON.ONSET con ] ].

die_v1 := v_unacc_le &
 [ STEM < "die" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_die_v_1_rel",
            PHON.ONSET con ] ].

diepholz_n1 := n_proper_le &
 [ STEM < "diepholz" >,
   SYNSEM [ LKEYS.KEYREL.CARG "diepholz",
            PHON.ONSET con ] ].

diet_n1 := n_intr_le &
 [ STEM < "diet" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_diet_n_1_rel",
            PHON.ONSET con ] ].

diff_n1 := n_proper_le &
 [ STEM < "diff" >,
   SYNSEM [ LKEYS.KEYREL.CARG "diff",
            PHON.ONSET con ] ].

diff_v1 := v_np*_trans_le &
 [ STEM < "diff" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_diff_v_1_rel",
            PHON.ONSET con ] ].

differ_from_v1 := v_empty_prep_intrans_le &
 [ STEM < "differ" >,
   SYNSEM [ LKEYS [ --COMPKEY _from_p_sel_rel,
                    KEYREL.PRED "_differ_v_from_rel" ],
            PHON.ONSET con ] ].

differ_v2 := v_unerg_le &
 [ STEM < "differ" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_differ_v_1_rel",
            PHON.ONSET con ] ].

difference_n1 := n_intr_le &
 [ STEM < "difference" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_difference_n_1_rel",
            PHON.ONSET con ] ].

different_a1 := adj_comp_alt_le &
 [ STEM < "different" >,
   SYNSEM [ LKEYS [ --COMPKEY than_or_from_rel,
                    KEYREL.PRED "_different_a_than-from_rel" ],
            PHON.ONSET con ] ].

differential_n1 := n_intr_le &
 [ STEM < "differential" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_differential_n_1_rel",
            PHON.ONSET con ] ].

differentiate_from_v1 := v_empty_prep_trans_le &
 [ STEM < "differentiate" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _from_p_sel_rel,
                    KEYREL.PRED "_differentiate_v_from_rel" ],
            PHON.ONSET con ] ].

differentiate_v1 := v_np*_trans_le &
 [ STEM < "differentiate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_differentiate_v_1_rel",
            PHON.ONSET con ] ].

differently := adv_int_vp_post_le &
 [ STEM < "differently" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_different_a_than-from_rel",
            PHON.ONSET con ] ].

difficult_a1 := adj_trans_le &
 [ STEM < "difficult" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_difficult_a_for_rel" ],
            PHON.ONSET con ] ].

difficult_a2 := adj_reg_atrans_le &
 [ STEM < "difficult" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_difficult_a_for_rel",
            PHON.ONSET con ] ].

difficult_a3 := adj_tough_atrans_le &
 [ STEM < "difficult" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_difficult_a_for_rel",
            PHON.ONSET con ] ].

difficulty_n1 := n_mass_count_le &
 [ STEM < "difficulty" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_difficulty_n_1_rel",
            PHON.ONSET con ] ].

diffuse_a1 := adj_intrans_le &
 [ STEM < "diffuse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_diffuse_a_1_rel",
            PHON.ONSET con ] ].

diffuse_v1 := v_unacc_le &
 [ STEM < "diffuse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_diffuse_v_1_rel",
            PHON.ONSET con ] ].

diffuse_v2 := v_np_trans_noger_le &
 [ STEM < "diffuse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_diffuse_v_cause_rel",
            PHON.ONSET con ] ].

dig_in_v1 := v_particle_le &
 [ STEM < "dig" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_dig_v_in_rel" ],
            PHON.ONSET con ] ].

dig_n1 := n_intr_le &
 [ STEM < "dig" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dig_n_1_rel",
            PHON.ONSET con ] ].

dig_out_v1 := v_particle_np_le &
 [ STEM < "dig" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_dig_v_out_rel" ],
            PHON.ONSET con ] ].

dig_up_v1 := v_particle_np_le &
 [ STEM < "dig" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_dig_v_up_rel" ],
            PHON.ONSET con ] ].

dig_v1 := v_np*_trans_le &
 [ STEM < "dig" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dig_v_1_rel",
            PHON.ONSET con ] ].

dig_v2 := v_cp_prop_non_trans_le &
 [ STEM < "dig" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dig_v_1_rel",
            PHON.ONSET con ] ].

digerronden := n_proper_le &
 [ STEM < "digerronden" >,
   SYNSEM [ LKEYS.KEYREL.CARG "digerronden",
            PHON.ONSET con ] ].

digest_v1 := v_np*_trans_le &
 [ STEM < "digest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_digest_v_1_rel",
            PHON.ONSET con ] ].

digestion_n1 := n_mass_le &
 [ STEM < "digestion" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_digestion_n_1_rel",
            PHON.ONSET con ] ].

digestive_a1 := adj_intrans_le &
 [ STEM < "digestive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_digestive_a_1_rel",
            PHON.ONSET con ] ].

digestive_n1 := n_intr_le &
 [ STEM < "digestive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_digestive_n_1_rel",
            PHON.ONSET con ] ].

digit_n1 := n_intr_le &
 [ STEM < "digit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_digit_n_1_rel",
            PHON.ONSET con ] ].

digital_a1 := adj_intrans_le &
 [ STEM < "digital" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_digital_a_1_rel",
            PHON.ONSET con ] ].

digital_analog_a1 := adj_intrans_le &
 [ STEM < "digital", "/", "analog" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_digital+analog_a_1_rel",
            PHON.ONSET con ] ].

dignified_a1 := adj_intrans_le &
 [ STEM < "dignified" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dignified_a_1_rel",
            PHON.ONSET con ] ].

dignity_n1 := n_mass_le &
 [ STEM < "dignity" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dignity_n_1_rel",
            PHON.ONSET con ] ].

digraph_n1 := n_intr_le &
 [ STEM < "digraph" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_digraph_n_1_rel",
            PHON.ONSET con ] ].

digress_v1 := v_unerg_le &
 [ STEM < "digress" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_digress_v_1_rel",
            PHON.ONSET con ] ].

digs_n1 := n_plur_le &
 [ STEM < "dig" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_digs_n_1_rel",
            PHON.ONSET con ] ].

dike_n1 := n_intr_le &
 [ STEM < "dike" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dike_n_1_rel",
            PHON.ONSET con ] ].

dilapidation_n1 := n_mass_le &
 [ STEM < "dilapidation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dilapidation_n_1_rel",
            PHON.ONSET con ] ].

diligence_n1 := n_mass_le &
 [ STEM < "diligence" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_diligence_n_1_rel",
            PHON.ONSET con ] ].

diligent_a1 := adj_intrans_le &
 [ STEM < "diligent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_diligent_a_1_rel",
            PHON.ONSET con ] ].

diligently_adv := adv_int_vp_le &
 [ STEM < "diligently" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_diligent_a_1_rel",
            PHON.ONSET con ] ].

dilute_a1 := adj_intrans_le &
 [ STEM < "dilute" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dilute_a_1_rel",
            PHON.ONSET con ] ].

dilute_v1 := v_np_trans_le &
 [ STEM < "dilute" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dilute_v_1_rel",
            PHON.ONSET con ] ].

dim_a1 := adj_intrans_le &
 [ STEM < "dim" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dim_a_1_rel",
            PHON.ONSET con ] ].

dim_v1 := v_np_trans_noger_le &
 [ STEM < "dim" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dim_v_cause_rel",
            PHON.ONSET con ] ].

dim_v2 := v_unacc_le &
 [ STEM < "dim" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dim_v_1_rel",
            PHON.ONSET con ] ].

dimaggio_n1 := n_proper_le &
 [ STEM < "dimaggio" >,
   SYNSEM [ LKEYS.KEYREL.CARG "dimaggio",
            PHON.ONSET con ] ].

dimei_n1 := n_proper_le &
 [ STEM < "dimei" >,
   SYNSEM [ LKEYS.KEYREL.CARG "dimei",
            PHON.ONSET con ] ].

dimension_n1 := n_intr_le &
 [ STEM < "dimension" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dimension_n_1_rel",
            PHON.ONSET con ] ].

diminish_v1 := v_np_trans_noger_le &
 [ STEM < "diminish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_diminish_v_cause_rel",
            PHON.ONSET con ] ].

diminish_v2 := v_unacc_le &
 [ STEM < "diminish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_diminish_v_1_rel",
            PHON.ONSET con ] ].

diminution_n1 := n_mass_count_le &
 [ STEM < "diminution" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_diminution_n_1_rel",
            PHON.ONSET con ] ].

diminutive_a1 := adj_intrans_le &
 [ STEM < "diminutive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_diminutive_a_1_rel",
            PHON.ONSET con ] ].

dimly_adv1 := adv_int_vp_le &
 [ STEM < "dimly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dim_a_1_rel",
            PHON.ONSET con ] ].

dimmer := adj_comp_le &
 [ STEM < "dimmer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dim_a_1_rel",
            PHON.ONSET con ] ].

dimmest_a1 := adj_superl_le &
 [ STEM < "dimmest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dim_a_1_rel",
            PHON.ONSET con ] ].

dine1 := v_unerg_le &
 [ STEM < "dine" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dine_v_1_rel",
            PHON.ONSET con ] ].

diner_n1 := n_proper_le &
 [ STEM < "diner" >,
   SYNSEM [ LKEYS.KEYREL.CARG "diner",
            PHON.ONSET con ] ].

diners_club_n1 := n_proper_le &
 [ STEM < "diners", "club" >,
   SYNSEM [ LKEYS.KEYREL.CARG "diners_club",
            PHON.ONSET con ] ].

ding_lin_n1 := n_proper_le &
 [ STEM < "ding", "lin" >,
   SYNSEM [ LKEYS.KEYREL.CARG "ding_lin",
            PHON.ONSET con ] ].

dingpu_n1 := n_proper_le &
 [ STEM < "dingpu" >,
   SYNSEM [ LKEYS.KEYREL.CARG "dingpu",
            PHON.ONSET con ] ].

dingxiang_n1 := n_proper_le &
 [ STEM < "dingxiang" >,
   SYNSEM [ LKEYS.KEYREL.CARG "dingxiang",
            PHON.ONSET con ] ].

dining_a1 := adj_intrans_le &
 [ STEM < "dining" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dining_a_1_rel",
            PHON.ONSET con ] ].

dinner_n1 := n_mass_count_le &
 [ STEM < "dinner" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dinner_n_1_rel",
            PHON.ONSET con ] ].

dinner_time_n1 := n_mealtime_le &
 [ STEM < "dinner" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dinner_n_1_rel",
            PHON.ONSET con ] ].

diocese_n1 := n_intr_le &
 [ STEM < "diocese" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_diocese_n_1_rel",
            PHON.ONSET con ] ].

dip_n1 := n_intr_le &
 [ STEM < "dip" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dip_n_1_rel",
            PHON.ONSET con ] ].

dip_v1 := v_prep_dir_le &
 [ STEM < "dip" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dip_v_1_rel",
            PHON.ONSET con ] ].

dip_v2 := v_np_trans_noger_le &
 [ STEM < "dip" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dip_v_cause_rel",
            PHON.ONSET con ] ].

dip_v3 := v_np_prep_trans_dors_le &
 [ STEM < "dip" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dip_v_cause_rel",
            PHON.ONSET con ] ].

diploma_n1 := n_intr_le &
 [ STEM < "diploma" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_diploma_n_1_rel",
            PHON.ONSET con ] ].

diplomat_n1 := n_intr_le &
 [ STEM < "diplomat" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_diplomat_n_1_rel",
            PHON.ONSET con ] ].

diplomatic_a1 := adj_intrans_le &
 [ STEM < "diplomatic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_diplomatic_a_1_rel",
            PHON.ONSET con ] ].

dire_a1 := adj_intrans_le &
 [ STEM < "dire" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dire_a_1_rel",
            PHON.ONSET con ] ].

direct_a1 := adj_intrans_le &
 [ STEM < "direct" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_direct_a_1_rel",
            PHON.ONSET con ] ].

direct_v1 := v_np*_trans_le &
 [ STEM < "direct" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_direct_v_to_rel",
            PHON.ONSET con ] ].

direct_v2 := v_to_trans_le &
 [ STEM < "direct" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_direct_v_to_rel",
            PHON.ONSET con ] ].

direct_v3 := v_obj_equi_le &
 [ STEM < "direct" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_direct_v_to_rel",
            PHON.ONSET con ] ].

direct_v4 := v_cp_ques_fin_inf_non_trans_le &
 [ STEM < "direct" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_direct_v_to_rel",
            PHON.ONSET con ] ].

direction_n1 := n_mass_count_ppof_le &
 [ STEM < "direction" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_direction_n_of_rel",
            PHON.ONSET con ] ].

directional_a1 := adj_intrans_le &
 [ STEM < "directional" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_directional_a_1_rel",
            PHON.ONSET con ] ].

directive_n1 := n_intr_le &
 [ STEM < "directive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_directive_n_1_rel",
            PHON.ONSET con ] ].

directly_adv1 := adv_int_vp_le &
 [ STEM < "directly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_direct_a_1_rel",
            PHON.ONSET con ] ].

directly_m_deg := adv_degree_spec_m_le &
 [ STEM < "directly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_directly_x_m_rel",
            PHON.ONSET con ] ].

director_n1 := n_ppof_le &
 [ STEM < "director" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_director_n_of_rel",
            PHON.ONSET con ] ].

director_ttl := n_title_le &
 [ STEM < "director" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_director_n_of_rel",
            PHON.ONSET con ] ].

directorate_n1 := n_intr_le &
 [ STEM < "directorate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_directorate_n_1_rel",
            PHON.ONSET con ] ].

directory_n1 := n_intr_le &
 [ STEM < "directory" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_directory_n_1_rel",
            PHON.ONSET con ] ].

dirt_n1 := n_mass_le &
 [ STEM < "dirt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dirt_n_1_rel",
            PHON.ONSET con ] ].

dirty_a1 := adj_intrans_le &
 [ STEM < "dirty" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dirty_a_1_rel",
            PHON.ONSET con ] ].

dirty_v1 := v_np_trans_le &
 [ STEM < "dirty" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dirty_v_1_rel",
            PHON.ONSET con ] ].

disable_v1 := v_np_trans_le &
 [ STEM < "disable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_disable_v_1_rel",
            PHON.ONSET con ] ].

disadvantage_n1 := n_intr_nosort_le &
 [ STEM < "disadvantage" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_disadvantage_n_1_rel",
            PHON.ONSET con ] ].

disadvantageous_a1 := adj_intrans_le &
 [ STEM < "disadvantageous" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_disadvantageous_a_1_rel",
            PHON.ONSET con ] ].

disagree_v1 := v_double_pp*_le &
 [ STEM < "disagree" >,
   SYNSEM [ LKEYS [ --COMPKEY _with_p_rel,
                    --OCOMPKEY _about_p_rel,
                    KEYREL.PRED "_disagree_v_1_rel" ],
            PHON.ONSET con ] ].

disagree_v2 := v_cp_prop_non_trans_le &
 [ STEM < "disagree" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_disagree_v_1_rel",
            PHON.ONSET con ] ].

disagreeable_a1 := adj_intrans_le &
 [ STEM < "disagreeable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_disagreeable_a_1_rel",
            PHON.ONSET con ] ].

disagreement_n1 := n_mass_count_le &
 [ STEM < "disagreement" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_disagreement_n_1_rel",
            PHON.ONSET con ] ].

disappear_v1 := v_prep_dir_le &
 [ STEM < "disappear" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_disappear_v_1_rel",
            PHON.ONSET con ] ].

disappoint_v1 := v_np_trans_le &
 [ STEM < "disappoint" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_disappoint_v_1_rel",
            PHON.ONSET con ] ].

disappointed_a1 := adj_trans_le &
 [ STEM < "disappointed" >,
   SYNSEM [ LKEYS [ --COMPKEY _at_p_sel_rel,
                    KEYREL.PRED "_disappointed_a_at-by-in_rel" ],
            PHON.ONSET con ] ].

disappointed_a2 := adj_trans_oblig_le &
 [ STEM < "disappointed" >,
   SYNSEM [ LKEYS [ --COMPKEY _by_p_sel_rel,
                    KEYREL.PRED "_disappointed_a_at-by-in_rel" ],
            PHON.ONSET con ] ].

disappointed_a3 := adj_trans_oblig_le &
 [ STEM < "disappointed" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_disappointed_a_at-by-in_rel" ],
            PHON.ONSET con ] ].

disappointment_n1 := n_cpcomp_fin_le &
 [ STEM < "disappointment" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_disappointment_n_at_rel",
            PHON.ONSET con ] ].

disappointment_n2 := n_ppcomp_le &
 [ STEM < "disappointment" >,
   SYNSEM [ LKEYS [ --COMPKEY _at_p_sel_rel,
                    KEYREL.PRED "_disappointment_n_at_rel" ],
            PHON.ONSET con ] ].

disaster_n1 := n_mass_count_le &
 [ STEM < "disaster" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_disaster_n_1_rel",
            PHON.ONSET con ] ].

disband_v1 := v_np_trans_noger_le &
 [ STEM < "disband" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_disband_v_cause_rel",
            PHON.ONSET con ] ].

disband_v2 := v_unacc_le &
 [ STEM < "disband" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_disband_v_1_rel",
            PHON.ONSET con ] ].

disbelief_n1 := n_mass_le &
 [ STEM < "disbelief" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_disbelief_n_1_rel",
            PHON.ONSET con ] ].

discard_n1 := n_intr_le &
 [ STEM < "discard" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_discard_n_1_rel",
            PHON.ONSET con ] ].

discard_v1 := v_np*_trans_le &
 [ STEM < "discard" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_discard_v_1_rel",
            PHON.ONSET con ] ].

discard_v2 := v_np_as_le &
 [ STEM < "discard" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_discard_v_as_rel",
            PHON.ONSET con ] ].

discern_v1 := v_cp_non_trans_le &
 [ STEM < "discern" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_discern_v_1_rel",
            PHON.ONSET con ] ].

discern_v2 := v_np_trans_le &
 [ STEM < "discern" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_discern_v_1_rel",
            PHON.ONSET con ] ].

discern_v3 := v_obj_equi_le &
 [ STEM < "discern" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_discern_v_1_rel",
            PHON.ONSET con ] ].

discernment_n1 := n_mass_le &
 [ STEM < "discernment" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_discernment_n_1_rel",
            PHON.ONSET con ] ].

discharge_n1 := n_mass_count_ppof_le &
 [ STEM < "discharge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_discharge_n_of_rel",
            PHON.ONSET con ] ].

discharge_v1 := v_np_trans_le &
 [ STEM < "discharge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_discharge_v_cause_rel",
            PHON.ONSET con ] ].

discharge_v2 := v_unacc_dir_le &
 [ STEM < "discharge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_discharge_v_1_rel",
            PHON.ONSET con ] ].

disciple_n1 := n_intr_le &
 [ STEM < "disciple" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_disciple_n_1_rel",
            PHON.ONSET con ] ].

disciple_v1 := v_np_trans_le &
 [ STEM < "disciple" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_disciple_v_1_rel",
            PHON.ONSET con ] ].

disciplinary_a1 := adj_intrans_le &
 [ STEM < "disciplinary" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_disciplinary_a_1_rel",
            PHON.ONSET con ] ].

discipline_n1 := n_mass_count_le &
 [ STEM < "discipline" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_discipline_n_1_rel",
            PHON.ONSET con ] ].

discipline_v1 := v_np_trans_le &
 [ STEM < "discipline" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_discipline_v_1_rel",
            PHON.ONSET con ] ].

disclaim_v1 := v_np_trans_le &
 [ STEM < "disclaim" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_disclaim_v_1_rel",
            PHON.ONSET con ] ].

disclose_v1 := v_to*_trans_le &
 [ STEM < "disclose" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_disclose_v_to_rel",
            PHON.ONSET con ] ].

disclose_v2 := v_cp_non_trans_le &
 [ STEM < "disclose" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_disclose_v_1_rel",
            PHON.ONSET con ] ].

disclosure_n1 := n_mass_count_le &
 [ STEM < "disclosure" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_disclosure_n_1_rel",
            PHON.ONSET con ] ].

disco_n1 := n_intr_le &
 [ STEM < "disco" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_disco_n_1_rel",
            PHON.ONSET con ] ].

discoloration_n1 := n_mass_count_le &
 [ STEM < "discoloration" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_discoloration_n_1_rel",
            PHON.ONSET con ] ].

discomfit_v1 := v_np_trans_le &
 [ STEM < "discomfit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_discomfit_v_1_rel",
            PHON.ONSET con ] ].

discomfort_n1 := n_mass_count_le &
 [ STEM < "discomfort" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_discomfort_n_1_rel",
            PHON.ONSET con ] ].

disconcert_v1 := v_np_trans_le &
 [ STEM < "disconcert" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_disconcert_v_1_rel",
            PHON.ONSET con ] ].

disconcerting_a1 := adj_intrans_le &
 [ STEM < "disconcerting" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_disconcerting_a_1_rel",
            PHON.ONSET con ] ].

disconnect_v1 := v_np_trans_le &
 [ STEM < "disconnect" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_disconnect_v_1_rel",
            PHON.ONSET con ] ].

discontent_n1 := n_mass_le &
 [ STEM < "discontent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_discontent_n_1_rel",
            PHON.ONSET con ] ].

discontinue_v1 := v_np_trans_le &
 [ STEM < "discontinue" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_discontinue_v_1_rel",
            PHON.ONSET con ] ].

discontinue_v2 := v_subj_equi_prp_le &
 [ STEM < "discontinue" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_discontinue_v_1_rel",
            PHON.ONSET con ] ].

discordant_a1 := adj_intrans_le &
 [ STEM < "discordant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_discordant_a_1_rel",
            PHON.ONSET con ] ].

discount_n := n_mass_count_le &
 [ STEM < "discount" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_discount_n_1_rel",
            PHON.ONSET con ] ].

discount_v1 := v_np_trans_le &
 [ STEM < "discount" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_discount_v_1_rel",
            PHON.ONSET con ] ].

discount_v2 := v_np_as_le &
 [ STEM < "discount" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_discount_v_as_rel",
            PHON.ONSET con ] ].

discourage_v1 := v_np_trans_le &
 [ STEM < "discourage" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_discourage_v_1_rel",
            PHON.ONSET con ] ].

discourage_v2 := v_obj_equi_from_le &
 [ STEM < "discourage" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_discourage_v_from_rel",
            PHON.ONSET con ] ].

discourse_n1 := n_mass_count_le &
 [ STEM < "discourse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_discourse_n_1_rel",
            PHON.ONSET con ] ].

discourtesy_n1 := n_mass_count_le &
 [ STEM < "discourtesy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_discourtesy_n_1_rel",
            PHON.ONSET con ] ].

discover_v1 := v_np*_trans_le &
 [ STEM < "discover" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_discover_v_1_rel",
            PHON.ONSET con ] ].

discover_v3 := v_cp_fin_inf_non_trans_le &
 [ STEM < "discover" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_discover_v_1_rel",
            PHON.ONSET con ] ].

discoverer_n1 := n_ppof_le &
 [ STEM < "discoverer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_discoverer_n_of_rel",
            PHON.ONSET con ] ].

discovery_n1 := n_mass_count_ppof_le &
 [ STEM < "discovery" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_discovery_n_of_rel",
            PHON.ONSET con ] ].

discredit_n1 := n_mass_le &
 [ STEM < "discredit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_discredit_n_1_rel",
            PHON.ONSET con ] ].

discredit_v1 := v_np_trans_le &
 [ STEM < "discredit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_discredit_v_1_rel",
            PHON.ONSET con ] ].

discreet_a1 := adj_intrans_le &
 [ STEM < "discreet" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_discreet_a_1_rel",
            PHON.ONSET con ] ].

discreetly := adv_int_vp_le &
 [ STEM < "discreetly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_discreet_a_1_rel",
            PHON.ONSET con ] ].

discriminate_v1 := v_np*_trans_le &
 [ STEM < "discriminate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_discriminate_v_1_rel",
            PHON.ONSET con ] ].

discuss_v1 := v_np_trans_le &
 [ STEM < "discuss" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_discuss_v_1_rel",
            PHON.ONSET con ] ].

discuss_v2 := v_cp_ques_fin_inf_non_trans_le &
 [ STEM < "discuss" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_discuss_v_1_rel",
            PHON.ONSET con ] ].

discussion_n1 := n_mass_count_le &
 [ STEM < "discussion" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_discussion_n_1_rel",
            PHON.ONSET con ] ].

disease_n1 := n_mass_count_le &
 [ STEM < "disease" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_disease_n_1_rel",
            PHON.ONSET con ] ].

disembark_from_v1 := v_prep*_intrans_le &
 [ STEM < "disembark" >,
   SYNSEM [ LKEYS [ --COMPKEY _from_p_rel,
                    KEYREL.PRED "_disembark_v_1_rel" ],
            PHON.ONSET con ] ].

disgrace_n1 := n_mass_count_le &
 [ STEM < "disgrace" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_disgrace_n_1_rel",
            PHON.ONSET con ] ].

disgrace_v1 := v_np_trans_le &
 [ STEM < "disgrace" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_disgrace_v_1_rel",
            PHON.ONSET con ] ].

disguise_n1 := n_mass_count_le &
 [ STEM < "disguise" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_disguise_n_1_rel",
            PHON.ONSET con ] ].

disguise_v1 := v_np_trans_le &
 [ STEM < "disguise" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_disguise_v_1_rel",
            PHON.ONSET con ] ].

disguise_v2 := v_np_as_le &
 [ STEM < "disguise" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_disguise_v_as_rel",
            PHON.ONSET con ] ].

disgust_n1 := n_mass_le &
 [ STEM < "disgust" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_disgust_n_1_rel",
            PHON.ONSET con ] ].

disgust_v1 := v_np_trans_le &
 [ STEM < "disgust" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_disgust_v_1_rel",
            PHON.ONSET con ] ].

dish_n1 := n_ppof_le &
 [ STEM < "dish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dish_n_of_rel",
            PHON.ONSET con ] ].

dish_out_v1 := v_particle_np_le &
 [ STEM < "dish" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_dish_v_out_rel" ],
            PHON.ONSET con ] ].

dishonor_n1 := n_mass_count_le &
 [ STEM < "dishonor" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dishonor_n_1_rel",
            PHON.ONSET con ] ].

disillusion_v1 := v_np_trans_le &
 [ STEM < "disillusion" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_disillusion_v_1_rel",
            PHON.ONSET con ] ].

disinherit_v1 := v_np_trans_le &
 [ STEM < "disinherit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_disinherit_v_1_rel",
            PHON.ONSET con ] ].

disk_n1 := n_intr_le &
 [ STEM < "disk" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_disk_n_1_rel",
            PHON.ONSET con ] ].

diskette_n1 := n_intr_le &
 [ STEM < "diskette" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_diskette_n_1_rel",
            PHON.ONSET con ] ].

dislike_n1 := n_mass_count_le &
 [ STEM < "dislike" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dislike_n_1_rel",
            PHON.ONSET con ] ].

dislike_v1 := v_np_trans_le &
 [ STEM < "dislike" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dislike_v_1_rel",
            PHON.ONSET con ] ].

dislike_v2 := v_cp_prop_non_trans_le &
 [ STEM < "dislike" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dislike_v_1_rel",
            PHON.ONSET con ] ].

dislike_v3 := v_subj_equi_prp_le &
 [ STEM < "dislike" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dislike_v_1_rel",
            PHON.ONSET con ] ].

dislike_v4 := v_expl_obj_cp_le &
 [ STEM < "dislike" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dislike_v_1_rel",
            PHON.ONSET con ] ].

dislocate_v1 := v_np_trans_le &
 [ STEM < "dislocate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dislocate_v_1_rel",
            PHON.ONSET con ] ].

dismal_a1 := adj_intrans_le &
 [ STEM < "dismal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dismal_a_1_rel",
            PHON.ONSET con ] ].

dismantle_v1 := v_np_trans_le &
 [ STEM < "dismantle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dismantle_v_1_rel",
            PHON.ONSET con ] ].

dismiss_v1 := v_np*_trans_le &
 [ STEM < "dismiss" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dismiss_v_1_rel",
            PHON.ONSET con ] ].

dismiss_v2 := v_np_as_le &
 [ STEM < "dismiss" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dismiss_v_as_rel",
            PHON.ONSET con ] ].

dismissive_isect := adj_intrans_le &
 [ STEM < "dismissive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dismissive_a_1_rel",
            PHON.ONSET con ] ].

dismissively := adv_int_vp_le &
 [ STEM < "dismissively" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dismissive_a_1_rel",
            PHON.ONSET con ] ].

dismount_v1 := v_unerg_le &
 [ STEM < "dismount" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dismount_v_1_rel",
            PHON.ONSET con ] ].

disneyland_n1 := n_proper_city_le &
 [ STEM < "disneyland" >,
   SYNSEM [ LKEYS.KEYREL.CARG "disneyland",
            PHON.ONSET con ] ].

disorder_n1 := n_mass_count_le &
 [ STEM < "disorder" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_disorder_n_1_rel",
            PHON.ONSET con ] ].

disown_v1 := v_np_trans_le &
 [ STEM < "disown" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_disown_v_1_rel",
            PHON.ONSET con ] ].

disparage_v1 := v_np_trans_le &
 [ STEM < "disparage" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_disparage_v_1_rel",
            PHON.ONSET con ] ].

disparagingly := adv_int_vp_le &
 [ STEM < "disparagingly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_disparaging_a_1_rel",
            PHON.ONSET con ] ].

dispatch_n1 := n_ppof_le &
 [ STEM < "dispatch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dispatch_n_of_rel",
            PHON.ONSET con ] ].

dispel_v1 := v_np_trans_le &
 [ STEM < "dispel" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dispel_v_1_rel",
            PHON.ONSET con ] ].

dispensation_n1 := n_mass_count_le &
 [ STEM < "dispensation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dispensation_n_1_rel",
            PHON.ONSET con ] ].

dispense_v1 := v_np_trans_le &
 [ STEM < "dispense" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dispense_v_1_rel",
            PHON.ONSET con ] ].

dispense_with_v1 := v_empty_prep_intrans_le &
 [ STEM < "dispense" >,
   SYNSEM [ LKEYS [ --COMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_dispense_v_with_rel" ],
            PHON.ONSET con ] ].

disperse_v1 := v_np_trans_le &
 [ STEM < "disperse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_disperse_v_cause_rel",
            PHON.ONSET con ] ].

disperse_v2 := v_unacc_dir_le &
 [ STEM < "disperse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_disperse_v_1_rel",
            PHON.ONSET con ] ].

disperse_v3 := v_np_prep_trans_dors_le &
 [ STEM < "disperse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_disperse_v_cause_rel",
            PHON.ONSET con ] ].

displace_v1 := v_np_trans_le &
 [ STEM < "displace" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_displace_v_1_rel",
            PHON.ONSET con ] ].

displace_v2 := v_np_as_le &
 [ STEM < "displace" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_displace_v_as_rel",
            PHON.ONSET con ] ].

display_n1 := n_mass_count_ppof_le &
 [ STEM < "display" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_display_n_of_rel",
            PHON.ONSET con ] ].

display_v1 := v_to*_trans_le &
 [ STEM < "display" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_display_v_to_rel",
            PHON.ONSET con ] ].

displeasure_n1 := n_mass_le &
 [ STEM < "displeasure" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_displeasure_n_1_rel",
            PHON.ONSET con ] ].

disposal_n1 := n_mass_count_le &
 [ STEM < "disposal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_disposal_n_1_rel",
            PHON.ONSET con ] ].

dispose_of_v1 := v_empty_prep_intrans_le &
 [ STEM < "dispose" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_dispose_v_of_rel" ],
            PHON.ONSET con ] ].

dispose_v1 := v_np_trans_le &
 [ STEM < "dispose" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dispose_v_1_rel",
            PHON.ONSET con ] ].

disposition_n1 := n_intr_le &
 [ STEM < "disposition" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_disposition_n_of_rel",
            PHON.ONSET con ] ].

disposition_n2 := n_mass_ppcomp_le &
 [ STEM < "disposition" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_disposition_n_of_rel" ],
            PHON.ONSET con ] ].

dispute_n1 := n_mass_count_le &
 [ STEM < "dispute" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dispute_n_1_rel",
            PHON.ONSET con ] ].

dispute_v1 := v_np_trans_le &
 [ STEM < "dispute" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dispute_v_1_rel",
            PHON.ONSET con ] ].

dispute_v2 := v_cp_non_trans_le &
 [ STEM < "dispute" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dispute_v_1_rel",
            PHON.ONSET con ] ].

disqualify_v1 := v_empty_prep*_trans_le &
 [ STEM < "disqualify" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _from_p_sel_rel,
                    KEYREL.PRED "_disqualify_v_from_rel" ],
            PHON.ONSET con ] ].

disqualify_v2 := v_obj_equi_from_le &
 [ STEM < "disqualify" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_disqualify_v_from_rel",
            PHON.ONSET con ] ].

disquiet_n1 := n_mass_le &
 [ STEM < "disquiet" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_disquiet_n_1_rel",
            PHON.ONSET con ] ].

disregard_v1 := v_np*_trans_le &
 [ STEM < "disregard" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_disregard_v_1_rel",
            PHON.ONSET con ] ].

disrepair_n1 := n_mass_le &
 [ STEM < "disrepair" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_disrepair_n_1_rel",
            PHON.ONSET con ] ].

disrupt_v1 := v_np_trans_le &
 [ STEM < "disrupt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_disrupt_v_1_rel",
            PHON.ONSET con ] ].

dissatisfied_isect := adj_intrans_le &
 [ STEM < "dissatisfied" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dissatisfied_a_1_rel",
            PHON.ONSET con ] ].

dissection_n1 := n_mass_count_le &
 [ STEM < "dissection" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dissection_n_1_rel",
            PHON.ONSET con ] ].

dissension_n1 := n_mass_le &
 [ STEM < "dissension" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dissension_n_1_rel",
            PHON.ONSET con ] ].

dissent_n1 := n_mass_count_le &
 [ STEM < "dissent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dissent_n_1_rel",
            PHON.ONSET con ] ].

dissent_v1 := v_unerg_le &
 [ STEM < "dissent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dissent_v_1_rel",
            PHON.ONSET con ] ].

dissimilar_a1 := adj_intrans_le &
 [ STEM < "dissimilar" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dissimilar_a_1_rel",
            PHON.ONSET con ] ].

dissolve_v1 := v_unacc_dir_le &
 [ STEM < "dissolve" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dissolve_v_1_rel",
            PHON.ONSET con ] ].

dissolve_v2 := v_np_trans_le &
 [ STEM < "dissolve" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dissolve_v_cause_rel",
            PHON.ONSET con ] ].

distance_n1 := n_mass_count_le &
 [ STEM < "distance" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_distance_n_1_rel",
            PHON.ONSET con ] ].

distance_n2 := n_meas_nocmpnd_le &
 [ STEM < "distance" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_distance_n_1_rel",
            PHON.ONSET con ] ].

distance_v1 := v_empty_prep*_trans_le &
 [ STEM < "distance" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _from_p_sel_rel,
                    KEYREL.PRED "_distance_v_from_rel" ],
            PHON.ONSET con ] ].

distant_a1 := adj_intrans_le &
 [ STEM < "distant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_distant_a_1_rel",
            PHON.ONSET con ] ].

distasteful_a1 := adj_intrans_le &
 [ STEM < "distasteful" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_distasteful_a_1_rel",
            PHON.ONSET con ] ].

distend_v1 := v_np_trans_le &
 [ STEM < "distend" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_distend_v_1_rel",
            PHON.ONSET con ] ].

distill_v1 := v_np_trans_le &
 [ STEM < "distill" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_distill_v_1_rel",
            PHON.ONSET con ] ].

distiller_n1 := n_intr_le &
 [ STEM < "distiller" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_distiller_n_1_rel",
            PHON.ONSET con ] ].

distinct_a1 := adj_intrans_le &
 [ STEM < "distinct" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_distinct_a_1_rel",
            PHON.ONSET con ] ].

distinction_n1 := n_mass_count_le &
 [ STEM < "distinction" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_distinction_n_1_rel",
            PHON.ONSET con ] ].

distinctive_a1 := adj_intrans_le &
 [ STEM < "distinctive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_distinctive_a_1_rel",
            PHON.ONSET con ] ].

distinctive_n1 := n_intr_le &
 [ STEM < "distinctive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_distinctive_n_1_rel",
            PHON.ONSET con ] ].

distinctly_adv1 := adv_int_vp_post_le &
 [ STEM < "distinctly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_distinct_a_1_rel",
            PHON.ONSET con ] ].

distinguish_between_v1 := v_empty_prep_intrans_le &
 [ STEM < "distinguish" >,
   SYNSEM [ LKEYS [ --COMPKEY _between_p_sel_rel,
                    KEYREL.PRED "_distinguish_v_between_rel" ],
            PHON.ONSET con ] ].

distinguish_v1 := v_empty_prep*_trans_le &
 [ STEM < "distinguish" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _from_p_sel_rel,
                    KEYREL.PRED "_distinguish_v_from_rel" ],
            PHON.ONSET con ] ].

distinguishable_a1 := adj_intrans_le &
 [ STEM < "distinguishable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_distinguishable_a_1_rel",
            PHON.ONSET con ] ].

distort_v1 := v_np_trans_noger_le &
 [ STEM < "distort" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_distort_v_cause_rel",
            PHON.ONSET con ] ].

distort_v2 := v_unacc_le &
 [ STEM < "distort" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_distort_v_1_rel",
            PHON.ONSET con ] ].

distract_v1 := v_empty_prep*_trans_le &
 [ STEM < "distract" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _from_p_sel_rel,
                    KEYREL.PRED "_distract_v_from_rel" ],
            PHON.ONSET con ] ].

distraction_n1 := n_intr_le &
 [ STEM < "distraction" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_distraction_n_1_rel",
            PHON.ONSET con ] ].

distress_n1 := n_mass_le &
 [ STEM < "distress" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_distress_n_1_rel",
            PHON.ONSET con ] ].

distress_v1 := v_np_trans_le &
 [ STEM < "distress" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_distress_v_1_rel",
            PHON.ONSET con ] ].

distressingly_deg := adv_degree_spec_v_le &
 [ STEM < "distressingly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_distressingly_x_deg_rel",
            PHON.ONSET con ] ].

distribute_v1 := v_to*_trans_le &
 [ STEM < "distribute" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_distribute_v_to_rel",
            PHON.ONSET con ] ].

distribution_n1 := n_mass_count_le &
 [ STEM < "distribution" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_distribution_n_1_rel",
            PHON.ONSET con ] ].

distributive_a1 := adj_intrans_le &
 [ STEM < "distributive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_distributive_a_1_rel",
            PHON.ONSET con ] ].

distributor_n1 := n_ppof_le &
 [ STEM < "distributor" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_distributor_n_of_rel",
            PHON.ONSET con ] ].

district_n1 := n_intr_le &
 [ STEM < "district" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_district_n_1_rel",
            PHON.ONSET con ] ].

district_post_ttl := n_post_title_le &
 [ STEM < "district" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_district_n_1_rel",
            PHON.ONSET con ] ].

disturb_v1 := v_np_trans_le &
 [ STEM < "disturb" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_disturb_v_1_rel",
            PHON.ONSET con ] ].

disturbance_n1 := n_intr_le &
 [ STEM < "disturbance" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_disturbance_n_1_rel",
            PHON.ONSET con ] ].

disturbed_isect := adj_intrans_le &
 [ STEM < "disturbed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_disturbed_a_1_rel",
            PHON.ONSET con ] ].

disunite_v1 := v_np_trans_le &
 [ STEM < "disunite" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_disunite_v_1_rel",
            PHON.ONSET con ] ].

disuse_n1 := n_mass_le &
 [ STEM < "disuse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_disuse_n_1_rel",
            PHON.ONSET con ] ].

disused_a1 := adj_intrans_le &
 [ STEM < "disused" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_disused_a_1_rel",
            PHON.ONSET con ] ].

ditch_n1 := n_intr_le &
 [ STEM < "ditch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ditch_n_1_rel",
            PHON.ONSET con ] ].

ditch_v1 := v_np_trans_le &
 [ STEM < "ditch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ditch_v_1_rel",
            PHON.ONSET con ] ].

dither_v1 := v_unerg_le &
 [ STEM < "dither" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dither_v_1_rel",
            PHON.ONSET con ] ].

dive_n1 := n_intr_le &
 [ STEM < "dive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dive_n_1_rel",
            PHON.ONSET con ] ].

dive_v1 := v_prep_dir_le &
 [ STEM < "dive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dive_v_1_rel",
            PHON.ONSET con ] ].

diver_n1 := n_intr_le &
 [ STEM < "diver" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_diver_n_1_rel",
            PHON.ONSET con ] ].

diverge_v1 := v_unerg_le &
 [ STEM < "diverge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_diverge_v_1_rel",
            PHON.ONSET con ] ].

divers_a1 := adj_intrans_le &
 [ STEM < "divers" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_divers_a_1_rel",
            PHON.ONSET con ] ].

diverse_a1 := adj_intrans_le &
 [ STEM < "diverse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_diverse_a_1_rel",
            PHON.ONSET con ] ].

diversification_n1 := n_mass_le &
 [ STEM < "diversification" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_diversification_n_1_rel",
            PHON.ONSET con ] ].

diversify_v1 := v_np*_trans_le &
 [ STEM < "diversify" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_diversify_v_1_rel",
            PHON.ONSET con ] ].

diversion_n1 := n_mass_count_ppof_le &
 [ STEM < "diversion" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_diversion_n_of_rel",
            PHON.ONSET con ] ].

diversity_n1 := n_mass_count_le &
 [ STEM < "diversity" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_diversity_n_1_rel",
            PHON.ONSET con ] ].

divert_v1 := v_np_trans_le &
 [ STEM < "divert" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_divert_v_1_rel",
            PHON.ONSET con ] ].

divert_v2 := v_np_prep_trans_dors_le &
 [ STEM < "divert" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_divert_v_1_rel",
            PHON.ONSET con ] ].

divide_n1 := n_intr_le &
 [ STEM < "divide" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_divide_n_1_rel",
            PHON.ONSET con ] ].

divide_off_v1 := v_particle_np_le &
 [ STEM < "divide" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_divide_v_off_rel" ],
            PHON.ONSET con ] ].

divide_off_v2 := v_particle_le &
 [ STEM < "divide" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_divide_v_off_rel" ],
            PHON.ONSET con ] ].

divide_up_v1 := v_particle_np_le &
 [ STEM < "divide" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_divide_v_up_rel" ],
            PHON.ONSET con ] ].

divide_up_v2 := v_particle_le &
 [ STEM < "divide" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_divide_v_up_rel" ],
            PHON.ONSET con ] ].

divide_v1 := v_np_trans_noger_le &
 [ STEM < "divide" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_divide_v_cause_rel",
            PHON.ONSET con ] ].

divide_v2 := v_unacc_le &
 [ STEM < "divide" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_divide_v_1_rel",
            PHON.ONSET con ] ].

divine_a1 := adj_intrans_le &
 [ STEM < "divine" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_divine_a_1_rel",
            PHON.ONSET con ] ].

divine_n1 := n_intr_sg_le &
 [ STEM < "divine" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_divine_n_1_rel",
            PHON.ONSET con ] ].

divinity_n1 := n_mass_le &
 [ STEM < "divinity" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_divinity_n_1_rel",
            PHON.ONSET con ] ].

division_n1 := n_mass_count_ppof_le &
 [ STEM < "division" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_division_n_of_rel",
            PHON.ONSET con ] ].

divorce_from_v1 := v_empty_prep_trans_le &
 [ STEM < "divorce" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _from_p_sel_rel,
                    KEYREL.PRED "_divorce_v_from_rel" ],
            PHON.ONSET con ] ].

divorce_from_v2 := v_empty_prep_intrans_le &
 [ STEM < "divorce" >,
   SYNSEM [ LKEYS [ --COMPKEY _from_p_sel_rel,
                    KEYREL.PRED "_divorce_v_from_rel" ],
            PHON.ONSET con ] ].

divorce_n1 := n_mass_count_le &
 [ STEM < "divorce" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_divorce_n_1_rel",
            PHON.ONSET con ] ].

divorce_v1 := v_np*_trans_le &
 [ STEM < "divorce" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_divorce_v_1_rel",
            PHON.ONSET con ] ].

dizzy_a1 := adj_intrans_le &
 [ STEM < "dizzy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dizzy_a_1_rel",
            PHON.ONSET con ] ].

dklu_nd := n_proper_le &
 [ STEM < "dklu" >,
   SYNSEM [ LKEYS.KEYREL.CARG "dklu",
            PHON.ONSET con ] ].

dmark_n := n_intr_le &
 [ STEM < "d", "mark" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_deutschmark_n_1_rel",
            PHON.ONSET con ] ].

dmarksign_n1 := n_numcomp_le &
 [ STEM < "dm" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_deutschmark_n_1_rel",
            PHON.ONSET con ] ].

dna_n1 := n_proper_le &
 [ STEM < "dna" >,
   SYNSEM [ LKEYS.KEYREL.CARG "dna",
            PHON.ONSET con ] ].

dnt_n1 := n_proper_le &
 [ STEM < "dnt" >,
   SYNSEM [ LKEYS.KEYREL.CARG "dnt",
            PHON.ONSET con ] ].

do1_neg_1 := va_dont_neg_pres_le &
 [ STEM < "don't" >,
   SYNSEM.PHON.ONSET con ].

do1_neg_2 := va_dont_neg_pres_le &
 [ STEM < "don", "'t" >,
   SYNSEM.PHON.ONSET con ].

do1_pos := va_do_fin_le &
 [ STEM < "do" >,
   SYNSEM.PHON.ONSET con ].

do2 := v_np_trans_le &
 [ STEM < "do" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_do_v_1_rel",
            PHON.ONSET con ] ].

do_about_v1 := v_empty_prep_trans_le &
 [ STEM < "do" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _about_p_sel_rel,
                    KEYREL.PRED "_do_v_about_rel" ],
            PHON.ONSET con ] ].

do_adv := v_adv_le &
 [ STEM < "do" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_do_v_1_rel",
            PHON.ONSET con ] ].

do_up_v1 := v_particle_np_le &
 [ STEM < "do" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_do_v_up_rel" ],
            PHON.ONSET con ] ].

do_v3 := v_unerg_bse_le &
 [ STEM < "do" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_do_v_suffice_rel",
            PHON.ONSET con ] ].

do_v4 := v_ditrans_only_le &
 [ STEM < "do" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_do_v_1_rel",
            PHON.ONSET con ] ].

do_with_v1 := v_np_prep_trans_le &
 [ STEM < "do" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _with_p_rel,
                    KEYREL.PRED "_do_v_1_rel" ],
            PHON.ONSET con ] ].

do_without_v1 := v_empty_prep_intrans_le &
 [ STEM < "do" >,
   SYNSEM [ LKEYS [ --COMPKEY _without_p_sel_rel,
                    KEYREL.PRED "_do_v_without_rel" ],
            PHON.ONSET con ] ].

doa_a1 := adj_intrans_le &
 [ STEM < "doa" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_doa_a_1_rel",
            PHON.ONSET con ] ].

doable_a1 := adj_intrans_le &
 [ STEM < "doable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_doable_a_1_rel",
            PHON.ONSET con ] ].

dobbin_n1 := n_mass_count_le &
 [ STEM < "dobbin" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dobbin_n_1_rel",
            PHON.ONSET con ] ].

doc_n1 := n_intr_le &
 [ STEM < "doc" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_doc_n_1_rel",
            PHON.ONSET con ] ].

docility_n1 := n_mass_le &
 [ STEM < "docility" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_docility_n_1_rel",
            PHON.ONSET con ] ].

dock_n1 := n_intr_le &
 [ STEM < "dock" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dock_n_1_rel",
            PHON.ONSET con ] ].

dock_v1 := v_np*_trans_le &
 [ STEM < "dock" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dock_v_1_rel",
            PHON.ONSET con ] ].

docklands_n1 := n_proper_city_le &
 [ STEM < "docklands" >,
   SYNSEM [ LKEYS.KEYREL.CARG "docklands",
            PHON.ONSET con ] ].

doctor_n1 := n_intr_le &
 [ STEM < "doctor" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_doctor_n_1_rel",
            PHON.ONSET con ] ].

doctor_ttl := n_title_le &
 [ STEM < "doctor" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_doctor_n_1_rel",
            PHON.ONSET con ] ].

doctoral_a1 := adj_intrans_le &
 [ STEM < "doctoral" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_doctoral_a_1_rel",
            PHON.ONSET con ] ].

doctors_a1 := adj_compound_le &
 [ STEM < "doctor", "'s" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_doctors_n_1_rel",
            PHON.ONSET con ] ].

doctors_a1_apos := adj_intrans_le &
 [ STEM < "doctor's" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_doctors_a_1_rel",
            PHON.ONSET con ] ].

doctors_a2 := adj_compound_le &
 [ STEM < "doctors", "'" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_doctors_n_1_rel",
            PHON.ONSET con ] ].

doctrine_n1 := n_mass_count_le &
 [ STEM < "doctrine" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_doctrine_n_1_rel",
            PHON.ONSET con ] ].

document_n1 := n_intr_le &
 [ STEM < "document" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_document_n_1_rel",
            PHON.ONSET con ] ].

document_v1 := v_np_trans_le &
 [ STEM < "document" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_document_v_1_rel",
            PHON.ONSET con ] ].

document_v2 := v_cp_non_trans_le &
 [ STEM < "document" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_document_v_1_rel",
            PHON.ONSET con ] ].

documentation_n1 := n_mass_count_ppof_le &
 [ STEM < "documentation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_documentation_n_of_rel",
            PHON.ONSET con ] ].

doe_n1 := n_intr_le &
 [ STEM < "doe" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_doe_n_1_rel",
            PHON.ONSET con ] ].

does1_neg_1 := va_doesnt_neg_pres_le &
 [ STEM < "doesn't" >,
   SYNSEM.PHON.ONSET con ].

does1_neg_2 := va_doesnt_neg_pres_le &
 [ STEM < "doesn", "'t" >,
   SYNSEM.PHON.ONSET con ].

does1_pos := va_does_le &
 [ STEM < "does" >,
   SYNSEM.PHON.ONSET con ].

doff_v1 := v_np_trans_le &
 [ STEM < "doff" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_doff_v_1_rel",
            PHON.ONSET con ] ].

dofm-date := n_day_of_month_le &
 [ STEM < "dateersatz" >,
   SYNSEM [ LKEYS.KEYREL.CARG "dofmersatz",
            PHON.ONSET onset ] ].

dofw-date := n_day_of_week_le &
 [ STEM < "dateersatz" >,
   SYNSEM [ LKEYS.KEYREL.CARG "dofwersatz",
            PHON.ONSET onset ] ].

dog_n1 := n_intr_le &
 [ STEM < "dog" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dog_n_1_rel",
            PHON.ONSET con ] ].

dog_v1 := v_np_trans_le &
 [ STEM < "dog" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dog_v_1_rel",
            PHON.ONSET con ] ].

dogsled_n1 := n_intr_le &
 [ STEM < "dogsled" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dogsled_n_1_rel",
            PHON.ONSET con ] ].

doherty_n1 := n_proper_le &
 [ STEM < "doherty" >,
   SYNSEM [ LKEYS.KEYREL.CARG "doherty",
            PHON.ONSET con ] ].

dolamore_n1 := n_proper_le &
 [ STEM < "dolamore" >,
   SYNSEM [ LKEYS.KEYREL.CARG "dolamore",
            PHON.ONSET con ] ].

dole_n1 := n_intr_named_le &
 [ STEM < "dole" >,
   SYNSEM [ LKEYS.KEYREL.CARG "dole",
            PHON.ONSET con ] ].

dole_n2 := n_proper_le &
 [ STEM < "dole" >,
   SYNSEM [ LKEYS.KEYREL.CARG "dole",
            PHON.ONSET con ] ].

dole_out_v1 := v_particle_np_le &
 [ STEM < "dole" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_dole_v_out_rel" ],
            PHON.ONSET con ] ].

dole_v1 := v_to*_trans_le &
 [ STEM < "dole" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dole_v_to_rel",
            PHON.ONSET con ] ].

doll_n1 := n_intr_le &
 [ STEM < "doll" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_doll_n_1_rel",
            PHON.ONSET con ] ].

doll_up_v1 := v_particle_np_le &
 [ STEM < "doll" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_doll_v_up_rel" ],
            PHON.ONSET con ] ].

dollar_n1 := n_intr_dollar_le &
 [ STEM < "dollar" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dollar_n_1_rel",
            PHON.ONSET con ] ].

dollarsign_n1 := n_numcomp_le &
 [ STEM < "$" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dollar_n_1_rel",
            PHON.ONSET con ] ].

domain_n1 := n_ppof_le &
 [ STEM < "domain" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_domain_n_of_rel",
            PHON.ONSET con ] ].

dome_n1 := n_intr_le &
 [ STEM < "dome" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dome_n_1_rel",
            PHON.ONSET con ] ].

domed_a1 := adj_intrans_le &
 [ STEM < "domed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_domed_a_1_rel",
            PHON.ONSET con ] ].

domestic_isect := adj_intrans_le &
 [ STEM < "domestic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_domestic_a_1_rel",
            PHON.ONSET con ] ].

domestically := adv_int_vp_le &
 [ STEM < "domestically" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_domestic_a_1_rel",
            PHON.ONSET con ] ].

domesticate_v1 := v_np_trans_le &
 [ STEM < "domesticate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_domesticate_v_1_rel",
            PHON.ONSET con ] ].

dominant_a1 := adj_intrans_le &
 [ STEM < "dominant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dominant_a_1_rel",
            PHON.ONSET con ] ].

dominate_v1 := v_np*_trans_le &
 [ STEM < "dominate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dominate_v_1_rel",
            PHON.ONSET con ] ].

dominion_n1 := n_mass_count_le &
 [ STEM < "dominion" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dominion_n_1_rel",
            PHON.ONSET con ] ].

domino_n1 := n_proper_le &
 [ STEM < "domino" >,
   SYNSEM [ LKEYS.KEYREL.CARG "domino",
            PHON.ONSET con ] ].

dominos_pizza_n1 := n_proper_le &
 [ STEM < "dominos", "pizza" >,
   SYNSEM [ LKEYS.KEYREL.CARG "dominos_pizza",
            PHON.ONSET con ] ].

don-giovanni_n1 := n_proper_le &
 [ STEM < "don", "giovanni" >,
   SYNSEM [ LKEYS.KEYREL.CARG "don-giovanni",
            PHON.ONSET con ] ].

don_n1 := n_intr_le &
 [ STEM < "don" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_don_n_1_rel",
            PHON.ONSET con ] ].

don_n2 := n_proper_le &
 [ STEM < "don" >,
   SYNSEM [ LKEYS.KEYREL.CARG "don",
            PHON.ONSET con ] ].

don_v1 := v_np_trans_le &
 [ STEM < "don" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_don_v_1_rel",
            PHON.ONSET con ] ].

donate1 := v_to*_trans_le &
 [ STEM < "donate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_donate_v_to_rel",
            PHON.ONSET con ] ].

donation_n1 := n_intr_le &
 [ STEM < "donation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_donation_n_1_rel",
            PHON.ONSET con ] ].

done_a1 := adj_equi_prp_le &
 [ STEM < "done" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_done_a_1_rel",
            PHON.ONSET con ] ].

dong_biwu_n1 := n_proper_le &
 [ STEM < "dong", "biwu" >,
   SYNSEM [ LKEYS.KEYREL.CARG "dong_biwu",
            PHON.ONSET con ] ].

dong_dayou_n1 := n_proper_le &
 [ STEM < "dong", "dayou" >,
   SYNSEM [ LKEYS.KEYREL.CARG "dong_dayou",
            PHON.ONSET con ] ].

dongchang_n1 := n_proper_le &
 [ STEM < "dongchang" >,
   SYNSEM [ LKEYS.KEYREL.CARG "dongchang",
            PHON.ONSET con ] ].

dongfeng_n1 := n_proper_le &
 [ STEM < "dongfeng" >,
   SYNSEM [ LKEYS.KEYREL.CARG "dongfeng",
            PHON.ONSET con ] ].

donghu_n1 := n_proper_le &
 [ STEM < "donghu" >,
   SYNSEM [ LKEYS.KEYREL.CARG "donghu",
            PHON.ONSET con ] ].

dongjiadu_n1 := n_proper_le &
 [ STEM < "dongjiadu" >,
   SYNSEM [ LKEYS.KEYREL.CARG "dongjiadu",
            PHON.ONSET con ] ].

dongping_n1 := n_proper_le &
 [ STEM < "dongping" >,
   SYNSEM [ LKEYS.KEYREL.CARG "dongping",
            PHON.ONSET con ] ].

dongxinqiao_n1 := n_proper_le &
 [ STEM < "dongxinqiao" >,
   SYNSEM [ LKEYS.KEYREL.CARG "dongxinqiao",
            PHON.ONSET con ] ].

donner_n1 := n_proper_city_le &
 [ STEM < "donner" >,
   SYNSEM [ LKEYS.KEYREL.CARG "donner",
            PHON.ONSET con ] ].

dont_1 := va_dont_imp_le &
 [ STEM < "don't" >,
   SYNSEM.PHON.ONSET con ].

dont_2 := va_dont_imp_le &
 [ STEM < "don", "'t" >,
   SYNSEM.PHON.ONSET con ].

dont_3 := va_dont_imp_le &
 [ STEM < "do", "not" >,
   SYNSEM.PHON.ONSET con ].

donut_n1 := n_intr_le &
 [ STEM < "donut" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_donut_n_1_rel",
            PHON.ONSET con ] ].

doom_n1 := n_mass_le &
 [ STEM < "doom" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_doom_n_1_rel",
            PHON.ONSET con ] ].

doom_n2 := n_proper_le &
 [ STEM < "doom" >,
   SYNSEM [ LKEYS.KEYREL.CARG "doom",
            PHON.ONSET con ] ].

doom_v1 := v_to*_trans_le &
 [ STEM < "doom" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_doom_v_to_rel",
            PHON.ONSET con ] ].

doom_v2 := v_obj_equi_le &
 [ STEM < "doom" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_doom_v_1_rel",
            PHON.ONSET con ] ].

door_n1 := n_intr_le &
 [ STEM < "door" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_door_n_1_rel",
            PHON.ONSET con ] ].

doorknob_n1 := n_intr_le &
 [ STEM < "doorknob" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_doorknob_n_1_rel",
            PHON.ONSET con ] ].

doormat_n1 := n_intr_le &
 [ STEM < "doormat" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_doormat_n_1_rel",
            PHON.ONSET con ] ].

doorstep_n1 := n_intr_le &
 [ STEM < "doorstep" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_doorstep_n_1_rel",
            PHON.ONSET con ] ].

doorway_n1 := n_intr_le &
 [ STEM < "doorway" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_doorway_n_1_rel",
            PHON.ONSET con ] ].

doorway_post_ttl := n_post_title_le &
 [ STEM < "doorway" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_doorway_n_1_rel",
            PHON.ONSET con ] ].

doralen := n_proper_le &
 [ STEM < "doralen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "doralen",
            PHON.ONSET con ] ].

doralglupen := n_proper_le &
 [ STEM < "doralglupen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "doralglupen",
            PHON.ONSET con ] ].

doralseter := n_proper_le &
 [ STEM < "doralseter" >,
   SYNSEM [ LKEYS.KEYREL.CARG "doralseter",
            PHON.ONSET con ] ].

doric_a1 := adj_intrans_le &
 [ STEM < "doric" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_doric_a_1_rel",
            PHON.ONSET con ] ].

dorm_n1 := n_intr_le &
 [ STEM < "dorm" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dorm_n_1_rel",
            PHON.ONSET con ] ].

dortmund_n1 := n_proper_city_le &
 [ STEM < "dortmund" >,
   SYNSEM [ LKEYS.KEYREL.CARG "dortmund",
            PHON.ONSET con ] ].

dot_n1 := n_intr_le &
 [ STEM < "dot" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dot_n_1_rel",
            PHON.ONSET con ] ].

dot_v1 := v_np_trans_le &
 [ STEM < "dot" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dot_v_1_rel",
            PHON.ONSET con ] ].

dotterel_a1 := adj_intrans_le &
 [ STEM < "dotterel" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dotterel_a_1_rel",
            PHON.ONSET con ] ].

dotterel_n1 := n_intr_le &
 [ STEM < "dotterel" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dotterel_n_1_rel",
            PHON.ONSET con ] ].

double_a1 := adj_intrans_le &
 [ STEM < "double" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_double_a_1_rel",
            PHON.ONSET con ] ].

double_as_v1 := v_empty_prep_intrans_le &
 [ STEM < "double" >,
   SYNSEM [ LKEYS [ --COMPKEY _as_p_sel_rel,
                    KEYREL.PRED "_double_v_as_rel" ],
            PHON.ONSET con ] ].

double_bill_v1 := v_empty_prep*_trans_le &
 [ STEM < "double", "bill" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_double+bill_v_for_rel" ],
            PHON.ONSET con ] ].

double_check_v1 := v_np*_trans_le &
 [ STEM < "double", "check" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_double+check_v_1_rel",
            PHON.ONSET con ] ].

double_n1 := n_no_cmpnd_le &
 [ STEM < "double" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_double_n_1_rel",
            PHON.ONSET con ] ].

double_pn1 := n_part_npcomp_agr_le &
 [ STEM < "double" >,
   SYNSEM [ LKEYS.ALTKEYREL.PRED _twice_q_rel,
            PHON.ONSET con ] ].

double_sized_a1 := adj_intrans_le &
 [ STEM < "double", "sized" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_double+sized_a_1_rel",
            PHON.ONSET con ] ].

double_tenth_n1 := n_proper_le &
 [ STEM < "double", "tenth" >,
   SYNSEM [ LKEYS.KEYREL.CARG "double_tenth",
            PHON.ONSET con ] ].

double_tenth_n2 := n_proper_le &
 [ STEM < "double-", "tenth" >,
   SYNSEM [ LKEYS.KEYREL.CARG "double_tenth",
            PHON.ONSET con ] ].

double_up_v1 := v_particle_np_le &
 [ STEM < "double" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_double_v_up_rel" ],
            PHON.ONSET con ] ].

double_up_v2 := v_particle_le &
 [ STEM < "double" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_double_v_up_rel" ],
            PHON.ONSET con ] ].

double_v1 := v_np_trans_noger_le &
 [ STEM < "double" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_double_v_cause_rel",
            PHON.ONSET con ] ].

double_v2 := v_unacc_le &
 [ STEM < "double" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_double_v_1_rel",
            PHON.ONSET con ] ].

doubt_n1 := n_mass_count_le &
 [ STEM < "doubt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_doubt_n_1_rel",
            PHON.ONSET con ] ].

doubt_v1 := v_np_trans_le &
 [ STEM < "doubt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_doubt_v_1_rel",
            PHON.ONSET con ] ].

doubt_v2 := v_cp_non_trans_le &
 [ STEM < "doubt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_doubt_v_1_rel",
            PHON.ONSET con ] ].

doubtful_a1 := adj_intrans_le &
 [ STEM < "doubtful" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_doubtful_a_1_rel",
            PHON.ONSET con ] ].

doubtfully := adv_int_vp_le &
 [ STEM < "doubtfully" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_doubtful_a_1_rel",
            PHON.ONSET con ] ].

doubtless_adv1 := adv_int_vp_pre_le &
 [ STEM < "doubtless" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_doubtless_a_1_rel",
            PHON.ONSET con ] ].

doubtless_adv2 := adv_s_pre_word_root_le &
 [ STEM < "doubtless" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_doubtless_a_1_rel",
            PHON.ONSET con ] ].

doubtlessly := adv_int_vp_le &
 [ STEM < "doubtlessly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_doubtless_a_1_rel",
            PHON.ONSET con ] ].

dough_n1 := n_mass_le &
 [ STEM < "dough" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dough_n_1_rel",
            PHON.ONSET con ] ].

doughnut_n1 := n_intr_le &
 [ STEM < "doughnut" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_doughnut_n_1_rel",
            PHON.ONSET con ] ].

douglas_n1 := n_proper_le &
 [ STEM < "douglas" >,
   SYNSEM [ LKEYS.KEYREL.CARG "douglas",
            PHON.ONSET con ] ].

doulean_n1 := n_proper_le &
 [ STEM < "doulean" >,
   SYNSEM [ LKEYS.KEYREL.CARG "doulean",
            PHON.ONSET con ] ].

dover_n1 := n_proper_le &
 [ STEM < "dover" >,
   SYNSEM [ LKEYS.KEYREL.CARG "dover",
            PHON.ONSET con ] ].

dovrefjell := n_proper_le &
 [ STEM < "dovrefjell" >,
   SYNSEM [ LKEYS.KEYREL.CARG "dovrefjell",
            PHON.ONSET con ] ].

dow_n1 := n_proper_le &
 [ STEM < "dow" >,
   SYNSEM [ LKEYS.KEYREL.CARG "dow",
            PHON.ONSET con ] ].

down_a1 := adj_attr_nospec_le &
 [ STEM < "down" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_down_a_1_rel",
            PHON.ONSET con ] ].

down_adv1 := pp_le &
 [ STEM < "down" >,
   SYNSEM [ LKEYS.KEYREL.PRED _down_p_rel,
            PHON.ONSET con ] ].

down_p := p_nmod_no_tmod_le &
 [ STEM < "down" >,
   SYNSEM [ LKEYS.KEYREL.PRED _down_p_rel,
            PHON.ONSET con ] ].

down_prtcl := p_prtcl_le &
 [ STEM < "down" >,
   SYNSEM [ LKEYS.KEYREL.PRED _down_p_sel_rel,
            PHON.ONSET con ] ].

down_vmod := p_no_nmod_le &
 [ STEM < "down" >,
   SYNSEM [ LKEYS.KEYREL.PRED _down_p_rel,
            PHON.ONSET con ] ].

downcast_a1 := adj_intrans_le &
 [ STEM < "downcast" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_downcast_a_1_rel",
            PHON.ONSET con ] ].

downcastly_adv := adv_int_vp_le &
 [ STEM < "downcastly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_downcast_a_1_rel",
            PHON.ONSET con ] ].

downhill_a1 := adj_attr_intrans_le &
 [ STEM < "downhill" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_downhill_a_1_rel",
            PHON.ONSET con ] ].

downhill_n1 := n_intr_le &
 [ STEM < "downhill" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_downhill_n_1_rel",
            PHON.ONSET voc ] ].

downhill_pp := n_adv_pl_le &
 [ STEM < "downhill" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED _downhill_p_rel,
                    KEYREL.PRED place_n_rel ],
            PHON.ONSET voc ] ].

download_n1 := n_ppof_le &
 [ STEM < "down", "load" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_download_n_of_rel",
            PHON.ONSET con ] ].

download_n2 := n_ppof_le &
 [ STEM < "download" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_download_n_of_rel",
            PHON.ONSET con ] ].

download_v1 := v_np_trans_le &
 [ STEM < "down", "load" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_download_v_1_rel",
            PHON.ONSET con ] ].

download_v2 := v_np_trans_le &
 [ STEM < "download" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_download_v_1_rel",
            PHON.ONSET con ] ].

downright_deg := adv_degree_spec_v_le &
 [ STEM < "downright" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_downright_x_deg_rel",
            PHON.ONSET con ] ].

downstairs_isect := adj_intrans_le &
 [ STEM < "downstairs" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_downstairs_a_1_rel",
            PHON.ONSET con ] ].

downstream_a1 := adj_attr_intrans_le &
 [ STEM < "downstream" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_downstream_a_1_rel",
            PHON.ONSET con ] ].

downstream_a2 := adj_attr_intrans_le &
 [ STEM < "down", "stream" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_downstream_a_1_rel",
            PHON.ONSET con ] ].

downstream_pp := pp_le &
 [ STEM < "downstream" >,
   SYNSEM [ LKEYS.KEYREL.PRED _downstream_p_rel,
            PHON.ONSET con ] ].

downstream_pp2 := pp_le &
 [ STEM < "down", "stream" >,
   SYNSEM [ LKEYS.KEYREL.PRED _downstream_p_rel,
            PHON.ONSET con ] ].

downstroke_n1 := n_intr_le &
 [ STEM < "downstroke" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_downstroke_n_1_rel",
            PHON.ONSET con ] ].

downtown_isect := adj_intrans_le &
 [ STEM < "downtown" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_downtown_a_1_rel",
            PHON.ONSET con ] ].

downward_isect := adj_intrans_le &
 [ STEM < "downward" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_downward_a_1_rel",
            PHON.ONSET con ] ].

downward_n1 := n_adv_event_le &
 [ STEM < "downward" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED _downward_a_1_rel,
                    KEYREL.PRED place_n_rel ],
            PHON.ONSET con ] ].

downwards_n1 := n_adv_event_le &
 [ STEM < "downwards" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED _downward_a_1_rel,
                    KEYREL.PRED place_n_rel ],
            PHON.ONSET con ] ].

dozen_a1 := adj_bare_specified_card_dozen_le &
 [ STEM < "dozen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "12",
            PHON.ONSET con ] ].

dozens_n1 := n_plur_xmod_le &
 [ STEM < "dozens" >,
   SYNSEM [ LKEYS.KEYREL.CARG "12",
            PHON.ONSET con ] ].

dozens_n2 := n_plur_ppcomp_card_le &
 [ STEM < "dozens" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.CARG "12" ],
            PHON.ONSET con ] ].

dq_punct := punct_dq_le &
 [ STEM < "\"" >,
   SYNSEM.PHON.ONSET onset ].

dq_punct2 := punct_dq_le &
 [ STEM < "||" >,
   SYNSEM.PHON.ONSET onset ].

dq_stranded_left := adv_s_pre_word_root_le &
 [ STEM < "||" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dq+stranded+left_a_1_rel",
            PHON.ONSET onset ] ].

dr_ttl := n_title_le &
 [ STEM < "dr" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_doctor_n_1_rel",
            PHON.ONSET con ] ].

dr_ttl_2 := n_title_le &
 [ STEM < "dr." >,
   SYNSEM [ LKEYS.KEYREL.PRED "_doctor_n_1_rel",
            PHON.ONSET con ] ].

drabs_n1 := n_plur_nocmpnd_le &
 [ STEM < "drab" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_drabs_n_1_rel",
            PHON.ONSET con ] ].

drachma_n1 := n_intr_le &
 [ STEM < "drachma" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_drachma_n_1_rel",
            PHON.ONSET con ] ].

drachma_n2 := n_plur_nocmpnd_le &
 [ STEM < "drachma" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_drachma_n_1_rel",
            PHON.ONSET con ] ].

draft_in_v1 := v_particle_np_le &
 [ STEM < "draft" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_draft_v_in_rel" ],
            PHON.ONSET con ] ].

draft_n1 := n_intr_le &
 [ STEM < "draft" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_draft_n_1_rel",
            PHON.ONSET con ] ].

draft_v1 := v_np_trans_le &
 [ STEM < "draft" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_draft_v_1_rel",
            PHON.ONSET con ] ].

drag_in_v1 := v_particle_np_le &
 [ STEM < "drag" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_drag_v_in_rel" ],
            PHON.ONSET con ] ].

drag_n1 := n_mass_le &
 [ STEM < "drag" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_drag_n_1_rel",
            PHON.ONSET con ] ].

drag_n2 := n_intr_sg_le &
 [ STEM < "drag" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_drag_n_1_rel",
            PHON.ONSET con ] ].

drag_on_v1 := v_particle_np_le &
 [ STEM < "drag" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_drag_v_on_rel" ],
            PHON.ONSET con ] ].

drag_on_v3 := v_particle_le &
 [ STEM < "drag" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_drag_v_on_rel" ],
            PHON.ONSET con ] ].

drag_out_v1 := v_particle_np_le &
 [ STEM < "drag" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_drag_v_out_rel" ],
            PHON.ONSET con ] ].

drag_out_v2 := v_particle_le &
 [ STEM < "drag" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_drag_v_out_rel" ],
            PHON.ONSET con ] ].

drag_v1 := v_np_trans_le &
 [ STEM < "drag" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_drag_v_cause_rel",
            PHON.ONSET con ] ].

drag_v2 := v_unacc_dir_le &
 [ STEM < "drag" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_drag_v_1_rel",
            PHON.ONSET con ] ].

drag_v3 := v_np_prep_trans_dors_le &
 [ STEM < "drag" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_drag_v_cause_rel",
            PHON.ONSET con ] ].

dragon_n1 := n_intr_le &
 [ STEM < "dragon" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dragon_n_1_rel",
            PHON.ONSET con ] ].

drain_n1 := n_intr_le &
 [ STEM < "drain" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_drain_n_1_rel",
            PHON.ONSET con ] ].

drain_of_v1 := v_empty_prep_trans_le &
 [ STEM < "drain" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_drain_v_of_rel" ],
            PHON.ONSET con ] ].

drain_v1 := v_unerg_le &
 [ STEM < "drain" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_drain_v_1_rel",
            PHON.ONSET con ] ].

drain_v2 := v_np_trans_le &
 [ STEM < "drain" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_drain_v_cause_rel",
            PHON.ONSET con ] ].

drainage_n1 := n_mass_le &
 [ STEM < "drainage" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_drainage_n_1_rel",
            PHON.ONSET con ] ].

drama_n1 := n_mass_count_le &
 [ STEM < "drama" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_drama_n_1_rel",
            PHON.ONSET con ] ].

dramatic_a1 := adj_intrans_le &
 [ STEM < "dramatic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dramatic_a_1_rel",
            PHON.ONSET con ] ].

dramatically := adv_int_vp_le &
 [ STEM < "dramatically" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dramatic_a_1_rel",
            PHON.ONSET con ] ].

dramatist_n1 := n_intr_le &
 [ STEM < "dramatist" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dramatist_n_1_rel",
            PHON.ONSET con ] ].

drammen_n1 := n_proper_city_le &
 [ STEM < "drammen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "drammen",
            PHON.ONSET con ] ].

drape_n1 := n_intr_le &
 [ STEM < "drape" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_drape_n_1_rel",
            PHON.ONSET con ] ].

drape_v1 := v_unacc_dir_le &
 [ STEM < "drape" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_drape_v_1_rel",
            PHON.ONSET con ] ].

drape_v2 := v_np_trans_le &
 [ STEM < "drape" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_drape_v_cause_rel",
            PHON.ONSET con ] ].

drapery_n1 := n_mass_count_le &
 [ STEM < "drapery" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_drapery_n_1_rel",
            PHON.ONSET con ] ].

drat_root_post := adv_s_post_word_nospec_le &
 [ STEM < "drat" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_drat_a_1_rel",
            PHON.ONSET con ] ].

drat_root_pre := adv_s_pre_word_root_le &
 [ STEM < "drat" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_drat_a_1_rel",
            PHON.ONSET con ] ].

draught_n1 := n_intr_le &
 [ STEM < "draught" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_draught_n_1_rel",
            PHON.ONSET con ] ].

draughts_n1 := n_mass_le &
 [ STEM < "draughts" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_draughts_n_1_rel",
            PHON.ONSET con ] ].

draw_aside_v1 := v_particle_np_le &
 [ STEM < "draw" >,
   SYNSEM [ LKEYS [ --COMPKEY _aside_p_sel_rel,
                    KEYREL.PRED "_draw_v_aside_rel" ],
            PHON.ONSET con ] ].

draw_aside_v2 := v_particle_le &
 [ STEM < "draw" >,
   SYNSEM [ LKEYS [ --COMPKEY _aside_p_sel_rel,
                    KEYREL.PRED "_draw_v_aside_rel" ],
            PHON.ONSET con ] ].

draw_away_v1 := v_particle_np_le &
 [ STEM < "draw" >,
   SYNSEM [ LKEYS [ --COMPKEY _away_p_sel_rel,
                    KEYREL.PRED "_draw_v_away_rel" ],
            PHON.ONSET con ] ].

draw_away_v2 := v_particle_le &
 [ STEM < "draw" >,
   SYNSEM [ LKEYS [ --COMPKEY _away_p_sel_rel,
                    KEYREL.PRED "_draw_v_away_rel" ],
            PHON.ONSET con ] ].

draw_back_v1 := v_particle_np_le &
 [ STEM < "draw" >,
   SYNSEM [ LKEYS [ --COMPKEY _back_p_sel_rel,
                    KEYREL.PRED "_draw_v_back_rel" ],
            PHON.ONSET con ] ].

draw_back_v2 := v_particle_le &
 [ STEM < "draw" >,
   SYNSEM [ LKEYS [ --COMPKEY _back_p_sel_rel,
                    KEYREL.PRED "_draw_v_back_rel" ],
            PHON.ONSET con ] ].

draw_dir_v1 := v_np_prep_trans_dors_le &
 [ STEM < "draw" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_draw_v_1_rel",
            PHON.ONSET con ] ].

draw_forth_v1 := v_particle_np_le &
 [ STEM < "draw" >,
   SYNSEM [ LKEYS [ --COMPKEY _forth_p_sel_rel,
                    KEYREL.PRED "_draw_v_forth_rel" ],
            PHON.ONSET con ] ].

draw_n1 := n_intr_le &
 [ STEM < "draw" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_draw_n_1_rel",
            PHON.ONSET con ] ].

draw_on_v1 := v_particle_le &
 [ STEM < "draw" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_draw_v_on_rel" ],
            PHON.ONSET con ] ].

draw_up_v1 := v_particle_np_le &
 [ STEM < "draw" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_draw_v_up_rel" ],
            PHON.ONSET con ] ].

draw_v1 := v_np*_trans_le &
 [ STEM < "draw" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_draw_v_1_rel",
            PHON.ONSET con ] ].

drawbridge_n1 := n_intr_le &
 [ STEM < "drawbridge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_drawbridge_n_1_rel",
            PHON.ONSET con ] ].

drawer_n1 := n_ppof_le &
 [ STEM < "drawer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_drawer_n_of_rel",
            PHON.ONSET con ] ].

drawing_n1 := n_ppof_le &
 [ STEM < "drawing" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_drawing_n_of_rel",
            PHON.ONSET con ] ].

drawl_n1 := n_intr_le &
 [ STEM < "drawl" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_drawl_n_1_rel",
            PHON.ONSET con ] ].

drawl_v1 := v_unerg_le &
 [ STEM < "drawl" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_drawl_v_1_rel",
            PHON.ONSET con ] ].

drawl_v2 := v_cp_prop_non_trans_le &
 [ STEM < "drawl" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_drawl_v_1_rel",
            PHON.ONSET con ] ].

dread_n1 := n_mass_le &
 [ STEM < "dread" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dread_n_1_rel",
            PHON.ONSET con ] ].

dread_v1 := v_np_trans_le &
 [ STEM < "dread" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dread_v_1_rel",
            PHON.ONSET con ] ].

dread_v2 := v_subj_equi_le &
 [ STEM < "dread" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dread_v_1_rel",
            PHON.ONSET con ] ].

dread_v3 := v_subj_equi_prp_le &
 [ STEM < "dread" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dread_v_1_rel",
            PHON.ONSET con ] ].

dread_v4 := v_cp_non_trans_le &
 [ STEM < "dread" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dread_v_1_rel",
            PHON.ONSET con ] ].

dreadful_a1 := adj_trans_le &
 [ STEM < "dreadful" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_dreadful_a_to_rel" ],
            PHON.ONSET con ] ].

dreadful_a2 := adj_reg_atrans_that_cp_le &
 [ STEM < "dreadful" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dreadful_a_to_rel",
            PHON.ONSET con ] ].

dreadfully := adv_int_vp_le &
 [ STEM < "dreadfully" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dreadful_a_to_rel",
            PHON.ONSET con ] ].

dreadfully_grad := adv_degree_spec_v_le &
 [ STEM < "dreadfully" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dreadfully_x_deg_rel",
            PHON.ONSET con ] ].

dream_about_v1 := v_empty_prep_intrans_le &
 [ STEM < "dream" >,
   SYNSEM [ LKEYS [ --COMPKEY _about_p_sel_rel,
                    KEYREL.PRED "_dream_v_about_rel" ],
            PHON.ONSET con ] ].

dream_n1 := n_intr_le &
 [ STEM < "dream" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dream_n_1_rel",
            PHON.ONSET con ] ].

dream_of_v1 := v_empty_prep_intrans_le &
 [ STEM < "dream" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_dream_v_of_rel" ],
            PHON.ONSET con ] ].

dream_up_v1 := v_particle_np_le &
 [ STEM < "dream" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_dream_v_up_rel" ],
            PHON.ONSET con ] ].

dream_v1 := v_unerg_le &
 [ STEM < "dream" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dream_v_1_rel",
            PHON.ONSET con ] ].

dream_v2 := v_cp_non_trans_le &
 [ STEM < "dream" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dream_v_1_rel",
            PHON.ONSET con ] ].

dreary_a1 := adj_intrans_le &
 [ STEM < "dreary" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dreary_a_1_rel",
            PHON.ONSET con ] ].

dregs_n1 := n_plur_nocmpnd_le &
 [ STEM < "dreg" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dregs_n_1_rel",
            PHON.ONSET con ] ].

dresden_n1 := n_proper_city_le &
 [ STEM < "dresden" >,
   SYNSEM [ LKEYS.KEYREL.CARG "dresden",
            PHON.ONSET con ] ].

dress_n1 := n_mass_count_le &
 [ STEM < "dress" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dress_n_1_rel",
            PHON.ONSET con ] ].

dress_up_v1 := v_particle_np_le &
 [ STEM < "dress" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_dress_v_up_rel" ],
            PHON.ONSET con ] ].

dress_up_v2 := v_particle_le &
 [ STEM < "dress" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_dress_v_up_rel" ],
            PHON.ONSET con ] ].

dress_v1 := v_empty_prep*_trans_le &
 [ STEM < "dress" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_dress_v_in_rel" ],
            PHON.ONSET con ] ].

dribble_v1 := v_prep_dir_le &
 [ STEM < "dribble" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dribble_v_cause_rel",
            PHON.ONSET con ] ].

dribble_v2 := v_np_trans_noger_le &
 [ STEM < "dribble" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dribble_v_cause_rel",
            PHON.ONSET con ] ].

dribble_v3 := v_unacc_le &
 [ STEM < "dribble" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dribble_v_1_rel",
            PHON.ONSET con ] ].

dribs_n1 := n_plur_nocmpnd_le &
 [ STEM < "drib" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dribs_n_1_rel",
            PHON.ONSET con ] ].

drier_a1 := adj_comp_le &
 [ STEM < "drier" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dry_a_1_rel",
            PHON.ONSET con ] ].

drier_a2 := adj_atrans_comp_le &
 [ STEM < "drier" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dry_a_1_rel",
            PHON.ONSET con ] ].

driest_a1 := adj_superl_le &
 [ STEM < "driest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dry_a_1_rel",
            PHON.ONSET con ] ].

driest_a2 := adj_atrans_superl_le &
 [ STEM < "driest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dry_a_1_rel",
            PHON.ONSET con ] ].

drift_n1 := n_mass_count_le &
 [ STEM < "drift" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_drift_n_1_rel",
            PHON.ONSET con ] ].

drift_off_v1 := v_particle_le &
 [ STEM < "drift" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_drift_v_off_rel" ],
            PHON.ONSET con ] ].

drift_v1 := v_prep_dir_le &
 [ STEM < "drift" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_drift_v_1_rel",
            PHON.ONSET con ] ].

drill_n1 := n_mass_count_le &
 [ STEM < "drill" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_drill_n_1_rel",
            PHON.ONSET con ] ].

drill_v1 := v_np*_trans_le &
 [ STEM < "drill" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_drill_v_1_rel",
            PHON.ONSET con ] ].

drily := adv_int_vp_le &
 [ STEM < "drily" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dry_a_1_rel",
            PHON.ONSET con ] ].

drink_down_v1 := v_particle_np_le &
 [ STEM < "drink" >,
   SYNSEM [ LKEYS [ --COMPKEY _down_p_sel_rel,
                    KEYREL.PRED "_drink_v_down_rel" ],
            PHON.ONSET con ] ].

drink_n1 := n_mass_count_le &
 [ STEM < "drink" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_drink_n_1_rel",
            PHON.ONSET con ] ].

drink_up_v1 := v_particle_np_le &
 [ STEM < "drink" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_drink_v_up_rel" ],
            PHON.ONSET con ] ].

drink_up_v2 := v_particle_le &
 [ STEM < "drink" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_drink_v_up_rel" ],
            PHON.ONSET con ] ].

drink_v1 := v_np*_trans_le &
 [ STEM < "drink" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_drink_v_1_rel",
            PHON.ONSET con ] ].

drip_n1 := n_intr_le &
 [ STEM < "drip" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_drip_n_1_rel",
            PHON.ONSET con ] ].

drip_v1 := v_np_trans_le &
 [ STEM < "drip" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_drip_v_cause_rel",
            PHON.ONSET con ] ].

drip_v2 := v_unacc_dir_le &
 [ STEM < "drip" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_drip_v_1_rel",
            PHON.ONSET con ] ].

drivable_a1 := adj_intrans_le &
 [ STEM < "drivable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_drivable_a_1_rel",
            PHON.ONSET con ] ].

drive_around_v1 := v_particle_le &
 [ STEM < "drive" >,
   SYNSEM [ LKEYS [ --COMPKEY _around_p_sel_rel,
                    KEYREL.PRED "_drive_v_around_rel" ],
            PHON.ONSET con ] ].

drive_around_v2 := v_particle_np_le &
 [ STEM < "drive" >,
   SYNSEM [ LKEYS [ --COMPKEY _around_p_sel_rel,
                    KEYREL.PRED "_drive_v_around_rel" ],
            PHON.ONSET con ] ].

drive_away_v1 := v_particle_np_le &
 [ STEM < "drive" >,
   SYNSEM [ LKEYS [ --COMPKEY _away_p_sel_rel,
                    KEYREL.PRED "_drive_v_away_rel" ],
            PHON.ONSET con ] ].

drive_down_v1 := v_particle_np_le &
 [ STEM < "drive" >,
   SYNSEM [ LKEYS [ --COMPKEY _down_p_sel_rel,
                    KEYREL.PRED "_drive_v_down_rel" ],
            PHON.ONSET con ] ].

drive_in_v1 := v_particle_np_le &
 [ STEM < "drive" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_drive_v_in_rel" ],
            PHON.ONSET con ] ].

drive_n1 := n_mass_count_le &
 [ STEM < "drive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_drive_n_1_rel",
            PHON.ONSET con ] ].

drive_off_v1 := v_particle_np_le &
 [ STEM < "drive" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_drive_v_off_rel" ],
            PHON.ONSET con ] ].

drive_off_v2 := v_particle_le &
 [ STEM < "drive" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_drive_v_off_rel" ],
            PHON.ONSET con ] ].

drive_out_v1 := v_particle_np_le &
 [ STEM < "drive" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_drive_v_out_rel" ],
            PHON.ONSET con ] ].

drive_prd := v_obj_equi_prd_le &
 [ STEM < "drive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_drive_v_1_rel",
            PHON.ONSET con ] ].

drive_up_v1 := v_particle_le &
 [ STEM < "drive" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_drive_v_up_rel" ],
            PHON.ONSET con ] ].

drive_up_v2 := v_particle_np_le &
 [ STEM < "drive" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_drive_v_up_rel" ],
            PHON.ONSET con ] ].

drive_v1 := v_prep_dir_le &
 [ STEM < "drive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_drive_v_1_rel",
            PHON.ONSET con ] ].

drive_v2 := v_np_trans_noger_le &
 [ STEM < "drive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_drive_v_to_rel",
            PHON.ONSET con ] ].

drive_v3 := v_obj_equi_le &
 [ STEM < "drive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_drive_v_1_rel",
            PHON.ONSET con ] ].

drive_v4 := v_np_prep_trans_dors_le &
 [ STEM < "drive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_drive_v_1_rel",
            PHON.ONSET con ] ].

driver_n1 := n_ppof_le &
 [ STEM < "driver" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_driver_n_of_rel",
            PHON.ONSET con ] ].

drizzle_n1 := n_mass_le &
 [ STEM < "drizzle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_drizzle_n_1_rel",
            PHON.ONSET con ] ].

drizzle_v1 := v_atrans_le &
 [ STEM < "drizzle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_drizzle_v_1_rel",
            PHON.ONSET con ] ].

drop_by_v1 := v_particle_le &
 [ STEM < "drop" >,
   SYNSEM [ LKEYS [ --COMPKEY _by_p_sel_rel,
                    KEYREL.PRED "_drop_v_by_rel" ],
            PHON.ONSET con ] ].

drop_in_v1 := v_particle_np_le &
 [ STEM < "drop" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_drop_v_in_rel" ],
            PHON.ONSET con ] ].

drop_in_v2 := v_particle_le &
 [ STEM < "drop" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_drop_v_in_rel" ],
            PHON.ONSET con ] ].

drop_n1 := n_ppof_le &
 [ STEM < "drop" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_drop_n_of_rel",
            PHON.ONSET con ] ].

drop_off_n1 := n_intr_le &
 [ STEM < "drop", "off" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_drop+off_n_1_rel",
            PHON.ONSET con ] ].

drop_off_n2 := n_intr_le &
 [ STEM < "drop-", "off" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_drop+off_n_1_rel",
            PHON.ONSET con ] ].

drop_off_v1 := v_particle_np_le &
 [ STEM < "drop" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_drop_v_off_rel" ],
            PHON.ONSET con ] ].

drop_off_v2 := v_particle_le &
 [ STEM < "drop" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_drop_v_off_rel" ],
            PHON.ONSET con ] ].

drop_out_v1 := v_particle_np_le &
 [ STEM < "drop" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_drop_v_out_rel" ],
            PHON.ONSET con ] ].

drop_out_v2 := v_particle_le &
 [ STEM < "drop" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_drop_v_out_rel" ],
            PHON.ONSET con ] ].

drop_v1 := v_np_trans_le &
 [ STEM < "drop" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_drop_v_cause_rel",
            PHON.ONSET con ] ].

drop_v2 := v_unacc_dir_le &
 [ STEM < "drop" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_drop_v_1_rel",
            PHON.ONSET con ] ].

drop_v3 := v_ditrans_le &
 [ STEM < "drop" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_drop_v_cause_rel",
            PHON.ONSET con ] ].

dropoff_n1 := n_intr_le &
 [ STEM < "dropoff" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dropoff_n_1_rel",
            PHON.ONSET con ] ].

dropper_n1 := n_intr_le &
 [ STEM < "dropper" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dropper_n_1_rel",
            PHON.ONSET con ] ].

dropping_n1 := n_intr_le &
 [ STEM < "dropping" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dropping_n_1_rel",
            PHON.ONSET con ] ].

drought_n1 := n_mass_count_le &
 [ STEM < "drought" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_drought_n_1_rel",
            PHON.ONSET con ] ].

drove_n1 := n_ppof_le &
 [ STEM < "drove" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_drove_n_of_rel",
            PHON.ONSET con ] ].

drover_n1 := n_intr_le &
 [ STEM < "drover" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_drover_n_1_rel",
            PHON.ONSET con ] ].

drown_out_v1 := v_particle_np_le &
 [ STEM < "drown" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_drown_v_out_rel" ],
            PHON.ONSET con ] ].

drown_v1 := v_np_trans_noger_le &
 [ STEM < "drown" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_drown_v_cause_rel",
            PHON.ONSET con ] ].

drown_v2 := v_unacc_le &
 [ STEM < "drown" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_drown_v_1_rel",
            PHON.ONSET con ] ].

drudgery_n1 := n_mass_le &
 [ STEM < "drudgery" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_drudgery_n_1_rel",
            PHON.ONSET con ] ].

drudgery_n2 := n_mass_vpcomp_expl_le &
 [ STEM < "drudgery" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_drudgery_n_1_rel",
            PHON.ONSET con ] ].

drug_n1 := n_intr_le &
 [ STEM < "drug" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_drug_n_1_rel",
            PHON.ONSET con ] ].

drug_v1 := v_np_trans_le &
 [ STEM < "drug" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_drug_v_1_rel",
            PHON.ONSET con ] ].

drum_n1 := n_intr_le &
 [ STEM < "drum" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_drum_n_1_rel",
            PHON.ONSET con ] ].

drum_v1 := v_np*_trans_le &
 [ STEM < "drum" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_drum_v_cause_rel",
            PHON.ONSET con ] ].

drunk_a1 := adj_intrans_le &
 [ STEM < "drunk" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_drunk_a_1_rel",
            PHON.ONSET con ] ].

drunken_a1 := adj_intrans_le &
 [ STEM < "drunken" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_drunken_a_1_rel",
            PHON.ONSET con ] ].

drupe_n1 := n_intr_le &
 [ STEM < "drupe" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_drupe_n_1_rel",
            PHON.ONSET con ] ].

dry_a2 := adj_atrans_le &
 [ STEM < "dry" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dry_a_1_rel",
            PHON.ONSET con ] ].

dry_isect := adj_intrans_le &
 [ STEM < "dry" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dry_a_1_rel",
            PHON.ONSET con ] ].

dry_off_v1 := v_particle_np_le &
 [ STEM < "dry" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_dry_v_off_rel" ],
            PHON.ONSET con ] ].

dry_off_v2 := v_particle_le &
 [ STEM < "dry" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_dry_v_off_rel" ],
            PHON.ONSET con ] ].

dry_out_v1 := v_particle_np_le &
 [ STEM < "dry" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_dry_v_out_rel" ],
            PHON.ONSET con ] ].

dry_out_v2 := v_particle_le &
 [ STEM < "dry" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_dry_v_out_rel" ],
            PHON.ONSET con ] ].

dry_up_v1 := v_particle_np_le &
 [ STEM < "dry" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_dry_v_up_rel" ],
            PHON.ONSET con ] ].

dry_up_v2 := v_particle_le &
 [ STEM < "dry" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_dry_v_up_rel" ],
            PHON.ONSET con ] ].

dry_v1 := v_unacc_le &
 [ STEM < "dry" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dry_v_1_rel",
            PHON.ONSET con ] ].

dry_v2 := v_np_trans_noger_le &
 [ STEM < "dry" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dry_v_cause_rel",
            PHON.ONSET con ] ].

dryer_n1 := n_intr_le &
 [ STEM < "dryer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dryer_n_1_rel",
            PHON.ONSET con ] ].

dryllin_n1 := n_proper_le &
 [ STEM < "dryllin" >,
   SYNSEM [ LKEYS.KEYREL.CARG "dryllin",
            PHON.ONSET con ] ].

drÃ¦gni_n1 := n_proper_le &
 [ STEM < "drÃ¦gni" >,
   SYNSEM [ LKEYS.KEYREL.CARG "drÃ¦gni",
            PHON.ONSET con ] ].

dsl_n1 := n_mass_count_le &
 [ STEM < "dsl" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dsl_n_1_rel",
            PHON.ONSET con ] ].

dtd_n1 := n_proper_le &
 [ STEM < "dtd" >,
   SYNSEM [ LKEYS.KEYREL.CARG "dtd",
            PHON.ONSET con ] ].

dtd_n2 := n_proper_le &
 [ STEM < "d.t.d." >,
   SYNSEM [ LKEYS.KEYREL.CARG "dtd",
            PHON.ONSET con ] ].

dtd_n3 := n_proper_le &
 [ STEM < "_d.t.d." >,
   SYNSEM [ LKEYS.KEYREL.CARG "dtd",
            PHON.ONSET con ] ].

du_yuesheng_n1 := n_proper_le &
 [ STEM < "du", "yuesheng" >,
   SYNSEM [ LKEYS.KEYREL.CARG "du_yuesheng",
            PHON.ONSET con ] ].

dual_a1 := adj_intrans_le &
 [ STEM < "dual" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dual_a_1_rel",
            PHON.ONSET con ] ].

duanyun_n1 := n_proper_le &
 [ STEM < "duanyun" >,
   SYNSEM [ LKEYS.KEYREL.CARG "duanyun",
            PHON.ONSET con ] ].

dub_v1 := v_np_trans_le &
 [ STEM < "dub" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dub_v_1_rel",
            PHON.ONSET con ] ].

dub_v2 := v_np_as_le &
 [ STEM < "dub" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dub_v_as_rel",
            PHON.ONSET con ] ].

dub_v3 := v_ditrans_only_le &
 [ STEM < "dub" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dub_v_1_rel",
            PHON.ONSET con ] ].

dub_v4 := v_np_prep_trans_le &
 [ STEM < "dub" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _onto_p_rel,
                    KEYREL.PRED "_dub_v_1_rel" ],
            PHON.ONSET con ] ].

dubai_n1 := n_proper_le &
 [ STEM < "dubai" >,
   SYNSEM [ LKEYS.KEYREL.CARG "dubai",
            PHON.ONSET con ] ].

dubious_a1 := adj_intrans_le &
 [ STEM < "dubious" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dubious_a_1_rel",
            PHON.ONSET con ] ].

dubliner_n1 := n_proper_le &
 [ STEM < "dubliner" >,
   SYNSEM [ LKEYS.KEYREL.CARG "dubliner",
            PHON.ONSET con ] ].

duck_n1 := n_intr_le &
 [ STEM < "duck" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_duck_n_1_rel",
            PHON.ONSET con ] ].

duck_out_v1 := v_particle_le &
 [ STEM < "duck" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_duck_v_out_rel" ],
            PHON.ONSET con ] ].

duck_v1 := v_np*_trans_le &
 [ STEM < "duck" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_duck_v_1_rel",
            PHON.ONSET con ] ].

duct_n1 := n_intr_le &
 [ STEM < "duct" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_duct_n_1_rel",
            PHON.ONSET con ] ].

dude_root_post := adv_disc_posth_le &
 [ STEM < "dude" >,
   SYNSEM [ LKEYS.KEYREL.CARG "dude",
            PHON.ONSET con ] ].

dude_root_pre := adv_disc_preh_le &
 [ STEM < "dude" >,
   SYNSEM [ LKEYS.KEYREL.CARG "dude",
            PHON.ONSET con ] ].

duderstadt_n1 := n_proper_city_le &
 [ STEM < "duderstadt" >,
   SYNSEM [ LKEYS.KEYREL.CARG "duderstadt",
            PHON.ONSET con ] ].

dudes_root_post := adv_disc_posth_le &
 [ STEM < "dudes" >,
   SYNSEM [ LKEYS.KEYREL.CARG "dudes",
            PHON.ONSET con ] ].

dudes_root_pre := adv_disc_preh_le &
 [ STEM < "dudes" >,
   SYNSEM [ LKEYS.KEYREL.CARG "dudes",
            PHON.ONSET con ] ].

due_a1 := adj_intrans_le &
 [ STEM < "due" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_due_a_1_rel",
            PHON.ONSET con ] ].

due_date_n1 := n_mass_count_le &
 [ STEM < "due", "date" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_due+date_n_1_rel",
            PHON.ONSET con ] ].

due_to_p := p_le &
 [ STEM < "due", "to" >,
   SYNSEM [ LKEYS.KEYREL.PRED _due+to_p_rel,
            PHON.ONSET con ] ].

duel_n1 := n_intr_le &
 [ STEM < "duel" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_duel_n_1_rel",
            PHON.ONSET con ] ].

duel_v1 := v_np*_trans_le &
 [ STEM < "duel" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_drug_v_1_rel",
            PHON.ONSET con ] ].

duesseldorf_nd := n_proper_city_le &
 [ STEM < "duesseldorf" >,
   SYNSEM [ LKEYS.KEYREL.CARG "duesseldorf",
            PHON.ONSET con ] ].

duet_n1 := n_intr_le &
 [ STEM < "duet" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_duet_n_1_rel",
            PHON.ONSET con ] ].

duff_a1 := adj_intrans_le &
 [ STEM < "duff" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_duff_a_1_rel",
            PHON.ONSET con ] ].

duisburg_n1 := n_proper_city_le &
 [ STEM < "duisburg" >,
   SYNSEM [ LKEYS.KEYREL.CARG "duisburg",
            PHON.ONSET con ] ].

dull_isect := adj_intrans_le &
 [ STEM < "dull" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dull_a_1_rel",
            PHON.ONSET con ] ].

duller := adj_comp_le &
 [ STEM < "duller" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dull_a_1_rel",
            PHON.ONSET con ] ].

dullest_a1 := adj_superl_le &
 [ STEM < "dullest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dull_a_1_rel",
            PHON.ONSET con ] ].

duly := adv_int_vp_le &
 [ STEM < "duly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_due_a_1_rel",
            PHON.ONSET con ] ].

dumb_a1 := adj_intrans_le &
 [ STEM < "dumb" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dumb_a_1_rel",
            PHON.ONSET con ] ].

dummdalen_n1 := n_proper_le &
 [ STEM < "dummdalen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "dummdalen",
            PHON.ONSET con ] ].

dummdalsgrottene_n1 := n_proper_le &
 [ STEM < "dummdalsgrottene" >,
   SYNSEM [ LKEYS.KEYREL.CARG "dummdalsgrottene",
            PHON.ONSET con ] ].

dummy_a1 := adj_intrans_le &
 [ STEM < "dummy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dummy_a_1_rel",
            PHON.ONSET con ] ].

dumnmdalen_n1 := n_proper_le &
 [ STEM < "dumnmdalen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "dumnmdalen",
            PHON.ONSET con ] ].

dump_n1 := n_intr_le &
 [ STEM < "dump" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dump_n_1_rel",
            PHON.ONSET con ] ].

dump_on_v1 := v_empty_prep_intrans_le &
 [ STEM < "dump" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_dump_v_on_rel" ],
            PHON.ONSET con ] ].

dump_out_v1 := v_particle_np_le &
 [ STEM < "dump" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_dump_v_out_rel" ],
            PHON.ONSET con ] ].

dump_v1 := v_np_prep_trans_dors_le &
 [ STEM < "dump" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dump_v_1_rel",
            PHON.ONSET con ] ].

dump_v2 := v_np_trans_le &
 [ STEM < "dump" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dump_v_1_rel",
            PHON.ONSET con ] ].

dumpling_n1 := n_intr_le &
 [ STEM < "dumpling" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dumpling_n_1_rel",
            PHON.ONSET con ] ].

dun_n1 := n_intr_le &
 [ STEM < "dun" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dun_n_1_rel",
            PHON.ONSET con ] ].

dun_v1 := v_np_trans_le &
 [ STEM < "dun" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dun_v_1_rel",
            PHON.ONSET con ] ].

dung_n1 := n_mass_le &
 [ STEM < "dung" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dung_n_1_rel",
            PHON.ONSET con ] ].

dungeon_n1 := n_intr_le &
 [ STEM < "dungeon" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dungeon_n_1_rel",
            PHON.ONSET con ] ].

duolun_n1 := n_proper_le &
 [ STEM < "duolun" >,
   SYNSEM [ LKEYS.KEYREL.CARG "duolun",
            PHON.ONSET con ] ].

duplicate_n1 := n_intr_le &
 [ STEM < "duplicate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_duplicate_n_1_rel",
            PHON.ONSET con ] ].

duplicate_v1 := v_np_trans_le &
 [ STEM < "duplicate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_duplicate_v_1_rel",
            PHON.ONSET con ] ].

durable_a1 := adj_intrans_le &
 [ STEM < "durable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_durable_a_1_rel",
            PHON.ONSET con ] ].

duration_n1 := n_ppof_le &
 [ STEM < "duration" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_duration_n_of_rel",
            PHON.ONSET con ] ].

during := p_le &
 [ STEM < "during" >,
   SYNSEM [ LKEYS.KEYREL.PRED _during_p_rel,
            PHON.ONSET con ] ].

dusk := n_hour_le &
 [ STEM < "dusk" >,
   SYNSEM [ LKEYS.KEYREL.CARG "dusk",
            PHON.ONSET con ] ].

dusseldorf_n1 := n_proper_city_le &
 [ STEM < "dusseldorf" >,
   SYNSEM [ LKEYS.KEYREL.CARG "dusseldorf",
            PHON.ONSET con ] ].

dust_n1 := n_mass_count_le &
 [ STEM < "dust" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dust_n_1_rel",
            PHON.ONSET con ] ].

dust_v1 := v_np_trans_le &
 [ STEM < "dust" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dust_v_1_rel",
            PHON.ONSET con ] ].

dusting_n1 := n_ppof_le &
 [ STEM < "dusting" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dusting_n_of_rel",
            PHON.ONSET con ] ].

dutch_a1 := adj_intrans_le &
 [ STEM < "dutch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dutch_a_1_rel",
            PHON.ONSET con ] ].

dutch_n1 := n_proper_le &
 [ STEM < "dutch" >,
   SYNSEM [ LKEYS.KEYREL.CARG "dutch",
            PHON.ONSET con ] ].

dutch_n2 := n_mass_count_le &
 [ STEM < "dutch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dutch_n_1_rel",
            PHON.ONSET con ] ].

duty_n1 := n_mass_count_le &
 [ STEM < "duty" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_duty_n_1_rel",
            PHON.ONSET con ] ].

dvd_n1 := n_intr_le &
 [ STEM < "dvd" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dvd_n_1_rel",
            PHON.ONSET con ] ].

dwarf_n1 := n_intr_le &
 [ STEM < "dwarf" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dwarf_n_1_rel",
            PHON.ONSET con ] ].

dwarf_v1 := v_np_trans_le &
 [ STEM < "dwarf" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dwarf_v_1_rel",
            PHON.ONSET con ] ].

dwell_on_v1 := v_empty_prep_intrans_le &
 [ STEM < "dwell" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_dwell_v_on_rel" ],
            PHON.ONSET con ] ].

dwell_v1 := v_unerg_le &
 [ STEM < "dwell" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dwell_v_1_rel",
            PHON.ONSET con ] ].

dwelling_n1 := n_intr_le &
 [ STEM < "dwelling" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dwelling_n_1_rel",
            PHON.ONSET con ] ].

dwindle_v1 := v_unacc_le &
 [ STEM < "dwindle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dwindle_v_1_rel",
            PHON.ONSET con ] ].

dye_n1 := n_mass_count_le &
 [ STEM < "dye" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dye_n_1_rel",
            PHON.ONSET con ] ].

dye_v1 := v_np_trans_le &
 [ STEM < "dye" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dye_v_1_rel",
            PHON.ONSET con ] ].

dye_v2 := v_obj_equi_prd_le &
 [ STEM < "dye" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dye_v_1_rel",
            PHON.ONSET con ] ].

dyer_n1 := n_intr_le &
 [ STEM < "dyer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dyer_n_1_rel",
            PHON.ONSET con ] ].

dylan_n1 := n_proper_le &
 [ STEM < "dylan" >,
   SYNSEM [ LKEYS.KEYREL.CARG "dylan",
            PHON.ONSET con ] ].

dymesodden_n1 := n_proper_le &
 [ STEM < "dymesodden" >,
   SYNSEM [ LKEYS.KEYREL.CARG "dymesodden",
            PHON.ONSET con ] ].

dynabook_n1 := n_intr_le &
 [ STEM < "dynabook" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dynabook_n_1_rel",
            PHON.ONSET con ] ].

dynasty_n1 := n_intr_le &
 [ STEM < "dynasty" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dynasty_n_1_rel",
            PHON.ONSET con ] ].

dynasty_post_ttl := n_post_title_le &
 [ STEM < "dynasty" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dynasty_n_1_rel",
            PHON.ONSET con ] ].

dyrehaugsryggen_n1 := n_proper_le &
 [ STEM < "dyrehaugsryggen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "dyrehaugsryggen",
            PHON.ONSET con ] ].

dyrnesodden_n1 := n_proper_le &
 [ STEM < "dyrnesodden" >,
   SYNSEM [ LKEYS.KEYREL.CARG "dyrnesodden",
            PHON.ONSET con ] ].

dÃ¸rÃ¥lseter := n_proper_le &
 [ STEM < "dÃ¸rÃ¥lseter" >,
   SYNSEM [ LKEYS.KEYREL.CARG "dÃ¸rÃ¥lseter",
            PHON.ONSET con ] ].

e_g_a1 := adv_int_vp_post_le &
 [ STEM < "e.g." >,
   SYNSEM [ LKEYS.KEYREL.PRED "_e+g_a_1_rel",
            PHON.ONSET con ] ].

e_g_a2 := adv_int_vp_post_le &
 [ STEM < "e.g" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_e+g_a_1_rel",
            PHON.ONSET con ] ].

e_g_disc_adv := adv_disc_like_preh_le &
 [ STEM < "e.g." >,
   SYNSEM [ LKEYS.KEYREL.CARG "e+g",
            PHON.ONSET con ] ].

e_g_disc_adv2 := adv_disc_like_preh_le &
 [ STEM < "e.g" >,
   SYNSEM [ LKEYS.KEYREL.CARG "e+g",
            PHON.ONSET con ] ].

e_g_pp := pp_nmod_le &
 [ STEM < "e.g." >,
   SYNSEM [ LKEYS.KEYREL.PRED _e+g_p_rel,
            PHON.ONSET con ] ].

e_g_pp2 := pp_nmod_le &
 [ STEM < "e.g" >,
   SYNSEM [ LKEYS.KEYREL.PRED _e+g_p_rel,
            PHON.ONSET con ] ].

e_mail_n1 := n_mass_count_le &
 [ STEM < "e", "mail" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_email_n_1_rel",
            PHON.ONSET voc ] ].

e_mail_n2 := n_mass_count_le &
 [ STEM < "e-", "mail" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_email_n_1_rel",
            PHON.ONSET voc ] ].

e_mail_n3 := n_mass_count_le &
 [ STEM < "_E", "mail" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_email_n_1_rel",
            PHON.ONSET voc ] ].

e_mail_n4 := n_mass_count_le &
 [ STEM < "_E-", "mail" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_email_n_1_rel",
            PHON.ONSET voc ] ].

e_mail_v1 := v_ditrans_le &
 [ STEM < "e", "mail" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_email_v_1_rel",
            PHON.ONSET voc ] ].

e_mail_v2 := v_np*_trans_le &
 [ STEM < "e", "mail" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_email_v_1_rel",
            PHON.ONSET voc ] ].

e_mail_v3 := v_ditrans_le &
 [ STEM < "_E", "mail" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_email_v_1_rel",
            PHON.ONSET voc ] ].

e_mail_v4 := v_np*_trans_le &
 [ STEM < "_E", "mail" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_email_v_1_rel",
            PHON.ONSET voc ] ].

e_mail_v5 := v_ditrans_le &
 [ STEM < "_E-", "mail" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_email_v_1_rel",
            PHON.ONSET voc ] ].

e_mail_v6 := v_np*_trans_le &
 [ STEM < "_E-", "mail" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_email_v_1_rel",
            PHON.ONSET voc ] ].

e_mail_v7 := v_ditrans_le &
 [ STEM < "e-", "mail" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_email_v_1_rel",
            PHON.ONSET voc ] ].

e_mail_v8 := v_np*_trans_le &
 [ STEM < "e-", "mail" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_email_v_1_rel",
            PHON.ONSET voc ] ].

e_n1 := n_proper_le &
 [ STEM < "e" >,
   SYNSEM [ LKEYS.KEYREL.CARG "e",
            PHON.ONSET voc ] ].

e_np1 := n_proper_le &
 [ STEM < "_e" >,
   SYNSEM [ LKEYS.KEYREL.CARG "e",
            PHON.ONSET voc ] ].

e_period_np1 := n_proper_le &
 [ STEM < "e." >,
   SYNSEM [ LKEYS.KEYREL.CARG "e",
            PHON.ONSET voc ] ].

e_period_np2 := n_proper_le &
 [ STEM < "_e." >,
   SYNSEM [ LKEYS.KEYREL.CARG "e",
            PHON.ONSET voc ] ].

e_ticket_n1 := n_intr_le &
 [ STEM < "eticket" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_e+ticket_n_1_rel",
            PHON.ONSET voc ] ].

e_ticket_n2 := n_intr_le &
 [ STEM < "e", "ticket" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_e+ticket_n_1_rel",
            PHON.ONSET voc ] ].

e_ticket_n3 := n_intr_le &
 [ STEM < "e-", "ticket" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_e+ticket_n_1_rel",
            PHON.ONSET voc ] ].

each := det_part_sg_le &
 [ STEM < "each" >,
   SYNSEM [ LKEYS.KEYREL.PRED _each_q_rel,
            PHON.ONSET voc ] ].

each_adv1 := adv_int_vp_aux_le &
 [ STEM < "each" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_each_p_rel",
            PHON.ONSET voc ] ].

each_other := n_recip_pro_le &
 [ STEM < "each", "other" >,
   SYNSEM.PHON.ONSET voc ].

each_pp := pp_nmod_le &
 [ STEM < "each" >,
   SYNSEM [ LKEYS.KEYREL.PRED _each_p_rel,
            PHON.ONSET voc ] ].

eager_a1 := adj_intrans_le &
 [ STEM < "eager" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_eager_a_1_rel",
            PHON.ONSET voc ] ].

eager_a2 := adj_reg_equi_le &
 [ STEM < "eager" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_eager_a_1_rel",
            PHON.ONSET voc ] ].

eagerly := adv_int_vp_le &
 [ STEM < "eagerly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_eager_a_1_rel",
            PHON.ONSET voc ] ].

eagerness_n1 := n_mass_le &
 [ STEM < "eagerness" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_eagerness_n_1_rel",
            PHON.ONSET voc ] ].

eagle_n1 := n_intr_le &
 [ STEM < "eagle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_eagle_n_1_rel",
            PHON.ONSET voc ] ].

eaglet_n1 := n_intr_le &
 [ STEM < "eaglet" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_eaglet_n_1_rel",
            PHON.ONSET voc ] ].

ear_n1 := n_intr_le &
 [ STEM < "ear" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ear_n_1_rel",
            PHON.ONSET voc ] ].

earlier_a1 := adj_comp_le &
 [ STEM < "earlier" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_early_a_1_rel",
            PHON.ONSET voc ] ].

earlier_adv := n_comp_adv_le &
 [ STEM < "earlier" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED "_early_a_1_rel",
                    KEYREL.PRED time_n_rel ],
            PHON.ONSET voc ] ].

earliest_a1 := adj_superl_le &
 [ STEM < "earliest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_early_a_1_rel",
            PHON.ONSET voc ] ].

early_a1 := adj_intrans_le &
 [ STEM < "early" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_early_a_1_rel",
            PHON.ONSET voc ] ].

early_adv := n_adv_tm_unsp_le &
 [ STEM < "early" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED "_early_a_1_rel",
                    KEYREL.PRED time_n_rel ],
            PHON.ONSET voc ] ].

earmark_n1 := n_intr_le &
 [ STEM < "earmark" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_earmark_n_1_rel",
            PHON.ONSET voc ] ].

earn_v1 := v_np_trans_le &
 [ STEM < "earn" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_earn_v_1_rel",
            PHON.ONSET voc ] ].

earn_v2 := v_ditrans_only_le &
 [ STEM < "earn" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_earn_v_1_rel",
            PHON.ONSET voc ] ].

earnest_a1 := adj_intrans_le &
 [ STEM < "earnest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_earnest_a_1_rel",
            PHON.ONSET voc ] ].

earnestly := adv_int_vp_le &
 [ STEM < "earnestly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_earnest_a_1_rel",
            PHON.ONSET voc ] ].

earth_n1 := n_proper_le &
 [ STEM < "earth" >,
   SYNSEM [ LKEYS.KEYREL.CARG "earth",
            PHON.ONSET voc ] ].

earthly_a1 := adj_intrans_le &
 [ STEM < "earthly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_earthly_a_1_rel",
            PHON.ONSET voc ] ].

earthwork_n1 := n_intr_le &
 [ STEM < "earthwork" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_earthwork_n_1_rel",
            PHON.ONSET voc ] ].

earthy_a1 := adj_intrans_le &
 [ STEM < "earthy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_earthy_a_1_rel",
            PHON.ONSET voc ] ].

ease_n1 := n_mass_le &
 [ STEM < "ease" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ease_n_1_rel",
            PHON.ONSET voc ] ].

ease_out_v1 := v_particle_np_le &
 [ STEM < "ease" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_ease_v_out_rel" ],
            PHON.ONSET voc ] ].

ease_up_v1 := v_particle_le &
 [ STEM < "ease" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_ease_v_up_rel" ],
            PHON.ONSET voc ] ].

ease_v1 := v_prep_dir_le &
 [ STEM < "ease" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ease_v_1_rel",
            PHON.ONSET voc ] ].

ease_v2 := v_np_trans_noger_le &
 [ STEM < "ease" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ease_v_1_rel",
            PHON.ONSET voc ] ].

easier_a1 := adj_comp_le &
 [ STEM < "easier" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_easy_a_for_rel",
            PHON.ONSET voc ] ].

easier_a2 := adj_reg_atrans_le &
 [ STEM < "easier" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_easier_a_for_rel",
            PHON.ONSET voc ] ].

easier_a3 := adj_tough_atrans_le &
 [ STEM < "easier" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_easier_a_for_rel",
            PHON.ONSET voc ] ].

easiest := adj_superl_le &
 [ STEM < "easiest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_easy_a_for_rel",
            PHON.ONSET voc ] ].

easiest_a2 := adj_reg_atrans_le &
 [ STEM < "easiest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_easiest_a_for_rel",
            PHON.ONSET voc ] ].

easiest_a3 := adj_tough_atrans_le &
 [ STEM < "easiest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_easiest_a_for_rel",
            PHON.ONSET voc ] ].

easily_adv1 := adv_int_vp_le &
 [ STEM < "easily" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_easy_a_for_rel",
            PHON.ONSET voc ] ].

east_a1 := adj_attr_intrans_le &
 [ STEM < "east" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_east_a_1_rel",
            PHON.ONSET voc ] ].

east_indies_n1 := n_intr_named_le &
 [ STEM < "east", "indies" >,
   SYNSEM [ LKEYS.KEYREL.CARG "east_indies",
            PHON.ONSET con ] ].

east_n1 := n_no_cmpnd_hd_le &
 [ STEM < "east" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_east_n_1_rel",
            PHON.ONSET voc ] ].

east_n2 := n_adv_dir_le &
 [ STEM < "east" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED _east_a_1_rel,
                    KEYREL.PRED place_n_rel ],
            PHON.ONSET voc ] ].

east_palo_alto_n1 := n_proper_city_le &
 [ STEM < "east", "palo", "alto" >,
   SYNSEM [ LKEYS.KEYREL.CARG "east_palo_alto",
            PHON.ONSET voc ] ].

east_timor_n1 := n_proper_le &
 [ STEM < "east", "timor" >,
   SYNSEM [ LKEYS.KEYREL.CARG "east_timor",
            PHON.ONSET voc ] ].

east_west_a1 := adj_attr_intrans_le &
 [ STEM < "east-", "west" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_east+west_a_1_rel",
            PHON.ONSET voc ] ].

eastbound_a1 := adj_intrans_le &
 [ STEM < "eastbound" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_eastbound_a_1_rel",
            PHON.ONSET voc ] ].

easter := n_holiday_le &
 [ STEM < "easter" >,
   SYNSEM [ LKEYS.KEYREL.CARG "easter",
            PHON.ONSET voc ] ].

easter_monday := n_holiday_le &
 [ STEM < "easter", "monday" >,
   SYNSEM [ LKEYS.KEYREL.CARG "easter_monday",
            PHON.ONSET voc ] ].

easter_sunday := n_holiday_le &
 [ STEM < "easter", "sunday" >,
   SYNSEM [ LKEYS.KEYREL.CARG "easter_sunday",
            PHON.ONSET voc ] ].

easter_weekend := n_holiday_le &
 [ STEM < "easter", "weekend" >,
   SYNSEM [ LKEYS.KEYREL.CARG "easter_weekend",
            PHON.ONSET voc ] ].

easterly_a1 := adj_intrans_le &
 [ STEM < "easterly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_easterly_a_1_rel",
            PHON.ONSET voc ] ].

eastern_a1 := adj_intrans_le &
 [ STEM < "eastern" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_eastern_a_1_rel",
            PHON.ONSET voc ] ].

easternmost_a1 := adj_intrans_le &
 [ STEM < "easternmost" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_easternmost_a_1_rel",
            PHON.ONSET voc ] ].

eastward_a1 := adj_intrans_le &
 [ STEM < "eastward" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_eastward_a_1_rel",
            PHON.ONSET voc ] ].

eastward_n1 := n_adv_event_le &
 [ STEM < "eastward" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED _eastward_a_1_rel,
                    KEYREL.PRED place_n_rel ],
            PHON.ONSET voc ] ].

eastwards_n1 := n_adv_event_le &
 [ STEM < "eastwards" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED _eastward_a_1_rel,
                    KEYREL.PRED place_n_rel ],
            PHON.ONSET voc ] ].

easy_a1 := adj_trans_le &
 [ STEM < "easy" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_easy_a_for_rel" ],
            PHON.ONSET voc ] ].

easy_a2 := adj_reg_atrans_le &
 [ STEM < "easy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_easy_a_for_rel",
            PHON.ONSET voc ] ].

easy_a3 := adj_tough_atrans_le &
 [ STEM < "easy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_easy_a_for_rel",
            PHON.ONSET voc ] ].

easy_going_a1 := adj_intrans_le &
 [ STEM < "easy", "going" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_easy+going_a_1_rel",
            PHON.ONSET voc ] ].

easy_going_a2 := adj_intrans_le &
 [ STEM < "easy-", "going" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_easy+going_a_1_rel",
            PHON.ONSET voc ] ].

eat1 := v_np*_trans_le &
 [ STEM < "eat" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_eat_v_1_rel",
            PHON.ONSET voc ] ].

eat_in_v1 := v_particle_le &
 [ STEM < "eat" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_eat_v_in_rel" ],
            PHON.ONSET voc ] ].

eat_out_v1 := v_particle_le &
 [ STEM < "eat" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_eat_v_out_rel" ],
            PHON.ONSET voc ] ].

eat_up_v1 := v_particle_np_le &
 [ STEM < "eat" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_eat_v_up_rel" ],
            PHON.ONSET voc ] ].

eatery_n1 := n_intr_le &
 [ STEM < "eatery" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_eatery_n_1_rel",
            PHON.ONSET voc ] ].

eaton_n1 := n_proper_le &
 [ STEM < "eaton" >,
   SYNSEM [ LKEYS.KEYREL.CARG "eaton",
            PHON.ONSET voc ] ].

eats_n1 := n_plur_nocmpnd_le &
 [ STEM < "eat" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_eats_n_1_rel",
            PHON.ONSET voc ] ].

eaves_n1 := n_plur_le &
 [ STEM < "eave" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_eaves_n_1_rel",
            PHON.ONSET voc ] ].

eavesdrop_v1 := v_unerg_le &
 [ STEM < "eavesdrop" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_eavesdrop_v_1_rel",
            PHON.ONSET voc ] ].

ebags_n1 := n_proper_le &
 [ STEM < "e", "bags" >,
   SYNSEM [ LKEYS.KEYREL.CARG "e-bags",
            PHON.ONSET voc ] ].

ebags_n2 := n_proper_le &
 [ STEM < "e", "bag" >,
   SYNSEM [ LKEYS.KEYREL.CARG "e-bags",
            PHON.ONSET voc ] ].

ebb_n1 := n_intr_le &
 [ STEM < "ebb" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ebb_n_1_rel",
            PHON.ONSET voc ] ].

eccentric_a1 := adj_intrans_le &
 [ STEM < "eccentric" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_eccentric_a_1_rel",
            PHON.ONSET voc ] ].

ecclesiastical_a1 := adj_intrans_le &
 [ STEM < "ecclesiastical" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ecclesiastical_a_1_rel",
            PHON.ONSET voc ] ].

echo_n1 := n_intr_le &
 [ STEM < "echo" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_echo_n_1_rel",
            PHON.ONSET voc ] ].

echo_v1 := v_np*_trans_le &
 [ STEM < "echo" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_echo_v_1_rel",
            PHON.ONSET voc ] ].

eclectic_a1 := adj_intrans_le &
 [ STEM < "eclectic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_eclectic_a_1_rel",
            PHON.ONSET voc ] ].

eclecticism_n1 := n_mass_le &
 [ STEM < "eclecticism" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_eclecticism_n_1_rel",
            PHON.ONSET voc ] ].

eco_friendly_a1 := adj_intrans_le &
 [ STEM < "eco", "friendly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_eco+friendly_a_1_rel",
            PHON.ONSET voc ] ].

ecological_isect := adj_intrans_le &
 [ STEM < "ecological" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ecological_a_1_rel",
            PHON.ONSET voc ] ].

ecologically := adv_int_vp_le &
 [ STEM < "ecologically" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ecological_a_1_rel",
            PHON.ONSET voc ] ].

ecology_n1 := n_mass_le &
 [ STEM < "ecology" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ecology_n_1_rel",
            PHON.ONSET voc ] ].

ecommerce_n1 := n_mass_le &
 [ STEM < "ecommerce" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ecommerce_n_1_rel",
            PHON.ONSET voc ] ].

ecommerce_n2 := n_mass_le &
 [ STEM < "e", "commerce" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ecommerce_n_1_rel",
            PHON.ONSET voc ] ].

economic_a1 := adj_intrans_le &
 [ STEM < "economic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_economic_a_1_rel",
            PHON.ONSET voc ] ].

economical_adj := adj_intrans_le &
 [ STEM < "economical" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_economical_a_1_rel",
            PHON.ONSET voc ] ].

economically_adv1 := adv_int_vp_post_le &
 [ STEM < "economically" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_economical_a_1_rel",
            PHON.ONSET voc ] ].

economize_v1 := v_unerg_le &
 [ STEM < "economize" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_economize_v_1_rel",
            PHON.ONSET voc ] ].

economy_n1 := n_intr_le &
 [ STEM < "economy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_economy_n_1_rel",
            PHON.ONSET voc ] ].

ecosystem_n1 := n_intr_le &
 [ STEM < "ecosystem" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ecosystem_n_1_rel",
            PHON.ONSET voc ] ].

ecu_n1 := n_intr_le &
 [ STEM < "ecu" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ecu_n_1_rel",
            PHON.ONSET voc ] ].

eddy_n1 := n_intr_le &
 [ STEM < "eddy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_eddy_n_1_rel",
            PHON.ONSET voc ] ].

eden_n1 := n_proper_le &
 [ STEM < "eden" >,
   SYNSEM [ LKEYS.KEYREL.CARG "eden",
            PHON.ONSET voc ] ].

edentate_a1 := adj_intrans_le &
 [ STEM < "edentate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_edentate_n_1_rel",
            PHON.ONSET voc ] ].

edentate_n1 := n_intr_le &
 [ STEM < "edentate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_edentate_n_1_rel",
            PHON.ONSET voc ] ].

edgar_n1 := n_proper_le &
 [ STEM < "edgar" >,
   SYNSEM [ LKEYS.KEYREL.CARG "edgar",
            PHON.ONSET voc ] ].

edge_i_n1 := n_bare_nomod_le &
 [ STEM < "edge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_edge_n_of_rel",
            PHON.ONSET voc ] ].

edge_n1 := n_ppof_le &
 [ STEM < "edge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_edge_n_of_rel",
            PHON.ONSET voc ] ].

edge_v1 := v_np_trans_noger_le &
 [ STEM < "edge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_edge_v_1_rel",
            PHON.ONSET voc ] ].

edge_v2 := v_prep_dir_le &
 [ STEM < "edge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_edge_v_1_rel",
            PHON.ONSET voc ] ].

edible_isect := adj_intrans_le &
 [ STEM < "edible" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_edible_a_1_rel",
            PHON.ONSET voc ] ].

edict_n1 := n_intr_le &
 [ STEM < "edict" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_edict_n_1_rel",
            PHON.ONSET voc ] ].

edifice_n1 := n_intr_le &
 [ STEM < "edifice" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_edifice_n_1_rel",
            PHON.ONSET voc ] ].

edinburgh_n1 := n_proper_city_le &
 [ STEM < "edinburgh" >,
   SYNSEM [ LKEYS.KEYREL.CARG "edinburgh",
            PHON.ONSET voc ] ].

edison_n1 := n_proper_le &
 [ STEM < "edison" >,
   SYNSEM [ LKEYS.KEYREL.CARG "edison",
            PHON.ONSET voc ] ].

edit_n1 := n_intr_le &
 [ STEM < "edit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_edit_n_1_rel",
            PHON.ONSET voc ] ].

edit_v1 := v_np*_trans_le &
 [ STEM < "edit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_edit_v_1_rel",
            PHON.ONSET voc ] ].

edition_n1 := n_intr_le &
 [ STEM < "edition" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_edition_n_1_rel",
            PHON.ONSET voc ] ].

editor_n1 := n_intr_le &
 [ STEM < "editor" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_editor_n_1_rel",
            PHON.ONSET voc ] ].

edmonton_n1 := n_proper_city_le &
 [ STEM < "edmonton" >,
   SYNSEM [ LKEYS.KEYREL.CARG "edmonton",
            PHON.ONSET voc ] ].

educate_v1 := v_np_trans_le &
 [ STEM < "educate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_educate_v_1_rel",
            PHON.ONSET voc ] ].

educate_v2 := v_obj_equi_le &
 [ STEM < "educate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_educate_v_1_rel",
            PHON.ONSET voc ] ].

education_n1 := n_mass_le &
 [ STEM < "education" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_education_n_1_rel",
            PHON.ONSET voc ] ].

educational_a1 := adj_intrans_le &
 [ STEM < "educational" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_educational_a_1_rel",
            PHON.ONSET voc ] ].

educator_n1 := n_intr_le &
 [ STEM < "educator" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_educator_n_1_rel",
            PHON.ONSET voc ] ].

educe_v1 := v_np_trans_le &
 [ STEM < "educe" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_educe_v_1_rel",
            PHON.ONSET voc ] ].

educe_v2 := v_cp_non_trans_le &
 [ STEM < "educe" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_educe_v_1_rel",
            PHON.ONSET voc ] ].

edvard := n_proper_le &
 [ STEM < "edvard" >,
   SYNSEM [ LKEYS.KEYREL.CARG "edvard",
            PHON.ONSET voc ] ].

effect_n1 := n_intr_le &
 [ STEM < "effect" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_effect_n_1_rel",
            PHON.ONSET voc ] ].

effect_v1 := v_np_trans_le &
 [ STEM < "effect" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_effect_v_1_rel",
            PHON.ONSET voc ] ].

effective_a1 := adj_intrans_le &
 [ STEM < "effective" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_effective_a_1_rel",
            PHON.ONSET voc ] ].

effectively_adv1 := adv_int_vp_le &
 [ STEM < "effectively" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_effective_a_1_rel",
            PHON.ONSET voc ] ].

effectiveness_n1 := n_mass_le &
 [ STEM < "effectiveness" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_effectiveness_n_1_rel",
            PHON.ONSET voc ] ].

effeminate_a1 := adj_intrans_le &
 [ STEM < "effeminate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_effeminate_a_1_rel",
            PHON.ONSET voc ] ].

effervesce_v1 := v_unerg_le &
 [ STEM < "effervesce" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_effervesce_v_1_rel",
            PHON.ONSET voc ] ].

efficacious_a1 := adj_intrans_le &
 [ STEM < "efficacious" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_efficacious_a_1_rel",
            PHON.ONSET voc ] ].

efficacy_n1 := n_mass_count_le &
 [ STEM < "efficacy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_efficacy_n_1_rel",
            PHON.ONSET voc ] ].

efficiency_n1 := n_mass_le &
 [ STEM < "efficiency" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_efficiency_n_1_rel",
            PHON.ONSET voc ] ].

efficient_a1 := adj_intrans_le &
 [ STEM < "efficient" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_efficient_a_1_rel",
            PHON.ONSET voc ] ].

efficiently_a1 := adv_int_vp_le &
 [ STEM < "efficiently" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_efficient_a_1_rel",
            PHON.ONSET voc ] ].

effing_deg := adv_degree_spec_v_le &
 [ STEM < "effing" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_effing_x_deg_rel",
            PHON.ONSET voc ] ].

effort_n1 := n_mass_count_le &
 [ STEM < "effort" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_effort_n_1_rel",
            PHON.ONSET voc ] ].

effusive_a1 := adj_intrans_le &
 [ STEM < "effusive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_effusive_a_1_rel",
            PHON.ONSET voc ] ].

egg_n1 := n_intr_le &
 [ STEM < "egg" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_egg_n_1_rel",
            PHON.ONSET voc ] ].

eggers_n1 := n_proper_le &
 [ STEM < "eggers" >,
   SYNSEM [ LKEYS.KEYREL.CARG "eggers",
            PHON.ONSET voc ] ].

ego_n1 := n_mass_count_le &
 [ STEM < "ego" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ego_n_1_rel",
            PHON.ONSET voc ] ].

egoistic_isect := adj_intrans_le &
 [ STEM < "egoistic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_egoistic_a_1_rel",
            PHON.ONSET voc ] ].

egoistically := adv_int_vp_le &
 [ STEM < "egoistically" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_egoistical_a_1_rel",
            PHON.ONSET voc ] ].

egret_n1 := n_intr_le &
 [ STEM < "egret" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_egret_n_1_rel",
            PHON.ONSET voc ] ].

egypt_n1 := n_proper_le &
 [ STEM < "egypt" >,
   SYNSEM [ LKEYS.KEYREL.CARG "egypt",
            PHON.ONSET voc ] ].

egyptian := n_proper_le &
 [ STEM < "egyptian" >,
   SYNSEM [ LKEYS.KEYREL.CARG "egyptian",
            PHON.ONSET voc ] ].

eh_root := adv_s_post_word_nospec_le &
 [ STEM < "eh" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_eh_a_1_rel",
            PHON.ONSET voc ] ].

eidsbugarden := n_proper_le &
 [ STEM < "eidsbugarden" >,
   SYNSEM [ LKEYS.KEYREL.CARG "eidsbugarden",
            PHON.ONSET voc ] ].

eidsburagden_n1 := n_proper_le &
 [ STEM < "eidsburagden" >,
   SYNSEM [ LKEYS.KEYREL.CARG "eidsburagden",
            PHON.ONSET voc ] ].

eiendom_n1 := n_proper_le &
 [ STEM < "eiendom" >,
   SYNSEM [ LKEYS.KEYREL.CARG "eiendom",
            PHON.ONSET voc ] ].

eight := adj_bare_unspecified_card_one_le &
 [ STEM < "eight" >,
   SYNSEM [ LKEYS.KEYREL.CARG "8",
            PHON.ONSET voc ] ].

eight_c := adj_bare_unspecified_card_wcomps_one_le &
 [ STEM < "eight" >,
   SYNSEM [ LKEYS.KEYREL.CARG "8",
            PHON.ONSET voc ] ].

eight_day := n_day_of_month_card_le &
 [ STEM < "eight" >,
   SYNSEM [ LKEYS.KEYREL.CARG "8",
            PHON.ONSET voc ] ].

eight_day_num := n_day_of_month_card_le &
 [ STEM < "8" >,
   SYNSEM [ LKEYS.KEYREL.CARG "8",
            PHON.ONSET voc ] ].

eight_day_num_yofc := n_day_of_month_card_yofc_le &
 [ STEM < "8" >,
   SYNSEM [ LKEYS.KEYREL.CARG "8",
            PHON.ONSET voc ] ].

eight_day_yofc := n_day_of_month_card_yofc_le &
 [ STEM < "eight" >,
   SYNSEM [ LKEYS.KEYREL.CARG "8",
            PHON.ONSET voc ] ].

eight_hour := n_hour_le &
 [ STEM < "eight" >,
   SYNSEM [ LKEYS.KEYREL.CARG "8",
            PHON.ONSET voc ] ].

eight_hundreds_n1 := n_plur_xmod_le &
 [ STEM < "eight", "hundreds" >,
   SYNSEM [ LKEYS.KEYREL.CARG "800",
            PHON.ONSET voc ] ].

eight_roman := adj_bare_unspecified_card_one_le &
 [ STEM < "VIII" >,
   SYNSEM [ LKEYS.KEYREL.CARG "VIII",
            PHON.ONSET voc ] ].

eightdigitordersatz := adj_bare_unspecified_ord_six_le &
 [ STEM < "eightdigitordersatz" >,
   SYNSEM [ LKEYS.KEYREL [ CARG "8digersatz",
                             PRED const_rel ],
            PHON.ONSET onset ] ].

eighteen := adj_bare_unspecified_card_two_le &
 [ STEM < "eighteen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "18",
            PHON.ONSET voc ] ].

eighteen_day := n_day_of_month_card_le &
 [ STEM < "eighteen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "18",
            PHON.ONSET voc ] ].

eighteen_day_num := n_day_of_month_card_le &
 [ STEM < "18" >,
   SYNSEM [ LKEYS.KEYREL.CARG "18",
            PHON.ONSET voc ] ].

eighteen_day_num_yofc := n_day_of_month_card_yofc_le &
 [ STEM < "18" >,
   SYNSEM [ LKEYS.KEYREL.CARG "18",
            PHON.ONSET voc ] ].

eighteen_day_yofc := n_day_of_month_card_yofc_le &
 [ STEM < "eighteen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "18",
            PHON.ONSET voc ] ].

eighteenth := adj_bare_unspecified_ord_two_le &
 [ STEM < "eighteenth" >,
   SYNSEM [ LKEYS.KEYREL.CARG "18",
            PHON.ONSET voc ] ].

eighteenth_day := n_day_of_month_le &
 [ STEM < "eighteenth" >,
   SYNSEM [ LKEYS.KEYREL.CARG "18",
            PHON.ONSET voc ] ].

eighteenth_day_num := n_day_of_month_le &
 [ STEM < "18th" >,
   SYNSEM [ LKEYS.KEYREL.CARG "18",
            PHON.ONSET voc ] ].

eighth := adj_bare_unspecified_ord_one_le &
 [ STEM < "eighth" >,
   SYNSEM [ LKEYS.KEYREL.CARG "8",
            PHON.ONSET voc ] ].

eighth_day := n_day_of_month_le &
 [ STEM < "eighth" >,
   SYNSEM [ LKEYS.KEYREL.CARG "8",
            PHON.ONSET voc ] ].

eighth_day_num := n_day_of_month_le &
 [ STEM < "8th" >,
   SYNSEM [ LKEYS.KEYREL.CARG "8",
            PHON.ONSET voc ] ].

eighties_n1 := n_plur_xmod_le &
 [ STEM < "eighties" >,
   SYNSEM [ LKEYS.KEYREL.CARG "80",
            PHON.ONSET voc ] ].

eightish_a1 := n_approx_hour_le &
 [ STEM < "eightish" >,
   SYNSEM [ LKEYS.KEYREL.CARG "8",
            PHON.ONSET voc ] ].

eighty := adj_bare_unspecified_card_two_le &
 [ STEM < "eighty" >,
   SYNSEM [ LKEYS.KEYREL.CARG "80",
            PHON.ONSET voc ] ].

eighty_w_comps := adj_complemented_unspecified_card_le &
 [ STEM < "eighty" >,
   SYNSEM [ LKEYS.KEYREL.CARG "80",
            PHON.ONSET voc ] ].

eightyish_approx := adj_approx_bare_unspecified_card_le &
 [ STEM < "eightyish" >,
   SYNSEM [ LKEYS.KEYREL.CARG "80",
            PHON.ONSET voc ] ].

eiliv_n1 := n_proper_le &
 [ STEM < "eiliv" >,
   SYNSEM [ LKEYS.KEYREL.CARG "eiliv",
            PHON.ONSET voc ] ].

einar_n1 := n_proper_le &
 [ STEM < "einar" >,
   SYNSEM [ LKEYS.KEYREL.CARG "einar",
            PHON.ONSET voc ] ].

eisbugarden_n1 := n_proper_le &
 [ STEM < "eisbugarden" >,
   SYNSEM [ LKEYS.KEYREL.CARG "eisbugarden",
            PHON.ONSET voc ] ].

either_adv1 := adv_int_vp_aux_le &
 [ STEM < "either" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_either_a_also_rel",
            PHON.ONSET voc ] ].

either_adv2 := adv_int_vp_post_nonmob_le &
 [ STEM < "either" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_either_a_also_rel",
            PHON.ONSET voc ] ].

either_conj := conj_atomic_either_le &
 [ STEM < "either" >,
   SYNSEM.PHON.ONSET voc ].

either_det := det_part_le &
 [ STEM < "either" >,
   SYNSEM [ LKEYS.KEYREL.PRED _either_q_rel,
            PHON.ONSET voc ] ].

either_that_or_root := adv_s_pre_word_root_le &
 [ STEM < "either", "that", "or" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_either+that+or_a_1_rel",
            PHON.ONSET voc ] ].

eject_v1 := v_np_trans_noger_le &
 [ STEM < "eject" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_eject_v_cause_rel",
            PHON.ONSET voc ] ].

eject_v2 := v_unacc_le &
 [ STEM < "eject" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_eject_v_1_rel",
            PHON.ONSET voc ] ].

eject_v3 := v_np_prep_trans_dors_le &
 [ STEM < "eject" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_eject_v_cause_rel",
            PHON.ONSET voc ] ].

ekg_n1 := n_intr_le &
 [ STEM < "ekg" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ekg_n_1_rel",
            PHON.ONSET voc ] ].

ekrehytta_n1 := n_proper_le &
 [ STEM < "ekrehytta" >,
   SYNSEM [ LKEYS.KEYREL.CARG "ekrehytta",
            PHON.ONSET voc ] ].

el_nino_n1 := n_proper_le &
 [ STEM < "el", "nino" >,
   SYNSEM [ LKEYS.KEYREL.CARG "el_nino",
            PHON.ONSET voc ] ].

elaborate_a1 := adj_intrans_le &
 [ STEM < "elaborate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_elaborate_a_1_rel",
            PHON.ONSET voc ] ].

elaborate_on_v1 := v_empty_prep_intrans_le &
 [ STEM < "elaborate" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_elaborate_v_on_rel" ],
            PHON.ONSET voc ] ].

elaborate_v1 := v_np*_trans_le &
 [ STEM < "elaborate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_elaborate_v_1_rel",
            PHON.ONSET voc ] ].

elaborate_v2 := v_cp_non_trans_le &
 [ STEM < "elaborate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_elaborate_v_1_rel",
            PHON.ONSET voc ] ].

elaborately_adv1 := adv_int_vp_le &
 [ STEM < "elaborately" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_elaborate_a_1_rel",
            PHON.ONSET voc ] ].

elapse_v1 := v_unacc_le &
 [ STEM < "elapse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_elapse_v_1_rel",
            PHON.ONSET voc ] ].

elastic_a1 := adj_intrans_le &
 [ STEM < "elastic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_elastic_a_1_rel",
            PHON.ONSET voc ] ].

elastic_n1 := n_mass_le &
 [ STEM < "elastic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_elastic_n_1_rel",
            PHON.ONSET voc ] ].

elbow_n1 := n_intr_le &
 [ STEM < "elbow" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_elbow_n_1_rel",
            PHON.ONSET voc ] ].

elbow_v1 := v_np_prep_trans_dors_le &
 [ STEM < "elbow" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_elbow_v_1_rel",
            PHON.ONSET voc ] ].

elbow_v2 := v_np_trans_le &
 [ STEM < "elbow" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_elbow_v_1_rel",
            PHON.ONSET voc ] ].

eldaseter := n_proper_le &
 [ STEM < "eldaseter" >,
   SYNSEM [ LKEYS.KEYREL.CARG "eldaseter",
            PHON.ONSET voc ] ].

elderly_a1 := adj_intrans_le &
 [ STEM < "elderly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_elderly_a_1_rel",
            PHON.ONSET voc ] ].

eldÃ¥bu := n_proper_le &
 [ STEM < "eldÃ¥bu" >,
   SYNSEM [ LKEYS.KEYREL.CARG "eldÃ¥bu",
            PHON.ONSET voc ] ].

eleanor_n1 := n_proper_le &
 [ STEM < "eleanor" >,
   SYNSEM [ LKEYS.KEYREL.CARG "eleanor",
            PHON.ONSET voc ] ].

elect_v1 := v_subj_equi_le &
 [ STEM < "elect" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_elect_v_1_rel",
            PHON.ONSET voc ] ].

elect_v2 := v_np_trans_le &
 [ STEM < "elect" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_elect_v_1_rel",
            PHON.ONSET voc ] ].

election_n1 := n_mass_count_ppof_le &
 [ STEM < "election" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_election_n_of_rel",
            PHON.ONSET voc ] ].

elector_n1 := n_intr_le &
 [ STEM < "elector" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_elector_n_1_rel",
            PHON.ONSET voc ] ].

electoral_a1 := adj_intrans_le &
 [ STEM < "electoral" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_electoral_a_1_rel",
            PHON.ONSET voc ] ].

electric_adj := adj_intrans_le &
 [ STEM < "electric" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_electric_a_1_rel",
            PHON.ONSET voc ] ].

electric_n1 := n_mass_le &
 [ STEM < "electric" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_electric_n_1_rel",
            PHON.ONSET voc ] ].

electrical_a1 := adj_intrans_le &
 [ STEM < "electrical" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_electrical_a_1_rel",
            PHON.ONSET voc ] ].

electricity_n1 := n_mass_le &
 [ STEM < "electricity" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_electricity_n_1_rel",
            PHON.ONSET voc ] ].

electronic_a1 := adj_intrans_le &
 [ STEM < "electronic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_electronic_a_1_rel",
            PHON.ONSET voc ] ].

electronically_adv1 := adv_int_vp_le &
 [ STEM < "electronically" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_electronic_a_1_rel",
            PHON.ONSET voc ] ].

electronics_n1 := n_mass_le &
 [ STEM < "electronics" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_electronics_n_1_rel",
            PHON.ONSET voc ] ].

elegance_n1 := n_mass_le &
 [ STEM < "elegance" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_elegance_n_1_rel",
            PHON.ONSET voc ] ].

elegant_isect := adj_intrans_le &
 [ STEM < "elegant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_elegant_a_1_rel",
            PHON.ONSET voc ] ].

elegantly := adv_int_vp_le &
 [ STEM < "elegantly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_elegant_a_1_rel",
            PHON.ONSET voc ] ].

elektronika_n1 := n_proper_le &
 [ STEM < "elektronika" >,
   SYNSEM [ LKEYS.KEYREL.CARG "elektronika",
            PHON.ONSET voc ] ].

element_n1 := n_intr_le &
 [ STEM < "element" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_element_n_1_rel",
            PHON.ONSET voc ] ].

elementary_isect := adj_intrans_le &
 [ STEM < "elementary" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_elementary_a_1_rel",
            PHON.ONSET voc ] ].

elephant_n1 := n_intr_le &
 [ STEM < "elephant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_elephant_n_1_rel",
            PHON.ONSET voc ] ].

elevate_v1 := v_to_trans_le &
 [ STEM < "elevate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_elevate_v_cause-to_rel",
            PHON.ONSET voc ] ].

elevate_v2 := v_unacc_le &
 [ STEM < "elevate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_elevate_v_1_rel",
            PHON.ONSET voc ] ].

elevate_v3 := v_obj_equi_le &
 [ STEM < "elevate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_elevate_v_cause_rel",
            PHON.ONSET voc ] ].

elevate_v4 := v_np_trans_noger_le &
 [ STEM < "elevate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_elevate_v_cause-to_rel",
            PHON.ONSET voc ] ].

elevation_n1 := n_mass_count_ppof_le &
 [ STEM < "elevation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_elevation_n_of_rel",
            PHON.ONSET voc ] ].

elevator_n1 := n_intr_le &
 [ STEM < "elevator" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_elevator_n_1_rel",
            PHON.ONSET voc ] ].

eleven := adj_bare_unspecified_card_two_le &
 [ STEM < "eleven" >,
   SYNSEM [ LKEYS.KEYREL.CARG "11",
            PHON.ONSET voc ] ].

eleven_day := n_day_of_month_card_le &
 [ STEM < "eleven" >,
   SYNSEM [ LKEYS.KEYREL.CARG "11",
            PHON.ONSET voc ] ].

eleven_day_num := n_day_of_month_card_le &
 [ STEM < "11" >,
   SYNSEM [ LKEYS.KEYREL.CARG "11",
            PHON.ONSET voc ] ].

eleven_day_num_yofc := n_day_of_month_card_yofc_le &
 [ STEM < "11" >,
   SYNSEM [ LKEYS.KEYREL.CARG "11",
            PHON.ONSET voc ] ].

eleven_day_yofc := n_day_of_month_card_yofc_le &
 [ STEM < "eleven" >,
   SYNSEM [ LKEYS.KEYREL.CARG "11",
            PHON.ONSET voc ] ].

eleven_hour := n_hour_le &
 [ STEM < "eleven" >,
   SYNSEM [ LKEYS.KEYREL.CARG "11",
            PHON.ONSET voc ] ].

elevendigitordersatz := adj_bare_unspecified_ord_nine_le &
 [ STEM < "elevendigitordersatz" >,
   SYNSEM [ LKEYS.KEYREL [ CARG "dig11ersatz",
                             PRED const_rel ],
            PHON.ONSET onset ] ].

elevenish := n_approx_hour_le &
 [ STEM < "elevenish" >,
   SYNSEM [ LKEYS.KEYREL.CARG "11",
            PHON.ONSET voc ] ].

eleventh := adj_bare_unspecified_ord_two_le &
 [ STEM < "eleventh" >,
   SYNSEM [ LKEYS.KEYREL.CARG "11",
            PHON.ONSET voc ] ].

eleventh_day := n_day_of_month_le &
 [ STEM < "eleventh" >,
   SYNSEM [ LKEYS.KEYREL.CARG "11",
            PHON.ONSET voc ] ].

eleventh_day_num := n_day_of_month_le &
 [ STEM < "11th" >,
   SYNSEM [ LKEYS.KEYREL.CARG "11",
            PHON.ONSET voc ] ].

elf_n1 := n_intr_le &
 [ STEM < "elf" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_elf_n_1_rel",
            PHON.ONSET voc ] ].

eli_n1 := n_proper_le &
 [ STEM < "eli" >,
   SYNSEM [ LKEYS.KEYREL.CARG "eli",
            PHON.ONSET voc ] ].

elicit_v1 := v_np_trans_le &
 [ STEM < "elicit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_elicit_v_1_rel",
            PHON.ONSET voc ] ].

eliminate_v1 := v_empty_prep*_trans_le &
 [ STEM < "eliminate" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _from_p_sel_rel,
                    KEYREL.PRED "_eliminate_v_from_rel" ],
            PHON.ONSET voc ] ].

elimination_n1 := n_mass_count_le &
 [ STEM < "elimination" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_elimination_n_1_rel",
            PHON.ONSET voc ] ].

elitist_a1 := adj_intrans_le &
 [ STEM < "elitist" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_elitist_a_1_rel",
            PHON.ONSET voc ] ].

elizabeth := n_proper_le &
 [ STEM < "elizabeth" >,
   SYNSEM [ LKEYS.KEYREL.CARG "elizabeth",
            PHON.ONSET voc ] ].

elk_n1 := n_intr_le &
 [ STEM < "elk" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_elk_n_1_rel",
            PHON.ONSET voc ] ].

ellipsis_n1 := n_mass_count_le &
 [ STEM < "ellipsis" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ellipsis_n_1_rel",
            PHON.ONSET voc ] ].

elliptical_a1 := adj_intrans_le &
 [ STEM < "elliptical" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_elliptical_a_1_rel",
            PHON.ONSET voc ] ].

elliptically_adv := adv_int_vp_le &
 [ STEM < "elliptically" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_elliptical_a_1_rel",
            PHON.ONSET voc ] ].

elongate_v1 := v_np_trans_le &
 [ STEM < "elongate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_elongate_v_1_rel",
            PHON.ONSET voc ] ].

eloquence_n1 := n_mass_le &
 [ STEM < "eloquence" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_eloquence_n_1_rel",
            PHON.ONSET voc ] ].

elph_n1 := n_proper_le &
 [ STEM < "elph" >,
   SYNSEM [ LKEYS.KEYREL.CARG "elph",
            PHON.ONSET voc ] ].

else_a1 := adj_pred_nodpct_le &
 [ STEM < "else" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_else_a_1_rel",
            PHON.ONSET voc ] ].

else_n1 := n_proper_le &
 [ STEM < "else" >,
   SYNSEM [ LKEYS.KEYREL.CARG "else",
            PHON.ONSET voc ] ].

else_wh_adv := wh_the_hell_le &
 [ STEM < "else" >,
   SYNSEM [ LKEYS.KEYREL.PRED _else_x_rel,
            PHON.ONSET voc ] ].

elsewhere_nom := n_adv_pl_le &
 [ STEM < "elsewhere" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED _elsewhere_a_1_rel,
                    KEYREL.PRED place_n_rel ],
            PHON.ONSET voc ] ].

elveseter_n1 := n_proper_le &
 [ STEM < "elveseter" >,
   SYNSEM [ LKEYS.KEYREL.CARG "elveseter",
            PHON.ONSET voc ] ].

elvesetter_n1 := n_proper_le &
 [ STEM < "elvesetter" >,
   SYNSEM [ LKEYS.KEYREL.CARG "elvesetter",
            PHON.ONSET voc ] ].

email-ersatz := n_proper_le &
 [ STEM < "emailersatz" >,
   SYNSEM [ LKEYS.KEYREL.CARG "emailersatz",
            PHON.ONSET onset ] ].

email_n1 := n_mass_count_le &
 [ STEM < "email" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_email_n_1_rel",
            PHON.ONSET voc ] ].

email_v1 := v_ditrans_le &
 [ STEM < "email" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_email_v_1_rel",
            PHON.ONSET voc ] ].

email_v2 := v_np*_trans_le &
 [ STEM < "email" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_email_v_1_rel",
            PHON.ONSET voc ] ].

emailing_n1 := n_intr_le &
 [ STEM < "emailing" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_emailing_n_1_rel",
            PHON.ONSET voc ] ].

emailing_n2 := n_intr_le &
 [ STEM < "e", "mailing" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_emailing_n_1_rel",
            PHON.ONSET voc ] ].

emanate_v1 := v_empty_prep_intrans_le &
 [ STEM < "emanate" >,
   SYNSEM [ LKEYS [ --COMPKEY _from_p_sel_rel,
                    KEYREL.PRED "_emanate_v_from_rel" ],
            PHON.ONSET voc ] ].

emanate_v2 := v_np_trans_le &
 [ STEM < "emanate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_emanate_v_1_rel",
            PHON.ONSET voc ] ].

emanation_n1 := n_mass_count_le &
 [ STEM < "emanation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_emanation_n_1_rel",
            PHON.ONSET voc ] ].

emanuel_n1 := n_proper_le &
 [ STEM < "emanuel" >,
   SYNSEM [ LKEYS.KEYREL.CARG "emanuel",
            PHON.ONSET voc ] ].

embankment_n1 := n_intr_le &
 [ STEM < "embankment" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_embankment_n_1_rel",
            PHON.ONSET voc ] ].

embark_on_v1 := v_prep_intrans_le &
 [ STEM < "embark" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_rel,
                    KEYREL.PRED "_embark_v_1_rel" ],
            PHON.ONSET voc ] ].

embark_upon_v1 := v_prep*_intrans_le &
 [ STEM < "embark" >,
   SYNSEM [ LKEYS [ --COMPKEY _upon_p_rel,
                    KEYREL.PRED "_embark_v_1_rel" ],
            PHON.ONSET voc ] ].

embarrass_v1 := v_np_trans_le &
 [ STEM < "embarrass" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_embarrass_v_1_rel",
            PHON.ONSET voc ] ].

embarrassed_a1 := adj_intrans_le &
 [ STEM < "embarrassed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_embarrassed_a_1_rel",
            PHON.ONSET voc ] ].

embarrassing_a1 := adj_intrans_le &
 [ STEM < "embarrassing" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_embarrassing_a_1_rel",
            PHON.ONSET voc ] ].

embarrassment_n1 := n_mass_count_le &
 [ STEM < "embarrassment" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_embarrassment_n_1_rel",
            PHON.ONSET voc ] ].

embed_v1 := v_np_trans_le &
 [ STEM < "embed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_embed_v_1_rel",
            PHON.ONSET voc ] ].

embed_v2 := v_np_prep_trans_dors_le &
 [ STEM < "embed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_embed_v_1_rel",
            PHON.ONSET voc ] ].

embellish_v1 := v_np*_trans_le &
 [ STEM < "embellish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_embellish_v_1_rel",
            PHON.ONSET voc ] ].

embellishment_n1 := n_mass_count_le &
 [ STEM < "embellishment" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_embellishment_n_1_rel",
            PHON.ONSET voc ] ].

emblematic_a1 := adj_intrans_le &
 [ STEM < "emblematic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_emblematic_a_1_rel",
            PHON.ONSET voc ] ].

embodiment_n1 := n_mass_count_le &
 [ STEM < "embodiment" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_embodiment_n_1_rel",
            PHON.ONSET voc ] ].

embody_v1 := v_np_trans_le &
 [ STEM < "embody" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_embody_v_1_rel",
            PHON.ONSET voc ] ].

embrace_n1 := n_intr_le &
 [ STEM < "embrace" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_embrace_n_1_rel",
            PHON.ONSET voc ] ].

embrace_v1 := v_np_trans_le &
 [ STEM < "embrace" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_embrace_v_1_rel",
            PHON.ONSET voc ] ].

embroider_v1 := v_np*_trans_le &
 [ STEM < "embroider" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_embroider_v_1_rel",
            PHON.ONSET voc ] ].

embroidery_n1 := n_mass_count_le &
 [ STEM < "embroidery" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_embroidery_n_1_rel",
            PHON.ONSET voc ] ].

emerald_a1 := adj_intrans_le &
 [ STEM < "emerald" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_emerald_a_1_rel",
            PHON.ONSET voc ] ].

emerge_v1 := v_unerg_le &
 [ STEM < "emerge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_emerge_v_1_rel",
            PHON.ONSET voc ] ].

emerge_v2 := v_np_non_trans_le &
 [ STEM < "emerge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_emerge_v_1_rel",
            PHON.ONSET voc ] ].

emergence_n1 := n_mass_le &
 [ STEM < "emergence" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_emergence_n_1_rel",
            PHON.ONSET voc ] ].

emergency_n1 := n_intr_le &
 [ STEM < "emergency" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_emergency_n_1_rel",
            PHON.ONSET voc ] ].

emerson := n_proper_le &
 [ STEM < "emerson" >,
   SYNSEM [ LKEYS.KEYREL.CARG "emerson",
            PHON.ONSET voc ] ].

emetic_a1 := adj_intrans_le &
 [ STEM < "emetic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_emetic_a_1_rel",
            PHON.ONSET voc ] ].

emetic_n1 := n_intr_le &
 [ STEM < "emetic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_emetic_n_1_rel",
            PHON.ONSET voc ] ].

emigrate_v1 := v_unerg_le &
 [ STEM < "emigrate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_emigrate_v_1_rel",
            PHON.ONSET voc ] ].

eminent_a1 := adj_intrans_le &
 [ STEM < "eminent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_eminent_a_1_rel",
            PHON.ONSET voc ] ].

eminently_deg := adv_degree_spec_le &
 [ STEM < "eminently" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_eminently_x_deg_rel",
            PHON.ONSET voc ] ].

emit_v1 := v_np_trans_le &
 [ STEM < "emit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_emit_v_1_rel",
            PHON.ONSET voc ] ].

emotion_n1 := n_mass_count_le &
 [ STEM < "emotion" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_emotion_n_1_rel",
            PHON.ONSET voc ] ].

emperor_granted_reverend_n1 := n_proper_le &
 [ STEM < "emperor", "granted", "reverend" >,
   SYNSEM [ LKEYS.KEYREL.CARG "emperor_granted_reverend",
            PHON.ONSET voc ] ].

emperor_n1 := n_intr_le &
 [ STEM < "emperor" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_emperor_n_1_rel",
            PHON.ONSET voc ] ].

emperor_ttl := n_title_le &
 [ STEM < "emperor" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_emperor_n_1_rel",
            PHON.ONSET voc ] ].

emphasis_n1 := n_mass_count_ppcomp_le &
 [ STEM < "emphasis" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_emphasis_n_on_rel" ],
            PHON.ONSET voc ] ].

emphasize_v1 := v_np_trans_le &
 [ STEM < "emphasize" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_emphasize_v_1_rel",
            PHON.ONSET voc ] ].

emphasize_v2 := v_cp_non_trans_le &
 [ STEM < "emphasize" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_emphasize_v_1_rel",
            PHON.ONSET voc ] ].

emphatic_a1 := adj_intrans_le &
 [ STEM < "emphatic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_emphatic_a_1_rel",
            PHON.ONSET voc ] ].

emphatically := adv_int_vp_le &
 [ STEM < "emphatically" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_emphatic_a_1_rel",
            PHON.ONSET voc ] ].

empire_n1 := n_intr_le &
 [ STEM < "empire" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_empire_n_1_rel",
            PHON.ONSET voc ] ].

employ_n1 := n_intr_sg_le &
 [ STEM < "employ" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_employ_n_1_rel",
            PHON.ONSET voc ] ].

employ_v1 := v_np_trans_le &
 [ STEM < "employ" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_employ_v_1_rel",
            PHON.ONSET voc ] ].

employ_v2 := v_np_as_le &
 [ STEM < "employ" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_employ_v_as_rel",
            PHON.ONSET voc ] ].

employee_n1 := n_ppof_le &
 [ STEM < "employee" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_employee_n_of_rel",
            PHON.ONSET voc ] ].

employer_n1 := n_intr_le &
 [ STEM < "employer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_employer_n_1_rel",
            PHON.ONSET voc ] ].

employment_n1 := n_mass_le &
 [ STEM < "employment" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_employment_n_1_rel",
            PHON.ONSET voc ] ].

empower_v1 := v_np_trans_le &
 [ STEM < "empower" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_empower_v_1_rel",
            PHON.ONSET voc ] ].

empower_v2 := v_obj_equi_le &
 [ STEM < "empower" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_empower_v_1_rel",
            PHON.ONSET voc ] ].

emptiness_n1 := n_mass_le &
 [ STEM < "emptiness" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_emptiness_n_1_rel",
            PHON.ONSET voc ] ].

empty_a1 := adj_intrans_le &
 [ STEM < "empty" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_empty_a_1_rel",
            PHON.ONSET voc ] ].

empty_v1 := v_np_prep_trans_dors_le &
 [ STEM < "empty" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_empty_v_1_rel",
            PHON.ONSET voc ] ].

empty_v2 := v_np_trans_noger_le &
 [ STEM < "empty" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_empty_v_1_rel",
            PHON.ONSET voc ] ].

empty_v3 := v_prep_dir_le &
 [ STEM < "empty" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_empty_v_1_rel",
            PHON.ONSET voc ] ].

emulate_v1 := v_np_trans_le &
 [ STEM < "emulate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_emulate_v_1_rel",
            PHON.ONSET voc ] ].

en_route_pp := pp_le &
 [ STEM < "en", "route" >,
   SYNSEM [ LKEYS.KEYREL.PRED _en+route_p_rel,
            PHON.ONSET voc ] ].

en_route_pp_2 := pp_le &
 [ STEM < "enroute" >,
   SYNSEM [ LKEYS.KEYREL.PRED _en+route_p_rel,
            PHON.ONSET voc ] ].

enable_v1 := v_obj_equi_le &
 [ STEM < "enable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_enable_v_1_rel",
            PHON.ONSET voc ] ].

enable_v2 := v_np_trans_le &
 [ STEM < "enable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_enable_v_1_rel",
            PHON.ONSET voc ] ].

enact_v1 := v_np_trans_le &
 [ STEM < "enact" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_enact_v_1_rel",
            PHON.ONSET voc ] ].

enchant_v1 := v_np_trans_le &
 [ STEM < "enchant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_enchant_v_1_rel",
            PHON.ONSET voc ] ].

enchanted_a1 := adj_intrans_le &
 [ STEM < "enchanted" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_enchanted_a_1_rel",
            PHON.ONSET voc ] ].

encircle_v1 := v_np*_trans_le &
 [ STEM < "encircle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_encircle_v_1_rel",
            PHON.ONSET voc ] ].

encirclement_n1 := n_mass_le &
 [ STEM < "encirclement" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_encirclement_n_1_rel",
            PHON.ONSET voc ] ].

enclose_v1 := v_np_trans_le &
 [ STEM < "enclose" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_enclose_v_1_rel",
            PHON.ONSET voc ] ].

enclosure_n1 := n_mass_count_le &
 [ STEM < "enclosure" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_enclosure_n_1_rel",
            PHON.ONSET voc ] ].

encode_v1 := v_np_trans_le &
 [ STEM < "encode" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_encode_v_1_rel",
            PHON.ONSET voc ] ].

encompass_v1 := v_np_trans_le &
 [ STEM < "encompass" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_encompass_v_1_rel",
            PHON.ONSET voc ] ].

encompassment_n1 := n_mass_count_le &
 [ STEM < "encompassment" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_encompassment_n_1_rel",
            PHON.ONSET voc ] ].

encounter_n1 := n_intr_le &
 [ STEM < "encounter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_encounter_n_1_rel",
            PHON.ONSET voc ] ].

encounter_v1 := v_np_trans_le &
 [ STEM < "encounter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_encounter_v_1_rel",
            PHON.ONSET voc ] ].

encourage1 := v_obj_equi_le &
 [ STEM < "encourage" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_encourage_v_1_rel",
            PHON.ONSET voc ] ].

encourage_v1 := v_np_trans_cp_prop_le &
 [ STEM < "encourage" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_encourage_v_1_rel",
            PHON.ONSET voc ] ].

encourage_v2 := v_np_trans_le &
 [ STEM < "encourage" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_encourage_v_1_rel",
            PHON.ONSET voc ] ].

encouraging_a1 := adj_trans_le &
 [ STEM < "encouraging" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_encouraging_a_for_rel" ],
            PHON.ONSET voc ] ].

encouraging_a2 := adj_reg_atrans_le &
 [ STEM < "encouraging" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_encouraging_a_for_rel",
            PHON.ONSET voc ] ].

encouraging_a3 := adj_reg_atrans_cp_le &
 [ STEM < "encouraging" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_encouraging_a_for_rel",
            PHON.ONSET voc ] ].

encumber_with_v1 := v_empty_prep*_trans_le &
 [ STEM < "encumber" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_encumber_v_with_rel" ],
            PHON.ONSET voc ] ].

encyclopedia_n1 := n_ppof_le &
 [ STEM < "encyclopedia" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_encyclopedia_n_of_rel",
            PHON.ONSET voc ] ].

end_n1 := n_intr_nosort_le &
 [ STEM < "end" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_end_n_of_rel",
            PHON.ONSET voc ] ].

end_n2 := n_ppcomp_oblig_le &
 [ STEM < "end" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_end_n_of_rel" ],
            PHON.ONSET voc ] ].

end_up_v3 := v_particle_prd_le &
 [ STEM < "end" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_end_v_up_rel" ],
            PHON.ONSET voc ] ].

end_v1 := v_unacc_le &
 [ STEM < "end" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_end_v_1_rel",
            PHON.ONSET voc ] ].

end_v2 := v_np_trans_noger_le &
 [ STEM < "end" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_end_v_cause_rel",
            PHON.ONSET voc ] ].

endanger_v1 := v_np_trans_le &
 [ STEM < "endanger" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_endanger_v_1_rel",
            PHON.ONSET voc ] ].

endearment_n1 := n_mass_count_le &
 [ STEM < "endearment" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_endearment_n_1_rel",
            PHON.ONSET voc ] ].

endeavor_v1 := v_unerg_le &
 [ STEM < "endeavor" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_endeavor_v_1_rel",
            PHON.ONSET voc ] ].

endless_a1 := adj_intrans_le &
 [ STEM < "endless" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_endless_a_1_rel",
            PHON.ONSET voc ] ].

endlessly := adv_int_vp_le &
 [ STEM < "endlessly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_endless_a_1_rel",
            PHON.ONSET voc ] ].

endocarp_n1 := n_intr_le &
 [ STEM < "endocarp" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_endocarp_n_1_rel",
            PHON.ONSET voc ] ].

endorse_v1 := v_np_trans_le &
 [ STEM < "endorse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_endorse_v_1_rel",
            PHON.ONSET voc ] ].

endorse_v2 := v_np_as_le &
 [ STEM < "endorse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_endorse_v_as_rel",
            PHON.ONSET voc ] ].

endow_v1 := v_np_trans_le &
 [ STEM < "endow" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_endow_v_1_rel",
            PHON.ONSET voc ] ].

endow_with_v1 := v_empty_prep_trans_le &
 [ STEM < "endow" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_endow_v_with_rel" ],
            PHON.ONSET voc ] ].

endowment_n1 := n_mass_count_le &
 [ STEM < "endowment" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_endowment_n_1_rel",
            PHON.ONSET voc ] ].

endurance_n1 := n_mass_le &
 [ STEM < "endurance" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_endurance_n_1_rel",
            PHON.ONSET voc ] ].

endure_v1 := v_np*_trans_le &
 [ STEM < "endure" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_endure_v_1_rel",
            PHON.ONSET voc ] ].

enemy_n1 := n_intr_le &
 [ STEM < "enemy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_enemy_n_1_rel",
            PHON.ONSET voc ] ].

energetic_a1 := adj_intrans_le &
 [ STEM < "energetic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_energetic_a_1_rel",
            PHON.ONSET voc ] ].

energy_n1 := n_mass_count_le &
 [ STEM < "energy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_energy_n_1_rel",
            PHON.ONSET voc ] ].

enforce_v1 := v_np_trans_le &
 [ STEM < "enforce" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_enforce_v_1_rel",
            PHON.ONSET voc ] ].

enforcement_n1 := n_mass_count_ppof_le &
 [ STEM < "enforcement" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_enforcement_n_of_rel",
            PHON.ONSET voc ] ].

engage_in_v1 := v_empty_prep_trans_le &
 [ STEM < "engage" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_engage_v_in_rel" ],
            PHON.ONSET voc ] ].

engage_v1 := v_np_trans_le &
 [ STEM < "engage" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_engage_v_1_rel",
            PHON.ONSET voc ] ].

engage_v2 := v_obj_equi_le &
 [ STEM < "engage" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_engage_v_1_rel",
            PHON.ONSET voc ] ].

engaged_a1 := adj_intrans_le &
 [ STEM < "engaged" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_engaged_a_1_rel",
            PHON.ONSET voc ] ].

engagement_n1 := n_ppof_le &
 [ STEM < "engagement" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_engagement_n_of_rel",
            PHON.ONSET voc ] ].

engen_n1 := n_proper_le &
 [ STEM < "engen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "engen",
            PHON.ONSET voc ] ].

engender_v1 := v_np_trans_le &
 [ STEM < "engender" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_engender_v_1_rel",
            PHON.ONSET voc ] ].

engine_n1 := n_intr_le &
 [ STEM < "engine" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_engine_n_1_rel",
            PHON.ONSET voc ] ].

engineer_n1 := n_intr_le &
 [ STEM < "engineer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_engineer_n_1_rel",
            PHON.ONSET voc ] ].

engineer_v1 := v_np_trans_le &
 [ STEM < "engineer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_engineer_v_1_rel",
            PHON.ONSET voc ] ].

engineering_n1 := n_mass_le &
 [ STEM < "engineering" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_engineering_n_1_rel",
            PHON.ONSET voc ] ].

englafjell := n_proper_le &
 [ STEM < "englafjell" >,
   SYNSEM [ LKEYS.KEYREL.CARG "englafjell",
            PHON.ONSET voc ] ].

england_n1 := n_proper_le &
 [ STEM < "england" >,
   SYNSEM [ LKEYS.KEYREL.CARG "england",
            PHON.ONSET voc ] ].

english_a1 := adj_intrans_le &
 [ STEM < "english" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_english_a_1_rel",
            PHON.ONSET voc ] ].

english_n1 := n_proper_le &
 [ STEM < "english" >,
   SYNSEM [ LKEYS.KEYREL.CARG "english",
            PHON.ONSET voc ] ].

english_n2 := n_intr_le &
 [ STEM < "english" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_english_n_1_rel",
            PHON.ONSET voc ] ].

englishman_n1 := n_intr_le &
 [ STEM < "englishman" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_englishman_n_1_rel",
            PHON.ONSET voc ] ].

englishman_title := n_title_le &
 [ STEM < "englishman" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_englishman_n_1_rel",
            PHON.ONSET voc ] ].

engrave_v1 := v_np_trans_le &
 [ STEM < "engrave" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_engrave_v_1_rel",
            PHON.ONSET voc ] ].

engraver_n1 := n_intr_le &
 [ STEM < "engraver" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_engraver_n_1_rel",
            PHON.ONSET voc ] ].

engrossed_a1 := adj_trans_le &
 [ STEM < "engrossed" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_engrossed_a_in_rel" ],
            PHON.ONSET voc ] ].

engrossing_a1 := adj_intrans_le &
 [ STEM < "engrossing" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_engrossing_a_1_rel",
            PHON.ONSET voc ] ].

enhance_v1 := v_np_trans_le &
 [ STEM < "enhance" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_enhance_v_1_rel",
            PHON.ONSET voc ] ].

enigma_n1 := n_intr_le &
 [ STEM < "enigma" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_enigma_n_1_rel",
            PHON.ONSET voc ] ].

enigmatic_a1 := adj_intrans_le &
 [ STEM < "enigmatic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_enigmatic_a_1_rel",
            PHON.ONSET voc ] ].

enigmatically_adv1 := adv_int_vp_le &
 [ STEM < "enigmatically" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_enigmatic_a_1_rel",
            PHON.ONSET voc ] ].

enjoy_v1 := v_np_trans_le &
 [ STEM < "enjoy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_enjoy_v_1_rel",
            PHON.ONSET voc ] ].

enjoy_v2 := v_subj_equi_prp_le &
 [ STEM < "enjoy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_enjoy_v_1_rel",
            PHON.ONSET voc ] ].

enjoyable := adj_intrans_le &
 [ STEM < "enjoyable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_enjoyable_a_1_rel",
            PHON.ONSET voc ] ].

enjoyably_adv1 := adv_int_vp_post_le &
 [ STEM < "enjoyably" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_enjoyable_a_1_rel",
            PHON.ONSET voc ] ].

enjoyment_n1 := n_mass_count_ppof_le &
 [ STEM < "enjoyment" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_enjoyment_n_of_rel",
            PHON.ONSET voc ] ].

enlarge_on_v1 := v_empty_prep_intrans_le &
 [ STEM < "enlarge" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_enlarge_v_on_rel" ],
            PHON.ONSET voc ] ].

enlarge_v1 := v_np_trans_le &
 [ STEM < "enlarge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_enlarge_v_1_rel",
            PHON.ONSET voc ] ].

enlargement_n1 := n_mass_count_le &
 [ STEM < "enlargement" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_enlargement_n_1_rel",
            PHON.ONSET voc ] ].

enlighten_v1 := v_np_trans_le &
 [ STEM < "enlighten" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_enlighten_v_1_rel",
            PHON.ONSET voc ] ].

enlighten_v2 := v_np_prep_trans_le &
 [ STEM < "enlighten" >,
   SYNSEM [ LKEYS [ --COMPKEY _as+to_p_rel,
                    KEYREL.PRED "_enlighten_v_1_rel" ],
            PHON.ONSET voc ] ].

enlightenment_n1 := n_mass_le &
 [ STEM < "enlightenment" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_enlightenment_n_1_rel",
            PHON.ONSET voc ] ].

enormous_a1 := adj_intrans_le &
 [ STEM < "enormous" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_enormous_a_1_rel",
            PHON.ONSET voc ] ].

enough := adv_int_vp_post_le &
 [ STEM < "enough" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_enough_a_1_rel",
            PHON.ONSET voc ] ].

enough_a1 := adj_pred_intrans_le &
 [ STEM < "enough" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_enough_a_1_rel",
            PHON.ONSET voc ] ].

enough_deg := comp_degree_spec_enough_le &
 [ STEM < "enough" >,
   SYNSEM.PHON.ONSET voc ].

enough_det := det_part_pl_mass_le &
 [ STEM < "enough" >,
   SYNSEM [ LKEYS.KEYREL.PRED _enough_q_rel,
            PHON.ONSET voc ] ].

enquire_v1 := v_empty_prep_intrans_le &
 [ STEM < "enquire" >,
   SYNSEM [ LKEYS [ --COMPKEY _about_p_sel_rel,
                    KEYREL.PRED "_enquire_v_about_rel" ],
            PHON.ONSET voc ] ].

enquire_v2 := v_unerg_le &
 [ STEM < "enquire" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_enquire_v_1_rel",
            PHON.ONSET voc ] ].

enquire_v3 := v_prep_intrans_le &
 [ STEM < "enquire" >,
   SYNSEM [ LKEYS [ --COMPKEY _as+to_p_rel,
                    KEYREL.PRED "_enquire_v_1_rel" ],
            PHON.ONSET voc ] ].

enquire_v4 := v_cp_non_trans_le &
 [ STEM < "enquire" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_enquire_v_1_rel",
            PHON.ONSET voc ] ].

enquiry_n1 := n_intr_le &
 [ STEM < "enquiry" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_enquiry_n_1_rel",
            PHON.ONSET voc ] ].

enrich_v1 := v_empty_prep*_trans_le &
 [ STEM < "enrich" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_enrich_v_with_rel" ],
            PHON.ONSET voc ] ].

enroll_in_v1 := v_empty_prep*_trans_le &
 [ STEM < "enroll" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_enroll_v_in_rel" ],
            PHON.ONSET voc ] ].

enroll_in_v2 := v_empty_prep_intrans_le &
 [ STEM < "enroll" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_enroll_v_in_rel" ],
            PHON.ONSET voc ] ].

enroll_v1 := v_unerg_le &
 [ STEM < "enroll" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_enroll_v_1_rel",
            PHON.ONSET voc ] ].

enshrine_in_v1 := v_empty_prep*_trans_le &
 [ STEM < "enshrine" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_enshrine_v_in_rel" ],
            PHON.ONSET voc ] ].

ensue_v1 := v_unacc_le &
 [ STEM < "ensue" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ensue_v_1_rel",
            PHON.ONSET voc ] ].

ensure_v1 := v_cp_prop_non_trans_le &
 [ STEM < "ensure" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ensure_v_1_rel",
            PHON.ONSET voc ] ].

ensure_v2 := v_np_trans_le &
 [ STEM < "ensure" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ensure_v_1_rel",
            PHON.ONSET voc ] ].

entablature_n1 := n_mass_count_le &
 [ STEM < "entablature" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_entablature_n_1_rel",
            PHON.ONSET voc ] ].

entail_v1 := v_cp_prop_non_trans_le &
 [ STEM < "entail" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_entail_v_1_rel",
            PHON.ONSET voc ] ].

entail_v2 := v_np_trans_le &
 [ STEM < "entail" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_entail_v_1_rel",
            PHON.ONSET voc ] ].

entanglement_n1 := n_mass_count_le &
 [ STEM < "entanglement" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_entanglement_n_1_rel",
            PHON.ONSET voc ] ].

enter_v1 := v_np_trans_noger_le &
 [ STEM < "enter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_enter_v_1_rel",
            PHON.ONSET voc ] ].

enter_v2 := v_prep_dir_le &
 [ STEM < "enter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_enter_v_1_rel",
            PHON.ONSET voc ] ].

enterprise_n1 := n_intr_le &
 [ STEM < "enterprise" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_enterprise_n_1_rel",
            PHON.ONSET voc ] ].

enterprise_n2 := n_proper_le &
 [ STEM < "enterprise" >,
   SYNSEM [ LKEYS.KEYREL.CARG "enterprise",
            PHON.ONSET voc ] ].

enterprising_a1 := adj_intrans_le &
 [ STEM < "enterprising" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_enterprising_a_1_rel",
            PHON.ONSET voc ] ].

entertain_v1 := v_np*_trans_le &
 [ STEM < "entertain" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_entertain_v_1_rel",
            PHON.ONSET voc ] ].

entertainer_n1 := n_intr_le &
 [ STEM < "entertainer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_entertainer_n_1_rel",
            PHON.ONSET voc ] ].

entertainment_n1 := n_mass_le &
 [ STEM < "entertainment" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_entertainment_n_1_rel",
            PHON.ONSET voc ] ].

enthrall_v1 := v_np_trans_le &
 [ STEM < "enthrall" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_enthrall_v_1_rel",
            PHON.ONSET voc ] ].

enthuse_v1 := v_cp_prop_non_trans_le &
 [ STEM < "enthuse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_enthuse_v_1_rel",
            PHON.ONSET voc ] ].

enthused_a1 := adj_intrans_le &
 [ STEM < "enthused" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_enthused_a_1_rel",
            PHON.ONSET voc ] ].

enthusiasm_n1 := n_mass_le &
 [ STEM < "enthusiasm" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_enthusiasm_n_1_rel",
            PHON.ONSET voc ] ].

enthusiast_n1 := n_intr_le &
 [ STEM < "enthusiast" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_enthusiast_n_1_rel",
            PHON.ONSET voc ] ].

enthusiastic_isect := adj_intrans_le &
 [ STEM < "enthusiastic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_enthusiastic_a_1_rel",
            PHON.ONSET voc ] ].

enthusiastically := adv_int_vp_le &
 [ STEM < "enthusiastically" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_enthusiastic_a_1_rel",
            PHON.ONSET voc ] ].

entice_v1 := v_np_trans_le &
 [ STEM < "entice" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_entice_v_1_rel",
            PHON.ONSET voc ] ].

enticement_n1 := n_mass_count_le &
 [ STEM < "enticement" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_enticement_n_1_rel",
            PHON.ONSET voc ] ].

enticing_isect := adj_intrans_le &
 [ STEM < "enticing" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_enticing_a_1_rel",
            PHON.ONSET voc ] ].

entire_a1 := adj_intrans_le &
 [ STEM < "entire" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_entire_a_1_rel",
            PHON.ONSET voc ] ].

entirely_adv1 := adv_int_vp_post_le &
 [ STEM < "entirely" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_entire_a_1_rel",
            PHON.ONSET voc ] ].

entirely_deg := adv_degree_spec_v_le &
 [ STEM < "entirely" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_entirely_x_rel",
            PHON.ONSET voc ] ].

entirety_n1 := n_mass_le &
 [ STEM < "entirety" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_entirety_n_1_rel",
            PHON.ONSET voc ] ].

entitle_v1 := v_ditrans_only_le &
 [ STEM < "entitle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_entitle_v_1_rel",
            PHON.ONSET voc ] ].

entitle_v2 := v_to_trans_le &
 [ STEM < "entitle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_entitle_v_to_rel",
            PHON.ONSET voc ] ].

entitle_v3 := v_obj_equi_le &
 [ STEM < "entitle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_entitle_v_to_rel",
            PHON.ONSET voc ] ].

entity_n1 := n_intr_le &
 [ STEM < "entity" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_entity_n_1_rel",
            PHON.ONSET voc ] ].

entrance_n1 := n_intr_le &
 [ STEM < "entrance" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_entrance_n_1_rel",
            PHON.ONSET voc ] ].

entreaty_n1 := n_mass_count_le &
 [ STEM < "entreaty" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_entreaty_n_1_rel",
            PHON.ONSET voc ] ].

entrust_v1 := v_to_trans_le &
 [ STEM < "entrust" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_entrust_v_to_rel",
            PHON.ONSET voc ] ].

entrust_with_v1 := v_empty_prep_trans_le &
 [ STEM < "entrust" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_entrust_v_with_rel" ],
            PHON.ONSET voc ] ].

entry_n1 := n_mass_count_le &
 [ STEM < "entry" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_entry_n_1_rel",
            PHON.ONSET voc ] ].

entryway_n1 := n_intr_le &
 [ STEM < "entryway" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_entryway_n_1_rel",
            PHON.ONSET voc ] ].

entwist_v1 := v_unerg_le &
 [ STEM < "entwist" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_entwist_v_1_rel",
            PHON.ONSET voc ] ].

entwist_v2 := v_np_trans_le &
 [ STEM < "entwist" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_entwist_v_cause_rel",
            PHON.ONSET voc ] ].

enumerate_v1 := v_np_trans_le &
 [ STEM < "enumerate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_enumerate_v_1_rel",
            PHON.ONSET voc ] ].

enumeration_n1 := n_mass_count_le &
 [ STEM < "enumeration" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_enumeration_n_1_rel",
            PHON.ONSET voc ] ].

envelop_v1 := v_np_trans_le &
 [ STEM < "envelop" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_envelop_v_1_rel",
            PHON.ONSET voc ] ].

envelope_n1 := n_intr_le &
 [ STEM < "envelope" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_envelope_n_1_rel",
            PHON.ONSET voc ] ].

envelope_v1 := v_np_trans_le &
 [ STEM < "envelope" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_envelope_v_1_rel",
            PHON.ONSET voc ] ].

envious_a1 := adj_intrans_le &
 [ STEM < "envious" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_envious_a_1_rel",
            PHON.ONSET voc ] ].

environment_n1 := n_intr_le &
 [ STEM < "environment" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_environment_n_1_rel",
            PHON.ONSET voc ] ].

environmental_isect := adj_intrans_le &
 [ STEM < "environmental" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_environmental_a_1_rel",
            PHON.ONSET voc ] ].

environmentally := adv_int_vp_le &
 [ STEM < "environmentally" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_environmental_a_1_rel",
            PHON.ONSET voc ] ].

environs_n1 := n_plur_nocmpnd_le &
 [ STEM < "environ" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_environs_n_1_rel",
            PHON.ONSET voc ] ].

envisage_v1 := v_np_trans_le &
 [ STEM < "envisage" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_envisage_v_1_rel",
            PHON.ONSET voc ] ].

envisage_v2 := v_subj_equi_prp_le &
 [ STEM < "envisage" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_envisage_v_1_rel",
            PHON.ONSET voc ] ].

envisage_v3 := v_np_as_le &
 [ STEM < "envisage" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_envisage_v_as_rel",
            PHON.ONSET voc ] ].

envisage_v4 := v_cp_non_trans_le &
 [ STEM < "envisage" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_envisage_v_1_rel",
            PHON.ONSET voc ] ].

envisage_v5 := v_obj_equi_prd_le &
 [ STEM < "envisage" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_envisage_v_1_rel",
            PHON.ONSET voc ] ].

envision_v1 := v_np_trans_le &
 [ STEM < "envision" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_envision_v_1_rel",
            PHON.ONSET voc ] ].

envision_v2 := v_cp_non_trans_le &
 [ STEM < "envision" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_envision_v_1_rel",
            PHON.ONSET voc ] ].

envy_n1 := n_ppof_le &
 [ STEM < "envy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_envy_n_of_rel",
            PHON.ONSET voc ] ].

ephemeral_a1 := adj_intrans_le &
 [ STEM < "ephemeral" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ephemeral_a_1_rel",
            PHON.ONSET voc ] ].

ephoto_n1 := n_intr_le &
 [ STEM < "ephoto" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ephoto_n_1_rel",
            PHON.ONSET voc ] ].

epic_a1 := adj_intrans_le &
 [ STEM < "epic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_epic_a_1_rel",
            PHON.ONSET voc ] ].

epic_n1 := n_intr_le &
 [ STEM < "epic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_epic_n_1_rel",
            PHON.ONSET voc ] ].

epiphany := n_holiday_le &
 [ STEM < "epiphany" >,
   SYNSEM [ LKEYS.KEYREL.CARG "epiphany",
            PHON.ONSET voc ] ].

episcopal_a1 := adj_intrans_le &
 [ STEM < "episcopal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_episcopal_a_1_rel",
            PHON.ONSET voc ] ].

epispastic_a1 := adj_intrans_le &
 [ STEM < "epispastic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_epispastic_a_1_rel",
            PHON.ONSET voc ] ].

epispastic_n1 := n_intr_le &
 [ STEM < "epispastic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_epispastic_n_1_rel",
            PHON.ONSET voc ] ].

epistle_n1 := n_intr_le &
 [ STEM < "epistle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_epistle_n_1_rel",
            PHON.ONSET voc ] ].

epithet_n1 := n_intr_le &
 [ STEM < "epithet" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_epithet_n_1_rel",
            PHON.ONSET voc ] ].

epitome_n1 := n_intr_le &
 [ STEM < "epitome" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_epitome_n_1_rel",
            PHON.ONSET voc ] ].

epsom_n1 := n_proper_le &
 [ STEM < "epsom" >,
   SYNSEM [ LKEYS.KEYREL.CARG "epsom",
            PHON.ONSET voc ] ].

equal_a1 := adj_trans_le &
 [ STEM < "equal" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_equal_a_to_rel" ],
            PHON.ONSET voc ] ].

equal_math_v1 := v_np_trans_le &
 [ STEM < "=" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_=_v_1_rel",
            PHON.ONSET voc ] ].

equal_n1 := n_no_cmpnd_le &
 [ STEM < "equal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_equal_n_1_rel",
            PHON.ONSET voc ] ].

equal_v1 := v_np_trans_le &
 [ STEM < "equal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_equal_v_1_rel",
            PHON.ONSET voc ] ].

equality_n1 := n_mass_count_le &
 [ STEM < "equality" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_equality_n_1_rel",
            PHON.ONSET voc ] ].

equalize_v1 := v_np_trans_le &
 [ STEM < "equalize" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_equalize_v_1_rel",
            PHON.ONSET voc ] ].

equally := adv_int_vp_le &
 [ STEM < "equally" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_equal_a_to_rel",
            PHON.ONSET voc ] ].

equate_to_v1 := v_empty_prep_trans_le &
 [ STEM < "equate" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_equate_v_to_rel" ],
            PHON.ONSET voc ] ].

equate_to_v2 := v_empty_prep_intrans_le &
 [ STEM < "equate" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_equate_v_to_rel" ],
            PHON.ONSET voc ] ].

equate_v1 := v_empty_prep*_trans_le &
 [ STEM < "equate" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_equate_v_with_rel" ],
            PHON.ONSET voc ] ].

equation_n1 := n_mass_count_le &
 [ STEM < "equation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_equation_n_1_rel",
            PHON.ONSET voc ] ].

equator_n1 := n_intr_le &
 [ STEM < "equator" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_equator_n_1_rel",
            PHON.ONSET voc ] ].

equidistant_a1 := adj_intrans_le &
 [ STEM < "equidistant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_equidistant_a_1_rel",
            PHON.ONSET voc ] ].

equilibrium_n1 := n_mass_count_le &
 [ STEM < "equilibrium" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_equilibrium_n_1_rel",
            PHON.ONSET voc ] ].

equinoctial_a1 := adj_intrans_le &
 [ STEM < "equinoctial" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_equinoctial_a_1_rel",
            PHON.ONSET voc ] ].

equip_v1 := v_empty_prep*_trans_le &
 [ STEM < "equip" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_equip_v_with_rel" ],
            PHON.ONSET voc ] ].

equip_v2 := v_obj_equi_le &
 [ STEM < "equip" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_equip_v_1_rel",
            PHON.ONSET voc ] ].

equipment_n1 := n_mass_le &
 [ STEM < "equipment" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_equipment_n_1_rel",
            PHON.ONSET voc ] ].

equity_n1 := n_mass_le &
 [ STEM < "equity" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_equity_n_1_rel",
            PHON.ONSET voc ] ].

equivalence_n1 := n_mass_count_le &
 [ STEM < "equivalence" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_equivalence_n_1_rel",
            PHON.ONSET voc ] ].

equivalent_a1 := adj_trans_le &
 [ STEM < "equivalent" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_equivalent_a_to_rel" ],
            PHON.ONSET voc ] ].

equivalent_n1 := n_ppof_le &
 [ STEM < "equivalent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_equivalent_n_of_rel",
            PHON.ONSET voc ] ].

equus_n1 := n_proper_le &
 [ STEM < "equus" >,
   SYNSEM [ LKEYS.KEYREL.CARG "equus",
            PHON.ONSET voc ] ].

er_root := adv_s_pre_word_root_le &
 [ STEM < "er" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_er_a_1_rel",
            PHON.ONSET voc ] ].

era_n1 := n_intr_le &
 [ STEM < "era" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_era_n_1_rel",
            PHON.ONSET voc ] ].

eradicate_v1 := v_np_trans_le &
 [ STEM < "eradicate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_eradicate_v_1_rel",
            PHON.ONSET voc ] ].

erase_v1 := v_np_trans_le &
 [ STEM < "erase" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_erase_v_1_rel",
            PHON.ONSET voc ] ].

erect_a1 := adj_intrans_le &
 [ STEM < "erect" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_erect_a_1_rel",
            PHON.ONSET voc ] ].

erect_v1 := v_np_trans_le &
 [ STEM < "erect" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_erect_v_1_rel",
            PHON.ONSET voc ] ].

erfurt_n1 := n_proper_city_le &
 [ STEM < "erfurt" >,
   SYNSEM [ LKEYS.KEYREL.CARG "erfurt",
            PHON.ONSET voc ] ].

erg_n1 := n_intr_le &
 [ STEM < "erg" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_erg_n_1_rel",
            PHON.ONSET voc ] ].

ergonomics_n1 := n_mass_count_le &
 [ STEM < "ergonomics" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ergonomics_n_1_rel",
            PHON.ONSET voc ] ].

ericson_n1 := n_proper_le &
 [ STEM < "ericson" >,
   SYNSEM [ LKEYS.KEYREL.CARG "ericson",
            PHON.ONSET voc ] ].

erik_n1 := n_proper_le &
 [ STEM < "erik" >,
   SYNSEM [ LKEYS.KEYREL.CARG "erik",
            PHON.ONSET voc ] ].

erling_n1 := n_proper_le &
 [ STEM < "erling" >,
   SYNSEM [ LKEYS.KEYREL.CARG "erling",
            PHON.ONSET voc ] ].

ernst-august-platz_n1 := n_proper_le &
 [ STEM < "ernst", "august", "platz" >,
   SYNSEM [ LKEYS.KEYREL.CARG "ernst-august-platz",
            PHON.ONSET voc ] ].

erode_v1 := v_np_trans_noger_le &
 [ STEM < "erode" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_erode_v_cause_rel",
            PHON.ONSET voc ] ].

erode_v2 := v_unacc_le &
 [ STEM < "erode" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_erode_v_1_rel",
            PHON.ONSET voc ] ].

erosion_n1 := n_mass_le &
 [ STEM < "erosion" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_erosion_n_1_rel",
            PHON.ONSET voc ] ].

errand_n1 := n_intr_le &
 [ STEM < "errand" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_errand_n_1_rel",
            PHON.ONSET voc ] ].

erroneous_a1 := adj_intrans_le &
 [ STEM < "erroneous" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_erroneous_a_1_rel",
            PHON.ONSET voc ] ].

erroneously_adv1 := adv_int_vp_le &
 [ STEM < "erroneously" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_erroneous_a_1_rel",
            PHON.ONSET voc ] ].

error_n1 := n_mass_count_le &
 [ STEM < "error" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_error_n_1_rel",
            PHON.ONSET voc ] ].

erupt_v1 := v_unerg_le &
 [ STEM < "erupt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_erupt_v_1_rel",
            PHON.ONSET voc ] ].

eruption_n1 := n_mass_count_le &
 [ STEM < "eruption" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_eruption_n_1_rel",
            PHON.ONSET voc ] ].

erz_n1 := n_proper_le &
 [ STEM < "erz" >,
   SYNSEM [ LKEYS.KEYREL.CARG "erz",
            PHON.ONSET voc ] ].

escalate_v1 := v_np_trans_noger_le &
 [ STEM < "escalate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_escalate_v_cause_rel",
            PHON.ONSET voc ] ].

escalate_v2 := v_unacc_le &
 [ STEM < "escalate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_escalate_v_1_rel",
            PHON.ONSET voc ] ].

escalator_n1 := n_intr_le &
 [ STEM < "escalator" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_escalator_n_1_rel",
            PHON.ONSET voc ] ].

escape_from_v1 := v_empty_prep_intrans_le &
 [ STEM < "escape" >,
   SYNSEM [ LKEYS [ --COMPKEY _from_p_sel_rel,
                    KEYREL.PRED "_escape_v_from_rel" ],
            PHON.ONSET voc ] ].

escape_n1 := n_mass_count_le &
 [ STEM < "escape" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_escape_n_1_rel",
            PHON.ONSET voc ] ].

escape_v1 := v_np*_trans_le &
 [ STEM < "escape" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_escape_v_1_rel",
            PHON.ONSET voc ] ].

escarpment_n1 := n_intr_le &
 [ STEM < "escarpment" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_escarpment_n_1_rel",
            PHON.ONSET voc ] ].

escort_n1 := n_intr_le &
 [ STEM < "escort" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_escort_n_1_rel",
            PHON.ONSET voc ] ].

escort_v1 := v_np_trans_le &
 [ STEM < "escort" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_escort_v_1_rel",
            PHON.ONSET voc ] ].

escudo_n1 := n_intr_le &
 [ STEM < "escudo" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_escudo_n_1_rel",
            PHON.ONSET voc ] ].

escutcheon_n1 := n_intr_le &
 [ STEM < "escutcheon" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_escutcheon_n_1_rel",
            PHON.ONSET voc ] ].

esn_n1 := n_intr_named_le &
 [ STEM < "esn" >,
   SYNSEM [ LKEYS.KEYREL.CARG "esn",
            PHON.ONSET voc ] ].

esp_abb_2 := adv_int_vp_pre_le &
 [ STEM < "esp." >,
   SYNSEM [ LKEYS.KEYREL.PRED "_especially_a_1_rel",
            PHON.ONSET voc ] ].

esp_abb_3 := adv_int_vp_pre_le &
 [ STEM < "esp", ":" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_especially_a_1_rel",
            PHON.ONSET voc ] ].

espalier_n1 := n_intr_le &
 [ STEM < "espalier" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_espalier_n_1_rel",
            PHON.ONSET voc ] ].

especial_a1 := adj_intrans_le &
 [ STEM < "especial" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_especial_a_1_rel",
            PHON.ONSET voc ] ].

especially := adv_int_vp_le &
 [ STEM < "especially" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_especially_a_1_rel",
            PHON.ONSET voc ] ].

especially_deg := adv_degree_spec_le &
 [ STEM < "especially" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_especially_x_deg_rel",
            PHON.ONSET voc ] ].

especially_deg2 := adv_degree_spec_jo_le &
 [ STEM < "especially" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_especially_x_deg_rel",
            PHON.ONSET voc ] ].

espionage_n1 := n_mass_le &
 [ STEM < "espionage" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_espionage_n_1_rel",
            PHON.ONSET voc ] ].

espouse_v1 := v_np_trans_le &
 [ STEM < "espouse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_espouse_v_1_rel",
            PHON.ONSET voc ] ].

espresso_n1 := n_intr_le &
 [ STEM < "espresso" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_espresso_n_1_rel",
            PHON.ONSET voc ] ].

esquire_ttl := n_post_title_le &
 [ STEM < "esq" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_esquire_n_1_rel",
            PHON.ONSET voc ] ].

esquire_ttl_2 := n_post_title_le &
 [ STEM < "esq." >,
   SYNSEM [ LKEYS.KEYREL.PRED "_esquire_n_1_rel",
            PHON.ONSET voc ] ].

essay_n1 := n_intr_le &
 [ STEM < "essay" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_essay_n_1_rel",
            PHON.ONSET voc ] ].

essay_v1 := v_subj_equi_le &
 [ STEM < "essay" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_essay_v_1_rel",
            PHON.ONSET voc ] ].

essay_v2 := v_np_trans_le &
 [ STEM < "essay" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_essay_v_1_rel",
            PHON.ONSET voc ] ].

essence_n1 := n_intr_le &
 [ STEM < "essence" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_essence_n_1_rel",
            PHON.ONSET voc ] ].

essential_a1 := adj_intrans_le &
 [ STEM < "essential" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_essential_a_1_rel",
            PHON.ONSET voc ] ].

essential_n1 := n_intr_le &
 [ STEM < "essential" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_essential_n_1_rel",
            PHON.ONSET voc ] ].

essentially_adv1 := adv_vp_pre_le &
 [ STEM < "essentially" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_essential_a_1_rel",
            PHON.ONSET voc ] ].

essentially_adv2 := adv_s_pre_le &
 [ STEM < "essentially" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_essential_a_1_rel",
            PHON.ONSET voc ] ].

esslingen_n1 := n_proper_city_le &
 [ STEM < "esslingen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "esslingen",
            PHON.ONSET voc ] ].

establish_v1 := v_np*_trans_le &
 [ STEM < "establish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_establish_v_1_rel",
            PHON.ONSET voc ] ].

establish_v2 := v_cp_non_trans_le &
 [ STEM < "establish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_establish_v_1_rel",
            PHON.ONSET voc ] ].

establish_v3 := v_np_as_le &
 [ STEM < "establish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_establish_v_as_rel",
            PHON.ONSET voc ] ].

establishment_n1 := n_mass_count_ppof_le &
 [ STEM < "establishment" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_establishment_n_of_rel",
            PHON.ONSET voc ] ].

estate_n1 := n_intr_le &
 [ STEM < "estate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_estate_n_1_rel",
            PHON.ONSET voc ] ].

esteem_n1 := n_mass_le &
 [ STEM < "esteem" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_esteem_n_1_rel",
            PHON.ONSET voc ] ].

esteem_v1 := v_np_trans_le &
 [ STEM < "esteem" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_esteem_v_1_rel",
            PHON.ONSET voc ] ].

esteemed_a1 := adj_intrans_le &
 [ STEM < "esteemed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_esteemed_a_1_rel",
            PHON.ONSET voc ] ].

estimate_n1 := n_ppof_le &
 [ STEM < "estimate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_estimate_n_of_rel",
            PHON.ONSET voc ] ].

estimate_v1 := v_empty_prep*_trans_le &
 [ STEM < "estimate" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _at_p_sel_rel,
                    KEYREL.PRED "_estimate_v_at_rel" ],
            PHON.ONSET voc ] ].

estimate_v2 := v_cp_non_trans_le &
 [ STEM < "estimate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_estimate_v_at_rel",
            PHON.ONSET voc ] ].

estimate_v3 := v_sor_le &
 [ STEM < "estimate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_estimate_v_at_rel",
            PHON.ONSET voc ] ].

estimation_n1 := n_mass_ppcomp_le &
 [ STEM < "estimation" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_estimation_n_of_rel" ],
            PHON.ONSET voc ] ].

estonia_n1 := n_proper_le &
 [ STEM < "estonia" >,
   SYNSEM [ LKEYS.KEYREL.CARG "estonia",
            PHON.ONSET voc ] ].

estrange_v1 := v_np_trans_le &
 [ STEM < "estrange" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_estrange_v_1_rel",
            PHON.ONSET voc ] ].

estrangement_n1 := n_mass_count_le &
 [ STEM < "estrangement" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_estrangement_n_1_rel",
            PHON.ONSET voc ] ].

estuary_n1 := n_intr_le &
 [ STEM < "estuary" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_estuary_n_1_rel",
            PHON.ONSET voc ] ].

eta_n1 := n_ppcomp_le &
 [ STEM < "eta" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_eta_n_for_rel" ],
            PHON.ONSET voc ] ].

etc_conj := etc_conj_le &
 [ STEM < "etc" >,
   SYNSEM [ LKEYS.KEYREL.PRED _etc_c_rel,
            PHON.ONSET voc ] ].

etc_conj_2 := etc_conj_le &
 [ STEM < "etc." >,
   SYNSEM [ LKEYS.KEYREL.PRED _etc_c_rel,
            PHON.ONSET voc ] ].

etc_conj_3 := etc_conj_qmark_le &
 [ STEM < "etc.?" >,
   SYNSEM [ LKEYS.KEYREL.PRED _etc_c_rel,
            PHON.ONSET voc ] ].

etcetera_a1 := adj_intrans_le &
 [ STEM < "etcetera" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_etcetera_a_1_rel",
            PHON.ONSET voc ] ].

etch_away_v1 := v_particle_np_le &
 [ STEM < "etch" >,
   SYNSEM [ LKEYS [ --COMPKEY _away_p_sel_rel,
                    KEYREL.PRED "_etch_v_away_rel" ],
            PHON.ONSET voc ] ].

etch_v1 := v_np_trans_le &
 [ STEM < "etch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_etch_v_1_rel",
            PHON.ONSET voc ] ].

etch_v2 := v_np_prep_trans_dors_le &
 [ STEM < "etch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_etch_v_1_rel",
            PHON.ONSET voc ] ].

etcher_n1 := n_intr_le &
 [ STEM < "etcher" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_etcher_n_1_rel",
            PHON.ONSET voc ] ].

etching_n1 := n_intr_le &
 [ STEM < "etching" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_etching_n_1_rel",
            PHON.ONSET voc ] ].

ethiopic_a1 := adj_intrans_le &
 [ STEM < "ethiopic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ethiopic_a_1_rel",
            PHON.ONSET voc ] ].

ethnic_a1 := adj_intrans_le &
 [ STEM < "ethnic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ethnic_a_1_rel",
            PHON.ONSET voc ] ].

ettlingen_n1 := n_proper_city_le &
 [ STEM < "ettlingen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "ettlingen",
            PHON.ONSET voc ] ].

euchre_n1 := n_mass_le &
 [ STEM < "euchre" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_euchre_n_1_rel",
            PHON.ONSET voc ] ].

eugene_n1 := n_proper_le &
 [ STEM < "eugene" >,
   SYNSEM [ LKEYS.KEYREL.CARG "eugene",
            PHON.ONSET con ] ].

euphony_n1 := n_mass_le &
 [ STEM < "euphony" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_euphony_n_1_rel",
            PHON.ONSET con ] ].

euphoric_isect := adj_intrans_le &
 [ STEM < "euphoric" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_euphoric_a_1_rel",
            PHON.ONSET con ] ].

euphorically := adv_int_vp_le &
 [ STEM < "euphorically" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_euphoric_a_1_rel",
            PHON.ONSET con ] ].

euro_n1 := n_intr_le &
 [ STEM < "euro" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_euro_n_1_rel",
            PHON.ONSET con ] ].

euro_plur_n1 := n_plur_mwe_le &
 [ STEM < "euro", "'s" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_euro_n_1_rel",
            PHON.ONSET con ] ].

eurocity_n := n_intr_le &
 [ STEM < "eurocity" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_eurocity_n_1_rel",
            PHON.ONSET con ] ].

europe_n1 := n_proper_le &
 [ STEM < "europe" >,
   SYNSEM [ LKEYS.KEYREL.CARG "europe",
            PHON.ONSET con ] ].

european_a1 := adj_intrans_le &
 [ STEM < "european" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_european_a_1_rel",
            PHON.ONSET con ] ].

eva-and-adele_n1 := n_proper_le &
 [ STEM < "eva", "and", "adele" >,
   SYNSEM [ LKEYS.KEYREL.CARG "eva-and-adele",
            PHON.ONSET voc ] ].

eva_n1 := n_proper_le &
 [ STEM < "eva" >,
   SYNSEM [ LKEYS.KEYREL.CARG "eva",
            PHON.ONSET voc ] ].

evacuate_v1 := v_np*_trans_le &
 [ STEM < "evacuate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_evacuate_v_1_rel",
            PHON.ONSET voc ] ].

evacuation_n1 := n_mass_count_ppof_le &
 [ STEM < "evacuation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_evacuation_n_of_rel",
            PHON.ONSET voc ] ].

evade_v1 := v_np_trans_le &
 [ STEM < "evade" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_evade_v_1_rel",
            PHON.ONSET voc ] ].

evaluate_v1 := v_np_trans_le &
 [ STEM < "evaluate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_evaluate_v_1_rel",
            PHON.ONSET voc ] ].

evaluate_v2 := v_cp_ques_fin_inf_non_trans_le &
 [ STEM < "evaluate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_evaluate_v_1_rel",
            PHON.ONSET voc ] ].

evaluation_n1 := n_ppof_le &
 [ STEM < "evaluation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_evaluation_n_of_rel",
            PHON.ONSET voc ] ].

evaporation_n1 := n_mass_le &
 [ STEM < "evaporation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_evaporation_n_1_rel",
            PHON.ONSET voc ] ].

eve_n1 := n_proper_le &
 [ STEM < "eve" >,
   SYNSEM [ LKEYS.KEYREL.CARG "eve",
            PHON.ONSET voc ] ].

evelyn_n1 := n_proper_le &
 [ STEM < "evelyn" >,
   SYNSEM [ LKEYS.KEYREL.CARG "evelyn",
            PHON.ONSET voc ] ].

even_adj := adj_intrans_le &
 [ STEM < "even" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_even_a_1_rel",
            PHON.ONSET voc ] ].

even_adv1 := adv_int_vp_aux_le &
 [ STEM < "even" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_even_a_1_rel",
            PHON.ONSET voc ] ].

even_conj := conj_complex_even_le &
 [ STEM < "even" >,
   SYNSEM.PHON.ONSET con ].

even_deg := adv_degree_spec_jov_only_le &
 [ STEM < "even" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_even_x_deg_rel",
            PHON.ONSET voc ] ].

even_deg2 := adv_degree_spec_m_le &
 [ STEM < "even" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_even_x_deg_rel",
            PHON.ONSET voc ] ].

even_deg3 := adv_degree_spec_det_only_le &
 [ STEM < "even" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_even_x_deg_rel",
            PHON.ONSET con ] ].

even_if_subord := p_subconj_le &
 [ STEM < "even", "if" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_even+if_x_rel",
            PHON.ONSET voc ] ].

even_so_adv2 := adv_s_pre_word_nospec_le &
 [ STEM < "even", "so" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_even+so_a_1_rel",
            PHON.ONSET voc ] ].

even_though_subord := p_subconj_le &
 [ STEM < "even", "though" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_even+though_x_rel",
            PHON.ONSET voc ] ].

evening_nc_n1 := n_day_part_nocomp_le &
 [ STEM < "evening" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_evening_n_of_rel",
            PHON.ONSET voc ] ].

evening_pl_def := n_def_day_part_pl_le &
 [ STEM < "evenings" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_evening_n_of_rel",
            PHON.ONSET voc ] ].

evening_pl_n1 := n_day_part_pl_le &
 [ STEM < "evenings" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_evening_n_of_rel",
            PHON.ONSET voc ] ].

evening_sg_def := n_def_day_part_sg_le &
 [ STEM < "evening" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_evening_n_of_rel",
            PHON.ONSET voc ] ].

evening_sg_n1 := n_day_part_sg_le &
 [ STEM < "evening" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_evening_n_of_rel",
            PHON.ONSET voc ] ].

evenly_adv1 := adv_int_vp_le &
 [ STEM < "evenly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_even_a_1_rel",
            PHON.ONSET voc ] ].

event_n1 := n_intr_le &
 [ STEM < "event" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_event_n_item_rel",
            PHON.ONSET voc ] ].

eventual_a1 := adj_intrans_le &
 [ STEM < "eventual" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_eventual_a_1_rel",
            PHON.ONSET voc ] ].

eventuality_n1 := n_intr_le &
 [ STEM < "eventuality" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_eventuality_n_1_rel",
            PHON.ONSET voc ] ].

eventually_adv1 := adv_int_vp_le &
 [ STEM < "eventually" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_eventual_a_1_rel",
            PHON.ONSET voc ] ].

eventuate_v1 := v_unacc_le &
 [ STEM < "eventuate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_eventuate_v_1_rel",
            PHON.ONSET voc ] ].

ever_adv1 := adv_int_vp_pre_le &
 [ STEM < "ever" >,
   SYNSEM [ LKEYS.KEYREL.PRED _ever_a_1_rel,
            PHON.ONSET voc ] ].

ever_since_adv := adv_int_vp_le &
 [ STEM < "ever", "since" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ever+since_a_1_rel",
            PHON.ONSET con ] ].

ever_since_p := p_noslash_le &
 [ STEM < "ever", "since" >,
   SYNSEM [ LKEYS.KEYREL.PRED _ever+since_p_rel,
            PHON.ONSET con ] ].

ever_since_subord := p_subconj_le &
 [ STEM < "ever", "since" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ever+since_x_subord_rel",
            PHON.ONSET con ] ].

everest_n1 := n_proper_le &
 [ STEM < "everest" >,
   SYNSEM [ LKEYS.KEYREL.CARG "everest",
            PHON.ONSET voc ] ].

evergreen_n1 := n_intr_le &
 [ STEM < "evergreen" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_evergreen_n_1_rel",
            PHON.ONSET voc ] ].

everman_n1 := n_proper_le &
 [ STEM < "everman" >,
   SYNSEM [ LKEYS.KEYREL.CARG "everman",
            PHON.ONSET voc ] ].

every := det_sg_every_le &
 [ STEM < "every" >,
   SYNSEM [ LKEYS.KEYREL.PRED _every_q_rel,
            PHON.ONSET voc ] ].

every_bit_deg := adv_degree_spec_jov_le &
 [ STEM < "every", "bit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_every+bit_x_deg_rel",
            PHON.ONSET con ] ].

every_interval_p := p_measnp_comp_le &
 [ STEM < "every" >,
   SYNSEM [ LKEYS.KEYREL.PRED unspec_loc_rel,
            PHON.ONSET voc ] ].

every_mans_right_n1 := n_intr_named_le &
 [ STEM < "every", "mans", "right" >,
   SYNSEM [ LKEYS.KEYREL.CARG "every_mans_right",
            PHON.ONSET voc ] ].

everybody := n_generic_pro_le &
 [ STEM < "everybody" >,
   SYNSEM [ LKEYS [ ALTKEYREL.PRED every_q_rel,
                    KEYREL.PRED person_rel ],
            PHON.ONSET voc ] ].

everyday_isect := adj_intrans_le &
 [ STEM < "everyday" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_everyday_a_1_rel",
            PHON.ONSET voc ] ].

everyone := n_generic_pro_le &
 [ STEM < "everyone" >,
   SYNSEM [ LKEYS [ ALTKEYREL.PRED every_q_rel,
                    KEYREL.PRED person_rel ],
            PHON.ONSET voc ] ].

everything := n_generic_pro_le &
 [ STEM < "everything" >,
   SYNSEM [ LKEYS [ ALTKEYREL.PRED every_q_rel,
                    KEYREL.PRED thing_rel ],
            PHON.ONSET voc ] ].

everywhere_n1 := n_generic_pro_adv_le &
 [ STEM < "everywhere" >,
   SYNSEM [ LKEYS [ ALTKEYREL.PRED every_q_rel,
                    KEYREL.PRED place_n_rel ],
            PHON.ONSET voc ] ].

everywhere_n2 := n_generic_pro_adv_le &
 [ STEM < "every", "where" >,
   SYNSEM [ LKEYS [ ALTKEYREL.PRED every_q_rel,
                    KEYREL.PRED place_n_rel ],
            PHON.ONSET voc ] ].

evidence_n1 := n_mass_ppcomp_le &
 [ STEM < "evidence" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_evidence_n_of_rel" ],
            PHON.ONSET voc ] ].

evident_a1 := adj_trans_le &
 [ STEM < "evident" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_evident_a_to_rel" ],
            PHON.ONSET voc ] ].

evident_a2 := adj_reg_atrans_that_cp_le &
 [ STEM < "evident" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_evident_a_to_rel",
            PHON.ONSET voc ] ].

evidently_adv1 := adv_vp_aux_le &
 [ STEM < "evidently" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_evident_a_to_rel",
            PHON.ONSET voc ] ].

evidently_adv2 := adv_s_prop_pre_le &
 [ STEM < "evidently" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_evident_a_to_rel",
            PHON.ONSET voc ] ].

evil_n1 := n_intr_le &
 [ STEM < "evil" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_evil_n_1_rel",
            PHON.ONSET voc ] ].

evince_v1 := v_np_trans_le &
 [ STEM < "evince" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_evince_v_1_rel",
            PHON.ONSET voc ] ].

eviscerate_v1 := v_np_trans_le &
 [ STEM < "eviscerate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_eviscerate_v_1_rel",
            PHON.ONSET voc ] ].

evoke_v1 := v_np_trans_le &
 [ STEM < "evoke" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_evoke_v_1_rel",
            PHON.ONSET voc ] ].

evolution_n1 := n_mass_le &
 [ STEM < "evolution" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_evolution_n_1_rel",
            PHON.ONSET voc ] ].

evolve_v1 := v_np*_trans_le &
 [ STEM < "evolve" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_evolve_v_1_rel",
            PHON.ONSET voc ] ].

ex-girlfriend_n1 := n_intr_le &
 [ STEM < "ex", "girlfriend" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ex+girlfriend_n_1_rel",
            PHON.ONSET voc ] ].

ex_husband_n1 := n_intr_le &
 [ STEM < "ex-", "husband" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ex+husband_n_1_rel",
            PHON.ONSET voc ] ].

ex_husband_n2 := n_intr_le &
 [ STEM < "ex", "husband" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ex+husband_n_1_rel",
            PHON.ONSET voc ] ].

ex_n1 := n_intr_le &
 [ STEM < "ex" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ex_n_1_rel",
            PHON.ONSET voc ] ].

ex_spouse_n1 := n_intr_le &
 [ STEM < "ex-", "spouse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ex+spouse_n_1_rel",
            PHON.ONSET voc ] ].

ex_spouse_n2 := n_intr_le &
 [ STEM < "ex", "spouse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ex+spouse_n_1_rel",
            PHON.ONSET voc ] ].

ex_wife_n1 := n_intr_le &
 [ STEM < "ex-", "wife" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ex+wife_n_1_rel",
            PHON.ONSET voc ] ].

ex_wife_n2 := n_intr_le &
 [ STEM < "ex", "wife" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ex+wife_n_1_rel",
            PHON.ONSET voc ] ].

exacerbate_v1 := v_np_trans_le &
 [ STEM < "exacerbate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_exacerbate_v_1_rel",
            PHON.ONSET voc ] ].

exact_a1 := adj_intrans_le &
 [ STEM < "exact" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_exact_a_1_rel",
            PHON.ONSET voc ] ].

exactly := adv_int_vp_aux_le &
 [ STEM < "exactly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_exact_a_1_rel",
            PHON.ONSET voc ] ].

exactly_deg := adv_degree_spec_jov_le &
 [ STEM < "exactly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_exactly_x_deg_rel",
            PHON.ONSET voc ] ].

exactly_pre_root := adv_s_pre_word_root_le &
 [ STEM < "exactly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_exactly_a_1_rel",
            PHON.ONSET voc ] ].

exactly_wh_adv := wh_the_hell_le &
 [ STEM < "exactly" >,
   SYNSEM [ LKEYS.KEYREL.PRED _exactly_x_rel,
            PHON.ONSET voc ] ].

exaggerate_v1 := v_np*_trans_le &
 [ STEM < "exaggerate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_exaggerate_v_1_rel",
            PHON.ONSET voc ] ].

exalt_v1 := v_np_trans_le &
 [ STEM < "exalt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_exalt_v_1_rel",
            PHON.ONSET voc ] ].

exam_n1 := n_intr_le &
 [ STEM < "exam" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_exam_n_1_rel",
            PHON.ONSET voc ] ].

examination_n1 := n_mass_count_ppof_le &
 [ STEM < "examination" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_examination_n_of_rel",
            PHON.ONSET voc ] ].

examine_v1 := v_np_trans_le &
 [ STEM < "examine" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_examine_v_1_rel",
            PHON.ONSET voc ] ].

examine_v2 := v_cp_ques_fin_inf_non_trans_le &
 [ STEM < "examine" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_examine_v_1_rel",
            PHON.ONSET voc ] ].

example_n1 := n_ppof_le &
 [ STEM < "example" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_example_n_of_rel",
            PHON.ONSET voc ] ].

exasperate_v1 := v_np_trans_le &
 [ STEM < "exasperate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_exasperate_v_1_rel",
            PHON.ONSET voc ] ].

excavate_v1 := v_np*_trans_le &
 [ STEM < "excavate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_excavate_v_1_rel",
            PHON.ONSET voc ] ].

exceed_v1 := v_np_trans_le &
 [ STEM < "exceed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_exceed_v_1_rel",
            PHON.ONSET voc ] ].

exceedingly := adv_int_vp_post_le &
 [ STEM < "exceedingly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_exceeding_a_1_rel",
            PHON.ONSET voc ] ].

excel_v1 := v_unerg_le &
 [ STEM < "excel" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_excel_v_1_rel",
            PHON.ONSET voc ] ].

excellence_n1 := n_mass_count_le &
 [ STEM < "excellence" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_excellence_n_1_rel",
            PHON.ONSET voc ] ].

excellent_a1 := adj_intrans_le &
 [ STEM < "excellent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_excellent_a_1_rel",
            PHON.ONSET voc ] ].

excellently_isect := adv_int_vp_le &
 [ STEM < "excellently" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_excellent_a_1_rel",
            PHON.ONSET voc ] ].

except := p_le &
 [ STEM < "except" >,
   SYNSEM [ LKEYS.KEYREL.PRED _except_p_rel,
            PHON.ONSET voc ] ].

except_conj := conj_complex_except_le &
 [ STEM < "except" >,
   SYNSEM.PHON.ONSET voc ].

except_cp_p := p_subconj_le &
 [ STEM < "except" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_except_x_h_rel",
            PHON.ONSET voc ] ].

except_etc_conj := except_etc_conj_le &
 [ STEM < "except" >,
   SYNSEM [ LKEYS.KEYREL.PRED _except_c_rel,
            PHON.ONSET voc ] ].

except_etc_conj_2 := except_etc_colon_le &
 [ STEM < "except:" >,
   SYNSEM [ LKEYS.KEYREL.PRED _except_c_rel,
            PHON.ONSET voc ] ].

except_for := p_le &
 [ STEM < "except", "for" >,
   SYNSEM [ LKEYS.KEYREL.PRED _except+for_p_rel,
            PHON.ONSET voc ] ].

except_ppcomp := p_ppcomp_copred_le &
 [ STEM < "except" >,
   SYNSEM [ LKEYS.KEYREL.PRED _except_p_rel,
            PHON.ONSET voc ] ].

except_that_1 := conj_complex_except_that_le &
 [ STEM < "except", "that" >,
   SYNSEM.PHON.ONSET voc ].

except_that_2 := conj_complex_except_that_le &
 [ STEM < "except" >,
   SYNSEM.PHON.ONSET voc ].

excepting_prep := p_le &
 [ STEM < "excepting" >,
   SYNSEM [ LKEYS.KEYREL.PRED _excepting_p_rel,
            PHON.ONSET voc ] ].

exception_n1 := n_ppcomp_le &
 [ STEM < "exception" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_exception_n_to_rel" ],
            PHON.ONSET voc ] ].

exceptional_isect := adj_intrans_le &
 [ STEM < "exceptional" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_exceptional_a_1_rel",
            PHON.ONSET voc ] ].

exceptionally := adv_int_vp_le &
 [ STEM < "exceptionally" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_exceptional_a_1_rel",
            PHON.ONSET voc ] ].

exceptive_a1 := adj_intrans_le &
 [ STEM < "exceptive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_exceptive_a_1_rel",
            PHON.ONSET voc ] ].

excerpt_n := n_intr_le &
 [ STEM < "excerpt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_excerpt_n_1_rel",
            PHON.ONSET voc ] ].

excess_n1 := n_mass_count_le &
 [ STEM < "excess" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_excess_n_1_rel",
            PHON.ONSET voc ] ].

excessive_a1 := adj_intrans_le &
 [ STEM < "excessive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_excessive_a_1_rel",
            PHON.ONSET voc ] ].

excessively_adv1 := adv_int_vp_le &
 [ STEM < "excessively" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_excessive_a_1_rel",
            PHON.ONSET voc ] ].

exchange_n1 := n_mass_count_le &
 [ STEM < "exchange" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_exchange_n_1_rel",
            PHON.ONSET voc ] ].

exchange_v1 := v_empty_prep*_trans_le &
 [ STEM < "exchange" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_exchange_v_for_rel" ],
            PHON.ONSET voc ] ].

excite_v1 := v_np_trans_le &
 [ STEM < "excite" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_excite_v_1_rel",
            PHON.ONSET voc ] ].

excite_v2 := v_expl_it_subj_np_cp_le &
 [ STEM < "excite" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_excite_v_1_rel",
            PHON.ONSET voc ] ].

excited_a1 := adj_intrans_le &
 [ STEM < "excited" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_excited_a_1_rel",
            PHON.ONSET voc ] ].

excitement_n1 := n_intr_le &
 [ STEM < "excitement" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_excitement_n_1_rel",
            PHON.ONSET voc ] ].

exciting_isect := adj_intrans_le &
 [ STEM < "exciting" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_exciting_a_1_rel",
            PHON.ONSET voc ] ].

exclaim_v1 := v_cp_non_trans_le &
 [ STEM < "exclaim" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_exclaim_v_1_rel",
            PHON.ONSET voc ] ].

exclamation_n1 := n_mass_count_le &
 [ STEM < "exclamation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_exclamation_n_1_rel",
            PHON.ONSET voc ] ].

exclude_v1 := v_np_trans_le &
 [ STEM < "exclude" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_exclude_v_1_rel",
            PHON.ONSET voc ] ].

exclusive_a1 := adj_intrans_le &
 [ STEM < "exclusive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_exclusive_a_1_rel",
            PHON.ONSET voc ] ].

exclusively_adv1 := adv_int_vp_le &
 [ STEM < "exclusively" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_exclusive_a_1_rel",
            PHON.ONSET voc ] ].

excrete_v1 := v_np_trans_le &
 [ STEM < "excrete" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_excrete_v_1_rel",
            PHON.ONSET voc ] ].

excursion_n1 := n_intr_le &
 [ STEM < "excursion" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_excursion_n_1_rel",
            PHON.ONSET voc ] ].

excuse_n1 := n_intr_le &
 [ STEM < "excuse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_excuse_n_1_rel",
            PHON.ONSET voc ] ].

excuse_v1 := v_empty_prep*_trans_le &
 [ STEM < "excuse" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _from_p_sel_rel,
                    KEYREL.PRED "_excuse_v_from_rel" ],
            PHON.ONSET voc ] ].

excuse_v2 := v_obj_equi_le &
 [ STEM < "excuse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_excuse_v_1_rel",
            PHON.ONSET voc ] ].

excuse_v3 := v_obj_equi_from_le &
 [ STEM < "excuse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_excuse_v_from_rel",
            PHON.ONSET voc ] ].

execute_v1 := v_np_trans_le &
 [ STEM < "execute" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_execute_v_1_rel",
            PHON.ONSET voc ] ].

execution_n1 := n_mass_count_le &
 [ STEM < "execution" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_execution_n_1_rel",
            PHON.ONSET voc ] ].

executive_n1 := n_intr_le &
 [ STEM < "executive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_executive_n_1_rel",
            PHON.ONSET voc ] ].

exemplary_a1 := adj_intrans_le &
 [ STEM < "exemplary" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_exemplary_a_1_rel",
            PHON.ONSET voc ] ].

exemplify_v1 := v_np_trans_le &
 [ STEM < "exemplify" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_exemplify_v_1_rel",
            PHON.ONSET voc ] ].

exempt_a1 := adj_trans_le &
 [ STEM < "exempt" >,
   SYNSEM [ LKEYS [ --COMPKEY _from_p_sel_rel,
                    KEYREL.PRED "_exempt_a_from_rel" ],
            PHON.ONSET voc ] ].

exempt_v1 := v_empty_prep*_trans_le &
 [ STEM < "exempt" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _from_p_sel_rel,
                    KEYREL.PRED "_exempt_v_from_rel" ],
            PHON.ONSET voc ] ].

exempt_v2 := v_obj_equi_from_le &
 [ STEM < "exempt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_exempt_v_from_rel",
            PHON.ONSET voc ] ].

exercise_n1 := n_mass_count_nosort_le &
 [ STEM < "exercise" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_exercise_n_1_rel",
            PHON.ONSET voc ] ].

exercise_v1 := v_np*_trans_le &
 [ STEM < "exercise" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_exercise_v_1_rel",
            PHON.ONSET voc ] ].

exert_v1 := v_np_trans_le &
 [ STEM < "exert" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_exert_v_1_rel",
            PHON.ONSET voc ] ].

exertion_n1 := n_mass_count_le &
 [ STEM < "exertion" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_exertion_n_1_rel",
            PHON.ONSET voc ] ].

exhaust_n1 := n_mass_le &
 [ STEM < "exhaust" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_exhaust_n_1_rel",
            PHON.ONSET voc ] ].

exhaust_v1 := v_np_trans_le &
 [ STEM < "exhaust" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_exhaust_v_1_rel",
            PHON.ONSET voc ] ].

exhausted_a1 := adj_intrans_le &
 [ STEM < "exhausted" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_exhausted_a_1_rel",
            PHON.ONSET con ] ].

exhaustingly := adv_int_vp_post_le &
 [ STEM < "exhaustingly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_exhausting_a_1_rel",
            PHON.ONSET voc ] ].

exhaustion_n1 := n_mass_le &
 [ STEM < "exhaustion" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_exhaustion_n_1_rel",
            PHON.ONSET voc ] ].

exhibit_n1 := n_intr_le &
 [ STEM < "exhibit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_exhibit_n_1_rel",
            PHON.ONSET voc ] ].

exhibit_v1 := v_np_trans_le &
 [ STEM < "exhibit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_exhibit_v_1_rel",
            PHON.ONSET voc ] ].

exhibit_v2 := v_cp_non_trans_le &
 [ STEM < "exhibit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_exhibit_v_1_rel",
            PHON.ONSET voc ] ].

exhibition_n1 := n_ppof_le &
 [ STEM < "exhibition" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_exhibition_n_of_rel",
            PHON.ONSET voc ] ].

exhilarate_v1 := v_np_trans_le &
 [ STEM < "exhilarate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_exhilarate_v_1_rel",
            PHON.ONSET voc ] ].

exigence_n1 := n_mass_count_le &
 [ STEM < "exigence" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_exigence_n_1_rel",
            PHON.ONSET voc ] ].

exile_n1 := n_mass_count_le &
 [ STEM < "exile" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_exile_n_1_rel",
            PHON.ONSET voc ] ].

exile_v1 := v_to*_trans_le &
 [ STEM < "exile" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_exile_v_to_rel",
            PHON.ONSET voc ] ].

exist_v1 := v_unacc_le &
 [ STEM < "exist" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_exist_v_1_rel",
            PHON.ONSET voc ] ].

exist_v2 := v_there_le &
 [ STEM < "exist" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_exist_v_expl_rel",
            PHON.ONSET voc ] ].

existence_n1 := n_mass_le &
 [ STEM < "existence" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_existence_n_1_rel",
            PHON.ONSET voc ] ].

existent_a1 := adj_intrans_le &
 [ STEM < "existent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_existent_a_1_rel",
            PHON.ONSET voc ] ].

exit_n1 := n_intr_le &
 [ STEM < "exit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_exit_n_1_rel",
            PHON.ONSET voc ] ].

expand_on_v1 := v_empty_prep_intrans_le &
 [ STEM < "expand" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_expand_v_on_rel" ],
            PHON.ONSET voc ] ].

expand_v1 := v_np_trans_le &
 [ STEM < "expand" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_expand_v_cause_rel",
            PHON.ONSET voc ] ].

expand_v2 := v_unacc_dir_le &
 [ STEM < "expand" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_expand_v_1_rel",
            PHON.ONSET voc ] ].

expanse_n1 := n_intr_le &
 [ STEM < "expanse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_expanse_n_1_rel",
            PHON.ONSET voc ] ].

expansion_n1 := n_mass_count_le &
 [ STEM < "expansion" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_expansion_n_1_rel",
            PHON.ONSET voc ] ].

expansive_a1 := adj_intrans_le &
 [ STEM < "expansive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_expansive_a_1_rel",
            PHON.ONSET voc ] ].

expect_of_v1 := v_empty_prep_trans_le &
 [ STEM < "expect" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_expect_v_of_rel" ],
            PHON.ONSET voc ] ].

expect_v1 := v_np*_trans_le &
 [ STEM < "expect" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_expect_v_1_rel",
            PHON.ONSET voc ] ].

expect_v2 := v_subj_equi_le &
 [ STEM < "expect" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_expect_v_1_rel",
            PHON.ONSET voc ] ].

expect_v3 := v_sor_le &
 [ STEM < "expect" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_expect_v_1_rel",
            PHON.ONSET voc ] ].

expect_v4 := v_cp_prop_non_trans_le &
 [ STEM < "expect" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_expect_v_1_rel",
            PHON.ONSET voc ] ].

expectancy_n1 := n_mass_count_le &
 [ STEM < "expectancy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_expectancy_n_1_rel",
            PHON.ONSET voc ] ].

expectant_a1 := adj_intrans_le &
 [ STEM < "expectant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_expectant_a_1_rel",
            PHON.ONSET voc ] ].

expedition_n1 := n_intr_le &
 [ STEM < "expedition" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_expedition_n_1_rel",
            PHON.ONSET voc ] ].

expel_v1 := v_np_trans_le &
 [ STEM < "expel" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_expel_v_1_rel",
            PHON.ONSET voc ] ].

expend_v1 := v_np_trans_le &
 [ STEM < "expend" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_expend_v_1_rel",
            PHON.ONSET voc ] ].

expenditure_n1 := n_mass_count_ppof_le &
 [ STEM < "expenditure" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_expenditure_n_of_rel",
            PHON.ONSET voc ] ].

expense_i_n1 := n_bare_mod_le &
 [ STEM < "expense" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_expense_n_1_rel",
            PHON.ONSET voc ] ].

expense_n1 := n_intr_le &
 [ STEM < "expense" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_expense_n_1_rel",
            PHON.ONSET voc ] ].

expense_v1 := v_np_trans_le &
 [ STEM < "expense" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_expense_v_1_rel",
            PHON.ONSET voc ] ].

expensive_a1 := adj_intrans_le &
 [ STEM < "expensive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_expensive_a_1_rel",
            PHON.ONSET voc ] ].

expensively_isect := adv_int_vp_le &
 [ STEM < "expensively" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_expensive_a_1_rel",
            PHON.ONSET voc ] ].

experience_n1 := n_mass_count_ppcomp_oblig_le &
 [ STEM < "experience" >,
   SYNSEM [ LKEYS [ --COMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_experience_n_with_rel" ],
            PHON.ONSET voc ] ].

experience_n2 := n_mass_count_nosort_le &
 [ STEM < "experience" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_experience_n_with_rel",
            PHON.ONSET voc ] ].

experience_v1 := v_np_trans_le &
 [ STEM < "experience" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_experience_v_1_rel",
            PHON.ONSET voc ] ].

experienced_a1 := adj_trans_le &
 [ STEM < "experienced" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_experienced_a_in_rel" ],
            PHON.ONSET voc ] ].

experiment_n1 := n_intr_le &
 [ STEM < "experiment" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_experiment_n_1_rel",
            PHON.ONSET voc ] ].

experiment_on_v1 := v_empty_prep_intrans_le &
 [ STEM < "experiment" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_experiment_v_on_rel" ],
            PHON.ONSET voc ] ].

experiment_v1 := v_unerg_le &
 [ STEM < "experiment" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_experiment_v_1_rel",
            PHON.ONSET voc ] ].

experiment_with_v1 := v_empty_prep_intrans_le &
 [ STEM < "experiment" >,
   SYNSEM [ LKEYS [ --COMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_experiment_v_with_rel" ],
            PHON.ONSET voc ] ].

experimental_a1 := adj_intrans_le &
 [ STEM < "experimental" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_experimental_a_1_rel",
            PHON.ONSET voc ] ].

expert_n1 := n_intr_le &
 [ STEM < "expert" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_expert_n_1_rel",
            PHON.ONSET voc ] ].

expertise_n1 := n_mass_le &
 [ STEM < "expertise" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_expertise_n_1_rel",
            PHON.ONSET voc ] ].

expertness_n1 := n_mass_le &
 [ STEM < "expertness" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_expertness_n_1_rel",
            PHON.ONSET voc ] ].

explain_v1 := v_pp_cp_fin_le &
 [ STEM < "explain" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_explain_v_1_rel" ],
            PHON.ONSET voc ] ].

explain_v2 := v_to*_trans*_le &
 [ STEM < "explain" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_explain_v_to_rel",
            PHON.ONSET voc ] ].

explanation_n1 := n_mass_count_ppof_le &
 [ STEM < "explanation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_explanation_n_of_rel",
            PHON.ONSET voc ] ].

explanatory_a1 := adj_intrans_le &
 [ STEM < "explanatory" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_explanatory_a_1_rel",
            PHON.ONSET voc ] ].

expletive_n1 := n_intr_le &
 [ STEM < "expletive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_expletive_n_1_rel",
            PHON.ONSET voc ] ].

explicit_isect := adj_intrans_le &
 [ STEM < "explicit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_explicit_a_1_rel",
            PHON.ONSET voc ] ].

explicitly_adv1 := adv_int_vp_le &
 [ STEM < "explicitly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_explicit_a_1_rel",
            PHON.ONSET voc ] ].

explode_v1 := v_np_trans_le &
 [ STEM < "explode" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_explode_v_cause_rel",
            PHON.ONSET voc ] ].

explode_v2 := v_unacc_dir_le &
 [ STEM < "explode" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_explode_v_1_rel",
            PHON.ONSET voc ] ].

exploit_n1 := n_intr_le &
 [ STEM < "exploit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_exploit_n_1_rel",
            PHON.ONSET voc ] ].

exploit_v1 := v_np_trans_le &
 [ STEM < "exploit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_exploit_v_1_rel",
            PHON.ONSET voc ] ].

exploration_n1 := n_mass_count_ppof_le &
 [ STEM < "exploration" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_exploration_n_of_rel",
            PHON.ONSET voc ] ].

explore_v1 := v_np_trans_le &
 [ STEM < "explore" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_explore_v_1_rel",
            PHON.ONSET voc ] ].

explore_v2 := v_cp_ques_fin_inf_non_trans_le &
 [ STEM < "explore" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_explore_v_1_rel",
            PHON.ONSET voc ] ].

explorer_n1 := n_ppof_le &
 [ STEM < "explorer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_explorer_n_of_rel",
            PHON.ONSET voc ] ].

expo_n1 := n_intr_le &
 [ STEM < "expo" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_expo_n_1_rel",
            PHON.ONSET voc ] ].

exponent_n1 := n_intr_le &
 [ STEM < "exponent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_exponent_n_1_rel",
            PHON.ONSET voc ] ].

export_n1 := n_mass_count_ppof_le &
 [ STEM < "export" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_export_n_of_rel",
            PHON.ONSET voc ] ].

export_v1 := v_np*_trans_le &
 [ STEM < "export" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_export_v_1_rel",
            PHON.ONSET voc ] ].

expose_v1 := v_to_trans_le &
 [ STEM < "expose" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_expose_v_to_rel",
            PHON.ONSET voc ] ].

expose_v2 := v_np_trans_le &
 [ STEM < "expose" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_expose_v_1_rel",
            PHON.ONSET voc ] ].

expose_v3 := v_np_as_le &
 [ STEM < "expose" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_expose_v_as_rel",
            PHON.ONSET voc ] ].

exposed_a1 := adj_intrans_le &
 [ STEM < "exposed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_exposed_a_1_rel",
            PHON.ONSET con ] ].

exposition_n1 := n_ppof_le &
 [ STEM < "exposition" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_exposition_n_of_rel",
            PHON.ONSET voc ] ].

exposure_n1 := n_mass_count_ppof_le &
 [ STEM < "exposure" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_exposure_n_of-to_rel",
            PHON.ONSET voc ] ].

exposure_n2 := n_mass_ppcomp_oblig_le &
 [ STEM < "exposure" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_exposure_n_of-to_rel" ],
            PHON.ONSET voc ] ].

expresident_n1 := n_intr_le &
 [ STEM < "ex-", "president" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ex+president_n_1_rel",
            PHON.ONSET voc ] ].

expresident_n2 := n_intr_le &
 [ STEM < "expresident" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ex+president_n_1_rel",
            PHON.ONSET voc ] ].

express_a1 := adj_intrans_le &
 [ STEM < "express" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_express_a_1_rel",
            PHON.ONSET voc ] ].

express_n1 := n_mass_count_le &
 [ STEM < "express" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_express_n_1_rel",
            PHON.ONSET voc ] ].

express_v1 := v_to*_trans_le &
 [ STEM < "express" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_express_v_to_rel",
            PHON.ONSET voc ] ].

expressible_a1 := adj_trans_le &
 [ STEM < "expressible" >,
   SYNSEM [ LKEYS [ --COMPKEY _by_p_sel_rel,
                    KEYREL.PRED "_expressible_a_by_rel" ],
            PHON.ONSET voc ] ].

expression_n1 := n_mass_count_le &
 [ STEM < "expression" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_expression_n_1_rel",
            PHON.ONSET voc ] ].

expressive_a1 := adj_intrans_le &
 [ STEM < "expressive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_expressive_a_1_rel",
            PHON.ONSET voc ] ].

expressly_a1 := adv_int_vp_le &
 [ STEM < "expressly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_express_a_1_rel",
            PHON.ONSET voc ] ].

expressway_n1 := n_intr_le &
 [ STEM < "expressway" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_expressway_n_1_rel",
            PHON.ONSET voc ] ].

exquisite_a1 := adj_intrans_le &
 [ STEM < "exquisite" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_exquisite_a_1_rel",
            PHON.ONSET voc ] ].

exquisiteness_n1 := n_mass_le &
 [ STEM < "exquisiteness" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_exquisiteness_n_1_rel",
            PHON.ONSET voc ] ].

extant_a1 := adj_intrans_le &
 [ STEM < "extant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_extant_a_1_rel",
            PHON.ONSET voc ] ].

extend_v1 := v_np_trans_noger_le &
 [ STEM < "extend" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_extend_v_1_rel",
            PHON.ONSET voc ] ].

extend_v2 := v_prep_dir_le &
 [ STEM < "extend" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_extend_v_1_rel",
            PHON.ONSET con ] ].

extended_a1 := adj_intrans_le &
 [ STEM < "extended" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_extended_a_1_rel",
            PHON.ONSET voc ] ].

extensile_a1 := adj_intrans_le &
 [ STEM < "extensile" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_extensile_a_1_rel",
            PHON.ONSET voc ] ].

extension_n1 := n_ppof_le &
 [ STEM < "extension" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_extension_n_of_rel",
            PHON.ONSET voc ] ].

extension_title := n_title_le &
 [ STEM < "extension" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_extension_n_of_rel",
            PHON.ONSET voc ] ].

extensive_a1 := adj_intrans_le &
 [ STEM < "extensive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_extensive_a_1_rel",
            PHON.ONSET voc ] ].

extensively := adv_int_vp_le &
 [ STEM < "extensively" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_extensive_a_1_rel",
            PHON.ONSET voc ] ].

extent_n1 := n_ppof_le &
 [ STEM < "extent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_extent_n_of_rel",
            PHON.ONSET voc ] ].

exterior_a1 := adj_trans_le &
 [ STEM < "exterior" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_exterior_a_to_rel" ],
            PHON.ONSET voc ] ].

exterior_n1 := n_intr_le &
 [ STEM < "exterior" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_exterior_n_1_rel",
            PHON.ONSET voc ] ].

extermination_n1 := n_mass_count_ppof_le &
 [ STEM < "extermination" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_extermination_n_of_rel",
            PHON.ONSET voc ] ].

external_a1 := adj_intrans_le &
 [ STEM < "external" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_external_a_1_rel",
            PHON.ONSET voc ] ].

externally := adv_int_vp_le &
 [ STEM < "externally" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_external_a_1_rel",
            PHON.ONSET voc ] ].

extinct_a1 := adj_intrans_le &
 [ STEM < "extinct" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_extinct_a_1_rel",
            PHON.ONSET voc ] ].

extinction_n1 := n_mass_count_le &
 [ STEM < "extinction" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_extinction_n_1_rel",
            PHON.ONSET voc ] ].

extol_v1 := v_np_trans_le &
 [ STEM < "extol" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_extol_v_1_rel",
            PHON.ONSET voc ] ].

extort_v1 := v_np_trans_le &
 [ STEM < "extort" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_extort_v_1_rel",
            PHON.ONSET voc ] ].

extra_a1 := adj_intrans_le &
 [ STEM < "extra" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_extra_a_1_rel",
            PHON.ONSET voc ] ].

extra_deg := adv_degree_spec_le &
 [ STEM < "extra" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_extra_x_rel",
            PHON.ONSET voc ] ].

extra_n1 := n_intr_le &
 [ STEM < "extra" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_extra_n_1_rel",
            PHON.ONSET voc ] ].

extract_n1 := n_mass_count_le &
 [ STEM < "extract" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_extract_n_1_rel",
            PHON.ONSET voc ] ].

extract_v1 := v_empty_prep*_trans_le &
 [ STEM < "extract" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _from_p_sel_rel,
                    KEYREL.PRED "_extract_v_from_rel" ],
            PHON.ONSET voc ] ].

extraction_n1 := n_mass_count_le &
 [ STEM < "extraction" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_extraction_n_1_rel",
            PHON.ONSET voc ] ].

extraordinarily_adv1 := adv_int_vp_le &
 [ STEM < "extraordinarily" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_extraordinary_a_to_rel",
            PHON.ONSET voc ] ].

extraordinary_a1 := adj_trans_le &
 [ STEM < "extraordinary" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_extraordinary_a_to_rel" ],
            PHON.ONSET voc ] ].

extraordinary_a2 := adj_reg_atrans_cp_le &
 [ STEM < "extraordinary" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_extraordinary_a_to_rel",
            PHON.ONSET voc ] ].

extreme_a1 := adj_intrans_le &
 [ STEM < "extreme" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_extreme_a_1_rel",
            PHON.ONSET voc ] ].

extreme_n1 := n_intr_le &
 [ STEM < "extreme" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_extreme_n_1_rel",
            PHON.ONSET voc ] ].

extremely_deg := adv_degree_spec_v_le &
 [ STEM < "extremely" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_extremely_x_deg_rel",
            PHON.ONSET voc ] ].

extremity_n1 := n_mass_count_le &
 [ STEM < "extremity" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_extremity_n_1_rel",
            PHON.ONSET voc ] ].

extrude_v1 := v_unacc_le &
 [ STEM < "extrude" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_extrude_v_1_rel",
            PHON.ONSET voc ] ].

extrude_v2 := v_np_trans_noger_le &
 [ STEM < "extrude" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_extrude_v_cause_rel",
            PHON.ONSET voc ] ].

exuberant_a1 := adj_intrans_le &
 [ STEM < "exuberant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_exuberant_a_1_rel",
            PHON.ONSET voc ] ].

exxon_n1 := n_proper_le &
 [ STEM < "exxon" >,
   SYNSEM [ LKEYS.KEYREL.CARG "exxon",
            PHON.ONSET voc ] ].

eye_n1 := n_intr_le &
 [ STEM < "eye" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_eye_n_1_rel",
            PHON.ONSET voc ] ].

eye_v1 := v_np_trans_le &
 [ STEM < "eye" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_eye_v_1_rel",
            PHON.ONSET voc ] ].

f_np1 := n_proper_le &
 [ STEM < "_f" >,
   SYNSEM [ LKEYS.KEYREL.CARG "f",
            PHON.ONSET voc ] ].

f_period_np1 := n_proper_le &
 [ STEM < "f." >,
   SYNSEM [ LKEYS.KEYREL.CARG "f",
            PHON.ONSET voc ] ].

f_period_np2 := n_proper_le &
 [ STEM < "_f." >,
   SYNSEM [ LKEYS.KEYREL.CARG "f",
            PHON.ONSET voc ] ].

fabric_n1 := n_mass_count_le &
 [ STEM < "fabric" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fabric_n_1_rel",
            PHON.ONSET con ] ].

fabricate_v1 := v_np_trans_le &
 [ STEM < "fabricate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fabricate_v_1_rel",
            PHON.ONSET con ] ].

fabulous_a1 := adj_intrans_le &
 [ STEM < "fabulous" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fabulous_a_1_rel",
            PHON.ONSET con ] ].

fabulously := adv_int_vp_le &
 [ STEM < "fabulously" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fabulous_a_1_rel",
            PHON.ONSET con ] ].

facade_n1 := n_intr_le &
 [ STEM < "facade" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_facade_n_1_rel",
            PHON.ONSET con ] ].

face_n1 := n_intr_le &
 [ STEM < "face" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_face_n_1_rel",
            PHON.ONSET con ] ].

face_to_face_a1 := p_ppcomp_copred_le &
 [ STEM < "face", "to", "face" >,
   SYNSEM [ LKEYS [ --COMPKEY _with_p_rel,
                    KEYREL.PRED _face+to+face_a_1_rel ],
            PHON.ONSET con ] ].

face_to_face_a2 := adj_attr_intrans_le &
 [ STEM < "face-", "to-", "face" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_face+to+face_a_1_rel",
            PHON.ONSET con ] ].

face_up_v1 := v_particle_pp_le &
 [ STEM < "face" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    --OCOMPKEY _to_p_rel,
                    KEYREL.PRED "_face_v_up_rel" ],
            PHON.ONSET con ] ].

face_v1 := v_np_trans_le &
 [ STEM < "face" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_face_v_1_rel",
            PHON.ONSET con ] ].

facilitate_v1 := v_np_trans_le &
 [ STEM < "facilitate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_facilitate_v_1_rel",
            PHON.ONSET con ] ].

facility_n1 := n_intr_le &
 [ STEM < "facility" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_facility_n_1_rel",
            PHON.ONSET con ] ].

facility_post_ttl := n_post_title_le &
 [ STEM < "facility" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_facility_n_1_rel",
            PHON.ONSET con ] ].

facing_prep := p_reg_le &
 [ STEM < "facing" >,
   SYNSEM [ LKEYS.KEYREL.PRED _facing_p_rel,
            PHON.ONSET con ] ].

fact_n1 := n_mass_count_le &
 [ STEM < "fact" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fact_n_1_rel",
            PHON.ONSET con ] ].

fact_n2 := n_cpcomp_fin_le &
 [ STEM < "fact" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fact_n_1_rel",
            PHON.ONSET con ] ].

faction_n1 := n_intr_le &
 [ STEM < "faction" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_faction_n_1_rel",
            PHON.ONSET con ] ].

factor_in_v1 := v_particle_np_le &
 [ STEM < "factor" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_factor_v_in_rel" ],
            PHON.ONSET con ] ].

factor_n1 := n_intr_le &
 [ STEM < "factor" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_factor_n_1_rel",
            PHON.ONSET con ] ].

factory_n1 := n_intr_le &
 [ STEM < "factory" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_factory_n_1_rel",
            PHON.ONSET con ] ].

faculty_n1 := n_intr_le &
 [ STEM < "faculty" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_faculty_n_1_rel",
            PHON.ONSET con ] ].

fade_v1 := v_unerg_le &
 [ STEM < "fade" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fade_v_1_rel",
            PHON.ONSET con ] ].

faecherbad_nd := n_proper_city_le &
 [ STEM < "faecherbad" >,
   SYNSEM [ LKEYS.KEYREL.CARG "faecherbad",
            PHON.ONSET con ] ].

fahrenheit := n_proper_le &
 [ STEM < "fahrenheit" >,
   SYNSEM [ LKEYS.KEYREL.CARG "fahrenheit",
            PHON.ONSET con ] ].

fahua_n1 := n_proper_le &
 [ STEM < "fahua" >,
   SYNSEM [ LKEYS.KEYREL.CARG "fahua",
            PHON.ONSET con ] ].

fail_v1 := v_np*_trans_le &
 [ STEM < "fail" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fail_v_1_rel",
            PHON.ONSET con ] ].

fail_v2 := v_ssr_le &
 [ STEM < "fail" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fail_v_1_rel",
            PHON.ONSET con ] ].

failure_n1 := n_mass_count_le &
 [ STEM < "failure" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_failure_n_1_rel",
            PHON.ONSET con ] ].

faint_a1 := adj_intrans_le &
 [ STEM < "faint" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_faint_a_1_rel",
            PHON.ONSET con ] ].

faint_n1 := n_intr_le &
 [ STEM < "faint" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_faint_n_1_rel",
            PHON.ONSET con ] ].

faint_v1 := v_unerg_le &
 [ STEM < "faint" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_faint_v_1_rel",
            PHON.ONSET con ] ].

fainter := adj_comp_le &
 [ STEM < "fainter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_faint_a_1_rel",
            PHON.ONSET con ] ].

faintest_a1 := adj_superl_le &
 [ STEM < "faintest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_faint_a_1_rel",
            PHON.ONSET con ] ].

faintly_adv := adv_int_vp_le &
 [ STEM < "faintly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_faint_a_1_rel",
            PHON.ONSET con ] ].

fair_a1 := adj_intrans_le &
 [ STEM < "fair" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fair_a_1_rel",
            PHON.ONSET con ] ].

fair_n1 := n_intr_le &
 [ STEM < "fair" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fair_n_1_rel",
            PHON.ONSET con ] ].

fairer := adj_comp_le &
 [ STEM < "fairer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fair_a_1_rel",
            PHON.ONSET con ] ].

fairest_a1 := adj_superl_le &
 [ STEM < "fairest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fair_a_1_rel",
            PHON.ONSET con ] ].

fairground_n1 := n_intr_le &
 [ STEM < "fairground" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fairground_n_1_rel",
            PHON.ONSET con ] ].

fairly_adv := adv_int_vp_post_le &
 [ STEM < "fairly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fair_a_1_rel",
            PHON.ONSET con ] ].

fairly_deg := adv_degree_spec_v_le &
 [ STEM < "fairly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fairly_x_rel",
            PHON.ONSET con ] ].

fairy_n1 := n_intr_le &
 [ STEM < "fairy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fairy_n_1_rel",
            PHON.ONSET con ] ].

fairyland_n1 := n_intr_le &
 [ STEM < "fairyland" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fairyland_n_1_rel",
            PHON.ONSET con ] ].

fairyland_n2 := n_proper_le &
 [ STEM < "fairyland" >,
   SYNSEM [ LKEYS.KEYREL.CARG "fairyland",
            PHON.ONSET con ] ].

fairytale-like_a1 := adj_intrans_le &
 [ STEM < "fairytale-", "like" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fairytale+like_a_1_rel",
            PHON.ONSET con ] ].

fairytale_n1 := n_intr_le &
 [ STEM < "fairytale" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fairytale_n_1_rel",
            PHON.ONSET con ] ].

fairytale_n2 := n_intr_le &
 [ STEM < "fairy", "tale" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fairytale_n_1_rel",
            PHON.ONSET con ] ].

faith_n1 := n_mass_count_le &
 [ STEM < "faith" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_faith_n_1_rel",
            PHON.ONSET con ] ].

faithful_a1 := adj_trans_le &
 [ STEM < "faithful" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_faithful_a_to_rel" ],
            PHON.ONSET con ] ].

faithfully := adv_int_vp_le &
 [ STEM < "faithfully" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_faithful_a_to_rel",
            PHON.ONSET con ] ].

falcon_n1 := n_intr_le &
 [ STEM < "falcon" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_falcon_n_1_rel",
            PHON.ONSET con ] ].

falketind_n1 := n_proper_le &
 [ STEM < "falketind" >,
   SYNSEM [ LKEYS.KEYREL.CARG "falketind",
            PHON.ONSET con ] ].

falkland_n1 := n_proper_le &
 [ STEM < "falkland" >,
   SYNSEM [ LKEYS.KEYREL.CARG "falkland",
            PHON.ONSET con ] ].

fall_back_v1 := v_particle_pp_le &
 [ STEM < "fall" >,
   SYNSEM [ LKEYS [ --COMPKEY _back_p_sel_rel,
                    --OCOMPKEY _on_p_rel,
                    KEYREL.PRED "_fall_v_back_rel" ],
            PHON.ONSET con ] ].

fall_in_v1 := v_particle_pp_le &
 [ STEM < "fall" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    --OCOMPKEY _with_p_rel,
                    KEYREL.PRED "_fall_v_in_rel" ],
            PHON.ONSET con ] ].

fall_n1 := n_season_div_le &
 [ STEM < "fall" >,
   SYNSEM [ LKEYS.KEYREL.CARG "fall",
            PHON.ONSET con ] ].

fall_n2 := n_season_wspec_le &
 [ STEM < "fall" >,
   SYNSEM [ LKEYS.KEYREL.CARG "fall",
            PHON.ONSET con ] ].

fall_n3 := n_season_np_le &
 [ STEM < "fall" >,
   SYNSEM [ LKEYS.KEYREL.CARG "fall",
            PHON.ONSET con ] ].

fall_n4 := n_intr_le &
 [ STEM < "fall" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fall_n_1_rel",
            PHON.ONSET con ] ].

fall_prd_v1 := v_subj_equi_prd_adj_le &
 [ STEM < "fall" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fall_v_state_rel",
            PHON.ONSET con ] ].

fall_v1 := v_unacc_dir_le &
 [ STEM < "fall" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fall_v_1_rel",
            PHON.ONSET con ] ].

fallacious_a1 := adj_intrans_le &
 [ STEM < "fallacious" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fallacious_a_1_rel",
            PHON.ONSET con ] ].

fallacy_n1 := n_intr_le &
 [ STEM < "fallacy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fallacy_n_1_rel",
            PHON.ONSET con ] ].

false_a1 := adj_intrans_le &
 [ STEM < "false" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_false_a_1_rel",
            PHON.ONSET con ] ].

falsehood_n1 := n_mass_count_le &
 [ STEM < "falsehood" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_falsehood_n_1_rel",
            PHON.ONSET con ] ].

falter_v1 := v_unerg_le &
 [ STEM < "falter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_falter_v_1_rel",
            PHON.ONSET con ] ].

fame_n1 := n_mass_le &
 [ STEM < "fame" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fame_n_1_rel",
            PHON.ONSET con ] ].

familiar_a1 := adj_trans_le &
 [ STEM < "familiar" >,
   SYNSEM [ LKEYS [ --COMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_familiar_a_with_rel" ],
            PHON.ONSET con ] ].

familiarity_n1 := n_mass_count_le &
 [ STEM < "familiarity" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_familiarity_n_1_rel",
            PHON.ONSET con ] ].

family_n1 := n_ppof_le &
 [ STEM < "family" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_family_n_of_rel",
            PHON.ONSET con ] ].

famous_a1 := adj_trans_le &
 [ STEM < "famous" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_famous_a_for_rel" ],
            PHON.ONSET con ] ].

famously_adv1 := adv_int_vp_post_le &
 [ STEM < "famously" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_famous_a_for_rel",
            PHON.ONSET con ] ].

fan_n1 := n_intr_le &
 [ STEM < "fan" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fan_n_1_rel",
            PHON.ONSET con ] ].

fanarokkan := n_proper_le &
 [ STEM < "fanarokkan" >,
   SYNSEM [ LKEYS.KEYREL.CARG "fanarokkan",
            PHON.ONSET con ] ].

fancifully := adv_int_vp_le &
 [ STEM < "fancifully" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fanciful_a_1_rel",
            PHON.ONSET con ] ].

fancy_a1 := adj_intrans_le &
 [ STEM < "fancy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fancy_a_1_rel",
            PHON.ONSET con ] ].

fancy_n1 := n_intr_le &
 [ STEM < "fancy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fancy_n_1_rel",
            PHON.ONSET con ] ].

fancy_v1 := v_np_trans_le &
 [ STEM < "fancy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fancy_v_1_rel",
            PHON.ONSET con ] ].

fancy_v2 := v_subj_equi_prp_le &
 [ STEM < "fancy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fancy_v_1_rel",
            PHON.ONSET con ] ].

fancy_v3 := v_cp_prop_non_trans_le &
 [ STEM < "fancy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fancy_v_1_rel",
            PHON.ONSET con ] ].

fang_sheng_n1 := n_proper_le &
 [ STEM < "fang", "sheng" >,
   SYNSEM [ LKEYS.KEYREL.CARG "fang_sheng",
            PHON.ONSET con ] ].

fangbang_n1 := n_proper_le &
 [ STEM < "fangbang" >,
   SYNSEM [ LKEYS.KEYREL.CARG "fangbang",
            PHON.ONSET con ] ].

fannaarÃ¥khytta_n1 := n_proper_le &
 [ STEM < "fannaarÃ¥khytta" >,
   SYNSEM [ LKEYS.KEYREL.CARG "fannaarÃ¥khytta",
            PHON.ONSET con ] ].

fannaraken := n_proper_le &
 [ STEM < "fannaraken" >,
   SYNSEM [ LKEYS.KEYREL.CARG "fannaraken",
            PHON.ONSET con ] ].

fannarÃ¥hytta := n_proper_le &
 [ STEM < "fannarÃ¥hytta" >,
   SYNSEM [ LKEYS.KEYREL.CARG "fannarÃ¥hytta",
            PHON.ONSET con ] ].

fannarÃ¥k_n1 := n_proper_le &
 [ STEM < "fannarÃ¥k" >,
   SYNSEM [ LKEYS.KEYREL.CARG "fannarÃ¥k",
            PHON.ONSET con ] ].

fannarÃ¥kbreen_n1 := n_proper_le &
 [ STEM < "fannarÃ¥kbreen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "fannarÃ¥kbreen",
            PHON.ONSET con ] ].

fannarÃ¥ken_n1 := n_proper_le &
 [ STEM < "fannarÃ¥ken" >,
   SYNSEM [ LKEYS.KEYREL.CARG "fannarÃ¥ken",
            PHON.ONSET con ] ].

fannarÃ¥khytta_n1 := n_proper_le &
 [ STEM < "fannarÃ¥khytta" >,
   SYNSEM [ LKEYS.KEYREL.CARG "fannarÃ¥khytta",
            PHON.ONSET con ] ].

fannarÃ¥knosa_n1 := n_proper_le &
 [ STEM < "fannarÃ¥knosa" >,
   SYNSEM [ LKEYS.KEYREL.CARG "fannarÃ¥knosa",
            PHON.ONSET con ] ].

fannarÃ¥knosi_n1 := n_proper_le &
 [ STEM < "fannarÃ¥knosi" >,
   SYNSEM [ LKEYS.KEYREL.CARG "fannarÃ¥knosi",
            PHON.ONSET con ] ].

fannasrÃ¥ken_n1 := n_proper_le &
 [ STEM < "fannasrÃ¥ken" >,
   SYNSEM [ LKEYS.KEYREL.CARG "fannasrÃ¥ken",
            PHON.ONSET con ] ].

fantastic_a1 := adj_intrans_le &
 [ STEM < "fantastic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fantastic_a_1_rel",
            PHON.ONSET con ] ].

fantastically := adv_int_vp_post_le &
 [ STEM < "fantastically" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fantastic_a_1_rel",
            PHON.ONSET con ] ].

far := adv_int_vp_post_le &
 [ STEM < "far" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_far_a_1_rel",
            PHON.ONSET con ] ].

far_a1 := adj_intrans_le &
 [ STEM < "far" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_far_a_1_rel",
            PHON.ONSET con ] ].

far_away_a1 := adj_attr_intrans_le &
 [ STEM < "far", "away" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_far_away_a_1_rel",
            PHON.ONSET con ] ].

far_deg := adv_degree_spec_m_le &
 [ STEM < "far" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_far_x_deg_rel",
            PHON.ONSET con ] ].

far_from_deg := adv_degree_spec_v_le &
 [ STEM < "far", "from" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_far+from_x_deg_rel",
            PHON.ONSET con ] ].

far_from_mdeg := adv_degree_spec_m_le &
 [ STEM < "far", "from" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_far+from_x_mdeg_rel",
            PHON.ONSET con ] ].

far_off := adv_int_vp_post_le &
 [ STEM < "far", "off" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_far+off_a_1_rel",
            PHON.ONSET con ] ].

farce_n1 := n_mass_count_le &
 [ STEM < "farce" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_farce_n_1_rel",
            PHON.ONSET con ] ].

farce_v1 := v_np_trans_le &
 [ STEM < "farce" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_farce_v_1_rel",
            PHON.ONSET con ] ].

fare_n1 := n_intr_le &
 [ STEM < "fare" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fare_n_1_rel",
            PHON.ONSET con ] ].

fare_v1 := v_unerg_le &
 [ STEM < "fare" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fare_v_1_rel",
            PHON.ONSET con ] ].

farewell_n1 := n_mass_count_le &
 [ STEM < "farewell" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_farewell_n_1_rel",
            PHON.ONSET con ] ].

farm_n1 := n_intr_le &
 [ STEM < "farm" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_farm_n_1_rel",
            PHON.ONSET con ] ].

farm_post_ttl := n_post_title_le &
 [ STEM < "farm" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_farm_n_1_rel",
            PHON.ONSET con ] ].

farm_v1 := v_np*_trans_le &
 [ STEM < "farm" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_farm_v_1_rel",
            PHON.ONSET con ] ].

farmer_n1 := n_intr_le &
 [ STEM < "farmer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_farmer_n_1_rel",
            PHON.ONSET con ] ].

farmhouse_n1 := n_intr_le &
 [ STEM < "farmhouse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_farmhouse_n_1_rel",
            PHON.ONSET con ] ].

farmland_n1 := n_mass_count_le &
 [ STEM < "farmland" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_farmland_n_1_rel",
            PHON.ONSET con ] ].

farmstead_n1 := n_intr_le &
 [ STEM < "farmstead" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_farmstead_n_1_rel",
            PHON.ONSET con ] ].

farmyard_n1 := n_intr_le &
 [ STEM < "farmyard" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_farmyard_n_1_rel",
            PHON.ONSET con ] ].

farther_a1 := adj_comp_le &
 [ STEM < "farther" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_far_a_1_rel",
            PHON.ONSET con ] ].

farther_deg := adv_degree_spec_m_le &
 [ STEM < "farther" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_farther_x_deg_rel",
            PHON.ONSET con ] ].

farthest_a1 := adj_superl_le &
 [ STEM < "farthest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_far_a_1_rel",
            PHON.ONSET con ] ].

fasanengarten_n1 := n_intr_named_le &
 [ STEM < "fasanengarten" >,
   SYNSEM [ LKEYS.KEYREL.CARG "fasanengarten",
            PHON.ONSET con ] ].

fascinate_v1 := v_np_trans_le &
 [ STEM < "fascinate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fascinate_v_1_rel",
            PHON.ONSET con ] ].

fascinate_v2 := v_expl_it_subj_np_cp_le &
 [ STEM < "fascinate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fascinate_v_1_rel",
            PHON.ONSET con ] ].

fascinated_a1 := adj_intrans_le &
 [ STEM < "fascinated" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fascinated_a_1_rel",
            PHON.ONSET con ] ].

fascinating_a1 := adj_intrans_le &
 [ STEM < "fascinating" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fascinating_a_1_rel",
            PHON.ONSET con ] ].

fashion_n1 := n_mass_count_le &
 [ STEM < "fashion" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fashion_n_1_rel",
            PHON.ONSET con ] ].

fashion_v1 := v_empty_prep*_trans_le &
 [ STEM < "fashion" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _into_p_sel_rel,
                    KEYREL.PRED "_fashion_v_into_rel" ],
            PHON.ONSET con ] ].

fast := adv_int_vp_post_le &
 [ STEM < "fast" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fast_a_1_rel",
            PHON.ONSET con ] ].

fast_a1 := adj_intrans_le &
 [ STEM < "fast" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fast_a_1_rel",
            PHON.ONSET con ] ].

fasten_v1 := v_unacc_le &
 [ STEM < "fasten" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fasten_v_1_rel",
            PHON.ONSET con ] ].

fasten_v2 := v_to_trans_le &
 [ STEM < "fasten" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fasten_v_cause-to_rel",
            PHON.ONSET con ] ].

fasten_v3 := v_np_trans_noger_le &
 [ STEM < "fasten" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fasten_v_cause-to_rel",
            PHON.ONSET con ] ].

faster := adv_int_vp_post_le &
 [ STEM < "faster" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_faster_a_1_rel",
            PHON.ONSET con ] ].

faster_a1 := adj_comp_le &
 [ STEM < "faster" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fast_a_1_rel",
            PHON.ONSET con ] ].

fastest_a1 := adj_superl_le &
 [ STEM < "fastest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fast_a_1_rel",
            PHON.ONSET con ] ].

fat_a1 := adj_intrans_le &
 [ STEM < "fat" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fat_a_1_rel",
            PHON.ONSET con ] ].

father_in_law_n1 := n_intr_le &
 [ STEM < "father-", "in-", "law" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_father+in+law_n_1_rel",
            PHON.ONSET con ] ].

father_n1 := n_ppof_le &
 [ STEM < "father" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_father_n_of_rel",
            PHON.ONSET con ] ].

father_ttl := n_title_le &
 [ STEM < "father" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_father_n_of_rel",
            PHON.ONSET con ] ].

fathers_day := n_holiday_le &
 [ STEM < "father", "s", "day" >,
   SYNSEM [ LKEYS.KEYREL.CARG "fathers_day",
            PHON.ONSET con ] ].

fathom_n1 := n_meas_le &
 [ STEM < "fathom" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fathom_n_1_rel",
            PHON.ONSET con ] ].

fathom_v1 := v_np_trans_le &
 [ STEM < "fathom" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fathom_v_1_rel",
            PHON.ONSET con ] ].

fathom_v2 := v_cp_non_trans_le &
 [ STEM < "fathom" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fathom_v_1_rel",
            PHON.ONSET con ] ].

fatigue_n1 := n_mass_le &
 [ STEM < "fatigue" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fatigue_n_1_rel",
            PHON.ONSET con ] ].

fatman_n1 := n_proper_le &
 [ STEM < "fatman" >,
   SYNSEM [ LKEYS.KEYREL.CARG "fatman",
            PHON.ONSET con ] ].

fatten_v1 := v_np_trans_noger_le &
 [ STEM < "fatten" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fatten_v_cause_rel",
            PHON.ONSET con ] ].

fatten_v2 := v_unacc_le &
 [ STEM < "fatten" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fatten_v_1_rel",
            PHON.ONSET con ] ].

fault_n1 := n_mass_count_le &
 [ STEM < "fault" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fault_n_1_rel",
            PHON.ONSET con ] ].

faulty_a1 := adj_intrans_le &
 [ STEM < "faulty" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_faulty_a_1_rel",
            PHON.ONSET con ] ].

fauna_n1 := n_plur_le &
 [ STEM < "fauna" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fauna_n_1_rel",
            PHON.ONSET con ] ].

favor_n1 := n_intr_le &
 [ STEM < "favor" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_favor_n_1_rel",
            PHON.ONSET con ] ].

favor_v1 := v_np_trans_le &
 [ STEM < "favor" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_favor_v_1_rel",
            PHON.ONSET con ] ].

favorable_a1 := adj_intrans_le &
 [ STEM < "favorable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_favorable_a_1_rel",
            PHON.ONSET con ] ].

favorably := adv_int_vp_le &
 [ STEM < "favorably" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_favorable_a_1_rel",
            PHON.ONSET con ] ].

favorite_isect := adj_intrans_le &
 [ STEM < "favorite" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_favorite_a_1_rel",
            PHON.ONSET con ] ].

favorite_n1 := n_intr_le &
 [ STEM < "favorite" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_favorite_n_1_rel",
            PHON.ONSET con ] ].

fax_n1 := n_intr_le &
 [ STEM < "fax" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fax_n_1_rel",
            PHON.ONSET con ] ].

fax_v1 := v_ditrans_le &
 [ STEM < "fax" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fax_v_1_rel",
            PHON.ONSET con ] ].

fax_v2 := v_np_trans_le &
 [ STEM < "fax" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fax_v_1_rel",
            PHON.ONSET con ] ].

faz_n1 := n_proper_le &
 [ STEM < "faz" >,
   SYNSEM [ LKEYS.KEYREL.CARG "faz",
            PHON.ONSET con ] ].

fbi_n1 := n_intr_le &
 [ STEM < "fbi" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fbi_n_1_rel",
            PHON.ONSET con ] ].

fdl_n1 := n_intr_named_le &
 [ STEM < "fdl" >,
   SYNSEM [ LKEYS.KEYREL.CARG "fdl",
            PHON.ONSET con ] ].

fdr_n1 := n_proper_le &
 [ STEM < "fdr" >,
   SYNSEM [ LKEYS.KEYREL.CARG "fdr",
            PHON.ONSET con ] ].

fear_for_v1 := v_empty_prep_intrans_le &
 [ STEM < "fear" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_fear_v_for_rel" ],
            PHON.ONSET con ] ].

fear_n1 := n_mass_count_le &
 [ STEM < "fear" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fear_n_1_rel",
            PHON.ONSET con ] ].

fear_v1 := v_np_trans_le &
 [ STEM < "fear" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fear_v_1_rel",
            PHON.ONSET con ] ].

fear_v2 := v_cp_prop_non_trans_le &
 [ STEM < "fear" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fear_v_1_rel",
            PHON.ONSET con ] ].

fear_v3 := v_subj_equi_prp_le &
 [ STEM < "fear" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fear_v_1_rel",
            PHON.ONSET con ] ].

fearful_a1 := adj_intrans_le &
 [ STEM < "fearful" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fearful_a_1_rel",
            PHON.ONSET con ] ].

feasible_a1 := adj_intrans_le &
 [ STEM < "feasible" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_feasible_a_for_rel",
            PHON.ONSET con ] ].

feasible_a2 := adj_reg_atrans_le &
 [ STEM < "feasible" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_feasible_a_for_rel",
            PHON.ONSET con ] ].

feasibly_a1 := adv_int_vp_le &
 [ STEM < "feasibly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_feasible_a_for_rel",
            PHON.ONSET con ] ].

feast_n1 := n_intr_le &
 [ STEM < "feast" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_feast_n_1_rel",
            PHON.ONSET con ] ].

feat_n1 := n_intr_le &
 [ STEM < "feat" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_feat_n_1_rel",
            PHON.ONSET con ] ].

feather_n1 := n_intr_le &
 [ STEM < "feather" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_feather_n_1_rel",
            PHON.ONSET con ] ].

feather_v1 := v_np_trans_le &
 [ STEM < "feather" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_feather_v_1_rel",
            PHON.ONSET con ] ].

feature_n1 := n_intr_le &
 [ STEM < "feature" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_feature_n_1_rel",
            PHON.ONSET con ] ].

feature_v1 := v_np_trans_noger_le &
 [ STEM < "feature" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_feature_v_cause_rel",
            PHON.ONSET con ] ].

feature_v2 := v_unacc_le &
 [ STEM < "feature" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_feature_v_1_rel",
            PHON.ONSET con ] ].

feature_v3 := v_np_as_le &
 [ STEM < "feature" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_feature_v_as_rel",
            PHON.ONSET con ] ].

february := n_month_le &
 [ STEM < "february" >,
   SYNSEM [ LKEYS.KEYREL.CARG "feb",
            PHON.ONSET con ] ].

february_2 := n_month_year_le &
 [ STEM < "february" >,
   SYNSEM [ LKEYS.KEYREL.CARG "feb",
            PHON.ONSET con ] ].

february_abb_n1 := n_month_le &
 [ STEM < "feb" >,
   SYNSEM [ LKEYS.KEYREL.CARG "feb",
            PHON.ONSET con ] ].

february_abb_n2 := n_month_year_le &
 [ STEM < "feb" >,
   SYNSEM [ LKEYS.KEYREL.CARG "feb",
            PHON.ONSET con ] ].

february_abb_n3 := n_month_le &
 [ STEM < "feb." >,
   SYNSEM [ LKEYS.KEYREL.CARG "feb",
            PHON.ONSET con ] ].

february_abb_n4 := n_month_year_le &
 [ STEM < "feb." >,
   SYNSEM [ LKEYS.KEYREL.CARG "feb",
            PHON.ONSET con ] ].

february_the_det := det_month_le &
 [ STEM < "february", "the" >,
   SYNSEM [ LKEYS.ALTKEYREL.CARG "feb",
            PHON.ONSET con ] ].

feces_n1 := n_plur_nocmpnd_le &
 [ STEM < "fece" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_feces_n_1_rel",
            PHON.ONSET con ] ].

fed_ex_v2 := v_ditrans_le &
 [ STEM < "fed", "ex" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fed+ex_v_1_rel",
            PHON.ONSET con ] ].

fed_ex_v2a := v_ditrans_le &
 [ STEM < "fedex" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fed+ex_v_1_rel",
            PHON.ONSET con ] ].

fed_up_a1 := adj_trans_le &
 [ STEM < "fed", "up" >,
   SYNSEM [ LKEYS [ --COMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_fed+up_a_with_rel" ],
            PHON.ONSET con ] ].

federal_a1 := adj_intrans_le &
 [ STEM < "federal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_federal_a_1_rel",
            PHON.ONSET con ] ].

federally := adv_int_vp_le &
 [ STEM < "federally" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_federal_a_1_rel",
            PHON.ONSET con ] ].

federation_n1 := n_mass_count_le &
 [ STEM < "federation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_federation_n_1_rel",
            PHON.ONSET con ] ].

federation_post_ttl := n_post_title_le &
 [ STEM < "federation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_federation_n_1_rel",
            PHON.ONSET con ] ].

fedex_n1 := n_proper_le &
 [ STEM < "fed", "ex" >,
   SYNSEM [ LKEYS.KEYREL.CARG "fedex",
            PHON.ONSET con ] ].

fedex_n2 := n_proper_le &
 [ STEM < "fedex" >,
   SYNSEM [ LKEYS.KEYREL.CARG "fedex",
            PHON.ONSET con ] ].

fedex_n3 := n_proper_le &
 [ STEM < "federal", "express" >,
   SYNSEM [ LKEYS.KEYREL.CARG "fedex",
            PHON.ONSET con ] ].

fedex_v1 := v_np_trans_le &
 [ STEM < "fed", "ex" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fed+ex_v_1_rel",
            PHON.ONSET con ] ].

fedex_v1a := v_np_trans_le &
 [ STEM < "fedex" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fed+ex_v_1_rel",
            PHON.ONSET con ] ].

fee_n1 := n_intr_le &
 [ STEM < "fee" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fee_n_1_rel",
            PHON.ONSET con ] ].

feeble_a1 := adj_intrans_le &
 [ STEM < "feeble" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_feeble_a_1_rel",
            PHON.ONSET con ] ].

feed_n1 := n_mass_count_le &
 [ STEM < "feed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_feed_n_1_rel",
            PHON.ONSET con ] ].

feed_v1 := v_ditrans_le &
 [ STEM < "feed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_feed_v_1_rel",
            PHON.ONSET con ] ].

feed_v2 := v_np_trans_le &
 [ STEM < "feed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_feed_v_1_rel",
            PHON.ONSET con ] ].

feed_v3 := v_unerg_le &
 [ STEM < "feed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_feed_v_2_rel",
            PHON.ONSET con ] ].

feed_v4 := v_prep_dir_oblig_le &
 [ STEM < "feed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_feed_v_dir_rel",
            PHON.ONSET con ] ].

feedback_n1 := n_mass_le &
 [ STEM < "feedback" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_feedback_n_1_rel",
            PHON.ONSET con ] ].

feel_like_v1 := v_prep_intrans_le &
 [ STEM < "feel" >,
   SYNSEM [ LKEYS [ --COMPKEY _like_p_rel,
                    KEYREL.PRED "_feel_v_like_rel" ],
            PHON.ONSET con ] ].

feel_n1 := n_ppof_nocmpnd_le &
 [ STEM < "feel" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_feel_n_of_rel",
            PHON.ONSET con ] ].

feel_v1 := v_np_trans_le &
 [ STEM < "feel" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_feel_v_1_rel",
            PHON.ONSET con ] ].

feel_v2 := v_sorb_le &
 [ STEM < "feel" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_feel_v_1_rel",
            PHON.ONSET con ] ].

feel_v4 := v_prdp_pp_seq_about_le &
 [ STEM < "feel" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_feel_v_seem-about_rel",
            PHON.ONSET con ] ].

feel_v5 := v_prdp_pp_seq_prep_le &
 [ STEM < "feel" >,
   SYNSEM [ LKEYS [ --COMPKEY _like_p_rel,
                    KEYREL.PRED "_feel_v_seem_rel" ],
            PHON.ONSET con ] ].

feel_v6 := v_expl_it_subj_like_le &
 [ STEM < "feel" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_feel_v_seem-to_rel",
            PHON.ONSET con ] ].

feel_v7 := v_cp_prop_non_trans_le &
 [ STEM < "feel" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_feel_v_1_rel",
            PHON.ONSET con ] ].

feel_v8 := v_cp_like_non_trans_le &
 [ STEM < "feel" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_feel_v_1_rel",
            PHON.ONSET con ] ].

feeling_n1 := n_ppof_le &
 [ STEM < "feeling" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_feeling_n_of_rel",
            PHON.ONSET con ] ].

feeling_n2 := n_cpcomp_optthat_le &
 [ STEM < "feeling" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_feeling_n_of_rel",
            PHON.ONSET con ] ].

feign_v1 := v_np_trans_le &
 [ STEM < "feign" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_feign_v_1_rel",
            PHON.ONSET con ] ].

felicity_n1 := n_mass_le &
 [ STEM < "felicity" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_felicity_n_1_rel",
            PHON.ONSET con ] ].

fell_v1 := v_np_trans_le &
 [ STEM < "fell" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fell_v_1_rel",
            PHON.ONSET con ] ].

fellow_n1 := n_intr_le &
 [ STEM < "fellow" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fellow_n_1_rel",
            PHON.ONSET con ] ].

fellowship_n1 := n_mass_count_le &
 [ STEM < "fellowship" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fellowship_n_1_rel",
            PHON.ONSET con ] ].

felsenburg_n1 := n_proper_city_le &
 [ STEM < "felsenburg" >,
   SYNSEM [ LKEYS.KEYREL.CARG "felsenburg",
            PHON.ONSET con ] ].

female_a1 := adj_intrans_le &
 [ STEM < "female" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_female_a_1_rel",
            PHON.ONSET con ] ].

female_n1 := n_intr_le &
 [ STEM < "female" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_female_n_1_rel",
            PHON.ONSET con ] ].

feminine_a1 := adj_intrans_le &
 [ STEM < "feminine" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_feminine_a_1_rel",
            PHON.ONSET con ] ].

feminine_n1 := n_intr_le &
 [ STEM < "feminine" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_feminine_n_1_rel",
            PHON.ONSET con ] ].

femundsmark_n1 := n_proper_city_le &
 [ STEM < "femundsmark" >,
   SYNSEM [ LKEYS.KEYREL.CARG "femundsmark",
            PHON.ONSET con ] ].

femundsmarka_n1 := n_proper_city_le &
 [ STEM < "femundsmarka" >,
   SYNSEM [ LKEYS.KEYREL.CARG "femundsmarka",
            PHON.ONSET con ] ].

fence_n1 := n_intr_le &
 [ STEM < "fence" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fence_n_1_rel",
            PHON.ONSET con ] ].

fengpu_n1 := n_proper_le &
 [ STEM < "fengpu" >,
   SYNSEM [ LKEYS.KEYREL.CARG "fengpu",
            PHON.ONSET con ] ].

fengxian_n1 := n_proper_le &
 [ STEM < "fengxian" >,
   SYNSEM [ LKEYS.KEYREL.CARG "fengxian",
            PHON.ONSET con ] ].

ferdinand_n1 := n_proper_le &
 [ STEM < "ferdinand" >,
   SYNSEM [ LKEYS.KEYREL.CARG "ferdinand",
            PHON.ONSET con ] ].

fergie_n1 := n_proper_le &
 [ STEM < "fergie" >,
   SYNSEM [ LKEYS.KEYREL.CARG "fergie",
            PHON.ONSET con ] ].

feriehyttene_n1 := n_proper_le &
 [ STEM < "feriehyttene" >,
   SYNSEM [ LKEYS.KEYREL.CARG "feriehyttene",
            PHON.ONSET con ] ].

ferment_n1 := n_mass_count_le &
 [ STEM < "ferment" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ferment_n_1_rel",
            PHON.ONSET con ] ].

ferment_v1 := v_unacc_le &
 [ STEM < "ferment" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ferment_v_1_rel",
            PHON.ONSET con ] ].

ferment_v2 := v_np_trans_noger_le &
 [ STEM < "ferment" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ferment_v_cause_rel",
            PHON.ONSET con ] ].

fern_n1 := n_intr_le &
 [ STEM < "fern" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fern_n_1_rel",
            PHON.ONSET con ] ].

ferrari_n1 := n_proper_le &
 [ STEM < "ferrari" >,
   SYNSEM [ LKEYS.KEYREL.CARG "ferrari",
            PHON.ONSET con ] ].

ferraro_n1 := n_proper_le &
 [ STEM < "ferraro" >,
   SYNSEM [ LKEYS.KEYREL.CARG "ferraro",
            PHON.ONSET con ] ].

ferret_n1 := n_intr_le &
 [ STEM < "ferret" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ferret_n_1_rel",
            PHON.ONSET con ] ].

ferret_out_v1 := v_particle_np_le &
 [ STEM < "ferret" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_ferret_v_out_rel" ],
            PHON.ONSET con ] ].

ferry_in_v1 := v_particle_np_le &
 [ STEM < "ferry" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_ferry_v_in_rel" ],
            PHON.ONSET con ] ].

ferry_n1 := n_intr_le &
 [ STEM < "ferry" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ferry_n_1_rel",
            PHON.ONSET con ] ].

ferry_v1 := v_np_trans_le &
 [ STEM < "ferry" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ferry_v_1_rel",
            PHON.ONSET con ] ].

ferry_v2 := v_np_prep_trans_dors_le &
 [ STEM < "ferry" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ferry_v_1_rel",
            PHON.ONSET con ] ].

ferryboat_n1 := n_intr_le &
 [ STEM < "ferryboat" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ferryboat_n_1_rel",
            PHON.ONSET con ] ].

fertile_a1 := adj_intrans_le &
 [ STEM < "fertile" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fertile_a_1_rel",
            PHON.ONSET con ] ].

fertilize_v1 := v_np*_trans_le &
 [ STEM < "fertilize" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fertilize_v_1_rel",
            PHON.ONSET con ] ].

fervent_a1 := adj_intrans_le &
 [ STEM < "fervent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fervent_a_1_rel",
            PHON.ONSET con ] ].

fess_n1 := n_intr_le &
 [ STEM < "fess" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fess_n_1_rel",
            PHON.ONSET con ] ].

festival_n1 := n_intr_le &
 [ STEM < "festival" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_festival_n_1_rel",
            PHON.ONSET con ] ].

festive_a1 := adj_intrans_le &
 [ STEM < "festive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_festive_a_1_rel",
            PHON.ONSET con ] ].

festively := adv_int_vp_le &
 [ STEM < "festively" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_festive_a_1_rel",
            PHON.ONSET con ] ].

festivities_n1 := n_plur_le &
 [ STEM < "festivity" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_festivities_n_1_rel",
            PHON.ONSET con ] ].

fetch_v1 := v_np_trans_le &
 [ STEM < "fetch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fetch_v_1_rel",
            PHON.ONSET con ] ].

fetch_v3 := v_ditrans_only_le &
 [ STEM < "fetch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fetch_v_1_rel",
            PHON.ONSET con ] ].

fetter_n1 := n_intr_le &
 [ STEM < "fetter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fetter_n_1_rel",
            PHON.ONSET con ] ].

fetter_v1 := v_np_trans_le &
 [ STEM < "fetter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fetter_v_1_rel",
            PHON.ONSET con ] ].

feudalism_n1 := n_mass_le &
 [ STEM < "feudalism" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_feudalism_n_1_rel",
            PHON.ONSET con ] ].

fever_n1 := n_mass_count_le &
 [ STEM < "fever" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fever_n_1_rel",
            PHON.ONSET con ] ].

few := det_part_pl_le &
 [ STEM < "few" >,
   SYNSEM [ LKEYS.ALTKEYREL.PRED "_few_a_1_rel",
            PHON.ONSET con ] ].

few_a1 := adj_intrans_le &
 [ STEM < "few" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_few_a_1_rel",
            PHON.ONSET con ] ].

few_and_far_between_a1 := adj_pred_intrans_le &
 [ STEM < "few", "and", "far", "between" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_few+and+far+between_a_1_rel",
            PHON.ONSET con ] ].

fewer_a1 := adj_comp_le &
 [ STEM < "fewer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_few_a_1_rel",
            PHON.ONSET con ] ].

fewest_a1 := adj_superl_le &
 [ STEM < "fewest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_few_a_1_rel",
            PHON.ONSET con ] ].

feynman_n1 := n_proper_le &
 [ STEM < "feynman" >,
   SYNSEM [ LKEYS.KEYREL.CARG "feynman",
            PHON.ONSET con ] ].

ff_n1 := n_plur_le &
 [ STEM < "ff" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_franc_n_1_rel",
            PHON.ONSET con ] ].

fian_n1 := n_proper_le &
 [ STEM < "fian" >,
   SYNSEM [ LKEYS.KEYREL.CARG "fian",
            PHON.ONSET con ] ].

fiber_n1 := n_mass_count_le &
 [ STEM < "fiber" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fiber_n_1_rel",
            PHON.ONSET con ] ].

fibrous_a1 := adj_intrans_le &
 [ STEM < "fibrous" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fibrous_a_1_rel",
            PHON.ONSET con ] ].

fiction_n1 := n_mass_count_le &
 [ STEM < "fiction" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fiction_n_1_rel",
            PHON.ONSET con ] ].

fidelity_n1 := n_mass_le &
 [ STEM < "fidelity" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fidelity_n_1_rel",
            PHON.ONSET con ] ].

field_n1 := n_ppof_le &
 [ STEM < "field" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_field_n_of_rel",
            PHON.ONSET con ] ].

field_post_ttl := n_post_title_le &
 [ STEM < "field" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_field_n_of_rel",
            PHON.ONSET con ] ].

fielder_n1 := n_intr_le &
 [ STEM < "fielder" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fielder_n_1_rel",
            PHON.ONSET con ] ].

fierce_a1 := adj_intrans_le &
 [ STEM < "fierce" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fierce_a_1_rel",
            PHON.ONSET con ] ].

fiesta_n1 := n_intr_le &
 [ STEM < "fiesta" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fiesta_n_1_rel",
            PHON.ONSET con ] ].

fifteen := adj_bare_unspecified_card_two_le &
 [ STEM < "fifteen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "15",
            PHON.ONSET con ] ].

fifteen_day := n_day_of_month_card_le &
 [ STEM < "fifteen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "15",
            PHON.ONSET con ] ].

fifteen_day_num := n_day_of_month_card_le &
 [ STEM < "15" >,
   SYNSEM [ LKEYS.KEYREL.CARG "15",
            PHON.ONSET con ] ].

fifteen_day_num_yofc := n_day_of_month_card_yofc_le &
 [ STEM < "15" >,
   SYNSEM [ LKEYS.KEYREL.CARG "15",
            PHON.ONSET con ] ].

fifteen_day_yofc := n_day_of_month_card_yofc_le &
 [ STEM < "fifteen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "15",
            PHON.ONSET con ] ].

fifteenth := adj_bare_unspecified_ord_two_le &
 [ STEM < "fifteenth" >,
   SYNSEM [ LKEYS.KEYREL.CARG "15",
            PHON.ONSET con ] ].

fifteenth_day := n_day_of_month_le &
 [ STEM < "fifteenth" >,
   SYNSEM [ LKEYS.KEYREL.CARG "15",
            PHON.ONSET con ] ].

fifteenth_day_num := n_day_of_month_le &
 [ STEM < "15th" >,
   SYNSEM [ LKEYS.KEYREL.CARG "15",
            PHON.ONSET con ] ].

fifth := adj_bare_unspecified_ord_one_le &
 [ STEM < "fifth" >,
   SYNSEM [ LKEYS.KEYREL.CARG "5",
            PHON.ONSET con ] ].

fifth_day := n_day_of_month_le &
 [ STEM < "fifth" >,
   SYNSEM [ LKEYS.KEYREL.CARG "5",
            PHON.ONSET con ] ].

fifth_day_num := n_day_of_month_le &
 [ STEM < "5th" >,
   SYNSEM [ LKEYS.KEYREL.CARG "5",
            PHON.ONSET con ] ].

fifties_n1 := n_plur_xmod_le &
 [ STEM < "fifties" >,
   SYNSEM [ LKEYS.KEYREL.CARG "50",
            PHON.ONSET con ] ].

fiftieth := adj_bare_unspecified_ord_two_le &
 [ STEM < "fiftieth" >,
   SYNSEM [ LKEYS.KEYREL.CARG "50",
            PHON.ONSET con ] ].

fifty := adj_bare_unspecified_card_two_le &
 [ STEM < "fifty" >,
   SYNSEM [ LKEYS.KEYREL.CARG "50",
            PHON.ONSET con ] ].

fifty_w_comps := adj_complemented_unspecified_card_le &
 [ STEM < "fifty" >,
   SYNSEM [ LKEYS.KEYREL.CARG "50",
            PHON.ONSET con ] ].

fiftyish_approx := adj_approx_bare_unspecified_card_le &
 [ STEM < "fiftyish" >,
   SYNSEM [ LKEYS.KEYREL.CARG "50",
            PHON.ONSET con ] ].

fig_abb := adv_int_vp_le &
 [ STEM < "fig." >,
   SYNSEM [ LKEYS.KEYREL.PRED "_figurative_a_1_rel",
            PHON.ONSET con ] ].

fight_back_v1 := v_particle_le &
 [ STEM < "fight" >,
   SYNSEM [ LKEYS [ --COMPKEY _back_p_sel_rel,
                    KEYREL.PRED "_fight_v_back_rel" ],
            PHON.ONSET con ] ].

fight_n1 := n_mass_count_le &
 [ STEM < "fight" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fight_n_1_rel",
            PHON.ONSET con ] ].

fight_v1 := v_np*_trans_le &
 [ STEM < "fight" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fight_v_1_rel",
            PHON.ONSET con ] ].

fight_v2 := v_subj_equi_le &
 [ STEM < "fight" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fight_v_1_rel",
            PHON.ONSET con ] ].

fighter_n1 := n_intr_le &
 [ STEM < "fighter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fighter_n_1_rel",
            PHON.ONSET con ] ].

figurative_a1 := adj_intrans_le &
 [ STEM < "figurative" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_figurative_a_1_rel",
            PHON.ONSET con ] ].

figuratively := adv_int_vp_le &
 [ STEM < "figuratively" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_figurative_a_1_rel",
            PHON.ONSET con ] ].

figure_adv_v1 := v_adv_le &
 [ STEM < "figure" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_figure_v_1_rel",
            PHON.ONSET con ] ].

figure_in_v1 := v_particle_np_le &
 [ STEM < "figure" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_figure_v_in_rel" ],
            PHON.ONSET con ] ].

figure_in_v2 := v_particle_le &
 [ STEM < "figure" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_figure_v_in_rel" ],
            PHON.ONSET con ] ].

figure_into_v1 := v_empty_prep_trans_le &
 [ STEM < "figure" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _into_p_sel_rel,
                    KEYREL.PRED "_figure_v_into_rel" ],
            PHON.ONSET con ] ].

figure_n1 := n_intr_le &
 [ STEM < "figure" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_figure_n_1_rel",
            PHON.ONSET con ] ].

figure_out_v1 := v_particle_np_le &
 [ STEM < "figure" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_figure_v_out_rel" ],
            PHON.ONSET con ] ].

figure_out_v2 := v_particle_cp_le &
 [ STEM < "figure" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_figure_v_out_rel" ],
            PHON.ONSET con ] ].

figure_title := n_title_le &
 [ STEM < "figure" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_figure_n_1_rel",
            PHON.ONSET con ] ].

figure_v3 := v_cp_non_trans_le &
 [ STEM < "figure" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_figure_v_1_rel",
            PHON.ONSET con ] ].

figurine_n1 := n_intr_le &
 [ STEM < "figurine" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_figurine_n_1_rel",
            PHON.ONSET con ] ].

fiji_n1 := n_proper_le &
 [ STEM < "fiji" >,
   SYNSEM [ LKEYS.KEYREL.CARG "fiji",
            PHON.ONSET con ] ].

file_for_v1 := v_empty_prep_intrans_le &
 [ STEM < "file" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_file_v_for_rel" ],
            PHON.ONSET con ] ].

file_n1 := n_ppof_le &
 [ STEM < "file" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_file_n_of_rel",
            PHON.ONSET con ] ].

file_v1 := v_np*_trans_le &
 [ STEM < "file" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_file_v_1_rel",
            PHON.ONSET con ] ].

file_v2 := v_prep_dir_oblig_le &
 [ STEM < "file" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_file_v_dir_rel",
            PHON.ONSET con ] ].

filefjell := n_proper_le &
 [ STEM < "filefjell" >,
   SYNSEM [ LKEYS.KEYREL.CARG "filefjell",
            PHON.ONSET con ] ].

filenes_n1 := n_proper_city_le &
 [ STEM < "filenes" >,
   SYNSEM [ LKEYS.KEYREL.CARG "filenes",
            PHON.ONSET con ] ].

filesystem_n1 := n_intr_le &
 [ STEM < "filesystem" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_filesystem_n_1_rel",
            PHON.ONSET con ] ].

filigree_n1 := n_mass_count_le &
 [ STEM < "filigree" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_filigree_n_1_rel",
            PHON.ONSET con ] ].

filing_n1 := n_intr_le &
 [ STEM < "filing" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_filing_n_1_rel",
            PHON.ONSET con ] ].

fill_in_v1 := v_particle_np_le &
 [ STEM < "fill" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_fill_v_in_rel" ],
            PHON.ONSET con ] ].

fill_in_v2 := v_particle_le &
 [ STEM < "fill" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_fill_v_in_rel" ],
            PHON.ONSET con ] ].

fill_n1 := n_mass_le &
 [ STEM < "fill" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fill_n_1_rel",
            PHON.ONSET con ] ].

fill_out_v1 := v_particle_np_le &
 [ STEM < "fill" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_fill_v_out_rel" ],
            PHON.ONSET con ] ].

fill_out_v2 := v_particle_le &
 [ STEM < "fill" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_fill_v_out_rel" ],
            PHON.ONSET con ] ].

fill_v1 := v_np_trans_noger_le &
 [ STEM < "fill" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fill_v_cause_rel",
            PHON.ONSET con ] ].

fill_v2 := v_unacc_le &
 [ STEM < "fill" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fill_v_1_rel",
            PHON.ONSET con ] ].

filled_up_a1 := adj_pred_nomod_le &
 [ STEM < "filled", "up" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_filled+up_a_1_rel",
            PHON.ONSET con ] ].

film_n := n_mass_count_le &
 [ STEM < "film" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_film_n_1_rel",
            PHON.ONSET con ] ].

film_v1 := v_np*_trans_le &
 [ STEM < "film" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_film_v_1_rel",
            PHON.ONSET con ] ].

filofax_n1 := n_intr_le &
 [ STEM < "filofax" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_filofax_n_1_rel",
            PHON.ONSET con ] ].

filter_n1 := n_intr_le &
 [ STEM < "filter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_filter_n_1_rel",
            PHON.ONSET con ] ].

filter_out_v1 := v_particle_np_le &
 [ STEM < "filter" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_filter_v_out_rel" ],
            PHON.ONSET con ] ].

filter_v1 := v_prep_dir_le &
 [ STEM < "filter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_filter_v_1_rel",
            PHON.ONSET con ] ].

filter_v2 := v_np_trans_noger_le &
 [ STEM < "filter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_filter_v_2_rel",
            PHON.ONSET con ] ].

fin_n1 := n_intr_le &
 [ STEM < "fin" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fin_n_1_rel",
            PHON.ONSET con ] ].

finagle_v1 := v_np_trans_le &
 [ STEM < "finagle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_finagle_v_1_rel",
            PHON.ONSET con ] ].

final_a1 := adj_intrans_le &
 [ STEM < "final" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_final_a_1_rel",
            PHON.ONSET con ] ].

final_n1 := n_no_cmpnd_le &
 [ STEM < "final" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_final_n_1_rel",
            PHON.ONSET con ] ].

finalize_v1 := v_np*_trans_le &
 [ STEM < "finalize" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_finalize_v_1_rel",
            PHON.ONSET con ] ].

finally_adv1 := adv_int_vp_aux_le &
 [ STEM < "finally" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_final_a_1_rel",
            PHON.ONSET con ] ].

finally_adv2 := adv_int_vp_post_le &
 [ STEM < "finally" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_final_a_1_rel",
            PHON.ONSET con ] ].

finance_n1 := n_mass_count_le &
 [ STEM < "finance" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_finance_n_1_rel",
            PHON.ONSET con ] ].

finance_v1 := v_np_trans_le &
 [ STEM < "finance" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_finance_v_1_rel",
            PHON.ONSET con ] ].

financial_a1 := adj_intrans_le &
 [ STEM < "financial" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_financial_a_1_rel",
            PHON.ONSET con ] ].

financially := adv_int_vp_le &
 [ STEM < "financially" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_financial_a_1_rel",
            PHON.ONSET con ] ].

finch_n1 := n_intr_le &
 [ STEM < "finch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_finch_n_1_rel",
            PHON.ONSET con ] ].

find_adj_v1 := v_sor_prd_le &
 [ STEM < "find" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_find_v_mental_rel",
            PHON.ONSET con ] ].

find_n1 := n_intr_le &
 [ STEM < "find" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_find_n_1_rel",
            PHON.ONSET con ] ].

find_out_v1 := v_particle_empty_pp_le &
 [ STEM < "find" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    --OCOMPKEY _about_p_sel_rel,
                    KEYREL.PRED "_find_v_out-about_rel" ],
            PHON.ONSET con ] ].

find_out_v2 := v_particle_cp_le &
 [ STEM < "find" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_find_v_out_rel" ],
            PHON.ONSET con ] ].

find_out_v3 := v_particle_np_le &
 [ STEM < "find" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_find_v_out_rel" ],
            PHON.ONSET con ] ].

find_out_v4 := v_particle_le &
 [ STEM < "find" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_find_v_out_rel" ],
            PHON.ONSET con ] ].

find_v1 := v_np_trans_le &
 [ STEM < "find" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_find_v_1_rel",
            PHON.ONSET con ] ].

find_v2 := v_ditrans_only_le &
 [ STEM < "find" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_find_v_1_rel",
            PHON.ONSET con ] ].

find_v3 := v_cp_only_prop_non_trans_le &
 [ STEM < "find" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_find_v_1_rel",
            PHON.ONSET con ] ].

find_v4 := v_sor_le &
 [ STEM < "find" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_find_v_mental_rel",
            PHON.ONSET con ] ].

find_v5 := v_expl_obj_prd_le &
 [ STEM < "find" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_find_v_1_rel",
            PHON.ONSET con ] ].

finding_n1 := n_intr_le &
 [ STEM < "finding" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_finding_n_1_rel",
            PHON.ONSET con ] ].

fine_a1 := adv_int_vp_post_le &
 [ STEM < "fine" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fine_a_1_rel",
            PHON.ONSET con ] ].

fine_adj := adj_intrans_le &
 [ STEM < "fine" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fine_a_1_rel",
            PHON.ONSET con ] ].

fine_n1 := n_intr_le &
 [ STEM < "fine" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fine_n_1_rel",
            PHON.ONSET con ] ].

fine_root_pre := adv_s_pre_word_root_le &
 [ STEM < "fine" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fine_a_1_rel",
            PHON.ONSET con ] ].

fine_v1 := v_np_trans_le &
 [ STEM < "fine" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fine_v_1_rel",
            PHON.ONSET con ] ].

fine_v2 := v_ditrans_only_le &
 [ STEM < "fine" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fine_v_1_rel",
            PHON.ONSET con ] ].

fineness_n1 := n_mass_count_le &
 [ STEM < "fineness" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fineness_n_1_rel",
            PHON.ONSET con ] ].

finer_a1 := adj_comp_le &
 [ STEM < "finer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fine_a_1_rel",
            PHON.ONSET con ] ].

finest_a1 := adj_superl_le &
 [ STEM < "finest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fine_a_1_rel",
            PHON.ONSET con ] ].

finger_n1 := n_intr_le &
 [ STEM < "finger" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_finger_n_1_rel",
            PHON.ONSET con ] ].

fingerlike_a1 := adj_intrans_le &
 [ STEM < "fingerlike" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fingerlike_a_1_rel",
            PHON.ONSET con ] ].

finish_n1 := n_intr_le &
 [ STEM < "finish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_finish_n_1_rel",
            PHON.ONSET con ] ].

finish_off_v1 := v_particle_np_le &
 [ STEM < "finish" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_finish_v_off_rel" ],
            PHON.ONSET con ] ].

finish_off_v2 := v_particle_le &
 [ STEM < "finish" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_finish_v_off_rel" ],
            PHON.ONSET con ] ].

finish_up_v1 := v_particle_le &
 [ STEM < "finish" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_finish_v_up_rel" ],
            PHON.ONSET con ] ].

finish_v1 := v_np*_trans_le &
 [ STEM < "finish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_finish_v_1_rel",
            PHON.ONSET con ] ].

finish_v2 := v_particle_np_le &
 [ STEM < "finish" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_finish_v_up_rel" ],
            PHON.ONSET con ] ].

finish_v3 := v_ssr_prp_le &
 [ STEM < "finish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_finish_v_1_rel",
            PHON.ONSET con ] ].

finished_a1 := adj_intrans_le &
 [ STEM < "finished" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_finished_a_1_rel",
            PHON.ONSET con ] ].

finite_a1 := adj_intrans_le &
 [ STEM < "finite" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_finite_a_1_rel",
            PHON.ONSET con ] ].

finland := n_proper_le &
 [ STEM < "finland" >,
   SYNSEM [ LKEYS.KEYREL.CARG "finland",
            PHON.ONSET con ] ].

finn_n1 := n_proper_le &
 [ STEM < "finn" >,
   SYNSEM [ LKEYS.KEYREL.CARG "finn",
            PHON.ONSET con ] ].

finn_n2 := n_intr_le &
 [ STEM < "finn" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_finn_n_1_rel",
            PHON.ONSET con ] ].

finnish_a1 := adj_intrans_le &
 [ STEM < "finnish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_finnish_a_1_rel",
            PHON.ONSET con ] ].

finnish_n1 := n_proper_le &
 [ STEM < "finnish" >,
   SYNSEM [ LKEYS.KEYREL.CARG "finnish",
            PHON.ONSET con ] ].

finnish_n2 := n_intr_le &
 [ STEM < "finnish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_finnish_n_1_rel",
            PHON.ONSET con ] ].

finnmark := n_proper_le &
 [ STEM < "finnmark" >,
   SYNSEM [ LKEYS.KEYREL.CARG "finnmark",
            PHON.ONSET con ] ].

finse := n_proper_le &
 [ STEM < "finse" >,
   SYNSEM [ LKEYS.KEYREL.CARG "finse",
            PHON.ONSET con ] ].

finse_hut := n_proper_le &
 [ STEM < "Finse", "Hut" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Finse_Hut",
            PHON.ONSET con ] ].

finseÃ¥ni := n_proper_le &
 [ STEM < "finseÃ¥ni" >,
   SYNSEM [ LKEYS.KEYREL.CARG "finseÃ¥ni",
            PHON.ONSET con ] ].

fir_n1 := n_intr_le &
 [ STEM < "fir" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fir_n_1_rel",
            PHON.ONSET con ] ].

fire_at_v1 := v_empty_prep_trans_le &
 [ STEM < "fire" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _at_p_sel_rel,
                    KEYREL.PRED "_fire_v_at_rel" ],
            PHON.ONSET con ] ].

fire_n1 := n_mass_count_le &
 [ STEM < "fire" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fire_n_1_rel",
            PHON.ONSET con ] ].

fire_on_v1 := v_empty_prep_trans_le &
 [ STEM < "fire" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_fire_v_on_rel" ],
            PHON.ONSET con ] ].

fire_v1 := v_np*_trans_le &
 [ STEM < "fire" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fire_v_1_rel",
            PHON.ONSET con ] ].

fire_v2 := v_particle_np_le &
 [ STEM < "fire" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_fire_v_up_rel" ],
            PHON.ONSET con ] ].

fireplace_n1 := n_intr_le &
 [ STEM < "fireplace" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fireplace_n_1_rel",
            PHON.ONSET con ] ].

fireside_n1 := n_intr_le &
 [ STEM < "fireside" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fireside_n_1_rel",
            PHON.ONSET con ] ].

fireweed_n1 := n_mass_count_le &
 [ STEM < "fireweed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fireweed_n_1_rel",
            PHON.ONSET con ] ].

firewood_n1 := n_mass_le &
 [ STEM < "firewood" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_firewood_n_1_rel",
            PHON.ONSET con ] ].

fireworks_n1 := n_plur_le &
 [ STEM < "firework" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fireworks_n_1_rel",
            PHON.ONSET con ] ].

firkin_n1 := n_intr_le &
 [ STEM < "firkin" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_firkin_n_1_rel",
            PHON.ONSET con ] ].

firm_a1 := adj_intrans_le &
 [ STEM < "firm" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_firm_a_1_rel",
            PHON.ONSET con ] ].

firm_n1 := n_intr_le &
 [ STEM < "firm" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_firm_n_1_rel",
            PHON.ONSET con ] ].

firmament_n1 := n_intr_le &
 [ STEM < "firmament" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_firmament_n_1_rel",
            PHON.ONSET con ] ].

firmly := adv_int_vp_le &
 [ STEM < "firmly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_firm_a_1_rel",
            PHON.ONSET con ] ].

firmness_n1 := n_mass_le &
 [ STEM < "firmness" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_firmness_n_1_rel",
            PHON.ONSET con ] ].

first := adj_bare_unspecified_ord_one_le &
 [ STEM < "first" >,
   SYNSEM [ LKEYS.KEYREL.CARG "1",
            PHON.ONSET con ] ].

first_adv1 := adv_int_vp_le &
 [ STEM < "first" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_first_a_1_rel",
            PHON.ONSET con ] ].

first_aid_n1 := n_mass_le &
 [ STEM < "first", "aid" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_first+aid_n_1_rel",
            PHON.ONSET con ] ].

first_class_a1 := adj_intrans_le &
 [ STEM < "first", "class" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_first+class_a_1_rel",
            PHON.ONSET con ] ].

first_class_a2 := adj_intrans_le &
 [ STEM < "first-", "class" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_first+class_a_1_rel",
            PHON.ONSET con ] ].

first_class_adv1 := adv_int_vp_post_le &
 [ STEM < "first", "class" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_first+class_a_1_rel",
            PHON.ONSET con ] ].

first_class_adv2 := adv_int_vp_post_le &
 [ STEM < "first-", "class" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_first+class_a_1_rel",
            PHON.ONSET con ] ].

first_conj := conj_atomic_first_le &
 [ STEM < "first" >,
   SYNSEM.PHON.ONSET con ].

first_day := n_day_of_month_le &
 [ STEM < "first" >,
   SYNSEM [ LKEYS.KEYREL.CARG "1",
            PHON.ONSET con ] ].

first_day_num := n_day_of_month_le &
 [ STEM < "1st" >,
   SYNSEM [ LKEYS.KEYREL.CARG "1",
            PHON.ONSET con ] ].

first_hand_a1 := adj_intrans_le &
 [ STEM < "first", "hand" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_first+hand_a_1_rel",
            PHON.ONSET con ] ].

first_hand_a2 := adj_intrans_le &
 [ STEM < "first-", "hand" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_first+hand_a_1_rel",
            PHON.ONSET con ] ].

first_hand_adv1 := adv_int_vp_post_le &
 [ STEM < "first", "hand" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_first+hand_a_1_rel",
            PHON.ONSET con ] ].

first_hand_adv2 := adv_int_vp_post_le &
 [ STEM < "first-", "hand" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_first+hand_a_1_rel",
            PHON.ONSET con ] ].

first_mentioned_a1 := adj_intrans_le &
 [ STEM < "first", "mentioned" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_first+mentioned_a_1_rel",
            PHON.ONSET con ] ].

first_of_may := n_holiday_le &
 [ STEM < "the", "first", "of", "may" >,
   SYNSEM [ LKEYS.KEYREL.CARG "first_of_may",
            PHON.ONSET con ] ].

first_thing_adv1 := adv_int_vp_post_le &
 [ STEM < "first", "thing" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_first+thing_a_1_rel",
            PHON.ONSET con ] ].

first_time_a1 := adj_attr_intrans_le &
 [ STEM < "first-", "time" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_first+time_a_1_rel",
            PHON.ONSET con ] ].

firstly_adv1 := adv_int_vp_le &
 [ STEM < "firstly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_first_a_1_rel",
            PHON.ONSET con ] ].

fiscal_a1 := adj_intrans_le &
 [ STEM < "fiscal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fiscal_a_1_rel",
            PHON.ONSET con ] ].

fischlein_n1 := n_proper_le &
 [ STEM < "fischlein" >,
   SYNSEM [ LKEYS.KEYREL.CARG "fischlein",
            PHON.ONSET con ] ].

fish_for_v1 := v_empty_prep_intrans_le &
 [ STEM < "fish" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_fish_v_for_rel" ],
            PHON.ONSET con ] ].

fish_n1 := n_intr_le &
 [ STEM < "fish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fish_n_1_rel",
            PHON.ONSET con ] ].

fish_out_v1 := v_particle_np_le &
 [ STEM < "fish" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_fish_v_out_rel" ],
            PHON.ONSET con ] ].

fish_v1 := v_np*_trans_le &
 [ STEM < "fish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fish_v_1_rel",
            PHON.ONSET con ] ].

fisherman_n1 := n_intr_le &
 [ STEM < "fisherman" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fisherman_n_1_rel",
            PHON.ONSET con ] ].

fishermans_a1 := adj_compound_le &
 [ STEM < "fisherman", "'s" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fisherman_n_1_rel",
            PHON.ONSET con ] ].

fishery_n1 := n_intr_le &
 [ STEM < "fishery" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fishery_n_1_rel",
            PHON.ONSET con ] ].

fiskevollen_n1 := n_proper_city_le &
 [ STEM < "fiskevollen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "fiskevollen",
            PHON.ONSET con ] ].

fissure_n1 := n_intr_le &
 [ STEM < "fissure" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fissure_n_1_rel",
            PHON.ONSET con ] ].

fist_n1 := n_intr_le &
 [ STEM < "fist" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fist_n_1_rel",
            PHON.ONSET con ] ].

fit_a1 := adj_intrans_le &
 [ STEM < "fit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fit_a_1_rel",
            PHON.ONSET con ] ].

fit_in_v1 := v_particle_np_le &
 [ STEM < "fit" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_fit_v_in_rel" ],
            PHON.ONSET con ] ].

fit_in_v2 := v_particle_le &
 [ STEM < "fit" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_fit_v_in_rel" ],
            PHON.ONSET con ] ].

fit_in_with_v1 := v_particle_pp_le &
 [ STEM < "fit" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    --OCOMPKEY _with_p_rel,
                    KEYREL.PRED "_fit_v_in_rel" ],
            PHON.ONSET con ] ].

fit_into_v1 := v_empty_prep_intrans_le &
 [ STEM < "fit" >,
   SYNSEM [ LKEYS [ --COMPKEY _into_p_sel_rel,
                    KEYREL.PRED "_fit_v_into_rel" ],
            PHON.ONSET con ] ].

fit_n1 := n_ppof_le &
 [ STEM < "fit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fit_n_of_rel",
            PHON.ONSET con ] ].

fit_v1 := v_unacc_dir_le &
 [ STEM < "fit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fit_v_1_rel",
            PHON.ONSET con ] ].

fit_v2 := v_np_trans_le &
 [ STEM < "fit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fit_v_1_rel",
            PHON.ONSET con ] ].

fitness_n1 := n_mass_count_le &
 [ STEM < "fitness" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fitness_n_1_rel",
            PHON.ONSET con ] ].

five := adj_bare_unspecified_card_one_le &
 [ STEM < "five" >,
   SYNSEM [ LKEYS.KEYREL.CARG "5",
            PHON.ONSET con ] ].

five_c := adj_bare_unspecified_card_wcomps_one_le &
 [ STEM < "five" >,
   SYNSEM [ LKEYS.KEYREL.CARG "5",
            PHON.ONSET con ] ].

five_day := n_day_of_month_card_le &
 [ STEM < "five" >,
   SYNSEM [ LKEYS.KEYREL.CARG "5",
            PHON.ONSET con ] ].

five_day_num := n_day_of_month_card_le &
 [ STEM < "5" >,
   SYNSEM [ LKEYS.KEYREL.CARG "5",
            PHON.ONSET con ] ].

five_day_num_yofc := n_day_of_month_card_yofc_le &
 [ STEM < "5" >,
   SYNSEM [ LKEYS.KEYREL.CARG "5",
            PHON.ONSET con ] ].

five_day_yofc := n_day_of_month_card_yofc_le &
 [ STEM < "five" >,
   SYNSEM [ LKEYS.KEYREL.CARG "5",
            PHON.ONSET con ] ].

five_hour := n_hour_le &
 [ STEM < "five" >,
   SYNSEM [ LKEYS.KEYREL.CARG "5",
            PHON.ONSET con ] ].

five_hundreds_n1 := n_plur_xmod_le &
 [ STEM < "five", "hundreds" >,
   SYNSEM [ LKEYS.KEYREL.CARG "500",
            PHON.ONSET con ] ].

five_roman := adj_bare_unspecified_card_one_le &
 [ STEM < "V" >,
   SYNSEM [ LKEYS.KEYREL.CARG "V",
            PHON.ONSET con ] ].

fivedigitordersatz := adj_bare_unspecified_ord_three_le &
 [ STEM < "fivedigitordersatz" >,
   SYNSEM [ LKEYS.KEYREL [ CARG "dig5ersatz",
                             PRED const_rel ],
            PHON.ONSET onset ] ].

fiveish := n_approx_hour_le &
 [ STEM < "fiveish" >,
   SYNSEM [ LKEYS.KEYREL.CARG "5",
            PHON.ONSET con ] ].

fivlemyrane_n1 := n_proper_le &
 [ STEM < "fivlemyrane" >,
   SYNSEM [ LKEYS.KEYREL.CARG "fivlemyrane",
            PHON.ONSET con ] ].

fix_n1 := n_intr_le &
 [ STEM < "fix" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fix_n_1_rel",
            PHON.ONSET con ] ].

fix_on_v1 := v_empty_prep_intrans_le &
 [ STEM < "fix" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_fix_v_on_rel" ],
            PHON.ONSET con ] ].

fix_v1 := v_np_trans_le &
 [ STEM < "fix" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fix_v_1_rel",
            PHON.ONSET con ] ].

fixed_isect := adj_intrans_le &
 [ STEM < "fixed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fixed_a_1_rel",
            PHON.ONSET con ] ].

fixing_n1 := n_intr_le &
 [ STEM < "fixing" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fixing_n_1_rel",
            PHON.ONSET con ] ].

fjaerland := n_proper_le &
 [ STEM < "fjaerland" >,
   SYNSEM [ LKEYS.KEYREL.CARG "fjaerland",
            PHON.ONSET con ] ].

fjedevatnet_n1 := n_proper_city_le &
 [ STEM < "fjedevatnet" >,
   SYNSEM [ LKEYS.KEYREL.CARG "fjedevatnet",
            PHON.ONSET con ] ].

fjeldstad_n1 := n_proper_le &
 [ STEM < "fjeldstad" >,
   SYNSEM [ LKEYS.KEYREL.CARG "fjeldstad",
            PHON.ONSET con ] ].

fjellet_n1 := n_proper_le &
 [ STEM < "fjellet" >,
   SYNSEM [ LKEYS.KEYREL.CARG "fjellet",
            PHON.ONSET con ] ].

fjellgard_n1 := n_proper_le &
 [ STEM < "fjellgard" >,
   SYNSEM [ LKEYS.KEYREL.CARG "fjellgard",
            PHON.ONSET con ] ].

fjellgÃ¥rd_n1 := n_proper_le &
 [ STEM < "fjellgÃ¥rd" >,
   SYNSEM [ LKEYS.KEYREL.CARG "fjellgÃ¥rd",
            PHON.ONSET con ] ].

fjellhotel_n1 := n_proper_le &
 [ STEM < "fjellhotel" >,
   SYNSEM [ LKEYS.KEYREL.CARG "fjellhotel",
            PHON.ONSET con ] ].

fjellhotell_n1 := n_proper_le &
 [ STEM < "fjellhotell" >,
   SYNSEM [ LKEYS.KEYREL.CARG "fjellhotell",
            PHON.ONSET con ] ].

fjellstove := n_proper_le &
 [ STEM < "fjellstove" >,
   SYNSEM [ LKEYS.KEYREL.CARG "fjellstove",
            PHON.ONSET con ] ].

fjellstue_n1 := n_proper_le &
 [ STEM < "fjellstue" >,
   SYNSEM [ LKEYS.KEYREL.CARG "fjellstue",
            PHON.ONSET con ] ].

fjellstugu_n1 := n_proper_le &
 [ STEM < "fjellstugu" >,
   SYNSEM [ LKEYS.KEYREL.CARG "fjellstugu",
            PHON.ONSET con ] ].

fjellvang_n1 := n_proper_le &
 [ STEM < "fjellvang" >,
   SYNSEM [ LKEYS.KEYREL.CARG "fjellvang",
            PHON.ONSET con ] ].

fjord_n1 := n_intr_le &
 [ STEM < "fjord" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fjord_n_1_rel",
            PHON.ONSET con ] ].

fjord_norway_n1 := n_proper_le &
 [ STEM < "fjord", "norway" >,
   SYNSEM [ LKEYS.KEYREL.CARG "fjord_norway",
            PHON.ONSET con ] ].

fjord_post_ttl := n_post_title_le &
 [ STEM < "fjord" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fjord_n_1_rel",
            PHON.ONSET con ] ].

fjord_side_a1 := adj_attr_intrans_le &
 [ STEM < "fjord-", "side" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fjord-side_a_1_rel",
            PHON.ONSET con ] ].

fjordane_n1 := n_proper_pl_le &
 [ STEM < "fjordane" >,
   SYNSEM [ LKEYS.KEYREL.CARG "fjordane",
            PHON.ONSET con ] ].

fjordscape_n1 := n_intr_le &
 [ STEM < "fjordscape" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fjordscape_n_1_rel",
            PHON.ONSET con ] ].

fjÃ¦rland := n_proper_le &
 [ STEM < "fjÃ¦rland" >,
   SYNSEM [ LKEYS.KEYREL.CARG "fjÃ¦rland",
            PHON.ONSET con ] ].

fjÃ¦rlandsfjord := n_proper_le &
 [ STEM < "fjÃ¦rlandsfjord" >,
   SYNSEM [ LKEYS.KEYREL.CARG "fjÃ¦rlandsfjord",
            PHON.ONSET con ] ].

fjÃ¸llstaven_min_n1 := n_proper_le &
 [ STEM < "fjÃ¸llstaven", "min" >,
   SYNSEM [ LKEYS.KEYREL.CARG "fjÃ¸llstaven+min",
            PHON.ONSET con ] ].

fjÃ¸llstaven_n1 := n_proper_le &
 [ STEM < "fjÃ¸llstaven" >,
   SYNSEM [ LKEYS.KEYREL.CARG "fjÃ¸llstaven",
            PHON.ONSET con ] ].

flabbergast_v1 := v_np_trans_le &
 [ STEM < "flabbergast" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_flabbergast_v_1_rel",
            PHON.ONSET con ] ].

flabbergasted_a1 := adj_attr_intrans_le &
 [ STEM < "flabbergasted" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_flabbergasted_a_1_rel",
            PHON.ONSET con ] ].

flag_down_v1 := v_particle_np_le &
 [ STEM < "flag" >,
   SYNSEM [ LKEYS [ --COMPKEY _down_p_sel_rel,
                    KEYREL.PRED "_flag_v_down_rel" ],
            PHON.ONSET con ] ].

flag_n1 := n_intr_le &
 [ STEM < "flag" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_flag_n_1_rel",
            PHON.ONSET con ] ].

flag_v1 := v_np_trans_le &
 [ STEM < "flag" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_flag_v_1_rel",
            PHON.ONSET con ] ].

flagpole_n1 := n_intr_le &
 [ STEM < "flagpole" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_flagpole_n_1_rel",
            PHON.ONSET con ] ].

flagstone_n1 := n_intr_le &
 [ STEM < "flagstone" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_flagstone_n_1_rel",
            PHON.ONSET con ] ].

flair_n1 := n_intr_le &
 [ STEM < "flair" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_flair_n_1_rel",
            PHON.ONSET con ] ].

flake_n1 := n_intr_le &
 [ STEM < "flake" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_flake_n_1_rel",
            PHON.ONSET con ] ].

flame_n1 := n_mass_count_le &
 [ STEM < "flame" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_flame_n_1_rel",
            PHON.ONSET con ] ].

flame_v1 := v_unerg_le &
 [ STEM < "flame" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_flame_v_1_rel",
            PHON.ONSET con ] ].

flank_n1 := n_ppof_le &
 [ STEM < "flank" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_flank_n_of_rel",
            PHON.ONSET con ] ].

flank_v1 := v_np_trans_le &
 [ STEM < "flank" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_flank_v_1_rel",
            PHON.ONSET con ] ].

flap_n1 := n_intr_le &
 [ STEM < "flap" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_flap_n_1_rel",
            PHON.ONSET con ] ].

flap_v1 := v_unacc_le &
 [ STEM < "flap" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_flap_v_1_rel",
            PHON.ONSET con ] ].

flap_v2 := v_np_trans_noger_le &
 [ STEM < "flap" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_flap_v_cause_rel",
            PHON.ONSET con ] ].

flare_into_v1 := v_empty_prep_intrans_le &
 [ STEM < "flare" >,
   SYNSEM [ LKEYS [ --COMPKEY _into_p_sel_rel,
                    KEYREL.PRED "_flare_v_into_rel" ],
            PHON.ONSET con ] ].

flare_n1 := n_intr_le &
 [ STEM < "flare" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_flare_n_1_rel",
            PHON.ONSET con ] ].

flare_up_v1 := v_particle_le &
 [ STEM < "flare" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_flare_v_up_rel" ],
            PHON.ONSET con ] ].

flare_v1 := v_np_trans_le &
 [ STEM < "flare" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_flare_v_cause_rel",
            PHON.ONSET con ] ].

flare_v2 := v_unacc_dir_le &
 [ STEM < "flare" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_flare_v_1_rel",
            PHON.ONSET con ] ].

flash_at_v1 := v_empty_prep_trans_le &
 [ STEM < "flash" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _at_p_sel_rel,
                    KEYREL.PRED "_flash_v_cause-at_rel" ],
            PHON.ONSET con ] ].

flash_n1 := n_mass_count_ppof_le &
 [ STEM < "flash" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_flash_n_of_rel",
            PHON.ONSET con ] ].

flash_v1 := v_np_trans_noger_le &
 [ STEM < "flash" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_flash_v_cause_rel",
            PHON.ONSET con ] ].

flash_v2 := v_unacc_le &
 [ STEM < "flash" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_flash_v_1_rel",
            PHON.ONSET con ] ].

flash_v3 := v_ditrans_only_le &
 [ STEM < "flash" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_flash_v_1_rel",
            PHON.ONSET con ] ].

flat_a1 := adj_intrans_le &
 [ STEM < "flat" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_flat_a_1_rel",
            PHON.ONSET con ] ].

flatbre := n_proper_le &
 [ STEM < "flatbre" >,
   SYNSEM [ LKEYS.KEYREL.CARG "flatbre",
            PHON.ONSET con ] ].

flatiron_n1 := n_intr_le &
 [ STEM < "flatiron" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_flatiron_n_1_rel",
            PHON.ONSET con ] ].

flatly_adv1 := adv_int_vp_le &
 [ STEM < "flatly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_flat_a_1_rel",
            PHON.ONSET con ] ].

flatten_out_v1 := v_particle_np_le &
 [ STEM < "flatten" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_flatten_v_out_rel" ],
            PHON.ONSET con ] ].

flatten_out_v2 := v_particle_le &
 [ STEM < "flatten" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_flatten_v_out_rel" ],
            PHON.ONSET con ] ].

flatten_v1 := v_np_trans_le &
 [ STEM < "flatten" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_flatten_v_cause_rel",
            PHON.ONSET con ] ].

flatten_v2 := v_unacc_dir_le &
 [ STEM < "flatten" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_flatten_v_1_rel",
            PHON.ONSET con ] ].

flatter_v1 := v_np_trans_le &
 [ STEM < "flatter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_flatter_v_1_rel",
            PHON.ONSET con ] ].

flatter_v2 := v_np_trans_cp_le &
 [ STEM < "flatter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_flatter_v_1_rel",
            PHON.ONSET con ] ].

flatter_v3 := v_expl_it_subj_np_cp_le &
 [ STEM < "flatter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_flatter_v_1_rel",
            PHON.ONSET con ] ].

flattery_n1 := n_mass_le &
 [ STEM < "flattery" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_flattery_n_1_rel",
            PHON.ONSET con ] ].

flattish_a1 := adj_intrans_le &
 [ STEM < "flattish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_flattish_a_1_rel",
            PHON.ONSET con ] ].

flatulence_n1 := n_mass_le &
 [ STEM < "flatulence" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_flatulence_n_1_rel",
            PHON.ONSET con ] ].

flavor_n1 := n_mass_count_le &
 [ STEM < "flavor" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_flavor_n_1_rel",
            PHON.ONSET con ] ].

flavor_v1 := v_np_trans_le &
 [ STEM < "flavor" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_flavor_v_1_rel",
            PHON.ONSET con ] ].

flavour_n1 := n_mass_count_le &
 [ STEM < "flavour" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_flavour_n_1_rel",
            PHON.ONSET con ] ].

flavour_v1 := v_np_trans_le &
 [ STEM < "flavour" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_flavour_v_1_rel",
            PHON.ONSET con ] ].

flaw_n1 := n_intr_le &
 [ STEM < "flaw" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_flaw_n_1_rel",
            PHON.ONSET con ] ].

flax_n1 := n_mass_le &
 [ STEM < "flax" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_flax_n_1_rel",
            PHON.ONSET con ] ].

flaxen_a1 := adj_intrans_le &
 [ STEM < "flaxen" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_flaxen_a_1_rel",
            PHON.ONSET con ] ].

fledgling_n1 := n_intr_le &
 [ STEM < "fledgling" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fledgling_n_1_rel",
            PHON.ONSET con ] ].

flee_v1 := v_empty_prep_intrans_le &
 [ STEM < "flee" >,
   SYNSEM [ LKEYS [ --COMPKEY _from_p_sel_rel,
                    KEYREL.PRED "_flee_v_from_rel" ],
            PHON.ONSET con ] ].

flee_v2 := v_prep_dir_le &
 [ STEM < "flee" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_flee_v_from_rel",
            PHON.ONSET con ] ].

flee_v3 := v_np_trans_noger_le &
 [ STEM < "flee" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_flee_v_from_rel",
            PHON.ONSET con ] ].

fleece_n1 := n_mass_count_le &
 [ STEM < "fleece" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fleece_n_1_rel",
            PHON.ONSET con ] ].

fleecy_a1 := adj_intrans_le &
 [ STEM < "fleecy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fleecy_a_1_rel",
            PHON.ONSET con ] ].

fleet_a1 := adj_intrans_le &
 [ STEM < "fleet" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fleet_a_1_rel",
            PHON.ONSET con ] ].

fleet_n1 := n_intr_le &
 [ STEM < "fleet" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fleet_n_1_rel",
            PHON.ONSET con ] ].

flesh_n1 := n_mass_le &
 [ STEM < "flesh" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_flesh_n_1_rel",
            PHON.ONSET con ] ].

flesh_out_v1 := v_particle_np_le &
 [ STEM < "flesh" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_flesh_v_out_rel" ],
            PHON.ONSET con ] ].

fleskedal_n1 := n_proper_le &
 [ STEM < "fleskedal" >,
   SYNSEM [ LKEYS.KEYREL.CARG "fleskedal",
            PHON.ONSET con ] ].

fleskedalen_n1 := n_proper_le &
 [ STEM < "fleskedalen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "fleskedalen",
            PHON.ONSET con ] ].

fleskedalsfossen_n1 := n_proper_le &
 [ STEM < "fleskedalsfossen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "fleskedalsfossen",
            PHON.ONSET con ] ].

flesland := n_proper_le &
 [ STEM < "flesland" >,
   SYNSEM [ LKEYS.KEYREL.CARG "flesland",
            PHON.ONSET con ] ].

flex_n1 := n_proper_le &
 [ STEM < "flex" >,
   SYNSEM [ LKEYS.KEYREL.CARG "flex",
            PHON.ONSET con ] ].

flexibility_n1 := n_intr_le &
 [ STEM < "flexibility" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_flexibility_n_1_rel",
            PHON.ONSET con ] ].

flexible_a1 := adj_intrans_le &
 [ STEM < "flexible" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_flexible_a_1_rel",
            PHON.ONSET con ] ].

flexibly := adv_int_vp_le &
 [ STEM < "flexibly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_flexible_a_1_rel",
            PHON.ONSET con ] ].

flexiday_n1 := n_intr_le &
 [ STEM < "flexiday" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_flexiday_n_1_rel",
            PHON.ONSET con ] ].

flick_n1 := n_intr_le &
 [ STEM < "flick" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_flick_n_1_rel",
            PHON.ONSET con ] ].

flick_off_v1 := v_particle_np_le &
 [ STEM < "flick" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_flick_v_off_rel" ],
            PHON.ONSET con ] ].

flick_off_v2 := v_particle_le &
 [ STEM < "flick" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_flick_v_off_rel" ],
            PHON.ONSET con ] ].

flick_on_v1 := v_particle_np_le &
 [ STEM < "flick" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_flick_v_on_rel" ],
            PHON.ONSET con ] ].

flick_on_v2 := v_particle_le &
 [ STEM < "flick" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_flick_v_on_rel" ],
            PHON.ONSET con ] ].

flick_v1 := v_empty_prep*_trans_le &
 [ STEM < "flick" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _at_p_sel_rel,
                    KEYREL.PRED "_flick_v_at_rel" ],
            PHON.ONSET con ] ].

flicker_n1 := n_intr_le &
 [ STEM < "flicker" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_flicker_n_1_rel",
            PHON.ONSET con ] ].

flicker_v1 := v_unacc_le &
 [ STEM < "flicker" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_flicker_v_1_rel",
            PHON.ONSET con ] ].

flight_n1 := n_intr_le &
 [ STEM < "flight" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_flight_n_1_rel",
            PHON.ONSET con ] ].

fling_back_v1 := v_particle_np_le &
 [ STEM < "fling" >,
   SYNSEM [ LKEYS [ --COMPKEY _back_p_sel_rel,
                    KEYREL.PRED "_fling_v_back_rel" ],
            PHON.ONSET con ] ].

fling_n1 := n_intr_le &
 [ STEM < "fling" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fling_n_1_rel",
            PHON.ONSET con ] ].

fling_open_v1 := v_particle_np_le &
 [ STEM < "fling" >,
   SYNSEM [ LKEYS [ --COMPKEY _open_a_sel_rel,
                    KEYREL.PRED "_fling_v_open_rel" ],
            PHON.ONSET con ] ].

fling_v1 := v_np_prep_trans_dors_le &
 [ STEM < "fling" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fling_v_1_rel",
            PHON.ONSET con ] ].

fling_v2 := v_np_trans_le &
 [ STEM < "fling" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fling_v_1_rel",
            PHON.ONSET con ] ].

flint_n1 := n_mass_count_le &
 [ STEM < "flint" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_flint_n_1_rel",
            PHON.ONSET con ] ].

flint_n2 := n_proper_city_le &
 [ STEM < "flint" >,
   SYNSEM [ LKEYS.KEYREL.CARG "flint",
            PHON.ONSET con ] ].

flintstones_n1 := n_proper_le &
 [ STEM < "flintstones" >,
   SYNSEM [ LKEYS.KEYREL.CARG "flintstones",
            PHON.ONSET con ] ].

flip_flop_v1 := v_unerg_le &
 [ STEM < "flip", "flop" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_flip+flop_v_1_rel",
            PHON.ONSET con ] ].

flip_n1 := n_intr_le &
 [ STEM < "flip" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_flip_n_1_rel",
            PHON.ONSET con ] ].

flip_out_v1 := v_particle_le &
 [ STEM < "flip" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_flip_v_out_rel" ],
            PHON.ONSET con ] ].

flip_v1 := v_np_trans_le &
 [ STEM < "flip" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_flip_v_cause_rel",
            PHON.ONSET con ] ].

flip_v2 := v_unacc_dir_le &
 [ STEM < "flip" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_flip_v_1_rel",
            PHON.ONSET con ] ].

float_n1 := n_intr_le &
 [ STEM < "float" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_float_n_1_rel",
            PHON.ONSET con ] ].

float_v1 := v_prep_dir_le &
 [ STEM < "float" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_float_v_1_rel",
            PHON.ONSET con ] ].

float_v2 := v_np_trans_le &
 [ STEM < "float" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_float_v_cause_rel",
            PHON.ONSET con ] ].

flock_n1 := n_ppof_le &
 [ STEM < "flock" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_flock_n_of_rel",
            PHON.ONSET con ] ].

flock_n2 := n_group_ppof_le &
 [ STEM < "flock" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_flock_n_of_rel",
            PHON.ONSET con ] ].

flock_v1 := v_prep_dir_le &
 [ STEM < "flock" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_flock_v_1_rel",
            PHON.ONSET con ] ].

floe_n1 := n_intr_le &
 [ STEM < "floe" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_floe_n_1_rel",
            PHON.ONSET con ] ].

flog_v1 := v_np_trans_le &
 [ STEM < "flog" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_flog_v_1_rel",
            PHON.ONSET con ] ].

flood_n1 := n_ppof_le &
 [ STEM < "flood" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_flood_n_of_rel",
            PHON.ONSET con ] ].

flood_v1 := v_np_trans_le &
 [ STEM < "flood" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_flood_v_cause_rel",
            PHON.ONSET con ] ].

flood_v2 := v_prep_dir_le &
 [ STEM < "flood" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_flood_v_1_rel",
            PHON.ONSET con ] ].

floodgate_n1 := n_intr_le &
 [ STEM < "floodgate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_floodgate_n_1_rel",
            PHON.ONSET con ] ].

floodlight_n1 := n_intr_le &
 [ STEM < "floodlight" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_floodlight_n_1_rel",
            PHON.ONSET con ] ].

floor_n1 := n_intr_le &
 [ STEM < "floor" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_floor_n_1_rel",
            PHON.ONSET con ] ].

flop_n1 := n_intr_le &
 [ STEM < "flop" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_flop_n_1_rel",
            PHON.ONSET con ] ].

flop_v1 := v_unacc_dir_le &
 [ STEM < "flop" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_flop_v_1_rel",
            PHON.ONSET con ] ].

flora_n1 := n_intr_le &
 [ STEM < "flora" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_flora_n_1_rel",
            PHON.ONSET con ] ].

floral_a1 := adj_intrans_le &
 [ STEM < "floral" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_floral_a_1_rel",
            PHON.ONSET con ] ].

florida_n1 := n_proper_le &
 [ STEM < "florida" >,
   SYNSEM [ LKEYS.KEYREL.CARG "florida",
            PHON.ONSET con ] ].

florida_n2 := n_proper_abb_le &
 [ STEM < "fl" >,
   SYNSEM [ LKEYS.KEYREL.CARG "florida",
            PHON.ONSET con ] ].

flour_n1 := n_mass_le &
 [ STEM < "flour" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_flour_n_1_rel",
            PHON.ONSET con ] ].

flourish_n1 := n_intr_le &
 [ STEM < "flourish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_flourish_n_1_rel",
            PHON.ONSET con ] ].

flourish_v1 := v_unerg_le &
 [ STEM < "flourish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_flourish_v_1_rel",
            PHON.ONSET con ] ].

flow_n1 := n_mass_count_ppof_le &
 [ STEM < "flow" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_flow_n_of_rel",
            PHON.ONSET con ] ].

flow_v1 := v_prep_dir_le &
 [ STEM < "flow" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_flow_v_1_rel",
            PHON.ONSET con ] ].

flower_n1 := n_intr_le &
 [ STEM < "flower" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_flower_n_1_rel",
            PHON.ONSET con ] ].

flower_v1 := v_unerg_le &
 [ STEM < "flower" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_flower_v_1_rel",
            PHON.ONSET con ] ].

flowerbed_n1 := n_intr_le &
 [ STEM < "flowerbed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_flowerbed_n_1_rel",
            PHON.ONSET con ] ].

flowerless_a1 := adj_intrans_le &
 [ STEM < "flowerless" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_flowerless_a_1_rel",
            PHON.ONSET con ] ].

flowery_a1 := adj_intrans_le &
 [ STEM < "flowery" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_flowery_a_1_rel",
            PHON.ONSET con ] ].

floyd_n1 := n_proper_le &
 [ STEM < "floyd" >,
   SYNSEM [ LKEYS.KEYREL.CARG "floyd",
            PHON.ONSET con ] ].

fluctuate_v1 := v_unerg_le &
 [ STEM < "fluctuate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fluctuate_v_1_rel",
            PHON.ONSET con ] ].

flue_n1 := n_intr_le &
 [ STEM < "flue" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_flue_n_1_rel",
            PHON.ONSET con ] ].

fluid_a1 := adj_intrans_le &
 [ STEM < "fluid" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fluid_a_1_rel",
            PHON.ONSET con ] ].

fluid_n1 := n_mass_count_le &
 [ STEM < "fluid" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fluid_n_1_rel",
            PHON.ONSET voc ] ].

fluoride_n1 := n_mass_count_le &
 [ STEM < "fluoride" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fluoride_n_1_rel",
            PHON.ONSET con ] ].

fluorine_n1 := n_mass_count_le &
 [ STEM < "fluorine" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fluorine_n_1_rel",
            PHON.ONSET con ] ].

flurry_n1 := n_ppof_le &
 [ STEM < "flurry" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_flurry_n_of_rel",
            PHON.ONSET con ] ].

flush_a4 := adj_trans_oblig_le &
 [ STEM < "flush" >,
   SYNSEM [ LKEYS [ --COMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_flush_a_with_rel" ],
            PHON.ONSET con ] ].

flush_n1 := n_mass_count_le &
 [ STEM < "flush" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_flush_n_1_rel",
            PHON.ONSET con ] ].

flush_out_v1 := v_particle_np_le &
 [ STEM < "flush" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_flush_v_out_rel" ],
            PHON.ONSET con ] ].

flush_v1 := v_np*_trans_le &
 [ STEM < "flush" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_flush_v_1_rel",
            PHON.ONSET con ] ].

flute_n1 := n_intr_le &
 [ STEM < "flute" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_flute_n_1_rel",
            PHON.ONSET con ] ].

flutter_n1 := n_intr_le &
 [ STEM < "flutter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_flutter_n_1_rel",
            PHON.ONSET con ] ].

flutter_v1 := v_np_trans_noger_le &
 [ STEM < "flutter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_flutter_v_cause_rel",
            PHON.ONSET con ] ].

flutter_v2 := v_unacc_le &
 [ STEM < "flutter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_flutter_v_1_rel",
            PHON.ONSET con ] ].

fly_in_v1 := v_particle_np_le &
 [ STEM < "fly" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_fly_v_in_rel" ],
            PHON.ONSET con ] ].

fly_n1 := n_intr_le &
 [ STEM < "fly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fly_n_1_rel",
            PHON.ONSET con ] ].

fly_off_v1 := v_particle_le &
 [ STEM < "fly" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_fly_v_off_rel" ],
            PHON.ONSET con ] ].

fly_on_v1 := v_particle_le &
 [ STEM < "fly" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_fly_v_on_rel" ],
            PHON.ONSET con ] ].

fly_over_v1 := v_particle_le &
 [ STEM < "fly" >,
   SYNSEM [ LKEYS [ --COMPKEY _over_p_sel_rel,
                    KEYREL.PRED "_fly_v_over_rel" ],
            PHON.ONSET con ] ].

fly_v1 := v_prep_dir_le &
 [ STEM < "fly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fly_v_1_rel",
            PHON.ONSET con ] ].

fly_v2 := v_to_trans_le &
 [ STEM < "fly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fly_v_to_rel",
            PHON.ONSET con ] ].

fly_v3 := v_np_trans_noger_le &
 [ STEM < "fly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fly_v_to_rel",
            PHON.ONSET con ] ].

flyer_n1 := n_intr_le &
 [ STEM < "flyer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_flyer_n_1_rel",
            PHON.ONSET con ] ].

flysheet_n1 := n_intr_le &
 [ STEM < "flysheet" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_flysheet_n_1_rel",
            PHON.ONSET con ] ].

flytrap_n1 := n_intr_le &
 [ STEM < "flytrap" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_flytrap_n_1_rel",
            PHON.ONSET con ] ].

flÃ¥m := n_proper_le &
 [ STEM < "flÃ¥m" >,
   SYNSEM [ LKEYS.KEYREL.CARG "flÃ¥m",
            PHON.ONSET con ] ].

flÃ¥msbana := n_proper_le &
 [ STEM < "flÃ¥msbana" >,
   SYNSEM [ LKEYS.KEYREL.CARG "flÃ¥msbana",
            PHON.ONSET con ] ].

flÃ¥msdal := n_proper_le &
 [ STEM < "flÃ¥msdal" >,
   SYNSEM [ LKEYS.KEYREL.CARG "flÃ¥msdal",
            PHON.ONSET con ] ].

flÃ¥msdalen := n_proper_le &
 [ STEM < "flÃ¥msdalen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "flÃ¥msdalen",
            PHON.ONSET con ] ].

flÃ¥mselvi := n_proper_le &
 [ STEM < "flÃ¥mselvi" >,
   SYNSEM [ LKEYS.KEYREL.CARG "flÃ¥mselvi",
            PHON.ONSET con ] ].

flÃ¥ten_n1 := n_proper_le &
 [ STEM < "flÃ¥ten" >,
   SYNSEM [ LKEYS.KEYREL.CARG "flÃ¥ten",
            PHON.ONSET con ] ].

flÃ¸ien := n_proper_le &
 [ STEM < "flÃ¸ien" >,
   SYNSEM [ LKEYS.KEYREL.CARG "flÃ¸ien",
            PHON.ONSET con ] ].

fmae_nd := n_proper_le &
 [ STEM < "fmae" >,
   SYNSEM [ LKEYS.KEYREL.CARG "fmae",
            PHON.ONSET con ] ].

foam_n1 := n_mass_le &
 [ STEM < "foam" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_foam_n_1_rel",
            PHON.ONSET con ] ].

foam_v1 := v_unerg_le &
 [ STEM < "foam" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_foam_v_1_rel",
            PHON.ONSET con ] ].

focus_n1 := n_mass_count_le &
 [ STEM < "focus" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_focus_n_1_rel",
            PHON.ONSET con ] ].

focus_on_v1 := v_empty_prep_trans_le &
 [ STEM < "focus" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_focus_v_cause-on_rel" ],
            PHON.ONSET con ] ].

focus_v1 := v_empty_prep_intrans_le &
 [ STEM < "focus" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_focus_v_on_rel" ],
            PHON.ONSET con ] ].

focus_v2 := v_unacc_le &
 [ STEM < "focus" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_focus_v_1_rel",
            PHON.ONSET con ] ].

focus_v3 := v_np_trans_noger_le &
 [ STEM < "focus" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_focus_v_cause-on_rel",
            PHON.ONSET con ] ].

fodder_n1 := n_mass_le &
 [ STEM < "fodder" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fodder_n_1_rel",
            PHON.ONSET con ] ].

foe_n1 := n_intr_le &
 [ STEM < "foe" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_foe_n_1_rel",
            PHON.ONSET con ] ].

fog_n := n_mass_le &
 [ STEM < "fog" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fog_n_1_rel",
            PHON.ONSET con ] ].

foggier_a1 := adj_comp_le &
 [ STEM < "foggier" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_foggy_a_1_rel",
            PHON.ONSET con ] ].

foggier_a2 := adj_atrans_comp_le &
 [ STEM < "foggier" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_foggy_a_1_rel",
            PHON.ONSET con ] ].

foggiest_a1 := adj_superl_le &
 [ STEM < "foggiest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_foggy_a_1_rel",
            PHON.ONSET con ] ].

foggiest_a2 := adj_atrans_superl_le &
 [ STEM < "foggiest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_foggy_a_1_rel",
            PHON.ONSET con ] ].

foggy_a1 := adj_intrans_le &
 [ STEM < "foggy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_foggy_a_1_rel",
            PHON.ONSET con ] ].

foggy_a2 := adj_atrans_le &
 [ STEM < "foggy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_foggy_a_1_rel",
            PHON.ONSET con ] ].

foil_n1 := n_mass_count_le &
 [ STEM < "foil" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_foil_n_1_rel",
            PHON.ONSET con ] ].

foil_v1 := v_np_trans_le &
 [ STEM < "foil" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_foil_v_1_rel",
            PHON.ONSET con ] ].

fold_n1 := n_intr_le &
 [ STEM < "fold" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fold_n_1_rel",
            PHON.ONSET con ] ].

fold_v1 := v_unerg_le &
 [ STEM < "fold" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fold_v_1_rel",
            PHON.ONSET con ] ].

fold_v2 := v_np_trans_le &
 [ STEM < "fold" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fold_v_cause_rel",
            PHON.ONSET con ] ].

folder_n := n_ppof_le &
 [ STEM < "folder" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_folder_n_of_rel",
            PHON.ONSET con ] ].

folgefonna_n1 := n_proper_city_le &
 [ STEM < "folgefonna" >,
   SYNSEM [ LKEYS.KEYREL.CARG "folgefonna",
            PHON.ONSET con ] ].

foliage_n1 := n_mass_le &
 [ STEM < "foliage" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_foliage_n_1_rel",
            PHON.ONSET con ] ].

foliar_a1 := adj_intrans_le &
 [ STEM < "foliar" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_foliar_a_1_rel",
            PHON.ONSET con ] ].

folic_a1 := adj_intrans_le &
 [ STEM < "folic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_folic_a_1_rel",
            PHON.ONSET con ] ].

folk_a1 := adj_attr_nospec_le &
 [ STEM < "folk" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_folk_a_1_rel",
            PHON.ONSET voc ] ].

folks_n1 := n_plur_nocmpnd_le &
 [ STEM < "folk" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_folks_n_1_rel",
            PHON.ONSET con ] ].

folks_root_post := adv_disc_posth_le &
 [ STEM < "folks" >,
   SYNSEM [ LKEYS.KEYREL.CARG "folks",
            PHON.ONSET con ] ].

folks_root_pre := adv_disc_preh_le &
 [ STEM < "folks" >,
   SYNSEM [ LKEYS.KEYREL.CARG "folks",
            PHON.ONSET con ] ].

follow_around_v1 := v_particle_np_le &
 [ STEM < "follow" >,
   SYNSEM [ LKEYS [ --COMPKEY _around_p_sel_rel,
                    KEYREL.PRED "_follow_v_around_rel" ],
            PHON.ONSET con ] ].

follow_up_n1 := n_intr_le &
 [ STEM < "follow", "up" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_follow+up_n_1_rel",
            PHON.ONSET con ] ].

follow_up_n2 := n_intr_le &
 [ STEM < "follow-", "up" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_follow+up_n_1_rel",
            PHON.ONSET con ] ].

follow_up_v1 := v_particle_pp_le &
 [ STEM < "follow" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    --OCOMPKEY _on_p_rel,
                    KEYREL.PRED "_follow_v_up_rel" ],
            PHON.ONSET con ] ].

follow_up_v2 := v_particle_np_le &
 [ STEM < "follow" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_follow_v_up_rel" ],
            PHON.ONSET con ] ].

follow_up_v3 := v_particle_le &
 [ STEM < "follow" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_follow_v_up_rel" ],
            PHON.ONSET con ] ].

follow_v1 := v_np*_trans_le &
 [ STEM < "follow" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_follow_v_1_rel",
            PHON.ONSET con ] ].

follow_v2 := v_expl_it_subj_cp_le &
 [ STEM < "follow" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_follow_v_1_rel",
            PHON.ONSET con ] ].

follower_n1 := n_intr_le &
 [ STEM < "follower" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_follower_n_1_rel",
            PHON.ONSET con ] ].

following_n1 := n_intr_le &
 [ STEM < "following" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_following_n_1_rel",
            PHON.ONSET con ] ].

folly_n1 := n_mass_count_le &
 [ STEM < "folly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_folly_n_1_rel",
            PHON.ONSET con ] ].

fond_a1 := adj_trans_le &
 [ STEM < "fond" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_fond_a_of_rel" ],
            PHON.ONSET con ] ].

fondfinans_n1 := n_proper_le &
 [ STEM < "fondfinans" >,
   SYNSEM [ LKEYS.KEYREL.CARG "fondfinans",
            PHON.ONSET con ] ].

fondly_isect := adv_int_vp_le &
 [ STEM < "fondly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fond_a_1_rel",
            PHON.ONSET con ] ].

fondsbu := n_proper_le &
 [ STEM < "fondsbu" >,
   SYNSEM [ LKEYS.KEYREL.CARG "fondsbu",
            PHON.ONSET con ] ].

fondsfinans_n1 := n_proper_le &
 [ STEM < "fondsfinans", "as" >,
   SYNSEM [ LKEYS.KEYREL.CARG "fondsfinans+as",
            PHON.ONSET con ] ].

fonsbu_n1 := n_proper_le &
 [ STEM < "fonsbu" >,
   SYNSEM [ LKEYS.KEYREL.CARG "fonsbu",
            PHON.ONSET con ] ].

food_n1 := n_mass_count_le &
 [ STEM < "food" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_food_n_1_rel",
            PHON.ONSET con ] ].

foodstuff_n1 := n_mass_count_le &
 [ STEM < "foodstuff" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_foodstuff_n_1_rel",
            PHON.ONSET con ] ].

fool_around_v1 := v_particle_le &
 [ STEM < "fool" >,
   SYNSEM [ LKEYS [ --COMPKEY _around_p_sel_rel,
                    KEYREL.PRED "_fool_v_around_rel" ],
            PHON.ONSET con ] ].

fool_around_v2 := v_particle_pp_le &
 [ STEM < "fool" >,
   SYNSEM [ LKEYS [ --COMPKEY _around_p_sel_rel,
                    --OCOMPKEY _with_p_rel,
                    KEYREL.PRED "_fool_v_around_rel" ],
            PHON.ONSET con ] ].

fool_n1 := n_intr_le &
 [ STEM < "fool" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fool_n_1_rel",
            PHON.ONSET con ] ].

fool_root_post := adv_disc_posth_le &
 [ STEM < "fool" >,
   SYNSEM [ LKEYS.KEYREL.CARG "fool",
            PHON.ONSET con ] ].

fool_root_pre := adv_disc_preh_le &
 [ STEM < "fool" >,
   SYNSEM [ LKEYS.KEYREL.CARG "fool",
            PHON.ONSET con ] ].

fool_v1 := v_np_trans_le &
 [ STEM < "fool" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fool_v_1_rel",
            PHON.ONSET con ] ].

fool_v2 := v_expl_it_subj_np_cp_le &
 [ STEM < "fool" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fool_v_1_rel",
            PHON.ONSET con ] ].

foolish_a1 := adj_intrans_le &
 [ STEM < "foolish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_foolish_a_1_rel",
            PHON.ONSET con ] ].

foolish_a2 := adj_reg_atrans_le &
 [ STEM < "foolish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_foolish_a_1_rel",
            PHON.ONSET con ] ].

foot_abb_n1 := n_meas_le &
 [ STEM < "ft" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_foot_n_1_rel",
            PHON.ONSET con ] ].

foot_abb_n2 := n_meas_le &
 [ STEM < "ft." >,
   SYNSEM [ LKEYS.KEYREL.PRED "_foot_n_1_rel",
            PHON.ONSET con ] ].

foot_apostr_n1 := n_meas_nocmpnd_le &
 [ STEM < "'" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_foot_n_1_rel",
            PHON.ONSET con ] ].

foot_n1 := n_meas_le &
 [ STEM < "foot" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_foot_n_1_rel",
            PHON.ONSET con ] ].

football_n1 := n_mass_count_le &
 [ STEM < "football" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_football_n_1_rel",
            PHON.ONSET con ] ].

footbridge_n1 := n_intr_le &
 [ STEM < "footbridge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_footbridge_n_1_rel",
            PHON.ONSET con ] ].

footer_n1 := n_intr_le &
 [ STEM < "footer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_footer_n_1_rel",
            PHON.ONSET con ] ].

footgear_n1 := n_mass_le &
 [ STEM < "footgear" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_footgear_n_1_rel",
            PHON.ONSET con ] ].

foothill_n1 := n_intr_le &
 [ STEM < "foothill" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_foothill_n_1_rel",
            PHON.ONSET con ] ].

footing_n1 := n_mass_count_le &
 [ STEM < "footing" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_footing_n_1_rel",
            PHON.ONSET con ] ].

footprint_n1 := n_intr_le &
 [ STEM < "footprint" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_footprint_n_1_rel",
            PHON.ONSET con ] ].

footrope_n1 := n_intr_le &
 [ STEM < "footrope" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_footrope_n_1_rel",
            PHON.ONSET con ] ].

footstep_n1 := n_intr_le &
 [ STEM < "footstep" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_footstep_n_1_rel",
            PHON.ONSET con ] ].

footwear_n1 := n_plur_le &
 [ STEM < "footwear" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_footwear_n_1_rel",
            PHON.ONSET con ] ].

footwear_n2 := n_mass_le &
 [ STEM < "footwear" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_footwear_n_1_rel",
            PHON.ONSET con ] ].

for := p_le &
 [ STEM < "for" >,
   SYNSEM [ LKEYS.KEYREL.PRED _for_p_rel,
            PHON.ONSET con ] ].

for_c := comp_for_le &
 [ STEM < "for" >,
   SYNSEM.PHON.ONSET con ].

for_example_a1 := adv_int_vp_post_le &
 [ STEM < "for", "example" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_for+example_a_1_rel",
            PHON.ONSET con ] ].

for_example_disc_adv := adv_disc_like_posth_le &
 [ STEM < "for", "example" >,
   SYNSEM [ LKEYS.KEYREL.CARG "for_example",
            PHON.ONSET con ] ].

for_example_pp := pp_nmod_le &
 [ STEM < "for", "example" >,
   SYNSEM [ LKEYS.KEYREL.PRED _for+example_p_rel,
            PHON.ONSET con ] ].

for_example_root_pre := adv_s_pre_word_root_le &
 [ STEM < "for", "example" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_for+example_a_1_rel",
            PHON.ONSET con ] ].

for_free_a1 := adv_int_vp_post_le &
 [ STEM < "for", "free" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_for+free_a_1_rel",
            PHON.ONSET con ] ].

for_instance_a1 := adv_int_vp_post_le &
 [ STEM < "for", "instance" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_for+instance_a_1_rel",
            PHON.ONSET con ] ].

for_instance_disc_adv := adv_disc_like_preh_le &
 [ STEM < "for", "instance" >,
   SYNSEM [ LKEYS.KEYREL.CARG "for_instance",
            PHON.ONSET con ] ].

for_instance_pp := pp_nmod_le &
 [ STEM < "for", "instance" >,
   SYNSEM [ LKEYS.KEYREL.PRED _for+instance_p_rel,
            PHON.ONSET con ] ].

for_instance_prep := p_reg_le &
 [ STEM < "for", "instance" >,
   SYNSEM [ LKEYS.KEYREL.PRED _for+instance_p_rel,
            PHON.ONSET con ] ].

for_instance_root_post := adv_disc_posth_le &
 [ STEM < "for", "instance" >,
   SYNSEM [ LKEYS.KEYREL.CARG "for_instance",
            PHON.ONSET con ] ].

for_lack_of_p := p_le &
 [ STEM < "for", "lack", "of" >,
   SYNSEM [ LKEYS.KEYREL.PRED _for+lack+of_p_rel,
            PHON.ONSET con ] ].

for_nbar_p := p_nbar_comp_nomod_le &
 [ STEM < "for" >,
   SYNSEM [ LKEYS.KEYREL.PRED _for_p_trgt_rel,
            PHON.ONSET con ] ].

for_once_adv1 := adv_int_vp_post_le &
 [ STEM < "for", "once" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_for+once_a_1_rel",
            PHON.ONSET con ] ].

for_one_disc_adv := adv_disc_like_posth_le &
 [ STEM < "for", "one" >,
   SYNSEM [ LKEYS.KEYREL.CARG "for_one",
            PHON.ONSET con ] ].

for_prtcl := p_prtcl_le &
 [ STEM < "for" >,
   SYNSEM [ LKEYS.KEYREL.PRED _for_p_sel_rel,
            PHON.ONSET con ] ].

for_subconj := p_subconj_le &
 [ STEM < "for" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_for_x_because_rel",
            PHON.ONSET con ] ].

for_sure_root_post := adv_s_post_word_nospec_le &
 [ STEM < "for", "sure" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_for+sure_a_1_rel",
            PHON.ONSET con ] ].

for_sure_root_pre := adv_s_pre_word_root_le &
 [ STEM < "for", "sure" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_for+sure_a_1_rel",
            PHON.ONSET con ] ].

for_the_most_part_adv1 := adv_int_vp_le &
 [ STEM < "for", "the", "most", "part" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_for+the+most+part_a_1_rel",
            PHON.ONSET con ] ].

for_the_time_being_adv := adv_int_vp_post_le &
 [ STEM < "for", "the", "time", "being" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_for+the+time+being_a_1_rel",
            PHON.ONSET con ] ].

forbear_v1 := v_np*_trans_le &
 [ STEM < "forbear" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_forbear_v_1_rel",
            PHON.ONSET con ] ].

forbes_n1 := n_proper_le &
 [ STEM < "forbes" >,
   SYNSEM [ LKEYS.KEYREL.CARG "forbes",
            PHON.ONSET con ] ].

forbid_v1 := v_np_trans_le &
 [ STEM < "forbid" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_forbid_v_1_rel",
            PHON.ONSET con ] ].

forbid_v2 := v_obj_equi_le &
 [ STEM < "forbid" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_forbid_v_1_rel",
            PHON.ONSET con ] ].

forbid_v3 := v_obj_equi_from_le &
 [ STEM < "forbid" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_forbid_v_from_rel",
            PHON.ONSET con ] ].

force_n1 := n_mass_count_le &
 [ STEM < "force" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_force_n_1_rel",
            PHON.ONSET con ] ].

force_title := n_title_le &
 [ STEM < "force" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_force_n_1_rel",
            PHON.ONSET con ] ].

force_v1 := v_obj_equi_le &
 [ STEM < "force" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_force_v_1_rel",
            PHON.ONSET con ] ].

force_v2 := v_np_trans_le &
 [ STEM < "force" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_force_v_1_rel",
            PHON.ONSET con ] ].

force_v3 := v_np_prep_trans_dors_le &
 [ STEM < "force" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_force_v_1_rel",
            PHON.ONSET con ] ].

forcible_a1 := adj_intrans_le &
 [ STEM < "forcible" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_forcible_a_1_rel",
            PHON.ONSET con ] ].

forcibly_adv := adv_int_vp_le &
 [ STEM < "forcibly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_forcible_a_1_rel",
            PHON.ONSET con ] ].

ford_n1 := n_proper_le &
 [ STEM < "ford" >,
   SYNSEM [ LKEYS.KEYREL.CARG "ford",
            PHON.ONSET con ] ].

ford_n2 := n_intr_le &
 [ STEM < "ford" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ford_n_1_rel",
            PHON.ONSET con ] ].

ford_v1 := v_np_trans_le &
 [ STEM < "ford" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ford_v_1_rel",
            PHON.ONSET con ] ].

fore-and-aft_a1 := adj_intrans_le &
 [ STEM < "fore-and-aft" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fore+and+aft_a_1_rel",
            PHON.ONSET con ] ].

fore-and-aft_a2 := adj_intrans_le &
 [ STEM < "fore", "and", "aft" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fore+and+aft_a_1_rel",
            PHON.ONSET con ] ].

fore-and-aft_adv1 := pp_le &
 [ STEM < "fore-", "and-", "aft" >,
   SYNSEM [ LKEYS.KEYREL.PRED _fore+and+aft_p_rel,
            PHON.ONSET con ] ].

fore-and-aft_adv2 := pp_le &
 [ STEM < "fore", "and", "aft" >,
   SYNSEM [ LKEYS.KEYREL.PRED _fore+and+aft_p_rel,
            PHON.ONSET con ] ].

fore_adv := pp_le &
 [ STEM < "fore" >,
   SYNSEM [ LKEYS.KEYREL.PRED _fore_p_rel,
            PHON.ONSET con ] ].

fore_n1 := n_mass_le &
 [ STEM < "fore" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fore_n_1_rel",
            PHON.ONSET con ] ].

forearm_n1 := n_intr_le &
 [ STEM < "forearm" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_forearm_n_1_rel",
            PHON.ONSET con ] ].

foreboding_n1 := n_mass_count_le &
 [ STEM < "foreboding" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_foreboding_n_1_rel",
            PHON.ONSET con ] ].

forecast_n1 := n_mass_count_le &
 [ STEM < "forecast" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_forecast_n_1_rel",
            PHON.ONSET con ] ].

forecast_v1 := v_np_trans_le &
 [ STEM < "forecast" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_forecast_v_1_rel",
            PHON.ONSET con ] ].

forecast_v2 := v_cp_non_trans_le &
 [ STEM < "forecast" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_forecast_v_1_rel",
            PHON.ONSET con ] ].

forecaster_n1 := n_intr_le &
 [ STEM < "forecaster" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_forecaster_n_1_rel",
            PHON.ONSET con ] ].

forefather_n1 := n_intr_le &
 [ STEM < "forefather" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_forefather_n_1_rel",
            PHON.ONSET con ] ].

foregoing_a1 := adj_intrans_le &
 [ STEM < "foregoing" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_foregoing_a_1_rel",
            PHON.ONSET con ] ].

foreground_n1 := n_intr_le &
 [ STEM < "foreground" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_foreground_n_1_rel",
            PHON.ONSET con ] ].

forehead_n1 := n_intr_le &
 [ STEM < "forehead" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_forehead_n_1_rel",
            PHON.ONSET con ] ].

foreign_a1 := adj_intrans_le &
 [ STEM < "foreign" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_foreign_a_1_rel",
            PHON.ONSET con ] ].

foreigner_n1 := n_intr_le &
 [ STEM < "foreigner" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_foreigner_n_1_rel",
            PHON.ONSET con ] ].

foremast_n1 := n_intr_le &
 [ STEM < "foremast" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_foremast_n_1_rel",
            PHON.ONSET con ] ].

foremost_a1 := adj_intrans_le &
 [ STEM < "foremost" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_foremost_a_1_rel",
            PHON.ONSET con ] ].

forerunner_n1 := n_intr_le &
 [ STEM < "forerunner" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_forerunner_n_1_rel",
            PHON.ONSET con ] ].

foresee_v1 := v_np_trans_le &
 [ STEM < "foresee" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_foresee_v_1_rel",
            PHON.ONSET con ] ].

foresight_n := n_mass_le &
 [ STEM < "foresight" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_foresight_n_1_rel",
            PHON.ONSET con ] ].

forest_n1 := n_mass_count_ppof_le &
 [ STEM < "forest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_forest_n_of_rel",
            PHON.ONSET con ] ].

forest_post_ttl := n_post_title_le &
 [ STEM < "forest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_forest_n_of_rel",
            PHON.ONSET con ] ].

forestall_v1 := v_np_trans_le &
 [ STEM < "forestall" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_forestall_v_1_rel",
            PHON.ONSET con ] ].

forestation_n1 := n_mass_ppcomp_le &
 [ STEM < "forestation" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_forestation_n_of_rel" ],
            PHON.ONSET con ] ].

forested_a1 := adj_intrans_le &
 [ STEM < "forested" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_forested_a_1_rel",
            PHON.ONSET con ] ].

forever_a1 := adj_attr_nospec_le &
 [ STEM < "forever" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_forever_a_1_rel",
            PHON.ONSET con ] ].

forever_adv := n_adv_tm_le &
 [ STEM < "forever" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED _forever_a_1_rel,
                    KEYREL.PRED time_n_rel ],
            PHON.ONSET con ] ].

forever_adv2 := adv_int_vp_pre_le &
 [ STEM < "forever" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_forever_a_1_rel",
            PHON.ONSET con ] ].

forfeit_a1 := adj_intrans_le &
 [ STEM < "forfeit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_forfeit_a_1_rel",
            PHON.ONSET con ] ].

forfeit_v1 := v_np_trans_le &
 [ STEM < "forfeit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_forfeit_v_1_rel",
            PHON.ONSET con ] ].

forge_n1 := n_intr_le &
 [ STEM < "forge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_forge_n_1_rel",
            PHON.ONSET con ] ].

forge_v1 := v_np_trans_le &
 [ STEM < "forge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_forge_v_1_rel",
            PHON.ONSET con ] ].

forget_about_v := v_empty_prep_intrans_le &
 [ STEM < "forget" >,
   SYNSEM [ LKEYS [ --COMPKEY _about_p_sel_rel,
                    KEYREL.PRED "_forget_v_about_rel" ],
            PHON.ONSET con ] ].

forget_v1 := v_np*_trans_le &
 [ STEM < "forget" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_forget_v_1_rel",
            PHON.ONSET con ] ].

forget_v2 := v_cp_fin_inf_non_trans_le &
 [ STEM < "forget" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_forget_v_1_rel",
            PHON.ONSET con ] ].

forget_v4 := v_subj_equi_le &
 [ STEM < "forget" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_forget_v_1_rel",
            PHON.ONSET con ] ].

forgive_v1 := v_empty_prep*_trans_le &
 [ STEM < "forgive" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_forgive_v_for_rel" ],
            PHON.ONSET con ] ].

forgive_v2 := v_ditrans_only_le &
 [ STEM < "forgive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_forgive_v_for_rel",
            PHON.ONSET con ] ].

fork_n1 := n_intr_le &
 [ STEM < "fork" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fork_n_1_rel",
            PHON.ONSET con ] ].

fork_out_v1 := v_particle_np_le &
 [ STEM < "fork" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_fork_v_out_rel" ],
            PHON.ONSET con ] ].

fork_over_v1 := v_particle_np_le &
 [ STEM < "fork" >,
   SYNSEM [ LKEYS [ --COMPKEY _over_p_sel_rel,
                    KEYREL.PRED "_fork_v_over_rel" ],
            PHON.ONSET con ] ].

fork_v1 := v_unerg_le &
 [ STEM < "fork" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fork_v_1_rel",
            PHON.ONSET con ] ].

form_n1 := n_mass_count_ppof_le &
 [ STEM < "form" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_form_n_of_rel",
            PHON.ONSET con ] ].

form_v1 := v_np_trans_noger_le &
 [ STEM < "form" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_form_v_cause_rel",
            PHON.ONSET con ] ].

form_v2 := v_unacc_le &
 [ STEM < "form" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_form_v_1_rel",
            PHON.ONSET con ] ].

formal_isect := adj_intrans_le &
 [ STEM < "formal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_formal_a_1_rel",
            PHON.ONSET con ] ].

formality_n1 := n_mass_count_le &
 [ STEM < "formality" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_formality_n_1_rel",
            PHON.ONSET con ] ].

formally := adv_int_vp_le &
 [ STEM < "formally" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_formal_a_1_rel",
            PHON.ONSET con ] ].

format_n1 := n_intr_le &
 [ STEM < "format" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_format_n_1_rel",
            PHON.ONSET con ] ].

format_v1 := v_np_trans_le &
 [ STEM < "format" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_format_v_1_rel",
            PHON.ONSET con ] ].

formation_n1 := n_mass_count_ppof_le &
 [ STEM < "formation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_formation_n_of_rel",
            PHON.ONSET con ] ].

formative_a1 := adj_intrans_le &
 [ STEM < "formative" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_formative_a_1_rel",
            PHON.ONSET con ] ].

former_a1 := adj_intrans_le &
 [ STEM < "former" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_former_a_1_rel",
            PHON.ONSET con ] ].

former_n1 := n_no_cmpnd_le &
 [ STEM < "former" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_former_n_1_rel",
            PHON.ONSET con ] ].

formerly_adv1 := adv_int_vp_aux_le &
 [ STEM < "formerly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_former_a_1_rel",
            PHON.ONSET con ] ].

formerly_adv2 := adv_int_vp_post_le &
 [ STEM < "formerly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_former_a_1_rel",
            PHON.ONSET con ] ].

formidable_a1 := adj_intrans_le &
 [ STEM < "formidable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_formidable_a_1_rel",
            PHON.ONSET con ] ].

formula_n1 := n_intr_le &
 [ STEM < "formula" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_formula_n_1_rel",
            PHON.ONSET con ] ].

formulate_v1 := v_np_trans_le &
 [ STEM < "formulate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_formulate_v_1_rel",
            PHON.ONSET con ] ].

forsake_v1 := v_np_trans_le &
 [ STEM < "forsake" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_forsake_v_1_rel",
            PHON.ONSET con ] ].

forsaken_a1 := adj_intrans_le &
 [ STEM < "forsaken" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_forsaken_a_1_rel",
            PHON.ONSET con ] ].

forsee_v1 := v_np_trans_le &
 [ STEM < "forsee" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_foresee_v_1_rel",
            PHON.ONSET con ] ].

fort_n1 := n_intr_le &
 [ STEM < "fort" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fort_n_1_rel",
            PHON.ONSET con ] ].

forth_adv := pp_dir_le &
 [ STEM < "forth" >,
   SYNSEM [ LKEYS.KEYREL.PRED _forth_p_rel,
            PHON.ONSET con ] ].

forth_prtcl := pp_prtcl_le &
 [ STEM < "forth" >,
   SYNSEM [ LKEYS.KEYREL.PRED _forth_p_sel_rel,
            PHON.ONSET con ] ].

forthcoming_a1 := adj_intrans_le &
 [ STEM < "forthcoming" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_forthcoming_a_1_rel",
            PHON.ONSET con ] ].

forties_n1 := n_plur_xmod_le &
 [ STEM < "forties" >,
   SYNSEM [ LKEYS.KEYREL.CARG "40",
            PHON.ONSET con ] ].

fortieth := adj_bare_unspecified_ord_two_le &
 [ STEM < "fortieth" >,
   SYNSEM [ LKEYS.KEYREL.CARG "40",
            PHON.ONSET con ] ].

fortification_n1 := n_mass_count_ppof_le &
 [ STEM < "fortification" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fortification_n_of_rel",
            PHON.ONSET con ] ].

fortify_v1 := v_np_trans_le &
 [ STEM < "fortify" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fortify_v_1_rel",
            PHON.ONSET con ] ].

fortitude_n1 := n_mass_le &
 [ STEM < "fortitude" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fortitude_n_1_rel",
            PHON.ONSET con ] ].

fortnight_n1 := n_intr_temp_nd_le &
 [ STEM < "fortnight" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fortnight_n_1_rel",
            PHON.ONSET con ] ].

fortnightly_adv1 := adv_int_vp_post_le &
 [ STEM < "fortnightly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fortnight_a_1_rel",
            PHON.ONSET con ] ].

fortress_n1 := n_intr_le &
 [ STEM < "fortress" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fortress_n_1_rel",
            PHON.ONSET con ] ].

fortuitous_a1 := adj_intrans_le &
 [ STEM < "fortuitous" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fortuitous_a_1_rel",
            PHON.ONSET con ] ].

fortun_n1 := n_proper_le &
 [ STEM < "fortun" >,
   SYNSEM [ LKEYS.KEYREL.CARG "fortun",
            PHON.ONSET con ] ].

fortunate_a1 := adj_intrans_le &
 [ STEM < "fortunate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fortunate_a_1_rel",
            PHON.ONSET con ] ].

fortunately_adv1 := adv_int_vp_le &
 [ STEM < "fortunately" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fortunate_a_1_rel",
            PHON.ONSET con ] ].

fortundal_n1 := n_proper_le &
 [ STEM < "fortundal" >,
   SYNSEM [ LKEYS.KEYREL.CARG "fortundal",
            PHON.ONSET con ] ].

fortundalen_n1 := n_proper_le &
 [ STEM < "fortundalen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "fortundalen",
            PHON.ONSET con ] ].

fortundalselva_n1 := n_proper_le &
 [ STEM < "fortundalselva" >,
   SYNSEM [ LKEYS.KEYREL.CARG "fortundalselva",
            PHON.ONSET con ] ].

fortune_n1 := n_intr_le &
 [ STEM < "fortune" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fortune_n_1_rel",
            PHON.ONSET con ] ].

forty := adj_bare_unspecified_card_two_le &
 [ STEM < "forty" >,
   SYNSEM [ LKEYS.KEYREL.CARG "40",
            PHON.ONSET con ] ].

forty_w_comps := adj_complemented_unspecified_card_le &
 [ STEM < "forty" >,
   SYNSEM [ LKEYS.KEYREL.CARG "40",
            PHON.ONSET con ] ].

fortyish_approx := adj_approx_bare_unspecified_card_le &
 [ STEM < "fortyish" >,
   SYNSEM [ LKEYS.KEYREL.CARG "40",
            PHON.ONSET con ] ].

forward_adv := pp_le &
 [ STEM < "forward" >,
   SYNSEM [ LKEYS.KEYREL.PRED _forward_p_rel,
            PHON.ONSET con ] ].

forward_prtcl := pp_prtcl_le &
 [ STEM < "forward" >,
   SYNSEM [ LKEYS.KEYREL.PRED _forward_p_sel_rel,
            PHON.ONSET con ] ].

forward_v1 := v_np_trans_le &
 [ STEM < "forward" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_forward_v_1_rel",
            PHON.ONSET con ] ].

forward_v2 := v_ditrans_le &
 [ STEM < "forward" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_forward_v_1_rel",
            PHON.ONSET con ] ].

forwards_adv1 := adv_int_vp_post_le &
 [ STEM < "forwards" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_forwards_a_1_rel",
            PHON.ONSET con ] ].

foss := n_proper_le &
 [ STEM < "foss" >,
   SYNSEM [ LKEYS.KEYREL.CARG "foss",
            PHON.ONSET con ] ].

fossil_n1 := n_intr_le &
 [ STEM < "fossil" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fossil_n_1_rel",
            PHON.ONSET con ] ].

fossli := n_proper_le &
 [ STEM < "fossli" >,
   SYNSEM [ LKEYS.KEYREL.CARG "fossli",
            PHON.ONSET con ] ].

foster_a1 := adj_attr_intrans_le &
 [ STEM < "foster" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_foster_a_1_rel",
            PHON.ONSET con ] ].

foster_n1 := n_proper_le &
 [ STEM < "foster" >,
   SYNSEM [ LKEYS.KEYREL.CARG "foster",
            PHON.ONSET con ] ].

foster_v1 := v_np_trans_le &
 [ STEM < "foster" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_foster_v_1_rel",
            PHON.ONSET con ] ].

fots_n1 := n_proper_le &
 [ STEM < "fots" >,
   SYNSEM [ LKEYS.KEYREL.CARG "fots",
            PHON.ONSET con ] ].

foul_a1 := adj_intrans_le &
 [ STEM < "foul" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_foul_a_1_rel",
            PHON.ONSET con ] ].

found_v1 := v_np_trans_le &
 [ STEM < "found" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_found_v_1_rel",
            PHON.ONSET con ] ].

foundation_n1 := n_intr_le &
 [ STEM < "foundation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_foundation_n_1_rel",
            PHON.ONSET con ] ].

foundation_post_ttl := n_post_title_le &
 [ STEM < "foundation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_foundation_n_1_rel",
            PHON.ONSET con ] ].

founder_n1 := n_ppof_le &
 [ STEM < "founder" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_founder_n_of_rel",
            PHON.ONSET con ] ].

founder_ttl := n_title_le &
 [ STEM < "founder" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_founder_n_of_rel",
            PHON.ONSET con ] ].

founder_v1 := v_unacc_le &
 [ STEM < "founder" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_founder_v_1_rel",
            PHON.ONSET con ] ].

foundry_n1 := n_intr_le &
 [ STEM < "foundry" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_foundry_n_1_rel",
            PHON.ONSET con ] ].

fountain_n1 := n_intr_le &
 [ STEM < "fountain" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fountain_n_1_rel",
            PHON.ONSET con ] ].

four := adj_bare_unspecified_card_one_le &
 [ STEM < "four" >,
   SYNSEM [ LKEYS.KEYREL.CARG "4",
            PHON.ONSET con ] ].

four_c := adj_bare_unspecified_card_wcomps_one_le &
 [ STEM < "four" >,
   SYNSEM [ LKEYS.KEYREL.CARG "4",
            PHON.ONSET con ] ].

four_day := n_day_of_month_card_le &
 [ STEM < "four" >,
   SYNSEM [ LKEYS.KEYREL.CARG "4",
            PHON.ONSET con ] ].

four_day_num := n_day_of_month_card_le &
 [ STEM < "4" >,
   SYNSEM [ LKEYS.KEYREL.CARG "4",
            PHON.ONSET con ] ].

four_day_num_yofc := n_day_of_month_card_yofc_le &
 [ STEM < "4" >,
   SYNSEM [ LKEYS.KEYREL.CARG "4",
            PHON.ONSET con ] ].

four_day_yofc := n_day_of_month_card_yofc_le &
 [ STEM < "four" >,
   SYNSEM [ LKEYS.KEYREL.CARG "4",
            PHON.ONSET con ] ].

four_hour := n_hour_le &
 [ STEM < "four" >,
   SYNSEM [ LKEYS.KEYREL.CARG "4",
            PHON.ONSET con ] ].

four_hundreds_n1 := n_plur_xmod_le &
 [ STEM < "four", "hundreds" >,
   SYNSEM [ LKEYS.KEYREL.CARG "400",
            PHON.ONSET con ] ].

four_roman := adj_bare_unspecified_card_one_le &
 [ STEM < "IV" >,
   SYNSEM [ LKEYS.KEYREL.CARG "IV",
            PHON.ONSET con ] ].

four_side_n1 := n_proper_le &
 [ STEM < "four", "side" >,
   SYNSEM [ LKEYS.KEYREL.CARG "four_side",
            PHON.ONSET con ] ].

fourdigit_plur_n1 := n_plur_xmod_le &
 [ STEM < "fourdigitersatz", "'s" >,
   SYNSEM [ LKEYS.KEYREL.CARG "fourdigit_plur",
            PHON.ONSET onset ] ].

fourdigitordersatz := adj_bare_unspecified_ord_three_le &
 [ STEM < "fourdigitordersatz" >,
   SYNSEM [ LKEYS.KEYREL [ CARG "dig4ersatz",
                             PRED const_rel ],
            PHON.ONSET onset ] ].

fourish := n_approx_hour_le &
 [ STEM < "fourish" >,
   SYNSEM [ LKEYS.KEYREL.CARG "4",
            PHON.ONSET con ] ].

fourscore := adj_bare_unspecified_card_two_le &
 [ STEM < "fourscore" >,
   SYNSEM [ LKEYS.KEYREL.CARG "80",
            PHON.ONSET con ] ].

fourteen := adj_bare_unspecified_card_two_le &
 [ STEM < "fourteen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "14",
            PHON.ONSET con ] ].

fourteen_day := n_day_of_month_card_le &
 [ STEM < "fourteen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "14",
            PHON.ONSET con ] ].

fourteen_day_num := n_day_of_month_card_le &
 [ STEM < "14" >,
   SYNSEM [ LKEYS.KEYREL.CARG "14",
            PHON.ONSET con ] ].

fourteen_day_num_yofc := n_day_of_month_card_yofc_le &
 [ STEM < "14" >,
   SYNSEM [ LKEYS.KEYREL.CARG "14",
            PHON.ONSET con ] ].

fourteen_day_yofc := n_day_of_month_card_yofc_le &
 [ STEM < "fourteen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "14",
            PHON.ONSET con ] ].

fourteenth := adj_bare_unspecified_ord_two_le &
 [ STEM < "fourteenth" >,
   SYNSEM [ LKEYS.KEYREL.CARG "14",
            PHON.ONSET con ] ].

fourteenth_day := n_day_of_month_le &
 [ STEM < "fourteenth" >,
   SYNSEM [ LKEYS.KEYREL.CARG "14",
            PHON.ONSET con ] ].

fourteenth_day_num := n_day_of_month_le &
 [ STEM < "14th" >,
   SYNSEM [ LKEYS.KEYREL.CARG "14",
            PHON.ONSET con ] ].

fourth := adj_bare_unspecified_ord_one_le &
 [ STEM < "fourth" >,
   SYNSEM [ LKEYS.KEYREL.CARG "4",
            PHON.ONSET con ] ].

fourth_day := n_day_of_month_le &
 [ STEM < "fourth" >,
   SYNSEM [ LKEYS.KEYREL.CARG "4",
            PHON.ONSET con ] ].

fourth_day_num := n_day_of_month_le &
 [ STEM < "4th" >,
   SYNSEM [ LKEYS.KEYREL.CARG "4",
            PHON.ONSET con ] ].

fowl_n1 := n_mass_count_le &
 [ STEM < "fowl" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fowl_n_1_rel",
            PHON.ONSET con ] ].

fox_n1 := n_intr_le &
 [ STEM < "fox" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fox_n_1_rel",
            PHON.ONSET con ] ].

fraction_n1 := n_intr_le &
 [ STEM < "fraction" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fraction_n_1_rel",
            PHON.ONSET con ] ].

fractionersatz := adj_bare_unspecified_card_three_le &
 [ STEM < "fractionersatz" >,
   SYNSEM [ LKEYS.KEYREL.CARG "fractionersatz",
            PHON.ONSET onset ] ].

fracture_n1 := n_mass_count_le &
 [ STEM < "fracture" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fracture_n_1_rel",
            PHON.ONSET con ] ].

fracture_v1 := v_np_trans_le &
 [ STEM < "fracture" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fracture_v_1_rel",
            PHON.ONSET con ] ].

fragile_a1 := adj_intrans_le &
 [ STEM < "fragile" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fragile_a_1_rel",
            PHON.ONSET con ] ].

fragment_n1 := n_intr_le &
 [ STEM < "fragment" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fragment_n_1_rel",
            PHON.ONSET con ] ].

fragment_v1 := v_np*_trans_le &
 [ STEM < "fragment" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fragment_v_1_rel",
            PHON.ONSET con ] ].

fragmented_isect := adj_intrans_le &
 [ STEM < "fragmented" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fragmented_a_1_rel",
            PHON.ONSET con ] ].

fragrance_n1 := n_mass_count_le &
 [ STEM < "fragrance" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fragrance_n_1_rel",
            PHON.ONSET con ] ].

fragrant_a1 := adj_intrans_le &
 [ STEM < "fragrant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fragrant_a_1_rel",
            PHON.ONSET con ] ].

frame_n1 := n_intr_le &
 [ STEM < "frame" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_frame_n_1_rel",
            PHON.ONSET con ] ].

frame_v1 := v_np_trans_le &
 [ STEM < "frame" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_frame_v_1_rel",
            PHON.ONSET con ] ].

frame_v2 := v_np_as_le &
 [ STEM < "frame" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_frame_v_as_rel",
            PHON.ONSET con ] ].

framework_n1 := n_intr_le &
 [ STEM < "framework" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_framework_n_1_rel",
            PHON.ONSET con ] ].

franc_n1 := n_intr_le &
 [ STEM < "franc" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_franc_n_1_rel",
            PHON.ONSET con ] ].

france_n1 := n_proper_le &
 [ STEM < "france" >,
   SYNSEM [ LKEYS.KEYREL.CARG "france",
            PHON.ONSET con ] ].

francis_n1 := n_proper_le &
 [ STEM < "francis" >,
   SYNSEM [ LKEYS.KEYREL.CARG "francis",
            PHON.ONSET con ] ].

franciscan_a1 := adj_intrans_le &
 [ STEM < "franciscan" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_franciscan_a_1_rel",
            PHON.ONSET con ] ].

franciscan_n1 := n_intr_le &
 [ STEM < "franciscan" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_franciscan_n_1_rel",
            PHON.ONSET con ] ].

francois_n1 := n_proper_le &
 [ STEM < "francois" >,
   SYNSEM [ LKEYS.KEYREL.CARG "francois",
            PHON.ONSET con ] ].

frank_a1 := adj_intrans_le &
 [ STEM < "frank" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_frank_a_1_rel",
            PHON.ONSET con ] ].

frank_money_n1 := n_intr_le &
 [ STEM < "frank" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_franc_n_1_rel",
            PHON.ONSET con ] ].

frankfurt_n1 := n_proper_city_le &
 [ STEM < "frankfurt" >,
   SYNSEM [ LKEYS.KEYREL.CARG "frankfurt",
            PHON.ONSET con ] ].

frankly_adv1 := adv_int_vp_le &
 [ STEM < "frankly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_frank_a_1_rel",
            PHON.ONSET con ] ].

frankly_disc_adv_post := adv_s_post_word_nospec_le &
 [ STEM < "frankly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_frank_a_1_rel",
            PHON.ONSET con ] ].

frankly_disc_adv_pre := adv_s_pre_word_root_le &
 [ STEM < "frankly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_frank_a_1_rel",
            PHON.ONSET con ] ].

frantic_a1 := adj_intrans_le &
 [ STEM < "frantic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_frantic_a_1_rel",
            PHON.ONSET con ] ].

frau_ttl := n_title_unsp_le &
 [ STEM < "frau" >,
   SYNSEM [ LKEYS.KEYREL.CARG "frau",
            PHON.ONSET con ] ].

freak_n1 := n_intr_le &
 [ STEM < "freak" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_freak_n_1_rel",
            PHON.ONSET con ] ].

fredrik_n1 := n_proper_le &
 [ STEM < "fredrik" >,
   SYNSEM [ LKEYS.KEYREL.CARG "fredrik",
            PHON.ONSET con ] ].

free_a1 := adj_intrans_le &
 [ STEM < "free" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_free_a_1_rel",
            PHON.ONSET con ] ].

free_a2 := adj_reg_equi_le &
 [ STEM < "free" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_free_a_1_rel",
            PHON.ONSET con ] ].

free_falling_a1 := adj_intrans_le &
 [ STEM < "free-", "falling" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_free+falling_a_1_rel",
            PHON.ONSET con ] ].

free_from_v1 := v_empty_prep_trans_le &
 [ STEM < "free" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _from_p_sel_rel,
                    KEYREL.PRED "_free_v_from_rel" ],
            PHON.ONSET con ] ].

free_of_a1 := adj_trans_oblig_le &
 [ STEM < "free" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_free_a_of_rel" ],
            PHON.ONSET con ] ].

free_v1 := v_empty_prep*_trans_le &
 [ STEM < "free" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_free_v_of_rel" ],
            PHON.ONSET con ] ].

free_v2 := v_particle_np_le &
 [ STEM < "free" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_free_v_up_rel" ],
            PHON.ONSET con ] ].

freedom_n1 := n_mass_count_le &
 [ STEM < "freedom" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_freedom_n_1_rel",
            PHON.ONSET con ] ].

freefall_n1 := n_mass_le &
 [ STEM < "freefall" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_freefall_n_1_rel",
            PHON.ONSET con ] ].

freehold_n1 := n_intr_le &
 [ STEM < "freehold" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_freehold_n_1_rel",
            PHON.ONSET con ] ].

freely := adv_int_vp_le &
 [ STEM < "freely" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_free_a_of_rel",
            PHON.ONSET con ] ].

freeway_n1 := n_intr_le &
 [ STEM < "freeway" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_freeway_n_1_rel",
            PHON.ONSET con ] ].

freeze_dried_a1 := adj_intrans_le &
 [ STEM < "freeze", "dried" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_freeze+dried_a_1_rel",
            PHON.ONSET con ] ].

freeze_dried_a2 := adj_intrans_le &
 [ STEM < "freeze-", "dried" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_freeze+dried_a_1_rel",
            PHON.ONSET con ] ].

freeze_n1 := n_intr_le &
 [ STEM < "freeze" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_freeze_n_1_rel",
            PHON.ONSET con ] ].

freeze_up_v1 := v_particle_le &
 [ STEM < "freeze" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_freeze_v_up_rel" ],
            PHON.ONSET con ] ].

freeze_v1 := v_np_trans_noger_le &
 [ STEM < "freeze" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_freeze_v_cause_rel",
            PHON.ONSET con ] ].

freeze_v2 := v_unacc_le &
 [ STEM < "freeze" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_freeze_v_1_rel",
            PHON.ONSET con ] ].

freiburg_n1 := n_proper_city_le &
 [ STEM < "freiburg" >,
   SYNSEM [ LKEYS.KEYREL.CARG "freiburg",
            PHON.ONSET con ] ].

freight_n1 := n_mass_le &
 [ STEM < "freight" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_freight_n_1_rel",
            PHON.ONSET con ] ].

fremont_n1 := n_proper_city_le &
 [ STEM < "fremont" >,
   SYNSEM [ LKEYS.KEYREL.CARG "fremont",
            PHON.ONSET con ] ].

french_a1 := adj_intrans_le &
 [ STEM < "french" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_french_a_1_rel",
            PHON.ONSET con ] ].

french_n1 := n_proper_le &
 [ STEM < "french" >,
   SYNSEM [ LKEYS.KEYREL.CARG "french",
            PHON.ONSET con ] ].

frequency_n1 := n_mass_count_le &
 [ STEM < "frequency" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_frequency_n_1_rel",
            PHON.ONSET con ] ].

frequent_a1 := adj_intrans_le &
 [ STEM < "frequent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_frequent_a_1_rel",
            PHON.ONSET con ] ].

frequent_v1 := v_np_trans_le &
 [ STEM < "frequent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_frequent_v_1_rel",
            PHON.ONSET con ] ].

frequently_adv1 := adv_int_vp_le &
 [ STEM < "frequently" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_frequent_a_1_rel",
            PHON.ONSET con ] ].

fresh_a1 := adj_intrans_le &
 [ STEM < "fresh" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fresh_a_1_rel",
            PHON.ONSET con ] ].

freshen_up_v1 := v_particle_le &
 [ STEM < "freshen" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_freshen_v_up_rel" ],
            PHON.ONSET con ] ].

fresher := adj_comp_le &
 [ STEM < "fresher" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fresh_a_1_rel",
            PHON.ONSET con ] ].

freshest_a1 := adj_superl_le &
 [ STEM < "freshest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fresh_a_1_rel",
            PHON.ONSET con ] ].

freshly_adv1 := adv_int_vp_post_le &
 [ STEM < "freshly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fresh_a_1_rel",
            PHON.ONSET con ] ].

freshness_n1 := n_mass_le &
 [ STEM < "freshness" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_freshness_n_1_rel",
            PHON.ONSET con ] ].

freshwater_a1 := adj_intrans_le &
 [ STEM < "freshwater" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_freshwater_a_1_rel",
            PHON.ONSET con ] ].

fret_n1 := n_intr_le &
 [ STEM < "fret" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fret_n_1_rel",
            PHON.ONSET con ] ].

fret_v1 := v_cp_prop_non_trans_le &
 [ STEM < "fret" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fret_v_1_rel",
            PHON.ONSET con ] ].

freyburg_n1 := n_proper_city_le &
 [ STEM < "freyburg" >,
   SYNSEM [ LKEYS.KEYREL.CARG "freyburg",
            PHON.ONSET con ] ].

frfrancsign_n1 := n_numcomp_le &
 [ STEM < "ff" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_franc_n_1_rel",
            PHON.ONSET con ] ].

friction_n1 := n_mass_le &
 [ STEM < "friction" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_friction_n_1_rel",
            PHON.ONSET con ] ].

friday_n1 := n_day_of_week_le &
 [ STEM < "friday" >,
   SYNSEM [ LKEYS.KEYREL.CARG "fri",
            PHON.ONSET con ] ].

friday_n2 := n_day_of_week_le &
 [ STEM < "fri" >,
   SYNSEM [ LKEYS.KEYREL.CARG "fri",
            PHON.ONSET con ] ].

friday_n3 := n_day_of_week_le &
 [ STEM < "fri." >,
   SYNSEM [ LKEYS.KEYREL.CARG "fri",
            PHON.ONSET con ] ].

fridge_n1 := n_intr_le &
 [ STEM < "fridge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fridge_n_1_rel",
            PHON.ONSET con ] ].

friedrichshafen_n1 := n_proper_city_le &
 [ STEM < "friedrichshafen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "friedrichshafen",
            PHON.ONSET con ] ].

friend_n1 := n_intr_le &
 [ STEM < "friend" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_friend_n_1_rel",
            PHON.ONSET con ] ].

friendliness_n1 := n_mass_ppcomp_le &
 [ STEM < "friendliness" >,
   SYNSEM [ LKEYS [ --COMPKEY _towards_p_sel_rel,
                    KEYREL.PRED "_friendliness_n_to-towards_rel" ],
            PHON.ONSET con ] ].

friendliness_n2 := n_mass_ppcomp_oblig_le &
 [ STEM < "friendliness" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_friendliness_n_to-towards_rel" ],
            PHON.ONSET con ] ].

friendly_a1 := adj_intrans_le &
 [ STEM < "friendly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_friendly_a_1_rel",
            PHON.ONSET con ] ].

friendship_n1 := n_mass_le &
 [ STEM < "friendship" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_friendship_n_1_rel",
            PHON.ONSET con ] ].

fright_n1 := n_mass_le &
 [ STEM < "fright" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fright_n_1_rel",
            PHON.ONSET con ] ].

frighten_off_v1 := v_particle_np_le &
 [ STEM < "frighten" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_frighten_v_off_rel" ],
            PHON.ONSET con ] ].

frighten_v1 := v_np_trans_le &
 [ STEM < "frighten" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_frighten_v_1_rel",
            PHON.ONSET con ] ].

frighten_v2 := v_expl_it_subj_np_cp_le &
 [ STEM < "frighten" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_frighten_v_1_rel",
            PHON.ONSET con ] ].

frightening_isect := adj_intrans_le &
 [ STEM < "frightening" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_frightening_a_1_rel",
            PHON.ONSET con ] ].

frightful_a1 := adj_intrans_le &
 [ STEM < "frightful" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_frightful_a_1_rel",
            PHON.ONSET con ] ].

frigid_a1 := adj_intrans_le &
 [ STEM < "frigid" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_frigid_a_1_rel",
            PHON.ONSET con ] ].

frigid_a2 := adj_atrans_le &
 [ STEM < "frigid" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_frigid_a_1_rel",
            PHON.ONSET con ] ].

friken_n1 := n_proper_le &
 [ STEM < "friken" >,
   SYNSEM [ LKEYS.KEYREL.CARG "friken",
            PHON.ONSET con ] ].

frill_n1 := n_intr_le &
 [ STEM < "frill" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_frill_n_1_rel",
            PHON.ONSET con ] ].

fringe_n1 := n_intr_le &
 [ STEM < "fringe" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fringe_n_1_rel",
            PHON.ONSET con ] ].

fritter_away_v1 := v_particle_np_le &
 [ STEM < "fritter" >,
   SYNSEM [ LKEYS [ --COMPKEY _away_p_sel_rel,
                    KEYREL.PRED "_fritter_v_away_rel" ],
            PHON.ONSET con ] ].

fritzsche_n1 := n_proper_le &
 [ STEM < "fritzsche" >,
   SYNSEM [ LKEYS.KEYREL.CARG "fritzsche",
            PHON.ONSET con ] ].

frivolous_a1 := adj_intrans_le &
 [ STEM < "frivolous" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_frivolous_a_1_rel",
            PHON.ONSET con ] ].

frog_n1 := n_intr_le &
 [ STEM < "frog" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_frog_n_1_rel",
            PHON.ONSET con ] ].

frogner_n1 := n_proper_le &
 [ STEM < "frogner" >,
   SYNSEM [ LKEYS.KEYREL.CARG "frogner",
            PHON.ONSET con ] ].

frolic_n1 := n_mass_count_le &
 [ STEM < "frolic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_frolic_n_1_rel",
            PHON.ONSET con ] ].

frolic_v1 := v_unerg_le &
 [ STEM < "frolic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_frolic_v_1_rel",
            PHON.ONSET con ] ].

from := p_reg_le &
 [ STEM < "from" >,
   SYNSEM [ LKEYS.KEYREL.PRED _from_p_rel,
            PHON.ONSET con ] ].

from_c_prop := comp_inf_from_le &
 [ STEM < "from" >,
   SYNSEM.PHON.ONSET con ].

from_ppcomp := p_ppcomp_copred_le &
 [ STEM < "from" >,
   SYNSEM [ LKEYS.KEYREL.PRED _from_p_rel,
            PHON.ONSET con ] ].

from_prtcl := p_prtcl_le &
 [ STEM < "from" >,
   SYNSEM [ LKEYS.KEYREL.PRED _from_p_sel_rel,
            PHON.ONSET con ] ].

from_time_on := p_ditrans_le &
 [ STEM < "from" >,
   SYNSEM [ LKEYS [ --COMPKEY temp_abstr_rel,
                    --OCOMPKEY _on_p_sel_rel,
                    KEYREL.PRED _from_p_time-on_rel ],
            PHON.ONSET con ] ].

from_to_nbar := p_ditrans_from_to_nbar_le &
 [ STEM < "from" >,
   SYNSEM [ LKEYS.KEYREL.PRED _from_p_to-n_rel,
            PHON.ONSET con ] ].

from_to_nontemp := p_ditrans_from_to_le &
 [ STEM < "from" >,
   SYNSEM [ LKEYS [ --COMPKEY reg_nom_rel,
                    --OCOMPKEY _to_p_sel_rel,
                    KEYREL.PRED _from_p_to_rel ],
            PHON.ONSET con ] ].

from_to_temp := p_ditrans_from_to_le &
 [ STEM < "from" >,
   SYNSEM [ LKEYS [ --COMPKEY temp_abstr_rel,
                    --OCOMPKEY abstr_until_sel_rel,
                    KEYREL.PRED _from_p_to_rel ],
            PHON.ONSET con ] ].

front_n1 := n_intr_le &
 [ STEM < "front" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_front_n_1_rel",
            PHON.ONSET con ] ].

frost_v1 := v_np*_trans_le &
 [ STEM < "frost" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_frost_v_1_rel",
            PHON.ONSET con ] ].

frosted_flakes_n1 := n_proper_le &
 [ STEM < "frosted", "flakes" >,
   SYNSEM [ LKEYS.KEYREL.CARG "frosted_flakes",
            PHON.ONSET con ] ].

froth_n1 := n_mass_le &
 [ STEM < "froth" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_froth_n_1_rel",
            PHON.ONSET con ] ].

froth_v1 := v_unerg_le &
 [ STEM < "froth" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_froth_v_1_rel",
            PHON.ONSET con ] ].

frothy_adj := adj_intrans_le &
 [ STEM < "frothy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_frothy_a_1_rel",
            PHON.ONSET con ] ].

frown_at_v1 := v_empty_prep_intrans_le &
 [ STEM < "frown" >,
   SYNSEM [ LKEYS [ --COMPKEY _at_p_sel_rel,
                    KEYREL.PRED "_frown_v_at_rel" ],
            PHON.ONSET con ] ].

frown_n1 := n_intr_le &
 [ STEM < "frown" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_frown_n_1_rel",
            PHON.ONSET con ] ].

frown_on_v1 := v_empty_prep_intrans_le &
 [ STEM < "frown" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_frown_v_on_rel" ],
            PHON.ONSET con ] ].

frown_upon_v1 := v_empty_prep_intrans_le &
 [ STEM < "frown" >,
   SYNSEM [ LKEYS [ --COMPKEY _upon_p_sel_rel,
                    KEYREL.PRED "_frown_v_upon_rel" ],
            PHON.ONSET con ] ].

frown_v1 := v_unerg_le &
 [ STEM < "frown" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_frown_v_1_rel",
            PHON.ONSET con ] ].

frugal_a1 := adj_intrans_le &
 [ STEM < "frugal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_frugal_a_1_rel",
            PHON.ONSET con ] ].

frugally_a1 := adv_int_vp_le &
 [ STEM < "frugally" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_frugal_a_1_rel",
            PHON.ONSET con ] ].

fruit_n1 := n_mass_count_le &
 [ STEM < "fruit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fruit_n_1_rel",
            PHON.ONSET con ] ].

frustrate_v1 := v_np_trans_le &
 [ STEM < "frustrate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_frustrate_v_1_rel",
            PHON.ONSET con ] ].

frustrate_v2 := v_expl_it_subj_np_cp_le &
 [ STEM < "frustrate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_frustrate_v_1_rel",
            PHON.ONSET con ] ].

frustrated_a1 := adj_trans_le &
 [ STEM < "frustrated" >,
   SYNSEM [ LKEYS [ --COMPKEY _at_p_sel_rel,
                    KEYREL.PRED "_frustrated_a_at-by-with_rel" ],
            PHON.ONSET con ] ].

frustrated_a2 := adj_trans_oblig_le &
 [ STEM < "frustrated" >,
   SYNSEM [ LKEYS [ --COMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_frustrated_a_at-by-with_rel" ],
            PHON.ONSET con ] ].

frustrated_a3 := adj_trans_oblig_le &
 [ STEM < "frustrated" >,
   SYNSEM [ LKEYS [ --COMPKEY _by_p_sel_rel,
                    KEYREL.PRED "_frustrated_a_at-by-with_rel" ],
            PHON.ONSET con ] ].

frustrating_a1 := adj_intrans_le &
 [ STEM < "frustrating" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_frustrating_a_1_rel",
            PHON.ONSET con ] ].

frustration_n1 := n_mass_count_le &
 [ STEM < "frustration" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_frustration_n_1_rel",
            PHON.ONSET con ] ].

fry_up_v1 := v_particle_le &
 [ STEM < "fry" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_fry_v_up_rel" ],
            PHON.ONSET con ] ].

fry_v1 := v_np_trans_noger_le &
 [ STEM < "fry" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fry_v_cause_rel",
            PHON.ONSET con ] ].

fry_v2 := v_unacc_le &
 [ STEM < "fry" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fry_v_1_rel",
            PHON.ONSET con ] ].

frys_n1 := n_proper_le &
 [ STEM < "fry's" >,
   SYNSEM [ LKEYS.KEYREL.CARG "frys",
            PHON.ONSET con ] ].

frys_n2 := n_proper_le &
 [ STEM < "fry", "'s" >,
   SYNSEM [ LKEYS.KEYREL.CARG "frys",
            PHON.ONSET con ] ].

fto_n1 := n_mass_le &
 [ STEM < "fto" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fto_n_1_rel",
            PHON.ONSET con ] ].

fu_n1 := n_proper_le &
 [ STEM < "fu" >,
   SYNSEM [ LKEYS.KEYREL.CARG "fu",
            PHON.ONSET con ] ].

fuck_around_v1 := v_particle_le &
 [ STEM < "fuck" >,
   SYNSEM [ LKEYS [ --COMPKEY _around_p_sel_rel,
                    KEYREL.PRED "_fuck_v_around_rel" ],
            PHON.ONSET con ] ].

fuck_excl_post := adv_s_post_word_nospec_le &
 [ STEM < "fuck" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fuck_a_1_rel",
            PHON.ONSET con ] ].

fuck_excl_pre := adv_s_pre_word_root_le &
 [ STEM < "fuck" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fuck_a_1_rel",
            PHON.ONSET con ] ].

fuck_n1 := n_intr_le &
 [ STEM < "fuck" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fuck_n_1_rel",
            PHON.ONSET con ] ].

fuck_off_v1 := v_particle_le &
 [ STEM < "fuck" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_fuck_v_off_rel" ],
            PHON.ONSET con ] ].

fuck_over_v1 := v_np_particle_only_le &
 [ STEM < "fuck" >,
   SYNSEM [ LKEYS [ --COMPKEY _over_p_sel_rel,
                    KEYREL.PRED "_fuck_v_over_rel" ],
            PHON.ONSET con ] ].

fuck_up_v1 := v_particle_le &
 [ STEM < "fuck" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_fuck_v_up_rel" ],
            PHON.ONSET con ] ].

fuck_up_v2 := v_particle_np_le &
 [ STEM < "fuck" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_fuck_v_up_rel" ],
            PHON.ONSET con ] ].

fuck_v1 := v_np*_trans_le &
 [ STEM < "fuck" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fuck_v_1_rel",
            PHON.ONSET con ] ].

fucking_deg := adv_degree_spec_v_le &
 [ STEM < "fucking" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fucking_x_deg_rel",
            PHON.ONSET con ] ].

fuel_n := n_mass_count_le &
 [ STEM < "fuel" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fuel_n_1_rel",
            PHON.ONSET con ] ].

fuel_v1 := v_np_trans_le &
 [ STEM < "fuel" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fuel_v_1_rel",
            PHON.ONSET con ] ].

fuerth_nd := n_proper_city_le &
 [ STEM < "fuerth" >,
   SYNSEM [ LKEYS.KEYREL.CARG "fuerth",
            PHON.ONSET con ] ].

fujiyama_n1 := n_proper_le &
 [ STEM < "fujiyama" >,
   SYNSEM [ LKEYS.KEYREL.CARG "fujiyama",
            PHON.ONSET con ] ].

fulda_n1 := n_proper_city_le &
 [ STEM < "fulda" >,
   SYNSEM [ LKEYS.KEYREL.CARG "fulda",
            PHON.ONSET con ] ].

fulfill_v1 := v_np_trans_le &
 [ STEM < "fulfill" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fulfil_v_1_rel",
            PHON.ONSET con ] ].

fulfillment_n1 := n_mass_count_ppof_le &
 [ STEM < "fulfillment" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fulfillment_n_of_rel",
            PHON.ONSET con ] ].

fuli_n1 := n_proper_le &
 [ STEM < "fuli" >,
   SYNSEM [ LKEYS.KEYREL.CARG "fuli",
            PHON.ONSET con ] ].

full-grown_a1 := adj_intrans_le &
 [ STEM < "full-", "grown" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_full+grown_a_1_rel",
            PHON.ONSET con ] ].

full-grown_a2 := adj_intrans_le &
 [ STEM < "full", "grown" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_full+grown_a_1_rel",
            PHON.ONSET con ] ].

full-time_a1 := adj_intrans_le &
 [ STEM < "full", "time" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_full+time_a_1_rel",
            PHON.ONSET con ] ].

full_a1 := adj_trans_le &
 [ STEM < "full" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_full_a_of_rel" ],
            PHON.ONSET con ] ].

full_up_isect := adj_intrans_le &
 [ STEM < "full", "up" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_full+up_a_1_rel",
            PHON.ONSET con ] ].

fully_adv1 := adv_int_vp_le &
 [ STEM < "fully" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_full_a_1_rel",
            PHON.ONSET con ] ].

fumble_around_v1 := v_particle_le &
 [ STEM < "fumble" >,
   SYNSEM [ LKEYS [ --COMPKEY _around_p_sel_rel,
                    KEYREL.PRED "_fumble_v_around_rel" ],
            PHON.ONSET con ] ].

fumble_for_v1 := v_empty_prep_intrans_le &
 [ STEM < "fumble" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_fumble_v_for_rel" ],
            PHON.ONSET con ] ].

fumble_n1 := n_intr_le &
 [ STEM < "fumble" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fumble_n_1_rel",
            PHON.ONSET con ] ].

fumble_v1 := v_np*_trans_le &
 [ STEM < "fumble" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fumble_v_1_rel",
            PHON.ONSET con ] ].

fun_a1 := adj_trans_le &
 [ STEM < "fun" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_fun_a_for_rel" ],
            PHON.ONSET con ] ].

fun_a2 := adj_reg_atrans_le &
 [ STEM < "fun" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fun_a_for_rel",
            PHON.ONSET con ] ].

fun_n1 := n_mass_le &
 [ STEM < "fun" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fun_n_1_rel",
            PHON.ONSET con ] ].

function_as_v1 := v_empty_prep_intrans_le &
 [ STEM < "function" >,
   SYNSEM [ LKEYS [ --COMPKEY _as_p_sel_rel,
                    KEYREL.PRED "_function_v_as_rel" ],
            PHON.ONSET con ] ].

function_n1 := n_mass_count_le &
 [ STEM < "function" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_function_n_1_rel",
            PHON.ONSET con ] ].

function_v1 := v_unerg_le &
 [ STEM < "function" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_function_v_1_rel",
            PHON.ONSET con ] ].

functional_a1 := adj_intrans_le &
 [ STEM < "functional" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_functional_a_1_rel",
            PHON.ONSET con ] ].

functionality_n1 := n_mass_le &
 [ STEM < "functionality" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_functionality_n_1_rel",
            PHON.ONSET con ] ].

functionally_adv1 := adv_int_vp_post_le &
 [ STEM < "functionally" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_functional_a_1_rel",
            PHON.ONSET con ] ].

fund_n1 := n_intr_le &
 [ STEM < "fund" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fund_n_1_rel",
            PHON.ONSET con ] ].

fund_v1 := v_np_trans_le &
 [ STEM < "fund" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fund_v_1_rel",
            PHON.ONSET con ] ].

fundamental_a1 := adj_intrans_le &
 [ STEM < "fundamental" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fundamental_a_1_rel",
            PHON.ONSET con ] ].

fundamental_n1 := n_intr_le &
 [ STEM < "fundamental" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fundamental_n_1_rel",
            PHON.ONSET con ] ].

funding_n1 := n_ppof_le &
 [ STEM < "funding" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_funding_n_of_rel",
            PHON.ONSET con ] ].

funereal_a1 := adj_intrans_le &
 [ STEM < "funereal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_funereal_a_1_rel",
            PHON.ONSET con ] ].

fungus_n1 := n_mass_count_le &
 [ STEM < "fungus" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fungus_n_1_rel",
            PHON.ONSET con ] ].

funicular_n1 := n_intr_le &
 [ STEM < "funicular" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_funicular_n_1_rel",
            PHON.ONSET con ] ].

funky_a1 := adj_intrans_le &
 [ STEM < "funky" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_funky_a_1_rel",
            PHON.ONSET con ] ].

funnier := adj_comp_le &
 [ STEM < "funnier" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_funny_a_1_rel",
            PHON.ONSET con ] ].

funniest_a1 := adj_superl_le &
 [ STEM < "funniest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_funny_a_1_rel",
            PHON.ONSET con ] ].

funny_a1 := adj_intrans_le &
 [ STEM < "funny" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_funny_a_1_rel",
            PHON.ONSET con ] ].

fur_clad_a1 := adj_intrans_le &
 [ STEM < "fur-", "clad" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fur-clad_a_1_rel",
            PHON.ONSET con ] ].

fur_n1 := n_mass_count_le &
 [ STEM < "fur" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fur_n_1_rel",
            PHON.ONSET con ] ].

furious_a1 := adj_intrans_le &
 [ STEM < "furious" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_furious_a_1_rel",
            PHON.ONSET con ] ].

furl_n1 := n_intr_le &
 [ STEM < "furl" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_furl_n_1_rel",
            PHON.ONSET con ] ].

furl_v1 := v_np_trans_noger_le &
 [ STEM < "furl" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_furl_v_cause_rel",
            PHON.ONSET con ] ].

furl_v2 := v_unacc_le &
 [ STEM < "furl" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_furl_v_1_rel",
            PHON.ONSET con ] ].

furnish_v1 := v_to*_trans_le &
 [ STEM < "furnish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_furnish_v_to_rel",
            PHON.ONSET con ] ].

furnish_v2 := v_empty_prep_trans_le &
 [ STEM < "furnish" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_furnish_v_with_rel" ],
            PHON.ONSET con ] ].

furniture_n1 := n_mass_le &
 [ STEM < "furniture" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_furniture_n_1_rel",
            PHON.ONSET con ] ].

furrow_n1 := n_intr_le &
 [ STEM < "furrow" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_furrow_n_1_rel",
            PHON.ONSET con ] ].

furrow_v1 := v_np_trans_le &
 [ STEM < "furrow" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_furrow_v_1_rel",
            PHON.ONSET con ] ].

further_a1 := adj_attr_intrans_le &
 [ STEM < "further" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_further_a_1_rel",
            PHON.ONSET con ] ].

further_deg := adv_degree_spec_m_le &
 [ STEM < "further" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_further_x_deg_rel",
            PHON.ONSET con ] ].

further_p1 := pp_dir_le &
 [ STEM < "further" >,
   SYNSEM [ LKEYS.KEYREL.PRED _further_p_rel,
            PHON.ONSET con ] ].

further_v1 := v_np_trans_le &
 [ STEM < "further" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_further_v_1_rel",
            PHON.ONSET con ] ].

further_v2 := v_expl_it_subj_np_cp_le &
 [ STEM < "further" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_further_v_1_rel",
            PHON.ONSET con ] ].

furthermore_adv1 := adv_int_vp_le &
 [ STEM < "furthermore" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_furthermore_a_1_rel",
            PHON.ONSET con ] ].

furthermore_root_post := adv_s_post_word_nospec_le &
 [ STEM < "furthermore" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_furthermore_a_1_rel",
            PHON.ONSET con ] ].

furthermore_root_pre := adv_s_pre_word_root_le &
 [ STEM < "furthermore" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_furthermore_a_1_rel",
            PHON.ONSET con ] ].

furthest_a1 := adj_superl_le &
 [ STEM < "furthest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_further_a_1_rel",
            PHON.ONSET con ] ].

furui_n1 := n_proper_le &
 [ STEM < "furui" >,
   SYNSEM [ LKEYS.KEYREL.CARG "furui",
            PHON.ONSET con ] ].

fuselage_n1 := n_intr_le &
 [ STEM < "fuselage" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fuselage_n_1_rel",
            PHON.ONSET con ] ].

fusion_n1 := n_mass_count_le &
 [ STEM < "fusion" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fusion_n_1_rel",
            PHON.ONSET con ] ].

future_a1 := adj_intrans_le &
 [ STEM < "future" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_future_a_1_rel",
            PHON.ONSET con ] ].

future_n1 := n_no_cmpnd_le &
 [ STEM < "future" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_future_n_1_rel",
            PHON.ONSET con ] ].

fuxi_n1 := n_proper_le &
 [ STEM < "fuxi" >,
   SYNSEM [ LKEYS.KEYREL.CARG "fuxi",
            PHON.ONSET con ] ].

fuyou_n1 := n_proper_le &
 [ STEM < "fuyou" >,
   SYNSEM [ LKEYS.KEYREL.CARG "fuyou",
            PHON.ONSET con ] ].

fuzhou_n1 := n_proper_le &
 [ STEM < "fuzhou" >,
   SYNSEM [ LKEYS.KEYREL.CARG "fuzhou",
            PHON.ONSET con ] ].

fuzzy_a1 := adj_intrans_le &
 [ STEM < "fuzzy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fuzzy_a_1_rel",
            PHON.ONSET con ] ].

fv_ttl := n_title_le &
 [ STEM < "fv" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fv_n_1_rel",
            PHON.ONSET con ] ].

fv_ttl_2 := n_title_le &
 [ STEM < "fv." >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fv_n_1_rel",
            PHON.ONSET con ] ].

fyi_adv := adv_int_vp_le &
 [ STEM < "fyi" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fyi_a_1_rel",
            PHON.ONSET con ] ].

fÃ¥bergstÃ¸ls := n_proper_le &
 [ STEM < "fÃ¥bergstÃ¸ls" >,
   SYNSEM [ LKEYS.KEYREL.CARG "fÃ¥bergstÃ¸ls",
            PHON.ONSET con ] ].

fÃ¥bergstÃ¸ls_grandane := n_proper_le &
 [ STEM < "fÃ¥bergstÃ¸ls-", "grandane" >,
   SYNSEM [ LKEYS.KEYREL.CARG "fÃ¥bergstÃ¸ls_grandane",
            PHON.ONSET con ] ].

fÃ¦rÃ¸yar := n_proper_le &
 [ STEM < "fÃ¦rÃ¸yar" >,
   SYNSEM [ LKEYS.KEYREL.CARG "fÃ¦rÃ¸yar",
            PHON.ONSET con ] ].

fÃ¸rde := n_proper_le &
 [ STEM < "fÃ¸rde" >,
   SYNSEM [ LKEYS.KEYREL.CARG "fÃ¸rde",
            PHON.ONSET con ] ].

g_n1 := n_proper_le &
 [ STEM < "g" >,
   SYNSEM [ LKEYS.KEYREL.CARG "g",
            PHON.ONSET con ] ].

g_np1 := n_proper_le &
 [ STEM < "_g" >,
   SYNSEM [ LKEYS.KEYREL.CARG "g",
            PHON.ONSET con ] ].

g_period_np1 := n_proper_le &
 [ STEM < "g." >,
   SYNSEM [ LKEYS.KEYREL.CARG "g",
            PHON.ONSET con ] ].

g_period_np2 := n_proper_le &
 [ STEM < "_g." >,
   SYNSEM [ LKEYS.KEYREL.CARG "g",
            PHON.ONSET con ] ].

gabbro_n1 := n_mass_le &
 [ STEM < "gabbro" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gabbro_n_1_rel",
            PHON.ONSET con ] ].

gadget_n1 := n_intr_le &
 [ STEM < "gadget" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gadget_n_1_rel",
            PHON.ONSET con ] ].

gaelic_n1 := n_proper_le &
 [ STEM < "gaelic" >,
   SYNSEM [ LKEYS.KEYREL.CARG "gaelic",
            PHON.ONSET con ] ].

gaff_n1 := n_intr_le &
 [ STEM < "gaff" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gaff_n_1_rel",
            PHON.ONSET con ] ].

gain_n1 := n_mass_count_le &
 [ STEM < "gain" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gain_n_1_rel",
            PHON.ONSET con ] ].

gain_on_v1 := v_empty_prep_intrans_le &
 [ STEM < "gain" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_gain_v_on_rel" ],
            PHON.ONSET con ] ].

gain_v1 := v_np*_trans_le &
 [ STEM < "gain" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gain_v_1_rel",
            PHON.ONSET con ] ].

galaxy_n1 := n_intr_le &
 [ STEM < "galaxy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_galaxy_n_1_rel",
            PHON.ONSET con ] ].

galdane := n_proper_pl_le &
 [ STEM < "galdane" >,
   SYNSEM [ LKEYS.KEYREL.CARG "galdane",
            PHON.ONSET con ] ].

galdanevegen := n_proper_le &
 [ STEM < "galdanevegen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "galdanevegen",
            PHON.ONSET con ] ].

galdanevegen_trail := n_proper_le &
 [ STEM < "galdanevegen", "trail" >,
   SYNSEM [ LKEYS.KEYREL.CARG "galdanevegen_trail",
            PHON.ONSET con ] ].

galdeberget_n1 := n_proper_le &
 [ STEM < "galdeberget" >,
   SYNSEM [ LKEYS.KEYREL.CARG "galdeberget",
            PHON.ONSET con ] ].

galdebergstjern_n1 := n_proper_le &
 [ STEM < "galdebergstjern" >,
   SYNSEM [ LKEYS.KEYREL.CARG "galdebergstjern",
            PHON.ONSET con ] ].

galdhopiggen := n_proper_le &
 [ STEM < "galdhopiggen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "galdhopiggen",
            PHON.ONSET con ] ].

galdhÃ¸pigg_n1 := n_proper_le &
 [ STEM < "galdhÃ¸pigg" >,
   SYNSEM [ LKEYS.KEYREL.CARG "galdhÃ¸pigg",
            PHON.ONSET con ] ].

galdhÃ¸piggen := n_proper_le &
 [ STEM < "galdhÃ¸piggen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "galdhÃ¸piggen",
            PHON.ONSET con ] ].

galdhÃ¸piggmassivet_n1 := n_proper_le &
 [ STEM < "galdhÃ¸piggmassivet" >,
   SYNSEM [ LKEYS.KEYREL.CARG "galdhÃ¸piggmassivet",
            PHON.ONSET con ] ].

gale_n1 := n_intr_le &
 [ STEM < "gale" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gale_n_1_rel",
            PHON.ONSET con ] ].

galerie-am-stift_n1 := n_proper_le &
 [ STEM < "galerie", "am", "stift" >,
   SYNSEM [ LKEYS.KEYREL.CARG "galerie-am-stift",
            PHON.ONSET con ] ].

galerie-stift_n1 := n_proper_le &
 [ STEM < "galerie", "stift" >,
   SYNSEM [ LKEYS.KEYREL.CARG "galerie-stift",
            PHON.ONSET con ] ].

galilee_n1 := n_proper_le &
 [ STEM < "galilee" >,
   SYNSEM [ LKEYS.KEYREL.CARG "galilee",
            PHON.ONSET con ] ].

gallery_n1 := n_ppof_le &
 [ STEM < "gallery" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gallery_n_of_rel",
            PHON.ONSET con ] ].

galley_n1 := n_intr_le &
 [ STEM < "galley" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_galley_n_1_rel",
            PHON.ONSET con ] ].

gallon_abb_n1 := n_meas_le &
 [ STEM < "gal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gallon_n_1_rel",
            PHON.ONSET con ] ].

gallon_abb_n2 := n_meas_le &
 [ STEM < "gal." >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gallon_n_1_rel",
            PHON.ONSET con ] ].

gallon_n1 := n_meas_le &
 [ STEM < "gallon" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gallon_n_1_rel",
            PHON.ONSET con ] ].

gallop_n1 := n_intr_le &
 [ STEM < "gallop" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gallop_n_1_rel",
            PHON.ONSET con ] ].

gallop_v1 := v_np*_trans_le &
 [ STEM < "gallop" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gallop_v_1_rel",
            PHON.ONSET con ] ].

galloping_gourmet_n1 := n_proper_le &
 [ STEM < "galloping", "gourmet" >,
   SYNSEM [ LKEYS.KEYREL.CARG "galloping_gourmet",
            PHON.ONSET con ] ].

gallows_n1 := n_plur_le &
 [ STEM < "gallow" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gallows_n_1_rel",
            PHON.ONSET con ] ].

gallup_n1 := n_proper_city_le &
 [ STEM < "gallup" >,
   SYNSEM [ LKEYS.KEYREL.CARG "gallup",
            PHON.ONSET con ] ].

galore_a1 := adj_pred_intrans_le &
 [ STEM < "galore" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_galore_a_1_rel",
            PHON.ONSET con ] ].

gamalseter := n_proper_le &
 [ STEM < "gamalseter" >,
   SYNSEM [ LKEYS.KEYREL.CARG "gamalseter",
            PHON.ONSET con ] ].

gamble_away_v1 := v_particle_np_le &
 [ STEM < "gamble" >,
   SYNSEM [ LKEYS [ --COMPKEY _away_p_sel_rel,
                    KEYREL.PRED "_gamble_v_away_rel" ],
            PHON.ONSET con ] ].

gamble_n1 := n_intr_le &
 [ STEM < "gamble" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gamble_n_1_rel",
            PHON.ONSET con ] ].

gamble_on_v1 := v_empty_prep_trans*_le &
 [ STEM < "gamble" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_gamble_v_on_rel" ],
            PHON.ONSET con ] ].

gamble_v1 := v_unerg_le &
 [ STEM < "gamble" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gamble_v_1_rel",
            PHON.ONSET con ] ].

gambler_n1 := n_intr_le &
 [ STEM < "gambler" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gambler_n_1_rel",
            PHON.ONSET con ] ].

game_n1 := n_intr_le &
 [ STEM < "game" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_game_n_1_rel",
            PHON.ONSET con ] ].

game_n2 := n_mass_le &
 [ STEM < "game" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_game_n_1_rel",
            PHON.ONSET con ] ].

gameboy_n1 := n_intr_le &
 [ STEM < "gameboy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gameboy_n_1_rel",
            PHON.ONSET con ] ].

gamecock_n1 := n_intr_le &
 [ STEM < "gamecock" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gamecock_n_1_rel",
            PHON.ONSET con ] ].

gamester_n1 := n_intr_le &
 [ STEM < "gamester" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gamester_n_1_rel",
            PHON.ONSET con ] ].

gammarid_n1 := n_intr_le &
 [ STEM < "gammarid" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gammarid_n_1_rel",
            PHON.ONSET con ] ].

gamut_n1 := n_intr_sg_le &
 [ STEM < "gamut" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gamut_n_1_rel",
            PHON.ONSET con ] ].

gang_n1 := n_ppof_le &
 [ STEM < "gang" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gang_n_of_rel",
            PHON.ONSET con ] ].

ganglium_n1 := n_intr_le &
 [ STEM < "ganglium" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ganglium_n_1_rel",
            PHON.ONSET con ] ].

gaolan_n1 := n_proper_le &
 [ STEM < "gaolan" >,
   SYNSEM [ LKEYS.KEYREL.CARG "gaolan",
            PHON.ONSET con ] ].

gaoqiao_n1 := n_proper_le &
 [ STEM < "gaoqiao" >,
   SYNSEM [ LKEYS.KEYREL.CARG "gaoqiao",
            PHON.ONSET con ] ].

gap_n1 := n_intr_le &
 [ STEM < "gap" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gap_n_1_rel",
            PHON.ONSET con ] ].

garage_n1 := n_intr_le &
 [ STEM < "garage" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_garage_n_1_rel",
            PHON.ONSET con ] ].

garbage_n1 := n_mass_le &
 [ STEM < "garbage" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_garbage_n_1_rel",
            PHON.ONSET con ] ].

garbled_a1 := adj_intrans_le &
 [ STEM < "garbled" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_garbled_a_1_rel",
            PHON.ONSET con ] ].

garcia_n1 := n_proper_le &
 [ STEM < "garcia" >,
   SYNSEM [ LKEYS.KEYREL.CARG "garcia",
            PHON.ONSET con ] ].

garden_n1 := n_intr_le &
 [ STEM < "garden" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_garden_n_1_rel",
            PHON.ONSET con ] ].

garden_post_ttl := n_post_title_le &
 [ STEM < "garden" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_garden_n_1_rel",
            PHON.ONSET con ] ].

gardening_n1 := n_intr_le &
 [ STEM < "gardening" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gardening_n_1_rel",
            PHON.ONSET con ] ].

gardermoen := n_proper_le &
 [ STEM < "gardermoen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "gardermoen",
            PHON.ONSET con ] ].

gardmoen := n_proper_le &
 [ STEM < "gardmoen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "gardmoen",
            PHON.ONSET con ] ].

garfield_n1 := n_proper_le &
 [ STEM < "garfield" >,
   SYNSEM [ LKEYS.KEYREL.CARG "garfield",
            PHON.ONSET con ] ].

garment_n1 := n_intr_le &
 [ STEM < "garment" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_garment_n_1_rel",
            PHON.ONSET con ] ].

garrison_n1 := n_intr_le &
 [ STEM < "garrison" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_garrison_n_1_rel",
            PHON.ONSET con ] ].

garrison_post_ttl := n_post_title_le &
 [ STEM < "garrison" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_garrison_n_1_rel",
            PHON.ONSET con ] ].

garrison_v1 := v_np*_trans_le &
 [ STEM < "garrison" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_garrison_v_1_rel",
            PHON.ONSET con ] ].

garvagh := n_proper_le &
 [ STEM < "garvagh" >,
   SYNSEM [ LKEYS.KEYREL.CARG "garvagh",
            PHON.ONSET con ] ].

gas_n := n_mass_count_le &
 [ STEM < "gas" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gas_n_1_rel",
            PHON.ONSET con ] ].

gas_up_v1 := v_particle_np_le &
 [ STEM < "gas" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_gas_v_up_rel" ],
            PHON.ONSET con ] ].

gas_up_v2 := v_particle_le &
 [ STEM < "gas" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_gas_v_up_rel" ],
            PHON.ONSET con ] ].

gas_v1 := v_np_trans_le &
 [ STEM < "gas" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gas_v_1_rel",
            PHON.ONSET con ] ].

gaseous_a1 := adj_intrans_le &
 [ STEM < "gaseous" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gaseous_a_1_rel",
            PHON.ONSET con ] ].

gash_n1 := n_intr_le &
 [ STEM < "gash" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gash_n_1_rel",
            PHON.ONSET con ] ].

gash_v1 := v_np_trans_le &
 [ STEM < "gash" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gash_v_1_rel",
            PHON.ONSET con ] ].

gasket_n1 := n_intr_le &
 [ STEM < "gasket" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gasket_n_1_rel",
            PHON.ONSET con ] ].

gasp_excl_post := adv_s_post_word_nospec_le &
 [ STEM < "gasp" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gasp_a_1_rel",
            PHON.ONSET con ] ].

gasp_excl_pre := adv_s_pre_word_root_le &
 [ STEM < "gasp" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gasp_a_1_rel",
            PHON.ONSET con ] ].

gasp_for_v1 := v_empty_prep_intrans_le &
 [ STEM < "gasp" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_gasp_v_for_rel" ],
            PHON.ONSET con ] ].

gasp_n1 := n_intr_le &
 [ STEM < "gasp" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gasp_n_1_rel",
            PHON.ONSET con ] ].

gasp_out_v1 := v_particle_cp_le &
 [ STEM < "gasp" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_gasp_v_out_rel" ],
            PHON.ONSET con ] ].

gasp_v1 := v_unerg_le &
 [ STEM < "gasp" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gasp_v_1_rel",
            PHON.ONSET con ] ].

gasp_v2 := v_cp_prop_non_trans_le &
 [ STEM < "gasp" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gasp_v_1_rel",
            PHON.ONSET con ] ].

gastric_a1 := adj_intrans_le &
 [ STEM < "gastric" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gastric_a_1_rel",
            PHON.ONSET con ] ].

gate_n1 := n_intr_le &
 [ STEM < "gate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gate_n_1_rel",
            PHON.ONSET con ] ].

gates_n1 := n_proper_le &
 [ STEM < "gates" >,
   SYNSEM [ LKEYS.KEYREL.CARG "gates",
            PHON.ONSET con ] ].

gateway_n1 := n_intr_le &
 [ STEM < "gateway" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gateway_n_1_rel",
            PHON.ONSET con ] ].

gateway_n2 := n_proper_le &
 [ STEM < "gateway" >,
   SYNSEM [ LKEYS.KEYREL.CARG "gateway",
            PHON.ONSET con ] ].

gather_up_v1 := v_particle_np_le &
 [ STEM < "gather" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_gather_v_up_rel" ],
            PHON.ONSET con ] ].

gather_v1 := v_np*_trans_le &
 [ STEM < "gather" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gather_v_coll_rel",
            PHON.ONSET con ] ].

gather_v2 := v_cp_prop_non_trans_le &
 [ STEM < "gather" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gather_v_1_rel",
            PHON.ONSET con ] ].

gathering_n1 := n_ppof_le &
 [ STEM < "gathering" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gathering_n_of_rel",
            PHON.ONSET con ] ].

gauge_n1 := n_intr_le &
 [ STEM < "gauge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gauge_n_1_rel",
            PHON.ONSET con ] ].

gauge_v1 := v_np_trans_le &
 [ STEM < "gauge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gauge_v_1_rel",
            PHON.ONSET con ] ].

gauge_v2 := v_cp_non_trans_le &
 [ STEM < "gauge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gauge_v_1_rel",
            PHON.ONSET con ] ].

gausdal := n_proper_le &
 [ STEM < "gausdal" >,
   SYNSEM [ LKEYS.KEYREL.CARG "gausdal",
            PHON.ONSET con ] ].

gausta := n_proper_le &
 [ STEM < "gausta" >,
   SYNSEM [ LKEYS.KEYREL.CARG "gausta",
            PHON.ONSET con ] ].

gaustatoppen := n_proper_le &
 [ STEM < "gaustatoppen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "gaustatoppen",
            PHON.ONSET con ] ].

gaute_n1 := n_proper_le &
 [ STEM < "gaute" >,
   SYNSEM [ LKEYS.KEYREL.CARG "gaute",
            PHON.ONSET con ] ].

gavula := n_proper_le &
 [ STEM < "gavula" >,
   SYNSEM [ LKEYS.KEYREL.CARG "gavula",
            PHON.ONSET con ] ].

gay_a1 := adj_intrans_le &
 [ STEM < "gay" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gay_a_1_rel",
            PHON.ONSET con ] ].

gay_n1 := n_intr_le &
 [ STEM < "gay" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gay_n_1_rel",
            PHON.ONSET con ] ].

gaza_n1 := n_proper_city_le &
 [ STEM < "gaza" >,
   SYNSEM [ LKEYS.KEYREL.CARG "gaza",
            PHON.ONSET con ] ].

gaze_at_v1 := v_empty_prep_intrans_le &
 [ STEM < "gaze" >,
   SYNSEM [ LKEYS [ --COMPKEY _at_p_sel_rel,
                    KEYREL.PRED "_gaze_v_at_rel" ],
            PHON.ONSET con ] ].

gaze_n1 := n_mass_count_le &
 [ STEM < "gaze" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gaze_n_1_rel",
            PHON.ONSET con ] ].

gaze_on_v1 := v_empty_prep_intrans_le &
 [ STEM < "gaze" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_gaze_v_on_rel" ],
            PHON.ONSET con ] ].

gaze_v1 := v_unerg_le &
 [ STEM < "gaze" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gaze_v_1_rel",
            PHON.ONSET con ] ].

gazebo_n1 := n_intr_le &
 [ STEM < "gazebo" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gazebo_n_1_rel",
            PHON.ONSET con ] ].

gear_n1 := n_mass_count_le &
 [ STEM < "gear" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gear_n_1_rel",
            PHON.ONSET con ] ].

gear_up_v1 := v_particle_le &
 [ STEM < "gear" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_gear_v_up_rel" ],
            PHON.ONSET con ] ].

gear_up_v2 := v_particle_np_le &
 [ STEM < "gear" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_gear_v_up_rel" ],
            PHON.ONSET con ] ].

gear_up_v3 := v_particle_oeq_le &
 [ STEM < "gear" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_gear_v_up_rel" ],
            PHON.ONSET con ] ].

gecko_n1 := n_intr_le &
 [ STEM < "gecko" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gecko_n_1_rel",
            PHON.ONSET con ] ].

gee_excl_post := adv_s_post_word_nospec_le &
 [ STEM < "gee" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gee_a_1_rel",
            PHON.ONSET con ] ].

gee_excl_pre := adv_s_pre_word_root_le &
 [ STEM < "gee" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gee_a_1_rel",
            PHON.ONSET con ] ].

geez_excl_post := adv_s_post_word_nospec_le &
 [ STEM < "geez" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_geez_a_1_rel",
            PHON.ONSET con ] ].

geez_excl_pre := adv_s_pre_word_root_le &
 [ STEM < "geez" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_geez_a_1_rel",
            PHON.ONSET con ] ].

gehrig_n1 := n_proper_le &
 [ STEM < "gehrig" >,
   SYNSEM [ LKEYS.KEYREL.CARG "gehrig",
            PHON.ONSET con ] ].

geiterygghytta := n_proper_le &
 [ STEM < "geiterygghytta" >,
   SYNSEM [ LKEYS.KEYREL.CARG "geiterygghytta",
            PHON.ONSET con ] ].

geiteryggshytta := n_proper_le &
 [ STEM < "geiteryggshytta" >,
   SYNSEM [ LKEYS.KEYREL.CARG "geiteryggshytta",
            PHON.ONSET con ] ].

geithÃ¸_n1 := n_proper_le &
 [ STEM < "geithÃ¸" >,
   SYNSEM [ LKEYS.KEYREL.CARG "geithÃ¸",
            PHON.ONSET con ] ].

geitsida := n_proper_le &
 [ STEM < "geitsida" >,
   SYNSEM [ LKEYS.KEYREL.CARG "geitsida",
            PHON.ONSET con ] ].

gel_n1 := n_mass_count_le &
 [ STEM < "gel" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gel_n_1_rel",
            PHON.ONSET con ] ].

gel_v1 := v_unerg_le &
 [ STEM < "gel" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gel_v_1_rel",
            PHON.ONSET con ] ].

gelatine_n1 := n_mass_count_le &
 [ STEM < "gelatine" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gelatine_n_1_rel",
            PHON.ONSET con ] ].

gelbart_n1 := n_proper_le &
 [ STEM < "gelbart" >,
   SYNSEM [ LKEYS.KEYREL.CARG "gelbart",
            PHON.ONSET con ] ].

geld_v1 := v_np_trans_le &
 [ STEM < "geld" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_geld_v_1_rel",
            PHON.ONSET con ] ].

gem_n1 := n_intr_le &
 [ STEM < "gem" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gem_n_1_rel",
            PHON.ONSET con ] ].

gema_n1 := n_proper_le &
 [ STEM < "gema" >,
   SYNSEM [ LKEYS.KEYREL.CARG "gema",
            PHON.ONSET con ] ].

gende_n1 := n_proper_le &
 [ STEM < "gende" >,
   SYNSEM [ LKEYS.KEYREL.CARG "gende",
            PHON.ONSET con ] ].

gender_n1 := n_mass_count_le &
 [ STEM < "gender" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gender_n_1_rel",
            PHON.ONSET con ] ].

gene_n1 := n_proper_le &
 [ STEM < "gene" >,
   SYNSEM [ LKEYS.KEYREL.CARG "gene",
            PHON.ONSET con ] ].

genealogic_a1 := adj_intrans_le &
 [ STEM < "genealogic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_genealogic_a_1_rel",
            PHON.ONSET con ] ].

genealogical_a1 := adj_intrans_le &
 [ STEM < "genealogical" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_genealogical_a_1_rel",
            PHON.ONSET con ] ].

genealogy_n1 := n_mass_count_le &
 [ STEM < "genealogy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_genealogy_n_1_rel",
            PHON.ONSET con ] ].

general_isect := adj_intrans_le &
 [ STEM < "general" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_general_a_1_rel",
            PHON.ONSET con ] ].

general_n1 := n_intr_le &
 [ STEM < "general" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_general_n_1_rel",
            PHON.ONSET con ] ].

general_ttl := n_title_le &
 [ STEM < "general" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_general_n_1_rel",
            PHON.ONSET con ] ].

generality_n1 := n_mass_count_le &
 [ STEM < "generality" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_generality_n_1_rel",
            PHON.ONSET con ] ].

generalization_n1 := n_mass_count_le &
 [ STEM < "generalization" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_generalization_n_1_rel",
            PHON.ONSET con ] ].

generalize_about_v1 := v_empty_prep_intrans_le &
 [ STEM < "generalize" >,
   SYNSEM [ LKEYS [ --COMPKEY _about_p_sel_rel,
                    KEYREL.PRED "_generalize_v_about_rel" ],
            PHON.ONSET con ] ].

generalize_v1 := v_np_trans_noger_le &
 [ STEM < "generalize" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_generalize_v_cause_rel",
            PHON.ONSET con ] ].

generalize_v2 := v_unacc_le &
 [ STEM < "generalize" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_generalize_v_1_rel",
            PHON.ONSET con ] ].

generalize_v3 := v_cp_non_trans_le &
 [ STEM < "generalize" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_generalize_v_1_rel",
            PHON.ONSET con ] ].

generally_adv1 := adv_int_vp_aux_le &
 [ STEM < "generally" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_general_a_1_rel",
            PHON.ONSET con ] ].

generally_adv2 := adv_int_vp_post_le &
 [ STEM < "generally" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_general_a_1_rel",
            PHON.ONSET con ] ].

generally_deg := adv_degree_spec_le &
 [ STEM < "generally" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_generally_x_rel",
            PHON.ONSET con ] ].

generate_v1 := v_np_trans_le &
 [ STEM < "generate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_generate_v_1_rel",
            PHON.ONSET con ] ].

generation_n1 := n_mass_count_ppof_le &
 [ STEM < "generation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_generation_n_of_rel",
            PHON.ONSET con ] ].

generic_a1 := adj_intrans_le &
 [ STEM < "generic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_generic_a_1_rel",
            PHON.ONSET con ] ].

generosity_n1 := n_mass_le &
 [ STEM < "generosity" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_generosity_n_1_rel",
            PHON.ONSET con ] ].

generous_isect := adj_intrans_le &
 [ STEM < "generous" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_generous_a_1_rel",
            PHON.ONSET con ] ].

generously := adv_int_vp_le &
 [ STEM < "generously" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_generous_a_1_rel",
            PHON.ONSET con ] ].

genesis := n_proper_le &
 [ STEM < "genesis" >,
   SYNSEM [ LKEYS.KEYREL.CARG "genesis",
            PHON.ONSET con ] ].

genesis_n1 := n_intr_le &
 [ STEM < "genesis" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_genesis_n_1_rel",
            PHON.ONSET con ] ].

genetic_a1 := adj_intrans_le &
 [ STEM < "genetic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_genetic_a_1_rel",
            PHON.ONSET con ] ].

genital_n1 := n_intr_le &
 [ STEM < "genital" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_genital_n_1_rel",
            PHON.ONSET con ] ].

genius_n1 := n_intr_le &
 [ STEM < "genius" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_genius_n_1_rel",
            PHON.ONSET con ] ].

genoa := n_proper_le &
 [ STEM < "genoa" >,
   SYNSEM [ LKEYS.KEYREL.CARG "genoa",
            PHON.ONSET con ] ].

genome_n1 := n_intr_le &
 [ STEM < "genome" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_genome_n_1_rel",
            PHON.ONSET con ] ].

gentle_a1 := adj_intrans_le &
 [ STEM < "gentle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gentle_a_1_rel",
            PHON.ONSET con ] ].

gentleman_n1 := n_intr_le &
 [ STEM < "gentleman" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gentleman_n_1_rel",
            PHON.ONSET con ] ].

gentlemen_root_post := adv_disc_posth_le &
 [ STEM < "gentlemen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "gentlemen",
            PHON.ONSET con ] ].

gentlemen_root_pre := adv_disc_preh_le &
 [ STEM < "gentlemen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "gentlemen",
            PHON.ONSET con ] ].

gentleness_n1 := n_mass_le &
 [ STEM < "gentleness" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gentleness_n_1_rel",
            PHON.ONSET con ] ].

gentler_a1 := adj_comp_le &
 [ STEM < "gentler" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gentle_a_1_rel",
            PHON.ONSET con ] ].

gentlest_a1 := adj_superl_le &
 [ STEM < "gentlest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gentle_a_1_rel",
            PHON.ONSET con ] ].

gently_adv1 := adv_int_vp_le &
 [ STEM < "gently" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gentle_a_1_rel",
            PHON.ONSET con ] ].

genuine_a1 := adj_intrans_le &
 [ STEM < "genuine" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_genuine_a_1_rel",
            PHON.ONSET con ] ].

genuinely_adv1 := adv_int_vp_le &
 [ STEM < "genuinely" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_genuine_a_1_rel",
            PHON.ONSET con ] ].

genuineness_n1 := n_mass_le &
 [ STEM < "genuineness" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_genuineness_n_1_rel",
            PHON.ONSET con ] ].

genus_n1 := n_intr_le &
 [ STEM < "genus" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_genus_n_1_rel",
            PHON.ONSET con ] ].

geodesic_a1 := adj_attr_intrans_le &
 [ STEM < "geodesic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_geodesic_a_1_rel",
            PHON.ONSET con ] ].

geography_n1 := n_mass_count_le &
 [ STEM < "geography" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_geography_n_1_rel",
            PHON.ONSET con ] ].

geologic_a1 := adj_intrans_le &
 [ STEM < "geologic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_geologic_a_1_rel",
            PHON.ONSET con ] ].

geological_a1 := adj_intrans_le &
 [ STEM < "geological" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_geological_a_1_rel",
            PHON.ONSET con ] ].

geologically := adv_int_vp_le &
 [ STEM < "geologically" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_geological_a_1_rel",
            PHON.ONSET con ] ].

geologist_n1 := n_intr_le &
 [ STEM < "geologist" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_geologist_n_1_rel",
            PHON.ONSET con ] ].

geology_n1 := n_mass_count_le &
 [ STEM < "geology" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_geology_n_1_rel",
            PHON.ONSET con ] ].

geometrical_a1 := adj_intrans_le &
 [ STEM < "geometrical" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_geometrical_a_1_rel",
            PHON.ONSET con ] ].

geometry_abb_n1 := n_mass_count_le &
 [ STEM < "geom." >,
   SYNSEM [ LKEYS.KEYREL.PRED "_geometry_n_1_rel",
            PHON.ONSET con ] ].

geometry_n1 := n_mass_count_le &
 [ STEM < "geometry" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_geometry_n_1_rel",
            PHON.ONSET con ] ].

georg_n1 := n_proper_le &
 [ STEM < "georg" >,
   SYNSEM [ LKEYS.KEYREL.CARG "georg",
            PHON.ONSET con ] ].

george_n1 := n_proper_le &
 [ STEM < "george" >,
   SYNSEM [ LKEYS.KEYREL.CARG "george",
            PHON.ONSET con ] ].

georgengarten := n_intr_named_le &
 [ STEM < "georgengarten" >,
   SYNSEM [ LKEYS.KEYREL.CARG "georgengarten",
            PHON.ONSET con ] ].

georgia_n1 := n_proper_le &
 [ STEM < "georgia" >,
   SYNSEM [ LKEYS.KEYREL.CARG "georgia",
            PHON.ONSET con ] ].

georgia_n2 := n_proper_abb_le &
 [ STEM < "ga" >,
   SYNSEM [ LKEYS.KEYREL.CARG "georgia",
            PHON.ONSET con ] ].

gerald_n1 := n_proper_le &
 [ STEM < "gerald" >,
   SYNSEM [ LKEYS.KEYREL.CARG "gerald",
            PHON.ONSET con ] ].

geraldine_n1 := n_proper_le &
 [ STEM < "geraldine" >,
   SYNSEM [ LKEYS.KEYREL.CARG "geraldine",
            PHON.ONSET con ] ].

gerbil_n1 := n_intr_le &
 [ STEM < "gerbil" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gerbil_n_1_rel",
            PHON.ONSET con ] ].

gerhard_n1 := n_proper_le &
 [ STEM < "gerhard" >,
   SYNSEM [ LKEYS.KEYREL.CARG "gerhard",
            PHON.ONSET con ] ].

germ_n1 := n_intr_le &
 [ STEM < "germ" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_germ_n_1_rel",
            PHON.ONSET con ] ].

german_a1 := adj_intrans_le &
 [ STEM < "german" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_german_a_1_rel",
            PHON.ONSET con ] ].

german_n1 := n_proper_le &
 [ STEM < "german" >,
   SYNSEM [ LKEYS.KEYREL.CARG "german",
            PHON.ONSET con ] ].

german_n2 := n_intr_le &
 [ STEM < "german" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_german_n_1_rel",
            PHON.ONSET con ] ].

german_speaking_a1 := adj_intrans_le &
 [ STEM < "german", "speaking" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_german+speaking_a_1_rel",
            PHON.ONSET con ] ].

german_unity_day := n_holiday_le &
 [ STEM < "day", "of", "german", "unity" >,
   SYNSEM [ LKEYS.KEYREL.CARG "day_of_german_unity",
            PHON.ONSET con ] ].

germane_a1 := adj_trans_le &
 [ STEM < "germane" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_germane_a_to_rel" ],
            PHON.ONSET con ] ].

germany_internal_a1 := adj_intrans_le &
 [ STEM < "germany", "internal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_germany+internal_a_1_rel",
            PHON.ONSET con ] ].

germany_n1 := n_proper_le &
 [ STEM < "germany" >,
   SYNSEM [ LKEYS.KEYREL.CARG "germany",
            PHON.ONSET con ] ].

germinate_v1 := v_np_trans_noger_le &
 [ STEM < "germinate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_germinate_v_cause_rel",
            PHON.ONSET con ] ].

germinate_v2 := v_unacc_le &
 [ STEM < "germinate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_germinate_v_1_rel",
            PHON.ONSET con ] ].

germination_n1 := n_mass_le &
 [ STEM < "germination" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_germination_n_1_rel",
            PHON.ONSET con ] ].

gestate_v1 := v_unerg_le &
 [ STEM < "gestate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gestate_v_1_rel",
            PHON.ONSET con ] ].

gestation_n1 := n_mass_count_le &
 [ STEM < "gestation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gestation_n_1_rel",
            PHON.ONSET con ] ].

gesticulation_n1 := n_mass_count_le &
 [ STEM < "gesticulation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gesticulation_n_1_rel",
            PHON.ONSET con ] ].

gesture_at_v1 := v_empty_prep_intrans_le &
 [ STEM < "gesture" >,
   SYNSEM [ LKEYS [ --COMPKEY _at_p_sel_rel,
                    KEYREL.PRED "_gesture_v_at_rel" ],
            PHON.ONSET con ] ].

gesture_n1 := n_intr_le &
 [ STEM < "gesture" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gesture_n_1_rel",
            PHON.ONSET con ] ].

gesture_v1 := v_unerg_le &
 [ STEM < "gesture" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gesture_v_1_rel",
            PHON.ONSET con ] ].

get_along_v1 := v_particle_le &
 [ STEM < "get" >,
   SYNSEM [ LKEYS [ --COMPKEY _along_p_sel_rel,
                    KEYREL.PRED "_get_v_along_rel" ],
            PHON.ONSET con ] ].

get_around_v1 := v_empty_prep_intrans_le &
 [ STEM < "get" >,
   SYNSEM [ LKEYS [ --COMPKEY _around_p_sel_rel,
                    KEYREL.PRED "_get_v_around_rel" ],
            PHON.ONSET con ] ].

get_around_v2 := v_particle_le &
 [ STEM < "get" >,
   SYNSEM [ LKEYS [ --COMPKEY _around_p_sel_rel,
                    KEYREL.PRED "_get_v_around_rel" ],
            PHON.ONSET con ] ].

get_around_v3 := v_particle_empty_pp_le &
 [ STEM < "get" >,
   SYNSEM [ LKEYS [ --COMPKEY _around_p_sel_rel,
                    --OCOMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_get_v_around-to_rel" ],
            PHON.ONSET con ] ].

get_back_v1 := v_particle_pp_le &
 [ STEM < "get" >,
   SYNSEM [ LKEYS [ --COMPKEY _back_p_sel_rel,
                    --OCOMPKEY _to_p_rel,
                    KEYREL.PRED "_get_v_back_rel" ],
            PHON.ONSET con ] ].

get_back_v2 := v_particle_np_le &
 [ STEM < "get" >,
   SYNSEM [ LKEYS [ --COMPKEY _back_p_sel_rel,
                    KEYREL.PRED "_get_v_back_rel" ],
            PHON.ONSET con ] ].

get_down_to_v1 := v_particle_empty_pp_le &
 [ STEM < "get" >,
   SYNSEM [ LKEYS [ --COMPKEY _down_p_sel_rel,
                    --OCOMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_get_v_down-to_rel" ],
            PHON.ONSET con ] ].

get_down_v2 := v_particle_np_le &
 [ STEM < "get" >,
   SYNSEM [ LKEYS [ --COMPKEY _down_p_sel_rel,
                    KEYREL.PRED "_get_v_down_rel" ],
            PHON.ONSET con ] ].

get_in_v1 := v_particle_np_le &
 [ STEM < "get" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_get_v_in_rel" ],
            PHON.ONSET con ] ].

get_off_v2 := v_particle_np_le &
 [ STEM < "get" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_get_v_off_rel" ],
            PHON.ONSET con ] ].

get_on_with_v1 := v_particle_pp_le &
 [ STEM < "get" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    --OCOMPKEY _with_p_rel,
                    KEYREL.PRED "_get_v_on_rel" ],
            PHON.ONSET con ] ].

get_out_v2 := v_particle_np_le &
 [ STEM < "get" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_get_v_out_rel" ],
            PHON.ONSET con ] ].

get_over_v1 := v_empty_prep_intrans_le &
 [ STEM < "get" >,
   SYNSEM [ LKEYS [ --COMPKEY _over_p_sel_rel,
                    KEYREL.PRED "_get_v_over_rel" ],
            PHON.ONSET con ] ].

get_prd_v1 := v_subj_equi_prd_le &
 [ STEM < "get" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_get_v_state_rel",
            PHON.ONSET con ] ].

get_prd_v2 := v_obj_equi_non_trans_prd_le &
 [ STEM < "get" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_get_v_state_rel",
            PHON.ONSET con ] ].

get_through_v1 := v_particle_le &
 [ STEM < "get" >,
   SYNSEM [ LKEYS [ --COMPKEY _through_p_sel_rel,
                    KEYREL.PRED "_get_v_through_rel" ],
            PHON.ONSET con ] ].

get_to_v1 := v_ssr_noimp_le &
 [ STEM < "get" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_get_v_to_rel",
            PHON.ONSET con ] ].

get_to_v2 := v_obj_equi_le &
 [ STEM < "get" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_get_v_cause_rel",
            PHON.ONSET con ] ].

get_up_v1 := v_particle_le &
 [ STEM < "get" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_get_v_up_rel" ],
            PHON.ONSET con ] ].

get_v1 := v_ditrans_only_le &
 [ STEM < "get" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_get_v_1_rel",
            PHON.ONSET con ] ].

get_v2 := v_np_non_trans_le &
 [ STEM < "get" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_get_v_1_rel",
            PHON.ONSET con ] ].

get_v3 := v_np_trans_double_pp_to*_le &
 [ STEM < "get" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _from_p_sel_rel,
                    KEYREL.PRED "_get_v_from-to_rel" ],
            PHON.ONSET con ] ].

get_x_of_v1_i := v_empty_prep_trans_idiom_le &
 [ STEM < "get" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_get_v_i_rel" ],
            PHON.ONSET con ] ].

getaway_n1 := n_intr_le &
 [ STEM < "getaway" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_getaway_n_1_rel",
            PHON.ONSET con ] ].

gettysburg_n1 := n_proper_city_le &
 [ STEM < "gettysburg" >,
   SYNSEM [ LKEYS.KEYREL.CARG "gettysburg",
            PHON.ONSET con ] ].

gg_n1 := n_proper_le &
 [ STEM < "gg" >,
   SYNSEM [ LKEYS.KEYREL.CARG "gg",
            PHON.ONSET con ] ].

ggg_n1 := n_proper_le &
 [ STEM < "ggg" >,
   SYNSEM [ LKEYS.KEYREL.CARG "ggg",
            PHON.ONSET con ] ].

ghana_n1 := n_proper_le &
 [ STEM < "ghana" >,
   SYNSEM [ LKEYS.KEYREL.CARG "ghana",
            PHON.ONSET con ] ].

ghastly_a1 := adj_intrans_le &
 [ STEM < "ghastly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ghastly_a_1_rel",
            PHON.ONSET con ] ].

ghost_n1 := n_intr_le &
 [ STEM < "ghost" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ghost_n_1_rel",
            PHON.ONSET con ] ].

giant_a1 := adj_intrans_le &
 [ STEM < "giant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_giant_a_1_rel",
            PHON.ONSET con ] ].

giant_n1 := n_no_cmpnd_le &
 [ STEM < "giant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_giant_n_1_rel",
            PHON.ONSET con ] ].

giddy_a1 := adj_intrans_le &
 [ STEM < "giddy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_giddy_a_1_rel",
            PHON.ONSET con ] ].

gie_n1 := n_proper_le &
 [ STEM < "gie" >,
   SYNSEM [ LKEYS.KEYREL.CARG "gie",
            PHON.ONSET con ] ].

giessen_nd := n_proper_le &
 [ STEM < "giessen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "giessen",
            PHON.ONSET con ] ].

gifford_n1 := n_proper_le &
 [ STEM < "gifford" >,
   SYNSEM [ LKEYS.KEYREL.CARG "gifford",
            PHON.ONSET con ] ].

gift_n1 := n_double_ppcomp_le &
 [ STEM < "gift" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    --OCOMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_gift_n_of-to_rel" ],
            PHON.ONSET con ] ].

gift_wrap_v1 := v_np_trans_le &
 [ STEM < "gift", "wrap" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gift+wrap_v_1_rel",
            PHON.ONSET con ] ].

gift_wrap_v2 := v_np_trans_le &
 [ STEM < "gift-", "wrap" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gift+wrap_v_1_rel",
            PHON.ONSET con ] ].

gig_n1 := n_ppof_le &
 [ STEM < "gig" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gig_n_of_rel",
            PHON.ONSET con ] ].

gigabyte_n1 := n_ppof_le &
 [ STEM < "gigabyte" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gigabyte_n_of_rel",
            PHON.ONSET con ] ].

gigabyte_n2 := n_ppof_le &
 [ STEM < "gbyte" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gigabyte_n_of_rel",
            PHON.ONSET con ] ].

gigabyte_n3 := n_ppof_le &
 [ STEM < "gb" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gigabyte_n_of_rel",
            PHON.ONSET con ] ].

gigahertz_n1 := n_intr_le &
 [ STEM < "gigahertz" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gigahertz_n_1_rel",
            PHON.ONSET con ] ].

gigahertz_n2 := n_intr_le &
 [ STEM < "ghz" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gigahertz_n_1_rel",
            PHON.ONSET con ] ].

giggle_at_v1 := v_empty_prep_intrans_le &
 [ STEM < "giggle" >,
   SYNSEM [ LKEYS [ --COMPKEY _at_p_sel_rel,
                    KEYREL.PRED "_giggle_v_at_rel" ],
            PHON.ONSET con ] ].

giggle_n1 := n_intr_le &
 [ STEM < "giggle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_giggle_n_1_rel",
            PHON.ONSET con ] ].

giggle_v1 := v_unerg_le &
 [ STEM < "giggle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_giggle_v_1_rel",
            PHON.ONSET con ] ].

gilbert_and_sullivan := n_proper_le &
 [ STEM < "gilbert", "and", "sullivan" >,
   SYNSEM [ LKEYS.KEYREL.CARG "gilbert_and_sullivan",
            PHON.ONSET con ] ].

gilbert_n1 := n_proper_le &
 [ STEM < "gilbert" >,
   SYNSEM [ LKEYS.KEYREL.CARG "gilbert",
            PHON.ONSET con ] ].

gild_v1 := v_np_trans_le &
 [ STEM < "gild" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gild_v_1_rel",
            PHON.ONSET con ] ].

gill_n1 := n_intr_le &
 [ STEM < "gill" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gill_n_1_rel",
            PHON.ONSET con ] ].

ginkgo_n1 := n_intr_le &
 [ STEM < "ginkgo" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ginkgo_n_1_rel",
            PHON.ONSET con ] ].

ginkinspiel_n1 := n_proper_le &
 [ STEM < "ginkinspiel" >,
   SYNSEM [ LKEYS.KEYREL.CARG "ginkinspiel",
            PHON.ONSET con ] ].

giorgio_n1 := n_proper_le &
 [ STEM < "giorgio" >,
   SYNSEM [ LKEYS.KEYREL.CARG "giorgio",
            PHON.ONSET con ] ].

giraffe_n1 := n_intr_le &
 [ STEM < "giraffe" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_giraffe_n_1_rel",
            PHON.ONSET con ] ].

girl_n1 := n_intr_le &
 [ STEM < "girl" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_girl_n_1_rel",
            PHON.ONSET con ] ].

girlfriend_n1 := n_intr_le &
 [ STEM < "girlfriend" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_girlfriend_n_1_rel",
            PHON.ONSET con ] ].

girst_n1 := n_proper_le &
 [ STEM < "girst" >,
   SYNSEM [ LKEYS.KEYREL.CARG "girst",
            PHON.ONSET con ] ].

give_back_v1 := v_particle_np_le &
 [ STEM < "give" >,
   SYNSEM [ LKEYS [ --COMPKEY _back_p_sel_rel,
                    KEYREL.PRED "_give_v_back_rel" ],
            PHON.ONSET con ] ].

give_back_v2 := v_np_prtcl_np_le &
 [ STEM < "give" >,
   SYNSEM [ LKEYS [ --COMPKEY _back_p_sel_rel,
                    KEYREL.PRED "_give_v_back_rel" ],
            PHON.ONSET con ] ].

give_in_v1 := v_particle_le &
 [ STEM < "give" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_give_v_in_rel" ],
            PHON.ONSET con ] ].

give_in_v2 := v_particle_pp_le &
 [ STEM < "give" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    --OCOMPKEY _to_p_rel,
                    KEYREL.PRED "_give_v_in_rel" ],
            PHON.ONSET con ] ].

give_off_v1 := v_particle_np_le &
 [ STEM < "give" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_give_v_off_rel" ],
            PHON.ONSET con ] ].

give_out_v1 := v_particle_le &
 [ STEM < "give" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_give_v_out_rel" ],
            PHON.ONSET con ] ].

give_out_v2 := v_particle_np_le &
 [ STEM < "give" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_give_v_out-2_rel" ],
            PHON.ONSET con ] ].

give_to_v1 := v_empty_prep_intrans_le &
 [ STEM < "give" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_give_v_to_rel" ],
            PHON.ONSET con ] ].

give_up_v1 := v_particle_np_le &
 [ STEM < "give" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_give_v_up_rel" ],
            PHON.ONSET con ] ].

give_up_v2 := v_particle_le &
 [ STEM < "give" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_give_v_up_rel" ],
            PHON.ONSET con ] ].

give_v1 := v_ditrans_le &
 [ STEM < "give" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_give_v_1_rel",
            PHON.ONSET con ] ].

give_v2 := v_np_trans_noarg3_le &
 [ STEM < "give" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_give_v_1_rel",
            PHON.ONSET con ] ].

giza_n1 := n_proper_city_le &
 [ STEM < "giza" >,
   SYNSEM [ LKEYS.KEYREL.CARG "giza",
            PHON.ONSET con ] ].

gizla := n_proper_le &
 [ STEM < "gizla" >,
   SYNSEM [ LKEYS.KEYREL.CARG "gizla",
            PHON.ONSET con ] ].

gjedebu_n1 := n_proper_le &
 [ STEM < "gjedebu" >,
   SYNSEM [ LKEYS.KEYREL.CARG "gjedebu",
            PHON.ONSET con ] ].

gjende := n_proper_le &
 [ STEM < "gjende" >,
   SYNSEM [ LKEYS.KEYREL.CARG "gjende",
            PHON.ONSET con ] ].

gjendebu := n_proper_le &
 [ STEM < "gjendebu" >,
   SYNSEM [ LKEYS.KEYREL.CARG "gjendebu",
            PHON.ONSET con ] ].

gjendeby_n1 := n_proper_le &
 [ STEM < "gjendeby" >,
   SYNSEM [ LKEYS.KEYREL.CARG "gjendeby",
            PHON.ONSET con ] ].

gjendehalsen_n1 := n_proper_le &
 [ STEM < "gjendehalsen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "gjendehalsen",
            PHON.ONSET con ] ].

gjendeoset_n1 := n_proper_le &
 [ STEM < "gjendeoset" >,
   SYNSEM [ LKEYS.KEYREL.CARG "gjendeoset",
            PHON.ONSET con ] ].

gjendesheim := n_proper_le &
 [ STEM < "gjendesheim" >,
   SYNSEM [ LKEYS.KEYREL.CARG "gjendesheim",
            PHON.ONSET con ] ].

gjendeshiem_n1 := n_proper_le &
 [ STEM < "gjendeshiem" >,
   SYNSEM [ LKEYS.KEYREL.CARG "gjendeshiem",
            PHON.ONSET con ] ].

gjendeshim_n1 := n_proper_le &
 [ STEM < "gjendeshim" >,
   SYNSEM [ LKEYS.KEYREL.CARG "gjendeshim",
            PHON.ONSET con ] ].

gjendeshÃ¸_n1 := n_proper_le &
 [ STEM < "gjendeshÃ¸" >,
   SYNSEM [ LKEYS.KEYREL.CARG "gjendeshÃ¸",
            PHON.ONSET con ] ].

gjendestunga_n1 := n_proper_le &
 [ STEM < "gjendestunga" >,
   SYNSEM [ LKEYS.KEYREL.CARG "gjendestunga",
            PHON.ONSET con ] ].

gjendesÃ¦teren_n1 := n_proper_le &
 [ STEM < "gjendesÃ¦teren" >,
   SYNSEM [ LKEYS.KEYREL.CARG "gjendesÃ¦teren",
            PHON.ONSET con ] ].

gjendine_n1 := n_proper_le &
 [ STEM < "gjendine" >,
   SYNSEM [ LKEYS.KEYREL.CARG "gjendine",
            PHON.ONSET con ] ].

gjendineggen_n1 := n_proper_le &
 [ STEM < "gjendineggen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "gjendineggen",
            PHON.ONSET con ] ].

gjermundshamn := n_proper_le &
 [ STEM < "gjermundshamn" >,
   SYNSEM [ LKEYS.KEYREL.CARG "gjermundshamn",
            PHON.ONSET con ] ].

gjertvassbreen := n_proper_le &
 [ STEM < "gjertvassbreen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "gjertvassbreen",
            PHON.ONSET con ] ].

gjertvassbÃ¸en_n1 := n_proper_le &
 [ STEM < "gjertvassbÃ¸en" >,
   SYNSEM [ LKEYS.KEYREL.CARG "gjertvassbÃ¸en",
            PHON.ONSET con ] ].

gjertvassdalen := n_proper_le &
 [ STEM < "gjertvassdalen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "gjertvassdalen",
            PHON.ONSET con ] ].

gjertvassdind_n1 := n_proper_le &
 [ STEM < "gjertvassdind" >,
   SYNSEM [ LKEYS.KEYREL.CARG "gjertvassdind",
            PHON.ONSET con ] ].

gjertvasstind := n_proper_le &
 [ STEM < "gjertvasstind" >,
   SYNSEM [ LKEYS.KEYREL.CARG "gjertvasstind",
            PHON.ONSET con ] ].

gjesingedalen_n1 := n_proper_le &
 [ STEM < "gjesingedalen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "gjesingedalen",
            PHON.ONSET con ] ].

gjeste_n1 := n_proper_le &
 [ STEM < "gjeste" >,
   SYNSEM [ LKEYS.KEYREL.CARG "gjeste",
            PHON.ONSET con ] ].

gjestegaarden_n1 := n_proper_le &
 [ STEM < "gjestegaarden" >,
   SYNSEM [ LKEYS.KEYREL.CARG "gjestegaarden",
            PHON.ONSET con ] ].

glacial_a1 := adj_intrans_le &
 [ STEM < "glacial" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_glacial_a_1_rel",
            PHON.ONSET con ] ].

glacially := adv_int_vp_le &
 [ STEM < "glacially" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_glacial_a_1_rel",
            PHON.ONSET con ] ].

glacier_carved_a1 := adj_intrans_le &
 [ STEM < "glacier-", "carved" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_glacier+carved_a_1_rel",
            PHON.ONSET con ] ].

glacier_clad_a1 := adj_intrans_le &
 [ STEM < "glacier-", "clad" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_glacier-clad_a_1_rel",
            PHON.ONSET con ] ].

glacier_n1 := n_intr_le &
 [ STEM < "glacier" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_glacier_n_1_rel",
            PHON.ONSET con ] ].

glacier_post_ttl := n_post_title_le &
 [ STEM < "glacier" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_glacier_n_1_rel",
            PHON.ONSET con ] ].

glad_a1 := adj_reg_equi_le &
 [ STEM < "glad" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_glad_a_1_rel",
            PHON.ONSET con ] ].

glad_a2 := adj_reg_cp_le &
 [ STEM < "glad" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_glad_a_1_rel",
            PHON.ONSET con ] ].

glad_a3 := adj_intrans_le &
 [ STEM < "glad" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_glad_a_1_rel",
            PHON.ONSET con ] ].

glade_n1 := n_proper_le &
 [ STEM < "glade" >,
   SYNSEM [ LKEYS.KEYREL.CARG "glade",
            PHON.ONSET con ] ].

gladly_adv1 := adv_int_vp_le &
 [ STEM < "gladly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_glad_a_1_rel",
            PHON.ONSET con ] ].

glance_at_v1 := v_empty_prep_intrans_le &
 [ STEM < "glance" >,
   SYNSEM [ LKEYS [ --COMPKEY _at_p_sel_rel,
                    KEYREL.PRED "_glance_v_at_rel" ],
            PHON.ONSET con ] ].

glance_n1 := n_intr_le &
 [ STEM < "glance" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_glance_n_1_rel",
            PHON.ONSET con ] ].

glance_v1 := v_unerg_le &
 [ STEM < "glance" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_glance_v_1_rel",
            PHON.ONSET con ] ].

glare_at_v1 := v_empty_prep_intrans_le &
 [ STEM < "glare" >,
   SYNSEM [ LKEYS [ --COMPKEY _at_p_sel_rel,
                    KEYREL.PRED "_glare_v_at_rel" ],
            PHON.ONSET con ] ].

glare_n1 := n_mass_count_le &
 [ STEM < "glare" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_glare_n_1_rel",
            PHON.ONSET con ] ].

glare_v1 := v_unerg_le &
 [ STEM < "glare" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_glare_v_1_rel",
            PHON.ONSET con ] ].

glasgow_n1 := n_proper_city_le &
 [ STEM < "glasgow" >,
   SYNSEM [ LKEYS.KEYREL.CARG "glasgow",
            PHON.ONSET con ] ].

glass_n1 := n_mass_count_ppof_le &
 [ STEM < "glass" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_glass_n_of_rel",
            PHON.ONSET con ] ].

glauber_n1 := n_proper_le &
 [ STEM < "glauber" >,
   SYNSEM [ LKEYS.KEYREL.CARG "glauber",
            PHON.ONSET con ] ].

glaze_n1 := n_mass_count_le &
 [ STEM < "glaze" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_glaze_n_1_rel",
            PHON.ONSET con ] ].

glaze_over_v1 := v_empty_prep_intrans_le &
 [ STEM < "glaze" >,
   SYNSEM [ LKEYS [ --COMPKEY _over_p_sel_rel,
                    KEYREL.PRED "_glaze_v_over_rel" ],
            PHON.ONSET con ] ].

glaze_v1 := v_np*_trans_le &
 [ STEM < "glaze" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_glaze_v_1_rel",
            PHON.ONSET con ] ].

gleam_n1 := n_intr_le &
 [ STEM < "gleam" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gleam_n_1_rel",
            PHON.ONSET con ] ].

gleam_v1 := v_unacc_le &
 [ STEM < "gleam" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gleam_v_1_rel",
            PHON.ONSET con ] ].

gleam_with_v1 := v_empty_prep_intrans_le &
 [ STEM < "gleam" >,
   SYNSEM [ LKEYS [ --COMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_gleam_v_with_rel" ],
            PHON.ONSET con ] ].

glide_n1 := n_intr_le &
 [ STEM < "glide" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_glide_n_1_rel",
            PHON.ONSET con ] ].

glide_v1 := v_prep_dir_le &
 [ STEM < "glide" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_glide_v_1_rel",
            PHON.ONSET con ] ].

glide_v2 := v_np_trans_noger_le &
 [ STEM < "glide" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_glide_v_1_rel",
            PHON.ONSET con ] ].

glider_n1 := n_intr_le &
 [ STEM < "glider" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_glider_n_1_rel",
            PHON.ONSET con ] ].

glimmer_n1 := n_intr_le &
 [ STEM < "glimmer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_glimmer_n_1_rel",
            PHON.ONSET con ] ].

glimmer_v1 := v_unerg_le &
 [ STEM < "glimmer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_glimmer_v_1_rel",
            PHON.ONSET con ] ].

glimpse_n1 := n_intr_le &
 [ STEM < "glimpse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_glimpse_n_1_rel",
            PHON.ONSET con ] ].

glimpse_v1 := v_np_trans_le &
 [ STEM < "glimpse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_glimpse_v_1_rel",
            PHON.ONSET con ] ].

glisten_v1 := v_unerg_le &
 [ STEM < "glisten" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_glisten_v_1_rel",
            PHON.ONSET con ] ].

glitch_n1 := n_intr_le &
 [ STEM < "glitch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_glitch_n_1_rel",
            PHON.ONSET con ] ].

glitter_n1 := n_mass_count_le &
 [ STEM < "glitter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_glitter_n_1_rel",
            PHON.ONSET con ] ].

glitter_v1 := v_unerg_le &
 [ STEM < "glitter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_glitter_v_1_rel",
            PHON.ONSET con ] ].

glitterheim_n1 := n_proper_le &
 [ STEM < "glitterheim" >,
   SYNSEM [ LKEYS.KEYREL.CARG "glitterheim",
            PHON.ONSET con ] ].

glittertind := n_proper_le &
 [ STEM < "glittertind" >,
   SYNSEM [ LKEYS.KEYREL.CARG "glittertind",
            PHON.ONSET con ] ].

global_a1 := adj_intrans_le &
 [ STEM < "global" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_global_a_1_rel",
            PHON.ONSET con ] ].

global_n1 := n_proper_le &
 [ STEM < "global" >,
   SYNSEM [ LKEYS.KEYREL.CARG "global",
            PHON.ONSET con ] ].

globally := adv_int_vp_le &
 [ STEM < "globally" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_global_a_1_rel",
            PHON.ONSET con ] ].

globe_n1 := n_intr_le &
 [ STEM < "globe" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_globe_n_1_rel",
            PHON.ONSET con ] ].

gloominess_n1 := n_mass_le &
 [ STEM < "gloominess" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gloominess_n_1_rel",
            PHON.ONSET con ] ].

gloomy_a1 := adj_intrans_le &
 [ STEM < "gloomy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gloomy_a_1_rel",
            PHON.ONSET con ] ].

gloppen := n_proper_le &
 [ STEM < "gloppen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "gloppen",
            PHON.ONSET con ] ].

glorious_a1 := adj_intrans_le &
 [ STEM < "glorious" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_glorious_a_1_rel",
            PHON.ONSET con ] ].

glory_n1 := n_mass_count_le &
 [ STEM < "glory" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_glory_n_1_rel",
            PHON.ONSET con ] ].

gloss_n1 := n_mass_count_le &
 [ STEM < "gloss" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gloss_n_1_rel",
            PHON.ONSET con ] ].

gloss_over_v1 := v_empty_prep_intrans_le &
 [ STEM < "gloss" >,
   SYNSEM [ LKEYS [ --COMPKEY _over_p_sel_rel,
                    KEYREL.PRED "_gloss_v_over_rel" ],
            PHON.ONSET con ] ].

gloss_v1 := v_np_trans_le &
 [ STEM < "gloss" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gloss_v_1_rel",
            PHON.ONSET con ] ].

glove_n1 := n_intr_le &
 [ STEM < "glove" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_glove_n_1_rel",
            PHON.ONSET con ] ].

glow_n1 := n_intr_le &
 [ STEM < "glow" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_glow_n_1_rel",
            PHON.ONSET con ] ].

glow_v1 := v_unerg_le &
 [ STEM < "glow" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_glow_v_1_rel",
            PHON.ONSET con ] ].

glow_with_v1 := v_empty_prep_intrans_le &
 [ STEM < "glow" >,
   SYNSEM [ LKEYS [ --COMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_glow_v_with_rel" ],
            PHON.ONSET con ] ].

glue_n1 := n_mass_le &
 [ STEM < "glue" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_glue_n_1_rel",
            PHON.ONSET con ] ].

glue_v1 := v_np*_trans_le &
 [ STEM < "glue" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_glue_v_1_rel",
            PHON.ONSET con ] ].

glue_v2 := v_np_prep_trans_dors_le &
 [ STEM < "glue" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_glue_v_1_rel",
            PHON.ONSET con ] ].

gluemaker_n1 := n_intr_le &
 [ STEM < "gluemaker" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gluemaker_n_1_rel",
            PHON.ONSET con ] ].

glutinous_a1 := adj_intrans_le &
 [ STEM < "glutinous" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_glutinous_a_1_rel",
            PHON.ONSET con ] ].

gnarled_a1 := adj_intrans_le &
 [ STEM < "gnarled" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gnarled_a_1_rel",
            PHON.ONSET con ] ].

gnaw_away_v1 := v_particle_np_le &
 [ STEM < "gnaw" >,
   SYNSEM [ LKEYS [ --COMPKEY _away_p_sel_rel,
                    KEYREL.PRED "_gnaw_v_away_rel" ],
            PHON.ONSET con ] ].

gnaw_v1 := v_np*_trans_le &
 [ STEM < "gnaw" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gnaw_v_1_rel",
            PHON.ONSET con ] ].

go_about_v1 := v_empty_prep_intrans_le &
 [ STEM < "go" >,
   SYNSEM [ LKEYS [ --COMPKEY _about_p_sel_rel,
                    KEYREL.PRED "_go_v_about_rel" ],
            PHON.ONSET con ] ].

go_ahead_v1 := v_particle_le &
 [ STEM < "go" >,
   SYNSEM [ LKEYS [ --COMPKEY _ahead_p_sel_rel,
                    KEYREL.PRED "_go_v_ahead_rel" ],
            PHON.ONSET con ] ].

go_along_with_v1 := v_particle_le &
 [ STEM < "go" >,
   SYNSEM [ LKEYS [ --COMPKEY _along_p_sel_rel,
                    KEYREL.PRED "_go_v_along_rel" ],
            PHON.ONSET con ] ].

go_away_v1 := v_particle_le &
 [ STEM < "go" >,
   SYNSEM [ LKEYS [ --COMPKEY _away_p_sel_rel,
                    KEYREL.PRED "_go_v_away_rel" ],
            PHON.ONSET con ] ].

go_bse_vp_v1 := v_subj_equi_bse_go_le &
 [ STEM < "go" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_go_v_state_rel",
            PHON.ONSET con ] ].

go_for_v1 := v_empty_prep_intrans_le &
 [ STEM < "go" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_go_v_for_rel" ],
            PHON.ONSET con ] ].

go_in_v1 := v_empty_prep_intrans_le &
 [ STEM < "go" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_go_v_in_rel" ],
            PHON.ONSET con ] ].

go_n1 := n_intr_le &
 [ STEM < "go" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_go_n_1_rel",
            PHON.ONSET con ] ].

go_off_v1 := v_particle_le &
 [ STEM < "go" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_go_v_off_rel" ],
            PHON.ONSET con ] ].

go_on_v1 := v_particle_3only_le &
 [ STEM < "go" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_go_v_on_rel" ],
            PHON.ONSET con ] ].

go_out_v1 := v_particle_le &
 [ STEM < "go" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_go_v_out_rel" ],
            PHON.ONSET con ] ].

go_out_v2 := v_particle_pp_le &
 [ STEM < "go" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    --OCOMPKEY _with_p_rel,
                    KEYREL.PRED "_go_v_out_rel" ],
            PHON.ONSET con ] ].

go_over_v1 := v_empty_prep_intrans_le &
 [ STEM < "go" >,
   SYNSEM [ LKEYS [ --COMPKEY _over_p_sel_rel,
                    KEYREL.PRED "_go_v_over_rel" ],
            PHON.ONSET con ] ].

go_state_v1 := v_subj_equi_prd_adj_le &
 [ STEM < "go" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_go_v_state_rel",
            PHON.ONSET con ] ].

go_through_v1 := v_empty_prep_intrans_le &
 [ STEM < "go" >,
   SYNSEM [ LKEYS [ --COMPKEY _through_p_sel_rel,
                    KEYREL.PRED "_go_v_through_rel" ],
            PHON.ONSET con ] ].

go_through_v2 := v_particle_le &
 [ STEM < "go" >,
   SYNSEM [ LKEYS [ --COMPKEY _through_p_sel_rel,
                    KEYREL.PRED "_go_v_through_rel" ],
            PHON.ONSET con ] ].

go_v1 := v_prep_dir_le &
 [ STEM < "go" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_go_v_1_rel",
            PHON.ONSET con ] ].

go_v2 := v_subj_equi_prp_le &
 [ STEM < "go" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_go_v_ing_rel",
            PHON.ONSET con ] ].

go_v3 := v_loc_inv_mv_le &
 [ STEM < "go" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_go_v_1_rel",
            PHON.ONSET con ] ].

goal_n1 := n_intr_nosort_le &
 [ STEM < "goal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_goal_n_1_rel",
            PHON.ONSET con ] ].

goat_n1 := n_intr_le &
 [ STEM < "goat" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_goat_n_1_rel",
            PHON.ONSET con ] ].

god_n1 := n_intr_le &
 [ STEM < "god" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_god_n_1_rel",
            PHON.ONSET con ] ].

god_n2 := n_proper_le &
 [ STEM < "god" >,
   SYNSEM [ LKEYS.KEYREL.CARG "god",
            PHON.ONSET con ] ].

god_root_post := adv_s_post_word_nospec_le &
 [ STEM < "god" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_god_a_1_rel",
            PHON.ONSET con ] ].

god_root_pre := adv_s_pre_word_root_le &
 [ STEM < "god" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_god_a_1_rel",
            PHON.ONSET con ] ].

goddaughter_n1 := n_intr_le &
 [ STEM < "goddaughter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_goddaughter_n_1_rel",
            PHON.ONSET con ] ].

godfather_n1 := n_intr_le &
 [ STEM < "godfather" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_godfather_n_1_rel",
            PHON.ONSET con ] ].

godhead_n1 := n_intr_le &
 [ STEM < "godhead" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_godhead_n_1_rel",
            PHON.ONSET con ] ].

godiva_n1 := n_proper_le &
 [ STEM < "godiva" >,
   SYNSEM [ LKEYS.KEYREL.CARG "godiva",
            PHON.ONSET con ] ].

godmother_n1 := n_intr_le &
 [ STEM < "godmother" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_godmother_n_1_rel",
            PHON.ONSET con ] ].

godson_n1 := n_intr_le &
 [ STEM < "godson" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_godson_n_1_rel",
            PHON.ONSET con ] ].

goehring_n1 := n_proper_le &
 [ STEM < "goehring" >,
   SYNSEM [ LKEYS.KEYREL.CARG "goehring",
            PHON.ONSET con ] ].

goettman_n1 := n_proper_le &
 [ STEM < "goettman" >,
   SYNSEM [ LKEYS.KEYREL.CARG "goettman",
            PHON.ONSET con ] ].

going_by := p_le &
 [ STEM < "going", "by" >,
   SYNSEM [ LKEYS.KEYREL.PRED _going+by_p_rel,
            PHON.ONSET con ] ].

going_to_v1 := va_quasimodal_le &
 [ STEM < "going" >,
   SYNSEM [ LKEYS.KEYREL.PRED _going+to_v_modal_rel,
            PHON.ONSET con ] ].

gold_isect := adj_intrans_le &
 [ STEM < "gold" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gold_a_1_rel",
            PHON.ONSET con ] ].

gold_n1 := n_mass_le &
 [ STEM < "gold" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gold_n_1_rel",
            PHON.ONSET con ] ].

golden_a1 := adj_intrans_le &
 [ STEM < "golden" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_golden_a_1_rel",
            PHON.ONSET con ] ].

goldeneye_n1 := n_mass_count_le &
 [ STEM < "goldeneye" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_goldeneye_n_1_rel",
            PHON.ONSET con ] ].

goldfinch_n1 := n_intr_le &
 [ STEM < "goldfinch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_goldfinch_n_1_rel",
            PHON.ONSET con ] ].

goldfish_n1 := n_intr_le &
 [ STEM < "goldfish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_goldfish_n_1_rel",
            PHON.ONSET con ] ].

goldtop_n1 := n_proper_le &
 [ STEM < "goldtop" >,
   SYNSEM [ LKEYS.KEYREL.CARG "goldtop",
            PHON.ONSET con ] ].

golf_n1 := n_intr_le &
 [ STEM < "golf" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_golf_n_1_rel",
            PHON.ONSET con ] ].

golf_v1 := v_unerg_le &
 [ STEM < "golf" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_golf_v_1_rel",
            PHON.ONSET con ] ].

gone_a1 := adj_pred_nodpct_le &
 [ STEM < "gone" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gone_a_1_rel",
            PHON.ONSET con ] ].

gong_n1 := n_intr_le &
 [ STEM < "gong" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gong_n_1_rel",
            PHON.ONSET con ] ].

gong_n2 := n_proper_le &
 [ STEM < "gong" >,
   SYNSEM [ LKEYS.KEYREL.CARG "gong",
            PHON.ONSET con ] ].

gong_xueping_n1 := n_proper_le &
 [ STEM < "gong", "xueping" >,
   SYNSEM [ LKEYS.KEYREL.CARG "gong_xueping",
            PHON.ONSET con ] ].

gongbaille_n1 := n_proper_le &
 [ STEM < "gongbaille" >,
   SYNSEM [ LKEYS.KEYREL.CARG "gongbaille",
            PHON.ONSET con ] ].

gongbuju_n1 := n_proper_le &
 [ STEM < "gongbuju" >,
   SYNSEM [ LKEYS.KEYREL.CARG "gongbuju",
            PHON.ONSET con ] ].

gongfei_n1 := n_proper_le &
 [ STEM < "gongfei" >,
   SYNSEM [ LKEYS.KEYREL.CARG "gongfei",
            PHON.ONSET con ] ].

gonghe_n1 := n_proper_le &
 [ STEM < "gonghe" >,
   SYNSEM [ LKEYS.KEYREL.CARG "gonghe",
            PHON.ONSET con ] ].

gonghexin_n1 := n_proper_le &
 [ STEM < "gonghexin" >,
   SYNSEM [ LKEYS.KEYREL.CARG "gonghexin",
            PHON.ONSET con ] ].

gonna_v1 := va_quasimodal_bse_le &
 [ STEM < "gonna" >,
   SYNSEM [ LKEYS.KEYREL.PRED _going+to_v_modal_rel,
            PHON.ONSET con ] ].

good_a1 := adj_trans_oblig_le &
 [ STEM < "good" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_good_a_for_rel" ],
            PHON.ONSET con ] ].

good_a2 := adj_trans_le &
 [ STEM < "good" >,
   SYNSEM [ LKEYS [ --COMPKEY _at_p_sel_rel,
                    KEYREL.PRED "_good_a_at_rel" ],
            PHON.ONSET con ] ].

good_a3 := adj_tough_atrans_le &
 [ STEM < "good" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_good_a_for_rel",
            PHON.ONSET con ] ].

good_a4 := adj_reg_atrans_le &
 [ STEM < "good" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_good_a_for_rel",
            PHON.ONSET con ] ].

good_afternoon_gr_post := adv_disc_posth_grt_le &
 [ STEM < "good", "afternoon" >,
   SYNSEM [ LKEYS.KEYREL.CARG "good_afternoon",
            PHON.ONSET con ] ].

good_afternoon_gr_pre := adv_disc_preh_grt_le &
 [ STEM < "good", "afternoon" >,
   SYNSEM [ LKEYS.KEYREL.CARG "good_afternoon",
            PHON.ONSET con ] ].

good_buddy_n1 := n_proper_le &
 [ STEM < "good", "buddy" >,
   SYNSEM [ LKEYS.KEYREL.CARG "good_buddy",
            PHON.ONSET con ] ].

good_bye_root_pre := adv_disc_preh_grt_le &
 [ STEM < "good", "bye" >,
   SYNSEM [ LKEYS.KEYREL.CARG "good_bye",
            PHON.ONSET con ] ].

good_day_gr_post := adv_disc_posth_grt_le &
 [ STEM < "good", "day" >,
   SYNSEM [ LKEYS.KEYREL.CARG "good_day",
            PHON.ONSET con ] ].

good_day_gr_pre := adv_disc_preh_grt_le &
 [ STEM < "good", "day" >,
   SYNSEM [ LKEYS.KEYREL.CARG "good_day",
            PHON.ONSET con ] ].

good_evening_gr_post := adv_disc_posth_grt_le &
 [ STEM < "good", "evening" >,
   SYNSEM [ LKEYS.KEYREL.CARG "good_evening",
            PHON.ONSET con ] ].

good_evening_gr_pre := adv_disc_preh_grt_le &
 [ STEM < "good", "evening" >,
   SYNSEM [ LKEYS.KEYREL.CARG "good_evening",
            PHON.ONSET con ] ].

good_friday := n_holiday_le &
 [ STEM < "good", "friday" >,
   SYNSEM [ LKEYS.KEYREL.CARG "good_friday",
            PHON.ONSET con ] ].

good_heavens_post := adv_s_post_word_nospec_le &
 [ STEM < "good", "heavens" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_good+heavens_a_1_rel",
            PHON.ONSET con ] ].

good_heavens_pre := adv_s_pre_word_root_le &
 [ STEM < "good", "heavens" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_good+heavens_a_1_rel",
            PHON.ONSET con ] ].

good_morning_america_n1 := n_proper_le &
 [ STEM < "good", "morning", "america" >,
   SYNSEM [ LKEYS.KEYREL.CARG "good_morning_america",
            PHON.ONSET con ] ].

good_morning_gr_post := adv_disc_posth_grt_le &
 [ STEM < "good", "morning" >,
   SYNSEM [ LKEYS.KEYREL.CARG "good_morning",
            PHON.ONSET con ] ].

good_morning_gr_pre := adv_disc_preh_grt_le &
 [ STEM < "good", "morning" >,
   SYNSEM [ LKEYS.KEYREL.CARG "good_morning",
            PHON.ONSET con ] ].

good_s_adv := adv_s_pre_word_root_le &
 [ STEM < "good" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_good_a_1_rel",
            PHON.ONSET con ] ].

goodall_n1 := n_proper_le &
 [ STEM < "goodall" >,
   SYNSEM [ LKEYS.KEYREL.CARG "goodall",
            PHON.ONSET con ] ].

goodbye_n1 := n_mass_count_le &
 [ STEM < "goodbye" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_goodbye_n_1_rel",
            PHON.ONSET con ] ].

goodbye_root_pre := adv_disc_preh_grt_le &
 [ STEM < "goodbye" >,
   SYNSEM [ LKEYS.KEYREL.CARG "goodbye",
            PHON.ONSET con ] ].

goodies_n1 := n_plur_nocmpnd_le &
 [ STEM < "goodies" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_goodies_n_1_rel",
            PHON.ONSET con ] ].

goodness_n1 := n_mass_count_le &
 [ STEM < "goodness" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_goodness_n_1_rel",
            PHON.ONSET con ] ].

goodness_root := adv_s_pre_word_root_le &
 [ STEM < "goodness" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_goodness_a_1_rel",
            PHON.ONSET con ] ].

goodnight_root_post := adv_disc_posth_grt_le &
 [ STEM < "goodnight" >,
   SYNSEM [ LKEYS.KEYREL.CARG "goodnight",
            PHON.ONSET con ] ].

goodnight_root_pre := adv_disc_preh_grt_le &
 [ STEM < "goodnight" >,
   SYNSEM [ LKEYS.KEYREL.CARG "goodnight",
            PHON.ONSET con ] ].

goods_n1 := n_plur_nocmpnd_le &
 [ STEM < "good" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_goods_n_1_rel",
            PHON.ONSET con ] ].

goodwill_n1 := n_mass_le &
 [ STEM < "goodwill" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_goodwill_n_1_rel",
            PHON.ONSET con ] ].

goodwill_n2 := n_mass_le &
 [ STEM < "good", "will" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_goodwill_n_1_rel",
            PHON.ONSET con ] ].

goose_n1 := n_mass_count_le &
 [ STEM < "goose" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_goose_n_1_rel",
            PHON.ONSET con ] ].

goral_n1 := n_intr_le &
 [ STEM < "goral" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_goral_n_1_rel",
            PHON.ONSET con ] ].

goretex_n1 := n_mass_le &
 [ STEM < "goretex" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_goretex_n_1_rel",
            PHON.ONSET con ] ].

gorge_n1 := n_intr_le &
 [ STEM < "gorge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gorge_n_1_rel",
            PHON.ONSET con ] ].

gorge_v1 := v_empty_prep_trans*_le &
 [ STEM < "gorge" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_gorge_v_on_rel" ],
            PHON.ONSET con ] ].

gorgeous_a1 := adj_intrans_le &
 [ STEM < "gorgeous" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gorgeous_a_1_rel",
            PHON.ONSET con ] ].

gorgeously_adv1 := adv_int_vp_le &
 [ STEM < "gorgeously" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gorgeous_a_1_rel",
            PHON.ONSET con ] ].

gosh_root_post := adv_s_post_word_nospec_le &
 [ STEM < "gosh" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gosh_a_1_rel",
            PHON.ONSET con ] ].

gosh_root_pre := adv_s_pre_word_root_le &
 [ STEM < "gosh" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gosh_a_1_rel",
            PHON.ONSET con ] ].

goslar_n1 := n_proper_city_le &
 [ STEM < "goslar" >,
   SYNSEM [ LKEYS.KEYREL.CARG "goslar",
            PHON.ONSET con ] ].

gospel_n := n_intr_le &
 [ STEM < "gospel" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gospel_n_1_rel",
            PHON.ONSET con ] ].

got_poss := v_poss_got_le &
 [ STEM < "got" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_got_v_1_rel",
            PHON.ONSET con ] ].

got_poss_prd := v_poss_got_prd_le &
 [ STEM < "got" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_got_v_prd_rel",
            PHON.ONSET con ] ].

got_to_v1 := va_quasimodal_psp_le &
 [ STEM < "got" >,
   SYNSEM [ LKEYS.KEYREL.PRED _got_v_to_rel,
            PHON.ONSET con ] ].

gotha_n1 := n_proper_city_le &
 [ STEM < "gotha" >,
   SYNSEM [ LKEYS.KEYREL.CARG "gotha",
            PHON.ONSET con ] ].

gothenburg := n_proper_le &
 [ STEM < "gothenburg" >,
   SYNSEM [ LKEYS.KEYREL.CARG "gothenburg",
            PHON.ONSET con ] ].

gothic_a1 := adj_intrans_le &
 [ STEM < "gothic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gothic_a_1_rel",
            PHON.ONSET con ] ].

gotta_v1 := va_modal_pos_noninv_le &
 [ STEM < "gotta" >,
   SYNSEM [ LKEYS.KEYREL.PRED _gotta_v_modal_rel,
            PHON.ONSET con ] ].

gouge_away_v1 := v_particle_np_le &
 [ STEM < "gouge" >,
   SYNSEM [ LKEYS [ --COMPKEY _away_p_sel_rel,
                    KEYREL.PRED "_gouge_v_away_rel" ],
            PHON.ONSET con ] ].

gouge_out_v1 := v_particle_np_le &
 [ STEM < "gouge" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_gouge_v_out_rel" ],
            PHON.ONSET con ] ].

gouge_v1 := v_np*_trans_le &
 [ STEM < "gouge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gouge_v_1_rel",
            PHON.ONSET con ] ].

goulash_n1 := n_intr_le &
 [ STEM < "goulash" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_goulash_n_1_rel",
            PHON.ONSET con ] ].

gourmet_a1 := adj_intrans_le &
 [ STEM < "gourmet" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gourmet_a_1_rel",
            PHON.ONSET con ] ].

gourmet_n1 := n_intr_le &
 [ STEM < "gourmet" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gourmet_n_1_rel",
            PHON.ONSET con ] ].

govern_v1 := v_np*_trans_le &
 [ STEM < "govern" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_govern_v_1_rel",
            PHON.ONSET con ] ].

govern_v2 := v_cp_ques_fin_inf_non_trans_le &
 [ STEM < "govern" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_govern_v_1_rel",
            PHON.ONSET con ] ].

governess_n1 := n_intr_le &
 [ STEM < "governess" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_governess_n_1_rel",
            PHON.ONSET con ] ].

government_n1 := n_ppof_le &
 [ STEM < "government" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_government_n_of_rel",
            PHON.ONSET con ] ].

governor_n1 := n_intr_le &
 [ STEM < "governor" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_governor_n_1_rel",
            PHON.ONSET con ] ].

governor_ttl := n_title_le &
 [ STEM < "governor" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_governor_n_1_rel",
            PHON.ONSET con ] ].

govinda_n1 := n_proper_le &
 [ STEM < "govinda" >,
   SYNSEM [ LKEYS.KEYREL.CARG "govinda",
            PHON.ONSET con ] ].

gown_n1 := n_intr_le &
 [ STEM < "gown" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gown_n_1_rel",
            PHON.ONSET con ] ].

gprs_n1 := n_proper_le &
 [ STEM < "gprs" >,
   SYNSEM [ LKEYS.KEYREL.CARG "gprs",
            PHON.ONSET con ] ].

gps_n1 := n_proper_le &
 [ STEM < "gps" >,
   SYNSEM [ LKEYS.KEYREL.CARG "gps",
            PHON.ONSET con ] ].

grab_at_v1 := v_empty_prep_intrans_le &
 [ STEM < "grab" >,
   SYNSEM [ LKEYS [ --COMPKEY _at_p_sel_rel,
                    KEYREL.PRED "_grab_v_at_rel" ],
            PHON.ONSET con ] ].

grab_n1 := n_intr_le &
 [ STEM < "grab" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_grab_n_1_rel",
            PHON.ONSET con ] ].

grab_v1 := v_np_trans_le &
 [ STEM < "grab" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_grab_v_1_rel",
            PHON.ONSET con ] ].

grab_v1_i := v_np_non_trans_idiom_le &
 [ STEM < "grab" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_grab_v_i_rel",
            PHON.ONSET con ] ].

grace_n1 := n_mass_count_le &
 [ STEM < "grace" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_grace_n_1_rel",
            PHON.ONSET con ] ].

grace_n2 := n_proper_le &
 [ STEM < "grace" >,
   SYNSEM [ LKEYS.KEYREL.CARG "grace",
            PHON.ONSET con ] ].

grace_v1 := v_np_trans_le &
 [ STEM < "grace" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_grace_v_1_rel",
            PHON.ONSET con ] ].

graceful_a1 := adj_intrans_le &
 [ STEM < "graceful" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_graceful_a_1_rel",
            PHON.ONSET con ] ].

gracefully := adv_int_vp_le &
 [ STEM < "gracefully" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_graceful_a_1_rel",
            PHON.ONSET con ] ].

gracefulness_n1 := n_mass_le &
 [ STEM < "gracefulness" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gracefulness_n_1_rel",
            PHON.ONSET con ] ].

gracious_a1 := adj_intrans_le &
 [ STEM < "gracious" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gracious_a_1_rel",
            PHON.ONSET con ] ].

gradation_n1 := n_mass_count_le &
 [ STEM < "gradation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gradation_n_1_rel",
            PHON.ONSET con ] ].

grade_n1 := n_intr_le &
 [ STEM < "grade" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_grade_n_1_rel",
            PHON.ONSET con ] ].

grade_v1 := v_np_trans_le &
 [ STEM < "grade" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_grade_v_1_rel",
            PHON.ONSET con ] ].

gradient_n1 := n_ppof_le &
 [ STEM < "gradient" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gradient_n_of_rel",
            PHON.ONSET con ] ].

gradual_a1 := adj_intrans_le &
 [ STEM < "gradual" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gradual_a_1_rel",
            PHON.ONSET con ] ].

gradually_adv1 := adv_int_vp_le &
 [ STEM < "gradually" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gradual_a_1_rel",
            PHON.ONSET con ] ].

graduate_n1 := n_intr_le &
 [ STEM < "graduate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_graduate_n_1_rel",
            PHON.ONSET con ] ].

graduate_v1 := v_np*_trans_le &
 [ STEM < "graduate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_graduate_v_1_rel",
            PHON.ONSET con ] ].

graduation_n1 := n_mass_count_ppof_le &
 [ STEM < "graduation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_graduation_n_of_rel",
            PHON.ONSET con ] ].

grain_n1 := n_mass_count_le &
 [ STEM < "grain" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_grain_n_1_rel",
            PHON.ONSET con ] ].

grainy_a1 := adj_intrans_le &
 [ STEM < "grainy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_grainy_a_1_rel",
            PHON.ONSET con ] ].

grammar_n1 := n_mass_count_le &
 [ STEM < "grammar" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_grammar_n_1_rel",
            PHON.ONSET con ] ].

grammarian_n1 := n_intr_le &
 [ STEM < "grammarian" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_grammarian_n_1_rel",
            PHON.ONSET con ] ].

grammatical_a1 := adj_intrans_le &
 [ STEM < "grammatical" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_grammatical_a_1_rel",
            PHON.ONSET con ] ].

gran_n1 := n_proper_le &
 [ STEM < "gran" >,
   SYNSEM [ LKEYS.KEYREL.CARG "gran",
            PHON.ONSET con ] ].

grand_canyon := n_intr_named_le &
 [ STEM < "grand", "canyon" >,
   SYNSEM [ LKEYS.KEYREL.CARG "grand_canyon",
            PHON.ONSET con ] ].

grand_isect := adj_intrans_le &
 [ STEM < "grand" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_grand_a_1_rel",
            PHON.ONSET con ] ].

granddad_n1 := n_intr_le &
 [ STEM < "granddad" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_granddad_n_1_rel",
            PHON.ONSET con ] ].

granddad_n2 := n_proper_le &
 [ STEM < "granddad" >,
   SYNSEM [ LKEYS.KEYREL.CARG "granddad",
            PHON.ONSET con ] ].

granddaughter_n1 := n_ppof_le &
 [ STEM < "granddaughter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_granddaughter_n_of_rel",
            PHON.ONSET con ] ].

grander := adj_comp_le &
 [ STEM < "grander" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_grand_a_1_rel",
            PHON.ONSET con ] ].

grandest_a1 := adj_superl_le &
 [ STEM < "grandest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_grand_a_1_rel",
            PHON.ONSET con ] ].

grandeur_n1 := n_mass_le &
 [ STEM < "grandeur" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_grandeur_n_1_rel",
            PHON.ONSET con ] ].

grandfather_in_v1 := v_particle_np_le &
 [ STEM < "grandfather" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_grandfather_v_in_rel" ],
            PHON.ONSET con ] ].

grandfather_n1 := n_intr_le &
 [ STEM < "grandfather" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_grandfather_n_1_rel",
            PHON.ONSET con ] ].

grandfather_v1 := v_np*_trans_le &
 [ STEM < "grandfather" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_grandfather_v_1_rel",
            PHON.ONSET con ] ].

grandiose_a1 := adj_intrans_le &
 [ STEM < "grandiose" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_grandiose_a_1_rel",
            PHON.ONSET con ] ].

grandma_n1 := n_intr_le &
 [ STEM < "grandma" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_grandma_n_1_rel",
            PHON.ONSET con ] ].

grandmother_n1 := n_intr_le &
 [ STEM < "grandmother" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_grandmother_n_1_rel",
            PHON.ONSET con ] ].

grandpa_n1 := n_intr_le &
 [ STEM < "grandpa" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_grandpa_n_1_rel",
            PHON.ONSET con ] ].

grandson_n1 := n_ppof_le &
 [ STEM < "grandson" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_grandson_n_of_rel",
            PHON.ONSET con ] ].

granfasta_n1 := n_proper_le &
 [ STEM < "granfasta" >,
   SYNSEM [ LKEYS.KEYREL.CARG "granfasta",
            PHON.ONSET con ] ].

granite_n1 := n_mass_le &
 [ STEM < "granite" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_granite_n_1_rel",
            PHON.ONSET con ] ].

granny_n1 := n_intr_le &
 [ STEM < "granny" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_granny_n_1_rel",
            PHON.ONSET con ] ].

granny_n2 := n_proper_le &
 [ STEM < "granny" >,
   SYNSEM [ LKEYS.KEYREL.CARG "granny",
            PHON.ONSET con ] ].

grant_n1 := n_intr_le &
 [ STEM < "grant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_grant_n_1_rel",
            PHON.ONSET con ] ].

grant_n2 := n_proper_le &
 [ STEM < "grant" >,
   SYNSEM [ LKEYS.KEYREL.CARG "grant",
            PHON.ONSET con ] ].

grant_v1 := v_np*_trans_le &
 [ STEM < "grant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_grant_v_1_rel",
            PHON.ONSET con ] ].

grant_v2 := v_ditrans_only_le &
 [ STEM < "grant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_grant_v_1_rel",
            PHON.ONSET con ] ].

grant_v3 := v_cp_prop_non_trans_le &
 [ STEM < "grant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_grant_v_1_rel",
            PHON.ONSET con ] ].

granted_n1_i := n_plur_idiom_le &
 [ STEM < "granted" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_granted_n_i_rel",
            PHON.ONSET con ] ].

granular_a1 := adj_intrans_le &
 [ STEM < "granular" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_granular_a_1_rel",
            PHON.ONSET con ] ].

grape_n1 := n_mass_count_le &
 [ STEM < "grape" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_grape_n_1_rel",
            PHON.ONSET con ] ].

graph_n1 := n_ppof_le &
 [ STEM < "graph" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_graph_n_of_rel",
            PHON.ONSET con ] ].

graph_v1 := v_np_trans_le &
 [ STEM < "graph" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_graph_v_1_rel",
            PHON.ONSET con ] ].

graphic_isect := adj_intrans_le &
 [ STEM < "graphic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_graphic_a_1_rel",
            PHON.ONSET con ] ].

graphical_a1 := adj_intrans_le &
 [ STEM < "graphical" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_graphical_a_1_rel",
            PHON.ONSET con ] ].

graphically_isect := adv_int_vp_le &
 [ STEM < "graphically" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_graphical_a_1_rel",
            PHON.ONSET con ] ].

graphics_n1 := n_plur_nocmpnd_le &
 [ STEM < "graphic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_graphics_n_1_rel",
            PHON.ONSET con ] ].

grasp_n1 := n_intr_sg_le &
 [ STEM < "grasp" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_grasp_n_1_rel",
            PHON.ONSET con ] ].

grasp_v1 := v_np_trans_le &
 [ STEM < "grasp" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_grasp_v_1_rel",
            PHON.ONSET con ] ].

grasp_v2 := v_cp_non_trans_le &
 [ STEM < "grasp" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_grasp_v_1_rel",
            PHON.ONSET con ] ].

grass_n1 := n_mass_count_le &
 [ STEM < "grass" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_grass_n_1_rel",
            PHON.ONSET con ] ].

grassland_n1 := n_intr_le &
 [ STEM < "grassland" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_grassland_n_1_rel",
            PHON.ONSET con ] ].

grassy_a1 := adj_intrans_le &
 [ STEM < "grassy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_grassy_a_1_rel",
            PHON.ONSET con ] ].

grate_n1 := n_intr_le &
 [ STEM < "grate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_grate_n_1_rel",
            PHON.ONSET con ] ].

grate_on_v1 := v_empty_prep_intrans_le &
 [ STEM < "grate" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_grate_v_on_rel" ],
            PHON.ONSET con ] ].

grate_v1 := v_np*_trans_le &
 [ STEM < "grate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_grate_v_1_rel",
            PHON.ONSET con ] ].

grateful_isect := adj_intrans_le &
 [ STEM < "grateful" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_grateful_a_1_rel",
            PHON.ONSET con ] ].

gratefully := adv_int_vp_le &
 [ STEM < "gratefully" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_grateful_a_1_rel",
            PHON.ONSET con ] ].

gratis_adv1 := adv_int_vp_post_le &
 [ STEM < "gratis" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gratis_a_1_rel",
            PHON.ONSET con ] ].

gratuitously_adv1 := adv_int_vp_le &
 [ STEM < "gratuitously" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gratuitous_a_1_rel",
            PHON.ONSET con ] ].

gravafjellet_n1 := n_proper_le &
 [ STEM < "gravafjellet" >,
   SYNSEM [ LKEYS.KEYREL.CARG "gravafjellet",
            PHON.ONSET con ] ].

gravdal_n1 := n_proper_le &
 [ STEM < "gravdal" >,
   SYNSEM [ LKEYS.KEYREL.CARG "gravdal",
            PHON.ONSET con ] ].

gravdalen_n1 := n_proper_le &
 [ STEM < "gravdalen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "gravdalen",
            PHON.ONSET con ] ].

grave_a1 := adj_intrans_le &
 [ STEM < "grave" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_grave_a_1_rel",
            PHON.ONSET con ] ].

grave_n1 := n_intr_le &
 [ STEM < "grave" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_grave_n_1_rel",
            PHON.ONSET con ] ].

gravel_n1 := n_mass_count_le &
 [ STEM < "gravel" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gravel_n_1_rel",
            PHON.ONSET con ] ].

graver := adj_comp_le &
 [ STEM < "graver" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_grave_a_1_rel",
            PHON.ONSET con ] ].

graver_n1 := n_intr_le &
 [ STEM < "graver" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_graver_n_1_rel",
            PHON.ONSET con ] ].

gravest_a1 := adj_superl_le &
 [ STEM < "gravest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_grave_a_1_rel",
            PHON.ONSET con ] ].

gravestone_n1 := n_intr_le &
 [ STEM < "gravestone" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gravestone_n_1_rel",
            PHON.ONSET con ] ].

graveyard_n1 := n_intr_le &
 [ STEM < "graveyard" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_graveyard_n_1_rel",
            PHON.ONSET con ] ].

gravho := n_proper_le &
 [ STEM < "gravho" >,
   SYNSEM [ LKEYS.KEYREL.CARG "gravho",
            PHON.ONSET con ] ].

gravhodalseter := n_proper_le &
 [ STEM < "gravhodalseter" >,
   SYNSEM [ LKEYS.KEYREL.CARG "gravhodalseter",
            PHON.ONSET con ] ].

gravitate_toward_v1 := v_empty_prep_intrans_le &
 [ STEM < "gravitate" >,
   SYNSEM [ LKEYS [ --COMPKEY _toward_p_sel_rel,
                    KEYREL.PRED "_gravitate_v_toward_rel" ],
            PHON.ONSET con ] ].

gravitate_v1 := v_unerg_le &
 [ STEM < "gravitate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gravitate_v_1_rel",
            PHON.ONSET con ] ].

gravitation_n1 := n_mass_le &
 [ STEM < "gravitation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gravitation_n_1_rel",
            PHON.ONSET con ] ].

gravity_n1 := n_mass_le &
 [ STEM < "gravity" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gravity_n_1_rel",
            PHON.ONSET con ] ].

gray_n1 := n_mass_count_le &
 [ STEM < "gray" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_grey_n_1_rel",
            PHON.ONSET con ] ].

grayish_a1 := adj_intrans_le &
 [ STEM < "grayish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_grayish_a_1_rel",
            PHON.ONSET con ] ].

graze_v1 := v_unerg_le &
 [ STEM < "graze" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_graze_v_1_rel",
            PHON.ONSET con ] ].

graze_v2 := v_np_trans_le &
 [ STEM < "graze" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_graze_v_cause_rel",
            PHON.ONSET con ] ].

grease_n1 := n_intr_le &
 [ STEM < "grease" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_grease_n_1_rel",
            PHON.ONSET con ] ].

great_a1 := adv_int_vp_post_le &
 [ STEM < "great" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_great_a_1_rel",
            PHON.ONSET con ] ].

great_adj := adj_intrans_le &
 [ STEM < "great" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_great_a_1_rel",
            PHON.ONSET con ] ].

great_britain := n_proper_le &
 [ STEM < "great", "britain" >,
   SYNSEM [ LKEYS.KEYREL.CARG "great_britain",
            PHON.ONSET con ] ].

great_root_post := adv_s_post_word_nospec_le &
 [ STEM < "great" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_great_a_1_rel",
            PHON.ONSET con ] ].

great_root_pre := adv_s_pre_word_root_le &
 [ STEM < "great" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_great_a_1_rel",
            PHON.ONSET con ] ].

great_scot_n1 := n_proper_le &
 [ STEM < "great", "scot" >,
   SYNSEM [ LKEYS.KEYREL.CARG "great_scot",
            PHON.ONSET con ] ].

great_wall := n_intr_named_le &
 [ STEM < "great", "wall" >,
   SYNSEM [ LKEYS.KEYREL.CARG "great_wall",
            PHON.ONSET con ] ].

greater := adj_comp_le &
 [ STEM < "greater" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_great_a_1_rel",
            PHON.ONSET con ] ].

greatest_a1 := adj_superl_le &
 [ STEM < "greatest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_great_a_1_rel",
            PHON.ONSET con ] ].

greatly_adv1 := adv_int_vp_le &
 [ STEM < "greatly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_great_a_1_rel",
            PHON.ONSET con ] ].

greatness_n1 := n_mass_le &
 [ STEM < "greatness" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_greatness_n_1_rel",
            PHON.ONSET con ] ].

greece_n1 := n_proper_le &
 [ STEM < "greece" >,
   SYNSEM [ LKEYS.KEYREL.CARG "greece",
            PHON.ONSET con ] ].

greediness_n1 := n_mass_le &
 [ STEM < "greediness" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_greediness_n_1_rel",
            PHON.ONSET con ] ].

greek_a1 := adj_intrans_le &
 [ STEM < "greek" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_greek_a_1_rel",
            PHON.ONSET con ] ].

greek_n1 := n_proper_le &
 [ STEM < "greek" >,
   SYNSEM [ LKEYS.KEYREL.CARG "greek",
            PHON.ONSET con ] ].

greek_n2 := n_intr_le &
 [ STEM < "greek" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_greek_n_1_rel",
            PHON.ONSET con ] ].

green_isect := adj_intrans_le &
 [ STEM < "green" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_green_a_1_rel",
            PHON.ONSET con ] ].

green_n1 := n_mass_count_le &
 [ STEM < "green" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_green_n_1_rel",
            PHON.ONSET con ] ].

green_n2 := n_color_le &
 [ STEM < "green" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_green_n_2_rel",
            PHON.ONSET con ] ].

greenery_n1 := n_mass_le &
 [ STEM < "greenery" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_greenery_n_1_rel",
            PHON.ONSET con ] ].

greenhouse_n1 := n_intr_le &
 [ STEM < "greenhouse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_greenhouse_n_1_rel",
            PHON.ONSET con ] ].

greenish_a1 := adj_intrans_le &
 [ STEM < "greenish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_greenish_a_1_rel",
            PHON.ONSET con ] ].

greet_v1 := v_np_trans_le &
 [ STEM < "greet" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_greet_v_1_rel",
            PHON.ONSET con ] ].

greeting_n1 := n_intr_le &
 [ STEM < "greeting" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_greeting_n_1_rel",
            PHON.ONSET con ] ].

greg_n1 := n_proper_le &
 [ STEM < "greg" >,
   SYNSEM [ LKEYS.KEYREL.CARG "greg",
            PHON.ONSET con ] ].

grenada_n1 := n_proper_city_le &
 [ STEM < "grenada" >,
   SYNSEM [ LKEYS.KEYREL.CARG "grenada",
            PHON.ONSET con ] ].

grep_for_v1 := v_empty_prep_intrans_le &
 [ STEM < "grep" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_grep_v_for_rel" ],
            PHON.ONSET con ] ].

grep_n1 := n_proper_le &
 [ STEM < "grep" >,
   SYNSEM [ LKEYS.KEYREL.CARG "grep",
            PHON.ONSET con ] ].

grep_v1 := v_np*_trans_le &
 [ STEM < "grep" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_grep_v_1_rel",
            PHON.ONSET con ] ].

gretzky_n1 := n_proper_le &
 [ STEM < "gretzky" >,
   SYNSEM [ LKEYS.KEYREL.CARG "gretzky",
            PHON.ONSET con ] ].

grey_adj := adj_intrans_le &
 [ STEM < "grey" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_grey_a_1_rel",
            PHON.ONSET con ] ].

grey_n1 := n_mass_count_le &
 [ STEM < "grey" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_grey_n_1_rel",
            PHON.ONSET con ] ].

grid_n1 := n_intr_le &
 [ STEM < "grid" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_grid_n_1_rel",
            PHON.ONSET con ] ].

griechstrasse := n_proper_le &
 [ STEM < "griechstrasse" >,
   SYNSEM [ LKEYS.KEYREL.CARG "griechstrasse",
            PHON.ONSET con ] ].

grieg := n_proper_le &
 [ STEM < "grieg" >,
   SYNSEM [ LKEYS.KEYREL.CARG "grieg",
            PHON.ONSET con ] ].

gries_n1 := n_proper_le &
 [ STEM < "gries" >,
   SYNSEM [ LKEYS.KEYREL.CARG "gries",
            PHON.ONSET con ] ].

grieve_at_v1 := v_empty_prep_intrans_le &
 [ STEM < "grieve" >,
   SYNSEM [ LKEYS [ --COMPKEY _at_p_sel_rel,
                    KEYREL.PRED "_grieve_v_at_rel" ],
            PHON.ONSET con ] ].

grieve_for_v1 := v_empty_prep_intrans_le &
 [ STEM < "grieve" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_grieve_v_for_rel" ],
            PHON.ONSET con ] ].

grieve_over_v1 := v_empty_prep_intrans_le &
 [ STEM < "grieve" >,
   SYNSEM [ LKEYS [ --COMPKEY _over_p_sel_rel,
                    KEYREL.PRED "_grieve_v_over_rel" ],
            PHON.ONSET con ] ].

grieve_v1 := v_np*_trans_le &
 [ STEM < "grieve" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_grieve_v_1_rel",
            PHON.ONSET con ] ].

grill_n1 := n_intr_le &
 [ STEM < "grill" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_grill_n_1_rel",
            PHON.ONSET con ] ].

grimsa := n_proper_le &
 [ STEM < "grimsa" >,
   SYNSEM [ LKEYS.KEYREL.CARG "grimsa",
            PHON.ONSET con ] ].

grimsdalshytta := n_proper_le &
 [ STEM < "grimsdalshytta" >,
   SYNSEM [ LKEYS.KEYREL.CARG "grimsdalshytta",
            PHON.ONSET con ] ].

grimsnuten := n_proper_le &
 [ STEM < "grimsnuten" >,
   SYNSEM [ LKEYS.KEYREL.CARG "grimsnuten",
            PHON.ONSET con ] ].

grin_at_v1 := v_empty_prep_intrans_le &
 [ STEM < "grin" >,
   SYNSEM [ LKEYS [ --COMPKEY _at_p_sel_rel,
                    KEYREL.PRED "_grin_v_at_rel" ],
            PHON.ONSET con ] ].

grin_n1 := n_intr_le &
 [ STEM < "grin" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_grin_n_1_rel",
            PHON.ONSET con ] ].

grin_v1 := v_unerg_le &
 [ STEM < "grin" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_grin_v_1_rel",
            PHON.ONSET con ] ].

grinch_n1 := n_intr_le &
 [ STEM < "grinch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_grinch_n_1_rel",
            PHON.ONSET con ] ].

grind_n1 := n_intr_le &
 [ STEM < "grind" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_grind_n_1_rel",
            PHON.ONSET con ] ].

grind_out_v1 := v_particle_np_le &
 [ STEM < "grind" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_grind_v_out_rel" ],
            PHON.ONSET con ] ].

grind_v1 := v_np*_trans_le &
 [ STEM < "grind" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_grind_v_1_rel",
            PHON.ONSET con ] ].

grindafletehytta := n_proper_le &
 [ STEM < "grindafletehytta" >,
   SYNSEM [ LKEYS.KEYREL.CARG "grindafletehytta",
            PHON.ONSET con ] ].

grindaflethytta_n1 := n_proper_le &
 [ STEM < "grindaflethytta" >,
   SYNSEM [ LKEYS.KEYREL.CARG "grindaflethytta",
            PHON.ONSET con ] ].

grindefletehytta := n_proper_le &
 [ STEM < "grindefletehytta" >,
   SYNSEM [ LKEYS.KEYREL.CARG "grindefletehytta",
            PHON.ONSET con ] ].

grip_n1 := n_mass_count_le &
 [ STEM < "grip" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_grip_n_1_rel",
            PHON.ONSET con ] ].

grip_v1 := v_np*_trans_le &
 [ STEM < "grip" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_grip_v_1_rel",
            PHON.ONSET con ] ].

grisletjÃ¸rnene_n1 := n_proper_le &
 [ STEM < "grisletjÃ¸rnene" >,
   SYNSEM [ LKEYS.KEYREL.CARG "grisletjÃ¸rnene",
            PHON.ONSET con ] ].

gro_n1 := n_proper_le &
 [ STEM < "gro" >,
   SYNSEM [ LKEYS.KEYREL.CARG "gro",
            PHON.ONSET con ] ].

groan_excl_post := adv_s_post_word_nospec_le &
 [ STEM < "groan" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_groan_a_1_rel",
            PHON.ONSET con ] ].

groan_excl_pre := adv_s_pre_word_root_le &
 [ STEM < "groan" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_groan_a_1_rel",
            PHON.ONSET con ] ].

groan_n1 := n_intr_le &
 [ STEM < "groan" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_groan_n_1_rel",
            PHON.ONSET con ] ].

groan_v1 := v_unerg_le &
 [ STEM < "groan" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_groan_v_1_rel",
            PHON.ONSET con ] ].

groceries_n1 := n_plur_le &
 [ STEM < "grocery" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_groceries_n_1_rel",
            PHON.ONSET con ] ].

grona := n_proper_le &
 [ STEM < "grona" >,
   SYNSEM [ LKEYS.KEYREL.CARG "grona",
            PHON.ONSET con ] ].

groom_n1 := n_intr_le &
 [ STEM < "groom" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_groom_n_1_rel",
            PHON.ONSET con ] ].

groom_v1 := v_np_trans_le &
 [ STEM < "groom" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_groom_v_1_rel",
            PHON.ONSET con ] ].

groove_n1 := n_intr_le &
 [ STEM < "groove" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_groove_n_1_rel",
            PHON.ONSET con ] ].

gross_a1 := adj_intrans_le &
 [ STEM < "gross" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gross_a_1_rel",
            PHON.ONSET con ] ].

gross_n1 := n_mass_count_le &
 [ STEM < "gross" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gross_n_1_rel",
            PHON.ONSET con ] ].

gross_v1 := v_np_trans_le &
 [ STEM < "gross" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gross_v_1_rel",
            PHON.ONSET con ] ].

grossheim_n1 := n_proper_city_le &
 [ STEM < "grossheim" >,
   SYNSEM [ LKEYS.KEYREL.CARG "grossheim",
            PHON.ONSET con ] ].

grotesque_a1 := adj_intrans_le &
 [ STEM < "grotesque" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_grotesque_a_1_rel",
            PHON.ONSET con ] ].

groth-heine_n1 := n_proper_city_le &
 [ STEM < "groth", "heine" >,
   SYNSEM [ LKEYS.KEYREL.CARG "groth-heine",
            PHON.ONSET con ] ].

groth_n1 := n_proper_le &
 [ STEM < "groth" >,
   SYNSEM [ LKEYS.KEYREL.CARG "groth",
            PHON.ONSET con ] ].

grotto_n1 := n_intr_le &
 [ STEM < "grotto" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_grotto_n_1_rel",
            PHON.ONSET con ] ].

ground_a1 := adj_intrans_le &
 [ STEM < "ground" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ground_a_1_rel",
            PHON.ONSET con ] ].

ground_n1 := n_mass_count_le &
 [ STEM < "ground" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ground_n_1_rel",
            PHON.ONSET con ] ].

ground_out_v1 := v_particle_le &
 [ STEM < "ground" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_ground_v_out_rel" ],
            PHON.ONSET con ] ].

ground_v1 := v_np_trans_le &
 [ STEM < "ground" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ground_v_1_rel",
            PHON.ONSET con ] ].

group_into_v1 := v_empty_prep_intrans_le &
 [ STEM < "group" >,
   SYNSEM [ LKEYS [ --COMPKEY _into_p_sel_rel,
                    KEYREL.PRED "_group_v_into_rel" ],
            PHON.ONSET con ] ].

group_n1 := n_intr_le &
 [ STEM < "group" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_group_n_of_rel",
            PHON.ONSET con ] ].

group_n2 := n_group_ppof_le &
 [ STEM < "group" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_group_n_of_rel",
            PHON.ONSET con ] ].

group_post_ttl := n_post_title_le &
 [ STEM < "group" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_group_n_of_rel",
            PHON.ONSET con ] ].

group_v1 := v_empty_prep_trans_le &
 [ STEM < "group" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _into_p_sel_rel,
                    KEYREL.PRED "_group_v_cause-into_rel" ],
            PHON.ONSET con ] ].

group_v2 := v_unacc_le &
 [ STEM < "group" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_group_v_1_rel",
            PHON.ONSET con ] ].

group_v3 := v_np_trans_noger_le &
 [ STEM < "group" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_group_v_cause-into_rel",
            PHON.ONSET con ] ].

grouse_n1 := n_intr_le &
 [ STEM < "grouse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_grouse_n_1_rel",
            PHON.ONSET con ] ].

grove_n1 := n_intr_le &
 [ STEM < "grove" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_grove_n_1_rel",
            PHON.ONSET con ] ].

grow_on_v1 := v_empty_prep_intrans_le &
 [ STEM < "grow" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_grow_v_on_rel" ],
            PHON.ONSET con ] ].

grow_over_v1 := v_particle_le &
 [ STEM < "grow" >,
   SYNSEM [ LKEYS [ --COMPKEY _over_p_sel_rel,
                    KEYREL.PRED "_grow_v_over_rel" ],
            PHON.ONSET con ] ].

grow_up_v2 := v_particle_le &
 [ STEM < "grow" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_grow_v_up_rel" ],
            PHON.ONSET con ] ].

grow_v1 := v_np_trans_le &
 [ STEM < "grow" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_grow_v_cause_rel",
            PHON.ONSET con ] ].

grow_v2 := v_unacc_dir_le &
 [ STEM < "grow" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_grow_v_1_rel",
            PHON.ONSET con ] ].

grow_v3 := v_prdp_pp_seq_adj_le &
 [ STEM < "grow" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_grow_v_to_rel",
            PHON.ONSET con ] ].

grow_v4 := v_subj_equi_le &
 [ STEM < "grow" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_grow_v_1_rel",
            PHON.ONSET con ] ].

growl_at_v1 := v_empty_prep_intrans_le &
 [ STEM < "growl" >,
   SYNSEM [ LKEYS [ --COMPKEY _at_p_sel_rel,
                    KEYREL.PRED "_growl_v_at_rel" ],
            PHON.ONSET con ] ].

growl_n1 := n_intr_le &
 [ STEM < "growl" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_growl_n_1_rel",
            PHON.ONSET con ] ].

growl_v1 := v_np*_trans_le &
 [ STEM < "growl" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_growl_v_1_rel",
            PHON.ONSET con ] ].

growl_v2 := v_cp_prop_non_trans_le &
 [ STEM < "growl" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_growl_v_1_rel",
            PHON.ONSET con ] ].

grown_up_a1 := adj_intrans_le &
 [ STEM < "grown", "up" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_grown+up_a_1_rel",
            PHON.ONSET con ] ].

grownup_n1 := n_intr_le &
 [ STEM < "grownup" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_grownup_n_1_rel",
            PHON.ONSET con ] ].

grownup_n2 := n_intr_le &
 [ STEM < "grown-", "up" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_grownup_n_1_rel",
            PHON.ONSET con ] ].

growth_n1 := n_mass_count_ppof_le &
 [ STEM < "growth" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_growth_n_of_rel",
            PHON.ONSET con ] ].

grubenhagen_n1 := n_proper_city_le &
 [ STEM < "grubenhagen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "grubenhagen",
            PHON.ONSET con ] ].

gruebchenandermarktkirche_nd := n_proper_le &
 [ STEM < "gruebchen", "an", "der", "marktkirche" >,
   SYNSEM [ LKEYS.KEYREL.CARG "gruebchenandermarktkirche",
            PHON.ONSET con ] ].

gruidalen_n1 := n_proper_le &
 [ STEM < "gruidalen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "gruidalen",
            PHON.ONSET con ] ].

grumble_v1 := v_unerg_le &
 [ STEM < "grumble" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_grumble_v_1_rel",
            PHON.ONSET con ] ].

grunnevatnet_n1 := n_proper_le &
 [ STEM < "grunnevatnet" >,
   SYNSEM [ LKEYS.KEYREL.CARG "grunnevatnet",
            PHON.ONSET con ] ].

grunt_at_v1 := v_empty_prep_intrans_le &
 [ STEM < "grunt" >,
   SYNSEM [ LKEYS [ --COMPKEY _at_p_sel_rel,
                    KEYREL.PRED "_grunt_v_at_rel" ],
            PHON.ONSET con ] ].

grunt_n1 := n_ppof_le &
 [ STEM < "grunt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_grunt_n_of_rel",
            PHON.ONSET con ] ].

grunt_v1 := v_np*_trans_le &
 [ STEM < "grunt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_grunt_v_1_rel",
            PHON.ONSET con ] ].

grunt_v2 := v_cp_prop_non_trans_le &
 [ STEM < "grunt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_grunt_v_1_rel",
            PHON.ONSET con ] ].

gruvefjellet_n1 := n_proper_le &
 [ STEM < "gruvefjellet" >,
   SYNSEM [ LKEYS.KEYREL.CARG "gruvefjellet",
            PHON.ONSET con ] ].

grÃ¸na := n_proper_le &
 [ STEM < "grÃ¸na" >,
   SYNSEM [ LKEYS.KEYREL.CARG "grÃ¸na",
            PHON.ONSET con ] ].

grÃ¸na-dam := n_proper_le &
 [ STEM < "grÃ¸na-", "dam" >,
   SYNSEM [ LKEYS.KEYREL.CARG "grÃ¸na-dam",
            PHON.ONSET con ] ].

grÃ¸ndalen_n1 := n_proper_city_le &
 [ STEM < "grÃ¸ndalen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "grÃ¸ndalen",
            PHON.ONSET con ] ].

grÃ¸ne_n1 := n_proper_le &
 [ STEM < "grÃ¸ne" >,
   SYNSEM [ LKEYS.KEYREL.CARG "grÃ¸ne",
            PHON.ONSET con ] ].

grÃ¸nebergtjernet_n1 := n_proper_le &
 [ STEM < "grÃ¸nebergtjernet" >,
   SYNSEM [ LKEYS.KEYREL.CARG "grÃ¸nebergtjernet",
            PHON.ONSET con ] ].

grÃ¸nestÃ¸len := n_proper_le &
 [ STEM < "grÃ¸nestÃ¸len" >,
   SYNSEM [ LKEYS.KEYREL.CARG "grÃ¸nestÃ¸len",
            PHON.ONSET con ] ].

grÃ¸nevatn_n1 := n_proper_le &
 [ STEM < "grÃ¸nevatn" >,
   SYNSEM [ LKEYS.KEYREL.CARG "grÃ¸nevatn",
            PHON.ONSET con ] ].

grÃ¸nevatnet_n1 := n_proper_le &
 [ STEM < "grÃ¸nevatnet" >,
   SYNSEM [ LKEYS.KEYREL.CARG "grÃ¸nevatnet",
            PHON.ONSET con ] ].

grÃ¸nnebergtjernet_n1 := n_proper_le &
 [ STEM < "grÃ¸nnebergtjernet" >,
   SYNSEM [ LKEYS.KEYREL.CARG "grÃ¸nnebergtjernet",
            PHON.ONSET con ] ].

grÃ¸nolen_n1 := n_proper_le &
 [ STEM < "grÃ¸nolen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "grÃ¸nolen",
            PHON.ONSET con ] ].

gsm_n1 := n_mass_count_le &
 [ STEM < "gsm" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gsm_n_1_rel",
            PHON.ONSET con ] ].

guam_n1 := n_proper_le &
 [ STEM < "guam" >,
   SYNSEM [ LKEYS.KEYREL.CARG "guam",
            PHON.ONSET con ] ].

guangdong_n1 := n_proper_le &
 [ STEM < "guangdong" >,
   SYNSEM [ LKEYS.KEYREL.CARG "guangdong",
            PHON.ONSET con ] ].

guanghua_n1 := n_proper_le &
 [ STEM < "guanghua" >,
   SYNSEM [ LKEYS.KEYREL.CARG "guanghua",
            PHON.ONSET con ] ].

guangling_n1 := n_proper_le &
 [ STEM < "guangling" >,
   SYNSEM [ LKEYS.KEYREL.CARG "guangling",
            PHON.ONSET con ] ].

guangong_n1 := n_proper_le &
 [ STEM < "guangong" >,
   SYNSEM [ LKEYS.KEYREL.CARG "guangong",
            PHON.ONSET con ] ].

guangqi_n1 := n_proper_le &
 [ STEM < "guangqi" >,
   SYNSEM [ LKEYS.KEYREL.CARG "guangqi",
            PHON.ONSET con ] ].

guangxu_n1 := n_proper_le &
 [ STEM < "guangxu" >,
   SYNSEM [ LKEYS.KEYREL.CARG "guangxu",
            PHON.ONSET con ] ].

guanyi_n1 := n_proper_le &
 [ STEM < "guanyi" >,
   SYNSEM [ LKEYS.KEYREL.CARG "guanyi",
            PHON.ONSET con ] ].

guanyin_n1 := n_proper_le &
 [ STEM < "guanyin" >,
   SYNSEM [ LKEYS.KEYREL.CARG "guanyin",
            PHON.ONSET con ] ].

guarantee_n1 := n_cpcomp_fin_le &
 [ STEM < "guarantee" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_guarantee_n_of_rel",
            PHON.ONSET con ] ].

guarantee_n2 := n_ppof_le &
 [ STEM < "guarantee" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_guarantee_n_of_rel",
            PHON.ONSET con ] ].

guarantee_v1 := v_ditrans_le &
 [ STEM < "guarantee" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_guarantee_v_1_rel",
            PHON.ONSET con ] ].

guarantee_v2 := v_cp_fin_inf_non_trans_le &
 [ STEM < "guarantee" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_guarantee_v_1_rel",
            PHON.ONSET con ] ].

guarantee_v3 := v_np_trans_le &
 [ STEM < "guarantee" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_guarantee_v_1_rel",
            PHON.ONSET con ] ].

guarantee_v4 := v_obj_equi_le &
 [ STEM < "guarantee" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_guarantee_v_1_rel",
            PHON.ONSET con ] ].

guard_against_v1 := v_empty_prep_intrans_le &
 [ STEM < "guard" >,
   SYNSEM [ LKEYS [ --COMPKEY _against_p_sel_rel,
                    KEYREL.PRED "_guard_v_against_rel" ],
            PHON.ONSET con ] ].

guard_against_v2 := v_empty_prep_trans_le &
 [ STEM < "guard" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _against_p_sel_rel,
                    KEYREL.PRED "_guard_v_against_rel" ],
            PHON.ONSET con ] ].

guard_n1 := n_intr_le &
 [ STEM < "guard" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_guard_n_1_rel",
            PHON.ONSET con ] ].

guard_n1_i := n_intr_nospr_le &
 [ STEM < "guard" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_guard_n_1_rel",
            PHON.ONSET con ] ].

guard_v1 := v_np*_trans_le &
 [ STEM < "guard" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_guard_v_1_rel",
            PHON.ONSET con ] ].

guardian_n1 := n_intr_le &
 [ STEM < "guardian" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_guardian_n_1_rel",
            PHON.ONSET con ] ].

guatemala_n1 := n_proper_le &
 [ STEM < "guatemala" >,
   SYNSEM [ LKEYS.KEYREL.CARG "guatemala",
            PHON.ONSET con ] ].

guatemalan_a1 := adj_intrans_le &
 [ STEM < "guatemalan" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_guatemalan_a_1_rel",
            PHON.ONSET con ] ].

guatemalan_n1 := n_intr_le &
 [ STEM < "guatemalan" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_guatemalan_n_1_rel",
            PHON.ONSET con ] ].

gubei_n1 := n_proper_le &
 [ STEM < "gubei" >,
   SYNSEM [ LKEYS.KEYREL.CARG "gubei",
            PHON.ONSET con ] ].

gudbrandsdalen := n_proper_le &
 [ STEM < "gudbrandsdalen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "gudbrandsdalen",
            PHON.ONSET con ] ].

gudmundahl_n1 := n_proper_le &
 [ STEM < "gudmundahl" >,
   SYNSEM [ LKEYS.KEYREL.CARG "gudmundahl",
            PHON.ONSET con ] ].

gudvangen := n_proper_le &
 [ STEM < "gudvangen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "gudvangen",
            PHON.ONSET con ] ].

guerma := n_proper_city_le &
 [ STEM < "guerma" >,
   SYNSEM [ LKEYS.KEYREL.CARG "guerma",
            PHON.ONSET con ] ].

guess_at_v1 := v_empty_prep_intrans_le &
 [ STEM < "guess" >,
   SYNSEM [ LKEYS [ --COMPKEY _at_p_sel_rel,
                    KEYREL.PRED "_guess_v_at_rel" ],
            PHON.ONSET con ] ].

guess_n1 := n_intr_le &
 [ STEM < "guess" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_guess_n_1_rel",
            PHON.ONSET con ] ].

guess_n_gle := n_mass_count_nosort_le &
 [ STEM < "_guess_" >,
   SYNSEM.LKEYS.KEYREL [ CARG "_guess_",
                             PRED "guess_rel" ] ].

guess_v1 := v_np*_trans_le &
 [ STEM < "guess" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_guess_v_1_rel",
            PHON.ONSET con ] ].

guess_v2 := v_cp_fin_inf_non_trans_le &
 [ STEM < "guess" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_guess_v_1_rel",
            PHON.ONSET con ] ].

guess_what_root_post := adv_s_post_word_nospec_le &
 [ STEM < "guess", "what" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_guess+what_a_1_rel",
            PHON.ONSET con ] ].

guess_what_root_pre := adv_s_pre_word_root_le &
 [ STEM < "guess", "what" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_guess+what_a_1_rel",
            PHON.ONSET con ] ].

guest_n := n_ppof_le &
 [ STEM < "guest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_guest_n_of_rel",
            PHON.ONSET con ] ].

guestroom_n1 := n_intr_le &
 [ STEM < "guestroom" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_guestroom_n_1_rel",
            PHON.ONSET con ] ].

guetersloh_nd := n_proper_city_le &
 [ STEM < "guetersloh" >,
   SYNSEM [ LKEYS.KEYREL.CARG "guetersloh",
            PHON.ONSET con ] ].

guettingen_nd := n_proper_city_le &
 [ STEM < "guettingen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "guettingen",
            PHON.ONSET con ] ].

gui_mao_n1 := n_proper_le &
 [ STEM < "gui", "mao" >,
   SYNSEM [ LKEYS.KEYREL.CARG "gui_mao",
            PHON.ONSET con ] ].

guidance_n1 := n_mass_le &
 [ STEM < "guidance" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_guidance_n_1_rel",
            PHON.ONSET con ] ].

guide_n := n_intr_le &
 [ STEM < "guide" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_guide_n_1_rel",
            PHON.ONSET con ] ].

guide_v1 := v_np*_trans_le &
 [ STEM < "guide" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_guide_v_to_rel",
            PHON.ONSET con ] ].

guide_v2 := v_to_trans_le &
 [ STEM < "guide" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_guide_v_to_rel",
            PHON.ONSET con ] ].

guidebook_n1 := n_ppof_le &
 [ STEM < "guidebook" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_guidebook_n_of_rel",
            PHON.ONSET con ] ].

guideline_n1 := n_intr_le &
 [ STEM < "guideline" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_guideline_n_1_rel",
            PHON.ONSET con ] ].

guild_n1 := n_intr_le &
 [ STEM < "guild" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_guild_n_1_rel",
            PHON.ONSET con ] ].

guilder_n1 := n_intr_le &
 [ STEM < "guilder" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_guilder_n_1_rel",
            PHON.ONSET con ] ].

guilin_n1 := n_proper_le &
 [ STEM < "guilin" >,
   SYNSEM [ LKEYS.KEYREL.CARG "guilin",
            PHON.ONSET con ] ].

guilt_n1 := n_mass_le &
 [ STEM < "guilt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_guilt_n_1_rel",
            PHON.ONSET con ] ].

guinea_n1 := n_proper_le &
 [ STEM < "guinea" >,
   SYNSEM [ LKEYS.KEYREL.CARG "guinea",
            PHON.ONSET con ] ].

guinness_n1 := n_proper_le &
 [ STEM < "guinness" >,
   SYNSEM [ LKEYS.KEYREL.CARG "guinness",
            PHON.ONSET con ] ].

guise_n1 := n_intr_le &
 [ STEM < "guise" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_guise_n_1_rel",
            PHON.ONSET con ] ].

guitar_n1 := n_intr_le &
 [ STEM < "guitar" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_guitar_n_1_rel",
            PHON.ONSET con ] ].

gulf_n1 := n_intr_le &
 [ STEM < "gulf" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gulf_n_1_rel",
            PHON.ONSET con ] ].

gull_n1 := n_intr_le &
 [ STEM < "gull" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gull_n_1_rel",
            PHON.ONSET con ] ].

gullifty_n1 := n_proper_le &
 [ STEM < "gullifty" >,
   SYNSEM [ LKEYS.KEYREL.CARG "gullifty",
            PHON.ONSET con ] ].

gully_n1 := n_intr_le &
 [ STEM < "gully" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gully_n_1_rel",
            PHON.ONSET con ] ].

gulp_down_v1 := v_particle_np_le &
 [ STEM < "gulp" >,
   SYNSEM [ LKEYS [ --COMPKEY _down_p_sel_rel,
                    KEYREL.PRED "_gulp_v_down_rel" ],
            PHON.ONSET con ] ].

gulp_excl_post := adv_s_post_word_nospec_le &
 [ STEM < "gulp" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gulp_a_1_rel",
            PHON.ONSET con ] ].

gulp_excl_pre := adv_s_pre_word_root_le &
 [ STEM < "gulp" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gulp_a_1_rel",
            PHON.ONSET con ] ].

gulp_n1 := n_intr_le &
 [ STEM < "gulp" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gulp_n_1_rel",
            PHON.ONSET con ] ].

gulp_v1 := v_np*_trans_le &
 [ STEM < "gulp" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gulp_v_1_rel",
            PHON.ONSET con ] ].

gum_n1 := n_intr_le &
 [ STEM < "gum" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gum_n_1_rel",
            PHON.ONSET con ] ].

gummy_a1 := adj_intrans_le &
 [ STEM < "gummy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gummy_a_1_rel",
            PHON.ONSET con ] ].

gun_n1 := n_intr_le &
 [ STEM < "gun" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gun_n_1_rel",
            PHON.ONSET con ] ].

gunboat_n1 := n_intr_le &
 [ STEM < "gunboat" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gunboat_n_1_rel",
            PHON.ONSET con ] ].

gunfire_n1 := n_mass_le &
 [ STEM < "gunfire" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gunfire_n_1_rel",
            PHON.ONSET con ] ].

gunnery_n1 := n_mass_count_le &
 [ STEM < "gunnery" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gunnery_n_1_rel",
            PHON.ONSET con ] ].

gunpowder_n1 := n_mass_le &
 [ STEM < "gunpowder" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gunpowder_n_1_rel",
            PHON.ONSET con ] ].

gunstock_n1 := n_intr_le &
 [ STEM < "gunstock" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gunstock_n_1_rel",
            PHON.ONSET con ] ].

guo_moruo_n1 := n_proper_le &
 [ STEM < "guo", "moruo" >,
   SYNSEM [ LKEYS.KEYREL.CARG "guo_moruo",
            PHON.ONSET con ] ].

guridalen_n1 := n_proper_le &
 [ STEM < "guridalen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "guridalen",
            PHON.ONSET con ] ].

guru_n1 := n_intr_le &
 [ STEM < "guru" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_guru_n_1_rel",
            PHON.ONSET con ] ].

gush_n1 := n_intr_le &
 [ STEM < "gush" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gush_n_1_rel",
            PHON.ONSET con ] ].

gush_v1 := v_unerg_le &
 [ STEM < "gush" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gush_v_1_rel",
            PHON.ONSET con ] ].

gust_n1 := n_ppof_le &
 [ STEM < "gust" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gust_n_of_rel",
            PHON.ONSET con ] ].

gust_v1 := v_unerg_le &
 [ STEM < "gust" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gust_v_1_rel",
            PHON.ONSET con ] ].

gusty_a1 := adj_intrans_le &
 [ STEM < "gusty" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gusty_a_1_rel",
            PHON.ONSET con ] ].

gusty_a2 := adj_atrans_le &
 [ STEM < "gusty" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gusty_a_1_rel",
            PHON.ONSET con ] ].

guttural_a1 := adj_intrans_le &
 [ STEM < "guttural" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_guttural_a_1_rel",
            PHON.ONSET con ] ].

guweijun_n1 := n_proper_le &
 [ STEM < "guweijun" >,
   SYNSEM [ LKEYS.KEYREL.CARG "guweijun",
            PHON.ONSET con ] ].

guy_n1 := n_intr_le &
 [ STEM < "guy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_guy_n_1_rel",
            PHON.ONSET con ] ].

guyi_n1 := n_proper_le &
 [ STEM < "guyi" >,
   SYNSEM [ LKEYS.KEYREL.CARG "guyi",
            PHON.ONSET con ] ].

gym_n1 := n_intr_le &
 [ STEM < "gym" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gym_n_1_rel",
            PHON.ONSET con ] ].

gymnasium_n1 := n_intr_le &
 [ STEM < "gymnasium" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gymnasium_n_1_rel",
            PHON.ONSET con ] ].

gynt := n_proper_le &
 [ STEM < "gynt" >,
   SYNSEM [ LKEYS.KEYREL.CARG "gynt",
            PHON.ONSET con ] ].

gÃ¥rden_n1 := n_proper_le &
 [ STEM < "gÃ¥rden" >,
   SYNSEM [ LKEYS.KEYREL.CARG "gÃ¥rden",
            PHON.ONSET con ] ].

gÃ¸ril_n1 := n_proper_le &
 [ STEM < "gÃ¸ril" >,
   SYNSEM [ LKEYS.KEYREL.CARG "gÃ¸ril",
            PHON.ONSET con ] ].

h_n1 := n_proper_le &
 [ STEM < "h" >,
   SYNSEM [ LKEYS.KEYREL.CARG "h",
            PHON.ONSET con ] ].

h_np1 := n_proper_le &
 [ STEM < "_h" >,
   SYNSEM [ LKEYS.KEYREL.CARG "h",
            PHON.ONSET voc ] ].

h_period_np1 := n_proper_le &
 [ STEM < "h." >,
   SYNSEM [ LKEYS.KEYREL.CARG "h",
            PHON.ONSET voc ] ].

h_period_np2 := n_proper_le &
 [ STEM < "_h." >,
   SYNSEM [ LKEYS.KEYREL.CARG "h",
            PHON.ONSET voc ] ].

ha_ha_root_post := adv_s_post_word_nospec_le &
 [ STEM < "ha", "ha" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ha+ha_a_1_rel",
            PHON.ONSET con ] ].

ha_ha_root_pre := adv_s_pre_word_root_le &
 [ STEM < "ha", "ha" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ha+ha_a_1_rel",
            PHON.ONSET con ] ].

ha_root_post := adv_s_post_word_nospec_le &
 [ STEM < "ha" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ha_a_1_rel",
            PHON.ONSET con ] ].

ha_root_pre := adv_s_pre_word_root_le &
 [ STEM < "ha" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ha_a_1_rel",
            PHON.ONSET con ] ].

haavard_n1 := n_proper_le &
 [ STEM < "haavard" >,
   SYNSEM [ LKEYS.KEYREL.CARG "haavard",
            PHON.ONSET con ] ].

haavi_n1 := n_proper_le &
 [ STEM < "haavi" >,
   SYNSEM [ LKEYS.KEYREL.CARG "haavi",
            PHON.ONSET con ] ].

habit_n1 := n_mass_count_ppof_nosort_le &
 [ STEM < "habit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_habit_n_of_rel",
            PHON.ONSET con ] ].

habitat_n1 := n_mass_count_le &
 [ STEM < "habitat" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_habitat_n_1_rel",
            PHON.ONSET con ] ].

habitation_n1 := n_mass_count_le &
 [ STEM < "habitation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_habitation_n_1_rel",
            PHON.ONSET con ] ].

habitual_a1 := adj_intrans_le &
 [ STEM < "habitual" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_habitual_a_1_rel",
            PHON.ONSET con ] ].

habitually := adv_int_vp_le &
 [ STEM < "habitually" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_habitual_a_1_rel",
            PHON.ONSET con ] ].

habituate_to_v1 := v_empty_prep*_trans_le &
 [ STEM < "habituate" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_habituate_v_to_rel" ],
            PHON.ONSET con ] ].

hack_n1 := n_intr_le &
 [ STEM < "hack" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hack_n_1_rel",
            PHON.ONSET con ] ].

hack_up_v1 := v_particle_np_le &
 [ STEM < "hack" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_hack_v_up_rel" ],
            PHON.ONSET con ] ].

hack_v1 := v_np*_trans_le &
 [ STEM < "hack" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hack_v_1_rel",
            PHON.ONSET con ] ].

hacked_up_a1 := adj_pred_nomod_le &
 [ STEM < "hacked", "up" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hacked+up_a_1_rel",
            PHON.ONSET con ] ].

hacker_n1 := n_intr_le &
 [ STEM < "hacker" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hacker_n_1_rel",
            PHON.ONSET con ] ].

had_aux := va_had_le &
 [ STEM < "had" >,
   SYNSEM.PHON.ONSET con ].

had_aux_cx := va_had_cx_le &
 [ STEM < "d" >,
   SYNSEM.PHON.ONSET con ].

had_aux_cx_2 := va_had_cx_le &
 [ STEM < "'d" >,
   SYNSEM.PHON.ONSET con ].

had_aux_cx_neg_1 := va_had_neg_noinv_le &
 [ STEM < "'d", "not" >,
   SYNSEM.PHON.ONSET onset ].

had_aux_subj := va_had_subj_le &
 [ STEM < "had" >,
   SYNSEM.PHON.ONSET con ].

had_better_aux := va_modal_pos_noninv_le &
 [ STEM < "had", "better" >,
   SYNSEM [ LKEYS.KEYREL.PRED _had+better_v_modal_rel,
            PHON.ONSET con ] ].

had_better_cx := va_modal_pos_noninv_le &
 [ STEM < "d", "better" >,
   SYNSEM [ LKEYS.KEYREL.PRED _had+better_v_modal_rel,
            PHON.ONSET con ] ].

had_better_cx_2 := va_modal_pos_noninv_le &
 [ STEM < "'d", "better" >,
   SYNSEM [ LKEYS.KEYREL.PRED _had+better_v_modal_rel,
            PHON.ONSET con ] ].

had_better_cx_neg_1 := va_modal_neg_noinv_le &
 [ STEM < "'d", "better", "not" >,
   SYNSEM [ LKEYS.KEYREL.PRED _had+better_v_modal_rel,
            PHON.ONSET con ] ].

hadnt_aux_1 := va_had_neg_le &
 [ STEM < "hadn't" >,
   SYNSEM.PHON.ONSET con ].

hadnt_aux_2 := va_had_neg_le &
 [ STEM < "hadn", "'t" >,
   SYNSEM.PHON.ONSET con ].

hadnt_aux_subj_1 := va_had_subj_neg_le &
 [ STEM < "hadn't" >,
   SYNSEM.PHON.ONSET con ].

hadnt_aux_subj_2 := va_had_subj_neg_le &
 [ STEM < "hadn", "'t" >,
   SYNSEM.PHON.ONSET con ].

hag_n1 := n_intr_le &
 [ STEM < "hag" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hag_n_1_rel",
            PHON.ONSET con ] ].

hagaberg_n1 := n_proper_le &
 [ STEM < "hagaberg" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hagaberg",
            PHON.ONSET con ] ].

hagen_n1 := n_proper_city_le &
 [ STEM < "hagen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hagen",
            PHON.ONSET con ] ].

haggard_isect := adj_intrans_le &
 [ STEM < "haggard" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_haggard_a_1_rel",
            PHON.ONSET con ] ].

hail_from_v1 := v_empty_prep_intrans_le &
 [ STEM < "hail" >,
   SYNSEM [ LKEYS [ --COMPKEY _from_p_sel_rel,
                    KEYREL.PRED "_hail_v_from_rel" ],
            PHON.ONSET con ] ].

hail_n1 := n_mass_count_le &
 [ STEM < "hail" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hail_n_1_rel",
            PHON.ONSET con ] ].

hail_v1 := v_atrans_le &
 [ STEM < "hail" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hail_v_1_rel",
            PHON.ONSET con ] ].

hail_v2 := v_np_trans_le &
 [ STEM < "hail" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hail_v_1_rel",
            PHON.ONSET con ] ].

hail_v3 := v_np_as_le &
 [ STEM < "hail" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hail_v_as_rel",
            PHON.ONSET con ] ].

hair_n1 := n_intr_le &
 [ STEM < "hair" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hair_n_1_rel",
            PHON.ONSET con ] ].

haircut_n1 := n_intr_le &
 [ STEM < "haircut" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_haircut_n_1_rel",
            PHON.ONSET con ] ].

hairdresser_n1 := n_intr_le &
 [ STEM < "hairdresser" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hairdresser_n_1_rel",
            PHON.ONSET con ] ].

hairpin_n1 := n_intr_le &
 [ STEM < "hairpin" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hairpin_n_1_rel",
            PHON.ONSET con ] ].

hairpin_n2 := n_intr_le &
 [ STEM < "hair-", "pin" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hairpin_n_1_rel",
            PHON.ONSET con ] ].

hairy_a1 := adj_intrans_le &
 [ STEM < "hairy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hairy_a_1_rel",
            PHON.ONSET con ] ].

haiti_n1 := n_proper_le &
 [ STEM < "haiti" >,
   SYNSEM [ LKEYS.KEYREL.CARG "haiti",
            PHON.ONSET con ] ].

half-way_a1 := adj_intrans_le &
 [ STEM < "half", "way" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_half+way_a_1_rel",
            PHON.ONSET con ] ].

half_an_hour_mnp := meas_np_le &
 [ STEM < "half", "an", "hour" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_half+an+hour_x_rel",
            PHON.ONSET con ] ].

half_dozen_a1 := adj_bare_specified_card_dozen_le &
 [ STEM < "half", "dozen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "6",
            PHON.ONSET con ] ].

half_hour := adj_minute_preh_le &
 [ STEM < "half" >,
   SYNSEM [ LKEYS.KEYREL.CARG "30",
            PHON.ONSET con ] ].

half_moon_bay_n1 := n_proper_city_le &
 [ STEM < "half", "moon", "bay" >,
   SYNSEM [ LKEYS.KEYREL.CARG "half_moon_bay",
            PHON.ONSET con ] ].

half_n1 := n_ppof_nosort_le &
 [ STEM < "half" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_half_n_of_rel",
            PHON.ONSET con ] ].

half_pn1 := n_part_ppof_agr_le &
 [ STEM < "half" >,
   SYNSEM [ LKEYS.ALTKEYREL.PRED _half_q_rel,
            PHON.ONSET con ] ].

half_pn2 := n_part_nocomp_le &
 [ STEM < "half" >,
   SYNSEM [ LKEYS.ALTKEYREL.PRED _half_q_rel,
            PHON.ONSET con ] ].

half_pn3 := n_part_npcomp_agr_le &
 [ STEM < "half" >,
   SYNSEM [ LKEYS.ALTKEYREL.PRED _half_q_rel,
            PHON.ONSET con ] ].

halfway_adv := adv_int_vp_post_le &
 [ STEM < "halfway" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_halfway_a_1_rel",
            PHON.ONSET con ] ].

halfway_deg := adv_degree_spec_le &
 [ STEM < "halfway" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_halfway_x_rel",
            PHON.ONSET con ] ].

hall_n1 := n_proper_le &
 [ STEM < "hall" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hall",
            PHON.ONSET con ] ].

hall_n2 := n_intr_le &
 [ STEM < "hall" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hall_n_1_rel",
            PHON.ONSET con ] ].

hall_post_ttl := n_post_title_le &
 [ STEM < "hall" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hall_n_1_rel",
            PHON.ONSET con ] ].

halle_n1 := n_proper_le &
 [ STEM < "halle" >,
   SYNSEM [ LKEYS.KEYREL.CARG "halle",
            PHON.ONSET con ] ].

halli_n1 := n_proper_le &
 [ STEM < "halli" >,
   SYNSEM [ LKEYS.KEYREL.CARG "halli",
            PHON.ONSET con ] ].

hallingdal := n_proper_le &
 [ STEM < "hallingdal" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hallingdal",
            PHON.ONSET con ] ].

hallingdal_style_a1 := adj_intrans_le &
 [ STEM < "hallingdal", "style" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hallingdal+style_a_1_rel",
            PHON.ONSET con ] ].

hallingskeid := n_proper_le &
 [ STEM < "hallingskeid" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hallingskeid",
            PHON.ONSET con ] ].

hallmark_n1 := n_intr_le &
 [ STEM < "hallmark" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hallmark_n_1_rel",
            PHON.ONSET con ] ].

halloween_hd := n_holiday_le &
 [ STEM < "halloween" >,
   SYNSEM [ LKEYS.KEYREL.CARG "halloween",
            PHON.ONSET con ] ].

hallvardson_n1 := n_proper_le &
 [ STEM < "hallvardson" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hallvardson",
            PHON.ONSET con ] ].

hallway_n1 := n_intr_le &
 [ STEM < "hallway" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hallway_n_1_rel",
            PHON.ONSET con ] ].

halt_n1 := n_intr_le &
 [ STEM < "halt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_halt_n_1_rel",
            PHON.ONSET con ] ].

halt_v1 := v_np*_trans_le &
 [ STEM < "halt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_halt_v_1_rel",
            PHON.ONSET con ] ].

halter_n1 := n_intr_le &
 [ STEM < "halter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_halter_n_1_rel",
            PHON.ONSET con ] ].

halve_v1 := v_np_trans_noger_le &
 [ STEM < "halve" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_halve_v_cause_rel",
            PHON.ONSET con ] ].

halve_v2 := v_unacc_le &
 [ STEM < "halve" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_halve_v_1_rel",
            PHON.ONSET con ] ].

ham_n1 := n_mass_count_le &
 [ STEM < "ham" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ham_n_1_rel",
            PHON.ONSET con ] ].

hamburg_n1 := n_proper_city_le &
 [ STEM < "hamburg" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hamburg",
            PHON.ONSET con ] ].

hamburger_n1 := n_intr_le &
 [ STEM < "hamburger" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hamburger_n_1_rel",
            PHON.ONSET con ] ].

hamlet_n1 := n_proper_le &
 [ STEM < "hamlet" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hamlet",
            PHON.ONSET con ] ].

hamlet_n2 := n_intr_le &
 [ STEM < "hamlet" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hamlet_n_1_rel",
            PHON.ONSET con ] ].

hammer_n1 := n_intr_le &
 [ STEM < "hammer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hammer_n_1_rel",
            PHON.ONSET con ] ].

hammer_out_v1 := v_particle_np_le &
 [ STEM < "hammer" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_hammer_v_out_rel" ],
            PHON.ONSET con ] ].

hammer_v1 := v_np*_trans_le &
 [ STEM < "hammer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hammer_v_1_rel",
            PHON.ONSET con ] ].

hammer_v2 := v_np_prep_trans_dors_le &
 [ STEM < "hammer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hammer_v_1_rel",
            PHON.ONSET con ] ].

hamnÃ¸y := n_proper_le &
 [ STEM < "hamnÃ¸y" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hamnÃ¸y",
            PHON.ONSET con ] ].

hamper_n1 := n_intr_le &
 [ STEM < "hamper" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hamper_n_1_rel",
            PHON.ONSET con ] ].

hamper_v1 := v_np_trans_le &
 [ STEM < "hamper" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hamper_v_1_rel",
            PHON.ONSET con ] ].

hamÃ¸y := n_proper_le &
 [ STEM < "hamÃ¸y" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hamÃ¸y",
            PHON.ONSET con ] ].

han_n1 := n_proper_le &
 [ STEM < "han" >,
   SYNSEM [ LKEYS.KEYREL.CARG "han",
            PHON.ONSET con ] ].

hand_annotated_a1 := adj_intrans_le &
 [ STEM < "hand", "annotated" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hand+annotated_a_1_rel",
            PHON.ONSET con ] ].

hand_annotated_a2 := adj_intrans_le &
 [ STEM < "hand-", "annotated" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hand+annotated_a_1_rel",
            PHON.ONSET con ] ].

hand_edit_v1 := v_np_trans_le &
 [ STEM < "hand", "edit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hand+edit_v_1_rel",
            PHON.ONSET con ] ].

hand_edit_v2 := v_np_trans_le &
 [ STEM < "hand-", "edit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hand+edit_v_1_rel",
            PHON.ONSET con ] ].

hand_i_n1 := n_bare_nomod_le &
 [ STEM < "hand" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hand_n_1_rel",
            PHON.ONSET con ] ].

hand_in_v1 := v_particle_np_le &
 [ STEM < "hand" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_hand_v_in_rel" ],
            PHON.ONSET con ] ].

hand_n1 := n_intr_le &
 [ STEM < "hand" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hand_n_1_rel",
            PHON.ONSET con ] ].

hand_off_v1 := v_particle_np_le &
 [ STEM < "hand" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_hand_v_off_rel" ],
            PHON.ONSET con ] ].

hand_out_v1 := v_particle_np_le &
 [ STEM < "hand" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_hand_v_out_rel" ],
            PHON.ONSET con ] ].

hand_over_v1 := v_particle_np_le &
 [ STEM < "hand" >,
   SYNSEM [ LKEYS [ --COMPKEY _over_p_sel_rel,
                    KEYREL.PRED "_hand_v_over_rel" ],
            PHON.ONSET con ] ].

hand_v1 := v_ditrans_le &
 [ STEM < "hand" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hand_v_1_rel",
            PHON.ONSET con ] ].

handbook_n1 := n_intr_le &
 [ STEM < "handbook" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_handbook_n_1_rel",
            PHON.ONSET con ] ].

handcuff_n1 := n_intr_le &
 [ STEM < "handcuff" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_handcuff_n_1_rel",
            PHON.ONSET con ] ].

handcuff_v1 := v_np_trans_le &
 [ STEM < "handcuff" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_handcuff_v_1_rel",
            PHON.ONSET con ] ].

handfast_a1 := adj_intrans_le &
 [ STEM < "handfast" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_handfast_a_1_rel",
            PHON.ONSET con ] ].

handfast_n1 := n_intr_le &
 [ STEM < "handfast" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_handfast_n_1_rel",
            PHON.ONSET con ] ].

handfast_v1 := v_np_trans_le &
 [ STEM < "handfast" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_handfast_v_1_rel",
            PHON.ONSET con ] ].

handful_n1 := n_ppof_le &
 [ STEM < "handful" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_handful_n_of_rel",
            PHON.ONSET con ] ].

handheld_a1 := adj_intrans_le &
 [ STEM < "handheld" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_handheld_a_1_rel",
            PHON.ONSET con ] ].

handheld_n1 := n_intr_le &
 [ STEM < "handheld" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_handheld_n_1_rel",
            PHON.ONSET con ] ].

handheld_n2 := n_intr_le &
 [ STEM < "hand", "held" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_handheld_n_1_rel",
            PHON.ONSET con ] ].

handheld_n3 := n_intr_le &
 [ STEM < "hand-", "held" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_handheld_n_1_rel",
            PHON.ONSET con ] ].

handhold_n1 := n_intr_le &
 [ STEM < "handhold" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_handhold_n_1_rel",
            PHON.ONSET con ] ].

handicapped_a1 := adj_intrans_le &
 [ STEM < "handicapped" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_handicapped_a_1_rel",
            PHON.ONSET con ] ].

handily_a1 := adv_int_vp_le &
 [ STEM < "handily" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_handy_a_1_rel",
            PHON.ONSET con ] ].

handle_n1 := n_intr_le &
 [ STEM < "handle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_handle_n_1_rel",
            PHON.ONSET con ] ].

handle_v1 := v_np_trans_le &
 [ STEM < "handle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_handle_v_1_rel",
            PHON.ONSET con ] ].

handrail_n1 := n_intr_le &
 [ STEM < "handrail" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_handrail_n_1_rel",
            PHON.ONSET con ] ].

hands_free_a1 := adj_intrans_le &
 [ STEM < "hands", "free" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hands+free_a_1_rel",
            PHON.ONSET con ] ].

hands_free_a2 := adj_intrans_le &
 [ STEM < "hands-", "free" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hands+free_a_1_rel",
            PHON.ONSET con ] ].

handset_n1 := n_intr_le &
 [ STEM < "handset" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_handset_n_1_rel",
            PHON.ONSET con ] ].

handsome_a1 := adj_intrans_le &
 [ STEM < "handsome" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_handsome_a_1_rel",
            PHON.ONSET con ] ].

handspring_n1 := n_proper_le &
 [ STEM < "handspring" >,
   SYNSEM [ LKEYS.KEYREL.CARG "handspring",
            PHON.ONSET con ] ].

handwriting_n1 := n_mass_le &
 [ STEM < "handwriting" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_handwriting_n_1_rel",
            PHON.ONSET con ] ].

handwritten_a1 := adj_intrans_le &
 [ STEM < "handwritten" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_handwritten_a_1_rel",
            PHON.ONSET con ] ].

handy_a1 := adj_intrans_le &
 [ STEM < "handy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_handy_a_for_rel",
            PHON.ONSET con ] ].

handy_a2 := adj_tough_atrans_le &
 [ STEM < "handy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_handy_a_for_rel",
            PHON.ONSET con ] ].

handy_sized_a1 := adj_intrans_le &
 [ STEM < "handy-", "sized" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_handy-sized_a_1_rel",
            PHON.ONSET con ] ].

handycam_n1 := n_intr_le &
 [ STEM < "handycam" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_handycam_n_1_rel",
            PHON.ONSET con ] ].

hang_about_v1 := v_particle_le &
 [ STEM < "hang" >,
   SYNSEM [ LKEYS [ --COMPKEY _about_p_sel_rel,
                    KEYREL.PRED "_hang_v_about_rel" ],
            PHON.ONSET con ] ].

hang_around_v1 := v_particle_le &
 [ STEM < "hang" >,
   SYNSEM [ LKEYS [ --COMPKEY _around_p_sel_rel,
                    KEYREL.PRED "_hang_v_around_rel" ],
            PHON.ONSET con ] ].

hang_on_root_pre := adv_s_pre_word_root_le &
 [ STEM < "hang", "on" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hang+on_a_1_rel",
            PHON.ONSET con ] ].

hang_on_v1 := v_particle_le &
 [ STEM < "hang" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_hang_v_on_rel" ],
            PHON.ONSET con ] ].

hang_on_v2 := v_particle_pp_le &
 [ STEM < "hang" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    --OCOMPKEY _to_p_rel,
                    KEYREL.PRED "_hang_v_on_rel" ],
            PHON.ONSET con ] ].

hang_onto_v1 := v_empty_prep_intrans_le &
 [ STEM < "hang" >,
   SYNSEM [ LKEYS [ --COMPKEY _onto_p_sel_rel,
                    KEYREL.PRED "_hang_v_onto_rel" ],
            PHON.ONSET con ] ].

hang_out_v1 := v_particle_le &
 [ STEM < "hang" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_hang_v_out_rel" ],
            PHON.ONSET con ] ].

hang_out_v2 := v_particle_np_le &
 [ STEM < "hang" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_hang_v_out-2_rel" ],
            PHON.ONSET con ] ].

hang_v1 := v_unacc_le &
 [ STEM < "hang" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hang_v_1_rel",
            PHON.ONSET con ] ].

hang_v2 := v_np_trans_noger_le &
 [ STEM < "hang" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hang_v_cause_rel",
            PHON.ONSET con ] ].

hanger_n1 := n_intr_le &
 [ STEM < "hanger" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hanger_n_1_rel",
            PHON.ONSET con ] ].

hangzhou_n1 := n_proper_le &
 [ STEM < "hangzhou" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hangzhou",
            PHON.ONSET con ] ].

hannibal_n1 := n_proper_le &
 [ STEM < "hannibal" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hannibal",
            PHON.ONSET con ] ].

hannover_n1 := n_proper_city_le &
 [ STEM < "hannover" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hannover",
            PHON.ONSET con ] ].

hanovarian_n1 := n_intr_le &
 [ STEM < "hanovarian" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hanovarian_n_1_rel",
            PHON.ONSET con ] ].

hanover_n1 := n_proper_city_le &
 [ STEM < "hanover" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hanover",
            PHON.ONSET con ] ].

hans_n1 := n_proper_le &
 [ STEM < "hans" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hans",
            PHON.ONSET con ] ].

hansen_n1 := n_proper_le &
 [ STEM < "hansen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hansen",
            PHON.ONSET con ] ].

hanshan_n1 := n_proper_le &
 [ STEM < "hanshan" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hanshan",
            PHON.ONSET con ] ].

hanstholm := n_proper_le &
 [ STEM < "hanstholm" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hanstholm",
            PHON.ONSET con ] ].

hanzhong_n1 := n_proper_le &
 [ STEM < "hanzhong" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hanzhong",
            PHON.ONSET con ] ].

hap_n1 := n_mass_count_le &
 [ STEM < "hap" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hap_n_1_rel",
            PHON.ONSET con ] ].

hap_v1 := v_np_trans_le &
 [ STEM < "hap" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hap_v_1_rel",
            PHON.ONSET con ] ].

happen_on_v1 := v_empty_prep_intrans_le &
 [ STEM < "happen" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_happen_v_on_rel" ],
            PHON.ONSET con ] ].

happen_to_v1 := v_empty_prep_intrans_le &
 [ STEM < "happen" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_happen_v_to_rel" ],
            PHON.ONSET con ] ].

happen_upon_v1 := v_empty_prep_intrans_le &
 [ STEM < "happen" >,
   SYNSEM [ LKEYS [ --COMPKEY _upon_p_sel_rel,
                    KEYREL.PRED "_happen_v_upon_rel" ],
            PHON.ONSET con ] ].

happen_v1 := v_unacc_le &
 [ STEM < "happen" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_happen_v_1_rel",
            PHON.ONSET con ] ].

happen_v2 := v_ssr_noimp_le &
 [ STEM < "happen" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_happen_v_1_rel",
            PHON.ONSET con ] ].

happen_v3 := v_expl_it_subj_pp_cp_le &
 [ STEM < "happen" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_happen_v_to_rel",
            PHON.ONSET con ] ].

happening_artist_n1 := n_intr_le &
 [ STEM < "happening", "artist" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_happening+artist_n_1_rel",
            PHON.ONSET con ] ].

happening_n1 := n_intr_le &
 [ STEM < "happening" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_happening_n_1_rel",
            PHON.ONSET con ] ].

happier := adj_comp_le &
 [ STEM < "happier" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_happy_a_with_rel",
            PHON.ONSET con ] ].

happiest_a1 := adj_superl_le &
 [ STEM < "happiest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_happy_a_with_rel",
            PHON.ONSET con ] ].

happily_a1 := adv_int_vp_le &
 [ STEM < "happily" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_happy_a_with_rel",
            PHON.ONSET con ] ].

happiness_n1 := n_mass_le &
 [ STEM < "happiness" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_happiness_n_1_rel",
            PHON.ONSET con ] ].

happy_a1 := adj_intrans_le &
 [ STEM < "happy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_happy_a_with_rel",
            PHON.ONSET con ] ].

happy_a2 := adj_reg_cp_le &
 [ STEM < "happy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_happy_a_with_rel",
            PHON.ONSET con ] ].

happy_a3 := adj_reg_equi_le &
 [ STEM < "happy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_happy_a_with_rel",
            PHON.ONSET con ] ].

happy_a4 := adj_trans_oblig_le &
 [ STEM < "happy" >,
   SYNSEM [ LKEYS [ --COMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_happy_a_with_rel" ],
            PHON.ONSET con ] ].

harald := n_proper_le &
 [ STEM < "harald" >,
   SYNSEM [ LKEYS.KEYREL.CARG "harald",
            PHON.ONSET con ] ].

harass_v1 := v_np_trans_le &
 [ STEM < "harass" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_harass_v_1_rel",
            PHON.ONSET con ] ].

harass_v2 := v_obj_equi_le &
 [ STEM < "harass" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_harass_v_1_rel",
            PHON.ONSET con ] ].

harbard_n1 := n_proper_le &
 [ STEM < "harbard" >,
   SYNSEM [ LKEYS.KEYREL.CARG "harbard",
            PHON.ONSET con ] ].

harbardsbreen_n1 := n_proper_le &
 [ STEM < "harbardsbreen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "harbardsbreen",
            PHON.ONSET con ] ].

harbor_n1 := n_intr_le &
 [ STEM < "harbor" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_harbor_n_1_rel",
            PHON.ONSET con ] ].

harbour_n1 := n_intr_le &
 [ STEM < "harbour" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_harbour_n_1_rel",
            PHON.ONSET con ] ].

hard_a1 := adj_trans_le &
 [ STEM < "hard" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_hard_a_for_rel" ],
            PHON.ONSET con ] ].

hard_a2 := adj_reg_atrans_le &
 [ STEM < "hard" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hard_a_for_rel",
            PHON.ONSET con ] ].

hard_a3 := adj_tough_atrans_le &
 [ STEM < "hard" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hard_a_for_rel",
            PHON.ONSET con ] ].

hard_a4 := adj_trans_oblig_le &
 [ STEM < "hard" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_hard_a_on_rel" ],
            PHON.ONSET con ] ].

hardanger := n_proper_le &
 [ STEM < "hardanger" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hardanger",
            PHON.ONSET con ] ].

hardangerjokulen := n_proper_le &
 [ STEM < "hardangerjokulen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hardangerjokulen",
            PHON.ONSET con ] ].

hardangerjÃ¸kulen := n_proper_le &
 [ STEM < "hardangerjÃ¸kulen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hardangerjÃ¸kulen",
            PHON.ONSET con ] ].

hardangervidda := n_proper_le &
 [ STEM < "hardangervidda" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hardangervidda",
            PHON.ONSET con ] ].

harddisk_n1 := n_mass_le &
 [ STEM < "harddisk" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hard+disk_n_1_rel",
            PHON.ONSET con ] ].

harden_v1 := v_np_trans_noger_le &
 [ STEM < "harden" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_harden_v_cause_rel",
            PHON.ONSET con ] ].

harden_v2 := v_unacc_le &
 [ STEM < "harden" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_harden_v_1_rel",
            PHON.ONSET con ] ].

harder := adj_comp_le &
 [ STEM < "harder" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hard_a_1_rel",
            PHON.ONSET con ] ].

hardiness_n1 := n_mass_le &
 [ STEM < "hardiness" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hardiness_n_1_rel",
            PHON.ONSET con ] ].

hardly := adv_vp_aux_le &
 [ STEM < "hardly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hardly_a_1_rel",
            PHON.ONSET con ] ].

hardly_adv2 := adv_s_pre_le &
 [ STEM < "hardly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hardly_a_1_rel",
            PHON.ONSET con ] ].

hardly_deg := adv_degree_spec_jov_le &
 [ STEM < "hardly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hardly_x_deg_rel",
            PHON.ONSET con ] ].

hardness_n1 := n_mass_le &
 [ STEM < "hardness" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hardness_n_1_rel",
            PHON.ONSET con ] ].

hardship_n1 := n_mass_count_le &
 [ STEM < "hardship" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hardship_n_1_rel",
            PHON.ONSET con ] ].

hardware_n1 := n_mass_le &
 [ STEM < "hardware" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hardware_n_1_rel",
            PHON.ONSET con ] ].

hardy_a1 := adj_intrans_le &
 [ STEM < "hardy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hardy_a_1_rel",
            PHON.ONSET con ] ].

hardy_n1 := n_plur_nocmpnd_le &
 [ STEM < "hardy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hardy_n_1_rel",
            PHON.ONSET con ] ].

hardy_n2 := n_proper_le &
 [ STEM < "hardy" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hardy",
            PHON.ONSET con ] ].

hare_n1 := n_intr_le &
 [ STEM < "hare" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hare_n_1_rel",
            PHON.ONSET con ] ].

hare_n2 := n_mass_kind_le &
 [ STEM < "hare" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hare_n_kind_rel",
            PHON.ONSET con ] ].

harebell_like_a1 := adj_intrans_le &
 [ STEM < "harebell-", "like" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_harebell+like_a_1_rel",
            PHON.ONSET con ] ].

harebell_n1 := n_mass_le &
 [ STEM < "harebell" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_harebell_n_1_rel",
            PHON.ONSET con ] ].

hargangervidda := n_proper_le &
 [ STEM < "hargangervidda" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hargangervidda",
            PHON.ONSET con ] ].

harm_n1 := n_mass_ppcomp_le &
 [ STEM < "harm" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_harm_n_to_rel" ],
            PHON.ONSET con ] ].

harm_v1 := v_np_trans_le &
 [ STEM < "harm" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_harm_v_1_rel",
            PHON.ONSET con ] ].

harmonious_a1 := adj_intrans_le &
 [ STEM < "harmonious" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_harmonious_a_1_rel",
            PHON.ONSET con ] ].

harmonize_v1 := v_np*_trans_le &
 [ STEM < "harmonize" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_harmonize_v_1_rel",
            PHON.ONSET con ] ].

harmony_n1 := n_mass_count_le &
 [ STEM < "harmony" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_harmony_n_1_rel",
            PHON.ONSET con ] ].

harness_n1 := n_intr_le &
 [ STEM < "harness" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_harness_n_1_rel",
            PHON.ONSET con ] ].

harp_n1 := n_proper_le &
 [ STEM < "harp" >,
   SYNSEM [ LKEYS.KEYREL.CARG "harp",
            PHON.ONSET con ] ].

harrowing_a1 := adj_intrans_le &
 [ STEM < "harrowing" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_harrowing_a_1_rel",
            PHON.ONSET con ] ].

harry_n1 := n_proper_le &
 [ STEM < "harry" >,
   SYNSEM [ LKEYS.KEYREL.CARG "harry",
            PHON.ONSET con ] ].

harsh_a1 := adj_intrans_le &
 [ STEM < "harsh" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_harsh_a_1_rel",
            PHON.ONSET con ] ].

harshness_n1 := n_mass_le &
 [ STEM < "harshness" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_harshness_n_1_rel",
            PHON.ONSET con ] ].

harstad_n1 := n_proper_city_le &
 [ STEM < "harstad" >,
   SYNSEM [ LKEYS.KEYREL.CARG "harstad",
            PHON.ONSET con ] ].

harvest_n1 := n_mass_count_le &
 [ STEM < "harvest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_harvest_n_1_rel",
            PHON.ONSET con ] ].

harvest_v1 := v_np*_trans_le &
 [ STEM < "harvest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_harvest_v_1_rel",
            PHON.ONSET con ] ].

harvey_n1 := n_proper_le &
 [ STEM < "harvey" >,
   SYNSEM [ LKEYS.KEYREL.CARG "harvey",
            PHON.ONSET con ] ].

has_aux := va_has_le &
 [ STEM < "has" >,
   SYNSEM.PHON.ONSET con ].

has_aux_cx := va_has_cx_le &
 [ STEM < "s" >,
   SYNSEM.PHON.ONSET voc ].

has_aux_cx_2 := va_has_cx_le &
 [ STEM < "'s" >,
   SYNSEM.PHON.ONSET con ].

has_aux_cx_neg_1 := va_has_neg_noinv_le &
 [ STEM < "'s", "not" >,
   SYNSEM.PHON.ONSET onset ].

hasgaberg_n1 := n_proper_le &
 [ STEM < "hasgaberg" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hasgaberg",
            PHON.ONSET con ] ].

hash_out_v1 := v_particle_np_le &
 [ STEM < "hash" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_hash_v_out_rel" ],
            PHON.ONSET con ] ].

hashade_n1 := n_proper_le &
 [ STEM < "hashade" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hashade",
            PHON.ONSET con ] ].

hasnt_aux_1 := va_has_neg_le &
 [ STEM < "hasn't" >,
   SYNSEM.PHON.ONSET con ].

hasnt_aux_2 := va_has_neg_le &
 [ STEM < "hasn", "'t" >,
   SYNSEM.PHON.ONSET con ].

hassle_n1 := n_intr_le &
 [ STEM < "hassle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hassle_n_1_rel",
            PHON.ONSET con ] ].

hassle_v1 := v_np_trans_le &
 [ STEM < "hassle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hassle_v_1_rel",
            PHON.ONSET con ] ].

haste_n1 := n_intr_le &
 [ STEM < "haste" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_haste_n_1_rel",
            PHON.ONSET con ] ].

hastily := adv_int_vp_le &
 [ STEM < "hastily" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hasty_a_1_rel",
            PHON.ONSET con ] ].

hasty_isect := adj_intrans_le &
 [ STEM < "hasty" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hasty_a_1_rel",
            PHON.ONSET con ] ].

hat_n1 := n_intr_le &
 [ STEM < "hat" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hat_n_1_rel",
            PHON.ONSET con ] ].

hatch_n1 := n_intr_le &
 [ STEM < "hatch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hatch_n_1_rel",
            PHON.ONSET con ] ].

hatch_v1 := v_np_trans_noger_le &
 [ STEM < "hatch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hatch_v_cause_rel",
            PHON.ONSET con ] ].

hatch_v2 := v_unacc_le &
 [ STEM < "hatch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hatch_v_1_rel",
            PHON.ONSET con ] ].

hatchway_n1 := n_intr_le &
 [ STEM < "hatchway" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hatchway_n_1_rel",
            PHON.ONSET con ] ].

hate_n1 := n_mass_le &
 [ STEM < "hate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hate_n_1_rel",
            PHON.ONSET con ] ].

hate_v1 := v_np_trans_le &
 [ STEM < "hate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hate_v_1_rel",
            PHON.ONSET con ] ].

hate_v2 := v_subj_equi_le &
 [ STEM < "hate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hate_v_1_rel",
            PHON.ONSET con ] ].

hate_v3 := v_subj_equi_prp_le &
 [ STEM < "hate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hate_v_1_rel",
            PHON.ONSET con ] ].

hate_v4 := v_expl_obj_cp_prop_le &
 [ STEM < "hate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hate_v_1_rel",
            PHON.ONSET con ] ].

haugastÃ¸len := n_proper_le &
 [ STEM < "haugastÃ¸len" >,
   SYNSEM [ LKEYS.KEYREL.CARG "haugastÃ¸len",
            PHON.ONSET con ] ].

haugbotn := n_intr_named_le &
 [ STEM < "haugbotn" >,
   SYNSEM [ LKEYS.KEYREL.CARG "haugbotn",
            PHON.ONSET con ] ].

hauge_n1 := n_proper_le &
 [ STEM < "hauge" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hauge",
            PHON.ONSET con ] ].

haughtiness_n1 := n_mass_le &
 [ STEM < "haughtiness" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_haughtiness_n_1_rel",
            PHON.ONSET con ] ].

haugseter_n1 := n_proper_le &
 [ STEM < "haugseter" >,
   SYNSEM [ LKEYS.KEYREL.CARG "haugseter",
            PHON.ONSET con ] ].

haul_away_v1 := v_particle_np_le &
 [ STEM < "haul" >,
   SYNSEM [ LKEYS [ --COMPKEY _away_p_sel_rel,
                    KEYREL.PRED "_haul_v_away_rel" ],
            PHON.ONSET con ] ].

haul_in_v1 := v_particle_np_le &
 [ STEM < "haul" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_haul_v_in_rel" ],
            PHON.ONSET con ] ].

haul_n1 := n_intr_le &
 [ STEM < "haul" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_haul_n_1_rel",
            PHON.ONSET con ] ].

haul_off_v1 := v_particle_le &
 [ STEM < "haul" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_haul_v_off_rel" ],
            PHON.ONSET con ] ].

haul_off_v2 := v_particle_np_le &
 [ STEM < "haul" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_haul_v_off-2_rel" ],
            PHON.ONSET con ] ].

haul_out_v1 := v_particle_np_le &
 [ STEM < "haul" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_haul_v_out_rel" ],
            PHON.ONSET con ] ].

haul_up_v1 := v_particle_np_le &
 [ STEM < "haul" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_haul_v_up_rel" ],
            PHON.ONSET con ] ].

haul_v1 := v_np_trans_le &
 [ STEM < "haul" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_haul_v_1_rel",
            PHON.ONSET con ] ].

haunt_n1 := n_intr_le &
 [ STEM < "haunt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_haunt_n_1_rel",
            PHON.ONSET con ] ].

haunt_v1 := v_np*_trans_le &
 [ STEM < "haunt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_haunt_v_1_rel",
            PHON.ONSET con ] ].

haunt_v2 := v_expl_it_subj_np_cp_le &
 [ STEM < "haunt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_haunt_v_1_rel",
            PHON.ONSET con ] ].

have-poss := v_poss_le &
 [ STEM < "have" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_have_v_1_rel",
            PHON.ONSET con ] ].

have-prd := v_obj_equi_non_trans_prd_le &
 [ STEM < "have" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_have_v_prd_rel",
            PHON.ONSET con ] ].

have_aux_cx_neg_1 := va_have_fin_neg_noinv_le &
 [ STEM < "'ve", "not" >,
   SYNSEM.PHON.ONSET onset ].

have_aux_prp := va_have_prespart_le &
 [ STEM < "having" >,
   SYNSEM.PHON.ONSET con ].

have_back_v1 := v_particle_np_le &
 [ STEM < "have" >,
   SYNSEM [ LKEYS [ --COMPKEY _back_p_sel_rel,
                    KEYREL.PRED "_have_v_back_rel" ],
            PHON.ONSET con ] ].

have_bse_aux := va_have_bse_le &
 [ STEM < "have" >,
   SYNSEM.PHON.ONSET con ].

have_bse_aux_cx_1 := va_have_bse_cx_le &
 [ STEM < "ve" >,
   SYNSEM.PHON.ONSET con ].

have_bse_aux_cx_2 := va_have_bse_cx_le &
 [ STEM < "'ve" >,
   SYNSEM.PHON.ONSET con ].

have_cause := v_sorb_le &
 [ STEM < "have" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_have_v_cause_rel",
            PHON.ONSET con ] ].

have_fin_aux := va_have_fin_le &
 [ STEM < "have" >,
   SYNSEM.PHON.ONSET con ].

have_fin_aux_cx := va_have_fin_cx_le &
 [ STEM < "ve" >,
   SYNSEM.PHON.ONSET con ].

have_fin_aux_cx_2 := va_have_fin_cx_le &
 [ STEM < "'ve" >,
   SYNSEM.PHON.ONSET con ].

have_fin_aux_neg_1 := va_have_fin_neg_le &
 [ STEM < "haven't" >,
   SYNSEM.PHON.ONSET con ].

have_fin_aux_neg_2 := va_have_fin_neg_le &
 [ STEM < "haven", "'t" >,
   SYNSEM.PHON.ONSET con ].

have_oeq_vpsl := v_obj_equi_vpslash_le &
 [ STEM < "have" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_have_v_prd_rel",
            PHON.ONSET con ] ].

have_off_v1 := v_particle_np_le &
 [ STEM < "have" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_have_v_off_rel" ],
            PHON.ONSET con ] ].

have_prp_v1 := v_anom_equi_prp_le &
 [ STEM < "have" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_have_v_1_rel",
            PHON.ONSET con ] ].

have_to1 := v_ssr_noimp_le &
 [ STEM < "have" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_have_v_to_rel",
            PHON.ONSET con ] ].

have_to_do_with_v1 := v_prep_intrans_le &
 [ STEM < "have" >,
   SYNSEM [ LKEYS [ --COMPKEY _to+do+with_p_rel,
                    KEYREL.PRED "_have_v_regarding_rel" ],
            PHON.ONSET con ] ].

have_yet_v1 := v_ssr_particle_le &
 [ STEM < "have" >,
   SYNSEM [ LKEYS [ --COMPKEY _yet_p_sel_rel,
                    KEYREL.PRED "_have_v_yet_rel" ],
            PHON.ONSET con ] ].

haven_n1 := n_intr_le &
 [ STEM < "haven" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_haven_n_1_rel",
            PHON.ONSET con ] ].

haverdalen := n_proper_le &
 [ STEM < "haverdalen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "haverdalen",
            PHON.ONSET con ] ].

hawaii_n1 := n_proper_le &
 [ STEM < "hawaii" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hawaii",
            PHON.ONSET con ] ].

hawaii_n2 := n_proper_abb_le &
 [ STEM < "hi" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hawaii",
            PHON.ONSET con ] ].

hawk_n1 := n_intr_le &
 [ STEM < "hawk" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hawk_n_1_rel",
            PHON.ONSET con ] ].

hawk_v1 := v_np_trans_le &
 [ STEM < "hawk" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hawk_v_1_rel",
            PHON.ONSET con ] ].

hawser_n1 := n_mass_count_le &
 [ STEM < "hawser" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hawser_n_1_rel",
            PHON.ONSET con ] ].

hawthorn_n1 := n_mass_count_le &
 [ STEM < "hawthorn" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hawthorn_n_1_rel",
            PHON.ONSET con ] ].

hay_n := n_mass_le &
 [ STEM < "hay" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hay_n_1_rel",
            PHON.ONSET con ] ].

hazard_n1 := n_intr_le &
 [ STEM < "hazard" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hazard_n_1_rel",
            PHON.ONSET con ] ].

haze_n1 := n_mass_le &
 [ STEM < "haze" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_haze_n_1_rel",
            PHON.ONSET con ] ].

hazel_n1 := n_proper_le &
 [ STEM < "hazel" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hazel",
            PHON.ONSET con ] ].

hazmat_n1 := n_intr_le &
 [ STEM < "hazmat" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hazmat_n_1_rel",
            PHON.ONSET con ] ].

hazy_a1 := adj_intrans_le &
 [ STEM < "hazy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hazy_a_1_rel",
            PHON.ONSET con ] ].

he := n_pers_pro_he_le &
 [ STEM < "he" >,
   SYNSEM.PHON.ONSET con ].

he_shuheng_n1 := n_proper_le &
 [ STEM < "he", "shuheng" >,
   SYNSEM [ LKEYS.KEYREL.CARG "he_shuheng",
            PHON.ONSET con ] ].

head_for_v1 := v_empty_prep_intrans_le &
 [ STEM < "head" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_head_v_for_rel" ],
            PHON.ONSET con ] ].

head_n1 := n_ppof_le &
 [ STEM < "head" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_head_n_of_rel",
            PHON.ONSET con ] ].

head_off_v1 := v_particle_le &
 [ STEM < "head" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_head_v_off_rel" ],
            PHON.ONSET con ] ].

head_off_v2 := v_particle_np_le &
 [ STEM < "head" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_head_v_off_rel" ],
            PHON.ONSET con ] ].

head_on_v1 := v_particle_le &
 [ STEM < "head" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_head_v_on_rel" ],
            PHON.ONSET con ] ].

head_out_v1 := v_particle_le &
 [ STEM < "head" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_head_v_out_rel" ],
            PHON.ONSET con ] ].

head_start_n1 := n_proper_le &
 [ STEM < "head", "start" >,
   SYNSEM [ LKEYS.KEYREL.CARG "head_start",
            PHON.ONSET con ] ].

head_up_v1 := v_particle_np_le &
 [ STEM < "head" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_head_v_up_rel" ],
            PHON.ONSET con ] ].

head_v1 := v_prep_dir_le &
 [ STEM < "head" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_head_v_dir_rel",
            PHON.ONSET con ] ].

head_v2 := v_np_trans_noger_le &
 [ STEM < "head" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_head_v_1_rel",
            PHON.ONSET con ] ].

headdress_n1 := n_intr_le &
 [ STEM < "headdress" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_headdress_n_1_rel",
            PHON.ONSET con ] ].

headed_a1 := adj_intrans_le &
 [ STEM < "headed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_headed_a_1_rel",
            PHON.ONSET con ] ].

header_n1 := n_intr_le &
 [ STEM < "header" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_header_n_1_rel",
            PHON.ONSET con ] ].

headlands_n1 := n_plur_le &
 [ STEM < "headland" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_headlands_n_1_rel",
            PHON.ONSET con ] ].

headlight_n1 := n_intr_le &
 [ STEM < "headlight" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_headlight_n_1_rel",
            PHON.ONSET con ] ].

headmaster_n1 := n_intr_le &
 [ STEM < "headmaster" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_headmaster_n_1_rel",
            PHON.ONSET con ] ].

headphone_n1 := n_intr_le &
 [ STEM < "headphone" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_headphone_n_1_rel",
            PHON.ONSET con ] ].

headquarter_v1 := v_np_trans_le &
 [ STEM < "headquarter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_headquarter_v_1_rel",
            PHON.ONSET con ] ].

headquarters_n1 := n_intr_le &
 [ STEM < "headquarters" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_headquarters_n_1_rel",
            PHON.ONSET con ] ].

headset_n1 := n_intr_le &
 [ STEM < "headset" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_headset_n_1_rel",
            PHON.ONSET con ] ].

headwall_n1 := n_intr_le &
 [ STEM < "headwall" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_headwall_n_1_rel",
            PHON.ONSET con ] ].

headway_n1 := n_mass_le &
 [ STEM < "headway" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_headway_n_1_rel",
            PHON.ONSET con ] ].

heal_v1 := v_np_trans_noger_le &
 [ STEM < "heal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_heal_v_cause_rel",
            PHON.ONSET con ] ].

heal_v2 := v_unacc_le &
 [ STEM < "heal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_heal_v_1_rel",
            PHON.ONSET con ] ].

heal_v3 := v_unerg_le &
 [ STEM < "heal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_heal_v_cause_rel",
            PHON.ONSET con ] ].

health_n1 := n_mass_le &
 [ STEM < "health" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_health_n_1_rel",
            PHON.ONSET con ] ].

healthy_isect := adj_intrans_le &
 [ STEM < "healthy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_healthy_a_1_rel",
            PHON.ONSET con ] ].

heap_n1 := n_intr_le &
 [ STEM < "heap" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_heap_n_1_rel",
            PHON.ONSET con ] ].

heap_v1 := v_np_prep_trans_dors_le &
 [ STEM < "heap" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_heap_v_1_rel",
            PHON.ONSET con ] ].

hear_about_v1 := v_empty_prep_intrans_le &
 [ STEM < "hear" >,
   SYNSEM [ LKEYS [ --COMPKEY _about_p_sel_rel,
                    KEYREL.PRED "_hear_v_about_rel" ],
            PHON.ONSET con ] ].

hear_back_from_v1 := v_particle_empty_pp*_le &
 [ STEM < "hear" >,
   SYNSEM [ LKEYS [ --COMPKEY _back_p_sel_rel,
                    --OCOMPKEY _from_p_sel_rel,
                    KEYREL.PRED "_hear_v_back-from_rel" ],
            PHON.ONSET con ] ].

hear_from_v1 := v_empty_prep_intrans_le &
 [ STEM < "hear" >,
   SYNSEM [ LKEYS [ --COMPKEY _from_p_sel_rel,
                    KEYREL.PRED "_hear_v_from_rel" ],
            PHON.ONSET con ] ].

hear_of_v1 := v_empty_prep_intrans_le &
 [ STEM < "hear" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_hear_v_of_rel" ],
            PHON.ONSET con ] ].

hear_v1 := v_np*_trans_le &
 [ STEM < "hear" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hear_v_1_rel",
            PHON.ONSET con ] ].

hear_v2 := v_cp_non_trans_le &
 [ STEM < "hear" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hear_v_1_rel",
            PHON.ONSET con ] ].

hear_v3 := v_sorb_le &
 [ STEM < "hear" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hear_v_1_rel",
            PHON.ONSET con ] ].

hear_v4 := v_obj_equi_prd_le &
 [ STEM < "hear" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hear_v_1_rel",
            PHON.ONSET con ] ].

heard_v3 := v_sorb_pass_le &
 [ STEM < "heard" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hear_v_1_rel",
            PHON.ONSET con ] ].

hearer_n1 := n_intr_le &
 [ STEM < "hearer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hearer_n_1_rel",
            PHON.ONSET con ] ].

hearing_n1 := n_intr_le &
 [ STEM < "hearing" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hearing_n_1_rel",
            PHON.ONSET con ] ].

heart_n1 := n_intr_le &
 [ STEM < "heart" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_heart_n_1_rel",
            PHON.ONSET con ] ].

heart_of_norway_n1 := n_intr_named_le &
 [ STEM < "heart", "of", "norway" >,
   SYNSEM [ LKEYS.KEYREL.CARG "heart_of_norway",
            PHON.ONSET con ] ].

heartily_adv := adv_int_vp_le &
 [ STEM < "heartily" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hearty_a_1_rel",
            PHON.ONSET con ] ].

hearty_a1 := adj_intrans_le &
 [ STEM < "hearty" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hearty_a_1_rel",
            PHON.ONSET con ] ].

heat_n1 := n_mass_le &
 [ STEM < "heat" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_heat_n_1_rel",
            PHON.ONSET con ] ].

heat_up_v1 := v_particle_np_le &
 [ STEM < "heat" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_heat_v_up-cause_rel" ],
            PHON.ONSET con ] ].

heat_up_v2 := v_particle_np_le &
 [ STEM < "heat" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_heat_v_up_rel" ],
            PHON.ONSET con ] ].

heat_v1 := v_np_trans_noger_le &
 [ STEM < "heat" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_heat_v_cause_rel",
            PHON.ONSET con ] ].

heat_v2 := v_unacc_le &
 [ STEM < "heat" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_heat_v_1_rel",
            PHON.ONSET con ] ].

heater_n1 := n_intr_le &
 [ STEM < "heater" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_heater_n_1_rel",
            PHON.ONSET con ] ].

heath_n1 := n_mass_le &
 [ STEM < "heath" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_heath_n_1_rel",
            PHON.ONSET con ] ].

heathen_n1 := n_plur_le &
 [ STEM < "heathen" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_heathen_n_1_rel",
            PHON.ONSET con ] ].

heather_n1 := n_mass_le &
 [ STEM < "heather" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_heather_n_1_rel",
            PHON.ONSET con ] ].

heave_n1 := n_intr_le &
 [ STEM < "heave" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_heave_n_1_rel",
            PHON.ONSET con ] ].

heave_v1 := v_np_trans_le &
 [ STEM < "heave" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_heave_v_1_rel",
            PHON.ONSET con ] ].

heave_v2 := v_np_prep_trans_dors_le &
 [ STEM < "heave" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_heave_v_1_rel",
            PHON.ONSET con ] ].

heave_v3 := v_unerg_le &
 [ STEM < "heave" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_heave_v_2_rel",
            PHON.ONSET con ] ].

heaven_n1 := n_mass_count_le &
 [ STEM < "heaven" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_heaven_n_1_rel",
            PHON.ONSET con ] ].

heavenly_a1 := adj_intrans_le &
 [ STEM < "heavenly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_heavenly_a_1_rel",
            PHON.ONSET con ] ].

heavens_excl_post := adv_s_post_word_nospec_le &
 [ STEM < "heavens" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_heavens_a_1_rel",
            PHON.ONSET con ] ].

heavens_excl_pre := adv_s_pre_word_root_le &
 [ STEM < "heavens" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_heavens_a_1_rel",
            PHON.ONSET con ] ].

heavier_a1 := adj_comp_le &
 [ STEM < "heavier" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_heavy_a_1_rel",
            PHON.ONSET con ] ].

heaviest_a1 := adj_superl_le &
 [ STEM < "heaviest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_heavy_a_1_rel",
            PHON.ONSET con ] ].

heavily_isect := adv_int_vp_le &
 [ STEM < "heavily" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_heavy_a_1_rel",
            PHON.ONSET con ] ].

heavy_a1 := adj_intrans_le &
 [ STEM < "heavy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_heavy_a_1_rel",
            PHON.ONSET con ] ].

hebrew_n1 := n_proper_le &
 [ STEM < "hebrew" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hebrew",
            PHON.ONSET con ] ].

hebrew_n2 := n_intr_le &
 [ STEM < "hebrew" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hebrew_n_1_rel",
            PHON.ONSET con ] ].

heck_n1 := n_intr_le &
 [ STEM < "heck" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_heck_n_1_rel",
            PHON.ONSET con ] ].

hectare_n1 := n_meas_le &
 [ STEM < "hectare" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hectare_n_1_rel",
            PHON.ONSET con ] ].

hectic_a1 := adj_intrans_le &
 [ STEM < "hectic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hectic_a_1_rel",
            PHON.ONSET con ] ].

hectically := adv_int_vp_le &
 [ STEM < "hectically" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hectic_a_1_rel",
            PHON.ONSET con ] ].

hedemarker_n1 := n_intr_named_le &
 [ STEM < "hedemarker" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hedemarker",
            PHON.ONSET con ] ].

hedge_n1 := n_intr_le &
 [ STEM < "hedge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hedge_n_1_rel",
            PHON.ONSET con ] ].

hedge_v1 := v_np*_trans_le &
 [ STEM < "hedge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hedge_v_1_rel",
            PHON.ONSET con ] ].

hedmark_n1 := n_proper_le &
 [ STEM < "hedmark" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hedmark",
            PHON.ONSET con ] ].

hedmarken_n1 := n_proper_le &
 [ STEM < "hedmarken" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hedmarken",
            PHON.ONSET con ] ].

heed_v1 := v_np_trans_le &
 [ STEM < "heed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_heed_v_1_rel",
            PHON.ONSET con ] ].

heedlessly := adv_int_vp_le &
 [ STEM < "heedlessly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_heedless_a_1_rel",
            PHON.ONSET con ] ].

heel_n1 := n_intr_le &
 [ STEM < "heel" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_heel_n_1_rel",
            PHON.ONSET con ] ].

heel_v1 := v_unerg_le &
 [ STEM < "heel" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_heel_v_1_rel",
            PHON.ONSET con ] ].

hefte_n1 := n_proper_le &
 [ STEM < "hefte" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hefte",
            PHON.ONSET con ] ].

heftye_n1 := n_proper_le &
 [ STEM < "heftye" >,
   SYNSEM [ LKEYS.KEYREL.CARG "heftye",
            PHON.ONSET con ] ].

heggdal_n1 := n_proper_le &
 [ STEM < "heggdal" >,
   SYNSEM [ LKEYS.KEYREL.CARG "heggdal",
            PHON.ONSET con ] ].

hegge_n1 := n_proper_le &
 [ STEM < "hegge" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hegge",
            PHON.ONSET con ] ].

heidal := n_proper_le &
 [ STEM < "heidal" >,
   SYNSEM [ LKEYS.KEYREL.CARG "heidal",
            PHON.ONSET con ] ].

heidelberg_n1 := n_proper_city_le &
 [ STEM < "heidelberg" >,
   SYNSEM [ LKEYS.KEYREL.CARG "heidelberg",
            PHON.ONSET con ] ].

heidi_n1 := n_proper_le &
 [ STEM < "heidi" >,
   SYNSEM [ LKEYS.KEYREL.CARG "heidi",
            PHON.ONSET con ] ].

height_n1 := n_mass_count_ppof_le &
 [ STEM < "height" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_height_n_of_rel",
            PHON.ONSET con ] ].

heighten_v1 := v_np_trans_noger_le &
 [ STEM < "heighten" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_heighten_v_cause_rel",
            PHON.ONSET con ] ].

heighten_v2 := v_unacc_le &
 [ STEM < "heighten" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_heighten_v_1_rel",
            PHON.ONSET con ] ].

heilbronn_n1 := n_proper_city_le &
 [ STEM < "heilbronn" >,
   SYNSEM [ LKEYS.KEYREL.CARG "heilbronn",
            PHON.ONSET con ] ].

heimdalshÃ¸_n1 := n_proper_le &
 [ STEM < "heimdalshÃ¸" >,
   SYNSEM [ LKEYS.KEYREL.CARG "heimdalshÃ¸",
            PHON.ONSET con ] ].

heine_n1 := n_proper_le &
 [ STEM < "heine" >,
   SYNSEM [ LKEYS.KEYREL.CARG "heine",
            PHON.ONSET con ] ].

heir_a1 := adj_pred_trans_le &
 [ STEM < "heir" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_heir_a_1_rel" ],
            PHON.ONSET voc ] ].

heir_n1 := n_intr_le &
 [ STEM < "heir" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_heir_n_1_rel",
            PHON.ONSET voc ] ].

helen_n1 := n_proper_le &
 [ STEM < "helen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "helen",
            PHON.ONSET con ] ].

helge_n1 := n_proper_le &
 [ STEM < "helge" >,
   SYNSEM [ LKEYS.KEYREL.CARG "helge",
            PHON.ONSET con ] ].

helgedalen := n_proper_le &
 [ STEM < "helgedalen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "helgedalen",
            PHON.ONSET con ] ].

helicopter_n1 := n_intr_le &
 [ STEM < "helicopter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_helicopter_n_1_rel",
            PHON.ONSET con ] ].

helicopter_served_a1 := adj_intrans_le &
 [ STEM < "helicopter-", "served" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_helicopter-served_a_1_rel",
            PHON.ONSET con ] ].

helium_n1 := n_mass_le &
 [ STEM < "helium" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_helium_n_1_rel",
            PHON.ONSET con ] ].

helix_n1 := n_intr_le &
 [ STEM < "helix" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_helix_n_1_rel",
            PHON.ONSET con ] ].

hell_n1 := n_intr_le &
 [ STEM < "hell" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hell_n_1_rel",
            PHON.ONSET con ] ].

hell_n2 := n_proper_le &
 [ STEM < "hell" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hell",
            PHON.ONSET con ] ].

hellerfossen_n1 := n_proper_le &
 [ STEM < "hellerfossen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hellerfossen",
            PHON.ONSET con ] ].

hellertjÃ¸rna_n1 := n_proper_le &
 [ STEM < "hellertjÃ¸rna" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hellertjÃ¸rna",
            PHON.ONSET con ] ].

hello_n1 := n_intr_le &
 [ STEM < "hello" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hello_n_1_rel",
            PHON.ONSET con ] ].

hello_root_post := adv_disc_posth_grt_le &
 [ STEM < "hello" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hello",
            PHON.ONSET con ] ].

hello_root_pre := adv_disc_preh_grt_le &
 [ STEM < "hello" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hello",
            PHON.ONSET con ] ].

hellstugubreen_n1 := n_proper_le &
 [ STEM < "hellstugubreen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hellstugubreen",
            PHON.ONSET con ] ].

hellstugutind_n1 := n_proper_le &
 [ STEM < "hellstugutind" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hellstugutind",
            PHON.ONSET con ] ].

hellstugutinden_n1 := n_proper_le &
 [ STEM < "hellstugutinden" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hellstugutinden",
            PHON.ONSET con ] ].

hellstuguÃ¥a_n1 := n_proper_le &
 [ STEM < "hellstuguÃ¥a" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hellstuguÃ¥a",
            PHON.ONSET con ] ].

helm_n1 := n_intr_le &
 [ STEM < "helm" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_helm_n_1_rel",
            PHON.ONSET con ] ].

helman := n_proper_le &
 [ STEM < "helman" >,
   SYNSEM [ LKEYS.KEYREL.CARG "helman",
            PHON.ONSET con ] ].

helmet_n1 := n_intr_le &
 [ STEM < "helmet" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_helmet_n_1_rel",
            PHON.ONSET con ] ].

help_but_bse_v1 := v_subj_equi_but_bse_le &
 [ STEM < "help" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_help_v_but_rel",
            PHON.ONSET con ] ].

help_n1 := n_mass_count_le &
 [ STEM < "help" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_help_n_1_rel",
            PHON.ONSET con ] ].

help_out_v1 := v_particle_np_le &
 [ STEM < "help" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_help_v_out_rel" ],
            PHON.ONSET con ] ].

help_out_v2 := v_particle_le &
 [ STEM < "help" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_help_v_out_rel" ],
            PHON.ONSET con ] ].

help_v1 := v_np*_trans_le &
 [ STEM < "help" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_help_v_1_rel",
            PHON.ONSET con ] ].

help_v2 := v_subj_equi_le &
 [ STEM < "help" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_help_v_to_rel",
            PHON.ONSET con ] ].

help_v3 := v_obj_equi_le &
 [ STEM < "help" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_help_v_to_rel",
            PHON.ONSET con ] ].

help_v4 := v_obj_equi_bse_le &
 [ STEM < "help" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_help_v_to_rel",
            PHON.ONSET con ] ].

help_v5 := v_subj_equi_bse_le &
 [ STEM < "help" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_help_v_to_rel",
            PHON.ONSET con ] ].

help_v6 := v_expl_obj_cp_prop_le &
 [ STEM < "help" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_help_v_to_rel",
            PHON.ONSET con ] ].

helped_v4 := v_sorb_pass_le &
 [ STEM < "helped" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_help_v_to_rel",
            PHON.ONSET con ] ].

helper_n1 := n_intr_le &
 [ STEM < "helper" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_helper_n_1_rel",
            PHON.ONSET con ] ].

helpful_isect := adj_intrans_le &
 [ STEM < "helpful" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_helpful_a_1_rel",
            PHON.ONSET con ] ].

helpfully := adv_int_vp_le &
 [ STEM < "helpfully" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_helpful_a_1_rel",
            PHON.ONSET con ] ].

helpfulness_n1 := n_mass_le &
 [ STEM < "helpfulness" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_helpfulness_n_1_rel",
            PHON.ONSET con ] ].

helpless_isect := adj_intrans_le &
 [ STEM < "helpless" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_helpless_a_1_rel",
            PHON.ONSET con ] ].

helplessly := adv_int_vp_le &
 [ STEM < "helplessly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_helpless_a_1_rel",
            PHON.ONSET con ] ].

helwig := n_proper_le &
 [ STEM < "helwig" >,
   SYNSEM [ LKEYS.KEYREL.CARG "helwig",
            PHON.ONSET con ] ].

hem_in_v1 := v_particle_np_le &
 [ STEM < "hem" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_hem_v_in_rel" ],
            PHON.ONSET con ] ].

hem_n1 := n_intr_le &
 [ STEM < "hem" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hem_n_1_rel",
            PHON.ONSET con ] ].

hem_out_v1 := v_particle_np_le &
 [ STEM < "hem" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_hem_v_out_rel" ],
            PHON.ONSET con ] ].

hem_v1 := v_np_trans_le &
 [ STEM < "hem" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hem_v_1_rel",
            PHON.ONSET con ] ].

hematite_n1 := n_mass_le &
 [ STEM < "hematite" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hematite_n_1_rel",
            PHON.ONSET con ] ].

hemisphere_n1 := n_intr_le &
 [ STEM < "hemisphere" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hemisphere_n_1_rel",
            PHON.ONSET con ] ].

hemp_n1 := n_mass_le &
 [ STEM < "hemp" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hemp_n_1_rel",
            PHON.ONSET con ] ].

henan_n1 := n_proper_le &
 [ STEM < "henan" >,
   SYNSEM [ LKEYS.KEYREL.CARG "henan",
            PHON.ONSET con ] ].

hence_adv1 := adv_vp_pre_le &
 [ STEM < "hence" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hence_a_1_rel",
            PHON.ONSET con ] ].

hence_root_pre := adv_s_pre_word_nospec_le &
 [ STEM < "hence" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hence_a_1_rel",
            PHON.ONSET con ] ].

hengshan_n1 := n_proper_le &
 [ STEM < "hengshan" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hengshan",
            PHON.ONSET con ] ].

henrik := n_proper_le &
 [ STEM < "henrik" >,
   SYNSEM [ LKEYS.KEYREL.CARG "henrik",
            PHON.ONSET con ] ].

henry_n1 := n_proper_le &
 [ STEM < "henry" >,
   SYNSEM [ LKEYS.KEYREL.CARG "henry",
            PHON.ONSET con ] ].

hepatitis_n1 := n_mass_count_le &
 [ STEM < "hepatitis" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hepatitis_n_1_rel",
            PHON.ONSET con ] ].

her := n_pers_pro_her_le &
 [ STEM < "her" >,
   SYNSEM.PHON.ONSET con ].

her_poss := det_poss_her_le &
 [ STEM < "her" >,
   SYNSEM.PHON.ONSET con ].

herald_n1 := n_intr_le &
 [ STEM < "herald" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_herald_n_1_rel",
            PHON.ONSET con ] ].

herald_v1 := v_np_trans_le &
 [ STEM < "herald" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_herald_v_1_rel",
            PHON.ONSET con ] ].

herb_n1 := n_intr_le &
 [ STEM < "herb" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_herb_n_1_rel",
            PHON.ONSET con ] ].

herbaceous_a1 := adj_intrans_le &
 [ STEM < "herbaceous" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_herbaceous_a_1_rel",
            PHON.ONSET con ] ].

herbivore_n1 := n_intr_le &
 [ STEM < "herbivore" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_herbivore_n_1_rel",
            PHON.ONSET con ] ].

herd_n1 := n_intr_le &
 [ STEM < "herd" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_herd_n_of_rel",
            PHON.ONSET con ] ].

herd_n2 := n_group_ppof_le &
 [ STEM < "herd" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_herd_n_of_rel",
            PHON.ONSET con ] ].

herd_v1 := v_np_trans_le &
 [ STEM < "herd" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_herd_v_1_rel",
            PHON.ONSET con ] ].

herder_n1 := n_intr_le &
 [ STEM < "herder" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_herder_n_1_rel",
            PHON.ONSET con ] ].

herders_a1 := adj_compound_le &
 [ STEM < "herder", "'s" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_herder_n_1_rel",
            PHON.ONSET con ] ].

herdsman_n1 := n_intr_le &
 [ STEM < "herdsman" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_herdsman_n_1_rel",
            PHON.ONSET con ] ].

here_nom := n_adv_pl_le &
 [ STEM < "here" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED _here_a_1_rel,
                    KEYREL.PRED place_n_rel ],
            PHON.ONSET con ] ].

hereabouts_nom := n_adv_pl_le &
 [ STEM < "hereabouts" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED _hereabouts_p_rel,
                    KEYREL.PRED place_n_rel ],
            PHON.ONSET con ] ].

hereby_adv1 := adv_int_vp_pre_le &
 [ STEM < "hereby" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hereby_a_1_rel",
            PHON.ONSET con ] ].

hereditary_a1 := adj_intrans_le &
 [ STEM < "hereditary" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hereditary_a_1_rel",
            PHON.ONSET con ] ].

heredity_n1 := n_mass_le &
 [ STEM < "heredity" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_heredity_n_1_rel",
            PHON.ONSET con ] ].

hereford_n1 := n_proper_le &
 [ STEM < "hereford" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hereford",
            PHON.ONSET con ] ].

heretofore_adv := adv_int_vp_le &
 [ STEM < "heretofore" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_heretofore_a_1_rel",
            PHON.ONSET con ] ].

herewith_adv1 := adv_int_vp_post_le &
 [ STEM < "herewith" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_herewith_a_1_rel",
            PHON.ONSET con ] ].

heritage_n1 := n_mass_le &
 [ STEM < "heritage" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_heritage_n_1_rel",
            PHON.ONSET con ] ].

hermann_n1 := n_proper_le &
 [ STEM < "hermann" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hermann",
            PHON.ONSET con ] ].

hermit_n1 := n_intr_le &
 [ STEM < "hermit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hermit_n_1_rel",
            PHON.ONSET con ] ].

hero_n1 := n_intr_le &
 [ STEM < "hero" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hero_n_1_rel",
            PHON.ONSET con ] ].

herod_n1 := n_proper_le &
 [ STEM < "herod" >,
   SYNSEM [ LKEYS.KEYREL.CARG "herod",
            PHON.ONSET con ] ].

heroic_a1 := adj_intrans_le &
 [ STEM < "heroic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_heroic_a_1_rel",
            PHON.ONSET con ] ].

heroin_n1 := n_mass_le &
 [ STEM < "heroin" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_heroin_n_1_rel",
            PHON.ONSET con ] ].

herpes_n1 := n_plur_le &
 [ STEM < "herpe" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_herpes_n_1_rel",
            PHON.ONSET con ] ].

herr_ttl := n_title_unsp_le &
 [ STEM < "herr" >,
   SYNSEM [ LKEYS.KEYREL.CARG "herr",
            PHON.ONSET con ] ].

herrenhausen_n1 := n_proper_le &
 [ STEM < "herrenhausen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "herrenhausen",
            PHON.ONSET con ] ].

herrmann_n1 := n_proper_le &
 [ STEM < "herrmann" >,
   SYNSEM [ LKEYS.KEYREL.CARG "herrmann",
            PHON.ONSET con ] ].

hers := n_poss_pro_hers_le &
 [ STEM < "hers" >,
   SYNSEM.PHON.ONSET con ].

hers_nq := det_poss_nospec_hers_le &
 [ STEM < "hers" >,
   SYNSEM.PHON.ONSET con ].

herself := n_refl_pro_herself_le &
 [ STEM < "herself" >,
   SYNSEM.PHON.ONSET con ].

herself_adv := adv_refl_pro_herself_le &
 [ STEM < "herself" >,
   SYNSEM.PHON.ONSET con ].

herva_n1 := n_proper_le &
 [ STEM < "herva" >,
   SYNSEM [ LKEYS.KEYREL.CARG "herva",
            PHON.ONSET con ] ].

hesitant_a1 := adj_intrans_le &
 [ STEM < "hesitant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hesitant_a_1_rel",
            PHON.ONSET con ] ].

hesitate_v1 := v_unerg_le &
 [ STEM < "hesitate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hesitate_v_1_rel",
            PHON.ONSET con ] ].

hesitate_v2 := v_subj_equi_le &
 [ STEM < "hesitate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hesitate_v_1_rel",
            PHON.ONSET con ] ].

hessen_n1 := n_proper_le &
 [ STEM < "hessen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hessen",
            PHON.ONSET con ] ].

hestbekken_n1 := n_proper_le &
 [ STEM < "hestbekken" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hestbekken",
            PHON.ONSET con ] ].

hestbrepiggane_n1 := n_proper_le &
 [ STEM < "hestbrepiggane" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hestbrepiggane",
            PHON.ONSET con ] ].

hestbrepigger_n1 := n_proper_le &
 [ STEM < "hestbrepigger" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hestbrepigger",
            PHON.ONSET con ] ].

hestdalgshÃ¸gdi_n1 := n_proper_le &
 [ STEM < "hestdalgshÃ¸gdi" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hestdalgshÃ¸gdi",
            PHON.ONSET con ] ].

hestdalshÃ¸gdi_n1 := n_proper_le &
 [ STEM < "hestdalshÃ¸gdi" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hestdalshÃ¸gdi",
            PHON.ONSET con ] ].

hestevollen_n1 := n_proper_le &
 [ STEM < "hestevollen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hestevollen",
            PHON.ONSET con ] ].

hestlegerhÃ¸_n1 := n_proper_le &
 [ STEM < "hestlegerhÃ¸" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hestlegerhÃ¸",
            PHON.ONSET con ] ].

hestlÃ¦gerhÃ¸_n1 := n_proper_le &
 [ STEM < "hestlÃ¦gerhÃ¸" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hestlÃ¦gerhÃ¸",
            PHON.ONSET con ] ].

hew_out_v1 := v_particle_np_le &
 [ STEM < "hew" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_hew_v_out_rel" ],
            PHON.ONSET con ] ].

hew_v1 := v_np*_trans_le &
 [ STEM < "hew" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hew_v_1_rel",
            PHON.ONSET con ] ].

hexagon_n1 := n_intr_le &
 [ STEM < "hexagon" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hexagon_n_1_rel",
            PHON.ONSET con ] ].

hexagonal_a1 := adj_intrans_le &
 [ STEM < "hexagonal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hexagonal_a_1_rel",
            PHON.ONSET con ] ].

hey_root_pre := adv_s_pre_word_root_le &
 [ STEM < "hey" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hey_a_1_rel",
            PHON.ONSET con ] ].

heyday_n1 := n_intr_le &
 [ STEM < "heyday" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_heyday_n_1_rel",
            PHON.ONSET con ] ].

heyerdahl := n_proper_le &
 [ STEM < "heyerdahl" >,
   SYNSEM [ LKEYS.KEYREL.CARG "heyerdahl",
            PHON.ONSET con ] ].

hhh_root_pre := adv_s_pre_word_root_le &
 [ STEM < "hhh" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hhh_a_1_rel",
            PHON.ONSET con ] ].

hi_root_post := adv_disc_posth_grt_le &
 [ STEM < "hi" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hi",
            PHON.ONSET con ] ].

hi_root_pre := adv_disc_preh_grt_le &
 [ STEM < "hi" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hi",
            PHON.ONSET con ] ].

hide_away_v1 := v_particle_le &
 [ STEM < "hide" >,
   SYNSEM [ LKEYS [ --COMPKEY _away_p_sel_rel,
                    KEYREL.PRED "_hide_v_away_rel" ],
            PHON.ONSET con ] ].

hide_away_v2 := v_particle_np_le &
 [ STEM < "hide" >,
   SYNSEM [ LKEYS [ --COMPKEY _away_p_sel_rel,
                    KEYREL.PRED "_hide_v_away_rel" ],
            PHON.ONSET con ] ].

hide_v1 := v_np*_trans_le &
 [ STEM < "hide" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hide_v_away_rel",
            PHON.ONSET con ] ].

hierarchical_a1 := adj_intrans_le &
 [ STEM < "hierarchical" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hierarchical_a_1_rel",
            PHON.ONSET con ] ].

high_a1 := adj_intrans_le &
 [ STEM < "high" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_high_a_1_rel",
            PHON.ONSET con ] ].

high_adv := adv_int_vp_post_le &
 [ STEM < "high" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_high_a_1_rel",
            PHON.ONSET con ] ].

high_deg := adv_degree_spec_m_le &
 [ STEM < "high" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_high_x_deg_rel",
            PHON.ONSET con ] ].

high_n1 := n_no_cmpnd_le &
 [ STEM < "high" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_high_n_1_rel",
            PHON.ONSET con ] ].

high_power_a1 := adj_intrans_le &
 [ STEM < "high", "power" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_high+power_a_1_rel",
            PHON.ONSET con ] ].

high_powered_a1 := adj_intrans_le &
 [ STEM < "high", "powered" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_high+powered_a_1_rel",
            PHON.ONSET con ] ].

high_powered_a2 := adj_intrans_le &
 [ STEM < "high-", "powered" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_high+powered_a_1_rel",
            PHON.ONSET con ] ].

high_res_n1 := n_intr_le &
 [ STEM < "high", "res" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_high+resolution_n_1_rel",
            PHON.ONSET con ] ].

high_res_n2 := n_intr_le &
 [ STEM < "high-", "res" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_high+resolution_n_1_rel",
            PHON.ONSET con ] ].

high_res_n3 := n_intr_le &
 [ STEM < "high-", "resolution" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_high+resolution_n_1_rel",
            PHON.ONSET con ] ].

high_tech_a1 := adj_intrans_le &
 [ STEM < "high", "tech" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_high+tech_a_1_rel",
            PHON.ONSET con ] ].

high_tech_a2 := adj_intrans_le &
 [ STEM < "high-", "tech" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_high+tech_a_1_rel",
            PHON.ONSET con ] ].

higher_a1 := adj_comp_le &
 [ STEM < "higher" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_high_a_1_rel",
            PHON.ONSET con ] ].

higher_deg := adv_degree_spec_m_le &
 [ STEM < "higher" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_higher_x_deg_rel",
            PHON.ONSET con ] ].

higher_up_a1 := adj_comp_le &
 [ STEM < "higher", "up" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_high+up_a_1_rel",
            PHON.ONSET con ] ].

highest_a1 := adj_superl_le &
 [ STEM < "highest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_high_a_1_rel",
            PHON.ONSET con ] ].

highlander_n1 := n_intr_named_le &
 [ STEM < "highlander" >,
   SYNSEM [ LKEYS.KEYREL.CARG "highlander",
            PHON.ONSET con ] ].

highlight_n := n_intr_le &
 [ STEM < "highlight" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_highlight_n_1_rel",
            PHON.ONSET con ] ].

highlight_v1 := v_np_trans_le &
 [ STEM < "highlight" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_highlight_v_1_rel",
            PHON.ONSET con ] ].

highlight_v2 := v_cp_non_trans_le &
 [ STEM < "highlight" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_highlight_v_1_rel",
            PHON.ONSET con ] ].

highly_adv := adv_int_vp_le &
 [ STEM < "highly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_high_a_1_rel",
            PHON.ONSET con ] ].

highly_deg := adv_degree_spec_v_le &
 [ STEM < "highly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_high_x_deg_rel",
            PHON.ONSET con ] ].

highpoint_n1 := n_intr_le &
 [ STEM < "highpoint" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_highpoint_n_1_rel",
            PHON.ONSET con ] ].

highway_n1 := n_intr_le &
 [ STEM < "highway" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_highway_n_1_rel",
            PHON.ONSET con ] ].

highway_post_ttl := n_post_title_le &
 [ STEM < "highway" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_highway_n_1_rel",
            PHON.ONSET con ] ].

highway_title := n_title_le &
 [ STEM < "highway" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_highway_n_1_rel",
            PHON.ONSET con ] ].

highwayman_n1 := n_intr_le &
 [ STEM < "highwayman" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_highwayman_n_1_rel",
            PHON.ONSET con ] ].

hike_n1 := n_intr_le &
 [ STEM < "hike" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hike_n_1_rel",
            PHON.ONSET con ] ].

hike_ttl := n_title_le &
 [ STEM < "hike" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hike_n_1_rel",
            PHON.ONSET con ] ].

hike_v1 := v_prep_dir_le &
 [ STEM < "hike" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hike_v_1_rel",
            PHON.ONSET con ] ].

hike_v2 := v_np_trans_noger_le &
 [ STEM < "hike" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hike_v_1_rel",
            PHON.ONSET con ] ].

hiker_n1 := n_intr_le &
 [ STEM < "hiker" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hiker_n_1_rel",
            PHON.ONSET con ] ].

hikers_a1 := adj_compound_le &
 [ STEM < "hiker", "'s" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hiker_a_1_rel",
            PHON.ONSET con ] ].

hikers_a2 := adj_compound_le &
 [ STEM < "hikers", "'" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hiker_a_1_rel",
            PHON.ONSET con ] ].

hilde_n1 := n_proper_le &
 [ STEM < "hilde" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hilde",
            PHON.ONSET con ] ].

hill_n1 := n_intr_le &
 [ STEM < "hill" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hill_n_1_rel",
            PHON.ONSET con ] ].

hillary := n_proper_le &
 [ STEM < "hillary" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hillary",
            PHON.ONSET con ] ].

hillcrest_n1 := n_intr_le &
 [ STEM < "hillcrest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hillcrest_n_1_rel",
            PHON.ONSET con ] ].

hillock_n1 := n_intr_le &
 [ STEM < "hillock" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hillock_n_1_rel",
            PHON.ONSET con ] ].

hillside_n1 := n_intr_le &
 [ STEM < "hillside" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hillside_n_1_rel",
            PHON.ONSET con ] ].

hilltop_n1 := n_intr_le &
 [ STEM < "hilltop" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hilltop_n_1_rel",
            PHON.ONSET con ] ].

hilly_a1 := adj_intrans_le &
 [ STEM < "hilly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hilly_a_1_rel",
            PHON.ONSET con ] ].

hilton_n1 := n_intr_named_le &
 [ STEM < "hilton" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hilton",
            PHON.ONSET con ] ].

him := n_pers_pro_him_le &
 [ STEM < "him" >,
   SYNSEM.PHON.ONSET con ].

himself := n_refl_pro_himself_le &
 [ STEM < "himself" >,
   SYNSEM.PHON.ONSET con ].

himself_adv := adv_refl_pro_himself_le &
 [ STEM < "himself" >,
   SYNSEM.PHON.ONSET con ].

hinckley_n1 := n_proper_le &
 [ STEM < "hinckley" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hinckley",
            PHON.ONSET con ] ].

hinder_a1 := adj_intrans_le &
 [ STEM < "hinder" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hinder_a_1_rel",
            PHON.ONSET con ] ].

hinder_v1 := v_np_trans_le &
 [ STEM < "hinder" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hinder_v_1_rel",
            PHON.ONSET con ] ].

hindrance_n1 := n_mass_count_le &
 [ STEM < "hindrance" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hindrance_n_1_rel",
            PHON.ONSET con ] ].

hindsÃ¦ter_fjellstue_n1 := n_proper_le &
 [ STEM < "hindsÃ¦ter", "fjellstue" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hindsÃ¦ter+fjellstue",
            PHON.ONSET con ] ].

hindsÃ¦ter_n1 := n_proper_le &
 [ STEM < "hindsÃ¦ter" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hindsÃ¦ter",
            PHON.ONSET con ] ].

hindu_n1 := n_intr_named_le &
 [ STEM < "hindu" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hindu",
            PHON.ONSET con ] ].

hinduism_n1 := n_mass_le &
 [ STEM < "hinduism" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hinduism_n_1_rel",
            PHON.ONSET con ] ].

hinge_n1 := n_intr_le &
 [ STEM < "hinge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hinge_n_1_rel",
            PHON.ONSET con ] ].

hinge_on_v1 := v_empty_prep_intrans_le &
 [ STEM < "hinge" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_hinge_v_on_rel" ],
            PHON.ONSET con ] ].

hinge_v1 := v_np_trans_le &
 [ STEM < "hinge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hinge_v_1_rel",
            PHON.ONSET con ] ].

hinnotefjellet_n1 := n_proper_le &
 [ STEM < "hinnotefjellet" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hinnotefjellet",
            PHON.ONSET con ] ].

hint_at_v1 := v_empty_prep_intrans_le &
 [ STEM < "hint" >,
   SYNSEM [ LKEYS [ --COMPKEY _at_p_sel_rel,
                    KEYREL.PRED "_hint_v_at_rel" ],
            PHON.ONSET con ] ].

hint_n1 := n_ppof_le &
 [ STEM < "hint" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hint_n_of_rel",
            PHON.ONSET con ] ].

hint_v1 := v_cp_non_trans_le &
 [ STEM < "hint" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hint_v_1_rel",
            PHON.ONSET con ] ].

hip_isect := adj_intrans_le &
 [ STEM < "hip" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hip_a_1_rel",
            PHON.ONSET con ] ].

hippopotamus_n1 := n_intr_le &
 [ STEM < "hippopotamus" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hippopotamus_n_1_rel",
            PHON.ONSET con ] ].

hiratsuka_n1 := n_proper_le &
 [ STEM < "hiratsuka" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hiratsuka",
            PHON.ONSET con ] ].

hire_v1 := v_np_trans_le &
 [ STEM < "hire" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hire_v_1_rel",
            PHON.ONSET con ] ].

hirohito_n1 := n_proper_le &
 [ STEM < "hirohito" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hirohito",
            PHON.ONSET con ] ].

hirtshals := n_proper_le &
 [ STEM < "hirtshals" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hirtshals",
            PHON.ONSET con ] ].

his := n_poss_pro_his_le &
 [ STEM < "his" >,
   SYNSEM.PHON.ONSET con ].

his_her_poss := det_poss_his_her_le &
 [ STEM < "his", "or", "her" >,
   SYNSEM.PHON.ONSET con ].

his_her_poss_2 := det_poss_his_her_le &
 [ STEM < "his", "/", "her" >,
   SYNSEM.PHON.ONSET con ].

his_nq := det_poss_nospec_his_le &
 [ STEM < "his" >,
   SYNSEM.PHON.ONSET con ].

his_poss := det_poss_his_le &
 [ STEM < "his" >,
   SYNSEM.PHON.ONSET con ].

hiss_at_v1 := v_empty_prep_intrans_le &
 [ STEM < "hiss" >,
   SYNSEM [ LKEYS [ --COMPKEY _at_p_sel_rel,
                    KEYREL.PRED "_hiss_v_at_rel" ],
            PHON.ONSET con ] ].

hiss_n1 := n_intr_le &
 [ STEM < "hiss" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hiss_n_1_rel",
            PHON.ONSET con ] ].

hiss_v1 := v_np*_trans_le &
 [ STEM < "hiss" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hiss_v_1_rel",
            PHON.ONSET con ] ].

historian_n1 := n_intr_le &
 [ STEM < "historian" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_historian_n_1_rel",
            PHON.ONSET con ] ].

historic_a1 := adj_intrans_le &
 [ STEM < "historic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_historic_a_1_rel",
            PHON.ONSET con ] ].

historical_isect := adj_intrans_le &
 [ STEM < "historical" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_historical_a_1_rel",
            PHON.ONSET con ] ].

historically := adv_int_vp_le &
 [ STEM < "historically" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_historical_a_1_rel",
            PHON.ONSET con ] ].

history_n1 := n_mass_count_ppof_le &
 [ STEM < "history" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_history_n_of_rel",
            PHON.ONSET con ] ].

hit_n1 := n_intr_le &
 [ STEM < "hit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hit_n_1_rel",
            PHON.ONSET con ] ].

hit_v1 := v_np*_trans_le &
 [ STEM < "hit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hit_v_1_rel",
            PHON.ONSET con ] ].

hitachi_n1 := n_proper_le &
 [ STEM < "hitachi" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hitachi",
            PHON.ONSET con ] ].

hitchhike_v1 := v_prep_dir_le &
 [ STEM < "hitchhike" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hitchhike_v_1_rel",
            PHON.ONSET con ] ].

hitchhiker_n1 := n_intr_le &
 [ STEM < "hitchhiker" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hitchhiker_n_1_rel",
            PHON.ONSET con ] ].

hither_adv1 := pp_dir_le &
 [ STEM < "hither" >,
   SYNSEM [ LKEYS.KEYREL.PRED _hither_p_rel,
            PHON.ONSET con ] ].

hitherto_deg := adv_degree_spec_le &
 [ STEM < "hitherto" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hitherto_x_deg_rel",
            PHON.ONSET con ] ].

hitherward_adv1 := pp_le &
 [ STEM < "hitherward" >,
   SYNSEM [ LKEYS.KEYREL.PRED _hitherward_p_rel,
            PHON.ONSET con ] ].

hitler_n1 := n_proper_le &
 [ STEM < "hitler" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hitler",
            PHON.ONSET con ] ].

hjelle_n1 := n_proper_le &
 [ STEM < "hjelle" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hjelle",
            PHON.ONSET con ] ].

hjerkinn := n_proper_le &
 [ STEM < "hjerkinn" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hjerkinn",
            PHON.ONSET con ] ].

hjÃ¸rnet_n1 := n_proper_le &
 [ STEM < "hjÃ¸rnet" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hjÃ¸rnet",
            PHON.ONSET con ] ].

hjÃ¸rundfjord_n1 := n_proper_city_le &
 [ STEM < "hjÃ¸rundfjord" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hjÃ¸rundfjord",
            PHON.ONSET con ] ].

hjÃ¸rundfjorden_n1 := n_proper_city_le &
 [ STEM < "hjÃ¸rundfjorden" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hjÃ¸rundfjorden",
            PHON.ONSET con ] ].

hk_n1 := n_proper_le &
 [ STEM < "hk" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hk",
            PHON.ONSET con ] ].

hksa_nd := n_proper_le &
 [ STEM < "hksa" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hksa",
            PHON.ONSET con ] ].

hm_root_pre := adv_s_pre_word_root_le &
 [ STEM < "hm" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hm_a_1_rel",
            PHON.ONSET con ] ].

hmm_root_pre := adv_s_pre_word_root_le &
 [ STEM < "hmm" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hmm_a_1_rel",
            PHON.ONSET con ] ].

hoary_a1 := adj_intrans_le &
 [ STEM < "hoary" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hoary_a_1_rel",
            PHON.ONSET con ] ].

hobby_n1 := n_intr_le &
 [ STEM < "hobby" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hobby_n_1_rel",
            PHON.ONSET con ] ].

hobnail_n1 := n_intr_le &
 [ STEM < "hobnail" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hobnail_n_1_rel",
            PHON.ONSET con ] ].

hochmut_n1 := n_proper_le &
 [ STEM < "hochmut" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hochmut",
            PHON.ONSET con ] ].

hockenheim_n1 := n_proper_city_le &
 [ STEM < "hockenheim" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hockenheim",
            PHON.ONSET con ] ].

hockey_n1 := n_mass_le &
 [ STEM < "hockey" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hockey_n_1_rel",
            PHON.ONSET con ] ].

hoe_n1 := n_intr_le &
 [ STEM < "hoe" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hoe_n_1_rel",
            PHON.ONSET con ] ].

hoe_v1 := v_np*_trans_le &
 [ STEM < "hoe" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hoe_v_1_rel",
            PHON.ONSET con ] ].

hog_n1 := n_intr_le &
 [ STEM < "hog" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hog_n_1_rel",
            PHON.ONSET con ] ].

hog_v1 := v_np_trans_le &
 [ STEM < "hog" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hog_v_1_rel",
            PHON.ONSET con ] ].

hogback_a1 := adj_intrans_le &
 [ STEM < "hogback" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hogback_a_1_rel",
            PHON.ONSET con ] ].

hogronden := n_proper_le &
 [ STEM < "hogronden" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hogronden",
            PHON.ONSET con ] ].

hogshead_n1 := n_intr_le &
 [ STEM < "hogshead" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hogshead_n_1_rel",
            PHON.ONSET con ] ].

hoist_n1 := n_intr_le &
 [ STEM < "hoist" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hoist_n_1_rel",
            PHON.ONSET con ] ].

hoist_up_v1 := v_particle_np_le &
 [ STEM < "hoist" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_hoist_v_up_rel" ],
            PHON.ONSET con ] ].

hoist_v1 := v_np_trans_le &
 [ STEM < "hoist" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hoist_v_1_rel",
            PHON.ONSET con ] ].

hoist_v2 := v_np_prep_trans_dors_le &
 [ STEM < "hoist" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hoist_v_1_rel",
            PHON.ONSET con ] ].

hol := n_proper_le &
 [ STEM < "hol" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hol",
            PHON.ONSET con ] ].

hol_aurland_n1 := n_proper_le &
 [ STEM < "hol-", "aurland" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hol_aurland",
            PHON.ONSET con ] ].

hold_back_v1 := v_particle_np_le &
 [ STEM < "hold" >,
   SYNSEM [ LKEYS [ --COMPKEY _back_p_sel_rel,
                    KEYREL.PRED "_hold_v_back_rel" ],
            PHON.ONSET con ] ].

hold_back_v2 := v_particle_le &
 [ STEM < "hold" >,
   SYNSEM [ LKEYS [ --COMPKEY _back_p_sel_rel,
                    KEYREL.PRED "_hold_v_back_rel" ],
            PHON.ONSET con ] ].

hold_down_v1 := v_particle_np_le &
 [ STEM < "hold" >,
   SYNSEM [ LKEYS [ --COMPKEY _down_p_sel_rel,
                    KEYREL.PRED "_hold_v_down_rel" ],
            PHON.ONSET con ] ].

hold_in_v1 := v_particle_np_le &
 [ STEM < "hold" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_hold_v_in_rel" ],
            PHON.ONSET con ] ].

hold_n1 := n_mass_count_ppof_le &
 [ STEM < "hold" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hold_n_of_rel",
            PHON.ONSET con ] ].

hold_n1_i := n_intr_nospr_le &
 [ STEM < "hold" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hold_n_of_rel",
            PHON.ONSET con ] ].

hold_off_v1 := v_particle_np_le &
 [ STEM < "hold" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_hold_v_off_rel" ],
            PHON.ONSET con ] ].

hold_off_v2 := v_particle_le &
 [ STEM < "hold" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_hold_v_off_rel" ],
            PHON.ONSET con ] ].

hold_on_v1 := v_particle_le &
 [ STEM < "hold" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_hold_v_on_rel" ],
            PHON.ONSET con ] ].

hold_still_v1 := v_particle_le &
 [ STEM < "hold" >,
   SYNSEM [ LKEYS [ --COMPKEY _still_a_sel_rel,
                    KEYREL.PRED "_hold_v_still_rel" ],
            PHON.ONSET con ] ].

hold_up_n1 := n_intr_le &
 [ STEM < "hold", "up" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hold+up_n_1_rel",
            PHON.ONSET con ] ].

hold_up_n2 := n_intr_le &
 [ STEM < "holdup" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hold+up_n_1_rel",
            PHON.ONSET con ] ].

hold_up_on_v1 := v_particle_pp_le &
 [ STEM < "hold" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    --OCOMPKEY _on_p_rel,
                    KEYREL.PRED "_hold_v_up_rel" ],
            PHON.ONSET con ] ].

hold_up_v1 := v_particle_np_le &
 [ STEM < "hold" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_hold_v_up_rel" ],
            PHON.ONSET con ] ].

hold_up_v2 := v_particle_le &
 [ STEM < "hold" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_hold_v_up_rel" ],
            PHON.ONSET con ] ].

hold_v1 := v_np*_trans_le &
 [ STEM < "hold" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hold_v_1_rel",
            PHON.ONSET con ] ].

hold_v2 := v_obj_equi_le &
 [ STEM < "hold" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hold_v_1_rel",
            PHON.ONSET con ] ].

holder_n1 := n_ppof_le &
 [ STEM < "holder" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_holder_n_of_rel",
            PHON.ONSET con ] ].

holding_n1 := n_intr_le &
 [ STEM < "holding" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_holding_n_1_rel",
            PHON.ONSET con ] ].

hole_n1 := n_intr_le &
 [ STEM < "hole" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hole_n_1_rel",
            PHON.ONSET con ] ].

holger_n1 := n_proper_le &
 [ STEM < "holger" >,
   SYNSEM [ LKEYS.KEYREL.CARG "holger",
            PHON.ONSET con ] ].

holiday_i_n1 := n_bare_nmod_opt_le &
 [ STEM < "holiday" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_holiday_n_1_rel",
            PHON.ONSET con ] ].

holiday_n1 := n_intr_temp_d_le &
 [ STEM < "holiday" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_holiday_n_1_rel",
            PHON.ONSET con ] ].

holland_n1 := n_proper_le &
 [ STEM < "holland" >,
   SYNSEM [ LKEYS.KEYREL.CARG "holland",
            PHON.ONSET con ] ].

hollow_a1 := adj_intrans_le &
 [ STEM < "hollow" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hollow_a_1_rel",
            PHON.ONSET con ] ].

hollow_n1 := n_intr_le &
 [ STEM < "hollow" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hollow_n_1_rel",
            PHON.ONSET con ] ].

hollow_out_v1 := v_particle_np_le &
 [ STEM < "hollow" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_hollow_v_out_rel" ],
            PHON.ONSET con ] ].

hollow_v1 := v_np_trans_le &
 [ STEM < "hollow" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hollow_v_1_rel",
            PHON.ONSET con ] ].

holmestrand_n1 := n_proper_city_le &
 [ STEM < "holmestrand" >,
   SYNSEM [ LKEYS.KEYREL.CARG "holmestrand",
            PHON.ONSET con ] ].

holstein_n1 := n_proper_le &
 [ STEM < "holstein" >,
   SYNSEM [ LKEYS.KEYREL.CARG "holstein",
            PHON.ONSET con ] ].

holy_a1 := adj_intrans_le &
 [ STEM < "holy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_holy_a_1_rel",
            PHON.ONSET con ] ].

holy_saturday := n_holiday_le &
 [ STEM < "holy", "saturday" >,
   SYNSEM [ LKEYS.KEYREL.CARG "holy_saturday",
            PHON.ONSET con ] ].

holy_week := n_holiday_le &
 [ STEM < "holy", "week" >,
   SYNSEM [ LKEYS.KEYREL.CARG "holy_week",
            PHON.ONSET con ] ].

holÃ¥tindane_n1 := n_proper_pl_le &
 [ STEM < "holÃ¥tindane" >,
   SYNSEM [ LKEYS.KEYREL.CARG "holÃ¥tindane",
            PHON.ONSET con ] ].

holÃ¥tinder_n1 := n_proper_pl_le &
 [ STEM < "holÃ¥tinder" >,
   SYNSEM [ LKEYS.KEYREL.CARG "holÃ¥tinder",
            PHON.ONSET con ] ].

homburg_n1 := n_proper_city_le &
 [ STEM < "homburg" >,
   SYNSEM [ LKEYS.KEYREL.CARG "homburg",
            PHON.ONSET con ] ].

home_adv := n_adv_pl_nonprd_le &
 [ STEM < "home" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED _home_p_rel,
                    KEYREL.PRED place_n_rel ],
            PHON.ONSET con ] ].

home_brewed_a1 := adj_intrans_le &
 [ STEM < "home", "brewed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_home+brewed_a_1_rel",
            PHON.ONSET con ] ].

home_brewed_a2 := adj_intrans_le &
 [ STEM < "home-", "brewed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_home+brewed_a_1_rel",
            PHON.ONSET con ] ].

home_n1 := n_intr_nosort_le &
 [ STEM < "home" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_home_n_of-n_rel",
            PHON.ONSET con ] ].

home_n2 := n_mass_ppcomp_nospr_le &
 [ STEM < "home" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_nbar_rel,
                    KEYREL.PRED "_home_n_of-n_rel" ],
            PHON.ONSET con ] ].

home_shopping_network_n1 := n_proper_le &
 [ STEM < "home", "shopping", "network" >,
   SYNSEM [ LKEYS.KEYREL.CARG "home_shopping_network",
            PHON.ONSET con ] ].

homebound_a1 := adj_intrans_le &
 [ STEM < "homebound" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_homebound_a_1_rel",
            PHON.ONSET con ] ].

homeland_n1 := n_intr_le &
 [ STEM < "homeland" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_homeland_n_1_rel",
            PHON.ONSET con ] ].

homestead_n1 := n_intr_le &
 [ STEM < "homestead" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_homestead_n_1_rel",
            PHON.ONSET con ] ].

homestead_v1 := v_unerg_le &
 [ STEM < "homestead" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_homestead_v_1_rel",
            PHON.ONSET con ] ].

homeward_a1 := adj_intrans_le &
 [ STEM < "homeward" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_homeward_a_1_rel",
            PHON.ONSET con ] ].

homeward_adv := adv_int_vp_le &
 [ STEM < "homeward" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_homeward_a_1_rel",
            PHON.ONSET con ] ].

homework_n1 := n_mass_le &
 [ STEM < "homework" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_homework_n_1_rel",
            PHON.ONSET con ] ].

honda_n1 := n_proper_le &
 [ STEM < "honda" >,
   SYNSEM [ LKEYS.KEYREL.CARG "honda",
            PHON.ONSET con ] ].

honduran_a1 := adj_intrans_le &
 [ STEM < "honduran" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_honduran_a_1_rel",
            PHON.ONSET con ] ].

honduran_n1 := n_intr_le &
 [ STEM < "honduran" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_honduran_n_1_rel",
            PHON.ONSET con ] ].

honduras_n1 := n_proper_le &
 [ STEM < "honduras" >,
   SYNSEM [ LKEYS.KEYREL.CARG "honduras",
            PHON.ONSET con ] ].

hone_v1 := v_np_trans_le &
 [ STEM < "hone" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hone_v_1_rel",
            PHON.ONSET con ] ].

honest_a1 := adj_intrans_le &
 [ STEM < "honest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_honest_a_1_rel",
            PHON.ONSET voc ] ].

honestly_adv1 := adv_int_vp_le &
 [ STEM < "honestly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_honest_a_1_rel",
            PHON.ONSET voc ] ].

honesty_n1 := n_mass_le &
 [ STEM < "honesty" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_honesty_n_1_rel",
            PHON.ONSET voc ] ].

hongda_n1 := n_proper_le &
 [ STEM < "hongda" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hongda",
            PHON.ONSET con ] ].

hongen_n1 := n_proper_le &
 [ STEM < "hongen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hongen",
            PHON.ONSET con ] ].

hongkong_n1 := n_proper_city_le &
 [ STEM < "hong", "kong" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hong_kong",
            PHON.ONSET con ] ].

hongkou_n1 := n_proper_le &
 [ STEM < "hongkou" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hongkou",
            PHON.ONSET con ] ].

hongqiao_n1 := n_proper_le &
 [ STEM < "hongqiao" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hongqiao",
            PHON.ONSET con ] ].

hongshan_n1 := n_proper_le &
 [ STEM < "hongshan" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hongshan",
            PHON.ONSET con ] ].

hongyun_n1 := n_proper_le &
 [ STEM < "hongyun" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hongyun",
            PHON.ONSET con ] ].

honk_v1 := v_np_trans_le &
 [ STEM < "honk" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_honk_v_1_rel",
            PHON.ONSET con ] ].

honolulu_n1 := n_proper_city_le &
 [ STEM < "honolulu" >,
   SYNSEM [ LKEYS.KEYREL.CARG "honolulu",
            PHON.ONSET con ] ].

honor_n1 := n_mass_count_le &
 [ STEM < "honor" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_honor_n_1_rel",
            PHON.ONSET voc ] ].

honor_v1 := v_np_trans_le &
 [ STEM < "honor" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_honor_v_1_rel",
            PHON.ONSET voc ] ].

honorable_a1 := adj_intrans_le &
 [ STEM < "honorable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_honorable_a_1_rel",
            PHON.ONSET voc ] ].

honorary_a1 := adj_intrans_le &
 [ STEM < "honorary" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_honorary_a_1_rel",
            PHON.ONSET voc ] ].

hood_n1 := n_intr_le &
 [ STEM < "hood" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hood_n_1_rel",
            PHON.ONSET con ] ].

hood_v1 := v_np_trans_le &
 [ STEM < "hood" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hood_v_1_rel",
            PHON.ONSET con ] ].

hoof_n1 := n_intr_le &
 [ STEM < "hoof" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hoof_n_1_rel",
            PHON.ONSET con ] ].

hook_n1 := n_intr_le &
 [ STEM < "hook" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hook_n_1_rel",
            PHON.ONSET con ] ].

hook_up_v1 := v_particle_le &
 [ STEM < "hook" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_hook_v_up_rel" ],
            PHON.ONSET con ] ].

hook_up_v2 := v_particle_np_le &
 [ STEM < "hook" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_hook_v_up_rel" ],
            PHON.ONSET con ] ].

hook_up_with_v1 := v_particle_pp_le &
 [ STEM < "hook" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    --OCOMPKEY _with_p_rel,
                    KEYREL.PRED "_hook_v_up_rel" ],
            PHON.ONSET con ] ].

hook_v1 := v_np_trans_le &
 [ STEM < "hook" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hook_v_1_rel",
            PHON.ONSET con ] ].

hooklet_n1 := n_intr_le &
 [ STEM < "hooklet" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hooklet_n_1_rel",
            PHON.ONSET con ] ].

hoop_n1 := n_intr_le &
 [ STEM < "hoop" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hoop_n_1_rel",
            PHON.ONSET con ] ].

hooray_v1 := v_unerg_imp_le &
 [ STEM < "hooray" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hooray_v_1_rel",
            PHON.ONSET con ] ].

hoot_n1 := n_intr_le &
 [ STEM < "hoot" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hoot_n_1_rel",
            PHON.ONSET con ] ].

hoover_n1 := n_proper_le &
 [ STEM < "hoover" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hoover",
            PHON.ONSET con ] ].

hop_n1 := n_intr_le &
 [ STEM < "hop" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hop_n_1_rel",
            PHON.ONSET con ] ].

hop_v1 := v_np_trans_noger_le &
 [ STEM < "hop" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hop_v_1_rel",
            PHON.ONSET con ] ].

hop_v2 := v_prep_dir_le &
 [ STEM < "hop" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hop_v_1_rel",
            PHON.ONSET con ] ].

hope_for_v1 := v_empty_prep_intrans_le &
 [ STEM < "hope" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_hope_v_for_rel" ],
            PHON.ONSET con ] ].

hope_n1 := n_mass_count_le &
 [ STEM < "hope" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hope_n_1_rel",
            PHON.ONSET con ] ].

hope_v1 := v_unerg_le &
 [ STEM < "hope" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hope_v_1_rel",
            PHON.ONSET con ] ].

hope_v2 := v_subj_equi_le &
 [ STEM < "hope" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hope_v_1_rel",
            PHON.ONSET con ] ].

hope_v3 := v_cp_prop_non_trans_le &
 [ STEM < "hope" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hope_v_1_rel",
            PHON.ONSET con ] ].

hopefully_adv1 := adv_int_vp_le &
 [ STEM < "hopefully" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hopeful_a_1_rel",
            PHON.ONSET con ] ].

hopeless_isect := adj_intrans_le &
 [ STEM < "hopeless" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hopeless_a_1_rel",
            PHON.ONSET con ] ].

hopelessly := adv_int_vp_le &
 [ STEM < "hopelessly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hopeless_a_1_rel",
            PHON.ONSET con ] ].

hordaland := n_proper_le &
 [ STEM < "hordaland" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hordaland",
            PHON.ONSET con ] ].

hordaland_fylke := n_proper_le &
 [ STEM < "hordaland", "fylke" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hordaland_fylke",
            PHON.ONSET con ] ].

horde_n1 := n_ppof_le &
 [ STEM < "horde" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_horde_n_of_rel",
            PHON.ONSET con ] ].

horde_n2 := n_group_ppof_le &
 [ STEM < "horde" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_horde_n_of_rel",
            PHON.ONSET con ] ].

horizon_n1 := n_intr_le &
 [ STEM < "horizon" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_horizon_n_1_rel",
            PHON.ONSET con ] ].

horizontal_a1 := adj_intrans_le &
 [ STEM < "horizontal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_horizontal_a_1_rel",
            PHON.ONSET con ] ].

horke_n1 := n_proper_le &
 [ STEM < "horke" >,
   SYNSEM [ LKEYS.KEYREL.CARG "horke",
            PHON.ONSET con ] ].

horn_n1 := n_intr_le &
 [ STEM < "horn" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_horn_n_1_rel",
            PHON.ONSET con ] ].

hornflagan := n_proper_le &
 [ STEM < "hornflagan" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hornflagan",
            PHON.ONSET con ] ].

horoscope_n1 := n_intr_le &
 [ STEM < "horoscope" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_horoscope_n_1_rel",
            PHON.ONSET con ] ].

horrendous_a1 := adj_trans_le &
 [ STEM < "horrendous" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_horrendous_a_to_rel" ],
            PHON.ONSET con ] ].

horrendous_a2 := adj_reg_atrans_that_cp_le &
 [ STEM < "horrendous" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_horrendous_a_to_rel",
            PHON.ONSET con ] ].

horrendously_pcisect := adv_int_vp_le &
 [ STEM < "horrendously" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_horrendous_a_to_rel",
            PHON.ONSET con ] ].

horrible_a1 := adj_trans_le &
 [ STEM < "horrible" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_horrible_a_to_rel" ],
            PHON.ONSET con ] ].

horrible_a2 := adj_reg_atrans_that_cp_le &
 [ STEM < "horrible" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_horrible_a_to_rel",
            PHON.ONSET con ] ].

horribly_pcisect := adv_int_vp_le &
 [ STEM < "horribly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_horrible_a_to_rel",
            PHON.ONSET con ] ].

horrid_a1 := adj_intrans_le &
 [ STEM < "horrid" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_horrid_a_1_rel",
            PHON.ONSET con ] ].

horrified_a1 := adj_intrans_le &
 [ STEM < "horrified" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_horrified_a_1_rel",
            PHON.ONSET con ] ].

horrify_v1 := v_np_trans_le &
 [ STEM < "horrify" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_horrify_v_1_rel",
            PHON.ONSET con ] ].

horrify_v2 := v_expl_it_subj_np_cp_le &
 [ STEM < "horrify" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_horrify_v_1_rel",
            PHON.ONSET con ] ].

horror_n1 := n_intr_le &
 [ STEM < "horror" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_horror_n_1_rel",
            PHON.ONSET con ] ].

horse_drawn_a1 := adj_intrans_le &
 [ STEM < "horse", "drawn" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_horse+drawn_a_1_rel",
            PHON.ONSET con ] ].

horse_drawn_a2 := adj_intrans_le &
 [ STEM < "horse-", "drawn" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_horse+drawn_a_1_rel",
            PHON.ONSET con ] ].

horse_n1 := n_intr_le &
 [ STEM < "horse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_horse_n_1_rel",
            PHON.ONSET con ] ].

horseback_n1 := n_mass_le &
 [ STEM < "horseback" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_horseback_n_1_rel",
            PHON.ONSET con ] ].

horseplay_n1 := n_mass_le &
 [ STEM < "horseplay" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_horseplay_n_1_rel",
            PHON.ONSET con ] ].

horsepower_n1 := n_intr_le &
 [ STEM < "horsepower" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_horsepower_n_1_rel",
            PHON.ONSET con ] ].

horst_n1 := n_proper_le &
 [ STEM < "horst" >,
   SYNSEM [ LKEYS.KEYREL.CARG "horst",
            PHON.ONSET con ] ].

horticultural_a1 := adj_intrans_le &
 [ STEM < "horticultural" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_horticultural_a_1_rel",
            PHON.ONSET con ] ].

hoser_n1 := n_intr_le &
 [ STEM < "hoser" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hoser_n_1_rel",
            PHON.ONSET con ] ].

hosers_excl_post := adv_s_post_word_nospec_le &
 [ STEM < "hosers" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hosers_a_1_rel",
            PHON.ONSET con ] ].

hosers_excl_pre := adv_s_pre_word_root_le &
 [ STEM < "hosers" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hosers_a_1_rel",
            PHON.ONSET con ] ].

hosiery_n1 := n_mass_le &
 [ STEM < "hosiery" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hosiery_n_1_rel",
            PHON.ONSET con ] ].

hospitable_a1 := adj_intrans_le &
 [ STEM < "hospitable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hospitable_a_1_rel",
            PHON.ONSET con ] ].

hospital_n1 := n_intr_le &
 [ STEM < "hospital" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hospital_n_1_rel",
            PHON.ONSET con ] ].

hospital_post_ttl := n_post_title_le &
 [ STEM < "hospital" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hospital_n_1_rel",
            PHON.ONSET con ] ].

hospitality_n := n_intr_le &
 [ STEM < "hospitality" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hospitality_n_1_rel",
            PHON.ONSET con ] ].

hospitz-am-bahnhof_n1 := n_proper_le &
 [ STEM < "hospitz", "am", "bahnhof" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hospitz-am-bahnhof",
            PHON.ONSET con ] ].

host_n1 := n_intr_le &
 [ STEM < "host" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_host_n_of-to_rel",
            PHON.ONSET con ] ].

host_n2 := n_mass_ppcomp_oblig_le &
 [ STEM < "host" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_host_n_of-to_rel" ],
            PHON.ONSET con ] ].

host_n3 := n_group_ppof_le &
 [ STEM < "host" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_host_n_of-to_rel",
            PHON.ONSET con ] ].

host_v1 := v_np*_trans_le &
 [ STEM < "host" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_host_v_1_rel",
            PHON.ONSET con ] ].

hostel_n1 := n_intr_le &
 [ STEM < "hostel" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hostel_n_1_rel",
            PHON.ONSET con ] ].

hostel_post_ttl := n_post_title_le &
 [ STEM < "hostel" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hostel_n_1_rel",
            PHON.ONSET con ] ].

hostility_n1 := n_mass_count_le &
 [ STEM < "hostility" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hostility_n_1_rel",
            PHON.ONSET con ] ].

hot_a1 := adj_intrans_le &
 [ STEM < "hot" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hot_a_1_rel",
            PHON.ONSET con ] ].

hot_a2 := adj_atrans_le &
 [ STEM < "hot" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hot_a_1_rel",
            PHON.ONSET con ] ].

hot_line_n1 := n_intr_le &
 [ STEM < "hotline" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hotline_n_1_rel",
            PHON.ONSET con ] ].

hot_line_n2 := n_intr_le &
 [ STEM < "hot", "line" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hotline_n_1_rel",
            PHON.ONSET con ] ].

hot_line_n3 := n_intr_le &
 [ STEM < "hot-", "line" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hotline_n_1_rel",
            PHON.ONSET con ] ].

hotel_n1 := n_intr_le &
 [ STEM < "hotel" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hotel_n_1_rel",
            PHON.ONSET con ] ].

hotel_n2 := n_npcomp_le &
 [ STEM < "hotel" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hotel_n_1_rel",
            PHON.ONSET con ] ].

hotel_post_ttl := n_post_title_le &
 [ STEM < "hotel" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hotel_n_1_rel",
            PHON.ONSET con ] ].

hotell_post_ttl := n_post_title_le &
 [ STEM < "hotell" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hotel_n_1_rel",
            PHON.ONSET con ] ].

hotter_a1 := adj_comp_le &
 [ STEM < "hotter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hot_a_1_rel",
            PHON.ONSET con ] ].

hotter_a2 := adj_atrans_comp_le &
 [ STEM < "hotter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hot_a_1_rel",
            PHON.ONSET con ] ].

hottest_a1 := adj_superl_le &
 [ STEM < "hottest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hot_a_1_rel",
            PHON.ONSET con ] ].

hottest_a2 := adj_atrans_superl_le &
 [ STEM < "hottest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hot_a_1_rel",
            PHON.ONSET con ] ].

houlihan_n1 := n_proper_le &
 [ STEM < "houlihan" >,
   SYNSEM [ LKEYS.KEYREL.CARG "houlihan",
            PHON.ONSET con ] ].

hound_n1 := n_intr_le &
 [ STEM < "hound" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hound_n_1_rel",
            PHON.ONSET con ] ].

hound_of_the_baskervilles := n_proper_le &
 [ STEM < "hound", "of", "the", "baskervilles" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hound_of_the_baskervilles",
            PHON.ONSET con ] ].

hour-long_a1 := adj_attr_intrans_le &
 [ STEM < "hour", "long" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hour+long_a_1_rel",
            PHON.ONSET voc ] ].

hour-long_a2 := adj_attr_intrans_le &
 [ STEM < "hour-", "long" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hour+long_a_1_rel",
            PHON.ONSET voc ] ].

hour_n1 := n_temp_hour_le &
 [ STEM < "hour" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hour_n_1_rel",
            PHON.ONSET voc ] ].

hour_n2 := n_temp_hour_le &
 [ STEM < "hr" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hour_n_1_rel",
            PHON.ONSET voc ] ].

hour_n3 := n_temp_hour_le &
 [ STEM < "hr." >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hour_n_1_rel",
            PHON.ONSET voc ] ].

hour_n4 := n_temp_hour_plur_le &
 [ STEM < "hrs." >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hour_n_1_rel",
            PHON.ONSET voc ] ].

hourly_a1 := adj_intrans_le &
 [ STEM < "hourly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hourly_a_1_rel",
            PHON.ONSET voc ] ].

hourly_adv1 := adv_int_vp_post_le &
 [ STEM < "hourly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hourly_a_1_rel",
            PHON.ONSET voc ] ].

hours_long_a1 := adj_intrans_le &
 [ STEM < "hours", "long" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hour+long_a_1_rel",
            PHON.ONSET voc ] ].

hours_long_a2 := adj_intrans_le &
 [ STEM < "hours-", "long" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hour+long_a_1_rel",
            PHON.ONSET voc ] ].

house_n1 := n_intr_le &
 [ STEM < "house" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_house_n_1_rel",
            PHON.ONSET con ] ].

house_post_ttl := n_post_title_le &
 [ STEM < "house" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_house_n_1_rel",
            PHON.ONSET con ] ].

house_v1 := v_np_trans_le &
 [ STEM < "house" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_house_v_1_rel",
            PHON.ONSET con ] ].

household_n1 := n_intr_le &
 [ STEM < "household" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_household_n_1_rel",
            PHON.ONSET con ] ].

housing_n1 := n_mass_le &
 [ STEM < "housing" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_housing_n_1_rel",
            PHON.ONSET con ] ].

hovdungo := n_proper_le &
 [ STEM < "hovdungo" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hovdungo",
            PHON.ONSET con ] ].

hover_v1 := v_unerg_le &
 [ STEM < "hover" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hover_v_1_rel",
            PHON.ONSET con ] ].

how_about := comp_how_about_n_or_p_le &
 [ STEM < "how", "about" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_how+about_x_rel",
            PHON.ONSET con ] ].

how_about_s := comp_how_about_s_le &
 [ STEM < "how", "about" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_how+about_x_rel",
            PHON.ONSET con ] ].

how_about_vp := comp_how_about_vp_le &
 [ STEM < "how", "about" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_how+about_x_rel",
            PHON.ONSET con ] ].

how_about_vp_2 := comp_why_nocomp_le &
 [ STEM < "how", "about" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_how+about_x_rel",
            PHON.ONSET con ] ].

how_adj := adj_wh_le &
 [ STEM < "how" >,
   SYNSEM.PHON.ONSET con ].

how_adv := pp_wh_le &
 [ STEM < "how" >,
   SYNSEM [ LKEYS [ ALTKEYREL.PRED manner_rel,
                    KEYREL.PRED unspec_manner_rel ],
            PHON.ONSET con ] ].

how_bout := comp_how_about_n_or_p_le &
 [ STEM < "how", "'bout" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_how+about_x_rel",
            PHON.ONSET con ] ].

how_bout_s := comp_how_about_s_le &
 [ STEM < "how", "'bout" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_how+about_x_rel",
            PHON.ONSET con ] ].

how_bout_vp := comp_how_about_vp_le &
 [ STEM < "how", "'bout" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_how+about_x_rel",
            PHON.ONSET con ] ].

how_come_c1 := how_compl_mc_le &
 [ STEM < "how", "come" >,
   SYNSEM [ LKEYS [ ALTKEYREL.PRED reason_rel,
                    KEYREL.PRED _for_p_rel ],
            PHON.ONSET con ] ].

how_cp := s_compl_wh_phrase_le &
 [ STEM < "how" >,
   SYNSEM [ LKEYS [ ALTKEYREL.PRED manner_rel,
                    KEYREL.PRED unspec_manner_rel ],
            PHON.ONSET con ] ].

how_deg := adv_wh_degree_spec_le &
 [ STEM < "how" >,
   SYNSEM.PHON.ONSET con ].

how_freerel_np := n_freerel_pro_adv_le &
 [ STEM < "how" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED unspec_manner_rel,
                    KEYREL.PRED manner_rel ],
            PHON.ONSET con ] ].

how_long := comp_how_about_pp_le &
 [ STEM < "how", "long" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_how+long_x_rel",
            PHON.ONSET con ] ].

how_many := det_part_pl_wh_le &
 [ STEM < "how", "many" >,
   SYNSEM [ LKEYS.ALTKEYREL.PRED number_rel,
            PHON.ONSET con ] ].

how_much := det_part_ms_wh_le &
 [ STEM < "how", "much" >,
   SYNSEM [ LKEYS.ALTKEYREL.PRED quantity_rel,
            PHON.ONSET con ] ].

how_much_deg := adv_wh_degree_spec_m_le &
 [ STEM < "how", "much" >,
   SYNSEM.PHON.ONSET con ].

how_you_doing_root_post := adv_disc_posth_grt_le &
 [ STEM < "how", "you", "doing" >,
   SYNSEM [ LKEYS.KEYREL.CARG "how_you_doing",
            PHON.ONSET con ] ].

how_you_doing_root_pre := adv_disc_preh_grt_le &
 [ STEM < "how", "you", "doing" >,
   SYNSEM [ LKEYS.KEYREL.CARG "how_you_doing",
            PHON.ONSET con ] ].

howdy_doody_n1 := n_proper_le &
 [ STEM < "howdy", "doody" >,
   SYNSEM [ LKEYS.KEYREL.CARG "howdy_doody",
            PHON.ONSET con ] ].

howdy_root_post := adv_disc_posth_grt_le &
 [ STEM < "howdy" >,
   SYNSEM [ LKEYS.KEYREL.CARG "howdy",
            PHON.ONSET con ] ].

howdy_root_pre := adv_disc_preh_grt_le &
 [ STEM < "howdy" >,
   SYNSEM [ LKEYS.KEYREL.CARG "howdy",
            PHON.ONSET con ] ].

however2 := adv_disc_like_preh_le &
 [ STEM < "however" >,
   SYNSEM [ LKEYS.KEYREL.CARG "however",
            PHON.ONSET con ] ].

however_3 := adv_disc_like_posth_le &
 [ STEM < "however" >,
   SYNSEM [ LKEYS.KEYREL.CARG "however",
            PHON.ONSET con ] ].

however_freerel_np := n_freerel_pro_adv_le &
 [ STEM < "however" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED unspec_manner_rel,
                    KEYREL.PRED manner_rel ],
            PHON.ONSET con ] ].

howl_n1 := n_intr_le &
 [ STEM < "howl" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_howl_n_1_rel",
            PHON.ONSET con ] ].

howl_v1 := v_empty_prep_intrans_le &
 [ STEM < "howl" >,
   SYNSEM [ LKEYS [ --COMPKEY _at_p_sel_rel,
                    KEYREL.PRED "_howl_v_at_rel" ],
            PHON.ONSET con ] ].

howl_v2 := v_np*_trans_le &
 [ STEM < "howl" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_howl_v_1_rel",
            PHON.ONSET con ] ].

hp_n1 := n_proper_le &
 [ STEM < "hp" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hp",
            PHON.ONSET voc ] ].

hsn_n1 := n_proper_le &
 [ STEM < "hsn" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hsn",
            PHON.ONSET con ] ].

htk_n1 := n_proper_le &
 [ STEM < "htk" >,
   SYNSEM [ LKEYS.KEYREL.CARG "htk",
            PHON.ONSET con ] ].

htk_n2 := n_proper_le &
 [ STEM < "h.t.k." >,
   SYNSEM [ LKEYS.KEYREL.CARG "htk",
            PHON.ONSET con ] ].

hu_n1 := n_proper_le &
 [ STEM < "hu" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hu",
            PHON.ONSET con ] ].

huaan_n1 := n_proper_le &
 [ STEM < "huaan" >,
   SYNSEM [ LKEYS.KEYREL.CARG "huaan",
            PHON.ONSET con ] ].

huaanhequn_n1 := n_proper_le &
 [ STEM < "huaanhequn" >,
   SYNSEM [ LKEYS.KEYREL.CARG "huaanhequn",
            PHON.ONSET con ] ].

huaien_n1 := n_proper_le &
 [ STEM < "huaien" >,
   SYNSEM [ LKEYS.KEYREL.CARG "huaien",
            PHON.ONSET con ] ].

huaihai_n1 := n_proper_le &
 [ STEM < "huaihai" >,
   SYNSEM [ LKEYS.KEYREL.CARG "huaihai",
            PHON.ONSET con ] ].

huaihai_zhong_n1 := n_proper_le &
 [ STEM < "huaihai", "zhong" >,
   SYNSEM [ LKEYS.KEYREL.CARG "huaihai_zhong",
            PHON.ONSET con ] ].

huaishitang_n1 := n_proper_le &
 [ STEM < "huaishitang" >,
   SYNSEM [ LKEYS.KEYREL.CARG "huaishitang",
            PHON.ONSET con ] ].

hualian_n1 := n_proper_le &
 [ STEM < "hualian" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hualian",
            PHON.ONSET con ] ].

huang_chujiu_n1 := n_proper_le &
 [ STEM < "huang", "chujiu" >,
   SYNSEM [ LKEYS.KEYREL.CARG "huang_chujiu",
            PHON.ONSET con ] ].

huang_jinrong_n1 := n_proper_le &
 [ STEM < "huang", "jinrong" >,
   SYNSEM [ LKEYS.KEYREL.CARG "huang_jinrong",
            PHON.ONSET con ] ].

huangpi_n1 := n_proper_le &
 [ STEM < "huangpi" >,
   SYNSEM [ LKEYS.KEYREL.CARG "huangpi",
            PHON.ONSET con ] ].

huangpu_n1 := n_proper_le &
 [ STEM < "huangpu" >,
   SYNSEM [ LKEYS.KEYREL.CARG "huangpu",
            PHON.ONSET con ] ].

huangshan_n1 := n_proper_le &
 [ STEM < "huangshan" >,
   SYNSEM [ LKEYS.KEYREL.CARG "huangshan",
            PHON.ONSET con ] ].

huaqiao_n1 := n_proper_le &
 [ STEM < "huaqiao" >,
   SYNSEM [ LKEYS.KEYREL.CARG "huaqiao",
            PHON.ONSET con ] ].

huashan_n1 := n_proper_le &
 [ STEM < "huashan" >,
   SYNSEM [ LKEYS.KEYREL.CARG "huashan",
            PHON.ONSET con ] ].

huaxia_n1 := n_proper_le &
 [ STEM < "huaxia" >,
   SYNSEM [ LKEYS.KEYREL.CARG "huaxia",
            PHON.ONSET con ] ].

hub_n1 := n_intr_le &
 [ STEM < "hub" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hub_n_1_rel",
            PHON.ONSET con ] ].

huckleberry_n1 := n_proper_le &
 [ STEM < "huckleberry" >,
   SYNSEM [ LKEYS.KEYREL.CARG "huckleberry",
            PHON.ONSET con ] ].

huckleberry_n2 := n_intr_le &
 [ STEM < "huckleberry" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_huckleberry_n_1_rel",
            PHON.ONSET con ] ].

huddle_n1 := n_intr_le &
 [ STEM < "huddle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_huddle_n_1_rel",
            PHON.ONSET con ] ].

huddle_v1 := v_unerg_le &
 [ STEM < "huddle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_huddle_v_1_rel",
            PHON.ONSET con ] ].

hudson_n1 := n_proper_le &
 [ STEM < "hudson" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hudson",
            PHON.ONSET con ] ].

hue_n1 := n_intr_le &
 [ STEM < "hue" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hue_n_1_rel",
            PHON.ONSET con ] ].

huelzer_nd := n_proper_le &
 [ STEM < "huelzer" >,
   SYNSEM [ LKEYS.KEYREL.CARG "huelzer",
            PHON.ONSET con ] ].

hug_n1 := n_intr_le &
 [ STEM < "hug" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hug_n_1_rel",
            PHON.ONSET con ] ].

hug_v1 := v_np*_trans_le &
 [ STEM < "hug" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hug_v_1_rel",
            PHON.ONSET con ] ].

huge_isect := adj_intrans_le &
 [ STEM < "huge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_huge_a_1_rel",
            PHON.ONSET con ] ].

hughes_n1 := n_proper_le &
 [ STEM < "hughes" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hughes",
            PHON.ONSET con ] ].

hugo_n1 := n_proper_le &
 [ STEM < "hugo" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hugo",
            PHON.ONSET con ] ].

huh_excl_post := adv_s_post_word_nospec_le &
 [ STEM < "huh" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_huh_a_1_rel",
            PHON.ONSET con ] ].

huh_excl_pre := adv_s_pre_word_root_le &
 [ STEM < "huh" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_huh_a_1_rel",
            PHON.ONSET con ] ].

huigen_n1 := n_proper_le &
 [ STEM < "huigen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "huigen",
            PHON.ONSET con ] ].

huili_n1 := n_proper_le &
 [ STEM < "huili" >,
   SYNSEM [ LKEYS.KEYREL.CARG "huili",
            PHON.ONSET con ] ].

huimin_n1 := n_proper_le &
 [ STEM < "huimin" >,
   SYNSEM [ LKEYS.KEYREL.CARG "huimin",
            PHON.ONSET con ] ].

huldrestien_n1 := n_proper_le &
 [ STEM < "huldrestien" >,
   SYNSEM [ LKEYS.KEYREL.CARG "huldrestien",
            PHON.ONSET con ] ].

huldrestigen_n1 := n_proper_le &
 [ STEM < "huldrestigen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "huldrestigen",
            PHON.ONSET con ] ].

hulk_n1 := n_intr_le &
 [ STEM < "hulk" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hulk_n_1_rel",
            PHON.ONSET con ] ].

hull_n1 := n_intr_le &
 [ STEM < "hull" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hull_n_1_rel",
            PHON.ONSET con ] ].

hull_v1 := v_np_trans_le &
 [ STEM < "hull" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hull_v_1_rel",
            PHON.ONSET con ] ].

human_a1 := adj_intrans_le &
 [ STEM < "human" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_human_a_1_rel",
            PHON.ONSET con ] ].

human_n1 := n_intr_le &
 [ STEM < "human", "being" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_human+being_n_1_rel",
            PHON.ONSET con ] ].

human_n2 := n_no_cmpnd_le &
 [ STEM < "human" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_human_n_1_rel",
            PHON.ONSET con ] ].

humane_a1 := adj_intrans_le &
 [ STEM < "humane" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_humane_a_1_rel",
            PHON.ONSET con ] ].

humanistic_a1 := adj_intrans_le &
 [ STEM < "humanistic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_humanistic_a_1_rel",
            PHON.ONSET con ] ].

humanitarian_a1 := adj_intrans_le &
 [ STEM < "humanitarian" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_humanitarian_a_1_rel",
            PHON.ONSET con ] ].

humanity_n1 := n_mass_le &
 [ STEM < "humanity" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_humanity_n_1_rel",
            PHON.ONSET con ] ].

humankind_n1 := n_mass_le &
 [ STEM < "humankind" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_humankind_n_1_rel",
            PHON.ONSET con ] ].

humble_a1 := adj_intrans_le &
 [ STEM < "humble" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_humble_a_1_rel",
            PHON.ONSET con ] ].

humble_v1 := v_np_trans_le &
 [ STEM < "humble" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_humble_v_1_rel",
            PHON.ONSET con ] ].

humdrum_a1 := adj_intrans_le &
 [ STEM < "humdrum" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_humdrum_a_1_rel",
            PHON.ONSET con ] ].

humid_isect := adj_intrans_le &
 [ STEM < "humid" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_humid_a_1_rel",
            PHON.ONSET con ] ].

humiliate_v1 := v_np_trans_le &
 [ STEM < "humiliate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_humiliate_v_1_rel",
            PHON.ONSET con ] ].

humiliate_v2 := v_expl_it_subj_np_cp_le &
 [ STEM < "humiliate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_humiliate_v_1_rel",
            PHON.ONSET con ] ].

humiliation_n1 := n_mass_count_le &
 [ STEM < "humiliation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_humiliation_n_1_rel",
            PHON.ONSET con ] ].

humility_n1 := n_mass_le &
 [ STEM < "humility" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_humility_n_1_rel",
            PHON.ONSET con ] ].

hummel_n1 := n_proper_le &
 [ STEM < "hummel" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hummel",
            PHON.ONSET con ] ].

humor_v1 := v_np_trans_le &
 [ STEM < "humor" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_humor_v_1_rel",
            PHON.ONSET con ] ].

humorous_a1 := adj_intrans_le &
 [ STEM < "humorous" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_humorous_a_1_rel",
            PHON.ONSET con ] ].

hump_n1 := n_intr_le &
 [ STEM < "hump" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hump_n_1_rel",
            PHON.ONSET con ] ].

hunch_n1 := n_intr_le &
 [ STEM < "hunch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hunch_n_1_rel",
            PHON.ONSET con ] ].

hunch_up_v1 := v_particle_np_le &
 [ STEM < "hunch" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_hunch_v_up_rel" ],
            PHON.ONSET con ] ].

hunch_v1 := v_np_trans_le &
 [ STEM < "hunch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hunch_v_1_rel",
            PHON.ONSET con ] ].

hundred := adj_bare_specified_card_hundred_le &
 [ STEM < "hundred" >,
   SYNSEM [ LKEYS.KEYREL.CARG "100",
            PHON.ONSET con ] ].

hundred_comps := adj_complemented_specified_card_hundred_le &
 [ STEM < "hundred" >,
   SYNSEM [ LKEYS.KEYREL.CARG "100",
            PHON.ONSET con ] ].

hundreds_n1 := n_plur_xmod_le &
 [ STEM < "hundreds" >,
   SYNSEM [ LKEYS.KEYREL.CARG "100",
            PHON.ONSET con ] ].

hundreds_n2 := n_plur_ppcomp_card_le &
 [ STEM < "hundreds" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.CARG "100" ],
            PHON.ONSET con ] ].

hundredth := adj_bare_specified_ord_hundred_le &
 [ STEM < "hundredth" >,
   SYNSEM [ LKEYS.KEYREL.CARG "100",
            PHON.ONSET con ] ].

hungary_n1 := n_proper_le &
 [ STEM < "hungary" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hungary",
            PHON.ONSET con ] ].

hunger_n1 := n_intr_le &
 [ STEM < "hunger" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hunger_n_1_rel",
            PHON.ONSET con ] ].

hunger_v1 := v_empty_prep_intrans_le &
 [ STEM < "hunger" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_hunger_v_for_rel" ],
            PHON.ONSET con ] ].

hungrily_isect := adv_int_vp_le &
 [ STEM < "hungrily" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hungry_a_1_rel",
            PHON.ONSET con ] ].

hungry_a1 := adj_intrans_le &
 [ STEM < "hungry" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hungry_a_1_rel",
            PHON.ONSET con ] ].

hunt_down_v1 := v_particle_np_le &
 [ STEM < "hunt" >,
   SYNSEM [ LKEYS [ --COMPKEY _down_p_sel_rel,
                    KEYREL.PRED "_hunt_v_down_rel" ],
            PHON.ONSET con ] ].

hunt_n1 := n_intr_le &
 [ STEM < "hunt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hunt_n_1_rel",
            PHON.ONSET con ] ].

hunt_out_v1 := v_particle_np_le &
 [ STEM < "hunt" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_hunt_v_out_rel" ],
            PHON.ONSET con ] ].

hunt_up_v1 := v_particle_np_le &
 [ STEM < "hunt" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_hunt_v_up_rel" ],
            PHON.ONSET con ] ].

hunt_v1 := v_np*_trans_le &
 [ STEM < "hunt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hunt_v_1_rel",
            PHON.ONSET con ] ].

hunter_n1 := n_intr_le &
 [ STEM < "hunter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hunter_n_1_rel",
            PHON.ONSET con ] ].

hunters_a1 := adj_compound_le &
 [ STEM < "hunter", "'s" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hunter_n_1_rel",
            PHON.ONSET con ] ].

huo_guang_n1 := n_proper_le &
 [ STEM < "huo", "guang" >,
   SYNSEM [ LKEYS.KEYREL.CARG "huo_guang",
            PHON.ONSET con ] ].

hurl_v1 := v_np*_trans_le &
 [ STEM < "hurl" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hurl_v_1_rel",
            PHON.ONSET con ] ].

hurl_v2 := v_np_prep_trans_dors_le &
 [ STEM < "hurl" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hurl_v_1_rel",
            PHON.ONSET con ] ].

hurricane_n1 := n_intr_le &
 [ STEM < "hurricane" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hurricane_n_1_rel",
            PHON.ONSET con ] ].

hurricane_ttl_1 := n_title_le &
 [ STEM < "hurricane" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hurricane_n_1_rel",
            PHON.ONSET con ] ].

hurriedly_isect := adv_int_vp_le &
 [ STEM < "hurriedly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hurried_a_1_rel",
            PHON.ONSET con ] ].

hurrungane_n1 := n_proper_le &
 [ STEM < "hurrungane" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hurrungane",
            PHON.ONSET con ] ].

hurry_n1 := n_intr_le &
 [ STEM < "hurry" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hurry_n_1_rel",
            PHON.ONSET con ] ].

hurry_up_v1 := v_particle_le &
 [ STEM < "hurry" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_hurry_v_up_rel" ],
            PHON.ONSET con ] ].

hurry_up_v2 := v_particle_np_le &
 [ STEM < "hurry" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_hurry_v_up_rel" ],
            PHON.ONSET con ] ].

hurry_v1 := v_np*_trans_le &
 [ STEM < "hurry" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hurry_v_1_rel",
            PHON.ONSET con ] ].

hurry_v2 := v_subj_equi_le &
 [ STEM < "hurry" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hurry_v_1_rel",
            PHON.ONSET con ] ].

hurt_n1 := n_mass_count_le &
 [ STEM < "hurt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hurt_n_1_rel",
            PHON.ONSET con ] ].

hurt_v1 := v_np*_trans_le &
 [ STEM < "hurt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hurt_v_1_rel",
            PHON.ONSET con ] ].

hurt_v2 := v_expl_it_subj_np_cp_le &
 [ STEM < "hurt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hurt_v_1_rel",
            PHON.ONSET con ] ].

hurt_v3 := v_expl_it_subj_vp_le &
 [ STEM < "hurt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hurt_v_1_rel",
            PHON.ONSET con ] ].

hurtigruta_n1 := n_proper_le &
 [ STEM < "hurtigruta" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hurtigruta",
            PHON.ONSET con ] ].

hurtigrute_n1 := n_proper_le &
 [ STEM < "hurtigrute" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hurtigrute",
            PHON.ONSET con ] ].

husband_n1 := n_intr_le &
 [ STEM < "husband" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_husband_n_1_rel",
            PHON.ONSET con ] ].

husbandry_n1 := n_mass_le &
 [ STEM < "husbandry" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_husbandry_n_1_rel",
            PHON.ONSET con ] ].

huseby_n1 := n_proper_le &
 [ STEM < "huseby" >,
   SYNSEM [ LKEYS.KEYREL.CARG "huseby",
            PHON.ONSET con ] ].

hushi_n1 := n_proper_le &
 [ STEM < "hushi" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hushi",
            PHON.ONSET con ] ].

hustle_n1 := n_mass_le &
 [ STEM < "hustle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hustle_n_1_rel",
            PHON.ONSET con ] ].

hustle_v1 := v_prep_dir_le &
 [ STEM < "hustle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hustle_v_1_rel",
            PHON.ONSET con ] ].

hustle_v2 := v_np_prep_trans_dors_le &
 [ STEM < "hustle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hustle_v_1_rel",
            PHON.ONSET con ] ].

hustle_v3 := v_np_trans_noger_le &
 [ STEM < "hustle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hustle_v_1_rel",
            PHON.ONSET con ] ].

husum := n_proper_le &
 [ STEM < "husum" >,
   SYNSEM [ LKEYS.KEYREL.CARG "husum",
            PHON.ONSET con ] ].

hut_n1 := n_intr_le &
 [ STEM < "hut" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hut_n_1_rel",
            PHON.ONSET con ] ].

hut_post_ttl := n_post_title_le &
 [ STEM < "hut" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hut_n_1_rel",
            PHON.ONSET con ] ].

hut_to_hut_a1 := adj_intrans_le &
 [ STEM < "hut", "to", "hut" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hut+to+hut_a_1_rel",
            PHON.ONSET con ] ].

hut_to_hut_a2 := adj_intrans_le &
 [ STEM < "hut-", "to-", "hut" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hut+to+hut_a_1_rel",
            PHON.ONSET con ] ].

hutch_n1 := n_intr_le &
 [ STEM < "hutch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hutch_n_1_rel",
            PHON.ONSET con ] ].

hutkeeper_n1 := n_intr_le &
 [ STEM < "hutkeeper" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hutkeeper_n_1_rel",
            PHON.ONSET con ] ].

hutmaster_n1 := n_intr_le &
 [ STEM < "hutmaster" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hutmaster_n_1_rel",
            PHON.ONSET con ] ].

hutsell := n_proper_le &
 [ STEM < "hutsell" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hutsell",
            PHON.ONSET con ] ].

huxley_n1 := n_proper_le &
 [ STEM < "huxley" >,
   SYNSEM [ LKEYS.KEYREL.CARG "huxley",
            PHON.ONSET con ] ].

hydracid_n1 := n_intr_le &
 [ STEM < "hydracid" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hydracid_n_1_rel",
            PHON.ONSET con ] ].

hydraulic_a1 := adj_intrans_le &
 [ STEM < "hydraulic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hydraulic_a_1_rel",
            PHON.ONSET con ] ].

hydraulics_n1 := n_plur_nocmpnd_le &
 [ STEM < "hydraulic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hydraulics_n_1_rel",
            PHON.ONSET con ] ].

hydride_n1 := n_mass_count_le &
 [ STEM < "hydride" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hydride_n_1_rel",
            PHON.ONSET con ] ].

hydro_a1 := adj_intrans_le &
 [ STEM < "hydro" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hydro_a_1_rel",
            PHON.ONSET con ] ].

hydro_electricity_n1 := n_mass_le &
 [ STEM < "hydro-", "electricity" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hydro-electricity_n_1_rel",
            PHON.ONSET con ] ].

hydrobiology_n1 := n_mass_le &
 [ STEM < "hydrobiology" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hydrobiology_n_1_rel",
            PHON.ONSET con ] ].

hydroelectric_a1 := adj_intrans_le &
 [ STEM < "hydroelectric" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hydroelectric_a_1_rel",
            PHON.ONSET con ] ].

hydrogen_n1 := n_mass_le &
 [ STEM < "hydrogen" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hydrogen_n_1_rel",
            PHON.ONSET con ] ].

hydrophobic_a1 := adj_intrans_le &
 [ STEM < "hydrophobic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hydrophobic_a_1_rel",
            PHON.ONSET con ] ].

hydrous_a1 := adj_intrans_le &
 [ STEM < "hydrous" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hydrous_a_1_rel",
            PHON.ONSET con ] ].

hydroxide_n1 := n_mass_le &
 [ STEM < "hydroxide" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hydroxide_n_1_rel",
            PHON.ONSET con ] ].

hydrozoa := n_proper_le &
 [ STEM < "hydrozoa" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hydrozoa",
            PHON.ONSET con ] ].

hyena_n1 := n_intr_le &
 [ STEM < "hyena" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hyena_n_1_rel",
            PHON.ONSET con ] ].

hymn_n1 := n_intr_le &
 [ STEM < "hymn" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hymn_n_1_rel",
            PHON.ONSET con ] ].

hyperbola_n1 := n_intr_le &
 [ STEM < "hyperbola" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hyperbola_n_1_rel",
            PHON.ONSET con ] ].

hypertension_n1 := n_mass_le &
 [ STEM < "hypertension" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hypertension_n_1_rel",
            PHON.ONSET con ] ].

hyphen_n1 := n_intr_le &
 [ STEM < "hyphen" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hyphen_n_1_rel",
            PHON.ONSET con ] ].

hyphen_punct_right := punct_hyphen_right_le &
 [ STEM < "-" >,
   SYNSEM.PHON.ONSET onset ].

hyphenated_a1 := adj_intrans_le &
 [ STEM < "hyphenated" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hyphenated_a_1_rel",
            PHON.ONSET con ] ].

hypoallergenic_a1 := adj_intrans_le &
 [ STEM < "hypoallergenic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hypoallergenic_a_1_rel",
            PHON.ONSET con ] ].

hypostasis_n1 := n_mass_count_le &
 [ STEM < "hypostasis" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hypostasis_n_1_rel",
            PHON.ONSET con ] ].

hypothesis_n1 := n_intr_le &
 [ STEM < "hypothesis" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hypothesis_n_1_rel",
            PHON.ONSET onset ] ].

hypothetical_a1 := adj_intrans_le &
 [ STEM < "hypothetical" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hypothetical_a_1_rel",
            PHON.ONSET con ] ].

hyttegrend_n1 := n_proper_le &
 [ STEM < "hyttegrend" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hyttegrend",
            PHON.ONSET con ] ].

hytter_n1 := n_proper_le &
 [ STEM < "hytter" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hytter",
            PHON.ONSET con ] ].

hytter_n2 := n_proper_le &
 [ STEM < "<hytter>" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hytter",
            PHON.ONSET con ] ].

hÃ¥kon_n1 := n_proper_le &
 [ STEM < "hÃ¥kon" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hÃ¥kon",
            PHON.ONSET con ] ].

hÃ¸gbrothÃ¸gda_n1 := n_proper_le &
 [ STEM < "hÃ¸gbrothÃ¸gda" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hÃ¸gbrothÃ¸gda",
            PHON.ONSET con ] ].

hÃ¸ge := n_proper_le &
 [ STEM < "hÃ¸ge" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hÃ¸ge",
            PHON.ONSET con ] ].

hÃ¸gebrotet_n1 := n_proper_le &
 [ STEM < "hÃ¸gebrotet" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hÃ¸gebrotet",
            PHON.ONSET con ] ].

hÃ¸gevagltindar_n1 := n_proper_le &
 [ STEM < "hÃ¸gevagltindar" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hÃ¸gevagltindar",
            PHON.ONSET con ] ].

hÃ¸gvagl_n1 := n_proper_le &
 [ STEM < "hÃ¸gvagl" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hÃ¸gvagl",
            PHON.ONSET con ] ].

hÃ¸gvaglen_n1 := n_proper_le &
 [ STEM < "hÃ¸gvaglen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hÃ¸gvaglen",
            PHON.ONSET con ] ].

hÃ¸gvagltindane_n1 := n_proper_pl_le &
 [ STEM < "hÃ¸gvagltindane" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hÃ¸gvagltindane",
            PHON.ONSET con ] ].

hÃ¸gvagltjÃ¸nn_n1 := n_proper_le &
 [ STEM < "hÃ¸gvagltjÃ¸nn" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hÃ¸gvagltjÃ¸nn",
            PHON.ONSET con ] ].

hÃ¸gvagltjÃ¸rn_n1 := n_proper_le &
 [ STEM < "hÃ¸gvagltjÃ¸rn" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hÃ¸gvagltjÃ¸rn",
            PHON.ONSET con ] ].

hÃ¸gvagltjÃ¸rnene_n1 := n_proper_le &
 [ STEM < "hÃ¸gvagltjÃ¸rnene" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hÃ¸gvagltjÃ¸rnene",
            PHON.ONSET con ] ].

hÃ¸yfjellshotel_n1 := n_proper_le &
 [ STEM < "hÃ¸yfjellshotel" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hÃ¸yfjellshotel",
            PHON.ONSET con ] ].

hÃ¸yfjellshotell_n1 := n_proper_le &
 [ STEM < "hÃ¸yfjellshotell" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hÃ¸yfjellshotell",
            PHON.ONSET con ] ].

hÃ¸yfjellsstuer_n1 := n_proper_le &
 [ STEM < "hÃ¸yfjellsstuer" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hÃ¸yfjellsstuer",
            PHON.ONSET con ] ].

hÃ¸yfjellstuer_n1 := n_proper_le &
 [ STEM < "hÃ¸yfjellstuer" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hÃ¸yfjellstuer",
            PHON.ONSET con ] ].

hÃ¸ystakka_n1 := n_proper_le &
 [ STEM < "hÃ¸ystakka" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hÃ¸ystakka",
            PHON.ONSET con ] ].

hÃ¸ystakktjerne_n1 := n_proper_le &
 [ STEM < "hÃ¸ystakktjerne" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hÃ¸ystakktjerne",
            PHON.ONSET con ] ].

hÃ¸ystakktjernet_n1 := n_proper_le &
 [ STEM < "hÃ¸ystakktjernet" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hÃ¸ystakktjernet",
            PHON.ONSET con ] ].

hÃ¸ystakktjÃ¸rnet_n1 := n_proper_le &
 [ STEM < "hÃ¸ystakktjÃ¸rnet" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hÃ¸ystakktjÃ¸rnet",
            PHON.ONSET con ] ].

i := n_pers_pro_i_le &
 [ STEM < "i" >,
   SYNSEM.PHON.ONSET voc ].

i_2 := n_pers_pro_i_le &
 [ STEM < "_i" >,
   SYNSEM.PHON.ONSET voc ].

i_dunno_s_adv1 := adv_disc_like_preh_le &
 [ STEM < "i", "dunno" >,
   SYNSEM [ LKEYS.KEYREL.CARG "i+dunno",
            PHON.ONSET voc ] ].

i_dunno_s_adv2 := adv_disc_like_preh_le &
 [ STEM < "_I", "dunno" >,
   SYNSEM [ LKEYS.KEYREL.CARG "i+dunno",
            PHON.ONSET voc ] ].

i_e_root_post_1 := adv_s_post_word_nospec_le &
 [ STEM < "i.e" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_i+e_a_1_rel",
            PHON.ONSET voc ] ].

i_e_root_post_5 := adv_s_post_word_nospec_le &
 [ STEM < "i.e." >,
   SYNSEM [ LKEYS.KEYREL.PRED "_i+e_a_1_rel",
            PHON.ONSET voc ] ].

i_e_root_pre_1 := adv_s_pre_word_root_le &
 [ STEM < "i.e" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_i+e_a_1_rel",
            PHON.ONSET voc ] ].

i_e_root_pre_5 := adv_s_pre_word_root_le &
 [ STEM < "i.e." >,
   SYNSEM [ LKEYS.KEYREL.PRED "_i+e_a_1_rel",
            PHON.ONSET voc ] ].

i_e_root_pre_6 := adv_s_pre_word_root_le &
 [ STEM < "i.e.," >,
   SYNSEM [ LKEYS.KEYREL.PRED "_i+e_a_1_rel",
            PHON.ONSET voc ] ].

i_guess_disc := adv_disc_like_preh_le &
 [ STEM < "i", "guess" >,
   SYNSEM [ LKEYS.KEYREL.CARG "i_guess",
            PHON.ONSET voc ] ].

i_guess_disc_2 := adv_disc_like_preh_le &
 [ STEM < "_i", "guess" >,
   SYNSEM [ LKEYS.KEYREL.CARG "i_guess",
            PHON.ONSET voc ] ].

i_guess_disc_3 := adv_disc_like_posth_le &
 [ STEM < "i", "guess" >,
   SYNSEM [ LKEYS.KEYREL.CARG "i_guess",
            PHON.ONSET voc ] ].

i_guess_disc_4 := adv_disc_like_posth_le &
 [ STEM < "_i", "guess" >,
   SYNSEM [ LKEYS.KEYREL.CARG "i_guess",
            PHON.ONSET voc ] ].

i_mean_disc := adv_disc_like_posth_le &
 [ STEM < "i", "mean" >,
   SYNSEM [ LKEYS.KEYREL.CARG "i_mean",
            PHON.ONSET voc ] ].

i_mean_disc_2 := adv_disc_like_posth_le &
 [ STEM < "_i", "mean" >,
   SYNSEM [ LKEYS.KEYREL.CARG "i_mean",
            PHON.ONSET voc ] ].

i_must_say_root := adv_disc_like_preh_le &
 [ STEM < "i", "must", "say" >,
   SYNSEM [ LKEYS.KEYREL.CARG "i_must_say",
            PHON.ONSET voc ] ].

i_must_say_root_2 := adv_disc_like_preh_le &
 [ STEM < "_i", "must", "say" >,
   SYNSEM [ LKEYS.KEYREL.CARG "i_must_say",
            PHON.ONSET voc ] ].

i_must_say_root_3 := adv_disc_like_posth_le &
 [ STEM < "i", "must", "say" >,
   SYNSEM [ LKEYS.KEYREL.CARG "i_must_say",
            PHON.ONSET voc ] ].

i_must_say_root_4 := adv_disc_like_posth_le &
 [ STEM < "_i", "must", "say" >,
   SYNSEM [ LKEYS.KEYREL.CARG "i_must_say",
            PHON.ONSET voc ] ].

i_period_np2 := n_proper_le &
 [ STEM < "_i." >,
   SYNSEM [ LKEYS.KEYREL.CARG "i",
            PHON.ONSET voc ] ].

i_stutter := n_pers_pro_i_le &
 [ STEM < "i", "-", "i" >,
   SYNSEM.PHON.ONSET voc ].

i_stutter_2 := n_pers_pro_i_le &
 [ STEM < "_i", "-", "_i" >,
   SYNSEM.PHON.ONSET voc ].

i_think_disc := adv_disc_like_posth_le &
 [ STEM < "i", "think" >,
   SYNSEM [ LKEYS.KEYREL.CARG "i_think",
            PHON.ONSET voc ] ].

i_think_disc_2 := adv_disc_like_posth_le &
 [ STEM < "_i", "think" >,
   SYNSEM [ LKEYS.KEYREL.CARG "i_think",
            PHON.ONSET voc ] ].

iaa_nd := n_proper_le &
 [ STEM < "iaa" >,
   SYNSEM [ LKEYS.KEYREL.CARG "iaa",
            PHON.ONSET voc ] ].

iambic_a1 := adj_intrans_le &
 [ STEM < "iambic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_iambic_a_1_rel",
            PHON.ONSET voc ] ].

ian := n_proper_le &
 [ STEM < "ian" >,
   SYNSEM [ LKEYS.KEYREL.CARG "ian",
            PHON.ONSET voc ] ].

ibm_n1 := n_proper_le &
 [ STEM < "ibm" >,
   SYNSEM [ LKEYS.KEYREL.CARG "ibm",
            PHON.ONSET voc ] ].

ibook_n1 := n_intr_le &
 [ STEM < "ibook" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ibook_n_1_rel",
            PHON.ONSET voc ] ].

ibsen := n_proper_le &
 [ STEM < "ibsen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "ibsen",
            PHON.ONSET voc ] ].

ice_filled_a1 := adj_intrans_le &
 [ STEM < "ice-", "filled" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ice+filled_a_1_rel",
            PHON.ONSET voc ] ].

ice_n := n_intr_le &
 [ STEM < "ice" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_i+c+e_n_1_rel",
            PHON.ONSET voc ] ].

ice_n1 := n_mass_le &
 [ STEM < "ice" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ice_n_1_rel",
            PHON.ONSET voc ] ].

icecap_n1 := n_intr_le &
 [ STEM < "icecap" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_icecap_n_1_rel",
            PHON.ONSET voc ] ].

icefall_n1 := n_intr_le &
 [ STEM < "icefall" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_icefall_n_1_rel",
            PHON.ONSET voc ] ].

iceland := n_proper_le &
 [ STEM < "iceland" >,
   SYNSEM [ LKEYS.KEYREL.CARG "iceland",
            PHON.ONSET voc ] ].

icelandair := n_proper_le &
 [ STEM < "icelandair" >,
   SYNSEM [ LKEYS.KEYREL.CARG "icelandair",
            PHON.ONSET voc ] ].

icicle_n1 := n_intr_le &
 [ STEM < "icicle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_icicle_n_1_rel",
            PHON.ONSET voc ] ].

icing_n1 := n_mass_le &
 [ STEM < "icing" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_icing_n_1_rel",
            PHON.ONSET voc ] ].

icon_n1 := n_intr_le &
 [ STEM < "icon" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_icon_n_1_rel",
            PHON.ONSET voc ] ].

icphs_n1 := n_proper_le &
 [ STEM < "icphs" >,
   SYNSEM [ LKEYS.KEYREL.CARG "icphs",
            PHON.ONSET voc ] ].

icsi_n1 := n_proper_le &
 [ STEM < "icsi" >,
   SYNSEM [ LKEYS.KEYREL.CARG "icsi",
            PHON.ONSET voc ] ].

icy_a1 := adj_intrans_le &
 [ STEM < "icy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_icy_a_1_rel",
            PHON.ONSET voc ] ].

id_n1 := n_mass_count_ppof_le &
 [ STEM < "id" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_id_n_of_rel",
            PHON.ONSET voc ] ].

id_n2 := n_mass_count_ppof_le &
 [ STEM < "i.d." >,
   SYNSEM [ LKEYS.KEYREL.PRED "_id_n_of_rel",
            PHON.ONSET voc ] ].

id_ttl := n_title_le &
 [ STEM < "id" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_id_n_of_rel",
            PHON.ONSET voc ] ].

id_ttl2 := n_title_le &
 [ STEM < "i.d." >,
   SYNSEM [ LKEYS.KEYREL.PRED "_id_n_of_rel",
            PHON.ONSET voc ] ].

idaho_n1 := n_proper_le &
 [ STEM < "idaho" >,
   SYNSEM [ LKEYS.KEYREL.CARG "idaho",
            PHON.ONSET voc ] ].

idaho_n2 := n_proper_abb_le &
 [ STEM < "id" >,
   SYNSEM [ LKEYS.KEYREL.CARG "idaho",
            PHON.ONSET voc ] ].

idea_n1 := n_ppof_nosort_le &
 [ STEM < "idea" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_idea_n_of_rel",
            PHON.ONSET voc ] ].

idea_n2 := n_cpcomp_optthat_le &
 [ STEM < "idea" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_idea_n_of_rel",
            PHON.ONSET voc ] ].

idea_n3 := n_vpcomp_le &
 [ STEM < "idea" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_idea_n_of_rel",
            PHON.ONSET voc ] ].

ideal_a1 := adj_intrans_le &
 [ STEM < "ideal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ideal_a_1_rel",
            PHON.ONSET voc ] ].

ideal_n1 := n_intr_le &
 [ STEM < "ideal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ideal_n_1_rel",
            PHON.ONSET voc ] ].

ideally_isect := adv_int_vp_le &
 [ STEM < "ideally" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ideal_a_1_rel",
            PHON.ONSET voc ] ].

identical_a1 := adj_trans_le &
 [ STEM < "identical" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_identical_a_to_rel" ],
            PHON.ONSET voc ] ].

identification_n1 := n_mass_ppcomp_le &
 [ STEM < "identification" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_identification_n_of_rel" ],
            PHON.ONSET voc ] ].

identifierersatz_n1 := n_proper_le &
 [ STEM < "identifierersatz" >,
   SYNSEM [ LKEYS.KEYREL.CARG "idersatz",
            PHON.ONSET voc ] ].

identify_as_v1 := v_empty_prep_intrans_le &
 [ STEM < "identify" >,
   SYNSEM [ LKEYS [ --COMPKEY _as_p_sel_rel,
                    KEYREL.PRED "_identify_v_as_rel" ],
            PHON.ONSET voc ] ].

identify_as_v2 := v_np_as_le &
 [ STEM < "identify" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_identify_v_as_rel",
            PHON.ONSET voc ] ].

identify_v1 := v_np_trans_le &
 [ STEM < "identify" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_identify_v_1_rel",
            PHON.ONSET voc ] ].

identity_n1 := n_mass_count_le &
 [ STEM < "identity" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_identity_n_1_rel",
            PHON.ONSET voc ] ].

idiomatic_a1 := adj_intrans_le &
 [ STEM < "idiomatic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_idiomatic_a_1_rel",
            PHON.ONSET voc ] ].

idiopathic_a1 := adj_intrans_le &
 [ STEM < "idiopathic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_idiopathic_a_1_rel",
            PHON.ONSET voc ] ].

idiot_n1 := n_intr_le &
 [ STEM < "idiot" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_idiot_n_1_rel",
            PHON.ONSET voc ] ].

iditarod_n1 := n_proper_le &
 [ STEM < "iditarod" >,
   SYNSEM [ LKEYS.KEYREL.CARG "iditarod",
            PHON.ONSET voc ] ].

idle_a1 := adj_intrans_le &
 [ STEM < "idle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_idle_a_1_rel",
            PHON.ONSET voc ] ].

idle_v1 := v_unerg_le &
 [ STEM < "idle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_idle_v_1_rel",
            PHON.ONSET voc ] ].

idler_n1 := n_intr_le &
 [ STEM < "idler" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_idler_n_1_rel",
            PHON.ONSET voc ] ].

ids_nd := n_proper_le &
 [ STEM < "ids" >,
   SYNSEM [ LKEYS.KEYREL.CARG "ids",
            PHON.ONSET voc ] ].

idyll_n1 := n_intr_le &
 [ STEM < "idyll" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_idyll_n_1_rel",
            PHON.ONSET voc ] ].

idyllic_a1 := adj_intrans_le &
 [ STEM < "idyllic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_idyllic_a_1_rel",
            PHON.ONSET voc ] ].

if_c_indic := comp_if_indic_le &
 [ STEM < "if" >,
   SYNSEM.PHON.ONSET voc ].

if_c_subjnct := comp_if_subjnct_le &
 [ STEM < "if" >,
   SYNSEM.PHON.ONSET voc ].

if_necessary_adv1 := adv_vp_le &
 [ STEM < "if", "necessary" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_if+necessary_a_1_rel",
            PHON.ONSET voc ] ].

if_need_be_adv1 := adv_vp_post_le &
 [ STEM < "if", "need", "be" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_if+need+be_a_1_rel",
            PHON.ONSET voc ] ].

if_not_adv1 := adv_int_vp_post_le &
 [ STEM < "if", "not" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_if+not_a_1_rel",
            PHON.ONSET voc ] ].

if_only_psc := p_subconj_le &
 [ STEM < "if", "only" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_if+only_x_rel",
            PHON.ONSET voc ] ].

if_prd := p_subconj_prd_le &
 [ STEM < "if" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_if_x_then_rel",
            PHON.ONSET voc ] ].

if_subconj_unspec := p_subconj_if_unspec_le &
 [ STEM < "if" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_if_x_then_rel",
            PHON.ONSET voc ] ].

if_you_like_root_post := adv_s_post_word_nospec_le &
 [ STEM < "if", "you", "like" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_if+you+like_a_1_rel",
            PHON.ONSET voc ] ].

if_you_like_root_pre := adv_s_pre_word_root_le &
 [ STEM < "if", "you", "like" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_if+you+like_a_1_rel",
            PHON.ONSET voc ] ].

if_you_want_adv1 := adv_s_pre_word_root_le &
 [ STEM < "if", "you", "want" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_if+you+want_a_1_rel",
            PHON.ONSET voc ] ].

if_you_want_adv2 := adv_s_post_word_nospec_le &
 [ STEM < "if", "you", "want" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_if+you+want_a_1_rel",
            PHON.ONSET voc ] ].

ignite_v1 := v_unacc_le &
 [ STEM < "ignite" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ignite_v_1_rel",
            PHON.ONSET voc ] ].

ignite_v2 := v_np_trans_noger_le &
 [ STEM < "ignite" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ignite_v_cause_rel",
            PHON.ONSET voc ] ].

ignoramus_n1 := n_intr_le &
 [ STEM < "ignoramus" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ignoramus_n_1_rel",
            PHON.ONSET voc ] ].

ignore_v1 := v_np_trans_le &
 [ STEM < "ignore" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ignore_v_1_rel",
            PHON.ONSET voc ] ].

iida_n1 := n_proper_le &
 [ STEM < "iida" >,
   SYNSEM [ LKEYS.KEYREL.CARG "iida",
            PHON.ONSET voc ] ].

ileocolic_a1 := adj_intrans_le &
 [ STEM < "ileocolic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ileocolic_a_1_rel",
            PHON.ONSET voc ] ].

iliad_n1 := n_intr_named_le &
 [ STEM < "iliad" >,
   SYNSEM [ LKEYS.KEYREL.CARG "iliad",
            PHON.ONSET voc ] ].

ill_a1 := adj_intrans_le &
 [ STEM < "ill" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ill_a_1_rel",
            PHON.ONSET voc ] ].

illegal_a1 := adj_trans_le &
 [ STEM < "illegal" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_illegal_a_for_rel" ],
            PHON.ONSET voc ] ].

illegal_a2 := adj_reg_atrans_le &
 [ STEM < "illegal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_illegal_a_for_rel",
            PHON.ONSET con ] ].

illegality_n1 := n_mass_count_le &
 [ STEM < "illegality" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_illegality_n_1_rel",
            PHON.ONSET voc ] ].

illegally := adv_int_vp_le &
 [ STEM < "illegally" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_illegal_a_for_rel",
            PHON.ONSET voc ] ].

illegitimate_a1 := adj_intrans_le &
 [ STEM < "illegitimate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_illegitimate_a_1_rel",
            PHON.ONSET voc ] ].

illinois_n1 := n_proper_le &
 [ STEM < "illinois" >,
   SYNSEM [ LKEYS.KEYREL.CARG "illinois",
            PHON.ONSET voc ] ].

illinois_n2 := n_proper_abb_le &
 [ STEM < "il" >,
   SYNSEM [ LKEYS.KEYREL.CARG "illinois",
            PHON.ONSET voc ] ].

illmanndalen := n_proper_le &
 [ STEM < "illmanndalen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "illmanndalen",
            PHON.ONSET voc ] ].

illness_n := n_mass_count_le &
 [ STEM < "illness" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_illness_n_1_rel",
            PHON.ONSET voc ] ].

illuminate_v1 := v_np_trans_le &
 [ STEM < "illuminate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_illuminate_v_1_rel",
            PHON.ONSET voc ] ].

illumination_n1 := n_mass_count_le &
 [ STEM < "illumination" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_illumination_n_1_rel",
            PHON.ONSET voc ] ].

illumine_v1 := v_np_trans_le &
 [ STEM < "illumine" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_illumine_v_1_rel",
            PHON.ONSET voc ] ].

illusion_n1 := n_intr_le &
 [ STEM < "illusion" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_illusion_n_1_rel",
            PHON.ONSET voc ] ].

illustrate_v1 := v_np*_trans_le &
 [ STEM < "illustrate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_illustrate_v_1_rel",
            PHON.ONSET voc ] ].

illustrate_v2 := v_cp_non_trans_le &
 [ STEM < "illustrate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_illustrate_v_1_rel",
            PHON.ONSET voc ] ].

illustration_abb_n1 := n_intr_le &
 [ STEM < "illust." >,
   SYNSEM [ LKEYS.KEYREL.PRED "_illustration_n_of_rel",
            PHON.ONSET voc ] ].

illustration_abb_n3 := n_intr_le &
 [ STEM < "ill." >,
   SYNSEM [ LKEYS.KEYREL.PRED "_illustration_n_of_rel",
            PHON.ONSET voc ] ].

illustration_n := n_ppof_le &
 [ STEM < "illustration" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_illustration_n_of_rel",
            PHON.ONSET voc ] ].

illustrative_a1 := adj_intrans_le &
 [ STEM < "illustrative" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_illustrative_a_1_rel",
            PHON.ONSET voc ] ].

illustrator_n := n_ppof_le &
 [ STEM < "illustrator" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_illustrator_n_of_rel",
            PHON.ONSET voc ] ].

illustrious_a1 := adj_intrans_le &
 [ STEM < "illustrious" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_illustrious_a_1_rel",
            PHON.ONSET voc ] ].

illvatnet := n_proper_le &
 [ STEM < "illvatnet" >,
   SYNSEM [ LKEYS.KEYREL.CARG "illvatnet",
            PHON.ONSET voc ] ].

ilm_n1 := n_intr_le &
 [ STEM < "ilm" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ilm_n_1_rel",
            PHON.ONSET voc ] ].

ilm_title := n_title_le &
 [ STEM < "ilm" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ilm_n_1_rel",
            PHON.ONSET voc ] ].

imac_n1 := n_intr_le &
 [ STEM < "imac" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_imac_n_1_rel",
            PHON.ONSET voc ] ].

image_n1 := n_ppof_le &
 [ STEM < "image" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_image_n_of_rel",
            PHON.ONSET voc ] ].

imagery_n1 := n_mass_le &
 [ STEM < "imagery" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_imagery_n_1_rel",
            PHON.ONSET voc ] ].

imaginary_a1 := adj_intrans_le &
 [ STEM < "imaginary" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_imaginary_a_1_rel",
            PHON.ONSET voc ] ].

imagination_n1 := n_mass_count_le &
 [ STEM < "imagination" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_imagination_n_1_rel",
            PHON.ONSET voc ] ].

imagine_as_v1 := v_np_as_le &
 [ STEM < "imagine" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_imagine_v_as_rel",
            PHON.ONSET voc ] ].

imagine_v1 := v_np*_trans_le &
 [ STEM < "imagine" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_imagine_v_1_rel",
            PHON.ONSET voc ] ].

imagine_v2 := v_cp_fin_inf_non_trans_le &
 [ STEM < "imagine" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_imagine_v_1_rel",
            PHON.ONSET voc ] ].

imagine_v3 := v_obj_equi_le &
 [ STEM < "imagine" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_imagine_v_1_rel",
            PHON.ONSET voc ] ].

imagine_v4 := v_obj_equi_prd_adj_le &
 [ STEM < "imagine" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_imagine_v_1_rel",
            PHON.ONSET voc ] ].

imbed_v1 := v_np_trans_le &
 [ STEM < "imbed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_imbed_v_1_rel",
            PHON.ONSET voc ] ].

imei_n1 := n_proper_le &
 [ STEM < "imei" >,
   SYNSEM [ LKEYS.KEYREL.CARG "imei",
            PHON.ONSET voc ] ].

imho_disc := adv_disc_like_preh_le &
 [ STEM < "imho" >,
   SYNSEM [ LKEYS.KEYREL.CARG "imho",
            PHON.ONSET voc ] ].

imho_disc_2 := adv_disc_like_posth_le &
 [ STEM < "imho" >,
   SYNSEM [ LKEYS.KEYREL.CARG "imho",
            PHON.ONSET voc ] ].

imitate_v1 := v_np*_trans_le &
 [ STEM < "imitate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_imitate_v_1_rel",
            PHON.ONSET voc ] ].

imitation_n1 := n_mass_count_ppof_le &
 [ STEM < "imitation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_imitation_n_of_rel",
            PHON.ONSET voc ] ].

immeasurable_a1 := adj_intrans_le &
 [ STEM < "immeasurable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_immeasurable_a_1_rel",
            PHON.ONSET voc ] ].

immediate_a1 := adj_intrans_le &
 [ STEM < "immediate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_immediate_a_1_rel",
            PHON.ONSET voc ] ].

immediately_adv1 := adv_int_vp_le &
 [ STEM < "immediately" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_immediate_a_1_rel",
            PHON.ONSET voc ] ].

immediately_deg := adv_degree_spec_jov_le &
 [ STEM < "immediately" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_immediately_x_deg_rel",
            PHON.ONSET voc ] ].

immediately_m_deg := adv_degree_spec_m_le &
 [ STEM < "immediately" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_immediately_x_m_rel",
            PHON.ONSET voc ] ].

immense_a1 := adj_intrans_le &
 [ STEM < "immense" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_immense_a_1_rel",
            PHON.ONSET voc ] ].

imminent_a1 := adj_intrans_le &
 [ STEM < "imminent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_imminent_a_1_rel",
            PHON.ONSET voc ] ].

immortal_a1 := adj_intrans_le &
 [ STEM < "immortal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_immortal_a_1_rel",
            PHON.ONSET voc ] ].

immortal_n1 := n_intr_le &
 [ STEM < "immortal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_immortal_n_1_rel",
            PHON.ONSET voc ] ].

immortalize_v1 := v_np_trans_le &
 [ STEM < "immortalize" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_immortalize_v_1_rel",
            PHON.ONSET voc ] ].

immovable_a1 := adj_intrans_le &
 [ STEM < "immovable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_immovable_a_1_rel",
            PHON.ONSET voc ] ].

immunity_n1 := n_mass_count_le &
 [ STEM < "immunity" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_immunity_n_1_rel",
            PHON.ONSET voc ] ].

imp_abb_a1 := adj_intrans_le &
 [ STEM < "imp." >,
   SYNSEM [ LKEYS.KEYREL.PRED "_imperial_a_1_rel",
            PHON.ONSET voc ] ].

imp_abb_n1 := n_intr_le &
 [ STEM < "imp." >,
   SYNSEM [ LKEYS.KEYREL.PRED "_imperfective_n_1_rel",
            PHON.ONSET voc ] ].

impact_n1 := n_intr_le &
 [ STEM < "impact" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_impact_n_1_rel",
            PHON.ONSET voc ] ].

impair_v1 := v_np_trans_le &
 [ STEM < "impair" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_impair_v_1_rel",
            PHON.ONSET voc ] ].

impart_v1 := v_to*_trans_le &
 [ STEM < "impart" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_impart_v_to_rel",
            PHON.ONSET voc ] ].

impatience_n1 := n_mass_le &
 [ STEM < "impatience" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_impatience_n_1_rel",
            PHON.ONSET voc ] ].

impatient_a1 := adj_trans_le &
 [ STEM < "impatient" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_impatient_a_for_rel" ],
            PHON.ONSET voc ] ].

impeach_v1 := v_np*_trans_le &
 [ STEM < "impeach" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_impeach_v_1_rel",
            PHON.ONSET voc ] ].

impediment_n1 := n_intr_le &
 [ STEM < "impediment" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_impediment_n_1_rel",
            PHON.ONSET voc ] ].

impel_v1 := v_np_trans_le &
 [ STEM < "impel" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_impel_v_1_rel",
            PHON.ONSET voc ] ].

impel_v2 := v_obj_equi_le &
 [ STEM < "impel" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_impel_v_1_rel",
            PHON.ONSET voc ] ].

impending_a1 := adj_intrans_le &
 [ STEM < "impending" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_impending_a_1_rel",
            PHON.ONSET voc ] ].

impenetrability_n1 := n_mass_le &
 [ STEM < "impenetrability" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_impenetrability_n_1_rel",
            PHON.ONSET voc ] ].

impenetrable_a1 := adj_intrans_le &
 [ STEM < "impenetrable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_impenetrable_a_1_rel",
            PHON.ONSET voc ] ].

imperative_a2 := adj_reg_atrans_cp_le &
 [ STEM < "imperative" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_imperative_a_to_rel",
            PHON.ONSET voc ] ].

imperative_a3 := adj_atrans_bse_cp_le &
 [ STEM < "imperative" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_imperative_a_to_rel",
            PHON.ONSET voc ] ].

imperative_isect := adj_trans_le &
 [ STEM < "imperative" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_imperative_a_to_rel" ],
            PHON.ONSET voc ] ].

imperatively := adv_int_vp_le &
 [ STEM < "imperatively" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_imperative_a_to_rel",
            PHON.ONSET voc ] ].

imperfect_a1 := adj_intrans_le &
 [ STEM < "imperfect" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_imperfect_a_1_rel",
            PHON.ONSET voc ] ].

impersonally := adv_int_vp_le &
 [ STEM < "impersonally" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_impersonal_a_1_rel",
            PHON.ONSET voc ] ].

impersonate_v1 := v_np_trans_le &
 [ STEM < "impersonate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_impersonate_v_1_rel",
            PHON.ONSET voc ] ].

impetus_n1 := n_intr_sg_le &
 [ STEM < "impetus" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_impetus_n_1_rel",
            PHON.ONSET voc ] ].

implement_n1 := n_intr_le &
 [ STEM < "implement" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_implement_n_1_rel",
            PHON.ONSET voc ] ].

implement_v1 := v_np_trans_le &
 [ STEM < "implement" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_implement_v_1_rel",
            PHON.ONSET voc ] ].

implicate_v1 := v_empty_prep*_trans_le &
 [ STEM < "implicate" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_implicate_v_in_rel" ],
            PHON.ONSET voc ] ].

implicate_v2 := v_cp_prop_non_trans_le &
 [ STEM < "implicate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_implicate_v_1_rel",
            PHON.ONSET voc ] ].

imply_v1 := v_np_trans_le &
 [ STEM < "imply" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_imply_v_1_rel",
            PHON.ONSET voc ] ].

imply_v2 := v_cp_prop_non_trans_le &
 [ STEM < "imply" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_imply_v_1_rel",
            PHON.ONSET voc ] ].

impoliteness_n1 := n_intr_le &
 [ STEM < "impoliteness" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_impoliteness_n_1_rel",
            PHON.ONSET voc ] ].

import_n1 := n_ppof_le &
 [ STEM < "import" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_import_n_of_rel",
            PHON.ONSET voc ] ].

import_v1 := v_np*_trans_le &
 [ STEM < "import" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_import_v_1_rel",
            PHON.ONSET voc ] ].

importance_n := n_mass_count_le &
 [ STEM < "importance" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_importance_n_1_rel",
            PHON.ONSET voc ] ].

important_a1 := adj_trans_le &
 [ STEM < "important" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_important_a_for_rel" ],
            PHON.ONSET voc ] ].

important_a2 := adj_reg_atrans_le &
 [ STEM < "important" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_important_a_for_rel",
            PHON.ONSET voc ] ].

important_a3 := adj_reg_atrans_cp_le &
 [ STEM < "important" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_important_a_for_rel",
            PHON.ONSET voc ] ].

important_a4 := adj_tough_atrans_le &
 [ STEM < "important" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_important_a_for_rel",
            PHON.ONSET voc ] ].

importantly := adv_int_vp_le &
 [ STEM < "importantly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_important_a_for_rel",
            PHON.ONSET voc ] ].

impose_on_v1 := v_empty_prep_intrans_le &
 [ STEM < "impose" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_impose_v_on_rel" ],
            PHON.ONSET voc ] ].

impose_v1 := v_empty_prep*_trans_le &
 [ STEM < "impose" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_impose_v_on_rel" ],
            PHON.ONSET voc ] ].

imposing_a1 := adj_intrans_le &
 [ STEM < "imposing" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_imposing_a_1_rel",
            PHON.ONSET voc ] ].

imposition_n := n_ppof_le &
 [ STEM < "imposition" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_imposition_n_of_rel",
            PHON.ONSET voc ] ].

impossibility_n1 := n_mass_le &
 [ STEM < "impossibility" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_impossibility_n_1_rel",
            PHON.ONSET voc ] ].

impossible_a1 := adj_trans_le &
 [ STEM < "impossible" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_impossible_a_for_rel" ],
            PHON.ONSET voc ] ].

impossible_a2 := adj_reg_atrans_le &
 [ STEM < "impossible" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_impossible_a_for_rel",
            PHON.ONSET voc ] ].

impossible_a3 := adj_reg_atrans_cp_le &
 [ STEM < "impossible" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_impossible_a_for_rel",
            PHON.ONSET voc ] ].

impossible_a4 := adj_tough_atrans_le &
 [ STEM < "impossible" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_impossible_a_for_rel",
            PHON.ONSET voc ] ].

impossibly_adv1 := adv_int_vp_post_le &
 [ STEM < "impossibly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_impossible_a_for_rel",
            PHON.ONSET voc ] ].

impracticable_a1 := adj_intrans_le &
 [ STEM < "impracticable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_impracticable_a_1_rel",
            PHON.ONSET voc ] ].

impractical_a1 := adj_intrans_le &
 [ STEM < "impractical" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_impractical_a_1_rel",
            PHON.ONSET voc ] ].

impractically := adv_int_vp_le &
 [ STEM < "impractically" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_impractical_a_1_rel",
            PHON.ONSET voc ] ].

imprecation_n1 := n_mass_count_le &
 [ STEM < "imprecation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_imprecation_n_1_rel",
            PHON.ONSET con ] ].

impregnate_v1 := v_np_trans_le &
 [ STEM < "impregnate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_impregnate_v_1_rel",
            PHON.ONSET voc ] ].

impress_v1 := v_np*_trans_le &
 [ STEM < "impress" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_impress_v_1_rel",
            PHON.ONSET voc ] ].

impress_v2 := v_pp_cp_fin_le &
 [ STEM < "impress" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_impress_v_1_rel" ],
            PHON.ONSET voc ] ].

impress_v3 := v_pp_cp_fin_le &
 [ STEM < "impress" >,
   SYNSEM [ LKEYS [ --COMPKEY _upon_p_sel_rel,
                    KEYREL.PRED "_impress_v_1_rel" ],
            PHON.ONSET voc ] ].

impressed_a1 := adj_trans_le &
 [ STEM < "impressed" >,
   SYNSEM [ LKEYS [ --COMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_impressed_a_with_rel" ],
            PHON.ONSET voc ] ].

impression_n1 := n_ppof_le &
 [ STEM < "impression" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_impression_n_of_rel",
            PHON.ONSET voc ] ].

impressive_a1 := adj_intrans_le &
 [ STEM < "impressive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_impressive_a_1_rel",
            PHON.ONSET voc ] ].

impressively_adv := adv_int_vp_le &
 [ STEM < "impressively" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_impressive_a_1_rel",
            PHON.ONSET voc ] ].

imprint_n1 := n_intr_le &
 [ STEM < "imprint" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_imprint_n_1_rel",
            PHON.ONSET voc ] ].

imprint_v1 := v_np_trans_le &
 [ STEM < "imprint" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_imprint_v_1_rel",
            PHON.ONSET voc ] ].

imprison_v1 := v_np_trans_le &
 [ STEM < "imprison" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_imprison_v_1_rel",
            PHON.ONSET voc ] ].

improbability_n1 := n_intr_le &
 [ STEM < "improbability" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_improbability_n_1_rel",
            PHON.ONSET voc ] ].

improbably_adv1 := adv_int_vp_post_le &
 [ STEM < "improbably" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_improbable_a_1_rel",
            PHON.ONSET voc ] ].

impromptu_isect := adj_intrans_le &
 [ STEM < "impromptu" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_impromptu_a_1_rel",
            PHON.ONSET voc ] ].

improve_on_v1 := v_empty_prep_intrans_le &
 [ STEM < "improve" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_improve_v_on_rel" ],
            PHON.ONSET voc ] ].

improve_v1 := v_np_trans_noger_le &
 [ STEM < "improve" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_improve_v_cause_rel",
            PHON.ONSET voc ] ].

improve_v2 := v_unacc_le &
 [ STEM < "improve" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_improve_v_1_rel",
            PHON.ONSET voc ] ].

improvement_n1 := n_mass_count_le &
 [ STEM < "improvement" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_improvement_n_1_rel",
            PHON.ONSET voc ] ].

impulse_n1 := n_mass_count_le &
 [ STEM < "impulse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_impulse_n_1_rel",
            PHON.ONSET voc ] ].

impurity_n1 := n_mass_count_le &
 [ STEM < "impurity" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_impurity_n_1_rel",
            PHON.ONSET voc ] ].

in := p_reg_le &
 [ STEM < "in" >,
   SYNSEM [ LKEYS.KEYREL.PRED _in_p_rel,
            PHON.ONSET voc ] ].

in_a_way_disc_adv := adv_disc_like_preh_le &
 [ STEM < "in", "a", "way" >,
   SYNSEM [ LKEYS.KEYREL.CARG "in_a_way",
            PHON.ONSET voc ] ].

in_addition_to := p_le &
 [ STEM < "in", "addition", "to" >,
   SYNSEM [ LKEYS.KEYREL.PRED _in+addition+to_p_rel,
            PHON.ONSET voc ] ].

in_any_case_adv1 := adv_vp_aux_only_le &
 [ STEM < "in", "any", "case" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_in+any+case_a_1_rel",
            PHON.ONSET voc ] ].

in_back_of := p_le &
 [ STEM < "in", "back", "of" >,
   SYNSEM [ LKEYS.KEYREL.PRED _in+back+of_p_rel,
            PHON.ONSET voc ] ].

in_behalf_of := p_le &
 [ STEM < "in", "behalf", "of" >,
   SYNSEM [ LKEYS.KEYREL.PRED _in+behalf+of_p_rel,
            PHON.ONSET voc ] ].

in_between := p_le &
 [ STEM < "in", "between" >,
   SYNSEM [ LKEYS.KEYREL.PRED _in+between_p_rel,
            PHON.ONSET voc ] ].

in_between_a1 := adj_intrans_le &
 [ STEM < "in", "between" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_in+between_a_1_rel",
            PHON.ONSET voc ] ].

in_between_pp := pp_le &
 [ STEM < "in", "between" >,
   SYNSEM [ LKEYS.KEYREL.PRED _in+between_p_rel,
            PHON.ONSET voc ] ].

in_brief_adv1 := adv_int_vp_post_le &
 [ STEM < "in", "brief" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_in+brief_a_1_rel",
            PHON.ONSET voc ] ].

in_case := p_subconj_le &
 [ STEM < "in", "case" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_in+case_x_rel",
            PHON.ONSET voc ] ].

in_case_of := p_le &
 [ STEM < "in", "case", "of" >,
   SYNSEM [ LKEYS.KEYREL.PRED _in+case+of_p_rel,
            PHON.ONSET voc ] ].

in_charge_a1 := adj_trans_le &
 [ STEM < "in", "charge" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_in+charge_a_of_rel" ],
            PHON.ONSET voc ] ].

in_connection_with_p1 := p_le &
 [ STEM < "in", "connection", "with" >,
   SYNSEM [ LKEYS.KEYREL.PRED _in+connection+with_p_rel,
            PHON.ONSET voc ] ].

in_effect_adv1 := adv_int_vp_aux_le &
 [ STEM < "in", "effect" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_in+effect_a_1_rel",
            PHON.ONSET voc ] ].

in_effect_adv2 := adv_int_vp_post_le &
 [ STEM < "in", "effect" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_in+effect_a_1_rel",
            PHON.ONSET voc ] ].

in_fact_adv1 := adv_int_vp_aux_le &
 [ STEM < "in", "fact" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_in+fact_a_1_rel",
            PHON.ONSET voc ] ].

in_fact_adv2 := adv_int_vp_post_le &
 [ STEM < "in", "fact" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_in+fact_a_1_rel",
            PHON.ONSET voc ] ].

in_front_of := p_le &
 [ STEM < "in", "front", "of" >,
   SYNSEM [ LKEYS.KEYREL.PRED _in+front+of_p_rel,
            PHON.ONSET voc ] ].

in_full_adv1 := adv_int_vp_post_le &
 [ STEM < "in", "full" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_in+full_a_1_rel",
            PHON.ONSET voc ] ].

in_general_adv1 := adv_int_vp_aux_le &
 [ STEM < "in", "general" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_in+general_a_1_rel",
            PHON.ONSET voc ] ].

in_general_adv2 := adv_int_vp_post_le &
 [ STEM < "in", "general" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_in+general_a_1_rel",
            PHON.ONSET voc ] ].

in_law_n1 := n_intr_le &
 [ STEM < "in", "law" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_in+law_n_1_rel",
            PHON.ONSET voc ] ].

in_lieu_of := p_le &
 [ STEM < "in", "lieu", "of" >,
   SYNSEM [ LKEYS.KEYREL.PRED _in+lieu+of_p_rel,
            PHON.ONSET voc ] ].

in_order_to := p_subconj_inf_le &
 [ STEM < "in", "order", "to" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_in+order+to_x_rel",
            PHON.ONSET voc ] ].

in_particular_adv1 := adv_int_vp_post_le &
 [ STEM < "in", "particular" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_in+particular_a_1_rel",
            PHON.ONSET voc ] ].

in_person_adv1 := adv_int_vp_post_le &
 [ STEM < "in", "person" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_in+person_a_1_rel",
            PHON.ONSET voc ] ].

in_pp := pp_dir_nomod_le &
 [ STEM < "in" >,
   SYNSEM [ LKEYS.KEYREL.PRED _in_p_rel,
            PHON.ONSET voc ] ].

in_principle_adv1 := adv_int_vp_post_le &
 [ STEM < "in", "principle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_in+principle_a_1_rel",
            PHON.ONSET voc ] ].

in_prtcl := p_prtcl_le &
 [ STEM < "in" >,
   SYNSEM [ LKEYS.KEYREL.PRED _in_p_sel_rel,
            PHON.ONSET voc ] ].

in_regard_to := p_le &
 [ STEM < "in", "regard", "to" >,
   SYNSEM [ LKEYS.KEYREL.PRED _in+regard+to_p_rel,
            PHON.ONSET voc ] ].

in_regards_to := p_le &
 [ STEM < "in", "regards", "to" >,
   SYNSEM [ LKEYS.KEYREL.PRED _in+regard+to_p_rel,
            PHON.ONSET voc ] ].

in_short_adv1 := adv_int_vp_post_le &
 [ STEM < "in", "short" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_in+short_a_1_rel",
            PHON.ONSET voc ] ].

in_so_far_as_subord := p_subconj_le &
 [ STEM < "in", "so", "far", "as" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_in+so+far+as_x_rel",
            PHON.ONSET voc ] ].

in_spite_of := p_le &
 [ STEM < "in", "spite", "of" >,
   SYNSEM [ LKEYS.KEYREL.PRED _in+spite+of_p_rel,
            PHON.ONSET voc ] ].

in_sum_adv1 := adv_int_vp_post_le &
 [ STEM < "in", "sum" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_in+sum_a_1_rel",
            PHON.ONSET voc ] ].

in_temp := p_temp_le &
 [ STEM < "in" >,
   SYNSEM [ LKEYS [ --COMPKEY non_day_or_deg_rel,
                    KEYREL.PRED _in_p_temp_rel ],
            PHON.ONSET voc ] ].

in_the_course_of := p_le &
 [ STEM < "in", "the", "course", "of" >,
   SYNSEM [ LKEYS.KEYREL.PRED _in+the+course+of_p_rel,
            PHON.ONSET voc ] ].

in_the_event := p_subconj_le &
 [ STEM < "in", "the", "event" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_in+the+event_x_rel",
            PHON.ONSET voc ] ].

in_the_way_of := p_reg_le &
 [ STEM < "in", "the", "way", "of" >,
   SYNSEM [ LKEYS.KEYREL.PRED _in+the+way+of_p_rel,
            PHON.ONSET voc ] ].

in_the_world_wh_adv := wh_the_hell_le &
 [ STEM < "in", "the", "world" >,
   SYNSEM [ LKEYS.KEYREL.PRED _in+the+world_x_rel,
            PHON.ONSET voc ] ].

in_toward_p := p_reg_le &
 [ STEM < "in", "toward" >,
   SYNSEM [ LKEYS.KEYREL.PRED _in+toward_p_rel,
            PHON.ONSET voc ] ].

in_towards_p := p_reg_le &
 [ STEM < "in", "towards" >,
   SYNSEM [ LKEYS.KEYREL.PRED _in+toward_p_rel,
            PHON.ONSET voc ] ].

in_vain_adv1 := adv_int_vp_post_le &
 [ STEM < "in", "vain" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_in+vain_a_1_rel",
            PHON.ONSET voc ] ].

inability_n1 := n_intr_le &
 [ STEM < "inability" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_inability_n_1_rel",
            PHON.ONSET voc ] ].

inability_n2 := n_vpcomp_le &
 [ STEM < "inability" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_inability_n_1_rel",
            PHON.ONSET voc ] ].

inaccessible_a1 := adj_intrans_le &
 [ STEM < "inaccessible" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_inaccessible_a_1_rel",
            PHON.ONSET voc ] ].

inaccurate_isect := adj_intrans_le &
 [ STEM < "inaccurate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_inaccurate_a_1_rel",
            PHON.ONSET voc ] ].

inaccurately := adv_int_vp_le &
 [ STEM < "inaccurately" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_inaccurate_a_1_rel",
            PHON.ONSET voc ] ].

inactive_a1 := adj_intrans_le &
 [ STEM < "inactive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_inactive_a_1_rel",
            PHON.ONSET voc ] ].

inactivity_n1 := n_mass_le &
 [ STEM < "inactivity" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_inactivity_n_1_rel",
            PHON.ONSET voc ] ].

inadequate_a1 := adj_intrans_le &
 [ STEM < "inadequate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_inadequate_a_1_rel",
            PHON.ONSET voc ] ].

inadequately := adv_int_vp_le &
 [ STEM < "inadequately" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_inadequate_a_1_rel",
            PHON.ONSET voc ] ].

inanimate_a1 := adj_intrans_le &
 [ STEM < "inanimate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_inanimate_a_1_rel",
            PHON.ONSET voc ] ].

inarticulate_a1 := adj_intrans_le &
 [ STEM < "inarticulate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_inarticulate_a_1_rel",
            PHON.ONSET voc ] ].

inasmuch_as_subord := p_subconj_le &
 [ STEM < "inasmuch", "as" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_inasmuch+as_x_subord_rel",
            PHON.ONSET voc ] ].

inaugurate_v1 := v_np_trans_le &
 [ STEM < "inaugurate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_inaugurate_v_1_rel",
            PHON.ONSET voc ] ].

inborn_a1 := adj_intrans_le &
 [ STEM < "inborn" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_inborn_a_1_rel",
            PHON.ONSET voc ] ].

inbox_n1 := n_intr_le &
 [ STEM < "inbox" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_inbox_n_1_rel",
            PHON.ONSET voc ] ].

incapable_a1 := adj_intrans_le &
 [ STEM < "incapable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_incapable_a_1_rel",
            PHON.ONSET voc ] ].

incense_n1 := n_mass_le &
 [ STEM < "incense" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_incense_n_1_rel",
            PHON.ONSET voc ] ].

incense_v1 := v_np_trans_le &
 [ STEM < "incense" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_incense_v_1_rel",
            PHON.ONSET voc ] ].

incentive_n1 := n_ppcomp_le &
 [ STEM < "incentive" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_incentive_n_to_rel" ],
            PHON.ONSET voc ] ].

incessant_a1 := adj_intrans_le &
 [ STEM < "incessant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_incessant_a_1_rel",
            PHON.ONSET voc ] ].

inch_n1 := n_meas_le &
 [ STEM < "inch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_inch_n_1_rel",
            PHON.ONSET voc ] ].

inch_v1 := v_np_trans_le &
 [ STEM < "inch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_inch_v_1_rel",
            PHON.ONSET voc ] ].

incident_i_n1 := n_bare_mod_le &
 [ STEM < "incident" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_incident_n_1_rel",
            PHON.ONSET voc ] ].

incident_n1 := n_intr_le &
 [ STEM < "incident" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_incident_n_1_rel",
            PHON.ONSET voc ] ].

incidental_a1 := adj_intrans_le &
 [ STEM < "incidental" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_incidental_a_1_rel",
            PHON.ONSET voc ] ].

incidental_n1 := n_intr_le &
 [ STEM < "incidental" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_incidental_n_1_rel",
            PHON.ONSET voc ] ].

incidentally_adv := adv_int_vp_le &
 [ STEM < "incidentally" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_incidental_a_1_rel",
            PHON.ONSET voc ] ].

incise_v1 := v_np_trans_le &
 [ STEM < "incise" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_incise_v_1_rel",
            PHON.ONSET voc ] ].

incision_n1 := n_mass_count_le &
 [ STEM < "incision" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_incision_n_1_rel",
            PHON.ONSET voc ] ].

incisor_n1 := n_intr_le &
 [ STEM < "incisor" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_incisor_n_1_rel",
            PHON.ONSET voc ] ].

incite_v1 := v_obj_equi_le &
 [ STEM < "incite" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_incite_v_to_rel",
            PHON.ONSET voc ] ].

incite_v2 := v_empty_prep_trans_le &
 [ STEM < "incite" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_incite_v_to_rel" ],
            PHON.ONSET voc ] ].

incite_v3 := v_np_trans_le &
 [ STEM < "incite" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_incite_v_to_rel",
            PHON.ONSET voc ] ].

inclemency_n1 := n_mass_count_le &
 [ STEM < "inclemency" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_inclemency_n_1_rel",
            PHON.ONSET voc ] ].

inclement_a1 := adj_intrans_le &
 [ STEM < "inclement" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_inclement_a_1_rel",
            PHON.ONSET voc ] ].

inclination_n1 := n_mass_count_le &
 [ STEM < "inclination" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_inclination_n_1_rel",
            PHON.ONSET voc ] ].

incline_n1 := n_intr_le &
 [ STEM < "incline" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_incline_n_1_rel",
            PHON.ONSET voc ] ].

incline_v1 := v_np_trans_noger_le &
 [ STEM < "incline" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_incline_v_cause_rel",
            PHON.ONSET voc ] ].

incline_v2 := v_unacc_le &
 [ STEM < "incline" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_incline_v_1_rel",
            PHON.ONSET voc ] ].

inclined_a1 := adj_reg_equi_le &
 [ STEM < "inclined" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_inclined_a_1_rel",
            PHON.ONSET voc ] ].

inclose_v1 := v_np_trans_le &
 [ STEM < "inclose" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_inclose_v_1_rel",
            PHON.ONSET voc ] ].

inclosure_n1 := n_mass_count_le &
 [ STEM < "inclosure" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_inclosure_n_1_rel",
            PHON.ONSET voc ] ].

include_v1 := v_np_trans_le &
 [ STEM < "include" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_include_v_1_rel",
            PHON.ONSET voc ] ].

include_v2 := v_np_prep_trans_le &
 [ STEM < "include" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _in_p_rel,
                    KEYREL.PRED "_include_v_1_rel" ],
            PHON.ONSET voc ] ].

included_a1 := adj_attr_intrans_le &
 [ STEM < "included" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_included_a_1_rel",
            PHON.ONSET voc ] ].

inclusion_n1 := n_mass_le &
 [ STEM < "inclusion" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_inclusion_n_1_rel",
            PHON.ONSET voc ] ].

inclusive_a1 := adj_intrans_le &
 [ STEM < "inclusive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_inclusive_a_1_rel",
            PHON.ONSET voc ] ].

inclusively_adv1 := adv_int_vp_post_le &
 [ STEM < "inclusively" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_inclusive_a_1_rel",
            PHON.ONSET voc ] ].

incoherent_a1 := adj_intrans_le &
 [ STEM < "incoherent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_incoherent_a_1_rel",
            PHON.ONSET voc ] ].

incoherently := adv_int_vp_le &
 [ STEM < "incoherently" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_incoherent_a_1_rel",
            PHON.ONSET voc ] ].

income_n1 := n_mass_count_le &
 [ STEM < "income" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_income_n_1_rel",
            PHON.ONSET voc ] ].

incoming_adj := adj_intrans_le &
 [ STEM < "incoming" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_incoming_a_1_rel",
            PHON.ONSET voc ] ].

incoming_tide_n1 := n_intr_le &
 [ STEM < "incoming", "tide" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_incoming+tide_n_1_rel",
            PHON.ONSET voc ] ].

incomparably_adv := adv_int_vp_le &
 [ STEM < "incomparably" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_incomparable_a_1_rel",
            PHON.ONSET voc ] ].

incompatibility_n1 := n_mass_count_le &
 [ STEM < "incompatibility" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_incompatibility_n_1_rel",
            PHON.ONSET voc ] ].

incomplete_a1 := adj_intrans_le &
 [ STEM < "incomplete" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_incomplete_a_1_rel",
            PHON.ONSET voc ] ].

incomprehensible_a1 := adj_intrans_le &
 [ STEM < "incomprehensible" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_incomprehensible_a_1_rel",
            PHON.ONSET voc ] ].

inconsiderable_a1 := adj_intrans_le &
 [ STEM < "inconsiderable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_inconsiderable_a_1_rel",
            PHON.ONSET voc ] ].

inconsiderate_a1 := adj_intrans_le &
 [ STEM < "inconsiderate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_inconsiderate_a_1_rel",
            PHON.ONSET voc ] ].

inconsiderately_adv1 := adv_int_vp_le &
 [ STEM < "inconsiderately" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_inconsiderate_a_1_rel",
            PHON.ONSET voc ] ].

inconsistent_a1 := adj_intrans_le &
 [ STEM < "inconsistent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_inconsistent_a_1_rel",
            PHON.ONSET voc ] ].

inconspicuous_a1 := adj_intrans_le &
 [ STEM < "inconspicuous" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_inconspicuous_a_1_rel",
            PHON.ONSET voc ] ].

inconstant_a1 := adj_intrans_le &
 [ STEM < "inconstant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_inconstant_a_1_rel",
            PHON.ONSET voc ] ].

inconvenience_n1 := n_mass_count_le &
 [ STEM < "inconvenience" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_inconvenience_n_1_rel",
            PHON.ONSET voc ] ].

inconvenience_v1 := v_obj_equi_le &
 [ STEM < "inconvenience" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_inconvenience_v_1_rel",
            PHON.ONSET voc ] ].

inconvenient_a1 := adj_intrans_le &
 [ STEM < "inconvenient" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_inconvenient_a_1_rel",
            PHON.ONSET voc ] ].

inconveniently := adv_int_vp_le &
 [ STEM < "inconveniently" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_inconvenient_a_1_rel",
            PHON.ONSET voc ] ].

incorporate_v1 := v_np_trans_le &
 [ STEM < "incorporate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_incorporate_v_1_rel",
            PHON.ONSET voc ] ].

incorporate_v2 := v_np_prep_trans_le &
 [ STEM < "incorporate" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _into_p_rel,
                    KEYREL.PRED "_incorporate_v_1_rel" ],
            PHON.ONSET voc ] ].

incorrect_a1 := adj_intrans_le &
 [ STEM < "incorrect" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_incorrect_a_1_rel",
            PHON.ONSET voc ] ].

incorrectly := adv_int_vp_le &
 [ STEM < "incorrectly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_incorrect_a_1_rel",
            PHON.ONSET voc ] ].

increase_n1 := n_mass_count_le &
 [ STEM < "increase" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_increase_n_1_rel",
            PHON.ONSET voc ] ].

increase_v1 := v_unacc_le &
 [ STEM < "increase" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_increase_v_1_rel",
            PHON.ONSET voc ] ].

increase_v2 := v_np_trans_noger_le &
 [ STEM < "increase" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_increase_v_cause_rel",
            PHON.ONSET voc ] ].

increasingly_adv1 := adv_int_vp_le &
 [ STEM < "increasingly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_increasing_a_1_rel",
            PHON.ONSET voc ] ].

increasingly_deg := adv_degree_spec_v_le &
 [ STEM < "increasingly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_increasingly_x_deg_rel",
            PHON.ONSET voc ] ].

incredible_a1 := adj_trans_le &
 [ STEM < "incredible" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_incredible_a_to_rel" ],
            PHON.ONSET voc ] ].

incredible_a2 := adj_reg_atrans_cp_le &
 [ STEM < "incredible" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_incredible_a_to_rel",
            PHON.ONSET voc ] ].

incredibly := adv_int_vp_post_le &
 [ STEM < "incredibly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_incredible_a_to_rel",
            PHON.ONSET voc ] ].

incredibly_deg := adv_degree_spec_le &
 [ STEM < "incredibly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_incredibly_x_deg_rel",
            PHON.ONSET voc ] ].

incredulity_n1 := n_mass_le &
 [ STEM < "incredulity" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_incredulity_n_1_rel",
            PHON.ONSET voc ] ].

incubate_v1 := v_np_trans_noger_le &
 [ STEM < "incubate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_incubate_v_cause_rel",
            PHON.ONSET voc ] ].

incubate_v2 := v_unacc_le &
 [ STEM < "incubate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_incubate_v_1_rel",
            PHON.ONSET voc ] ].

incur_v1 := v_np_trans_le &
 [ STEM < "incur" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_incur_v_1_rel",
            PHON.ONSET voc ] ].

indecisive_a1 := adj_intrans_le &
 [ STEM < "indecisive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_indecisive_a_1_rel",
            PHON.ONSET voc ] ].

indeed := adv_int_vp_aux_le &
 [ STEM < "indeed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_indeed_a_1_rel",
            PHON.ONSET voc ] ].

indeed_adv2 := adv_int_vp_post_le &
 [ STEM < "indeed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_indeed_a_1_rel",
            PHON.ONSET voc ] ].

indeed_root_pre := adv_s_pre_word_nospec_le &
 [ STEM < "indeed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_indeed_a_1_rel",
            PHON.ONSET voc ] ].

indefinite_a1 := adj_intrans_le &
 [ STEM < "indefinite" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_indefinite_a_1_rel",
            PHON.ONSET voc ] ].

indefinitely_isect := adv_int_vp_le &
 [ STEM < "indefinitely" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_indefinite_a_1_rel",
            PHON.ONSET voc ] ].

indent_v1 := v_np*_trans_le &
 [ STEM < "indent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_indent_v_1_rel",
            PHON.ONSET voc ] ].

indentation_n1 := n_mass_count_le &
 [ STEM < "indentation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_indentation_n_1_rel",
            PHON.ONSET voc ] ].

independence_n1 := n_mass_le &
 [ STEM < "independence" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_independence_n_1_rel",
            PHON.ONSET voc ] ].

independent_a1 := adj_trans_le &
 [ STEM < "independent" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_independent_a_of_rel" ],
            PHON.ONSET voc ] ].

independently_isect := adv_int_vp_le &
 [ STEM < "independently" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_independent_a_of_rel",
            PHON.ONSET voc ] ].

indeterminate_a1 := adj_intrans_le &
 [ STEM < "indeterminate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_indeterminate_a_1_rel",
            PHON.ONSET voc ] ].

index_n1 := n_intr_le &
 [ STEM < "index" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_index_n_1_rel",
            PHON.ONSET voc ] ].

index_v1 := v_np_trans_le &
 [ STEM < "index" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_index_v_1_rel",
            PHON.ONSET voc ] ].

india_n1 := n_proper_le &
 [ STEM < "india" >,
   SYNSEM [ LKEYS.KEYREL.CARG "india",
            PHON.ONSET voc ] ].

indian_a1 := adj_intrans_le &
 [ STEM < "indian" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_indian_a_1_rel",
            PHON.ONSET voc ] ].

indian_n1 := n_intr_le &
 [ STEM < "indian" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_indian_n_1_rel",
            PHON.ONSET voc ] ].

indian_n2 := n_proper_le &
 [ STEM < "indian" >,
   SYNSEM [ LKEYS.KEYREL.CARG "indian",
            PHON.ONSET voc ] ].

indiana_n1 := n_proper_le &
 [ STEM < "indiana" >,
   SYNSEM [ LKEYS.KEYREL.CARG "indiana",
            PHON.ONSET voc ] ].

indianapolis_n1 := n_proper_city_le &
 [ STEM < "indianapolis" >,
   SYNSEM [ LKEYS.KEYREL.CARG "indianapolis",
            PHON.ONSET voc ] ].

indicate_v1 := v_np_trans_le &
 [ STEM < "indicate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_indicate_v_1_rel",
            PHON.ONSET voc ] ].

indicate_v2 := v_pp_cp_fin_le &
 [ STEM < "indicate" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_indicate_v_1_rel" ],
            PHON.ONSET voc ] ].

indication_n1 := n_cpcomp_fin_le &
 [ STEM < "indication" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_indication_n_of_rel",
            PHON.ONSET voc ] ].

indicative_a1 := adj_intrans_le &
 [ STEM < "indicative" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_indicative_a_1_rel",
            PHON.ONSET voc ] ].

indicative_n1 := n_intr_le &
 [ STEM < "indicative" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_indicative_n_1_rel",
            PHON.ONSET voc ] ].

indicator_n1 := n_ppof_le &
 [ STEM < "indicator" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_indicator_n_of_rel",
            PHON.ONSET voc ] ].

indictment_n1 := n_mass_count_le &
 [ STEM < "indictment" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_indictment_n_1_rel",
            PHON.ONSET voc ] ].

indifferent_isect := adj_intrans_le &
 [ STEM < "indifferent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_indifferent_a_1_rel",
            PHON.ONSET voc ] ].

indifferently := adv_int_vp_le &
 [ STEM < "indifferently" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_indifferent_a_1_rel",
            PHON.ONSET voc ] ].

indignation_n1 := n_mass_le &
 [ STEM < "indignation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_indignation_n_1_rel",
            PHON.ONSET voc ] ].

indignity_n1 := n_mass_count_le &
 [ STEM < "indignity" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_indignity_n_1_rel",
            PHON.ONSET voc ] ].

indirect_a1 := adj_intrans_le &
 [ STEM < "indirect" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_indirect_a_1_rel",
            PHON.ONSET voc ] ].

indirection_n1 := n_mass_count_le &
 [ STEM < "indirection" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_indirection_n_1_rel",
            PHON.ONSET voc ] ].

indirectly_adv := adv_int_vp_le &
 [ STEM < "indirectly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_indirect_a_1_rel",
            PHON.ONSET voc ] ].

indiscreet_a1 := adj_intrans_le &
 [ STEM < "indiscreet" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_indiscreet_a_1_rel",
            PHON.ONSET voc ] ].

indiscreetly_adv1 := adv_int_vp_post_le &
 [ STEM < "indiscreetly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_indiscreet_a_1_rel",
            PHON.ONSET voc ] ].

indispensable_a1 := adj_intrans_le &
 [ STEM < "indispensable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_indispensable_a_1_rel",
            PHON.ONSET voc ] ].

indispensably := adv_int_vp_le &
 [ STEM < "indispensably" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_indispensable_a_1_rel",
            PHON.ONSET voc ] ].

indisputably_adv := adv_int_vp_le &
 [ STEM < "indisputably" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_indisputable_a_1_rel",
            PHON.ONSET voc ] ].

individual_a1 := adj_intrans_le &
 [ STEM < "individual" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_individual_a_1_rel",
            PHON.ONSET voc ] ].

individual_n1 := n_intr_le &
 [ STEM < "individual" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_individual_n_1_rel",
            PHON.ONSET voc ] ].

individuality_n1 := n_mass_le &
 [ STEM < "individuality" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_individuality_n_1_rel",
            PHON.ONSET con ] ].

individualize_v1 := v_np_trans_le &
 [ STEM < "individualize" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_individualize_v_1_rel",
            PHON.ONSET voc ] ].

individually := adv_int_vp_post_le &
 [ STEM < "individually" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_individual_a_1_rel",
            PHON.ONSET voc ] ].

indivisible_a1 := adj_intrans_le &
 [ STEM < "indivisible" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_indivisible_a_1_rel",
            PHON.ONSET voc ] ].

indonesia_n1 := n_proper_le &
 [ STEM < "indonesia" >,
   SYNSEM [ LKEYS.KEYREL.CARG "indonesia",
            PHON.ONSET voc ] ].

indonesian_a1 := adj_intrans_le &
 [ STEM < "indonesian" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_indonesian_a_1_rel",
            PHON.ONSET voc ] ].

indoor_a1 := adj_intrans_le &
 [ STEM < "indoor" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_indoor_a_1_rel",
            PHON.ONSET voc ] ].

indoors_nom := n_adv_pl_le &
 [ STEM < "indoors" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED _indoors_a_1_rel,
                    KEYREL.PRED place_n_rel ],
            PHON.ONSET voc ] ].

indorse_v1 := v_np_trans_le &
 [ STEM < "indorse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_indorse_v_1_rel",
            PHON.ONSET voc ] ].

induce_v1 := v_obj_equi_le &
 [ STEM < "induce" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_induce_v_1_rel",
            PHON.ONSET voc ] ].

induce_v2 := v_np_trans_le &
 [ STEM < "induce" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_induce_v_1_rel",
            PHON.ONSET voc ] ].

inducement_n1 := n_mass_count_le &
 [ STEM < "inducement" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_inducement_n_1_rel",
            PHON.ONSET voc ] ].

indulge_v1 := v_np*_trans_le &
 [ STEM < "indulge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_indulge_v_1_rel",
            PHON.ONSET voc ] ].

indulge_v2 := v_empty_prep_intrans_le &
 [ STEM < "indulge" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_indulge_v_in_rel" ],
            PHON.ONSET voc ] ].

industrial_a1 := adj_intrans_le &
 [ STEM < "industrial" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_industrial_a_1_rel",
            PHON.ONSET voc ] ].

industrial_strength_a1 := adj_intrans_le &
 [ STEM < "industrial", "strength" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_industrial+strength_a_1_rel",
            PHON.ONSET voc ] ].

industrial_strength_a2 := adj_intrans_le &
 [ STEM < "industrial-", "strength" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_industrial+strength_a_1_rel",
            PHON.ONSET voc ] ].

industrialize_v1 := v_np*_trans_le &
 [ STEM < "industrialize" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_industrialize_v_1_rel",
            PHON.ONSET voc ] ].

industrialized_a1 := adj_intrans_le &
 [ STEM < "industrialized" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_industrialized_a_1_rel",
            PHON.ONSET voc ] ].

industrious_a1 := adj_intrans_le &
 [ STEM < "industrious" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_industrious_a_1_rel",
            PHON.ONSET voc ] ].

industry_n1 := n_intr_le &
 [ STEM < "industry" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_industry_n_1_rel",
            PHON.ONSET voc ] ].

ineffective_isect := adj_intrans_le &
 [ STEM < "ineffective" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ineffective_a_1_rel",
            PHON.ONSET voc ] ].

ineffectively := adv_int_vp_le &
 [ STEM < "ineffectively" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ineffective_a_1_rel",
            PHON.ONSET voc ] ].

inefficiency_n1 := n_mass_le &
 [ STEM < "inefficiency" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_inefficiency_n_1_rel",
            PHON.ONSET voc ] ].

inefficient_a1 := adj_intrans_le &
 [ STEM < "inefficient" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_inefficient_a_1_rel",
            PHON.ONSET voc ] ].

inevitable_a1 := adj_intrans_le &
 [ STEM < "inevitable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_inevitable_a_1_rel",
            PHON.ONSET voc ] ].

inevitable_n1 := n_mass_le &
 [ STEM < "inevitable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_inevitable_n_1_rel",
            PHON.ONSET voc ] ].

inevitably_adv := adv_int_vp_le &
 [ STEM < "inevitably" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_inevitable_a_1_rel",
            PHON.ONSET voc ] ].

inexpensive_a1 := adj_intrans_le &
 [ STEM < "inexpensive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_inexpensive_a_1_rel",
            PHON.ONSET voc ] ].

inexpensively_a1 := adv_int_vp_le &
 [ STEM < "inexpensively" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_inexpensive_a_1_rel",
            PHON.ONSET voc ] ].

infallible_a1 := adj_intrans_le &
 [ STEM < "infallible" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_infallible_a_1_rel",
            PHON.ONSET voc ] ].

infancy_n1 := n_mass_le &
 [ STEM < "infancy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_infancy_n_1_rel",
            PHON.ONSET voc ] ].

infant_n1 := n_intr_le &
 [ STEM < "infant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_infant_n_1_rel",
            PHON.ONSET voc ] ].

infantry_n1 := n_intr_le &
 [ STEM < "infantry" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_infantry_n_1_rel",
            PHON.ONSET voc ] ].

infect_v1 := v_np*_trans_le &
 [ STEM < "infect" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_infect_v_1_rel",
            PHON.ONSET voc ] ].

infection_n1 := n_mass_count_le &
 [ STEM < "infection" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_infection_n_1_rel",
            PHON.ONSET voc ] ].

infer_v1 := v_cp_non_trans_le &
 [ STEM < "infer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_infer_v_1_rel",
            PHON.ONSET voc ] ].

infer_v2 := v_np_trans_le &
 [ STEM < "infer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_infer_v_1_rel",
            PHON.ONSET voc ] ].

inference_n1 := n_mass_count_le &
 [ STEM < "inference" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_inference_n_1_rel",
            PHON.ONSET voc ] ].

inferior_a1 := adj_intrans_le &
 [ STEM < "inferior" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_inferior_a_1_rel",
            PHON.ONSET voc ] ].

inferior_n1 := n_intr_le &
 [ STEM < "inferior" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_inferior_n_1_rel",
            PHON.ONSET con ] ].

inferiority_n1 := n_mass_le &
 [ STEM < "inferiority" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_inferiority_n_1_rel",
            PHON.ONSET voc ] ].

infinite_a1 := adj_intrans_le &
 [ STEM < "infinite" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_infinite_a_1_rel",
            PHON.ONSET voc ] ].

infinitival_a1 := adj_intrans_le &
 [ STEM < "infinitival" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_infinitival_a_1_rel",
            PHON.ONSET voc ] ].

infinitive_n1 := n_intr_le &
 [ STEM < "infinitive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_infinitive_n_1_rel",
            PHON.ONSET voc ] ].

infix_n1 := n_intr_le &
 [ STEM < "infix" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_infix_n_1_rel",
            PHON.ONSET voc ] ].

infix_v1 := v_np_trans_le &
 [ STEM < "infix" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_infix_v_1_rel",
            PHON.ONSET voc ] ].

inflame_v1 := v_np_trans_le &
 [ STEM < "inflame" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_inflame_v_1_rel",
            PHON.ONSET voc ] ].

inflammation_n1 := n_mass_count_le &
 [ STEM < "inflammation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_inflammation_n_1_rel",
            PHON.ONSET voc ] ].

inflate_v1 := v_np_trans_noger_le &
 [ STEM < "inflate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_inflate_v_cause_rel",
            PHON.ONSET voc ] ].

inflate_v2 := v_unacc_le &
 [ STEM < "inflate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_inflate_v_1_rel",
            PHON.ONSET voc ] ].

inflection_n1 := n_mass_count_le &
 [ STEM < "inflection" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_inflection_n_1_rel",
            PHON.ONSET voc ] ].

inflexibility_n1 := n_mass_le &
 [ STEM < "inflexibility" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_inflexibility_n_1_rel",
            PHON.ONSET voc ] ].

inflexible_a1 := adj_intrans_le &
 [ STEM < "inflexible" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_inflexible_a_1_rel",
            PHON.ONSET voc ] ].

inflict_v1 := v_empty_prep*_trans_le &
 [ STEM < "inflict" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_inflict_v_on_rel" ],
            PHON.ONSET voc ] ].

influence_n1 := n_mass_count_le &
 [ STEM < "influence" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_influence_n_1_rel",
            PHON.ONSET voc ] ].

influence_v1 := v_np_trans_le &
 [ STEM < "influence" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_influence_v_1_rel",
            PHON.ONSET voc ] ].

influence_v2 := v_cp_ques_fin_inf_non_trans_le &
 [ STEM < "influence" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_influence_v_1_rel",
            PHON.ONSET voc ] ].

influence_v3 := v_obj_equi_le &
 [ STEM < "influence" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_influence_v_1_rel",
            PHON.ONSET voc ] ].

influx_n1 := n_intr_le &
 [ STEM < "influx" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_influx_n_1_rel",
            PHON.ONSET voc ] ].

info_n1 := n_mass_ppcomp_le &
 [ STEM < "info" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_info_n_on_rel" ],
            PHON.ONSET voc ] ].

info_n2 := n_mass_ppcomp_le &
 [ STEM < "info." >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_info_n_on_rel" ],
            PHON.ONSET voc ] ].

infold_v1 := v_np*_trans_le &
 [ STEM < "infold" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_infold_v_1_rel",
            PHON.ONSET voc ] ].

inform_on_v1 := v_empty_prep_intrans_le &
 [ STEM < "inform" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_inform_v_on_rel" ],
            PHON.ONSET voc ] ].

inform_v1 := v_np_trans_cp_le &
 [ STEM < "inform" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_inform_v_1_rel",
            PHON.ONSET voc ] ].

inform_v2 := v_np*_trans_le &
 [ STEM < "inform" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_inform_v_1_rel",
            PHON.ONSET voc ] ].

inform_v3 := v_empty_prep_trans_le &
 [ STEM < "inform" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_inform_v_of_rel" ],
            PHON.ONSET voc ] ].

inform_v4 := v_empty_prep_trans_le &
 [ STEM < "inform" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _about_p_sel_rel,
                    KEYREL.PRED "_inform_v_about_rel" ],
            PHON.ONSET voc ] ].

inform_v5 := v_obj_equi_le &
 [ STEM < "inform" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_inform_v_1_rel",
            PHON.ONSET voc ] ].

informal_a1 := adj_intrans_le &
 [ STEM < "informal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_informal_a_1_rel",
            PHON.ONSET voc ] ].

informally := adv_int_vp_le &
 [ STEM < "informally" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_informal_a_1_rel",
            PHON.ONSET voc ] ].

information_n1 := n_mass_ppcomp_le &
 [ STEM < "information" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_information_n_on-about_rel" ],
            PHON.ONSET voc ] ].

information_n2 := n_mass_ppcomp_oblig_le &
 [ STEM < "information" >,
   SYNSEM [ LKEYS [ --COMPKEY _about_p_sel_rel,
                    KEYREL.PRED "_information_n_on-about_rel" ],
            PHON.ONSET voc ] ].

informative_isect := adj_intrans_le &
 [ STEM < "informative" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_informative_a_1_rel",
            PHON.ONSET voc ] ].

informatively_isect := adv_int_vp_le &
 [ STEM < "informatively" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_informative_a_1_rel",
            PHON.ONSET voc ] ].

informed_a1 := adj_attr_intrans_le &
 [ STEM < "informed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_informed_a_1_rel",
            PHON.ONSET voc ] ].

infrastructure_n1 := n_intr_le &
 [ STEM < "infrastructure" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_infrastructure_n_1_rel",
            PHON.ONSET voc ] ].

infrequently_sa := adv_int_vp_le &
 [ STEM < "infrequently" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_infrequent_a_1_rel",
            PHON.ONSET voc ] ].

infuse_v1 := v_np_trans_le &
 [ STEM < "infuse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_infuse_v_1_rel",
            PHON.ONSET voc ] ].

inger_n1 := n_proper_le &
 [ STEM < "inger" >,
   SYNSEM [ LKEYS.KEYREL.CARG "inger",
            PHON.ONSET voc ] ].

ingjerdbu_n1 := n_proper_le &
 [ STEM < "ingjerdbu" >,
   SYNSEM [ LKEYS.KEYREL.CARG "ingjerdbu",
            PHON.ONSET voc ] ].

ingmar_n1 := n_proper_le &
 [ STEM < "ingmar" >,
   SYNSEM [ LKEYS.KEYREL.CARG "ingmar",
            PHON.ONSET voc ] ].

ingredient_n1 := n_intr_le &
 [ STEM < "ingredient" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ingredient_n_1_rel",
            PHON.ONSET voc ] ].

ingrid_n1 := n_proper_le &
 [ STEM < "ingrid" >,
   SYNSEM [ LKEYS.KEYREL.CARG "ingrid",
            PHON.ONSET voc ] ].

inhabit_v1 := v_np_trans_le &
 [ STEM < "inhabit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_inhabit_v_1_rel",
            PHON.ONSET voc ] ].

inhabitancy_n1 := n_mass_le &
 [ STEM < "inhabitancy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_inhabitancy_n_1_rel",
            PHON.ONSET voc ] ].

inhabitant_n1 := n_ppof_le &
 [ STEM < "inhabitant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_inhabitant_n_of_rel",
            PHON.ONSET voc ] ].

inhalation_n1 := n_mass_count_le &
 [ STEM < "inhalation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_inhalation_n_1_rel",
            PHON.ONSET voc ] ].

inhale_v1 := v_np*_trans_le &
 [ STEM < "inhale" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_inhale_v_1_rel",
            PHON.ONSET voc ] ].

inharmonious_a1 := adj_intrans_le &
 [ STEM < "inharmonious" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_inharmonious_a_1_rel",
            PHON.ONSET voc ] ].

inhere_v1 := v_empty_prep_intrans_le &
 [ STEM < "inhere" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_inhere_v_in_rel" ],
            PHON.ONSET voc ] ].

inhere_v2 := v_unerg_le &
 [ STEM < "inhere" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_inhere_v_1_rel",
            PHON.ONSET voc ] ].

inherent_a1 := adj_intrans_le &
 [ STEM < "inherent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_inherent_a_1_rel",
            PHON.ONSET voc ] ].

inherit_v1 := v_np_trans_le &
 [ STEM < "inherit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_inherit_v_1_rel",
            PHON.ONSET voc ] ].

inhibit_v1 := v_np_trans_le &
 [ STEM < "inhibit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_inhibit_v_1_rel",
            PHON.ONSET voc ] ].

inhibit_v2 := v_obj_equi_from_le &
 [ STEM < "inhibit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_inhibit_v_from_rel",
            PHON.ONSET voc ] ].

initial_a1 := adj_intrans_le &
 [ STEM < "initial" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_initial_a_1_rel",
            PHON.ONSET voc ] ].

initial_n1 := n_intr_le &
 [ STEM < "initial" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_initial_n_1_rel",
            PHON.ONSET voc ] ].

initial_v1 := v_np_trans_le &
 [ STEM < "initial" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_initial_v_1_rel",
            PHON.ONSET voc ] ].

initially_adv := adv_int_vp_le &
 [ STEM < "initially" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_initial_a_1_rel",
            PHON.ONSET voc ] ].

initiate_n1 := n_intr_le &
 [ STEM < "initiate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_initiate_n_1_rel",
            PHON.ONSET voc ] ].

initiate_v1 := v_empty_prep*_trans_le &
 [ STEM < "initiate" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _into_p_sel_rel,
                    KEYREL.PRED "_initiate_v_into_rel" ],
            PHON.ONSET voc ] ].

initiative_n1 := n_mass_count_le &
 [ STEM < "initiative" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_initiative_n_1_rel",
            PHON.ONSET voc ] ].

inject_v1 := v_empty_prep*_trans_le &
 [ STEM < "inject" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _into_p_sel_rel,
                    KEYREL.PRED "_inject_v_into_rel" ],
            PHON.ONSET voc ] ].

injure_v1 := v_np_trans_le &
 [ STEM < "injure" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_injure_v_1_rel",
            PHON.ONSET voc ] ].

injury_n1 := n_mass_count_le &
 [ STEM < "injury" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_injury_n_1_rel",
            PHON.ONSET voc ] ].

injustice_n1 := n_mass_count_le &
 [ STEM < "injustice" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_injustice_n_1_rel",
            PHON.ONSET voc ] ].

inkjet_n1 := n_intr_le &
 [ STEM < "inkjet" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_inkjet_n_1_rel",
            PHON.ONSET voc ] ].

inland_a1 := adj_attr_intrans_le &
 [ STEM < "inland" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_inland_a_1_rel",
            PHON.ONSET voc ] ].

inland_nom := n_adv_event_le &
 [ STEM < "inland" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED _inland_a_1_rel,
                    KEYREL.PRED place_n_rel ],
            PHON.ONSET voc ] ].

inlet_n1 := n_intr_le &
 [ STEM < "inlet" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_inlet_n_1_rel",
            PHON.ONSET voc ] ].

inn_n1 := n_intr_le &
 [ STEM < "inn" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_inn_n_1_rel",
            PHON.ONSET voc ] ].

innate_a1 := adj_intrans_le &
 [ STEM < "innate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_innate_a_1_rel",
            PHON.ONSET voc ] ].

inner_a1 := adj_attr_intrans_le &
 [ STEM < "inner" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_inner_a_1_rel",
            PHON.ONSET voc ] ].

innermost_a1 := adj_intrans_le &
 [ STEM < "innermost" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_innermost_a_1_rel",
            PHON.ONSET voc ] ].

innocent_a1 := adj_intrans_le &
 [ STEM < "innocent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_innocent_a_1_rel",
            PHON.ONSET voc ] ].

innumerable_a1 := adj_intrans_le &
 [ STEM < "innumerable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_innumerable_a_1_rel",
            PHON.ONSET voc ] ].

inoco_n1 := n_proper_le &
 [ STEM < "inoco" >,
   SYNSEM [ LKEYS.KEYREL.CARG "inoco",
            PHON.ONSET voc ] ].

inoculate_v1 := v_np_trans_le &
 [ STEM < "inoculate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_inoculate_v_1_rel",
            PHON.ONSET voc ] ].

inoculate_v2 := v_np*_prep_trans_le &
 [ STEM < "inoculate" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _against_p_rel,
                    KEYREL.PRED "_inoculate_v_1_rel" ],
            PHON.ONSET voc ] ].

inodorous_a1 := adj_intrans_le &
 [ STEM < "inodorous" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_inodorous_a_1_rel",
            PHON.ONSET voc ] ].

inopportune_isect := adj_intrans_le &
 [ STEM < "inopportune" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_inopportune_a_1_rel",
            PHON.ONSET voc ] ].

inopportunely := adv_int_vp_le &
 [ STEM < "inopportunely" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_inopportune_a_1_rel",
            PHON.ONSET voc ] ].

inorganic_a1 := adj_intrans_le &
 [ STEM < "inorganic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_inorganic_a_1_rel",
            PHON.ONSET voc ] ].

input_n1 := n_intr_le &
 [ STEM < "input" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_input_n_to_rel",
            PHON.ONSET voc ] ].

input_n2 := n_mass_count_ppto_le &
 [ STEM < "input" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_input_n_to_rel",
            PHON.ONSET voc ] ].

input_v1 := v_np_trans_le &
 [ STEM < "input" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_input_v_1_rel",
            PHON.ONSET voc ] ].

input_v2 := v_np_prep_trans_le &
 [ STEM < "input" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _to_p_rel,
                    KEYREL.PRED "_input_v_1_rel" ],
            PHON.ONSET voc ] ].

inquire_v1 := v_empty_prep_intrans_le &
 [ STEM < "inquire" >,
   SYNSEM [ LKEYS [ --COMPKEY _about_p_sel_rel,
                    KEYREL.PRED "_inquire_v_about_rel" ],
            PHON.ONSET voc ] ].

inquire_v2 := v_prep_intrans_le &
 [ STEM < "inquire" >,
   SYNSEM [ LKEYS [ --COMPKEY _as+to_p_rel,
                    KEYREL.PRED "_inquire_v_1_rel" ],
            PHON.ONSET voc ] ].

inquire_v3 := v_unerg_le &
 [ STEM < "inquire" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_inquire_v_1_rel",
            PHON.ONSET voc ] ].

inquire_v4 := v_cp_non_trans_le &
 [ STEM < "inquire" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_inquire_v_1_rel",
            PHON.ONSET voc ] ].

inquiry_n1 := n_intr_le &
 [ STEM < "inquiry" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_inquiry_n_1_rel",
            PHON.ONSET voc ] ].

insane_a1 := adj_intrans_le &
 [ STEM < "insane" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_insane_a_1_rel",
            PHON.ONSET voc ] ].

insanity_n1 := n_mass_le &
 [ STEM < "insanity" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_insanity_n_1_rel",
            PHON.ONSET voc ] ].

inscribe_v1 := v_np_trans_le &
 [ STEM < "inscribe" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_inscribe_v_1_rel",
            PHON.ONSET voc ] ].

inscription_n1 := n_mass_count_le &
 [ STEM < "inscription" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_inscription_n_1_rel",
            PHON.ONSET voc ] ].

insect_n1 := n_intr_le &
 [ STEM < "insect" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_insect_n_1_rel",
            PHON.ONSET voc ] ].

insectivora_n1 := n_plur_le &
 [ STEM < "insectivora" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_insectivora_n_1_rel",
            PHON.ONSET voc ] ].

insemination_n1 := n_mass_count_le &
 [ STEM < "insemination" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_insemination_n_1_rel",
            PHON.ONSET voc ] ].

insensibility_n1 := n_mass_le &
 [ STEM < "insensibility" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_insensibility_n_1_rel",
            PHON.ONSET voc ] ].

inseparable_a1 := adj_intrans_le &
 [ STEM < "inseparable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_inseparable_a_1_rel",
            PHON.ONSET voc ] ].

insert_v1 := v_empty_prep*_trans_le &
 [ STEM < "insert" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _into_p_sel_rel,
                    KEYREL.PRED "_insert_v_into_rel" ],
            PHON.ONSET voc ] ].

insertion_n1 := n_mass_count_ppof_le &
 [ STEM < "insertion" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_insertion_n_of_rel",
            PHON.ONSET voc ] ].

inside := p_reg_le &
 [ STEM < "inside" >,
   SYNSEM [ LKEYS.KEYREL.PRED _inside_p_rel,
            PHON.ONSET voc ] ].

inside_a1 := adj_intrans_le &
 [ STEM < "inside" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_inside_a_1_rel",
            PHON.ONSET voc ] ].

inside_adv1 := n_adv_pl_le &
 [ STEM < "inside" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED _inside_p_rel,
                    KEYREL.PRED place_n_rel ],
            PHON.ONSET voc ] ].

inside_n1 := n_ppof_le &
 [ STEM < "inside" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_inside_n_of_rel",
            PHON.ONSET voc ] ].

insidious_a1 := adj_intrans_le &
 [ STEM < "insidious" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_insidious_a_1_rel",
            PHON.ONSET voc ] ].

insignificant_a1 := adj_intrans_le &
 [ STEM < "insignificant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_insignificant_a_1_rel",
            PHON.ONSET voc ] ].

insignificantly := adv_int_vp_le &
 [ STEM < "insignificantly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_insignificant_a_1_rel",
            PHON.ONSET voc ] ].

insinuate_v1 := v_np_trans_le &
 [ STEM < "insinuate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_insinuate_v_1_rel",
            PHON.ONSET voc ] ].

insinuate_v2 := v_cp_non_trans_le &
 [ STEM < "insinuate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_insinuate_v_1_rel",
            PHON.ONSET voc ] ].

insinuation_n1 := n_mass_count_le &
 [ STEM < "insinuation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_insinuation_n_1_rel",
            PHON.ONSET voc ] ].

insipid_a1 := adj_intrans_le &
 [ STEM < "insipid" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_insipid_a_1_rel",
            PHON.ONSET voc ] ].

insist_v1 := v_cp_prop*_non_trans_le &
 [ STEM < "insist" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_insist_v_1_rel",
            PHON.ONSET voc ] ].

insist_v2 := v_empty_prep_intrans_le &
 [ STEM < "insist" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_insist_v_on_rel" ],
            PHON.ONSET voc ] ].

insist_v3 := v_cp_subj_le &
 [ STEM < "insist" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_insist_v_1_rel",
            PHON.ONSET voc ] ].

insist_v4 := v_unerg_le &
 [ STEM < "insist" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_insist_v_1_rel",
            PHON.ONSET voc ] ].

insoluble_a1 := adj_intrans_le &
 [ STEM < "insoluble" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_insoluble_a_1_rel",
            PHON.ONSET voc ] ].

inspect_v1 := v_np_trans_le &
 [ STEM < "inspect" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_inspect_v_1_rel",
            PHON.ONSET voc ] ].

inspection_n1 := n_ppof_le &
 [ STEM < "inspection" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_inspection_n_of_rel",
            PHON.ONSET voc ] ].

inspectorate_n1 := n_intr_le &
 [ STEM < "inspectorate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_inspectorate_n_1_rel",
            PHON.ONSET voc ] ].

inspiration_n1 := n_mass_count_ppof_le &
 [ STEM < "inspiration" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_inspiration_n_of_rel",
            PHON.ONSET voc ] ].

inspire_v1 := v_np_trans_le &
 [ STEM < "inspire" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_inspire_v_1_rel",
            PHON.ONSET voc ] ].

inspire_v2 := v_expl_it_subj_np_cp_le &
 [ STEM < "inspire" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_inspire_v_1_rel",
            PHON.ONSET voc ] ].

inspire_v3 := v_obj_equi_le &
 [ STEM < "inspire" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_inspire_v_1_rel",
            PHON.ONSET voc ] ].

inspired_a1 := adj_intrans_le &
 [ STEM < "inspired" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_inspired_a_1_rel",
            PHON.ONSET voc ] ].

install_n1 := n_ppof_le &
 [ STEM < "install" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_install_n_of_rel",
            PHON.ONSET voc ] ].

install_v1 := v_np_trans_le &
 [ STEM < "install" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_install_v_1_rel",
            PHON.ONSET voc ] ].

install_v2 := v_np_prep_trans_dors_le &
 [ STEM < "install" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_install_v_1_rel",
            PHON.ONSET voc ] ].

installation_n1 := n_mass_count_ppof_le &
 [ STEM < "installation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_installation_n_of_rel",
            PHON.ONSET voc ] ].

instance_n1 := n_ppof_le &
 [ STEM < "instance" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_instance_n_of_rel",
            PHON.ONSET voc ] ].

instant_a1 := adj_intrans_le &
 [ STEM < "instant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_instant_a_1_rel",
            PHON.ONSET voc ] ].

instantaneous_a1 := adj_intrans_le &
 [ STEM < "instantaneous" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_instantaneous_a_1_rel",
            PHON.ONSET voc ] ].

instantly := adv_int_vp_le &
 [ STEM < "instantly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_instant_a_1_rel",
            PHON.ONSET voc ] ].

instate_a1 := adj_intrans_le &
 [ STEM < "instate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_instate_a_1_rel",
            PHON.ONSET voc ] ].

instate_v1 := v_np_trans_le &
 [ STEM < "instate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_instate_v_1_rel",
            PHON.ONSET voc ] ].

instead_adv1 := pp_le &
 [ STEM < "instead" >,
   SYNSEM [ LKEYS.KEYREL.PRED _instead_p_rel,
            PHON.ONSET voc ] ].

instead_adv2 := adv_int_vp_aux_le &
 [ STEM < "instead" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_instead_a_1_rel",
            PHON.ONSET voc ] ].

instead_of := conj_complex_instead_le &
 [ STEM < "instead", "of" >,
   SYNSEM.PHON.ONSET voc ].

instead_of_p := p_le &
 [ STEM < "instead", "of" >,
   SYNSEM [ LKEYS.KEYREL.PRED _instead+of_p_rel,
            PHON.ONSET voc ] ].

instep_n1 := n_intr_le &
 [ STEM < "instep" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_instep_n_1_rel",
            PHON.ONSET voc ] ].

instigate_v1 := v_np_trans_le &
 [ STEM < "instigate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_instigate_v_1_rel",
            PHON.ONSET voc ] ].

instigator_n1 := n_intr_le &
 [ STEM < "instigator" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_instigator_n_1_rel",
            PHON.ONSET voc ] ].

instinct_n1 := n_intr_le &
 [ STEM < "instinct" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_instinct_n_1_rel",
            PHON.ONSET voc ] ].

institute_n1 := n_intr_le &
 [ STEM < "institute" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_institute_n_1_rel",
            PHON.ONSET voc ] ].

institute_post_ttl := n_post_title_le &
 [ STEM < "institute" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_institute_n_1_rel",
            PHON.ONSET voc ] ].

institute_v1 := v_np_trans_le &
 [ STEM < "institute" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_institute_v_1_rel",
            PHON.ONSET voc ] ].

institution_n1 := n_intr_le &
 [ STEM < "institution" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_institution_n_1_rel",
            PHON.ONSET voc ] ].

institutionalize_v1 := v_np_trans_le &
 [ STEM < "institutionalize" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_institutionalize_v_1_rel",
            PHON.ONSET voc ] ].

instruct_v1 := v_obj_equi_le &
 [ STEM < "instruct" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_instruct_v_on_rel",
            PHON.ONSET voc ] ].

instruct_v2 := v_empty_prep*_trans_le &
 [ STEM < "instruct" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_instruct_v_on_rel" ],
            PHON.ONSET voc ] ].

instruction_n1 := n_ppof_le &
 [ STEM < "instruction" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_instruction_n_of_rel",
            PHON.ONSET voc ] ].

instructor_n1 := n_intr_le &
 [ STEM < "instructor" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_instructor_n_1_rel",
            PHON.ONSET voc ] ].

instrument_n1 := n_ppof_le &
 [ STEM < "instrument" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_instrument_n_of_rel",
            PHON.ONSET voc ] ].

instrumental_a1 := adj_intrans_le &
 [ STEM < "instrumental" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_instrumental_a_1_rel",
            PHON.ONSET voc ] ].

instrumentality_n1 := n_mass_count_le &
 [ STEM < "instrumentality" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_instrumentality_n_1_rel",
            PHON.ONSET voc ] ].

instrumentation_n1 := n_intr_le &
 [ STEM < "instrumentation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_instrumentation_n_1_rel",
            PHON.ONSET voc ] ].

insubstantial_a1 := adj_intrans_le &
 [ STEM < "insubstantial" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_insubstantial_a_1_rel",
            PHON.ONSET voc ] ].

insufficient_a1 := adj_intrans_le &
 [ STEM < "insufficient" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_insufficient_a_1_rel",
            PHON.ONSET voc ] ].

insufficiently := adv_int_vp_le &
 [ STEM < "insufficiently" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_insufficient_a_1_rel",
            PHON.ONSET voc ] ].

insulate_v1 := v_np_trans_le &
 [ STEM < "insulate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_insulate_v_1_rel",
            PHON.ONSET voc ] ].

insulation_n1 := n_mass_le &
 [ STEM < "insulation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_insulation_n_1_rel",
            PHON.ONSET voc ] ].

insult_n1 := n_intr_le &
 [ STEM < "insult" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_insult_n_1_rel",
            PHON.ONSET voc ] ].

insult_v1 := v_np_trans_le &
 [ STEM < "insult" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_insult_v_1_rel",
            PHON.ONSET voc ] ].

insurance_n1 := n_mass_le &
 [ STEM < "insurance" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_insurance_n_1_rel",
            PHON.ONSET voc ] ].

insure_v1 := v_empty_prep*_trans_le &
 [ STEM < "insure" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_insure_v_for_rel" ],
            PHON.ONSET voc ] ].

insure_v2 := v_cp_non_trans_le &
 [ STEM < "insure" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_insure_v_1_rel",
            PHON.ONSET voc ] ].

insure_v3 := v_empty_prep_intrans_le &
 [ STEM < "insure" >,
   SYNSEM [ LKEYS [ --COMPKEY _against_p_sel_rel,
                    KEYREL.PRED "_insure_v_against_rel" ],
            PHON.ONSET voc ] ].

insurmountable_a1 := adj_intrans_le &
 [ STEM < "insurmountable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_insurmountable_a_1_rel",
            PHON.ONSET voc ] ].

insurrection_n1 := n_mass_count_le &
 [ STEM < "insurrection" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_insurrection_n_1_rel",
            PHON.ONSET voc ] ].

intake_n1 := n_mass_count_le &
 [ STEM < "intake" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_intake_n_1_rel",
            PHON.ONSET voc ] ].

integer_n1 := n_intr_le &
 [ STEM < "integer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_integer_n_1_rel",
            PHON.ONSET voc ] ].

integrate_v1 := v_empty_prep*_trans_le &
 [ STEM < "integrate" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _into_p_sel_rel,
                    KEYREL.PRED "_integrate_v_into_rel" ],
            PHON.ONSET voc ] ].

integrate_v2 := v_unerg_le &
 [ STEM < "integrate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_integrate_v_into_rel",
            PHON.ONSET voc ] ].

integrated_a1 := adj_attr_intrans_le &
 [ STEM < "integrated" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_integrated_a_1_rel",
            PHON.ONSET voc ] ].

integrity_n1 := n_mass_count_le &
 [ STEM < "integrity" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_integrity_n_1_rel",
            PHON.ONSET voc ] ].

intel_n1 := n_proper_le &
 [ STEM < "intel" >,
   SYNSEM [ LKEYS.KEYREL.CARG "intel",
            PHON.ONSET voc ] ].

intellect_n1 := n_mass_count_le &
 [ STEM < "intellect" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_intellect_n_1_rel",
            PHON.ONSET voc ] ].

intellectual_a1 := adj_intrans_le &
 [ STEM < "intellectual" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_intellectual_a_1_rel",
            PHON.ONSET voc ] ].

intellectual_n1 := n_intr_le &
 [ STEM < "intellectual" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_intellectual_n_1_rel",
            PHON.ONSET voc ] ].

intelligence_n1 := n_mass_count_le &
 [ STEM < "intelligence" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_intelligence_n_1_rel",
            PHON.ONSET voc ] ].

intelligent_isect := adj_intrans_le &
 [ STEM < "intelligent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_intelligent_a_1_rel",
            PHON.ONSET voc ] ].

intelligently := adv_int_vp_le &
 [ STEM < "intelligently" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_intelligent_a_1_rel",
            PHON.ONSET voc ] ].

intemperance_n1 := n_mass_le &
 [ STEM < "intemperance" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_intemperance_n_1_rel",
            PHON.ONSET voc ] ].

intend_for_v1 := v_empty_prep_trans_le &
 [ STEM < "intend" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_intend_v_for_rel" ],
            PHON.ONSET voc ] ].

intend_for_v2 := v_sor_pp_inf_le &
 [ STEM < "intend" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_intend_v_for_rel" ],
            PHON.ONSET voc ] ].

intend_v1 := v_subj_equi_le &
 [ STEM < "intend" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_intend_v_for_rel",
            PHON.ONSET voc ] ].

intend_v2 := v_sor_non_trans_le &
 [ STEM < "intend" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_intend_v_for_rel",
            PHON.ONSET voc ] ].

intense_a1 := adj_intrans_le &
 [ STEM < "intense" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_intense_a_1_rel",
            PHON.ONSET voc ] ].

intensely_adv1 := adv_int_vp_le &
 [ STEM < "intensely" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_intense_a_1_rel",
            PHON.ONSET voc ] ].

intensely_deg := adv_degree_spec_v_le &
 [ STEM < "intensely" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_intensely_x_rel",
            PHON.ONSET voc ] ].

intensified_isect := adj_intrans_le &
 [ STEM < "intensified" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_intensified_a_1_rel",
            PHON.ONSET voc ] ].

intensify_v1 := v_np_trans_noger_le &
 [ STEM < "intensify" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_intensify_v_cause_rel",
            PHON.ONSET voc ] ].

intensify_v2 := v_unacc_le &
 [ STEM < "intensify" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_intensify_v_1_rel",
            PHON.ONSET voc ] ].

intensity_n1 := n_mass_count_le &
 [ STEM < "intensity" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_intensity_n_1_rel",
            PHON.ONSET voc ] ].

intensive_a1 := adj_intrans_le &
 [ STEM < "intensive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_intensive_a_1_rel",
            PHON.ONSET voc ] ].

intensively := adv_int_vp_le &
 [ STEM < "intensively" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_intensive_a_1_rel",
            PHON.ONSET voc ] ].

intent_a1 := adj_trans_le &
 [ STEM < "intent" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_intent_a_on_rel" ],
            PHON.ONSET voc ] ].

intent_n1 := n_mass_count_nosort_le &
 [ STEM < "intent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_intent_n_1_rel",
            PHON.ONSET voc ] ].

intention_n1 := n_intr_le &
 [ STEM < "intention" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_intention_n_1_rel",
            PHON.ONSET voc ] ].

inter_v1 := v_np_trans_le &
 [ STEM < "inter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_inter_v_1_rel",
            PHON.ONSET voc ] ].

interact_n1 := n_proper_le &
 [ STEM < "interact" >,
   SYNSEM [ LKEYS.KEYREL.CARG "interact",
            PHON.ONSET voc ] ].

interact_v1 := v_empty_prep_intrans_le &
 [ STEM < "interact" >,
   SYNSEM [ LKEYS [ --COMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_interact_v_with_rel" ],
            PHON.ONSET voc ] ].

interact_v2 := v_unerg_le &
 [ STEM < "interact" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_interact_v_1_rel",
            PHON.ONSET voc ] ].

intercept_n1 := n_intr_le &
 [ STEM < "intercept" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_intercept_n_1_rel",
            PHON.ONSET voc ] ].

intercept_v1 := v_np_trans_le &
 [ STEM < "intercept" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_intercept_v_1_rel",
            PHON.ONSET voc ] ].

interchangeable_a1 := adj_intrans_le &
 [ STEM < "interchangeable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_interchangeable_a_1_rel",
            PHON.ONSET voc ] ].

interchangeably_adv := adv_int_vp_le &
 [ STEM < "interchangeably" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_interchangeable_a_1_rel",
            PHON.ONSET voc ] ].

intercity_n1 := n_intr_named_le &
 [ STEM < "intercity" >,
   SYNSEM [ LKEYS.KEYREL.CARG "intercity",
            PHON.ONSET voc ] ].

intercity_n2 := n_intr_le &
 [ STEM < "intercity" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_intercity_n_1_rel",
            PHON.ONSET voc ] ].

interconnected_a1 := adj_intrans_le &
 [ STEM < "interconnected" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_interconnected_a_1_rel",
            PHON.ONSET voc ] ].

intercourse_n1 := n_mass_le &
 [ STEM < "intercourse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_intercourse_n_1_rel",
            PHON.ONSET voc ] ].

interest_in_v1 := v_empty_prep_non_trans_le &
 [ STEM < "interest" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_interest_v_1_rel" ],
            PHON.ONSET voc ] ].

interest_n1 := n_mass_count_ppin_le &
 [ STEM < "interest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_interest_n_in_rel",
            PHON.ONSET voc ] ].

interest_v1 := v_np_non_trans_le &
 [ STEM < "interest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_interest_v_1_rel",
            PHON.ONSET voc ] ].

interest_v2 := v_expl_it_subj_np_cp_le &
 [ STEM < "interest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_interest_v_1_rel",
            PHON.ONSET voc ] ].

interested_a1 := adj_trans_oblig_le &
 [ STEM < "interested" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_interested_a_in_rel" ],
            PHON.ONSET voc ] ].

interested_a2 := adj_intrans_le &
 [ STEM < "interested" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_interested_a_in_rel",
            PHON.ONSET voc ] ].

interested_a3 := adj_reg_equi_le &
 [ STEM < "interested" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_interested_a_in_rel",
            PHON.ONSET voc ] ].

interesting_a1 := adj_trans_le &
 [ STEM < "interesting" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_interesting_a_for_rel" ],
            PHON.ONSET voc ] ].

interesting_a2 := adj_reg_atrans_le &
 [ STEM < "interesting" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_interesting_a_for_rel",
            PHON.ONSET voc ] ].

interesting_a3 := adj_reg_atrans_cp_le &
 [ STEM < "interesting" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_interesting_a_for_rel",
            PHON.ONSET voc ] ].

interesting_a4 := adj_tough_atrans_le &
 [ STEM < "interesting" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_interesting_a_for_rel",
            PHON.ONSET voc ] ].

interestingly := adv_int_vp_le &
 [ STEM < "interestingly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_interesting_a_for_rel",
            PHON.ONSET voc ] ].

interestingly_adv2 := adv_s_pre_word_root_le &
 [ STEM < "interestingly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_interesting_a_1_rel",
            PHON.ONSET voc ] ].

interface_n1 := n_intr_le &
 [ STEM < "interface" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_interface_n_1_rel",
            PHON.ONSET voc ] ].

interface_v1 := v_empty_prep_trans*_le &
 [ STEM < "interface" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_interface_v_with_rel" ],
            PHON.ONSET voc ] ].

interfere_in_v1 := v_empty_prep_intrans_le &
 [ STEM < "interfere" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_interfere_v_in_rel" ],
            PHON.ONSET voc ] ].

interfere_v1 := v_unerg_le &
 [ STEM < "interfere" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_interfere_v_1_rel",
            PHON.ONSET voc ] ].

interfere_with_v1 := v_empty_prep_intrans_le &
 [ STEM < "interfere" >,
   SYNSEM [ LKEYS [ --COMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_interfere_v_with_rel" ],
            PHON.ONSET voc ] ].

interference_n1 := n_mass_le &
 [ STEM < "interference" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_interference_n_1_rel",
            PHON.ONSET voc ] ].

intergovernmental_a1 := adj_intrans_le &
 [ STEM < "intergovernmental" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_intergovernmental_a_1_rel",
            PHON.ONSET voc ] ].

interior_a1 := adj_trans_le &
 [ STEM < "interior" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_interior_a_to_rel" ],
            PHON.ONSET voc ] ].

interior_n1 := n_intr_le &
 [ STEM < "interior" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_interior_n_1_rel",
            PHON.ONSET voc ] ].

interlock_v1 := v_np_trans_noger_le &
 [ STEM < "interlock" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_interlock_v_cause_rel",
            PHON.ONSET voc ] ].

interlock_v2 := v_unacc_le &
 [ STEM < "interlock" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_interlock_v_1_rel",
            PHON.ONSET voc ] ].

intermediate_a1 := adj_intrans_le &
 [ STEM < "intermediate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_intermediate_a_1_rel",
            PHON.ONSET voc ] ].

intermission_n1 := n_mass_count_le &
 [ STEM < "intermission" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_intermission_n_1_rel",
            PHON.ONSET voc ] ].

intermit_v1 := v_np_trans_le &
 [ STEM < "intermit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_intermit_v_1_rel",
            PHON.ONSET voc ] ].

intermixture_n1 := n_mass_count_le &
 [ STEM < "intermixture" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_intermixture_n_1_rel",
            PHON.ONSET voc ] ].

internal_a1 := adj_intrans_le &
 [ STEM < "internal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_internal_a_1_rel",
            PHON.ONSET voc ] ].

internally_adv1 := adv_int_vp_post_le &
 [ STEM < "internally" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_internal_a_1_rel",
            PHON.ONSET voc ] ].

international_a1 := adj_intrans_le &
 [ STEM < "international" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_international_a_1_rel",
            PHON.ONSET voc ] ].

internationally := adv_int_vp_le &
 [ STEM < "internationally" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_international_a_1_rel",
            PHON.ONSET voc ] ].

internet_n1 := n_intr_le &
 [ STEM < "internet" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_internet_n_1_rel",
            PHON.ONSET voc ] ].

interpose_v1 := v_np_prep_trans_le &
 [ STEM < "interpose" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _between_p_rel,
                    KEYREL.PRED "_interpose_v_1_rel" ],
            PHON.ONSET voc ] ].

interpose_v2 := v_np_trans_le &
 [ STEM < "interpose" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_interpose_v_1_rel",
            PHON.ONSET voc ] ].

interpret_as_v1 := v_np_as_le &
 [ STEM < "interpret" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_interpret_v_as_rel",
            PHON.ONSET voc ] ].

interpret_v1 := v_np*_trans_le &
 [ STEM < "interpret" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_interpret_v_1_rel",
            PHON.ONSET voc ] ].

interpretive_a1 := adj_attr_intrans_le &
 [ STEM < "interpretive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_interpretive_a_1_rel",
            PHON.ONSET voc ] ].

interregio_n1 := n_intr_le &
 [ STEM < "interregio" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_interregio_n_1_rel",
            PHON.ONSET voc ] ].

interrogate_v1 := v_np_trans_le &
 [ STEM < "interrogate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_interrogate_v_1_rel",
            PHON.ONSET voc ] ].

interrogative_a1 := adj_intrans_le &
 [ STEM < "interrogative" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_interrogative_a_1_rel",
            PHON.ONSET voc ] ].

interrogative_n1 := n_intr_le &
 [ STEM < "interrogative" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_interrogative_n_1_rel",
            PHON.ONSET voc ] ].

interrogatively_adv1 := adv_int_vp_le &
 [ STEM < "interrogatively" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_interrogative_a_1_rel",
            PHON.ONSET voc ] ].

interrupt_v1 := v_np*_trans_le &
 [ STEM < "interrupt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_interrupt_v_1_rel",
            PHON.ONSET voc ] ].

interruption_n1 := n_ppof_le &
 [ STEM < "interruption" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_interruption_n_of_rel",
            PHON.ONSET voc ] ].

intersect_v1 := v_np_trans_noger_le &
 [ STEM < "intersect" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_intersect_v_cause_rel",
            PHON.ONSET voc ] ].

intersect_v2 := v_unacc_le &
 [ STEM < "intersect" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_intersect_v_1_rel",
            PHON.ONSET voc ] ].

intersection_n1 := n_intr_le &
 [ STEM < "intersection" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_intersection_n_1_rel",
            PHON.ONSET voc ] ].

intersperse_v1 := v_np_trans_le &
 [ STEM < "intersperse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_intersperse_v_1_rel",
            PHON.ONSET voc ] ].

interstate_n1 := n_intr_le &
 [ STEM < "interstate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_interstate_n_1_rel",
            PHON.ONSET voc ] ].

interval_n1 := n_ppof_le &
 [ STEM < "interval" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_interval_n_of_rel",
            PHON.ONSET voc ] ].

intervene_v1 := v_unacc_le &
 [ STEM < "intervene" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_intervene_v_1_rel",
            PHON.ONSET voc ] ].

intervention_n1 := n_mass_le &
 [ STEM < "intervention" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_intervention_n_1_rel",
            PHON.ONSET voc ] ].

interview_n1 := n_intr_le &
 [ STEM < "interview" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_interview_n_1_rel",
            PHON.ONSET voc ] ].

interview_v1 := v_np*_trans_le &
 [ STEM < "interview" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_interview_v_1_rel",
            PHON.ONSET voc ] ].

interwoven_a1 := adj_intrans_le &
 [ STEM < "interwoven" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_interwoven_a_1_rel",
            PHON.ONSET voc ] ].

intestine_n1 := n_intr_le &
 [ STEM < "intestine" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_intestine_n_1_rel",
            PHON.ONSET voc ] ].

intimate_isect := adj_intrans_le &
 [ STEM < "intimate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_intimate_a_1_rel",
            PHON.ONSET voc ] ].

intimately := adv_int_vp_le &
 [ STEM < "intimately" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_intimate_a_1_rel",
            PHON.ONSET voc ] ].

intimation_n1 := n_mass_count_le &
 [ STEM < "intimation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_intimation_n_1_rel",
            PHON.ONSET voc ] ].

intimidate_v1 := v_np_trans_le &
 [ STEM < "intimidate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_intimidate_v_1_rel",
            PHON.ONSET voc ] ].

intimidate_v2 := v_expl_it_subj_np_cp_le &
 [ STEM < "intimidate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_intimidate_v_1_rel",
            PHON.ONSET voc ] ].

into := p_nmod_no_tmod_le &
 [ STEM < "into" >,
   SYNSEM [ LKEYS.KEYREL.PRED _into_p_rel,
            PHON.ONSET voc ] ].

into_prtcl := p_prtcl_le &
 [ STEM < "into" >,
   SYNSEM [ LKEYS.KEYREL.PRED _into_p_sel_rel,
            PHON.ONSET voc ] ].

into_vmod := p_no_nmod_le &
 [ STEM < "into" >,
   SYNSEM [ LKEYS.KEYREL.PRED _into_p_rel,
            PHON.ONSET voc ] ].

intolerable_isect := adj_intrans_le &
 [ STEM < "intolerable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_intolerable_a_1_rel",
            PHON.ONSET voc ] ].

intolerably := adv_int_vp_le &
 [ STEM < "intolerablely" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_intolerable_a_1_rel",
            PHON.ONSET voc ] ].

intolerably_adv1 := adv_int_vp_post_le &
 [ STEM < "intolerably" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_intolerable_a_1_rel",
            PHON.ONSET voc ] ].

intoxication_n1 := n_mass_le &
 [ STEM < "intoxication" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_intoxication_n_1_rel",
            PHON.ONSET voc ] ].

intransitive_a1 := adj_intrans_le &
 [ STEM < "intransitive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_intransitive_a_1_rel",
            PHON.ONSET voc ] ].

intransitive_n1 := n_intr_le &
 [ STEM < "intransitive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_intransitive_n_1_rel",
            PHON.ONSET voc ] ].

intrepid_a1 := adj_intrans_le &
 [ STEM < "intrepid" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_intrepid_a_1_rel",
            PHON.ONSET voc ] ].

intrigue_n1 := n_mass_count_le &
 [ STEM < "intrigue" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_intrigue_n_1_rel",
            PHON.ONSET voc ] ].

intrigue_v1 := v_np_trans_le &
 [ STEM < "intrigue" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_intrigue_v_1_rel",
            PHON.ONSET voc ] ].

intrigue_v2 := v_expl_it_subj_np_cp_le &
 [ STEM < "intrigue" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_intrigue_v_1_rel",
            PHON.ONSET voc ] ].

intriguing_a1 := adj_intrans_le &
 [ STEM < "intriguing" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_intriguing_a_1_rel",
            PHON.ONSET voc ] ].

introduce_v1 := v_empty_prep*_trans_le &
 [ STEM < "introduce" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_introduce_v_to_rel" ],
            PHON.ONSET voc ] ].

introduction_n1 := n_ppcomp_le &
 [ STEM < "introduction" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_introduction_n_to_rel" ],
            PHON.ONSET voc ] ].

introductory_a1 := adj_intrans_le &
 [ STEM < "introductory" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_introductory_a_1_rel",
            PHON.ONSET voc ] ].

intuitively_adv1 := adv_int_vp_le &
 [ STEM < "intuitively" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_intuitive_a_1_rel",
            PHON.ONSET voc ] ].

inuit_n1 := n_proper_le &
 [ STEM < "inuit" >,
   SYNSEM [ LKEYS.KEYREL.CARG "inuit",
            PHON.ONSET voc ] ].

inure_to_v1 := v_empty_prep*_trans_le &
 [ STEM < "inure" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_inure_v_to_rel" ],
            PHON.ONSET voc ] ].

invade_v1 := v_np_trans_le &
 [ STEM < "invade" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_invade_v_1_rel",
            PHON.ONSET voc ] ].

invalid_a1 := adj_intrans_le &
 [ STEM < "invalid" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_invalid_a_1_rel",
            PHON.ONSET voc ] ].

invariably_adv1 := adv_int_vp_le &
 [ STEM < "invariably" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_invariable_a_1_rel",
            PHON.ONSET voc ] ].

invasion_n1 := n_mass_count_ppof_le &
 [ STEM < "invasion" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_invasion_n_of_rel",
            PHON.ONSET voc ] ].

invent_v1 := v_np_trans_le &
 [ STEM < "invent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_invent_v_1_rel",
            PHON.ONSET voc ] ].

invention_n1 := n_mass_count_ppof_nosort_le &
 [ STEM < "invention" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_invention_n_of_rel",
            PHON.ONSET voc ] ].

inventor_n1 := n_ppof_le &
 [ STEM < "inventor" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_inventor_n_of_rel",
            PHON.ONSET voc ] ].

inventory_n1 := n_mass_le &
 [ STEM < "inventory" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_inventory_n_1_rel",
            PHON.ONSET voc ] ].

inversely := adv_int_vp_le &
 [ STEM < "inversely" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_inverse_a_1_rel",
            PHON.ONSET voc ] ].

invert_n1 := n_intr_le &
 [ STEM < "invert" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_invert_n_1_rel",
            PHON.ONSET voc ] ].

invert_v1 := v_unacc_le &
 [ STEM < "invert" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_invert_v_1_rel",
            PHON.ONSET voc ] ].

invert_v2 := v_np_trans_noger_le &
 [ STEM < "invert" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_invert_v_cause_rel",
            PHON.ONSET voc ] ].

invest_v1 := v_empty_prep*_trans_le &
 [ STEM < "invest" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_invest_v_in_rel" ],
            PHON.ONSET voc ] ].

invest_v2 := v_empty_prep_intrans_le &
 [ STEM < "invest" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_invest_v_in_rel" ],
            PHON.ONSET voc ] ].

invest_with_v1 := v_empty_prep*_trans_le &
 [ STEM < "invest" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_invest_v_with_rel" ],
            PHON.ONSET voc ] ].

investigate_v1 := v_np*_trans_le &
 [ STEM < "investigate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_investigate_v_1_rel",
            PHON.ONSET voc ] ].

investigate_v2 := v_cp_ques_fin_inf_non_trans_le &
 [ STEM < "investigate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_investigate_v_1_rel",
            PHON.ONSET voc ] ].

investigation_n1 := n_mass_count_le &
 [ STEM < "investigation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_investigation_n_1_rel",
            PHON.ONSET voc ] ].

investment_n1 := n_mass_count_le &
 [ STEM < "investment" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_investment_n_1_rel",
            PHON.ONSET voc ] ].

investor_n1 := n_intr_le &
 [ STEM < "investor" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_investor_n_1_rel",
            PHON.ONSET voc ] ].

invisible_a1 := adj_trans_le &
 [ STEM < "invisible" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_invisible_a_to_rel" ],
            PHON.ONSET voc ] ].

invitation_n1 := n_ppof_le &
 [ STEM < "invitation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_invitation_n_of_rel",
            PHON.ONSET voc ] ].

invite_v1 := v_empty_prep*_trans_le &
 [ STEM < "invite" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_invite_v_to_rel" ],
            PHON.ONSET voc ] ].

invite_v2 := v_obj_equi_le &
 [ STEM < "invite" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_invite_v_to_rel",
            PHON.ONSET voc ] ].

inviting_a1 := adj_intrans_le &
 [ STEM < "inviting" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_inviting_a_1_rel",
            PHON.ONSET voc ] ].

invocation_n1 := n_mass_count_le &
 [ STEM < "invocation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_invocation_n_1_rel",
            PHON.ONSET con ] ].

invoice_n1 := n_ppcomp_le &
 [ STEM < "invoice" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_invoice_n_for_rel" ],
            PHON.ONSET voc ] ].

invoice_v1 := v_np_trans_le &
 [ STEM < "invoice" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_invoice_v_1_rel",
            PHON.ONSET voc ] ].

invoke_v1 := v_np_trans_le &
 [ STEM < "invoke" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_invoke_v_1_rel",
            PHON.ONSET voc ] ].

involuntarily := adv_int_vp_le &
 [ STEM < "involuntarily" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_involuntary_a_1_rel",
            PHON.ONSET voc ] ].

involuntary_isect := adj_intrans_le &
 [ STEM < "involuntary" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_involuntary_a_1_rel",
            PHON.ONSET voc ] ].

involve_v1 := v_empty_prep_intrans_le &
 [ STEM < "involve" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_involve_v_in_rel" ],
            PHON.ONSET voc ] ].

involve_v2 := v_np_trans_le &
 [ STEM < "involve" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_involve_v_1_rel",
            PHON.ONSET voc ] ].

involved_isect := adj_intrans_le &
 [ STEM < "involved" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_involved_a_1_rel",
            PHON.ONSET voc ] ].

invulnerable_a1 := adj_trans_le &
 [ STEM < "invulnerable" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_invulnerable_a_to_rel" ],
            PHON.ONSET voc ] ].

inward_a1 := adj_intrans_le &
 [ STEM < "inward" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_inward_a_1_rel",
            PHON.ONSET voc ] ].

inward_n1 := n_adv_event_le &
 [ STEM < "inward" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED _inward_a_1_rel,
                    KEYREL.PRED place_n_rel ],
            PHON.ONSET voc ] ].

inwards_n1 := n_adv_event_le &
 [ STEM < "inwards" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED _inward_a_1_rel,
                    KEYREL.PRED place_n_rel ],
            PHON.ONSET voc ] ].

ion_n1 := n_intr_le &
 [ STEM < "ion" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ion_n_1_rel",
            PHON.ONSET voc ] ].

iowa_n1 := n_proper_le &
 [ STEM < "iowa" >,
   SYNSEM [ LKEYS.KEYREL.CARG "iowa",
            PHON.ONSET voc ] ].

iowa_n2 := n_proper_abb_le &
 [ STEM < "ia" >,
   SYNSEM [ LKEYS.KEYREL.CARG "iowa",
            PHON.ONSET voc ] ].

ipmo_n1 := n_intr_named_le &
 [ STEM < "ipmo" >,
   SYNSEM [ LKEYS.KEYREL.CARG "ipmo",
            PHON.ONSET voc ] ].

ira_n1 := n_proper_le &
 [ STEM < "ira" >,
   SYNSEM [ LKEYS.KEYREL.CARG "ira",
            PHON.ONSET voc ] ].

ireland_n1 := n_proper_le &
 [ STEM < "ireland" >,
   SYNSEM [ LKEYS.KEYREL.CARG "ireland",
            PHON.ONSET voc ] ].

irish-over_n1 := n_proper_le &
 [ STEM < "irish", "over" >,
   SYNSEM [ LKEYS.KEYREL.CARG "irish-over",
            PHON.ONSET voc ] ].

irish_a1 := adj_intrans_le &
 [ STEM < "irish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_irish_a_1_rel",
            PHON.ONSET voc ] ].

irish_n1 := n_proper_le &
 [ STEM < "irish" >,
   SYNSEM [ LKEYS.KEYREL.CARG "irish",
            PHON.ONSET voc ] ].

irish_n2 := n_intr_le &
 [ STEM < "irish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_irish_n_1_rel",
            PHON.ONSET voc ] ].

iron_n1 := n_mass_count_le &
 [ STEM < "iron" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_iron_n_1_rel",
            PHON.ONSET voc ] ].

iron_out_v1 := v_particle_np_le &
 [ STEM < "iron" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_iron_v_out_rel" ],
            PHON.ONSET voc ] ].

iron_v1 := v_np*_trans_le &
 [ STEM < "iron" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_iron_v_1_rel",
            PHON.ONSET voc ] ].

irreclaimably_adv := adv_int_vp_le &
 [ STEM < "irreclaimably" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_irreclaimable_a_1_rel",
            PHON.ONSET voc ] ].

irregular_a1 := adj_intrans_le &
 [ STEM < "irregular" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_irregular_a_1_rel",
            PHON.ONSET voc ] ].

irregularly_adv := adv_int_vp_le &
 [ STEM < "irregularly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_irregular_a_1_rel",
            PHON.ONSET voc ] ].

irrelevant_a1 := adj_intrans_le &
 [ STEM < "irrelevant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_irrelevant_a_1_rel",
            PHON.ONSET voc ] ].

irresolute_a1 := adj_intrans_le &
 [ STEM < "irresolute" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_irresolute_a_1_rel",
            PHON.ONSET voc ] ].

irrespective_a1 := adj_trans_le &
 [ STEM < "irrespective" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_irrespective_a_of_rel" ],
            PHON.ONSET voc ] ].

irrigate_v1 := v_np*_trans_le &
 [ STEM < "irrigate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_irrigate_v_1_rel",
            PHON.ONSET voc ] ].

irrigation_n1 := n_mass_le &
 [ STEM < "irrigation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_irrigation_n_1_rel",
            PHON.ONSET voc ] ].

irritate_v1 := v_np_trans_le &
 [ STEM < "irritate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_irritate_v_1_rel",
            PHON.ONSET voc ] ].

irritate_v2 := v_expl_it_subj_np_cp_le &
 [ STEM < "irritate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_irritate_v_1_rel",
            PHON.ONSET voc ] ].

irritating_a1 := adj_intrans_le &
 [ STEM < "irritating" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_irritating_a_1_rel",
            PHON.ONSET voc ] ].

islam_n1 := n_proper_le &
 [ STEM < "islam" >,
   SYNSEM [ LKEYS.KEYREL.CARG "islam",
            PHON.ONSET voc ] ].

islamic_a1 := adj_intrans_le &
 [ STEM < "islamic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_islamic_a_1_rel",
            PHON.ONSET voc ] ].

island_n1 := n_intr_le &
 [ STEM < "island" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_island_n_1_rel",
            PHON.ONSET voc ] ].

island_post_ttl := n_post_title_le &
 [ STEM < "island" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_island_n_1_rel",
            PHON.ONSET voc ] ].

isle_n1 := n_intr_le &
 [ STEM < "isle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_isle_n_1_rel",
            PHON.ONSET voc ] ].

isle_of_the_midnight_sun_n1 := n_intr_named_le &
 [ STEM < "isle", "of", "the", "midnight", "sun" >,
   SYNSEM [ LKEYS.KEYREL.CARG "isle_of_the_midnight_sun",
            PHON.ONSET voc ] ].

isle_of_the_midnight_sun_norway_n1 := n_intr_named_le &
 [ STEM < "isle", "of", "the", "midnight", "sun", "norway" >,
   SYNSEM [ LKEYS.KEYREL.CARG "isle_of_the_midnight_sun_norway",
            PHON.ONSET voc ] ].

isolate_out_v2 := v_particle_np_le &
 [ STEM < "isolate" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_isolate_v_out_rel" ],
            PHON.ONSET voc ] ].

isolate_v1 := v_np_trans_le &
 [ STEM < "isolate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_isolate_v_1_rel",
            PHON.ONSET voc ] ].

isolated_a1 := adj_intrans_le &
 [ STEM < "isolated" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_isolated_a_1_rel",
            PHON.ONSET voc ] ].

isomorphic_a1 := adj_intrans_le &
 [ STEM < "isomorphic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_isomorphic_a_1_rel",
            PHON.ONSET voc ] ].

isorvatnet := n_proper_le &
 [ STEM < "isorvatnet" >,
   SYNSEM [ LKEYS.KEYREL.CARG "isorvatnet",
            PHON.ONSET voc ] ].

isp_n1 := n_intr_le &
 [ STEM < "isp" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_isp_n_1_rel",
            PHON.ONSET voc ] ].

israel_n1 := n_proper_le &
 [ STEM < "israel" >,
   SYNSEM [ LKEYS.KEYREL.CARG "israel",
            PHON.ONSET voc ] ].

israeli_a1 := adj_intrans_le &
 [ STEM < "israeli" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_israeli_a_1_rel",
            PHON.ONSET voc ] ].

israeli_n1 := n_proper_le &
 [ STEM < "israeli" >,
   SYNSEM [ LKEYS.KEYREL.CARG "israeli",
            PHON.ONSET voc ] ].

israeli_n2 := n_intr_le &
 [ STEM < "israeli" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_israeli_n_1_rel",
            PHON.ONSET voc ] ].

issue_n1 := n_intr_le &
 [ STEM < "issue" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_issue_n_1_rel",
            PHON.ONSET voc ] ].

issue_v1 := v_ditrans_le &
 [ STEM < "issue" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_issue_v_1_rel",
            PHON.ONSET voc ] ].

issue_v2 := v_np_trans_le &
 [ STEM < "issue" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_issue_v_1_rel",
            PHON.ONSET voc ] ].

isthmus_n1 := n_intr_le &
 [ STEM < "isthmus" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_isthmus_n_1_rel",
            PHON.ONSET voc ] ].

it := n_expl_it_le &
 [ STEM < "it" >,
   SYNSEM.PHON.ONSET voc ].

it2 := n_pers_pro_it_le &
 [ STEM < "it" >,
   SYNSEM.PHON.ONSET voc ].

it_depends_root_pre := adv_disc_preh_le &
 [ STEM < "it", "depends" >,
   SYNSEM [ LKEYS.KEYREL.CARG "it+depends",
            PHON.ONSET voc ] ].

italian_a1 := adj_intrans_le &
 [ STEM < "italian" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_italian_a_1_rel",
            PHON.ONSET voc ] ].

italian_n1 := n_proper_le &
 [ STEM < "italian" >,
   SYNSEM [ LKEYS.KEYREL.CARG "italian",
            PHON.ONSET voc ] ].

italian_n2 := n_intr_le &
 [ STEM < "italian" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_italian_n_1_rel",
            PHON.ONSET voc ] ].

italic := n_proper_le &
 [ STEM < "italic" >,
   SYNSEM [ LKEYS.KEYREL.CARG "italic",
            PHON.ONSET voc ] ].

italy_n1 := n_proper_le &
 [ STEM < "italy" >,
   SYNSEM [ LKEYS.KEYREL.CARG "italy",
            PHON.ONSET voc ] ].

item_n1 := n_ppof_nosort_le &
 [ STEM < "item" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_item_n_of_rel",
            PHON.ONSET voc ] ].

item_ttl := n_title_le &
 [ STEM < "item" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_item_n_of_rel",
            PHON.ONSET voc ] ].

itinerary_n1 := n_intr_le &
 [ STEM < "itinerary" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_itinerary_n_1_rel",
            PHON.ONSET voc ] ].

its := n_poss_pro_its_le &
 [ STEM < "its" >,
   SYNSEM.PHON.ONSET voc ].

its_poss := det_poss_its_le &
 [ STEM < "its" >,
   SYNSEM.PHON.ONSET voc ].

itself := n_refl_pro_itself_le &
 [ STEM < "itself" >,
   SYNSEM.PHON.ONSET voc ].

itself_adv := adv_refl_pro_itself_le &
 [ STEM < "itself" >,
   SYNSEM.PHON.ONSET voc ].

iungsdalen := n_proper_le &
 [ STEM < "iungsdalen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "iungsdalen",
            PHON.ONSET voc ] ].

iver_n1 := n_proper_le &
 [ STEM < "iver" >,
   SYNSEM [ LKEYS.KEYREL.CARG "iver",
            PHON.ONSET voc ] ].

ivory_n1 := n_mass_count_le &
 [ STEM < "ivory" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ivory_n_1_rel",
            PHON.ONSET voc ] ].

j_n1 := n_proper_le &
 [ STEM < "j" >,
   SYNSEM [ LKEYS.KEYREL.CARG "j",
            PHON.ONSET con ] ].

j_np1 := n_proper_le &
 [ STEM < "_j" >,
   SYNSEM [ LKEYS.KEYREL.CARG "j",
            PHON.ONSET con ] ].

j_period_np1 := n_proper_le &
 [ STEM < "j." >,
   SYNSEM [ LKEYS.KEYREL.CARG "j",
            PHON.ONSET con ] ].

j_period_np2 := n_proper_le &
 [ STEM < "_j." >,
   SYNSEM [ LKEYS.KEYREL.CARG "j",
            PHON.ONSET con ] ].

jack_n1 := n_ppof_le &
 [ STEM < "jack" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_jack_n_of_rel",
            PHON.ONSET con ] ].

jack_n2 := n_proper_le &
 [ STEM < "jack" >,
   SYNSEM [ LKEYS.KEYREL.CARG "jack",
            PHON.ONSET con ] ].

jack_up_v1 := v_particle_np_le &
 [ STEM < "jack" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_jack_v_up_rel" ],
            PHON.ONSET con ] ].

jacket_n1 := n_intr_le &
 [ STEM < "jacket" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_jacket_n_1_rel",
            PHON.ONSET con ] ].

jackie_n1 := n_proper_le &
 [ STEM < "jackie" >,
   SYNSEM [ LKEYS.KEYREL.CARG "jackie",
            PHON.ONSET con ] ].

jackson_n1 := n_proper_city_le &
 [ STEM < "jackson" >,
   SYNSEM [ LKEYS.KEYREL.CARG "jackson",
            PHON.ONSET con ] ].

jackstay_n1 := n_intr_le &
 [ STEM < "jackstay" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_jackstay_n_1_rel",
            PHON.ONSET con ] ].

jaco_n1 := n_proper_le &
 [ STEM < "jaco" >,
   SYNSEM [ LKEYS.KEYREL.CARG "jaco",
            PHON.ONSET con ] ].

jacques_n1 := n_proper_le &
 [ STEM < "jacques" >,
   SYNSEM [ LKEYS.KEYREL.CARG "jacques",
            PHON.ONSET con ] ].

jacuzzi_n1 := n_intr_le &
 [ STEM < "jacuzzi" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_jacuzzi_n_1_rel",
            PHON.ONSET con ] ].

jade_n1 := n_mass_count_le &
 [ STEM < "jade" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_jade_n_1_rel",
            PHON.ONSET con ] ].

jagged_a1 := adj_intrans_le &
 [ STEM < "jagged" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_jagged_a_1_rel",
            PHON.ONSET con ] ].

jaguar_n1 := n_intr_named_le &
 [ STEM < "jaguar" >,
   SYNSEM [ LKEYS.KEYREL.CARG "jaguar",
            PHON.ONSET con ] ].

jaguar_n2 := n_intr_le &
 [ STEM < "jaguar" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_jaguar_n_1_rel",
            PHON.ONSET con ] ].

jail_n1 := n_mass_count_le &
 [ STEM < "jail" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_jail_n_1_rel",
            PHON.ONSET con ] ].

jail_v1 := v_np_trans_le &
 [ STEM < "jail" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_jail_v_1_rel",
            PHON.ONSET con ] ].

jake_and_the_fatman_n1 := n_proper_le &
 [ STEM < "jake", "and", "the", "fatman" >,
   SYNSEM [ LKEYS.KEYREL.CARG "jake_and_the_fatman",
            PHON.ONSET con ] ].

jake_n1 := n_proper_le &
 [ STEM < "jake" >,
   SYNSEM [ LKEYS.KEYREL.CARG "jake",
            PHON.ONSET con ] ].

jakhelln_n1 := n_proper_le &
 [ STEM < "jakhelln" >,
   SYNSEM [ LKEYS.KEYREL.CARG "jakhelln",
            PHON.ONSET con ] ].

jakob-and-adele_n1 := n_proper_le &
 [ STEM < "jakob", "and", "adele" >,
   SYNSEM [ LKEYS.KEYREL.CARG "jakob-and-adele",
            PHON.ONSET con ] ].

jal_n1 := n_proper_le &
 [ STEM < "jal" >,
   SYNSEM [ LKEYS.KEYREL.CARG "jal",
            PHON.ONSET con ] ].

jam_deg := adv_degree_spec_adj_le &
 [ STEM < "jam" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_jam_x_deg_rel",
            PHON.ONSET con ] ].

jam_n1 := n_mass_count_le &
 [ STEM < "jam" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_jam_n_1_rel",
            PHON.ONSET con ] ].

jam_up_v1 := v_particle_np_le &
 [ STEM < "jam" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_jam_v_up_rel" ],
            PHON.ONSET con ] ].

jam_v1 := v_np_prep_trans_dors_le &
 [ STEM < "jam" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_jam_v_1_rel",
            PHON.ONSET con ] ].

jam_v2 := v_unerg_le &
 [ STEM < "jam" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_jam_v_1_rel",
            PHON.ONSET con ] ].

jamaica_n1 := n_proper_le &
 [ STEM < "jamaica" >,
   SYNSEM [ LKEYS.KEYREL.CARG "jamaica",
            PHON.ONSET con ] ].

james := n_proper_le &
 [ STEM < "james" >,
   SYNSEM [ LKEYS.KEYREL.CARG "james",
            PHON.ONSET con ] ].

jammed_isect := adj_attr_intrans_le &
 [ STEM < "jammed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_jammed_a_1_rel",
            PHON.ONSET con ] ].

jan := n_proper_le &
 [ STEM < "jan" >,
   SYNSEM [ LKEYS.KEYREL.CARG "jan",
            PHON.ONSET con ] ].

jan_frode := n_proper_le &
 [ STEM < "jan-", "frode" >,
   SYNSEM [ LKEYS.KEYREL.CARG "jan_frode",
            PHON.ONSET con ] ].

jane_n1 := n_proper_le &
 [ STEM < "jane" >,
   SYNSEM [ LKEYS.KEYREL.CARG "jane",
            PHON.ONSET con ] ].

janet_n1 := n_proper_le &
 [ STEM < "janet" >,
   SYNSEM [ LKEYS.KEYREL.CARG "janet",
            PHON.ONSET con ] ].

janitor_n1 := n_intr_le &
 [ STEM < "janitor" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_janitor_n_1_rel",
            PHON.ONSET con ] ].

janitorial_a1 := adj_intrans_le &
 [ STEM < "janitorial" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_janitorial_a_1_rel",
            PHON.ONSET con ] ].

january := n_month_le &
 [ STEM < "january" >,
   SYNSEM [ LKEYS.KEYREL.CARG "jan",
            PHON.ONSET con ] ].

january_2 := n_month_year_le &
 [ STEM < "january" >,
   SYNSEM [ LKEYS.KEYREL.CARG "jan",
            PHON.ONSET con ] ].

january_abb_n1 := n_month_le &
 [ STEM < "jan" >,
   SYNSEM [ LKEYS.KEYREL.CARG "jan",
            PHON.ONSET con ] ].

january_abb_n2 := n_month_year_le &
 [ STEM < "jan" >,
   SYNSEM [ LKEYS.KEYREL.CARG "jan",
            PHON.ONSET con ] ].

january_abb_n3 := n_month_le &
 [ STEM < "jan." >,
   SYNSEM [ LKEYS.KEYREL.CARG "jan",
            PHON.ONSET con ] ].

january_abb_n4 := n_month_year_le &
 [ STEM < "jan." >,
   SYNSEM [ LKEYS.KEYREL.CARG "jan",
            PHON.ONSET con ] ].

january_the_det := det_month_le &
 [ STEM < "january", "the" >,
   SYNSEM [ LKEYS.ALTKEYREL.CARG "jan",
            PHON.ONSET con ] ].

japan_n1 := n_proper_le &
 [ STEM < "japan" >,
   SYNSEM [ LKEYS.KEYREL.CARG "japan",
            PHON.ONSET con ] ].

japanese_a1 := adj_intrans_le &
 [ STEM < "japanese" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_japanese_a_1_rel",
            PHON.ONSET con ] ].

japanese_n1 := n_proper_le &
 [ STEM < "japanese" >,
   SYNSEM [ LKEYS.KEYREL.CARG "japanese",
            PHON.ONSET con ] ].

japanese_n2 := n_plur_nocmpnd_le &
 [ STEM < "japanese" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_japanese_n_1_rel",
            PHON.ONSET con ] ].

jar_n1 := n_intr_le &
 [ STEM < "jar" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_jar_n_1_rel",
            PHON.ONSET con ] ].

jar_v1 := v_np*_trans_le &
 [ STEM < "jar" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_jar_v_1_rel",
            PHON.ONSET con ] ].

jaunt_n1 := n_intr_le &
 [ STEM < "jaunt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_jaunt_n_1_rel",
            PHON.ONSET con ] ].

java_n1 := n_proper_le &
 [ STEM < "java" >,
   SYNSEM [ LKEYS.KEYREL.CARG "java",
            PHON.ONSET con ] ].

jaw_n1 := n_intr_le &
 [ STEM < "jaw" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_jaw_n_1_rel",
            PHON.ONSET con ] ].

jay := n_proper_le &
 [ STEM < "jay" >,
   SYNSEM [ LKEYS.KEYREL.CARG "jay",
            PHON.ONSET con ] ].

jazz_n1 := n_intr_le &
 [ STEM < "jazz" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_jazz_n_1_rel",
            PHON.ONSET con ] ].

jeans_n1 := n_plur_le &
 [ STEM < "jean" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_jeans_n_1_rel",
            PHON.ONSET con ] ].

jeez_root_post := adv_s_post_word_nospec_le &
 [ STEM < "jeez" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_jeez_a_1_rel",
            PHON.ONSET con ] ].

jeez_root_pre := adv_s_pre_word_root_le &
 [ STEM < "jeez" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_jeez_a_1_rel",
            PHON.ONSET con ] ].

jelly_n1 := n_mass_count_le &
 [ STEM < "jelly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_jelly_n_1_rel",
            PHON.ONSET con ] ].

jena_n1 := n_proper_city_le &
 [ STEM < "jena" >,
   SYNSEM [ LKEYS.KEYREL.CARG "jena",
            PHON.ONSET con ] ].

jenifer_n1 := n_proper_le &
 [ STEM < "jenifer" >,
   SYNSEM [ LKEYS.KEYREL.CARG "jenifer",
            PHON.ONSET con ] ].

jennifer_n1 := n_proper_le &
 [ STEM < "jennifer" >,
   SYNSEM [ LKEYS.KEYREL.CARG "jennifer",
            PHON.ONSET con ] ].

jens_n1 := n_proper_le &
 [ STEM < "jens" >,
   SYNSEM [ LKEYS.KEYREL.CARG "jens",
            PHON.ONSET con ] ].

jensen_n1 := n_proper_le &
 [ STEM < "jensen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "jensen",
            PHON.ONSET con ] ].

jeopardize_v1 := v_np_trans_le &
 [ STEM < "jeopardize" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_jeopardize_v_1_rel",
            PHON.ONSET con ] ].

jericho_n1 := n_proper_city_le &
 [ STEM < "jericho" >,
   SYNSEM [ LKEYS.KEYREL.CARG "jericho",
            PHON.ONSET con ] ].

jerk_around_v1 := v_np_particle_only_le &
 [ STEM < "jerk" >,
   SYNSEM [ LKEYS [ --COMPKEY _around_p_sel_rel,
                    KEYREL.PRED "_jerk_v_around_rel" ],
            PHON.ONSET con ] ].

jerk_n1 := n_intr_le &
 [ STEM < "jerk" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_jerk_n_1_rel",
            PHON.ONSET con ] ].

jerk_v1 := v_np_trans_noger_le &
 [ STEM < "jerk" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_jerk_v_cause_rel",
            PHON.ONSET con ] ].

jerk_v2 := v_unacc_le &
 [ STEM < "jerk" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_jerk_v_1_rel",
            PHON.ONSET con ] ].

jerusalem_n1 := n_proper_city_le &
 [ STEM < "jerusalem" >,
   SYNSEM [ LKEYS.KEYREL.CARG "jerusalem",
            PHON.ONSET con ] ].

jessica := n_proper_le &
 [ STEM < "jessica" >,
   SYNSEM [ LKEYS.KEYREL.CARG "jessica",
            PHON.ONSET con ] ].

jessie_n1 := n_proper_le &
 [ STEM < "jessie" >,
   SYNSEM [ LKEYS.KEYREL.CARG "jessie",
            PHON.ONSET con ] ].

jest_n1 := n_mass_count_le &
 [ STEM < "jest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_jest_n_1_rel",
            PHON.ONSET con ] ].

jest_v1 := v_unerg_le &
 [ STEM < "jest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_jest_v_1_rel",
            PHON.ONSET con ] ].

jest_v2 := v_cp_prop_non_trans_le &
 [ STEM < "jest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_jest_v_1_rel",
            PHON.ONSET con ] ].

jesus_n1 := n_proper_le &
 [ STEM < "jesus" >,
   SYNSEM [ LKEYS.KEYREL.CARG "jesus",
            PHON.ONSET con ] ].

jet-lag_n1 := n_intr_le &
 [ STEM < "jet", "lag" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_jet+lag_n_1_rel",
            PHON.ONSET con ] ].

jet_n1 := n_intr_le &
 [ STEM < "jet" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_jet_n_1_rel",
            PHON.ONSET con ] ].

jet_off_v1 := v_particle_le &
 [ STEM < "jet" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_jet_v_off_rel" ],
            PHON.ONSET con ] ].

jett_n1 := n_proper_le &
 [ STEM < "jett" >,
   SYNSEM [ LKEYS.KEYREL.CARG "jett",
            PHON.ONSET con ] ].

jew_n1 := n_intr_le &
 [ STEM < "jew" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_jew_n_1_rel",
            PHON.ONSET con ] ].

jewel_n1 := n_intr_le &
 [ STEM < "jewel" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_jewel_n_1_rel",
            PHON.ONSET con ] ].

jewish_a1 := adj_intrans_le &
 [ STEM < "jewish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_jewish_a_1_rel",
            PHON.ONSET con ] ].

jillion := adj_bare_specified_card_billion_le &
 [ STEM < "jillion" >,
   SYNSEM [ LKEYS.KEYREL.CARG "jillion",
            PHON.ONSET con ] ].

jim := n_proper_le &
 [ STEM < "jim" >,
   SYNSEM [ LKEYS.KEYREL.CARG "jim",
            PHON.ONSET con ] ].

jo_n1 := n_proper_le &
 [ STEM < "jo" >,
   SYNSEM [ LKEYS.KEYREL.CARG "jo",
            PHON.ONSET con ] ].

joan := n_proper_le &
 [ STEM < "joan" >,
   SYNSEM [ LKEYS.KEYREL.CARG "joan",
            PHON.ONSET con ] ].

joanna_n1 := n_proper_le &
 [ STEM < "joanna" >,
   SYNSEM [ LKEYS.KEYREL.CARG "joanna",
            PHON.ONSET con ] ].

job_n1 := n_ppof_nosort_le &
 [ STEM < "job" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_job_n_of-as_rel",
            PHON.ONSET con ] ].

job_n2 := n_ppcomp_oblig_le &
 [ STEM < "job" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_nbar_rel,
                    KEYREL.PRED "_job_n_of-as_rel" ],
            PHON.ONSET con ] ].

job_n3 := n_ppcomp_oblig_le &
 [ STEM < "job" >,
   SYNSEM [ LKEYS [ --COMPKEY _as_p_nbar_rel,
                    KEYREL.PRED "_job_n_of-as_rel" ],
            PHON.ONSET con ] ].

jobber_n1 := n_intr_le &
 [ STEM < "jobber" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_jobber_n_1_rel",
            PHON.ONSET con ] ].

jochen_n1 := n_proper_le &
 [ STEM < "jochen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "jochen",
            PHON.ONSET con ] ].

jockey_n1 := n_intr_le &
 [ STEM < "jockey" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_jockey_n_1_rel",
            PHON.ONSET con ] ].

jockey_v1 := v_unerg_le &
 [ STEM < "jockey" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_jockey_v_1_rel",
            PHON.ONSET con ] ].

jodie_n1 := n_proper_le &
 [ STEM < "jodie" >,
   SYNSEM [ LKEYS.KEYREL.CARG "jodie",
            PHON.ONSET con ] ].

joe_n1 := n_proper_le &
 [ STEM < "joe" >,
   SYNSEM [ LKEYS.KEYREL.CARG "joe",
            PHON.ONSET con ] ].

joel_n1 := n_proper_le &
 [ STEM < "joel" >,
   SYNSEM [ LKEYS.KEYREL.CARG "joel",
            PHON.ONSET con ] ].

jog_n1 := n_intr_le &
 [ STEM < "jog" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_jog_n_1_rel",
            PHON.ONSET con ] ].

jog_v1 := v_prep_dir_le &
 [ STEM < "jog" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_jog_v_1_rel",
            PHON.ONSET con ] ].

johan_n1 := n_proper_le &
 [ STEM < "johan" >,
   SYNSEM [ LKEYS.KEYREL.CARG "johan",
            PHON.ONSET con ] ].

johannes_n1 := n_proper_le &
 [ STEM < "johannes" >,
   SYNSEM [ LKEYS.KEYREL.CARG "johannes",
            PHON.ONSET con ] ].

john := n_proper_le &
 [ STEM < "john" >,
   SYNSEM [ LKEYS.KEYREL.CARG "john",
            PHON.ONSET con ] ].

john_paul_ii_n1 := n_proper_le &
 [ STEM < "john", "paul", "ii" >,
   SYNSEM [ LKEYS.KEYREL.CARG "john_paul_ii",
            PHON.ONSET con ] ].

johnny := n_proper_le &
 [ STEM < "johnny" >,
   SYNSEM [ LKEYS.KEYREL.CARG "johnny",
            PHON.ONSET con ] ].

johnson := n_proper_le &
 [ STEM < "johnson" >,
   SYNSEM [ LKEYS.KEYREL.CARG "johnson",
            PHON.ONSET con ] ].

johnson_and_johnson_n1 := n_proper_le &
 [ STEM < "johnson", "and", "johnson" >,
   SYNSEM [ LKEYS.KEYREL.CARG "johnson_and_johnson",
            PHON.ONSET con ] ].

johnson_and_johnson_n2 := n_proper_le &
 [ STEM < "johnson", "&", "johnson" >,
   SYNSEM [ LKEYS.KEYREL.CARG "johnson_and_johnson",
            PHON.ONSET con ] ].

johnsons := n_proper_le &
 [ STEM < "johnsons" >,
   SYNSEM [ LKEYS.KEYREL.CARG "johnsons",
            PHON.ONSET con ] ].

join_in_v1 := v_empty_prep_intrans_le &
 [ STEM < "join" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_join_v_in_rel" ],
            PHON.ONSET con ] ].

join_n1 := n_intr_le &
 [ STEM < "join" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_join_n_1_rel",
            PHON.ONSET con ] ].

join_up_v1 := v_empty_prep_intrans_le &
 [ STEM < "join" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_join_v_up_rel" ],
            PHON.ONSET con ] ].

join_v1 := v_np*_trans_le &
 [ STEM < "join" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_join_v_1_rel",
            PHON.ONSET con ] ].

joint_a1 := adj_intrans_le &
 [ STEM < "joint" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_joint_a_1_rel",
            PHON.ONSET con ] ].

joint_n1 := n_intr_le &
 [ STEM < "joint" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_joint_n_1_rel",
            PHON.ONSET con ] ].

jointly_adv1 := adv_int_vp_le &
 [ STEM < "jointly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_joint_a_1_rel",
            PHON.ONSET con ] ].

joke_around_v1 := v_empty_prep_intrans_le &
 [ STEM < "joke" >,
   SYNSEM [ LKEYS [ --COMPKEY _around_p_sel_rel,
                    KEYREL.PRED "_joke_v_around_rel" ],
            PHON.ONSET con ] ].

joke_n1 := n_intr_le &
 [ STEM < "joke" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_joke_n_1_rel",
            PHON.ONSET con ] ].

joke_v2 := v_pp_cp_fin_le &
 [ STEM < "joke" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_joke_v_1_rel" ],
            PHON.ONSET con ] ].

jolly_a1 := adj_intrans_le &
 [ STEM < "jolly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_jolly_a_1_rel",
            PHON.ONSET con ] ].

jolt_n1 := n_intr_le &
 [ STEM < "jolt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_jolt_n_1_rel",
            PHON.ONSET con ] ].

jolt_v1 := v_np_trans_le &
 [ STEM < "jolt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_jolt_v_1_rel",
            PHON.ONSET con ] ].

jomfrunut := n_proper_le &
 [ STEM < "jomfrunut" >,
   SYNSEM [ LKEYS.KEYREL.CARG "jomfrunut",
            PHON.ONSET con ] ].

jon_n1 := n_proper_le &
 [ STEM < "jon" >,
   SYNSEM [ LKEYS.KEYREL.CARG "jon",
            PHON.ONSET con ] ].

jones_n1 := n_proper_le &
 [ STEM < "jones" >,
   SYNSEM [ LKEYS.KEYREL.CARG "jones",
            PHON.ONSET con ] ].

jonstein := n_proper_le &
 [ STEM < "jonstein" >,
   SYNSEM [ LKEYS.KEYREL.CARG "jonstein",
            PHON.ONSET con ] ].

jordalen := n_proper_le &
 [ STEM < "jordalen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "jordalen",
            PHON.ONSET con ] ].

jordan_n1 := n_proper_le &
 [ STEM < "jordan" >,
   SYNSEM [ LKEYS.KEYREL.CARG "jordan",
            PHON.ONSET con ] ].

jostedal := n_proper_le &
 [ STEM < "jostedal" >,
   SYNSEM [ LKEYS.KEYREL.CARG "jostedal",
            PHON.ONSET con ] ].

jostedalsbre := n_proper_le &
 [ STEM < "jostedalsbre" >,
   SYNSEM [ LKEYS.KEYREL.CARG "jostedalsbre",
            PHON.ONSET con ] ].

jostedalsbreen := n_proper_le &
 [ STEM < "jostedalsbreen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "jostedalsbreen",
            PHON.ONSET con ] ].

jot_down_v1 := v_particle_np_le &
 [ STEM < "jot" >,
   SYNSEM [ LKEYS [ --COMPKEY _down_p_sel_rel,
                    KEYREL.PRED "_jot_v_down_rel" ],
            PHON.ONSET con ] ].

jotun := n_proper_le &
 [ STEM < "jotun" >,
   SYNSEM [ LKEYS.KEYREL.CARG "jotun",
            PHON.ONSET con ] ].

jotunfjeldene_n1 := n_proper_le &
 [ STEM < "jotunfjeldene" >,
   SYNSEM [ LKEYS.KEYREL.CARG "jotunfjeldene",
            PHON.ONSET con ] ].

jotunheim := n_proper_le &
 [ STEM < "jotunheim" >,
   SYNSEM [ LKEYS.KEYREL.CARG "jotunheim",
            PHON.ONSET con ] ].

jotunheimen := n_proper_le &
 [ STEM < "jotunheimen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "jotunheimen",
            PHON.ONSET con ] ].

jotunheimveien_n1 := n_proper_le &
 [ STEM < "jotunheimveien" >,
   SYNSEM [ LKEYS.KEYREL.CARG "jotunheimveien",
            PHON.ONSET con ] ].

jotunologist_n1 := n_intr_le &
 [ STEM < "jotunologist" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_jotunologist_n_1_rel",
            PHON.ONSET con ] ].

jotunologist_ttl := n_title_le &
 [ STEM < "jotunologist" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_jotunologist_n_1_rel",
            PHON.ONSET con ] ].

journal_n1 := n_intr_le &
 [ STEM < "journal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_journal_n_1_rel",
            PHON.ONSET con ] ].

journal_v1 := v_np*_trans_le &
 [ STEM < "journal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_journal_v_1_rel",
            PHON.ONSET con ] ].

journey_n1 := n_ppof_nosort_le &
 [ STEM < "journey" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_journey_n_of_rel",
            PHON.ONSET con ] ].

joy_n1 := n_mass_count_le &
 [ STEM < "joy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_joy_n_1_rel",
            PHON.ONSET con ] ].

jpl_n1 := n_proper_le &
 [ STEM < "jpl" >,
   SYNSEM [ LKEYS.KEYREL.CARG "jpl",
            PHON.ONSET con ] ].

jude_n1 := n_proper_le &
 [ STEM < "jude" >,
   SYNSEM [ LKEYS.KEYREL.CARG "jude",
            PHON.ONSET con ] ].

judge_n1 := n_ppof_le &
 [ STEM < "judge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_judge_n_of_rel",
            PHON.ONSET con ] ].

judge_v1 := v_np*_trans_le &
 [ STEM < "judge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_judge_v_1_rel",
            PHON.ONSET con ] ].

judge_v2 := v_cp_non_trans_le &
 [ STEM < "judge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_judge_v_1_rel",
            PHON.ONSET con ] ].

judge_v3 := v_np_as_le &
 [ STEM < "judge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_judge_v_as_rel",
            PHON.ONSET con ] ].

judge_v4 := v_sor_le &
 [ STEM < "judge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_judge_v_1_rel",
            PHON.ONSET con ] ].

judgement_n1 := n_intr_le &
 [ STEM < "judgement" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_judgment_n_1_rel",
            PHON.ONSET con ] ].

judgment_n1 := n_intr_le &
 [ STEM < "judgment" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_judgment_n_1_rel",
            PHON.ONSET con ] ].

judicial_a1 := adj_intrans_le &
 [ STEM < "judicial" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_judicial_a_1_rel",
            PHON.ONSET con ] ].

judson_n1 := n_proper_le &
 [ STEM < "judson" >,
   SYNSEM [ LKEYS.KEYREL.CARG "judson",
            PHON.ONSET con ] ].

jug_n1 := n_intr_le &
 [ STEM < "jug" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_jug_n_1_rel",
            PHON.ONSET con ] ].

juggle_around_v1 := v_particle_np_le &
 [ STEM < "juggle" >,
   SYNSEM [ LKEYS [ --COMPKEY _around_p_sel_rel,
                    KEYREL.PRED "_juggle_v_around_rel" ],
            PHON.ONSET con ] ].

juggle_v1 := v_np*_trans_le &
 [ STEM < "juggle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_juggle_v_1_rel",
            PHON.ONSET con ] ].

juice_n1 := n_mass_count_le &
 [ STEM < "juice" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_juice_n_1_rel",
            PHON.ONSET con ] ].

juicy_isect := adj_intrans_le &
 [ STEM < "juicy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_juicy_a_1_rel",
            PHON.ONSET con ] ].

juklavasskruna := n_proper_le &
 [ STEM < "juklavasskruna" >,
   SYNSEM [ LKEYS.KEYREL.CARG "juklavasskruna",
            PHON.ONSET con ] ].

juli_n1 := n_proper_le &
 [ STEM < "juli" >,
   SYNSEM [ LKEYS.KEYREL.CARG "juli",
            PHON.ONSET con ] ].

juliss_nd := n_proper_le &
 [ STEM < "juliss" >,
   SYNSEM [ LKEYS.KEYREL.CARG "juliss",
            PHON.ONSET con ] ].

july := n_month_le &
 [ STEM < "july" >,
   SYNSEM [ LKEYS.KEYREL.CARG "jul",
            PHON.ONSET con ] ].

july_2 := n_month_year_le &
 [ STEM < "july" >,
   SYNSEM [ LKEYS.KEYREL.CARG "jul",
            PHON.ONSET con ] ].

july_abb_n1 := n_month_le &
 [ STEM < "jul" >,
   SYNSEM [ LKEYS.KEYREL.CARG "jul",
            PHON.ONSET con ] ].

july_abb_n2 := n_month_year_le &
 [ STEM < "jul" >,
   SYNSEM [ LKEYS.KEYREL.CARG "jul",
            PHON.ONSET con ] ].

july_abb_n3 := n_month_le &
 [ STEM < "jul." >,
   SYNSEM [ LKEYS.KEYREL.CARG "jul",
            PHON.ONSET con ] ].

july_abb_n4 := n_month_year_le &
 [ STEM < "jul." >,
   SYNSEM [ LKEYS.KEYREL.CARG "jul",
            PHON.ONSET con ] ].

july_the_det := det_month_le &
 [ STEM < "july", "the" >,
   SYNSEM [ LKEYS.ALTKEYREL.CARG "jul",
            PHON.ONSET con ] ].

julyÃ  := n_proper_le &
 [ STEM < "julyÃ " >,
   SYNSEM [ LKEYS.KEYREL.CARG "julyÃ ",
            PHON.ONSET con ] ].

jumble_n1 := n_intr_le &
 [ STEM < "jumble" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_jumble_n_1_rel",
            PHON.ONSET con ] ].

jumble_v1 := v_np_trans_le &
 [ STEM < "jumble" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_jumble_v_1_rel",
            PHON.ONSET con ] ].

jump_n1 := n_intr_le &
 [ STEM < "jump" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_jump_n_1_rel",
            PHON.ONSET con ] ].

jump_to_v1 := v_empty_prep_intrans_le &
 [ STEM < "jump" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_jump_v_to_rel" ],
            PHON.ONSET con ] ].

jump_up_v1 := v_particle_le &
 [ STEM < "jump" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_jump_v_up_rel" ],
            PHON.ONSET con ] ].

jump_v1 := v_np_trans_noger_le &
 [ STEM < "jump" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_jump_v_1_rel",
            PHON.ONSET con ] ].

jump_v2 := v_prep_dir_le &
 [ STEM < "jump" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_jump_v_1_rel",
            PHON.ONSET con ] ].

junction_n1 := n_intr_le &
 [ STEM < "junction" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_junction_n_1_rel",
            PHON.ONSET con ] ].

june := n_month_le &
 [ STEM < "june" >,
   SYNSEM [ LKEYS.KEYREL.CARG "jun",
            PHON.ONSET con ] ].

june_2 := n_month_year_le &
 [ STEM < "june" >,
   SYNSEM [ LKEYS.KEYREL.CARG "jun",
            PHON.ONSET con ] ].

june_abb_n1 := n_month_le &
 [ STEM < "jun" >,
   SYNSEM [ LKEYS.KEYREL.CARG "jun",
            PHON.ONSET con ] ].

june_abb_n2 := n_month_year_le &
 [ STEM < "jun" >,
   SYNSEM [ LKEYS.KEYREL.CARG "jun",
            PHON.ONSET con ] ].

june_abb_n3 := n_month_le &
 [ STEM < "jun." >,
   SYNSEM [ LKEYS.KEYREL.CARG "jun",
            PHON.ONSET con ] ].

june_abb_n4 := n_month_year_le &
 [ STEM < "jun." >,
   SYNSEM [ LKEYS.KEYREL.CARG "jun",
            PHON.ONSET con ] ].

june_the_det := det_month_le &
 [ STEM < "june", "the" >,
   SYNSEM [ LKEYS.ALTKEYREL.CARG "jun",
            PHON.ONSET con ] ].

juneau_n1 := n_proper_city_le &
 [ STEM < "juneau" >,
   SYNSEM [ LKEYS.KEYREL.CARG "juneau",
            PHON.ONSET con ] ].

junior_ttl := n_post_title_le &
 [ STEM < "jr" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_junior_n_1_rel",
            PHON.ONSET con ] ].

junior_ttl_2 := n_post_title_le &
 [ STEM < "jr." >,
   SYNSEM [ LKEYS.KEYREL.PRED "_junior_n_1_rel",
            PHON.ONSET con ] ].

junk_n1 := n_mass_le &
 [ STEM < "junk" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_junk_n_1_rel",
            PHON.ONSET con ] ].

junk_v1 := v_np_trans_le &
 [ STEM < "junk" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_junk_v_1_rel",
            PHON.ONSET con ] ].

junky_adj := adj_intrans_le &
 [ STEM < "junky" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_junky_a_1_rel",
            PHON.ONSET con ] ].

jupiter_n1 := n_proper_le &
 [ STEM < "jupiter" >,
   SYNSEM [ LKEYS.KEYREL.CARG "jupiter",
            PHON.ONSET con ] ].

jurassic_n1 := n_proper_le &
 [ STEM < "jurassic" >,
   SYNSEM [ LKEYS.KEYREL.CARG "jurassic",
            PHON.ONSET con ] ].

jurisdiction_n1 := n_mass_count_le &
 [ STEM < "jurisdiction" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_jurisdiction_n_1_rel",
            PHON.ONSET con ] ].

jurisprudence_n1 := n_mass_le &
 [ STEM < "jurisprudence" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_jurisprudence_n_1_rel",
            PHON.ONSET con ] ].

jury_n1 := n_intr_le &
 [ STEM < "jury" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_jury_n_1_rel",
            PHON.ONSET con ] ].

just_adv1 := adv_int_vp_aux_le &
 [ STEM < "just" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_just_a_1_rel",
            PHON.ONSET con ] ].

just_deg := adv_degree_spec_jov_le &
 [ STEM < "just" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_just_x_deg_rel",
            PHON.ONSET con ] ].

just_in_case_adv1 := adv_int_vp_post_le &
 [ STEM < "just", "in", "case" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_just+in+case_a_1_rel",
            PHON.ONSET con ] ].

just_in_time_adv := adv_int_vp_le &
 [ STEM < "just", "in", "time" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_just+in+time_a_1_rel",
            PHON.ONSET con ] ].

just_like := p_le &
 [ STEM < "just", "like" >,
   SYNSEM [ LKEYS.KEYREL.PRED _just+like_p_rel,
            PHON.ONSET con ] ].

just_m_deg := adv_degree_spec_m_le &
 [ STEM < "just" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_just_x_m_rel",
            PHON.ONSET con ] ].

just_now_adv := adv_int_vp_le &
 [ STEM < "just", "now" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_just+now_a_1_rel",
            PHON.ONSET con ] ].

justice_n1 := n_mass_count_le &
 [ STEM < "justice" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_justice_n_1_rel",
            PHON.ONSET con ] ].

justifiable_isect := adj_intrans_le &
 [ STEM < "justifiable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_justifiable_a_1_rel",
            PHON.ONSET con ] ].

justifiably_a1 := adv_int_vp_le &
 [ STEM < "justifiably" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_justifiable_a_1_rel",
            PHON.ONSET con ] ].

justification_n1 := n_mass_count_le &
 [ STEM < "justification" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_justification_n_1_rel",
            PHON.ONSET con ] ].

justify_v1 := v_np*_trans_le &
 [ STEM < "justify" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_justify_v_1_rel",
            PHON.ONSET con ] ].

justify_v2 := v_cp_ques_fin_inf_non_trans_le &
 [ STEM < "justify" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_justify_v_1_rel",
            PHON.ONSET con ] ].

justly := adv_int_vp_le &
 [ STEM < "justly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_just_a_1_rel",
            PHON.ONSET con ] ].

jusvasshytta_n1 := n_proper_le &
 [ STEM < "jusvasshytta" >,
   SYNSEM [ LKEYS.KEYREL.CARG "jusvasshytta",
            PHON.ONSET con ] ].

jut_v1 := v_prep_dir_le &
 [ STEM < "jut" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_jut_v_1_rel",
            PHON.ONSET con ] ].

jutunheimen := n_proper_le &
 [ STEM < "jutunheimen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "jutunheimen",
            PHON.ONSET con ] ].

juvashytta_n1 := n_proper_le &
 [ STEM < "juvashytta" >,
   SYNSEM [ LKEYS.KEYREL.CARG "juvashytta",
            PHON.ONSET con ] ].

juvasshytta_n1 := n_proper_le &
 [ STEM < "juvasshytta" >,
   SYNSEM [ LKEYS.KEYREL.CARG "juvasshytta",
            PHON.ONSET con ] ].

juvassytta_n1 := n_proper_le &
 [ STEM < "juvassytta" >,
   SYNSEM [ LKEYS.KEYREL.CARG "juvassytta",
            PHON.ONSET con ] ].

juvflya_n1 := n_proper_le &
 [ STEM < "juvflya" >,
   SYNSEM [ LKEYS.KEYREL.CARG "juvflya",
            PHON.ONSET con ] ].

juvvatnet_n1 := n_proper_le &
 [ STEM < "juvvatnet" >,
   SYNSEM [ LKEYS.KEYREL.CARG "juvvatnet",
            PHON.ONSET con ] ].

jvc_n1 := n_proper_le &
 [ STEM < "jvc" >,
   SYNSEM [ LKEYS.KEYREL.CARG "jvc",
            PHON.ONSET con ] ].

jÃ¸lster := n_proper_le &
 [ STEM < "jÃ¸lster" >,
   SYNSEM [ LKEYS.KEYREL.CARG "jÃ¸lster",
            PHON.ONSET con ] ].

jÃ¸rgen_n1 := n_proper_le &
 [ STEM < "jÃ¸rgen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "jÃ¸rgen",
            PHON.ONSET con ] ].

k_n1 := n_intr_le &
 [ STEM < "k" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_k_n_1_rel",
            PHON.ONSET con ] ].

k_np1 := n_proper_le &
 [ STEM < "_k" >,
   SYNSEM [ LKEYS.KEYREL.CARG "k",
            PHON.ONSET con ] ].

k_period_np1 := n_proper_le &
 [ STEM < "k." >,
   SYNSEM [ LKEYS.KEYREL.CARG "k",
            PHON.ONSET con ] ].

k_period_np2 := n_proper_le &
 [ STEM < "_k." >,
   SYNSEM [ LKEYS.KEYREL.CARG "k",
            PHON.ONSET con ] ].

kadoorie_n1 := n_proper_le &
 [ STEM < "kadoorie" >,
   SYNSEM [ LKEYS.KEYREL.CARG "kadoorie",
            PHON.ONSET con ] ].

kaefer-plex_n1 := n_proper_le &
 [ STEM < "kaefer", "plex" >,
   SYNSEM [ LKEYS.KEYREL.CARG "kaefer-plex",
            PHON.ONSET con ] ].

kaefer_nd := n_proper_le &
 [ STEM < "kaefer" >,
   SYNSEM [ LKEYS.KEYREL.CARG "kaefer",
            PHON.ONSET con ] ].

kaestner_n1 := n_proper_le &
 [ STEM < "kaestner" >,
   SYNSEM [ LKEYS.KEYREL.CARG "kaestner",
            PHON.ONSET con ] ].

kahn_n1 := n_proper_le &
 [ STEM < "kahn" >,
   SYNSEM [ LKEYS.KEYREL.CARG "kahn",
            PHON.ONSET con ] ].

kaiserhof_n1 := n_intr_named_le &
 [ STEM < "kaiserhof" >,
   SYNSEM [ LKEYS.KEYREL.CARG "kaiserhof",
            PHON.ONSET con ] ].

kaiserslautern_n1 := n_proper_city_le &
 [ STEM < "kaiserslautern" >,
   SYNSEM [ LKEYS.KEYREL.CARG "kaiserslautern",
            PHON.ONSET con ] ].

kalahari_n1 := n_proper_le &
 [ STEM < "kalahari" >,
   SYNSEM [ LKEYS.KEYREL.CARG "kalahari",
            PHON.ONSET con ] ].

kaldedal_n1 := n_proper_le &
 [ STEM < "kaldedal" >,
   SYNSEM [ LKEYS.KEYREL.CARG "kaldedal",
            PHON.ONSET con ] ].

kaldedalsbrÃ¦rne_n1 := n_proper_le &
 [ STEM < "kaldedalsbrÃ¦rne" >,
   SYNSEM [ LKEYS.KEYREL.CARG "kaldedalsbrÃ¦rne",
            PHON.ONSET con ] ].

kalven_n1 := n_proper_le &
 [ STEM < "kalven" >,
   SYNSEM [ LKEYS.KEYREL.CARG "kalven",
            PHON.ONSET con ] ].

kalvÃ¥hÃ¸gda_n1 := n_proper_le &
 [ STEM < "kalvÃ¥hÃ¸gda" >,
   SYNSEM [ LKEYS.KEYREL.CARG "kalvÃ¥hÃ¸gda",
            PHON.ONSET con ] ].

kangaroo_n1 := n_intr_le &
 [ STEM < "kangaroo" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_kangaroo_n_1_rel",
            PHON.ONSET con ] ].

kansai_n1 := n_proper_city_le &
 [ STEM < "kansai" >,
   SYNSEM [ LKEYS.KEYREL.CARG "kansai",
            PHON.ONSET con ] ].

kansas_n1 := n_proper_le &
 [ STEM < "kansas" >,
   SYNSEM [ LKEYS.KEYREL.CARG "kansas",
            PHON.ONSET con ] ].

kansas_n2 := n_proper_abb_le &
 [ STEM < "ks" >,
   SYNSEM [ LKEYS.KEYREL.CARG "kansas",
            PHON.ONSET con ] ].

karasjok := n_proper_le &
 [ STEM < "karasjok" >,
   SYNSEM [ LKEYS.KEYREL.CARG "karasjok",
            PHON.ONSET con ] ].

kari_n1 := n_proper_le &
 [ STEM < "kari" >,
   SYNSEM [ LKEYS.KEYREL.CARG "kari",
            PHON.ONSET con ] ].

karl_n1 := n_proper_le &
 [ STEM < "karl" >,
   SYNSEM [ LKEYS.KEYREL.CARG "karl",
            PHON.ONSET con ] ].

karlsruhe_n1 := n_proper_city_le &
 [ STEM < "karlsruhe" >,
   SYNSEM [ LKEYS.KEYREL.CARG "karlsruhe",
            PHON.ONSET con ] ].

kassel_n1 := n_proper_le &
 [ STEM < "kassel" >,
   SYNSEM [ LKEYS.KEYREL.CARG "kassel",
            PHON.ONSET con ] ].

kathie_n1 := n_proper_le &
 [ STEM < "kathie" >,
   SYNSEM [ LKEYS.KEYREL.CARG "kathie",
            PHON.ONSET con ] ].

kattegat := n_proper_le &
 [ STEM < "kattegat" >,
   SYNSEM [ LKEYS.KEYREL.CARG "kattegat",
            PHON.ONSET con ] ].

kautflya_n1 := n_proper_le &
 [ STEM < "kautflya" >,
   SYNSEM [ LKEYS.KEYREL.CARG "kautflya",
            PHON.ONSET con ] ].

kautokeino := n_proper_le &
 [ STEM < "kautokeino" >,
   SYNSEM [ LKEYS.KEYREL.CARG "kautokeino",
            PHON.ONSET con ] ].

kavorkian := n_proper_le &
 [ STEM < "kavorkian" >,
   SYNSEM [ LKEYS.KEYREL.CARG "kavorkian",
            PHON.ONSET con ] ].

kayak_n1 := n_intr_le &
 [ STEM < "kayak" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_kayak_n_1_rel",
            PHON.ONSET con ] ].

kayaker_n1 := n_intr_le &
 [ STEM < "kayaker" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_kayaker_n_1_rel",
            PHON.ONSET con ] ].

kdge_n1 := n_proper_le &
 [ STEM < "kdge" >,
   SYNSEM [ LKEYS.KEYREL.CARG "kdge",
            PHON.ONSET con ] ].

keck_n1 := n_proper_le &
 [ STEM < "keck" >,
   SYNSEM [ LKEYS.KEYREL.CARG "keck",
            PHON.ONSET con ] ].

keel_n1 := n_intr_le &
 [ STEM < "keel" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_keel_n_1_rel",
            PHON.ONSET con ] ].

keel_over_v1 := v_particle_le &
 [ STEM < "keel" >,
   SYNSEM [ LKEYS [ --COMPKEY _over_p_sel_rel,
                    KEYREL.PRED "_keel_v_over_rel" ],
            PHON.ONSET con ] ].

keelson_n1 := n_intr_le &
 [ STEM < "keelson" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_keelson_n_1_rel",
            PHON.ONSET con ] ].

keen_a1 := adj_intrans_le &
 [ STEM < "keen" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_keen_a_1_rel",
            PHON.ONSET con ] ].

keen_a2 := adj_reg_equi_le &
 [ STEM < "keen" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_keen_a_1_rel",
            PHON.ONSET con ] ].

keep-prd := v_subj_equi_prd_le &
 [ STEM < "keep" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_keep_v_prd_rel",
            PHON.ONSET con ] ].

keep-prd_v2 := v_obj_equi_prd_le &
 [ STEM < "keep" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_keep_v_prd_rel",
            PHON.ONSET con ] ].

keep_n1 := n_intr_le &
 [ STEM < "keep" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_keep_n_1_rel",
            PHON.ONSET con ] ].

keep_tabs_on_v1_i := v_empty_prep_trans_idiom_le &
 [ STEM < "keep" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_keep_v_i_rel" ],
            PHON.ONSET con ] ].

keep_to_v1 := v_empty_prep_intrans_le &
 [ STEM < "keep" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_keep_v_to_rel" ],
            PHON.ONSET con ] ].

keep_up_v1 := v_particle_le &
 [ STEM < "keep" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_keep_v_up_rel" ],
            PHON.ONSET con ] ].

keep_up_v2 := v_particle_np_le &
 [ STEM < "keep" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_keep_v_up_rel" ],
            PHON.ONSET con ] ].

keep_up_with_v1 := v_particle_pp_le &
 [ STEM < "keep" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    --OCOMPKEY _with_p_rel,
                    KEYREL.PRED "_keep_v_up_rel" ],
            PHON.ONSET con ] ].

keep_v1 := v_np_trans_le &
 [ STEM < "keep" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_keep_v_unspec_rel",
            PHON.ONSET con ] ].

keep_v2 := v_particle_prp_le &
 [ STEM < "keep" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_keep_v_on_rel" ],
            PHON.ONSET con ] ].

keep_v3 := v_ssr_prp_le &
 [ STEM < "keep" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_keep_v_on_rel",
            PHON.ONSET con ] ].

keep_v4 := v_obj_equi_from_le &
 [ STEM < "keep" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_keep_v_from_rel",
            PHON.ONSET con ] ].

keeper_n1 := n_intr_le &
 [ STEM < "keeper" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_keeper_n_1_rel",
            PHON.ONSET con ] ].

kehl_n1 := n_proper_le &
 [ STEM < "kehl" >,
   SYNSEM [ LKEYS.KEYREL.CARG "kehl",
            PHON.ONSET con ] ].

keilhau_n1 := n_proper_le &
 [ STEM < "keilhau" >,
   SYNSEM [ LKEYS.KEYREL.CARG "keilhau",
            PHON.ONSET con ] ].

keilhaus_n1 := n_proper_le &
 [ STEM < "keilhaus" >,
   SYNSEM [ LKEYS.KEYREL.CARG "keilhaus",
            PHON.ONSET con ] ].

keisaren_n1 := n_proper_le &
 [ STEM < "keisaren" >,
   SYNSEM [ LKEYS.KEYREL.CARG "keisaren",
            PHON.ONSET con ] ].

keisarpasset_n1 := n_proper_le &
 [ STEM < "keisarpasset" >,
   SYNSEM [ LKEYS.KEYREL.CARG "keisarpasset",
            PHON.ONSET con ] ].

keisarplasset_n1 := n_proper_le &
 [ STEM < "keisarplasset" >,
   SYNSEM [ LKEYS.KEYREL.CARG "keisarplasset",
            PHON.ONSET con ] ].

keiserpasset := n_proper_le &
 [ STEM < "keiserpasset" >,
   SYNSEM [ LKEYS.KEYREL.CARG "keiserpasset",
            PHON.ONSET con ] ].

kempten_n1 := n_proper_le &
 [ STEM < "kempten" >,
   SYNSEM [ LKEYS.KEYREL.CARG "kempten",
            PHON.ONSET con ] ].

kenmore_n1 := n_proper_le &
 [ STEM < "kenmore" >,
   SYNSEM [ LKEYS.KEYREL.CARG "kenmore",
            PHON.ONSET con ] ].

kennywood_n1 := n_proper_le &
 [ STEM < "kennywood" >,
   SYNSEM [ LKEYS.KEYREL.CARG "kennywood",
            PHON.ONSET con ] ].

kentucky_n1 := n_proper_le &
 [ STEM < "kentucky" >,
   SYNSEM [ LKEYS.KEYREL.CARG "kentucky",
            PHON.ONSET con ] ].

kentucky_n2 := n_proper_abb_le &
 [ STEM < "ky" >,
   SYNSEM [ LKEYS.KEYREL.CARG "kentucky",
            PHON.ONSET con ] ].

kenya_n1 := n_proper_le &
 [ STEM < "kenya" >,
   SYNSEM [ LKEYS.KEYREL.CARG "kenya",
            PHON.ONSET con ] ].

kerf_n1 := n_intr_le &
 [ STEM < "kerf" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_kerf_n_1_rel",
            PHON.ONSET con ] ].

kernel_n1 := n_intr_le &
 [ STEM < "kernel" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_kernel_n_1_rel",
            PHON.ONSET con ] ].

kerstin_n1 := n_proper_le &
 [ STEM < "kerstin" >,
   SYNSEM [ LKEYS.KEYREL.CARG "kerstin",
            PHON.ONSET con ] ].

kettle_n1 := n_intr_le &
 [ STEM < "kettle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_kettle_n_1_rel",
            PHON.ONSET con ] ].

kevin_n1 := n_proper_le &
 [ STEM < "kevin" >,
   SYNSEM [ LKEYS.KEYREL.CARG "kevin",
            PHON.ONSET con ] ].

key_a1 := adj_intrans_le &
 [ STEM < "key" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_key_a_1_rel",
            PHON.ONSET con ] ].

key_in_v1 := v_particle_np_le &
 [ STEM < "key" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_key_v_in_rel" ],
            PHON.ONSET con ] ].

key_n1 := n_intr_le &
 [ STEM < "key" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_key_n_1_rel",
            PHON.ONSET con ] ].

keyboard_n1 := n_intr_le &
 [ STEM < "keyboard" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_keyboard_n_1_rel",
            PHON.ONSET con ] ].

keynote_n1 := n_intr_le &
 [ STEM < "keynote" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_keynote_n_1_rel",
            PHON.ONSET con ] ].

kg_abb_n1 := n_meas_le &
 [ STEM < "kg" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_kilogram_n_1_rel",
            PHON.ONSET con ] ].

kg_abb_n2 := n_meas_le &
 [ STEM < "kg." >,
   SYNSEM [ LKEYS.KEYREL.PRED "_kilogram_n_1_rel",
            PHON.ONSET con ] ].

kick_in_v1 := v_particle_np_le &
 [ STEM < "kick" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_kick_v_in_rel" ],
            PHON.ONSET con ] ].

kick_in_v2 := v_particle_le &
 [ STEM < "kick" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_kick_v_in_rel" ],
            PHON.ONSET con ] ].

kick_n1 := n_mass_count_le &
 [ STEM < "kick" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_kick_n_1_rel",
            PHON.ONSET con ] ].

kick_off_v1 := v_particle_np_le &
 [ STEM < "kick" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_kick_v_off_rel" ],
            PHON.ONSET con ] ].

kick_off_v2 := v_particle_le &
 [ STEM < "kick" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_kick_v_off_rel" ],
            PHON.ONSET con ] ].

kick_out_v1 := v_particle_np_le &
 [ STEM < "kick" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_kick_v_out_rel" ],
            PHON.ONSET con ] ].

kick_up_v1 := v_particle_np_le &
 [ STEM < "kick" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_kick_v_up_rel" ],
            PHON.ONSET con ] ].

kick_up_v2 := v_particle_le &
 [ STEM < "kick" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_kick_v_up_rel" ],
            PHON.ONSET con ] ].

kick_v1 := v_np*_trans_le &
 [ STEM < "kick" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_kick_v_1_rel",
            PHON.ONSET con ] ].

kickoff_n1 := n_intr_le &
 [ STEM < "kickoff" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_kickoff_n_1_rel",
            PHON.ONSET con ] ].

kickoff_n2 := n_intr_le &
 [ STEM < "kick-", "off" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_kickoff_n_1_rel",
            PHON.ONSET con ] ].

kid_n1 := n_intr_le &
 [ STEM < "kid" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_kid_n_1_rel",
            PHON.ONSET con ] ].

kid_v1 := v_unerg_le &
 [ STEM < "kid" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_kid_v_1_rel",
            PHON.ONSET con ] ].

kidnap_v1 := v_np*_trans_le &
 [ STEM < "kidnap" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_kidnap_v_1_rel",
            PHON.ONSET con ] ].

kidney_n1 := n_intr_le &
 [ STEM < "kidney" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_kidney_n_1_rel",
            PHON.ONSET con ] ].

kiel_n1 := n_proper_city_le &
 [ STEM < "kiel" >,
   SYNSEM [ LKEYS.KEYREL.CARG "kiel",
            PHON.ONSET con ] ].

kielhaus_n1 := n_proper_le &
 [ STEM < "kielhaus" >,
   SYNSEM [ LKEYS.KEYREL.CARG "kielhaus",
            PHON.ONSET con ] ].

kierulf_n1 := n_proper_le &
 [ STEM < "kierulf" >,
   SYNSEM [ LKEYS.KEYREL.CARG "kierulf",
            PHON.ONSET con ] ].

kilamanjaro_n1 := n_proper_le &
 [ STEM < "kilamanjaro" >,
   SYNSEM [ LKEYS.KEYREL.CARG "kilamanjaro",
            PHON.ONSET con ] ].

kill_n1 := n_intr_le &
 [ STEM < "kill" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_kill_n_1_rel",
            PHON.ONSET con ] ].

kill_off_v1 := v_particle_np_le &
 [ STEM < "kill" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_kill_v_off_rel" ],
            PHON.ONSET con ] ].

kill_v1 := v_np*_trans_le &
 [ STEM < "kill" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_kill_v_1_rel",
            PHON.ONSET con ] ].

kilo_n1 := n_meas_le &
 [ STEM < "kilo" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_kilogram_n_1_rel",
            PHON.ONSET con ] ].

kilogram_n1 := n_meas_le &
 [ STEM < "kilogram" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_kilogram_n_1_rel",
            PHON.ONSET con ] ].

kilometer_n1 := n_meas_le &
 [ STEM < "kilometer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_kilometer_n_1_rel",
            PHON.ONSET con ] ].

kim := n_proper_le &
 [ STEM < "kim" >,
   SYNSEM [ LKEYS.KEYREL.CARG "kim",
            PHON.ONSET con ] ].

kind_a1 := adj_intrans_le &
 [ STEM < "kind" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_kind_a_1_rel",
            PHON.ONSET con ] ].

kind_n1 := n_ppcomp_spr_le &
 [ STEM < "kind" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_kind_n_of-n_rel",
            PHON.ONSET con ] ].

kind_n2 := n_ppof_le &
 [ STEM < "kind" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_kind_n_of-n_rel",
            PHON.ONSET con ] ].

kind_of_deg := adv_degree_spec_jov_le &
 [ STEM < "kind", "of" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_kind+of_x_deg_rel",
            PHON.ONSET con ] ].

kind_of_scop := adv_le &
 [ STEM < "kind", "of" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_kind+of_a_1_rel",
            PHON.ONSET con ] ].

kind_pl_n1 := n_plur_sing_ppcomp_le &
 [ STEM < "kind" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_kind_n_of_rel" ],
            PHON.ONSET con ] ].

kinda_deg := adv_degree_spec_v_le &
 [ STEM < "kinda" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_kind+of_x_deg_rel",
            PHON.ONSET con ] ].

kinda_n1 := n_nomcomp_le &
 [ STEM < "kinda" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_kinda_n_1_rel",
            PHON.ONSET con ] ].

kindle_v1 := v_np_trans_le &
 [ STEM < "kindle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_kindle_v_1_rel",
            PHON.ONSET con ] ].

kindly := adv_int_vp_le &
 [ STEM < "kindly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_kind_a_1_rel",
            PHON.ONSET con ] ].

kindness_n1 := n_mass_count_le &
 [ STEM < "kindness" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_kindness_n_1_rel",
            PHON.ONSET con ] ].

kindred_a1 := adj_attr_intrans_le &
 [ STEM < "kindred" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_kindred_a_1_rel",
            PHON.ONSET con ] ].

king_n1 := n_ppof_le &
 [ STEM < "king" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_king_n_of_rel",
            PHON.ONSET con ] ].

king_n2 := n_proper_le &
 [ STEM < "king" >,
   SYNSEM [ LKEYS.KEYREL.CARG "king",
            PHON.ONSET con ] ].

king_size_a1 := adj_intrans_le &
 [ STEM < "king", "size" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_king+size_a_1_rel",
            PHON.ONSET con ] ].

king_ttl := n_title_le &
 [ STEM < "king" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_king_n_of_rel",
            PHON.ONSET con ] ].

kingdom_n1 := n_intr_le &
 [ STEM < "kingdom" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_kingdom_n_1_rel",
            PHON.ONSET con ] ].

kings_canyon_n1 := n_proper_city_le &
 [ STEM < "kings", "canyon" >,
   SYNSEM [ LKEYS.KEYREL.CARG "kings_canyon",
            PHON.ONSET con ] ].

kinsman_n1 := n_intr_le &
 [ STEM < "kinsman" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_kinsman_n_1_rel",
            PHON.ONSET con ] ].

kinter_n1 := n_proper_le &
 [ STEM < "kinter" >,
   SYNSEM [ LKEYS.KEYREL.CARG "kinter",
            PHON.ONSET con ] ].

kirkenes := n_proper_le &
 [ STEM < "kirkenes" >,
   SYNSEM [ LKEYS.KEYREL.CARG "kirkenes",
            PHON.ONSET con ] ].

kiruna := n_proper_le &
 [ STEM < "kiruna" >,
   SYNSEM [ LKEYS.KEYREL.CARG "kiruna",
            PHON.ONSET con ] ].

kiss_n1 := n_intr_le &
 [ STEM < "kiss" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_kiss_n_1_rel",
            PHON.ONSET con ] ].

kiss_v1 := v_np*_trans_le &
 [ STEM < "kiss" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_kiss_v_1_rel",
            PHON.ONSET con ] ].

kit_n1 := n_mass_count_le &
 [ STEM < "kit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_kit_n_1_rel",
            PHON.ONSET con ] ].

kit_out_v1 := v_particle_np_le &
 [ STEM < "kit" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_kit_v_out_rel" ],
            PHON.ONSET con ] ].

kitchen_n1 := n_intr_le &
 [ STEM < "kitchen" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_kitchen_n_1_rel",
            PHON.ONSET con ] ].

kitty_n1 := n_intr_le &
 [ STEM < "kitty" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_kitty_n_1_rel",
            PHON.ONSET con ] ].

kitty_n2 := n_proper_le &
 [ STEM < "kitty" >,
   SYNSEM [ LKEYS.KEYREL.CARG "kitty",
            PHON.ONSET con ] ].

kjeldebu := n_proper_le &
 [ STEM < "kjeldebu" >,
   SYNSEM [ LKEYS.KEYREL.CARG "kjeldebu",
            PHON.ONSET con ] ].

kjelfoss := n_proper_le &
 [ STEM < "kjelfoss" >,
   SYNSEM [ LKEYS.KEYREL.CARG "kjelfoss",
            PHON.ONSET con ] ].

kjellargluggen_n1 := n_proper_le &
 [ STEM < "kjellargluggen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "kjellargluggen",
            PHON.ONSET con ] ].

kjellfrid_n1 := n_proper_le &
 [ STEM < "kjellfrid" >,
   SYNSEM [ LKEYS.KEYREL.CARG "kjellfrid",
            PHON.ONSET con ] ].

kjeragveggen_n1 := n_proper_city_le &
 [ STEM < "kjeragveggen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "kjeragveggen",
            PHON.ONSET con ] ].

kjerringhetta_n1 := n_proper_le &
 [ STEM < "kjerringhetta" >,
   SYNSEM [ LKEYS.KEYREL.CARG "kjerringhetta",
            PHON.ONSET con ] ].

klatrernes_n1 := n_proper_le &
 [ STEM < "klatrernes" >,
   SYNSEM [ LKEYS.KEYREL.CARG "klatrernes",
            PHON.ONSET con ] ].

klee_n1 := n_proper_le &
 [ STEM < "klee" >,
   SYNSEM [ LKEYS.KEYREL.CARG "klee",
            PHON.ONSET con ] ].

klein_n1 := n_proper_le &
 [ STEM < "klein" >,
   SYNSEM [ LKEYS.KEYREL.CARG "klein",
            PHON.ONSET con ] ].

kleinschmidt_n1 := n_proper_le &
 [ STEM < "kleinschmidt" >,
   SYNSEM [ LKEYS.KEYREL.CARG "kleinschmidt",
            PHON.ONSET con ] ].

kleppe_n1 := n_proper_le &
 [ STEM < "kleppe" >,
   SYNSEM [ LKEYS.KEYREL.CARG "kleppe",
            PHON.ONSET con ] ].

kleppeskaret_n1 := n_proper_le &
 [ STEM < "kleppeskaret" >,
   SYNSEM [ LKEYS.KEYREL.CARG "kleppeskaret",
            PHON.ONSET con ] ].

klm := n_proper_le &
 [ STEM < "klm" >,
   SYNSEM [ LKEYS.KEYREL.CARG "klm",
            PHON.ONSET con ] ].

kluge_n1 := n_intr_le &
 [ STEM < "kluge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_kluge_n_1_rel",
            PHON.ONSET con ] ].

kluge_v1 := v_np_trans_le &
 [ STEM < "kluge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_kluge_v_1_rel",
            PHON.ONSET con ] ].

km2_abb_n1 := n_meas_le &
 [ STEM < "km2" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_kilometer+2_n_1_rel",
            PHON.ONSET con ] ].

km_abb_n1 := n_meas_le &
 [ STEM < "km" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_kilometer_n_1_rel",
            PHON.ONSET con ] ].

km_abb_n2 := n_meas_le &
 [ STEM < "km." >,
   SYNSEM [ LKEYS.KEYREL.PRED "_kilometer_n_1_rel",
            PHON.ONSET con ] ].

knack_n1 := n_intr_le &
 [ STEM < "knack" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_knack_n_1_rel",
            PHON.ONSET con ] ].

knag_n1 := n_proper_le &
 [ STEM < "knag" >,
   SYNSEM [ LKEYS.KEYREL.CARG "knag",
            PHON.ONSET con ] ].

knee_n1 := n_intr_le &
 [ STEM < "knee" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_knee_n_1_rel",
            PHON.ONSET con ] ].

kneel_v1 := v_unerg_le &
 [ STEM < "kneel" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_kneel_v_1_rel",
            PHON.ONSET con ] ].

knickers_n1 := n_plur_le &
 [ STEM < "knicker" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_knickers_n_1_rel",
            PHON.ONSET con ] ].

knife_edge_a1 := adj_intrans_le &
 [ STEM < "knife", "edge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_knife+edge_a_1_rel",
            PHON.ONSET con ] ].

knife_edge_a2 := adj_intrans_le &
 [ STEM < "knife-", "edge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_knife+edge_a_1_rel",
            PHON.ONSET con ] ].

knife_n1 := n_intr_le &
 [ STEM < "knife" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_knife_n_1_rel",
            PHON.ONSET con ] ].

knife_v1 := v_np_trans_le &
 [ STEM < "knife" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_knife_v_1_rel",
            PHON.ONSET con ] ].

knight_n1 := n_intr_le &
 [ STEM < "knight" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_knight_n_1_rel",
            PHON.ONSET con ] ].

knight_ridder_n1 := n_proper_le &
 [ STEM < "knight", "ridder" >,
   SYNSEM [ LKEYS.KEYREL.CARG "knight_ridder",
            PHON.ONSET con ] ].

knight_ridder_n2 := n_proper_le &
 [ STEM < "knight-", "ridder" >,
   SYNSEM [ LKEYS.KEYREL.CARG "knight_ridder",
            PHON.ONSET con ] ].

knit_v1 := v_np*_trans_le &
 [ STEM < "knit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_knit_v_1_rel",
            PHON.ONSET con ] ].

knit_v2 := v_ditrans_only_le &
 [ STEM < "knit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_knit_v_1_rel",
            PHON.ONSET con ] ].

knock_n1 := n_intr_le &
 [ STEM < "knock" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_knock_n_1_rel",
            PHON.ONSET con ] ].

knock_off_v1 := v_particle_np_le &
 [ STEM < "knock" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_knock_v_off_rel" ],
            PHON.ONSET con ] ].

knock_out_v1 := v_particle_np_le &
 [ STEM < "knock" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_knock_v_out_rel" ],
            PHON.ONSET con ] ].

knock_up_v1 := v_particle_np_le &
 [ STEM < "knock" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_knock_v_up_rel" ],
            PHON.ONSET con ] ].

knock_v1 := v_np*_trans_le &
 [ STEM < "knock" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_knock_v_1_rel",
            PHON.ONSET con ] ].

knock_v2 := v_np_prep_trans_dors_le &
 [ STEM < "knock" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_knock_v_1_rel",
            PHON.ONSET con ] ].

knoll_n1 := n_intr_le &
 [ STEM < "knoll" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_knoll_n_1_rel",
            PHON.ONSET con ] ].

knorr_n1 := n_proper_le &
 [ STEM < "knorr" >,
   SYNSEM [ LKEYS.KEYREL.CARG "knorr",
            PHON.ONSET con ] ].

knot_n1 := n_meas_le &
 [ STEM < "knot" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_knot_n_1_rel",
            PHON.ONSET con ] ].

knotty_a1 := adj_intrans_le &
 [ STEM < "knotty" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_knotty_a_1_rel",
            PHON.ONSET con ] ].

know_about_v1 := v_empty_prep_trans*_le &
 [ STEM < "know" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _about_p_sel_rel,
                    KEYREL.PRED "_know_v_about_rel" ],
            PHON.ONSET con ] ].

know_of_v1 := v_empty_prep_trans_le &
 [ STEM < "know" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_know_v_of_rel" ],
            PHON.ONSET con ] ].

know_of_v2 := v_empty_prep_intrans_le &
 [ STEM < "know" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_know_v_of_rel" ],
            PHON.ONSET con ] ].

know_v1 := v_np*_trans_le &
 [ STEM < "know" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_know_v_1_rel",
            PHON.ONSET con ] ].

know_v2 := v_cp_fin_inf_non_trans_le &
 [ STEM < "know" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_know_v_1_rel",
            PHON.ONSET con ] ].

know_v3 := v_subj_equi_le &
 [ STEM < "know" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_know_v_1_rel",
            PHON.ONSET con ] ].

know_v4 := v_sor_le &
 [ STEM < "know" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_know_v_1_rel",
            PHON.ONSET con ] ].

know_v5 := v_np_as_le &
 [ STEM < "know" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_know_v_as_rel",
            PHON.ONSET con ] ].

knowledgable_a1 := adj_trans_le &
 [ STEM < "knowledgable" >,
   SYNSEM [ LKEYS [ --COMPKEY _about_p_sel_rel,
                    KEYREL.PRED "_knowledgeable_a_about_rel" ],
            PHON.ONSET con ] ].

knowledge_n1 := n_mass_count_ppof_le &
 [ STEM < "knowledge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_knowledge_n_of_rel",
            PHON.ONSET con ] ].

knowledgeable_a1 := adj_trans_le &
 [ STEM < "knowledgeable" >,
   SYNSEM [ LKEYS [ --COMPKEY _about_p_sel_rel,
                    KEYREL.PRED "_knowledgeable_a_about_rel" ],
            PHON.ONSET con ] ].

known_a1 := adj_intrans_le &
 [ STEM < "known" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_known_a_1_rel",
            PHON.ONSET con ] ].

knud_n1 := n_proper_le &
 [ STEM < "knud" >,
   SYNSEM [ LKEYS.KEYREL.CARG "knud",
            PHON.ONSET con ] ].

knut_n1 := n_proper_le &
 [ STEM < "knut" >,
   SYNSEM [ LKEYS.KEYREL.CARG "knut",
            PHON.ONSET con ] ].

knutsegg_n1 := n_proper_le &
 [ STEM < "knutsegg" >,
   SYNSEM [ LKEYS.KEYREL.CARG "knutsegg",
            PHON.ONSET con ] ].

knutseggi_n1 := n_proper_le &
 [ STEM < "knutseggi" >,
   SYNSEM [ LKEYS.KEYREL.CARG "knutseggi",
            PHON.ONSET con ] ].

knutsen_n1 := n_proper_le &
 [ STEM < "knutsen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "knutsen",
            PHON.ONSET con ] ].

knutsholstind_n1 := n_proper_le &
 [ STEM < "knutsholstind" >,
   SYNSEM [ LKEYS.KEYREL.CARG "knutsholstind",
            PHON.ONSET con ] ].

knutshÃ¸_n1 := n_proper_le &
 [ STEM < "knutshÃ¸" >,
   SYNSEM [ LKEYS.KEYREL.CARG "knutshÃ¸",
            PHON.ONSET con ] ].

knÃ¤ckebrÃ¸d_n1 := n_mass_count_le &
 [ STEM < "knÃ¤ckebrÃ¸d" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_knÃ¤ckebrÃ¸d_n_1_rel",
            PHON.ONSET con ] ].

koblenz_n1 := n_proper_city_le &
 [ STEM < "koblenz" >,
   SYNSEM [ LKEYS.KEYREL.CARG "koblenz",
            PHON.ONSET con ] ].

kodak_n1 := n_proper_le &
 [ STEM < "kodak" >,
   SYNSEM [ LKEYS.KEYREL.CARG "kodak",
            PHON.ONSET con ] ].

koepp_n1 := n_proper_le &
 [ STEM < "koepp" >,
   SYNSEM [ LKEYS.KEYREL.CARG "koepp",
            PHON.ONSET con ] ].

koie := n_proper_le &
 [ STEM < "koie" >,
   SYNSEM [ LKEYS.KEYREL.CARG "koie",
            PHON.ONSET con ] ].

koldedalen_n1 := n_proper_le &
 [ STEM < "koldedalen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "koldedalen",
            PHON.ONSET con ] ].

koldtbord := n_mass_count_le &
 [ STEM < "koldtbord" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_koldtbord_n_1_rel",
            PHON.ONSET con ] ].

kolonnekjÃ¸ring := n_proper_le &
 [ STEM < "kolonnekjÃ¸ring" >,
   SYNSEM [ LKEYS.KEYREL.CARG "kolonnekjÃ¸ring",
            PHON.ONSET con ] ].

kolÃ¥stinden_n1 := n_proper_le &
 [ STEM < "kolÃ¥stinden" >,
   SYNSEM [ LKEYS.KEYREL.CARG "kolÃ¥stinden",
            PHON.ONSET con ] ].

kongevegen := n_proper_le &
 [ STEM < "kongevegen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "kongevegen",
            PHON.ONSET con ] ].

kongsdÃ¸la_n1 := n_proper_le &
 [ STEM < "kongsdÃ¸la" >,
   SYNSEM [ LKEYS.KEYREL.CARG "kongsdÃ¸la",
            PHON.ONSET con ] ].

kongshelleren := n_proper_le &
 [ STEM < "kongshelleren" >,
   SYNSEM [ LKEYS.KEYREL.CARG "kongshelleren",
            PHON.ONSET con ] ].

konika_n1 := n_proper_le &
 [ STEM < "konika" >,
   SYNSEM [ LKEYS.KEYREL.CARG "konika",
            PHON.ONSET con ] ].

konstanz_n1 := n_proper_city_le &
 [ STEM < "konstanz" >,
   SYNSEM [ LKEYS.KEYREL.CARG "konstanz",
            PHON.ONSET con ] ].

kopp_n1 := n_proper_le &
 [ STEM < "kopp" >,
   SYNSEM [ LKEYS.KEYREL.CARG "kopp",
            PHON.ONSET con ] ].

korea_n1 := n_proper_le &
 [ STEM < "korea" >,
   SYNSEM [ LKEYS.KEYREL.CARG "korea",
            PHON.ONSET con ] ].

korean_a1 := adj_intrans_le &
 [ STEM < "korean" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_korean_a_1_rel",
            PHON.ONSET con ] ].

korean_n1 := n_proper_le &
 [ STEM < "korean" >,
   SYNSEM [ LKEYS.KEYREL.CARG "_korean",
            PHON.ONSET con ] ].

korean_n2 := n_intr_le &
 [ STEM < "korean" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_korean_n_1_rel",
            PHON.ONSET con ] ].

koren := n_proper_le &
 [ STEM < "koren" >,
   SYNSEM [ LKEYS.KEYREL.CARG "koren",
            PHON.ONSET con ] ].

koresh_n1 := n_proper_le &
 [ STEM < "koresh" >,
   SYNSEM [ LKEYS.KEYREL.CARG "koresh",
            PHON.ONSET con ] ].

korn_n1 := n_proper_le &
 [ STEM < "korn" >,
   SYNSEM [ LKEYS.KEYREL.CARG "korn",
            PHON.ONSET con ] ].

kosher_isect := adj_intrans_le &
 [ STEM < "kosher" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_kosher_a_1_rel",
            PHON.ONSET con ] ].

kosovo_n1 := n_proper_city_le &
 [ STEM < "kosovo" >,
   SYNSEM [ LKEYS.KEYREL.CARG "kosovo",
            PHON.ONSET con ] ].

kristian_n1 := n_proper_le &
 [ STEM < "kristian" >,
   SYNSEM [ LKEYS.KEYREL.CARG "kristian",
            PHON.ONSET con ] ].

kristiania_n1 := n_proper_le &
 [ STEM < "kristiania" >,
   SYNSEM [ LKEYS.KEYREL.CARG "kristiania",
            PHON.ONSET con ] ].

kristiansand := n_proper_le &
 [ STEM < "kristiansand" >,
   SYNSEM [ LKEYS.KEYREL.CARG "kristiansand",
            PHON.ONSET con ] ].

kristiansund := n_proper_le &
 [ STEM < "kristiansund" >,
   SYNSEM [ LKEYS.KEYREL.CARG "kristiansund",
            PHON.ONSET con ] ].

kristoffer_n1 := n_proper_le &
 [ STEM < "kristoffer" >,
   SYNSEM [ LKEYS.KEYREL.CARG "kristoffer",
            PHON.ONSET con ] ].

kroepke := n_proper_le &
 [ STEM < "kroepke" >,
   SYNSEM [ LKEYS.KEYREL.CARG "kroepke",
            PHON.ONSET con ] ].

krona_n1 := n_intr_le &
 [ STEM < "krona" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_krona_n_1_rel",
            PHON.ONSET con ] ].

krona_n2 := n_plur_nocmpnd_le &
 [ STEM < "krona" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_krona_n_1_rel",
            PHON.ONSET con ] ].

krone_n1 := n_intr_le &
 [ STEM < "krone" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_krone_n_1_rel",
            PHON.ONSET con ] ].

krone_n2 := n_plur_nocmpnd_le &
 [ STEM < "krone" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_krone_n_1_rel",
            PHON.ONSET con ] ].

krossboden_n1 := n_proper_le &
 [ STEM < "krossboden" >,
   SYNSEM [ LKEYS.KEYREL.CARG "krossboden",
            PHON.ONSET con ] ].

krossbu_n1 := n_proper_le &
 [ STEM < "krossbu" >,
   SYNSEM [ LKEYS.KEYREL.CARG "krossbu",
            PHON.ONSET con ] ].

krossby_n1 := n_proper_le &
 [ STEM < "krossby" >,
   SYNSEM [ LKEYS.KEYREL.CARG "krossby",
            PHON.ONSET con ] ].

krosshÃ¸_n1 := n_proper_le &
 [ STEM < "krosshÃ¸" >,
   SYNSEM [ LKEYS.KEYREL.CARG "krosshÃ¸",
            PHON.ONSET con ] ].

krossoboden_n1 := n_proper_le &
 [ STEM < "krossoboden" >,
   SYNSEM [ LKEYS.KEYREL.CARG "krossoboden",
            PHON.ONSET con ] ].

ku_klux_klan_n1 := n_proper_le &
 [ STEM < "ku", "klux", "klan" >,
   SYNSEM [ LKEYS.KEYREL.CARG "ku_klux_klan",
            PHON.ONSET con ] ].

kuenig_nd := n_proper_le &
 [ STEM < "kuenig" >,
   SYNSEM [ LKEYS.KEYREL.CARG "kuenig",
            PHON.ONSET con ] ].

kuenigstein_nd := n_proper_city_le &
 [ STEM < "kuenigstein" >,
   SYNSEM [ LKEYS.KEYREL.CARG "kuenigstein",
            PHON.ONSET con ] ].

kuepp_nd := n_proper_le &
 [ STEM < "kuepp" >,
   SYNSEM [ LKEYS.KEYREL.CARG "kuepp",
            PHON.ONSET con ] ].

kuerner_nd := n_proper_le &
 [ STEM < "kuerner" >,
   SYNSEM [ LKEYS.KEYREL.CARG "kuerner",
            PHON.ONSET con ] ].

kvame_n1 := n_proper_le &
 [ STEM < "kvame" >,
   SYNSEM [ LKEYS.KEYREL.CARG "kvame",
            PHON.ONSET con ] ].

kvarvenveien_n1 := n_proper_city_le &
 [ STEM < "kvarvenveien" >,
   SYNSEM [ LKEYS.KEYREL.CARG "kvarvenveien",
            PHON.ONSET con ] ].

kveto_n1 := n_proper_le &
 [ STEM < "kveto" >,
   SYNSEM [ LKEYS.KEYREL.CARG "kveto",
            PHON.ONSET con ] ].

kvikne_n1 := n_proper_le &
 [ STEM < "kvikne" >,
   SYNSEM [ LKEYS.KEYREL.CARG "kvikne",
            PHON.ONSET con ] ].

kvinnherad := n_proper_le &
 [ STEM < "kvinnherad" >,
   SYNSEM [ LKEYS.KEYREL.CARG "kvinnherad",
            PHON.ONSET con ] ].

kvinnherad_kommune := n_proper_le &
 [ STEM < "kvinnherad", "kommune" >,
   SYNSEM [ LKEYS.KEYREL.CARG "kvinnherad_kommune",
            PHON.ONSET con ] ].

kvitevatnet_n1 := n_proper_le &
 [ STEM < "kvitevatnet" >,
   SYNSEM [ LKEYS.KEYREL.CARG "kvitevatnet",
            PHON.ONSET con ] ].

kwai_n1 := n_proper_le &
 [ STEM < "kwai" >,
   SYNSEM [ LKEYS.KEYREL.CARG "kwai",
            PHON.ONSET con ] ].

kwh_n1 := n_mass_count_le &
 [ STEM < "kwh" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_kwh_n_1_rel",
            PHON.ONSET con ] ].

kyocera_n1 := n_proper_le &
 [ STEM < "kyocera" >,
   SYNSEM [ LKEYS.KEYREL.CARG "kyocera",
            PHON.ONSET con ] ].

kyrkja_n1 := n_proper_le &
 [ STEM < "kyrkja" >,
   SYNSEM [ LKEYS.KEYREL.CARG "kyrkja",
            PHON.ONSET con ] ].

kyrkjeglupen_n1 := n_proper_le &
 [ STEM < "kyrkjeglupen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "kyrkjeglupen",
            PHON.ONSET con ] ].

kyrkjestÃ¸len := n_proper_le &
 [ STEM < "kyrkjestÃ¸len" >,
   SYNSEM [ LKEYS.KEYREL.CARG "kyrkjestÃ¸len",
            PHON.ONSET con ] ].

kyrkjetjÃ¸rna_n1 := n_proper_le &
 [ STEM < "kyrkjetjÃ¸rna" >,
   SYNSEM [ LKEYS.KEYREL.CARG "kyrkjetjÃ¸rna",
            PHON.ONSET con ] ].

kÃ¥rdal := n_proper_le &
 [ STEM < "kÃ¥rdal" >,
   SYNSEM [ LKEYS.KEYREL.CARG "kÃ¥rdal",
            PHON.ONSET con ] ].

kÃ¥re_n1 := n_proper_le &
 [ STEM < "kÃ¥re" >,
   SYNSEM [ LKEYS.KEYREL.CARG "kÃ¥re",
            PHON.ONSET con ] ].

l_np1 := n_proper_le &
 [ STEM < "_l" >,
   SYNSEM [ LKEYS.KEYREL.CARG "l",
            PHON.ONSET voc ] ].

l_period_np1 := n_proper_le &
 [ STEM < "l." >,
   SYNSEM [ LKEYS.KEYREL.CARG "l",
            PHON.ONSET voc ] ].

l_period_np2 := n_proper_le &
 [ STEM < "_l." >,
   SYNSEM [ LKEYS.KEYREL.CARG "l",
            PHON.ONSET voc ] ].

lab_n1 := n_intr_le &
 [ STEM < "lab" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lab_n_1_rel",
            PHON.ONSET con ] ].

label_n1 := n_intr_le &
 [ STEM < "label" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_label_n_1_rel",
            PHON.ONSET con ] ].

label_v1 := v_np_trans_le &
 [ STEM < "label" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_label_v_1_rel",
            PHON.ONSET con ] ].

label_v2 := v_ditrans_only_le &
 [ STEM < "label" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_label_v_1_rel",
            PHON.ONSET con ] ].

label_v3 := v_np_as_le &
 [ STEM < "label" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_label_v_as_rel",
            PHON.ONSET con ] ].

labor_day := n_holiday_le &
 [ STEM < "labor", "day" >,
   SYNSEM [ LKEYS.KEYREL.CARG "labor_day",
            PHON.ONSET con ] ].

labor_n1 := n_mass_count_le &
 [ STEM < "labor" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_labor_n_1_rel",
            PHON.ONSET con ] ].

labor_v1 := v_unerg_le &
 [ STEM < "labor" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_labor_v_1_rel",
            PHON.ONSET con ] ].

labor_v2 := v_subj_equi_le &
 [ STEM < "labor" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_labor_v_1_rel",
            PHON.ONSET con ] ].

laboratory_n1 := n_intr_le &
 [ STEM < "laboratory" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_laboratory_n_1_rel",
            PHON.ONSET con ] ].

laborer_n1 := n_intr_le &
 [ STEM < "laborer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_laborer_n_1_rel",
            PHON.ONSET con ] ].

laborious_a1 := adj_intrans_le &
 [ STEM < "laborious" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_laborious_a_1_rel",
            PHON.ONSET con ] ].

laboriously_adv1 := adv_int_vp_le &
 [ STEM < "laboriously" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_laborious_a_1_rel",
            PHON.ONSET con ] ].

labyrinten_n1 := n_proper_le &
 [ STEM < "labyrinten" >,
   SYNSEM [ LKEYS.KEYREL.CARG "labyrinten",
            PHON.ONSET con ] ].

labyrinth_n1 := n_intr_le &
 [ STEM < "labyrinth" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_labyrinth_n_1_rel",
            PHON.ONSET con ] ].

labyrinthine_a1 := adj_intrans_le &
 [ STEM < "labyrinthine" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_labyrinthine_a_1_rel",
            PHON.ONSET con ] ].

lacan_n1 := n_proper_le &
 [ STEM < "lacan" >,
   SYNSEM [ LKEYS.KEYREL.CARG "lacan",
            PHON.ONSET con ] ].

lace_n1 := n_mass_count_le &
 [ STEM < "lace" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lace_n_1_rel",
            PHON.ONSET con ] ].

lace_up_v1 := v_particle_np_le &
 [ STEM < "lace" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_lace_v_up_rel" ],
            PHON.ONSET con ] ].

lace_v1 := v_empty_prep*_trans_le &
 [ STEM < "lace" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_lace_v_with_rel" ],
            PHON.ONSET con ] ].

lacerate_v1 := v_np_trans_le &
 [ STEM < "lacerate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lacerate_v_1_rel",
            PHON.ONSET con ] ].

lack_n1 := n_mass_le &
 [ STEM < "lack" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lack_n_1_rel",
            PHON.ONSET con ] ].

lack_v1 := v_np_trans_le &
 [ STEM < "lack" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lack_v_1_rel",
            PHON.ONSET con ] ].

lacking_a1 := adj_intrans_le &
 [ STEM < "lacking" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lacking_a_1_rel",
            PHON.ONSET con ] ].

lacquer_n1 := n_mass_count_le &
 [ STEM < "lacquer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lacquer_n_1_rel",
            PHON.ONSET con ] ].

lad_n1 := n_intr_le &
 [ STEM < "lad" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lad_n_1_rel",
            PHON.ONSET con ] ].

ladder_n1 := n_intr_le &
 [ STEM < "ladder" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ladder_n_1_rel",
            PHON.ONSET con ] ].

laden_a1 := adj_trans_le &
 [ STEM < "laden" >,
   SYNSEM [ LKEYS [ --COMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_laden_a_with_rel" ],
            PHON.ONSET con ] ].

ladies_and_gentlemen_root_post := adv_disc_posth_le &
 [ STEM < "ladies", "and", "gentlemen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "ladies_and_gentlemen",
            PHON.ONSET con ] ].

ladies_and_gentlemen_root_pre := adv_disc_preh_le &
 [ STEM < "ladies", "and", "gentlemen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "ladies_and_gentlemen",
            PHON.ONSET con ] ].

lading_n1 := n_mass_le &
 [ STEM < "lading" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lading_n_1_rel",
            PHON.ONSET con ] ].

lady_n1 := n_intr_le &
 [ STEM < "lady" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lady_n_1_rel",
            PHON.ONSET con ] ].

ladybug_n1 := n_intr_le &
 [ STEM < "ladybug" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ladybug_n_1_rel",
            PHON.ONSET con ] ].

lafayette_n1 := n_proper_city_le &
 [ STEM < "lafayette" >,
   SYNSEM [ LKEYS.KEYREL.CARG "lafayette",
            PHON.ONSET con ] ].

lag_behind_v2 := v_particle_le &
 [ STEM < "lag" >,
   SYNSEM [ LKEYS [ --COMPKEY _behind_p_sel_rel,
                    KEYREL.PRED "_lag_v_behind_rel" ],
            PHON.ONSET con ] ].

lag_n1 := n_ppof_le &
 [ STEM < "lag" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lag_n_of_rel",
            PHON.ONSET con ] ].

lagemann_n1 := n_proper_le &
 [ STEM < "lagemann" >,
   SYNSEM [ LKEYS.KEYREL.CARG "lagemann",
            PHON.ONSET con ] ].

lagtunga := n_proper_le &
 [ STEM < "lagtunga" >,
   SYNSEM [ LKEYS.KEYREL.CARG "lagtunga",
            PHON.ONSET con ] ].

laid_back_a1 := adj_intrans_le &
 [ STEM < "laid", "back" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_laid+back_a_1_rel",
            PHON.ONSET con ] ].

laid_back_a2 := adj_intrans_le &
 [ STEM < "laid-", "back" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_laid+back_a_1_rel",
            PHON.ONSET con ] ].

lake_laced_a1 := adj_intrans_le &
 [ STEM < "lake-", "laced" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lake+laced_a_1_rel",
            PHON.ONSET con ] ].

lake_n1 := n_intr_le &
 [ STEM < "lake" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lake_n_1_rel",
            PHON.ONSET con ] ].

lake_studded_a1 := adj_intrans_le &
 [ STEM < "lake-", "studded" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lake+studded_a_1_rel",
            PHON.ONSET con ] ].

lake_title := n_title_le &
 [ STEM < "lake" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lake_n_1_rel",
            PHON.ONSET con ] ].

lake_title_1 := n_post_title_le &
 [ STEM < "lake" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lake_n_1_rel",
            PHON.ONSET con ] ].

lakeshore_n1 := n_intr_le &
 [ STEM < "lakeshore" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lakeshore_n_1_rel",
            PHON.ONSET con ] ].

lakeside_n1 := n_intr_le &
 [ STEM < "lakeside" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lakeside_n_1_rel",
            PHON.ONSET con ] ].

lamb_n1 := n_intr_le &
 [ STEM < "lamb" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lamb_n_1_rel",
            PHON.ONSET con ] ].

lame_a1 := adj_intrans_le &
 [ STEM < "lame" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lame_a_1_rel",
            PHON.ONSET con ] ].

lamont_n1 := n_proper_le &
 [ STEM < "lamont" >,
   SYNSEM [ LKEYS.KEYREL.CARG "lamont",
            PHON.ONSET con ] ].

lamp_n1 := n_intr_le &
 [ STEM < "lamp" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lamp_n_1_rel",
            PHON.ONSET con ] ].

land_n1 := n_mass_count_ppof_le &
 [ STEM < "land" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_land_n_of_rel",
            PHON.ONSET con ] ].

land_v1 := v_np_trans_noger_le &
 [ STEM < "land" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_land_v_cause_rel",
            PHON.ONSET con ] ].

land_v2 := v_unacc_le &
 [ STEM < "land" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_land_v_1_rel",
            PHON.ONSET con ] ].

land_v3 := v_ditrans_only_le &
 [ STEM < "land" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_land_v_1_rel",
            PHON.ONSET con ] ].

land_v4 := v_np_prep_trans_dors_le &
 [ STEM < "land" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_land_v_1_rel",
            PHON.ONSET con ] ].

landau_n1 := n_proper_city_le &
 [ STEM < "landau" >,
   SYNSEM [ LKEYS.KEYREL.CARG "landau",
            PHON.ONSET con ] ].

landbruksselskap_n1 := n_proper_le &
 [ STEM < "landbruksselskap" >,
   SYNSEM [ LKEYS.KEYREL.CARG "landbruksselskap",
            PHON.ONSET con ] ].

landesbank_n1 := n_proper_le &
 [ STEM < "landesbank" >,
   SYNSEM [ LKEYS.KEYREL.CARG "landesbank",
            PHON.ONSET con ] ].

landform_n1 := n_intr_le &
 [ STEM < "landform" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_landform_n_1_rel",
            PHON.ONSET con ] ].

landmark_n1 := n_intr_le &
 [ STEM < "landmark" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_landmark_n_1_rel",
            PHON.ONSET con ] ].

landowner_n1 := n_intr_le &
 [ STEM < "landowner" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_landowner_n_1_rel",
            PHON.ONSET con ] ].

landsberg_n1 := n_proper_city_le &
 [ STEM < "landsberg" >,
   SYNSEM [ LKEYS.KEYREL.CARG "landsberg",
            PHON.ONSET con ] ].

landscape_n1 := n_mass_count_le &
 [ STEM < "landscape" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_landscape_n_1_rel",
            PHON.ONSET con ] ].

landshut_n1 := n_proper_le &
 [ STEM < "landshut" >,
   SYNSEM [ LKEYS.KEYREL.CARG "landshut",
            PHON.ONSET con ] ].

landskapsvernomrÃ¥de := n_proper_le &
 [ STEM < "landskapsvernomrÃ¥de" >,
   SYNSEM [ LKEYS.KEYREL.CARG "landskapsvernomrÃ¥de",
            PHON.ONSET con ] ].

landslide_n1 := n_intr_le &
 [ STEM < "landslide" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_landslide_n_1_rel",
            PHON.ONSET con ] ].

landslide_n2 := n_intr_le &
 [ STEM < "land", "slide" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_landslide_n_1_rel",
            PHON.ONSET con ] ].

lane_n2 := n_intr_le &
 [ STEM < "lane" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lane_n_1_rel",
            PHON.ONSET con ] ].

lane_post_ttl := n_post_title_le &
 [ STEM < "lane" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lane_n_1_rel",
            PHON.ONSET con ] ].

lane_victory_n1 := n_proper_le &
 [ STEM < "lane", "victory" >,
   SYNSEM [ LKEYS.KEYREL.CARG "lane_victory",
            PHON.ONSET con ] ].

lang_n1 := n_proper_le &
 [ STEM < "lang" >,
   SYNSEM [ LKEYS.KEYREL.CARG "lang",
            PHON.ONSET con ] ].

langdÃ¸la := n_proper_le &
 [ STEM < "langdÃ¸la" >,
   SYNSEM [ LKEYS.KEYREL.CARG "langdÃ¸la",
            PHON.ONSET con ] ].

lange_n1 := n_proper_le &
 [ STEM < "lange" >,
   SYNSEM [ LKEYS.KEYREL.CARG "lange",
            PHON.ONSET con ] ].

langedal := n_proper_le &
 [ STEM < "langedal" >,
   SYNSEM [ LKEYS.KEYREL.CARG "langedal",
            PHON.ONSET con ] ].

langedalen_n1 := n_proper_le &
 [ STEM < "langedalen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "langedalen",
            PHON.ONSET con ] ].

langedalsÃ¥na_n1 := n_proper_le &
 [ STEM < "langedalsÃ¥na" >,
   SYNSEM [ LKEYS.KEYREL.CARG "langedalsÃ¥na",
            PHON.ONSET con ] ].

langedÃ¸la := n_proper_le &
 [ STEM < "langedÃ¸la" >,
   SYNSEM [ LKEYS.KEYREL.CARG "langedÃ¸la",
            PHON.ONSET con ] ].

langeskavlen_n1 := n_proper_le &
 [ STEM < "langeskavlen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "langeskavlen",
            PHON.ONSET con ] ].

langeskavltind_n1 := n_proper_le &
 [ STEM < "langeskavltind" >,
   SYNSEM [ LKEYS.KEYREL.CARG "langeskavltind",
            PHON.ONSET con ] ].

langglupdalen := n_proper_le &
 [ STEM < "langglupdalen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "langglupdalen",
            PHON.ONSET con ] ].

langhuso := n_proper_le &
 [ STEM < "langhuso" >,
   SYNSEM [ LKEYS.KEYREL.CARG "langhuso",
            PHON.ONSET con ] ].

langston_n1 := n_proper_le &
 [ STEM < "langston" >,
   SYNSEM [ LKEYS.KEYREL.CARG "langston",
            PHON.ONSET con ] ].

language_n1 := n_mass_count_le &
 [ STEM < "language" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_language_n_1_rel",
            PHON.ONSET con ] ].

langvatnet := n_proper_le &
 [ STEM < "langvatnet" >,
   SYNSEM [ LKEYS.KEYREL.CARG "langvatnet",
            PHON.ONSET con ] ].

lant_n1 := n_mass_count_le &
 [ STEM < "lant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lant_n_1_rel",
            PHON.ONSET con ] ].

lap_n1 := n_intr_le &
 [ STEM < "lap" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lap_n_1_rel",
            PHON.ONSET con ] ].

lap_v1 := v_np*_trans_le &
 [ STEM < "lap" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lap_v_1_rel",
            PHON.ONSET con ] ].

laptop_n1 := n_intr_le &
 [ STEM < "laptop" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_laptop_n_1_rel",
            PHON.ONSET con ] ].

laptop_n2 := n_intr_le &
 [ STEM < "lap", "top" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_laptop_n_1_rel",
            PHON.ONSET con ] ].

lard_n1 := n_mass_le &
 [ STEM < "lard" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lard_n_1_rel",
            PHON.ONSET con ] ].

lard_v1 := v_np_trans_le &
 [ STEM < "lard" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lard_v_1_rel",
            PHON.ONSET con ] ].

larder_n1 := n_intr_le &
 [ STEM < "larder" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_larder_n_1_rel",
            PHON.ONSET con ] ].

large_a1 := adj_intrans_le &
 [ STEM < "large" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_large_a_1_rel",
            PHON.ONSET con ] ].

largely := adv_int_vp_le &
 [ STEM < "largely" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_largely_a_1_rel",
            PHON.ONSET con ] ].

largely_deg := adv_degree_spec_le &
 [ STEM < "largely" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_largely_x_rel",
            PHON.ONSET con ] ].

larger_a1 := adj_comp_le &
 [ STEM < "larger" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_large_a_1_rel",
            PHON.ONSET con ] ].

largest_a1 := adj_superl_le &
 [ STEM < "largest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_large_a_1_rel",
            PHON.ONSET con ] ].

larry_n1 := n_proper_le &
 [ STEM < "larry" >,
   SYNSEM [ LKEYS.KEYREL.CARG "larry",
            PHON.ONSET con ] ].

lars_n1 := n_proper_le &
 [ STEM < "lars" >,
   SYNSEM [ LKEYS.KEYREL.CARG "lars",
            PHON.ONSET con ] ].

larsen := n_proper_le &
 [ STEM < "larsen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "larsen",
            PHON.ONSET con ] ].

larva_n1 := n_intr_le &
 [ STEM < "larva" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_larva_n_1_rel",
            PHON.ONSET con ] ].

las_vegas_n1 := n_proper_city_le &
 [ STEM < "las", "vegas" >,
   SYNSEM [ LKEYS.KEYREL.CARG "las_vegas",
            PHON.ONSET con ] ].

laser_n1 := n_intr_le &
 [ STEM < "laser" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_laser_n_1_rel",
            PHON.ONSET con ] ].

lash_at_v1 := v_empty_prep_intrans_le &
 [ STEM < "lash" >,
   SYNSEM [ LKEYS [ --COMPKEY _at_p_sel_rel,
                    KEYREL.PRED "_lash_v_at_rel" ],
            PHON.ONSET con ] ].

lash_n1 := n_intr_le &
 [ STEM < "lash" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lash_n_1_rel",
            PHON.ONSET con ] ].

lash_out_v1 := v_particle_le &
 [ STEM < "lash" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_lash_v_out_rel" ],
            PHON.ONSET con ] ].

lash_out_v2 := v_particle_pp_le &
 [ STEM < "lash" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    --OCOMPKEY _at_p_rel,
                    KEYREL.PRED "_lash_v_out_rel" ],
            PHON.ONSET con ] ].

lash_v1 := v_np_trans_le &
 [ STEM < "lash" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lash_v_1_rel",
            PHON.ONSET con ] ].

last_a1 := adj_intrans_notb_le &
 [ STEM < "last" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_last_a_1_rel",
            PHON.ONSET con ] ].

last_adv1 := adv_int_vp_post_nonmob_le &
 [ STEM < "last" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_last_a_1_rel",
            PHON.ONSET con ] ].

last_adv2 := adv_int_vp_pre_le &
 [ STEM < "last" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_last_a_1_rel",
            PHON.ONSET con ] ].

last_det := det_last_le &
 [ STEM < "last" >,
   SYNSEM [ LKEYS.ALTKEYREL.PRED "_last_a_1_rel",
            PHON.ONSET con ] ].

last_n1 := n_mass_no_cmpnd_le &
 [ STEM < "last" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_last_n_1_rel",
            PHON.ONSET con ] ].

last_n2 := n_bare_jmod_opt_le &
 [ STEM < "last" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_last_n_1_rel",
            PHON.ONSET con ] ].

last_out_v1 := v_particle_np_le &
 [ STEM < "last" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_last_v_out_rel" ],
            PHON.ONSET con ] ].

last_v1 := v_np*_trans_le &
 [ STEM < "last" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_last_v_1_rel",
            PHON.ONSET con ] ].

lastnamed_a1 := adj_intrans_le &
 [ STEM < "lastnamed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lastnamed_a_1_rel",
            PHON.ONSET con ] ].

late_a1 := adj_attr_intrans_le &
 [ STEM < "late" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_late_a_for_rel",
            PHON.ONSET con ] ].

late_a2 := adj_trans_oblig_le &
 [ STEM < "late" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_late_a_for_rel" ],
            PHON.ONSET con ] ].

late_adv := n_adv_gradable_le &
 [ STEM < "late" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED _late_p_rel,
                    KEYREL.PRED time_n_rel ],
            PHON.ONSET con ] ].

late_det := det_yesterday_tomorrow_le &
 [ STEM < "late" >,
   SYNSEM [ LKEYS.ALTKEYREL.PRED "_late_a_for_rel",
            PHON.ONSET con ] ].

lately_adv1 := adv_int_vp_post_le &
 [ STEM < "lately" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_late_a_for_rel",
            PHON.ONSET con ] ].

latent_a1 := adj_intrans_le &
 [ STEM < "latent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_latent_a_1_rel",
            PHON.ONSET con ] ].

later_a1 := adj_comp_le &
 [ STEM < "later" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_late_a_for_rel",
            PHON.ONSET con ] ].

later_adv := n_comp_adv_le &
 [ STEM < "later" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED "_late_a_for_rel",
                    KEYREL.PRED time_n_rel ],
            PHON.ONSET con ] ].

later_adv2 := adv_int_vp_pre_le &
 [ STEM < "later" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_later_a_1_rel",
            PHON.ONSET con ] ].

lateral_a1 := adj_intrans_le &
 [ STEM < "lateral" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lateral_a_1_rel",
            PHON.ONSET con ] ].

latest_a1 := adj_superl_le &
 [ STEM < "latest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_late_a_for_rel",
            PHON.ONSET con ] ].

lathe_n1 := n_intr_le &
 [ STEM < "lathe" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lathe_n_1_rel",
            PHON.ONSET con ] ].

latimer_n1 := n_proper_le &
 [ STEM < "latimer" >,
   SYNSEM [ LKEYS.KEYREL.CARG "latimer",
            PHON.ONSET con ] ].

latin := n_proper_le &
 [ STEM < "latin" >,
   SYNSEM [ LKEYS.KEYREL.CARG "latin",
            PHON.ONSET con ] ].

latin_american_a1 := adj_intrans_le &
 [ STEM < "latin", "american" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_latin+american_a_1_rel",
            PHON.ONSET con ] ].

latitude_n1 := n_mass_count_le &
 [ STEM < "latitude" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_latitude_n_1_rel",
            PHON.ONSET con ] ].

latter_isect := adj_intrans_le &
 [ STEM < "latter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_latter_a_1_rel",
            PHON.ONSET con ] ].

latter_n1 := n_no_cmpnd_le &
 [ STEM < "latter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_latter_n_1_rel",
            PHON.ONSET con ] ].

lattice_n1 := n_intr_le &
 [ STEM < "lattice" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lattice_n_1_rel",
            PHON.ONSET con ] ].

laud_v1 := v_np_trans_le &
 [ STEM < "laud" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_laud_v_1_rel",
            PHON.ONSET con ] ].

laugh_at_v1 := v_empty_prep_intrans_le &
 [ STEM < "laugh" >,
   SYNSEM [ LKEYS [ --COMPKEY _at_p_sel_rel,
                    KEYREL.PRED "_laugh_v_at_rel" ],
            PHON.ONSET con ] ].

laugh_n1 := n_intr_le &
 [ STEM < "laugh" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_laugh_n_1_rel",
            PHON.ONSET con ] ].

laugh_off_v1 := v_particle_np_le &
 [ STEM < "laugh" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_laugh_v_off_rel" ],
            PHON.ONSET con ] ].

laugh_v1 := v_unerg_le &
 [ STEM < "laugh" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_laugh_v_at_rel",
            PHON.ONSET con ] ].

laughter_n1 := n_mass_le &
 [ STEM < "laughter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_laughter_n_1_rel",
            PHON.ONSET con ] ].

launch_into_v1 := v_empty_prep_intrans_le &
 [ STEM < "launch" >,
   SYNSEM [ LKEYS [ --COMPKEY _into_p_sel_rel,
                    KEYREL.PRED "_launch_v_into_rel" ],
            PHON.ONSET con ] ].

launch_n1 := n_mass_count_le &
 [ STEM < "launch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_launch_n_1_rel",
            PHON.ONSET con ] ].

launch_v1 := v_np_trans_noger_le &
 [ STEM < "launch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_launch_v_cause_rel",
            PHON.ONSET con ] ].

launch_v2 := v_unacc_le &
 [ STEM < "launch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_launch_v_1_rel",
            PHON.ONSET con ] ].

laundry_n1 := n_mass_count_le &
 [ STEM < "laundry" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_laundry_n_1_rel",
            PHON.ONSET con ] ].

lauper_n1 := n_proper_le &
 [ STEM < "lauper" >,
   SYNSEM [ LKEYS.KEYREL.CARG "lauper",
            PHON.ONSET con ] ].

laureate_n1 := n_intr_le &
 [ STEM < "laureate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_laureate_n_1_rel",
            PHON.ONSET con ] ].

lauritzen_n1 := n_proper_le &
 [ STEM < "lauritzen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "lauritzen",
            PHON.ONSET con ] ].

lauryl_n1 := n_mass_le &
 [ STEM < "lauryl" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lauryl_n_1_rel",
            PHON.ONSET con ] ].

lause_n1 := n_proper_le &
 [ STEM < "lause" >,
   SYNSEM [ LKEYS.KEYREL.CARG "lause",
            PHON.ONSET con ] ].

lauser_n1 := n_proper_le &
 [ STEM < "lauser" >,
   SYNSEM [ LKEYS.KEYREL.CARG "lauser",
            PHON.ONSET con ] ].

laver_n1 := n_intr_le &
 [ STEM < "laver" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_laver_n_1_rel",
            PHON.ONSET con ] ].

lavergne_n1 := n_proper_le &
 [ STEM < "lavergne" >,
   SYNSEM [ LKEYS.KEYREL.CARG "lavergne",
            PHON.ONSET con ] ].

lavish_a1 := adj_intrans_le &
 [ STEM < "lavish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lavish_a_1_rel",
            PHON.ONSET con ] ].

lavish_v1 := v_empty_prep*_trans_le &
 [ STEM < "lavish" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_lavish_v_on_rel" ],
            PHON.ONSET con ] ].

law_n1 := n_mass_count_le &
 [ STEM < "law" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_law_n_1_rel",
            PHON.ONSET con ] ].

law_n2 := n_proper_le &
 [ STEM < "law" >,
   SYNSEM [ LKEYS.KEYREL.CARG "law",
            PHON.ONSET con ] ].

lawe_v1 := v_np_trans_le &
 [ STEM < "lawe" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lawe_v_1_rel",
            PHON.ONSET con ] ].

lawful_a1 := adj_intrans_le &
 [ STEM < "lawful" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lawful_a_1_rel",
            PHON.ONSET con ] ].

lawfully := adv_int_vp_le &
 [ STEM < "lawfully" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lawful_a_1_rel",
            PHON.ONSET con ] ].

lawn_n1 := n_intr_le &
 [ STEM < "lawn" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lawn_n_1_rel",
            PHON.ONSET con ] ].

lawyer_n1 := n_intr_le &
 [ STEM < "lawyer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lawyer_n_1_rel",
            PHON.ONSET con ] ].

lay_down_v1 := v_particle_le &
 [ STEM < "lay" >,
   SYNSEM [ LKEYS [ --COMPKEY _down_p_sel_rel,
                    KEYREL.PRED "_lay_v_down_rel" ],
            PHON.ONSET con ] ].

lay_off_v1 := v_particle_np_le &
 [ STEM < "lay" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_lay_v_off_rel" ],
            PHON.ONSET con ] ].

lay_up_v1 := v_particle_np_le &
 [ STEM < "lay" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_lay_v_up_rel" ],
            PHON.ONSET con ] ].

lay_v1 := v_np_prep_trans_dors_le &
 [ STEM < "lay" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lay_v_1_rel",
            PHON.ONSET con ] ].

layer_n1 := n_ppof_le &
 [ STEM < "layer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_layer_n_of_rel",
            PHON.ONSET con ] ].

layover_n1 := n_intr_le &
 [ STEM < "layover" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_layover_n_1_rel",
            PHON.ONSET con ] ].

lazily_a1 := adv_int_vp_le &
 [ STEM < "lazily" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lazy_a_1_rel",
            PHON.ONSET con ] ].

lazy_a1 := adj_intrans_le &
 [ STEM < "lazy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lazy_a_1_rel",
            PHON.ONSET con ] ].

lcd_n1 := n_intr_le &
 [ STEM < "lcd" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lcd_n_1_rel",
            PHON.ONSET con ] ].

lead_n1 := n_mass_count_le &
 [ STEM < "lead" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lead_n_1_rel",
            PHON.ONSET con ] ].

lead_on_v1 := v_particle_np_le &
 [ STEM < "lead" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_lead_v_on_rel" ],
            PHON.ONSET con ] ].

lead_on_v2 := v_particle_le &
 [ STEM < "lead" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_lead_v_on_rel" ],
            PHON.ONSET con ] ].

lead_v1 := v_np*_trans_le &
 [ STEM < "lead" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lead_v_1_rel",
            PHON.ONSET con ] ].

lead_v2 := v_empty_prep_trans*_le &
 [ STEM < "lead" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_lead_v_to_rel" ],
            PHON.ONSET con ] ].

lead_v3 := v_obj_equi_le &
 [ STEM < "lead" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lead_v_1_rel",
            PHON.ONSET con ] ].

leader_n1 := n_ppof_le &
 [ STEM < "leader" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_leader_n_of_rel",
            PHON.ONSET con ] ].

leadership_n1 := n_mass_le &
 [ STEM < "leadership" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_leadership_n_1_rel",
            PHON.ONSET con ] ].

leading_isect := adj_intrans_le &
 [ STEM < "leading" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_leading_a_1_rel",
            PHON.ONSET con ] ].

leadsman_n1 := n_intr_le &
 [ STEM < "leadsman" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_leadsman_n_1_rel",
            PHON.ONSET con ] ].

leaf_n1 := n_mass_count_le &
 [ STEM < "leaf" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_leaf_n_1_rel",
            PHON.ONSET con ] ].

leafy_a1 := adj_intrans_le &
 [ STEM < "leafy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_leafy_a_1_rel",
            PHON.ONSET con ] ].

league_n1 := n_ppof_le &
 [ STEM < "league" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_league_n_of_rel",
            PHON.ONSET con ] ].

league_post_ttl := n_post_title_le &
 [ STEM < "league" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_league_n_of_rel",
            PHON.ONSET con ] ].

leak_n1 := n_intr_le &
 [ STEM < "leak" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_leak_n_1_rel",
            PHON.ONSET con ] ].

leak_v1 := v_prep_dir_le &
 [ STEM < "leak" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_leak_v_1_rel",
            PHON.ONSET con ] ].

leak_v2 := v_np_trans_le &
 [ STEM < "leak" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_leak_v_cause_rel",
            PHON.ONSET con ] ].

lean_v1 := v_empty_prep_intrans_le &
 [ STEM < "lean" >,
   SYNSEM [ LKEYS [ --COMPKEY _towards_p_sel_rel,
                    KEYREL.PRED "_lean_v_towards_rel" ],
            PHON.ONSET con ] ].

lean_v2 := v_empty_prep_intrans_le &
 [ STEM < "lean" >,
   SYNSEM [ LKEYS [ --COMPKEY _toward_p_sel_rel,
                    KEYREL.PRED "_lean_v_toward_rel" ],
            PHON.ONSET con ] ].

lean_v3 := v_prep_dir_le &
 [ STEM < "lean" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lean_v_towards_rel",
            PHON.ONSET con ] ].

leap_over_v1 := v_empty_prep_intrans_le &
 [ STEM < "leap" >,
   SYNSEM [ LKEYS [ --COMPKEY _over_p_sel_rel,
                    KEYREL.PRED "_leap_v_over_rel" ],
            PHON.ONSET con ] ].

leap_v1 := v_np*_trans_le &
 [ STEM < "leap" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_leap_v_1_rel",
            PHON.ONSET con ] ].

lear_n1 := n_proper_le &
 [ STEM < "lear" >,
   SYNSEM [ LKEYS.KEYREL.CARG "lear",
            PHON.ONSET con ] ].

learn_about_v1 := v_empty_prep_intrans_le &
 [ STEM < "learn" >,
   SYNSEM [ LKEYS [ --COMPKEY _about_p_sel_rel,
                    KEYREL.PRED "_learn_v_about_rel" ],
            PHON.ONSET con ] ].

learn_v1 := v_np*_trans_le &
 [ STEM < "learn" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_learn_v_1_rel",
            PHON.ONSET con ] ].

learn_v2 := v_cp_fin_inf_non_trans_le &
 [ STEM < "learn" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_learn_v_1_rel",
            PHON.ONSET con ] ].

learn_v4 := v_subj_equi_le &
 [ STEM < "learn" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_learn_v_1_rel",
            PHON.ONSET con ] ].

lease_from_v1 := v_empty_prep_trans_le &
 [ STEM < "lease" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _from_p_sel_rel,
                    KEYREL.PRED "_lease_v_from_rel" ],
            PHON.ONSET con ] ].

lease_n1 := n_intr_le &
 [ STEM < "lease" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lease_n_1_rel",
            PHON.ONSET con ] ].

lease_to_v1 := v_empty_prep_trans_le &
 [ STEM < "lease" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_lease_v_to_rel" ],
            PHON.ONSET con ] ].

lease_v1 := v_np_trans_le &
 [ STEM < "lease" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lease_v_1_rel",
            PHON.ONSET con ] ].

leash_n1 := n_intr_le &
 [ STEM < "leash" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_leash_n_1_rel",
            PHON.ONSET con ] ].

leash_v1 := v_np_trans_le &
 [ STEM < "leash" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_leash_v_1_rel",
            PHON.ONSET con ] ].

least_a1 := adj_intrans_le &
 [ STEM < "least" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_least_a_1_rel",
            PHON.ONSET con ] ].

least_adv1 := adv_int_vp_post_nonmob_le &
 [ STEM < "least" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_least_a_1_rel",
            PHON.ONSET con ] ].

least_deg := adv_degree_spec_sup_le &
 [ STEM < "least" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_least_x_deg_rel",
            PHON.ONSET con ] ].

least_s1 := adv_comparison_spec_le &
 [ STEM < "least" >,
   SYNSEM [ LKEYS.KEYREL.PRED _least_x_comp_rel,
            PHON.ONSET con ] ].

leather_n1 := n_mass_count_le &
 [ STEM < "leather" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_leather_n_1_rel",
            PHON.ONSET con ] ].

leave_behind_v1 := v_particle_np_le &
 [ STEM < "leave" >,
   SYNSEM [ LKEYS [ --COMPKEY _behind_p_sel_rel,
                    KEYREL.PRED "_leave_v_behind_rel" ],
            PHON.ONSET con ] ].

leave_in_v1 := v_particle_np_le &
 [ STEM < "leave" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_leave_v_in_rel" ],
            PHON.ONSET con ] ].

leave_n1 := n_mass_le &
 [ STEM < "leave" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_leave_n_1_rel",
            PHON.ONSET con ] ].

leave_off_v1 := v_particle_np_le &
 [ STEM < "leave" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_leave_v_off_rel" ],
            PHON.ONSET con ] ].

leave_open_v1 := v_particle_np_le &
 [ STEM < "leave" >,
   SYNSEM [ LKEYS [ --COMPKEY _open_a_sel_rel,
                    KEYREL.PRED "_leave_v_open_rel" ],
            PHON.ONSET con ] ].

leave_out_v1 := v_particle_np_le &
 [ STEM < "leave" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_leave_v_out_rel" ],
            PHON.ONSET con ] ].

leave_over_v1 := v_particle_np_le &
 [ STEM < "leave" >,
   SYNSEM [ LKEYS [ --COMPKEY _over_p_sel_rel,
                    KEYREL.PRED "_leave_v_over_rel" ],
            PHON.ONSET con ] ].

leave_to_v1 := v_expl_pp_inf_oeq_le &
 [ STEM < "leave" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_leave_v_to_rel" ],
            PHON.ONSET con ] ].

leave_v1 := v_np*_trans_le &
 [ STEM < "leave" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_leave_v_1_rel",
            PHON.ONSET con ] ].

leave_v1_i := v_np_non_trans_idiom_le &
 [ STEM < "leave" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_leave_v_i_rel",
            PHON.ONSET con ] ].

leave_v2 := v_obj_equi_prd_le &
 [ STEM < "leave" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_leave_v_1_rel",
            PHON.ONSET con ] ].

leave_v4 := v_ditrans_le &
 [ STEM < "leave" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_leave_v_1_rel",
            PHON.ONSET con ] ].

leaven_with_v1 := v_empty_prep*_trans_le &
 [ STEM < "leaven" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_leaven_v_with_rel" ],
            PHON.ONSET con ] ].

lecherous_a1 := adj_intrans_le &
 [ STEM < "lecherous" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lecherous_a_1_rel",
            PHON.ONSET con ] ].

lecture_free_a1 := adj_intrans_le &
 [ STEM < "lecture", "free" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lecture+free_a_1_rel",
            PHON.ONSET con ] ].

lecture_n1 := n_intr_le &
 [ STEM < "lecture" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lecture_n_1_rel",
            PHON.ONSET con ] ].

lecture_on_v1 := v_empty_prep_intrans_le &
 [ STEM < "lecture" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_lecture_v_on_rel" ],
            PHON.ONSET con ] ].

lecture_v1 := v_unerg_le &
 [ STEM < "lecture" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lecture_v_1_rel",
            PHON.ONSET con ] ].

led_zeppelin_n1 := n_proper_le &
 [ STEM < "led", "zeppelin" >,
   SYNSEM [ LKEYS.KEYREL.CARG "led_zeppelin",
            PHON.ONSET con ] ].

ledge_n1 := n_intr_le &
 [ STEM < "ledge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ledge_n_1_rel",
            PHON.ONSET con ] ].

ledger_n1 := n_intr_le &
 [ STEM < "ledger" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ledger_n_1_rel",
            PHON.ONSET con ] ].

lee := n_proper_le &
 [ STEM < "lee" >,
   SYNSEM [ LKEYS.KEYREL.CARG "lee",
            PHON.ONSET con ] ].

leeway_n1 := n_mass_le &
 [ STEM < "leeway" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_leeway_n_1_rel",
            PHON.ONSET con ] ].

left_a1 := adj_intrans_le &
 [ STEM < "left" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_left_a_1_rel",
            PHON.ONSET con ] ].

left_handed_a1 := adj_intrans_le &
 [ STEM < "left-", "handed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_left+handed_a_1_rel",
            PHON.ONSET con ] ].

left_handed_a2 := adj_intrans_le &
 [ STEM < "left", "handed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_left+handed_a_1_rel",
            PHON.ONSET con ] ].

left_hander_n1 := n_intr_le &
 [ STEM < "left", "hander" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_left+hander_n_1_rel",
            PHON.ONSET con ] ].

left_hander_n2 := n_intr_le &
 [ STEM < "left-", "hander" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_left+hander_n_1_rel",
            PHON.ONSET con ] ].

left_n1 := n_mass_le &
 [ STEM < "left" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_left_n_1_rel",
            PHON.ONSET con ] ].

left_over_a1 := adj_attr_intrans_le &
 [ STEM < "left", "over" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_left+over_a_1_rel",
            PHON.ONSET con ] ].

left_over_a2 := adj_pred_intrans_le &
 [ STEM < "left", "over" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_left+over_a_1_rel",
            PHON.ONSET con ] ].

leftover_a1 := adj_attr_intrans_le &
 [ STEM < "leftover" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_leftover_a_1_rel",
            PHON.ONSET con ] ].

leftq_pct := punct_leftq_le &
 [ STEM < "`" >,
   SYNSEM.PHON.ONSET onset ].

leftwing_a1 := adj_intrans_le &
 [ STEM < "leftwing" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_leftwing_a_1_rel",
            PHON.ONSET con ] ].

leg_n1 := n_intr_le &
 [ STEM < "leg" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_leg_n_1_rel",
            PHON.ONSET con ] ].

leg_v1 := v_np_trans_le &
 [ STEM < "leg" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_leg_v_1_rel",
            PHON.ONSET con ] ].

legacy_n1 := n_intr_le &
 [ STEM < "legacy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_legacy_n_1_rel",
            PHON.ONSET con ] ].

legal_a1 := adj_intrans_le &
 [ STEM < "legal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_legal_a_1_rel",
            PHON.ONSET con ] ].

legally := adv_int_vp_le &
 [ STEM < "legally" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_legal_a_1_rel",
            PHON.ONSET con ] ].

legend_n1 := n_intr_le &
 [ STEM < "legend" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_legend_n_1_rel",
            PHON.ONSET con ] ].

legendary_a1 := adj_intrans_le &
 [ STEM < "legendary" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_legendary_a_1_rel",
            PHON.ONSET con ] ].

legislate_v1 := v_np_trans_le &
 [ STEM < "legislate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_legislate_v_1_rel",
            PHON.ONSET con ] ].

legislation_n1 := n_mass_le &
 [ STEM < "legislation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_legislation_n_1_rel",
            PHON.ONSET con ] ].

legislative_a1 := adj_intrans_le &
 [ STEM < "legislative" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_legislative_a_1_rel",
            PHON.ONSET con ] ].

legislature_n1 := n_intr_le &
 [ STEM < "legislature" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_legislature_n_1_rel",
            PHON.ONSET con ] ].

legitimate_a1 := adj_intrans_le &
 [ STEM < "legitimate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_legitimate_a_1_rel",
            PHON.ONSET con ] ].

leif := n_proper_le &
 [ STEM < "leif" >,
   SYNSEM [ LKEYS.KEYREL.CARG "leif",
            PHON.ONSET con ] ].

leiligheter_n1 := n_proper_le &
 [ STEM < "leiligheter" >,
   SYNSEM [ LKEYS.KEYREL.CARG "leiligheter",
            PHON.ONSET con ] ].

leipzig_n1 := n_proper_city_le &
 [ STEM < "leipzig" >,
   SYNSEM [ LKEYS.KEYREL.CARG "leipzig",
            PHON.ONSET con ] ].

leirbreen_n1 := n_proper_le &
 [ STEM < "leirbreen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "leirbreen",
            PHON.ONSET con ] ].

leirdalen_n1 := n_proper_le &
 [ STEM < "leirdalen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "leirdalen",
            PHON.ONSET con ] ].

leirungen_n1 := n_proper_le &
 [ STEM < "leirungen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "leirungen",
            PHON.ONSET con ] ].

leirungene_n1 := n_proper_le &
 [ STEM < "leirungene" >,
   SYNSEM [ LKEYS.KEYREL.CARG "leirungene",
            PHON.ONSET con ] ].

leirungsdalen_n1 := n_proper_le &
 [ STEM < "leirungsdalen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "leirungsdalen",
            PHON.ONSET con ] ].

leirungsÃ¥a_n1 := n_proper_le &
 [ STEM < "leirungsÃ¥a" >,
   SYNSEM [ LKEYS.KEYREL.CARG "leirungsÃ¥a",
            PHON.ONSET con ] ].

leirvann_n1 := n_proper_le &
 [ STEM < "leirvann" >,
   SYNSEM [ LKEYS.KEYREL.CARG "leirvann",
            PHON.ONSET con ] ].

leirvannet_n1 := n_proper_le &
 [ STEM < "leirvannet" >,
   SYNSEM [ LKEYS.KEYREL.CARG "leirvannet",
            PHON.ONSET con ] ].

leirvassbu_n1 := n_proper_le &
 [ STEM < "leirvassbu" >,
   SYNSEM [ LKEYS.KEYREL.CARG "leirvassbu",
            PHON.ONSET con ] ].

leirvatnet_n1 := n_proper_le &
 [ STEM < "leirvatnet" >,
   SYNSEM [ LKEYS.KEYREL.CARG "leirvatnet",
            PHON.ONSET con ] ].

leisure_n1 := n_mass_le &
 [ STEM < "leisure" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_leisure_n_1_rel",
            PHON.ONSET con ] ].

leisurely_a1 := adj_intrans_le &
 [ STEM < "leisurely" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_leisurely_a_1_rel",
            PHON.ONSET con ] ].

leisurely_isect := adv_int_vp_le &
 [ STEM < "leisurely" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_leisurely_a_1_rel",
            PHON.ONSET con ] ].

leivannet_n1 := n_proper_le &
 [ STEM < "leivannet" >,
   SYNSEM [ LKEYS.KEYREL.CARG "leivannet",
            PHON.ONSET con ] ].

leivassbu_n1 := n_proper_le &
 [ STEM < "leivassbu" >,
   SYNSEM [ LKEYS.KEYREL.CARG "leivassbu",
            PHON.ONSET con ] ].

lemming_n1 := n_intr_le &
 [ STEM < "lemming" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lemming_n_1_rel",
            PHON.ONSET con ] ].

lemming_n2 := n_mass_kind_le &
 [ STEM < "lemming" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lemming_n_kind_rel",
            PHON.ONSET con ] ].

lemon_n1 := n_intr_le &
 [ STEM < "lemon" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lemon_n_1_rel",
            PHON.ONSET con ] ].

lemur_n1 := n_intr_le &
 [ STEM < "lemur" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lemur_n_1_rel",
            PHON.ONSET con ] ].

lend_v1 := v_ditrans_le &
 [ STEM < "lend" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lend_v_1_rel",
            PHON.ONSET con ] ].

length_n1 := n_mass_count_ppof_le &
 [ STEM < "length" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_length_n_of_rel",
            PHON.ONSET con ] ].

lengthen_v1 := v_np_trans_noger_le &
 [ STEM < "lengthen" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lengthen_v_cause_rel",
            PHON.ONSET con ] ].

lengthen_v2 := v_unacc_le &
 [ STEM < "lengthen" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lengthen_v_1_rel",
            PHON.ONSET con ] ].

lengthened_isect := adj_attr_intrans_le &
 [ STEM < "lengthened" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lengthened_a_1_rel",
            PHON.ONSET con ] ].

lengthwise_a1 := adj_attr_intrans_le &
 [ STEM < "lengthwise" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lengthwise_a_1_rel",
            PHON.ONSET con ] ].

lengthwise_a2 := adj_pred_intrans_le &
 [ STEM < "lengthwise" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lengthwise_a_1_rel",
            PHON.ONSET con ] ].

lengthwise_adv1 := adv_int_vp_le &
 [ STEM < "lengthwise" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lengthwise_a_1_rel",
            PHON.ONSET con ] ].

lengthy_a1 := adj_intrans_le &
 [ STEM < "lengthy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lengthy_a_1_rel",
            PHON.ONSET con ] ].

leniency_n1 := n_mass_le &
 [ STEM < "leniency" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_leniency_n_1_rel",
            PHON.ONSET con ] ].

lenient_a1 := adj_intrans_le &
 [ STEM < "lenient" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lenient_a_1_rel",
            PHON.ONSET con ] ].

leniently_a1 := adv_int_vp_post_le &
 [ STEM < "leniently" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lenient_a_1_rel",
            PHON.ONSET con ] ].

lens_n1 := n_intr_le &
 [ STEM < "lens" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lens_n_1_rel",
            PHON.ONSET con ] ].

lent_n1 := n_season_div_le &
 [ STEM < "lent" >,
   SYNSEM [ LKEYS.KEYREL.CARG "lent",
            PHON.ONSET con ] ].

lent_n2 := n_season_wspec_le &
 [ STEM < "lent" >,
   SYNSEM [ LKEYS.KEYREL.CARG "lent",
            PHON.ONSET con ] ].

lent_n3 := n_season_np_le &
 [ STEM < "lent" >,
   SYNSEM [ LKEYS.KEYREL.CARG "lent",
            PHON.ONSET con ] ].

less_a1 := adv_comparison_spec_le &
 [ STEM < "less" >,
   SYNSEM [ LKEYS.KEYREL.PRED _less_x_comp_rel,
            PHON.ONSET con ] ].

less_a2 := adj_intrans_le &
 [ STEM < "less" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_less_a_1_rel",
            PHON.ONSET con ] ].

less_deg := more_degree_spec_le &
 [ STEM < "less" >,
   SYNSEM [ LKEYS.KEYREL.PRED comp_less_rel,
            PHON.ONSET con ] ].

less_nc_deg := comp_degree_spec_more_nc_le &
 [ STEM < "less" >,
   SYNSEM [ LKEYS.KEYREL.PRED comp_less_rel,
            PHON.ONSET con ] ].

less_q := det_part_pl_mass_noagr_le &
 [ STEM < "less" >,
   SYNSEM [ LKEYS.KEYREL.PRED _less_q_rel,
            PHON.ONSET con ] ].

less_than_a := det_sg_some_le &
 [ STEM < "less", "than", "a" >,
   SYNSEM [ LKEYS.KEYREL.PRED _less+than+a_q_rel,
            PHON.ONSET con ] ].

less_than_an := det_sg_some_an_le &
 [ STEM < "less", "than", "an" >,
   SYNSEM [ LKEYS.KEYREL.PRED _less+than+a_q_rel,
            PHON.ONSET con ] ].

less_than_deg := adv_degree_spec_le &
 [ STEM < "less", "than" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_less+than_x_rel",
            PHON.ONSET con ] ].

less_than_dollar_adj := adj_dollar_le &
 [ STEM < "less", "than" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_less+than_a_dollar_rel",
            PHON.ONSET con ] ].

less_than_p := p_reg_le &
 [ STEM < "less", "than" >,
   SYNSEM [ LKEYS.KEYREL.PRED _less+than_p_rel,
            PHON.ONSET con ] ].

lessee_n1 := n_intr_le &
 [ STEM < "lessee" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lessee_n_1_rel",
            PHON.ONSET con ] ].

lessen_v1 := v_np_trans_noger_le &
 [ STEM < "lessen" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lessen_v_cause_rel",
            PHON.ONSET con ] ].

lessen_v2 := v_unacc_le &
 [ STEM < "lessen" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lessen_v_1_rel",
            PHON.ONSET con ] ].

lesser_a1 := adj_comp_le &
 [ STEM < "lesser" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_less_a_1_rel",
            PHON.ONSET con ] ].

lesson_n1 := n_intr_le &
 [ STEM < "lesson" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lesson_n_1_rel",
            PHON.ONSET con ] ].

lessor_n1 := n_intr_le &
 [ STEM < "lessor" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lessor_n_1_rel",
            PHON.ONSET con ] ].

let_down_v1 := v_particle_np_le &
 [ STEM < "let" >,
   SYNSEM [ LKEYS [ --COMPKEY _down_p_sel_rel,
                    KEYREL.PRED "_let_v_down_rel" ],
            PHON.ONSET con ] ].

let_in_v1 := v_particle_np_le &
 [ STEM < "let" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_let_v_in_rel" ],
            PHON.ONSET con ] ].

let_off_v1 := v_particle_np_le &
 [ STEM < "let" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_let_v_off_rel" ],
            PHON.ONSET con ] ].

let_out_v1 := v_particle_le &
 [ STEM < "let" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_let_v_out_rel" ],
            PHON.ONSET con ] ].

let_out_v2 := v_particle_np_le &
 [ STEM < "let" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_let_v_out_rel" ],
            PHON.ONSET con ] ].

let_up_v1 := v_particle_le &
 [ STEM < "let" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_let_v_up_rel" ],
            PHON.ONSET con ] ].

let_up_v2 := v_particle_pp_le &
 [ STEM < "let" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    --OCOMPKEY _on_p_rel,
                    KEYREL.PRED "_let_v_up_rel" ],
            PHON.ONSET con ] ].

let_v1 := v_sorb_le &
 [ STEM < "let" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_let_v_1_rel",
            PHON.ONSET con ] ].

let_v2 := v_np_non_trans_le &
 [ STEM < "let" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_let_v_1_rel",
            PHON.ONSET con ] ].

lethal_a1 := adj_intrans_le &
 [ STEM < "lethal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lethal_a_1_rel",
            PHON.ONSET con ] ].

lets_1 := va_lets_imp_le &
 [ STEM < "let's" >,
   SYNSEM.PHON.ONSET con ].

lets_2 := va_lets_imp_le &
 [ STEM < "let", "s" >,
   SYNSEM.PHON.ONSET con ].

lets_3 := va_lets_imp_le &
 [ STEM < "let", "'s" >,
   SYNSEM.PHON.ONSET con ].

lets_say_2_disc := adv_disc_like_preh_le &
 [ STEM < "let", "s", "say" >,
   SYNSEM [ LKEYS.KEYREL.CARG "lets_say",
            PHON.ONSET con ] ].

lets_say_3_disc := adv_disc_like_preh_le &
 [ STEM < "let", "us", "say" >,
   SYNSEM [ LKEYS.KEYREL.CARG "lets_say",
            PHON.ONSET con ] ].

lets_say_4_disc := adv_disc_like_posth_le &
 [ STEM < "let", "s", "say" >,
   SYNSEM [ LKEYS.KEYREL.CARG "lets_say",
            PHON.ONSET con ] ].

lets_say_5_disc := adv_disc_like_posth_le &
 [ STEM < "let", "us", "say" >,
   SYNSEM [ LKEYS.KEYREL.CARG "lets_say",
            PHON.ONSET con ] ].

lets_say_6_disc := adv_disc_like_posth_le &
 [ STEM < "let-s", "say" >,
   SYNSEM [ LKEYS.KEYREL.CARG "lets_say",
            PHON.ONSET con ] ].

lets_say_disc := adv_disc_like_preh_le &
 [ STEM < "let-s", "say" >,
   SYNSEM [ LKEYS.KEYREL.CARG "lets_say",
            PHON.ONSET con ] ].

letter_n1 := n_ppof_le &
 [ STEM < "letter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_letter_n_of_rel",
            PHON.ONSET con ] ].

lettuce_n1 := n_mass_le &
 [ STEM < "lettuce" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lettuce_n_1_rel",
            PHON.ONSET con ] ].

leukemia_n1 := n_mass_count_le &
 [ STEM < "leukemia" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_leukemia_n_1_rel",
            PHON.ONSET con ] ].

level_a1 := adj_intrans_le &
 [ STEM < "level" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_level_a_1_rel",
            PHON.ONSET con ] ].

level_i_n1 := n_bare_nmod_le &
 [ STEM < "level" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_level_n_1_rel",
            PHON.ONSET con ] ].

level_n1 := n_intr_le &
 [ STEM < "level" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_level_n_1_rel",
            PHON.ONSET con ] ].

level_off_v1 := v_particle_np_le &
 [ STEM < "level" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_level_v_off_rel" ],
            PHON.ONSET con ] ].

level_off_v2 := v_particle_le &
 [ STEM < "level" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_level_v_off_rel" ],
            PHON.ONSET con ] ].

level_out_v1 := v_particle_np_le &
 [ STEM < "level" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_level_v_out_rel" ],
            PHON.ONSET con ] ].

level_out_v2 := v_particle_le &
 [ STEM < "level" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_level_v_out_rel" ],
            PHON.ONSET con ] ].

level_v1 := v_np_trans_noger_le &
 [ STEM < "level" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_level_v_cause_rel",
            PHON.ONSET con ] ].

level_v2 := v_unacc_le &
 [ STEM < "level" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_level_v_1_rel",
            PHON.ONSET con ] ].

level_with_v1 := v_empty_prep_intrans_le &
 [ STEM < "level" >,
   SYNSEM [ LKEYS [ --COMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_level_v_with_rel" ],
            PHON.ONSET con ] ].

lever_n1 := n_intr_le &
 [ STEM < "lever" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lever_n_1_rel",
            PHON.ONSET con ] ].

leviathan_n1 := n_intr_le &
 [ STEM < "leviathan" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_leviathan_n_1_rel",
            PHON.ONSET con ] ].

levitation_n1 := n_mass_ppcomp_le &
 [ STEM < "levitation" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_levitation_n_of_rel" ],
            PHON.ONSET con ] ].

levity_n1 := n_mass_le &
 [ STEM < "levity" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_levity_n_1_rel",
            PHON.ONSET con ] ].

levy_n1 := n_mass_count_le &
 [ STEM < "levy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_levy_n_1_rel",
            PHON.ONSET con ] ].

levy_v1 := v_empty_prep*_trans_le &
 [ STEM < "levy" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _against_p_sel_rel,
                    KEYREL.PRED "_levy_v_against_rel" ],
            PHON.ONSET con ] ].

lew_n1 := n_proper_le &
 [ STEM < "lew" >,
   SYNSEM [ LKEYS.KEYREL.CARG "lew",
            PHON.ONSET con ] ].

lewdness_n1 := n_mass_le &
 [ STEM < "lewdness" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lewdness_n_1_rel",
            PHON.ONSET con ] ].

lh_nd := n_proper_le &
 [ STEM < "lh" >,
   SYNSEM [ LKEYS.KEYREL.CARG "lh",
            PHON.ONSET con ] ].

lhfg_nd := n_proper_le &
 [ STEM < "lhfg" >,
   SYNSEM [ LKEYS.KEYREL.CARG "lhfg",
            PHON.ONSET con ] ].

liability_n1 := n_mass_count_le &
 [ STEM < "liability" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_liability_n_1_rel",
            PHON.ONSET con ] ].

liable_a1 := adj_trans_le &
 [ STEM < "liable" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_liable_a_for_rel" ],
            PHON.ONSET con ] ].

liabreen_n1 := n_proper_le &
 [ STEM < "liabreen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "liabreen",
            PHON.ONSET con ] ].

liabrekulen_n1 := n_proper_le &
 [ STEM < "liabrekulen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "liabrekulen",
            PHON.ONSET con ] ].

liabrevatnet_n1 := n_proper_le &
 [ STEM < "liabrevatnet" >,
   SYNSEM [ LKEYS.KEYREL.CARG "liabrevatnet",
            PHON.ONSET con ] ].

liaflua_n1 := n_proper_le &
 [ STEM < "liaflua" >,
   SYNSEM [ LKEYS.KEYREL.CARG "liaflua",
            PHON.ONSET con ] ].

liahaugen_n1 := n_proper_le &
 [ STEM < "liahaugen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "liahaugen",
            PHON.ONSET con ] ].

liberal_a1 := adj_intrans_le &
 [ STEM < "liberal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_liberal_a_1_rel",
            PHON.ONSET con ] ].

liberally := adv_int_vp_le &
 [ STEM < "liberally" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_liberal_a_1_rel",
            PHON.ONSET con ] ].

liberating_a1 := adj_trans_le &
 [ STEM < "liberating" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_liberating_a_for_rel" ],
            PHON.ONSET con ] ].

liberating_a2 := adj_reg_atrans_le &
 [ STEM < "liberating" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_liberating_a_for_rel",
            PHON.ONSET con ] ].

liberating_a3 := adj_tough_atrans_le &
 [ STEM < "liberating" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_liberating_a_for_rel",
            PHON.ONSET con ] ].

liberty_n1 := n_mass_count_le &
 [ STEM < "liberty" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_liberty_n_1_rel",
            PHON.ONSET con ] ].

libra_n1 := n_meas_le &
 [ STEM < "libra" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_libra_n_1_rel",
            PHON.ONSET con ] ].

library_n1 := n_ppof_le &
 [ STEM < "library" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_library_n_of_rel",
            PHON.ONSET con ] ].

library_post_ttl := n_post_title_le &
 [ STEM < "library" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_library_n_of_rel",
            PHON.ONSET con ] ].

licence_n1 := n_mass_count_le &
 [ STEM < "licence" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_license_n_1_rel",
            PHON.ONSET con ] ].

licence_v1 := v_to*_trans_le &
 [ STEM < "licence" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_license_v_to_rel",
            PHON.ONSET con ] ].

licence_v2 := v_obj_equi_le &
 [ STEM < "licence" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_license_v_1_rel",
            PHON.ONSET con ] ].

license_n1 := n_mass_count_le &
 [ STEM < "license" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_license_n_1_rel",
            PHON.ONSET con ] ].

license_v1 := v_to*_trans_le &
 [ STEM < "license" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_license_v_to_rel",
            PHON.ONSET con ] ].

license_v2 := v_obj_equi_le &
 [ STEM < "license" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_license_v_1_rel",
            PHON.ONSET con ] ].

licentiously_adv1 := adv_int_vp_le &
 [ STEM < "licentiously" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_licentious_a_1_rel",
            PHON.ONSET con ] ].

lichen_covered_a1 := adj_intrans_le &
 [ STEM < "lichen-", "covered" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lichen+covered_a_1_rel",
            PHON.ONSET con ] ].

lichen_covered_a2 := adj_intrans_le &
 [ STEM < "lichen", "covered" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lichen+covered_a_1_rel",
            PHON.ONSET con ] ].

lichen_n1 := n_mass_count_le &
 [ STEM < "lichen" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lichen_n_1_rel",
            PHON.ONSET con ] ].

lick_n1 := n_intr_le &
 [ STEM < "lick" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lick_n_1_rel",
            PHON.ONSET con ] ].

lick_v1 := v_np_trans_le &
 [ STEM < "lick" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lick_v_1_rel",
            PHON.ONSET con ] ].

lid_n1 := n_intr_le &
 [ STEM < "lid" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lid_n_1_rel",
            PHON.ONSET con ] ].

lie_mental_v1 := v_prep*_intrans_le &
 [ STEM < "lie" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_rel,
                    KEYREL.PRED "_lie_v_mental_rel" ],
            PHON.ONSET con ] ].

lie_n1 := n_intr_le &
 [ STEM < "lie" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lie_n_1_rel",
            PHON.ONSET con ] ].

lie_n2 := n_proper_le &
 [ STEM < "lie" >,
   SYNSEM [ LKEYS.KEYREL.CARG "lie",
            PHON.ONSET con ] ].

lie_v1 := v_double_pp*_le &
 [ STEM < "lie" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_rel,
                    --OCOMPKEY _about_p_rel,
                    KEYREL.PRED "_lie_v_1_rel" ],
            PHON.ONSET con ] ].

lie_v2 := v_cp_prop_non_trans_le &
 [ STEM < "lie" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lie_v_1_rel",
            PHON.ONSET con ] ].

lie_v3 := v_prep_dir_le &
 [ STEM < "lie" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lie_v_2_rel",
            PHON.ONSET con ] ].

lie_v4 := v_loc_inv_mv_le &
 [ STEM < "lie" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lie_v_2_rel",
            PHON.ONSET con ] ].

lierdalen_n1 := n_proper_le &
 [ STEM < "lierdalen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "lierdalen",
            PHON.ONSET con ] ].

liervann_n1 := n_proper_le &
 [ STEM < "liervann" >,
   SYNSEM [ LKEYS.KEYREL.CARG "liervann",
            PHON.ONSET con ] ].

liervannet_n1 := n_proper_le &
 [ STEM < "liervannet" >,
   SYNSEM [ LKEYS.KEYREL.CARG "liervannet",
            PHON.ONSET con ] ].

liervatnet_n1 := n_proper_le &
 [ STEM < "liervatnet" >,
   SYNSEM [ LKEYS.KEYREL.CARG "liervatnet",
            PHON.ONSET con ] ].

life_n1 := n_mass_count_ppof_le &
 [ STEM < "life" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_life_n_of_rel",
            PHON.ONSET con ] ].

life_saving_a1 := adj_intrans_le &
 [ STEM < "life", "saving" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_life+saving_a_1_rel",
            PHON.ONSET con ] ].

life_saving_a2 := adj_intrans_le &
 [ STEM < "life-", "saving" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_life+saving_a_1_rel",
            PHON.ONSET con ] ].

life_threatening_a1 := adj_intrans_le &
 [ STEM < "life", "threatening" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_life+threatening_a_1_rel",
            PHON.ONSET con ] ].

life_threatening_a2 := adj_intrans_le &
 [ STEM < "life-", "threatening" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_life+threatening_a_1_rel",
            PHON.ONSET con ] ].

lifeless_a1 := adj_intrans_le &
 [ STEM < "lifeless" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lifeless_a_1_rel",
            PHON.ONSET con ] ].

lifelong_a1 := adj_intrans_le &
 [ STEM < "lifelong" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lifelong_a_1_rel",
            PHON.ONSET con ] ].

lifelong_a2 := adj_intrans_le &
 [ STEM < "life-", "long" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lifelong_a_1_rel",
            PHON.ONSET con ] ].

lifesaving_a1 := adj_intrans_le &
 [ STEM < "lifesaving" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lifesaving_a_1_rel",
            PHON.ONSET con ] ].

lifetime_n1 := n_ppof_le &
 [ STEM < "lifetime" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lifetime_n_of_rel",
            PHON.ONSET con ] ].

lifetime_n2 := n_ppof_le &
 [ STEM < "life-", "time" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lifetime_n_of_rel",
            PHON.ONSET con ] ].

lift_away_v1 := v_particle_le &
 [ STEM < "lift" >,
   SYNSEM [ LKEYS [ --COMPKEY _away_p_sel_rel,
                    KEYREL.PRED "_lift_v_away_rel" ],
            PHON.ONSET con ] ].

lift_away_v2 := v_particle_np_le &
 [ STEM < "lift" >,
   SYNSEM [ LKEYS [ --COMPKEY _away_p_sel_rel,
                    KEYREL.PRED "_lift_v_away_rel" ],
            PHON.ONSET con ] ].

lift_n1 := n_mass_count_le &
 [ STEM < "lift" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lift_n_1_rel",
            PHON.ONSET con ] ].

lift_off_v1 := v_particle_le &
 [ STEM < "lift" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_lift_v_off_rel" ],
            PHON.ONSET con ] ].

lift_off_v2 := v_particle_np_le &
 [ STEM < "lift" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_lift_v_off_rel" ],
            PHON.ONSET con ] ].

lift_out_v1 := v_particle_le &
 [ STEM < "lift" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_lift_v_out_rel" ],
            PHON.ONSET con ] ].

lift_out_v2 := v_particle_np_le &
 [ STEM < "lift" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_lift_v_out_rel" ],
            PHON.ONSET con ] ].

lift_up_v1 := v_particle_le &
 [ STEM < "lift" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_lift_v_up_rel" ],
            PHON.ONSET con ] ].

lift_up_v2 := v_particle_np_le &
 [ STEM < "lift" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_lift_v_up_rel" ],
            PHON.ONSET con ] ].

lift_v1 := v_np_trans_le &
 [ STEM < "lift" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lift_v_1_rel",
            PHON.ONSET con ] ].

light_a1 := adj_intrans_le &
 [ STEM < "light" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_light_a_1_rel",
            PHON.ONSET con ] ].

light_n1 := n_mass_count_le &
 [ STEM < "light" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_light_n_1_rel",
            PHON.ONSET con ] ].

light_up_v1 := v_particle_le &
 [ STEM < "light" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_light_v_up_rel" ],
            PHON.ONSET con ] ].

light_up_v2 := v_particle_np_le &
 [ STEM < "light" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_light_v_up_rel" ],
            PHON.ONSET con ] ].

light_v1 := v_np_trans_noger_le &
 [ STEM < "light" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_light_v_cause_rel",
            PHON.ONSET con ] ].

lighten_v1 := v_unacc_le &
 [ STEM < "lighten" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lighten_v_1_rel",
            PHON.ONSET con ] ].

lighten_v2 := v_np_trans_noger_le &
 [ STEM < "lighten" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lighten_v_cause_rel",
            PHON.ONSET con ] ].

lighter_a1 := adj_comp_le &
 [ STEM < "lighter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_light_a_1_rel",
            PHON.ONSET con ] ].

lighter_n1 := n_intr_le &
 [ STEM < "lighter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lighter_n_1_rel",
            PHON.ONSET con ] ].

lightest_a1 := adj_superl_le &
 [ STEM < "lightest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_light_a_1_rel",
            PHON.ONSET con ] ].

lighthouse_n1 := n_intr_le &
 [ STEM < "lighthouse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lighthouse_n_1_rel",
            PHON.ONSET con ] ].

lightly := adv_int_vp_le &
 [ STEM < "lightly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_light_a_1_rel",
            PHON.ONSET con ] ].

lightness_n1 := n_mass_le &
 [ STEM < "lightness" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lightness_n_1_rel",
            PHON.ONSET con ] ].

lightning_n1 := n_mass_le &
 [ STEM < "lightning" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lightning_n_1_rel",
            PHON.ONSET con ] ].

lightweight_a1 := adj_intrans_le &
 [ STEM < "lightweight" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lightweight_a_1_rel",
            PHON.ONSET con ] ].

lightweight_a2 := adj_intrans_le &
 [ STEM < "light-", "weight" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lightweight_a_1_rel",
            PHON.ONSET con ] ].

like_back_v1 := v_particle_np_le &
 [ STEM < "like" >,
   SYNSEM [ LKEYS [ --COMPKEY _back_p_sel_rel,
                    KEYREL.PRED "_like_v_back_rel" ],
            PHON.ONSET con ] ].

like_c := comp_like_le &
 [ STEM < "like" >,
   SYNSEM.PHON.ONSET con ].

like_disc_adv := adv_disc_like_preh_le &
 [ STEM < "like" >,
   SYNSEM [ LKEYS.KEYREL.CARG "like",
            PHON.ONSET con ] ].

like_isect := adj_attr_intrans_le &
 [ STEM < "like" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_like_a_1_rel",
            PHON.ONSET con ] ].

like_minded_a1 := adj_intrans_le &
 [ STEM < "likeminded" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_like+minded_a_1_rel",
            PHON.ONSET con ] ].

like_minded_a2 := adj_intrans_le &
 [ STEM < "like-", "minded" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_like+minded_a_1_rel",
            PHON.ONSET con ] ].

like_minded_a3 := adj_intrans_le &
 [ STEM < "like", "minded" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_like+minded_a_1_rel",
            PHON.ONSET con ] ].

like_p := p_le &
 [ STEM < "like" >,
   SYNSEM [ LKEYS.KEYREL.PRED _like_p_rel,
            PHON.ONSET con ] ].

like_p_2 := p_subconj_le &
 [ STEM < "like" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_like_x_preph_rel",
            PHON.ONSET con ] ].

like_prd_v1 := v_obj_equi_non_trans_prd_le &
 [ STEM < "like" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_like_v_1_rel",
            PHON.ONSET con ] ].

like_v1 := v_np_trans_le &
 [ STEM < "like" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_like_v_1_rel",
            PHON.ONSET con ] ].

like_v2 := v_subj_equi_le &
 [ STEM < "like" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_like_v_1_rel",
            PHON.ONSET con ] ].

like_v3 := v_subj_equi_prp_le &
 [ STEM < "like" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_like_v_1_rel",
            PHON.ONSET con ] ].

like_v4 := v_sor_non_trans_le &
 [ STEM < "like" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_like_v_1_rel",
            PHON.ONSET con ] ].

likely_a1 := adj_intrans_le &
 [ STEM < "likely" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_likely_a_1_rel",
            PHON.ONSET con ] ].

likely_a2 := adj_reg_equi_le &
 [ STEM < "likely" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_likely_a_1_rel",
            PHON.ONSET con ] ].

likely_a3 := adj_reg_atrans_cp_le &
 [ STEM < "likely" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_likely_a_1_rel",
            PHON.ONSET con ] ].

liken_v1 := v_to_trans_le &
 [ STEM < "liken" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_liken_v_to_rel",
            PHON.ONSET con ] ].

likeness_n1 := n_mass_count_le &
 [ STEM < "likeness" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_likeness_n_1_rel",
            PHON.ONSET con ] ].

likewise_adv1 := adv_int_vp_post_le &
 [ STEM < "likewise" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_likewise_a_1_rel",
            PHON.ONSET con ] ].

lillehammer := n_proper_le &
 [ STEM < "lillehammer" >,
   SYNSEM [ LKEYS.KEYREL.CARG "lillehammer",
            PHON.ONSET con ] ].

lillemor_n1 := n_proper_city_le &
 [ STEM < "lillemor" >,
   SYNSEM [ LKEYS.KEYREL.CARG "lillemor",
            PHON.ONSET con ] ].

lilly_n1 := n_proper_le &
 [ STEM < "lilly" >,
   SYNSEM [ LKEYS.KEYREL.CARG "lilly",
            PHON.ONSET con ] ].

lily_n1 := n_intr_le &
 [ STEM < "lily" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lily_n_1_rel",
            PHON.ONSET con ] ].

limb_n1 := n_intr_le &
 [ STEM < "limb" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_limb_n_1_rel",
            PHON.ONSET con ] ].

limburg_n1 := n_proper_city_le &
 [ STEM < "limburg" >,
   SYNSEM [ LKEYS.KEYREL.CARG "limburg",
            PHON.ONSET con ] ].

lime_a1 := adj_intrans_le &
 [ STEM < "lime" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lime_a_1_rel",
            PHON.ONSET con ] ].

lime_n1 := n_mass_count_le &
 [ STEM < "lime" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lime_n_1_rel",
            PHON.ONSET con ] ].

limestone_n1 := n_mass_le &
 [ STEM < "limestone" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_limestone_n_1_rel",
            PHON.ONSET con ] ].

limit_down_v1 := v_particle_np_pp_to_le &
 [ STEM < "limit" >,
   SYNSEM [ LKEYS [ --COMPKEY _down_p_sel_rel,
                    KEYREL.PRED "_limit_v_down_rel" ],
            PHON.ONSET con ] ].

limit_down_v2 := v_particle_np_le &
 [ STEM < "limit" >,
   SYNSEM [ LKEYS [ --COMPKEY _down_p_sel_rel,
                    KEYREL.PRED "_limit_v_down_rel" ],
            PHON.ONSET con ] ].

limit_n1 := n_ppof_le &
 [ STEM < "limit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_limit_n_of_rel",
            PHON.ONSET con ] ].

limit_v1 := v_np_trans_le &
 [ STEM < "limit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_limit_v_1_rel",
            PHON.ONSET con ] ].

limit_v2 := v_empty_prep_trans_le &
 [ STEM < "limit" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_limit_v_to_rel" ],
            PHON.ONSET con ] ].

limitation_n1 := n_mass_count_le &
 [ STEM < "limitation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_limitation_n_1_rel",
            PHON.ONSET con ] ].

limited_a1 := adj_intrans_le &
 [ STEM < "limited" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_limited_a_1_rel",
            PHON.ONSET con ] ].

limitedly := adv_int_vp_le &
 [ STEM < "limitedly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_limited_a_1_rel",
            PHON.ONSET con ] ].

limo_n1 := n_intr_le &
 [ STEM < "limo" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_limo_n_1_rel",
            PHON.ONSET con ] ].

limonite_n1 := n_mass_le &
 [ STEM < "limonite" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_limonite_n_1_rel",
            PHON.ONSET con ] ].

limousine_n1 := n_intr_le &
 [ STEM < "limousine" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_limousine_n_1_rel",
            PHON.ONSET con ] ].

limp_v1 := v_prep_dir_le &
 [ STEM < "limp" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_limp_v_1_rel",
            PHON.ONSET con ] ].

limpidity_n1 := n_mass_le &
 [ STEM < "limpidity" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_limpidity_n_1_rel",
            PHON.ONSET con ] ].

limy_a1 := adj_intrans_le &
 [ STEM < "limy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_limy_a_1_rel",
            PHON.ONSET con ] ].

lincoln_n1 := n_proper_city_le &
 [ STEM < "lincoln" >,
   SYNSEM [ LKEYS.KEYREL.CARG "lincoln",
            PHON.ONSET con ] ].

linda_n1 := n_proper_le &
 [ STEM < "linda" >,
   SYNSEM [ LKEYS.KEYREL.CARG "linda",
            PHON.ONSET con ] ].

lindau_n1 := n_proper_city_le &
 [ STEM < "lindau" >,
   SYNSEM [ LKEYS.KEYREL.CARG "lindau",
            PHON.ONSET con ] ].

lindbergh_n1 := n_proper_le &
 [ STEM < "lindbergh" >,
   SYNSEM [ LKEYS.KEYREL.CARG "lindbergh",
            PHON.ONSET con ] ].

linden_n1 := n_proper_le &
 [ STEM < "linden" >,
   SYNSEM [ LKEYS.KEYREL.CARG "linden",
            PHON.ONSET con ] ].

lindstad_n1 := n_proper_le &
 [ STEM < "lindstad" >,
   SYNSEM [ LKEYS.KEYREL.CARG "lindstad",
            PHON.ONSET con ] ].

line_i_n1 := n_bare_nomod_le &
 [ STEM < "line" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_line_n_of_rel",
            PHON.ONSET con ] ].

line_n1 := n_ppof_le &
 [ STEM < "line" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_line_n_of_rel",
            PHON.ONSET con ] ].

line_out_v1 := v_particle_np_le &
 [ STEM < "line" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_line_v_out_rel" ],
            PHON.ONSET con ] ].

line_out_v2 := v_particle_le &
 [ STEM < "line" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_line_v_out_rel" ],
            PHON.ONSET con ] ].

line_up_n1 := n_intr_le &
 [ STEM < "line", "up" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_line+up_n_1_rel",
            PHON.ONSET con ] ].

line_up_n2 := n_intr_le &
 [ STEM < "line-", "up" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_line+up_n_1_rel",
            PHON.ONSET con ] ].

line_up_n3 := n_intr_le &
 [ STEM < "lineup" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_line+up_n_1_rel",
            PHON.ONSET con ] ].

line_up_v1 := v_particle_np_le &
 [ STEM < "line" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_line_v_up_rel" ],
            PHON.ONSET con ] ].

line_up_v2 := v_particle_le &
 [ STEM < "line" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_line_v_up_rel" ],
            PHON.ONSET con ] ].

line_v1 := v_np_trans_le &
 [ STEM < "line" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_line_v_1_rel",
            PHON.ONSET con ] ].

lineage_n1 := n_mass_count_le &
 [ STEM < "lineage" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lineage_n_1_rel",
            PHON.ONSET con ] ].

lineament_n1 := n_intr_le &
 [ STEM < "lineament" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lineament_n_1_rel",
            PHON.ONSET con ] ].

linear_a1 := adj_intrans_le &
 [ STEM < "linear" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_linear_a_1_rel",
            PHON.ONSET con ] ].

lined_a1 := adj_intrans_le &
 [ STEM < "lined" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lined_a_1_rel",
            PHON.ONSET con ] ].

linen_n1 := n_mass_count_le &
 [ STEM < "linen" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_linen_n_1_rel",
            PHON.ONSET con ] ].

liner_n1 := n_intr_le &
 [ STEM < "liner" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_liner_n_1_rel",
            PHON.ONSET con ] ].

linger_v1 := v_unacc_le &
 [ STEM < "linger" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_linger_v_1_rel",
            PHON.ONSET con ] ].

linguistics_n1 := n_mass_le &
 [ STEM < "linguistics" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_linguistics_n_1_rel",
            PHON.ONSET con ] ].

lingxiu_n1 := n_proper_le &
 [ STEM < "lingxiu" >,
   SYNSEM [ LKEYS.KEYREL.CARG "lingxiu",
            PHON.ONSET con ] ].

link_n1 := n_intr_le &
 [ STEM < "link" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_link_n_1_rel",
            PHON.ONSET con ] ].

link_up_v1 := v_particle_np_le &
 [ STEM < "link" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_link_v_up_rel" ],
            PHON.ONSET con ] ].

link_up_v2 := v_particle_le &
 [ STEM < "link" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_link_v_up_rel" ],
            PHON.ONSET con ] ].

link_v1 := v_np_trans_le &
 [ STEM < "link" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_link_v_1_rel",
            PHON.ONSET con ] ].

link_v2 := v_np_prep_trans_le &
 [ STEM < "link" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _to_p_rel,
                    KEYREL.PRED "_link_v_1_rel" ],
            PHON.ONSET con ] ].

link_v3 := v_np_prep_trans_le &
 [ STEM < "link" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _with_p_rel,
                    KEYREL.PRED "_link_v_1_rel" ],
            PHON.ONSET con ] ].

linux_n1 := n_proper_le &
 [ STEM < "linux" >,
   SYNSEM [ LKEYS.KEYREL.CARG "linux",
            PHON.ONSET con ] ].

lion_n1 := n_intr_le &
 [ STEM < "lion" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lion_n_1_rel",
            PHON.ONSET con ] ].

lip_n1 := n_mass_count_le &
 [ STEM < "lip" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lip_n_1_rel",
            PHON.ONSET con ] ].

liquid_n1 := n_mass_count_le &
 [ STEM < "liquid" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_liquid_n_1_rel",
            PHON.ONSET con ] ].

liquidity_n1 := n_mass_le &
 [ STEM < "liquidity" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_liquidity_n_1_rel",
            PHON.ONSET con ] ].

liquor_n1 := n_mass_count_le &
 [ STEM < "liquor" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_liquor_n_1_rel",
            PHON.ONSET con ] ].

lira_n1 := n_mass_count_le &
 [ STEM < "lira" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lire_n_1_rel",
            PHON.ONSET con ] ].

lira_n2 := n_plur_nocmpnd_le &
 [ STEM < "lira" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lire_n_1_rel",
            PHON.ONSET con ] ].

lire_money_n1 := n_mass_count_le &
 [ STEM < "lire" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lire_n_1_rel",
            PHON.ONSET con ] ].

lire_money_n2 := n_plur_nocmpnd_le &
 [ STEM < "lire" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lire_n_1_rel",
            PHON.ONSET con ] ].

lisa_n1 := n_proper_le &
 [ STEM < "lisa" >,
   SYNSEM [ LKEYS.KEYREL.CARG "lisa",
            PHON.ONSET con ] ].

liset := n_proper_le &
 [ STEM < "liset" >,
   SYNSEM [ LKEYS.KEYREL.CARG "liset",
            PHON.ONSET con ] ].

liset_pensionat_n1 := n_proper_le &
 [ STEM < "liset", "pensionat" >,
   SYNSEM [ LKEYS.KEYREL.CARG "liset_pensionat",
            PHON.ONSET con ] ].

list_n1 := n_ppof_le &
 [ STEM < "list" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_list_n_of_rel",
            PHON.ONSET con ] ].

list_v1 := v_np_trans_noger_le &
 [ STEM < "list" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_list_v_1_rel",
            PHON.ONSET con ] ].

list_v2 := v_np_as_le &
 [ STEM < "list" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_list_v_as_rel",
            PHON.ONSET con ] ].

list_v3 := v_unacc_le &
 [ STEM < "list" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_list_v_2_rel",
            PHON.ONSET con ] ].

listed_a1 := adj_intrans_le &
 [ STEM < "listed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_listed_a_1_rel",
            PHON.ONSET con ] ].

listen_in_v1 := v_particle_le &
 [ STEM < "listen" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_listen_v_in_rel" ],
            PHON.ONSET con ] ].

listen_to := v_empty_prep_intrans_le &
 [ STEM < "listen" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_listen_v_to_rel" ],
            PHON.ONSET con ] ].

listen_up_v1 := v_particle_le &
 [ STEM < "listen" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_listen_v_up_rel" ],
            PHON.ONSET con ] ].

listen_v2 := v_unerg_le &
 [ STEM < "listen" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_listen_v_to_rel",
            PHON.ONSET con ] ].

listing_n1 := n_ppof_le &
 [ STEM < "listing" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_listing_n_of_rel",
            PHON.ONSET con ] ].

lit-address := n_proper_unk_le &
 [ STEM < "literaladdress" >,
   SYNSEM [ LKEYS.KEYREL.CARG "lit-address",
            PHON.ONSET con ] ].

lit-amount := n_proper_unk_le &
 [ STEM < "literalamount" >,
   SYNSEM [ LKEYS.KEYREL.CARG "lit-amount",
            PHON.ONSET con ] ].

lit-company := n_proper_unk_le &
 [ STEM < "literalcompany" >,
   SYNSEM [ LKEYS.KEYREL.CARG "lit-co",
            PHON.ONSET con ] ].

lit-person := n_proper_unk_le &
 [ STEM < "literalperson" >,
   SYNSEM [ LKEYS.KEYREL.CARG "lit-pers",
            PHON.ONSET con ] ].

lit-ptname := n_proper_unk_le &
 [ STEM < "literalpn" >,
   SYNSEM [ LKEYS.KEYREL.CARG "lit-ptname",
            PHON.ONSET con ] ].

lit-ptname_2 := n_intr_unk_le &
 [ STEM < "literalpn" >,
   SYNSEM.PHON.ONSET con ].

lit-rate := n_proper_unk_le &
 [ STEM < "literalrate" >,
   SYNSEM [ LKEYS.KEYREL.CARG "lit-rate",
            PHON.ONSET con ] ].

liter_n1 := n_meas_le &
 [ STEM < "liter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_liter_n_1_rel",
            PHON.ONSET con ] ].

literal_a1 := adj_intrans_le &
 [ STEM < "literal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_literal_a_1_rel",
            PHON.ONSET con ] ].

literal_n1 := n_intr_le &
 [ STEM < "literal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_literal_n_1_rel",
            PHON.ONSET con ] ].

literally_adv1 := adv_int_vp_le &
 [ STEM < "literally" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_literal_a_1_rel",
            PHON.ONSET con ] ].

literary_a1 := adj_intrans_le &
 [ STEM < "literary" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_literary_a_1_rel",
            PHON.ONSET con ] ].

literature_n1 := n_mass_le &
 [ STEM < "literature" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_literature_n_1_rel",
            PHON.ONSET con ] ].

litharge_n1 := n_mass_le &
 [ STEM < "litharge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_litharge_n_1_rel",
            PHON.ONSET con ] ].

lithium_n1 := n_intr_le &
 [ STEM < "lithium" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lithium_n_1_rel",
            PHON.ONSET con ] ].

litigation_n1 := n_mass_le &
 [ STEM < "litigation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_litigation_n_1_rel",
            PHON.ONSET con ] ].

litter_n1 := n_mass_le &
 [ STEM < "litter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_litter_n_1_rel",
            PHON.ONSET con ] ].

litter_v1 := v_np*_trans_le &
 [ STEM < "litter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_litter_v_1_rel",
            PHON.ONSET con ] ].

little_a1 := adj_intrans_le &
 [ STEM < "little" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_little_a_1_rel",
            PHON.ONSET con ] ].

little_dames_rocket_n1 := n_proper_le &
 [ STEM < "little", "dames", "rocket" >,
   SYNSEM [ LKEYS.KEYREL.CARG "little+dames+rocket",
            PHON.ONSET con ] ].

little_dames_rocket_n2 := n_proper_le &
 [ STEM < "little", "dame", "'s", "rocket" >,
   SYNSEM [ LKEYS.KEYREL.CARG "little+dames+rocket",
            PHON.ONSET con ] ].

little_det := det_part_ms_noagr_le &
 [ STEM < "little" >,
   SYNSEM [ LKEYS.KEYREL.PRED _little_q_rel,
            PHON.ONSET con ] ].

little_rascals_n1 := n_proper_le &
 [ STEM < "little", "rascals" >,
   SYNSEM [ LKEYS.KEYREL.CARG "little_rascals",
            PHON.ONSET con ] ].

little_used_a1 := adj_intrans_le &
 [ STEM < "little-", "used" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_little-used_a_1_rel",
            PHON.ONSET con ] ].

little_wonder_a1 := adj_reg_atrans_that_cp_le &
 [ STEM < "little", "wonder" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_little+wonder_a_1_rel",
            PHON.ONSET con ] ].

littler_a1 := adj_comp_le &
 [ STEM < "littler" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_little_a_1_rel",
            PHON.ONSET con ] ].

littlest_a1 := adj_superl_le &
 [ STEM < "littlest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_little_a_1_rel",
            PHON.ONSET con ] ].

liv := n_proper_le &
 [ STEM < "liv" >,
   SYNSEM [ LKEYS.KEYREL.CARG "liv",
            PHON.ONSET con ] ].

live_a1 := adj_intrans_le &
 [ STEM < "live" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_live_a_1_rel",
            PHON.ONSET con ] ].

live_down_v1 := v_particle_np_le &
 [ STEM < "live" >,
   SYNSEM [ LKEYS [ --COMPKEY _down_p_sel_rel,
                    KEYREL.PRED "_live_v_down_rel" ],
            PHON.ONSET con ] ].

live_out_v1 := v_particle_np_le &
 [ STEM < "live" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_live_v_out_rel" ],
            PHON.ONSET con ] ].

live_up_to_v1 := v_particle_pp_le &
 [ STEM < "live" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    --OCOMPKEY _to_p_rel,
                    KEYREL.PRED "_live_v_up2_rel" ],
            PHON.ONSET con ] ].

live_up_v1 := v_particle_np_le &
 [ STEM < "live" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_live_v_up_rel" ],
            PHON.ONSET con ] ].

live_v1 := v_np*_trans_le &
 [ STEM < "live" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_live_v_1_rel",
            PHON.ONSET con ] ].

livelihood_n1 := n_mass_count_le &
 [ STEM < "livelihood" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_livelihood_n_1_rel",
            PHON.ONSET con ] ].

lively_a1 := adj_intrans_le &
 [ STEM < "lively" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lively_a_1_rel",
            PHON.ONSET con ] ].

lively_n1 := n_proper_le &
 [ STEM < "lively" >,
   SYNSEM [ LKEYS.KEYREL.CARG "lively",
            PHON.ONSET con ] ].

liver_n := n_intr_le &
 [ STEM < "liver" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_liver_n_1_rel",
            PHON.ONSET con ] ].

livestock_n1 := n_intr_le &
 [ STEM < "livestock" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_livestock_n_1_rel",
            PHON.ONSET con ] ].

living_n1 := n_intr_le &
 [ STEM < "living" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_living_n_1_rel",
            PHON.ONSET con ] ].

lloyd := n_proper_le &
 [ STEM < "lloyd" >,
   SYNSEM [ LKEYS.KEYREL.CARG "lloyd",
            PHON.ONSET con ] ].

lloyd-webber_n1 := n_proper_le &
 [ STEM < "lloyd", "webber" >,
   SYNSEM [ LKEYS.KEYREL.CARG "lloyd-webber",
            PHON.ONSET con ] ].

load_n1 := n_ppof_le &
 [ STEM < "load" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_load_n_of_rel",
            PHON.ONSET con ] ].

load_up_v1 := v_particle_np_le &
 [ STEM < "load" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_load_v_up_rel" ],
            PHON.ONSET con ] ].

load_v1 := v_np_trans_le &
 [ STEM < "load" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_load_v_cause_rel",
            PHON.ONSET con ] ].

load_v2 := v_np_prep_trans_le &
 [ STEM < "load" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _with_p_rel,
                    KEYREL.PRED "_load_v_1_rel" ],
            PHON.ONSET con ] ].

load_v3 := v_unacc_dir_le &
 [ STEM < "load" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_load_v_1_rel",
            PHON.ONSET con ] ].

loaf_n1 := n_intr_le &
 [ STEM < "loaf" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_loaf_n_1_rel",
            PHON.ONSET con ] ].

loaf_v1 := v_np_trans_le &
 [ STEM < "loaf" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_loaf_v_1_rel",
            PHON.ONSET con ] ].

loam_n1 := n_mass_le &
 [ STEM < "loam" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_loam_n_1_rel",
            PHON.ONSET con ] ].

loan_n1 := n_intr_le &
 [ STEM < "loan" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_loan_n_1_rel",
            PHON.ONSET con ] ].

loan_out_v1 := v_particle_np_le &
 [ STEM < "loan" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_loan_v_out_rel" ],
            PHON.ONSET con ] ].

loan_v1 := v_ditrans_le &
 [ STEM < "loan" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_loan_v_1_rel",
            PHON.ONSET con ] ].

loathe_v1 := v_np_trans_le &
 [ STEM < "loathe" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_loathe_v_1_rel",
            PHON.ONSET con ] ].

lobby_n1 := n_intr_le &
 [ STEM < "lobby" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lobby_n_1_rel",
            PHON.ONSET con ] ].

lobby_v1 := v_np*_trans_le &
 [ STEM < "lobby" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lobby_v_1_rel",
            PHON.ONSET con ] ].

lobby_v2 := v_cp_inf_le &
 [ STEM < "lobby" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lobby_v_1_rel",
            PHON.ONSET con ] ].

lobed_a1 := adj_intrans_le &
 [ STEM < "lobed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lobed_a_1_rel",
            PHON.ONSET con ] ].

lobster_n1 := n_mass_count_le &
 [ STEM < "lobster" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lobster_n_1_rel",
            PHON.ONSET con ] ].

local_a1 := adj_intrans_le &
 [ STEM < "local" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_local_a_1_rel",
            PHON.ONSET con ] ].

local_n1 := n_no_cmpnd_le &
 [ STEM < "local" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_local_n_1_rel",
            PHON.ONSET con ] ].

locale_n1 := n_intr_le &
 [ STEM < "locale" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_locale_n_1_rel",
            PHON.ONSET con ] ].

locality_n1 := n_intr_le &
 [ STEM < "locality" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_locality_n_1_rel",
            PHON.ONSET con ] ].

locally_a1 := adv_int_vp_le &
 [ STEM < "locally" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_local_a_1_rel",
            PHON.ONSET con ] ].

locate_v1 := v_np_trans_le &
 [ STEM < "locate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_locate_v_1_rel",
            PHON.ONSET con ] ].

locate_v2 := v_np_prep_trans_dors_le &
 [ STEM < "locate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_locate_v_1_rel",
            PHON.ONSET con ] ].

location_n1 := n_intr_le &
 [ STEM < "location" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_location_n_1_rel",
            PHON.ONSET con ] ].

loccumer_hof := n_intr_named_le &
 [ STEM < "loccumer", "hof" >,
   SYNSEM [ LKEYS.KEYREL.CARG "loccumer_hof",
            PHON.ONSET con ] ].

loccumer_hof_2 := n_intr_named_le &
 [ STEM < "loccumer-", "hof" >,
   SYNSEM [ LKEYS.KEYREL.CARG "loccumer_hof",
            PHON.ONSET con ] ].

lock_away_v1 := v_particle_np_le &
 [ STEM < "lock" >,
   SYNSEM [ LKEYS [ --COMPKEY _away_p_sel_rel,
                    KEYREL.PRED "_lock_v_away_rel" ],
            PHON.ONSET con ] ].

lock_down_v1 := v_particle_np_le &
 [ STEM < "lock" >,
   SYNSEM [ LKEYS [ --COMPKEY _down_p_sel_rel,
                    KEYREL.PRED "_lock_v_down_rel" ],
            PHON.ONSET con ] ].

lock_in_v1 := v_particle_np_le &
 [ STEM < "lock" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_lock_v_in_rel" ],
            PHON.ONSET con ] ].

lock_n1 := n_intr_le &
 [ STEM < "lock" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lock_n_1_rel",
            PHON.ONSET con ] ].

lock_out_v1 := v_particle_np_le &
 [ STEM < "lock" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_lock_v_out_rel" ],
            PHON.ONSET con ] ].

lock_up_v1 := v_particle_np_le &
 [ STEM < "lock" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_lock_v_up_rel" ],
            PHON.ONSET con ] ].

lock_up_v2 := v_particle_le &
 [ STEM < "lock" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_lock_v_up_rel" ],
            PHON.ONSET con ] ].

lock_v1 := v_np_trans_le &
 [ STEM < "lock" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lock_v_1_rel",
            PHON.ONSET con ] ].

locker_n1 := n_intr_le &
 [ STEM < "locker" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_locker_n_1_rel",
            PHON.ONSET con ] ].

lockerbie_n1 := n_proper_city_le &
 [ STEM < "lockerbie" >,
   SYNSEM [ LKEYS.KEYREL.CARG "lockerbie",
            PHON.ONSET con ] ].

lockup_n1 := n_intr_le &
 [ STEM < "lockup" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lockup_n_1_rel",
            PHON.ONSET con ] ].

locomotive_n1 := n_intr_le &
 [ STEM < "locomotive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_locomotive_n_1_rel",
            PHON.ONSET con ] ].

locurner := n_intr_named_le &
 [ STEM < "locurner" >,
   SYNSEM [ LKEYS.KEYREL.CARG "locurner",
            PHON.ONSET con ] ].

locurner_hof := n_intr_named_le &
 [ STEM < "locurner", "hof" >,
   SYNSEM [ LKEYS.KEYREL.CARG "locurner_hof",
            PHON.ONSET con ] ].

locurner_hof_2 := n_intr_named_le &
 [ STEM < "locurner-", "hof" >,
   SYNSEM [ LKEYS.KEYREL.CARG "locurner_hof",
            PHON.ONSET con ] ].

lode_n1 := n_intr_le &
 [ STEM < "lode" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lode_n_1_rel",
            PHON.ONSET con ] ].

lodge_n1 := n_intr_le &
 [ STEM < "lodge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lodge_n_1_rel",
            PHON.ONSET con ] ].

lodge_post_ttl := n_post_title_le &
 [ STEM < "lodge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lodge_n_1_rel",
            PHON.ONSET con ] ].

lodge_v1 := v_np*_trans_le &
 [ STEM < "lodge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lodge_v_1_rel",
            PHON.ONSET con ] ].

lodger_n1 := n_intr_le &
 [ STEM < "lodger" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lodger_n_1_rel",
            PHON.ONSET con ] ].

lodging_n1 := n_mass_count_le &
 [ STEM < "lodging" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lodging_n_1_rel",
            PHON.ONSET con ] ].

loen := n_proper_le &
 [ STEM < "loen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "loen",
            PHON.ONSET con ] ].

lofoten_n1 := n_intr_named_le &
 [ STEM < "lofoten" >,
   SYNSEM [ LKEYS.KEYREL.CARG "lofoten",
            PHON.ONSET con ] ].

lofthus := n_proper_le &
 [ STEM < "lofthus" >,
   SYNSEM [ LKEYS.KEYREL.CARG "lofthus",
            PHON.ONSET con ] ].

loftier := adj_comp_le &
 [ STEM < "loftier" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lofty_a_1_rel",
            PHON.ONSET con ] ].

loftiest := adj_superl_le &
 [ STEM < "loftiest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lofty_a_1_rel",
            PHON.ONSET con ] ].

lofty_a1 := adj_intrans_le &
 [ STEM < "lofty" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lofty_a_1_rel",
            PHON.ONSET con ] ].

log_n1 := n_ppof_le &
 [ STEM < "log" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_log_n_of_rel",
            PHON.ONSET con ] ].

log_v1 := v_np_trans_le &
 [ STEM < "log" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_log_v_1_rel",
            PHON.ONSET con ] ].

logan_airport_n1 := n_proper_le &
 [ STEM < "logan", "airport" >,
   SYNSEM [ LKEYS.KEYREL.CARG "logan_airport",
            PHON.ONSET con ] ].

logan_international_airport_n1 := n_proper_le &
 [ STEM < "logan", "international", "airport" >,
   SYNSEM [ LKEYS.KEYREL.CARG "logan_international_airport",
            PHON.ONSET con ] ].

logan_international_n1 := n_proper_le &
 [ STEM < "logan", "international" >,
   SYNSEM [ LKEYS.KEYREL.CARG "logan_international",
            PHON.ONSET con ] ].

logan_n1 := n_proper_le &
 [ STEM < "logan" >,
   SYNSEM [ LKEYS.KEYREL.CARG "logan",
            PHON.ONSET con ] ].

logical_a1 := adj_intrans_le &
 [ STEM < "logical" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_logical_a_1_rel",
            PHON.ONSET con ] ].

logically := adv_int_vp_le &
 [ STEM < "logically" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_logical_a_1_rel",
            PHON.ONSET con ] ].

logistics_n1 := n_plur_ppcomp_le &
 [ STEM < "logistic" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_logistics_n_of_rel" ],
            PHON.ONSET con ] ].

logoppof := n_intr_le &
 [ STEM < "logo" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_logo_n_1_rel",
            PHON.ONSET con ] ].

loins_n1 := n_plur_le &
 [ STEM < "loin" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_loins_n_1_rel",
            PHON.ONSET con ] ].

lola := n_proper_le &
 [ STEM < "lola" >,
   SYNSEM [ LKEYS.KEYREL.CARG "lola",
            PHON.ONSET con ] ].

lom_n1 := n_proper_le &
 [ STEM < "lom" >,
   SYNSEM [ LKEYS.KEYREL.CARG "lom",
            PHON.ONSET con ] ].

lombvÃ¦ringer_n1 := n_proper_le &
 [ STEM < "lombvÃ¦ringer" >,
   SYNSEM [ LKEYS.KEYREL.CARG "lombvÃ¦ringer",
            PHON.ONSET con ] ].

lomseggen_n1 := n_proper_le &
 [ STEM < "lomseggen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "lomseggen",
            PHON.ONSET con ] ].

london_n1 := n_proper_city_le &
 [ STEM < "london" >,
   SYNSEM [ LKEYS.KEYREL.CARG "london",
            PHON.ONSET con ] ].

lone_a1 := adj_attr_intrans_le &
 [ STEM < "lone" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lone_a_1_rel",
            PHON.ONSET con ] ].

lonely_a1 := adj_intrans_le &
 [ STEM < "lonely" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lonely_a_1_rel",
            PHON.ONSET con ] ].

lonesome_a1 := adj_intrans_le &
 [ STEM < "lonesome" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lonesome_a_1_rel",
            PHON.ONSET con ] ].

long_a1 := adj_attr_intrans_le &
 [ STEM < "long" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_long_a_1_rel",
            PHON.ONSET con ] ].

long_adv2 := adv_int_vp_pre_le &
 [ STEM < "long" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_long_a_1_rel",
            PHON.ONSET con ] ].

long_after_adv1 := adv_int_vp_le &
 [ STEM < "long", "after" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_long+after_a_1_rel",
            PHON.ONSET con ] ].

long_ass_a1 := adj_intrans_le &
 [ STEM < "long", "ass" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_long+ass_a_1_rel",
            PHON.ONSET con ] ].

long_before_adv1 := adv_int_vp_le &
 [ STEM < "long", "before" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_long+before_a_1_rel",
            PHON.ONSET con ] ].

long_for_v1 := v_empty_prep_intrans_le &
 [ STEM < "long" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_long_v_for_rel" ],
            PHON.ONSET con ] ].

long_meas_np := n_adv_gradable_le &
 [ STEM < "long" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED _long_a_1_rel,
                    KEYREL.PRED time_n_rel ],
            PHON.ONSET con ] ].

long_run_a1 := adj_intrans_le &
 [ STEM < "long", "run" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_long+run_a_1_rel",
            PHON.ONSET con ] ].

long_sleeve_a1 := adj_intrans_le &
 [ STEM < "long", "sleeve" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_long+sleeved_a_1_rel",
            PHON.ONSET con ] ].

long_sleeve_a2 := adj_intrans_le &
 [ STEM < "long-", "sleeve" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_long+sleeved_a_1_rel",
            PHON.ONSET con ] ].

long_sleeved_a1 := adj_intrans_le &
 [ STEM < "long", "sleeved" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_long+sleeved_a_1_rel",
            PHON.ONSET con ] ].

long_sleeved_a2 := adj_intrans_le &
 [ STEM < "long-", "sleeved" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_long+sleeved_a_1_rel",
            PHON.ONSET con ] ].

long_term_a1 := adj_intrans_le &
 [ STEM < "long", "term" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_long+term_a_1_rel",
            PHON.ONSET con ] ].

long_term_a2 := adj_intrans_le &
 [ STEM < "long-", "term" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_long+term_a_1_rel",
            PHON.ONSET con ] ].

long_v1 := v_subj_equi_le &
 [ STEM < "long" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_long_v_1_rel",
            PHON.ONSET con ] ].

long_v2 := v_cp_inf_le &
 [ STEM < "long" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_long_v_1_rel",
            PHON.ONSET con ] ].

longer_a1 := adj_comp_le &
 [ STEM < "longer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_long_a_1_rel",
            PHON.ONSET con ] ].

longer_meas_np := n_adv_gradable_comp_le &
 [ STEM < "longer" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED _longer_a_1_rel,
                    KEYREL.PRED time_n_rel ],
            PHON.ONSET con ] ].

longest_a1 := adj_superl_le &
 [ STEM < "longest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_long_a_1_rel",
            PHON.ONSET con ] ].

longitude_n1 := n_mass_count_le &
 [ STEM < "longitude" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_longitude_n_1_rel",
            PHON.ONSET con ] ].

longitudinal_a1 := adj_intrans_le &
 [ STEM < "longitudinal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_longitudinal_a_1_rel",
            PHON.ONSET con ] ].

longyearbyen := n_proper_le &
 [ STEM < "longyearbyen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "longyearbyen",
            PHON.ONSET con ] ].

look_after_v1 := v_empty_prep_intrans_le &
 [ STEM < "look" >,
   SYNSEM [ LKEYS [ --COMPKEY _after_p_sel_rel,
                    KEYREL.PRED "_look_v_after_rel" ],
            PHON.ONSET con ] ].

look_around_v1 := v_particle_le &
 [ STEM < "look" >,
   SYNSEM [ LKEYS [ --COMPKEY _around_p_sel_rel,
                    KEYREL.PRED "_look_v_around_rel" ],
            PHON.ONSET con ] ].

look_around_v2 := v_particle_pp_le &
 [ STEM < "look" >,
   SYNSEM [ LKEYS [ --COMPKEY _around_p_sel_rel,
                    --OCOMPKEY _for_p_rel,
                    KEYREL.PRED "_look_v_around_rel" ],
            PHON.ONSET con ] ].

look_at_v1 := v_empty_prep_intrans_le &
 [ STEM < "look" >,
   SYNSEM [ LKEYS [ --COMPKEY _at_p_sel_rel,
                    KEYREL.PRED "_look_v_at_rel" ],
            PHON.ONSET con ] ].

look_back_at_v1 := v_particle_empty_pp_le &
 [ STEM < "look" >,
   SYNSEM [ LKEYS [ --COMPKEY _back_p_sel_rel,
                    --OCOMPKEY _at_p_sel_rel,
                    KEYREL.PRED "_look_v_back-at_rel" ],
            PHON.ONSET con ] ].

look_for_v1 := v_empty_prep_intrans_le &
 [ STEM < "look" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_look_v_for_rel" ],
            PHON.ONSET con ] ].

look_forward_to_v1 := v_particle_empty_pp_le &
 [ STEM < "look" >,
   SYNSEM [ LKEYS [ --COMPKEY _forward_p_sel_rel,
                    --OCOMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_look_v_forward-to_rel" ],
            PHON.ONSET con ] ].

look_in_on_v1 := v_particle_pp_le &
 [ STEM < "look" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    --OCOMPKEY _on_p_rel,
                    KEYREL.PRED "_look_v_in_rel" ],
            PHON.ONSET con ] ].

look_into_v1 := v_empty_prep_intrans_le &
 [ STEM < "look" >,
   SYNSEM [ LKEYS [ --COMPKEY _into_p_sel_rel,
                    KEYREL.PRED "_look_v_into_rel" ],
            PHON.ONSET con ] ].

look_like_v1 := v_prep_intrans_le &
 [ STEM < "look" >,
   SYNSEM [ LKEYS [ --COMPKEY _like_p_rel,
                    KEYREL.PRED "_look_v_like_rel" ],
            PHON.ONSET con ] ].

look_n1 := n_ppcomp_le &
 [ STEM < "look" >,
   SYNSEM [ LKEYS [ --COMPKEY _at_p_sel_rel,
                    KEYREL.PRED "_look_n_at_rel" ],
            PHON.ONSET con ] ].

look_out_n1 := n_ppcomp_le &
 [ STEM < "look", "out" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_look+out_n_for_rel" ],
            PHON.ONSET con ] ].

look_over_v1 := v_particle_np_le &
 [ STEM < "look" >,
   SYNSEM [ LKEYS [ --COMPKEY _over_p_sel_rel,
                    KEYREL.PRED "_look_v_over_rel" ],
            PHON.ONSET con ] ].

look_seem_v1 := v_prdp_pp_seq_adj_le &
 [ STEM < "look" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_look_v_seem-to_rel",
            PHON.ONSET con ] ].

look_seem_v2 := v_expl_it_subj_like_le &
 [ STEM < "look" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_look_v_seem-to_rel",
            PHON.ONSET con ] ].

look_through_v1 := v_empty_prep_intrans_le &
 [ STEM < "look" >,
   SYNSEM [ LKEYS [ --COMPKEY _through_p_sel_rel,
                    KEYREL.PRED "_look_v_through_rel" ],
            PHON.ONSET con ] ].

look_to_v1 := v_empty_prep_intrans_le &
 [ STEM < "look" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_look_v_to_rel" ],
            PHON.ONSET con ] ].

look_up_to_v1 := v_particle_pp_le &
 [ STEM < "look" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    --OCOMPKEY _to_p_rel,
                    KEYREL.PRED "_look_v_up-to_rel" ],
            PHON.ONSET con ] ].

look_up_v1 := v_particle_np_le &
 [ STEM < "look" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_look_v_up_rel" ],
            PHON.ONSET con ] ].

look_up_v2 := v_particle_le &
 [ STEM < "look" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_look_v_up-dir_rel" ],
            PHON.ONSET con ] ].

look_v1 := v_prep_dir_le &
 [ STEM < "look" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_look_v_1_rel",
            PHON.ONSET con ] ].

look_v2 := v_subj_equi_le &
 [ STEM < "look" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_look_v_1_rel",
            PHON.ONSET con ] ].

look_v3 := v_cp_like_non_trans_le &
 [ STEM < "look" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_look_v_1_rel",
            PHON.ONSET con ] ].

lookout_n1 := n_ppcomp_le &
 [ STEM < "lookout" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_look+out_n_for_rel" ],
            PHON.ONSET con ] ].

loom_n1 := n_intr_le &
 [ STEM < "loom" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_loom_n_1_rel",
            PHON.ONSET con ] ].

loom_v1 := v_unacc_le &
 [ STEM < "loom" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_loom_v_1_rel",
            PHON.ONSET con ] ].

loon_n1 := n_intr_le &
 [ STEM < "loon" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_loon_n_1_rel",
            PHON.ONSET con ] ].

loop_n1 := n_intr_le &
 [ STEM < "loop" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_loop_n_1_rel",
            PHON.ONSET con ] ].

loop_v1 := v_prep_dir_le &
 [ STEM < "loop" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_loop_v_1_rel",
            PHON.ONSET con ] ].

loop_v2 := v_np_prep_trans_dors_le &
 [ STEM < "loop" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_loop_v_1_rel",
            PHON.ONSET con ] ].

loose_a1 := adj_intrans_le &
 [ STEM < "loose" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_loose_a_1_rel",
            PHON.ONSET con ] ].

loose_v1 := v_np_trans_le &
 [ STEM < "loosen" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_loose_v_1_rel",
            PHON.ONSET con ] ].

loosely_a1 := adv_int_vp_post_le &
 [ STEM < "loosely" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_loose_a_1_rel",
            PHON.ONSET con ] ].

loosen_v1 := v_np*_trans_le &
 [ STEM < "loosen" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_loosen_v_1_rel",
            PHON.ONSET con ] ].

lop_off_v1 := v_particle_np_le &
 [ STEM < "lop" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_lop_v_off_rel" ],
            PHON.ONSET con ] ].

lord_n1 := n_proper_le &
 [ STEM < "lord" >,
   SYNSEM [ LKEYS.KEYREL.CARG "lord",
            PHON.ONSET con ] ].

lord_root_post := adv_s_post_word_nospec_le &
 [ STEM < "lord" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lord_a_1_rel",
            PHON.ONSET con ] ].

lord_root_pre := adv_s_pre_word_root_le &
 [ STEM < "lord" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lord_a_1_rel",
            PHON.ONSET con ] ].

los_altos_hills_n1 := n_proper_city_le &
 [ STEM < "los", "altos", "hills" >,
   SYNSEM [ LKEYS.KEYREL.CARG "los_altos_hills",
            PHON.ONSET con ] ].

los_altos_n1 := n_proper_city_le &
 [ STEM < "los", "altos" >,
   SYNSEM [ LKEYS.KEYREL.CARG "los_altos",
            PHON.ONSET con ] ].

los_angeles_international_n1 := n_proper_le &
 [ STEM < "los", "angeles", "international" >,
   SYNSEM [ LKEYS.KEYREL.CARG "los_angeles_international",
            PHON.ONSET con ] ].

los_angeles_n1 := n_proper_city_le &
 [ STEM < "los", "angeles" >,
   SYNSEM [ LKEYS.KEYREL.CARG "los_angeles",
            PHON.ONSET con ] ].

los_angeles_n2 := n_proper_city_le &
 [ STEM < "la" >,
   SYNSEM [ LKEYS.KEYREL.CARG "los_angeles",
            PHON.ONSET con ] ].

lose_by_v1 := v_empty_prep_intrans_le &
 [ STEM < "lose" >,
   SYNSEM [ LKEYS [ --COMPKEY _by_p_sel_rel,
                    KEYREL.PRED "_lose_v_by_rel" ],
            PHON.ONSET con ] ].

lose_out_on_v1 := v_particle_pp_le &
 [ STEM < "lose" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    --OCOMPKEY _on_p_rel,
                    KEYREL.PRED "_lose_v_out_rel" ],
            PHON.ONSET con ] ].

lose_out_v2 := v_particle_le &
 [ STEM < "lose" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_lose_v_out_rel" ],
            PHON.ONSET con ] ].

lose_v1 := v_np*_trans_le &
 [ STEM < "lose" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lose_v_1_rel",
            PHON.ONSET con ] ].

loss_n1 := n_mass_count_ppof_le &
 [ STEM < "loss" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_loss_n_of_rel",
            PHON.ONSET con ] ].

lost_a1 := adj_intrans_le &
 [ STEM < "lost" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lost_a_1_rel",
            PHON.ONSET con ] ].

lot_n := n_group_ppof_le &
 [ STEM < "lot" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lot_n_of_rel",
            PHON.ONSET con ] ].

lot_n2 := n_intr_le &
 [ STEM < "lot" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lot_n_1_rel",
            PHON.ONSET con ] ].

lots_n1 := n_group_mass_ppof_le &
 [ STEM < "lots" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lot_n_of_rel",
            PHON.ONSET con ] ].

lottery_n1 := n_intr_le &
 [ STEM < "lottery" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lottery_n_1_rel",
            PHON.ONSET con ] ].

lotto_n1 := n_intr_le &
 [ STEM < "lotto" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lotto_n_1_rel",
            PHON.ONSET con ] ].

lou_n1 := n_proper_le &
 [ STEM < "lou" >,
   SYNSEM [ LKEYS.KEYREL.CARG "lou",
            PHON.ONSET con ] ].

loud_a1 := adj_intrans_le &
 [ STEM < "loud" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_loud_a_1_rel",
            PHON.ONSET con ] ].

loudly_adv1 := adv_int_vp_le &
 [ STEM < "loudly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_loud_a_1_rel",
            PHON.ONSET con ] ].

loudspeaker_n1 := n_intr_le &
 [ STEM < "loudspeaker" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_loudspeaker_n_1_rel",
            PHON.ONSET con ] ].

louis_n1 := n_proper_le &
 [ STEM < "louis" >,
   SYNSEM [ LKEYS.KEYREL.CARG "louis",
            PHON.ONSET con ] ].

louisiana_n1 := n_proper_le &
 [ STEM < "louisiana" >,
   SYNSEM [ LKEYS.KEYREL.CARG "louisiana",
            PHON.ONSET con ] ].

louisiana_n2 := n_proper_abb_le &
 [ STEM < "la" >,
   SYNSEM [ LKEYS.KEYREL.CARG "louisiana",
            PHON.ONSET con ] ].

lounge_n1 := n_intr_le &
 [ STEM < "lounge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lounge_n_1_rel",
            PHON.ONSET con ] ].

louse_n := n_intr_le &
 [ STEM < "louse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_louse_n_1_rel",
            PHON.ONSET con ] ].

lousy_a1 := adj_intrans_le &
 [ STEM < "lousy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lousy_a_1_rel",
            PHON.ONSET con ] ].

love_n1 := n_mass_ppcomp_oblig_le &
 [ STEM < "love" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_love_n_of-for_rel" ],
            PHON.ONSET con ] ].

love_n2 := n_mass_ppcomp_le &
 [ STEM < "love" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_love_n_of-for_rel" ],
            PHON.ONSET con ] ].

love_v1 := v_np_trans_le &
 [ STEM < "love" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_love_v_1_rel",
            PHON.ONSET con ] ].

love_v2 := v_subj_equi_le &
 [ STEM < "love" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_love_v_1_rel",
            PHON.ONSET con ] ].

love_v3 := v_subj_equi_prp_le &
 [ STEM < "love" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_love_v_1_rel",
            PHON.ONSET con ] ].

lovely_adj := adj_intrans_le &
 [ STEM < "lovely" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lovely_a_1_rel",
            PHON.ONSET con ] ].

lovely_adv := adv_int_vp_post_le &
 [ STEM < "lovely" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lovely_a_1_rel",
            PHON.ONSET con ] ].

lover_n1 := n_intr_le &
 [ STEM < "lover" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lover_n_1_rel",
            PHON.ONSET con ] ].

loving_isect := adj_intrans_le &
 [ STEM < "loving" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_loving_a_1_rel",
            PHON.ONSET con ] ].

low := adv_int_vp_post_le &
 [ STEM < "low" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_low_a_1_rel",
            PHON.ONSET con ] ].

low_a1 := adj_trans_le &
 [ STEM < "low" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_low_a_on_rel" ],
            PHON.ONSET con ] ].

low_deg := adv_degree_spec_m_le &
 [ STEM < "low" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_low_x_deg_rel",
            PHON.ONSET con ] ].

low_lying_a2 := adj_intrans_le &
 [ STEM < "low-", "lying" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lowlying_a_1_rel",
            PHON.ONSET con ] ].

low_n1 := n_mass_count_le &
 [ STEM < "low" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_low_n_1_rel",
            PHON.ONSET con ] ].

low_tech_a1 := adj_intrans_le &
 [ STEM < "low", "tech" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_low+tech_a_1_rel",
            PHON.ONSET con ] ].

low_tech_a2 := adj_intrans_le &
 [ STEM < "low-", "tech" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_low+tech_a_1_rel",
            PHON.ONSET con ] ].

lower_a1 := adj_comp_le &
 [ STEM < "lower" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_low_a_1_rel",
            PHON.ONSET con ] ].

lower_a2 := adj_intrans_le &
 [ STEM < "lower" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_low_a_1_rel",
            PHON.ONSET con ] ].

lower_deg := adv_degree_spec_m_le &
 [ STEM < "lower" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lower_x_deg_rel",
            PHON.ONSET con ] ].

lower_v1 := v_np_trans_le &
 [ STEM < "lower" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lower_v_cause_rel",
            PHON.ONSET con ] ].

lower_v2 := v_unacc_dir_le &
 [ STEM < "lower" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lower_v_1_rel",
            PHON.ONSET con ] ].

lowest_a1 := adj_superl_le &
 [ STEM < "lowest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_low_a_1_rel",
            PHON.ONSET con ] ].

lowland_n1 := n_mass_count_le &
 [ STEM < "lowland" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lowland_n_1_rel",
            PHON.ONSET con ] ].

lowlying_a1 := adj_intrans_le &
 [ STEM < "lowlying" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lowlying_a_1_rel",
            PHON.ONSET con ] ].

loyal_a1 := adj_intrans_le &
 [ STEM < "loyal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_loyal_a_1_rel",
            PHON.ONSET con ] ].

lparen_pct := punct_lp_le &
 [ STEM < "(" > ].

lqiv_nd := n_proper_le &
 [ STEM < "lqiv" >,
   SYNSEM [ LKEYS.KEYREL.CARG "lqiv",
            PHON.ONSET con ] ].

lucelly_n1 := n_proper_le &
 [ STEM < "lucelly" >,
   SYNSEM [ LKEYS.KEYREL.CARG "lucelly",
            PHON.ONSET con ] ].

lucia_n1 := n_proper_le &
 [ STEM < "lucia" >,
   SYNSEM [ LKEYS.KEYREL.CARG "lucia",
            PHON.ONSET con ] ].

lucid_a1 := adj_intrans_le &
 [ STEM < "lucid" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lucid_a_1_rel",
            PHON.ONSET con ] ].

luck_n1 := n_mass_le &
 [ STEM < "luck" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_luck_n_1_rel",
            PHON.ONSET con ] ].

luckily_adv1 := adv_int_vp_aux_le &
 [ STEM < "luckily" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lucky_a_1_rel",
            PHON.ONSET con ] ].

luckily_root_pre := adv_s_pre_word_root_le &
 [ STEM < "luckily" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lucky_a_1_rel",
            PHON.ONSET con ] ].

lucky_a1 := adj_intrans_le &
 [ STEM < "lucky" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lucky_a_1_rel",
            PHON.ONSET con ] ].

lucky_a2 := adj_reg_atrans_that_cp_le &
 [ STEM < "lucky" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lucky_a_1_rel",
            PHON.ONSET con ] ].

lucrative_a1 := adj_intrans_le &
 [ STEM < "lucrative" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lucrative_a_1_rel",
            PHON.ONSET con ] ].

ludwigshafen_n1 := n_proper_city_le &
 [ STEM < "ludwigshafen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "ludwigshafen",
            PHON.ONSET con ] ].

luebeck_n1 := n_proper_city_le &
 [ STEM < "luebeck" >,
   SYNSEM [ LKEYS.KEYREL.CARG "luebeck",
            PHON.ONSET con ] ].

lueneburg_nd := n_proper_city_le &
 [ STEM < "lueneburg" >,
   SYNSEM [ LKEYS.KEYREL.CARG "lueneburg",
            PHON.ONSET con ] ].

lufthansa_n1 := n_proper_le &
 [ STEM < "lufthansa" >,
   SYNSEM [ LKEYS.KEYREL.CARG "lufthansa",
            PHON.ONSET con ] ].

lug_n1 := n_intr_le &
 [ STEM < "lug" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lug_n_1_rel",
            PHON.ONSET con ] ].

lug_v1 := v_np_trans_le &
 [ STEM < "lug" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lug_v_1_rel",
            PHON.ONSET con ] ].

lug_v2 := v_np_prep_trans_dors_le &
 [ STEM < "lug" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lug_v_1_rel",
            PHON.ONSET con ] ].

luggage_n1 := n_intr_le &
 [ STEM < "luggage" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_luggage_n_1_rel",
            PHON.ONSET con ] ].

luisenhof_n1 := n_intr_named_le &
 [ STEM < "luisenhof" >,
   SYNSEM [ LKEYS.KEYREL.CARG "luisenhof",
            PHON.ONSET con ] ].

lull_n1 := n_intr_le &
 [ STEM < "lull" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lull_n_1_rel",
            PHON.ONSET con ] ].

lull_v1 := v_empty_prep_trans_le &
 [ STEM < "lull" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_lull_v_to_rel" ],
            PHON.ONSET con ] ].

lull_v2 := v_empty_prep_trans_le &
 [ STEM < "lull" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _into_p_sel_rel,
                    KEYREL.PRED "_lull_v_into_rel" ],
            PHON.ONSET con ] ].

lumber_n1 := n_mass_le &
 [ STEM < "lumber" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lumber_n_1_rel",
            PHON.ONSET con ] ].

lumber_v1 := v_prep_dir_oblig_le &
 [ STEM < "lumber" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lumber_v_1_rel",
            PHON.ONSET con ] ].

luminosity_n1 := n_mass_le &
 [ STEM < "luminosity" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_luminosity_n_1_rel",
            PHON.ONSET con ] ].

luminous_a1 := adj_intrans_le &
 [ STEM < "luminous" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_luminous_a_1_rel",
            PHON.ONSET con ] ].

lump_n1 := n_intr_le &
 [ STEM < "lump" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lump_n_1_rel",
            PHON.ONSET con ] ].

lunacy_n1 := n_mass_count_le &
 [ STEM < "lunacy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lunacy_n_1_rel",
            PHON.ONSET con ] ].

lunar_a1 := adj_intrans_le &
 [ STEM < "lunar" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lunar_a_1_rel",
            PHON.ONSET con ] ].

lunch_n1 := n_mass_count_le &
 [ STEM < "lunch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lunch_n_1_rel",
            PHON.ONSET con ] ].

lunch_n2 := n_mealtime_le &
 [ STEM < "lunch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lunch_n_1_rel",
            PHON.ONSET con ] ].

lunch_on_v1 := v_empty_prep_intrans_le &
 [ STEM < "lunch" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_lunch_v_on_rel" ],
            PHON.ONSET con ] ].

lunch_time_n2 := n_mealtime_le &
 [ STEM < "lunchtime" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lunch_n_1_rel",
            PHON.ONSET con ] ].

lunch_v1 := v_unerg_le &
 [ STEM < "lunch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lunch_v_1_rel",
            PHON.ONSET con ] ].

lunchbreak_n1 := n_intr_le &
 [ STEM < "lunchbreak" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lunchbreak_n_1_rel",
            PHON.ONSET con ] ].

luncheon_n1 := n_intr_le &
 [ STEM < "luncheon" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_luncheon_n_1_rel",
            PHON.ONSET con ] ].

lund_n1 := n_proper_le &
 [ STEM < "lund" >,
   SYNSEM [ LKEYS.KEYREL.CARG "lund",
            PHON.ONSET con ] ].

lundadalen_n1 := n_proper_le &
 [ STEM < "lundadalen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "lundadalen",
            PHON.ONSET con ] ].

lundadalsbandet_n1 := n_proper_le &
 [ STEM < "lundadalsbandet" >,
   SYNSEM [ LKEYS.KEYREL.CARG "lundadalsbandet",
            PHON.ONSET con ] ].

lunde := n_proper_le &
 [ STEM < "lunde" >,
   SYNSEM [ LKEYS.KEYREL.CARG "lunde",
            PHON.ONSET con ] ].

lunde_camping := n_proper_le &
 [ STEM < "lunde", "camping" >,
   SYNSEM [ LKEYS.KEYREL.CARG "lunde_camping",
            PHON.ONSET con ] ].

lung_n1 := n_intr_le &
 [ STEM < "lung" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lung_n_1_rel",
            PHON.ONSET con ] ].

lunge_n1 := n_intr_le &
 [ STEM < "lunge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lunge_n_1_rel",
            PHON.ONSET con ] ].

lunge_v1 := v_prep_dir_le &
 [ STEM < "lunge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lunge_v_1_rel",
            PHON.ONSET con ] ].

lurch_n1 := n_intr_le &
 [ STEM < "lurch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lurch_n_1_rel",
            PHON.ONSET con ] ].

lurch_v1 := v_prep_dir_le &
 [ STEM < "lurch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lurch_v_1_rel",
            PHON.ONSET con ] ].

lure_n1 := n_intr_le &
 [ STEM < "lure" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lure_n_1_rel",
            PHON.ONSET con ] ].

lure_v1 := v_np_trans_le &
 [ STEM < "lure" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lure_v_1_rel",
            PHON.ONSET con ] ].

lurk_v1 := v_unerg_le &
 [ STEM < "lurk" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lurk_v_1_rel",
            PHON.ONSET con ] ].

lusahaugane_n1 := n_proper_le &
 [ STEM < "lusahaugane" >,
   SYNSEM [ LKEYS.KEYREL.CARG "lusahaugane",
            PHON.ONSET con ] ].

lush_a1 := adj_intrans_le &
 [ STEM < "lush" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lush_a_1_rel",
            PHON.ONSET con ] ].

lushness_n1 := n_mass_count_le &
 [ STEM < "lushness" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lushness_n_1_rel",
            PHON.ONSET con ] ].

luster_n1 := n_mass_count_le &
 [ STEM < "luster" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_luster_n_1_rel",
            PHON.ONSET con ] ].

luster_n2 := n_proper_le &
 [ STEM < "luster" >,
   SYNSEM [ LKEYS.KEYREL.CARG "luster",
            PHON.ONSET con ] ].

lustful_a1 := adj_intrans_le &
 [ STEM < "lustful" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lustful_a_1_rel",
            PHON.ONSET con ] ].

lustrafjord := n_proper_le &
 [ STEM < "lustrafjord" >,
   SYNSEM [ LKEYS.KEYREL.CARG "lustrafjord",
            PHON.ONSET con ] ].

lustrous_a1 := adj_intrans_le &
 [ STEM < "lustrous" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lustrous_a_1_rel",
            PHON.ONSET con ] ].

lusty_a1 := adj_intrans_le &
 [ STEM < "lusty" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lusty_a_1_rel",
            PHON.ONSET con ] ].

luther_n1 := n_proper_le &
 [ STEM < "luther" >,
   SYNSEM [ LKEYS.KEYREL.CARG "luther",
            PHON.ONSET con ] ].

luxuriance_n1 := n_mass_le &
 [ STEM < "luxuriance" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_luxuriance_n_1_rel",
            PHON.ONSET con ] ].

luxuriant_a1 := adj_intrans_le &
 [ STEM < "luxuriant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_luxuriant_a_1_rel",
            PHON.ONSET con ] ].

luxurious_isect := adj_intrans_le &
 [ STEM < "luxurious" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_luxurious_a_1_rel",
            PHON.ONSET con ] ].

luxuriously := adv_int_vp_le &
 [ STEM < "luxuriously" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_luxurious_a_1_rel",
            PHON.ONSET con ] ].

luxury_n := n_intr_le &
 [ STEM < "luxury" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_luxury_n_1_rel",
            PHON.ONSET con ] ].

lykken_n1 := n_proper_le &
 [ STEM < "lykken" >,
   SYNSEM [ LKEYS.KEYREL.CARG "lykken",
            PHON.ONSET con ] ].

lyle := n_proper_le &
 [ STEM < "lyle" >,
   SYNSEM [ LKEYS.KEYREL.CARG "lyle",
            PHON.ONSET con ] ].

lymphatic_n1 := n_intr_le &
 [ STEM < "lymphatic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lymphatic_n_1_rel",
            PHON.ONSET con ] ].

lynmouth_n1 := n_proper_le &
 [ STEM < "lynmouth" >,
   SYNSEM [ LKEYS.KEYREL.CARG "lynmouth",
            PHON.ONSET con ] ].

lynne := n_proper_le &
 [ STEM < "lynne" >,
   SYNSEM [ LKEYS.KEYREL.CARG "lynne",
            PHON.ONSET con ] ].

lynx_n1 := n_intr_le &
 [ STEM < "lynx" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lynx_n_1_rel",
            PHON.ONSET con ] ].

lynx_n2 := n_mass_kind_le &
 [ STEM < "lynx" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lynx_n_kind_rel",
            PHON.ONSET con ] ].

lysander_n1 := n_proper_le &
 [ STEM < "lysander" >,
   SYNSEM [ LKEYS.KEYREL.CARG "lysander",
            PHON.ONSET con ] ].

lÃ¥gtunga_n1 := n_proper_le &
 [ STEM < "lÃ¥gtunga" >,
   SYNSEM [ LKEYS.KEYREL.CARG "lÃ¥gtunga",
            PHON.ONSET con ] ].

lÃ¦rda := n_proper_le &
 [ STEM < "lÃ¦rda" >,
   SYNSEM [ LKEYS.KEYREL.CARG "lÃ¦rda",
            PHON.ONSET con ] ].

lÃ¦rdal := n_proper_le &
 [ STEM < "lÃ¦rdal" >,
   SYNSEM [ LKEYS.KEYREL.CARG "lÃ¦rdal",
            PHON.ONSET con ] ].

lÃ¸fallstrand := n_proper_le &
 [ STEM < "lÃ¸fallstrand" >,
   SYNSEM [ LKEYS.KEYREL.CARG "lÃ¸fallstrand",
            PHON.ONSET con ] ].

m3_n1 := n_proper_le &
 [ STEM < "m3" >,
   SYNSEM [ LKEYS.KEYREL.CARG "m3",
            PHON.ONSET con ] ].

m500_n1 := n_intr_le &
 [ STEM < "m500" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_m500_n_1_rel",
            PHON.ONSET con ] ].

m505_n1 := n_intr_le &
 [ STEM < "m505" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_m505_n_1_rel",
            PHON.ONSET con ] ].

m_np1 := n_proper_le &
 [ STEM < "_m" >,
   SYNSEM [ LKEYS.KEYREL.CARG "m",
            PHON.ONSET voc ] ].

m_period_np1 := n_proper_le &
 [ STEM < "m." >,
   SYNSEM [ LKEYS.KEYREL.CARG "m",
            PHON.ONSET voc ] ].

m_period_np2 := n_proper_le &
 [ STEM < "_m." >,
   SYNSEM [ LKEYS.KEYREL.CARG "m",
            PHON.ONSET voc ] ].

m_slash_b_n1 := n_proper_le &
 [ STEM < "_M", "/", "_B" >,
   SYNSEM [ LKEYS.KEYREL.CARG "m-b",
            PHON.ONSET voc ] ].

maam_root_post := adv_disc_posth_le &
 [ STEM < "maam" >,
   SYNSEM [ LKEYS.KEYREL.CARG "maam",
            PHON.ONSET con ] ].

maam_root_pre := adv_disc_preh_le &
 [ STEM < "maam" >,
   SYNSEM [ LKEYS.KEYREL.CARG "maam",
            PHON.ONSET con ] ].

mac_n1 := n_proper_le &
 [ STEM < "mac" >,
   SYNSEM [ LKEYS.KEYREL.CARG "mac",
            PHON.ONSET con ] ].

macadamize_v1 := v_np_trans_le &
 [ STEM < "macadamize" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_macadamize_v_1_rel",
            PHON.ONSET con ] ].

macbeth := n_proper_le &
 [ STEM < "macbeth" >,
   SYNSEM [ LKEYS.KEYREL.CARG "macbeth",
            PHON.ONSET con ] ].

machine_n1 := n_intr_le &
 [ STEM < "machine" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_machine_n_1_rel",
            PHON.ONSET con ] ].

machinery_n1 := n_mass_le &
 [ STEM < "machinery" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_machinery_n_1_rel",
            PHON.ONSET con ] ].

mad_a1 := adj_intrans_le &
 [ STEM < "mad" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mad_a_1_rel",
            PHON.ONSET con ] ].

madam_n1 := n_proper_le &
 [ STEM < "madam" >,
   SYNSEM [ LKEYS.KEYREL.CARG "madam",
            PHON.ONSET con ] ].

madam_title := n_title_unsp_le &
 [ STEM < "madam" >,
   SYNSEM [ LKEYS.KEYREL.CARG "madam",
            PHON.ONSET con ] ].

maddening_a1 := adj_intrans_le &
 [ STEM < "maddening" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_maddening_a_1_rel",
            PHON.ONSET con ] ].

made_v2 := v_sorb_pass_le &
 [ STEM < "make" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_make_v_1_rel",
            PHON.ONSET con ] ].

madilyn_n1 := n_proper_le &
 [ STEM < "madilyn" >,
   SYNSEM [ LKEYS.KEYREL.CARG "madilyn",
            PHON.ONSET con ] ].

madly := adv_int_vp_le &
 [ STEM < "madly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mad_a_1_rel",
            PHON.ONSET con ] ].

madman_n1 := n_intr_le &
 [ STEM < "madman" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_madman_n_1_rel",
            PHON.ONSET con ] ].

madness_n := n_mass_le &
 [ STEM < "madness" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_madness_n_1_rel",
            PHON.ONSET con ] ].

madonna_n1 := n_proper_le &
 [ STEM < "madonna" >,
   SYNSEM [ LKEYS.KEYREL.CARG "madonna",
            PHON.ONSET con ] ].

madrid_n1 := n_proper_city_le &
 [ STEM < "madrid" >,
   SYNSEM [ LKEYS.KEYREL.CARG "madrid",
            PHON.ONSET con ] ].

maelstrom_n1 := n_intr_le &
 [ STEM < "maelstrom" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_maelstrom_n_1_rel",
            PHON.ONSET con ] ].

magazine_n1 := n_intr_le &
 [ STEM < "magazine" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_magazine_n_1_rel",
            PHON.ONSET con ] ].

magic_a1 := adj_intrans_le &
 [ STEM < "magic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_magic_a_1_rel",
            PHON.ONSET con ] ].

magic_n1 := n_mass_le &
 [ STEM < "magic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_magic_n_1_rel",
            PHON.ONSET con ] ].

magic_n2 := n_proper_le &
 [ STEM < "magic" >,
   SYNSEM [ LKEYS.KEYREL.CARG "magic",
            PHON.ONSET con ] ].

magical_a1 := adj_intrans_le &
 [ STEM < "magical" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_magical_a_1_rel",
            PHON.ONSET con ] ].

magician_n1 := n_intr_le &
 [ STEM < "magician" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_magician_n_1_rel",
            PHON.ONSET con ] ].

magistrate_n1 := n_intr_le &
 [ STEM < "magistrate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_magistrate_n_1_rel",
            PHON.ONSET con ] ].

magna_carta := n_intr_named_le &
 [ STEM < "magna", "carta" >,
   SYNSEM [ LKEYS.KEYREL.CARG "magna+carta",
            PHON.ONSET con ] ].

magnar_n1 := n_proper_le &
 [ STEM < "magnar" >,
   SYNSEM [ LKEYS.KEYREL.CARG "magnar",
            PHON.ONSET con ] ].

magnate_n1 := n_intr_le &
 [ STEM < "magnate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_magnate_n_1_rel",
            PHON.ONSET con ] ].

magnate_ttl := n_title_le &
 [ STEM < "magnate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_magnate_n_1_rel",
            PHON.ONSET con ] ].

magnet_n1 := n_intr_le &
 [ STEM < "magnet" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_magnet_n_1_rel",
            PHON.ONSET con ] ].

magnetic_a1 := adj_intrans_le &
 [ STEM < "magnetic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_magnetic_a_1_rel",
            PHON.ONSET con ] ].

magnetite_n1 := n_mass_le &
 [ STEM < "magnetite" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_magnetite_n_1_rel",
            PHON.ONSET con ] ].

magnhild_n1 := n_proper_le &
 [ STEM < "magnhild" >,
   SYNSEM [ LKEYS.KEYREL.CARG "magnhild",
            PHON.ONSET con ] ].

magni_n1 := n_proper_le &
 [ STEM < "magni" >,
   SYNSEM [ LKEYS.KEYREL.CARG "magni",
            PHON.ONSET con ] ].

magnificence_n1 := n_mass_le &
 [ STEM < "magnificence" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_magnificence_n_1_rel",
            PHON.ONSET con ] ].

magnificent_a1 := adj_intrans_le &
 [ STEM < "magnificent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_magnificent_a_1_rel",
            PHON.ONSET con ] ].

magnificently_adv := adv_int_vp_le &
 [ STEM < "magnificently" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_magnificent_a_1_rel",
            PHON.ONSET con ] ].

magnify_v1 := v_np*_trans_le &
 [ STEM < "magnify" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_magnify_v_1_rel",
            PHON.ONSET con ] ].

magnitude_n1 := n_mass_count_le &
 [ STEM < "magnitude" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_magnitude_n_1_rel",
            PHON.ONSET con ] ].

magnus_n1 := n_proper_le &
 [ STEM < "magnus" >,
   SYNSEM [ LKEYS.KEYREL.CARG "magnus",
            PHON.ONSET con ] ].

magny_n1 := n_proper_le &
 [ STEM < "magny" >,
   SYNSEM [ LKEYS.KEYREL.CARG "magny",
            PHON.ONSET con ] ].

maid_n1 := n_intr_le &
 [ STEM < "maid" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_maid_n_1_rel",
            PHON.ONSET con ] ].

maiden_n1 := n_intr_le &
 [ STEM < "maiden" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_maiden_n_1_rel",
            PHON.ONSET con ] ].

maihaugen := n_proper_le &
 [ STEM < "maihaugen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "maihaugen",
            PHON.ONSET con ] ].

mail_back_v1 := v_particle_np_le &
 [ STEM < "mail" >,
   SYNSEM [ LKEYS [ --COMPKEY _back_p_sel_rel,
                    KEYREL.PRED "_mail_v_back_rel" ],
            PHON.ONSET con ] ].

mail_in_v1 := v_particle_np_le &
 [ STEM < "mail" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_mail_v_in_rel" ],
            PHON.ONSET con ] ].

mail_n1 := n_mass_count_le &
 [ STEM < "mail" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mail_n_1_rel",
            PHON.ONSET con ] ].

mail_out_v1 := v_particle_np_le &
 [ STEM < "mail" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_mail_v_out_rel" ],
            PHON.ONSET con ] ].

mail_v1 := v_ditrans_le &
 [ STEM < "mail" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mail_v_1_rel",
            PHON.ONSET con ] ].

mail_v2 := v_np_trans_le &
 [ STEM < "mail" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mail_v_1_rel",
            PHON.ONSET con ] ].

mailbox_n1 := n_intr_le &
 [ STEM < "mailbox" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mailbox_n_1_rel",
            PHON.ONSET con ] ].

mailboxidersatz := n_proper_le &
 [ STEM < "mailboxidersatz" >,
   SYNSEM [ LKEYS.KEYREL.CARG "mailboxidersatz",
            PHON.ONSET onset ] ].

mailboxnameersatz := n_proper_unk_le &
 [ STEM < "mailboxnameersatz" >,
   SYNSEM [ LKEYS.KEYREL.CARG "mailboxname",
            PHON.ONSET con ] ].

mailer_n1 := n_intr_le &
 [ STEM < "mailer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mailer_n_1_rel",
            PHON.ONSET con ] ].

mailing_n1 := n_intr_le &
 [ STEM < "mailing" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mailing_n_1_rel",
            PHON.ONSET con ] ].

mailman_n1 := n_intr_le &
 [ STEM < "mailman" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mailman_n_1_rel",
            PHON.ONSET con ] ].

main_a1 := adj_intrans_le &
 [ STEM < "main" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_main_a_1_rel",
            PHON.ONSET con ] ].

maine_n1 := n_proper_le &
 [ STEM < "maine" >,
   SYNSEM [ LKEYS.KEYREL.CARG "maine",
            PHON.ONSET con ] ].

mainland_a1 := adj_intrans_le &
 [ STEM < "mainland" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mainland_a_1_rel",
            PHON.ONSET con ] ].

mainland_n1 := n_intr_sg_le &
 [ STEM < "mainland" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mainland_n_1_rel",
            PHON.ONSET con ] ].

mainly := adv_int_vp_le &
 [ STEM < "mainly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_main_a_1_rel",
            PHON.ONSET con ] ].

mainly_isect := adj_intrans_le &
 [ STEM < "mainly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_main_a_1_rel",
            PHON.ONSET con ] ].

mainmast_n1 := n_intr_le &
 [ STEM < "mainmast" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mainmast_n_1_rel",
            PHON.ONSET con ] ].

mainstream_a1 := adj_intrans_le &
 [ STEM < "mainstream" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mainstream_a_1_rel",
            PHON.ONSET con ] ].

maintain_v1 := v_np_trans_le &
 [ STEM < "maintain" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_maintain_v_1_rel",
            PHON.ONSET con ] ].

maintain_v2 := v_cp_prop_non_trans_le &
 [ STEM < "maintain" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_maintain_v_1_rel",
            PHON.ONSET con ] ].

maintenance_n1 := n_mass_le &
 [ STEM < "maintenance" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_maintenance_n_1_rel",
            PHON.ONSET con ] ].

mainz_n1 := n_proper_city_le &
 [ STEM < "mainz" >,
   SYNSEM [ LKEYS.KEYREL.CARG "mainz",
            PHON.ONSET con ] ].

maitreya_n1 := n_proper_le &
 [ STEM < "maitreya" >,
   SYNSEM [ LKEYS.KEYREL.CARG "maitreya",
            PHON.ONSET con ] ].

maize_n1 := n_mass_le &
 [ STEM < "maize" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_maize_n_1_rel",
            PHON.ONSET con ] ].

majestic_a1 := adj_intrans_le &
 [ STEM < "majestic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_majestic_a_1_rel",
            PHON.ONSET con ] ].

majesty_n1 := n_mass_le &
 [ STEM < "majesty" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_majesty_n_1_rel",
            PHON.ONSET con ] ].

major_a1 := adj_intrans_le &
 [ STEM < "major" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_major_a_1_rel",
            PHON.ONSET con ] ].

majorca_n1 := n_proper_city_le &
 [ STEM < "majorca" >,
   SYNSEM [ LKEYS.KEYREL.CARG "majorca",
            PHON.ONSET con ] ].

majority_n1 := n_ppof_le &
 [ STEM < "majority" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_majority_n_of_rel",
            PHON.ONSET con ] ].

make_n1 := n_ppof_nocmpnd_le &
 [ STEM < "make" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_make_n_of_rel",
            PHON.ONSET con ] ].

make_out_v1 := v_particle_np_le &
 [ STEM < "make" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_make_v_out_rel" ],
            PHON.ONSET con ] ].

make_out_v2 := v_particle_np_pp_to_le &
 [ STEM < "make" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_make_v_out_rel" ],
            PHON.ONSET con ] ].

make_over_v1 := v_np_particle_only_le &
 [ STEM < "make" >,
   SYNSEM [ LKEYS [ --COMPKEY _over_p_sel_rel,
                    KEYREL.PRED "_make_v_over_rel" ],
            PHON.ONSET con ] ].

make_prd_v1 := v_subj_equi_prd_idiom_le &
 [ STEM < "make" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_make_v_i_rel",
            PHON.ONSET con ] ].

make_up_a1 := adj_attr_nospec_le &
 [ STEM < "make-", "up" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_make+up_a_1_rel",
            PHON.ONSET con ] ].

make_up_a2 := adj_attr_nospec_le &
 [ STEM < "make", "up" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_make+up_a_1_rel",
            PHON.ONSET con ] ].

make_up_for_v1 := v_particle_pp_le &
 [ STEM < "make" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    --OCOMPKEY _for_p_rel,
                    KEYREL.PRED "_make_v_up-for_rel" ],
            PHON.ONSET con ] ].

make_up_n1 := n_intr_le &
 [ STEM < "make_up" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_makeup_n_1_rel",
            PHON.ONSET con ] ].

make_up_v1 := v_particle_np_le &
 [ STEM < "make" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_make_v_up_rel" ],
            PHON.ONSET con ] ].

make_up_v2 := v_particle_le &
 [ STEM < "make" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_make_v_up_rel" ],
            PHON.ONSET con ] ].

make_v1 := v_np_trans_noarg3_le &
 [ STEM < "make" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_make_v_1_rel",
            PHON.ONSET con ] ].

make_v2 := v_sorb_le &
 [ STEM < "make" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_make_v_cause_rel",
            PHON.ONSET con ] ].

make_v3 := v_ditrans_only_le &
 [ STEM < "make" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_make_v_1_rel",
            PHON.ONSET con ] ].

make_v4 := v_sor_prd_le &
 [ STEM < "make" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_make_v_cause_rel",
            PHON.ONSET con ] ].

make_v5 := v_expl_obj_prd_le &
 [ STEM < "make" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_make_v_cause_rel",
            PHON.ONSET con ] ].

make_x_of_v1_i := v_empty_prep_trans_idiom_le &
 [ STEM < "make" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_make_v_i_rel" ],
            PHON.ONSET con ] ].

maker_n1 := n_ppof_le &
 [ STEM < "maker" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_maker_n_of_rel",
            PHON.ONSET con ] ].

makeshift_a1 := adj_intrans_le &
 [ STEM < "makeshift" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_makeshift_a_1_rel",
            PHON.ONSET con ] ].

maladroit_a1 := adj_intrans_le &
 [ STEM < "maladroit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_maladroit_a_1_rel",
            PHON.ONSET con ] ].

malady_n1 := n_intr_le &
 [ STEM < "malady" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_malady_n_1_rel",
            PHON.ONSET con ] ].

malawi_n1 := n_proper_le &
 [ STEM < "malawi" >,
   SYNSEM [ LKEYS.KEYREL.CARG "malawi",
            PHON.ONSET con ] ].

malaysia_n1 := n_proper_le &
 [ STEM < "malaysia" >,
   SYNSEM [ LKEYS.KEYREL.CARG "malaysia",
            PHON.ONSET con ] ].

malaysian_a1 := adj_intrans_le &
 [ STEM < "malaysian" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_malaysian_a_1_rel",
            PHON.ONSET con ] ].

malaysian_n1 := n_proper_le &
 [ STEM < "malaysian" >,
   SYNSEM [ LKEYS.KEYREL.CARG "malaysian",
            PHON.ONSET con ] ].

malaysian_n2 := n_intr_le &
 [ STEM < "malaysian" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_malaysian_n_1_rel",
            PHON.ONSET con ] ].

malden_n1 := n_proper_le &
 [ STEM < "malden" >,
   SYNSEM [ LKEYS.KEYREL.CARG "malden",
            PHON.ONSET con ] ].

male_a1 := adj_intrans_le &
 [ STEM < "male" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_male_a_1_rel",
            PHON.ONSET con ] ].

male_n1 := n_intr_le &
 [ STEM < "male" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_male_n_1_rel",
            PHON.ONSET con ] ].

malformed_a1 := adj_intrans_le &
 [ STEM < "malformed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_malformed_a_1_rel",
            PHON.ONSET con ] ].

malice_n1 := n_mass_le &
 [ STEM < "malice" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_malice_n_1_rel",
            PHON.ONSET con ] ].

maliciously := adv_int_vp_le &
 [ STEM < "maliciously" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_malicious_a_1_rel",
            PHON.ONSET con ] ].

malick_n1 := n_proper_le &
 [ STEM < "malick" >,
   SYNSEM [ LKEYS.KEYREL.CARG "malick",
            PHON.ONSET con ] ].

mall_n1 := n_intr_le &
 [ STEM < "mall" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mall_n_1_rel",
            PHON.ONSET con ] ].

mall_post_ttl := n_post_title_le &
 [ STEM < "mall" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mall_n_1_rel",
            PHON.ONSET con ] ].

mallet_n1 := n_intr_le &
 [ STEM < "mallet" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mallet_n_1_rel",
            PHON.ONSET con ] ].

mallorca_n1 := n_proper_city_le &
 [ STEM < "mallorca" >,
   SYNSEM [ LKEYS.KEYREL.CARG "majorca",
            PHON.ONSET con ] ].

malmÃ¶ := n_proper_le &
 [ STEM < "malmÃ¶" >,
   SYNSEM [ LKEYS.KEYREL.CARG "malmÃ¶",
            PHON.ONSET con ] ].

mammal_n1 := n_intr_le &
 [ STEM < "mammal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mammal_n_1_rel",
            PHON.ONSET con ] ].

mammalia_n1 := n_plur_le &
 [ STEM < "mammalia" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mammalia_n_1_rel",
            PHON.ONSET con ] ].

man1 := n_mass_count_le &
 [ STEM < "man" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_man_n_1_rel",
            PHON.ONSET con ] ].

man_made_a1 := adj_intrans_le &
 [ STEM < "manmade" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_manmade_a_1_rel",
            PHON.ONSET con ] ].

man_made_a2 := adj_intrans_le &
 [ STEM < "man-", "made" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_manmade_a_1_rel",
            PHON.ONSET con ] ].

man_root_post := adv_s_post_word_nospec_le &
 [ STEM < "man" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_man_a_1_rel",
            PHON.ONSET con ] ].

man_root_pre := adv_s_pre_word_root_le &
 [ STEM < "man" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_man_a_1_rel",
            PHON.ONSET con ] ].

man_v1 := v_np_trans_le &
 [ STEM < "man" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_man_v_1_rel",
            PHON.ONSET con ] ].

manacle_n1 := n_intr_le &
 [ STEM < "manacle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_manacle_n_1_rel",
            PHON.ONSET con ] ].

manacle_v1 := v_np_trans_le &
 [ STEM < "manacle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_manacle_v_1_rel",
            PHON.ONSET con ] ].

manage_v1 := v_np_trans_le &
 [ STEM < "manage" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_manage_v_1_rel",
            PHON.ONSET con ] ].

manage_v2 := v_subj_equi_le &
 [ STEM < "manage" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_manage_v_1_rel",
            PHON.ONSET con ] ].

manage_v3 := v_unerg_le &
 [ STEM < "manage" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_manage_v_cope_rel",
            PHON.ONSET con ] ].

manageable_a1 := adj_intrans_le &
 [ STEM < "manageable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_manageable_a_1_rel",
            PHON.ONSET con ] ].

manageably_adv1 := adv_int_vp_post_le &
 [ STEM < "manageably" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_manageable_a_1_rel",
            PHON.ONSET con ] ].

management_n1 := n_mass_le &
 [ STEM < "management" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_management_n_1_rel",
            PHON.ONSET con ] ].

manager_n1 := n_ppof_le &
 [ STEM < "manager" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_manager_n_of_rel",
            PHON.ONSET con ] ].

manatee_n1 := n_intr_le &
 [ STEM < "manatee" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_manatee_n_1_rel",
            PHON.ONSET con ] ].

manchester_n1 := n_proper_city_le &
 [ STEM < "manchester" >,
   SYNSEM [ LKEYS.KEYREL.CARG "manchester",
            PHON.ONSET con ] ].

manchester_united_n1 := n_proper_le &
 [ STEM < "manchester", "united" >,
   SYNSEM [ LKEYS.KEYREL.CARG "manchester_united",
            PHON.ONSET con ] ].

mandate_n1 := n_intr_le &
 [ STEM < "mandate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mandate_n_1_rel",
            PHON.ONSET con ] ].

mandate_v1 := v_np_trans_le &
 [ STEM < "mandate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mandate_v_1_rel",
            PHON.ONSET con ] ].

mandate_v2 := v_cp_non_trans_le &
 [ STEM < "mandate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mandate_v_1_rel",
            PHON.ONSET con ] ].

mandatory_a1 := adj_intrans_le &
 [ STEM < "mandatory" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mandatory_a_1_rel",
            PHON.ONSET con ] ].

mane_n1 := n_intr_le &
 [ STEM < "mane" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mane_n_1_rel",
            PHON.ONSET con ] ].

manganese_n1 := n_mass_le &
 [ STEM < "manganese" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_manganese_n_1_rel",
            PHON.ONSET con ] ].

manhattan_n1 := n_proper_city_le &
 [ STEM < "manhattan" >,
   SYNSEM [ LKEYS.KEYREL.CARG "manhattan",
            PHON.ONSET con ] ].

manhood_n1 := n_mass_le &
 [ STEM < "manhood" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_manhood_n_1_rel",
            PHON.ONSET con ] ].

manifest_a1 := adj_intrans_le &
 [ STEM < "manifest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_manifest_a_1_rel",
            PHON.ONSET con ] ].

manifest_n1 := n_intr_le &
 [ STEM < "manifest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_manifest_n_1_rel",
            PHON.ONSET con ] ].

manifest_v1 := v_np_trans_le &
 [ STEM < "manifest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_manifest_v_1_rel",
            PHON.ONSET con ] ].

manifestation_n1 := n_mass_count_le &
 [ STEM < "manifestation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_manifestation_n_1_rel",
            PHON.ONSET con ] ].

manifold_a1 := adj_intrans_le &
 [ STEM < "manifold" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_manifold_a_1_rel",
            PHON.ONSET con ] ].

manifold_n1 := n_intr_le &
 [ STEM < "manifold" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_manifold_n_1_rel",
            PHON.ONSET con ] ].

manila_n1 := n_proper_le &
 [ STEM < "manila" >,
   SYNSEM [ LKEYS.KEYREL.CARG "manila",
            PHON.ONSET con ] ].

manipulate_v1 := v_np_trans_le &
 [ STEM < "manipulate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_manipulate_v_1_rel",
            PHON.ONSET con ] ].

manipulation_n1 := n_mass_count_le &
 [ STEM < "manipulation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_manipulation_n_1_rel",
            PHON.ONSET con ] ].

mankind_n1 := n_mass_le &
 [ STEM < "mankind" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mankind_n_1_rel",
            PHON.ONSET con ] ].

manly_a1 := adj_intrans_le &
 [ STEM < "manly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_manly_a_1_rel",
            PHON.ONSET con ] ].

manned_a1 := adj_intrans_le &
 [ STEM < "manned" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_manned_a_1_rel",
            PHON.ONSET con ] ].

manner_n1 := n_intr_le &
 [ STEM < "manner" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_manner_n_1_rel",
            PHON.ONSET con ] ].

mannheim_n1 := n_proper_city_le &
 [ STEM < "mannheim" >,
   SYNSEM [ LKEYS.KEYREL.CARG "mannheim",
            PHON.ONSET con ] ].

manouver_n1 := n_intr_le &
 [ STEM < "manouver" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_manouver_n_1_rel",
            PHON.ONSET con ] ].

manouver_v1 := v_np*_trans_le &
 [ STEM < "manouver" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_manouver_v_1_rel",
            PHON.ONSET con ] ].

manouver_v2 := v_subj_equi_le &
 [ STEM < "manouver" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_manouver_v_1_rel",
            PHON.ONSET con ] ].

manpower_n1 := n_mass_le &
 [ STEM < "manpower" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_manpower_n_1_rel",
            PHON.ONSET con ] ].

manservant_n1 := n_intr_le &
 [ STEM < "manservant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_manservant_n_1_rel",
            PHON.ONSET con ] ].

mansion_n1 := n_intr_le &
 [ STEM < "mansion" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mansion_n_1_rel",
            PHON.ONSET con ] ].

mansion_post_ttl := n_post_title_le &
 [ STEM < "mansion" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mansion_n_1_rel",
            PHON.ONSET con ] ].

manson_n1 := n_proper_le &
 [ STEM < "manson" >,
   SYNSEM [ LKEYS.KEYREL.CARG "manson",
            PHON.ONSET con ] ].

mantle_n1 := n_intr_le &
 [ STEM < "mantle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mantle_n_1_rel",
            PHON.ONSET con ] ].

manual_a1 := adj_intrans_le &
 [ STEM < "manual" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_manual_a_1_rel",
            PHON.ONSET con ] ].

manual_n1 := n_ppof_le &
 [ STEM < "manual" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_manual_n_of_rel",
            PHON.ONSET con ] ].

manuel_n1 := n_proper_le &
 [ STEM < "manuel" >,
   SYNSEM [ LKEYS.KEYREL.CARG "manuel",
            PHON.ONSET con ] ].

manufacture_n1 := n_ppof_le &
 [ STEM < "manufacture" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_manufacture_n_of_rel",
            PHON.ONSET con ] ].

manufacture_v1 := v_np_trans_le &
 [ STEM < "manufacture" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_manufacture_v_1_rel",
            PHON.ONSET con ] ].

manufacturer_n1 := n_ppof_le &
 [ STEM < "manufacturer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_manufacturer_n_of_rel",
            PHON.ONSET con ] ].

manure_n1 := n_mass_le &
 [ STEM < "manure" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_manure_n_1_rel",
            PHON.ONSET con ] ].

manuscript_n1 := n_ppof_le &
 [ STEM < "manuscript" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_manuscript_n_of_rel",
            PHON.ONSET con ] ].

many := det_part_pl_many_le &
 [ STEM < "many" >,
   SYNSEM [ LKEYS.ALTKEYREL.PRED "_many_a_1_rel",
            PHON.ONSET con ] ].

many_a1 := adj_attr_intrans_notb_le &
 [ STEM < "many" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_many_a_1_rel",
            PHON.ONSET con ] ].

many_a_det := det_sg_nomod_a_le &
 [ STEM < "many", "a" >,
   SYNSEM [ LKEYS.KEYREL.PRED _many+a_q_rel,
            PHON.ONSET con ] ].

many_an_det := det_sg_nomod_an_le &
 [ STEM < "many", "an" >,
   SYNSEM [ LKEYS.KEYREL.PRED _many+a_q_rel,
            PHON.ONSET con ] ].

mao_zedong_n1 := n_proper_le &
 [ STEM < "mao", "zedong" >,
   SYNSEM [ LKEYS.KEYREL.CARG "mao_zedong",
            PHON.ONSET con ] ].

map_n1 := n_ppof_le &
 [ STEM < "map" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_map_n_of_rel",
            PHON.ONSET con ] ].

map_out_v1 := v_particle_np_le &
 [ STEM < "map" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_map_v_out_rel" ],
            PHON.ONSET con ] ].

map_v1 := v_np_trans_le &
 [ STEM < "map" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_map_v_1_rel",
            PHON.ONSET con ] ].

map_v2 := v_np_prep_trans_le &
 [ STEM < "map" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _to_p_rel,
                    KEYREL.PRED "_map_v_1_rel" ],
            PHON.ONSET con ] ].

mar_v1 := v_np_trans_le &
 [ STEM < "mar" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mar_v_1_rel",
            PHON.ONSET con ] ].

marabotthornet_n1 := n_proper_le &
 [ STEM < "marabotthornet" >,
   SYNSEM [ LKEYS.KEYREL.CARG "marabotthornet",
            PHON.ONSET con ] ].

maradalsfossen_n1 := n_proper_le &
 [ STEM < "maradalsfossen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "maradalsfossen",
            PHON.ONSET con ] ].

marbella_n1 := n_proper_le &
 [ STEM < "marbella" >,
   SYNSEM [ LKEYS.KEYREL.CARG "marbella",
            PHON.ONSET con ] ].

marble_n1 := n_mass_count_le &
 [ STEM < "marble" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_marble_n_1_rel",
            PHON.ONSET con ] ].

marc_n1 := n_proper_le &
 [ STEM < "marc" >,
   SYNSEM [ LKEYS.KEYREL.CARG "marc",
            PHON.ONSET con ] ].

march := n_month_le &
 [ STEM < "march" >,
   SYNSEM [ LKEYS.KEYREL.CARG "mar",
            PHON.ONSET con ] ].

march_2 := n_month_year_le &
 [ STEM < "march" >,
   SYNSEM [ LKEYS.KEYREL.CARG "mar",
            PHON.ONSET con ] ].

march_abb_n1 := n_month_le &
 [ STEM < "mar" >,
   SYNSEM [ LKEYS.KEYREL.CARG "mar",
            PHON.ONSET con ] ].

march_abb_n2 := n_month_year_le &
 [ STEM < "mar" >,
   SYNSEM [ LKEYS.KEYREL.CARG "mar",
            PHON.ONSET con ] ].

march_abb_n3 := n_month_le &
 [ STEM < "mar." >,
   SYNSEM [ LKEYS.KEYREL.CARG "mar",
            PHON.ONSET con ] ].

march_abb_n4 := n_month_year_le &
 [ STEM < "mar." >,
   SYNSEM [ LKEYS.KEYREL.CARG "mar",
            PHON.ONSET con ] ].

march_n1 := n_intr_le &
 [ STEM < "march" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_march_n_1_rel",
            PHON.ONSET con ] ].

march_off_v1 := v_particle_np_le &
 [ STEM < "march" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_march_v_off_rel" ],
            PHON.ONSET con ] ].

march_the_det := det_month_le &
 [ STEM < "march", "the" >,
   SYNSEM [ LKEYS.ALTKEYREL.CARG "mar",
            PHON.ONSET con ] ].

march_v1 := v_prep_dir_le &
 [ STEM < "march" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_march_v_1_rel",
            PHON.ONSET con ] ].

march_v2 := v_np_trans_noger_le &
 [ STEM < "march" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_march_v_cause_rel",
            PHON.ONSET con ] ].

marcy_n1 := n_proper_le &
 [ STEM < "marcy" >,
   SYNSEM [ LKEYS.KEYREL.CARG "marcy",
            PHON.ONSET con ] ].

mardalsfossen_n1 := n_proper_le &
 [ STEM < "mardalsfossen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "mardalsfossen",
            PHON.ONSET con ] ].

mardi_gras := n_holiday_le &
 [ STEM < "mardi", "gras" >,
   SYNSEM [ LKEYS.KEYREL.CARG "mardi_gras",
            PHON.ONSET con ] ].

mare_n1 := n_intr_le &
 [ STEM < "mare" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mare_n_1_rel",
            PHON.ONSET con ] ].

maredo_n1 := n_proper_le &
 [ STEM < "maredo" >,
   SYNSEM [ LKEYS.KEYREL.CARG "maredo",
            PHON.ONSET con ] ].

margin_n1 := n_mass_count_le &
 [ STEM < "margin" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_margin_n_1_rel",
            PHON.ONSET con ] ].

marginal_a1 := adj_intrans_le &
 [ STEM < "marginal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_marginal_a_1_rel",
            PHON.ONSET con ] ].

maria_n1 := n_proper_le &
 [ STEM < "maria" >,
   SYNSEM [ LKEYS.KEYREL.CARG "maria",
            PHON.ONSET con ] ].

marie_n1 := n_proper_le &
 [ STEM < "marie" >,
   SYNSEM [ LKEYS.KEYREL.CARG "marie",
            PHON.ONSET con ] ].

marienplatz_n1 := n_proper_le &
 [ STEM < "marienplatz" >,
   SYNSEM [ LKEYS.KEYREL.CARG "marienplatz",
            PHON.ONSET con ] ].

marijuana_n1 := n_mass_le &
 [ STEM < "marijuana" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_marijuana_n_1_rel",
            PHON.ONSET con ] ].

marine_n1 := n_intr_le &
 [ STEM < "marine" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_marine_n_1_rel",
            PHON.ONSET con ] ].

marion_n1 := n_proper_le &
 [ STEM < "marion" >,
   SYNSEM [ LKEYS.KEYREL.CARG "marion",
            PHON.ONSET con ] ].

maristova := n_proper_le &
 [ STEM < "maristova" >,
   SYNSEM [ LKEYS.KEYREL.CARG "maristova",
            PHON.ONSET con ] ].

marit_n1 := n_proper_le &
 [ STEM < "marit" >,
   SYNSEM [ LKEYS.KEYREL.CARG "marit",
            PHON.ONSET con ] ].

maritim_n1 := n_intr_named_le &
 [ STEM < "maritim" >,
   SYNSEM [ LKEYS.KEYREL.CARG "maritim",
            PHON.ONSET con ] ].

mark_down_v1 := v_particle_np_le &
 [ STEM < "mark" >,
   SYNSEM [ LKEYS [ --COMPKEY _down_p_sel_rel,
                    KEYREL.PRED "_mark_v_down_rel" ],
            PHON.ONSET con ] ].

mark_n1 := n_proper_le &
 [ STEM < "mark" >,
   SYNSEM [ LKEYS.KEYREL.CARG "mark",
            PHON.ONSET con ] ].

mark_n2 := n_ppof_le &
 [ STEM < "mark" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mark_n_of_rel",
            PHON.ONSET con ] ].

mark_off_v1 := v_particle_np_le &
 [ STEM < "mark" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_mark_v_off_rel" ],
            PHON.ONSET con ] ].

mark_out_v1 := v_particle_np_le &
 [ STEM < "mark" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_mark_v_out_rel" ],
            PHON.ONSET con ] ].

mark_v1 := v_np_trans_le &
 [ STEM < "mark" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mark_v_1_rel",
            PHON.ONSET con ] ].

marker_n1 := n_intr_le &
 [ STEM < "marker" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_marker_n_1_rel",
            PHON.ONSET con ] ].

market_n1 := n_intr_le &
 [ STEM < "market" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_market_n_1_rel",
            PHON.ONSET con ] ].

market_v1 := v_np_trans_le &
 [ STEM < "market" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_market_v_1_rel",
            PHON.ONSET con ] ].

marketplace_n1 := n_ppof_le &
 [ STEM < "marketplace" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_marketplace_n_of_rel",
            PHON.ONSET con ] ].

marking_n1 := n_intr_le &
 [ STEM < "marking" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_marking_n_1_rel",
            PHON.ONSET con ] ].

markka_n1 := n_intr_le &
 [ STEM < "markka" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_markka_n_1_rel",
            PHON.ONSET con ] ].

markka_n2 := n_plur_nocmpnd_le &
 [ STEM < "markka" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_markka_n_1_rel",
            PHON.ONSET con ] ].

marley_n1 := n_proper_le &
 [ STEM < "marley" >,
   SYNSEM [ LKEYS.KEYREL.CARG "marley",
            PHON.ONSET con ] ].

marmelade_n1 := n_mass_count_le &
 [ STEM < "marmelade" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_marmelade_n_1_rel",
            PHON.ONSET con ] ].

marmora_n1 := n_proper_le &
 [ STEM < "marmora" >,
   SYNSEM [ LKEYS.KEYREL.CARG "marmora",
            PHON.ONSET con ] ].

marque_n1 := n_intr_le &
 [ STEM < "marque" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_marque_n_1_rel",
            PHON.ONSET con ] ].

marriage_n1 := n_mass_count_le &
 [ STEM < "marriage" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_marriage_n_1_rel",
            PHON.ONSET con ] ].

married_a1 := adj_intrans_le &
 [ STEM < "married" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_married_a_1_rel",
            PHON.ONSET con ] ].

marriott_n1 := n_intr_named_le &
 [ STEM < "marriott" >,
   SYNSEM [ LKEYS.KEYREL.CARG "marriott",
            PHON.ONSET con ] ].

marry_off_v1 := v_particle_np_le &
 [ STEM < "marry" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_marry_v_off_rel" ],
            PHON.ONSET con ] ].

marry_v1 := v_np*_trans_le &
 [ STEM < "marry" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_marry_v_1_rel",
            PHON.ONSET con ] ].

mars_n1 := n_proper_le &
 [ STEM < "mars" >,
   SYNSEM [ LKEYS.KEYREL.CARG "mars",
            PHON.ONSET con ] ].

marsh_n1 := n_intr_le &
 [ STEM < "marsh" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_marsh_n_1_rel",
            PHON.ONSET con ] ].

marshal_n1 := n_intr_le &
 [ STEM < "marshal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_marshal_n_1_rel",
            PHON.ONSET con ] ].

marshal_v1 := v_np_trans_le &
 [ STEM < "marshal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_marshal_v_1_rel",
            PHON.ONSET con ] ].

martha_n1 := n_proper_le &
 [ STEM < "martha" >,
   SYNSEM [ LKEYS.KEYREL.CARG "martha",
            PHON.ONSET con ] ].

martian_a1 := adj_intrans_le &
 [ STEM < "martian" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_martian_a_1_rel",
            PHON.ONSET con ] ].

martian_n1 := n_intr_le &
 [ STEM < "martian" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_martian_n_1_rel",
            PHON.ONSET con ] ].

martin_n1 := n_proper_le &
 [ STEM < "martin" >,
   SYNSEM [ LKEYS.KEYREL.CARG "martin",
            PHON.ONSET con ] ].

martyr_n1 := n_intr_le &
 [ STEM < "martyr" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_martyr_n_1_rel",
            PHON.ONSET con ] ].

martyr_v1 := v_np_trans_le &
 [ STEM < "martyr" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_martyr_v_1_rel",
            PHON.ONSET con ] ].

marvel_at_v1 := v_empty_prep_intrans_le &
 [ STEM < "marvel" >,
   SYNSEM [ LKEYS [ --COMPKEY _at_p_sel_rel,
                    KEYREL.PRED "_marvel_v_at_rel" ],
            PHON.ONSET con ] ].

marvel_n1 := n_intr_le &
 [ STEM < "marvel" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_marvel_n_1_rel",
            PHON.ONSET con ] ].

marvel_v1 := v_unerg_le &
 [ STEM < "marvel" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_marvel_v_1_rel",
            PHON.ONSET con ] ].

marvelous_a1 := adj_intrans_le &
 [ STEM < "marvelous" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_marvelous_a_1_rel",
            PHON.ONSET con ] ].

marvelously := adv_int_vp_post_le &
 [ STEM < "marvelously" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_marvelous_a_1_rel",
            PHON.ONSET con ] ].

mary := n_proper_le &
 [ STEM < "mary" >,
   SYNSEM [ LKEYS.KEYREL.CARG "mary",
            PHON.ONSET con ] ].

maryland_n1 := n_proper_le &
 [ STEM < "maryland" >,
   SYNSEM [ LKEYS.KEYREL.CARG "maryland",
            PHON.ONSET con ] ].

maryland_n2 := n_proper_abb_le &
 [ STEM < "md" >,
   SYNSEM [ LKEYS.KEYREL.CARG "maryland",
            PHON.ONSET con ] ].

maschsee_n1 := n_proper_le &
 [ STEM < "maschsee" >,
   SYNSEM [ LKEYS.KEYREL.CARG "maschsee",
            PHON.ONSET con ] ].

mascot_n1 := n_intr_le &
 [ STEM < "mascot" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mascot_n_1_rel",
            PHON.ONSET con ] ].

masculine_a1 := adj_intrans_le &
 [ STEM < "masculine" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_masculine_a_1_rel",
            PHON.ONSET con ] ].

masculine_n1 := n_intr_le &
 [ STEM < "masculine" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_masculine_n_1_rel",
            PHON.ONSET con ] ].

mask_n1 := n_intr_le &
 [ STEM < "mask" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mask_n_1_rel",
            PHON.ONSET con ] ].

mask_v1 := v_np_trans_le &
 [ STEM < "mask" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mask_v_1_rel",
            PHON.ONSET con ] ].

masonry_n1 := n_mass_le &
 [ STEM < "masonry" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_masonry_n_1_rel",
            PHON.ONSET con ] ].

mass_n1 := n_ppof_le &
 [ STEM < "mass" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mass_n_of_rel",
            PHON.ONSET con ] ].

massachusetts_general_hospital_n1 := n_proper_le &
 [ STEM < "massachusetts", "general", "hospital" >,
   SYNSEM [ LKEYS.KEYREL.CARG "massachusetts_general_hospital",
            PHON.ONSET con ] ].

massachusetts_n1 := n_proper_le &
 [ STEM < "massachusetts" >,
   SYNSEM [ LKEYS.KEYREL.CARG "massachusetts",
            PHON.ONSET con ] ].

massachusetts_n2 := n_proper_abb_le &
 [ STEM < "ma" >,
   SYNSEM [ LKEYS.KEYREL.CARG "massachusetts",
            PHON.ONSET con ] ].

massif_n1 := n_intr_le &
 [ STEM < "massif" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_massif_n_1_rel",
            PHON.ONSET con ] ].

massive_a1 := adj_intrans_le &
 [ STEM < "massive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_massive_a_1_rel",
            PHON.ONSET con ] ].

massively_adv1 := adv_int_vp_le &
 [ STEM < "massively" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_massive_a_1_rel",
            PHON.ONSET con ] ].

mast_n1 := n_intr_le &
 [ STEM < "mast" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mast_n_1_rel",
            PHON.ONSET con ] ].

master_card_n1 := n_proper_le &
 [ STEM < "master", "card" >,
   SYNSEM [ LKEYS.KEYREL.CARG "mastercard",
            PHON.ONSET con ] ].

master_card_n2 := n_proper_le &
 [ STEM < "mastercard" >,
   SYNSEM [ LKEYS.KEYREL.CARG "mastercard",
            PHON.ONSET con ] ].

master_n1 := n_intr_le &
 [ STEM < "master" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_master_n_1_rel",
            PHON.ONSET con ] ].

master_v1 := v_np_trans_le &
 [ STEM < "master" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_master_v_1_rel",
            PHON.ONSET con ] ].

masterpiece_n1 := n_intr_le &
 [ STEM < "masterpiece" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_masterpiece_n_1_rel",
            PHON.ONSET con ] ].

match_n1 := n_intr_le &
 [ STEM < "match" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_match_n_1_rel",
            PHON.ONSET con ] ].

match_up_to_v1 := v_particle_pp_le &
 [ STEM < "match" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    --OCOMPKEY _to_p_rel,
                    KEYREL.PRED "_match_v_up_rel" ],
            PHON.ONSET con ] ].

match_up_v1 := v_particle_le &
 [ STEM < "match" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_match_v_up-2_rel" ],
            PHON.ONSET con ] ].

match_up_v2 := v_particle_np_le &
 [ STEM < "match" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_match_v_up_rel" ],
            PHON.ONSET con ] ].

match_up_with_v1 := v_particle_pp_le &
 [ STEM < "match" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    --OCOMPKEY _with_p_rel,
                    KEYREL.PRED "_match_v_up_rel" ],
            PHON.ONSET con ] ].

match_v1 := v_np_trans_noger_le &
 [ STEM < "match" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_match_v_cause_rel",
            PHON.ONSET con ] ].

match_v2 := v_unacc_le &
 [ STEM < "match" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_match_v_1_rel",
            PHON.ONSET con ] ].

match_v3 := v_empty_prep_intrans_le &
 [ STEM < "match" >,
   SYNSEM [ LKEYS [ --COMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_match_v_with_rel" ],
            PHON.ONSET con ] ].

mate_n1 := n_intr_le &
 [ STEM < "mate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mate_n_1_rel",
            PHON.ONSET con ] ].

mate_v1 := v_np_trans_noger_le &
 [ STEM < "mate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mate_v_cause_rel",
            PHON.ONSET con ] ].

mate_v2 := v_unacc_le &
 [ STEM < "mate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mate_v_1_rel",
            PHON.ONSET con ] ].

material_n1 := n_mass_count_le &
 [ STEM < "material" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_material_n_1_rel",
            PHON.ONSET con ] ].

materialize_v1 := v_unerg_le &
 [ STEM < "materialize" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_materialize_v_1_rel",
            PHON.ONSET con ] ].

maternity_n1 := n_mass_le &
 [ STEM < "maternity" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_maternity_n_1_rel",
            PHON.ONSET con ] ].

math_n1 := n_intr_le &
 [ STEM < "math" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_math_n_1_rel",
            PHON.ONSET con ] ].

mathematical_a1 := adj_intrans_le &
 [ STEM < "mathematical" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mathematical_a_1_rel",
            PHON.ONSET con ] ].

mathematics_n1 := n_mass_le &
 [ STEM < "mathematics" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mathematics_n_1_rel",
            PHON.ONSET con ] ].

matt := n_proper_le &
 [ STEM < "matt" >,
   SYNSEM [ LKEYS.KEYREL.CARG "matt",
            PHON.ONSET con ] ].

matter_n1 := n_mass_count_ppof_le &
 [ STEM < "matter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_matter_n_of_rel",
            PHON.ONSET con ] ].

matter_v1 := v_unacc_le &
 [ STEM < "matter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_matter_v_1_rel",
            PHON.ONSET con ] ].

matter_v2 := v_expl_it_subj_pp_cp_unsp_le &
 [ STEM < "matter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_matter_v_to_rel",
            PHON.ONSET con ] ].

matter_v3 := v_empty_prep_intrans_le &
 [ STEM < "matter" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_matter_v_to_rel" ],
            PHON.ONSET con ] ].

mattress_n1 := n_intr_le &
 [ STEM < "mattress" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mattress_n_1_rel",
            PHON.ONSET con ] ].

maturate_v1 := v_unacc_le &
 [ STEM < "maturate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_maturate_v_1_rel",
            PHON.ONSET con ] ].

maturate_v2 := v_np_trans_noger_le &
 [ STEM < "maturate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_maturate_v_cause_rel",
            PHON.ONSET con ] ].

mature_a1 := adj_intrans_le &
 [ STEM < "mature" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mature_a_1_rel",
            PHON.ONSET con ] ].

mature_v1 := v_unerg_le &
 [ STEM < "mature" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mature_v_1_rel",
            PHON.ONSET con ] ].

maturity_n1 := n_mass_le &
 [ STEM < "maturity" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_maturity_n_1_rel",
            PHON.ONSET con ] ].

maui_n1 := n_proper_le &
 [ STEM < "maui" >,
   SYNSEM [ LKEYS.KEYREL.CARG "maui",
            PHON.ONSET con ] ].

maurvangen_camping_n1 := n_proper_le &
 [ STEM < "maurvangen", "camping" >,
   SYNSEM [ LKEYS.KEYREL.CARG "maurvangen+camping",
            PHON.ONSET con ] ].

maurvangen_n1 := n_proper_le &
 [ STEM < "maurvangen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "maurvangen",
            PHON.ONSET con ] ].

max_adv1 := adv_int_vp_le &
 [ STEM < "max" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_max_a_1_rel",
            PHON.ONSET con ] ].

max_deg := adv_degree_spec_le &
 [ STEM < "max." >,
   SYNSEM [ LKEYS.KEYREL.PRED "_max_x_deg_rel",
            PHON.ONSET con ] ].

max_n1 := n_proper_le &
 [ STEM < "max" >,
   SYNSEM [ LKEYS.KEYREL.CARG "max",
            PHON.ONSET con ] ].

max_out_v1 := v_particle_np_le &
 [ STEM < "max" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_max_v_out_rel" ],
            PHON.ONSET con ] ].

maxim_n1 := n_proper_le &
 [ STEM < "maxim" >,
   SYNSEM [ LKEYS.KEYREL.CARG "maxim",
            PHON.ONSET con ] ].

maximally_adv1 := adv_int_vp_post_le &
 [ STEM < "maximally" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_maximal_a_1_rel",
            PHON.ONSET con ] ].

maximize_v1 := v_np_trans_le &
 [ STEM < "maximize" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_maximize_v_1_rel",
            PHON.ONSET con ] ].

maximum_a1 := adj_intrans_le &
 [ STEM < "maximum" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_maximum_a_1_rel",
            PHON.ONSET con ] ].

maximum_adv1 := pp_le &
 [ STEM < "maximum" >,
   SYNSEM [ LKEYS.KEYREL.PRED _maximum_p_rel,
            PHON.ONSET con ] ].

maximum_n1 := n_ppof_le &
 [ STEM < "maximum" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_maximum_n_of_rel",
            PHON.ONSET con ] ].

may := n_month_le &
 [ STEM < "may" >,
   SYNSEM [ LKEYS.KEYREL.CARG "may",
            PHON.ONSET con ] ].

may_2 := n_month_year_le &
 [ STEM < "may" >,
   SYNSEM [ LKEYS.KEYREL.CARG "may",
            PHON.ONSET con ] ].

may_aux_pos := va_modal_pos_le &
 [ STEM < "may" >,
   SYNSEM [ LKEYS.KEYREL.PRED _may_v_modal_rel,
            PHON.ONSET con ] ].

may_the_det := det_month_le &
 [ STEM < "may", "the" >,
   SYNSEM [ LKEYS.ALTKEYREL.CARG "may",
            PHON.ONSET con ] ].

maya_n1 := n_proper_le &
 [ STEM < "maya" >,
   SYNSEM [ LKEYS.KEYREL.CARG "maya",
            PHON.ONSET con ] ].

mayan_n1 := n_proper_le &
 [ STEM < "mayan" >,
   SYNSEM [ LKEYS.KEYREL.CARG "mayan",
            PHON.ONSET con ] ].

maybe_adv1 := adv_s_pre_word_nospec_le &
 [ STEM < "maybe" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_maybe_a_1_rel",
            PHON.ONSET con ] ].

maybe_adv2 := adv_vp_post_le &
 [ STEM < "maybe" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_maybe_a_1_rel",
            PHON.ONSET con ] ].

maybe_deg := adv_degree_spec_m_le &
 [ STEM < "maybe" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_maybe_x_deg_rel",
            PHON.ONSET con ] ].

maybe_disc_adv := adv_disc_like_preh_le &
 [ STEM < "maybe" >,
   SYNSEM [ LKEYS.KEYREL.CARG "maybe",
            PHON.ONSET con ] ].

mayo_n1 := n_mass_count_le &
 [ STEM < "mayo" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mayo_n_1_rel",
            PHON.ONSET con ] ].

mayor_n1 := n_ppof_le &
 [ STEM < "mayor" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mayor_n_of_rel",
            PHON.ONSET con ] ].

mayor_ttl := n_title_le &
 [ STEM < "mayor" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mayor_n_of_rel",
            PHON.ONSET con ] ].

maze_n1 := n_intr_le &
 [ STEM < "maze" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_maze_n_1_rel",
            PHON.ONSET con ] ].

mccarren_airport_n1 := n_proper_le &
 [ STEM < "mccarren", "airport" >,
   SYNSEM [ LKEYS.KEYREL.CARG "mccarren_airport",
            PHON.ONSET con ] ].

mccarren_n1 := n_proper_le &
 [ STEM < "mccarren" >,
   SYNSEM [ LKEYS.KEYREL.CARG "mccarren",
            PHON.ONSET con ] ].

mckinley_n1 := n_proper_le &
 [ STEM < "mckinley" >,
   SYNSEM [ LKEYS.KEYREL.CARG "mckinley",
            PHON.ONSET con ] ].

me := n_pers_pro_me_le &
 [ STEM < "me" >,
   SYNSEM.PHON.ONSET con ].

meadow_n1 := n_intr_le &
 [ STEM < "meadow" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_meadow_n_1_rel",
            PHON.ONSET con ] ].

meagerly_a1 := adj_intrans_le &
 [ STEM < "meagerly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_meagerly_a_1_rel",
            PHON.ONSET con ] ].

meagerly_adv := adv_int_vp_le &
 [ STEM < "meagerly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_meager_a_1_rel",
            PHON.ONSET con ] ].

meal_n1 := n_intr_le &
 [ STEM < "meal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_meal_n_1_rel",
            PHON.ONSET con ] ].

mean_a1 := adj_intrans_le &
 [ STEM < "mean" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mean_a_1_rel",
            PHON.ONSET con ] ].

mean_v1 := v_np*_trans_le &
 [ STEM < "mean" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mean_v_1_rel",
            PHON.ONSET con ] ].

mean_v2 := v_cp_prop_non_trans_le &
 [ STEM < "mean" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mean_v_1_rel",
            PHON.ONSET con ] ].

mean_v4 := v_subj_equi_le &
 [ STEM < "mean" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mean_v_1_rel",
            PHON.ONSET con ] ].

mean_v5 := v_sor_le &
 [ STEM < "mean" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mean_v_1_rel",
            PHON.ONSET con ] ].

mean_v6 := v_prep_intrans_event_le &
 [ STEM < "mean" >,
   SYNSEM [ LKEYS [ --COMPKEY loc_abstr_rel,
                    KEYREL.PRED "_mean_v_1_rel" ],
            PHON.ONSET con ] ].

mean_v7 := v_pp_oblig_cp_le &
 [ STEM < "mean" >,
   SYNSEM [ LKEYS [ --COMPKEY _by_p_sel_rel,
                    KEYREL.PRED "_mean_v_by_rel" ],
            PHON.ONSET con ] ].

meander_v1 := v_prep_dir_le &
 [ STEM < "meander" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_meander_v_1_rel",
            PHON.ONSET con ] ].

meaning_n1 := n_mass_count_le &
 [ STEM < "meaning" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_meaning_n_1_rel",
            PHON.ONSET con ] ].

meaningless_a1 := adj_intrans_le &
 [ STEM < "meaningless" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_meaningless_a_1_rel",
            PHON.ONSET con ] ].

means_n1 := n_ppof_le &
 [ STEM < "means" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_means_n_of_rel",
            PHON.ONSET con ] ].

meantime_n1 := n_intr_le &
 [ STEM < "meantime" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_meantime_n_1_rel",
            PHON.ONSET con ] ].

meanwhile_adv1 := adv_int_vp_post_le &
 [ STEM < "meanwhile" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_meanwhile_a_1_rel",
            PHON.ONSET con ] ].

measnpersatz := meas_np_le &
 [ STEM < "measnpersatz" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_measnpersatz_x_rel",
            PHON.ONSET onset ] ].

measnpersatz_range_1 := meas_np_le &
 [ STEM < "twodigitersatz-", "measnpersatz" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_measnpersatz_x_rel",
            PHON.ONSET onset ] ].

measnpersatz_range_2 := meas_np_le &
 [ STEM < "threedigitersatz-", "measnpersatz" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_measnpersatz_x_rel",
            PHON.ONSET onset ] ].

measnpersatz_range_3 := meas_np_le &
 [ STEM < "fourdigitersatz-", "measnpersatz" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_measnpersatz_x_rel",
            PHON.ONSET onset ] ].

measnpersatz_range_4 := meas_np_le &
 [ STEM < "twodigitersatz", "__", "measnpersatz" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_measnpersatz_x_rel",
            PHON.ONSET onset ] ].

measnpersatz_range_5 := meas_np_le &
 [ STEM < "threedigitersatz", "__", "measnpersatz" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_measnpersatz_x_rel",
            PHON.ONSET onset ] ].

measnpersatz_range_6 := meas_np_le &
 [ STEM < "fourdigitersatz", "__", "measnpersatz" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_measnpersatz_x_rel",
            PHON.ONSET onset ] ].

measurable_a1 := adj_intrans_le &
 [ STEM < "measurable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_measurable_a_1_rel",
            PHON.ONSET con ] ].

measure_n1 := n_mass_count_le &
 [ STEM < "measure" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_measure_n_1_rel",
            PHON.ONSET con ] ].

measure_v1 := v_np*_trans_le &
 [ STEM < "measure" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_measure_v_1_rel",
            PHON.ONSET con ] ].

measurement_n1 := n_mass_count_le &
 [ STEM < "measurement" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_measurement_n_1_rel",
            PHON.ONSET con ] ].

meat_n1 := n_mass_count_le &
 [ STEM < "meat" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_meat_n_1_rel",
            PHON.ONSET con ] ].

meatball_n1 := n_intr_le &
 [ STEM < "meatball" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_meatball_n_1_rel",
            PHON.ONSET con ] ].

mechanic_n1 := n_intr_le &
 [ STEM < "mechanic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mechanic_n_1_rel",
            PHON.ONSET con ] ].

mechanical_a1 := adj_intrans_le &
 [ STEM < "mechanical" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mechanical_a_1_rel",
            PHON.ONSET con ] ].

mechanism_n1 := n_intr_le &
 [ STEM < "mechanism" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mechanism_n_1_rel",
            PHON.ONSET con ] ].

medal_n1 := n_ppcomp_le &
 [ STEM < "medal" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_medal_n_for_rel" ],
            PHON.ONSET con ] ].

medalsbu_n1 := n_proper_le &
 [ STEM < "medalsbu" >,
   SYNSEM [ LKEYS.KEYREL.CARG "medalsbu",
            PHON.ONSET con ] ].

meddle_v1 := v_unerg_le &
 [ STEM < "meddle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_meddle_v_1_rel",
            PHON.ONSET con ] ].

media_n1 := n_plur_le &
 [ STEM < "media" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_media_n_1_rel",
            PHON.ONSET con ] ].

mediaeval_a1 := adj_intrans_le &
 [ STEM < "mediaeval" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mediaeval_a_1_rel",
            PHON.ONSET con ] ].

median_n1 := n_intr_le &
 [ STEM < "median" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_median_n_1_rel",
            PHON.ONSET con ] ].

mediate_v1 := v_np*_trans_le &
 [ STEM < "mediate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mediate_v_1_rel",
            PHON.ONSET con ] ].

medical_a1 := adj_intrans_le &
 [ STEM < "medical" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_medical_a_1_rel",
            PHON.ONSET con ] ].

medical_n1 := n_intr_le &
 [ STEM < "medical" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_medical_n_1_rel",
            PHON.ONSET con ] ].

medicament_n1 := n_intr_le &
 [ STEM < "medicament" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_medicament_n_1_rel",
            PHON.ONSET con ] ].

medicine_n1 := n_mass_count_le &
 [ STEM < "medicine" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_medicine_n_1_rel",
            PHON.ONSET con ] ].

medieval_a2 := adj_intrans_le &
 [ STEM < "mediÃ¦val" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_medieval_a_1_rel",
            PHON.ONSET con ] ].

medieval_isect := adj_intrans_le &
 [ STEM < "medieval" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_medieval_a_1_rel",
            PHON.ONSET con ] ].

meditate_on_v1 := v_empty_prep_intrans_le &
 [ STEM < "meditate" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_meditate_v_on_rel" ],
            PHON.ONSET con ] ].

meditate_v1 := v_unerg_le &
 [ STEM < "meditate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_meditate_v_1_rel",
            PHON.ONSET con ] ].

mediterranean_a1 := adj_intrans_le &
 [ STEM < "mediterranean" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mediterranean_a_1_rel",
            PHON.ONSET con ] ].

mediterranean_n1 := n_intr_named_le &
 [ STEM < "mediterranean" >,
   SYNSEM [ LKEYS.KEYREL.CARG "mediterranean",
            PHON.ONSET con ] ].

medium_a1 := adj_intrans_le &
 [ STEM < "medium" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_medium_a_1_rel",
            PHON.ONSET con ] ].

medium_n1 := n_intr_le &
 [ STEM < "medium" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_medium_n_1_rel",
            PHON.ONSET con ] ].

medium_range_a1 := adj_intrans_le &
 [ STEM < "medium", "range" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_medium+range_a_1_rel",
            PHON.ONSET con ] ].

medium_sized_a1 := adj_intrans_le &
 [ STEM < "medium-", "sized" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_medium-sized_a_1_rel",
            PHON.ONSET con ] ].

meerkat_n1 := n_intr_le &
 [ STEM < "meerkat" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_meerkat_n_1_rel",
            PHON.ONSET con ] ].

meet_n1 := n_intr_le &
 [ STEM < "meet" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_meet_n_1_rel",
            PHON.ONSET con ] ].

meet_up_v1 := v_particle_le &
 [ STEM < "meet" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_meet_v_up_rel" ],
            PHON.ONSET con ] ].

meet_up_v2 := v_particle_pp_le &
 [ STEM < "meet" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    --OCOMPKEY _with_p_rel,
                    KEYREL.PRED "_meet_v_up_rel" ],
            PHON.ONSET con ] ].

meet_v1 := v_np*_trans_le &
 [ STEM < "meet" >,
   SYNSEM [ LKEYS [ --COMPKEY non_temp_nom_rel,
                    KEYREL.PRED "_meet_v_1_rel" ],
            PHON.ONSET con ] ].

meeting_n1 := n_ppof_nontemp_le &
 [ STEM < "meeting" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_meeting_n_of_rel",
            PHON.ONSET con ] ].

meg_n1 := n_ppof_le &
 [ STEM < "meg" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_meg_n_of_rel",
            PHON.ONSET con ] ].

megabyte_n1 := n_ppof_le &
 [ STEM < "megabyte" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_megabyte_n_of_rel",
            PHON.ONSET con ] ].

megabyte_n2 := n_ppof_le &
 [ STEM < "mbyte" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_megabyte_n_of_rel",
            PHON.ONSET con ] ].

megabyte_n3 := n_ppof_le &
 [ STEM < "mb" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_megabyte_n_of_rel",
            PHON.ONSET con ] ].

megabyte_n4 := n_ppof_le &
 [ STEM < "mg" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_megabyte_n_of_rel",
            PHON.ONSET con ] ].

megahertz_n1 := n_intr_le &
 [ STEM < "megahertz" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_megahertz_n_1_rel",
            PHON.ONSET con ] ].

megahertz_n2 := n_intr_le &
 [ STEM < "mhz" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_megahertz_n_1_rel",
            PHON.ONSET con ] ].

megapixel_n1 := n_ppof_le &
 [ STEM < "megapixel" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_megapixel_n_of_rel",
            PHON.ONSET con ] ].

megawatt_n1 := n_ppof_le &
 [ STEM < "megawatt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_megawatt_n_of_rel",
            PHON.ONSET con ] ].

meier := n_proper_le &
 [ STEM < "meier" >,
   SYNSEM [ LKEYS.KEYREL.CARG "meier",
            PHON.ONSET con ] ].

melange_n1 := n_intr_sg_le &
 [ STEM < "melange" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_melange_n_1_rel",
            PHON.ONSET con ] ].

melange_n2 := n_intr_sg_le &
 [ STEM < "mÃ©lange" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_melange_n_1_rel",
            PHON.ONSET con ] ].

melbourne_n1 := n_proper_city_le &
 [ STEM < "melbourne" >,
   SYNSEM [ LKEYS.KEYREL.CARG "melbourne",
            PHON.ONSET con ] ].

meldau_n1 := n_proper_city_le &
 [ STEM < "meldau" >,
   SYNSEM [ LKEYS.KEYREL.CARG "meldau",
            PHON.ONSET con ] ].

melderskin := n_proper_le &
 [ STEM < "melderskin" >,
   SYNSEM [ LKEYS.KEYREL.CARG "melderskin",
            PHON.ONSET con ] ].

melheim_n1 := n_proper_le &
 [ STEM < "melheim" >,
   SYNSEM [ LKEYS.KEYREL.CARG "melheim",
            PHON.ONSET con ] ].

melody_n1 := n_mass_count_le &
 [ STEM < "melody" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_melody_n_1_rel",
            PHON.ONSET con ] ].

melon_n1 := n_mass_count_le &
 [ STEM < "melon" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_melon_n_1_rel",
            PHON.ONSET con ] ].

melt_down_v1 := v_particle_np_le &
 [ STEM < "melt" >,
   SYNSEM [ LKEYS [ --COMPKEY _down_p_sel_rel,
                    KEYREL.PRED "_melt_v_down_rel" ],
            PHON.ONSET con ] ].

melt_down_v2 := v_particle_le &
 [ STEM < "melt" >,
   SYNSEM [ LKEYS [ --COMPKEY _down_p_sel_rel,
                    KEYREL.PRED "_melt_v_down_rel" ],
            PHON.ONSET con ] ].

melt_n1 := n_mass_le &
 [ STEM < "melt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_melt_n_1_rel",
            PHON.ONSET con ] ].

melt_v1 := v_unacc_dir_le &
 [ STEM < "melt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_melt_v_1_rel",
            PHON.ONSET con ] ].

melt_v2 := v_np_trans_le &
 [ STEM < "melt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_melt_v_cause_rel",
            PHON.ONSET con ] ].

melt_v3 := v_prep_dir_oblig_le &
 [ STEM < "melt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_melt_v_dir_rel",
            PHON.ONSET con ] ].

member_n1 := n_ppof_le &
 [ STEM < "member" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_member_n_of_rel",
            PHON.ONSET con ] ].

membership_n1 := n_mass_count_le &
 [ STEM < "membership" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_membership_n_1_rel",
            PHON.ONSET con ] ].

membrane_n1 := n_intr_le &
 [ STEM < "membrane" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_membrane_n_1_rel",
            PHON.ONSET con ] ].

membranous_a1 := adj_intrans_le &
 [ STEM < "membranous" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_membranous_a_1_rel",
            PHON.ONSET con ] ].

memorable_a1 := adj_intrans_le &
 [ STEM < "memorable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_memorable_a_1_rel",
            PHON.ONSET con ] ].

memorandum_n1 := n_intr_le &
 [ STEM < "memorandum" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_memorandum_n_1_rel",
            PHON.ONSET con ] ].

memorial_a1 := adj_intrans_le &
 [ STEM < "memorial" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_memorial_a_1_rel",
            PHON.ONSET con ] ].

memorial_day := n_holiday_le &
 [ STEM < "memorial", "day" >,
   SYNSEM [ LKEYS.KEYREL.CARG "memorial_day",
            PHON.ONSET con ] ].

memorial_n1 := n_intr_le &
 [ STEM < "memorial" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_memorial_n_1_rel",
            PHON.ONSET con ] ].

memorize_v1 := v_np_trans_le &
 [ STEM < "memorize" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_memorize_v_1_rel",
            PHON.ONSET con ] ].

memory_n1 := n_mass_count_ppof_le &
 [ STEM < "memory" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_memory_n_of_rel",
            PHON.ONSET con ] ].

memuru := n_proper_le &
 [ STEM < "memuru" >,
   SYNSEM [ LKEYS.KEYREL.CARG "memuru",
            PHON.ONSET con ] ].

memurubre_n1 := n_proper_le &
 [ STEM < "memurubre" >,
   SYNSEM [ LKEYS.KEYREL.CARG "memurubre",
            PHON.ONSET con ] ].

memurubu := n_proper_le &
 [ STEM < "memurubu" >,
   SYNSEM [ LKEYS.KEYREL.CARG "memurubu",
            PHON.ONSET con ] ].

memuruby_n1 := n_proper_le &
 [ STEM < "memuruby" >,
   SYNSEM [ LKEYS.KEYREL.CARG "memuruby",
            PHON.ONSET con ] ].

memurudalen_n1 := n_proper_le &
 [ STEM < "memurudalen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "memurudalen",
            PHON.ONSET con ] ].

menace_n1 := n_mass_count_le &
 [ STEM < "menace" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_menace_n_1_rel",
            PHON.ONSET con ] ].

menagerie_n1 := n_intr_le &
 [ STEM < "menagerie" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_menagerie_n_1_rel",
            PHON.ONSET con ] ].

mend_v1 := v_np_trans_noger_le &
 [ STEM < "mend" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mend_v_cause_rel",
            PHON.ONSET con ] ].

mend_v2 := v_unacc_le &
 [ STEM < "mend" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mend_v_1_rel",
            PHON.ONSET con ] ].

mendacious_a1 := adj_intrans_le &
 [ STEM < "mendacious" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mendacious_a_1_rel",
            PHON.ONSET con ] ].

mendocino_n1 := n_proper_city_le &
 [ STEM < "mendocino" >,
   SYNSEM [ LKEYS.KEYREL.CARG "mendocino",
            PHON.ONSET con ] ].

menial_a1 := adj_intrans_le &
 [ STEM < "menial" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_menial_a_1_rel",
            PHON.ONSET con ] ].

menial_n1 := n_intr_le &
 [ STEM < "menial" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_menial_n_1_rel",
            PHON.ONSET con ] ].

menlo_park_n1 := n_proper_city_le &
 [ STEM < "menlo", "park" >,
   SYNSEM [ LKEYS.KEYREL.CARG "menlo_park",
            PHON.ONSET con ] ].

mensa_n1 := n_intr_le &
 [ STEM < "mensa" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mensa_n_1_rel",
            PHON.ONSET con ] ].

menses_n1 := n_plur_le &
 [ STEM < "mense" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_menses_n_1_rel",
            PHON.ONSET con ] ].

menstrual_a1 := adj_intrans_le &
 [ STEM < "menstrual" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_menstrual_a_1_rel",
            PHON.ONSET con ] ].

mental_adj := adj_intrans_le &
 [ STEM < "mental" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mental_a_1_rel",
            PHON.ONSET con ] ].

mentality_n1 := n_intr_le &
 [ STEM < "mentality" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mentality_n_1_rel",
            PHON.ONSET con ] ].

mentally_adv1 := adv_int_vp_post_le &
 [ STEM < "mentally" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mental_a_1_rel",
            PHON.ONSET con ] ].

mention_n1 := n_mass_count_ppof_le &
 [ STEM < "mention" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mention_n_of_rel",
            PHON.ONSET con ] ].

mention_v1 := v_np_trans_le &
 [ STEM < "mention" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mention_v_1_rel",
            PHON.ONSET con ] ].

mention_v2 := v_cp_non_trans_le &
 [ STEM < "mention" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mention_v_1_rel",
            PHON.ONSET con ] ].

mention_v3 := v_prep_intrans_event_le &
 [ STEM < "mention" >,
   SYNSEM [ LKEYS [ --COMPKEY loc_abstr_rel,
                    KEYREL.PRED "_mention_v_1_rel" ],
            PHON.ONSET con ] ].

menu_n1 := n_intr_le &
 [ STEM < "menu" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_menu_n_1_rel",
            PHON.ONSET con ] ].

mercantile_a1 := adj_intrans_le &
 [ STEM < "mercantile" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mercantile_a_1_rel",
            PHON.ONSET con ] ].

merced_n1 := n_proper_city_le &
 [ STEM < "merced" >,
   SYNSEM [ LKEYS.KEYREL.CARG "merced",
            PHON.ONSET con ] ].

mercedes_benz_n1 := n_intr_named_le &
 [ STEM < "mercedes", "benz" >,
   SYNSEM [ LKEYS.KEYREL.CARG "mercedes_benz",
            PHON.ONSET con ] ].

mercedes_n1 := n_intr_named_le &
 [ STEM < "mercedes" >,
   SYNSEM [ LKEYS.KEYREL.CARG "mercedes",
            PHON.ONSET con ] ].

merchandise_n1 := n_mass_le &
 [ STEM < "merchandise" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_merchandise_n_1_rel",
            PHON.ONSET con ] ].

merchant_n1 := n_ppof_le &
 [ STEM < "merchant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_merchant_n_of_rel",
            PHON.ONSET con ] ].

merciful_a1 := adj_intrans_le &
 [ STEM < "merciful" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_merciful_a_1_rel",
            PHON.ONSET con ] ].

mercury_n1 := n_proper_le &
 [ STEM < "mercury" >,
   SYNSEM [ LKEYS.KEYREL.CARG "mercury",
            PHON.ONSET con ] ].

mercy_n1 := n_mass_count_le &
 [ STEM < "mercy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mercy_n_1_rel",
            PHON.ONSET con ] ].

mere_a1 := adj_attr_nospec_le &
 [ STEM < "mere" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mere_a_1_rel",
            PHON.ONSET con ] ].

merely_adv1 := adv_int_vp_aux_le &
 [ STEM < "merely" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mere_a_1_rel",
            PHON.ONSET con ] ].

merge_v1 := v_np*_trans_le &
 [ STEM < "merge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_merge_v_1_rel",
            PHON.ONSET con ] ].

meridian_n1 := n_intr_le &
 [ STEM < "meridian" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_meridian_n_1_rel",
            PHON.ONSET con ] ].

merino_n1 := n_mass_count_le &
 [ STEM < "merino" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_merino_n_1_rel",
            PHON.ONSET con ] ].

merit_n1 := n_mass_count_le &
 [ STEM < "merit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_merit_n_1_rel",
            PHON.ONSET con ] ].

merit_v1 := v_np_trans_le &
 [ STEM < "merit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_merit_v_1_rel",
            PHON.ONSET con ] ].

merriment_n1 := n_mass_le &
 [ STEM < "merriment" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_merriment_n_1_rel",
            PHON.ONSET con ] ].

merry_a1 := adj_intrans_le &
 [ STEM < "merry" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_merry_a_1_rel",
            PHON.ONSET con ] ].

merrymaking_n1 := n_mass_le &
 [ STEM < "merrymaking" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_merrymaking_n_1_rel",
            PHON.ONSET con ] ].

mesh_n1 := n_mass_le &
 [ STEM < "mesh" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mesh_n_1_rel",
            PHON.ONSET con ] ].

mesh_v1 := v_np_trans_noger_le &
 [ STEM < "mesh" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mesh_v_cause_rel",
            PHON.ONSET con ] ].

mesh_v2 := v_unacc_le &
 [ STEM < "mesh" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mesh_v_1_rel",
            PHON.ONSET con ] ].

mesial_a1 := adj_intrans_le &
 [ STEM < "mesial" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mesial_a_1_rel",
            PHON.ONSET con ] ].

mesmerist_n1 := n_intr_le &
 [ STEM < "mesmerist" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mesmerist_n_1_rel",
            PHON.ONSET con ] ].

mess_around_v1 := v_particle_le &
 [ STEM < "mess" >,
   SYNSEM [ LKEYS [ --COMPKEY _around_p_sel_rel,
                    KEYREL.PRED "_mess_v_around_rel" ],
            PHON.ONSET con ] ].

mess_up_v1 := v_particle_np_le &
 [ STEM < "mess" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_mess_v_up_rel" ],
            PHON.ONSET con ] ].

mess_v1 := v_empty_prep_intrans_le &
 [ STEM < "mess" >,
   SYNSEM [ LKEYS [ --COMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_mess_v_with_rel" ],
            PHON.ONSET con ] ].

message_n1 := n_ppof_le &
 [ STEM < "message" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_message_n_of_rel",
            PHON.ONSET con ] ].

message_title := n_title_le &
 [ STEM < "message" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_message_n_of_rel",
            PHON.ONSET con ] ].

messaging_n1 := n_mass_le &
 [ STEM < "messaging" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_messaging_n_1_rel",
            PHON.ONSET con ] ].

messed_up_isect := adj_intrans_le &
 [ STEM < "messed", "up" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_messed+up_a_1_rel",
            PHON.ONSET con ] ].

messy_isect := adj_intrans_le &
 [ STEM < "messy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_messy_a_1_rel",
            PHON.ONSET con ] ].

metal_n1 := n_mass_count_le &
 [ STEM < "metal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_metal_n_1_rel",
            PHON.ONSET con ] ].

metallic_a1 := adj_intrans_le &
 [ STEM < "metallic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_metallic_a_1_rel",
            PHON.ONSET con ] ].

metalloid_a1 := adj_intrans_le &
 [ STEM < "metalloid" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_metalloid_a_1_rel",
            PHON.ONSET con ] ].

metalloid_n1 := n_intr_le &
 [ STEM < "metalloid" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_metalloid_n_1_rel",
            PHON.ONSET con ] ].

metamorphose_n1 := n_mass_count_le &
 [ STEM < "metamorphose" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_metamorphose_n_1_rel",
            PHON.ONSET con ] ].

metamorphose_v1 := v_unacc_le &
 [ STEM < "metamorphose" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_metamorphose_v_1_rel",
            PHON.ONSET con ] ].

metamorphose_v2 := v_np_trans_noger_le &
 [ STEM < "metamorphose" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_metamorphose_v_cause_rel",
            PHON.ONSET con ] ].

metaphor_n1 := n_mass_count_le &
 [ STEM < "metaphor" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_metaphor_n_1_rel",
            PHON.ONSET con ] ].

metaphysical_a1 := adj_intrans_le &
 [ STEM < "metaphysical" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_metaphysical_a_1_rel",
            PHON.ONSET con ] ].

metaphysically := adv_int_vp_le &
 [ STEM < "metaphysically" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_metaphysical_a_1_rel",
            PHON.ONSET con ] ].

meteorological_a1 := adj_intrans_le &
 [ STEM < "meteorological" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_meteorological_a_1_rel",
            PHON.ONSET con ] ].

meteorologist_n1 := n_intr_le &
 [ STEM < "meteorologist" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_meteorologist_n_1_rel",
            PHON.ONSET con ] ].

meter_abb_n1 := n_meas_le &
 [ STEM < "m" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_meter_n_1_rel",
            PHON.ONSET con ] ].

meter_abb_n2 := n_meas_le &
 [ STEM < "m." >,
   SYNSEM [ LKEYS.KEYREL.PRED "_meter_n_1_rel",
            PHON.ONSET con ] ].

meter_n1 := n_meas_le &
 [ STEM < "meter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_meter_n_1_rel",
            PHON.ONSET con ] ].

meter_v1 := v_np_trans_le &
 [ STEM < "meter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_meter_v_1_rel",
            PHON.ONSET con ] ].

method_n1 := n_ppof_le &
 [ STEM < "method" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_method_n_of_rel",
            PHON.ONSET con ] ].

methodical_a1 := adj_intrans_le &
 [ STEM < "methodical" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_methodical_a_1_rel",
            PHON.ONSET con ] ].

metrical_a1 := adj_intrans_le &
 [ STEM < "metrical" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_metrical_a_1_rel",
            PHON.ONSET con ] ].

metro_a1 := adj_intrans_le &
 [ STEM < "metro" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_metro_a_1_rel",
            PHON.ONSET con ] ].

metro_n1 := n_intr_le &
 [ STEM < "metro" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_metro_n_1_rel",
            PHON.ONSET con ] ].

metropolitan_a1 := adj_intrans_le &
 [ STEM < "metropolitan" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_metropolitan_a_1_rel",
            PHON.ONSET con ] ].

mettle_n1 := n_mass_le &
 [ STEM < "mettle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mettle_n_1_rel",
            PHON.ONSET con ] ].

metze_n1 := n_proper_le &
 [ STEM < "metze" >,
   SYNSEM [ LKEYS.KEYREL.CARG "metze",
            PHON.ONSET con ] ].

mexican_a1 := adj_intrans_le &
 [ STEM < "mexican" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mexican_a_1_rel",
            PHON.ONSET con ] ].

mexican_n1 := n_intr_le &
 [ STEM < "mexican" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mexican_n_1_rel",
            PHON.ONSET con ] ].

mexican_n2 := n_proper_le &
 [ STEM < "mexican" >,
   SYNSEM [ LKEYS.KEYREL.CARG "mexican",
            PHON.ONSET con ] ].

mexico_city_n1 := n_proper_city_le &
 [ STEM < "mexico", "city" >,
   SYNSEM [ LKEYS.KEYREL.CARG "mexico_city",
            PHON.ONSET con ] ].

mexico_n1 := n_proper_le &
 [ STEM < "mexico" >,
   SYNSEM [ LKEYS.KEYREL.CARG "mexico",
            PHON.ONSET con ] ].

meyer-kuckuck_n1 := n_proper_le &
 [ STEM < "meyer", "kuckuck" >,
   SYNSEM [ LKEYS.KEYREL.CARG "meyer-kuckuck",
            PHON.ONSET con ] ].

mhm_root_post := adv_s_post_word_nospec_le &
 [ STEM < "mhm" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mhm_a_1_rel",
            PHON.ONSET con ] ].

mhm_root_pre := adv_s_pre_word_root_le &
 [ STEM < "mhm" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mhm_a_1_rel",
            PHON.ONSET con ] ].

michael_n1 := n_proper_le &
 [ STEM < "michael" >,
   SYNSEM [ LKEYS.KEYREL.CARG "michael",
            PHON.ONSET con ] ].

michelangelo_n1 := n_proper_le &
 [ STEM < "michelangelo" >,
   SYNSEM [ LKEYS.KEYREL.CARG "michelangelo",
            PHON.ONSET con ] ].

michigan_n1 := n_proper_le &
 [ STEM < "michigan" >,
   SYNSEM [ LKEYS.KEYREL.CARG "michigan",
            PHON.ONSET con ] ].

michigan_n2 := n_proper_abb_le &
 [ STEM < "mi" >,
   SYNSEM [ LKEYS.KEYREL.CARG "michigan",
            PHON.ONSET con ] ].

micron_n1 := n_proper_le &
 [ STEM < "micron" >,
   SYNSEM [ LKEYS.KEYREL.CARG "micron",
            PHON.ONSET con ] ].

microphone_n1 := n_intr_le &
 [ STEM < "microphone" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_microphone_n_1_rel",
            PHON.ONSET con ] ].

microscope_n1 := n_intr_le &
 [ STEM < "microscope" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_microscope_n_1_rel",
            PHON.ONSET con ] ].

microscopic_a1 := adj_intrans_le &
 [ STEM < "microscopic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_microscopic_a_1_rel",
            PHON.ONSET con ] ].

microsoft_n1 := n_proper_le &
 [ STEM < "microsoft" >,
   SYNSEM [ LKEYS.KEYREL.CARG "microsoft",
            PHON.ONSET con ] ].

microwave_n1 := n_intr_le &
 [ STEM < "microwave" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_microwave_n_1_rel",
            PHON.ONSET con ] ].

microwave_v1 := v_np_trans_le &
 [ STEM < "microwave" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_microwave_v_1_rel",
            PHON.ONSET con ] ].

mid_isect := adj_attr_nospec_le &
 [ STEM < "mid" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mid_a_1_rel",
            PHON.ONSET con ] ].

mid_isect_dash := adj_attr_nospec_le &
 [ STEM < "mid-" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mid_a_1_rel",
            PHON.ONSET con ] ].

mid_range_a1 := adj_intrans_le &
 [ STEM < "mid", "range" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mid+range_a_1_rel",
            PHON.ONSET con ] ].

mid_thigh_n1 := n_mass_le &
 [ STEM < "mid-", "thigh" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mid+thigh_n_1_rel",
            PHON.ONSET con ] ].

mid_trail_adv1 := adv_int_vp_post_le &
 [ STEM < "mid-", "trail" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mid-trail_a_1_rel",
            PHON.ONSET con ] ].

midafternoon_n1 := n_intr_le &
 [ STEM < "midafternoon" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_midafternoon_n_1_rel",
            PHON.ONSET con ] ].

middalen_n1 := n_proper_le &
 [ STEM < "middalen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "middalen",
            PHON.ONSET con ] ].

midday := n_hour_le &
 [ STEM < "midday" >,
   SYNSEM [ LKEYS.KEYREL.CARG "12",
            PHON.ONSET con ] ].

midday_n1 := n_intr_le &
 [ STEM < "midday" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_midday_n_1_rel",
            PHON.ONSET con ] ].

middle_a1 := adj_intrans_le &
 [ STEM < "middle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_middle_a_1_rel",
            PHON.ONSET con ] ].

middle_n1 := n_ppof_le &
 [ STEM < "middle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_middle_n_of_rel",
            PHON.ONSET con ] ].

middling_a1 := adj_intrans_le &
 [ STEM < "middling" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_middling_a_1_rel",
            PHON.ONSET con ] ].

midevening_n1 := n_intr_le &
 [ STEM < "midevening" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_midevening_n_1_rel",
            PHON.ONSET con ] ].

midline_n1 := n_intr_le &
 [ STEM < "midline" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_midline_n_1_rel",
            PHON.ONSET con ] ].

midmorning_n1 := n_intr_le &
 [ STEM < "midmorning" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_midmorning_n_1_rel",
            PHON.ONSET con ] ].

midnight := n_hour_le &
 [ STEM < "midnight" >,
   SYNSEM [ LKEYS.KEYREL.CARG "0",
            PHON.ONSET con ] ].

midnight_n1 := n_intr_le &
 [ STEM < "midnight" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_midnight_n_1_rel",
            PHON.ONSET con ] ].

midst_n1 := n_ppof_le &
 [ STEM < "midst" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_midst_n_of_rel",
            PHON.ONSET con ] ].

midsummer_n1 := n_season_div_le &
 [ STEM < "midsummer" >,
   SYNSEM [ LKEYS.KEYREL.CARG "midsummer",
            PHON.ONSET con ] ].

midsummer_n2 := n_season_wspec_le &
 [ STEM < "midsummer" >,
   SYNSEM [ LKEYS.KEYREL.CARG "midsummer",
            PHON.ONSET con ] ].

midsummer_n3 := n_season_np_le &
 [ STEM < "midsummer" >,
   SYNSEM [ LKEYS.KEYREL.CARG "midsummer",
            PHON.ONSET con ] ].

midsummernight_n1 := n_season_div_le &
 [ STEM < "midsummernight" >,
   SYNSEM [ LKEYS.KEYREL.CARG "midsummernight",
            PHON.ONSET con ] ].

midthun_n1 := n_proper_le &
 [ STEM < "midthun" >,
   SYNSEM [ LKEYS.KEYREL.CARG "midthun",
            PHON.ONSET con ] ].

midtmaradalen_n1 := n_proper_le &
 [ STEM < "midtmaradalen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "midtmaradalen",
            PHON.ONSET con ] ].

midtronden := n_proper_le &
 [ STEM < "midtronden" >,
   SYNSEM [ LKEYS.KEYREL.CARG "midtronden",
            PHON.ONSET con ] ].

midtun_n1 := n_proper_le &
 [ STEM < "midtun" >,
   SYNSEM [ LKEYS.KEYREL.CARG "midtun",
            PHON.ONSET con ] ].

midway_a1 := adj_intrans_le &
 [ STEM < "midway" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_midway_a_1_rel",
            PHON.ONSET con ] ].

midway_adv := adv_int_vp_post_le &
 [ STEM < "midway" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_midway_a_1_rel",
            PHON.ONSET con ] ].

midway_deg := adv_degree_spec_m_le &
 [ STEM < "midway" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_midway_x_rel",
            PHON.ONSET con ] ].

midwinter_n1 := n_season_div_le &
 [ STEM < "midwinter" >,
   SYNSEM [ LKEYS.KEYREL.CARG "midwinter",
            PHON.ONSET con ] ].

midwinter_n2 := n_season_wspec_le &
 [ STEM < "midwinter" >,
   SYNSEM [ LKEYS.KEYREL.CARG "midwinter",
            PHON.ONSET con ] ].

midwinter_n3 := n_season_np_le &
 [ STEM < "midwinter" >,
   SYNSEM [ LKEYS.KEYREL.CARG "midwinter",
            PHON.ONSET con ] ].

mien_n1 := n_mass_le &
 [ STEM < "mien" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mien_n_1_rel",
            PHON.ONSET con ] ].

might_aux_neg_1 := va_modal_subj_neg_le &
 [ STEM < "mightn't" >,
   SYNSEM [ LKEYS.KEYREL.PRED _might_v_modal_rel,
            PHON.ONSET con ] ].

might_aux_neg_2 := va_modal_subj_neg_le &
 [ STEM < "mightn", "'t" >,
   SYNSEM [ LKEYS.KEYREL.PRED _might_v_modal_rel,
            PHON.ONSET con ] ].

might_aux_pos := va_modal_subj_pos_le &
 [ STEM < "might" >,
   SYNSEM [ LKEYS.KEYREL.PRED _might_v_modal_rel,
            PHON.ONSET con ] ].

might_n1 := n_mass_le &
 [ STEM < "might" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_might_n_1_rel",
            PHON.ONSET con ] ].

mighty_a1 := adj_intrans_le &
 [ STEM < "mighty" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mighty_a_1_rel",
            PHON.ONSET con ] ].

migrate_v1 := v_prep_dir_le &
 [ STEM < "migrate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_migrate_v_1_rel",
            PHON.ONSET con ] ].

migration_n1 := n_mass_count_le &
 [ STEM < "migration" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_migration_n_1_rel",
            PHON.ONSET con ] ].

mike_n1 := n_proper_le &
 [ STEM < "mike" >,
   SYNSEM [ LKEYS.KEYREL.CARG "mike",
            PHON.ONSET con ] ].

mikhail_n1 := n_proper_le &
 [ STEM < "mikhail" >,
   SYNSEM [ LKEYS.KEYREL.CARG "mikhail",
            PHON.ONSET con ] ].

milan_n1 := n_proper_city_le &
 [ STEM < "milan" >,
   SYNSEM [ LKEYS.KEYREL.CARG "milan",
            PHON.ONSET con ] ].

milano_n1 := n_proper_city_le &
 [ STEM < "milano" >,
   SYNSEM [ LKEYS.KEYREL.CARG "milano",
            PHON.ONSET con ] ].

mild_a2 := adj_atrans_le &
 [ STEM < "mild" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mild_a_1_rel",
            PHON.ONSET con ] ].

mild_isect := adj_intrans_le &
 [ STEM < "mild" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mild_a_1_rel",
            PHON.ONSET con ] ].

milder_a1 := adj_comp_le &
 [ STEM < "milder" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mild_a_1_rel",
            PHON.ONSET con ] ].

milder_a2 := adj_atrans_comp_le &
 [ STEM < "milder" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mild_a_1_rel",
            PHON.ONSET con ] ].

mildest_a1 := adj_superl_le &
 [ STEM < "mildest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mild_a_1_rel",
            PHON.ONSET con ] ].

mildest_a2 := adj_atrans_superl_le &
 [ STEM < "mildest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mild_a_1_rel",
            PHON.ONSET con ] ].

mildly := adv_int_vp_le &
 [ STEM < "mildly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mild_a_1_rel",
            PHON.ONSET con ] ].

mildness_n1 := n_mass_le &
 [ STEM < "mildness" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mildness_n_1_rel",
            PHON.ONSET con ] ].

mile_n1 := n_meas_le &
 [ STEM < "mile" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mile_n_1_rel",
            PHON.ONSET con ] ].

mileage_n1 := n_mass_count_le &
 [ STEM < "mileage" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mileage_n_1_rel",
            PHON.ONSET con ] ].

milieu_n1 := n_intr_le &
 [ STEM < "milieu" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_milieu_n_1_rel",
            PHON.ONSET con ] ].

military_a1 := adj_intrans_le &
 [ STEM < "military" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_military_a_1_rel",
            PHON.ONSET con ] ].

military_n1 := n_plur_nocmpnd_le &
 [ STEM < "military" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_military_n_1_rel",
            PHON.ONSET con ] ].

militia_n1 := n_plur_le &
 [ STEM < "militia" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_militia_n_1_rel",
            PHON.ONSET con ] ].

milk_n1 := n_mass_count_le &
 [ STEM < "milk" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_milk_n_1_rel",
            PHON.ONSET con ] ].

milk_v1 := v_np*_trans_le &
 [ STEM < "milk" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_milk_v_1_rel",
            PHON.ONSET con ] ].

milkmaid_n1 := n_intr_le &
 [ STEM < "milkmaid" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_milkmaid_n_1_rel",
            PHON.ONSET con ] ].

milky_a1 := adj_intrans_le &
 [ STEM < "milky" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_milky_a_1_rel",
            PHON.ONSET con ] ].

mill_n1 := n_intr_le &
 [ STEM < "mill" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mill_n_1_rel",
            PHON.ONSET con ] ].

mill_v1 := v_np_trans_le &
 [ STEM < "mill" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mill_v_1_rel",
            PHON.ONSET con ] ].

millennium_n1 := n_intr_le &
 [ STEM < "millennium" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_millennium_n_1_rel",
            PHON.ONSET con ] ].

milliliter_abb_n1 := n_meas_le &
 [ STEM < "ml" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_milliliter_n_1_rel",
            PHON.ONSET con ] ].

milliliter_abb_n2 := n_meas_le &
 [ STEM < "ml." >,
   SYNSEM [ LKEYS.KEYREL.PRED "_milliliter_n_1_rel",
            PHON.ONSET con ] ].

milliliter_n1 := n_meas_le &
 [ STEM < "milliliter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_milliliter_n_1_rel",
            PHON.ONSET con ] ].

millimeter_abb_n1 := n_meas_le &
 [ STEM < "mm" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_millimeter_n_1_rel",
            PHON.ONSET con ] ].

millimeter_abb_n2 := n_meas_le &
 [ STEM < "mm." >,
   SYNSEM [ LKEYS.KEYREL.PRED "_millimeter_n_1_rel",
            PHON.ONSET con ] ].

millimeter_n1 := n_meas_le &
 [ STEM < "millimeter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_millimeter_n_1_rel",
            PHON.ONSET con ] ].

million := adj_bare_specified_card_million_le &
 [ STEM < "million" >,
   SYNSEM [ LKEYS.KEYREL.CARG "1000000",
            PHON.ONSET con ] ].

million_comps := adj_complemented_specified_card_million_le &
 [ STEM < "million" >,
   SYNSEM [ LKEYS.KEYREL.CARG "1000000",
            PHON.ONSET con ] ].

millions_n1 := n_plur_xmod_le &
 [ STEM < "millions" >,
   SYNSEM [ LKEYS.KEYREL.CARG "1000000",
            PHON.ONSET con ] ].

millions_n2 := n_plur_ppcomp_card_le &
 [ STEM < "millions" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.CARG "1000000" ],
            PHON.ONSET con ] ].

millionth := adj_bare_specified_ord_million_le &
 [ STEM < "millionth" >,
   SYNSEM [ LKEYS.KEYREL.CARG "1000000",
            PHON.ONSET con ] ].

millstone_n1 := n_intr_le &
 [ STEM < "millstone" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_millstone_n_1_rel",
            PHON.ONSET con ] ].

milton_n1 := n_proper_le &
 [ STEM < "milton" >,
   SYNSEM [ LKEYS.KEYREL.CARG "milton",
            PHON.ONSET con ] ].

mind_bending_a1 := adj_intrans_le &
 [ STEM < "mind", "bending" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mind+bending_a_1_rel",
            PHON.ONSET con ] ].

mind_bending_a2 := adj_intrans_le &
 [ STEM < "mind-", "bending" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mind+bending_a_1_rel",
            PHON.ONSET con ] ].

mind_i_n1 := n_bare_nomod_le &
 [ STEM < "mind" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mind_n_1_rel",
            PHON.ONSET con ] ].

mind_n1 := n_intr_le &
 [ STEM < "mind" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mind_n_1_rel",
            PHON.ONSET con ] ].

mind_v1 := v_np*_trans_le &
 [ STEM < "mind" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mind_v_1_rel",
            PHON.ONSET con ] ].

mind_v2 := v_cp_only_non_trans_le &
 [ STEM < "mind" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mind_v_1_rel",
            PHON.ONSET con ] ].

minden_n1 := n_proper_le &
 [ STEM < "minden" >,
   SYNSEM [ LKEYS.KEYREL.CARG "minden",
            PHON.ONSET con ] ].

mindset_n1 := n_intr_le &
 [ STEM < "mindset" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mindset_n_1_rel",
            PHON.ONSET con ] ].

mine := n_poss_pro_mine_le &
 [ STEM < "mine" >,
   SYNSEM.PHON.ONSET con ].

mine_for_v1 := v_empty_prep_trans_le &
 [ STEM < "mine" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_mine_v_for_rel" ],
            PHON.ONSET con ] ].

mine_n1 := n_ppof_le &
 [ STEM < "mine" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mine_n_of_rel",
            PHON.ONSET con ] ].

mine_nq := det_poss_nospec_mine_le &
 [ STEM < "mine" >,
   SYNSEM.PHON.ONSET con ].

mine_v1 := v_np*_trans_le &
 [ STEM < "mine" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mine_v_1_rel",
            PHON.ONSET con ] ].

miner_n1 := n_intr_le &
 [ STEM < "miner" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_miner_n_1_rel",
            PHON.ONSET con ] ].

mineral_n1 := n_intr_le &
 [ STEM < "mineral" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mineral_n_1_rel",
            PHON.ONSET con ] ].

mingle_v1 := v_np*_trans_le &
 [ STEM < "mingle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mingle_v_1_rel",
            PHON.ONSET con ] ].

mini_a1 := adj_intrans_le &
 [ STEM < "mini" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mini_a_1_rel",
            PHON.ONSET con ] ].

miniature_n1 := n_intr_le &
 [ STEM < "miniature" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_miniature_n_1_rel",
            PHON.ONSET con ] ].

minicamcorder_n1 := n_intr_le &
 [ STEM < "minicamcorder" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mini+camcorder_n_1_rel",
            PHON.ONSET con ] ].

minicamcorder_n2 := n_intr_le &
 [ STEM < "mini-", "camcorder" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mini+camcorder_n_1_rel",
            PHON.ONSET con ] ].

minidisc_n1 := n_intr_le &
 [ STEM < "minidisc" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mini+disc_n_1_rel",
            PHON.ONSET con ] ].

minidisc_n2 := n_intr_le &
 [ STEM < "mini", "disc" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mini+disc_n_1_rel",
            PHON.ONSET con ] ].

minidisc_n3 := n_intr_le &
 [ STEM < "mini-", "disc" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mini+disc_n_1_rel",
            PHON.ONSET con ] ].

minidisk_n1 := n_intr_le &
 [ STEM < "mini", "disk" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mini+disc_n_1_rel",
            PHON.ONSET con ] ].

minidisk_n2 := n_intr_le &
 [ STEM < "minidisk" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mini+disc_n_1_rel",
            PHON.ONSET con ] ].

minidisk_n3 := n_intr_le &
 [ STEM < "mini-", "disk" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mini+disc_n_1_rel",
            PHON.ONSET con ] ].

minimal_a1 := adj_intrans_le &
 [ STEM < "minimal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_minimal_a_1_rel",
            PHON.ONSET con ] ].

minimally_a1 := adv_int_vp_le &
 [ STEM < "minimally" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_minimal_a_1_rel",
            PHON.ONSET con ] ].

minimessenger := n_proper_le &
 [ STEM < "minimessenger" >,
   SYNSEM [ LKEYS.KEYREL.CARG "minimessenger",
            PHON.ONSET con ] ].

minimessenger_2 := n_proper_le &
 [ STEM < "mini", "messenger" >,
   SYNSEM [ LKEYS.KEYREL.CARG "minimessenger",
            PHON.ONSET con ] ].

minimize_v1 := v_np_trans_le &
 [ STEM < "minimize" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_minimize_v_1_rel",
            PHON.ONSET con ] ].

minimum_a1 := adj_intrans_le &
 [ STEM < "minimum" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_minimum_a_1_rel",
            PHON.ONSET con ] ].

minimum_n1 := n_ppof_le &
 [ STEM < "minimum" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_minimum_n_of_rel",
            PHON.ONSET con ] ].

minister_n1 := n_ppof_le &
 [ STEM < "minister" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_minister_n_of_rel",
            PHON.ONSET con ] ].

minister_to_v1 := v_empty_prep_intrans_le &
 [ STEM < "minister" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_minister_v_to_rel" ],
            PHON.ONSET con ] ].

ministerial_a1 := adj_intrans_le &
 [ STEM < "ministerial" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ministerial_a_1_rel",
            PHON.ONSET con ] ].

ministry_n1 := n_intr_le &
 [ STEM < "ministry" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ministry_n_1_rel",
            PHON.ONSET con ] ].

mink_n1 := n_mass_count_le &
 [ STEM < "mink" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mink_n_1_rel",
            PHON.ONSET con ] ].

mink_n2 := n_mass_kind_le &
 [ STEM < "mink" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mink_n_kind_rel",
            PHON.ONSET con ] ].

minnesota_n1 := n_proper_le &
 [ STEM < "minnesota" >,
   SYNSEM [ LKEYS.KEYREL.CARG "minnesota",
            PHON.ONSET con ] ].

minnesota_n2 := n_proper_abb_le &
 [ STEM < "mn" >,
   SYNSEM [ LKEYS.KEYREL.CARG "minnesota",
            PHON.ONSET con ] ].

minolta_n1 := n_proper_le &
 [ STEM < "minolta" >,
   SYNSEM [ LKEYS.KEYREL.CARG "minolta",
            PHON.ONSET con ] ].

minor_a1 := adj_intrans_le &
 [ STEM < "minor" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_minor_a_1_rel",
            PHON.ONSET con ] ].

minuet_n1 := n_intr_le &
 [ STEM < "minuet" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_minuet_n_1_rel",
            PHON.ONSET con ] ].

minus_conj := conj_complex_minus_le &
 [ STEM < "minus" >,
   SYNSEM.PHON.ONSET con ].

minus_n1 := n_intr_le &
 [ STEM < "minus" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_minus_n_1_rel",
            PHON.ONSET con ] ].

minute_abb_n1 := n_temp_minute_le &
 [ STEM < "min" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_minute_n_1_rel",
            PHON.ONSET con ] ].

minute_abb_n2 := n_temp_minute_le &
 [ STEM < "min." >,
   SYNSEM [ LKEYS.KEYREL.PRED "_minute_n_1_rel",
            PHON.ONSET con ] ].

minute_n1 := n_temp_minute_le &
 [ STEM < "minute" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_minute_n_1_rel",
            PHON.ONSET con ] ].

miraculous_a1 := adj_intrans_le &
 [ STEM < "miraculous" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_miraculous_a_1_rel",
            PHON.ONSET con ] ].

mirror_n1 := n_intr_le &
 [ STEM < "mirror" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mirror_n_1_rel",
            PHON.ONSET con ] ].

mirror_v1 := v_np_trans_le &
 [ STEM < "mirror" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mirror_v_1_rel",
            PHON.ONSET con ] ].

miscalculate_v1 := v_np*_trans_le &
 [ STEM < "miscalculate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_miscalculate_v_1_rel",
            PHON.ONSET con ] ].

mischief_n1 := n_mass_le &
 [ STEM < "mischief" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mischief_n_1_rel",
            PHON.ONSET con ] ].

miscommunication_n1 := n_intr_le &
 [ STEM < "miscommunication" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_miscommunication_n_1_rel",
            PHON.ONSET con ] ].

miserable_a1 := adj_intrans_le &
 [ STEM < "miserable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_miserable_a_1_rel",
            PHON.ONSET con ] ].

misery_n1 := n_mass_le &
 [ STEM < "misery" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_misery_n_1_rel",
            PHON.ONSET con ] ].

misfortune_n1 := n_mass_count_le &
 [ STEM < "misfortune" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_misfortune_n_1_rel",
            PHON.ONSET con ] ].

misgiving_n1 := n_intr_le &
 [ STEM < "misgiving" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_misgiving_n_1_rel",
            PHON.ONSET con ] ].

misinterpret_v1 := v_np*_trans_le &
 [ STEM < "misinterpret" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_misinterpret_v_1_rel",
            PHON.ONSET con ] ].

mislay_v1 := v_np_trans_le &
 [ STEM < "mislay" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mislay_v_1_rel",
            PHON.ONSET con ] ].

mislead_v1 := v_np_trans_le &
 [ STEM < "mislead" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mislead_v_1_rel",
            PHON.ONSET con ] ].

misnomer_n1 := n_intr_le &
 [ STEM < "misnomer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_misnomer_n_1_rel",
            PHON.ONSET con ] ].

misorder_v1 := v_np*_trans_le &
 [ STEM < "misorder" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mis_v_order_rel",
            PHON.ONSET con ] ].

misorder_v2 := v_np*_trans_le &
 [ STEM < "mis", "order" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mis_v_order_rel",
            PHON.ONSET con ] ].

misorder_v3 := v_np*_trans_le &
 [ STEM < "mis-", "order" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mis_v_order_rel",
            PHON.ONSET con ] ].

misplace_v1 := v_np_trans_le &
 [ STEM < "misplace" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_misplace_v_1_rel",
            PHON.ONSET con ] ].

mispronounce_v1 := v_np_trans_le &
 [ STEM < "mispronounce" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mispronounce_v_1_rel",
            PHON.ONSET con ] ].

misread_v1 := v_np_trans_le &
 [ STEM < "misread" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_misread_v_1_rel",
            PHON.ONSET con ] ].

miss_out_v1 := v_particle_np_le &
 [ STEM < "miss" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_miss_v_out_rel" ],
            PHON.ONSET con ] ].

miss_out_v2 := v_particle_pp_le &
 [ STEM < "miss" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    --OCOMPKEY _on_p_rel,
                    KEYREL.PRED "_miss_v_out_rel" ],
            PHON.ONSET con ] ].

miss_title := n_title_unsp_le &
 [ STEM < "miss" >,
   SYNSEM [ LKEYS.KEYREL.CARG "ms",
            PHON.ONSET con ] ].

miss_v1 := v_np*_trans_le &
 [ STEM < "miss" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_miss_v_1_rel",
            PHON.ONSET con ] ].

missile_n1 := n_intr_le &
 [ STEM < "missile" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_missile_n_1_rel",
            PHON.ONSET con ] ].

missing_a1 := adj_attr_intrans_le &
 [ STEM < "missing" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_missing_a_1_rel",
            PHON.ONSET con ] ].

mission_energy_n1 := n_proper_le &
 [ STEM < "mission", "energy" >,
   SYNSEM [ LKEYS.KEYREL.CARG "mission_energy",
            PHON.ONSET con ] ].

mission_energy_n2 := n_proper_le &
 [ STEM < "mission", "energy", "of", "us" >,
   SYNSEM [ LKEYS.KEYREL.CARG "mission_energy",
            PHON.ONSET con ] ].

mission_n1 := n_intr_le &
 [ STEM < "mission" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mission_n_1_rel",
            PHON.ONSET con ] ].

mississippi_n1 := n_proper_le &
 [ STEM < "mississippi" >,
   SYNSEM [ LKEYS.KEYREL.CARG "mississippi",
            PHON.ONSET con ] ].

mississippi_n2 := n_proper_abb_le &
 [ STEM < "ms" >,
   SYNSEM [ LKEYS.KEYREL.CARG "mississippi",
            PHON.ONSET con ] ].

missive_n1 := n_intr_le &
 [ STEM < "missive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_missive_n_1_rel",
            PHON.ONSET con ] ].

missouri_n1 := n_proper_le &
 [ STEM < "missouri" >,
   SYNSEM [ LKEYS.KEYREL.CARG "missouri",
            PHON.ONSET con ] ].

missouri_n2 := n_proper_abb_le &
 [ STEM < "mo" >,
   SYNSEM [ LKEYS.KEYREL.CARG "missouri",
            PHON.ONSET con ] ].

missus := n_title_unsp_le &
 [ STEM < "missus" >,
   SYNSEM [ LKEYS.KEYREL.CARG "mrs",
            PHON.ONSET con ] ].

mist_n1 := n_mass_le &
 [ STEM < "mist" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mist_n_1_rel",
            PHON.ONSET con ] ].

mistake_n1 := n_intr_le &
 [ STEM < "mistake" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mistake_n_1_rel",
            PHON.ONSET con ] ].

mistake_v1 := v_empty_prep_trans*_le &
 [ STEM < "mistake" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_mistake_v_for_rel" ],
            PHON.ONSET con ] ].

mistaken_a1 := adj_intrans_le &
 [ STEM < "mistaken" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mistaken_a_1_rel",
            PHON.ONSET con ] ].

mistakenly_adv1 := adv_int_vp_le &
 [ STEM < "mistakenly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mistaken_a_1_rel",
            PHON.ONSET con ] ].

mister := n_title_unsp_le &
 [ STEM < "mister" >,
   SYNSEM [ LKEYS.KEYREL.CARG "mr",
            PHON.ONSET con ] ].

mistletoe_n1 := n_mass_count_le &
 [ STEM < "mistletoe" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mistletoe_n_1_rel",
            PHON.ONSET con ] ].

mistransmission_n1 := n_mass_count_le &
 [ STEM < "mistransmission" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mistransmission_n_1_rel",
            PHON.ONSET con ] ].

mistress_n1 := n_intr_le &
 [ STEM < "mistress" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mistress_n_1_rel",
            PHON.ONSET con ] ].

mistype_v1 := v_np*_trans_le &
 [ STEM < "mistype" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mistype_v_1_rel",
            PHON.ONSET con ] ].

misunderstand_v1 := v_np*_trans_le &
 [ STEM < "misunderstand" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_misunderstand_v_1_rel",
            PHON.ONSET con ] ].

misunderstanding_n1 := n_intr_le &
 [ STEM < "misunderstanding" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_misunderstanding_n_1_rel",
            PHON.ONSET con ] ].

mitral_a1 := adj_intrans_le &
 [ STEM < "mitral" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mitral_a_1_rel",
            PHON.ONSET con ] ].

mitt_n1 := n_intr_le &
 [ STEM < "mitt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mitt_n_1_rel",
            PHON.ONSET con ] ].

mitten_n1 := n_intr_le &
 [ STEM < "mitten" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mitten_n_1_rel",
            PHON.ONSET con ] ].

mittler_n1 := n_proper_le &
 [ STEM < "mittler" >,
   SYNSEM [ LKEYS.KEYREL.CARG "mittler",
            PHON.ONSET con ] ].

mix_n1 := n_ppof_le &
 [ STEM < "mix" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mix_n_of_rel",
            PHON.ONSET con ] ].

mix_up_n1 := n_intr_le &
 [ STEM < "mixup" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mix+up_n_1_rel",
            PHON.ONSET con ] ].

mix_up_n2 := n_intr_le &
 [ STEM < "mix", "up" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mix+up_n_1_rel",
            PHON.ONSET con ] ].

mix_up_n3 := n_intr_le &
 [ STEM < "mix-", "up" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mix+up_n_1_rel",
            PHON.ONSET con ] ].

mix_up_v1 := v_particle_np_le &
 [ STEM < "mix" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_mix_v_up_rel" ],
            PHON.ONSET con ] ].

mix_v1 := v_np*_trans_le &
 [ STEM < "mix" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mix_v_1_rel",
            PHON.ONSET con ] ].

mixture_n1 := n_ppof_le &
 [ STEM < "mixture" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mixture_n_of_rel",
            PHON.ONSET con ] ].

mizzenmast_n1 := n_intr_le &
 [ STEM < "mizzenmast" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mizzenmast_n_1_rel",
            PHON.ONSET con ] ].

mjÃ¸kedal_n1 := n_proper_le &
 [ STEM < "mjÃ¸kedal" >,
   SYNSEM [ LKEYS.KEYREL.CARG "mjÃ¸kedal",
            PHON.ONSET con ] ].

mjÃ¸kedalstind_n1 := n_proper_le &
 [ STEM < "mjÃ¸kedalstind" >,
   SYNSEM [ LKEYS.KEYREL.CARG "mjÃ¸kedalstind",
            PHON.ONSET con ] ].

mjÃ¸lfjell_n1 := n_proper_city_le &
 [ STEM < "mjÃ¸lfjell" >,
   SYNSEM [ LKEYS.KEYREL.CARG "mjÃ¸lfjell",
            PHON.ONSET con ] ].

mjÃ¸lkedal_n1 := n_proper_le &
 [ STEM < "mjÃ¸lkedal" >,
   SYNSEM [ LKEYS.KEYREL.CARG "mjÃ¸lkedal",
            PHON.ONSET con ] ].

mjÃ¸lkedalsbreen_n1 := n_proper_le &
 [ STEM < "mjÃ¸lkedalsbreen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "mjÃ¸lkedalsbreen",
            PHON.ONSET con ] ].

mjÃ¸lkedalstind_n1 := n_proper_le &
 [ STEM < "mjÃ¸lkedalstind" >,
   SYNSEM [ LKEYS.KEYREL.CARG "mjÃ¸lkedalstind",
            PHON.ONSET con ] ].

mjÃ¸lkedalstinden_n1 := n_proper_le &
 [ STEM < "mjÃ¸lkedalstinden" >,
   SYNSEM [ LKEYS.KEYREL.CARG "mjÃ¸lkedalstinden",
            PHON.ONSET con ] ].

mjÃ¸lkedalstjÃ¸rnet_n1 := n_proper_le &
 [ STEM < "mjÃ¸lkedalstjÃ¸rnet" >,
   SYNSEM [ LKEYS.KEYREL.CARG "mjÃ¸lkedalstjÃ¸rnet",
            PHON.ONSET con ] ].

mjÃ¸lkedalsvatn_n1 := n_proper_le &
 [ STEM < "mjÃ¸lkedalsvatn" >,
   SYNSEM [ LKEYS.KEYREL.CARG "mjÃ¸lkedalsvatn",
            PHON.ONSET con ] ].

mjÃ¸lkedalsvatnet_n1 := n_proper_le &
 [ STEM < "mjÃ¸lkedalsvatnet" >,
   SYNSEM [ LKEYS.KEYREL.CARG "mjÃ¸lkedalsvatnet",
            PHON.ONSET con ] ].

mjÃ¸lkedÃ¸la_n1 := n_proper_le &
 [ STEM < "mjÃ¸lkedÃ¸la" >,
   SYNSEM [ LKEYS.KEYREL.CARG "mjÃ¸lkedÃ¸la",
            PHON.ONSET con ] ].

mjÃ¸lkeholstind_n1 := n_proper_le &
 [ STEM < "mjÃ¸lkeholstind" >,
   SYNSEM [ LKEYS.KEYREL.CARG "mjÃ¸lkeholstind",
            PHON.ONSET con ] ].

mksa_nd := n_proper_le &
 [ STEM < "mksa" >,
   SYNSEM [ LKEYS.KEYREL.CARG "mksa",
            PHON.ONSET con ] ].

mm_hmm_root_pre := adv_s_pre_word_root_le &
 [ STEM < "mm-", "hmm" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mm-hmm_a_1_rel",
            PHON.ONSET con ] ].

mm_root_post := adv_s_post_word_nospec_le &
 [ STEM < "mm" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mm_a_1_rel",
            PHON.ONSET con ] ].

mm_root_pre := adv_s_pre_word_root_le &
 [ STEM < "mm" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mm_a_1_rel",
            PHON.ONSET con ] ].

mma_n1 := n_mass_le &
 [ STEM < "mma" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_money+market_n_1_rel",
            PHON.ONSET con ] ].

mma_n2 := n_mass_le &
 [ STEM < "m", "m", "a" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_money+market_n_1_rel",
            PHON.ONSET con ] ].

mms_n1 := n_proper_le &
 [ STEM < "mms" >,
   SYNSEM [ LKEYS.KEYREL.CARG "mms",
            PHON.ONSET con ] ].

moan_v1 := v_unerg_le &
 [ STEM < "moan" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_moan_v_1_rel",
            PHON.ONSET con ] ].

mobile_a1 := adj_intrans_le &
 [ STEM < "mobile" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mobile_a_1_rel",
            PHON.ONSET con ] ].

mobile_n1 := n_intr_le &
 [ STEM < "mobile" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mobile_n_1_rel",
            PHON.ONSET con ] ].

mobilize_v1 := v_np*_trans_le &
 [ STEM < "mobilize" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mobilize_v_1_rel",
            PHON.ONSET con ] ].

mock_a1 := adj_attr_nospec_le &
 [ STEM < "mock" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mock_a_1_rel",
            PHON.ONSET con ] ].

mock_v1 := v_np_trans_le &
 [ STEM < "mock" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mock_v_1_rel",
            PHON.ONSET con ] ].

mode_i_n1 := n_bare_mod_le &
 [ STEM < "mode" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mode_n_1_rel",
            PHON.ONSET con ] ].

mode_n1 := n_intr_le &
 [ STEM < "mode" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mode_n_1_rel",
            PHON.ONSET con ] ].

model_n1 := n_ppcomp_spr_le &
 [ STEM < "model" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_model_n_of_rel",
            PHON.ONSET con ] ].

model_n2 := n_ppof_le &
 [ STEM < "model" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_model_n_of_rel",
            PHON.ONSET con ] ].

model_ttl := n_title_le &
 [ STEM < "model" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_model_n_of_rel",
            PHON.ONSET con ] ].

model_v1 := v_np*_trans_le &
 [ STEM < "model" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_model_v_1_rel",
            PHON.ONSET con ] ].

modem_n1 := n_intr_le &
 [ STEM < "modem" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_modem_n_1_rel",
            PHON.ONSET con ] ].

moderate_a1 := adj_intrans_le &
 [ STEM < "moderate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_moderate_a_1_rel",
            PHON.ONSET con ] ].

moderately := adv_int_vp_le &
 [ STEM < "moderately" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_moderate_a_1_rel",
            PHON.ONSET con ] ].

moderation_n1 := n_mass_le &
 [ STEM < "moderation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_moderation_n_1_rel",
            PHON.ONSET con ] ].

modern_isect := adj_intrans_le &
 [ STEM < "modern" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_modern_a_1_rel",
            PHON.ONSET con ] ].

modernization_n1 := n_mass_count_ppof_le &
 [ STEM < "modernization" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_modernization_n_of_rel",
            PHON.ONSET con ] ].

modernize_v1 := v_np*_trans_le &
 [ STEM < "modernize" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_modernize_v_1_rel",
            PHON.ONSET con ] ].

modest_a1 := adj_intrans_le &
 [ STEM < "modest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_modest_a_1_rel",
            PHON.ONSET con ] ].

modesty_n1 := n_mass_le &
 [ STEM < "modesty" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_modesty_n_1_rel",
            PHON.ONSET con ] ].

modification_n1 := n_mass_count_ppof_le &
 [ STEM < "modification" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_modification_n_of_rel",
            PHON.ONSET con ] ].

modify_v1 := v_np_trans_le &
 [ STEM < "modify" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_modify_v_1_rel",
            PHON.ONSET con ] ].

modulate_v1 := v_np_trans_le &
 [ STEM < "modulate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_modulate_v_1_rel",
            PHON.ONSET con ] ].

modulation_n1 := n_mass_count_le &
 [ STEM < "modulation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_modulation_n_1_rel",
            PHON.ONSET con ] ].

moecki_n1 := n_proper_le &
 [ STEM < "moecki" >,
   SYNSEM [ LKEYS.KEYREL.CARG "moecki",
            PHON.ONSET con ] ].

mohn_n1 := n_proper_le &
 [ STEM < "mohn" >,
   SYNSEM [ LKEYS.KEYREL.CARG "mohn",
            PHON.ONSET con ] ].

mohr_n1 := n_proper_le &
 [ STEM < "mohr" >,
   SYNSEM [ LKEYS.KEYREL.CARG "mohr",
            PHON.ONSET con ] ].

moist_a1 := adj_intrans_le &
 [ STEM < "moist" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_moist_a_1_rel",
            PHON.ONSET con ] ].

moisten_v1 := v_np_trans_le &
 [ STEM < "moisten" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_moisten_v_1_rel",
            PHON.ONSET con ] ].

moisture_n1 := n_mass_le &
 [ STEM < "moisture" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_moisture_n_1_rel",
            PHON.ONSET con ] ].

molar_n1 := n_intr_le &
 [ STEM < "molar" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_molar_n_1_rel",
            PHON.ONSET con ] ].

mold_n1 := n_mass_count_le &
 [ STEM < "mold" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mold_n_1_rel",
            PHON.ONSET con ] ].

mold_v1 := v_np_trans_noger_le &
 [ STEM < "mold" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mold_v_cause_rel",
            PHON.ONSET con ] ].

mold_v2 := v_unacc_le &
 [ STEM < "mold" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mold_v_1_rel",
            PHON.ONSET con ] ].

molde_n1 := n_proper_city_le &
 [ STEM < "molde" >,
   SYNSEM [ LKEYS.KEYREL.CARG "molde",
            PHON.ONSET con ] ].

molde_og_romsdals_turistforening_n1 := n_proper_le &
 [ STEM < "molde", "og", "romsdals", "turistforening" >,
   SYNSEM [ LKEYS.KEYREL.CARG "molde og romsdals turistforening",
            PHON.ONSET con ] ].

molecule_n1 := n_intr_le &
 [ STEM < "molecule" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_molecule_n_1_rel",
            PHON.ONSET con ] ].

moleskin_n1 := n_mass_count_le &
 [ STEM < "moleskin" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_moleskin_n_1_rel",
            PHON.ONSET con ] ].

molladalen_n1 := n_proper_city_le &
 [ STEM < "molladalen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "molladalen",
            PHON.ONSET con ] ].

molladalsskardet_n1 := n_proper_city_le &
 [ STEM < "molladalsskardet" >,
   SYNSEM [ LKEYS.KEYREL.CARG "molladalsskardet",
            PHON.ONSET con ] ].

mollusk_n1 := n_intr_le &
 [ STEM < "mollusk" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mollusk_n_1_rel",
            PHON.ONSET con ] ].

molybdenum_n1 := n_mass_le &
 [ STEM < "molybdenum" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_molybdenum_n_1_rel",
            PHON.ONSET con ] ].

mom_n1 := n_proper_le &
 [ STEM < "mom" >,
   SYNSEM [ LKEYS.KEYREL.CARG "mom",
            PHON.ONSET con ] ].

moment_n1 := n_intr_temp_h_le &
 [ STEM < "moment" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_moment_n_1_rel",
            PHON.ONSET con ] ].

momentary_a1 := adj_intrans_le &
 [ STEM < "momentary" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_momentary_a_1_rel",
            PHON.ONSET con ] ].

monaco_n1 := n_proper_le &
 [ STEM < "monaco" >,
   SYNSEM [ LKEYS.KEYREL.CARG "monaco",
            PHON.ONSET con ] ].

monarch_n1 := n_intr_le &
 [ STEM < "monarch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_monarch_n_1_rel",
            PHON.ONSET con ] ].

monarchial_a1 := adj_intrans_le &
 [ STEM < "monarchial" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_monarchial_a_1_rel",
            PHON.ONSET con ] ].

monarchist_n1 := n_intr_le &
 [ STEM < "monarchist" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_monarchist_n_1_rel",
            PHON.ONSET con ] ].

monastery_n1 := n_intr_le &
 [ STEM < "monastery" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_monastery_n_1_rel",
            PHON.ONSET con ] ].

monastic_a1 := adj_intrans_le &
 [ STEM < "monastic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_monastic_a_1_rel",
            PHON.ONSET con ] ].

monday_before_lent_hd := n_holiday_le &
 [ STEM < "monday", "before", "lent" >,
   SYNSEM [ LKEYS.KEYREL.CARG "monday_before_lent",
            PHON.ONSET con ] ].

monday_n1 := n_day_of_week_le &
 [ STEM < "monday" >,
   SYNSEM [ LKEYS.KEYREL.CARG "mon",
            PHON.ONSET con ] ].

monday_n2 := n_day_of_week_le &
 [ STEM < "mon" >,
   SYNSEM [ LKEYS.KEYREL.CARG "mon",
            PHON.ONSET con ] ].

monday_n3 := n_day_of_week_le &
 [ STEM < "mon." >,
   SYNSEM [ LKEYS.KEYREL.CARG "mon",
            PHON.ONSET con ] ].

monet_n1 := n_proper_le &
 [ STEM < "monet" >,
   SYNSEM [ LKEYS.KEYREL.CARG "monet",
            PHON.ONSET con ] ].

monetary_a1 := adj_intrans_le &
 [ STEM < "monetary" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_monetary_a_1_rel",
            PHON.ONSET con ] ].

money_back_guarantee_n1 := n_intr_le &
 [ STEM < "money", "back", "guarantee" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_money+back+guarantee_n_1_rel",
            PHON.ONSET con ] ].

money_market_n1 := n_mass_le &
 [ STEM < "money", "market" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_money+market_n_1_rel",
            PHON.ONSET con ] ].

money_n1 := n_mass_le &
 [ STEM < "money" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_money_n_1_rel",
            PHON.ONSET con ] ].

mongolia_n1 := n_proper_le &
 [ STEM < "mongolia" >,
   SYNSEM [ LKEYS.KEYREL.CARG "mongolia",
            PHON.ONSET con ] ].

monitor_n1 := n_intr_le &
 [ STEM < "monitor" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_monitor_n_1_rel",
            PHON.ONSET con ] ].

monitor_v1 := v_np*_trans_le &
 [ STEM < "monitor" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_monitor_v_1_rel",
            PHON.ONSET con ] ].

monk := n_proper_le &
 [ STEM < "monk" >,
   SYNSEM [ LKEYS.KEYREL.CARG "monk",
            PHON.ONSET con ] ].

monk_n1 := n_intr_le &
 [ STEM < "monk" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_monk_n_1_rel",
            PHON.ONSET con ] ].

monkey_n1 := n_intr_le &
 [ STEM < "monkey" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_monkey_n_1_rel",
            PHON.ONSET con ] ].

monkey_with_v1 := v_empty_prep_intrans_le &
 [ STEM < "monkey" >,
   SYNSEM [ LKEYS [ --COMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_monkey_v_with_rel" ],
            PHON.ONSET con ] ].

monochrome_a1 := adj_intrans_le &
 [ STEM < "monochrome" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_monochrome_a_1_rel",
            PHON.ONSET con ] ].

monogahela_n1 := n_proper_city_le &
 [ STEM < "monogahela" >,
   SYNSEM [ LKEYS.KEYREL.CARG "monogahela",
            PHON.ONSET con ] ].

monongahela_n1 := n_proper_city_le &
 [ STEM < "monongahela" >,
   SYNSEM [ LKEYS.KEYREL.CARG "monongahela",
            PHON.ONSET con ] ].

mononucleosis_n1 := n_mass_le &
 [ STEM < "mononucleosis" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mononucleosis_n_1_rel",
            PHON.ONSET con ] ].

monopoly_n1 := n_ppcomp_le &
 [ STEM < "monopoly" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_monopoly_n_on_rel" ],
            PHON.ONSET con ] ].

monotonous_a1 := adj_intrans_le &
 [ STEM < "monotonous" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_monotonous_a_1_rel",
            PHON.ONSET con ] ].

montana_n1 := n_proper_le &
 [ STEM < "montana" >,
   SYNSEM [ LKEYS.KEYREL.CARG "montana",
            PHON.ONSET con ] ].

montana_n2 := n_proper_abb_le &
 [ STEM < "mt" >,
   SYNSEM [ LKEYS.KEYREL.CARG "montana",
            PHON.ONSET con ] ].

montenegro_n1 := n_proper_city_le &
 [ STEM < "montenegro" >,
   SYNSEM [ LKEYS.KEYREL.CARG "montenegro",
            PHON.ONSET con ] ].

monterey_n1 := n_proper_city_le &
 [ STEM < "monterey" >,
   SYNSEM [ LKEYS.KEYREL.CARG "monterey",
            PHON.ONSET con ] ].

month-date := n_month_le &
 [ STEM < "dateersatz" >,
   SYNSEM [ LKEYS.KEYREL.CARG "dateersatz",
            PHON.ONSET onset ] ].

month_n1 := n_temp_nd_le &
 [ STEM < "month" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_month_n_1_rel",
            PHON.ONSET con ] ].

monthly_a1 := adj_intrans_le &
 [ STEM < "monthly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_monthly_a_1_rel",
            PHON.ONSET con ] ].

monthly_adv1 := adv_int_vp_post_le &
 [ STEM < "monthly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_monthly_a_1_rel",
            PHON.ONSET con ] ].

monument_n1 := n_ppcomp_le &
 [ STEM < "monument" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_monument_n_to-for_rel" ],
            PHON.ONSET con ] ].

monument_n2 := n_ppcomp_oblig_le &
 [ STEM < "monument" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_monument_n_to-for_rel" ],
            PHON.ONSET con ] ].

mood_n1 := n_intr_le &
 [ STEM < "mood" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mood_n_1_rel",
            PHON.ONSET con ] ].

moon_n1 := n_intr_le &
 [ STEM < "moon" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_moon_n_1_rel",
            PHON.ONSET con ] ].

moon_v1 := v_np_trans_le &
 [ STEM < "moon" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_moon_v_1_rel",
            PHON.ONSET con ] ].

moonlike_a1 := adj_intrans_le &
 [ STEM < "moonlike" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_moonlike_a_1_rel",
            PHON.ONSET con ] ].

moor_n1 := n_intr_le &
 [ STEM < "moor" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_moor_n_1_rel",
            PHON.ONSET con ] ].

moor_v1 := v_np*_trans_le &
 [ STEM < "moor" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_moor_v_1_rel",
            PHON.ONSET con ] ].

moose_n1 := n_intr_le &
 [ STEM < "moose" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_moose_n_1_rel",
            PHON.ONSET con ] ].

moraine_n1 := n_intr_le &
 [ STEM < "moraine" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_moraine_n_1_rel",
            PHON.ONSET con ] ].

moral_a1 := adj_intrans_le &
 [ STEM < "moral" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_moral_a_1_rel",
            PHON.ONSET con ] ].

moral_n1 := n_intr_le &
 [ STEM < "moral" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_moral_n_1_rel",
            PHON.ONSET con ] ].

morally_adv := adv_int_vp_le &
 [ STEM < "morally" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_moral_a_1_rel",
            PHON.ONSET con ] ].

morbid_a1 := adj_intrans_le &
 [ STEM < "morbid" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_morbid_a_1_rel",
            PHON.ONSET con ] ].

more_a1 := adv_comparison_spec_le &
 [ STEM < "more" >,
   SYNSEM [ LKEYS.KEYREL.PRED _more_x_comp_rel,
            PHON.ONSET con ] ].

more_adv1 := adv_int_vp_post_le &
 [ STEM < "more" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_more_a_1_rel",
            PHON.ONSET con ] ].

more_deg := more_degree_spec_le &
 [ STEM < "more" >,
   SYNSEM [ LKEYS.KEYREL.PRED comp_rel,
            PHON.ONSET con ] ].

more_det := det_more_le &
 [ STEM < "more" >,
   SYNSEM [ LKEYS.KEYREL.PRED _more_q_than_rel,
            PHON.ONSET con ] ].

more_nc_deg := comp_degree_spec_more_nc_le &
 [ STEM < "more" >,
   SYNSEM [ LKEYS.KEYREL.PRED comp_rel,
            PHON.ONSET con ] ].

more_or_less_adv1 := adv_int_vp_post_le &
 [ STEM < "more", "or", "less" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_more+or+less_a_1_rel",
            PHON.ONSET con ] ].

more_or_less_nc_deg := comp_degree_spec_more_nc_le &
 [ STEM < "more", "or", "less" >,
   SYNSEM [ LKEYS.KEYREL.PRED comp_rel,
            PHON.ONSET con ] ].

more_pn1 := n_part_ppof_noagr_le &
 [ STEM < "more" >,
   SYNSEM [ LKEYS.ALTKEYREL.PRED _more_q_than_rel,
            PHON.ONSET con ] ].

more_pn2 := n_part_nocomp_le &
 [ STEM < "more" >,
   SYNSEM [ LKEYS.ALTKEYREL.PRED _more_q_than_rel,
            PHON.ONSET con ] ].

more_than_deg := adv_degree_spec_le &
 [ STEM < "more", "than" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_more+than_x_rel",
            PHON.ONSET con ] ].

more_than_dollar_adj := adj_dollar_le &
 [ STEM < "more", "than" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_more+than_a_dollar_rel",
            PHON.ONSET con ] ].

more_than_p := p_reg_le &
 [ STEM < "more", "than" >,
   SYNSEM [ LKEYS.KEYREL.PRED _more+than_p_rel,
            PHON.ONSET con ] ].

moreover_1 := adv_int_vp_post_le &
 [ STEM < "moreover" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_moreover_a_1_rel",
            PHON.ONSET con ] ].

moreover_root_post := adv_s_post_word_nospec_le &
 [ STEM < "moreover" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_moreover_a_1_rel",
            PHON.ONSET con ] ].

moreover_root_pre := adv_s_pre_word_root_le &
 [ STEM < "moreover" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_moreover_a_1_rel",
            PHON.ONSET con ] ].

morgan_n1 := n_proper_le &
 [ STEM < "morgan" >,
   SYNSEM [ LKEYS.KEYREL.CARG "morgan",
            PHON.ONSET con ] ].

moria_n1 := n_proper_le &
 [ STEM < "moria" >,
   SYNSEM [ LKEYS.KEYREL.CARG "moria",
            PHON.ONSET con ] ].

morimoto_n1 := n_proper_le &
 [ STEM < "morimoto" >,
   SYNSEM [ LKEYS.KEYREL.CARG "morimoto",
            PHON.ONSET con ] ].

morka-koldedalen_n1 := n_proper_le &
 [ STEM < "morka-koldedalen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "morka-koldedalen",
            PHON.ONSET con ] ].

morka_n1 := n_proper_le &
 [ STEM < "morka" >,
   SYNSEM [ LKEYS.KEYREL.CARG "morka",
            PHON.ONSET con ] ].

morkabu_n1 := n_proper_le &
 [ STEM < "morkabu" >,
   SYNSEM [ LKEYS.KEYREL.CARG "morkabu",
            PHON.ONSET con ] ].

morning_nc_n1 := n_day_part_nocomp_le &
 [ STEM < "morning" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_morning_n_of_rel",
            PHON.ONSET con ] ].

morning_pl_def := n_def_day_part_pl_le &
 [ STEM < "mornings" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_morning_n_of_rel",
            PHON.ONSET con ] ].

morning_pl_n1 := n_day_part_pl_le &
 [ STEM < "mornings" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_morning_n_of_rel",
            PHON.ONSET con ] ].

morning_sg_def := n_def_day_part_sg_le &
 [ STEM < "morning" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_morning_n_of_rel",
            PHON.ONSET con ] ].

morning_sg_n1 := n_day_part_sg_le &
 [ STEM < "morning" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_morning_n_of_rel",
            PHON.ONSET con ] ].

moron_n1 := n_intr_le &
 [ STEM < "moron" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_moron_n_1_rel",
            PHON.ONSET con ] ].

morpheus := n_proper_le &
 [ STEM < "morpheus" >,
   SYNSEM [ LKEYS.KEYREL.CARG "morpheus",
            PHON.ONSET con ] ].

morrow_n1 := n_intr_le &
 [ STEM < "morrow" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_morrow_n_1_rel",
            PHON.ONSET con ] ].

mortal_a1 := adj_intrans_le &
 [ STEM < "mortal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mortal_a_1_rel",
            PHON.ONSET con ] ].

mortal_n1 := n_intr_le &
 [ STEM < "mortal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mortal_n_1_rel",
            PHON.ONSET con ] ].

mortally_adv := adv_int_vp_le &
 [ STEM < "mortally" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mortal_a_1_rel",
            PHON.ONSET con ] ].

mortar_n1 := n_mass_count_le &
 [ STEM < "mortar" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mortar_n_1_rel",
            PHON.ONSET con ] ].

mortgage_n1 := n_intr_le &
 [ STEM < "mortgage" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mortgage_n_1_rel",
            PHON.ONSET con ] ].

mortgage_v1 := v_np_trans_le &
 [ STEM < "mortgage" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mortgage_v_1_rel",
            PHON.ONSET con ] ].

mosaic_n1 := n_proper_le &
 [ STEM < "mosaic" >,
   SYNSEM [ LKEYS.KEYREL.CARG "mosaic",
            PHON.ONSET con ] ].

moscow_n1 := n_proper_city_le &
 [ STEM < "moscow" >,
   SYNSEM [ LKEYS.KEYREL.CARG "moscow",
            PHON.ONSET con ] ].

moses_n1 := n_proper_le &
 [ STEM < "moses" >,
   SYNSEM [ LKEYS.KEYREL.CARG "moses",
            PHON.ONSET con ] ].

mosque_n1 := n_intr_le &
 [ STEM < "mosque" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mosque_n_1_rel",
            PHON.ONSET con ] ].

mosque_post_ttl := n_post_title_le &
 [ STEM < "mosque" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mosque_n_1_rel",
            PHON.ONSET con ] ].

mosquito_n1 := n_intr_le &
 [ STEM < "mosquito" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mosquito_n_1_rel",
            PHON.ONSET con ] ].

moss_n1 := n_mass_count_le &
 [ STEM < "moss" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_moss_n_1_rel",
            PHON.ONSET con ] ].

most := det_part_pl_mass_le &
 [ STEM < "most" >,
   SYNSEM [ LKEYS.KEYREL.PRED _most_q_rel,
            PHON.ONSET con ] ].

most_a1 := adv_comparison_spec_le &
 [ STEM < "most" >,
   SYNSEM [ LKEYS.KEYREL.PRED _most_x_comp_rel,
            PHON.ONSET con ] ].

most_adv1 := adv_int_vp_post_nonmob_le &
 [ STEM < "most" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_most_a_1_rel",
            PHON.ONSET con ] ].

most_deg := adv_degree_spec_sup_le &
 [ STEM < "most" >,
   SYNSEM [ LKEYS.KEYREL.PRED superl_rel,
            PHON.ONSET con ] ].

most_likely_adv1 := adv_vp_pre_le &
 [ STEM < "most", "likely" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_most+likely_a_1_rel",
            PHON.ONSET con ] ].

most_likely_adv2 := adv_s_pre_le &
 [ STEM < "most", "likely" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_most+likely_a_1_rel",
            PHON.ONSET con ] ].

mosterhamn_n1 := n_proper_le &
 [ STEM < "mosterhamn" >,
   SYNSEM [ LKEYS.KEYREL.CARG "mosterhamn",
            PHON.ONSET con ] ].

mostly_adv1 := adv_int_vp_le &
 [ STEM < "mostly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mostly_a_1_rel",
            PHON.ONSET con ] ].

mostly_mdeg := adv_degree_spec_m_le &
 [ STEM < "mostly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mostly_x_mdeg_rel",
            PHON.ONSET con ] ].

mostly_vdeg := adv_degree_spec_v_le &
 [ STEM < "mostly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mostly_x_vdeg_rel",
            PHON.ONSET con ] ].

mother_in_law_n1 := n_intr_le &
 [ STEM < "mother-", "in-", "law" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mother+in+law_n_1_rel",
            PHON.ONSET con ] ].

mother_n1 := n_ppof_le &
 [ STEM < "mother" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mother_n_of_rel",
            PHON.ONSET con ] ].

mother_ttl := n_title_le &
 [ STEM < "mother" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mother_n_of_rel",
            PHON.ONSET con ] ].

mothers_day := n_holiday_le &
 [ STEM < "mother", "s", "day" >,
   SYNSEM [ LKEYS.KEYREL.CARG "mothers_day",
            PHON.ONSET con ] ].

mothers_day_2 := n_holiday_le &
 [ STEM < "mother's", "day" >,
   SYNSEM [ LKEYS.KEYREL.CARG "mothers_day",
            PHON.ONSET con ] ].

mothers_day_hd := n_holiday_le &
 [ STEM < "mothers", "day" >,
   SYNSEM [ LKEYS.KEYREL.CARG "mothers_day",
            PHON.ONSET con ] ].

motion_n1 := n_mass_count_le &
 [ STEM < "motion" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_motion_n_1_rel",
            PHON.ONSET con ] ].

motionless_a1 := adj_intrans_le &
 [ STEM < "motionless" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_motionless_a_1_rel",
            PHON.ONSET con ] ].

motivate_v1 := v_obj_equi_le &
 [ STEM < "motivate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_motivate_v_1_rel",
            PHON.ONSET con ] ].

motivate_v2 := v_np_trans_le &
 [ STEM < "motivate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_motivate_v_1_rel",
            PHON.ONSET con ] ].

motivated_a1 := adj_intrans_le &
 [ STEM < "motivated" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_motivated_a_1_rel",
            PHON.ONSET con ] ].

motive_n1 := n_intr_le &
 [ STEM < "motive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_motive_n_1_rel",
            PHON.ONSET con ] ].

motor_n1 := n_intr_le &
 [ STEM < "motor" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_motor_n_1_rel",
            PHON.ONSET con ] ].

motorboat_n1 := n_intr_le &
 [ STEM < "motorboat" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_motorboat_n_1_rel",
            PHON.ONSET con ] ].

motorcycle_n1 := n_intr_le &
 [ STEM < "motorcycle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_motorcycle_n_1_rel",
            PHON.ONSET con ] ].

motorist_n1 := n_intr_le &
 [ STEM < "motorist" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_motorist_n_1_rel",
            PHON.ONSET con ] ].

motorized_a1 := adj_intrans_le &
 [ STEM < "motorized" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_motorized_a_1_rel",
            PHON.ONSET con ] ].

motorola_n1 := n_proper_le &
 [ STEM < "motorola" >,
   SYNSEM [ LKEYS.KEYREL.CARG "motorola",
            PHON.ONSET con ] ].

motto_n1 := n_intr_le &
 [ STEM < "motto" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_motto_n_1_rel",
            PHON.ONSET con ] ].

moulin_n1 := n_intr_le &
 [ STEM < "moulin" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_moulin_n_1_rel",
            PHON.ONSET con ] ].

mound_n1 := n_ppof_le &
 [ STEM < "mound" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mound_n_of_rel",
            PHON.ONSET con ] ].

mount_n1 := n_intr_le &
 [ STEM < "mount" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mount_n_1_rel",
            PHON.ONSET con ] ].

mount_st_helen_n1 := n_proper_city_le &
 [ STEM < "mount", "st", "helen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "mount_st_helen",
            PHON.ONSET con ] ].

mount_st_helen_n2 := n_proper_city_le &
 [ STEM < "mount", "st.", "helen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "mount_st_helen",
            PHON.ONSET con ] ].

mount_st_helens_n1 := n_proper_le &
 [ STEM < "mount", "st", "helens" >,
   SYNSEM [ LKEYS.KEYREL.CARG "mount_st_helens",
            PHON.ONSET con ] ].

mount_st_helens_n2 := n_proper_le &
 [ STEM < "mount", "st.", "helens" >,
   SYNSEM [ LKEYS.KEYREL.CARG "mount_st_helens",
            PHON.ONSET con ] ].

mount_ttl := n_title_le &
 [ STEM < "mt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mount_n_1_rel",
            PHON.ONSET con ] ].

mount_ttl_2 := n_title_le &
 [ STEM < "mt." >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mount_n_1_rel",
            PHON.ONSET con ] ].

mount_ttl_3 := n_title_le &
 [ STEM < "mount" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mount_n_1_rel",
            PHON.ONSET con ] ].

mount_v1 := v_np*_trans_le &
 [ STEM < "mount" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mount_v_1_rel",
            PHON.ONSET con ] ].

mountain_n1 := n_intr_le &
 [ STEM < "mountain" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mountain_n_1_rel",
            PHON.ONSET con ] ].

mountain_post_ttl := n_post_title_le &
 [ STEM < "mountain" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mountain_n_1_rel",
            PHON.ONSET con ] ].

mountaineer_n1 := n_intr_le &
 [ STEM < "mountaineer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mountaineer_n_1_rel",
            PHON.ONSET con ] ].

mountaineering_n1 := n_mass_le &
 [ STEM < "mountaineering" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mountaineering_n_1_rel",
            PHON.ONSET con ] ].

mountainous_a1 := adj_intrans_le &
 [ STEM < "mountainous" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mountainous_a_1_rel",
            PHON.ONSET con ] ].

mountainside_n1 := n_intr_le &
 [ STEM < "mountainside" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mountainside_n_1_rel",
            PHON.ONSET con ] ].

mountaintop_n1 := n_intr_le &
 [ STEM < "mountaintop" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mountaintop_n_1_rel",
            PHON.ONSET con ] ].

mourn_v1 := v_np*_trans_le &
 [ STEM < "mourn" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mourn_v_1_rel",
            PHON.ONSET con ] ].

mournful_a1 := adj_intrans_le &
 [ STEM < "mournful" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mournful_a_1_rel",
            PHON.ONSET con ] ].

mouse_n1 := n_intr_le &
 [ STEM < "mouse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mouse_n_1_rel",
            PHON.ONSET con ] ].

mousse_n1 := n_mass_count_le &
 [ STEM < "mousse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mousse_n_1_rel",
            PHON.ONSET con ] ].

mousse_v1 := v_np_trans_le &
 [ STEM < "mousse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mousse_v_1_rel",
            PHON.ONSET con ] ].

mouth_n1 := n_intr_le &
 [ STEM < "mouth" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mouth_n_1_rel",
            PHON.ONSET con ] ].

mouth_to_mouth_a1 := adj_intrans_le &
 [ STEM < "mouth", "to", "mouth" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mouth+to+mouth_a_1_rel",
            PHON.ONSET con ] ].

mouth_to_mouth_a2 := adj_intrans_le &
 [ STEM < "mouth-", "to-", "mouth" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mouth+to+mouth_a_1_rel",
            PHON.ONSET con ] ].

mouth_v1 := v_np_trans_le &
 [ STEM < "mouth" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mouth_v_1_rel",
            PHON.ONSET con ] ].

mouthful_n1 := n_intr_le &
 [ STEM < "mouthful" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mouthful_n_1_rel",
            PHON.ONSET con ] ].

movable_a1 := adj_intrans_le &
 [ STEM < "movable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_movable_a_1_rel",
            PHON.ONSET con ] ].

move_about_v1 := v_particle_le &
 [ STEM < "move" >,
   SYNSEM [ LKEYS [ --COMPKEY _about_p_sel_rel,
                    KEYREL.PRED "_move_v_about_rel" ],
            PHON.ONSET con ] ].

move_about_v2 := v_particle_np_le &
 [ STEM < "move" >,
   SYNSEM [ LKEYS [ --COMPKEY _about_p_sel_rel,
                    KEYREL.PRED "_move_v_about_rel" ],
            PHON.ONSET con ] ].

move_in_v1 := v_particle_le &
 [ STEM < "move" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_move_v_in_rel" ],
            PHON.ONSET con ] ].

move_in_v2 := v_particle_np_le &
 [ STEM < "move" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_move_v_in_rel" ],
            PHON.ONSET con ] ].

move_n1 := n_intr_le &
 [ STEM < "move" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_move_n_1_rel",
            PHON.ONSET con ] ].

move_on_v1 := v_particle_le &
 [ STEM < "move" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_move_v_on_rel" ],
            PHON.ONSET con ] ].

move_out_v1 := v_particle_le &
 [ STEM < "move" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_move_v_out_rel" ],
            PHON.ONSET con ] ].

move_out_v2 := v_particle_np_le &
 [ STEM < "move" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_move_v_out_rel" ],
            PHON.ONSET con ] ].

move_up_v1 := v_particle_le &
 [ STEM < "move" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_move_v_up_rel" ],
            PHON.ONSET con ] ].

move_v1 := v_prep_dir_le &
 [ STEM < "move" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_move_v_1_rel",
            PHON.ONSET con ] ].

move_v2 := v_np*_trans_double_pp_to*_le &
 [ STEM < "move" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _from_p_sel_rel,
                    KEYREL.PRED "_move_v_from-to_rel" ],
            PHON.ONSET con ] ].

move_v3 := v_np_trans_le &
 [ STEM < "move" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_move_v_cause_rel",
            PHON.ONSET con ] ].

move_v4 := v_np_prep_trans_dors_le &
 [ STEM < "move" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_move_v_cause_rel",
            PHON.ONSET con ] ].

move_v5 := v_obj_equi_le &
 [ STEM < "move" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_move_v_cause_rel",
            PHON.ONSET con ] ].

moveable_a1 := adj_intrans_le &
 [ STEM < "moveable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_moveable_a_1_rel",
            PHON.ONSET con ] ].

movement_n1 := n_mass_count_ppof_le &
 [ STEM < "movement" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_movement_n_of_rel",
            PHON.ONSET con ] ].

mover_n1 := n_ppof_le &
 [ STEM < "mover" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mover_n_of_rel",
            PHON.ONSET con ] ].

movie_n := n_ppof_le &
 [ STEM < "movie" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_movie_n_of_rel",
            PHON.ONSET con ] ].

mow_v1 := v_np*_trans_le &
 [ STEM < "mow" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mow_v_1_rel",
            PHON.ONSET con ] ].

mozambique_n1 := n_proper_le &
 [ STEM < "mozambique" >,
   SYNSEM [ LKEYS.KEYREL.CARG "mozambique",
            PHON.ONSET con ] ].

mozart_n1 := n_proper_le &
 [ STEM < "mozart" >,
   SYNSEM [ LKEYS.KEYREL.CARG "mozart",
            PHON.ONSET con ] ].

mp3_n1 := n_proper_le &
 [ STEM < "mp3" >,
   SYNSEM [ LKEYS.KEYREL.CARG "mp3",
            PHON.ONSET con ] ].

mph_n1 := n_intr_nosort_le &
 [ STEM < "mph" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mph_n_1_rel",
            PHON.ONSET con ] ].

mpilo_n1 := n_proper_le &
 [ STEM < "mpilo" >,
   SYNSEM [ LKEYS.KEYREL.CARG "mpilo",
            PHON.ONSET con ] ].

mr_title := n_title_unsp_le &
 [ STEM < "mr" >,
   SYNSEM [ LKEYS.KEYREL.CARG "mr",
            PHON.ONSET con ] ].

mr_title_2 := n_title_unsp_le &
 [ STEM < "mr." >,
   SYNSEM [ LKEYS.KEYREL.CARG "mr",
            PHON.ONSET con ] ].

mrs_title := n_title_unsp_le &
 [ STEM < "mrs" >,
   SYNSEM [ LKEYS.KEYREL.CARG "mrs",
            PHON.ONSET con ] ].

mrs_title_2 := n_title_unsp_le &
 [ STEM < "mrs." >,
   SYNSEM [ LKEYS.KEYREL.CARG "mrs",
            PHON.ONSET con ] ].

mrt_n1 := n_proper_le &
 [ STEM < "mrt" >,
   SYNSEM [ LKEYS.KEYREL.CARG "mrt",
            PHON.ONSET con ] ].

ms_title := n_title_unsp_le &
 [ STEM < "ms" >,
   SYNSEM [ LKEYS.KEYREL.CARG "ms",
            PHON.ONSET con ] ].

ms_title_2 := n_title_unsp_le &
 [ STEM < "ms." >,
   SYNSEM [ LKEYS.KEYREL.CARG "ms",
            PHON.ONSET con ] ].

mtn_view_n1 := n_proper_city_le &
 [ STEM < "mountain", "view" >,
   SYNSEM [ LKEYS.KEYREL.CARG "mountain_view",
            PHON.ONSET con ] ].

much := adv_degree_spec_m_le &
 [ STEM < "much" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_much_x_deg_rel",
            PHON.ONSET con ] ].

much_adv := adv_int_vp_post_le &
 [ STEM < "much" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_much_a_1_rel",
            PHON.ONSET con ] ].

much_beloved_a1 := adj_intrans_le &
 [ STEM < "much-", "beloved" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_much-beloved_a_1_rel",
            PHON.ONSET con ] ].

much_beloved_a2 := adj_intrans_le &
 [ STEM < "much", "beloved" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_much-beloved_a_1_rel",
            PHON.ONSET con ] ].

much_celebrated_a1 := adj_intrans_le &
 [ STEM < "much-", "celebrated" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_much-celebrated_a_1_rel",
            PHON.ONSET con ] ].

much_celebrated_a2 := adj_intrans_le &
 [ STEM < "much", "celebrated" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_much-celebrated_a_1_rel",
            PHON.ONSET con ] ].

much_det := det_part_ms_much_le &
 [ STEM < "much" >,
   SYNSEM [ LKEYS.KEYREL.PRED _much_q_rel,
            PHON.ONSET con ] ].

mud_flats_n := n_intr_le &
 [ STEM < "mud", "flats" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mud+flats_n_1_rel",
            PHON.ONSET con ] ].

mud_n1 := n_mass_le &
 [ STEM < "mud" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mud_n_1_rel",
            PHON.ONSET con ] ].

muddle_along_v1 := v_particle_le &
 [ STEM < "muddle" >,
   SYNSEM [ LKEYS [ --COMPKEY _along_p_sel_rel,
                    KEYREL.PRED "_muddle_v_along_rel" ],
            PHON.ONSET con ] ].

muddle_n1 := n_intr_le &
 [ STEM < "muddle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_muddle_n_1_rel",
            PHON.ONSET con ] ].

muddle_through_v1 := v_particle_le &
 [ STEM < "muddle" >,
   SYNSEM [ LKEYS [ --COMPKEY _through_p_sel_rel,
                    KEYREL.PRED "_muddle_v_through_rel" ],
            PHON.ONSET con ] ].

muddle_up_v1 := v_particle_np_le &
 [ STEM < "muddle" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_muddle_v_up_rel" ],
            PHON.ONSET con ] ].

muddy_a1 := adj_intrans_le &
 [ STEM < "muddy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_muddy_a_1_rel",
            PHON.ONSET con ] ].

mueckl_nd := n_proper_le &
 [ STEM < "mueckl" >,
   SYNSEM [ LKEYS.KEYREL.CARG "mueckl",
            PHON.ONSET con ] ].

mueller_n1 := n_proper_le &
 [ STEM < "mueller" >,
   SYNSEM [ LKEYS.KEYREL.CARG "mueller",
            PHON.ONSET con ] ].

muenchengladbach_nd := n_proper_city_le &
 [ STEM < "muenchengladbach" >,
   SYNSEM [ LKEYS.KEYREL.CARG "muenchengladbach",
            PHON.ONSET con ] ].

muenster_n1 := n_proper_city_le &
 [ STEM < "muenster" >,
   SYNSEM [ LKEYS.KEYREL.CARG "muenster",
            PHON.ONSET con ] ].

mug_n1 := n_intr_le &
 [ STEM < "mug" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mug_n_1_rel",
            PHON.ONSET con ] ].

muhammad_n1 := n_proper_le &
 [ STEM < "muhammad" >,
   SYNSEM [ LKEYS.KEYREL.CARG "muhammad",
            PHON.ONSET con ] ].

mullion_n1 := n_intr_le &
 [ STEM < "mullion" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mullion_n_1_rel",
            PHON.ONSET con ] ].

multi_passenger_a1 := adj_intrans_le &
 [ STEM < "multi-", "passenger" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_multi-passenger_a_1_rel",
            PHON.ONSET con ] ].

multifariousness_n1 := n_mass_le &
 [ STEM < "multifariousness" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_multifariousness_n_1_rel",
            PHON.ONSET con ] ].

multifold_a1 := adj_intrans_le &
 [ STEM < "multifold" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_multifold_a_1_rel",
            PHON.ONSET con ] ].

multimedia_n1 := n_mass_le &
 [ STEM < "multimedia" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_multimedia_n_1_rel",
            PHON.ONSET con ] ].

multiple_n1 := n_intr_le &
 [ STEM < "multiple" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_multiple_n_1_rel",
            PHON.ONSET con ] ].

multiplication_n1 := n_mass_count_le &
 [ STEM < "multiplication" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_multiplication_n_1_rel",
            PHON.ONSET con ] ].

multiply_v1 := v_np_trans_noger_le &
 [ STEM < "multiply" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_multiply_v_cause_rel",
            PHON.ONSET con ] ].

multiply_v2 := v_unacc_le &
 [ STEM < "multiply" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_multiply_v_1_rel",
            PHON.ONSET con ] ].

multitude_n1 := n_ppof_le &
 [ STEM < "multitude" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_multitude_n_of_rel",
            PHON.ONSET con ] ].

multivalve_n1 := n_intr_le &
 [ STEM < "multivalve" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_multivalve_n_1_rel",
            PHON.ONSET con ] ].

mumble_n1 := n_intr_le &
 [ STEM < "mumble" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mumble_n_1_rel",
            PHON.ONSET con ] ].

mumble_v1 := v_np*_trans_le &
 [ STEM < "mumble" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mumble_v_1_rel",
            PHON.ONSET con ] ].

mumble_v2 := v_cp_prop_non_trans_le &
 [ STEM < "mumble" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mumble_v_1_rel",
            PHON.ONSET con ] ].

mundalsdalen := n_proper_le &
 [ STEM < "mundalsdalen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "mundalsdalen",
            PHON.ONSET con ] ].

mundhjeld_n1 := n_proper_le &
 [ STEM < "mundhjeld" >,
   SYNSEM [ LKEYS.KEYREL.CARG "mundhjeld",
            PHON.ONSET con ] ].

munich_n1 := n_proper_city_le &
 [ STEM < "munich" >,
   SYNSEM [ LKEYS.KEYREL.CARG "munich",
            PHON.ONSET con ] ].

municipal_a1 := adj_intrans_le &
 [ STEM < "municipal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_municipal_a_1_rel",
            PHON.ONSET con ] ].

municipality_n1 := n_intr_le &
 [ STEM < "municipality" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_municipality_n_1_rel",
            PHON.ONSET con ] ].

municipality_post_ttl := n_post_title_le &
 [ STEM < "municipality" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_municipality_n_1_rel",
            PHON.ONSET con ] ].

munken_n1 := n_proper_le &
 [ STEM < "munken" >,
   SYNSEM [ LKEYS.KEYREL.CARG "munken",
            PHON.ONSET con ] ].

munketrappene := n_proper_le &
 [ STEM < "munketrappene" >,
   SYNSEM [ LKEYS.KEYREL.CARG "munketrappene",
            PHON.ONSET con ] ].

muppets_n1 := n_proper_le &
 [ STEM < "muppets" >,
   SYNSEM [ LKEYS.KEYREL.CARG "muppets",
            PHON.ONSET con ] ].

muradalen := n_proper_le &
 [ STEM < "muradalen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "muradalen",
            PHON.ONSET con ] ].

murane_n1 := n_proper_le &
 [ STEM < "murane" >,
   SYNSEM [ LKEYS.KEYREL.CARG "murane",
            PHON.ONSET con ] ].

murder_n1 := n_mass_count_ppof_le &
 [ STEM < "murder" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_murder_n_of_rel",
            PHON.ONSET con ] ].

murder_v1 := v_np*_trans_le &
 [ STEM < "murder" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_murder_v_1_rel",
            PHON.ONSET con ] ].

murderer_n1 := n_intr_le &
 [ STEM < "murderer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_murderer_n_1_rel",
            PHON.ONSET con ] ].

murmansk := n_proper_city_le &
 [ STEM < "murmansk" >,
   SYNSEM [ LKEYS.KEYREL.CARG "murmansk",
            PHON.ONSET con ] ].

murmur_n1 := n_intr_le &
 [ STEM < "murmur" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_murmur_n_1_rel",
            PHON.ONSET con ] ].

murmur_v1 := v_np*_trans_le &
 [ STEM < "murmur" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_murmur_v_1_rel",
            PHON.ONSET con ] ].

murmur_v2 := v_cp_prop_non_trans_le &
 [ STEM < "murmur" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_murmur_v_1_rel",
            PHON.ONSET con ] ].

muru_n1 := n_proper_le &
 [ STEM < "muru" >,
   SYNSEM [ LKEYS.KEYREL.CARG "muru",
            PHON.ONSET con ] ].

murvangen_n1 := n_proper_le &
 [ STEM < "murvangen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "murvangen",
            PHON.ONSET con ] ].

muscle_n1 := n_mass_count_le &
 [ STEM < "muscle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_muscle_n_1_rel",
            PHON.ONSET con ] ].

muscular_a1 := adj_intrans_le &
 [ STEM < "muscular" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_muscular_a_1_rel",
            PHON.ONSET con ] ].

muse_n1 := n_intr_le &
 [ STEM < "muse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_muse_n_1_rel",
            PHON.ONSET con ] ].

muse_v1 := v_unerg_le &
 [ STEM < "muse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_muse_v_1_rel",
            PHON.ONSET con ] ].

muse_v2 := v_cp_prop_non_trans_le &
 [ STEM < "muse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_muse_v_1_rel",
            PHON.ONSET con ] ].

museum_n1 := n_ppof_le &
 [ STEM < "museum" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_museum_n_of_rel",
            PHON.ONSET con ] ].

museum_post_ttl := n_post_title_le &
 [ STEM < "museum" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_museum_n_of_rel",
            PHON.ONSET con ] ].

mushy_a1 := adj_intrans_le &
 [ STEM < "mushy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mushy_a_1_rel",
            PHON.ONSET con ] ].

music_n1 := n_mass_le &
 [ STEM < "music" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_music_n_1_rel",
            PHON.ONSET con ] ].

musical_a1 := adj_intrans_le &
 [ STEM < "musical" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_musical_a_1_rel",
            PHON.ONSET con ] ].

musical_n1 := n_intr_le &
 [ STEM < "musical" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_musical_n_1_rel",
            PHON.ONSET con ] ].

musicgal := n_proper_le &
 [ STEM < "musicgal" >,
   SYNSEM [ LKEYS.KEYREL.CARG "musicgal",
            PHON.ONSET con ] ].

musicgal_2 := n_proper_le &
 [ STEM < "music", "gal" >,
   SYNSEM [ LKEYS.KEYREL.CARG "musicgal",
            PHON.ONSET con ] ].

musician_n1 := n_intr_le &
 [ STEM < "musician" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_musician_n_1_rel",
            PHON.ONSET con ] ].

musician_ttl := n_title_le &
 [ STEM < "musician" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_musician_n_1_rel",
            PHON.ONSET con ] ].

musket_n1 := n_intr_le &
 [ STEM < "musket" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_musket_n_1_rel",
            PHON.ONSET con ] ].

muslim_a1 := adj_intrans_le &
 [ STEM < "muslim" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_muslim_a_1_rel",
            PHON.ONSET con ] ].

muslim_n1 := n_intr_named_le &
 [ STEM < "muslim" >,
   SYNSEM [ LKEYS.KEYREL.CARG "muslim",
            PHON.ONSET con ] ].

muslin_n1 := n_mass_le &
 [ STEM < "muslin" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_muslin_n_1_rel",
            PHON.ONSET con ] ].

must_aux_neg_1 := va_modal_neg_le &
 [ STEM < "mustn't" >,
   SYNSEM [ LKEYS.KEYREL.PRED _must_v_modal_rel,
            PHON.ONSET con ] ].

must_aux_neg_2 := va_modal_neg_le &
 [ STEM < "mustn", "'t" >,
   SYNSEM [ LKEYS.KEYREL.PRED _must_v_modal_rel,
            PHON.ONSET con ] ].

must_aux_pos := va_modal_pos_le &
 [ STEM < "must" >,
   SYNSEM [ LKEYS.KEYREL.PRED _must_v_modal_rel,
            PHON.ONSET con ] ].

must_have_n1 := n_intr_le &
 [ STEM < "must-", "have" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_must-have_n_1_rel",
            PHON.ONSET con ] ].

must_n1 := n_intr_le &
 [ STEM < "must" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_must_n_1_rel",
            PHON.ONSET con ] ].

must_see_n1 := n_intr_le &
 [ STEM < "must-", "see" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_must-see_n_1_rel",
            PHON.ONSET con ] ].

mustard_n1 := n_mass_le &
 [ STEM < "mustard" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mustard_n_1_rel",
            PHON.ONSET con ] ].

muster_n1 := n_mass_le &
 [ STEM < "muster" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_muster_n_1_rel",
            PHON.ONSET con ] ].

muster_v1 := v_np*_trans_le &
 [ STEM < "muster" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_muster_v_1_rel",
            PHON.ONSET con ] ].

mute_a1 := adj_intrans_le &
 [ STEM < "mute" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mute_a_1_rel",
            PHON.ONSET con ] ].

mute_n1 := n_intr_le &
 [ STEM < "mute" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mute_n_1_rel",
            PHON.ONSET con ] ].

mute_v1 := v_np_trans_le &
 [ STEM < "mute" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mute_v_1_rel",
            PHON.ONSET con ] ].

mutter_n1 := n_intr_le &
 [ STEM < "mutter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mutter_n_1_rel",
            PHON.ONSET con ] ].

mutter_v1 := v_np*_trans_le &
 [ STEM < "mutter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mutter_v_1_rel",
            PHON.ONSET con ] ].

mutter_v2 := v_cp_prop_non_trans_le &
 [ STEM < "mutter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mutter_v_1_rel",
            PHON.ONSET con ] ].

mutual_a1 := adj_intrans_le &
 [ STEM < "mutual" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mutual_a_1_rel",
            PHON.ONSET con ] ].

mutually := adv_int_vp_le &
 [ STEM < "mutually" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mutual_a_1_rel",
            PHON.ONSET con ] ].

mvc_n1 := n_proper_le &
 [ STEM < "mvc" >,
   SYNSEM [ LKEYS.KEYREL.CARG "mvc",
            PHON.ONSET con ] ].

my := det_poss_my_le &
 [ STEM < "my" >,
   SYNSEM.PHON.ONSET con ].

my_excl_pre := adv_s_pre_word_root_le &
 [ STEM < "my" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_my_a_1_rel",
            PHON.ONSET con ] ].

my_god_root := adv_s_pre_word_root_le &
 [ STEM < "my", "god" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_my+god_a_1_rel",
            PHON.ONSET con ] ].

my_goodness_root := adv_s_pre_word_root_le &
 [ STEM < "my", "goodness" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_my+goodness_a_1_rel",
            PHON.ONSET con ] ].

myco := n_proper_le &
 [ STEM < "myco" >,
   SYNSEM [ LKEYS.KEYREL.CARG "myco",
            PHON.ONSET con ] ].

myldinga := n_proper_le &
 [ STEM < "myldinga" >,
   SYNSEM [ LKEYS.KEYREL.CARG "myldinga",
            PHON.ONSET con ] ].

myrdal := n_proper_le &
 [ STEM < "myrdal" >,
   SYNSEM [ LKEYS.KEYREL.CARG "myrdal",
            PHON.ONSET con ] ].

myriad_a1 := adj_intrans_le &
 [ STEM < "myriad" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_myriad_a_1_rel",
            PHON.ONSET con ] ].

myriad_n1 := n_ppof_oblig_le &
 [ STEM < "myriad" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_myriad_n_of_rel",
            PHON.ONSET con ] ].

myrtle_beach_n1 := n_proper_city_le &
 [ STEM < "myrtle", "beach" >,
   SYNSEM [ LKEYS.KEYREL.CARG "myrtle_beach",
            PHON.ONSET con ] ].

myrtle_n1 := n_proper_le &
 [ STEM < "myrtle" >,
   SYNSEM [ LKEYS.KEYREL.CARG "myrtle",
            PHON.ONSET con ] ].

myself := n_refl_pro_myself_le &
 [ STEM < "myself" >,
   SYNSEM.PHON.ONSET con ].

myself_adv := adv_refl_pro_myself_le &
 [ STEM < "myself" >,
   SYNSEM.PHON.ONSET con ].

mysterious_a1 := adj_intrans_le &
 [ STEM < "mysterious" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mysterious_a_1_rel",
            PHON.ONSET con ] ].

mystery_n1 := n_mass_count_le &
 [ STEM < "mystery" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mystery_n_1_rel",
            PHON.ONSET con ] ].

mysusseter := n_proper_le &
 [ STEM < "mysusseter" >,
   SYNSEM [ LKEYS.KEYREL.CARG "mysusseter",
            PHON.ONSET con ] ].

myth_n1 := n_intr_le &
 [ STEM < "myth" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_myth_n_1_rel",
            PHON.ONSET con ] ].

mythology_n1 := n_mass_count_le &
 [ STEM < "mythology" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mythology_n_1_rel",
            PHON.ONSET con ] ].

mÃ¥lÃ¸y := n_proper_le &
 [ STEM < "mÃ¥lÃ¸y" >,
   SYNSEM [ LKEYS.KEYREL.CARG "mÃ¥lÃ¸y",
            PHON.ONSET con ] ].

mÃ¸ller := n_proper_le &
 [ STEM < "mÃ¸ller" >,
   SYNSEM [ LKEYS.KEYREL.CARG "mÃ¸ller",
            PHON.ONSET con ] ].

mÃ¸ller_foss := n_proper_le &
 [ STEM < "mÃ¸ller-", "foss" >,
   SYNSEM [ LKEYS.KEYREL.CARG "mÃ¸ller_foss",
            PHON.ONSET con ] ].

mÃ¸rkrisdalen_n1 := n_proper_le &
 [ STEM < "mÃ¸rkrisdalen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "mÃ¸rkrisdalen",
            PHON.ONSET con ] ].

mÃ¸rstadstÃ¸len_n1 := n_proper_le &
 [ STEM < "mÃ¸rstadstÃ¸len" >,
   SYNSEM [ LKEYS.KEYREL.CARG "mÃ¸rstadstÃ¸len",
            PHON.ONSET con ] ].

mÃ¼ller_n1 := n_proper_le &
 [ STEM < "mÃ¼ller" >,
   SYNSEM [ LKEYS.KEYREL.CARG "mÃ¼ller",
            PHON.ONSET con ] ].

n_np1 := n_proper_le &
 [ STEM < "_n" >,
   SYNSEM [ LKEYS.KEYREL.CARG "n",
            PHON.ONSET voc ] ].

n_period_np1 := n_proper_le &
 [ STEM < "n." >,
   SYNSEM [ LKEYS.KEYREL.CARG "n",
            PHON.ONSET voc ] ].

n_period_np2 := n_proper_le &
 [ STEM < "_n." >,
   SYNSEM [ LKEYS.KEYREL.CARG "n",
            PHON.ONSET voc ] ].

nafta_n1 := n_proper_le &
 [ STEM < "nafta" >,
   SYNSEM [ LKEYS.KEYREL.CARG "nafta",
            PHON.ONSET con ] ].

nagoya_n1 := n_proper_city_le &
 [ STEM < "nagoya" >,
   SYNSEM [ LKEYS.KEYREL.CARG "nagoya",
            PHON.ONSET con ] ].

nah_excl_post := adv_s_post_word_nospec_le &
 [ STEM < "nah" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nah_a_1_rel",
            PHON.ONSET con ] ].

nah_excl_pre := adv_s_pre_word_root_le &
 [ STEM < "nah" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nah_a_1_rel",
            PHON.ONSET con ] ].

nail_down_v1 := v_particle_np_le &
 [ STEM < "nail" >,
   SYNSEM [ LKEYS [ --COMPKEY _down_p_sel_rel,
                    KEYREL.PRED "_nail_v_down_rel" ],
            PHON.ONSET con ] ].

nail_n1 := n_intr_le &
 [ STEM < "nail" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nail_n_1_rel",
            PHON.ONSET con ] ].

nail_up_v1 := v_particle_np_le &
 [ STEM < "nail" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_nail_v_up_rel" ],
            PHON.ONSET con ] ].

nail_v1 := v_np_trans_le &
 [ STEM < "nail" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nail_v_1_rel",
            PHON.ONSET con ] ].

name_n1 := n_ppof_le &
 [ STEM < "name" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_name_n_of_rel",
            PHON.ONSET con ] ].

name_v1 := v_np_trans_le &
 [ STEM < "name" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_name_v_1_rel",
            PHON.ONSET con ] ].

name_v2 := v_ditrans_only_le &
 [ STEM < "name" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_name_v_1_rel",
            PHON.ONSET con ] ].

name_v3 := v_np_prep_trans_le &
 [ STEM < "name" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _after_p_rel,
                    KEYREL.PRED "_name_v_1_rel" ],
            PHON.ONSET con ] ].

named_gle := n_proper_le &
 [ STEM < "_named_" >,
   SYNSEM.LKEYS.KEYREL.CARG "_named_" ].

nameersatz := n_proper_le &
 [ STEM < "nameersatz" >,
   SYNSEM [ LKEYS.KEYREL.CARG "nameersatz",
            PHON.ONSET con ] ].

namely_p := p_le &
 [ STEM < "namely" >,
   SYNSEM [ LKEYS.KEYREL.PRED _namely_p_rel,
            PHON.ONSET con ] ].

namely_padv := p_ppcomp_copred_le &
 [ STEM < "namely" >,
   SYNSEM [ LKEYS.KEYREL.PRED _namely_p_rel,
            PHON.ONSET con ] ].

namlet_n1 := n_proper_le &
 [ STEM < "namlet" >,
   SYNSEM [ LKEYS.KEYREL.CARG "namlet",
            PHON.ONSET con ] ].

nandy := n_proper_le &
 [ STEM < "nandy" >,
   SYNSEM [ LKEYS.KEYREL.CARG "nandy",
            PHON.ONSET con ] ].

nanometer_n1 := n_meas_le &
 [ STEM < "nanometer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nanometer_n_1_rel",
            PHON.ONSET con ] ].

nansen := n_proper_le &
 [ STEM < "nansen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "nansen",
            PHON.ONSET con ] ].

nap_n1 := n_intr_le &
 [ STEM < "nap" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nap_n_1_rel",
            PHON.ONSET con ] ].

nap_v1 := v_unerg_le &
 [ STEM < "nap" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nap_v_1_rel",
            PHON.ONSET con ] ].

napalm_n1 := n_mass_count_le &
 [ STEM < "napalm" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_napalm_n_1_rel",
            PHON.ONSET con ] ].

narrate_v1 := v_np*_trans_le &
 [ STEM < "narrate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_narrate_v_1_rel",
            PHON.ONSET con ] ].

narrative_a1 := adj_intrans_le &
 [ STEM < "narrative" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_narrative_a_1_rel",
            PHON.ONSET con ] ].

narrative_n1 := n_intr_le &
 [ STEM < "narrative" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_narrative_n_1_rel",
            PHON.ONSET con ] ].

narrow_a1 := adj_intrans_le &
 [ STEM < "narrow" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_narrow_a_1_rel",
            PHON.ONSET con ] ].

narrow_down_v1 := v_particle_np_le &
 [ STEM < "narrow" >,
   SYNSEM [ LKEYS [ --COMPKEY _down_p_sel_rel,
                    KEYREL.PRED "_narrow_v_down_rel" ],
            PHON.ONSET con ] ].

narrow_down_v2 := v_particle_empty_pp_le &
 [ STEM < "narrow" >,
   SYNSEM [ LKEYS [ --COMPKEY _down_p_sel_rel,
                    --OCOMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_narrow_v_down-to_rel" ],
            PHON.ONSET con ] ].

narrow_down_v3 := v_particle_np_pp_to_le &
 [ STEM < "narrow" >,
   SYNSEM [ LKEYS [ --COMPKEY _down_p_sel_rel,
                    KEYREL.PRED "_narrow_v_down_rel" ],
            PHON.ONSET con ] ].

narrow_v1 := v_unacc_le &
 [ STEM < "narrow" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_narrow_v_1_rel",
            PHON.ONSET con ] ].

narrow_v2 := v_np_trans_noger_le &
 [ STEM < "narrow" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_narrow_v_cause_rel",
            PHON.ONSET con ] ].

narrower := adj_comp_le &
 [ STEM < "narrower" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_narrow_a_1_rel",
            PHON.ONSET con ] ].

narrowest_a1 := adj_superl_le &
 [ STEM < "narrowest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_narrow_a_1_rel",
            PHON.ONSET con ] ].

narrowly_isect := adv_int_vp_le &
 [ STEM < "narrowly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_narrow_a_1_rel",
            PHON.ONSET con ] ].

narvik := n_proper_le &
 [ STEM < "narvik" >,
   SYNSEM [ LKEYS.KEYREL.CARG "narvik",
            PHON.ONSET con ] ].

nasa_n1 := n_proper_le &
 [ STEM < "nasa" >,
   SYNSEM [ LKEYS.KEYREL.CARG "nasa",
            PHON.ONSET con ] ].

nashville_n1 := n_proper_city_le &
 [ STEM < "nashville" >,
   SYNSEM [ LKEYS.KEYREL.CARG "nashville",
            PHON.ONSET con ] ].

nasjonalpark := n_proper_le &
 [ STEM < "nasjonalpark" >,
   SYNSEM [ LKEYS.KEYREL.CARG "nasjonalpark",
            PHON.ONSET con ] ].

nastily := adv_int_vp_le &
 [ STEM < "nastily" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nasty_a_1_rel",
            PHON.ONSET con ] ].

nasty_a1 := adj_intrans_le &
 [ STEM < "nasty" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nasty_a_1_rel",
            PHON.ONSET con ] ].

natal_a1 := adj_intrans_le &
 [ STEM < "natal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_natal_a_1_rel",
            PHON.ONSET con ] ].

nation_n1 := n_ppof_le &
 [ STEM < "nation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nation_n_of_rel",
            PHON.ONSET con ] ].

national_a1 := adj_intrans_le &
 [ STEM < "national" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_national_a_1_rel",
            PHON.ONSET con ] ].

national_park_post_ttl := n_post_title_le &
 [ STEM < "national", "park" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_national+park_n_1_rel",
            PHON.ONSET con ] ].

nationality_n1 := n_mass_count_le &
 [ STEM < "nationality" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nationality_n_1_rel",
            PHON.ONSET con ] ].

nationalize_v1 := v_np_trans_le &
 [ STEM < "nationalize" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nationalize_v_1_rel",
            PHON.ONSET con ] ].

nationally := adv_int_vp_le &
 [ STEM < "nationally" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_national_a_1_rel",
            PHON.ONSET con ] ].

nationwide_adv := pp_le &
 [ STEM < "nationwide" >,
   SYNSEM [ LKEYS.KEYREL.PRED _nationwide_a_1_rel,
            PHON.ONSET con ] ].

nationwide_isect := adj_intrans_le &
 [ STEM < "nationwide" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nationwide_a_1_rel",
            PHON.ONSET con ] ].

native_isect := adj_intrans_le &
 [ STEM < "native" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_native_a_1_rel",
            PHON.ONSET con ] ].

native_n1 := n_ppof_le &
 [ STEM < "native" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_native_n_of_rel",
            PHON.ONSET con ] ].

natively := adv_int_vp_le &
 [ STEM < "natively" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_native_a_1_rel",
            PHON.ONSET con ] ].

nativity_n1 := n_intr_le &
 [ STEM < "nativity" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nativity_n_1_rel",
            PHON.ONSET con ] ].

natural_a1 := adj_intrans_le &
 [ STEM < "natural" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_natural_a_for_rel",
            PHON.ONSET con ] ].

natural_a2 := adj_reg_atrans_le &
 [ STEM < "natural" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_natural_a_for_rel",
            PHON.ONSET con ] ].

naturalist_n1 := n_intr_le &
 [ STEM < "naturalist" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_naturalist_n_1_rel",
            PHON.ONSET con ] ].

naturally_adv1 := adv_int_vp_le &
 [ STEM < "naturally" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_natural_a_for_rel",
            PHON.ONSET con ] ].

nature_house_n1 := n_proper_le &
 [ STEM < "nature", "house" >,
   SYNSEM [ LKEYS.KEYREL.CARG "nature+house",
            PHON.ONSET con ] ].

nature_n1 := n_mass_count_ppof_le &
 [ STEM < "nature" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nature_n_of_rel",
            PHON.ONSET con ] ].

naturhus_n1 := n_proper_le &
 [ STEM < "naturhus" >,
   SYNSEM [ LKEYS.KEYREL.CARG "naturhus",
            PHON.ONSET con ] ].

naturreservat := n_proper_le &
 [ STEM < "naturreservat" >,
   SYNSEM [ LKEYS.KEYREL.CARG "naturreservat",
            PHON.ONSET con ] ].

naught_n1 := n_mass_le &
 [ STEM < "naught" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_naught_n_1_rel",
            PHON.ONSET con ] ].

nauseate_v1 := v_np_trans_le &
 [ STEM < "nauseate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nauseate_v_1_rel",
            PHON.ONSET con ] ].

naustgardtind_n1 := n_proper_le &
 [ STEM < "naustgardtind" >,
   SYNSEM [ LKEYS.KEYREL.CARG "naustgardtind",
            PHON.ONSET con ] ].

nautgardsoksla_n1 := n_proper_le &
 [ STEM < "nautgardsoksla" >,
   SYNSEM [ LKEYS.KEYREL.CARG "nautgardsoksla",
            PHON.ONSET con ] ].

nautgardstind_n1 := n_proper_le &
 [ STEM < "nautgardstind" >,
   SYNSEM [ LKEYS.KEYREL.CARG "nautgardstind",
            PHON.ONSET con ] ].

nautgardstinden_n1 := n_proper_le &
 [ STEM < "nautgardstinden" >,
   SYNSEM [ LKEYS.KEYREL.CARG "nautgardstinden",
            PHON.ONSET con ] ].

nautical_a1 := adj_attr_intrans_le &
 [ STEM < "nautical" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nautical_a_1_rel",
            PHON.ONSET con ] ].

naval_a1 := adj_intrans_le &
 [ STEM < "naval" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_naval_a_1_rel",
            PHON.ONSET con ] ].

nave_n1 := n_intr_le &
 [ STEM < "nave" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nave_n_1_rel",
            PHON.ONSET con ] ].

navigable_a1 := adj_intrans_le &
 [ STEM < "navigable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_navigable_a_1_rel",
            PHON.ONSET con ] ].

navigate_v1 := v_np*_trans_le &
 [ STEM < "navigate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_navigate_v_1_rel",
            PHON.ONSET con ] ].

navigation_n1 := n_mass_ppcomp_le &
 [ STEM < "navigation" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_navigation_n_of_rel" ],
            PHON.ONSET con ] ].

navigation_wise_adv1 := adv_int_vp_le &
 [ STEM < "navigation", "wise" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_navigation+wise_a_1_rel",
            PHON.ONSET con ] ].

navigation_wise_adv2 := adv_int_vp_le &
 [ STEM < "navigation-", "wise" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_navigation+wise_a_1_rel",
            PHON.ONSET con ] ].

navy_n1 := n_intr_le &
 [ STEM < "navy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_navy_n_1_rel",
            PHON.ONSET con ] ].

nay_disc_root := adv_s_pre_word_root_le &
 [ STEM < "nay" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nay_a_1_rel",
            PHON.ONSET con ] ].

nbc_n1 := n_proper_le &
 [ STEM < "nbc" >,
   SYNSEM [ LKEYS.KEYREL.CARG "nbc",
            PHON.ONSET voc ] ].

ne_isect := adj_intrans_le &
 [ STEM < "ne" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_northeast_a_1_rel",
            PHON.ONSET con ] ].

ne_n1 := n_ppof_le &
 [ STEM < "ne" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ne_n_of_rel",
            PHON.ONSET con ] ].

ne_n2 := n_adv_dir_le &
 [ STEM < "ne" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED _northeast_a_1_rel,
                    KEYREL.PRED place_n_rel ],
            PHON.ONSET con ] ].

neanderthal_a1 := adj_intrans_le &
 [ STEM < "neanderthal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_neanderthal_a_1_rel",
            PHON.ONSET con ] ].

neanderthal_n1 := n_intr_le &
 [ STEM < "neanderthal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_neanderthal_n_1_rel",
            PHON.ONSET con ] ].

near := p_reg_le &
 [ STEM < "near" >,
   SYNSEM [ LKEYS.KEYREL.PRED _near_p_rel,
            PHON.ONSET con ] ].

near_a1 := adj_trans_le &
 [ STEM < "near" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_near_a_to_rel" ],
            PHON.ONSET con ] ].

near_v1 := v_np*_trans_le &
 [ STEM < "near" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_near_v_1_rel",
            PHON.ONSET con ] ].

nearby_a1 := adj_intrans_le &
 [ STEM < "nearby" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nearby_a_1_rel",
            PHON.ONSET con ] ].

nearby_adv1 := pp_le &
 [ STEM < "nearby" >,
   SYNSEM [ LKEYS.KEYREL.PRED _nearby_p_rel,
            PHON.ONSET con ] ].

nearer_a1 := adj_comp_trans_le &
 [ STEM < "nearer" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_near_a_to_rel" ],
            PHON.ONSET con ] ].

nearest_a1 := adj_trans_le &
 [ STEM < "nearest" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_near_a_to_rel" ],
            PHON.ONSET con ] ].

nearly_adv1 := adv_int_vp_pre_le &
 [ STEM < "nearly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_near_a_to_rel",
            PHON.ONSET con ] ].

nearly_deg := adv_degree_spec_jov_le &
 [ STEM < "nearly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nearly_x_deg_rel",
            PHON.ONSET con ] ].

nearness_n1 := n_mass_le &
 [ STEM < "nearness" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nearness_n_1_rel",
            PHON.ONSET con ] ].

nearsightedness_n1 := n_mass_le &
 [ STEM < "nearsightedness" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nearsightedness_n_1_rel",
            PHON.ONSET con ] ].

neat_adj := adj_intrans_le &
 [ STEM < "neat" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_neat_a_1_rel",
            PHON.ONSET con ] ].

neatly_isect := adv_int_vp_le &
 [ STEM < "neatly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_neat_a_1_rel",
            PHON.ONSET con ] ].

nebraska_n1 := n_proper_le &
 [ STEM < "nebraska" >,
   SYNSEM [ LKEYS.KEYREL.CARG "nebraska",
            PHON.ONSET con ] ].

nebraska_n2 := n_proper_abb_le &
 [ STEM < "ne" >,
   SYNSEM [ LKEYS.KEYREL.CARG "nebraska",
            PHON.ONSET con ] ].

necessarily := adv_le &
 [ STEM < "necessarily" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_necessary_a_1_rel",
            PHON.ONSET con ] ].

necessary_a1 := adj_trans_le &
 [ STEM < "necessary" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_necessary_a_for_rel" ],
            PHON.ONSET con ] ].

necessary_a2 := adj_reg_atrans_le &
 [ STEM < "necessary" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_necessary_a_for_rel",
            PHON.ONSET con ] ].

necessary_a3 := adj_reg_atrans_cp_le &
 [ STEM < "necessary" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_necessary_a_for_rel",
            PHON.ONSET con ] ].

necessitate_v1 := v_np_trans_le &
 [ STEM < "necessitate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_necessitate_v_1_rel",
            PHON.ONSET con ] ].

necessitate_v2 := v_cp_prop_non_trans_le &
 [ STEM < "necessitate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_necessitate_v_1_rel",
            PHON.ONSET con ] ].

necessity_n1 := n_mass_count_le &
 [ STEM < "necessity" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_necessity_n_1_rel",
            PHON.ONSET con ] ].

neck_n1 := n_intr_le &
 [ STEM < "neck" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_neck_n_1_rel",
            PHON.ONSET con ] ].

necp_nd := n_proper_le &
 [ STEM < "necp" >,
   SYNSEM [ LKEYS.KEYREL.CARG "necp",
            PHON.ONSET con ] ].

nedre_leirungen_n1 := n_proper_le &
 [ STEM < "nedre", "leirungen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "nedre+leirungen",
            PHON.ONSET con ] ].

nedre_n1 := n_proper_le &
 [ STEM < "nedre" >,
   SYNSEM [ LKEYS.KEYREL.CARG "nedre",
            PHON.ONSET con ] ].

nedre_steinbuvatnet_n1 := n_proper_le &
 [ STEM < "nedre", "steinbuvatnet" >,
   SYNSEM [ LKEYS.KEYREL.CARG "nedre+steinbuvatnet",
            PHON.ONSET con ] ].

nedre_tindvatnet := n_proper_le &
 [ STEM < "nedre", "tindvatnet" >,
   SYNSEM [ LKEYS.KEYREL.CARG "nedre_tindvatnet",
            PHON.ONSET con ] ].

nedre_tindvatnet_n2 := n_proper_le &
 [ STEM < "nedre-", "tindvatnet" >,
   SYNSEM [ LKEYS.KEYREL.CARG "nedre_tindvatnet",
            PHON.ONSET con ] ].

nedstestÃ¸len_n1 := n_proper_le &
 [ STEM < "nedstestÃ¸len" >,
   SYNSEM [ LKEYS.KEYREL.CARG "nedstestÃ¸len",
            PHON.ONSET con ] ].

need-prd := v_obj_equi_non_trans_prd_le &
 [ STEM < "need" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_need_v_pred_rel",
            PHON.ONSET con ] ].

need_aux_neg_1 := va_modal_neg_le &
 [ STEM < "needn't" >,
   SYNSEM [ LKEYS.KEYREL.PRED _need_v_modal_rel,
            PHON.ONSET con ] ].

need_aux_neg_2 := va_modal_neg_le &
 [ STEM < "needn", "'t" >,
   SYNSEM [ LKEYS.KEYREL.PRED _need_v_modal_rel,
            PHON.ONSET con ] ].

need_n1 := n_ppof_le &
 [ STEM < "need" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_need_n_of_rel",
            PHON.ONSET con ] ].

need_not_v1 := v_subj_equi_bse_non3sg_le &
 [ STEM < "need", "not" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_need+not_v_1_rel",
            PHON.ONSET con ] ].

need_not_v2 := v_subj_equi_bse_non3sg_le &
 [ STEM < "needn't" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_need+not_v_1_rel",
            PHON.ONSET con ] ].

need_not_v3 := v_subj_equi_bse_non3sg_le &
 [ STEM < "needn", "'t" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_need+not_v_1_rel",
            PHON.ONSET con ] ].

need_v1 := v_np_trans_le &
 [ STEM < "need" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_need_v_1_rel",
            PHON.ONSET con ] ].

need_v2 := v_subj_equi_le &
 [ STEM < "need" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_need_v_1_rel",
            PHON.ONSET con ] ].

need_v3 := v_sor_non_trans_le &
 [ STEM < "need" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_need_v_1_rel",
            PHON.ONSET con ] ].

needful_a1 := adj_intrans_le &
 [ STEM < "needful" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_needful_a_1_rel",
            PHON.ONSET con ] ].

needle_n1 := n_intr_le &
 [ STEM < "needle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_needle_n_1_rel",
            PHON.ONSET con ] ].

needle_v1 := v_np_trans_le &
 [ STEM < "needle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_needle_v_1_rel",
            PHON.ONSET con ] ].

needless_a1 := adj_intrans_le &
 [ STEM < "needless" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_needless_a_1_rel",
            PHON.ONSET con ] ].

needlework_n1 := n_mass_le &
 [ STEM < "needlework" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_needlework_n_1_rel",
            PHON.ONSET con ] ].

negation_n1 := n_mass_count_ppof_le &
 [ STEM < "negation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_negation_n_of_rel",
            PHON.ONSET con ] ].

negative_isect := adj_intrans_le &
 [ STEM < "negative" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_negative_a_1_rel",
            PHON.ONSET con ] ].

negatively := adv_int_vp_le &
 [ STEM < "negatively" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_negative_a_1_rel",
            PHON.ONSET con ] ].

negatory_disc_root := adv_s_pre_word_root_le &
 [ STEM < "negatory" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_negatory_a_1_rel",
            PHON.ONSET con ] ].

neglect_n1 := n_mass_count_ppof_le &
 [ STEM < "neglect" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_neglect_n_of_rel",
            PHON.ONSET con ] ].

neglect_v1 := v_np_trans_le &
 [ STEM < "neglect" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_neglect_v_1_rel",
            PHON.ONSET con ] ].

neglect_v2 := v_subj_equi_le &
 [ STEM < "neglect" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_neglect_v_1_rel",
            PHON.ONSET con ] ].

negligible_isect := adj_intrans_le &
 [ STEM < "negligible" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_negligible_a_1_rel",
            PHON.ONSET con ] ].

negligibly := adv_int_vp_le &
 [ STEM < "negligibly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_negligible_a_1_rel",
            PHON.ONSET con ] ].

negotiable_a1 := adj_intrans_le &
 [ STEM < "negotiable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_negotiable_a_1_rel",
            PHON.ONSET con ] ].

negotiatable_a1 := adj_intrans_le &
 [ STEM < "negotiatable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_negotiable_a_1_rel",
            PHON.ONSET con ] ].

negotiate_v1 := v_empty_prep_intrans_le &
 [ STEM < "negotiate" >,
   SYNSEM [ LKEYS [ --COMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_negotiate_v_with_rel" ],
            PHON.ONSET con ] ].

negotiate_v2 := v_np*_trans_le &
 [ STEM < "negotiate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_negotiate_v_1_rel",
            PHON.ONSET con ] ].

negotiation_n1 := n_ppof_le &
 [ STEM < "negotiation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_negotiation_n_of_rel",
            PHON.ONSET con ] ].

negro_n1 := n_intr_le &
 [ STEM < "negro" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_negro_n_1_rel",
            PHON.ONSET con ] ].

neighbor_n1 := n_intr_le &
 [ STEM < "neighbor" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_neighbor_n_1_rel",
            PHON.ONSET con ] ].

neighbor_v1 := v_np_trans_le &
 [ STEM < "neighbor" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_neighbor_v_1_rel",
            PHON.ONSET con ] ].

neighborhood_n1 := n_ppof_le &
 [ STEM < "neighborhood" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_neighborhood_n_of_rel",
            PHON.ONSET con ] ].

neither_conj := conj_atomic_neither_le &
 [ STEM < "neither" >,
   SYNSEM.PHON.ONSET con ].

neither_det := det_part_sg_le &
 [ STEM < "neither" >,
   SYNSEM [ LKEYS.KEYREL.PRED _neither_q_rel,
            PHON.ONSET con ] ].

neither_one_pn := n_part_ppof_noagr_pl_le &
 [ STEM < "neither", "one" >,
   SYNSEM [ LKEYS.ALTKEYREL.PRED _neither_q_rel,
            PHON.ONSET con ] ].

nelson := n_proper_le &
 [ STEM < "nelson" >,
   SYNSEM [ LKEYS.KEYREL.CARG "nelson",
            PHON.ONSET con ] ].

nematode_n1 := n_intr_le &
 [ STEM < "nematode" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nematode_n_1_rel",
            PHON.ONSET con ] ].

nephew_n1 := n_intr_le &
 [ STEM < "nephew" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nephew_n_1_rel",
            PHON.ONSET con ] ].

neptune_n1 := n_proper_le &
 [ STEM < "neptune" >,
   SYNSEM [ LKEYS.KEYREL.CARG "neptune",
            PHON.ONSET con ] ].

nerve_n1 := n_intr_le &
 [ STEM < "nerve" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nerve_n_1_rel",
            PHON.ONSET con ] ].

nervous_a1 := adj_trans_le &
 [ STEM < "nervous" >,
   SYNSEM [ LKEYS [ --COMPKEY _about_p_sel_rel,
                    KEYREL.PRED "_nervous_a_about_rel" ],
            PHON.ONSET con ] ].

nesbÃ¸ := n_proper_le &
 [ STEM < "nesbÃ¸" >,
   SYNSEM [ LKEYS.KEYREL.CARG "nesbÃ¸",
            PHON.ONSET con ] ].

nesbÃ¸-vatnet := n_proper_le &
 [ STEM < "nesbÃ¸-vatnet" >,
   SYNSEM [ LKEYS.KEYREL.CARG "nesbÃ¸-vatnet",
            PHON.ONSET con ] ].

nesbÃ¸galden := n_proper_le &
 [ STEM < "nesbÃ¸galden" >,
   SYNSEM [ LKEYS.KEYREL.CARG "nesbÃ¸galden",
            PHON.ONSET con ] ].

nesehaugen := n_proper_le &
 [ STEM < "nesehaugen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "nesehaugen",
            PHON.ONSET con ] ].

nest_n1 := n_ppof_le &
 [ STEM < "nest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nest_n_of_rel",
            PHON.ONSET con ] ].

nest_v1 := v_unerg_le &
 [ STEM < "nest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nest_v_1_rel",
            PHON.ONSET con ] ].

nestle_v1 := v_prep_dir_le &
 [ STEM < "nestle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nestle_v_1_rel",
            PHON.ONSET con ] ].

nestle_v2 := v_np_prep_trans_dors_le &
 [ STEM < "nestle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nestle_v_1_rel",
            PHON.ONSET con ] ].

nestling_n1 := n_intr_le &
 [ STEM < "nestling" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nestling_n_1_rel",
            PHON.ONSET con ] ].

nestroy_n1 := n_proper_le &
 [ STEM < "nestroy" >,
   SYNSEM [ LKEYS.KEYREL.CARG "nestroy",
            PHON.ONSET con ] ].

net_n1 := n_intr_le &
 [ STEM < "net" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_net_n_1_rel",
            PHON.ONSET con ] ].

net_v1 := v_ditrans_only_le &
 [ STEM < "net" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_net_v_1_rel",
            PHON.ONSET con ] ].

net_v2 := v_np_trans_le &
 [ STEM < "net" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_net_v_1_rel",
            PHON.ONSET con ] ].

netherlands_n1 := n_intr_named_le &
 [ STEM < "netherlands" >,
   SYNSEM [ LKEYS.KEYREL.CARG "netherlands",
            PHON.ONSET con ] ].

network_n1 := n_ppof_nosort_le &
 [ STEM < "network" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_network_n_of_rel",
            PHON.ONSET con ] ].

network_n2 := n_group_ppof_le &
 [ STEM < "network" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_network_n_of_rel",
            PHON.ONSET con ] ].

network_v1 := v_unerg_le &
 [ STEM < "network" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_network_v_1_rel",
            PHON.ONSET con ] ].

networking_n1 := n_mass_count_le &
 [ STEM < "networking" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_networking_n_1_rel",
            PHON.ONSET con ] ].

neuperlach_n1 := n_proper_city_le &
 [ STEM < "neuperlach" >,
   SYNSEM [ LKEYS.KEYREL.CARG "neuperlach",
            PHON.ONSET con ] ].

neurological_a1 := adj_intrans_le &
 [ STEM < "neurological" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_neurological_a_1_rel",
            PHON.ONSET con ] ].

neuromancer_n1 := n_proper_le &
 [ STEM < "neuromancer" >,
   SYNSEM [ LKEYS.KEYREL.CARG "neuromancer",
            PHON.ONSET con ] ].

neuter_a1 := adj_intrans_le &
 [ STEM < "neuter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_neuter_a_1_rel",
            PHON.ONSET con ] ].

neuter_v1 := v_np_trans_le &
 [ STEM < "neuter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_neuter_v_1_rel",
            PHON.ONSET con ] ].

neutral_a1 := adj_intrans_le &
 [ STEM < "neutral" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_neutral_a_1_rel",
            PHON.ONSET con ] ].

neutrally := adv_int_vp_le &
 [ STEM < "neutrally" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_neutral_a_1_rel",
            PHON.ONSET con ] ].

nevada_n1 := n_proper_le &
 [ STEM < "nevada" >,
   SYNSEM [ LKEYS.KEYREL.CARG "nevada",
            PHON.ONSET con ] ].

nevada_n2 := n_proper_abb_le &
 [ STEM < "nv" >,
   SYNSEM [ LKEYS.KEYREL.CARG "nevada",
            PHON.ONSET con ] ].

never_adv1 := adv_vp_aux_le &
 [ STEM < "never" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_never_a_1_rel",
            PHON.ONSET con ] ].

never_mind_root_pre := adv_s_pre_word_root_le &
 [ STEM < "never", "mind" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_never+mind_a_1_rel",
            PHON.ONSET con ] ].

never_prdp := adv_neg_prdp_le &
 [ STEM < "never" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_never_a_1_rel",
            PHON.ONSET con ] ].

nevertheless_adv1 := adv_vp_pre_le &
 [ STEM < "nevertheless" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nevertheless_a_1_rel",
            PHON.ONSET con ] ].

nevertheless_adv2 := adv_s_pre_le &
 [ STEM < "nevertheless" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nevertheless_a_1_rel",
            PHON.ONSET con ] ].

new_a1 := adj_intrans_le &
 [ STEM < "new" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_new_a_1_rel",
            PHON.ONSET con ] ].

new_guinea_n1 := n_proper_le &
 [ STEM < "new", "guinea" >,
   SYNSEM [ LKEYS.KEYREL.CARG "new_guinea",
            PHON.ONSET con ] ].

new_years_day := n_holiday_le &
 [ STEM < "new", "year", "s", "day" >,
   SYNSEM [ LKEYS.KEYREL.CARG "new_years_day",
            PHON.ONSET con ] ].

new_years_day_2 := n_holiday_le &
 [ STEM < "new", "years", "day" >,
   SYNSEM [ LKEYS.KEYREL.CARG "new_years_day",
            PHON.ONSET con ] ].

new_years_day_3 := n_holiday_le &
 [ STEM < "new", "year", "s" >,
   SYNSEM [ LKEYS.KEYREL.CARG "new_years_day",
            PHON.ONSET con ] ].

new_years_day_3_apos := n_holiday_le &
 [ STEM < "new", "year's" >,
   SYNSEM [ LKEYS.KEYREL.CARG "new_years_day",
            PHON.ONSET con ] ].

new_years_day_apos := n_holiday_le &
 [ STEM < "new", "year's", "day" >,
   SYNSEM [ LKEYS.KEYREL.CARG "new_years_day",
            PHON.ONSET con ] ].

new_years_eve := n_holiday_le &
 [ STEM < "new", "year", "s", "eve" >,
   SYNSEM [ LKEYS.KEYREL.CARG "new_years_eve",
            PHON.ONSET con ] ].

new_years_eve_2 := n_holiday_le &
 [ STEM < "new", "years", "eve" >,
   SYNSEM [ LKEYS.KEYREL.CARG "new_years_eve",
            PHON.ONSET con ] ].

new_years_eve_apos := n_holiday_le &
 [ STEM < "new", "year's", "eve" >,
   SYNSEM [ LKEYS.KEYREL.CARG "new_years_eve",
            PHON.ONSET con ] ].

new_york_city_n1 := n_proper_city_le &
 [ STEM < "new", "york", "city" >,
   SYNSEM [ LKEYS.KEYREL.CARG "new_york",
            PHON.ONSET con ] ].

new_york_n1 := n_proper_city_le &
 [ STEM < "new", "york" >,
   SYNSEM [ LKEYS.KEYREL.CARG "new_york",
            PHON.ONSET con ] ].

new_york_n2 := n_proper_abb_le &
 [ STEM < "ny" >,
   SYNSEM [ LKEYS.KEYREL.CARG "new_york",
            PHON.ONSET con ] ].

new_zealand_n1 := n_proper_le &
 [ STEM < "new", "zealand" >,
   SYNSEM [ LKEYS.KEYREL.CARG "new_zealand",
            PHON.ONSET con ] ].

newborn_a1 := adj_intrans_le &
 [ STEM < "newborn" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_newborn_a_1_rel",
            PHON.ONSET con ] ].

newborn_n1 := n_intr_le &
 [ STEM < "newborn" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_newborn_n_1_rel",
            PHON.ONSET con ] ].

newcastle_nd := n_proper_city_le &
 [ STEM < "newcastle" >,
   SYNSEM [ LKEYS.KEYREL.CARG "newcastle",
            PHON.ONSET con ] ].

newcomer_n1 := n_intr_le &
 [ STEM < "newcomer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_newcomer_n_1_rel",
            PHON.ONSET con ] ].

newer_a1 := adj_comp_le &
 [ STEM < "newer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_new_a_1_rel",
            PHON.ONSET con ] ].

newest_a1 := adj_superl_le &
 [ STEM < "newest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_new_a_1_rel",
            PHON.ONSET con ] ].

newhampshire_n1 := n_proper_le &
 [ STEM < "new", "hampshire" >,
   SYNSEM [ LKEYS.KEYREL.CARG "newhampshire",
            PHON.ONSET con ] ].

newhampshire_n2 := n_proper_abb_le &
 [ STEM < "nh" >,
   SYNSEM [ LKEYS.KEYREL.CARG "newhampshire",
            PHON.ONSET con ] ].

newjersey_n1 := n_proper_le &
 [ STEM < "new", "jersey" >,
   SYNSEM [ LKEYS.KEYREL.CARG "newjersey",
            PHON.ONSET con ] ].

newjersey_n2 := n_proper_abb_le &
 [ STEM < "nj" >,
   SYNSEM [ LKEYS.KEYREL.CARG "newjersey",
            PHON.ONSET con ] ].

newly := adv_int_vp_le &
 [ STEM < "newly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_new_a_1_rel",
            PHON.ONSET con ] ].

newmexico_n1 := n_proper_le &
 [ STEM < "new", "mexico" >,
   SYNSEM [ LKEYS.KEYREL.CARG "newmexico",
            PHON.ONSET con ] ].

newmexico_n2 := n_proper_abb_le &
 [ STEM < "nm" >,
   SYNSEM [ LKEYS.KEYREL.CARG "newmexico",
            PHON.ONSET con ] ].

news_n1 := n_mass_le &
 [ STEM < "news" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_news_n_1_rel",
            PHON.ONSET con ] ].

newsletter_n1 := n_ppof_le &
 [ STEM < "newsletter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_newsletter_n_of_rel",
            PHON.ONSET con ] ].

newspaper_n1 := n_ppof_le &
 [ STEM < "newspaper" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_newspaper_n_of_rel",
            PHON.ONSET con ] ].

next_a1 := adj_intrans_le &
 [ STEM < "next" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_next_a_1_rel",
            PHON.ONSET con ] ].

next_adv1 := adv_int_vp_le &
 [ STEM < "next" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_next_a_1_rel",
            PHON.ONSET con ] ].

next_det := det_next_le &
 [ STEM < "next" >,
   SYNSEM [ LKEYS.ALTKEYREL.PRED "_next_a_1_rel",
            PHON.ONSET con ] ].

next_n1 := n_no_cmpnd_hd_le &
 [ STEM < "next" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_next_n_1_rel",
            PHON.ONSET con ] ].

next_to := p_le &
 [ STEM < "next", "to" >,
   SYNSEM [ LKEYS.KEYREL.PRED _next+to_p_rel,
            PHON.ONSET con ] ].

nfl_n1 := n_proper_le &
 [ STEM < "nfl" >,
   SYNSEM [ LKEYS.KEYREL.CARG "nfl",
            PHON.ONSET con ] ].

niagara_falls_n1 := n_proper_city_le &
 [ STEM < "niagara", "falls" >,
   SYNSEM [ LKEYS.KEYREL.CARG "niagara_falls",
            PHON.ONSET con ] ].

niagra_falls_n1 := n_proper_city_le &
 [ STEM < "niagra", "falls" >,
   SYNSEM [ LKEYS.KEYREL.CARG "niagra_falls",
            PHON.ONSET con ] ].

nicaragua_n1 := n_proper_le &
 [ STEM < "nicaragua" >,
   SYNSEM [ LKEYS.KEYREL.CARG "nicaragua",
            PHON.ONSET con ] ].

nicaraguan_a1 := adj_intrans_le &
 [ STEM < "nicaraguan" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nicaraguan_a_1_rel",
            PHON.ONSET con ] ].

nicaraguan_n1 := n_intr_le &
 [ STEM < "nicaraguan" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nicaraguan_n_1_rel",
            PHON.ONSET con ] ].

nice_a1 := adj_trans_le &
 [ STEM < "nice" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_nice_a_for_rel" ],
            PHON.ONSET con ] ].

nice_a2 := adj_reg_atrans_le &
 [ STEM < "nice" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nice_a_for_rel",
            PHON.ONSET con ] ].

nice_a3 := adj_reg_atrans_cp_le &
 [ STEM < "nice" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nice_a_for_rel",
            PHON.ONSET con ] ].

nicely_adv1 := adv_int_vp_le &
 [ STEM < "nicely" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nice_a_for_rel",
            PHON.ONSET con ] ].

nicer := adj_comp_le &
 [ STEM < "nicer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nice_a_for_rel",
            PHON.ONSET con ] ].

nicest_a1 := adj_superl_le &
 [ STEM < "nicest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nice_a_for_rel",
            PHON.ONSET con ] ].

nicety_n1 := n_intr_le &
 [ STEM < "nicety" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nicety_n_1_rel",
            PHON.ONSET con ] ].

nicholas_n1 := n_proper_le &
 [ STEM < "nicholas" >,
   SYNSEM [ LKEYS.KEYREL.CARG "nicholas",
            PHON.ONSET con ] ].

nick_n1 := n_proper_le &
 [ STEM < "nick" >,
   SYNSEM [ LKEYS.KEYREL.CARG "nick",
            PHON.ONSET con ] ].

nickel_n1 := n_mass_count_le &
 [ STEM < "nickel" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nickel_n_1_rel",
            PHON.ONSET con ] ].

nickel_n2 := n_proper_le &
 [ STEM < "nickel" >,
   SYNSEM [ LKEYS.KEYREL.CARG "nickel",
            PHON.ONSET con ] ].

nickname_n1 := n_intr_le &
 [ STEM < "nickname" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nickname_n_1_rel",
            PHON.ONSET con ] ].

nickname_v1 := v_np_trans_le &
 [ STEM < "nickname" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nickname_v_1_rel",
            PHON.ONSET con ] ].

nickname_v2 := v_ditrans_only_le &
 [ STEM < "nickname" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nickname_v_1_rel",
            PHON.ONSET con ] ].

nicolai_n1 := n_proper_le &
 [ STEM < "nicolai" >,
   SYNSEM [ LKEYS.KEYREL.CARG "nicolai",
            PHON.ONSET con ] ].

niece_n1 := n_intr_le &
 [ STEM < "niece" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_niece_n_1_rel",
            PHON.ONSET con ] ].

nielsen_n1 := n_proper_le &
 [ STEM < "nielsen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "nielsen",
            PHON.ONSET con ] ].

nigard := n_proper_le &
 [ STEM < "nigard" >,
   SYNSEM [ LKEYS.KEYREL.CARG "nigard",
            PHON.ONSET con ] ].

nigardsbreen := n_proper_le &
 [ STEM < "nigardsbreen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "nigardsbreen",
            PHON.ONSET con ] ].

nigh_a1 := adj_intrans_le &
 [ STEM < "nigh" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nigh_a_1_rel",
            PHON.ONSET con ] ].

nigh_adv1 := adv_int_vp_pre_le &
 [ STEM < "nigh" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nigh_a_1_rel",
            PHON.ONSET con ] ].

night_nc_n1 := n_day_part_nocomp_le &
 [ STEM < "night" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_night_n_of_rel",
            PHON.ONSET con ] ].

night_pl_def := n_def_day_part_pl_le &
 [ STEM < "nights" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_night_n_of_rel",
            PHON.ONSET con ] ].

night_pl_n1 := n_day_part_pl_le &
 [ STEM < "nights" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_night_n_of_rel",
            PHON.ONSET con ] ].

night_sg_def := n_def_day_part_sg_le &
 [ STEM < "night" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_night_n_of_rel",
            PHON.ONSET con ] ].

night_sg_n1 := n_day_part_sg_le &
 [ STEM < "night" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_night_n_of_rel",
            PHON.ONSET con ] ].

night_time := n_mealtime_le &
 [ STEM < "night" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_night_n_of_rel",
            PHON.ONSET con ] ].

night_title := n_title_le &
 [ STEM < "night" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_night_n_of_rel",
            PHON.ONSET con ] ].

nightcap_n1 := n_intr_le &
 [ STEM < "nightcap" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nightcap_n_1_rel",
            PHON.ONSET con ] ].

nightly_a1 := adj_intrans_le &
 [ STEM < "nightly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nightly_a_1_rel",
            PHON.ONSET con ] ].

nightly_adv := adv_int_vp_post_le &
 [ STEM < "nightly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nightly_a_1_rel",
            PHON.ONSET con ] ].

nighttime_n1 := n_mealtime_le &
 [ STEM < "nighttime" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nighttime_n_1_rel",
            PHON.ONSET con ] ].

nighttime_n2 := n_mass_count_le &
 [ STEM < "nighttime" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nighttime_n_1_rel",
            PHON.ONSET con ] ].

niigata_n1 := n_proper_le &
 [ STEM < "niigata" >,
   SYNSEM [ LKEYS.KEYREL.CARG "niigata",
            PHON.ONSET con ] ].

nikolaus_n1 := n_proper_le &
 [ STEM < "nikolaus" >,
   SYNSEM [ LKEYS.KEYREL.CARG "nikolaus",
            PHON.ONSET con ] ].

nikon_n1 := n_proper_le &
 [ STEM < "nikon" >,
   SYNSEM [ LKEYS.KEYREL.CARG "nikon",
            PHON.ONSET con ] ].

nil_n1 := n_generic_pro_le &
 [ STEM < "nil" >,
   SYNSEM [ LKEYS [ ALTKEYREL.PRED no_q_rel,
                    KEYREL.PRED thing_rel ],
            PHON.ONSET con ] ].

nile := n_intr_named_le &
 [ STEM < "nile" >,
   SYNSEM [ LKEYS.KEYREL.CARG "nile",
            PHON.ONSET con ] ].

nils_n1 := n_proper_le &
 [ STEM < "nils" >,
   SYNSEM [ LKEYS.KEYREL.CARG "nils",
            PHON.ONSET con ] ].

nilsestugu_n1 := n_proper_le &
 [ STEM < "nilsestugu" >,
   SYNSEM [ LKEYS.KEYREL.CARG "nilsestugu",
            PHON.ONSET con ] ].

nimble_a1 := adj_intrans_le &
 [ STEM < "nimble" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nimble_a_1_rel",
            PHON.ONSET con ] ].

nina_n1 := n_proper_le &
 [ STEM < "nina" >,
   SYNSEM [ LKEYS.KEYREL.CARG "nina",
            PHON.ONSET con ] ].

nine := adj_bare_unspecified_card_one_le &
 [ STEM < "nine" >,
   SYNSEM [ LKEYS.KEYREL.CARG "9",
            PHON.ONSET con ] ].

nine_c := adj_bare_unspecified_card_wcomps_one_le &
 [ STEM < "nine" >,
   SYNSEM [ LKEYS.KEYREL.CARG "9",
            PHON.ONSET con ] ].

nine_day := n_day_of_month_card_le &
 [ STEM < "nine" >,
   SYNSEM [ LKEYS.KEYREL.CARG "9",
            PHON.ONSET con ] ].

nine_day_num := n_day_of_month_card_le &
 [ STEM < "9" >,
   SYNSEM [ LKEYS.KEYREL.CARG "9",
            PHON.ONSET con ] ].

nine_day_num_yofc := n_day_of_month_card_yofc_le &
 [ STEM < "9" >,
   SYNSEM [ LKEYS.KEYREL.CARG "9",
            PHON.ONSET con ] ].

nine_day_yofc := n_day_of_month_card_yofc_le &
 [ STEM < "nine" >,
   SYNSEM [ LKEYS.KEYREL.CARG "9",
            PHON.ONSET con ] ].

nine_hour := n_hour_le &
 [ STEM < "nine" >,
   SYNSEM [ LKEYS.KEYREL.CARG "9",
            PHON.ONSET con ] ].

nine_hundreds_n1 := n_plur_xmod_le &
 [ STEM < "nine", "hundreds" >,
   SYNSEM [ LKEYS.KEYREL.CARG "900",
            PHON.ONSET con ] ].

nine_roman := adj_bare_unspecified_card_one_le &
 [ STEM < "IX" >,
   SYNSEM [ LKEYS.KEYREL.CARG "IX",
            PHON.ONSET con ] ].

ninedigitordersatz := adj_bare_unspecified_ord_nine_le &
 [ STEM < "ninedigitordersatz" >,
   SYNSEM [ LKEYS.KEYREL [ CARG "dig9ersatz",
                             PRED const_rel ],
            PHON.ONSET onset ] ].

nineish := n_approx_hour_le &
 [ STEM < "nineish" >,
   SYNSEM [ LKEYS.KEYREL.CARG "9",
            PHON.ONSET con ] ].

nineteen := adj_bare_unspecified_card_two_le &
 [ STEM < "nineteen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "19",
            PHON.ONSET con ] ].

nineteen_day := n_day_of_month_card_le &
 [ STEM < "nineteen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "19",
            PHON.ONSET con ] ].

nineteen_day_num := n_day_of_month_card_le &
 [ STEM < "19" >,
   SYNSEM [ LKEYS.KEYREL.CARG "19",
            PHON.ONSET con ] ].

nineteen_day_num_yofc := n_day_of_month_card_yofc_le &
 [ STEM < "19" >,
   SYNSEM [ LKEYS.KEYREL.CARG "19",
            PHON.ONSET con ] ].

nineteen_day_yofc := n_day_of_month_card_yofc_le &
 [ STEM < "nineteen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "19",
            PHON.ONSET con ] ].

nineteen_eightyeight := n_year_le &
 [ STEM < "nineteen", "eighty", "eight" >,
   SYNSEM [ LKEYS.KEYREL.CARG "1988",
            PHON.ONSET con ] ].

nineteen_eightyeight_2 := n_year_le &
 [ STEM < "1988" >,
   SYNSEM [ LKEYS.KEYREL.CARG "1988",
            PHON.ONSET con ] ].

nineteen_eightyfive := n_year_le &
 [ STEM < "nineteen", "eighty", "five" >,
   SYNSEM [ LKEYS.KEYREL.CARG "1985",
            PHON.ONSET con ] ].

nineteen_eightyfive_2 := n_year_le &
 [ STEM < "1985" >,
   SYNSEM [ LKEYS.KEYREL.CARG "1985",
            PHON.ONSET con ] ].

nineteen_eightyfour := n_year_le &
 [ STEM < "nineteen", "eighty", "four" >,
   SYNSEM [ LKEYS.KEYREL.CARG "1984",
            PHON.ONSET con ] ].

nineteen_eightyfour_2 := n_year_le &
 [ STEM < "1984" >,
   SYNSEM [ LKEYS.KEYREL.CARG "1984",
            PHON.ONSET con ] ].

nineteen_eightynine := n_year_le &
 [ STEM < "nineteen", "eighty", "nine" >,
   SYNSEM [ LKEYS.KEYREL.CARG "1989",
            PHON.ONSET con ] ].

nineteen_eightynine_2 := n_year_le &
 [ STEM < "1989" >,
   SYNSEM [ LKEYS.KEYREL.CARG "1989",
            PHON.ONSET con ] ].

nineteen_eightyseven := n_year_le &
 [ STEM < "nineteen", "eighty", "seven" >,
   SYNSEM [ LKEYS.KEYREL.CARG "1987",
            PHON.ONSET con ] ].

nineteen_eightyseven_2 := n_year_le &
 [ STEM < "1987" >,
   SYNSEM [ LKEYS.KEYREL.CARG "1987",
            PHON.ONSET con ] ].

nineteen_eightysix := n_year_le &
 [ STEM < "nineteen", "eighty", "six" >,
   SYNSEM [ LKEYS.KEYREL.CARG "1986",
            PHON.ONSET con ] ].

nineteen_eightysix_2 := n_year_le &
 [ STEM < "1986" >,
   SYNSEM [ LKEYS.KEYREL.CARG "1986",
            PHON.ONSET con ] ].

nineteen_fiftythree := n_year_le &
 [ STEM < "nineteen", "fifty", "three" >,
   SYNSEM [ LKEYS.KEYREL.CARG "1953",
            PHON.ONSET con ] ].

nineteen_fiftythree_2 := n_year_le &
 [ STEM < "1953" >,
   SYNSEM [ LKEYS.KEYREL.CARG "1953",
            PHON.ONSET con ] ].

nineteen_ninety := n_year_le &
 [ STEM < "nineteen", "ninety" >,
   SYNSEM [ LKEYS.KEYREL.CARG "1990",
            PHON.ONSET con ] ].

nineteen_ninety_2 := n_year_le &
 [ STEM < "1990" >,
   SYNSEM [ LKEYS.KEYREL.CARG "1990",
            PHON.ONSET con ] ].

nineteen_ninetyeight := n_year_le &
 [ STEM < "nineteen", "ninety", "eight" >,
   SYNSEM [ LKEYS.KEYREL.CARG "1998",
            PHON.ONSET con ] ].

nineteen_ninetyeight_2 := n_year_le &
 [ STEM < "1998" >,
   SYNSEM [ LKEYS.KEYREL.CARG "1998",
            PHON.ONSET con ] ].

nineteen_ninetyfive := n_year_le &
 [ STEM < "nineteen", "ninety", "five" >,
   SYNSEM [ LKEYS.KEYREL.CARG "1995",
            PHON.ONSET con ] ].

nineteen_ninetyfive_2 := n_year_le &
 [ STEM < "1995" >,
   SYNSEM [ LKEYS.KEYREL.CARG "1995",
            PHON.ONSET con ] ].

nineteen_ninetyfour := n_year_le &
 [ STEM < "nineteen", "ninety", "four" >,
   SYNSEM [ LKEYS.KEYREL.CARG "1994",
            PHON.ONSET con ] ].

nineteen_ninetyfour_2 := n_year_le &
 [ STEM < "1994" >,
   SYNSEM [ LKEYS.KEYREL.CARG "1994",
            PHON.ONSET con ] ].

nineteen_ninetynine := n_year_le &
 [ STEM < "nineteen", "ninety", "nine" >,
   SYNSEM [ LKEYS.KEYREL.CARG "1999",
            PHON.ONSET con ] ].

nineteen_ninetynine_2 := n_year_le &
 [ STEM < "1999" >,
   SYNSEM [ LKEYS.KEYREL.CARG "1999",
            PHON.ONSET con ] ].

nineteen_ninetyone := n_year_le &
 [ STEM < "nineteen", "ninety", "one" >,
   SYNSEM [ LKEYS.KEYREL.CARG "1991",
            PHON.ONSET con ] ].

nineteen_ninetyone_2 := n_year_le &
 [ STEM < "1991" >,
   SYNSEM [ LKEYS.KEYREL.CARG "1991",
            PHON.ONSET con ] ].

nineteen_ninetyseven := n_year_le &
 [ STEM < "nineteen", "ninety", "seven" >,
   SYNSEM [ LKEYS.KEYREL.CARG "1997",
            PHON.ONSET con ] ].

nineteen_ninetyseven_2 := n_year_le &
 [ STEM < "1997" >,
   SYNSEM [ LKEYS.KEYREL.CARG "1997",
            PHON.ONSET con ] ].

nineteen_ninetysix := n_year_le &
 [ STEM < "nineteen", "ninety", "six" >,
   SYNSEM [ LKEYS.KEYREL.CARG "1996",
            PHON.ONSET con ] ].

nineteen_ninetysix_2 := n_year_le &
 [ STEM < "1996" >,
   SYNSEM [ LKEYS.KEYREL.CARG "1996",
            PHON.ONSET con ] ].

nineteen_ninetythree := n_year_le &
 [ STEM < "nineteen", "ninety", "three" >,
   SYNSEM [ LKEYS.KEYREL.CARG "1993",
            PHON.ONSET con ] ].

nineteen_ninetythree_2 := n_year_le &
 [ STEM < "1993" >,
   SYNSEM [ LKEYS.KEYREL.CARG "1993",
            PHON.ONSET con ] ].

nineteen_ninetytwo := n_year_le &
 [ STEM < "nineteen", "ninety", "two" >,
   SYNSEM [ LKEYS.KEYREL.CARG "1992",
            PHON.ONSET con ] ].

nineteen_ninetytwo_2 := n_year_le &
 [ STEM < "1992" >,
   SYNSEM [ LKEYS.KEYREL.CARG "1992",
            PHON.ONSET con ] ].

nineteen_sixtyeight := n_year_le &
 [ STEM < "nineteen", "sixty", "eight" >,
   SYNSEM [ LKEYS.KEYREL.CARG "1968",
            PHON.ONSET con ] ].

nineteen_sixtyeight_2 := n_year_le &
 [ STEM < "1968" >,
   SYNSEM [ LKEYS.KEYREL.CARG "1968",
            PHON.ONSET con ] ].

nineteen_sixtysix := n_year_le &
 [ STEM < "nineteen", "sixty", "six" >,
   SYNSEM [ LKEYS.KEYREL.CARG "1966",
            PHON.ONSET con ] ].

nineteen_sixtysix_2 := n_year_le &
 [ STEM < "1966" >,
   SYNSEM [ LKEYS.KEYREL.CARG "1966",
            PHON.ONSET con ] ].

nineteen_twentynine := n_year_le &
 [ STEM < "nineteen", "twenty", "nine" >,
   SYNSEM [ LKEYS.KEYREL.CARG "1929",
            PHON.ONSET con ] ].

nineteen_twentynine_2 := n_year_le &
 [ STEM < "1929" >,
   SYNSEM [ LKEYS.KEYREL.CARG "1929",
            PHON.ONSET con ] ].

nineteenth := adj_bare_unspecified_ord_two_le &
 [ STEM < "nineteenth" >,
   SYNSEM [ LKEYS.KEYREL.CARG "19",
            PHON.ONSET con ] ].

nineteenth_day := n_day_of_month_le &
 [ STEM < "nineteenth" >,
   SYNSEM [ LKEYS.KEYREL.CARG "19",
            PHON.ONSET con ] ].

nineteenth_day_num := n_day_of_month_le &
 [ STEM < "19th" >,
   SYNSEM [ LKEYS.KEYREL.CARG "19",
            PHON.ONSET con ] ].

nineties_n1 := n_plur_xmod_le &
 [ STEM < "nineties" >,
   SYNSEM [ LKEYS.KEYREL.CARG "90",
            PHON.ONSET con ] ].

ninetieth := adj_bare_unspecified_ord_two_le &
 [ STEM < "ninetieth" >,
   SYNSEM [ LKEYS.KEYREL.CARG "90",
            PHON.ONSET con ] ].

ninety := adj_bare_unspecified_card_two_le &
 [ STEM < "ninety" >,
   SYNSEM [ LKEYS.KEYREL.CARG "90",
            PHON.ONSET con ] ].

ninety_w_comps := adj_complemented_unspecified_card_le &
 [ STEM < "ninety" >,
   SYNSEM [ LKEYS.KEYREL.CARG "90",
            PHON.ONSET con ] ].

ninetyeight_year := n_year_le &
 [ STEM < "ninety", "eight" >,
   SYNSEM [ LKEYS.KEYREL.CARG "1998",
            PHON.ONSET con ] ].

ninetyfive_year := n_year_le &
 [ STEM < "ninety", "five" >,
   SYNSEM [ LKEYS.KEYREL.CARG "1995",
            PHON.ONSET con ] ].

ninetyfour_year := n_year_le &
 [ STEM < "ninety", "four" >,
   SYNSEM [ LKEYS.KEYREL.CARG "1994",
            PHON.ONSET con ] ].

ninetyish_approx := adj_approx_bare_unspecified_card_le &
 [ STEM < "ninetyish" >,
   SYNSEM [ LKEYS.KEYREL.CARG "90",
            PHON.ONSET con ] ].

ninetynine_year := n_year_le &
 [ STEM < "ninety", "nine" >,
   SYNSEM [ LKEYS.KEYREL.CARG "1999",
            PHON.ONSET con ] ].

ninetyseven_year := n_year_le &
 [ STEM < "ninety", "seven" >,
   SYNSEM [ LKEYS.KEYREL.CARG "1997",
            PHON.ONSET con ] ].

ninetysix_year := n_year_le &
 [ STEM < "ninety", "six" >,
   SYNSEM [ LKEYS.KEYREL.CARG "1996",
            PHON.ONSET con ] ].

ninetythree_year := n_year_le &
 [ STEM < "ninety", "three" >,
   SYNSEM [ LKEYS.KEYREL.CARG "1993",
            PHON.ONSET con ] ].

ninth := adj_bare_unspecified_ord_one_le &
 [ STEM < "ninth" >,
   SYNSEM [ LKEYS.KEYREL.CARG "9",
            PHON.ONSET con ] ].

ninth_day := n_day_of_month_le &
 [ STEM < "ninth" >,
   SYNSEM [ LKEYS.KEYREL.CARG "9",
            PHON.ONSET con ] ].

ninth_day_num := n_day_of_month_le &
 [ STEM < "9th" >,
   SYNSEM [ LKEYS.KEYREL.CARG "9",
            PHON.ONSET con ] ].

nist_n1 := n_proper_le &
 [ STEM < "nist" >,
   SYNSEM [ LKEYS.KEYREL.CARG "nist",
            PHON.ONSET con ] ].

nitrogen_n1 := n_mass_count_le &
 [ STEM < "nitrogen" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nitrogen_n_1_rel",
            PHON.ONSET con ] ].

nix_v1 := v_np*_trans_le &
 [ STEM < "nix" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nix_v_1_rel",
            PHON.ONSET con ] ].

nixon_n1 := n_proper_le &
 [ STEM < "nixon" >,
   SYNSEM [ LKEYS.KEYREL.CARG "nixon",
            PHON.ONSET con ] ].

no_det := det_no_le &
 [ STEM < "no" >,
   SYNSEM [ LKEYS.KEYREL.PRED _no_q_rel,
            PHON.ONSET con ] ].

no_disc_root := adv_s_pre_word_root_le &
 [ STEM < "no" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_no_a_1_rel",
            PHON.ONSET con ] ].

no_doubt_adv1 := adv_vp_aux_le &
 [ STEM < "no", "doubt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_no+doubt_a_1_rel",
            PHON.ONSET con ] ].

no_doubt_adv2 := adv_s_pre_le &
 [ STEM < "no", "doubt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_no+doubt_a_1_rel",
            PHON.ONSET con ] ].

no_eq_nc_deg := adv_degree_spec_m_le &
 [ STEM < "no" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_no_x_deg_rel",
            PHON.ONSET con ] ].

no_go_n1 := n_intr_le &
 [ STEM < "no", "go" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_no+go_n_1_rel",
            PHON.ONSET con ] ].

no_good_a1 := adj_intrans_le &
 [ STEM < "no", "good" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_no+good_a_1_rel",
            PHON.ONSET con ] ].

no_isect_dash := adj_attr_nospec_le &
 [ STEM < "no-" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_no_a_1_rel",
            PHON.ONSET con ] ].

no_less_adv1 := adv_int_vp_post_le &
 [ STEM < "no", "less" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_no+less_a_1_rel",
            PHON.ONSET con ] ].

no_less_than_deg := adv_degree_spec_le &
 [ STEM < "no", "less", "than" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_no+less+than_x_rel",
            PHON.ONSET con ] ].

no_longer := adv_int_vp_aux_le &
 [ STEM < "no", "longer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_no+longer_a_1_rel",
            PHON.ONSET con ] ].

no_matter_adv := adv_s_pre_word_root_le &
 [ STEM < "no", "matter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_no+matter_a_1_rel",
            PHON.ONSET con ] ].

no_matter_p := p_le &
 [ STEM < "no", "matter" >,
   SYNSEM [ LKEYS.KEYREL.PRED _no+matter_p_rel,
            PHON.ONSET con ] ].

no_matter_what_adv1 := adv_int_vp_post_le &
 [ STEM < "no", "matter", "what" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_no+matter+what_a_1_rel",
            PHON.ONSET con ] ].

no_more_adv1 := adv_int_vp_post_le &
 [ STEM < "no", "more" >,
   SYNSEM [ LKEYS.KEYREL.PRED _nomore_a_1_rel,
            PHON.ONSET con ] ].

no_more_det := det_part_pl_mass_le &
 [ STEM < "no", "more" >,
   SYNSEM [ LKEYS.KEYREL.PRED _no+more_q_rel,
            PHON.ONSET con ] ].

no_more_than := adv_degree_spec_le &
 [ STEM < "no", "more", "than" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_no+more+than_x_rel",
            PHON.ONSET con ] ].

no_one := n_generic_pro_le &
 [ STEM < "no", "one" >,
   SYNSEM [ LKEYS [ ALTKEYREL.PRED _no_q_rel,
                    KEYREL.PRED person_rel ],
            PHON.ONSET con ] ].

no_root_post := adv_s_post_word_nospec_le &
 [ STEM < "no" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_no_a_1_rel",
            PHON.ONSET con ] ].

no_wonder_root_pre := adv_s_pre_word_root_le &
 [ STEM < "no", "wonder" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_no+wonder_a_1_rel",
            PHON.ONSET con ] ].

noah_n1 := n_proper_le &
 [ STEM < "noah" >,
   SYNSEM [ LKEYS.KEYREL.CARG "noah",
            PHON.ONSET con ] ].

nobel_n1 := n_proper_le &
 [ STEM < "nobel" >,
   SYNSEM [ LKEYS.KEYREL.CARG "nobel",
            PHON.ONSET con ] ].

noble_a1 := adj_intrans_le &
 [ STEM < "noble" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_noble_a_1_rel",
            PHON.ONSET con ] ].

nobleness_n1 := n_mass_le &
 [ STEM < "nobleness" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nobleness_n_1_rel",
            PHON.ONSET con ] ].

nobody := n_generic_pro_le &
 [ STEM < "nobody" >,
   SYNSEM [ LKEYS [ ALTKEYREL.PRED no_q_rel,
                    KEYREL.PRED person_rel ],
            PHON.ONSET con ] ].

nocturnal_a1 := adj_intrans_le &
 [ STEM < "nocturnal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nocturnal_a_1_rel",
            PHON.ONSET con ] ].

nod_n1 := n_intr_le &
 [ STEM < "nod" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nod_n_1_rel",
            PHON.ONSET con ] ].

nod_off_v1 := v_particle_np_le &
 [ STEM < "nod" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_nod_v_off_rel" ],
            PHON.ONSET con ] ].

nod_v1 := v_np*_trans_le &
 [ STEM < "nod" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nod_v_1_rel",
            PHON.ONSET con ] ].

nodal_a1 := adj_intrans_le &
 [ STEM < "nodal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nodal_a_1_rel",
            PHON.ONSET con ] ].

noddingly_adv := adv_int_vp_le &
 [ STEM < "noddingly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nodding_a_1_rel",
            PHON.ONSET con ] ].

node_n1 := n_intr_le &
 [ STEM < "node" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_node_n_1_rel",
            PHON.ONSET con ] ].

noehre := n_intr_named_le &
 [ STEM < "noehre" >,
   SYNSEM [ LKEYS.KEYREL.CARG "noehre",
            PHON.ONSET con ] ].

noehre_hanover := n_intr_named_le &
 [ STEM < "noehre", "hanover" >,
   SYNSEM [ LKEYS.KEYREL.CARG "noehre_hanover",
            PHON.ONSET con ] ].

noehre_hof := n_intr_named_le &
 [ STEM < "noehre", "hof" >,
   SYNSEM [ LKEYS.KEYREL.CARG "noehre_hof",
            PHON.ONSET con ] ].

noehre_hof_2 := n_intr_named_le &
 [ STEM < "noehre-", "hof" >,
   SYNSEM [ LKEYS.KEYREL.CARG "noehre_hof",
            PHON.ONSET con ] ].

noes_n1 := n_plur_nocmpnd_le &
 [ STEM < "noes" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_no_n_1_rel",
            PHON.ONSET con ] ].

noise_n1 := n_mass_count_le &
 [ STEM < "noise" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_noise_n_1_rel",
            PHON.ONSET con ] ].

noisily := adv_int_vp_le &
 [ STEM < "noisily" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_noisy_a_1_rel",
            PHON.ONSET con ] ].

noisy_a1 := adj_intrans_le &
 [ STEM < "noisy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_noisy_a_1_rel",
            PHON.ONSET con ] ].

nok_n1 := n_plur_nocmpnd_le &
 [ STEM < "nok" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nok_n_1_rel",
            PHON.ONSET con ] ].

nok_sign_n1 := n_numcomp_le &
 [ STEM < "nok" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nok_n_1_rel",
            PHON.ONSET con ] ].

nokia_n1 := n_proper_le &
 [ STEM < "nokia" >,
   SYNSEM [ LKEYS.KEYREL.CARG "nokia",
            PHON.ONSET con ] ].

nominate_v1 := v_np_trans_le &
 [ STEM < "nominate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nominate_v_1_rel",
            PHON.ONSET con ] ].

nominative_a1 := adj_intrans_le &
 [ STEM < "nominative" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nominative_a_1_rel",
            PHON.ONSET con ] ].

nominative_n1 := n_intr_le &
 [ STEM < "nominative" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nominative_n_1_rel",
            PHON.ONSET con ] ].

nominee_n1 := n_intr_le &
 [ STEM < "nominee" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nominee_n_1_rel",
            PHON.ONSET con ] ].

non-smoking_n1 := n_intr_le &
 [ STEM < "nonsmoking" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_non+smoking_n_1_rel",
            PHON.ONSET con ] ].

non_a1 := adj_attr_nospec_le &
 [ STEM < "non" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_non_a_1_rel",
            PHON.ONSET con ] ].

non_approved_isect2 := adj_intrans_le &
 [ STEM < "non-", "approved" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_non+approved_a_1_rel",
            PHON.ONSET con ] ].

non_approved_isect3 := adj_intrans_le &
 [ STEM < "non", "approved" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_non+approved_a_1_rel",
            PHON.ONSET con ] ].

non_local_a1 := adj_intrans_le &
 [ STEM < "non", "local" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_non+local_a_1_rel",
            PHON.ONSET con ] ].

non_local_n1 := n_intr_le &
 [ STEM < "non", "local" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_non+local_n_1_rel",
            PHON.ONSET con ] ].

non_service_n1 := n_mass_le &
 [ STEM < "non", "service" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_non+service_n_1_rel",
            PHON.ONSET con ] ].

non_service_n2 := n_mass_le &
 [ STEM < "non-", "service" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_non+service_n_1_rel",
            PHON.ONSET con ] ].

non_smoker_n1 := n_intr_le &
 [ STEM < "non_smoker" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_non+smoker_n_1_rel",
            PHON.ONSET con ] ].

noncapital_a1 := adj_intrans_le &
 [ STEM < "noncapital" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_noncapital_a_1_rel",
            PHON.ONSET con ] ].

nonchalantly_adv1 := adv_int_vp_le &
 [ STEM < "nonchalantly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nonchalant_a_1_rel",
            PHON.ONSET con ] ].

nondeliverable_a1 := adj_intrans_le &
 [ STEM < "nondeliverable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nondeliverable_a_1_rel",
            PHON.ONSET con ] ].

nondelivery_n1 := n_mass_count_ppof_le &
 [ STEM < "nondelivery" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nondelivery_n_of_rel",
            PHON.ONSET con ] ].

none_pn1 := n_part_ppof_noagr_le &
 [ STEM < "none" >,
   SYNSEM [ LKEYS.ALTKEYREL.PRED no_q_rel,
            PHON.ONSET con ] ].

none_pn2 := n_part_nocomp_le &
 [ STEM < "none" >,
   SYNSEM [ LKEYS.ALTKEYREL.PRED no_q_rel,
            PHON.ONSET con ] ].

nonentity_n1 := n_intr_le &
 [ STEM < "nonentity" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nonentity_n_1_rel",
            PHON.ONSET con ] ].

nonessential_a1 := adj_intrans_le &
 [ STEM < "nonessential" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_non+essential_a_1_rel",
            PHON.ONSET con ] ].

nonessential_a2 := adj_intrans_le &
 [ STEM < "non-", "essential" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_non+essential_a_1_rel",
            PHON.ONSET con ] ].

nonessential_n1 := n_intr_le &
 [ STEM < "nonessential" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nonessential_n_1_rel",
            PHON.ONSET con ] ].

nonessential_n2 := n_intr_le &
 [ STEM < "non-", "essential" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nonessential_n_1_rel",
            PHON.ONSET con ] ].

nonesuch_n1 := n_intr_le &
 [ STEM < "nonesuch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nonesuch_n_1_rel",
            PHON.ONSET con ] ].

nonetheless_adv1 := adv_vp_aux_le &
 [ STEM < "nonetheless" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nonetheless_a_1_rel",
            PHON.ONSET con ] ].

nonetheless_adv2 := adv_s_pre_le &
 [ STEM < "nonetheless" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nonetheless_a_1_rel",
            PHON.ONSET con ] ].

nonexistent_a1 := adj_intrans_le &
 [ STEM < "nonexistent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nonexistent_a_1_rel",
            PHON.ONSET con ] ].

nongerman_isect := adj_intrans_le &
 [ STEM < "non", "german" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_non+german_a_1_rel",
            PHON.ONSET con ] ].

nonmetal_a1 := adj_intrans_le &
 [ STEM < "nonmetal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nonmetal_a_1_rel",
            PHON.ONSET con ] ].

nonmetal_n1 := n_intr_le &
 [ STEM < "nonmetal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nonmetal_n_1_rel",
            PHON.ONSET con ] ].

nonpareil_a1 := adj_intrans_le &
 [ STEM < "nonpareil" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nonpareil_a_1_rel",
            PHON.ONSET con ] ].

nonrefundable_a1 := adj_intrans_le &
 [ STEM < "nonrefundable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nonrefundable_a_1_rel",
            PHON.ONSET con ] ].

nonrefundable_a2 := adj_intrans_le &
 [ STEM < "non-", "refundable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nonrefundable_a_1_rel",
            PHON.ONSET con ] ].

nonrefundable_a3 := adj_intrans_le &
 [ STEM < "non", "refundable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nonrefundable_a_1_rel",
            PHON.ONSET con ] ].

nonrefundably := adv_int_vp_le &
 [ STEM < "nonrefundably" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nonrefundable_a_1_rel",
            PHON.ONSET con ] ].

nonsense_n1 := n_mass_le &
 [ STEM < "nonsense" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nonsense_n_1_rel",
            PHON.ONSET con ] ].

nonsmoking_isect := adj_intrans_le &
 [ STEM < "non", "smoking" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_non+smoking_a_1_rel",
            PHON.ONSET con ] ].

nonstop_a2 := adj_intrans_le &
 [ STEM < "non-", "stop" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nonstop_a_1_rel",
            PHON.ONSET con ] ].

nonstop_adj := adj_intrans_le &
 [ STEM < "nonstop" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nonstop_a_1_rel",
            PHON.ONSET con ] ].

nook_n1 := n_intr_le &
 [ STEM < "nook" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nook_n_1_rel",
            PHON.ONSET con ] ].

noon := n_hour_le &
 [ STEM < "noon" >,
   SYNSEM [ LKEYS.KEYREL.CARG "12",
            PHON.ONSET con ] ].

noon_min := xp_am_pm_le &
 [ STEM < "noon" >,
   SYNSEM [ LKEYS.KEYREL [ CARG "pm_time",
                             PRED "_pm_x_rel" ],
            PHON.ONSET con ] ].

noon_n1 := n_intr_le &
 [ STEM < "noon" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_noon_n_1_rel",
            PHON.ONSET con ] ].

noon_nc_n1 := n_day_part_nocomp_le &
 [ STEM < "noon" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_noon_n_1_rel",
            PHON.ONSET con ] ].

noonish := n_approx_hour_le &
 [ STEM < "noonish" >,
   SYNSEM [ LKEYS.KEYREL.CARG "12",
            PHON.ONSET con ] ].

noontime := n_hour_le &
 [ STEM < "noontime" >,
   SYNSEM [ LKEYS.KEYREL.CARG "12",
            PHON.ONSET con ] ].

nope_disc_root_post := adv_s_post_word_nospec_le &
 [ STEM < "nope" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nope_a_1_rel",
            PHON.ONSET con ] ].

nope_disc_root_pre := adv_s_pre_word_root_le &
 [ STEM < "nope" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nope_a_1_rel",
            PHON.ONSET con ] ].

nor-way_bussekspress := n_proper_le &
 [ STEM < "nor-", "way", "bussekspress" >,
   SYNSEM [ LKEYS.KEYREL.CARG "norway_bussekspress",
            PHON.ONSET con ] ].

nor_conj := conj_complex_nor_le &
 [ STEM < "nor" >,
   SYNSEM.PHON.ONSET con ].

nor_conj_2 := conj_complex_nor_neither_le &
 [ STEM < "nor" >,
   SYNSEM.PHON.ONSET con ].

nord_fron_n1 := n_proper_le &
 [ STEM < "nord", "fron" >,
   SYNSEM [ LKEYS.KEYREL.CARG "nord+fron",
            PHON.ONSET con ] ].

nordfjord := n_proper_le &
 [ STEM < "nordfjord" >,
   SYNSEM [ LKEYS.KEYREL.CARG "nordfjord",
            PHON.ONSET con ] ].

nordkalottleden := n_proper_le &
 [ STEM < "nordkalottleden" >,
   SYNSEM [ LKEYS.KEYREL.CARG "nordkalottleden",
            PHON.ONSET con ] ].

nordstedalseter_n1 := n_proper_le &
 [ STEM < "nordstedalseter" >,
   SYNSEM [ LKEYS.KEYREL.CARG "nordstedalseter",
            PHON.ONSET con ] ].

nordtorp_n1 := n_proper_le &
 [ STEM < "nordtorp" >,
   SYNSEM [ LKEYS.KEYREL.CARG "nordtorp",
            PHON.ONSET con ] ].

norge := n_proper_le &
 [ STEM < "norge" >,
   SYNSEM [ LKEYS.KEYREL.CARG "norge",
            PHON.ONSET con ] ].

noriega_n1 := n_proper_le &
 [ STEM < "noriega" >,
   SYNSEM [ LKEYS.KEYREL.CARG "noriega",
            PHON.ONSET con ] ].

norlandia_n1 := n_proper_le &
 [ STEM < "norlandia" >,
   SYNSEM [ LKEYS.KEYREL.CARG "norlandia",
            PHON.ONSET con ] ].

normal_a1 := adj_intrans_le &
 [ STEM < "normal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_normal_a_1_rel",
            PHON.ONSET con ] ].

normally_adv1 := adv_int_vp_aux_le &
 [ STEM < "normally" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_normal_a_1_rel",
            PHON.ONSET con ] ].

normally_mdeg := adv_degree_spec_m_le &
 [ STEM < "normally" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_normally_x_mdeg_rel",
            PHON.ONSET con ] ].

normally_vdeg := adv_degree_spec_v_le &
 [ STEM < "normally" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_normally_x_vdeg_rel",
            PHON.ONSET con ] ].

norsk := n_proper_le &
 [ STEM < "norsk" >,
   SYNSEM [ LKEYS.KEYREL.CARG "norsk",
            PHON.ONSET con ] ].

norske := n_proper_le &
 [ STEM < "norske" >,
   SYNSEM [ LKEYS.KEYREL.CARG "norske",
            PHON.ONSET con ] ].

north_a1 := adj_attr_intrans_le &
 [ STEM < "north" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_north_a_1_rel",
            PHON.ONSET con ] ].

north_america_n1 := n_proper_le &
 [ STEM < "north", "america" >,
   SYNSEM [ LKEYS.KEYREL.CARG "north_america",
            PHON.ONSET con ] ].

north_cape_n1 := n_proper_le &
 [ STEM < "north", "cape" >,
   SYNSEM [ LKEYS.KEYREL.CARG "north_cape",
            PHON.ONSET con ] ].

north_face_n1 := n_proper_le &
 [ STEM < "north", "face" >,
   SYNSEM [ LKEYS.KEYREL.CARG "north_face",
            PHON.ONSET con ] ].

north_german_a1 := adj_intrans_le &
 [ STEM < "north", "german" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_north+german_a_1_rel",
            PHON.ONSET con ] ].

north_n1 := n_no_cmpnd_hd_le &
 [ STEM < "north" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_north_n_1_rel",
            PHON.ONSET con ] ].

north_n2 := n_adv_dir_le &
 [ STEM < "north" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED _north_a_1_rel,
                    KEYREL.PRED place_n_rel ],
            PHON.ONSET con ] ].

north_pole_n1 := n_intr_named_le &
 [ STEM < "north", "pole" >,
   SYNSEM [ LKEYS.KEYREL.CARG "north_pole",
            PHON.ONSET con ] ].

northbound_a1 := adj_intrans_le &
 [ STEM < "northbound" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_northbound_a_1_rel",
            PHON.ONSET con ] ].

northcarolina_n1 := n_proper_le &
 [ STEM < "north", "carolina" >,
   SYNSEM [ LKEYS.KEYREL.CARG "northcarolina",
            PHON.ONSET con ] ].

northcarolina_n2 := n_proper_abb_le &
 [ STEM < "nc" >,
   SYNSEM [ LKEYS.KEYREL.CARG "northcarolina",
            PHON.ONSET con ] ].

northcentral_isect := adj_intrans_le &
 [ STEM < "northcentral" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_northcentral_a_1_rel",
            PHON.ONSET con ] ].

northdakota_n1 := n_proper_le &
 [ STEM < "north", "dakota" >,
   SYNSEM [ LKEYS.KEYREL.CARG "northdakota",
            PHON.ONSET con ] ].

northdakota_n2 := n_proper_abb_le &
 [ STEM < "nd" >,
   SYNSEM [ LKEYS.KEYREL.CARG "northdakota",
            PHON.ONSET con ] ].

northeast_adj2 := adj_attr_intrans_le &
 [ STEM < "north-", "east" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_northeast_a_1_rel",
            PHON.ONSET con ] ].

northeast_isect := adj_attr_intrans_le &
 [ STEM < "northeast" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_northeast_a_1_rel",
            PHON.ONSET con ] ].

northeast_n1 := n_ppof_nocmpnd_le &
 [ STEM < "northeast" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_northeast_n_of_rel",
            PHON.ONSET con ] ].

northeast_n2 := n_ppof_nocmpnd_le &
 [ STEM < "north", "east" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_northeast_n_of_rel",
            PHON.ONSET con ] ].

northeast_n3 := n_adv_dir_le &
 [ STEM < "northeast" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED _northeast_a_1_rel,
                    KEYREL.PRED place_n_rel ],
            PHON.ONSET con ] ].

northeast_n4 := n_no_cmpnd_hd_le &
 [ STEM < "north-", "east" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_northeast_n_1_rel",
            PHON.ONSET con ] ].

northeast_n5 := n_adv_dir_le &
 [ STEM < "north-", "east" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED _northeast_a_1_rel,
                    KEYREL.PRED place_n_rel ],
            PHON.ONSET con ] ].

northeasterly_a1 := adj_intrans_le &
 [ STEM < "northeasterly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_northeasterly_a_1_rel",
            PHON.ONSET con ] ].

northeastern_a1 := adj_intrans_le &
 [ STEM < "northeastern" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_northeastern_a_1_rel",
            PHON.ONSET con ] ].

northeastward_a1 := adj_intrans_le &
 [ STEM < "northeastward" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_northeastward_a_1_rel",
            PHON.ONSET con ] ].

northeastward_n1 := n_adv_event_le &
 [ STEM < "northeastward" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED _northeastward_a_1_rel,
                    KEYREL.PRED place_n_rel ],
            PHON.ONSET con ] ].

northeastwards_n1 := n_adv_event_le &
 [ STEM < "northeastwards" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED _northeastward_a_1_rel,
                    KEYREL.PRED place_n_rel ],
            PHON.ONSET con ] ].

northerly_a1 := adj_intrans_le &
 [ STEM < "northerly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_northerly_a_1_rel",
            PHON.ONSET con ] ].

northern_a1 := adj_intrans_le &
 [ STEM < "northern" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_northern_a_1_rel",
            PHON.ONSET con ] ].

northernmost_a1 := adj_intrans_le &
 [ STEM < "northernmost" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_northernmost_a_1_rel",
            PHON.ONSET con ] ].

northkorea_n1 := n_proper_le &
 [ STEM < "north", "korea" >,
   SYNSEM [ LKEYS.KEYREL.CARG "north_korea",
            PHON.ONSET con ] ].

northkorean_a1 := adj_intrans_le &
 [ STEM < "north", "korean" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_north+korean_a_1_rel",
            PHON.ONSET con ] ].

northkorean_n1 := n_proper_le &
 [ STEM < "north", "korean" >,
   SYNSEM [ LKEYS.KEYREL.CARG "north_korean",
            PHON.ONSET con ] ].

northkorean_n2 := n_intr_le &
 [ STEM < "north", "korean" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_north+korean_n_1_rel",
            PHON.ONSET con ] ].

northumberland_n1 := n_proper_city_le &
 [ STEM < "northumberland" >,
   SYNSEM [ LKEYS.KEYREL.CARG "northumberland",
            PHON.ONSET con ] ].

northward_a1 := adj_intrans_le &
 [ STEM < "northward" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_northward_a_1_rel",
            PHON.ONSET con ] ].

northward_n1 := n_adv_event_le &
 [ STEM < "northward" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED _northward_a_1_rel,
                    KEYREL.PRED place_n_rel ],
            PHON.ONSET con ] ].

northwards_n1 := n_adv_event_le &
 [ STEM < "northwards" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED _northward_a_1_rel,
                    KEYREL.PRED place_n_rel ],
            PHON.ONSET con ] ].

northwest_adj2 := adj_attr_intrans_le &
 [ STEM < "north-", "west" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_northwest_a_1_rel",
            PHON.ONSET con ] ].

northwest_isect := adj_attr_intrans_le &
 [ STEM < "northwest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_northwest_a_1_rel",
            PHON.ONSET con ] ].

northwest_n1 := n_no_cmpnd_hd_le &
 [ STEM < "northwest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_northwest_n_1_rel",
            PHON.ONSET con ] ].

northwest_n2 := n_adv_dir_le &
 [ STEM < "northwest" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED _northwest_a_1_rel,
                    KEYREL.PRED place_n_rel ],
            PHON.ONSET con ] ].

northwest_n3 := n_ppof_nocmpnd_le &
 [ STEM < "north", "west" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_northwest_n_of_rel",
            PHON.ONSET con ] ].

northwest_n4 := n_ppof_nocmpnd_le &
 [ STEM < "north-", "west" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_northwest_n_of_rel",
            PHON.ONSET con ] ].

northwest_n5 := n_adv_dir_le &
 [ STEM < "north-", "west" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED _northwest_a_1_rel,
                    KEYREL.PRED place_n_rel ],
            PHON.ONSET con ] ].

northwesterly_a1 := adj_intrans_le &
 [ STEM < "northwesterly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_northwesterly_a_1_rel",
            PHON.ONSET con ] ].

northwestern_a1 := adj_intrans_le &
 [ STEM < "northwestern" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_northwestern_a_1_rel",
            PHON.ONSET con ] ].

northwestward_a1 := adj_intrans_le &
 [ STEM < "northwestward" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_northwestward_a_1_rel",
            PHON.ONSET con ] ].

northwestward_n1 := n_adv_event_le &
 [ STEM < "northwestward" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED _northwestward_a_1_rel,
                    KEYREL.PRED place_n_rel ],
            PHON.ONSET con ] ].

northwestwards_n1 := n_adv_event_le &
 [ STEM < "northwestwards" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED _northwestward_a_1_rel,
                    KEYREL.PRED place_n_rel ],
            PHON.ONSET con ] ].

norton_n1 := n_proper_le &
 [ STEM < "norton" >,
   SYNSEM [ LKEYS.KEYREL.CARG "norton",
            PHON.ONSET con ] ].

nortrabooks := n_proper_le &
 [ STEM < "nortrabooks" >,
   SYNSEM [ LKEYS.KEYREL.CARG "nortrabooks",
            PHON.ONSET con ] ].

norway_n1 := n_proper_le &
 [ STEM < "norway" >,
   SYNSEM [ LKEYS.KEYREL.CARG "norway",
            PHON.ONSET con ] ].

norwegian_a1 := adj_intrans_le &
 [ STEM < "norwegian" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_norwegian_a_1_rel",
            PHON.ONSET con ] ].

norwegian_mountains_on_foot_n1 := n_proper_le &
 [ STEM < "norwegian", "mountains", "on", "foot" >,
   SYNSEM [ LKEYS.KEYREL.CARG "norwegian+mountains+on+foot",
            PHON.ONSET con ] ].

norwegian_n1 := n_proper_sg_le &
 [ STEM < "norwegian" >,
   SYNSEM [ LKEYS.KEYREL.CARG "norwegian",
            PHON.ONSET con ] ].

norwegian_n2 := n_no_cmpnd_le &
 [ STEM < "norwegian" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_norwegian_n_1_rel",
            PHON.ONSET con ] ].

norwegian_state_railways := n_proper_sg_le &
 [ STEM < "norwegian", "state", "railways" >,
   SYNSEM [ LKEYS.KEYREL.CARG "norwegian_state_railways",
            PHON.ONSET con ] ].

norwegian_style_a1 := adj_intrans_le &
 [ STEM < "norwegian-", "style" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_norwegian+style_a_1_rel",
            PHON.ONSET con ] ].

norwegian_style_adv := adv_int_vp_post_le &
 [ STEM < "norwegian-", "style" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_norwegian+style_a_1_rel",
            PHON.ONSET con ] ].

nose_n1 := n_intr_le &
 [ STEM < "nose" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nose_n_1_rel",
            PHON.ONSET con ] ].

nosi := n_proper_le &
 [ STEM < "nosi" >,
   SYNSEM [ LKEYS.KEYREL.CARG "nosi",
            PHON.ONSET con ] ].

nostradamus_n1 := n_proper_le &
 [ STEM < "nostradamus" >,
   SYNSEM [ LKEYS.KEYREL.CARG "nostradamus",
            PHON.ONSET con ] ].

nostril_n1 := n_intr_le &
 [ STEM < "nostril" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nostril_n_1_rel",
            PHON.ONSET con ] ].

not := adv_not_le &
 [ STEM < "not" >,
   SYNSEM [ LKEYS.KEYREL.PRED neg_rel,
            PHON.ONSET con ] ].

not_always := adv_not_le &
 [ STEM < "not", "always" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_not+always_a_rel",
            PHON.ONSET con ] ].

not_as_yet_adv1 := adv_vp_pre_le &
 [ STEM < "not", "as", "yet" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_not+as+yet_a_1_rel",
            PHON.ONSET con ] ].

not_conj := conj_complex_not_le &
 [ STEM < "not" >,
   SYNSEM.PHON.ONSET con ].

not_deg := adv_degree_spec_det_only_le &
 [ STEM < "not" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_not_x_deg_rel",
            PHON.ONSET con ] ].

not_least_deg := adv_degree_spec_jo_le &
 [ STEM < "not", "least" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_not+least_x_deg_rel",
            PHON.ONSET con ] ].

not_prdp := adv_neg_prdp_le &
 [ STEM < "not" >,
   SYNSEM [ LKEYS.KEYREL.PRED neg_rel,
            PHON.ONSET con ] ].

not_quite := adv_not_le &
 [ STEM < "not", "quite" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_not+quite_a_rel",
            PHON.ONSET con ] ].

not_quite_deg := adv_degree_spec_jov_le &
 [ STEM < "not", "quite" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_not+quite_x_rel",
            PHON.ONSET con ] ].

not_really_root_pre := adv_disc_preh_le &
 [ STEM < "not", "really" >,
   SYNSEM [ LKEYS.KEYREL.CARG "not+really",
            PHON.ONSET con ] ].

not_so_many_det := det_part_pl_many_le &
 [ STEM < "not", "so", "many" >,
   SYNSEM [ LKEYS.ALTKEYREL.PRED "_not+so+many_a_1_rel",
            PHON.ONSET con ] ].

not_that_sc := p_subconj_le &
 [ STEM < "not", "that" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_not+that_x_rel",
            PHON.ONSET con ] ].

not_the_least_deg := adv_degree_spec_jo_le &
 [ STEM < "not", "the", "least" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_not+the+least_x_deg_rel",
            PHON.ONSET con ] ].

not_to_mention_conj_1 := conj_complex_not_to_mention_le &
 [ STEM < "not", "to", "mention" >,
   SYNSEM.PHON.ONSET con ].

not_yet_adv1 := adv_not_le &
 [ STEM < "not", "yet" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_not+yet_a_1_rel",
            PHON.ONSET con ] ].

notable_a1 := adj_intrans_le &
 [ STEM < "notable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_notable_a_1_rel",
            PHON.ONSET con ] ].

notable_n1 := n_intr_le &
 [ STEM < "notable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_notable_n_1_rel",
            PHON.ONSET con ] ].

notate_v1 := v_np_trans_le &
 [ STEM < "notate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_notate_v_1_rel",
            PHON.ONSET con ] ].

notation_n1 := n_mass_count_le &
 [ STEM < "notation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_notation_n_1_rel",
            PHON.ONSET con ] ].

notch_n1 := n_intr_le &
 [ STEM < "notch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_notch_n_1_rel",
            PHON.ONSET con ] ].

note_down_v1 := v_particle_np_le &
 [ STEM < "note" >,
   SYNSEM [ LKEYS [ --COMPKEY _down_p_sel_rel,
                    KEYREL.PRED "_note_v_down_rel" ],
            PHON.ONSET con ] ].

note_n1 := n_intr_le &
 [ STEM < "note" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_note_n_1_rel",
            PHON.ONSET con ] ].

note_n1_i := n_intr_nospr_le &
 [ STEM < "note" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_note_n_1_rel",
            PHON.ONSET con ] ].

note_v1 := v_np*_trans_le &
 [ STEM < "note" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_note_v_1_rel",
            PHON.ONSET con ] ].

note_v2 := v_cp_non_trans_le &
 [ STEM < "note" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_note_v_1_rel",
            PHON.ONSET con ] ].

notebook_n1 := n_ppof_le &
 [ STEM < "notebook" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_notebook_n_of_rel",
            PHON.ONSET con ] ].

noteworthy_a1 := adj_intrans_le &
 [ STEM < "noteworthy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_noteworthy_a_1_rel",
            PHON.ONSET con ] ].

nothing := n_generic_pro_le &
 [ STEM < "nothing" >,
   SYNSEM [ LKEYS [ ALTKEYREL.PRED no_q_rel,
                    KEYREL.PRED thing_rel ],
            PHON.ONSET con ] ].

nothing_n1 := n_intr_le &
 [ STEM < "nothing" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nothing_n_1_rel",
            PHON.ONSET con ] ].

notice_n1 := n_mass_count_le &
 [ STEM < "notice" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_notice_n_1_rel",
            PHON.ONSET con ] ].

notice_v1 := v_np*_trans_le &
 [ STEM < "notice" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_notice_v_1_rel",
            PHON.ONSET con ] ].

notice_v2 := v_cp_non_trans_le &
 [ STEM < "notice" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_notice_v_1_rel",
            PHON.ONSET con ] ].

notice_v4 := v_sorb_le &
 [ STEM < "notice" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_notice_v_1_rel",
            PHON.ONSET con ] ].

noticeable_a1 := adj_intrans_le &
 [ STEM < "noticeable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_noticeable_a_1_rel",
            PHON.ONSET con ] ].

noticeably := adv_int_vp_le &
 [ STEM < "noticeably" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_noticeable_a_1_rel",
            PHON.ONSET con ] ].

notification_n1 := n_mass_count_cpcomp_fin_le &
 [ STEM < "notification" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_notification_n_of_rel",
            PHON.ONSET con ] ].

notification_n2 := n_ppof_le &
 [ STEM < "notification" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_notification_n_of_rel",
            PHON.ONSET con ] ].

notify_v1 := v_np_trans_le &
 [ STEM < "notify" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_notify_v_of_rel",
            PHON.ONSET con ] ].

notify_v2 := v_empty_prep_trans_le &
 [ STEM < "notify" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_notify_v_of_rel" ],
            PHON.ONSET con ] ].

notion_n1 := n_ppof_le &
 [ STEM < "notion" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_notion_n_of_rel",
            PHON.ONSET con ] ].

notorious_a1 := adj_intrans_le &
 [ STEM < "notorious" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_notorious_a_1_rel",
            PHON.ONSET con ] ].

notre_dame_n1 := n_proper_le &
 [ STEM < "notre", "dame" >,
   SYNSEM [ LKEYS.KEYREL.CARG "notre_dame",
            PHON.ONSET con ] ].

notwithstanding_p := p_le &
 [ STEM < "notwithstanding" >,
   SYNSEM [ LKEYS.KEYREL.PRED _notwithstanding_p_rel,
            PHON.ONSET con ] ].

noun_abb_n1 := n_intr_le &
 [ STEM < "n." >,
   SYNSEM [ LKEYS.KEYREL.PRED "_noun_n_1_rel",
            PHON.ONSET con ] ].

noun_n1 := n_intr_le &
 [ STEM < "noun" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_noun_n_1_rel",
            PHON.ONSET con ] ].

nourish_v1 := v_np*_trans_le &
 [ STEM < "nourish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nourish_v_1_rel",
            PHON.ONSET con ] ].

nourishment_n1 := n_mass_le &
 [ STEM < "nourishment" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nourishment_n_1_rel",
            PHON.ONSET con ] ].

novel_a1 := adj_intrans_le &
 [ STEM < "novel" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_novel_a_1_rel",
            PHON.ONSET con ] ].

novel_n1 := n_ppof_le &
 [ STEM < "novel" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_novel_n_of_rel",
            PHON.ONSET con ] ].

novelty_n1 := n_mass_count_le &
 [ STEM < "novelty" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_novelty_n_1_rel",
            PHON.ONSET con ] ].

november := n_month_le &
 [ STEM < "november" >,
   SYNSEM [ LKEYS.KEYREL.CARG "nov",
            PHON.ONSET con ] ].

november_2 := n_month_year_le &
 [ STEM < "november" >,
   SYNSEM [ LKEYS.KEYREL.CARG "nov",
            PHON.ONSET con ] ].

november_abb_n1 := n_month_le &
 [ STEM < "nov" >,
   SYNSEM [ LKEYS.KEYREL.CARG "nov",
            PHON.ONSET con ] ].

november_abb_n2 := n_month_year_le &
 [ STEM < "nov" >,
   SYNSEM [ LKEYS.KEYREL.CARG "nov",
            PHON.ONSET con ] ].

november_abb_n3 := n_month_le &
 [ STEM < "nov." >,
   SYNSEM [ LKEYS.KEYREL.CARG "nov",
            PHON.ONSET con ] ].

november_abb_n4 := n_month_year_le &
 [ STEM < "nov." >,
   SYNSEM [ LKEYS.KEYREL.CARG "nov",
            PHON.ONSET con ] ].

november_the_det := det_month_le &
 [ STEM < "november", "the" >,
   SYNSEM [ LKEYS.ALTKEYREL.CARG "nov",
            PHON.ONSET con ] ].

novice_n1 := n_ppcomp_le &
 [ STEM < "novice" >,
   SYNSEM [ LKEYS [ --COMPKEY _at_p_sel_rel,
                    KEYREL.PRED "_novice_n_at_rel" ],
            PHON.ONSET con ] ].

now_adv := n_adv_tm_le &
 [ STEM < "now" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED _now_a_1_rel,
                    KEYREL.PRED time_n_rel ],
            PHON.ONSET con ] ].

now_adv2 := adv_int_vp_pre_le &
 [ STEM < "now" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_now_a_1_rel",
            PHON.ONSET con ] ].

now_and_again_adv1 := adv_int_vp_le &
 [ STEM < "now", "and", "again" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_now+and+again_a_1_rel",
            PHON.ONSET con ] ].

now_aux_adv := adv_int_vp_aux_now_le &
 [ STEM < "now" >,
   SYNSEM.PHON.ONSET con ].

now_disc_pre := adv_s_pre_word_root_le &
 [ STEM < "now" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_now_a_1_rel",
            PHON.ONSET con ] ].

now_that := p_subconj_le &
 [ STEM < "now", "that" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_now+that_x_rel",
            PHON.ONSET con ] ].

nowadays_ta := adv_int_vp_aux_le &
 [ STEM < "nowadays" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nowadays_a_1_rel",
            PHON.ONSET con ] ].

nowhere_n1 := n_generic_pro_adv_le &
 [ STEM < "nowhere" >,
   SYNSEM [ LKEYS [ ALTKEYREL.PRED no_q_rel,
                    KEYREL.PRED place_n_rel ],
            PHON.ONSET con ] ].

nowhere_n2 := n_generic_pro_adv_le &
 [ STEM < "no", "where" >,
   SYNSEM [ LKEYS [ ALTKEYREL.PRED no_q_rel,
                    KEYREL.PRED place_n_rel ],
            PHON.ONSET con ] ].

noxious_a1 := adj_intrans_le &
 [ STEM < "noxious" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_noxious_a_1_rel",
            PHON.ONSET con ] ].

nsb := n_proper_le &
 [ STEM < "nsb" >,
   SYNSEM [ LKEYS.KEYREL.CARG "nsb",
            PHON.ONSET voc ] ].

nubble_n1 := n_intr_le &
 [ STEM < "nubble" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nubble_n_1_rel",
            PHON.ONSET con ] ].

nuclear_a1 := adj_intrans_le &
 [ STEM < "nuclear" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nuclear_a_1_rel",
            PHON.ONSET con ] ].

nuclear_powered_a1 := adj_intrans_le &
 [ STEM < "nuclear", "powered" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nuclear+powered_a_1_rel",
            PHON.ONSET con ] ].

nudge_n1 := n_intr_le &
 [ STEM < "nudge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nudge_n_1_rel",
            PHON.ONSET con ] ].

nudge_up_v1 := v_particle_np_le &
 [ STEM < "nudge" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_nudge_v_up_rel" ],
            PHON.ONSET con ] ].

nudge_v1 := v_np_trans_le &
 [ STEM < "nudge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nudge_v_1_rel",
            PHON.ONSET con ] ].

nudge_v2 := v_np_prep_trans_dors_le &
 [ STEM < "nudge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nudge_v_1_rel",
            PHON.ONSET con ] ].

nuisance_n1 := n_intr_le &
 [ STEM < "nuisance" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nuisance_n_1_rel",
            PHON.ONSET con ] ].

null_a1 := adj_intrans_le &
 [ STEM < "null" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_null_a_1_rel",
            PHON.ONSET con ] ].

numb_a1 := adj_intrans_le &
 [ STEM < "numb" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_numb_a_1_rel",
            PHON.ONSET con ] ].

number-ersatz := n_proper_le &
 [ STEM < "numberersatz" >,
   SYNSEM [ LKEYS.KEYREL.CARG "numberersatz",
            PHON.ONSET onset ] ].

number_abb2_title := n_title_le &
 [ STEM < "num" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_number_n_of_rel",
            PHON.ONSET con ] ].

number_abb2_title_2 := n_title_le &
 [ STEM < "num." >,
   SYNSEM [ LKEYS.KEYREL.PRED "_number_n_of_rel",
            PHON.ONSET con ] ].

number_abb_n1 := n_ppof_nocmpnd_le &
 [ STEM < "no" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_number_n_of_rel",
            PHON.ONSET con ] ].

number_abb_n2 := n_ppof_nocmpnd_le &
 [ STEM < "num" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_number_n_of_rel",
            PHON.ONSET con ] ].

number_abb_n3 := n_ppof_nocmpnd_le &
 [ STEM < "num." >,
   SYNSEM [ LKEYS.KEYREL.PRED "_number_n_of_rel",
            PHON.ONSET con ] ].

number_abb_n4 := n_ppof_nocmpnd_le &
 [ STEM < "no." >,
   SYNSEM [ LKEYS.KEYREL.PRED "_number_n_of_rel",
            PHON.ONSET con ] ].

number_abb_title := n_title_le &
 [ STEM < "no" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_number_n_of_rel",
            PHON.ONSET con ] ].

number_abb_title_2 := n_title_le &
 [ STEM < "no." >,
   SYNSEM [ LKEYS.KEYREL.PRED "_number_n_of_rel",
            PHON.ONSET con ] ].

number_char_n1 := n_ppof_nocmpnd_le &
 [ STEM < "#" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_number_n_of_rel",
            PHON.ONSET con ] ].

number_n1 := n_ppof_nosort_le &
 [ STEM < "number" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_number_n_of_rel",
            PHON.ONSET con ] ].

number_n2 := n_group_ppof_le &
 [ STEM < "number" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_number_n_of_rel",
            PHON.ONSET con ] ].

number_title := n_title_num_le &
 [ STEM < "number" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_number_n_1_rel",
            PHON.ONSET con ] ].

number_v1 := v_np_trans_le &
 [ STEM < "number" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_number_v_1_rel",
            PHON.ONSET con ] ].

numerable_a1 := adj_intrans_le &
 [ STEM < "numerable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_numerable_a_1_rel",
            PHON.ONSET con ] ].

numeral_n1 := n_intr_le &
 [ STEM < "numeral" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_numeral_n_1_rel",
            PHON.ONSET con ] ].

numeral_title := n_title_num_le &
 [ STEM < "numeral" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_numeral_n_1_rel",
            PHON.ONSET con ] ].

numeration_n1 := n_mass_count_le &
 [ STEM < "numeration" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_numeration_n_1_rel",
            PHON.ONSET con ] ].

numeric_a1 := adj_intrans_le &
 [ STEM < "numeric" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_numeric_a_1_rel",
            PHON.ONSET con ] ].

numerical_a1 := adj_intrans_le &
 [ STEM < "numerical" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_numerical_a_1_rel",
            PHON.ONSET con ] ].

numerous_a1 := adj_intrans_le &
 [ STEM < "numerous" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_numerous_a_1_rel",
            PHON.ONSET con ] ].

numerousness_n1 := n_mass_le &
 [ STEM < "numerousness" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_numerousness_n_1_rel",
            PHON.ONSET con ] ].

numidentifierersatz_n2 := n_intr_le &
 [ STEM < "threedigitersatz" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_identifierersatz_n_1_rel",
            PHON.ONSET con ] ].

numidentifierersatz_n3 := n_intr_le &
 [ STEM < "fourdigitersatz" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_identifierersatz_n_1_rel",
            PHON.ONSET con ] ].

numidentifierersatz_n4 := n_intr_le &
 [ STEM < "fivedigitersatz" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_identifierersatz_n_1_rel",
            PHON.ONSET con ] ].

numidentifierersatz_n5 := n_intr_le &
 [ STEM < "sixdigitersatz" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_identifierersatz_n_1_rel",
            PHON.ONSET con ] ].

numidentifierersatz_n7 := n_intr_le &
 [ STEM < "sevendigitersatz" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_identifierersatz_n_1_rel",
            PHON.ONSET con ] ].

numvalcard10digit := adj_bare_unspecified_card_nine_le &
 [ STEM < "tendigitersatz" >,
   SYNSEM [ LKEYS.KEYREL.CARG "dig10ersatz",
            PHON.ONSET onset ] ].

numvalcard11digit := adj_bare_unspecified_card_nine_le &
 [ STEM < "elevendigitersatz" >,
   SYNSEM [ LKEYS.KEYREL.CARG "dig11ersatz",
            PHON.ONSET onset ] ].

numvalcard12digit := adj_bare_unspecified_card_twelve_le &
 [ STEM < "twelvedigitersatz" >,
   SYNSEM [ LKEYS.KEYREL.CARG "dig13ersatz",
            PHON.ONSET onset ] ].

numvalcard13plusdigit := adj_bare_unspecified_card_twelve_le &
 [ STEM < "thirteenplusdigitersatz" >,
   SYNSEM [ LKEYS.KEYREL.CARG "dig13plusersatz",
            PHON.ONSET onset ] ].

numvalcard1digit := adj_bare_unspecified_card_one_le &
 [ STEM < "onedigitersatz" >,
   SYNSEM [ LKEYS.KEYREL.CARG "dig1ersatz",
            PHON.ONSET onset ] ].

numvalcard2digit := adj_bare_unspecified_card_two_le &
 [ STEM < "twodigitersatz" >,
   SYNSEM [ LKEYS.KEYREL.CARG "dig2ersatz",
            PHON.ONSET onset ] ].

numvalcard3digit := adj_bare_unspecified_card_three_le &
 [ STEM < "threedigitersatz" >,
   SYNSEM [ LKEYS.KEYREL.CARG "dig3ersatz",
            PHON.ONSET onset ] ].

numvalcard3digit-3digit := n_proper_le &
 [ STEM < "threedigitersatz-threedigitersatz" >,
   SYNSEM [ LKEYS.KEYREL.CARG "dig3ersatz",
            PHON.ONSET onset ] ].

numvalcard3digit-4digit := n_proper_le &
 [ STEM < "threedigitersatz-fourdigitersatz" >,
   SYNSEM [ LKEYS.KEYREL.CARG "dig3ersatz",
            PHON.ONSET onset ] ].

numvalcard3digit3digit := n_proper_le &
 [ STEM < "threedigitersatz", "threedigitersatz" >,
   SYNSEM [ LKEYS.KEYREL.CARG "dig3ersatz",
            PHON.ONSET onset ] ].

numvalcard3digit4digit := n_proper_le &
 [ STEM < "threedigitersatz", "fourdigitersatz" >,
   SYNSEM [ LKEYS.KEYREL.CARG "dig4ersatz",
            PHON.ONSET onset ] ].

numvalcard4digit := adj_bare_unspecified_card_three_le &
 [ STEM < "fourdigitersatz" >,
   SYNSEM [ LKEYS.KEYREL.CARG "dig4ersatz",
            PHON.ONSET onset ] ].

numvalcard4digit-4digit := n_proper_le &
 [ STEM < "fourdigitersatz-", "fourdigitersatz" >,
   SYNSEM [ LKEYS.KEYREL.CARG "dig4ersatz",
            PHON.ONSET onset ] ].

numvalcard4digit4digit := n_proper_le &
 [ STEM < "fourdigitersatz", "fourdigitersatz" >,
   SYNSEM [ LKEYS.KEYREL.CARG "dig4ersatz",
            PHON.ONSET onset ] ].

numvalcard5digit := adj_bare_unspecified_card_three_le &
 [ STEM < "fivedigitersatz" >,
   SYNSEM [ LKEYS.KEYREL.CARG "dig5ersatz",
            PHON.ONSET onset ] ].

numvalcard6digit := adj_bare_unspecified_card_six_le &
 [ STEM < "sixdigitersatz" >,
   SYNSEM [ LKEYS.KEYREL.CARG "dig6ersatz",
            PHON.ONSET onset ] ].

numvalcard7digit := adj_bare_unspecified_card_six_le &
 [ STEM < "sevendigitersatz" >,
   SYNSEM [ LKEYS.KEYREL.CARG "dig7ersatz",
            PHON.ONSET onset ] ].

numvalcard8digit := adj_bare_unspecified_card_six_le &
 [ STEM < "eightdigitersatz" >,
   SYNSEM [ LKEYS.KEYREL.CARG "dig8ersatz",
            PHON.ONSET onset ] ].

numvalcard9digit := adj_bare_unspecified_card_nine_le &
 [ STEM < "ninedigitersatz" >,
   SYNSEM [ LKEYS.KEYREL.CARG "dig9ersatz",
            PHON.ONSET onset ] ].

numvalyofc2digit := n_year_le &
 [ STEM < "twodigitersatz" >,
   SYNSEM [ LKEYS.KEYREL.CARG "twodigitersatz",
            PHON.ONSET con ] ].

numvalyofc3digit := n_year_le &
 [ STEM < "threedigitersatz" >,
   SYNSEM [ LKEYS.KEYREL.CARG "threedigitersatz",
            PHON.ONSET con ] ].

numvalyofc4digit := n_year_le &
 [ STEM < "fourdigitersatz" >,
   SYNSEM [ LKEYS.KEYREL.CARG "fourdigitersatz",
            PHON.ONSET con ] ].

nun_n1 := n_intr_le &
 [ STEM < "nun" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nun_n_1_rel",
            PHON.ONSET con ] ].

nunnery_n1 := n_intr_le &
 [ STEM < "nunnery" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nunnery_n_1_rel",
            PHON.ONSET con ] ].

nuremberg_n1 := n_proper_city_le &
 [ STEM < "nuremberg" >,
   SYNSEM [ LKEYS.KEYREL.CARG "nuremberg",
            PHON.ONSET con ] ].

nurse_n1 := n_intr_le &
 [ STEM < "nurse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nurse_n_1_rel",
            PHON.ONSET con ] ].

nurse_v1 := v_np*_trans_le &
 [ STEM < "nurse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nurse_v_1_rel",
            PHON.ONSET con ] ].

nurture_n1 := n_mass_ppcomp_le &
 [ STEM < "nurture" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_nurture_n_of_rel" ],
            PHON.ONSET con ] ].

nurture_v1 := v_np_trans_le &
 [ STEM < "nurture" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nurture_v_1_rel",
            PHON.ONSET con ] ].

nut_n1 := n_intr_le &
 [ STEM < "nut" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nut_n_1_rel",
            PHON.ONSET con ] ].

nutec_n1 := n_proper_le &
 [ STEM < "nutec" >,
   SYNSEM [ LKEYS.KEYREL.CARG "nutec",
            PHON.ONSET con ] ].

nutriment_n1 := n_mass_count_le &
 [ STEM < "nutriment" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nutriment_n_1_rel",
            PHON.ONSET con ] ].

nutrition_n1 := n_mass_le &
 [ STEM < "nutrition" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nutrition_n_1_rel",
            PHON.ONSET con ] ].

nutritious_a1 := adj_intrans_le &
 [ STEM < "nutritious" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nutritious_a_1_rel",
            PHON.ONSET con ] ].

nuts_a1 := adj_pred_nomod_le &
 [ STEM < "nuts" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nuts_a_1_rel",
            PHON.ONSET con ] ].

nw_isect := adj_attr_intrans_le &
 [ STEM < "nw" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_northwest_a_1_rel",
            PHON.ONSET con ] ].

nw_n1 := n_ppof_le &
 [ STEM < "nw" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nw_n_of_rel",
            PHON.ONSET con ] ].

nw_n2 := n_adv_dir_le &
 [ STEM < "nw" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED _northwest_a_1_rel,
                    KEYREL.PRED place_n_rel ],
            PHON.ONSET con ] ].

nybod_n1 := n_proper_le &
 [ STEM < "nybod" >,
   SYNSEM [ LKEYS.KEYREL.CARG "nybod",
            PHON.ONSET con ] ].

nybua_n1 := n_proper_le &
 [ STEM < "nybua" >,
   SYNSEM [ LKEYS.KEYREL.CARG "nybua",
            PHON.ONSET con ] ].

nyheim := n_proper_le &
 [ STEM < "nyheim" >,
   SYNSEM [ LKEYS.KEYREL.CARG "nyheim",
            PHON.ONSET con ] ].

nÃ¥l_n1 := n_proper_le &
 [ STEM < "nÃ¥l" >,
   SYNSEM [ LKEYS.KEYREL.CARG "nÃ¥l",
            PHON.ONSET con ] ].

nÃ¦rÃ¸ydalen := n_proper_le &
 [ STEM < "nÃ¦rÃ¸ydalen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "nÃ¦rÃ¸ydalen",
            PHON.ONSET con ] ].

nÃ¦rÃ¸yfjord := n_proper_le &
 [ STEM < "nÃ¦rÃ¸yfjord" >,
   SYNSEM [ LKEYS.KEYREL.CARG "nÃ¦rÃ¸yfjord",
            PHON.ONSET con ] ].

nÃ¸dstedalseter_n1 := n_proper_le &
 [ STEM < "nÃ¸dstedalseter" >,
   SYNSEM [ LKEYS.KEYREL.CARG "nÃ¸dstedalseter",
            PHON.ONSET con ] ].

nÃ¸rdstedalseter_n1 := n_proper_le &
 [ STEM < "nÃ¸rdstedalseter" >,
   SYNSEM [ LKEYS.KEYREL.CARG "nÃ¸rdstedalseter",
            PHON.ONSET con ] ].

nÃ¸rdstedalsseter_n1 := n_proper_le &
 [ STEM < "nÃ¸rdstedalsseter" >,
   SYNSEM [ LKEYS.KEYREL.CARG "nÃ¸rdstedalsseter",
            PHON.ONSET con ] ].

nÃ¸rstedalseter_n1 := n_proper_le &
 [ STEM < "nÃ¸rstedalseter" >,
   SYNSEM [ LKEYS.KEYREL.CARG "nÃ¸rstedalseter",
            PHON.ONSET con ] ].

o_n1 := n_proper_le &
 [ STEM < "o" >,
   SYNSEM [ LKEYS.KEYREL.CARG "o",
            PHON.ONSET voc ] ].

o_np1 := n_proper_le &
 [ STEM < "_o" >,
   SYNSEM [ LKEYS.KEYREL.CARG "o",
            PHON.ONSET voc ] ].

o_period_np1 := n_proper_le &
 [ STEM < "o." >,
   SYNSEM [ LKEYS.KEYREL.CARG "o",
            PHON.ONSET voc ] ].

o_period_np2 := n_proper_le &
 [ STEM < "_o." >,
   SYNSEM [ LKEYS.KEYREL.CARG "o",
            PHON.ONSET voc ] ].

oa_n1 := n_proper_le &
 [ STEM < "oa" >,
   SYNSEM [ LKEYS.KEYREL.CARG "oa",
            PHON.ONSET voc ] ].

oakes_n1 := n_proper_le &
 [ STEM < "oakes" >,
   SYNSEM [ LKEYS.KEYREL.CARG "oakes",
            PHON.ONSET voc ] ].

oakland_n1 := n_proper_city_le &
 [ STEM < "oakland" >,
   SYNSEM [ LKEYS.KEYREL.CARG "oakland",
            PHON.ONSET voc ] ].

oakside_n1 := n_proper_le &
 [ STEM < "oakside" >,
   SYNSEM [ LKEYS.KEYREL.CARG "oakside",
            PHON.ONSET voc ] ].

oar_n1 := n_intr_le &
 [ STEM < "oar" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_oar_n_1_rel",
            PHON.ONSET voc ] ].

oas_n1 := n_proper_le &
 [ STEM < "oas" >,
   SYNSEM [ LKEYS.KEYREL.CARG "oas",
            PHON.ONSET voc ] ].

oasis_n1 := n_intr_le &
 [ STEM < "oasis" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_oasis_n_1_rel",
            PHON.ONSET voc ] ].

oath_n1 := n_ppof_le &
 [ STEM < "oath" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_oath_n_of_rel",
            PHON.ONSET voc ] ].

obedience_n1 := n_mass_le &
 [ STEM < "obedience" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_obedience_n_1_rel",
            PHON.ONSET voc ] ].

obedient_a1 := adj_intrans_le &
 [ STEM < "obedient" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_obedient_a_1_rel",
            PHON.ONSET voc ] ].

obeisance_n1 := n_mass_le &
 [ STEM < "obeisance" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_obeisance_n_1_rel",
            PHON.ONSET voc ] ].

oberressel_n1 := n_proper_le &
 [ STEM < "oberressel" >,
   SYNSEM [ LKEYS.KEYREL.CARG "oberressel",
            PHON.ONSET voc ] ].

obey_v1 := v_np*_trans_le &
 [ STEM < "obey" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_obey_v_1_rel",
            PHON.ONSET voc ] ].

object_n1 := n_intr_le &
 [ STEM < "object" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_object_n_1_rel",
            PHON.ONSET voc ] ].

object_to_v1 := v_empty_prep_intrans_le &
 [ STEM < "object" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_object_v_to_rel" ],
            PHON.ONSET voc ] ].

object_v1 := v_unerg_le &
 [ STEM < "object" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_object_v_1_rel",
            PHON.ONSET voc ] ].

object_v2 := v_cp_prop_non_trans_le &
 [ STEM < "object" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_object_v_1_rel",
            PHON.ONSET voc ] ].

objection_n1 := n_ppcomp_le &
 [ STEM < "objection" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_objection_n_to_rel" ],
            PHON.ONSET voc ] ].

objective_a1 := adj_intrans_le &
 [ STEM < "objective" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_objective_a_1_rel",
            PHON.ONSET voc ] ].

objective_n1 := n_intr_le &
 [ STEM < "objective" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_objective_n_1_rel",
            PHON.ONSET voc ] ].

objectively := adv_int_vp_le &
 [ STEM < "objectively" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_objective_a_1_rel",
            PHON.ONSET voc ] ].

obligation_n1 := n_intr_le &
 [ STEM < "obligation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_obligation_n_1_rel",
            PHON.ONSET voc ] ].

obligatory_a1 := adj_intrans_le &
 [ STEM < "obligatory" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_obligatory_a_1_rel",
            PHON.ONSET voc ] ].

oblige_v1 := v_np*_trans_le &
 [ STEM < "oblige" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_oblige_v_1_rel",
            PHON.ONSET voc ] ].

oblige_v2 := v_obj_equi_le &
 [ STEM < "oblige" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_oblige_v_1_rel",
            PHON.ONSET voc ] ].

obliged_a1 := adj_intrans_le &
 [ STEM < "obliged" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_obliged_a_1_rel",
            PHON.ONSET voc ] ].

oblique_a1 := adj_intrans_le &
 [ STEM < "oblique" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_oblique_a_1_rel",
            PHON.ONSET voc ] ].

obliquely := adv_int_vp_le &
 [ STEM < "obliquely" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_oblique_a_1_rel",
            PHON.ONSET voc ] ].

obliterate_v1 := v_np_trans_le &
 [ STEM < "obliterate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_obliterate_v_1_rel",
            PHON.ONSET voc ] ].

oblong_a1 := adj_intrans_le &
 [ STEM < "oblong" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_oblong_a_1_rel",
            PHON.ONSET voc ] ].

obnoxious_a1 := adj_intrans_le &
 [ STEM < "obnoxious" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_obnoxious_a_1_rel",
            PHON.ONSET voc ] ].

obnoxiously_isect := adv_int_vp_le &
 [ STEM < "obnoxiously" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_obnoxious_a_1_rel",
            PHON.ONSET voc ] ].

obs_abb_a1 := adj_intrans_le &
 [ STEM < "obs." >,
   SYNSEM [ LKEYS.KEYREL.PRED "_obsolete_a_1_rel",
            PHON.ONSET voc ] ].

obs_abb_a2 := adj_intrans_le &
 [ STEM < "obs" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_obsolete_a_1_rel",
            PHON.ONSET voc ] ].

obscure_a1 := adj_intrans_le &
 [ STEM < "obscure" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_obscure_a_1_rel",
            PHON.ONSET voc ] ].

obscure_v1 := v_np_trans_le &
 [ STEM < "obscure" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_obscure_v_1_rel",
            PHON.ONSET voc ] ].

observation_n1 := n_mass_count_ppof_le &
 [ STEM < "observation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_observation_n_of_rel",
            PHON.ONSET voc ] ].

observatory_n1 := n_intr_le &
 [ STEM < "observatory" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_observatory_n_1_rel",
            PHON.ONSET voc ] ].

observe_v1 := v_np_trans_le &
 [ STEM < "observe" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_observe_v_1_rel",
            PHON.ONSET voc ] ].

observe_v2 := v_cp_non_trans_le &
 [ STEM < "observe" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_observe_v_1_rel",
            PHON.ONSET voc ] ].

observe_v3 := v_sorb_le &
 [ STEM < "observe" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_observe_v_1_rel",
            PHON.ONSET voc ] ].

observed_v3 := v_sorb_pass_le &
 [ STEM < "observed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_observe_v_1_rel",
            PHON.ONSET voc ] ].

observer_n1 := n_intr_le &
 [ STEM < "observer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_observer_n_1_rel",
            PHON.ONSET voc ] ].

obsessed_a1 := adj_trans_le &
 [ STEM < "obsessed" >,
   SYNSEM [ LKEYS [ --COMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_obsessed_a_with_rel" ],
            PHON.ONSET voc ] ].

obsession_n1 := n_intr_le &
 [ STEM < "obsession" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_obsession_n_1_rel",
            PHON.ONSET voc ] ].

obsolete_a1 := adj_intrans_le &
 [ STEM < "obsolete" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_obsolete_a_1_rel",
            PHON.ONSET voc ] ].

obstacle_n1 := n_intr_le &
 [ STEM < "obstacle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_obstacle_n_1_rel",
            PHON.ONSET voc ] ].

obstinate_a1 := adj_intrans_le &
 [ STEM < "obstinate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_obstinate_a_1_rel",
            PHON.ONSET voc ] ].

obstruct_v1 := v_np_trans_le &
 [ STEM < "obstruct" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_obstruct_v_1_rel",
            PHON.ONSET voc ] ].

obtain_v1 := v_np_trans_le &
 [ STEM < "obtain" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_obtain_v_1_rel",
            PHON.ONSET voc ] ].

obtain_v2 := v_unerg_le &
 [ STEM < "obtain" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_obtain_v_hold_rel",
            PHON.ONSET voc ] ].

obvious_a1 := adj_trans_le &
 [ STEM < "obvious" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_obvious_a_to_rel" ],
            PHON.ONSET voc ] ].

obvious_a2 := adj_reg_atrans_cp_le &
 [ STEM < "obvious" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_obvious_a_to_rel",
            PHON.ONSET voc ] ].

obviously_adv1 := adv_vp_aux_le &
 [ STEM < "obviously" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_obvious_a_to_rel",
            PHON.ONSET voc ] ].

obviously_adv2 := adv_s_pre_le &
 [ STEM < "obviously" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_obvious_a_to_rel",
            PHON.ONSET voc ] ].

occasion_n1 := n_intr_le &
 [ STEM < "occasion" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_occasion_n_1_rel",
            PHON.ONSET voc ] ].

occasional_a1 := adj_intrans_le &
 [ STEM < "occasional" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_occasional_a_1_rel",
            PHON.ONSET voc ] ].

occasionally_adv1 := adv_int_vp_le &
 [ STEM < "occasionally" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_occasional_a_1_rel",
            PHON.ONSET voc ] ].

occupation_n1 := n_mass_count_le &
 [ STEM < "occupation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_occupation_n_1_rel",
            PHON.ONSET voc ] ].

occupied_a1 := adj_intrans_le &
 [ STEM < "occupied" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_occupied_a_1_rel",
            PHON.ONSET voc ] ].

occupier_n1 := n_ppof_le &
 [ STEM < "occupier" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_occupier_n_of_rel",
            PHON.ONSET voc ] ].

occupy_v2 := v_np_trans_le &
 [ STEM < "occupy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_occupy_v_1_rel",
            PHON.ONSET voc ] ].

occur_to_v1 := v_empty_prep_intrans_le &
 [ STEM < "occur" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_occur_v_to_rel" ],
            PHON.ONSET voc ] ].

occur_v1 := v_unerg_le &
 [ STEM < "occur" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_occur_v_to_rel",
            PHON.ONSET voc ] ].

occur_v2 := v_expl_it_subj_pp_obl_cp_le &
 [ STEM < "occur" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_occur_v_to_rel",
            PHON.ONSET voc ] ].

occurrence_n1 := n_mass_count_le &
 [ STEM < "occurrence" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_occurrence_n_1_rel",
            PHON.ONSET voc ] ].

ocean_n1 := n_intr_le &
 [ STEM < "ocean" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ocean_n_1_rel",
            PHON.ONSET voc ] ].

ocho_rios_n1 := n_proper_city_le &
 [ STEM < "ocho", "rios" >,
   SYNSEM [ LKEYS.KEYREL.CARG "ocho_rios",
            PHON.ONSET voc ] ].

oclock := adj_minute_posth_le &
 [ STEM < "o'clock" >,
   SYNSEM [ LKEYS.KEYREL.CARG "00",
            PHON.ONSET voc ] ].

oclock_2 := adj_minute_posth_le &
 [ STEM < "o", "clock" >,
   SYNSEM [ LKEYS.KEYREL.CARG "00",
            PHON.ONSET voc ] ].

oconnell_n1 := n_proper_le &
 [ STEM < "o'connell" >,
   SYNSEM [ LKEYS.KEYREL.CARG "o'connell",
            PHON.ONSET con ] ].

october := n_month_le &
 [ STEM < "october" >,
   SYNSEM [ LKEYS.KEYREL.CARG "oct",
            PHON.ONSET voc ] ].

october_2 := n_month_year_le &
 [ STEM < "october" >,
   SYNSEM [ LKEYS.KEYREL.CARG "oct",
            PHON.ONSET voc ] ].

october_abb_n1 := n_month_le &
 [ STEM < "oct" >,
   SYNSEM [ LKEYS.KEYREL.CARG "oct",
            PHON.ONSET voc ] ].

october_abb_n2 := n_month_year_le &
 [ STEM < "oct" >,
   SYNSEM [ LKEYS.KEYREL.CARG "oct",
            PHON.ONSET voc ] ].

october_abb_n3 := n_month_le &
 [ STEM < "oct." >,
   SYNSEM [ LKEYS.KEYREL.CARG "oct",
            PHON.ONSET voc ] ].

october_abb_n4 := n_month_year_le &
 [ STEM < "oct." >,
   SYNSEM [ LKEYS.KEYREL.CARG "oct",
            PHON.ONSET voc ] ].

october_the_det := det_month_le &
 [ STEM < "october", "the" >,
   SYNSEM [ LKEYS.ALTKEYREL.CARG "oct",
            PHON.ONSET voc ] ].

odd_a1 := adj_trans_le &
 [ STEM < "odd" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_odd_a_to_rel" ],
            PHON.ONSET voc ] ].

odd_a2 := adj_reg_atrans_that_cp_le &
 [ STEM < "odd" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_odd_a_to_rel",
            PHON.ONSET voc ] ].

oddly_a1 := adv_int_vp_post_le &
 [ STEM < "oddly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_odd_a_to_rel",
            PHON.ONSET voc ] ].

oder_n1 := n_proper_le &
 [ STEM < "oder" >,
   SYNSEM [ LKEYS.KEYREL.CARG "oder",
            PHON.ONSET voc ] ].

odor_n1 := n_mass_count_le &
 [ STEM < "odor" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_odor_n_1_rel",
            PHON.ONSET voc ] ].

odoriferous_a1 := adj_intrans_le &
 [ STEM < "odoriferous" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_odoriferous_a_1_rel",
            PHON.ONSET voc ] ].

of_course_a1 := adv_vp_aux_le &
 [ STEM < "of", "course" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_of+course_a_1_rel",
            PHON.ONSET voc ] ].

of_course_root := adv_s_le &
 [ STEM < "of", "course" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_of+course_a_1_rel",
            PHON.ONSET voc ] ].

of_interest_a1 := adj_trans_le &
 [ STEM < "of", "interest" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_of+interest_a_to_rel" ],
            PHON.ONSET voc ] ].

of_nbar_p := p_nbar_comp_nomod_le &
 [ STEM < "of" >,
   SYNSEM [ LKEYS.KEYREL.PRED _of_p_nbar_rel,
            PHON.ONSET voc ] ].

of_poss := p_nmod_poss_le &
 [ STEM < "of" >,
   SYNSEM [ LKEYS.KEYREL.PRED _of_p_rel,
            PHON.ONSET voc ] ].

of_poss_gen := p_poss_gen_le &
 [ STEM < "of" >,
   SYNSEM.PHON.ONSET voc ].

of_prtcl := p_prtcl_of_le &
 [ STEM < "of" >,
   SYNSEM [ LKEYS.KEYREL.PRED _of_p_sel_rel,
            PHON.ONSET voc ] ].

of_subconj := p_subconj_np_le &
 [ STEM < "of" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_of_x_subord_rel",
            PHON.ONSET voc ] ].

off := p_reg_le &
 [ STEM < "off" >,
   SYNSEM [ LKEYS.KEYREL.PRED _off_p_rel,
            PHON.ONSET voc ] ].

off_adv := pp_dir_le &
 [ STEM < "off" >,
   SYNSEM [ LKEYS.KEYREL.PRED _off_p_rel,
            PHON.ONSET voc ] ].

off_button_n1 := n_intr_le &
 [ STEM < "off", "button" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_off+button_n_1_rel",
            PHON.ONSET voc ] ].

off_button_n2 := n_intr_le &
 [ STEM < "off-", "button" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_off+button_n_1_rel",
            PHON.ONSET voc ] ].

off_of_p := p_reg_le &
 [ STEM < "off", "of" >,
   SYNSEM [ LKEYS.KEYREL.PRED _off+of_p_rel,
            PHON.ONSET voc ] ].

off_prtcl := p_prtcl_le &
 [ STEM < "off" >,
   SYNSEM [ LKEYS.KEYREL.PRED _off_p_sel_rel,
            PHON.ONSET voc ] ].

off_route_a1 := adj_intrans_le &
 [ STEM < "off-", "route" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_off+route_a_1_rel",
            PHON.ONSET voc ] ].

off_route_adv := adv_int_vp_post_le &
 [ STEM < "off-", "route" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_off+route_a_1_rel",
            PHON.ONSET voc ] ].

off_season_adv1 := n_adv_tm_le &
 [ STEM < "off", "season" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED _off+season_a_1_rel,
                    KEYREL.PRED time_n_rel ],
            PHON.ONSET voc ] ].

off_season_adv2 := n_adv_tm_le &
 [ STEM < "off-", "season" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED _off+season_a_1_rel,
                    KEYREL.PRED time_n_rel ],
            PHON.ONSET voc ] ].

offenbach_n1 := n_proper_city_le &
 [ STEM < "offenbach" >,
   SYNSEM [ LKEYS.KEYREL.CARG "offenbach",
            PHON.ONSET voc ] ].

offenburg_n1 := n_proper_city_le &
 [ STEM < "offenburg" >,
   SYNSEM [ LKEYS.KEYREL.CARG "offenburg",
            PHON.ONSET voc ] ].

offend_v1 := v_np_trans_le &
 [ STEM < "offend" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_offend_v_1_rel",
            PHON.ONSET voc ] ].

offend_v2 := v_expl_it_subj_np_cp_le &
 [ STEM < "offend" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_offend_v_1_rel",
            PHON.ONSET voc ] ].

offender_n1 := n_intr_le &
 [ STEM < "offender" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_offender_n_1_rel",
            PHON.ONSET voc ] ].

offense_n1 := n_intr_le &
 [ STEM < "offense" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_offense_n_1_rel",
            PHON.ONSET voc ] ].

offensive_a1 := adj_intrans_le &
 [ STEM < "offensive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_offensive_a_1_rel",
            PHON.ONSET voc ] ].

offensive_n1 := n_intr_le &
 [ STEM < "offensive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_offensive_n_1_rel",
            PHON.ONSET voc ] ].

offer_n1 := n_intr_le &
 [ STEM < "offer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_offer_n_1_rel",
            PHON.ONSET voc ] ].

offer_n2 := n_vpcomp_le &
 [ STEM < "offer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_offer_n_1_rel",
            PHON.ONSET voc ] ].

offer_v1 := v_ditrans_le &
 [ STEM < "offer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_offer_v_1_rel",
            PHON.ONSET voc ] ].

offer_v3 := v_np_trans_le &
 [ STEM < "offer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_offer_v_1_rel",
            PHON.ONSET voc ] ].

offer_v4 := v_subj_equi_le &
 [ STEM < "offer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_offer_v_1_rel",
            PHON.ONSET voc ] ].

offering_n1 := n_ppof_le &
 [ STEM < "offering" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_offering_n_of_rel",
            PHON.ONSET voc ] ].

office1 := n_intr_le &
 [ STEM < "office" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_office_n_1_rel",
            PHON.ONSET voc ] ].

office_i_n1 := n_bare_jmod_opt_le &
 [ STEM < "office" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_office_n_1_rel",
            PHON.ONSET voc ] ].

office_post_ttl := n_post_title_le &
 [ STEM < "office" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_office_n_1_rel",
            PHON.ONSET voc ] ].

officer_n1 := n_intr_le &
 [ STEM < "officer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_officer_n_1_rel",
            PHON.ONSET voc ] ].

official_a1 := adj_intrans_le &
 [ STEM < "official" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_official_a_1_rel",
            PHON.ONSET voc ] ].

officially := adv_int_vp_le &
 [ STEM < "officially" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_official_a_1_rel",
            PHON.ONSET voc ] ].

offline_nom1 := n_adv_pl_le &
 [ STEM < "offline" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED _offline_a_1_rel,
                    KEYREL.PRED place_n_rel ],
            PHON.ONSET voc ] ].

offline_nom2 := n_adv_pl_le &
 [ STEM < "off", "line" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED _offline_a_1_rel,
                    KEYREL.PRED place_n_rel ],
            PHON.ONSET voc ] ].

offline_nom3 := n_adv_pl_le &
 [ STEM < "off-", "line" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED _offline_a_1_rel,
                    KEYREL.PRED place_n_rel ],
            PHON.ONSET voc ] ].

offpeak_a1 := adj_intrans_le &
 [ STEM < "offpeak" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_offpeak_a_1_rel",
            PHON.ONSET voc ] ].

offpeak_a2 := adj_intrans_le &
 [ STEM < "off", "peak" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_offpeak_a_1_rel",
            PHON.ONSET voc ] ].

offset_n1 := n_intr_le &
 [ STEM < "offset" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_offset_n_1_rel",
            PHON.ONSET voc ] ].

offset_v1 := v_np_trans_le &
 [ STEM < "offset" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_offset_v_1_rel",
            PHON.ONSET voc ] ].

offspring_n1 := n_mass_count_le &
 [ STEM < "offspring" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_offspring_n_1_rel",
            PHON.ONSET voc ] ].

often_adv1 := adv_int_vp_aux_le &
 [ STEM < "often" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_often_a_1_rel",
            PHON.ONSET voc ] ].

often_adv2 := adv_int_vp_post_le &
 [ STEM < "often" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_often_a_1_rel",
            PHON.ONSET voc ] ].

oftener_adv := adv_int_vp_le &
 [ STEM < "oftener" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_oftener_a_1_rel",
            PHON.ONSET voc ] ].

ogai_n1 := n_proper_le &
 [ STEM < "ogai" >,
   SYNSEM [ LKEYS.KEYREL.CARG "ogai",
            PHON.ONSET voc ] ].

oglethorpe_n1 := n_proper_le &
 [ STEM < "oglethorpe" >,
   SYNSEM [ LKEYS.KEYREL.CARG "oglethorpe",
            PHON.ONSET voc ] ].

oh := adj_bare_unspecified_card_one_le &
 [ STEM < "oh" >,
   SYNSEM [ LKEYS.KEYREL.CARG "0",
            PHON.ONSET voc ] ].

oh_dear_root_post := adv_s_post_word_nospec_le &
 [ STEM < "oh", "dear" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_oh+dear_a_1_rel",
            PHON.ONSET voc ] ].

oh_dear_root_pre := adv_s_pre_word_root_le &
 [ STEM < "oh", "dear" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_oh+dear_a_1_rel",
            PHON.ONSET voc ] ].

oh_eight := adj_minute_posth_le &
 [ STEM < "oh", "eight" >,
   SYNSEM [ LKEYS.KEYREL.CARG "08",
            PHON.ONSET voc ] ].

oh_five := adj_minute_posth_le &
 [ STEM < "oh", "five" >,
   SYNSEM [ LKEYS.KEYREL.CARG "05",
            PHON.ONSET voc ] ].

oh_four := adj_minute_posth_le &
 [ STEM < "oh", "four" >,
   SYNSEM [ LKEYS.KEYREL.CARG "04",
            PHON.ONSET voc ] ].

oh_nine := adj_minute_posth_le &
 [ STEM < "oh", "nine" >,
   SYNSEM [ LKEYS.KEYREL.CARG "09",
            PHON.ONSET voc ] ].

oh_one := adj_minute_posth_le &
 [ STEM < "oh", "one" >,
   SYNSEM [ LKEYS.KEYREL.CARG "01",
            PHON.ONSET voc ] ].

oh_root_post := adv_s_post_word_nospec_le &
 [ STEM < "oh" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_oh_a_1_rel",
            PHON.ONSET voc ] ].

oh_root_pre := adv_s_pre_word_root_le &
 [ STEM < "oh" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_oh_a_1_rel",
            PHON.ONSET voc ] ].

oh_seven := adj_minute_posth_le &
 [ STEM < "oh", "seven" >,
   SYNSEM [ LKEYS.KEYREL.CARG "07",
            PHON.ONSET voc ] ].

oh_six := adj_minute_posth_le &
 [ STEM < "oh", "six" >,
   SYNSEM [ LKEYS.KEYREL.CARG "06",
            PHON.ONSET voc ] ].

oh_three := adj_minute_posth_le &
 [ STEM < "oh", "three" >,
   SYNSEM [ LKEYS.KEYREL.CARG "03",
            PHON.ONSET voc ] ].

oh_two := adj_minute_posth_le &
 [ STEM < "oh", "two" >,
   SYNSEM [ LKEYS.KEYREL.CARG "02",
            PHON.ONSET voc ] ].

oh_where_wh_adv := wh_the_hell_le &
 [ STEM < "oh", "where" >,
   SYNSEM [ LKEYS.KEYREL.PRED _oh+where_x_rel,
            PHON.ONSET voc ] ].

oh_yes_excl_post := adv_s_post_word_nospec_le &
 [ STEM < "oh", "yes" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_oh+yes_a_1_rel",
            PHON.ONSET voc ] ].

oh_yes_excl_pre := adv_s_pre_word_root_le &
 [ STEM < "oh", "yes" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_oh+yes_a_1_rel",
            PHON.ONSET voc ] ].

ohio_n1 := n_proper_le &
 [ STEM < "ohio" >,
   SYNSEM [ LKEYS.KEYREL.CARG "ohio",
            PHON.ONSET voc ] ].

ohio_n2 := n_proper_abb_le &
 [ STEM < "oh" >,
   SYNSEM [ LKEYS.KEYREL.CARG "ohio",
            PHON.ONSET voc ] ].

oil_n1 := n_mass_count_le &
 [ STEM < "oil" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_oil_n_1_rel",
            PHON.ONSET voc ] ].

ok_a1 := adj_intrans_le &
 [ STEM < "ok" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_okay_a_accept_rel",
            PHON.ONSET voc ] ].

ok_doke_excl_post := adv_s_post_word_nospec_le &
 [ STEM < "ok", "doke" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ok+doke_a_1_rel",
            PHON.ONSET voc ] ].

ok_doke_excl_pre := adv_s_pre_word_root_le &
 [ STEM < "ok", "doke" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ok+doke_a_1_rel",
            PHON.ONSET voc ] ].

ok_s_adv := adv_s_pre_word_nospec_le &
 [ STEM < "ok" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_okay_a_1_rel",
            PHON.ONSET voc ] ].

okay_a1 := adj_trans_le &
 [ STEM < "okay" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_okay_a_for_rel" ],
            PHON.ONSET voc ] ].

okay_a2 := adj_reg_atrans_le &
 [ STEM < "okay" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_okay_a_for_rel",
            PHON.ONSET voc ] ].

okay_a3 := adj_reg_atrans_cp_le &
 [ STEM < "okay" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_okay_a_for_rel",
            PHON.ONSET voc ] ].

okay_adv := adv_int_vp_post_nonmob_le &
 [ STEM < "okay" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_okay_a_1_rel",
            PHON.ONSET voc ] ].

okay_n1 := n_intr_le &
 [ STEM < "okay" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_okay_n_1_rel",
            PHON.ONSET voc ] ].

okay_n2 := n_intr_le &
 [ STEM < "ok" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_okay_n_1_rel",
            PHON.ONSET voc ] ].

okay_n3 := n_intr_le &
 [ STEM < "o", "k" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_okay_n_1_rel",
            PHON.ONSET voc ] ].

okay_s_adv := adv_s_pre_word_root_le &
 [ STEM < "okay" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_okay_a_1_rel",
            PHON.ONSET voc ] ].

okay_s_adv2 := adv_s_pre_word_root_le &
 [ STEM < "'kay" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_okay_a_1_rel",
            PHON.ONSET voc ] ].

okbz_nd := n_proper_le &
 [ STEM < "okbz" >,
   SYNSEM [ LKEYS.KEYREL.CARG "okbz",
            PHON.ONSET voc ] ].

okey_doke_excl_post := adv_s_post_word_nospec_le &
 [ STEM < "okey", "doke" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ok+doke_a_1_rel",
            PHON.ONSET voc ] ].

okey_doke_excl_pre := adv_s_pre_word_root_le &
 [ STEM < "okey", "doke" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ok+doke_a_1_rel",
            PHON.ONSET voc ] ].

oklahoma_n1 := n_proper_le &
 [ STEM < "oklahoma" >,
   SYNSEM [ LKEYS.KEYREL.CARG "oklahoma",
            PHON.ONSET voc ] ].

oklahoma_n2 := n_proper_abb_le &
 [ STEM < "ok" >,
   SYNSEM [ LKEYS.KEYREL.CARG "oklahoma",
            PHON.ONSET voc ] ].

oksedalen_n1 := n_proper_le &
 [ STEM < "oksedalen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "oksedalen",
            PHON.ONSET voc ] ].

olav_n1 := n_proper_le &
 [ STEM < "olav" >,
   SYNSEM [ LKEYS.KEYREL.CARG "olav",
            PHON.ONSET voc ] ].

olavsbu := n_proper_le &
 [ STEM < "olavsbu" >,
   SYNSEM [ LKEYS.KEYREL.CARG "olavsbu",
            PHON.ONSET voc ] ].

olavsby_n1 := n_proper_le &
 [ STEM < "olavsby" >,
   SYNSEM [ LKEYS.KEYREL.CARG "olavsby",
            PHON.ONSET voc ] ].

olavsson_n1 := n_proper_le &
 [ STEM < "olavsson" >,
   SYNSEM [ LKEYS.KEYREL.CARG "olavsson",
            PHON.ONSET voc ] ].

old_a1 := adj_intrans_le &
 [ STEM < "old" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_old_a_1_rel",
            PHON.ONSET voc ] ].

oldefjorden_n1 := n_proper_le &
 [ STEM < "oldefjorden" >,
   SYNSEM [ LKEYS.KEYREL.CARG "oldefjorden",
            PHON.ONSET voc ] ].

oldenburg_n1 := n_proper_city_le &
 [ STEM < "oldenburg" >,
   SYNSEM [ LKEYS.KEYREL.CARG "oldenburg",
            PHON.ONSET voc ] ].

older := adj_comp_le &
 [ STEM < "older" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_old_a_1_rel",
            PHON.ONSET voc ] ].

oldeskardet := n_proper_le &
 [ STEM < "oldeskardet" >,
   SYNSEM [ LKEYS.KEYREL.CARG "oldeskardet",
            PHON.ONSET voc ] ].

oldest_a1 := adj_superl_le &
 [ STEM < "oldest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_old_a_1_rel",
            PHON.ONSET voc ] ].

ole_n1 := n_proper_le &
 [ STEM < "ole" >,
   SYNSEM [ LKEYS.KEYREL.CARG "ole",
            PHON.ONSET voc ] ].

oleberga_n1 := n_proper_le &
 [ STEM < "oleberga" >,
   SYNSEM [ LKEYS.KEYREL.CARG "oleberga",
            PHON.ONSET voc ] ].

olefjorden_n1 := n_proper_le &
 [ STEM < "olefjorden" >,
   SYNSEM [ LKEYS.KEYREL.CARG "olefjorden",
            PHON.ONSET voc ] ].

olsen_n1 := n_proper_le &
 [ STEM < "olsen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "olsen",
            PHON.ONSET voc ] ].

olympia_n1 := n_proper_city_le &
 [ STEM < "olympia" >,
   SYNSEM [ LKEYS.KEYREL.CARG "olympia",
            PHON.ONSET voc ] ].

olympic_a1 := adj_intrans_le &
 [ STEM < "olympic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_olympic_a_1_rel",
            PHON.ONSET voc ] ].

olympics_n1 := n_intr_named_le &
 [ STEM < "olympics" >,
   SYNSEM [ LKEYS.KEYREL.CARG "olympics",
            PHON.ONSET voc ] ].

olympus_n1 := n_proper_le &
 [ STEM < "olympus" >,
   SYNSEM [ LKEYS.KEYREL.CARG "olympus",
            PHON.ONSET voc ] ].

omelette_n1 := n_intr_le &
 [ STEM < "omelette" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_omelette_n_1_rel",
            PHON.ONSET voc ] ].

omission_n1 := n_mass_count_le &
 [ STEM < "omission" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_omission_n_1_rel",
            PHON.ONSET voc ] ].

omit_v1 := v_np_trans_le &
 [ STEM < "omit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_omit_v_1_rel",
            PHON.ONSET voc ] ].

omit_v2 := v_subj_equi_le &
 [ STEM < "omit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_omit_v_1_rel",
            PHON.ONSET voc ] ].

on := p_reg_le &
 [ STEM < "on" >,
   SYNSEM [ LKEYS.KEYREL.PRED _on_p_rel,
            PHON.ONSET voc ] ].

on_adv := pp_no_nmod_le &
 [ STEM < "on" >,
   SYNSEM [ LKEYS.KEYREL.PRED _on_p_dir_rel,
            PHON.ONSET voc ] ].

on_all_fours_adv1 := adv_int_vp_le &
 [ STEM < "on", "all", "fours" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_on+all+fours_a_1_rel",
            PHON.ONSET voc ] ].

on_behalf_of := p_le &
 [ STEM < "on", "behalf", "of" >,
   SYNSEM [ LKEYS.KEYREL.PRED _on+behalf+of_p_rel,
            PHON.ONSET voc ] ].

on_board := p_reg_le &
 [ STEM < "on", "board" >,
   SYNSEM [ LKEYS.KEYREL.PRED _on+board_p_rel,
            PHON.ONSET voc ] ].

on_board_pp := pp_le &
 [ STEM < "on", "board" >,
   SYNSEM [ LKEYS.KEYREL.PRED _on+board_p_rel,
            PHON.ONSET voc ] ].

on_button_n1 := n_intr_le &
 [ STEM < "on", "button" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_on+button_n_1_rel",
            PHON.ONSET voc ] ].

on_button_n2 := n_intr_le &
 [ STEM < "on-", "button" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_on+button_n_1_rel",
            PHON.ONSET voc ] ].

on_day := p_temp_le &
 [ STEM < "on" >,
   SYNSEM [ LKEYS [ --COMPKEY day_rel,
                    KEYREL.PRED _on_p_temp_rel ],
            PHON.ONSET voc ] ].

on_earth_wh_adv := wh_the_hell_le &
 [ STEM < "on", "earth" >,
   SYNSEM [ LKEYS.KEYREL.PRED _on+earth_x_rel,
            PHON.ONSET voc ] ].

on_foot_adv := pp_le &
 [ STEM < "on", "foot" >,
   SYNSEM [ LKEYS.KEYREL.PRED _on+foot_p_rel,
            PHON.ONSET voc ] ].

on_foot_in_norway_n1 := n_proper_le &
 [ STEM < "on", "foot", "in", "norway" >,
   SYNSEM [ LKEYS.KEYREL.CARG "on+foot+in+norway",
            PHON.ONSET voc ] ].

on_hand_a1 := adj_pred_intrans_le &
 [ STEM < "on", "hand" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_on+hand_a_1_rel",
            PHON.ONSET voc ] ].

on_prtcl := p_prtcl_le &
 [ STEM < "on" >,
   SYNSEM [ LKEYS.KEYREL.PRED _on_p_sel_rel,
            PHON.ONSET voc ] ].

on_sale_a1 := adj_intrans_le &
 [ STEM < "on", "sale" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_on+sale_a_1_rel",
            PHON.ONSET voc ] ].

on_the_basis_of := p_le &
 [ STEM < "on", "the", "basis", "of" >,
   SYNSEM [ LKEYS.KEYREL.PRED _on+the+basis+of_p_rel,
            PHON.ONSET voc ] ].

on_the_other_hand := adv_int_vp_le &
 [ STEM < "on", "the", "other", "hand" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_on+the+other+hand_a_1_rel",
            PHON.ONSET voc ] ].

on_the_part_of := p_le &
 [ STEM < "on", "the", "part", "of" >,
   SYNSEM [ LKEYS.KEYREL.PRED _on+the+part+of_p_rel,
            PHON.ONSET voc ] ].

on_time_a1 := adj_intrans_le &
 [ STEM < "on", "time" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_on+time_a_1_rel",
            PHON.ONSET voc ] ].

on_time_a2 := adj_intrans_le &
 [ STEM < "on-", "time" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_on+time_a_1_rel",
            PHON.ONSET voc ] ].

on_time_adv1 := adv_int_vp_post_le &
 [ STEM < "on", "time" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_on+time_a_1_rel",
            PHON.ONSET voc ] ].

once_adv1 := adv_int_vp_aux_le &
 [ STEM < "once" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_once_a_1_rel",
            PHON.ONSET con ] ].

once_adv2 := adv_int_vp_post_le &
 [ STEM < "once" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_once_a_1_rel",
            PHON.ONSET con ] ].

once_again := adv_int_vp_le &
 [ STEM < "once", "again" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_once+again_a_1_rel",
            PHON.ONSET con ] ].

once_and_for_all_adv1 := adv_int_vp_post_le &
 [ STEM < "once", "and", "for", "all" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_once+and+for+all_a_1_rel",
            PHON.ONSET con ] ].

once_conj := p_subconj_le &
 [ STEM < "once" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_once_x_subord_rel",
            PHON.ONSET con ] ].

once_deg := adv_degree_spec_m_le &
 [ STEM < "once" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_once_x_deg_rel",
            PHON.ONSET con ] ].

once_more := adv_int_vp_le &
 [ STEM < "once", "more" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_once+more_a_1_rel",
            PHON.ONSET con ] ].

once_prd := p_subconj_prd_le &
 [ STEM < "once" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_once_x_subord_rel",
            PHON.ONSET con ] ].

one_adj := adj_one_nonprd_le &
 [ STEM < "one" >,
   SYNSEM.PHON.ONSET con ].

one_adj_digit := adj_one_nonprd_le &
 [ STEM < "1" >,
   SYNSEM.PHON.ONSET con ].

one_adj_fract := adj_one_nonprd_fract_le &
 [ STEM < "one" >,
   SYNSEM.PHON.ONSET con ].

one_another := n_pers_pro_one_another_le &
 [ STEM < "one", "another" >,
   SYNSEM.PHON.ONSET con ].

one_armed_a1 := adj_intrans_le &
 [ STEM < "one", "armed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_one+armed_a_1_rel",
            PHON.ONSET con ] ].

one_day := n_day_of_month_card_le &
 [ STEM < "one" >,
   SYNSEM [ LKEYS.KEYREL.CARG "1",
            PHON.ONSET con ] ].

one_day_num := n_day_of_month_card_le &
 [ STEM < "1" >,
   SYNSEM [ LKEYS.KEYREL.CARG "1",
            PHON.ONSET con ] ].

one_day_num_euro := n_day_of_month_euro_le &
 [ STEM < "1" >,
   SYNSEM [ LKEYS.KEYREL.CARG "1",
            PHON.ONSET con ] ].

one_day_num_yofc := n_day_of_month_card_yofc_le &
 [ STEM < "1" >,
   SYNSEM [ LKEYS.KEYREL.CARG "1",
            PHON.ONSET con ] ].

one_day_yofc := n_day_of_month_card_yofc_le &
 [ STEM < "one" >,
   SYNSEM [ LKEYS.KEYREL.CARG "1",
            PHON.ONSET con ] ].

one_digit_day := n_day_of_month_card_le &
 [ STEM < "onedigitersatz" >,
   SYNSEM [ LKEYS.KEYREL.CARG "onedigitersatz",
            PHON.ONSET con ] ].

one_digit_day_yofc := n_day_of_month_card_yofc_le &
 [ STEM < "onedigitersatz" >,
   SYNSEM [ LKEYS.KEYREL.CARG "onedigitersatz",
            PHON.ONSET con ] ].

one_digit_euro_day := n_day_of_month_euro_le &
 [ STEM < "onedigitersatz" >,
   SYNSEM [ LKEYS.KEYREL.CARG "onedigitersatz",
            PHON.ONSET con ] ].

one_digit_hour := n_hour_le &
 [ STEM < "onedigitersatz" >,
   SYNSEM [ LKEYS.KEYREL.CARG "onedigitersatz",
            PHON.ONSET con ] ].

one_eyed_a1 := adj_intrans_le &
 [ STEM < "one", "eyed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_one+eyed_a_1_rel",
            PHON.ONSET con ] ].

one_hour := n_hour_le &
 [ STEM < "one" >,
   SYNSEM [ LKEYS.KEYREL.CARG "1",
            PHON.ONSET con ] ].

one_hour_digit := n_hour_le &
 [ STEM < "1" >,
   SYNSEM [ LKEYS.KEYREL.CARG "1",
            PHON.ONSET con ] ].

one_or_more_d1 := det_part_pl_le &
 [ STEM < "one", "or", "more" >,
   SYNSEM [ LKEYS.ALTKEYREL.PRED "_one+or+more_a_1_rel",
            PHON.ONSET con ] ].

one_pro := n_generic_pro_one_le &
 [ STEM < "one" >,
   SYNSEM [ LKEYS [ ALTKEYREL.PRED pronoun_q_rel,
                    KEYREL.PRED "_one_n_1_rel" ],
            PHON.ONSET con ] ].

onedigitdomersatz := n_day_of_month_le &
 [ STEM < "onedigitordersatz" >,
   SYNSEM [ LKEYS.KEYREL.CARG "1digitdom",
            PHON.ONSET onset ] ].

onedigitordersatz := adj_bare_unspecified_ord_one_le &
 [ STEM < "onedigitordersatz" >,
   SYNSEM [ LKEYS.KEYREL [ CARG "dig1ersatz",
                             PRED const_rel ],
            PHON.ONSET onset ] ].

onedigitplur_n1 := n_plur_xmod_le &
 [ STEM < "onedigitersatz", "s" >,
   SYNSEM [ LKEYS.KEYREL.CARG "1digit",
            PHON.ONSET con ] ].

oneish := n_approx_hour_le &
 [ STEM < "oneish" >,
   SYNSEM [ LKEYS.KEYREL.CARG "1",
            PHON.ONSET con ] ].

ones_n1 := n_ones_le &
 [ STEM < "ones" >,
   SYNSEM.PHON.ONSET con ].

oneself_adv := adv_refl_pro_oneself_le &
 [ STEM < "oneself" >,
   SYNSEM.PHON.ONSET con ].

oneself_n1 := n_refl_pro_oneself_le &
 [ STEM < "oneself" >,
   SYNSEM.PHON.ONSET con ].

ongoing_a1 := adj_intrans_le &
 [ STEM < "ongoing" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ongoing_a_1_rel",
            PHON.ONSET voc ] ].

online_a1 := adj_intrans_le &
 [ STEM < "online" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_online_a_1_rel",
            PHON.ONSET voc ] ].

online_a2 := adj_intrans_le &
 [ STEM < "on", "line" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_online_a_1_rel",
            PHON.ONSET voc ] ].

online_a3 := adj_intrans_le &
 [ STEM < "on-", "line" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_online_a_1_rel",
            PHON.ONSET voc ] ].

online_nom1 := n_adv_pl_le &
 [ STEM < "online" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED _online_a_1_rel,
                    KEYREL.PRED place_n_rel ],
            PHON.ONSET voc ] ].

online_nom2 := n_adv_pl_le &
 [ STEM < "on", "line" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED _online_a_1_rel,
                    KEYREL.PRED place_n_rel ],
            PHON.ONSET voc ] ].

online_nom3 := n_adv_pl_le &
 [ STEM < "on-", "line" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED _online_a_1_rel,
                    KEYREL.PRED place_n_rel ],
            PHON.ONSET voc ] ].

only_a1 := adj_attr_nospec_le &
 [ STEM < "only" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_only_a_1_rel",
            PHON.ONSET voc ] ].

only_adv1 := adv_vp_aux_le &
 [ STEM < "only" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_only_a_1_rel",
            PHON.ONSET voc ] ].

only_adv2 := adv_s_pre_le &
 [ STEM < "only" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_only_a_1_rel",
            PHON.ONSET voc ] ].

only_adv3 := adv_vp_post_le &
 [ STEM < "only" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_only_a_1_rel",
            PHON.ONSET voc ] ].

only_deg := adv_degree_spec_jo_le &
 [ STEM < "only" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_only_x_deg_rel",
            PHON.ONSET voc ] ].

only_deg2 := adv_degree_spec_m_le &
 [ STEM < "only" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_only_x_deg_rel",
            PHON.ONSET voc ] ].

onshore_a1 := adj_intrans_le &
 [ STEM < "onshore" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_onshore_a_1_rel",
            PHON.ONSET voc ] ].

onshore_adv1 := adv_int_vp_post_le &
 [ STEM < "onshore" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_onshore_a_1_rel",
            PHON.ONSET voc ] ].

onto := p_le &
 [ STEM < "onto" >,
   SYNSEM [ LKEYS.KEYREL.PRED _onto_p_rel,
            PHON.ONSET voc ] ].

onto_prtcl := p_prtcl_le &
 [ STEM < "onto" >,
   SYNSEM [ LKEYS.KEYREL.PRED _onto_p_sel_rel,
            PHON.ONSET voc ] ].

onward_isect := adj_intrans_le &
 [ STEM < "onward" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_onward_a_1_rel",
            PHON.ONSET voc ] ].

onward_nom := n_adv_event_le &
 [ STEM < "onward" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED _onward_p_rel,
                    KEYREL.PRED place_n_rel ],
            PHON.ONSET voc ] ].

onwards_isect := adj_intrans_le &
 [ STEM < "onwards" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_onwards_a_1_rel",
            PHON.ONSET voc ] ].

onwards_nom := n_adv_event_le &
 [ STEM < "onwards" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED _onwards_p_rel,
                    KEYREL.PRED place_n_rel ],
            PHON.ONSET voc ] ].

oops_root_post := adv_s_post_word_nospec_le &
 [ STEM < "oops" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_oops_a_1_rel",
            PHON.ONSET voc ] ].

oops_root_pre := adv_s_pre_word_root_le &
 [ STEM < "oops" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_oops_a_1_rel",
            PHON.ONSET voc ] ].

open-air_a1 := adj_intrans_le &
 [ STEM < "open", "air" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_open+air_a_1_rel",
            PHON.ONSET voc ] ].

open-air_a2 := adj_intrans_le &
 [ STEM < "open-", "air" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_open+air_a_1_rel",
            PHON.ONSET voc ] ].

open_a1 := adj_intrans_le &
 [ STEM < "open" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_open_a_1_rel",
            PHON.ONSET voc ] ].

open_ended_a1 := adj_attr_intrans_le &
 [ STEM < "open", "ended" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_open+ended_a_1_rel",
            PHON.ONSET voc ] ].

open_ended_a2 := adj_pred_nomod_le &
 [ STEM < "open", "ended" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_open+ended_a_1_rel",
            PHON.ONSET voc ] ].

open_n1 := n_intr_sg_le &
 [ STEM < "open" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_open_n_1_rel",
            PHON.ONSET voc ] ].

open_plan_a1 := adj_intrans_le &
 [ STEM < "open", "plan" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_open+plan_a_1_rel",
            PHON.ONSET voc ] ].

open_prtcl := adj_prtcl_le &
 [ STEM < "open" >,
   SYNSEM [ LKEYS.KEYREL.PRED _open_a_sel_rel,
            PHON.ONSET voc ] ].

open_up_v1 := v_particle_np_le &
 [ STEM < "open" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_open_v_up_rel" ],
            PHON.ONSET voc ] ].

open_up_v2 := v_particle_le &
 [ STEM < "open" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_open_v_up_rel" ],
            PHON.ONSET voc ] ].

open_v1 := v_np_trans_le &
 [ STEM < "open" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_open_v_cause_rel",
            PHON.ONSET voc ] ].

open_v2 := v_unacc_dir_le &
 [ STEM < "open" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_open_v_1_rel",
            PHON.ONSET voc ] ].

opening_n1 := n_intr_le &
 [ STEM < "opening" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_opening_n_1_rel",
            PHON.ONSET voc ] ].

openly := adv_int_vp_le &
 [ STEM < "openly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_open_a_1_rel",
            PHON.ONSET voc ] ].

openness_n1 := n_mass_le &
 [ STEM < "openness" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_openness_n_1_rel",
            PHON.ONSET voc ] ].

opera_n1 := n_mass_count_le &
 [ STEM < "opera" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_opera_n_1_rel",
            PHON.ONSET voc ] ].

operate_v1 := v_np*_trans_le &
 [ STEM < "operate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_operate_v_1_rel",
            PHON.ONSET voc ] ].

operation_n1 := n_mass_count_ppof_le &
 [ STEM < "operation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_operation_n_of_rel",
            PHON.ONSET voc ] ].

operative_a1 := adj_intrans_le &
 [ STEM < "operative" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_operative_a_1_rel",
            PHON.ONSET voc ] ].

operator_n1 := n_ppof_le &
 [ STEM < "operator" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_operator_n_of_rel",
            PHON.ONSET voc ] ].

operetta_n1 := n_intr_le &
 [ STEM < "operetta" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_operetta_n_1_rel",
            PHON.ONSET voc ] ].

ophthalmologist_n1 := n_intr_le &
 [ STEM < "ophthalmologist" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ophthalmologist_n_1_rel",
            PHON.ONSET voc ] ].

opinion_n1 := n_mass_count_le &
 [ STEM < "opinion" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_opinion_n_1_rel",
            PHON.ONSET voc ] ].

opks_nd := n_proper_le &
 [ STEM < "opks" >,
   SYNSEM [ LKEYS.KEYREL.CARG "opks",
            PHON.ONSET voc ] ].

opo := n_proper_le &
 [ STEM < "opo" >,
   SYNSEM [ LKEYS.KEYREL.CARG "opo",
            PHON.ONSET voc ] ].

oppland_n1 := n_proper_le &
 [ STEM < "oppland" >,
   SYNSEM [ LKEYS.KEYREL.CARG "oppland",
            PHON.ONSET voc ] ].

opponent_n1 := n_intr_le &
 [ STEM < "opponent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_opponent_n_1_rel",
            PHON.ONSET voc ] ].

opportune_a1 := adj_intrans_le &
 [ STEM < "opportune" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_opportune_a_1_rel",
            PHON.ONSET voc ] ].

opportunely := adv_int_vp_post_le &
 [ STEM < "opportunely" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_opportune_a_1_rel",
            PHON.ONSET voc ] ].

opportunity_n1 := n_intr_le &
 [ STEM < "opportunity" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_opportunity_n_1_rel",
            PHON.ONSET voc ] ].

opportunity_n2 := n_vpcomp_le &
 [ STEM < "opportunity" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_opportunity_n_1_rel",
            PHON.ONSET voc ] ].

oppose_v1 := v_np_trans_le &
 [ STEM < "oppose" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_oppose_v_1_rel",
            PHON.ONSET voc ] ].

opposed_isect := adj_trans_le &
 [ STEM < "opposed" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_opposed_a_to_rel" ],
            PHON.ONSET voc ] ].

opposite := p_le &
 [ STEM < "opposite" >,
   SYNSEM [ LKEYS.KEYREL.PRED _opposite_p_rel,
            PHON.ONSET voc ] ].

opposite_a1 := adj_trans_le &
 [ STEM < "opposite" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_opposite_a_to_rel" ],
            PHON.ONSET voc ] ].

opposite_n1 := n_no_cmpnd_le &
 [ STEM < "opposite" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_opposite_n_1_rel",
            PHON.ONSET voc ] ].

opposition_n1 := n_mass_le &
 [ STEM < "opposition" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_opposition_n_1_rel",
            PHON.ONSET voc ] ].

oppress_v1 := v_np_trans_le &
 [ STEM < "oppress" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_oppress_v_1_rel",
            PHON.ONSET voc ] ].

oppression_n1 := n_mass_count_ppof_le &
 [ STEM < "oppression" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_oppression_n_of_rel",
            PHON.ONSET voc ] ].

oppressive_isect := adj_intrans_le &
 [ STEM < "oppressive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_oppressive_a_1_rel",
            PHON.ONSET voc ] ].

oppressively := adv_int_vp_le &
 [ STEM < "oppressively" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_oppressive_a_1_rel",
            PHON.ONSET voc ] ].

opt_out+of_v1 := v_empty_prep_intrans_le &
 [ STEM < "opt" >,
   SYNSEM [ LKEYS [ --COMPKEY _out+of_p_sel_rel,
                    KEYREL.PRED "_opt_v_out+of_rel" ],
            PHON.ONSET voc ] ].

opt_out_v1 := v_particle_le &
 [ STEM < "opt" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_opt_v_out_rel" ],
            PHON.ONSET voc ] ].

opt_v1 := v_prep_intrans_le &
 [ STEM < "opt" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_rel,
                    KEYREL.PRED "_opt_v_for_rel" ],
            PHON.ONSET voc ] ].

opt_v2 := v_subj_equi_le &
 [ STEM < "opt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_opt_v_1_rel",
            PHON.ONSET voc ] ].

optical_a1 := adj_attr_intrans_le &
 [ STEM < "optical" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_optical_a_1_rel",
            PHON.ONSET voc ] ].

optimal_a1 := adj_intrans_le &
 [ STEM < "optimal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_optimal_a_1_rel",
            PHON.ONSET voc ] ].

optimally := adv_int_vp_le &
 [ STEM < "optimally" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_optimal_a_1_rel",
            PHON.ONSET voc ] ].

optimistic_a1 := adj_intrans_le &
 [ STEM < "optimistic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_optimistic_a_1_rel",
            PHON.ONSET voc ] ].

optimistically_a1 := adv_int_vp_le &
 [ STEM < "optimistically" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_optimistic_a_1_rel",
            PHON.ONSET voc ] ].

optimize_v1 := v_np*_trans_le &
 [ STEM < "optimize" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_optimize_v_1_rel",
            PHON.ONSET voc ] ].

option_n1 := n_intr_nosort_le &
 [ STEM < "option" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_option_n_1_rel",
            PHON.ONSET voc ] ].

option_n2 := n_vpcomp_le &
 [ STEM < "option" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_option_n_1_rel",
            PHON.ONSET voc ] ].

optional_a1 := adj_trans_le &
 [ STEM < "optional" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_optional_a_for_rel" ],
            PHON.ONSET voc ] ].

optional_a2 := adj_reg_atrans_le &
 [ STEM < "optional" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_optional_a_for_rel",
            PHON.ONSET voc ] ].

optional_a3 := adj_reg_atrans_cp_le &
 [ STEM < "optional" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_optional_a_for_rel",
            PHON.ONSET voc ] ].

optionally := adv_int_vp_le &
 [ STEM < "optionally" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_optional_a_for_rel",
            PHON.ONSET voc ] ].

or_conj_1 := conj_complex_or_le &
 [ STEM < "or" >,
   SYNSEM.PHON.ONSET voc ].

or_conj_1a := conj_complex_or_le &
 [ STEM < "_or" >,
   SYNSEM.PHON.ONSET voc ].

or_conj_2 := conj_complex_or_either_le &
 [ STEM < "or" >,
   SYNSEM.PHON.ONSET voc ].

or_conj_2a := conj_complex_or_either_le &
 [ STEM < "_or" >,
   SYNSEM.PHON.ONSET voc ].

or_else_1 := conj_complex_or_else_le &
 [ STEM < "or", "else" >,
   SYNSEM.PHON.ONSET voc ].

or_else_adv1 := adv_int_vp_le &
 [ STEM < "or", "else" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_or+else_a_1_rel",
            PHON.ONSET voc ] ].

or_not_adv1 := adv_int_vp_post_le &
 [ STEM < "or", "not" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_or+not_a_1_rel",
            PHON.ONSET voc ] ].

or_so_disc := adv_disc_like_posth_le &
 [ STEM < "or", "so" >,
   SYNSEM [ LKEYS.KEYREL.CARG "or_so",
            PHON.ONSET voc ] ].

or_something_tag := adv_s_post_word_nospec_le &
 [ STEM < "or", "something" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_or+something_a_1_rel",
            PHON.ONSET voc ] ].

or_what_adv1 := adv_int_vp_post_le &
 [ STEM < "or", "what" >,
   SYNSEM [ LKEYS.KEYREL.PRED _or+what_a_1_rel,
            PHON.ONSET voc ] ].

or_what_tag := adv_s_post_word_nospec_le &
 [ STEM < "or", "what" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_or+what_a_1_rel",
            PHON.ONSET voc ] ].

or_whatever_scop := adv_int_vp_post_le &
 [ STEM < "or", "whatever" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_or+whatever_a_1_rel",
            PHON.ONSET voc ] ].

orally_adv := adv_int_vp_le &
 [ STEM < "orally" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_oral_a_1_rel",
            PHON.ONSET voc ] ].

orange_adj := adj_intrans_le &
 [ STEM < "orange" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_orange_a_1_rel",
            PHON.ONSET voc ] ].

orange_cured_a1 := adj_intrans_le &
 [ STEM < "orange-", "cured" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_orange+cured_a_1_rel",
            PHON.ONSET voc ] ].

orange_cured_a2 := adj_intrans_le &
 [ STEM < "orange", "cured" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_orange+cured_a_1_rel",
            PHON.ONSET voc ] ].

orange_n1 := n_mass_count_le &
 [ STEM < "orange" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_orange_n_1_rel",
            PHON.ONSET voc ] ].

orator_n1 := n_intr_le &
 [ STEM < "orator" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_orator_n_1_rel",
            PHON.ONSET voc ] ].

orbit_n1 := n_mass_count_le &
 [ STEM < "orbit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_orbit_n_1_rel",
            PHON.ONSET voc ] ].

orbitz_n1 := n_proper_le &
 [ STEM < "orbitz" >,
   SYNSEM [ LKEYS.KEYREL.CARG "orbitz",
            PHON.ONSET voc ] ].

orchard_n1 := n_intr_le &
 [ STEM < "orchard" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_orchard_n_1_rel",
            PHON.ONSET voc ] ].

orchestra_n1 := n_intr_le &
 [ STEM < "orchestra" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_orchestra_n_1_rel",
            PHON.ONSET voc ] ].

orchid_n1 := n_intr_le &
 [ STEM < "orchid" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_orchid_n_1_rel",
            PHON.ONSET voc ] ].

orchid_n2 := n_mass_kind_le &
 [ STEM < "orchid" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_orchid_n_kind_rel",
            PHON.ONSET voc ] ].

ord10ersatz := adj_bare_unspecified_ord_two_le &
 [ STEM < "10th" >,
   SYNSEM [ LKEYS.KEYREL.CARG "10",
            PHON.ONSET con ] ].

ord11ersatz := adj_bare_unspecified_ord_two_le &
 [ STEM < "11th" >,
   SYNSEM [ LKEYS.KEYREL.CARG "11",
            PHON.ONSET voc ] ].

ord12ersatz := adj_bare_unspecified_ord_two_le &
 [ STEM < "12th" >,
   SYNSEM [ LKEYS.KEYREL.CARG "12",
            PHON.ONSET con ] ].

ord13ersatz := adj_bare_unspecified_ord_two_le &
 [ STEM < "13th" >,
   SYNSEM [ LKEYS.KEYREL.CARG "13",
            PHON.ONSET con ] ].

ord14ersatz := adj_bare_unspecified_ord_two_le &
 [ STEM < "14th" >,
   SYNSEM [ LKEYS.KEYREL.CARG "14",
            PHON.ONSET con ] ].

ord15ersatz := adj_bare_unspecified_ord_two_le &
 [ STEM < "15th" >,
   SYNSEM [ LKEYS.KEYREL.CARG "15",
            PHON.ONSET con ] ].

ord16ersatz := adj_bare_unspecified_ord_two_le &
 [ STEM < "16th" >,
   SYNSEM [ LKEYS.KEYREL.CARG "16",
            PHON.ONSET con ] ].

ord17ersatz := adj_bare_unspecified_ord_two_le &
 [ STEM < "17th" >,
   SYNSEM [ LKEYS.KEYREL.CARG "17",
            PHON.ONSET con ] ].

ord18ersatz := adj_bare_unspecified_ord_two_le &
 [ STEM < "18th" >,
   SYNSEM [ LKEYS.KEYREL.CARG "18",
            PHON.ONSET voc ] ].

ord19ersatz := adj_bare_unspecified_ord_two_le &
 [ STEM < "19th" >,
   SYNSEM [ LKEYS.KEYREL.CARG "19",
            PHON.ONSET con ] ].

ord1ersatz := adj_bare_unspecified_ord_one_le &
 [ STEM < "1st" >,
   SYNSEM [ LKEYS.KEYREL.CARG "1",
            PHON.ONSET con ] ].

ord20ersatz := adj_bare_unspecified_ord_two_le &
 [ STEM < "20th" >,
   SYNSEM [ LKEYS.KEYREL.CARG "20",
            PHON.ONSET con ] ].

ord21ersatz := adj_bare_unspecified_ord_two_le &
 [ STEM < "21st" >,
   SYNSEM [ LKEYS.KEYREL.CARG "21",
            PHON.ONSET con ] ].

ord22ersatz := adj_bare_unspecified_ord_two_le &
 [ STEM < "22nd" >,
   SYNSEM [ LKEYS.KEYREL.CARG "22",
            PHON.ONSET con ] ].

ord23ersatz := adj_bare_unspecified_ord_two_le &
 [ STEM < "23rd" >,
   SYNSEM [ LKEYS.KEYREL.CARG "23",
            PHON.ONSET con ] ].

ord24ersatz := adj_bare_unspecified_ord_two_le &
 [ STEM < "24th" >,
   SYNSEM [ LKEYS.KEYREL.CARG "24",
            PHON.ONSET con ] ].

ord25ersatz := adj_bare_unspecified_ord_two_le &
 [ STEM < "25th" >,
   SYNSEM [ LKEYS.KEYREL.CARG "25",
            PHON.ONSET con ] ].

ord26ersatz := adj_bare_unspecified_ord_two_le &
 [ STEM < "26th" >,
   SYNSEM [ LKEYS.KEYREL.CARG "26",
            PHON.ONSET con ] ].

ord27ersatz := adj_bare_unspecified_ord_two_le &
 [ STEM < "27th" >,
   SYNSEM [ LKEYS.KEYREL.CARG "27",
            PHON.ONSET con ] ].

ord28ersatz := adj_bare_unspecified_ord_two_le &
 [ STEM < "28th" >,
   SYNSEM [ LKEYS.KEYREL.CARG "28",
            PHON.ONSET con ] ].

ord29ersatz := adj_bare_unspecified_ord_two_le &
 [ STEM < "29th" >,
   SYNSEM [ LKEYS.KEYREL.CARG "29",
            PHON.ONSET con ] ].

ord2ersatz := adj_bare_unspecified_ord_one_le &
 [ STEM < "2nd" >,
   SYNSEM [ LKEYS.KEYREL.CARG "2",
            PHON.ONSET con ] ].

ord30ersatz := adj_bare_unspecified_ord_two_le &
 [ STEM < "30th" >,
   SYNSEM [ LKEYS.KEYREL.CARG "30",
            PHON.ONSET con ] ].

ord31ersatz := adj_bare_unspecified_ord_two_le &
 [ STEM < "31st" >,
   SYNSEM [ LKEYS.KEYREL.CARG "31",
            PHON.ONSET con ] ].

ord32ersatz := adj_bare_unspecified_ord_two_le &
 [ STEM < "32nd" >,
   SYNSEM [ LKEYS.KEYREL.CARG "32",
            PHON.ONSET con ] ].

ord33ersatz := adj_bare_unspecified_ord_two_le &
 [ STEM < "33rd" >,
   SYNSEM [ LKEYS.KEYREL.CARG "33",
            PHON.ONSET con ] ].

ord34ersatz := adj_bare_unspecified_ord_two_le &
 [ STEM < "34th" >,
   SYNSEM [ LKEYS.KEYREL.CARG "34",
            PHON.ONSET con ] ].

ord35ersatz := adj_bare_unspecified_ord_two_le &
 [ STEM < "35th" >,
   SYNSEM [ LKEYS.KEYREL.CARG "35",
            PHON.ONSET con ] ].

ord36ersatz := adj_bare_unspecified_ord_two_le &
 [ STEM < "36th" >,
   SYNSEM [ LKEYS.KEYREL.CARG "36",
            PHON.ONSET con ] ].

ord37ersatz := adj_bare_unspecified_ord_two_le &
 [ STEM < "37th" >,
   SYNSEM [ LKEYS.KEYREL.CARG "37",
            PHON.ONSET con ] ].

ord38ersatz := adj_bare_unspecified_ord_two_le &
 [ STEM < "38th" >,
   SYNSEM [ LKEYS.KEYREL.CARG "38",
            PHON.ONSET con ] ].

ord39ersatz := adj_bare_unspecified_ord_two_le &
 [ STEM < "39th" >,
   SYNSEM [ LKEYS.KEYREL.CARG "39",
            PHON.ONSET con ] ].

ord3ersatz := adj_bare_unspecified_ord_one_le &
 [ STEM < "3rd" >,
   SYNSEM [ LKEYS.KEYREL.CARG "3",
            PHON.ONSET con ] ].

ord40ersatz := adj_bare_unspecified_ord_two_le &
 [ STEM < "40th" >,
   SYNSEM [ LKEYS.KEYREL.CARG "40",
            PHON.ONSET con ] ].

ord41ersatz := adj_bare_unspecified_ord_two_le &
 [ STEM < "41st" >,
   SYNSEM [ LKEYS.KEYREL.CARG "41",
            PHON.ONSET con ] ].

ord42ersatz := adj_bare_unspecified_ord_two_le &
 [ STEM < "42nd" >,
   SYNSEM [ LKEYS.KEYREL.CARG "42",
            PHON.ONSET con ] ].

ord43ersatz := adj_bare_unspecified_ord_two_le &
 [ STEM < "43rd" >,
   SYNSEM [ LKEYS.KEYREL.CARG "43",
            PHON.ONSET con ] ].

ord44ersatz := adj_bare_unspecified_ord_two_le &
 [ STEM < "44th" >,
   SYNSEM [ LKEYS.KEYREL.CARG "44",
            PHON.ONSET con ] ].

ord45ersatz := adj_bare_unspecified_ord_two_le &
 [ STEM < "45th" >,
   SYNSEM [ LKEYS.KEYREL.CARG "45",
            PHON.ONSET con ] ].

ord46ersatz := adj_bare_unspecified_ord_two_le &
 [ STEM < "46th" >,
   SYNSEM [ LKEYS.KEYREL.CARG "46",
            PHON.ONSET con ] ].

ord47ersatz := adj_bare_unspecified_ord_two_le &
 [ STEM < "47th" >,
   SYNSEM [ LKEYS.KEYREL.CARG "47",
            PHON.ONSET con ] ].

ord48ersatz := adj_bare_unspecified_ord_two_le &
 [ STEM < "48th" >,
   SYNSEM [ LKEYS.KEYREL.CARG "48",
            PHON.ONSET con ] ].

ord49ersatz := adj_bare_unspecified_ord_two_le &
 [ STEM < "49th" >,
   SYNSEM [ LKEYS.KEYREL.CARG "49",
            PHON.ONSET con ] ].

ord4ersatz := adj_bare_unspecified_ord_one_le &
 [ STEM < "4th" >,
   SYNSEM [ LKEYS.KEYREL.CARG "4",
            PHON.ONSET con ] ].

ord50ersatz := adj_bare_unspecified_ord_two_le &
 [ STEM < "50th" >,
   SYNSEM [ LKEYS.KEYREL.CARG "50",
            PHON.ONSET con ] ].

ord51ersatz := adj_bare_unspecified_ord_two_le &
 [ STEM < "51st" >,
   SYNSEM [ LKEYS.KEYREL.CARG "51",
            PHON.ONSET con ] ].

ord52ersatz := adj_bare_unspecified_ord_two_le &
 [ STEM < "52nd" >,
   SYNSEM [ LKEYS.KEYREL.CARG "52",
            PHON.ONSET con ] ].

ord53ersatz := adj_bare_unspecified_ord_two_le &
 [ STEM < "53rd" >,
   SYNSEM [ LKEYS.KEYREL.CARG "53",
            PHON.ONSET con ] ].

ord54ersatz := adj_bare_unspecified_ord_two_le &
 [ STEM < "54th" >,
   SYNSEM [ LKEYS.KEYREL.CARG "54",
            PHON.ONSET con ] ].

ord55ersatz := adj_bare_unspecified_ord_two_le &
 [ STEM < "55th" >,
   SYNSEM [ LKEYS.KEYREL.CARG "55",
            PHON.ONSET con ] ].

ord56ersatz := adj_bare_unspecified_ord_two_le &
 [ STEM < "56th" >,
   SYNSEM [ LKEYS.KEYREL.CARG "56",
            PHON.ONSET con ] ].

ord57ersatz := adj_bare_unspecified_ord_two_le &
 [ STEM < "57th" >,
   SYNSEM [ LKEYS.KEYREL.CARG "57",
            PHON.ONSET con ] ].

ord58ersatz := adj_bare_unspecified_ord_two_le &
 [ STEM < "58th" >,
   SYNSEM [ LKEYS.KEYREL.CARG "58",
            PHON.ONSET con ] ].

ord59ersatz := adj_bare_unspecified_ord_two_le &
 [ STEM < "59th" >,
   SYNSEM [ LKEYS.KEYREL.CARG "59",
            PHON.ONSET con ] ].

ord5ersatz := adj_bare_unspecified_ord_one_le &
 [ STEM < "5th" >,
   SYNSEM [ LKEYS.KEYREL.CARG "5",
            PHON.ONSET con ] ].

ord60ersatz := adj_bare_unspecified_ord_two_le &
 [ STEM < "60th" >,
   SYNSEM [ LKEYS.KEYREL.CARG "60",
            PHON.ONSET con ] ].

ord61ersatz := adj_bare_unspecified_ord_two_le &
 [ STEM < "61st" >,
   SYNSEM [ LKEYS.KEYREL.CARG "61",
            PHON.ONSET con ] ].

ord62ersatz := adj_bare_unspecified_ord_two_le &
 [ STEM < "62nd" >,
   SYNSEM [ LKEYS.KEYREL.CARG "62",
            PHON.ONSET con ] ].

ord63ersatz := adj_bare_unspecified_ord_two_le &
 [ STEM < "63rd" >,
   SYNSEM [ LKEYS.KEYREL.CARG "63",
            PHON.ONSET con ] ].

ord64ersatz := adj_bare_unspecified_ord_two_le &
 [ STEM < "64th" >,
   SYNSEM [ LKEYS.KEYREL.CARG "64",
            PHON.ONSET con ] ].

ord65ersatz := adj_bare_unspecified_ord_two_le &
 [ STEM < "65th" >,
   SYNSEM [ LKEYS.KEYREL.CARG "65",
            PHON.ONSET con ] ].

ord66ersatz := adj_bare_unspecified_ord_two_le &
 [ STEM < "66th" >,
   SYNSEM [ LKEYS.KEYREL.CARG "66",
            PHON.ONSET con ] ].

ord67ersatz := adj_bare_unspecified_ord_two_le &
 [ STEM < "67th" >,
   SYNSEM [ LKEYS.KEYREL.CARG "67",
            PHON.ONSET con ] ].

ord68ersatz := adj_bare_unspecified_ord_two_le &
 [ STEM < "68th" >,
   SYNSEM [ LKEYS.KEYREL.CARG "68",
            PHON.ONSET con ] ].

ord69ersatz := adj_bare_unspecified_ord_two_le &
 [ STEM < "69th" >,
   SYNSEM [ LKEYS.KEYREL.CARG "69",
            PHON.ONSET con ] ].

ord6ersatz := adj_bare_unspecified_ord_one_le &
 [ STEM < "6th" >,
   SYNSEM [ LKEYS.KEYREL.CARG "6",
            PHON.ONSET con ] ].

ord70ersatz := adj_bare_unspecified_ord_two_le &
 [ STEM < "70th" >,
   SYNSEM [ LKEYS.KEYREL.CARG "70",
            PHON.ONSET con ] ].

ord71ersatz := adj_bare_unspecified_ord_two_le &
 [ STEM < "71st" >,
   SYNSEM [ LKEYS.KEYREL.CARG "71",
            PHON.ONSET con ] ].

ord72ersatz := adj_bare_unspecified_ord_two_le &
 [ STEM < "72nd" >,
   SYNSEM [ LKEYS.KEYREL.CARG "72",
            PHON.ONSET con ] ].

ord73ersatz := adj_bare_unspecified_ord_two_le &
 [ STEM < "73rd" >,
   SYNSEM [ LKEYS.KEYREL.CARG "73",
            PHON.ONSET con ] ].

ord74ersatz := adj_bare_unspecified_ord_two_le &
 [ STEM < "74th" >,
   SYNSEM [ LKEYS.KEYREL.CARG "74",
            PHON.ONSET con ] ].

ord75ersatz := adj_bare_unspecified_ord_two_le &
 [ STEM < "75th" >,
   SYNSEM [ LKEYS.KEYREL.CARG "75",
            PHON.ONSET con ] ].

ord76ersatz := adj_bare_unspecified_ord_two_le &
 [ STEM < "76th" >,
   SYNSEM [ LKEYS.KEYREL.CARG "76",
            PHON.ONSET con ] ].

ord77ersatz := adj_bare_unspecified_ord_two_le &
 [ STEM < "77th" >,
   SYNSEM [ LKEYS.KEYREL.CARG "77",
            PHON.ONSET con ] ].

ord78ersatz := adj_bare_unspecified_ord_two_le &
 [ STEM < "78th" >,
   SYNSEM [ LKEYS.KEYREL.CARG "78",
            PHON.ONSET con ] ].

ord79ersatz := adj_bare_unspecified_ord_two_le &
 [ STEM < "79th" >,
   SYNSEM [ LKEYS.KEYREL.CARG "79",
            PHON.ONSET con ] ].

ord7ersatz := adj_bare_unspecified_ord_one_le &
 [ STEM < "7th" >,
   SYNSEM [ LKEYS.KEYREL.CARG "7",
            PHON.ONSET con ] ].

ord80ersatz := adj_bare_unspecified_ord_two_le &
 [ STEM < "80th" >,
   SYNSEM [ LKEYS.KEYREL.CARG "80",
            PHON.ONSET voc ] ].

ord81ersatz := adj_bare_unspecified_ord_two_le &
 [ STEM < "81st" >,
   SYNSEM [ LKEYS.KEYREL.CARG "81",
            PHON.ONSET voc ] ].

ord82ersatz := adj_bare_unspecified_ord_two_le &
 [ STEM < "82nd" >,
   SYNSEM [ LKEYS.KEYREL.CARG "82",
            PHON.ONSET voc ] ].

ord83ersatz := adj_bare_unspecified_ord_two_le &
 [ STEM < "83rd" >,
   SYNSEM [ LKEYS.KEYREL.CARG "83",
            PHON.ONSET voc ] ].

ord84ersatz := adj_bare_unspecified_ord_two_le &
 [ STEM < "84th" >,
   SYNSEM [ LKEYS.KEYREL.CARG "84",
            PHON.ONSET voc ] ].

ord85ersatz := adj_bare_unspecified_ord_two_le &
 [ STEM < "85th" >,
   SYNSEM [ LKEYS.KEYREL.CARG "85",
            PHON.ONSET voc ] ].

ord86ersatz := adj_bare_unspecified_ord_two_le &
 [ STEM < "86th" >,
   SYNSEM [ LKEYS.KEYREL.CARG "86",
            PHON.ONSET voc ] ].

ord87ersatz := adj_bare_unspecified_ord_two_le &
 [ STEM < "87th" >,
   SYNSEM [ LKEYS.KEYREL.CARG "87",
            PHON.ONSET voc ] ].

ord88ersatz := adj_bare_unspecified_ord_two_le &
 [ STEM < "88th" >,
   SYNSEM [ LKEYS.KEYREL.CARG "88",
            PHON.ONSET voc ] ].

ord89ersatz := adj_bare_unspecified_ord_two_le &
 [ STEM < "89th" >,
   SYNSEM [ LKEYS.KEYREL.CARG "89",
            PHON.ONSET voc ] ].

ord8ersatz := adj_bare_unspecified_ord_one_le &
 [ STEM < "8th" >,
   SYNSEM [ LKEYS.KEYREL.CARG "8",
            PHON.ONSET voc ] ].

ord90ersatz := adj_bare_unspecified_ord_two_le &
 [ STEM < "90th" >,
   SYNSEM [ LKEYS.KEYREL.CARG "90",
            PHON.ONSET con ] ].

ord91ersatz := adj_bare_unspecified_ord_two_le &
 [ STEM < "91st" >,
   SYNSEM [ LKEYS.KEYREL.CARG "91",
            PHON.ONSET con ] ].

ord92ersatz := adj_bare_unspecified_ord_two_le &
 [ STEM < "92nd" >,
   SYNSEM [ LKEYS.KEYREL.CARG "92",
            PHON.ONSET con ] ].

ord93ersatz := adj_bare_unspecified_ord_two_le &
 [ STEM < "93rd" >,
   SYNSEM [ LKEYS.KEYREL.CARG "93",
            PHON.ONSET con ] ].

ord94ersatz := adj_bare_unspecified_ord_two_le &
 [ STEM < "94th" >,
   SYNSEM [ LKEYS.KEYREL.CARG "94",
            PHON.ONSET con ] ].

ord95ersatz := adj_bare_unspecified_ord_two_le &
 [ STEM < "95th" >,
   SYNSEM [ LKEYS.KEYREL.CARG "95",
            PHON.ONSET con ] ].

ord96ersatz := adj_bare_unspecified_ord_two_le &
 [ STEM < "96th" >,
   SYNSEM [ LKEYS.KEYREL.CARG "96",
            PHON.ONSET con ] ].

ord97ersatz := adj_bare_unspecified_ord_two_le &
 [ STEM < "97th" >,
   SYNSEM [ LKEYS.KEYREL.CARG "97",
            PHON.ONSET con ] ].

ord98ersatz := adj_bare_unspecified_ord_two_le &
 [ STEM < "98th" >,
   SYNSEM [ LKEYS.KEYREL.CARG "98",
            PHON.ONSET con ] ].

ord99ersatz := adj_bare_unspecified_ord_two_le &
 [ STEM < "99th" >,
   SYNSEM [ LKEYS.KEYREL.CARG "99",
            PHON.ONSET con ] ].

ord9ersatz := adj_bare_unspecified_ord_one_le &
 [ STEM < "9th" >,
   SYNSEM [ LKEYS.KEYREL.CARG "9",
            PHON.ONSET con ] ].

ord_gle := adj_bare_unspecified_ord_three_le &
 [ STEM < "_ord_" >,
   SYNSEM [ LKEYS.KEYREL.CARG "_ord_",
            PHON.ONSET con ] ].

ordain_v1 := v_np_trans_le &
 [ STEM < "ordain" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ordain_v_1_rel",
            PHON.ONSET voc ] ].

ordain_v2 := v_cp_prop_non_trans_le &
 [ STEM < "ordain" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ordain_v_1_rel",
            PHON.ONSET voc ] ].

ordain_v3 := v_obj_equi_le &
 [ STEM < "ordain" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ordain_v_1_rel",
            PHON.ONSET voc ] ].

ordeal_n1 := n_intr_le &
 [ STEM < "ordeal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ordeal_n_1_rel",
            PHON.ONSET voc ] ].

order_abb_n1 := n_intr_le &
 [ STEM < "ord" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_order_n_of_rel",
            PHON.ONSET voc ] ].

order_abb_ttl := n_title_le &
 [ STEM < "ord" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_order_n_of_rel",
            PHON.ONSET voc ] ].

order_abb_ttl_2 := n_title_le &
 [ STEM < "ord." >,
   SYNSEM [ LKEYS.KEYREL.PRED "_order_n_of_rel",
            PHON.ONSET voc ] ].

order_i_n1 := n_bare_le &
 [ STEM < "order" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_order_n_of_rel",
            PHON.ONSET voc ] ].

order_n1 := n_ppof_nosort_le &
 [ STEM < "order" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_order_n_of_rel",
            PHON.ONSET voc ] ].

order_n1a := n_ppof_nosort_le &
 [ STEM < "_order" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_order_n_of_rel",
            PHON.ONSET voc ] ].

order_n2 := n_ppcomp_oblig_le &
 [ STEM < "order" >,
   SYNSEM [ LKEYS [ --COMPKEY _from_p_sel_rel,
                    KEYREL.PRED "_order_n_from_rel" ],
            PHON.ONSET voc ] ].

order_n2a := n_ppcomp_oblig_le &
 [ STEM < "_order" >,
   SYNSEM [ LKEYS [ --COMPKEY _from_p_sel_rel,
                    KEYREL.PRED "_order_n_from_rel" ],
            PHON.ONSET voc ] ].

order_status_n1 := n_mass_count_le &
 [ STEM < "order-", "status" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_order+status_n_1_rel",
            PHON.ONSET voc ] ].

order_ttl := n_title_le &
 [ STEM < "order" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_order_n_1_rel",
            PHON.ONSET voc ] ].

order_ttla := n_title_le &
 [ STEM < "_order" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_order_n_1_rel",
            PHON.ONSET voc ] ].

order_v1 := v_np*_trans_le &
 [ STEM < "order" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_order_v_1_rel",
            PHON.ONSET voc ] ].

order_v2 := v_obj_equi_le &
 [ STEM < "order" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_order_v_1_rel",
            PHON.ONSET voc ] ].

order_v3 := v_np_prep_trans_le &
 [ STEM < "order" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _from_p_rel,
                    KEYREL.PRED "_order_v_1_rel" ],
            PHON.ONSET voc ] ].

order_v4 := v_ditrans_only_le &
 [ STEM < "order" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_order_v_1_rel",
            PHON.ONSET voc ] ].

orderly_a1 := adj_intrans_le &
 [ STEM < "orderly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_orderly_a_1_rel",
            PHON.ONSET voc ] ].

orderly_n1 := n_intr_le &
 [ STEM < "orderly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_orderly_n_1_rel",
            PHON.ONSET voc ] ].

ordinal_a1 := adj_intrans_le &
 [ STEM < "ordinal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ordinal_a_1_rel",
            PHON.ONSET voc ] ].

ordinal_n1 := n_intr_le &
 [ STEM < "ordinal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ordinal_n_1_rel",
            PHON.ONSET voc ] ].

ordinance_n1 := n_intr_le &
 [ STEM < "ordinance" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ordinance_n_1_rel",
            PHON.ONSET voc ] ].

ordinarily_adv1 := adv_int_vp_le &
 [ STEM < "ordinarily" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ordinary_a_1_rel",
            PHON.ONSET voc ] ].

ordinary_a1 := adj_intrans_le &
 [ STEM < "ordinary" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ordinary_a_1_rel",
            PHON.ONSET voc ] ].

ordination_n1 := n_mass_count_le &
 [ STEM < "ordination" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ordination_n_1_rel",
            PHON.ONSET voc ] ].

ore_n1 := n_intr_le &
 [ STEM < "ore" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ore_n_1_rel",
            PHON.ONSET voc ] ].

oregon_n1 := n_proper_le &
 [ STEM < "oregon" >,
   SYNSEM [ LKEYS.KEYREL.CARG "oregon",
            PHON.ONSET voc ] ].

oregon_n2 := n_proper_abb_le &
 [ STEM < "_or" >,
   SYNSEM [ LKEYS.KEYREL.CARG "oregon",
            PHON.ONSET voc ] ].

organ_n1 := n_intr_le &
 [ STEM < "organ" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_organ_n_1_rel",
            PHON.ONSET voc ] ].

organic_a1 := adj_intrans_le &
 [ STEM < "organic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_organic_a_1_rel",
            PHON.ONSET voc ] ].

organise_v1 := v_np_trans_le &
 [ STEM < "organise" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_organise_v_1_rel",
            PHON.ONSET voc ] ].

organism_n1 := n_intr_le &
 [ STEM < "organism" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_organism_n_1_rel",
            PHON.ONSET voc ] ].

organization_n1 := n_intr_le &
 [ STEM < "organization" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_organization_n_1_rel",
            PHON.ONSET voc ] ].

organizational_a1 := adj_intrans_le &
 [ STEM < "organizational" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_organizational_a_1_rel",
            PHON.ONSET voc ] ].

organizationally_isect := adv_int_vp_le &
 [ STEM < "organizationally" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_organizational_a_1_rel",
            PHON.ONSET voc ] ].

organize_v1 := v_np_trans_le &
 [ STEM < "organize" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_organize_v_1_rel",
            PHON.ONSET voc ] ].

organizer_n1 := n_ppof_le &
 [ STEM < "organizer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_organizer_n_of_rel",
            PHON.ONSET voc ] ].

orient_n1 := n_intr_named_le &
 [ STEM < "orient" >,
   SYNSEM [ LKEYS.KEYREL.CARG "orient",
            PHON.ONSET voc ] ].

orient_v1 := v_np*_trans_le &
 [ STEM < "orient" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_orient_v_1_rel",
            PHON.ONSET voc ] ].

oriental_a1 := adj_intrans_le &
 [ STEM < "oriental" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_oriental_a_1_rel",
            PHON.ONSET voc ] ].

orientate_v1 := v_np*_trans_le &
 [ STEM < "orientate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_orientate_v_1_rel",
            PHON.ONSET voc ] ].

orientate_v2 := v_np*_prep_trans_le &
 [ STEM < "orientate" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _to_p_rel,
                    KEYREL.PRED "_orientate_v_1_rel" ],
            PHON.ONSET voc ] ].

orientation_n1 := n_mass_count_le &
 [ STEM < "orientation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_orientation_n_1_rel",
            PHON.ONSET voc ] ].

orienteering_n1 := n_mass_le &
 [ STEM < "orienteering" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_orienteering_n_1_rel",
            PHON.ONSET voc ] ].

orifice_n1 := n_intr_le &
 [ STEM < "orifice" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_orifice_n_1_rel",
            PHON.ONSET voc ] ].

orig_abb := adv_int_vp_le &
 [ STEM < "orig." >,
   SYNSEM [ LKEYS.KEYREL.PRED "_original_a_1_rel",
            PHON.ONSET voc ] ].

orig_abb_2 := adv_int_vp_le &
 [ STEM < "orig" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_original_a_1_rel",
            PHON.ONSET voc ] ].

origin_n1 := n_intr_le &
 [ STEM < "origin" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_origin_n_1_rel",
            PHON.ONSET voc ] ].

original_a1 := adj_intrans_le &
 [ STEM < "original" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_original_a_1_rel",
            PHON.ONSET voc ] ].

original_equipment_manufacturer_n1 := n_proper_le &
 [ STEM < "original", "equipment", "manufacturer" >,
   SYNSEM [ LKEYS.KEYREL.CARG "original_equipment_manufacturer",
            PHON.ONSET voc ] ].

originally_adv1 := adv_int_vp_le &
 [ STEM < "originally" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_original_a_1_rel",
            PHON.ONSET voc ] ].

originate_v1 := v_np*_trans_le &
 [ STEM < "originate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_originate_v_1_rel",
            PHON.ONSET voc ] ].

originate_v2 := v_empty_prep_intrans_le &
 [ STEM < "originate" >,
   SYNSEM [ LKEYS [ --COMPKEY _from_p_sel_rel,
                    KEYREL.PRED "_originate_v_from_rel" ],
            PHON.ONSET voc ] ].

originator_n1 := n_ppof_le &
 [ STEM < "originator" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_originator_n_of_rel",
            PHON.ONSET voc ] ].

orinoco_n1 := n_proper_le &
 [ STEM < "orinoco" >,
   SYNSEM [ LKEYS.KEYREL.CARG "orinoco",
            PHON.ONSET voc ] ].

ormelid_n1 := n_intr_le &
 [ STEM < "ormelid" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ormelid_n_1_rel",
            PHON.ONSET voc ] ].

ornament_n1 := n_intr_le &
 [ STEM < "ornament" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ornament_n_1_rel",
            PHON.ONSET voc ] ].

ornamental_a1 := adj_intrans_le &
 [ STEM < "ornamental" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ornamental_a_1_rel",
            PHON.ONSET voc ] ].

ornamented_a1 := adj_intrans_le &
 [ STEM < "ornamented" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ornamented_a_1_rel",
            PHON.ONSET voc ] ].

orthodox_a1 := adj_intrans_le &
 [ STEM < "orthodox" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_orthodox_a_1_rel",
            PHON.ONSET voc ] ].

ortnevik_n1 := n_proper_city_le &
 [ STEM < "ortnevik" >,
   SYNSEM [ LKEYS.KEYREL.CARG "ortnevik",
            PHON.ONSET voc ] ].

osiris_n1 := n_proper_le &
 [ STEM < "osiris" >,
   SYNSEM [ LKEYS.KEYREL.CARG "osiris",
            PHON.ONSET voc ] ].

oskampen_n1 := n_proper_le &
 [ STEM < "oskampen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "oskampen",
            PHON.ONSET voc ] ].

oslo_international_airport_gardermoen := n_proper_sg_le &
 [ STEM < "Oslo", "International", "Airport", "Gardermoen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "oslo_international_airport_gardermoen",
            PHON.ONSET voc ] ].

oslo_n1 := n_proper_city_le &
 [ STEM < "oslo" >,
   SYNSEM [ LKEYS.KEYREL.CARG "oslo",
            PHON.ONSET voc ] ].

oslo_s_n1 := n_proper_le &
 [ STEM < "oslo", "_s" >,
   SYNSEM [ LKEYS.KEYREL.CARG "oslo_s",
            PHON.ONSET voc ] ].

oslofjord_n1 := n_proper_city_le &
 [ STEM < "oslofjord" >,
   SYNSEM [ LKEYS.KEYREL.CARG "oslofjord",
            PHON.ONSET voc ] ].

oslofjorden_n1 := n_proper_city_le &
 [ STEM < "oslofjorden" >,
   SYNSEM [ LKEYS.KEYREL.CARG "oslofjord",
            PHON.ONSET voc ] ].

osloite_n1 := n_proper_le &
 [ STEM < "osloite" >,
   SYNSEM [ LKEYS.KEYREL.CARG "osloite",
            PHON.ONSET voc ] ].

osnabrueck_n1 := n_proper_city_le &
 [ STEM < "osnabrueck" >,
   SYNSEM [ LKEYS.KEYREL.CARG "osnabrueck",
            PHON.ONSET voc ] ].

ostentatious_a1 := adj_intrans_le &
 [ STEM < "ostentatious" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ostentatious_a_1_rel",
            PHON.ONSET voc ] ].

ostentatiously := adv_int_vp_le &
 [ STEM < "ostentatiously" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ostentatious_a_1_rel",
            PHON.ONSET voc ] ].

osterbo := n_proper_le &
 [ STEM < "osterbo" >,
   SYNSEM [ LKEYS.KEYREL.CARG "osterbo",
            PHON.ONSET voc ] ].

ostrich_n1 := n_intr_le &
 [ STEM < "ostrich" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ostrich_n_1_rel",
            PHON.ONSET voc ] ].

oswald_n1 := n_proper_le &
 [ STEM < "oswald" >,
   SYNSEM [ LKEYS.KEYREL.CARG "oswald",
            PHON.ONSET voc ] ].

otervÃ¦rfjord_n1 := n_proper_city_le &
 [ STEM < "otervÃ¦rfjord" >,
   SYNSEM [ LKEYS.KEYREL.CARG "otervÃ¦rfjord",
            PHON.ONSET voc ] ].

otervÃ¦rfjorden_n1 := n_proper_city_le &
 [ STEM < "otervÃ¦rfjorden" >,
   SYNSEM [ LKEYS.KEYREL.CARG "otervÃ¦rfjorden",
            PHON.ONSET voc ] ].

other_a1 := adj_attr_nospec_le &
 [ STEM < "other" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_other_a_1_rel",
            PHON.ONSET voc ] ].

other_n1 := n_no_cmpnd_le &
 [ STEM < "other" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_other_n_1_rel",
            PHON.ONSET voc ] ].

other_than_p := p_le &
 [ STEM < "other", "than" >,
   SYNSEM [ LKEYS.KEYREL.PRED _other+than_p_rel,
            PHON.ONSET voc ] ].

other_than_padv := p_ppcomp_copred_le &
 [ STEM < "other", "than" >,
   SYNSEM [ LKEYS.KEYREL.PRED _other+than_p_rel,
            PHON.ONSET voc ] ].

others_n1 := n_plur_ppcomp_oblig_le &
 [ STEM < "others" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_others_n_of_rel" ],
            PHON.ONSET voc ] ].

otherwise_adv1 := adv_int_vp_le &
 [ STEM < "otherwise" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_otherwise_a_1_rel",
            PHON.ONSET voc ] ].

otherwise_root_post := adv_s_post_word_nospec_le &
 [ STEM < "otherwise" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_otherwise_a_1_rel",
            PHON.ONSET voc ] ].

otherwise_root_pre := adv_s_pre_word_root_le &
 [ STEM < "otherwise" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_otherwise_a_1_rel",
            PHON.ONSET voc ] ].

otta := n_proper_le &
 [ STEM < "otta" >,
   SYNSEM [ LKEYS.KEYREL.CARG "otta",
            PHON.ONSET voc ] ].

otter_n1 := n_intr_le &
 [ STEM < "otter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_otter_n_1_rel",
            PHON.ONSET voc ] ].

otterness_n1 := n_proper_le &
 [ STEM < "otterness" >,
   SYNSEM [ LKEYS.KEYREL.CARG "otterness",
            PHON.ONSET voc ] ].

ouch_root_post := adv_s_post_word_nospec_le &
 [ STEM < "ouch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ouch_a_1_rel",
            PHON.ONSET voc ] ].

ouch_root_pre := adv_s_pre_word_root_le &
 [ STEM < "ouch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ouch_a_1_rel",
            PHON.ONSET voc ] ].

ought_aux_neg_1 := va_ought_neg_le &
 [ STEM < "oughtn't" >,
   SYNSEM [ LKEYS.KEYREL.PRED _ought_v_modal_rel,
            PHON.ONSET voc ] ].

ought_aux_neg_2 := va_ought_neg_le &
 [ STEM < "oughtn", "'t" >,
   SYNSEM [ LKEYS.KEYREL.PRED _ought_v_modal_rel,
            PHON.ONSET voc ] ].

ought_aux_pos := va_ought_pos_le &
 [ STEM < "ought" >,
   SYNSEM [ LKEYS.KEYREL.PRED _ought_v_modal_rel,
            PHON.ONSET voc ] ].

ounce_n1 := n_meas_le &
 [ STEM < "ounce" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ounce_n_1_rel",
            PHON.ONSET voc ] ].

our := det_poss_our_le &
 [ STEM < "our" >,
   SYNSEM.PHON.ONSET voc ].

ours := n_poss_pro_ours_le &
 [ STEM < "ours" >,
   SYNSEM.PHON.ONSET voc ].

ours_nq := det_poss_nospec_ours_le &
 [ STEM < "ours" >,
   SYNSEM.PHON.ONSET con ].

ourselves := n_refl_pro_ourselves_le &
 [ STEM < "ourselves" >,
   SYNSEM.PHON.ONSET voc ].

ourselves_adv := adv_refl_pro_ourselves_le &
 [ STEM < "ourselves" >,
   SYNSEM.PHON.ONSET voc ].

oust_v1 := v_np_trans_le &
 [ STEM < "oust" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_oust_v_1_rel",
            PHON.ONSET voc ] ].

out_of_date_a1 := adj_intrans_le &
 [ STEM < "out", "of", "date" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_out+of+date_a_1_rel",
            PHON.ONSET voc ] ].

out_of_doors_adv := pp_le &
 [ STEM < "out", "of", "doors" >,
   SYNSEM [ LKEYS.KEYREL.PRED _out+of+doors_p_rel,
            PHON.ONSET voc ] ].

out_of_p := p_reg_le &
 [ STEM < "out", "of" >,
   SYNSEM [ LKEYS.KEYREL.PRED _out+of_p_rel,
            PHON.ONSET voc ] ].

out_of_prtcl := p_prtcl_le &
 [ STEM < "out", "of" >,
   SYNSEM [ LKEYS.KEYREL.PRED _out+of_p_sel_rel,
            PHON.ONSET voc ] ].

out_of_state_a1 := adj_intrans_le &
 [ STEM < "out", "of", "state" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_out+of+state_a_1_rel",
            PHON.ONSET voc ] ].

out_p := p_nmod_no_tmod_le &
 [ STEM < "out" >,
   SYNSEM [ LKEYS.KEYREL.PRED _out_p_rel,
            PHON.ONSET voc ] ].

out_particle := p_prtcl_le &
 [ STEM < "out" >,
   SYNSEM [ LKEYS.KEYREL.PRED _out_p_sel_rel,
            PHON.ONSET voc ] ].

out_pp := pp_le &
 [ STEM < "out" >,
   SYNSEM [ LKEYS.KEYREL.PRED _out_p_rel,
            PHON.ONSET voc ] ].

out_vmod := p_no_nmod_le &
 [ STEM < "out" >,
   SYNSEM [ LKEYS.KEYREL.PRED _out_p_rel,
            PHON.ONSET voc ] ].

outbuilding_n1 := n_intr_le &
 [ STEM < "outbuilding" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_outbuilding_n_1_rel",
            PHON.ONSET con ] ].

outcome_n1 := n_intr_le &
 [ STEM < "outcome" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_outcome_n_1_rel",
            PHON.ONSET voc ] ].

outcrop_n1 := n_intr_le &
 [ STEM < "outcrop" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_outcrop_n_1_rel",
            PHON.ONSET voc ] ].

outcropping_n1 := n_intr_le &
 [ STEM < "outcropping" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_outcropping_n_1_rel",
            PHON.ONSET voc ] ].

outdoor_a1 := adj_intrans_le &
 [ STEM < "outdoor" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_outdoor_a_1_rel",
            PHON.ONSET voc ] ].

outdoors_nom := n_adv_pl_le &
 [ STEM < "outdoors" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED _outdoors_a_1_rel,
                    KEYREL.PRED place_n_rel ],
            PHON.ONSET voc ] ].

outdoorsman_n1 := n_intr_le &
 [ STEM < "outdoorsman" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_outdoorsman_n_1_rel",
            PHON.ONSET voc ] ].

outer_a1 := adj_intrans_le &
 [ STEM < "outer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_outer_a_1_rel",
            PHON.ONSET voc ] ].

outermost_a1 := adj_intrans_le &
 [ STEM < "outermost" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_outermost_a_1_rel",
            PHON.ONSET voc ] ].

outerwear_n1 := n_mass_le &
 [ STEM < "outerwear" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_outerwear_n_1_rel",
            PHON.ONSET voc ] ].

outfit_n1 := n_intr_le &
 [ STEM < "outfit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_outfit_n_1_rel",
            PHON.ONSET voc ] ].

outfit_v1 := v_np_trans_le &
 [ STEM < "outfit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_outfit_v_1_rel",
            PHON.ONSET voc ] ].

outgrowth_n1 := n_mass_count_le &
 [ STEM < "outgrowth" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_outgrowth_n_1_rel",
            PHON.ONSET voc ] ].

outhouse_n1 := n_intr_le &
 [ STEM < "outhouse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_outhouse_n_1_rel",
            PHON.ONSET voc ] ].

outing_n1 := n_intr_nosort_le &
 [ STEM < "outing" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_outing_n_1_rel",
            PHON.ONSET voc ] ].

outlet_n1 := n_intr_le &
 [ STEM < "outlet" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_outlet_n_1_rel",
            PHON.ONSET voc ] ].

outline_n1 := n_intr_le &
 [ STEM < "outline" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_outline_n_1_rel",
            PHON.ONSET voc ] ].

outline_v1 := v_np_trans_le &
 [ STEM < "outline" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_outline_v_1_rel",
            PHON.ONSET voc ] ].

outline_v2 := v_cp_non_trans_le &
 [ STEM < "outline" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_outline_v_1_rel",
            PHON.ONSET voc ] ].

outlook_n1 := n_mass_count_le &
 [ STEM < "outlook" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_outlook_n_1_rel",
            PHON.ONSET voc ] ].

outlying_a1 := adj_intrans_le &
 [ STEM < "outlying" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_outlying_a_1_rel",
            PHON.ONSET voc ] ].

outmost_a1 := adj_intrans_le &
 [ STEM < "outmost" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_outmost_a_1_rel",
            PHON.ONSET voc ] ].

outpost_n1 := n_intr_le &
 [ STEM < "outpost" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_outpost_n_1_rel",
            PHON.ONSET voc ] ].

output_n1 := n_mass_count_ppof_le &
 [ STEM < "output" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_output_n_of_rel",
            PHON.ONSET voc ] ].

output_v1 := v_np_trans_le &
 [ STEM < "output" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_output_v_1_rel",
            PHON.ONSET voc ] ].

output_v2 := v_np_prep_trans_le &
 [ STEM < "output" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _to_p_rel,
                    KEYREL.PRED "_output_v_1_rel" ],
            PHON.ONSET voc ] ].

outrageous_isect := adj_intrans_le &
 [ STEM < "outrageous" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_outrageous_a_1_rel",
            PHON.ONSET voc ] ].

outrageously := adv_int_vp_le &
 [ STEM < "outrageously" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_outrageous_a_1_rel",
            PHON.ONSET voc ] ].

outright := adv_int_vp_le &
 [ STEM < "outright" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_outright_a_1_rel",
            PHON.ONSET voc ] ].

outright_a1 := adj_intrans_le &
 [ STEM < "outright" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_outright_a_1_rel",
            PHON.ONSET voc ] ].

outright_deg := adv_degree_spec_v_le &
 [ STEM < "outright" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_outright_x_deg_rel",
            PHON.ONSET voc ] ].

outside := p_le &
 [ STEM < "outside" >,
   SYNSEM [ LKEYS.KEYREL.PRED _outside_p_rel,
            PHON.ONSET voc ] ].

outside_a1 := adj_intrans_le &
 [ STEM < "outside" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_outside_a_1_rel",
            PHON.ONSET voc ] ].

outside_adv1 := n_adv_pl_le &
 [ STEM < "outside" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED _outside_p_rel,
                    KEYREL.PRED place_n_rel ],
            PHON.ONSET voc ] ].

outside_n1 := n_ppof_le &
 [ STEM < "outside" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_outside_n_of_rel",
            PHON.ONSET voc ] ].

outside_of_p := p_le &
 [ STEM < "outside", "of" >,
   SYNSEM [ LKEYS.KEYREL.PRED _outside+of_p_rel,
            PHON.ONSET voc ] ].

outskirts_n1 := n_plur_nocmpnd_le &
 [ STEM < "outskirt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_outskirts_n_1_rel",
            PHON.ONSET voc ] ].

outstanding_a1 := adj_intrans_le &
 [ STEM < "outstanding" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_outstanding_a_1_rel",
            PHON.ONSET voc ] ].

outstretched_a1 := adj_intrans_le &
 [ STEM < "outstretched" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_outstretched_a_1_rel",
            PHON.ONSET voc ] ].

outward_isect := adj_intrans_le &
 [ STEM < "outward" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_outward_a_1_rel",
            PHON.ONSET voc ] ].

outward_n1 := n_adv_event_le &
 [ STEM < "outward" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED _outward_a_1_rel,
                    KEYREL.PRED place_n_rel ],
            PHON.ONSET voc ] ].

outwardly := adv_int_vp_le &
 [ STEM < "outwardly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_outward_a_1_rel",
            PHON.ONSET voc ] ].

outwards_n1 := n_adv_event_le &
 [ STEM < "outwards" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED _outward_a_1_rel,
                    KEYREL.PRED place_n_rel ],
            PHON.ONSET voc ] ].

outwash_n1 := n_intr_le &
 [ STEM < "outwash" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_outwash_n_1_rel",
            PHON.ONSET voc ] ].

ouzo_n1 := n_mass_count_le &
 [ STEM < "ouzo" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ouzo_n_1_rel",
            PHON.ONSET voc ] ].

ovary_n1 := n_intr_le &
 [ STEM < "ovary" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ovary_n_1_rel",
            PHON.ONSET voc ] ].

oven_n1 := n_intr_le &
 [ STEM < "oven" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_oven_n_1_rel",
            PHON.ONSET voc ] ].

over := p_reg_le &
 [ STEM < "over" >,
   SYNSEM [ LKEYS.KEYREL.PRED _over_p_rel,
            PHON.ONSET voc ] ].

over_and_out_root_post := adv_disc_posth_grt_le &
 [ STEM < "over", "and", "out" >,
   SYNSEM [ LKEYS.KEYREL.CARG "over_and_out",
            PHON.ONSET voc ] ].

over_and_out_root_pre := adv_disc_preh_grt_le &
 [ STEM < "over", "and", "out" >,
   SYNSEM [ LKEYS.KEYREL.CARG "over_and_out",
            PHON.ONSET voc ] ].

over_and_over_adv1 := adv_int_vp_post_le &
 [ STEM < "over", "and", "over" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_over+and+over_a_1_rel",
            PHON.ONSET voc ] ].

over_deg := adv_degree_spec_m_le &
 [ STEM < "over" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_over_x_deg_rel",
            PHON.ONSET voc ] ].

over_dollar_adj := adj_dollar_le &
 [ STEM < "over" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_over_a_dollar_rel",
            PHON.ONSET voc ] ].

over_pp := pp_dir_le &
 [ STEM < "over" >,
   SYNSEM [ LKEYS.KEYREL.PRED _over_p_rel,
            PHON.ONSET voc ] ].

over_prtcl := p_prtcl_le &
 [ STEM < "over" >,
   SYNSEM [ LKEYS.KEYREL.PRED _over_p_sel_rel,
            PHON.ONSET voc ] ].

over_temp := p_temp_le &
 [ STEM < "over" >,
   SYNSEM [ LKEYS [ --COMPKEY non_day_rel,
                    KEYREL.PRED _over_p_temp_rel ],
            PHON.ONSET voc ] ].

over_with_a1 := adj_pred_nodpct_le &
 [ STEM < "over", "with" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_over+with_a_1_rel",
            PHON.ONSET voc ] ].

overall_a1 := adj_attr_nospec_le &
 [ STEM < "overall" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_overall_a_1_rel",
            PHON.ONSET voc ] ].

overanxious_a1 := adj_intrans_le &
 [ STEM < "overanxious" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_overanxious_a_1_rel",
            PHON.ONSET voc ] ].

overcast_a1 := adj_intrans_le &
 [ STEM < "overcast" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_overcast_a_1_rel",
            PHON.ONSET voc ] ].

overcharge_v1 := v_np_trans_le &
 [ STEM < "overcharge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_overcharge_v_1_rel",
            PHON.ONSET voc ] ].

overcharge_v2 := v_np_trans_le &
 [ STEM < "over-", "charge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_overcharge_v_1_rel",
            PHON.ONSET voc ] ].

overcoat_n1 := n_intr_le &
 [ STEM < "overcoat" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_overcoat_n_1_rel",
            PHON.ONSET voc ] ].

overcome_v1 := v_np_trans_le &
 [ STEM < "overcome" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_overcome_v_1_rel",
            PHON.ONSET voc ] ].

overcook_v1 := v_np_trans_le &
 [ STEM < "overcook" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_overcook_v_1_rel",
            PHON.ONSET voc ] ].

overcrowded_isect := adj_intrans_le &
 [ STEM < "overcrowded" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_overcrowded_a_1_rel",
            PHON.ONSET voc ] ].

overdo_v1 := v_np*_trans_le &
 [ STEM < "overdo" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_overdo_v_1_rel",
            PHON.ONSET voc ] ].

overdraft_n1 := n_intr_le &
 [ STEM < "overdraft" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_overdraft_n_1_rel",
            PHON.ONSET voc ] ].

overdue_a2 := adj_intrans_le &
 [ STEM < "overdue" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_overdue_a_1_rel",
            PHON.ONSET voc ] ].

overeager_a1 := adj_intrans_le &
 [ STEM < "overeager" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_overeager_a_1_rel",
            PHON.ONSET voc ] ].

overeat_v1 := v_unerg_le &
 [ STEM < "overeat" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_overeat_v_1_rel",
            PHON.ONSET voc ] ].

overestimate_v1 := v_np*_trans_le &
 [ STEM < "overestimate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_overestimate_v_1_rel",
            PHON.ONSET voc ] ].

overflow_v1 := v_np_trans_le &
 [ STEM < "overflow" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_overflow_v_cause_rel",
            PHON.ONSET voc ] ].

overflow_v2 := v_unacc_dir_le &
 [ STEM < "overflow" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_overflow_v_1_rel",
            PHON.ONSET voc ] ].

overgraze_v1 := v_np*_trans_le &
 [ STEM < "overgraze" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_overgraze_v_1_rel",
            PHON.ONSET voc ] ].

overgrown_a1 := adj_intrans_le &
 [ STEM < "overgrown" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_overgrown_a_1_rel",
            PHON.ONSET voc ] ].

overgrown_a3 := adj_trans_oblig_le &
 [ STEM < "overgrown" >,
   SYNSEM [ LKEYS [ --COMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_overgrown_a_with_rel" ],
            PHON.ONSET voc ] ].

overhang_n1 := n_intr_le &
 [ STEM < "overhang" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_overhang_n_1_rel",
            PHON.ONSET voc ] ].

overhanging_a1 := adj_intrans_le &
 [ STEM < "overhanging" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_overhanging_a_1_rel",
            PHON.ONSET voc ] ].

overhaste_n1 := n_mass_le &
 [ STEM < "overhaste" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_overhaste_n_1_rel",
            PHON.ONSET voc ] ].

overhasty_a1 := adj_intrans_le &
 [ STEM < "overhasty" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_overhasty_a_1_rel",
            PHON.ONSET voc ] ].

overhead_n1 := n_intr_le &
 [ STEM < "overhead" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_overhead_n_1_rel",
            PHON.ONSET voc ] ].

overhead_nom1 := n_adv_pl_le &
 [ STEM < "overhead" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED _overhead_a_1_rel,
                    KEYREL.PRED place_n_rel ],
            PHON.ONSET voc ] ].

overhear_v1 := v_np_trans_le &
 [ STEM < "overhear" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_overhear_v_1_rel",
            PHON.ONSET voc ] ].

overhear_v2 := v_cp_non_trans_le &
 [ STEM < "overhear" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_overhear_v_1_rel",
            PHON.ONSET voc ] ].

overhear_v3 := v_sorb_le &
 [ STEM < "overhear" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_overhear_v_1_rel",
            PHON.ONSET voc ] ].

overheard_v3 := v_sorb_pass_le &
 [ STEM < "overheard" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_overhear_v_1_rel",
            PHON.ONSET voc ] ].

overkill_n1 := n_mass_le &
 [ STEM < "overkill" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_overkill_n_1_rel",
            PHON.ONSET voc ] ].

overland_a1 := adj_attr_intrans_le &
 [ STEM < "overland" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_overland_a_1_rel",
            PHON.ONSET con ] ].

overland_pp := pp_le &
 [ STEM < "overland" >,
   SYNSEM [ LKEYS.KEYREL.PRED _overland_p_rel,
            PHON.ONSET voc ] ].

overlap_n1 := n_ppof_le &
 [ STEM < "overlap" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_overlap_n_of_rel",
            PHON.ONSET voc ] ].

overlap_v1 := v_empty_prep_intrans_le &
 [ STEM < "overlap" >,
   SYNSEM [ LKEYS [ --COMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_overlap_v_with_rel" ],
            PHON.ONSET voc ] ].

overlap_v2 := v_np*_trans_le &
 [ STEM < "overlap" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_overlap_v_1_rel",
            PHON.ONSET voc ] ].

overlook_n1 := n_intr_le &
 [ STEM < "overlook" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_overlook_n_1_rel",
            PHON.ONSET voc ] ].

overlook_v1 := v_np_trans_le &
 [ STEM < "overlook" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_overlook_v_1_rel",
            PHON.ONSET voc ] ].

overlord_n1 := n_intr_le &
 [ STEM < "overlord" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_overlord_n_1_rel",
            PHON.ONSET voc ] ].

overnight_a2 := pp_nmod_le &
 [ STEM < "overnight" >,
   SYNSEM [ LKEYS.KEYREL.PRED _overnight_a_1_rel,
            PHON.ONSET voc ] ].

overnight_adv1 := adv_int_vp_post_le &
 [ STEM < "overnight" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_overnight_a_1_rel",
            PHON.ONSET voc ] ].

overnight_isect := adj_intrans_le &
 [ STEM < "overnight" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_overnight_a_1_rel",
            PHON.ONSET voc ] ].

overnight_v1 := v_unerg_le &
 [ STEM < "overnight" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_overnight_v_1_rel",
            PHON.ONSET voc ] ].

overpower_v1 := v_np_trans_le &
 [ STEM < "overpower" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_overpower_v_1_rel",
            PHON.ONSET voc ] ].

overreach_v1 := v_np*_trans_le &
 [ STEM < "overreach" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_overreach_v_1_rel",
            PHON.ONSET voc ] ].

overreact_v1 := v_np_trans_le &
 [ STEM < "overreact" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_overreact_v_1_rel",
            PHON.ONSET voc ] ].

overreaction_n1 := n_mass_count_le &
 [ STEM < "overreaction" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_overreaction_n_1_rel",
            PHON.ONSET voc ] ].

override_n1 := n_intr_le &
 [ STEM < "override" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_override_n_1_rel",
            PHON.ONSET voc ] ].

override_v1 := v_np_trans_le &
 [ STEM < "override" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_override_v_1_rel",
            PHON.ONSET voc ] ].

overrun_v1 := v_np*_trans_le &
 [ STEM < "overrun" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_overrun_v_1_rel",
            PHON.ONSET voc ] ].

overseas_a1 := adj_attr_intrans_le &
 [ STEM < "overseas" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_overseas_a_1_rel",
            PHON.ONSET voc ] ].

overseas_nom := n_adv_pl_le &
 [ STEM < "overseas" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED _overseas_a_1_rel,
                    KEYREL.PRED place_n_rel ],
            PHON.ONSET voc ] ].

oversee_v1 := v_np_trans_le &
 [ STEM < "oversee" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_oversee_v_1_rel",
            PHON.ONSET voc ] ].

overseer_n1 := n_ppof_le &
 [ STEM < "overseer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_overseer_n_of_rel",
            PHON.ONSET voc ] ].

overshadow_v1 := v_np_trans_le &
 [ STEM < "overshadow" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_overshadow_v_1_rel",
            PHON.ONSET voc ] ].

overshoe_n1 := n_intr_le &
 [ STEM < "overshoe" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_overshoe_n_1_rel",
            PHON.ONSET voc ] ].

oversight_n1 := n_mass_le &
 [ STEM < "oversight" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_oversight_n_1_rel",
            PHON.ONSET voc ] ].

overspread_v1 := v_np*_trans_le &
 [ STEM < "overspread" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_overspread_v_1_rel",
            PHON.ONSET voc ] ].

overstep_v1 := v_np*_trans_le &
 [ STEM < "overstep" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_overstep_v_1_rel",
            PHON.ONSET voc ] ].

overtake_v1 := v_np*_trans_le &
 [ STEM < "overtake" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_overtake_v_1_rel",
            PHON.ONSET voc ] ].

overthrow_n1 := n_intr_le &
 [ STEM < "overthrow" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_overthrow_n_1_rel",
            PHON.ONSET voc ] ].

overthrow_v1 := v_np_trans_le &
 [ STEM < "overthrow" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_overthrow_v_1_rel",
            PHON.ONSET voc ] ].

overtime_n1 := n_mass_count_le &
 [ STEM < "overtime" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_overtime_n_1_rel",
            PHON.ONSET voc ] ].

overtired_a1 := adj_intrans_le &
 [ STEM < "overtired" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_overtired_a_1_rel",
            PHON.ONSET voc ] ].

overtly_adv1 := adv_int_vp_le &
 [ STEM < "overtly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_overt_a_1_rel",
            PHON.ONSET voc ] ].

overview_n1 := n_ppof_le &
 [ STEM < "overview" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_overview_n_of_rel",
            PHON.ONSET voc ] ].

overwhelm_v1 := v_np_trans_le &
 [ STEM < "overwhelm" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_overwhelm_v_1_rel",
            PHON.ONSET voc ] ].

overwork_v1 := v_np*_trans_le &
 [ STEM < "overwork" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_overwork_v_1_rel",
            PHON.ONSET voc ] ].

oviparous_a1 := adj_intrans_le &
 [ STEM < "oviparous" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_oviparous_a_1_rel",
            PHON.ONSET voc ] ].

ovis_n1 := n_proper_le &
 [ STEM < "ovis" >,
   SYNSEM [ LKEYS.KEYREL.CARG "ovis",
            PHON.ONSET voc ] ].

owe_v1 := v_ditrans_le &
 [ STEM < "owe" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_owe_v_1_rel",
            PHON.ONSET voc ] ].

owe_v2 := v_np*_trans_le &
 [ STEM < "owe" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_owe_v_1_rel",
            PHON.ONSET voc ] ].

owl_n := n_intr_le &
 [ STEM < "owl" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_owl_n_1_rel",
            PHON.ONSET voc ] ].

own_a1 := adj_poss_le &
 [ STEM < "own" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_own_a_1_rel",
            PHON.ONSET voc ] ].

own_n1 := n_intr_poss_le &
 [ STEM < "own" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_own_n_1_rel",
            PHON.ONSET voc ] ].

own_v1 := v_np_trans_le &
 [ STEM < "own" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_own_v_1_rel",
            PHON.ONSET voc ] ].

owner_n1 := n_ppof_le &
 [ STEM < "owner" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_owner_n_of_rel",
            PHON.ONSET voc ] ].

ownership_n1 := n_mass_count_ppof_le &
 [ STEM < "ownership" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ownership_n_of_rel",
            PHON.ONSET voc ] ].

ox_n1 := n_intr_le &
 [ STEM < "ox" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ox_n_1_rel",
            PHON.ONSET voc ] ].

oxacid_n1 := n_intr_le &
 [ STEM < "oxacid" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_oxacid_n_1_rel",
            PHON.ONSET voc ] ].

oxford_n1 := n_proper_le &
 [ STEM < "oxford" >,
   SYNSEM [ LKEYS.KEYREL.CARG "oxford",
            PHON.ONSET voc ] ].

oxidation_n1 := n_mass_le &
 [ STEM < "oxidation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_oxidation_n_1_rel",
            PHON.ONSET voc ] ].

oxide_n1 := n_mass_le &
 [ STEM < "oxide" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_oxide_n_1_rel",
            PHON.ONSET voc ] ].

oxidize_v1 := v_unacc_le &
 [ STEM < "oxidize" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_oxidize_v_1_rel",
            PHON.ONSET voc ] ].

oxidize_v2 := v_np_trans_noger_le &
 [ STEM < "oxidize" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_oxidize_v_cause_rel",
            PHON.ONSET voc ] ].

oxygen_n1 := n_mass_le &
 [ STEM < "oxygen" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_oxygen_n_1_rel",
            PHON.ONSET voc ] ].

oyster_n1 := n_intr_le &
 [ STEM < "oyster" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_oyster_n_1_rel",
            PHON.ONSET voc ] ].

oz_n1 := n_meas_le &
 [ STEM < "oz" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ounce_n_1_rel",
            PHON.ONSET voc ] ].

oz_n2 := n_meas_le &
 [ STEM < "oz." >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ounce_n_1_rel",
            PHON.ONSET voc ] ].

p-h-i_np1 := n_proper_le &
 [ STEM < "_p-", "h-", "i" >,
   SYNSEM [ LKEYS.KEYREL.CARG "p-h-i",
            PHON.ONSET con ] ].

p_file_np1 := n_proper_le &
 [ STEM < "p.file" >,
   SYNSEM [ LKEYS.KEYREL.CARG "p_file",
            PHON.ONSET con ] ].

p_n1 := n_proper_le &
 [ STEM < "p" >,
   SYNSEM [ LKEYS.KEYREL.CARG "p",
            PHON.ONSET con ] ].

p_np1 := n_proper_le &
 [ STEM < "_p" >,
   SYNSEM [ LKEYS.KEYREL.CARG "p",
            PHON.ONSET con ] ].

p_period_np1 := n_proper_le &
 [ STEM < "p." >,
   SYNSEM [ LKEYS.KEYREL.CARG "p",
            PHON.ONSET con ] ].

p_period_np2 := n_proper_le &
 [ STEM < "_p." >,
   SYNSEM [ LKEYS.KEYREL.CARG "p",
            PHON.ONSET con ] ].

pace_n1 := n_intr_le &
 [ STEM < "pace" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pace_n_1_rel",
            PHON.ONSET con ] ].

pacemaker_n1 := n_intr_le &
 [ STEM < "pacemaker" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pacemaker_n_1_rel",
            PHON.ONSET con ] ].

pacific_n1 := n_proper_le &
 [ STEM < "pacific" >,
   SYNSEM [ LKEYS.KEYREL.CARG "pacific",
            PHON.ONSET con ] ].

pack_in_v1 := v_particle_np_le &
 [ STEM < "pack" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_pack_v_in_rel" ],
            PHON.ONSET con ] ].

pack_n1 := n_ppof_le &
 [ STEM < "pack" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pack_n_of_rel",
            PHON.ONSET con ] ].

pack_up_v1 := v_particle_np_le &
 [ STEM < "pack" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_pack_v_up_rel" ],
            PHON.ONSET con ] ].

pack_up_v2 := v_particle_le &
 [ STEM < "pack" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_pack_v_up_rel" ],
            PHON.ONSET con ] ].

pack_v1 := v_np*_trans_le &
 [ STEM < "pack" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pack_v_1_rel",
            PHON.ONSET con ] ].

package_n1 := n_ppof_le &
 [ STEM < "package" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_package_n_of_rel",
            PHON.ONSET con ] ].

package_ttl := n_title_le &
 [ STEM < "package" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_package_n_of_rel",
            PHON.ONSET con ] ].

package_v1 := v_np_trans_le &
 [ STEM < "package" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_package_v_1_rel",
            PHON.ONSET con ] ].

packed_a1 := adj_trans_le &
 [ STEM < "packed" >,
   SYNSEM [ LKEYS [ --COMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_packed_a_with_rel" ],
            PHON.ONSET con ] ].

packet_n1 := n_ppof_le &
 [ STEM < "packet" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_packet_n_of_rel",
            PHON.ONSET con ] ].

packhorse_n1 := n_intr_le &
 [ STEM < "packhorse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_packhorse_n_1_rel",
            PHON.ONSET con ] ].

pad_n1 := n_intr_le &
 [ STEM < "pad" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pad_n_1_rel",
            PHON.ONSET con ] ].

pad_v1 := v_np*_trans_le &
 [ STEM < "pad" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pad_v_1_rel",
            PHON.ONSET con ] ].

paddle_v1 := v_np*_trans_le &
 [ STEM < "paddle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_paddle_v_1_rel",
            PHON.ONSET con ] ].

paddler_n1 := n_intr_le &
 [ STEM < "paddler" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_paddler_n_1_rel",
            PHON.ONSET con ] ].

paderborn_n1 := n_proper_city_le &
 [ STEM < "paderborn" >,
   SYNSEM [ LKEYS.KEYREL.CARG "paderborn",
            PHON.ONSET con ] ].

page_n1 := n_intr_le &
 [ STEM < "page" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_page_n_1_rel",
            PHON.ONSET con ] ].

page_ttl := n_title_le &
 [ STEM < "page" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_page_n_1_rel",
            PHON.ONSET con ] ].

page_v1 := v_np_trans_le &
 [ STEM < "page" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_page_v_1_rel",
            PHON.ONSET con ] ].

pager_n1 := n_intr_le &
 [ STEM < "pager" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pager_n_1_rel",
            PHON.ONSET con ] ].

pagoda_n1 := n_intr_le &
 [ STEM < "pagoda" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pagoda_n_1_rel",
            PHON.ONSET con ] ].

pail_n1 := n_intr_le &
 [ STEM < "pail" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pail_n_1_rel",
            PHON.ONSET con ] ].

pain_n1 := n_ppof_le &
 [ STEM < "pain" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pain_n_of_rel",
            PHON.ONSET con ] ].

painful_isect := adj_trans_le &
 [ STEM < "painful" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_painful_a_to_rel" ],
            PHON.ONSET con ] ].

painfully_isect := adv_int_vp_le &
 [ STEM < "painfully" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_painful_a_to_rel",
            PHON.ONSET con ] ].

paint_n1 := n_intr_le &
 [ STEM < "paint" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_paint_n_1_rel",
            PHON.ONSET con ] ].

paint_v1 := v_np*_trans_le &
 [ STEM < "paint" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_paint_v_1_rel",
            PHON.ONSET con ] ].

paint_v2 := v_obj_equi_prd_le &
 [ STEM < "paint" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_paint_v_1_rel",
            PHON.ONSET con ] ].

painter_n1 := n_intr_le &
 [ STEM < "painter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_painter_n_1_rel",
            PHON.ONSET con ] ].

painter_ttl := n_title_le &
 [ STEM < "painter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_painter_n_1_rel",
            PHON.ONSET con ] ].

painting_n1 := n_ppof_le &
 [ STEM < "painting" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_painting_n_of_rel",
            PHON.ONSET con ] ].

pair_n1 := n_ppof_le &
 [ STEM < "pair" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pair_n_of_rel",
            PHON.ONSET con ] ].

pair_v1 := v_np_trans_le &
 [ STEM < "pair" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pair_v_1_rel",
            PHON.ONSET con ] ].

pair_v2 := v_np_prep_trans_le &
 [ STEM < "pair" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _with_p_rel,
                    KEYREL.PRED "_pair_v_1_rel" ],
            PHON.ONSET con ] ].

pakistan_n1 := n_proper_le &
 [ STEM < "pakistan" >,
   SYNSEM [ LKEYS.KEYREL.CARG "pakistan",
            PHON.ONSET con ] ].

pakistani_a1 := adj_intrans_le &
 [ STEM < "pakistani" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pakistani_a_1_rel",
            PHON.ONSET con ] ].

pakistani_n1 := n_proper_le &
 [ STEM < "pakistani" >,
   SYNSEM [ LKEYS.KEYREL.CARG "pakistani",
            PHON.ONSET con ] ].

pakistani_n2 := n_intr_le &
 [ STEM < "pakistani" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pakistani_n_1_rel",
            PHON.ONSET con ] ].

palace_n1 := n_intr_le &
 [ STEM < "palace" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_palace_n_1_rel",
            PHON.ONSET con ] ].

palace_post_ttl := n_post_title_le &
 [ STEM < "palace" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_palace_n_1_rel",
            PHON.ONSET con ] ].

pale_a1 := adj_intrans_le &
 [ STEM < "pale" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pale_a_1_rel",
            PHON.ONSET con ] ].

pale_v1 := v_unerg_le &
 [ STEM < "pale" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pale_v_1_rel",
            PHON.ONSET con ] ].

paler := adj_comp_le &
 [ STEM < "paler" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pale_a_1_rel",
            PHON.ONSET con ] ].

palest_a1 := adj_superl_le &
 [ STEM < "palest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pale_a_1_rel",
            PHON.ONSET con ] ].

palette_n1 := n_intr_le &
 [ STEM < "palette" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_palette_n_1_rel",
            PHON.ONSET con ] ].

palliate_a1 := adj_intrans_le &
 [ STEM < "palliate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_palliate_a_1_rel",
            PHON.ONSET con ] ].

palliate_v1 := v_np_trans_le &
 [ STEM < "palliate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_palliate_v_1_rel",
            PHON.ONSET con ] ].

pallid_a1 := adj_intrans_le &
 [ STEM < "pallid" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pallid_a_1_rel",
            PHON.ONSET con ] ].

palm_n1 := n_intr_le &
 [ STEM < "palm" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_palm_n_1_rel",
            PHON.ONSET con ] ].

palm_sunday := n_holiday_le &
 [ STEM < "palm", "sunday" >,
   SYNSEM [ LKEYS.KEYREL.CARG "palm_sunday",
            PHON.ONSET con ] ].

palm_top_n1 := n_intr_le &
 [ STEM < "palm", "top" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_palmtop_n_1_rel",
            PHON.ONSET con ] ].

palmpilot_n1 := n_intr_le &
 [ STEM < "palmpilot" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_palm+pilot_n_1_rel",
            PHON.ONSET con ] ].

palmpilot_n2 := n_intr_le &
 [ STEM < "palm", "pilot" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_palm+pilot_n_1_rel",
            PHON.ONSET con ] ].

palmtop_n1 := n_intr_le &
 [ STEM < "palmtop" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_palmtop_n_1_rel",
            PHON.ONSET con ] ].

paloalto := n_proper_city_le &
 [ STEM < "palo", "alto" >,
   SYNSEM [ LKEYS.KEYREL.CARG "palo_alto",
            PHON.ONSET con ] ].

paltry_a1 := adj_intrans_le &
 [ STEM < "paltry" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_paltry_a_1_rel",
            PHON.ONSET con ] ].

pamphlet_n1 := n_ppof_le &
 [ STEM < "pamphlet" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pamphlet_n_of_rel",
            PHON.ONSET con ] ].

pamphlet_ttl := n_title_le &
 [ STEM < "pamphlet" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pamphlet_n_of_rel",
            PHON.ONSET con ] ].

pan_am_n1 := n_proper_le &
 [ STEM < "pan", "am" >,
   SYNSEM [ LKEYS.KEYREL.CARG "pan_am",
            PHON.ONSET con ] ].

panama_n1 := n_proper_le &
 [ STEM < "panama" >,
   SYNSEM [ LKEYS.KEYREL.CARG "panama",
            PHON.ONSET con ] ].

panamanian_a1 := adj_intrans_le &
 [ STEM < "panamanian" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_panamanian_a_1_rel",
            PHON.ONSET con ] ].

panamanian_n1 := n_intr_le &
 [ STEM < "panamanian" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_panamanian_n_1_rel",
            PHON.ONSET con ] ].

panasonic_n1 := n_proper_le &
 [ STEM < "panasonic" >,
   SYNSEM [ LKEYS.KEYREL.CARG "panasonic",
            PHON.ONSET con ] ].

pandoro_n1 := n_proper_le &
 [ STEM < "pandoro" >,
   SYNSEM [ LKEYS.KEYREL.CARG "pandoro",
            PHON.ONSET con ] ].

pane_n1 := n_intr_le &
 [ STEM < "pane" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pane_n_1_rel",
            PHON.ONSET con ] ].

panel_n1 := n_ppof_le &
 [ STEM < "panel" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_panel_n_of_rel",
            PHON.ONSET con ] ].

panic_n1 := n_mass_count_le &
 [ STEM < "panic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_panic_n_1_rel",
            PHON.ONSET con ] ].

panic_v1 := v_unerg_le &
 [ STEM < "panic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_panic_v_1_rel",
            PHON.ONSET con ] ].

panorama_n1 := n_intr_le &
 [ STEM < "panorama" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_panorama_n_1_rel",
            PHON.ONSET con ] ].

panoramic_a1 := adj_attr_intrans_le &
 [ STEM < "panoramic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_panoramic_a_1_rel",
            PHON.ONSET con ] ].

pant_v1 := v_unerg_le &
 [ STEM < "pant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pant_v_1_rel",
            PHON.ONSET con ] ].

panties_n1 := n_plur_le &
 [ STEM < "panty" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_panties_n_1_rel",
            PHON.ONSET con ] ].

pantry_n1 := n_intr_le &
 [ STEM < "pantry" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pantry_n_1_rel",
            PHON.ONSET con ] ].

pants_n1 := n_plur_le &
 [ STEM < "pant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pants_n_1_rel",
            PHON.ONSET con ] ].

papal_a1 := adj_intrans_le &
 [ STEM < "papal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_papal_a_1_rel",
            PHON.ONSET con ] ].

paper_n1 := n_intr_le &
 [ STEM < "paper" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_paper_n_1_rel",
            PHON.ONSET con ] ].

paper_n2 := n_mass_le &
 [ STEM < "paper" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_paper_n_1_rel",
            PHON.ONSET con ] ].

paperwork_n1 := n_intr_le &
 [ STEM < "paperwork" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_paperwork_n_1_rel",
            PHON.ONSET con ] ].

par_n1 := n_intr_le &
 [ STEM < "par" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_par_n_1_rel",
            PHON.ONSET con ] ].

parachute_in_v1 := v_particle_le &
 [ STEM < "parachute" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_parachute_v_in_rel" ],
            PHON.ONSET con ] ].

parachute_n1 := n_intr_le &
 [ STEM < "parachute" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_parachute_n_1_rel",
            PHON.ONSET con ] ].

paradigm_n1 := n_intr_le &
 [ STEM < "paradigm" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_paradigm_n_1_rel",
            PHON.ONSET con ] ].

paradise_n1 := n_proper_le &
 [ STEM < "paradise" >,
   SYNSEM [ LKEYS.KEYREL.CARG "paradise",
            PHON.ONSET con ] ].

paraffin_n1 := n_mass_le &
 [ STEM < "paraffin" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_paraffin_n_1_rel",
            PHON.ONSET con ] ].

paraguay_n1 := n_proper_le &
 [ STEM < "paraguay" >,
   SYNSEM [ LKEYS.KEYREL.CARG "paraguay",
            PHON.ONSET con ] ].

parallel_a1 := adj_trans_le &
 [ STEM < "parallel" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_parallel_a_to_rel" ],
            PHON.ONSET con ] ].

paralyze_v1 := v_np_trans_le &
 [ STEM < "paralyze" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_paralyze_v_1_rel",
            PHON.ONSET con ] ].

paramount_a1 := adj_intrans_le &
 [ STEM < "paramount" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_paramount_a_1_rel",
            PHON.ONSET con ] ].

paramount_n1 := n_proper_le &
 [ STEM < "paramount" >,
   SYNSEM [ LKEYS.KEYREL.CARG "paramount",
            PHON.ONSET con ] ].

paraphernalia_n1 := n_mass_le &
 [ STEM < "paraphernalia" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_paraphernalia_n_1_rel",
            PHON.ONSET con ] ].

parcel_n1 := n_ppof_le &
 [ STEM < "parcel" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_parcel_n_of_rel",
            PHON.ONSET con ] ].

parcel_out_v1 := v_particle_np_le &
 [ STEM < "parcel" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_parcel_v_out_rel" ],
            PHON.ONSET con ] ].

parcel_ttl := n_title_le &
 [ STEM < "parcel" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_parcel_n_of_rel",
            PHON.ONSET con ] ].

pardon_n1 := n_intr_le &
 [ STEM < "pardon" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pardon_n_1_rel",
            PHON.ONSET con ] ].

pardon_v1 := v_np_trans_le &
 [ STEM < "pardon" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pardon_v_1_rel",
            PHON.ONSET con ] ].

pare_down_v1 := v_particle_np_le &
 [ STEM < "pare" >,
   SYNSEM [ LKEYS [ --COMPKEY _down_p_sel_rel,
                    KEYREL.PRED "_pare_v_down_rel" ],
            PHON.ONSET con ] ].

pare_off_v1 := v_particle_np_le &
 [ STEM < "pare" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_pare_v_off_rel" ],
            PHON.ONSET con ] ].

pare_v1 := v_np_trans_le &
 [ STEM < "pare" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pare_v_1_rel",
            PHON.ONSET con ] ].

paren_stranded_left := adv_s_pre_word_root_le &
 [ STEM < "(" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_paren+stranded+left_a_1_rel",
            PHON.ONSET onset ] ].

parent_n1 := n_ppof_le &
 [ STEM < "parent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_parent_n_of_rel",
            PHON.ONSET con ] ].

parenthetically := adv_int_vp_le &
 [ STEM < "parenthetically" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_parenthetical_a_1_rel",
            PHON.ONSET con ] ].

paris_n1 := n_proper_city_le &
 [ STEM < "paris" >,
   SYNSEM [ LKEYS.KEYREL.CARG "paris",
            PHON.ONSET con ] ].

parish_n1 := n_intr_le &
 [ STEM < "parish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_parish_n_1_rel",
            PHON.ONSET con ] ].

park_n1 := n_intr_le &
 [ STEM < "park" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_park_n_1_rel",
            PHON.ONSET con ] ].

park_post_ttl := n_post_title_le &
 [ STEM < "park" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_park_n_1_rel",
            PHON.ONSET con ] ].

park_v1 := v_np*_trans_le &
 [ STEM < "park" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_park_v_1_rel",
            PHON.ONSET con ] ].

parka_n1 := n_intr_le &
 [ STEM < "parka" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_parka_n_1_rel",
            PHON.ONSET con ] ].

parkhotel_n1 := n_intr_named_le &
 [ STEM < "parkhotel" >,
   SYNSEM [ LKEYS.KEYREL.CARG "parkhotel",
            PHON.ONSET con ] ].

parley_n1 := n_mass_count_le &
 [ STEM < "parley" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_parley_n_1_rel",
            PHON.ONSET con ] ].

parley_v1 := v_np*_trans_le &
 [ STEM < "parley" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_parley_v_1_rel",
            PHON.ONSET con ] ].

parliament := n_proper_le &
 [ STEM < "parliament" >,
   SYNSEM [ LKEYS.KEYREL.CARG "parliament",
            PHON.ONSET con ] ].

parse_n1 := n_intr_le &
 [ STEM < "parse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_parse_n_1_rel",
            PHON.ONSET con ] ].

parse_v1 := v_np*_trans_le &
 [ STEM < "parse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_parse_v_1_rel",
            PHON.ONSET con ] ].

parser_n1 := n_intr_le &
 [ STEM < "parser" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_parser_n_1_rel",
            PHON.ONSET con ] ].

parsippany_n1 := n_proper_city_le &
 [ STEM < "parsippany" >,
   SYNSEM [ LKEYS.KEYREL.CARG "parsippany",
            PHON.ONSET con ] ].

parson_n1 := n_intr_le &
 [ STEM < "parson" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_parson_n_1_rel",
            PHON.ONSET con ] ].

part_n1 := n_intr_le &
 [ STEM < "part" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_part_n_1_rel",
            PHON.ONSET con ] ].

part_n1_i := n_intr_nospr_le &
 [ STEM < "part" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_part_n_1_rel",
            PHON.ONSET con ] ].

part_pn1 := n_part_ppof_noagr_le &
 [ STEM < "part" >,
   SYNSEM [ LKEYS.ALTKEYREL.PRED _part_q_rel,
            PHON.ONSET con ] ].

part_v1 := v_np*_trans_le &
 [ STEM < "part" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_part_v_1_rel",
            PHON.ONSET con ] ].

partake_of_v1 := v_empty_prep_intrans_le &
 [ STEM < "partake" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_partake_v_of_rel" ],
            PHON.ONSET con ] ].

partake_v1 := v_unerg_le &
 [ STEM < "partake" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_partake_v_1_rel",
            PHON.ONSET con ] ].

partial_a1 := adj_intrans_le &
 [ STEM < "partial" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_partial_a_1_rel",
            PHON.ONSET con ] ].

partially_adv1 := adv_int_vp_le &
 [ STEM < "partially" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_partial_a_1_rel",
            PHON.ONSET con ] ].

participant_n1 := n_intr_le &
 [ STEM < "participant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_participant_n_1_rel",
            PHON.ONSET con ] ].

participate_in_v1 := v_empty_prep_intrans_le &
 [ STEM < "participate" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_participate_v_in_rel" ],
            PHON.ONSET con ] ].

participate_v1 := v_unerg_le &
 [ STEM < "participate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_participate_v_in_rel",
            PHON.ONSET con ] ].

participation_n1 := n_mass_ppcomp_le &
 [ STEM < "participation" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_participation_n_in_rel" ],
            PHON.ONSET con ] ].

participial_a1 := adj_intrans_le &
 [ STEM < "participial" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_participial_a_1_rel",
            PHON.ONSET con ] ].

participial_n1 := n_intr_le &
 [ STEM < "participial" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_participial_n_1_rel",
            PHON.ONSET con ] ].

participle_n1 := n_intr_le &
 [ STEM < "participle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_participle_n_1_rel",
            PHON.ONSET con ] ].

particle_n1 := n_ppof_le &
 [ STEM < "particle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_particle_n_of_rel",
            PHON.ONSET con ] ].

particular_a1 := adj_intrans_le &
 [ STEM < "particular" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_particular_a_1_rel",
            PHON.ONSET con ] ].

particularize_v1 := v_np_trans_le &
 [ STEM < "particularize" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_particularize_v_1_rel",
            PHON.ONSET con ] ].

particularly_adv1 := adv_int_vp_le &
 [ STEM < "particularly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_particular_a_1_rel",
            PHON.ONSET con ] ].

particularly_deg := adv_degree_spec_le &
 [ STEM < "particularly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_particularly_x_deg_rel",
            PHON.ONSET con ] ].

particularly_deg2 := adv_degree_spec_jo_le &
 [ STEM < "particularly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_particularly_x_deg_rel",
            PHON.ONSET con ] ].

particulars_n := n_plur_ppcomp_le &
 [ STEM < "particulars" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_particulars_n_of_rel" ],
            PHON.ONSET con ] ].

partisan_a1 := adj_intrans_le &
 [ STEM < "partisan" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_partisan_a_1_rel",
            PHON.ONSET con ] ].

partisan_n1 := n_intr_le &
 [ STEM < "partisan" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_partisan_n_1_rel",
            PHON.ONSET con ] ].

partition_n1 := n_mass_count_le &
 [ STEM < "partition" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_partition_n_1_rel",
            PHON.ONSET con ] ].

partly_adv1 := adv_int_vp_le &
 [ STEM < "partly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_partly_a_1_rel",
            PHON.ONSET con ] ].

partly_deg := adv_degree_spec_v_le &
 [ STEM < "partly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_partly_x_deg_rel",
            PHON.ONSET con ] ].

partner_n1 := n_intr_le &
 [ STEM < "partner" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_partner_n_1_rel",
            PHON.ONSET con ] ].

partnership_n1 := n_mass_count_le &
 [ STEM < "partnership" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_partnership_n_1_rel",
            PHON.ONSET con ] ].

parturition_n1 := n_mass_count_le &
 [ STEM < "parturition" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_parturition_n_1_rel",
            PHON.ONSET con ] ].

party_n1 := n_intr_le &
 [ STEM < "party" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_party_n_1_rel",
            PHON.ONSET con ] ].

party_v1 := v_unerg_le &
 [ STEM < "party" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_party_v_1_rel",
            PHON.ONSET con ] ].

pasque_n1 := n_proper_le &
 [ STEM < "pasque" >,
   SYNSEM [ LKEYS.KEYREL.CARG "pasque",
            PHON.ONSET con ] ].

pass_n1 := n_intr_le &
 [ STEM < "pass" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pass_n_1_rel",
            PHON.ONSET con ] ].

pass_off_v1 := v_particle_np_le &
 [ STEM < "pass" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_pass_v_off_rel" ],
            PHON.ONSET con ] ].

pass_on_v1 := v_particle_np_le &
 [ STEM < "pass" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_pass_v_on_rel" ],
            PHON.ONSET con ] ].

pass_on_v2 := v_particle_np_pp_to_le &
 [ STEM < "pass" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_pass_v_on_rel" ],
            PHON.ONSET con ] ].

pass_over_v1 := v_particle_np_le &
 [ STEM < "pass" >,
   SYNSEM [ LKEYS [ --COMPKEY _over_p_sel_rel,
                    KEYREL.PRED "_pass_v_over_rel" ],
            PHON.ONSET con ] ].

pass_v1 := v_np_trans_noger_le &
 [ STEM < "pass" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pass_v_1_rel",
            PHON.ONSET con ] ].

pass_v2 := v_prep_dir_le &
 [ STEM < "pass" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pass_v_1_rel",
            PHON.ONSET con ] ].

passable_a1 := adj_intrans_le &
 [ STEM < "passable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_passable_a_1_rel",
            PHON.ONSET con ] ].

passage_n1 := n_mass_count_ppof_le &
 [ STEM < "passage" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_passage_n_of_rel",
            PHON.ONSET con ] ].

passageway_n1 := n_intr_le &
 [ STEM < "passageway" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_passageway_n_1_rel",
            PHON.ONSET con ] ].

passau_n1 := n_proper_city_le &
 [ STEM < "passau" >,
   SYNSEM [ LKEYS.KEYREL.CARG "passau",
            PHON.ONSET con ] ].

passe_a1 := adj_intrans_le &
 [ STEM < "passe" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_passe_a_1_rel",
            PHON.ONSET con ] ].

passenger_n1 := n_intr_le &
 [ STEM < "passenger" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_passenger_n_1_rel",
            PHON.ONSET con ] ].

passion_n1 := n_mass_count_ppcomp_le &
 [ STEM < "passion" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_passion_n_for_rel" ],
            PHON.ONSET con ] ].

passionate_a1 := adj_intrans_le &
 [ STEM < "passionate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_passionate_a_1_rel",
            PHON.ONSET con ] ].

passive_a1 := adj_intrans_le &
 [ STEM < "passive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_passive_a_1_rel",
            PHON.ONSET con ] ].

passive_n1 := n_intr_le &
 [ STEM < "passive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_passive_n_1_rel",
            PHON.ONSET con ] ].

passport_n1 := n_intr_le &
 [ STEM < "passport" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_passport_n_1_rel",
            PHON.ONSET con ] ].

password_n1 := n_intr_le &
 [ STEM < "password" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_password_n_1_rel",
            PHON.ONSET con ] ].

past := p_le &
 [ STEM < "past" >,
   SYNSEM [ LKEYS.KEYREL.PRED _past_p_rel,
            PHON.ONSET con ] ].

past_a1 := adj_intrans_le &
 [ STEM < "past" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_past_a_1_rel",
            PHON.ONSET con ] ].

past_adv1 := pp_dir_le &
 [ STEM < "past" >,
   SYNSEM [ LKEYS.KEYREL.PRED _past_p_rel,
            PHON.ONSET con ] ].

past_n1 := n_intr_le &
 [ STEM < "past" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_past_n_1_rel",
            PHON.ONSET con ] ].

paste_n1 := n_mass_count_le &
 [ STEM < "paste" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_paste_n_1_rel",
            PHON.ONSET con ] ].

paste_v1 := v_np_trans_le &
 [ STEM < "paste" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_paste_v_1_rel",
            PHON.ONSET con ] ].

paste_v2 := v_np_prep_trans_dors_le &
 [ STEM < "paste" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_paste_v_1_rel",
            PHON.ONSET con ] ].

pastor_n1 := n_intr_le &
 [ STEM < "pastor" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pastor_n_1_rel",
            PHON.ONSET con ] ].

pastor_ttl := n_title_le &
 [ STEM < "pastor" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pastor_n_1_rel",
            PHON.ONSET con ] ].

pastor_v1 := v_np_trans_le &
 [ STEM < "pastor" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pastor_v_1_rel",
            PHON.ONSET con ] ].

pastorius_n1 := n_proper_le &
 [ STEM < "pastorius" >,
   SYNSEM [ LKEYS.KEYREL.CARG "pastorius",
            PHON.ONSET con ] ].

pastry_n1 := n_mass_count_le &
 [ STEM < "pastry" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pastry_n_1_rel",
            PHON.ONSET con ] ].

pasturage_n1 := n_mass_le &
 [ STEM < "pasturage" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pasturage_n_1_rel",
            PHON.ONSET con ] ].

pasture_n1 := n_mass_count_le &
 [ STEM < "pasture" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pasture_n_1_rel",
            PHON.ONSET con ] ].

pasture_v1 := v_np_trans_noger_le &
 [ STEM < "pasture" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pasture_v_cause_rel",
            PHON.ONSET con ] ].

pasture_v2 := v_unacc_le &
 [ STEM < "pasture" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pasture_v_1_rel",
            PHON.ONSET con ] ].

pastureland_n1 := n_mass_count_le &
 [ STEM < "pastureland" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pastureland_n_1_rel",
            PHON.ONSET con ] ].

pat := n_proper_le &
 [ STEM < "pat" >,
   SYNSEM [ LKEYS.KEYREL.CARG "pat",
            PHON.ONSET con ] ].

pat_n2 := n_intr_le &
 [ STEM < "pat" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pat_n_1_rel",
            PHON.ONSET con ] ].

pat_v1 := v_np_trans_le &
 [ STEM < "pat" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pat_v_1_rel",
            PHON.ONSET con ] ].

patch_n1 := n_intr_le &
 [ STEM < "patch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_patch_n_1_rel",
            PHON.ONSET con ] ].

patchellhytta_n1 := n_proper_le &
 [ STEM < "patchellhytta" >,
   SYNSEM [ LKEYS.KEYREL.CARG "patchellhytta",
            PHON.ONSET con ] ].

patchy_a1 := adj_intrans_le &
 [ STEM < "patchy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_patchy_a_1_rel",
            PHON.ONSET con ] ].

pate_n1 := n_mass_count_le &
 [ STEM < "pate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pate_n_1_rel",
            PHON.ONSET con ] ].

path_n1 := n_intr_le &
 [ STEM < "path" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_path_n_1_rel",
            PHON.ONSET con ] ].

pathetically := adv_int_vp_le &
 [ STEM < "pathetically" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pathetic_a_1_rel",
            PHON.ONSET con ] ].

pathway_n1 := n_intr_le &
 [ STEM < "pathway" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pathway_n_1_rel",
            PHON.ONSET con ] ].

patience_n1 := n_mass_le &
 [ STEM < "patience" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_patience_n_1_rel",
            PHON.ONSET con ] ].

patient_a1 := adj_intrans_le &
 [ STEM < "patient" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_patient_a_1_rel",
            PHON.ONSET con ] ].

patient_n1 := n_intr_le &
 [ STEM < "patient" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_patient_n_1_rel",
            PHON.ONSET con ] ].

patiently_adv1 := adv_int_vp_le &
 [ STEM < "patiently" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_patient_a_1_rel",
            PHON.ONSET con ] ].

patriarch_n1 := n_intr_le &
 [ STEM < "patriarch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_patriarch_n_1_rel",
            PHON.ONSET con ] ].

patrician_a1 := adj_intrans_le &
 [ STEM < "patrician" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_patrician_a_1_rel",
            PHON.ONSET con ] ].

patrician_n1 := n_intr_le &
 [ STEM < "patrician" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_patrician_n_1_rel",
            PHON.ONSET con ] ].

patrol_n1 := n_mass_count_ppof_le &
 [ STEM < "patrol" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_patrol_n_of_rel",
            PHON.ONSET con ] ].

patronize_v1 := v_np_trans_le &
 [ STEM < "patronize" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_patronize_v_1_rel",
            PHON.ONSET con ] ].

pattern_n1 := n_intr_le &
 [ STEM < "pattern" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pattern_n_1_rel",
            PHON.ONSET con ] ].

pattern_v1 := v_np_prep_trans_le &
 [ STEM < "pattern" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _after_p_rel,
                    KEYREL.PRED "_pattern_v_1_rel" ],
            PHON.ONSET con ] ].

patty_n1 := n_proper_le &
 [ STEM < "patty" >,
   SYNSEM [ LKEYS.KEYREL.CARG "patty",
            PHON.ONSET con ] ].

paul_n1 := n_proper_le &
 [ STEM < "paul" >,
   SYNSEM [ LKEYS.KEYREL.CARG "paul",
            PHON.ONSET con ] ].

paula := n_proper_le &
 [ STEM < "paula" >,
   SYNSEM [ LKEYS.KEYREL.CARG "paula",
            PHON.ONSET con ] ].

pause_n1 := n_intr_le &
 [ STEM < "pause" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pause_n_1_rel",
            PHON.ONSET con ] ].

pause_v1 := v_np*_trans_le &
 [ STEM < "pause" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pause_v_1_rel",
            PHON.ONSET con ] ].

pave_v1 := v_np_trans_le &
 [ STEM < "pave" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pave_v_1_rel",
            PHON.ONSET con ] ].

pavement_n1 := n_mass_count_le &
 [ STEM < "pavement" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pavement_n_1_rel",
            PHON.ONSET con ] ].

pavilion_n1 := n_intr_le &
 [ STEM < "pavilion" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pavilion_n_1_rel",
            PHON.ONSET con ] ].

pavilion_post_ttl := n_post_title_le &
 [ STEM < "pavilion" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pavilion_n_1_rel",
            PHON.ONSET con ] ].

pavlov_n1 := n_proper_le &
 [ STEM < "pavlov" >,
   SYNSEM [ LKEYS.KEYREL.CARG "pavlov",
            PHON.ONSET con ] ].

paw_n1 := n_intr_le &
 [ STEM < "paw" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_paw_n_1_rel",
            PHON.ONSET con ] ].

paw_n2 := n_proper_le &
 [ STEM < "paw" >,
   SYNSEM [ LKEYS.KEYREL.CARG "paw",
            PHON.ONSET con ] ].

paw_v1 := v_np_trans_le &
 [ STEM < "paw" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_paw_v_1_rel",
            PHON.ONSET con ] ].

pawlowski := n_proper_le &
 [ STEM < "pawlowski" >,
   SYNSEM [ LKEYS.KEYREL.CARG "pawlowski",
            PHON.ONSET con ] ].

pawn_n1 := n_intr_le &
 [ STEM < "pawn" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pawn_n_1_rel",
            PHON.ONSET con ] ].

pawn_v1 := v_np_trans_le &
 [ STEM < "pawn" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pawn_v_1_rel",
            PHON.ONSET con ] ].

pay_n1 := n_mass_le &
 [ STEM < "pay" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pay_n_1_rel",
            PHON.ONSET con ] ].

pay_v1 := v_ditrans*_le &
 [ STEM < "pay" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pay_v_for_rel",
            PHON.ONSET con ] ].

pay_v2 := v_np*_trans_double_pp_for_le &
 [ STEM < "pay" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_pay_v_for_rel" ],
            PHON.ONSET con ] ].

pay_v5 := v_expl_it_subj_vp_le &
 [ STEM < "pay" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pay_v_1_rel",
            PHON.ONSET con ] ].

payable_a1 := adj_trans_le &
 [ STEM < "payable" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_payable_a_to_rel" ],
            PHON.ONSET con ] ].

payback_n1 := n_intr_le &
 [ STEM < "payback" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_payback_n_1_rel",
            PHON.ONSET con ] ].

payback_n2 := n_intr_le &
 [ STEM < "pay-", "back" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_payback_n_1_rel",
            PHON.ONSET con ] ].

paycheck_n := n_intr_le &
 [ STEM < "paycheck" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_paycheck_n_1_rel",
            PHON.ONSET con ] ].

payment_n1 := n_mass_count_ppof_le &
 [ STEM < "payment" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_payment_n_of_rel",
            PHON.ONSET con ] ].

payroll_n1 := n_intr_le &
 [ STEM < "payroll" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_payroll_n_1_rel",
            PHON.ONSET con ] ].

pbs_n1 := n_proper_le &
 [ STEM < "pbs" >,
   SYNSEM [ LKEYS.KEYREL.CARG "pbs",
            PHON.ONSET con ] ].

pc_n1 := n_intr_le &
 [ STEM < "pc" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pc_n_1_rel",
            PHON.ONSET con ] ].

pcn_n1 := n_proper_le &
 [ STEM < "pcn" >,
   SYNSEM [ LKEYS.KEYREL.CARG "pcn",
            PHON.ONSET con ] ].

pcs_n1 := n_proper_le &
 [ STEM < "pcs" >,
   SYNSEM [ LKEYS.KEYREL.CARG "pcs",
            PHON.ONSET con ] ].

pda_n1 := n_intr_le &
 [ STEM < "pda" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pda_n_1_rel",
            PHON.ONSET con ] ].

peace_and_quiet_n1 := n_mass_le &
 [ STEM < "peace", "and", "quiet" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_peace+and+quiet_n_1_rel",
            PHON.ONSET con ] ].

peace_n1 := n_mass_le &
 [ STEM < "peace" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_peace_n_1_rel",
            PHON.ONSET con ] ].

peaceful_a1 := adj_intrans_le &
 [ STEM < "peaceful" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_peaceful_a_1_rel",
            PHON.ONSET con ] ].

peacefully := adv_int_vp_le &
 [ STEM < "peacefully" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_peaceful_a_1_rel",
            PHON.ONSET con ] ].

peach_n1 := n_mass_count_le &
 [ STEM < "peach" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_peach_n_1_rel",
            PHON.ONSET con ] ].

peachy_isect := adj_intrans_le &
 [ STEM < "peachy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_peachy_a_1_rel",
            PHON.ONSET con ] ].

peak_n1 := n_intr_le &
 [ STEM < "peak" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_peak_n_1_rel",
            PHON.ONSET con ] ].

peak_post_ttl := n_post_title_le &
 [ STEM < "peak" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_peak_n_1_rel",
            PHON.ONSET con ] ].

peak_v1 := v_unerg_le &
 [ STEM < "peak" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_peak_v_1_rel",
            PHON.ONSET con ] ].

pear_n1 := n_intr_le &
 [ STEM < "pear" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pear_n_1_rel",
            PHON.ONSET con ] ].

pearl_n1 := n_intr_le &
 [ STEM < "pearl" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pearl_n_1_rel",
            PHON.ONSET con ] ].

pearly_a1 := adj_intrans_le &
 [ STEM < "pearly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pearly_a_1_rel",
            PHON.ONSET con ] ].

peasant_n1 := n_intr_le &
 [ STEM < "peasant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_peasant_n_1_rel",
            PHON.ONSET con ] ].

pebble_n1 := n_intr_le &
 [ STEM < "pebble" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pebble_n_1_rel",
            PHON.ONSET con ] ].

peck_n1 := n_intr_le &
 [ STEM < "peck" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_peck_n_1_rel",
            PHON.ONSET con ] ].

peck_n2 := n_meas_le &
 [ STEM < "peck" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_peck_n_1_rel",
            PHON.ONSET con ] ].

peck_v1 := v_np_trans_le &
 [ STEM < "peck" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_peck_v_1_rel",
            PHON.ONSET con ] ].

pectoral_n1 := n_intr_le &
 [ STEM < "pectoral" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pectoral_n_1_rel",
            PHON.ONSET con ] ].

peculiar_a1 := adj_intrans_le &
 [ STEM < "peculiar" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_peculiar_a_1_rel",
            PHON.ONSET con ] ].

peculiarity_n1 := n_intr_le &
 [ STEM < "peculiarity" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_peculiarity_n_1_rel",
            PHON.ONSET con ] ].

peculiarly_adv1 := adv_int_vp_le &
 [ STEM < "peculiarly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_peculiar_a_1_rel",
            PHON.ONSET con ] ].

pecuniary_a1 := adj_intrans_le &
 [ STEM < "pecuniary" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pecuniary_a_1_rel",
            PHON.ONSET con ] ].

pedal_n1 := n_intr_le &
 [ STEM < "pedal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pedal_n_1_rel",
            PHON.ONSET con ] ].

pedal_v1 := v_np*_trans_le &
 [ STEM < "pedal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pedal_v_1_rel",
            PHON.ONSET con ] ].

peddle_v1 := v_np_trans_le &
 [ STEM < "peddle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_peddle_v_1_rel",
            PHON.ONSET con ] ].

pedestrian_n1 := n_intr_le &
 [ STEM < "pedestrian" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pedestrian_n_1_rel",
            PHON.ONSET con ] ].

peel_n1 := n_intr_le &
 [ STEM < "peel" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_peel_n_1_rel",
            PHON.ONSET con ] ].

peel_off_v1 := v_particle_np_le &
 [ STEM < "peel" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_peel_v_off_rel" ],
            PHON.ONSET con ] ].

peel_v1 := v_np*_trans_le &
 [ STEM < "peel" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_peel_v_1_rel",
            PHON.ONSET con ] ].

peer_n1 := n_intr_le &
 [ STEM < "peer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_peer_n_1_rel",
            PHON.ONSET con ] ].

peer_n2 := n_proper_le &
 [ STEM < "peer" >,
   SYNSEM [ LKEYS.KEYREL.CARG "peer",
            PHON.ONSET con ] ].

peer_v1 := v_prep_dir_le &
 [ STEM < "peer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_peer_v_1_rel",
            PHON.ONSET con ] ].

peeved_a1 := adj_intrans_le &
 [ STEM < "peeved" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_peeved_a_1_rel",
            PHON.ONSET con ] ].

peg_n1 := n_intr_le &
 [ STEM < "peg" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_peg_n_1_rel",
            PHON.ONSET con ] ].

pele_n1 := n_proper_le &
 [ STEM < "pele" >,
   SYNSEM [ LKEYS.KEYREL.CARG "pele",
            PHON.ONSET con ] ].

pelt_clad_a1 := adj_intrans_le &
 [ STEM < "pelt-", "clad" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pelt-clad_a_1_rel",
            PHON.ONSET con ] ].

pelt_n1 := n_intr_le &
 [ STEM < "pelt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pelt_n_1_rel",
            PHON.ONSET con ] ].

pelt_v1 := v_np*_trans_le &
 [ STEM < "pelt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pelt_v_1_rel",
            PHON.ONSET con ] ].

pelvic_a1 := adj_attr_intrans_le &
 [ STEM < "pelvic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pelvic_a_1_rel",
            PHON.ONSET con ] ].

pelvic_style_a1 := adj_intrans_le &
 [ STEM < "pelvic-", "style" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pelvic+style_a_1_rel",
            PHON.ONSET con ] ].

pelvic_style_adv := adv_int_vp_post_le &
 [ STEM < "pelvic-", "style" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pelvic+style_a_1_rel",
            PHON.ONSET con ] ].

pen_n1 := n_intr_le &
 [ STEM < "pen" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pen_n_1_rel",
            PHON.ONSET con ] ].

penalty_n1 := n_ppcomp_le &
 [ STEM < "penalty" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_penalty_n_for_rel" ],
            PHON.ONSET con ] ].

pencil_in_v1 := v_particle_np_le &
 [ STEM < "pencil" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_pencil_v_in_rel" ],
            PHON.ONSET con ] ].

pencil_v1 := v_np_trans_le &
 [ STEM < "pencil" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pencil_v_1_rel",
            PHON.ONSET con ] ].

pending_a1 := adj_intrans_le &
 [ STEM < "pending" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pending_a_1_rel",
            PHON.ONSET con ] ].

pendulum_n1 := n_intr_le &
 [ STEM < "pendulum" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pendulum_n_1_rel",
            PHON.ONSET con ] ].

penetrate_v1 := v_np*_trans_le &
 [ STEM < "penetrate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_penetrate_v_1_rel",
            PHON.ONSET con ] ].

penetration_n1 := n_mass_count_ppof_le &
 [ STEM < "penetration" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_penetration_n_of_rel",
            PHON.ONSET con ] ].

penguin_n1 := n_intr_le &
 [ STEM < "penguin" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_penguin_n_1_rel",
            PHON.ONSET con ] ].

peninsula_n1 := n_intr_le &
 [ STEM < "peninsula" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_peninsula_n_1_rel",
            PHON.ONSET con ] ].

penmanship_n1 := n_mass_le &
 [ STEM < "penmanship" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_penmanship_n_1_rel",
            PHON.ONSET con ] ].

penniless_a1 := adj_intrans_le &
 [ STEM < "penniless" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_penniless_a_1_rel",
            PHON.ONSET con ] ].

pennsylvania_n1 := n_proper_le &
 [ STEM < "pennsylvania" >,
   SYNSEM [ LKEYS.KEYREL.CARG "pennsylvania",
            PHON.ONSET con ] ].

pennsylvania_n2 := n_proper_abb_le &
 [ STEM < "pa" >,
   SYNSEM [ LKEYS.KEYREL.CARG "pennsylvania",
            PHON.ONSET con ] ].

penny_n1 := n_intr_le &
 [ STEM < "penny" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_penny_n_1_rel",
            PHON.ONSET con ] ].

pension_n1 := n_intr_le &
 [ STEM < "pension" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pension_n_1_rel",
            PHON.ONSET con ] ].

pentabulous := n_proper_le &
 [ STEM < "pentabulous" >,
   SYNSEM [ LKEYS.KEYREL.CARG "pentabulous",
            PHON.ONSET con ] ].

pentateuch_n1 := n_intr_named_le &
 [ STEM < "pentateuch" >,
   SYNSEM [ LKEYS.KEYREL.CARG "pentateuch",
            PHON.ONSET con ] ].

pentateuch_n2 := n_intr_named_le &
 [ STEM < "pentatech" >,
   SYNSEM [ LKEYS.KEYREL.CARG "pentateuch",
            PHON.ONSET con ] ].

pentax_n1 := n_proper_le &
 [ STEM < "pentax" >,
   SYNSEM [ LKEYS.KEYREL.CARG "pentax",
            PHON.ONSET con ] ].

penthouse_n1 := n_intr_le &
 [ STEM < "penthouse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_penthouse_n_1_rel",
            PHON.ONSET con ] ].

pentium_n1 := n_proper_le &
 [ STEM < "pentium" >,
   SYNSEM [ LKEYS.KEYREL.CARG "pentium",
            PHON.ONSET con ] ].

penultimate_isect := adj_intrans_le &
 [ STEM < "penultimate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_penultimate_a_1_rel",
            PHON.ONSET con ] ].

people_n1 := n_plur_ppcomp_le &
 [ STEM < "people" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_people_n_of_rel" ],
            PHON.ONSET con ] ].

pepper_n1 := n_mass_count_le &
 [ STEM < "pepper" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pepper_n_1_rel",
            PHON.ONSET con ] ].

pepper_v1 := v_np_trans_le &
 [ STEM < "pepper" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pepper_v_1_rel",
            PHON.ONSET con ] ].

per_cent_n1 := n_ppof_le &
 [ STEM < "per", "cent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_percent_n_of_rel",
            PHON.ONSET con ] ].

per_cent_plur_n1 := n_plur_ppcomp_le &
 [ STEM < "per", "cent" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_percent_n_of_rel" ],
            PHON.ONSET con ] ].

per_diem_n1 := n_intr_le &
 [ STEM < "per", "diem" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_per+diem_n_1_rel",
            PHON.ONSET con ] ].

per_gynt_n1 := n_proper_le &
 [ STEM < "per", "gynt" >,
   SYNSEM [ LKEYS.KEYREL.CARG "per_gynt",
            PHON.ONSET con ] ].

per_n1 := n_proper_le &
 [ STEM < "per" >,
   SYNSEM [ LKEYS.KEYREL.CARG "per",
            PHON.ONSET con ] ].

per_p := p_nbar_comp_per_le &
 [ STEM < "per" >,
   SYNSEM [ LKEYS.KEYREL.PRED _per_p_rel,
            PHON.ONSET con ] ].

perceive_v1 := v_np_trans_le &
 [ STEM < "perceive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_perceive_v_1_rel",
            PHON.ONSET con ] ].

perceive_v2 := v_np_as_le &
 [ STEM < "perceive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_perceive_v_as_rel",
            PHON.ONSET con ] ].

perceive_v3 := v_obj_equi_le &
 [ STEM < "perceive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_perceive_v_1_rel",
            PHON.ONSET con ] ].

perceive_v4 := v_cp_non_trans_le &
 [ STEM < "perceive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_perceive_v_1_rel",
            PHON.ONSET con ] ].

percent_char_n1 := n_ppof_le &
 [ STEM < "%" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_percent_n_of_rel",
            PHON.ONSET con ] ].

percent_n1 := n_ppof_le &
 [ STEM < "percent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_percent_n_of_rel",
            PHON.ONSET con ] ].

percentage_n1 := n_ppof_le &
 [ STEM < "percentage" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_percentage_n_of_rel",
            PHON.ONSET con ] ].

percept_n1 := n_intr_le &
 [ STEM < "percept" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_percept_n_1_rel",
            PHON.ONSET con ] ].

perceptible_a1 := adj_intrans_le &
 [ STEM < "perceptible" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_perceptible_a_1_rel",
            PHON.ONSET con ] ].

perception_n1 := n_mass_count_le &
 [ STEM < "perception" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_perception_n_1_rel",
            PHON.ONSET con ] ].

perch_n1 := n_mass_count_le &
 [ STEM < "perch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_perch_n_1_rel",
            PHON.ONSET con ] ].

perch_v1 := v_unerg_le &
 [ STEM < "perch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_perch_v_1_rel",
            PHON.ONSET con ] ].

perch_v2 := v_np_trans_le &
 [ STEM < "perch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_perch_v_cause_rel",
            PHON.ONSET con ] ].

perch_v3 := v_np_prep_trans_dors_le &
 [ STEM < "perch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_perch_v_1_rel",
            PHON.ONSET con ] ].

percipient_a1 := adj_intrans_le &
 [ STEM < "percipient" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_percipient_a_1_rel",
            PHON.ONSET con ] ].

percipient_n1 := n_intr_le &
 [ STEM < "percipient" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_percipient_n_1_rel",
            PHON.ONSET con ] ].

percussion_n1 := n_mass_le &
 [ STEM < "percussion" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_percussion_n_1_rel",
            PHON.ONSET con ] ].

perennial_a1 := adj_intrans_le &
 [ STEM < "perennial" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_perennial_a_1_rel",
            PHON.ONSET con ] ].

perennial_n1 := n_intr_le &
 [ STEM < "perennial" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_perennial_n_1_rel",
            PHON.ONSET con ] ].

perfect_a1 := adj_intrans_le &
 [ STEM < "perfect" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_perfect_a_1_rel",
            PHON.ONSET con ] ].

perfection_n1 := n_mass_le &
 [ STEM < "perfection" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_perfection_n_1_rel",
            PHON.ONSET con ] ].

perfectly_adv1 := adv_int_vp_le &
 [ STEM < "perfectly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_perfect_a_1_rel",
            PHON.ONSET con ] ].

perfectly_deg := adv_degree_spec_v_le &
 [ STEM < "perfectly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_perfectly_x_rel",
            PHON.ONSET con ] ].

perforate_v1 := v_np_trans_le &
 [ STEM < "perforate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_perforate_v_1_rel",
            PHON.ONSET con ] ].

perforation_n1 := n_mass_count_le &
 [ STEM < "perforation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_perforation_n_1_rel",
            PHON.ONSET con ] ].

perform_v1 := v_np*_trans_le &
 [ STEM < "perform" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_perform_v_1_rel",
            PHON.ONSET con ] ].

performance-artist_n1 := n_intr_le &
 [ STEM < "performance", "artist" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_performance+artist_n_1_rel",
            PHON.ONSET con ] ].

performance_n1 := n_intr_le &
 [ STEM < "performance" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_performance_n_1_rel",
            PHON.ONSET con ] ].

performance_oriented_a1 := adj_intrans_le &
 [ STEM < "performance", "oriented" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_performance+oriented_a_1_rel",
            PHON.ONSET con ] ].

performer_n1 := n_intr_le &
 [ STEM < "performer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_performer_n_1_rel",
            PHON.ONSET con ] ].

perfume_n1 := n_mass_count_le &
 [ STEM < "perfume" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_perfume_n_1_rel",
            PHON.ONSET con ] ].

perfume_v1 := v_np_trans_le &
 [ STEM < "perfume" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_perfume_v_1_rel",
            PHON.ONSET con ] ].

perhaps_adv1 := adv_vp_post_le &
 [ STEM < "perhaps" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_perhaps_a_1_rel",
            PHON.ONSET con ] ].

perhaps_adv2 := adv_s_pre_word_nospec_le &
 [ STEM < "perhaps" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_perhaps_a_1_rel",
            PHON.ONSET con ] ].

perhaps_disc_adv := adv_disc_like_preh_le &
 [ STEM < "perhaps" >,
   SYNSEM [ LKEYS.KEYREL.CARG "perhaps",
            PHON.ONSET con ] ].

peril_n1 := n_mass_count_le &
 [ STEM < "peril" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_peril_n_1_rel",
            PHON.ONSET con ] ].

perilous_a1 := adj_intrans_le &
 [ STEM < "perilous" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_perilous_a_1_rel",
            PHON.ONSET con ] ].

period_n1 := n_ppof_le &
 [ STEM < "period" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_period_n_of_rel",
            PHON.ONSET con ] ].

periodical_a1 := adj_intrans_le &
 [ STEM < "periodical" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_periodical_a_1_rel",
            PHON.ONSET con ] ].

periodical_n1 := n_intr_le &
 [ STEM < "periodical" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_periodical_n_1_rel",
            PHON.ONSET con ] ].

periodically := adv_int_vp_le &
 [ STEM < "periodically" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_periodical_a_1_rel",
            PHON.ONSET con ] ].

peripheral_a1 := adj_intrans_le &
 [ STEM < "peripheral" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_peripheral_a_1_rel",
            PHON.ONSET con ] ].

peripheral_n1 := n_intr_le &
 [ STEM < "peripheral" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_peripheral_n_1_rel",
            PHON.ONSET con ] ].

perish_v1 := v_unerg_le &
 [ STEM < "perish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_perish_v_1_rel",
            PHON.ONSET con ] ].

perishable_a1 := adj_intrans_le &
 [ STEM < "perishable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_perishable_a_1_rel",
            PHON.ONSET con ] ].

perl_n1 := n_proper_le &
 [ STEM < "perl" >,
   SYNSEM [ LKEYS.KEYREL.CARG "perl",
            PHON.ONSET con ] ].

perleporten_n1 := n_proper_le &
 [ STEM < "perleporten" >,
   SYNSEM [ LKEYS.KEYREL.CARG "perleporten",
            PHON.ONSET con ] ].

permanent_a1 := adj_intrans_le &
 [ STEM < "permanent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_permanent_a_1_rel",
            PHON.ONSET con ] ].

permanently := adv_int_vp_le &
 [ STEM < "permanently" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_permanent_a_1_rel",
            PHON.ONSET con ] ].

permeate_into_v1 := v_empty_prep_intrans_le &
 [ STEM < "permeate" >,
   SYNSEM [ LKEYS [ --COMPKEY _into_p_sel_rel,
                    KEYREL.PRED "_permeate_v_into_rel" ],
            PHON.ONSET con ] ].

permeate_v1 := v_np_trans_le &
 [ STEM < "permeate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_permeate_v_1_rel",
            PHON.ONSET con ] ].

permission_n1 := n_mass_le &
 [ STEM < "permission" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_permission_n_1_rel",
            PHON.ONSET con ] ].

permit_n1 := n_intr_le &
 [ STEM < "permit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_permit_n_1_rel",
            PHON.ONSET con ] ].

permit_v1 := v_obj_equi_le &
 [ STEM < "permit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_permit_v_1_rel",
            PHON.ONSET con ] ].

permit_v2 := v_np*_trans_le &
 [ STEM < "permit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_permit_v_1_rel",
            PHON.ONSET con ] ].

permit_v3 := v_ditrans_only_le &
 [ STEM < "permit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_permit_v_1_rel",
            PHON.ONSET con ] ].

permutation_n1 := n_mass_count_le &
 [ STEM < "permutation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_permutation_n_1_rel",
            PHON.ONSET con ] ].

peroxide_n1 := n_mass_count_le &
 [ STEM < "peroxide" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_peroxide_n_1_rel",
            PHON.ONSET con ] ].

perpendicular_a1 := adj_intrans_le &
 [ STEM < "perpendicular" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_perpendicular_a_1_rel",
            PHON.ONSET con ] ].

perpendicular_n1 := n_intr_le &
 [ STEM < "perpendicular" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_perpendicular_n_1_rel",
            PHON.ONSET con ] ].

perpetual_a1 := adj_intrans_le &
 [ STEM < "perpetual" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_perpetual_a_1_rel",
            PHON.ONSET con ] ].

perpetuate_v1 := v_np_trans_le &
 [ STEM < "perpetuate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_perpetuate_v_1_rel",
            PHON.ONSET con ] ].

perseverance_n1 := n_mass_le &
 [ STEM < "perseverance" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_perseverance_n_1_rel",
            PHON.ONSET con ] ].

persia_n1 := n_proper_le &
 [ STEM < "persia" >,
   SYNSEM [ LKEYS.KEYREL.CARG "persia",
            PHON.ONSET con ] ].

persist_v1 := v_unerg_le &
 [ STEM < "persist" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_persist_v_1_rel",
            PHON.ONSET con ] ].

persist_v2 := v_empty_prep_intrans_le &
 [ STEM < "persist" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_persist_v_in_rel" ],
            PHON.ONSET con ] ].

persist_v3 := v_cp_non_trans_le &
 [ STEM < "persist" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_persist_v_1_rel",
            PHON.ONSET con ] ].

person_n1 := n_intr_le &
 [ STEM < "person" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_person_n_1_rel",
            PHON.ONSET con ] ].

personal_a1 := adj_intrans_le &
 [ STEM < "personal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_personal_a_1_rel",
            PHON.ONSET con ] ].

personalize_v1 := v_np_trans_le &
 [ STEM < "personalize" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_personalize_v_1_rel",
            PHON.ONSET con ] ].

personally_adv1 := adv_int_vp_le &
 [ STEM < "personally" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_personal_a_1_rel",
            PHON.ONSET con ] ].

personate_v1 := v_np_trans_le &
 [ STEM < "personate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_personate_v_1_rel",
            PHON.ONSET con ] ].

personification_n1 := n_mass_count_le &
 [ STEM < "personification" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_personification_n_1_rel",
            PHON.ONSET con ] ].

personify_v1 := v_np_trans_le &
 [ STEM < "personify" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_personify_v_1_rel",
            PHON.ONSET con ] ].

personnel_n1 := n_plur_le &
 [ STEM < "personnel" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_personnel_n_1_rel",
            PHON.ONSET con ] ].

perspective_n1 := n_intr_le &
 [ STEM < "perspective" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_perspective_n_1_rel",
            PHON.ONSET con ] ].

perspiration_n1 := n_mass_le &
 [ STEM < "perspiration" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_perspiration_n_1_rel",
            PHON.ONSET con ] ].

persuade_v1 := v_obj_equi_le &
 [ STEM < "persuade" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_persuade_v_of_rel",
            PHON.ONSET con ] ].

persuade_v2 := v_np_trans_cp_prop_le &
 [ STEM < "persuade" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_persuade_v_of_rel",
            PHON.ONSET con ] ].

persuade_v3 := v_empty_prep_trans_le &
 [ STEM < "persuade" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_persuade_v_of_rel" ],
            PHON.ONSET con ] ].

persuade_v4 := v_np_trans_le &
 [ STEM < "persuade" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_persuade_v_of_rel",
            PHON.ONSET con ] ].

persuasion_n1 := n_mass_count_le &
 [ STEM < "persuasion" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_persuasion_n_1_rel",
            PHON.ONSET con ] ].

pertain_to_v1 := v_empty_prep_intrans_le &
 [ STEM < "pertain" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_pertain_v_to_rel" ],
            PHON.ONSET con ] ].

pertaining_a1 := adj_trans_le &
 [ STEM < "pertaining" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_pertaining_a_to_rel" ],
            PHON.ONSET con ] ].

pertinency_n1 := n_mass_le &
 [ STEM < "pertinency" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pertinency_n_1_rel",
            PHON.ONSET con ] ].

peruse_v1 := v_np_trans_le &
 [ STEM < "peruse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_peruse_v_1_rel",
            PHON.ONSET con ] ].

peseta_n1 := n_intr_le &
 [ STEM < "peseta" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_peseta_n_1_rel",
            PHON.ONSET con ] ].

peso_n1 := n_intr_le &
 [ STEM < "peso" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_peso_n_1_rel",
            PHON.ONSET con ] ].

pessimistic := adj_intrans_le &
 [ STEM < "pessimistic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pessimistic_a_1_rel",
            PHON.ONSET con ] ].

pessimistically_adv1 := adv_int_vp_post_le &
 [ STEM < "pessimistically" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pessimistic_a_1_rel",
            PHON.ONSET con ] ].

pet_n1 := n_intr_le &
 [ STEM < "pet" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pet_n_1_rel",
            PHON.ONSET con ] ].

petal_n1 := n_intr_le &
 [ STEM < "petal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_petal_n_1_rel",
            PHON.ONSET con ] ].

peter := n_proper_le &
 [ STEM < "peter" >,
   SYNSEM [ LKEYS.KEYREL.CARG "peter",
            PHON.ONSET con ] ].

petition_n1 := n_intr_le &
 [ STEM < "petition" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_petition_n_1_rel",
            PHON.ONSET con ] ].

petition_v1 := v_np_trans_le &
 [ STEM < "petition" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_petition_v_1_rel",
            PHON.ONSET con ] ].

petition_v2 := v_obj_equi_le &
 [ STEM < "petition" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_petition_v_1_rel",
            PHON.ONSET con ] ].

petrol_n1 := n_mass_le &
 [ STEM < "petrol" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_petrol_n_1_rel",
            PHON.ONSET con ] ].

petter := n_proper_le &
 [ STEM < "petter" >,
   SYNSEM [ LKEYS.KEYREL.CARG "petter",
            PHON.ONSET con ] ].

petulant_a1 := adj_intrans_le &
 [ STEM < "petulant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_petulant_a_1_rel",
            PHON.ONSET con ] ].

petz_n1 := n_proper_city_le &
 [ STEM < "petz" >,
   SYNSEM [ LKEYS.KEYREL.CARG "petz",
            PHON.ONSET con ] ].

pfaff_n1 := n_proper_city_le &
 [ STEM < "pfaff" >,
   SYNSEM [ LKEYS.KEYREL.CARG "pfaff",
            PHON.ONSET con ] ].

pfennig_n1 := n_intr_le &
 [ STEM < "pfennig" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pfennig_n_1_rel",
            PHON.ONSET con ] ].

pforzheim_n1 := n_proper_city_le &
 [ STEM < "pforzheim" >,
   SYNSEM [ LKEYS.KEYREL.CARG "pforzheim",
            PHON.ONSET con ] ].

phantom_n1 := n_intr_le &
 [ STEM < "phantom" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_phantom_n_1_rel",
            PHON.ONSET con ] ].

pharmaceutical_isect := adj_intrans_le &
 [ STEM < "pharmaceutical" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pharmaceutical_a_1_rel",
            PHON.ONSET con ] ].

pharmacist_n1 := n_intr_le &
 [ STEM < "pharmacist" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pharmacist_n_1_rel",
            PHON.ONSET con ] ].

phase_n1 := n_ppof_le &
 [ STEM < "phase" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_phase_n_of_rel",
            PHON.ONSET con ] ].

phase_out_v1 := v_particle_np_le &
 [ STEM < "phase" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_phase_v_out_rel" ],
            PHON.ONSET con ] ].

phase_out_v2 := v_particle_le &
 [ STEM < "phase" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_phase_v_out_rel" ],
            PHON.ONSET con ] ].

phd_n1 := n_intr_le &
 [ STEM < "phd" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_phd_n_1_rel",
            PHON.ONSET con ] ].

pheasant_n1 := n_intr_le &
 [ STEM < "pheasant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pheasant_n_1_rel",
            PHON.ONSET con ] ].

phenomena_n1 := n_intr_le &
 [ STEM < "phenomena" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_phenomena_n_1_rel",
            PHON.ONSET con ] ].

phenomenal_a1 := adj_intrans_le &
 [ STEM < "phenomenal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_phenomenal_a_1_rel",
            PHON.ONSET con ] ].

phi_nd := n_proper_le &
 [ STEM < "phi" >,
   SYNSEM [ LKEYS.KEYREL.CARG "phi",
            PHON.ONSET con ] ].

phil_n1 := n_proper_le &
 [ STEM < "phil" >,
   SYNSEM [ LKEYS.KEYREL.CARG "phil",
            PHON.ONSET con ] ].

philadelphia_n1 := n_proper_city_le &
 [ STEM < "philadelphia" >,
   SYNSEM [ LKEYS.KEYREL.CARG "philadelphia",
            PHON.ONSET con ] ].

philharmonic_n1 := n_intr_le &
 [ STEM < "philharmonic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_philharmonic_n_1_rel",
            PHON.ONSET con ] ].

philippines_n1 := n_proper_le &
 [ STEM < "philippines" >,
   SYNSEM [ LKEYS.KEYREL.CARG "philippines",
            PHON.ONSET con ] ].

philips_n1 := n_proper_le &
 [ STEM < "philips" >,
   SYNSEM [ LKEYS.KEYREL.CARG "philips",
            PHON.ONSET con ] ].

philly_n1 := n_proper_city_le &
 [ STEM < "philly" >,
   SYNSEM [ LKEYS.KEYREL.CARG "philly",
            PHON.ONSET con ] ].

philosopher_n1 := n_intr_le &
 [ STEM < "philosopher" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_philosopher_n_1_rel",
            PHON.ONSET con ] ].

philosophical_a1 := adj_intrans_le &
 [ STEM < "philosophical" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_philosophical_a_1_rel",
            PHON.ONSET con ] ].

philosophically_adv1 := adv_int_vp_le &
 [ STEM < "philosophically" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_philosophical_a_1_rel",
            PHON.ONSET con ] ].

philosophy_n1 := n_mass_count_le &
 [ STEM < "philosophy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_philosophy_n_1_rel",
            PHON.ONSET con ] ].

phoenician_a1 := adj_intrans_le &
 [ STEM < "phoenician" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_phoenician_a_1_rel",
            PHON.ONSET con ] ].

phoenician_a2 := adj_intrans_le &
 [ STEM < "phÅnician" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_phoenician_a_1_rel",
            PHON.ONSET con ] ].

phone-ersatz := n_proper_le &
 [ STEM < "threefournumberersatz" >,
   SYNSEM [ LKEYS.KEYREL.CARG "phoneersatz",
            PHON.ONSET onset ] ].

phone_n1 := n_intr_nosort_le &
 [ STEM < "phone" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_phone_n_1_rel",
            PHON.ONSET con ] ].

phone_v1 := v_np_trans_le &
 [ STEM < "phone" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_phone_v_1_rel",
            PHON.ONSET con ] ].

phosphate_n1 := n_mass_count_le &
 [ STEM < "phosphate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_phosphate_n_1_rel",
            PHON.ONSET con ] ].

photo_n1 := n_intr_le &
 [ STEM < "photo" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_photograph_n_1_rel",
            PHON.ONSET con ] ].

photocopier_n1 := n_intr_le &
 [ STEM < "photocopier" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_photocopier_n_1_rel",
            PHON.ONSET con ] ].

photograph_n1 := n_intr_le &
 [ STEM < "photograph" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_photograph_n_1_rel",
            PHON.ONSET con ] ].

photograph_v1 := v_np_trans_le &
 [ STEM < "photograph" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_photograph_v_1_rel",
            PHON.ONSET con ] ].

photographer_n1 := n_ppof_le &
 [ STEM < "photographer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_photographer_n_of_rel",
            PHON.ONSET con ] ].

photographic_a1 := adj_intrans_le &
 [ STEM < "photographic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_photographic_a_1_rel",
            PHON.ONSET con ] ].

photomax_n1 := n_proper_le &
 [ STEM < "photomax" >,
   SYNSEM [ LKEYS.KEYREL.CARG "photomax",
            PHON.ONSET con ] ].

photoshop_n1 := n_proper_le &
 [ STEM < "photoshop" >,
   SYNSEM [ LKEYS.KEYREL.CARG "photoshop",
            PHON.ONSET con ] ].

phrase_n1 := n_intr_le &
 [ STEM < "phrase" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_phrase_n_1_rel",
            PHON.ONSET con ] ].

phrase_v1 := v_np_trans_le &
 [ STEM < "phrase" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_phrase_v_1_rel",
            PHON.ONSET con ] ].

phraseology_n1 := n_mass_count_le &
 [ STEM < "phraseology" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_phraseology_n_1_rel",
            PHON.ONSET con ] ].

physical := adj_intrans_le &
 [ STEM < "physical" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_physical_a_1_rel",
            PHON.ONSET con ] ].

physically := adv_int_vp_le &
 [ STEM < "physically" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_physical_a_1_rel",
            PHON.ONSET con ] ].

physician_n1 := n_intr_le &
 [ STEM < "physician" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_physician_n_1_rel",
            PHON.ONSET con ] ].

physics_n1 := n_mass_le &
 [ STEM < "physics" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_physics_n_1_rel",
            PHON.ONSET con ] ].

piano_n1 := n_intr_le &
 [ STEM < "piano" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_piano_n_1_rel",
            PHON.ONSET con ] ].

pianoforte_n1 := n_intr_le &
 [ STEM < "pianoforte" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pianoforte_n_1_rel",
            PHON.ONSET con ] ].

pica_n1 := n_mass_le &
 [ STEM < "pica" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pica_n_1_rel",
            PHON.ONSET con ] ].

picasso_n1 := n_proper_le &
 [ STEM < "picasso" >,
   SYNSEM [ LKEYS.KEYREL.CARG "picasso",
            PHON.ONSET con ] ].

pick_n1 := n_ppof_le &
 [ STEM < "pick" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pick_n_of_rel",
            PHON.ONSET con ] ].

pick_off_v1 := v_particle_np_le &
 [ STEM < "pick" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_pick_v_off_rel" ],
            PHON.ONSET con ] ].

pick_on_v1 := v_empty_prep_intrans_le &
 [ STEM < "pick" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_pick_v_on_rel" ],
            PHON.ONSET con ] ].

pick_out_v1 := v_particle_np_le &
 [ STEM < "pick" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_pick_v_out_rel" ],
            PHON.ONSET con ] ].

pick_up_v1 := v_particle_np_le &
 [ STEM < "pick" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_pick_v_up_rel" ],
            PHON.ONSET con ] ].

pick_up_v2 := v_particle_le &
 [ STEM < "pick" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_pick_v_up_rel" ],
            PHON.ONSET con ] ].

pick_v1 := v_np_trans_le &
 [ STEM < "pick" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pick_v_1_rel",
            PHON.ONSET con ] ].

pickaxe_n1 := n_intr_le &
 [ STEM < "pickaxe" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pickaxe_n_1_rel",
            PHON.ONSET con ] ].

pickle_n1 := n_mass_count_le &
 [ STEM < "pickle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pickle_n_1_rel",
            PHON.ONSET con ] ].

pickle_v1 := v_np_trans_le &
 [ STEM < "pickle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pickle_v_1_rel",
            PHON.ONSET con ] ].

pickler_n1 := n_intr_le &
 [ STEM < "pickler" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pickler_n_1_rel",
            PHON.ONSET con ] ].

picky_isect := adj_intrans_le &
 [ STEM < "picky" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_picky_a_1_rel",
            PHON.ONSET con ] ].

picnic_n1 := n_intr_le &
 [ STEM < "picnic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_picnic_n_1_rel",
            PHON.ONSET con ] ].

picnic_v1 := v_unerg_le &
 [ STEM < "picnic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_picnic_v_1_rel",
            PHON.ONSET con ] ].

pictorial := adj_intrans_le &
 [ STEM < "pictorial" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pictorial_a_1_rel",
            PHON.ONSET con ] ].

picture_n1 := n_ppof_le &
 [ STEM < "picture" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_picture_n_of_rel",
            PHON.ONSET con ] ].

picture_v1 := v_np_trans_le &
 [ STEM < "picture" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_picture_v_1_rel",
            PHON.ONSET con ] ].

picture_v2 := v_np_as_le &
 [ STEM < "picture" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_picture_v_as_rel",
            PHON.ONSET con ] ].

picturebook_n1 := n_ppof_le &
 [ STEM < "picturebook" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_picturebook_n_of_rel",
            PHON.ONSET con ] ].

picturesque_a1 := adj_intrans_le &
 [ STEM < "picturesque" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_picturesque_a_1_rel",
            PHON.ONSET con ] ].

piece_n1 := n_ppof_le &
 [ STEM < "piece" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_piece_n_of_rel",
            PHON.ONSET con ] ].

pier_n1 := n_intr_le &
 [ STEM < "pier" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pier_n_1_rel",
            PHON.ONSET con ] ].

pierce_v1 := v_np*_trans_le &
 [ STEM < "pierce" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pierce_v_1_rel",
            PHON.ONSET con ] ].

pieris_n1 := n_proper_le &
 [ STEM < "pieris" >,
   SYNSEM [ LKEYS.KEYREL.CARG "pieris",
            PHON.ONSET con ] ].

pig_n1 := n_intr_le &
 [ STEM < "pig" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pig_n_1_rel",
            PHON.ONSET con ] ].

piggen_n1 := n_proper_le &
 [ STEM < "piggen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "piggen",
            PHON.ONSET con ] ].

piggrovi_n1 := n_proper_le &
 [ STEM < "piggrovi" >,
   SYNSEM [ LKEYS.KEYREL.CARG "piggrovi",
            PHON.ONSET con ] ].

piggy_n1 := n_proper_le &
 [ STEM < "piggy" >,
   SYNSEM [ LKEYS.KEYREL.CARG "piggy",
            PHON.ONSET con ] ].

pigment_n1 := n_mass_count_le &
 [ STEM < "pigment" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pigment_n_1_rel",
            PHON.ONSET con ] ].

pike_n1 := n_mass_count_le &
 [ STEM < "pike" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pike_n_1_rel",
            PHON.ONSET con ] ].

pike_n2 := n_proper_le &
 [ STEM < "pike" >,
   SYNSEM [ LKEYS.KEYREL.CARG "pike",
            PHON.ONSET con ] ].

pile_n1 := n_ppof_le &
 [ STEM < "pile" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pile_n_of_rel",
            PHON.ONSET con ] ].

pile_up_v1 := v_particle_np_le &
 [ STEM < "pile" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_pile_v_up_rel" ],
            PHON.ONSET con ] ].

pile_up_v2 := v_particle_le &
 [ STEM < "pile" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_pile_v_up_rel" ],
            PHON.ONSET con ] ].

pile_v1 := v_np_trans_noger_le &
 [ STEM < "pile" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pile_v_1_rel",
            PHON.ONSET con ] ].

pile_v2 := v_prep_dir_le &
 [ STEM < "pile" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pile_v_1_rel",
            PHON.ONSET con ] ].

piled_up_a1 := adj_attr_intrans_le &
 [ STEM < "piled", "up" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_piled+up_a_1_rel",
            PHON.ONSET con ] ].

pill_n1 := n_intr_le &
 [ STEM < "pill" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pill_n_1_rel",
            PHON.ONSET con ] ].

pillar_n1 := n_ppof_le &
 [ STEM < "pillar" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pillar_n_of_rel",
            PHON.ONSET con ] ].

pillau_n1 := n_proper_le &
 [ STEM < "pillau" >,
   SYNSEM [ LKEYS.KEYREL.CARG "pillau",
            PHON.ONSET con ] ].

pillow_n1 := n_intr_le &
 [ STEM < "pillow" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pillow_n_1_rel",
            PHON.ONSET con ] ].

pilot_n1 := n_ppof_le &
 [ STEM < "pilot" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pilot_n_of_rel",
            PHON.ONSET con ] ].

pin_down_to_v1 := v_particle_np_pp_to_le &
 [ STEM < "pin" >,
   SYNSEM [ LKEYS [ --COMPKEY _down_p_sel_rel,
                    KEYREL.PRED "_pin_v_down_rel" ],
            PHON.ONSET con ] ].

pin_down_v1 := v_particle_np_le &
 [ STEM < "pin" >,
   SYNSEM [ LKEYS [ --COMPKEY _down_p_sel_rel,
                    KEYREL.PRED "_pin_v_down_rel" ],
            PHON.ONSET con ] ].

pin_down_v2 := v_particle_cp_le &
 [ STEM < "pin" >,
   SYNSEM [ LKEYS [ --COMPKEY _down_p_sel_rel,
                    KEYREL.PRED "_pin_v_down_rel" ],
            PHON.ONSET con ] ].

pin_n1 := n_intr_le &
 [ STEM < "pin" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pin_n_1_rel",
            PHON.ONSET con ] ].

pin_on_v1 := v_particle_np_le &
 [ STEM < "pin" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_pin_v_on_rel" ],
            PHON.ONSET con ] ].

pin_up_v1 := v_particle_np_le &
 [ STEM < "pin" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_pin_v_up_rel" ],
            PHON.ONSET con ] ].

pin_v1 := v_np_trans_le &
 [ STEM < "pin" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pin_v_1_rel",
            PHON.ONSET con ] ].

pinatubo_n1 := n_proper_le &
 [ STEM < "pinatubo" >,
   SYNSEM [ LKEYS.KEYREL.CARG "pinatubo",
            PHON.ONSET con ] ].

pinch_n1 := n_intr_le &
 [ STEM < "pinch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pinch_n_1_rel",
            PHON.ONSET con ] ].

pinch_v1 := v_np_trans_le &
 [ STEM < "pinch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pinch_v_1_rel",
            PHON.ONSET con ] ].

pine_for_v1 := v_empty_prep_intrans_le &
 [ STEM < "pine" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_pine_v_for_rel" ],
            PHON.ONSET con ] ].

pine_n1 := n_intr_le &
 [ STEM < "pine" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pine_n_1_rel",
            PHON.ONSET con ] ].

pinion_n1 := n_intr_le &
 [ STEM < "pinion" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pinion_n_1_rel",
            PHON.ONSET con ] ].

pinion_v1 := v_np_trans_le &
 [ STEM < "pinion" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pinion_v_1_rel",
            PHON.ONSET con ] ].

pink_a1 := adj_intrans_le &
 [ STEM < "pink" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pink_a_1_rel",
            PHON.ONSET con ] ].

pink_n1 := n_mass_count_le &
 [ STEM < "pink" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pink_n_1_rel",
            PHON.ONSET con ] ].

pinnacle_n1 := n_intr_le &
 [ STEM < "pinnacle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pinnacle_n_1_rel",
            PHON.ONSET con ] ].

pinpoint_n1 := n_intr_le &
 [ STEM < "pinpoint" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pinpoint_n_1_rel",
            PHON.ONSET con ] ].

pinpoint_v1 := v_np_trans_le &
 [ STEM < "pinpoint" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pinpoint_v_1_rel",
            PHON.ONSET con ] ].

pinpoint_v2 := v_cp_non_trans_le &
 [ STEM < "pinpoint" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pinpoint_v_1_rel",
            PHON.ONSET con ] ].

pioneer_n1 := n_proper_le &
 [ STEM < "pioneer" >,
   SYNSEM [ LKEYS.KEYREL.CARG "pioneer",
            PHON.ONSET con ] ].

pioneer_n2 := n_intr_le &
 [ STEM < "pioneer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pioneer_n_1_rel",
            PHON.ONSET con ] ].

pioneer_ttl := n_title_le &
 [ STEM < "pioneer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pioneer_n_1_rel",
            PHON.ONSET con ] ].

pioneer_v1 := v_np_trans_le &
 [ STEM < "pioneer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pioneer_v_1_rel",
            PHON.ONSET con ] ].

pious_a1 := adj_intrans_le &
 [ STEM < "pious" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pious_a_1_rel",
            PHON.ONSET con ] ].

pipe_n1 := n_intr_le &
 [ STEM < "pipe" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pipe_n_1_rel",
            PHON.ONSET con ] ].

pipit_n1 := n_intr_le &
 [ STEM < "pipit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pipit_n_1_rel",
            PHON.ONSET con ] ].

pipit_n2 := n_mass_kind_le &
 [ STEM < "pipit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pipit_n_kind_rel",
            PHON.ONSET con ] ].

piquancy_n1 := n_mass_count_le &
 [ STEM < "piquancy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_piquancy_n_1_rel",
            PHON.ONSET con ] ].

pisces_n1 := n_proper_le &
 [ STEM < "pisces" >,
   SYNSEM [ LKEYS.KEYREL.CARG "pisces",
            PHON.ONSET con ] ].

piss_n1 := n_intr_le &
 [ STEM < "piss" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_piss_n_1_rel",
            PHON.ONSET con ] ].

piss_off_v1 := v_particle_np_le &
 [ STEM < "piss" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_piss_v_off_rel" ],
            PHON.ONSET con ] ].

piss_on_v1 := v_empty_prep_intrans_le &
 [ STEM < "piss" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_piss_v_on_rel" ],
            PHON.ONSET con ] ].

piss_v1 := v_unerg_le &
 [ STEM < "piss" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_piss_v_1_rel",
            PHON.ONSET con ] ].

pissed_off_a1 := adj_intrans_le &
 [ STEM < "pissed", "off" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pissed+off_a_1_rel",
            PHON.ONSET con ] ].

piste_n1 := n_intr_le &
 [ STEM < "piste" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_piste_n_1_rel",
            PHON.ONSET con ] ].

pistil_n1 := n_intr_le &
 [ STEM < "pistil" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pistil_n_1_rel",
            PHON.ONSET con ] ].

pit_n1 := n_intr_le &
 [ STEM < "pit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pit_n_1_rel",
            PHON.ONSET con ] ].

pitch_n1 := n_mass_count_le &
 [ STEM < "pitch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pitch_n_1_rel",
            PHON.ONSET con ] ].

pitch_v1 := v_np*_trans_le &
 [ STEM < "pitch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pitch_v_1_rel",
            PHON.ONSET con ] ].

pitch_v2 := v_np_prep_trans_dors_le &
 [ STEM < "pitch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pitch_v_1_rel",
            PHON.ONSET con ] ].

pitcher_n1 := n_ppof_le &
 [ STEM < "pitcher" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pitcher_n_of_rel",
            PHON.ONSET con ] ].

pitchfork_n1 := n_intr_le &
 [ STEM < "pitchfork" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pitchfork_n_1_rel",
            PHON.ONSET con ] ].

pitchfork_v1 := v_np_trans_le &
 [ STEM < "pitchfork" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pitchfork_v_1_rel",
            PHON.ONSET con ] ].

pitfall_n1 := n_intr_le &
 [ STEM < "pitfall" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pitfall_n_1_rel",
            PHON.ONSET con ] ].

pith_n1 := n_mass_le &
 [ STEM < "pith" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pith_n_1_rel",
            PHON.ONSET con ] ].

pittsburgh_n1 := n_proper_city_le &
 [ STEM < "pittsburgh" >,
   SYNSEM [ LKEYS.KEYREL.CARG "pittsburgh",
            PHON.ONSET con ] ].

pity_n1 := n_mass_count_le &
 [ STEM < "pity" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pity_n_1_rel",
            PHON.ONSET con ] ].

pity_v1 := v_np_trans_le &
 [ STEM < "pity" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pity_v_1_rel",
            PHON.ONSET con ] ].

pivot_around_v1 := v_empty_prep_intrans_le &
 [ STEM < "pivot" >,
   SYNSEM [ LKEYS [ --COMPKEY _around_p_sel_rel,
                    KEYREL.PRED "_pivot_v_around_rel" ],
            PHON.ONSET con ] ].

pivot_n1 := n_intr_le &
 [ STEM < "pivot" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pivot_n_1_rel",
            PHON.ONSET con ] ].

pivot_v1 := v_unacc_dir_le &
 [ STEM < "pivot" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pivot_v_1_rel",
            PHON.ONSET con ] ].

pivot_v2 := v_np_trans_le &
 [ STEM < "pivot" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pivot_v_cause_rel",
            PHON.ONSET con ] ].

pizza_n1 := n_intr_le &
 [ STEM < "pizza" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pizza_n_1_rel",
            PHON.ONSET con ] ].

place_n1 := n_ppof_place_le &
 [ STEM < "place" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_place_n_of_rel",
            PHON.ONSET con ] ].

place_n1_i := n_intr_nospr_le &
 [ STEM < "place" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_place_n_of_rel",
            PHON.ONSET con ] ].

place_v1 := v_np_prep_trans_dors_le &
 [ STEM < "place" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_place_v_1_rel",
            PHON.ONSET con ] ].

place_v2 := v_np_trans_le &
 [ STEM < "place" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_place_v_1_rel",
            PHON.ONSET con ] ].

place_with_v1 := v_empty_prep_trans_le &
 [ STEM < "place" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_place_v_with_rel" ],
            PHON.ONSET con ] ].

placement_n1 := n_mass_count_ppof_le &
 [ STEM < "placement" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_placement_n_of_rel",
            PHON.ONSET con ] ].

plague_n1 := n_mass_count_le &
 [ STEM < "plague" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_plague_n_1_rel",
            PHON.ONSET con ] ].

plague_v1 := v_np_trans_le &
 [ STEM < "plague" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_plague_v_1_rel",
            PHON.ONSET con ] ].

plain_a1 := adj_intrans_le &
 [ STEM < "plain" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_plain_a_1_rel",
            PHON.ONSET con ] ].

plain_n1 := n_intr_le &
 [ STEM < "plain" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_plain_n_1_rel",
            PHON.ONSET con ] ].

plainly_adv1 := adv_int_vp_le &
 [ STEM < "plainly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_plain_a_1_rel",
            PHON.ONSET con ] ].

plainness_n1 := n_mass_le &
 [ STEM < "plainness" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_plainness_n_1_rel",
            PHON.ONSET con ] ].

plaintiff_n1 := n_intr_le &
 [ STEM < "plaintiff" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_plaintiff_n_1_rel",
            PHON.ONSET con ] ].

plan_for_v1 := v_empty_prep_intrans_le &
 [ STEM < "plan" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_plan_v_for_rel" ],
            PHON.ONSET con ] ].

plan_n1 := n_intr_le &
 [ STEM < "plan" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_plan_n_1_rel",
            PHON.ONSET con ] ].

plan_on_v2 := v_empty_prep_intrans_le &
 [ STEM < "plan" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_plan_v_on_rel" ],
            PHON.ONSET con ] ].

plan_ttl := n_title_le &
 [ STEM < "plan" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_plan_n_1_rel",
            PHON.ONSET con ] ].

plan_v1 := v_np*_trans_le &
 [ STEM < "plan" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_plan_v_1_rel",
            PHON.ONSET con ] ].

plan_v2 := v_subj_equi_le &
 [ STEM < "plan" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_plan_v_1_rel",
            PHON.ONSET con ] ].

plane_n1 := n_intr_le &
 [ STEM < "plane" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_plane_n_1_rel",
            PHON.ONSET con ] ].

planer_n1 := n_intr_le &
 [ STEM < "planer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_planer_n_1_rel",
            PHON.ONSET con ] ].

planet_n1 := n_intr_le &
 [ STEM < "planet" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_planet_n_1_rel",
            PHON.ONSET con ] ].

plank_n1 := n_intr_le &
 [ STEM < "plank" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_plank_n_1_rel",
            PHON.ONSET con ] ].

planner_n1 := n_intr_le &
 [ STEM < "planner" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_planner_n_1_rel",
            PHON.ONSET con ] ].

planning_n1 := n_intr_le &
 [ STEM < "planning" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_planning_n_1_rel",
            PHON.ONSET con ] ].

plant_n1 := n_intr_le &
 [ STEM < "plant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_plant_n_1_rel",
            PHON.ONSET con ] ].

plant_out_v1 := v_particle_np_le &
 [ STEM < "plant" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_plant_v_out_rel" ],
            PHON.ONSET con ] ].

plant_v1 := v_np*_trans_le &
 [ STEM < "plant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_plant_v_1_rel",
            PHON.ONSET con ] ].

plantation_n1 := n_intr_le &
 [ STEM < "plantation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_plantation_n_1_rel",
            PHON.ONSET con ] ].

plasma_n1 := n_mass_le &
 [ STEM < "plasma" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_plasma_n_1_rel",
            PHON.ONSET con ] ].

plaster_n1 := n_mass_le &
 [ STEM < "plaster" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_plaster_n_1_rel",
            PHON.ONSET con ] ].

plaster_v1 := v_np_trans_le &
 [ STEM < "plaster" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_plaster_v_1_rel",
            PHON.ONSET con ] ].

plastic_n1 := n_mass_le &
 [ STEM < "plastic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_plastic_n_1_rel",
            PHON.ONSET con ] ].

plat_n1 := n_intr_le &
 [ STEM < "plat" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_plat_n_1_rel",
            PHON.ONSET con ] ].

plate_n1 := n_ppof_le &
 [ STEM < "plate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_plate_n_of_rel",
            PHON.ONSET con ] ].

plate_v1 := v_np_trans_le &
 [ STEM < "plate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_plate_v_1_rel",
            PHON.ONSET con ] ].

plateau_n1 := n_intr_le &
 [ STEM < "plateau" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_plateau_n_1_rel",
            PHON.ONSET con ] ].

platform_n1 := n_intr_le &
 [ STEM < "platform" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_platform_n_1_rel",
            PHON.ONSET con ] ].

platinum_a1 := adj_intrans_le &
 [ STEM < "platinum" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_platinum_a_1_rel",
            PHON.ONSET con ] ].

platinum_n1 := n_mass_le &
 [ STEM < "platinum" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_platinum_n_1_rel",
            PHON.ONSET con ] ].

plauen_n1 := n_proper_le &
 [ STEM < "plauen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "plauen",
            PHON.ONSET con ] ].

plausible_a1 := adj_intrans_le &
 [ STEM < "plausible" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_plausible_a_1_rel",
            PHON.ONSET con ] ].

play_n1 := n_mass_count_le &
 [ STEM < "play" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_play_n_1_rel",
            PHON.ONSET con ] ].

play_v1 := v_np*_trans_le &
 [ STEM < "play" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_play_v_1_rel",
            PHON.ONSET con ] ].

player_n1 := n_ppof_le &
 [ STEM < "player" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_player_n_of_rel",
            PHON.ONSET con ] ].

playstation_2_n1 := n_intr_le &
 [ STEM < "playstation", "2" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_playstation+2_n_1_rel",
            PHON.ONSET con ] ].

playstation_n1 := n_intr_le &
 [ STEM < "playstation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_playstation_n_1_rel",
            PHON.ONSET con ] ].

playwright_n1 := n_intr_le &
 [ STEM < "playwright" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_playwright_n_1_rel",
            PHON.ONSET con ] ].

playwright_ttl := n_title_le &
 [ STEM < "playwright" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_playwright_n_1_rel",
            PHON.ONSET con ] ].

plaza_n1 := n_intr_le &
 [ STEM < "plaza" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_plaza_n_1_rel",
            PHON.ONSET con ] ].

plaza_post_ttl := n_post_title_le &
 [ STEM < "plaza" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_plaza_n_1_rel",
            PHON.ONSET con ] ].

plea_n1 := n_intr_le &
 [ STEM < "plea" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_plea_n_1_rel",
            PHON.ONSET con ] ].

plead_for_v1 := v_empty_prep_intrans_le &
 [ STEM < "plead" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_plead_v_for_rel" ],
            PHON.ONSET con ] ].

plead_v1 := v_np_non_trans_le &
 [ STEM < "plead" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_plead_v_1_rel",
            PHON.ONSET con ] ].

plead_v2 := v_subj_equi_prd_adj_le &
 [ STEM < "plead" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_plead_v_1_rel",
            PHON.ONSET con ] ].

plead_v3 := v_oeq_pp_inf_le &
 [ STEM < "plead" >,
   SYNSEM [ LKEYS [ --COMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_plead_v_with_rel" ],
            PHON.ONSET con ] ].

plead_with_for_v1 := v_double_pp_empty_pp_le &
 [ STEM < "plead" >,
   SYNSEM [ LKEYS [ --COMPKEY _with_p_rel,
                    --OCOMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_plead_v_with-for_rel" ],
            PHON.ONSET con ] ].

pleasant_a1 := adj_intrans_le &
 [ STEM < "pleasant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pleasant_a_1_rel",
            PHON.ONSET con ] ].

pleasantly := adv_int_vp_le &
 [ STEM < "pleasantly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pleasant_a_1_rel",
            PHON.ONSET con ] ].

please_abb_adv := adv_s_post_word_nospec_le &
 [ STEM < "pls" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_please_a_1_rel",
            PHON.ONSET con ] ].

please_abb_adv3 := adv_int_vp_aux_le &
 [ STEM < "pls" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_please_a_1_rel",
            PHON.ONSET con ] ].

please_abb_adv4 := adv_int_vp_post_le &
 [ STEM < "pls" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_please_a_1_rel",
            PHON.ONSET con ] ].

please_abb_root := adv_disc_please_le &
 [ STEM < "pls" >,
   SYNSEM [ LKEYS.KEYREL.CARG "please",
            PHON.ONSET con ] ].

please_adv := adv_s_post_word_nospec_le &
 [ STEM < "please" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_please_a_1_rel",
            PHON.ONSET con ] ].

please_root := adv_disc_please_le &
 [ STEM < "please" >,
   SYNSEM [ LKEYS.KEYREL.CARG "please",
            PHON.ONSET con ] ].

please_v1 := v_np_trans_le &
 [ STEM < "please" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_please_v_1_rel",
            PHON.ONSET con ] ].

pleased_a1 := adj_intrans_le &
 [ STEM < "pleased" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pleased_a_1_rel",
            PHON.ONSET con ] ].

pleasing_a1 := adj_trans_le &
 [ STEM < "pleasing" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_pleasing_a_to_rel" ],
            PHON.ONSET con ] ].

pleasurable_a1 := adj_intrans_le &
 [ STEM < "pleasurable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pleasurable_a_1_rel",
            PHON.ONSET con ] ].

pleasure_n1 := n_mass_count_ppof_le &
 [ STEM < "pleasure" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pleasure_n_of_rel",
            PHON.ONSET con ] ].

pleasure_n2 := n_vpcomp_expl_le &
 [ STEM < "pleasure" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pleasure_n_of_rel",
            PHON.ONSET con ] ].

pleasure_n3 := n_vpcomp_slash_le &
 [ STEM < "pleasure" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pleasure_n_of_rel",
            PHON.ONSET con ] ].

plebeian_a1 := adj_intrans_le &
 [ STEM < "plebeian" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_plebeian_a_1_rel",
            PHON.ONSET con ] ].

pledge_n1 := n_intr_le &
 [ STEM < "pledge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pledge_n_1_rel",
            PHON.ONSET con ] ].

pledge_v1 := v_np*_trans_le &
 [ STEM < "pledge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pledge_v_1_rel",
            PHON.ONSET con ] ].

pledge_v2 := v_subj_equi_le &
 [ STEM < "pledge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pledge_v_1_rel",
            PHON.ONSET con ] ].

plenteous_a1 := adj_intrans_le &
 [ STEM < "plenteous" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_plenteous_a_1_rel",
            PHON.ONSET con ] ].

plentiful_a1 := adj_intrans_le &
 [ STEM < "plentiful" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_plentiful_a_1_rel",
            PHON.ONSET con ] ].

plenty_n := n_group_mass_ppof_le &
 [ STEM < "plenty" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_plenty_n_of_rel",
            PHON.ONSET con ] ].

plethora_n1 := n_intr_sg_le &
 [ STEM < "plethora" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_plethora_n_1_rel",
            PHON.ONSET con ] ].

pliable_a1 := adj_intrans_le &
 [ STEM < "pliable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pliable_a_1_rel",
            PHON.ONSET con ] ].

plot_n1 := n_ppof_le &
 [ STEM < "plot" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_plot_n_of_rel",
            PHON.ONSET con ] ].

plot_v1 := v_np*_trans_le &
 [ STEM < "plot" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_plot_v_1_rel",
            PHON.ONSET con ] ].

plot_v2 := v_subj_equi_le &
 [ STEM < "plot" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_plot_v_1_rel",
            PHON.ONSET con ] ].

plough_n1 := n_intr_le &
 [ STEM < "plough" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_plough_n_1_rel",
            PHON.ONSET con ] ].

plow_n1 := n_intr_le &
 [ STEM < "plow" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_plow_n_1_rel",
            PHON.ONSET con ] ].

plow_v1 := v_np*_trans_le &
 [ STEM < "plow" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_plow_v_1_rel",
            PHON.ONSET con ] ].

plp_n1 := n_proper_le &
 [ STEM < "plp" >,
   SYNSEM [ LKEYS.KEYREL.CARG "plp",
            PHON.ONSET con ] ].

plp_n2 := n_proper_le &
 [ STEM < "p.l.p." >,
   SYNSEM [ LKEYS.KEYREL.CARG "plp",
            PHON.ONSET con ] ].

pluck_n1 := n_mass_le &
 [ STEM < "pluck" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pluck_n_1_rel",
            PHON.ONSET con ] ].

pluck_out_v1 := v_particle_np_le &
 [ STEM < "pluck" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_pluck_v_out_rel" ],
            PHON.ONSET con ] ].

pluck_up_v1 := v_particle_np_le &
 [ STEM < "pluck" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_pluck_v_up_rel" ],
            PHON.ONSET con ] ].

pluck_up_v2 := v_particle_le &
 [ STEM < "pluck" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_pluck_v_up_rel" ],
            PHON.ONSET con ] ].

pluck_v1 := v_np_trans_le &
 [ STEM < "pluck" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pluck_v_1_rel",
            PHON.ONSET con ] ].

plucky_a1 := adj_intrans_le &
 [ STEM < "plucky" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_plucky_a_1_rel",
            PHON.ONSET con ] ].

plug_n1 := n_ppof_le &
 [ STEM < "plug" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_plug_n_of_rel",
            PHON.ONSET con ] ].

plug_v1 := v_np_trans_le &
 [ STEM < "plug" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_plug_v_1_rel",
            PHON.ONSET con ] ].

plug_v2 := v_np_prep_trans_dors_le &
 [ STEM < "plug" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_plug_v_1_rel",
            PHON.ONSET con ] ].

plummet_v1 := v_unerg_le &
 [ STEM < "plummet" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_plummet_v_1_rel",
            PHON.ONSET con ] ].

plunder_n1 := n_mass_le &
 [ STEM < "plunder" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_plunder_n_1_rel",
            PHON.ONSET con ] ].

plunder_v1 := v_np*_trans_le &
 [ STEM < "plunder" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_plunder_v_1_rel",
            PHON.ONSET con ] ].

plunge_n1 := n_ppof_le &
 [ STEM < "plunge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_plunge_n_of_rel",
            PHON.ONSET con ] ].

plunge_v1 := v_prep_dir_le &
 [ STEM < "plunge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_plunge_v_into_rel",
            PHON.ONSET con ] ].

plunge_v2 := v_np_prep_trans_dors_le &
 [ STEM < "plunge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_plunge_v_1_rel",
            PHON.ONSET con ] ].

plural_a1 := adj_intrans_le &
 [ STEM < "plural" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_plural_a_1_rel",
            PHON.ONSET con ] ].

plural_abb_n1 := n_intr_le &
 [ STEM < "pl." >,
   SYNSEM [ LKEYS.KEYREL.PRED "_plural_n_1_rel",
            PHON.ONSET con ] ].

plural_abb_n2 := n_intr_le &
 [ STEM < "pl" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_plural_n_1_rel",
            PHON.ONSET con ] ].

plural_n1 := n_intr_le &
 [ STEM < "plural" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_plural_n_1_rel",
            PHON.ONSET con ] ].

plus_conj := conj_complex_plus_le &
 [ STEM < "plus" >,
   SYNSEM.PHON.ONSET con ].

plus_minus_conj := conj_complex_plus_minus_le &
 [ STEM < "+/-" >,
   SYNSEM.PHON.ONSET con ].

plus_minus_conj_2 := conj_complex_plus_minus_le &
 [ STEM < "+-" >,
   SYNSEM.PHON.ONSET con ].

plus_n1 := n_meas_nocmpnd_le &
 [ STEM < "plus" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_plus_n_1_rel",
            PHON.ONSET con ] ].

pluto_n1 := n_proper_le &
 [ STEM < "pluto" >,
   SYNSEM [ LKEYS.KEYREL.CARG "pluto",
            PHON.ONSET con ] ].

ply_v1 := v_np_trans_le &
 [ STEM < "ply" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ply_v_1_rel",
            PHON.ONSET con ] ].

plymouth_n1 := n_proper_city_le &
 [ STEM < "plymouth" >,
   SYNSEM [ LKEYS.KEYREL.CARG "plymouth",
            PHON.ONSET con ] ].

pm_temp := xp_am_pm_le &
 [ STEM < "p.m." >,
   SYNSEM [ LKEYS.KEYREL [ CARG "pm_time",
                             PRED "_pm_x_rel" ],
            PHON.ONSET con ] ].

pm_temp_2 := xp_am_pm_le &
 [ STEM < "pm" >,
   SYNSEM [ LKEYS.KEYREL [ CARG "pm_time",
                             PRED "_pm_x_rel" ],
            PHON.ONSET con ] ].

pm_temp_3 := xp_am_pm_le &
 [ STEM < "p", "m" >,
   SYNSEM [ LKEYS.KEYREL [ CARG "pm_time",
                             PRED "_pm_x_rel" ],
            PHON.ONSET con ] ].

pm_temp_4 := xp_am_pm_le &
 [ STEM < "p.m" >,
   SYNSEM [ LKEYS.KEYREL [ CARG "pm_time",
                             PRED "_pm_x_rel" ],
            PHON.ONSET con ] ].

pocket_n1 := n_intr_le &
 [ STEM < "pocket" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pocket_n_1_rel",
            PHON.ONSET con ] ].

pocket_v1 := v_np_trans_le &
 [ STEM < "pocket" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pocket_v_1_rel",
            PHON.ONSET con ] ].

poconos_n1 := n_plur_le &
 [ STEM < "pocono" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_poconos_n_1_rel",
            PHON.ONSET con ] ].

poe_n1 := n_proper_le &
 [ STEM < "poe" >,
   SYNSEM [ LKEYS.KEYREL.CARG "poe",
            PHON.ONSET con ] ].

poem_n1 := n_intr_le &
 [ STEM < "poem" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_poem_n_1_rel",
            PHON.ONSET con ] ].

poet_n1 := n_intr_le &
 [ STEM < "poet" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_poet_n_1_rel",
            PHON.ONSET con ] ].

poet_ttl := n_title_le &
 [ STEM < "poet" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_poet_n_1_rel",
            PHON.ONSET con ] ].

poetic_a1 := adj_intrans_le &
 [ STEM < "poetic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_poetic_a_1_rel",
            PHON.ONSET con ] ].

poetical_a1 := adj_intrans_le &
 [ STEM < "poetical" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_poetical_a_1_rel",
            PHON.ONSET con ] ].

poetry_n1 := n_mass_le &
 [ STEM < "poetry" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_poetry_n_1_rel",
            PHON.ONSET con ] ].

point_at_v1 := v_empty_prep_intrans_le &
 [ STEM < "point" >,
   SYNSEM [ LKEYS [ --COMPKEY _at_p_sel_rel,
                    KEYREL.PRED "_point_v_at_rel" ],
            PHON.ONSET con ] ].

point_de_venise_n1 := n_proper_le &
 [ STEM < "point", "de", "Venise" >,
   SYNSEM [ LKEYS.KEYREL.CARG "point_de_Venise",
            PHON.ONSET con ] ].

point_n1 := n_intr_le &
 [ STEM < "point" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_point_n_1_rel",
            PHON.ONSET con ] ].

point_out_v1 := v_particle_np_pp_to_le &
 [ STEM < "point" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_point_v_out_rel" ],
            PHON.ONSET con ] ].

point_out_v2 := v_particle_np_le &
 [ STEM < "point" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_point_v_out_rel" ],
            PHON.ONSET con ] ].

point_out_v3 := v_particle_cp_le &
 [ STEM < "point" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_point_v_out_rel" ],
            PHON.ONSET con ] ].

point_to_v1 := v_empty_prep_intrans_le &
 [ STEM < "point" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_point_v_to_rel" ],
            PHON.ONSET con ] ].

point_v1 := v_np*_trans_le &
 [ STEM < "point" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_point_v_1_rel",
            PHON.ONSET con ] ].

pointer_n1 := n_intr_le &
 [ STEM < "pointer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pointer_n_1_rel",
            PHON.ONSET con ] ].

pointless_a1 := adj_trans_le &
 [ STEM < "pointless" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_pointless_a_for_rel" ],
            PHON.ONSET con ] ].

pointless_a2 := adj_reg_atrans_le &
 [ STEM < "pointless" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pointless_a_for_rel",
            PHON.ONSET con ] ].

poise_n1 := n_mass_le &
 [ STEM < "poise" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_poise_n_1_rel",
            PHON.ONSET con ] ].

poise_v1 := v_np*_trans_le &
 [ STEM < "poise" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_poise_v_1_rel",
            PHON.ONSET con ] ].

poison_n1 := n_mass_count_le &
 [ STEM < "poison" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_poison_n_1_rel",
            PHON.ONSET con ] ].

poison_v1 := v_np*_trans_le &
 [ STEM < "poison" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_poison_v_1_rel",
            PHON.ONSET con ] ].

poke_n1 := n_intr_le &
 [ STEM < "poke" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_poke_n_1_rel",
            PHON.ONSET con ] ].

poke_out_v1 := v_particle_le &
 [ STEM < "poke" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_poke_v_out_rel" ],
            PHON.ONSET con ] ].

poke_up_v1 := v_particle_le &
 [ STEM < "poke" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_poke_v_up_rel" ],
            PHON.ONSET con ] ].

poke_v1 := v_np*_trans_le &
 [ STEM < "poke" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_poke_v_1_rel",
            PHON.ONSET con ] ].

poke_v2 := v_np_prep_trans_dors_le &
 [ STEM < "poke" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_poke_v_1_rel",
            PHON.ONSET con ] ].

poker_n1 := n_mass_count_le &
 [ STEM < "poker" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_poker_n_1_rel",
            PHON.ONSET con ] ].

polar_a1 := adj_attr_intrans_le &
 [ STEM < "polar" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_polar_a_1_rel",
            PHON.ONSET con ] ].

polarity_n1 := n_mass_count_le &
 [ STEM < "polarity" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_polarity_n_1_rel",
            PHON.ONSET con ] ].

polarize_v1 := v_unacc_le &
 [ STEM < "polarize" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_polarize_v_1_rel",
            PHON.ONSET con ] ].

polarize_v2 := v_np_trans_noger_le &
 [ STEM < "polarize" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_polarize_v_cause_rel",
            PHON.ONSET con ] ].

polaroid_n1 := n_proper_le &
 [ STEM < "polaroid" >,
   SYNSEM [ LKEYS.KEYREL.CARG "polaroid",
            PHON.ONSET con ] ].

pole_n1 := n_intr_le &
 [ STEM < "pole" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pole_n_1_rel",
            PHON.ONSET con ] ].

police_n1 := n_plur_le &
 [ STEM < "police" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_police_n_1_rel",
            PHON.ONSET con ] ].

police_v1 := v_np_trans_le &
 [ STEM < "police" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_police_v_1_rel",
            PHON.ONSET con ] ].

policy_n1 := n_mass_count_ppof_le &
 [ STEM < "policy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_policy_n_of-on_rel",
            PHON.ONSET con ] ].

policy_n2 := n_ppcomp_oblig_le &
 [ STEM < "policy" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_policy_n_of-on_rel" ],
            PHON.ONSET con ] ].

polish_a1 := adj_intrans_le &
 [ STEM < "polish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_polish_a_1_rel",
            PHON.ONSET con ] ].

polish_n1 := n_proper_le &
 [ STEM < "polish" >,
   SYNSEM [ LKEYS.KEYREL.CARG "polish",
            PHON.ONSET con ] ].

polish_n2 := n_mass_count_le &
 [ STEM < "polish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_polish_n_1_rel",
            PHON.ONSET con ] ].

polish_off_v1 := v_particle_np_le &
 [ STEM < "polish" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_polish_v_off_rel" ],
            PHON.ONSET con ] ].

polish_up_v1 := v_particle_np_le &
 [ STEM < "polish" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_polish_v_up_rel" ],
            PHON.ONSET con ] ].

polish_up_v2 := v_particle_le &
 [ STEM < "polish" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_polish_v_up_rel" ],
            PHON.ONSET con ] ].

polish_v1 := v_np_trans_le &
 [ STEM < "polish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_polish_v_1_rel",
            PHON.ONSET con ] ].

polite_isect := adj_intrans_le &
 [ STEM < "polite" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_polite_a_1_rel",
            PHON.ONSET con ] ].

politely := adv_int_vp_le &
 [ STEM < "politely" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_polite_a_1_rel",
            PHON.ONSET con ] ].

politic_a1 := adj_intrans_le &
 [ STEM < "politic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_politic_a_1_rel",
            PHON.ONSET con ] ].

political_a1 := adj_intrans_le &
 [ STEM < "political" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_political_a_1_rel",
            PHON.ONSET con ] ].

politics_n1 := n_plur_nocmpnd_le &
 [ STEM < "politic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_politics_n_1_rel",
            PHON.ONSET con ] ].

poll_n1 := n_intr_le &
 [ STEM < "poll" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_poll_n_1_rel",
            PHON.ONSET con ] ].

poll_v1 := v_np*_trans_le &
 [ STEM < "poll" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_poll_v_1_rel",
            PHON.ONSET con ] ].

pollen_n1 := n_mass_count_le &
 [ STEM < "pollen" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pollen_n_1_rel",
            PHON.ONSET con ] ].

pollock_n1 := n_proper_le &
 [ STEM < "pollock" >,
   SYNSEM [ LKEYS.KEYREL.CARG "pollock",
            PHON.ONSET con ] ].

pollute_v1 := v_np*_trans_le &
 [ STEM < "pollute" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pollute_v_1_rel",
            PHON.ONSET con ] ].

pollution_n1 := n_mass_ppcomp_le &
 [ STEM < "pollution" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_pollution_n_of_rel" ],
            PHON.ONSET con ] ].

polymerize_v1 := v_np*_trans_le &
 [ STEM < "polymerize" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_polymerize_v_1_rel",
            PHON.ONSET con ] ].

polyp_n1 := n_intr_le &
 [ STEM < "polyp" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_polyp_n_1_rel",
            PHON.ONSET con ] ].

pomegranate_n1 := n_intr_le &
 [ STEM < "pomegranate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pomegranate_n_1_rel",
            PHON.ONSET con ] ].

pomp_n1 := n_mass_le &
 [ STEM < "pomp" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pomp_n_1_rel",
            PHON.ONSET con ] ].

pond_n1 := n_intr_le &
 [ STEM < "pond" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pond_n_1_rel",
            PHON.ONSET con ] ].

pond_post_ttl := n_post_title_le &
 [ STEM < "pond" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pond_n_1_rel",
            PHON.ONSET con ] ].

ponderable_a1 := adj_intrans_le &
 [ STEM < "ponderable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ponderable_a_1_rel",
            PHON.ONSET con ] ].

pontiff_n1 := n_intr_le &
 [ STEM < "pontiff" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pontiff_n_1_rel",
            PHON.ONSET con ] ].

pony_n1 := n_intr_le &
 [ STEM < "pony" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pony_n_1_rel",
            PHON.ONSET con ] ].

pooch_n1 := n_intr_le &
 [ STEM < "pooch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pooch_n_1_rel",
            PHON.ONSET con ] ].

pooh_n1 := n_proper_le &
 [ STEM < "pooh" >,
   SYNSEM [ LKEYS.KEYREL.CARG "pooh",
            PHON.ONSET con ] ].

pool_n1 := n_ppof_le &
 [ STEM < "pool" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pool_n_of_rel",
            PHON.ONSET con ] ].

poor_a1 := adj_intrans_le &
 [ STEM < "poor" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_poor_a_1_rel",
            PHON.ONSET con ] ].

poorly_isect := adv_int_vp_le &
 [ STEM < "poorly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_poor_a_1_rel",
            PHON.ONSET con ] ].

pop_down_v2 := v_particle_le &
 [ STEM < "pop" >,
   SYNSEM [ LKEYS [ --COMPKEY _down_p_sel_rel,
                    KEYREL.PRED "_pop_v_down_rel" ],
            PHON.ONSET con ] ].

pop_n1 := n_mass_count_le &
 [ STEM < "pop" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pop_n_1_rel",
            PHON.ONSET con ] ].

pop_n2 := n_proper_le &
 [ STEM < "pop" >,
   SYNSEM [ LKEYS.KEYREL.CARG "pop",
            PHON.ONSET con ] ].

pop_off_v1 := v_particle_le &
 [ STEM < "pop" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_pop_v_off_rel" ],
            PHON.ONSET con ] ].

pop_off_v2 := v_particle_np_le &
 [ STEM < "pop" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_pop_v_off_rel" ],
            PHON.ONSET con ] ].

pop_out_v1 := v_particle_le &
 [ STEM < "pop" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_pop_v_out_rel" ],
            PHON.ONSET con ] ].

pop_out_v2 := v_particle_np_le &
 [ STEM < "pop" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_pop_v_out_rel" ],
            PHON.ONSET con ] ].

pop_up_v1 := v_particle_le &
 [ STEM < "pop" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_pop_v_up_rel" ],
            PHON.ONSET con ] ].

pop_up_v2 := v_particle_np_le &
 [ STEM < "pop" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_pop_v_up_rel" ],
            PHON.ONSET con ] ].

pop_v1 := v_np_trans_le &
 [ STEM < "pop" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pop_v_1_rel",
            PHON.ONSET con ] ].

pop_v2 := v_ditrans_only_le &
 [ STEM < "pop" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pop_v_1_rel",
            PHON.ONSET con ] ].

pope_n1 := n_intr_le &
 [ STEM < "pope" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pope_n_1_rel",
            PHON.ONSET con ] ].

pope_ttl := n_title_le &
 [ STEM < "pope" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pope_n_1_rel",
            PHON.ONSET con ] ].

poplar_n1 := n_intr_le &
 [ STEM < "poplar" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_poplar_n_1_rel",
            PHON.ONSET con ] ].

populace_n1 := n_intr_sg_le &
 [ STEM < "populace" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_populace_n_1_rel",
            PHON.ONSET con ] ].

popular_a1 := adj_intrans_le &
 [ STEM < "popular" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_popular_a_1_rel",
            PHON.ONSET con ] ].

popularity_n1 := n_mass_le &
 [ STEM < "popularity" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_popularity_n_1_rel",
            PHON.ONSET con ] ].

populate_v1 := v_np_trans_le &
 [ STEM < "populate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_populate_v_1_rel",
            PHON.ONSET con ] ].

population_n1 := n_mass_count_le &
 [ STEM < "population" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_population_n_1_rel",
            PHON.ONSET con ] ].

porch_n1 := n_intr_le &
 [ STEM < "porch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_porch_n_1_rel",
            PHON.ONSET con ] ].

porch_post_ttl := n_post_title_le &
 [ STEM < "porch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_porch_n_1_rel",
            PHON.ONSET con ] ].

pork_n1 := n_mass_le &
 [ STEM < "pork" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pork_n_1_rel",
            PHON.ONSET con ] ].

porphyria_n1 := n_proper_le &
 [ STEM < "porphyria" >,
   SYNSEM [ LKEYS.KEYREL.CARG "porphyria",
            PHON.ONSET con ] ].

porridge_n1 := n_mass_le &
 [ STEM < "porridge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_porridge_n_1_rel",
            PHON.ONSET con ] ].

port_n1 := n_intr_le &
 [ STEM < "port" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_port_n_1_rel",
            PHON.ONSET con ] ].

port_v2 := v_np*_trans_double_pp_to*_le &
 [ STEM < "port" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _from_p_sel_rel,
                    KEYREL.PRED "_port_v_from-to_rel" ],
            PHON.ONSET con ] ].

portable_a1 := adj_intrans_le &
 [ STEM < "portable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_portable_a_1_rel",
            PHON.ONSET con ] ].

portable_n1 := n_intr_le &
 [ STEM < "portable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_portable_n_1_rel",
            PHON.ONSET con ] ].

portage_n1 := n_mass_count_le &
 [ STEM < "portage" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_portage_n_1_rel",
            PHON.ONSET con ] ].

portage_v1 := v_np*_trans_le &
 [ STEM < "portage" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_portage_v_1_rel",
            PHON.ONSET con ] ].

portal_n1 := n_intr_le &
 [ STEM < "portal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_portal_n_1_rel",
            PHON.ONSET con ] ].

portege_n1 := n_proper_le &
 [ STEM < "portege" >,
   SYNSEM [ LKEYS.KEYREL.CARG "portege",
            PHON.ONSET con ] ].

porten_n1 := n_proper_le &
 [ STEM < "porten" >,
   SYNSEM [ LKEYS.KEYREL.CARG "porten",
            PHON.ONSET con ] ].

porter_n := n_intr_le &
 [ STEM < "porter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_porter_n_1_rel",
            PHON.ONSET con ] ].

portion_n1 := n_ppof_le &
 [ STEM < "portion" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_portion_n_of_rel",
            PHON.ONSET con ] ].

portrait_n1 := n_intr_le &
 [ STEM < "portrait" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_portrait_n_1_rel",
            PHON.ONSET con ] ].

portray_v1 := v_np_trans_le &
 [ STEM < "portray" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_portray_v_1_rel",
            PHON.ONSET con ] ].

portray_v2 := v_np_as_le &
 [ STEM < "portray" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_portray_v_as_rel",
            PHON.ONSET con ] ].

portrayal_n1 := n_mass_count_le &
 [ STEM < "portrayal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_portrayal_n_1_rel",
            PHON.ONSET con ] ].

portugal_n1 := n_proper_le &
 [ STEM < "portugal" >,
   SYNSEM [ LKEYS.KEYREL.CARG "portugal",
            PHON.ONSET con ] ].

portuguese_a1 := adj_intrans_le &
 [ STEM < "portuguese" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_portuguese_a_1_rel",
            PHON.ONSET con ] ].

portuguese_n1 := n_proper_le &
 [ STEM < "portuguese" >,
   SYNSEM [ LKEYS.KEYREL.CARG "portuguese",
            PHON.ONSET con ] ].

portuguese_n2 := n_plur_nocmpnd_le &
 [ STEM < "portuguese" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_portuguese_n_1_rel",
            PHON.ONSET con ] ].

pose_as_v1 := v_empty_prep_intrans_le &
 [ STEM < "pose" >,
   SYNSEM [ LKEYS [ --COMPKEY _as_p_sel_rel,
                    KEYREL.PRED "_pose_v_as_rel" ],
            PHON.ONSET con ] ].

pose_n1 := n_intr_le &
 [ STEM < "pose" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pose_n_1_rel",
            PHON.ONSET con ] ].

pose_to_v1 := v_empty_prep_intrans_le &
 [ STEM < "pose" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_pose_v_to_rel" ],
            PHON.ONSET con ] ].

pose_v1 := v_np*_trans_le &
 [ STEM < "pose" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pose_v_1_rel",
            PHON.ONSET con ] ].

pose_v2 := v_np_as_le &
 [ STEM < "pose" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pose_v_as_rel",
            PHON.ONSET con ] ].

posh_isect := adj_intrans_le &
 [ STEM < "posh" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_posh_a_1_rel",
            PHON.ONSET con ] ].

posit_v1 := v_cp_prop_non_trans_le &
 [ STEM < "posit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_posit_v_1_rel",
            PHON.ONSET con ] ].

posit_v2 := v_np_trans_le &
 [ STEM < "posit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_posit_v_1_rel",
            PHON.ONSET con ] ].

position_n1 := n_mass_count_le &
 [ STEM < "position" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_position_n_1_rel",
            PHON.ONSET con ] ].

position_v1 := v_np_trans_le &
 [ STEM < "position" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_position_v_1_rel",
            PHON.ONSET con ] ].

position_v2 := v_np_as_le &
 [ STEM < "position" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_position_v_as_rel",
            PHON.ONSET con ] ].

positive_a1 := adj_intrans_le &
 [ STEM < "positive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_positive_a_1_rel",
            PHON.ONSET con ] ].

positively_a1 := adv_int_vp_le &
 [ STEM < "positively" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_positive_a_1_rel",
            PHON.ONSET con ] ].

possess_v1 := v_np_trans_le &
 [ STEM < "possess" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_possess_v_1_rel",
            PHON.ONSET con ] ].

possession_n1 := n_mass_count_ppof_le &
 [ STEM < "possession" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_possession_n_of_rel",
            PHON.ONSET con ] ].

possessive_a1 := adj_intrans_le &
 [ STEM < "possessive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_possessive_a_1_rel",
            PHON.ONSET con ] ].

possessive_n1 := n_intr_le &
 [ STEM < "possessive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_possessive_n_1_rel",
            PHON.ONSET con ] ].

possessor_n1 := n_intr_le &
 [ STEM < "possessor" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_possessor_n_1_rel",
            PHON.ONSET con ] ].

possibility_n1 := n_ppof_nosort_le &
 [ STEM < "possibility" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_possibility_n_of_rel",
            PHON.ONSET con ] ].

possibility_n2 := n_cpcomp_optthat_le &
 [ STEM < "possibility" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_possibility_n_of_rel",
            PHON.ONSET con ] ].

possible_a1 := adj_trans_le &
 [ STEM < "possible" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_possible_a_for_rel" ],
            PHON.ONSET con ] ].

possible_a2 := adj_reg_atrans_le &
 [ STEM < "possible" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_possible_a_for_rel",
            PHON.ONSET con ] ].

possible_a3 := adj_reg_atrans_cp_le &
 [ STEM < "possible" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_possible_a_for_rel",
            PHON.ONSET con ] ].

possibly_adv1 := adv_vp_le &
 [ STEM < "possibly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_possible_a_for_rel",
            PHON.ONSET con ] ].

possibly_adv2 := adv_s_pre_le &
 [ STEM < "possibly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_possible_a_for_rel",
            PHON.ONSET con ] ].

post-_a1 := adj_attr_intrans_le &
 [ STEM < "post-" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_post-_a_1_rel",
            PHON.ONSET con ] ].

post-meeting_a1 := adj_intrans_le &
 [ STEM < "post", "meeting" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_post+meeting_a_1_rel",
            PHON.ONSET con ] ].

post-mortem_n1 := n_intr_le &
 [ STEM < "post", "mortem" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_postmortem_n_1_rel",
            PHON.ONSET con ] ].

post-trip_a1 := adj_intrans_le &
 [ STEM < "post", "trip" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_post+trip_a_1_rel",
            PHON.ONSET con ] ].

post_n1 := n_intr_le &
 [ STEM < "post" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_post_n_1_rel",
            PHON.ONSET con ] ].

post_office_box_n1 := n_intr_le &
 [ STEM < "po", "box" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_po+box_n_1_rel",
            PHON.ONSET con ] ].

post_v1 := v_np_trans_le &
 [ STEM < "post" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_post_v_1_rel",
            PHON.ONSET con ] ].

post_v2 := v_np_prep_trans_le &
 [ STEM < "post" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _to_p_rel,
                    KEYREL.PRED "_post_v_1_rel" ],
            PHON.ONSET con ] ].

postage_n1 := n_mass_le &
 [ STEM < "postage" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_postage_n_1_rel",
            PHON.ONSET con ] ].

postal_a1 := adj_intrans_le &
 [ STEM < "postal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_postal_a_1_rel",
            PHON.ONSET con ] ].

postcard_n1 := n_intr_le &
 [ STEM < "postcard" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_postcard_n_1_rel",
            PHON.ONSET con ] ].

poster_n1 := n_intr_le &
 [ STEM < "poster" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_poster_n_1_rel",
            PHON.ONSET con ] ].

posterior_a1 := adj_intrans_le &
 [ STEM < "posterior" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_posterior_a_1_rel",
            PHON.ONSET con ] ].

posting_n1 := n_intr_le &
 [ STEM < "posting" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_posting_n_1_rel",
            PHON.ONSET con ] ].

postmark_n1 := n_intr_le &
 [ STEM < "postmark" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_postmark_n_1_rel",
            PHON.ONSET con ] ].

postmark_v1 := v_np_trans_le &
 [ STEM < "postmark" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_postmark_v_1_rel",
            PHON.ONSET con ] ].

postmark_v2 := v_ditrans_only_le &
 [ STEM < "postmark" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_postmark_v_1_rel",
            PHON.ONSET con ] ].

postmortem_n := n_intr_le &
 [ STEM < "postmortem" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_postmortem_n_1_rel",
            PHON.ONSET con ] ].

postpone_v1 := v_np_trans_le &
 [ STEM < "postpone" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_postpone_v_1_rel",
            PHON.ONSET con ] ].

postponement_n1 := n_ppof_le &
 [ STEM < "postponement" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_postponement_n_of_rel",
            PHON.ONSET con ] ].

postulate_n1 := n_intr_le &
 [ STEM < "postulate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_postulate_n_1_rel",
            PHON.ONSET con ] ].

postulate_v1 := v_np_trans_le &
 [ STEM < "postulate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_postulate_v_1_rel",
            PHON.ONSET con ] ].

postulate_v2 := v_cp_non_trans_le &
 [ STEM < "postulate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_postulate_v_1_rel",
            PHON.ONSET con ] ].

posture_n1 := n_mass_count_le &
 [ STEM < "posture" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_posture_n_1_rel",
            PHON.ONSET con ] ].

posture_v1 := v_unerg_le &
 [ STEM < "posture" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_posture_v_1_rel",
            PHON.ONSET con ] ].

pot_n1 := n_mass_count_le &
 [ STEM < "pot" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pot_n_1_rel",
            PHON.ONSET con ] ].

pot_v1 := v_np_trans_le &
 [ STEM < "pot" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pot_v_1_rel",
            PHON.ONSET con ] ].

potable_a1 := adj_intrans_le &
 [ STEM < "potable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_potable_a_1_rel",
            PHON.ONSET con ] ].

potato_n1 := n_intr_le &
 [ STEM < "potato" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_potato_n_1_rel",
            PHON.ONSET con ] ].

potency_n1 := n_mass_le &
 [ STEM < "potency" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_potency_n_1_rel",
            PHON.ONSET con ] ].

potential_a1 := adj_intrans_le &
 [ STEM < "potential" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_potential_a_1_rel",
            PHON.ONSET con ] ].

potential_n1 := n_mass_le &
 [ STEM < "potential" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_potential_n_1_rel",
            PHON.ONSET con ] ].

potentially_a1 := adv_vp_le &
 [ STEM < "potentially" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_potential_a_1_rel",
            PHON.ONSET con ] ].

pothole_n1 := n_intr_le &
 [ STEM < "pothole" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pothole_n_1_rel",
            PHON.ONSET con ] ].

potlatch_n1 := n_proper_le &
 [ STEM < "potlatch" >,
   SYNSEM [ LKEYS.KEYREL.CARG "potlatch",
            PHON.ONSET con ] ].

potsdam_n1 := n_proper_city_le &
 [ STEM < "potsdam" >,
   SYNSEM [ LKEYS.KEYREL.CARG "potsdam",
            PHON.ONSET con ] ].

pottery_n1 := n_intr_le &
 [ STEM < "pottery" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pottery_n_1_rel",
            PHON.ONSET con ] ].

poultice_n1 := n_intr_le &
 [ STEM < "poultice" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_poultice_n_1_rel",
            PHON.ONSET con ] ].

pound_n1 := n_meas_le &
 [ STEM < "pound" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pound_n_1_rel",
            PHON.ONSET con ] ].

pound_sign_title := n_title_le &
 [ STEM < "#" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_number_n_1_rel",
            PHON.ONSET con ] ].

pound_sterling_n1 := n_intr_sg_le &
 [ STEM < "pound", "sterling" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pound+sterling_n_1_rel",
            PHON.ONSET con ] ].

pound_v1 := v_np_trans_le &
 [ STEM < "pound" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pound_v_1_rel",
            PHON.ONSET con ] ].

poundal_n1 := n_intr_le &
 [ STEM < "poundal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_poundal_n_1_rel",
            PHON.ONSET con ] ].

pounds_sterling_n1 := n_plur_le &
 [ STEM < "pounds", "sterling" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pound+sterling_n_1_rel",
            PHON.ONSET con ] ].

pour_down_v1 := v_particle_le &
 [ STEM < "pour" >,
   SYNSEM [ LKEYS [ --COMPKEY _down_p_sel_rel,
                    KEYREL.PRED "_pour_v_down_rel" ],
            PHON.ONSET con ] ].

pour_in_v1 := v_particle_le &
 [ STEM < "pour" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_pour_v_in_rel" ],
            PHON.ONSET con ] ].

pour_in_v2 := v_particle_np_le &
 [ STEM < "pour" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_pour_v_in_rel" ],
            PHON.ONSET con ] ].

pour_off_v1 := v_particle_le &
 [ STEM < "pour" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_pour_v_off_rel" ],
            PHON.ONSET con ] ].

pour_off_v2 := v_particle_np_le &
 [ STEM < "pour" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_pour_v_off_rel" ],
            PHON.ONSET con ] ].

pour_out_v1 := v_particle_le &
 [ STEM < "pour" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_pour_v_out_rel" ],
            PHON.ONSET con ] ].

pour_out_v2 := v_particle_np_le &
 [ STEM < "pour" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_pour_v_out_rel" ],
            PHON.ONSET con ] ].

pour_v1 := v_np*_trans_le &
 [ STEM < "pour" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pour_v_1_rel",
            PHON.ONSET con ] ].

pour_v2 := v_ditrans_only_le &
 [ STEM < "pour" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pour_v_1_rel",
            PHON.ONSET con ] ].

poverty_n1 := n_mass_le &
 [ STEM < "poverty" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_poverty_n_1_rel",
            PHON.ONSET con ] ].

powder_n1 := n_mass_count_le &
 [ STEM < "powder" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_powder_n_1_rel",
            PHON.ONSET con ] ].

powder_v1 := v_np_trans_le &
 [ STEM < "powder" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_powder_v_1_rel",
            PHON.ONSET con ] ].

powell_n1 := n_proper_le &
 [ STEM < "powell" >,
   SYNSEM [ LKEYS.KEYREL.CARG "powell",
            PHON.ONSET con ] ].

power_down_v1 := v_particle_np_le &
 [ STEM < "power" >,
   SYNSEM [ LKEYS [ --COMPKEY _down_p_sel_rel,
                    KEYREL.PRED "_power_v_down_rel" ],
            PHON.ONSET con ] ].

power_down_v2 := v_particle_le &
 [ STEM < "power" >,
   SYNSEM [ LKEYS [ --COMPKEY _down_p_sel_rel,
                    KEYREL.PRED "_power_v_down_rel" ],
            PHON.ONSET con ] ].

power_n1 := n_mass_count_le &
 [ STEM < "power" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_power_n_1_rel",
            PHON.ONSET con ] ].

power_up_v1 := v_particle_np_le &
 [ STEM < "power" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_power_v_up_rel" ],
            PHON.ONSET con ] ].

power_up_v2 := v_particle_le &
 [ STEM < "power" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_power_v_up_rel" ],
            PHON.ONSET con ] ].

power_v1 := v_np_trans_le &
 [ STEM < "power" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_power_v_1_rel",
            PHON.ONSET con ] ].

powerbook_n1 := n_intr_le &
 [ STEM < "powerbook" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_powerbook_n_1_rel",
            PHON.ONSET con ] ].

powerful_a1 := adj_intrans_le &
 [ STEM < "powerful" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_powerful_a_1_rel",
            PHON.ONSET con ] ].

powerfully := adv_int_vp_le &
 [ STEM < "powerfully" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_powerful_a_1_rel",
            PHON.ONSET con ] ].

powershot_n1 := n_proper_le &
 [ STEM < "powershot" >,
   SYNSEM [ LKEYS.KEYREL.CARG "powershot",
            PHON.ONSET con ] ].

pox_n1 := n_mass_count_le &
 [ STEM < "pox" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pox_n_1_rel",
            PHON.ONSET con ] ].

practicable_a1 := adj_intrans_le &
 [ STEM < "practicable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_practicable_a_1_rel",
            PHON.ONSET con ] ].

practical_a1 := adj_intrans_le &
 [ STEM < "practical" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_practical_a_1_rel",
            PHON.ONSET con ] ].

practically_adv1 := adv_int_vp_le &
 [ STEM < "practically" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_practical_a_1_rel",
            PHON.ONSET con ] ].

practically_deg := adv_degree_spec_jov_le &
 [ STEM < "practically" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_practically_x_deg_rel",
            PHON.ONSET con ] ].

practice_n1 := n_mass_count_ppof_le &
 [ STEM < "practice" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_practice_n_of_rel",
            PHON.ONSET con ] ].

practice_upon_v1 := v_empty_prep_intrans_le &
 [ STEM < "practice" >,
   SYNSEM [ LKEYS [ --COMPKEY _upon_p_sel_rel,
                    KEYREL.PRED "_practice_v_upon_rel" ],
            PHON.ONSET con ] ].

practice_v1 := v_np*_trans_le &
 [ STEM < "practice" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_practice_v_1_rel",
            PHON.ONSET con ] ].

practise_upon_v1 := v_empty_prep_intrans_le &
 [ STEM < "practise" >,
   SYNSEM [ LKEYS [ --COMPKEY _upon_p_sel_rel,
                    KEYREL.PRED "_practice_v_upon_rel" ],
            PHON.ONSET con ] ].

practise_v1 := v_np*_trans_le &
 [ STEM < "practise" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_practice_v_1_rel",
            PHON.ONSET con ] ].

praise_n1 := n_mass_count_le &
 [ STEM < "praise" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_praise_n_1_rel",
            PHON.ONSET con ] ].

praise_v1 := v_np_trans_le &
 [ STEM < "praise" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_praise_v_1_rel",
            PHON.ONSET con ] ].

pray_v1 := v_np_trans_le &
 [ STEM < "pray" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pray_v_1_rel",
            PHON.ONSET con ] ].

pray_v2 := v_cp_prop_non_trans_le &
 [ STEM < "pray" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pray_v_1_rel",
            PHON.ONSET con ] ].

prayer_n1 := n_mass_count_le &
 [ STEM < "prayer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_prayer_n_1_rel",
            PHON.ONSET con ] ].

pre-_a1 := adj_attr_intrans_le &
 [ STEM < "pre-" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pre-_a_1_rel",
            PHON.ONSET con ] ].

pre_approved_a1 := adj_intrans_le &
 [ STEM < "pre", "approved" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pre+approved_a_1_rel",
            PHON.ONSET con ] ].

pre_approved_a2 := adj_intrans_le &
 [ STEM < "pre-", "approved" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pre+approved_a_1_rel",
            PHON.ONSET con ] ].

preach_v1 := v_np*_trans_le &
 [ STEM < "preach" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_preach_v_1_rel",
            PHON.ONSET con ] ].

precarious_a1 := adj_intrans_le &
 [ STEM < "precarious" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_precarious_a_1_rel",
            PHON.ONSET con ] ].

precautionarily := adv_int_vp_le &
 [ STEM < "precautionarily" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_precautionary_a_1_rel",
            PHON.ONSET con ] ].

precautionary_a1 := adj_intrans_le &
 [ STEM < "precautionary" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_precautionary_a_1_rel",
            PHON.ONSET con ] ].

precede_v1 := v_np*_trans_le &
 [ STEM < "precede" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_precede_v_1_rel",
            PHON.ONSET con ] ].

precedence_n1 := n_intr_le &
 [ STEM < "precedence" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_precedence_n_1_rel",
            PHON.ONSET con ] ].

preceding_a1 := adj_attr_intrans_le &
 [ STEM < "preceding" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_preceding_a_1_rel",
            PHON.ONSET con ] ].

precept_n1 := n_intr_le &
 [ STEM < "precept" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_precept_n_1_rel",
            PHON.ONSET con ] ].

precinct_n1 := n_intr_le &
 [ STEM < "precinct" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_precinct_n_1_rel",
            PHON.ONSET con ] ].

precious_isect := adj_intrans_le &
 [ STEM < "precious" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_precious_a_1_rel",
            PHON.ONSET con ] ].

preciously := adv_int_vp_le &
 [ STEM < "preciously" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_precious_a_1_rel",
            PHON.ONSET con ] ].

precipice_n1 := n_intr_le &
 [ STEM < "precipice" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_precipice_n_1_rel",
            PHON.ONSET con ] ].

precipitation_n1 := n_mass_ppcomp_le &
 [ STEM < "precipitation" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_precipitation_n_of_rel" ],
            PHON.ONSET con ] ].

precipitous_a1 := adj_attr_intrans_le &
 [ STEM < "precipitous" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_precipitous_a_1_rel",
            PHON.ONSET con ] ].

precipitously := adv_int_vp_le &
 [ STEM < "precipitously" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_precipitous_a_1_rel",
            PHON.ONSET con ] ].

precise_a1 := adj_intrans_le &
 [ STEM < "precise" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_precise_a_1_rel",
            PHON.ONSET con ] ].

precisely := adv_int_vp_le &
 [ STEM < "precisely" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_precise_a_1_rel",
            PHON.ONSET con ] ].

precisely_deg := adv_degree_spec_jov_le &
 [ STEM < "precisely" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_precisely_x_deg_rel",
            PHON.ONSET con ] ].

preclude_v1 := v_np_trans_le &
 [ STEM < "preclude" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_preclude_v_1_rel",
            PHON.ONSET con ] ].

predator_n1 := n_intr_le &
 [ STEM < "predator" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_predator_n_1_rel",
            PHON.ONSET con ] ].

predatory_a1 := adj_intrans_le &
 [ STEM < "predatory" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_predatory_a_1_rel",
            PHON.ONSET con ] ].

predecessor_n1 := n_intr_le &
 [ STEM < "predecessor" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_predecessor_n_1_rel",
            PHON.ONSET con ] ].

predefined_isect := adj_intrans_le &
 [ STEM < "predefined" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_predefined_a_1_rel",
            PHON.ONSET con ] ].

predetermine_v1 := v_np_trans_le &
 [ STEM < "predetermine" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_predetermine_v_1_rel",
            PHON.ONSET con ] ].

predicable_a1 := adj_intrans_le &
 [ STEM < "predicable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_predicable_a_1_rel",
            PHON.ONSET con ] ].

predicament_n1 := n_intr_le &
 [ STEM < "predicament" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_predicament_n_1_rel",
            PHON.ONSET con ] ].

predicate_n1 := n_intr_le &
 [ STEM < "predicate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_predicate_n_1_rel",
            PHON.ONSET con ] ].

predicate_of_v1 := v_empty_prep*_trans_le &
 [ STEM < "predicate" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_predicate_v_of_rel" ],
            PHON.ONSET con ] ].

predicate_on_v2 := v_empty_prep_trans_le &
 [ STEM < "predicate" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_predicate_v_on_rel" ],
            PHON.ONSET con ] ].

predict_v1 := v_np_trans_le &
 [ STEM < "predict" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_predict_v_1_rel",
            PHON.ONSET con ] ].

predict_v2 := v_cp_non_trans_le &
 [ STEM < "predict" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_predict_v_1_rel",
            PHON.ONSET con ] ].

predicted_isect := adj_attr_intrans_le &
 [ STEM < "predicted" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_predicted_a_1_rel",
            PHON.ONSET con ] ].

predominant_a1 := adj_attr_intrans_le &
 [ STEM < "predominant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_predominant_a_1_rel",
            PHON.ONSET con ] ].

predominantly := adv_int_vp_le &
 [ STEM < "predominantly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_predominant_a_1_rel",
            PHON.ONSET con ] ].

predominate_v1 := v_unerg_le &
 [ STEM < "predominate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_predominate_v_1_rel",
            PHON.ONSET con ] ].

preeminence_n1 := n_mass_le &
 [ STEM < "preeminence" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_preeminence_n_1_rel",
            PHON.ONSET con ] ].

preeminence_n2 := n_mass_le &
 [ STEM < "preÃ«minence" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_preeminence_n_1_rel",
            PHON.ONSET con ] ].

preeminent_a1 := adj_intrans_le &
 [ STEM < "preeminent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_preeminent_a_1_rel",
            PHON.ONSET con ] ].

preeminent_a2 := adj_intrans_le &
 [ STEM < "preÃ«minent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_preeminent_a_1_rel",
            PHON.ONSET con ] ].

preexisting_a1 := adj_intrans_le &
 [ STEM < "preexisting" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_preexisting_a_1_rel",
            PHON.ONSET con ] ].

preexisting_a2 := adj_intrans_le &
 [ STEM < "pre-", "existing" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_preexisting_a_1_rel",
            PHON.ONSET con ] ].

preface_n1 := n_intr_le &
 [ STEM < "preface" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_preface_n_1_rel",
            PHON.ONSET con ] ].

preface_v1 := v_np_trans_le &
 [ STEM < "preface" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_preface_v_1_rel",
            PHON.ONSET con ] ].

prefer_v1 := v_np_trans_le &
 [ STEM < "prefer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_prefer_v_1_rel",
            PHON.ONSET con ] ].

prefer_v2 := v_expl_obj_cp_le &
 [ STEM < "prefer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_prefer_v_1_rel",
            PHON.ONSET con ] ].

prefer_v3 := v_subj_equi_le &
 [ STEM < "prefer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_prefer_v_1_rel",
            PHON.ONSET con ] ].

prefer_v4 := v_prep_intrans_event_le &
 [ STEM < "prefer" >,
   SYNSEM [ LKEYS [ --COMPKEY loc_abstr_rel,
                    KEYREL.PRED "_prefer_v_loc_rel" ],
            PHON.ONSET con ] ].

prefer_v5 := v_cp_subj_le &
 [ STEM < "prefer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_prefer_v_1_rel",
            PHON.ONSET con ] ].

preferable_a1 := adj_intrans_le &
 [ STEM < "preferable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_preferable_a_1_rel",
            PHON.ONSET con ] ].

preferably_adv1 := adv_int_vp_le &
 [ STEM < "preferably" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_preferable_a_1_rel",
            PHON.ONSET con ] ].

preference_n1 := n_ppcomp_le &
 [ STEM < "preference" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_preference_n_for_rel" ],
            PHON.ONSET con ] ].

prefix_n1 := n_intr_le &
 [ STEM < "prefix" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_prefix_n_1_rel",
            PHON.ONSET con ] ].

pregnancy_n1 := n_mass_count_le &
 [ STEM < "pregnancy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pregnancy_n_1_rel",
            PHON.ONSET con ] ].

pregnant_a1 := adj_trans_le &
 [ STEM < "pregnant" >,
   SYNSEM [ LKEYS [ --COMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_pregnant_a_with_rel" ],
            PHON.ONSET con ] ].

prehistoric_a1 := adj_intrans_le &
 [ STEM < "prehistoric" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_prehistoric_a_1_rel",
            PHON.ONSET con ] ].

prejudice_n := n_mass_count_le &
 [ STEM < "prejudice" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_prejudice_n_1_rel",
            PHON.ONSET con ] ].

prejudice_v1 := v_np_trans_le &
 [ STEM < "prejudice" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_prejudice_v_1_rel",
            PHON.ONSET con ] ].

prelim_n1 := n_intr_le &
 [ STEM < "prelim" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_prelim_n_1_rel",
            PHON.ONSET con ] ].

preliminarily := adv_int_vp_le &
 [ STEM < "preliminarily" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_preliminary_a_1_rel",
            PHON.ONSET con ] ].

preliminary_a1 := adj_intrans_le &
 [ STEM < "preliminary" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_preliminary_a_1_rel",
            PHON.ONSET con ] ].

preload_v1 := v_np_trans_le &
 [ STEM < "preload" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_preload_v_1_rel",
            PHON.ONSET con ] ].

preload_v2 := v_np_prep_trans_le &
 [ STEM < "preload" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _with_p_rel,
                    KEYREL.PRED "_preload_v_1_rel" ],
            PHON.ONSET con ] ].

preload_v3 := v_np_trans_le &
 [ STEM < "pre", "load" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_preload_v_1_rel",
            PHON.ONSET con ] ].

preload_v4 := v_np_prep_trans_le &
 [ STEM < "pre", "load" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _with_p_rel,
                    KEYREL.PRED "_preload_v_1_rel" ],
            PHON.ONSET con ] ].

preload_v5 := v_np_trans_le &
 [ STEM < "pre-", "load" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_preload_v_1_rel",
            PHON.ONSET con ] ].

preload_v6 := v_np_prep_trans_le &
 [ STEM < "pre-", "load" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _with_p_rel,
                    KEYREL.PRED "_preload_v_1_rel" ],
            PHON.ONSET con ] ].

premature_a1 := adj_intrans_le &
 [ STEM < "premature" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_premature_a_1_rel",
            PHON.ONSET con ] ].

premier_a1 := adj_attr_intrans_le &
 [ STEM < "premier" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_premier_a_1_rel",
            PHON.ONSET con ] ].

premiere_n := n_intr_le &
 [ STEM < "premiere" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_premiere_n_1_rel",
            PHON.ONSET con ] ].

premise_n1 := n_intr_le &
 [ STEM < "premise" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_premise_n_1_rel",
            PHON.ONSET con ] ].

premises_n1 := n_plur_nocmpnd_le &
 [ STEM < "premise" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_premises_n_1_rel",
            PHON.ONSET con ] ].

premium_a1 := adj_intrans_le &
 [ STEM < "premium" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_premium_a_1_rel",
            PHON.ONSET con ] ].

premium_n1 := n_intr_le &
 [ STEM < "premium" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_premium_n_1_rel",
            PHON.ONSET con ] ].

preoccupy_v1 := v_np_trans_le &
 [ STEM < "preoccupy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_preoccupy_v_1_rel",
            PHON.ONSET con ] ].

prep_abb_n1 := n_intr_le &
 [ STEM < "prep." >,
   SYNSEM [ LKEYS.KEYREL.PRED "_preposition_n_1_rel",
            PHON.ONSET con ] ].

prep_abb_n2 := n_intr_le &
 [ STEM < "prep" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_preposition_n_1_rel",
            PHON.ONSET con ] ].

prepaid_a1 := adj_intrans_le &
 [ STEM < "prepaid" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_prepaid_a_1_rel",
            PHON.ONSET con ] ].

prepaid_a2 := adj_intrans_le &
 [ STEM < "pre-", "paid" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_prepaid_a_1_rel",
            PHON.ONSET con ] ].

preparation_n1 := n_mass_count_nosort_le &
 [ STEM < "preparation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_preparation_n_1_rel",
            PHON.ONSET con ] ].

preparatory_a1 := adj_intrans_le &
 [ STEM < "preparatory" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_preparatory_a_1_rel",
            PHON.ONSET con ] ].

prepare_for_v1 := v_empty_prep_intrans_le &
 [ STEM < "prepare" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_prepare_v_for_rel" ],
            PHON.ONSET con ] ].

prepare_v1 := v_np*_trans_le &
 [ STEM < "prepare" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_prepare_v_1_rel",
            PHON.ONSET con ] ].

prepare_v2 := v_subj_equi_le &
 [ STEM < "prepare" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_prepare_v_1_rel",
            PHON.ONSET con ] ].

prepare_v3 := v_ditrans_only_le &
 [ STEM < "prepare" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_prepare_v_1_rel",
            PHON.ONSET con ] ].

prepare_v4 := v_obj_equi_le &
 [ STEM < "prepare" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_prepare_v_1_rel",
            PHON.ONSET con ] ].

prepared_a1 := adj_intrans_le &
 [ STEM < "prepared" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_prepared_a_1_rel",
            PHON.ONSET con ] ].

prepared_a2 := adj_reg_equi_le &
 [ STEM < "prepared" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_prepared_a_1_rel",
            PHON.ONSET con ] ].

prepay_v1 := v_np*_trans_le &
 [ STEM < "pre", "pay" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_prepay_v_1_rel",
            PHON.ONSET con ] ].

prepay_v2 := v_np*_trans_le &
 [ STEM < "pre-", "pay" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_prepay_v_1_rel",
            PHON.ONSET con ] ].

preposition_n1 := n_intr_le &
 [ STEM < "preposition" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_preposition_n_1_rel",
            PHON.ONSET con ] ].

prepositional_a1 := adj_intrans_le &
 [ STEM < "prepositional" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_prepositional_a_1_rel",
            PHON.ONSET con ] ].

prequalify_v1 := v_empty_prep_intrans_le &
 [ STEM < "prequalify" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_prequalify_v_for_rel" ],
            PHON.ONSET con ] ].

prequalify_v2 := v_np*_trans_le &
 [ STEM < "prequalify" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_prequalify_v_for_rel",
            PHON.ONSET con ] ].

prequalify_v3 := v_empty_prep_trans_le &
 [ STEM < "prequalify" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_prequalify_v_for_rel" ],
            PHON.ONSET con ] ].

pres_ttl := n_title_le &
 [ STEM < "pres" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_president_n_of_rel",
            PHON.ONSET con ] ].

pres_ttl_2 := n_title_le &
 [ STEM < "pres." >,
   SYNSEM [ LKEYS.KEYREL.PRED "_president_n_of_rel",
            PHON.ONSET con ] ].

presario_n1 := n_intr_le &
 [ STEM < "presario" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_presario_n_1_rel",
            PHON.ONSET con ] ].

presbyterian_a1 := adj_intrans_le &
 [ STEM < "presbyterian" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_presbyterian_a_1_rel",
            PHON.ONSET con ] ].

presbyterian_n1 := n_intr_le &
 [ STEM < "presbyterian" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_presbyterian_n_1_rel",
            PHON.ONSET con ] ].

prescribe_v1 := v_np_trans_le &
 [ STEM < "prescribe" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_prescribe_v_1_rel",
            PHON.ONSET con ] ].

presence_n1 := n_intr_le &
 [ STEM < "presence" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_presence_n_1_rel",
            PHON.ONSET con ] ].

present_a1 := adj_intrans_le &
 [ STEM < "present" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_present_a_1_rel",
            PHON.ONSET con ] ].

present_n1 := n_intr_le &
 [ STEM < "present" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_present_n_1_rel",
            PHON.ONSET con ] ].

present_v1 := v_to*_trans_le &
 [ STEM < "present" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_present_v_to_rel",
            PHON.ONSET con ] ].

present_with_v1 := v_empty_prep_trans_le &
 [ STEM < "present" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_present_v_with_rel" ],
            PHON.ONSET con ] ].

presentation_n1 := n_mass_count_ppof_le &
 [ STEM < "presentation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_presentation_n_of_rel",
            PHON.ONSET con ] ].

presently := adv_int_vp_le &
 [ STEM < "presently" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_present_a_1_rel",
            PHON.ONSET con ] ].

preservation_n1 := n_mass_le &
 [ STEM < "preservation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_preservation_n_1_rel",
            PHON.ONSET con ] ].

preserve_n1 := n_intr_le &
 [ STEM < "preserve" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_preserve_n_1_rel",
            PHON.ONSET con ] ].

preserve_v1 := v_np_trans_le &
 [ STEM < "preserve" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_preserve_v_1_rel",
            PHON.ONSET con ] ].

preside_over_v1 := v_empty_prep_intrans_le &
 [ STEM < "preside" >,
   SYNSEM [ LKEYS [ --COMPKEY _over_p_sel_rel,
                    KEYREL.PRED "_preside_v_over_rel" ],
            PHON.ONSET con ] ].

preside_v1 := v_unerg_le &
 [ STEM < "preside" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_preside_v_1_rel",
            PHON.ONSET con ] ].

presidency_n1 := n_intr_le &
 [ STEM < "presidency" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_presidency_n_1_rel",
            PHON.ONSET con ] ].

president_n1 := n_ppof_le &
 [ STEM < "president" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_president_n_of_rel",
            PHON.ONSET con ] ].

president_ttl := n_title_le &
 [ STEM < "president" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_president_n_of_rel",
            PHON.ONSET con ] ].

presidential_a1 := adj_intrans_le &
 [ STEM < "presidential" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_presidential_a_1_rel",
            PHON.ONSET con ] ].

press_n1 := n_intr_le &
 [ STEM < "press" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_press_n_1_rel",
            PHON.ONSET con ] ].

press_on_v1 := v_particle_le &
 [ STEM < "press" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_press_v_on_rel" ],
            PHON.ONSET con ] ].

press_v1 := v_np*_trans_le &
 [ STEM < "press" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_press_v_1_rel",
            PHON.ONSET con ] ].

pressing_isect := adj_intrans_le &
 [ STEM < "pressing" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pressing_a_1_rel",
            PHON.ONSET con ] ].

pressingly := adv_int_vp_le &
 [ STEM < "pressingly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pressing_a_1_rel",
            PHON.ONSET con ] ].

pressure_n1 := n_mass_le &
 [ STEM < "pressure" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pressure_n_1_rel",
            PHON.ONSET con ] ].

pressure_v1 := v_np_trans_le &
 [ STEM < "pressure" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pressure_v_1_rel",
            PHON.ONSET con ] ].

pressure_v2 := v_obj_equi_le &
 [ STEM < "pressure" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pressure_v_1_rel",
            PHON.ONSET con ] ].

prest := n_proper_le &
 [ STEM < "prest" >,
   SYNSEM [ LKEYS.KEYREL.CARG "prest",
            PHON.ONSET con ] ].

prestavatnet := n_proper_le &
 [ STEM < "prestavatnet" >,
   SYNSEM [ LKEYS.KEYREL.CARG "prestavatnet",
            PHON.ONSET con ] ].

prestesteinsvatnet_n1 := n_proper_le &
 [ STEM < "prestesteinsvatnet" >,
   SYNSEM [ LKEYS.KEYREL.CARG "prestesteinsvatnet",
            PHON.ONSET con ] ].

prestevarden := n_proper_le &
 [ STEM < "prestevarden" >,
   SYNSEM [ LKEYS.KEYREL.CARG "prestevarden",
            PHON.ONSET con ] ].

presumable_isect := adj_intrans_le &
 [ STEM < "presumable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_presumable_a_1_rel",
            PHON.ONSET con ] ].

presumably := adv_int_vp_le &
 [ STEM < "presumably" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_presumably_a_1_rel",
            PHON.ONSET con ] ].

presume_v1 := v_cp_prop_non_trans_le &
 [ STEM < "presume" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_presume_v_1_rel",
            PHON.ONSET con ] ].

presume_v2 := v_unerg_le &
 [ STEM < "presume" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_presume_v_1_rel",
            PHON.ONSET con ] ].

presume_v3 := v_sor_le &
 [ STEM < "presume" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_presume_v_1_rel",
            PHON.ONSET con ] ].

presume_v4 := v_subj_equi_le &
 [ STEM < "presume" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_presume_v_1_rel",
            PHON.ONSET con ] ].

presume_v5 := v_np_trans_le &
 [ STEM < "presume" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_presume_v_1_rel",
            PHON.ONSET con ] ].

presuppose_v1 := v_np_trans_le &
 [ STEM < "presuppose" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_presuppose_v_1_rel",
            PHON.ONSET con ] ].

presuppose_v2 := v_cp_non_trans_le &
 [ STEM < "presuppose" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_presuppose_v_1_rel",
            PHON.ONSET con ] ].

pretend_v1 := v_cp_prop_non_trans_le &
 [ STEM < "pretend" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pretend_v_1_rel",
            PHON.ONSET con ] ].

pretend_v2 := v_subj_equi_le &
 [ STEM < "pretend" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pretend_v_1_rel",
            PHON.ONSET con ] ].

pretend_v3 := v_np*_trans_le &
 [ STEM < "pretend" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pretend_v_1_rel",
            PHON.ONSET con ] ].

pretense_n1 := n_mass_count_le &
 [ STEM < "pretense" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pretense_n_1_rel",
            PHON.ONSET con ] ].

pretentious_a1 := adj_intrans_le &
 [ STEM < "pretentious" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pretentious_a_1_rel",
            PHON.ONSET con ] ].

pretext_n1 := n_intr_le &
 [ STEM < "pretext" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pretext_n_1_rel",
            PHON.ONSET con ] ].

pretty_a1 := adj_intrans_le &
 [ STEM < "pretty" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pretty_a_1_rel",
            PHON.ONSET con ] ].

pretty_deg := adv_degree_spec_v_le &
 [ STEM < "pretty" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pretty_x_rel",
            PHON.ONSET con ] ].

pretty_much_adv := adv_int_vp_pre_le &
 [ STEM < "pretty", "much" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pretty+much_a_1_rel",
            PHON.ONSET con ] ].

pretty_much_deg := adv_degree_spec_v_le &
 [ STEM < "pretty", "much" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pretty+much_x_deg_rel",
            PHON.ONSET con ] ].

pretty_well_adv := adv_int_vp_pre_le &
 [ STEM < "pretty", "well" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pretty+well_a_1_rel",
            PHON.ONSET con ] ].

pretty_well_deg := adv_degree_spec_v_le &
 [ STEM < "pretty", "well" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pretty+well_x_deg_rel",
            PHON.ONSET con ] ].

pretzel_n1 := n_intr_le &
 [ STEM < "pretzel" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pretzel_n_1_rel",
            PHON.ONSET con ] ].

prevail_v1 := v_unerg_le &
 [ STEM < "prevail" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_prevail_v_1_rel",
            PHON.ONSET con ] ].

prevalent_a1 := adj_intrans_le &
 [ STEM < "prevalent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_prevalent_a_1_rel",
            PHON.ONSET con ] ].

prevent_v1 := v_np_trans_le &
 [ STEM < "prevent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_prevent_v_1_rel",
            PHON.ONSET con ] ].

prevent_v2 := v_obj_equi_from_le &
 [ STEM < "prevent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_prevent_v_from_rel",
            PHON.ONSET con ] ].

prevention_n1 := n_mass_le &
 [ STEM < "prevention" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_prevention_n_1_rel",
            PHON.ONSET con ] ].

preventive_a1 := adj_intrans_le &
 [ STEM < "preventive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_preventive_a_1_rel",
            PHON.ONSET con ] ].

previous_a1 := adj_intrans_le &
 [ STEM < "previous" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_previous_a_1_rel",
            PHON.ONSET con ] ].

previous_to_p1 := p_le &
 [ STEM < "previous", "to" >,
   SYNSEM [ LKEYS.KEYREL.PRED _previous+to_p_rel,
            PHON.ONSET con ] ].

previously_adv1 := adv_int_vp_le &
 [ STEM < "previously" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_previous_a_1_rel",
            PHON.ONSET con ] ].

prey_n1 := n_mass_le &
 [ STEM < "prey" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_prey_n_1_rel",
            PHON.ONSET con ] ].

price-list_n1 := n_intr_le &
 [ STEM < "price", "list" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_price+list_n_1_rel",
            PHON.ONSET con ] ].

price_n1 := n_mass_count_le &
 [ STEM < "price" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_price_n_1_rel",
            PHON.ONSET con ] ].

price_v1 := v_np_trans_le &
 [ STEM < "price" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_price_v_1_rel",
            PHON.ONSET con ] ].

priced_a1 := adj_attr_intrans_le &
 [ STEM < "priced" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_priced_a_1_rel",
            PHON.ONSET con ] ].

pricetag_n1 := n_intr_le &
 [ STEM < "pricetag" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pricetag_n_1_rel",
            PHON.ONSET con ] ].

pricewise_isect := adj_intrans_le &
 [ STEM < "pricewise" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pricewise_a_1_rel",
            PHON.ONSET con ] ].

pricey_adj := adj_intrans_le &
 [ STEM < "pricey" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pricey_a_1_rel",
            PHON.ONSET con ] ].

pricing_n1 := n_mass_le &
 [ STEM < "pricing" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pricing_n_1_rel",
            PHON.ONSET con ] ].

prick_n1 := n_intr_le &
 [ STEM < "prick" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_prick_n_1_rel",
            PHON.ONSET con ] ].

prick_v1 := v_np_trans_le &
 [ STEM < "prick" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_prick_v_1_rel",
            PHON.ONSET con ] ].

pride_n1 := n_mass_count_le &
 [ STEM < "pride" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pride_n_1_rel",
            PHON.ONSET con ] ].

priest_n1 := n_intr_le &
 [ STEM < "priest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_priest_n_1_rel",
            PHON.ONSET con ] ].

priest_ttl := n_title_le &
 [ STEM < "priest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_priest_n_1_rel",
            PHON.ONSET con ] ].

primanti_n1 := n_proper_le &
 [ STEM < "primanti" >,
   SYNSEM [ LKEYS.KEYREL.CARG "primanti",
            PHON.ONSET con ] ].

primarily := adv_int_vp_aux_le &
 [ STEM < "primarily" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_primary_a_1_rel",
            PHON.ONSET con ] ].

primary_a1 := adj_intrans_le &
 [ STEM < "primary" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_primary_a_1_rel",
            PHON.ONSET con ] ].

prime_a1 := adj_intrans_le &
 [ STEM < "prime" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_prime_a_1_rel",
            PHON.ONSET con ] ].

prime_minister_n1 := n_ppof_le &
 [ STEM < "prime", "minister" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_prime+minister_n_of_rel",
            PHON.ONSET con ] ].

prime_minister_ttl := n_title_le &
 [ STEM < "prime", "minister" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_prime+minister_n_of_rel",
            PHON.ONSET con ] ].

prime_n1 := n_intr_le &
 [ STEM < "prime" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_prime_n_1_rel",
            PHON.ONSET con ] ].

prime_v1 := v_np_trans_le &
 [ STEM < "prime" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_prime_v_1_rel",
            PHON.ONSET con ] ].

primer_n1 := n_intr_le &
 [ STEM < "primer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_primer_n_1_rel",
            PHON.ONSET con ] ].

primeval_a1 := adj_intrans_le &
 [ STEM < "primeval" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_primeval_a_1_rel",
            PHON.ONSET con ] ].

primitive_a1 := adj_intrans_le &
 [ STEM < "primitive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_primitive_a_1_rel",
            PHON.ONSET con ] ].

primitive_n1 := n_no_cmpnd_le &
 [ STEM < "primitive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_primitive_n_1_rel",
            PHON.ONSET con ] ].

primrose_a1 := adj_intrans_le &
 [ STEM < "primrose" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_primrose_a_1_rel",
            PHON.ONSET con ] ].

prince_n1 := n_ppof_le &
 [ STEM < "prince" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_prince_n_of_rel",
            PHON.ONSET con ] ].

prince_n2 := n_proper_le &
 [ STEM < "prince" >,
   SYNSEM [ LKEYS.KEYREL.CARG "prince",
            PHON.ONSET con ] ].

prince_ttl := n_title_le &
 [ STEM < "prince" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_prince_n_of_rel",
            PHON.ONSET con ] ].

princess_n1 := n_ppof_le &
 [ STEM < "princess" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_princess_n_of_rel",
            PHON.ONSET con ] ].

princess_ttl := n_title_le &
 [ STEM < "princess" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_princess_n_of_rel",
            PHON.ONSET con ] ].

principal_a1 := adj_intrans_le &
 [ STEM < "principal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_principal_a_1_rel",
            PHON.ONSET con ] ].

principally_adv1 := adv_int_vp_le &
 [ STEM < "principally" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_principal_a_1_rel",
            PHON.ONSET con ] ].

principle_n1 := n_ppof_le &
 [ STEM < "principle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_principle_n_of_rel",
            PHON.ONSET con ] ].

print_n1 := n_intr_le &
 [ STEM < "print" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_print_n_1_rel",
            PHON.ONSET con ] ].

print_out_v1 := v_particle_np_le &
 [ STEM < "print" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_print_v_out_rel" ],
            PHON.ONSET con ] ].

print_v1 := v_np_trans_le &
 [ STEM < "print" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_print_v_1_rel",
            PHON.ONSET con ] ].

print_v2 := v_np_prep_trans_le &
 [ STEM < "print" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _onto_p_rel,
                    KEYREL.PRED "_print_v_1_rel" ],
            PHON.ONSET con ] ].

printer_n1 := n_ppof_le &
 [ STEM < "printer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_printer_n_of_rel",
            PHON.ONSET con ] ].

prinzenhof := n_intr_named_le &
 [ STEM < "prinzenhof" >,
   SYNSEM [ LKEYS.KEYREL.CARG "prinzenhof",
            PHON.ONSET con ] ].

prior_a1 := adj_intrans_le &
 [ STEM < "prior" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_prior_a_1_rel",
            PHON.ONSET con ] ].

prior_to := p_le &
 [ STEM < "prior", "to" >,
   SYNSEM [ LKEYS.KEYREL.PRED _prior+to_p_rel,
            PHON.ONSET con ] ].

priority_n1 := n_intr_le &
 [ STEM < "priority" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_priority_n_1_rel",
            PHON.ONSET con ] ].

prism_n1 := n_intr_le &
 [ STEM < "prism" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_prism_n_1_rel",
            PHON.ONSET con ] ].

prismatic_a1 := adj_intrans_le &
 [ STEM < "prismatic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_prismatic_a_1_rel",
            PHON.ONSET con ] ].

prison_n1 := n_mass_count_le &
 [ STEM < "prison" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_prison_n_1_rel",
            PHON.ONSET con ] ].

prisoner_n1 := n_intr_le &
 [ STEM < "prisoner" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_prisoner_n_1_rel",
            PHON.ONSET con ] ].

pristine_a1 := adj_intrans_le &
 [ STEM < "pristine" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pristine_a_1_rel",
            PHON.ONSET con ] ].

privacy_n1 := n_intr_le &
 [ STEM < "privacy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_privacy_n_1_rel",
            PHON.ONSET con ] ].

private_a1 := adj_intrans_le &
 [ STEM < "private" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_private_a_1_rel",
            PHON.ONSET con ] ].

privately_adv1 := adv_int_vp_le &
 [ STEM < "privately" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_private_a_1_rel",
            PHON.ONSET con ] ].

privative_a1 := adj_intrans_le &
 [ STEM < "privative" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_privative_a_1_rel",
            PHON.ONSET con ] ].

privatize_v1 := v_np_trans_le &
 [ STEM < "privatize" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_privatize_v_1_rel",
            PHON.ONSET con ] ].

privilege_n1 := n_mass_count_ppof_le &
 [ STEM < "privilege" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_privilege_n_of_rel",
            PHON.ONSET con ] ].

privileged_a1 := adj_intrans_le &
 [ STEM < "privileged" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_privileged_a_1_rel",
            PHON.ONSET con ] ].

prize_n1 := n_ppcomp_le &
 [ STEM < "prize" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_prize_n_for_rel" ],
            PHON.ONSET con ] ].

prize_v1 := v_np_trans_le &
 [ STEM < "prize" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_prize_v_1_rel",
            PHON.ONSET con ] ].

pro_n1 := n_intr_le &
 [ STEM < "pro" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pro_n_1_rel",
            PHON.ONSET con ] ].

probability_n1 := n_ppof_le &
 [ STEM < "probability" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_probability_n_of_rel",
            PHON.ONSET con ] ].

probability_n2 := n_cpcomp_fin_le &
 [ STEM < "probability" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_probability_n_of_rel",
            PHON.ONSET con ] ].

probable_a1 := adj_intrans_le &
 [ STEM < "probable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_probable_a_1_rel",
            PHON.ONSET con ] ].

probably_adv1 := adv_vp_aux_le &
 [ STEM < "probably" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_probable_a_1_rel",
            PHON.ONSET con ] ].

probably_adv2 := adv_s_pre_le &
 [ STEM < "probably" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_probable_a_1_rel",
            PHON.ONSET con ] ].

probably_adv3 := adv_negmod_le &
 [ STEM < "probably" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_probable_a_1_rel",
            PHON.ONSET con ] ].

probe_n1 := n_intr_le &
 [ STEM < "probe" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_probe_n_1_rel",
            PHON.ONSET con ] ].

probe_v1 := v_np*_trans_le &
 [ STEM < "probe" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_probe_v_1_rel",
            PHON.ONSET con ] ].

probe_v2 := v_np*_prep_trans_le &
 [ STEM < "probe" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _for_p_rel,
                    KEYREL.PRED "_probe_v_1_rel" ],
            PHON.ONSET con ] ].

problem_n1 := n_ppof_nosort_le &
 [ STEM < "problem" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_problem_n_of_rel",
            PHON.ONSET con ] ].

problematic_a1 := adj_intrans_le &
 [ STEM < "problematic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_problematic_a_1_rel",
            PHON.ONSET con ] ].

problematically := adv_int_vp_post_le &
 [ STEM < "problematically" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_problematical_a_1_rel",
            PHON.ONSET con ] ].

procedure_n1 := n_intr_le &
 [ STEM < "procedure" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_procedure_n_1_rel",
            PHON.ONSET con ] ].

procedure_n2 := n_cpcomp_inf_le &
 [ STEM < "procedure" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_procedure_n_1_rel",
            PHON.ONSET con ] ].

proceed_v1 := v_prep_dir_le &
 [ STEM < "proceed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_proceed_v_1_rel",
            PHON.ONSET con ] ].

proceed_v2 := v_subj_equi_le &
 [ STEM < "proceed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_proceed_v_1_rel",
            PHON.ONSET con ] ].

proceed_with_v1 := v_empty_prep_intrans_le &
 [ STEM < "proceed" >,
   SYNSEM [ LKEYS [ --COMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_proceed_v_with_rel" ],
            PHON.ONSET con ] ].

process_n1 := n_mass_count_ppof_le &
 [ STEM < "process" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_process_n_of_rel",
            PHON.ONSET con ] ].

process_v1 := v_np*_trans_le &
 [ STEM < "process" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_process_v_1_rel",
            PHON.ONSET con ] ].

procession_n1 := n_intr_le &
 [ STEM < "procession" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_procession_n_1_rel",
            PHON.ONSET con ] ].

processor_n1 := n_ppof_le &
 [ STEM < "processor" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_processor_n_of_rel",
            PHON.ONSET con ] ].

proclaim_v1 := v_np_trans_le &
 [ STEM < "proclaim" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_proclaim_v_1_rel",
            PHON.ONSET con ] ].

proclaim_v2 := v_np_as_le &
 [ STEM < "proclaim" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_proclaim_v_as_rel",
            PHON.ONSET con ] ].

proclaim_v3 := v_cp_non_trans_le &
 [ STEM < "proclaim" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_proclaim_v_1_rel",
            PHON.ONSET con ] ].

procrastinator_n1 := n_intr_le &
 [ STEM < "procrastinator" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_procrastinator_n_1_rel",
            PHON.ONSET con ] ].

procter_gamble_n1 := n_proper_le &
 [ STEM < "procter", "and", "gamble" >,
   SYNSEM [ LKEYS.KEYREL.CARG "procter_gamble",
            PHON.ONSET con ] ].

procter_gamble_n2 := n_proper_le &
 [ STEM < "procter", "&", "gamble" >,
   SYNSEM [ LKEYS.KEYREL.CARG "procter_gamble",
            PHON.ONSET con ] ].

procter_n1 := n_proper_le &
 [ STEM < "procter" >,
   SYNSEM [ LKEYS.KEYREL.CARG "procter",
            PHON.ONSET con ] ].

procure_v1 := v_np_trans_le &
 [ STEM < "procure" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_procure_v_1_rel",
            PHON.ONSET con ] ].

procure_v2 := v_obj_equi_le &
 [ STEM < "procure" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_procure_v_1_rel",
            PHON.ONSET con ] ].

prodigal_a1 := adj_intrans_le &
 [ STEM < "prodigal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_prodigal_a_1_rel",
            PHON.ONSET con ] ].

prodigally := adv_int_vp_le &
 [ STEM < "prodigally" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_prodigal_a_1_rel",
            PHON.ONSET con ] ].

produce_v1 := v_np_trans_le &
 [ STEM < "produce" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_produce_v_1_rel",
            PHON.ONSET con ] ].

producer_n1 := n_ppof_le &
 [ STEM < "producer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_producer_n_of_rel",
            PHON.ONSET con ] ].

producer_ttl := n_title_le &
 [ STEM < "producer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_producer_n_of_rel",
            PHON.ONSET con ] ].

product_n1 := n_intr_le &
 [ STEM < "product" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_product_n_1_rel",
            PHON.ONSET con ] ].

production_n1 := n_mass_count_ppof_le &
 [ STEM < "production" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_production_n_of_rel",
            PHON.ONSET con ] ].

productive_isect := adj_intrans_le &
 [ STEM < "productive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_productive_a_1_rel",
            PHON.ONSET con ] ].

productively_isect := adv_int_vp_le &
 [ STEM < "productively" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_productive_a_1_rel",
            PHON.ONSET con ] ].

productivity_n1 := n_intr_le &
 [ STEM < "productivity" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_productivity_n_1_rel",
            PHON.ONSET con ] ].

profane_a1 := adj_intrans_le &
 [ STEM < "profane" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_profane_a_1_rel",
            PHON.ONSET con ] ].

profane_n1 := n_mass_le &
 [ STEM < "profane" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_profane_n_1_rel",
            PHON.ONSET con ] ].

profane_v1 := v_np_trans_le &
 [ STEM < "profane" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_profane_v_1_rel",
            PHON.ONSET con ] ].

profess_to_v1 := v_empty_prep_intrans_le &
 [ STEM < "profess" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_profess_v_to_rel" ],
            PHON.ONSET con ] ].

profess_v1 := v_np_trans_le &
 [ STEM < "profess" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_profess_v_1_rel",
            PHON.ONSET con ] ].

profess_v2 := v_cp_prop_non_trans_le &
 [ STEM < "profess" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_profess_v_1_rel",
            PHON.ONSET con ] ].

profession_n1 := n_mass_count_le &
 [ STEM < "profession" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_profession_n_1_rel",
            PHON.ONSET con ] ].

professional_isect := adj_intrans_le &
 [ STEM < "professional" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_professional_a_1_rel",
            PHON.ONSET con ] ].

professionally := adv_int_vp_le &
 [ STEM < "professionally" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_professional_a_1_rel",
            PHON.ONSET con ] ].

professor_n1 := n_ppof_le &
 [ STEM < "professor" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_professor_n_of_rel",
            PHON.ONSET con ] ].

professor_ttl := n_title_le &
 [ STEM < "professor" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_professor_n_of_rel",
            PHON.ONSET con ] ].

proficiency_n1 := n_mass_count_le &
 [ STEM < "proficiency" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_proficiency_n_1_rel",
            PHON.ONSET con ] ].

proficient_a1 := adj_intrans_le &
 [ STEM < "proficient" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_proficient_a_1_rel",
            PHON.ONSET con ] ].

profile_n1 := n_intr_le &
 [ STEM < "profile" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_profile_n_1_rel",
            PHON.ONSET con ] ].

profile_v1 := v_np_trans_le &
 [ STEM < "profile" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_profile_v_1_rel",
            PHON.ONSET con ] ].

profit_from_v1 := v_empty_prep_intrans_le &
 [ STEM < "profit" >,
   SYNSEM [ LKEYS [ --COMPKEY _from_p_sel_rel,
                    KEYREL.PRED "_profit_v_from_rel" ],
            PHON.ONSET con ] ].

profit_n1 := n_mass_count_le &
 [ STEM < "profit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_profit_n_1_rel",
            PHON.ONSET con ] ].

profit_v1 := v_np*_trans_le &
 [ STEM < "profit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_profit_v_1_rel",
            PHON.ONSET con ] ].

profitable_a1 := adj_trans_le &
 [ STEM < "profitable" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_profitable_a_for_rel" ],
            PHON.ONSET con ] ].

profitable_a2 := adj_reg_atrans_le &
 [ STEM < "profitable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_profitable_a_for_rel",
            PHON.ONSET con ] ].

profitable_a3 := adj_reg_atrans_cp_le &
 [ STEM < "profitable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_profitable_a_for_rel",
            PHON.ONSET con ] ].

profitably_pcisect := adv_int_vp_le &
 [ STEM < "profitably" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_profitable_a_for_rel",
            PHON.ONSET con ] ].

profound_a1 := adj_intrans_le &
 [ STEM < "profound" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_profound_a_1_rel",
            PHON.ONSET con ] ].

profuse_a1 := adj_intrans_le &
 [ STEM < "profuse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_profuse_a_1_rel",
            PHON.ONSET con ] ].

profusion_n1 := n_ppof_oblig_le &
 [ STEM < "profusion" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_profusion_n_of_rel",
            PHON.ONSET con ] ].

profusion_n2 := n_mass_le &
 [ STEM < "profusion" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_profusion_n_of_rel",
            PHON.ONSET con ] ].

progenitor_n1 := n_intr_le &
 [ STEM < "progenitor" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_progenitor_n_1_rel",
            PHON.ONSET con ] ].

program_n1 := n_ppof_le &
 [ STEM < "program" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_program_n_of_rel",
            PHON.ONSET con ] ].

program_v1 := v_np_trans_le &
 [ STEM < "program" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_program_v_1_rel",
            PHON.ONSET con ] ].

programmer_n1 := n_ppof_le &
 [ STEM < "programmer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_programmer_n_of_rel",
            PHON.ONSET con ] ].

progress_n1 := n_mass_count_le &
 [ STEM < "progress" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_progress_n_1_rel",
            PHON.ONSET con ] ].

progress_v1 := v_prep_dir_le &
 [ STEM < "progress" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_progress_v_1_rel",
            PHON.ONSET con ] ].

progression_n1 := n_mass_count_le &
 [ STEM < "progression" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_progression_n_1_rel",
            PHON.ONSET con ] ].

progressive_a1 := adj_intrans_le &
 [ STEM < "progressive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_progressive_a_1_rel",
            PHON.ONSET con ] ].

progressive_n1 := n_intr_le &
 [ STEM < "progressive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_progressive_n_1_rel",
            PHON.ONSET con ] ].

progressively := adv_int_vp_le &
 [ STEM < "progressively" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_progressive_a_1_rel",
            PHON.ONSET con ] ].

prohibit_v1 := v_np_trans_le &
 [ STEM < "prohibit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_prohibit_v_1_rel",
            PHON.ONSET con ] ].

prohibit_v2 := v_obj_equi_from_le &
 [ STEM < "prohibit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_prohibit_v_from_rel",
            PHON.ONSET con ] ].

prohibition_n1 := n_mass_count_ppof_le &
 [ STEM < "prohibition" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_prohibition_n_of_rel",
            PHON.ONSET con ] ].

project_n1 := n_intr_le &
 [ STEM < "project" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_project_n_1_rel",
            PHON.ONSET con ] ].

project_v1 := v_np_trans_le &
 [ STEM < "project" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_project_v_1_rel",
            PHON.ONSET con ] ].

projector_n1 := n_ppof_le &
 [ STEM < "projector" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_projector_n_of_rel",
            PHON.ONSET con ] ].

prolong_v1 := v_np*_trans_le &
 [ STEM < "prolong" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_prolong_v_1_rel",
            PHON.ONSET con ] ].

prolonged_isect := adj_intrans_le &
 [ STEM < "prolonged" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_prolonged_a_1_rel",
            PHON.ONSET con ] ].

prominence_n1 := n_mass_count_le &
 [ STEM < "prominence" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_prominence_n_1_rel",
            PHON.ONSET con ] ].

prominent_a1 := adj_intrans_le &
 [ STEM < "prominent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_prominent_a_1_rel",
            PHON.ONSET con ] ].

promise_n1 := n_ppof_le &
 [ STEM < "promise" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_promise_n_of_rel",
            PHON.ONSET con ] ].

promise_v1 := v_anom_equi_le &
 [ STEM < "promise" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_promise_v_1_rel",
            PHON.ONSET con ] ].

promise_v2 := v_np*_non_trans_le &
 [ STEM < "promise" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_promise_v_1_rel",
            PHON.ONSET con ] ].

promise_v4 := v_ditrans_le &
 [ STEM < "promise" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_promise_v_1_rel",
            PHON.ONSET con ] ].

promise_v5 := v_cp_prop_non_trans_le &
 [ STEM < "promise" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_promise_v_1_rel",
            PHON.ONSET con ] ].

promising_a1 := adj_intrans_le &
 [ STEM < "promising" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_promising_a_1_rel",
            PHON.ONSET con ] ].

promising_a2 := adj_reg_atrans_that_cp_le &
 [ STEM < "promising" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_promising_a_1_rel",
            PHON.ONSET con ] ].

promisingly := adv_int_vp_le &
 [ STEM < "promisingly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_promising_a_1_rel",
            PHON.ONSET con ] ].

promissory_a1 := adj_intrans_le &
 [ STEM < "promissory" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_promissory_a_1_rel",
            PHON.ONSET con ] ].

promontory_n1 := n_intr_le &
 [ STEM < "promontory" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_promontory_n_1_rel",
            PHON.ONSET con ] ].

promote_v1 := v_np*_trans_le &
 [ STEM < "promote" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_promote_v_1_rel",
            PHON.ONSET con ] ].

promoter_n1 := n_ppof_le &
 [ STEM < "promoter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_promoter_n_of_rel",
            PHON.ONSET con ] ].

promotion_n1 := n_ppof_le &
 [ STEM < "promotion" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_promotion_n_of_rel",
            PHON.ONSET con ] ].

prompt_a1 := adj_intrans_le &
 [ STEM < "prompt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_prompt_a_1_rel",
            PHON.ONSET con ] ].

prompt_n1 := n_intr_le &
 [ STEM < "prompt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_prompt_n_1_rel",
            PHON.ONSET con ] ].

prompt_v1 := v_np_trans_le &
 [ STEM < "prompt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_prompt_v_1_rel",
            PHON.ONSET con ] ].

prompt_v2 := v_obj_equi_le &
 [ STEM < "prompt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_prompt_v_1_rel",
            PHON.ONSET con ] ].

promptly := adv_int_vp_le &
 [ STEM < "promptly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_prompt_a_1_rel",
            PHON.ONSET con ] ].

promptness_n1 := n_intr_le &
 [ STEM < "promptness" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_promptness_n_1_rel",
            PHON.ONSET con ] ].

prone_a1 := adj_trans_le &
 [ STEM < "prone" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_prone_a_to_rel" ],
            PHON.ONSET con ] ].

pronominal_a1 := adj_intrans_le &
 [ STEM < "pronominal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pronominal_a_1_rel",
            PHON.ONSET con ] ].

pronominal_n1 := n_intr_le &
 [ STEM < "pronominal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pronominal_n_1_rel",
            PHON.ONSET con ] ].

pronominally_adv := adv_int_vp_le &
 [ STEM < "pronominally" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pronominal_a_1_rel",
            PHON.ONSET con ] ].

pronoun_n1 := n_intr_le &
 [ STEM < "pronoun" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pronoun_n_1_rel",
            PHON.ONSET con ] ].

pronounce_v1 := v_np*_trans_le &
 [ STEM < "pronounce" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pronounce_v_1_rel",
            PHON.ONSET con ] ].

pronunciation_n1 := n_mass_count_ppof_le &
 [ STEM < "pronunciation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pronunciation_n_of_rel",
            PHON.ONSET con ] ].

proof_n1 := n_mass_count_ppof_le &
 [ STEM < "proof" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_proof_n_of_rel",
            PHON.ONSET con ] ].

proof_n2 := n_mass_count_cpcomp_fin_le &
 [ STEM < "proof" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_proof_n_of_rel",
            PHON.ONSET con ] ].

prop_n1 := n_intr_le &
 [ STEM < "prop" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_prop_n_1_rel",
            PHON.ONSET con ] ].

prop_open_v1 := v_particle_np_le &
 [ STEM < "prop" >,
   SYNSEM [ LKEYS [ --COMPKEY _open_a_sel_rel,
                    KEYREL.PRED "_prop_v_open_rel" ],
            PHON.ONSET con ] ].

prop_up_v1 := v_particle_np_le &
 [ STEM < "prop" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_prop_v_up_rel" ],
            PHON.ONSET con ] ].

propaganda_n1 := n_intr_le &
 [ STEM < "propaganda" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_propaganda_n_1_rel",
            PHON.ONSET con ] ].

propagate_v1 := v_np_trans_le &
 [ STEM < "propagate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_propagate_v_1_rel",
            PHON.ONSET con ] ].

propel_v1 := v_np_trans_le &
 [ STEM < "propel" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_propel_v_1_rel",
            PHON.ONSET con ] ].

propensity_n1 := n_ppcomp_oblig_le &
 [ STEM < "propensity" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_propensity_n_for_rel" ],
            PHON.ONSET con ] ].

proper_a1 := adj_intrans_le &
 [ STEM < "proper" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_proper_a_1_rel",
            PHON.ONSET con ] ].

properly_adv1 := adv_int_vp_aux_le &
 [ STEM < "properly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_proper_a_1_rel",
            PHON.ONSET con ] ].

property_n1 := n_mass_count_le &
 [ STEM < "property" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_property_n_1_rel",
            PHON.ONSET con ] ].

prophet_n1 := n_intr_le &
 [ STEM < "prophet" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_prophet_n_1_rel",
            PHON.ONSET con ] ].

propitious_a1 := adj_intrans_le &
 [ STEM < "propitious" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_propitious_a_1_rel",
            PHON.ONSET con ] ].

proportion_n1 := n_mass_count_le &
 [ STEM < "proportion" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_proportion_n_1_rel",
            PHON.ONSET con ] ].

proportional_a1 := adj_intrans_le &
 [ STEM < "proportional" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_proportional_a_1_rel",
            PHON.ONSET con ] ].

proposal_n1 := n_intr_le &
 [ STEM < "proposal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_proposal_n_1_rel",
            PHON.ONSET con ] ].

proposal_n2 := n_cpcomp_fin_le &
 [ STEM < "proposal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_proposal_n_1_rel",
            PHON.ONSET con ] ].

propose_v1 := v_np*_trans_le &
 [ STEM < "propose" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_propose_v_1_rel",
            PHON.ONSET con ] ].

propose_v2 := v_cp_prop_non_trans_le &
 [ STEM < "propose" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_propose_v_1_rel",
            PHON.ONSET con ] ].

propose_v3 := v_subj_equi_le &
 [ STEM < "propose" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_propose_v_1_rel",
            PHON.ONSET con ] ].

propose_v4 := v_obj_equi_le &
 [ STEM < "propose" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_propose_v_1_rel",
            PHON.ONSET con ] ].

propose_v5 := v_cp_subj_le &
 [ STEM < "propose" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_propose_v_1_rel",
            PHON.ONSET con ] ].

proposition_n1 := n_intr_le &
 [ STEM < "proposition" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_proposition_n_1_rel",
            PHON.ONSET con ] ].

proprietor_n1 := n_intr_le &
 [ STEM < "proprietor" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_proprietor_n_1_rel",
            PHON.ONSET con ] ].

propriety_n1 := n_mass_count_le &
 [ STEM < "propriety" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_propriety_n_1_rel",
            PHON.ONSET con ] ].

propulsive_a1 := adj_intrans_le &
 [ STEM < "propulsive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_propulsive_a_1_rel",
            PHON.ONSET con ] ].

prose_n1 := n_mass_le &
 [ STEM < "prose" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_prose_n_1_rel",
            PHON.ONSET con ] ].

prosecute_v1 := v_np*_trans_le &
 [ STEM < "prosecute" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_prosecute_v_1_rel",
            PHON.ONSET con ] ].

prosecution_n1 := n_mass_count_ppof_le &
 [ STEM < "prosecution" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_prosecution_n_of_rel",
            PHON.ONSET con ] ].

prosodic_a1 := adj_intrans_le &
 [ STEM < "prosodic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_prosodic_a_1_rel",
            PHON.ONSET con ] ].

prosody_n1 := n_mass_count_le &
 [ STEM < "prosody" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_prosody_n_1_rel",
            PHON.ONSET con ] ].

prospect_n1 := n_intr_le &
 [ STEM < "prospect" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_prospect_n_1_rel",
            PHON.ONSET con ] ].

prospective_a1 := adj_intrans_le &
 [ STEM < "prospective" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_prospective_a_1_rel",
            PHON.ONSET con ] ].

prosperity_n1 := n_mass_le &
 [ STEM < "prosperity" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_prosperity_n_1_rel",
            PHON.ONSET con ] ].

prosperous_a1 := adj_intrans_le &
 [ STEM < "prosperous" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_prosperous_a_1_rel",
            PHON.ONSET con ] ].

prostitute_n1 := n_intr_le &
 [ STEM < "prostitute" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_prostitute_n_1_rel",
            PHON.ONSET con ] ].

prostitute_v1 := v_np_trans_le &
 [ STEM < "prostitute" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_prostitute_v_1_rel",
            PHON.ONSET con ] ].

protect_v1 := v_np*_trans_le &
 [ STEM < "protect" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_protect_v_1_rel",
            PHON.ONSET con ] ].

protection_n1 := n_mass_ppcomp_le &
 [ STEM < "protection" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_protection_n_of_rel" ],
            PHON.ONSET con ] ].

protective_a1 := adj_trans_le &
 [ STEM < "protective" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_protective_a_of_rel" ],
            PHON.ONSET con ] ].

protein_n1 := n_mass_count_le &
 [ STEM < "protein" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_protein_n_1_rel",
            PHON.ONSET con ] ].

protest_n1 := n_mass_count_le &
 [ STEM < "protest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_protest_n_1_rel",
            PHON.ONSET con ] ].

protest_v1 := v_np*_trans_le &
 [ STEM < "protest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_protest_v_1_rel",
            PHON.ONSET con ] ].

protest_v2 := v_cp_non_trans_le &
 [ STEM < "protest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_protest_v_1_rel",
            PHON.ONSET con ] ].

protest_v3 := v_prep_intrans_le &
 [ STEM < "protest" >,
   SYNSEM [ LKEYS [ --COMPKEY _against_p_rel,
                    KEYREL.PRED "_protest_v_1_rel" ],
            PHON.ONSET con ] ].

protest_v4 := v_prep_intrans_le &
 [ STEM < "protest" >,
   SYNSEM [ LKEYS [ --COMPKEY _at_p_rel,
                    KEYREL.PRED "_protest_v_1_rel" ],
            PHON.ONSET con ] ].

protestant_n1 := n_intr_le &
 [ STEM < "protestant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_protestant_n_1_rel",
            PHON.ONSET con ] ].

protocol_n1 := n_intr_le &
 [ STEM < "protocol" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_protocol_n_1_rel",
            PHON.ONSET con ] ].

protract_v1 := v_np_trans_le &
 [ STEM < "protract" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_protract_v_1_rel",
            PHON.ONSET con ] ].

protracted_a1 := adj_intrans_le &
 [ STEM < "protracted" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_protracted_a_1_rel",
            PHON.ONSET con ] ].

proud_a1 := adj_trans_le &
 [ STEM < "proud" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_proud_a_of_rel" ],
            PHON.ONSET con ] ].

prove_v1 := v_np*_trans_le &
 [ STEM < "prove" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_prove_v_1_rel",
            PHON.ONSET con ] ].

prove_v2 := v_cp_non_trans_le &
 [ STEM < "prove" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_prove_v_1_rel",
            PHON.ONSET con ] ].

prove_v3 := v_sor_le &
 [ STEM < "prove" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_prove_v_1_rel",
            PHON.ONSET con ] ].

prove_v4 := v_obj_equi_prd_le &
 [ STEM < "prove" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_prove_v_1_rel",
            PHON.ONSET con ] ].

prove_v5 := v_subj_equi_le &
 [ STEM < "prove" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_prove_v_1_rel",
            PHON.ONSET con ] ].

prove_v6 := v_subj_equi_prd_adj_le &
 [ STEM < "prove" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_prove_v_1_rel",
            PHON.ONSET con ] ].

proverb_n1 := n_intr_le &
 [ STEM < "proverb" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_proverb_n_1_rel",
            PHON.ONSET con ] ].

provide_v1 := v_np_trans_le &
 [ STEM < "provide" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_provide_v_1_rel",
            PHON.ONSET con ] ].

provide_v2 := v_ditrans_le &
 [ STEM < "provide" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_provide_v_1_rel",
            PHON.ONSET con ] ].

provide_with_v1 := v_np_prep_trans_le &
 [ STEM < "provide" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _with_p_rel,
                    KEYREL.PRED "_provide_v_1_rel" ],
            PHON.ONSET con ] ].

provided_subord := p_subconj_le &
 [ STEM < "provided" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_provided_x_rel",
            PHON.ONSET con ] ].

provided_that_subord := p_subconj_le &
 [ STEM < "provided", "that" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_provided_x_rel",
            PHON.ONSET con ] ].

provider_n1 := n_ppof_le &
 [ STEM < "provider" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_provider_n_of_rel",
            PHON.ONSET con ] ].

providing_subord := p_subconj_le &
 [ STEM < "providing" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_providing_x_rel",
            PHON.ONSET con ] ].

providing_that_subord := p_subconj_le &
 [ STEM < "providing", "that" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_providing_x_rel",
            PHON.ONSET con ] ].

province_n1 := n_intr_le &
 [ STEM < "province" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_province_n_1_rel",
            PHON.ONSET con ] ].

provision_n1 := n_mass_count_le &
 [ STEM < "provision" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_provision_n_1_rel",
            PHON.ONSET con ] ].

provision_with_v1 := v_np_prep_trans_le &
 [ STEM < "provision" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _with_p_rel,
                    KEYREL.PRED "_provision_v_1_rel" ],
            PHON.ONSET con ] ].

provoke_v1 := v_np_trans_le &
 [ STEM < "provoke" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_provoke_v_1_rel",
            PHON.ONSET con ] ].

proximity_n1 := n_mass_le &
 [ STEM < "proximity" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_proximity_n_1_rel",
            PHON.ONSET con ] ].

proxy_n1 := n_intr_le &
 [ STEM < "proxy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_proxy_n_1_rel",
            PHON.ONSET con ] ].

prudent_a1 := adj_intrans_le &
 [ STEM < "prudent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_prudent_a_1_rel",
            PHON.ONSET con ] ].

prudently_adv := adv_int_vp_le &
 [ STEM < "prudently" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_prudent_a_1_rel",
            PHON.ONSET con ] ].

prune_n1 := n_intr_le &
 [ STEM < "prune" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_prune_n_1_rel",
            PHON.ONSET con ] ].

prune_v1 := v_np_trans_le &
 [ STEM < "prune" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_prune_v_1_rel",
            PHON.ONSET con ] ].

pry_v1 := v_unerg_le &
 [ STEM < "pry" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pry_v_1_rel",
            PHON.ONSET con ] ].

ps_root_pre := adv_s_pre_word_root_le &
 [ STEM < "ps" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ps_a_1_rel",
            PHON.ONSET con ] ].

ps_root_pre_2 := adv_s_pre_word_root_le &
 [ STEM < "p.s" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ps_a_1_rel",
            PHON.ONSET con ] ].

ps_root_pre_5 := adv_s_pre_word_root_le &
 [ STEM < "p.", "s." >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ps_a_1_rel",
            PHON.ONSET con ] ].

ps_root_pre_6 := adv_s_pre_word_root_le &
 [ STEM < "p.s." >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ps_a_1_rel",
            PHON.ONSET con ] ].

psalm_n1 := n_intr_le &
 [ STEM < "psalm" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_psalm_n_1_rel",
            PHON.ONSET con ] ].

psalmody_n1 := n_mass_le &
 [ STEM < "psalmody" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_psalmody_n_1_rel",
            PHON.ONSET con ] ].

psyche_n1 := n_intr_le &
 [ STEM < "psyche" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_psyche_n_1_rel",
            PHON.ONSET con ] ].

psychical_a1 := adj_intrans_le &
 [ STEM < "psychical" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_psychical_a_1_rel",
            PHON.ONSET con ] ].

psychological_a1 := adj_intrans_le &
 [ STEM < "psychological" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_psychological_a_1_rel",
            PHON.ONSET con ] ].

psychology_n1 := n_mass_count_le &
 [ STEM < "psychology" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_psychology_n_1_rel",
            PHON.ONSET con ] ].

ptarmigan_n1 := n_mass_count_le &
 [ STEM < "ptarmigan" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ptarmigan_n_1_rel",
            PHON.ONSET con ] ].

pub_n1 := n_intr_le &
 [ STEM < "pub" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pub_n_1_rel",
            PHON.ONSET con ] ].

pubescence_n1 := n_mass_le &
 [ STEM < "pubescence" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pubescence_n_1_rel",
            PHON.ONSET con ] ].

public_a1 := adj_intrans_le &
 [ STEM < "public" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_public_a_1_rel",
            PHON.ONSET con ] ].

public_n1 := n_intr_le &
 [ STEM < "public" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_public_n_1_rel",
            PHON.ONSET con ] ].

publication_n1 := n_mass_count_le &
 [ STEM < "publication" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_publication_n_1_rel",
            PHON.ONSET con ] ].

publicity_n1 := n_mass_le &
 [ STEM < "publicity" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_publicity_n_1_rel",
            PHON.ONSET con ] ].

publicize_v1 := v_np_trans_le &
 [ STEM < "publicize" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_publicize_v_1_rel",
            PHON.ONSET con ] ].

publicly_isect := adv_int_vp_le &
 [ STEM < "publicly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_public_a_1_rel",
            PHON.ONSET con ] ].

publish_v1 := v_np_trans_le &
 [ STEM < "publish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_publish_v_1_rel",
            PHON.ONSET con ] ].

puck_n1 := n_intr_le &
 [ STEM < "puck" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_puck_n_1_rel",
            PHON.ONSET con ] ].

puck_n2 := n_proper_le &
 [ STEM < "puck" >,
   SYNSEM [ LKEYS.KEYREL.CARG "puck",
            PHON.ONSET con ] ].

pudding_n1 := n_mass_le &
 [ STEM < "pudding" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pudding_n_1_rel",
            PHON.ONSET con ] ].

puffin_n1 := n_intr_le &
 [ STEM < "puffin" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_puffin_n_1_rel",
            PHON.ONSET con ] ].

pull_back_v1 := v_particle_np_le &
 [ STEM < "pull" >,
   SYNSEM [ LKEYS [ --COMPKEY _back_p_sel_rel,
                    KEYREL.PRED "_pull_v_back_rel" ],
            PHON.ONSET con ] ].

pull_back_v2 := v_particle_le &
 [ STEM < "pull" >,
   SYNSEM [ LKEYS [ --COMPKEY _back_p_sel_rel,
                    KEYREL.PRED "_pull_v_back_rel" ],
            PHON.ONSET con ] ].

pull_down_v1 := v_particle_np_le &
 [ STEM < "pull" >,
   SYNSEM [ LKEYS [ --COMPKEY _down_p_sel_rel,
                    KEYREL.PRED "_pull_v_down_rel" ],
            PHON.ONSET con ] ].

pull_n1 := n_mass_count_le &
 [ STEM < "pull" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pull_n_1_rel",
            PHON.ONSET con ] ].

pull_off_v1 := v_particle_np_le &
 [ STEM < "pull" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_pull_v_off_rel" ],
            PHON.ONSET con ] ].

pull_out_v1 := v_particle_np_le &
 [ STEM < "pull" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_pull_v_out_rel" ],
            PHON.ONSET con ] ].

pull_out_v2 := v_particle_le &
 [ STEM < "pull" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_pull_v_out_rel" ],
            PHON.ONSET con ] ].

pull_up_v1 := v_particle_np_le &
 [ STEM < "pull" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_pull_v_up_rel" ],
            PHON.ONSET con ] ].

pull_up_v2 := v_particle_le &
 [ STEM < "pull" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_pull_v_up_rel" ],
            PHON.ONSET con ] ].

pull_v1 := v_np*_trans_le &
 [ STEM < "pull" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pull_v_1_rel",
            PHON.ONSET con ] ].

pull_v2 := v_np_prep_trans_dors_le &
 [ STEM < "pull" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pull_v_1_rel",
            PHON.ONSET con ] ].

pulley_n1 := n_intr_le &
 [ STEM < "pulley" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pulley_n_1_rel",
            PHON.ONSET con ] ].

pulpit_n1 := n_intr_le &
 [ STEM < "pulpit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pulpit_n_1_rel",
            PHON.ONSET con ] ].

pulpy_a1 := adj_intrans_le &
 [ STEM < "pulpy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pulpy_a_1_rel",
            PHON.ONSET con ] ].

pulse_n1 := n_intr_le &
 [ STEM < "pulse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pulse_n_1_rel",
            PHON.ONSET con ] ].

pulse_v1 := v_unerg_le &
 [ STEM < "pulse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pulse_v_1_rel",
            PHON.ONSET con ] ].

pulverize_v1 := v_np_trans_le &
 [ STEM < "pulverize" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pulverize_v_1_rel",
            PHON.ONSET con ] ].

pump_in_v1 := v_particle_np_le &
 [ STEM < "pump" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_pump_v_in_rel" ],
            PHON.ONSET con ] ].

pump_in_v2 := v_particle_le &
 [ STEM < "pump" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_pump_v_in_rel" ],
            PHON.ONSET con ] ].

pump_n1 := n_intr_le &
 [ STEM < "pump" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pump_n_1_rel",
            PHON.ONSET con ] ].

pump_out_v1 := v_particle_np_le &
 [ STEM < "pump" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_pump_v_out_rel" ],
            PHON.ONSET con ] ].

pump_out_v2 := v_particle_le &
 [ STEM < "pump" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_pump_v_out_rel" ],
            PHON.ONSET con ] ].

pump_up_v1 := v_particle_np_le &
 [ STEM < "pump" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_pump_v_up_rel" ],
            PHON.ONSET con ] ].

pump_up_v2 := v_particle_le &
 [ STEM < "pump" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_pump_v_up_rel" ],
            PHON.ONSET con ] ].

pump_v1 := v_np_trans_le &
 [ STEM < "pump" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pump_v_1_rel",
            PHON.ONSET con ] ].

pun_n1 := n_intr_le &
 [ STEM < "pun" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pun_n_1_rel",
            PHON.ONSET con ] ].

punch_n1 := n_mass_count_le &
 [ STEM < "punch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_punch_n_1_rel",
            PHON.ONSET con ] ].

punch_v1 := v_np*_trans_le &
 [ STEM < "punch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_punch_v_1_rel",
            PHON.ONSET con ] ].

punct_3dots_l := punct_3dots_left_le &
 [ STEM < "threedots" > ].

punct_3dots_l_2 := punct_3dots_left_le &
 [ STEM < "\"", "threedots" > ].

punct_3dots_r := punct_3dots_right_le &
 [ STEM < "threedots" > ].

punct_3dots_r_2 := punct_3dots_right_le &
 [ STEM < "threedots." > ].

punctilio_n1 := n_intr_le &
 [ STEM < "punctilio" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_punctilio_n_1_rel",
            PHON.ONSET con ] ].

punctual_a1 := adj_intrans_le &
 [ STEM < "punctual" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_punctual_a_1_rel",
            PHON.ONSET con ] ].

punctuality_n1 := n_mass_le &
 [ STEM < "punctuality" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_punctuality_n_1_rel",
            PHON.ONSET con ] ].

punctually_isect := adv_int_vp_le &
 [ STEM < "punctually" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_punctual_a_1_rel",
            PHON.ONSET con ] ].

punctuate_v1 := v_np*_trans_le &
 [ STEM < "punctuate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_punctuate_v_1_rel",
            PHON.ONSET con ] ].

punctuation_n1 := n_mass_le &
 [ STEM < "punctuation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_punctuation_n_1_rel",
            PHON.ONSET con ] ].

puncture_n1 := n_intr_le &
 [ STEM < "puncture" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_puncture_n_1_rel",
            PHON.ONSET con ] ].

puncture_v1 := v_np_trans_noger_le &
 [ STEM < "puncture" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_puncture_v_cause_rel",
            PHON.ONSET con ] ].

puncture_v2 := v_unacc_le &
 [ STEM < "puncture" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_puncture_v_1_rel",
            PHON.ONSET con ] ].

pungent_a1 := adj_intrans_le &
 [ STEM < "pungent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pungent_a_1_rel",
            PHON.ONSET con ] ].

punic_a1 := adj_intrans_le &
 [ STEM < "punic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_punic_a_1_rel",
            PHON.ONSET con ] ].

punish_v1 := v_np_trans_le &
 [ STEM < "punish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_punish_v_1_rel",
            PHON.ONSET con ] ].

punishment_n1 := n_mass_count_le &
 [ STEM < "punishment" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_punishment_n_1_rel",
            PHON.ONSET con ] ].

punt_n1 := n_intr_le &
 [ STEM < "punt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_punt_n_1_rel",
            PHON.ONSET con ] ].

punto_n1 := n_intr_le &
 [ STEM < "punto" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_punto_n_1_rel",
            PHON.ONSET con ] ].

puppet_n1 := n_intr_le &
 [ STEM < "puppet" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_puppet_n_1_rel",
            PHON.ONSET con ] ].

purchase_n1 := n_ppof_le &
 [ STEM < "purchase" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_purchase_n_of_rel",
            PHON.ONSET con ] ].

purchase_v1 := v_np_trans_le &
 [ STEM < "purchase" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_purchase_v_1_rel",
            PHON.ONSET con ] ].

pure_a1 := adj_intrans_le &
 [ STEM < "pure" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pure_a_1_rel",
            PHON.ONSET con ] ].

purely := adv_int_vp_le &
 [ STEM < "purely" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pure_a_1_rel",
            PHON.ONSET con ] ].

purge_n1 := n_intr_le &
 [ STEM < "purge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_purge_n_1_rel",
            PHON.ONSET con ] ].

purge_v1 := v_np_trans_le &
 [ STEM < "purge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_purge_v_1_rel",
            PHON.ONSET con ] ].

purge_v2 := v_empty_prep_trans_le &
 [ STEM < "purge" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_purge_v_of_rel" ],
            PHON.ONSET con ] ].

purify_v1 := v_np_trans_le &
 [ STEM < "purify" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_purify_v_1_rel",
            PHON.ONSET con ] ].

purity_n1 := n_mass_le &
 [ STEM < "purity" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_purity_n_1_rel",
            PHON.ONSET con ] ].

purple_adj := adj_intrans_le &
 [ STEM < "purple" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_purple_a_1_rel",
            PHON.ONSET con ] ].

purple_n1 := n_color_le &
 [ STEM < "purple" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_purple_n_1_rel",
            PHON.ONSET con ] ].

purport_n1 := n_mass_le &
 [ STEM < "purport" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_purport_n_1_rel",
            PHON.ONSET con ] ].

purport_v1 := v_subj_equi_le &
 [ STEM < "purport" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_purport_v_1_rel",
            PHON.ONSET con ] ].

purpose_n1 := n_intr_le &
 [ STEM < "purpose" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_purpose_n_1_rel",
            PHON.ONSET con ] ].

purposely_adv1 := adv_int_vp_le &
 [ STEM < "purposely" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_purposely_a_1_rel",
            PHON.ONSET con ] ].

purse_n1 := n_intr_le &
 [ STEM < "purse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_purse_n_1_rel",
            PHON.ONSET con ] ].

purse_v1 := v_np_trans_le &
 [ STEM < "purse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_purse_v_1_rel",
            PHON.ONSET con ] ].

pursue_v1 := v_np*_trans_le &
 [ STEM < "pursue" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pursue_v_1_rel",
            PHON.ONSET con ] ].

pursuit_n1 := n_mass_count_ppof_le &
 [ STEM < "pursuit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pursuit_n_of_rel",
            PHON.ONSET con ] ].

purulent_a1 := adj_intrans_le &
 [ STEM < "purulent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_purulent_a_1_rel",
            PHON.ONSET con ] ].

pus_n1 := n_mass_le &
 [ STEM < "pus" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pus_n_1_rel",
            PHON.ONSET con ] ].

push_forward_v1 := v_particle_np_le &
 [ STEM < "push" >,
   SYNSEM [ LKEYS [ --COMPKEY _forward_p_sel_rel,
                    KEYREL.PRED "_push_v_forward_rel" ],
            PHON.ONSET con ] ].

push_forward_v2 := v_particle_le &
 [ STEM < "push" >,
   SYNSEM [ LKEYS [ --COMPKEY _forward_p_sel_rel,
                    KEYREL.PRED "_push_v_forward_rel" ],
            PHON.ONSET con ] ].

push_in_v1 := v_particle_np_le &
 [ STEM < "push" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_push_v_in_rel" ],
            PHON.ONSET con ] ].

push_off_v1 := v_particle_np_le &
 [ STEM < "push" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_push_v_off_rel" ],
            PHON.ONSET con ] ].

push_off_v2 := v_np_prtcl_np_le &
 [ STEM < "push" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_push_v_off_rel" ],
            PHON.ONSET con ] ].

push_off_v3 := v_particle_le &
 [ STEM < "push" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_push_v_off_rel" ],
            PHON.ONSET con ] ].

push_up_v1 := v_particle_np_le &
 [ STEM < "push" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_push_v_up_rel" ],
            PHON.ONSET con ] ].

push_v1 := v_np*_trans_le &
 [ STEM < "push" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_push_v_1_rel",
            PHON.ONSET con ] ].

push_v2 := v_np_prep_trans_dors_le &
 [ STEM < "push" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_push_v_1_rel",
            PHON.ONSET con ] ].

put_by_v1 := v_particle_np_le &
 [ STEM < "put" >,
   SYNSEM [ LKEYS [ --COMPKEY _by_p_sel_rel,
                    KEYREL.PRED "_put_v_by_rel" ],
            PHON.ONSET con ] ].

put_down_v1 := v_particle_np_le &
 [ STEM < "put" >,
   SYNSEM [ LKEYS [ --COMPKEY _down_p_sel_rel,
                    KEYREL.PRED "_put_v_down_rel" ],
            PHON.ONSET con ] ].

put_in_v1 := v_particle_np_le &
 [ STEM < "put" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_put_v_in_rel" ],
            PHON.ONSET con ] ].

put_in_v2 := v_particle_le &
 [ STEM < "put" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_put_v_in_rel" ],
            PHON.ONSET con ] ].

put_off_v1 := v_particle_np_le &
 [ STEM < "put" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_put_v_off_rel" ],
            PHON.ONSET con ] ].

put_off_v2 := v_np_prtcl_np_le &
 [ STEM < "put" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_put_v_off_rel" ],
            PHON.ONSET con ] ].

put_on_v1 := v_particle_np_le &
 [ STEM < "put" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_put_v_on_rel" ],
            PHON.ONSET con ] ].

put_out_v1 := v_particle_np_le &
 [ STEM < "put" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_put_v_out_rel" ],
            PHON.ONSET con ] ].

put_out_v2 := v_particle_le &
 [ STEM < "put" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_put_v_out_rel" ],
            PHON.ONSET con ] ].

put_through_v1 := v_particle_np_pp_to_le &
 [ STEM < "put" >,
   SYNSEM [ LKEYS [ --COMPKEY _through_p_sel_rel,
                    KEYREL.PRED "_put_v_through_rel" ],
            PHON.ONSET con ] ].

put_through_v2 := v_particle_np_le &
 [ STEM < "put" >,
   SYNSEM [ LKEYS [ --COMPKEY _through_p_sel_rel,
                    KEYREL.PRED "_put_v_through_rel" ],
            PHON.ONSET con ] ].

put_together_v1 := v_particle_np_le &
 [ STEM < "put" >,
   SYNSEM [ LKEYS [ --COMPKEY _together_p_sel_rel,
                    KEYREL.PRED "_put_v_together_rel" ],
            PHON.ONSET con ] ].

put_up+with_v1 := v_particle_empty_pp_le &
 [ STEM < "put" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    --OCOMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_put_v_up-with_rel" ],
            PHON.ONSET con ] ].

put_up_v1 := v_particle_np_le &
 [ STEM < "put" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_put_v_up_rel" ],
            PHON.ONSET con ] ].

put_up_v2 := v_particle_le &
 [ STEM < "put" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_put_v_up_rel" ],
            PHON.ONSET con ] ].

put_v1 := v_np_prep_trans_dors_le &
 [ STEM < "put" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_put_v_1_rel",
            PHON.ONSET con ] ].

putis := n_proper_le &
 [ STEM < "putis" >,
   SYNSEM [ LKEYS.KEYREL.CARG "putis",
            PHON.ONSET con ] ].

putty_n1 := n_mass_count_le &
 [ STEM < "putty" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_putty_n_1_rel",
            PHON.ONSET con ] ].

puzzle_n1 := n_intr_le &
 [ STEM < "puzzle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_puzzle_n_1_rel",
            PHON.ONSET con ] ].

puzzle_out_v1 := v_particle_np_le &
 [ STEM < "puzzle" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_puzzle_v_out_rel" ],
            PHON.ONSET con ] ].

puzzle_out_v2 := v_particle_cp_le &
 [ STEM < "puzzle" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_puzzle_v_out_rel" ],
            PHON.ONSET con ] ].

puzzle_v1 := v_np_trans_le &
 [ STEM < "puzzle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_puzzle_v_1_rel",
            PHON.ONSET con ] ].

puzzle_v2 := v_expl_it_subj_np_cp_le &
 [ STEM < "puzzle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_puzzle_v_1_rel",
            PHON.ONSET con ] ].

pyramid_n1 := n_intr_le &
 [ STEM < "pyramid" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pyramid_n_1_rel",
            PHON.ONSET con ] ].

pyramidal_a1 := adj_intrans_le &
 [ STEM < "pyramidal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pyramidal_a_1_rel",
            PHON.ONSET con ] ].

pythagoras_n1 := n_proper_le &
 [ STEM < "pythagoras" >,
   SYNSEM [ LKEYS.KEYREL.CARG "pythagoras",
            PHON.ONSET con ] ].

pÃ¥_ski_nor_n := n_proper_le &
 [ STEM < "pÃ¥", "ski", "i", "fjellet" >,
   SYNSEM [ LKEYS.KEYREL.CARG "pÃ¥_ski_i_fjellet",
            PHON.ONSET con ] ].

pÃ¥l_n1 := n_proper_le &
 [ STEM < "pÃ¥l" >,
   SYNSEM [ LKEYS.KEYREL.CARG "pÃ¥l ",
            PHON.ONSET con ] ].

q_np1 := n_proper_le &
 [ STEM < "_q" >,
   SYNSEM [ LKEYS.KEYREL.CARG "q",
            PHON.ONSET con ] ].

q_period_np1 := n_proper_le &
 [ STEM < "q." >,
   SYNSEM [ LKEYS.KEYREL.CARG "q",
            PHON.ONSET con ] ].

q_period_np2 := n_proper_le &
 [ STEM < "_q." >,
   SYNSEM [ LKEYS.KEYREL.CARG "q",
            PHON.ONSET con ] ].

qatar_n1 := n_proper_le &
 [ STEM < "qatar" >,
   SYNSEM [ LKEYS.KEYREL.CARG "qatar",
            PHON.ONSET con ] ].

qianlong_n1 := n_proper_le &
 [ STEM < "qianlong" >,
   SYNSEM [ LKEYS.KEYREL.CARG "qianlong",
            PHON.ONSET con ] ].

qiao_fu_n1 := n_proper_le &
 [ STEM < "qiao", "fu" >,
   SYNSEM [ LKEYS.KEYREL.CARG "qiao_fu",
            PHON.ONSET con ] ].

qintex_group_n1 := n_proper_le &
 [ STEM < "qintex", "group" >,
   SYNSEM [ LKEYS.KEYREL.CARG "qintex_group",
            PHON.ONSET con ] ].

quadrangular_a1 := adj_intrans_le &
 [ STEM < "quadrangular" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_quadrangular_a_1_rel",
            PHON.ONSET con ] ].

quadrat_n1 := n_intr_le &
 [ STEM < "quadrat" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_quadrat_n_1_rel",
            PHON.ONSET con ] ].

quadrille_n1 := n_intr_le &
 [ STEM < "quadrille" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_quadrille_n_1_rel",
            PHON.ONSET con ] ].

quadruped_n1 := n_intr_le &
 [ STEM < "quadruped" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_quadruped_n_1_rel",
            PHON.ONSET con ] ].

quaint_a1 := adj_intrans_le &
 [ STEM < "quaint" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_quaint_a_1_rel",
            PHON.ONSET con ] ].

qualification_n1 := n_mass_count_le &
 [ STEM < "qualification" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_qualification_n_1_rel",
            PHON.ONSET con ] ].

qualify_v1 := v_empty_prep_intrans_le &
 [ STEM < "qualify" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_qualify_v_for_rel" ],
            PHON.ONSET con ] ].

qualify_v2 := v_unerg_le &
 [ STEM < "qualify" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_qualify_v_for_rel",
            PHON.ONSET con ] ].

qualify_v3 := v_empty_prep*_trans_le &
 [ STEM < "qualify" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_qualify_v_for_rel" ],
            PHON.ONSET con ] ].

qualitative_a1 := adj_intrans_le &
 [ STEM < "qualitative" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_qualitative_a_1_rel",
            PHON.ONSET con ] ].

qualitatively := adv_int_vp_le &
 [ STEM < "qualitatively" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_qualitative_a_1_rel",
            PHON.ONSET con ] ].

quality_n1 := n_intr_le &
 [ STEM < "quality" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_quality_n_1_rel",
            PHON.ONSET con ] ].

qualm_n1 := n_intr_le &
 [ STEM < "qualm" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_qualm_n_1_rel",
            PHON.ONSET con ] ].

quantifier_n1 := n_intr_le &
 [ STEM < "quantifier" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_quantifier_n_1_rel",
            PHON.ONSET con ] ].

quantify_v1 := v_np_trans_le &
 [ STEM < "quantify" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_quantify_v_1_rel",
            PHON.ONSET con ] ].

quantitative_a1 := adj_intrans_le &
 [ STEM < "quantitative" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_quantitative_a_1_rel",
            PHON.ONSET con ] ].

quantity_n1 := n_ppof_le &
 [ STEM < "quantity" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_quantity_n_of_rel",
            PHON.ONSET con ] ].

quarantine_n1 := n_mass_count_ppof_le &
 [ STEM < "quarantine" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_quarantine_n_of_rel",
            PHON.ONSET con ] ].

quarantine_v1 := v_np_trans_le &
 [ STEM < "quarantine" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_quarantine_v_1_rel",
            PHON.ONSET con ] ].

quarry_n1 := n_intr_le &
 [ STEM < "quarry" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_quarry_n_1_rel",
            PHON.ONSET con ] ].

quarry_v1 := v_particle_np_le &
 [ STEM < "quarry" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_quarry_v_along_rel" ],
            PHON.ONSET con ] ].

quarter_n1 := n_ppof_le &
 [ STEM < "quarter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_quarter_n_of_rel",
            PHON.ONSET con ] ].

quarter_n2 := adj_minute_preh_le &
 [ STEM < "quarter" >,
   SYNSEM [ LKEYS.KEYREL.CARG "15",
            PHON.ONSET con ] ].

quarter_n3 := n_temp_nd_le &
 [ STEM < "quarter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_quarter_n_temp_rel",
            PHON.ONSET con ] ].

quarterly_a1 := adj_intrans_le &
 [ STEM < "quarterly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_quarterly_a_1_rel",
            PHON.ONSET con ] ].

quarterly_adv1 := adv_int_vp_post_le &
 [ STEM < "quarterly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_quarterly_a_1_rel",
            PHON.ONSET con ] ].

quartet_n1 := n_ppof_le &
 [ STEM < "quartet" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_quartet_n_of_rel",
            PHON.ONSET con ] ].

quash_v1 := v_np_trans_le &
 [ STEM < "quash" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_quash_v_1_rel",
            PHON.ONSET con ] ].

quasi_adv1 := adv_vp_pre_le &
 [ STEM < "quasi" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_quasi_a_1_rel",
            PHON.ONSET con ] ].

quasi_adv2 := adv_s_pre_le &
 [ STEM < "quasi" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_quasi_a_1_rel",
            PHON.ONSET con ] ].

quaver_n1 := n_intr_le &
 [ STEM < "quaver" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_quaver_n_1_rel",
            PHON.ONSET con ] ].

quaver_v1 := v_unerg_le &
 [ STEM < "quaver" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_quaver_v_1_rel",
            PHON.ONSET con ] ].

quay_n1 := n_intr_le &
 [ STEM < "quay" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_quay_n_1_rel",
            PHON.ONSET con ] ].

queen_n1 := n_ppof_le &
 [ STEM < "queen" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_queen_n_of_rel",
            PHON.ONSET con ] ].

queen_ttl := n_title_le &
 [ STEM < "queen" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_queen_n_of_rel",
            PHON.ONSET con ] ].

quench_v1 := v_np_trans_le &
 [ STEM < "quench" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_quench_v_1_rel",
            PHON.ONSET con ] ].

query_n1 := n_intr_le &
 [ STEM < "query" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_query_n_1_rel",
            PHON.ONSET con ] ].

query_v1 := v_np_trans_le &
 [ STEM < "query" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_query_v_1_rel",
            PHON.ONSET con ] ].

query_v2 := v_cp_ques_fin_inf_non_trans_le &
 [ STEM < "query" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_query_v_1_rel",
            PHON.ONSET con ] ].

question_about_v1 := v_empty_prep_trans_le &
 [ STEM < "question" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _about_p_sel_rel,
                    KEYREL.PRED "_question_v_about_rel" ],
            PHON.ONSET con ] ].

question_i_n1 := n_bare_nomod_le &
 [ STEM < "question" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_question_n_about_rel",
            PHON.ONSET con ] ].

question_n1 := n_ppcomp_le &
 [ STEM < "question" >,
   SYNSEM [ LKEYS [ --COMPKEY _about_p_sel_rel,
                    KEYREL.PRED "_question_n_about_rel" ],
            PHON.ONSET con ] ].

question_v1 := v_np_trans_le &
 [ STEM < "question" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_question_v_1_rel",
            PHON.ONSET con ] ].

question_v2 := v_cp_ques_fin_inf_non_trans_le &
 [ STEM < "question" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_question_v_1_rel",
            PHON.ONSET con ] ].

questionable_a1 := adj_intrans_le &
 [ STEM < "questionable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_questionable_a_1_rel",
            PHON.ONSET con ] ].

questionnaire_n1 := n_intr_le &
 [ STEM < "questionnaire" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_questionnaire_n_1_rel",
            PHON.ONSET con ] ].

quetzalcoatl_n1 := n_proper_le &
 [ STEM < "quetzalcoatl" >,
   SYNSEM [ LKEYS.KEYREL.CARG "quetzalcoatl",
            PHON.ONSET con ] ].

queue_n1 := n_intr_le &
 [ STEM < "queue" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_queue_n_1_rel",
            PHON.ONSET con ] ].

queue_up_v1 := v_particle_le &
 [ STEM < "queue" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_queue_v_up_rel" ],
            PHON.ONSET con ] ].

queue_up_v2 := v_particle_np_le &
 [ STEM < "queue" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_queue_v_up_rel" ],
            PHON.ONSET con ] ].

queue_v1 := v_np_trans_le &
 [ STEM < "queue" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_queue_v_1_rel",
            PHON.ONSET con ] ].

quick_a1 := adj_intrans_le &
 [ STEM < "quick" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_quick_a_1_rel",
            PHON.ONSET con ] ].

quick_adv1 := adv_int_vp_le &
 [ STEM < "quick" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_quick_a_1_rel",
            PHON.ONSET con ] ].

quick_n1 := n_mass_le &
 [ STEM < "quick" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_quick_n_1_rel",
            PHON.ONSET con ] ].

quicken_v1 := v_np*_trans_le &
 [ STEM < "quicken" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_quicken_v_1_rel",
            PHON.ONSET con ] ].

quicker_a1 := adj_comp_le &
 [ STEM < "quicker" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_quick_a_1_rel",
            PHON.ONSET con ] ].

quicker_adv1 := adv_int_vp_post_le &
 [ STEM < "quicker" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_quicker_a_1_rel",
            PHON.ONSET con ] ].

quickest_a1 := adj_superl_le &
 [ STEM < "quickest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_quick_a_1_rel",
            PHON.ONSET con ] ].

quickly_adv1 := adv_int_vp_le &
 [ STEM < "quickly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_quick_a_1_rel",
            PHON.ONSET con ] ].

quicknet_n1 := n_proper_le &
 [ STEM < "quicknet" >,
   SYNSEM [ LKEYS.KEYREL.CARG "quicknet",
            PHON.ONSET con ] ].

quiet_a1 := adj_intrans_le &
 [ STEM < "quiet" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_quiet_a_1_rel",
            PHON.ONSET con ] ].

quiet_n1 := n_mass_le &
 [ STEM < "quiet" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_quiet_n_1_rel",
            PHON.ONSET con ] ].

quiet_v1 := v_unerg_le &
 [ STEM < "quiet" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_quiet_v_1_rel",
            PHON.ONSET con ] ].

quiet_v2 := v_np_trans_le &
 [ STEM < "quiet" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_quiet_v_cause_rel",
            PHON.ONSET con ] ].

quieter_a1 := adj_comp_le &
 [ STEM < "quieter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_quiet_a_1_rel",
            PHON.ONSET con ] ].

quietest_a1 := adj_superl_le &
 [ STEM < "quietest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_quiet_a_1_rel",
            PHON.ONSET con ] ].

quietly := adv_int_vp_le &
 [ STEM < "quietly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_quiet_a_1_rel",
            PHON.ONSET con ] ].

quill_n1 := n_intr_le &
 [ STEM < "quill" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_quill_n_1_rel",
            PHON.ONSET con ] ].

quilt_v1 := v_np*_trans_le &
 [ STEM < "quilt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_quilt_v_1_rel",
            PHON.ONSET con ] ].

quit-prd := v_ssr_prp_le &
 [ STEM < "quit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_quit_v_prd_rel",
            PHON.ONSET con ] ].

quit_v1 := v_np*_trans_le &
 [ STEM < "quit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_quit_v_1_rel",
            PHON.ONSET con ] ].

quite_deg := adv_degree_spec_jov_le &
 [ STEM < "quite" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_quite_x_rel",
            PHON.ONSET con ] ].

quits_n1_i := n_intr_nospr_le &
 [ STEM < "quits" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_quits_n_i_rel",
            PHON.ONSET con ] ].

quiver_n1 := n_intr_le &
 [ STEM < "quiver" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_quiver_n_1_rel",
            PHON.ONSET con ] ].

quiver_v1 := v_unerg_le &
 [ STEM < "quiver" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_quiver_v_1_rel",
            PHON.ONSET con ] ].

quoit_n1 := n_intr_le &
 [ STEM < "quoit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_quoit_n_1_rel",
            PHON.ONSET con ] ].

quorum_n1 := n_intr_le &
 [ STEM < "quorum" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_quorum_n_1_rel",
            PHON.ONSET con ] ].

quota_n1 := n_intr_le &
 [ STEM < "quota" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_quota_n_1_rel",
            PHON.ONSET con ] ].

quote_n1 := n_intr_le &
 [ STEM < "quote" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_quote_n_1_rel",
            PHON.ONSET con ] ].

quote_v1 := v_np*_trans_le &
 [ STEM < "quote" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_quote_v_1_rel",
            PHON.ONSET con ] ].

r_np1 := n_proper_le &
 [ STEM < "_r" >,
   SYNSEM [ LKEYS.KEYREL.CARG "r",
            PHON.ONSET voc ] ].

r_period_np1 := n_proper_le &
 [ STEM < "r." >,
   SYNSEM [ LKEYS.KEYREL.CARG "r",
            PHON.ONSET voc ] ].

r_period_np2 := n_proper_le &
 [ STEM < "_r." >,
   SYNSEM [ LKEYS.KEYREL.CARG "r",
            PHON.ONSET voc ] ].

rabbit_n1 := n_intr_le &
 [ STEM < "rabbit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rabbit_n_1_rel",
            PHON.ONSET con ] ].

rabid_a1 := adj_intrans_le &
 [ STEM < "rabid" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rabid_a_1_rel",
            PHON.ONSET con ] ].

race_n1 := n_ppof_le &
 [ STEM < "race" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_race_n_of_rel",
            PHON.ONSET con ] ].

race_v1 := v_np*_trans_le &
 [ STEM < "race" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_race_v_1_rel",
            PHON.ONSET con ] ].

rachis_n1 := n_intr_le &
 [ STEM < "rachis" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rachis_n_1_rel",
            PHON.ONSET con ] ].

rack_n1 := n_ppof_le &
 [ STEM < "rack" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rack_n_of_rel",
            PHON.ONSET con ] ].

racket_n1 := n_mass_count_le &
 [ STEM < "racket" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_racket_n_1_rel",
            PHON.ONSET con ] ].

radar_n1 := n_mass_le &
 [ STEM < "radar" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_radar_n_1_rel",
            PHON.ONSET con ] ].

radeberg_n1 := n_proper_city_le &
 [ STEM < "radeberg" >,
   SYNSEM [ LKEYS.KEYREL.CARG "radeberg",
            PHON.ONSET con ] ].

radiance_n1 := n_mass_le &
 [ STEM < "radiance" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_radiance_n_1_rel",
            PHON.ONSET con ] ].

radiate_a1 := adj_intrans_le &
 [ STEM < "radiate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_radiate_a_1_rel",
            PHON.ONSET con ] ].

radiate_v1 := v_np*_trans_le &
 [ STEM < "radiate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_radiate_v_1_rel",
            PHON.ONSET con ] ].

radical_a1 := adj_intrans_le &
 [ STEM < "radical" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_radical_a_1_rel",
            PHON.ONSET con ] ].

radio_n1 := n_intr_le &
 [ STEM < "radio" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_radio_n_1_rel",
            PHON.ONSET con ] ].

radisson_n1 := n_proper_le &
 [ STEM < "radisson" >,
   SYNSEM [ LKEYS.KEYREL.CARG "radisson",
            PHON.ONSET con ] ].

radius_n1 := n_intr_le &
 [ STEM < "radius" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_radius_n_1_rel",
            PHON.ONSET con ] ].

raft_n1 := n_intr_le &
 [ STEM < "raft" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_raft_n_1_rel",
            PHON.ONSET con ] ].

raft_v1 := v_prep_dir_le &
 [ STEM < "raft" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_raft_v_1_rel",
            PHON.ONSET con ] ].

rage_n1 := n_mass_count_le &
 [ STEM < "rage" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rage_n_1_rel",
            PHON.ONSET con ] ].

rage_v1 := v_prep*_intrans_le &
 [ STEM < "rage" >,
   SYNSEM [ LKEYS [ --COMPKEY _against_p_rel,
                    KEYREL.PRED "_rage_v_1_rel" ],
            PHON.ONSET con ] ].

rage_v2 := v_prep_intrans_le &
 [ STEM < "rage" >,
   SYNSEM [ LKEYS [ --COMPKEY _at_p_rel,
                    KEYREL.PRED "_rage_v_1_rel" ],
            PHON.ONSET con ] ].

ragnhhild_n1 := n_proper_le &
 [ STEM < "ragnhhild" >,
   SYNSEM [ LKEYS.KEYREL.CARG "ragnhhild",
            PHON.ONSET con ] ].

ragnhild_n1 := n_proper_le &
 [ STEM < "ragnhild" >,
   SYNSEM [ LKEYS.KEYREL.CARG "ragnhild",
            PHON.ONSET con ] ].

rail_n1 := n_intr_le &
 [ STEM < "rail" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rail_n_1_rel",
            PHON.ONSET con ] ].

railroad_n1 := n_intr_le &
 [ STEM < "railroad" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_railroad_n_1_rel",
            PHON.ONSET con ] ].

railway_n1 := n_intr_le &
 [ STEM < "railway" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_railway_n_1_rel",
            PHON.ONSET con ] ].

rain_n1 := n_mass_le &
 [ STEM < "rain" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rain_n_1_rel",
            PHON.ONSET con ] ].

rain_v1 := v_atrans_le &
 [ STEM < "rain" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rain_v_1_rel",
            PHON.ONSET con ] ].

rainbow_n1 := n_intr_le &
 [ STEM < "rainbow" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rainbow_n_1_rel",
            PHON.ONSET con ] ].

rainclothes_n1 := n_plur_nocmpnd_le &
 [ STEM < "rainclothe" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rainclothes_n_1_rel",
            PHON.ONSET con ] ].

rainfall_n1 := n_mass_le &
 [ STEM < "rainfall" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rainfall_n_1_rel",
            PHON.ONSET con ] ].

raingear_n1 := n_mass_le &
 [ STEM < "raingear" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_raingear_n_1_rel",
            PHON.ONSET con ] ].

rainier_a1 := adj_comp_le &
 [ STEM < "rainier" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rainy_a_1_rel",
            PHON.ONSET con ] ].

rainier_a2 := adj_atrans_comp_le &
 [ STEM < "rainier" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rainy_a_1_rel",
            PHON.ONSET con ] ].

rainiest_a1 := adj_superl_le &
 [ STEM < "rainiest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rainy_a_1_rel",
            PHON.ONSET con ] ].

rainiest_a2 := adj_atrans_superl_le &
 [ STEM < "rainiest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rainy_a_1_rel",
            PHON.ONSET con ] ].

rainwear_n1 := n_plur_le &
 [ STEM < "rainwear" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rainwear_n_1_rel",
            PHON.ONSET con ] ].

rainy_a1 := adj_intrans_le &
 [ STEM < "rainy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rainy_a_1_rel",
            PHON.ONSET con ] ].

rainy_a2 := adj_atrans_le &
 [ STEM < "rainy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rainy_a_1_rel",
            PHON.ONSET con ] ].

raise_n1 := n_intr_le &
 [ STEM < "raise" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_raise_n_1_rel",
            PHON.ONSET con ] ].

raise_v1 := v_np_trans_le &
 [ STEM < "raise" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_raise_v_1_rel",
            PHON.ONSET con ] ].

raisin_n1 := n_intr_le &
 [ STEM < "raisin" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_raisin_n_1_rel",
            PHON.ONSET con ] ].

rake_n1 := n_intr_le &
 [ STEM < "rake" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rake_n_1_rel",
            PHON.ONSET con ] ].

rake_v1 := v_np*_trans_le &
 [ STEM < "rake" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rake_v_1_rel",
            PHON.ONSET con ] ].

rallarveg := n_proper_le &
 [ STEM < "rallarveg" >,
   SYNSEM [ LKEYS.KEYREL.CARG "rallarveg",
            PHON.ONSET con ] ].

rallarvegen := n_proper_le &
 [ STEM < "rallarvegen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "rallarvegen",
            PHON.ONSET con ] ].

rally_n1 := n_intr_le &
 [ STEM < "rally" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rally_n_1_rel",
            PHON.ONSET con ] ].

rally_v1 := v_np*_trans_le &
 [ STEM < "rally" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rally_v_1_rel",
            PHON.ONSET con ] ].

ram_n1 := n_mass_count_le &
 [ STEM < "ram" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ram_n_1_rel",
            PHON.ONSET con ] ].

ram_v1 := v_np_trans_le &
 [ STEM < "ram" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ram_v_1_rel",
            PHON.ONSET con ] ].

ram_v2 := v_np_prep_trans_dors_le &
 [ STEM < "ram" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ram_v_1_rel",
            PHON.ONSET con ] ].

ramble_n1 := n_intr_le &
 [ STEM < "ramble" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ramble_n_1_rel",
            PHON.ONSET con ] ].

ramble_v1 := v_prep_dir_le &
 [ STEM < "ramble" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ramble_v_1_rel",
            PHON.ONSET con ] ].

rambler_n1 := n_intr_le &
 [ STEM < "rambler" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rambler_n_1_rel",
            PHON.ONSET con ] ].

rambunctious_a1 := adj_intrans_le &
 [ STEM < "rambunctious" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rambunctious_a_1_rel",
            PHON.ONSET con ] ].

ramification_n1 := n_mass_count_le &
 [ STEM < "ramification" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ramification_n_1_rel",
            PHON.ONSET con ] ].

ramify_v1 := v_unerg_le &
 [ STEM < "ramify" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ramify_v_1_rel",
            PHON.ONSET con ] ].

ramify_v2 := v_np_trans_le &
 [ STEM < "ramify" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ramify_v_cause_rel",
            PHON.ONSET con ] ].

ramoen_n1 := n_proper_city_le &
 [ STEM < "ramoen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "ramoen",
            PHON.ONSET con ] ].

ramp_n1 := n_intr_le &
 [ STEM < "ramp" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ramp_n_1_rel",
            PHON.ONSET con ] ].

ramp_up_v1 := v_particle_np_le &
 [ STEM < "ramp" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_ramp_v_up_rel" ],
            PHON.ONSET con ] ].

ramp_up_v2 := v_particle_le &
 [ STEM < "ramp" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_ramp_v_up_rel" ],
            PHON.ONSET con ] ].

rampart_v1 := v_unerg_le &
 [ STEM < "rampart" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rampart_v_1_rel",
            PHON.ONSET con ] ].

ramshackle_a1 := adj_attr_intrans_le &
 [ STEM < "ramshackle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ramshackle_a_1_rel",
            PHON.ONSET con ] ].

randolph_n1 := n_proper_le &
 [ STEM < "randolph" >,
   SYNSEM [ LKEYS.KEYREL.CARG "randolph",
            PHON.ONSET con ] ].

random_isect := adj_intrans_le &
 [ STEM < "random" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_random_a_1_rel",
            PHON.ONSET con ] ].

randomize_v1 := v_np*_trans_le &
 [ STEM < "randomize" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_randomize_v_1_rel",
            PHON.ONSET con ] ].

randomly_isect := adv_int_vp_le &
 [ STEM < "randomly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_random_a_1_rel",
            PHON.ONSET con ] ].

range_n1 := n_mass_count_ppof_le &
 [ STEM < "range" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_range_n_of_rel",
            PHON.ONSET con ] ].

range_v1 := v_double_pp_le &
 [ STEM < "range" >,
   SYNSEM [ LKEYS [ --COMPKEY _from_p_rel,
                    --OCOMPKEY _to_p_rel,
                    KEYREL.PRED "_range_v_1_rel" ],
            PHON.ONSET con ] ].

range_v2 := v_unerg_le &
 [ STEM < "range" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_range_v_1_rel",
            PHON.ONSET con ] ].

rangeersatz := adj_bare_unspecified_ord_one_le &
 [ STEM < "rangeersatz" >,
   SYNSEM [ LKEYS.KEYREL [ CARG "rangeersatz",
                             PRED const_rel ],
            PHON.ONSET onset ] ].

rangeersatz_2 := adj_bare_unspecified_card_one_le &
 [ STEM < "rangeersatz" >,
   SYNSEM [ LKEYS.KEYREL [ CARG "rangeersatz",
                             PRED const_rel ],
            PHON.ONSET onset ] ].

rank_as_v1 := v_empty_prep_intrans_le &
 [ STEM < "rank" >,
   SYNSEM [ LKEYS [ --COMPKEY _as_p_sel_rel,
                    KEYREL.PRED "_rank_v_as_rel" ],
            PHON.ONSET con ] ].

rank_n1 := n_mass_count_le &
 [ STEM < "rank" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rank_n_1_rel",
            PHON.ONSET con ] ].

rank_v1 := v_np_trans_le &
 [ STEM < "rank" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rank_v_1_rel",
            PHON.ONSET con ] ].

rap_n1 := n_mass_count_le &
 [ STEM < "rap" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rap_n_1_rel",
            PHON.ONSET con ] ].

rap_v1 := v_np*_trans_le &
 [ STEM < "rap" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rap_v_1_rel",
            PHON.ONSET con ] ].

rape_n1 := n_mass_count_le &
 [ STEM < "rape" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rape_n_1_rel",
            PHON.ONSET con ] ].

rape_v1 := v_np*_trans_le &
 [ STEM < "rape" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rape_v_1_rel",
            PHON.ONSET con ] ].

rapid_a1 := adj_intrans_le &
 [ STEM < "rapid" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rapid_a_1_rel",
            PHON.ONSET con ] ].

rapidly := adv_int_vp_le &
 [ STEM < "rapidly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rapid_a_1_rel",
            PHON.ONSET con ] ].

rapids_n1 := n_plur_le &
 [ STEM < "rapid" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rapids_n_1_rel",
            PHON.ONSET con ] ].

rappel_v1 := v_prep_dir_le &
 [ STEM < "rappel" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rappel_v_1_rel",
            PHON.ONSET con ] ].

rapturous_a1 := adj_intrans_le &
 [ STEM < "rapturous" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rapturous_a_1_rel",
            PHON.ONSET con ] ].

rare_a1 := adj_intrans_le &
 [ STEM < "rare" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rare_a_1_rel",
            PHON.ONSET con ] ].

rarely_adv1 := adv_int_vp_le &
 [ STEM < "rarely" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rare_a_1_rel",
            PHON.ONSET con ] ].

rascal_n1 := n_intr_le &
 [ STEM < "rascal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rascal_n_1_rel",
            PHON.ONSET con ] ].

rash_a1 := adj_intrans_le &
 [ STEM < "rash" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rash_a_1_rel",
            PHON.ONSET con ] ].

rasmus_n1 := n_proper_le &
 [ STEM < "rasmus" >,
   SYNSEM [ LKEYS.KEYREL.CARG "rasmus",
            PHON.ONSET con ] ].

raspberry_n1 := n_intr_le &
 [ STEM < "raspberry" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_raspberry_n_1_rel",
            PHON.ONSET con ] ].

rat_n1 := n_intr_le &
 [ STEM < "rat" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rat_n_1_rel",
            PHON.ONSET con ] ].

rate_as_v1 := v_empty_prep_intrans_le &
 [ STEM < "rate" >,
   SYNSEM [ LKEYS [ --COMPKEY _as_p_sel_rel,
                    KEYREL.PRED "_rate_v_as_rel" ],
            PHON.ONSET con ] ].

rate_n1 := n_ppof_le &
 [ STEM < "rate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rate_n_of_rel",
            PHON.ONSET con ] ].

rate_v1 := v_np_trans_le &
 [ STEM < "rate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rate_v_1_rel",
            PHON.ONSET con ] ].

rate_v2 := v_prd_ssr_adj_le &
 [ STEM < "rate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rate_v_1_rel",
            PHON.ONSET con ] ].

rate_v3 := v_obj_equi_prd_adj_le &
 [ STEM < "rate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rate_v_1_rel",
            PHON.ONSET con ] ].

rathbone_n1 := n_proper_le &
 [ STEM < "rathbone" >,
   SYNSEM [ LKEYS.KEYREL.CARG "rathbone",
            PHON.ONSET con ] ].

rather_adv1 := adv_rather_le &
 [ STEM < "rather" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rather_a_1_rel",
            PHON.ONSET con ] ].

rather_deg := adv_degree_spec_v_le &
 [ STEM < "rather" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rather_x_rel",
            PHON.ONSET con ] ].

rather_than_conj := conj_complex_rather_le &
 [ STEM < "rather", "than" >,
   SYNSEM.PHON.ONSET con ].

ratification_n1 := n_mass_count_ppof_le &
 [ STEM < "ratification" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ratification_n_of_rel",
            PHON.ONSET con ] ].

ratify_v1 := v_np_trans_le &
 [ STEM < "ratify" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ratify_v_1_rel",
            PHON.ONSET con ] ].

rating_n1 := n_mass_count_le &
 [ STEM < "rating" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rating_n_1_rel",
            PHON.ONSET con ] ].

ratio_n1 := n_ppof_le &
 [ STEM < "ratio" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ratio_n_of_rel",
            PHON.ONSET con ] ].

ration_n1 := n_intr_le &
 [ STEM < "ration" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ration_n_1_rel",
            PHON.ONSET con ] ].

ration_out_v1 := v_particle_np_le &
 [ STEM < "ration" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_ration_v_out_rel" ],
            PHON.ONSET con ] ].

ration_v1 := v_np_trans_le &
 [ STEM < "ration" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ration_v_1_rel",
            PHON.ONSET con ] ].

rational_a1 := adj_intrans_le &
 [ STEM < "rational" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rational_a_1_rel",
            PHON.ONSET con ] ].

rattle_n1 := n_intr_le &
 [ STEM < "rattle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rattle_n_1_rel",
            PHON.ONSET con ] ].

rattle_v1 := v_unacc_le &
 [ STEM < "rattle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rattle_v_1_rel",
            PHON.ONSET con ] ].

rattle_v2 := v_np_trans_noger_le &
 [ STEM < "rattle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rattle_v_cause_rel",
            PHON.ONSET con ] ].

raubergstulen_n1 := n_proper_le &
 [ STEM < "raubergstulen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "raubergstulen",
            PHON.ONSET con ] ].

raudalen := n_proper_le &
 [ STEM < "raudalen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "raudalen",
            PHON.ONSET con ] ].

raudalsbandet_n1 := n_proper_le &
 [ STEM < "raudalsbandet" >,
   SYNSEM [ LKEYS.KEYREL.CARG "raudalsbandet",
            PHON.ONSET con ] ].

raudalsegga := n_proper_le &
 [ STEM < "raudalsegga" >,
   SYNSEM [ LKEYS.KEYREL.CARG "raudalsegga",
            PHON.ONSET con ] ].

raudalseggi_n1 := n_proper_le &
 [ STEM < "raudalseggi" >,
   SYNSEM [ LKEYS.KEYREL.CARG "raudalseggi",
            PHON.ONSET con ] ].

raudalstind_n1 := n_proper_le &
 [ STEM < "raudalstind" >,
   SYNSEM [ LKEYS.KEYREL.CARG "raudalstind",
            PHON.ONSET con ] ].

raudalstindan_n1 := n_proper_le &
 [ STEM < "raudalstindan" >,
   SYNSEM [ LKEYS.KEYREL.CARG "raudalstindan",
            PHON.ONSET con ] ].

raudalstindane := n_proper_pl_le &
 [ STEM < "raudalstindane" >,
   SYNSEM [ LKEYS.KEYREL.CARG "raudalstindane",
            PHON.ONSET con ] ].

raudalstindar_n1 := n_proper_le &
 [ STEM < "raudalstindar" >,
   SYNSEM [ LKEYS.KEYREL.CARG "raudalstindar",
            PHON.ONSET con ] ].

raudalsvatnet := n_proper_le &
 [ STEM < "raudalsvatnet" >,
   SYNSEM [ LKEYS.KEYREL.CARG "raudalsvatnet",
            PHON.ONSET con ] ].

raudfjorden_n1 := n_proper_le &
 [ STEM < "raudfjorden" >,
   SYNSEM [ LKEYS.KEYREL.CARG "raudfjorden",
            PHON.ONSET con ] ].

raufjorden_n1 := n_proper_le &
 [ STEM < "raufjorden" >,
   SYNSEM [ LKEYS.KEYREL.CARG "raufjorden",
            PHON.ONSET con ] ].

rauhamrane_n1 := n_proper_le &
 [ STEM < "rauhamrane" >,
   SYNSEM [ LKEYS.KEYREL.CARG "rauhamrane",
            PHON.ONSET con ] ].

raunchy_a1 := adj_intrans_le &
 [ STEM < "raunchy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_raunchy_a_1_rel",
            PHON.ONSET con ] ].

rausdalen := n_proper_le &
 [ STEM < "rausdalen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "rausdalen",
            PHON.ONSET con ] ].

rave_n1 := n_intr_le &
 [ STEM < "rave" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rave_n_1_rel",
            PHON.ONSET con ] ].

rave_on_v1 := v_particle_le &
 [ STEM < "rave" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_rave_v_on_rel" ],
            PHON.ONSET con ] ].

rave_on_v2 := v_particle_pp_le &
 [ STEM < "rave" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    --OCOMPKEY _about_p_rel,
                    KEYREL.PRED "_rave_v_on_rel" ],
            PHON.ONSET con ] ].

rave_v1 := v_prep*_intrans_le &
 [ STEM < "rave" >,
   SYNSEM [ LKEYS [ --COMPKEY _about_p_rel,
                    KEYREL.PRED "_rave_v_1_rel" ],
            PHON.ONSET con ] ].

raven_n1 := n_intr_le &
 [ STEM < "raven" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_raven_n_1_rel",
            PHON.ONSET con ] ].

ravine_n1 := n_intr_le &
 [ STEM < "ravine" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ravine_n_1_rel",
            PHON.ONSET con ] ].

ravish_v1 := v_np_trans_le &
 [ STEM < "ravish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ravish_v_1_rel",
            PHON.ONSET con ] ].

raw_a1 := adj_intrans_le &
 [ STEM < "raw" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_raw_a_1_rel",
            PHON.ONSET con ] ].

ray_n1 := n_proper_le &
 [ STEM < "ray" >,
   SYNSEM [ LKEYS.KEYREL.CARG "ray",
            PHON.ONSET con ] ].

ray_n2 := n_intr_le &
 [ STEM < "ray" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ray_n_1_rel",
            PHON.ONSET con ] ].

raze_v1 := v_np_trans_le &
 [ STEM < "raze" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_raze_v_1_rel",
            PHON.ONSET con ] ].

razor_n1 := n_intr_le &
 [ STEM < "razor" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_razor_n_1_rel",
            PHON.ONSET con ] ].

razorback_a1 := adj_intrans_le &
 [ STEM < "razorback" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_razorback_a_1_rel",
            PHON.ONSET con ] ].

rca_n1 := n_proper_le &
 [ STEM < "rca" >,
   SYNSEM [ LKEYS.KEYREL.CARG "rca",
            PHON.ONSET con ] ].

re-unify_v1 := v_np*_trans_le &
 [ STEM < "re", "unify" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reunify_v_1_rel",
            PHON.ONSET con ] ].

re_elect_v1 := v_np_trans_le &
 [ STEM < "re-", "elect" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reelect_v_1_rel",
            PHON.ONSET con ] ].

re_elect_v2 := v_np_trans_le &
 [ STEM < "reelect" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reelect_v_1_rel",
            PHON.ONSET con ] ].

re_subject_n1 := n_proper_le &
 [ STEM < "re" >,
   SYNSEM [ LKEYS.KEYREL.CARG "_re_n_subject_rel",
            PHON.ONSET con ] ].

reach_n1 := n_intr_le &
 [ STEM < "reach" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reach_n_1_rel",
            PHON.ONSET con ] ].

reach_n2 := n_bare_jmod_opt_le &
 [ STEM < "reach" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reach_n_1_rel",
            PHON.ONSET con ] ].

reach_out_v1 := v_particle_le &
 [ STEM < "reach" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_reach_v_out_rel" ],
            PHON.ONSET con ] ].

reach_v1 := v_np*_trans_le &
 [ STEM < "reach" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reach_v_1_rel",
            PHON.ONSET con ] ].

reachable_a1 := adj_intrans_le &
 [ STEM < "reachable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reachable_a_1_rel",
            PHON.ONSET con ] ].

react_against_v1 := v_empty_prep_intrans_le &
 [ STEM < "react" >,
   SYNSEM [ LKEYS [ --COMPKEY _against_p_sel_rel,
                    KEYREL.PRED "_react_v_against_rel" ],
            PHON.ONSET con ] ].

react_to_v1 := v_empty_prep_intrans_le &
 [ STEM < "react" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_react_v_to_rel" ],
            PHON.ONSET con ] ].

react_v1 := v_unerg_le &
 [ STEM < "react" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_react_v_1_rel",
            PHON.ONSET con ] ].

reaction_n1 := n_mass_count_le &
 [ STEM < "reaction" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reaction_n_1_rel",
            PHON.ONSET con ] ].

read_in_v1 := v_particle_np_le &
 [ STEM < "read" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_read_v_in_rel" ],
            PHON.ONSET con ] ].

read_off_v1 := v_particle_np_le &
 [ STEM < "read" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_read_v_off_rel" ],
            PHON.ONSET con ] ].

read_out_v1 := v_particle_np_le &
 [ STEM < "read" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_read_v_out_rel" ],
            PHON.ONSET con ] ].

read_quote_v1 := v_quote_top_le &
 [ STEM < "read" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_read_v_1_rel",
            PHON.ONSET con ] ].

read_quote_v2 := v_quote_inv_le &
 [ STEM < "read" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_read_v_1_rel",
            PHON.ONSET con ] ].

read_quote_v3 := v_quote_mc_le &
 [ STEM < "read" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_read_v_1_rel",
            PHON.ONSET con ] ].

read_v1 := v_np*_trans_le &
 [ STEM < "read" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_read_v_1_rel",
            PHON.ONSET con ] ].

read_v2 := v_cp_non_trans_le &
 [ STEM < "read" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_read_v_1_rel",
            PHON.ONSET con ] ].

read_write_a1 := adj_intrans_le &
 [ STEM < "read", "write" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_read+write_a_1_rel",
            PHON.ONSET con ] ].

reader_n1 := n_ppof_le &
 [ STEM < "reader" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reader_n_of_rel",
            PHON.ONSET con ] ].

readily := adv_int_vp_le &
 [ STEM < "readily" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ready_a_1_rel",
            PHON.ONSET con ] ].

reading_n1 := n_ppof_le &
 [ STEM < "reading" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reading_n_of_rel",
            PHON.ONSET con ] ].

readjust_to_v1 := v_prep_intrans_le &
 [ STEM < "readjust" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_rel,
                    KEYREL.PRED "_readjust_v_1_rel" ],
            PHON.ONSET con ] ].

readjust_v1 := v_np*_trans_le &
 [ STEM < "readjust" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_readjust_v_1_rel",
            PHON.ONSET con ] ].

ready_a1 := adj_intrans_le &
 [ STEM < "ready" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ready_a_1_rel",
            PHON.ONSET con ] ].

ready_a2 := adj_reg_equi_le &
 [ STEM < "ready" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ready_a_1_rel",
            PHON.ONSET con ] ].

reaffirm_v1 := v_np_trans_le &
 [ STEM < "reaffirm" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reaffirm_v_1_rel",
            PHON.ONSET con ] ].

reaffirm_v2 := v_cp_non_trans_le &
 [ STEM < "reaffirm" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reaffirm_v_1_rel",
            PHON.ONSET con ] ].

real_a1 := adj_intrans_le &
 [ STEM < "real" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_real_a_1_rel",
            PHON.ONSET con ] ].

real_adv := adv_degree_spec_v_le &
 [ STEM < "real" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_real_x_deg_rel",
            PHON.ONSET con ] ].

realistic_a1 := adj_intrans_le &
 [ STEM < "realistic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_realistic_a_1_rel",
            PHON.ONSET con ] ].

realistically_a1 := adv_int_vp_le &
 [ STEM < "realistically" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_realistic_a_1_rel",
            PHON.ONSET con ] ].

reality_n1 := n_mass_count_le &
 [ STEM < "reality" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reality_n_1_rel",
            PHON.ONSET con ] ].

realization_n1 := n_mass_count_le &
 [ STEM < "realization" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_realization_n_1_rel",
            PHON.ONSET con ] ].

realize_v1 := v_np*_trans_le &
 [ STEM < "realize" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_realize_v_1_rel",
            PHON.ONSET con ] ].

realize_v2 := v_cp_non_trans_le &
 [ STEM < "realize" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_realize_v_1_rel",
            PHON.ONSET con ] ].

really_adv1 := adv_vp_aux_le &
 [ STEM < "really" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_really_a_1_rel",
            PHON.ONSET con ] ].

really_adv2 := adv_s_pre_le &
 [ STEM < "really" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_really_a_1_rel",
            PHON.ONSET con ] ].

reap_v1 := v_np*_trans_le &
 [ STEM < "reap" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reap_v_1_rel",
            PHON.ONSET con ] ].

reappear_v1 := v_unerg_le &
 [ STEM < "reappear" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reappear_v_1_rel",
            PHON.ONSET con ] ].

rear_n1 := n_intr_le &
 [ STEM < "rear" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rear_n_1_rel",
            PHON.ONSET con ] ].

rear_v1 := v_np*_trans_le &
 [ STEM < "rear" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rear_v_1_rel",
            PHON.ONSET con ] ].

rearrange_v1 := v_np_trans_le &
 [ STEM < "rearrange" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rearrange_v_1_rel",
            PHON.ONSET con ] ].

reason_n1 := n_mass_count_ppfor_le &
 [ STEM < "reason" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reason_n_for_rel",
            PHON.ONSET con ] ].

reason_n2 := n_cpcomp_fin_le &
 [ STEM < "reason" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reason_n_for_rel",
            PHON.ONSET con ] ].

reason_n3 := n_vpcomp_le &
 [ STEM < "reason" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reason_n_for_rel",
            PHON.ONSET con ] ].

reason_v1 := v_cp_prop_non_trans_le &
 [ STEM < "reason" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reason_v_1_rel",
            PHON.ONSET con ] ].

reason_with_v1 := v_empty_prep_intrans_le &
 [ STEM < "reason" >,
   SYNSEM [ LKEYS [ --COMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_reason_v_with_rel" ],
            PHON.ONSET con ] ].

reasonable_a1 := adj_trans_le &
 [ STEM < "reasonable" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_reasonable_a_for_rel" ],
            PHON.ONSET con ] ].

reasonable_a2 := adj_reg_atrans_le &
 [ STEM < "reasonable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reasonable_a_for_rel",
            PHON.ONSET con ] ].

reasonable_a3 := adj_reg_atrans_cp_le &
 [ STEM < "reasonable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reasonable_a_for_rel",
            PHON.ONSET con ] ].

reasonableness_n1 := n_mass_le &
 [ STEM < "reasonableness" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reasonableness_n_1_rel",
            PHON.ONSET con ] ].

reasonably := adv_int_vp_le &
 [ STEM < "reasonably" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reasonable_a_for_rel",
            PHON.ONSET con ] ].

reasonably_adv := adv_degree_spec_v_le &
 [ STEM < "reasonably" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reasonably_x_deg_rel",
            PHON.ONSET con ] ].

reasoned_a1 := adj_intrans_le &
 [ STEM < "reasoned" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reasoned_a_1_rel",
            PHON.ONSET con ] ].

reassure_about_v1 := v_empty_prep_trans_le &
 [ STEM < "reassure" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _about_p_sel_rel,
                    KEYREL.PRED "_reassure_v_about_rel" ],
            PHON.ONSET con ] ].

reassure_of_v1 := v_empty_prep_trans_le &
 [ STEM < "reassure" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_reassure_v_of_rel" ],
            PHON.ONSET con ] ].

reassure_v1 := v_np*_trans_le &
 [ STEM < "reassure" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reassure_v_1_rel",
            PHON.ONSET con ] ].

reassure_v2 := v_np_trans_cp_prop_le &
 [ STEM < "reassure" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reassure_v_1_rel",
            PHON.ONSET con ] ].

rebate_n1 := n_ppof_le &
 [ STEM < "rebate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rebate_n_of_rel",
            PHON.ONSET con ] ].

rebate_v1 := v_np_trans_le &
 [ STEM < "rebate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rebate_v_1_rel",
            PHON.ONSET con ] ].

rebel_n1 := n_intr_le &
 [ STEM < "rebel" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rebel_n_1_rel",
            PHON.ONSET con ] ].

rebel_v1 := v_np*_trans_le &
 [ STEM < "rebel" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rebel_v_1_rel",
            PHON.ONSET con ] ].

rebel_v2 := v_np*_prep_trans_le &
 [ STEM < "rebel" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _against_p_rel,
                    KEYREL.PRED "_rebel_v_1_rel" ],
            PHON.ONSET con ] ].

rebuild_v1 := v_np*_trans_le &
 [ STEM < "rebuild" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rebuild_v_1_rel",
            PHON.ONSET con ] ].

recall_n1 := n_mass_count_ppof_le &
 [ STEM < "recall" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_recall_n_of_rel",
            PHON.ONSET con ] ].

recall_v1 := v_np*_trans_le &
 [ STEM < "recall" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_recall_v_1_rel",
            PHON.ONSET con ] ].

recall_v2 := v_cp_fin_inf_non_trans_le &
 [ STEM < "recall" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_recall_v_1_rel",
            PHON.ONSET con ] ].

recall_v3 := v_to_trans_le &
 [ STEM < "recall" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_recall_v_to_rel",
            PHON.ONSET con ] ].

recap_v1 := v_np*_trans_le &
 [ STEM < "recap" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_recap_v_1_rel",
            PHON.ONSET con ] ].

recapitulate_v1 := v_np*_trans_le &
 [ STEM < "recapitulate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_recapitulate_v_1_rel",
            PHON.ONSET con ] ].

recede_v1 := v_prep_dir_le &
 [ STEM < "recede" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_recede_v_1_rel",
            PHON.ONSET con ] ].

receipt_n1 := n_mass_count_ppof_le &
 [ STEM < "receipt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_receipt_n_of_rel",
            PHON.ONSET con ] ].

receive_v1 := v_np_trans_le &
 [ STEM < "receive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_receive_v_1_rel",
            PHON.ONSET con ] ].

receiver_n1 := n_ppof_le &
 [ STEM < "receiver" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_receiver_n_of_rel",
            PHON.ONSET con ] ].

recency_n1 := n_intr_le &
 [ STEM < "recency" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_recency_n_1_rel",
            PHON.ONSET con ] ].

recent_a1 := adj_intrans_le &
 [ STEM < "recent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_recent_a_1_rel",
            PHON.ONSET con ] ].

recently_adv1 := adv_int_vp_le &
 [ STEM < "recently" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_recent_a_1_rel",
            PHON.ONSET con ] ].

receptacle_n1 := n_intr_le &
 [ STEM < "receptacle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_receptacle_n_1_rel",
            PHON.ONSET con ] ].

reception_n1 := n_mass_count_ppof_le &
 [ STEM < "reception" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reception_n_of_rel",
            PHON.ONSET con ] ].

receptionist_n1 := n_intr_le &
 [ STEM < "receptionist" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_receptionist_n_1_rel",
            PHON.ONSET con ] ].

receptive_a1 := adj_intrans_le &
 [ STEM < "receptive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_receptive_a_1_rel",
            PHON.ONSET con ] ].

receptively_adv1 := adv_int_vp_post_le &
 [ STEM < "receptively" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_receptive_a_1_rel",
            PHON.ONSET con ] ].

recharge_v1 := v_np*_trans_le &
 [ STEM < "recharge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_recharge_v_1_rel",
            PHON.ONSET con ] ].

recipe_n1 := n_intr_le &
 [ STEM < "recipe" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_recipe_n_1_rel",
            PHON.ONSET con ] ].

recipient_n1 := n_ppof_le &
 [ STEM < "recipient" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_recipient_n_of_rel",
            PHON.ONSET con ] ].

reciprocal_isect := adj_intrans_le &
 [ STEM < "reciprocal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reciprocal_a_1_rel",
            PHON.ONSET con ] ].

reciprocally := adv_int_vp_le &
 [ STEM < "reciprocally" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reciprocal_a_1_rel",
            PHON.ONSET con ] ].

recission_n1 := n_mass_count_le &
 [ STEM < "recission" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_recission_n_1_rel",
            PHON.ONSET con ] ].

recitation_n1 := n_mass_count_le &
 [ STEM < "recitation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_recitation_n_1_rel",
            PHON.ONSET con ] ].

recite_v1 := v_np*_trans_le &
 [ STEM < "recite" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_recite_v_1_rel",
            PHON.ONSET con ] ].

recklinghausen_n1 := n_proper_city_le &
 [ STEM < "recklinghausen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "recklinghausen",
            PHON.ONSET con ] ].

reckon_on_v1 := v_empty_prep_intrans_le &
 [ STEM < "reckon" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_reckon_v_on_rel" ],
            PHON.ONSET con ] ].

reckon_v1 := v_cp_prop*_non_trans_le &
 [ STEM < "reckon" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reckon_v_1_rel",
            PHON.ONSET con ] ].

reckon_v2 := v_np_trans_le &
 [ STEM < "reckon" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reckon_v_1_rel",
            PHON.ONSET con ] ].

reckon_v3 := v_obj_equi_le &
 [ STEM < "reckon" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reckon_v_1_rel",
            PHON.ONSET con ] ].

reclaim_v1 := v_np_trans_le &
 [ STEM < "reclaim" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reclaim_v_1_rel",
            PHON.ONSET con ] ].

recognition_n1 := n_mass_le &
 [ STEM < "recognition" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_recognition_n_1_rel",
            PHON.ONSET con ] ].

recognizable_a1 := adj_intrans_le &
 [ STEM < "recognizable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_recognizable_a_1_rel",
            PHON.ONSET con ] ].

recognize_v1 := v_np*_trans_le &
 [ STEM < "recognize" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_recognize_v_1_rel",
            PHON.ONSET con ] ].

recognize_v2 := v_cp_non_trans_le &
 [ STEM < "recognize" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_recognize_v_1_rel",
            PHON.ONSET con ] ].

recognizer_n1 := n_intr_le &
 [ STEM < "recognizer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_recognizer_n_1_rel",
            PHON.ONSET con ] ].

recollection_n1 := n_mass_count_le &
 [ STEM < "recollection" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_recollection_n_1_rel",
            PHON.ONSET con ] ].

recommend_v1 := v_to*_trans_le &
 [ STEM < "recommend" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_recommend_v_to_rel",
            PHON.ONSET con ] ].

recommend_v2 := v_pp_cp_le &
 [ STEM < "recommend" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_recommend_v_to_rel" ],
            PHON.ONSET con ] ].

recommend_v3 := v_cp_subj_le &
 [ STEM < "recommend" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_recommend_v_1_rel",
            PHON.ONSET con ] ].

recommendable_a1 := adj_intrans_le &
 [ STEM < "recommendable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_recommendable_a_1_rel",
            PHON.ONSET con ] ].

recommendation_n1 := n_intr_le &
 [ STEM < "recommendation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_recommendation_n_1_rel",
            PHON.ONSET con ] ].

recompense_n1 := n_mass_le &
 [ STEM < "recompense" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_recompense_n_1_rel",
            PHON.ONSET con ] ].

recompute_v1 := v_np*_trans_le &
 [ STEM < "recompute" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_recompute_v_1_rel",
            PHON.ONSET con ] ].

reconcile_to_v1 := v_empty_prep_trans_le &
 [ STEM < "reconcile" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_reconcile_v_to_rel" ],
            PHON.ONSET con ] ].

reconcile_v1 := v_np*_trans_le &
 [ STEM < "reconcile" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reconcile_v_1_rel",
            PHON.ONSET con ] ].

reconcile_with_v1 := v_empty_prep_trans*_le &
 [ STEM < "reconcile" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_reconcile_v_with_rel" ],
            PHON.ONSET con ] ].

reconfirm_v1 := v_np*_trans_le &
 [ STEM < "reconfirm" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reconfirm_v_1_rel",
            PHON.ONSET con ] ].

reconfirm_v2 := v_pp_cp_fin_le &
 [ STEM < "reconfirm" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_reconfirm_v_1_rel" ],
            PHON.ONSET con ] ].

reconsider_v1 := v_np*_trans_le &
 [ STEM < "reconsider" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reconsider_v_1_rel",
            PHON.ONSET con ] ].

reconsider_v2 := v_cp_ques_fin_inf_non_trans_le &
 [ STEM < "reconsider" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reconsider_v_1_rel",
            PHON.ONSET con ] ].

reconstruct_v1 := v_np_trans_le &
 [ STEM < "reconstruct" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reconstruct_v_1_rel",
            PHON.ONSET con ] ].

reconstruction_n1 := n_ppof_le &
 [ STEM < "reconstruction" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reconstruction_n_of_rel",
            PHON.ONSET con ] ].

record_n1 := n_mass_count_ppof_le &
 [ STEM < "record" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_record_n_of_rel",
            PHON.ONSET con ] ].

record_v1 := v_np*_trans_le &
 [ STEM < "record" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_record_v_1_rel",
            PHON.ONSET con ] ].

recordbook_n1 := n_intr_le &
 [ STEM < "recordbook" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_recordbook_n_1_rel",
            PHON.ONSET con ] ].

recorder_n1 := n_ppof_le &
 [ STEM < "recorder" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_recorder_n_of_rel",
            PHON.ONSET con ] ].

recount_n1 := n_intr_le &
 [ STEM < "recount" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_recount_n_1_rel",
            PHON.ONSET con ] ].

recount_v1 := v_np_trans_le &
 [ STEM < "recount" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_recount_v_1_rel",
            PHON.ONSET con ] ].

recount_v2 := v_cp_non_trans_le &
 [ STEM < "recount" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_recount_v_1_rel",
            PHON.ONSET con ] ].

recourse_n1 := n_mass_le &
 [ STEM < "recourse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_recourse_n_1_rel",
            PHON.ONSET con ] ].

recover_from_v1 := v_empty_prep_intrans_le &
 [ STEM < "recover" >,
   SYNSEM [ LKEYS [ --COMPKEY _from_p_sel_rel,
                    KEYREL.PRED "_recover_v_from_rel" ],
            PHON.ONSET con ] ].

recover_v1 := v_np*_trans_le &
 [ STEM < "recover" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_recover_v_1_rel",
            PHON.ONSET con ] ].

recreant_a1 := adj_intrans_le &
 [ STEM < "recreant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_recreant_a_1_rel",
            PHON.ONSET con ] ].

recreate_v1 := v_np_trans_le &
 [ STEM < "recreate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_recreate_v_1_rel",
            PHON.ONSET con ] ].

recreation_n1 := n_mass_le &
 [ STEM < "recreation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_recreation_n_1_rel",
            PHON.ONSET con ] ].

recreational_a1 := adj_intrans_le &
 [ STEM < "recreational" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_recreational_a_1_rel",
            PHON.ONSET con ] ].

recredit_v1 := v_empty_prep_trans_le &
 [ STEM < "recredit" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_recredit_v_to_rel" ],
            PHON.ONSET con ] ].

recredit_v2 := v_np_trans_le &
 [ STEM < "recredit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_recredit_v_1_rel",
            PHON.ONSET con ] ].

recruit_n1 := n_intr_le &
 [ STEM < "recruit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_recruit_n_1_rel",
            PHON.ONSET con ] ].

recruit_v1 := v_np*_trans_le &
 [ STEM < "recruit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_recruit_v_1_rel",
            PHON.ONSET con ] ].

rectangular_a1 := adj_intrans_le &
 [ STEM < "rectangular" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rectangular_a_1_rel",
            PHON.ONSET con ] ].

rectify_v1 := v_np_trans_le &
 [ STEM < "rectify" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rectify_v_1_rel",
            PHON.ONSET con ] ].

rectitude_n1 := n_mass_le &
 [ STEM < "rectitude" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rectitude_n_1_rel",
            PHON.ONSET con ] ].

rectus_n1 := n_intr_le &
 [ STEM < "rectus" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rectus_n_1_rel",
            PHON.ONSET con ] ].

recumbent_a1 := adj_intrans_le &
 [ STEM < "recumbent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_recumbent_a_1_rel",
            PHON.ONSET con ] ].

recuperate_v1 := v_empty_prep_intrans_le &
 [ STEM < "recuperate" >,
   SYNSEM [ LKEYS [ --COMPKEY _from_p_sel_rel,
                    KEYREL.PRED "_recuperate_v_from_rel" ],
            PHON.ONSET con ] ].

recuperate_v2 := v_unerg_le &
 [ STEM < "recuperate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_recuperate_v_from_rel",
            PHON.ONSET con ] ].

recur_v1 := v_unerg_le &
 [ STEM < "recur" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_recur_v_1_rel",
            PHON.ONSET con ] ].

recurrence_n1 := n_mass_count_le &
 [ STEM < "recurrence" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_recurrence_n_1_rel",
            PHON.ONSET con ] ].

recycle_v1 := v_np*_trans_le &
 [ STEM < "recycle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_recycle_v_1_rel",
            PHON.ONSET con ] ].

red1 := adj_intrans_le &
 [ STEM < "red" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_red_a_1_rel",
            PHON.ONSET con ] ].

red_currant_a1 := n_intr_le &
 [ STEM < "red-", "currant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_red+currant_n_1_rel",
            PHON.ONSET con ] ].

red_n1 := n_proper_le &
 [ STEM < "red" >,
   SYNSEM [ LKEYS.KEYREL.CARG "red",
            PHON.ONSET con ] ].

red_n2 := n_color_le &
 [ STEM < "red" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_red_n_1_rel",
            PHON.ONSET con ] ].

red_riding_hood_n1 := n_proper_le &
 [ STEM < "red", "riding", "hood" >,
   SYNSEM [ LKEYS.KEYREL.CARG "red_riding_hood",
            PHON.ONSET con ] ].

red_riding_hood_n2 := n_proper_le &
 [ STEM < "red", "ridinghood" >,
   SYNSEM [ LKEYS.KEYREL.CARG "red_riding_hood",
            PHON.ONSET con ] ].

redden_v1 := v_unacc_le &
 [ STEM < "redden" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_redden_v_1_rel",
            PHON.ONSET con ] ].

redeem_for_v1 := v_empty_prep*_trans_le &
 [ STEM < "redeem" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_redeem_v_for_rel" ],
            PHON.ONSET con ] ].

redemption_n1 := n_mass_count_le &
 [ STEM < "redemption" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_redemption_n_1_rel",
            PHON.ONSET con ] ].

redevelop_v1 := v_np*_trans_le &
 [ STEM < "redevelop" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_redevelop_v_1_rel",
            PHON.ONSET con ] ].

redial_v1 := v_np*_trans_le &
 [ STEM < "redial" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_redial_v_1_rel",
            PHON.ONSET con ] ].

redo := v_np_trans_le &
 [ STEM < "redo" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_redo_v_1_rel",
            PHON.ONSET con ] ].

redoute_n1 := n_proper_le &
 [ STEM < "redoute" >,
   SYNSEM [ LKEYS.KEYREL.CARG "redoute",
            PHON.ONSET con ] ].

redpoll_n1 := n_intr_le &
 [ STEM < "redpoll" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_redpoll_n_1_rel",
            PHON.ONSET con ] ].

redpoll_n2 := n_mass_kind_le &
 [ STEM < "redpoll" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_redpoll_n_kind_rel",
            PHON.ONSET con ] ].

redress_n1 := n_mass_le &
 [ STEM < "redress" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_redress_n_1_rel",
            PHON.ONSET con ] ].

redress_v1 := v_np_trans_le &
 [ STEM < "redress" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_redress_v_1_rel",
            PHON.ONSET con ] ].

reduce_v1 := v_np_trans_le &
 [ STEM < "reduce" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reduce_v_1_rel",
            PHON.ONSET con ] ].

reduction_n1 := n_ppof_le &
 [ STEM < "reduction" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reduction_n_of_rel",
            PHON.ONSET con ] ].

redwood_city_n1 := n_proper_city_le &
 [ STEM < "redwood", "city" >,
   SYNSEM [ LKEYS.KEYREL.CARG "redwood_city",
            PHON.ONSET con ] ].

reef_n1 := n_intr_le &
 [ STEM < "reef" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reef_n_1_rel",
            PHON.ONSET con ] ].

reef_v1 := v_np_trans_le &
 [ STEM < "reef" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reef_v_1_rel",
            PHON.ONSET con ] ].

reel_in_v1 := v_particle_np_le &
 [ STEM < "reel" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_reel_v_in_rel" ],
            PHON.ONSET con ] ].

reel_n1 := n_intr_le &
 [ STEM < "reel" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reel_n_1_rel",
            PHON.ONSET con ] ].

reel_off_v1 := v_particle_np_le &
 [ STEM < "reel" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_reel_v_off_rel" ],
            PHON.ONSET con ] ].

reel_out_v1 := v_particle_np_le &
 [ STEM < "reel" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_reel_v_out_rel" ],
            PHON.ONSET con ] ].

reel_v1 := v_unerg_le &
 [ STEM < "reel" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reel_v_1_rel",
            PHON.ONSET con ] ].

reentrant_a1 := adj_intrans_le &
 [ STEM < "reentrant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reentrant_a_1_rel",
            PHON.ONSET con ] ].

reentrant_a2 := adj_intrans_le &
 [ STEM < "reÃ«ntrant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reentrant_a_1_rel",
            PHON.ONSET con ] ].

refer_v1 := v_to*_trans_le &
 [ STEM < "refer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_refer_v_to_rel",
            PHON.ONSET con ] ].

refer_v2 := v_prep_intrans_le &
 [ STEM < "refer" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_rel,
                    KEYREL.PRED "_refer_v_1_rel" ],
            PHON.ONSET con ] ].

reference_n1 := n_mass_count_le &
 [ STEM < "reference" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reference_n_1_rel",
            PHON.ONSET con ] ].

refikshula := n_proper_le &
 [ STEM < "refikshula" >,
   SYNSEM [ LKEYS.KEYREL.CARG "refikshula",
            PHON.ONSET con ] ].

refine_v1 := v_np_trans_le &
 [ STEM < "refine" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_refine_v_1_rel",
            PHON.ONSET con ] ].

refinement_n1 := n_mass_le &
 [ STEM < "refinement" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_refinement_n_1_rel",
            PHON.ONSET con ] ].

reflect_on_v1 := v_empty_prep_intrans_le &
 [ STEM < "reflect" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_reflect_v_on_rel" ],
            PHON.ONSET con ] ].

reflect_v1 := v_np*_trans_le &
 [ STEM < "reflect" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reflect_v_1_rel",
            PHON.ONSET con ] ].

reflect_v2 := v_cp_non_trans_le &
 [ STEM < "reflect" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reflect_v_1_rel",
            PHON.ONSET con ] ].

reflection_n1 := n_mass_count_le &
 [ STEM < "reflection" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reflection_n_1_rel",
            PHON.ONSET con ] ].

reflex_n1 := n_intr_le &
 [ STEM < "reflex" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reflex_n_1_rel",
            PHON.ONSET con ] ].

reflexive_a1 := adj_intrans_le &
 [ STEM < "reflexive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reflexive_a_1_rel",
            PHON.ONSET con ] ].

reflexive_n1 := n_intr_le &
 [ STEM < "reflexive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reflexive_n_1_rel",
            PHON.ONSET con ] ].

reflexively_adv := adv_int_vp_le &
 [ STEM < "reflexively" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reflexive_a_1_rel",
            PHON.ONSET con ] ].

reforestation_n1 := n_mass_ppcomp_le &
 [ STEM < "reforestation" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_reforestation_n_of_rel" ],
            PHON.ONSET con ] ].

reform_n1 := n_mass_count_le &
 [ STEM < "reform" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reform_n_1_rel",
            PHON.ONSET con ] ].

reform_v1 := v_np*_trans_le &
 [ STEM < "reform" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reform_v_1_rel",
            PHON.ONSET con ] ].

reformation_day := n_holiday_le &
 [ STEM < "reformation", "day" >,
   SYNSEM [ LKEYS.KEYREL.CARG "reformation_day",
            PHON.ONSET con ] ].

refrain_n1 := n_intr_le &
 [ STEM < "refrain" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_refrain_n_1_rel",
            PHON.ONSET con ] ].

refrain_v1 := v_empty_prep_intrans_le &
 [ STEM < "refrain" >,
   SYNSEM [ LKEYS [ --COMPKEY _from_p_sel_rel,
                    KEYREL.PRED "_refrain_v_from_rel" ],
            PHON.ONSET con ] ].

refrain_v2 := v_unerg_le &
 [ STEM < "refrain" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_refrain_v_from_rel",
            PHON.ONSET con ] ].

refresh_v1 := v_np_trans_le &
 [ STEM < "refresh" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_refresh_v_1_rel",
            PHON.ONSET con ] ].

refrigerator_n1 := n_intr_le &
 [ STEM < "refrigerator" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_refrigerator_n_1_rel",
            PHON.ONSET con ] ].

refuge_n1 := n_mass_count_le &
 [ STEM < "refuge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_refuge_n_1_rel",
            PHON.ONSET con ] ].

refund_n1 := n_ppof_le &
 [ STEM < "refund" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_refund_n_of_rel",
            PHON.ONSET con ] ].

refund_v1 := v_ditrans_le &
 [ STEM < "refund" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_refund_v_1_rel",
            PHON.ONSET con ] ].

refund_v2 := v_np*_trans_le &
 [ STEM < "refund" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_refund_v_1_rel",
            PHON.ONSET con ] ].

refund_v4 := v_np_prep_trans_le &
 [ STEM < "refund" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _for_p_rel,
                    KEYREL.PRED "_refund_v_1_rel" ],
            PHON.ONSET con ] ].

refundable_a1 := adj_intrans_le &
 [ STEM < "refundable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_refundable_a_1_rel",
            PHON.ONSET con ] ].

refurbish_v1 := v_np*_trans_le &
 [ STEM < "refurbish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_refurbish_v_1_rel",
            PHON.ONSET con ] ].

refurbished_a1 := adj_intrans_le &
 [ STEM < "refurbished" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_refurbished_a_1_rel",
            PHON.ONSET con ] ].

refusal_n1 := n_ppof_le &
 [ STEM < "refusal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_refusal_n_of_rel",
            PHON.ONSET con ] ].

refuse_n1 := n_mass_le &
 [ STEM < "refuse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_refuse_n_1_rel",
            PHON.ONSET con ] ].

refuse_v1 := v_np_trans_le &
 [ STEM < "refuse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_refuse_v_1_rel",
            PHON.ONSET con ] ].

refuse_v2 := v_subj_equi_le &
 [ STEM < "refuse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_refuse_v_1_rel",
            PHON.ONSET con ] ].

refute_v1 := v_np_trans_le &
 [ STEM < "refute" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_refute_v_1_rel",
            PHON.ONSET con ] ].

regain_v1 := v_np_trans_le &
 [ STEM < "regain" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_regain_v_1_rel",
            PHON.ONSET con ] ].

regard_n1 := n_mass_count_le &
 [ STEM < "regard" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_regard_n_1_rel",
            PHON.ONSET con ] ].

regard_v1 := v_np_as_le &
 [ STEM < "regard" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_regard_v_as_rel",
            PHON.ONSET con ] ].

regard_v2 := v_np_trans_le &
 [ STEM < "regard" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_regard_v_as_rel",
            PHON.ONSET con ] ].

regarding_p := p_le &
 [ STEM < "regarding" >,
   SYNSEM [ LKEYS.KEYREL.PRED _regarding_p_rel,
            PHON.ONSET con ] ].

regardless_a1 := adj_trans_oblig_le &
 [ STEM < "regardless" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_regardless_a_of_rel" ],
            PHON.ONSET con ] ].

regardless_isect := adv_int_vp_post_le &
 [ STEM < "regardless" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_regardless_a_of_rel",
            PHON.ONSET con ] ].

regards_n1 := n_plur_nocmpnd_le &
 [ STEM < "regard" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_regards_n_1_rel",
            PHON.ONSET con ] ].

regeneration_n1 := n_mass_le &
 [ STEM < "regeneration" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_regeneration_n_1_rel",
            PHON.ONSET con ] ].

regensburg_n1 := n_proper_city_le &
 [ STEM < "regensburg" >,
   SYNSEM [ LKEYS.KEYREL.CARG "regensburg",
            PHON.ONSET con ] ].

regiment_n1 := n_intr_le &
 [ STEM < "regiment" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_regiment_n_1_rel",
            PHON.ONSET con ] ].

region_n1 := n_ppof_le &
 [ STEM < "region" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_region_n_of_rel",
            PHON.ONSET con ] ].

regional_a1 := adj_intrans_le &
 [ STEM < "regional" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_regional_a_1_rel",
            PHON.ONSET con ] ].

regionally_adv1 := adv_int_vp_post_le &
 [ STEM < "regionally" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_regional_a_1_rel",
            PHON.ONSET con ] ].

register_n1 := n_intr_le &
 [ STEM < "register" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_register_n_1_rel",
            PHON.ONSET con ] ].

register_v1 := v_np*_trans_le &
 [ STEM < "register" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_register_v_1_rel",
            PHON.ONSET con ] ].

registration_n1 := n_ppof_le &
 [ STEM < "registration" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_registration_n_of_rel",
            PHON.ONSET con ] ].

registry_n1 := n_intr_le &
 [ STEM < "registry" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_registry_n_1_rel",
            PHON.ONSET con ] ].

regret_v1 := v_np_trans_le &
 [ STEM < "regret" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_regret_v_1_rel",
            PHON.ONSET con ] ].

regret_v2 := v_cp_non_trans_le &
 [ STEM < "regret" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_regret_v_1_rel",
            PHON.ONSET con ] ].

regret_v3 := v_subj_equi_le &
 [ STEM < "regret" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_regret_v_1_rel",
            PHON.ONSET con ] ].

regretfully_adv1 := adv_int_vp_le &
 [ STEM < "regretfully" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_regretful_a_1_rel",
            PHON.ONSET con ] ].

regrettable_isect := adj_intrans_le &
 [ STEM < "regrettable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_regrettable_a_1_rel",
            PHON.ONSET con ] ].

regrettably := adv_int_vp_le &
 [ STEM < "regrettably" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_regrettable_a_1_rel",
            PHON.ONSET con ] ].

regular_a1 := adj_intrans_le &
 [ STEM < "regular" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_regular_a_1_rel",
            PHON.ONSET con ] ].

regularity_n1 := n_mass_count_le &
 [ STEM < "regularity" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_regularity_n_1_rel",
            PHON.ONSET con ] ].

regularly := adv_degree_spec_le &
 [ STEM < "regularly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_regularly_x_rel",
            PHON.ONSET con ] ].

regularly_adv1 := adv_int_vp_le &
 [ STEM < "regularly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_regular_a_1_rel",
            PHON.ONSET con ] ].

regulate_v1 := v_np*_trans_le &
 [ STEM < "regulate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_regulate_v_1_rel",
            PHON.ONSET con ] ].

regulation_n1 := n_mass_count_le &
 [ STEM < "regulation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_regulation_n_1_rel",
            PHON.ONSET con ] ].

rehash_n1 := n_intr_le &
 [ STEM < "rehash" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rehash_n_1_rel",
            PHON.ONSET con ] ].

rehash_out_v1 := v_particle_np_le &
 [ STEM < "rehash" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_rehash_v_out_rel" ],
            PHON.ONSET con ] ].

rehash_v1 := v_np_trans_le &
 [ STEM < "rehash" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rehash_v_1_rel",
            PHON.ONSET con ] ].

rehearse_v1 := v_np*_trans_le &
 [ STEM < "rehearse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rehearse_v_1_rel",
            PHON.ONSET con ] ].

reign_n1 := n_intr_le &
 [ STEM < "reign" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reign_n_1_rel",
            PHON.ONSET con ] ].

reign_v1 := v_unerg_le &
 [ STEM < "reign" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reign_v_1_rel",
            PHON.ONSET con ] ].

reimburse_v1 := v_empty_prep*_trans_le &
 [ STEM < "reimburse" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_reimburse_v_for_rel" ],
            PHON.ONSET con ] ].

reimbursement_n1 := n_ppof_le &
 [ STEM < "reimbursement" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reimbursement_n_of_rel",
            PHON.ONSET con ] ].

reims_n1 := n_proper_city_le &
 [ STEM < "reims" >,
   SYNSEM [ LKEYS.KEYREL.CARG "reims",
            PHON.ONSET con ] ].

reindeer_n1 := n_intr_le &
 [ STEM < "reindeer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reindeer_n_1_rel",
            PHON.ONSET con ] ].

reine := n_proper_le &
 [ STEM < "reine" >,
   SYNSEM [ LKEYS.KEYREL.CARG "reine",
            PHON.ONSET con ] ].

reinforce_v1 := v_np_trans_le &
 [ STEM < "reinforce" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reinforce_v_1_rel",
            PHON.ONSET con ] ].

reinforce_v2 := v_np_trans_le &
 [ STEM < "reÃ«nforce" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reinforce_v_1_rel",
            PHON.ONSET con ] ].

reinforcement_n1 := n_mass_count_le &
 [ STEM < "reinforcement" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reinforcement_n_1_rel",
            PHON.ONSET con ] ].

reins_n1 := n_plur_le &
 [ STEM < "rein" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reins_n_1_rel",
            PHON.ONSET con ] ].

reinstate_v1 := v_np_trans_le &
 [ STEM < "reinstate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reinstate_v_1_rel",
            PHON.ONSET con ] ].

reinstatement_n1 := n_mass_ppcomp_le &
 [ STEM < "reinstatement" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_reinstatement_n_of_rel" ],
            PHON.ONSET con ] ].

reiremo_n1 := n_proper_le &
 [ STEM < "reiremo" >,
   SYNSEM [ LKEYS.KEYREL.CARG "reiremo",
            PHON.ONSET con ] ].

reiseliv_n1 := n_proper_le &
 [ STEM < "reiseliv" >,
   SYNSEM [ LKEYS.KEYREL.CARG "reiseliv",
            PHON.ONSET con ] ].

reiterate_v1 := v_np_trans_le &
 [ STEM < "reiterate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reiterate_v_1_rel",
            PHON.ONSET con ] ].

reiterate_v2 := v_cp_non_trans_le &
 [ STEM < "reiterate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reiterate_v_1_rel",
            PHON.ONSET con ] ].

reject_n1 := n_intr_le &
 [ STEM < "reject" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reject_n_1_rel",
            PHON.ONSET con ] ].

reject_v1 := v_np_trans_le &
 [ STEM < "reject" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reject_v_1_rel",
            PHON.ONSET con ] ].

rejection_n1 := n_mass_count_le &
 [ STEM < "rejection" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rejection_n_1_rel",
            PHON.ONSET con ] ].

rejoice_v1 := v_unerg_le &
 [ STEM < "rejoice" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rejoice_v_1_rel",
            PHON.ONSET con ] ].

rejoice_v2 := v_cp_prop_non_trans_le &
 [ STEM < "rejoice" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rejoice_v_1_rel",
            PHON.ONSET con ] ].

rejoin_v1 := v_np*_trans_le &
 [ STEM < "rejoin" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rejoin_v_1_rel",
            PHON.ONSET con ] ].

relate_to_v1 := v_empty_prep_intrans_le &
 [ STEM < "relate" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_relate_v_to_rel" ],
            PHON.ONSET con ] ].

relate_v1 := v_empty_prep_trans_le &
 [ STEM < "relate" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_relate_v_to_rel" ],
            PHON.ONSET con ] ].

relate_v2 := v_np*_trans_le &
 [ STEM < "relate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_relate_v_1_rel",
            PHON.ONSET con ] ].

relate_v3 := v_cp_non_trans_le &
 [ STEM < "relate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_relate_v_1_rel",
            PHON.ONSET con ] ].

relation_n1 := n_intr_le &
 [ STEM < "relation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_relation_n_1_rel",
            PHON.ONSET con ] ].

relational_a1 := adj_intrans_le &
 [ STEM < "relational" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_relational_a_1_rel",
            PHON.ONSET con ] ].

relationship_n1 := n_ppof_le &
 [ STEM < "relationship" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_relationship_n_of_rel",
            PHON.ONSET con ] ].

relative_a1 := adj_intrans_le &
 [ STEM < "relative" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_relative_a_1_rel",
            PHON.ONSET con ] ].

relative_n1 := n_intr_le &
 [ STEM < "relative" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_relative_n_1_rel",
            PHON.ONSET con ] ].

relatively_deg := adv_degree_spec_v_le &
 [ STEM < "relatively" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_relatively_x_deg_rel",
            PHON.ONSET con ] ].

relax_v1 := v_np*_trans_le &
 [ STEM < "relax" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_relax_v_1_rel",
            PHON.ONSET con ] ].

relaxation_n1 := n_intr_le &
 [ STEM < "relaxation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_relaxation_n_1_rel",
            PHON.ONSET con ] ].

relaxed_a1 := adj_intrans_le &
 [ STEM < "relaxed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_relaxed_a_1_rel",
            PHON.ONSET con ] ].

relaxing_isect := adj_intrans_le &
 [ STEM < "relaxing" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_relaxing_a_1_rel",
            PHON.ONSET con ] ].

relay_n1 := n_ppof_le &
 [ STEM < "relay" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_relay_n_of_rel",
            PHON.ONSET con ] ].

relay_v1 := v_ditrans_le &
 [ STEM < "relay" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_relay_v_1_rel",
            PHON.ONSET con ] ].

release_n1 := n_ppof_le &
 [ STEM < "release" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_release_n_of_rel",
            PHON.ONSET con ] ].

release_v1 := v_to*_trans_le &
 [ STEM < "release" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_release_v_to_rel",
            PHON.ONSET con ] ].

release_v2 := v_unerg_le &
 [ STEM < "release" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_release_v_1_rel",
            PHON.ONSET con ] ].

relegate_v1 := v_to_trans_le &
 [ STEM < "relegate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_relegate_v_to_rel",
            PHON.ONSET con ] ].

relevant_a1 := adj_intrans_le &
 [ STEM < "relevant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_relevant_a_1_rel",
            PHON.ONSET con ] ].

reliable_a1 := adj_intrans_le &
 [ STEM < "reliable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reliable_a_1_rel",
            PHON.ONSET con ] ].

reliably := adv_int_vp_le &
 [ STEM < "reliably" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reliable_a_1_rel",
            PHON.ONSET con ] ].

reliance_n1 := n_mass_le &
 [ STEM < "reliance" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reliance_n_1_rel",
            PHON.ONSET con ] ].

relic_n1 := n_intr_le &
 [ STEM < "relic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_relic_n_1_rel",
            PHON.ONSET con ] ].

relief_n1 := n_mass_le &
 [ STEM < "relief" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_relief_n_1_rel",
            PHON.ONSET con ] ].

relief_n2 := n_vpcomp_expl_le &
 [ STEM < "relief" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_relief_n_1_rel",
            PHON.ONSET con ] ].

relieve_v1 := v_np_trans_le &
 [ STEM < "relieve" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_relieve_v_1_rel",
            PHON.ONSET con ] ].

relieve_v2 := v_empty_prep_trans_le &
 [ STEM < "relieve" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_relieve_v_of_rel" ],
            PHON.ONSET con ] ].

relieved_isect := adj_intrans_le &
 [ STEM < "relieved" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_relieved_a_1_rel",
            PHON.ONSET con ] ].

relieving_a1 := adj_intrans_le &
 [ STEM < "relieving" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_relieving_a_1_rel",
            PHON.ONSET con ] ].

relieving_a2 := adj_reg_atrans_that_cp_le &
 [ STEM < "relieving" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_relieving_a_1_rel",
            PHON.ONSET con ] ].

religion_n1 := n_mass_count_le &
 [ STEM < "religion" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_religion_n_1_rel",
            PHON.ONSET con ] ].

religious_a1 := adj_intrans_le &
 [ STEM < "religious" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_religious_a_1_rel",
            PHON.ONSET con ] ].

religiously := adv_int_vp_le &
 [ STEM < "religiously" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_religious_a_1_rel",
            PHON.ONSET con ] ].

relinquish_v1 := v_np_trans_le &
 [ STEM < "relinquish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_relinquish_v_1_rel",
            PHON.ONSET con ] ].

relinquishment_n1 := n_mass_le &
 [ STEM < "relinquishment" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_relinquishment_n_1_rel",
            PHON.ONSET con ] ].

relish_n1 := n_mass_count_le &
 [ STEM < "relish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_relish_n_1_rel",
            PHON.ONSET con ] ].

relish_v1 := v_np_trans_le &
 [ STEM < "relish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_relish_v_1_rel",
            PHON.ONSET con ] ].

relocate_v1 := v_np*_trans_le &
 [ STEM < "relocate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_relocate_v_1_rel",
            PHON.ONSET con ] ].

reluctant_a1 := adj_intrans_le &
 [ STEM < "reluctant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reluctant_a_1_rel",
            PHON.ONSET con ] ].

reluctant_a2 := adj_reg_equi_le &
 [ STEM < "reluctant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reluctant_a_1_rel",
            PHON.ONSET con ] ].

reluctantly_adv1 := adv_int_vp_le &
 [ STEM < "reluctantly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reluctant_a_1_rel",
            PHON.ONSET con ] ].

rely_on_v1 := v_empty_prep_intrans_le &
 [ STEM < "rely" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_rely_v_on_rel" ],
            PHON.ONSET con ] ].

rely_upon_v1 := v_empty_prep_intrans_le &
 [ STEM < "rely" >,
   SYNSEM [ LKEYS [ --COMPKEY _upon_p_sel_rel,
                    KEYREL.PRED "_rely_v_upon_rel" ],
            PHON.ONSET con ] ].

remain_v2 := v_unacc_le &
 [ STEM < "remain" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_remain_v_1_rel",
            PHON.ONSET con ] ].

remain_v3 := v_np_non_trans_le &
 [ STEM < "remain" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_remain_v_1_rel",
            PHON.ONSET con ] ].

remain_v4 := v_subj_equi_prd_le &
 [ STEM < "remain" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_remain_v_1_rel",
            PHON.ONSET con ] ].

remainder_n1 := n_ppof_nosort_le &
 [ STEM < "remainder" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_remainder_n_of_rel",
            PHON.ONSET con ] ].

remaining_a1 := adj_attr_intrans_le &
 [ STEM < "remaining" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_remaining_a_1_rel",
            PHON.ONSET con ] ].

remains_n1 := n_plur_nocmpnd_le &
 [ STEM < "remain" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_remains_n_1_rel",
            PHON.ONSET con ] ].

remand_n1 := n_intr_le &
 [ STEM < "remand" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_remand_n_1_rel",
            PHON.ONSET con ] ].

remand_v1 := v_np_trans_le &
 [ STEM < "remand" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_remand_v_to_rel",
            PHON.ONSET con ] ].

remand_v2 := v_to_trans_le &
 [ STEM < "remand" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_remand_v_to_rel",
            PHON.ONSET con ] ].

remark_n1 := n_intr_le &
 [ STEM < "remark" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_remark_n_1_rel",
            PHON.ONSET con ] ].

remark_v1 := v_cp_prop*_non_trans_le &
 [ STEM < "remark" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_remark_v_1_rel",
            PHON.ONSET con ] ].

remark_v2 := v_np_trans_le &
 [ STEM < "remark" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_remark_v_1_rel",
            PHON.ONSET con ] ].

remarkable_a1 := adj_trans_le &
 [ STEM < "remarkable" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_remarkable_a_to_rel" ],
            PHON.ONSET con ] ].

remarkable_a2 := adj_reg_atrans_that_cp_le &
 [ STEM < "remarkable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_remarkable_a_to_rel",
            PHON.ONSET con ] ].

remarkably_pcisect := adv_int_vp_le &
 [ STEM < "remarkably" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_remarkable_a_to_rel",
            PHON.ONSET con ] ].

rembesdalseter := n_proper_le &
 [ STEM < "rembesdalseter" >,
   SYNSEM [ LKEYS.KEYREL.CARG "rembesdalseter",
            PHON.ONSET con ] ].

rembesdalsseter := n_proper_le &
 [ STEM < "rembesdalsseter" >,
   SYNSEM [ LKEYS.KEYREL.CARG "rembesdalsseter",
            PHON.ONSET con ] ].

remedy_n1 := n_intr_le &
 [ STEM < "remedy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_remedy_n_1_rel",
            PHON.ONSET con ] ].

remedy_v1 := v_np_trans_le &
 [ STEM < "remedy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_remedy_v_1_rel",
            PHON.ONSET con ] ].

remember_v1 := v_np*_trans_le &
 [ STEM < "remember" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_remember_v_1_rel",
            PHON.ONSET con ] ].

remember_v2 := v_cp_fin_inf_non_trans_le &
 [ STEM < "remember" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_remember_v_1_rel",
            PHON.ONSET con ] ].

remember_v4 := v_subj_equi_le &
 [ STEM < "remember" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_remember_v_1_rel",
            PHON.ONSET con ] ].

remembrance_n1 := n_mass_count_le &
 [ STEM < "remembrance" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_remembrance_n_1_rel",
            PHON.ONSET con ] ].

remind_v1 := v_empty_prep_trans_le &
 [ STEM < "remind" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_remind_v_of_rel" ],
            PHON.ONSET con ] ].

remind_v2 := v_obj_equi_le &
 [ STEM < "remind" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_remind_v_1_rel",
            PHON.ONSET con ] ].

remind_v3 := v_np_trans_cp_prop_le &
 [ STEM < "remind" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_remind_v_1_rel",
            PHON.ONSET con ] ].

remind_v4 := v_np_trans_le &
 [ STEM < "remind" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_remind_v_1_rel",
            PHON.ONSET con ] ].

reminder_n1 := n_intr_le &
 [ STEM < "reminder" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reminder_n_1_rel",
            PHON.ONSET con ] ].

remission_n1 := n_mass_count_le &
 [ STEM < "remission" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_remission_n_1_rel",
            PHON.ONSET con ] ].

remit_n1 := n_intr_le &
 [ STEM < "remit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_remit_n_1_rel",
            PHON.ONSET con ] ].

remit_v1 := v_np_trans_le &
 [ STEM < "remit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_remit_v_1_rel",
            PHON.ONSET con ] ].

remnant_n1 := n_ppof_le &
 [ STEM < "remnant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_remnant_n_of_rel",
            PHON.ONSET con ] ].

remote_isect := adj_intrans_le &
 [ STEM < "remote" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_remote_a_1_rel",
            PHON.ONSET con ] ].

remotely_adv1 := adv_int_vp_post_le &
 [ STEM < "remotely" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_remote_a_1_rel",
            PHON.ONSET con ] ].

remotely_grad := adv_degree_spec_v_le &
 [ STEM < "remotely" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_remotely_x_deg_rel",
            PHON.ONSET con ] ].

remoter := adj_comp_le &
 [ STEM < "remoter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_remote_a_1_rel",
            PHON.ONSET con ] ].

remotest_a1 := adj_superl_le &
 [ STEM < "remotest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_remote_a_1_rel",
            PHON.ONSET con ] ].

removal_n1 := n_mass_count_ppof_le &
 [ STEM < "removal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_removal_n_of_rel",
            PHON.ONSET con ] ].

remove_n1 := n_intr_le &
 [ STEM < "remove" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_remove_n_1_rel",
            PHON.ONSET con ] ].

remove_v1 := v_np_trans_le &
 [ STEM < "remove" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_remove_v_1_rel",
            PHON.ONSET con ] ].

remove_v2 := v_np_prep_trans_le &
 [ STEM < "remove" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _from_p_rel,
                    KEYREL.PRED "_remove_v_1_rel" ],
            PHON.ONSET con ] ].

rename_v1 := v_np_trans_le &
 [ STEM < "rename" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rename_v_1_rel",
            PHON.ONSET con ] ].

rename_v2 := v_ditrans_only_le &
 [ STEM < "rename" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rename_v_1_rel",
            PHON.ONSET con ] ].

rend_v1 := v_np_trans_le &
 [ STEM < "rend" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rend_v_1_rel",
            PHON.ONSET con ] ].

rendalssÃ¸len_n1 := n_proper_le &
 [ STEM < "rendalssÃ¸len" >,
   SYNSEM [ LKEYS.KEYREL.CARG "rendalssÃ¸len",
            PHON.ONSET con ] ].

render_up_v1 := v_particle_np_le &
 [ STEM < "render" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_render_v_up_rel" ],
            PHON.ONSET con ] ].

render_v1 := v_np*_trans_le &
 [ STEM < "render" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_render_v_1_rel",
            PHON.ONSET con ] ].

render_v2 := v_obj_equi_prd_adj_le &
 [ STEM < "render" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_render_v_1_rel",
            PHON.ONSET con ] ].

rendering_n1 := n_ppof_le &
 [ STEM < "rendering" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rendering_n_of_rel",
            PHON.ONSET con ] ].

rendezvous_n1 := n_intr_le &
 [ STEM < "rendezvous" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rendezvous_n_1_rel",
            PHON.ONSET con ] ].

rendsburg_n1 := n_proper_city_le &
 [ STEM < "rendsburg" >,
   SYNSEM [ LKEYS.KEYREL.CARG "rendsburg",
            PHON.ONSET con ] ].

renew_v1 := v_np_trans_le &
 [ STEM < "renew" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_renew_v_1_rel",
            PHON.ONSET con ] ].

renewable_a1 := adj_intrans_le &
 [ STEM < "renewable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_renewable_a_1_rel",
            PHON.ONSET con ] ].

renewed_isect := adj_intrans_le &
 [ STEM < "renewed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_renewed_a_1_rel",
            PHON.ONSET con ] ].

renmimbi_n1 := n_intr_le &
 [ STEM < "renmimbi" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_renmimbi_n_1_rel",
            PHON.ONSET con ] ].

renmimbi_n2 := n_plur_nocmpnd_le &
 [ STEM < "renmimbi" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_renmimbi_n_1_rel",
            PHON.ONSET con ] ].

renner_n1 := n_proper_city_le &
 [ STEM < "renner" >,
   SYNSEM [ LKEYS.KEYREL.CARG "renner",
            PHON.ONSET con ] ].

renounce_v1 := v_np_trans_le &
 [ STEM < "renounce" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_renounce_v_1_rel",
            PHON.ONSET con ] ].

renovate_v1 := v_np_trans_le &
 [ STEM < "renovate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_renovate_v_1_rel",
            PHON.ONSET con ] ].

renovation_n1 := n_ppof_le &
 [ STEM < "renovation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_renovation_n_of_rel",
            PHON.ONSET con ] ].

renowned_a1 := adj_intrans_le &
 [ STEM < "renowned" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_renowned_a_1_rel",
            PHON.ONSET con ] ].

rent_n1 := n_mass_count_le &
 [ STEM < "rent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rent_n_1_rel",
            PHON.ONSET con ] ].

rent_out_v1 := v_particle_np_le &
 [ STEM < "rent" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_rent_v_out_rel" ],
            PHON.ONSET con ] ].

rent_out_v2 := v_particle_np_pp_to_le &
 [ STEM < "rent" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_rent_v_out_rel" ],
            PHON.ONSET con ] ].

rent_v1 := v_np_trans_le &
 [ STEM < "rent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rent_v_1_rel",
            PHON.ONSET con ] ].

rent_v2 := v_ditrans_le &
 [ STEM < "rent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rent_v_1_rel",
            PHON.ONSET con ] ].

rental_n1 := n_mass_count_ppof_le &
 [ STEM < "rental" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rental_n_of_rel",
            PHON.ONSET con ] ].

renter_n1 := n_intr_le &
 [ STEM < "renter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_renter_n_1_rel",
            PHON.ONSET con ] ].

renunciation_n1 := n_mass_count_le &
 [ STEM < "renunciation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_renunciation_n_1_rel",
            PHON.ONSET con ] ].

reopen_v1 := v_np_trans_noger_le &
 [ STEM < "reopen" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reopen_v_cause_rel",
            PHON.ONSET con ] ].

reopen_v2 := v_unacc_le &
 [ STEM < "reopen" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reopen_v_1_rel",
            PHON.ONSET con ] ].

reorder_v1 := v_np*_trans_le &
 [ STEM < "reorder" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reorder_v_1_rel",
            PHON.ONSET con ] ].

reorder_v2 := v_np*_trans_le &
 [ STEM < "re", "order" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reorder_v_1_rel",
            PHON.ONSET con ] ].

reorder_v3 := v_np*_trans_le &
 [ STEM < "re-", "order" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reorder_v_1_rel",
            PHON.ONSET con ] ].

reorganize_v1 := v_np*_trans_le &
 [ STEM < "reorganize" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reorganize_v_1_rel",
            PHON.ONSET con ] ].

rep_n1 := n_intr_le &
 [ STEM < "rep" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_representative_n_of_rel",
            PHON.ONSET con ] ].

repair_n1 := n_mass_count_ppof_le &
 [ STEM < "repair" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_repair_n_of_rel",
            PHON.ONSET con ] ].

repair_v1 := v_np_trans_le &
 [ STEM < "repair" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_repair_v_1_rel",
            PHON.ONSET con ] ].

repay_v1 := v_np*_trans_le &
 [ STEM < "repay" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_repay_v_1_rel",
            PHON.ONSET con ] ].

repay_v2 := v_ditrans_le &
 [ STEM < "repay" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_repay_v_1_rel",
            PHON.ONSET con ] ].

repayment_n1 := n_mass_count_ppof_le &
 [ STEM < "repayment" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_repayment_n_of_rel",
            PHON.ONSET con ] ].

repeat_n1 := n_intr_le &
 [ STEM < "repeat" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_repeat_n_1_rel",
            PHON.ONSET con ] ].

repeat_v1 := v_np*_trans_le &
 [ STEM < "repeat" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_repeat_v_1_rel",
            PHON.ONSET con ] ].

repeatedly := adv_int_vp_le &
 [ STEM < "repeatedly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_repeated_a_1_rel",
            PHON.ONSET con ] ].

repellent_a1 := adj_intrans_le &
 [ STEM < "repellent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_repellent_a_1_rel",
            PHON.ONSET con ] ].

repellent_n1 := n_intr_le &
 [ STEM < "repellent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_repellent_n_1_rel",
            PHON.ONSET con ] ].

repentance_day_hd := n_holiday_le &
 [ STEM < "repentance", "day" >,
   SYNSEM [ LKEYS.KEYREL.CARG "repentance_day",
            PHON.ONSET con ] ].

repentance_n1 := n_mass_le &
 [ STEM < "repentance" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_repentance_n_1_rel",
            PHON.ONSET con ] ].

repetition_n1 := n_ppof_le &
 [ STEM < "repetition" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_repetition_n_of_rel",
            PHON.ONSET con ] ].

repetitious_a1 := adj_intrans_le &
 [ STEM < "repetitious" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_repetitious_a_1_rel",
            PHON.ONSET con ] ].

repetitiously_a1 := adv_int_vp_le &
 [ STEM < "repetitiously" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_repetitious_a_1_rel",
            PHON.ONSET con ] ].

replace_v1 := v_empty_prep*_trans_le &
 [ STEM < "replace" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_replace_v_with_rel" ],
            PHON.ONSET con ] ].

replacement_n1 := n_mass_count_ppof_le &
 [ STEM < "replacement" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_replacement_n_of_rel",
            PHON.ONSET con ] ].

replay_n1 := n_ppof_le &
 [ STEM < "replay" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_replay_n_of_rel",
            PHON.ONSET con ] ].

replay_v1 := v_np_trans_le &
 [ STEM < "replay" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_replay_v_1_rel",
            PHON.ONSET con ] ].

replica_n1 := n_ppof_le &
 [ STEM < "replica" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_replica_n_of_rel",
            PHON.ONSET con ] ].

replicate_v1 := v_np*_trans_le &
 [ STEM < "replicate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_replicate_v_1_rel",
            PHON.ONSET con ] ].

reply_n1 := n_ppof_le &
 [ STEM < "reply" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reply_n_of_rel",
            PHON.ONSET con ] ].

reply_quote_v1 := v_quote_top_le &
 [ STEM < "reply" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reply_v_1_rel",
            PHON.ONSET con ] ].

reply_quote_v2 := v_quote_inv_le &
 [ STEM < "reply" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reply_v_1_rel",
            PHON.ONSET con ] ].

reply_quote_v3 := v_quote_mc_le &
 [ STEM < "reply" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reply_v_1_rel",
            PHON.ONSET con ] ].

reply_v1 := v_pp_cp_le &
 [ STEM < "reply" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_reply_v_to_rel" ],
            PHON.ONSET con ] ].

reply_v2 := v_unerg_le &
 [ STEM < "reply" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reply_v_1_rel",
            PHON.ONSET con ] ].

report_n1 := n_ppof_le &
 [ STEM < "report" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_report_n_of_rel",
            PHON.ONSET con ] ].

report_v1 := v_prep_intrans_le &
 [ STEM < "report" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_rel,
                    KEYREL.PRED "_report_v_to_rel" ],
            PHON.ONSET con ] ].

report_v2 := v_np*_trans_le &
 [ STEM < "report" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_report_v_to_rel",
            PHON.ONSET con ] ].

report_v3 := v_cp_non_trans_le &
 [ STEM < "report" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_report_v_to_rel",
            PHON.ONSET con ] ].

report_v4 := v_obj_equi_prd_le &
 [ STEM < "report" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_report_v_to_rel",
            PHON.ONSET con ] ].

report_v5 := v_to_trans_le &
 [ STEM < "report" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_report_v_to_rel",
            PHON.ONSET con ] ].

report_v6 := v_double_pp_empty_pp_le &
 [ STEM < "report" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_rel,
                    --OCOMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_report_v_to_rel" ],
            PHON.ONSET con ] ].

report_v7 := v_empty_prep_intrans_le &
 [ STEM < "report" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_report_v_to_rel" ],
            PHON.ONSET con ] ].

reported_isect := adj_attr_intrans_le &
 [ STEM < "reported" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reported_a_1_rel",
            PHON.ONSET con ] ].

reportedly := adv_int_vp_le &
 [ STEM < "reportedly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reported_a_1_rel",
            PHON.ONSET con ] ].

reporter_n1 := n_ppof_le &
 [ STEM < "reporter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reporter_n_of_rel",
            PHON.ONSET con ] ].

repose_n1 := n_mass_le &
 [ STEM < "repose" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_repose_n_1_rel",
            PHON.ONSET con ] ].

repose_v1 := v_np_prep_trans_dors_le &
 [ STEM < "repose" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_repose_v_1_rel",
            PHON.ONSET con ] ].

repose_v2 := v_unerg_le &
 [ STEM < "repose" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_repose_v_1_rel",
            PHON.ONSET con ] ].

represent_v1 := v_np*_trans_le &
 [ STEM < "represent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_represent_v_1_rel",
            PHON.ONSET con ] ].

representation_n1 := n_mass_count_ppof_le &
 [ STEM < "representation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_representation_n_of_rel",
            PHON.ONSET con ] ].

representative_n1 := n_ppof_le &
 [ STEM < "representative" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_representative_n_of_rel",
            PHON.ONSET con ] ].

reprimand_for_v1 := v_empty_prep*_trans_le &
 [ STEM < "reprimand" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_reprimand_v_for_rel" ],
            PHON.ONSET con ] ].

reprimand_n1 := n_mass_count_le &
 [ STEM < "reprimand" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reprimand_n_1_rel",
            PHON.ONSET con ] ].

reprisal_n1 := n_mass_count_le &
 [ STEM < "reprisal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reprisal_n_1_rel",
            PHON.ONSET con ] ].

reproach_n1 := n_mass_count_ppof_le &
 [ STEM < "reproach" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reproach_n_of_rel",
            PHON.ONSET con ] ].

reproach_v1 := v_np_trans_le &
 [ STEM < "reproach" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reproach_v_1_rel",
            PHON.ONSET con ] ].

reproduce_v1 := v_np*_trans_le &
 [ STEM < "reproduce" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reproduce_v_1_rel",
            PHON.ONSET con ] ].

reproduction_n1 := n_mass_count_le &
 [ STEM < "reproduction" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reproduction_n_1_rel",
            PHON.ONSET con ] ].

reproof_n1 := n_mass_count_le &
 [ STEM < "reproof" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reproof_n_1_rel",
            PHON.ONSET con ] ].

republic_n1 := n_ppof_le &
 [ STEM < "republic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_republic_n_of_rel",
            PHON.ONSET con ] ].

republican_a1 := adj_intrans_le &
 [ STEM < "republican" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_republican_a_1_rel",
            PHON.ONSET con ] ].

republican_n1 := n_intr_le &
 [ STEM < "republican" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_republican_n_1_rel",
            PHON.ONSET con ] ].

repugnant_a1 := adj_intrans_le &
 [ STEM < "repugnant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_repugnant_a_1_rel",
            PHON.ONSET con ] ].

reputation_n1 := n_intr_le &
 [ STEM < "reputation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reputation_n_1_rel",
            PHON.ONSET con ] ].

repute_n1 := n_mass_le &
 [ STEM < "repute" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_repute_n_1_rel",
            PHON.ONSET con ] ].

reputed_v1 := v_sorb_pass_le &
 [ STEM < "reputed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_repute_v_1_rel",
            PHON.ONSET con ] ].

request_n1 := n_ppcomp_le &
 [ STEM < "request" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_request_n_for_rel" ],
            PHON.ONSET con ] ].

request_n2 := n_vpcomp_le &
 [ STEM < "request" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_request_n_for_rel",
            PHON.ONSET con ] ].

request_n3 := n_cpcomp_bse_le &
 [ STEM < "request" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_request_n_for_rel",
            PHON.ONSET con ] ].

request_v1 := v_np_trans_le &
 [ STEM < "request" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_request_v_1_rel",
            PHON.ONSET con ] ].

request_v2 := v_subj_equi_le &
 [ STEM < "request" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_request_v_1_rel",
            PHON.ONSET con ] ].

request_v3 := v_cp_subj_le &
 [ STEM < "request" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_request_v_1_rel",
            PHON.ONSET con ] ].

require_v1 := v_np_trans_le &
 [ STEM < "require" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_require_v_1_rel",
            PHON.ONSET con ] ].

require_v2 := v_obj_equi_le &
 [ STEM < "require" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_require_v_1_rel",
            PHON.ONSET con ] ].

require_v3 := v_cp_prop_non_trans_le &
 [ STEM < "require" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_require_v_1_rel",
            PHON.ONSET con ] ].

require_v4 := v_cp_subj_le &
 [ STEM < "require" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_require_v_1_rel",
            PHON.ONSET con ] ].

requirement_n1 := n_intr_le &
 [ STEM < "requirement" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_requirement_n_1_rel",
            PHON.ONSET con ] ].

requisite_a1 := adj_intrans_le &
 [ STEM < "requisite" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_requisite_a_1_rel",
            PHON.ONSET con ] ].

requital_n1 := n_mass_count_le &
 [ STEM < "requital" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_requital_n_1_rel",
            PHON.ONSET con ] ].

requite_v1 := v_np_trans_le &
 [ STEM < "requite" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_requite_v_1_rel",
            PHON.ONSET con ] ].

rerun_v1 := v_np_trans_le &
 [ STEM < "rerun" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rerun_v_1_rel",
            PHON.ONSET con ] ].

reschedule_v1 := v_np*_trans_le &
 [ STEM < "reschedule" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reschedule_v_1_rel",
            PHON.ONSET con ] ].

reschedule_v2 := v_empty_prep_trans_le &
 [ STEM < "reschedule" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_reschedule_v_for_rel" ],
            PHON.ONSET con ] ].

rescue_n1 := n_mass_count_le &
 [ STEM < "rescue" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rescue_n_1_rel",
            PHON.ONSET con ] ].

rescue_v1 := v_np_trans_le &
 [ STEM < "rescue" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rescue_v_1_rel",
            PHON.ONSET con ] ].

research_n1 := n_mass_le &
 [ STEM < "research" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_research_n_1_rel",
            PHON.ONSET con ] ].

research_v1 := v_np_trans_le &
 [ STEM < "research" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_research_v_1_rel",
            PHON.ONSET con ] ].

researcher_n1 := n_ppof_le &
 [ STEM < "researcher" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_researcher_n_of_rel",
            PHON.ONSET con ] ].

resell_v1 := v_np*_trans_le &
 [ STEM < "resell" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_resell_v_1_rel",
            PHON.ONSET con ] ].

resemblance_n1 := n_mass_count_le &
 [ STEM < "resemblance" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_resemblance_n_1_rel",
            PHON.ONSET con ] ].

resemble_v2 := v_np_non_trans_le &
 [ STEM < "resemble" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_resemble_v_1_rel",
            PHON.ONSET con ] ].

resend_to_v1 := v_prep_intrans_le &
 [ STEM < "resend" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_rel,
                    KEYREL.PRED "_resend_v_1_rel" ],
            PHON.ONSET con ] ].

resend_v1 := v_np_trans_le &
 [ STEM < "resend" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_resend_v_1_rel",
            PHON.ONSET con ] ].

resend_v2 := v_ditrans_le &
 [ STEM < "resend" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_resend_v_1_rel",
            PHON.ONSET con ] ].

resent_v1 := v_np_trans_le &
 [ STEM < "resent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_resent_v_1_rel",
            PHON.ONSET con ] ].

resent_v2 := v_cp_only_prop_non_trans_le &
 [ STEM < "resent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_resent_v_1_rel",
            PHON.ONSET con ] ].

resentment_n1 := n_mass_count_le &
 [ STEM < "resentment" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_resentment_n_1_rel",
            PHON.ONSET con ] ].

reservation_n1 := n_ppof_le &
 [ STEM < "reservation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reservation_n_of_rel",
            PHON.ONSET con ] ].

reserve_n1 := n_mass_count_le &
 [ STEM < "reserve" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reserve_n_1_rel",
            PHON.ONSET con ] ].

reserve_post_ttl := n_post_title_le &
 [ STEM < "reserve" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reserve_n_1_rel",
            PHON.ONSET con ] ].

reserve_v1 := v_np_trans_le &
 [ STEM < "reserve" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reserve_v_1_rel",
            PHON.ONSET con ] ].

reservoir_n1 := n_intr_le &
 [ STEM < "reservoir" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reservoir_n_1_rel",
            PHON.ONSET con ] ].

reside_v1 := v_prep_dir_oblig_le &
 [ STEM < "reside" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reside_v_1_rel",
            PHON.ONSET con ] ].

residence_n1 := n_intr_le &
 [ STEM < "residence" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_residence_n_1_rel",
            PHON.ONSET con ] ].

residence_post_ttl := n_post_title_le &
 [ STEM < "residence" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_residence_n_1_rel",
            PHON.ONSET con ] ].

resident_a1 := adj_intrans_le &
 [ STEM < "resident" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_resident_a_1_rel",
            PHON.ONSET con ] ].

resident_n1 := n_ppof_le &
 [ STEM < "resident" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_resident_n_of_rel",
            PHON.ONSET con ] ].

residential_a1 := adj_intrans_le &
 [ STEM < "residential" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_residential_a_1_rel",
            PHON.ONSET con ] ].

resign_v1 := v_np*_non_trans_le &
 [ STEM < "resign" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_resign_v_1_rel",
            PHON.ONSET con ] ].

resiliency_n1 := n_mass_le &
 [ STEM < "resiliency" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_resiliency_n_1_rel",
            PHON.ONSET con ] ].

resist_v1 := v_np*_trans_le &
 [ STEM < "resist" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_resist_v_1_rel",
            PHON.ONSET con ] ].

resistible_a1 := adj_intrans_le &
 [ STEM < "resistible" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_resistible_a_1_rel",
            PHON.ONSET con ] ].

resolute_a1 := adj_intrans_le &
 [ STEM < "resolute" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_resolute_a_1_rel",
            PHON.ONSET con ] ].

resolutely_adv1 := adv_int_vp_le &
 [ STEM < "resolutely" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_resolute_a_1_rel",
            PHON.ONSET con ] ].

resolution_n1 := n_mass_count_ppof_le &
 [ STEM < "resolution" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_resolution_n_of_rel",
            PHON.ONSET con ] ].

resolve_v1 := v_np*_trans_le &
 [ STEM < "resolve" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_resolve_v_1_rel",
            PHON.ONSET con ] ].

resolve_v2 := v_subj_equi_le &
 [ STEM < "resolve" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_resolve_v_1_rel",
            PHON.ONSET con ] ].

resort_n1 := n_intr_le &
 [ STEM < "resort" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_resort_n_1_rel",
            PHON.ONSET con ] ].

resort_v1 := v_empty_prep_intrans_le &
 [ STEM < "resort" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_resort_v_to_rel" ],
            PHON.ONSET con ] ].

resource_n1 := n_intr_le &
 [ STEM < "resource" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_resource_n_1_rel",
            PHON.ONSET con ] ].

respect_n1 := n_mass_le &
 [ STEM < "respect" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_respect_n_for_rel",
            PHON.ONSET con ] ].

respect_n2 := n_intr_le &
 [ STEM < "respect" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_respect_n_for_rel",
            PHON.ONSET con ] ].

respect_n3 := n_mass_ppcomp_oblig_le &
 [ STEM < "respect" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_respect_n_for_rel" ],
            PHON.ONSET con ] ].

respect_v1 := v_np_trans_le &
 [ STEM < "respect" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_respect_v_1_rel",
            PHON.ONSET con ] ].

respectable_a1 := adj_intrans_le &
 [ STEM < "respectable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_respectable_a_1_rel",
            PHON.ONSET con ] ].

respectably_a1 := adv_int_vp_post_le &
 [ STEM < "respectably" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_respectable_a_1_rel",
            PHON.ONSET con ] ].

respectful_a1 := adj_intrans_le &
 [ STEM < "respectful" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_respectful_a_1_rel",
            PHON.ONSET con ] ].

respective_isect := adj_intrans_le &
 [ STEM < "respective" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_respective_a_1_rel",
            PHON.ONSET con ] ].

respectively_adv1 := adv_vp_post_le &
 [ STEM < "respectively" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_respective_a_1_rel",
            PHON.ONSET con ] ].

respiration_n1 := n_mass_le &
 [ STEM < "respiration" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_respiration_n_1_rel",
            PHON.ONSET con ] ].

respiratory_a1 := adj_intrans_le &
 [ STEM < "respiratory" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_respiratory_a_1_rel",
            PHON.ONSET con ] ].

resplendent_a1 := adj_intrans_le &
 [ STEM < "resplendent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_resplendent_a_1_rel",
            PHON.ONSET con ] ].

respond_v1 := v_empty_prep_intrans_le &
 [ STEM < "respond" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_respond_v_to_rel" ],
            PHON.ONSET con ] ].

respond_v2 := v_unerg_le &
 [ STEM < "respond" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_respond_v_1_rel",
            PHON.ONSET con ] ].

response_n1 := n_mass_count_le &
 [ STEM < "response" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_response_n_to_rel",
            PHON.ONSET con ] ].

response_n2 := n_mass_count_ppto_le &
 [ STEM < "response" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_response_n_to_rel",
            PHON.ONSET con ] ].

responsibility_n1 := n_mass_count_le &
 [ STEM < "responsibility" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_responsibility_n_1_rel",
            PHON.ONSET con ] ].

responsible_a1 := adj_trans_le &
 [ STEM < "responsible" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_responsible_a_for_rel" ],
            PHON.ONSET con ] ].

responsibly := adv_int_vp_le &
 [ STEM < "responsibly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_responsible_a_for_rel",
            PHON.ONSET con ] ].

rest_n1 := n_intr_nosort_le &
 [ STEM < "rest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rest_n_of_rel",
            PHON.ONSET con ] ].

rest_n2 := n_ppcomp_oblig_nosort_le &
 [ STEM < "rest" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_rest_n_of_rel" ],
            PHON.ONSET con ] ].

rest_n3 := n_mass_le &
 [ STEM < "rest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rest_n_1_rel",
            PHON.ONSET con ] ].

rest_up_v1 := v_particle_le &
 [ STEM < "rest" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_rest_v_up_rel" ],
            PHON.ONSET con ] ].

rest_v1 := v_np*_trans_le &
 [ STEM < "rest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rest_v_1_rel",
            PHON.ONSET con ] ].

restart_v1 := v_np*_trans_le &
 [ STEM < "restart" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_restart_v_1_rel",
            PHON.ONSET con ] ].

restaurant_n1 := n_intr_le &
 [ STEM < "restaurant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_restaurant_n_1_rel",
            PHON.ONSET con ] ].

restaurant_post_ttl := n_post_title_le &
 [ STEM < "restaurant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_restaurant_n_1_rel",
            PHON.ONSET con ] ].

restful_a1 := adj_intrans_le &
 [ STEM < "restful" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_restful_a_1_rel",
            PHON.ONSET con ] ].

restfully_adv1 := adv_int_vp_post_le &
 [ STEM < "restfully" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_restful_a_1_rel",
            PHON.ONSET con ] ].

restless_a1 := adj_intrans_le &
 [ STEM < "restless" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_restless_a_1_rel",
            PHON.ONSET con ] ].

restoration_n1 := n_mass_count_ppof_le &
 [ STEM < "restoration" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_restoration_n_of_rel",
            PHON.ONSET con ] ].

restore_v1 := v_np_trans_le &
 [ STEM < "restore" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_restore_v_to_rel",
            PHON.ONSET con ] ].

restore_v2 := v_to_trans_le &
 [ STEM < "restore" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_restore_v_to_rel",
            PHON.ONSET con ] ].

restrain_from_v1 := v_empty_prep*_trans_le &
 [ STEM < "restrain" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _from_p_sel_rel,
                    KEYREL.PRED "_restrain_v_from_rel" ],
            PHON.ONSET con ] ].

restraint_n1 := n_mass_count_le &
 [ STEM < "restraint" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_restraint_n_1_rel",
            PHON.ONSET con ] ].

restrict_v1 := v_empty_prep_trans_le &
 [ STEM < "restrict" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_restrict_v_to_rel" ],
            PHON.ONSET con ] ].

restrict_v2 := v_np_trans_le &
 [ STEM < "restrict" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_restrict_v_1_rel",
            PHON.ONSET con ] ].

restricted_a1 := adj_intrans_le &
 [ STEM < "restricted" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_restricted_a_1_rel",
            PHON.ONSET con ] ].

restriction_n1 := n_mass_count_ppof_le &
 [ STEM < "restriction" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_restriction_n_of_rel",
            PHON.ONSET con ] ].

resubmit_v1 := v_np*_trans_le &
 [ STEM < "resubmit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_resubmit_v_1_rel",
            PHON.ONSET con ] ].

result_from_v1 := v_empty_prep_intrans_le &
 [ STEM < "result" >,
   SYNSEM [ LKEYS [ --COMPKEY _from_p_sel_rel,
                    KEYREL.PRED "_result_v_from_rel" ],
            PHON.ONSET con ] ].

result_in_v2 := v_empty_prep_intrans_le &
 [ STEM < "result" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_result_v_in_rel" ],
            PHON.ONSET con ] ].

result_n1 := n_ppof_le &
 [ STEM < "result" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_result_n_of_rel",
            PHON.ONSET con ] ].

result_v2 := v_unacc_le &
 [ STEM < "result" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_result_v_1_rel",
            PHON.ONSET con ] ].

resume_n1 := n_intr_le &
 [ STEM < "resume" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_resume_n_1_rel",
            PHON.ONSET con ] ].

resume_v1 := v_np*_trans_le &
 [ STEM < "resume" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_resume_v_1_rel",
            PHON.ONSET con ] ].

resupply_v1 := v_np_trans_le &
 [ STEM < "resupply" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_resupply_v_with_rel",
            PHON.ONSET con ] ].

resupply_with_v1 := v_empty_prep_trans_le &
 [ STEM < "resupply" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_resupply_v_with_rel" ],
            PHON.ONSET con ] ].

resurrect_v1 := v_np_trans_le &
 [ STEM < "resurrect" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_resurrect_v_1_rel",
            PHON.ONSET con ] ].

resuscitation_n1 := n_mass_count_ppof_le &
 [ STEM < "resuscitation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_resuscitation_n_of_rel",
            PHON.ONSET con ] ].

retailer_n1 := n_intr_le &
 [ STEM < "retailer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_retailer_n_1_rel",
            PHON.ONSET con ] ].

retain_v1 := v_np_trans_le &
 [ STEM < "retain" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_retain_v_1_rel",
            PHON.ONSET con ] ].

retard_v1 := v_np_trans_le &
 [ STEM < "retard" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_retard_v_1_rel",
            PHON.ONSET con ] ].

retinue_n1 := n_intr_le &
 [ STEM < "retinue" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_retinue_n_1_rel",
            PHON.ONSET con ] ].

retire_v1 := v_np*_trans_le &
 [ STEM < "retire" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_retire_v_1_rel",
            PHON.ONSET con ] ].

retirement_n1 := n_mass_count_ppof_le &
 [ STEM < "retirement" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_retirement_n_of_rel",
            PHON.ONSET con ] ].

retort_n1 := n_mass_count_le &
 [ STEM < "retort" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_retort_n_1_rel",
            PHON.ONSET con ] ].

retort_to_v1 := v_empty_prep_intrans_le &
 [ STEM < "retort" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_retort_v_to_rel" ],
            PHON.ONSET con ] ].

retort_v1 := v_cp_prop*_non_trans_le &
 [ STEM < "retort" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_retort_v_1_rel",
            PHON.ONSET con ] ].

retrace_v1 := v_np_trans_le &
 [ STEM < "retrace" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_retrace_v_1_rel",
            PHON.ONSET con ] ].

retract_v1 := v_np_trans_le &
 [ STEM < "retract" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_retract_v_1_rel",
            PHON.ONSET con ] ].

retrain_v1 := v_np*_trans_le &
 [ STEM < "retrain" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_retrain_v_1_rel",
            PHON.ONSET con ] ].

retreat_n1 := n_mass_count_le &
 [ STEM < "retreat" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_retreat_n_1_rel",
            PHON.ONSET con ] ].

retreat_v1 := v_np*_trans_le &
 [ STEM < "retreat" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_retreat_v_1_rel",
            PHON.ONSET con ] ].

retrieve_v1 := v_np_trans_le &
 [ STEM < "retrieve" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_retrieve_v_1_rel",
            PHON.ONSET con ] ].

retriever_n1 := n_intr_le &
 [ STEM < "retriever" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_retriever_n_1_rel",
            PHON.ONSET con ] ].

return_n1 := n_mass_count_ppof_le &
 [ STEM < "return" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_return_n_of_rel",
            PHON.ONSET con ] ].

return_v2 := v_prep_dir_le &
 [ STEM < "return" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_return_v_1_rel",
            PHON.ONSET con ] ].

return_v3 := v_to_trans_le &
 [ STEM < "return" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_return_v_to_rel",
            PHON.ONSET con ] ].

return_v4 := v_np_prep_trans_le &
 [ STEM < "return" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _for_p_rel,
                    KEYREL.PRED "_return_v_1_rel" ],
            PHON.ONSET con ] ].

return_v5 := v_np_trans_noger_le &
 [ STEM < "return" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_return_v_1_rel",
            PHON.ONSET con ] ].

reunification_n1 := n_mass_count_ppof_le &
 [ STEM < "reunification" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reunification_n_of_rel",
            PHON.ONSET con ] ].

reunify_v1 := v_np*_trans_le &
 [ STEM < "reunify" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reunify_v_1_rel",
            PHON.ONSET con ] ].

reunion_n1 := n_intr_le &
 [ STEM < "reunion" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reunion_n_1_rel",
            PHON.ONSET con ] ].

reunite_v1 := v_unerg_le &
 [ STEM < "reunite" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reunite_v_1_rel",
            PHON.ONSET con ] ].

reunite_with_v1 := v_empty_prep*_trans_le &
 [ STEM < "reunite" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_reunite_v_with_rel" ],
            PHON.ONSET con ] ].

reutlingen_n1 := n_proper_city_le &
 [ STEM < "reutlingen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "reutlingen",
            PHON.ONSET con ] ].

reveal_v1 := v_np_trans_le &
 [ STEM < "reveal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reveal_v_1_rel",
            PHON.ONSET con ] ].

reveal_v2 := v_cp_non_trans_le &
 [ STEM < "reveal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reveal_v_1_rel",
            PHON.ONSET con ] ].

reveal_v3 := v_np_obj_comp_le &
 [ STEM < "reveal" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _as_p_sel_rel,
                    KEYREL.PRED "_reveal_v_as_rel" ],
            PHON.ONSET con ] ].

revealing_a1 := adj_intrans_le &
 [ STEM < "revealing" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_revealing_a_1_rel",
            PHON.ONSET con ] ].

revel_n1 := n_intr_le &
 [ STEM < "revel" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_revel_n_1_rel",
            PHON.ONSET con ] ].

revel_v1 := v_unerg_le &
 [ STEM < "revel" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_revel_v_1_rel",
            PHON.ONSET con ] ].

revelry_n1 := n_mass_count_le &
 [ STEM < "revelry" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_revelry_n_1_rel",
            PHON.ONSET con ] ].

revenge_n1 := n_mass_le &
 [ STEM < "revenge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_revenge_n_1_rel",
            PHON.ONSET con ] ].

revenge_on_v1 := v_empty_prep*_trans_le &
 [ STEM < "revenge" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_revenge_v_on_rel" ],
            PHON.ONSET con ] ].

revenue_n1 := n_mass_count_le &
 [ STEM < "revenue" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_revenue_n_1_rel",
            PHON.ONSET con ] ].

revere_v1 := v_np_trans_le &
 [ STEM < "revere" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_revere_v_1_rel",
            PHON.ONSET con ] ].

reverence_n1 := n_mass_count_le &
 [ STEM < "reverence" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reverence_n_1_rel",
            PHON.ONSET con ] ].

reverend_abb_ttl := n_title_le &
 [ STEM < "rev." >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reverend_n_1_rel",
            PHON.ONSET con ] ].

reverend_abb_ttl_2 := n_title_le &
 [ STEM < "rev" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reverend_n_1_rel",
            PHON.ONSET con ] ].

reverend_n1 := n_intr_le &
 [ STEM < "reverend" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reverend_n_1_rel",
            PHON.ONSET con ] ].

reverend_ttl := n_title_le &
 [ STEM < "reverend" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reverend_n_1_rel",
            PHON.ONSET con ] ].

reverse_a1 := adj_intrans_le &
 [ STEM < "reverse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reverse_a_1_rel",
            PHON.ONSET con ] ].

reverse_n1 := n_mass_count_ppof_le &
 [ STEM < "reverse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reverse_n_of_rel",
            PHON.ONSET con ] ].

reverse_v1 := v_np*_trans_le &
 [ STEM < "reverse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reverse_v_1_rel",
            PHON.ONSET con ] ].

reversion_n1 := n_mass_le &
 [ STEM < "reversion" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reversion_n_1_rel",
            PHON.ONSET con ] ].

revert_to_v1 := v_empty_prep*_trans_le &
 [ STEM < "revert" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_revert_v_to_rel" ],
            PHON.ONSET con ] ].

revert_to_v2 := v_empty_prep_intrans_le &
 [ STEM < "revert" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_revert_v_to_rel" ],
            PHON.ONSET con ] ].

review_n1 := n_mass_count_ppof_le &
 [ STEM < "review" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_review_n_of_rel",
            PHON.ONSET con ] ].

review_v1 := v_np*_trans_le &
 [ STEM < "review" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_review_v_1_rel",
            PHON.ONSET con ] ].

revise_v1 := v_np_trans_le &
 [ STEM < "revise" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_revise_v_1_rel",
            PHON.ONSET con ] ].

revisit_v1 := v_np_trans_le &
 [ STEM < "revisit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_revisit_v_1_rel",
            PHON.ONSET con ] ].

revive_v1 := v_unacc_le &
 [ STEM < "revive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_revive_v_1_rel",
            PHON.ONSET con ] ].

revive_v2 := v_np_trans_noger_le &
 [ STEM < "revive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_revive_v_cause_rel",
            PHON.ONSET con ] ].

revoke_v1 := v_np*_trans_le &
 [ STEM < "revoke" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_revoke_v_1_rel",
            PHON.ONSET con ] ].

revolution_n1 := n_mass_count_ppof_le &
 [ STEM < "revolution" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_revolution_n_of_rel",
            PHON.ONSET con ] ].

revolutionary_a1 := adj_intrans_le &
 [ STEM < "revolutionary" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_revolutionary_a_1_rel",
            PHON.ONSET con ] ].

revolutionary_n1 := n_intr_le &
 [ STEM < "revolutionary" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_revolutionary_n_1_rel",
            PHON.ONSET con ] ].

revolve_v1 := v_prep*_intrans_le &
 [ STEM < "revolve" >,
   SYNSEM [ LKEYS [ --COMPKEY _around_p_rel,
                    KEYREL.PRED "_revolve_v_1_rel" ],
            PHON.ONSET con ] ].

revue_n1 := n_intr_le &
 [ STEM < "revue" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_revue_n_1_rel",
            PHON.ONSET con ] ].

reward_n1 := n_mass_count_le &
 [ STEM < "reward" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reward_n_1_rel",
            PHON.ONSET con ] ].

reward_v1 := v_np_trans_le &
 [ STEM < "reward" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reward_v_1_rel",
            PHON.ONSET con ] ].

rework_v1 := v_np*_trans_le &
 [ STEM < "rework" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rework_v_1_rel",
            PHON.ONSET con ] ].

rewrite_v1 := v_np*_trans_le &
 [ STEM < "rewrite" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rewrite_v_1_rel",
            PHON.ONSET con ] ].

reykjavik := n_proper_le &
 [ STEM < "reykjavik" >,
   SYNSEM [ LKEYS.KEYREL.CARG "reykjavik",
            PHON.ONSET con ] ].

rhein_n1 := n_proper_city_le &
 [ STEM < "rhein" >,
   SYNSEM [ LKEYS.KEYREL.CARG "rhein",
            PHON.ONSET con ] ].

rheinland_n1 := n_proper_city_le &
 [ STEM < "rheinland" >,
   SYNSEM [ LKEYS.KEYREL.CARG "rheinland",
            PHON.ONSET con ] ].

rhetoric_n1 := n_mass_le &
 [ STEM < "rhetoric" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rhetoric_n_1_rel",
            PHON.ONSET con ] ].

rhineland_n1 := n_proper_le &
 [ STEM < "rhineland" >,
   SYNSEM [ LKEYS.KEYREL.CARG "rhineland",
            PHON.ONSET con ] ].

rhinoceros_n1 := n_intr_le &
 [ STEM < "rhinoceros" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rhinoceros_n_1_rel",
            PHON.ONSET con ] ].

rhodeisland_n1 := n_proper_le &
 [ STEM < "rhode", "island" >,
   SYNSEM [ LKEYS.KEYREL.CARG "rhodeisland",
            PHON.ONSET con ] ].

rhodeisland_n2 := n_proper_abb_le &
 [ STEM < "ri" >,
   SYNSEM [ LKEYS.KEYREL.CARG "rhodeisland",
            PHON.ONSET con ] ].

rhythm_n1 := n_mass_count_le &
 [ STEM < "rhythm" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rhythm_n_1_rel",
            PHON.ONSET con ] ].

rhythmical_a1 := adj_intrans_le &
 [ STEM < "rhythmical" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rhythmical_a_1_rel",
            PHON.ONSET con ] ].

rhythmically := adv_int_vp_le &
 [ STEM < "rhythmically" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rhythmical_a_1_rel",
            PHON.ONSET con ] ].

rib_n1 := n_intr_le &
 [ STEM < "rib" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rib_n_1_rel",
            PHON.ONSET con ] ].

rib_v1 := v_np_trans_le &
 [ STEM < "rib" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rib_v_1_rel",
            PHON.ONSET con ] ].

ribbon_n1 := n_intr_le &
 [ STEM < "ribbon" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ribbon_n_1_rel",
            PHON.ONSET con ] ].

ribeau_n1 := n_proper_le &
 [ STEM < "ribeau" >,
   SYNSEM [ LKEYS.KEYREL.CARG "ribeau",
            PHON.ONSET con ] ].

rice1 := n_mass_le &
 [ STEM < "rice" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rice_n_1_rel",
            PHON.ONSET con ] ].

rich_a1 := adj_trans_le &
 [ STEM < "rich" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_rich_a_in_rel" ],
            PHON.ONSET con ] ].

rich_n1 := n_proper_le &
 [ STEM < "rich" >,
   SYNSEM [ LKEYS.KEYREL.CARG "rich",
            PHON.ONSET con ] ].

richard_n1 := n_proper_le &
 [ STEM < "richard" >,
   SYNSEM [ LKEYS.KEYREL.CARG "richard",
            PHON.ONSET con ] ].

richer := adj_comp_le &
 [ STEM < "richer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rich_a_in_rel",
            PHON.ONSET con ] ].

riches_n1 := n_plur_nocmpnd_le &
 [ STEM < "rich" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_riches_n_1_rel",
            PHON.ONSET con ] ].

richest_a1 := adj_superl_le &
 [ STEM < "richest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rich_a_in_rel",
            PHON.ONSET con ] ].

richly := adv_int_vp_le &
 [ STEM < "richly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rich_a_in_rel",
            PHON.ONSET con ] ].

richter_n1 := n_proper_le &
 [ STEM < "richter" >,
   SYNSEM [ LKEYS.KEYREL.CARG "richter",
            PHON.ONSET con ] ].

rickhoff := n_proper_le &
 [ STEM < "rickhoff" >,
   SYNSEM [ LKEYS.KEYREL.CARG "rickhoff",
            PHON.ONSET con ] ].

rid_a1 := adj_trans_le &
 [ STEM < "rid" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_rid_a_of_rel" ],
            PHON.ONSET con ] ].

rid_of_v1 := v_empty_prep_trans_le &
 [ STEM < "rid" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_rid_v_of_rel" ],
            PHON.ONSET con ] ].

ridder_n1 := n_proper_le &
 [ STEM < "ridder" >,
   SYNSEM [ LKEYS.KEYREL.CARG "ridder",
            PHON.ONSET con ] ].

ridderspranget := n_proper_le &
 [ STEM < "ridderspranget" >,
   SYNSEM [ LKEYS.KEYREL.CARG "ridderspranget",
            PHON.ONSET con ] ].

riddle_n1 := n_intr_le &
 [ STEM < "riddle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_riddle_n_1_rel",
            PHON.ONSET con ] ].

riddled_a1 := adj_trans_oblig_le &
 [ STEM < "riddled" >,
   SYNSEM [ LKEYS [ --COMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_riddled_a_with_rel" ],
            PHON.ONSET con ] ].

ride_in_v1 := v_particle_np_le &
 [ STEM < "ride" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_ride_v_in_rel" ],
            PHON.ONSET con ] ].

ride_n1 := n_intr_le &
 [ STEM < "ride" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ride_n_1_rel",
            PHON.ONSET con ] ].

ride_out_v1 := v_particle_np_le &
 [ STEM < "ride" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_ride_v_out_rel" ],
            PHON.ONSET con ] ].

ride_up_v1 := v_particle_np_le &
 [ STEM < "ride" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_ride_v_up_rel" ],
            PHON.ONSET con ] ].

ride_v1 := v_np_trans_noger_le &
 [ STEM < "ride" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ride_v_1_rel",
            PHON.ONSET con ] ].

ride_v2 := v_prep_dir_le &
 [ STEM < "ride" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ride_v_1_rel",
            PHON.ONSET con ] ].

rider_college_n1 := n_proper_le &
 [ STEM < "rider", "college" >,
   SYNSEM [ LKEYS.KEYREL.CARG "rider_college",
            PHON.ONSET con ] ].

rider_n1 := n_intr_le &
 [ STEM < "rider" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rider_n_1_rel",
            PHON.ONSET con ] ].

ridge_n1 := n_intr_le &
 [ STEM < "ridge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ridge_n_1_rel",
            PHON.ONSET con ] ].

ridge_post_ttl := n_post_title_le &
 [ STEM < "ridge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ridge_n_1_rel",
            PHON.ONSET con ] ].

ridgewalk_n1 := n_intr_le &
 [ STEM < "ridgewalk" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ridgewalk_n_1_rel",
            PHON.ONSET con ] ].

ridiculous_a1 := adj_intrans_le &
 [ STEM < "ridiculous" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ridiculous_a_1_rel",
            PHON.ONSET con ] ].

ridiculously := adv_int_vp_post_le &
 [ STEM < "ridiculously" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ridiculous_a_1_rel",
            PHON.ONSET con ] ].

ridiculously_deg := adv_degree_spec_le &
 [ STEM < "ridiculously" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ridiculously_x_rel",
            PHON.ONSET con ] ].

rifle_n1 := n_intr_le &
 [ STEM < "rifle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rifle_n_1_rel",
            PHON.ONSET con ] ].

rifle_v1 := v_np_trans_le &
 [ STEM < "rifle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rifle_v_1_rel",
            PHON.ONSET con ] ].

rifle_v2 := v_empty_prep_intrans_le &
 [ STEM < "rifle" >,
   SYNSEM [ LKEYS [ --COMPKEY _through_p_sel_rel,
                    KEYREL.PRED "_rifle_v_from_rel" ],
            PHON.ONSET con ] ].

rig_n1 := n_intr_le &
 [ STEM < "rig" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rig_n_1_rel",
            PHON.ONSET con ] ].

rig_up_v1 := v_particle_np_le &
 [ STEM < "rig" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_rig_v_up_rel" ],
            PHON.ONSET con ] ].

rig_v1 := v_np_trans_le &
 [ STEM < "rig" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rig_v_1_rel",
            PHON.ONSET con ] ].

rigamarole_n1 := n_intr_le &
 [ STEM < "rigamarole" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rigamarole_n_1_rel",
            PHON.ONSET con ] ].

right_a1 := adj_intrans_le &
 [ STEM < "right" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_right_a_1_rel",
            PHON.ONSET con ] ].

right_adv1 := adv_int_vp_post_le &
 [ STEM < "right" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_right_a_focus_rel",
            PHON.ONSET con ] ].

right_away_adv1 := pp_vpmod_le &
 [ STEM < "right", "away" >,
   SYNSEM [ LKEYS.KEYREL.PRED _right+away_p_rel,
            PHON.ONSET con ] ].

right_deg := adv_degree_spec_jov_only_le &
 [ STEM < "right" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_right_x_deg_rel",
            PHON.ONSET con ] ].

right_handed_a1 := adj_intrans_le &
 [ STEM < "right-", "handed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_right+handed_a_1_rel",
            PHON.ONSET con ] ].

right_handed_a2 := adj_intrans_le &
 [ STEM < "right", "handed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_right+handed_a_1_rel",
            PHON.ONSET con ] ].

right_hander_n1 := n_intr_le &
 [ STEM < "right", "hander" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_right+hander_n_1_rel",
            PHON.ONSET con ] ].

right_hander_n2 := n_intr_le &
 [ STEM < "right-", "hander" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_right+hander_n_1_rel",
            PHON.ONSET con ] ].

right_m_deg := adv_degree_spec_m_le &
 [ STEM < "right" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_right_x_mdeg_rel",
            PHON.ONSET con ] ].

right_n1 := n_intr_le &
 [ STEM < "right" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_right_n_1_rel",
            PHON.ONSET con ] ].

right_n2 := n_vpcomp_le &
 [ STEM < "right" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_right_n_1_rel",
            PHON.ONSET con ] ].

right_post_root := adv_s_post_word_nospec_le &
 [ STEM < "right" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_right_a_1_rel",
            PHON.ONSET con ] ].

righteous_a1 := adj_intrans_le &
 [ STEM < "righteous" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_righteous_a_1_rel",
            PHON.ONSET con ] ].

righteously := adv_int_vp_le &
 [ STEM < "righteously" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_righteous_a_1_rel",
            PHON.ONSET con ] ].

righteousness_n1 := n_mass_le &
 [ STEM < "righteousness" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_righteousness_n_1_rel",
            PHON.ONSET con ] ].

rightly_adv1 := adv_int_vp_le &
 [ STEM < "rightly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_right_a_1_rel",
            PHON.ONSET con ] ].

righto_excl_post := adv_s_post_word_nospec_le &
 [ STEM < "righto" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_righto_a_1_rel",
            PHON.ONSET con ] ].

righto_excl_pre := adv_s_pre_word_root_le &
 [ STEM < "righto" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_righto_a_1_rel",
            PHON.ONSET con ] ].

rigid_a1 := adj_intrans_le &
 [ STEM < "rigid" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rigid_a_1_rel",
            PHON.ONSET con ] ].

rikshospitalet_n1 := n_proper_le &
 [ STEM < "rikshospitalet" >,
   SYNSEM [ LKEYS.KEYREL.CARG "rikshospitalet",
            PHON.ONSET con ] ].

rimskjold := n_proper_le &
 [ STEM < "rimskjold" >,
   SYNSEM [ LKEYS.KEYREL.CARG "rimskjold",
            PHON.ONSET con ] ].

ring_n1 := n_intr_le &
 [ STEM < "ring" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ring_n_1_rel",
            PHON.ONSET con ] ].

ring_v1 := v_particle_np_le &
 [ STEM < "ring" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_ring_v_up_rel" ],
            PHON.ONSET con ] ].

ring_v2 := v_np_trans_le &
 [ STEM < "ring" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ring_v_1_rel",
            PHON.ONSET con ] ].

ringdal_n1 := n_proper_le &
 [ STEM < "ringdal" >,
   SYNSEM [ LKEYS.KEYREL.CARG "ringdal",
            PHON.ONSET con ] ].

ringebu := n_proper_le &
 [ STEM < "ringebu" >,
   SYNSEM [ LKEYS.KEYREL.CARG "ringebu",
            PHON.ONSET con ] ].

ringgit_n1 := n_intr_le &
 [ STEM < "ringgit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ringgit_n_1_rel",
            PHON.ONSET con ] ].

ringgit_n2 := n_plur_nocmpnd_le &
 [ STEM < "ringgit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ringgit_n_1_rel",
            PHON.ONSET con ] ].

riot_n1 := n_intr_le &
 [ STEM < "riot" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_riot_n_1_rel",
            PHON.ONSET con ] ].

riot_v1 := v_unerg_le &
 [ STEM < "riot" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_riot_v_1_rel",
            PHON.ONSET con ] ].

rip_n1 := n_intr_le &
 [ STEM < "rip" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rip_n_1_rel",
            PHON.ONSET con ] ].

rip_off_v1 := v_particle_np_le &
 [ STEM < "rip" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_rip_v_off_rel" ],
            PHON.ONSET con ] ].

rip_up_v1 := v_particle_np_le &
 [ STEM < "rip" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_rip_v_up_rel" ],
            PHON.ONSET con ] ].

rip_v1 := v_np_trans_le &
 [ STEM < "rip" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rip_v_1_rel",
            PHON.ONSET con ] ].

ripen_v1 := v_np_trans_noger_le &
 [ STEM < "ripen" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ripen_v_cause_rel",
            PHON.ONSET con ] ].

ripen_v2 := v_unacc_le &
 [ STEM < "ripen" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ripen_v_1_rel",
            PHON.ONSET con ] ].

rise_n1 := n_intr_le &
 [ STEM < "rise" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rise_n_1_rel",
            PHON.ONSET con ] ].

rise_v2 := v_unacc_dir_le &
 [ STEM < "rise" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rise_v_1_rel",
            PHON.ONSET con ] ].

riser_n1 := n_intr_le &
 [ STEM < "riser" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_riser_n_1_rel",
            PHON.ONSET con ] ].

risk_n1 := n_mass_count_ppof_le &
 [ STEM < "risk" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_risk_n_of_rel",
            PHON.ONSET con ] ].

risk_v1 := v_np_trans_le &
 [ STEM < "risk" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_risk_v_1_rel",
            PHON.ONSET con ] ].

risky_isect := adj_intrans_le &
 [ STEM < "risky" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_risky_a_1_rel",
            PHON.ONSET con ] ].

rite_n1 := n_intr_le &
 [ STEM < "rite" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rite_n_1_rel",
            PHON.ONSET con ] ].

ritual_n1 := n_mass_count_le &
 [ STEM < "ritual" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ritual_n_1_rel",
            PHON.ONSET con ] ].

ritzy_a1 := adj_intrans_le &
 [ STEM < "ritzy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ritzy_a_1_rel",
            PHON.ONSET con ] ].

rival_n1 := n_intr_le &
 [ STEM < "rival" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rival_n_1_rel",
            PHON.ONSET con ] ].

rival_v1 := v_np_trans_le &
 [ STEM < "rival" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rival_v_1_rel",
            PHON.ONSET con ] ].

river_n1 := n_ppof_le &
 [ STEM < "river" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_river_n_of_rel",
            PHON.ONSET con ] ].

river_post_ttl := n_post_title_le &
 [ STEM < "river" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_river_n_of_rel",
            PHON.ONSET con ] ].

rjoande := n_proper_le &
 [ STEM < "rjoande" >,
   SYNSEM [ LKEYS.KEYREL.CARG "rjoande",
            PHON.ONSET con ] ].

rjukan_n1 := n_proper_le &
 [ STEM < "rjukan" >,
   SYNSEM [ LKEYS.KEYREL.CARG "rjukan",
            PHON.ONSET con ] ].

rkmo_nd := n_proper_le &
 [ STEM < "rkmo" >,
   SYNSEM [ LKEYS.KEYREL.CARG "rkmo",
            PHON.ONSET con ] ].

rma_n1 := n_intr_le &
 [ STEM < "rma" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rma_n_1_rel",
            PHON.ONSET con ] ].

road_east_post_ttl := n_post_title_le &
 [ STEM < "road", "east" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_road+east_n_1_rel",
            PHON.ONSET con ] ].

road_n1 := n_intr_le &
 [ STEM < "road" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_road_n_1_rel",
            PHON.ONSET con ] ].

road_north_post_ttl := n_post_title_le &
 [ STEM < "road", "north" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_road+north_n_1_rel",
            PHON.ONSET con ] ].

road_post_ttl := n_post_title_le &
 [ STEM < "road" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_road_n_1_rel",
            PHON.ONSET con ] ].

road_south_post_ttl := n_post_title_le &
 [ STEM < "road", "south" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_road+south_n_1_rel",
            PHON.ONSET con ] ].

road_west_post_ttl := n_post_title_le &
 [ STEM < "road", "west" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_road+west_n_1_rel",
            PHON.ONSET con ] ].

roadbed_n1 := n_intr_le &
 [ STEM < "roadbed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_roadbed_n_1_rel",
            PHON.ONSET con ] ].

roadless_a1 := adj_intrans_le &
 [ STEM < "roadless" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_roadless_a_1_rel",
            PHON.ONSET con ] ].

roam_v1 := v_np*_trans_le &
 [ STEM < "roam" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_roam_v_1_rel",
            PHON.ONSET con ] ].

roar_n1 := n_intr_le &
 [ STEM < "roar" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_roar_n_1_rel",
            PHON.ONSET con ] ].

roar_out_v1 := v_particle_np_le &
 [ STEM < "roar" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_roar_v_out_rel" ],
            PHON.ONSET con ] ].

roar_v1 := v_empty_prep_intrans_le &
 [ STEM < "roar" >,
   SYNSEM [ LKEYS [ --COMPKEY _at_p_sel_rel,
                    KEYREL.PRED "_roar_v_at_rel" ],
            PHON.ONSET con ] ].

roar_v2 := v_np*_trans_le &
 [ STEM < "roar" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_roar_v_1_rel",
            PHON.ONSET con ] ].

rob_n1 := n_proper_le &
 [ STEM < "rob" >,
   SYNSEM [ LKEYS.KEYREL.CARG "rob",
            PHON.ONSET con ] ].

rob_v1 := v_empty_prep*_trans_le &
 [ STEM < "rob" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_rob_v_of_rel" ],
            PHON.ONSET con ] ].

robb_n1 := n_proper_le &
 [ STEM < "robb" >,
   SYNSEM [ LKEYS.KEYREL.CARG "robb",
            PHON.ONSET con ] ].

robert_n1 := n_proper_le &
 [ STEM < "robert" >,
   SYNSEM [ LKEYS.KEYREL.CARG "robert",
            PHON.ONSET con ] ].

robot_n1 := n_intr_le &
 [ STEM < "robot" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_robot_n_1_rel",
            PHON.ONSET con ] ].

robust_a1 := adj_intrans_le &
 [ STEM < "robust" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_robust_a_1_rel",
            PHON.ONSET con ] ].

robustness_n1 := n_mass_le &
 [ STEM < "robustness" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_robustness_n_1_rel",
            PHON.ONSET con ] ].

rochelle_n1 := n_proper_le &
 [ STEM < "rochelle" >,
   SYNSEM [ LKEYS.KEYREL.CARG "rochelle",
            PHON.ONSET con ] ].

rock_hop_v1 := v_np*_trans_le &
 [ STEM < "rock-", "hop" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rock+hop_v_1_rel",
            PHON.ONSET con ] ].

rock_hop_v2 := v_np*_trans_le &
 [ STEM < "rock", "hop" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rock+hop_v_1_rel",
            PHON.ONSET con ] ].

rock_n1 := n_mass_count_le &
 [ STEM < "rock" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rock_n_1_rel",
            PHON.ONSET con ] ].

rock_v1 := v_np*_trans_le &
 [ STEM < "rock" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rock_v_1_rel",
            PHON.ONSET con ] ].

rockbound_a1 := adj_intrans_le &
 [ STEM < "rockbound" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rockbound_a_1_rel",
            PHON.ONSET con ] ].

rockefeller_n1 := n_proper_le &
 [ STEM < "rockefeller" >,
   SYNSEM [ LKEYS.KEYREL.CARG "rockefeller",
            PHON.ONSET con ] ].

rocket_n1 := n_intr_le &
 [ STEM < "rocket" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rocket_n_1_rel",
            PHON.ONSET con ] ].

rocket_up_v1 := v_particle_le &
 [ STEM < "rocket" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_rocket_v_up_rel" ],
            PHON.ONSET con ] ].

rocket_v1 := v_prep_dir_le &
 [ STEM < "rocket" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rocket_v_1_rel",
            PHON.ONSET con ] ].

rockslide_n1 := n_intr_le &
 [ STEM < "rockslide" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rockslide_n_1_rel",
            PHON.ONSET con ] ].

rocky_a1 := adj_intrans_le &
 [ STEM < "rocky" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rocky_a_1_rel",
            PHON.ONSET con ] ].

rod_n1 := n_intr_le &
 [ STEM < "rod" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rod_n_1_rel",
            PHON.ONSET con ] ].

rodent_n1 := n_intr_le &
 [ STEM < "rodent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rodent_n_1_rel",
            PHON.ONSET con ] ].

roe_n1 := n_mass_le &
 [ STEM < "roe" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_roe_n_1_rel",
            PHON.ONSET con ] ].

roger_n1 := n_proper_le &
 [ STEM < "roger" >,
   SYNSEM [ LKEYS.KEYREL.CARG "roger",
            PHON.ONSET con ] ].

roger_root_post := adv_s_post_word_nospec_le &
 [ STEM < "roger" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_roger_a_1_rel",
            PHON.ONSET con ] ].

roger_root_pre := adv_s_pre_word_root_le &
 [ STEM < "roger" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_roger_a_1_rel",
            PHON.ONSET con ] ].

roger_wilco_excl_post := adv_s_post_word_nospec_le &
 [ STEM < "roger", "wilco" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_roger+wilco_a_1_rel",
            PHON.ONSET con ] ].

roger_wilco_excl_pre := adv_s_pre_word_root_le &
 [ STEM < "roger", "wilco" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_roger+wilco_a_1_rel",
            PHON.ONSET con ] ].

rogers_n1 := n_proper_le &
 [ STEM < "rogers" >,
   SYNSEM [ LKEYS.KEYREL.CARG "rogers",
            PHON.ONSET con ] ].

rogne_n1 := n_proper_le &
 [ STEM < "rogne" >,
   SYNSEM [ LKEYS.KEYREL.CARG "rogne",
            PHON.ONSET con ] ].

roisheim_n1 := n_proper_le &
 [ STEM < "roisheim" >,
   SYNSEM [ LKEYS.KEYREL.CARG "roisheim",
            PHON.ONSET con ] ].

role_n1 := n_ppof_le &
 [ STEM < "role" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_role_n_of_rel",
            PHON.ONSET con ] ].

role_n2 := n_ppcomp_spr_le &
 [ STEM < "role" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_role_n_of_rel",
            PHON.ONSET con ] ].

rolf_n1 := n_proper_le &
 [ STEM < "rolf" >,
   SYNSEM [ LKEYS.KEYREL.CARG "rolf",
            PHON.ONSET con ] ].

roll_down_v1 := v_particle_np_le &
 [ STEM < "roll" >,
   SYNSEM [ LKEYS [ --COMPKEY _down_p_sel_rel,
                    KEYREL.PRED "_roll_v_down_rel" ],
            PHON.ONSET con ] ].

roll_n1 := n_ppof_le &
 [ STEM < "roll" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_roll_n_of_rel",
            PHON.ONSET con ] ].

roll_over_v1 := v_particle_np_le &
 [ STEM < "roll" >,
   SYNSEM [ LKEYS [ --COMPKEY _over_p_sel_rel,
                    KEYREL.PRED "_roll_v_over_rel" ],
            PHON.ONSET con ] ].

roll_over_v2 := v_particle_le &
 [ STEM < "roll" >,
   SYNSEM [ LKEYS [ --COMPKEY _over_p_sel_rel,
                    KEYREL.PRED "_roll_v_over_rel" ],
            PHON.ONSET con ] ].

roll_up_v1 := v_particle_np_le &
 [ STEM < "roll" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_roll_v_up_rel" ],
            PHON.ONSET con ] ].

roll_v1 := v_unacc_dir_le &
 [ STEM < "roll" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_roll_v_1_rel",
            PHON.ONSET con ] ].

roll_v2 := v_np_trans_le &
 [ STEM < "roll" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_roll_v_cause_rel",
            PHON.ONSET con ] ].

roller_n1 := n_intr_le &
 [ STEM < "roller" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_roller_n_1_rel",
            PHON.ONSET con ] ].

roller_skate_n1 := n_intr_le &
 [ STEM < "roller", "skate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_roller+skate_n_1_rel",
            PHON.ONSET con ] ].

roman := n_intr_named_le &
 [ STEM < "roman" >,
   SYNSEM [ LKEYS.KEYREL.CARG "roman",
            PHON.ONSET con ] ].

romania_n1 := n_proper_le &
 [ STEM < "romania" >,
   SYNSEM [ LKEYS.KEYREL.CARG "romania",
            PHON.ONSET con ] ].

romantic_a1 := adj_intrans_le &
 [ STEM < "romantic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_romantic_a_1_rel",
            PHON.ONSET con ] ].

romantically := adv_int_vp_le &
 [ STEM < "romantically" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_romantic_a_1_rel",
            PHON.ONSET con ] ].

rome_n1 := n_proper_city_le &
 [ STEM < "rome" >,
   SYNSEM [ LKEYS.KEYREL.CARG "rome",
            PHON.ONSET con ] ].

romp_around_v1 := v_particle_le &
 [ STEM < "romp" >,
   SYNSEM [ LKEYS [ --COMPKEY _around_p_sel_rel,
                    KEYREL.PRED "_romp_v_around_rel" ],
            PHON.ONSET con ] ].

romsdal_n1 := n_proper_city_le &
 [ STEM < "romsdal" >,
   SYNSEM [ LKEYS.KEYREL.CARG "romsdal",
            PHON.ONSET con ] ].

ron := n_proper_le &
 [ STEM < "ron" >,
   SYNSEM [ LKEYS.KEYREL.CARG "ron",
            PHON.ONSET con ] ].

rondane := n_proper_pl_le &
 [ STEM < "rondane" >,
   SYNSEM [ LKEYS.KEYREL.CARG "rondane",
            PHON.ONSET con ] ].

ronde := n_proper_le &
 [ STEM < "ronde" >,
   SYNSEM [ LKEYS.KEYREL.CARG "ronde",
            PHON.ONSET con ] ].

rondeslottet := n_proper_le &
 [ STEM < "rondeslottet" >,
   SYNSEM [ LKEYS.KEYREL.CARG "rondeslottet",
            PHON.ONSET con ] ].

rondvassbu := n_proper_le &
 [ STEM < "rondvassbu" >,
   SYNSEM [ LKEYS.KEYREL.CARG "rondvassbu",
            PHON.ONSET con ] ].

rondvassdalen := n_proper_le &
 [ STEM < "rondvassdalen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "rondvassdalen",
            PHON.ONSET con ] ].

rondvasshogda := n_proper_le &
 [ STEM < "rondvasshogda" >,
   SYNSEM [ LKEYS.KEYREL.CARG "rondvasshogda",
            PHON.ONSET con ] ].

rondvatnet := n_proper_le &
 [ STEM < "rondvatnet" >,
   SYNSEM [ LKEYS.KEYREL.CARG "rondvatnet",
            PHON.ONSET con ] ].

roof_n1 := n_intr_le &
 [ STEM < "roof" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_roof_n_1_rel",
            PHON.ONSET con ] ].

room_n1 := n_mass_count_le &
 [ STEM < "room" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_room_n_1_rel",
            PHON.ONSET con ] ].

roommate_n1 := n_intr_le &
 [ STEM < "roommate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_roommate_n_1_rel",
            PHON.ONSET con ] ].

roommate_n2 := n_intr_le &
 [ STEM < "room", "mate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_roommate_n_1_rel",
            PHON.ONSET con ] ].

roosevelt_n1 := n_proper_le &
 [ STEM < "roosevelt" >,
   SYNSEM [ LKEYS.KEYREL.CARG "roosevelt",
            PHON.ONSET con ] ].

root_around_v1 := v_particle_le &
 [ STEM < "root" >,
   SYNSEM [ LKEYS [ --COMPKEY _around_p_sel_rel,
                    KEYREL.PRED "_root_v_around_rel" ],
            PHON.ONSET con ] ].

root_for_v2 := v_empty_prep_intrans_le &
 [ STEM < "root" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_root_v_for_rel" ],
            PHON.ONSET con ] ].

root_n1 := n_intr_le &
 [ STEM < "root" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_root_n_1_rel",
            PHON.ONSET con ] ].

root_n1_i := n_intr_nospr_le &
 [ STEM < "root" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_root_n_1_rel",
            PHON.ONSET con ] ].

root_out_v1 := v_particle_np_le &
 [ STEM < "root" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_root_v_out_rel" ],
            PHON.ONSET con ] ].

root_v1 := v_np_prep_trans_le &
 [ STEM < "root" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _in_p_rel,
                    KEYREL.PRED "_root_v_1_rel" ],
            PHON.ONSET con ] ].

root_v2 := v_unerg_le &
 [ STEM < "root" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_root_v_1_rel",
            PHON.ONSET con ] ].

rootstock_n1 := n_mass_count_le &
 [ STEM < "rootstock" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rootstock_n_1_rel",
            PHON.ONSET con ] ].

rope_n1 := n_mass_count_le &
 [ STEM < "rope" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rope_n_1_rel",
            PHON.ONSET con ] ].

rope_together_v1 := v_particle_np_le &
 [ STEM < "rope" >,
   SYNSEM [ LKEYS [ --COMPKEY _together_p_sel_rel,
                    KEYREL.PRED "_rope_v_together_rel" ],
            PHON.ONSET con ] ].

rope_v1 := v_np_trans_noger_le &
 [ STEM < "rope" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rope_v_1_rel",
            PHON.ONSET con ] ].

rope_v2 := v_prep_dir_le &
 [ STEM < "rope" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rope_v_1_rel",
            PHON.ONSET con ] ].

rosanna_dana_n1 := n_proper_le &
 [ STEM < "rosanna-", "dana" >,
   SYNSEM [ LKEYS.KEYREL.CARG "rosanna_dana",
            PHON.ONSET con ] ].

rosanna_dana_n2 := n_proper_le &
 [ STEM < "rosanna", "dana" >,
   SYNSEM [ LKEYS.KEYREL.CARG "rosanna_dana",
            PHON.ONSET con ] ].

rosanne_n1 := n_proper_le &
 [ STEM < "rosanne" >,
   SYNSEM [ LKEYS.KEYREL.CARG "rosanne",
            PHON.ONSET con ] ].

rose_n1 := n_intr_le &
 [ STEM < "rose" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rose_n_1_rel",
            PHON.ONSET con ] ].

rose_n2 := n_proper_le &
 [ STEM < "rose" >,
   SYNSEM [ LKEYS.KEYREL.CARG "rose",
            PHON.ONSET con ] ].

rosendal := n_proper_le &
 [ STEM < "rosendal" >,
   SYNSEM [ LKEYS.KEYREL.CARG "rosendal",
            PHON.ONSET con ] ].

rosily := adv_int_vp_le &
 [ STEM < "rosily" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rosy_a_1_rel",
            PHON.ONSET con ] ].

ross_n1 := n_proper_le &
 [ STEM < "ross" >,
   SYNSEM [ LKEYS.KEYREL.CARG "ross",
            PHON.ONSET con ] ].

rossini_n1 := n_proper_le &
 [ STEM < "rossini" >,
   SYNSEM [ LKEYS.KEYREL.CARG "rossini",
            PHON.ONSET con ] ].

roster_n1 := n_ppof_le &
 [ STEM < "roster" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_roster_n_of_rel",
            PHON.ONSET con ] ].

rostock_n1 := n_proper_city_le &
 [ STEM < "rostock" >,
   SYNSEM [ LKEYS.KEYREL.CARG "rostock",
            PHON.ONSET con ] ].

rostropovich_n1 := n_proper_le &
 [ STEM < "rostropovich" >,
   SYNSEM [ LKEYS.KEYREL.CARG "rostropovich",
            PHON.ONSET con ] ].

rostrum_n1 := n_intr_le &
 [ STEM < "rostrum" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rostrum_n_1_rel",
            PHON.ONSET con ] ].

rosy_isect := adj_intrans_le &
 [ STEM < "rosy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rosy_a_1_rel",
            PHON.ONSET con ] ].

rot_n1 := n_mass_le &
 [ STEM < "rot" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rot_n_1_rel",
            PHON.ONSET con ] ].

rot_v1 := v_np_trans_noger_le &
 [ STEM < "rot" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rot_v_cause_rel",
            PHON.ONSET con ] ].

rot_v2 := v_unacc_le &
 [ STEM < "rot" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rot_v_1_rel",
            PHON.ONSET con ] ].

rota_n1 := n_intr_le &
 [ STEM < "rota" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rota_n_1_rel",
            PHON.ONSET con ] ].

rotary_a1 := adj_intrans_le &
 [ STEM < "rotary" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rotary_a_1_rel",
            PHON.ONSET con ] ].

rotate_v1 := v_unacc_dir_le &
 [ STEM < "rotate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rotate_v_1_rel",
            PHON.ONSET con ] ].

rotate_v2 := v_np_trans_le &
 [ STEM < "rotate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rotate_v_cause_rel",
            PHON.ONSET con ] ].

rotation_n1 := n_ppof_le &
 [ STEM < "rotation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rotation_n_of_rel",
            PHON.ONSET con ] ].

rothenbaumchaussee := n_proper_le &
 [ STEM < "rothenbaumchaussee" >,
   SYNSEM [ LKEYS.KEYREL.CARG "rothenbaumchaussee",
            PHON.ONSET con ] ].

rothenburg_n1 := n_proper_city_le &
 [ STEM < "rothenburg" >,
   SYNSEM [ LKEYS.KEYREL.CARG "rothenburg",
            PHON.ONSET con ] ].

rottweil_n1 := n_proper_le &
 [ STEM < "rottweil" >,
   SYNSEM [ LKEYS.KEYREL.CARG "rottweil",
            PHON.ONSET con ] ].

rough_adj := adj_intrans_le &
 [ STEM < "rough" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rough_a_1_rel",
            PHON.ONSET con ] ].

rough_grad := adv_degree_spec_adj_le &
 [ STEM < "rough" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rough_x_deg_rel",
            PHON.ONSET con ] ].

rough_legged_a1 := adj_intrans_le &
 [ STEM < "rough-", "legged" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rough-legged_a_1_rel",
            PHON.ONSET con ] ].

rough_out_v1 := v_particle_np_le &
 [ STEM < "rough" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_rough_v_out_rel" ],
            PHON.ONSET con ] ].

roughly := adv_int_vp_le &
 [ STEM < "roughly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rough_a_1_rel",
            PHON.ONSET con ] ].

roughly_adv := adv_degree_spec_v_le &
 [ STEM < "roughly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rough_x_deg_rel",
            PHON.ONSET con ] ].

round := p_le &
 [ STEM < "round" >,
   SYNSEM [ LKEYS.KEYREL.PRED _around_p_rel,
            PHON.ONSET con ] ].

round_a1 := adj_intrans_le &
 [ STEM < "round" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_round_a_1_rel",
            PHON.ONSET con ] ].

round_down_v1 := v_particle_np_le &
 [ STEM < "round" >,
   SYNSEM [ LKEYS [ --COMPKEY _down_p_sel_rel,
                    KEYREL.PRED "_round_v_down_rel" ],
            PHON.ONSET con ] ].

round_n1 := n_ppof_le &
 [ STEM < "round" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_round_n_of_rel",
            PHON.ONSET con ] ].

round_off_v1 := v_particle_np_le &
 [ STEM < "round" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_round_v_off_rel" ],
            PHON.ONSET con ] ].

round_out_v1 := v_particle_np_le &
 [ STEM < "round" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_round_v_out_rel" ],
            PHON.ONSET con ] ].

round_trip_n1 := n_intr_le &
 [ STEM < "round", "trip" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_round+trip_n_1_rel",
            PHON.ONSET con ] ].

round_trip_n2 := n_intr_le &
 [ STEM < "roundtrip" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_round+trip_n_1_rel",
            PHON.ONSET con ] ].

round_up_v1 := v_particle_np_le &
 [ STEM < "round" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_round_v_up_rel" ],
            PHON.ONSET con ] ].

round_v1 := v_np*_trans_le &
 [ STEM < "round" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_round_v_1_rel",
            PHON.ONSET con ] ].

roundabout_a1 := adj_intrans_le &
 [ STEM < "roundabout" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_roundabout_a_1_rel",
            PHON.ONSET con ] ].

roundabout_n1 := n_intr_le &
 [ STEM < "roundabout" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_roundabout_n_1_rel",
            PHON.ONSET con ] ].

rouse_v1 := v_np*_trans_le &
 [ STEM < "rouse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rouse_v_1_rel",
            PHON.ONSET con ] ].

rout_n1 := n_intr_le &
 [ STEM < "rout" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rout_n_1_rel",
            PHON.ONSET con ] ].

rout_v1 := v_np_trans_le &
 [ STEM < "rout" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rout_v_1_rel",
            PHON.ONSET con ] ].

route_abb_ttl := n_title_le &
 [ STEM < "rte." >,
   SYNSEM [ LKEYS.KEYREL.PRED "_route_n_1_rel",
            PHON.ONSET con ] ].

route_abb_ttl2 := n_title_le &
 [ STEM < "rte" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_route_n_1_rel",
            PHON.ONSET con ] ].

route_n1 := n_intr_nosort_le &
 [ STEM < "route" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_route_n_1_rel",
            PHON.ONSET con ] ].

route_ttl := n_title_le &
 [ STEM < "route" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_route_n_1_rel",
            PHON.ONSET con ] ].

route_v1 := v_np_trans_le &
 [ STEM < "route" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_route_v_1_rel",
            PHON.ONSET con ] ].

routine_a1 := adj_intrans_le &
 [ STEM < "routine" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_routine_a_1_rel",
            PHON.ONSET con ] ].

routine_n1 := n_intr_le &
 [ STEM < "routine" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_routine_n_1_rel",
            PHON.ONSET con ] ].

row_n1 := n_ppof_le &
 [ STEM < "row" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_row_n_of_rel",
            PHON.ONSET con ] ].

row_n2 := n_group_ppof_le &
 [ STEM < "row" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_row_n_of_rel",
            PHON.ONSET con ] ].

row_v1 := v_np*_trans_le &
 [ STEM < "row" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_row_v_1_rel",
            PHON.ONSET con ] ].

rowboat_n1 := n_intr_le &
 [ STEM < "rowboat" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rowboat_n_1_rel",
            PHON.ONSET con ] ].

rower_n1 := n_intr_le &
 [ STEM < "rower" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rower_n_1_rel",
            PHON.ONSET con ] ].

royal := n_intr_named_le &
 [ STEM < "royal" >,
   SYNSEM [ LKEYS.KEYREL.CARG "royal",
            PHON.ONSET con ] ].

royal_hanover := n_intr_named_le &
 [ STEM < "royal", "hanover" >,
   SYNSEM [ LKEYS.KEYREL.CARG "royal_hanover",
            PHON.ONSET con ] ].

rparen_pct := punct_rp_le &
 [ STEM < ")" > ].

rub_in_v1 := v_particle_np_le &
 [ STEM < "rub" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_rub_v_in_rel" ],
            PHON.ONSET con ] ].

rub_n1 := n_intr_le &
 [ STEM < "rub" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rub_n_1_rel",
            PHON.ONSET con ] ].

rub_off_v1 := v_particle_np_le &
 [ STEM < "rub" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_rub_v_off_rel" ],
            PHON.ONSET con ] ].

rub_out_v1 := v_particle_np_le &
 [ STEM < "rub" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_rub_v_out_rel" ],
            PHON.ONSET con ] ].

rub_v1 := v_np*_trans_le &
 [ STEM < "rub" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rub_v_1_rel",
            PHON.ONSET con ] ].

rub_v2 := v_np_prep_trans_dors_le &
 [ STEM < "rub" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rub_v_1_rel",
            PHON.ONSET con ] ].

rubber_n1 := n_mass_count_le &
 [ STEM < "rubber" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rubber_n_1_rel",
            PHON.ONSET con ] ].

rubbish_n1 := n_mass_le &
 [ STEM < "rubbish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rubbish_n_1_rel",
            PHON.ONSET con ] ].

rubbish_root_post := adv_s_post_word_nospec_le &
 [ STEM < "rubbish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rubbish_a_1_rel",
            PHON.ONSET con ] ].

rubbish_root_pre := adv_s_pre_word_root_le &
 [ STEM < "rubbish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rubbish_a_1_rel",
            PHON.ONSET con ] ].

rubens_n1 := n_proper_le &
 [ STEM < "rubens" >,
   SYNSEM [ LKEYS.KEYREL.CARG "rubens",
            PHON.ONSET con ] ].

ruble_n1 := n_intr_le &
 [ STEM < "ruble" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ruble_n_1_rel",
            PHON.ONSET con ] ].

rubus_chamÃ¦orus_n1 := n_proper_le &
 [ STEM < "rubus", "chamÃ¦orus" >,
   SYNSEM [ LKEYS.KEYREL.CARG "rubus_chamÃ¦orus",
            PHON.ONSET con ] ].

ruby_a1 := adj_intrans_le &
 [ STEM < "ruby" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ruby_a_1_rel",
            PHON.ONSET con ] ].

ruby_n1 := n_mass_count_le &
 [ STEM < "ruby" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ruby_n_1_rel",
            PHON.ONSET con ] ].

rucksack_n1 := n_intr_le &
 [ STEM < "rucksack" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rucksack_n_1_rel",
            PHON.ONSET con ] ].

rudder_n1 := n_intr_le &
 [ STEM < "rudder" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rudder_n_1_rel",
            PHON.ONSET con ] ].

ruddy_a1 := adj_intrans_le &
 [ STEM < "ruddy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ruddy_a_1_rel",
            PHON.ONSET con ] ].

rude_a1 := adj_intrans_le &
 [ STEM < "rude" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rude_a_1_rel",
            PHON.ONSET con ] ].

rudi_n1 := n_proper_le &
 [ STEM < "rudi" >,
   SYNSEM [ LKEYS.KEYREL.CARG "rudi",
            PHON.ONSET con ] ].

rudiment_n1 := n_intr_le &
 [ STEM < "rudiment" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rudiment_n_1_rel",
            PHON.ONSET con ] ].

rudimentary_a1 := adj_intrans_le &
 [ STEM < "rudimentary" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rudimentary_a_1_rel",
            PHON.ONSET con ] ].

rugby_n1 := n_mass_le &
 [ STEM < "rugby" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rugby_n_1_rel",
            PHON.ONSET con ] ].

rugged_a1 := adj_intrans_le &
 [ STEM < "rugged" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rugged_a_1_rel",
            PHON.ONSET con ] ].

ruin_n1 := n_mass_count_le &
 [ STEM < "ruin" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ruin_n_1_rel",
            PHON.ONSET con ] ].

ruin_v1 := v_np*_trans_le &
 [ STEM < "ruin" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ruin_v_1_rel",
            PHON.ONSET con ] ].

rule_n1 := n_ppof_nosort_le &
 [ STEM < "rule" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rule_n_of_rel",
            PHON.ONSET con ] ].

rule_out_v1 := v_particle_np_le &
 [ STEM < "rule" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_rule_v_out_rel" ],
            PHON.ONSET con ] ].

rule_v1 := v_np*_trans_le &
 [ STEM < "rule" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rule_v_1_rel",
            PHON.ONSET con ] ].

ruler_n1 := n_intr_le &
 [ STEM < "ruler" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ruler_n_1_rel",
            PHON.ONSET con ] ].

rum_n1 := n_mass_le &
 [ STEM < "rum" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rum_n_1_rel",
            PHON.ONSET con ] ].

rumble_n1 := n_intr_le &
 [ STEM < "rumble" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rumble_n_1_rel",
            PHON.ONSET con ] ].

rumble_v1 := v_prep_dir_le &
 [ STEM < "rumble" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rumble_v_1_rel",
            PHON.ONSET con ] ].

ruminant_n1 := n_intr_le &
 [ STEM < "ruminant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ruminant_n_1_rel",
            PHON.ONSET con ] ].

rumor_n1 := n_mass_count_le &
 [ STEM < "rumor" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rumor_n_1_rel",
            PHON.ONSET con ] ].

rumored_v1 := v_sorb_pass_le &
 [ STEM < "rumored" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rumor_v_1_rel",
            PHON.ONSET con ] ].

run_across_v1 := v_empty_prep_intrans_le &
 [ STEM < "run" >,
   SYNSEM [ LKEYS [ --COMPKEY _across_p_sel_rel,
                    KEYREL.PRED "_run_v_across_rel" ],
            PHON.ONSET con ] ].

run_around_n1 := n_intr_le &
 [ STEM < "run", "around" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_run_around_n_1_rel",
            PHON.ONSET con ] ].

run_around_n2 := n_intr_le &
 [ STEM < "run-", "around" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_run_around_n_1_rel",
            PHON.ONSET con ] ].

run_around_v1 := v_particle_le &
 [ STEM < "run" >,
   SYNSEM [ LKEYS [ --COMPKEY _around_p_sel_rel,
                    KEYREL.PRED "_run_v_around_rel" ],
            PHON.ONSET con ] ].

run_back_v2 := v_particle_le &
 [ STEM < "run" >,
   SYNSEM [ LKEYS [ --COMPKEY _back_p_sel_rel,
                    KEYREL.PRED "_run_v_back_rel" ],
            PHON.ONSET con ] ].

run_for_v1 := v_empty_prep_intrans_le &
 [ STEM < "run" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_trgt_rel,
                    KEYREL.PRED "_run_v_for_rel" ],
            PHON.ONSET con ] ].

run_for_v2 := v_empty_prep_intrans_le &
 [ STEM < "run" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_run_v_for_rel" ],
            PHON.ONSET con ] ].

run_into_v1 := v_empty_prep_intrans_le &
 [ STEM < "run" >,
   SYNSEM [ LKEYS [ --COMPKEY _into_p_sel_rel,
                    KEYREL.PRED "_run_v_into_rel" ],
            PHON.ONSET con ] ].

run_n1 := n_ppof_le &
 [ STEM < "run" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_run_n_of_rel",
            PHON.ONSET con ] ].

run_off_v1 := v_particle_np_le &
 [ STEM < "run" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_run_v_off_rel" ],
            PHON.ONSET con ] ].

run_out_v1 := v_particle_empty_pp_le &
 [ STEM < "run" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    --OCOMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_run_v_out-of_rel" ],
            PHON.ONSET con ] ].

run_out_v2 := v_particle_le &
 [ STEM < "run" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_run_v_out_rel" ],
            PHON.ONSET con ] ].

run_over_v3 := v_particle_le &
 [ STEM < "run" >,
   SYNSEM [ LKEYS [ --COMPKEY _over_p_sel_rel,
                    KEYREL.PRED "_run_v_over_rel" ],
            PHON.ONSET con ] ].

run_prd_v1 := v_subj_equi_prd_adj_le &
 [ STEM < "run" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_run_v_prd_rel",
            PHON.ONSET con ] ].

run_v2 := v_np_trans_le &
 [ STEM < "run" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_run_v_operate_rel",
            PHON.ONSET con ] ].

run_v3 := v_prep_dir_le &
 [ STEM < "run" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_run_v_unspec_rel",
            PHON.ONSET con ] ].

run_v4 := v_loc_inv_mv_le &
 [ STEM < "run" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_run_v_unspec_rel",
            PHON.ONSET con ] ].

runde_n1 := n_proper_city_le &
 [ STEM < "runde" >,
   SYNSEM [ LKEYS.KEYREL.CARG "runde",
            PHON.ONSET con ] ].

rundtom_n1 := n_proper_le &
 [ STEM < "rundtom" >,
   SYNSEM [ LKEYS.KEYREL.CARG "rundtom",
            PHON.ONSET con ] ].

runic_a1 := adj_intrans_le &
 [ STEM < "runic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_runic_a_1_rel",
            PHON.ONSET con ] ].

runoff_n1 := n_mass_le &
 [ STEM < "runoff" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_runoff_n_1_rel",
            PHON.ONSET con ] ].

runoff_n2 := n_mass_le &
 [ STEM < "run-", "off" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_runoff_n_1_rel",
            PHON.ONSET con ] ].

rupee_n1 := n_intr_le &
 [ STEM < "rupee" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rupee_n_1_rel",
            PHON.ONSET con ] ].

rural_a1 := adj_intrans_le &
 [ STEM < "rural" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rural_a_1_rel",
            PHON.ONSET con ] ].

rush_n1 := n_intr_le &
 [ STEM < "rush" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rush_n_1_rel",
            PHON.ONSET con ] ].

rush_out_v1 := v_particle_np_le &
 [ STEM < "rush" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_rush_v_out_rel" ],
            PHON.ONSET con ] ].

rush_v1 := v_ditrans_le &
 [ STEM < "rush" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rush_v_1_rel",
            PHON.ONSET con ] ].

rush_v2 := v_np_trans_noger_le &
 [ STEM < "rush" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rush_v_1_rel",
            PHON.ONSET con ] ].

rush_v3 := v_prep_dir_le &
 [ STEM < "rush" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rush_v_1_rel",
            PHON.ONSET con ] ].

russell_n1 := n_proper_le &
 [ STEM < "russell" >,
   SYNSEM [ LKEYS.KEYREL.CARG "russell",
            PHON.ONSET con ] ].

russia_n1 := n_proper_le &
 [ STEM < "russia" >,
   SYNSEM [ LKEYS.KEYREL.CARG "russia",
            PHON.ONSET con ] ].

russian_a1 := adj_intrans_le &
 [ STEM < "russian" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_russian_a_1_rel",
            PHON.ONSET con ] ].

russian_n1 := n_proper_le &
 [ STEM < "russian" >,
   SYNSEM [ LKEYS.KEYREL.CARG "russian",
            PHON.ONSET con ] ].

russian_n2 := n_intr_le &
 [ STEM < "russian" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_russian_n_1_rel",
            PHON.ONSET con ] ].

russvatnet := n_proper_le &
 [ STEM < "russvatnet" >,
   SYNSEM [ LKEYS.KEYREL.CARG "russvatnet",
            PHON.ONSET con ] ].

rust_away_v1 := v_particle_le &
 [ STEM < "rust" >,
   SYNSEM [ LKEYS [ --COMPKEY _away_p_sel_rel,
                    KEYREL.PRED "_rust_v_away_rel" ],
            PHON.ONSET con ] ].

rust_in_v1 := v_particle_le &
 [ STEM < "rust" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_rust_v_in_rel" ],
            PHON.ONSET con ] ].

rust_n1 := n_mass_le &
 [ STEM < "rust" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rust_n_1_rel",
            PHON.ONSET con ] ].

rust_out_v1 := v_particle_le &
 [ STEM < "rust" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_rust_v_out_rel" ],
            PHON.ONSET con ] ].

rust_v1 := v_unacc_le &
 [ STEM < "rust" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rust_v_1_rel",
            PHON.ONSET con ] ].

rust_v2 := v_np_trans_noger_le &
 [ STEM < "rust" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rust_v_cause_rel",
            PHON.ONSET con ] ].

rustic_a1 := adj_intrans_le &
 [ STEM < "rustic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rustic_a_1_rel",
            PHON.ONSET con ] ].

rusty_isect := adj_intrans_le &
 [ STEM < "rusty" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rusty_a_1_rel",
            PHON.ONSET con ] ].

ruth_n1 := n_proper_le &
 [ STEM < "ruth" >,
   SYNSEM [ LKEYS.KEYREL.CARG "ruth",
            PHON.ONSET con ] ].

rv_ttl := n_title_le &
 [ STEM < "rv" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rv_n_1_rel",
            PHON.ONSET con ] ].

rv_ttl_2 := n_title_le &
 [ STEM < "rv." >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rv_n_1_rel",
            PHON.ONSET con ] ].

rÃ¥mund_n1 := n_proper_le &
 [ STEM < "rÃ¥mund" >,
   SYNSEM [ LKEYS.KEYREL.CARG "rÃ¥mund",
            PHON.ONSET con ] ].

rÃ¸dÃ¸ya_n1 := n_proper_city_le &
 [ STEM < "rÃ¸dÃ¸ya" >,
   SYNSEM [ LKEYS.KEYREL.CARG "rÃ¸dÃ¸ya",
            PHON.ONSET con ] ].

rÃ¸isheim_n1 := n_proper_le &
 [ STEM < "rÃ¸isheim" >,
   SYNSEM [ LKEYS.KEYREL.CARG "rÃ¸isheim",
            PHON.ONSET con ] ].

rÃ¸njus_n1 := n_proper_le &
 [ STEM < "rÃ¸njus" >,
   SYNSEM [ LKEYS.KEYREL.CARG "rÃ¸njus",
            PHON.ONSET con ] ].

rÃ¸nnaug_n1 := n_proper_le &
 [ STEM < "rÃ¸nnaug" >,
   SYNSEM [ LKEYS.KEYREL.CARG "rÃ¸nnaug",
            PHON.ONSET con ] ].

rÃ¸nnhaug_n1 := n_proper_le &
 [ STEM < "rÃ¸nnhaug" >,
   SYNSEM [ LKEYS.KEYREL.CARG "rÃ¸nnhaug",
            PHON.ONSET con ] ].

rÃ¸rbu_n1 := n_intr_le &
 [ STEM < "rÃ¸rbu" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rÃ¸rbu_n_1_rel",
            PHON.ONSET con ] ].

s-and-h_n1 := n_intr_le &
 [ STEM < "shipping", "and", "handling" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shipping+and+handling_n_1_rel",
            PHON.ONSET con ] ].

s-and-h_n2 := n_intr_le &
 [ STEM < "shipping", "&", "handling" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shipping+and+handling_n_1_rel",
            PHON.ONSET con ] ].

s100_n1 := n_intr_le &
 [ STEM < "s100" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_s100_n_1_rel",
            PHON.ONSET con ] ].

s40_n1 := n_intr_le &
 [ STEM < "s40" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_s40_n_1_rel",
            PHON.ONSET con ] ].

s_dash_pct := punct_s_dash_le &
 [ STEM < "-" >,
   SYNSEM.PHON.ONSET onset ].

s_dbl_dash_pct := punct_s_dash_le &
 [ STEM < "__" >,
   SYNSEM.PHON.ONSET onset ].

s_diff_np1 := n_proper_le &
 [ STEM < "s.diff" >,
   SYNSEM [ LKEYS.KEYREL.CARG "s_diff",
            PHON.ONSET voc ] ].

s_np1 := n_proper_le &
 [ STEM < "_s" >,
   SYNSEM [ LKEYS.KEYREL.CARG "s",
            PHON.ONSET voc ] ].

s_period_np2 := n_proper_le &
 [ STEM < "_s." >,
   SYNSEM [ LKEYS.KEYREL.CARG "s",
            PHON.ONSET voc ] ].

saarbruecken_n1 := n_proper_city_le &
 [ STEM < "saarbruecken" >,
   SYNSEM [ LKEYS.KEYREL.CARG "saarbruecken",
            PHON.ONSET con ] ].

saber_n1 := n_intr_le &
 [ STEM < "saber" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_saber_n_1_rel",
            PHON.ONSET con ] ].

sabre_n1 := n_intr_le &
 [ STEM < "sabre" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sabre_n_1_rel",
            PHON.ONSET con ] ].

sack_n1 := n_intr_le &
 [ STEM < "sack" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sack_n_1_rel",
            PHON.ONSET con ] ].

sack_v1 := v_np_trans_le &
 [ STEM < "sack" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sack_v_1_rel",
            PHON.ONSET con ] ].

sacred_a1 := adj_intrans_le &
 [ STEM < "sacred" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sacred_a_1_rel",
            PHON.ONSET con ] ].

sacrifice_n1 := n_mass_count_le &
 [ STEM < "sacrifice" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sacrifice_n_1_rel",
            PHON.ONSET con ] ].

sacrifice_v1 := v_np_trans_le &
 [ STEM < "sacrifice" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sacrifice_v_1_rel",
            PHON.ONSET con ] ].

sad_a1 := adj_intrans_le &
 [ STEM < "sad" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sad_a_1_rel",
            PHON.ONSET con ] ].

sad_a2 := adj_reg_cp_le &
 [ STEM < "sad" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sad_a_1_rel",
            PHON.ONSET con ] ].

sad_a3 := adj_reg_equi_le &
 [ STEM < "sad" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sad_a_1_rel",
            PHON.ONSET con ] ].

saddle_n1 := n_intr_le &
 [ STEM < "saddle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_saddle_n_1_rel",
            PHON.ONSET con ] ].

sadly_adv1 := adv_int_vp_le &
 [ STEM < "sadly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sad_a_1_rel",
            PHON.ONSET con ] ].

sadness_n1 := n_mass_le &
 [ STEM < "sadness" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sadness_n_1_rel",
            PHON.ONSET con ] ].

safe_a1 := adj_trans_le &
 [ STEM < "safe" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_safe_a_for_rel" ],
            PHON.ONSET con ] ].

safe_a2 := adj_reg_atrans_le &
 [ STEM < "safe" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_safe_a_for_rel",
            PHON.ONSET con ] ].

safeguard_n1 := n_intr_le &
 [ STEM < "safeguard" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_safeguard_n_1_rel",
            PHON.ONSET con ] ].

safeguard_v1 := v_np_trans_le &
 [ STEM < "safeguard" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_safeguard_v_1_rel",
            PHON.ONSET con ] ].

safely_isect := adv_int_vp_le &
 [ STEM < "safely" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_safe_a_for_rel",
            PHON.ONSET con ] ].

safer_a1 := adj_comp_le &
 [ STEM < "safer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_safe_a_for_rel",
            PHON.ONSET con ] ].

safest_a1 := adj_superl_le &
 [ STEM < "safest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_safe_a_for_rel",
            PHON.ONSET con ] ].

safety_n1 := n_mass_le &
 [ STEM < "safety" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_safety_n_1_rel",
            PHON.ONSET con ] ].

saga_n1 := n_ppof_le &
 [ STEM < "saga" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_saga_n_of_rel",
            PHON.ONSET con ] ].

sagstuen_n1 := n_proper_le &
 [ STEM < "sagstuen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sagstuen",
            PHON.ONSET con ] ].

sagtinden := n_proper_le &
 [ STEM < "sagtinden" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sagtinden",
            PHON.ONSET con ] ].

sail_n1 := n_intr_le &
 [ STEM < "sail" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sail_n_1_rel",
            PHON.ONSET con ] ].

sail_v1 := v_prep_dir_le &
 [ STEM < "sail" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sail_v_1_rel",
            PHON.ONSET con ] ].

sail_v2 := v_np_trans_noger_le &
 [ STEM < "sail" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sail_v_cause_rel",
            PHON.ONSET con ] ].

sailor_n1 := n_intr_le &
 [ STEM < "sailor" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sailor_n_1_rel",
            PHON.ONSET con ] ].

saint_louis_n1 := n_proper_city_le &
 [ STEM < "saint", "louis" >,
   SYNSEM [ LKEYS.KEYREL.CARG "saint_louis",
            PHON.ONSET con ] ].

saint_louis_n2 := n_proper_city_le &
 [ STEM < "st", "louis" >,
   SYNSEM [ LKEYS.KEYREL.CARG "saint_louis",
            PHON.ONSET con ] ].

saint_louis_n3 := n_proper_city_le &
 [ STEM < "st.", "louis" >,
   SYNSEM [ LKEYS.KEYREL.CARG "saint_louis",
            PHON.ONSET voc ] ].

saint_n1 := n_intr_le &
 [ STEM < "saint" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_saint_n_1_rel",
            PHON.ONSET con ] ].

saint_ttl := n_title_le &
 [ STEM < "saint" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_st_n_1_rel",
            PHON.ONSET con ] ].

sake_n := n_mass_count_ppof_le &
 [ STEM < "sake" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sake_n_of_rel",
            PHON.ONSET con ] ].

salacious_a1 := adj_intrans_le &
 [ STEM < "salacious" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_salacious_a_1_rel",
            PHON.ONSET con ] ].

salad_n1 := n_mass_count_le &
 [ STEM < "salad" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_salad_n_1_rel",
            PHON.ONSET con ] ].

salary_n1 := n_intr_le &
 [ STEM < "salary" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_salary_n_1_rel",
            PHON.ONSET con ] ].

sale_n1 := n_mass_count_ppof_le &
 [ STEM < "sale" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sale_n_of_rel",
            PHON.ONSET con ] ].

sales_a1 := adj_intrans_le &
 [ STEM < "sales" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sales_a_1_rel",
            PHON.ONSET con ] ].

salient_a1 := adj_intrans_le &
 [ STEM < "salient" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_salient_a_1_rel",
            PHON.ONSET con ] ].

salinas_n1 := n_proper_city_le &
 [ STEM < "salinas" >,
   SYNSEM [ LKEYS.KEYREL.CARG "salinas",
            PHON.ONSET con ] ].

saline_a1 := adj_intrans_le &
 [ STEM < "saline" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_saline_a_1_rel",
            PHON.ONSET con ] ].

saline_n1 := n_mass_count_le &
 [ STEM < "saline" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_saline_n_1_rel",
            PHON.ONSET con ] ].

sally_n1 := n_intr_le &
 [ STEM < "sally" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sally_n_1_rel",
            PHON.ONSET con ] ].

sally_n2 := n_proper_le &
 [ STEM < "sally" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sally",
            PHON.ONSET con ] ].

sally_v1 := v_prep_dir_le &
 [ STEM < "sally" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sally_v_1_rel",
            PHON.ONSET con ] ].

salmon_n1 := n_mass_count_le &
 [ STEM < "salmon" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_salmon_n_1_rel",
            PHON.ONSET con ] ].

salt_lake_city_n1 := n_proper_city_le &
 [ STEM < "salt", "lake", "city" >,
   SYNSEM [ LKEYS.KEYREL.CARG "salt_lake_city",
            PHON.ONSET con ] ].

salt_n1 := n_mass_count_le &
 [ STEM < "salt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_salt_n_1_rel",
            PHON.ONSET con ] ].

salt_v1 := v_np*_trans_le &
 [ STEM < "salt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_salt_v_1_rel",
            PHON.ONSET con ] ].

saltcellar_n1 := n_intr_le &
 [ STEM < "saltcellar" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_saltcellar_n_1_rel",
            PHON.ONSET con ] ].

saltpeter_n1 := n_mass_count_le &
 [ STEM < "saltpeter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_saltpeter_n_1_rel",
            PHON.ONSET con ] ].

saltstraumen := n_proper_le &
 [ STEM < "saltstraumen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "saltstraumen",
            PHON.ONSET con ] ].

salute_n1 := n_intr_le &
 [ STEM < "salute" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_salute_n_1_rel",
            PHON.ONSET con ] ].

salute_v1 := v_np*_trans_le &
 [ STEM < "salute" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_salute_v_1_rel",
            PHON.ONSET con ] ].

sam_n1 := n_proper_le &
 [ STEM < "sam" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sam",
            PHON.ONSET con ] ].

same_a1 := adj_same_le &
 [ STEM < "same" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_same_a_as_rel",
            PHON.ONSET con ] ].

sample_n1 := n_ppof_le &
 [ STEM < "sample" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sample_n_of_rel",
            PHON.ONSET con ] ].

sample_v1 := v_np_trans_le &
 [ STEM < "sample" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sample_v_1_rel",
            PHON.ONSET con ] ].

sampling_n1 := n_ppof_le &
 [ STEM < "sampling" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sampling_n_of_rel",
            PHON.ONSET con ] ].

samson_n1 := n_proper_le &
 [ STEM < "samson" >,
   SYNSEM [ LKEYS.KEYREL.CARG "samson",
            PHON.ONSET con ] ].

samsonite_n1 := n_proper_le &
 [ STEM < "samsonite" >,
   SYNSEM [ LKEYS.KEYREL.CARG "samsonite",
            PHON.ONSET con ] ].

samsung_n1 := n_proper_le &
 [ STEM < "samsung" >,
   SYNSEM [ LKEYS.KEYREL.CARG "samsung",
            PHON.ONSET con ] ].

samuel_n1 := n_proper_le &
 [ STEM < "samuel" >,
   SYNSEM [ LKEYS.KEYREL.CARG "samuel",
            PHON.ONSET con ] ].

san_diego_n1 := n_proper_city_le &
 [ STEM < "san", "diego" >,
   SYNSEM [ LKEYS.KEYREL.CARG "san_diego",
            PHON.ONSET con ] ].

san_francisco_n1 := n_proper_city_le &
 [ STEM < "san", "francisco" >,
   SYNSEM [ LKEYS.KEYREL.CARG "san_francisco",
            PHON.ONSET con ] ].

san_jose_n1 := n_proper_city_le &
 [ STEM < "san", "jose" >,
   SYNSEM [ LKEYS.KEYREL.CARG "san_jose",
            PHON.ONSET con ] ].

sanction_v1 := v_np_trans_le &
 [ STEM < "sanction" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sanction_v_1_rel",
            PHON.ONSET con ] ].

sanctions_n1 := n_plur_le &
 [ STEM < "sanction" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sanctions_n_1_rel",
            PHON.ONSET con ] ].

sanctuary_n1 := n_mass_count_le &
 [ STEM < "sanctuary" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sanctuary_n_1_rel",
            PHON.ONSET con ] ].

sand_n1 := n_mass_count_le &
 [ STEM < "sand" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sand_n_1_rel",
            PHON.ONSET con ] ].

sande_n1 := n_proper_le &
 [ STEM < "sande" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sande",
            PHON.ONSET con ] ].

sandelvbrean_n1 := n_proper_le &
 [ STEM < "sandelvbrean" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sandelvbrean",
            PHON.ONSET con ] ].

sandelvbreen_n1 := n_proper_le &
 [ STEM < "sandelvbreen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sandelvbreen",
            PHON.ONSET con ] ].

sandra_n1 := n_proper_le &
 [ STEM < "sandra" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sandra",
            PHON.ONSET con ] ].

sandvig := n_proper_le &
 [ STEM < "sandvig" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sandvig",
            PHON.ONSET con ] ].

sandy := n_proper_le &
 [ STEM < "sandy" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sandy",
            PHON.ONSET con ] ].

sandy_a1 := adj_intrans_le &
 [ STEM < "sandy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sandy_a_1_rel",
            PHON.ONSET con ] ].

sanity_n1 := n_mass_le &
 [ STEM < "sanity" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sanity_n_1_rel",
            PHON.ONSET con ] ].

santa_barbara_n1 := n_proper_city_le &
 [ STEM < "santa", "barbara" >,
   SYNSEM [ LKEYS.KEYREL.CARG "santa_barbara",
            PHON.ONSET con ] ].

santa_clara_n1 := n_proper_city_le &
 [ STEM < "santa", "clara" >,
   SYNSEM [ LKEYS.KEYREL.CARG "santa_clara",
            PHON.ONSET con ] ].

santa_claus_n1 := n_proper_le &
 [ STEM < "santa", "claus" >,
   SYNSEM [ LKEYS.KEYREL.CARG "santa_claus",
            PHON.ONSET con ] ].

santa_cruz_n1 := n_proper_city_le &
 [ STEM < "santa", "cruz" >,
   SYNSEM [ LKEYS.KEYREL.CARG "santa_cruz",
            PHON.ONSET con ] ].

santa_n1 := n_proper_le &
 [ STEM < "santa" >,
   SYNSEM [ LKEYS.KEYREL.CARG "santa",
            PHON.ONSET con ] ].

sap_n1 := n_mass_count_le &
 [ STEM < "sap" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sap_n_1_rel",
            PHON.ONSET con ] ].

sap_v1 := v_np_trans_le &
 [ STEM < "sap" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sap_v_1_rel",
            PHON.ONSET con ] ].

sapling_n1 := n_intr_le &
 [ STEM < "sapling" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sapling_n_1_rel",
            PHON.ONSET con ] ].

sara := n_proper_fem_le &
 [ STEM < "sara" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sara",
            PHON.ONSET con ] ].

sarcasm_n1 := n_mass_le &
 [ STEM < "sarcasm" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sarcasm_n_1_rel",
            PHON.ONSET con ] ].

sars_n1 := n_proper_le &
 [ STEM < "sars" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sars",
            PHON.ONSET con ] ].

sarum_n1 := n_proper_le &
 [ STEM < "sarum" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sarum",
            PHON.ONSET con ] ].

sas := n_proper_le &
 [ STEM < "sas" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sas",
            PHON.ONSET con ] ].

sash_n1 := n_intr_le &
 [ STEM < "sash" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sash_n_1_rel",
            PHON.ONSET con ] ].

satellite_n1 := n_intr_le &
 [ STEM < "satellite" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_satellite_n_1_rel",
            PHON.ONSET con ] ].

satin_n1 := n_mass_count_le &
 [ STEM < "satin" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_satin_n_1_rel",
            PHON.ONSET con ] ].

satire_n1 := n_mass_count_le &
 [ STEM < "satire" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_satire_n_1_rel",
            PHON.ONSET con ] ].

satisfaction_n1 := n_mass_ppcomp_le &
 [ STEM < "satisfaction" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_satisfaction_n_of_rel" ],
            PHON.ONSET con ] ].

satisfactory_a1 := adj_trans_le &
 [ STEM < "satisfactory" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_satisfactory_a_for_rel" ],
            PHON.ONSET con ] ].

satisfactory_a2 := adj_reg_atrans_le &
 [ STEM < "satisfactory" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_satisfactory_a_for_rel",
            PHON.ONSET con ] ].

satisfactory_a3 := adj_reg_atrans_cp_le &
 [ STEM < "satisfactory" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_satisfactory_a_for_rel",
            PHON.ONSET con ] ].

satisfied_a1 := adj_intrans_le &
 [ STEM < "satisfied" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_satisfied_a_1_rel",
            PHON.ONSET con ] ].

satisfy_v1 := v_np_trans_le &
 [ STEM < "satisfy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_satisfy_v_1_rel",
            PHON.ONSET con ] ].

satisfying_isect := adj_intrans_le &
 [ STEM < "satisfying" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_satisfying_a_1_rel",
            PHON.ONSET con ] ].

saturate_v1 := v_np_trans_le &
 [ STEM < "saturate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_saturate_v_1_rel",
            PHON.ONSET con ] ].

saturday_n1 := n_day_of_week_le &
 [ STEM < "saturday" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sat",
            PHON.ONSET con ] ].

saturday_n2 := n_day_of_week_le &
 [ STEM < "sat" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sat",
            PHON.ONSET con ] ].

saturday_n3 := n_day_of_week_le &
 [ STEM < "sat." >,
   SYNSEM [ LKEYS.KEYREL.CARG "sat",
            PHON.ONSET con ] ].

saturday_night_live_n1 := n_proper_le &
 [ STEM < "saturday", "night", "live" >,
   SYNSEM [ LKEYS.KEYREL.CARG "saturday_night_live",
            PHON.ONSET con ] ].

saturn_n1 := n_proper_le &
 [ STEM < "saturn" >,
   SYNSEM [ LKEYS.KEYREL.CARG "saturn",
            PHON.ONSET con ] ].

satyr_n1 := n_intr_le &
 [ STEM < "satyr" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_satyr_n_1_rel",
            PHON.ONSET con ] ].

sauber-und-co_n1 := n_proper_le &
 [ STEM < "saube", "und", "co" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sauber-und-co",
            PHON.ONSET con ] ].

sauce_n1 := n_mass_le &
 [ STEM < "sauce" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sauce_n_1_rel",
            PHON.ONSET con ] ].

sauerkraut_n1 := n_mass_le &
 [ STEM < "sauerkraut" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sauerkraut_n_1_rel",
            PHON.ONSET con ] ].

sauna_n1 := n_intr_le &
 [ STEM < "sauna" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sauna_n_1_rel",
            PHON.ONSET con ] ].

sausage_n1 := n_mass_count_le &
 [ STEM < "sausage" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sausage_n_1_rel",
            PHON.ONSET con ] ].

save := p_le &
 [ STEM < "save" >,
   SYNSEM [ LKEYS.KEYREL.PRED _save_p_rel,
            PHON.ONSET con ] ].

save_v1 := v_np_trans_le &
 [ STEM < "save" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_save_v_1_rel",
            PHON.ONSET con ] ].

save_v2 := v_ditrans_only_le &
 [ STEM < "save" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_save_v_1_rel",
            PHON.ONSET con ] ].

saved_isect := adj_attr_intrans_le &
 [ STEM < "saved" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_saved_a_1_rel",
            PHON.ONSET con ] ].

savings_n1 := n_mass_le &
 [ STEM < "savings" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_savings_n_1_rel",
            PHON.ONSET con ] ].

savor_n1 := n_mass_le &
 [ STEM < "savor" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_savor_n_1_rel",
            PHON.ONSET con ] ].

savor_of_v1 := v_empty_prep_intrans_le &
 [ STEM < "savor" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_savor_v_of_rel" ],
            PHON.ONSET con ] ].

savor_v1 := v_np_trans_le &
 [ STEM < "savor" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_savor_v_1_rel",
            PHON.ONSET con ] ].

savorett_n1 := n_proper_le &
 [ STEM < "savorett" >,
   SYNSEM [ LKEYS.KEYREL.CARG "savorett",
            PHON.ONSET con ] ].

savory_a1 := adj_intrans_le &
 [ STEM < "savory" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_savory_a_1_rel",
            PHON.ONSET con ] ].

saw_n1 := n_intr_le &
 [ STEM < "saw" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_saw_n_1_rel",
            PHON.ONSET con ] ].

saw_v1 := v_np*_trans_le &
 [ STEM < "saw" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_saw_v_1_rel",
            PHON.ONSET con ] ].

sawhorse_n1 := n_intr_le &
 [ STEM < "sawhorse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sawhorse_n_1_rel",
            PHON.ONSET con ] ].

sawtooth_n1 := n_intr_le &
 [ STEM < "sawtooth" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sawtooth_n_1_rel",
            PHON.ONSET con ] ].

saxifrage_n1 := n_intr_le &
 [ STEM < "saxifrage" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_saxifrage_n_1_rel",
            PHON.ONSET con ] ].

saxifrage_n2 := n_mass_kind_le &
 [ STEM < "saxifrage" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_saxifrage_n_kind_rel",
            PHON.ONSET con ] ].

saxon_n1 := n_intr_named_le &
 [ STEM < "saxon" >,
   SYNSEM [ LKEYS.KEYREL.CARG "saxon",
            PHON.ONSET con ] ].

say_about_v1 := v_empty_prep_trans_le &
 [ STEM < "say" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _about_p_sel_rel,
                    KEYREL.PRED "_say_v_about_rel" ],
            PHON.ONSET con ] ].

say_disc_adv := adv_disc_like_preh_le &
 [ STEM < "say" >,
   SYNSEM [ LKEYS.KEYREL.CARG "say",
            PHON.ONSET con ] ].

say_n1 := n_mass_count_le &
 [ STEM < "say" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_say_n_1_rel",
            PHON.ONSET con ] ].

say_quote_v1 := v_quote_top_le &
 [ STEM < "say" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_say_v_1_rel",
            PHON.ONSET con ] ].

say_quote_v2 := v_quote_inv_le &
 [ STEM < "say" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_say_v_1_rel",
            PHON.ONSET con ] ].

say_quote_v3 := v_quote_mc_le &
 [ STEM < "say" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_say_v_1_rel",
            PHON.ONSET con ] ].

say_v1 := v_np*_trans_le &
 [ STEM < "say" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_say_v_1_rel",
            PHON.ONSET con ] ].

say_v2 := v_pp_cp_le &
 [ STEM < "say" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_say_v_to_rel" ],
            PHON.ONSET con ] ].

say_v3 := v_prep_intrans_event_le &
 [ STEM < "say" >,
   SYNSEM [ LKEYS [ --COMPKEY loc_abstr_rel,
                    KEYREL.PRED "_say_v_loc_rel" ],
            PHON.ONSET con ] ].

scale_n1 := n_mass_count_le &
 [ STEM < "scale" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_scale_n_1_rel",
            PHON.ONSET con ] ].

scale_v1 := v_np*_trans_le &
 [ STEM < "scale" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_scale_v_1_rel",
            PHON.ONSET con ] ].

scan_n1 := n_ppof_le &
 [ STEM < "scan" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_scan_n_of_rel",
            PHON.ONSET con ] ].

scan_v1 := v_np*_trans_le &
 [ STEM < "scan" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_scan_v_1_rel",
            PHON.ONSET con ] ].

scandal_n1 := n_mass_count_le &
 [ STEM < "scandal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_scandal_n_1_rel",
            PHON.ONSET con ] ].

scandinavia := n_proper_le &
 [ STEM < "scandinavia" >,
   SYNSEM [ LKEYS.KEYREL.CARG "scandinavia",
            PHON.ONSET con ] ].

scandinavian := n_proper_le &
 [ STEM < "scandinavian" >,
   SYNSEM [ LKEYS.KEYREL.CARG "scandinavian",
            PHON.ONSET con ] ].

scandinavians := n_proper_le &
 [ STEM < "scandinavians" >,
   SYNSEM [ LKEYS.KEYREL.CARG "scandinavians",
            PHON.ONSET con ] ].

scanner_n1 := n_ppof_le &
 [ STEM < "scanner" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_scanner_n_of_rel",
            PHON.ONSET con ] ].

scant_a1 := adj_intrans_le &
 [ STEM < "scant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_scant_a_1_rel",
            PHON.ONSET con ] ].

scantily := adv_int_vp_le &
 [ STEM < "scantily" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_scanty_a_1_rel",
            PHON.ONSET con ] ].

scanty_a1 := adj_intrans_le &
 [ STEM < "scanty" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_scanty_a_1_rel",
            PHON.ONSET con ] ].

scapoff := n_proper_le &
 [ STEM < "scapoff" >,
   SYNSEM [ LKEYS.KEYREL.CARG "scapoff",
            PHON.ONSET con ] ].

scar_n1 := n_intr_le &
 [ STEM < "scar" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_scar_n_1_rel",
            PHON.ONSET con ] ].

scarazzo_n1 := n_proper_le &
 [ STEM < "scarazzo" >,
   SYNSEM [ LKEYS.KEYREL.CARG "scarazzo",
            PHON.ONSET con ] ].

scarce_a1 := adj_intrans_le &
 [ STEM < "scarce" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_scarce_a_1_rel",
            PHON.ONSET con ] ].

scarcely_adv1 := adv_int_vp_aux_le &
 [ STEM < "scarcely" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_scarce_a_1_rel",
            PHON.ONSET con ] ].

scare_n1 := n_intr_le &
 [ STEM < "scare" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_scare_n_1_rel",
            PHON.ONSET con ] ].

scare_v1 := v_np_trans_le &
 [ STEM < "scare" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_scare_v_1_rel",
            PHON.ONSET con ] ].

scared_isect := adj_intrans_le &
 [ STEM < "scared" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_scared_a_1_rel",
            PHON.ONSET con ] ].

scarf_down_v1 := v_particle_np_le &
 [ STEM < "scarf" >,
   SYNSEM [ LKEYS [ --COMPKEY _down_p_sel_rel,
                    KEYREL.PRED "_scarf_v_down_rel" ],
            PHON.ONSET con ] ].

scarf_n1 := n_intr_le &
 [ STEM < "scarf" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_scarf_n_1_rel",
            PHON.ONSET con ] ].

scarlet_a1 := adj_intrans_le &
 [ STEM < "scarlet" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_scarlet_a_1_rel",
            PHON.ONSET con ] ].

scarlet_n1 := n_mass_count_le &
 [ STEM < "scarlet" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_scarlet_n_1_rel",
            PHON.ONSET con ] ].

scarlet_n2 := n_proper_le &
 [ STEM < "scarlet" >,
   SYNSEM [ LKEYS.KEYREL.CARG "scarlet",
            PHON.ONSET con ] ].

scatter_v1 := v_np*_trans_le &
 [ STEM < "scatter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_scatter_v_1_rel",
            PHON.ONSET con ] ].

scatter_v2 := v_np_prep_trans_le &
 [ STEM < "scatter" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _with_p_rel,
                    KEYREL.PRED "_scatter_v_1_rel" ],
            PHON.ONSET con ] ].

scattered_isect := adj_intrans_le &
 [ STEM < "scattered" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_scattered_a_1_rel",
            PHON.ONSET con ] ].

scenario_n1 := n_intr_le &
 [ STEM < "scenario" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_scenario_n_1_rel",
            PHON.ONSET con ] ].

scene_n1 := n_ppof_le &
 [ STEM < "scene" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_scene_n_of_rel",
            PHON.ONSET con ] ].

scenery_n1 := n_mass_count_le &
 [ STEM < "scenery" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_scenery_n_1_rel",
            PHON.ONSET con ] ].

scenic_a1 := adj_intrans_le &
 [ STEM < "scenic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_scenic_a_1_rel",
            PHON.ONSET con ] ].

scent_n1 := n_mass_count_ppof_le &
 [ STEM < "scent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_scent_n_of_rel",
            PHON.ONSET con ] ].

sceptical_isect := adj_intrans_le &
 [ STEM < "sceptical" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sceptical_a_1_rel",
            PHON.ONSET con ] ].

sceptically := adv_int_vp_le &
 [ STEM < "sceptically" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sceptical_a_1_rel",
            PHON.ONSET con ] ].

schauspielhaus_n1 := n_proper_le &
 [ STEM < "schauspielhaus" >,
   SYNSEM [ LKEYS.KEYREL.CARG "schauspielhaus",
            PHON.ONSET con ] ].

schedule_i_n1 := n_bare_nomod_le &
 [ STEM < "schedule" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_schedule_n_1_rel",
            PHON.ONSET con ] ].

schedule_in_v1 := v_particle_np_le &
 [ STEM < "schedule" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_schedule_v_in_rel" ],
            PHON.ONSET con ] ].

schedule_n1 := n_intr_nosort_le &
 [ STEM < "schedule" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_schedule_n_1_rel",
            PHON.ONSET con ] ].

schedule_v1 := v_np_trans_le &
 [ STEM < "schedule" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_schedule_v_1_rel",
            PHON.ONSET con ] ].

scheduled_a1 := adj_attr_intrans_le &
 [ STEM < "scheduled" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_scheduled_a_1_rel",
            PHON.ONSET con ] ].

schedulewise_adv1 := adv_int_vp_post_le &
 [ STEM < "schedulewise" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_schedulewise_a_1_rel",
            PHON.ONSET con ] ].

schelderup_n1 := n_proper_le &
 [ STEM < "schelderup" >,
   SYNSEM [ LKEYS.KEYREL.CARG "schelderup",
            PHON.ONSET con ] ].

scheme_n1 := n_intr_le &
 [ STEM < "scheme" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_scheme_n_1_rel",
            PHON.ONSET con ] ].

schenley_n1 := n_proper_le &
 [ STEM < "schenley" >,
   SYNSEM [ LKEYS.KEYREL.CARG "schenley",
            PHON.ONSET con ] ].

scheytt_n1 := n_proper_le &
 [ STEM < "scheytt" >,
   SYNSEM [ LKEYS.KEYREL.CARG "scheytt",
            PHON.ONSET con ] ].

schilling_n1 := n_intr_le &
 [ STEM < "schilling" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shilling_n_1_rel",
            PHON.ONSET con ] ].

schlep_around_v1 := v_particle_np_le &
 [ STEM < "schlep" >,
   SYNSEM [ LKEYS [ --COMPKEY _around_p_sel_rel,
                    KEYREL.PRED "_schlep_v_around_rel" ],
            PHON.ONSET con ] ].

schlep_v1 := v_np_trans_le &
 [ STEM < "schlep" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_schlep_v_1_rel",
            PHON.ONSET con ] ].

schleswig_n1 := n_proper_le &
 [ STEM < "schleswig" >,
   SYNSEM [ LKEYS.KEYREL.CARG "schleswig",
            PHON.ONSET con ] ].

schlitz_n1 := n_proper_le &
 [ STEM < "schlitz" >,
   SYNSEM [ LKEYS.KEYREL.CARG "schlitz",
            PHON.ONSET con ] ].

schloss := n_intr_named_le &
 [ STEM < "schloss" >,
   SYNSEM [ LKEYS.KEYREL.CARG "schloss",
            PHON.ONSET con ] ].

schlosshotel := n_intr_named_le &
 [ STEM < "schlosshotel" >,
   SYNSEM [ LKEYS.KEYREL.CARG "schlosshotel",
            PHON.ONSET con ] ].

schlosshotel_hanover := n_intr_named_le &
 [ STEM < "schlosshotel", "hanover" >,
   SYNSEM [ LKEYS.KEYREL.CARG "schlosshotel_hanover",
            PHON.ONSET con ] ].

schmidt_n1 := n_proper_le &
 [ STEM < "schmidt" >,
   SYNSEM [ LKEYS.KEYREL.CARG "schmidt",
            PHON.ONSET con ] ].

schmidtke_n1 := n_proper_le &
 [ STEM < "schmidtke" >,
   SYNSEM [ LKEYS.KEYREL.CARG "schmidtke",
            PHON.ONSET con ] ].

schmuck_n1 := n_intr_le &
 [ STEM < "schmuck" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_schmuck_n_1_rel",
            PHON.ONSET con ] ].

scholar_n1 := n_intr_le &
 [ STEM < "scholar" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_scholar_n_1_rel",
            PHON.ONSET con ] ].

school_n1 := n_mass_count_le &
 [ STEM < "school" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_school_n_1_rel",
            PHON.ONSET con ] ].

school_post_ttl := n_post_title_le &
 [ STEM < "school" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_school_n_1_rel",
            PHON.ONSET con ] ].

school_v1 := v_np_trans_le &
 [ STEM < "school" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_school_v_1_rel",
            PHON.ONSET con ] ].

school_v2 := v_np_prep_trans_le &
 [ STEM < "school" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _in_p_rel,
                    KEYREL.PRED "_school_v_1_rel" ],
            PHON.ONSET con ] ].

schoolbag_n1 := n_intr_le &
 [ STEM < "schoolbag" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_schoolbag_n_1_rel",
            PHON.ONSET con ] ].

schreiber_n1 := n_proper_le &
 [ STEM < "schreiber" >,
   SYNSEM [ LKEYS.KEYREL.CARG "schreiber",
            PHON.ONSET con ] ].

schwaebischgmuend_nd := n_proper_le &
 [ STEM < "schwaebisch", "gmuend" >,
   SYNSEM [ LKEYS.KEYREL.CARG "schwaebischgmuend",
            PHON.ONSET con ] ].

schwarzenegger_n1 := n_proper_le &
 [ STEM < "schwarzenegger" >,
   SYNSEM [ LKEYS.KEYREL.CARG "schwarzenegger",
            PHON.ONSET con ] ].

schwerin_n1 := n_proper_le &
 [ STEM < "schwerin" >,
   SYNSEM [ LKEYS.KEYREL.CARG "schwerin",
            PHON.ONSET con ] ].

science_n1 := n_mass_count_le &
 [ STEM < "science" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_science_n_1_rel",
            PHON.ONSET con ] ].

scientific_a1 := adj_intrans_le &
 [ STEM < "scientific" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_scientific_a_1_rel",
            PHON.ONSET con ] ].

scientifically_adv1 := adv_int_vp_post_le &
 [ STEM < "scientifically" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_scientific_a_1_rel",
            PHON.ONSET con ] ].

scientist_n1 := n_intr_le &
 [ STEM < "scientist" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_scientist_n_1_rel",
            PHON.ONSET con ] ].

scientology_n1 := n_proper_le &
 [ STEM < "scientology" >,
   SYNSEM [ LKEYS.KEYREL.CARG "scientology",
            PHON.ONSET con ] ].

scissors_n1 := n_plur_le &
 [ STEM < "scissor" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_scissors_n_1_rel",
            PHON.ONSET con ] ].

scissors_n2 := n_intr_sg_le &
 [ STEM < "scissors" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_scissors_n_1_rel",
            PHON.ONSET con ] ].

scold_v1 := v_np*_trans_le &
 [ STEM < "scold" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_scold_v_1_rel",
            PHON.ONSET con ] ].

scoop_n1 := n_intr_le &
 [ STEM < "scoop" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_scoop_n_1_rel",
            PHON.ONSET con ] ].

scoop_out_v1 := v_particle_np_le &
 [ STEM < "scoop" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_scoop_v_out_rel" ],
            PHON.ONSET con ] ].

scoop_up_v1 := v_particle_np_le &
 [ STEM < "scoop" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_scoop_v_up_rel" ],
            PHON.ONSET con ] ].

scoop_v1 := v_np_trans_le &
 [ STEM < "scoop" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_scoop_v_1_rel",
            PHON.ONSET con ] ].

scooter_n1 := n_intr_le &
 [ STEM < "scooter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_scooter_n_1_rel",
            PHON.ONSET con ] ].

scope_n1 := n_ppof_le &
 [ STEM < "scope" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_scope_n_of_rel",
            PHON.ONSET con ] ].

score_n1 := n_ppof_le &
 [ STEM < "score" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_score_n_of_rel",
            PHON.ONSET con ] ].

score_v1 := v_np*_trans_le &
 [ STEM < "score" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_score_v_1_rel",
            PHON.ONSET con ] ].

scores_n1 := n_plur_xmod_le &
 [ STEM < "scores" >,
   SYNSEM [ LKEYS.KEYREL.CARG "20",
            PHON.ONSET con ] ].

scores_n2 := n_plur_ppcomp_card_le &
 [ STEM < "scores" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.CARG "20" ],
            PHON.ONSET con ] ].

scorpio_n1 := n_proper_le &
 [ STEM < "scorpio" >,
   SYNSEM [ LKEYS.KEYREL.CARG "scorpio",
            PHON.ONSET con ] ].

scot_n1 := n_intr_le &
 [ STEM < "scot" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_scot_n_1_rel",
            PHON.ONSET con ] ].

scotland_n1 := n_proper_le &
 [ STEM < "scotland" >,
   SYNSEM [ LKEYS.KEYREL.CARG "scotland",
            PHON.ONSET con ] ].

scott_n1 := n_proper_le &
 [ STEM < "scott" >,
   SYNSEM [ LKEYS.KEYREL.CARG "scott",
            PHON.ONSET con ] ].

scour_v1 := v_np_trans_le &
 [ STEM < "scour" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_scour_v_1_rel",
            PHON.ONSET con ] ].

scout_for_v1 := v_empty_prep_intrans_le &
 [ STEM < "scout" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_scout_v_for_rel" ],
            PHON.ONSET con ] ].

scout_n1 := n_intr_le &
 [ STEM < "scout" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_scout_n_1_rel",
            PHON.ONSET con ] ].

scout_out_v1 := v_particle_np_le &
 [ STEM < "scout" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_scout_v_out_rel" ],
            PHON.ONSET con ] ].

scout_v1 := v_np*_trans_le &
 [ STEM < "scout" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_scout_v_1_rel",
            PHON.ONSET con ] ].

scrabble_n1 := n_proper_le &
 [ STEM < "scrabble" >,
   SYNSEM [ LKEYS.KEYREL.CARG "scrabble",
            PHON.ONSET con ] ].

scraggy_a1 := adj_intrans_le &
 [ STEM < "scraggy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_scraggy_a_1_rel",
            PHON.ONSET con ] ].

scramble_n1 := n_intr_le &
 [ STEM < "scramble" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_scramble_n_1_rel",
            PHON.ONSET con ] ].

scramble_v1 := v_prep_dir_le &
 [ STEM < "scramble" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_scramble_v_1_rel",
            PHON.ONSET con ] ].

scramble_v2 := v_np_trans_noger_le &
 [ STEM < "scramble" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_scramble_v_1_rel",
            PHON.ONSET con ] ].

scrap_n1 := n_mass_count_ppof_le &
 [ STEM < "scrap" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_scrap_n_of_rel",
            PHON.ONSET con ] ].

scrap_v1 := v_np_trans_le &
 [ STEM < "scrap" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_scrap_v_1_rel",
            PHON.ONSET con ] ].

scrape_away_v1 := v_particle_np_le &
 [ STEM < "scrape" >,
   SYNSEM [ LKEYS [ --COMPKEY _away_p_sel_rel,
                    KEYREL.PRED "_scrape_v_away_rel" ],
            PHON.ONSET con ] ].

scrape_n1 := n_intr_le &
 [ STEM < "scrape" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_scrape_n_1_rel",
            PHON.ONSET con ] ].

scrape_off_v1 := v_particle_np_le &
 [ STEM < "scrape" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_scrape_v_off_rel" ],
            PHON.ONSET con ] ].

scrape_out_v1 := v_particle_np_le &
 [ STEM < "scrape" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_scrape_v_out_rel" ],
            PHON.ONSET con ] ].

scrape_together_v1 := v_particle_np_le &
 [ STEM < "scrape" >,
   SYNSEM [ LKEYS [ --COMPKEY _together_p_sel_rel,
                    KEYREL.PRED "_scrape_v_together_rel" ],
            PHON.ONSET con ] ].

scrape_up_v1 := v_particle_np_le &
 [ STEM < "scrape" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_scrape_v_up_rel" ],
            PHON.ONSET con ] ].

scrape_v1 := v_np*_trans_le &
 [ STEM < "scrape" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_scrape_v_1_rel",
            PHON.ONSET con ] ].

scratch_n1 := n_mass_count_le &
 [ STEM < "scratch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_scratch_n_1_rel",
            PHON.ONSET con ] ].

scratch_v1 := v_particle_np_le &
 [ STEM < "scratch" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_scratch_v_up_rel" ],
            PHON.ONSET con ] ].

scratch_v2 := v_np*_trans_le &
 [ STEM < "scratch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_scratch_v_1_rel",
            PHON.ONSET con ] ].

scream_at_v1 := v_empty_prep_intrans_le &
 [ STEM < "scream" >,
   SYNSEM [ LKEYS [ --COMPKEY _at_p_sel_rel,
                    KEYREL.PRED "_scream_v_at_rel" ],
            PHON.ONSET con ] ].

scream_n1 := n_ppof_le &
 [ STEM < "scream" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_scream_n_of_rel",
            PHON.ONSET con ] ].

scream_v1 := v_np*_trans_le &
 [ STEM < "scream" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_scream_v_1_rel",
            PHON.ONSET con ] ].

scream_v3 := v_cp_prop_non_trans_le &
 [ STEM < "scream" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_scream_v_1_rel",
            PHON.ONSET con ] ].

scree_n1 := n_mass_le &
 [ STEM < "scree" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_scree_n_1_rel",
            PHON.ONSET con ] ].

screen_n1 := n_intr_le &
 [ STEM < "screen" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_screen_n_1_rel",
            PHON.ONSET con ] ].

screen_name_n1 := n_intr_le &
 [ STEM < "screen", "name" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_screen+name_n_1_rel",
            PHON.ONSET con ] ].

screen_name_title := n_title_le &
 [ STEM < "screen", "name" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_screen+name_n_1_rel",
            PHON.ONSET con ] ].

screen_out_v1 := v_particle_np_le &
 [ STEM < "screen" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_screen_v_out_rel" ],
            PHON.ONSET con ] ].

screen_v1 := v_np_trans_le &
 [ STEM < "screen" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_screen_v_1_rel",
            PHON.ONSET con ] ].

screw_in_v1 := v_particle_np_le &
 [ STEM < "screw" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_screw_v_in_rel" ],
            PHON.ONSET con ] ].

screw_n1 := n_intr_le &
 [ STEM < "screw" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_screw_n_1_rel",
            PHON.ONSET con ] ].

screw_up_v1 := v_particle_np_le &
 [ STEM < "screw" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_screw_v_up_rel" ],
            PHON.ONSET con ] ].

screw_up_v2 := v_particle_le &
 [ STEM < "screw" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_screw_v_up_rel" ],
            PHON.ONSET con ] ].

screw_v1 := v_np*_trans_le &
 [ STEM < "screw" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_screw_v_1_rel",
            PHON.ONSET con ] ].

screwed_isect := adj_intrans_le &
 [ STEM < "screwed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_screwed_a_1_rel",
            PHON.ONSET con ] ].

scribble_down_v1 := v_particle_np_le &
 [ STEM < "scribble" >,
   SYNSEM [ LKEYS [ --COMPKEY _down_p_sel_rel,
                    KEYREL.PRED "_scribble_v_down_rel" ],
            PHON.ONSET con ] ].

scribble_v1 := v_np*_trans_le &
 [ STEM < "scribble" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_scribble_v_1_rel",
            PHON.ONSET con ] ].

scribe_n1 := n_intr_le &
 [ STEM < "scribe" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_scribe_n_1_rel",
            PHON.ONSET con ] ].

script_n1 := n_mass_count_le &
 [ STEM < "script" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_script_n_1_rel",
            PHON.ONSET con ] ].

script_v1 := v_np_trans_le &
 [ STEM < "script" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_script_v_1_rel",
            PHON.ONSET con ] ].

scripture_abb_n1 := n_mass_count_le &
 [ STEM < "script." >,
   SYNSEM [ LKEYS.KEYREL.PRED "_scripture_n_1_rel",
            PHON.ONSET con ] ].

scripture_n1 := n_mass_count_le &
 [ STEM < "scripture" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_scripture_n_1_rel",
            PHON.ONSET con ] ].

scrooge_n1 := n_proper_le &
 [ STEM < "scrooge" >,
   SYNSEM [ LKEYS.KEYREL.CARG "scrooge",
            PHON.ONSET con ] ].

scrub_n1 := n_mass_count_le &
 [ STEM < "scrub" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_scrub_n_1_rel",
            PHON.ONSET con ] ].

scrub_off_v1 := v_particle_np_le &
 [ STEM < "scrub" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_scrub_v_off_rel" ],
            PHON.ONSET con ] ].

scrub_out_v1 := v_particle_np_le &
 [ STEM < "scrub" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_scrub_v_out_rel" ],
            PHON.ONSET con ] ].

scrub_v1 := v_np*_trans_le &
 [ STEM < "scrub" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_scrub_v_1_rel",
            PHON.ONSET con ] ].

scrupulous_a1 := adj_intrans_le &
 [ STEM < "scrupulous" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_scrupulous_a_1_rel",
            PHON.ONSET con ] ].

scsi_n1 := n_mass_count_le &
 [ STEM < "scsi" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_scsi_n_1_rel",
            PHON.ONSET con ] ].

scuba_n1 := n_intr_le &
 [ STEM < "scuba" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_scuba_n_1_rel",
            PHON.ONSET con ] ].

sculpt_v1 := v_np*_trans_le &
 [ STEM < "sculpt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sculpt_v_1_rel",
            PHON.ONSET con ] ].

sculpture_n1 := n_mass_count_le &
 [ STEM < "sculpture" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sculpture_n_1_rel",
            PHON.ONSET con ] ].

se_isect := adj_attr_intrans_le &
 [ STEM < "se" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_southwest_a_1_rel",
            PHON.ONSET con ] ].

se_n1 := n_ppof_le &
 [ STEM < "se" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_se_n_of_rel",
            PHON.ONSET con ] ].

se_n2 := n_adv_dir_le &
 [ STEM < "se" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED _southeast_a_1_rel,
                    KEYREL.PRED place_n_rel ],
            PHON.ONSET con ] ].

sea_i_n1 := n_bare_nomod_le &
 [ STEM < "sea" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sea_n_of_rel",
            PHON.ONSET con ] ].

sea_level_n2 := n_mass_count_le &
 [ STEM < "sea-", "level" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sea+level_n_1_rel",
            PHON.ONSET con ] ].

sea_n1 := n_ppof_le &
 [ STEM < "sea" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sea_n_of_rel",
            PHON.ONSET con ] ].

sea_world_n1 := n_proper_city_le &
 [ STEM < "sea", "world" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sea_world",
            PHON.ONSET con ] ].

seafarer_n1 := n_intr_le &
 [ STEM < "seafarer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_seafarer_n_1_rel",
            PHON.ONSET con ] ].

seagoing_a1 := adj_intrans_le &
 [ STEM < "seagoing" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_seagoing_a_1_rel",
            PHON.ONSET con ] ].

seagoing_a2 := adj_intrans_le &
 [ STEM < "sea-", "going" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_seagoing_a_1_rel",
            PHON.ONSET con ] ].

seagull_n1 := n_intr_le &
 [ STEM < "seagull" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_seagull_n_1_rel",
            PHON.ONSET con ] ].

seal_in_v1 := v_particle_np_le &
 [ STEM < "seal" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_seal_v_in_rel" ],
            PHON.ONSET con ] ].

seal_n1 := n_intr_le &
 [ STEM < "seal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_seal_n_1_rel",
            PHON.ONSET con ] ].

seal_off_v1 := v_particle_np_le &
 [ STEM < "seal" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_seal_v_off_rel" ],
            PHON.ONSET con ] ].

seal_out_v1 := v_particle_np_le &
 [ STEM < "seal" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_seal_v_out_rel" ],
            PHON.ONSET con ] ].

seal_up_v1 := v_particle_np_le &
 [ STEM < "seal" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_seal_v_up_rel" ],
            PHON.ONSET con ] ].

seal_v1 := v_np_trans_le &
 [ STEM < "seal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_seal_v_1_rel",
            PHON.ONSET con ] ].

seaman_n1 := n_intr_le &
 [ STEM < "seaman" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_seaman_n_1_rel",
            PHON.ONSET con ] ].

seamark_n1 := n_intr_le &
 [ STEM < "seamark" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_seamark_n_1_rel",
            PHON.ONSET con ] ].

sean := n_proper_le &
 [ STEM < "sean" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sean",
            PHON.ONSET con ] ].

search_for_v1 := v_empty_prep_intrans_le &
 [ STEM < "search" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_search_v_for_rel" ],
            PHON.ONSET con ] ].

search_for_v2 := v_empty_prep_trans_le &
 [ STEM < "search" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_search_v_for_rel" ],
            PHON.ONSET con ] ].

search_n1 := n_mass_count_ppof_le &
 [ STEM < "search" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_search_n_of_rel",
            PHON.ONSET con ] ].

search_v1 := v_np*_trans_le &
 [ STEM < "search" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_search_v_1_rel",
            PHON.ONSET con ] ].

seascape_n1 := n_intr_le &
 [ STEM < "seascape" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_seascape_n_1_rel",
            PHON.ONSET con ] ].

seashore_n1 := n_mass_count_le &
 [ STEM < "seashore" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_seashore_n_1_rel",
            PHON.ONSET con ] ].

seaside_n1 := n_intr_le &
 [ STEM < "seaside" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_seaside_n_1_rel",
            PHON.ONSET con ] ].

seaside_n2 := n_intr_le &
 [ STEM < "sea", "side" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_seaside_n_1_rel",
            PHON.ONSET con ] ].

season_i_n1 := n_bare_le &
 [ STEM < "season" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_season_n_1_rel",
            PHON.ONSET con ] ].

season_n1 := n_intr_temp_ssn_le &
 [ STEM < "season" >,
   SYNSEM [ LKEYS.KEYREL.CARG "season",
            PHON.ONSET con ] ].

seasonable_a1 := adj_intrans_le &
 [ STEM < "seasonable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_seasonable_a_1_rel",
            PHON.ONSET con ] ].

seasonably_adv1 := adv_int_vp_le &
 [ STEM < "seasonably" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_seasonable_a_1_rel",
            PHON.ONSET con ] ].

seasonal_a1 := adj_intrans_le &
 [ STEM < "seasonal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_seasonal_a_1_rel",
            PHON.ONSET con ] ].

seasoned_a1 := adj_intrans_le &
 [ STEM < "seasoned" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_seasoned_a_1_rel",
            PHON.ONSET con ] ].

seat_n1 := n_intr_le &
 [ STEM < "seat" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_seat_n_1_rel",
            PHON.ONSET con ] ].

seat_v1 := v_np_trans_le &
 [ STEM < "seat" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_seat_v_1_rel",
            PHON.ONSET con ] ].

seat_v2 := v_np_prep_trans_dors_le &
 [ STEM < "seat" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_seat_v_1_rel",
            PHON.ONSET con ] ].

seater_n1 := n_intr_le &
 [ STEM < "seater" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_seater_n_1_rel",
            PHON.ONSET con ] ].

seattle_n1 := n_proper_city_le &
 [ STEM < "seattle" >,
   SYNSEM [ LKEYS.KEYREL.CARG "seattle",
            PHON.ONSET con ] ].

sec_n1 := n_intr_le &
 [ STEM < "sec" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sec_n_1_rel",
            PHON.ONSET con ] ].

sec_n2 := n_intr_le &
 [ STEM < "securities", "and", "exchange", "commission" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sec_n_1_rel",
            PHON.ONSET con ] ].

seclude_v1 := v_np_trans_le &
 [ STEM < "seclude" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_seclude_v_1_rel",
            PHON.ONSET con ] ].

second := adj_bare_unspecified_ord_one_le &
 [ STEM < "second" >,
   SYNSEM [ LKEYS.KEYREL.CARG "2",
            PHON.ONSET con ] ].

second_day := n_day_of_month_le &
 [ STEM < "second" >,
   SYNSEM [ LKEYS.KEYREL.CARG "2",
            PHON.ONSET con ] ].

second_day_num := n_day_of_month_le &
 [ STEM < "2nd" >,
   SYNSEM [ LKEYS.KEYREL.CARG "2",
            PHON.ONSET con ] ].

second_hand_a1 := adj_intrans_le &
 [ STEM < "second-", "hand" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_second+hand_a_1_rel",
            PHON.ONSET con ] ].

second_hand_a2 := adj_intrans_le &
 [ STEM < "second", "hand" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_second+hand_a_1_rel",
            PHON.ONSET con ] ].

second_mentioned_a1 := adj_intrans_le &
 [ STEM < "second", "mentioned" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_second+mentioned_a_1_rel",
            PHON.ONSET con ] ].

second_n1 := n_temp_nd_le &
 [ STEM < "second" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_second_n_1_rel",
            PHON.ONSET con ] ].

second_n2 := n_temp_nd_le &
 [ STEM < "sec" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_second_n_1_rel",
            PHON.ONSET con ] ].

second_v1 := v_np_trans_le &
 [ STEM < "second" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_second_v_1_rel",
            PHON.ONSET con ] ].

second_v2 := v_to_trans_le &
 [ STEM < "second" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_second_v_to_rel",
            PHON.ONSET con ] ].

secondary_a1 := adj_intrans_le &
 [ STEM < "secondary" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_secondary_a_1_rel",
            PHON.ONSET con ] ].

secondly_adv1 := adv_int_vp_le &
 [ STEM < "secondly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_secondly_a_1_rel",
            PHON.ONSET con ] ].

secondly_root_post := adv_s_post_word_nospec_le &
 [ STEM < "secondly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_secondly_a_1_rel",
            PHON.ONSET con ] ].

secondly_root_pre := adv_s_pre_word_root_le &
 [ STEM < "secondly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_secondly_a_1_rel",
            PHON.ONSET con ] ].

secret_a1 := adj_intrans_le &
 [ STEM < "secret" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_secret_a_1_rel",
            PHON.ONSET con ] ].

secretary_general_n1 := n_ppof_le &
 [ STEM < "secretary-", "general" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_secretary_general_n_of_rel",
            PHON.ONSET con ] ].

secretary_general_ttl := n_title_le &
 [ STEM < "secretary-", "general" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_secretary_general_n_of_rel",
            PHON.ONSET con ] ].

secretary_n1 := n_ppof_le &
 [ STEM < "secretary" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_secretary_n_of_rel",
            PHON.ONSET con ] ].

secretary_of_state_n1 := n_intr_le &
 [ STEM < "secretary", "of", "state" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_secretary+of+state_n_1_rel",
            PHON.ONSET con ] ].

secretary_of_state_ttl := n_title_le &
 [ STEM < "secretary", "of", "state" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_secretary+of+state_n_1_rel",
            PHON.ONSET con ] ].

secrete_v1 := v_np_trans_le &
 [ STEM < "secrete" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_secrete_v_1_rel",
            PHON.ONSET con ] ].

secretion_n1 := n_mass_count_le &
 [ STEM < "secretion" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_secretion_n_1_rel",
            PHON.ONSET con ] ].

sect_n1 := n_intr_le &
 [ STEM < "sect" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sect_n_1_rel",
            PHON.ONSET con ] ].

section_n1 := n_ppcomp_le &
 [ STEM < "section" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_section_n_of_rel" ],
            PHON.ONSET con ] ].

section_n2 := n_ppcomp_spr_le &
 [ STEM < "section" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_section_n_of_rel",
            PHON.ONSET con ] ].

sector_n1 := n_intr_le &
 [ STEM < "sector" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sector_n_1_rel",
            PHON.ONSET con ] ].

secure_a1 := adj_intrans_le &
 [ STEM < "secure" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_secure_a_1_rel",
            PHON.ONSET con ] ].

secure_v1 := v_np_trans_le &
 [ STEM < "secure" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_secure_v_1_rel",
            PHON.ONSET con ] ].

securely_adv1 := adv_int_vp_le &
 [ STEM < "securely" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_secure_a_1_rel",
            PHON.ONSET con ] ].

securer := adj_comp_le &
 [ STEM < "securer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_secure_a_1_rel",
            PHON.ONSET con ] ].

securest_a1 := adj_superl_le &
 [ STEM < "securest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_secure_a_1_rel",
            PHON.ONSET con ] ].

security_n1 := n_mass_le &
 [ STEM < "security" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_security_n_1_rel",
            PHON.ONSET con ] ].

sediment_n1 := n_mass_count_le &
 [ STEM < "sediment" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sediment_n_1_rel",
            PHON.ONSET con ] ].

seduce_v1 := v_np_trans_le &
 [ STEM < "seduce" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_seduce_v_1_rel",
            PHON.ONSET con ] ].

seduce_v2 := v_obj_equi_le &
 [ STEM < "seduce" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_seduce_v_1_rel",
            PHON.ONSET con ] ].

see_about_v1 := v_empty_prep_intrans_le &
 [ STEM < "see" >,
   SYNSEM [ LKEYS [ --COMPKEY _about_p_sel_rel,
                    KEYREL.PRED "_see_v_about_rel" ],
            PHON.ONSET con ] ].

see_around_v1 := v_np_particle_only_le &
 [ STEM < "see" >,
   SYNSEM [ LKEYS [ --COMPKEY _around_p_sel_rel,
                    KEYREL.PRED "_see_v_around_rel" ],
            PHON.ONSET con ] ].

see_n1 := n_no_cmpnd_le &
 [ STEM < "see" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_see_n_1_rel",
            PHON.ONSET con ] ].

see_through_v1 := v_empty_prep_intrans_le &
 [ STEM < "see" >,
   SYNSEM [ LKEYS [ --COMPKEY _through_p_sel_rel,
                    KEYREL.PRED "_see_v_through_rel" ],
            PHON.ONSET con ] ].

see_to_v1 := v_empty_prep_intrans_le &
 [ STEM < "see" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_see_v_to_rel" ],
            PHON.ONSET con ] ].

see_v1 := v_np_trans_le &
 [ STEM < "see" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_see_v_1_rel",
            PHON.ONSET con ] ].

see_v2 := v_cp_fin_inf_non_trans_le &
 [ STEM < "see" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_see_v_understand_rel",
            PHON.ONSET con ] ].

see_v3 := v_prep_dir_le &
 [ STEM < "see" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_see_v_understand_rel",
            PHON.ONSET con ] ].

see_v4 := v_sorb_le &
 [ STEM < "see" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_see_v_1_rel",
            PHON.ONSET con ] ].

see_v5 := v_np_as_le &
 [ STEM < "see" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_see_v_as_rel",
            PHON.ONSET con ] ].

see_v6 := v_pp_expl_cp_le &
 [ STEM < "see" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_see_v_to_rel" ],
            PHON.ONSET con ] ].

see_v7 := v_obj_equi_prd_le &
 [ STEM < "see" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_see_v_1_rel",
            PHON.ONSET con ] ].

seed_n1 := n_mass_count_le &
 [ STEM < "seed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_seed_n_1_rel",
            PHON.ONSET con ] ].

seed_v1 := v_np_trans_le &
 [ STEM < "seed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_seed_v_1_rel",
            PHON.ONSET con ] ].

seek_for_v1 := v_empty_prep_intrans_le &
 [ STEM < "seek" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_seek_v_for_rel" ],
            PHON.ONSET con ] ].

seek_out_v1 := v_particle_np_le &
 [ STEM < "seek" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_seek_v_out_rel" ],
            PHON.ONSET con ] ].

seek_v1 := v_np_trans_le &
 [ STEM < "seek" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_seek_v_1_rel",
            PHON.ONSET con ] ].

seek_v2 := v_subj_equi_le &
 [ STEM < "seek" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_seek_v_1_rel",
            PHON.ONSET con ] ].

seem1 := v_pp_inf_ssr_le &
 [ STEM < "seem" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_seem_v_to_rel",
            PHON.ONSET con ] ].

seem2 := v_prdp_pp_seq_a_or_p_le &
 [ STEM < "seem" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_seem_v_to_rel",
            PHON.ONSET con ] ].

seem_v3 := v_expl_it_subj_pp_cp_le &
 [ STEM < "seem" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_seem_v_to_rel",
            PHON.ONSET con ] ].

seem_v4 := v_expl_it_subj_like_le &
 [ STEM < "seem" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_seem_v_to_rel",
            PHON.ONSET con ] ].

seem_v5 := v_cp_like_non_trans_le &
 [ STEM < "seem" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_seem_v_1_rel",
            PHON.ONSET con ] ].

segment_n1 := n_intr_le &
 [ STEM < "segment" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_segment_n_1_rel",
            PHON.ONSET con ] ].

segment_v1 := v_np*_trans_le &
 [ STEM < "segment" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_segment_v_1_rel",
            PHON.ONSET con ] ].

segmentation_n1 := n_mass_count_le &
 [ STEM < "segmentation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_segmentation_n_1_rel",
            PHON.ONSET con ] ].

segregate_v1 := v_np_trans_le &
 [ STEM < "segregate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_segregate_v_1_rel",
            PHON.ONSET con ] ].

seize_on_v1 := v_empty_prep_intrans_le &
 [ STEM < "seize" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_seize_v_on_rel" ],
            PHON.ONSET con ] ].

seize_up_v1 := v_particle_le &
 [ STEM < "seize" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_seize_v_up_rel" ],
            PHON.ONSET con ] ].

seize_upon_v1 := v_empty_prep_intrans_le &
 [ STEM < "seize" >,
   SYNSEM [ LKEYS [ --COMPKEY _upon_p_sel_rel,
                    KEYREL.PRED "_seize_v_upon_rel" ],
            PHON.ONSET con ] ].

seize_v1 := v_np_trans_le &
 [ STEM < "seize" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_seize_v_1_rel",
            PHON.ONSET con ] ].

seizure_n1 := n_mass_count_le &
 [ STEM < "seizure" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_seizure_n_1_rel",
            PHON.ONSET con ] ].

seksin_n1 := n_proper_le &
 [ STEM < "seksin" >,
   SYNSEM [ LKEYS.KEYREL.CARG "seksin",
            PHON.ONSET con ] ].

seldom_adv1 := adv_int_vp_le &
 [ STEM < "seldom" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_seldom_a_1_rel",
            PHON.ONSET con ] ].

sele := n_proper_le &
 [ STEM < "sele" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sele",
            PHON.ONSET con ] ].

select_a1 := adj_attr_intrans_le &
 [ STEM < "select" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_select_a_1_rel",
            PHON.ONSET con ] ].

select_v1 := v_np*_trans_le &
 [ STEM < "select" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_select_v_1_rel",
            PHON.ONSET con ] ].

selection_n1 := n_ppof_le &
 [ STEM < "selection" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_selection_n_of_rel",
            PHON.ONSET con ] ].

selectively_adv1 := adv_int_vp_le &
 [ STEM < "selectively" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_selective_a_1_rel",
            PHON.ONSET con ] ].

self-assured_a1 := adj_intrans_le &
 [ STEM < "self", "assured" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_self+assured_a_1_rel",
            PHON.ONSET con ] ].

self-sufficient_a1 := adj_intrans_le &
 [ STEM < "self", "sufficient" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_self+sufficient_a_1_rel",
            PHON.ONSET con ] ].

self-sufficient_a2 := adj_intrans_le &
 [ STEM < "self-", "sufficient" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_self+sufficient_a_1_rel",
            PHON.ONSET con ] ].

self_isect_dash := adj_attr_nospec_le &
 [ STEM < "self-" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_self_a_1_rel",
            PHON.ONSET con ] ].

self_n1 := n_no_cmpnd_le &
 [ STEM < "self" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_self_n_1_rel",
            PHON.ONSET con ] ].

sell_off_v1 := v_particle_np_le &
 [ STEM < "sell" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_sell_v_off_rel" ],
            PHON.ONSET con ] ].

sell_out_v1 := v_particle_np_le &
 [ STEM < "sell" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_sell_v_out_rel" ],
            PHON.ONSET con ] ].

sell_out_v2 := v_particle_le &
 [ STEM < "sell" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_sell_v_out_rel" ],
            PHON.ONSET con ] ].

sell_v1 := v_ditrans_le &
 [ STEM < "sell" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sell_v_1_rel",
            PHON.ONSET con ] ].

sell_v3 := v_np_trans_le &
 [ STEM < "sell" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sell_v_1_rel",
            PHON.ONSET con ] ].

selthun := n_proper_le &
 [ STEM < "selthun" >,
   SYNSEM [ LKEYS.KEYREL.CARG "selthun",
            PHON.ONSET con ] ].

seltÃ¥sen := n_proper_le &
 [ STEM < "seltÃ¥sen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "seltÃ¥sen",
            PHON.ONSET con ] ].

seltÃ¥svegen := n_proper_le &
 [ STEM < "seltÃ¥svegen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "seltÃ¥svegen",
            PHON.ONSET con ] ].

semantic_a1 := adj_intrans_le &
 [ STEM < "semantic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_semantic_a_1_rel",
            PHON.ONSET con ] ].

semantics_n1 := n_plur_nocmpnd_le &
 [ STEM < "semantic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_semantics_n_1_rel",
            PHON.ONSET con ] ].

semblance_n1 := n_mass_count_le &
 [ STEM < "semblance" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_semblance_n_1_rel",
            PHON.ONSET con ] ].

semelholet_n1 := n_proper_le &
 [ STEM < "semelholet" >,
   SYNSEM [ LKEYS.KEYREL.CARG "semelholet",
            PHON.ONSET con ] ].

semelholstjÃ¸rna_n1 := n_proper_le &
 [ STEM < "semelholstjÃ¸rna" >,
   SYNSEM [ LKEYS.KEYREL.CARG "semelholstjÃ¸rna",
            PHON.ONSET con ] ].

semelholtjÃ¸nnet_n1 := n_proper_le &
 [ STEM < "semelholtjÃ¸nnet" >,
   SYNSEM [ LKEYS.KEYREL.CARG "semelholtjÃ¸nnet",
            PHON.ONSET con ] ].

semester_n1 := n_intr_le &
 [ STEM < "semester" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_semester_n_1_rel",
            PHON.ONSET con ] ].

semibreve_n1 := n_intr_le &
 [ STEM < "semibreve" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_semibreve_n_1_rel",
            PHON.ONSET con ] ].

semicolon_n1 := n_intr_le &
 [ STEM < "semicolon" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_semicolon_n_1_rel",
            PHON.ONSET con ] ].

semiconductor_n1 := n_intr_le &
 [ STEM < "semiconductor" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_semiconductor_n_1_rel",
            PHON.ONSET con ] ].

semilunar_a1 := adj_intrans_le &
 [ STEM < "semilunar" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_semilunar_a_1_rel",
            PHON.ONSET con ] ].

seminar_n1 := n_intr_le &
 [ STEM < "seminar" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_seminar_n_1_rel",
            PHON.ONSET con ] ].

semiquaver_n1 := n_intr_le &
 [ STEM < "semiquaver" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_semiquaver_n_1_rel",
            PHON.ONSET con ] ].

semitone_n1 := n_intr_le &
 [ STEM < "semitone" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_semitone_n_1_rel",
            PHON.ONSET con ] ].

semmeldalsmunnen_n1 := n_proper_le &
 [ STEM < "semmeldalsmunnen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "semmeldalsmunnen",
            PHON.ONSET con ] ].

semmelÃ¥a_n1 := n_proper_le &
 [ STEM < "semmelÃ¥a" >,
   SYNSEM [ LKEYS.KEYREL.CARG "semmelÃ¥a",
            PHON.ONSET con ] ].

senate := n_intr_named_le &
 [ STEM < "senate" >,
   SYNSEM [ LKEYS.KEYREL.CARG "senate",
            PHON.ONSET con ] ].

send_back_v1 := v_particle_np_le &
 [ STEM < "send" >,
   SYNSEM [ LKEYS [ --COMPKEY _back_p_sel_rel,
                    KEYREL.PRED "_send_v_back_rel" ],
            PHON.ONSET con ] ].

send_for_v1 := v_empty_prep_intrans_le &
 [ STEM < "send" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_send_v_for_rel" ],
            PHON.ONSET con ] ].

send_in_v1 := v_particle_np_le &
 [ STEM < "send" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_send_v_in_rel" ],
            PHON.ONSET con ] ].

send_off_v1 := v_particle_np_le &
 [ STEM < "send" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_send_v_off_rel" ],
            PHON.ONSET con ] ].

send_out_v1 := v_particle_np_le &
 [ STEM < "send" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_send_v_out_rel" ],
            PHON.ONSET con ] ].

send_to_v1 := v_prep_intrans_le &
 [ STEM < "send" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_rel,
                    KEYREL.PRED "_send_v_1_rel" ],
            PHON.ONSET con ] ].

send_v1 := v_np_trans_le &
 [ STEM < "send" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_send_v_1_rel",
            PHON.ONSET con ] ].

send_v2 := v_ditrans_le &
 [ STEM < "send" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_send_v_1_rel",
            PHON.ONSET con ] ].

send_v6 := v_obj_equi_le &
 [ STEM < "send" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_send_v_1_rel",
            PHON.ONSET con ] ].

send_v7 := v_np_prep_trans_dors_le &
 [ STEM < "send" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_send_v_1_rel",
            PHON.ONSET con ] ].

sender_n1 := n_ppof_le &
 [ STEM < "sender" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sender_n_of_rel",
            PHON.ONSET con ] ].

senior_a1 := adj_intrans_le &
 [ STEM < "senior" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_senior_a_1_rel",
            PHON.ONSET con ] ].

senior_ttl := n_post_title_le &
 [ STEM < "sr" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_senior_n_1_rel",
            PHON.ONSET con ] ].

senior_ttl_2 := n_post_title_le &
 [ STEM < "sr." >,
   SYNSEM [ LKEYS.KEYREL.PRED "_senior_n_1_rel",
            PHON.ONSET con ] ].

sensation_n1 := n_cpcomp_fin_le &
 [ STEM < "sensation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sensation_n_of_rel",
            PHON.ONSET con ] ].

sensation_n2 := n_ppcomp_le &
 [ STEM < "sensation" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_sensation_n_of_rel" ],
            PHON.ONSET con ] ].

sense_n1 := n_mass_count_ppof_le &
 [ STEM < "sense" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sense_n_of_rel",
            PHON.ONSET con ] ].

sense_v1 := v_np_trans_le &
 [ STEM < "sense" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sense_v_1_rel",
            PHON.ONSET con ] ].

sense_v2 := v_cp_non_trans_le &
 [ STEM < "sense" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sense_v_1_rel",
            PHON.ONSET con ] ].

sense_v3 := v_obj_equi_prd_le &
 [ STEM < "sense" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sense_v_1_rel",
            PHON.ONSET con ] ].

sensibility_n1 := n_mass_count_le &
 [ STEM < "sensibility" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sensibility_n_1_rel",
            PHON.ONSET con ] ].

sensible_a1 := adj_intrans_le &
 [ STEM < "sensible" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sensible_a_for_rel",
            PHON.ONSET con ] ].

sensible_a2 := adj_reg_atrans_le &
 [ STEM < "sensible" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sensible_a_for_rel",
            PHON.ONSET con ] ].

sensibly_a1 := adv_int_vp_le &
 [ STEM < "sensibly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sensible_a_for_rel",
            PHON.ONSET con ] ].

sensitive_a1 := adj_trans_le &
 [ STEM < "sensitive" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_sensitive_a_to_rel" ],
            PHON.ONSET con ] ].

sensitively_adv1 := adv_int_vp_post_le &
 [ STEM < "sensitively" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sensitive_a_to_rel",
            PHON.ONSET con ] ].

sensitivity_n1 := n_mass_count_le &
 [ STEM < "sensitivity" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sensitivity_n_1_rel",
            PHON.ONSET con ] ].

sensor_n1 := n_ppof_le &
 [ STEM < "sensor" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sensor_n_of_rel",
            PHON.ONSET con ] ].

sensor_title := n_title_le &
 [ STEM < "sensor" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sensor_n_of_rel",
            PHON.ONSET con ] ].

sensory_a1 := adj_intrans_le &
 [ STEM < "sensory" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sensory_a_1_rel",
            PHON.ONSET con ] ].

sentence_n1 := n_intr_le &
 [ STEM < "sentence" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sentence_n_1_rel",
            PHON.ONSET con ] ].

sentence_v1 := v_np_trans_le &
 [ STEM < "sentence" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sentence_v_to_rel",
            PHON.ONSET con ] ].

sentence_v2 := v_to_trans_le &
 [ STEM < "sentence" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sentence_v_to_rel",
            PHON.ONSET con ] ].

sentient_a1 := adj_intrans_le &
 [ STEM < "sentient" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sentient_a_1_rel",
            PHON.ONSET con ] ].

sentiment_n1 := n_mass_count_le &
 [ STEM < "sentiment" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sentiment_n_1_rel",
            PHON.ONSET con ] ].

sentinel_n1 := n_intr_le &
 [ STEM < "sentinel" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sentinel_n_1_rel",
            PHON.ONSET con ] ].

sentrum := n_proper_le &
 [ STEM < "sentrum" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sentrum",
            PHON.ONSET con ] ].

separable_a1 := adj_intrans_le &
 [ STEM < "separable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_separable_a_1_rel",
            PHON.ONSET con ] ].

separate_a1 := adj_trans_le &
 [ STEM < "separate" >,
   SYNSEM [ LKEYS [ --COMPKEY _from_p_sel_rel,
                    KEYREL.PRED "_separate_a_from_rel" ],
            PHON.ONSET con ] ].

separate_out_v1 := v_particle_np_pp_from_le &
 [ STEM < "narrow" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_separate_v_out_rel" ],
            PHON.ONSET con ] ].

separate_v1 := v_np*_trans_le &
 [ STEM < "separate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_separate_v_1_rel",
            PHON.ONSET con ] ].

separate_v2 := v_np*_prep_trans_le &
 [ STEM < "separate" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _from_p_rel,
                    KEYREL.PRED "_separate_v_1_rel" ],
            PHON.ONSET con ] ].

separately_adv1 := adv_int_vp_post_le &
 [ STEM < "separately" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_separate_a_from_rel",
            PHON.ONSET con ] ].

separation_n1 := n_mass_count_le &
 [ STEM < "separation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_separation_n_1_rel",
            PHON.ONSET con ] ].

september := n_month_le &
 [ STEM < "september" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sep",
            PHON.ONSET con ] ].

september_2 := n_month_year_le &
 [ STEM < "september" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sep",
            PHON.ONSET con ] ].

september_abb_n1 := n_month_le &
 [ STEM < "sept" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sep",
            PHON.ONSET con ] ].

september_abb_n2 := n_month_year_le &
 [ STEM < "sept" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sep",
            PHON.ONSET con ] ].

september_abb_n3 := n_month_year_le &
 [ STEM < "sep" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sep",
            PHON.ONSET con ] ].

september_abb_n4 := n_month_le &
 [ STEM < "sep" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sep",
            PHON.ONSET con ] ].

september_abb_n5 := n_month_le &
 [ STEM < "sept." >,
   SYNSEM [ LKEYS.KEYREL.CARG "sep",
            PHON.ONSET con ] ].

september_abb_n6 := n_month_year_le &
 [ STEM < "sept." >,
   SYNSEM [ LKEYS.KEYREL.CARG "sep",
            PHON.ONSET con ] ].

september_abb_n7 := n_month_year_le &
 [ STEM < "sep." >,
   SYNSEM [ LKEYS.KEYREL.CARG "sep",
            PHON.ONSET con ] ].

september_abb_n8 := n_month_le &
 [ STEM < "sep." >,
   SYNSEM [ LKEYS.KEYREL.CARG "sep",
            PHON.ONSET con ] ].

september_the_det := det_month_le &
 [ STEM < "september", "the" >,
   SYNSEM [ LKEYS.ALTKEYREL.CARG "sep",
            PHON.ONSET con ] ].

sequence_n1 := n_ppof_le &
 [ STEM < "sequence" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sequence_n_of_rel",
            PHON.ONSET con ] ].

sequential_a1 := adj_intrans_le &
 [ STEM < "sequential" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sequential_a_1_rel",
            PHON.ONSET con ] ].

sequentially_adv1 := adv_int_vp_le &
 [ STEM < "sequentially" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sequential_a_1_rel",
            PHON.ONSET con ] ].

serene_a1 := adj_intrans_le &
 [ STEM < "serene" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_serene_a_1_rel",
            PHON.ONSET con ] ].

serf_n1 := n_intr_le &
 [ STEM < "serf" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_serf_n_1_rel",
            PHON.ONSET con ] ].

serge_n1 := n_mass_le &
 [ STEM < "serge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_serge_n_1_rel",
            PHON.ONSET con ] ].

serial_a1 := adj_intrans_le &
 [ STEM < "serial" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_serial_a_1_rel",
            PHON.ONSET con ] ].

series_n1 := n_ppof_le &
 [ STEM < "series" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_series_n_of_rel",
            PHON.ONSET con ] ].

series_n2 := n_group_ppof_le &
 [ STEM < "series" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_series_n_of_rel",
            PHON.ONSET con ] ].

serine_n1 := n_proper_le &
 [ STEM < "serine" >,
   SYNSEM [ LKEYS.KEYREL.CARG "serine",
            PHON.ONSET con ] ].

serious_a1 := adj_intrans_le &
 [ STEM < "serious" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_serious_a_1_rel",
            PHON.ONSET con ] ].

seriously_adv1 := adv_int_vp_le &
 [ STEM < "seriously" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_serious_a_1_rel",
            PHON.ONSET con ] ].

sermon_n1 := n_intr_le &
 [ STEM < "sermon" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sermon_n_1_rel",
            PHON.ONSET con ] ].

serpent_n1 := n_intr_le &
 [ STEM < "serpent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_serpent_n_1_rel",
            PHON.ONSET con ] ].

servant_n1 := n_intr_le &
 [ STEM < "servant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_servant_n_1_rel",
            PHON.ONSET con ] ].

serve_as_v1 := v_subj_equi_empty_prep_le &
 [ STEM < "serve" >,
   SYNSEM [ LKEYS [ --COMPKEY _as_p_sel_rel,
                    KEYREL.PRED "_serve_v_as_rel" ],
            PHON.ONSET con ] ].

serve_as_v2 := v_np_obj_comp_le &
 [ STEM < "serve" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _as_p_sel_rel,
                    KEYREL.PRED "_serve_v_as_rel" ],
            PHON.ONSET con ] ].

serve_as_v3 := v_empty_prep_intrans_le &
 [ STEM < "serve" >,
   SYNSEM [ LKEYS [ --COMPKEY _as_p_sel_rel,
                    KEYREL.PRED "_serve_v_as_rel" ],
            PHON.ONSET con ] ].

serve_n1 := n_intr_le &
 [ STEM < "serve" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_serve_n_1_rel",
            PHON.ONSET con ] ].

serve_v1 := v_np*_trans_le &
 [ STEM < "serve" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_serve_v_as_rel",
            PHON.ONSET con ] ].

serve_v2 := v_subj_equi_le &
 [ STEM < "serve" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_serve_v_as_rel",
            PHON.ONSET con ] ].

serve_v3 := v_ditrans_le &
 [ STEM < "serve" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_serve_v_as_rel",
            PHON.ONSET con ] ].

server_n1 := n_intr_le &
 [ STEM < "server" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_server_n_1_rel",
            PHON.ONSET con ] ].

service_n1 := n_mass_count_le &
 [ STEM < "service" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_service_n_1_rel",
            PHON.ONSET con ] ].

service_v1 := v_np_trans_le &
 [ STEM < "service" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_service_v_1_rel",
            PHON.ONSET con ] ].

serviceable_a1 := adj_intrans_le &
 [ STEM < "serviceable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_serviceable_a_1_rel",
            PHON.ONSET con ] ].

services_n1 := n_plur_cmpnd_only_le &
 [ STEM < "services" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_service_n_1_rel",
            PHON.ONSET con ] ].

session_n1 := n_intr_le &
 [ STEM < "session" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_session_n_1_rel",
            PHON.ONSET con ] ].

set_a1 := adj_intrans_le &
 [ STEM < "set" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_set_a_1_rel",
            PHON.ONSET con ] ].

set_apart_v1 := v_particle_np_le &
 [ STEM < "set" >,
   SYNSEM [ LKEYS [ --COMPKEY _apart_a_sel_rel,
                    KEYREL.PRED "_set_v_apart_rel" ],
            PHON.ONSET con ] ].

set_aside_v1 := v_particle_np_le &
 [ STEM < "set" >,
   SYNSEM [ LKEYS [ --COMPKEY _aside_p_sel_rel,
                    KEYREL.PRED "_set_v_aside_rel" ],
            PHON.ONSET con ] ].

set_n1 := n_ppof_le &
 [ STEM < "set" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_set_n_of_rel",
            PHON.ONSET con ] ].

set_off_v1 := v_particle_np_le &
 [ STEM < "set" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_set_v_off_rel" ],
            PHON.ONSET con ] ].

set_off_v2 := v_particle_le &
 [ STEM < "set" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_set_v_off_rel" ],
            PHON.ONSET con ] ].

set_out_v1 := v_particle_np_le &
 [ STEM < "set" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_set_v_out_rel" ],
            PHON.ONSET con ] ].

set_out_v2 := v_particle_le &
 [ STEM < "set" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_set_v_out_rel" ],
            PHON.ONSET con ] ].

set_up_n1 := n_mass_le &
 [ STEM < "set", "up" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_set+up_n_1_rel",
            PHON.ONSET con ] ].

set_up_v1 := v_particle_np_le &
 [ STEM < "set" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_set_v_up_rel" ],
            PHON.ONSET con ] ].

set_up_v2 := v_particle_le &
 [ STEM < "set" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_set_v_up_rel" ],
            PHON.ONSET con ] ].

set_v1 := v_np_prep_trans_dors_le &
 [ STEM < "set" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_set_v_1_rel",
            PHON.ONSET con ] ].

set_v2 := v_np*_trans_le &
 [ STEM < "set" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_set_v_1_rel",
            PHON.ONSET con ] ].

seth_n1 := n_proper_le &
 [ STEM < "seth" >,
   SYNSEM [ LKEYS.KEYREL.CARG "seth",
            PHON.ONSET con ] ].

sett_n1 := n_mass_count_le &
 [ STEM < "sett" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sett_n_1_rel",
            PHON.ONSET con ] ].

setter_n1 := n_intr_le &
 [ STEM < "setter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_setter_n_1_rel",
            PHON.ONSET con ] ].

setting_n1 := n_ppof_le &
 [ STEM < "setting" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_setting_n_of_rel",
            PHON.ONSET con ] ].

settle_down_v1 := v_particle_le &
 [ STEM < "settle" >,
   SYNSEM [ LKEYS [ --COMPKEY _down_p_sel_rel,
                    KEYREL.PRED "_settle_v_down_rel" ],
            PHON.ONSET con ] ].

settle_down_v2 := v_particle_np_le &
 [ STEM < "settle" >,
   SYNSEM [ LKEYS [ --COMPKEY _down_p_sel_rel,
                    KEYREL.PRED "_settle_v_down_rel" ],
            PHON.ONSET con ] ].

settle_in_v1 := v_particle_le &
 [ STEM < "settle" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_settle_v_in_rel" ],
            PHON.ONSET con ] ].

settle_v1 := v_np*_trans_le &
 [ STEM < "settle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_settle_v_1_rel",
            PHON.ONSET con ] ].

settlement_n1 := n_mass_count_ppof_le &
 [ STEM < "settlement" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_settlement_n_of_rel",
            PHON.ONSET con ] ].

settler_n1 := n_intr_le &
 [ STEM < "settler" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_settler_n_1_rel",
            PHON.ONSET con ] ].

setup_n1 := n_intr_le &
 [ STEM < "setup" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_setup_n_1_rel",
            PHON.ONSET con ] ].

seven := adj_bare_unspecified_card_one_le &
 [ STEM < "seven" >,
   SYNSEM [ LKEYS.KEYREL.CARG "7",
            PHON.ONSET con ] ].

seven_c := adj_bare_unspecified_card_wcomps_one_le &
 [ STEM < "seven" >,
   SYNSEM [ LKEYS.KEYREL.CARG "7",
            PHON.ONSET con ] ].

seven_day := n_day_of_month_card_le &
 [ STEM < "seven" >,
   SYNSEM [ LKEYS.KEYREL.CARG "7",
            PHON.ONSET con ] ].

seven_day_num := n_day_of_month_card_le &
 [ STEM < "7" >,
   SYNSEM [ LKEYS.KEYREL.CARG "7",
            PHON.ONSET con ] ].

seven_day_num_yofc := n_day_of_month_card_yofc_le &
 [ STEM < "7" >,
   SYNSEM [ LKEYS.KEYREL.CARG "7",
            PHON.ONSET con ] ].

seven_day_yofc := n_day_of_month_card_yofc_le &
 [ STEM < "seven" >,
   SYNSEM [ LKEYS.KEYREL.CARG "7",
            PHON.ONSET con ] ].

seven_hour := n_hour_le &
 [ STEM < "seven" >,
   SYNSEM [ LKEYS.KEYREL.CARG "7",
            PHON.ONSET con ] ].

seven_hundreds_n1 := n_plur_xmod_le &
 [ STEM < "seven", "hundreds" >,
   SYNSEM [ LKEYS.KEYREL.CARG "700",
            PHON.ONSET con ] ].

seven_roman := adj_bare_unspecified_card_one_le &
 [ STEM < "VII" >,
   SYNSEM [ LKEYS.KEYREL.CARG "VII",
            PHON.ONSET con ] ].

sevendigitordersatz := adj_bare_unspecified_ord_six_le &
 [ STEM < "sevendigitordersatz" >,
   SYNSEM [ LKEYS.KEYREL [ CARG "dig7ersatz",
                             PRED const_rel ],
            PHON.ONSET onset ] ].

sevenish_a1 := n_approx_hour_le &
 [ STEM < "sevenish" >,
   SYNSEM [ LKEYS.KEYREL.CARG "7",
            PHON.ONSET con ] ].

seventeen := adj_bare_unspecified_card_two_le &
 [ STEM < "seventeen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "17",
            PHON.ONSET con ] ].

seventeen_day := n_day_of_month_card_le &
 [ STEM < "seventeen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "17",
            PHON.ONSET con ] ].

seventeen_day_num := n_day_of_month_card_le &
 [ STEM < "17" >,
   SYNSEM [ LKEYS.KEYREL.CARG "17",
            PHON.ONSET con ] ].

seventeen_day_num_yofc := n_day_of_month_card_yofc_le &
 [ STEM < "17" >,
   SYNSEM [ LKEYS.KEYREL.CARG "17",
            PHON.ONSET con ] ].

seventeen_day_yofc := n_day_of_month_card_yofc_le &
 [ STEM < "seventeen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "17",
            PHON.ONSET con ] ].

seventeenth := adj_bare_unspecified_ord_two_le &
 [ STEM < "seventeenth" >,
   SYNSEM [ LKEYS.KEYREL.CARG "17",
            PHON.ONSET con ] ].

seventeenth_day := n_day_of_month_le &
 [ STEM < "seventeenth" >,
   SYNSEM [ LKEYS.KEYREL.CARG "17",
            PHON.ONSET con ] ].

seventeenth_day_num := n_day_of_month_le &
 [ STEM < "17th" >,
   SYNSEM [ LKEYS.KEYREL.CARG "17",
            PHON.ONSET con ] ].

seventh := adj_bare_unspecified_ord_one_le &
 [ STEM < "seventh" >,
   SYNSEM [ LKEYS.KEYREL.CARG "7",
            PHON.ONSET con ] ].

seventh_day := n_day_of_month_le &
 [ STEM < "seventh" >,
   SYNSEM [ LKEYS.KEYREL.CARG "7",
            PHON.ONSET con ] ].

seventh_day_num := n_day_of_month_le &
 [ STEM < "7th" >,
   SYNSEM [ LKEYS.KEYREL.CARG "7",
            PHON.ONSET con ] ].

seventies_n1 := n_plur_xmod_le &
 [ STEM < "seventies" >,
   SYNSEM [ LKEYS.KEYREL.CARG "70",
            PHON.ONSET con ] ].

seventieth := adj_bare_unspecified_ord_two_le &
 [ STEM < "seventieth" >,
   SYNSEM [ LKEYS.KEYREL.CARG "70",
            PHON.ONSET con ] ].

seventy := adj_bare_unspecified_card_two_le &
 [ STEM < "seventy" >,
   SYNSEM [ LKEYS.KEYREL.CARG "70",
            PHON.ONSET con ] ].

seventy_w_comps := adj_complemented_unspecified_card_le &
 [ STEM < "seventy" >,
   SYNSEM [ LKEYS.KEYREL.CARG "70",
            PHON.ONSET con ] ].

seventyish_approx := adj_approx_bare_unspecified_card_le &
 [ STEM < "seventyish" >,
   SYNSEM [ LKEYS.KEYREL.CARG "70",
            PHON.ONSET con ] ].

sever_v1 := v_np_trans_le &
 [ STEM < "sever" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sever_v_1_rel",
            PHON.ONSET con ] ].

several := det_part_pl_le &
 [ STEM < "several" >,
   SYNSEM [ LKEYS.ALTKEYREL.PRED "_several_a_1_rel",
            PHON.ONSET con ] ].

several_adj := several_a_few_num_le &
 [ STEM < "several" >,
   SYNSEM [ LKEYS.KEYREL.CARG "several",
            PHON.ONSET con ] ].

severally_adv := adv_int_vp_le &
 [ STEM < "severally" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_several_a_1_rel",
            PHON.ONSET con ] ].

severance_n1 := n_mass_le &
 [ STEM < "severance" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_severance_n_1_rel",
            PHON.ONSET con ] ].

severe_isect := adj_intrans_le &
 [ STEM < "severe" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_severe_a_1_rel",
            PHON.ONSET con ] ].

severely_isect := adv_int_vp_le &
 [ STEM < "severely" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_severe_a_1_rel",
            PHON.ONSET con ] ].

severity_n1 := n_intr_le &
 [ STEM < "severity" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_severity_n_1_rel",
            PHON.ONSET con ] ].

sew_v1 := v_np*_trans_le &
 [ STEM < "sew" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sew_v_1_rel",
            PHON.ONSET con ] ].

sex_n1 := n_mass_count_le &
 [ STEM < "sex" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sex_n_1_rel",
            PHON.ONSET con ] ].

sexual_a1 := adj_intrans_le &
 [ STEM < "sexual" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sexual_a_1_rel",
            PHON.ONSET con ] ].

seymour_n1 := n_proper_le &
 [ STEM < "seymour" >,
   SYNSEM [ LKEYS.KEYREL.CARG "seymour",
            PHON.ONSET con ] ].

sfo_n1 := n_proper_le &
 [ STEM < "sfo" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sfo",
            PHON.ONSET con ] ].

sgrk_nd := n_proper_le &
 [ STEM < "sgrk" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sgrk",
            PHON.ONSET con ] ].

shackle_n1 := n_intr_le &
 [ STEM < "shackle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shackle_n_1_rel",
            PHON.ONSET con ] ].

shackle_v1 := v_np_trans_le &
 [ STEM < "shackle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shackle_v_1_rel",
            PHON.ONSET con ] ].

shade_n1 := n_mass_count_le &
 [ STEM < "shade" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shade_n_1_rel",
            PHON.ONSET con ] ].

shade_v1 := v_np_trans_le &
 [ STEM < "shade" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shade_v_1_rel",
            PHON.ONSET con ] ].

shadow_n := n_mass_count_le &
 [ STEM < "shadow" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shadow_n_1_rel",
            PHON.ONSET con ] ].

shady_n1 := n_proper_le &
 [ STEM < "shady" >,
   SYNSEM [ LKEYS.KEYREL.CARG "shady",
            PHON.ONSET con ] ].

shadyside_n1 := n_proper_le &
 [ STEM < "shadyside" >,
   SYNSEM [ LKEYS.KEYREL.CARG "shadyside",
            PHON.ONSET con ] ].

shaft_n1 := n_intr_le &
 [ STEM < "shaft" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shaft_n_1_rel",
            PHON.ONSET con ] ].

shaft_v1 := v_np_trans_le &
 [ STEM < "shaft" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shaft_v_1_rel",
            PHON.ONSET con ] ].

shake_by_v1 := v_empty_prep_trans_le &
 [ STEM < "shake" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _by_p_sel_rel,
                    KEYREL.PRED "_shake_v_by_rel" ],
            PHON.ONSET con ] ].

shake_n1 := n_intr_le &
 [ STEM < "shake" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shake_n_1_rel",
            PHON.ONSET con ] ].

shake_off_v1 := v_particle_np_le &
 [ STEM < "shake" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_shake_v_off_rel" ],
            PHON.ONSET con ] ].

shake_out_v1 := v_particle_np_le &
 [ STEM < "shake" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_shake_v_out_rel" ],
            PHON.ONSET con ] ].

shake_up_v1 := v_particle_np_le &
 [ STEM < "shake" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_shake_v_up_rel" ],
            PHON.ONSET con ] ].

shake_v1 := v_np*_trans_le &
 [ STEM < "shake" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shake_v_1_rel",
            PHON.ONSET con ] ].

shaker_n1 := n_intr_le &
 [ STEM < "shaker" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shaker_n_1_rel",
            PHON.ONSET con ] ].

shakespeare := n_proper_le &
 [ STEM < "shakespeare" >,
   SYNSEM [ LKEYS.KEYREL.CARG "shakespeare",
            PHON.ONSET con ] ].

shall_aux_pos := va_will_pos_le &
 [ STEM < "shall" >,
   SYNSEM [ LKEYS.KEYREL.PRED _shall_v_modal_rel,
            PHON.ONSET con ] ].

shallow_a1 := adj_intrans_le &
 [ STEM < "shallow" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shallow_a_1_rel",
            PHON.ONSET con ] ].

shallows_n1 := n_plur_nocmpnd_le &
 [ STEM < "shallow" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shallows_n_1_rel",
            PHON.ONSET con ] ].

shame_n1 := n_intr_le &
 [ STEM < "shame" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shame_n_1_rel",
            PHON.ONSET con ] ].

shanghai_n1 := n_proper_city_le &
 [ STEM < "shanghai" >,
   SYNSEM [ LKEYS.KEYREL.CARG "shanghai",
            PHON.ONSET con ] ].

shank_n1 := n_intr_le &
 [ STEM < "shank" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shank_n_1_rel",
            PHON.ONSET con ] ].

shape_n1 := n_mass_count_ppof_le &
 [ STEM < "shape" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shape_n_of_rel",
            PHON.ONSET con ] ].

shape_v1 := v_np_trans_le &
 [ STEM < "shape" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shape_v_1_rel",
            PHON.ONSET con ] ].

shapeliness_n1 := n_mass_le &
 [ STEM < "shapeliness" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shapeliness_n_1_rel",
            PHON.ONSET con ] ].

share_n1 := n_ppof_le &
 [ STEM < "share" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_share_n_of_rel",
            PHON.ONSET con ] ].

share_v1 := v_np_trans_le &
 [ STEM < "share" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_share_v_1_rel",
            PHON.ONSET con ] ].

shareholder_n1 := n_intr_le &
 [ STEM < "shareholder" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shareholder_n_1_rel",
            PHON.ONSET con ] ].

sharon_n1 := n_proper_le &
 [ STEM < "sharon" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sharon",
            PHON.ONSET con ] ].

sharp_a1 := adj_intrans_le &
 [ STEM < "sharp" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sharp_a_1_rel",
            PHON.ONSET con ] ].

sharp_n1 := n_proper_le &
 [ STEM < "sharp" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sharp",
            PHON.ONSET con ] ].

sharpen_up_v1 := v_particle_np_le &
 [ STEM < "sharpen" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_sharpen_v_up_rel" ],
            PHON.ONSET con ] ].

sharpen_up_v2 := v_particle_le &
 [ STEM < "sharpen" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_sharpen_v_up_rel" ],
            PHON.ONSET con ] ].

sharpen_v1 := v_unacc_le &
 [ STEM < "sharpen" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sharpen_v_1_rel",
            PHON.ONSET con ] ].

sharpen_v2 := v_np_trans_noger_le &
 [ STEM < "sharpen" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sharpen_v_cause_rel",
            PHON.ONSET con ] ].

sharply := adv_int_vp_le &
 [ STEM < "sharply" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sharp_a_1_rel",
            PHON.ONSET con ] ].

shatter_v1 := v_unacc_le &
 [ STEM < "shatter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shatter_v_1_rel",
            PHON.ONSET con ] ].

shatter_v2 := v_np_trans_le &
 [ STEM < "shatter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shatter_v_cause_rel",
            PHON.ONSET con ] ].

shave_n1 := n_intr_le &
 [ STEM < "shave" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shave_n_1_rel",
            PHON.ONSET con ] ].

shave_off_v1 := v_particle_np_le &
 [ STEM < "shave" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_shave_v_off_rel" ],
            PHON.ONSET con ] ].

shave_v1 := v_np*_trans_le &
 [ STEM < "shave" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shave_v_1_rel",
            PHON.ONSET con ] ].

she := n_pers_pro_she_le &
 [ STEM < "she" >,
   SYNSEM.PHON.ONSET con ].

sheaf_n1 := n_intr_le &
 [ STEM < "sheaf" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sheaf_n_1_rel",
            PHON.ONSET con ] ].

shear_v1 := v_np_trans_le &
 [ STEM < "shear" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shear_v_1_rel",
            PHON.ONSET con ] ].

sheath_n1 := n_intr_le &
 [ STEM < "sheath" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sheath_n_1_rel",
            PHON.ONSET con ] ].

sheath_v1 := v_np_trans_le &
 [ STEM < "sheath" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sheath_v_1_rel",
            PHON.ONSET con ] ].

shed_n1 := n_intr_le &
 [ STEM < "shed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shed_n_1_rel",
            PHON.ONSET con ] ].

shed_v1 := v_np*_trans_le &
 [ STEM < "shed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shed_v_1_rel",
            PHON.ONSET con ] ].

sheep_n1 := n_intr_le &
 [ STEM < "sheep" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sheep_n_1_rel",
            PHON.ONSET con ] ].

sheer_a1 := adj_attr_intrans_le &
 [ STEM < "sheer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sheer_a_1_rel",
            PHON.ONSET con ] ].

sheet_n1 := n_ppof_le &
 [ STEM < "sheet" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sheet_n_of_rel",
            PHON.ONSET con ] ].

shekel_n1 := n_intr_le &
 [ STEM < "shekel" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shekel_n_1_rel",
            PHON.ONSET con ] ].

shelf_n1 := n_intr_le &
 [ STEM < "shelf" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shelf_n_1_rel",
            PHON.ONSET con ] ].

shell_n1 := n_mass_count_le &
 [ STEM < "shell" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shell_n_1_rel",
            PHON.ONSET con ] ].

shell_out_v1 := v_particle_np_le &
 [ STEM < "shell" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_shell_v_out_rel" ],
            PHON.ONSET con ] ].

shell_out_v2 := v_particle_le &
 [ STEM < "shell" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_shell_v_out_rel" ],
            PHON.ONSET con ] ].

shell_v1 := v_np_trans_le &
 [ STEM < "shell" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shell_v_1_rel",
            PHON.ONSET con ] ].

shelter_n1 := n_mass_count_le &
 [ STEM < "shelter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shelter_n_1_rel",
            PHON.ONSET con ] ].

shelter_v1 := v_np_trans_le &
 [ STEM < "shelter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shelter_v_1_rel",
            PHON.ONSET con ] ].

shelve_v1 := v_np_trans_le &
 [ STEM < "shelve" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shelve_v_1_rel",
            PHON.ONSET con ] ].

shepherd_n1 := n_intr_le &
 [ STEM < "shepherd" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shepherd_n_1_rel",
            PHON.ONSET con ] ].

sheraton_n1 := n_intr_named_le &
 [ STEM < "sheraton" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sheraton",
            PHON.ONSET con ] ].

sherekan_n1 := n_proper_le &
 [ STEM < "sherekan" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sherekan",
            PHON.ONSET con ] ].

sheriff_n1 := n_intr_le &
 [ STEM < "sheriff" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sheriff_n_1_rel",
            PHON.ONSET con ] ].

sherry_n1 := n_mass_count_le &
 [ STEM < "sherry" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sherry_n_1_rel",
            PHON.ONSET con ] ].

shetland_n1 := n_proper_le &
 [ STEM < "shetland" >,
   SYNSEM [ LKEYS.KEYREL.CARG "shetland",
            PHON.ONSET con ] ].

shield_n1 := n_intr_le &
 [ STEM < "shield" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shield_n_1_rel",
            PHON.ONSET con ] ].

shield_v1 := v_empty_prep*_trans_le &
 [ STEM < "shield" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _from_p_sel_rel,
                    KEYREL.PRED "_shield_v_from_rel" ],
            PHON.ONSET con ] ].

shift_n1 := n_intr_le &
 [ STEM < "shift" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shift_n_1_rel",
            PHON.ONSET con ] ].

shift_v1 := v_prep_dir_le &
 [ STEM < "shift" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shift_v_1_rel",
            PHON.ONSET con ] ].

shift_v2 := v_np_trans_noger_le &
 [ STEM < "shift" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shift_v_1_rel",
            PHON.ONSET con ] ].

shilling_n1 := n_intr_le &
 [ STEM < "shilling" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shilling_n_1_rel",
            PHON.ONSET con ] ].

shimmer_n1 := n_intr_le &
 [ STEM < "shimmer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shimmer_n_1_rel",
            PHON.ONSET con ] ].

shimmer_v1 := v_np*_trans_le &
 [ STEM < "shimmer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shimmer_v_1_rel",
            PHON.ONSET con ] ].

shin_n1 := n_intr_le &
 [ STEM < "shin" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shin_n_1_rel",
            PHON.ONSET con ] ].

shin_up_v1 := v_empty_prep_intrans_le &
 [ STEM < "shin" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_shin_v_up_rel" ],
            PHON.ONSET con ] ].

shin_v3 := v_np_trans_le &
 [ STEM < "shin" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shin_v_1_rel",
            PHON.ONSET con ] ].

shine_n1 := n_intr_le &
 [ STEM < "shine" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shine_n_1_rel",
            PHON.ONSET con ] ].

shine_out_v1 := v_particle_le &
 [ STEM < "shine" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_shine_v_out_rel" ],
            PHON.ONSET con ] ].

shine_v1 := v_np_trans_noger_le &
 [ STEM < "shine" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shine_v_1_rel",
            PHON.ONSET con ] ].

shine_v2 := v_prep_dir_le &
 [ STEM < "shine" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shine_v_1_rel",
            PHON.ONSET con ] ].

ship_back_v1 := v_particle_np_le &
 [ STEM < "ship" >,
   SYNSEM [ LKEYS [ --COMPKEY _back_p_sel_rel,
                    KEYREL.PRED "_ship_v_back_rel" ],
            PHON.ONSET con ] ].

ship_n1 := n_ppof_le &
 [ STEM < "ship" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ship_n_of_rel",
            PHON.ONSET con ] ].

ship_out_v1 := v_particle_np_le &
 [ STEM < "ship" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_ship_v_out_rel" ],
            PHON.ONSET con ] ].

ship_out_v2 := v_particle_le &
 [ STEM < "ship" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_ship_v_out_rel" ],
            PHON.ONSET con ] ].

ship_v1 := v_unacc_dir_le &
 [ STEM < "ship" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ship_v_1_rel",
            PHON.ONSET con ] ].

ship_v2 := v_np*_trans_le &
 [ STEM < "ship" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ship_v_cause_rel",
            PHON.ONSET con ] ].

ship_v3 := v_ditrans_le &
 [ STEM < "ship" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ship_v_cause_rel",
            PHON.ONSET con ] ].

shipment_n1 := n_mass_count_ppof_le &
 [ STEM < "shipment" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shipment_n_of-to_rel",
            PHON.ONSET con ] ].

shipment_n2 := n_mass_count_ppto_le &
 [ STEM < "shipment" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shipment_n_of-to_rel",
            PHON.ONSET con ] ].

shipowner_n1 := n_intr_le &
 [ STEM < "shipowner" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shipowner_n_1_rel",
            PHON.ONSET con ] ].

shipping_out_n1 := n_mass_ppcomp_le &
 [ STEM < "shipping", "out" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_shipping+out_n_of_rel" ],
            PHON.ONSET con ] ].

shirt_n1 := n_intr_le &
 [ STEM < "shirt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shirt_n_1_rel",
            PHON.ONSET con ] ].

shirtwaist_n1 := n_intr_le &
 [ STEM < "shirtwaist" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shirtwaist_n_1_rel",
            PHON.ONSET con ] ].

shit_n1 := n_intr_le &
 [ STEM < "shit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shit_n_1_rel",
            PHON.ONSET con ] ].

shit_root_post := adv_s_post_word_nospec_le &
 [ STEM < "shit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shit_a_1_rel",
            PHON.ONSET con ] ].

shit_root_pre := adv_s_pre_word_root_le &
 [ STEM < "shit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shit_a_1_rel",
            PHON.ONSET con ] ].

shiver_n1 := n_intr_le &
 [ STEM < "shiver" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shiver_n_1_rel",
            PHON.ONSET con ] ].

shiver_v1 := v_unacc_le &
 [ STEM < "shiver" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shiver_v_1_rel",
            PHON.ONSET con ] ].

shock_n1 := n_mass_count_le &
 [ STEM < "shock" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shock_n_1_rel",
            PHON.ONSET con ] ].

shock_v1 := v_np*_trans_le &
 [ STEM < "shock" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shock_v_1_rel",
            PHON.ONSET con ] ].

shoe_n1 := n_intr_le &
 [ STEM < "shoe" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shoe_n_1_rel",
            PHON.ONSET con ] ].

shoelace_n1 := n_intr_le &
 [ STEM < "shoelace" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shoelace_n_1_rel",
            PHON.ONSET con ] ].

shoot_down_v1 := v_particle_np_le &
 [ STEM < "shoot" >,
   SYNSEM [ LKEYS [ --COMPKEY _down_p_sel_rel,
                    KEYREL.PRED "_shoot_v_down_rel" ],
            PHON.ONSET con ] ].

shoot_for_v1 := v_empty_prep_intrans_le &
 [ STEM < "shoot" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_shoot_v_for_rel" ],
            PHON.ONSET con ] ].

shoot_n1 := n_intr_le &
 [ STEM < "shoot" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shoot_n_1_rel",
            PHON.ONSET con ] ].

shoot_v1 := v_np_trans_noger_le &
 [ STEM < "shoot" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shoot_v_1_rel",
            PHON.ONSET con ] ].

shoot_v2 := v_prep_dir_le &
 [ STEM < "shoot" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shoot_v_1_rel",
            PHON.ONSET con ] ].

shop_around_for_v1 := v_particle_pp_le &
 [ STEM < "shop" >,
   SYNSEM [ LKEYS [ --COMPKEY _around_p_sel_rel,
                    --OCOMPKEY _for_p_rel,
                    KEYREL.PRED "_shop_v_around-for_rel" ],
            PHON.ONSET con ] ].

shop_around_v1 := v_particle_le &
 [ STEM < "shop" >,
   SYNSEM [ LKEYS [ --COMPKEY _around_p_sel_rel,
                    KEYREL.PRED "_shop_v_around_rel" ],
            PHON.ONSET con ] ].

shop_around_v2 := v_particle_np_le &
 [ STEM < "shop" >,
   SYNSEM [ LKEYS [ --COMPKEY _around_p_sel_rel,
                    KEYREL.PRED "_shop_v_around_rel" ],
            PHON.ONSET con ] ].

shop_for_v1 := v_empty_prep_intrans_le &
 [ STEM < "shop" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_shop_v_for_rel" ],
            PHON.ONSET con ] ].

shop_n1 := n_ppof_le &
 [ STEM < "shop" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shop_n_of_rel",
            PHON.ONSET con ] ].

shop_v1 := v_unerg_le &
 [ STEM < "shop" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shop_v_buy_rel",
            PHON.ONSET con ] ].

shopping_n1 := n_intr_le &
 [ STEM < "shopping" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shopping_n_1_rel",
            PHON.ONSET con ] ].

shore_n1 := n_intr_le &
 [ STEM < "shore" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shore_n_1_rel",
            PHON.ONSET con ] ].

shoreline_n1 := n_mass_count_le &
 [ STEM < "shoreline" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shoreline_n_1_rel",
            PHON.ONSET con ] ].

short-circuit_n1 := n_intr_le &
 [ STEM < "short", "circuit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_short+circuit_n_1_rel",
            PHON.ONSET con ] ].

short_a1 := adj_intrans_le &
 [ STEM < "short" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_short_a_1_rel",
            PHON.ONSET con ] ].

short_lived_a1 := adj_intrans_le &
 [ STEM < "short-", "lived" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_short-lived_a_1_rel",
            PHON.ONSET con ] ].

short_prtcl := adj_prtcl_le &
 [ STEM < "short" >,
   SYNSEM [ LKEYS.KEYREL.PRED _short_a_sel_rel,
            PHON.ONSET con ] ].

short_sleeve_a1 := adj_intrans_le &
 [ STEM < "short", "sleeve" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_short+sleeved_a_1_rel",
            PHON.ONSET con ] ].

short_sleeve_a2 := adj_intrans_le &
 [ STEM < "short-", "sleeve" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_short+sleeved_a_1_rel",
            PHON.ONSET con ] ].

short_sleeved_a1 := adj_intrans_le &
 [ STEM < "short", "sleeved" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_short+sleeved_a_1_rel",
            PHON.ONSET con ] ].

short_sleeved_a2 := adj_intrans_le &
 [ STEM < "short-", "sleeved" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_short+sleeved_a_1_rel",
            PHON.ONSET con ] ].

short_term_a1 := adj_intrans_le &
 [ STEM < "short", "term" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_short+term_a_1_rel",
            PHON.ONSET con ] ].

shortage_n1 := n_ppof_le &
 [ STEM < "shortage" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shortage_n_of_rel",
            PHON.ONSET con ] ].

shortclothes_n1 := n_plur_nocmpnd_le &
 [ STEM < "shortclothe" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shortclothes_n_1_rel",
            PHON.ONSET con ] ].

shortcut_n1 := n_intr_le &
 [ STEM < "shortcut" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shortcut_n_1_rel",
            PHON.ONSET con ] ].

shorten_v1 := v_np_trans_le &
 [ STEM < "shorten" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shorten_v_1_rel",
            PHON.ONSET con ] ].

shorter := adj_comp_le &
 [ STEM < "shorter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_short_a_1_rel",
            PHON.ONSET con ] ].

shortest_a1 := adj_superl_le &
 [ STEM < "shortest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_short_a_1_rel",
            PHON.ONSET con ] ].

shortly_adv1 := adv_int_vp_post_le &
 [ STEM < "shortly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_short_a_1_rel",
            PHON.ONSET con ] ].

shortly_m_deg := adv_degree_spec_m_le &
 [ STEM < "shortly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shortly_x_m_rel",
            PHON.ONSET con ] ].

shortness_n1 := n_ppof_le &
 [ STEM < "shortness" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shortness_n_of_rel",
            PHON.ONSET con ] ].

shorts_n1 := n_plur_nocmpnd_le &
 [ STEM < "short" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shorts_n_1_rel",
            PHON.ONSET con ] ].

shostakovich_n1 := n_proper_le &
 [ STEM < "shostakovich" >,
   SYNSEM [ LKEYS.KEYREL.CARG "shostakovich",
            PHON.ONSET con ] ].

shot_adj := adj_intrans_le &
 [ STEM < "shot" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shot_a_1_rel",
            PHON.ONSET con ] ].

shot_n1 := n_ppof_le &
 [ STEM < "shot" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shot_n_of_rel",
            PHON.ONSET con ] ].

should+of_aux := should_of_aux_le &
 [ STEM < "should", "of" >,
   SYNSEM.PHON.ONSET con ].

should_aux_neg_1 := va_modal_subj_neg_le &
 [ STEM < "shouldn't" >,
   SYNSEM [ LKEYS.KEYREL.PRED _should_v_modal_rel,
            PHON.ONSET con ] ].

should_aux_neg_2 := va_modal_subj_neg_le &
 [ STEM < "shouldn", "'t" >,
   SYNSEM [ LKEYS.KEYREL.PRED _should_v_modal_rel,
            PHON.ONSET con ] ].

should_aux_pos := va_modal_subj_pos_le &
 [ STEM < "should" >,
   SYNSEM [ LKEYS.KEYREL.PRED _should_v_modal_rel,
            PHON.ONSET con ] ].

shoulder_n1 := n_intr_le &
 [ STEM < "shoulder" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shoulder_n_1_rel",
            PHON.ONSET con ] ].

shoulder_v1 := v_np_trans_le &
 [ STEM < "shoulder" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shoulder_v_1_rel",
            PHON.ONSET con ] ].

shout_at_v1 := v_empty_prep_intrans_le &
 [ STEM < "shout" >,
   SYNSEM [ LKEYS [ --COMPKEY _at_p_sel_rel,
                    KEYREL.PRED "_shout_v_at_rel" ],
            PHON.ONSET con ] ].

shout_back_v1 := v_particle_np_le &
 [ STEM < "shout" >,
   SYNSEM [ LKEYS [ --COMPKEY _back_p_sel_rel,
                    KEYREL.PRED "_shout_v_back_rel" ],
            PHON.ONSET con ] ].

shout_n1 := n_ppof_le &
 [ STEM < "shout" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shout_n_of_rel",
            PHON.ONSET con ] ].

shout_out_v1 := v_particle_np_le &
 [ STEM < "shout" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_shout_v_out_rel" ],
            PHON.ONSET con ] ].

shout_out_v2 := v_particle_le &
 [ STEM < "shout" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_shout_v_out_rel" ],
            PHON.ONSET con ] ].

shout_v1 := v_np*_trans_le &
 [ STEM < "shout" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shout_v_1_rel",
            PHON.ONSET con ] ].

shout_v2 := v_cp_prop_non_trans_le &
 [ STEM < "shout" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shout_v_1_rel",
            PHON.ONSET con ] ].

shove_n1 := n_intr_le &
 [ STEM < "shove" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shove_n_1_rel",
            PHON.ONSET con ] ].

shove_v1 := v_np_trans_le &
 [ STEM < "shove" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shove_v_1_rel",
            PHON.ONSET con ] ].

shovel_n1 := n_intr_le &
 [ STEM < "shovel" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shovel_n_1_rel",
            PHON.ONSET con ] ].

shovel_out_v1 := v_particle_np_le &
 [ STEM < "shovel" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_shovel_v_out_rel" ],
            PHON.ONSET con ] ].

shovel_v1 := v_np*_trans_le &
 [ STEM < "shovel" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shovel_v_1_rel",
            PHON.ONSET con ] ].

show_as_v1 := v_subj_equi_empty_prep_le &
 [ STEM < "show" >,
   SYNSEM [ LKEYS [ --COMPKEY _as_p_sel_rel,
                    KEYREL.PRED "_show_v_as_rel" ],
            PHON.ONSET con ] ].

show_n1 := n_ppof_le &
 [ STEM < "show" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_show_n_of_rel",
            PHON.ONSET con ] ].

show_up_v1 := v_particle_le &
 [ STEM < "show" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_show_v_up_rel" ],
            PHON.ONSET con ] ].

show_v1 := v_ditrans_le &
 [ STEM < "show" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_show_v_1_rel",
            PHON.ONSET con ] ].

show_v2 := v_np*_trans_le &
 [ STEM < "show" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_show_v_1_rel",
            PHON.ONSET con ] ].

show_v3 := v_np*_trans_cp_le &
 [ STEM < "show" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_show_v_1_rel",
            PHON.ONSET con ] ].

show_v4 := v_obj_equi_prd_adj_le &
 [ STEM < "show" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_show_v_1_rel",
            PHON.ONSET con ] ].

show_v6 := v_subj_equi_prd_adj_le &
 [ STEM < "show" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_show_v_1_rel",
            PHON.ONSET con ] ].

shower_n1 := n_ppof_le &
 [ STEM < "shower" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shower_n_of_rel",
            PHON.ONSET con ] ].

shower_v1 := v_unerg_le &
 [ STEM < "shower" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shower_v_1_rel",
            PHON.ONSET con ] ].

shower_v2 := v_atrans_le &
 [ STEM < "shower" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shower_v_x_rel",
            PHON.ONSET con ] ].

shower_with_v1 := v_empty_prep_trans_le &
 [ STEM < "shower" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_shower_v_with_rel" ],
            PHON.ONSET con ] ].

showing_n1 := n_ppof_le &
 [ STEM < "showing" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_showing_n_of_rel",
            PHON.ONSET con ] ].

showy_a1 := adj_intrans_le &
 [ STEM < "showy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_showy_a_1_rel",
            PHON.ONSET con ] ].

shriek_n1 := n_intr_le &
 [ STEM < "shriek" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shriek_n_1_rel",
            PHON.ONSET con ] ].

shrill_a1 := adj_intrans_le &
 [ STEM < "shrill" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shrill_a_1_rel",
            PHON.ONSET con ] ].

shrill_v1 := v_np*_trans_le &
 [ STEM < "shrill" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shrill_v_1_rel",
            PHON.ONSET con ] ].

shrimp_n1 := n_mass_count_le &
 [ STEM < "shrimp" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shrimp_n_1_rel",
            PHON.ONSET con ] ].

shrimps_n2 := n_plur_nocmpnd_le &
 [ STEM < "shrimps" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shrimp_n_1_rel",
            PHON.ONSET con ] ].

shrine_n1 := n_intr_le &
 [ STEM < "shrine" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shrine_n_1_rel",
            PHON.ONSET con ] ].

shrink_n1 := n_intr_le &
 [ STEM < "shrink" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shrink_n_1_rel",
            PHON.ONSET con ] ].

shrink_v1 := v_unacc_le &
 [ STEM < "shrink" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shrink_v_1_rel",
            PHON.ONSET con ] ].

shrink_v2 := v_np_trans_noger_le &
 [ STEM < "shrink" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shrink_v_cause_rel",
            PHON.ONSET con ] ].

shroud_n1 := n_intr_le &
 [ STEM < "shroud" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shroud_n_1_rel",
            PHON.ONSET con ] ].

shroud_v1 := v_np_prep_trans_le &
 [ STEM < "shroud" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _in_p_rel,
                    KEYREL.PRED "_shroud_v_1_rel" ],
            PHON.ONSET con ] ].

shrove_tuesday := n_holiday_le &
 [ STEM < "shrove", "tuesday" >,
   SYNSEM [ LKEYS.KEYREL.CARG "shrove_tuesday",
            PHON.ONSET con ] ].

shrub_n1 := n_intr_le &
 [ STEM < "shrub" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shrub_n_1_rel",
            PHON.ONSET con ] ].

shrubby_a1 := adj_intrans_le &
 [ STEM < "shrubby" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shrubby_a_1_rel",
            PHON.ONSET con ] ].

shrug_n1 := n_intr_le &
 [ STEM < "shrug" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shrug_n_1_rel",
            PHON.ONSET con ] ].

shrug_off_v1 := v_particle_np_le &
 [ STEM < "shrug" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_shrug_v_off_rel" ],
            PHON.ONSET con ] ].

shrug_v1 := v_np*_trans_le &
 [ STEM < "shrug" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shrug_v_1_rel",
            PHON.ONSET con ] ].

shucks_root_post := adv_s_post_word_nospec_le &
 [ STEM < "shucks" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shucks_a_1_rel",
            PHON.ONSET con ] ].

shucks_root_pre := adv_s_pre_word_root_le &
 [ STEM < "shucks" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shucks_a_1_rel",
            PHON.ONSET con ] ].

shudder_at_v1 := v_prep_intrans_le &
 [ STEM < "shudder" >,
   SYNSEM [ LKEYS [ --COMPKEY _at_p_rel,
                    KEYREL.PRED "_shudder_v_1_rel" ],
            PHON.ONSET con ] ].

shudder_n1 := n_intr_le &
 [ STEM < "shudder" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shudder_n_1_rel",
            PHON.ONSET con ] ].

shudder_v1 := v_unacc_le &
 [ STEM < "shudder" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shudder_v_1_rel",
            PHON.ONSET con ] ].

shuffle_n1 := n_intr_le &
 [ STEM < "shuffle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shuffle_n_1_rel",
            PHON.ONSET con ] ].

shuffle_v1 := v_np*_trans_le &
 [ STEM < "shuffle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shuffle_v_1_rel",
            PHON.ONSET con ] ].

shui_on_n1 := n_proper_le &
 [ STEM < "shui", "on" >,
   SYNSEM [ LKEYS.KEYREL.CARG "shui_on",
            PHON.ONSET con ] ].

shun_v1 := v_np_trans_le &
 [ STEM < "shun" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shun_v_1_rel",
            PHON.ONSET con ] ].

shut_down_v1 := v_particle_np_le &
 [ STEM < "shut" >,
   SYNSEM [ LKEYS [ --COMPKEY _down_p_sel_rel,
                    KEYREL.PRED "_shut_v_down_rel" ],
            PHON.ONSET con ] ].

shut_down_v2 := v_particle_le &
 [ STEM < "shut" >,
   SYNSEM [ LKEYS [ --COMPKEY _down_p_sel_rel,
                    KEYREL.PRED "_shut_v_down_rel" ],
            PHON.ONSET con ] ].

shut_off_v1 := v_particle_np_le &
 [ STEM < "shut" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_shut_v_off_rel" ],
            PHON.ONSET con ] ].

shut_off_v2 := v_particle_le &
 [ STEM < "shut" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_shut_v_off_rel" ],
            PHON.ONSET con ] ].

shut_out_v1 := v_particle_np_le &
 [ STEM < "shut" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_shut_v_out_rel" ],
            PHON.ONSET con ] ].

shut_up_v1 := v_particle_np_le &
 [ STEM < "shut" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_shut_v_up_rel" ],
            PHON.ONSET con ] ].

shut_up_v2 := v_particle_le &
 [ STEM < "shut" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_shut_v_up_rel" ],
            PHON.ONSET con ] ].

shut_v1 := v_np*_trans_le &
 [ STEM < "shut" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shut_v_1_rel",
            PHON.ONSET con ] ].

shutter_n1 := n_intr_le &
 [ STEM < "shutter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shutter_n_1_rel",
            PHON.ONSET con ] ].

shutter_v1 := v_np_trans_le &
 [ STEM < "shutter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shutter_v_1_rel",
            PHON.ONSET con ] ].

shuttle_n1 := n_intr_le &
 [ STEM < "shuttle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shuttle_n_1_rel",
            PHON.ONSET con ] ].

shuttle_v1 := v_np*_trans_le &
 [ STEM < "shuttle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shuttle_v_1_rel",
            PHON.ONSET con ] ].

siam_kitchen_nd := n_proper_le &
 [ STEM < "siam", "kitchen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "siam_kitchen",
            PHON.ONSET con ] ].

siam_n1 := n_proper_le &
 [ STEM < "siam" >,
   SYNSEM [ LKEYS.KEYREL.CARG "siam",
            PHON.ONSET con ] ].

sibilant_n1 := n_intr_le &
 [ STEM < "sibilant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sibilant_n_1_rel",
            PHON.ONSET con ] ].

sick_and_tired_a1 := adj_trans_oblig_le &
 [ STEM < "sick", "and", "tired" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_sick+and+tired_a_of_rel" ],
            PHON.ONSET con ] ].

sick_isect := adj_trans_le &
 [ STEM < "sick" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_sick_a_of_rel" ],
            PHON.ONSET con ] ].

sicken_v1 := v_unacc_le &
 [ STEM < "sicken" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sicken_v_1_rel",
            PHON.ONSET con ] ].

sicken_v2 := v_np_trans_noger_le &
 [ STEM < "sicken" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sicken_v_cause_rel",
            PHON.ONSET con ] ].

sickness_n1 := n_mass_count_le &
 [ STEM < "sickness" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sickness_n_1_rel",
            PHON.ONSET con ] ].

side_by_side_adv1 := pp_le &
 [ STEM < "side", "by", "side" >,
   SYNSEM [ LKEYS.KEYREL.PRED _side+by+side_p_rel,
            PHON.ONSET voc ] ].

side_n1 := n_intr_le &
 [ STEM < "side" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_side_n_1_rel",
            PHON.ONSET con ] ].

side_with_v1 := v_empty_prep_intrans_le &
 [ STEM < "side" >,
   SYNSEM [ LKEYS [ --COMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_side_v_with_rel" ],
            PHON.ONSET con ] ].

sideboard_n1 := n_intr_le &
 [ STEM < "sideboard" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sideboard_n_1_rel",
            PHON.ONSET con ] ].

sidereal_a1 := adj_intrans_le &
 [ STEM < "sidereal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sidereal_a_1_rel",
            PHON.ONSET con ] ].

sidewalk_n1 := n_intr_le &
 [ STEM < "sidewalk" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sidewalk_n_1_rel",
            PHON.ONSET con ] ].

sids_n1 := n_proper_le &
 [ STEM < "sids" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sids",
            PHON.ONSET con ] ].

siege_n1 := n_mass_count_le &
 [ STEM < "siege" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_siege_n_1_rel",
            PHON.ONSET con ] ].

siegen_n1 := n_proper_le &
 [ STEM < "siegen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "siegen",
            PHON.ONSET con ] ].

siemens_n1 := n_proper_le &
 [ STEM < "siemens" >,
   SYNSEM [ LKEYS.KEYREL.CARG "siemens",
            PHON.ONSET con ] ].

sift_v1 := v_np_trans_le &
 [ STEM < "sift" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sift_v_1_rel",
            PHON.ONSET con ] ].

siggraph_n1 := n_proper_le &
 [ STEM < "siggraph" >,
   SYNSEM [ LKEYS.KEYREL.CARG "siggraph",
            PHON.ONSET con ] ].

sigh_n1 := n_intr_le &
 [ STEM < "sigh" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sigh_n_1_rel",
            PHON.ONSET con ] ].

sigh_v1 := v_unerg_le &
 [ STEM < "sigh" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sigh_v_1_rel",
            PHON.ONSET con ] ].

sight_n1 := n_mass_count_le &
 [ STEM < "sight" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sight_n_1_rel",
            PHON.ONSET con ] ].

sighting_n1 := n_ppof_le &
 [ STEM < "sighting" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sighting_n_of_rel",
            PHON.ONSET con ] ].

sightseeing_n1 := n_intr_le &
 [ STEM < "sightseeing" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sightseeing_n_1_rel",
            PHON.ONSET con ] ].

sign_n1 := n_ppof_le &
 [ STEM < "sign" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sign_n_of_rel",
            PHON.ONSET con ] ].

sign_off_v2 := v_particle_le &
 [ STEM < "sign" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_sign_v_off_rel" ],
            PHON.ONSET con ] ].

sign_on_v2 := v_particle_le &
 [ STEM < "sign" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_sign_v_on_rel" ],
            PHON.ONSET con ] ].

sign_up_v1 := v_particle_np_le &
 [ STEM < "sign" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_sign_v_up_rel" ],
            PHON.ONSET con ] ].

sign_up_v2 := v_particle_le &
 [ STEM < "sign" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_sign_v_up_rel" ],
            PHON.ONSET con ] ].

sign_v1 := v_np*_trans_le &
 [ STEM < "sign" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sign_v_1_rel",
            PHON.ONSET con ] ].

signal_n1 := n_intr_le &
 [ STEM < "signal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_signal_n_1_rel",
            PHON.ONSET con ] ].

signal_to_v1 := v_empty_prep_intrans_le &
 [ STEM < "signal" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_signal_v_to_rel" ],
            PHON.ONSET con ] ].

signal_v1 := v_np*_trans_le &
 [ STEM < "signal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_signal_v_1_rel",
            PHON.ONSET con ] ].

signal_v2 := v_np*_trans_cp_le &
 [ STEM < "signal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_signal_v_1_rel",
            PHON.ONSET con ] ].

signal_v4 := v_obj_equi_le &
 [ STEM < "signal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_signal_v_1_rel",
            PHON.ONSET con ] ].

signature_n1 := n_intr_le &
 [ STEM < "signature" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_signature_n_1_rel",
            PHON.ONSET con ] ].

significance_n1 := n_mass_le &
 [ STEM < "significance" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_significance_n_1_rel",
            PHON.ONSET con ] ].

significant_a1 := adj_intrans_le &
 [ STEM < "significant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_significant_a_1_rel",
            PHON.ONSET con ] ].

significantly_adv1 := adv_int_vp_post_le &
 [ STEM < "significantly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_significant_a_1_rel",
            PHON.ONSET con ] ].

significantly_deg := adv_degree_spec_le &
 [ STEM < "significantly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_significantly_x_rel",
            PHON.ONSET con ] ].

signification_n1 := n_mass_count_le &
 [ STEM < "signification" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_signification_n_1_rel",
            PHON.ONSET con ] ].

significative_a1 := adj_intrans_le &
 [ STEM < "significative" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_significative_a_1_rel",
            PHON.ONSET con ] ].

signify_v1 := v_np_trans_le &
 [ STEM < "signify" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_signify_v_1_rel",
            PHON.ONSET con ] ].

signify_v2 := v_cp_non_trans_le &
 [ STEM < "signify" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_signify_v_1_rel",
            PHON.ONSET con ] ].

signpost_n1 := n_intr_le &
 [ STEM < "signpost" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_signpost_n_1_rel",
            PHON.ONSET con ] ].

signup_n1 := n_intr_le &
 [ STEM < "sign", "up" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sign+up_n_1_rel",
            PHON.ONSET con ] ].

sikkilsdalen_n1 := n_proper_le &
 [ STEM < "sikkilsdalen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sikkilsdalen",
            PHON.ONSET con ] ].

sikkilsdalshornet_n1 := n_proper_le &
 [ STEM < "sikkilsdalshornet" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sikkilsdalshornet",
            PHON.ONSET con ] ].

sikkilsdalsseter_n1 := n_proper_le &
 [ STEM < "sikkilsdalsseter" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sikkilsdalsseter",
            PHON.ONSET con ] ].

sikkilsdalssetra_n1 := n_proper_le &
 [ STEM < "sikkilsdalssetra" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sikkilsdalssetra",
            PHON.ONSET con ] ].

sil_vous_plait_root_post := adv_s_post_word_nospec_le &
 [ STEM < "s", "il", "vous", "plait" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sil+vous+plait_a_1_rel",
            PHON.ONSET con ] ].

sil_vous_plait_root_pre := adv_s_pre_word_root_le &
 [ STEM < "s", "il", "vous", "plait" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sil+vous+plait_a_1_rel",
            PHON.ONSET con ] ].

silence_n1 := n_mass_le &
 [ STEM < "silence" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_silence_n_1_rel",
            PHON.ONSET con ] ].

silence_of_the_lambs_n1 := n_proper_le &
 [ STEM < "silence", "of", "the", "lambs" >,
   SYNSEM [ LKEYS.KEYREL.CARG "silence_of_the_lambs",
            PHON.ONSET con ] ].

silence_v1 := v_np_trans_le &
 [ STEM < "silence" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_silence_v_1_rel",
            PHON.ONSET con ] ].

silent_a1 := adj_intrans_le &
 [ STEM < "silent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_silent_a_1_rel",
            PHON.ONSET con ] ].

silent_night_n2 := n_proper_le &
 [ STEM < "silent", "night" >,
   SYNSEM [ LKEYS.KEYREL.CARG "silent_night",
            PHON.ONSET con ] ].

silently := adv_int_vp_le &
 [ STEM < "silently" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_silent_a_1_rel",
            PHON.ONSET con ] ].

silicon_valley_n1 := n_proper_city_le &
 [ STEM < "silicon", "valley" >,
   SYNSEM [ LKEYS.KEYREL.CARG "silicon_valley",
            PHON.ONSET con ] ].

silk_n1 := n_mass_count_le &
 [ STEM < "silk" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_silk_n_1_rel",
            PHON.ONSET con ] ].

silly_a1 := adj_intrans_le &
 [ STEM < "silly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_silly_a_1_rel",
            PHON.ONSET con ] ].

silt_n1 := n_mass_le &
 [ STEM < "silt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_silt_n_1_rel",
            PHON.ONSET con ] ].

silt_up_v1 := v_particle_le &
 [ STEM < "silt" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_silt_v_up_rel" ],
            PHON.ONSET con ] ].

silver_isect := adj_intrans_le &
 [ STEM < "silver" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_silver_a_1_rel",
            PHON.ONSET con ] ].

silver_n1 := n_mass_count_le &
 [ STEM < "silver" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_silver_n_1_rel",
            PHON.ONSET con ] ].

silvery_a1 := adj_intrans_le &
 [ STEM < "silvery" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_silvery_a_1_rel",
            PHON.ONSET con ] ].

silvester := n_holiday_le &
 [ STEM < "silvester" >,
   SYNSEM [ LKEYS.KEYREL.CARG "silvester",
            PHON.ONSET con ] ].

sim_n1 := n_proper_le &
 [ STEM < "sim" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sim",
            PHON.ONSET con ] ].

similar_to_a1 := adj_trans_le &
 [ STEM < "similar" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_similar_a_to_rel" ],
            PHON.ONSET con ] ].

similarity_n1 := n_ppcomp_le &
 [ STEM < "similarity" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_similarity_n_to_rel" ],
            PHON.ONSET con ] ].

similarly := adv_int_vp_le &
 [ STEM < "similarly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_similar_a_to_rel",
            PHON.ONSET con ] ].

similitude_n1 := n_mass_le &
 [ STEM < "similitude" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_similitude_n_1_rel",
            PHON.ONSET con ] ].

simledalsbandet_n1 := n_proper_le &
 [ STEM < "simledalsbandet" >,
   SYNSEM [ LKEYS.KEYREL.CARG "simledalsbandet",
            PHON.ONSET con ] ].

simmer_down_v1 := v_particle_le &
 [ STEM < "simmer" >,
   SYNSEM [ LKEYS [ --COMPKEY _down_p_sel_rel,
                    KEYREL.PRED "_simmer_v_down_rel" ],
            PHON.ONSET con ] ].

simmer_n1 := n_intr_le &
 [ STEM < "simmer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_simmer_n_1_rel",
            PHON.ONSET con ] ].

simmer_v1 := v_np*_trans_le &
 [ STEM < "simmer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_simmer_v_1_rel",
            PHON.ONSET con ] ].

simple_a1 := adj_intrans_le &
 [ STEM < "simple" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_simple_a_1_rel",
            PHON.ONSET con ] ].

simpler := adj_comp_le &
 [ STEM < "simpler" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_simple_a_1_rel",
            PHON.ONSET con ] ].

simplest_a1 := adj_superl_le &
 [ STEM < "simplest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_simple_a_1_rel",
            PHON.ONSET con ] ].

simplicity_n1 := n_mass_le &
 [ STEM < "simplicity" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_simplicity_n_1_rel",
            PHON.ONSET con ] ].

simplify_v1 := v_np_trans_le &
 [ STEM < "simplify" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_simplify_v_1_rel",
            PHON.ONSET con ] ].

simply_adv1 := adv_int_vp_aux_le &
 [ STEM < "simply" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_simple_a_1_rel",
            PHON.ONSET con ] ].

simply_adv2 := adv_int_vp_post_le &
 [ STEM < "simply" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_simple_a_1_rel",
            PHON.ONSET con ] ].

simply_deg := adv_degree_spec_v_le &
 [ STEM < "simply" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_simply_x_deg_rel",
            PHON.ONSET con ] ].

simulate_v1 := v_np_trans_le &
 [ STEM < "simulate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_simulate_v_1_rel",
            PHON.ONSET con ] ].

simulator_n1 := n_intr_le &
 [ STEM < "simulator" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_simulator_n_1_rel",
            PHON.ONSET con ] ].

simultaneous_a1 := adj_intrans_le &
 [ STEM < "simultaneous" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_simultaneous_a_1_rel",
            PHON.ONSET con ] ].

sin_n1 := n_mass_count_le &
 [ STEM < "sin" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sin_n_1_rel",
            PHON.ONSET con ] ].

sin_v1 := v_unerg_le &
 [ STEM < "sin" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sin_v_1_rel",
            PHON.ONSET con ] ].

sinapism_n1 := n_mass_count_le &
 [ STEM < "sinapism" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sinapism_n_1_rel",
            PHON.ONSET con ] ].

since := p_noslash_le &
 [ STEM < "since" >,
   SYNSEM [ LKEYS.KEYREL.PRED _since_p_rel,
            PHON.ONSET con ] ].

since_adv := adv_int_vp_le &
 [ STEM < "since" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_since_a_1_rel",
            PHON.ONSET con ] ].

since_subord := p_subconj_le &
 [ STEM < "since" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_since_x_subord_rel",
            PHON.ONSET con ] ].

sincere_a1 := adj_intrans_le &
 [ STEM < "sincere" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sincere_a_1_rel",
            PHON.ONSET con ] ].

sincerely := adv_int_vp_le &
 [ STEM < "sincerely" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sincere_a_1_rel",
            PHON.ONSET con ] ].

sincerity_n1 := n_mass_le &
 [ STEM < "sincerity" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sincerity_n_1_rel",
            PHON.ONSET con ] ].

sine_n1 := n_intr_le &
 [ STEM < "sine" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sine_n_1_rel",
            PHON.ONSET con ] ].

sinemet_n1 := n_proper_le &
 [ STEM < "sinemet" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sinemet",
            PHON.ONSET con ] ].

sing_v1 := v_np*_trans_le &
 [ STEM < "sing" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sing_v_1_rel",
            PHON.ONSET con ] ].

sing_v2 := v_ditrans_le &
 [ STEM < "sing" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sing_v_1_rel",
            PHON.ONSET con ] ].

sing_v3 := v_cp_prop_non_trans_le &
 [ STEM < "sing" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sing_v_1_rel",
            PHON.ONSET con ] ].

singapore_n1 := n_proper_city_le &
 [ STEM < "singapore" >,
   SYNSEM [ LKEYS.KEYREL.CARG "singapore",
            PHON.ONSET con ] ].

singaporian_a1 := adj_intrans_le &
 [ STEM < "singaporian" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_singaporian_a_1_rel",
            PHON.ONSET con ] ].

singaporian_n1 := n_proper_le &
 [ STEM < "singaporian" >,
   SYNSEM [ LKEYS.KEYREL.CARG "singaporian",
            PHON.ONSET con ] ].

singaporian_n2 := n_intr_le &
 [ STEM < "singaporian" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_singaporian_n_1_rel",
            PHON.ONSET con ] ].

singen_n1 := n_proper_le &
 [ STEM < "singen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "singen",
            PHON.ONSET con ] ].

singer_n1 := n_intr_le &
 [ STEM < "singer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_singer_n_1_rel",
            PHON.ONSET con ] ].

single_a1 := adj_intrans_le &
 [ STEM < "single" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_single_a_1_rel",
            PHON.ONSET con ] ].

single_n1 := n_intr_le &
 [ STEM < "single" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_single_n_1_rel",
            PHON.ONSET con ] ].

single_out_v1 := v_particle_np_le &
 [ STEM < "single" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_single_v_out_rel" ],
            PHON.ONSET con ] ].

singly_adv := adv_int_vp_le &
 [ STEM < "singly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_single_a_1_rel",
            PHON.ONSET con ] ].

singular_a1 := adj_intrans_le &
 [ STEM < "singular" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_singular_a_1_rel",
            PHON.ONSET con ] ].

singular_abb_n1 := n_intr_le &
 [ STEM < "sg." >,
   SYNSEM [ LKEYS.KEYREL.PRED "_singular_n_1_rel",
            PHON.ONSET con ] ].

singular_abb_n2 := n_intr_le &
 [ STEM < "sg" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_singular_n_1_rel",
            PHON.ONSET con ] ].

singular_n1 := n_intr_le &
 [ STEM < "singular" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_singular_n_1_rel",
            PHON.ONSET con ] ].

sinjarheim := n_proper_le &
 [ STEM < "sinjarheim" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sinjarheim",
            PHON.ONSET con ] ].

sink_in_v1 := v_particle_le &
 [ STEM < "sink" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_sink_v_in_rel" ],
            PHON.ONSET con ] ].

sink_n1 := n_intr_le &
 [ STEM < "sink" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sink_n_1_rel",
            PHON.ONSET con ] ].

sink_v1 := v_unacc_dir_le &
 [ STEM < "sink" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sink_v_1_rel",
            PHON.ONSET con ] ].

sink_v2 := v_np_trans_le &
 [ STEM < "sink" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sink_v_cause_rel",
            PHON.ONSET con ] ].

sinuous_a1 := adj_intrans_le &
 [ STEM < "sinuous" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sinuous_a_1_rel",
            PHON.ONSET con ] ].

sip_n1 := n_intr_le &
 [ STEM < "sip" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sip_n_1_rel",
            PHON.ONSET con ] ].

sip_v1 := v_np*_trans_le &
 [ STEM < "sip" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sip_v_1_rel",
            PHON.ONSET con ] ].

sir_n1 := n_proper_le &
 [ STEM < "sir" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sir",
            PHON.ONSET con ] ].

sir_ttl := n_title_unsp_le &
 [ STEM < "sir" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sir",
            PHON.ONSET con ] ].

siskin_n1 := n_intr_le &
 [ STEM < "siskin" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_siskin_n_1_rel",
            PHON.ONSET con ] ].

sister_in_law_n1 := n_intr_le &
 [ STEM < "sister-", "in-", "law" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sister+in+law_n_1_rel",
            PHON.ONSET con ] ].

sister_n1 := n_ppof_le &
 [ STEM < "sister" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sister_n_of_rel",
            PHON.ONSET con ] ].

sit_down_v1 := v_particle_le &
 [ STEM < "sit" >,
   SYNSEM [ LKEYS [ --COMPKEY _down_p_sel_rel,
                    KEYREL.PRED "_sit_v_down_rel" ],
            PHON.ONSET con ] ].

sit_out_v1 := v_particle_np_le &
 [ STEM < "sit" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_sit_v_out_rel" ],
            PHON.ONSET con ] ].

sit_v1 := v_unacc_le &
 [ STEM < "sit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sit_v_1_rel",
            PHON.ONSET con ] ].

sitcom_n1 := n_intr_le &
 [ STEM < "sitcom" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sitcom_n_1_rel",
            PHON.ONSET con ] ].

site_n1 := n_intr_le &
 [ STEM < "site" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_site_n_1_rel",
            PHON.ONSET con ] ].

site_v1 := v_np_trans_le &
 [ STEM < "site" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_site_v_1_rel",
            PHON.ONSET con ] ].

site_v2 := v_np_prep_trans_dors_le &
 [ STEM < "site" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_site_v_1_rel",
            PHON.ONSET con ] ].

situate_v1 := v_np_trans_le &
 [ STEM < "situate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_situate_v_1_rel",
            PHON.ONSET con ] ].

situate_v2 := v_np_prep_trans_dors_le &
 [ STEM < "situate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_situate_v_1_rel",
            PHON.ONSET con ] ].

situated_isect := adj_intrans_le &
 [ STEM < "situated" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_situated_a_1_rel",
            PHON.ONSET con ] ].

situation_n1 := n_intr_le &
 [ STEM < "situation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_situation_n_1_rel",
            PHON.ONSET con ] ].

six := adj_bare_unspecified_card_one_le &
 [ STEM < "six" >,
   SYNSEM [ LKEYS.KEYREL.CARG "6",
            PHON.ONSET con ] ].

six_c := adj_bare_unspecified_card_wcomps_one_le &
 [ STEM < "six" >,
   SYNSEM [ LKEYS.KEYREL.CARG "6",
            PHON.ONSET con ] ].

six_day := n_day_of_month_card_le &
 [ STEM < "six" >,
   SYNSEM [ LKEYS.KEYREL.CARG "6",
            PHON.ONSET con ] ].

six_day_num := n_day_of_month_card_le &
 [ STEM < "6" >,
   SYNSEM [ LKEYS.KEYREL.CARG "6",
            PHON.ONSET con ] ].

six_day_num_yofc := n_day_of_month_card_yofc_le &
 [ STEM < "6" >,
   SYNSEM [ LKEYS.KEYREL.CARG "6",
            PHON.ONSET con ] ].

six_day_yofc := n_day_of_month_card_yofc_le &
 [ STEM < "six" >,
   SYNSEM [ LKEYS.KEYREL.CARG "6",
            PHON.ONSET con ] ].

six_hour := n_hour_le &
 [ STEM < "six" >,
   SYNSEM [ LKEYS.KEYREL.CARG "6",
            PHON.ONSET con ] ].

six_hundreds_n1 := n_plur_xmod_le &
 [ STEM < "six", "hundreds" >,
   SYNSEM [ LKEYS.KEYREL.CARG "600",
            PHON.ONSET con ] ].

six_roman := adj_bare_unspecified_card_one_le &
 [ STEM < "VI" >,
   SYNSEM [ LKEYS.KEYREL.CARG "VI",
            PHON.ONSET con ] ].

sixdigitordersatz := adj_bare_unspecified_ord_six_le &
 [ STEM < "sixdigitordersatz" >,
   SYNSEM [ LKEYS.KEYREL [ CARG "dig6ersatz",
                             PRED const_rel ],
            PHON.ONSET onset ] ].

sixish := n_approx_hour_le &
 [ STEM < "sixish" >,
   SYNSEM [ LKEYS.KEYREL.CARG "6",
            PHON.ONSET con ] ].

sixpenny_n1 := n_intr_le &
 [ STEM < "sixpenny" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sixpenny_n_1_rel",
            PHON.ONSET con ] ].

sixteen := adj_bare_unspecified_card_two_le &
 [ STEM < "sixteen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "16",
            PHON.ONSET con ] ].

sixteen_day := n_day_of_month_card_le &
 [ STEM < "sixteen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "16",
            PHON.ONSET con ] ].

sixteen_day_num := n_day_of_month_card_le &
 [ STEM < "16" >,
   SYNSEM [ LKEYS.KEYREL.CARG "16",
            PHON.ONSET con ] ].

sixteen_day_num_yofc := n_day_of_month_card_yofc_le &
 [ STEM < "16" >,
   SYNSEM [ LKEYS.KEYREL.CARG "16",
            PHON.ONSET con ] ].

sixteen_day_yofc := n_day_of_month_card_yofc_le &
 [ STEM < "sixteen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "16",
            PHON.ONSET con ] ].

sixteenth := adj_bare_unspecified_ord_two_le &
 [ STEM < "sixteenth" >,
   SYNSEM [ LKEYS.KEYREL.CARG "16",
            PHON.ONSET con ] ].

sixteenth_day := n_day_of_month_le &
 [ STEM < "sixteenth" >,
   SYNSEM [ LKEYS.KEYREL.CARG "16",
            PHON.ONSET con ] ].

sixteenth_day_num := n_day_of_month_le &
 [ STEM < "16th" >,
   SYNSEM [ LKEYS.KEYREL.CARG "16",
            PHON.ONSET con ] ].

sixth := adj_bare_unspecified_ord_one_le &
 [ STEM < "sixth" >,
   SYNSEM [ LKEYS.KEYREL.CARG "6",
            PHON.ONSET con ] ].

sixth_day := n_day_of_month_le &
 [ STEM < "sixth" >,
   SYNSEM [ LKEYS.KEYREL.CARG "6",
            PHON.ONSET con ] ].

sixth_day_num := n_day_of_month_le &
 [ STEM < "6th" >,
   SYNSEM [ LKEYS.KEYREL.CARG "6",
            PHON.ONSET con ] ].

sixties_n1 := n_plur_xmod_le &
 [ STEM < "sixties" >,
   SYNSEM [ LKEYS.KEYREL.CARG "60",
            PHON.ONSET con ] ].

sixtieth := adj_bare_unspecified_ord_two_le &
 [ STEM < "sixtieth" >,
   SYNSEM [ LKEYS.KEYREL.CARG "60",
            PHON.ONSET con ] ].

sixty := adj_bare_unspecified_card_two_le &
 [ STEM < "sixty" >,
   SYNSEM [ LKEYS.KEYREL.CARG "60",
            PHON.ONSET con ] ].

sixty_w_comps := adj_complemented_unspecified_card_le &
 [ STEM < "sixty" >,
   SYNSEM [ LKEYS.KEYREL.CARG "60",
            PHON.ONSET con ] ].

sixtyish_approx := adj_approx_bare_unspecified_card_le &
 [ STEM < "sixtyish" >,
   SYNSEM [ LKEYS.KEYREL.CARG "60",
            PHON.ONSET con ] ].

size_n1 := n_mass_count_le &
 [ STEM < "size" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_size_n_1_rel",
            PHON.ONSET con ] ].

size_title := n_title_le &
 [ STEM < "size" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_size_n_1_rel",
            PHON.ONSET con ] ].

size_up_v1 := v_particle_np_le &
 [ STEM < "size" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_size_v_up_rel" ],
            PHON.ONSET con ] ].

sizeable_a1 := adj_intrans_le &
 [ STEM < "sizeable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sizeable_a_1_rel",
            PHON.ONSET con ] ].

sjoa := n_proper_le &
 [ STEM < "sjoa" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sjoa",
            PHON.ONSET con ] ].

sjodalen_n1 := n_proper_le &
 [ STEM < "sjodalen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sjodalen",
            PHON.ONSET con ] ].

sjogholstind := n_proper_le &
 [ STEM < "sjogholstind" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sjogholstind",
            PHON.ONSET con ] ].

sjogholsvatnet_n1 := n_proper_le &
 [ STEM < "sjogholsvatnet" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sjogholsvatnet",
            PHON.ONSET con ] ].

sjugurdtind_n1 := n_proper_le &
 [ STEM < "sjugurdtind" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sjugurdtind",
            PHON.ONSET con ] ].

sjugurtind_n1 := n_proper_le &
 [ STEM < "sjugurtind" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sjugurtind",
            PHON.ONSET con ] ].

sjugurtindtjÃ¸rna_n1 := n_proper_le &
 [ STEM < "sjugurtindtjÃ¸rna" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sjugurtindtjÃ¸rna",
            PHON.ONSET con ] ].

sjur_n1 := n_proper_le &
 [ STEM < "sjur" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sjur",
            PHON.ONSET con ] ].

sjurhaugen := n_proper_le &
 [ STEM < "sjurhaugen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sjurhaugen",
            PHON.ONSET con ] ].

sjÃ¥k_n1 := n_proper_le &
 [ STEM < "sjÃ¥k" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sjÃ¥k",
            PHON.ONSET con ] ].

skagadalsboen := n_proper_le &
 [ STEM < "skagadalsboen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "skagadalsboen",
            PHON.ONSET con ] ].

skagastÃ¸l_n1 := n_proper_le &
 [ STEM < "skagastÃ¸l" >,
   SYNSEM [ LKEYS.KEYREL.CARG "skagastÃ¸l",
            PHON.ONSET con ] ].

skagastÃ¸lsbu_n1 := n_proper_le &
 [ STEM < "skagastÃ¸lsbu" >,
   SYNSEM [ LKEYS.KEYREL.CARG "skagastÃ¸lsbu",
            PHON.ONSET con ] ].

skagastÃ¸lsdalen_n1 := n_proper_le &
 [ STEM < "skagastÃ¸lsdalen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "skagastÃ¸lsdalen",
            PHON.ONSET con ] ].

skagastÃ¸lsryggen_n1 := n_proper_le &
 [ STEM < "skagastÃ¸lsryggen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "skagastÃ¸lsryggen",
            PHON.ONSET con ] ].

skagastÃ¸lstind_n1 := n_proper_le &
 [ STEM < "skagastÃ¸lstind" >,
   SYNSEM [ LKEYS.KEYREL.CARG "skagastÃ¸lstind",
            PHON.ONSET con ] ].

skagastÃ¸lstindane_n1 := n_proper_pl_le &
 [ STEM < "skagastÃ¸lstindane" >,
   SYNSEM [ LKEYS.KEYREL.CARG "skagastÃ¸lstindane",
            PHON.ONSET con ] ].

skagastÃ¸lstinder_n1 := n_proper_pl_le &
 [ STEM < "skagastÃ¸lstinder" >,
   SYNSEM [ LKEYS.KEYREL.CARG "skagastÃ¸lstinder",
            PHON.ONSET con ] ].

skagen_n1 := n_proper_le &
 [ STEM < "skagen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "skagen",
            PHON.ONSET con ] ].

skagerak := n_proper_le &
 [ STEM < "skagerak" >,
   SYNSEM [ LKEYS.KEYREL.CARG "skagerak",
            PHON.ONSET con ] ].

skamdalen_n1 := n_proper_le &
 [ STEM < "skamdalen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "skamdalen",
            PHON.ONSET con ] ].

skardalstind_n1 := n_proper_le &
 [ STEM < "skardalstind" >,
   SYNSEM [ LKEYS.KEYREL.CARG "skardalstind",
            PHON.ONSET con ] ].

skaret_n1 := n_proper_le &
 [ STEM < "skaret" >,
   SYNSEM [ LKEYS.KEYREL.CARG "skaret",
            PHON.ONSET con ] ].

skarsnosi := n_proper_le &
 [ STEM < "skarsnosi" >,
   SYNSEM [ LKEYS.KEYREL.CARG "skarsnosi",
            PHON.ONSET con ] ].

skarvheimen_n1 := n_proper_le &
 [ STEM < "skarvheimen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "skarvheimen",
            PHON.ONSET con ] ].

skater_n1 := n_intr_le &
 [ STEM < "skater" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_skater_n_1_rel",
            PHON.ONSET con ] ].

skauta_n1 := n_proper_le &
 [ STEM < "skauta" >,
   SYNSEM [ LKEYS.KEYREL.CARG "skauta",
            PHON.ONSET con ] ].

skautehaugane := n_proper_le &
 [ STEM < "skautehaugane" >,
   SYNSEM [ LKEYS.KEYREL.CARG "skautehaugane",
            PHON.ONSET con ] ].

skautevatnet := n_proper_le &
 [ STEM < "skautevatnet" >,
   SYNSEM [ LKEYS.KEYREL.CARG "skautevatnet",
            PHON.ONSET con ] ].

skautflya_n1 := n_proper_le &
 [ STEM < "skautflya" >,
   SYNSEM [ LKEYS.KEYREL.CARG "skautflya",
            PHON.ONSET con ] ].

skautkampen_n1 := n_proper_le &
 [ STEM < "skautkampen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "skautkampen",
            PHON.ONSET con ] ].

skein_n1 := n_intr_le &
 [ STEM < "skein" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_skein_n_1_rel",
            PHON.ONSET con ] ].

skeleton_n1 := n_intr_le &
 [ STEM < "skeleton" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_skeleton_n_1_rel",
            PHON.ONSET con ] ].

skellefteÃ¥ := n_proper_le &
 [ STEM < "skellefteÃ¥" >,
   SYNSEM [ LKEYS.KEYREL.CARG "skellefteÃ¥",
            PHON.ONSET con ] ].

skeptical_a1 := adj_reg_cp_le &
 [ STEM < "skeptical" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_skeptical_a_1_rel",
            PHON.ONSET con ] ].

sketch_n1 := n_intr_le &
 [ STEM < "sketch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sketch_n_1_rel",
            PHON.ONSET con ] ].

sketch_v1 := v_np*_trans_le &
 [ STEM < "sketch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sketch_v_1_rel",
            PHON.ONSET con ] ].

ski_n1 := n_intr_le &
 [ STEM < "ski" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ski_n_1_rel",
            PHON.ONSET con ] ].

ski_v1 := v_prep_dir_le &
 [ STEM < "ski" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ski_v_1_rel",
            PHON.ONSET con ] ].

ski_v2 := v_np_trans_noger_le &
 [ STEM < "ski" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ski_v_1_rel",
            PHON.ONSET con ] ].

skier_n1 := n_intr_le &
 [ STEM < "skier" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_skier_n_1_rel",
            PHON.ONSET con ] ].

skill_n1 := n_mass_count_le &
 [ STEM < "skill" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_skill_n_1_rel",
            PHON.ONSET con ] ].

skillful_a1 := adj_intrans_le &
 [ STEM < "skillful" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_skillful_a_1_rel",
            PHON.ONSET con ] ].

skimp_v1 := v_unerg_le &
 [ STEM < "skimp" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_skimp_v_1_rel",
            PHON.ONSET con ] ].

skin_n1 := n_mass_count_le &
 [ STEM < "skin" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_skin_n_1_rel",
            PHON.ONSET con ] ].

skinegga_n1 := n_proper_le &
 [ STEM < "skinegga" >,
   SYNSEM [ LKEYS.KEYREL.CARG "skinegga",
            PHON.ONSET con ] ].

skineggen_n1 := n_proper_le &
 [ STEM < "skineggen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "skineggen",
            PHON.ONSET con ] ].

skinnegga_n1 := n_proper_le &
 [ STEM < "skinnegga" >,
   SYNSEM [ LKEYS.KEYREL.CARG "skinnegga",
            PHON.ONSET con ] ].

skinneggin_n1 := n_proper_le &
 [ STEM < "skinneggin" >,
   SYNSEM [ LKEYS.KEYREL.CARG "skinneggin",
            PHON.ONSET con ] ].

skip_n1 := n_intr_le &
 [ STEM < "skip" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_skip_n_1_rel",
            PHON.ONSET con ] ].

skip_out_v2 := v_particle_le &
 [ STEM < "skip" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_skip_v_out_rel" ],
            PHON.ONSET con ] ].

skip_over_v1 := v_empty_prep_intrans_le &
 [ STEM < "skip" >,
   SYNSEM [ LKEYS [ --COMPKEY _over_p_sel_rel,
                    KEYREL.PRED "_skip_v_over_rel" ],
            PHON.ONSET con ] ].

skip_v1 := v_np_trans_le &
 [ STEM < "skip" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_skip_v_1_rel",
            PHON.ONSET con ] ].

skirt_n1 := n_intr_le &
 [ STEM < "skirt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_skirt_n_1_rel",
            PHON.ONSET con ] ].

skirt_v1 := v_np_trans_le &
 [ STEM < "skirt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_skirt_v_1_rel",
            PHON.ONSET con ] ].

skjeldrehornet_n1 := n_proper_le &
 [ STEM < "skjeldrehornet" >,
   SYNSEM [ LKEYS.KEYREL.CARG "skjeldrehornet",
            PHON.ONSET con ] ].

skjerdal := n_proper_le &
 [ STEM < "skjerdal" >,
   SYNSEM [ LKEYS.KEYREL.CARG "skjerdal",
            PHON.ONSET con ] ].

skjolden := n_proper_le &
 [ STEM < "skjolden" >,
   SYNSEM [ LKEYS.KEYREL.CARG "skjolden",
            PHON.ONSET con ] ].

skjÃ¥k_n1 := n_proper_le &
 [ STEM < "skjÃ¥k" >,
   SYNSEM [ LKEYS.KEYREL.CARG "skjÃ¥k",
            PHON.ONSET con ] ].

skodadalsbÃ¸en_n1 := n_proper_le &
 [ STEM < "skodadalsbÃ¸en" >,
   SYNSEM [ LKEYS.KEYREL.CARG "skodadalsbÃ¸en",
            PHON.ONSET con ] ].

skogadalen_n1 := n_proper_le &
 [ STEM < "skogadalen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "skogadalen",
            PHON.ONSET con ] ].

skogadalsboen := n_proper_le &
 [ STEM < "skogadalsboen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "skogadalsboen",
            PHON.ONSET con ] ].

skogadalsbreen_n1 := n_proper_le &
 [ STEM < "skogadalsbreen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "skogadalsbreen",
            PHON.ONSET con ] ].

skogadalsbÃ¸en_n1 := n_proper_le &
 [ STEM < "skogadalsbÃ¸en" >,
   SYNSEM [ LKEYS.KEYREL.CARG "skogadalsbÃ¸en",
            PHON.ONSET con ] ].

skogadlsbÃ¸en_n1 := n_proper_le &
 [ STEM < "skogadlsbÃ¸en" >,
   SYNSEM [ LKEYS.KEYREL.CARG "skogadlsbÃ¸en",
            PHON.ONSET con ] ].

skr_n1 := n_plur_nocmpnd_le &
 [ STEM < "skr" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_skr_n_1_rel",
            PHON.ONSET con ] ].

skr_sign_n1 := n_numcomp_le &
 [ STEM < "skr" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_skr_n_1_rel",
            PHON.ONSET con ] ].

skredbergene_n1 := n_proper_le &
 [ STEM < "skredbergene" >,
   SYNSEM [ LKEYS.KEYREL.CARG "skredbergene",
            PHON.ONSET con ] ].

skrikjo := n_proper_le &
 [ STEM < "skrikjo" >,
   SYNSEM [ LKEYS.KEYREL.CARG "skrikjo",
            PHON.ONSET con ] ].

skrim_n1 := n_proper_le &
 [ STEM < "skrim" >,
   SYNSEM [ LKEYS.KEYREL.CARG "skrim",
            PHON.ONSET con ] ].

sky_n1 := n_mass_count_le &
 [ STEM < "sky" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sky_n_1_rel",
            PHON.ONSET con ] ].

skylight_n1 := n_mass_count_le &
 [ STEM < "skylight" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_skylight_n_1_rel",
            PHON.ONSET con ] ].

skyline_n1 := n_intr_le &
 [ STEM < "skyline" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_skyline_n_1_rel",
            PHON.ONSET con ] ].

skyward_n1 := n_adv_event_le &
 [ STEM < "skyward" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED _skyward_a_1_rel,
                    KEYREL.PRED place_n_rel ],
            PHON.ONSET con ] ].

skÃ¥bu_n1 := n_proper_le &
 [ STEM < "skÃ¥bu" >,
   SYNSEM [ LKEYS.KEYREL.CARG "skÃ¥bu",
            PHON.ONSET con ] ].

skÃ¥labotn_n1 := n_proper_le &
 [ STEM < "skÃ¥labotn" >,
   SYNSEM [ LKEYS.KEYREL.CARG "skÃ¥labotn",
            PHON.ONSET con ] ].

skÃ¥labotnskaret_n1 := n_proper_le &
 [ STEM < "skÃ¥labotnskaret" >,
   SYNSEM [ LKEYS.KEYREL.CARG "skÃ¥labotnskaret",
            PHON.ONSET con ] ].

skÃ¥lavatnet_n1 := n_proper_le &
 [ STEM < "skÃ¥lavatnet" >,
   SYNSEM [ LKEYS.KEYREL.CARG "skÃ¥lavatnet",
            PHON.ONSET con ] ].

skÃ¥lbotn_n1 := n_proper_le &
 [ STEM < "skÃ¥lbotn" >,
   SYNSEM [ LKEYS.KEYREL.CARG "skÃ¥lbotn",
            PHON.ONSET con ] ].

skÃ¥levatn_n1 := n_proper_le &
 [ STEM < "skÃ¥levatn" >,
   SYNSEM [ LKEYS.KEYREL.CARG "skÃ¥levatn",
            PHON.ONSET con ] ].

skÃ¥lvatnet_n1 := n_proper_le &
 [ STEM < "skÃ¥lvatnet" >,
   SYNSEM [ LKEYS.KEYREL.CARG "skÃ¥lvatnet",
            PHON.ONSET con ] ].

skÃ¥re_n1 := n_proper_le &
 [ STEM < "skÃ¥re" >,
   SYNSEM [ LKEYS.KEYREL.CARG "skÃ¥re",
            PHON.ONSET con ] ].

skÃ¥ri_n1 := n_proper_le &
 [ STEM < "skÃ¥ri" >,
   SYNSEM [ LKEYS.KEYREL.CARG "skÃ¥ri",
            PHON.ONSET con ] ].

skÃ¥vu_n1 := n_proper_le &
 [ STEM < "skÃ¥vu" >,
   SYNSEM [ LKEYS.KEYREL.CARG "skÃ¥vu",
            PHON.ONSET con ] ].

slaalien_n1 := n_proper_le &
 [ STEM < "slaalien" >,
   SYNSEM [ LKEYS.KEYREL.CARG "slaalien",
            PHON.ONSET con ] ].

slab_n1 := n_intr_le &
 [ STEM < "slab" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_slab_n_1_rel",
            PHON.ONSET con ] ].

slack_a1 := adj_intrans_le &
 [ STEM < "slack" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_slack_a_1_rel",
            PHON.ONSET con ] ].

slack_n1 := n_mass_no_cmpnd_le &
 [ STEM < "slack" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_slack_n_1_rel",
            PHON.ONSET con ] ].

slacken_off_v1 := v_particle_le &
 [ STEM < "slacken" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_slacken_v_off_rel" ],
            PHON.ONSET con ] ].

slacken_v1 := v_np*_trans_le &
 [ STEM < "slacken" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_slacken_v_1_rel",
            PHON.ONSET con ] ].

slacker := adj_comp_le &
 [ STEM < "slacker" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_slack_a_1_rel",
            PHON.ONSET con ] ].

slacker_n1 := n_intr_le &
 [ STEM < "slacker" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_slacker_n_1_rel",
            PHON.ONSET con ] ].

slackest := adj_superl_le &
 [ STEM < "slackest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_slack_a_1_rel",
            PHON.ONSET con ] ].

slackly_adv := adv_int_vp_le &
 [ STEM < "slackly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_slack_a_1_rel",
            PHON.ONSET con ] ].

slam_down_v1 := v_particle_np_le &
 [ STEM < "slam" >,
   SYNSEM [ LKEYS [ --COMPKEY _down_p_sel_rel,
                    KEYREL.PRED "_slam_v_down_rel" ],
            PHON.ONSET con ] ].

slam_n1 := n_intr_le &
 [ STEM < "slam" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_slam_n_1_rel",
            PHON.ONSET con ] ].

slam_v1 := v_np_trans_noger_le &
 [ STEM < "slam" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_slam_v_cause_rel",
            PHON.ONSET con ] ].

slam_v2 := v_unacc_dir_le &
 [ STEM < "slam" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_slam_v_1_rel",
            PHON.ONSET con ] ].

slam_v3 := v_prep_dir_oblig_le &
 [ STEM < "slam" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_slam_v_1_rel",
            PHON.ONSET con ] ].

slam_v4 := v_np_prep_trans_dors_le &
 [ STEM < "slam" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_slam_v_1_rel",
            PHON.ONSET con ] ].

slant_n1 := n_mass_count_le &
 [ STEM < "slant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_slant_n_1_rel",
            PHON.ONSET con ] ].

slant_v1 := v_unacc_dir_le &
 [ STEM < "slant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_slant_v_1_rel",
            PHON.ONSET con ] ].

slant_v2 := v_np_trans_le &
 [ STEM < "slant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_slant_v_cause_rel",
            PHON.ONSET con ] ].

slap_down_v1 := v_particle_np_le &
 [ STEM < "slap" >,
   SYNSEM [ LKEYS [ --COMPKEY _down_p_sel_rel,
                    KEYREL.PRED "_slap_v_down_rel" ],
            PHON.ONSET con ] ].

slap_n1 := n_intr_le &
 [ STEM < "slap" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_slap_n_1_rel",
            PHON.ONSET con ] ].

slap_on_v1 := v_particle_np_le &
 [ STEM < "slap" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_slap_v_on_rel" ],
            PHON.ONSET con ] ].

slap_v1 := v_np_trans_le &
 [ STEM < "slap" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_slap_v_1_rel",
            PHON.ONSET con ] ].

slash_n1 := n_intr_le &
 [ STEM < "slash" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_slash_n_1_rel",
            PHON.ONSET con ] ].

slash_per_p := p_nbar_comp_nmod_le &
 [ STEM < "/" >,
   SYNSEM [ LKEYS.KEYREL.PRED _per_p_rel,
            PHON.ONSET con ] ].

slash_per_p2 := p_nmod_le &
 [ STEM < "/" >,
   SYNSEM [ LKEYS.KEYREL.PRED _per_p_rel,
            PHON.ONSET con ] ].

slaughter_n1 := n_mass_count_le &
 [ STEM < "slaughter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_slaughter_n_1_rel",
            PHON.ONSET con ] ].

slaughter_v1 := v_np*_trans_le &
 [ STEM < "slaughter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_slaughter_v_1_rel",
            PHON.ONSET con ] ].

slaughterhouse_n1 := n_intr_le &
 [ STEM < "slaughterhouse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_slaughterhouse_n_1_rel",
            PHON.ONSET con ] ].

slave_n1 := n_intr_le &
 [ STEM < "slave" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_slave_n_1_rel",
            PHON.ONSET con ] ].

slay_v1 := v_np_trans_le &
 [ STEM < "slay" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_slay_v_1_rel",
            PHON.ONSET con ] ].

sled_n1 := n_intr_le &
 [ STEM < "sled" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sled_n_1_rel",
            PHON.ONSET con ] ].

sled_v1 := v_prep_dir_le &
 [ STEM < "sled" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sled_v_1_rel",
            PHON.ONSET con ] ].

sledge_n1 := n_intr_le &
 [ STEM < "sledge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sledge_n_1_rel",
            PHON.ONSET con ] ].

sleek_a1 := adj_intrans_le &
 [ STEM < "sleek" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sleek_a_1_rel",
            PHON.ONSET con ] ].

sleep_in_v1 := v_particle_le &
 [ STEM < "sleep" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_sleep_v_in_rel" ],
            PHON.ONSET con ] ].

sleep_n1 := n_mass_le &
 [ STEM < "sleep" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sleep_n_1_rel",
            PHON.ONSET con ] ].

sleep_v1 := v_unerg_le &
 [ STEM < "sleep" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sleep_v_1_rel",
            PHON.ONSET con ] ].

sleepless_in_seattle_n1 := n_proper_le &
 [ STEM < "sleepless", "in", "seattle" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sleepless_in_seattle",
            PHON.ONSET con ] ].

sleet_n1 := n_mass_le &
 [ STEM < "sleet" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sleet_n_1_rel",
            PHON.ONSET con ] ].

sleeve_n1 := n_intr_le &
 [ STEM < "sleeve" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sleeve_n_1_rel",
            PHON.ONSET con ] ].

sleeveless_a1 := adj_intrans_le &
 [ STEM < "sleeveless" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sleeveless_a_1_rel",
            PHON.ONSET con ] ].

sleigh_n1 := n_intr_le &
 [ STEM < "sleigh" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sleigh_n_1_rel",
            PHON.ONSET con ] ].

sleighride_n1 := n_intr_le &
 [ STEM < "sleighride" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sleighride_n_1_rel",
            PHON.ONSET con ] ].

sleighride_v1 := v_unerg_le &
 [ STEM < "sleighride" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sleighride_v_1_rel",
            PHON.ONSET con ] ].

sleighride_v2 := v_unerg_le &
 [ STEM < "sleigh-", "ride" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sleighride_v_1_rel",
            PHON.ONSET con ] ].

sleight_n1 := n_mass_count_ppof_le &
 [ STEM < "sleight" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sleight_n_of_rel",
            PHON.ONSET con ] ].

sleight_v1 := v_np*_trans_le &
 [ STEM < "sleight" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sleight_v_1_rel",
            PHON.ONSET con ] ].

slender_a1 := adj_intrans_le &
 [ STEM < "slender" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_slender_a_1_rel",
            PHON.ONSET con ] ].

slethamn_n1 := n_proper_le &
 [ STEM < "slethamn" >,
   SYNSEM [ LKEYS.KEYREL.CARG "slethamn",
            PHON.ONSET con ] ].

sletten := n_proper_le &
 [ STEM < "sletten" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sletten",
            PHON.ONSET con ] ].

slettningsbu_n1 := n_proper_le &
 [ STEM < "slettningsbu" >,
   SYNSEM [ LKEYS.KEYREL.CARG "slettningsbu",
            PHON.ONSET con ] ].

slice_n1 := n_intr_le &
 [ STEM < "slice" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_slice_n_1_rel",
            PHON.ONSET con ] ].

slice_off_v1 := v_particle_np_le &
 [ STEM < "slice" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_slice_v_off_rel" ],
            PHON.ONSET con ] ].

slice_out_v1 := v_particle_np_le &
 [ STEM < "slice" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_slice_v_out_rel" ],
            PHON.ONSET con ] ].

slice_up_v1 := v_particle_np_le &
 [ STEM < "slice" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_slice_v_up_rel" ],
            PHON.ONSET con ] ].

slice_v1 := v_np*_trans_le &
 [ STEM < "slice" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_slice_v_1_rel",
            PHON.ONSET con ] ].

slick_a1 := adj_intrans_le &
 [ STEM < "slick" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_slick_a_1_rel",
            PHON.ONSET con ] ].

slick_n1 := n_intr_le &
 [ STEM < "slick" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_slick_n_1_rel",
            PHON.ONSET con ] ].

slicker := adj_comp_le &
 [ STEM < "slicker" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_slick_a_1_rel",
            PHON.ONSET con ] ].

slicker_n1 := n_intr_le &
 [ STEM < "slicker" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_slicker_n_1_rel",
            PHON.ONSET con ] ].

slickest_a1 := adj_superl_le &
 [ STEM < "slickest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_slick_a_1_rel",
            PHON.ONSET con ] ].

slide_n1 := n_intr_le &
 [ STEM < "slide" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_slide_n_1_rel",
            PHON.ONSET con ] ].

slide_v1 := v_unerg_le &
 [ STEM < "slide" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_slide_v_1_rel",
            PHON.ONSET con ] ].

slide_v2 := v_prep_dir_le &
 [ STEM < "slide" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_slide_v_1_rel",
            PHON.ONSET con ] ].

slide_v3 := v_np_prep_trans_dors_le &
 [ STEM < "slide" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_slide_v_1_rel",
            PHON.ONSET con ] ].

slidre_n1 := n_proper_le &
 [ STEM < "slidre" >,
   SYNSEM [ LKEYS.KEYREL.CARG "slidre",
            PHON.ONSET con ] ].

slier := adj_comp_le &
 [ STEM < "slier" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sly_a_1_rel",
            PHON.ONSET con ] ].

sliest_a1 := adj_superl_le &
 [ STEM < "sliest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sly_a_1_rel",
            PHON.ONSET con ] ].

slight_a1 := adj_intrans_le &
 [ STEM < "slight" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_slight_a_1_rel",
            PHON.ONSET con ] ].

slighter := adj_comp_le &
 [ STEM < "slighter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_slight_a_1_rel",
            PHON.ONSET con ] ].

slightest_a1 := adj_superl_le &
 [ STEM < "slightest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_slight_a_1_rel",
            PHON.ONSET con ] ].

slightingly_adv := adv_int_vp_le &
 [ STEM < "slightingly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_slighting_a_1_rel",
            PHON.ONSET con ] ].

slightly := adv_int_vp_le &
 [ STEM < "slightly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_slight_a_1_rel",
            PHON.ONSET con ] ].

slimy_a1 := adj_intrans_le &
 [ STEM < "slimy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_slimy_a_1_rel",
            PHON.ONSET con ] ].

sling_n1 := n_intr_le &
 [ STEM < "sling" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sling_n_1_rel",
            PHON.ONSET con ] ].

sling_v1 := v_np_prep_trans_dors_le &
 [ STEM < "sling" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sling_v_1_rel",
            PHON.ONSET con ] ].

slingsby_n1 := n_proper_le &
 [ STEM < "slingsby" >,
   SYNSEM [ LKEYS.KEYREL.CARG "slingsby",
            PHON.ONSET con ] ].

slink_v1 := v_prep_dir_le &
 [ STEM < "slink" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_slink_v_dir_rel",
            PHON.ONSET con ] ].

slinky_n1 := n_proper_le &
 [ STEM < "slinky" >,
   SYNSEM [ LKEYS.KEYREL.CARG "slinky",
            PHON.ONSET con ] ].

slip_in_v1 := v_particle_np_le &
 [ STEM < "slip" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_slip_v_in_rel" ],
            PHON.ONSET con ] ].

slip_n1 := n_intr_le &
 [ STEM < "slip" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_slip_n_1_rel",
            PHON.ONSET con ] ].

slip_off_v1 := v_particle_np_le &
 [ STEM < "slip" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_slip_v_off_rel" ],
            PHON.ONSET con ] ].

slip_on_v1 := v_particle_np_le &
 [ STEM < "slip" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_slip_v_on_rel" ],
            PHON.ONSET con ] ].

slip_v1 := v_prep_dir_oblig_le &
 [ STEM < "slip" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_slip_v_1_rel",
            PHON.ONSET con ] ].

slip_v2 := v_unerg_le &
 [ STEM < "slip" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_slip_v_2_rel",
            PHON.ONSET con ] ].

slipper_n1 := n_intr_le &
 [ STEM < "slipper" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_slipper_n_1_rel",
            PHON.ONSET con ] ].

slippery_a1 := adj_intrans_le &
 [ STEM < "slippery" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_slippery_a_1_rel",
            PHON.ONSET con ] ].

slogen_n1 := n_proper_city_le &
 [ STEM < "slogen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "slogen",
            PHON.ONSET con ] ].

slope_n1 := n_mass_count_le &
 [ STEM < "slope" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_slope_n_1_rel",
            PHON.ONSET con ] ].

slope_v1 := v_prep_dir_le &
 [ STEM < "slope" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_slope_v_1_rel",
            PHON.ONSET con ] ].

slosh_n1 := n_intr_le &
 [ STEM < "slosh" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_slosh_n_1_rel",
            PHON.ONSET con ] ].

slosh_v1 := v_prep_dir_le &
 [ STEM < "slosh" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_slosh_v_1_rel",
            PHON.ONSET con ] ].

slot_n1 := n_intr_le &
 [ STEM < "slot" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_slot_n_1_rel",
            PHON.ONSET con ] ].

slott_n1 := n_proper_le &
 [ STEM < "slott" >,
   SYNSEM [ LKEYS.KEYREL.CARG "slott",
            PHON.ONSET con ] ].

slow_a1 := adj_intrans_le &
 [ STEM < "slow" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_slow_a_1_rel",
            PHON.ONSET con ] ].

slow_adv1 := adv_int_vp_post_le &
 [ STEM < "slow" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_slow_a_1_rel",
            PHON.ONSET con ] ].

slow_down_v1 := v_particle_np_le &
 [ STEM < "slow" >,
   SYNSEM [ LKEYS [ --COMPKEY _down_p_sel_rel,
                    KEYREL.PRED "_slow_v_down_rel" ],
            PHON.ONSET con ] ].

slow_down_v2 := v_particle_le &
 [ STEM < "slow" >,
   SYNSEM [ LKEYS [ --COMPKEY _down_p_sel_rel,
                    KEYREL.PRED "_slow_v_down_rel" ],
            PHON.ONSET con ] ].

slow_up_v1 := v_particle_le &
 [ STEM < "slow" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_slow_v_up_rel" ],
            PHON.ONSET con ] ].

slow_v1 := v_np*_trans_le &
 [ STEM < "slow" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_slow_v_1_rel",
            PHON.ONSET con ] ].

slower_a1 := adj_comp_le &
 [ STEM < "slower" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_slow_a_1_rel",
            PHON.ONSET con ] ].

slowig_n1 := n_proper_le &
 [ STEM < "slowig" >,
   SYNSEM [ LKEYS.KEYREL.CARG "slowig",
            PHON.ONSET con ] ].

slowly_adv1 := adv_int_vp_le &
 [ STEM < "slowly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_slow_a_1_rel",
            PHON.ONSET con ] ].

slumber_n1 := n_mass_count_le &
 [ STEM < "slumber" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_slumber_n_1_rel",
            PHON.ONSET con ] ].

slumber_v1 := v_unerg_le &
 [ STEM < "slumber" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_slumber_v_1_rel",
            PHON.ONSET con ] ].

slump_n1 := n_intr_le &
 [ STEM < "slump" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_slump_n_1_rel",
            PHON.ONSET con ] ].

slump_v1 := v_unerg_le &
 [ STEM < "slump" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_slump_v_1_rel",
            PHON.ONSET con ] ].

slushy_a1 := adj_intrans_le &
 [ STEM < "slushy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_slushy_a_1_rel",
            PHON.ONSET con ] ].

sly_a1 := adj_intrans_le &
 [ STEM < "sly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sly_a_1_rel",
            PHON.ONSET con ] ].

slÃ¸tafjellet_n1 := n_proper_le &
 [ STEM < "slÃ¸tafjellet" >,
   SYNSEM [ LKEYS.KEYREL.CARG "slÃ¸tafjellet",
            PHON.ONSET con ] ].

smack_deg := adv_degree_spec_jov_only_le &
 [ STEM < "smack" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_smack_x_deg_rel",
            PHON.ONSET con ] ].

smack_n1 := n_intr_le &
 [ STEM < "smack" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_smack_n_1_rel",
            PHON.ONSET con ] ].

smack_of_v1 := v_empty_prep_intrans_le &
 [ STEM < "smack" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_smack_v_of_rel" ],
            PHON.ONSET con ] ].

smack_v1 := v_np_trans_le &
 [ STEM < "smack" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_smack_v_1_rel",
            PHON.ONSET con ] ].

small_a1 := adj_intrans_le &
 [ STEM < "small" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_small_a_1_rel",
            PHON.ONSET con ] ].

small_town_a1 := adj_intrans_le &
 [ STEM < "small-", "town" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_small-town_a_1_rel",
            PHON.ONSET con ] ].

smaller_a1 := adj_comp_le &
 [ STEM < "smaller" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_small_a_1_rel",
            PHON.ONSET con ] ].

smallest_a1 := adj_superl_le &
 [ STEM < "smallest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_small_a_1_rel",
            PHON.ONSET con ] ].

smallholder_n1 := n_intr_le &
 [ STEM < "smallholder" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_smallholder_n_1_rel",
            PHON.ONSET con ] ].

smallholding_n1 := n_intr_le &
 [ STEM < "smallholding" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_smallholding_n_1_rel",
            PHON.ONSET con ] ].

smart_a2 := adj_reg_atrans_le &
 [ STEM < "smart" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_smart_a_1_rel",
            PHON.ONSET con ] ].

smart_isect := adj_intrans_le &
 [ STEM < "smart" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_smart_a_1_rel",
            PHON.ONSET con ] ].

smartly := adv_int_vp_le &
 [ STEM < "smartly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_smart_a_1_rel",
            PHON.ONSET con ] ].

smash_in_v1 := v_particle_np_le &
 [ STEM < "smash" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_smash_v_in_rel" ],
            PHON.ONSET con ] ].

smash_n1 := n_intr_le &
 [ STEM < "smash" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_smash_n_1_rel",
            PHON.ONSET con ] ].

smash_up_v1 := v_particle_np_le &
 [ STEM < "smash" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_smash_v_up_rel" ],
            PHON.ONSET con ] ].

smash_up_v2 := v_particle_le &
 [ STEM < "smash" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_smash_v_up_rel" ],
            PHON.ONSET con ] ].

smash_v1 := v_np_trans_noger_le &
 [ STEM < "smash" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_smash_v_1_rel",
            PHON.ONSET con ] ].

smash_v2 := v_prep_dir_le &
 [ STEM < "smash" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_smash_v_1_rel",
            PHON.ONSET con ] ].

smelholtjÃ¸nnet_n1 := n_proper_le &
 [ STEM < "smelholtjÃ¸nnet" >,
   SYNSEM [ LKEYS.KEYREL.CARG "smelholtjÃ¸nnet",
            PHON.ONSET con ] ].

smell_like_v1 := v_prep_intrans_le &
 [ STEM < "smell" >,
   SYNSEM [ LKEYS [ --COMPKEY _like_p_rel,
                    KEYREL.PRED "_smell_v_of_rel" ],
            PHON.ONSET con ] ].

smell_n1 := n_ppof_le &
 [ STEM < "smell" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_smell_n_of_rel",
            PHON.ONSET con ] ].

smell_of_v1 := v_empty_prep_intrans_le &
 [ STEM < "smell" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_smell_v_of_rel" ],
            PHON.ONSET con ] ].

smell_v1 := v_unacc_le &
 [ STEM < "smell" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_smell_v_1_rel",
            PHON.ONSET con ] ].

smell_v2 := v_subj_equi_prd_adj_le &
 [ STEM < "smell" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_smell_v_1_rel",
            PHON.ONSET con ] ].

smell_v3 := v_np_trans_le &
 [ STEM < "smell" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_smell_v_2_rel",
            PHON.ONSET con ] ].

smile_at_v1 := v_empty_prep_intrans_le &
 [ STEM < "smile" >,
   SYNSEM [ LKEYS [ --COMPKEY _at_p_sel_rel,
                    KEYREL.PRED "_smile_v_at_rel" ],
            PHON.ONSET con ] ].

smile_n1 := n_intr_le &
 [ STEM < "smile" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_smile_n_1_rel",
            PHON.ONSET con ] ].

smile_v1 := v_np*_trans_le &
 [ STEM < "smile" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_smile_v_1_rel",
            PHON.ONSET con ] ].

smith := n_proper_le &
 [ STEM < "smith" >,
   SYNSEM [ LKEYS.KEYREL.CARG "smith",
            PHON.ONSET con ] ].

smithsonian_n1 := n_proper_le &
 [ STEM < "smithsonian" >,
   SYNSEM [ LKEYS.KEYREL.CARG "smithsonian",
            PHON.ONSET con ] ].

smitt_n1 := n_proper_le &
 [ STEM < "smitt" >,
   SYNSEM [ LKEYS.KEYREL.CARG "smitt",
            PHON.ONSET con ] ].

smiubelgen := n_proper_le &
 [ STEM < "smiubelgen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "smiubelgen",
            PHON.ONSET con ] ].

smiugjelet_n1 := n_proper_le &
 [ STEM < "smiugjelet" >,
   SYNSEM [ LKEYS.KEYREL.CARG "smiugjelet",
            PHON.ONSET con ] ].

smoke_n1 := n_mass_count_le &
 [ STEM < "smoke" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_smoke_n_1_rel",
            PHON.ONSET con ] ].

smoke_v1 := v_np*_trans_le &
 [ STEM < "smoke" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_smoke_v_1_rel",
            PHON.ONSET con ] ].

smoker_n := n_ppof_le &
 [ STEM < "smoker" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_smoker_n_of_rel",
            PHON.ONSET con ] ].

smoking_n1 := n_intr_le &
 [ STEM < "smoking" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_smoking_n_1_rel",
            PHON.ONSET con ] ].

smoky_a1 := adj_intrans_le &
 [ STEM < "smoky" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_smoky_a_1_rel",
            PHON.ONSET con ] ].

smooch_n1 := n_intr_le &
 [ STEM < "smooch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_smooch_n_1_rel",
            PHON.ONSET con ] ].

smooch_v1 := v_unerg_le &
 [ STEM < "smooch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_smooch_v_1_rel",
            PHON.ONSET con ] ].

smooth_away_v1 := v_particle_np_le &
 [ STEM < "smooth" >,
   SYNSEM [ LKEYS [ --COMPKEY _away_p_sel_rel,
                    KEYREL.PRED "_smooth_v_away_rel" ],
            PHON.ONSET con ] ].

smooth_isect := adj_intrans_le &
 [ STEM < "smooth" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_smooth_a_1_rel",
            PHON.ONSET con ] ].

smooth_out_v1 := v_particle_np_le &
 [ STEM < "smooth" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_smooth_v_out_rel" ],
            PHON.ONSET con ] ].

smooth_out_v2 := v_particle_le &
 [ STEM < "smooth" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_smooth_v_out_rel" ],
            PHON.ONSET con ] ].

smooth_v1 := v_np_trans_le &
 [ STEM < "smooth" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_smooth_v_1_rel",
            PHON.ONSET con ] ].

smoothly_adv1 := adv_int_vp_le &
 [ STEM < "smoothly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_smooth_a_1_rel",
            PHON.ONSET con ] ].

sms_n1 := n_proper_le &
 [ STEM < "sms" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sms",
            PHON.ONSET con ] ].

smuggle_in_v1 := v_particle_np_le &
 [ STEM < "smuggle" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_smuggle_v_in_rel" ],
            PHON.ONSET con ] ].

smuggle_out_v1 := v_particle_np_le &
 [ STEM < "smuggle" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_smuggle_v_out_rel" ],
            PHON.ONSET con ] ].

smuggle_v1 := v_np_trans_le &
 [ STEM < "smuggle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_smuggle_v_1_rel",
            PHON.ONSET con ] ].

smule_n1 := n_proper_le &
 [ STEM < "smule" >,
   SYNSEM [ LKEYS.KEYREL.CARG "smule",
            PHON.ONSET con ] ].

smyril := n_proper_le &
 [ STEM < "smyril" >,
   SYNSEM [ LKEYS.KEYREL.CARG "smyril",
            PHON.ONSET con ] ].

smÃ¸rstabb_n1 := n_proper_le &
 [ STEM < "smÃ¸rstabb" >,
   SYNSEM [ LKEYS.KEYREL.CARG "smÃ¸rstabb",
            PHON.ONSET con ] ].

smÃ¸rstabbreen_n1 := n_proper_le &
 [ STEM < "smÃ¸rstabbreen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "smÃ¸rstabbreen",
            PHON.ONSET con ] ].

smÃ¸rstabbtindane_n1 := n_proper_pl_le &
 [ STEM < "smÃ¸rstabbtindane" >,
   SYNSEM [ LKEYS.KEYREL.CARG "smÃ¸rstabbtindane",
            PHON.ONSET con ] ].

smÃ¸rstabbtinder_n1 := n_proper_pl_le &
 [ STEM < "smÃ¸rstabbtinder" >,
   SYNSEM [ LKEYS.KEYREL.CARG "smÃ¸rstabbtinder",
            PHON.ONSET con ] ].

snack_n1 := n_intr_le &
 [ STEM < "snack" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_snack_n_1_rel",
            PHON.ONSET con ] ].

snag_n1 := n_intr_le &
 [ STEM < "snag" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_snag_n_1_rel",
            PHON.ONSET con ] ].

snail_n1 := n_intr_le &
 [ STEM < "snail" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_snail_n_1_rel",
            PHON.ONSET con ] ].

snake_n1 := n_intr_le &
 [ STEM < "snake" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_snake_n_1_rel",
            PHON.ONSET con ] ].

snake_v1 := v_prep_dir_oblig_le &
 [ STEM < "snake" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_snake_v_1_rel",
            PHON.ONSET con ] ].

snakebite_n1 := n_mass_count_le &
 [ STEM < "snakebite" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_snakebite_n_1_rel",
            PHON.ONSET con ] ].

snap_at_v1 := v_empty_prep_intrans_le &
 [ STEM < "snap" >,
   SYNSEM [ LKEYS [ --COMPKEY _at_p_sel_rel,
                    KEYREL.PRED "_snap_v_at_rel" ],
            PHON.ONSET con ] ].

snap_n1 := n_intr_le &
 [ STEM < "snap" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_snap_n_1_rel",
            PHON.ONSET con ] ].

snap_off_v1 := v_particle_np_le &
 [ STEM < "snap" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_snap_v_off_rel" ],
            PHON.ONSET con ] ].

snap_off_v2 := v_particle_le &
 [ STEM < "snap" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_snap_v_off_rel" ],
            PHON.ONSET con ] ].

snap_up_v1 := v_particle_np_le &
 [ STEM < "snap" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_snap_v_up_rel" ],
            PHON.ONSET con ] ].

snap_v1 := v_np*_trans_le &
 [ STEM < "snap" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_snap_v_1_rel",
            PHON.ONSET con ] ].

snap_v2 := v_cp_prop_non_trans_le &
 [ STEM < "snap" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_snap_v_1_rel",
            PHON.ONSET con ] ].

snare_n1 := n_intr_le &
 [ STEM < "snare" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_snare_n_1_rel",
            PHON.ONSET con ] ].

snare_v1 := v_np_trans_le &
 [ STEM < "snare" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_snare_v_1_rel",
            PHON.ONSET con ] ].

snarl_at_v1 := v_empty_prep_intrans_le &
 [ STEM < "snarl" >,
   SYNSEM [ LKEYS [ --COMPKEY _at_p_sel_rel,
                    KEYREL.PRED "_snarl_v_at_rel" ],
            PHON.ONSET con ] ].

snarl_n1 := n_intr_le &
 [ STEM < "snarl" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_snarl_n_1_rel",
            PHON.ONSET con ] ].

snarl_v1 := v_np*_trans_le &
 [ STEM < "snarl" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_snarl_v_1_rel",
            PHON.ONSET con ] ].

snarl_v2 := v_cp_prop_non_trans_le &
 [ STEM < "snarl" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_snarl_v_1_rel",
            PHON.ONSET con ] ].

snatch_at_v1 := v_empty_prep_intrans_le &
 [ STEM < "snatch" >,
   SYNSEM [ LKEYS [ --COMPKEY _at_p_sel_rel,
                    KEYREL.PRED "_snatch_v_at_rel" ],
            PHON.ONSET con ] ].

snatch_n1 := n_intr_le &
 [ STEM < "snatch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_snatch_n_1_rel",
            PHON.ONSET con ] ].

snatch_up_v1 := v_particle_np_le &
 [ STEM < "snatch" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_snatch_v_up_rel" ],
            PHON.ONSET con ] ].

snatch_v1 := v_np_trans_le &
 [ STEM < "snatch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_snatch_v_1_rel",
            PHON.ONSET con ] ].

sneak_n1 := n_intr_le &
 [ STEM < "sneak" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sneak_n_1_rel",
            PHON.ONSET con ] ].

sneak_v1 := v_prep_dir_oblig_le &
 [ STEM < "sneak" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sneak_v_1_rel",
            PHON.ONSET con ] ].

sneak_v2 := v_np_prep_trans_dors_le &
 [ STEM < "sneak" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sneak_v_1_rel",
            PHON.ONSET con ] ].

sneaker_n1 := n_intr_le &
 [ STEM < "sneaker" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sneaker_n_1_rel",
            PHON.ONSET con ] ].

sniff_at_v1 := v_empty_prep_intrans_le &
 [ STEM < "sniff" >,
   SYNSEM [ LKEYS [ --COMPKEY _at_p_sel_rel,
                    KEYREL.PRED "_sniff_v_at_rel" ],
            PHON.ONSET con ] ].

sniff_n1 := n_intr_le &
 [ STEM < "sniff" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sniff_n_1_rel",
            PHON.ONSET con ] ].

sniff_out_v1 := v_particle_np_le &
 [ STEM < "sniff" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_sniff_v_out_rel" ],
            PHON.ONSET con ] ].

sniff_v1 := v_np*_trans_le &
 [ STEM < "sniff" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sniff_v_1_rel",
            PHON.ONSET con ] ].

sniff_v2 := v_cp_prop_non_trans_le &
 [ STEM < "sniff" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sniff_v_1_rel",
            PHON.ONSET con ] ].

snob_n1 := n_intr_le &
 [ STEM < "snob" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_snob_n_1_rel",
            PHON.ONSET con ] ].

snore_v1 := v_unerg_le &
 [ STEM < "snore" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_snore_v_1_rel",
            PHON.ONSET con ] ].

snort_at_v1 := v_empty_prep_intrans_le &
 [ STEM < "snort" >,
   SYNSEM [ LKEYS [ --COMPKEY _at_p_sel_rel,
                    KEYREL.PRED "_snort_v_at_rel" ],
            PHON.ONSET con ] ].

snort_n1 := n_intr_le &
 [ STEM < "snort" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_snort_n_1_rel",
            PHON.ONSET con ] ].

snort_v1 := v_np*_trans_le &
 [ STEM < "snort" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_snort_v_1_rel",
            PHON.ONSET con ] ].

snort_v2 := v_cp_prop_non_trans_le &
 [ STEM < "snort" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_snort_v_1_rel",
            PHON.ONSET con ] ].

snout_n1 := n_intr_le &
 [ STEM < "snout" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_snout_n_1_rel",
            PHON.ONSET con ] ].

snow_bunting_n1 := n_intr_le &
 [ STEM < "snow", "bunting" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_snow+bunting_n_1_rel",
            PHON.ONSET con ] ].

snow_bunting_n2 := n_mass_kind_le &
 [ STEM < "snow", "bunting" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_snow+bunting_n_kind_rel",
            PHON.ONSET con ] ].

snow_n1 := n_mass_count_le &
 [ STEM < "snow" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_snow_n_1_rel",
            PHON.ONSET con ] ].

snow_plow_v1 := v_np_trans_le &
 [ STEM < "snow", "plow" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_snow+plow_v_1_rel",
            PHON.ONSET con ] ].

snow_plow_v2 := v_np_trans_le &
 [ STEM < "snow-", "plow" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_snow+plow_v_1_rel",
            PHON.ONSET con ] ].

snow_v1 := v_atrans_le &
 [ STEM < "snow" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_snow_v_1_rel",
            PHON.ONSET con ] ].

snowcapped_a1 := adj_attr_intrans_le &
 [ STEM < "snowcapped" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_snowcapped_a_1_rel",
            PHON.ONSET con ] ].

snowdrift_n1 := n_intr_le &
 [ STEM < "snowdrift" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_snowdrift_n_1_rel",
            PHON.ONSET con ] ].

snowfield_n1 := n_intr_le &
 [ STEM < "snowfield" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_snowfield_n_1_rel",
            PHON.ONSET con ] ].

snowmelt_n1 := n_mass_le &
 [ STEM < "snowmelt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_snowmelt_n_1_rel",
            PHON.ONSET con ] ].

snowmobile_n1 := n_intr_le &
 [ STEM < "snowmobile" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_snowmobile_n_1_rel",
            PHON.ONSET con ] ].

snowmobile_n2 := n_intr_le &
 [ STEM < "snow", "mobile" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_snowmobile_n_1_rel",
            PHON.ONSET con ] ].

snowpack_n1 := n_intr_le &
 [ STEM < "snowpack" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_snowpack_n_1_rel",
            PHON.ONSET con ] ].

snowpatrol_n1 := n_intr_le &
 [ STEM < "snowpatrol" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_snowpatrol_n_1_rel",
            PHON.ONSET con ] ].

snowplow_n1 := n_intr_le &
 [ STEM < "snowplow" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_snowplow_n_1_rel",
            PHON.ONSET con ] ].

snowplow_v1 := v_np*_trans_le &
 [ STEM < "snowplow" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_snowplow_v_1_rel",
            PHON.ONSET con ] ].

snowslope_n1 := n_intr_le &
 [ STEM < "snowslope" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_snowslope_n_1_rel",
            PHON.ONSET con ] ].

snowy_a1 := adj_intrans_le &
 [ STEM < "snowy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_snowy_a_1_rel",
            PHON.ONSET con ] ].

snowy_a2 := adj_atrans_le &
 [ STEM < "snowy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_snowy_a_1_rel",
            PHON.ONSET con ] ].

snug_a1 := adj_intrans_le &
 [ STEM < "snug" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_snug_a_1_rel",
            PHON.ONSET con ] ].

snuggle_down_v1 := v_particle_le &
 [ STEM < "snuggle" >,
   SYNSEM [ LKEYS [ --COMPKEY _down_p_sel_rel,
                    KEYREL.PRED "_snuggle_v_down_rel" ],
            PHON.ONSET con ] ].

snuggle_up_v1 := v_particle_pp_le &
 [ STEM < "snuggle" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    --OCOMPKEY _to_p_rel,
                    KEYREL.PRED "_snuggle_v_up_rel" ],
            PHON.ONSET con ] ].

snugly_adv := adv_int_vp_le &
 [ STEM < "snugly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_snug_a_1_rel",
            PHON.ONSET con ] ].

so-called_a1 := adj_intrans_le &
 [ STEM < "so", "called" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_so+called_a_1_rel",
            PHON.ONSET con ] ].

so-called_a2 := adj_intrans_le &
 [ STEM < "so-", "called" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_so+called_a_1_rel",
            PHON.ONSET con ] ].

so_a1 := adj_pred_nodpct_le &
 [ STEM < "so" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_so_a_1_rel",
            PHON.ONSET con ] ].

so_adv1 := adv_s_pre_le &
 [ STEM < "so" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_so_a_thus_rel",
            PHON.ONSET con ] ].

so_adv2 := adv_int_vp_pre_le &
 [ STEM < "so" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_so_a_1_rel",
            PHON.ONSET con ] ].

so_as_to := p_subconj_inf_le &
 [ STEM < "so", "as", "to" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_so+as+to_x_rel",
            PHON.ONSET con ] ].

so_conj := conj_complex_so_le &
 [ STEM < "so" >,
   SYNSEM.PHON.ONSET con ].

so_cp := s_compl_phrase_le &
 [ STEM < "so" >,
   SYNSEM.PHON.ONSET con ].

so_deg := so_degree_spec_le &
 [ STEM < "so" >,
   SYNSEM.PHON.ONSET con ].

so_deg_nc := comp_degree_spec_nc_le &
 [ STEM < "so" >,
   SYNSEM [ LKEYS.KEYREL.PRED comp_so_rel,
            PHON.ONSET con ] ].

so_far_adv1 := adv_int_vp_le &
 [ STEM < "so", "far" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_so+far_a_1_rel",
            PHON.ONSET con ] ].

so_so_excl_post := adv_s_post_word_nospec_le &
 [ STEM < "so", "so" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_so+so_a_1_rel",
            PHON.ONSET con ] ].

so_so_excl_pre := adv_s_pre_word_root_le &
 [ STEM < "so", "so" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_so+so_a_1_rel",
            PHON.ONSET con ] ].

so_that := p_subconj_le &
 [ STEM < "so", "that" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_so+that_x_rel",
            PHON.ONSET con ] ].

so_that_dadv := p_subconj_dadv_le &
 [ STEM < "so" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_so+that_x_rel",
            PHON.ONSET con ] ].

so_to_speak_adv1 := adv_int_vp_post_le &
 [ STEM < "so", "to", "speak" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_so+to+speak_a_1_rel",
            PHON.ONSET con ] ].

soak_in_v1 := v_particle_np_le &
 [ STEM < "soak" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_soak_v_in_rel" ],
            PHON.ONSET con ] ].

soak_in_v2 := v_particle_le &
 [ STEM < "soak" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_soak_v_in_rel" ],
            PHON.ONSET con ] ].

soak_n1 := n_intr_le &
 [ STEM < "soak" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_soak_n_1_rel",
            PHON.ONSET con ] ].

soak_up_v1 := v_particle_np_le &
 [ STEM < "soak" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_soak_v_up_rel" ],
            PHON.ONSET con ] ].

soak_v1 := v_unerg_le &
 [ STEM < "soak" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_soak_v_1_rel",
            PHON.ONSET con ] ].

soak_v2 := v_np_trans_le &
 [ STEM < "soak" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_soak_v_cause_rel",
            PHON.ONSET con ] ].

soaking_wet_a1 := adj_intrans_le &
 [ STEM < "soaking", "wet" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_soaking+wet_a_1_rel",
            PHON.ONSET con ] ].

soar_v1 := v_prep_dir_le &
 [ STEM < "soar" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_soar_v_1_rel",
            PHON.ONSET con ] ].

sob_n1 := n_intr_le &
 [ STEM < "sob" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sob_n_1_rel",
            PHON.ONSET con ] ].

sob_v1 := v_np*_trans_le &
 [ STEM < "sob" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sob_v_1_rel",
            PHON.ONSET con ] ].

soccer_n1 := n_intr_le &
 [ STEM < "soccer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_soccer_n_1_rel",
            PHON.ONSET con ] ].

social_a1 := adj_intrans_le &
 [ STEM < "social" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_social_a_1_rel",
            PHON.ONSET con ] ].

social_security_n1 := n_mass_le &
 [ STEM < "social", "security" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_social+security_n_1_rel",
            PHON.ONSET con ] ].

social_security_n2 := n_mass_le &
 [ STEM < "ssn" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_social+security_n_1_rel",
            PHON.ONSET con ] ].

socialist_n1 := n_intr_le &
 [ STEM < "socialist" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_socialist_n_1_rel",
            PHON.ONSET con ] ].

socialize_v1 := v_unerg_le &
 [ STEM < "socialize" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_socialize_v_1_rel",
            PHON.ONSET con ] ].

socially_isect := adv_int_vp_le &
 [ STEM < "socially" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_social_a_1_rel",
            PHON.ONSET con ] ].

society_n1 := n_mass_count_ppof_le &
 [ STEM < "society" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_society_n_of_rel",
            PHON.ONSET con ] ].

sock_in_v1 := v_particle_np_le &
 [ STEM < "sock" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_sock_v_in_rel" ],
            PHON.ONSET con ] ].

sock_n1 := n_intr_le &
 [ STEM < "sock" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sock_n_1_rel",
            PHON.ONSET con ] ].

sock_v1 := v_np_trans_le &
 [ STEM < "sock" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sock_v_1_rel",
            PHON.ONSET con ] ].

socket_n1 := n_intr_le &
 [ STEM < "socket" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_socket_n_1_rel",
            PHON.ONSET con ] ].

socrates_n1 := n_proper_le &
 [ STEM < "socrates" >,
   SYNSEM [ LKEYS.KEYREL.CARG "socrates",
            PHON.ONSET con ] ].

sod_n1 := n_mass_le &
 [ STEM < "sod" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sod_n_1_rel",
            PHON.ONSET con ] ].

soda_n1 := n_mass_count_le &
 [ STEM < "soda" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_soda_n_1_rel",
            PHON.ONSET con ] ].

sodium_n1 := n_mass_le &
 [ STEM < "sodium" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sodium_n_1_rel",
            PHON.ONSET con ] ].

sofa_n1 := n_intr_le &
 [ STEM < "sofa" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sofa_n_1_rel",
            PHON.ONSET con ] ].

soft_a1 := adj_intrans_le &
 [ STEM < "soft" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_soft_a_1_rel",
            PHON.ONSET con ] ].

soften_up_v1 := v_particle_np_le &
 [ STEM < "soften" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_soften_v_up_rel" ],
            PHON.ONSET con ] ].

soften_up_v2 := v_particle_le &
 [ STEM < "soften" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_soften_v_up_rel" ],
            PHON.ONSET con ] ].

soften_v1 := v_np*_trans_le &
 [ STEM < "soften" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_soften_v_1_rel",
            PHON.ONSET con ] ].

softer := adj_comp_le &
 [ STEM < "softer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_soft_a_1_rel",
            PHON.ONSET con ] ].

softest_a1 := adj_superl_le &
 [ STEM < "softest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_soft_a_1_rel",
            PHON.ONSET con ] ].

softly := adv_int_vp_le &
 [ STEM < "softly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_soft_a_1_rel",
            PHON.ONSET con ] ].

softness_n1 := n_mass_le &
 [ STEM < "softness" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_softness_n_1_rel",
            PHON.ONSET con ] ].

software_n1 := n_mass_le &
 [ STEM < "software" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_software_n_1_rel",
            PHON.ONSET con ] ].

soggy_a1 := adj_intrans_le &
 [ STEM < "soggy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_soggy_a_1_rel",
            PHON.ONSET con ] ].

sogn := n_proper_le &
 [ STEM < "sogn" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sogn",
            PHON.ONSET con ] ].

sogndal := n_proper_le &
 [ STEM < "sogndal" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sogndal",
            PHON.ONSET con ] ].

sogndalseggi := n_proper_le &
 [ STEM < "sogndalseggi" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sogndalseggi",
            PHON.ONSET con ] ].

sogne_n1 := n_proper_le &
 [ STEM < "sogne" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sogne",
            PHON.ONSET con ] ].

sognefjeldet_n1 := n_proper_le &
 [ STEM < "sognefjeldet" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sognefjeldet",
            PHON.ONSET con ] ].

sognefjell_n1 := n_proper_le &
 [ STEM < "sognefjell" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sognefjell",
            PHON.ONSET con ] ].

sognefjellet_n1 := n_proper_le &
 [ STEM < "sognefjellet" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sognefjellet",
            PHON.ONSET con ] ].

sognefjellhytta_n1 := n_proper_le &
 [ STEM < "sognefjellhytta" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sognefjellhytta",
            PHON.ONSET con ] ].

sognefjellhytte_n1 := n_proper_le &
 [ STEM < "sognefjellhytte" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sognefjellhytte",
            PHON.ONSET con ] ].

sognefjellshytta := n_proper_le &
 [ STEM < "sognefjellshytta" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sognefjellshytta",
            PHON.ONSET con ] ].

sognefjellsveien_n1 := n_proper_le &
 [ STEM < "sognefjellsveien" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sognefjellsveien",
            PHON.ONSET con ] ].

sognefjellveien_n1 := n_proper_le &
 [ STEM < "sognefjellveien" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sognefjellveien",
            PHON.ONSET con ] ].

sognefjellvein_n1 := n_proper_le &
 [ STEM < "sognefjellvein" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sognefjellvein",
            PHON.ONSET con ] ].

sognefjord := n_proper_le &
 [ STEM < "sognefjord" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sognefjord",
            PHON.ONSET con ] ].

sognefjorden_n1 := n_proper_le &
 [ STEM < "sognefjorden" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sognefjorden",
            PHON.ONSET con ] ].

sognfjell_n1 := n_proper_le &
 [ STEM < "sognfjell" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sognfjell",
            PHON.ONSET con ] ].

sogninger_n1 := n_proper_le &
 [ STEM < "sogninger" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sogninger",
            PHON.ONSET con ] ].

sohlberg := n_proper_le &
 [ STEM < "sohlberg" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sohlberg",
            PHON.ONSET con ] ].

soil_n1 := n_mass_count_le &
 [ STEM < "soil" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_soil_n_1_rel",
            PHON.ONSET con ] ].

soil_v1 := v_np_trans_le &
 [ STEM < "soil" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_soil_v_1_rel",
            PHON.ONSET con ] ].

sokni := n_proper_le &
 [ STEM < "sokni" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sokni",
            PHON.ONSET con ] ].

solace_n1 := n_mass_le &
 [ STEM < "solace" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_solace_n_1_rel",
            PHON.ONSET con ] ].

solar_a1 := adj_intrans_le &
 [ STEM < "solar" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_solar_a_1_rel",
            PHON.ONSET con ] ].

solar_n1 := n_intr_le &
 [ STEM < "solar" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_solar_n_1_rel",
            PHON.ONSET con ] ].

solar_powered_a1 := adj_intrans_le &
 [ STEM < "solar", "powered" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_solar+powered_a_1_rel",
            PHON.ONSET con ] ].

solarium_n1 := n_intr_le &
 [ STEM < "solarium" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_solarium_n_1_rel",
            PHON.ONSET con ] ].

sold_out_a1 := adj_intrans_le &
 [ STEM < "sold", "out" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sold+out_a_1_rel",
            PHON.ONSET con ] ].

soldier_n1 := n_intr_le &
 [ STEM < "soldier" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_soldier_n_1_rel",
            PHON.ONSET con ] ].

soldiery_n1 := n_mass_le &
 [ STEM < "soldiery" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_soldiery_n_1_rel",
            PHON.ONSET con ] ].

soldiery_n2 := n_plur_le &
 [ STEM < "soldiery" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_soldiery_n_1_rel",
            PHON.ONSET con ] ].

sole_a1 := adj_intrans_le &
 [ STEM < "sole" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sole_a_1_rel",
            PHON.ONSET con ] ].

sole_n1 := n_mass_count_le &
 [ STEM < "sole" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sole_n_1_rel",
            PHON.ONSET con ] ].

solely_adv1 := adv_int_vp_le &
 [ STEM < "solely" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sole_a_1_rel",
            PHON.ONSET con ] ].

solemn_a1 := adj_intrans_le &
 [ STEM < "solemn" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_solemn_a_1_rel",
            PHON.ONSET con ] ].

solemnity_n1 := n_mass_le &
 [ STEM < "solemnity" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_solemnity_n_1_rel",
            PHON.ONSET con ] ].

solemnize_v1 := v_np_trans_le &
 [ STEM < "solemnize" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_solemnize_v_1_rel",
            PHON.ONSET con ] ].

solfeggio_n1 := n_mass_le &
 [ STEM < "solfeggio" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_solfeggio_n_1_rel",
            PHON.ONSET con ] ].

solheimslien_n1 := n_proper_city_le &
 [ STEM < "solheimslien" >,
   SYNSEM [ LKEYS.KEYREL.CARG "solheimslien",
            PHON.ONSET con ] ].

solicit_v1 := v_np_trans_le &
 [ STEM < "solicit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_solicit_v_1_rel",
            PHON.ONSET con ] ].

solicitous_v1 := v_np_trans_le &
 [ STEM < "solicitous" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_solicitous_v_1_rel",
            PHON.ONSET con ] ].

solid_a1 := adj_intrans_le &
 [ STEM < "solid" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_solid_a_1_rel",
            PHON.ONSET con ] ].

solidify_v1 := v_np*_trans_le &
 [ STEM < "solidify" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_solidify_v_1_rel",
            PHON.ONSET con ] ].

solidity_n1 := n_mass_le &
 [ STEM < "solidity" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_solidity_n_1_rel",
            PHON.ONSET con ] ].

solidly := adv_int_vp_le &
 [ STEM < "solidly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_solid_a_1_rel",
            PHON.ONSET con ] ].

solitude_n1 := n_mass_le &
 [ STEM < "solitude" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_solitude_n_1_rel",
            PHON.ONSET con ] ].

solmization_n1 := n_mass_le &
 [ STEM < "solmization" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_solmization_n_1_rel",
            PHON.ONSET con ] ].

solnuten := n_proper_le &
 [ STEM < "solnuten" >,
   SYNSEM [ LKEYS.KEYREL.CARG "solnuten",
            PHON.ONSET con ] ].

solo_adv := adv_int_vp_post_le &
 [ STEM < "solo" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_solo_a_1_rel",
            PHON.ONSET con ] ].

solo_n1 := n_intr_le &
 [ STEM < "solo" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_solo_n_1_rel",
            PHON.ONSET con ] ].

solo_v1 := v_unerg_le &
 [ STEM < "solo" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_solo_v_1_rel",
            PHON.ONSET con ] ].

solstice_n1 := n_mass_count_le &
 [ STEM < "solstice" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_solstice_n_1_rel",
            PHON.ONSET con ] ].

solstitial_a1 := adj_intrans_le &
 [ STEM < "solstitial" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_solstitial_a_1_rel",
            PHON.ONSET con ] ].

solubility_n1 := n_mass_le &
 [ STEM < "solubility" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_solubility_n_1_rel",
            PHON.ONSET con ] ].

solution_n1 := n_ppof_le &
 [ STEM < "solution" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_solution_n_of_rel",
            PHON.ONSET con ] ].

solve_v1 := v_np_trans_le &
 [ STEM < "solve" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_solve_v_1_rel",
            PHON.ONSET con ] ].

solveig_n1 := n_proper_le &
 [ STEM < "solveig" >,
   SYNSEM [ LKEYS.KEYREL.CARG "solveig",
            PHON.ONSET con ] ].

somalia_n1 := n_proper_le &
 [ STEM < "somalia" >,
   SYNSEM [ LKEYS.KEYREL.CARG "somalia",
            PHON.ONSET con ] ].

somber_a1 := adj_intrans_le &
 [ STEM < "somber" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_somber_a_1_rel",
            PHON.ONSET con ] ].

some := det_part_div_le &
 [ STEM < "some" >,
   SYNSEM [ LKEYS.KEYREL.PRED _some_q_rel,
            PHON.ONSET con ] ].

some_indiv := det_nondiv_le &
 [ STEM < "some" >,
   SYNSEM [ LKEYS.KEYREL.PRED _some_q_indiv_rel,
            PHON.ONSET con ] ].

some_more_adv1 := adv_int_vp_post_le &
 [ STEM < "some", "more" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_some+more_a_1_rel",
            PHON.ONSET con ] ].

some_more_det := det_part_pl_mass_le &
 [ STEM < "some", "more" >,
   SYNSEM [ LKEYS.KEYREL.PRED _some+more_q_rel,
            PHON.ONSET con ] ].

some_n1 := n_meas_nocmpnd_le &
 [ STEM < "some" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_some_n_meas_rel",
            PHON.ONSET con ] ].

somebody := n_generic_pro_le &
 [ STEM < "somebody" >,
   SYNSEM [ LKEYS [ ALTKEYREL.PRED _some_q_rel,
                    KEYREL.PRED person_rel ],
            PHON.ONSET con ] ].

someday_n1 := n_generic_pro_adv_le &
 [ STEM < "someday" >,
   SYNSEM [ LKEYS [ ALTKEYREL.PRED _some_q_rel,
                    KEYREL.PRED time_n_rel ],
            PHON.ONSET con ] ].

somehow_adv1 := adv_int_vp_le &
 [ STEM < "somehow" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_somehow_a_1_rel",
            PHON.ONSET con ] ].

someone := n_generic_pro_le &
 [ STEM < "someone" >,
   SYNSEM [ LKEYS [ ALTKEYREL.PRED _some_q_rel,
                    KEYREL.PRED person_rel ],
            PHON.ONSET con ] ].

someplace_n1 := n_generic_pro_adv_le &
 [ STEM < "someplace" >,
   SYNSEM [ LKEYS [ ALTKEYREL.PRED _some_q_rel,
                    KEYREL.PRED place_n_rel ],
            PHON.ONSET con ] ].

someplace_n2 := n_generic_pro_adv_le &
 [ STEM < "some", "place" >,
   SYNSEM [ LKEYS [ ALTKEYREL.PRED _some_q_rel,
                    KEYREL.PRED place_n_rel ],
            PHON.ONSET con ] ].

something := n_generic_pro_le &
 [ STEM < "something" >,
   SYNSEM [ LKEYS [ ALTKEYREL.PRED _some_q_rel,
                    KEYREL.PRED thing_rel ],
            PHON.ONSET con ] ].

sometime_n1 := n_generic_pro_adv_le &
 [ STEM < "sometime" >,
   SYNSEM [ LKEYS [ ALTKEYREL.PRED _some_q_rel,
                    KEYREL.PRED time_n_rel ],
            PHON.ONSET con ] ].

sometime_n2 := n_generic_pro_adv_le &
 [ STEM < "some", "time" >,
   SYNSEM [ LKEYS [ ALTKEYREL.PRED _some_q_rel,
                    KEYREL.PRED time_n_rel ],
            PHON.ONSET con ] ].

sometimes_adv1 := adv_int_vp_le &
 [ STEM < "sometimes" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sometimes_a_1_rel",
            PHON.ONSET con ] ].

somewhat_mdeg := adv_degree_spec_m_le &
 [ STEM < "somewhat" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_somewhat_x_mdeg_rel",
            PHON.ONSET con ] ].

somewhat_vdeg := adv_degree_spec_v_le &
 [ STEM < "somewhat" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_somewhat_x_vdeg_rel",
            PHON.ONSET con ] ].

somewhere_n1 := n_generic_pro_adv_le &
 [ STEM < "somewhere" >,
   SYNSEM [ LKEYS [ ALTKEYREL.PRED _some_q_rel,
                    KEYREL.PRED place_n_rel ],
            PHON.ONSET con ] ].

somewhere_n2 := n_generic_pro_adv_le &
 [ STEM < "some", "where" >,
   SYNSEM [ LKEYS [ ALTKEYREL.PRED _some_q_rel,
                    KEYREL.PRED place_n_rel ],
            PHON.ONSET con ] ].

somme_n1 := n_proper_le &
 [ STEM < "somme" >,
   SYNSEM [ LKEYS.KEYREL.CARG "somme",
            PHON.ONSET con ] ].

son_n1 := n_ppof_le &
 [ STEM < "son" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_son_n_of_rel",
            PHON.ONSET con ] ].

sonata_n1 := n_intr_le &
 [ STEM < "sonata" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sonata_n_1_rel",
            PHON.ONSET con ] ].

song_n1 := n_ppof_le &
 [ STEM < "song" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_song_n_of_rel",
            PHON.ONSET con ] ].

song_of_solomon_n1 := n_proper_le &
 [ STEM < "song", "of", "solomon" >,
   SYNSEM [ LKEYS.KEYREL.CARG "song_of_solomon",
            PHON.ONSET con ] ].

songbird_n1 := n_intr_le &
 [ STEM < "songbird" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_songbird_n_1_rel",
            PHON.ONSET con ] ].

sonnet_n1 := n_intr_le &
 [ STEM < "sonnet" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sonnet_n_1_rel",
            PHON.ONSET con ] ].

sonorous_a1 := adj_intrans_le &
 [ STEM < "sonorous" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sonorous_a_1_rel",
            PHON.ONSET con ] ].

sonorously_adv1 := adv_int_vp_post_le &
 [ STEM < "sonorously" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sonorous_a_1_rel",
            PHON.ONSET con ] ].

sony_n1 := n_proper_le &
 [ STEM < "sony" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sony",
            PHON.ONSET con ] ].

soon_adv1 := n_adv_gradable_nom_le &
 [ STEM < "soon" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED _soon_p_rel,
                    KEYREL.PRED time_n_rel ],
            PHON.ONSET con ] ].

soon_after_adv1 := adv_int_vp_le &
 [ STEM < "soon", "after" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_soon+after_a_1_rel",
            PHON.ONSET con ] ].

soon_aux_adv := adv_int_vp_aux_le &
 [ STEM < "soon" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_soon_a_1_rel",
            PHON.ONSET con ] ].

sooner_adv1 := n_adv_gradable_nom_comp_le &
 [ STEM < "sooner" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED _sooner_p_rel,
                    KEYREL.PRED time_n_rel ],
            PHON.ONSET con ] ].

soot_n1 := n_mass_le &
 [ STEM < "soot" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_soot_n_1_rel",
            PHON.ONSET con ] ].

sooth_n1 := n_mass_le &
 [ STEM < "sooth" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sooth_n_1_rel",
            PHON.ONSET con ] ].

soothe_v1 := v_np_trans_le &
 [ STEM < "soothe" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_soothe_v_1_rel",
            PHON.ONSET con ] ].

sooty_a1 := adj_intrans_le &
 [ STEM < "sooty" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sooty_a_1_rel",
            PHON.ONSET con ] ].

sophie_n1 := n_proper_le &
 [ STEM < "sophie" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sophie",
            PHON.ONSET con ] ].

sophisticate_n1 := n_intr_le &
 [ STEM < "sophisticate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sophisticate_n_1_rel",
            PHON.ONSET con ] ].

sophisticated_a1 := adj_intrans_le &
 [ STEM < "sophisticated" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sophisticated_a_1_rel",
            PHON.ONSET con ] ].

sore_a1 := adj_intrans_le &
 [ STEM < "sore" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sore_a_1_rel",
            PHON.ONSET con ] ].

soria_n1 := n_proper_le &
 [ STEM < "soria" >,
   SYNSEM [ LKEYS.KEYREL.CARG "soria",
            PHON.ONSET con ] ].

sorry_a1 := adj_trans_le &
 [ STEM < "sorry" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_sorry_a_for_rel" ],
            PHON.ONSET con ] ].

sorry_a2 := adj_reg_that_cp_le &
 [ STEM < "sorry" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sorry_a_for_rel",
            PHON.ONSET con ] ].

sorry_a3 := adj_reg_equi_le &
 [ STEM < "sorry" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sorry_a_for_rel",
            PHON.ONSET con ] ].

sorry_root_post := adv_s_post_word_nospec_le &
 [ STEM < "sorry" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sorry_a_1_rel",
            PHON.ONSET con ] ].

sorry_root_pre := adv_disc_like_preh_le &
 [ STEM < "sorry" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sorry",
            PHON.ONSET con ] ].

sort_n1 := n_ppcomp_spr_le &
 [ STEM < "sort" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sort_n_of_rel",
            PHON.ONSET con ] ].

sort_n2 := n_intr_le &
 [ STEM < "sort" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sort_n_of_rel",
            PHON.ONSET con ] ].

sort_of_deg := adv_degree_spec_v_le &
 [ STEM < "sort", "of" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sort+of_x_vdeg_rel",
            PHON.ONSET con ] ].

sort_of_disc_adv := adv_disc_like_preh_le &
 [ STEM < "sort", "of" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sort_of",
            PHON.ONSET con ] ].

sort_of_disc_adv_2 := adv_s_post_word_nospec_le &
 [ STEM < "sort", "of" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sort+of_a_1_rel",
            PHON.ONSET con ] ].

sort_out_v1 := v_particle_np_le &
 [ STEM < "sort" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_sort_v_out_rel" ],
            PHON.ONSET con ] ].

sort_v1 := v_np_trans_le &
 [ STEM < "sort" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sort_v_1_rel",
            PHON.ONSET con ] ].

sorta_deg := adv_degree_spec_v_le &
 [ STEM < "sorta" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sort+of_x_deg_rel",
            PHON.ONSET con ] ].

sota_n1 := n_proper_le &
 [ STEM < "sota" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sota",
            PHON.ONSET con ] ].

soul_n1 := n_mass_count_le &
 [ STEM < "soul" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_soul_n_1_rel",
            PHON.ONSET con ] ].

soulful_isect := adj_intrans_le &
 [ STEM < "soulful" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_soulful_a_1_rel",
            PHON.ONSET con ] ].

soulfully := adv_int_vp_le &
 [ STEM < "soulfully" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_soulful_a_1_rel",
            PHON.ONSET con ] ].

sound_n1 := n_mass_count_ppof_le &
 [ STEM < "sound" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sound_n_of_rel",
            PHON.ONSET con ] ].

sound_v1 := v_prdp_pp_seq_adj_le &
 [ STEM < "sound" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sound_v_seem-to_rel",
            PHON.ONSET con ] ].

sound_v2 := v_prdp_pp_seq_prep_le &
 [ STEM < "sound" >,
   SYNSEM [ LKEYS [ --COMPKEY _like_p_rel,
                    KEYREL.PRED "_sound_v_seem-to_rel" ],
            PHON.ONSET con ] ].

sound_v3 := v_expl_it_subj_like_le &
 [ STEM < "sound" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sound_v_seem-to_rel",
            PHON.ONSET con ] ].

soundly_adv := adv_int_vp_le &
 [ STEM < "soundly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sound_a_1_rel",
            PHON.ONSET con ] ].

soup_n1 := n_mass_count_le &
 [ STEM < "soup" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_soup_n_1_rel",
            PHON.ONSET con ] ].

sour_a2 := adj_trans_oblig_le &
 [ STEM < "sour" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_sour_a_on_rel" ],
            PHON.ONSET con ] ].

sour_isect := adj_intrans_le &
 [ STEM < "sour" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sour_a_1_rel",
            PHON.ONSET con ] ].

source_n1 := n_ppof_nosort_le &
 [ STEM < "source" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_source_n_of_rel",
            PHON.ONSET con ] ].

sourly := adv_int_vp_le &
 [ STEM < "sourly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sour_a_1_rel",
            PHON.ONSET con ] ].

south_a1 := adj_attr_intrans_le &
 [ STEM < "south" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_south_a_1_rel",
            PHON.ONSET con ] ].

south_america_n1 := n_proper_le &
 [ STEM < "south", "america" >,
   SYNSEM [ LKEYS.KEYREL.CARG "south_america",
            PHON.ONSET con ] ].

south_american_a1 := adj_intrans_le &
 [ STEM < "south", "american" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_south+american_a_1_rel",
            PHON.ONSET con ] ].

south_bend_n1 := n_proper_city_le &
 [ STEM < "south", "bend" >,
   SYNSEM [ LKEYS.KEYREL.CARG "south_bend",
            PHON.ONSET con ] ].

south_lake_n1 := n_proper_le &
 [ STEM < "south", "lake" >,
   SYNSEM [ LKEYS.KEYREL.CARG "south_lake",
            PHON.ONSET con ] ].

south_n1 := n_no_cmpnd_hd_le &
 [ STEM < "south" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_south_n_1_rel",
            PHON.ONSET con ] ].

south_n2 := n_adv_dir_le &
 [ STEM < "south" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED _south_a_1_rel,
                    KEYREL.PRED place_n_rel ],
            PHON.ONSET con ] ].

southampton_n1 := n_proper_le &
 [ STEM < "southampton" >,
   SYNSEM [ LKEYS.KEYREL.CARG "southampton",
            PHON.ONSET con ] ].

southbound_a1 := adj_intrans_le &
 [ STEM < "southbound" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_southbound_a_1_rel",
            PHON.ONSET con ] ].

southcarolina_n1 := n_proper_le &
 [ STEM < "south", "carolina" >,
   SYNSEM [ LKEYS.KEYREL.CARG "southcarolina",
            PHON.ONSET con ] ].

southcarolina_n2 := n_proper_abb_le &
 [ STEM < "sc" >,
   SYNSEM [ LKEYS.KEYREL.CARG "southcarolina",
            PHON.ONSET con ] ].

southdakota_n1 := n_proper_le &
 [ STEM < "south", "dakota" >,
   SYNSEM [ LKEYS.KEYREL.CARG "southdakota",
            PHON.ONSET con ] ].

southdakota_n2 := n_proper_abb_le &
 [ STEM < "sd" >,
   SYNSEM [ LKEYS.KEYREL.CARG "southdakota",
            PHON.ONSET con ] ].

southeast_adj2 := adj_attr_intrans_le &
 [ STEM < "south-", "east" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_southeast_a_1_rel",
            PHON.ONSET con ] ].

southeast_isect := adj_attr_intrans_le &
 [ STEM < "southeast" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_southeast_a_1_rel",
            PHON.ONSET con ] ].

southeast_n1 := n_no_cmpnd_hd_le &
 [ STEM < "southeast" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_southeast_n_1_rel",
            PHON.ONSET con ] ].

southeast_n2 := n_adv_dir_le &
 [ STEM < "southeast" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED _southeast_a_1_rel,
                    KEYREL.PRED place_n_rel ],
            PHON.ONSET con ] ].

southeast_n3 := n_ppof_nocmpnd_le &
 [ STEM < "south", "east" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_southeast_n_of_rel",
            PHON.ONSET con ] ].

southeast_n4 := n_ppof_nocmpnd_le &
 [ STEM < "south-", "east" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_southeast_n_of_rel",
            PHON.ONSET con ] ].

southeast_n5 := n_adv_dir_le &
 [ STEM < "south-", "east" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED _southeast_a_1_rel,
                    KEYREL.PRED place_n_rel ],
            PHON.ONSET con ] ].

southeasterly_a1 := adj_intrans_le &
 [ STEM < "southeasterly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_southeasterly_a_1_rel",
            PHON.ONSET con ] ].

southeastern_a1 := adj_intrans_le &
 [ STEM < "southeastern" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_southeastern_a_1_rel",
            PHON.ONSET con ] ].

southeastward_a1 := adj_intrans_le &
 [ STEM < "southeastward" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_southeastward_a_1_rel",
            PHON.ONSET con ] ].

southeastward_n1 := n_adv_event_le &
 [ STEM < "southeastward" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED _southeastward_a_1_rel,
                    KEYREL.PRED place_n_rel ],
            PHON.ONSET con ] ].

southeastwards_n1 := n_adv_event_le &
 [ STEM < "southeastwards" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED _southeastward_a_1_rel,
                    KEYREL.PRED place_n_rel ],
            PHON.ONSET con ] ].

southerly_a1 := adj_intrans_le &
 [ STEM < "southerly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_southerly_a_1_rel",
            PHON.ONSET con ] ].

southern_isect := adj_intrans_le &
 [ STEM < "southern" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_southern_a_1_rel",
            PHON.ONSET con ] ].

southernmost_a1 := adj_intrans_le &
 [ STEM < "southernmost" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_southernmost_a_1_rel",
            PHON.ONSET con ] ].

southkorea_n1 := n_proper_le &
 [ STEM < "south", "korea" >,
   SYNSEM [ LKEYS.KEYREL.CARG "south_korea",
            PHON.ONSET con ] ].

southkorean_a1 := adj_intrans_le &
 [ STEM < "south", "korean" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_south+korean_a_1_rel",
            PHON.ONSET con ] ].

southkorean_n1 := n_proper_le &
 [ STEM < "south", "korean" >,
   SYNSEM [ LKEYS.KEYREL.CARG "south_korean",
            PHON.ONSET con ] ].

southkorean_n2 := n_intr_le &
 [ STEM < "south", "korean" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_south+korean_n_1_rel",
            PHON.ONSET con ] ].

southward_a1 := adj_intrans_le &
 [ STEM < "southward" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_southward_a_1_rel",
            PHON.ONSET con ] ].

southward_n1 := n_adv_event_le &
 [ STEM < "southward" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED _southward_a_1_rel,
                    KEYREL.PRED place_n_rel ],
            PHON.ONSET con ] ].

southwards_n1 := n_adv_event_le &
 [ STEM < "southwards" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED _southward_a_1_rel,
                    KEYREL.PRED place_n_rel ],
            PHON.ONSET con ] ].

southwest_adj2 := adj_attr_intrans_le &
 [ STEM < "south-", "west" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_southwest_a_1_rel",
            PHON.ONSET con ] ].

southwest_isect := adj_attr_intrans_le &
 [ STEM < "southwest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_southwest_a_1_rel",
            PHON.ONSET con ] ].

southwest_n1 := n_no_cmpnd_hd_le &
 [ STEM < "southwest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_southwest_n_1_rel",
            PHON.ONSET con ] ].

southwest_n2 := n_adv_dir_le &
 [ STEM < "southwest" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED _southwest_a_1_rel,
                    KEYREL.PRED place_n_rel ],
            PHON.ONSET con ] ].

southwest_n3 := n_ppof_nocmpnd_le &
 [ STEM < "south", "west" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_southwest_n_of_rel",
            PHON.ONSET con ] ].

southwest_n4 := n_ppof_nocmpnd_le &
 [ STEM < "south-", "west" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_southwest_n_of_rel",
            PHON.ONSET con ] ].

southwest_n5 := n_adv_dir_le &
 [ STEM < "south-", "west" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED _southwest_a_1_rel,
                    KEYREL.PRED place_n_rel ],
            PHON.ONSET con ] ].

southwesterly_a1 := adj_intrans_le &
 [ STEM < "southwesterly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_southwesterly_a_1_rel",
            PHON.ONSET con ] ].

southwestern_a1 := adj_intrans_le &
 [ STEM < "southwestern" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_southwestern_a_1_rel",
            PHON.ONSET con ] ].

southwestward_a1 := adj_intrans_le &
 [ STEM < "southwestward" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_southwestward_a_1_rel",
            PHON.ONSET con ] ].

southwestward_n1 := n_adv_event_le &
 [ STEM < "southwestward" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED _southwestward_a_1_rel,
                    KEYREL.PRED place_n_rel ],
            PHON.ONSET con ] ].

southwestwards_n1 := n_adv_event_le &
 [ STEM < "southwestwards" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED _southwestward_a_1_rel,
                    KEYREL.PRED place_n_rel ],
            PHON.ONSET con ] ].

soutome_n1 := n_proper_le &
 [ STEM < "soutome" >,
   SYNSEM [ LKEYS.KEYREL.CARG "soutome",
            PHON.ONSET con ] ].

souvenir_n1 := n_intr_le &
 [ STEM < "souvenir" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_souvenir_n_1_rel",
            PHON.ONSET con ] ].

sovereign_a1 := adj_intrans_le &
 [ STEM < "sovereign" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sovereign_a_1_rel",
            PHON.ONSET con ] ].

sovereign_n1 := n_intr_le &
 [ STEM < "sovereign" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sovereign_n_1_rel",
            PHON.ONSET con ] ].

sow_n1 := n_intr_le &
 [ STEM < "sow" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sow_n_1_rel",
            PHON.ONSET con ] ].

sow_v1 := v_np*_trans_le &
 [ STEM < "sow" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sow_v_1_rel",
            PHON.ONSET con ] ].

space_n1 := n_mass_count_ppof_le &
 [ STEM < "space" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_space_n_of_rel",
            PHON.ONSET con ] ].

space_out_v1 := v_particle_np_le &
 [ STEM < "space" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_space_v_out_rel" ],
            PHON.ONSET con ] ].

space_v1 := v_np*_trans_le &
 [ STEM < "space" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_space_v_1_rel",
            PHON.ONSET con ] ].

spaceship_n1 := n_intr_le &
 [ STEM < "spaceship" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_spaceship_n_1_rel",
            PHON.ONSET con ] ].

spacewalk_n1 := n_intr_le &
 [ STEM < "spacewalk" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_spacewalk_n_1_rel",
            PHON.ONSET con ] ].

spacewalk_v1 := v_unerg_le &
 [ STEM < "spacewalk" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_spacewalk_v_1_rel",
            PHON.ONSET con ] ].

spacious_a1 := adj_intrans_le &
 [ STEM < "spacious" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_spacious_a_1_rel",
            PHON.ONSET con ] ].

spade_n1 := n_intr_le &
 [ STEM < "spade" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_spade_n_1_rel",
            PHON.ONSET con ] ].

spaghetti_warehouse_n1 := n_intr_named_le &
 [ STEM < "spaghetti", "warehouse" >,
   SYNSEM [ LKEYS.KEYREL.CARG "spaghetti_warehouse",
            PHON.ONSET con ] ].

spaghetti_warehouse_n2 := n_intr_named_le &
 [ STEM < "spaghetti-", "warehouse" >,
   SYNSEM [ LKEYS.KEYREL.CARG "spaghetti_warehouse",
            PHON.ONSET con ] ].

spahn_n1 := n_proper_le &
 [ STEM < "spahn" >,
   SYNSEM [ LKEYS.KEYREL.CARG "spahn",
            PHON.ONSET con ] ].

spain_n1 := n_proper_le &
 [ STEM < "spain" >,
   SYNSEM [ LKEYS.KEYREL.CARG "spain",
            PHON.ONSET con ] ].

spam_n1 := n_mass_count_le &
 [ STEM < "spam" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_spam_n_1_rel",
            PHON.ONSET con ] ].

spammer_n1 := n_intr_le &
 [ STEM < "spammer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_spammer_n_1_rel",
            PHON.ONSET con ] ].

span_n1 := n_intr_le &
 [ STEM < "span" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_span_n_1_rel",
            PHON.ONSET con ] ].

span_v1 := v_np*_trans_le &
 [ STEM < "span" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_span_v_1_rel",
            PHON.ONSET con ] ].

spanish_a1 := adj_intrans_le &
 [ STEM < "spanish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_spanish_a_1_rel",
            PHON.ONSET con ] ].

spanish_n1 := n_proper_le &
 [ STEM < "spanish" >,
   SYNSEM [ LKEYS.KEYREL.CARG "spanish",
            PHON.ONSET con ] ].

spanish_n2 := n_intr_le &
 [ STEM < "spanish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_spanish_n_1_rel",
            PHON.ONSET con ] ].

spanker_n1 := n_intr_le &
 [ STEM < "spanker" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_spanker_n_1_rel",
            PHON.ONSET con ] ].

spar_n1 := n_intr_le &
 [ STEM < "spar" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_spar_n_1_rel",
            PHON.ONSET con ] ].

spar_v1 := v_unerg_le &
 [ STEM < "spar" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_spar_v_1_rel",
            PHON.ONSET con ] ].

spare_a1 := adj_intrans_le &
 [ STEM < "spare" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_spare_a_1_rel",
            PHON.ONSET con ] ].

spare_n1 := n_intr_le &
 [ STEM < "spare" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_spare_n_1_rel",
            PHON.ONSET con ] ].

spare_v1 := v_ditrans_only_le &
 [ STEM < "spare" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_spare_v_1_rel",
            PHON.ONSET con ] ].

spare_v2 := v_np_trans_le &
 [ STEM < "spare" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_spare_v_1_rel",
            PHON.ONSET con ] ].

spark_n1 := n_intr_le &
 [ STEM < "spark" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_spark_n_1_rel",
            PHON.ONSET con ] ].

spark_off_v1 := v_particle_np_le &
 [ STEM < "spark" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_spark_v_off_rel" ],
            PHON.ONSET con ] ].

spark_v1 := v_np*_trans_le &
 [ STEM < "spark" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_spark_v_1_rel",
            PHON.ONSET con ] ].

sparrow_n1 := n_intr_le &
 [ STEM < "sparrow" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sparrow_n_1_rel",
            PHON.ONSET con ] ].

sparse_a1 := adj_intrans_le &
 [ STEM < "sparse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sparse_a_1_rel",
            PHON.ONSET con ] ].

sparsely := adv_int_vp_le &
 [ STEM < "sparsely" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sparse_a_1_rel",
            PHON.ONSET con ] ].

spawn_n1 := n_mass_le &
 [ STEM < "spawn" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_spawn_n_1_rel",
            PHON.ONSET con ] ].

spawn_v1 := v_np_trans_le &
 [ STEM < "spawn" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_spawn_v_1_rel",
            PHON.ONSET con ] ].

speak_of_v1 := v_empty_prep_intrans_le &
 [ STEM < "speak" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_speak_v_of_rel" ],
            PHON.ONSET con ] ].

speak_v1 := v_np*_trans_le &
 [ STEM < "speak" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_speak_v_1_rel",
            PHON.ONSET con ] ].

speak_v2 := v_np*_prep_trans_le &
 [ STEM < "speak" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _to_p_rel,
                    KEYREL.PRED "_speak_v_1_rel" ],
            PHON.ONSET con ] ].

speak_v3 := v_double_pp_le &
 [ STEM < "speak" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_rel,
                    --OCOMPKEY _about_p_rel,
                    KEYREL.PRED "_speak_v_1_rel" ],
            PHON.ONSET con ] ].

speaker_n1 := n_intr_le &
 [ STEM < "speaker" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_speaker_n_1_rel",
            PHON.ONSET con ] ].

spear_n1 := n_intr_le &
 [ STEM < "spear" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_spear_n_1_rel",
            PHON.ONSET con ] ].

spear_v1 := v_np*_trans_le &
 [ STEM < "spear" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_spear_v_1_rel",
            PHON.ONSET con ] ].

spec_n1 := n_ppcomp_le &
 [ STEM < "spec" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_specification_n_for_rel" ],
            PHON.ONSET con ] ].

special_a1 := adj_intrans_le &
 [ STEM < "special" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_special_a_1_rel",
            PHON.ONSET con ] ].

special_n1 := n_intr_le &
 [ STEM < "special" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_special_n_1_rel",
            PHON.ONSET con ] ].

special_order_v1 := v_np_trans_le &
 [ STEM < "special", "order" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_special+order_v_1_rel",
            PHON.ONSET con ] ].

special_order_v2 := v_np_trans_le &
 [ STEM < "special-", "order" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_special+order_v_1_rel",
            PHON.ONSET con ] ].

specialist_n1 := n_intr_le &
 [ STEM < "specialist" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_specialist_n_1_rel",
            PHON.ONSET con ] ].

specialize_at_v1 := v_empty_prep_intrans_le &
 [ STEM < "specialize" >,
   SYNSEM [ LKEYS [ --COMPKEY _at_p_sel_rel,
                    KEYREL.PRED "_specialize_v_at_rel" ],
            PHON.ONSET con ] ].

specialize_in_v1 := v_empty_prep_intrans_le &
 [ STEM < "specialize" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_specialize_v_in_rel" ],
            PHON.ONSET con ] ].

specially := adv_int_vp_le &
 [ STEM < "specially" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_special_a_1_rel",
            PHON.ONSET con ] ].

species_n1 := n_ppcomp_spr_le &
 [ STEM < "species" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_species_n_of-n_rel",
            PHON.ONSET con ] ].

species_n2 := n_intr_le &
 [ STEM < "species" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_species_n_of-n_rel",
            PHON.ONSET con ] ].

specif_abb := adv_int_vp_le &
 [ STEM < "specif." >,
   SYNSEM [ LKEYS.KEYREL.PRED "_specific_a_1_rel",
            PHON.ONSET con ] ].

specif_abb_2 := adv_int_vp_le &
 [ STEM < "specif" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_specific_a_1_rel",
            PHON.ONSET con ] ].

specific_a1 := adj_intrans_le &
 [ STEM < "specific" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_specific_a_1_rel",
            PHON.ONSET con ] ].

specifically_adv1 := adv_int_vp_le &
 [ STEM < "specifically" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_specific_a_1_rel",
            PHON.ONSET con ] ].

specification_n1 := n_ppcomp_le &
 [ STEM < "specification" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_specification_n_for_rel" ],
            PHON.ONSET con ] ].

specifics_n1 := n_plur_ppcomp_le &
 [ STEM < "specifics" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_specifics_n_of_rel" ],
            PHON.ONSET con ] ].

specify_v1 := v_np_trans_le &
 [ STEM < "specify" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_specify_v_1_rel",
            PHON.ONSET con ] ].

specify_v2 := v_cp_non_trans_le &
 [ STEM < "specify" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_specify_v_1_rel",
            PHON.ONSET con ] ].

specimen_n1 := n_intr_le &
 [ STEM < "specimen" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_specimen_n_1_rel",
            PHON.ONSET con ] ].

specious_a1 := adj_intrans_le &
 [ STEM < "specious" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_specious_a_1_rel",
            PHON.ONSET con ] ].

speck_n1 := n_intr_le &
 [ STEM < "speck" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_speck_n_1_rel",
            PHON.ONSET con ] ].

spectacle_n1 := n_ppof_le &
 [ STEM < "spectacle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_spectacle_n_of_rel",
            PHON.ONSET con ] ].

spectacular_a1 := adj_intrans_le &
 [ STEM < "spectacular" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_spectacular_a_1_rel",
            PHON.ONSET con ] ].

spectrum_n1 := n_intr_le &
 [ STEM < "spectrum" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_spectrum_n_1_rel",
            PHON.ONSET con ] ].

speculate_v1 := v_unerg_le &
 [ STEM < "speculate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_speculate_v_1_rel",
            PHON.ONSET con ] ].

speculate_v2 := v_cp_non_trans_le &
 [ STEM < "speculate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_speculate_v_1_rel",
            PHON.ONSET con ] ].

speculative_a1 := adj_intrans_le &
 [ STEM < "speculative" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_speculative_a_1_rel",
            PHON.ONSET con ] ].

speech_n1 := n_mass_count_le &
 [ STEM < "speech" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_speech_n_1_rel",
            PHON.ONSET con ] ].

speechless_a1 := adj_intrans_le &
 [ STEM < "speechless" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_speechless_a_1_rel",
            PHON.ONSET con ] ].

speed_n1 := n_mass_count_le &
 [ STEM < "speed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_speed_n_1_rel",
            PHON.ONSET con ] ].

speed_up_v1 := v_particle_np_le &
 [ STEM < "speed" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_speed_v_up_rel" ],
            PHON.ONSET con ] ].

speed_up_v2 := v_particle_le &
 [ STEM < "speed" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_speed_v_up_rel" ],
            PHON.ONSET con ] ].

speed_v1 := v_prep_dir_le &
 [ STEM < "speed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_speed_v_1_rel",
            PHON.ONSET con ] ].

speeder_n1 := n_intr_le &
 [ STEM < "speeder" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_speeder_n_1_rel",
            PHON.ONSET con ] ].

spell_n1 := n_intr_le &
 [ STEM < "spell" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_spell_n_1_rel",
            PHON.ONSET con ] ].

spell_out_v1 := v_particle_np_le &
 [ STEM < "spell" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_spell_v_out_rel" ],
            PHON.ONSET con ] ].

spell_v1 := v_np*_trans_le &
 [ STEM < "spell" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_spell_v_1_rel",
            PHON.ONSET con ] ].

spend_v1 := v_np_trans_le &
 [ STEM < "spend" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_spend_v_1_rel",
            PHON.ONSET con ] ].

spend_v2 := v_np_prep_trans_le &
 [ STEM < "spend" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _on_p_rel,
                    KEYREL.PRED "_spend_v_1_rel" ],
            PHON.ONSET con ] ].

spend_v3 := v_anom_equi_prp_le &
 [ STEM < "spend" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_spend_v_1_rel",
            PHON.ONSET con ] ].

sperm_n1 := n_intr_le &
 [ STEM < "sperm" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sperm_n_1_rel",
            PHON.ONSET con ] ].

speyer_n1 := n_proper_le &
 [ STEM < "speyer" >,
   SYNSEM [ LKEYS.KEYREL.CARG "speyer",
            PHON.ONSET con ] ].

sphere_n1 := n_intr_le &
 [ STEM < "sphere" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sphere_n_1_rel",
            PHON.ONSET con ] ].

spherical_a1 := adj_intrans_le &
 [ STEM < "spherical" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_spherical_a_1_rel",
            PHON.ONSET con ] ].

spice_n1 := n_intr_le &
 [ STEM < "spice" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_spice_n_1_rel",
            PHON.ONSET con ] ].

spicy_a1 := adj_intrans_le &
 [ STEM < "spicy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_spicy_a_1_rel",
            PHON.ONSET con ] ].

spike_n1 := n_intr_le &
 [ STEM < "spike" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_spike_n_1_rel",
            PHON.ONSET con ] ].

spill_n1 := n_intr_le &
 [ STEM < "spill" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_spill_n_1_rel",
            PHON.ONSET con ] ].

spill_out_v1 := v_particle_le &
 [ STEM < "spill" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_spill_v_out_rel" ],
            PHON.ONSET con ] ].

spill_over_v1 := v_particle_le &
 [ STEM < "spill" >,
   SYNSEM [ LKEYS [ --COMPKEY _over_p_sel_rel,
                    KEYREL.PRED "_spill_v_over_rel" ],
            PHON.ONSET con ] ].

spill_v1 := v_np*_trans_le &
 [ STEM < "spill" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_spill_v_1_rel",
            PHON.ONSET con ] ].

spin_around_v1 := v_particle_le &
 [ STEM < "spin" >,
   SYNSEM [ LKEYS [ --COMPKEY _around_p_sel_rel,
                    KEYREL.PRED "_spin_v_around_rel" ],
            PHON.ONSET con ] ].

spin_n1 := n_mass_count_le &
 [ STEM < "spin" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_spin_n_1_rel",
            PHON.ONSET con ] ].

spin_out_v1 := v_particle_le &
 [ STEM < "spin" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_spin_v_out_rel" ],
            PHON.ONSET con ] ].

spin_out_v2 := v_particle_np_le &
 [ STEM < "spin" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_spin_v_out_rel" ],
            PHON.ONSET con ] ].

spin_v1 := v_np*_trans_le &
 [ STEM < "spin" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_spin_v_1_rel",
            PHON.ONSET con ] ].

spindle_n1 := n_intr_le &
 [ STEM < "spindle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_spindle_n_1_rel",
            PHON.ONSET con ] ].

spindle_v1 := v_np*_trans_le &
 [ STEM < "spindle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_spindle_v_1_rel",
            PHON.ONSET con ] ].

spine_n1 := n_intr_le &
 [ STEM < "spine" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_spine_n_1_rel",
            PHON.ONSET con ] ].

spiral_n1 := n_intr_le &
 [ STEM < "spiral" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_spiral_n_1_rel",
            PHON.ONSET con ] ].

spiral_v1 := v_unerg_le &
 [ STEM < "spiral" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_spiral_v_1_rel",
            PHON.ONSET con ] ].

spire_n1 := n_intr_le &
 [ STEM < "spire" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_spire_n_1_rel",
            PHON.ONSET con ] ].

spirit_n1 := n_intr_le &
 [ STEM < "spirit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_spirit_n_1_rel",
            PHON.ONSET con ] ].

spiritual_a1 := adj_intrans_le &
 [ STEM < "spiritual" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_spiritual_a_1_rel",
            PHON.ONSET con ] ].

spiritual_n1 := n_intr_le &
 [ STEM < "spiritual" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_spiritual_n_1_rel",
            PHON.ONSET con ] ].

spirituous_a1 := adj_intrans_le &
 [ STEM < "spirituous" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_spirituous_a_1_rel",
            PHON.ONSET con ] ].

spit_n1 := n_mass_count_le &
 [ STEM < "spit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_spit_n_1_rel",
            PHON.ONSET con ] ].

spit_out_v1 := v_particle_np_le &
 [ STEM < "spit" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_spit_v_out_rel" ],
            PHON.ONSET con ] ].

spit_v1 := v_np*_trans_le &
 [ STEM < "spit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_spit_v_1_rel",
            PHON.ONSET con ] ].

spite_n1 := n_mass_le &
 [ STEM < "spite" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_spite_n_1_rel",
            PHON.ONSET con ] ].

spiterhÃ¸_n1 := n_proper_le &
 [ STEM < "spiterhÃ¸" >,
   SYNSEM [ LKEYS.KEYREL.CARG "spiterhÃ¸",
            PHON.ONSET con ] ].

spiterstulen_n1 := n_proper_le &
 [ STEM < "spiterstulen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "spiterstulen",
            PHON.ONSET con ] ].

splash_n1 := n_intr_le &
 [ STEM < "splash" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_splash_n_1_rel",
            PHON.ONSET con ] ].

splash_v1 := v_np*_trans_le &
 [ STEM < "splash" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_splash_v_1_rel",
            PHON.ONSET con ] ].

splendid_a1 := adj_intrans_le &
 [ STEM < "splendid" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_splendid_a_1_rel",
            PHON.ONSET con ] ].

splendidly := adv_int_vp_le &
 [ STEM < "splendidly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_splendid_a_1_rel",
            PHON.ONSET con ] ].

splendor_n1 := n_mass_count_le &
 [ STEM < "splendor" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_splendor_n_1_rel",
            PHON.ONSET con ] ].

splint_n1 := n_intr_le &
 [ STEM < "splint" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_splint_n_1_rel",
            PHON.ONSET con ] ].

splint_v1 := v_np_trans_le &
 [ STEM < "splint" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_splint_v_1_rel",
            PHON.ONSET con ] ].

split_n1 := n_intr_le &
 [ STEM < "split" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_split_n_1_rel",
            PHON.ONSET con ] ].

split_off_v1 := v_particle_np_le &
 [ STEM < "split" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_split_v_off_rel" ],
            PHON.ONSET con ] ].

split_off_v2 := v_particle_le &
 [ STEM < "split" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_split_v_off_rel" ],
            PHON.ONSET con ] ].

split_up+with_v1 := v_particle_empty_pp_le &
 [ STEM < "split" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    --OCOMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_split_v_up-with_rel" ],
            PHON.ONSET con ] ].

split_up_v1 := v_particle_np_le &
 [ STEM < "split" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_split_v_up_rel" ],
            PHON.ONSET con ] ].

split_up_v2 := v_particle_le &
 [ STEM < "split" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_split_v_up_rel" ],
            PHON.ONSET con ] ].

split_v1 := v_np*_trans_le &
 [ STEM < "split" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_split_v_1_rel",
            PHON.ONSET con ] ].

splitoff_n1 := n_intr_le &
 [ STEM < "splitoff" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_splitoff_n_1_rel",
            PHON.ONSET con ] ].

splurge_n1 := n_intr_le &
 [ STEM < "splurge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_splurge_n_1_rel",
            PHON.ONSET con ] ].

splurge_v1 := v_unerg_le &
 [ STEM < "splurge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_splurge_v_1_rel",
            PHON.ONSET con ] ].

spoil_v1 := v_np_trans_le &
 [ STEM < "spoil" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_spoil_v_1_rel",
            PHON.ONSET con ] ].

spoiled_a1 := adj_intrans_le &
 [ STEM < "spoiled" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_spoiled_a_1_rel",
            PHON.ONSET con ] ].

spoils_n1 := n_plur_nocmpnd_le &
 [ STEM < "spoil" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_spoils_n_1_rel",
            PHON.ONSET con ] ].

spongy_a1 := adj_intrans_le &
 [ STEM < "spongy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_spongy_a_1_rel",
            PHON.ONSET con ] ].

sponsor_n1 := n_ppof_le &
 [ STEM < "sponsor" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sponsor_n_of_rel",
            PHON.ONSET con ] ].

sponsor_v1 := v_np_trans_le &
 [ STEM < "sponsor" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sponsor_v_1_rel",
            PHON.ONSET con ] ].

spontaneous_isect := adj_intrans_le &
 [ STEM < "spontaneous" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_spontaneous_a_1_rel",
            PHON.ONSET con ] ].

spontaneously_adv1 := adv_int_vp_le &
 [ STEM < "spontaneously" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_spontaneous_a_1_rel",
            PHON.ONSET con ] ].

spool_n1 := n_intr_le &
 [ STEM < "spool" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_spool_n_1_rel",
            PHON.ONSET con ] ].

spool_v1 := v_unerg_le &
 [ STEM < "spool" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_spool_v_1_rel",
            PHON.ONSET con ] ].

spool_v2 := v_np_trans_le &
 [ STEM < "spool" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_spool_v_cause_rel",
            PHON.ONSET con ] ].

spoon_n1 := n_intr_le &
 [ STEM < "spoon" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_spoon_n_1_rel",
            PHON.ONSET con ] ].

spoon_v1 := v_np_trans_le &
 [ STEM < "spoon" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_spoon_v_1_rel",
            PHON.ONSET con ] ].

spoon_v2 := v_np_prep_trans_dors_le &
 [ STEM < "spoon" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_spoon_v_1_rel",
            PHON.ONSET con ] ].

sporadic_isect := adj_intrans_le &
 [ STEM < "sporadic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sporadic_a_1_rel",
            PHON.ONSET con ] ].

sporadically := adv_int_vp_le &
 [ STEM < "sporadically" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sporadic_a_1_rel",
            PHON.ONSET con ] ].

spore_n1 := n_intr_le &
 [ STEM < "spore" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_spore_n_1_rel",
            PHON.ONSET con ] ].

sport_n1 := n_intr_nosort_le &
 [ STEM < "sport" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sport_n_1_rel",
            PHON.ONSET con ] ].

sport_v1 := v_np_trans_le &
 [ STEM < "sport" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sport_v_1_rel",
            PHON.ONSET con ] ].

sporting_n1 := n_intr_le &
 [ STEM < "sporting" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sporting_n_1_rel",
            PHON.ONSET con ] ].

sports_n1 := n_mass_le &
 [ STEM < "sports" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sports_n_1_rel",
            PHON.ONSET con ] ].

sportsman_n1 := n_intr_le &
 [ STEM < "sportsman" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sportsman_n_1_rel",
            PHON.ONSET con ] ].

spot_n1 := n_ppof_le &
 [ STEM < "spot" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_spot_n_of_rel",
            PHON.ONSET con ] ].

spot_v1 := v_np_trans_le &
 [ STEM < "spot" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_spot_v_1_rel",
            PHON.ONSET con ] ].

spot_v2 := v_obj_equi_prd_le &
 [ STEM < "spot" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_spot_v_1_rel",
            PHON.ONSET con ] ].

spotty_a1 := adj_intrans_le &
 [ STEM < "spotty" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_spotty_a_1_rel",
            PHON.ONSET con ] ].

spouse_n1 := n_ppof_le &
 [ STEM < "spouse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_spouse_n_of_rel",
            PHON.ONSET con ] ].

sprawl_n1 := n_intr_le &
 [ STEM < "sprawl" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sprawl_n_1_rel",
            PHON.ONSET con ] ].

sprawl_out_v1 := v_particle_le &
 [ STEM < "sprawl" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_sprawl_v_out_rel" ],
            PHON.ONSET con ] ].

sprawl_v1 := v_unerg_le &
 [ STEM < "sprawl" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sprawl_v_1_rel",
            PHON.ONSET con ] ].

spray_n1 := n_mass_count_le &
 [ STEM < "spray" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_spray_n_1_rel",
            PHON.ONSET con ] ].

spray_v1 := v_np_trans_le &
 [ STEM < "spray" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_spray_v_with_rel",
            PHON.ONSET con ] ].

spray_with_v1 := v_empty_prep_trans_le &
 [ STEM < "spray" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_spray_v_with_rel" ],
            PHON.ONSET con ] ].

spread_n1 := n_mass_count_ppof_le &
 [ STEM < "spread" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_spread_n_of_rel",
            PHON.ONSET con ] ].

spread_out_v1 := v_particle_np_le &
 [ STEM < "spread" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_spread_v_out_rel" ],
            PHON.ONSET con ] ].

spread_out_v2 := v_particle_le &
 [ STEM < "spread" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_spread_v_out_rel" ],
            PHON.ONSET con ] ].

spread_v1 := v_np*_trans_le &
 [ STEM < "spread" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_spread_v_1_rel",
            PHON.ONSET con ] ].

spreadsheet_n1 := n_intr_le &
 [ STEM < "spreadsheet" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_spreadsheet_n_1_rel",
            PHON.ONSET con ] ].

sprengel_n1 := n_proper_le &
 [ STEM < "sprengel" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sprengel",
            PHON.ONSET con ] ].

sprig_n1 := n_intr_le &
 [ STEM < "sprig" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sprig_n_1_rel",
            PHON.ONSET con ] ].

sprightly_a1 := adj_intrans_le &
 [ STEM < "sprightly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sprightly_a_1_rel",
            PHON.ONSET con ] ].

spring_n1 := n_season_div_le &
 [ STEM < "spring" >,
   SYNSEM [ LKEYS.KEYREL.CARG "spring",
            PHON.ONSET con ] ].

spring_n2 := n_season_wspec_le &
 [ STEM < "spring" >,
   SYNSEM [ LKEYS.KEYREL.CARG "spring",
            PHON.ONSET con ] ].

spring_n3 := n_season_np_le &
 [ STEM < "spring" >,
   SYNSEM [ LKEYS.KEYREL.CARG "spring",
            PHON.ONSET con ] ].

spring_n4 := n_intr_le &
 [ STEM < "spring" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_spring_n_1_rel",
            PHON.ONSET con ] ].

spring_up_v1 := v_particle_le &
 [ STEM < "spring" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_spring_v_up_rel" ],
            PHON.ONSET con ] ].

spring_v1 := v_prep_dir_le &
 [ STEM < "spring" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_spring_v_1_rel",
            PHON.ONSET con ] ].

spring_v2 := v_np_trans_noger_le &
 [ STEM < "spring" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_spring_v_1_rel",
            PHON.ONSET con ] ].

springfield_n1 := n_proper_city_le &
 [ STEM < "springfield" >,
   SYNSEM [ LKEYS.KEYREL.CARG "springfield",
            PHON.ONSET con ] ].

springtime_n1 := n_season_div_le &
 [ STEM < "springtime" >,
   SYNSEM [ LKEYS.KEYREL.CARG "springtime",
            PHON.ONSET con ] ].

sprinkle_n1 := n_ppof_le &
 [ STEM < "sprinkle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sprinkle_n_of_rel",
            PHON.ONSET con ] ].

sprinkle_v1 := v_atrans_le &
 [ STEM < "sprinkle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sprinkle_v_1_rel",
            PHON.ONSET con ] ].

sprinkle_v2 := v_np_trans_le &
 [ STEM < "sprinkle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sprinkle_v_with_rel",
            PHON.ONSET con ] ].

sprint_n1 := n_proper_le &
 [ STEM < "sprint" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sprint",
            PHON.ONSET con ] ].

spry_a1 := adj_intrans_le &
 [ STEM < "spry" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_spry_a_1_rel",
            PHON.ONSET con ] ].

spur_n1 := n_intr_le &
 [ STEM < "spur" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_spur_n_1_rel",
            PHON.ONSET con ] ].

spur_on_v1 := v_particle_np_le &
 [ STEM < "spur" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_spur_v_on_rel" ],
            PHON.ONSET con ] ].

spur_on_v2 := v_particle_np_pp_to_le &
 [ STEM < "spur" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_spur_v_on_rel" ],
            PHON.ONSET con ] ].

spur_v1 := v_np_trans_le &
 [ STEM < "spur" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_spur_v_1_rel",
            PHON.ONSET con ] ].

spurious_a1 := adj_intrans_le &
 [ STEM < "spurious" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_spurious_a_1_rel",
            PHON.ONSET con ] ].

spurn_v1 := v_np_trans_le &
 [ STEM < "spurn" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_spurn_v_1_rel",
            PHON.ONSET con ] ].

spy_n1 := n_intr_le &
 [ STEM < "spy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_spy_n_1_rel",
            PHON.ONSET con ] ].

spy_on_v1 := v_empty_prep_intrans_le &
 [ STEM < "spy" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_spy_v_on_rel" ],
            PHON.ONSET con ] ].

spy_v1 := v_np*_trans_le &
 [ STEM < "spy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_spy_v_1_rel",
            PHON.ONSET con ] ].

sq_pct := punct_sq_le &
 [ STEM < "'" >,
   SYNSEM.PHON.ONSET onset ].

squander_v1 := v_np_trans_le &
 [ STEM < "squander" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_squander_v_1_rel",
            PHON.ONSET con ] ].

square_a1 := adj_intrans_le &
 [ STEM < "square" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_square_a_1_rel",
            PHON.ONSET con ] ].

square_away_v1 := v_particle_np_le &
 [ STEM < "square" >,
   SYNSEM [ LKEYS [ --COMPKEY _away_p_sel_rel,
                    KEYREL.PRED "_square_v_away_rel" ],
            PHON.ONSET con ] ].

square_n1 := n_ppof_le &
 [ STEM < "square" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_square_n_of_rel",
            PHON.ONSET con ] ].

square_post_ttl := n_post_title_le &
 [ STEM < "square" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_square_n_of_rel",
            PHON.ONSET con ] ].

square_v1 := v_np_trans_le &
 [ STEM < "square" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_square_v_1_rel",
            PHON.ONSET con ] ].

squash_v1 := v_np_trans_le &
 [ STEM < "squash" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_squash_v_1_rel",
            PHON.ONSET con ] ].

squat_a1 := adj_intrans_le &
 [ STEM < "squat" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_squat_a_1_rel",
            PHON.ONSET con ] ].

squat_v1 := v_unerg_le &
 [ STEM < "squat" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_squat_v_1_rel",
            PHON.ONSET con ] ].

squeeze_in_v1 := v_particle_np_le &
 [ STEM < "squeeze" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_squeeze_v_in_rel" ],
            PHON.ONSET con ] ].

squeeze_in_v2 := v_particle_le &
 [ STEM < "squeeze" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_squeeze_v_in_rel" ],
            PHON.ONSET con ] ].

squeeze_n1 := n_intr_le &
 [ STEM < "squeeze" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_squeeze_n_1_rel",
            PHON.ONSET con ] ].

squeeze_out_v1 := v_particle_np_le &
 [ STEM < "squeeze" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_squeeze_v_out_rel" ],
            PHON.ONSET con ] ].

squeeze_out_v2 := v_particle_le &
 [ STEM < "squeeze" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_squeeze_v_out_rel" ],
            PHON.ONSET con ] ].

squeeze_v1 := v_np_trans_le &
 [ STEM < "squeeze" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_squeeze_v_1_rel",
            PHON.ONSET con ] ].

squint_n1 := n_intr_le &
 [ STEM < "squint" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_squint_n_1_rel",
            PHON.ONSET con ] ].

squint_v1 := v_empty_prep_intrans_le &
 [ STEM < "squint" >,
   SYNSEM [ LKEYS [ --COMPKEY _at_p_sel_rel,
                    KEYREL.PRED "_squint_v_at_rel" ],
            PHON.ONSET con ] ].

squint_v2 := v_unerg_le &
 [ STEM < "squint" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_squint_v_1_rel",
            PHON.ONSET con ] ].

squirrel_away_v1 := v_particle_np_le &
 [ STEM < "squirrel" >,
   SYNSEM [ LKEYS [ --COMPKEY _away_p_sel_rel,
                    KEYREL.PRED "_squirrel_v_away_rel" ],
            PHON.ONSET con ] ].

squirrel_n1 := n_intr_le &
 [ STEM < "squirrel" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_squirrel_n_1_rel",
            PHON.ONSET con ] ].

squish_v1 := v_np_trans_le &
 [ STEM < "squish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_squish_v_1_rel",
            PHON.ONSET con ] ].

sri_lanka_n1 := n_proper_le &
 [ STEM < "sri", "lanka" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sri_lanka",
            PHON.ONSET con ] ].

sri_n1 := n_proper_le &
 [ STEM < "sri" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sri",
            PHON.ONSET voc ] ].

sri_n2 := n_proper_le &
 [ STEM < "s.r.i." >,
   SYNSEM [ LKEYS.KEYREL.CARG "sri",
            PHON.ONSET voc ] ].

ssn_n1 := n_intr_le &
 [ STEM < "ssn" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ssn_n_1_rel",
            PHON.ONSET con ] ].

st_abb_n1 := n_intr_le &
 [ STEM < "st" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_st_n_1_rel",
            PHON.ONSET con ] ].

st_abb_n2 := n_intr_le &
 [ STEM < "st." >,
   SYNSEM [ LKEYS.KEYREL.PRED "_st_n_1_rel",
            PHON.ONSET con ] ].

st_nicholas_day := n_holiday_le &
 [ STEM < "st", "nicholas", "day" >,
   SYNSEM [ LKEYS.KEYREL.CARG "st_nicholas_day",
            PHON.ONSET con ] ].

st_nicholas_day_2 := n_holiday_le &
 [ STEM < "st.", "nicholas", "day" >,
   SYNSEM [ LKEYS.KEYREL.CARG "st_nicholas_day",
            PHON.ONSET voc ] ].

st_title := n_title_unsp_le &
 [ STEM < "st" >,
   SYNSEM [ LKEYS.KEYREL.CARG "st",
            PHON.ONSET con ] ].

st_title_2 := n_title_unsp_le &
 [ STEM < "st." >,
   SYNSEM [ LKEYS.KEYREL.CARG "st",
            PHON.ONSET con ] ].

staatstheater_n1 := n_intr_named_le &
 [ STEM < "staatstheater" >,
   SYNSEM [ LKEYS.KEYREL.CARG "staatstheater",
            PHON.ONSET con ] ].

stab_n1 := n_intr_le &
 [ STEM < "stab" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stab_n_1_rel",
            PHON.ONSET con ] ].

stab_v1 := v_np*_trans_le &
 [ STEM < "stab" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stab_v_1_rel",
            PHON.ONSET con ] ].

stabben_n1 := n_proper_city_le &
 [ STEM < "stabben" >,
   SYNSEM [ LKEYS.KEYREL.CARG "stabben",
            PHON.ONSET con ] ].

stabilize_v1 := v_np_trans_noger_le &
 [ STEM < "stabilize" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stabilize_v_cause_rel",
            PHON.ONSET con ] ].

stabilize_v2 := v_unacc_le &
 [ STEM < "stabilize" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stabilize_v_1_rel",
            PHON.ONSET con ] ].

stable_a1 := adj_intrans_le &
 [ STEM < "stable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stable_a_1_rel",
            PHON.ONSET con ] ].

stable_n1 := n_intr_le &
 [ STEM < "stable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stable_n_1_rel",
            PHON.ONSET con ] ].

stable_v1 := v_np_trans_le &
 [ STEM < "stable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stable_v_1_rel",
            PHON.ONSET con ] ].

stack_n1 := n_intr_le &
 [ STEM < "stack" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stack_n_1_rel",
            PHON.ONSET con ] ].

stack_up_v1 := v_particle_np_le &
 [ STEM < "stack" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_stack_v_up_rel" ],
            PHON.ONSET con ] ].

stack_up_v2 := v_particle_le &
 [ STEM < "stack" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_stack_v_up_rel" ],
            PHON.ONSET con ] ].

stack_v1 := v_np*_trans_le &
 [ STEM < "stack" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stack_v_1_rel",
            PHON.ONSET con ] ].

stadium_post_ttl := n_post_title_le &
 [ STEM < "stadium" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stadium_n_1_rel",
            PHON.ONSET con ] ].

staff_n1 := n_intr_le &
 [ STEM < "staff" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_staff_n_of_rel",
            PHON.ONSET con ] ].

staff_n2 := n_plur_ppcomp_le &
 [ STEM < "staff" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_staff_n_of_rel" ],
            PHON.ONSET con ] ].

staff_v1 := v_np_trans_le &
 [ STEM < "staff" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_staff_v_1_rel",
            PHON.ONSET con ] ].

stag_n1 := n_intr_le &
 [ STEM < "stag" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stag_n_1_rel",
            PHON.ONSET con ] ].

stage_n1 := n_ppof_le &
 [ STEM < "stage" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stage_n_of_rel",
            PHON.ONSET con ] ].

stage_v1 := v_np_trans_le &
 [ STEM < "stage" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stage_v_1_rel",
            PHON.ONSET con ] ].

stagger_n1 := n_intr_le &
 [ STEM < "stagger" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stagger_n_1_rel",
            PHON.ONSET con ] ].

stagger_v1 := v_prep_dir_le &
 [ STEM < "stagger" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stagger_v_1_rel",
            PHON.ONSET con ] ].

stain_n1 := n_intr_le &
 [ STEM < "stain" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stain_n_1_rel",
            PHON.ONSET con ] ].

stain_v1 := v_np*_trans_le &
 [ STEM < "stain" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stain_v_1_rel",
            PHON.ONSET con ] ].

stair_n1 := n_intr_le &
 [ STEM < "stair" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stair_n_1_rel",
            PHON.ONSET con ] ].

staircase_n1 := n_intr_le &
 [ STEM < "staircase" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_staircase_n_1_rel",
            PHON.ONSET con ] ].

stairway-queen_n1 := n_proper_le &
 [ STEM < "stairway", "queen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "stairway-queen",
            PHON.ONSET con ] ].

stake_i_n1 := n_bare_nomod_le &
 [ STEM < "stake" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stake_n_1_rel",
            PHON.ONSET con ] ].

stake_n1 := n_intr_le &
 [ STEM < "stake" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stake_n_1_rel",
            PHON.ONSET con ] ].

stake_v1 := v_np_trans_le &
 [ STEM < "stake" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stake_v_1_rel",
            PHON.ONSET con ] ].

stalheim := n_proper_le &
 [ STEM < "stalheim" >,
   SYNSEM [ LKEYS.KEYREL.CARG "stalheim",
            PHON.ONSET con ] ].

stalheim_langhuso := n_proper_le &
 [ STEM < "stalheim-", "langhuso" >,
   SYNSEM [ LKEYS.KEYREL.CARG "stalheim_langhuso",
            PHON.ONSET con ] ].

stalwart_a1 := adj_intrans_le &
 [ STEM < "stalwart" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stalwart_a_1_rel",
            PHON.ONSET con ] ].

stamen_n1 := n_intr_le &
 [ STEM < "stamen" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stamen_n_1_rel",
            PHON.ONSET con ] ].

stamp_n1 := n_intr_le &
 [ STEM < "stamp" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stamp_n_1_rel",
            PHON.ONSET con ] ].

stamp_on_v1 := v_particle_np_le &
 [ STEM < "stamp" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_stamp_v_on_rel" ],
            PHON.ONSET con ] ].

stamp_out_v1 := v_particle_np_le &
 [ STEM < "stamp" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_stamp_v_out_rel" ],
            PHON.ONSET con ] ].

stamp_v1 := v_np_trans_le &
 [ STEM < "stamp" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stamp_v_1_rel",
            PHON.ONSET con ] ].

stand1 := v_unerg_le &
 [ STEM < "stand" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stand_v_1_rel",
            PHON.ONSET con ] ].

stand_for_v1 := v_empty_prep_intrans_le &
 [ STEM < "stand" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_stand_v_for_rel" ],
            PHON.ONSET con ] ].

stand_in_for_v1 := v_particle_pp_le &
 [ STEM < "stand" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    --OCOMPKEY _for_p_rel,
                    KEYREL.PRED "_stand_v_in-for_rel" ],
            PHON.ONSET con ] ].

stand_in_v3 := v_particle_le &
 [ STEM < "stand" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_stand_v_in_rel" ],
            PHON.ONSET con ] ].

stand_n1 := n_intr_le &
 [ STEM < "stand" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stand_n_1_rel",
            PHON.ONSET con ] ].

stand_out_v1 := v_particle_le &
 [ STEM < "stand" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_stand_v_out_rel" ],
            PHON.ONSET con ] ].

stand_up_for_v1 := v_particle_pp_le &
 [ STEM < "stand" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    --OCOMPKEY _for_p_rel,
                    KEYREL.PRED "_stand_v_up-for_rel" ],
            PHON.ONSET con ] ].

stand_up_v1 := v_particle_np_le &
 [ STEM < "stand" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_stand_v_up_rel" ],
            PHON.ONSET con ] ].

stand_up_v2 := v_particle_le &
 [ STEM < "stand" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_stand_v_up_rel" ],
            PHON.ONSET con ] ].

stand_v1_i := v_np_non_trans_idiom_le &
 [ STEM < "stand" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stand_v_i_rel",
            PHON.ONSET con ] ].

stand_v2 := v_subj_equi_prd_adj_le &
 [ STEM < "stand" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stand_v_1_rel",
            PHON.ONSET con ] ].

stand_v3 := v_loc_inv_mv_le &
 [ STEM < "stand" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stand_v_1_rel",
            PHON.ONSET con ] ].

standard_adj := adj_intrans_le &
 [ STEM < "standard" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_standard_a_1_rel",
            PHON.ONSET con ] ].

standard_n1 := n_intr_le &
 [ STEM < "standard" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_standard_n_1_rel",
            PHON.ONSET con ] ].

standardize_v1 := v_np*_trans_le &
 [ STEM < "standardize" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_standardize_v_1_rel",
            PHON.ONSET con ] ].

standby_adv1 := adv_int_vp_post_le &
 [ STEM < "standby" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_standby_a_1_rel",
            PHON.ONSET con ] ].

standby_adv2 := adv_int_vp_post_le &
 [ STEM < "stand-", "by" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_standby_a_1_rel",
            PHON.ONSET con ] ].

stange_n1 := n_proper_le &
 [ STEM < "stange" >,
   SYNSEM [ LKEYS.KEYREL.CARG "stange",
            PHON.ONSET con ] ].

stanza_n1 := n_intr_le &
 [ STEM < "stanza" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stanza_n_1_rel",
            PHON.ONSET con ] ].

star_in_v1 := v_prep*_intrans_le &
 [ STEM < "star" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_rel,
                    KEYREL.PRED "_star_v_1_rel" ],
            PHON.ONSET con ] ].

star_n1 := n_intr_le &
 [ STEM < "star" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_star_n_1_rel",
            PHON.ONSET con ] ].

star_trek_n1 := n_proper_le &
 [ STEM < "star", "trek" >,
   SYNSEM [ LKEYS.KEYREL.CARG "star_trek",
            PHON.ONSET con ] ].

star_v1 := v_np_trans_le &
 [ STEM < "star" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_star_v_1_rel",
            PHON.ONSET con ] ].

stardust_n1 := n_proper_le &
 [ STEM < "stardust" >,
   SYNSEM [ LKEYS.KEYREL.CARG "stardust",
            PHON.ONSET con ] ].

stare_at_v1 := v_empty_prep_intrans_le &
 [ STEM < "stare" >,
   SYNSEM [ LKEYS [ --COMPKEY _at_p_sel_rel,
                    KEYREL.PRED "_stare_v_at_rel" ],
            PHON.ONSET con ] ].

stare_n1 := n_intr_le &
 [ STEM < "stare" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stare_n_1_rel",
            PHON.ONSET con ] ].

stare_v1 := v_unerg_le &
 [ STEM < "stare" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stare_v_1_rel",
            PHON.ONSET con ] ].

stare_v2 := v_np_prep_trans_le &
 [ STEM < "stare" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _in_p_rel,
                    KEYREL.PRED "_stare_v_1_rel" ],
            PHON.ONSET con ] ].

stark_a1 := adj_intrans_le &
 [ STEM < "stark" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stark_a_1_rel",
            PHON.ONSET con ] ].

starkly := adv_int_vp_le &
 [ STEM < "starkly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stark_a_1_rel",
            PHON.ONSET con ] ].

starnberg_n1 := n_proper_city_le &
 [ STEM < "starnberg" >,
   SYNSEM [ LKEYS.KEYREL.CARG "starnberg",
            PHON.ONSET con ] ].

start_n1 := n_intr_le &
 [ STEM < "start" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_start_n_1_rel",
            PHON.ONSET con ] ].

start_off_v1 := v_particle_np_le &
 [ STEM < "start" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_start_v_off_rel" ],
            PHON.ONSET con ] ].

start_off_v2 := v_particle_le &
 [ STEM < "start" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_start_v_off_rel" ],
            PHON.ONSET con ] ].

start_out_v1 := v_particle_le &
 [ STEM < "start" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_start_v_out_rel" ],
            PHON.ONSET con ] ].

start_out_v2 := v_particle_np_le &
 [ STEM < "start" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_start_v_out_rel" ],
            PHON.ONSET con ] ].

start_over_v1 := v_particle_np_le &
 [ STEM < "start" >,
   SYNSEM [ LKEYS [ --COMPKEY _over_p_sel_rel,
                    KEYREL.PRED "_start_v_over_rel" ],
            PHON.ONSET con ] ].

start_over_v2 := v_particle_le &
 [ STEM < "start" >,
   SYNSEM [ LKEYS [ --COMPKEY _over_p_sel_rel,
                    KEYREL.PRED "_start_v_over_rel" ],
            PHON.ONSET con ] ].

start_v1 := v_np_trans_noger_le &
 [ STEM < "start" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_start_v_cause_rel",
            PHON.ONSET con ] ].

start_v2 := v_unacc_le &
 [ STEM < "start" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_start_v_1_rel",
            PHON.ONSET con ] ].

start_v3 := v_ssr_le &
 [ STEM < "start" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_start_v_1_rel",
            PHON.ONSET con ] ].

start_v4 := v_ssr_prp_le &
 [ STEM < "start" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_start_v_1_rel",
            PHON.ONSET con ] ].

start_with_v1 := v_prep_intrans_le &
 [ STEM < "start" >,
   SYNSEM [ LKEYS [ --COMPKEY _with_p_rel,
                    KEYREL.PRED "_start_v_1_rel" ],
            PHON.ONSET con ] ].

startac_n1 := n_intr_le &
 [ STEM < "startac" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_startac_n_1_rel",
            PHON.ONSET con ] ].

started_a1 := adj_attr_intrans_le &
 [ STEM < "started" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_started_a_1_rel",
            PHON.ONSET con ] ].

starter_n1 := n_ppof_le &
 [ STEM < "starter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_starter_n_of_rel",
            PHON.ONSET con ] ].

startle_v1 := v_np_trans_le &
 [ STEM < "startle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_startle_v_1_rel",
            PHON.ONSET con ] ].

starvation_n1 := n_mass_le &
 [ STEM < "starvation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_starvation_n_1_rel",
            PHON.ONSET con ] ].

starve_v1 := v_np*_trans_le &
 [ STEM < "starve" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_starve_v_1_rel",
            PHON.ONSET con ] ].

stash_away_v1 := v_particle_np_le &
 [ STEM < "stash" >,
   SYNSEM [ LKEYS [ --COMPKEY _away_p_sel_rel,
                    KEYREL.PRED "_stash_v_away_rel" ],
            PHON.ONSET con ] ].

stash_n1 := n_intr_le &
 [ STEM < "stash" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stash_n_1_rel",
            PHON.ONSET con ] ].

stash_v1 := v_np_prep_trans_dors_le &
 [ STEM < "stash" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stash_v_1_rel",
            PHON.ONSET con ] ].

stash_v2 := v_np_trans_le &
 [ STEM < "stash" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stash_v_1_rel",
            PHON.ONSET con ] ].

state_a1 := adj_intrans_le &
 [ STEM < "state" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_state_a_1_rel",
            PHON.ONSET con ] ].

state_n1 := n_ppof_le &
 [ STEM < "state" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_state_n_of_rel",
            PHON.ONSET con ] ].

state_post_ttl := n_post_title_le &
 [ STEM < "state" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_state_n_of_rel",
            PHON.ONSET con ] ].

state_v1 := v_np*_trans_le &
 [ STEM < "state" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_state_v_1_rel",
            PHON.ONSET con ] ].

state_v2 := v_cp_non_trans_le &
 [ STEM < "state" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_state_v_1_rel",
            PHON.ONSET con ] ].

statedly := adv_int_vp_le &
 [ STEM < "statedly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stated_a_1_rel",
            PHON.ONSET con ] ].

stately_a1 := adj_intrans_le &
 [ STEM < "stately" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stately_a_1_rel",
            PHON.ONSET con ] ].

statement_n1 := n_ppof_le &
 [ STEM < "statement" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_statement_n_of_rel",
            PHON.ONSET con ] ].

statesman_n1 := n_intr_le &
 [ STEM < "statesman" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_statesman_n_1_rel",
            PHON.ONSET con ] ].

static_a1 := adj_intrans_le &
 [ STEM < "static" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_static_a_1_rel",
            PHON.ONSET con ] ].

static_n1 := n_mass_le &
 [ STEM < "static" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_static_n_1_rel",
            PHON.ONSET con ] ].

station_n1 := n_intr_le &
 [ STEM < "station" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_station_n_1_rel",
            PHON.ONSET con ] ].

station_post_ttl := n_post_title_le &
 [ STEM < "station" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_station_n_1_rel",
            PHON.ONSET con ] ].

station_v1 := v_np_prep_trans_dors_le &
 [ STEM < "station" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_station_v_1_rel",
            PHON.ONSET con ] ].

stationary_a1 := adj_intrans_le &
 [ STEM < "stationary" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stationary_a_1_rel",
            PHON.ONSET con ] ].

statistical_a1 := adj_intrans_le &
 [ STEM < "statistical" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_statistical_a_1_rel",
            PHON.ONSET con ] ].

statuary_n1 := n_mass_le &
 [ STEM < "statuary" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_statuary_n_1_rel",
            PHON.ONSET con ] ].

status_n1 := n_mass_count_ppof_le &
 [ STEM < "status" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_status_n_of-as_rel",
            PHON.ONSET con ] ].

status_n2 := n_mass_ppcomp_nospr_le &
 [ STEM < "status" >,
   SYNSEM [ LKEYS [ --COMPKEY _as_p_nbar_rel,
                    KEYREL.PRED "_status_n_of-as_rel" ],
            PHON.ONSET con ] ].

status_n3 := n_mass_ppcomp_le &
 [ STEM < "status" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_nbar_rel,
                    KEYREL.PRED "_status_n_of-as_rel" ],
            PHON.ONSET con ] ].

statute_n1 := n_intr_le &
 [ STEM < "statute" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_statute_n_1_rel",
            PHON.ONSET con ] ].

stavanger := n_proper_le &
 [ STEM < "stavanger" >,
   SYNSEM [ LKEYS.KEYREL.CARG "stavanger",
            PHON.ONSET con ] ].

stave_n1 := n_intr_le &
 [ STEM < "stave" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stave_n_1_rel",
            PHON.ONSET con ] ].

stave_off_v1 := v_particle_np_le &
 [ STEM < "stave" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_stave_v_off_rel" ],
            PHON.ONSET con ] ].

stavechurch_n1 := n_intr_le &
 [ STEM < "stavechurch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stavechurch_n_1_rel",
            PHON.ONSET con ] ].

stavechurch_n2 := n_intr_le &
 [ STEM < "stave", "church" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stavechurch_n_1_rel",
            PHON.ONSET con ] ].

stay_n1 := n_intr_le &
 [ STEM < "stay" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stay_n_1_rel",
            PHON.ONSET con ] ].

stay_over_v2 := v_particle_le &
 [ STEM < "stay" >,
   SYNSEM [ LKEYS [ --COMPKEY _over_p_sel_rel,
                    KEYREL.PRED "_stay_v_over_rel" ],
            PHON.ONSET con ] ].

stay_prd_v1 := v_subj_equi_prd_le &
 [ STEM < "stay" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stay_v_prd_rel",
            PHON.ONSET con ] ].

stay_v2 := v_prep_dir_le &
 [ STEM < "stay" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stay_v_1_rel",
            PHON.ONSET con ] ].

stay_v3 := v_np_trans_le &
 [ STEM < "stay" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stay_v_1_rel",
            PHON.ONSET con ] ].

stead_n1 := n_mass_count_le &
 [ STEM < "stead" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stead_n_1_rel",
            PHON.ONSET con ] ].

steadily_adv := adv_int_vp_le &
 [ STEM < "steadily" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_steady_a_1_rel",
            PHON.ONSET con ] ].

steady_a1 := adj_intrans_le &
 [ STEM < "steady" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_steady_a_1_rel",
            PHON.ONSET con ] ].

steak_n1 := n_intr_le &
 [ STEM < "steak" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_steak_n_1_rel",
            PHON.ONSET con ] ].

steal_n1 := n_intr_le &
 [ STEM < "steal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_steal_n_1_rel",
            PHON.ONSET con ] ].

steal_v1 := v_np*_trans_le &
 [ STEM < "steal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_steal_v_1_rel",
            PHON.ONSET con ] ].

steal_v2 := v_np*_prep_trans_le &
 [ STEM < "steal" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _from_p_rel,
                    KEYREL.PRED "_steal_v_1_rel" ],
            PHON.ONSET con ] ].

steam_n1 := n_mass_count_le &
 [ STEM < "steam" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_steam_n_1_rel",
            PHON.ONSET con ] ].

steam_open_v1 := v_particle_np_le &
 [ STEM < "steam" >,
   SYNSEM [ LKEYS [ --COMPKEY _open_a_sel_rel,
                    KEYREL.PRED "_steam_v_open_rel" ],
            PHON.ONSET con ] ].

steam_v1 := v_prep_dir_le &
 [ STEM < "steam" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_steam_v_1_rel",
            PHON.ONSET con ] ].

steam_v2 := v_np_trans_noger_le &
 [ STEM < "steam" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_steam_v_1_rel",
            PHON.ONSET con ] ].

steamboat_n1 := n_intr_le &
 [ STEM < "steamboat" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_steamboat_n_1_rel",
            PHON.ONSET con ] ].

steamer_n1 := n_intr_le &
 [ STEM < "steamer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_steamer_n_1_rel",
            PHON.ONSET con ] ].

steamship_n1 := n_intr_le &
 [ STEM < "steamship" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_steamship_n_1_rel",
            PHON.ONSET con ] ].

steel_n1 := n_mass_le &
 [ STEM < "steel" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_steel_n_1_rel",
            PHON.ONSET con ] ].

steel_v1 := v_np_trans_le &
 [ STEM < "steel" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_steel_v_1_rel",
            PHON.ONSET voc ] ].

steep_a1 := adj_intrans_le &
 [ STEM < "steep" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_steep_a_1_rel",
            PHON.ONSET con ] ].

steepen_v1 := v_unerg_le &
 [ STEM < "steepen" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_steepen_v_1_rel",
            PHON.ONSET con ] ].

steeper := adj_comp_le &
 [ STEM < "steeper" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_steep_a_1_rel",
            PHON.ONSET con ] ].

steepest_a1 := adj_superl_le &
 [ STEM < "steepest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_steep_a_1_rel",
            PHON.ONSET con ] ].

steeply := adv_int_vp_le &
 [ STEM < "steeply" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_steep_a_1_rel",
            PHON.ONSET con ] ].

steeply_m_deg := adv_degree_spec_m_le &
 [ STEM < "steeply" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_steeply_x_m_rel",
            PHON.ONSET con ] ].

steepness_n1 := n_mass_le &
 [ STEM < "steepness" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_steepness_n_1_rel",
            PHON.ONSET con ] ].

steer_n1 := n_intr_le &
 [ STEM < "steer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_steer_n_1_rel",
            PHON.ONSET con ] ].

steer_v1 := v_np*_trans_le &
 [ STEM < "steer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_steer_v_1_rel",
            PHON.ONSET con ] ].

steinar_n1 := n_proper_le &
 [ STEM < "steinar" >,
   SYNSEM [ LKEYS.KEYREL.CARG "steinar",
            PHON.ONSET con ] ].

steinarstugu_n1 := n_proper_le &
 [ STEM < "steinarstugu" >,
   SYNSEM [ LKEYS.KEYREL.CARG "steinarstugu",
            PHON.ONSET con ] ].

steinbeck_n1 := n_proper_le &
 [ STEM < "steinbeck" >,
   SYNSEM [ LKEYS.KEYREL.CARG "steinbeck",
            PHON.ONSET con ] ].

steinbergdalhytta := n_proper_le &
 [ STEM < "steinbergdalhytta" >,
   SYNSEM [ LKEYS.KEYREL.CARG "steinbergdalhytta",
            PHON.ONSET con ] ].

steinbergdashytta := n_proper_le &
 [ STEM < "steinbergdashytta" >,
   SYNSEM [ LKEYS.KEYREL.CARG "steinbergdashytta",
            PHON.ONSET con ] ].

steinberghytta := n_proper_le &
 [ STEM < "steinberghytta" >,
   SYNSEM [ LKEYS.KEYREL.CARG "steinberghytta",
            PHON.ONSET con ] ].

steinbuelva_n1 := n_proper_le &
 [ STEM < "steinbuelva" >,
   SYNSEM [ LKEYS.KEYREL.CARG "steinbuelva",
            PHON.ONSET con ] ].

steinbusjÃ¸en_n1 := n_proper_le &
 [ STEM < "steinbusjÃ¸en" >,
   SYNSEM [ LKEYS.KEYREL.CARG "steinbusjÃ¸en",
            PHON.ONSET con ] ].

steinbuvatnet_n1 := n_proper_le &
 [ STEM < "steinbuvatnet" >,
   SYNSEM [ LKEYS.KEYREL.CARG "steinbuvatnet",
            PHON.ONSET con ] ].

steindalen := n_proper_le &
 [ STEM < "steindalen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "steindalen",
            PHON.ONSET con ] ].

steindalselva_n1 := n_proper_le &
 [ STEM < "steindalselva" >,
   SYNSEM [ LKEYS.KEYREL.CARG "steindalselva",
            PHON.ONSET con ] ].

steindÃ¸la_n1 := n_proper_le &
 [ STEM < "steindÃ¸la" >,
   SYNSEM [ LKEYS.KEYREL.CARG "steindÃ¸la",
            PHON.ONSET con ] ].

steinhuder-meer_n1 := n_proper_le &
 [ STEM < "steinhuder", "meer" >,
   SYNSEM [ LKEYS.KEYREL.CARG "steinhuder-meer",
            PHON.ONSET con ] ].

stellate_a1 := adj_intrans_le &
 [ STEM < "stellate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stellate_a_1_rel",
            PHON.ONSET con ] ].

stellate_n1 := n_intr_le &
 [ STEM < "stellate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stellate_n_1_rel",
            PHON.ONSET con ] ].

stellate_v1 := v_np_trans_le &
 [ STEM < "stellate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stellate_v_1_rel",
            PHON.ONSET con ] ].

stem_from_v1 := v_empty_prep_intrans_le &
 [ STEM < "stem" >,
   SYNSEM [ LKEYS [ --COMPKEY _from_p_sel_rel,
                    KEYREL.PRED "_stem_v_from_rel" ],
            PHON.ONSET con ] ].

stem_n1 := n_intr_le &
 [ STEM < "stem" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stem_n_1_rel",
            PHON.ONSET con ] ].

stem_v1 := v_np_trans_le &
 [ STEM < "stem" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stem_v_1_rel",
            PHON.ONSET con ] ].

stemmerdalen := n_proper_le &
 [ STEM < "stemmerdalen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "stemmerdalen",
            PHON.ONSET con ] ].

stemmerdalen-Ã¸sterbÃ¸ := n_proper_le &
 [ STEM < "stemmerdalen-", "ÃsterbÃ¸" >,
   SYNSEM [ LKEYS.KEYREL.CARG "stemmerdalen-ÃsterbÃ¸",
            PHON.ONSET con ] ].

stengt := n_proper_le &
 [ STEM < "stengt" >,
   SYNSEM [ LKEYS.KEYREL.CARG "stengt",
            PHON.ONSET con ] ].

step_n1 := n_ppof_le &
 [ STEM < "step" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_step_n_of_rel",
            PHON.ONSET con ] ].

step_on_v1 := v_empty_prep_intrans_le &
 [ STEM < "step" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_step_v_on_rel" ],
            PHON.ONSET con ] ].

step_out_v1 := v_particle_le &
 [ STEM < "step" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_step_v_out_rel" ],
            PHON.ONSET con ] ].

step_v1 := v_prep_dir_le &
 [ STEM < "step" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_step_v_1_rel",
            PHON.ONSET con ] ].

stereo_n1 := n_mass_count_le &
 [ STEM < "stereo" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stereo_n_1_rel",
            PHON.ONSET con ] ].

sterile_a1 := adj_intrans_le &
 [ STEM < "sterile" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sterile_a_1_rel",
            PHON.ONSET con ] ].

sterilize_v1 := v_np_trans_le &
 [ STEM < "sterilize" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sterilize_v_1_rel",
            PHON.ONSET con ] ].

sterling_money_n1 := n_plur_le &
 [ STEM < "sterling" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sterling_n_pound_rel",
            PHON.ONSET con ] ].

stern_a1 := adj_intrans_le &
 [ STEM < "stern" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stern_a_1_rel",
            PHON.ONSET con ] ].

stern_n1 := n_proper_le &
 [ STEM < "stern" >,
   SYNSEM [ LKEYS.KEYREL.CARG "stern",
            PHON.ONSET con ] ].

stetind_n1 := n_proper_le &
 [ STEM < "stetind" >,
   SYNSEM [ LKEYS.KEYREL.CARG "stetind",
            PHON.ONSET con ] ].

stewart_n1 := n_proper_le &
 [ STEM < "stewart" >,
   SYNSEM [ LKEYS.KEYREL.CARG "stewart",
            PHON.ONSET con ] ].

stf_n1 := n_intr_named_le &
 [ STEM < "stf" >,
   SYNSEM [ LKEYS.KEYREL.CARG "stf",
            PHON.ONSET con ] ].

stick_n1 := n_intr_le &
 [ STEM < "stick" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stick_n_1_rel",
            PHON.ONSET con ] ].

stick_v1 := v_empty_prep_intrans_le &
 [ STEM < "stick" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_stick_v_to_rel" ],
            PHON.ONSET con ] ].

stick_v2 := v_np_prep_trans_dors_le &
 [ STEM < "stick" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stick_v_1_rel",
            PHON.ONSET con ] ].

stick_with_v1 := v_empty_prep_intrans_le &
 [ STEM < "stick" >,
   SYNSEM [ LKEYS [ --COMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_stick_v_with_rel" ],
            PHON.ONSET con ] ].

sticker_n1 := n_intr_le &
 [ STEM < "sticker" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sticker_n_1_rel",
            PHON.ONSET con ] ].

stiff_a1 := adj_intrans_le &
 [ STEM < "stiff" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stiff_a_1_rel",
            PHON.ONSET con ] ].

stiff_n1 := n_intr_le &
 [ STEM < "stiff" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stiff_n_1_rel",
            PHON.ONSET con ] ].

stiffen_up_v1 := v_particle_np_le &
 [ STEM < "stiffen" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_stiffen_v_up_rel" ],
            PHON.ONSET con ] ].

stiffen_up_v2 := v_particle_le &
 [ STEM < "stiffen" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_stiffen_v_up_rel" ],
            PHON.ONSET con ] ].

stiffen_v1 := v_np_trans_noger_le &
 [ STEM < "stiffen" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stiffen_v_cause_rel",
            PHON.ONSET con ] ].

stiffen_v2 := v_unacc_le &
 [ STEM < "stiffen" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stiffen_v_1_rel",
            PHON.ONSET con ] ].

stifle_v1 := v_np_trans_le &
 [ STEM < "stifle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stifle_v_1_rel",
            PHON.ONSET con ] ].

stift_n1 := n_proper_le &
 [ STEM < "stift" >,
   SYNSEM [ LKEYS.KEYREL.CARG "stift",
            PHON.ONSET con ] ].

stigen_gÃ¥rd_n1 := n_proper_le &
 [ STEM < "stigen", "gÃ¥rd" >,
   SYNSEM [ LKEYS.KEYREL.CARG "stigen gÃ¥rd",
            PHON.ONSET con ] ].

stigen_n1 := n_proper_city_le &
 [ STEM < "stigen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "stigen",
            PHON.ONSET con ] ].

stigma_n1 := n_intr_le &
 [ STEM < "stigma" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stigma_n_1_rel",
            PHON.ONSET con ] ].

still_a1 := adj_intrans_le &
 [ STEM < "still" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_still_a_1_rel",
            PHON.ONSET con ] ].

still_adv1 := adv_int_vp_aux_le &
 [ STEM < "still" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_still_a_1_rel",
            PHON.ONSET con ] ].

still_adv2 := adv_int_vp_post_le &
 [ STEM < "still" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_still_a_1_rel",
            PHON.ONSET con ] ].

still_prtcl := adj_prtcl_le &
 [ STEM < "still" >,
   SYNSEM [ LKEYS.KEYREL.PRED _still_a_sel_rel,
            PHON.ONSET con ] ].

stillness_n1 := n_mass_le &
 [ STEM < "stillness" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stillness_n_1_rel",
            PHON.ONSET con ] ].

stimulate_v1 := v_np_trans_le &
 [ STEM < "stimulate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stimulate_v_1_rel",
            PHON.ONSET con ] ].

sting_n1 := n_intr_le &
 [ STEM < "sting" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sting_n_1_rel",
            PHON.ONSET con ] ].

sting_v1 := v_np*_trans_le &
 [ STEM < "sting" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sting_v_1_rel",
            PHON.ONSET con ] ].

stink_v1 := v_np_trans_le &
 [ STEM < "stink" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stink_v_1_rel",
            PHON.ONSET con ] ].

stipulate_v1 := v_np_trans_le &
 [ STEM < "stipulate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stipulate_v_1_rel",
            PHON.ONSET con ] ].

stipulate_v2 := v_cp_non_trans_le &
 [ STEM < "stipulate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stipulate_v_1_rel",
            PHON.ONSET con ] ].

stipulation_n1 := n_mass_count_le &
 [ STEM < "stipulation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stipulation_n_1_rel",
            PHON.ONSET con ] ].

stir_in_v1 := v_particle_np_le &
 [ STEM < "stir" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_stir_v_in_rel" ],
            PHON.ONSET con ] ].

stir_n1 := n_intr_le &
 [ STEM < "stir" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stir_n_1_rel",
            PHON.ONSET con ] ].

stir_up_v1 := v_particle_np_le &
 [ STEM < "stir" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_stir_v_up_rel" ],
            PHON.ONSET con ] ].

stir_v1 := v_np*_trans_le &
 [ STEM < "stir" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stir_v_1_rel",
            PHON.ONSET con ] ].

stoat_n1 := n_intr_le &
 [ STEM < "stoat" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stoat_n_1_rel",
            PHON.ONSET con ] ].

stock_n1 := n_mass_count_le &
 [ STEM < "stock" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stock_n_1_rel",
            PHON.ONSET con ] ].

stock_up_v1 := v_particle_pp_le &
 [ STEM < "stock" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    --OCOMPKEY _with_p_rel,
                    KEYREL.PRED "_stock_v_up_rel" ],
            PHON.ONSET con ] ].

stock_up_v2 := v_particle_pp_le &
 [ STEM < "stock" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    --OCOMPKEY _on_p_rel,
                    KEYREL.PRED "_stock_v_up_rel" ],
            PHON.ONSET con ] ].

stock_up_v3 := v_particle_le &
 [ STEM < "stock" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_stock_v_up_rel" ],
            PHON.ONSET con ] ].

stock_v1 := v_np_trans_le &
 [ STEM < "stock" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stock_v_1_rel",
            PHON.ONSET con ] ].

stockholder_n1 := n_intr_le &
 [ STEM < "stockholder" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stockholder_n_1_rel",
            PHON.ONSET con ] ].

stockholm_n1 := n_proper_city_le &
 [ STEM < "stockholm" >,
   SYNSEM [ LKEYS.KEYREL.CARG "stockholm",
            PHON.ONSET con ] ].

stocking_n1 := n_intr_le &
 [ STEM < "stocking" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stocking_n_1_rel",
            PHON.ONSET con ] ].

stocky_a1 := adj_intrans_le &
 [ STEM < "stocky" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stocky_a_1_rel",
            PHON.ONSET con ] ].

stolen_a1 := adj_intrans_le &
 [ STEM < "stolen" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stolen_a_1_rel",
            PHON.ONSET con ] ].

stomach_n := n_intr_le &
 [ STEM < "stomach" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stomach_n_1_rel",
            PHON.ONSET con ] ].

stomach_v1 := v_np_trans_le &
 [ STEM < "stomach" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stomach_v_1_rel",
            PHON.ONSET con ] ].

stondalen := n_proper_le &
 [ STEM < "stondalen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "stondalen",
            PHON.ONSET con ] ].

stone_n1 := n_proper_le &
 [ STEM < "stone" >,
   SYNSEM [ LKEYS.KEYREL.CARG "stone",
            PHON.ONSET con ] ].

stone_n2 := n_mass_count_le &
 [ STEM < "stone" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stone_n_1_rel",
            PHON.ONSET con ] ].

stone_v1 := v_np_trans_le &
 [ STEM < "stone" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stone_v_1_rel",
            PHON.ONSET con ] ].

stonepile_n1 := n_intr_le &
 [ STEM < "stonepile" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stonepile_n_1_rel",
            PHON.ONSET con ] ].

stony_a1 := adj_intrans_le &
 [ STEM < "stony" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stony_a_1_rel",
            PHON.ONSET con ] ].

stool_n1 := n_intr_le &
 [ STEM < "stool" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stool_n_1_rel",
            PHON.ONSET con ] ].

stoop_n1 := n_intr_le &
 [ STEM < "stoop" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stoop_n_1_rel",
            PHON.ONSET con ] ].

stoop_v1 := v_unerg_le &
 [ STEM < "stoop" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stoop_v_1_rel",
            PHON.ONSET con ] ].

stop-prd := v_ssr_prp_le &
 [ STEM < "stop" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stop_v_prd_rel",
            PHON.ONSET con ] ].

stop_by_v1 := v_particle_le &
 [ STEM < "stop" >,
   SYNSEM [ LKEYS [ --COMPKEY _by_p_sel_rel,
                    KEYREL.PRED "_stop_v_by_rel" ],
            PHON.ONSET con ] ].

stop_in_v1 := v_particle_le &
 [ STEM < "stop" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_stop_v_in_rel" ],
            PHON.ONSET con ] ].

stop_n1 := n_intr_le &
 [ STEM < "stop" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stop_n_1_rel",
            PHON.ONSET con ] ].

stop_off_v1 := v_particle_le &
 [ STEM < "stop" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_stop_v_off_rel" ],
            PHON.ONSET con ] ].

stop_over_v1 := v_particle_le &
 [ STEM < "stop" >,
   SYNSEM [ LKEYS [ --COMPKEY _over_p_sel_rel,
                    KEYREL.PRED "_stop_v_over_rel" ],
            PHON.ONSET con ] ].

stop_payment_n1 := n_mass_count_ppof_le &
 [ STEM < "stop", "payment" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stop+payment_n_of_rel",
            PHON.ONSET con ] ].

stop_payment_n2 := n_mass_count_ppof_le &
 [ STEM < "stop-", "payment" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stop+payment_n_of_rel",
            PHON.ONSET con ] ].

stop_v1 := v_np*_trans_le &
 [ STEM < "stop" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stop_v_1_rel",
            PHON.ONSET con ] ].

stop_v3 := v_obj_equi_from_le &
 [ STEM < "stop" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stop_v_from_rel",
            PHON.ONSET con ] ].

stopover_n1 := n_intr_le &
 [ STEM < "stopover" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stopover_n_1_rel",
            PHON.ONSET con ] ].

stor := n_proper_le &
 [ STEM < "stor" >,
   SYNSEM [ LKEYS.KEYREL.CARG "stor",
            PHON.ONSET con ] ].

storage_n1 := n_mass_ppcomp_le &
 [ STEM < "storage" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_storage_n_of_rel" ],
            PHON.ONSET con ] ].

store_n1 := n_intr_le &
 [ STEM < "store" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_store_n_1_rel",
            PHON.ONSET con ] ].

store_n2 := n_proper_le &
 [ STEM < "store" >,
   SYNSEM [ LKEYS.KEYREL.CARG "store",
            PHON.ONSET con ] ].

store_v1 := v_np_trans_noger_le &
 [ STEM < "store" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_store_v_cause_rel",
            PHON.ONSET con ] ].

store_v2 := v_np_prep_trans_dors_le &
 [ STEM < "store" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_store_v_cause_rel",
            PHON.ONSET con ] ].

store_v3 := v_unacc_le &
 [ STEM < "store" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_store_v_1_rel",
            PHON.ONSET con ] ].

storebjÃ¸rn_n1 := n_proper_le &
 [ STEM < "storebjÃ¸rn" >,
   SYNSEM [ LKEYS.KEYREL.CARG "storebjÃ¸rn",
            PHON.ONSET con ] ].

storebrua_n1 := n_proper_le &
 [ STEM < "storebrua" >,
   SYNSEM [ LKEYS.KEYREL.CARG "storebrua",
            PHON.ONSET con ] ].

storegot_n1 := n_proper_le &
 [ STEM < "storegot" >,
   SYNSEM [ LKEYS.KEYREL.CARG "storegot",
            PHON.ONSET con ] ].

storegut_n1 := n_proper_le &
 [ STEM < "storegut" >,
   SYNSEM [ LKEYS.KEYREL.CARG "storegut",
            PHON.ONSET con ] ].

storeskag_n1 := n_proper_le &
 [ STEM < "storeskag" >,
   SYNSEM [ LKEYS.KEYREL.CARG "storeskag",
            PHON.ONSET con ] ].

storevatn_n1 := n_proper_le &
 [ STEM < "storevatn" >,
   SYNSEM [ LKEYS.KEYREL.CARG "storevatn",
            PHON.ONSET con ] ].

storevatnet_n1 := n_proper_le &
 [ STEM < "storevatnet" >,
   SYNSEM [ LKEYS.KEYREL.CARG "storevatnet",
            PHON.ONSET con ] ].

storm_n1 := n_intr_le &
 [ STEM < "storm" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_storm_n_1_rel",
            PHON.ONSET con ] ].

storm_v1 := v_np_trans_le &
 [ STEM < "storm" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_storm_v_1_rel",
            PHON.ONSET con ] ].

stormy_a1 := adj_intrans_le &
 [ STEM < "stormy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stormy_a_1_rel",
            PHON.ONSET con ] ].

stornubben_n1 := n_proper_le &
 [ STEM < "stornubben" >,
   SYNSEM [ LKEYS.KEYREL.CARG "stornubben",
            PHON.ONSET con ] ].

storronden := n_proper_le &
 [ STEM < "storronden" >,
   SYNSEM [ LKEYS.KEYREL.CARG "storronden",
            PHON.ONSET con ] ].

storsmeden := n_proper_le &
 [ STEM < "storsmeden" >,
   SYNSEM [ LKEYS.KEYREL.CARG "storsmeden",
            PHON.ONSET con ] ].

storting_n1 := n_proper_le &
 [ STEM < "storting" >,
   SYNSEM [ LKEYS.KEYREL.CARG "storting",
            PHON.ONSET con ] ].

storura_n1 := n_proper_le &
 [ STEM < "storura" >,
   SYNSEM [ LKEYS.KEYREL.CARG "storura",
            PHON.ONSET con ] ].

storutla := n_proper_le &
 [ STEM < "storutla" >,
   SYNSEM [ LKEYS.KEYREL.CARG "storutla",
            PHON.ONSET con ] ].

storutladalen_n1 := n_proper_le &
 [ STEM < "storutladalen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "storutladalen",
            PHON.ONSET con ] ].

storvik_n1 := n_proper_le &
 [ STEM < "storvik" >,
   SYNSEM [ LKEYS.KEYREL.CARG "storvik",
            PHON.ONSET con ] ].

story_n1 := n_ppof_le &
 [ STEM < "story" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_story_n_of_rel",
            PHON.ONSET con ] ].

storÃ¥a_n1 := n_proper_le &
 [ STEM < "storÃ¥a" >,
   SYNSEM [ LKEYS.KEYREL.CARG "storÃ¥a",
            PHON.ONSET con ] ].

storÃ¥dalen := n_proper_le &
 [ STEM < "storÃ¥dalen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "storÃ¥dalen",
            PHON.ONSET con ] ].

stout_a1 := adj_intrans_le &
 [ STEM < "stout" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stout_a_1_rel",
            PHON.ONSET con ] ].

stout_n1 := n_mass_count_le &
 [ STEM < "stout" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stout_n_1_rel",
            PHON.ONSET con ] ].

stove_n1 := n_intr_le &
 [ STEM < "stove" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stove_n_1_rel",
            PHON.ONSET con ] ].

stow_v1 := v_np_prep_trans_dors_le &
 [ STEM < "stow" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stow_v_1_rel",
            PHON.ONSET con ] ].

stow_v2 := v_np_trans_le &
 [ STEM < "stow" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stow_v_1_rel",
            PHON.ONSET con ] ].

stradivarius_n1 := n_proper_le &
 [ STEM < "stradivarius" >,
   SYNSEM [ LKEYS.KEYREL.CARG "stradivarius",
            PHON.ONSET con ] ].

straight_a1 := adj_intrans_le &
 [ STEM < "straight" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_straight_a_1_rel",
            PHON.ONSET con ] ].

straight_adv := adv_int_vp_le &
 [ STEM < "straight" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_straight_a_1_rel",
            PHON.ONSET con ] ].

straight_deg := adv_degree_spec_jov_only_le &
 [ STEM < "straight" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_straight_x_deg_rel",
            PHON.ONSET con ] ].

straight_m_deg := adv_degree_spec_m_le &
 [ STEM < "straight" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_straight_x_mdeg_rel",
            PHON.ONSET con ] ].

straighten_out_v1 := v_particle_le &
 [ STEM < "straighten" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_straighten_v_out_rel" ],
            PHON.ONSET con ] ].

straighten_out_v2 := v_particle_np_le &
 [ STEM < "straighten" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_straighten_v_out_rel" ],
            PHON.ONSET con ] ].

straighten_up_v1 := v_particle_le &
 [ STEM < "straighten" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_straighten_v_up_rel" ],
            PHON.ONSET con ] ].

straighten_up_v2 := v_particle_np_le &
 [ STEM < "straighten" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_straighten_v_up_rel" ],
            PHON.ONSET con ] ].

straighten_v1 := v_np_trans_le &
 [ STEM < "straighten" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_straighten_v_1_rel",
            PHON.ONSET con ] ].

straightforward_a1 := adj_intrans_le &
 [ STEM < "straightforward" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_straightforward_a_1_rel",
            PHON.ONSET con ] ].

straightway := adv_int_vp_le &
 [ STEM < "straightway" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_straightway_a_1_rel",
            PHON.ONSET con ] ].

strain_n1 := n_intr_le &
 [ STEM < "strain" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_strain_n_1_rel",
            PHON.ONSET con ] ].

strain_v1 := v_np_trans_le &
 [ STEM < "strain" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_strain_v_1_rel",
            PHON.ONSET con ] ].

strained_a1 := adj_intrans_le &
 [ STEM < "strained" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_strained_a_1_rel",
            PHON.ONSET con ] ].

strait_n1 := n_intr_le &
 [ STEM < "strait" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_strait_n_1_rel",
            PHON.ONSET con ] ].

strake_n1 := n_intr_le &
 [ STEM < "strake" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_strake_n_1_rel",
            PHON.ONSET con ] ].

stralsund_n1 := n_proper_city_le &
 [ STEM < "stralsund" >,
   SYNSEM [ LKEYS.KEYREL.CARG "stralsund",
            PHON.ONSET con ] ].

strand_n1 := n_ppof_le &
 [ STEM < "strand" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_strand_n_of_rel",
            PHON.ONSET con ] ].

strand_v1 := v_np_trans_le &
 [ STEM < "strand" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_strand_v_1_rel",
            PHON.ONSET con ] ].

strand_v2 := v_np_prep_trans_dors_le &
 [ STEM < "strand" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_strand_v_1_rel",
            PHON.ONSET con ] ].

stranda_n1 := n_proper_city_le &
 [ STEM < "stranda" >,
   SYNSEM [ LKEYS.KEYREL.CARG "stranda",
            PHON.ONSET con ] ].

strange-looking_a1 := adj_intrans_le &
 [ STEM < "strange-", "looking" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_strange+looking_a_1_rel",
            PHON.ONSET con ] ].

strange-looking_a2 := adj_intrans_le &
 [ STEM < "strange", "looking" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_strange+looking_a_1_rel",
            PHON.ONSET con ] ].

strange_a1 := adj_intrans_le &
 [ STEM < "strange" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_strange_a_1_rel",
            PHON.ONSET con ] ].

strangely := adv_int_vp_le &
 [ STEM < "strangely" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_strange_a_1_rel",
            PHON.ONSET con ] ].

stranger := adj_comp_le &
 [ STEM < "stranger" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_strange_a_1_rel",
            PHON.ONSET con ] ].

stranger_n1 := n_intr_le &
 [ STEM < "stranger" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stranger_n_1_rel",
            PHON.ONSET con ] ].

strangest_a1 := adj_superl_le &
 [ STEM < "strangest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_strange_a_1_rel",
            PHON.ONSET con ] ].

strangle_v1 := v_np_trans_le &
 [ STEM < "strangle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_strangle_v_1_rel",
            PHON.ONSET con ] ].

strap_n1 := n_intr_le &
 [ STEM < "strap" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_strap_n_1_rel",
            PHON.ONSET con ] ].

strap_up_v1 := v_particle_np_le &
 [ STEM < "strap" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_strap_v_up_rel" ],
            PHON.ONSET con ] ].

strap_v1 := v_np_trans_le &
 [ STEM < "strap" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_strap_v_1_rel",
            PHON.ONSET con ] ].

strap_v2 := v_np_prep_trans_dors_le &
 [ STEM < "strap" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_strap_v_1_rel",
            PHON.ONSET con ] ].

strasbourg_n1 := n_proper_city_le &
 [ STEM < "strasbourg" >,
   SYNSEM [ LKEYS.KEYREL.CARG "strasbourg",
            PHON.ONSET con ] ].

strassburg_n1 := n_proper_city_le &
 [ STEM < "strassburg" >,
   SYNSEM [ LKEYS.KEYREL.CARG "strassburg",
            PHON.ONSET con ] ].

stratagem_n1 := n_intr_le &
 [ STEM < "stratagem" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stratagem_n_1_rel",
            PHON.ONSET con ] ].

strategy_n1 := n_ppof_le &
 [ STEM < "strategy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_strategy_n_of_rel",
            PHON.ONSET con ] ].

stratocaster_n1 := n_proper_le &
 [ STEM < "stratocaster" >,
   SYNSEM [ LKEYS.KEYREL.CARG "stratocaster",
            PHON.ONSET con ] ].

stratum_n1 := n_intr_le &
 [ STEM < "stratum" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stratum_n_1_rel",
            PHON.ONSET con ] ].

strawberry_a1 := adj_intrans_le &
 [ STEM < "strawberry" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_strawberry_a_1_rel",
            PHON.ONSET con ] ].

strawberry_n1 := n_mass_count_le &
 [ STEM < "strawberry" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_strawberry_n_1_rel",
            PHON.ONSET con ] ].

stray_isect := adj_intrans_le &
 [ STEM < "stray" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stray_a_1_rel",
            PHON.ONSET con ] ].

stray_v1 := v_prep_dir_le &
 [ STEM < "stray" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stray_v_1_rel",
            PHON.ONSET con ] ].

streak_n1 := n_ppof_le &
 [ STEM < "streak" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_streak_n_of_rel",
            PHON.ONSET con ] ].

streak_v1 := v_prep_dir_le &
 [ STEM < "streak" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_streak_v_1_rel",
            PHON.ONSET con ] ].

stream_n1 := n_ppof_le &
 [ STEM < "stream" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stream_n_of_rel",
            PHON.ONSET con ] ].

stream_v1 := v_prep_dir_le &
 [ STEM < "stream" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stream_v_1_rel",
            PHON.ONSET con ] ].

street_n1 := n_intr_le &
 [ STEM < "street" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_street_n_1_rel",
            PHON.ONSET con ] ].

street_post_ttl := n_post_title_le &
 [ STEM < "street" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_street_n_1_rel",
            PHON.ONSET con ] ].

strength_n1 := n_mass_count_le &
 [ STEM < "strength" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_strength_n_1_rel",
            PHON.ONSET con ] ].

strengthen_v1 := v_np_trans_le &
 [ STEM < "strengthen" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_strengthen_v_1_rel",
            PHON.ONSET con ] ].

strenuous_a1 := adj_intrans_le &
 [ STEM < "strenuous" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_strenuous_a_1_rel",
            PHON.ONSET con ] ].

strenuously := adv_int_vp_le &
 [ STEM < "strenuously" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_strenuous_a_1_rel",
            PHON.ONSET con ] ].

stress_n1 := n_mass_count_le &
 [ STEM < "stress" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stress_n_1_rel",
            PHON.ONSET con ] ].

stress_v1 := v_np_trans_le &
 [ STEM < "stress" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stress_v_1_rel",
            PHON.ONSET con ] ].

stress_v2 := v_cp_non_trans_le &
 [ STEM < "stress" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stress_v_1_rel",
            PHON.ONSET con ] ].

stressful_a1 := adj_intrans_le &
 [ STEM < "stressful" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stressful_a_1_rel",
            PHON.ONSET con ] ].

stressfully := adv_int_vp_le &
 [ STEM < "stressfully" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stressful_a_1_rel",
            PHON.ONSET con ] ].

stretch_n1 := n_ppof_le &
 [ STEM < "stretch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stretch_n_of_rel",
            PHON.ONSET con ] ].

stretch_out_v2 := v_particle_le &
 [ STEM < "stretch" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_stretch_v_out_rel" ],
            PHON.ONSET con ] ].

stretch_over_v2 := v_particle_le &
 [ STEM < "stretch" >,
   SYNSEM [ LKEYS [ --COMPKEY _over_p_sel_rel,
                    KEYREL.PRED "_stretch_v_over_rel" ],
            PHON.ONSET con ] ].

stretch_v1 := v_np*_trans_le &
 [ STEM < "stretch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stretch_v_1_rel",
            PHON.ONSET con ] ].

strew_v1 := v_np_prep_trans_dors_le &
 [ STEM < "strew" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_strew_v_1_rel",
            PHON.ONSET con ] ].

strew_with_v1 := v_empty_prep_trans_le &
 [ STEM < "strew" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_strew_v_with_rel" ],
            PHON.ONSET con ] ].

stricken_a1 := adj_trans_le &
 [ STEM < "stricken" >,
   SYNSEM [ LKEYS [ --COMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_stricken_a_with_rel" ],
            PHON.ONSET con ] ].

strict_a1 := adj_intrans_le &
 [ STEM < "strict" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_strict_a_1_rel",
            PHON.ONSET con ] ].

strictly_adv1 := adv_int_vp_le &
 [ STEM < "strictly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_strict_a_1_rel",
            PHON.ONSET con ] ].

strictly_speaking_adv1 := adv_int_vp_post_le &
 [ STEM < "strictly", "speaking" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_strictly+speaking_a_1_rel",
            PHON.ONSET con ] ].

stricture_n1 := n_mass_count_le &
 [ STEM < "stricture" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stricture_n_1_rel",
            PHON.ONSET con ] ].

stride_n1 := n_intr_le &
 [ STEM < "stride" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stride_n_1_rel",
            PHON.ONSET con ] ].

stride_v1 := v_prep_dir_oblig_le &
 [ STEM < "stride" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stride_v_1_rel",
            PHON.ONSET con ] ].

strike_n1 := n_intr_le &
 [ STEM < "strike" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_strike_n_1_rel",
            PHON.ONSET con ] ].

strike_off_v1 := v_particle_np_le &
 [ STEM < "strike" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_strike_v_off_rel" ],
            PHON.ONSET con ] ].

strike_off_v2 := v_particle_le &
 [ STEM < "strike" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_strike_v_off_rel" ],
            PHON.ONSET con ] ].

strike_out_v1 := v_particle_np_le &
 [ STEM < "strike" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_strike_v_out_rel" ],
            PHON.ONSET con ] ].

strike_out_v2 := v_particle_le &
 [ STEM < "strike" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_strike_v_out_rel" ],
            PHON.ONSET con ] ].

strike_v1 := v_np_obj_comp_le &
 [ STEM < "strike" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _as_p_sel_rel,
                    KEYREL.PRED "_strike_v_as_rel" ],
            PHON.ONSET con ] ].

strike_v2 := v_np_trans_noger_le &
 [ STEM < "strike" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_strike_v_1_rel",
            PHON.ONSET con ] ].

strike_v3 := v_prep_dir_le &
 [ STEM < "strike" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_strike_v_1_rel",
            PHON.ONSET con ] ].

strike_v4 := v_expl_it_subj_np_cp_le &
 [ STEM < "strike" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_strike_v_1_rel",
            PHON.ONSET con ] ].

strikingly_adv := adv_int_vp_le &
 [ STEM < "strikingly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_striking_a_1_rel",
            PHON.ONSET con ] ].

string_n1 := n_ppof_le &
 [ STEM < "string" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_string_n_of_rel",
            PHON.ONSET con ] ].

string_v1 := v_particle_np_le &
 [ STEM < "string" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_string_v_on_rel" ],
            PHON.ONSET con ] ].

string_v2 := v_particle_np_le &
 [ STEM < "string" >,
   SYNSEM [ LKEYS [ --COMPKEY _along_p_sel_rel,
                    KEYREL.PRED "_string_v_along_rel" ],
            PHON.ONSET con ] ].

string_v3 := v_particle_np_le &
 [ STEM < "string" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_string_v_along_rel" ],
            PHON.ONSET con ] ].

string_v4 := v_np_prep_trans_le &
 [ STEM < "string" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _with_p_rel,
                    KEYREL.PRED "_string_v_1_rel" ],
            PHON.ONSET con ] ].

strip_n1 := n_ppof_le &
 [ STEM < "strip" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_strip_n_of_rel",
            PHON.ONSET con ] ].

strip_of_v1 := v_empty_prep*_trans_le &
 [ STEM < "strip" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_strip_v_of_rel" ],
            PHON.ONSET con ] ].

strip_off_v1 := v_particle_np_le &
 [ STEM < "strip" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_strip_v_off_rel" ],
            PHON.ONSET con ] ].

strip_v1 := v_np*_trans_le &
 [ STEM < "strip" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_strip_v_1_rel",
            PHON.ONSET con ] ].

strip_v2 := v_empty_prep_trans_le &
 [ STEM < "strip" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_strip_v_of_rel" ],
            PHON.ONSET con ] ].

strive_v1 := v_empty_prep_intrans_le &
 [ STEM < "strive" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_strive_v_for_rel" ],
            PHON.ONSET con ] ].

strive_v2 := v_subj_equi_le &
 [ STEM < "strive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_strive_v_1_rel",
            PHON.ONSET con ] ].

strive_v3 := v_unerg_le &
 [ STEM < "strive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_strive_v_1_rel",
            PHON.ONSET con ] ].

stroke_n1 := n_intr_le &
 [ STEM < "stroke" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stroke_n_1_rel",
            PHON.ONSET con ] ].

stroke_v1 := v_np_trans_le &
 [ STEM < "stroke" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stroke_v_1_rel",
            PHON.ONSET con ] ].

stroll_along_v3 := v_particle_le &
 [ STEM < "stroll" >,
   SYNSEM [ LKEYS [ --COMPKEY _along_p_sel_rel,
                    KEYREL.PRED "_stroll_v_along_rel" ],
            PHON.ONSET con ] ].

stroll_n := n_intr_le &
 [ STEM < "stroll" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stroll_n_1_rel",
            PHON.ONSET con ] ].

stroll_v1 := v_prep_dir_le &
 [ STEM < "stroll" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stroll_v_1_rel",
            PHON.ONSET con ] ].

stroller_n1 := n_intr_le &
 [ STEM < "stroller" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stroller_n_1_rel",
            PHON.ONSET con ] ].

strom_n1 := n_proper_le &
 [ STEM < "strom" >,
   SYNSEM [ LKEYS.KEYREL.CARG "strom",
            PHON.ONSET con ] ].

stromberg_n1 := n_proper_le &
 [ STEM < "stromberg" >,
   SYNSEM [ LKEYS.KEYREL.CARG "stromberg",
            PHON.ONSET con ] ].

strong_a1 := adj_intrans_le &
 [ STEM < "strong" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_strong_a_1_rel",
            PHON.ONSET con ] ].

stronger_a1 := adj_comp_le &
 [ STEM < "stronger" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_strong_a_1_rel",
            PHON.ONSET con ] ].

strongest_a1 := adj_superl_le &
 [ STEM < "strongest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_strong_a_1_rel",
            PHON.ONSET con ] ].

stronghold_n1 := n_intr_le &
 [ STEM < "stronghold" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stronghold_n_1_rel",
            PHON.ONSET con ] ].

strongly_adv1 := adv_int_vp_le &
 [ STEM < "strongly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_strong_a_1_rel",
            PHON.ONSET con ] ].

structural_a1 := adj_intrans_le &
 [ STEM < "structural" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_structural_a_1_rel",
            PHON.ONSET con ] ].

structure_n1 := n_mass_count_le &
 [ STEM < "structure" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_structure_n_1_rel",
            PHON.ONSET con ] ].

structure_v1 := v_np_trans_le &
 [ STEM < "structure" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_structure_v_1_rel",
            PHON.ONSET con ] ].

structured_isect := adj_intrans_le &
 [ STEM < "structured" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_structured_a_1_rel",
            PHON.ONSET con ] ].

struggle_for_v1 := v_empty_prep_intrans_le &
 [ STEM < "struggle" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_struggle_v_for_rel" ],
            PHON.ONSET con ] ].

struggle_n1 := n_intr_le &
 [ STEM < "struggle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_struggle_n_1_rel",
            PHON.ONSET con ] ].

struggle_v1 := v_unerg_le &
 [ STEM < "struggle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_struggle_v_1_rel",
            PHON.ONSET con ] ].

struggle_v2 := v_subj_equi_le &
 [ STEM < "struggle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_struggle_v_1_rel",
            PHON.ONSET con ] ].

stryn := n_proper_le &
 [ STEM < "stryn" >,
   SYNSEM [ LKEYS.KEYREL.CARG "stryn",
            PHON.ONSET con ] ].

strÃ¸m_n1 := n_proper_le &
 [ STEM < "strÃ¸m" >,
   SYNSEM [ LKEYS.KEYREL.CARG "strÃ¸m",
            PHON.ONSET con ] ].

stubborn_a1 := adj_intrans_le &
 [ STEM < "stubborn" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stubborn_a_1_rel",
            PHON.ONSET con ] ].

stuck_a1 := adj_trans_le &
 [ STEM < "stuck" >,
   SYNSEM [ LKEYS [ --COMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_stuck_a_with_rel" ],
            PHON.ONSET con ] ].

stuck_out_a1 := adj_intrans_le &
 [ STEM < "stuck", "out" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stuck+out_a_1_rel",
            PHON.ONSET con ] ].

stuck_out_a2 := adj_intrans_le &
 [ STEM < "stuck-", "out" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stuck+out_a_1_rel",
            PHON.ONSET con ] ].

stud_n1 := n_intr_le &
 [ STEM < "stud" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stud_n_1_rel",
            PHON.ONSET con ] ].

stud_v1 := v_np_prep_trans_le &
 [ STEM < "stud" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _with_p_rel,
                    KEYREL.PRED "_stud_v_with_rel" ],
            PHON.ONSET con ] ].

student_n1 := n_ppof_le &
 [ STEM < "student" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_student_n_of_rel",
            PHON.ONSET con ] ].

studio_n1 := n_intr_le &
 [ STEM < "studio" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_studio_n_1_rel",
            PHON.ONSET con ] ].

study_n1 := n_mass_count_ppof_le &
 [ STEM < "study" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_study_n_of_rel",
            PHON.ONSET con ] ].

study_v1 := v_np*_trans_le &
 [ STEM < "study" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_study_v_1_rel",
            PHON.ONSET con ] ].

stuff_n1 := n_mass_le &
 [ STEM < "stuff" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stuff_n_1_rel",
            PHON.ONSET con ] ].

stuff_v1 := v_np_trans_le &
 [ STEM < "stuff" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stuff_v_1_rel",
            PHON.ONSET con ] ].

stuffy_a1 := adj_intrans_le &
 [ STEM < "stuffy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stuffy_a_1_rel",
            PHON.ONSET con ] ].

stumble_n1 := n_intr_le &
 [ STEM < "stumble" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stumble_n_1_rel",
            PHON.ONSET con ] ].

stumble_upon_v1 := v_empty_prep_intrans_le &
 [ STEM < "stumble" >,
   SYNSEM [ LKEYS [ --COMPKEY _upon_p_sel_rel,
                    KEYREL.PRED "_stumble_v_upon_rel" ],
            PHON.ONSET con ] ].

stumble_v1 := v_prep_dir_le &
 [ STEM < "stumble" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stumble_v_1_rel",
            PHON.ONSET con ] ].

stump_n1 := n_intr_le &
 [ STEM < "stump" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stump_n_1_rel",
            PHON.ONSET con ] ].

stump_v1 := v_unerg_le &
 [ STEM < "stump" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stump_v_1_rel",
            PHON.ONSET con ] ].

stun_v1 := v_np*_trans_le &
 [ STEM < "stun" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stun_v_1_rel",
            PHON.ONSET con ] ].

stupendous_a1 := adj_intrans_le &
 [ STEM < "stupendous" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stupendous_a_1_rel",
            PHON.ONSET con ] ].

stupendous_a2 := adj_reg_atrans_that_cp_le &
 [ STEM < "stupendous" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stupendous_a_1_rel",
            PHON.ONSET con ] ].

stupendously_pcisect := adv_int_vp_le &
 [ STEM < "stupendously" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stupendous_a_1_rel",
            PHON.ONSET con ] ].

stupid_a1 := adj_intrans_le &
 [ STEM < "stupid" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stupid_a_1_rel",
            PHON.ONSET con ] ].

stupidly := adv_int_vp_le &
 [ STEM < "stupidly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stupid_a_1_rel",
            PHON.ONSET con ] ].

sturdier := adj_comp_le &
 [ STEM < "sturdier" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sturdy_a_1_rel",
            PHON.ONSET con ] ].

sturdiest := adj_superl_le &
 [ STEM < "sturdiest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sturdy_a_1_rel",
            PHON.ONSET con ] ].

sturdy_a1 := adj_intrans_le &
 [ STEM < "sturdy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sturdy_a_1_rel",
            PHON.ONSET con ] ].

stuttgart_n1 := n_proper_city_le &
 [ STEM < "stuttgart" >,
   SYNSEM [ LKEYS.KEYREL.CARG "stuttgart",
            PHON.ONSET con ] ].

stuvasete := n_proper_le &
 [ STEM < "stuvasete" >,
   SYNSEM [ LKEYS.KEYREL.CARG "stuvasete",
            PHON.ONSET con ] ].

stygge_n1 := n_proper_le &
 [ STEM < "stygge" >,
   SYNSEM [ LKEYS.KEYREL.CARG "stygge",
            PHON.ONSET con ] ].

styggebreen_n1 := n_proper_le &
 [ STEM < "styggebreen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "styggebreen",
            PHON.ONSET con ] ].

styggedalstindane := n_proper_pl_le &
 [ STEM < "styggedalstindane" >,
   SYNSEM [ LKEYS.KEYREL.CARG "styggedalstindane",
            PHON.ONSET con ] ].

styggedalstinder_n1 := n_proper_pl_le &
 [ STEM < "styggedalstinder" >,
   SYNSEM [ LKEYS.KEYREL.CARG "styggedalstinder",
            PHON.ONSET con ] ].

styggehÃ¸_n1 := n_proper_le &
 [ STEM < "styggehÃ¸" >,
   SYNSEM [ LKEYS.KEYREL.CARG "styggehÃ¸",
            PHON.ONSET con ] ].

stygghoin := n_proper_le &
 [ STEM < "stygghoin" >,
   SYNSEM [ LKEYS.KEYREL.CARG "stygghoin",
            PHON.ONSET con ] ].

style_n1 := n_mass_count_le &
 [ STEM < "style" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_style_n_1_rel",
            PHON.ONSET con ] ].

style_v1 := v_np_trans_le &
 [ STEM < "style" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_style_v_1_rel",
            PHON.ONSET con ] ].

stylish_a1 := adj_intrans_le &
 [ STEM < "stylish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stylish_a_1_rel",
            PHON.ONSET con ] ].

styvi := n_proper_le &
 [ STEM < "styvi" >,
   SYNSEM [ LKEYS.KEYREL.CARG "styvi",
            PHON.ONSET con ] ].

stÃ¸l_n1 := n_intr_le &
 [ STEM < "stÃ¸l" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stÃ¸l_n_1_rel",
            PHON.ONSET con ] ].

stÃ¸lsdalen_n1 := n_proper_le &
 [ STEM < "stÃ¸lsdalen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "stÃ¸lsdalen",
            PHON.ONSET con ] ].

stÃ¸lsheimen_n1 := n_proper_city_le &
 [ STEM < "stÃ¸lsheimen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "stÃ¸lsheimen",
            PHON.ONSET con ] ].

stÃ¸lsmaradal_n1 := n_proper_le &
 [ STEM < "stÃ¸lsmaradal" >,
   SYNSEM [ LKEYS.KEYREL.CARG "stÃ¸lsmaradal",
            PHON.ONSET con ] ].

stÃ¸lsmaradalen_n1 := n_proper_le &
 [ STEM < "stÃ¸lsmaradalen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "stÃ¸lsmaradalen",
            PHON.ONSET con ] ].

stÃ¸lsmaradalsfossen_n1 := n_proper_le &
 [ STEM < "stÃ¸lsmaradalsfossen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "stÃ¸lsmaradalsfossen",
            PHON.ONSET con ] ].

stÃ¸lsnostind_n1 := n_proper_le &
 [ STEM < "stÃ¸lsnostind" >,
   SYNSEM [ LKEYS.KEYREL.CARG "stÃ¸lsnostind",
            PHON.ONSET con ] ].

stÃ¸lsnostindane_n1 := n_proper_pl_le &
 [ STEM < "stÃ¸lsnostindane" >,
   SYNSEM [ LKEYS.KEYREL.CARG "stÃ¸lsnostindane",
            PHON.ONSET con ] ].

stÃ¸lsvatnet := n_proper_le &
 [ STEM < "stÃ¸lsvatnet" >,
   SYNSEM [ LKEYS.KEYREL.CARG "stÃ¸lsvatnet",
            PHON.ONSET con ] ].

su := n_proper_le &
 [ STEM < "stanford", "university" >,
   SYNSEM [ LKEYS.KEYREL.CARG "stanford_univ",
            PHON.ONSET con ] ].

sub_notebook_n1 := n_intr_le &
 [ STEM < "subnotebook" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sub+notebook_n_1_rel",
            PHON.ONSET con ] ].

sub_notebook_n2 := n_intr_le &
 [ STEM < "sub", "notebook" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sub+notebook_n_1_rel",
            PHON.ONSET con ] ].

sub_notebook_n3 := n_intr_le &
 [ STEM < "sub-", "notebook" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sub+notebook_n_1_rel",
            PHON.ONSET con ] ].

subarea_n1 := n_ppof_le &
 [ STEM < "subarea" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_subarea_n_of_rel",
            PHON.ONSET con ] ].

subdivision_n1 := n_ppof_le &
 [ STEM < "subdivision" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_subdivision_n_of_rel",
            PHON.ONSET con ] ].

subdue_v1 := v_np_trans_le &
 [ STEM < "subdue" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_subdue_v_1_rel",
            PHON.ONSET con ] ].

subgenus_n1 := n_intr_le &
 [ STEM < "subgenus" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_subgenus_n_1_rel",
            PHON.ONSET con ] ].

subject_a1 := adj_trans_le &
 [ STEM < "subject" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_subject_a_to_rel" ],
            PHON.ONSET con ] ].

subject_n1 := n_ppof_le &
 [ STEM < "subject" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_subject_n_of_rel",
            PHON.ONSET con ] ].

subject_v1 := v_to_trans_le &
 [ STEM < "subject" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_subject_v_to_rel",
            PHON.ONSET con ] ].

subjection_n1 := n_mass_count_ppof_le &
 [ STEM < "subjection" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_subjection_n_of_rel",
            PHON.ONSET con ] ].

subjectively := adv_int_vp_le &
 [ STEM < "subjectively" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_subjective_a_1_rel",
            PHON.ONSET con ] ].

subjunctive_a1 := adj_intrans_le &
 [ STEM < "subjunctive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_subjunctive_a_1_rel",
            PHON.ONSET con ] ].

subjunctive_n1 := n_intr_le &
 [ STEM < "subjunctive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_subjunctive_n_1_rel",
            PHON.ONSET con ] ].

sublease_n1 := n_intr_le &
 [ STEM < "sublease" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sublease_n_1_rel",
            PHON.ONSET con ] ].

sublease_v1 := v_np_trans_le &
 [ STEM < "sublease" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sublease_v_1_rel",
            PHON.ONSET con ] ].

sublimation_n1 := n_mass_count_le &
 [ STEM < "sublimation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sublimation_n_1_rel",
            PHON.ONSET con ] ].

submarine_n1 := n_intr_le &
 [ STEM < "submarine" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_submarine_n_1_rel",
            PHON.ONSET con ] ].

submerge_v1 := v_np*_trans_le &
 [ STEM < "submerge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_submerge_v_1_rel",
            PHON.ONSET con ] ].

submission_n1 := n_intr_le &
 [ STEM < "submission" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_submission_n_1_rel",
            PHON.ONSET con ] ].

submissive_a1 := adj_intrans_le &
 [ STEM < "submissive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_submissive_a_1_rel",
            PHON.ONSET con ] ].

submit_to_v1 := v_empty_prep_intrans_le &
 [ STEM < "submit" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_submit_v_to_rel" ],
            PHON.ONSET con ] ].

submit_to_v2 := v_empty_prep_trans_le &
 [ STEM < "submit" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_submit_v_to_rel" ],
            PHON.ONSET con ] ].

submit_v1 := v_np_trans_le &
 [ STEM < "submit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_submit_v_1_rel",
            PHON.ONSET con ] ].

subordinate_a1 := adj_intrans_le &
 [ STEM < "subordinate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_subordinate_a_1_rel",
            PHON.ONSET con ] ].

subordinate_n1 := n_intr_le &
 [ STEM < "subordinate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_subordinate_n_1_rel",
            PHON.ONSET con ] ].

subordinate_v1 := v_np_trans_le &
 [ STEM < "subordinate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_subordinate_v_1_rel",
            PHON.ONSET con ] ].

subordination_n1 := n_mass_count_ppof_le &
 [ STEM < "subordination" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_subordination_n_of_rel",
            PHON.ONSET con ] ].

subpoena_n1 := n_intr_le &
 [ STEM < "subpoena" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_subpoena_n_1_rel",
            PHON.ONSET con ] ].

subpoena_v1 := v_np_trans_le &
 [ STEM < "subpoena" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_subpoena_v_1_rel",
            PHON.ONSET con ] ].

subscribe_to_v1 := v_empty_prep_intrans_le &
 [ STEM < "subscribe" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_subscribe_v_to_rel" ],
            PHON.ONSET con ] ].

subscribe_v1 := v_np*_trans_le &
 [ STEM < "subscribe" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_subscribe_v_1_rel",
            PHON.ONSET con ] ].

subscriber_n1 := n_ppcomp_le &
 [ STEM < "subscriber" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_subscriber_n_to_rel" ],
            PHON.ONSET con ] ].

subscription_n1 := n_ppcomp_le &
 [ STEM < "subscription" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_subscription_n_to_rel" ],
            PHON.ONSET con ] ].

subsequent_a1 := adj_intrans_le &
 [ STEM < "subsequent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_subsequent_a_1_rel",
            PHON.ONSET con ] ].

subsequently_adv1 := adv_int_vp_le &
 [ STEM < "subsequently" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_subsequent_a_1_rel",
            PHON.ONSET con ] ].

subserve_v1 := v_np_trans_le &
 [ STEM < "subserve" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_subserve_v_1_rel",
            PHON.ONSET con ] ].

subservient_a1 := adj_intrans_le &
 [ STEM < "subservient" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_subservient_a_1_rel",
            PHON.ONSET con ] ].

subside_v1 := v_unacc_dir_le &
 [ STEM < "subside" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_subside_v_1_rel",
            PHON.ONSET con ] ].

subsidiary_a1 := adj_intrans_le &
 [ STEM < "subsidiary" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_subsidiary_a_1_rel",
            PHON.ONSET con ] ].

subsidiary_n1 := n_no_cmpnd_le &
 [ STEM < "subsidiary" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_subsidiary_n_1_rel",
            PHON.ONSET con ] ].

subsist_v1 := v_empty_prep_intrans_le &
 [ STEM < "subsist" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_subsist_v_on_rel" ],
            PHON.ONSET con ] ].

subsist_v2 := v_unerg_le &
 [ STEM < "subsist" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_subsist_v_1_rel",
            PHON.ONSET con ] ].

subsistence_n1 := n_mass_le &
 [ STEM < "subsistence" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_subsistence_n_1_rel",
            PHON.ONSET con ] ].

substance_n1 := n_mass_count_le &
 [ STEM < "substance" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_substance_n_1_rel",
            PHON.ONSET con ] ].

substandard_a1 := adj_intrans_le &
 [ STEM < "substandard" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_substandard_a_1_rel",
            PHON.ONSET con ] ].

substantial_isect := adj_intrans_le &
 [ STEM < "substantial" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_substantial_a_1_rel",
            PHON.ONSET con ] ].

substantiality_n1 := n_mass_count_le &
 [ STEM < "substantiality" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_substantiality_n_1_rel",
            PHON.ONSET con ] ].

substantially := adv_int_vp_le &
 [ STEM < "substantially" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_substantial_a_1_rel",
            PHON.ONSET con ] ].

substantiate_v1 := v_np_trans_le &
 [ STEM < "substantiate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_substantiate_v_1_rel",
            PHON.ONSET con ] ].

substantive_a1 := adj_intrans_le &
 [ STEM < "substantive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_substantive_a_1_rel",
            PHON.ONSET con ] ].

substantive_n1 := n_intr_le &
 [ STEM < "substantive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_substantive_n_1_rel",
            PHON.ONSET con ] ].

substantively := adv_int_vp_le &
 [ STEM < "substantively" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_substantive_a_1_rel",
            PHON.ONSET con ] ].

substitute_for_v1 := v_empty_prep_intrans_le &
 [ STEM < "substitute" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_substitute_v_for_rel" ],
            PHON.ONSET con ] ].

substitute_for_v2 := v_empty_prep_trans_le &
 [ STEM < "substitute" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_substitute_v_for_rel" ],
            PHON.ONSET con ] ].

substitute_n1 := n_intr_le &
 [ STEM < "substitute" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_substitute_n_1_rel",
            PHON.ONSET con ] ].

substitute_v1 := v_np_trans_le &
 [ STEM < "substitute" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_substitute_v_1_rel",
            PHON.ONSET con ] ].

substitution_n := n_ppof_le &
 [ STEM < "substitution" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_substitution_n_of_rel",
            PHON.ONSET con ] ].

substratum_n1 := n_intr_le &
 [ STEM < "substratum" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_substratum_n_1_rel",
            PHON.ONSET con ] ].

subtend_v1 := v_np_trans_le &
 [ STEM < "subtend" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_subtend_v_1_rel",
            PHON.ONSET con ] ].

subtitle_n1 := n_intr_le &
 [ STEM < "subtitle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_subtitle_n_1_rel",
            PHON.ONSET con ] ].

subtitle_v1 := v_np_trans_le &
 [ STEM < "subtitle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_subtitle_v_1_rel",
            PHON.ONSET con ] ].

subtract_v1 := v_np_trans_le &
 [ STEM < "subtract" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_subtract_v_1_rel",
            PHON.ONSET con ] ].

suburb_n1 := n_intr_le &
 [ STEM < "suburb" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_suburb_n_1_rel",
            PHON.ONSET con ] ].

suburban_a1 := adj_intrans_le &
 [ STEM < "suburban" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_suburbian_a_1_rel",
            PHON.ONSET con ] ].

suburbian_a1 := adj_intrans_le &
 [ STEM < "suburbian" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_suburbian_a_1_rel",
            PHON.ONSET con ] ].

subway_n1 := n_proper_le &
 [ STEM < "subway" >,
   SYNSEM [ LKEYS.KEYREL.CARG "subway",
            PHON.ONSET con ] ].

subway_n2 := n_intr_le &
 [ STEM < "subway" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_subway_n_1_rel",
            PHON.ONSET con ] ].

succeed_v1 := v_np*_trans_le &
 [ STEM < "succeed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_succeed_v_1_rel",
            PHON.ONSET con ] ].

succeed_v2 := v_empty_prep_intrans_le &
 [ STEM < "succeed" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_succeed_v_in_rel" ],
            PHON.ONSET con ] ].

success_n1 := n_mass_count_le &
 [ STEM < "success" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_success_n_1_rel",
            PHON.ONSET con ] ].

successful_a1 := adj_intrans_le &
 [ STEM < "successful" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_successful_a_1_rel",
            PHON.ONSET con ] ].

successfully_isect := adv_int_vp_le &
 [ STEM < "successfully" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_successful_a_1_rel",
            PHON.ONSET con ] ].

succession_n1 := n_mass_count_ppof_le &
 [ STEM < "succession" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_succession_n_of_rel",
            PHON.ONSET con ] ].

successive_a1 := adj_intrans_le &
 [ STEM < "successive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_successive_a_1_rel",
            PHON.ONSET con ] ].

successively := adv_int_vp_le &
 [ STEM < "successively" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_successive_a_1_rel",
            PHON.ONSET con ] ].

succulence_n1 := n_mass_le &
 [ STEM < "succulence" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_succulence_n_1_rel",
            PHON.ONSET con ] ].

succulent_a1 := adj_intrans_le &
 [ STEM < "succulent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_succulent_a_1_rel",
            PHON.ONSET con ] ].

succulent_n1 := n_no_cmpnd_le &
 [ STEM < "succulent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_succulent_n_1_rel",
            PHON.ONSET con ] ].

succumb_v1 := v_empty_prep_intrans_le &
 [ STEM < "succumb" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_succumb_v_to_rel" ],
            PHON.ONSET con ] ].

succumb_v2 := v_unerg_le &
 [ STEM < "succumb" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_succumb_v_1_rel",
            PHON.ONSET con ] ].

such := det_part_pl_mass_unsp_le &
 [ STEM < "such" >,
   SYNSEM [ LKEYS.KEYREL.PRED _such_q_rel,
            PHON.ONSET con ] ].

such_a1 := adj_attr_nospec_le &
 [ STEM < "such" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_such_a_1_rel",
            PHON.ONSET con ] ].

such_a_det := det_sg_nomod_a_le &
 [ STEM < "such", "a" >,
   SYNSEM [ LKEYS.KEYREL.PRED _such+a_q_rel,
            PHON.ONSET con ] ].

such_an_det := det_sg_nomod_an_le &
 [ STEM < "such", "an" >,
   SYNSEM [ LKEYS.KEYREL.PRED _such+a_q_rel,
            PHON.ONSET con ] ].

such_as_p1 := p_subconj_le &
 [ STEM < "such", "as" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_such+as_x_h_rel",
            PHON.ONSET con ] ].

such_as_p2 := p_reg_le &
 [ STEM < "such", "as" >,
   SYNSEM [ LKEYS.KEYREL.PRED _such+as_p_rel,
            PHON.ONSET con ] ].

such_as_p3 := p_ppcomp_copred_le &
 [ STEM < "such", "as" >,
   SYNSEM [ LKEYS.KEYREL.PRED _such+as_p_rel,
            PHON.ONSET con ] ].

such_deg := adv_degree_spec_v_le &
 [ STEM < "such" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_such_x_deg_rel",
            PHON.ONSET con ] ].

such_that := p_subconj_le &
 [ STEM < "such", "that" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_such+that_x_rel",
            PHON.ONSET con ] ].

suck_in_v1 := v_particle_np_le &
 [ STEM < "suck" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_suck_v_in_rel" ],
            PHON.ONSET con ] ].

suck_out_v1 := v_particle_np_le &
 [ STEM < "suck" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_suck_v_out_rel" ],
            PHON.ONSET con ] ].

suck_up_to_v1 := v_particle_pp_le &
 [ STEM < "suck" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    --OCOMPKEY _to_p_rel,
                    KEYREL.PRED "_suck_v_up_rel" ],
            PHON.ONSET con ] ].

suck_up_v1 := v_particle_np_le &
 [ STEM < "suck" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_suck_v_up_rel" ],
            PHON.ONSET con ] ].

suck_v1 := v_unacc_le &
 [ STEM < "suck" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_suck_v_1_rel",
            PHON.ONSET con ] ].

suck_v2 := v_np_trans_le &
 [ STEM < "suck" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_suck_v_2_rel",
            PHON.ONSET con ] ].

sucker_n1 := n_ppcomp_le &
 [ STEM < "sucker" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_sucker_n_for_rel" ],
            PHON.ONSET con ] ].

sucky_isect := adj_intrans_le &
 [ STEM < "sucky" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sucky_a_1_rel",
            PHON.ONSET con ] ].

sudden_a1 := adj_intrans_le &
 [ STEM < "sudden" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sudden_a_1_rel",
            PHON.ONSET con ] ].

suddenly_adv1 := adv_int_vp_le &
 [ STEM < "suddenly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sudden_a_1_rel",
            PHON.ONSET con ] ].

sudniz_n1 := n_proper_le &
 [ STEM < "sudniz" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sudniz",
            PHON.ONSET con ] ].

sue_n1 := n_proper_le &
 [ STEM < "sue" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sue",
            PHON.ONSET con ] ].

sue_v1 := v_np*_trans_le &
 [ STEM < "sue" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sue_v_1_rel",
            PHON.ONSET con ] ].

suffer_from_v1 := v_empty_prep_intrans_le &
 [ STEM < "suffer" >,
   SYNSEM [ LKEYS [ --COMPKEY _from_p_sel_rel,
                    KEYREL.PRED "_suffer_v_from_rel" ],
            PHON.ONSET con ] ].

suffer_through_v1 := v_empty_prep_intrans_le &
 [ STEM < "suffer" >,
   SYNSEM [ LKEYS [ --COMPKEY _through_p_sel_rel,
                    KEYREL.PRED "_suffer_v_through_rel" ],
            PHON.ONSET con ] ].

suffer_v3 := v_np*_non_trans_le &
 [ STEM < "suffer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_suffer_v_1_rel",
            PHON.ONSET con ] ].

suffice_v1 := v_unerg_le &
 [ STEM < "suffice" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_suffice_v_1_rel",
            PHON.ONSET con ] ].

suffice_v2 := v_atrans_inf_le &
 [ STEM < "suffice" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_suffice_v_1_rel",
            PHON.ONSET con ] ].

sufficient_a1 := adj_trans_le &
 [ STEM < "sufficient" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_sufficient_a_for_rel" ],
            PHON.ONSET con ] ].

sufficiently := adv_int_vp_post_le &
 [ STEM < "sufficiently" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sufficient_a_for_rel",
            PHON.ONSET con ] ].

sufficiently_adv := adv_degree_spec_v_le &
 [ STEM < "sufficiently" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sufficiently_x_deg_rel",
            PHON.ONSET con ] ].

suffix_n1 := n_intr_le &
 [ STEM < "suffix" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_suffix_n_1_rel",
            PHON.ONSET con ] ].

suffrage_n1 := n_mass_le &
 [ STEM < "suffrage" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_suffrage_n_1_rel",
            PHON.ONSET con ] ].

sugar_n1 := n_proper_le &
 [ STEM < "sugar" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sugar",
            PHON.ONSET con ] ].

suggest_v1 := v_to*_trans_le &
 [ STEM < "suggest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_suggest_v_to_rel",
            PHON.ONSET con ] ].

suggest_v2 := v_prep_intrans_event_le &
 [ STEM < "suggest" >,
   SYNSEM [ LKEYS [ --COMPKEY loc_abstr_rel,
                    KEYREL.PRED "_suggest_v_1_rel" ],
            PHON.ONSET con ] ].

suggest_v3 := v_pp_cp_le &
 [ STEM < "suggest" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_suggest_v_to_rel" ],
            PHON.ONSET con ] ].

suggest_v4 := v_cp_subj_le &
 [ STEM < "suggest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_suggest_v_1_rel",
            PHON.ONSET con ] ].

suggestion_n1 := n_ppof_nosort_le &
 [ STEM < "suggestion" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_suggestion_n_of_rel",
            PHON.ONSET con ] ].

suicide_n1 := n_mass_count_le &
 [ STEM < "suicide" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_suicide_n_1_rel",
            PHON.ONSET con ] ].

suit_n1 := n_ppof_le &
 [ STEM < "suit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_suit_n_of_rel",
            PHON.ONSET con ] ].

suit_v1 := v_np_trans_le &
 [ STEM < "suit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_suit_v_1_rel",
            PHON.ONSET con ] ].

suitability_n1 := n_intr_le &
 [ STEM < "suitability" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_suitability_n_1_rel",
            PHON.ONSET con ] ].

suitable_a1 := adj_trans_le &
 [ STEM < "suitable" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_suitable_a_for-as_rel" ],
            PHON.ONSET con ] ].

suitable_as_a1 := adj_trans_oblig_le &
 [ STEM < "suitable" >,
   SYNSEM [ LKEYS [ --COMPKEY _as_p_sel_rel,
                    KEYREL.PRED "_suitable_a_for-as_rel" ],
            PHON.ONSET con ] ].

suitably := adv_int_vp_le &
 [ STEM < "suitably" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_suitable_a_for-as_rel",
            PHON.ONSET con ] ].

suitcase_n1 := n_ppof_le &
 [ STEM < "suitcase" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_suitcase_n_of_rel",
            PHON.ONSET con ] ].

suite_n1 := n_intr_le &
 [ STEM < "suite" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_suite_n_1_rel",
            PHON.ONSET con ] ].

suited_a1 := adj_intrans_le &
 [ STEM < "suited" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_suited_a_1_rel",
            PHON.ONSET con ] ].

suitor_n1 := n_intr_le &
 [ STEM < "suitor" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_suitor_n_1_rel",
            PHON.ONSET con ] ].

sulfate_n1 := n_mass_le &
 [ STEM < "sulfate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sulfate_n_1_rel",
            PHON.ONSET con ] ].

sulheim_n1 := n_proper_le &
 [ STEM < "sulheim" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sulheim",
            PHON.ONSET con ] ].

sullen_a1 := adj_intrans_le &
 [ STEM < "sullen" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sullen_a_1_rel",
            PHON.ONSET con ] ].

sullenly := adv_int_vp_le &
 [ STEM < "sullenly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sullen_a_1_rel",
            PHON.ONSET con ] ].

sullenness_n1 := n_mass_le &
 [ STEM < "sullenness" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sullenness_n_1_rel",
            PHON.ONSET con ] ].

sullivan_n1 := n_proper_le &
 [ STEM < "sullivan" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sullivan",
            PHON.ONSET con ] ].

sully_v1 := v_np_trans_le &
 [ STEM < "sully" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sully_v_1_rel",
            PHON.ONSET con ] ].

sulphate_n1 := n_mass_count_le &
 [ STEM < "sulphate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sulphate_n_1_rel",
            PHON.ONSET con ] ].

sulphur_n1 := n_mass_count_le &
 [ STEM < "sulphur" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sulphur_n_1_rel",
            PHON.ONSET con ] ].

sulphuric_a1 := adj_intrans_le &
 [ STEM < "sulphuric" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sulphuric_a_1_rel",
            PHON.ONSET con ] ].

sultan_n1 := n_intr_le &
 [ STEM < "sultan" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sultan_n_1_rel",
            PHON.ONSET con ] ].

sum_n1 := n_ppof_le &
 [ STEM < "sum" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sum_n_of_rel",
            PHON.ONSET con ] ].

sum_up_v1 := v_particle_np_le &
 [ STEM < "sum" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_sum_v_up_rel" ],
            PHON.ONSET con ] ].

sum_up_v2 := v_particle_le &
 [ STEM < "sum" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_sum_v_up_rel" ],
            PHON.ONSET con ] ].

summarize_v1 := v_np*_trans_le &
 [ STEM < "summarize" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_summarize_v_1_rel",
            PHON.ONSET con ] ].

summary_n1 := n_ppof_le &
 [ STEM < "summary" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_summary_n_of_rel",
            PHON.ONSET con ] ].

summer_n1 := n_season_div_le &
 [ STEM < "summer" >,
   SYNSEM [ LKEYS.KEYREL.CARG "summer",
            PHON.ONSET con ] ].

summer_n2 := n_season_wspec_le &
 [ STEM < "summer" >,
   SYNSEM [ LKEYS.KEYREL.CARG "summer",
            PHON.ONSET con ] ].

summer_n3 := n_season_np_le &
 [ STEM < "summer" >,
   SYNSEM [ LKEYS.KEYREL.CARG "summer",
            PHON.ONSET con ] ].

summer_v1 := v_unerg_le &
 [ STEM < "summer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_summer_v_1_rel",
            PHON.ONSET con ] ].

summers_n1 := n_proper_le &
 [ STEM < "summers" >,
   SYNSEM [ LKEYS.KEYREL.CARG "summers",
            PHON.ONSET con ] ].

summertime_adv := adv_int_vp_le &
 [ STEM < "summertime" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_summertime_a_1_rel",
            PHON.ONSET con ] ].

summertime_n1 := n_season_div_le &
 [ STEM < "summertime" >,
   SYNSEM [ LKEYS.KEYREL.CARG "summertime",
            PHON.ONSET con ] ].

summertime_n2 := n_season_wspec_le &
 [ STEM < "summertime" >,
   SYNSEM [ LKEYS.KEYREL.CARG "summertime",
            PHON.ONSET con ] ].

summertime_n3 := n_season_np_le &
 [ STEM < "summertime" >,
   SYNSEM [ LKEYS.KEYREL.CARG "summertime",
            PHON.ONSET con ] ].

summit_n1 := n_intr_le &
 [ STEM < "summit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_summit_n_1_rel",
            PHON.ONSET con ] ].

summit_post_ttl := n_post_title_le &
 [ STEM < "summit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_summit_n_1_rel",
            PHON.ONSET con ] ].

summon_up_v1 := v_particle_np_le &
 [ STEM < "summon" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_summon_v_up_rel" ],
            PHON.ONSET con ] ].

summon_v1 := v_to*_trans_le &
 [ STEM < "summon" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_summon_v_to_rel",
            PHON.ONSET con ] ].

summons_n1 := n_intr_le &
 [ STEM < "summons" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_summons_n_1_rel",
            PHON.ONSET con ] ].

sun_baked_a1 := adj_intrans_le &
 [ STEM < "sun", "baked" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sun+baked_a_1_rel",
            PHON.ONSET con ] ].

sun_baked_a2 := adj_intrans_le &
 [ STEM < "sun-", "baked" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sun+baked_a_1_rel",
            PHON.ONSET con ] ].

sun_n1 := n_intr_le &
 [ STEM < "sun" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sun_n_1_rel",
            PHON.ONSET con ] ].

sun_yatsen_n1 := n_proper_le &
 [ STEM < "sun", "yatsen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sun_yatsen",
            PHON.ONSET con ] ].

sunbathe_v1 := v_unerg_le &
 [ STEM < "sunbathe" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sunbathe_v_1_rel",
            PHON.ONSET con ] ].

sunbeam_n1 := n_intr_le &
 [ STEM < "sunbeam" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sunbeam_n_1_rel",
            PHON.ONSET con ] ].

sunblock_n1 := n_mass_le &
 [ STEM < "sunblock" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sunblock_n_1_rel",
            PHON.ONSET con ] ].

sunday_before_advent_hd := n_holiday_le &
 [ STEM < "sunday", "before", "advent" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sunday_before_advent",
            PHON.ONSET con ] ].

sunday_n1 := n_day_of_week_le &
 [ STEM < "sunday" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sun",
            PHON.ONSET con ] ].

sunday_n2 := n_day_of_week_le &
 [ STEM < "sun" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sun",
            PHON.ONSET con ] ].

sunday_n3 := n_day_of_week_le &
 [ STEM < "sun." >,
   SYNSEM [ LKEYS.KEYREL.CARG "sun",
            PHON.ONSET con ] ].

sunday_river_n1 := n_proper_le &
 [ STEM < "sunday", "river" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sunday_river",
            PHON.ONSET con ] ].

sundellerskarvet := n_proper_le &
 [ STEM < "sundellerskarvet" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sundellerskarvet",
            PHON.ONSET con ] ].

sunder_v1 := v_np_trans_le &
 [ STEM < "sunder" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sunder_v_1_rel",
            PHON.ONSET con ] ].

sundew_n1 := n_mass_count_le &
 [ STEM < "sundew" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sundew_n_1_rel",
            PHON.ONSET con ] ].

sundhellerskarvet := n_proper_le &
 [ STEM < "sundhellerskarvet" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sundhellerskarvet",
            PHON.ONSET con ] ].

sundry_a1 := adj_intrans_le &
 [ STEM < "sundry" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sundry_a_1_rel",
            PHON.ONSET con ] ].

sunglasses_n1 := n_plur_le &
 [ STEM < "sunglass" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sunglasses_n_1_rel",
            PHON.ONSET con ] ].

sunken_a1 := adj_intrans_le &
 [ STEM < "sunken" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sunken_a_1_rel",
            PHON.ONSET con ] ].

sunlight_n1 := n_mass_le &
 [ STEM < "sunlight" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sunlight_n_1_rel",
            PHON.ONSET con ] ].

sunndal_n1 := n_proper_le &
 [ STEM < "sunndal" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sunndal",
            PHON.ONSET con ] ].

sunnier_a1 := adj_comp_le &
 [ STEM < "sunnier" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sunny_a_1_rel",
            PHON.ONSET con ] ].

sunnier_a2 := adj_atrans_comp_le &
 [ STEM < "sunnier" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sunny_a_1_rel",
            PHON.ONSET con ] ].

sunniest_a1 := adj_superl_le &
 [ STEM < "sunniest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sunny_a_1_rel",
            PHON.ONSET con ] ].

sunniest_a2 := adj_atrans_superl_le &
 [ STEM < "sunniest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sunny_a_1_rel",
            PHON.ONSET con ] ].

sunnily := adv_int_vp_le &
 [ STEM < "sunnily" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sunny_a_1_rel",
            PHON.ONSET con ] ].

sunnmÃ¸re_n1 := n_proper_le &
 [ STEM < "sunnmÃ¸re" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sunnmÃ¸re",
            PHON.ONSET con ] ].

sunnmÃ¸rsalpene_n1 := n_proper_le &
 [ STEM < "sunnmÃ¸rsalpene" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sunnmÃ¸rsalpene",
            PHON.ONSET con ] ].

sunny_a1 := adj_intrans_le &
 [ STEM < "sunny" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sunny_a_1_rel",
            PHON.ONSET con ] ].

sunny_a2 := adj_atrans_le &
 [ STEM < "sunny" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sunny_a_1_rel",
            PHON.ONSET con ] ].

sunnyvale_n1 := n_proper_city_le &
 [ STEM < "sunnyvale" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sunnyvale",
            PHON.ONSET con ] ].

sunrise_n1 := n_hour_le &
 [ STEM < "sunrise" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sunrise",
            PHON.ONSET con ] ].

sunrise_n2 := n_intr_le &
 [ STEM < "sunrise" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sunrise_n_1_rel",
            PHON.ONSET con ] ].

sunscreen_n1 := n_mass_count_le &
 [ STEM < "sunscreen" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sunscreen_n_1_rel",
            PHON.ONSET con ] ].

sunscreen_n2 := n_mass_count_le &
 [ STEM < "sun", "screen" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sunscreen_n_1_rel",
            PHON.ONSET con ] ].

sunset_n1 := n_hour_le &
 [ STEM < "sunset" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sunset",
            PHON.ONSET con ] ].

sunset_n2 := n_intr_le &
 [ STEM < "sunset" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sunset_n_1_rel",
            PHON.ONSET con ] ].

sunshine_n1 := n_mass_le &
 [ STEM < "sunshine" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sunshine_n_1_rel",
            PHON.ONSET con ] ].

suntan_n1 := n_intr_le &
 [ STEM < "suntan" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_suntan_n_1_rel",
            PHON.ONSET con ] ].

super_a1 := adj_intrans_le &
 [ STEM < "super" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_super_a_1_rel",
            PHON.ONSET con ] ].

super_bowl_n1 := n_intr_le &
 [ STEM < "super", "bowl" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_super+bowl_n_1_rel",
            PHON.ONSET con ] ].

super_bowl_n2 := n_intr_le &
 [ STEM < "superbowl" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_super+bowl_n_1_rel",
            PHON.ONSET con ] ].

super_bowl_n3 := n_proper_le &
 [ STEM < "super", "bowl" >,
   SYNSEM [ LKEYS.KEYREL.CARG "super_bowl",
            PHON.ONSET con ] ].

super_bowl_n4 := n_proper_le &
 [ STEM < "superbowl" >,
   SYNSEM [ LKEYS.KEYREL.CARG "super_bowl",
            PHON.ONSET con ] ].

super_deg1 := adv_degree_spec_v_le &
 [ STEM < "super" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_super_x_deg_rel",
            PHON.ONSET con ] ].

super_deg2 := adv_degree_spec_v_le &
 [ STEM < "super-" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_super_x_deg_rel",
            PHON.ONSET con ] ].

superb_a1 := adj_intrans_le &
 [ STEM < "superb" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_superb_a_1_rel",
            PHON.ONSET con ] ].

superbly_adv1 := adv_int_vp_post_le &
 [ STEM < "superbly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_superb_a_1_rel",
            PHON.ONSET con ] ].

superficial_a1 := adj_intrans_le &
 [ STEM < "superficial" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_superficial_a_1_rel",
            PHON.ONSET con ] ].

superficially_adv1 := adv_int_vp_post_le &
 [ STEM < "superficially" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_superficial_a_1_rel",
            PHON.ONSET con ] ].

superficies_n1 := n_intr_le &
 [ STEM < "superficies" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_superficies_n_1_rel",
            PHON.ONSET con ] ].

superfluous_a1 := adj_intrans_le &
 [ STEM < "superfluous" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_superfluous_a_1_rel",
            PHON.ONSET con ] ].

superfluously_adv1 := adv_int_vp_le &
 [ STEM < "superfluously" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_superfluous_a_1_rel",
            PHON.ONSET con ] ].

superhuman_a1 := adj_intrans_le &
 [ STEM < "superhuman" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_superhuman_a_1_rel",
            PHON.ONSET con ] ].

superhuman_n1 := n_intr_le &
 [ STEM < "superhuman" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_superhuman_n_1_rel",
            PHON.ONSET con ] ].

superimpose_v1 := v_np_trans_le &
 [ STEM < "superimpose" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_superimpose_v_1_rel",
            PHON.ONSET con ] ].

superimpose_v2 := v_np_prep_trans_dors_le &
 [ STEM < "superimpose" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_superimpose_v_1_rel",
            PHON.ONSET con ] ].

superior_a1 := adj_intrans_le &
 [ STEM < "superior" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_superior_a_1_rel",
            PHON.ONSET con ] ].

superior_n1 := n_intr_le &
 [ STEM < "superior" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_superior_n_1_rel",
            PHON.ONSET con ] ].

superiority_n1 := n_mass_le &
 [ STEM < "superiority" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_superiority_n_1_rel",
            PHON.ONSET con ] ].

supermarket_n1 := n_intr_le &
 [ STEM < "supermarket" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_supermarket_n_1_rel",
            PHON.ONSET con ] ].

supernatural_a1 := adj_intrans_le &
 [ STEM < "supernatural" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_supernatural_a_1_rel",
            PHON.ONSET con ] ].

superposed_a1 := adj_intrans_le &
 [ STEM < "superposed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_superposed_a_1_rel",
            PHON.ONSET con ] ].

supersede_v1 := v_np_trans_le &
 [ STEM < "supersede" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_supersede_v_1_rel",
            PHON.ONSET con ] ].

superstition_n1 := n_intr_le &
 [ STEM < "superstition" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_superstition_n_1_rel",
            PHON.ONSET con ] ].

superstitious_a1 := adj_intrans_le &
 [ STEM < "superstitious" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_superstitious_a_1_rel",
            PHON.ONSET con ] ].

superstitiously := adv_int_vp_le &
 [ STEM < "superstitiously" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_superstitious_a_1_rel",
            PHON.ONSET con ] ].

supervise_v1 := v_np*_trans_le &
 [ STEM < "supervise" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_supervise_v_1_rel",
            PHON.ONSET con ] ].

supervisor_n1 := n_ppof_le &
 [ STEM < "supervisor" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_supervisor_n_of_rel",
            PHON.ONSET con ] ].

supper_n1 := n_intr_le &
 [ STEM < "supper" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_supper_n_1_rel",
            PHON.ONSET con ] ].

supper_time_n1 := n_mealtime_le &
 [ STEM < "supper" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_supper_n_1_rel",
            PHON.ONSET con ] ].

supphellebre := n_proper_le &
 [ STEM < "supphellebre" >,
   SYNSEM [ LKEYS.KEYREL.CARG "supphellebre",
            PHON.ONSET con ] ].

supplement_n := n_ppof_le &
 [ STEM < "supplement" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_supplement_n_of_rel",
            PHON.ONSET con ] ].

supplement_v1 := v_np_trans_le &
 [ STEM < "supplement" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_supplement_v_1_rel",
            PHON.ONSET con ] ].

supplement_with_v1 := v_np_prep_trans_le &
 [ STEM < "supplement" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _with_p_rel,
                    KEYREL.PRED "_supplement_v_1_rel" ],
            PHON.ONSET con ] ].

supplementary_a1 := adj_intrans_le &
 [ STEM < "supplementary" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_supplementary_a_1_rel",
            PHON.ONSET con ] ].

supplier_n1 := n_ppof_le &
 [ STEM < "supplier" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_supplier_n_of_rel",
            PHON.ONSET con ] ].

supply_n1 := n_mass_count_le &
 [ STEM < "supply" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_supply_n_1_rel",
            PHON.ONSET con ] ].

supply_v1 := v_np_trans_le &
 [ STEM < "supply" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_supply_v_1_rel",
            PHON.ONSET con ] ].

supply_with_v1 := v_np_prep_trans_le &
 [ STEM < "supply" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _with_p_rel,
                    KEYREL.PRED "_supply_v_1_rel" ],
            PHON.ONSET con ] ].

support_n1 := n_mass_count_ppof_le &
 [ STEM < "support" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_support_n_of_rel",
            PHON.ONSET con ] ].

support_v1 := v_np_trans_le &
 [ STEM < "support" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_support_v_1_rel",
            PHON.ONSET con ] ].

suppose_v1 := v_cp_prop*_non_trans_le &
 [ STEM < "suppose" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_suppose_v_1_rel",
            PHON.ONSET con ] ].

suppose_v2 := v_cp_prop_raise_key_bse_le &
 [ STEM < "suppose" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_suppose_v_1_rel",
            PHON.ONSET con ] ].

suppose_v2_3sg := v_cp_prop_raise_key_pres3sg_le &
 [ STEM < "supposes" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_suppose_v_1_rel",
            PHON.ONSET con ] ].

suppose_v2_non3sg := v_cp_prop_raise_key_presnon3sg_le &
 [ STEM < "suppose" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_suppose_v_1_rel",
            PHON.ONSET con ] ].

suppose_v2_past := v_cp_prop_raise_key_past_le &
 [ STEM < "supposed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_suppose_v_1_rel",
            PHON.ONSET con ] ].

suppose_v2_prp := v_cp_prop_raise_key_prp_le &
 [ STEM < "supposing" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_suppose_v_1_rel",
            PHON.ONSET con ] ].

suppose_v2_psp := v_cp_prop_raise_key_psp_le &
 [ STEM < "supposed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_suppose_v_1_rel",
            PHON.ONSET con ] ].

supposed_a1 := adj_attr_intrans_le &
 [ STEM < "supposed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_supposed_a_1_rel",
            PHON.ONSET con ] ].

supposed_a2 := adj_reg_equi_nomod_le &
 [ STEM < "supposed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_supposed_a_1_rel",
            PHON.ONSET con ] ].

supposedly_adv1 := adv_vp_aux_le &
 [ STEM < "supposedly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_supposed_a_1_rel",
            PHON.ONSET con ] ].

supposition_n1 := n_mass_count_le &
 [ STEM < "supposition" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_supposition_n_1_rel",
            PHON.ONSET con ] ].

suppress_v1 := v_np_trans_le &
 [ STEM < "suppress" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_suppress_v_1_rel",
            PHON.ONSET con ] ].

suppression_n1 := n_mass_count_le &
 [ STEM < "suppression" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_suppression_n_1_rel",
            PHON.ONSET con ] ].

surcharge_n := n_ppof_le &
 [ STEM < "surcharge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_surcharge_n_of_rel",
            PHON.ONSET con ] ].

sure_a1 := adj_reg_cp_le &
 [ STEM < "sure" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sure_a_of_rel",
            PHON.ONSET con ] ].

sure_a2 := adj_trans_le &
 [ STEM < "sure" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_sure_a_of_rel" ],
            PHON.ONSET con ] ].

sure_a3 := adj_reg_equi_le &
 [ STEM < "sure" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sure_a_of_rel",
            PHON.ONSET con ] ].

sure_adv1 := adv_vp_pre_le &
 [ STEM < "sure" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sure_a_1_rel",
            PHON.ONSET con ] ].

sure_footed_a1 := adj_intrans_le &
 [ STEM < "sure", "footed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sure+footed_a_1_rel",
            PHON.ONSET con ] ].

sure_footed_a2 := adj_intrans_le &
 [ STEM < "sure-", "footed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sure+footed_a_1_rel",
            PHON.ONSET con ] ].

sure_root_post := adv_s_post_word_nospec_le &
 [ STEM < "sure" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sure_a_1_rel",
            PHON.ONSET con ] ].

sure_root_pre := adv_s_pre_word_root_le &
 [ STEM < "sure" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sure_a_1_rel",
            PHON.ONSET con ] ].

surely_adv1 := adv_int_vp_le &
 [ STEM < "surely" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sure_a_1_rel",
            PHON.ONSET con ] ].

surf_v1 := v_prep_dir_le &
 [ STEM < "surf" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_surf_v_1_rel",
            PHON.ONSET con ] ].

surface_n1 := n_intr_le &
 [ STEM < "surface" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_surface_n_1_rel",
            PHON.ONSET con ] ].

surface_v1 := v_unerg_le &
 [ STEM < "surface" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_surface_v_1_rel",
            PHON.ONSET con ] ].

surfeit_n1 := n_intr_le &
 [ STEM < "surfeit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_surfeit_n_1_rel",
            PHON.ONSET con ] ].

surfeit_v1 := v_np*_trans_le &
 [ STEM < "surfeit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_surfeit_v_1_rel",
            PHON.ONSET con ] ].

surge_n1 := n_intr_le &
 [ STEM < "surge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_surge_n_1_rel",
            PHON.ONSET con ] ].

surge_v1 := v_prep_dir_le &
 [ STEM < "surge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_surge_v_1_rel",
            PHON.ONSET con ] ].

surgery_n := n_mass_count_le &
 [ STEM < "surgery" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_surgery_n_1_rel",
            PHON.ONSET con ] ].

surgical_a1 := adj_intrans_le &
 [ STEM < "surgical" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_surgical_a_1_rel",
            PHON.ONSET con ] ].

surname_n1 := n_intr_le &
 [ STEM < "surname" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_surname_n_1_rel",
            PHON.ONSET con ] ].

surpass_v1 := v_np_trans_le &
 [ STEM < "surpass" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_surpass_v_1_rel",
            PHON.ONSET con ] ].

surplus_n1 := n_ppof_le &
 [ STEM < "surplus" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_surplus_n_of_rel",
            PHON.ONSET con ] ].

surprise_n1 := n_intr_le &
 [ STEM < "surprise" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_surprise_n_1_rel",
            PHON.ONSET con ] ].

surprise_v1 := v_np_trans_le &
 [ STEM < "surprise" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_surprise_v_1_rel",
            PHON.ONSET con ] ].

surprised_a1 := adj_trans_le &
 [ STEM < "surprised" >,
   SYNSEM [ LKEYS [ --COMPKEY _at_p_sel_rel,
                    KEYREL.PRED "_surprised_a_at_rel" ],
            PHON.ONSET con ] ].

surprising_a1 := adj_intrans_le &
 [ STEM < "surprising" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_surprising_a_1_rel",
            PHON.ONSET con ] ].

surprisingly_sa := adv_int_vp_aux_le &
 [ STEM < "surprisingly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_surprising_a_1_rel",
            PHON.ONSET con ] ].

surprisingly_sa2 := adv_int_vp_post_le &
 [ STEM < "surprisingly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_surprising_a_1_rel",
            PHON.ONSET con ] ].

surrender_n1 := n_mass_le &
 [ STEM < "surrender" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_surrender_n_1_rel",
            PHON.ONSET con ] ].

surrender_to_v1 := v_prep*_intrans_le &
 [ STEM < "surrender" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_rel,
                    KEYREL.PRED "_surrender_v_1_rel" ],
            PHON.ONSET con ] ].

surrender_v1 := v_np_trans_le &
 [ STEM < "surrender" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_surrender_v_1_rel",
            PHON.ONSET con ] ].

surreptitiously := adv_int_vp_le &
 [ STEM < "surreptitiously" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_surreptitious_a_1_rel",
            PHON.ONSET con ] ].

surround_v1 := v_np_trans_le &
 [ STEM < "surround" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_surround_v_1_rel",
            PHON.ONSET con ] ].

surroundings_n1 := n_plur_nocmpnd_le &
 [ STEM < "surrounding" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_surroundings_n_1_rel",
            PHON.ONSET con ] ].

surtningsbreen_n1 := n_proper_le &
 [ STEM < "surtningsbreen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "surtningsbreen",
            PHON.ONSET con ] ].

surtningssua_n1 := n_proper_le &
 [ STEM < "surtningssua" >,
   SYNSEM [ LKEYS.KEYREL.CARG "surtningssua",
            PHON.ONSET con ] ].

surtningssui := n_proper_le &
 [ STEM < "surtningssui" >,
   SYNSEM [ LKEYS.KEYREL.CARG "surtningssui",
            PHON.ONSET con ] ].

surtningstind_n1 := n_proper_le &
 [ STEM < "surtningstind" >,
   SYNSEM [ LKEYS.KEYREL.CARG "surtningstind",
            PHON.ONSET con ] ].

survey_n1 := n_intr_le &
 [ STEM < "survey" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_survey_n_1_rel",
            PHON.ONSET con ] ].

survey_v1 := v_np_trans_le &
 [ STEM < "survey" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_survey_v_1_rel",
            PHON.ONSET con ] ].

surveyor_n1 := n_intr_le &
 [ STEM < "surveyor" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_surveyor_n_1_rel",
            PHON.ONSET con ] ].

surveyor_ttl := n_title_le &
 [ STEM < "surveyor" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_surveyor_n_1_rel",
            PHON.ONSET con ] ].

survival_n1 := n_mass_le &
 [ STEM < "survival" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_survival_n_1_rel",
            PHON.ONSET con ] ].

survive_v1 := v_np*_trans_le &
 [ STEM < "survive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_survive_v_1_rel",
            PHON.ONSET con ] ].

susanne := n_proper_le &
 [ STEM < "susanne" >,
   SYNSEM [ LKEYS.KEYREL.CARG "susanne",
            PHON.ONSET con ] ].

susceptibility_n1 := n_mass_count_le &
 [ STEM < "susceptibility" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_susceptibility_n_1_rel",
            PHON.ONSET con ] ].

susceptible_a1 := adj_trans_le &
 [ STEM < "susceptible" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_susceptible_a_to_rel" ],
            PHON.ONSET con ] ].

sushi_n1 := n_intr_le &
 [ STEM < "sushi" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sushi_n_1_rel",
            PHON.ONSET con ] ].

susie := n_proper_le &
 [ STEM < "susie" >,
   SYNSEM [ LKEYS.KEYREL.CARG "susie",
            PHON.ONSET con ] ].

suspect_a1 := adj_intrans_le &
 [ STEM < "suspect" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_suspect_a_1_rel",
            PHON.ONSET con ] ].

suspect_n1 := n_intr_le &
 [ STEM < "suspect" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_suspect_n_1_rel",
            PHON.ONSET con ] ].

suspect_v1 := v_np*_trans_le &
 [ STEM < "suspect" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_suspect_v_1_rel",
            PHON.ONSET con ] ].

suspect_v3 := v_cp_prop_non_trans_le &
 [ STEM < "suspect" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_suspect_v_1_rel",
            PHON.ONSET con ] ].

suspend_v1 := v_np_trans_le &
 [ STEM < "suspend" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_suspend_v_1_rel",
            PHON.ONSET con ] ].

suspension_n1 := n_mass_count_le &
 [ STEM < "suspension" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_suspension_n_1_rel",
            PHON.ONSET con ] ].

suspicion_n1 := n_mass_count_le &
 [ STEM < "suspicion" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_suspicion_n_1_rel",
            PHON.ONSET con ] ].

suspicion_n2 := n_cpcomp_fin_le &
 [ STEM < "suspicion" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_suspicion_n_1_rel",
            PHON.ONSET con ] ].

susquehanna_n1 := n_proper_city_le &
 [ STEM < "susquehanna" >,
   SYNSEM [ LKEYS.KEYREL.CARG "susquehanna",
            PHON.ONSET con ] ].

sustain_v1 := v_np_trans_le &
 [ STEM < "sustain" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sustain_v_1_rel",
            PHON.ONSET con ] ].

sustenance_n1 := n_mass_le &
 [ STEM < "sustenance" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sustenance_n_1_rel",
            PHON.ONSET con ] ].

suzanne := n_proper_le &
 [ STEM < "suzanne" >,
   SYNSEM [ LKEYS.KEYREL.CARG "suzanne",
            PHON.ONSET con ] ].

svalbard := n_proper_le &
 [ STEM < "svalbard" >,
   SYNSEM [ LKEYS.KEYREL.CARG "svalbard",
            PHON.ONSET con ] ].

svardalen_n1 := n_proper_le &
 [ STEM < "svardalen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "svardalen",
            PHON.ONSET con ] ].

svardalspiggen_n1 := n_proper_le &
 [ STEM < "svardalspiggen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "svardalspiggen",
            PHON.ONSET con ] ].

svartatjÃ¸dn := n_proper_le &
 [ STEM < "svartatjÃ¸dn" >,
   SYNSEM [ LKEYS.KEYREL.CARG "svartatjÃ¸dn",
            PHON.ONSET con ] ].

svartdalen_n1 := n_proper_le &
 [ STEM < "svartdalen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "svartdalen",
            PHON.ONSET con ] ].

svartdalspiggen_n1 := n_proper_le &
 [ STEM < "svartdalspiggen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "svartdalspiggen",
            PHON.ONSET con ] ].

svartdalspiggene_n1 := n_proper_le &
 [ STEM < "svartdalspiggene" >,
   SYNSEM [ LKEYS.KEYREL.CARG "svartdalspiggene",
            PHON.ONSET con ] ].

svarthammarbua_n1 := n_proper_le &
 [ STEM < "svarthammarbua" >,
   SYNSEM [ LKEYS.KEYREL.CARG "svarthammarbua",
            PHON.ONSET con ] ].

svartisen := n_proper_le &
 [ STEM < "svartisen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "svartisen",
            PHON.ONSET con ] ].

svarttjÃ¸rna_n1 := n_proper_le &
 [ STEM < "svarttjÃ¸rna" >,
   SYNSEM [ LKEYS.KEYREL.CARG "svarttjÃ¸rna",
            PHON.ONSET con ] ].

svasrtdalen_n1 := n_proper_le &
 [ STEM < "svasrtdalen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "svasrtdalen",
            PHON.ONSET con ] ].

sveidal_n1 := n_proper_le &
 [ STEM < "sveidal" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sveidal",
            PHON.ONSET con ] ].

sveidalsbreen_n1 := n_proper_le &
 [ STEM < "sveidalsbreen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sveidalsbreen",
            PHON.ONSET con ] ].

sveine_n1 := n_proper_le &
 [ STEM < "sveine" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sveine",
            PHON.ONSET con ] ].

svellnosbreen_n1 := n_proper_le &
 [ STEM < "svellnosbreen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "svellnosbreen",
            PHON.ONSET con ] ].

svellnosÃ¥_n1 := n_proper_le &
 [ STEM < "svellnosÃ¥" >,
   SYNSEM [ LKEYS.KEYREL.CARG "svellnosÃ¥",
            PHON.ONSET con ] ].

svensÃ¸y_n1 := n_proper_le &
 [ STEM < "svensÃ¸y" >,
   SYNSEM [ LKEYS.KEYREL.CARG "svensÃ¸y",
            PHON.ONSET con ] ].

sverdrup_n1 := n_proper_le &
 [ STEM < "sverdrup" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sverdrup",
            PHON.ONSET con ] ].

sverre := n_proper_le &
 [ STEM < "sverre" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sverre",
            PHON.ONSET con ] ].

sverrestig := n_proper_le &
 [ STEM < "sverrestig" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sverrestig",
            PHON.ONSET con ] ].

sverrestigen := n_proper_le &
 [ STEM < "sverrestigen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sverrestigen",
            PHON.ONSET con ] ].

sw_isect := adj_intrans_le &
 [ STEM < "sw" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_southwest_a_1_rel",
            PHON.ONSET con ] ].

sw_n1 := n_ppof_le &
 [ STEM < "sw" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sw_n_of_rel",
            PHON.ONSET con ] ].

sw_n2 := n_adv_dir_le &
 [ STEM < "sw" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED _southwest_a_1_rel,
                    KEYREL.PRED place_n_rel ],
            PHON.ONSET con ] ].

swabian_n1 := n_intr_le &
 [ STEM < "swabian" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_swabian_n_1_rel",
            PHON.ONSET con ] ].

swallow_down_v1 := v_particle_np_le &
 [ STEM < "swallow" >,
   SYNSEM [ LKEYS [ --COMPKEY _down_p_sel_rel,
                    KEYREL.PRED "_swallow_v_down_rel" ],
            PHON.ONSET con ] ].

swallow_n1 := n_intr_le &
 [ STEM < "swallow" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_swallow_n_1_rel",
            PHON.ONSET con ] ].

swallow_up_v1 := v_particle_np_le &
 [ STEM < "swallow" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_swallow_v_up_rel" ],
            PHON.ONSET con ] ].

swallow_v1 := v_np*_trans_le &
 [ STEM < "swallow" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_swallow_v_1_rel",
            PHON.ONSET con ] ].

swamp_n1 := n_intr_le &
 [ STEM < "swamp" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_swamp_n_1_rel",
            PHON.ONSET con ] ].

swamp_v1 := v_np_trans_le &
 [ STEM < "swamp" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_swamp_v_1_rel",
            PHON.ONSET con ] ].

swap_n1 := n_ppof_le &
 [ STEM < "swap" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_swap_n_of_rel",
            PHON.ONSET con ] ].

swap_v1 := v_empty_prep*_trans_le &
 [ STEM < "swap" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_swap_v_for_rel" ],
            PHON.ONSET con ] ].

swarm_n1 := n_ppof_le &
 [ STEM < "swarm" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_swarm_n_of_rel",
            PHON.ONSET con ] ].

swarm_v1 := v_np*_trans_le &
 [ STEM < "swarm" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_swarm_v_1_rel",
            PHON.ONSET con ] ].

swarm_with_v1 := v_empty_prep_intrans_le &
 [ STEM < "swarm" >,
   SYNSEM [ LKEYS [ --COMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_swarm_v_with_rel" ],
            PHON.ONSET con ] ].

sway_n1 := n_mass_count_le &
 [ STEM < "sway" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sway_n_1_rel",
            PHON.ONSET con ] ].

sway_v1 := v_unerg_le &
 [ STEM < "sway" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sway_v_1_rel",
            PHON.ONSET con ] ].

sway_v2 := v_np_trans_le &
 [ STEM < "sway" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sway_v_cause_rel",
            PHON.ONSET con ] ].

swear_at_v1 := v_empty_prep_intrans_le &
 [ STEM < "swear" >,
   SYNSEM [ LKEYS [ --COMPKEY _at_p_sel_rel,
                    KEYREL.PRED "_swear_v_at_rel" ],
            PHON.ONSET con ] ].

swear_in_v1 := v_particle_np_le &
 [ STEM < "swear" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_swear_v_in_rel" ],
            PHON.ONSET con ] ].

swear_to_v1 := v_empty_prep_intrans_le &
 [ STEM < "swear" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_swear_v_to_rel" ],
            PHON.ONSET con ] ].

swear_v1 := v_np*_trans_le &
 [ STEM < "swear" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_swear_v_1_rel",
            PHON.ONSET con ] ].

swear_v2 := v_pp_cp_le &
 [ STEM < "swear" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_swear_v_to_rel" ],
            PHON.ONSET con ] ].

swear_v3 := v_subj_equi_le &
 [ STEM < "swear" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_swear_v_1_rel",
            PHON.ONSET con ] ].

sweat_n1 := n_mass_le &
 [ STEM < "sweat" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sweat_n_1_rel",
            PHON.ONSET con ] ].

sweat_off_v1 := v_particle_np_le &
 [ STEM < "sweat" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_sweat_v_off_rel" ],
            PHON.ONSET con ] ].

sweat_out_v1 := v_particle_np_le &
 [ STEM < "sweat" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_sweat_v_out_rel" ],
            PHON.ONSET con ] ].

sweat_v1 := v_unerg_le &
 [ STEM < "sweat" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sweat_v_1_rel",
            PHON.ONSET con ] ].

sweater_n1 := n_intr_le &
 [ STEM < "sweater" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sweater_n_1_rel",
            PHON.ONSET con ] ].

sweats_n1 := n_plur_nocmpnd_le &
 [ STEM < "sweat" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sweats_n_1_rel",
            PHON.ONSET con ] ].

sweaty_a1 := adj_intrans_le &
 [ STEM < "sweaty" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sweaty_a_1_rel",
            PHON.ONSET con ] ].

swede_n1 := n_intr_le &
 [ STEM < "swede" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_swede_n_1_rel",
            PHON.ONSET con ] ].

sweden_n1 := n_proper_le &
 [ STEM < "sweden" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sweden",
            PHON.ONSET con ] ].

swedish_a1 := adj_intrans_le &
 [ STEM < "swedish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_swedish_a_1_rel",
            PHON.ONSET con ] ].

swedish_n1 := n_proper_le &
 [ STEM < "swedish" >,
   SYNSEM [ LKEYS.KEYREL.CARG "swedish",
            PHON.ONSET con ] ].

swedish_n2 := n_intr_le &
 [ STEM < "swedish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_swedish_n_1_rel",
            PHON.ONSET con ] ].

sweep_n1 := n_intr_le &
 [ STEM < "sweep" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sweep_n_1_rel",
            PHON.ONSET con ] ].

sweep_up_v1 := v_particle_np_le &
 [ STEM < "sweep" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_sweep_v_up_rel" ],
            PHON.ONSET con ] ].

sweep_up_v2 := v_particle_le &
 [ STEM < "sweep" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_sweep_v_up_rel" ],
            PHON.ONSET con ] ].

sweep_v1 := v_np*_trans_le &
 [ STEM < "sweep" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sweep_v_1_rel",
            PHON.ONSET con ] ].

sweet_a1 := adj_trans_le &
 [ STEM < "sweet" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_sweet_a_to_rel" ],
            PHON.ONSET con ] ].

sweetly_adv1 := adv_int_vp_le &
 [ STEM < "sweetly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sweet_a_to_rel",
            PHON.ONSET con ] ].

sweetness_n1 := n_mass_le &
 [ STEM < "sweetness" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sweetness_n_1_rel",
            PHON.ONSET con ] ].

swell_a1 := adj_intrans_le &
 [ STEM < "swell" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_swell_a_1_rel",
            PHON.ONSET con ] ].

swell_n1 := n_intr_le &
 [ STEM < "swell" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_swell_n_1_rel",
            PHON.ONSET con ] ].

swell_up_v1 := v_particle_le &
 [ STEM < "swell" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_swell_v_up_rel" ],
            PHON.ONSET con ] ].

swell_v1 := v_np*_trans_le &
 [ STEM < "swell" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_swell_v_1_rel",
            PHON.ONSET con ] ].

swerve_v1 := v_prep_dir_le &
 [ STEM < "swerve" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_swerve_v_1_rel",
            PHON.ONSET con ] ].

swift_a1 := adj_intrans_le &
 [ STEM < "swift" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_swift_a_1_rel",
            PHON.ONSET con ] ].

swifter_a1 := adj_comp_le &
 [ STEM < "swifter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_swift_a_1_rel",
            PHON.ONSET con ] ].

swiftest_a1 := adj_superl_le &
 [ STEM < "swiftest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_swift_a_1_rel",
            PHON.ONSET con ] ].

swiftly_adv1 := adv_int_vp_le &
 [ STEM < "swiftly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_swift_a_1_rel",
            PHON.ONSET con ] ].

swim_n1 := n_intr_le &
 [ STEM < "swim" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_swim_n_1_rel",
            PHON.ONSET con ] ].

swim_v1 := v_prep_dir_le &
 [ STEM < "swim" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_swim_v_1_rel",
            PHON.ONSET con ] ].

swimmer_n1 := n_intr_le &
 [ STEM < "swimmer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_swimmer_n_1_rel",
            PHON.ONSET con ] ].

swimming-pool_n1 := n_intr_le &
 [ STEM < "swimming", "pool" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_swimming+pool_n_1_rel",
            PHON.ONSET con ] ].

swimming_a1 := adj_attr_intrans_le &
 [ STEM < "swimming" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_swimming_a_1_rel",
            PHON.ONSET con ] ].

swindle_n1 := n_intr_le &
 [ STEM < "swindle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_swindle_n_1_rel",
            PHON.ONSET con ] ].

swindle_v1 := v_np*_trans_le &
 [ STEM < "swindle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_swindle_v_1_rel",
            PHON.ONSET con ] ].

swing_n1 := n_mass_count_le &
 [ STEM < "swing" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_swing_n_1_rel",
            PHON.ONSET con ] ].

swing_v1 := v_unacc_dir_le &
 [ STEM < "swing" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_swing_v_1_rel",
            PHON.ONSET con ] ].

swing_v2 := v_np_trans_le &
 [ STEM < "swing" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_swing_v_cause_rel",
            PHON.ONSET con ] ].

swirl_n1 := n_ppof_le &
 [ STEM < "swirl" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_swirl_n_of_rel",
            PHON.ONSET con ] ].

swirl_v1 := v_unacc_le &
 [ STEM < "swirl" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_swirl_v_1_rel",
            PHON.ONSET con ] ].

swirl_v2 := v_np_trans_noger_le &
 [ STEM < "swirl" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_swirl_v_cause_rel",
            PHON.ONSET con ] ].

swiss_a1 := adj_intrans_le &
 [ STEM < "swiss" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_swiss_a_1_rel",
            PHON.ONSET con ] ].

swiss_n1 := n_proper_le &
 [ STEM < "swiss" >,
   SYNSEM [ LKEYS.KEYREL.CARG "swiss",
            PHON.ONSET con ] ].

swiss_n2 := n_intr_le &
 [ STEM < "swiss" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_swiss_n_1_rel",
            PHON.ONSET con ] ].

switch_n1 := n_intr_le &
 [ STEM < "switch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_switch_n_1_rel",
            PHON.ONSET con ] ].

switch_off_v1 := v_particle_np_le &
 [ STEM < "switch" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_switch_v_off_rel" ],
            PHON.ONSET con ] ].

switch_off_v2 := v_particle_le &
 [ STEM < "switch" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_switch_v_off_rel" ],
            PHON.ONSET con ] ].

switch_on_v1 := v_particle_np_le &
 [ STEM < "switch" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_switch_v_on_rel" ],
            PHON.ONSET con ] ].

switch_on_v2 := v_particle_le &
 [ STEM < "switch" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_switch_v_on_rel" ],
            PHON.ONSET con ] ].

switch_v1 := v_unacc_le &
 [ STEM < "switch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_switch_v_1_rel",
            PHON.ONSET con ] ].

switch_v2 := v_np_trans_noger_le &
 [ STEM < "switch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_switch_v_cause_rel",
            PHON.ONSET con ] ].

switch_v3 := v_np*_trans_double_pp_to*_le &
 [ STEM < "switch" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _from_p_sel_rel,
                    KEYREL.PRED "_switch_v_from-to_rel" ],
            PHON.ONSET con ] ].

switchback_n1 := n_intr_le &
 [ STEM < "switchback" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_switchback_n_1_rel",
            PHON.ONSET con ] ].

switchboard_n1 := n_intr_le &
 [ STEM < "switchboard" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_switchboard_n_1_rel",
            PHON.ONSET con ] ].

switzerland_n1 := n_proper_le &
 [ STEM < "switzerland" >,
   SYNSEM [ LKEYS.KEYREL.CARG "switzerland",
            PHON.ONSET con ] ].

sword_n1 := n_intr_le &
 [ STEM < "sword" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sword_n_1_rel",
            PHON.ONSET con ] ].

sykkylven_n1 := n_proper_le &
 [ STEM < "sykkylven" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sykkylven",
            PHON.ONSET con ] ].

syllable_n1 := n_intr_le &
 [ STEM < "syllable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_syllable_n_1_rel",
            PHON.ONSET con ] ].

syllogism_n1 := n_intr_le &
 [ STEM < "syllogism" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_syllogism_n_1_rel",
            PHON.ONSET con ] ].

sylvania_n1 := n_proper_le &
 [ STEM < "sylvania" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sylvania",
            PHON.ONSET con ] ].

sylvarnes_n1 := n_proper_le &
 [ STEM < "sylvarnes" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sylvarnes",
            PHON.ONSET con ] ].

symbol_n1 := n_ppof_le &
 [ STEM < "symbol" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_symbol_n_of_rel",
            PHON.ONSET con ] ].

symbolical_a1 := adj_intrans_le &
 [ STEM < "symbolical" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_symbolical_a_1_rel",
            PHON.ONSET con ] ].

symbolically := adv_int_vp_le &
 [ STEM < "symbolically" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_symbolic_a_1_rel",
            PHON.ONSET con ] ].

symbolize_v1 := v_np_trans_le &
 [ STEM < "symbolize" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_symbolize_v_1_rel",
            PHON.ONSET con ] ].

symmetric_a1 := adj_intrans_le &
 [ STEM < "symmetric" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_symmetric_a_1_rel",
            PHON.ONSET con ] ].

symmetrical_a1 := adj_intrans_le &
 [ STEM < "symmetrical" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_symmetrical_a_1_rel",
            PHON.ONSET con ] ].

symmetry_n1 := n_mass_count_le &
 [ STEM < "symmetry" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_symmetry_n_1_rel",
            PHON.ONSET con ] ].

sympathetic_a1 := adj_intrans_le &
 [ STEM < "sympathetic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sympathetic_a_1_rel",
            PHON.ONSET con ] ].

sympathy_n1 := n_mass_count_le &
 [ STEM < "sympathy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sympathy_n_1_rel",
            PHON.ONSET con ] ].

symphony_n1 := n_ppof_le &
 [ STEM < "symphony" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_symphony_n_of_rel",
            PHON.ONSET con ] ].

symposium_n1 := n_intr_le &
 [ STEM < "symposium" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_symposium_n_1_rel",
            PHON.ONSET con ] ].

symptom_n1 := n_intr_le &
 [ STEM < "symptom" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_symptom_n_1_rel",
            PHON.ONSET con ] ].

synagogue_n1 := n_intr_le &
 [ STEM < "synagogue" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_synagogue_n_1_rel",
            PHON.ONSET con ] ].

synagogue_post_ttl := n_post_title_le &
 [ STEM < "synagogue" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_synagogue_n_1_rel",
            PHON.ONSET con ] ].

synchronize_v1 := v_empty_prep_trans_le &
 [ STEM < "synchronize" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_synchronize_v_with_rel" ],
            PHON.ONSET con ] ].

synchronize_v2 := v_empty_prep_intrans_le &
 [ STEM < "synchronize" >,
   SYNSEM [ LKEYS [ --COMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_synchronize_v_with_rel" ],
            PHON.ONSET con ] ].

synchronize_v3 := v_np_trans_le &
 [ STEM < "synchronize" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_synchronize_v_with_rel",
            PHON.ONSET con ] ].

synonym_n1 := n_intr_le &
 [ STEM < "synonym" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_synonym_n_1_rel",
            PHON.ONSET con ] ].

synonymous_a1 := adj_intrans_le &
 [ STEM < "synonymous" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_synonymous_a_1_rel",
            PHON.ONSET con ] ].

synopsis_n1 := n_intr_le &
 [ STEM < "synopsis" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_synopsis_n_1_rel",
            PHON.ONSET con ] ].

syntactic_a1 := adj_intrans_le &
 [ STEM < "syntactic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_syntactic_a_1_rel",
            PHON.ONSET con ] ].

syntax_n1 := n_mass_le &
 [ STEM < "syntax" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_syntax_n_1_rel",
            PHON.ONSET con ] ].

synthesis_n1 := n_ppof_le &
 [ STEM < "synthesis" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_synthesis_n_of_rel",
            PHON.ONSET con ] ].

synthetic_a1 := adj_intrans_le &
 [ STEM < "synthetic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_synthetic_a_1_rel",
            PHON.ONSET con ] ].

synthroid_n1 := n_mass_count_le &
 [ STEM < "synthroid" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_synthroid_n_1_rel",
            PHON.ONSET con ] ].

syriac_a1 := adj_intrans_le &
 [ STEM < "syriac" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_syriac_a_1_rel",
            PHON.ONSET con ] ].

system_n1 := n_ppof_le &
 [ STEM < "system" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_system_n_of_rel",
            PHON.ONSET con ] ].

systematic_isect := adj_intrans_le &
 [ STEM < "systematic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_systematic_a_1_rel",
            PHON.ONSET con ] ].

systematically_adv1 := adv_int_vp_le &
 [ STEM < "systematically" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_systematical_a_1_rel",
            PHON.ONSET con ] ].

systems_n1 := n_plur_cmpnd_only_le &
 [ STEM < "systems" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_system_n_of_rel",
            PHON.ONSET con ] ].

systerbottjernet_n1 := n_proper_le &
 [ STEM < "systerbottjernet" >,
   SYNSEM [ LKEYS.KEYREL.CARG "systerbottjernet",
            PHON.ONSET con ] ].

syver_n1 := n_proper_le &
 [ STEM < "syver" >,
   SYNSEM [ LKEYS.KEYREL.CARG "syver",
            PHON.ONSET con ] ].

sÃ¦lehus_n1 := n_proper_le &
 [ STEM < "sÃ¦lehus" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sÃ¦lehus",
            PHON.ONSET con ] ].

sÃ¦ter_n1 := n_proper_le &
 [ STEM < "sÃ¦ter" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sÃ¦ter",
            PHON.ONSET con ] ].

sÃ¸re_n1 := n_proper_le &
 [ STEM < "sÃ¸re" >,
   SYNSEM [ LKEYS.KEYREL.CARG "sÃ¸re",
            PHON.ONSET con ] ].

t_n1 := n_proper_le &
 [ STEM < "t" >,
   SYNSEM [ LKEYS.KEYREL.CARG "t",
            PHON.ONSET con ] ].

t_np1 := n_proper_le &
 [ STEM < "_t" >,
   SYNSEM [ LKEYS.KEYREL.CARG "t",
            PHON.ONSET con ] ].

t_period_np1 := n_proper_le &
 [ STEM < "t." >,
   SYNSEM [ LKEYS.KEYREL.CARG "t",
            PHON.ONSET con ] ].

t_period_np2 := n_proper_le &
 [ STEM < "_t." >,
   SYNSEM [ LKEYS.KEYREL.CARG "t",
            PHON.ONSET con ] ].

t_ttl := n_title_le &
 [ STEM < "t." >,
   SYNSEM [ LKEYS.KEYREL.PRED "_t_n_1_rel",
            PHON.ONSET con ] ].

tab_n1 := n_intr_le &
 [ STEM < "tab" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tab_n_1_rel",
            PHON.ONSET con ] ].

table_n1 := n_intr_le &
 [ STEM < "table" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_table_n_1_rel",
            PHON.ONSET con ] ].

table_title := n_title_le &
 [ STEM < "table" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_table_n_1_rel",
            PHON.ONSET con ] ].

table_v1 := v_np_trans_le &
 [ STEM < "table" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_table_v_1_rel",
            PHON.ONSET con ] ].

tablecloth_n1 := n_intr_le &
 [ STEM < "tablecloth" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tablecloth_n_1_rel",
            PHON.ONSET con ] ].

tablet_n1 := n_intr_le &
 [ STEM < "tablet" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tablet_n_1_rel",
            PHON.ONSET con ] ].

taboo_n1 := n_intr_le &
 [ STEM < "taboo" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_taboo_n_1_rel",
            PHON.ONSET con ] ].

tabs_n1_i := n_plur_idiom_le &
 [ STEM < "tabs" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tabs_n_i_rel",
            PHON.ONSET con ] ].

tack_n1 := n_intr_le &
 [ STEM < "tack" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tack_n_1_rel",
            PHON.ONSET con ] ].

tackle_n1 := n_intr_le &
 [ STEM < "tackle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tackle_n_1_rel",
            PHON.ONSET con ] ].

tackle_v1 := v_np_trans_le &
 [ STEM < "tackle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tackle_v_1_rel",
            PHON.ONSET con ] ].

taco_bell_n1 := n_proper_le &
 [ STEM < "taco", "bell" >,
   SYNSEM [ LKEYS.KEYREL.CARG "taco_bell",
            PHON.ONSET con ] ].

taco_bell_n2 := n_proper_le &
 [ STEM < "taco-", "bell" >,
   SYNSEM [ LKEYS.KEYREL.CARG "taco_bell",
            PHON.ONSET con ] ].

taffrail_n1 := n_intr_le &
 [ STEM < "taffrail" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_taffrail_n_1_rel",
            PHON.ONSET con ] ].

tag_n1 := n_intr_le &
 [ STEM < "tag" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tag_n_1_rel",
            PHON.ONSET con ] ].

tag_v1 := v_np_trans_le &
 [ STEM < "tag" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tag_v_1_rel",
            PHON.ONSET con ] ].

tai_pen_n1 := n_proper_le &
 [ STEM < "tai", "pen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "tai_pen",
            PHON.ONSET con ] ].

tail_n1 := n_intr_le &
 [ STEM < "tail" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tail_n_1_rel",
            PHON.ONSET con ] ].

tail_off_v1 := v_particle_le &
 [ STEM < "tail" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_tail_v_off_rel" ],
            PHON.ONSET con ] ].

tail_v1 := v_np_trans_le &
 [ STEM < "tail" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tail_v_1_rel",
            PHON.ONSET con ] ].

tailor_n1 := n_intr_le &
 [ STEM < "tailor" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tailor_n_1_rel",
            PHON.ONSET con ] ].

tailor_to_v1 := v_empty_prep_trans_le &
 [ STEM < "tailor" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_tailor_v_to_rel" ],
            PHON.ONSET con ] ].

tailor_v1 := v_obj_equi_le &
 [ STEM < "tailor" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tailor_v_1_rel",
            PHON.ONSET con ] ].

taiwan_n1 := n_proper_le &
 [ STEM < "taiwan" >,
   SYNSEM [ LKEYS.KEYREL.CARG "taiwan",
            PHON.ONSET con ] ].

taiwanese_a1 := adj_intrans_le &
 [ STEM < "taiwanese" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_taiwanese_a_1_rel",
            PHON.ONSET con ] ].

taiwanese_n1 := n_proper_le &
 [ STEM < "taiwanese" >,
   SYNSEM [ LKEYS.KEYREL.CARG "taiwanese",
            PHON.ONSET con ] ].

taiwanese_n2 := n_plur_nocmpnd_le &
 [ STEM < "taiwanese" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_taiwanese_n_1_rel",
            PHON.ONSET con ] ].

taj_mahal_n1 := n_proper_le &
 [ STEM < "taj", "mahal" >,
   SYNSEM [ LKEYS.KEYREL.CARG "taj_mahal",
            PHON.ONSET con ] ].

take_along_v1 := v_particle_np_le &
 [ STEM < "take" >,
   SYNSEM [ LKEYS [ --COMPKEY _along_p_sel_rel,
                    KEYREL.PRED "_take_v_along_rel" ],
            PHON.ONSET con ] ].

take_around_v1 := v_np_particle_only_le &
 [ STEM < "take" >,
   SYNSEM [ LKEYS [ --COMPKEY _around_p_sel_rel,
                    KEYREL.PRED "_take_v_around_rel" ],
            PHON.ONSET con ] ].

take_away_v1 := v_particle_np_le &
 [ STEM < "take" >,
   SYNSEM [ LKEYS [ --COMPKEY _away_p_sel_rel,
                    KEYREL.PRED "_take_v_away_rel" ],
            PHON.ONSET con ] ].

take_back_v1 := v_particle_np_le &
 [ STEM < "take" >,
   SYNSEM [ LKEYS [ --COMPKEY _back_p_sel_rel,
                    KEYREL.PRED "_take_v_back_rel" ],
            PHON.ONSET con ] ].

take_down_v1 := v_particle_np_le &
 [ STEM < "take" >,
   SYNSEM [ LKEYS [ --COMPKEY _down_p_sel_rel,
                    KEYREL.PRED "_take_v_down_rel" ],
            PHON.ONSET con ] ].

take_for_granted_v1_i := v_empty_prep_trans_idiom_le &
 [ STEM < "take" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_take_v_i_rel" ],
            PHON.ONSET con ] ].

take_in_v1 := v_particle_np_le &
 [ STEM < "take" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_take_v_in_rel" ],
            PHON.ONSET con ] ].

take_off_v1 := v_particle_np_le &
 [ STEM < "take" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_take_v_x-off_rel" ],
            PHON.ONSET con ] ].

take_off_v2 := v_particle_le &
 [ STEM < "take" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_take_v_off_rel" ],
            PHON.ONSET con ] ].

take_on_v1 := v_particle_np_le &
 [ STEM < "take" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_take_v_on_rel" ],
            PHON.ONSET con ] ].

take_out_of_v1 := v_empty_prep_trans_le &
 [ STEM < "take" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _out+of_p_sel_rel,
                    KEYREL.PRED "_take_v_out+of_rel" ],
            PHON.ONSET con ] ].

take_out_v1 := v_particle_np_le &
 [ STEM < "take" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_take_v_out_rel" ],
            PHON.ONSET con ] ].

take_out_v2 := v_particle_np_pp_to_le &
 [ STEM < "take" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_take_v_out_rel" ],
            PHON.ONSET con ] ].

take_over_v1 := v_particle_np_le &
 [ STEM < "take" >,
   SYNSEM [ LKEYS [ --COMPKEY _over_p_sel_rel,
                    KEYREL.PRED "_take_v_over_rel" ],
            PHON.ONSET con ] ].

take_over_v2 := v_particle_le &
 [ STEM < "take" >,
   SYNSEM [ LKEYS [ --COMPKEY _over_p_sel_rel,
                    KEYREL.PRED "_take_v_over_rel" ],
            PHON.ONSET con ] ].

take_up_v1 := v_particle_np_le &
 [ STEM < "take" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_take_v_up_rel" ],
            PHON.ONSET con ] ].

take_v1 := v_np_trans_noarg3_le &
 [ STEM < "take" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_take_v_1_rel",
            PHON.ONSET con ] ].

take_v1_i := v_np_non_trans_idiom_le &
 [ STEM < "take" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_take_v_i_rel",
            PHON.ONSET con ] ].

take_v2 := v_anom_equi_oblig_le &
 [ STEM < "take" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_take_v_2_rel",
            PHON.ONSET con ] ].

take_v3 := v_expl_it_subj_np_np_vp_inf_le &
 [ STEM < "take" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_take_v_2_rel",
            PHON.ONSET con ] ].

take_v4 := v_expl_obj_cp_prop_le &
 [ STEM < "take" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_take_v_2_rel",
            PHON.ONSET con ] ].

take_v5 := v_np_prep_trans_dors_le &
 [ STEM < "take" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_take_v_1_rel",
            PHON.ONSET con ] ].

take_v6 := v_ditrans_only_le &
 [ STEM < "take" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_take_v_1_rel",
            PHON.ONSET con ] ].

take_x_in_v1_i := v_empty_prep_trans_idiom_le &
 [ STEM < "take" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_take_v_i_rel" ],
            PHON.ONSET con ] ].

take_x_into_v1_i := v_empty_prep_trans_idiom_le &
 [ STEM < "take" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _into_p_sel_rel,
                    KEYREL.PRED "_take_v_i_rel" ],
            PHON.ONSET con ] ].

take_x_of_v1_i := v_empty_prep_trans_idiom_le &
 [ STEM < "take" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_take_v_i_rel" ],
            PHON.ONSET con ] ].

takemoto_n1 := n_proper_le &
 [ STEM < "takemoto" >,
   SYNSEM [ LKEYS.KEYREL.CARG "takemoto",
            PHON.ONSET con ] ].

takeoff_n1 := n_mass_count_le &
 [ STEM < "takeoff" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_takeoff_n_1_rel",
            PHON.ONSET con ] ].

taker_n1 := n_ppof_le &
 [ STEM < "taker" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_taker_n_of_rel",
            PHON.ONSET con ] ].

tale_n1 := n_intr_le &
 [ STEM < "tale" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tale_n_1_rel",
            PHON.ONSET con ] ].

talent_n1 := n_intr_le &
 [ STEM < "talent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_talent_n_1_rel",
            PHON.ONSET con ] ].

talk_into_v1 := v_empty_prep_trans_le &
 [ STEM < "talk" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _into_p_sel_rel,
                    KEYREL.PRED "_talk_v_into_rel" ],
            PHON.ONSET con ] ].

talk_n1 := n_ppof_le &
 [ STEM < "talk" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_talk_n_of-on_rel",
            PHON.ONSET con ] ].

talk_n2 := n_ppcomp_oblig_le &
 [ STEM < "talk" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_talk_n_of-on_rel" ],
            PHON.ONSET con ] ].

talk_of_v1 := v_empty_prep_intrans_le &
 [ STEM < "talk" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_talk_v_of_rel" ],
            PHON.ONSET con ] ].

talk_over_v1 := v_particle_np_le &
 [ STEM < "talk" >,
   SYNSEM [ LKEYS [ --COMPKEY _over_p_sel_rel,
                    KEYREL.PRED "_talk_v_over_rel" ],
            PHON.ONSET con ] ].

talk_v1 := v_double_pp*_le &
 [ STEM < "talk" >,
   SYNSEM [ LKEYS [ --COMPKEY to_or_with_p_rel,
                    --OCOMPKEY _about_p_rel,
                    KEYREL.PRED "_talk_v_about_rel" ],
            PHON.ONSET con ] ].

tall_a1 := adj_intrans_le &
 [ STEM < "tall" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tall_a_1_rel",
            PHON.ONSET con ] ].

taller := adj_comp_le &
 [ STEM < "taller" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tall_a_1_rel",
            PHON.ONSET con ] ].

tallest_a1 := adj_superl_le &
 [ STEM < "tallest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tall_a_1_rel",
            PHON.ONSET con ] ].

talon_n1 := n_intr_le &
 [ STEM < "talon" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_talon_n_1_rel",
            PHON.ONSET con ] ].

talus_n1 := n_mass_count_le &
 [ STEM < "talus" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_talus_n_1_rel",
            PHON.ONSET con ] ].

tame_a1 := adj_intrans_le &
 [ STEM < "tame" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tame_a_1_rel",
            PHON.ONSET con ] ].

tame_v1 := v_np_trans_le &
 [ STEM < "tame" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tame_v_1_rel",
            PHON.ONSET con ] ].

tamp_v1 := v_np_trans_le &
 [ STEM < "tamp" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tamp_v_1_rel",
            PHON.ONSET con ] ].

tampa_bay_n1 := n_proper_city_le &
 [ STEM < "tampa", "bay" >,
   SYNSEM [ LKEYS.KEYREL.CARG "tampa_bay",
            PHON.ONSET con ] ].

tampa_n1 := n_proper_city_le &
 [ STEM < "tampa" >,
   SYNSEM [ LKEYS.KEYREL.CARG "tampa",
            PHON.ONSET con ] ].

tan_n1 := n_intr_le &
 [ STEM < "tan" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tan_n_1_rel",
            PHON.ONSET con ] ].

tan_v1 := v_np*_trans_le &
 [ STEM < "tan" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tan_v_1_rel",
            PHON.ONSET con ] ].

tangible_a1 := adj_intrans_le &
 [ STEM < "tangible" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tangible_a_1_rel",
            PHON.ONSET con ] ].

tangle_n1 := n_intr_le &
 [ STEM < "tangle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tangle_n_1_rel",
            PHON.ONSET con ] ].

tangle_up_v1 := v_particle_np_le &
 [ STEM < "tangle" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_tangle_v_up_rel" ],
            PHON.ONSET con ] ].

tangle_v1 := v_np*_trans_le &
 [ STEM < "tangle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tangle_v_1_rel",
            PHON.ONSET con ] ].

tango_n1 := n_intr_le &
 [ STEM < "tango" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tango_n_1_rel",
            PHON.ONSET con ] ].

tango_v1 := v_unerg_le &
 [ STEM < "tango" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tango_v_1_rel",
            PHON.ONSET con ] ].

tank_n1 := n_intr_le &
 [ STEM < "tank" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tank_n_1_rel",
            PHON.ONSET con ] ].

tank_up_v1 := v_particle_le &
 [ STEM < "tank" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_tank_v_up_rel" ],
            PHON.ONSET con ] ].

tank_up_v2 := v_particle_np_le &
 [ STEM < "tank" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_tank_v_up_rel" ],
            PHON.ONSET con ] ].

tank_v1 := v_unerg_le &
 [ STEM < "tank" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tank_v_1_rel",
            PHON.ONSET con ] ].

tanker_n1 := n_intr_le &
 [ STEM < "tanker" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tanker_n_1_rel",
            PHON.ONSET con ] ].

tanned_isect := adj_intrans_le &
 [ STEM < "tanned" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tanned_a_1_rel",
            PHON.ONSET con ] ].

tantalize_v1 := v_np_trans_le &
 [ STEM < "tantalize" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tantalize_v_1_rel",
            PHON.ONSET con ] ].

tap_n1 := n_ppof_le &
 [ STEM < "tap" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tap_n_of_rel",
            PHON.ONSET con ] ].

tap_off_v1 := v_particle_np_le &
 [ STEM < "tap" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_tap_v_off_rel" ],
            PHON.ONSET con ] ].

tap_v1 := v_np_trans_le &
 [ STEM < "tap" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tap_v_1_rel",
            PHON.ONSET con ] ].

tape_n1 := n_mass_count_le &
 [ STEM < "tape" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tape_n_1_rel",
            PHON.ONSET con ] ].

tape_v1 := v_np*_trans_le &
 [ STEM < "tape" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tape_v_1_rel",
            PHON.ONSET con ] ].

tapeline_n1 := n_intr_le &
 [ STEM < "tapeline" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tapeline_n_1_rel",
            PHON.ONSET con ] ].

taper_off_v1 := v_particle_le &
 [ STEM < "taper" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_taper_v_off_rel" ],
            PHON.ONSET con ] ].

taper_v1 := v_prep_dir_le &
 [ STEM < "taper" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_taper_v_1_rel",
            PHON.ONSET con ] ].

tardiness_n1 := n_mass_le &
 [ STEM < "tardiness" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tardiness_n_1_rel",
            PHON.ONSET con ] ].

target_n1 := n_ppof_le &
 [ STEM < "target" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_target_n_of_rel",
            PHON.ONSET con ] ].

target_v1 := v_np_trans_le &
 [ STEM < "target" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_target_v_1_rel",
            PHON.ONSET con ] ].

tarn_n1 := n_intr_le &
 [ STEM < "tarn" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tarn_n_1_rel",
            PHON.ONSET con ] ].

taro_n1 := n_proper_le &
 [ STEM < "taro" >,
   SYNSEM [ LKEYS.KEYREL.CARG "taro",
            PHON.ONSET con ] ].

tart_a1 := adj_intrans_le &
 [ STEM < "tart" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tart_a_1_rel",
            PHON.ONSET con ] ].

tart_n1 := n_intr_le &
 [ STEM < "tart" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tart_n_1_rel",
            PHON.ONSET con ] ].

task_n1 := n_ppof_le &
 [ STEM < "task" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_task_n_of_rel",
            PHON.ONSET con ] ].

taste_n1 := n_ppof_le &
 [ STEM < "taste" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_taste_n_of_rel",
            PHON.ONSET con ] ].

taste_seem_v1 := v_prdp_pp_seq_adj_le &
 [ STEM < "taste" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_taste_v_to_rel",
            PHON.ONSET con ] ].

taste_v1 := v_np_trans_le &
 [ STEM < "taste" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_taste_v_1_rel",
            PHON.ONSET con ] ].

tasteful_isect := adj_intrans_le &
 [ STEM < "tasteful" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tasteful_a_1_rel",
            PHON.ONSET con ] ].

tastefully_isect := adv_int_vp_le &
 [ STEM < "tastefully" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tasteful_a_1_rel",
            PHON.ONSET con ] ].

tasty_a1 := adj_intrans_le &
 [ STEM < "tasty" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tasty_a_1_rel",
            PHON.ONSET con ] ].

taw_n1 := n_intr_le &
 [ STEM < "taw" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_taw_n_1_rel",
            PHON.ONSET con ] ].

tax_n1 := n_mass_count_le &
 [ STEM < "tax" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tax_n_1_rel",
            PHON.ONSET con ] ].

tax_v1 := v_np_trans_le &
 [ STEM < "tax" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tax_v_1_rel",
            PHON.ONSET con ] ].

taxi_n1 := n_intr_le &
 [ STEM < "taxi" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_taxi_n_1_rel",
            PHON.ONSET con ] ].

taxi_v1 := v_prep_dir_le &
 [ STEM < "taxi" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_taxi_v_1_rel",
            PHON.ONSET con ] ].

tci_n1 := n_proper_le &
 [ STEM < "tci" >,
   SYNSEM [ LKEYS.KEYREL.CARG "tci",
            PHON.ONSET con ] ].

tdma_n1 := n_proper_le &
 [ STEM < "tdma" >,
   SYNSEM [ LKEYS.KEYREL.CARG "tdma",
            PHON.ONSET con ] ].

tea_n1 := n_mass_count_le &
 [ STEM < "tea" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tea_n_1_rel",
            PHON.ONSET con ] ].

tea_time_n1 := n_mealtime_le &
 [ STEM < "tea", "time" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tea+time_n_1_rel",
            PHON.ONSET con ] ].

teach_v1 := v_np*_trans_le &
 [ STEM < "teach" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_teach_v_1_rel",
            PHON.ONSET con ] ].

teach_v2 := v_obj_equi_le &
 [ STEM < "teach" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_teach_v_1_rel",
            PHON.ONSET con ] ].

teach_v3 := v_ditrans_only_le &
 [ STEM < "teach" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_teach_v_1_rel",
            PHON.ONSET con ] ].

teacher_n1 := n_ppof_le &
 [ STEM < "teacher" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_teacher_n_of_rel",
            PHON.ONSET con ] ].

teal_n1 := n_mass_count_le &
 [ STEM < "teal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_teal_n_1_rel",
            PHON.ONSET con ] ].

teal_n2 := n_mass_kind_le &
 [ STEM < "teal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_teal_n_kind_rel",
            PHON.ONSET con ] ].

team_n1 := n_ppof_le &
 [ STEM < "team" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_team_n_of_rel",
            PHON.ONSET con ] ].

team_up_v1 := v_particle_le &
 [ STEM < "team" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_team_v_up_rel" ],
            PHON.ONSET con ] ].

tear_apart_v1 := v_particle_np_le &
 [ STEM < "tear" >,
   SYNSEM [ LKEYS [ --COMPKEY _apart_a_sel_rel,
                    KEYREL.PRED "_tear_v_apart_rel" ],
            PHON.ONSET con ] ].

tear_off_v1 := v_particle_np_le &
 [ STEM < "tear" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_tear_v_off_rel" ],
            PHON.ONSET con ] ].

tear_off_v2 := v_particle_le &
 [ STEM < "tear" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_tear_v_off_rel" ],
            PHON.ONSET con ] ].

tear_open_v1 := v_particle_np_le &
 [ STEM < "tear" >,
   SYNSEM [ LKEYS [ --COMPKEY _open_a_sel_rel,
                    KEYREL.PRED "_tear_v_open_rel" ],
            PHON.ONSET con ] ].

tear_up_v1 := v_particle_np_le &
 [ STEM < "tear" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_tear_v_up_rel" ],
            PHON.ONSET con ] ].

tear_up_v2 := v_particle_le &
 [ STEM < "tear" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_tear_v_up_rel" ],
            PHON.ONSET con ] ].

tear_v1 := v_np_trans_noger_le &
 [ STEM < "tear" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tear_v_cause_rel",
            PHON.ONSET con ] ].

tear_v2 := v_unacc_le &
 [ STEM < "tear" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tear_v_1_rel",
            PHON.ONSET con ] ].

tearjerker_n1 := n_intr_le &
 [ STEM < "tearjerker" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tearjerker_n_1_rel",
            PHON.ONSET con ] ].

tease_apart_v1 := v_particle_np_le &
 [ STEM < "tease" >,
   SYNSEM [ LKEYS [ --COMPKEY _apart_a_sel_rel,
                    KEYREL.PRED "_tease_v_apart_rel" ],
            PHON.ONSET con ] ].

tease_open_v1 := v_particle_np_le &
 [ STEM < "tease" >,
   SYNSEM [ LKEYS [ --COMPKEY _open_a_sel_rel,
                    KEYREL.PRED "_tease_v_open_rel" ],
            PHON.ONSET con ] ].

tease_out_v1 := v_particle_np_le &
 [ STEM < "tease" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_tease_v_out_rel" ],
            PHON.ONSET con ] ].

tease_v1 := v_np_trans_le &
 [ STEM < "tease" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tease_v_1_rel",
            PHON.ONSET con ] ].

tech_a1 := adj_intrans_le &
 [ STEM < "tech" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tech_a_1_rel",
            PHON.ONSET con ] ].

technical_a1 := adj_intrans_le &
 [ STEM < "technical" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_technical_a_1_rel",
            PHON.ONSET con ] ].

technicality_n1 := n_intr_le &
 [ STEM < "technicality" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_technicality_n_1_rel",
            PHON.ONSET con ] ].

technically := adv_int_vp_le &
 [ STEM < "technically" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_technical_a_1_rel",
            PHON.ONSET con ] ].

technique_n1 := n_intr_le &
 [ STEM < "technique" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_technique_n_1_rel",
            PHON.ONSET con ] ].

technological_a1 := adj_intrans_le &
 [ STEM < "technological" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_technological_a_1_rel",
            PHON.ONSET con ] ].

technology_n1 := n_mass_count_le &
 [ STEM < "technology" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_technology_n_1_rel",
            PHON.ONSET con ] ].

tecra_n1 := n_intr_le &
 [ STEM < "tecra" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tecra_n_1_rel",
            PHON.ONSET con ] ].

ted_n1 := n_proper_le &
 [ STEM < "ted" >,
   SYNSEM [ LKEYS.KEYREL.CARG "ted",
            PHON.ONSET con ] ].

teddy_n1 := n_proper_le &
 [ STEM < "teddy" >,
   SYNSEM [ LKEYS.KEYREL.CARG "teddy",
            PHON.ONSET con ] ].

tee_shirt_n1 := n_intr_le &
 [ STEM < "tee", "shirt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tee+shirt_n_1_rel",
            PHON.ONSET con ] ].

tee_shirt_n2 := n_intr_le &
 [ STEM < "t", "shirt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tee+shirt_n_1_rel",
            PHON.ONSET con ] ].

tee_shirt_n3 := n_intr_le &
 [ STEM < "t-", "shirt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tee+shirt_n_1_rel",
            PHON.ONSET con ] ].

teem_v1 := v_prep*_intrans_le &
 [ STEM < "teem" >,
   SYNSEM [ LKEYS [ --COMPKEY _with_p_rel,
                    KEYREL.PRED "_teem_v_1_rel" ],
            PHON.ONSET con ] ].

teen_n1 := n_intr_le &
 [ STEM < "teen" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_teen_n_1_rel",
            PHON.ONSET con ] ].

telegraph_n1 := n_intr_le &
 [ STEM < "telegraph" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_telegraph_n_1_rel",
            PHON.ONSET con ] ].

telegraph_v1 := v_np*_trans_le &
 [ STEM < "telegraph" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_telegraph_v_1_rel",
            PHON.ONSET con ] ].

telegraph_v2 := v_cp_non_trans_le &
 [ STEM < "telegraph" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_telegraph_v_1_rel",
            PHON.ONSET con ] ].

telegraphic_a1 := adj_intrans_le &
 [ STEM < "telegraphic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_telegraphic_a_1_rel",
            PHON.ONSET con ] ].

telephone_abb_n1 := n_intr_nosort_le &
 [ STEM < "tel" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_telephone_n_1_rel",
            PHON.ONSET con ] ].

telephone_abb_n2 := n_intr_nosort_le &
 [ STEM < "tel." >,
   SYNSEM [ LKEYS.KEYREL.PRED "_telephone_n_1_rel",
            PHON.ONSET con ] ].

telephone_n1 := n_intr_nosort_le &
 [ STEM < "telephone" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_telephone_n_1_rel",
            PHON.ONSET con ] ].

telephone_v1 := v_np*_trans_le &
 [ STEM < "telephone" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_telephone_v_1_rel",
            PHON.ONSET con ] ].

telesales_n1 := n_plur_le &
 [ STEM < "telesale" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_telesales_n_1_rel",
            PHON.ONSET con ] ].

telescope_n1 := n_intr_le &
 [ STEM < "telescope" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_telescope_n_1_rel",
            PHON.ONSET con ] ].

telescope_v1 := v_unerg_le &
 [ STEM < "telescope" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_telescope_v_1_rel",
            PHON.ONSET con ] ].

televise_v1 := v_np_trans_le &
 [ STEM < "televise" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_televise_v_1_rel",
            PHON.ONSET con ] ].

television_n1 := n_mass_count_le &
 [ STEM < "television" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_television_n_1_rel",
            PHON.ONSET con ] ].

tell_about_v1 := v_empty_prep_trans_le &
 [ STEM < "tell" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _about_p_sel_rel,
                    KEYREL.PRED "_tell_v_about_rel" ],
            PHON.ONSET con ] ].

tell_v1 := v_ditrans_only_le &
 [ STEM < "tell" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tell_v_1_rel",
            PHON.ONSET con ] ].

tell_v2 := v_np_trans_cp_fin_or_inf_le &
 [ STEM < "tell" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tell_v_1_rel",
            PHON.ONSET con ] ].

tell_v3 := v_obj_equi_le &
 [ STEM < "tell" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tell_v_1_rel",
            PHON.ONSET con ] ].

tell_v4 := v_np_trans_le &
 [ STEM < "tell" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tell_v_1_rel",
            PHON.ONSET con ] ].

tell_v5 := v_cp_fin_inf_non_trans_le &
 [ STEM < "tell" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tell_v_1_rel",
            PHON.ONSET con ] ].

tell_v6 := v_pp_oblig_cp_le &
 [ STEM < "tell" >,
   SYNSEM [ LKEYS [ --COMPKEY _by_p_sel_rel,
                    KEYREL.PRED "_tell_v_by_rel" ],
            PHON.ONSET con ] ].

temper_n1 := n_intr_le &
 [ STEM < "temper" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_temper_n_1_rel",
            PHON.ONSET con ] ].

temper_v1 := v_np_trans_le &
 [ STEM < "temper" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_temper_v_1_rel",
            PHON.ONSET con ] ].

temperament_n1 := n_mass_count_le &
 [ STEM < "temperament" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_temperament_n_1_rel",
            PHON.ONSET con ] ].

temperate_a1 := adj_intrans_le &
 [ STEM < "temperate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_temperate_a_1_rel",
            PHON.ONSET con ] ].

temperature_n1 := n_mass_count_ppof_le &
 [ STEM < "temperature" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_temperature_n_of_rel",
            PHON.ONSET con ] ].

tempest_n1 := n_intr_le &
 [ STEM < "tempest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tempest_n_1_rel",
            PHON.ONSET con ] ].

temple_n1 := n_intr_le &
 [ STEM < "temple" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_temple_n_1_rel",
            PHON.ONSET con ] ].

temple_post_ttl := n_post_title_le &
 [ STEM < "temple" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_temple_n_1_rel",
            PHON.ONSET con ] ].

tempo_n1 := n_intr_le &
 [ STEM < "tempo" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tempo_n_1_rel",
            PHON.ONSET con ] ].

temporal_isect := adj_intrans_le &
 [ STEM < "temporal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_temporal_a_1_rel",
            PHON.ONSET con ] ].

temporarily := adv_int_vp_le &
 [ STEM < "temporarily" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_temporary_a_1_rel",
            PHON.ONSET con ] ].

temporary_a1 := adj_intrans_le &
 [ STEM < "temporary" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_temporary_a_1_rel",
            PHON.ONSET con ] ].

tempt_v1 := v_np_trans_le &
 [ STEM < "tempt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tempt_v_1_rel",
            PHON.ONSET con ] ].

tempt_v2 := v_obj_equi_le &
 [ STEM < "tempt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tempt_v_1_rel",
            PHON.ONSET con ] ].

temptation_n1 := n_mass_count_le &
 [ STEM < "temptation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_temptation_n_1_rel",
            PHON.ONSET con ] ].

tempting_a1 := adj_intrans_le &
 [ STEM < "tempting" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tempting_a_1_rel",
            PHON.ONSET con ] ].

temptingly_adv := adv_int_vp_le &
 [ STEM < "temptingly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tempting_a_1_rel",
            PHON.ONSET con ] ].

ten := adj_bare_unspecified_card_two_le &
 [ STEM < "ten" >,
   SYNSEM [ LKEYS.KEYREL.CARG "10",
            PHON.ONSET con ] ].

ten_day := n_day_of_month_card_le &
 [ STEM < "ten" >,
   SYNSEM [ LKEYS.KEYREL.CARG "10",
            PHON.ONSET con ] ].

ten_day_num := n_day_of_month_card_le &
 [ STEM < "10" >,
   SYNSEM [ LKEYS.KEYREL.CARG "10",
            PHON.ONSET con ] ].

ten_day_num_yofc := n_day_of_month_card_yofc_le &
 [ STEM < "10" >,
   SYNSEM [ LKEYS.KEYREL.CARG "10",
            PHON.ONSET con ] ].

ten_day_yofc := n_day_of_month_card_yofc_le &
 [ STEM < "ten" >,
   SYNSEM [ LKEYS.KEYREL.CARG "10",
            PHON.ONSET con ] ].

ten_four_root_post := adv_s_post_word_nospec_le &
 [ STEM < "ten", "four" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ten+four_a_1_rel",
            PHON.ONSET con ] ].

ten_four_root_pre := adv_s_pre_word_root_le &
 [ STEM < "ten", "four" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ten+four_a_1_rel",
            PHON.ONSET con ] ].

ten_hour := n_hour_le &
 [ STEM < "ten" >,
   SYNSEM [ LKEYS.KEYREL.CARG "10",
            PHON.ONSET con ] ].

ten_roman := adj_bare_unspecified_card_two_le &
 [ STEM < "_X" >,
   SYNSEM [ LKEYS.KEYREL.CARG "X",
            PHON.ONSET con ] ].

tenacious_a1 := adj_intrans_le &
 [ STEM < "tenacious" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tenacious_a_1_rel",
            PHON.ONSET con ] ].

tenant_n1 := n_intr_le &
 [ STEM < "tenant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tenant_n_1_rel",
            PHON.ONSET con ] ].

tend_v1 := v_ssr_noimp_le &
 [ STEM < "tend" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tend_v_1_rel",
            PHON.ONSET con ] ].

tend_v2 := v_np_trans_le &
 [ STEM < "tend" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tend_v_1_rel",
            PHON.ONSET con ] ].

tendency_n1 := n_ppcomp_le &
 [ STEM < "tendency" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_tendency_n_to_rel" ],
            PHON.ONSET con ] ].

tender_a1 := adj_intrans_le &
 [ STEM < "tender" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tender_a_1_rel",
            PHON.ONSET con ] ].

tender_n1 := n_mass_le &
 [ STEM < "tender" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tender_n_1_rel",
            PHON.ONSET con ] ].

tender_v1 := v_np_trans_le &
 [ STEM < "tender" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tender_v_1_rel",
            PHON.ONSET con ] ].

tenderness_n1 := n_mass_le &
 [ STEM < "tenderness" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tenderness_n_1_rel",
            PHON.ONSET con ] ].

tendigitordersatz := adj_bare_unspecified_ord_nine_le &
 [ STEM < "tendigitordersatz" >,
   SYNSEM [ LKEYS.KEYREL [ CARG "dig10ersatz",
                             PRED const_rel ],
            PHON.ONSET onset ] ].

tendril_n1 := n_intr_le &
 [ STEM < "tendril" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tendril_n_1_rel",
            PHON.ONSET con ] ].

tenement_n1 := n_intr_le &
 [ STEM < "tenement" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tenement_n_1_rel",
            PHON.ONSET con ] ].

tenish := n_approx_hour_le &
 [ STEM < "tenish" >,
   SYNSEM [ LKEYS.KEYREL.CARG "10",
            PHON.ONSET con ] ].

tennessee_n1 := n_proper_le &
 [ STEM < "tennessee" >,
   SYNSEM [ LKEYS.KEYREL.CARG "tennessee",
            PHON.ONSET con ] ].

tennessee_n2 := n_proper_abb_le &
 [ STEM < "tn" >,
   SYNSEM [ LKEYS.KEYREL.CARG "tennessee",
            PHON.ONSET con ] ].

tennis_n1 := n_mass_le &
 [ STEM < "tennis" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tennis_n_1_rel",
            PHON.ONSET con ] ].

tenor_n1 := n_intr_le &
 [ STEM < "tenor" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tenor_n_1_rel",
            PHON.ONSET con ] ].

tense_isect := adj_intrans_le &
 [ STEM < "tense" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tense_a_1_rel",
            PHON.ONSET con ] ].

tensely := adv_int_vp_le &
 [ STEM < "tensely" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tense_a_1_rel",
            PHON.ONSET con ] ].

tension_n1 := n_intr_le &
 [ STEM < "tension" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tension_n_1_rel",
            PHON.ONSET con ] ].

tent_n1 := n_intr_le &
 [ STEM < "tent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tent_n_1_rel",
            PHON.ONSET con ] ].

tent_v1 := v_unerg_le &
 [ STEM < "tent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tent_v_1_rel",
            PHON.ONSET con ] ].

tentative_a1 := adj_intrans_le &
 [ STEM < "tentative" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tentative_a_1_rel",
            PHON.ONSET con ] ].

tentatively := adv_int_vp_le &
 [ STEM < "tentatively" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tentative_a_1_rel",
            PHON.ONSET con ] ].

tenth := adj_bare_unspecified_ord_two_le &
 [ STEM < "tenth" >,
   SYNSEM [ LKEYS.KEYREL.CARG "10",
            PHON.ONSET con ] ].

tenth_day := n_day_of_month_le &
 [ STEM < "tenth" >,
   SYNSEM [ LKEYS.KEYREL.CARG "10",
            PHON.ONSET con ] ].

tenth_day_num := n_day_of_month_le &
 [ STEM < "10th" >,
   SYNSEM [ LKEYS.KEYREL.CARG "10",
            PHON.ONSET con ] ].

tepid_isect := adj_intrans_le &
 [ STEM < "tepid" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tepid_a_1_rel",
            PHON.ONSET con ] ].

tepidly := adv_int_vp_le &
 [ STEM < "tepidly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tepid_a_1_rel",
            PHON.ONSET con ] ].

term_n1 := n_ppof_le &
 [ STEM < "term" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_term_n_of_rel",
            PHON.ONSET con ] ].

term_n2 := n_nomcomp_quote_le &
 [ STEM < "term" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_term_n_of_rel",
            PHON.ONSET con ] ].

term_v1 := v_ditrans_only_le &
 [ STEM < "term" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_term_v_1_rel",
            PHON.ONSET con ] ].

terminal_n1 := n_intr_le &
 [ STEM < "terminal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_terminal_n_1_rel",
            PHON.ONSET con ] ].

terminate_v1 := v_np_trans_noger_le &
 [ STEM < "terminate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_terminate_v_cause_rel",
            PHON.ONSET con ] ].

terminate_v2 := v_unacc_le &
 [ STEM < "terminate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_terminate_v_1_rel",
            PHON.ONSET con ] ].

termination_n1 := n_mass_count_ppof_le &
 [ STEM < "termination" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_termination_n_of_rel",
            PHON.ONSET con ] ].

terminus_n1 := n_ppof_le &
 [ STEM < "terminus" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_terminus_n_of_rel",
            PHON.ONSET con ] ].

termite_n1 := n_intr_le &
 [ STEM < "termite" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_termite_n_1_rel",
            PHON.ONSET con ] ].

terrace_n := n_intr_le &
 [ STEM < "terrace" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_terrace_n_1_rel",
            PHON.ONSET con ] ].

terraced_a1 := adj_intrans_le &
 [ STEM < "terraced" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_terraced_a_1_rel",
            PHON.ONSET con ] ].

terrain_n1 := n_mass_count_le &
 [ STEM < "terrain" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_terrain_n_1_rel",
            PHON.ONSET con ] ].

terrane_n1 := n_mass_count_le &
 [ STEM < "terrane" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_terrane_n_1_rel",
            PHON.ONSET con ] ].

terrence_n1 := n_proper_le &
 [ STEM < "terrence" >,
   SYNSEM [ LKEYS.KEYREL.CARG "terrence",
            PHON.ONSET con ] ].

terrible_a1 := adj_intrans_le &
 [ STEM < "terrible" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_terrible_a_1_rel",
            PHON.ONSET con ] ].

terribly := adv_int_vp_post_le &
 [ STEM < "terribly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_terrible_a_1_rel",
            PHON.ONSET con ] ].

terribly_deg := adv_degree_spec_v_le &
 [ STEM < "terribly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_terribly_x_deg_rel",
            PHON.ONSET con ] ].

terrific_a1 := adj_intrans_le &
 [ STEM < "terrific" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_terrific_a_1_rel",
            PHON.ONSET con ] ].

terrific_root_post := adv_s_post_word_nospec_le &
 [ STEM < "terrific" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_terrific_a_1_rel",
            PHON.ONSET con ] ].

terrific_root_pre := adv_s_pre_word_root_le &
 [ STEM < "terrific" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_terrific_a_1_rel",
            PHON.ONSET con ] ].

terrifically_pcisect := adv_int_vp_le &
 [ STEM < "terrifically" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_terrific_a_1_rel",
            PHON.ONSET con ] ].

terrify_v1 := v_np_trans_le &
 [ STEM < "terrify" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_terrify_v_1_rel",
            PHON.ONSET con ] ].

territory_n1 := n_mass_count_le &
 [ STEM < "territory" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_territory_n_1_rel",
            PHON.ONSET con ] ].

terror_n1 := n_mass_count_le &
 [ STEM < "terror" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_terror_n_1_rel",
            PHON.ONSET con ] ].

tesla_n1 := n_proper_le &
 [ STEM < "tesla" >,
   SYNSEM [ LKEYS.KEYREL.CARG "tesla",
            PHON.ONSET con ] ].

tessellated_a1 := adj_intrans_le &
 [ STEM < "tessellated" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tessellated_a_1_rel",
            PHON.ONSET con ] ].

test_n1 := n_ppof_le &
 [ STEM < "test" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_test_n_of_rel",
            PHON.ONSET con ] ].

test_v1 := v_np_trans_le &
 [ STEM < "test" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_test_v_1_rel",
            PHON.ONSET con ] ].

test_v2 := v_cp_non_trans_le &
 [ STEM < "test" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_test_v_1_rel",
            PHON.ONSET con ] ].

testament_n1 := n_mass_count_le &
 [ STEM < "testament" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_testament_n_1_rel",
            PHON.ONSET con ] ].

testamentary_a1 := adj_intrans_le &
 [ STEM < "testamentary" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_testamentary_a_1_rel",
            PHON.ONSET con ] ].

testicle_n1 := n_intr_le &
 [ STEM < "testicle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_testicle_n_1_rel",
            PHON.ONSET con ] ].

testify_to_v1 := v_empty_prep_intrans_le &
 [ STEM < "testify" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_testify_v_to_rel" ],
            PHON.ONSET con ] ].

testify_v1 := v_unerg_le &
 [ STEM < "testify" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_testify_v_1_rel",
            PHON.ONSET con ] ].

testify_v2 := v_cp_non_trans_le &
 [ STEM < "testify" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_testify_v_1_rel",
            PHON.ONSET con ] ].

testimony_n1 := n_mass_count_le &
 [ STEM < "testimony" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_testimony_n_1_rel",
            PHON.ONSET con ] ].

testis_n1 := n_intr_le &
 [ STEM < "testis" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_testis_n_1_rel",
            PHON.ONSET con ] ].

teutonic_a1 := adj_intrans_le &
 [ STEM < "teutonic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_teutonic_a_1_rel",
            PHON.ONSET con ] ].

texas_instruments_n1 := n_proper_le &
 [ STEM < "texas", "instruments" >,
   SYNSEM [ LKEYS.KEYREL.CARG "texas_instruments",
            PHON.ONSET con ] ].

texas_n1 := n_proper_le &
 [ STEM < "texas" >,
   SYNSEM [ LKEYS.KEYREL.CARG "texas",
            PHON.ONSET con ] ].

texas_n2 := n_proper_abb_le &
 [ STEM < "tx" >,
   SYNSEM [ LKEYS.KEYREL.CARG "texas",
            PHON.ONSET con ] ].

text_n1 := n_ppof_le &
 [ STEM < "text" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_text_n_of_rel",
            PHON.ONSET con ] ].

textile_n1 := n_mass_count_le &
 [ STEM < "textile" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_textile_n_1_rel",
            PHON.ONSET con ] ].

textual_a1 := adj_intrans_le &
 [ STEM < "textual" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_textual_a_1_rel",
            PHON.ONSET con ] ].

texture_n1 := n_mass_count_le &
 [ STEM < "texture" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_texture_n_1_rel",
            PHON.ONSET con ] ].

th_n1 := n_proper_le &
 [ STEM < "th." >,
   SYNSEM [ LKEYS.KEYREL.CARG "th",
            PHON.ONSET con ] ].

thai_a1 := adj_intrans_le &
 [ STEM < "thai" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_thai_a_1_rel",
            PHON.ONSET con ] ].

thai_n1 := n_proper_le &
 [ STEM < "thai" >,
   SYNSEM [ LKEYS.KEYREL.CARG "thai",
            PHON.ONSET con ] ].

thai_n2 := n_intr_le &
 [ STEM < "thai" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_thai_n_1_rel",
            PHON.ONSET con ] ].

thailand_n1 := n_proper_le &
 [ STEM < "thailand" >,
   SYNSEM [ LKEYS.KEYREL.CARG "thailand",
            PHON.ONSET con ] ].

thalassemia_n1 := n_mass_le &
 [ STEM < "thalassemia" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_thalassemia_n_1_rel",
            PHON.ONSET con ] ].

than_p1 := p_noslash_prtcl_le &
 [ STEM < "than" >,
   SYNSEM [ LKEYS.KEYREL.PRED _than_p_compar_rel,
            PHON.ONSET con ] ].

than_p1_nc := p_noslash_prtcl_ncomp_le &
 [ STEM < "than" >,
   SYNSEM [ LKEYS.KEYREL.PRED _than_p_compar_rel,
            PHON.ONSET con ] ].

than_p2 := p_than_le &
 [ STEM < "than" >,
   SYNSEM [ LKEYS.KEYREL.PRED _than_p_ind_rel,
            PHON.ONSET con ] ].

thank_v1 := v_np_trans_le &
 [ STEM < "thank" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_thank_v_1_rel",
            PHON.ONSET con ] ].

thank_you_for_v1 := v_empty_prep*_trans_imp_le &
 [ STEM < "thank" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_thank_v_for_rel" ],
            PHON.ONSET con ] ].

thankful_a1 := adj_trans_le &
 [ STEM < "thankful" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_thankful_a_for_rel" ],
            PHON.ONSET con ] ].

thankfully := adv_int_vp_le &
 [ STEM < "thankfully" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_thankful_a_for_rel",
            PHON.ONSET con ] ].

thanks_abb_root_post := adv_s_post_word_nospec_le &
 [ STEM < "thx" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_thanks_a_1_rel",
            PHON.ONSET con ] ].

thanks_abb_root_pre := adv_s_pre_word_root_le &
 [ STEM < "thx" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_thanks_a_1_rel",
            PHON.ONSET con ] ].

thanks_abb_v1 := v_unerg_imp_le &
 [ STEM < "thx" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_thank_v_1_rel",
            PHON.ONSET con ] ].

thanks_much_v1 := v_unerg_imp_le &
 [ STEM < "thanks", "much" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_thank_v_1_rel",
            PHON.ONSET con ] ].

thanks_n1 := n_plur_nocmpnd_le &
 [ STEM < "thank" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_thanks_n_1_rel",
            PHON.ONSET con ] ].

thanks_root_post := adv_s_post_word_nospec_le &
 [ STEM < "thanks" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_thanks_a_1_rel",
            PHON.ONSET con ] ].

thanks_root_pre := adv_s_pre_word_root_le &
 [ STEM < "thanks" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_thanks_a_1_rel",
            PHON.ONSET con ] ].

thanks_so_much_excl_post := adv_s_post_word_nospec_le &
 [ STEM < "thanks", "so", "much" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_thanks+so+much_a_1_rel",
            PHON.ONSET con ] ].

thanks_so_much_excl_pre := adv_s_pre_word_root_le &
 [ STEM < "thanks", "so", "much" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_thanks+so+much_a_1_rel",
            PHON.ONSET con ] ].

thanks_to_p := p_le &
 [ STEM < "thanks", "to" >,
   SYNSEM [ LKEYS.KEYREL.PRED _thanks+to_p_rel,
            PHON.ONSET con ] ].

thanks_v1 := v_unerg_imp_le &
 [ STEM < "thanks" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_thank_v_1_rel",
            PHON.ONSET con ] ].

thanksgiving_n1 := n_holiday_le &
 [ STEM < "thanksgiving" >,
   SYNSEM [ LKEYS.KEYREL.CARG "thanksgiving",
            PHON.ONSET con ] ].

thanksgiving_n2 := n_season_div_le &
 [ STEM < "thanksgiving" >,
   SYNSEM [ LKEYS.KEYREL.CARG "thanksgiving",
            PHON.ONSET con ] ].

thanksgiving_n3 := n_season_wspec_le &
 [ STEM < "thanksgiving" >,
   SYNSEM [ LKEYS.KEYREL.CARG "thanksgiving",
            PHON.ONSET con ] ].

that_c := comp_that_le &
 [ STEM < "that" >,
   SYNSEM.PHON.ONSET con ].

that_c_subj := comp_that_subj_le &
 [ STEM < "that" >,
   SYNSEM.PHON.ONSET con ].

that_deg := adv_degree_spec_tt_le &
 [ STEM < "that" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_that_x_deg_rel",
            PHON.ONSET con ] ].

that_deix := n_deictic_pro_sg_le &
 [ STEM < "that" >,
   SYNSEM [ LKEYS.ALTKEYREL.PRED _that_q_dem_rel,
            PHON.ONSET con ] ].

that_det := det_sm_le &
 [ STEM < "that" >,
   SYNSEM [ LKEYS.KEYREL.PRED _that_q_dem_rel,
            PHON.ONSET con ] ].

that_is_root_post := adv_s_post_word_nospec_le &
 [ STEM < "that", "is" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_that+is_a_1_rel",
            PHON.ONSET con ] ].

that_is_root_pre := adv_s_pre_word_root_le &
 [ STEM < "that", "is" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_that+is_a_1_rel",
            PHON.ONSET con ] ].

that_r := n_rel_pro_nonwh_le &
 [ STEM < "that" >,
   SYNSEM.PHON.ONSET con ].

that_r_npadv := n_rel_pro_npadv_le &
 [ STEM < "that" >,
   SYNSEM.PHON.ONSET con ].

thatch_n1 := n_mass_le &
 [ STEM < "thatch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_thatch_n_1_rel",
            PHON.ONSET con ] ].

thatch_v1 := v_np_trans_le &
 [ STEM < "thatch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_thatch_v_1_rel",
            PHON.ONSET con ] ].

thats_right_pre_root := adv_disc_like_preh_le &
 [ STEM < "that", "'s", "right" >,
   SYNSEM [ LKEYS.KEYREL.CARG "thats_right",
            PHON.ONSET con ] ].

the-hairy-ape_n1 := n_proper_le &
 [ STEM < "the", "hairy", "ape" >,
   SYNSEM [ LKEYS.KEYREL.CARG "the-hairy-ape",
            PHON.ONSET con ] ].

the_1 := det_the_le &
 [ STEM < "the" >,
   SYNSEM [ LKEYS.KEYREL.PRED _the_q_rel,
            PHON.ONSET con ] ].

the_bastille_n1 := n_proper_le &
 [ STEM < "the", "bastille" >,
   SYNSEM [ LKEYS.KEYREL.CARG "the_bastille",
            PHON.ONSET con ] ].

the_best_adv1 := adv_int_vp_post_le &
 [ STEM < "the", "best" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_best_a_1_rel",
            PHON.ONSET con ] ].

the_fuck_wh_adv := wh_the_hell_le &
 [ STEM < "the", "fuck" >,
   SYNSEM [ LKEYS.KEYREL.PRED _the+fuck_x_rel,
            PHON.ONSET con ] ].

the_heck_wh_adv := wh_the_hell_le &
 [ STEM < "the", "heck" >,
   SYNSEM [ LKEYS.KEYREL.PRED _the+heck_x_rel,
            PHON.ONSET con ] ].

the_hell_wh_adv := wh_the_hell_le &
 [ STEM < "the", "hell" >,
   SYNSEM [ LKEYS.KEYREL.PRED _the+hell_x_rel,
            PHON.ONSET con ] ].

the_least_adv1 := adv_int_vp_post_nonmob_le &
 [ STEM < "the", "least" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_least_a_1_rel",
            PHON.ONSET con ] ].

the_like := n_generic_pro_le &
 [ STEM < "the", "like" >,
   SYNSEM [ LKEYS [ ALTKEYREL.PRED _the_q_rel,
                    KEYREL.PRED "_like_n_1_rel" ],
            PHON.ONSET con ] ].

the_matterhorn_n1 := n_proper_le &
 [ STEM < "the", "matterhorn" >,
   SYNSEM [ LKEYS.KEYREL.CARG "the_matterhorn",
            PHON.ONSET con ] ].

the_most_adv1 := adv_int_vp_post_nonmob_le &
 [ STEM < "the", "most" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_most_a_1_rel",
            PHON.ONSET con ] ].

the_most_det := det_part_pl_mass_le &
 [ STEM < "the", "most" >,
   SYNSEM [ LKEYS.KEYREL.PRED _the+most_q_rel,
            PHON.ONSET con ] ].

the_philippines_n1 := n_proper_le &
 [ STEM < "the", "philippines" >,
   SYNSEM [ LKEYS.KEYREL.CARG "the_philippines",
            PHON.ONSET con ] ].

the_plo_n1 := n_proper_le &
 [ STEM < "the", "plo" >,
   SYNSEM [ LKEYS.KEYREL.CARG "the_plo",
            PHON.ONSET con ] ].

the_same_a1 := adj_pred_nodpct_le &
 [ STEM < "the", "same" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_the+same_a_1_rel",
            PHON.ONSET con ] ].

the_same_adv1 := adv_int_vp_post_le &
 [ STEM < "the", "same" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_the+same_a_1_rel",
            PHON.ONSET con ] ].

the_same_det := det_the_same_le &
 [ STEM < "the", "same" >,
   SYNSEM [ LKEYS.KEYREL.PRED _the+same_q_as_rel,
            PHON.ONSET con ] ].

the_soviet_union_n1 := n_proper_le &
 [ STEM < "the", "soviet", "union" >,
   SYNSEM [ LKEYS.KEYREL.CARG "the_soviet_union",
            PHON.ONSET con ] ].

theater_n1 := n_mass_count_le &
 [ STEM < "theater" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_theater_n_1_rel",
            PHON.ONSET con ] ].

theatrical_a1 := adj_intrans_le &
 [ STEM < "theatrical" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_theatrical_a_1_rel",
            PHON.ONSET con ] ].

thee := n_pers_pro_thee_le &
 [ STEM < "thee" >,
   SYNSEM.PHON.ONSET con ].

their := det_poss_their_le &
 [ STEM < "their" >,
   SYNSEM.PHON.ONSET con ].

theirs := n_poss_pro_theirs_le &
 [ STEM < "theirs" >,
   SYNSEM.PHON.ONSET con ].

theirs_nq := det_poss_nospec_theirs_le &
 [ STEM < "theirs" >,
   SYNSEM.PHON.ONSET con ].

them := n_pers_pro_them_le &
 [ STEM < "them" >,
   SYNSEM.PHON.ONSET con ].

theme_n1 := n_ppof_le &
 [ STEM < "theme" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_theme_n_of_rel",
            PHON.ONSET con ] ].

themselves := n_refl_pro_themselves_le &
 [ STEM < "themselves" >,
   SYNSEM.PHON.ONSET con ].

themselves_adv := adv_refl_pro_themselves_le &
 [ STEM < "themselves" >,
   SYNSEM.PHON.ONSET con ].

then_adv := n_adv_nospr_le &
 [ STEM < "then" >,
   SYNSEM [ LKEYS.ALT2KEYREL.PRED _then_p_temp_rel,
            PHON.ONSET con ] ].

then_adv2 := adv_int_vp_aux_le &
 [ STEM < "then" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_then_a_1_rel",
            PHON.ONSET con ] ].

then_adv3 := adv_s_pre_le &
 [ STEM < "then" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_then_a_1_rel",
            PHON.ONSET con ] ].

then_conj_1 := conj_complex_then_le &
 [ STEM < "then" >,
   SYNSEM.PHON.ONSET con ].

then_conj_2 := conj_complex_then_first_le &
 [ STEM < "then" >,
   SYNSEM.PHON.ONSET con ].

then_disc_post := adv_s_post_word_nospec_le &
 [ STEM < "then" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_then_a_1_rel",
            PHON.ONSET con ] ].

thence_adv := adv_int_vp_le &
 [ STEM < "thence" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_thence_a_1_rel",
            PHON.ONSET con ] ].

theodore_n1 := n_proper_le &
 [ STEM < "theodore" >,
   SYNSEM [ LKEYS.KEYREL.CARG "theodore",
            PHON.ONSET con ] ].

theology_n1 := n_mass_le &
 [ STEM < "theology" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_theology_n_1_rel",
            PHON.ONSET con ] ].

theoretical_a1 := adj_intrans_le &
 [ STEM < "theoretical" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_theoretical_a_1_rel",
            PHON.ONSET con ] ].

theoretically_adv1 := adv_int_vp_le &
 [ STEM < "theoretically" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_theoretical_a_1_rel",
            PHON.ONSET con ] ].

theory_n1 := n_ppof_le &
 [ STEM < "theory" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_theory_n_of_rel",
            PHON.ONSET con ] ].

there_expl := n_expl_there_le &
 [ STEM < "there" >,
   SYNSEM.PHON.ONSET con ].

there_nom := n_adv_acc_le &
 [ STEM < "there" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED _there_a_1_rel,
                    KEYREL.PRED place_n_rel ],
            PHON.ONSET con ] ].

thereabouts_adv1 := pp_le &
 [ STEM < "thereabouts" >,
   SYNSEM [ LKEYS.KEYREL.PRED _thereabouts_p_rel,
            PHON.ONSET con ] ].

thereafter_isect := adv_int_vp_le &
 [ STEM < "thereafter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_thereafter_a_1_rel",
            PHON.ONSET con ] ].

thereby_adv1 := adv_vp_pre_le &
 [ STEM < "thereby" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_thereby_a_1_rel",
            PHON.ONSET con ] ].

thereby_adv2 := adv_s_pre_le &
 [ STEM < "thereby" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_thereby_a_1_rel",
            PHON.ONSET con ] ].

therefore_adv1 := adv_vp_aux_le &
 [ STEM < "therefore" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_therefore_a_1_rel",
            PHON.ONSET con ] ].

therefore_adv2 := adv_vp_post_le &
 [ STEM < "therefore" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_therefore_a_1_rel",
            PHON.ONSET con ] ].

therefore_root_post := adv_s_post_word_nospec_le &
 [ STEM < "therefore" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_therefore_a_1_rel",
            PHON.ONSET con ] ].

therefore_root_pre := adv_s_pre_word_nospec_le &
 [ STEM < "therefore" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_therefore_a_1_rel",
            PHON.ONSET con ] ].

therefore_subord := p_subconj_le &
 [ STEM < "therefore" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_therefore_x_rel",
            PHON.ONSET con ] ].

thereof_adv1 := pp_le &
 [ STEM < "thereof" >,
   SYNSEM [ LKEYS.KEYREL.PRED _thereof_p_rel,
            PHON.ONSET con ] ].

theresa_n1 := n_proper_le &
 [ STEM < "theresa" >,
   SYNSEM [ LKEYS.KEYREL.CARG "theresa",
            PHON.ONSET con ] ].

therese_n1 := n_proper_le &
 [ STEM < "therese" >,
   SYNSEM [ LKEYS.KEYREL.CARG "therese",
            PHON.ONSET con ] ].

therewith_adv1 := pp_le &
 [ STEM < "therewith" >,
   SYNSEM [ LKEYS.KEYREL.PRED _therewith_p_rel,
            PHON.ONSET con ] ].

thermal_a1 := adj_intrans_le &
 [ STEM < "thermal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_thermal_a_1_rel",
            PHON.ONSET con ] ].

thermometer_n1 := n_intr_le &
 [ STEM < "thermometer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_thermometer_n_1_rel",
            PHON.ONSET con ] ].

thermophilic_a1 := adj_intrans_le &
 [ STEM < "thermophilic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_thermophilic_a_1_rel",
            PHON.ONSET con ] ].

thermos_n1 := n_intr_le &
 [ STEM < "thermos" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_thermos_n_1_rel",
            PHON.ONSET con ] ].

these_deix := n_deictic_pro_pl_le &
 [ STEM < "these" >,
   SYNSEM [ LKEYS.ALTKEYREL.PRED _these_q_dem_rel,
            PHON.ONSET con ] ].

these_det := det_pl_le &
 [ STEM < "these" >,
   SYNSEM [ LKEYS.KEYREL.PRED _these_q_dem_rel,
            PHON.ONSET con ] ].

thesis_n1 := n_intr_le &
 [ STEM < "thesis" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_thesis_n_1_rel",
            PHON.ONSET con ] ].

they := n_pers_pro_they_le &
 [ STEM < "they" >,
   SYNSEM.PHON.ONSET con ].

they_sg := n_pers_pro_noagr_le &
 [ STEM < "they" >,
   SYNSEM.PHON.ONSET con ].

thick_a1 := adj_intrans_le &
 [ STEM < "thick" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_thick_a_1_rel",
            PHON.ONSET con ] ].

thicken_v1 := v_unacc_le &
 [ STEM < "thicken" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_thicken_v_1_rel",
            PHON.ONSET con ] ].

thicken_v2 := v_np_trans_noger_le &
 [ STEM < "thicken" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_thicken_v_cause_rel",
            PHON.ONSET con ] ].

thicker := adj_comp_le &
 [ STEM < "thicker" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_thick_a_1_rel",
            PHON.ONSET con ] ].

thickest_a1 := adj_superl_le &
 [ STEM < "thickest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_thick_a_1_rel",
            PHON.ONSET con ] ].

thicket_n1 := n_intr_le &
 [ STEM < "thicket" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_thicket_n_1_rel",
            PHON.ONSET con ] ].

thickly := adv_int_vp_le &
 [ STEM < "thickly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_thick_a_1_rel",
            PHON.ONSET con ] ].

thickness_n1 := n_mass_count_le &
 [ STEM < "thickness" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_thickness_n_1_rel",
            PHON.ONSET con ] ].

thief_n1 := n_intr_le &
 [ STEM < "thief" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_thief_n_1_rel",
            PHON.ONSET con ] ].

thieve_v1 := v_unerg_le &
 [ STEM < "thieve" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_thieve_v_1_rel",
            PHON.ONSET con ] ].

thigh_n1 := n_intr_le &
 [ STEM < "thigh" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_thigh_n_1_rel",
            PHON.ONSET con ] ].

thilo_n1 := n_proper_le &
 [ STEM < "thilo" >,
   SYNSEM [ LKEYS.KEYREL.CARG "thilo",
            PHON.ONSET con ] ].

thin_a1 := adj_intrans_le &
 [ STEM < "thin" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_thin_a_1_rel",
            PHON.ONSET con ] ].

thin_skinned_a1 := adj_intrans_le &
 [ STEM < "thin-", "skinned" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_thin-skinned_a_1_rel",
            PHON.ONSET con ] ].

thin_v1 := v_np*_trans_le &
 [ STEM < "thin" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_thin_v_1_rel",
            PHON.ONSET con ] ].

thine := n_poss_pro_yours_le &
 [ STEM < "thine" >,
   SYNSEM.PHON.ONSET con ].

thine_nq := det_poss_nospec_yours_le &
 [ STEM < "thine" >,
   SYNSEM.PHON.ONSET con ].

thing_n1 := n_ppof_nosort_le &
 [ STEM < "thing" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_thing_n_of-about_rel",
            PHON.ONSET con ] ].

thing_n2 := n_ppcomp_oblig_le &
 [ STEM < "thing" >,
   SYNSEM [ LKEYS [ --COMPKEY _about_p_sel_rel,
                    KEYREL.PRED "_thing_n_of-about_rel" ],
            PHON.ONSET con ] ].

think1 := v_cp_prop_non_trans_le &
 [ STEM < "think" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_think_v_1_rel",
            PHON.ONSET con ] ].

think2 := v_prep_intrans_event_le &
 [ STEM < "think" >,
   SYNSEM [ LKEYS [ --COMPKEY loc_abstr_rel,
                    KEYREL.PRED "_think_v_loc_rel" ],
            PHON.ONSET con ] ].

think_about := v_empty_prep_trans*_le &
 [ STEM < "think" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _about_p_sel_rel,
                    KEYREL.PRED "_think_v_about_rel" ],
            PHON.ONSET con ] ].

think_of := v_empty_prep_trans*_le &
 [ STEM < "think" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_think_v_of_rel" ],
            PHON.ONSET con ] ].

think_quote_v1 := v_quote_top_le &
 [ STEM < "think" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_think_v_1_rel",
            PHON.ONSET con ] ].

think_quote_v2 := v_quote_inv_le &
 [ STEM < "think" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_think_v_1_rel",
            PHON.ONSET con ] ].

think_quote_v3 := v_quote_mc_le &
 [ STEM < "think" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_think_v_1_rel",
            PHON.ONSET con ] ].

think_through_v1 := v_particle_np_le &
 [ STEM < "think" >,
   SYNSEM [ LKEYS [ --COMPKEY _through_p_sel_rel,
                    KEYREL.PRED "_think_v_through_rel" ],
            PHON.ONSET con ] ].

think_up_v1 := v_particle_np_le &
 [ STEM < "think" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_think_v_up_rel" ],
            PHON.ONSET con ] ].

think_v3 := v_np*_non_trans_le &
 [ STEM < "think" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_think_v_1_rel",
            PHON.ONSET con ] ].

thinker_n1 := n_intr_le &
 [ STEM < "thinker" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_thinker_n_1_rel",
            PHON.ONSET con ] ].

thinkpad_n1 := n_intr_le &
 [ STEM < "thinkpad" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_thinkpad_n_1_rel",
            PHON.ONSET con ] ].

thinner := adj_comp_le &
 [ STEM < "thinner" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_thin_a_1_rel",
            PHON.ONSET con ] ].

thinnest_a1 := adj_superl_le &
 [ STEM < "thinnest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_thin_a_1_rel",
            PHON.ONSET con ] ].

third := adj_bare_unspecified_ord_one_le &
 [ STEM < "third" >,
   SYNSEM [ LKEYS.KEYREL.CARG "3",
            PHON.ONSET con ] ].

third_day := n_day_of_month_le &
 [ STEM < "third" >,
   SYNSEM [ LKEYS.KEYREL.CARG "3",
            PHON.ONSET con ] ].

third_day_num := n_day_of_month_le &
 [ STEM < "3rd" >,
   SYNSEM [ LKEYS.KEYREL.CARG "3",
            PHON.ONSET con ] ].

third_day_num_2 := n_day_of_month_le &
 [ STEM < "3d" >,
   SYNSEM [ LKEYS.KEYREL.CARG "3",
            PHON.ONSET con ] ].

third_n1 := n_ppof_nocmpnd_le &
 [ STEM < "third" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_third_n_of_rel",
            PHON.ONSET con ] ].

thirdly_adv1 := adv_int_vp_le &
 [ STEM < "thirdly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_thirdly_a_1_rel",
            PHON.ONSET con ] ].

thirst_n1 := n_mass_ppcomp_le &
 [ STEM < "thirst" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_thirst_n_for_rel" ],
            PHON.ONSET con ] ].

thirteen := adj_bare_unspecified_card_two_le &
 [ STEM < "thirteen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "13",
            PHON.ONSET con ] ].

thirteen_day := n_day_of_month_card_le &
 [ STEM < "thirteen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "13",
            PHON.ONSET con ] ].

thirteen_day_num := n_day_of_month_card_le &
 [ STEM < "13" >,
   SYNSEM [ LKEYS.KEYREL.CARG "13",
            PHON.ONSET con ] ].

thirteen_day_num_yofc := n_day_of_month_card_yofc_le &
 [ STEM < "13" >,
   SYNSEM [ LKEYS.KEYREL.CARG "13",
            PHON.ONSET con ] ].

thirteen_day_yofc := n_day_of_month_card_yofc_le &
 [ STEM < "thirteen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "13",
            PHON.ONSET con ] ].

thirteenplusdigitersatz := adj_bare_unspecified_ord_twelve_le &
 [ STEM < "thirteenplusdigitersatz" >,
   SYNSEM [ LKEYS.KEYREL [ CARG "dig13ersatz",
                             PRED const_rel ],
            PHON.ONSET onset ] ].

thirteenth := adj_bare_unspecified_ord_two_le &
 [ STEM < "thirteenth" >,
   SYNSEM [ LKEYS.KEYREL.CARG "13",
            PHON.ONSET con ] ].

thirteenth_day := n_day_of_month_le &
 [ STEM < "thirteenth" >,
   SYNSEM [ LKEYS.KEYREL.CARG "13",
            PHON.ONSET con ] ].

thirteenth_day_num := n_day_of_month_le &
 [ STEM < "13th" >,
   SYNSEM [ LKEYS.KEYREL.CARG "13",
            PHON.ONSET con ] ].

thirties_n1 := n_plur_xmod_le &
 [ STEM < "thirties" >,
   SYNSEM [ LKEYS.KEYREL.CARG "30",
            PHON.ONSET con ] ].

thirtieth := adj_bare_unspecified_ord_two_le &
 [ STEM < "thirtieth" >,
   SYNSEM [ LKEYS.KEYREL.CARG "30",
            PHON.ONSET con ] ].

thirtieth_day := n_day_of_month_le &
 [ STEM < "thirtieth" >,
   SYNSEM [ LKEYS.KEYREL.CARG "30",
            PHON.ONSET con ] ].

thirtieth_day_num := n_day_of_month_le &
 [ STEM < "30th" >,
   SYNSEM [ LKEYS.KEYREL.CARG "30",
            PHON.ONSET con ] ].

thirty := adj_bare_unspecified_card_two_le &
 [ STEM < "thirty" >,
   SYNSEM [ LKEYS.KEYREL.CARG "30",
            PHON.ONSET con ] ].

thirty_day := n_day_of_month_card_le &
 [ STEM < "thirty" >,
   SYNSEM [ LKEYS.KEYREL.CARG "30",
            PHON.ONSET con ] ].

thirty_day_num := n_day_of_month_card_le &
 [ STEM < "30" >,
   SYNSEM [ LKEYS.KEYREL.CARG "30",
            PHON.ONSET con ] ].

thirty_day_num_yofc := n_day_of_month_card_yofc_le &
 [ STEM < "30" >,
   SYNSEM [ LKEYS.KEYREL.CARG "30",
            PHON.ONSET con ] ].

thirty_day_yofc := n_day_of_month_card_yofc_le &
 [ STEM < "thirty" >,
   SYNSEM [ LKEYS.KEYREL.CARG "30",
            PHON.ONSET con ] ].

thirty_first_day_num := n_day_of_month_le &
 [ STEM < "31st" >,
   SYNSEM [ LKEYS.KEYREL.CARG "31",
            PHON.ONSET con ] ].

thirty_one_day := n_day_of_month_card_le &
 [ STEM < "thirty", "one" >,
   SYNSEM [ LKEYS.KEYREL.CARG "31",
            PHON.ONSET con ] ].

thirty_one_day_num := n_day_of_month_card_le &
 [ STEM < "31" >,
   SYNSEM [ LKEYS.KEYREL.CARG "31",
            PHON.ONSET con ] ].

thirty_one_day_num_yofc := n_day_of_month_card_yofc_le &
 [ STEM < "31" >,
   SYNSEM [ LKEYS.KEYREL.CARG "31",
            PHON.ONSET con ] ].

thirty_one_day_yofc := n_day_of_month_card_yofc_le &
 [ STEM < "thirty", "one" >,
   SYNSEM [ LKEYS.KEYREL.CARG "31",
            PHON.ONSET con ] ].

thirty_w_comps := adj_complemented_unspecified_card_le &
 [ STEM < "thirty" >,
   SYNSEM [ LKEYS.KEYREL.CARG "30",
            PHON.ONSET con ] ].

thirtyfirst_day := n_day_of_month_le &
 [ STEM < "thirty", "first" >,
   SYNSEM [ LKEYS.KEYREL.CARG "31",
            PHON.ONSET con ] ].

thirtyish_approx := adj_approx_bare_unspecified_card_le &
 [ STEM < "thirtyish" >,
   SYNSEM [ LKEYS.KEYREL.CARG "30",
            PHON.ONSET con ] ].

this_deg := adv_degree_spec_tt_le &
 [ STEM < "this" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_this_x_deg_rel",
            PHON.ONSET con ] ].

this_deix := n_deictic_pro_sg_le &
 [ STEM < "this" >,
   SYNSEM [ LKEYS.ALTKEYREL.PRED _this_q_dem_rel,
            PHON.ONSET con ] ].

this_det := det_sm_le &
 [ STEM < "this" >,
   SYNSEM [ LKEYS.KEYREL.PRED _this_q_dem_rel,
            PHON.ONSET con ] ].

thistle_n1 := n_intr_le &
 [ STEM < "thistle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_thistle_n_1_rel",
            PHON.ONSET con ] ].

thither_adv1 := pp_dir_le &
 [ STEM < "thither" >,
   SYNSEM [ LKEYS.KEYREL.PRED _thither_p_rel,
            PHON.ONSET con ] ].

thither_nom := n_adv_acc_le &
 [ STEM < "thither" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED _thither_a_1_rel,
                    KEYREL.PRED place_n_rel ],
            PHON.ONSET con ] ].

thitherward_adv1 := pp_le &
 [ STEM < "thitherward" >,
   SYNSEM [ LKEYS.KEYREL.PRED _thitherward_p_rel,
            PHON.ONSET con ] ].

thomas_n1 := n_proper_le &
 [ STEM < "thomas" >,
   SYNSEM [ LKEYS.KEYREL.CARG "thomas",
            PHON.ONSET con ] ].

thompson := n_proper_le &
 [ STEM < "thompson" >,
   SYNSEM [ LKEYS.KEYREL.CARG "thompson",
            PHON.ONSET con ] ].

thon_n1 := n_proper_le &
 [ STEM < "thon" >,
   SYNSEM [ LKEYS.KEYREL.CARG "thon",
            PHON.ONSET con ] ].

thong_n1 := n_intr_le &
 [ STEM < "thong" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_thong_n_1_rel",
            PHON.ONSET con ] ].

thor := n_proper_le &
 [ STEM < "thor" >,
   SYNSEM [ LKEYS.KEYREL.CARG "thor",
            PHON.ONSET con ] ].

thorax_n1 := n_intr_le &
 [ STEM < "thorax" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_thorax_n_1_rel",
            PHON.ONSET con ] ].

thorn_n1 := n_mass_count_le &
 [ STEM < "thorn" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_thorn_n_1_rel",
            PHON.ONSET con ] ].

thorough_a1 := adj_intrans_le &
 [ STEM < "thorough" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_thorough_a_1_rel",
            PHON.ONSET con ] ].

thoroughfare_n1 := n_intr_le &
 [ STEM < "thoroughfare" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_thoroughfare_n_1_rel",
            PHON.ONSET con ] ].

thoroughly_adv1 := adv_int_vp_le &
 [ STEM < "thoroughly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_thorough_a_1_rel",
            PHON.ONSET con ] ].

those_deix := n_deictic_pro_pl_le &
 [ STEM < "those" >,
   SYNSEM [ LKEYS.ALTKEYREL.PRED _those_q_dem_rel,
            PHON.ONSET con ] ].

those_det := det_pl_le &
 [ STEM < "those" >,
   SYNSEM [ LKEYS.KEYREL.PRED _those_q_dem_rel,
            PHON.ONSET con ] ].

thou := n_pers_pro_thou_le &
 [ STEM < "thou" >,
   SYNSEM.PHON.ONSET con ].

though := adv_int_vp_post_le &
 [ STEM < "though" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_though_a_1_rel",
            PHON.ONSET con ] ].

though_prd := p_subconj_prd_le &
 [ STEM < "though" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_though_x_rel",
            PHON.ONSET con ] ].

though_root_post := adv_disc_like_posth_le &
 [ STEM < "though" >,
   SYNSEM [ LKEYS.KEYREL.CARG "though",
            PHON.ONSET con ] ].

though_root_pre := adv_disc_like_preh_le &
 [ STEM < "though" >,
   SYNSEM [ LKEYS.KEYREL.CARG "though",
            PHON.ONSET con ] ].

though_subord := p_subconj_le &
 [ STEM < "though" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_though_x_rel",
            PHON.ONSET con ] ].

thought_n1 := n_mass_count_ppof_le &
 [ STEM < "thought" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_thought_n_of_rel",
            PHON.ONSET con ] ].

thought_n2 := n_cpcomp_fin_le &
 [ STEM < "thought" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_thought_n_of_rel",
            PHON.ONSET con ] ].

thoughtless_a1 := adj_intrans_le &
 [ STEM < "thoughtless" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_thoughtless_a_1_rel",
            PHON.ONSET con ] ].

thousand := adj_bare_specified_card_thousand_le &
 [ STEM < "thousand" >,
   SYNSEM [ LKEYS.KEYREL.CARG "1000",
            PHON.ONSET con ] ].

thousand_comps := adj_complemented_specified_card_thousand_le &
 [ STEM < "thousand" >,
   SYNSEM [ LKEYS.KEYREL.CARG "1000",
            PHON.ONSET con ] ].

thousander_n1 := n_intr_le &
 [ STEM < "thousander" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_thousander_n_1_rel",
            PHON.ONSET con ] ].

thousands_n1 := n_plur_xmod_le &
 [ STEM < "thousands" >,
   SYNSEM [ LKEYS.KEYREL.CARG "1000",
            PHON.ONSET con ] ].

thousands_n2 := n_plur_ppcomp_card_le &
 [ STEM < "thousands" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.CARG "1000" ],
            PHON.ONSET con ] ].

thousandth := adj_bare_specified_ord_thousand_le &
 [ STEM < "thousandth" >,
   SYNSEM [ LKEYS.KEYREL.CARG "1000",
            PHON.ONSET con ] ].

thread_n1 := n_ppof_le &
 [ STEM < "thread" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_thread_n_of_rel",
            PHON.ONSET con ] ].

threadlike_a1 := adj_intrans_le &
 [ STEM < "threadlike" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_threadlike_a_1_rel",
            PHON.ONSET con ] ].

threat_n1 := n_intr_le &
 [ STEM < "threat" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_threat_n_1_rel",
            PHON.ONSET con ] ].

threaten_v1 := v_np*_trans_le &
 [ STEM < "threaten" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_threaten_v_1_rel",
            PHON.ONSET con ] ].

threaten_v2 := v_subj_equi_le &
 [ STEM < "threaten" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_threaten_v_1_rel",
            PHON.ONSET con ] ].

threaten_with_v1 := v_empty_prep_trans_le &
 [ STEM < "threaten" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_threaten_v_with_rel" ],
            PHON.ONSET con ] ].

threateningly := adv_int_vp_le &
 [ STEM < "threateningly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_threatening_a_1_rel",
            PHON.ONSET con ] ].

three := adj_bare_unspecified_card_one_le &
 [ STEM < "three" >,
   SYNSEM [ LKEYS.KEYREL.CARG "3",
            PHON.ONSET con ] ].

three_c := adj_bare_unspecified_card_wcomps_one_le &
 [ STEM < "three" >,
   SYNSEM [ LKEYS.KEYREL.CARG "3",
            PHON.ONSET con ] ].

three_d_cinema := n_intr_le &
 [ STEM < "three", "d", "cinema" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_three+d+cinema_n_1_rel",
            PHON.ONSET con ] ].

three_day := n_day_of_month_card_le &
 [ STEM < "three" >,
   SYNSEM [ LKEYS.KEYREL.CARG "3",
            PHON.ONSET con ] ].

three_day_num := n_day_of_month_card_le &
 [ STEM < "3" >,
   SYNSEM [ LKEYS.KEYREL.CARG "3",
            PHON.ONSET con ] ].

three_day_num_yofc := n_day_of_month_card_yofc_le &
 [ STEM < "3" >,
   SYNSEM [ LKEYS.KEYREL.CARG "3",
            PHON.ONSET con ] ].

three_day_yofc := n_day_of_month_card_yofc_le &
 [ STEM < "three" >,
   SYNSEM [ LKEYS.KEYREL.CARG "3",
            PHON.ONSET con ] ].

three_dimensional_a1 := adj_intrans_le &
 [ STEM < "three", "dimensional" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_three-dimensional_a_1_rel",
            PHON.ONSET con ] ].

three_dimensional_a2 := adj_intrans_le &
 [ STEM < "three-", "dimensional" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_three-dimensional_a_1_rel",
            PHON.ONSET con ] ].

three_hour := n_hour_le &
 [ STEM < "three" >,
   SYNSEM [ LKEYS.KEYREL.CARG "3",
            PHON.ONSET con ] ].

three_hundreds_n1 := n_plur_xmod_le &
 [ STEM < "three", "hundreds" >,
   SYNSEM [ LKEYS.KEYREL.CARG "300",
            PHON.ONSET con ] ].

three_roman := adj_bare_unspecified_card_one_le &
 [ STEM < "III" >,
   SYNSEM [ LKEYS.KEYREL.CARG "III",
            PHON.ONSET con ] ].

threedigit_plur_n1 := n_plur_xmod_le &
 [ STEM < "threedigitersatz", "'s" >,
   SYNSEM [ LKEYS.KEYREL.CARG "threedigit_plur",
            PHON.ONSET onset ] ].

threedigitordersatz := adj_bare_unspecified_ord_three_le &
 [ STEM < "threedigitordersatz" >,
   SYNSEM [ LKEYS.KEYREL [ CARG "dig3ersatz",
                             PRED const_rel ],
            PHON.ONSET onset ] ].

threedigitplur_n1 := n_plur_xmod_le &
 [ STEM < "threedigitersatz", "s" >,
   SYNSEM [ LKEYS.KEYREL.CARG "3digit",
            PHON.ONSET con ] ].

threeish := n_approx_hour_le &
 [ STEM < "threeish" >,
   SYNSEM [ LKEYS.KEYREL.CARG "3",
            PHON.ONSET con ] ].

threescore := adj_bare_unspecified_card_two_le &
 [ STEM < "threescore" >,
   SYNSEM [ LKEYS.KEYREL.CARG "60",
            PHON.ONSET con ] ].

thrill_n1 := n_intr_le &
 [ STEM < "thrill" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_thrill_n_1_rel",
            PHON.ONSET con ] ].

thrill_v1 := v_np*_trans_le &
 [ STEM < "thrill" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_thrill_v_1_rel",
            PHON.ONSET con ] ].

thriller_n1 := n_intr_le &
 [ STEM < "thriller" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_thriller_n_1_rel",
            PHON.ONSET con ] ].

thrive_on_v1 := v_empty_prep_intrans_le &
 [ STEM < "thrive" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_thrive_v_on_rel" ],
            PHON.ONSET con ] ].

thrive_v1 := v_unerg_le &
 [ STEM < "thrive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_thrive_v_1_rel",
            PHON.ONSET con ] ].

throat_n1 := n_intr_le &
 [ STEM < "throat" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_throat_n_1_rel",
            PHON.ONSET con ] ].

throb_n1 := n_intr_le &
 [ STEM < "throb" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_throb_n_1_rel",
            PHON.ONSET con ] ].

throb_v1 := v_unacc_le &
 [ STEM < "throb" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_throb_v_1_rel",
            PHON.ONSET con ] ].

throne_n1 := n_intr_le &
 [ STEM < "throne" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_throne_n_1_rel",
            PHON.ONSET con ] ].

throng_n1 := n_ppof_le &
 [ STEM < "throng" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_throng_n_of_rel",
            PHON.ONSET con ] ].

throng_v1 := v_np*_trans_le &
 [ STEM < "throng" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_throng_v_1_rel",
            PHON.ONSET con ] ].

through := p_le &
 [ STEM < "through" >,
   SYNSEM [ LKEYS.KEYREL.PRED _through_p_rel,
            PHON.ONSET con ] ].

through_adv := pp_dir_le &
 [ STEM < "through" >,
   SYNSEM [ LKEYS.KEYREL.PRED _through_p_rel,
            PHON.ONSET con ] ].

through_prtcl := p_prtcl_le &
 [ STEM < "through" >,
   SYNSEM [ LKEYS.KEYREL.PRED _through_p_sel_rel,
            PHON.ONSET con ] ].

through_road_n1 := n_intr_le &
 [ STEM < "through", "road" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_through+road_n_1_rel",
            PHON.ONSET con ] ].

through_street_n1 := n_intr_le &
 [ STEM < "through", "street" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_through+street_n_1_rel",
            PHON.ONSET con ] ].

through_traffic_n1 := n_mass_le &
 [ STEM < "through", "traffic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_through+traffic_n_1_rel",
            PHON.ONSET con ] ].

throughout := p_le &
 [ STEM < "throughout" >,
   SYNSEM [ LKEYS.KEYREL.PRED _throughout_p_rel,
            PHON.ONSET con ] ].

throw_away_v1 := v_particle_np_le &
 [ STEM < "throw" >,
   SYNSEM [ LKEYS [ --COMPKEY _away_p_sel_rel,
                    KEYREL.PRED "_throw_v_away_rel" ],
            PHON.ONSET con ] ].

throw_in_v1 := v_particle_np_le &
 [ STEM < "throw" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_throw_v_in_rel" ],
            PHON.ONSET con ] ].

throw_open_v1 := v_particle_np_le &
 [ STEM < "throw" >,
   SYNSEM [ LKEYS [ --COMPKEY _open_a_sel_rel,
                    KEYREL.PRED "_throw_v_open_rel" ],
            PHON.ONSET con ] ].

throw_out_v1 := v_particle_np_le &
 [ STEM < "throw" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_throw_v_out_rel" ],
            PHON.ONSET con ] ].

throw_up_v1 := v_particle_np_le &
 [ STEM < "throw" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_throw_v_up_rel" ],
            PHON.ONSET con ] ].

throw_up_v2 := v_particle_le &
 [ STEM < "throw" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_throw_v_up_rel" ],
            PHON.ONSET con ] ].

throw_v1 := v_np_trans_le &
 [ STEM < "throw" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_throw_v_1_rel",
            PHON.ONSET con ] ].

throw_v2 := v_np_prep_trans_dors_le &
 [ STEM < "throw" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_throw_v_1_rel",
            PHON.ONSET con ] ].

thru_a1 := adj_attr_intrans_le &
 [ STEM < "thru" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_through_a_1_rel",
            PHON.ONSET con ] ].

thru_p := p_le &
 [ STEM < "thru" >,
   SYNSEM [ LKEYS.KEYREL.PRED _through_p_rel,
            PHON.ONSET con ] ].

thrust_n1 := n_intr_le &
 [ STEM < "thrust" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_thrust_n_1_rel",
            PHON.ONSET con ] ].

thrust_out_v1 := v_particle_np_le &
 [ STEM < "thrust" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_thrust_v_out_rel" ],
            PHON.ONSET con ] ].

thrust_v1 := v_np_trans_noger_le &
 [ STEM < "thrust" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_thrust_v_1_rel",
            PHON.ONSET con ] ].

thrust_v2 := v_prep_dir_le &
 [ STEM < "thrust" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_thrust_v_1_rel",
            PHON.ONSET con ] ].

thrust_v3 := v_np_prep_trans_dors_le &
 [ STEM < "thrust" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_thrust_v_1_rel",
            PHON.ONSET con ] ].

thumb_n1 := n_intr_le &
 [ STEM < "thumb" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_thumb_n_1_rel",
            PHON.ONSET con ] ].

thump_n1 := n_intr_le &
 [ STEM < "thump" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_thump_n_1_rel",
            PHON.ONSET con ] ].

thump_v1 := v_np*_trans_le &
 [ STEM < "thump" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_thump_v_1_rel",
            PHON.ONSET con ] ].

thunder_n1 := n_mass_count_le &
 [ STEM < "thunder" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_thunder_n_1_rel",
            PHON.ONSET con ] ].

thunderstorm_n1 := n_intr_le &
 [ STEM < "thunderstorm" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_thunderstorm_n_1_rel",
            PHON.ONSET con ] ].

thursday_n1 := n_day_of_week_le &
 [ STEM < "thursday" >,
   SYNSEM [ LKEYS.KEYREL.CARG "thu",
            PHON.ONSET con ] ].

thursday_n2 := n_day_of_week_le &
 [ STEM < "thurs" >,
   SYNSEM [ LKEYS.KEYREL.CARG "thu",
            PHON.ONSET con ] ].

thursday_n3 := n_day_of_week_le &
 [ STEM < "thurs." >,
   SYNSEM [ LKEYS.KEYREL.CARG "thu",
            PHON.ONSET con ] ].

thus_adv1 := adv_vp_le &
 [ STEM < "thus" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_thus_a_1_rel",
            PHON.ONSET con ] ].

thus_adv2 := adv_s_pre_le &
 [ STEM < "thus" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_thus_a_1_rel",
            PHON.ONSET con ] ].

thus_far_adv1 := adv_int_vp_le &
 [ STEM < "thus", "far" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_thus+far_a_1_rel",
            PHON.ONSET con ] ].

thwart_v1 := v_np_trans_le &
 [ STEM < "thwart" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_thwart_v_1_rel",
            PHON.ONSET con ] ].

thy := det_poss_your_le &
 [ STEM < "thy" >,
   SYNSEM.PHON.ONSET con ].

ti_n1 := n_proper_le &
 [ STEM < "ti" >,
   SYNSEM [ LKEYS.KEYREL.CARG "ti",
            PHON.ONSET con ] ].

tic_n1 := n_intr_le &
 [ STEM < "tic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tic_n_1_rel",
            PHON.ONSET con ] ].

tick_n1 := n_intr_le &
 [ STEM < "tick" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tick_n_1_rel",
            PHON.ONSET con ] ].

tick_off_v1 := v_particle_np_le &
 [ STEM < "tick" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_tick_v_off_rel" ],
            PHON.ONSET con ] ].

tick_v1 := v_np*_trans_le &
 [ STEM < "tick" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tick_v_1_rel",
            PHON.ONSET con ] ].

ticket_n1 := n_intr_le &
 [ STEM < "ticket" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ticket_n_1_rel",
            PHON.ONSET con ] ].

ticket_v1 := v_np_trans_le &
 [ STEM < "ticket" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ticket_v_1_rel",
            PHON.ONSET con ] ].

tidbit_n1 := n_intr_le &
 [ STEM < "tidbit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tidbit_n_1_rel",
            PHON.ONSET con ] ].

tide_n1 := n_ppof_le &
 [ STEM < "tide" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tide_n_of_rel",
            PHON.ONSET con ] ].

tidy_a1 := adj_intrans_le &
 [ STEM < "tidy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tidy_a_1_rel",
            PHON.ONSET con ] ].

tie_in_v1 := v_particle_np_le &
 [ STEM < "tie" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_tie_v_in_rel" ],
            PHON.ONSET con ] ].

tie_in_v2 := v_particle_le &
 [ STEM < "tie" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_tie_v_in_rel" ],
            PHON.ONSET con ] ].

tie_n1 := n_intr_le &
 [ STEM < "tie" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tie_n_1_rel",
            PHON.ONSET con ] ].

tie_on_v1 := v_particle_np_le &
 [ STEM < "tie" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_tie_v_on_rel" ],
            PHON.ONSET con ] ].

tie_up_v1 := v_particle_np_le &
 [ STEM < "tie" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_tie_v_up_rel" ],
            PHON.ONSET con ] ].

tie_v1 := v_np*_trans_le &
 [ STEM < "tie" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tie_v_1_rel",
            PHON.ONSET con ] ].

tierce_n1 := n_intr_le &
 [ STEM < "tierce" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tierce_n_1_rel",
            PHON.ONSET con ] ].

tiffany := n_proper_le &
 [ STEM < "tiffany" >,
   SYNSEM [ LKEYS.KEYREL.CARG "tiffany",
            PHON.ONSET con ] ].

tiger_n1 := n_proper_le &
 [ STEM < "tiger" >,
   SYNSEM [ LKEYS.KEYREL.CARG "tiger",
            PHON.ONSET con ] ].

tight_a1 := adj_intrans_le &
 [ STEM < "tight" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tight_a_1_rel",
            PHON.ONSET con ] ].

tighten_up_v1 := v_particle_np_le &
 [ STEM < "tighten" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_tighten_v_up_rel" ],
            PHON.ONSET con ] ].

tighten_up_v2 := v_particle_le &
 [ STEM < "tighten" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_tighten_v_up_rel" ],
            PHON.ONSET con ] ].

tighten_v1 := v_np_trans_noger_le &
 [ STEM < "tighten" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tighten_v_cause_rel",
            PHON.ONSET con ] ].

tighten_v2 := v_unacc_le &
 [ STEM < "tighten" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tighten_v_1_rel",
            PHON.ONSET con ] ].

tighter := adj_comp_le &
 [ STEM < "tighter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tight_a_1_rel",
            PHON.ONSET con ] ].

tightest := adj_superl_le &
 [ STEM < "tightest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tight_a_1_rel",
            PHON.ONSET con ] ].

tightly := adv_int_vp_le &
 [ STEM < "tightly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tight_a_1_rel",
            PHON.ONSET con ] ].

tile_n1 := n_mass_count_le &
 [ STEM < "tile" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tile_n_1_rel",
            PHON.ONSET con ] ].

tile_v1 := v_np_trans_le &
 [ STEM < "tile" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tile_v_1_rel",
            PHON.ONSET con ] ].

till_cp_p1 := p_subconj_le &
 [ STEM < "till" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_until_x_h_rel",
            PHON.ONSET con ] ].

till_cp_p2 := p_subconj_le &
 [ STEM < "til" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_until_x_h_rel",
            PHON.ONSET con ] ].

till_p1 := p_prtcl_le &
 [ STEM < "till" >,
   SYNSEM [ LKEYS.KEYREL.PRED _until_p_sel_rel,
            PHON.ONSET con ] ].

till_p2 := p_prtcl_le &
 [ STEM < "til" >,
   SYNSEM [ LKEYS.KEYREL.PRED _until_p_sel_rel,
            PHON.ONSET con ] ].

tiller_n1 := n_intr_le &
 [ STEM < "tiller" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tiller_n_1_rel",
            PHON.ONSET con ] ].

tilt_n1 := n_ppof_le &
 [ STEM < "tilt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tilt_n_of_rel",
            PHON.ONSET con ] ].

tilt_v1 := v_np_trans_le &
 [ STEM < "tilt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tilt_v_cause_rel",
            PHON.ONSET con ] ].

tilt_v2 := v_unacc_dir_le &
 [ STEM < "tilt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tilt_v_1_rel",
            PHON.ONSET con ] ].

timber_n1 := n_mass_le &
 [ STEM < "timber" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_timber_n_1_rel",
            PHON.ONSET con ] ].

timberline_n1 := n_mass_count_le &
 [ STEM < "timberline" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_timberline_n_1_rel",
            PHON.ONSET con ] ].

time-saving_a1 := adj_intrans_le &
 [ STEM < "time", "saving" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_time+saving_a_1_rel",
            PHON.ONSET con ] ].

time_a1 := adj_atrans_pp_le &
 [ STEM < "time" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_time_a_expl-for_rel" ],
            PHON.ONSET con ] ].

time_a2 := adj_reg_atrans_le &
 [ STEM < "time" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_time_a_expl-for_rel",
            PHON.ONSET con ] ].

time_and_again_adv := adv_int_vp_post_le &
 [ STEM < "time", "and", "again" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_time+and+again_a_1_rel",
            PHON.ONSET con ] ].

time_consuming_a1 := adj_intrans_le &
 [ STEM < "time", "consuming" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_time+consuming_a_1_rel",
            PHON.ONSET con ] ].

time_consuming_a2 := adj_intrans_le &
 [ STEM < "time-", "consuming" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_time+consuming_a_1_rel",
            PHON.ONSET con ] ].

time_n1 := n_mass_count_time_le &
 [ STEM < "time" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_time_n_of_rel",
            PHON.ONSET con ] ].

time_n2 := n_temp_ppcomp_time_le &
 [ STEM < "time" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_time_n_of_rel",
            PHON.ONSET con ] ].

time_v1 := v_np_trans_le &
 [ STEM < "time" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_time_v_1_rel",
            PHON.ONSET con ] ].

time_wise_adv1 := adv_int_vp_le &
 [ STEM < "time", "wise" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_time+wise_a_1_rel",
            PHON.ONSET con ] ].

time_wise_adv2 := adv_int_vp_le &
 [ STEM < "time-", "wise" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_time+wise_a_1_rel",
            PHON.ONSET con ] ].

timeline_n1 := n_intr_le &
 [ STEM < "timeline" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_timeline_n_1_rel",
            PHON.ONSET con ] ].

timely_a1 := adj_intrans_le &
 [ STEM < "timely" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_timely_a_1_rel",
            PHON.ONSET con ] ].

timepiece_n1 := n_intr_le &
 [ STEM < "timepiece" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_timepiece_n_1_rel",
            PHON.ONSET con ] ].

timeport_n1 := n_intr_le &
 [ STEM < "timeport" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_timeport_n_1_rel",
            PHON.ONSET con ] ].

timespan_n1 := n_intr_le &
 [ STEM < "timespan" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_timespan_n_1_rel",
            PHON.ONSET con ] ].

timetable_n1 := n_ppof_le &
 [ STEM < "timetable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_timetable_n_of_rel",
            PHON.ONSET con ] ].

timewise_isect := adj_intrans_le &
 [ STEM < "timewise" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_timewise_a_1_rel",
            PHON.ONSET con ] ].

timidly_adv := adv_int_vp_le &
 [ STEM < "timidly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_timid_a_1_rel",
            PHON.ONSET con ] ].

timothy_n1 := n_proper_le &
 [ STEM < "timothy" >,
   SYNSEM [ LKEYS.KEYREL.CARG "timothy",
            PHON.ONSET con ] ].

tin_n1 := n_mass_count_le &
 [ STEM < "tin" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tin_n_1_rel",
            PHON.ONSET con ] ].

tinden_n1 := n_proper_le &
 [ STEM < "tinden" >,
   SYNSEM [ LKEYS.KEYREL.CARG "tinden",
            PHON.ONSET con ] ].

tindvatnet := n_proper_le &
 [ STEM < "tindvatnet" >,
   SYNSEM [ LKEYS.KEYREL.CARG "tindvatnet",
            PHON.ONSET con ] ].

tine_n1 := n_intr_le &
 [ STEM < "tine" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tine_n_1_rel",
            PHON.ONSET con ] ].

tinge_n1 := n_intr_le &
 [ STEM < "tinge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tinge_n_1_rel",
            PHON.ONSET con ] ].

tinge_v1 := v_empty_prep*_trans_le &
 [ STEM < "tinge" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_tinge_v_with_rel" ],
            PHON.ONSET con ] ].

tinier_a1 := adj_comp_le &
 [ STEM < "tinier" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tiny_a_1_rel",
            PHON.ONSET con ] ].

tiniest_a1 := adj_superl_le &
 [ STEM < "tiniest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tiny_a_1_rel",
            PHON.ONSET con ] ].

tint_n1 := n_ppof_le &
 [ STEM < "tint" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tint_n_of_rel",
            PHON.ONSET con ] ].

tiny_a1 := adj_intrans_le &
 [ STEM < "tiny" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tiny_a_1_rel",
            PHON.ONSET con ] ].

tip_n1 := n_intr_le &
 [ STEM < "tip" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tip_n_1_rel",
            PHON.ONSET con ] ].

tip_off_v1 := v_particle_np_le &
 [ STEM < "tip" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_tip_v_off_rel" ],
            PHON.ONSET con ] ].

tip_over_v1 := v_particle_np_le &
 [ STEM < "tip" >,
   SYNSEM [ LKEYS [ --COMPKEY _over_p_sel_rel,
                    KEYREL.PRED "_tip_v_over_rel" ],
            PHON.ONSET con ] ].

tip_over_v2 := v_particle_le &
 [ STEM < "tip" >,
   SYNSEM [ LKEYS [ --COMPKEY _over_p_sel_rel,
                    KEYREL.PRED "_tip_v_over_rel" ],
            PHON.ONSET con ] ].

tip_v1 := v_np_prep_trans_dors_le &
 [ STEM < "tip" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tip_v_1_rel",
            PHON.ONSET con ] ].

tip_v2 := v_np_trans_le &
 [ STEM < "tip" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tip_v_1_rel",
            PHON.ONSET con ] ].

tip_v3 := v_ditrans_only_le &
 [ STEM < "tip" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tip_v_1_rel",
            PHON.ONSET con ] ].

tipsy_a1 := adj_intrans_le &
 [ STEM < "tipsy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tipsy_a_1_rel",
            PHON.ONSET con ] ].

tire_n1 := n_intr_le &
 [ STEM < "tire" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tire_n_1_rel",
            PHON.ONSET con ] ].

tire_of_v1 := v_empty_prep_intrans_le &
 [ STEM < "tire" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_tire_v_of_rel" ],
            PHON.ONSET con ] ].

tire_out_v1 := v_particle_np_le &
 [ STEM < "tire" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_tire_v_out_rel" ],
            PHON.ONSET con ] ].

tire_out_v2 := v_particle_le &
 [ STEM < "tire" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_tire_v_out_rel" ],
            PHON.ONSET con ] ].

tire_v1 := v_np*_trans_le &
 [ STEM < "tire" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tire_v_1_rel",
            PHON.ONSET con ] ].

tired_a1 := adj_trans_le &
 [ STEM < "tired" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_tired_a_of_rel" ],
            PHON.ONSET con ] ].

tiresome_a1 := adj_intrans_le &
 [ STEM < "tiresome" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tiresome_a_1_rel",
            PHON.ONSET con ] ].

tiresomely := adv_int_vp_le &
 [ STEM < "tiresomely" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tiresome_a_1_rel",
            PHON.ONSET con ] ].

tiring_a1 := adj_intrans_le &
 [ STEM < "tiring" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tiring_a_1_rel",
            PHON.ONSET con ] ].

tirtesva := n_proper_le &
 [ STEM < "tirtesva" >,
   SYNSEM [ LKEYS.KEYREL.CARG "tirtesva",
            PHON.ONSET con ] ].

tisane_n1 := n_intr_le &
 [ STEM < "tisane" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tisane_n_1_rel",
            PHON.ONSET con ] ].

tissue_n1 := n_intr_le &
 [ STEM < "tissue" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tissue_n_1_rel",
            PHON.ONSET con ] ].

titanic_n1 := n_proper_le &
 [ STEM < "titanic" >,
   SYNSEM [ LKEYS.KEYREL.CARG "titanic",
            PHON.ONSET con ] ].

titanium_n1 := n_mass_le &
 [ STEM < "titanium" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_titanium_n_1_rel",
            PHON.ONSET con ] ].

title_n1 := n_ppof_le &
 [ STEM < "title" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_title_n_of_rel",
            PHON.ONSET con ] ].

title_v1 := v_np_trans_le &
 [ STEM < "title" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_title_v_1_rel",
            PHON.ONSET con ] ].

tjurtagrÃ¸_n1 := n_proper_le &
 [ STEM < "tjurtagrÃ¸" >,
   SYNSEM [ LKEYS.KEYREL.CARG "tjurtagrÃ¸",
            PHON.ONSET con ] ].

tjÃ¸nholÃ¥a_n1 := n_proper_le &
 [ STEM < "tjÃ¸nholÃ¥a" >,
   SYNSEM [ LKEYS.KEYREL.CARG "tjÃ¸nholÃ¥a",
            PHON.ONSET con ] ].

tjÃ¸rnholet_n1 := n_proper_le &
 [ STEM < "tjÃ¸rnholet" >,
   SYNSEM [ LKEYS.KEYREL.CARG "tjÃ¸rnholet",
            PHON.ONSET con ] ].

tjÃ¸rnholstind_n1 := n_proper_le &
 [ STEM < "tjÃ¸rnholstind" >,
   SYNSEM [ LKEYS.KEYREL.CARG "tjÃ¸rnholstind",
            PHON.ONSET con ] ].

tjÃ¸rnholÃ¥a_n1 := n_proper_le &
 [ STEM < "tjÃ¸rnholÃ¥a" >,
   SYNSEM [ LKEYS.KEYREL.CARG "tjÃ¸rnholÃ¥a",
            PHON.ONSET con ] ].

to := p_no_nmod_le &
 [ STEM < "to" >,
   SYNSEM [ LKEYS.KEYREL.PRED _to_p_rel,
            PHON.ONSET con ] ].

to_and_fro_adv1 := adv_int_vp_post_le &
 [ STEM < "to", "and", "fro" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_to+and+fro_a_1_rel",
            PHON.ONSET con ] ].

to_c_nonprop := comp_to_nonprop_le &
 [ STEM < "to" >,
   SYNSEM.PHON.ONSET con ].

to_c_nonprop_elided := comp_to_nonprop_elided_le &
 [ STEM < "to" >,
   SYNSEM.PHON.ONSET con ].

to_c_prop := comp_to_prop_le &
 [ STEM < "to" >,
   SYNSEM.PHON.ONSET con ].

to_c_prop_elided := comp_to_prop_elided_le &
 [ STEM < "to" >,
   SYNSEM.PHON.ONSET con ].

to_date_adv1 := adv_int_vp_post_le &
 [ STEM < "to", "date" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_to+date_a_1_rel",
            PHON.ONSET con ] ].

to_do_with := p_le &
 [ STEM < "to", "do", "with" >,
   SYNSEM [ LKEYS.KEYREL.PRED _to+do+with_p_rel,
            PHON.ONSET con ] ].

to_make_sure_adv1 := adv_int_vp_post_le &
 [ STEM < "to", "make", "sure" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_to+make+sure_a_1_rel",
            PHON.ONSET con ] ].

to_name_a_few_conj := etc_conj_le &
 [ STEM < "to", "name", "a", "few" >,
   SYNSEM [ LKEYS.KEYREL.PRED _to+name+a+few_c_rel,
            PHON.ONSET con ] ].

to_nbar_p := p_nbar_comp_nomod_le &
 [ STEM < "to" >,
   SYNSEM [ LKEYS.KEYREL.PRED _to_p_nbar_rel,
            PHON.ONSET con ] ].

to_nmod := p_nmod_no_tmod_le &
 [ STEM < "to" >,
   SYNSEM [ LKEYS.KEYREL.PRED _to_p_rel,
            PHON.ONSET con ] ].

to_no_avail_adv := adv_int_vp_le &
 [ STEM < "to", "no", "avail" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_to+no+avail_a_1_rel",
            PHON.ONSET con ] ].

to_prtcl := p_prtcl_le &
 [ STEM < "to" >,
   SYNSEM [ LKEYS.KEYREL.PRED _to_p_sel_rel,
            PHON.ONSET con ] ].

to_subord := p_subconj_inf_le &
 [ STEM < "to" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_in+order+to_x_rel",
            PHON.ONSET con ] ].

to_whom_it_may_concern_root_post := adv_disc_posth_grt_le &
 [ STEM < "to", "whom", "it", "may", "concern" >,
   SYNSEM [ LKEYS.KEYREL.CARG "to_whom_it_may_concern",
            PHON.ONSET con ] ].

to_whom_it_may_concern_root_pre := adv_disc_preh_grt_le &
 [ STEM < "to", "whom", "it", "may", "concern" >,
   SYNSEM [ LKEYS.KEYREL.CARG "to_whom_it_may_concern",
            PHON.ONSET con ] ].

toast_n1 := n_mass_count_le &
 [ STEM < "toast" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_toast_n_1_rel",
            PHON.ONSET con ] ].

toast_v1 := v_np*_trans_le &
 [ STEM < "toast" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_toast_v_1_rel",
            PHON.ONSET con ] ].

tobacco_n1 := n_mass_le &
 [ STEM < "tobacco" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tobacco_n_1_rel",
            PHON.ONSET con ] ].

today_adv2 := adv_int_vp_aux_le &
 [ STEM < "today" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_today_a_1_rel",
            PHON.ONSET con ] ].

today_np := n_adv_tm_le &
 [ STEM < "today" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED _today_a_1_rel,
                    KEYREL.PRED time_n_rel ],
            PHON.ONSET con ] ].

toe_n1 := n_intr_le &
 [ STEM < "toe" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_toe_n_1_rel",
            PHON.ONSET con ] ].

toe_v1 := v_np_trans_le &
 [ STEM < "toe" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_toe_v_1_rel",
            PHON.ONSET con ] ].

toft_n1 := n_intr_le &
 [ STEM < "toft" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_toft_n_1_rel",
            PHON.ONSET con ] ].

together_adv := pp_le &
 [ STEM < "together" >,
   SYNSEM [ LKEYS.KEYREL.PRED _together_p_rel,
            PHON.ONSET con ] ].

together_prtcl := pp_prtcl_le &
 [ STEM < "together" >,
   SYNSEM [ LKEYS.KEYREL.PRED _together_p_sel_rel,
            PHON.ONSET con ] ].

together_with_p := p_le &
 [ STEM < "together", "with" >,
   SYNSEM [ LKEYS.KEYREL.PRED _together+with_p_rel,
            PHON.ONSET con ] ].

toil_n1 := n_mass_le &
 [ STEM < "toil" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_toil_n_1_rel",
            PHON.ONSET con ] ].

toil_v1 := v_unerg_le &
 [ STEM < "toil" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_toil_v_1_rel",
            PHON.ONSET con ] ].

toilet_n1 := n_intr_le &
 [ STEM < "toilet" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_toilet_n_1_rel",
            PHON.ONSET con ] ].

toiletry_n1 := n_intr_le &
 [ STEM < "toiletry" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_toiletry_n_1_rel",
            PHON.ONSET con ] ].

token_a1 := adj_intrans_le &
 [ STEM < "token" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_token_a_1_rel",
            PHON.ONSET con ] ].

token_n1 := n_intr_le &
 [ STEM < "token" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_token_n_1_rel",
            PHON.ONSET con ] ].

tokyo_n1 := n_proper_city_le &
 [ STEM < "tokyo" >,
   SYNSEM [ LKEYS.KEYREL.CARG "tokyo",
            PHON.ONSET con ] ].

tolerable_a1 := adj_intrans_le &
 [ STEM < "tolerable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tolerable_a_1_rel",
            PHON.ONSET con ] ].

tolerably_adv1 := adv_int_vp_le &
 [ STEM < "tolerably" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tolerable_a_1_rel",
            PHON.ONSET con ] ].

tolerate_v1 := v_np_trans_le &
 [ STEM < "tolerate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tolerate_v_1_rel",
            PHON.ONSET con ] ].

toll_free_a1 := adj_intrans_le &
 [ STEM < "toll", "free" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_toll+free_a_1_rel",
            PHON.ONSET con ] ].

toll_free_a2 := adj_intrans_le &
 [ STEM < "toll-", "free" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_toll+free_a_1_rel",
            PHON.ONSET con ] ].

toll_free_a3 := adj_intrans_le &
 [ STEM < "tollfree" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_toll+free_a_1_rel",
            PHON.ONSET con ] ].

toll_n1 := n_mass_count_le &
 [ STEM < "toll" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_toll_n_1_rel",
            PHON.ONSET con ] ].

tollef_n1 := n_proper_le &
 [ STEM < "tollef" >,
   SYNSEM [ LKEYS.KEYREL.CARG "tollef",
            PHON.ONSET con ] ].

tom_n1 := n_proper_le &
 [ STEM < "tom" >,
   SYNSEM [ LKEYS.KEYREL.CARG "tom",
            PHON.ONSET con ] ].

tomas_n1 := n_proper_le &
 [ STEM < "tomas" >,
   SYNSEM [ LKEYS.KEYREL.CARG "tomas",
            PHON.ONSET con ] ].

tomato_n1 := n_intr_le &
 [ STEM < "tomato" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tomato_n_1_rel",
            PHON.ONSET con ] ].

tomb_n1 := n_intr_le &
 [ STEM < "tomb" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tomb_n_1_rel",
            PHON.ONSET con ] ].

tomfoolery_n1 := n_mass_le &
 [ STEM < "tomfoolery" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tomfoolery_n_1_rel",
            PHON.ONSET con ] ].

tomorrow_det := det_yesterday_tomorrow_le &
 [ STEM < "tomorrow" >,
   SYNSEM [ LKEYS.ALTKEYREL.PRED _tomorrow_a_1_rel,
            PHON.ONSET con ] ].

tomorrow_np := n_adv_tm_le &
 [ STEM < "tomorrow" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED _tomorrow_a_1_rel,
                    KEYREL.PRED time_n_rel ],
            PHON.ONSET con ] ].

ton_n1 := n_meas_le &
 [ STEM < "ton" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ton_n_1_rel",
            PHON.ONSET con ] ].

tone_down_v1 := v_particle_np_le &
 [ STEM < "tone" >,
   SYNSEM [ LKEYS [ --COMPKEY _down_p_sel_rel,
                    KEYREL.PRED "_tone_v_down_rel" ],
            PHON.ONSET con ] ].

tone_n1 := n_ppof_le &
 [ STEM < "tone" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tone_n_of_rel",
            PHON.ONSET con ] ].

tongue_n1 := n_intr_le &
 [ STEM < "tongue" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tongue_n_1_rel",
            PHON.ONSET con ] ].

tonight_np := n_adv_tm_le &
 [ STEM < "tonight" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED _tonight_a_1_rel,
                    KEYREL.PRED time_n_rel ],
            PHON.ONSET con ] ].

tony_n1 := n_proper_le &
 [ STEM < "tony" >,
   SYNSEM [ LKEYS.KEYREL.CARG "tony",
            PHON.ONSET con ] ].

too := adv_vp_post_le &
 [ STEM < "too" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_too_a_also_rel",
            PHON.ONSET con ] ].

too_bad_a1 := adj_reg_atrans_that_cp_le &
 [ STEM < "too", "bad" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_too+bad_a_1_rel",
            PHON.ONSET con ] ].

too_deg := too_degree_spec_le &
 [ STEM < "too" >,
   SYNSEM.PHON.ONSET con ].

too_deg_nc := comp_degree_spec_nc_le &
 [ STEM < "too" >,
   SYNSEM [ LKEYS.KEYREL.PRED comp_too_rel,
            PHON.ONSET con ] ].

too_deg_sl := too_degree_spec_sl_le &
 [ STEM < "too" >,
   SYNSEM.PHON.ONSET con ].

tool_n1 := n_intr_le &
 [ STEM < "tool" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tool_n_1_rel",
            PHON.ONSET con ] ].

toot_n1 := n_ppof_le &
 [ STEM < "toot" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_toot_n_of_rel",
            PHON.ONSET con ] ].

tooth_n1 := n_intr_le &
 [ STEM < "tooth" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tooth_n_1_rel",
            PHON.ONSET con ] ].

top_a1 := adj_intrans_le &
 [ STEM < "top" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_top_a_1_rel",
            PHON.ONSET con ] ].

top_i_n1 := n_bare_nomod_le &
 [ STEM < "top" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_top_n_1_rel",
            PHON.ONSET con ] ].

top_n1 := n_intr_le &
 [ STEM < "top" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_top_n_1_rel",
            PHON.ONSET con ] ].

top_of_the_line_a1 := adj_intrans_le &
 [ STEM < "top", "of", "the", "line" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_top+of+the+line_a_1_rel",
            PHON.ONSET con ] ].

top_of_the_line_a2 := adj_intrans_le &
 [ STEM < "top-", "of-", "the-", "line" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_top+of+the+line_a_1_rel",
            PHON.ONSET con ] ].

top_v1 := v_np_trans_le &
 [ STEM < "top" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_top_v_1_rel",
            PHON.ONSET con ] ].

topgallant_n1 := n_intr_le &
 [ STEM < "topgallant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_topgallant_n_1_rel",
            PHON.ONSET con ] ].

topic_n1 := n_ppof_le &
 [ STEM < "topic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_topic_n_of_rel",
            PHON.ONSET con ] ].

topmast_n1 := n_intr_le &
 [ STEM < "topmast" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_topmast_n_1_rel",
            PHON.ONSET con ] ].

topographic_a1 := adj_intrans_le &
 [ STEM < "topographic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_topographic_a_1_rel",
            PHON.ONSET con ] ].

topography_n1 := n_mass_le &
 [ STEM < "topography" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_topography_n_1_rel",
            PHON.ONSET con ] ].

topp_n1 := n_proper_le &
 [ STEM < "topp" >,
   SYNSEM [ LKEYS.KEYREL.CARG "topp",
            PHON.ONSET con ] ].

tor_n1 := n_proper_le &
 [ STEM < "tor" >,
   SYNSEM [ LKEYS.KEYREL.CARG "tor",
            PHON.ONSET con ] ].

tora_n1 := n_proper_le &
 [ STEM < "tora" >,
   SYNSEM [ LKEYS.KEYREL.CARG "tora",
            PHON.ONSET con ] ].

torah_n1 := n_intr_named_le &
 [ STEM < "torah" >,
   SYNSEM [ LKEYS.KEYREL.CARG "torah",
            PHON.ONSET con ] ].

torbjÃ¸rn_n1 := n_proper_le &
 [ STEM < "torbjÃ¸rn" >,
   SYNSEM [ LKEYS.KEYREL.CARG "torbjÃ¸rn",
            PHON.ONSET con ] ].

torch_n1 := n_intr_le &
 [ STEM < "torch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_torch_n_1_rel",
            PHON.ONSET con ] ].

tordis_n1 := n_proper_le &
 [ STEM < "tordis" >,
   SYNSEM [ LKEYS.KEYREL.CARG "tordis",
            PHON.ONSET con ] ].

tore_n1 := n_proper_le &
 [ STEM < "tore" >,
   SYNSEM [ LKEYS.KEYREL.CARG "tore",
            PHON.ONSET con ] ].

torfinnsbu_n1 := n_proper_le &
 [ STEM < "torfinnsbu" >,
   SYNSEM [ LKEYS.KEYREL.CARG "torfinnsbu",
            PHON.ONSET con ] ].

torfinnsbua_n1 := n_proper_le &
 [ STEM < "torfinnsbua" >,
   SYNSEM [ LKEYS.KEYREL.CARG "torfinnsbua",
            PHON.ONSET con ] ].

torfinnsdÃ¸la_n1 := n_proper_le &
 [ STEM < "torfinnsdÃ¸la" >,
   SYNSEM [ LKEYS.KEYREL.CARG "torfinnsdÃ¸la",
            PHON.ONSET con ] ].

torfinnstind_n1 := n_proper_le &
 [ STEM < "torfinnstind" >,
   SYNSEM [ LKEYS.KEYREL.CARG "torfinnstind",
            PHON.ONSET con ] ].

torfinnstindane_n1 := n_proper_pl_le &
 [ STEM < "torfinnstindane" >,
   SYNSEM [ LKEYS.KEYREL.CARG "torfinnstindane",
            PHON.ONSET con ] ].

torfinsbu := n_proper_le &
 [ STEM < "torfinsbu" >,
   SYNSEM [ LKEYS.KEYREL.CARG "torfinsbu",
            PHON.ONSET con ] ].

torger := n_proper_le &
 [ STEM < "torger" >,
   SYNSEM [ LKEYS.KEYREL.CARG "torger",
            PHON.ONSET con ] ].

torill_n1 := n_proper_le &
 [ STEM < "torill" >,
   SYNSEM [ LKEYS.KEYREL.CARG "torill",
            PHON.ONSET con ] ].

torkjell_n1 := n_proper_le &
 [ STEM < "torkjell" >,
   SYNSEM [ LKEYS.KEYREL.CARG "torkjell",
            PHON.ONSET con ] ].

torment_v1 := v_np*_trans_le &
 [ STEM < "torment" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_torment_v_1_rel",
            PHON.ONSET con ] ].

tornado_alley_n1 := n_proper_le &
 [ STEM < "tornado", "alley" >,
   SYNSEM [ LKEYS.KEYREL.CARG "tornado_alley",
            PHON.ONSET con ] ].

tornado_n1 := n_intr_le &
 [ STEM < "tornado" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tornado_n_1_rel",
            PHON.ONSET con ] ].

torneÃ¥ := n_proper_le &
 [ STEM < "torneÃ¥" >,
   SYNSEM [ LKEYS.KEYREL.CARG "torneÃ¥",
            PHON.ONSET con ] ].

toronto_n1 := n_proper_city_le &
 [ STEM < "toronto" >,
   SYNSEM [ LKEYS.KEYREL.CARG "toronto",
            PHON.ONSET con ] ].

torpedo_n1 := n_intr_le &
 [ STEM < "torpedo" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_torpedo_n_1_rel",
            PHON.ONSET con ] ].

torpedo_v1 := v_np_trans_le &
 [ STEM < "torpedo" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_torpedo_v_1_rel",
            PHON.ONSET con ] ].

torpidness_n1 := n_mass_le &
 [ STEM < "torpidness" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_torpidness_n_1_rel",
            PHON.ONSET con ] ].

torrent_n1 := n_intr_le &
 [ STEM < "torrent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_torrent_n_1_rel",
            PHON.ONSET con ] ].

torsnuten := n_proper_le &
 [ STEM < "torsnuten" >,
   SYNSEM [ LKEYS.KEYREL.CARG "torsnuten",
            PHON.ONSET con ] ].

torsten_n1 := n_proper_le &
 [ STEM < "torsten" >,
   SYNSEM [ LKEYS.KEYREL.CARG "torsten",
            PHON.ONSET con ] ].

tortoise_n1 := n_intr_le &
 [ STEM < "tortoise" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tortoise_n_1_rel",
            PHON.ONSET con ] ].

torvik_n1 := n_proper_le &
 [ STEM < "torvik" >,
   SYNSEM [ LKEYS.KEYREL.CARG "torvik",
            PHON.ONSET con ] ].

tory_n1 := n_intr_named_le &
 [ STEM < "tory" >,
   SYNSEM [ LKEYS.KEYREL.CARG "tory",
            PHON.ONSET con ] ].

toshiba_n1 := n_proper_le &
 [ STEM < "toshiba" >,
   SYNSEM [ LKEYS.KEYREL.CARG "toshiba",
            PHON.ONSET con ] ].

toss_away_v1 := v_particle_np_le &
 [ STEM < "toss" >,
   SYNSEM [ LKEYS [ --COMPKEY _away_p_sel_rel,
                    KEYREL.PRED "_toss_v_away_rel" ],
            PHON.ONSET con ] ].

toss_n1 := n_ppof_le &
 [ STEM < "toss" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_toss_n_of_rel",
            PHON.ONSET con ] ].

toss_v1 := v_np_trans_le &
 [ STEM < "toss" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_toss_v_1_rel",
            PHON.ONSET con ] ].

toss_v2 := v_np_prep_trans_dors_le &
 [ STEM < "toss" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_toss_v_1_rel",
            PHON.ONSET con ] ].

total_a1 := adj_intrans_le &
 [ STEM < "total" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_total_a_1_rel",
            PHON.ONSET con ] ].

total_n1 := n_ppof_le &
 [ STEM < "total" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_total_n_of_rel",
            PHON.ONSET con ] ].

total_v1 := v_np_non_trans_le &
 [ STEM < "total" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_total_v_1_rel",
            PHON.ONSET con ] ].

totality_n1 := n_intr_le &
 [ STEM < "totality" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_totality_n_1_rel",
            PHON.ONSET con ] ].

totally_adv1 := adv_int_vp_le &
 [ STEM < "totally" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_total_a_1_rel",
            PHON.ONSET con ] ].

tote_n1 := n_intr_le &
 [ STEM < "tote" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tote_n_1_rel",
            PHON.ONSET con ] ].

tote_v1 := v_np_trans_le &
 [ STEM < "tote" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tote_v_1_rel",
            PHON.ONSET con ] ].

totter_n1 := n_intr_sg_le &
 [ STEM < "totter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_totter_n_1_rel",
            PHON.ONSET con ] ].

touch_down_v1 := v_particle_le &
 [ STEM < "touch" >,
   SYNSEM [ LKEYS [ --COMPKEY _down_p_sel_rel,
                    KEYREL.PRED "_touch_v_down_rel" ],
            PHON.ONSET con ] ].

touch_n1 := n_mass_count_le &
 [ STEM < "touch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_touch_n_1_rel",
            PHON.ONSET con ] ].

touch_v1 := v_np*_trans_le &
 [ STEM < "touch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_touch_v_1_rel",
            PHON.ONSET con ] ].

tough_a1 := adj_trans_le &
 [ STEM < "tough" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_tough_a_for_rel" ],
            PHON.ONSET con ] ].

tough_a2 := adj_reg_atrans_le &
 [ STEM < "tough" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tough_a_for_rel",
            PHON.ONSET con ] ].

tough_a3 := adj_tough_atrans_le &
 [ STEM < "tough" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tough_a_for_rel",
            PHON.ONSET con ] ].

toughbook_n1 := n_intr_le &
 [ STEM < "toughbook" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_toughbook_n_1_rel",
            PHON.ONSET con ] ].

tougher := adj_comp_le &
 [ STEM < "tougher" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tough_a_for_rel",
            PHON.ONSET con ] ].

toughest_a1 := adj_superl_le &
 [ STEM < "toughest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tough_a_for_rel",
            PHON.ONSET con ] ].

tour_n1 := n_ppof_le &
 [ STEM < "tour" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tour_n_of_rel",
            PHON.ONSET con ] ].

tour_v1 := v_np*_trans_le &
 [ STEM < "tour" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tour_v_1_rel",
            PHON.ONSET con ] ].

tourism_n1 := n_mass_le &
 [ STEM < "tourism" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tourism_n_1_rel",
            PHON.ONSET con ] ].

tourist_n1 := n_intr_le &
 [ STEM < "tourist" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tourist_n_1_rel",
            PHON.ONSET con ] ].

touristic_a1 := adj_intrans_le &
 [ STEM < "touristic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_touristic_a_1_rel",
            PHON.ONSET con ] ].

tournament_n1 := n_ppof_le &
 [ STEM < "tournament" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tournament_n_of_rel",
            PHON.ONSET con ] ].

tourniquet_n1 := n_intr_le &
 [ STEM < "tourniquet" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tourniquet_n_1_rel",
            PHON.ONSET con ] ].

tove_n1 := n_proper_le &
 [ STEM < "tove" >,
   SYNSEM [ LKEYS.KEYREL.CARG "tove",
            PHON.ONSET con ] ].

toward := p_le &
 [ STEM < "toward" >,
   SYNSEM [ LKEYS.KEYREL.PRED _toward_p_rel,
            PHON.ONSET con ] ].

toward_prtcl := p_prtcl_le &
 [ STEM < "toward" >,
   SYNSEM [ LKEYS.KEYREL.PRED _toward_p_sel_rel,
            PHON.ONSET con ] ].

towards := p_le &
 [ STEM < "towards" >,
   SYNSEM [ LKEYS.KEYREL.PRED _towards_p_rel,
            PHON.ONSET con ] ].

towards_prtcl := p_prtcl_le &
 [ STEM < "towards" >,
   SYNSEM [ LKEYS.KEYREL.PRED _towards_p_sel_rel,
            PHON.ONSET con ] ].

towel_n1 := n_intr_le &
 [ STEM < "towel" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_towel_n_1_rel",
            PHON.ONSET con ] ].

towel_off_v1 := v_particle_np_le &
 [ STEM < "towel" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_towel_v_off_rel" ],
            PHON.ONSET con ] ].

towel_off_v2 := v_particle_le &
 [ STEM < "towel" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_towel_v_off_rel" ],
            PHON.ONSET con ] ].

tower_n1 := n_ppof_le &
 [ STEM < "tower" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tower_n_of_rel",
            PHON.ONSET con ] ].

tower_over_v1 := v_prep*_intrans_le &
 [ STEM < "tower" >,
   SYNSEM [ LKEYS [ --COMPKEY _over_p_rel,
                    KEYREL.PRED "_tower_v_1_rel" ],
            PHON.ONSET con ] ].

tower_post_ttl := n_post_title_le &
 [ STEM < "tower" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tower_n_of_rel",
            PHON.ONSET con ] ].

towline_n1 := n_mass_count_le &
 [ STEM < "towline" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_towline_n_1_rel",
            PHON.ONSET con ] ].

town_i_n1 := n_bare_nomod_le &
 [ STEM < "town" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_town_n_1_rel",
            PHON.ONSET con ] ].

town_n1 := n_intr_le &
 [ STEM < "town" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_town_n_1_rel",
            PHON.ONSET con ] ].

town_post_ttl := n_post_title_le &
 [ STEM < "town" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_town_n_1_rel",
            PHON.ONSET con ] ].

township_n1 := n_intr_le &
 [ STEM < "township" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_township_n_1_rel",
            PHON.ONSET con ] ].

township_post_ttl := n_post_title_le &
 [ STEM < "township" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_township_n_1_rel",
            PHON.ONSET con ] ].

toxic_a1 := adj_intrans_le &
 [ STEM < "toxic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_toxic_a_1_rel",
            PHON.ONSET con ] ].

toy_n1 := n_intr_le &
 [ STEM < "toy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_toy_n_1_rel",
            PHON.ONSET con ] ].

trace_back_v1 := v_particle_np_le &
 [ STEM < "trace" >,
   SYNSEM [ LKEYS [ --COMPKEY _back_p_sel_rel,
                    KEYREL.PRED "_trace_v_back_rel" ],
            PHON.ONSET con ] ].

trace_back_v2 := v_particle_le &
 [ STEM < "trace" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _back_p_sel_rel,
                    KEYREL.PRED "_trace_v_back_rel" ],
            PHON.ONSET con ] ].

trace_down_v1 := v_particle_np_le &
 [ STEM < "trace" >,
   SYNSEM [ LKEYS [ --COMPKEY _down_p_sel_rel,
                    KEYREL.PRED "_trace_v_down_rel" ],
            PHON.ONSET con ] ].

trace_n1 := n_ppof_le &
 [ STEM < "trace" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_trace_n_of_rel",
            PHON.ONSET con ] ].

trace_v1 := v_np_trans_le &
 [ STEM < "trace" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_trace_v_1_rel",
            PHON.ONSET con ] ].

track_down_v1 := v_particle_np_le &
 [ STEM < "track" >,
   SYNSEM [ LKEYS [ --COMPKEY _down_p_sel_rel,
                    KEYREL.PRED "_track_v_down_rel" ],
            PHON.ONSET con ] ].

track_i_n1 := n_bare_nomod_le &
 [ STEM < "track" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_track_n_1_rel",
            PHON.ONSET con ] ].

track_meet_n1 := n_intr_le &
 [ STEM < "track", "meet" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_track+meet_n_1_rel",
            PHON.ONSET con ] ].

track_n1 := n_intr_le &
 [ STEM < "track" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_track_n_1_rel",
            PHON.ONSET con ] ].

track_post_ttl := n_post_title_le &
 [ STEM < "track" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_track_n_1_rel",
            PHON.ONSET con ] ].

track_v1 := v_np*_trans_le &
 [ STEM < "track" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_track_v_1_rel",
            PHON.ONSET con ] ].

tract_n1 := n_ppof_le &
 [ STEM < "tract" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tract_n_of_rel",
            PHON.ONSET con ] ].

tractable_a1 := adj_intrans_le &
 [ STEM < "tractable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tractable_a_1_rel",
            PHON.ONSET con ] ].

traction_n1 := n_mass_le &
 [ STEM < "traction" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_traction_n_1_rel",
            PHON.ONSET con ] ].

tractor_n1 := n_intr_le &
 [ STEM < "tractor" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tractor_n_1_rel",
            PHON.ONSET con ] ].

tradable_a1 := adj_intrans_le &
 [ STEM < "tradable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tradable_a_1_rel",
            PHON.ONSET con ] ].

trade_in_v2 := v_particle_np_le &
 [ STEM < "trade" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_trade_v_in_rel" ],
            PHON.ONSET con ] ].

trade_in_v3 := v_particle_np_pp_for_le &
 [ STEM < "trade" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_trade_v_in_rel" ],
            PHON.ONSET con ] ].

trade_n1 := n_mass_count_ppof_le &
 [ STEM < "trade" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_trade_n_of_rel",
            PHON.ONSET con ] ].

trade_v1 := v_np_trans_le &
 [ STEM < "trade" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_trade_v_1_rel",
            PHON.ONSET con ] ].

trademark_n1 := n_intr_le &
 [ STEM < "trademark" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_trademark_n_1_rel",
            PHON.ONSET con ] ].

trademark_v1 := v_np_trans_le &
 [ STEM < "trademark" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_trademark_v_1_rel",
            PHON.ONSET con ] ].

trader_n1 := n_intr_le &
 [ STEM < "trader" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_trader_n_1_rel",
            PHON.ONSET con ] ].

tradesman_n1 := n_intr_le &
 [ STEM < "tradesman" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tradesman_n_1_rel",
            PHON.ONSET con ] ].

tradition_n1 := n_mass_count_le &
 [ STEM < "tradition" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tradition_n_1_rel",
            PHON.ONSET con ] ].

traditional_isect := adj_intrans_le &
 [ STEM < "traditional" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_traditional_a_1_rel",
            PHON.ONSET con ] ].

traditionally_isect := adv_int_vp_le &
 [ STEM < "traditionally" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_traditional_a_1_rel",
            PHON.ONSET con ] ].

traffic_in_v1 := v_empty_prep_intrans_le &
 [ STEM < "traffic" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_traffic_v_in_rel" ],
            PHON.ONSET con ] ].

traffic_n1 := n_mass_le &
 [ STEM < "traffic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_traffic_n_1_rel",
            PHON.ONSET con ] ].

tragedy_n1 := n_mass_count_le &
 [ STEM < "tragedy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tragedy_n_1_rel",
            PHON.ONSET con ] ].

tragic_a1 := adj_intrans_le &
 [ STEM < "tragic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tragic_a_1_rel",
            PHON.ONSET con ] ].

tragic_a2 := adj_reg_atrans_cp_le &
 [ STEM < "tragic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tragic_a_1_rel",
            PHON.ONSET con ] ].

tragically := adv_int_vp_le &
 [ STEM < "tragically" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tragic_a_1_rel",
            PHON.ONSET con ] ].

trail_n1 := n_intr_le &
 [ STEM < "trail" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_trail_n_1_rel",
            PHON.ONSET con ] ].

trail_off_v1 := v_particle_le &
 [ STEM < "trail" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_trail_v_off_rel" ],
            PHON.ONSET con ] ].

trail_v1 := v_np*_trans_le &
 [ STEM < "trail" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_trail_v_1_rel",
            PHON.ONSET con ] ].

trailhead_n1 := n_intr_le &
 [ STEM < "trailhead" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_trailhead_n_1_rel",
            PHON.ONSET con ] ].

train_n1 := n_ppof_le &
 [ STEM < "train" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_train_n_of_rel",
            PHON.ONSET con ] ].

train_v1 := v_np*_trans_le &
 [ STEM < "train" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_train_v_1_rel",
            PHON.ONSET con ] ].

train_v2 := v_obj_equi_le &
 [ STEM < "train" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_train_v_1_rel",
            PHON.ONSET con ] ].

train_v3 := v_subj_equi_le &
 [ STEM < "train" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_train_v_1_rel",
            PHON.ONSET con ] ].

trait_n1 := n_intr_le &
 [ STEM < "trait" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_trait_n_1_rel",
            PHON.ONSET con ] ].

tram_n1 := n_intr_le &
 [ STEM < "tram" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tram_n_1_rel",
            PHON.ONSET con ] ].

trample_v1 := v_np*_trans_le &
 [ STEM < "trample" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_trample_v_1_rel",
            PHON.ONSET con ] ].

tramway_n1 := n_intr_le &
 [ STEM < "tramway" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tramway_n_1_rel",
            PHON.ONSET con ] ].

tranquil_a1 := adj_intrans_le &
 [ STEM < "tranquil" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tranquil_a_1_rel",
            PHON.ONSET con ] ].

tranquility_n1 := n_mass_le &
 [ STEM < "tranquility" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tranquility_n_1_rel",
            PHON.ONSET con ] ].

tranquility_n2 := n_mass_le &
 [ STEM < "tranquillity" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tranquility_n_1_rel",
            PHON.ONSET con ] ].

trans_union_n1 := n_proper_le &
 [ STEM < "trans", "union" >,
   SYNSEM [ LKEYS.KEYREL.CARG "trans_union",
            PHON.ONSET con ] ].

trans_union_n2 := n_proper_le &
 [ STEM < "trans", "union", "company" >,
   SYNSEM [ LKEYS.KEYREL.CARG "trans_union",
            PHON.ONSET con ] ].

transact_v1 := v_np_trans_le &
 [ STEM < "transact" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_transact_v_1_rel",
            PHON.ONSET con ] ].

transaction_n1 := n_mass_count_le &
 [ STEM < "transaction" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_transaction_n_1_rel",
            PHON.ONSET con ] ].

transcend_v1 := v_np_trans_le &
 [ STEM < "transcend" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_transcend_v_1_rel",
            PHON.ONSET con ] ].

transcribe_v1 := v_np_trans_le &
 [ STEM < "transcribe" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_transcribe_v_1_rel",
            PHON.ONSET con ] ].

transcriber_n1 := n_intr_le &
 [ STEM < "transcriber" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_transcriber_n_1_rel",
            PHON.ONSET con ] ].

transcript_n1 := n_ppof_le &
 [ STEM < "transcript" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_transcript_n_of_rel",
            PHON.ONSET con ] ].

transcription_n1 := n_intr_le &
 [ STEM < "transcription" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_transcription_n_1_rel",
            PHON.ONSET con ] ].

transfer_n1 := n_mass_count_ppof_le &
 [ STEM < "transfer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_transfer_n_of_rel",
            PHON.ONSET con ] ].

transfer_v1 := v_np*_trans_double_pp_to*_le &
 [ STEM < "transfer" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _from_p_sel_rel,
                    KEYREL.PRED "_transfer_v_from-to_rel" ],
            PHON.ONSET con ] ].

transfer_v2 := v_np*_trans_le &
 [ STEM < "transfer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_transfer_v_1_rel",
            PHON.ONSET con ] ].

transform_into_v1 := v_empty_prep_trans_le &
 [ STEM < "transform" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _into_p_sel_rel,
                    KEYREL.PRED "_transform_v_into_rel" ],
            PHON.ONSET con ] ].

transform_n1 := n_intr_le &
 [ STEM < "transform" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_transform_n_1_rel",
            PHON.ONSET con ] ].

transform_v1 := v_np_trans_le &
 [ STEM < "transform" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_transform_v_1_rel",
            PHON.ONSET con ] ].

transit_n1 := n_mass_le &
 [ STEM < "transit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_transit_n_1_rel",
            PHON.ONSET con ] ].

transition_n1 := n_intr_le &
 [ STEM < "transition" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_transition_n_1_rel",
            PHON.ONSET con ] ].

transitional_a1 := adj_intrans_le &
 [ STEM < "transitional" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_transitional_a_1_rel",
            PHON.ONSET con ] ].

transitive_a1 := adj_intrans_le &
 [ STEM < "transitive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_transitive_a_1_rel",
            PHON.ONSET con ] ].

transitive_n1 := n_intr_le &
 [ STEM < "transitive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_transitive_n_1_rel",
            PHON.ONSET con ] ].

transitorily := adv_int_vp_le &
 [ STEM < "transitorily" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_transitory_a_1_rel",
            PHON.ONSET con ] ].

translate_into_v1 := v_empty_prep_trans_le &
 [ STEM < "translate" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _into_p_sel_rel,
                    KEYREL.PRED "_translate_v_into_rel" ],
            PHON.ONSET con ] ].

translate_into_v2 := v_empty_prep_intrans_le &
 [ STEM < "translate" >,
   SYNSEM [ LKEYS [ --COMPKEY _into_p_sel_rel,
                    KEYREL.PRED "_translate_v_into_rel" ],
            PHON.ONSET con ] ].

translate_to_v1 := v_empty_prep_trans_le &
 [ STEM < "translate" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_translate_v_to_rel" ],
            PHON.ONSET con ] ].

translate_to_v2 := v_empty_prep_intrans_le &
 [ STEM < "translate" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_translate_v_to_rel" ],
            PHON.ONSET con ] ].

translate_v1 := v_np*_trans_le &
 [ STEM < "translate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_translate_v_1_rel",
            PHON.ONSET con ] ].

translation_n1 := n_mass_count_le &
 [ STEM < "translation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_translation_n_1_rel",
            PHON.ONSET con ] ].

translator_n1 := n_intr_le &
 [ STEM < "translator" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_translator_n_1_rel",
            PHON.ONSET con ] ].

transmission_n1 := n_mass_count_ppof_le &
 [ STEM < "transmission" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_transmission_n_of_rel",
            PHON.ONSET con ] ].

transmit_v1 := v_np*_trans_le &
 [ STEM < "transmit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_transmit_v_1_rel",
            PHON.ONSET con ] ].

transmit_v2 := v_np_prep_trans_dors_le &
 [ STEM < "transmit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_transmit_v_1_rel",
            PHON.ONSET con ] ].

transmute_v1 := v_np_trans_le &
 [ STEM < "transmute" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_transmute_v_1_rel",
            PHON.ONSET con ] ].

transparent_a1 := adj_intrans_le &
 [ STEM < "transparent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_transparent_a_1_rel",
            PHON.ONSET con ] ].

transplant_n1 := n_ppof_le &
 [ STEM < "transplant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_transplant_n_of_rel",
            PHON.ONSET con ] ].

transplant_v1 := v_np_prep_trans_dors_le &
 [ STEM < "transplant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_transplant_v_1_rel",
            PHON.ONSET con ] ].

transplant_v2 := v_np_trans_le &
 [ STEM < "transplant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_transplant_v_1_rel",
            PHON.ONSET con ] ].

transport_n1 := n_mass_le &
 [ STEM < "transport" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_transport_n_1_rel",
            PHON.ONSET con ] ].

transport_v1 := v_np_trans_le &
 [ STEM < "transport" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_transport_v_1_rel",
            PHON.ONSET con ] ].

transportation_n1 := n_mass_le &
 [ STEM < "transportation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_transportation_n_1_rel",
            PHON.ONSET con ] ].

transverse_a1 := adj_intrans_le &
 [ STEM < "transverse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_transverse_a_1_rel",
            PHON.ONSET con ] ].

trap_n1 := n_intr_le &
 [ STEM < "trap" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_trap_n_1_rel",
            PHON.ONSET con ] ].

trap_v1 := v_np*_trans_le &
 [ STEM < "trap" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_trap_v_1_rel",
            PHON.ONSET con ] ].

trap_v2 := v_np_prep_trans_dors_le &
 [ STEM < "trap" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_trap_v_1_rel",
            PHON.ONSET con ] ].

trapdoor_n1 := n_intr_le &
 [ STEM < "trapdoor" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_trapdoor_n_1_rel",
            PHON.ONSET con ] ].

trapper_n1 := n_intr_le &
 [ STEM < "trapper" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_trapper_n_1_rel",
            PHON.ONSET con ] ].

trash_n1 := n_mass_count_le &
 [ STEM < "trash" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_trash_n_1_rel",
            PHON.ONSET con ] ].

traunstein_n1 := n_proper_city_le &
 [ STEM < "traunstein" >,
   SYNSEM [ LKEYS.KEYREL.CARG "traunstein",
            PHON.ONSET con ] ].

travail_n1 := n_mass_count_le &
 [ STEM < "travail" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_travail_n_1_rel",
            PHON.ONSET con ] ].

travel_n1 := n_mass_count_le &
 [ STEM < "travel" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_travel_n_1_rel",
            PHON.ONSET con ] ].

travel_v1 := v_prep_dir_le &
 [ STEM < "travel" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_travel_v_1_rel",
            PHON.ONSET con ] ].

traveler_n1 := n_intr_le &
 [ STEM < "traveler" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_traveler_n_1_rel",
            PHON.ONSET con ] ].

travelers_check_n1 := n_intr_le &
 [ STEM < "traveler's", "check" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_travelers+check_n_1_rel",
            PHON.ONSET con ] ].

travelers_check_n2 := n_intr_le &
 [ STEM < "traveler", "s", "check" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_travelers+check_n_1_rel",
            PHON.ONSET con ] ].

travelers_check_n3 := n_intr_le &
 [ STEM < "traveler", "'s", "check" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_travelers+check_n_1_rel",
            PHON.ONSET con ] ].

travelers_cheque_n1 := n_intr_le &
 [ STEM < "traveler's", "cheque" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_travelers+check_n_1_rel",
            PHON.ONSET con ] ].

travelers_cheque_n2 := n_intr_le &
 [ STEM < "traveler", "s", "cheque" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_travelers+check_n_1_rel",
            PHON.ONSET con ] ].

travelers_cheque_n3 := n_intr_le &
 [ STEM < "traveler", "'s", "cheque" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_travelers+check_n_1_rel",
            PHON.ONSET con ] ].

traveller_n1 := n_intr_le &
 [ STEM < "traveller" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_traveller_n_1_rel",
            PHON.ONSET con ] ].

travelocity_n1 := n_proper_le &
 [ STEM < "travelocity" >,
   SYNSEM [ LKEYS.KEYREL.CARG "travelocity",
            PHON.ONSET con ] ].

travelogue_n1 := n_intr_le &
 [ STEM < "travelogue" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_travelogue_n_1_rel",
            PHON.ONSET con ] ].

traverse_n1 := n_intr_le &
 [ STEM < "traverse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_traverse_n_1_rel",
            PHON.ONSET con ] ].

traverse_v1 := v_np_trans_noger_le &
 [ STEM < "traverse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_traverse_v_1_rel",
            PHON.ONSET con ] ].

traverse_v2 := v_prep_dir_le &
 [ STEM < "traverse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_traverse_v_1_rel",
            PHON.ONSET con ] ].

tray_n1 := n_intr_le &
 [ STEM < "tray" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tray_n_1_rel",
            PHON.ONSET con ] ].

treacherous_a1 := adj_intrans_le &
 [ STEM < "treacherous" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_treacherous_a_1_rel",
            PHON.ONSET con ] ].

tread_n1 := n_mass_count_le &
 [ STEM < "tread" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tread_n_1_rel",
            PHON.ONSET con ] ].

tread_v1 := v_np*_trans_le &
 [ STEM < "tread" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tread_v_1_rel",
            PHON.ONSET con ] ].

treasure_n1 := n_mass_count_le &
 [ STEM < "treasure" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_treasure_n_1_rel",
            PHON.ONSET con ] ].

treasured_a1 := adj_intrans_le &
 [ STEM < "treasured" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_treasured_a_1_rel",
            PHON.ONSET con ] ].

treasury_n1 := n_intr_le &
 [ STEM < "treasury" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_treasury_n_1_rel",
            PHON.ONSET con ] ].

treat_n1 := n_intr_le &
 [ STEM < "treat" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_treat_n_1_rel",
            PHON.ONSET con ] ].

treat_v1 := v_empty_prep_trans_le &
 [ STEM < "treat" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_treat_v_to_rel" ],
            PHON.ONSET con ] ].

treat_v2 := v_np_trans_le &
 [ STEM < "treat" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_treat_v_1_rel",
            PHON.ONSET con ] ].

treat_v3 := v_empty_prep_trans_le &
 [ STEM < "treat" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_treat_v_with_rel" ],
            PHON.ONSET con ] ].

treat_v4 := v_np_as_le &
 [ STEM < "treat" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_treat_v_as_rel",
            PHON.ONSET con ] ].

treatise_n1 := n_intr_le &
 [ STEM < "treatise" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_treatise_n_1_rel",
            PHON.ONSET con ] ].

treatment_n1 := n_mass_count_ppof_le &
 [ STEM < "treatment" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_treatment_n_of_rel",
            PHON.ONSET con ] ].

treaty_n1 := n_intr_le &
 [ STEM < "treaty" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_treaty_n_1_rel",
            PHON.ONSET con ] ].

treble_n1 := n_intr_le &
 [ STEM < "treble" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_treble_n_1_rel",
            PHON.ONSET con ] ].

tree_n1 := n_ppof_le &
 [ STEM < "tree" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tree_n_of_rel",
            PHON.ONSET con ] ].

trek_n1 := n_intr_le &
 [ STEM < "trek" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_trek_n_1_rel",
            PHON.ONSET con ] ].

trek_v1 := v_prep_dir_le &
 [ STEM < "trek" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_trek_v_1_rel",
            PHON.ONSET con ] ].

trekker_n1 := n_intr_le &
 [ STEM < "trekker" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_trekker_n_1_rel",
            PHON.ONSET con ] ].

tremble_v1 := v_unerg_le &
 [ STEM < "tremble" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tremble_v_1_rel",
            PHON.ONSET con ] ].

tremendous_a1 := adj_intrans_le &
 [ STEM < "tremendous" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tremendous_a_1_rel",
            PHON.ONSET con ] ].

trench_n1 := n_intr_le &
 [ STEM < "trench" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_trench_n_1_rel",
            PHON.ONSET con ] ].

trend_n1 := n_intr_le &
 [ STEM < "trend" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_trend_n_1_rel",
            PHON.ONSET con ] ].

trendy_a1 := adj_intrans_le &
 [ STEM < "trendy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_trendy_a_1_rel",
            PHON.ONSET con ] ].

treriksrÃ¶set := n_proper_le &
 [ STEM < "treriksrÃ¶set" >,
   SYNSEM [ LKEYS.KEYREL.CARG "treriksrÃ¶set",
            PHON.ONSET con ] ].

trespass_v1 := v_prep_dir_le &
 [ STEM < "trespass" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_trespass_v_1_rel",
            PHON.ONSET con ] ].

trevor_n1 := n_proper_le &
 [ STEM < "trevor" >,
   SYNSEM [ LKEYS.KEYREL.CARG "trevor",
            PHON.ONSET con ] ].

trial_n1 := n_intr_le &
 [ STEM < "trial" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_trial_n_1_rel",
            PHON.ONSET con ] ].

triangle_n1 := n_intr_le &
 [ STEM < "triangle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_triangle_n_1_rel",
            PHON.ONSET con ] ].

triband_n1 := n_intr_le &
 [ STEM < "triband" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_triband_n_1_rel",
            PHON.ONSET con ] ].

triband_n2 := n_intr_le &
 [ STEM < "tri", "band" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_triband_n_1_rel",
            PHON.ONSET con ] ].

triband_n3 := n_intr_le &
 [ STEM < "tri-", "band" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_triband_n_1_rel",
            PHON.ONSET con ] ].

tribe_n1 := n_intr_le &
 [ STEM < "tribe" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tribe_n_1_rel",
            PHON.ONSET con ] ].

tributary_n1 := n_intr_le &
 [ STEM < "tributary" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tributary_n_1_rel",
            PHON.ONSET con ] ].

tribute_n1 := n_mass_count_le &
 [ STEM < "tribute" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tribute_n_1_rel",
            PHON.ONSET con ] ].

trick_n1 := n_intr_le &
 [ STEM < "trick" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_trick_n_1_rel",
            PHON.ONSET con ] ].

trick_v1 := v_np_trans_le &
 [ STEM < "trick" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_trick_v_1_rel",
            PHON.ONSET con ] ].

trick_v2 := v_np_prep_trans_dors_le &
 [ STEM < "trick" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_trick_v_1_rel",
            PHON.ONSET con ] ].

tricky_a1 := adj_intrans_le &
 [ STEM < "tricky" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tricky_a_1_rel",
            PHON.ONSET con ] ].

trier_n1 := n_proper_city_le &
 [ STEM < "trier" >,
   SYNSEM [ LKEYS.KEYREL.CARG "trier",
            PHON.ONSET con ] ].

trifle_n1 := n_intr_le &
 [ STEM < "trifle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_trifle_n_1_rel",
            PHON.ONSET con ] ].

trifle_v1 := v_empty_prep_intrans_le &
 [ STEM < "trifle" >,
   SYNSEM [ LKEYS [ --COMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_trifle_v_with_rel" ],
            PHON.ONSET con ] ].

trifler_n1 := n_intr_le &
 [ STEM < "trifler" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_trifler_n_1_rel",
            PHON.ONSET con ] ].

trifling_a1 := adj_intrans_le &
 [ STEM < "trifling" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_trifling_a_1_rel",
            PHON.ONSET con ] ].

trigger_n1 := n_intr_le &
 [ STEM < "trigger" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_trigger_n_1_rel",
            PHON.ONSET con ] ].

trigger_v1 := v_np_trans_le &
 [ STEM < "trigger" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_trigger_v_1_rel",
            PHON.ONSET con ] ].

trijet_n1 := n_intr_le &
 [ STEM < "trijet" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_trijet_n_1_rel",
            PHON.ONSET con ] ].

trillion := adj_bare_specified_card_trillion_le &
 [ STEM < "trillion" >,
   SYNSEM [ LKEYS.KEYREL.CARG "1000000000",
            PHON.ONSET con ] ].

trillion_comps := adj_complemented_specified_card_trillion_le &
 [ STEM < "trillion" >,
   SYNSEM [ LKEYS.KEYREL.CARG "1000000000",
            PHON.ONSET con ] ].

trillions_n1 := n_plur_xmod_le &
 [ STEM < "trillions" >,
   SYNSEM [ LKEYS.KEYREL.CARG "1000000000000",
            PHON.ONSET con ] ].

trillions_n2 := n_plur_ppcomp_card_le &
 [ STEM < "trillions" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.CARG "1000000000000" ],
            PHON.ONSET con ] ].

trim_a1 := adj_intrans_le &
 [ STEM < "trim" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_trim_a_1_rel",
            PHON.ONSET con ] ].

trim_away_v1 := v_particle_np_le &
 [ STEM < "trim" >,
   SYNSEM [ LKEYS [ --COMPKEY _away_p_sel_rel,
                    KEYREL.PRED "_trim_v_away_rel" ],
            PHON.ONSET con ] ].

trim_down_v1 := v_particle_np_le &
 [ STEM < "trim" >,
   SYNSEM [ LKEYS [ --COMPKEY _down_p_sel_rel,
                    KEYREL.PRED "_trim_v_down_rel" ],
            PHON.ONSET con ] ].

trim_n1 := n_mass_le &
 [ STEM < "trim" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_trim_n_1_rel",
            PHON.ONSET con ] ].

trim_off_v1 := v_particle_np_le &
 [ STEM < "trim" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_trim_v_off_rel" ],
            PHON.ONSET con ] ].

trim_v1 := v_np_trans_le &
 [ STEM < "trim" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_trim_v_1_rel",
            PHON.ONSET con ] ].

trimode_n1 := n_intr_le &
 [ STEM < "tri", "mode" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tri+mode_n_1_rel",
            PHON.ONSET con ] ].

trimode_n2 := n_intr_le &
 [ STEM < "tri-", "mode" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tri+mode_n_1_rel",
            PHON.ONSET con ] ].

trinidad_n1 := n_proper_city_le &
 [ STEM < "trinidad" >,
   SYNSEM [ LKEYS.KEYREL.CARG "trinidad",
            PHON.ONSET con ] ].

trinitarian_a1 := adj_intrans_le &
 [ STEM < "trinitarian" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_trinitarian_a_1_rel",
            PHON.ONSET con ] ].

trinitarian_n1 := n_intr_le &
 [ STEM < "trinitarian" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_trinitarian_n_1_rel",
            PHON.ONSET con ] ].

trio_n1 := n_intr_le &
 [ STEM < "trio" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_trio_n_1_rel",
            PHON.ONSET con ] ].

trip_n1 := n_ppof_nosort_le &
 [ STEM < "trip" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_trip_n_of_rel",
            PHON.ONSET con ] ].

trip_over_v1 := v_empty_prep_intrans_le &
 [ STEM < "trip" >,
   SYNSEM [ LKEYS [ --COMPKEY _over_p_sel_rel,
                    KEYREL.PRED "_trip_v_over_rel" ],
            PHON.ONSET con ] ].

trip_ttl := n_title_le &
 [ STEM < "trip" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_trip_n_of_rel",
            PHON.ONSET con ] ].

trip_v1 := v_np*_trans_le &
 [ STEM < "trip" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_trip_v_1_rel",
            PHON.ONSET con ] ].

triple_a_n1 := n_proper_le &
 [ STEM < "triple", "a" >,
   SYNSEM [ LKEYS.KEYREL.CARG "triple_a",
            PHON.ONSET con ] ].

triple_n1 := n_intr_le &
 [ STEM < "triple" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_triple_n_1_rel",
            PHON.ONSET con ] ].

triplet_n1 := n_intr_le &
 [ STEM < "triplet" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_triplet_n_1_rel",
            PHON.ONSET con ] ].

triumph_n1 := n_mass_count_le &
 [ STEM < "triumph" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_triumph_n_1_rel",
            PHON.ONSET con ] ].

triumph_v1 := v_unerg_le &
 [ STEM < "triumph" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_triumph_v_1_rel",
            PHON.ONSET con ] ].

trivial_a1 := adj_intrans_le &
 [ STEM < "trivial" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_trivial_a_1_rel",
            PHON.ONSET con ] ].

triviality_n1 := n_mass_count_le &
 [ STEM < "triviality" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_triviality_n_1_rel",
            PHON.ONSET con ] ].

troldhaugen := n_proper_le &
 [ STEM < "troldhaugen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "troldhaugen",
            PHON.ONSET con ] ].

tromsÃ¸ := n_proper_le &
 [ STEM < "tromsÃ¸" >,
   SYNSEM [ LKEYS.KEYREL.CARG "tromsÃ¸",
            PHON.ONSET con ] ].

trondheim_n1 := n_proper_city_le &
 [ STEM < "trondheim" >,
   SYNSEM [ LKEYS.KEYREL.CARG "trondheim",
            PHON.ONSET con ] ].

tronhus_n1 := n_proper_le &
 [ STEM < "tronhus" >,
   SYNSEM [ LKEYS.KEYREL.CARG "tronhus",
            PHON.ONSET con ] ].

troop_n1 := n_intr_le &
 [ STEM < "troop" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_troop_n_1_rel",
            PHON.ONSET con ] ].

trophy_n1 := n_intr_le &
 [ STEM < "trophy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_trophy_n_1_rel",
            PHON.ONSET con ] ].

tropical_a1 := adj_intrans_le &
 [ STEM < "tropical" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tropical_a_1_rel",
            PHON.ONSET con ] ].

trot_n1 := n_intr_le &
 [ STEM < "trot" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_trot_n_1_rel",
            PHON.ONSET con ] ].

trot_v1 := v_prep_dir_le &
 [ STEM < "trot" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_trot_v_1_rel",
            PHON.ONSET con ] ].

trouble_n1 := n_mass_count_le &
 [ STEM < "trouble" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_trouble_n_1_rel",
            PHON.ONSET con ] ].

trouble_v1 := v_np_trans_le &
 [ STEM < "trouble" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_trouble_v_1_rel",
            PHON.ONSET con ] ].

trouble_v2 := v_subj_equi_le &
 [ STEM < "trouble" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_trouble_v_1_rel",
            PHON.ONSET con ] ].

trouble_v3 := v_obj_equi_le &
 [ STEM < "trouble" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_trouble_v_1_rel",
            PHON.ONSET con ] ].

troubled_a1 := adj_intrans_le &
 [ STEM < "troubled" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_troubled_a_1_rel",
            PHON.ONSET con ] ].

troubled_a2 := adj_reg_that_cp_le &
 [ STEM < "troubled" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_troubled_a_1_rel",
            PHON.ONSET con ] ].

troublemaker_n1 := n_intr_le &
 [ STEM < "troublemaker" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_troublemaker_n_1_rel",
            PHON.ONSET con ] ].

troublesome_a1 := adj_intrans_le &
 [ STEM < "troublesome" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_troublesome_a_1_rel",
            PHON.ONSET con ] ].

trough_n1 := n_intr_le &
 [ STEM < "trough" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_trough_n_1_rel",
            PHON.ONSET con ] ].

trousers_n1 := n_plur_le &
 [ STEM < "trouser" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_trousers_n_1_rel",
            PHON.ONSET con ] ].

trout_n1 := n_intr_le &
 [ STEM < "trout" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_trout_n_1_rel",
            PHON.ONSET con ] ].

troy_n1 := n_proper_le &
 [ STEM < "troy" >,
   SYNSEM [ LKEYS.KEYREL.CARG "troy",
            PHON.ONSET con ] ].

truck_n1 := n_intr_le &
 [ STEM < "truck" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_truck_n_1_rel",
            PHON.ONSET con ] ].

trudge_v1 := v_prep_dir_le &
 [ STEM < "trudge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_trudge_v_1_rel",
            PHON.ONSET con ] ].

true_a1 := adj_trans_le &
 [ STEM < "true" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_true_a_of_rel" ],
            PHON.ONSET con ] ].

true_a2 := adj_reg_atrans_that_cp_le &
 [ STEM < "true" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_true_a_of_rel",
            PHON.ONSET con ] ].

trullsbu_n1 := n_proper_le &
 [ STEM < "trullsbu" >,
   SYNSEM [ LKEYS.KEYREL.CARG "trullsbu",
            PHON.ONSET con ] ].

truls_n1 := n_proper_le &
 [ STEM < "truls" >,
   SYNSEM [ LKEYS.KEYREL.CARG "truls",
            PHON.ONSET con ] ].

trulsbu_n1 := n_proper_le &
 [ STEM < "trulsbu" >,
   SYNSEM [ LKEYS.KEYREL.CARG "trulsbu",
            PHON.ONSET con ] ].

truly := adv_int_vp_le &
 [ STEM < "truly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_true_a_of_rel",
            PHON.ONSET con ] ].

truman_n1 := n_proper_le &
 [ STEM < "truman" >,
   SYNSEM [ LKEYS.KEYREL.CARG "truman",
            PHON.ONSET con ] ].

trump_n1 := n_mass_count_le &
 [ STEM < "trump" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_trump_n_1_rel",
            PHON.ONSET con ] ].

trump_n2 := n_proper_le &
 [ STEM < "trump" >,
   SYNSEM [ LKEYS.KEYREL.CARG "trump",
            PHON.ONSET con ] ].

trump_v1 := v_np*_trans_le &
 [ STEM < "trump" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_trump_v_1_rel",
            PHON.ONSET con ] ].

trumpet_n1 := n_intr_le &
 [ STEM < "trumpet" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_trumpet_n_1_rel",
            PHON.ONSET con ] ].

trumpet_v1 := v_np*_trans_le &
 [ STEM < "trumpet" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_trumpet_v_cause_rel",
            PHON.ONSET con ] ].

trunk_n1 := n_intr_le &
 [ STEM < "trunk" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_trunk_n_1_rel",
            PHON.ONSET con ] ].

trusbu_n1 := n_proper_le &
 [ STEM < "trusbu" >,
   SYNSEM [ LKEYS.KEYREL.CARG "trusbu",
            PHON.ONSET con ] ].

trust_n1 := n_mass_count_le &
 [ STEM < "trust" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_trust_n_1_rel",
            PHON.ONSET con ] ].

trust_v1 := v_np*_trans_le &
 [ STEM < "trust" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_trust_v_1_rel",
            PHON.ONSET con ] ].

trust_v2 := v_cp_prop_non_trans_le &
 [ STEM < "trust" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_trust_v_1_rel",
            PHON.ONSET con ] ].

trust_v3 := v_obj_equi_le &
 [ STEM < "trust" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_trust_v_1_rel",
            PHON.ONSET con ] ].

trustworthy_a1 := adj_intrans_le &
 [ STEM < "trustworthy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_trustworthy_a_1_rel",
            PHON.ONSET con ] ].

truth_n1 := n_mass_le &
 [ STEM < "truth" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_truth_n_1_rel",
            PHON.ONSET con ] ].

try_and_bse_v1 := v_subj_equi_and_bse_le &
 [ STEM < "try" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_try_v_1_rel",
            PHON.ONSET con ] ].

try_and_fin_v1 := v_subj_equi_and_fin_le &
 [ STEM < "try" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_try_v_1_rel",
            PHON.ONSET con ] ].

try_for_v1 := v_empty_prep_intrans_le &
 [ STEM < "try" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_try_v_for_rel" ],
            PHON.ONSET con ] ].

try_n1 := n_intr_le &
 [ STEM < "try" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_try_n_1_rel",
            PHON.ONSET con ] ].

try_out_v1 := v_particle_np_le &
 [ STEM < "try" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_try_v_out_rel" ],
            PHON.ONSET con ] ].

try_prp_v1 := v_subj_equi_prp_le &
 [ STEM < "try" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_try_v_1_rel",
            PHON.ONSET con ] ].

try_v1 := v_np*_trans_le &
 [ STEM < "try" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_try_v_1_rel",
            PHON.ONSET con ] ].

try_v2 := v_subj_equi_le &
 [ STEM < "try" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_try_v_1_rel",
            PHON.ONSET con ] ].

tub_n1 := n_ppof_le &
 [ STEM < "tub" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tub_n_of_rel",
            PHON.ONSET con ] ].

tube_n1 := n_intr_le &
 [ STEM < "tube" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tube_n_1_rel",
            PHON.ONSET con ] ].

tubular_a1 := adj_intrans_le &
 [ STEM < "tubular" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tubular_a_1_rel",
            PHON.ONSET con ] ].

tuck_in_v1 := v_particle_np_le &
 [ STEM < "tuck" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_tuck_v_in_rel" ],
            PHON.ONSET con ] ].

tuck_in_v2 := v_particle_le &
 [ STEM < "tuck" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_tuck_v_in_rel" ],
            PHON.ONSET con ] ].

tuck_n1 := n_intr_le &
 [ STEM < "tuck" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tuck_n_1_rel",
            PHON.ONSET con ] ].

tuck_v1 := v_np_prep_trans_dors_le &
 [ STEM < "tuck" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tuck_v_1_rel",
            PHON.ONSET con ] ].

tuckered_a1 := adj_intrans_le &
 [ STEM < "tuckered" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tuckered_a_1_rel",
            PHON.ONSET con ] ].

tuckered_out_a1 := adj_intrans_le &
 [ STEM < "tuckered", "out" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tuckered+out_a_1_rel",
            PHON.ONSET con ] ].

tucson_n1 := n_proper_city_le &
 [ STEM < "tucson" >,
   SYNSEM [ LKEYS.KEYREL.CARG "tucson",
            PHON.ONSET con ] ].

tudarmstadt_nd := n_proper_city_le &
 [ STEM < "tu", "darmstadt" >,
   SYNSEM [ LKEYS.KEYREL.CARG "tudarmstadt",
            PHON.ONSET con ] ].

tue := n_proper_le &
 [ STEM < "tue" >,
   SYNSEM [ LKEYS.KEYREL.CARG "tue",
            PHON.ONSET con ] ].

tuebingen_n1 := n_proper_city_le &
 [ STEM < "tuebingen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "tuebingen",
            PHON.ONSET con ] ].

tuesday_n1 := n_day_of_week_le &
 [ STEM < "tuesday" >,
   SYNSEM [ LKEYS.KEYREL.CARG "tue",
            PHON.ONSET con ] ].

tuesday_n2 := n_day_of_week_le &
 [ STEM < "tues" >,
   SYNSEM [ LKEYS.KEYREL.CARG "tue",
            PHON.ONSET con ] ].

tuesday_n3 := n_day_of_week_le &
 [ STEM < "tues." >,
   SYNSEM [ LKEYS.KEYREL.CARG "tue",
            PHON.ONSET con ] ].

tuft_n1 := n_ppof_le &
 [ STEM < "tuft" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tuft_n_of_rel",
            PHON.ONSET con ] ].

tufts_n1 := n_proper_le &
 [ STEM < "tufts" >,
   SYNSEM [ LKEYS.KEYREL.CARG "tufts",
            PHON.ONSET con ] ].

tug_at_v1 := v_empty_prep_intrans_le &
 [ STEM < "tug" >,
   SYNSEM [ LKEYS [ --COMPKEY _at_p_sel_rel,
                    KEYREL.PRED "_tug_v_at_rel" ],
            PHON.ONSET con ] ].

tug_n1 := n_intr_le &
 [ STEM < "tug" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tug_n_1_rel",
            PHON.ONSET con ] ].

tug_on_v1 := v_empty_prep_intrans_le &
 [ STEM < "tug" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_tug_v_on_rel" ],
            PHON.ONSET con ] ].

tug_v1 := v_np*_trans_le &
 [ STEM < "tug" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tug_v_1_rel",
            PHON.ONSET con ] ].

tuition_n1 := n_mass_le &
 [ STEM < "tuition" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tuition_n_1_rel",
            PHON.ONSET con ] ].

tulip_n1 := n_intr_le &
 [ STEM < "tulip" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tulip_n_1_rel",
            PHON.ONSET con ] ].

tumble_n1 := n_intr_le &
 [ STEM < "tumble" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tumble_n_1_rel",
            PHON.ONSET con ] ].

tumble_v1 := v_prep_dir_le &
 [ STEM < "tumble" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tumble_v_1_rel",
            PHON.ONSET con ] ].

tumor_n1 := n_intr_le &
 [ STEM < "tumor" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tumor_n_1_rel",
            PHON.ONSET con ] ].

tundra-like_a1 := adj_intrans_le &
 [ STEM < "tundra-", "like" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tundra+like_a_1_rel",
            PHON.ONSET con ] ].

tundra_a1 := adj_attr_intrans_le &
 [ STEM < "tundra" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tundra_a_1_rel",
            PHON.ONSET con ] ].

tundra_n1 := n_mass_no_cmpnd_le &
 [ STEM < "tundra" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tundra_n_1_rel",
            PHON.ONSET con ] ].

tune_in_v1 := v_particle_np_le &
 [ STEM < "tune" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_tune_v_in_rel" ],
            PHON.ONSET con ] ].

tune_in_v2 := v_particle_le &
 [ STEM < "tune" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_tune_v_in_rel" ],
            PHON.ONSET con ] ].

tune_n1 := n_intr_le &
 [ STEM < "tune" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tune_n_1_rel",
            PHON.ONSET con ] ].

tune_out_v1 := v_particle_np_le &
 [ STEM < "tune" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_tune_v_out_rel" ],
            PHON.ONSET con ] ].

tune_out_v2 := v_particle_le &
 [ STEM < "tune" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_tune_v_out_rel" ],
            PHON.ONSET con ] ].

tune_up_v1 := v_particle_np_le &
 [ STEM < "tune" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_tune_v_up_rel" ],
            PHON.ONSET con ] ].

tune_up_v2 := v_particle_le &
 [ STEM < "tune" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_tune_v_up_rel" ],
            PHON.ONSET con ] ].

tune_v1 := v_np*_trans_le &
 [ STEM < "tune" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tune_v_1_rel",
            PHON.ONSET con ] ].

tungsten_n1 := n_mass_le &
 [ STEM < "tungsten" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tungsten_n_1_rel",
            PHON.ONSET con ] ].

tunnel_n1 := n_intr_le &
 [ STEM < "tunnel" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tunnel_n_1_rel",
            PHON.ONSET con ] ].

tuoloni_n1 := n_proper_le &
 [ STEM < "tuoloni" >,
   SYNSEM [ LKEYS.KEYREL.CARG "tuoloni",
            PHON.ONSET con ] ].

turbulence_n1 := n_mass_le &
 [ STEM < "turbulence" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_turbulence_n_1_rel",
            PHON.ONSET con ] ].

turbulent_a1 := adj_intrans_le &
 [ STEM < "turbulent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_turbulent_a_1_rel",
            PHON.ONSET con ] ].

turf_n1 := n_mass_le &
 [ STEM < "turf" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_turf_n_1_rel",
            PHON.ONSET con ] ].

turgite_n1 := n_mass_le &
 [ STEM < "turgite" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_turgite_n_1_rel",
            PHON.ONSET con ] ].

turid_n1 := n_proper_le &
 [ STEM < "turid" >,
   SYNSEM [ LKEYS.KEYREL.CARG "turid",
            PHON.ONSET con ] ].

turinformasjonen_n1 := n_proper_le &
 [ STEM < "turinformasjonen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "turinformasjonen",
            PHON.ONSET con ] ].

turistforening := n_proper_le &
 [ STEM < "turistforening" >,
   SYNSEM [ LKEYS.KEYREL.CARG "turistforening",
            PHON.ONSET con ] ].

turisthotell_n1 := n_proper_le &
 [ STEM < "turisthotell" >,
   SYNSEM [ LKEYS.KEYREL.CARG "turisthotell",
            PHON.ONSET con ] ].

turisthytte := n_proper_le &
 [ STEM < "turisthytte" >,
   SYNSEM [ LKEYS.KEYREL.CARG "turisthytte",
            PHON.ONSET con ] ].

turistinformasjonen_n1 := n_proper_le &
 [ STEM < "turistinformasjonen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "turistinformasjonen",
            PHON.ONSET con ] ].

turistsenter_n1 := n_proper_le &
 [ STEM < "turistsenter" >,
   SYNSEM [ LKEYS.KEYREL.CARG "turistsenter",
            PHON.ONSET con ] ].

turiststasjon_n1 := n_proper_le &
 [ STEM < "turiststasjon" >,
   SYNSEM [ LKEYS.KEYREL.CARG "turiststasjon",
            PHON.ONSET con ] ].

turlag_n1 := n_proper_le &
 [ STEM < "turlag" >,
   SYNSEM [ LKEYS.KEYREL.CARG "turlag",
            PHON.ONSET con ] ].

turlaget_n1 := n_proper_le &
 [ STEM < "turlaget" >,
   SYNSEM [ LKEYS.KEYREL.CARG "turlaget",
            PHON.ONSET con ] ].

turlid := n_proper_le &
 [ STEM < "turlid" >,
   SYNSEM [ LKEYS.KEYREL.CARG "turlid",
            PHON.ONSET con ] ].

turlidfossen := n_proper_le &
 [ STEM < "turlidfossen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "turlidfossen",
            PHON.ONSET con ] ].

turmoil_n1 := n_mass_count_le &
 [ STEM < "turmoil" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_turmoil_n_1_rel",
            PHON.ONSET con ] ].

turn_around_n1 := n_mass_le &
 [ STEM < "turn", "around" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_turn+around_n_1_rel",
            PHON.ONSET con ] ].

turn_down_v1 := v_particle_np_le &
 [ STEM < "turn" >,
   SYNSEM [ LKEYS [ --COMPKEY _down_p_sel_rel,
                    KEYREL.PRED "_turn_v_down_rel" ],
            PHON.ONSET con ] ].

turn_i_n1 := n_bare_nomod_le &
 [ STEM < "turn" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_turn_n_of_rel",
            PHON.ONSET con ] ].

turn_into_v1 := v_empty_prep_intrans_le &
 [ STEM < "turn" >,
   SYNSEM [ LKEYS [ --COMPKEY _into_p_sel_rel,
                    KEYREL.PRED "_turn_v_into_rel" ],
            PHON.ONSET con ] ].

turn_into_v2 := v_empty_prep_trans_le &
 [ STEM < "turn" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _into_p_sel_rel,
                    KEYREL.PRED "_turn_v_into_rel" ],
            PHON.ONSET con ] ].

turn_n1 := n_ppof_le &
 [ STEM < "turn" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_turn_n_of_rel",
            PHON.ONSET con ] ].

turn_off_v1 := v_particle_np_le &
 [ STEM < "turn" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_turn_v_off_rel" ],
            PHON.ONSET con ] ].

turn_off_v2 := v_particle_le &
 [ STEM < "turn" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_turn_v_off_rel" ],
            PHON.ONSET con ] ].

turn_out_expl_v1 := v_expl_it_subj_prtcl_cp_le &
 [ STEM < "turn" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_turn_v_out_rel" ],
            PHON.ONSET con ] ].

turn_out_v1 := v_particle_inf_le &
 [ STEM < "turn" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_turn_v_out_rel" ],
            PHON.ONSET con ] ].

turn_out_v2 := v_particle_prd_le &
 [ STEM < "turn" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_turn_v_out_rel" ],
            PHON.ONSET con ] ].

turn_over_v1 := v_particle_pp_le &
 [ STEM < "turn" >,
   SYNSEM [ LKEYS [ --COMPKEY _over_p_sel_rel,
                    --OCOMPKEY _to_p_rel,
                    KEYREL.PRED "_turn_v_over_rel" ],
            PHON.ONSET con ] ].

turn_over_v2 := v_particle_np_le &
 [ STEM < "turn" >,
   SYNSEM [ LKEYS [ --COMPKEY _over_p_sel_rel,
                    KEYREL.PRED "_turn_v_over_rel" ],
            PHON.ONSET con ] ].

turn_over_v3 := v_particle_le &
 [ STEM < "turn" >,
   SYNSEM [ LKEYS [ --COMPKEY _over_p_sel_rel,
                    KEYREL.PRED "_turn_v_over_rel" ],
            PHON.ONSET con ] ].

turn_up_v3 := v_particle_le &
 [ STEM < "turn" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_turn_v_up_rel" ],
            PHON.ONSET con ] ].

turn_up_v4 := v_particle_np_le &
 [ STEM < "turn" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_turn_v_up_rel" ],
            PHON.ONSET con ] ].

turn_v1 := v_prep_dir_le &
 [ STEM < "turn" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_turn_v_1_rel",
            PHON.ONSET con ] ].

turn_v2 := v_prd_ssr_adj_le &
 [ STEM < "turn" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_turn_v_prd_rel",
            PHON.ONSET con ] ].

turn_v3 := v_np_trans_noger_le &
 [ STEM < "turn" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_turn_v_1_rel",
            PHON.ONSET con ] ].

turnout_n1 := n_intr_le &
 [ STEM < "turnout" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_turnout_n_1_rel",
            PHON.ONSET con ] ].

turntable_n1 := n_intr_le &
 [ STEM < "turntable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_turntable_n_1_rel",
            PHON.ONSET con ] ].

turquoise_a1 := adj_intrans_le &
 [ STEM < "turquoise" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_turquoise_a_1_rel",
            PHON.ONSET con ] ].

turret_n1 := n_intr_le &
 [ STEM < "turret" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_turret_n_1_rel",
            PHON.ONSET con ] ].

turrsjÃ¸en_n1 := n_proper_city_le &
 [ STEM < "turrsjÃ¸en" >,
   SYNSEM [ LKEYS.KEYREL.CARG "turrsjÃ¸en",
            PHON.ONSET con ] ].

turtagrÃ¸_n1 := n_proper_le &
 [ STEM < "turtagrÃ¸" >,
   SYNSEM [ LKEYS.KEYREL.CARG "turtagrÃ¸",
            PHON.ONSET con ] ].

tushanwan_n1 := n_proper_le &
 [ STEM < "tushanwan" >,
   SYNSEM [ LKEYS.KEYREL.CARG "tushanwan",
            PHON.ONSET con ] ].

tussetind_n1 := n_proper_le &
 [ STEM < "tussetind" >,
   SYNSEM [ LKEYS.KEYREL.CARG "tussetind",
            PHON.ONSET con ] ].

tutor_n1 := n_ppof_le &
 [ STEM < "tutor" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tutor_n_of_rel",
            PHON.ONSET con ] ].

tutorial_n1 := n_intr_le &
 [ STEM < "tutorial" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tutorial_n_1_rel",
            PHON.ONSET con ] ].

tutu_n1 := n_proper_le &
 [ STEM < "tutu" >,
   SYNSEM [ LKEYS.KEYREL.CARG "tutu",
            PHON.ONSET con ] ].

tuwien_nd := n_proper_le &
 [ STEM < "tu", "wien" >,
   SYNSEM [ LKEYS.KEYREL.CARG "tuwien",
            PHON.ONSET con ] ].

tv_n1 := n_mass_count_le &
 [ STEM < "tv" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tv_n_1_rel",
            PHON.ONSET con ] ].

tv_n2 := n_mass_count_le &
 [ STEM < "t", "v" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tv_n_1_rel",
            PHON.ONSET con ] ].

tverrbyttfjellet_n1 := n_proper_le &
 [ STEM < "tverrbyttfjellet" >,
   SYNSEM [ LKEYS.KEYREL.CARG "tverrbyttfjellet",
            PHON.ONSET con ] ].

tverrdalsnosi_n1 := n_proper_le &
 [ STEM < "tverrdalsnosi" >,
   SYNSEM [ LKEYS.KEYREL.CARG "tverrdalsnosi",
            PHON.ONSET con ] ].

tvindehaugen_n1 := n_proper_le &
 [ STEM < "tvindehaugen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "tvindehaugen",
            PHON.ONSET con ] ].

twelfth := adj_bare_unspecified_ord_two_le &
 [ STEM < "twelfth" >,
   SYNSEM [ LKEYS.KEYREL.CARG "12",
            PHON.ONSET con ] ].

twelfth_day := n_day_of_month_le &
 [ STEM < "twelfth" >,
   SYNSEM [ LKEYS.KEYREL.CARG "12",
            PHON.ONSET con ] ].

twelfth_day_num := n_day_of_month_le &
 [ STEM < "12th" >,
   SYNSEM [ LKEYS.KEYREL.CARG "12",
            PHON.ONSET con ] ].

twelve := adj_bare_unspecified_card_two_le &
 [ STEM < "twelve" >,
   SYNSEM [ LKEYS.KEYREL.CARG "12",
            PHON.ONSET con ] ].

twelve_day := n_day_of_month_card_le &
 [ STEM < "twelve" >,
   SYNSEM [ LKEYS.KEYREL.CARG "12",
            PHON.ONSET con ] ].

twelve_day_num := n_day_of_month_card_le &
 [ STEM < "12" >,
   SYNSEM [ LKEYS.KEYREL.CARG "12",
            PHON.ONSET con ] ].

twelve_day_num_yofc := n_day_of_month_card_yofc_le &
 [ STEM < "12" >,
   SYNSEM [ LKEYS.KEYREL.CARG "12",
            PHON.ONSET con ] ].

twelve_day_yofc := n_day_of_month_card_yofc_le &
 [ STEM < "twelve" >,
   SYNSEM [ LKEYS.KEYREL.CARG "12",
            PHON.ONSET con ] ].

twelve_hour := n_hour_le &
 [ STEM < "twelve" >,
   SYNSEM [ LKEYS.KEYREL.CARG "12",
            PHON.ONSET con ] ].

twelvedigitordersatz := adj_bare_unspecified_ord_twelve_le &
 [ STEM < "twelvedigitordersatz" >,
   SYNSEM [ LKEYS.KEYREL [ CARG "dig12ersatz",
                             PRED const_rel ],
            PHON.ONSET onset ] ].

twelvish := n_approx_hour_le &
 [ STEM < "twelvish" >,
   SYNSEM [ LKEYS.KEYREL.CARG "12",
            PHON.ONSET con ] ].

twenties_n1 := n_plur_xmod_le &
 [ STEM < "twenties" >,
   SYNSEM [ LKEYS.KEYREL.CARG "20",
            PHON.ONSET con ] ].

twentieth := adj_bare_unspecified_ord_two_le &
 [ STEM < "twentieth" >,
   SYNSEM [ LKEYS.KEYREL.CARG "20",
            PHON.ONSET con ] ].

twentieth_day := n_day_of_month_le &
 [ STEM < "twentieth" >,
   SYNSEM [ LKEYS.KEYREL.CARG "20",
            PHON.ONSET con ] ].

twentieth_day_num := n_day_of_month_le &
 [ STEM < "20th" >,
   SYNSEM [ LKEYS.KEYREL.CARG "20",
            PHON.ONSET con ] ].

twenty := adj_bare_unspecified_card_two_le &
 [ STEM < "twenty" >,
   SYNSEM [ LKEYS.KEYREL.CARG "20",
            PHON.ONSET con ] ].

twenty_day := n_day_of_month_card_le &
 [ STEM < "twenty" >,
   SYNSEM [ LKEYS.KEYREL.CARG "20",
            PHON.ONSET con ] ].

twenty_day_num := n_day_of_month_card_le &
 [ STEM < "20" >,
   SYNSEM [ LKEYS.KEYREL.CARG "20",
            PHON.ONSET con ] ].

twenty_day_num_yofc := n_day_of_month_card_yofc_le &
 [ STEM < "20" >,
   SYNSEM [ LKEYS.KEYREL.CARG "20",
            PHON.ONSET con ] ].

twenty_day_yofc := n_day_of_month_card_yofc_le &
 [ STEM < "twenty" >,
   SYNSEM [ LKEYS.KEYREL.CARG "20",
            PHON.ONSET con ] ].

twenty_num := adj_bare_unspecified_card_two_le &
 [ STEM < "20" >,
   SYNSEM [ LKEYS.KEYREL.CARG "20",
            PHON.ONSET con ] ].

twenty_one_day := n_day_of_month_card_le &
 [ STEM < "twenty", "one" >,
   SYNSEM [ LKEYS.KEYREL.CARG "21",
            PHON.ONSET con ] ].

twenty_one_day_2 := n_day_of_month_card_le &
 [ STEM < "twenty-", "one" >,
   SYNSEM [ LKEYS.KEYREL.CARG "21",
            PHON.ONSET con ] ].

twenty_one_day_2_yofc := n_day_of_month_card_yofc_le &
 [ STEM < "twenty-", "one" >,
   SYNSEM [ LKEYS.KEYREL.CARG "21",
            PHON.ONSET con ] ].

twenty_one_day_yofc := n_day_of_month_card_yofc_le &
 [ STEM < "twenty", "one" >,
   SYNSEM [ LKEYS.KEYREL.CARG "21",
            PHON.ONSET con ] ].

twenty_w_comps := adj_complemented_unspecified_card_le &
 [ STEM < "twenty" >,
   SYNSEM [ LKEYS.KEYREL.CARG "20",
            PHON.ONSET con ] ].

twentyeight_day := n_day_of_month_card_le &
 [ STEM < "twenty", "eight" >,
   SYNSEM [ LKEYS.KEYREL.CARG "28",
            PHON.ONSET con ] ].

twentyeight_day_2 := n_day_of_month_card_le &
 [ STEM < "twenty-", "eight" >,
   SYNSEM [ LKEYS.KEYREL.CARG "28",
            PHON.ONSET con ] ].

twentyeight_day_2_yofc := n_day_of_month_card_yofc_le &
 [ STEM < "twenty-", "eight" >,
   SYNSEM [ LKEYS.KEYREL.CARG "28",
            PHON.ONSET con ] ].

twentyeight_day_num := n_day_of_month_card_le &
 [ STEM < "28" >,
   SYNSEM [ LKEYS.KEYREL.CARG "28",
            PHON.ONSET con ] ].

twentyeight_day_num_yofc := n_day_of_month_card_yofc_le &
 [ STEM < "28" >,
   SYNSEM [ LKEYS.KEYREL.CARG "28",
            PHON.ONSET con ] ].

twentyeight_day_yofc := n_day_of_month_card_yofc_le &
 [ STEM < "twenty", "eight" >,
   SYNSEM [ LKEYS.KEYREL.CARG "28",
            PHON.ONSET con ] ].

twentyeighth_day := n_day_of_month_le &
 [ STEM < "twenty", "eighth" >,
   SYNSEM [ LKEYS.KEYREL.CARG "28",
            PHON.ONSET con ] ].

twentyeighth_day_2 := n_day_of_month_le &
 [ STEM < "twenty-", "eighth" >,
   SYNSEM [ LKEYS.KEYREL.CARG "28",
            PHON.ONSET con ] ].

twentyeighth_day_num := n_day_of_month_le &
 [ STEM < "28th" >,
   SYNSEM [ LKEYS.KEYREL.CARG "28",
            PHON.ONSET con ] ].

twentyfifth_day := n_day_of_month_le &
 [ STEM < "twenty", "fifth" >,
   SYNSEM [ LKEYS.KEYREL.CARG "25",
            PHON.ONSET con ] ].

twentyfifth_day_2 := n_day_of_month_le &
 [ STEM < "twenty-", "fifth" >,
   SYNSEM [ LKEYS.KEYREL.CARG "25",
            PHON.ONSET con ] ].

twentyfifth_day_num := n_day_of_month_le &
 [ STEM < "25th" >,
   SYNSEM [ LKEYS.KEYREL.CARG "25",
            PHON.ONSET con ] ].

twentyfirst_day := n_day_of_month_le &
 [ STEM < "twenty", "first" >,
   SYNSEM [ LKEYS.KEYREL.CARG "21",
            PHON.ONSET con ] ].

twentyfirst_day_2 := n_day_of_month_le &
 [ STEM < "twenty-", "first" >,
   SYNSEM [ LKEYS.KEYREL.CARG "21",
            PHON.ONSET con ] ].

twentyfirst_day_num := n_day_of_month_le &
 [ STEM < "21st" >,
   SYNSEM [ LKEYS.KEYREL.CARG "21",
            PHON.ONSET con ] ].

twentyfive_day := n_day_of_month_card_le &
 [ STEM < "twenty", "five" >,
   SYNSEM [ LKEYS.KEYREL.CARG "25",
            PHON.ONSET con ] ].

twentyfive_day_2 := n_day_of_month_card_le &
 [ STEM < "twenty-", "five" >,
   SYNSEM [ LKEYS.KEYREL.CARG "25",
            PHON.ONSET con ] ].

twentyfive_day_2_yofc := n_day_of_month_card_yofc_le &
 [ STEM < "twenty-", "five" >,
   SYNSEM [ LKEYS.KEYREL.CARG "25",
            PHON.ONSET con ] ].

twentyfive_day_num := n_day_of_month_card_le &
 [ STEM < "25" >,
   SYNSEM [ LKEYS.KEYREL.CARG "25",
            PHON.ONSET con ] ].

twentyfive_day_num_yofc := n_day_of_month_card_yofc_le &
 [ STEM < "25" >,
   SYNSEM [ LKEYS.KEYREL.CARG "25",
            PHON.ONSET con ] ].

twentyfive_day_yofc := n_day_of_month_card_yofc_le &
 [ STEM < "twenty", "five" >,
   SYNSEM [ LKEYS.KEYREL.CARG "25",
            PHON.ONSET con ] ].

twentyfour_day := n_day_of_month_card_le &
 [ STEM < "twenty", "four" >,
   SYNSEM [ LKEYS.KEYREL.CARG "24",
            PHON.ONSET con ] ].

twentyfour_day_2 := n_day_of_month_card_le &
 [ STEM < "twenty-", "four" >,
   SYNSEM [ LKEYS.KEYREL.CARG "24",
            PHON.ONSET con ] ].

twentyfour_day_2_yofc := n_day_of_month_card_yofc_le &
 [ STEM < "twenty-", "four" >,
   SYNSEM [ LKEYS.KEYREL.CARG "24",
            PHON.ONSET con ] ].

twentyfour_day_num := n_day_of_month_card_le &
 [ STEM < "24" >,
   SYNSEM [ LKEYS.KEYREL.CARG "24",
            PHON.ONSET con ] ].

twentyfour_day_num_yofc := n_day_of_month_card_yofc_le &
 [ STEM < "24" >,
   SYNSEM [ LKEYS.KEYREL.CARG "24",
            PHON.ONSET con ] ].

twentyfour_day_yofc := n_day_of_month_card_yofc_le &
 [ STEM < "twenty", "four" >,
   SYNSEM [ LKEYS.KEYREL.CARG "24",
            PHON.ONSET con ] ].

twentyfourth_day := n_day_of_month_le &
 [ STEM < "twenty", "fourth" >,
   SYNSEM [ LKEYS.KEYREL.CARG "24",
            PHON.ONSET con ] ].

twentyfourth_day_2 := n_day_of_month_le &
 [ STEM < "twenty-", "fourth" >,
   SYNSEM [ LKEYS.KEYREL.CARG "24",
            PHON.ONSET con ] ].

twentyfourth_day_num := n_day_of_month_le &
 [ STEM < "24th" >,
   SYNSEM [ LKEYS.KEYREL.CARG "24",
            PHON.ONSET con ] ].

twentyish_approx := adj_approx_bare_unspecified_card_le &
 [ STEM < "twentyish" >,
   SYNSEM [ LKEYS.KEYREL.CARG "20",
            PHON.ONSET con ] ].

twentynine_day := n_day_of_month_card_le &
 [ STEM < "twenty", "nine" >,
   SYNSEM [ LKEYS.KEYREL.CARG "29",
            PHON.ONSET con ] ].

twentynine_day_2 := n_day_of_month_card_le &
 [ STEM < "twenty-", "nine" >,
   SYNSEM [ LKEYS.KEYREL.CARG "29",
            PHON.ONSET con ] ].

twentynine_day_2_yofc := n_day_of_month_card_yofc_le &
 [ STEM < "twenty-", "nine" >,
   SYNSEM [ LKEYS.KEYREL.CARG "29",
            PHON.ONSET con ] ].

twentynine_day_num := n_day_of_month_card_le &
 [ STEM < "29" >,
   SYNSEM [ LKEYS.KEYREL.CARG "29",
            PHON.ONSET con ] ].

twentynine_day_num_yofc := n_day_of_month_card_yofc_le &
 [ STEM < "29" >,
   SYNSEM [ LKEYS.KEYREL.CARG "29",
            PHON.ONSET con ] ].

twentynine_day_yofc := n_day_of_month_card_yofc_le &
 [ STEM < "twenty", "nine" >,
   SYNSEM [ LKEYS.KEYREL.CARG "29",
            PHON.ONSET con ] ].

twentyninth_day := n_day_of_month_le &
 [ STEM < "twenty", "ninth" >,
   SYNSEM [ LKEYS.KEYREL.CARG "29",
            PHON.ONSET con ] ].

twentyninth_day_2 := n_day_of_month_le &
 [ STEM < "twenty-", "ninth" >,
   SYNSEM [ LKEYS.KEYREL.CARG "29",
            PHON.ONSET con ] ].

twentyninth_day_num := n_day_of_month_le &
 [ STEM < "29th" >,
   SYNSEM [ LKEYS.KEYREL.CARG "29",
            PHON.ONSET con ] ].

twentyone_day_num := n_day_of_month_card_le &
 [ STEM < "21" >,
   SYNSEM [ LKEYS.KEYREL.CARG "21",
            PHON.ONSET con ] ].

twentyone_day_num_yofc := n_day_of_month_card_yofc_le &
 [ STEM < "21" >,
   SYNSEM [ LKEYS.KEYREL.CARG "21",
            PHON.ONSET con ] ].

twentysecond_day := n_day_of_month_le &
 [ STEM < "twenty", "second" >,
   SYNSEM [ LKEYS.KEYREL.CARG "22",
            PHON.ONSET con ] ].

twentysecond_day_2 := n_day_of_month_le &
 [ STEM < "twenty-", "second" >,
   SYNSEM [ LKEYS.KEYREL.CARG "22",
            PHON.ONSET con ] ].

twentysecond_day_num := n_day_of_month_le &
 [ STEM < "22nd" >,
   SYNSEM [ LKEYS.KEYREL.CARG "22",
            PHON.ONSET con ] ].

twentyseven_day := n_day_of_month_card_le &
 [ STEM < "twenty", "seven" >,
   SYNSEM [ LKEYS.KEYREL.CARG "27",
            PHON.ONSET con ] ].

twentyseven_day_2 := n_day_of_month_card_le &
 [ STEM < "twenty-", "seven" >,
   SYNSEM [ LKEYS.KEYREL.CARG "27",
            PHON.ONSET con ] ].

twentyseven_day_2_yofc := n_day_of_month_card_yofc_le &
 [ STEM < "twenty-", "seven" >,
   SYNSEM [ LKEYS.KEYREL.CARG "27",
            PHON.ONSET con ] ].

twentyseven_day_num := n_day_of_month_card_le &
 [ STEM < "27" >,
   SYNSEM [ LKEYS.KEYREL.CARG "27",
            PHON.ONSET con ] ].

twentyseven_day_num_yofc := n_day_of_month_card_yofc_le &
 [ STEM < "27" >,
   SYNSEM [ LKEYS.KEYREL.CARG "27",
            PHON.ONSET con ] ].

twentyseven_day_yofc := n_day_of_month_card_yofc_le &
 [ STEM < "twenty", "seven" >,
   SYNSEM [ LKEYS.KEYREL.CARG "27",
            PHON.ONSET con ] ].

twentyseventh_day := n_day_of_month_le &
 [ STEM < "twenty", "seventh" >,
   SYNSEM [ LKEYS.KEYREL.CARG "27",
            PHON.ONSET con ] ].

twentyseventh_day_2 := n_day_of_month_le &
 [ STEM < "twenty-", "seventh" >,
   SYNSEM [ LKEYS.KEYREL.CARG "27",
            PHON.ONSET con ] ].

twentyseventh_day_num := n_day_of_month_le &
 [ STEM < "27th" >,
   SYNSEM [ LKEYS.KEYREL.CARG "27",
            PHON.ONSET con ] ].

twentysix_day := n_day_of_month_card_le &
 [ STEM < "twenty", "six" >,
   SYNSEM [ LKEYS.KEYREL.CARG "26",
            PHON.ONSET con ] ].

twentysix_day_2 := n_day_of_month_card_le &
 [ STEM < "twenty-", "six" >,
   SYNSEM [ LKEYS.KEYREL.CARG "26",
            PHON.ONSET con ] ].

twentysix_day_2_yofc := n_day_of_month_card_yofc_le &
 [ STEM < "twenty-", "six" >,
   SYNSEM [ LKEYS.KEYREL.CARG "26",
            PHON.ONSET con ] ].

twentysix_day_num := n_day_of_month_card_le &
 [ STEM < "26" >,
   SYNSEM [ LKEYS.KEYREL.CARG "26",
            PHON.ONSET con ] ].

twentysix_day_num_yofc := n_day_of_month_card_yofc_le &
 [ STEM < "26" >,
   SYNSEM [ LKEYS.KEYREL.CARG "26",
            PHON.ONSET con ] ].

twentysix_day_yofc := n_day_of_month_card_yofc_le &
 [ STEM < "twenty", "six" >,
   SYNSEM [ LKEYS.KEYREL.CARG "26",
            PHON.ONSET con ] ].

twentysixth_day := n_day_of_month_le &
 [ STEM < "twenty", "sixth" >,
   SYNSEM [ LKEYS.KEYREL.CARG "26",
            PHON.ONSET con ] ].

twentysixth_day_2 := n_day_of_month_le &
 [ STEM < "twenty-", "sixth" >,
   SYNSEM [ LKEYS.KEYREL.CARG "26",
            PHON.ONSET con ] ].

twentysixth_day_num := n_day_of_month_le &
 [ STEM < "26th" >,
   SYNSEM [ LKEYS.KEYREL.CARG "26",
            PHON.ONSET con ] ].

twentythird_day := n_day_of_month_le &
 [ STEM < "twenty", "third" >,
   SYNSEM [ LKEYS.KEYREL.CARG "23",
            PHON.ONSET con ] ].

twentythird_day_2 := n_day_of_month_le &
 [ STEM < "twenty-", "third" >,
   SYNSEM [ LKEYS.KEYREL.CARG "23",
            PHON.ONSET con ] ].

twentythird_day_num := n_day_of_month_le &
 [ STEM < "23rd" >,
   SYNSEM [ LKEYS.KEYREL.CARG "23",
            PHON.ONSET con ] ].

twentythree_day := n_day_of_month_card_le &
 [ STEM < "twenty", "three" >,
   SYNSEM [ LKEYS.KEYREL.CARG "23",
            PHON.ONSET con ] ].

twentythree_day_2 := n_day_of_month_card_le &
 [ STEM < "twenty-", "three" >,
   SYNSEM [ LKEYS.KEYREL.CARG "23",
            PHON.ONSET con ] ].

twentythree_day_2_yofc := n_day_of_month_card_yofc_le &
 [ STEM < "twenty-", "three" >,
   SYNSEM [ LKEYS.KEYREL.CARG "23",
            PHON.ONSET con ] ].

twentythree_day_num := n_day_of_month_card_le &
 [ STEM < "23" >,
   SYNSEM [ LKEYS.KEYREL.CARG "23",
            PHON.ONSET con ] ].

twentythree_day_num_yofc := n_day_of_month_card_yofc_le &
 [ STEM < "23" >,
   SYNSEM [ LKEYS.KEYREL.CARG "23",
            PHON.ONSET con ] ].

twentythree_day_yofc := n_day_of_month_card_yofc_le &
 [ STEM < "twenty", "three" >,
   SYNSEM [ LKEYS.KEYREL.CARG "23",
            PHON.ONSET con ] ].

twentytwo_day := n_day_of_month_card_le &
 [ STEM < "twenty", "two" >,
   SYNSEM [ LKEYS.KEYREL.CARG "22",
            PHON.ONSET con ] ].

twentytwo_day_2 := n_day_of_month_card_le &
 [ STEM < "twenty-", "two" >,
   SYNSEM [ LKEYS.KEYREL.CARG "22",
            PHON.ONSET con ] ].

twentytwo_day_2_yofc := n_day_of_month_card_yofc_le &
 [ STEM < "twenty-", "two" >,
   SYNSEM [ LKEYS.KEYREL.CARG "22",
            PHON.ONSET con ] ].

twentytwo_day_num := n_day_of_month_card_le &
 [ STEM < "22" >,
   SYNSEM [ LKEYS.KEYREL.CARG "22",
            PHON.ONSET con ] ].

twentytwo_day_num_yofc := n_day_of_month_card_yofc_le &
 [ STEM < "22" >,
   SYNSEM [ LKEYS.KEYREL.CARG "22",
            PHON.ONSET con ] ].

twentytwo_day_yofc := n_day_of_month_card_yofc_le &
 [ STEM < "twenty", "two" >,
   SYNSEM [ LKEYS.KEYREL.CARG "22",
            PHON.ONSET con ] ].

twice_adv1 := adv_int_vp_post_le &
 [ STEM < "twice" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_twice_a_1_rel",
            PHON.ONSET con ] ].

twice_deg := adv_degree_spec_v_le &
 [ STEM < "twice" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_twice_x_deg_rel",
            PHON.ONSET con ] ].

twice_pn1 := n_part_npcomp_agr_le &
 [ STEM < "twice" >,
   SYNSEM [ LKEYS.ALTKEYREL.PRED _twice_q_rel,
            PHON.ONSET con ] ].

twiddle_v1 := v_np_trans_le &
 [ STEM < "twiddle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_twiddle_v_1_rel",
            PHON.ONSET con ] ].

twig_n1 := n_intr_le &
 [ STEM < "twig" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_twig_n_1_rel",
            PHON.ONSET con ] ].

twilight_n1 := n_hour_le &
 [ STEM < "twilight" >,
   SYNSEM [ LKEYS.KEYREL.CARG "twilight",
            PHON.ONSET con ] ].

twilight_n2 := n_intr_le &
 [ STEM < "twilight" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_twilight_n_1_rel",
            PHON.ONSET con ] ].

twine_around_v1 := v_np_prep_trans_le &
 [ STEM < "twine" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _around_p_rel,
                    KEYREL.PRED "_twine_v_1_rel" ],
            PHON.ONSET con ] ].

twine_n1 := n_mass_le &
 [ STEM < "twine" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_twine_n_1_rel",
            PHON.ONSET con ] ].

twinkle_n1 := n_intr_le &
 [ STEM < "twinkle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_twinkle_n_1_rel",
            PHON.ONSET con ] ].

twinkle_v1 := v_unerg_le &
 [ STEM < "twinkle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_twinkle_v_1_rel",
            PHON.ONSET con ] ].

twinkling_n1 := n_ppof_le &
 [ STEM < "twinkling" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_twinkling_n_of_rel",
            PHON.ONSET con ] ].

twist_into_v1 := v_empty_prep_trans_le &
 [ STEM < "twist" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _into_p_sel_rel,
                    KEYREL.PRED "_twist_v_into_rel" ],
            PHON.ONSET con ] ].

twist_n1 := n_intr_le &
 [ STEM < "twist" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_twist_n_1_rel",
            PHON.ONSET con ] ].

twist_v1 := v_np*_trans_le &
 [ STEM < "twist" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_twist_v_1_rel",
            PHON.ONSET con ] ].

twitch_n1 := n_intr_le &
 [ STEM < "twitch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_twitch_n_1_rel",
            PHON.ONSET con ] ].

twitch_v1 := v_np*_trans_le &
 [ STEM < "twitch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_twitch_v_1_rel",
            PHON.ONSET con ] ].

two := adj_bare_unspecified_card_one_le &
 [ STEM < "two" >,
   SYNSEM [ LKEYS.KEYREL.CARG "2",
            PHON.ONSET con ] ].

two-thousand := n_year_le &
 [ STEM < "two", "thousand" >,
   SYNSEM [ LKEYS.KEYREL.CARG "2000",
            PHON.ONSET con ] ].

two-thousand_2 := n_year_le &
 [ STEM < "2000" >,
   SYNSEM [ LKEYS.KEYREL.CARG "2000",
            PHON.ONSET con ] ].

two-thousand_one_2 := n_year_le &
 [ STEM < "2001" >,
   SYNSEM [ LKEYS.KEYREL.CARG "2001",
            PHON.ONSET con ] ].

two-thousand_one_4 := n_year_le &
 [ STEM < "two", "thousand", "and", "one" >,
   SYNSEM [ LKEYS.KEYREL.CARG "2001",
            PHON.ONSET con ] ].

two-thousand_two_2 := n_year_le &
 [ STEM < "2002" >,
   SYNSEM [ LKEYS.KEYREL.CARG "2002",
            PHON.ONSET con ] ].

two-thousand_two_4 := n_year_le &
 [ STEM < "two", "thousand", "and", "two" >,
   SYNSEM [ LKEYS.KEYREL.CARG "2002",
            PHON.ONSET con ] ].

two_c := adj_bare_unspecified_card_wcomps_one_le &
 [ STEM < "two" >,
   SYNSEM [ LKEYS.KEYREL.CARG "2",
            PHON.ONSET con ] ].

two_day := n_day_of_month_card_le &
 [ STEM < "two" >,
   SYNSEM [ LKEYS.KEYREL.CARG "2",
            PHON.ONSET con ] ].

two_day_num := n_day_of_month_card_le &
 [ STEM < "2" >,
   SYNSEM [ LKEYS.KEYREL.CARG "2",
            PHON.ONSET con ] ].

two_day_num_yofc := n_day_of_month_card_yofc_le &
 [ STEM < "2" >,
   SYNSEM [ LKEYS.KEYREL.CARG "2",
            PHON.ONSET con ] ].

two_day_yofc := n_day_of_month_card_yofc_le &
 [ STEM < "two" >,
   SYNSEM [ LKEYS.KEYREL.CARG "2",
            PHON.ONSET con ] ].

two_digit_day := n_day_of_month_card_le &
 [ STEM < "twodigitersatz" >,
   SYNSEM [ LKEYS.KEYREL.CARG "twodigitersatz",
            PHON.ONSET con ] ].

two_digit_day_yofc := n_day_of_month_card_yofc_le &
 [ STEM < "twodigitersatz" >,
   SYNSEM [ LKEYS.KEYREL.CARG "twodigitersatz",
            PHON.ONSET con ] ].

two_digit_euro_day := n_day_of_month_euro_le &
 [ STEM < "twodigitersatz" >,
   SYNSEM [ LKEYS.KEYREL.CARG "twodigitersatz",
            PHON.ONSET con ] ].

two_digit_hour := n_hour_le &
 [ STEM < "twodigitersatz" >,
   SYNSEM [ LKEYS.KEYREL.CARG "twodigitersatz",
            PHON.ONSET con ] ].

two_dimensional_a1 := adj_intrans_le &
 [ STEM < "two", "dimensional" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_two-dimensional_a_1_rel",
            PHON.ONSET con ] ].

two_dimensional_a2 := adj_intrans_le &
 [ STEM < "two-", "dimensional" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_two-dimensional_a_1_rel",
            PHON.ONSET con ] ].

two_hour := n_hour_le &
 [ STEM < "two" >,
   SYNSEM [ LKEYS.KEYREL.CARG "2",
            PHON.ONSET con ] ].

two_hundreds_n1 := n_plur_xmod_le &
 [ STEM < "two", "hundreds" >,
   SYNSEM [ LKEYS.KEYREL.CARG "200",
            PHON.ONSET con ] ].

two_roman := adj_bare_unspecified_card_one_le &
 [ STEM < "II" >,
   SYNSEM [ LKEYS.KEYREL.CARG "II",
            PHON.ONSET con ] ].

two_thousand_one := n_year_le &
 [ STEM < "two", "thousand", "one" >,
   SYNSEM [ LKEYS.KEYREL.CARG "2001",
            PHON.ONSET con ] ].

two_thousand_three := n_year_le &
 [ STEM < "two", "thousand", "three" >,
   SYNSEM [ LKEYS.KEYREL.CARG "2003",
            PHON.ONSET con ] ].

two_thousand_two := n_year_le &
 [ STEM < "two", "thousand", "two" >,
   SYNSEM [ LKEYS.KEYREL.CARG "2002",
            PHON.ONSET con ] ].

twodigit_plur_n1 := n_plur_xmod_le &
 [ STEM < "twodigitersatz", "'s" >,
   SYNSEM [ LKEYS.KEYREL.CARG "twodigit_plur",
            PHON.ONSET onset ] ].

twodigitdomersatz := n_day_of_month_le &
 [ STEM < "twodigitordersatz" >,
   SYNSEM [ LKEYS.KEYREL.CARG "2digitdom",
            PHON.ONSET onset ] ].

twodigitordersatz := adj_bare_unspecified_ord_two_le &
 [ STEM < "twodigitordersatz" >,
   SYNSEM [ LKEYS.KEYREL [ CARG "dig2erstaz",
                             PRED const_rel ],
            PHON.ONSET onset ] ].

twodigitplur_n1 := n_plur_xmod_le &
 [ STEM < "twodigitersatz", "s" >,
   SYNSEM [ LKEYS.KEYREL.CARG "2digit",
            PHON.ONSET con ] ].

twoish := n_approx_hour_le &
 [ STEM < "twoish" >,
   SYNSEM [ LKEYS.KEYREL.CARG "2",
            PHON.ONSET con ] ].

tyburn_n1 := n_proper_le &
 [ STEM < "tyburn" >,
   SYNSEM [ LKEYS.KEYREL.CARG "tyburn",
            PHON.ONSET con ] ].

tyin := n_proper_le &
 [ STEM < "tyin" >,
   SYNSEM [ LKEYS.KEYREL.CARG "tyin",
            PHON.ONSET con ] ].

tyinholmen_n1 := n_proper_le &
 [ STEM < "tyinholmen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "tyinholmen",
            PHON.ONSET con ] ].

tyinkrysset := n_proper_le &
 [ STEM < "tyinkrysset" >,
   SYNSEM [ LKEYS.KEYREL.CARG "tyinkrysset",
            PHON.ONSET con ] ].

tyne_n1 := n_intr_le &
 [ STEM < "tyne" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tyne_n_1_rel",
            PHON.ONSET con ] ].

type_in_v1 := v_particle_np_le &
 [ STEM < "type" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_type_v_in_rel" ],
            PHON.ONSET con ] ].

type_n1 := n_ppcomp_spr_le &
 [ STEM < "type" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_type_n_of-n_rel",
            PHON.ONSET con ] ].

type_n2 := n_ppof_le &
 [ STEM < "type" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_type_n_of-n_rel",
            PHON.ONSET con ] ].

type_out_v1 := v_particle_np_le &
 [ STEM < "type" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_type_v_out_rel" ],
            PHON.ONSET con ] ].

type_pl_n1 := n_plur_sing_ppcomp_le &
 [ STEM < "type" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_type_n_of_rel" ],
            PHON.ONSET con ] ].

type_up_v1 := v_particle_np_le &
 [ STEM < "type" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_type_v_up_rel" ],
            PHON.ONSET con ] ].

type_v1 := v_np*_trans_le &
 [ STEM < "type" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_type_v_1_rel",
            PHON.ONSET con ] ].

typewritten_a1 := adj_intrans_le &
 [ STEM < "typewritten" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_typewritten_a_1_rel",
            PHON.ONSET con ] ].

typhoid_n1 := n_mass_le &
 [ STEM < "typhoid" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_typhoid_n_1_rel",
            PHON.ONSET con ] ].

typical_a1 := adj_trans_le &
 [ STEM < "typical" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_typical_a_of_rel" ],
            PHON.ONSET con ] ].

typically := adv_int_vp_aux_le &
 [ STEM < "typically" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_typical_a_of_rel",
            PHON.ONSET con ] ].

typo_n1 := n_intr_le &
 [ STEM < "typo" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_typo_n_1_rel",
            PHON.ONSET con ] ].

tyro_n1 := n_intr_le &
 [ STEM < "tyro" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tyro_n_1_rel",
            PHON.ONSET con ] ].

tyvek_n1 := n_mass_count_le &
 [ STEM < "tyvek" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tyvek_n_1_rel",
            PHON.ONSET con ] ].

u_np1 := n_proper_sg_le &
 [ STEM < "_u" >,
   SYNSEM [ LKEYS.KEYREL.CARG "u",
            PHON.ONSET con ] ].

u_period_np1 := n_proper_le &
 [ STEM < "u." >,
   SYNSEM [ LKEYS.KEYREL.CARG "u",
            PHON.ONSET con ] ].

u_period_np2 := n_proper_le &
 [ STEM < "_u." >,
   SYNSEM [ LKEYS.KEYREL.CARG "u",
            PHON.ONSET con ] ].

u_pro := n_pers_pro_you_le &
 [ STEM < "u" >,
   SYNSEM.PHON.ONSET con ].

u_shaped_a1 := adj_intrans_le &
 [ STEM < "u-", "shaped" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_u+shaped_a_1_rel",
            PHON.ONSET con ] ].

ugly_adj := adj_intrans_le &
 [ STEM < "ugly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ugly_a_1_rel",
            PHON.ONSET voc ] ].

uh_disc_adv := adv_disc_like_preh_le &
 [ STEM < "uh" >,
   SYNSEM [ LKEYS.KEYREL.CARG "uh",
            PHON.ONSET onset ] ].

uh_huh_root_post := adv_s_post_word_nospec_le &
 [ STEM < "uh", "huh" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_uh+huh_a_1_rel",
            PHON.ONSET voc ] ].

uh_huh_root_post_2 := adv_s_post_word_nospec_le &
 [ STEM < "uh-", "huh" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_uh+huh_a_1_rel",
            PHON.ONSET voc ] ].

uh_huh_root_post_3 := adv_s_post_word_nospec_le &
 [ STEM < "uhhuh" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_uh+huh_a_1_rel",
            PHON.ONSET voc ] ].

uh_huh_root_pre := adv_s_pre_word_root_le &
 [ STEM < "uh", "huh" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_uh+huh_a_1_rel",
            PHON.ONSET voc ] ].

uh_huh_root_pre_2 := adv_s_pre_word_root_le &
 [ STEM < "uh-", "huh" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_uh+huh_a_1_rel",
            PHON.ONSET voc ] ].

uh_huh_root_pre_3 := adv_s_pre_word_root_le &
 [ STEM < "uhhuh" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_uh+huh_a_1_rel",
            PHON.ONSET voc ] ].

uh_root_post := adv_s_post_word_nospec_le &
 [ STEM < "uh" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_uh_x_rel",
            PHON.ONSET voc ] ].

ukraine_n1 := n_proper_le &
 [ STEM < "ukraine" >,
   SYNSEM [ LKEYS.KEYREL.CARG "ukraine",
            PHON.ONSET voc ] ].

ukulele_n1 := n_intr_le &
 [ STEM < "ukulele" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ukulele_n_1_rel",
            PHON.ONSET con ] ].

ulan_bator_n1 := n_proper_city_le &
 [ STEM < "ulan", "bator" >,
   SYNSEM [ LKEYS.KEYREL.CARG "ulan_bator",
            PHON.ONSET con ] ].

ulf_n1 := n_proper_le &
 [ STEM < "ulf" >,
   SYNSEM [ LKEYS.KEYREL.CARG "ulf",
            PHON.ONSET voc ] ].

ulm_n1 := n_proper_city_le &
 [ STEM < "ulm" >,
   SYNSEM [ LKEYS.KEYREL.CARG "ulm",
            PHON.ONSET voc ] ].

ulrik_n1 := n_proper_le &
 [ STEM < "ulrik" >,
   SYNSEM [ LKEYS.KEYREL.CARG "ulrik",
            PHON.ONSET voc ] ].

ultimate_a1 := adj_intrans_le &
 [ STEM < "ultimate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ultimate_a_1_rel",
            PHON.ONSET voc ] ].

ulvanosa := n_proper_le &
 [ STEM < "ulvanosa" >,
   SYNSEM [ LKEYS.KEYREL.CARG "ulvanosa",
            PHON.ONSET voc ] ].

ulvik := n_proper_le &
 [ STEM < "ulvik" >,
   SYNSEM [ LKEYS.KEYREL.CARG "ulvik",
            PHON.ONSET voc ] ].

ulysses_s_grant_n1 := n_proper_le &
 [ STEM < "ulysses", "s", "grant" >,
   SYNSEM [ LKEYS.KEYREL.CARG "ulysses_s_grant",
            PHON.ONSET voc ] ].

um_disc_adv := adv_disc_like_preh_le &
 [ STEM < "um" >,
   SYNSEM [ LKEYS.KEYREL.CARG "um",
            PHON.ONSET voc ] ].

um_disc_adv_2 := adv_s_post_word_nospec_le &
 [ STEM < "um" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_um_a_1_rel",
            PHON.ONSET voc ] ].

um_ersatz := adv_disc_like_preh_le &
 [ STEM < "umersatz" >,
   SYNSEM [ LKEYS.KEYREL.CARG "umm",
            PHON.ONSET con ] ].

umbrella_n1 := n_intr_le &
 [ STEM < "umbrella" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_umbrella_n_1_rel",
            PHON.ONSET voc ] ].

umeÃ¥ := n_proper_le &
 [ STEM < "umeÃ¥" >,
   SYNSEM [ LKEYS.KEYREL.CARG "umeÃ¥",
            PHON.ONSET voc ] ].

umlaut_n1 := n_intr_le &
 [ STEM < "umlaut" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_umlaut_n_1_rel",
            PHON.ONSET voc ] ].

umm_root := adv_disc_like_preh_le &
 [ STEM < "umm" >,
   SYNSEM [ LKEYS.KEYREL.CARG "umm",
            PHON.ONSET voc ] ].

umpteen := det_pl_le &
 [ STEM < "umpteen" >,
   SYNSEM [ LKEYS.KEYREL.PRED _umpteen_q_rel,
            PHON.ONSET voc ] ].

un_n1 := n_intr_named_le &
 [ STEM < "un" >,
   SYNSEM [ LKEYS.KEYREL.CARG "un",
            PHON.ONSET voc ] ].

unabashed_a1 := adj_intrans_le &
 [ STEM < "unabashed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unabashed_a_1_rel",
            PHON.ONSET voc ] ].

unable_a1 := adj_attr_intrans_le &
 [ STEM < "unable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unable_a_1_rel",
            PHON.ONSET voc ] ].

unable_a2 := adj_reg_equi_le &
 [ STEM < "unable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unable_a_1_rel",
            PHON.ONSET voc ] ].

unacceptable_isect := adj_intrans_le &
 [ STEM < "unacceptable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unacceptable_a_1_rel",
            PHON.ONSET voc ] ].

unacceptably := adv_int_vp_le &
 [ STEM < "unacceptably" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unacceptable_a_1_rel",
            PHON.ONSET voc ] ].

unaccustomed_a1 := adj_intrans_le &
 [ STEM < "unaccustomed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unaccustomed_a_1_rel",
            PHON.ONSET voc ] ].

unaffected_a1 := adj_intrans_le &
 [ STEM < "unaffected" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unaffected_a_1_rel",
            PHON.ONSET voc ] ].

unaltered_a1 := adj_intrans_le &
 [ STEM < "unaltered" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unaltered_a_1_rel",
            PHON.ONSET voc ] ].

unanimity_n1 := n_mass_le &
 [ STEM < "unanimity" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unanimity_n_1_rel",
            PHON.ONSET con ] ].

unavailable_a1 := adj_intrans_le &
 [ STEM < "unavailable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unavailable_a_1_rel",
            PHON.ONSET voc ] ].

unavoidable_a1 := adj_intrans_le &
 [ STEM < "unavoidable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unavoidable_a_1_rel",
            PHON.ONSET voc ] ].

unaware_a1 := adj_trans_le &
 [ STEM < "unaware" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_unaware_a_of_rel" ],
            PHON.ONSET voc ] ].

unawares_a1 := adj_intrans_le &
 [ STEM < "unawares" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unawares_a_1_rel",
            PHON.ONSET voc ] ].

unbalance_v1 := v_np_trans_le &
 [ STEM < "unbalance" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unbalance_v_1_rel",
            PHON.ONSET voc ] ].

unbearable_a1 := adj_intrans_le &
 [ STEM < "unbearable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unbearable_a_1_rel",
            PHON.ONSET voc ] ].

unbeatable_a1 := adj_intrans_le &
 [ STEM < "unbeatable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unbeatable_a_1_rel",
            PHON.ONSET voc ] ].

unbelievable_isect := adj_intrans_le &
 [ STEM < "unbelievable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unbelievable_a_1_rel",
            PHON.ONSET voc ] ].

unbelievably_adv := adv_s_pre_le &
 [ STEM < "unbelievably" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unbelievable_a_1_rel",
            PHON.ONSET voc ] ].

unbelievably_deg := adv_degree_spec_v_le &
 [ STEM < "unbelievably" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unbelievably_x_deg_rel",
            PHON.ONSET voc ] ].

unborn_a1 := adj_intrans_le &
 [ STEM < "unborn" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unborn_a_1_rel",
            PHON.ONSET voc ] ].

unborn_n1 := n_plur_nocmpnd_le &
 [ STEM < "unborn" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unborn_n_1_rel",
            PHON.ONSET voc ] ].

unbounded_a1 := adj_intrans_le &
 [ STEM < "unbounded" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unbounded_a_1_rel",
            PHON.ONSET voc ] ].

unbranched_a1 := adj_intrans_le &
 [ STEM < "unbranched" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unbranched_a_1_rel",
            PHON.ONSET voc ] ].

unbreakable_a1 := adj_intrans_le &
 [ STEM < "unbreakable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unbreakable_a_1_rel",
            PHON.ONSET voc ] ].

unbroken_a1 := adj_intrans_le &
 [ STEM < "unbroken" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unbroken_a_1_rel",
            PHON.ONSET voc ] ].

uncertain_a1 := adj_trans_le &
 [ STEM < "uncertain" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_uncertain_a_of_rel" ],
            PHON.ONSET voc ] ].

uncertainty_n1 := n_mass_count_cpcomp_fin_le &
 [ STEM < "uncertainty" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_uncertainty_n_1_rel",
            PHON.ONSET voc ] ].

uncertainty_n2 := n_mass_count_le &
 [ STEM < "uncertainty" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_uncertainty_n_1_rel",
            PHON.ONSET voc ] ].

unchanged_a1 := adj_intrans_le &
 [ STEM < "unchanged" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unchanged_a_1_rel",
            PHON.ONSET voc ] ].

unchanging_a1 := adj_intrans_le &
 [ STEM < "unchanging" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unchanging_a_1_rel",
            PHON.ONSET voc ] ].

unchaste_a1 := adj_intrans_le &
 [ STEM < "unchaste" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unchaste_a_1_rel",
            PHON.ONSET voc ] ].

unchristian_a1 := adj_intrans_le &
 [ STEM < "unchristian" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unchristian_a_1_rel",
            PHON.ONSET voc ] ].

uncle_n1 := n_intr_le &
 [ STEM < "uncle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_uncle_n_1_rel",
            PHON.ONSET voc ] ].

uncle_title := n_title_le &
 [ STEM < "uncle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_uncle_n_1_rel",
            PHON.ONSET voc ] ].

unclimbable_a1 := adj_intrans_le &
 [ STEM < "unclimbable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unclimbable_a_1_rel",
            PHON.ONSET voc ] ].

uncombined_a1 := adj_intrans_le &
 [ STEM < "uncombined" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_uncombined_a_1_rel",
            PHON.ONSET voc ] ].

uncomfortable_a1 := adj_intrans_le &
 [ STEM < "uncomfortable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_uncomfortable_a_1_rel",
            PHON.ONSET voc ] ].

uncomfortably := adv_int_vp_le &
 [ STEM < "uncomfortably" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_uncomfortable_a_1_rel",
            PHON.ONSET voc ] ].

uncommon_a1 := adj_intrans_le &
 [ STEM < "uncommon" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_uncommon_a_1_rel",
            PHON.ONSET voc ] ].

uncommonly := adv_int_vp_le &
 [ STEM < "uncommonly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_uncommon_a_1_rel",
            PHON.ONSET voc ] ].

uncomplicated_isect := adj_intrans_le &
 [ STEM < "uncomplicated" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_uncomplicated_a_1_rel",
            PHON.ONSET voc ] ].

unconcentrated_a1 := adj_intrans_le &
 [ STEM < "unconcentrated" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unconcentrated_a_1_rel",
            PHON.ONSET voc ] ].

unconfirmed_a1 := adj_intrans_le &
 [ STEM < "unconfirmed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unconfirmed_a_1_rel",
            PHON.ONSET voc ] ].

unconscious_a1 := adj_intrans_le &
 [ STEM < "unconscious" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unconscious_a_1_rel",
            PHON.ONSET voc ] ].

unconsidered_isect := adj_intrans_le &
 [ STEM < "unconsidered" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unconsidered_a_1_rel",
            PHON.ONSET voc ] ].

uncool_isect := adj_intrans_le &
 [ STEM < "uncool" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_uncool_a_1_rel",
            PHON.ONSET voc ] ].

uncouth_a1 := adj_intrans_le &
 [ STEM < "uncouth" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_uncouth_a_1_rel",
            PHON.ONSET voc ] ].

uncover_v1 := v_np_trans_le &
 [ STEM < "uncover" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_uncover_v_1_rel",
            PHON.ONSET voc ] ].

uncultivated_a1 := adj_intrans_le &
 [ STEM < "uncultivated" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_uncultivated_a_1_rel",
            PHON.ONSET voc ] ].

undecided_a1 := adj_intrans_le &
 [ STEM < "undecided" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_undecided_a_1_rel",
            PHON.ONSET voc ] ].

undefined_a1 := adj_intrans_le &
 [ STEM < "undefined" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_undefined_a_1_rel",
            PHON.ONSET voc ] ].

undeliverable_a1 := adj_intrans_le &
 [ STEM < "undeliverable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_undeliverable_a_1_rel",
            PHON.ONSET voc ] ].

undemanding_a1 := adj_intrans_le &
 [ STEM < "undemanding" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_undemanding_a_1_rel",
            PHON.ONSET voc ] ].

under := p_reg_le &
 [ STEM < "under" >,
   SYNSEM [ LKEYS.KEYREL.PRED _under_p_rel,
            PHON.ONSET voc ] ].

under_deg := adv_degree_spec_le &
 [ STEM < "under" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_under_x_deg_rel",
            PHON.ONSET voc ] ].

under_dollar_adj := adj_dollar_le &
 [ STEM < "under" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_under_a_dollar_rel",
            PHON.ONSET voc ] ].

underbrush_n1 := n_mass_le &
 [ STEM < "underbrush" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_underbrush_n_1_rel",
            PHON.ONSET voc ] ].

undercurrent_n1 := n_intr_le &
 [ STEM < "undercurrent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_undercurrent_n_1_rel",
            PHON.ONSET voc ] ].

underdose_n1 := n_intr_le &
 [ STEM < "underdose" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_underdose_n_1_rel",
            PHON.ONSET voc ] ].

underestimate_v1 := v_np_trans_le &
 [ STEM < "underestimate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_underestimate_v_1_rel",
            PHON.ONSET voc ] ].

underfoot_n1 := n_adv_event_le &
 [ STEM < "underfoot" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED _underfoot_a_1_rel,
                    KEYREL.PRED place_n_rel ],
            PHON.ONSET voc ] ].

undergarment_n1 := n_intr_le &
 [ STEM < "undergarment" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_undergarment_n_1_rel",
            PHON.ONSET voc ] ].

undergo_v1 := v_np_non_trans_le &
 [ STEM < "undergo" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_undergo_v_1_rel",
            PHON.ONSET voc ] ].

undergrad_n1 := n_intr_le &
 [ STEM < "undergrad" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_undergrad_n_1_rel",
            PHON.ONSET voc ] ].

undergraduate_n1 := n_intr_le &
 [ STEM < "undergraduate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_undergraduate_n_1_rel",
            PHON.ONSET voc ] ].

underground_a1 := adj_intrans_le &
 [ STEM < "underground" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_underground_a_1_rel",
            PHON.ONSET voc ] ].

underground_n1 := n_intr_named_le &
 [ STEM < "underground" >,
   SYNSEM [ LKEYS.KEYREL.CARG "underground",
            PHON.ONSET voc ] ].

underground_nom := n_adv_pl_le &
 [ STEM < "underground" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED _underground_a_1_rel,
                    KEYREL.PRED place_n_rel ],
            PHON.ONSET voc ] ].

underlie_v1 := v_np_non_trans_le &
 [ STEM < "underlie" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_underlie_v_1_rel",
            PHON.ONSET voc ] ].

underline_n1 := n_intr_le &
 [ STEM < "underline" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_underline_n_1_rel",
            PHON.ONSET voc ] ].

underline_v1 := v_np_trans_le &
 [ STEM < "underline" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_underline_v_1_rel",
            PHON.ONSET voc ] ].

undermine_v1 := v_np_trans_le &
 [ STEM < "undermine" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_undermine_v_1_rel",
            PHON.ONSET voc ] ].

underneath := p_reg_le &
 [ STEM < "underneath" >,
   SYNSEM [ LKEYS.KEYREL.PRED _underneath_p_rel,
            PHON.ONSET voc ] ].

underneath_adv1 := n_adv_pl_le &
 [ STEM < "underneath" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED _underneath_p_rel,
                    KEYREL.PRED place_n_rel ],
            PHON.ONSET voc ] ].

underofficer_n1 := n_intr_le &
 [ STEM < "underofficer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_underofficer_n_1_rel",
            PHON.ONSET voc ] ].

underpants_n1 := n_plur_le &
 [ STEM < "underpant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_underpants_n_1_rel",
            PHON.ONSET voc ] ].

underscore_v1 := v_np_trans_le &
 [ STEM < "underscore" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_underscore_v_1_rel",
            PHON.ONSET voc ] ].

undersheriff_n1 := n_intr_le &
 [ STEM < "undersheriff" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_undersheriff_n_1_rel",
            PHON.ONSET voc ] ].

undershirt_n1 := n_intr_le &
 [ STEM < "undershirt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_undershirt_n_1_rel",
            PHON.ONSET voc ] ].

underside_n1 := n_intr_le &
 [ STEM < "underside" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_underside_n_1_rel",
            PHON.ONSET voc ] ].

understand_v1 := v_np*_trans_le &
 [ STEM < "understand" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_understand_v_1_rel",
            PHON.ONSET voc ] ].

understand_v2 := v_pp_cp_fin_le &
 [ STEM < "understand" >,
   SYNSEM [ LKEYS [ --COMPKEY _by_p_sel_rel,
                    KEYREL.PRED "_understand_v_by_rel" ],
            PHON.ONSET voc ] ].

understandable_a1 := adj_intrans_le &
 [ STEM < "understandable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_understandable_a_1_rel",
            PHON.ONSET voc ] ].

understandable_a2 := adj_reg_atrans_that_cp_le &
 [ STEM < "understandable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_understandable_a_1_rel",
            PHON.ONSET voc ] ].

understanding_n1 := n_ppof_le &
 [ STEM < "understanding" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_understanding_n_of_rel",
            PHON.ONSET voc ] ].

undertake_v1 := v_np_trans_le &
 [ STEM < "undertake" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_undertake_v_1_rel",
            PHON.ONSET voc ] ].

undertake_v2 := v_subj_equi_le &
 [ STEM < "undertake" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_undertake_v_1_rel",
            PHON.ONSET voc ] ].

undertaking_n1 := n_intr_le &
 [ STEM < "undertaking" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_undertaking_n_1_rel",
            PHON.ONSET voc ] ].

undertone_n1 := n_intr_le &
 [ STEM < "undertone" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_undertone_n_1_rel",
            PHON.ONSET voc ] ].

underway_isect := adj_intrans_le &
 [ STEM < "underway" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_underway_a_1_rel",
            PHON.ONSET voc ] ].

underwear_n1 := n_mass_le &
 [ STEM < "underwear" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_underwear_n_1_rel",
            PHON.ONSET voc ] ].

underwrite_v1 := v_np_trans_le &
 [ STEM < "underwrite" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_underwrite_v_1_rel",
            PHON.ONSET voc ] ].

underwriter_n1 := n_intr_le &
 [ STEM < "underwriter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_underwriter_n_1_rel",
            PHON.ONSET voc ] ].

undesirable_a1 := adj_trans_le &
 [ STEM < "undesirable" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_undesirable_a_to_rel" ],
            PHON.ONSET voc ] ].

undetermined_a1 := adj_intrans_le &
 [ STEM < "undetermined" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_undetermined_a_1_rel",
            PHON.ONSET voc ] ].

undisturbed_a1 := adj_intrans_le &
 [ STEM < "undisturbed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_undisturbed_a_1_rel",
            PHON.ONSET voc ] ].

undivided_a1 := adj_intrans_le &
 [ STEM < "undivided" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_undivided_a_1_rel",
            PHON.ONSET voc ] ].

undo_v1 := v_np_trans_le &
 [ STEM < "undo" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_undo_v_1_rel",
            PHON.ONSET voc ] ].

undock_v1 := v_np_trans_le &
 [ STEM < "undock" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_undock_v_1_rel",
            PHON.ONSET voc ] ].

undoubted_a1 := adj_intrans_le &
 [ STEM < "undoubted" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_undoubted_a_1_rel",
            PHON.ONSET voc ] ].

undoubtedly_adv1 := adv_vp_aux_le &
 [ STEM < "undoubtedly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_undoubted_a_1_rel",
            PHON.ONSET voc ] ].

undredal := n_proper_le &
 [ STEM < "undredal" >,
   SYNSEM [ LKEYS.KEYREL.CARG "undredal",
            PHON.ONSET voc ] ].

undulate_v1 := v_unerg_le &
 [ STEM < "undulate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_undulate_v_1_rel",
            PHON.ONSET voc ] ].

uneasiness_n1 := n_mass_count_le &
 [ STEM < "uneasiness" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_uneasiness_n_1_rel",
            PHON.ONSET voc ] ].

unembarrassed_a1 := adj_intrans_le &
 [ STEM < "unembarrassed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unembarrassed_a_1_rel",
            PHON.ONSET voc ] ].

unemployed_a1 := adj_intrans_le &
 [ STEM < "unemployed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unemployed_a_1_rel",
            PHON.ONSET voc ] ].

unenclosed_a1 := adj_intrans_le &
 [ STEM < "unenclosed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unenclosed_a_1_rel",
            PHON.ONSET voc ] ].

unequal_a1 := adj_intrans_le &
 [ STEM < "unequal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unequal_a_1_rel",
            PHON.ONSET voc ] ].

unequally := adv_int_vp_le &
 [ STEM < "unequally" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unequal_a_1_rel",
            PHON.ONSET voc ] ].

unesco := n_proper_le &
 [ STEM < "unesco" >,
   SYNSEM [ LKEYS.KEYREL.CARG "unesco",
            PHON.ONSET con ] ].

unevaluated_a1 := adj_attr_intrans_le &
 [ STEM < "unevaluated" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unevaluated_a_1_rel",
            PHON.ONSET voc ] ].

unevaluated_v1 := v_unerg_psv_neg_le &
 [ STEM < "unevaluated" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_evaluate_v_1_rel",
            PHON.ONSET voc ] ].

uneven_a1 := adj_intrans_le &
 [ STEM < "uneven" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_uneven_a_1_rel",
            PHON.ONSET voc ] ].

unexpected_a1 := adj_intrans_le &
 [ STEM < "unexpected" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unexpected_a_1_rel",
            PHON.ONSET voc ] ].

unexpectedly_adv1 := adv_int_vp_le &
 [ STEM < "unexpectedly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unexpected_a_1_rel",
            PHON.ONSET voc ] ].

unfailing_a1 := adj_intrans_le &
 [ STEM < "unfailing" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unfailing_a_1_rel",
            PHON.ONSET voc ] ].

unfair_a1 := adj_trans_le &
 [ STEM < "unfair" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_unfair_a_to_rel" ],
            PHON.ONSET voc ] ].

unfair_a2 := adj_reg_atrans_cp_le &
 [ STEM < "unfair" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unfair_a_to_rel",
            PHON.ONSET voc ] ].

unfamiliar_a1 := adj_trans_le &
 [ STEM < "unfamiliar" >,
   SYNSEM [ LKEYS [ --COMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_unfamiliar_a_with_rel" ],
            PHON.ONSET voc ] ].

unfashionable_a1 := adj_intrans_le &
 [ STEM < "unfashionable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unfashionable_a_1_rel",
            PHON.ONSET voc ] ].

unfavorable_a1 := adj_intrans_le &
 [ STEM < "unfavorable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unfavorable_a_1_rel",
            PHON.ONSET voc ] ].

unfavorably := adv_int_vp_le &
 [ STEM < "unfavorably" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unfavorable_a_1_rel",
            PHON.ONSET voc ] ].

unfilled_a1 := adj_intrans_le &
 [ STEM < "unfilled" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unfilled_a_1_rel",
            PHON.ONSET voc ] ].

unfinished_isect := adj_intrans_le &
 [ STEM < "unfinished" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unfinished_a_1_rel",
            PHON.ONSET voc ] ].

unfold_v1 := v_np_trans_le &
 [ STEM < "unfold" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unfold_v_cause_rel",
            PHON.ONSET voc ] ].

unfold_v2 := v_unacc_dir_le &
 [ STEM < "unfold" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unfold_v_1_rel",
            PHON.ONSET voc ] ].

unforgettable_a1 := adj_intrans_le &
 [ STEM < "unforgettable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unforgettable_a_1_rel",
            PHON.ONSET voc ] ].

unfortunate_a1 := adj_intrans_le &
 [ STEM < "unfortunate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unfortunate_a_1_rel",
            PHON.ONSET voc ] ].

unfortunate_a2 := adj_reg_atrans_that_cp_le &
 [ STEM < "unfortunate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unfortunate_a_1_rel",
            PHON.ONSET voc ] ].

unfortunately_adv1 := adv_int_vp_le &
 [ STEM < "unfortunately" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unfortunate_a_1_rel",
            PHON.ONSET voc ] ].

unfriendly_a1 := adj_intrans_le &
 [ STEM < "unfriendly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unfriendly_a_1_rel",
            PHON.ONSET voc ] ].

ungulate_a1 := adj_intrans_le &
 [ STEM < "ungulate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ungulate_a_1_rel",
            PHON.ONSET voc ] ].

unhappier := adj_comp_le &
 [ STEM < "unhappier" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unhappy_a_1_rel",
            PHON.ONSET voc ] ].

unhappiest_a1 := adj_superl_le &
 [ STEM < "unhappiest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unhappy_a_1_rel",
            PHON.ONSET voc ] ].

unhappily_a1 := adv_int_vp_le &
 [ STEM < "unhappily" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unhappy_a_1_rel",
            PHON.ONSET voc ] ].

unhappy_a1 := adj_intrans_le &
 [ STEM < "unhappy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unhappy_a_1_rel",
            PHON.ONSET voc ] ].

unhappy_a2 := adj_reg_cp_le &
 [ STEM < "unhappy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unhappy_a_1_rel",
            PHON.ONSET voc ] ].

unharmed_a1 := adj_intrans_le &
 [ STEM < "unharmed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unharmed_a_1_rel",
            PHON.ONSET voc ] ].

unheard_of_a1 := adj_intrans_le &
 [ STEM < "unheard", "of" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unheard+of_a_1_rel",
            PHON.ONSET voc ] ].

unheeded_a1 := adj_intrans_le &
 [ STEM < "unheeded" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unheeded_a_1_rel",
            PHON.ONSET voc ] ].

unhurried_a1 := adj_intrans_le &
 [ STEM < "unhurried" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unhurried_a_1_rel",
            PHON.ONSET voc ] ].

unhurriedly_adv1 := adv_int_vp_le &
 [ STEM < "unhurriedly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unhurried_a_1_rel",
            PHON.ONSET voc ] ].

uniform_a1 := adj_intrans_le &
 [ STEM < "uniform" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_uniform_a_1_rel",
            PHON.ONSET con ] ].

uniform_n1 := n_intr_le &
 [ STEM < "uniform" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_uniform_n_1_rel",
            PHON.ONSET con ] ].

unimaginable_a1 := adj_intrans_le &
 [ STEM < "unimaginable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unimaginable_a_1_rel",
            PHON.ONSET voc ] ].

unimpaired_a1 := adj_intrans_le &
 [ STEM < "unimpaired" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unimpaired_a_1_rel",
            PHON.ONSET voc ] ].

unimportant_a1 := adj_intrans_le &
 [ STEM < "unimportant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unimportant_a_1_rel",
            PHON.ONSET voc ] ].

unimpressed_a1 := adj_trans_le &
 [ STEM < "unimpressed" >,
   SYNSEM [ LKEYS [ --COMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_unimpressed_a_with_rel" ],
            PHON.ONSET voc ] ].

uninclosed_a1 := adj_intrans_le &
 [ STEM < "uninclosed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_uninclosed_a_1_rel",
            PHON.ONSET voc ] ].

unintended_a1 := adj_intrans_le &
 [ STEM < "unintended" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unintended_a_1_rel",
            PHON.ONSET voc ] ].

uninteresting_isect := adj_intrans_le &
 [ STEM < "uninteresting" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_uninteresting_a_1_rel",
            PHON.ONSET con ] ].

uninterestingly := adv_int_vp_le &
 [ STEM < "uninterestingly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_uninteresting_a_1_rel",
            PHON.ONSET con ] ].

union_n1 := n_ppof_le &
 [ STEM < "union" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_union_n_of_rel",
            PHON.ONSET con ] ].

unique_a1 := adj_trans_le &
 [ STEM < "unique" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_unique_a_to_rel" ],
            PHON.ONSET con ] ].

unit_n1 := n_ppof_le &
 [ STEM < "unit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unit_n_of_rel",
            PHON.ONSET con ] ].

unit_title := n_title_le &
 [ STEM < "unit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unit_n_of_rel",
            PHON.ONSET con ] ].

unite_v1 := v_np_trans_noger_le &
 [ STEM < "unite" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unite_v_cause_rel",
            PHON.ONSET voc ] ].

unite_v2 := v_unacc_le &
 [ STEM < "unite" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unite_v_1_rel",
            PHON.ONSET voc ] ].

united_a1 := adj_intrans_le &
 [ STEM < "united" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_united_a_1_rel",
            PHON.ONSET con ] ].

united_airlines_n1 := n_proper_le &
 [ STEM < "united", "airlines" >,
   SYNSEM [ LKEYS.KEYREL.CARG "united_airlines",
            PHON.ONSET con ] ].

united_n1 := n_proper_le &
 [ STEM < "united" >,
   SYNSEM [ LKEYS.KEYREL.CARG "united",
            PHON.ONSET con ] ].

united_states_n1 := n_intr_named_le &
 [ STEM < "united", "states" >,
   SYNSEM [ LKEYS.KEYREL.CARG "united_states",
            PHON.ONSET con ] ].

unity_n1 := n_mass_le &
 [ STEM < "unity" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unity_n_1_rel",
            PHON.ONSET con ] ].

univalve_n1 := n_intr_le &
 [ STEM < "univalve" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_univalve_n_1_rel",
            PHON.ONSET con ] ].

universal_a1 := adj_intrans_le &
 [ STEM < "universal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_universal_a_1_rel",
            PHON.ONSET con ] ].

universe_n1 := n_ppof_le &
 [ STEM < "universe" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_universe_n_of_rel",
            PHON.ONSET con ] ].

university_n1 := n_mass_count_ppof_le &
 [ STEM < "university" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_university_n_of_rel",
            PHON.ONSET con ] ].

university_post_ttl := n_post_title_le &
 [ STEM < "university" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_university_n_of_rel",
            PHON.ONSET voc ] ].

unix_n1 := n_proper_le &
 [ STEM < "unix" >,
   SYNSEM [ LKEYS.KEYREL.CARG "unix",
            PHON.ONSET con ] ].

unknown_a1 := adj_intrans_le &
 [ STEM < "unknown" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unknown_a_1_rel",
            PHON.ONSET voc ] ].

unleash_v1 := v_np_trans_le &
 [ STEM < "unleash" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unleash_v_1_rel",
            PHON.ONSET voc ] ].

unless := p_subconj_le &
 [ STEM < "unless" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unless_x_rel",
            PHON.ONSET voc ] ].

unless_prd := p_subconj_prd_le &
 [ STEM < "unless" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unless_x_rel",
            PHON.ONSET voc ] ].

unlike_p := p_le &
 [ STEM < "unlike" >,
   SYNSEM [ LKEYS.KEYREL.PRED _unlike_p_rel,
            PHON.ONSET voc ] ].

unlikely_a1 := adj_trans_le &
 [ STEM < "unlikely" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_unlikely_a_for_rel" ],
            PHON.ONSET voc ] ].

unlikely_a2 := adj_reg_atrans_le &
 [ STEM < "unlikely" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unlikely_a_for_rel",
            PHON.ONSET voc ] ].

unlikely_a3 := adj_reg_atrans_cp_le &
 [ STEM < "unlikely" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unlikely_a_for_rel",
            PHON.ONSET voc ] ].

unlimited_a1 := adj_intrans_le &
 [ STEM < "unlimited" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unlimited_a_1_rel",
            PHON.ONSET voc ] ].

unlink_v1 := v_np_trans_le &
 [ STEM < "unlink" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unlink_v_1_rel",
            PHON.ONSET voc ] ].

unlock_v1 := v_np*_trans_le &
 [ STEM < "unlock" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unlock_v_1_rel",
            PHON.ONSET voc ] ].

unluckily_adv1 := adv_int_vp_le &
 [ STEM < "unluckily" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unlucky_a_1_rel",
            PHON.ONSET voc ] ].

unlucky_isect := adj_intrans_le &
 [ STEM < "unlucky" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unlucky_a_1_rel",
            PHON.ONSET voc ] ].

unmarked_a1 := adj_intrans_le &
 [ STEM < "unmarked" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unmarked_a_1_rel",
            PHON.ONSET voc ] ].

unmarried_isect := adj_intrans_le &
 [ STEM < "unmarried" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unmarried_a_1_rel",
            PHON.ONSET voc ] ].

unmixed_a1 := adj_intrans_le &
 [ STEM < "unmixed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unmixed_a_1_rel",
            PHON.ONSET voc ] ].

unmotivated_a1 := adj_intrans_le &
 [ STEM < "unmotivated" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unmotivated_a_1_rel",
            PHON.ONSET voc ] ].

unnatural_a1 := adj_intrans_le &
 [ STEM < "unnatural" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unnatural_a_1_rel",
            PHON.ONSET con ] ].

unnecessarily := adv_int_vp_le &
 [ STEM < "unnecessarily" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unnecessary_a_for_rel",
            PHON.ONSET voc ] ].

unnecessary_a1 := adj_trans_le &
 [ STEM < "unnecessary" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_unnecessary_a_for_rel" ],
            PHON.ONSET voc ] ].

unnecessary_a2 := adj_reg_atrans_le &
 [ STEM < "unnecessary" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unnecessary_a_for_rel",
            PHON.ONSET voc ] ].

unnecessary_a3 := adj_reg_atrans_cp_le &
 [ STEM < "unnecessary" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unnecessary_a_for_rel",
            PHON.ONSET voc ] ].

unobstructed_a1 := adj_intrans_le &
 [ STEM < "unobstructed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unobstructed_a_1_rel",
            PHON.ONSET voc ] ].

unoccupied_a1 := adj_intrans_le &
 [ STEM < "unoccupied" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unoccupied_a_1_rel",
            PHON.ONSET voc ] ].

unpack_v1 := v_np*_trans_le &
 [ STEM < "unpack" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unpack_v_1_rel",
            PHON.ONSET voc ] ].

unpaved_a1 := adj_intrans_le &
 [ STEM < "unpaved" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unpaved_a_1_rel",
            PHON.ONSET voc ] ].

unpleasant_a1 := adj_intrans_le &
 [ STEM < "unpleasant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unpleasant_a_1_rel",
            PHON.ONSET voc ] ].

unpleasantly := adv_int_vp_post_le &
 [ STEM < "unpleasantly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unpleasant_a_1_rel",
            PHON.ONSET voc ] ].

unpliant_a1 := adj_intrans_le &
 [ STEM < "unpliant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unpliant_a_1_rel",
            PHON.ONSET voc ] ].

unplowed_a1 := adj_intrans_le &
 [ STEM < "unplowed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unplowed_a_1_rel",
            PHON.ONSET voc ] ].

unpolished_a1 := adj_intrans_le &
 [ STEM < "unpolished" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unpolished_a_1_rel",
            PHON.ONSET voc ] ].

unpopular_a1 := adj_intrans_le &
 [ STEM < "unpopular" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unpopular_a_1_rel",
            PHON.ONSET voc ] ].

unpredictable_a1 := adj_intrans_le &
 [ STEM < "unpredictable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unpredictable_a_1_rel",
            PHON.ONSET voc ] ].

unprepared_isect := adj_intrans_le &
 [ STEM < "unprepared" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unprepared_a_1_rel",
            PHON.ONSET voc ] ].

unproblematic_isect := adj_intrans_le &
 [ STEM < "unproblematic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unproblematic_a_1_rel",
            PHON.ONSET voc ] ].

unproblematically := adv_int_vp_le &
 [ STEM < "unproblematically" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unproblematical_a_1_rel",
            PHON.ONSET voc ] ].

unproductive_isect := adj_intrans_le &
 [ STEM < "unproductive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unproductive_a_1_rel",
            PHON.ONSET voc ] ].

unproductively := adv_int_vp_le &
 [ STEM < "unproductively" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unproductive_a_1_rel",
            PHON.ONSET voc ] ].

unqualifiedly := adv_int_vp_le &
 [ STEM < "unqualifiedly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unqualified_a_1_rel",
            PHON.ONSET voc ] ].

unrealistic_isect := adj_intrans_le &
 [ STEM < "unrealistic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unrealistic_a_1_rel",
            PHON.ONSET voc ] ].

unrealistically := adv_int_vp_le &
 [ STEM < "unrealistically" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unrealistic_a_1_rel",
            PHON.ONSET voc ] ].

unreasonable_a1 := adj_trans_le &
 [ STEM < "unreasonable" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_unreasonable_a_for_rel" ],
            PHON.ONSET voc ] ].

unreasonable_a2 := adj_reg_atrans_le &
 [ STEM < "unreasonable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unreasonable_a_for_rel",
            PHON.ONSET voc ] ].

unreasonable_a3 := adj_reg_atrans_that_cp_le &
 [ STEM < "unreasonable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unreasonable_a_for_rel",
            PHON.ONSET voc ] ].

unregenerate_a1 := adj_intrans_le &
 [ STEM < "unregenerate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unregenerate_a_1_rel",
            PHON.ONSET voc ] ].

unrelenting_a1 := adj_intrans_le &
 [ STEM < "unrelenting" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unrelenting_a_1_rel",
            PHON.ONSET voc ] ].

unreliable_a1 := adj_intrans_le &
 [ STEM < "unreliable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unreliable_a_1_rel",
            PHON.ONSET voc ] ].

unremoved_a1 := adj_intrans_le &
 [ STEM < "unremoved" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unremoved_a_1_rel",
            PHON.ONSET voc ] ].

unreschedulable_a1 := adj_intrans_le &
 [ STEM < "unreschedulable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unreschedulable_a_1_rel",
            PHON.ONSET voc ] ].

unrestrained_a1 := adj_intrans_le &
 [ STEM < "unrestrained" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unrestrained_a_1_rel",
            PHON.ONSET voc ] ].

unrestrainedly_adv := adv_int_vp_le &
 [ STEM < "unrestrainedly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unrestrained_a_1_rel",
            PHON.ONSET voc ] ].

unrestricted_isect := adj_intrans_le &
 [ STEM < "unrestricted" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unrestricted_a_1_rel",
            PHON.ONSET voc ] ].

unrivaled_a1 := adj_intrans_le &
 [ STEM < "unrivaled" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unrivaled_a_1_rel",
            PHON.ONSET voc ] ].

unsafe_isect := adj_intrans_le &
 [ STEM < "unsafe" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unsafe_a_1_rel",
            PHON.ONSET voc ] ].

unsatisfactory_a1 := adj_trans_le &
 [ STEM < "unsatisfactory" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_unsatisfactory_a_for_rel" ],
            PHON.ONSET voc ] ].

unsatisfactory_a2 := adj_reg_atrans_le &
 [ STEM < "unsatisfactory" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unsatisfactory_a_for_rel",
            PHON.ONSET voc ] ].

unsatisfactory_a3 := adj_reg_atrans_cp_le &
 [ STEM < "unsatisfactory" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unsatisfactory_a_1_rel",
            PHON.ONSET voc ] ].

unsatisfied_a1 := adj_intrans_le &
 [ STEM < "unsatisfied" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unsatisfied_a_1_rel",
            PHON.ONSET voc ] ].

unscrew_v1 := v_np_trans_le &
 [ STEM < "unscrew" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unscrew_v_1_rel",
            PHON.ONSET voc ] ].

unseasonable_a1 := adj_intrans_le &
 [ STEM < "unseasonable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unseasonable_a_1_rel",
            PHON.ONSET voc ] ].

unseasonably_adv1 := adv_int_vp_le &
 [ STEM < "unseasonably" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unseasonable_a_1_rel",
            PHON.ONSET voc ] ].

unseasoned_a1 := adj_intrans_le &
 [ STEM < "unseasoned" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unseasoned_a_1_rel",
            PHON.ONSET voc ] ].

unselfish_isect := adj_intrans_le &
 [ STEM < "unselfish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unselfish_a_1_rel",
            PHON.ONSET voc ] ].

unselfishly := adv_int_vp_le &
 [ STEM < "unselfishly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unselfish_a_1_rel",
            PHON.ONSET voc ] ].

unserviced_a1 := adj_intrans_le &
 [ STEM < "unserviced" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unserviced_a_1_rel",
            PHON.ONSET voc ] ].

unsettled_a1 := adj_intrans_le &
 [ STEM < "unsettled" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unsettled_a_1_rel",
            PHON.ONSET voc ] ].

unshaven_a1 := adj_intrans_le &
 [ STEM < "unshaven" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unshaven_a_1_rel",
            PHON.ONSET voc ] ].

unsheathe_v1 := v_np_trans_le &
 [ STEM < "unsheathe" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unsheathe_v_1_rel",
            PHON.ONSET voc ] ].

unskillful_a1 := adj_intrans_le &
 [ STEM < "unskillful" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unskillful_a_1_rel",
            PHON.ONSET voc ] ].

unsolicited_a1 := adj_intrans_le &
 [ STEM < "unsolicited" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unsolicited_a_1_rel",
            PHON.ONSET voc ] ].

unsophisticated_a1 := adj_intrans_le &
 [ STEM < "unsophisticated" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unsophisticated_a_1_rel",
            PHON.ONSET voc ] ].

unspecified_a1 := adj_intrans_le &
 [ STEM < "unspecified" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unspecified_a_1_rel",
            PHON.ONSET voc ] ].

unspoiled_a1 := adj_intrans_le &
 [ STEM < "unspoiled" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unspoiled_a_1_rel",
            PHON.ONSET voc ] ].

unstaffed_a1 := adj_intrans_le &
 [ STEM < "unstaffed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unstaffed_a_1_rel",
            PHON.ONSET voc ] ].

unsteady_a1 := adj_intrans_le &
 [ STEM < "unsteady" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unsteady_a_1_rel",
            PHON.ONSET voc ] ].

unsubdued_a1 := adj_intrans_le &
 [ STEM < "unsubdued" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unsubdued_a_1_rel",
            PHON.ONSET voc ] ].

unsubscribe_v1 := v_np_trans_le &
 [ STEM < "unsubscribe" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unsubscribe_v_1_rel",
            PHON.ONSET voc ] ].

unsubstantial_a1 := adj_intrans_le &
 [ STEM < "unsubstantial" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unsubstantial_a_1_rel",
            PHON.ONSET voc ] ].

unsuccessful_a1 := adj_intrans_le &
 [ STEM < "unsuccessful" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unsuccessful_a_1_rel",
            PHON.ONSET voc ] ].

unsuccessfully_isect := adv_int_vp_le &
 [ STEM < "unsuccessfully" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unsuccessful_a_1_rel",
            PHON.ONSET voc ] ].

unsuitable_isect := adj_intrans_le &
 [ STEM < "unsuitable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unsuitable_a_1_rel",
            PHON.ONSET voc ] ].

unsuitably := adv_int_vp_le &
 [ STEM < "unsuitably" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unsuitable_a_1_rel",
            PHON.ONSET voc ] ].

unsullied_a1 := adj_intrans_le &
 [ STEM < "unsullied" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unsullied_a_1_rel",
            PHON.ONSET voc ] ].

unsupported_a1 := adj_intrans_le &
 [ STEM < "unsupported" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unsupported_a_1_rel",
            PHON.ONSET voc ] ].

unsure_a1 := adj_trans_le &
 [ STEM < "unsure" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_unsure_a_of_rel" ],
            PHON.ONSET voc ] ].

unsurpassed_a1 := adj_intrans_le &
 [ STEM < "unsurpassed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unsurpassed_a_1_rel",
            PHON.ONSET voc ] ].

untamed_a1 := adj_intrans_le &
 [ STEM < "untamed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_untamed_a_1_rel",
            PHON.ONSET voc ] ].

untie_v1 := v_np_trans_le &
 [ STEM < "untie" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_untie_v_1_rel",
            PHON.ONSET voc ] ].

until := p_no_nmod_nopro_le &
 [ STEM < "until" >,
   SYNSEM [ LKEYS.KEYREL.PRED _until_p_rel,
            PHON.ONSET voc ] ].

until2 := p_subconj_le &
 [ STEM < "until" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_until_x_h_rel",
            PHON.ONSET voc ] ].

until_p3 := p_ppcomp_copred_le &
 [ STEM < "until" >,
   SYNSEM [ LKEYS.KEYREL.PRED _until_p_rel,
            PHON.ONSET voc ] ].

until_prtcl := p_prtcl_le &
 [ STEM < "until" >,
   SYNSEM [ LKEYS.KEYREL.PRED _until_p_sel_rel,
            PHON.ONSET voc ] ].

untimely_a1 := adj_intrans_le &
 [ STEM < "untimely" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_untimely_a_1_rel",
            PHON.ONSET voc ] ].

unto := p_reg_le &
 [ STEM < "unto" >,
   SYNSEM [ LKEYS.KEYREL.PRED _unto_p_rel,
            PHON.ONSET voc ] ].

untrafficked_v1 := v_unerg_psv_neg_le &
 [ STEM < "untrafficked" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_traffic_v_1_rel",
            PHON.ONSET voc ] ].

unusable_a1 := adj_intrans_le &
 [ STEM < "unusable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unusable_a_1_rel",
            PHON.ONSET voc ] ].

unused_a1 := adj_intrans_le &
 [ STEM < "unused" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unused_a_1_rel",
            PHON.ONSET voc ] ].

unusual_isect := adj_intrans_le &
 [ STEM < "unusual" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unusual_a_1_rel",
            PHON.ONSET voc ] ].

unusually_adv1 := adv_int_vp_post_le &
 [ STEM < "unusually" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unusual_a_1_rel",
            PHON.ONSET voc ] ].

unusually_deg := adv_degree_spec_v_le &
 [ STEM < "unusually" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unusually_x_deg_rel",
            PHON.ONSET voc ] ].

unveil_v1 := v_np_trans_le &
 [ STEM < "unveil" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unveil_v_1_rel",
            PHON.ONSET voc ] ].

unwanted_a1 := adj_intrans_le &
 [ STEM < "unwanted" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unwanted_a_1_rel",
            PHON.ONSET voc ] ].

unwieldy_a1 := adj_trans_le &
 [ STEM < "unwieldy" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_unwieldy_a_for_rel" ],
            PHON.ONSET voc ] ].

unwieldy_a2 := adj_reg_atrans_le &
 [ STEM < "unwieldy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unwieldy_a_for_rel",
            PHON.ONSET voc ] ].

unwilling_a1 := adj_intrans_le &
 [ STEM < "unwilling" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unwilling_a_1_rel",
            PHON.ONSET voc ] ].

unwilling_a2 := adj_reg_equi_le &
 [ STEM < "unwilling" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unwilling_a_1_rel",
            PHON.ONSET voc ] ].

unwillingly_adv1 := adv_int_vp_le &
 [ STEM < "unwillingly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unwilling_a_1_rel",
            PHON.ONSET voc ] ].

unwise_a1 := adj_intrans_le &
 [ STEM < "unwise" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unwise_a_1_rel",
            PHON.ONSET voc ] ].

unworthy_a1 := adj_trans_le &
 [ STEM < "unworthy" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_unworthy_a_of_rel" ],
            PHON.ONSET voc ] ].

unyielding_a1 := adj_intrans_le &
 [ STEM < "unyielding" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unyielding_a_1_rel",
            PHON.ONSET voc ] ].

up := p_nmod_no_tmod_le &
 [ STEM < "up" >,
   SYNSEM [ LKEYS.KEYREL.PRED _up_p_rel,
            PHON.ONSET voc ] ].

up_adv1 := pp_nmod_le &
 [ STEM < "up" >,
   SYNSEM [ LKEYS.KEYREL.PRED _up_p_rel,
            PHON.ONSET voc ] ].

up_front_a1 := adj_trans_le &
 [ STEM < "up", "front" >,
   SYNSEM [ LKEYS [ --COMPKEY _about_p_sel_rel,
                    KEYREL.PRED "_up+front_a_about_rel" ],
            PHON.ONSET voc ] ].

up_prtcl := p_prtcl_le &
 [ STEM < "up" >,
   SYNSEM [ LKEYS.KEYREL.PRED _up_p_sel_rel,
            PHON.ONSET voc ] ].

up_to_date_a1 := adj_intrans_le &
 [ STEM < "up", "to", "date" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_up+to+date_a_1_rel",
            PHON.ONSET voc ] ].

up_to_date_a2 := adj_intrans_le &
 [ STEM < "up-", "to-", "date" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_up+to+date_a_1_rel",
            PHON.ONSET voc ] ].

up_to_deg := adv_degree_spec_jov_only_le &
 [ STEM < "up", "to" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_up+to_x_deg_rel",
            PHON.ONSET voc ] ].

up_to_p := p_no_nmod_nopro_le &
 [ STEM < "up", "to" >,
   SYNSEM [ LKEYS.KEYREL.PRED _up+to_p_rel,
            PHON.ONSET voc ] ].

up_to_par_a1 := adj_pred_intrans_le &
 [ STEM < "up", "to", "par" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_up+to+par_a_1_rel",
            PHON.ONSET voc ] ].

up_until := p_no_nmod_nopro_le &
 [ STEM < "up", "until" >,
   SYNSEM [ LKEYS.KEYREL.PRED _up+until_p_rel,
            PHON.ONSET voc ] ].

up_vmod := p_no_nmod_le &
 [ STEM < "up" >,
   SYNSEM [ LKEYS.KEYREL.PRED _up_p_rel,
            PHON.ONSET voc ] ].

upcoming_isect := adj_intrans_le &
 [ STEM < "upcoming" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_upcoming_a_1_rel",
            PHON.ONSET voc ] ].

update_n1 := n_ppof_le &
 [ STEM < "update" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_update_n_of_rel",
            PHON.ONSET voc ] ].

update_v1 := v_np*_trans_le &
 [ STEM < "update" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_update_v_1_rel",
            PHON.ONSET voc ] ].

upgradable_a1 := adj_trans_le &
 [ STEM < "upgradable" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_upgradable_a_to_rel" ],
            PHON.ONSET voc ] ].

upgrade_n1 := n_mass_count_ppof_le &
 [ STEM < "upgrade" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_upgrade_n_of_rel",
            PHON.ONSET voc ] ].

upgrade_v1 := v_np*_trans_le &
 [ STEM < "upgrade" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_upgrade_v_1_rel",
            PHON.ONSET voc ] ].

uphill_a1 := adj_attr_intrans_le &
 [ STEM < "uphill" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_uphill_a_1_rel",
            PHON.ONSET voc ] ].

uphill_n1 := n_intr_le &
 [ STEM < "uphill" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_uphill_n_1_rel",
            PHON.ONSET voc ] ].

uphill_pp := n_adv_pl_le &
 [ STEM < "uphill" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED _uphill_p_rel,
                    KEYREL.PRED place_n_rel ],
            PHON.ONSET voc ] ].

uphold_v1 := v_np_trans_le &
 [ STEM < "uphold" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_uphold_v_1_rel",
            PHON.ONSET voc ] ].

upon := p_reg_le &
 [ STEM < "upon" >,
   SYNSEM [ LKEYS.KEYREL.PRED _upon_p_rel,
            PHON.ONSET con ] ].

upon_prtcl := p_prtcl_le &
 [ STEM < "upon" >,
   SYNSEM [ LKEYS.KEYREL.PRED _upon_p_sel_rel,
            PHON.ONSET con ] ].

upper_a1 := adj_intrans_le &
 [ STEM < "upper" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_upper_a_1_rel",
            PHON.ONSET voc ] ].

uppermost_a1 := adj_trans_le &
 [ STEM < "uppermost" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_uppermost_a_of_rel" ],
            PHON.ONSET voc ] ].

upright_a1 := adj_intrans_le &
 [ STEM < "upright" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_upright_a_1_rel",
            PHON.ONSET voc ] ].

uprightness_n1 := n_mass_le &
 [ STEM < "uprightness" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_uprightness_n_1_rel",
            PHON.ONSET voc ] ].

ups_n1 := n_proper_le &
 [ STEM < "ups" >,
   SYNSEM [ LKEYS.KEYREL.CARG "ups",
            PHON.ONSET voc ] ].

ups_n2 := n_proper_le &
 [ STEM < "united", "parcel", "service" >,
   SYNSEM [ LKEYS.KEYREL.CARG "ups",
            PHON.ONSET con ] ].

upscale_a1 := adj_intrans_le &
 [ STEM < "upscale" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_upscale_a_1_rel",
            PHON.ONSET voc ] ].

upset_a2 := adj_reg_cp_le &
 [ STEM < "upset" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_upset_a_1_rel",
            PHON.ONSET voc ] ].

upset_isect := adj_intrans_le &
 [ STEM < "upset" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_upset_a_1_rel",
            PHON.ONSET voc ] ].

upset_n1 := n_intr_le &
 [ STEM < "upset" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_upset_n_1_rel",
            PHON.ONSET voc ] ].

upset_v1 := v_np_trans_le &
 [ STEM < "upset" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_upset_v_1_rel",
            PHON.ONSET voc ] ].

upsete := n_proper_le &
 [ STEM < "upsete" >,
   SYNSEM [ LKEYS.KEYREL.CARG "upsete",
            PHON.ONSET voc ] ].

upshot_n1 := n_ppof_le &
 [ STEM < "upshot" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_upshot_n_of_rel",
            PHON.ONSET voc ] ].

upstairs_adv1 := pp_le &
 [ STEM < "upstairs" >,
   SYNSEM [ LKEYS.KEYREL.PRED _upstairs_p_rel,
            PHON.ONSET voc ] ].

upstream_a1 := adj_attr_intrans_le &
 [ STEM < "upstream" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_upstream_a_1_rel",
            PHON.ONSET voc ] ].

upstream_a2 := adj_attr_intrans_le &
 [ STEM < "up", "stream" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_upstream_a_1_rel",
            PHON.ONSET voc ] ].

upstream_pp := pp_le &
 [ STEM < "upstream" >,
   SYNSEM [ LKEYS.KEYREL.PRED _upstream_p_rel,
            PHON.ONSET voc ] ].

upstream_pp2 := pp_le &
 [ STEM < "up", "stream" >,
   SYNSEM [ LKEYS.KEYREL.PRED _upstream_p_rel,
            PHON.ONSET voc ] ].

upsurge_n1 := n_intr_le &
 [ STEM < "upsurge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_upsurge_n_1_rel",
            PHON.ONSET voc ] ].

upswing_n1 := n_intr_le &
 [ STEM < "upswing" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_upswing_n_1_rel",
            PHON.ONSET voc ] ].

upward_isect := adj_attr_intrans_le &
 [ STEM < "upward" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_upward_a_1_rel",
            PHON.ONSET voc ] ].

upward_n1 := n_adv_event_le &
 [ STEM < "upward" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED _upward_a_1_rel,
                    KEYREL.PRED place_n_rel ],
            PHON.ONSET voc ] ].

upwards_a1 := adj_attr_intrans_le &
 [ STEM < "upwards" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_upwards_a_1_rel",
            PHON.ONSET voc ] ].

upwards_n1 := n_adv_event_le &
 [ STEM < "upwards" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED _upward_a_1_rel,
                    KEYREL.PRED place_n_rel ],
            PHON.ONSET voc ] ].

uradalen_n1 := n_proper_le &
 [ STEM < "uradalen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "uradalen",
            PHON.ONSET voc ] ].

uradalsbandet_n1 := n_proper_le &
 [ STEM < "uradalsbandet" >,
   SYNSEM [ LKEYS.KEYREL.CARG "uradalsbandet",
            PHON.ONSET voc ] ].

uradalstindane_n1 := n_proper_pl_le &
 [ STEM < "uradalstindane" >,
   SYNSEM [ LKEYS.KEYREL.CARG "uradalstindane",
            PHON.ONSET voc ] ].

uradalsvatnet_n1 := n_proper_le &
 [ STEM < "uradalsvatnet" >,
   SYNSEM [ LKEYS.KEYREL.CARG "uradalsvatnet",
            PHON.ONSET voc ] ].

uraknatten_n1 := n_proper_le &
 [ STEM < "uraknatten" >,
   SYNSEM [ LKEYS.KEYREL.CARG "uraknatten",
            PHON.ONSET voc ] ].

uranosbreen_n1 := n_proper_le &
 [ STEM < "uranosbreen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "uranosbreen",
            PHON.ONSET voc ] ].

uranostind_n1 := n_proper_le &
 [ STEM < "uranostind" >,
   SYNSEM [ LKEYS.KEYREL.CARG "uranostind",
            PHON.ONSET voc ] ].

uranus_n1 := n_proper_le &
 [ STEM < "uranus" >,
   SYNSEM [ LKEYS.KEYREL.CARG "uranus",
            PHON.ONSET con ] ].

urban_a1 := adj_intrans_le &
 [ STEM < "urban" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_urban_a_1_rel",
            PHON.ONSET voc ] ].

urbane_a1 := adj_intrans_le &
 [ STEM < "urbane" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_urbane_a_1_rel",
            PHON.ONSET voc ] ].

urbanite_n1 := n_intr_le &
 [ STEM < "urbanite" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_urbanite_n_1_rel",
            PHON.ONSET voc ] ].

urdadalstindar_n1 := n_proper_le &
 [ STEM < "urdadalstindar" >,
   SYNSEM [ LKEYS.KEYREL.CARG "urdadalstindar",
            PHON.ONSET voc ] ].

urden_n1 := n_proper_le &
 [ STEM < "urden" >,
   SYNSEM [ LKEYS.KEYREL.CARG "urden",
            PHON.ONSET voc ] ].

urethra_n1 := n_intr_le &
 [ STEM < "urethra" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_urethra_n_1_rel",
            PHON.ONSET voc ] ].

urge1 := v_obj_equi_le &
 [ STEM < "urge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_urge_v_to_rel",
            PHON.ONSET voc ] ].

urge_n1 := n_intr_le &
 [ STEM < "urge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_urge_n_1_rel",
            PHON.ONSET voc ] ].

urge_v2 := v_cp_subj_le &
 [ STEM < "urge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_urge_v_1_rel",
            PHON.ONSET voc ] ].

urge_v3 := v_np_trans_le &
 [ STEM < "urge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_urge_v_1_rel",
            PHON.ONSET voc ] ].

urgent_a1 := adj_trans_le &
 [ STEM < "urgent" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_urgent_a_for_rel" ],
            PHON.ONSET voc ] ].

urgent_a2 := adj_reg_atrans_le &
 [ STEM < "urgent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_urgent_a_for_rel",
            PHON.ONSET voc ] ].

urgent_a3 := adj_reg_atrans_cp_le &
 [ STEM < "urgent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_urgent_a_for_rel",
            PHON.ONSET voc ] ].

urgently_adv1 := adv_int_vp_le &
 [ STEM < "urgently" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_urgent_a_for_rel",
            PHON.ONSET voc ] ].

urine_n1 := n_intr_le &
 [ STEM < "urine" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_urine_n_1_rel",
            PHON.ONSET con ] ].

url_n1 := n_intr_le &
 [ STEM < "url" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_url_n_1_rel",
            PHON.ONSET voc ] ].

urtningstind_n1 := n_proper_le &
 [ STEM < "urtningstind" >,
   SYNSEM [ LKEYS.KEYREL.CARG "urtningstind",
            PHON.ONSET voc ] ].

uruguay_n1 := n_proper_le &
 [ STEM < "uruguay" >,
   SYNSEM [ LKEYS.KEYREL.CARG "uruguay",
            PHON.ONSET con ] ].

us := n_pers_pro_us_le &
 [ STEM < "us" >,
   SYNSEM.PHON.ONSET con ].

us_n1 := n_intr_named_le &
 [ STEM < "_us" >,
   SYNSEM [ LKEYS.KEYREL.CARG "us",
            PHON.ONSET con ] ].

us_n2 := n_intr_named_le &
 [ STEM < "_u", "s" >,
   SYNSEM [ LKEYS.KEYREL.CARG "us",
            PHON.ONSET con ] ].

us_n3 := n_intr_named_le &
 [ STEM < "_u-", "_s" >,
   SYNSEM [ LKEYS.KEYREL.CARG "us",
            PHON.ONSET con ] ].

us_n4 := n_intr_named_le &
 [ STEM < "u.", "s." >,
   SYNSEM [ LKEYS.KEYREL.CARG "us",
            PHON.ONSET con ] ].

us_n5 := n_intr_named_punct_le &
 [ STEM < "u.s." >,
   SYNSEM [ LKEYS.KEYREL.CARG "us",
            PHON.ONSET con ] ].

us_n6 := n_intr_named_le &
 [ STEM < "_u.", "_s." >,
   SYNSEM [ LKEYS.KEYREL.CARG "us",
            PHON.ONSET con ] ].

us_n7 := n_intr_named_punct_le &
 [ STEM < "u.s" >,
   SYNSEM [ LKEYS.KEYREL.CARG "us",
            PHON.ONSET con ] ].

us_plus_np := n_pers_pro_us_np_le &
 [ STEM < "us" >,
   SYNSEM.PHON.ONSET voc ].

usa_n1 := n_intr_named_le &
 [ STEM < "usa" >,
   SYNSEM [ LKEYS.KEYREL.CARG "usa",
            PHON.ONSET con ] ].

usa_n2 := n_intr_named_le &
 [ STEM < "_u.s.a." >,
   SYNSEM [ LKEYS.KEYREL.CARG "usa",
            PHON.ONSET con ] ].

usa_n3 := n_intr_named_le &
 [ STEM < "_u", "s", "_a" >,
   SYNSEM [ LKEYS.KEYREL.CARG "usa",
            PHON.ONSET con ] ].

usa_n4 := n_intr_named_le &
 [ STEM < "_u", "s", "of", "_a" >,
   SYNSEM [ LKEYS.KEYREL.CARG "usa",
            PHON.ONSET con ] ].

usa_n5 := n_intr_named_le &
 [ STEM < "_u.s.a" >,
   SYNSEM [ LKEYS.KEYREL.CARG "usa",
            PHON.ONSET con ] ].

usable_a1 := adj_intrans_le &
 [ STEM < "usable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_usable_a_1_rel",
            PHON.ONSET con ] ].

usage_n1 := n_mass_ppcomp_le &
 [ STEM < "usage" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_usage_n_of_rel" ],
            PHON.ONSET con ] ].

usd_n1 := n_plur_nocmpnd_le &
 [ STEM < "usd" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_usd_n_1_rel",
            PHON.ONSET voc ] ].

usdsign_n1 := n_numcomp_le &
 [ STEM < "usd" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dollar_n_1_rel",
            PHON.ONSET voc ] ].

use_n1 := n_mass_count_ppof_le &
 [ STEM < "use" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_use_n_of_rel",
            PHON.ONSET con ] ].

use_of_v1 := v_np_prep_trans_le &
 [ STEM < "use" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _of_p_rel,
                    KEYREL.PRED "_use_v_1_rel" ],
            PHON.ONSET voc ] ].

use_up_v1 := v_particle_np_le &
 [ STEM < "use" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_use_v_up_rel" ],
            PHON.ONSET con ] ].

use_v1 := v_np_trans_le &
 [ STEM < "use" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_use_v_1_rel",
            PHON.ONSET con ] ].

use_v2 := v_anom_equi_trans_le &
 [ STEM < "use" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_use_v_1_rel",
            PHON.ONSET con ] ].

use_v3 := v_np_as_le &
 [ STEM < "use" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_use_v_as_rel",
            PHON.ONSET con ] ].

used_a1 := adj_trans_oblig_le &
 [ STEM < "used" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_used_a_to_rel" ],
            PHON.ONSET con ] ].

used_a2 := adj_intrans_le &
 [ STEM < "used" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_used_a_1_rel",
            PHON.ONSET con ] ].

used_to_aux_pos := va_past_ought_pos_le &
 [ STEM < "used" >,
   SYNSEM [ LKEYS.KEYREL.PRED _used+to_v_modal_rel,
            PHON.ONSET con ] ].

useful_a1 := adj_intrans_le &
 [ STEM < "useful" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_useful_a_1_rel",
            PHON.ONSET con ] ].

usefully_pcisect := adv_int_vp_le &
 [ STEM < "usefully" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_useful_a_1_rel",
            PHON.ONSET con ] ].

usefulness_n1 := n_mass_le &
 [ STEM < "usefulness" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_usefulness_n_1_rel",
            PHON.ONSET voc ] ].

useless_a1 := adj_intrans_le &
 [ STEM < "useless" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_useless_a_1_rel",
            PHON.ONSET con ] ].

uselessly := adv_int_vp_le &
 [ STEM < "uselessly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_useless_a_1_rel",
            PHON.ONSET con ] ].

user_friendly_a1 := adj_intrans_le &
 [ STEM < "user-", "friendly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_user+friendly_a_1_rel",
            PHON.ONSET con ] ].

user_friendly_a2 := adj_intrans_le &
 [ STEM < "user", "friendly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_user+friendly_a_1_rel",
            PHON.ONSET con ] ].

user_manual_n1 := n_intr_le &
 [ STEM < "user", "manual" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_user+manual_n_1_rel",
            PHON.ONSET con ] ].

user_n1 := n_ppof_le &
 [ STEM < "user" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_user_n_of_rel",
            PHON.ONSET con ] ].

users_manual_n2 := n_intr_le &
 [ STEM < "users", "manual" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_user+manual_n_1_rel",
            PHON.ONSET con ] ].

users_manual_n3 := n_intr_le &
 [ STEM < "user", "s", "manual" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_user+manual_n_1_rel",
            PHON.ONSET con ] ].

usher_in_v2 := v_particle_le &
 [ STEM < "usher" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_usher_v_in_rel" ],
            PHON.ONSET voc ] ].

usher_n1 := n_intr_le &
 [ STEM < "usher" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_usher_n_1_rel",
            PHON.ONSET voc ] ].

usher_v1 := v_np_trans_le &
 [ STEM < "usher" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_usher_v_1_rel",
            PHON.ONSET voc ] ].

usher_v2 := v_empty_prep_trans_le &
 [ STEM < "usher" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_usher_v_to_rel" ],
            PHON.ONSET voc ] ].

ushuaia_n1 := n_proper_le &
 [ STEM < "ushuaia" >,
   SYNSEM [ LKEYS.KEYREL.CARG "ushuaia",
            PHON.ONSET voc ] ].

uskedalen := n_proper_le &
 [ STEM < "uskedalen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "uskedalen",
            PHON.ONSET voc ] ].

usofa_n1 := n_intr_named_le &
 [ STEM < "us", "of", "a" >,
   SYNSEM [ LKEYS.KEYREL.CARG "usofa",
            PHON.ONSET voc ] ].

usps_n1 := n_proper_le &
 [ STEM < "usps" >,
   SYNSEM [ LKEYS.KEYREL.CARG "usps",
            PHON.ONSET voc ] ].

usual_a1 := adj_intrans_le &
 [ STEM < "usual" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_usual_a_1_rel",
            PHON.ONSET con ] ].

usually_adv1 := adv_vp_aux_le &
 [ STEM < "usually" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_usual_a_1_rel",
            PHON.ONSET con ] ].

usually_adv2 := adv_s_pre_le &
 [ STEM < "usually" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_usual_a_1_rel",
            PHON.ONSET con ] ].

usurp_v1 := v_np_trans_le &
 [ STEM < "usurp" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_usurp_v_1_rel",
            PHON.ONSET con ] ].

usury_n1 := n_mass_le &
 [ STEM < "usury" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_usury_n_1_rel",
            PHON.ONSET con ] ].

utah_n1 := n_proper_le &
 [ STEM < "utah" >,
   SYNSEM [ LKEYS.KEYREL.CARG "utah",
            PHON.ONSET con ] ].

utah_n2 := n_proper_abb_le &
 [ STEM < "ut" >,
   SYNSEM [ LKEYS.KEYREL.CARG "utah",
            PHON.ONSET voc ] ].

utaladelen_n1 := n_proper_le &
 [ STEM < "utaladelen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "utaladelen",
            PHON.ONSET voc ] ].

utensil_n1 := n_intr_le &
 [ STEM < "utensil" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_utensil_n_1_rel",
            PHON.ONSET con ] ].

utferdslag_n1 := n_proper_le &
 [ STEM < "utferdslag" >,
   SYNSEM [ LKEYS.KEYREL.CARG "utferdslag",
            PHON.ONSET voc ] ].

utility_n1 := n_intr_le &
 [ STEM < "utility" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_utility_n_1_rel",
            PHON.ONSET con ] ].

utilize_v1 := v_np_trans_le &
 [ STEM < "utilize" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_utilize_v_1_rel",
            PHON.ONSET con ] ].

utla := n_proper_le &
 [ STEM < "utla" >,
   SYNSEM [ LKEYS.KEYREL.CARG "utla",
            PHON.ONSET voc ] ].

utladalen_n1 := n_proper_le &
 [ STEM < "utladalen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "utladalen",
            PHON.ONSET voc ] ].

utladalsjuvet_n1 := n_proper_le &
 [ STEM < "utladalsjuvet" >,
   SYNSEM [ LKEYS.KEYREL.CARG "utladalsjuvet",
            PHON.ONSET voc ] ].

utladarene_n1 := n_proper_le &
 [ STEM < "utladarene" >,
   SYNSEM [ LKEYS.KEYREL.CARG "utladarene",
            PHON.ONSET voc ] ].

utmost_a1 := adj_intrans_le &
 [ STEM < "utmost" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_utmost_a_1_rel",
            PHON.ONSET voc ] ].

utmost_n1 := n_intr_le &
 [ STEM < "utmost" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_utmost_n_1_rel",
            PHON.ONSET voc ] ].

utsikten_n1 := n_proper_le &
 [ STEM < "utsikten" >,
   SYNSEM [ LKEYS.KEYREL.CARG "utsikten",
            PHON.ONSET voc ] ].

utter_a1 := adj_attr_nospec_le &
 [ STEM < "utter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_utter_a_1_rel",
            PHON.ONSET voc ] ].

utter_v1 := v_np_trans_le &
 [ STEM < "utter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_utter_v_1_rel",
            PHON.ONSET voc ] ].

utterance_n1 := n_mass_count_le &
 [ STEM < "utterance" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_utterance_n_1_rel",
            PHON.ONSET voc ] ].

utterly_adv := adv_int_vp_le &
 [ STEM < "utterly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_utter_a_1_rel",
            PHON.ONSET voc ] ].

uv_n1 := n_mass_le &
 [ STEM < "uv" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_uv_n_1_rel",
            PHON.ONSET con ] ].

v_crack_n1 := n_intr_le &
 [ STEM < "_v-", "crack" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_v+crack_n_1_rel",
            PHON.ONSET con ] ].

v_neck_n1 := n_intr_le &
 [ STEM < "v", "neck" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_v+neck_n_1_rel",
            PHON.ONSET con ] ].

v_neck_n2 := n_intr_le &
 [ STEM < "v-", "neck" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_v+neck_n_1_rel",
            PHON.ONSET con ] ].

v_np1 := n_proper_le &
 [ STEM < "_v" >,
   SYNSEM [ LKEYS.KEYREL.CARG "v",
            PHON.ONSET con ] ].

v_period_np1 := n_proper_le &
 [ STEM < "v." >,
   SYNSEM [ LKEYS.KEYREL.CARG "v",
            PHON.ONSET con ] ].

v_period_np2 := n_proper_le &
 [ STEM < "_v." >,
   SYNSEM [ LKEYS.KEYREL.CARG "v",
            PHON.ONSET con ] ].

v_t_n1 := n_intr_le &
 [ STEM < "v.t." >,
   SYNSEM [ LKEYS.KEYREL.PRED "_v+t_n_1_rel",
            PHON.ONSET con ] ].

v_t_n2 := n_intr_le &
 [ STEM < "v.", "t." >,
   SYNSEM [ LKEYS.KEYREL.PRED "_v+t_n_1_rel",
            PHON.ONSET con ] ].

vacancy_n1 := n_intr_le &
 [ STEM < "vacancy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vacancy_n_1_rel",
            PHON.ONSET con ] ].

vacant_a1 := adj_intrans_le &
 [ STEM < "vacant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vacant_a_1_rel",
            PHON.ONSET con ] ].

vacate_v1 := v_np_trans_le &
 [ STEM < "vacate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vacate_v_1_rel",
            PHON.ONSET con ] ].

vacation_i_n1 := n_bare_nmod_opt_le &
 [ STEM < "vacation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vacation_n_1_rel",
            PHON.ONSET con ] ].

vacation_n1 := n_intr_nosort_le &
 [ STEM < "vacation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vacation_n_1_rel",
            PHON.ONSET con ] ].

vacation_v1 := v_unerg_le &
 [ STEM < "vacation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vacation_v_1_rel",
            PHON.ONSET con ] ].

vaccine_n1 := n_mass_count_le &
 [ STEM < "vaccine" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vaccine_n_1_rel",
            PHON.ONSET con ] ].

vacuum_n1 := n_intr_le &
 [ STEM < "vacuum" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vacuum_n_1_rel",
            PHON.ONSET con ] ].

vacuum_v1 := v_np*_trans_le &
 [ STEM < "vacuum" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vacuum_v_1_rel",
            PHON.ONSET con ] ].

vague_a1 := adj_intrans_le &
 [ STEM < "vague" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vague_a_1_rel",
            PHON.ONSET con ] ].

vaguely_adv1 := adv_int_vp_le &
 [ STEM < "vaguely" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vague_a_1_rel",
            PHON.ONSET con ] ].

vagueness_n1 := n_mass_ppcomp_le &
 [ STEM < "vagueness" >,
   SYNSEM [ LKEYS [ --COMPKEY _about_p_sel_rel,
                    KEYREL.PRED "_vagueness_n_about_rel" ],
            PHON.ONSET con ] ].

vain_a1 := adj_intrans_le &
 [ STEM < "vain" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vain_a_1_rel",
            PHON.ONSET con ] ].

vainly := adv_int_vp_le &
 [ STEM < "vainly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vain_a_1_rel",
            PHON.ONSET con ] ].

vaio_n1 := n_intr_le &
 [ STEM < "vaio" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vaio_n_1_rel",
            PHON.ONSET con ] ].

valdez_n1 := n_proper_le &
 [ STEM < "valdez" >,
   SYNSEM [ LKEYS.KEYREL.CARG "valdez",
            PHON.ONSET con ] ].

valdres_n1 := n_proper_le &
 [ STEM < "valdres" >,
   SYNSEM [ LKEYS.KEYREL.CARG "valdres",
            PHON.ONSET con ] ].

valdresflya_n1 := n_proper_le &
 [ STEM < "valdresflya" >,
   SYNSEM [ LKEYS.KEYREL.CARG "valdresflya",
            PHON.ONSET con ] ].

valedictory_a1 := adj_intrans_le &
 [ STEM < "valedictory" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_valedictory_a_1_rel",
            PHON.ONSET con ] ].

valedictory_n1 := n_intr_le &
 [ STEM < "valedictory" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_valedictory_n_1_rel",
            PHON.ONSET con ] ].

valiant_a1 := adj_intrans_le &
 [ STEM < "valiant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_valiant_a_1_rel",
            PHON.ONSET con ] ].

valid_isect := adj_intrans_le &
 [ STEM < "valid" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_valid_a_1_rel",
            PHON.ONSET con ] ].

validate_v1 := v_np_trans_le &
 [ STEM < "validate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_validate_v_1_rel",
            PHON.ONSET con ] ].

validity_n1 := n_intr_le &
 [ STEM < "validity" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_validity_n_1_rel",
            PHON.ONSET con ] ].

valley_n1 := n_ppof_le &
 [ STEM < "valley" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_valley_n_of_rel",
            PHON.ONSET con ] ].

valley_post_ttl := n_post_title_le &
 [ STEM < "valley" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_valley_n_of_rel",
            PHON.ONSET con ] ].

valor_n1 := n_mass_le &
 [ STEM < "valor" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_valor_n_1_rel",
            PHON.ONSET con ] ].

valuable_a1 := adj_trans_le &
 [ STEM < "valuable" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_valuable_a_to-for_rel" ],
            PHON.ONSET con ] ].

valuable_a2 := adj_reg_atrans_le &
 [ STEM < "valuable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_valuable_a_to-for_rel",
            PHON.ONSET con ] ].

valuation_n1 := n_mass_count_le &
 [ STEM < "valuation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_valuation_n_1_rel",
            PHON.ONSET con ] ].

value_n1 := n_mass_count_le &
 [ STEM < "value" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_value_n_1_rel",
            PHON.ONSET con ] ].

value_v1 := v_np_trans_le &
 [ STEM < "value" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_value_v_1_rel",
            PHON.ONSET con ] ].

valueless_a1 := adj_intrans_le &
 [ STEM < "valueless" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_valueless_a_1_rel",
            PHON.ONSET con ] ].

valve_n1 := n_intr_le &
 [ STEM < "valve" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_valve_n_1_rel",
            PHON.ONSET con ] ].

van_gogh_n1 := n_proper_le &
 [ STEM < "van", "gogh" >,
   SYNSEM [ LKEYS.KEYREL.CARG "van_gogh",
            PHON.ONSET con ] ].

van_n1 := n_intr_le &
 [ STEM < "van" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_van_n_1_rel",
            PHON.ONSET con ] ].

vanderloo := n_proper_le &
 [ STEM < "vanderloo" >,
   SYNSEM [ LKEYS.KEYREL.CARG "vanderloo",
            PHON.ONSET con ] ].

vandrerhjem_n1 := n_proper_le &
 [ STEM < "vandrerhjem" >,
   SYNSEM [ LKEYS.KEYREL.CARG "vandrerhjem",
            PHON.ONSET con ] ].

vang_n1 := n_proper_le &
 [ STEM < "vang" >,
   SYNSEM [ LKEYS.KEYREL.CARG "vang",
            PHON.ONSET con ] ].

vangen := n_proper_le &
 [ STEM < "vangen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "vangen",
            PHON.ONSET con ] ].

vanish_v1 := v_unacc_dir_le &
 [ STEM < "vanish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vanish_v_1_rel",
            PHON.ONSET con ] ].

vanity_n1 := n_mass_count_le &
 [ STEM < "vanity" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vanity_n_1_rel",
            PHON.ONSET con ] ].

vantage_n1 := n_intr_le &
 [ STEM < "vantage" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vantage_n_1_rel",
            PHON.ONSET con ] ].

vapor_n1 := n_mass_count_le &
 [ STEM < "vapor" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vapor_n_1_rel",
            PHON.ONSET con ] ].

vardane := n_proper_pl_le &
 [ STEM < "vardane" >,
   SYNSEM [ LKEYS.KEYREL.CARG "vardane",
            PHON.ONSET con ] ].

vareggene_n1 := n_proper_le &
 [ STEM < "vareggene" >,
   SYNSEM [ LKEYS.KEYREL.CARG "vareggene",
            PHON.ONSET con ] ].

variable_isect := adj_intrans_le &
 [ STEM < "variable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_variable_a_1_rel",
            PHON.ONSET con ] ].

variably := adv_int_vp_le &
 [ STEM < "variably" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_variable_a_1_rel",
            PHON.ONSET con ] ].

variance_n1 := n_mass_count_le &
 [ STEM < "variance" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_variance_n_1_rel",
            PHON.ONSET con ] ].

variant_n1 := n_intr_le &
 [ STEM < "variant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_variant_n_1_rel",
            PHON.ONSET con ] ].

variation_n1 := n_mass_count_ppof_le &
 [ STEM < "variation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_variation_n_of_rel",
            PHON.ONSET con ] ].

varied_a1 := adj_intrans_le &
 [ STEM < "varied" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_varied_a_1_rel",
            PHON.ONSET con ] ].

variegate_v1 := v_np*_trans_le &
 [ STEM < "variegate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_variegate_v_1_rel",
            PHON.ONSET con ] ].

variety_n1 := n_ppof_le &
 [ STEM < "variety" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_variety_n_of-n_rel",
            PHON.ONSET con ] ].

variety_n2 := n_ppcomp_spr_le &
 [ STEM < "variety" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_variety_n_of-n_rel",
            PHON.ONSET con ] ].

various_isect := adj_intrans_le &
 [ STEM < "various" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_various_a_1_rel",
            PHON.ONSET con ] ].

variously_isect := adv_int_vp_le &
 [ STEM < "variously" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_various_a_1_rel",
            PHON.ONSET con ] ].

varpestuen_n1 := n_proper_le &
 [ STEM < "varpestuen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "varpestuen",
            PHON.ONSET con ] ].

vary_v1 := v_np_trans_noger_le &
 [ STEM < "vary" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vary_v_cause_rel",
            PHON.ONSET con ] ].

vary_v2 := v_unacc_le &
 [ STEM < "vary" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vary_v_1_rel",
            PHON.ONSET con ] ].

vasari_n1 := n_proper_le &
 [ STEM < "vasari" >,
   SYNSEM [ LKEYS.KEYREL.CARG "vasari",
            PHON.ONSET con ] ].

vasco_da_gama_n1 := n_proper_le &
 [ STEM < "vasco", "da", "gama" >,
   SYNSEM [ LKEYS.KEYREL.CARG "vasco_da_gama",
            PHON.ONSET con ] ].

vase_n1 := n_intr_le &
 [ STEM < "vase" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vase_n_1_rel",
            PHON.ONSET con ] ].

vassal_n1 := n_intr_le &
 [ STEM < "vassal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vassal_n_1_rel",
            PHON.ONSET con ] ].

vassberget_n1 := n_proper_city_le &
 [ STEM < "vassberget" >,
   SYNSEM [ LKEYS.KEYREL.CARG "vassberget",
            PHON.ONSET con ] ].

vassbygdi := n_proper_le &
 [ STEM < "vassbygdi" >,
   SYNSEM [ LKEYS.KEYREL.CARG "vassbygdi",
            PHON.ONSET con ] ].

vast_a1 := adj_intrans_le &
 [ STEM < "vast" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vast_a_1_rel",
            PHON.ONSET con ] ].

vastly_adv := adv_int_vp_le &
 [ STEM < "vastly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vast_a_1_rel",
            PHON.ONSET con ] ].

vastness_n1 := n_mass_le &
 [ STEM < "vastness" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vastness_n_1_rel",
            PHON.ONSET con ] ].

vat_n1 := n_intr_le &
 [ STEM < "vat" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vat_n_1_rel",
            PHON.ONSET con ] ].

vatnahalsen := n_proper_le &
 [ STEM < "vatnahalsen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "vatnahalsen",
            PHON.ONSET con ] ].

vaudeville_n := n_intr_le &
 [ STEM < "vaudeville" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vaudeville_n_1_rel",
            PHON.ONSET con ] ].

vcr_n1 := n_intr_le &
 [ STEM < "vcr" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vcr_n_1_rel",
            PHON.ONSET con ] ].

vector_n1 := n_intr_le &
 [ STEM < "vector" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vector_n_1_rel",
            PHON.ONSET con ] ].

vector_v1 := v_np_trans_le &
 [ STEM < "vector" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vector_v_1_rel",
            PHON.ONSET con ] ].

veer_v1 := v_prep_dir_le &
 [ STEM < "veer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_veer_v_1_rel",
            PHON.ONSET con ] ].

vefsna_n1 := n_proper_city_le &
 [ STEM < "vefsna" >,
   SYNSEM [ LKEYS.KEYREL.CARG "vefsna",
            PHON.ONSET con ] ].

vegetable_n1 := n_intr_le &
 [ STEM < "vegetable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vegetable_n_1_rel",
            PHON.ONSET con ] ].

vegetarian_a1 := adj_intrans_le &
 [ STEM < "vegetarian" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vegetarian_a_1_rel",
            PHON.ONSET con ] ].

vegetarian_n1 := n_intr_le &
 [ STEM < "vegetarian" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vegetarian_n_1_rel",
            PHON.ONSET con ] ].

vegetation_n1 := n_mass_le &
 [ STEM < "vegetation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vegetation_n_1_rel",
            PHON.ONSET con ] ].

vehemence_n1 := n_mass_le &
 [ STEM < "vehemence" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vehemence_n_1_rel",
            PHON.ONSET con ] ].

vehicle_n1 := n_intr_le &
 [ STEM < "vehicle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vehicle_n_1_rel",
            PHON.ONSET con ] ].

vehicle_title := n_title_le &
 [ STEM < "vehicle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vehicle_n_1_rel",
            PHON.ONSET con ] ].

vehicular_a1 := adj_intrans_le &
 [ STEM < "vehicular" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vehicular_a_1_rel",
            PHON.ONSET con ] ].

veil_n1 := n_intr_le &
 [ STEM < "veil" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_veil_n_1_rel",
            PHON.ONSET con ] ].

veil_v1 := v_np_trans_le &
 [ STEM < "veil" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_veil_v_1_rel",
            PHON.ONSET con ] ].

vein_n1 := n_intr_le &
 [ STEM < "vein" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vein_n_1_rel",
            PHON.ONSET con ] ].

veiverdalselvi := n_proper_le &
 [ STEM < "veiverdalselvi" >,
   SYNSEM [ LKEYS.KEYREL.CARG "veiverdalselvi",
            PHON.ONSET con ] ].

velleseter_n1 := n_proper_city_le &
 [ STEM < "velleseter" >,
   SYNSEM [ LKEYS.KEYREL.CARG "velleseter",
            PHON.ONSET con ] ].

velleseterhytta_n1 := n_proper_le &
 [ STEM < "velleseterhytta" >,
   SYNSEM [ LKEYS.KEYREL.CARG "velleseterhytta",
            PHON.ONSET con ] ].

vellesseterhytta_n1 := n_proper_le &
 [ STEM < "vellesseterhytta" >,
   SYNSEM [ LKEYS.KEYREL.CARG "vellesseterhytta",
            PHON.ONSET con ] ].

velocity_n1 := n_mass_count_le &
 [ STEM < "velocity" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_velocity_n_1_rel",
            PHON.ONSET con ] ].

venabu := n_proper_le &
 [ STEM < "venabu" >,
   SYNSEM [ LKEYS.KEYREL.CARG "venabu",
            PHON.ONSET con ] ].

vendor_n1 := n_ppof_le &
 [ STEM < "vendor" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vendor_n_of_rel",
            PHON.ONSET con ] ].

venerable_a1 := adj_intrans_le &
 [ STEM < "venerable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_venerable_a_1_rel",
            PHON.ONSET con ] ].

venezuela_n1 := n_proper_le &
 [ STEM < "venezuela" >,
   SYNSEM [ LKEYS.KEYREL.CARG "venezuela",
            PHON.ONSET con ] ].

venice_n1 := n_proper_city_le &
 [ STEM < "venice" >,
   SYNSEM [ LKEYS.KEYREL.CARG "venice",
            PHON.ONSET con ] ].

vennestÃ¸lsdalen_n1 := n_proper_le &
 [ STEM < "vennestÃ¸lsdalen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "vennestÃ¸lsdalen",
            PHON.ONSET con ] ].

vennisstÃ¸ldalen_n1 := n_proper_le &
 [ STEM < "vennisstÃ¸ldalen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "vennisstÃ¸ldalen",
            PHON.ONSET con ] ].

vennistÃ¸ldalen_n1 := n_proper_le &
 [ STEM < "vennistÃ¸ldalen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "vennistÃ¸ldalen",
            PHON.ONSET con ] ].

vennistÃ¸lsdalen_n1 := n_proper_le &
 [ STEM < "vennistÃ¸lsdalen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "vennistÃ¸lsdalen",
            PHON.ONSET con ] ].

vensleÃ¥a_n1 := n_proper_le &
 [ STEM < "vensleÃ¥a" >,
   SYNSEM [ LKEYS.KEYREL.CARG "vensleÃ¥a",
            PHON.ONSET con ] ].

vent_n1 := n_intr_le &
 [ STEM < "vent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vent_n_1_rel",
            PHON.ONSET con ] ].

vent_v1 := v_unacc_dir_le &
 [ STEM < "vent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vent_v_1_rel",
            PHON.ONSET con ] ].

vent_v2 := v_np_trans_le &
 [ STEM < "vent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vent_v_cause_rel",
            PHON.ONSET con ] ].

ventilate_v1 := v_unacc_le &
 [ STEM < "ventilate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ventilate_v_1_rel",
            PHON.ONSET con ] ].

ventilate_v2 := v_np_trans_noger_le &
 [ STEM < "ventilate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ventilate_v_cause_rel",
            PHON.ONSET con ] ].

ventral_a1 := adj_intrans_le &
 [ STEM < "ventral" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ventral_a_1_rel",
            PHON.ONSET con ] ].

venture_n1 := n_intr_le &
 [ STEM < "venture" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_venture_n_1_rel",
            PHON.ONSET con ] ].

venture_v1 := v_np_trans_noger_le &
 [ STEM < "venture" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_venture_v_1_rel",
            PHON.ONSET con ] ].

venture_v2 := v_subj_equi_le &
 [ STEM < "venture" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_venture_v_1_rel",
            PHON.ONSET con ] ].

venture_v3 := v_cp_non_trans_le &
 [ STEM < "venture" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_venture_v_1_rel",
            PHON.ONSET con ] ].

venture_v4 := v_prep_dir_le &
 [ STEM < "venture" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_venture_v_1_rel",
            PHON.ONSET con ] ].

venus_n1 := n_proper_le &
 [ STEM < "venus" >,
   SYNSEM [ LKEYS.KEYREL.CARG "venus",
            PHON.ONSET con ] ].

veo_and_memurutinds_n1 := n_proper_le &
 [ STEM < "veo-", "and", "memurutinds" >,
   SYNSEM [ LKEYS.KEYREL.CARG "veo+and+memurutinds",
            PHON.ONSET con ] ].

veo_n1 := n_proper_le &
 [ STEM < "veo" >,
   SYNSEM [ LKEYS.KEYREL.CARG "veo",
            PHON.ONSET con ] ].

veobreen_n1 := n_proper_le &
 [ STEM < "veobreen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "veobreen",
            PHON.ONSET con ] ].

veodalen_n1 := n_proper_le &
 [ STEM < "veodalen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "veodalen",
            PHON.ONSET con ] ].

veracity_n1 := n_mass_le &
 [ STEM < "veracity" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_veracity_n_1_rel",
            PHON.ONSET con ] ].

verb_n1 := n_intr_le &
 [ STEM < "verb" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_verb_n_1_rel",
            PHON.ONSET con ] ].

verbal_a1 := adj_intrans_le &
 [ STEM < "verbal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_verbal_a_1_rel",
            PHON.ONSET con ] ].

verbmobil := n_proper_le &
 [ STEM < "verbmobil" >,
   SYNSEM [ LKEYS.KEYREL.CARG "verbmobil",
            PHON.ONSET con ] ].

verbose_a1 := adj_intrans_le &
 [ STEM < "verbose" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_verbose_a_1_rel",
            PHON.ONSET con ] ].

verdant_a1 := adj_intrans_le &
 [ STEM < "verdant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_verdant_a_1_rel",
            PHON.ONSET con ] ].

verdict_n1 := n_intr_le &
 [ STEM < "verdict" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_verdict_n_1_rel",
            PHON.ONSET con ] ].

verge_n1 := n_intr_le &
 [ STEM < "verge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_verge_n_1_rel",
            PHON.ONSET con ] ].

verge_on_v1 := v_empty_prep_intrans_le &
 [ STEM < "verge" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_verge_v_on_rel" ],
            PHON.ONSET con ] ].

verge_upon_v1 := v_empty_prep_intrans_le &
 [ STEM < "verge" >,
   SYNSEM [ LKEYS [ --COMPKEY _upon_p_sel_rel,
                    KEYREL.PRED "_verge_v_on_rel" ],
            PHON.ONSET con ] ].

verify_v1 := v_np_trans_le &
 [ STEM < "verify" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_verify_v_1_rel",
            PHON.ONSET con ] ].

verify_v2 := v_cp_fin_inf_non_trans_le &
 [ STEM < "verify" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_verify_v_1_rel",
            PHON.ONSET con ] ].

veritable_a1 := adj_attr_nospec_le &
 [ STEM < "veritable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_veritable_a_1_rel",
            PHON.ONSET con ] ].

verizon_n1 := n_proper_le &
 [ STEM < "verizon" >,
   SYNSEM [ LKEYS.KEYREL.CARG "verizon",
            PHON.ONSET con ] ].

verk_n1 := n_proper_le &
 [ STEM < "verk" >,
   SYNSEM [ LKEYS.KEYREL.CARG "verk",
            PHON.ONSET con ] ].

vermont_n1 := n_proper_le &
 [ STEM < "vermont" >,
   SYNSEM [ LKEYS.KEYREL.CARG "vermont",
            PHON.ONSET con ] ].

vermont_n2 := n_proper_abb_le &
 [ STEM < "vt" >,
   SYNSEM [ LKEYS.KEYREL.CARG "vermont",
            PHON.ONSET con ] ].

verse_in_v1 := v_empty_prep*_trans_le &
 [ STEM < "verse" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_verse_v_in_rel" ],
            PHON.ONSET con ] ].

verse_n1 := n_mass_count_le &
 [ STEM < "verse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_verse_n_1_rel",
            PHON.ONSET con ] ].

versification_n1 := n_mass_count_le &
 [ STEM < "versification" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_versification_n_1_rel",
            PHON.ONSET con ] ].

versify_v1 := v_unerg_le &
 [ STEM < "versify" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_versify_v_1_rel",
            PHON.ONSET con ] ].

version_n1 := n_ppof_le &
 [ STEM < "version" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_version_n_of_rel",
            PHON.ONSET con ] ].

versus_conj := conj_complex_vs_le &
 [ STEM < "versus" >,
   SYNSEM.PHON.ONSET con ].

vertebrate_a1 := adj_intrans_le &
 [ STEM < "vertebrate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vertebrate_a_1_rel",
            PHON.ONSET con ] ].

vertebrate_n1 := n_intr_le &
 [ STEM < "vertebrate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vertebrate_n_1_rel",
            PHON.ONSET con ] ].

vertical_a1 := adj_intrans_le &
 [ STEM < "vertical" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vertical_a_1_rel",
            PHON.ONSET con ] ].

vertigo_n1 := n_mass_le &
 [ STEM < "vertigo" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vertigo_n_1_rel",
            PHON.ONSET con ] ].

very := adv_degree_spec_v_le &
 [ STEM < "very" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_very_x_deg_rel",
            PHON.ONSET con ] ].

very_a1 := adj_attr_intrans_notb_le &
 [ STEM < "very" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_very_a_1_rel",
            PHON.ONSET con ] ].

very_much_adv1 := adv_int_vp_le &
 [ STEM < "very", "much" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_very+much_a_1_rel",
            PHON.ONSET con ] ].

vesleadalen := n_proper_le &
 [ STEM < "vesleadalen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "vesleadalen",
            PHON.ONSET con ] ].

vesledalen_n1 := n_proper_le &
 [ STEM < "vesledalen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "vesledalen",
            PHON.ONSET con ] ].

vesledalstinden_n1 := n_proper_le &
 [ STEM < "vesledalstinden" >,
   SYNSEM [ LKEYS.KEYREL.CARG "vesledalstinden",
            PHON.ONSET con ] ].

veslefjell := n_proper_le &
 [ STEM < "veslefjell" >,
   SYNSEM [ LKEYS.KEYREL.CARG "veslefjell",
            PHON.ONSET con ] ].

veslefjellet := n_proper_le &
 [ STEM < "veslefjellet" >,
   SYNSEM [ LKEYS.KEYREL.CARG "veslefjellet",
            PHON.ONSET con ] ].

veslegjuv_n1 := n_proper_le &
 [ STEM < "veslegjuv" >,
   SYNSEM [ LKEYS.KEYREL.CARG "veslegjuv",
            PHON.ONSET con ] ].

veslegjuvbreen_n1 := n_proper_le &
 [ STEM < "veslegjuvbreen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "veslegjuvbreen",
            PHON.ONSET con ] ].

vesleglupen_n1 := n_proper_le &
 [ STEM < "vesleglupen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "vesleglupen",
            PHON.ONSET con ] ].

veslejuvbreen_n1 := n_proper_le &
 [ STEM < "veslejuvbreen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "veslejuvbreen",
            PHON.ONSET con ] ].

veslesmeden := n_proper_le &
 [ STEM < "veslesmeden" >,
   SYNSEM [ LKEYS.KEYREL.CARG "veslesmeden",
            PHON.ONSET con ] ].

vesleÃ¥a_n1 := n_proper_le &
 [ STEM < "vesleÃ¥a" >,
   SYNSEM [ LKEYS.KEYREL.CARG "vesleÃ¥a",
            PHON.ONSET con ] ].

vesleÃ¥dalen_n1 := n_proper_le &
 [ STEM < "vesleÃ¥dalen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "vesleÃ¥dalen",
            PHON.ONSET con ] ].

vesllÃ¸yfti_n1 := n_proper_le &
 [ STEM < "vesllÃ¸yfti" >,
   SYNSEM [ LKEYS.KEYREL.CARG "vesllÃ¸yfti",
            PHON.ONSET con ] ].

veslÃ¥dalen_n1 := n_proper_le &
 [ STEM < "veslÃ¥dalen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "veslÃ¥dalen",
            PHON.ONSET con ] ].

vessel_n1 := n_intr_le &
 [ STEM < "vessel" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vessel_n_1_rel",
            PHON.ONSET con ] ].

vest_n1 := n_intr_le &
 [ STEM < "vest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vest_n_1_rel",
            PHON.ONSET con ] ].

vest_with_v1 := v_empty_prep*_trans_le &
 [ STEM < "vest" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_vest_v_with_rel" ],
            PHON.ONSET con ] ].

vesterÃ¥len := n_proper_le &
 [ STEM < "vesterÃ¥len" >,
   SYNSEM [ LKEYS.KEYREL.CARG "vesterÃ¥len",
            PHON.ONSET con ] ].

vestfjell := n_proper_le &
 [ STEM < "vestfjell" >,
   SYNSEM [ LKEYS.KEYREL.CARG "vestfjell",
            PHON.ONSET con ] ].

vestfjorddalen_n1 := n_proper_le &
 [ STEM < "vestfjorddalen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "vestfjorddalen",
            PHON.ONSET con ] ].

vestfold_n1 := n_proper_le &
 [ STEM < "vestfold" >,
   SYNSEM [ LKEYS.KEYREL.CARG "vestfold",
            PHON.ONSET con ] ].

vestige_n1 := n_intr_le &
 [ STEM < "vestige" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vestige_n_1_rel",
            PHON.ONSET con ] ].

vestland_n1 := n_proper_le &
 [ STEM < "vestland" >,
   SYNSEM [ LKEYS.KEYREL.CARG "vestland",
            PHON.ONSET con ] ].

vestoppland_n1 := n_proper_le &
 [ STEM < "vestoppland" >,
   SYNSEM [ LKEYS.KEYREL.CARG "vestoppland",
            PHON.ONSET con ] ].

vestre_and_austre_hestlÃ¦gerhÃ¸_n1 := n_proper_le &
 [ STEM < "vestre", "and", "austre", "hestlÃ¦gerhÃ¸" >,
   SYNSEM [ LKEYS.KEYREL.CARG "vestre+and+austre+hestlÃ¦gerhÃ¸",
            PHON.ONSET con ] ].

vestre_hestlÃ¦gerhÃ¸_n1 := n_proper_le &
 [ STEM < "vestre", "hestlÃ¦gerhÃ¸" >,
   SYNSEM [ LKEYS.KEYREL.CARG "vestre+hestlÃ¦gerhÃ¸",
            PHON.ONSET con ] ].

vestre_memurubre_n1 := n_proper_le &
 [ STEM < "vestre", "memurubre" >,
   SYNSEM [ LKEYS.KEYREL.CARG "vestre+memurubre",
            PHON.ONSET con ] ].

vesttisfossen_n1 := n_proper_le &
 [ STEM < "vesttisfossen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "vesttisfossen",
            PHON.ONSET con ] ].

vesuvius_n1 := n_proper_le &
 [ STEM < "vesuvius" >,
   SYNSEM [ LKEYS.KEYREL.CARG "vesuvius",
            PHON.ONSET con ] ].

veteran_a1 := adj_attr_intrans_le &
 [ STEM < "veteran" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_veteran_a_1_rel",
            PHON.ONSET con ] ].

veteran_abb_n1 := n_ppof_le &
 [ STEM < "vet" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_veteran_n_of_rel",
            PHON.ONSET con ] ].

veteran_n1 := n_ppof_le &
 [ STEM < "veteran" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_veteran_n_of_rel",
            PHON.ONSET con ] ].

veterans_day := n_holiday_le &
 [ STEM < "veterans", "day" >,
   SYNSEM [ LKEYS.KEYREL.CARG "veterans_day",
            PHON.ONSET con ] ].

veterinarian_abb_n1 := n_intr_le &
 [ STEM < "vet" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_veterinarian_n_1_rel",
            PHON.ONSET con ] ].

veterinarian_n1 := n_intr_le &
 [ STEM < "veterinarian" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_veterinarian_n_1_rel",
            PHON.ONSET con ] ].

veterinary_a1 := adj_intrans_le &
 [ STEM < "veterinary" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_veterinary_a_1_rel",
            PHON.ONSET con ] ].

veterinary_n1 := n_no_cmpnd_le &
 [ STEM < "veterinary" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_veterinary_n_1_rel",
            PHON.ONSET con ] ].

vetlahelvete := n_proper_le &
 [ STEM < "vetlahelvete" >,
   SYNSEM [ LKEYS.KEYREL.CARG "vetlahelvete",
            PHON.ONSET con ] ].

vetledalen_n1 := n_proper_le &
 [ STEM < "vetledalen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "vetledalen",
            PHON.ONSET con ] ].

vetledÃ¸la_n1 := n_proper_le &
 [ STEM < "vetledÃ¸la" >,
   SYNSEM [ LKEYS.KEYREL.CARG "vetledÃ¸la",
            PHON.ONSET con ] ].

vetlestova_n1 := n_proper_le &
 [ STEM < "vetlestova" >,
   SYNSEM [ LKEYS.KEYREL.CARG "vetlestova",
            PHON.ONSET con ] ].

vetleutladalen_n1 := n_proper_le &
 [ STEM < "vetleutladalen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "vetleutladalen",
            PHON.ONSET con ] ].

veto_n1 := n_intr_le &
 [ STEM < "veto" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_veto_n_1_rel",
            PHON.ONSET con ] ].

veto_v1 := v_np_trans_le &
 [ STEM < "veto" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_veto_v_1_rel",
            PHON.ONSET con ] ].

vetti_n1 := n_proper_le &
 [ STEM < "vetti" >,
   SYNSEM [ LKEYS.KEYREL.CARG "vetti",
            PHON.ONSET con ] ].

vettisfossen_n1 := n_proper_le &
 [ STEM < "vettisfossen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "vettisfossen",
            PHON.ONSET con ] ].

vettismorki_n1 := n_proper_le &
 [ STEM < "vettismorki" >,
   SYNSEM [ LKEYS.KEYREL.CARG "vettismorki",
            PHON.ONSET con ] ].

vexation_n1 := n_mass_count_le &
 [ STEM < "vexation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vexation_n_1_rel",
            PHON.ONSET con ] ].

vh_n1 := n_proper_le &
 [ STEM < "vh" >,
   SYNSEM [ LKEYS.KEYREL.CARG "vh",
            PHON.ONSET con ] ].

vhs_n1 := n_mass_count_le &
 [ STEM < "vhs" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vhs_n_1_rel",
            PHON.ONSET con ] ].

via := p_reg_le &
 [ STEM < "via" >,
   SYNSEM [ LKEYS.KEYREL.PRED _via_p_rel,
            PHON.ONSET con ] ].

viaduct_n1 := n_intr_le &
 [ STEM < "viaduct" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_viaduct_n_1_rel",
            PHON.ONSET con ] ].

viaduct_post_ttl := n_post_title_le &
 [ STEM < "viaduct" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_viaduct_n_1_rel",
            PHON.ONSET con ] ].

vibrant_a1 := adj_intrans_le &
 [ STEM < "vibrant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vibrant_a_1_rel",
            PHON.ONSET con ] ].

vibrate_v1 := v_unerg_le &
 [ STEM < "vibrate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vibrate_v_1_rel",
            PHON.ONSET con ] ].

vibration_n1 := n_ppof_le &
 [ STEM < "vibration" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vibration_n_of_rel",
            PHON.ONSET con ] ].

vice_n1 := n_mass_count_le &
 [ STEM < "vice" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vice_n_1_rel",
            PHON.ONSET con ] ].

vice_president_n1 := n_ppof_le &
 [ STEM < "vice", "president" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vice_president_n_of_rel",
            PHON.ONSET con ] ].

vichy_n1 := n_proper_city_le &
 [ STEM < "vichy" >,
   SYNSEM [ LKEYS.KEYREL.CARG "vichy",
            PHON.ONSET con ] ].

vicinity_n1 := n_ppof_le &
 [ STEM < "vicinity" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vicinity_n_of_rel",
            PHON.ONSET con ] ].

vicissitude_n1 := n_intr_le &
 [ STEM < "vicissitude" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vicissitude_n_1_rel",
            PHON.ONSET con ] ].

victim_n1 := n_ppof_le &
 [ STEM < "victim" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_victim_n_of_rel",
            PHON.ONSET con ] ].

victoria_n1 := n_proper_city_le &
 [ STEM < "victoria" >,
   SYNSEM [ LKEYS.KEYREL.CARG "victoria",
            PHON.ONSET con ] ].

victory_n1 := n_mass_count_le &
 [ STEM < "victory" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_victory_n_1_rel",
            PHON.ONSET con ] ].

vidda_n1 := n_mass_le &
 [ STEM < "vidda" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vidda_n_1_rel",
            PHON.ONSET con ] ].

video_n1 := n_mass_count_ppof_le &
 [ STEM < "video" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_video_n_of_rel",
            PHON.ONSET con ] ].

vienna_n1 := n_proper_city_le &
 [ STEM < "vienna" >,
   SYNSEM [ LKEYS.KEYREL.CARG "vienna",
            PHON.ONSET con ] ].

vietnam_n1 := n_proper_le &
 [ STEM < "vietnam" >,
   SYNSEM [ LKEYS.KEYREL.CARG "vietnam",
            PHON.ONSET con ] ].

vietnam_n2 := n_proper_le &
 [ STEM < "viet", "nam" >,
   SYNSEM [ LKEYS.KEYREL.CARG "vietnam",
            PHON.ONSET con ] ].

vietnamese_a1 := adj_intrans_le &
 [ STEM < "vietnamese" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vietnamese_a_1_rel",
            PHON.ONSET con ] ].

vietnamese_n1 := n_proper_le &
 [ STEM < "vietnamese" >,
   SYNSEM [ LKEYS.KEYREL.CARG "vietnamese",
            PHON.ONSET con ] ].

vietnamese_n2 := n_plur_nocmpnd_le &
 [ STEM < "vietnamese" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vietnamese_n_1_rel",
            PHON.ONSET con ] ].

view_i_n1 := n_bare_jmod_opt_le &
 [ STEM < "view" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_view_n_of_rel",
            PHON.ONSET con ] ].

view_n1 := n_ppof_le &
 [ STEM < "view" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_view_n_of_rel",
            PHON.ONSET con ] ].

view_v1 := v_np_trans_le &
 [ STEM < "view" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_view_v_1_rel",
            PHON.ONSET con ] ].

viewer_n1 := n_ppof_le &
 [ STEM < "viewer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_viewer_n_of_rel",
            PHON.ONSET con ] ].

viewfinder_n1 := n_intr_le &
 [ STEM < "viewfinder" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_viewfinder_n_1_rel",
            PHON.ONSET con ] ].

viewpoint_n1 := n_intr_le &
 [ STEM < "viewpoint" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_viewpoint_n_1_rel",
            PHON.ONSET con ] ].

viewsonic_n1 := n_proper_le &
 [ STEM < "viewsonic" >,
   SYNSEM [ LKEYS.KEYREL.CARG "viewsonic",
            PHON.ONSET con ] ].

vigdal_n1 := n_proper_le &
 [ STEM < "vigdal" >,
   SYNSEM [ LKEYS.KEYREL.CARG "vigdal",
            PHON.ONSET con ] ].

vigor_n1 := n_mass_le &
 [ STEM < "vigor" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vigor_n_1_rel",
            PHON.ONSET con ] ].

vigorous_a1 := adj_intrans_le &
 [ STEM < "vigorous" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vigorous_a_1_rel",
            PHON.ONSET con ] ].

vikesland := n_proper_le &
 [ STEM < "vikesland" >,
   SYNSEM [ LKEYS.KEYREL.CARG "vikesland",
            PHON.ONSET con ] ].

viki := n_proper_le &
 [ STEM < "viki" >,
   SYNSEM [ LKEYS.KEYREL.CARG "viki",
            PHON.ONSET con ] ].

viking_n1 := n_intr_named_le &
 [ STEM < "viking" >,
   SYNSEM [ LKEYS.KEYREL.CARG "viking",
            PHON.ONSET con ] ].

villa_n1 := n_intr_le &
 [ STEM < "villa" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_villa_n_1_rel",
            PHON.ONSET con ] ].

village_n1 := n_ppof_le &
 [ STEM < "village" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_village_n_of_rel",
            PHON.ONSET con ] ].

villain_n1 := n_intr_le &
 [ STEM < "villain" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_villain_n_1_rel",
            PHON.ONSET con ] ].

vincent_n1 := n_proper_le &
 [ STEM < "vincent" >,
   SYNSEM [ LKEYS.KEYREL.CARG "vincent",
            PHON.ONSET con ] ].

vindhella := n_proper_le &
 [ STEM < "vindhella" >,
   SYNSEM [ LKEYS.KEYREL.CARG "vindhella",
            PHON.ONSET con ] ].

vindhellaveg := n_proper_le &
 [ STEM < "vindhellaveg" >,
   SYNSEM [ LKEYS.KEYREL.CARG "vindhellaveg",
            PHON.ONSET con ] ].

vindhellavegen := n_proper_le &
 [ STEM < "vindhellavegen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "vindhellavegen",
            PHON.ONSET con ] ].

vindicate_v1 := v_np_trans_le &
 [ STEM < "vindicate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vindicate_v_1_rel",
            PHON.ONSET con ] ].

vine_n1 := n_intr_le &
 [ STEM < "vine" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vine_n_1_rel",
            PHON.ONSET con ] ].

vinegar_n1 := n_mass_count_le &
 [ STEM < "vinegar" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vinegar_n_1_rel",
            PHON.ONSET con ] ].

vineyard_n1 := n_intr_le &
 [ STEM < "vineyard" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vineyard_n_1_rel",
            PHON.ONSET con ] ].

vinje_n1 := n_proper_le &
 [ STEM < "vinje" >,
   SYNSEM [ LKEYS.KEYREL.CARG "vinje",
            PHON.ONSET con ] ].

vinjebua_n1 := n_proper_le &
 [ STEM < "vinjebua" >,
   SYNSEM [ LKEYS.KEYREL.CARG "vinjebua",
            PHON.ONSET con ] ].

vinjestova_n1 := n_proper_le &
 [ STEM < "vinjestova" >,
   SYNSEM [ LKEYS.KEYREL.CARG "vinjestova",
            PHON.ONSET con ] ].

vinstra_n1 := n_proper_le &
 [ STEM < "vinstra" >,
   SYNSEM [ LKEYS.KEYREL.CARG "vinstra",
            PHON.ONSET con ] ].

vinstri_n1 := n_proper_le &
 [ STEM < "vinstri" >,
   SYNSEM [ LKEYS.KEYREL.CARG "vinstri",
            PHON.ONSET con ] ].

violate_v1 := v_np*_trans_le &
 [ STEM < "violate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_violate_v_1_rel",
            PHON.ONSET con ] ].

violence_n1 := n_mass_le &
 [ STEM < "violence" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_violence_n_1_rel",
            PHON.ONSET con ] ].

violent_a1 := adj_intrans_le &
 [ STEM < "violent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_violent_a_1_rel",
            PHON.ONSET con ] ].

violently := adv_int_vp_le &
 [ STEM < "violently" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_violent_a_1_rel",
            PHON.ONSET con ] ].

violet_a1 := adj_intrans_le &
 [ STEM < "violet" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_violet_a_1_rel",
            PHON.ONSET con ] ].

violet_n1 := n_color_le &
 [ STEM < "violet" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_violet_n_1_rel",
            PHON.ONSET con ] ].

violin_n1 := n_intr_le &
 [ STEM < "violin" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_violin_n_1_rel",
            PHON.ONSET con ] ].

virgin_n1 := n_intr_le &
 [ STEM < "virgin" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_virgin_n_1_rel",
            PHON.ONSET con ] ].

virginal_a1 := adj_intrans_le &
 [ STEM < "virginal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_virginal_a_1_rel",
            PHON.ONSET con ] ].

virginia_n1 := n_proper_le &
 [ STEM < "virginia" >,
   SYNSEM [ LKEYS.KEYREL.CARG "virginia",
            PHON.ONSET con ] ].

virginia_n2 := n_proper_abb_le &
 [ STEM < "va" >,
   SYNSEM [ LKEYS.KEYREL.CARG "virginia",
            PHON.ONSET con ] ].

virtual_a1 := adj_intrans_le &
 [ STEM < "virtual" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_virtual_a_1_rel",
            PHON.ONSET con ] ].

virtually_adv1 := adv_vp_pre_le &
 [ STEM < "virtually" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_virtual_a_1_rel",
            PHON.ONSET con ] ].

virtually_adv2 := adv_s_pre_le &
 [ STEM < "virtually" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_virtual_a_1_rel",
            PHON.ONSET con ] ].

virtually_deg := adv_degree_spec_jov_le &
 [ STEM < "virtually" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_virtually_x_deg_rel",
            PHON.ONSET con ] ].

virtually_deg2 := adv_degree_spec_m_le &
 [ STEM < "virtually" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_virtually_x_deg_rel",
            PHON.ONSET con ] ].

virtue_n1 := n_mass_count_ppof_le &
 [ STEM < "virtue" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_virtue_n_of_rel",
            PHON.ONSET con ] ].

virtuous_a1 := adj_intrans_le &
 [ STEM < "virtuous" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_virtuous_a_1_rel",
            PHON.ONSET con ] ].

virus_n1 := n_intr_le &
 [ STEM < "virus" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_virus_n_1_rel",
            PHON.ONSET con ] ].

visa := n_proper_le &
 [ STEM < "visa" >,
   SYNSEM [ LKEYS.KEYREL.CARG "visa",
            PHON.ONSET con ] ].

visbretindane_n1 := n_proper_pl_le &
 [ STEM < "visbretindane" >,
   SYNSEM [ LKEYS.KEYREL.CARG "visbretindane",
            PHON.ONSET con ] ].

visbretindar_n1 := n_proper_le &
 [ STEM < "visbretindar" >,
   SYNSEM [ LKEYS.KEYREL.CARG "visbretindar",
            PHON.ONSET con ] ].

visdalen_n1 := n_proper_le &
 [ STEM < "visdalen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "visdalen",
            PHON.ONSET con ] ].

visibility_n1 := n_mass_le &
 [ STEM < "visibility" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_visibility_n_1_rel",
            PHON.ONSET con ] ].

visible_a1 := adj_trans_le &
 [ STEM < "visible" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_visible_a_to_rel" ],
            PHON.ONSET con ] ].

vision_n1 := n_mass_count_le &
 [ STEM < "vision" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vision_n_1_rel",
            PHON.ONSET con ] ].

visit_n1 := n_ppcomp_le &
 [ STEM < "visit" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_visit_n_to_rel" ],
            PHON.ONSET con ] ].

visit_v1 := v_np*_trans_le &
 [ STEM < "visit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_visit_v_1_rel",
            PHON.ONSET con ] ].

visitor_n1 := n_ppof_le &
 [ STEM < "visitor" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_visitor_n_of_rel",
            PHON.ONSET con ] ].

visor_n1 := n_intr_le &
 [ STEM < "visor" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_visor_n_1_rel",
            PHON.ONSET con ] ].

vista_n1 := n_intr_le &
 [ STEM < "vista" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vista_n_1_rel",
            PHON.ONSET con ] ].

visual_a1 := adj_intrans_le &
 [ STEM < "visual" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_visual_a_1_rel",
            PHON.ONSET con ] ].

visual_n1 := n_no_cmpnd_le &
 [ STEM < "visual" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_visual_n_1_rel",
            PHON.ONSET con ] ].

visualize_v1 := v_np_trans_le &
 [ STEM < "visualize" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_visualize_v_1_rel",
            PHON.ONSET con ] ].

visualize_v2 := v_obj_equi_prd_le &
 [ STEM < "visualize" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_visualize_v_1_rel",
            PHON.ONSET con ] ].

visualize_v3 := v_np_as_le &
 [ STEM < "visualize" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_visualize_v_as_rel",
            PHON.ONSET con ] ].

visualize_v4 := v_cp_fin_inf_non_trans_le &
 [ STEM < "visualize" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_visualize_v_understand_rel",
            PHON.ONSET con ] ].

vital_a1 := adj_trans_le &
 [ STEM < "vital" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_vital_a_for_rel" ],
            PHON.ONSET con ] ].

vital_a2 := adj_reg_atrans_le &
 [ STEM < "vital" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vital_a_for_rel",
            PHON.ONSET con ] ].

vital_a3 := adj_reg_atrans_cp_le &
 [ STEM < "vital" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vital_a_for_rel",
            PHON.ONSET con ] ].

vitality_n1 := n_mass_le &
 [ STEM < "vitality" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vitality_n_1_rel",
            PHON.ONSET con ] ].

vitally_grad := adv_degree_spec_v_le &
 [ STEM < "vitally" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vitally_x_rel",
            PHON.ONSET con ] ].

vitreous_a1 := adj_intrans_le &
 [ STEM < "vitreous" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vitreous_a_1_rel",
            PHON.ONSET con ] ].

vitriol_n1 := n_mass_le &
 [ STEM < "vitriol" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vitriol_n_1_rel",
            PHON.ONSET con ] ].

vivacity_n1 := n_mass_le &
 [ STEM < "vivacity" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vivacity_n_1_rel",
            PHON.ONSET con ] ].

vivian := n_proper_le &
 [ STEM < "vivian" >,
   SYNSEM [ LKEYS.KEYREL.CARG "vivian",
            PHON.ONSET con ] ].

vivid_a1 := adj_intrans_le &
 [ STEM < "vivid" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vivid_a_1_rel",
            PHON.ONSET con ] ].

vividly := adv_int_vp_le &
 [ STEM < "vividly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vivid_a_1_rel",
            PHON.ONSET con ] ].

viz_p := p_le &
 [ STEM < "viz." >,
   SYNSEM [ LKEYS.KEYREL.PRED _viz_p_rel,
            PHON.ONSET con ] ].

viz_p2 := p_le &
 [ STEM < "viz" >,
   SYNSEM [ LKEYS.KEYREL.PRED _viz_p_rel,
            PHON.ONSET con ] ].

viz_padv := p_ppcomp_copred_le &
 [ STEM < "viz." >,
   SYNSEM [ LKEYS.KEYREL.PRED _viz_p_rel,
            PHON.ONSET con ] ].

viz_padv2 := p_ppcomp_copred_le &
 [ STEM < "viz" >,
   SYNSEM [ LKEYS.KEYREL.PRED _viz_p_rel,
            PHON.ONSET con ] ].

vocable_n1 := n_intr_le &
 [ STEM < "vocable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vocable_n_1_rel",
            PHON.ONSET con ] ].

vocabulary_n1 := n_mass_count_le &
 [ STEM < "vocabulary" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vocabulary_n_1_rel",
            PHON.ONSET con ] ].

vocal_a1 := adj_intrans_le &
 [ STEM < "vocal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vocal_a_1_rel",
            PHON.ONSET con ] ].

vocalization_n1 := n_mass_count_ppof_le &
 [ STEM < "vocalization" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vocalization_n_of_rel",
            PHON.ONSET con ] ].

vocalize_v1 := v_np*_trans_le &
 [ STEM < "vocalize" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vocalize_v_1_rel",
            PHON.ONSET con ] ].

vocation_n1 := n_mass_count_le &
 [ STEM < "vocation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vocation_n_1_rel",
            PHON.ONSET con ] ].

vogue_n1 := n_mass_le &
 [ STEM < "vogue" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vogue_n_1_rel",
            PHON.ONSET con ] ].

voice_n1 := n_intr_le &
 [ STEM < "voice" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_voice_n_1_rel",
            PHON.ONSET con ] ].

voice_v1 := v_np_trans_le &
 [ STEM < "voice" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_voice_v_1_rel",
            PHON.ONSET con ] ].

voicemail_n1 := n_mass_count_le &
 [ STEM < "voicemail" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_voicemail_n_1_rel",
            PHON.ONSET con ] ].

void_a1 := adj_trans_le &
 [ STEM < "void" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_void_a_of_rel" ],
            PHON.ONSET con ] ].

volatile_a1 := adj_intrans_le &
 [ STEM < "volatile" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_volatile_a_1_rel",
            PHON.ONSET con ] ].

volcano_n1 := n_intr_le &
 [ STEM < "volcano" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_volcano_n_1_rel",
            PHON.ONSET con ] ].

volda := n_proper_le &
 [ STEM < "volda" >,
   SYNSEM [ LKEYS.KEYREL.CARG "volda",
            PHON.ONSET con ] ].

vole := n_proper_le &
 [ STEM < "vole" >,
   SYNSEM [ LKEYS.KEYREL.CARG "vole",
            PHON.ONSET con ] ].

vole_n1 := n_intr_le &
 [ STEM < "vole" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vole_n_1_rel",
            PHON.ONSET con ] ].

vole_n2 := n_mass_kind_le &
 [ STEM < "vole" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vole_n_kind_rel",
            PHON.ONSET con ] ].

volehytta_n1 := n_proper_le &
 [ STEM < "volehytta" >,
   SYNSEM [ LKEYS.KEYREL.CARG "volehytta",
            PHON.ONSET con ] ].

volehytte_n1 := n_proper_le &
 [ STEM < "volehytte" >,
   SYNSEM [ LKEYS.KEYREL.CARG "volehytte",
            PHON.ONSET con ] ].

volkstrauertag := n_holiday_le &
 [ STEM < "the", "day", "of", "prayer_and_repentance" >,
   SYNSEM [ LKEYS.KEYREL.CARG "day_of_prayer_and_repentance",
            PHON.ONSET con ] ].

volkswagen_n1 := n_proper_le &
 [ STEM < "volkswagen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "volkswagen",
            PHON.ONSET con ] ].

vollavik_n1 := n_proper_city_le &
 [ STEM < "vollavik" >,
   SYNSEM [ LKEYS.KEYREL.CARG "vollavik",
            PHON.ONSET con ] ].

voltage_n1 := n_ppof_le &
 [ STEM < "voltage" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_voltage_n_of_rel",
            PHON.ONSET con ] ].

volume_n1 := n_mass_count_ppof_le &
 [ STEM < "volume" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_volume_n_of_rel",
            PHON.ONSET con ] ].

voluntarily := adv_int_vp_le &
 [ STEM < "voluntarily" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_voluntary_a_1_rel",
            PHON.ONSET con ] ].

voluntary_isect := adj_intrans_le &
 [ STEM < "voluntary" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_voluntary_a_1_rel",
            PHON.ONSET con ] ].

volunteer_n1 := n_intr_le &
 [ STEM < "volunteer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_volunteer_n_1_rel",
            PHON.ONSET con ] ].

volunteer_v1 := v_np*_trans_le &
 [ STEM < "volunteer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_volunteer_v_1_rel",
            PHON.ONSET con ] ].

volunteer_v2 := v_subj_equi_le &
 [ STEM < "volunteer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_volunteer_v_1_rel",
            PHON.ONSET con ] ].

von-julis_n1 := n_proper_le &
 [ STEM < "von", "julis" >,
   SYNSEM [ LKEYS.KEYREL.CARG "von-julis",
            PHON.ONSET con ] ].

von-sudniz_n1 := n_proper_le &
 [ STEM < "von", "sudniz" >,
   SYNSEM [ LKEYS.KEYREL.CARG "von-sudniz",
            PHON.ONSET con ] ].

vormeli_n1 := n_proper_le &
 [ STEM < "vormeli" >,
   SYNSEM [ LKEYS.KEYREL.CARG "vormeli",
            PHON.ONSET con ] ].

voss_n1 := n_proper_le &
 [ STEM < "voss" >,
   SYNSEM [ LKEYS.KEYREL.CARG "voss",
            PHON.ONSET con ] ].

vote_against_v1 := v_empty_prep_intrans_le &
 [ STEM < "vote" >,
   SYNSEM [ LKEYS [ --COMPKEY _against_p_sel_rel,
                    KEYREL.PRED "_vote_v_against_rel" ],
            PHON.ONSET con ] ].

vote_for_v1 := v_empty_prep_intrans_le &
 [ STEM < "vote" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_vote_v_for_rel" ],
            PHON.ONSET con ] ].

vote_n1 := n_intr_le &
 [ STEM < "vote" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vote_n_1_rel",
            PHON.ONSET con ] ].

vote_v1 := v_unerg_le &
 [ STEM < "vote" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vote_v_1_rel",
            PHON.ONSET con ] ].

vote_v2 := v_subj_equi_le &
 [ STEM < "vote" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vote_v_1_rel",
            PHON.ONSET con ] ].

voucher_n1 := n_intr_le &
 [ STEM < "voucher" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_voucher_n_1_rel",
            PHON.ONSET con ] ].

vow_n1 := n_intr_le &
 [ STEM < "vow" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vow_n_1_rel",
            PHON.ONSET con ] ].

vow_v1 := v_subj_equi_le &
 [ STEM < "vow" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vow_v_1_rel",
            PHON.ONSET con ] ].

vow_v2 := v_cp_prop_non_trans_le &
 [ STEM < "vow" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vow_v_1_rel",
            PHON.ONSET con ] ].

vowel_n1 := n_intr_le &
 [ STEM < "vowel" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vowel_n_1_rel",
            PHON.ONSET con ] ].

voyage_n1 := n_ppof_le &
 [ STEM < "voyage" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_voyage_n_of_rel",
            PHON.ONSET con ] ].

voyager_n1 := n_proper_le &
 [ STEM < "voyager" >,
   SYNSEM [ LKEYS.KEYREL.CARG "voyager",
            PHON.ONSET con ] ].

vs_2_conj := conj_complex_vs_le &
 [ STEM < "vs." >,
   SYNSEM.PHON.ONSET con ].

vs_3_conj := conj_complex_vs_le &
 [ STEM < "v." >,
   SYNSEM.PHON.ONSET con ].

vs_conj := conj_complex_vs_le &
 [ STEM < "vs" >,
   SYNSEM.PHON.ONSET con ].

vulgar_a1 := adj_intrans_le &
 [ STEM < "vulgar" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vulgar_a_1_rel",
            PHON.ONSET con ] ].

vulgar_n1 := n_intr_sg_le &
 [ STEM < "vulgar" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vulgar_n_1_rel",
            PHON.ONSET con ] ].

vulnerable_a1 := adj_trans_le &
 [ STEM < "vulnerable" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_vulnerable_a_to_rel" ],
            PHON.ONSET con ] ].

vulutjorn := n_proper_le &
 [ STEM < "vulutjorn" >,
   SYNSEM [ LKEYS.KEYREL.CARG "vulutjorn",
            PHON.ONSET con ] ].

vÃ¥gÃ¥_n1 := n_proper_le &
 [ STEM < "vÃ¥gÃ¥" >,
   SYNSEM [ LKEYS.KEYREL.CARG "vÃ¥gÃ¥",
            PHON.ONSET con ] ].

vÃ¸loa_n1 := n_proper_le &
 [ STEM < "vÃ¸loa" >,
   SYNSEM [ LKEYS.KEYREL.CARG "vÃ¸loa",
            PHON.ONSET con ] ].

vÃ¸lodalen_n1 := n_proper_le &
 [ STEM < "vÃ¸lodalen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "vÃ¸lodalen",
            PHON.ONSET con ] ].

vÃ¸lohornet_n1 := n_proper_le &
 [ STEM < "vÃ¸lohornet" >,
   SYNSEM [ LKEYS.KEYREL.CARG "vÃ¸lohornet",
            PHON.ONSET con ] ].

w_np1 := n_proper_le &
 [ STEM < "_w" >,
   SYNSEM [ LKEYS.KEYREL.CARG "w",
            PHON.ONSET con ] ].

w_period_np1 := n_proper_le &
 [ STEM < "w." >,
   SYNSEM [ LKEYS.KEYREL.CARG "w",
            PHON.ONSET con ] ].

w_period_np2 := n_proper_le &
 [ STEM < "_w." >,
   SYNSEM [ LKEYS.KEYREL.CARG "w",
            PHON.ONSET con ] ].

wacky_a1 := adj_intrans_le &
 [ STEM < "wacky" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wacky_a_1_rel",
            PHON.ONSET con ] ].

waco_n1 := n_proper_city_le &
 [ STEM < "waco" >,
   SYNSEM [ LKEYS.KEYREL.CARG "waco",
            PHON.ONSET con ] ].

wade_v1 := v_prep_dir_le &
 [ STEM < "wade" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wade_v_1_rel",
            PHON.ONSET con ] ].

wade_v2 := v_np_trans_noger_le &
 [ STEM < "wade" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wade_v_1_rel",
            PHON.ONSET con ] ].

wage_n1 := n_mass_count_le &
 [ STEM < "wage" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wage_n_1_rel",
            PHON.ONSET con ] ].

wage_v1 := v_np_trans_le &
 [ STEM < "wage" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wage_v_1_rel",
            PHON.ONSET con ] ].

wager_n1 := n_cpcomp_fin_le &
 [ STEM < "wager" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wager_n_1_rel",
            PHON.ONSET con ] ].

wager_n2 := n_intr_le &
 [ STEM < "wager" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wager_n_1_rel",
            PHON.ONSET con ] ].

wager_v1 := v_np_np_cp_le &
 [ STEM < "wager" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wager_v_1_rel",
            PHON.ONSET con ] ].

wagon_n1 := n_intr_le &
 [ STEM < "wagon" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wagon_n_1_rel",
            PHON.ONSET con ] ].

wahlster_n1 := n_proper_le &
 [ STEM < "wahlster" >,
   SYNSEM [ LKEYS.KEYREL.CARG "wahlster",
            PHON.ONSET con ] ].

waibel_n1 := n_proper_le &
 [ STEM < "waibel" >,
   SYNSEM [ LKEYS.KEYREL.CARG "waibel",
            PHON.ONSET con ] ].

wail_n1 := n_intr_le &
 [ STEM < "wail" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wail_n_1_rel",
            PHON.ONSET con ] ].

wail_v1 := v_unerg_le &
 [ STEM < "wail" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wail_v_1_rel",
            PHON.ONSET con ] ].

wait_n1 := n_intr_le &
 [ STEM < "wait" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wait_n_1_rel",
            PHON.ONSET con ] ].

wait_on_v1 := v_empty_prep_intrans_le &
 [ STEM < "wait" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_wait_v_on_rel" ],
            PHON.ONSET con ] ].

wait_root := adv_s_pre_word_root_le &
 [ STEM < "wait" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wait_a_1_rel",
            PHON.ONSET con ] ].

wait_v1 := v_np*_trans_le &
 [ STEM < "wait" >,
   SYNSEM [ LKEYS [ --COMPKEY temp_abstr_rel,
                    KEYREL.PRED "_wait_v_1_rel" ],
            PHON.ONSET con ] ].

wait_v2 := v_subj_equi_le &
 [ STEM < "wait" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wait_v_1_rel",
            PHON.ONSET con ] ].

wait_v3 := v_cp_inf_le &
 [ STEM < "wait" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wait_v_1_rel",
            PHON.ONSET con ] ].

wait_v4 := v_empty_prep_intrans_le &
 [ STEM < "wait" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_wait_v_for_rel" ],
            PHON.ONSET con ] ].

waiter_n1 := n_intr_le &
 [ STEM < "waiter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_waiter_n_1_rel",
            PHON.ONSET con ] ].

waive_v1 := v_np_trans_le &
 [ STEM < "waive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_waive_v_1_rel",
            PHON.ONSET con ] ].

waiver_n1 := n_ppof_le &
 [ STEM < "waiver" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_waiver_n_of_rel",
            PHON.ONSET con ] ].

wake_n1 := n_intr_le &
 [ STEM < "wake" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wake_n_1_rel",
            PHON.ONSET con ] ].

wake_up_v1 := v_particle_le &
 [ STEM < "wake" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_wake_v_up_rel" ],
            PHON.ONSET con ] ].

wake_v1 := v_np*_trans_le &
 [ STEM < "wake" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wake_v_1_rel",
            PHON.ONSET con ] ].

wake_x_up_v1 := v_particle_np_le &
 [ STEM < "wake" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_wake_v_up_rel" ],
            PHON.ONSET con ] ].

wakefield_n1 := n_proper_le &
 [ STEM < "wakefield" >,
   SYNSEM [ LKEYS.KEYREL.CARG "wakefield",
            PHON.ONSET con ] ].

wal_mart_n1 := n_proper_le &
 [ STEM < "wal-", "mart" >,
   SYNSEM [ LKEYS.KEYREL.CARG "wal_mart",
            PHON.ONSET con ] ].

wal_mart_n2 := n_proper_le &
 [ STEM < "walmart" >,
   SYNSEM [ LKEYS.KEYREL.CARG "wal_mart",
            PHON.ONSET con ] ].

wal_mart_n3 := n_proper_le &
 [ STEM < "wal", "mart" >,
   SYNSEM [ LKEYS.KEYREL.CARG "wal_mart",
            PHON.ONSET con ] ].

walk_n1 := n_intr_le &
 [ STEM < "walk" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_walk_n_1_rel",
            PHON.ONSET con ] ].

walk_over_v1 := v_particle_le &
 [ STEM < "walk" >,
   SYNSEM [ LKEYS [ --COMPKEY _over_p_sel_rel,
                    KEYREL.PRED "_walk_v_over_rel" ],
            PHON.ONSET con ] ].

walk_v1 := v_prep_dir_le &
 [ STEM < "walk" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_walk_v_1_rel",
            PHON.ONSET con ] ].

walk_v2 := v_np_trans_noger_le &
 [ STEM < "walk" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_walk_v_1_rel",
            PHON.ONSET con ] ].

walker_n1 := n_intr_le &
 [ STEM < "walker" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_walker_n_1_rel",
            PHON.ONSET con ] ].

walkie_talkie_n1 := n_intr_le &
 [ STEM < "walkie", "talkie" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_walkie+talkie_n_1_rel",
            PHON.ONSET con ] ].

walkie_talkie_n2 := n_intr_le &
 [ STEM < "walkie-", "talkie" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_walkie+talkie_n_1_rel",
            PHON.ONSET con ] ].

walkman_n1 := n_intr_le &
 [ STEM < "walkman" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_walkman_n_1_rel",
            PHON.ONSET con ] ].

wall_in_v1 := v_particle_np_le &
 [ STEM < "wall" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_wall_v_in_rel" ],
            PHON.ONSET con ] ].

wall_n1 := n_proper_le &
 [ STEM < "wall" >,
   SYNSEM [ LKEYS.KEYREL.CARG "wall",
            PHON.ONSET con ] ].

wall_n2 := n_ppof_le &
 [ STEM < "wall" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wall_n_of_rel",
            PHON.ONSET con ] ].

wall_off_v1 := v_particle_np_le &
 [ STEM < "wall" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_wall_v_off_rel" ],
            PHON.ONSET con ] ].

wall_post_ttl := n_post_title_le &
 [ STEM < "wall" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wall_n_of_rel",
            PHON.ONSET con ] ].

wallet_n1 := n_intr_le &
 [ STEM < "wallet" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wallet_n_1_rel",
            PHON.ONSET con ] ].

wally_n1 := n_proper_le &
 [ STEM < "wally" >,
   SYNSEM [ LKEYS.KEYREL.CARG "wally",
            PHON.ONSET con ] ].

waltz_n1 := n_intr_le &
 [ STEM < "waltz" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_waltz_n_1_rel",
            PHON.ONSET con ] ].

waltz_v1 := v_unerg_le &
 [ STEM < "waltz" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_waltz_v_1_rel",
            PHON.ONSET con ] ].

wand_n1 := n_intr_le &
 [ STEM < "wand" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wand_n_1_rel",
            PHON.ONSET con ] ].

wander_off_v1 := v_particle_le &
 [ STEM < "wander" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_wander_v_off_rel" ],
            PHON.ONSET con ] ].

wander_up_v1 := v_particle_le &
 [ STEM < "wander" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_wander_v_up_rel" ],
            PHON.ONSET con ] ].

wander_v1 := v_prep_dir_le &
 [ STEM < "wander" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wander_v_1_rel",
            PHON.ONSET con ] ].

wanderer_n1 := n_intr_le &
 [ STEM < "wanderer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wanderer_n_1_rel",
            PHON.ONSET con ] ].

wanna_v1 := v_subj_equi_bse_le &
 [ STEM < "wanna" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_want_v_1_rel",
            PHON.ONSET con ] ].

wanna_v2 := v_unerg_le &
 [ STEM < "wanna" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_want_v_1_rel",
            PHON.ONSET con ] ].

want_back_v1 := v_particle_np_le &
 [ STEM < "want" >,
   SYNSEM [ LKEYS [ --COMPKEY _back_p_sel_rel,
                    KEYREL.PRED "_want_v_back_rel" ],
            PHON.ONSET con ] ].

want_into_v1 := v_subj_equi_prd_prep_le &
 [ STEM < "want" >,
   SYNSEM [ LKEYS [ --COMPKEY _into_p_rel,
                    KEYREL.PRED "_want_v_1_rel" ],
            PHON.ONSET con ] ].

want_prd := v_obj_equi_non_trans_prd_le &
 [ STEM < "want" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_want_v_1_rel",
            PHON.ONSET con ] ].

want_v1 := v_np_non_trans_le &
 [ STEM < "want" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_want_v_1_rel",
            PHON.ONSET con ] ].

want_v2 := v_subj_equi_le &
 [ STEM < "want" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_want_v_1_rel",
            PHON.ONSET con ] ].

want_v3 := v_sor_non_trans_le &
 [ STEM < "want" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_want_v_1_rel",
            PHON.ONSET con ] ].

wanted_a1 := adj_intrans_le &
 [ STEM < "wanted" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wanted_a_1_rel",
            PHON.ONSET con ] ].

wanton_a1 := adj_intrans_le &
 [ STEM < "wanton" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wanton_a_1_rel",
            PHON.ONSET con ] ].

wap_n1 := n_proper_le &
 [ STEM < "wap" >,
   SYNSEM [ LKEYS.KEYREL.CARG "wap",
            PHON.ONSET con ] ].

war_n := n_mass_count_le &
 [ STEM < "war" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_war_n_1_rel",
            PHON.ONSET con ] ].

war_v1 := v_unerg_le &
 [ STEM < "war" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_war_v_1_rel",
            PHON.ONSET con ] ].

warbler_n1 := n_intr_le &
 [ STEM < "warbler" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_warbler_n_1_rel",
            PHON.ONSET con ] ].

warbler_n2 := n_mass_kind_le &
 [ STEM < "warbler" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_warbler_n_kind_rel",
            PHON.ONSET con ] ].

ward_n1 := n_intr_le &
 [ STEM < "ward" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ward_n_1_rel",
            PHON.ONSET con ] ].

ward_off_v1 := v_particle_np_le &
 [ STEM < "ward" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_ward_v_off_rel" ],
            PHON.ONSET con ] ].

ward_v1 := v_np_trans_le &
 [ STEM < "ward" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ward_v_1_rel",
            PHON.ONSET con ] ].

warden_n1 := n_intr_le &
 [ STEM < "warden" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_warden_n_1_rel",
            PHON.ONSET con ] ].

wardrobe_n1 := n_intr_le &
 [ STEM < "wardrobe" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wardrobe_n_1_rel",
            PHON.ONSET con ] ].

warehouse_n1 := n_ppof_le &
 [ STEM < "warehouse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_warehouse_n_of_rel",
            PHON.ONSET con ] ].

warehouse_v1 := v_np_trans_le &
 [ STEM < "warehouse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_warehouse_v_1_rel",
            PHON.ONSET con ] ].

wares_n1 := n_plur_nocmpnd_le &
 [ STEM < "ware" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wares_n_1_rel",
            PHON.ONSET con ] ].

warlike_a1 := adj_intrans_le &
 [ STEM < "warlike" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_warlike_a_1_rel",
            PHON.ONSET con ] ].

warm-up_n1 := n_intr_le &
 [ STEM < "warm", "up" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_warm+up_n_1_rel",
            PHON.ONSET con ] ].

warm-up_n2 := n_intr_le &
 [ STEM < "warm-", "up" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_warm+up_n_1_rel",
            PHON.ONSET con ] ].

warm_a1 := adj_intrans_le &
 [ STEM < "warm" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_warm_a_1_rel",
            PHON.ONSET con ] ].

warm_a2 := adj_atrans_le &
 [ STEM < "warm" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_warm_a_1_rel",
            PHON.ONSET con ] ].

warm_up_v1 := v_particle_np_le &
 [ STEM < "warm" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_warm_v_up_rel" ],
            PHON.ONSET con ] ].

warm_up_v2 := v_particle_le &
 [ STEM < "warm" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_warm_v_up_rel" ],
            PHON.ONSET con ] ].

warm_v1 := v_np_trans_le &
 [ STEM < "warm" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_warm_v_1_rel",
            PHON.ONSET con ] ].

warmer_a1 := adj_comp_le &
 [ STEM < "warmer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_warm_a_1_rel",
            PHON.ONSET con ] ].

warmer_a2 := adj_atrans_comp_le &
 [ STEM < "warmer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_warm_a_1_rel",
            PHON.ONSET con ] ].

warmest_a1 := adj_superl_le &
 [ STEM < "warmest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_warm_a_1_rel",
            PHON.ONSET con ] ].

warmest_a2 := adj_atrans_superl_le &
 [ STEM < "warmest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_warm_a_1_rel",
            PHON.ONSET con ] ].

warmly_adv1 := adv_int_vp_le &
 [ STEM < "warmly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_warm_a_1_rel",
            PHON.ONSET con ] ].

warmth_n1 := n_mass_le &
 [ STEM < "warmth" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_warmth_n_1_rel",
            PHON.ONSET con ] ].

warn_of_v1 := v_empty_prep_intrans_le &
 [ STEM < "warn" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_warn_v_of_rel" ],
            PHON.ONSET con ] ].

warn_of_v2 := v_empty_prep_trans_le &
 [ STEM < "warn" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_warn_v_of_rel" ],
            PHON.ONSET con ] ].

warn_v1 := v_np*_trans_cp_le &
 [ STEM < "warn" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_warn_v_1_rel",
            PHON.ONSET con ] ].

warn_v2 := v_np_trans_le &
 [ STEM < "warn" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_warn_v_1_rel",
            PHON.ONSET con ] ].

warn_v3 := v_obj_equi_le &
 [ STEM < "warn" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_warn_v_1_rel",
            PHON.ONSET con ] ].

warner_n1 := n_proper_le &
 [ STEM < "warner" >,
   SYNSEM [ LKEYS.KEYREL.CARG "warner",
            PHON.ONSET con ] ].

warning_n1 := n_ppof_le &
 [ STEM < "warning" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_warning_n_of_rel",
            PHON.ONSET con ] ].

warp_n1 := n_mass_count_le &
 [ STEM < "warp" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_warp_n_1_rel",
            PHON.ONSET con ] ].

warp_v1 := v_np*_trans_le &
 [ STEM < "warp" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_warp_v_1_rel",
            PHON.ONSET con ] ].

warrant_n1 := n_intr_le &
 [ STEM < "warrant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_warrant_n_1_rel",
            PHON.ONSET con ] ].

warrant_v1 := v_np_trans_le &
 [ STEM < "warrant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_warrant_v_1_rel",
            PHON.ONSET con ] ].

warrant_v2 := v_cp_prop_non_trans_le &
 [ STEM < "warrant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_warrant_v_1_rel",
            PHON.ONSET con ] ].

warranty_n1 := n_intr_le &
 [ STEM < "warranty" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_warranty_n_1_rel",
            PHON.ONSET con ] ].

warren_n1 := n_proper_le &
 [ STEM < "warren" >,
   SYNSEM [ LKEYS.KEYREL.CARG "warren",
            PHON.ONSET con ] ].

wash_away_v1 := v_particle_np_le &
 [ STEM < "wash" >,
   SYNSEM [ LKEYS [ --COMPKEY _away_p_sel_rel,
                    KEYREL.PRED "_wash_v_away_rel" ],
            PHON.ONSET con ] ].

wash_away_v2 := v_particle_le &
 [ STEM < "wash" >,
   SYNSEM [ LKEYS [ --COMPKEY _away_p_sel_rel,
                    KEYREL.PRED "_wash_v_away_rel" ],
            PHON.ONSET con ] ].

wash_down_v1 := v_particle_np_le &
 [ STEM < "wash" >,
   SYNSEM [ LKEYS [ --COMPKEY _down_p_sel_rel,
                    KEYREL.PRED "_wash_v_down_rel" ],
            PHON.ONSET con ] ].

wash_down_v2 := v_particle_le &
 [ STEM < "wash" >,
   SYNSEM [ LKEYS [ --COMPKEY _down_p_sel_rel,
                    KEYREL.PRED "_wash_v_down_rel" ],
            PHON.ONSET con ] ].

wash_n1 := n_intr_le &
 [ STEM < "wash" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wash_n_1_rel",
            PHON.ONSET con ] ].

wash_out_v1 := v_particle_np_le &
 [ STEM < "wash" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_wash_v_out_rel" ],
            PHON.ONSET con ] ].

wash_out_v2 := v_particle_le &
 [ STEM < "wash" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_wash_v_out_rel" ],
            PHON.ONSET con ] ].

wash_up_v1 := v_particle_np_le &
 [ STEM < "wash" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_wash_v_up_rel" ],
            PHON.ONSET con ] ].

wash_up_v2 := v_particle_le &
 [ STEM < "wash" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_wash_v_up_rel" ],
            PHON.ONSET con ] ].

wash_v1 := v_np*_trans_le &
 [ STEM < "wash" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wash_v_1_rel",
            PHON.ONSET con ] ].

washer_n1 := n_ppof_le &
 [ STEM < "washer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_washer_n_of_rel",
            PHON.ONSET con ] ].

washington_n1 := n_proper_city_le &
 [ STEM < "washington" >,
   SYNSEM [ LKEYS.KEYREL.CARG "washington",
            PHON.ONSET con ] ].

washington_n2 := n_proper_abb_le &
 [ STEM < "wa" >,
   SYNSEM [ LKEYS.KEYREL.CARG "washington",
            PHON.ONSET con ] ].

washingtondc_n1 := n_proper_city_le &
 [ STEM < "washington", "dc" >,
   SYNSEM [ LKEYS.KEYREL.CARG "washingtondc",
            PHON.ONSET con ] ].

washingtondc_n10 := n_proper_city_le &
 [ STEM < "_d.c." >,
   SYNSEM [ LKEYS.KEYREL.CARG "washingtondc",
            PHON.ONSET con ] ].

washingtondc_n11 := n_proper_city_le &
 [ STEM < "d.c" >,
   SYNSEM [ LKEYS.KEYREL.CARG "washingtondc",
            PHON.ONSET con ] ].

washingtondc_n2 := n_proper_abb_le &
 [ STEM < "dc" >,
   SYNSEM [ LKEYS.KEYREL.CARG "washingtondc",
            PHON.ONSET con ] ].

washingtondc_n3 := n_proper_city_le &
 [ STEM < "d.c." >,
   SYNSEM [ LKEYS.KEYREL.CARG "washingtondc",
            PHON.ONSET con ] ].

washingtondc_n4 := n_proper_abb_le &
 [ STEM < "d", "c" >,
   SYNSEM [ LKEYS.KEYREL.CARG "washingtondc",
            PHON.ONSET con ] ].

washingtondc_n5 := n_proper_abb_le &
 [ STEM < "d.", "c." >,
   SYNSEM [ LKEYS.KEYREL.CARG "washingtondc",
            PHON.ONSET con ] ].

washingtondc_n6 := n_proper_abb_le &
 [ STEM < "d-", "c" >,
   SYNSEM [ LKEYS.KEYREL.CARG "washingtondc",
            PHON.ONSET con ] ].

washingtondc_n7 := n_proper_city_le &
 [ STEM < "_d.c" >,
   SYNSEM [ LKEYS.KEYREL.CARG "washingtondc",
            PHON.ONSET con ] ].

washingtondc_n8 := n_proper_abb_le &
 [ STEM < "_d-", "-", "_c" >,
   SYNSEM [ LKEYS.KEYREL.CARG "washingtondc",
            PHON.ONSET con ] ].

washingtondc_n9 := n_proper_abb_le &
 [ STEM < "_d.", "c." >,
   SYNSEM [ LKEYS.KEYREL.CARG "washingtondc",
            PHON.ONSET con ] ].

waste_n1 := n_ppof_le &
 [ STEM < "waste" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_waste_n_of_rel",
            PHON.ONSET con ] ].

waste_v1 := v_np_trans_le &
 [ STEM < "waste" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_waste_v_1_rel",
            PHON.ONSET con ] ].

wasteland_n1 := n_mass_count_le &
 [ STEM < "wasteland" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wasteland_n_1_rel",
            PHON.ONSET con ] ].

watch_for_v1 := v_empty_prep_intrans_le &
 [ STEM < "watch" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_watch_v_for_rel" ],
            PHON.ONSET con ] ].

watch_n1 := n_intr_le &
 [ STEM < "watch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_watch_n_1_rel",
            PHON.ONSET con ] ].

watch_out_v1 := v_particle_pp_le &
 [ STEM < "watch" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    --OCOMPKEY _for_p_rel,
                    KEYREL.PRED "_watch_v_out_rel" ],
            PHON.ONSET con ] ].

watch_out_v2 := v_particle_le &
 [ STEM < "watch" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_watch_v_out_rel" ],
            PHON.ONSET con ] ].

watch_v1 := v_np*_trans_le &
 [ STEM < "watch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_watch_v_1_rel",
            PHON.ONSET con ] ].

watch_v2 := v_sorb_le &
 [ STEM < "watch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_watch_v_1_rel",
            PHON.ONSET con ] ].

watch_v3 := v_obj_equi_prd_le &
 [ STEM < "watch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_watch_v_1_rel",
            PHON.ONSET con ] ].

watchful_a1 := adj_intrans_le &
 [ STEM < "watchful" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_watchful_a_1_rel",
            PHON.ONSET con ] ].

watchman_n1 := n_intr_le &
 [ STEM < "watchman" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_watchman_n_1_rel",
            PHON.ONSET con ] ].

water_filled_a1 := adj_intrans_le &
 [ STEM < "water-", "filled" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_water-filled_a_1_rel",
            PHON.ONSET con ] ].

water_n2 := n_mass_count_le &
 [ STEM < "water" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_water_n_1_rel",
            PHON.ONSET con ] ].

water_repellent_a1 := adj_intrans_le &
 [ STEM < "water-", "repellent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_water-repellent_a_1_rel",
            PHON.ONSET con ] ].

water_ski_v1 := v_prep_dir_le &
 [ STEM < "water", "ski" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_water+ski_v_1_rel",
            PHON.ONSET con ] ].

water_v1 := v_np*_trans_le &
 [ STEM < "water" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_water_v_1_rel",
            PHON.ONSET con ] ].

watercourse_n1 := n_intr_le &
 [ STEM < "watercourse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_watercourse_n_1_rel",
            PHON.ONSET con ] ].

waterfall_n1 := n_intr_le &
 [ STEM < "waterfall" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_waterfall_n_1_rel",
            PHON.ONSET con ] ].

waterfall_post_ttl := n_post_title_le &
 [ STEM < "waterfall" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_waterfall_n_1_rel",
            PHON.ONSET con ] ].

waterpower_n1 := n_mass_le &
 [ STEM < "waterpower" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_waterpower_n_1_rel",
            PHON.ONSET con ] ].

waterproof_a1 := adj_intrans_le &
 [ STEM < "waterproof" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_waterproof_a_1_rel",
            PHON.ONSET con ] ].

waterproof_v1 := v_np_trans_le &
 [ STEM < "waterproof" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_waterproof_v_1_rel",
            PHON.ONSET con ] ].

waterproofing_n1 := n_intr_le &
 [ STEM < "waterproofing" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_waterproofing_n_1_rel",
            PHON.ONSET con ] ].

watershed_n1 := n_intr_le &
 [ STEM < "watershed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_watershed_n_1_rel",
            PHON.ONSET con ] ].

waterside_n1 := n_intr_le &
 [ STEM < "waterside" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_waterside_n_1_rel",
            PHON.ONSET con ] ].

watertight_a1 := adj_intrans_le &
 [ STEM < "watertight" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_watertight_a_1_rel",
            PHON.ONSET con ] ].

waterway_n1 := n_intr_le &
 [ STEM < "waterway" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_waterway_n_1_rel",
            PHON.ONSET con ] ].

watery_a1 := adj_intrans_le &
 [ STEM < "watery" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_watery_a_1_rel",
            PHON.ONSET con ] ].

watt_n1 := n_intr_le &
 [ STEM < "watt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_watt_n_1_rel",
            PHON.ONSET con ] ].

wave_n1 := n_ppof_le &
 [ STEM < "wave" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wave_n_of_rel",
            PHON.ONSET con ] ].

wave_v1 := v_np*_trans_le &
 [ STEM < "wave" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wave_v_1_rel",
            PHON.ONSET con ] ].

waveform_n1 := n_intr_le &
 [ STEM < "waveform" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_waveform_n_1_rel",
            PHON.ONSET con ] ].

wavelike_a1 := adj_intrans_le &
 [ STEM < "wavelike" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wavelike_a_1_rel",
            PHON.ONSET con ] ].

wavy_a1 := adj_intrans_le &
 [ STEM < "wavy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wavy_a_1_rel",
            PHON.ONSET con ] ].

wax_n1 := n_mass_count_le &
 [ STEM < "wax" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wax_n_1_rel",
            PHON.ONSET con ] ].

wax_v1 := v_np*_trans_le &
 [ STEM < "wax" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wax_v_1_rel",
            PHON.ONSET con ] ].

wax_v2 := v_prdp_pp_seq_adj_le &
 [ STEM < "wax" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wax_v_to_rel",
            PHON.ONSET con ] ].

way_deg := adv_degree_spec_m_le &
 [ STEM < "way" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_way_x_deg_rel",
            PHON.ONSET con ] ].

way_n1 := n_ppof_modable_le &
 [ STEM < "way" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_way_n_of_rel",
            PHON.ONSET con ] ].

way_n2 := n_vpcomp_le &
 [ STEM < "way" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_way_n_of_rel",
            PHON.ONSET con ] ].

way_n3 := n_cpcomp_modable_le &
 [ STEM < "way" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_way_n_of_rel",
            PHON.ONSET con ] ].

way_n4 := n_ppcomp_oblig_le &
 [ STEM < "way" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_way_n_to_rel" ],
            PHON.ONSET con ] ].

way_post_ttl := n_post_title_le &
 [ STEM < "way" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_way_n_to_rel",
            PHON.ONSET con ] ].

way_too_deg := adv_degree_spec_v_le &
 [ STEM < "way", "too" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_way+too_x_deg_rel",
            PHON.ONSET con ] ].

wayfarer_n1 := n_intr_le &
 [ STEM < "wayfarer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wayfarer_n_1_rel",
            PHON.ONSET con ] ].

wayne_n1 := n_proper_city_le &
 [ STEM < "wayne" >,
   SYNSEM [ LKEYS.KEYREL.CARG "wayne",
            PHON.ONSET con ] ].

ways_n1 := n_meas_nocmpnd_le &
 [ STEM < "ways" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ways_n_1_rel",
            PHON.ONSET con ] ].

wayside_n1 := n_intr_le &
 [ STEM < "wayside" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wayside_n_1_rel",
            PHON.ONSET con ] ].

wdr_nd := n_proper_le &
 [ STEM < "wdr" >,
   SYNSEM [ LKEYS.KEYREL.CARG "wdr",
            PHON.ONSET con ] ].

we := n_pers_pro_we_le &
 [ STEM < "we" >,
   SYNSEM.PHON.ONSET con ].

we_plus_np := n_pers_pro_we_np_le &
 [ STEM < "we" >,
   SYNSEM.PHON.ONSET con ].

weak_a1 := adj_intrans_le &
 [ STEM < "weak" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_weak_a_1_rel",
            PHON.ONSET con ] ].

weaken_v1 := v_np_trans_noger_le &
 [ STEM < "weaken" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_weaken_v_cause_rel",
            PHON.ONSET con ] ].

weaken_v2 := v_unacc_le &
 [ STEM < "weaken" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_weaken_v_1_rel",
            PHON.ONSET con ] ].

weaker_a1 := adj_comp_le &
 [ STEM < "weaker" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_weak_a_1_rel",
            PHON.ONSET con ] ].

weakest_a1 := adj_superl_le &
 [ STEM < "weakest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_weak_a_1_rel",
            PHON.ONSET con ] ].

weakly := adv_int_vp_le &
 [ STEM < "weakly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_weak_a_1_rel",
            PHON.ONSET con ] ].

weakness_n1 := n_mass_count_le &
 [ STEM < "weakness" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_weakness_n_1_rel",
            PHON.ONSET con ] ].

wealth_n1 := n_mass_count_ppof_le &
 [ STEM < "wealth" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wealth_n_of_rel",
            PHON.ONSET con ] ].

wealthy_a1 := adj_intrans_le &
 [ STEM < "wealthy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wealthy_a_1_rel",
            PHON.ONSET con ] ].

wean_n1 := n_proper_le &
 [ STEM < "wean" >,
   SYNSEM [ LKEYS.KEYREL.CARG "wean",
            PHON.ONSET con ] ].

weapon_n1 := n_intr_le &
 [ STEM < "weapon" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_weapon_n_1_rel",
            PHON.ONSET con ] ].

wear_away_v1 := v_particle_le &
 [ STEM < "wear" >,
   SYNSEM [ LKEYS [ --COMPKEY _away_p_sel_rel,
                    KEYREL.PRED "_wear_v_away_rel" ],
            PHON.ONSET con ] ].

wear_away_v2 := v_particle_np_le &
 [ STEM < "wear" >,
   SYNSEM [ LKEYS [ --COMPKEY _away_p_sel_rel,
                    KEYREL.PRED "_wear_v_away_rel" ],
            PHON.ONSET con ] ].

wear_off_v1 := v_particle_le &
 [ STEM < "wear" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_wear_v_off_rel" ],
            PHON.ONSET con ] ].

wear_out_v1 := v_particle_np_le &
 [ STEM < "wear" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_wear_v_out_rel" ],
            PHON.ONSET con ] ].

wear_out_v2 := v_particle_le &
 [ STEM < "wear" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_wear_v_out_rel" ],
            PHON.ONSET con ] ].

wear_v1 := v_np_trans_le &
 [ STEM < "wear" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wear_v_1_rel",
            PHON.ONSET con ] ].

wearer_n1 := n_intr_le &
 [ STEM < "wearer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wearer_n_1_rel",
            PHON.ONSET con ] ].

weariness_n1 := n_mass_le &
 [ STEM < "weariness" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_weariness_n_1_rel",
            PHON.ONSET con ] ].

weasel_n1 := n_intr_le &
 [ STEM < "weasel" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_weasel_n_1_rel",
            PHON.ONSET con ] ].

weather_beaten_a1 := adj_intrans_le &
 [ STEM < "weather-", "beaten" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_weather+beaten_a_1_rel",
            PHON.ONSET con ] ].

weather_beaten_a2 := adj_intrans_le &
 [ STEM < "weather", "beaten" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_weather+beaten_a_1_rel",
            PHON.ONSET con ] ].

weather_n1 := n_mass_le &
 [ STEM < "weather" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_weather_n_1_rel",
            PHON.ONSET con ] ].

weather_v1 := v_np_trans_le &
 [ STEM < "weather" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_weather_v_1_rel",
            PHON.ONSET con ] ].

weatherbreaker_n1 := n_intr_le &
 [ STEM < "weatherbreaker" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_weatherbreaker_n_1_rel",
            PHON.ONSET con ] ].

weave_n1 := n_intr_le &
 [ STEM < "weave" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_weave_n_1_rel",
            PHON.ONSET con ] ].

weave_v1 := v_np*_trans_le &
 [ STEM < "weave" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_weave_v_1_rel",
            PHON.ONSET con ] ].

weave_v2 := v_ditrans_only_le &
 [ STEM < "weave" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_weave_v_1_rel",
            PHON.ONSET con ] ].

weave_v3 := v_np_prep_trans_dors_le &
 [ STEM < "weave" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_weave_v_1_rel",
            PHON.ONSET con ] ].

weaver_n1 := n_intr_le &
 [ STEM < "weaver" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_weaver_n_1_rel",
            PHON.ONSET con ] ].

web-ersatz := n_proper_le &
 [ STEM < "webersatz" >,
   SYNSEM [ LKEYS.KEYREL.CARG "webersatz",
            PHON.ONSET onset ] ].

web_n1 := n_ppof_le &
 [ STEM < "web" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_web_n_of_rel",
            PHON.ONSET con ] ].

webcam_n1 := n_intr_le &
 [ STEM < "webcam" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_webcam_n_1_rel",
            PHON.ONSET con ] ].

webmaster_n1 := n_intr_le &
 [ STEM < "webmaster" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_webmaster_n_1_rel",
            PHON.ONSET con ] ].

webpage_n1 := n_intr_le &
 [ STEM < "webpage" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_webpage_n_1_rel",
            PHON.ONSET con ] ].

website_n1 := n_intr_le &
 [ STEM < "website" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_website_n_1_rel",
            PHON.ONSET con ] ].

website_n2 := n_intr_le &
 [ STEM < "web-", "site" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_website_n_1_rel",
            PHON.ONSET con ] ].

webster_n1 := n_proper_le &
 [ STEM < "webster" >,
   SYNSEM [ LKEYS.KEYREL.CARG "webster",
            PHON.ONSET con ] ].

wed_to_v1 := v_empty_prep_trans_le &
 [ STEM < "wed" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_wed_v_to_rel" ],
            PHON.ONSET con ] ].

wed_v1 := v_np*_trans_le &
 [ STEM < "wed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wed_v_1_rel",
            PHON.ONSET con ] ].

wedding_n1 := n_ppof_le &
 [ STEM < "wedding" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wedding_n_of_rel",
            PHON.ONSET con ] ].

wedge_in_v1 := v_particle_np_le &
 [ STEM < "wedge" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_wedge_v_in_rel" ],
            PHON.ONSET con ] ].

wedge_n1 := n_ppof_le &
 [ STEM < "wedge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wedge_n_of_rel",
            PHON.ONSET con ] ].

wedge_v1 := v_np_trans_le &
 [ STEM < "wedge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wedge_v_1_rel",
            PHON.ONSET con ] ].

wedlock_n1 := n_mass_le &
 [ STEM < "wedlock" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wedlock_n_1_rel",
            PHON.ONSET con ] ].

wednesday_n1 := n_day_of_week_le &
 [ STEM < "wednesday" >,
   SYNSEM [ LKEYS.KEYREL.CARG "wed",
            PHON.ONSET con ] ].

wednesday_n2 := n_day_of_week_le &
 [ STEM < "wed" >,
   SYNSEM [ LKEYS.KEYREL.CARG "wed",
            PHON.ONSET con ] ].

wednesday_n3 := n_day_of_week_le &
 [ STEM < "wed." >,
   SYNSEM [ LKEYS.KEYREL.CARG "wed",
            PHON.ONSET con ] ].

wee_a1 := adj_intrans_le &
 [ STEM < "wee" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wee_a_1_rel",
            PHON.ONSET con ] ].

weed_n1 := n_mass_count_le &
 [ STEM < "weed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_weed_n_1_rel",
            PHON.ONSET con ] ].

weed_out_v1 := v_particle_np_le &
 [ STEM < "weed" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_weed_v_out_rel" ],
            PHON.ONSET con ] ].

weed_v1 := v_np*_trans_le &
 [ STEM < "weed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_weed_v_1_rel",
            PHON.ONSET con ] ].

week1 := n_temp_nd_le &
 [ STEM < "week" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_week_n_1_rel",
            PHON.ONSET con ] ].

weekday_n1 := n_intr_temp_d_le &
 [ STEM < "weekday" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_weekday_n_1_rel",
            PHON.ONSET con ] ].

weekend_n1 := n_temp_ppcomp_day_le &
 [ STEM < "weekend" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_weekend_n_of_rel",
            PHON.ONSET con ] ].

weekend_n2 := n_temp_ppcomp_day_le &
 [ STEM < "week-", "end" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_weekend_n_of_rel",
            PHON.ONSET con ] ].

weekend_nc_n1 := n_day_part_nocomp_le &
 [ STEM < "weekend" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_weekend_n_of_rel",
            PHON.ONSET con ] ].

weekend_nc_n2 := n_day_part_nocomp_le &
 [ STEM < "week-", "end" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_weekend_n_of_rel",
            PHON.ONSET con ] ].

weekend_pl_def := n_def_day_part_pl_le &
 [ STEM < "weekends" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_weekend_n_of_rel",
            PHON.ONSET con ] ].

weekend_pl_def_2 := n_def_day_part_pl_le &
 [ STEM < "week-", "ends" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_weekend_n_of_rel",
            PHON.ONSET con ] ].

weekend_sg_def := n_def_day_part_sg_le &
 [ STEM < "weekend" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_weekend_n_of_rel",
            PHON.ONSET con ] ].

weekend_sg_def_2 := n_def_day_part_sg_le &
 [ STEM < "week-", "end" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_weekend_n_of_rel",
            PHON.ONSET con ] ].

weekly_a1 := adj_intrans_le &
 [ STEM < "weekly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_weekly_a_1_rel",
            PHON.ONSET con ] ].

weekly_adv1 := adv_int_vp_post_le &
 [ STEM < "weekly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_weekly_a_1_rel",
            PHON.ONSET con ] ].

weep_v1 := v_np*_trans_le &
 [ STEM < "weep" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_weep_v_1_rel",
            PHON.ONSET con ] ].

weigh_up_v1 := v_particle_np_le &
 [ STEM < "weigh" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_weigh_v_up_rel" ],
            PHON.ONSET con ] ].

weigh_v1 := v_np_trans_le &
 [ STEM < "weigh" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_weigh_v_1_rel",
            PHON.ONSET con ] ].

weight_n1 := n_mass_count_ppof_le &
 [ STEM < "weight" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_weight_n_of_rel",
            PHON.ONSET con ] ].

weighty_a1 := adj_intrans_le &
 [ STEM < "weighty" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_weighty_a_1_rel",
            PHON.ONSET con ] ].

weimar_n1 := n_proper_city_le &
 [ STEM < "weimar" >,
   SYNSEM [ LKEYS.KEYREL.CARG "weimar",
            PHON.ONSET con ] ].

weir_n1 := n_proper_le &
 [ STEM < "weir" >,
   SYNSEM [ LKEYS.KEYREL.CARG "weir",
            PHON.ONSET con ] ].

weird_a1 := adj_intrans_le &
 [ STEM < "weird" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_weird_a_1_rel",
            PHON.ONSET con ] ].

welcome_a1 := adj_intrans_le &
 [ STEM < "welcome" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_welcome_a_1_rel",
            PHON.ONSET con ] ].

welcome_n1 := n_intr_le &
 [ STEM < "welcome" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_welcome_n_1_rel",
            PHON.ONSET con ] ].

welcome_v1 := v_np_trans_le &
 [ STEM < "welcome" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_welcome_v_1_rel",
            PHON.ONSET con ] ].

weld_n1 := n_intr_le &
 [ STEM < "weld" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_weld_n_1_rel",
            PHON.ONSET con ] ].

weld_v1 := v_np*_trans_le &
 [ STEM < "weld" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_weld_v_1_rel",
            PHON.ONSET con ] ].

welfare_n1 := n_mass_le &
 [ STEM < "welfare" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_welfare_n_1_rel",
            PHON.ONSET con ] ].

well := adv_int_vp_post_nonmob_le &
 [ STEM < "well" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_well_a_1_rel",
            PHON.ONSET con ] ].

well_adj := adj_pred_intrans_le &
 [ STEM < "well" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_well_a_2_rel",
            PHON.ONSET con ] ].

well_deg2 := adv_degree_spec_prep_dir_only_le &
 [ STEM < "well" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_well_x_deg_rel",
            PHON.ONSET con ] ].

well_n1 := n_intr_le &
 [ STEM < "well" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_well_n_1_rel",
            PHON.ONSET con ] ].

well_off_a1 := adj_intrans_le &
 [ STEM < "well", "off" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_well+off_a_1_rel",
            PHON.ONSET con ] ].

well_off_a2 := adj_intrans_le &
 [ STEM < "well-", "off" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_well+off_a_1_rel",
            PHON.ONSET con ] ].

well_s_adv := adv_s_pre_word_root_le &
 [ STEM < "well" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_well_a_1_rel",
            PHON.ONSET con ] ].

well_up_v1 := v_particle_le &
 [ STEM < "well" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_well_v_up_rel" ],
            PHON.ONSET con ] ].

well_vp_adv := adv_int_vp_aux_le &
 [ STEM < "well" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_well_a_1_rel",
            PHON.ONSET con ] ].

wellknown_a2 := adj_intrans_le &
 [ STEM < "well-", "known" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_well+known_a_1_rel",
            PHON.ONSET con ] ].

wend_v1 := v_np_trans_le &
 [ STEM < "wend" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wend_v_1_rel",
            PHON.ONSET con ] ].

wergeland_n1 := n_proper_le &
 [ STEM < "wergeland" >,
   SYNSEM [ LKEYS.KEYREL.CARG "wergeland",
            PHON.ONSET con ] ].

west_a1 := adj_attr_intrans_le &
 [ STEM < "west" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_west_a_1_rel",
            PHON.ONSET con ] ].

west_indies_n1 := n_intr_named_le &
 [ STEM < "west", "indies" >,
   SYNSEM [ LKEYS.KEYREL.CARG "west_indies",
            PHON.ONSET con ] ].

west_n1 := n_no_cmpnd_hd_le &
 [ STEM < "west" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_west_n_1_rel",
            PHON.ONSET con ] ].

west_n2 := n_adv_dir_le &
 [ STEM < "west" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED _west_a_1_rel,
                    KEYREL.PRED place_n_rel ],
            PHON.ONSET con ] ].

westbound_a1 := adj_intrans_le &
 [ STEM < "westbound" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_westbound_a_1_rel",
            PHON.ONSET con ] ].

westerly_a1 := adj_intrans_le &
 [ STEM < "westerly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_westerly_a_1_rel",
            PHON.ONSET con ] ].

western_a1 := adj_intrans_le &
 [ STEM < "western" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_western_a_1_rel",
            PHON.ONSET con ] ].

westernmost_a1 := adj_intrans_le &
 [ STEM < "westernmost" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_westernmost_a_1_rel",
            PHON.ONSET con ] ].

westvirginia_n1 := n_proper_le &
 [ STEM < "west", "virginia" >,
   SYNSEM [ LKEYS.KEYREL.CARG "westvirginia",
            PHON.ONSET con ] ].

westvirginia_n2 := n_proper_abb_le &
 [ STEM < "wv" >,
   SYNSEM [ LKEYS.KEYREL.CARG "westvirginia",
            PHON.ONSET con ] ].

westward_a1 := adj_intrans_le &
 [ STEM < "westward" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_westward_a_1_rel",
            PHON.ONSET con ] ].

westward_n1 := n_adv_event_le &
 [ STEM < "westward" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED _westward_a_1_rel,
                    KEYREL.PRED place_n_rel ],
            PHON.ONSET con ] ].

westwards_n1 := n_adv_event_le &
 [ STEM < "westwards" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED _westward_a_1_rel,
                    KEYREL.PRED place_n_rel ],
            PHON.ONSET con ] ].

wet_a1 := adj_intrans_le &
 [ STEM < "wet" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wet_a_1_rel",
            PHON.ONSET con ] ].

wet_a2 := adj_atrans_le &
 [ STEM < "wet" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wet_a_1_rel",
            PHON.ONSET con ] ].

wetness_n1 := n_mass_le &
 [ STEM < "wetness" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wetness_n_1_rel",
            PHON.ONSET con ] ].

wetter_a1 := adj_comp_le &
 [ STEM < "wetter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wet_a_1_rel",
            PHON.ONSET con ] ].

wetter_a2 := adj_atrans_comp_le &
 [ STEM < "wetter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wet_a_1_rel",
            PHON.ONSET con ] ].

wettest_a1 := adj_superl_le &
 [ STEM < "wettest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wet_a_1_rel",
            PHON.ONSET con ] ].

wettest_a2 := adj_atrans_superl_le &
 [ STEM < "wettest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wet_a_1_rel",
            PHON.ONSET con ] ].

wetzlar_n1 := n_proper_le &
 [ STEM < "wetzlar" >,
   SYNSEM [ LKEYS.KEYREL.CARG "wetzlar",
            PHON.ONSET con ] ].

whale_n1 := n_intr_le &
 [ STEM < "whale" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_whale_n_1_rel",
            PHON.ONSET con ] ].

whalebone_n1 := n_mass_count_le &
 [ STEM < "whalebone" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_whalebone_n_1_rel",
            PHON.ONSET con ] ].

wharf_n1 := n_intr_le &
 [ STEM < "wharf" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wharf_n_1_rel",
            PHON.ONSET con ] ].

what1 := n_wh_pro_le &
 [ STEM < "what" >,
   SYNSEM [ LKEYS.KEYREL.PRED thing_rel,
            PHON.ONSET con ] ].

what2 := n_freerel_pro_le &
 [ STEM < "what" >,
   SYNSEM [ LKEYS.KEYREL.PRED thing_rel,
            PHON.ONSET con ] ].

what_a_det := det_sg_nomod_a_le &
 [ STEM < "what", "a" >,
   SYNSEM [ LKEYS.KEYREL.PRED _what+a_q_rel,
            PHON.ONSET con ] ].

what_about := comp_how_about_n_or_p_le &
 [ STEM < "what", "about" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_how+about_x_rel",
            PHON.ONSET con ] ].

what_about_vp := comp_how_about_vp_le &
 [ STEM < "what", "about" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_how+about_x_rel",
            PHON.ONSET con ] ].

what_an_det := det_sg_nomod_an_le &
 [ STEM < "what", "an" >,
   SYNSEM [ LKEYS.KEYREL.PRED _what+a_q_rel,
            PHON.ONSET con ] ].

what_det := det_wh_le &
 [ STEM < "what" >,
   SYNSEM [ LKEYS.KEYREL.PRED _which_q_rel,
            PHON.ONSET con ] ].

what_det_freerel := det_freerel_le &
 [ STEM < "what" >,
   SYNSEM [ LKEYS.KEYREL.PRED free_relative_q_rel,
            PHON.ONSET con ] ].

what_do_you_say := comp_how_about_s_le &
 [ STEM < "what", "do", "you", "say" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_how+about_x_rel",
            PHON.ONSET con ] ].

what_if := comp_how_about_s_le &
 [ STEM < "what", "if" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_how+about_x_rel",
            PHON.ONSET con ] ].

whatever1 := n_freerel_ever_pro_le &
 [ STEM < "whatever" >,
   SYNSEM [ LKEYS.KEYREL.PRED thing_rel,
            PHON.ONSET con ] ].

whatever_det := det_freerel_le &
 [ STEM < "whatever" >,
   SYNSEM [ LKEYS.KEYREL.PRED free_relative_ever_q_rel,
            PHON.ONSET con ] ].

whatever_root_post := adv_s_post_word_nospec_le &
 [ STEM < "whatever" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_whatever_a_1_rel",
            PHON.ONSET con ] ].

whatever_root_pre := adv_s_pre_word_root_le &
 [ STEM < "whatever" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_whatever_a_1_rel",
            PHON.ONSET con ] ].

whatnot_n1 := n_intr_le &
 [ STEM < "whatnot" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_whatnot_n_1_rel",
            PHON.ONSET con ] ].

whatsoever1 := n_freerel_ever_pro_le &
 [ STEM < "whatsoever" >,
   SYNSEM [ LKEYS.KEYREL.PRED thing_rel,
            PHON.ONSET con ] ].

whatsoever_adv1 := adv_int_vp_post_le &
 [ STEM < "whatsoever" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_whatsover_a_1_rel",
            PHON.ONSET con ] ].

whatsoever_det := det_freerel_le &
 [ STEM < "whatsoever" >,
   SYNSEM [ LKEYS.KEYREL.PRED free_relative_ever_q_rel,
            PHON.ONSET con ] ].

wheat_n1 := n_mass_le &
 [ STEM < "wheat" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wheat_n_1_rel",
            PHON.ONSET con ] ].

wheel_in_v1 := v_particle_le &
 [ STEM < "wheel" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_wheel_v_in_rel" ],
            PHON.ONSET con ] ].

wheel_in_v2 := v_particle_np_le &
 [ STEM < "wheel" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_wheel_v_in_rel" ],
            PHON.ONSET con ] ].

wheel_n1 := n_intr_le &
 [ STEM < "wheel" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wheel_n_1_rel",
            PHON.ONSET con ] ].

wheel_out_v1 := v_particle_le &
 [ STEM < "wheel" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_wheel_v_out_rel" ],
            PHON.ONSET con ] ].

wheel_out_v2 := v_particle_np_le &
 [ STEM < "wheel" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_wheel_v_out_rel" ],
            PHON.ONSET con ] ].

wheel_v1 := v_unerg_le &
 [ STEM < "wheel" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wheel_v_1_rel",
            PHON.ONSET con ] ].

wheelbarrow_n1 := n_intr_le &
 [ STEM < "wheelbarrow" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wheelbarrow_n_1_rel",
            PHON.ONSET con ] ].

wheelhouse_n1 := n_intr_le &
 [ STEM < "wheelhouse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wheelhouse_n_1_rel",
            PHON.ONSET con ] ].

when2 := pp_rel_le &
 [ STEM < "when" >,
   SYNSEM [ LKEYS [ ALTKEYREL.PRED temp_rel,
                    KEYREL.PRED temp_loc_x_rel ],
            PHON.ONSET con ] ].

when_freerel_np := n_freerel_pro_adv_le &
 [ STEM < "when" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED temp_loc_x_rel,
                    KEYREL.PRED temp_rel ],
            PHON.ONSET con ] ].

when_nom := n_wh_adv_tm_le &
 [ STEM < "when" >,
   SYNSEM.PHON.ONSET con ].

when_p1 := p_prdp_le &
 [ STEM < "when" >,
   SYNSEM [ LKEYS.KEYREL.PRED temp_loc_x_rel,
            PHON.ONSET con ] ].

when_subord_prd := p_subconj_prd_le &
 [ STEM < "when" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_when_x_subord_rel",
            PHON.ONSET con ] ].

whence_rl := pp_rel_le &
 [ STEM < "whence" >,
   SYNSEM [ LKEYS [ ALTKEYREL.PRED time_n_rel,
                    KEYREL.PRED _whence_p_rel ],
            PHON.ONSET con ] ].

whence_wh := pp_wh_le &
 [ STEM < "whence" >,
   SYNSEM [ LKEYS [ ALTKEYREL.PRED time_n_rel,
                    KEYREL.PRED _whence_p_rel ],
            PHON.ONSET con ] ].

whenever_freerel_np := n_freerel_ever_pro_adv_le &
 [ STEM < "whenever" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED temp_loc_x_rel,
                    KEYREL.PRED temp_rel ],
            PHON.ONSET con ] ].

where2 := pp_rel_le &
 [ STEM < "where" >,
   SYNSEM [ LKEYS [ ALTKEYREL.PRED place_n_rel,
                    KEYREL.PRED unspec_loc_rel ],
            PHON.ONSET con ] ].

where_freerel_np := n_freerel_pro_adv_le &
 [ STEM < "where" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED unspec_loc_rel,
                    KEYREL.PRED place_n_rel ],
            PHON.ONSET con ] ].

where_nom := n_wh_adv_pl_le &
 [ STEM < "where" >,
   SYNSEM.PHON.ONSET con ].

whereabouts_n1 := n_plur_ppcomp_le &
 [ STEM < "whereabouts" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_whereabouts_n_of_rel" ],
            PHON.ONSET con ] ].

whereas := p_subconj_le &
 [ STEM < "whereas" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_whereas_x_rel",
            PHON.ONSET con ] ].

whereby := p_subconj_le &
 [ STEM < "whereby" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_whereby_x_rel",
            PHON.ONSET con ] ].

wherein := pp_rel_le &
 [ STEM < "wherein" >,
   SYNSEM [ LKEYS [ ALTKEYREL.PRED place_n_rel,
                    KEYREL.PRED unspec_loc_rel ],
            PHON.ONSET con ] ].

wherever_freerel_np := n_freerel_ever_pro_adv_le &
 [ STEM < "wherever" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED unspec_loc_rel,
                    KEYREL.PRED place_n_rel ],
            PHON.ONSET con ] ].

whether_c_fin := comp_whether_fin_le &
 [ STEM < "whether" >,
   SYNSEM.PHON.ONSET con ].

whether_c_inf := comp_whether_inf_le &
 [ STEM < "whether" >,
   SYNSEM.PHON.ONSET con ].

whether_or_not_c_fin := comp_whether_fin_le &
 [ STEM < "whether", "or", "not" >,
   SYNSEM.PHON.ONSET con ].

whether_or_not_c_inf := comp_whether_inf_le &
 [ STEM < "whether", "or", "not" >,
   SYNSEM.PHON.ONSET con ].

whether_or_not_p1 := p_subconj_le &
 [ STEM < "whether", "or", "not" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_whether+or+not_x_rel",
            PHON.ONSET con ] ].

whether_p1 := p_subconj_le &
 [ STEM < "whether" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_whether_x_rel",
            PHON.ONSET con ] ].

which1 := det_part_unsp_le &
 [ STEM < "which" >,
   SYNSEM [ LKEYS.KEYREL.PRED _which_q_rel,
            PHON.ONSET con ] ].

which_r := n_rel_pro_what_le &
 [ STEM < "which" >,
   SYNSEM.PHON.ONSET con ].

whichever := n_freerel_part_le &
 [ STEM < "whichever" >,
   SYNSEM [ LKEYS.KEYREL.PRED free_relative_ever_q_rel,
            PHON.ONSET con ] ].

whiffletree_n1 := n_intr_le &
 [ STEM < "whiffletree" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_whiffletree_n_1_rel",
            PHON.ONSET con ] ].

whig := n_intr_named_le &
 [ STEM < "whig" >,
   SYNSEM [ LKEYS.KEYREL.CARG "whig",
            PHON.ONSET con ] ].

while := p_subconj_le &
 [ STEM < "while" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_while_x_rel",
            PHON.ONSET con ] ].

while_n1 := n_no_cmpnd_le &
 [ STEM < "while" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_while_n_1_rel",
            PHON.ONSET con ] ].

while_prd := p_subconj_prd_le &
 [ STEM < "while" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_while_x_rel",
            PHON.ONSET con ] ].

whilst := p_subconj_le &
 [ STEM < "whilst" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_whilst_x_rel",
            PHON.ONSET con ] ].

whip_in_v1 := v_particle_np_le &
 [ STEM < "whip" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_whip_v_in_rel" ],
            PHON.ONSET con ] ].

whip_n1 := n_intr_le &
 [ STEM < "whip" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_whip_n_1_rel",
            PHON.ONSET con ] ].

whip_off_v1 := v_particle_np_le &
 [ STEM < "whip" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_whip_v_off_rel" ],
            PHON.ONSET con ] ].

whip_out_v1 := v_particle_np_le &
 [ STEM < "whip" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_whip_v_out_rel" ],
            PHON.ONSET con ] ].

whip_v1 := v_np_trans_le &
 [ STEM < "whip" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_whip_v_1_rel",
            PHON.ONSET con ] ].

whirl_n1 := n_intr_le &
 [ STEM < "whirl" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_whirl_n_1_rel",
            PHON.ONSET con ] ].

whirl_v1 := v_unacc_dir_le &
 [ STEM < "whirl" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_whirl_v_1_rel",
            PHON.ONSET con ] ].

whirl_v2 := v_np_trans_le &
 [ STEM < "whirl" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_whirl_v_cause_rel",
            PHON.ONSET con ] ].

whirlpool_n1 := n_ppof_le &
 [ STEM < "whirlpool" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_whirlpool_n_of_rel",
            PHON.ONSET con ] ].

whisker_n1 := n_intr_le &
 [ STEM < "whisker" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_whisker_n_1_rel",
            PHON.ONSET con ] ].

whisper_n1 := n_intr_le &
 [ STEM < "whisper" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_whisper_n_1_rel",
            PHON.ONSET con ] ].

whisper_v1 := v_np*_trans_le &
 [ STEM < "whisper" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_whisper_v_1_rel",
            PHON.ONSET con ] ].

whisper_v2 := v_cp_non_trans_le &
 [ STEM < "whisper" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_whisper_v_1_rel",
            PHON.ONSET con ] ].

whist_n1 := n_mass_le &
 [ STEM < "whist" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_whist_n_1_rel",
            PHON.ONSET con ] ].

whistle_n1 := n_intr_le &
 [ STEM < "whistle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_whistle_n_1_rel",
            PHON.ONSET con ] ].

whistle_up_v1 := v_particle_np_le &
 [ STEM < "whistle" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_whistle_v_up_rel" ],
            PHON.ONSET con ] ].

whistle_v1 := v_np*_trans_le &
 [ STEM < "whistle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_whistle_v_1_rel",
            PHON.ONSET con ] ].

whistler_n1 := n_proper_city_le &
 [ STEM < "whistler" >,
   SYNSEM [ LKEYS.KEYREL.CARG "whistler",
            PHON.ONSET con ] ].

whit_monday := n_holiday_le &
 [ STEM < "whit", "monday" >,
   SYNSEM [ LKEYS.KEYREL.CARG "whit_monday",
            PHON.ONSET con ] ].

whit_sunday_hd := n_holiday_le &
 [ STEM < "whit", "sunday" >,
   SYNSEM [ LKEYS.KEYREL.CARG "whit_sunday",
            PHON.ONSET con ] ].

whit_week := n_holiday_le &
 [ STEM < "whit", "week" >,
   SYNSEM [ LKEYS.KEYREL.CARG "whit_week",
            PHON.ONSET con ] ].

whitcomb_n1 := n_proper_le &
 [ STEM < "whitcomb" >,
   SYNSEM [ LKEYS.KEYREL.CARG "whitcomb",
            PHON.ONSET con ] ].

white_a1 := adj_intrans_le &
 [ STEM < "white" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_white_a_1_rel",
            PHON.ONSET con ] ].

white_n1 := n_mass_count_le &
 [ STEM < "white" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_white_n_1_rel",
            PHON.ONSET con ] ].

whiteboard_n1 := n_intr_le &
 [ STEM < "whiteboard" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_whiteboard_n_1_rel",
            PHON.ONSET con ] ].

whiten_v1 := v_unacc_le &
 [ STEM < "whiten" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_whiten_v_1_rel",
            PHON.ONSET con ] ].

whiten_v2 := v_np_trans_noger_le &
 [ STEM < "whiten" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_whiten_v_cause_rel",
            PHON.ONSET con ] ].

whiteness_n1 := n_mass_le &
 [ STEM < "whiteness" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_whiteness_n_1_rel",
            PHON.ONSET con ] ].

whitewash_n1 := n_mass_le &
 [ STEM < "whitewash" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_whitewash_n_1_rel",
            PHON.ONSET con ] ].

whitewash_v1 := v_np_trans_le &
 [ STEM < "whitewash" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_whitewash_v_1_rel",
            PHON.ONSET con ] ].

whither_rel := pp_rel_le &
 [ STEM < "whither" >,
   SYNSEM [ LKEYS [ ALTKEYREL.PRED place_n_rel,
                    KEYREL.PRED _whither_p_rel ],
            PHON.ONSET con ] ].

whither_wh := pp_wh_le &
 [ STEM < "whither" >,
   SYNSEM [ LKEYS [ ALTKEYREL.PRED place_n_rel,
                    KEYREL.PRED _whither_p_rel ],
            PHON.ONSET con ] ].

whitish_a1 := adj_intrans_le &
 [ STEM < "whitish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_whitish_a_1_rel",
            PHON.ONSET con ] ].

whitsun_n1 := n_season_div_le &
 [ STEM < "whitsun" >,
   SYNSEM [ LKEYS.KEYREL.CARG "whitsun",
            PHON.ONSET con ] ].

whitsun_n2 := n_season_wspec_le &
 [ STEM < "whitsun" >,
   SYNSEM [ LKEYS.KEYREL.CARG "whitsun",
            PHON.ONSET con ] ].

whitsun_week := n_holiday_le &
 [ STEM < "whitsun", "week" >,
   SYNSEM [ LKEYS.KEYREL.CARG "whitsun_week",
            PHON.ONSET con ] ].

whitsuntide_n1 := n_season_div_le &
 [ STEM < "whitsuntide" >,
   SYNSEM [ LKEYS.KEYREL.CARG "whitsuntide",
            PHON.ONSET con ] ].

whitsuntide_n2 := n_season_wspec_le &
 [ STEM < "whitsuntide" >,
   SYNSEM [ LKEYS.KEYREL.CARG "whitsuntide",
            PHON.ONSET con ] ].

who1 := n_wh_pro_le &
 [ STEM < "who" >,
   SYNSEM [ LKEYS.KEYREL.PRED person_rel,
            PHON.ONSET con ] ].

who2 := n_rel_pro_who_le &
 [ STEM < "who" >,
   SYNSEM.PHON.ONSET con ].

whoa_root_post := adv_s_post_word_nospec_le &
 [ STEM < "whoa" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_whoa_a_1_rel",
            PHON.ONSET con ] ].

whoa_root_pre := adv_s_pre_word_root_le &
 [ STEM < "whoa" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_whoa_a_1_rel",
            PHON.ONSET con ] ].

whoever1 := n_freerel_ever_pro_le &
 [ STEM < "whoever" >,
   SYNSEM [ LKEYS.KEYREL.PRED person_rel,
            PHON.ONSET con ] ].

whole_a1 := adj_intrans_le &
 [ STEM < "whole" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_whole_a_1_rel",
            PHON.ONSET con ] ].

whole_n1 := n_no_cmpnd_le &
 [ STEM < "whole" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_whole_n_1_rel",
            PHON.ONSET con ] ].

wholly_deg := adv_degree_spec_v_le &
 [ STEM < "wholly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wholly_x_deg_rel",
            PHON.ONSET con ] ].

whom1 := n_wh_pro_acc_le &
 [ STEM < "whom" >,
   SYNSEM [ LKEYS.KEYREL.PRED person_rel,
            PHON.ONSET con ] ].

whom2 := n_rel_pro_acc_le &
 [ STEM < "whom" >,
   SYNSEM.PHON.ONSET con ].

whoops_root_post := adv_s_post_word_nospec_le &
 [ STEM < "whoops" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_whoops_a_1_rel",
            PHON.ONSET con ] ].

whoops_root_pre := adv_s_pre_word_root_le &
 [ STEM < "whoops" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_whoops_a_1_rel",
            PHON.ONSET con ] ].

whose_1 := det_wh_poss_le &
 [ STEM < "whose" >,
   SYNSEM [ LKEYS.ALTKEYREL.PRED person_rel,
            PHON.ONSET con ] ].

whose_2 := det_rel_poss_le &
 [ STEM < "whose" >,
   SYNSEM.PHON.ONSET con ].

whosoever_n1 := n_freerel_ever_pro_le &
 [ STEM < "whosoever" >,
   SYNSEM [ LKEYS.KEYREL.PRED person_rel,
            PHON.ONSET con ] ].

why1 := pp_wh_le &
 [ STEM < "why" >,
   SYNSEM [ LKEYS [ ALTKEYREL.PRED reason_rel,
                    KEYREL.PRED _for_p_rel ],
            PHON.ONSET con ] ].

why2 := pp_rel_le &
 [ STEM < "why" >,
   SYNSEM [ LKEYS [ ALTKEYREL.PRED reason_rel,
                    KEYREL.PRED _for_p_rel ],
            PHON.ONSET con ] ].

why_cp := s_compl_wh_phrase_le &
 [ STEM < "why" >,
   SYNSEM [ LKEYS [ ALTKEYREL.PRED reason_rel,
                    KEYREL.PRED _for_p_rel ],
            PHON.ONSET con ] ].

why_n_or_p := comp_how_about_n_or_p_le &
 [ STEM < "why" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_why_x_rel",
            PHON.ONSET con ] ].

why_not_n_or_p := comp_how_about_n_or_p_le &
 [ STEM < "why", "not" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_why+not_x_rel",
            PHON.ONSET con ] ].

why_not_vp := comp_why_vp_le &
 [ STEM < "why", "not" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_why+not_x_rel",
            PHON.ONSET con ] ].

why_not_vp_2 := comp_why_nocomp_le &
 [ STEM < "why", "not" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_why+not_x_rel",
            PHON.ONSET con ] ].

why_vp := comp_why_vp_le &
 [ STEM < "why" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_why_x_rel",
            PHON.ONSET con ] ].

why_vp_2 := comp_why_nocomp_le &
 [ STEM < "why" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_why_x_rel",
            PHON.ONSET con ] ].

wicca_n1 := n_mass_le &
 [ STEM < "wicca" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wicca_n_1_rel",
            PHON.ONSET con ] ].

wicked_a1 := adj_intrans_le &
 [ STEM < "wicked" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wicked_a_1_rel",
            PHON.ONSET con ] ].

wicket_n1 := n_intr_le &
 [ STEM < "wicket" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wicket_n_1_rel",
            PHON.ONSET con ] ].

wide_deg := adv_degree_spec_adj_le &
 [ STEM < "wide" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wide_x_deg_rel",
            PHON.ONSET con ] ].

wide_isect := adj_intrans_le &
 [ STEM < "wide" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wide_a_1_rel",
            PHON.ONSET con ] ].

wide_ranging_a1 := adj_intrans_le &
 [ STEM < "wide", "ranging" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wide+ranging_a_1_rel",
            PHON.ONSET con ] ].

wide_ranging_a2 := adj_intrans_le &
 [ STEM < "wide-", "ranging" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wide+ranging_a_1_rel",
            PHON.ONSET con ] ].

widely := adv_int_vp_le &
 [ STEM < "widely" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wide_a_1_rel",
            PHON.ONSET con ] ].

widen_v1 := v_np_trans_le &
 [ STEM < "widen" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_widen_v_cause_rel",
            PHON.ONSET con ] ].

widen_v2 := v_unacc_dir_le &
 [ STEM < "widen" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_widen_v_1_rel",
            PHON.ONSET con ] ].

wider := adj_comp_le &
 [ STEM < "wider" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wide_a_1_rel",
            PHON.ONSET con ] ].

widespread_a1 := adj_intrans_le &
 [ STEM < "widespread" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_widespread_a_1_rel",
            PHON.ONSET con ] ].

widest_a1 := adj_superl_le &
 [ STEM < "widest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wide_a_1_rel",
            PHON.ONSET con ] ].

widget_n1 := n_intr_le &
 [ STEM < "widget" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_widget_n_1_rel",
            PHON.ONSET con ] ].

width_n1 := n_mass_count_ppof_le &
 [ STEM < "width" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_width_n_of_rel",
            PHON.ONSET con ] ].

wiesbaden_n1 := n_proper_city_le &
 [ STEM < "wiesbaden" >,
   SYNSEM [ LKEYS.KEYREL.CARG "wiesbaden",
            PHON.ONSET con ] ].

wife_n1 := n_ppof_le &
 [ STEM < "wife" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wife_n_of_rel",
            PHON.ONSET con ] ].

wiker_n1 := n_proper_le &
 [ STEM < "wiker" >,
   SYNSEM [ LKEYS.KEYREL.CARG "wiker",
            PHON.ONSET con ] ].

wilco_root_post := adv_s_post_word_nospec_le &
 [ STEM < "wilco" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wilco_a_1_rel",
            PHON.ONSET con ] ].

wilco_root_pre := adv_s_pre_word_root_le &
 [ STEM < "wilco" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wilco_a_1_rel",
            PHON.ONSET con ] ].

wild_a1 := adj_intrans_le &
 [ STEM < "wild" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wild_a_1_rel",
            PHON.ONSET con ] ].

wilder := adj_comp_le &
 [ STEM < "wilder" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wild_a_1_rel",
            PHON.ONSET con ] ].

wilder_n1 := n_proper_le &
 [ STEM < "wilder" >,
   SYNSEM [ LKEYS.KEYREL.CARG "wilder",
            PHON.ONSET con ] ].

wilderness_n1 := n_mass_count_le &
 [ STEM < "wilderness" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wilderness_n_1_rel",
            PHON.ONSET con ] ].

wilderness_rich_a1 := adj_intrans_le &
 [ STEM < "wilderness-", "rich" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wilderness+rich_a_1_rel",
            PHON.ONSET con ] ].

wildest_a1 := adj_superl_le &
 [ STEM < "wildest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wild_a_1_rel",
            PHON.ONSET con ] ].

wildlife_n1 := n_mass_le &
 [ STEM < "wildlife" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wildlife_n_1_rel",
            PHON.ONSET con ] ].

wildly_adv1 := adv_int_vp_le &
 [ STEM < "wildly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wild_a_1_rel",
            PHON.ONSET con ] ].

wilds_n1 := n_plur_nocmpnd_le &
 [ STEM < "wild" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wilds_n_1_rel",
            PHON.ONSET con ] ].

wilhelm_n1 := n_proper_le &
 [ STEM < "wilhelm" >,
   SYNSEM [ LKEYS.KEYREL.CARG "wilhelm",
            PHON.ONSET con ] ].

will_aux_neg_1 := va_will_neg_le &
 [ STEM < "won't" >,
   SYNSEM [ LKEYS.KEYREL.PRED _will_v_aux_rel,
            PHON.ONSET con ] ].

will_aux_neg_2 := va_will_neg_le &
 [ STEM < "won", "'t" >,
   SYNSEM [ LKEYS.KEYREL.PRED _will_v_aux_rel,
            PHON.ONSET con ] ].

will_aux_neg_noinv_1 := va_will_neg_noinv_le &
 [ STEM < "'ll", "not" >,
   SYNSEM [ LKEYS.KEYREL.PRED _will_v_aux_rel,
            PHON.ONSET onset ] ].

will_aux_pos := va_will_pos_le &
 [ STEM < "will" >,
   SYNSEM [ LKEYS.KEYREL.PRED _will_v_aux_rel,
            PHON.ONSET con ] ].

will_aux_pos_cx := va_will_pos_cx_le &
 [ STEM < "ll" >,
   SYNSEM [ LKEYS.KEYREL.PRED _will_v_aux_rel,
            PHON.ONSET con ] ].

will_aux_pos_cx_2 := va_will_pos_cx_le &
 [ STEM < "'ll" >,
   SYNSEM [ LKEYS.KEYREL.PRED _will_v_aux_rel,
            PHON.ONSET con ] ].

will_n1 := n_intr_le &
 [ STEM < "will" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_will_n_1_rel",
            PHON.ONSET con ] ].

will_n2 := n_proper_le &
 [ STEM < "will" >,
   SYNSEM [ LKEYS.KEYREL.CARG "will",
            PHON.ONSET con ] ].

william_n1 := n_proper_le &
 [ STEM < "william" >,
   SYNSEM [ LKEYS.KEYREL.CARG "william",
            PHON.ONSET con ] ].

willien_n1 := n_proper_le &
 [ STEM < "willien" >,
   SYNSEM [ LKEYS.KEYREL.CARG "willien",
            PHON.ONSET con ] ].

willing_a1 := adj_intrans_le &
 [ STEM < "willing" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_willing_a_1_rel",
            PHON.ONSET con ] ].

willing_a2 := adj_reg_equi_le &
 [ STEM < "willing" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_willing_a_1_rel",
            PHON.ONSET con ] ].

willingly_adv1 := adv_int_vp_le &
 [ STEM < "willingly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_willing_a_1_rel",
            PHON.ONSET con ] ].

willingness_n1 := n_intr_le &
 [ STEM < "willingness" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_willingness_n_1_rel",
            PHON.ONSET con ] ].

willingness_n2 := n_vpcomp_le &
 [ STEM < "willingness" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_willingness_n_1_rel",
            PHON.ONSET con ] ].

willow_n1 := n_intr_le &
 [ STEM < "willow" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_willow_n_1_rel",
            PHON.ONSET con ] ].

willy_n1 := n_proper_le &
 [ STEM < "willy" >,
   SYNSEM [ LKEYS.KEYREL.CARG "willy",
            PHON.ONSET con ] ].

wilson := n_proper_le &
 [ STEM < "wilson" >,
   SYNSEM [ LKEYS.KEYREL.CARG "wilson",
            PHON.ONSET con ] ].

wilt_v1 := v_np_trans_noger_le &
 [ STEM < "wilt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wilt_v_cause_rel",
            PHON.ONSET con ] ].

wilt_v2 := v_unacc_le &
 [ STEM < "wilt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wilt_v_1_rel",
            PHON.ONSET con ] ].

wim := n_proper_le &
 [ STEM < "wim" >,
   SYNSEM [ LKEYS.KEYREL.CARG "wim",
            PHON.ONSET con ] ].

win_n1 := n_intr_le &
 [ STEM < "win" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_win_n_1_rel",
            PHON.ONSET con ] ].

win_v1 := v_np*_trans_le &
 [ STEM < "win" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_win_v_1_rel",
            PHON.ONSET con ] ].

wince_n1 := n_intr_le &
 [ STEM < "wince" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wince_n_1_rel",
            PHON.ONSET con ] ].

wince_v1 := v_unerg_le &
 [ STEM < "wince" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wince_v_1_rel",
            PHON.ONSET con ] ].

winch_in_v1 := v_particle_np_le &
 [ STEM < "winch" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_winch_v_in_rel" ],
            PHON.ONSET con ] ].

winch_n1 := n_intr_le &
 [ STEM < "winch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_winch_n_1_rel",
            PHON.ONSET con ] ].

winch_up_v1 := v_particle_np_le &
 [ STEM < "winch" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_winch_v_up_rel" ],
            PHON.ONSET con ] ].

wind_down_v1 := v_particle_le &
 [ STEM < "wind" >,
   SYNSEM [ LKEYS [ --COMPKEY _down_p_sel_rel,
                    KEYREL.PRED "_wind_v_down_rel" ],
            PHON.ONSET con ] ].

wind_down_v2 := v_particle_np_le &
 [ STEM < "wind" >,
   SYNSEM [ LKEYS [ --COMPKEY _down_p_sel_rel,
                    KEYREL.PRED "_wind_v_down_rel" ],
            PHON.ONSET con ] ].

wind_n1 := n_mass_count_le &
 [ STEM < "wind" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wind_n_1_rel",
            PHON.ONSET con ] ].

wind_up_v1 := v_particle_le &
 [ STEM < "wind" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_wind_v_up_rel" ],
            PHON.ONSET con ] ].

wind_up_v2 := v_particle_np_le &
 [ STEM < "wind" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_wind_v_up_rel" ],
            PHON.ONSET con ] ].

wind_v1 := v_prep_dir_le &
 [ STEM < "wind" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wind_v_1_rel",
            PHON.ONSET con ] ].

wind_v2 := v_np_trans_noger_le &
 [ STEM < "wind" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wind_v_1_rel",
            PHON.ONSET con ] ].

windblown_a1 := adj_intrans_le &
 [ STEM < "windblown" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_windblown_a_1_rel",
            PHON.ONSET con ] ].

windbreaker_n1 := n_intr_le &
 [ STEM < "windbreaker" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_windbreaker_n_1_rel",
            PHON.ONSET con ] ].

windgear_n1 := n_mass_le &
 [ STEM < "windgear" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_windgear_n_1_rel",
            PHON.ONSET con ] ].

windier_a1 := adj_comp_le &
 [ STEM < "windier" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_windy_a_1_rel",
            PHON.ONSET con ] ].

windier_a2 := adj_atrans_comp_le &
 [ STEM < "windier" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_windy_a_1_rel",
            PHON.ONSET con ] ].

windiest_a1 := adj_superl_le &
 [ STEM < "windiest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_windy_a_1_rel",
            PHON.ONSET con ] ].

windiest_a2 := adj_atrans_superl_le &
 [ STEM < "windiest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_windy_a_1_rel",
            PHON.ONSET con ] ].

window_n1 := n_intr_le &
 [ STEM < "window" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_window_n_1_rel",
            PHON.ONSET con ] ].

windowpane_n1 := n_intr_le &
 [ STEM < "windowpane" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_windowpane_n_1_rel",
            PHON.ONSET con ] ].

windows_me_n1 := n_proper_le &
 [ STEM < "windows", "me" >,
   SYNSEM [ LKEYS.KEYREL.CARG "windows_me",
            PHON.ONSET con ] ].

windows_n1 := n_proper_le &
 [ STEM < "windows" >,
   SYNSEM [ LKEYS.KEYREL.CARG "windows",
            PHON.ONSET con ] ].

windproof_a1 := adj_intrans_le &
 [ STEM < "windproof" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_windproof_a_1_rel",
            PHON.ONSET con ] ].

windproof_n1 := n_no_cmpnd_le &
 [ STEM < "windproof" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_windproof_n_1_rel",
            PHON.ONSET con ] ].

windsor_n1 := n_proper_city_le &
 [ STEM < "windsor" >,
   SYNSEM [ LKEYS.KEYREL.CARG "windsor",
            PHON.ONSET con ] ].

windsurf_v1 := v_unerg_le &
 [ STEM < "windsurf" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_windsurf_v_1_rel",
            PHON.ONSET con ] ].

windsurfing_n1 := n_intr_le &
 [ STEM < "windsurfing" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_windsurfing_n_1_rel",
            PHON.ONSET con ] ].

windswept_a1 := adj_intrans_le &
 [ STEM < "windswept" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_windswept_a_1_rel",
            PHON.ONSET con ] ].

windswept_a2 := adj_intrans_le &
 [ STEM < "wind", "swept" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_windswept_a_1_rel",
            PHON.ONSET con ] ].

windswept_a3 := adj_intrans_le &
 [ STEM < "wind-", "swept" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_windswept_a_1_rel",
            PHON.ONSET con ] ].

windward_n1 := n_mass_le &
 [ STEM < "windward" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_windward_n_1_rel",
            PHON.ONSET con ] ].

windy_a1 := adj_intrans_le &
 [ STEM < "windy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_windy_a_1_rel",
            PHON.ONSET con ] ].

windy_a2 := adj_atrans_le &
 [ STEM < "windy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_windy_a_1_rel",
            PHON.ONSET con ] ].

wine_n1 := n_mass_count_le &
 [ STEM < "wine" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wine_n_1_rel",
            PHON.ONSET con ] ].

wing_n1 := n_intr_le &
 [ STEM < "wing" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wing_n_1_rel",
            PHON.ONSET con ] ].

wing_post_ttl := n_post_title_le &
 [ STEM < "wing" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wing_n_1_rel",
            PHON.ONSET con ] ].

wingspan_n1 := n_intr_le &
 [ STEM < "wingspan" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wingspan_n_1_rel",
            PHON.ONSET con ] ].

wink_n1 := n_intr_le &
 [ STEM < "wink" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wink_n_1_rel",
            PHON.ONSET con ] ].

wink_v1 := v_empty_prep_intrans_le &
 [ STEM < "wink" >,
   SYNSEM [ LKEYS [ --COMPKEY _at_p_sel_rel,
                    KEYREL.PRED "_wink_v_at_rel" ],
            PHON.ONSET con ] ].

wink_v2 := v_unerg_le &
 [ STEM < "wink" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wink_v_1_rel",
            PHON.ONSET con ] ].

winner_n1 := n_ppof_le &
 [ STEM < "winner" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_winner_n_of_rel",
            PHON.ONSET con ] ].

winnie_n1 := n_proper_le &
 [ STEM < "winnie" >,
   SYNSEM [ LKEYS.KEYREL.CARG "winnie",
            PHON.ONSET con ] ].

winnie_the_pooh_n1 := n_proper_le &
 [ STEM < "winnie", "the", "pooh" >,
   SYNSEM [ LKEYS.KEYREL.CARG "winnie_the_pooh",
            PHON.ONSET con ] ].

winnow_out_v1 := v_particle_np_le &
 [ STEM < "winnow" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_winnow_v_out_rel" ],
            PHON.ONSET con ] ].

winnow_v1 := v_np*_trans_le &
 [ STEM < "winnow" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_winnow_v_1_rel",
            PHON.ONSET con ] ].

winston_n1 := n_proper_le &
 [ STEM < "winston" >,
   SYNSEM [ LKEYS.KEYREL.CARG "winston",
            PHON.ONSET con ] ].

winter_n1 := n_season_div_le &
 [ STEM < "winter" >,
   SYNSEM [ LKEYS.KEYREL.CARG "winter",
            PHON.ONSET con ] ].

winter_n2 := n_season_wspec_le &
 [ STEM < "winter" >,
   SYNSEM [ LKEYS.KEYREL.CARG "winter",
            PHON.ONSET con ] ].

winter_n3 := n_season_np_le &
 [ STEM < "winter" >,
   SYNSEM [ LKEYS.KEYREL.CARG "winter",
            PHON.ONSET con ] ].

winter_v1 := v_unerg_le &
 [ STEM < "winter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_winter_v_1_rel",
            PHON.ONSET con ] ].

wintertime_n1 := n_season_div_le &
 [ STEM < "wintertime" >,
   SYNSEM [ LKEYS.KEYREL.CARG "wintertime",
            PHON.ONSET con ] ].

wintertime_n2 := n_season_wspec_le &
 [ STEM < "wintertime" >,
   SYNSEM [ LKEYS.KEYREL.CARG "wintertime",
            PHON.ONSET con ] ].

wintertime_n3 := n_season_np_le &
 [ STEM < "wintertime" >,
   SYNSEM [ LKEYS.KEYREL.CARG "wintertime",
            PHON.ONSET con ] ].

wintry_a1 := adj_intrans_le &
 [ STEM < "wintry" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wintry_a_1_rel",
            PHON.ONSET con ] ].

wipe_n1 := n_mass_count_le &
 [ STEM < "wipe" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wipe_n_1_rel",
            PHON.ONSET con ] ].

wipe_off_v1 := v_particle_np_le &
 [ STEM < "wipe" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_wipe_v_off_rel" ],
            PHON.ONSET con ] ].

wipe_off_v2 := v_particle_le &
 [ STEM < "wipe" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_wipe_v_off_rel" ],
            PHON.ONSET con ] ].

wipe_out_v1 := v_particle_np_le &
 [ STEM < "wipe" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_wipe_v_out_rel" ],
            PHON.ONSET con ] ].

wipe_out_v2 := v_particle_le &
 [ STEM < "wipe" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_wipe_v_out_rel" ],
            PHON.ONSET con ] ].

wipe_up_v1 := v_particle_np_le &
 [ STEM < "wipe" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_wipe_v_up_rel" ],
            PHON.ONSET con ] ].

wipe_up_v2 := v_particle_le &
 [ STEM < "wipe" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_wipe_v_up_rel" ],
            PHON.ONSET con ] ].

wipe_v1 := v_np_trans_le &
 [ STEM < "wipe" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wipe_v_1_rel",
            PHON.ONSET con ] ].

wipe_v2 := v_obj_equi_prd_le &
 [ STEM < "wipe" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wipe_v_1_rel",
            PHON.ONSET con ] ].

wire_n1 := n_mass_count_le &
 [ STEM < "wire" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wire_n_1_rel",
            PHON.ONSET con ] ].

wire_v1 := v_np*_trans_le &
 [ STEM < "wire" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wire_v_1_rel",
            PHON.ONSET con ] ].

wire_v2 := v_cp_non_trans_le &
 [ STEM < "wire" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wire_v_1_rel",
            PHON.ONSET con ] ].

wireless_a1 := adj_intrans_le &
 [ STEM < "wireless" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wireless_a_1_rel",
            PHON.ONSET con ] ].

wisconsin_n1 := n_proper_le &
 [ STEM < "wisconsin" >,
   SYNSEM [ LKEYS.KEYREL.CARG "wisconsin",
            PHON.ONSET con ] ].

wisconsin_n2 := n_proper_abb_le &
 [ STEM < "wi" >,
   SYNSEM [ LKEYS.KEYREL.CARG "wisconsin",
            PHON.ONSET con ] ].

wise_a1 := adj_trans_le &
 [ STEM < "wise" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_wise_a_for_rel" ],
            PHON.ONSET con ] ].

wise_a2 := adj_reg_atrans_le &
 [ STEM < "wise" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wise_a_for_rel",
            PHON.ONSET con ] ].

wisely_pcisect := adv_int_vp_le &
 [ STEM < "wisely" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wise_a_for_rel",
            PHON.ONSET con ] ].

wiser := adj_comp_le &
 [ STEM < "wiser" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wise_a_for_rel",
            PHON.ONSET con ] ].

wisest_a1 := adj_superl_le &
 [ STEM < "wisest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wise_a_for_rel",
            PHON.ONSET con ] ].

wish_n1 := n_intr_le &
 [ STEM < "wish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wish_n_1_rel",
            PHON.ONSET con ] ].

wish_n2 := n_vpcomp_le &
 [ STEM < "wish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wish_n_1_rel",
            PHON.ONSET con ] ].

wish_n3 := n_cpcomp_fin_le &
 [ STEM < "wish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wish_n_1_rel",
            PHON.ONSET con ] ].

wish_n4 := n_cpcomp_bse_le &
 [ STEM < "wish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wish_n_1_rel",
            PHON.ONSET con ] ].

wish_v1 := v_ditrans_only_le &
 [ STEM < "wish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wish_v_1_rel",
            PHON.ONSET con ] ].

wish_v2 := v_subj_equi_le &
 [ STEM < "wish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wish_v_1_rel",
            PHON.ONSET con ] ].

wish_v3 := v_sor_non_trans_le &
 [ STEM < "wish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wish_v_1_rel",
            PHON.ONSET con ] ].

wish_v4 := v_unerg_le &
 [ STEM < "wish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wish_v_1_rel",
            PHON.ONSET con ] ].

wish_v5 := v_cp_prop_non_trans_le &
 [ STEM < "wish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wish_v_1_rel",
            PHON.ONSET con ] ].

wit_n1 := n_mass_count_le &
 [ STEM < "wit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wit_n_1_rel",
            PHON.ONSET con ] ].

witch_hazel_n1 := n_mass_count_le &
 [ STEM < "witch", "hazel" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_witch_hazel_n_1_rel",
            PHON.ONSET con ] ].

witch_n1 := n_intr_le &
 [ STEM < "witch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_witch_n_1_rel",
            PHON.ONSET con ] ].

with_p := p_le &
 [ STEM < "with" >,
   SYNSEM [ LKEYS.KEYREL.PRED _with_p_rel,
            PHON.ONSET con ] ].

with_p_abb := p_le &
 [ STEM < "w/" >,
   SYNSEM [ LKEYS.KEYREL.PRED _with_p_rel,
            PHON.ONSET con ] ].

with_p_abb2 := p_le &
 [ STEM < "w", "/" >,
   SYNSEM [ LKEYS.KEYREL.PRED _with_p_rel,
            PHON.ONSET con ] ].

with_prtcl := p_prtcl_le &
 [ STEM < "with" >,
   SYNSEM [ LKEYS.KEYREL.PRED _with_p_sel_rel,
            PHON.ONSET con ] ].

with_subord := p_subconj_nocop_le &
 [ STEM < "with" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_with_x_subord_rel",
            PHON.ONSET con ] ].

withdraw_from_v1 := v_empty_prep_trans_le &
 [ STEM < "withdraw" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _from_p_sel_rel,
                    KEYREL.PRED "_withdraw_v_from_rel" ],
            PHON.ONSET con ] ].

withdraw_v1 := v_np*_trans_le &
 [ STEM < "withdraw" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_withdraw_v_1_rel",
            PHON.ONSET con ] ].

withdrawal_n1 := n_mass_count_ppof_le &
 [ STEM < "withdrawal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_withdrawal_n_of_rel",
            PHON.ONSET con ] ].

withhold_from_v1 := v_empty_prep_trans_le &
 [ STEM < "withhold" >,
   SYNSEM [ LKEYS [ --COMPKEY _from_p_sel_rel,
                    KEYREL.PRED "_withhold_v_from_rel" ],
            PHON.ONSET con ] ].

withhold_v1 := v_np_trans_le &
 [ STEM < "withhold" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_withhold_v_1_rel",
            PHON.ONSET con ] ].

within := p_le &
 [ STEM < "within" >,
   SYNSEM [ LKEYS.KEYREL.PRED _within_p_rel,
            PHON.ONSET con ] ].

without := p_le &
 [ STEM < "without" >,
   SYNSEM [ LKEYS.KEYREL.PRED _without_p_rel,
            PHON.ONSET con ] ].

without_nbar := p_nbar_comp_le &
 [ STEM < "without" >,
   SYNSEM [ LKEYS.KEYREL.PRED _without_p_rel,
            PHON.ONSET con ] ].

without_prtcl := p_prtcl_le &
 [ STEM < "without" >,
   SYNSEM [ LKEYS.KEYREL.PRED _without_p_sel_rel,
            PHON.ONSET con ] ].

withstand_v1 := v_np_trans_le &
 [ STEM < "withstand" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_withstand_v_1_rel",
            PHON.ONSET con ] ].

witness_n1 := n_mass_count_le &
 [ STEM < "witness" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_witness_n_1_rel",
            PHON.ONSET con ] ].

witness_v1 := v_np_trans_le &
 [ STEM < "witness" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_witness_v_1_rel",
            PHON.ONSET con ] ].

woe_n1 := n_mass_count_le &
 [ STEM < "woe" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_woe_n_1_rel",
            PHON.ONSET con ] ].

woellnatz_n1 := n_proper_city_le &
 [ STEM < "woellnatz" >,
   SYNSEM [ LKEYS.KEYREL.CARG "woellnatz",
            PHON.ONSET con ] ].

wok_n1 := n_proper_le &
 [ STEM < "wok" >,
   SYNSEM [ LKEYS.KEYREL.CARG "wok",
            PHON.ONSET con ] ].

wok_n2 := n_intr_le &
 [ STEM < "wok" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wok_n_1_rel",
            PHON.ONSET con ] ].

wolf_down_v1 := v_particle_np_le &
 [ STEM < "wolf" >,
   SYNSEM [ LKEYS [ --COMPKEY _down_p_sel_rel,
                    KEYREL.PRED "_wolf_v_down_rel" ],
            PHON.ONSET con ] ].

wolf_n1 := n_intr_le &
 [ STEM < "wolf" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wolf_n_1_rel",
            PHON.ONSET con ] ].

wolfe_n1 := n_proper_le &
 [ STEM < "wolfe" >,
   SYNSEM [ LKEYS.KEYREL.CARG "wolfe",
            PHON.ONSET con ] ].

wolfenbuettel_nd := n_proper_le &
 [ STEM < "wolfenbuettel" >,
   SYNSEM [ LKEYS.KEYREL.CARG "wolfenbuettel",
            PHON.ONSET con ] ].

wolfsburg_n1 := n_proper_city_le &
 [ STEM < "wolfsburg" >,
   SYNSEM [ LKEYS.KEYREL.CARG "wolfsburg",
            PHON.ONSET con ] ].

wolverine_n1 := n_intr_le &
 [ STEM < "wolverine" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wolverine_n_1_rel",
            PHON.ONSET con ] ].

wolverine_n2 := n_mass_kind_le &
 [ STEM < "wolverine" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wolverine_n_kind_rel",
            PHON.ONSET con ] ].

woman1 := n_intr_le &
 [ STEM < "woman" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_woman_n_1_rel",
            PHON.ONSET con ] ].

womanish_a1 := adj_intrans_le &
 [ STEM < "womanish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_womanish_a_1_rel",
            PHON.ONSET con ] ].

womankind_n1 := n_mass_le &
 [ STEM < "womankind" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_womankind_n_1_rel",
            PHON.ONSET con ] ].

womb_n1 := n_intr_le &
 [ STEM < "womb" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_womb_n_1_rel",
            PHON.ONSET con ] ].

wonder_about_v1 := v_empty_prep_intrans_le &
 [ STEM < "wonder" >,
   SYNSEM [ LKEYS [ --COMPKEY _about_p_sel_rel,
                    KEYREL.PRED "_wonder_v_about_rel" ],
            PHON.ONSET con ] ].

wonder_at_v1 := v_empty_prep_intrans_le &
 [ STEM < "wonder" >,
   SYNSEM [ LKEYS [ --COMPKEY _at_p_sel_rel,
                    KEYREL.PRED "_wonder_v_at_rel" ],
            PHON.ONSET con ] ].

wonder_n1 := n_mass_count_le &
 [ STEM < "wonder" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wonder_n_1_rel",
            PHON.ONSET con ] ].

wonder_v1 := v_cp_ques_fin_inf_non_trans_le &
 [ STEM < "wonder" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wonder_v_1_rel",
            PHON.ONSET con ] ].

wonder_v2 := v_unerg_le &
 [ STEM < "wonder" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wonder_v_1_rel",
            PHON.ONSET con ] ].

wonderful_a1 := adj_intrans_le &
 [ STEM < "wonderful" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wonderful_a_1_rel",
            PHON.ONSET con ] ].

wonderful_a2 := adj_reg_atrans_le &
 [ STEM < "wonderful" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wonderful_a_1_rel",
            PHON.ONSET con ] ].

wonderful_root_post := adv_s_post_word_nospec_le &
 [ STEM < "wonderful" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wonderful_a_1_rel",
            PHON.ONSET con ] ].

wonderful_root_pre := adv_s_pre_word_root_le &
 [ STEM < "wonderful" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wonderful_a_1_rel",
            PHON.ONSET con ] ].

wonderfully := adv_int_vp_post_le &
 [ STEM < "wonderfully" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wonderful_a_1_rel",
            PHON.ONSET con ] ].

wonderfully_deg := adv_degree_spec_le &
 [ STEM < "wonderfully" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wonderfully_x_rel",
            PHON.ONSET con ] ].

wonderland_n1 := n_intr_le &
 [ STEM < "wonderland" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wonderland_n_1_rel",
            PHON.ONSET con ] ].

wonderland_n2 := n_proper_le &
 [ STEM < "wonderland" >,
   SYNSEM [ LKEYS.KEYREL.CARG "wonderland",
            PHON.ONSET con ] ].

wonderment_n1 := n_mass_le &
 [ STEM < "wonderment" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wonderment_n_1_rel",
            PHON.ONSET con ] ].

wont_a1 := adj_reg_equi_le &
 [ STEM < "wont" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wont_a_1_rel",
            PHON.ONSET con ] ].

wood_n1 := n_mass_count_le &
 [ STEM < "wood" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wood_n_1_rel",
            PHON.ONSET con ] ].

woodcutting_n1 := n_mass_count_le &
 [ STEM < "woodcutting" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_woodcutting_n_1_rel",
            PHON.ONSET con ] ].

wooded_a1 := adj_intrans_le &
 [ STEM < "wooded" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wooded_a_1_rel",
            PHON.ONSET con ] ].

wooden-headed_a1 := adj_intrans_le &
 [ STEM < "wooden-", "headed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wooden+headed_a_1_rel",
            PHON.ONSET con ] ].

wooden-headed_a2 := adj_intrans_le &
 [ STEM < "wooden", "headed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wooden+headed_a_1_rel",
            PHON.ONSET con ] ].

wooden_a1 := adj_intrans_le &
 [ STEM < "wooden" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wooden_a_1_rel",
            PHON.ONSET con ] ].

woodlands_n1 := n_plur_le &
 [ STEM < "woodland" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_woodlands_n_1_rel",
            PHON.ONSET con ] ].

woodrow_n1 := n_proper_le &
 [ STEM < "woodrow" >,
   SYNSEM [ LKEYS.KEYREL.CARG "woodrow",
            PHON.ONSET con ] ].

woods_n1 := n_plur_nocmpnd_le &
 [ STEM < "wood" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_woods_n_1_rel",
            PHON.ONSET con ] ].

woodside_n1 := n_proper_city_le &
 [ STEM < "woodside" >,
   SYNSEM [ LKEYS.KEYREL.CARG "woodside",
            PHON.ONSET con ] ].

woodstock_n1 := n_proper_city_le &
 [ STEM < "woodstock" >,
   SYNSEM [ LKEYS.KEYREL.CARG "woodstock",
            PHON.ONSET con ] ].

woody_a1 := adj_intrans_le &
 [ STEM < "woody" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_woody_a_1_rel",
            PHON.ONSET con ] ].

wool_n1 := n_mass_le &
 [ STEM < "wool" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wool_n_1_rel",
            PHON.ONSET con ] ].

woolen_a1 := adj_intrans_le &
 [ STEM < "woolen" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_woolen_a_1_rel",
            PHON.ONSET con ] ].

woolen_n1 := n_intr_le &
 [ STEM < "woolen" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_woolen_n_1_rel",
            PHON.ONSET con ] ].

word_n1 := n_ppof_le &
 [ STEM < "word" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_word_n_of_rel",
            PHON.ONSET con ] ].

word_n2 := n_cpcomp_fin_le &
 [ STEM < "word" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_word_n_of_rel",
            PHON.ONSET con ] ].

word_n3 := n_nomcomp_quote_le &
 [ STEM < "word" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_word_n_of_rel",
            PHON.ONSET con ] ].

word_v1 := v_np_trans_le &
 [ STEM < "word" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_word_v_1_rel",
            PHON.ONSET con ] ].

wordsworth_n1 := n_proper_le &
 [ STEM < "wordsworth" >,
   SYNSEM [ LKEYS.KEYREL.CARG "wordsworth",
            PHON.ONSET con ] ].

work_in_v1 := v_particle_np_le &
 [ STEM < "work" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_work_v_in_rel" ],
            PHON.ONSET con ] ].

work_n1 := n_mass_count_le &
 [ STEM < "work" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_work_n_1_rel",
            PHON.ONSET con ] ].

work_on_v1 := v_empty_prep_intrans_le &
 [ STEM < "work" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_work_v_on_rel" ],
            PHON.ONSET con ] ].

work_out_v1 := v_particle_np_le &
 [ STEM < "work" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_work_v_out_rel" ],
            PHON.ONSET con ] ].

work_out_v2 := v_particle_le &
 [ STEM < "work" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_work_v_out_rel" ],
            PHON.ONSET con ] ].

work_related_isect := adj_intrans_le &
 [ STEM < "work", "related" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_work+related_a_1_rel",
            PHON.ONSET con ] ].

work_through_v1 := v_empty_prep_intrans_le &
 [ STEM < "work" >,
   SYNSEM [ LKEYS [ --COMPKEY _through_p_sel_rel,
                    KEYREL.PRED "_work_v_through_rel" ],
            PHON.ONSET con ] ].

work_v1 := v_unerg_le &
 [ STEM < "work" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_work_v_1_rel",
            PHON.ONSET con ] ].

workable_isect := adj_intrans_le &
 [ STEM < "workable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_workable_a_1_rel",
            PHON.ONSET con ] ].

workaholic_a1 := adj_intrans_le &
 [ STEM < "workaholic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_workaholic_a_1_rel",
            PHON.ONSET con ] ].

workaholic_n1 := n_intr_le &
 [ STEM < "workaholic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_workaholic_n_1_rel",
            PHON.ONSET con ] ].

workday_n1 := n_intr_temp_d_le &
 [ STEM < "workday" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_workday_n_1_rel",
            PHON.ONSET con ] ].

worker_n1 := n_intr_le &
 [ STEM < "worker" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_worker_n_1_rel",
            PHON.ONSET con ] ].

working_a1 := adj_attr_intrans_le &
 [ STEM < "working" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_working_a_1_rel",
            PHON.ONSET con ] ].

workman_n1 := n_intr_le &
 [ STEM < "workman" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_workman_n_1_rel",
            PHON.ONSET con ] ].

workmanship_n1 := n_mass_le &
 [ STEM < "workmanship" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_workmanship_n_1_rel",
            PHON.ONSET con ] ].

workout_n1 := n_intr_le &
 [ STEM < "workout" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_workout_n_1_rel",
            PHON.ONSET con ] ].

workplace_n1 := n_intr_le &
 [ STEM < "workplace" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_workplace_n_1_rel",
            PHON.ONSET con ] ].

works_n1 := n_plur_le &
 [ STEM < "work" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_works_n_1_rel",
            PHON.ONSET con ] ].

works_n2 := n_plur_cmpnd_only_le &
 [ STEM < "works" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_works_n_1_rel",
            PHON.ONSET con ] ].

workshop_n1 := n_intr_le &
 [ STEM < "workshop" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_workshop_n_1_rel",
            PHON.ONSET con ] ].

workstation_n1 := n_intr_le &
 [ STEM < "workstation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_workstation_n_1_rel",
            PHON.ONSET con ] ].

world-weary_a1 := adj_intrans_le &
 [ STEM < "world-", "weary" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_world-weary_a_1_rel",
            PHON.ONSET con ] ].

world_n1 := n_ppof_le &
 [ STEM < "world" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_world_n_of_rel",
            PHON.ONSET con ] ].

world_war_i_n1 := n_proper_le &
 [ STEM < "world", "war", "i" >,
   SYNSEM [ LKEYS.KEYREL.CARG "world_war_i",
            PHON.ONSET con ] ].

world_war_i_n2 := n_proper_le &
 [ STEM < "wwi" >,
   SYNSEM [ LKEYS.KEYREL.CARG "world_war_i",
            PHON.ONSET con ] ].

world_war_ii_n1 := n_proper_le &
 [ STEM < "world", "war", "ii" >,
   SYNSEM [ LKEYS.KEYREL.CARG "world_war_ii",
            PHON.ONSET con ] ].

world_war_ii_n2 := n_proper_le &
 [ STEM < "wwii" >,
   SYNSEM [ LKEYS.KEYREL.CARG "world_war_ii",
            PHON.ONSET con ] ].

worldly_a1 := adj_intrans_le &
 [ STEM < "worldly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_worldly_a_1_rel",
            PHON.ONSET con ] ].

worldwide_a1 := adj_intrans_le &
 [ STEM < "worldwide" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_worldwide_a_1_rel",
            PHON.ONSET con ] ].

worldwide_adv1 := adv_int_vp_post_le &
 [ STEM < "worldwide" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_worldwide_a_1_rel",
            PHON.ONSET con ] ].

worm_n1 := n_intr_le &
 [ STEM < "worm" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_worm_n_1_rel",
            PHON.ONSET con ] ].

worm_v1 := v_np*_prep_trans_le &
 [ STEM < "worm" >,
   SYNSEM [ LKEYS [ --OCOMPKEY dir_or_unsp_loc_rel,
                    KEYREL.PRED "_worm_v_1_rel" ],
            PHON.ONSET con ] ].

worried_a2 := adj_reg_that_cp_le &
 [ STEM < "worried" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_worried_a_1_rel",
            PHON.ONSET con ] ].

worried_isect := adj_trans_le &
 [ STEM < "worried" >,
   SYNSEM [ LKEYS [ --COMPKEY _about_p_sel_rel,
                    KEYREL.PRED "_worried_a_about_rel" ],
            PHON.ONSET con ] ].

worriedly := adv_int_vp_le &
 [ STEM < "worriedly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_worried_a_about_rel",
            PHON.ONSET con ] ].

worry_about_v1 := v_empty_prep_intrans_le &
 [ STEM < "worry" >,
   SYNSEM [ LKEYS [ --COMPKEY _about_p_sel_rel,
                    KEYREL.PRED "_worry_v_about_rel" ],
            PHON.ONSET con ] ].

worry_n1 := n_mass_count_le &
 [ STEM < "worry" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_worry_n_1_rel",
            PHON.ONSET con ] ].

worry_v1 := v_cp_non_trans_le &
 [ STEM < "worry" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_worry_v_1_rel",
            PHON.ONSET con ] ].

worry_v2 := v_np*_trans_le &
 [ STEM < "worry" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_worry_v_1_rel",
            PHON.ONSET con ] ].

worse_a1 := adj_intrans_le &
 [ STEM < "worse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_worse_a_1_rel",
            PHON.ONSET con ] ].

worsen_v1 := v_unacc_le &
 [ STEM < "worsen" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_worsen_v_1_rel",
            PHON.ONSET con ] ].

worship_n1 := n_mass_le &
 [ STEM < "worship" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_worship_n_1_rel",
            PHON.ONSET con ] ].

worship_v1 := v_np*_trans_le &
 [ STEM < "worship" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_worship_v_1_rel",
            PHON.ONSET con ] ].

worshiper_n1 := n_intr_le &
 [ STEM < "worshiper" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_worshiper_n_1_rel",
            PHON.ONSET con ] ].

worst_a1 := adj_trans_le &
 [ STEM < "worst" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_worst_a_of_rel" ],
            PHON.ONSET con ] ].

wort_n1 := n_mass_count_le &
 [ STEM < "wort" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wort_n_1_rel",
            PHON.ONSET con ] ].

worth := adj_np_trans_le &
 [ STEM < "worth" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_worth_a_1_rel",
            PHON.ONSET con ] ].

worth_a2 := adj_worth_atrans_le &
 [ STEM < "worth" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_worth_a_1_rel",
            PHON.ONSET con ] ].

worth_n1 := n_ppof_le &
 [ STEM < "worth" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_worth_n_of_rel",
            PHON.ONSET con ] ].

worth_p := p_ppcomp*_le &
 [ STEM < "worth" >,
   SYNSEM [ LKEYS.KEYREL.PRED _worth_p_rel,
            PHON.ONSET con ] ].

worthiness_n1 := n_mass_le &
 [ STEM < "worthiness" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_worthiness_n_1_rel",
            PHON.ONSET con ] ].

worthless_a1 := adj_trans_le &
 [ STEM < "worthless" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_worthless_a_to_rel" ],
            PHON.ONSET con ] ].

worthwhile_a1 := adj_intrans_le &
 [ STEM < "worthwhile" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_worthwhile_a_1_rel",
            PHON.ONSET con ] ].

worthwhile_a2 := adj_intrans_le &
 [ STEM < "worth", "while" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_worthwhile_a_1_rel",
            PHON.ONSET con ] ].

worthy_a1 := adj_trans_le &
 [ STEM < "worthy" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_worthy_a_of_rel" ],
            PHON.ONSET con ] ].

would_aux_neg_1 := va_would_neg_le &
 [ STEM < "wouldn't" >,
   SYNSEM [ LKEYS.KEYREL.PRED _would_v_modal_rel,
            PHON.ONSET con ] ].

would_aux_neg_2 := va_would_neg_le &
 [ STEM < "wouldn", "'t" >,
   SYNSEM [ LKEYS.KEYREL.PRED _would_v_modal_rel,
            PHON.ONSET con ] ].

would_aux_neg_noinv_1 := va_would_neg_noinv_le &
 [ STEM < "'d", "not" >,
   SYNSEM [ LKEYS.KEYREL.PRED _would_v_modal_rel,
            PHON.ONSET onset ] ].

would_aux_pos := va_would_pos_le &
 [ STEM < "would" >,
   SYNSEM [ LKEYS.KEYREL.PRED _would_v_modal_rel,
            PHON.ONSET con ] ].

would_aux_pos_cx := va_would_pos_cx_le &
 [ STEM < "d" >,
   SYNSEM [ LKEYS.KEYREL.PRED _would_v_modal_rel,
            PHON.ONSET con ] ].

would_aux_pos_cx_2 := va_would_pos_cx_le &
 [ STEM < "'d" >,
   SYNSEM [ LKEYS.KEYREL.PRED _would_v_modal_rel,
            PHON.ONSET con ] ].

wound_n1 := n_intr_le &
 [ STEM < "wound" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wound_n_1_rel",
            PHON.ONSET con ] ].

wound_v1 := v_np_trans_le &
 [ STEM < "wound" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wound_v_1_rel",
            PHON.ONSET con ] ].

wow_excl_post := adv_s_post_word_nospec_le &
 [ STEM < "wow" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wow_a_1_rel",
            PHON.ONSET con ] ].

wow_excl_pre := adv_s_pre_word_root_le &
 [ STEM < "wow" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wow_a_1_rel",
            PHON.ONSET con ] ].

woyzeck_n1 := n_proper_le &
 [ STEM < "woyzeck" >,
   SYNSEM [ LKEYS.KEYREL.CARG "woyzeck",
            PHON.ONSET con ] ].

wrangling_n := n_intr_le &
 [ STEM < "wrangling" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wrangling_n_1_rel",
            PHON.ONSET con ] ].

wrap_around_v1 := v_np_prep_trans_le &
 [ STEM < "wrap" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _around_p_rel,
                    KEYREL.PRED "_wrap_v_1_rel" ],
            PHON.ONSET con ] ].

wrap_n1 := n_intr_le &
 [ STEM < "wrap" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wrap_n_1_rel",
            PHON.ONSET con ] ].

wrap_up_n1 := n_intr_le &
 [ STEM < "wrap", "up" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wrap+up_n_1_rel",
            PHON.ONSET con ] ].

wrap_up_v1 := v_particle_np_le &
 [ STEM < "wrap" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_wrap_v_up_rel" ],
            PHON.ONSET con ] ].

wrap_v1 := v_np_trans_le &
 [ STEM < "wrap" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wrap_v_1_rel",
            PHON.ONSET con ] ].

wrappedweb-ersatz := n_proper_le &
 [ STEM < "wrappedwebersatz" >,
   SYNSEM [ LKEYS.KEYREL.CARG "wrapwebersatz",
            PHON.ONSET onset ] ].

wrath_n1 := n_mass_le &
 [ STEM < "wrath" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wrath_n_1_rel",
            PHON.ONSET con ] ].

wreak_v1 := v_np_trans_le &
 [ STEM < "wreak" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wreak_v_1_rel",
            PHON.ONSET con ] ].

wreath_n1 := n_intr_le &
 [ STEM < "wreath" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wreath_n_1_rel",
            PHON.ONSET con ] ].

wreath_v1 := v_np_trans_le &
 [ STEM < "wreath" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wreath_v_1_rel",
            PHON.ONSET con ] ].

wreathe_v1 := v_np_trans_le &
 [ STEM < "wreathe" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wreathe_v_1_rel",
            PHON.ONSET con ] ].

wreck_n1 := n_intr_le &
 [ STEM < "wreck" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wreck_n_1_rel",
            PHON.ONSET con ] ].

wreck_v1 := v_np*_trans_le &
 [ STEM < "wreck" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wreck_v_1_rel",
            PHON.ONSET con ] ].

wrecked_a1 := adj_intrans_le &
 [ STEM < "wrecked" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wrecked_a_1_rel",
            PHON.ONSET con ] ].

wrest_away_v1 := v_particle_np_le &
 [ STEM < "wrest" >,
   SYNSEM [ LKEYS [ --COMPKEY _away_p_sel_rel,
                    KEYREL.PRED "_wrest_v_away_rel" ],
            PHON.ONSET con ] ].

wrest_v1 := v_np_trans_le &
 [ STEM < "wrest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wrest_v_1_rel",
            PHON.ONSET con ] ].

wrestle_v1 := v_np_trans_le &
 [ STEM < "wrestle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wrestle_v_1_rel",
            PHON.ONSET con ] ].

wrestle_with_v1 := v_prep*_intrans_le &
 [ STEM < "wrestle" >,
   SYNSEM [ LKEYS [ --COMPKEY _with_p_rel,
                    KEYREL.PRED "_wrestle_v_1_rel" ],
            PHON.ONSET con ] ].

wrist_n1 := n_intr_le &
 [ STEM < "wrist" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wrist_n_1_rel",
            PHON.ONSET con ] ].

writ_n1 := n_intr_le &
 [ STEM < "writ" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_writ_n_1_rel",
            PHON.ONSET con ] ].

write_about_v1 := v_prep_intrans_le &
 [ STEM < "write" >,
   SYNSEM [ LKEYS [ --COMPKEY _about_p_rel,
                    KEYREL.PRED "_write_v_to_rel" ],
            PHON.ONSET con ] ].

write_about_v2 := v_np_prep_trans_le &
 [ STEM < "write" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _about_p_rel,
                    KEYREL.PRED "_write_v_to_rel" ],
            PHON.ONSET con ] ].

write_back_v1 := v_particle_np_le &
 [ STEM < "write" >,
   SYNSEM [ LKEYS [ --COMPKEY _back_p_sel_rel,
                    KEYREL.PRED "_write_v_back_rel" ],
            PHON.ONSET con ] ].

write_back_v2 := v_particle_le &
 [ STEM < "write" >,
   SYNSEM [ LKEYS [ --COMPKEY _back_p_sel_rel,
                    KEYREL.PRED "_write_v_back_rel" ],
            PHON.ONSET con ] ].

write_down_v1 := v_particle_np_le &
 [ STEM < "write" >,
   SYNSEM [ LKEYS [ --COMPKEY _down_p_sel_rel,
                    KEYREL.PRED "_write_v_down_rel" ],
            PHON.ONSET con ] ].

write_in_v1 := v_particle_np_le &
 [ STEM < "write" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_write_v_in_rel" ],
            PHON.ONSET con ] ].

write_up_v1 := v_particle_np_le &
 [ STEM < "write" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_write_v_up_rel" ],
            PHON.ONSET con ] ].

write_v1 := v_to*_trans*_le &
 [ STEM < "write" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_write_v_to_rel",
            PHON.ONSET con ] ].

write_v2 := v_ditrans_only_le &
 [ STEM < "write" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_write_v_to_rel",
            PHON.ONSET con ] ].

write_v5 := v_subj_equi_le &
 [ STEM < "write" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_write_v_to_rel",
            PHON.ONSET con ] ].

write_v6 := v_np_trans_cp_fin_or_inf_le &
 [ STEM < "write" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_write_v_to_rel",
            PHON.ONSET con ] ].

write_v7 := v_pp_cp_le &
 [ STEM < "write" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_write_v_to_rel" ],
            PHON.ONSET con ] ].

writer_n1 := n_ppof_le &
 [ STEM < "writer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_writer_n_of_rel",
            PHON.ONSET con ] ].

writer_ttl := n_title_le &
 [ STEM < "writer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_writer_n_of_rel",
            PHON.ONSET con ] ].

writing_isect := adj_attr_intrans_le &
 [ STEM < "writing" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_writing_a_1_rel",
            PHON.ONSET con ] ].

writing_up_n1 := n_intr_le &
 [ STEM < "writing", "up" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_writing+up_n_1_rel",
            PHON.ONSET con ] ].

wrong_a1 := adj_trans_oblig_le &
 [ STEM < "wrong" >,
   SYNSEM [ LKEYS [ --COMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_wrong_a_with_rel" ],
            PHON.ONSET con ] ].

wrong_a2 := adj_intrans_le &
 [ STEM < "wrong" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wrong_a_with_rel",
            PHON.ONSET con ] ].

wrong_a3 := adj_reg_atrans_le &
 [ STEM < "wrong" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wrong_a_with_rel",
            PHON.ONSET con ] ].

wrong_adv1 := adv_int_vp_post_le &
 [ STEM < "wrong" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wrong_a_with_rel",
            PHON.ONSET con ] ].

wrongful_a1 := adj_intrans_le &
 [ STEM < "wrongful" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wrongful_a_1_rel",
            PHON.ONSET con ] ].

wrongfully := adv_int_vp_le &
 [ STEM < "wrongfully" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wrongful_a_1_rel",
            PHON.ONSET con ] ].

wrongly_adv1 := adv_int_vp_le &
 [ STEM < "wrongly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wrong_a_1_rel",
            PHON.ONSET con ] ].

wu_n1 := n_proper_le &
 [ STEM < "wu" >,
   SYNSEM [ LKEYS.KEYREL.CARG "wu",
            PHON.ONSET con ] ].

wuellnatz_nd := n_proper_city_le &
 [ STEM < "wuellnatz" >,
   SYNSEM [ LKEYS.KEYREL.CARG "wuellnatz",
            PHON.ONSET con ] ].

wuerzburg_n1 := n_proper_city_le &
 [ STEM < "wuerzburg" >,
   SYNSEM [ LKEYS.KEYREL.CARG "wuerzburg",
            PHON.ONSET con ] ].

wuppertal_n1 := n_proper_city_le &
 [ STEM < "wuppertal" >,
   SYNSEM [ LKEYS.KEYREL.CARG "wuppertal",
            PHON.ONSET con ] ].

wuthering_heights := n_proper_le &
 [ STEM < "wuthering", "heights" >,
   SYNSEM [ LKEYS.KEYREL.CARG "wuthering_heights",
            PHON.ONSET con ] ].

wyoming_n1 := n_proper_le &
 [ STEM < "wyoming" >,
   SYNSEM [ LKEYS.KEYREL.CARG "wyoming",
            PHON.ONSET con ] ].

wyoming_n2 := n_proper_abb_le &
 [ STEM < "wy" >,
   SYNSEM [ LKEYS.KEYREL.CARG "wyoming",
            PHON.ONSET con ] ].

x_np1 := n_proper_le &
 [ STEM < "_x" >,
   SYNSEM [ LKEYS.KEYREL.CARG "x",
            PHON.ONSET voc ] ].

x_period_np1 := n_proper_le &
 [ STEM < "x." >,
   SYNSEM [ LKEYS.KEYREL.CARG "x",
            PHON.ONSET voc ] ].

x_period_np2 := n_proper_le &
 [ STEM < "_x." >,
   SYNSEM [ LKEYS.KEYREL.CARG "x",
            PHON.ONSET voc ] ].

x_to_y_adj_- := adj_x_to_y_le &
 [ STEM < "-" >,
   SYNSEM.PHON.ONSET con ].

x_to_y_adj_to := adj_x_to_y_le &
 [ STEM < "to" >,
   SYNSEM.PHON.ONSET con ].

x_to_y_nbar_hyphen := n_x_to_y_nbar_le &
 [ STEM < "-" >,
   SYNSEM.PHON.ONSET con ].

x_to_y_nbar_to := n_x_to_y_nbar_le &
 [ STEM < "to" >,
   SYNSEM.PHON.ONSET con ].

x_to_y_np_pl_- := n_x_to_y_plur_le &
 [ STEM < "-" >,
   SYNSEM.PHON.ONSET con ].

x_to_y_np_pl_to := n_x_to_y_plur_le &
 [ STEM < "to" >,
   SYNSEM.PHON.ONSET con ].

x_to_y_np_sg_- := n_x_to_y_sg_le &
 [ STEM < "-" >,
   SYNSEM.PHON.ONSET con ].

x_to_y_np_sg_through := n_x_to_y_sg_le &
 [ STEM < "through" >,
   SYNSEM.PHON.ONSET con ].

x_to_y_np_sg_to := n_x_to_y_sg_le &
 [ STEM < "to" >,
   SYNSEM.PHON.ONSET con ].

x_to_y_np_until := n_x_to_y_sg_le &
 [ STEM < "until" >,
   SYNSEM.PHON.ONSET voc ].

xihua_n1 := n_proper_le &
 [ STEM < "xihua" >,
   SYNSEM [ LKEYS.KEYREL.CARG "xihua",
            PHON.ONSET con ] ].

xmas_n1 := n_season_div_le &
 [ STEM < "xmas" >,
   SYNSEM [ LKEYS.KEYREL.CARG "christmas",
            PHON.ONSET voc ] ].

xmas_n2 := n_season_wspec_le &
 [ STEM < "xmas" >,
   SYNSEM [ LKEYS.KEYREL.CARG "christmas",
            PHON.ONSET voc ] ].

xmas_n3 := n_season_np_le &
 [ STEM < "xmas" >,
   SYNSEM [ LKEYS.KEYREL.CARG "christmas",
            PHON.ONSET voc ] ].

xml_n1 := n_proper_le &
 [ STEM < "xml" >,
   SYNSEM [ LKEYS.KEYREL.CARG "xml",
            PHON.ONSET voc ] ].

xml_n2 := n_proper_le &
 [ STEM < "x.m.l." >,
   SYNSEM [ LKEYS.KEYREL.CARG "xml",
            PHON.ONSET voc ] ].

xp_n1 := n_proper_le &
 [ STEM < "xp" >,
   SYNSEM [ LKEYS.KEYREL.CARG "xp",
            PHON.ONSET con ] ].

y_np1 := n_proper_le &
 [ STEM < "_y" >,
   SYNSEM [ LKEYS.KEYREL.CARG "y",
            PHON.ONSET con ] ].

y_period_np1 := n_proper_le &
 [ STEM < "y." >,
   SYNSEM [ LKEYS.KEYREL.CARG "y",
            PHON.ONSET con ] ].

y_period_np2 := n_proper_le &
 [ STEM < "_y." >,
   SYNSEM [ LKEYS.KEYREL.CARG "y",
            PHON.ONSET con ] ].

yall := n_pers_pro_you_le &
 [ STEM < "y'all" >,
   SYNSEM.PHON.ONSET voc ].

yall_2 := n_pers_pro_you_le &
 [ STEM < "y", "'all" >,
   SYNSEM.PHON.ONSET voc ].

yall_3 := n_pers_pro_you_le &
 [ STEM < "y", "all" >,
   SYNSEM.PHON.ONSET voc ].

yall_root_1_post := adv_disc_posth_le &
 [ STEM < "y'all" >,
   SYNSEM [ LKEYS.KEYREL.CARG "yall",
            PHON.ONSET voc ] ].

yall_root_1_pre := adv_disc_preh_le &
 [ STEM < "y'all" >,
   SYNSEM [ LKEYS.KEYREL.CARG "yall",
            PHON.ONSET voc ] ].

yall_root_2_post := adv_disc_posth_le &
 [ STEM < "y", "all" >,
   SYNSEM [ LKEYS.KEYREL.CARG "yall",
            PHON.ONSET voc ] ].

yall_root_2_pre := adv_disc_preh_le &
 [ STEM < "y", "all" >,
   SYNSEM [ LKEYS.KEYREL.CARG "yall",
            PHON.ONSET voc ] ].

yamada_n1 := n_proper_le &
 [ STEM < "yamada" >,
   SYNSEM [ LKEYS.KEYREL.CARG "yamada",
            PHON.ONSET con ] ].

yamazaki_n1 := n_proper_le &
 [ STEM < "yamazaki" >,
   SYNSEM [ LKEYS.KEYREL.CARG "yamazaki",
            PHON.ONSET con ] ].

yard_n1 := n_intr_le &
 [ STEM < "yard" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_yard_n_1_rel",
            PHON.ONSET con ] ].

yarn_n1 := n_mass_count_le &
 [ STEM < "yarn" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_yarn_n_1_rel",
            PHON.ONSET con ] ].

yaroslavl_n1 := n_proper_le &
 [ STEM < "yaroslavl" >,
   SYNSEM [ LKEYS.KEYREL.CARG "yaroslavl",
            PHON.ONSET con ] ].

yawn_n1 := n_intr_le &
 [ STEM < "yawn" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_yawn_n_1_rel",
            PHON.ONSET con ] ].

yay_root_pre := adv_s_pre_word_root_le &
 [ STEM < "yay" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_yay_a_1_rel",
            PHON.ONSET con ] ].

ybarra_n1 := n_proper_le &
 [ STEM < "ybarra" >,
   SYNSEM [ LKEYS.KEYREL.CARG "ybarra",
            PHON.ONSET voc ] ].

ye := n_pers_pro_you_le &
 [ STEM < "ye" >,
   SYNSEM.PHON.ONSET con ].

yea_n1 := n_intr_le &
 [ STEM < "yea" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_yea_n_1_rel",
            PHON.ONSET con ] ].

yeah_root_post := adv_s_post_word_nospec_le &
 [ STEM < "yeah" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_yeah_a_1_rel",
            PHON.ONSET con ] ].

yeah_root_pre := adv_s_pre_word_root_le &
 [ STEM < "yeah" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_yeah_a_1_rel",
            PHON.ONSET con ] ].

year-ersatz := n_year_le &
 [ STEM < "yearersatz" >,
   SYNSEM [ LKEYS.KEYREL.CARG "yearersatz",
            PHON.ONSET con ] ].

year_n1 := n_temp_year_le &
 [ STEM < "year" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_year_n_1_rel",
            PHON.ONSET con ] ].

year_round_adv1 := adv_int_vp_post_le &
 [ STEM < "year-", "round" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_year-round_a_1_rel",
            PHON.ONSET con ] ].

year_round_adv2 := adv_int_vp_post_le &
 [ STEM < "year", "round" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_year-round_a_1_rel",
            PHON.ONSET con ] ].

year_ttl := n_title_le &
 [ STEM < "year" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_year_n_1_rel",
            PHON.ONSET con ] ].

yearbook_n1 := n_intr_le &
 [ STEM < "yearbook" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_yearbook_n_1_rel",
            PHON.ONSET con ] ].

yearly_a1 := adj_intrans_le &
 [ STEM < "yearly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_yearly_a_1_rel",
            PHON.ONSET con ] ].

yearly_adv1 := adv_int_vp_post_le &
 [ STEM < "yearly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_yearly_a_1_rel",
            PHON.ONSET con ] ].

yearn_for_v1 := v_empty_prep_intrans_le &
 [ STEM < "yearn" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_yearn_v_for_rel" ],
            PHON.ONSET con ] ].

yell_at_v1 := v_empty_prep_intrans_le &
 [ STEM < "yell" >,
   SYNSEM [ LKEYS [ --COMPKEY _at_p_sel_rel,
                    KEYREL.PRED "_yell_v_at_rel" ],
            PHON.ONSET con ] ].

yell_n1 := n_ppof_le &
 [ STEM < "yell" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_yell_n_of_rel",
            PHON.ONSET con ] ].

yell_v1 := v_np*_trans_le &
 [ STEM < "yell" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_yell_v_1_rel",
            PHON.ONSET con ] ].

yellow_a1 := adj_intrans_le &
 [ STEM < "yellow" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_yellow_a_1_rel",
            PHON.ONSET con ] ].

yellow_n1 := n_color_le &
 [ STEM < "yellow" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_yellow_n_1_rel",
            PHON.ONSET con ] ].

yemen_n1 := n_proper_le &
 [ STEM < "yemen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "yemen",
            PHON.ONSET con ] ].

yen_n1 := n_mass_count_le &
 [ STEM < "yen" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_yen_n_1_rel",
            PHON.ONSET con ] ].

yen_n2 := n_plur_nocmpnd_le &
 [ STEM < "yen" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_yen_n_1_rel",
            PHON.ONSET con ] ].

yep_root_post := adv_s_post_word_nospec_le &
 [ STEM < "yep" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_yep_a_1_rel",
            PHON.ONSET con ] ].

yep_root_pre := adv_s_pre_word_root_le &
 [ STEM < "yep" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_yep_a_1_rel",
            PHON.ONSET con ] ].

yes_post_root := adv_s_post_word_nospec_le &
 [ STEM < "yes" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_yes_a_1_rel",
            PHON.ONSET con ] ].

yes_pre_root := adv_disc_like_preh_le &
 [ STEM < "yes" >,
   SYNSEM [ LKEYS.KEYREL.CARG "yes",
            PHON.ONSET con ] ].

yesterday_det := det_yesterday_tomorrow_le &
 [ STEM < "yesterday" >,
   SYNSEM [ LKEYS.ALTKEYREL.PRED _yesterday_a_1_rel,
            PHON.ONSET con ] ].

yesterday_np := n_adv_tm_le &
 [ STEM < "yesterday" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED _yesterday_a_1_rel,
                    KEYREL.PRED time_n_rel ],
            PHON.ONSET con ] ].

yet_adv1 := adv_int_vp_post_nonmob_le &
 [ STEM < "yet" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_yet_a_1_rel",
            PHON.ONSET con ] ].

yet_adv3 := adv_int_vp_aux_le &
 [ STEM < "yet" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_yet_a_1_rel",
            PHON.ONSET con ] ].

yet_conj := conj_complex_yet_le &
 [ STEM < "yet" >,
   SYNSEM.PHON.ONSET con ].

yet_deg := adv_degree_spec_det_only_le &
 [ STEM < "yet" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_yet_x_deg_rel",
            PHON.ONSET con ] ].

yet_prtcl := pp_prtcl_le &
 [ STEM < "yet" >,
   SYNSEM [ LKEYS.KEYREL.PRED _yet_p_sel_rel,
            PHON.ONSET con ] ].

yew_n1 := n_intr_le &
 [ STEM < "yew" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_yew_n_1_rel",
            PHON.ONSET con ] ].

yh_n1 := n_proper_le &
 [ STEM < "yh" >,
   SYNSEM [ LKEYS.KEYREL.CARG "yh",
            PHON.ONSET con ] ].

yield_n1 := n_mass_count_le &
 [ STEM < "yield" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_yield_n_1_rel",
            PHON.ONSET con ] ].

yield_to_v1 := v_empty_prep_intrans_le &
 [ STEM < "yield" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_yield_v_to_rel" ],
            PHON.ONSET con ] ].

yield_up_v1 := v_particle_np_le &
 [ STEM < "yield" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_yield_v_up_rel" ],
            PHON.ONSET con ] ].

yield_v1 := v_np*_trans_le &
 [ STEM < "yield" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_yield_v_1_rel",
            PHON.ONSET con ] ].

yksendalen_n1 := n_proper_le &
 [ STEM < "yksendalen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "yksendalen",
            PHON.ONSET voc ] ].

yksendalsbu := n_proper_le &
 [ STEM < "yksendalsbu" >,
   SYNSEM [ LKEYS.KEYREL.CARG "yksendalsbu",
            PHON.ONSET con ] ].

yksendalsbua_n1 := n_proper_le &
 [ STEM < "yksendalsbua" >,
   SYNSEM [ LKEYS.KEYREL.CARG "yksendalsbua",
            PHON.ONSET voc ] ].

yo_root_post := adv_s_post_word_nospec_le &
 [ STEM < "yo" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_yo_a_1_rel",
            PHON.ONSET con ] ].

yo_root_pre := adv_s_pre_word_root_le &
 [ STEM < "yo" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_yo_a_1_rel",
            PHON.ONSET con ] ].

yofc_gle := n_year_le &
 [ STEM < "_yofc_" >,
   SYNSEM [ LKEYS.KEYREL.CARG "_yofc_",
            PHON.ONSET con ] ].

yoga_n1 := n_mass_le &
 [ STEM < "yoga" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_yoga_n_1_rel",
            PHON.ONSET con ] ].

yogurt_n1 := n_mass_le &
 [ STEM < "yogurt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_yogurt_n_1_rel",
            PHON.ONSET con ] ].

yoke_n1 := n_intr_le &
 [ STEM < "yoke" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_yoke_n_1_rel",
            PHON.ONSET con ] ].

yoke_v1 := v_np_trans_le &
 [ STEM < "yoke" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_yoke_v_1_rel",
            PHON.ONSET con ] ].

yonder_n1 := n_adv_event_le &
 [ STEM < "yonder" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED _yonder_a_1_rel,
                    KEYREL.PRED place_n_rel ],
            PHON.ONSET con ] ].

york_n1 := n_proper_city_le &
 [ STEM < "york" >,
   SYNSEM [ LKEYS.KEYREL.CARG "york",
            PHON.ONSET con ] ].

you := n_pers_pro_you_le &
 [ STEM < "you" >,
   SYNSEM.PHON.ONSET con ].

you_all := n_pers_pro_you_le &
 [ STEM < "you", "all" >,
   SYNSEM.PHON.ONSET con ].

you_guys := n_pers_pro_you_le &
 [ STEM < "you", "guys" >,
   SYNSEM.PHON.ONSET con ].

you_know_2_disc := adv_disc_like_posth_le &
 [ STEM < "you", "know" >,
   SYNSEM [ LKEYS.KEYREL.CARG "you_know",
            PHON.ONSET con ] ].

you_know_disc := adv_disc_like_preh_le &
 [ STEM < "you", "know" >,
   SYNSEM [ LKEYS.KEYREL.CARG "you_know",
            PHON.ONSET con ] ].

you_people := n_pers_pro_you_le &
 [ STEM < "you", "people" >,
   SYNSEM.PHON.ONSET con ].

you_plus_np := n_pers_pro_you_np_le &
 [ STEM < "you" >,
   SYNSEM.PHON.ONSET con ].

youghiogheny_n1 := n_proper_le &
 [ STEM < "youghiogheny" >,
   SYNSEM [ LKEYS.KEYREL.CARG "youghiogheny",
            PHON.ONSET con ] ].

young_isect := adj_intrans_le &
 [ STEM < "young" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_young_a_1_rel",
            PHON.ONSET con ] ].

younger := adj_comp_le &
 [ STEM < "younger" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_young_a_1_rel",
            PHON.ONSET con ] ].

youngest_a1 := adj_superl_le &
 [ STEM < "youngest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_young_a_1_rel",
            PHON.ONSET con ] ].

your := det_poss_your_le &
 [ STEM < "your" >,
   SYNSEM.PHON.ONSET con ].

yours := n_poss_pro_yours_le &
 [ STEM < "yours" >,
   SYNSEM.PHON.ONSET con ].

yours_nq := det_poss_nospec_yours_le &
 [ STEM < "yours" >,
   SYNSEM.PHON.ONSET con ].

yours_truly_pn1 := n_pers_pro_1sg_noagr_le &
 [ STEM < "yours", "truly" >,
   SYNSEM.PHON.ONSET con ].

yourself := n_refl_pro_yourself_le &
 [ STEM < "yourself" >,
   SYNSEM.PHON.ONSET con ].

yourself_adv := adv_refl_pro_yourself_le &
 [ STEM < "yourself" >,
   SYNSEM.PHON.ONSET con ].

yourselves := n_refl_pro_yourselves_le &
 [ STEM < "yourselves" >,
   SYNSEM.PHON.ONSET con ].

yourselves_adv := adv_refl_pro_yourselves_le &
 [ STEM < "yourselves" >,
   SYNSEM.PHON.ONSET con ].

youth_n1 := n_mass_count_le &
 [ STEM < "youth" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_youth_n_1_rel",
            PHON.ONSET con ] ].

ytre_standal_n1 := n_proper_city_le &
 [ STEM < "ytre", "standal" >,
   SYNSEM [ LKEYS.KEYREL.CARG "ytre_standal",
            PHON.ONSET voc ] ].

ytterdalssetrene_n1 := n_proper_le &
 [ STEM < "ytterdalssetrene" >,
   SYNSEM [ LKEYS.KEYREL.CARG "ytterdalssetrene",
            PHON.ONSET voc ] ].

yuck_excl_post := adv_s_post_word_nospec_le &
 [ STEM < "yuck" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_yuck_a_1_rel",
            PHON.ONSET con ] ].

yuck_excl_pre := adv_s_pre_word_root_le &
 [ STEM < "yuck" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_yuck_a_1_rel",
            PHON.ONSET con ] ].

yum_n1 := n_proper_le &
 [ STEM < "yum" >,
   SYNSEM [ LKEYS.KEYREL.CARG "yum",
            PHON.ONSET con ] ].

yum_root_post := adv_s_post_word_nospec_le &
 [ STEM < "yum" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_yum_a_1_rel",
            PHON.ONSET con ] ].

yum_root_pre := adv_s_pre_word_root_le &
 [ STEM < "yum" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_yum_a_1_rel",
            PHON.ONSET con ] ].

yup_excl_post := adv_s_post_word_nospec_le &
 [ STEM < "yup" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_yup_a_1_rel",
            PHON.ONSET con ] ].

yup_excl_pre := adv_s_pre_word_root_le &
 [ STEM < "yup" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_yup_a_1_rel",
            PHON.ONSET con ] ].

z_np1 := n_proper_le &
 [ STEM < "_z" >,
   SYNSEM [ LKEYS.KEYREL.CARG "z",
            PHON.ONSET con ] ].

z_period_np1 := n_proper_le &
 [ STEM < "z." >,
   SYNSEM [ LKEYS.KEYREL.CARG "z",
            PHON.ONSET con ] ].

z_period_np2 := n_proper_le &
 [ STEM < "_z." >,
   SYNSEM [ LKEYS.KEYREL.CARG "z",
            PHON.ONSET con ] ].

zaphod_n1 := n_proper_le &
 [ STEM < "zaphod" >,
   SYNSEM [ LKEYS.KEYREL.CARG "zaphod",
            PHON.ONSET con ] ].

zdf_nd := n_proper_le &
 [ STEM < "zdf" >,
   SYNSEM [ LKEYS.KEYREL.CARG "zdf",
            PHON.ONSET con ] ].

zeal_n1 := n_mass_le &
 [ STEM < "zeal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_zeal_n_1_rel",
            PHON.ONSET con ] ].

zebra_n1 := n_intr_le &
 [ STEM < "zebra" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_zebra_n_1_rel",
            PHON.ONSET con ] ].

zebulon_n1 := n_proper_le &
 [ STEM < "zebulon" >,
   SYNSEM [ LKEYS.KEYREL.CARG "zebulon",
            PHON.ONSET con ] ].

zell_n1 := n_proper_le &
 [ STEM < "zell" >,
   SYNSEM [ LKEYS.KEYREL.CARG "zell",
            PHON.ONSET con ] ].

zenith_n1 := n_intr_le &
 [ STEM < "zenith" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_zenith_n_1_rel",
            PHON.ONSET con ] ].

zentral_n1 := n_intr_named_le &
 [ STEM < "zentral" >,
   SYNSEM [ LKEYS.KEYREL.CARG "zentral",
            PHON.ONSET con ] ].

zentralhotel-kaiserhof_n1 := n_intr_named_le &
 [ STEM < "zentralhotel", "kaiserhof" >,
   SYNSEM [ LKEYS.KEYREL.CARG "zentralhotel-kaiserhof",
            PHON.ONSET con ] ].

zephyr_n1 := n_proper_le &
 [ STEM < "zephyr" >,
   SYNSEM [ LKEYS.KEYREL.CARG "zephyr",
            PHON.ONSET con ] ].

zeppelin_n1 := n_intr_le &
 [ STEM < "zeppelin" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_zeppelin_n_1_rel",
            PHON.ONSET con ] ].

zero := adj_bare_unspecified_card_one_le &
 [ STEM < "zero" >,
   SYNSEM [ LKEYS.KEYREL.CARG "0",
            PHON.ONSET con ] ].

zero-th := adj_bare_unspecified_ord_one_le &
 [ STEM < "0th" >,
   SYNSEM [ LKEYS.KEYREL.CARG "0",
            PHON.ONSET con ] ].

zero_det := det_pl_le &
 [ STEM < "zero" >,
   SYNSEM [ LKEYS.KEYREL.PRED _no_q_rel,
            PHON.ONSET con ] ].

zero_digit := adj_bare_unspecified_card_one_le &
 [ STEM < "0" >,
   SYNSEM [ LKEYS.KEYREL.CARG "0",
            PHON.ONSET con ] ].

zest_n1 := n_mass_count_ppcomp_le &
 [ STEM < "zest" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_zest_n_for_rel" ],
            PHON.ONSET con ] ].

zillion := adj_bare_specified_card_billion_le &
 [ STEM < "zillion" >,
   SYNSEM [ LKEYS.KEYREL.CARG "zillion",
            PHON.ONSET con ] ].

zip_n1 := n_mass_le &
 [ STEM < "zip" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_zip_n_nothing_rel",
            PHON.ONSET con ] ].

zip_v1 := v_np_trans_le &
 [ STEM < "zip" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_zip_v_1_rel",
            PHON.ONSET con ] ].

zipper_n1 := n_intr_le &
 [ STEM < "zipper" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_zipper_n_1_rel",
            PHON.ONSET con ] ].

zodiac_n1 := n_intr_le &
 [ STEM < "zodiac" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_zodiac_n_1_rel",
            PHON.ONSET con ] ].

zone_n1 := n_ppof_le &
 [ STEM < "zone" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_zone_n_of_rel",
            PHON.ONSET con ] ].

zoo_n1 := n_intr_le &
 [ STEM < "zoo" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_zoo_n_1_rel",
            PHON.ONSET con ] ].

zooid_n1 := n_intr_le &
 [ STEM < "zooid" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_zooid_n_1_rel",
            PHON.ONSET con ] ].

zoology_n1 := n_mass_le &
 [ STEM < "zoology" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_zoology_n_1_rel",
            PHON.ONSET con ] ].

zoology_n2 := n_mass_le &
 [ STEM < "zoÃ¶logy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_zoology_n_1_rel",
            PHON.ONSET con ] ].

zoom_n1 := n_mass_count_le &
 [ STEM < "zoom" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_zoom_n_1_rel",
            PHON.ONSET con ] ].

zoom_v1 := v_prep_dir_le &
 [ STEM < "zoom" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_zoom_v_1_rel",
            PHON.ONSET con ] ].

Ã¥ := n_proper_le &
 [ STEM < "Ã¥" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Ã¥",
            PHON.ONSET voc ] ].

Ã¥dal_n1 := n_proper_le &
 [ STEM < "Ã¥dal" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Ã¥dal",
            PHON.ONSET voc ] ].

Ã¥ge_n1 := n_proper_le &
 [ STEM < "Ã¥ge" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Ã¥ge",
            PHON.ONSET voc ] ].

Ã¥mund_n1 := n_proper_le &
 [ STEM < "Ã¥mund" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Ã¥mund",
            PHON.ONSET voc ] ].

Ã¥ndalsnes := n_proper_le &
 [ STEM < "Ã¥ndalsnes" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Ã¥ndalsnes",
            PHON.ONSET voc ] ].

Ã¥pen := n_proper_le &
 [ STEM < "Ã¥pen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Ã¥pen",
            PHON.ONSET voc ] ].

Ã¥rdal_n1 := n_proper_le &
 [ STEM < "Ã¥rdal" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Ã¥rdal",
            PHON.ONSET voc ] ].

Ã¥rdal_og_sunndal_verk_n1 := n_proper_le &
 [ STEM < "Ã¥rdal", "og", "Sunndal", "Verk" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Ãrdal+og+Sunndal+Verk",
            PHON.ONSET voc ] ].

Ã¥rdaler_n1 := n_intr_le &
 [ STEM < "Ã¥rdaler" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_Ã¥rdaler_n_1_rel",
            PHON.ONSET voc ] ].

Ã¥se_n1 := n_proper_le &
 [ STEM < "Ã¥se" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Ã¥se",
            PHON.ONSET voc ] ].

Ã¶rfjellet := n_proper_le &
 [ STEM < "Ã¶rfjellet" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Ã¶rfjellet",
            PHON.ONSET voc ] ].

Ã¶stersund := n_proper_le &
 [ STEM < "Ã¶stersund" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Ã¶stersund",
            PHON.ONSET voc ] ].

Ã¸st_n1 := n_proper_le &
 [ STEM < "Ã¸st" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Ã¸st",
            PHON.ONSET voc ] ].

Ã¸sterbÃ¸ := n_proper_le &
 [ STEM < "Ã¸sterbÃ¸" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Ã¸sterbÃ¸",
            PHON.ONSET voc ] ].

Ã¸sterbÃ¸-vassbygdi := n_proper_le &
 [ STEM < "Ã¸sterbÃ¸-vassbygdi" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Ã¸sterbÃ¸-vassbygdi",
            PHON.ONSET voc ] ].

Ã¸stland_n1 := n_proper_le &
 [ STEM < "Ã¸stland" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Ã¸stland",
            PHON.ONSET voc ] ].

Ã¸stre_n1 := n_proper_le &
 [ STEM < "Ã¸stre" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Ã¸stre",
            PHON.ONSET voc ] ].

Ã¸vre_dÃ¸rÃ¥lseter := n_proper_le &
 [ STEM < "Ã¸vre", "dÃ¸rÃ¥lseter" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Ã¸vre_DÃ¸rÃ¥lseter",
            PHON.ONSET voc ] ].

Ã¸vre_leirungen_n1 := n_proper_le &
 [ STEM < "Ã¸vre", "leirungen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Ã¸vre+leirungen",
            PHON.ONSET voc ] ].

Ã¸vre_n1 := n_proper_le &
 [ STEM < "Ã¸vre" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Ã¸vre",
            PHON.ONSET voc ] ].

Ã¸vre_russglopet := n_proper_le &
 [ STEM < "Ã¸vre", "Russglopet" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Ã¸vre_Russglopet",
            PHON.ONSET voc ] ].

Ã¸vre_sjodalsvatn_n1 := n_proper_le &
 [ STEM < "Ã¸vre", "sjodalsvatn" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Ã¸vre+sjodalsvatn",
            PHON.ONSET voc ] ].

Ã¸vstestÃ¸len_n1 := n_proper_le &
 [ STEM < "Ã¸vstestÃ¸len" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Ã¸vstestÃ¸len",
            PHON.ONSET voc ] ].

Ã¸yang_n1 := n_proper_le &
 [ STEM < "Ã¸yang" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Ã¸yang",
            PHON.ONSET voc ] ].

Ã¸ystein_n1 := n_proper_le &
 [ STEM < "Ã¸ystein" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Ã¸ystein",
            PHON.ONSET voc ] ].

Ã¸ystre_n1 := n_proper_le &
 [ STEM < "Ã¸ystre" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Ã¸ystre",
            PHON.ONSET voc ] ].
