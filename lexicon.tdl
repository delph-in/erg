; MULTIKEY < "bit" >
;%-redefine
:begin :instance.

a_bit := degree_spec_mle2 &
  [ STEM < "a", "bit" >,
    SYNSEM.LOCAL.KEYS.KEY _a_bit_rel ].

:end :instance.

; <<>>

:begin :instance.

a-det := det_sg_le &
  [ STEM < "a" >,
    SYNSEM.LOCAL.KEYS.KEY _a_quant_rel ].

:end :instance.


; <<>>
; MULTIKEY < "few" >

:begin :instance.

a_few := pdet_pl_mle2 &
  [ STEM < "a", "few" >,
    SYNSEM.LOCAL.KEYS.KEY _a_few_rel ].

:end :instance.


; <<>>
; MULTIKEY < "half" >

:begin :instance.

a_half := degree_spec_mle2 &
  [ STEM < "a", "half" >,
    SYNSEM.LOCAL.KEYS.KEY _a_half_rel ].

:end :instance.


; <<>>
; MULTIKEY < "little" >

:begin :instance.

a_little := degree_spec_mle2 &
  [ STEM < "a", "little" >,
    SYNSEM.LOCAL.KEYS.KEY _a_little_rel ].

:end :instance.


; <<>>
; MULTIKEY < "lot" >

:begin :instance.

a_lot := degree_spec_mle2 &
  [ STEM < "a", "lot" >,
    SYNSEM.LOCAL.KEYS.KEY _a_lot_rel ].

:end :instance.


; <<>>
; MULTIKEY < "lot" >

:begin :instance.

a_lot_det := part_noun_mle2 &
  [ STEM < "a", "lot" >,
    SYNSEM.LOCAL.KEYS.ALTKEY _a_lot_of_rel ].

:end :instance.


; <<>>

:begin :instance.

lots_det := part_noun_le &
  [ STEM < "lots" >,
    SYNSEM.LOCAL.KEYS.ALTKEY _lots_of_rel ].

:end :instance.


; <<>>
; MULTIKEY < "quarter" >

:begin :instance.

a_quarter := minute_word_mle2 &
  [ STEM < "a", "quarter" >,
    SYNSEM.LOCAL [ CAT.POSTHEAD -,
		   KEYS.KEY.MINUTE "15" ] ].

:end :instance.


; <<>>
; MULTIKEY < "few" >

:begin :instance.

a_few_part := part_noun_mle2 &
  [ STEM < "a", "few" >,
    SYNSEM.LOCAL.KEYS.ALTKEY _a_few_rel ].

:end :instance.


; <<>>

:begin :instance.

able_a1 := reg_adj_equi_le &
  [ STEM < "able" >,
    SYNSEM.LOCAL.KEYS.KEY _able_rel ].

:end :instance.


; <<>>

:begin :instance.

abolish_v1 := mv_np_trans_le &
  [ STEM < "abolish" >,
    SYNSEM.LOCAL.KEYS.KEY _abolish_rel ].

:end :instance.


; <<>>

:begin :instance.

about := prep_le &
  [ STEM < "about" >,
    SYNSEM.LOCAL.KEYS.KEY _about_rel_a ].

:end :instance.


; <<>>

:begin :instance.

about_deg := degree_spec_le &
  [ STEM < "about" >,
    SYNSEM.LOCAL.KEYS.KEY _about_approx_rel ].

:end :instance.


; <<>>
; MULTIKEY < "all" >

:begin :instance.

above_all_adv1 := vp_adv_post_word_mle2 &
  [ STEM < "above", "all" >,
    SYNSEM.LOCAL.KEYS.KEY _above_all_rel ].

:end :instance.


; <<>>

:begin :instance.

above := reg_prep_le &
  [ STEM < "above" >,
    SYNSEM.LOCAL.KEYS.KEY _above_rel ].

:end :instance.


; <<>>

:begin :instance.

abrams := proper_le &
  [ STEM < "abrams" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'abrams ].

:end :instance.


; <<>>

:begin :instance.

abroad_adv := pp_le &
  [ STEM < "abroad" >,
    SYNSEM.LOCAL.KEYS.KEY _abroad_rel ].

:end :instance.


; <<>>

:begin :instance.

absence_n1 := intr_noun_word_le &
  [ STEM < "absence" >,
    SYNSEM.LOCAL.KEYS.KEY _absence_rel ].

:end :instance.


; <<>>

:begin :instance.

absent_a1 := intrans_adj_le &
  [ STEM < "absent" >,
    SYNSEM.LOCAL.KEYS.KEY _absent_rel ].

:end :instance.


; <<>>

:begin :instance.

absolute_a1 := intrans_adj_le &
  [ STEM < "absolute" >,
    SYNSEM.LOCAL.KEYS.KEY _absolute_rel ].

:end :instance.


; <<>>

:begin :instance.

absolutely_adv1 := vp_adv_pre_word_le &
  [ STEM < "absolutely" >,
    SYNSEM.LOCAL.KEYS.KEY _absolutely_scop_rel ].

:end :instance.


; <<>>

:begin :instance.

absolutely_adv2 := s_adv_pre_word_le &
  [ STEM < "absolutely" >,
    SYNSEM.LOCAL.KEYS.KEY _absolutely_scop_rel ].

:end :instance.


; <<>>

:begin :instance.

absolutely_deg := degree_spec_le &
  [ STEM < "absolutely" >,
    SYNSEM.LOCAL.KEYS.KEY _absolutely_rel ].

:end :instance.


; <<>>

:begin :instance.

abstain_v1 := mv_empty_prep*_intrans_le &
  [ STEM < "abstain" >,
    SYNSEM.LOCAL.KEYS [ KEY _abstain_from_rel,
			--COMPKEY _from_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

accept_v1 := mv_np_trans_le &
  [ STEM < "accept" >,
    SYNSEM.LOCAL.KEYS.KEY _accept_rel ].

:end :instance.


; <<>>

:begin :instance.

acceptable_a1 := intrans_adj_le &
  [ STEM < "acceptable" >,
    SYNSEM.LOCAL.KEYS.KEY _acceptable_rel ].

:end :instance.


; <<>>

:begin :instance.

acceptably_a1 := adv_word_le &
  [ STEM < "acceptably" >,
    SYNSEM.LOCAL.KEYS.KEY _acceptably_rel ].

:end :instance.


; <<>>

:begin :instance.

acceptable_a2 := reg_adj_atrans_le &
  [ STEM < "acceptable" >,
    SYNSEM.LOCAL.KEYS.KEY _acceptable2_rel ].

:end :instance.


; <<>>

:begin :instance.

acceptance_n1 := massn_le &
  [ STEM < "acceptance" >,
    SYNSEM.LOCAL.KEYS.KEY _acceptance_rel ].

:end :instance.


; <<>>

:begin :instance.

accidental_a1 := intrans_adj_le &
  [ STEM < "accidental" >,
    SYNSEM.LOCAL.KEYS.KEY _accidental_rel ].

:end :instance.


; <<>>

:begin :instance.

accidentally_adv1 := adv_word_le &
  [ STEM < "accidentally" >,
    SYNSEM.LOCAL.KEYS.KEY _accidentally_rel ].

:end :instance.


; <<>>

:begin :instance.

accommodation_n1 := massn_le &
  [ STEM < "accommodation" >,
    SYNSEM.LOCAL.KEYS.KEY _accommodation_rel ].

:end :instance.


; <<>>

:begin :instance.

accommodation_n2 := intr_noun_word_le &
  [ STEM < "accommodation" >,
    SYNSEM.LOCAL.KEYS.KEY _accommodation_rel ].

:end :instance.


; <<>>

:begin :instance.

accomplish_v1 := mv_np_trans_le &
  [ STEM < "accomplish" >,
    SYNSEM.LOCAL.KEYS.KEY _accomplish_rel ].

:end :instance.


; <<>>
; MULTIKEY < "according" >

:begin :instance.

according_to := prep_mle1 &
  [ STEM < "according", "to" >,
    SYNSEM.LOCAL.KEYS.KEY _according_to_rel ].

:end :instance.


; <<>>

:begin :instance.

accordingly_adv1 := int_vp_adv_post_word_le &
  [ STEM < "accordingly" >,
    SYNSEM.LOCAL.KEYS.KEY _accordingly_rel ].

:end :instance.


; <<>>

:begin :instance.

account_n1 := massn_le &
  [ STEM < "account" >,
    SYNSEM.LOCAL.KEYS.KEY _account_n_rel ].

:end :instance.


; <<>>

:begin :instance.

account_n2 := intr_noun_word_le &
  [ STEM < "account" >,
    SYNSEM.LOCAL.KEYS.KEY _account_n_rel ].

:end :instance.


; <<>>

:begin :instance.

account_v1 := mv_empty_prep_intrans_le &
  [ STEM < "account" >,
    SYNSEM.LOCAL.KEYS [ KEY _account_for_rel,
			--COMPKEY _for_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

accurate_a1 := intrans_adj_le &
  [ STEM < "accurate" >,
    SYNSEM.LOCAL.KEYS.KEY _accurate_rel ].

:end :instance.


; <<>>

:begin :instance.

achieve_v1 := mv_np_trans_le &
  [ STEM < "achieve" >,
    SYNSEM.LOCAL.KEYS.KEY _achieve_rel ].

:end :instance.


; <<>>

:begin :instance.

across := reg_prep_le &
  [ STEM < "across" >,
    SYNSEM.LOCAL.KEYS.KEY _across_rel_a ].

:end :instance.


; <<>>

:begin :instance.

act_v1 := mv_unerg_le &
  [ STEM < "act" >,
    SYNSEM.LOCAL.KEYS.KEY _act_v_rel ].

:end :instance.

; <<>>

:begin :instance.

activate_v1 := mv_np_trans_le &
  [ STEM < "activate" >,
    SYNSEM.LOCAL.KEYS.KEY _activate_rel ].

:end :instance.


; <<>>

:begin :instance.

active_a1 := intrans_adj_le &
  [ STEM < "active" >,
    SYNSEM.LOCAL.KEYS.KEY _active_rel ].

:end :instance.


; <<>>

:begin :instance.

activity_n1 := intr_noun_word_le &
  [ STEM < "activity" >,
    SYNSEM.LOCAL.KEYS.KEY _activity_rel ].

:end :instance.


; <<>>

:begin :instance.

actual_a1 := intrans_adj_le &
  [ STEM < "actual" >,
    SYNSEM.LOCAL.KEYS.KEY _actual_rel ].

:end :instance.


; <<>>

:begin :instance.

actually_adv1 := vp_aux_adv_word_le &
  [ STEM < "actually" >,
    SYNSEM.LOCAL.KEYS.KEY _actually_rel ].

:end :instance.


; <<>>

:begin :instance.

actually_adv2 := s_adv_word_le &
  [ STEM < "actually" >,
    SYNSEM.LOCAL.KEYS.KEY _actually_rel ].

:end :instance.


; <<>>

:begin :instance.

adapt_v1 := mv_empty_prep*_intrans_le &
  [ STEM < "adapt" >,
    SYNSEM.LOCAL.KEYS [ KEY _adapt_to_rel,
			--COMPKEY _to_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

adapt_v2 := mv_np_trans_le &
  [ STEM < "adapt" >,
    SYNSEM.LOCAL.KEYS.KEY _adapt_rel ].

:end :instance.


; <<>>

:begin :instance.

add_v1 := mv_np_trans_le &
  [ STEM < "add" >,
    SYNSEM.LOCAL.KEYS.KEY _add_rel ].

:end :instance.


; <<>>

:begin :instance.

add_on_v1 := mv_prep_particle_np_le &
  [ STEM < "add" >,
    SYNSEM.LOCAL.KEYS [ KEY _add_on_rel,
			--COMPKEY _on_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

add_to_v1 := mv_empty_prep_intrans_le &
  [ STEM < "add" >,
    SYNSEM.LOCAL.KEYS [ KEY _add_to_rel,
			--COMPKEY _to_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

addition_n1 := intr_noun_word_le &
  [ STEM < "addition" >,
    SYNSEM.LOCAL.KEYS.KEY _addition_rel ].

:end :instance.


; <<>>

:begin :instance.

additional_a1 := intrans_adj_le &
  [ STEM < "additional" >,
    SYNSEM.LOCAL.KEYS.KEY _additional_rel ].

:end :instance.


; <<>>

:begin :instance.

address_n1 := intr_noun_word_le &
  [ STEM < "address" >,
    SYNSEM.LOCAL.KEYS.KEY _address_n_rel ].

:end :instance.


; <<>>

:begin :instance.

address_v1 := mv_np_trans_le &
  [ STEM < "address" >,
    SYNSEM.LOCAL.KEYS.KEY _address_v_rel ].

:end :instance.


; <<>>

:begin :instance.

adjourn := mv_np_trans_le &
  [ STEM < "adjourn" >,
    SYNSEM.LOCAL.KEYS.KEY _adjourn_rel ].

:end :instance.


; <<>>

:begin :instance.

admit_v1 := mv_np_trans_le &
  [ STEM < "admit" >,
    SYNSEM.LOCAL.KEYS.KEY _admit_rel ].

:end :instance.


; <<>>

:begin :instance.

admit_v2 := mv_cp_prop_non_trans_le &
  [ STEM < "admit" >,
    SYNSEM.LOCAL.KEYS.KEY _admit_h_rel ].

:end :instance.


; <<>>

:begin :instance.

admit_v3 := mv_unerg_le &
  [ STEM < "admit" >,
    SYNSEM.LOCAL.KEYS.KEY _admit_rel ].

:end :instance.


; <<>>

:begin :instance.

ado_n1 := massn_le &
  [ STEM < "ado" >,
    SYNSEM.LOCAL.KEYS.KEY _ado_rel ].

:end :instance.


; <<>>

:begin :instance.

adoption_n1 := massn_le &
  [ STEM < "adoption" >,
    SYNSEM.LOCAL.KEYS.KEY _adoption_rel ].

:end :instance.


; <<>>

:begin :instance.

advance_v1 := mv_np_trans_le &
  [ STEM < "advance" >,
    SYNSEM.LOCAL.KEYS.KEY _advance_rel ].

:end :instance.


; <<>>

:begin :instance.

advance_v2 := mv_ditrans_only_le &
  [ STEM < "advance" >,
    SYNSEM.LOCAL.KEYS.KEY _advance_amount_rel ].

:end :instance.


; <<>>

:begin :instance.

advantage_n1 := massn_le &
  [ STEM < "advantage" >,
    SYNSEM.LOCAL.KEYS.KEY _advantage_rel ].

:end :instance.


; <<>>

:begin :instance.

advent := season_word_le &
  [ STEM < "advent" >,
    SYNSEM.LOCAL.KEYS.KEY.SEASON 'advent ].

:end :instance.


; <<>>

:begin :instance.

advice_n1 := massn_le &
  [ STEM < "advice" >,
    SYNSEM.LOCAL.KEYS.KEY _advice_rel ].

:end :instance.


; <<>>

:begin :instance.

affair_n1 := intr_noun_word_le &
  [ STEM < "affair" >,
    SYNSEM.LOCAL.KEYS.KEY _affair_rel ].

:end :instance.


; <<>>

:begin :instance.

affect_v1 := mv_np_trans_le &
  [ STEM < "affect" >,
    SYNSEM.LOCAL.KEYS.KEY _affect_rel ].

:end :instance.


; <<>>

:begin :instance.

afford_v1 := mv_np_trans_le &
  [ STEM < "afford" >,
    SYNSEM.LOCAL.KEYS.KEY _afford_rel ].

:end :instance.


; <<>>

:begin :instance.

afford_v2 := mv_subj_equi_le &
  [ STEM < "afford" >,
    SYNSEM.LOCAL.KEYS.KEY _afford2_rel ].

:end :instance.


; <<>>

:begin :instance.

afraid_a1 := pred_intrans_adj_le &
  [ STEM < "afraid" >,
    SYNSEM.LOCAL.KEYS.KEY _afraid_rel ].

:end :instance.


; <<>>

:begin :instance.

afraid_a2 := reg_adj_that_cp_le &
  [ STEM < "afraid" >,
    SYNSEM.LOCAL.KEYS.KEY _afraid_varg_rel ].

:end :instance.


; <<>>
; MULTIKEY < "all" >

:begin :instance.

after_all_adv1 := vp_adv_post_word_mle2 &
  [ STEM < "after", "all" >,
    SYNSEM.LOCAL.KEYS.KEY _after_all_rel ].

:end :instance.


; <<>>

:begin :instance.

after2 := prep_cp_le &
  [ STEM < "after" >,
    SYNSEM.LOCAL.KEYS.KEY _after_prepx_rel ].

:end :instance.


; <<>>

:begin :instance.

after := prep_optcomp_le &
  [ STEM < "after" >,
    SYNSEM.LOCAL.KEYS.KEY _after_prepx_rel_a ].

:end :instance.


; <<>>

:begin :instance.

after_hour := hour_prep_word_le &
  [ STEM < "after" >,
    SYNSEM.LOCAL.KEYS.KEY _after_hour_rel ].

:end :instance.


; <<>>

:begin :instance.

afternoon_sg_n1 := day_part_word_le &
  [ STEM < "afternoon" >,
    SYNSEM.LOCAL.KEYS.KEY _afternoon_rel & [ INST [ PNG png & [ PN 3sg*,
								GEN neut* ],
						    DIVISIBLE - ] ] ].

:end :instance.


; <<>>

:begin :instance.

afternoon_pl_n1 := day_part_word_le &
  [ STEM < "afternoons" >,
    SYNSEM.LOCAL.KEYS.KEY _afternoon_rel & [ INST.PNG png & [ PN 3pl* ] ] ].

:end :instance.


; <<>>

:begin :instance.

afternoon_sg_def := def_day_part_word_le &
  [ STEM < "afternoon" >,
    SYNSEM.LOCAL.KEYS.KEY _def_afternoon_rel & 
	                  [ INST [ PNG png & [ PN 3sg*,
					       GEN neut* ],
				   DIVISIBLE - ] ] ].

:end :instance.


; <<>>

:begin :instance.

afternoon_pl_def := def_day_part_word_le &
  [ STEM < "afternoons" >,
    SYNSEM.LOCAL.KEYS.KEY _def_afternoon_rel &
	                  [ INST.PNG png & [ PN 3pl* ] ] ].

:end :instance.


; <<>>

:begin :instance.

afterward_adv1 := pp_le &
  [ STEM < "afterward" >,
    SYNSEM.LOCAL.KEYS.KEY _afterward_rel ].

:end :instance.


; <<>>

:begin :instance.

afterwards_adv1 := pp_le &
  [ STEM < "afterwards" >,
    SYNSEM.LOCAL [ CAT.HEAD.MOD < [ LOCAL.CAT.HEAD verb ] >,
		   KEYS.KEY _afterwards_rel ] ].


:end :instance.


; <<>>

:begin :instance.

again_adv1 := vp_adv_post_word_le &
  [ STEM < "again" >,
    SYNSEM.LOCAL.KEYS.KEY _again_rel ].

:end :instance.


; <<>>

:begin :instance.

again_adv2 := s_adv_pre_word_le &
  [ STEM < "again" >,
    SYNSEM.LOCAL.KEYS.KEY _again_rel ].

:end :instance.



; <<>>

:begin :instance.

against := prep_le &
  [ STEM < "against" >,
    SYNSEM.LOCAL.KEYS.KEY _against_rel_a ].

:end :instance.


; <<>>

:begin :instance.

age_n1 := intr_temp_noun_le &
  [ STEM < "age" >,
    SYNSEM.LOCAL.KEYS.KEY _age_rel ].

:end :instance.


; <<>>

:begin :instance.

agenda_n1 := intr_noun_word_le &
  [ STEM < "agenda" >,
    SYNSEM.LOCAL.KEYS.KEY _agenda_rel ].

:end :instance.


; <<>>

:begin :instance.

ago_a1 := intrans_adj_le &
  [ STEM < "ago" >,
    SYNSEM.LOCAL.KEYS.KEY _ago_rel ].

:end :instance.


; <<>>

:begin :instance.

agree_v1 := mv_pp_cp_le &
  [ STEM < "agree" >,
    SYNSEM.LOCAL.KEYS [ KEY _agree_rel,
			--COMPKEY _with_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

agree_on_v1 := mv_empty_prep*_intrans_le &
  [ STEM < "agree" >,
    SYNSEM.LOCAL.KEYS [ KEY _agree_on_rel,
			--COMPKEY _on_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

agree_to_v1 := mv_empty_prep_intrans_le &
  [ STEM < "agree" >,
    SYNSEM.LOCAL.KEYS [ KEY _agree_to_rel,
			--COMPKEY _to_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

agreeable_a1 := intrans_adj_le &
  [ STEM < "agreeable" >,
    SYNSEM.LOCAL.KEYS.KEY _agreeable_rel ].

:end :instance.


; <<>>

:begin :instance.

agreed_root := disc_adv_le &
  [ STEM < "agreed" >,
    SYNSEM.LOCAL.KEYS.KEY excl_rel & [ EXCL 'agreed ] ].

:end :instance.


; <<>>

:begin :instance.

agreement_n1 := massn_le &
  [ STEM < "agreement" >,
    SYNSEM.LOCAL.KEYS.KEY _agreement_rel ].

:end :instance.


; <<>>

:begin :instance.

agreement_n2 := intr_noun_word_le &
  [ STEM < "agreement" >,
    SYNSEM.LOCAL.KEYS.KEY _agreement_rel ].

:end :instance.


; <<>>

:begin :instance.

ah_root := disc_adv_le &
  [ STEM < "ah" >,
    SYNSEM.LOCAL [ CAT.POSTHEAD -,
		   KEYS.KEY excl_rel & [ EXCL 'ah ] ] ].

:end :instance.


; <<>>

:begin :instance.

aha_root := disc_adv_le &
  [ STEM < "aha" >,
    SYNSEM.LOCAL [ CAT.POSTHEAD -,
		   KEYS.KEY excl_rel & [ EXCL 'aha ] ] ].

:end :instance.


; <<>>

:begin :instance.

ahead_adv := pp_le &
  [ STEM < "ahead" >,
    SYNSEM.LOCAL.KEYS.KEY _ahead_adv_rel ].

:end :instance.


; <<>>
; MULTIKEY < "ahead" >

:begin :instance.

ahead_of := prep_mle1 &
  [ STEM < "ahead", "of" >,
    SYNSEM.LOCAL.KEYS.KEY _ahead_of_rel ].

:end :instance.


; <<>>

:begin :instance.

aim_at_v1 := mv_empty_prep_intrans_le &
  [ STEM < "aim" >,
    SYNSEM.LOCAL.KEYS [ KEY _aim_at_rel,
			--COMPKEY _at_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

aim_v1 := mv_np_trans_le &
  [ STEM < "aim" >,
    SYNSEM.LOCAL.KEYS.KEY _aim_v_rel ].

:end :instance.


; <<>>

:begin :instance.

air_n1 := massn_le &
  [ STEM < "air" >,
    SYNSEM.LOCAL.KEYS.KEY _air_rel ].

:end :instance.


; <<>>

:begin :instance.

airplane_n1 := intr_noun_word_le &
  [ STEM < "airplane" >,
    SYNSEM.LOCAL.KEYS.KEY _airplane_rel ].

:end :instance.


; <<>>

:begin :instance.

airport_n1 := intr_noun_word_le &
  [ STEM < "airport" >,
    SYNSEM.LOCAL.KEYS.KEY _airport_rel ].

:end :instance.


; <<>>

:begin :instance.

albeit := subconj_le &
  [ STEM < "albeit" >,
    SYNSEM.LOCAL.KEYS.KEY _albeit_rel ].

:end :instance.


; <<>>

:begin :instance.

algorithm_n1 := intr_noun_word_le &
  [ STEM < "algorithm" >,
    SYNSEM.LOCAL.KEYS.KEY _algorithm_rel ].

:end :instance.


; <<>>

:begin :instance.

alias_n1 := intr_noun_word_le &
  [ STEM < "alias" >,
    SYNSEM.LOCAL.KEYS.KEY _alias_rel ].

:end :instance.


; <<>>

:begin :instance.

alike_a1 := intrans_adj_le &
  [ STEM < "alike" >,
    SYNSEM.LOCAL.KEYS.KEY _alike_rel ].

:end :instance.


; <<>>

:begin :instance.

all := pdet_pl_mass_le &
  [ STEM < "all" >,
    SYNSEM.LOCAL.KEYS.KEY _all_rel ].

:end :instance.


; <<>>

:begin :instance.

all_temp := det_sg_le &
  [ STEM < "all" >,
    SYNSEM.LOCAL [ CAT.VAL.SPEC < [ LOCAL.KEYS.KEY temp_abstr_rel ] >,
		   KEYS.KEY _all_rel ] ].

:end :instance.


; <<>>

:begin :instance.

all_adv1 := vp_aux_adv_word_le &
  [ STEM < "all" >,
    SYNSEM.LOCAL.KEYS.KEY _all_adv_rel ].

:end :instance.


; <<>>
; MULTIKEY < "all" >

:begin :instance.

all_day_adv := all_time_mle &
  [ STEM < "all", "day" >,
    SYNSEM.LOCAL.KEYS.ALTKEY _day_rel ].

:end :instance.


; <<>>
; MULTIKEY < "all" >

:begin :instance.

all_day_nom := np_adv_mle &
  [ STEM < "all", "day" >,
    SYNSEM.LOCAL.CONT.LISZT <! _day_rel, _all_rel !> ].

:end :instance.


; <<>>
; MULTIKEY < "over" >

:begin :instance.

all_over_adv1 := adv_post_word_mle2 &
  [ STEM < "all", "over" >,
    SYNSEM.LOCAL.KEYS.KEY _all_over_rel ].

:end :instance.


; <<>>

:begin :instance.

all_deg := degree_spec_le &
  [ STEM < "all" >,
    SYNSEM.LOCAL.KEYS.KEY _all_grad_rel ].

:end :instance.


; <<>>
; MULTIKEY < "right" >

:begin :instance.

allright_root := disc_adv_mle2 &
  [ STEM < "all", "right" >,
    SYNSEM.LOCAL.KEYS.KEY excl_rel & [ EXCL 'all_right ] ].

:end :instance.


; <<>>
; MULTIKEY < "saints" >

:begin :instance.

all_saints_day := holiday_word_3mle2 &
  [ STEM < "all", "saints", "day" >,
    SYNSEM.LOCAL.KEYS.KEY.DAY 'all_saints_day ].

:end :instance.


; <<>>
; MULTIKEY < "all" >

:begin :instance.

all_the := det_mle1 &
  [ STEM < "all", "the" >,
    SYNSEM.LOCAL.KEYS.KEY _all_def_rel ].

:end :instance.


; <<>>
; MULTIKEY < "all" >

:begin :instance.

all_that := det_mle1 &
  [ STEM < "all", "that" >,
    SYNSEM.LOCAL.KEYS.KEY _all_dem_rel ].

:end :instance.


; <<>>
; MULTIKEY < "all" >

:begin :instance.

all_this := det_mle1 &
  [ STEM < "all", "this" >,
    SYNSEM.LOCAL.KEYS.KEY _all_dem_rel ].

:end :instance.


; <<>>
; MULTIKEY < "right" >

:begin :instance.

allright_a2 := vp_adv_post_word_mle2 &
  [ STEM < "all", "right" >,
    SYNSEM.LOCAL.KEYS.KEY _allright_adv_rel ].

:end :instance.


; <<>>

:begin :instance.

allow_for_v1 := mv_empty_prep_intrans_le &
  [ STEM < "allow" >,
    SYNSEM.LOCAL.KEYS [ KEY _allow_for_rel,
			--COMPKEY _for_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

allow_v1 := mv_obj_equi_le &
  [ STEM < "allow" >,
    SYNSEM.LOCAL.KEYS.KEY _allow_rel ].

:end :instance.


; <<>>

:begin :instance.

almost_adv := vp_adv_pre_word_le &
  [ STEM < "almost" >,
    SYNSEM.LOCAL.KEYS.KEY _almost_adv_rel ].

:end :instance.


; <<>>

:begin :instance.

almost_deg := degree_spec_le &
  [ STEM < "almost" >,
    SYNSEM.LOCAL.KEYS.KEY _almost_grad_rel ].

:end :instance.


; <<>>

:begin :instance.

alone_a1 := pred_intrans_adj_le &
  [ STEM < "alone" >,
    SYNSEM.LOCAL.KEYS.KEY _alone_rel ].

:end :instance.


; <<>>

:begin :instance.

alone := vp_adv_post_word_le &
  [ STEM < "alone" >,
    SYNSEM.LOCAL.KEYS.KEY _alone_adv_rel ].

:end :instance.


; <<>>

:begin :instance.

along := reg_prep_le &
  [ STEM < "along" >,
    SYNSEM.LOCAL.KEYS.KEY _along_p_rel_a ].

:end :instance.


; <<>>
; MULTIKEY < "along" >

:begin :instance.

along_with := reg_prep_mle1 &
  [ STEM < "along", "with" >,
    SYNSEM.LOCAL.KEYS.KEY _along_with_rel ].

:end :instance.


; <<>>

:begin :instance.

aloud_a1 := intrans_adj_le &
  [ STEM < "aloud" >,
    SYNSEM.LOCAL.KEYS.KEY _aloud_rel ].

:end :instance.


; <<>>

:begin :instance.

alphabet_n1 := intr_noun_word_le &
  [ STEM < "alphabet" >,
    SYNSEM.LOCAL.KEYS.KEY _alphabet_rel ].

:end :instance.


; <<>>

:begin :instance.

already_adv1 := adv_word_le &
  [ STEM < "already" >,
    SYNSEM.LOCAL.KEYS.KEY _already_rel ].

:end :instance.


; <<>>

:begin :instance.

alright_root := disc_adv_le &
  [ STEM < "alright" >,
    SYNSEM.LOCAL.KEYS.KEY excl_rel & [ EXCL 'all_right ] ].

:end :instance.


; <<>>

:begin :instance.

also_adv1 := vp_aux_adv_word_le &
  [ STEM < "also" >,
    SYNSEM.LOCAL.KEYS.KEY _also_rel ].

:end :instance.


; <<>>

:begin :instance.

also_adv2 := s_adv_pre_word_le &
  [ STEM < "also" >,
    SYNSEM.LOCAL.KEYS.KEY _also_rel ].

:end :instance.


; <<>>

:begin :instance.

alternate_between_v1 := mv_empty_prep_intrans_le &
  [ STEM < "alternate" >,
    SYNSEM.LOCAL.KEYS [ KEY _alternate_between_rel,
			--COMPKEY _between_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

amount_to_v1 := mv_empty_prep_intrans_le &
  [ STEM < "amount" >,
    SYNSEM.LOCAL.KEYS [ KEY _amount_to_rel,
			--COMPKEY _to_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

alternate_v1 := mv_np_trans_le &
  [ STEM < "alternate" >,
    SYNSEM.LOCAL.KEYS.KEY _alternate_v_rel ].

:end :instance.


; <<>>

:begin :instance.

alternative_a1 := intrans_adj_le &
  [ STEM < "alternative" >,
    SYNSEM.LOCAL.KEYS.KEY _alternative_adj_rel ].

:end :instance.


; <<>>

:begin :instance.

alternative_n1 := intr_noun_word_le &
  [ STEM < "alternative" >,
    SYNSEM.LOCAL.KEYS.KEY _alternative_rel ].

:end :instance.


; <<>>

:begin :instance.

alternatively_adv1 := vp_adv_post_word_le &
  [ STEM < "alternatively" >,
    SYNSEM.LOCAL.KEYS.KEY _alternatively_rel ].

:end :instance.


; <<>>

:begin :instance.

although := subconj_le &
  [ STEM < "although" >,
    SYNSEM.LOCAL.KEYS.KEY _although_rel ].

:end :instance.


; <<>>

:begin :instance.

altogether_adv1 := vp_adv_post_word_le &
  [ STEM < "altogether" >,
    SYNSEM.LOCAL.KEYS.KEY _altogether_rel ].

:end :instance.


; <<>>

:begin :instance.

always_adv1 := adv_word_le &
  [ STEM < "always" >,
    SYNSEM.LOCAL.KEYS.KEY _always_rel ].

:end :instance.


; <<>>

:begin :instance.

be_c_am := be_c_am_le &
  [ STEM < "am" > ].

:end :instance.


; <<>>

:begin :instance.

be_id_am := be_id_am_le &
  [ STEM < "am" > ].

:end :instance.


; <<>>

:begin :instance.

am_temp := am_pm_word_le &
  [ STEM < "a.m." >,
    SYNSEM.LOCAL.KEYS.KEY _am_rel ].

:end :instance.


; <<>>

:begin :instance.

am_temp_2 := am_pm_word_le &
  [ STEM < "am" >,
    SYNSEM.LOCAL.KEYS.KEY _am_rel ].

:end :instance.


; <<>>
; MULTIKEY < "m" >

:begin :instance.

am_temp_3 := am_pm_word_mle2 &
  [ STEM < "a", "m" >,
    SYNSEM.LOCAL.KEYS.KEY _am_rel ].

:end :instance.


; <<>>
; MULTIKEY < "$m" >

:begin :instance.

am_temp_4 := am_pm_word_mle2 &
  [ STEM < "$a", "$m" >,
    SYNSEM.LOCAL.KEYS.KEY _am_rel ].

:end :instance.


; <<>>

:begin :instance.

amazing_a1 := intrans_adj_le &
  [ STEM < "amazing" >,
    SYNSEM.LOCAL.KEYS.KEY _amazing_rel ].

:end :instance.


; <<>>

:begin :instance.

amazingly_adv := adv_word_le &
  [ STEM < "amazingly" >,
    SYNSEM.LOCAL.KEYS.KEY _amazingly_rel ].

:end :instance.


; <<>>

:begin :instance.

amazingly_deg := degree_spec_le &
  [ STEM < "amazingly" >,
    SYNSEM.LOCAL.KEYS.KEY _amazingly_grad_rel ].

:end :instance.


; <<>>

:begin :instance.

ambience_n1 := intr_noun_word_le &
  [ STEM < "ambience" >,
    SYNSEM.LOCAL.KEYS.KEY _ambience_rel ].

:end :instance.


; <<>>

:begin :instance.

America_n1 := proper_le &
  [ STEM < "america" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'America ].

:end :instance.


; <<>>

:begin :instance.

american_a1 := intrans_adj_le &
  [ STEM < "american" >,
    SYNSEM.LOCAL.KEYS.KEY _american_isect_rel ].

:end :instance.


; <<>>

:begin :instance.

among := reg_prep_le &
  [ STEM < "among" >,
    SYNSEM.LOCAL.KEYS.KEY _among_rel ].

:end :instance.


; <<>>

:begin :instance.

amount_n1 := noun_ppof_word_le &
  [ STEM < "amount" >,
    SYNSEM.LOCAL.KEYS.KEY _amount_rel ].

:end :instance.


; <<>>

:begin :instance.

Amsterdam_n1 := proper_le &
  [ STEM < "amsterdam" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Amsterdam ].

:end :instance.


; <<>>

:begin :instance.

an := det_sg_le &
  [ STEM < "an" >,
    SYNSEM.LOCAL.KEYS.KEY _a_quant_rel ].

:end :instance.


; <<>>

:begin :instance.

analyze_v1 := mv_np_trans_le &
  [ STEM < "analyze" >,
    SYNSEM.LOCAL.KEYS.KEY _analyze_rel ].

:end :instance.


; <<>>

:begin :instance.

and_conj := coord_c_le &
  [ STEM < "and" >,
    SYNSEM.LOCAL [ CONJ complex-conj & [ CHEAD.LEFT < cnil, cnil > ],
		   CONT.LISZT <! _and_rel !>,
                   AGR.PNG png & [ PN 3pl ] ] ].

:end :instance.


; <<>>

:begin :instance.

and_conj_2 := coord_c_le &
  [ STEM < "and" >,
    SYNSEM.LOCAL [ CONJ complex-conj & [ CHEAD.LEFT < both > ],
		   CONT.LISZT <! _and_rel !>,
                   AGR.PNG png & [ PN 3pl ] ] ].

:end :instance.


; <<>>
; MULTIKEY < "so" >

:begin :instance.

and_so_on_adv1 := vp_adv_post_word_3mle2 &
  [ STEM < "and", "so", "on" >,
    SYNSEM.LOCAL.KEYS.KEY _and_so_on_rel ].

:end :instance.


; <<>>
; MULTIKEY < "and" >

:begin :instance.

and_then_1 := coord_c_mle &
  [ STEM < "and", "then" >,
    SYNSEM.LOCAL [ CAT.VAL.COMPS < [ LOCAL.CAT [ HEAD verb,
						 VAL.COMPS *olist* ] ] >,
		   CONJ complex-conj & [ CHEAD.LEFT < cnil, cnil > ],
		   CONT.LISZT <! _and_then_rel !> ] ].

:end :instance.


; <<>>

:begin :instance.

anew_adv1 := vp_adv_post_word_le &
  [ STEM < "anew" >,
    SYNSEM.LOCAL.KEYS.KEY _anew_rel ].

:end :instance.


; <<>>

:begin :instance.

angry_a1 := intrans_adj_le &
  [ STEM < "angry" >,
    SYNSEM.LOCAL.KEYS.KEY _angry_rel ].

:end :instance.


; <<>>

:begin :instance.

anniversary_n1 := intr_noun_word_le &
  [ STEM < "anniversary" >,
    SYNSEM.LOCAL.KEYS.KEY _anniversary_rel ].

:end :instance.


; <<>>

:begin :instance.

announce_v1 := mv_np_trans_le &
  [ STEM < "announce" >,
    SYNSEM.LOCAL.KEYS.KEY _announce_rel ].

:end :instance.


; <<>>

:begin :instance.

announce_v2 := mv_cp_non_trans_le &
  [ STEM < "announce" >,
    SYNSEM.LOCAL.KEYS.KEY _announce_h_rel ].

:end :instance.


; <<>>

:begin :instance.

annoy_v1 := mv_np_trans_le &
  [ STEM < "annoy" >,
    SYNSEM.LOCAL.KEYS.KEY _annoy_rel ].

:end :instance.


; <<>>

:begin :instance.

annoying_a1 := intrans_adj_le &
  [ STEM < "annoying" >,
    SYNSEM.LOCAL.KEYS.KEY _annoying_rel ].

:end :instance.


; <<>>

:begin :instance.

annoyingly := vp_adv_post_word_le &
  [ STEM < "annoyingly" >,
    SYNSEM.LOCAL.KEYS.KEY _annoyingly_rel ].

:end :instance.


; <<>>

:begin :instance.

annual_a1 := intrans_adj_le &
  [ STEM < "annual" >,
    SYNSEM.LOCAL.KEYS.KEY _annual_rel ].

:end :instance.


; <<>>

:begin :instance.

another := pdet_sg_le &
  [ STEM < "another" >,
    SYNSEM.LOCAL.KEYS.KEY _another_rel ].

:end :instance.


; <<>>

:begin :instance.

answer_n1 := intr_noun_word_le &
  [ STEM < "answer" >,
    SYNSEM.LOCAL.KEYS.KEY _answer_n_rel ].

:end :instance.


; <<>>

:begin :instance.

answer_v1 := mv_np*_trans_cp_le &
  [ STEM < "answer" >,
    SYNSEM.LOCAL.KEYS.KEY _answer_v_h_rel ].

:end :instance.


; <<>>

:begin :instance.

answer_v2 := mv_np*_trans_le &
  [ STEM < "answer" >,
    SYNSEM.LOCAL.KEYS.KEY _answer_v_rel ].

:end :instance.


; <<>>

:begin :instance.

anxiety_n1 := massn_le &
  [ STEM < "anxiety" >,
    SYNSEM.LOCAL.KEYS.KEY _anxiety_rel ].

:end :instance.


; <<>>

:begin :instance.

any_det := pdet_le &
  [ STEM < "any" >,
    SYNSEM.LOCAL.KEYS.KEY _any_rel ].

:end :instance.


; <<>>

:begin :instance.

any_deg := degree_spec_le &
  [ STEM < "any" >,
    SYNSEM.LOCAL.KEYS.KEY _any_deg_rel ].

:end :instance.


; <<>>

:begin :instance.

anybody := generic_pro_le &
  [ STEM < "anybody" >,
    SYNSEM.LOCAL.KEYS [ KEY _person_rel,
			ALTKEY _any_rel ] ].
:end :instance.


; <<>>

:begin :instance.

anyhow_adv1 := vp_adv_post_word_le &
  [ STEM < "anyhow" >,
    SYNSEM.LOCAL.KEYS.KEY _anyhow_rel ].

:end :instance.


; <<>>

:begin :instance.

anymore_adv1 := vp_adv_post_word_le &
  [ STEM < "anymore" >,
    SYNSEM.LOCAL.KEYS.KEY _anymore_rel ].

:end :instance.


; <<>>

:begin :instance.

anyone := generic_pro_le &
  [ STEM < "anyone" >,
    SYNSEM.LOCAL.KEYS [ KEY _person_rel,
			ALTKEY _any_rel ] ].
:end :instance.


; <<>>

:begin :instance.

anything := generic_pro_le &
  [ STEM < "anything" >,
    SYNSEM.LOCAL.KEYS [ KEY _thing_rel,
			ALTKEY _any_rel ] ].
:end :instance.


; <<>>

:begin :instance.

anyway_adv1 := vp_adv_post_word_le &
  [ STEM < "anyway" >,
    SYNSEM.LOCAL.KEYS.KEY _anyway_rel ].

:end :instance.


; <<>>

:begin :instance.

apart_a1 := pred_intrans_adj_le &
  [ STEM < "apart" >,
    SYNSEM.LOCAL.KEYS.KEY _apart_isect_rel_a ].

:end :instance.


; <<>>
; MULTIKEY < "apart" >

:begin :instance.

apart_from := prep_mle1 &
  [ STEM < "apart", "from" >,
    SYNSEM.LOCAL.KEYS.KEY _apart_from_rel ].

:end :instance.


; <<>>

:begin :instance.

aperitif_n1 := intr_noun_word_le &
  [ STEM < "aperitif" >,
    SYNSEM.LOCAL.KEYS.KEY _aperitif_rel ].

:end :instance.


; <<>>

:begin :instance.

apologize_v1 := mv_double_pp*_le &
  [ STEM < "apologize" >,
    SYNSEM.LOCAL.KEYS [ KEY _apologize_rel,
			--COMPKEY _to_rel,
			--OCOMPKEY _for_rel ] ].

:end :instance.


; <<>>

:begin :instance.

apology_n1 := intr_noun_word_le &
  [ STEM < "apology" >,
    SYNSEM.LOCAL.KEYS.KEY _apology_rel ].

:end :instance.


; <<>>

:begin :instance.

apparently_adv1 := vp_adv_pre_word_le &
  [ STEM < "apparently" >,
    SYNSEM.LOCAL.KEYS.KEY _apparently_rel ].

:end :instance.


; <<>>

:begin :instance.

apparently_adv2 := s_adv_pre_word_le &
  [ STEM < "apparently" >,
    SYNSEM.LOCAL.KEYS.KEY _apparently_rel ].

:end :instance.


; <<>>

:begin :instance.

appeal_v1 := mv_oeq_pp_inf_le &
  [ STEM < "appeal" >,
    SYNSEM.LOCAL.KEYS.KEY _appeal_v_rel ].

:end :instance.


; <<>>

:begin :instance.

appear_v1 := mv_pp_inf_ssr_le &
  [ STEM < "appear" >,
    SYNSEM.LOCAL.KEYS.KEY _appear_rel ].

:end :instance.


; <<>>

:begin :instance.

appear_v2 := mv_prdp_pp_ssr_le &
  [ STEM < "appear" >,
    SYNSEM.LOCAL [ CAT.VAL [ SUBJ < [ LOCAL.CONT nom-obj ] >,
			     COMPS.FIRST.LOCAL.CAT.HEAD adj ],
		   KEYS.KEY _appear_rel ] ].

:end :instance.


; <<>>

:begin :instance.

appearance_n1 := intr_noun_word_le &
  [ STEM < "appearance" >,
    SYNSEM.LOCAL.KEYS.KEY _appearance_rel ].

:end :instance.


; <<>>

:begin :instance.

applicant_n1 := intr_noun_word_le &
  [ STEM < "applicant" >,
    SYNSEM.LOCAL.KEYS.KEY _applicant_rel ].

:end :instance.


; <<>>

:begin :instance.

application_n1 := intr_noun_word_le &
  [ STEM < "application" >,
    SYNSEM.LOCAL.KEYS.KEY _application_rel ].

:end :instance.


; <<>>

:begin :instance.

applied_a1 := intrans_adj_le &
  [ STEM < "applied" >,
    SYNSEM.LOCAL.KEYS.KEY _applied_rel ].

:end :instance.


; <<>>

:begin :instance.

apply_to_v1 := mv_double_pp*_le &
  [ STEM < "apply" >,
    SYNSEM.LOCAL.KEYS [ KEY _apply_to_rel,
			--COMPKEY _to_rel,
			--OCOMPKEY _for_rel ] ].

:end :instance.


; <<>>

:begin :instance.

apply_v1 := mv_prep*_trans_le &
  [ STEM < "apply" >,
    SYNSEM.LOCAL.KEYS.KEY _apply_rel ].

:end :instance.


; <<>>

:begin :instance.

appoint_v1 := mv_np_trans_le &
  [ STEM < "appoint" >,
    SYNSEM.LOCAL.KEYS.KEY _appoint_rel ].

:end :instance.


; <<>>

:begin :instance.

appointment_n1 := intr_noun_word_le &
  [ STEM < "appointment" >,
    SYNSEM.LOCAL.KEYS.KEY _appointment_rel ].

:end :instance.


; <<>>

:begin :instance.

appreciate_v1 := mv_np_trans_le &
  [ STEM < "appreciate" >,
    SYNSEM.LOCAL.KEYS.KEY _appreciate_rel ].

:end :instance.


; <<>>

:begin :instance.

approach_n1 := intr_noun_word_le &
  [ STEM < "approach" >,
    SYNSEM.LOCAL.KEYS.KEY _approach_n_rel ].

:end :instance.


; <<>>

:begin :instance.

approach_v1 := mv_np*_trans_le &
  [ STEM < "approach" >,
    SYNSEM.LOCAL.KEYS.KEY _approach_v_rel ].

:end :instance.


; <<>>

:begin :instance.

appropriate_a1 := intrans_adj_le &
  [ STEM < "appropriate" >,
    SYNSEM.LOCAL.KEYS.KEY _appropriate_rel ].

:end :instance.


; <<>>

:begin :instance.

approve_of_v1 := mv_empty_prep_intrans_le &
  [ STEM < "approve" >,
    SYNSEM.LOCAL.KEYS [ KEY _approve_of_rel,
			--COMPKEY _of_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

approve_v1 := mv_np_trans_le &
  [ STEM < "approve" >,
    SYNSEM.LOCAL.KEYS.KEY _approve_rel ].

:end :instance.


; <<>>

:begin :instance.

approximately := degree_spec_le &
  [ STEM < "approximately" >,
    SYNSEM.LOCAL.KEYS.KEY _approximately_rel ].

:end :instance.


; <<>>

:begin :instance.

april := month_word_le &
  [ STEM < "april" >,
    SYNSEM.LOCAL.KEYS.KEY.MONTH 'apr ].

:end :instance.


; <<>>

:begin :instance.

april_2 := month_year_word_le &
  [ STEM < "april" >,
    SYNSEM.LOCAL.KEYS.KEY.MONTH 'apr ].

:end :instance.


; <<>>

:begin :instance.

arbitrary_a1 := intrans_adj_le &
  [ STEM < "arbitrary" >,
    SYNSEM.LOCAL.KEYS.KEY _arbitrary_rel ].

:end :instance.


; <<>>

:begin :instance.

be_c_are := be_c_are_le &
  [ STEM < "are" > ].

:end :instance.


; <<>>

:begin :instance.

be_id_are := be_id_are_le &
  [ STEM < "are" > ].

:end :instance.


; <<>>

:begin :instance.

be_th_cop_are := be_th_cop_are_le &
  [ STEM < "are" > ].

:end :instance.


; <<>>

:begin :instance.

area_n1 := intr_noun_word_le &
  [ STEM < "area" >,
    SYNSEM.LOCAL.KEYS.KEY _area_rel ].

:end :instance.


; <<>>

:begin :instance.

be_c_am_neg_1 := be_c_am_neg_le &
  [ STEM < "aren't" > ].

:end :instance.


; <<>>
; MULTIKEY < "aren" >

:begin :instance.

be_c_am_neg_2 := be_c_am_neg_mle &
  [ STEM < "aren", "t" > ].

:end :instance.


; <<>>

:begin :instance.

be_c_are_neg_1 := be_c_are_neg_le &
  [ STEM < "aren't" > ].

:end :instance.


; <<>>
; MULTIKEY < "aren" >

:begin :instance.

be_c_are_neg_2 := be_c_are_neg_mle &
  [ STEM < "aren", "t" > ].

:end :instance.


; <<>>

:begin :instance.

be_id_am_neg_1 := be_id_am_neg_le &
  [ STEM < "aren't" > ].

:end :instance.


; <<>>
; MULTIKEY < "aren" >

:begin :instance.

be_id_am_neg_2 := be_id_am_neg_mle &
  [ STEM < "aren", "t" > ].

:end :instance.


; <<>>

:begin :instance.

be_id_are_neg_1 := be_id_are_neg_le &
  [ STEM < "aren't" > ].

:end :instance.


; <<>>
; MULTIKEY < "aren" >

:begin :instance.

be_id_are_neg_2 := be_id_are_neg_mle &
  [ STEM < "aren", "t" > ].

:end :instance.


; <<>>

:begin :instance.

be_th_cop_are_neg_1 := be_th_cop_are_neg_le &
  [ STEM < "aren't" > ].

:end :instance.


; <<>>
; MULTIKEY < "aren" >

:begin :instance.

be_th_cop_are_neg_2 := be_th_cop_are_neg_mle &
  [ STEM < "aren", "t" > ].

:end :instance.


; <<>>

:begin :instance.

argue_about_v1 := mv_empty_prep_intrans_le &
  [ STEM < "argue" >,
    SYNSEM.LOCAL.KEYS [ KEY _argue_about_rel,
			--COMPKEY _about_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

argue_v1 := mv_cp_prop*_non_trans_le &
  [ STEM < "argue" >,
    SYNSEM.LOCAL.KEYS.KEY _argue_rel ].

:end :instance.


; <<>>

:begin :instance.

arise_v1 := mv_unerg_le &
  [ STEM < "arise" >,
    SYNSEM.LOCAL.KEYS.KEY _arise_rel ].

:end :instance.


; <<>>

:begin :instance.

around_adv := int_vp_adv_post_word_le &
  [ STEM < "around" >,
    SYNSEM.LOCAL.KEYS.KEY _around_loc_rel_a ].

:end :instance.


; <<>>

:begin :instance.

around := prep_le &
  [ STEM < "around" >,
    SYNSEM.LOCAL.KEYS.KEY _around_rel_a ].

:end :instance.


; <<>>

:begin :instance.

around_temp := hour_prep_word_le &
  [ STEM < "around" >,
    SYNSEM.LOCAL.KEYS.KEY _around_temp_rel ].

:end :instance.


; <<>>

:begin :instance.

around_deg := degree_spec_le &
  [ STEM < "around" >,
    SYNSEM.LOCAL.KEYS.KEY _around_deg_rel ].

:end :instance.


; <<>>

:begin :instance.

arrange_v1 := mv_np_trans_le &
  [ STEM < "arrange" >,
    SYNSEM.LOCAL.KEYS.KEY _arrange_rel ].

:end :instance.


; <<>>

:begin :instance.

arrange_v2 := mv_empty_prep_intrans_le &
  [ STEM < "arrange" >,
    SYNSEM.LOCAL.KEYS [ KEY _arrange_for_rel,
			--COMPKEY _for_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

arrange_v3 := mv_cp_non_trans_le &
  [ STEM < "arrange" >,
    SYNSEM.LOCAL.KEYS.KEY _arrange_sit_rel ].

:end :instance.


; <<>>

:begin :instance.

arrange_for_v1 := mv_expl_pp_inf_seq_le &
  [ STEM < "arrange" >,
    SYNSEM.LOCAL.KEYS [ KEY _arrange_for_thm_rel,
			--OCOMPKEY _for_rel ] ].

:end :instance.


; <<>>

:begin :instance.

arrange_with_v1 := mv_pp_inf_seq_le &
  [ STEM < "arrange" >,
    SYNSEM.LOCAL.KEYS [ KEY _arrange_sit_rel,
			--COMPKEY _with_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

arrange_with_v2 := mv_expl_pp_inf_seq_le &
  [ STEM < "arrange" >,
    SYNSEM.LOCAL.KEYS [ KEY _arrange_sit_rel,
			--OCOMPKEY _with_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

arrangement_n1 := intr_noun_word_le &
  [ STEM < "arrangement" >,
    SYNSEM.LOCAL.KEYS.KEY _arrangement_rel ].

:end :instance.


; <<>>

:begin :instance.

arrival_n1 := intr_noun_word_le &
  [ STEM < "arrival" >,
    SYNSEM.LOCAL.KEYS.KEY _arrival_rel ].

:end :instance.


; <<>>

:begin :instance.

arrive_v1 := mv_unerg_le &
  [ STEM < "arrive" >,
    SYNSEM.LOCAL.KEYS.KEY _arrive_rel ].

:end :instance.


; <<>>

:begin :instance.

artificial_a1 := intrans_adj_le &
  [ STEM < "artificial" >,
    SYNSEM.LOCAL.KEYS.KEY _artificial_rel ].

:end :instance.


; <<>>

:begin :instance.

artless_a1 := intrans_adj_le &
  [ STEM < "artless" >,
    SYNSEM.LOCAL.KEYS.KEY _artless_rel ].

:end :instance.


; <<>>

:begin :instance.

as_deg := degree_spec_le &
  [ STEM < "as" >,
    SYNSEM.LOCAL.KEYS.KEY _as_deg_rel ].

:end :instance.


; <<>>

:begin :instance.

as_2 := reg_prep_le &
  [ STEM < "as" >,
    SYNSEM.LOCAL.KEYS.KEY _as_rel ].

:end :instance.


; <<>>
; MULTIKEY < "follows" >

:begin :instance.

as_follows_adv1 := vp_adv_post_word_mle2 &
  [ STEM < "as", "follows" >,
    SYNSEM.LOCAL.KEYS.KEY _as_follows_adv_rel ].

:end :instance.


; <<>>
; MULTIKEY < "if" >

:begin :instance.

as_if := subconj_mle2 &
  [ STEM < "as", "if" >,
    SYNSEM.LOCAL.KEYS.KEY _as_if_rel ].

:end :instance.


; <<>>
; MULTIKEY < "though" >

:begin :instance.

as_though := subconj_mle2 &
  [ STEM < "as", "though" >,
    SYNSEM.LOCAL.KEYS.KEY _as_though_rel ].

:end :instance.


; <<>>
; MULTIKEY < "happens" >

:begin :instance.

as_it_happens_adv1 := vp_adv_pre_word_3mle3 &
  [ STEM < "as", "it", "happens" >,
    SYNSEM.LOCAL.KEYS.KEY _as_it_happens_rel ].

:end :instance.


; <<>>
; MULTIKEY < "happens" >

:begin :instance.

as_it_happens_adv2 := s_adv_pre_word_3mle3 &
  [ STEM < "as", "it", "happens" >,
    SYNSEM.LOCAL.KEYS.KEY _as_it_happens_rel ].

:end :instance.


; <<>>
; MULTIKEY < "as" >

:begin :instance.

as_of := prep_idiom_mle1 &
  [ STEM < "as", "of" >,
    SYNSEM [ LOCAL.KEYS.KEY _as_of_rel ] ].

:end :instance.


; <<>>
; MULTIKEY < "long" >

:begin :instance.

as_long_as_subord := subconj_3mle2 &
  [ STEM < "as", "long", "as" >,
    SYNSEM.LOCAL.KEYS.KEY _as_long_as_rel ].

:end :instance.


; <<>>

:begin :instance.

as_subord := subconj_le &
  [ STEM < "as" >,
    SYNSEM.LOCAL.KEYS.KEY _as_subord_rel ].

:end :instance.


; <<>>
; MULTIKEY < "far" >

:begin :instance.

as_far_as_subord := subconj_3mle2 &
  [ STEM < "as", "far", "as" >,
    SYNSEM.LOCAL.KEYS.KEY _as_far_as_rel ].

:end :instance.


; <<>>
; MULTIKEY < "soon" >

:begin :instance.

as_soon_as_subord := subconj_3mle2 &
  [ STEM < "as", "soon", "as" >,
    SYNSEM.LOCAL.KEYS.KEY _as_soon_as_d_rel ].

:end :instance.


; <<>>
; MULTIKEY < "possible" >

:begin :instance.

as_soon_as_possible := pp_mle4 &
  [ STEM < "as", "soon", "as", "possible" >,
    SYNSEM.LOCAL.KEYS.KEY _as_soon_as_possible_rel ].

:end :instance.


; <<>>
; MULTIKEY < "well" >

:begin :instance.

as_well_as_conj_1 := coord_c_3mle2 &
  [ STEM < "as", "well", "as" >,
    SYNSEM.LOCAL [ CONJ complex-conj & [ CHEAD.LEFT < cnil, cnil > ],
		   CONT.LISZT <! _as_well_as_rel !>,
                   AGR.PNG png & [ PN 3pl ] ] ].

:end :instance.


; <<>>
; MULTIKEY < "well" >

:begin :instance.

as_well_as_conj_2 := coord_c_3mle2 &
  [ STEM < "as", "well", "as" >,
    SYNSEM.LOCAL [ CONJ complex-conj & [ CHEAD.LEFT < both > ],
                   CONT.LISZT <! _as_well_as_rel !>,
                   AGR.PNG png & [ PN 3pl ] ] ].
:end :instance.


; <<>>
; MULTIKEY < "well" >

:begin :instance.

as_well := int_vp_adv_post_word_mle2 &
  [ STEM < "as", "well" >,
    SYNSEM.LOCAL.KEYS.KEY _as_well_rel ].

:end :instance.


; <<>>
; MULTIKEY < "as" >

:begin :instance.

as_for_p := prep_mle1 &
  [ STEM < "as", "for" >,
    SYNSEM.LOCAL.KEYS.KEY _as_for_rel ].

:end :instance.


; <<>>
; MULTIKEY < "another" >

:begin :instance.

ascension_day := holiday_word_mle1 &
  [ STEM < "ascension", "day" >,
    SYNSEM.LOCAL.KEYS.KEY.DAY 'ascension_day ].

:end :instance.


; <<>>
; MULTIKEY < "ash" >

:begin :instance.

ash_wednesday := holiday_word_mle1 &
  [ STEM < "ash", "wednesday" >,
    SYNSEM.LOCAL.KEYS.KEY.DAY 'ash_wednesday ].

:end :instance.


; <<>>

:begin :instance.

aside_adv := pp_le &
  [ STEM < "aside" >,
    SYNSEM.LOCAL.KEYS.KEY _aside_rel_a ].

:end :instance.


; <<>>
; MULTIKEY < "aside" >

:begin :instance.

aside_from := prep_mle1 &
  [ STEM < "aside", "from" >,
    SYNSEM.LOCAL.KEYS.KEY _aside_from_rel ].

:end :instance.


; <<>>

:begin :instance.

ask_about_v1 := mv_np*_prep_trans_le &
  [ STEM < "ask" >,
    SYNSEM.LOCAL.KEYS [ KEY _ask_about_rel,
			--OCOMPKEY _about_rel ] ].

:end :instance.


; <<>>

:begin :instance.

acquaint_with_v1 := mv_np*_prep_trans_le &
  [ STEM < "acquaint" >,
    SYNSEM.LOCAL.KEYS [ KEY _acquaint_rel,
			--OCOMPKEY _with_rel ] ].

:end :instance.


; <<>>

:begin :instance.

ask_for_v1 := mv_empty_prep_trans*_le &
  [ STEM < "ask" >,
    SYNSEM.LOCAL.KEYS [ KEY _ask_for_rel,
			--OCOMPKEY _for_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

ask_v1 := mv_ditrans*_only_le &
  [ STEM < "ask" >,
    SYNSEM.LOCAL.KEYS.KEY _ask3_rel ].

:end :instance.


; <<>>

:begin :instance.

ask_v2 := mv_obj_equi_le &
  [ STEM < "ask" >,
    SYNSEM.LOCAL.KEYS.KEY _ask2_rel ].

:end :instance.


; <<>>

:begin :instance.

ask_v3 := mv_np_trans_cp_ques_le &
  [ STEM < "ask" >,
    SYNSEM.LOCAL.KEYS.KEY _ask2_rel ].

:end :instance.


; <<>>

:begin :instance.

asleep_a1 := pred_intrans_adj_le &
  [ STEM < "asleep" >,
    SYNSEM.LOCAL.KEYS.KEY _asleep_rel ].

:end :instance.


; <<>>

:begin :instance.

assemble_v1 := mv_np_trans_le &
  [ STEM < "assemble" >,
    SYNSEM.LOCAL.KEYS.KEY _assemble_rel ].

:end :instance.


; <<>>

:begin :instance.

assess_v1 := mv_np_trans_le &
  [ STEM < "assess" >,
    SYNSEM.LOCAL.KEYS.KEY _assess_rel ].

:end :instance.


; <<>>

:begin :instance.

assistance_n1 := massn_le &
  [ STEM < "assistance" >,
    SYNSEM.LOCAL.KEYS.KEY _assistance_rel ].

:end :instance.


; <<>>

:begin :instance.

associate_with_v1 := mv_empty_prep_trans_le &
  [ STEM < "associate" >,
    SYNSEM.LOCAL.KEYS [ KEY _associate_rel,
			--OCOMPKEY _with_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

assume_v1 := mv_cp_prop_non_trans_le &
  [ STEM < "assume" >,
    SYNSEM.LOCAL.KEYS.KEY _assume_rel ].

:end :instance.


; <<>>
; MULTIKEY < "assumption" >

:begin :instance.

assumption_day := holiday_word_mle1 &
  [ STEM < "assumption", "day" >,
    SYNSEM.LOCAL.KEYS.KEY.DAY 'assumption_day ].

:end :instance.


; <<>>

:begin :instance.

assumption_n1 := intr_noun_word_le &
  [ STEM < "assumption" >,
    SYNSEM.LOCAL.KEYS.KEY _assumption_rel ].

:end :instance.


; <<>>

:begin :instance.

assure_v1 := mv_ditrans*_only_le &
  [ STEM < "assure" >,
    SYNSEM.LOCAL.KEYS.KEY _assure_rel ].

:end :instance.


; <<>>

:begin :instance.

asterisk_n1 := intr_noun_word_le &
  [ STEM < "asterisk" >,
    SYNSEM.LOCAL.KEYS.KEY _asterisk_rel ].

:end :instance.


; <<>>

:begin :instance.

astray_adv := pp_le &
  [ STEM < "astray" >,
    SYNSEM.LOCAL.KEYS.KEY _astray_rel ].

:end :instance.


; <<>>
; MULTIKEY < "at" >

:begin :instance.

at_all_adv1 := vp_adv_post_word_mle1 &
  [ STEM < "at", "all" >,
    SYNSEM.LOCAL.KEYS.KEY _at_all_rel ].

:end :instance.


; <<>>
; MULTIKEY < "least" >

:begin :instance.

at_least_deg := degree_spec_mle2 &
  [ STEM < "at", "least" >,
    SYNSEM.LOCAL.KEYS.KEY _at_least_rel ].

:end :instance.


; <<>>
; MULTIKEY < "least" >

:begin :instance.

at_least_adv := vp_adv_post_word_mle2 &
  [ STEM < "at", "least" >,
    SYNSEM.LOCAL.KEYS.KEY _at_least_scopal_mod_rel ].

:end :instance.


; <<>>

:begin :instance.

at := reg_prep_le &
  [ STEM < "at" >,
    SYNSEM.LOCAL.KEYS.KEY _at_rel_a ].

:end :instance.


; <<>>

:begin :instance.

at_temp := temp_prep_le &
  [ STEM < "at" >,
    SYNSEM.LOCAL.KEYS [ KEY _at_temp_rel,
			--COMPKEY hour_rel ] ].

:end :instance.


; <<>>
; MULTIKEY < "most" >

:begin :instance.

at_the_most_deg := degree_spec_3mle3 &
  [ STEM < "at", "the", "most" >,
    SYNSEM.LOCAL.KEYS.KEY _at_the_most_deg_rel ].

:end :instance.


; <<>>
; MULTIKEY < "worst" >

:begin :instance.

at_worst_deg := degree_spec_mle2 &
  [ STEM < "at", "worst" >,
    SYNSEM.LOCAL.KEYS.KEY _at_worst_rel ].

:end :instance.


; <<>>
; MULTIKEY < "most" >

:begin :instance.

at_most := vp_adv_post_word_mle2 &
  [ STEM < "at", "most" >,
    SYNSEM.LOCAL.KEYS.KEY _at_most_scop_rel ].

:end :instance.


; <<>>
; MULTIKEY < "most" >

:begin :instance.

at_most_deg := degree_spec_mle2 &
  [ STEM < "at", "most" >,
    SYNSEM.LOCAL.KEYS.KEY _at_most_grad_rel ].

:end :instance.


; <<>>
; MULTIKEY < "earliest" >

:begin :instance.

at_the_earliest := vp_adv_post_word_3mle3 &
  [ STEM < "at", "the", "earliest" >,
    SYNSEM.LOCAL.KEYS.KEY _at_the_earliest_rel ].

:end :instance.


; <<>>
; MULTIKEY < "latest" >

:begin :instance.

at_the_latest := vp_adv_post_word_3mle3 &
  [ STEM < "at", "the", "latest" >,
    SYNSEM.LOCAL.KEYS.KEY _at_the_latest_rel ].

:end :instance.


; <<>>

:begin :instance.

atmosphere_n1 := intr_noun_word_le &
  [ STEM < "atmosphere" >,
    SYNSEM.LOCAL.KEYS.KEY _atmosphere_rel ].

:end :instance.


; <<>>

:begin :instance.

attempt_n1 := intr_noun_word_le &
  [ STEM < "attempt" >,
    SYNSEM.LOCAL.KEYS.KEY _attempt_rel ].

:end :instance.


; <<>>

:begin :instance.

attend_v1 := mv_np*_trans_le &
  [ STEM < "attend" >,
    SYNSEM.LOCAL.KEYS.KEY _attend_rel ].

:end :instance.


; <<>>

:begin :instance.

attendance_n1 := massn_le &
  [ STEM < "attendance" >,
    SYNSEM.LOCAL.KEYS.KEY _attendance_rel ].

:end :instance.


; <<>>

:begin :instance.

audible_a1 := intrans_adj_le &
  [ STEM < "audible" >,
    SYNSEM.LOCAL.KEYS.KEY _audible_rel ].

:end :instance.


; <<>>

:begin :instance.

Augsburg_n1 := proper_le &
  [ STEM < "augsburg" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Augsburg ].

:end :instance.


; <<>>

:begin :instance.

august := month_word_le &
  [ STEM < "august" >,
    SYNSEM.LOCAL.KEYS.KEY.MONTH 'aug ].

:end :instance.


; <<>>

:begin :instance.

august_2 := month_year_word_le &
  [ STEM < "august" >,
    SYNSEM.LOCAL.KEYS.KEY.MONTH 'aug ].

:end :instance.


; <<>>

:begin :instance.

authentic_a1 := intrans_adj_le &
  [ STEM < "authentic" >,
    SYNSEM.LOCAL.KEYS.KEY _authentic_rel ].

:end :instance.


; <<>>

:begin :instance.

auto_n1 := intr_noun_word_le &
  [ STEM < "auto" >,
    SYNSEM.LOCAL.KEYS.KEY _automobile_rel ].

:end :instance.


; <<>>

:begin :instance.

automobile_n1 := intr_noun_word_le &
  [ STEM < "automobile" >,
    SYNSEM.LOCAL.KEYS.KEY _automobile_rel ].

:end :instance.


; <<>>

:begin :instance.

autumn_season := season_word_le &
  [ STEM < "autumn" >,
    SYNSEM.LOCAL.KEYS.KEY.SEASON 'fall ].

:end :instance.


; <<>>

:begin :instance.

autumn_n1 := intr_temp_noun_le &
  [ STEM < "autumn" >,
    SYNSEM.LOCAL.KEYS.KEY season_rel & [ SEASON 'fall ] ].

:end :instance.


; <<>>

:begin :instance.

available_a1 := intrans_adj_le &
  [ STEM < "available" >,
    SYNSEM.LOCAL.KEYS.KEY _available_rel ].

:end :instance.


; <<>>

:begin :instance.

avoid_v1 := mv_np_trans_le &
  [ STEM < "avoid" >,
    SYNSEM.LOCAL.KEYS.KEY _avoid_rel ].

:end :instance.


; <<>>

:begin :instance.

awake_a1 := pred_intrans_adj_le &
  [ STEM < "awake" >,
    SYNSEM.LOCAL.KEYS.KEY _awake_rel ].

:end :instance.


; <<>>

:begin :instance.

aware_a1 := intrans_adj_le &
  [ STEM < "aware" >,
    SYNSEM.LOCAL.KEYS.KEY _aware_rel ].

:end :instance.


; <<>>

:begin :instance.

away_adv := pp_le &
  [ STEM < "away" >,
    SYNSEM.LOCAL.KEYS.KEY _away_adv_rel_a ].

:end :instance.


; <<>>

:begin :instance.

awfully_deg := degree_spec_le &
  [ STEM < "awfully" >,
    SYNSEM.LOCAL.KEYS.KEY _awfully_rel ].

:end :instance.


; <<>>

:begin :instance.

awkward_a1 := intrans_adj_le &
  [ STEM < "awkward" >,
    SYNSEM.LOCAL.KEYS.KEY _awkward_rel ].

:end :instance.


; <<>>

:begin :instance.

awkwardly := adv_word_le &
  [ STEM < "awkwardly" >,
    SYNSEM.LOCAL.KEYS.KEY _awkwardly_rel ].

:end :instance.


; <<>>

:begin :instance.

babysit_v1 := mv_np_trans_le &
  [ STEM < "babysit" >,
    SYNSEM.LOCAL.KEYS.KEY _babysit_rel ].

:end :instance.


; <<>>

:begin :instance.

back_vp_adv := pp_le &
  [ STEM < "back" >,
    SYNSEM.LOCAL.KEYS.KEY _back_adv_rel_a ].

:end :instance.


; <<>>

:begin :instance.

back_pp_adv := int_pp_adv_word_le &
  [ STEM < "back" >,
    SYNSEM.LOCAL.KEYS.KEY _back_adv_rel_a ].

:end :instance.


; <<>>

:begin :instance.

backward_adv1 := pp_le &
  [ STEM < "backward" >,
    SYNSEM.LOCAL.KEYS.KEY _backward_rel ].

:end :instance.


; <<>>

:begin :instance.

backwards_adv1 := pp_le &
  [ STEM < "backwards" >,
    SYNSEM.LOCAL.KEYS.KEY _backwards_rel ].

:end :instance.


; <<>>

:begin :instance.

bad_a1 := intrans_adj_le &
  [ STEM < "bad" >,
    SYNSEM.LOCAL.KEYS.KEY _bad_rel ].

:end :instance.


; <<>>

:begin :instance.

badly_adv1 := vp_adv_post_word_le &
  [ STEM < "badly" >,
    SYNSEM.LOCAL.KEYS.KEY _badly_rel ].

:end :instance.


; <<>>

:begin :instance.

balance_n1 := intr_noun_word_le &
  [ STEM < "balance" >,
    SYNSEM.LOCAL.KEYS.KEY _balance_rel ].

:end :instance.


; <<>>

:begin :instance.

bar_n1 := intr_noun_word_le &
  [ STEM < "bar" >,
    SYNSEM.LOCAL.KEYS.KEY _bar_rel ].

:end :instance.


; <<>>

:begin :instance.

bare_a1 := intrans_adj_le &
  [ STEM < "bare" >,
    SYNSEM.LOCAL.KEYS.KEY _bare_adj_rel ].

:end :instance.


; <<>>

:begin :instance.

barely_adv1 := vp_adv_post_word_le &
  [ STEM < "barely" >,
    SYNSEM.LOCAL.KEYS.KEY _barely_rel ].

:end :instance.


; <<>>

:begin :instance.

barely_deg := degree_spec_le &
  [ STEM < "barely" >,
    SYNSEM.LOCAL.KEYS.KEY _barely_deg_rel ].

:end :instance.


; <<>>

:begin :instance.

bargain_over_v1 := mv_empty_prep_intrans_le &
  [ STEM < "bargain" >,
    SYNSEM.LOCAL.KEYS [ KEY _bargain_over_rel,
			--COMPKEY _over_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

bargain_v1 := mv_np_trans_le &
  [ STEM < "bargain" >,
    SYNSEM.LOCAL.KEYS.KEY _bargain_rel ].

:end :instance.


; <<>>

:begin :instance.

bargain_v2 := mv_cp_non_trans_le &
  [ STEM < "bargain" >,
    SYNSEM.LOCAL.KEYS.KEY _bargain_h_rel ].

:end :instance.


; <<>>

:begin :instance.

base_n1 := intr_noun_word_le &
  [ STEM < "base" >,
    SYNSEM.LOCAL.KEYS.KEY _base_rel ].

:end :instance.


; <<>>

:begin :instance.

base_v1 := mv_prep_trans_le &
  [ STEM < "base" >,
    SYNSEM.LOCAL.KEYS [ KEY _base_on_rel,
			--OCOMPKEY _on_rel ] ].

:end :instance.


; <<>>

:begin :instance.

basement_n1 := intr_noun_word_le &
  [ STEM < "basement" >,
    SYNSEM.LOCAL.KEYS.KEY _basement_rel ].

:end :instance.


; <<>>

:begin :instance.

basically_adv1 := vp_adv_pre_word_le &
  [ STEM < "basically" >,
    SYNSEM.LOCAL.KEYS.KEY _basically_rel ].

:end :instance.

; <<>>

:begin :instance.

basically_adv2 := s_adv_pre_word_le &
  [ STEM < "basically" >,
    SYNSEM.LOCAL.KEYS.KEY _basically_rel ].

:end :instance.

; <<>>

:begin :instance.

basically_deg := degree_spec_le &
  [ STEM < "basically" >,
    SYNSEM.LOCAL.KEYS.KEY _basically_deg_rel ].

:end :instance.


; <<>>

:begin :instance.

basis1 := intr_noun_word_le &
  [ STEM < "basis" >,
    SYNSEM.LOCAL.KEYS.KEY _basis_rel ].

:end :instance.


; <<>>

:begin :instance.

battle_against_v1 := mv_empty_prep_intrans_le &
  [ STEM < "battle" >,
    SYNSEM.LOCAL.KEYS [ KEY _battle_against_rel,
			--COMPKEY _against_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

battle_v1 := mv_np*_trans_le &
  [ STEM < "battle" >,
    SYNSEM.LOCAL.KEYS.KEY _battle_rel ].

:end :instance.


; <<>>

:begin :instance.

bavarian_a1 := intrans_adj_le &
  [ STEM < "bavarian" >,
    SYNSEM.LOCAL.KEYS.KEY _bavarian_rel ].

:end :instance.


; <<>>

:begin :instance.

be_c_be := be_c_be_le &
  [ STEM < "be" > ].

:end :instance.


; <<>>

:begin :instance.

be_id_be := be_id_be_le &
  [ STEM < "be" > ].

:end :instance.


; <<>>

:begin :instance.

be_th_cop_be := be_th_cop_be_le &
  [ STEM < "be" > ].

:end :instance.


; <<>>

:begin :instance.

beat_v1 := mv_np_trans_le &
  [ STEM < "beat" >,
    SYNSEM.LOCAL.KEYS.KEY _beat_rel ].

:end :instance.


; <<>>

:begin :instance.

beautiful_a1 := intrans_adj_le &
  [ STEM < "beautiful" >,
    SYNSEM.LOCAL.KEYS.KEY _beautiful_adj_rel ].

:end :instance.


; <<>>

:begin :instance.

beautifully := vp_adv_post_word_le &
  [ STEM < "beautifully" >,
    SYNSEM.LOCAL.KEYS.KEY _beautifully_rel ].

:end :instance.


; <<>>

:begin :instance.

because := subconj_le &
  [ STEM < "because" >,
    SYNSEM.LOCAL.KEYS.KEY _because_rel ].

:end :instance.


; <<>>
; MULTIKEY < "because" >

:begin :instance.

because_of_p := prep_mle1 &
  [ STEM < "because", "of" >,
    SYNSEM.LOCAL.KEYS.KEY _because_of_rel ].

:end :instance.


; <<>>

:begin :instance.

become_v1 := mv_prd_ssr_le &
  [ STEM < "become" >,
    SYNSEM.LOCAL [ CAT.VAL [ SUBJ < [ LOCAL.CONT nom-obj ] >,
			     COMPS < [ LOCAL.CAT.HEAD adj ] > ],
		   KEYS.KEY _become_rel ] ].

:end :instance.


; <<>>

:begin :instance.

become_v2 := mv_np_non_trans_le &
  [ STEM < "become" >,
    SYNSEM.LOCAL.KEYS.KEY _become_id_rel ].

:end :instance.


; <<>>

:begin :instance.

be_c_been := be_c_been_le &
  [ STEM < "been" > ].

:end :instance.


; <<>>

:begin :instance.

be_id_been := be_id_been_le &
  [ STEM < "been" > ].

:end :instance.


; <<>>

:begin :instance.

be_th_cop_been := be_th_cop_been_le &
  [ STEM < "been" > ].

:end :instance.


; <<>>

:begin :instance.

beer_n1 := intr_noun_word_le &
  [ STEM < "beer" >,
    SYNSEM.LOCAL.KEYS.KEY _beer_rel ].

:end :instance.


; <<>>

:begin :instance.

beer_n2 := massn_le &
  [ STEM < "beer" >,
    SYNSEM.LOCAL.KEYS.KEY _beer_rel ].

:end :instance.


; <<>>

:begin :instance.

beetle_n1 := intr_noun_word_le &
  [ STEM < "beetle" >,
    SYNSEM.LOCAL.KEYS.KEY _beetle_rel ].

:end :instance.


; <<>>

:begin :instance.

before1 := before_prep_le &
  [ STEM < "before" >,
    SYNSEM.LOCAL.KEYS.KEY _before_prepx_rel ].

:end :instance.


; <<>>

:begin :instance.

before2 := prep_cp_le &
  [ STEM < "before" >,
    SYNSEM.LOCAL.KEYS.KEY _before_prepx_rel ].

:end :instance.


; <<>>

:begin :instance.

before3 := prep_optcomp_le &
  [ STEM < "before" >,
    SYNSEM.LOCAL.KEYS.KEY _before_prepx_rel ].

:end :instance.


; <<>>

:begin :instance.

before_adv1 := int_vp_adv_post_word_le &
  [ STEM < "before" >,
    SYNSEM.LOCAL.KEYS.KEY _before_i_rel ].

:end :instance.


; <<>>

:begin :instance.

beforehand_adv1 := pp_le &
  [ STEM < "beforehand" >,
    SYNSEM.LOCAL.KEYS.KEY _beforehand_rel ].

:end :instance.


; <<>>

:begin :instance.

begin_v1 := mv_unacc_le &
  [ STEM < "begin" >,
    SYNSEM.LOCAL.KEYS.KEY _begin_und_rel ].

:end :instance.


; <<>>

:begin :instance.

begin_v2 := mv_np*_trans_le &
  [ STEM < "begin" >,
    SYNSEM.LOCAL.KEYS.KEY _begin_rel ].

:end :instance.


; <<>>

:begin :instance.

begin_v3 := mv_subj_equi_le &
  [ STEM < "begin" >,
    SYNSEM.LOCAL.KEYS.KEY _begin2_rel ].

:end :instance.


; <<>>

:begin :instance.

begin_v4 := mv_subj_equi_prp_le &
  [ STEM < "begin" >,
    SYNSEM.LOCAL.KEYS.KEY _begin2_rel ].

:end :instance.


; <<>>

:begin :instance.

beginning1 := noun_ppof_word_le &
  [ STEM < "beginning" >,
    SYNSEM.LOCAL.KEYS.KEY _beginning_rel ].

:end :instance.


; <<>>

:begin :instance.

begrudge1 := mv_ditrans_only_le &
  [ STEM < "begrudge" >,
    SYNSEM.LOCAL.KEYS.KEY _begrudge_rel ].

:end :instance.


; <<>>

:begin :instance.

behind := reg_prep_le &
  [ STEM < "behind" >,
    SYNSEM.LOCAL.KEYS.KEY _behind_rel_a ].

:end :instance.


; <<>>

:begin :instance.

be_c_being := be_c_being_le &
  [ STEM < "being" > ].

:end :instance.


; <<>>

:begin :instance.

be_id_being := be_id_being_le &
  [ STEM < "being" > ].

:end :instance.


; <<>>

:begin :instance.

be_th_cop_being := be_th_cop_being_le &
  [ STEM < "being" > ].

:end :instance.


; <<>>

:begin :instance.

belay_v1 := mv_np_trans_le &
  [ STEM < "belay" >,
    SYNSEM.LOCAL.KEYS.KEY _belay_rel ].

:end :instance.


; <<>>

:begin :instance.

belief_n1 := noun_cpcomp_word_le &
  [ STEM < "belief" >,
    SYNSEM.LOCAL.KEYS.KEY _belief_rel ]. 

:end :instance.


; <<>>

:begin :instance.

belief_n2 := noun_ppcomp_word_le &
  [ STEM < "belief" >,
    SYNSEM.LOCAL.KEYS [ KEY _belief_in_rel,
			--COMPKEY _in_rel ] ].

:end :instance.


; <<>>

:begin :instance.

believe_in_v1 := mv_empty_prep_intrans_le &
  [ STEM < "believe" >,
    SYNSEM.LOCAL.KEYS [ KEY _believe_in_rel,
			--COMPKEY _in_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

believe_v1 := mv_np_trans_le &
  [ STEM < "believe" >,
    SYNSEM.LOCAL.KEYS.KEY _believe_rel ].

:end :instance.


; <<>>

:begin :instance.

believe_v2 := mv_unerg_le &
  [ STEM < "believe" >,
    SYNSEM.LOCAL.KEYS.KEY _believe_rel ].

:end :instance.


; <<>>

:begin :instance.

believe_v3 := mv_cp_non_trans_le &
  [ STEM < "believe" >,
    SYNSEM.LOCAL.KEYS.KEY _believe_h_rel ].

:end :instance.


; <<>>

:begin :instance.

belong_v1 := mv_empty_prep_intrans_le &
  [ STEM < "belong" >,
    SYNSEM.LOCAL.KEYS [ KEY _belong_to_rel,
			--COMPKEY _to_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

below := reg_prep_le &
  [ STEM < "below" >,
    SYNSEM.LOCAL.KEYS.KEY _below_rel ].

:end :instance.


; <<>>

:begin :instance.

benefit_v1 := mv_np_trans_le &
  [ STEM < "benefit" >,
    SYNSEM.LOCAL.KEYS.KEY _benefit_v_rel ].

:end :instance.

; <<>>

:begin :instance.

benefit_n1 := intr_noun_word_le &
  [ STEM < "benefit" >,
    SYNSEM.LOCAL.KEYS.KEY _benefit_n_rel ].

:end :instance.


; <<>>

:begin :instance.

Berlin_n1 := proper_le &
  [ STEM < "berlin" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Berlin ].

:end :instance.


; <<>>

:begin :instance.

beside := reg_prep_le &
  [ STEM < "beside" >,
    SYNSEM.LOCAL.KEYS.KEY _beside_rel ].

:end :instance.


; <<>>

:begin :instance.

besides_adv1 := adv_post_word_le &
  [ STEM < "besides" >,
    SYNSEM.LOCAL.KEYS.KEY _besides_adv_rel ].

:end :instance.


; <<>>

:begin :instance.

besides := prep_le &
  [ STEM < "besides" >,
    SYNSEM.LOCAL.KEYS.KEY _besides_rel ].

:end :instance.


; <<>>

:begin :instance.

best_a1 := superl_adj_le &
  [ STEM < "best" >,
    SYNSEM.LOCAL.KEYS.KEY _good_rel ].

:end :instance.


; <<>>

:begin :instance.

bet_v1 := mv_np_np_cp_le &
  [ STEM < "bet" >,
    SYNSEM.LOCAL.KEYS.KEY _bet_v_rel ].

:end :instance.


; <<>>

:begin :instance.

better_a1 := comp_adj_le &
  [ STEM < "better" >,
    SYNSEM.LOCAL.KEYS.KEY _good_rel ].

:end :instance.


; <<>>

:begin :instance.

between_temp := before_prep_le &
  [ STEM < "between" >,
    SYNSEM.LOCAL [ CAT.VAL.COMPS < [ LOCAL.CONT.INDEX.PNG png & 
							  [ PN 3pl* ] ], ... >,
		   KEYS.KEY _between_rel ] ].
:end :instance.


; <<>>

:begin :instance.

between := prep_le &
  [ STEM < "between" >,
    SYNSEM.LOCAL.KEYS.KEY _between_rel_a ].

:end :instance.


; <<>>

:begin :instance.

beyond := reg_prep_le &
  [ STEM < "beyond" >,
    SYNSEM.LOCAL.KEYS.KEY _beyond_rel ].

:end :instance.


; <<>>

:begin :instance.

Bielefeld_n1 := proper_le &
  [ STEM < "bielefeld" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Bielefeld ].

:end :instance.


; <<>>

:begin :instance.

big_a1 := intrans_adj_le &
  [ STEM < "big" >,
    SYNSEM.LOCAL.KEYS.KEY _big_rel ].

:end :instance.


; <<>>

:begin :instance.

bigger_a1 := comp_adj_le &
  [ STEM < "bigger" >,
    SYNSEM.LOCAL.KEYS.KEY _big_rel ].

:end :instance.


; <<>>

:begin :instance.

biggest := superl_adj_le &
  [ STEM < "biggest" >,
    SYNSEM.LOCAL.KEYS.KEY _big_rel ].

:end :instance.


; <<>>

:begin :instance.

Bill := proper_le &
  [ STEM < "bill" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'bill ].

:end :instance.


; <<>>

:begin :instance.

bind_v1 := mv_np_trans_le &
  [ STEM < "bind" >,
    SYNSEM.LOCAL.KEYS.KEY _bind_rel ].

:end :instance.


; <<>>

:begin :instance.

birthday_n1 := intr_noun_word_le &
  [ STEM < "birthday" >,
    SYNSEM.LOCAL.KEYS.KEY _birthday_rel ].

:end :instance.


; <<>>

:begin :instance.

bistro_n1 := intr_noun_word_le &
  [ STEM < "bistro" >,
    SYNSEM.LOCAL.KEYS.KEY _bistro_rel ].

:end :instance.


; <<>>

:begin :instance.

blame_for_v1 := mv_empty_prep_trans_le &
  [ STEM < "blame" >,
    SYNSEM.LOCAL.KEYS [ KEY _blame_rel,
			--OCOMPKEY _for_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

blank_a1 := intrans_adj_le &
  [ STEM < "blank" >,
    SYNSEM.LOCAL.KEYS.KEY _blank_rel ].

:end :instance.


; <<>>

:begin :instance.

block_n1 := intr_noun_word_le &
  [ STEM < "block" >,
    SYNSEM.LOCAL.KEYS.KEY _block_rel ].

:end :instance.


; <<>>

:begin :instance.

block_v1 := mv_np_trans_le &
  [ STEM < "block" >,
    SYNSEM.LOCAL.KEYS.KEY _block_v_rel ].

:end :instance.


; <<>>

:begin :instance.

block_off_v1 := mv_prep_particle_np_le &
  [ STEM < "block" >,
    SYNSEM.LOCAL.KEYS [ KEY _block_off_rel,
			--COMPKEY _off_rel_s ] ].

:end :instance.

; <<>>

:begin :instance.

Bob := proper_le &
  [ STEM < "bob" >,
    SYNSEM.LOCAL [ KEYS.KEY.NAMED 'bob,
		   AGR.PNG png & [ GEN masc* ] ] ].

:end :instance.


; <<>>

:begin :instance.

bobsled := mv_unerg_le &
  [ STEM < "bobsled" >,
    SYNSEM.LOCAL.KEYS.KEY _bobsled_rel ].

:end :instance.


; <<>>

:begin :instance.

Bochum_n1 := proper_le &
  [ STEM < "bochum" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Bochum ].

:end :instance.


; <<>>

:begin :instance.

Bonn_n1 := proper_le &
  [ STEM < "bonn" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Bonn ].

:end :instance.


; <<>>

:begin :instance.

book1 := intr_noun_word_le &
  [ STEM < "book" >,
    SYNSEM.LOCAL.KEYS.KEY _book_n_rel ].

:end :instance.


; <<>>

:begin :instance.

book_up_v1 := mv_prep_particle_np_le &
  [ STEM < "book" >,
    SYNSEM.LOCAL.KEYS [ KEY _book_up_rel,
			--COMPKEY _up_rel ] ].

:end :instance.


; <<>>

:begin :instance.

book_v1 := mv_ditrans_only_le &
  [ STEM < "book" >,
    SYNSEM.LOCAL.KEYS.KEY _book_v_rel ].

:end :instance.


; <<>>

:begin :instance.

bookcase_n1 := intr_noun_word_le &
  [ STEM < "bookcase" >,
    SYNSEM.LOCAL.KEYS.KEY _bookcase_rel ].

:end :instance.


; <<>>

:begin :instance.

booked_a1 := intrans_adj_le &
  [ STEM < "booked" >,
    SYNSEM.LOCAL.KEYS.KEY _booked_rel ].

:end :instance.


; <<>>

:begin :instance.

born_a1 := intrans_adj_le &
  [ STEM < "born" >,
    SYNSEM.LOCAL.KEYS.KEY _born_rel ].

:end :instance.


; <<>>

:begin :instance.

botanical_a1 := intrans_adj_le &
  [ STEM < "botanical" >,
    SYNSEM.LOCAL.KEYS.KEY _botanical_adj_rel ].

:end :instance.


; <<>>

:begin :instance.

both := pdet_pl_le &
  [ STEM < "both" >,
    SYNSEM.LOCAL.KEYS.KEY _both_rel ].

:end :instance.


; <<>>

:begin :instance.

both_conj := coord_a_le &
  [ STEM < "both" >,
    SYNSEM.LOCAL.CONJ both ].

:end :instance.


; <<>>

:begin :instance.

bother1 := mv_np_trans_le &
  [ STEM < "bother" >,
    SYNSEM.LOCAL.KEYS.KEY _bother_rel ].

:end :instance.


; <<>>

:begin :instance.

access_v1 := mv_np_trans_le &
  [ STEM < "access" >,
    SYNSEM.LOCAL.KEYS.KEY _access_v_rel ].

:end :instance.


; <<>>

:begin :instance.

boy_root := disc_adv_le &
  [ STEM < "boy" >,
    SYNSEM.LOCAL.KEYS.KEY excl_rel & [ EXCL 'boy ] ].

:end :instance.


; <<>>

:begin :instance.

branch_n1 := intr_noun_word_le &
  [ STEM < "branch" >,
    SYNSEM.LOCAL.KEYS.KEY _branch_rel ].

:end :instance.


; <<>>

:begin :instance.

Braunschweig_n1 := proper_le &
  [ STEM < "braunschweig" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Braunschweig ].

:end :instance.

; <<>>

:begin :instance.

brazilian_a1 := intrans_adj_le &
  [ STEM < "brazilian" >,
    SYNSEM.LOCAL.KEYS.KEY _brazilian_rel ].

:end :instance.


; <<>>

:begin :instance.

thai_a1 := intrans_adj_le &
  [ STEM < "thai" >,
    SYNSEM.LOCAL.KEYS.KEY _thai_rel ].

:end :instance.


; <<>>

:begin :instance.

mexican_a1 := intrans_adj_le &
  [ STEM < "mexican" >,
    SYNSEM.LOCAL.KEYS.KEY _mexican_rel ].

:end :instance.


; <<>>
; MULTIKEY < "latin" >

:begin :instance.

latin_american_a1 := intrans_adj_mle &
  [ STEM < "latin", "american" >,
    SYNSEM.LOCAL.KEYS.KEY _latin_american_rel ].

:end :instance.


; <<>>
; MULTIKEY < "west" >

:begin :instance.

west_german_a1 := intrans_adj_mle &
  [ STEM < "west", "german" >,
    SYNSEM.LOCAL.KEYS.KEY _west_german_rel ].

:end :instance.


; <<>>
; MULTIKEY < "south" >

:begin :instance.

south_american_a1 := intrans_adj_mle &
  [ STEM < "south", "american" >,
    SYNSEM.LOCAL.KEYS.KEY _south_american_rel ].

:end :instance.


; <<>>

:begin :instance.

break_n1 := intr_noun_word_le &
  [ STEM < "break" >,
    SYNSEM.LOCAL.KEYS.KEY _break_n_rel ].

:end :instance.


; <<>>

:begin :instance.

break_v1 := mv_np*_trans_le &
  [ STEM < "break" >,
    SYNSEM.LOCAL.KEYS.KEY _break_rel ].

:end :instance.


; <<>>

:begin :instance.

break_v2 := mv_unacc_le &
  [ STEM < "break" >,
    SYNSEM.LOCAL.KEYS.KEY _break_und_rel ].

:end :instance.


; <<>>

:begin :instance.

breakfast_time_n1 := mealtime_word_le &
  [ STEM < "breakfast" >,
    SYNSEM.LOCAL.KEYS.KEY _breakfast_time_rel ].

:end :instance.


; <<>>

:begin :instance.

breakfast_n1 := massn_le &
  [ STEM < "breakfast" >,
    SYNSEM.LOCAL.KEYS.KEY _breakfast_rel ].

:end :instance.


; <<>>

:begin :instance.

breakfast_n2 := intr_noun_word_le &
  [ STEM < "breakfast" >,
    SYNSEM.LOCAL.KEYS.KEY _breakfast_rel ].

:end :instance.


; <<>>

:begin :instance.

breakfast_v1 := mv_unerg_le &
  [ STEM < "breakfast" >,
    SYNSEM.LOCAL.KEYS.KEY _breakfast_v_rel ].

:end :instance.


; <<>>

:begin :instance.

breeze_n1 := intr_noun_word_le &
  [ STEM < "breeze" >,
    SYNSEM.LOCAL.KEYS.KEY _breeze_rel ].

:end :instance.


; <<>>

:begin :instance.

Brian := proper_le &
  [ STEM < "brian" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'brian ].

:end :instance.


; <<>>

:begin :instance.

brief_a1 := intrans_adj_le &
  [ STEM < "brief" >,
    SYNSEM.LOCAL.KEYS.KEY _brief_rel ].

:end :instance.


; <<>>

:begin :instance.

briefly_adv1 := vp_adv_word_le &
  [ STEM < "briefly" >,
    SYNSEM.LOCAL.KEYS.KEY _briefly_rel ].

:end :instance.


; <<>>

:begin :instance.

bring_forth_v1 := mv_particle_np_le &
  [ STEM < "bring" >,
    SYNSEM.LOCAL.KEYS [ KEY _bring_forth_rel,
			--COMPKEY _forth_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

bring_forward_v1 := mv_particle_np_le &
  [ STEM < "bring" >,
    SYNSEM.LOCAL.KEYS [ KEY _bring_forward_rel,
			--COMPKEY _forward_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

bring_off_v1 := mv_prep_particle_np_le &
  [ STEM < "bring" >,
    SYNSEM.LOCAL.KEYS [ KEY _bring_off_rel,
			--COMPKEY _off_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

bring_over_v1 := mv_prep_particle_np_le &
  [ STEM < "bring" >,
    SYNSEM.LOCAL.KEYS [ KEY _bring_over_rel,
			--COMPKEY _over_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

bring_to_v1 := mv_np_prep_particle_only_le &
  [ STEM < "bring" >,
    SYNSEM.LOCAL.KEYS [ KEY _bring_to_rel,
			--COMPKEY _to_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

bring_v1 := mv_prep*_trans_le &
  [ STEM < "bring" >,
    SYNSEM.LOCAL.KEYS [ KEY _bring_rel,
			--OCOMPKEY dir_rel ] ].

:end :instance.


; <<>>

:begin :instance.

bring_v2 := mv_ditrans_only_le &
  [ STEM < "bring" >,
    SYNSEM.LOCAL.KEYS.KEY _bring_rel ].

:end :instance.


; <<>>

:begin :instance.

Brown_n1 := proper_le &
  [ STEM < "brown" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Brown ].

:end :instance.


; <<>>

:begin :instance.

browne := proper_le &
  [ STEM < "browne" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'browne ].

:end :instance.


; <<>>

:begin :instance.

Brunswick_n1 := proper_le &
  [ STEM < "brunswick" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Brunswick ].

:end :instance.


; <<>>

:begin :instance.

Brussels_n1 := proper_le &
  [ STEM < "brussels" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Brussels ].

:end :instance.


; <<>>

:begin :instance.

building_n1 := intr_noun_word_le &
  [ STEM < "building" >,
    SYNSEM.LOCAL.KEYS.KEY _building_rel ].

:end :instance.


; <<>>

:begin :instance.

bumblebee_n1 := intr_noun_word_le &
  [ STEM < "bumblebee" >,
    SYNSEM.LOCAL.KEYS.KEY _bumblebee_rel ].

:end :instance.


; <<>>

:begin :instance.

business_n1 := massn_le &
  [ STEM < "business" >,
    SYNSEM.LOCAL.KEYS.KEY _business_rel ].

:end :instance.


; <<>>

:begin :instance.

busy_a1 := intrans_adj_le &
  [ STEM < "busy" >,
    SYNSEM.LOCAL.KEYS.KEY _busy_adj_rel ].

:end :instance.


; <<>>

:begin :instance.

but_conj := coord_c_le &
  [ STEM < "but" >,
    SYNSEM.LOCAL [ CAT.VAL.COMPS.FIRST.LOCAL.CONT.INDEX event,
		   CONJ complex-conj & [ CHEAD.LEFT < cnil > ],
		   CONT.LISZT <! _but_rel !> ] ].

:end :instance.


; <<>>

:begin :instance.

but_adv1 := s_adv_pre_word_nospec_le &
  [ STEM < "but" >,
    SYNSEM.LOCAL.KEYS.KEY _but_scop_rel ].

:end :instance.


; <<>>

:begin :instance.

buy_v1 := mv_np_trans_le &
  [ STEM < "buy" >,
    SYNSEM.LOCAL.KEYS.KEY _buy_rel ].

:end :instance.


; <<>>
; MULTIKEY < "means" >

:begin :instance.

by_means_of := prep_3mle2 &
  [ STEM < "by", "means", "of" >,
    SYNSEM.LOCAL.KEYS.KEY _by_means_of_rel ].

:end :instance.


; <<>>

:begin :instance.

by_temp := before_prep_le &
  [ STEM < "by" >,
    SYNSEM.LOCAL.KEYS.KEY _by_temp_rel ].

:end :instance.


; <<>>

:begin :instance.

by_pass_p := prep_nomod_le &
  [ STEM < "by" >,
    SYNSEM.LOCAL.KEYS.KEY _by_pass_rel ].

:end :instance.


; <<>>

:begin :instance.

by_p := prep_le &
  [ STEM < "by" >,
    SYNSEM.LOCAL.KEYS.KEY _by_rel_a ].

:end :instance.


; <<>>

:begin :instance.

by_means := prep_nbar_comp_le &
  [ STEM < "by" >,
    SYNSEM.LOCAL.KEYS.KEY _by_rel_a ].

:end :instance.


; <<>>
; MULTIKEY < "way" >

:begin :instance.

by_the_way := adv_word_3mle3 &
  [ STEM < "by", "the", "way" >,
    SYNSEM.LOCAL.KEYS.KEY _by_the_way_rel ].

:end :instance.


; <<>>
; MULTIKEY < "hour" >

:begin :instance.

by_the_hour := vp_adv_post_word_3mle3 &
  [ STEM < "by", "the", "hour" >,
    SYNSEM.LOCAL.KEYS.KEY _by_the_hour_rel ].

:end :instance.


; <<>>

:begin :instance.

bye_root := disc_adv_le &
  [ STEM < "bye" >,
    SYNSEM.LOCAL.KEYS.KEY greet_rel & [ EXCL 'bye ] ].

:end :instance.


; <<>>
; MULTIKEY < "bye" >

:begin :instance.

bye_bye_root := disc_adv_mle1 &
  [ STEM < "bye", "bye" >,
    SYNSEM.LOCAL.KEYS.KEY greet_rel & [ EXCL 'bye_bye ] ].

:end :instance.


; <<>>

:begin :instance.

cab_n1 := intr_noun_word_le &
  [ STEM < "cab" >,
    SYNSEM.LOCAL.KEYS.KEY _cab_rel ].

:end :instance.


; <<>>

:begin :instance.

cafe_n1 := intr_noun_word_le &
  [ STEM < "cafe" >,
    SYNSEM.LOCAL.KEYS.KEY _cafe_rel ].

:end :instance.


; <<>>

:begin :instance.

cafeteria_n1 := intr_noun_word_le &
  [ STEM < "cafeteria" >,
    SYNSEM.LOCAL.KEYS.KEY _cafeteria_rel ].

:end :instance.


; <<>>

:begin :instance.

calculate_v1 := mv_np_trans_le &
  [ STEM < "calculate" >,
    SYNSEM.LOCAL.KEYS.KEY _calculate_rel ].

:end :instance.


; <<>>

:begin :instance.

calculate_v2 := mv_cp_non_trans_le &
  [ STEM < "calculate" >,
    SYNSEM.LOCAL.KEYS.KEY _calculate_h_rel ].

:end :instance.


; <<>>

:begin :instance.

calendar_n1 := intr_noun_word_le &
  [ STEM < "calendar" >,
    SYNSEM.LOCAL.KEYS.KEY _calendar_rel ].

:end :instance.


; <<>>

:begin :instance.

call_back_v1 := mv_particle_np_le &
  [ STEM < "call" >,
    SYNSEM.LOCAL.KEYS [ KEY _call_back_rel,
			--COMPKEY _back_adv_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

call_quits_v1 := mv_ditrans_only_le &
  [ STEM < "call" >,
    SYNSEM.LOCAL.KEYS [ KEY _call_quits_rel,
			--COMPKEY pron_rel,
			--OCOMPKEY _quits_rel ] ].

:end :instance.


; <<>>

:begin :instance.

call_off_v1 := mv_prep_particle_np_le &
  [ STEM < "call" >,
    SYNSEM.LOCAL.KEYS [ KEY _call_off_rel,
			--COMPKEY _off_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

call_up_v1 := mv_prep_particle_np_le &
  [ STEM < "call" >,
    SYNSEM.LOCAL.KEYS [ KEY _call_up_rel,
			--COMPKEY _up_rel ] ].

:end :instance.


; <<>>

:begin :instance.

call_v1 := mv_np*_trans_le &
  [ STEM < "call" >,
    SYNSEM.LOCAL.KEYS.KEY _call_rel ].

:end :instance.


; <<>>

:begin :instance.

call_ditrans_v1 := mv_ditrans_only_le &
  [ STEM < "call" >,
    SYNSEM.LOCAL.KEYS.KEY _call_name_rel ].

:end :instance.


; <<>>

:begin :instance.

call_n1 := intr_noun_word_le &
  [ STEM < "call" >,
    SYNSEM.LOCAL.KEYS.KEY _call_n_rel ].

:end :instance.


; <<>>

:begin :instance.

calm_a1 := intrans_adj_le &
  [ STEM < "calm" >,
    SYNSEM.LOCAL.KEYS.KEY _calm_rel ].

:end :instance.


; <<>>

:begin :instance.

calm_down_v1 := mv_prep_particle_np_le &
  [ STEM < "calm" >,
    SYNSEM.LOCAL.KEYS [ KEY _calm_x_down_rel,
			--COMPKEY _down_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

calm_down_v2 := mv_particle_le &
  [ STEM < "calm" >,
    SYNSEM.LOCAL.KEYS [ KEY _calm_down_rel,
			    --COMPKEY _down_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

calm_v1 := mv_np_trans_le &
  [ STEM < "calm" >,
    SYNSEM.LOCAL.KEYS.KEY _calm_v_rel ].

:end :instance.


; <<>>

:begin :instance.

campus_n1 := massn_le &
  [ STEM < "campus" >,
    SYNSEM.LOCAL.KEYS.KEY _campus_rel ].

:end :instance.


; <<>>

:begin :instance.

can_aux_pos := modal_pos_le & 
  [ STEM < "can" >,
    SYNSEM.LOCAL [ CAT.HEAD.TENSE present*,
		   KEYS.KEY _can_rel ] ].

:end :instance.


; <<>>

:begin :instance.

can_aux_neg_1 := modal_neg_le &
  [ STEM < "can't" >,
    SYNSEM.LOCAL [ CAT.HEAD.TENSE present*,
		   KEYS.KEY _can_rel ] ].

:end :instance.


; <<>>
; MULTIKEY < "can" >

:begin :instance.

can_aux_neg_2 := modal_neg_mle1 &
  [ STEM < "can", "t" >,
    SYNSEM.LOCAL [ CAT.HEAD.TENSE present*,
		   KEYS.KEY _can_rel ] ].

:end :instance.


; <<>>

:begin :instance.

Canaria_n1 := proper_le &
  [ STEM < "canaria" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Canaria ].

:end :instance.


; <<>>

:begin :instance.

cancel_v1 := mv_np*_trans_le &
  [ STEM < "cancel" >,
    SYNSEM.LOCAL.KEYS.KEY _cancel_rel ].

:end :instance.


; <<>>

:begin :instance.

Cancun_n1 := proper_le &
  [ STEM < "cancun" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Cancun ].

:end :instance.


; <<>>

:begin :instance.

cane_n1 := intr_noun_word_le &
  [ STEM < "cane" >,
    SYNSEM.LOCAL.KEYS.KEY _cane_rel ].

:end :instance.


; <<>>

:begin :instance.

can_aux_neg2 := modal_neg_le &
  [ STEM < "cannot" >,
    SYNSEM.LOCAL [ CAT.HEAD.TENSE present*,
		   KEYS.KEY _can_rel ] ].

:end :instance.


; <<>>

:begin :instance.

canteen_n1 := intr_noun_word_le &
  [ STEM < "canteen" >,
    SYNSEM.LOCAL.KEYS.KEY _canteen_rel ].

:end :instance.


; <<>>

:begin :instance.

canyon_n1 := intr_noun_word_le &
  [ STEM < "canyon" >,
    SYNSEM.LOCAL.KEYS.KEY _canyon_rel ].

:end :instance.


; <<>>

:begin :instance.

capital_a1 := intrans_adj_le &
  [ STEM < "capital" >,
    SYNSEM.LOCAL.KEYS.KEY _capital_rel ].

:end :instance.


; <<>>

:begin :instance.

capital_n1 := intr_noun_word_le &
  [ STEM < "capital" >,
    SYNSEM.LOCAL.KEYS.KEY _capital_n_rel ].

:end :instance.


; <<>>

:begin :instance.

car_n1 := intr_noun_word_le &
  [ STEM < "car" >,
    SYNSEM.LOCAL.KEYS.KEY _car_rel ].

:end :instance.


; <<>>

:begin :instance.

card_n1 := intr_noun_word_le &
  [ STEM < "card" >,
    SYNSEM.LOCAL.KEYS.KEY _card_n_rel ].

:end :instance.


; <<>>

:begin :instance.

care_n1 := massn_le &
  [ STEM < "care" >,
    SYNSEM.LOCAL.KEYS.KEY _care_n_rel ].

:end :instance.


; <<>>

:begin :instance.

care_v1 := mv_unerg_le &
  [ STEM < "care" >,
    SYNSEM.LOCAL.KEYS.KEY _care_rel ].

:end :instance.


; <<>>

:begin :instance.

care_v2 := mv_cp_non_trans_le &
  [ STEM < "care" >,
    SYNSEM.LOCAL.KEYS.KEY _care_h_rel ].

:end :instance.


; <<>>

:begin :instance.

careful_a1 := intrans_adj_le &
  [ STEM < "careful" >,
    SYNSEM.LOCAL.KEYS.KEY _careful_rel ].

:end :instance.


; <<>>

:begin :instance.

carefully := adv_word_le &
  [ STEM < "carefully" >,
    SYNSEM.LOCAL.KEYS.KEY _carefully_rel ].

:end :instance.


; <<>>

:begin :instance.

caretaker_n1 := intr_noun_word_le &
  [ STEM < "caretaker" >,
    SYNSEM.LOCAL.KEYS.KEY _caretaker_rel ].

:end :instance.


; <<>>

:begin :instance.

carnival_n1 := intr_noun_word_le &
  [ STEM < "carnival" >,
    SYNSEM.LOCAL.KEYS.KEY _carnival_rel ].

:end :instance.


; <<>>

:begin :instance.

carnival := holiday_word_le &
  [ STEM < "carnival" >,
    SYNSEM.LOCAL.KEYS.KEY.DAY 'carnival ].

:end :instance.


; <<>>

:begin :instance.

carry_on_v1 := mv_prep_particle_np_le &
  [ STEM < "carry" >,
    SYNSEM.LOCAL.KEYS [ KEY _carry_on2_rel,
			--COMPKEY _on_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

carry_on_v2 := mv_particle_le &
  [ STEM < "carry" >,
    SYNSEM.LOCAL.KEYS [ KEY _carry_on_rel,
			--COMPKEY _on_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

carry_out_v1 := mv_prep_particle_np_le &
  [ STEM < "carry" >,
    SYNSEM.LOCAL.KEYS [ KEY _carry_out_rel,
			--COMPKEY _out_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

carry_v1 := mv_prep*_trans_le &
  [ STEM < "carry" >,
    SYNSEM.LOCAL.KEYS [ KEY _carry_rel,
			--OCOMPKEY dir_rel ] ].

:end :instance.


; <<>>

:begin :instance.

case_n1 := intr_noun_word_le &
  [ STEM < "case" >,
    SYNSEM.LOCAL.KEYS.KEY _case_rel ].

:end :instance.


; <<>>

:begin :instance.

casual_a1 := intrans_adj_le &
  [ STEM < "casual" >,
    SYNSEM.LOCAL.KEYS.KEY _casual_rel ].

:end :instance.


; <<>>

:begin :instance.

cat_n1 := intr_noun_word_le &
  [ STEM < "cat" >,
    SYNSEM.LOCAL.KEYS.KEY _cat_rel ].

:end :instance.


; <<>>

:begin :instance.

catch_v1 := mv_np_trans_le &
  [ STEM < "catch" >,
    SYNSEM.LOCAL.KEYS.KEY _catch_rel ].

:end :instance.


; <<>>

:begin :instance.

cause_v1 := mv_obj_equi_le &
  [ STEM < "cause" >,
    SYNSEM.LOCAL.KEYS.KEY _cause_rel ].

:end :instance.


; <<>>

:begin :instance.

cease_v3 := mv_subj_equi_le &
  [ STEM < "cease" >,
    SYNSEM.LOCAL.KEYS.KEY _cease_rel ].

:end :instance.


; <<>>

:begin :instance.

cease_v4 := mv_subj_equi_prp_le &
  [ STEM < "cease" >,
    SYNSEM.LOCAL.KEYS.KEY _cease_rel ].

:end :instance.


; <<>>

:begin :instance.

CeBIT_n1 := proper_le &
  [ STEM < "cebit" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'CeBIT ].

:end :instance.


; <<>>

:begin :instance.

celebrate_v1 := mv_np*_trans_le &
  [ STEM < "celebrate" >,
    SYNSEM.LOCAL.KEYS.KEY _celebrate_rel ].

:end :instance.


; <<>>

:begin :instance.

center_n1 := noun_ppof_word_le &
  [ STEM < "center" >,
    SYNSEM.LOCAL.KEYS.KEY _center_rel ].

:end :instance.


; <<>>

:begin :instance.

central := intrans_adj_le &
  [ STEM < "central" >,
    SYNSEM.LOCAL.KEYS.KEY _central_rel ].

:end :instance.


; <<>>

:begin :instance.

centrally := int_vp_adv_word_le &
  [ STEM < "centrally" >,
    SYNSEM.LOCAL.KEYS.KEY _centrally_rel ].

:end :instance.


; <<>>

:begin :instance.

certain_a1 := intrans_adj_le &
  [ STEM < "certain" >,
    SYNSEM.LOCAL.KEYS.KEY _certain_adj_rel ].

:end :instance.


; <<>>

:begin :instance.

certainly_adv1 := vp_adv_pre_word_le &
  [ STEM < "certainly" >,
    SYNSEM.LOCAL.KEYS.KEY _certainly_rel ].

:end :instance.


; <<>>

:begin :instance.

certainly_adv2 := s_adv_pre_word_le &
  [ STEM < "certainly" >,
    SYNSEM.LOCAL.KEYS.KEY _certainly_rel ].

:end :instance.


; <<>>

:begin :instance.

chair1 := intr_noun_word_le &
  [ STEM < "chair" >,
    SYNSEM.LOCAL.KEYS.KEY _chair_rel ].

:end :instance.


; <<>>

:begin :instance.

chance_n1 := intr_noun_word_le &
  [ STEM < "chance" >,
    SYNSEM.LOCAL.KEYS.KEY _chance_rel ].

:end :instance.


; <<>>

:begin :instance.

change_n1 := massn_le &
  [ STEM < "change" >,
    SYNSEM.LOCAL.KEYS.KEY _change_n_rel ].

:end :instance.


; <<>>

:begin :instance.

change_v1 := mv_np_trans_le &
  [ STEM < "change" >,
    SYNSEM.LOCAL.KEYS.KEY _change_v_rel ].

:end :instance.


; <<>>

:begin :instance.

change_v2 := mv_unacc_le &
  [ STEM < "change" >,
    SYNSEM.LOCAL.KEYS.KEY _change_rel ].

:end :instance.


; <<>>

:begin :instance.

chaos_n1 := massn_le &
  [ STEM < "chaos" >,
    SYNSEM.LOCAL.KEYS.KEY _chaos_rel ].

:end :instance.


; <<>>

:begin :instance.

charge_n1 := massn_le &
  [ STEM < "charge" >,
    SYNSEM.LOCAL.KEYS.KEY _charge_n_rel ].

:end :instance.


; <<>>

:begin :instance.

charge_v1 := mv_prep*_trans_le &
  [ STEM < "charge" >,
    SYNSEM.LOCAL.KEYS [ KEY _charge_v_rel,
			--OCOMPKEY _to_rel ] ].

:end :instance.


; <<>>

:begin :instance.

cheap := intrans_adj_le &
  [ STEM < "cheap" >,
    SYNSEM.LOCAL.KEYS.KEY _cheap_rel ].

:end :instance.


; <<>>

:begin :instance.

cheaper := comp_adj_le &
  [ STEM < "cheaper" >,
    SYNSEM.LOCAL.KEYS.KEY _cheap_rel ].

:end :instance.


; <<>>

:begin :instance.

cheapest := superl_adj_le &
  [ STEM < "cheapest" >,
    SYNSEM.LOCAL.KEYS.KEY _cheap_rel ].

:end :instance.


; <<>>

:begin :instance.

check_out_v1 := mv_prep_particle_np_le &
  [ STEM < "check" >,
    SYNSEM.LOCAL.KEYS [ KEY _check_out_rel,
			--COMPKEY _out_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

check_v1 := mv_np*_trans_le &
  [ STEM < "check" >,
    SYNSEM.LOCAL.KEYS.KEY _check_rel ].

:end :instance.


; <<>>

:begin :instance.

cheese_n1 := massn_le &
  [ STEM < "cheese" >,
    SYNSEM.LOCAL.KEYS.KEY _cheese_rel ].

:end :instance.


; <<>>

:begin :instance.

chiang := proper_le &
  [ STEM < "chiang" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'chiang ].

:end :instance.


; <<>>

:begin :instance.

child_n1 := intr_noun_word_le &
  [ STEM < "child" >,
    SYNSEM.LOCAL.KEYS.KEY _child_rel ].

:end :instance.


; <<>>

:begin :instance.

chinese_a1 := intrans_adj_le &
  [ STEM < "chinese" >,
    SYNSEM.LOCAL.KEYS.KEY _chinese_rel ].

:end :instance.


; <<>>

:begin :instance.

Chinese_n1 := proper_le &
  [ STEM < "chinese" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Chinese ].

:end :instance.


; <<>>

:begin :instance.

choice_n1 := intr_noun_word_le &
  [ STEM < "choice" >,
    SYNSEM.LOCAL.KEYS.KEY _choice_rel ].

:end :instance.


; <<>>

:begin :instance.

choose_v1 := mv_np*_prep*_trans_le &
  [ STEM < "choose" >,
    SYNSEM.LOCAL.KEYS [ KEY _choose_rel,
			--OCOMPKEY _from_rel ] ].

:end :instance.


; <<>>

:begin :instance.

Christi_n1 := proper_le &
  [ STEM < "christi" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Christi ].

:end :instance.


; <<>>

:begin :instance.

christian_a1 := intrans_adj_le &
  [ STEM < "christian" >,
    SYNSEM.LOCAL.KEYS.KEY _christian_rel ].

:end :instance.


; <<>>
; MULTIKEY < "christmas" >

:begin :instance.

christmas_day := holiday_word_mle1 &
  [ STEM < "christmas", "day" >,
    SYNSEM.LOCAL.KEYS.KEY.DAY 'christmas_day ].

:end :instance.


; <<>>
; MULTIKEY < "christmas" >

:begin :instance.

christmas_eve := holiday_word_mle1 &
  [ STEM < "christmas", "eve" >,
    SYNSEM.LOCAL.KEYS.KEY.DAY 'christmas_eve ].

:end :instance.


; <<>>

:begin :instance.

christmas := season_word_le &
  [ STEM < "christmas" >,
    SYNSEM.LOCAL.KEYS.KEY.SEASON 'christmas ].

:end :instance.


; <<>>

:begin :instance.

circumstance_n1 := intr_noun_word_le &
  [ STEM < "circumstance" >,
    SYNSEM.LOCAL.KEYS.KEY _circumstance_rel ].

:end :instance.


; <<>>

:begin :instance.

city_n2 := intr_noun_word_le &
  [ STEM < "city" >,
    SYNSEM.LOCAL.KEYS.KEY _city_rel ].

:end :instance.


; <<>>

:begin :instance.

claim_n1 := intr_noun_word_le &
  [ STEM < "claim" >,
    SYNSEM.LOCAL.KEYS.KEY _claim_rel ].

:end :instance.


; <<>>

:begin :instance.

claim_v1 := mv_np_trans_le &
  [ STEM < "claim" >,
    SYNSEM.LOCAL.KEYS.KEY _claim_v_rel ].

:end :instance.


; <<>>

:begin :instance.

claim_v2 := mv_cp_non_trans_le &
  [ STEM < "claim" >,
    SYNSEM.LOCAL.KEYS.KEY _claim_v_h_rel ].

:end :instance.


; <<>>

:begin :instance.

clarify_v1 := mv_np_trans_le &
  [ STEM < "clarify" >,
    SYNSEM.LOCAL.KEYS.KEY _clarify_rel ].

:end :instance.


; <<>>

:begin :instance.

class_n1 := intr_noun_word_le &
  [ STEM < "class" >,
    SYNSEM.LOCAL.KEYS.KEY _class_rel ].

:end :instance.


; <<>>

:begin :instance.

class_n2 := massn_le &
  [ STEM < "class" >,
    SYNSEM.LOCAL.KEYS.KEY _class_rel ].

:end :instance.


; <<>>

:begin :instance.

clear_a1 := intrans_adj_le &
  [ STEM < "clear" >,
    SYNSEM.LOCAL.KEYS.KEY _clear_adj_rel ].

:end :instance.


; <<>>

:begin :instance.

clear_up_v1 := mv_prep_particle_np_le &
  [ STEM < "clear" >,
    SYNSEM.LOCAL.KEYS [ KEY _clear_up_rel,
			--COMPKEY _up_rel ] ].

:end :instance.


; <<>>

:begin :instance.

clearly_adv1 := vp_adv_pre_word_le &
  [ STEM < "clearly" >,
    SYNSEM.LOCAL.KEYS.KEY _clearly_rel ].

:end :instance.


; <<>>

:begin :instance.

clearly_adv2 := s_adv_pre_word_le &
  [ STEM < "clearly" >,
    SYNSEM.LOCAL.KEYS.KEY _clearly_rel ].

:end :instance.


; <<>>

:begin :instance.

clever_a1 := intrans_adj_le &
  [ STEM < "clever" >,
    SYNSEM.LOCAL.KEYS.KEY _clever_rel ].

:end :instance.


; <<>>

:begin :instance.

clock_n1 := intr_noun_word_le &
  [ STEM < "clock" >,
    SYNSEM.LOCAL.KEYS.KEY _clock_rel ].

:end :instance.


; <<>>

:begin :instance.

close_a1 := trans_adj_le &
  [ STEM < "close" >,
    SYNSEM.LOCAL.KEYS [ KEY _close_adj_rel,
			--COMPKEY _to_rel ] ].

:end :instance.


; <<>>

:begin :instance.

close_v1 := mv_np_trans_le &
  [ STEM < "close" >,
    SYNSEM.LOCAL.KEYS.KEY _close_rel ].

:end :instance.


; <<>>

:begin :instance.

close_v2 := mv_unacc_le &
  [ STEM < "close" >,
    SYNSEM.LOCAL.KEYS.KEY _close_und_rel ].

:end :instance.


; <<>>
; MULTIKEY < "close" >

:begin :instance.

close_to_p := prep_mle1 &
  [ STEM < "close", "to" >,
    SYNSEM.LOCAL.KEYS.KEY _close_to_rel ].

:end :instance.


; <<>>

:begin :instance.

closely := int_vp_adv_word_le &
  [ STEM < "closely" >,
    SYNSEM.LOCAL.KEYS.KEY _close_isect_rel ].

:end :instance.


; <<>>

:begin :instance.

closer_a1 := comp_trans_adj_le &
  [ STEM < "closer" >,
    SYNSEM.LOCAL.KEYS [ KEY _close_adj_rel,
			--COMPKEY _to_rel ] ].

:end :instance.


; <<>>

:begin :instance.

closest_a1 := trans_adj_le &
  [ STEM < "closest" >,
    SYNSEM.LOCAL.KEYS [ KEY _closest_rel,
			--COMPKEY _to_rel ] ].

:end :instance.


; <<>>

:begin :instance.

clumsy_a1 := intrans_adj_le &
  [ STEM < "clumsy" >,
    SYNSEM.LOCAL.KEYS.KEY _clumsy_adj_rel ].

:end :instance.


; <<>>
; MULTIKEY < "co" >

:begin :instance.

co-worker_n1 := intr_noun_word_mle1 &
  [ STEM < "co", "worker" >,
    SYNSEM.LOCAL.KEYS.KEY _co-worker_rel ].

:end :instance.


; <<>>

:begin :instance.

coach_n1 := intr_noun_word_le &
  [ STEM < "coach" >,
    SYNSEM.LOCAL.KEYS.KEY _coach_rel ].

:end :instance.


; <<>>

:begin :instance.

coach_v1 := mv_np_trans_le &
  [ STEM < "coach" >,
    SYNSEM.LOCAL.KEYS.KEY _coach_v_rel ].

:end :instance.


; <<>>

:begin :instance.

coal_n1 := massn_le &
  [ STEM < "coal" >,
    SYNSEM.LOCAL.KEYS.KEY _coal_rel ].

:end :instance.


; <<>>

:begin :instance.

coffee_n1 := massn_le &
  [ STEM < "coffee" >,
    SYNSEM.LOCAL.KEYS.KEY _coffee_rel ].

:end :instance.


; <<>>

:begin :instance.

coincide_v1 := mv_unerg_le &
  [ STEM < "coincide" >,
    SYNSEM.LOCAL.KEYS [ KEY _coincide_rel ] ].

:end :instance.


; <<>>

:begin :instance.

coincide_with_v1 := mv_empty_prep_intrans_le &
  [ STEM < "coincide" >,
    SYNSEM.LOCAL.KEYS [ KEY _coincide_with_rel,
			--COMPKEY _with_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

colleague_n1 := intr_noun_word_le &
  [ STEM < "colleague" >,
    SYNSEM.LOCAL.KEYS.KEY _colleague_rel ].

:end :instance.


; <<>>

:begin :instance.

collect_v1 := mv_np_trans_le &
  [ STEM < "collect" >,
    SYNSEM.LOCAL.KEYS [ KEY _collect_rel ] ].

:end :instance.


; <<>>

:begin :instance.

Cologne_n1 := proper_le &
  [ STEM < "cologne" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Cologne ].

:end :instance.


; <<>>

:begin :instance.

combination_n1 := noun_ppof_word_le &
  [ STEM < "combination" >,
    SYNSEM.LOCAL.KEYS.KEY _combination_rel ].

:end :instance.


; <<>>

:begin :instance.

combine_v1 := mv_prep*_trans_le &
  [ STEM < "combine" >,
    SYNSEM.LOCAL.KEYS [ KEY _combine_rel,
			--OCOMPKEY _with_rel ] ].

:end :instance.


; <<>>

:begin :instance.

come_across_v1 := mv_particle_le &
  [ STEM < "come" >,
    SYNSEM.LOCAL.KEYS [ KEY _come_across_present_rel,
			--COMPKEY _across_rel_s ] ].

:end :instance.

; <<>>

:begin :instance.

come_across_v2 := mv_empty_prep_intrans_le &
  [ STEM < "come" >,
    SYNSEM.LOCAL.KEYS [ KEY _come_across_rel,
			--COMPKEY _across_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

come_around_v1 := mv_particle_le &
  [ STEM < "come" >,
    SYNSEM.LOCAL.KEYS [ KEY _come_around_rel,
			--COMPKEY _around_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

come_back_v1 := mv_particle_pp*_le &
  [ STEM < "come" >,
    SYNSEM.LOCAL.KEYS [ KEY _come_back_to_rel,
			--COMPKEY _back_adv_rel_s,
			--OCOMPKEY _to_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

come_in_v1 := mv_particle_le &
  [ STEM < "come" >,
    SYNSEM.LOCAL.KEYS [ KEY _come_in_rel,
			--COMPKEY _in_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

come_over_v1 := mv_particle_le &
  [ STEM < "come" >,
    SYNSEM.LOCAL.KEYS [ KEY _come_over_rel,
			--COMPKEY _over_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

come_on_v1 := mv_particle_le &
  [ STEM < "come" >,
    SYNSEM.LOCAL.KEYS [ KEY _come_on_rel,
			--COMPKEY _on_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

come_together_v1 := mv_particle_le &
  [ STEM < "come" >,
    SYNSEM.LOCAL.KEYS [ KEY _come_together_rel,
			--COMPKEY _together_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

come_up_v1 := mv_particle_le &
  [ STEM < "come" >,
    SYNSEM.LOCAL.KEYS [ KEY _come_up_rel,
			--COMPKEY _up_rel ] ].

:end :instance.


; <<>>

:begin :instance.

come_v1 := mv_unerg_le &
  [ STEM < "come" >,
    SYNSEM.LOCAL.KEYS.KEY _come_rel ].

:end :instance.


; <<>>

:begin :instance.

comfortable_a1 := intrans_adj_le &
  [ STEM < "comfortable" >,
    SYNSEM.LOCAL.KEYS.KEY _comfortable_rel ].

:end :instance.


; <<>>

:begin :instance.

commit_v1 := mv_np_trans_le &
  [ STEM < "commit" >,
    SYNSEM.LOCAL.KEYS.KEY _commit_rel ].

:end :instance.


; <<>>

:begin :instance.

commitment_n1 := intr_noun_word_le &
  [ STEM < "commitment" >,
    SYNSEM.LOCAL.KEYS.KEY _commitment_rel ].

:end :instance.


; <<>>

:begin :instance.

committed_a1 := intrans_adj_le &
  [ STEM < "committed" >,
    SYNSEM.LOCAL.KEYS.KEY _committed_rel ].

:end :instance.


; <<>>

:begin :instance.

committee_n1 := intr_noun_word_le &
  [ STEM < "committee" >,
    SYNSEM.LOCAL.KEYS.KEY _committee_rel ].

:end :instance.


; <<>>

:begin :instance.

common_a1 := intrans_adj_le &
  [ STEM < "common" >,
    SYNSEM.LOCAL.KEYS.KEY _common_rel ].

:end :instance.


; <<>>

:begin :instance.

communal_a1 := intrans_adj_le &
  [ STEM < "communal" >,
    SYNSEM.LOCAL.KEYS.KEY _communal_rel ].

:end :instance.


; <<>>

:begin :instance.

company_n1 := intr_noun_word_le &
  [ STEM < "company" >,
    SYNSEM.LOCAL.KEYS.KEY _company_rel ].

:end :instance.


; <<>>

:begin :instance.

compare_v1 := mv_prep_trans_le &
  [ STEM < "compare" >,
    SYNSEM.LOCAL.KEYS [ KEY _compare_rel,
			--OCOMPKEY _to_rel ] ].

:end :instance.


; <<>>

:begin :instance.

compare_with_v1 := mv_empty_prep*_trans_le &
  [ STEM < "compare" >,
    SYNSEM.LOCAL.KEYS [ KEY _compare_with_rel,
			--OCOMPKEY _with_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

comparison_n1 := intr_noun_word_le &
  [ STEM < "comparison" >,
    SYNSEM.LOCAL.KEYS.KEY _comparison_rel ].

:end :instance.


; <<>>

:begin :instance.

comparison_n2 := massn_le &
  [ STEM < "comparison" >,
    SYNSEM.LOCAL.KEYS.KEY _comparison_rel ].

:end :instance.


; <<>>

:begin :instance.

compartment_n1 := intr_noun_word_le &
  [ STEM < "compartment" >,
    SYNSEM.LOCAL.KEYS.KEY _compartment_rel ].

:end :instance.


; <<>>

:begin :instance.

competent_a2 := intrans_adj_le &
  [ STEM < "competent" >,
    SYNSEM.LOCAL.KEYS.KEY _competent_rel ].

:end :instance.


; <<>>

:begin :instance.

competently_adv1 := vp_adv_word_le &
  [ STEM < "competently" >,
    SYNSEM.LOCAL.KEYS.KEY _competently_rel ].

:end :instance.


; <<>>

:begin :instance.

competitor_n1 := intr_noun_word_le &
  [ STEM < "competitor" >,
    SYNSEM.LOCAL.KEYS.KEY _competitor_rel ].

:end :instance.


; <<>>

:begin :instance.

compile_v1 := mv_np_trans_le &
  [ STEM < "compile" >,
    SYNSEM.LOCAL.KEYS.KEY _compile_rel ].

:end :instance.


; <<>>

:begin :instance.

complete_a1 := intrans_adj_le &
  [ STEM < "complete" >,
    SYNSEM.LOCAL.KEYS.KEY _complete_adj_rel ].

:end :instance.


; <<>>

:begin :instance.

complete_v1 := mv_np_trans_le &
  [ STEM < "complete" >,
    SYNSEM.LOCAL.KEYS.KEY _complete_rel ].

:end :instance.


; <<>>

:begin :instance.

completely_deg := degree_spec_le &
  [ STEM < "completely" >,
    SYNSEM.LOCAL.KEYS.KEY _complete_grad_rel ].

:end :instance.


; <<>>

:begin :instance.

completely := vp_adv_word_le &
  [ STEM < "completely" >,
    SYNSEM.LOCAL.KEYS.KEY _completely_rel ].

:end :instance.


; <<>>

:begin :instance.

complication_n1 := intr_noun_word_le &
  [ STEM < "complication" >,
    SYNSEM.LOCAL.KEYS.KEY _complication_rel ].

:end :instance.


; <<>>

:begin :instance.

comply_with_v1 := mv_empty_prep*_intrans_le &
  [ STEM < "comply" >,
    SYNSEM.LOCAL.KEYS [ KEY _comply_with_rel,
			--COMPKEY _with_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

CompSci_n1 := proper_le &
  [ STEM < "compsci" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'CompSci ].

:end :instance.


; <<>>

:begin :instance.

computer_n1 := intr_noun_word_le &
  [ STEM < "computer" >,
    SYNSEM.LOCAL.KEYS.KEY _computer_rel ].

:end :instance.


; <<>>
; MULTIKEY < "computer" >

:begin :instance.

computer_science_n1 := massn_mle1 &
  [ STEM < "computer", "science" >,
    SYNSEM.LOCAL.KEYS.KEY _computer_science_rel ].

:end :instance.


; <<>>

:begin :instance.

concern_n1 := intr_noun_word_le &
  [ STEM < "concern" >,
    SYNSEM.LOCAL.KEYS.KEY _concern_n_rel ].

:end :instance.


; <<>>

:begin :instance.

concern_n2 := massn_le &
  [ STEM < "concern" >,
    SYNSEM.LOCAL.KEYS.KEY _concern_n_rel ].

:end :instance.


; <<>>

:begin :instance.

concern_v1 := mv_np_trans_le &
  [ STEM < "concern" >,
    SYNSEM.LOCAL.KEYS.KEY _concern_rel ].

:end :instance.


; <<>>

:begin :instance.

concerned_a1 := intrans_adj_le &
  [ STEM < "concerned" >,
    SYNSEM.LOCAL.KEYS.KEY _concerned_rel ].

:end :instance.


; <<>>

:begin :instance.

concerning_p := prep_le &
  [ STEM < "concerning" >,
    SYNSEM.LOCAL.KEYS.KEY _concerning_rel ].

:end :instance.


; <<>>

:begin :instance.

concise_a1 := intrans_adj_le &
  [ STEM < "concise" >,
    SYNSEM.LOCAL.KEYS.KEY _concise_rel ].

:end :instance.


; <<>>

:begin :instance.

conclude_v1 := mv_cp_prop_non_trans_le &
  [ STEM < "conclude" >,
    SYNSEM.LOCAL.KEYS.KEY _conclude_rel ].

:end :instance.


; <<>>

:begin :instance.

concrete_a1 := intrans_adj_le &
  [ STEM < "concrete" >,
    SYNSEM.LOCAL.KEYS.KEY _concrete_rel ].

:end :instance.


; <<>>

:begin :instance.

conference_n1 := intr_noun_word_le &
  [ STEM < "conference" >,
    SYNSEM.LOCAL.KEYS.KEY _conference_rel ].

:end :instance.


; <<>>

:begin :instance.

confine_v1 := mv_prep*_trans_le &
  [ STEM < "confine" >,
    SYNSEM.LOCAL.KEYS [ KEY _confine_rel,
			--OCOMPKEY _to_rel ] ].

:end :instance.


; <<>>

:begin :instance.

confirm_v1 := mv_np*_trans_le &
  [ STEM < "confirm" >,
    SYNSEM.LOCAL.KEYS.KEY _confirm_rel ].

:end :instance.


; <<>>

:begin :instance.

confirm_v2 := mv_pp_cp_le &
  [ STEM < "confirm" >,
    SYNSEM.LOCAL.KEYS [ KEY _confirm_h_rel,
			--COMPKEY _to_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

conflict_n1 := intr_noun_word_le &
  [ STEM < "conflict" >,
    SYNSEM.LOCAL.KEYS.KEY _conflict_n_rel ].

:end :instance.


; <<>>

:begin :instance.

conflict_with_v1 := mv_empty_prep*_intrans_le &
  [ STEM < "conflict" >,
    SYNSEM.LOCAL.KEYS [ KEY _conflict_v_rel,
			--COMPKEY _with_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

conformable_a1 := intrans_adj_le &
  [ STEM < "conformable" >,
    SYNSEM.LOCAL.KEYS.KEY _conformable_rel ].

:end :instance.


; <<>>

:begin :instance.

congress_n1 := intr_noun_word_le &
  [ STEM < "congress" >,
    SYNSEM.LOCAL.KEYS.KEY _congress_rel ].

:end :instance.


; <<>>

:begin :instance.

connect_v1 := mv_np_trans_le &
  [ STEM < "connect" >,
    SYNSEM.LOCAL.KEYS.KEY _connect_rel ].

:end :instance.


; <<>>

:begin :instance.

connect_v2 := mv_unacc_le &
  [ STEM < "connect" >,
    SYNSEM.LOCAL.KEYS.KEY _connect_und_rel ].

:end :instance.


; <<>>

:begin :instance.

connected_a1 := intrans_adj_le &
  [ STEM < "connected" >,
    SYNSEM.LOCAL.KEYS.KEY _connected_rel ].

:end :instance.


; <<>>

:begin :instance.

consecutive_a1 := intrans_adj_le &
  [ STEM < "consecutive" >,
    SYNSEM.LOCAL.KEYS.KEY _consecutive_rel ].

:end :instance.


; <<>>

:begin :instance.

consequence_n1 := intr_noun_word_le &
  [ STEM < "consequence" >,
    SYNSEM.LOCAL.KEYS.KEY _consequence_rel ].

:end :instance.


; <<>>

:begin :instance.

consequently_adv1 := vp_adv_pre_word_le &
  [ STEM < "consequently" >,
    SYNSEM.LOCAL.KEYS.KEY _consequently_rel ].

:end :instance.


; <<>>

:begin :instance.

consequently_adv2 := s_adv_pre_word_le &
  [ STEM < "consequently" >,
    SYNSEM.LOCAL.KEYS.KEY _consequently_rel ].

:end :instance.


; <<>>

:begin :instance.

consider_v1 := mv_obj_equi_le &
  [ STEM < "consider" >,
    SYNSEM.LOCAL.KEYS.KEY _consider2_rel ].

:end :instance.


; <<>>

:begin :instance.

consider_v2 := mv_obj_equi_prd_le &
  [ STEM < "consider" >,
    SYNSEM.LOCAL.KEYS.KEY _consider2_rel ].

:end :instance.


; <<>>

:begin :instance.

consider_v3 := mv_ditrans_only_le &
  [ STEM < "consider" >,
    SYNSEM.LOCAL.KEYS.KEY _consider3_rel ].

:end :instance.


; <<>>

:begin :instance.

consider_v4 := mv_np_comp_le &
  [ STEM < "consider" >,
    SYNSEM.LOCAL [ CAT.VAL.COMPS 
			    < [ LOCAL.CONT.INDEX #ind ],
			      [ LOCAL.CONT.INDEX #ind ] >,
		   KEYS [ KEY _consider2_rel,
			  --OCOMPKEY _as_rel ] ] ].
:end :instance.


; <<>>

:begin :instance.

consider_v5 := mv_np_trans_le &
  [ STEM < "consider" >,
    SYNSEM.LOCAL.KEYS.KEY _consider_rel ].

:end :instance.


; <<>>

:begin :instance.

considering_p := prep_le &
  [ STEM < "considering" >,
    SYNSEM.LOCAL.KEYS.KEY _considering_rel ].

:end :instance.


; <<>>

:begin :instance.

constant_a1 := intrans_adj_le &
  [ STEM < "constant" >,
    SYNSEM.LOCAL.KEYS.KEY _constant_rel ].

:end :instance.


; <<>>

:begin :instance.

constantly_adv1 := adv_word_le &
  [ STEM < "constantly" >,
    SYNSEM.LOCAL.KEYS.KEY _constantly_rel ].

:end :instance.


; <<>>

:begin :instance.

consult_v1 := mv_unerg_le &
  [ STEM < "consult" >,
    SYNSEM.LOCAL.KEYS.KEY _consult_rel ].

:end :instance.


; <<>>

:begin :instance.

consultant_n1 := intr_noun_word_le &
  [ STEM < "consultant" >,
    SYNSEM.LOCAL.KEYS.KEY _consultant_rel ].

:end :instance.


; <<>>

:begin :instance.

contact_n1 := massn_le &
  [ STEM < "contact" >,
    SYNSEM.LOCAL.KEYS.KEY _contact_n_rel ].

:end :instance.


; <<>>

:begin :instance.

contact_v1 := mv_np_trans_le &
  [ STEM < "contact" >,
    SYNSEM.LOCAL.KEYS.KEY _contact_rel ].

:end :instance.


; <<>>

:begin :instance.

contain_v1 := mv_np_trans_le &
  [ STEM < "contain" >,
    SYNSEM.LOCAL.KEYS.KEY _contain_rel ].

:end :instance.


; <<>>

:begin :instance.

contented_a1 := intrans_adj_le &
  [ STEM < "contented" >,
    SYNSEM.LOCAL.KEYS.KEY _contented_rel ].

:end :instance.


; <<>>

:begin :instance.

contentedly := adv_word_le &
  [ STEM < "contentedly" >,
    SYNSEM.LOCAL.KEYS.KEY _contentedly_rel ].

:end :instance.


; <<>>

:begin :instance.

contingent_a1 := intrans_adj_le &
  [ STEM < "contingent" >,
    SYNSEM.LOCAL.KEYS.KEY _contingent_rel ].

:end :instance.


; <<>>

:begin :instance.

continue_v1 := mv_unerg_le &
  [ STEM < "continue" >,
    SYNSEM.LOCAL.KEYS.KEY _continue_rel ].

:end :instance.


; <<>>

:begin :instance.

continue_v2 := mv_np_trans_le &
  [ STEM < "continue" >,
    SYNSEM.LOCAL.KEYS.KEY _continue_cause_rel ].

:end :instance.


; <<>>

:begin :instance.

continue_v3 := mv_subj_equi_le &
  [ STEM < "continue" >,
    SYNSEM.LOCAL.KEYS.KEY _continue_to_rel ].

:end :instance.


; <<>>

:begin :instance.

continue_v4 := mv_subj_equi_prp_le &
  [ STEM < "continue" >,
    SYNSEM.LOCAL.KEYS.KEY _continue_to_rel ].

:end :instance.


; <<>>

:begin :instance.

continuous_a1 := intrans_adj_le &
  [ STEM < "continuous" >,
    SYNSEM.LOCAL.KEYS.KEY _continuous_rel ].

:end :instance.


; <<>>

:begin :instance.

contrary_a1 := intrans_adj_le &
  [ STEM < "contrary" >,
    SYNSEM.LOCAL.KEYS.KEY _contrary_rel ].

:end :instance.


; <<>>

:begin :instance.

convenient_a1 := intrans_adj_le &
  [ STEM < "convenient" >,
    SYNSEM.LOCAL.KEYS.KEY _convenient_rel ].

:end :instance.


; <<>>

:begin :instance.

conveniently := adv_word_le &
  [ STEM < "conveniently" >,
    SYNSEM.LOCAL.KEYS.KEY _conveniently_rel ].

:end :instance.


; <<>>

:begin :instance.

convention_n1 := intr_noun_word_le &
  [ STEM < "convention" >,
    SYNSEM.LOCAL.KEYS.KEY _convention_rel ].

:end :instance.


; <<>>

:begin :instance.

conversation_n1 := intr_noun_word_le &
  [ STEM < "conversation" >,
    SYNSEM.LOCAL.KEYS.KEY _conversation_rel ].

:end :instance.


; <<>>

:begin :instance.

conversation_n2 := massn_le &
  [ STEM < "conversation" >,
    SYNSEM.LOCAL.KEYS.KEY _conversation_rel ].

:end :instance.


; <<>>

:begin :instance.

convince_v1 := mv_obj_equi_le &
  [ STEM < "convince" >,
    SYNSEM.LOCAL.KEYS.KEY _convince2_rel ].

:end :instance.


; <<>>

:begin :instance.

convince_v2 := mv_np_trans_cp_prop_le &
  [ STEM < "convince" >,
    SYNSEM.LOCAL.KEYS.KEY _convince_rel ].

:end :instance.


; <<>>

:begin :instance.

cool_a1 := intrans_adj_le &
  [ STEM < "cool" >,
    SYNSEM.LOCAL.KEYS.KEY _cool_rel ].

:end :instance.


; <<>>

:begin :instance.

coordinate_v1 := mv_np_trans_le &
  [ STEM < "coordinate" >,
    SYNSEM.LOCAL.KEYS.KEY _coordinate_rel ].

:end :instance.


; <<>>

:begin :instance.

corn_n2 := massn_le &
  [ STEM < "corn" >,
    SYNSEM.LOCAL.KEYS.KEY _corn_rel ].

:end :instance.


; <<>>
; MULTIKEY < "corpus" >

:begin :instance.

Corpus_Christi_n1 := proper_mle1 &
  [ STEM < "corpus", "christi" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Corpus_Christi ].

:end :instance.


; <<>>
; MULTIKEY < "corpus" >

:begin :instance.

corpus_christi := holiday_word_mle1 &
  [ STEM < "corpus", "christi" >,
    SYNSEM.LOCAL.KEYS.KEY.DAY 'corpus_christi ].

:end :instance.


; <<>>

:begin :instance.

correct_v1 := mv_np_trans_le &
  [ STEM < "correct" >,
    SYNSEM.LOCAL.KEYS.KEY _correct_rel ].

:end :instance.


; <<>>

:begin :instance.

correct_a1 := intrans_adj_le &
  [ STEM < "correct" >,
    SYNSEM.LOCAL.KEYS.KEY _correct_a_rel ].

:end :instance.


; <<>>

:begin :instance.

correctly := adv_word_le &
  [ STEM < "correctly" >,
    SYNSEM.LOCAL.KEYS.KEY _correctly_rel ].

:end :instance.


; <<>>

:begin :instance.

correspond_v1 := mv_empty_prep_intrans_le &
  [ STEM < "correspond" >,
    SYNSEM.LOCAL.KEYS [ KEY _correspond_rel,
			--COMPKEY _with_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

correspond_v2 := mv_empty_prep_intrans_le &
  [ STEM < "correspond" >,
    SYNSEM.LOCAL.KEYS [ KEY _correspond_rel,
			--COMPKEY _to_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

cosy_a1 := intrans_adj_le &
  [ STEM < "cosy" >,
    SYNSEM.LOCAL.KEYS.KEY _cosy_rel ].

:end :instance.


; <<>>

:begin :instance.

could_aux_pos := modal_subj_pos_le & 
  [ STEM < "could" >,
    SYNSEM.LOCAL.KEYS.KEY _could_rel ].

:end :instance.


; <<>>

:begin :instance.

could_aux_neg_1 := modal_subj_neg_le &
  [ STEM < "couldn't" >,
    SYNSEM.LOCAL.KEYS.KEY _could_rel ].

:end :instance.


; <<>>
; MULTIKEY < "couldn" >

:begin :instance.

could_aux_neg_2 := modal_subj_neg_mle1 &
  [ STEM < "couldn", "t" >,
    SYNSEM.LOCAL.KEYS.KEY _could_rel ].

:end :instance.


; <<>>

:begin :instance.

count_on_v1 := mv_empty_prep_intrans_le &
  [ STEM < "count" >,
    SYNSEM.LOCAL.KEYS [ KEY _count_on_rel,
			--COMPKEY _on_rel_s ] ].

:end :instance.


; <<>>
; MULTIKEY < "counter" >

:begin :instance.

counter-proposal_n1 := intr_noun_word_mle1 &
  [ STEM < "counter", "proposal" >,
    SYNSEM.LOCAL.KEYS.KEY _counter-proposal_rel ].

:end :instance.


; <<>>
; MULTIKEY < "couple" >

:begin :instance.

a_couple := pdet_pl_mle2 &
  [ STEM < "a", "couple" >,
    SYNSEM.LOCAL.KEYS.KEY _a_couple_rel ].

:end :instance.


; <<>>

:begin :instance.

course_n1 := intr_noun_word_le &
  [ STEM < "course" >,
    SYNSEM.LOCAL.KEYS.KEY _course_rel ].

:end :instance.


; <<>>

:begin :instance.

courtyard_n1 := intr_noun_word_le &
  [ STEM < "courtyard" >,
    SYNSEM.LOCAL.KEYS.KEY _courtyard_rel ].

:end :instance.


; <<>>

:begin :instance.

Craig := proper_le &
  [ STEM < "craig" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'craig ].

:end :instance.


; <<>>

:begin :instance.

crazy_a1 := intrans_adj_le &
  [ STEM < "crazy" >,
    SYNSEM.LOCAL.KEYS.KEY _crazy_rel ].

:end :instance.


; <<>>

:begin :instance.

create_v1 := mv_np_trans_le &
  [ STEM < "create" >,
    SYNSEM.LOCAL.KEYS.KEY _create_rel ].

:end :instance.


; <<>>

:begin :instance.

Cristal_n1 := intr_noun_word_le &
  [ STEM < "cristal" >,
    SYNSEM.LOCAL.KEYS.KEY named_rel & [ NAMED 'cristal ] ].

:end :instance.


; <<>>
; MULTIKEY < "cristal" >

:begin :instance.

cristal_hanover := intr_noun_word_mle1 &
  [ STEM < "cristal", "hanover" >, 
   SYNSEM.LOCAL.KEYS.KEY named_rel & [ NAMED 'cristal_hanover ] ].

:end :instance.


; <<>>

:begin :instance.

cross_v1 := mv_np_trans_le &
  [ STEM < "cross" >,
    SYNSEM.LOCAL.KEYS.KEY _cross_rel ].

:end :instance.


; <<>>

:begin :instance.

cross_off_v1 := mv_prep_particle_np_le &
  [ STEM < "cross" >,
    SYNSEM.LOCAL.KEYS [ KEY _cross_off_rel,
			--COMPKEY _off_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

cry_v1 := mv_unerg_le &
  [ STEM < "cry" >,
    SYNSEM.LOCAL.KEYS.KEY _cry_v_rel ].

:end :instance.


; <<>>
 
:begin :instance.
 
CSLI_n1 := proper_le &
  [ STEM < "csli" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'CSLI ].
 
:end :instance.
 
 
; <<>>

:begin :instance.

currency_n1 := intr_noun_word_le &
  [ STEM < "currency" >,
    SYNSEM.LOCAL.KEYS.KEY _currency_rel ].

:end :instance.


; <<>>

:begin :instance.

current_a1 := intrans_adj_le &
  [ STEM < "current" >,
    SYNSEM.LOCAL.KEYS.KEY _current_rel ].

:end :instance.


; <<>>

:begin :instance.

curriculum_n1 := intr_noun_word_le &
  [ STEM < "curriculum" >,
    SYNSEM.LOCAL.KEYS.KEY _curriculum_rel ].

:end :instance.


; <<>>

:begin :instance.

cut_v1 := mv_np_trans_le &
  [ STEM < "cut" >,
    SYNSEM.LOCAL.KEYS.KEY _cut_rel ].

:end :instance.


; <<>>

:begin :instance.

cut_off_v1 := mv_prep_particle_np_le &
  [ STEM < "cut" >,
    SYNSEM.LOCAL.KEYS [ KEY _cut_off_rel,
			--COMPKEY _off_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

cut_out_v1 := mv_prep_particle_np_le &
  [ STEM < "cut" >,
    SYNSEM.LOCAL.KEYS [ KEY _cut_out_rel,
			--COMPKEY _out_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

cut_short_v1 := mv_particle_np_le &
  [ STEM < "cut" >,
    SYNSEM.LOCAL.KEYS [ KEY _cut_short_rel,
			--COMPKEY _short_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

Cyert_n1 := proper_le &
  [ STEM < "cyert" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'cyert ].

:end :instance.


; <<>>

:begin :instance.

Czerczinsky_n1 := proper_le &
  [ STEM < "czerczinsky" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Czerczinsky ].

:end :instance.


; <<>>

:begin :instance.

daily_adv1 := int_vp_adv_post_word_le &
  [ STEM < "daily" >,
    SYNSEM.LOCAL.KEYS.KEY _daily_adv_rel ].

:end :instance.


; <<>>

:begin :instance.

danger_n1 := intr_noun_word_le &
  [ STEM < "danger" >,
    SYNSEM.LOCAL.KEYS.KEY _danger_rel ].

:end :instance.


; <<>>

:begin :instance.

danger_n2 := massn_le &
  [ STEM < "danger" >,
    SYNSEM.LOCAL.KEYS.KEY _danger_rel ].

:end :instance.


; <<>>

:begin :instance.

dare_v1 := mv_subj_equi_le &
  [ STEM < "dare" >,
    SYNSEM.LOCAL.KEYS.KEY _dare_rel ].

:end :instance.


; <<>>

:begin :instance.

dare_aux_pos := modal_pos_le & 
  [ STEM < "dare" >,
    SYNSEM.LOCAL [ CAT.HEAD.TENSE present*,
		   KEYS.KEY _dare_aux_rel ] ].

:end :instance.


; <<>>

:begin :instance.

dare_aux_neg_1 := modal_neg_le &
  [ STEM < "daren't" >,
    SYNSEM.LOCAL [ CAT.HEAD.TENSE present*,
		   KEYS.KEY _dare_aux_rel ] ].

:end :instance.


; <<>>
; MULTIKEY < "daren" >

:begin :instance.

dare_aux_neg_2 := modal_neg_mle1 &
  [ STEM < "daren", "t" >,
    SYNSEM.LOCAL [ CAT.HEAD.TENSE present*,
		   KEYS.KEY _dare_aux_rel ] ].

:end :instance.


; <<>>

:begin :instance.

Darmstadt_n1 := proper_le &
  [ STEM < "darmstadt" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Darmstadt ].

:end :instance.


; <<>>

:begin :instance.

data_n1 := intr_noun_word_le &
  [ STEM < "data" >,
    SYNSEM.LOCAL.KEYS.KEY _data_rel ].

:end :instance.


; <<>>

:begin :instance.

date_n1 := intr_noun_word_le &
  [ STEM < "date" >,
    SYNSEM.LOCAL.KEYS.KEY _date_rel ].

:end :instance.


; <<>>

:begin :instance.

datum_n1 := intr_noun_word_le &
  [ STEM < "datum" >,
    SYNSEM.LOCAL.KEYS.KEY _data_rel ].

:end :instance.


; <<>>

:begin :instance.

daughter_n1 := noun_ppof_word_le &
  [ STEM < "daughter" >,
    SYNSEM.LOCAL.KEYS.KEY _daughter_rel ].

:end :instance.


; <<>>

:begin :instance.

day_n := intr_temp_noun_le &
  [ STEM < "day" >,
    SYNSEM.LOCAL.KEYS.KEY _day_rel ].

:end :instance.


; <<>>
; MULTIKEY < "day" >

:begin :instance.

day-long_a1 := intrans_adj_mle &
  [ STEM < "day", "long" >,
    SYNSEM.LOCAL.KEYS.KEY _day-long_rel ].

:end :instance.


; <<>>

:begin :instance.

daytime_n1 := intr_noun_word_le &
  [ STEM < "daytime" >,
    SYNSEM.LOCAL.KEYS.KEY _daytime_n_rel ].

:end :instance.


; <<>>

:begin :instance.

deadline_n1 := intr_noun_word_le &
  [ STEM < "deadline" >,
    SYNSEM.LOCAL.KEYS.KEY _deadline_rel ].

:end :instance.


; <<>>

:begin :instance.

deal_n1 := intr_noun_word_le &
  [ STEM < "deal" >,
    SYNSEM.LOCAL.KEYS.KEY _deal_n_rel ].

:end :instance.


; <<>>

:begin :instance.

deal_with_v1 := mv_empty_prep_intrans_le &
  [ STEM < "deal" >,
    SYNSEM.LOCAL.KEYS [ KEY _deal_with_rel,
			--COMPKEY _with_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

dear_a1 := intrans_adj_le &
  [ STEM < "dear" >,
    SYNSEM.LOCAL.KEYS.KEY _dear_rel ].

:end :instance.


; <<>>

:begin :instance.

december := month_word_le &
  [ STEM < "december" >,
    SYNSEM.LOCAL.KEYS.KEY.MONTH 'dec ].

:end :instance.


; <<>>

:begin :instance.

december_2 := month_year_word_le &
  [ STEM < "december" >,
    SYNSEM.LOCAL.KEYS.KEY.MONTH 'dec ].

:end :instance.


; <<>>

:begin :instance.

decide_on_v1 := mv_empty_prep_intrans_le &
  [ STEM < "decide" >,
    SYNSEM.LOCAL.KEYS [ KEY _decide_on_rel,
			--COMPKEY _on_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

decide_v1 := mv_subj_equi_le &
  [ STEM < "decide" >,
    SYNSEM.LOCAL.KEYS.KEY _decide_rel ].

:end :instance.


; <<>>

:begin :instance.

decidedly_adv1 := vp_adv_pre_word_le &
  [ STEM < "decidedly" >,
    SYNSEM.LOCAL.KEYS.KEY _decidedly_rel ].

:end :instance.


; <<>>

:begin :instance.

decidedly_adv2 := s_adv_pre_word_le &
  [ STEM < "decidedly" >,
    SYNSEM.LOCAL.KEYS.KEY _decidedly_rel ].

:end :instance.


; <<>>

:begin :instance.

decision_n1 := intr_noun_word_le &
  [ STEM < "decision" >,
    SYNSEM.LOCAL.KEYS.KEY _decision_rel ].

:end :instance.


; <<>>

:begin :instance.

declare_v1 := mv_np_trans_le &
  [ STEM < "declare" >,
    SYNSEM.LOCAL.KEYS.KEY _declare_rel ].

:end :instance.


; <<>>

:begin :instance.

declare_v2 := mv_unerg_le &
  [ STEM < "declare" >,
    SYNSEM.LOCAL.KEYS.KEY _declare_rel ].

:end :instance.


; <<>>

:begin :instance.

declare_v3 := mv_cp_non_trans_le &
  [ STEM < "declare" >,
    SYNSEM.LOCAL.KEYS.KEY _declare_h_rel ].

:end :instance.


; <<>>

:begin :instance.

decline_v1 := mv_np_trans_le &
  [ STEM < "decline" >,
    SYNSEM.LOCAL.KEYS.KEY _decline_rel ].

:end :instance.


; <<>>

:begin :instance.

decline_v2 := mv_subj_equi_le &
  [ STEM < "decline" >,
    SYNSEM.LOCAL.KEYS.KEY _decline2_rel ].

:end :instance.


; <<>>

:begin :instance.

deduction_n1 := intr_noun_word_le &
  [ STEM < "deduction" >,
    SYNSEM.LOCAL.KEYS.KEY _deduction_rel ].

:end :instance.


; <<>>

:begin :instance.

deep_a1 := intrans_adj_le &
  [ STEM < "deep" >,
    SYNSEM.LOCAL.KEYS.KEY _deep_rel ].

:end :instance.


; <<>>

:begin :instance.

defeat_n1 := intr_noun_word_le &
  [ STEM < "defeat" >,
    SYNSEM.LOCAL.KEYS.KEY _defeat_rel ].

:end :instance.


; <<>>

:begin :instance.

defect_n1 := intr_noun_word_le &
  [ STEM < "defect" >,
    SYNSEM.LOCAL.KEYS.KEY _defect_rel ].

:end :instance.


; <<>>

:begin :instance.

defer_v1 := mv_np_trans_le &
  [ STEM < "defer" >,
    SYNSEM.LOCAL.KEYS.KEY _defer_rel ].

:end :instance.


; <<>>

:begin :instance.

definite_a1 := intrans_adj_le &
  [ STEM < "definite" >,
    SYNSEM.LOCAL.KEYS.KEY _definite_rel ].

:end :instance.


; <<>>

:begin :instance.

definitely_adv1 := vp_adv_pre_word_le &
  [ STEM < "definitely" >,
    SYNSEM.LOCAL.KEYS.KEY _definitely_rel ].

:end :instance.


; <<>>

:begin :instance.

definitely_adv2 := s_adv_pre_word_le &
  [ STEM < "definitely" >,
    SYNSEM.LOCAL.KEYS.KEY _definitely_rel ].

:end :instance.


; <<>>

:begin :instance.

definitive_a1 := intrans_adj_le &
  [ STEM < "definitive" >,
    SYNSEM.LOCAL.KEYS.KEY _definitive_rel ].

:end :instance.


; <<>>

:begin :instance.

definitively := adv_word_le &
  [ STEM < "definitively" >,
    SYNSEM.LOCAL.KEYS.KEY _definitively_rel ].

:end :instance.


; <<>>

:begin :instance.

degree_n1 := intr_noun_word_le &
  [ STEM < "degree" >,
    SYNSEM.LOCAL.KEYS.KEY _degree_noun_rel ].

:end :instance.


; <<>>

:begin :instance.

delay_n1 := intr_noun_word_le &
  [ STEM < "delay" >,
    SYNSEM.LOCAL.KEYS.KEY _delay_n_rel ].

:end :instance.


; <<>>

:begin :instance.

delighted_a1 := intrans_adj_le &
  [ STEM < "delighted" >,
    SYNSEM.LOCAL.KEYS.KEY _delighted_rel ].

:end :instance.


; <<>>

:begin :instance.

demand_n1 := intr_noun_word_le &
  [ STEM < "demand" >,
    SYNSEM.LOCAL.KEYS.KEY _demand_n_rel ].

:end :instance.


; <<>>

:begin :instance.

demand_v1 := mv_np_trans_le &
  [ STEM < "demand" >,
    SYNSEM.LOCAL.KEYS.KEY _demand_v_rel ].

:end :instance.


; <<>>

:begin :instance.

demand_v2 := mv_cp_prop_non_trans_le &
  [ STEM < "demand" >,
    SYNSEM.LOCAL.KEYS.KEY _demand_v_h_rel ].

:end :instance.


; <<>>

:begin :instance.

denominator_n1 := intr_noun_word_le &
  [ STEM < "denominator" >,
    SYNSEM.LOCAL.KEYS.KEY _denominator_rel ].

:end :instance.


; <<>>

:begin :instance.

dentist_n1 := intr_noun_word_le &
  [ STEM < "dentist" >,
    SYNSEM.LOCAL.KEYS.KEY _dentist_rel ].

:end :instance.


; <<>>
; MULTIKEY < "dentist" >

:begin :instance.

dentists_a1 := compound_adj_word_mle1 &
  [ STEM < "dentist", "s" >,
    SYNSEM.LOCAL.KEYS.KEY _dentist_adj_rel ].

:end :instance.


; <<>>

:begin :instance.

deny_v1 := mv_np_trans_le &
  [ STEM < "deny" >,
    SYNSEM.LOCAL.KEYS.KEY _deny_rel ].

:end :instance.


; <<>>

:begin :instance.

deny_v2 := mv_cp_non_trans_le &
  [ STEM < "deny" >,
    SYNSEM.LOCAL.KEYS.KEY _deny_h_rel ].

:end :instance.


; <<>>

:begin :instance.

depart_v2 := mv_unerg_le &
  [ STEM < "depart" >,
    SYNSEM.LOCAL.KEYS.KEY _depart_rel ].

:end :instance.


; <<>>

:begin :instance.

department_n1 := intr_noun_word_le &
  [ STEM < "department" >,
    SYNSEM.LOCAL.KEYS.KEY _department_rel ].

:end :instance.


; <<>>

:begin :instance.

departmental_a1 := intrans_adj_le &
  [ STEM < "departmental" >,
    SYNSEM.LOCAL.KEYS.KEY _departmental_rel ].

:end :instance.


; <<>>

:begin :instance.

departure_n1 := noun_ppof_word_le &
  [ STEM < "departure" >,
    SYNSEM.LOCAL.KEYS.KEY _departure_rel ].

:end :instance.


; <<>>

:begin :instance.

depend_on_v1 := mv_empty_prep_intrans_le &
  [ STEM < "depend" >,
    SYNSEM.LOCAL.KEYS [ KEY _depend_on_rel,
			--COMPKEY _on_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

dependent_a1 := trans_adj_le &
  [ STEM < "dependent" >,
    SYNSEM.LOCAL.KEYS [ KEY _dependent_on_rel,
			--COMPKEY _on_rel ] ].

:end :instance.


; <<>>

:begin :instance.

desire_n1 := intr_noun_word_le &
  [ STEM < "desire" >,
    SYNSEM.LOCAL.KEYS.KEY _desire_n_rel ].

:end :instance.


; <<>>

:begin :instance.

desire_v1 := mv_np_trans_le &
  [ STEM < "desire" >,
    SYNSEM.LOCAL.KEYS.KEY _desire_v_rel ].

:end :instance.


; <<>>

:begin :instance.

desire_v2 := mv_subj_equi_le &
  [ STEM < "desire" >,
    SYNSEM.LOCAL.KEYS.KEY _desire_v2_rel ].

:end :instance.


; <<>>

:begin :instance.

desire_v3 := mv_cp_non_trans_le &
  [ STEM < "desire" >,
    SYNSEM.LOCAL.KEYS.KEY _desire_v_h_rel ].

:end :instance.


; <<>>

:begin :instance.

desk_n1 := intr_noun_word_le &
  [ STEM < "desk" >,
    SYNSEM.LOCAL.KEYS.KEY _desk_rel ].

:end :instance.


; <<>>

:begin :instance.

despite := prep_le &
  [ STEM < "despite" >,
    SYNSEM.LOCAL.KEYS.KEY _despite_rel ].

:end :instance.


; <<>>

:begin :instance.

detail_n1 := intr_noun_word_le &
  [ STEM < "detail" >,
    SYNSEM.LOCAL.KEYS.KEY _detail_rel ].

:end :instance.


; <<>>

:begin :instance.

detailed_a1 := intrans_adj_le &
  [ STEM < "detailed" >,
    SYNSEM.LOCAL.KEYS.KEY _detailed_rel ].

:end :instance.


; <<>>

:begin :instance.

determine_v1 := mv_np_trans_le &
  [ STEM < "determine" >,
    SYNSEM.LOCAL.KEYS.KEY _determine_rel ].

:end :instance.


; <<>>

:begin :instance.

determine_v2 := mv_cp_fin_inf_non_trans_le &
  [ STEM < "determine" >,
    SYNSEM.LOCAL.KEYS.KEY _determine_h_rel ].

:end :instance.


; <<>>

:begin :instance.

deutschmark_n1 := intr_noun_word_le &
  [ STEM < "deutschmark" >,
    SYNSEM.LOCAL.KEYS.KEY _deutschmark_rel ].

:end :instance.


; <<>>
; MULTIKEY < "deutsch" >

:begin :instance.

deutschmark_n2 := intr_noun_word_mle1 &
  [ STEM < "deutsch", "mark" >,
    SYNSEM.LOCAL.KEYS.KEY _deutschmark_rel ].

:end :instance.


; <<>>

:begin :instance.

develop_v1 := mv_np_trans_le &
  [ STEM < "develop" >,
    SYNSEM.LOCAL.KEYS.KEY _develop_tr_rel ].

:end :instance.


; <<>>

:begin :instance.

Devito := proper_le &
  [ STEM < "devito" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'devito ].

:end :instance.


; <<>>

:begin :instance.

devote_v1 := mv_to_trans_le &
  [ STEM < "devote" >,
    SYNSEM.LOCAL.KEYS.KEY _devote_rel ].

:end :instance.


; <<>>

:begin :instance.

Dewitt_n1 := proper_le &
  [ STEM < "dewitt" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Dewitt ].

:end :instance.


; <<>>

:begin :instance.

DFKI_n1 := proper_le &
  [ STEM < "dfki" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'DFKI ].

:end :instance.


; <<>>

:begin :instance.

DFKI_n2 := intr_noun_word_le &
  [ STEM < "dfki" >,
    SYNSEM.LOCAL.KEYS.KEY named_rel & [ NAMED 'DFKI ] ].

:end :instance.


; <<>>

:begin :instance.

dial_v1 := mv_np_trans_le &
  [ STEM < "dial" >,
    SYNSEM.LOCAL.KEYS.KEY _dial_rel ].

:end :instance.


; <<>>

:begin :instance.

diary_n1 := intr_noun_word_le &
  [ STEM < "diary" >,
    SYNSEM.LOCAL.KEYS.KEY _diary_rel ].

:end :instance.


; <<>>

:begin :instance.

dicussion_n1 := intr_noun_word_le &
  [ STEM < "dicussion" >,
    SYNSEM.LOCAL.KEYS.KEY _dicussion_rel ].

:end :instance.


; <<>>

:begin :instance.

did1_neg_1 := do_aux_neg_past_le &
  [ STEM < "didn't" > ].

:end :instance.


; <<>>
; MULTIKEY < "didn" >

:begin :instance.

did1_neg_2 := do_aux_neg_past_mle1 &
  [ STEM < "didn", "t" > ].

:end :instance.


; <<>>

:begin :instance.

did1_neg_subj_1 := do_aux_neg_subj_le &
  [ STEM < "didn't" > ].

:end :instance.


; <<>>
; MULTIKEY < "didn" >

:begin :instance.

did1_neg_subj_2 := do_aux_neg_subj_mle1 &
  [ STEM < "didn", "t" > ].

:end :instance.


; <<>>

:begin :instance.

die1 := mv_unacc_le &
  [ STEM < "die" >,
    SYNSEM.LOCAL.KEYS.KEY _die_rel ].

:end :instance.


; <<>>

:begin :instance.

differ_from_v1 := mv_empty_prep*_intrans_le &
  [ STEM < "differ" >,
    SYNSEM.LOCAL.KEYS [ KEY _differ_rel,
			--COMPKEY _from_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

difference_n1 := intr_noun_word_le &
  [ STEM < "difference" >,
    SYNSEM.LOCAL.KEYS.KEY _difference_rel ].

:end :instance.


; <<>>

:begin :instance.

different_a1 := trans_adj_le &
  [ STEM < "different" >,
    SYNSEM.LOCAL.KEYS [ KEY _different_rel,
			--COMPKEY _from_rel ] ].

:end :instance.


; <<>>

:begin :instance.

differently := vp_adv_post_word_le &
  [ STEM < "differently" >,
    SYNSEM.LOCAL.KEYS.KEY _differently_rel ].

:end :instance.


; <<>>

:begin :instance.

difficult_a1 := intrans_adj_le &
  [ STEM < "difficult" >,
    SYNSEM.LOCAL.KEYS.KEY _difficult_rel ].

:end :instance.


; <<>>

:begin :instance.

difficulty_n1 := intr_noun_word_le &
  [ STEM < "difficulty" >,
    SYNSEM.LOCAL.KEYS.KEY _difficulty_rel ].

:end :instance.


; <<>>

:begin :instance.

digest_v1 := mv_np_trans_le &
  [ STEM < "digest" >,
    SYNSEM.LOCAL.KEYS.KEY _digest_rel ].

:end :instance.


; <<>>

:begin :instance.

dine1 := mv_unerg_le & 
  [ STEM < "dine" >,
    SYNSEM.LOCAL.KEYS.KEY _dine_rel ].

:end :instance.


; <<>>

:begin :instance.

dinner_time_n1 := mealtime_word_le &
  [ STEM < "dinner" >,
    SYNSEM.LOCAL.KEYS.KEY _dinner_time_rel ].

:end :instance.


; <<>>

:begin :instance.

dinner_n1 := massn_le &
  [ STEM < "dinner" >,
    SYNSEM.LOCAL.KEYS.KEY _dinner_rel ].

:end :instance.


; <<>>

:begin :instance.

dinner_n2 := intr_noun_word_le &
  [ STEM < "dinner" >,
    SYNSEM.LOCAL.KEYS.KEY _dinner_rel ].

:end :instance.


; <<>>

:begin :instance.

direct_a1 := intrans_adj_le &
  [ STEM < "direct" >,
    SYNSEM.LOCAL.KEYS.KEY _direct_rel ].

:end :instance.


; <<>>

:begin :instance.

direction_n1 := intr_noun_word_le &
  [ STEM < "direction" >,
    SYNSEM.LOCAL.KEYS.KEY _direction_rel ].

:end :instance.


; <<>>

:begin :instance.

directive_n1 := intr_noun_word_le &
  [ STEM < "directive" >,
    SYNSEM.LOCAL.KEYS.KEY _directive_rel ].

:end :instance.


; <<>>

:begin :instance.

directly_adv1 := int_vp_adv_post_word_le &
  [ STEM < "directly" >,
    SYNSEM.LOCAL.KEYS.KEY _directly_rel ].

:end :instance.


; <<>>

:begin :instance.

director_n1 := intr_noun_word_le &
  [ STEM < "director" >,
    SYNSEM.LOCAL.KEYS.KEY _director_rel ].

:end :instance.


; <<>>

:begin :instance.

disadvantageous_a1 := intrans_adj_le &
  [ STEM < "disadvantageous" >,
    SYNSEM.LOCAL.KEYS.KEY _disadvantageous_rel ].

:end :instance.


; <<>>

:begin :instance.

disagree_v1 := mv_unerg_le &
  [ STEM < "disagree" >,
    SYNSEM.LOCAL.KEYS.KEY _disagree_rel ].

:end :instance.


; <<>>

:begin :instance.

disagree_with_v1 := mv_empty_prep_intrans_le &
  [ STEM < "disagree" >,
    SYNSEM.LOCAL.KEYS [ KEY _disagree_with_rel,
			--COMPKEY _with_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

disappoint_v1 := mv_np_trans_le &
  [ STEM < "disappoint" >,
    SYNSEM.LOCAL.KEYS.KEY _disappoint_rel ].

:end :instance.


; <<>>

:begin :instance.

discontinue_v1 := mv_np_trans_le &
  [ STEM < "discontinue" >,
    SYNSEM.LOCAL.KEYS.KEY _discontinue_rel ].

:end :instance.


; <<>>

:begin :instance.

discover_v1 := mv_np_trans_le &
  [ STEM < "discover" >,
    SYNSEM.LOCAL.KEYS.KEY _discover_rel ].

:end :instance.


; <<>>

:begin :instance.

discover_v2 := mv_unerg_le &
  [ STEM < "discover" >,
    SYNSEM.LOCAL.KEYS.KEY _discover_rel ].

:end :instance.


; <<>>

:begin :instance.

discover_v3 := mv_cp_fin_inf_non_trans_le &
  [ STEM < "discover" >,
    SYNSEM.LOCAL.KEYS.KEY _discover_h_rel ].

:end :instance.


; <<>>

:begin :instance.

discuss_v1 := mv_np_trans_le &
  [ STEM < "discuss" >,
    SYNSEM.LOCAL.KEYS.KEY _discuss_rel ].

:end :instance.


; <<>>

:begin :instance.

discussion_n2 := massn_le &
  [ STEM < "discussion" >,
    SYNSEM.LOCAL.KEYS.KEY _discussion_rel ].

:end :instance.


; <<>>

:begin :instance.

dislike_v1 := mv_np_trans_le &
  [ STEM < "dislike" >,
    SYNSEM.LOCAL.KEYS.KEY _dislike_rel ].

:end :instance.


; <<>>

:begin :instance.

displace_v1 := mv_np_trans_le &
  [ STEM < "displace" >,
    SYNSEM.LOCAL.KEYS.KEY _displace_rel ].

:end :instance.


; <<>>

:begin :instance.

disposal_n1 := massn_le &
  [ STEM < "disposal" >,
    SYNSEM.LOCAL.KEYS.KEY _disposal_rel ].

:end :instance.


; <<>>

:begin :instance.

distance_n1 := intr_noun_word_le &
  [ STEM < "distance" >,
    SYNSEM.LOCAL.KEYS.KEY _distance_rel ].

:end :instance.


; <<>>

:begin :instance.

distance_n2 := massn_le &
  [ STEM < "distance" >,
    SYNSEM.LOCAL.KEYS.KEY _distance_rel ].

:end :instance.


; <<>>

:begin :instance.

distasteful_a1 := intrans_adj_le &
  [ STEM < "distasteful" >,
    SYNSEM.LOCAL.KEYS.KEY _distasteful_rel ].

:end :instance.


; <<>>

:begin :instance.

distract_v1 := mv_np_trans_le &
  [ STEM < "distract" >,
    SYNSEM.LOCAL.KEYS.KEY _distract_rel ].

:end :instance.


; <<>>

:begin :instance.

distress_n1 := massn_le &
  [ STEM < "distress" >,
    SYNSEM.LOCAL.KEYS.KEY _distress_rel ].

:end :instance.


; <<>>

:begin :instance.

distribute_v1 := mv_np_trans_le &
  [ STEM < "distribute" >,
    SYNSEM.LOCAL.KEYS.KEY _distribute_rel ].

:end :instance.


; <<>>

:begin :instance.

distribution_n1 := massn_le &
  [ STEM < "distribution" >,
    SYNSEM.LOCAL.KEYS.KEY _distribution_rel ].

:end :instance.


; <<>>

:begin :instance.

disturb_v1 := mv_np_trans_le &
  [ STEM < "disturb" >,
    SYNSEM.LOCAL.KEYS.KEY _disturb_rel ].

:end :instance.


; <<>>

:begin :instance.

divide_v1 := mv_np_trans_le &
  [ STEM < "divide" >,
    SYNSEM.LOCAL.KEYS.KEY _divide_rel ].

:end :instance.


; <<>>

:begin :instance.

do2 := mv_np_trans_le &
  [ STEM < "do" >,
    SYNSEM.LOCAL.KEYS.KEY _do_rel &
	                  [ ARG3 non_expl-ind ] ].

:end :instance.


; <<>>

:begin :instance.

do_v3 := mv_unerg_le &
  [ STEM < "do" >,
    SYNSEM.LOCAL [ CAT.HEAD.VFORM bse,
		   KEYS.KEY _do_suffice_rel ] ].

:end :instance.


; <<>>

:begin :instance.

do1_pos := do_fin_aux_le &
  [ STEM < "do" > ].

:end :instance.


; <<>>

:begin :instance.

does1_pos := does_aux_le &
  [ STEM < "does" > ].

:end :instance.


; <<>>

:begin :instance.

did1_pos := did_aux_le &
  [ STEM < "did" > ].

:end :instance.


; <<>>

:begin :instance.

do_adv := mv_adv_le &
  [ STEM < "do" >,
    SYNSEM.LOCAL.KEYS.KEY _do_rel ].

:end :instance.


; <<>>

:begin :instance.

do_without_v1 := mv_empty_prep_intrans_le &
  [ STEM < "do" >,
    SYNSEM.LOCAL.KEYS [ KEY _do_without_rel,
			--COMPKEY _without_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

doable_a1 := intrans_adj_le &
  [ STEM < "doable" >,
    SYNSEM.LOCAL.KEYS.KEY _doable_rel ].

:end :instance.


; <<>>

:begin :instance.

doctor_n1 := intr_noun_word_le &
  [ STEM < "doctor" >,
    SYNSEM.LOCAL.KEYS.KEY _doctor_rel ].

:end :instance.


; <<>>

:begin :instance.

doctor_ttl := title_le &
  [ STEM < "doctor" >,
    SYNSEM.LOCAL.KEYS.KEY _doctor_ttl_rel ].

:end :instance.


; <<>>
; MULTIKEY < "doctor" >

:begin :instance.

doctors_a1 := compound_adj_word_mle1 &
  [ STEM < "doctor", "s" >,
    SYNSEM.LOCAL.KEYS.KEY _doctors_rel ].

:end :instance.


; <<>>

:begin :instance.

doctors_a1_apos := intrans_adj_le &
  [ STEM < "doctor's" >,
    SYNSEM.LOCAL.KEYS.KEY _doctors_rel ].

:end :instance.


; <<>>

:begin :instance.

doctoral_a1 := intrans_adj_le &
  [ STEM < "doctoral" >,
    SYNSEM.LOCAL.KEYS.KEY _doctoral_rel ].

:end :instance.


; <<>>

:begin :instance.

document_n1 := intr_noun_word_le &
  [ STEM < "document" >,
    SYNSEM.LOCAL.KEYS.KEY _document_rel ].

:end :instance.


; <<>>

:begin :instance.

does1_neg_1 := doesnt_aux_neg_pres_le &
  [ STEM < "doesn't" > ].

:end :instance.


; <<>>
; MULTIKEY < "doesn" >

:begin :instance.

does1_neg_2 := doesnt_aux_neg_pres_mle1 &
  [ STEM < "doesn", "t" > ].

:end :instance.


; <<>>

:begin :instance.

dollar_n1 := intr_noun_word_le &
  [ STEM < "dollar" >,
    SYNSEM.LOCAL.KEYS.KEY _dollar_rel ].

:end :instance.


; <<>>

:begin :instance.

domain_n1 := intr_noun_word_le &
  [ STEM < "domain" >,
    SYNSEM.LOCAL.KEYS.KEY _domain_rel ].

:end :instance.


; <<>>

:begin :instance.

dont_1 := dont_imp_le &
  [ STEM < "don't" > ].

:end :instance.


; <<>>
; MULTIKEY < "don" >

:begin :instance.

dont_2 := dont_imp_mle1 &
  [ STEM < "don", "t" > ].

:end :instance.


; <<>>
; MULTIKEY < "do" >

:begin :instance.

dont_3 := dont_imp_mle1 &
  [ STEM < "do", "not" > ].

:end :instance.


; <<>>

:begin :instance.

do1_neg_1 := dont_aux_neg_pres_le &
  [ STEM < "don't" > ].

:end :instance.


; <<>>
; MULTIKEY < "don" >

:begin :instance.

do1_neg_2 := dont_aux_neg_pres_mle1 &
  [ STEM < "don", "t" > ].

:end :instance.


; <<>>

:begin :instance.

donate1 := mv_to*_trans_le &
  [ STEM < "donate" >,
    SYNSEM.LOCAL.KEYS.KEY _donate_rel ].

:end :instance.


; <<>>

:begin :instance.

donation_n1 := intr_noun_word_le &
  [ STEM < "donation" >,
    SYNSEM.LOCAL.KEYS.KEY _donation_rel ].

:end :instance.


; <<>>

:begin :instance.

doom_n1 := massn_le &
  [ STEM < "doom" >,
    SYNSEM.LOCAL.KEYS.KEY _doom_rel ].

:end :instance.


; <<>>

:begin :instance.

dorm_n1 := intr_noun_word_le &
  [ STEM < "dorm" >,
    SYNSEM.LOCAL.KEYS.KEY _dorm_rel ].

:end :instance.


; <<>>

:begin :instance.

double_a1 := intrans_adj_le &
  [ STEM < "double" >,
    SYNSEM.LOCAL.KEYS.KEY _double_rel ].

:end :instance.


; <<>>

:begin :instance.

doubtless_adv1 := vp_adv_pre_word_le &
  [ STEM < "doubtless" >,
    SYNSEM.LOCAL.KEYS.KEY _doubtless_rel ].

:end :instance.


; <<>>

:begin :instance.

doubtless_adv2 := s_adv_pre_word_le &
  [ STEM < "doubtless" >,
    SYNSEM.LOCAL.KEYS.KEY _doubtless_rel ].

:end :instance.


; <<>>

:begin :instance.

down := prep_optcomp_le &
  [ STEM < "down" >,
    SYNSEM.LOCAL.KEYS.KEY _down_rel_a ].

:end :instance.


; <<>>

:begin :instance.

downright_deg := degree_spec_le &
  [ STEM < "downright" >,
    SYNSEM.LOCAL.KEYS.KEY _downright_deg_rel ].

:end :instance.


; <<>>

:begin :instance.

downstroke_n1 := intr_noun_word_le &
  [ STEM < "downstroke" >,
    SYNSEM.LOCAL.KEYS.KEY _downstroke_rel ].

:end :instance.


; <<>>

:begin :instance.

dr_ttl := title_le &
  [ STEM < "dr" >,
    SYNSEM.LOCAL.KEYS.KEY _doctor_ttl_rel ].

:end :instance.


; <<>>

:begin :instance.

draft_n1 := intr_noun_word_le &
  [ STEM < "draft" >,
    SYNSEM.LOCAL.KEYS.KEY _draft_rel ].

:end :instance.


; <<>>

:begin :instance.

draw_aside_v1 := mv_particle_np_le &
  [ STEM < "draw" >,
    SYNSEM.LOCAL.KEYS [ KEY _draw_aside_rel,
			--COMPKEY _aside_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

draw_aside_v2 := mv_particle_le &
  [ STEM < "draw" >,
    SYNSEM.LOCAL.KEYS [ KEY _draw_aside_rel,
			--COMPKEY _aside_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

draw_away_v1 := mv_particle_np_le &
  [ STEM < "draw" >,
    SYNSEM.LOCAL.KEYS [ KEY _draw_away_rel,
			--COMPKEY _away_adv_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

draw_away_v2 := mv_particle_le &
  [ STEM < "draw" >,
    SYNSEM.LOCAL.KEYS [ KEY _draw_away_rel,
			--COMPKEY _away_adv_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

draw_back_v1 := mv_particle_np_le &
  [ STEM < "draw" >,
    SYNSEM.LOCAL.KEYS [ KEY _draw_back_rel,
			--COMPKEY _back_adv_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

draw_back_v2 := mv_particle_le &
  [ STEM < "draw" >,
    SYNSEM.LOCAL.KEYS [ KEY _draw_back_rel,
			--COMPKEY _back_adv_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

draw_forth_v1 := mv_particle_np_le &
  [ STEM < "draw" >,
    SYNSEM.LOCAL.KEYS [ KEY _draw_forth_rel,
			--COMPKEY _forth_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

draw_on_v1 := mv_prep_particle_np_le &
  [ STEM < "draw" >,
    SYNSEM.LOCAL.KEYS [ KEY _draw_on_rel,
			--COMPKEY _on_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

drawing_n1 := intr_noun_word_le &
  [ STEM < "drawing" >,
    SYNSEM.LOCAL.KEYS.KEY _drawing_rel ].

:end :instance.


; <<>>

:begin :instance.

Dresden_n1 := proper_le &
  [ STEM < "dresden" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Dresden ].

:end :instance.


; <<>>

:begin :instance.

drink_n1 := intr_noun_word_le &
  [ STEM < "drink" >,
    SYNSEM.LOCAL.KEYS.KEY _drink_n_rel ].

:end :instance.


; <<>>

:begin :instance.

drink_v1 := mv_np*_trans_le &
  [ STEM < "drink" >,
    SYNSEM.LOCAL.KEYS.KEY _drink_v_rel ].

:end :instance.


; <<>>

:begin :instance.

drive_v1 := mv_np_trans_le &
  [ STEM < "drive" >,
    SYNSEM.LOCAL.KEYS.KEY _drive_rel ].

:end :instance.


; <<>>

:begin :instance.

driver_n1 := intr_noun_word_le &
  [ STEM < "driver" >,
    SYNSEM.LOCAL.KEYS.KEY _driver_rel ].

:end :instance.


; <<>>

:begin :instance.

drop_v1 := mv_np_trans_le &
  [ STEM < "drop" >,
    SYNSEM.LOCAL.KEYS.KEY _drop_rel ].

:end :instance.


; <<>>

:begin :instance.

drop_v2 := mv_unacc_le &
  [ STEM < "drop" >,
    SYNSEM.LOCAL.KEYS.KEY _drop_und_rel ].

:end :instance.

; <<>>

:begin :instance.

drop_n1 := intr_noun_word_le &
  [ STEM < "drop" >,
    SYNSEM.LOCAL.KEYS.KEY _drop_n_rel ].

:end :instance.


; <<>>

:begin :instance.

drunk_a1 := intrans_adj_le &
  [ STEM < "drunk" >,
    SYNSEM.LOCAL.KEYS.KEY _drunk_rel ].

:end :instance.


; <<>>

:begin :instance.

due_a1 := intrans_adj_le &
  [ STEM < "due" >,
    SYNSEM.LOCAL.KEYS.KEY _due_rel ].

:end :instance.


; <<>>
; MULTIKEY < "due" >

:begin :instance.

due_to_p := prep_mle1 &
  [ STEM < "due", "to" >,
    SYNSEM.LOCAL.KEYS.KEY _due_to_rel ].

:end :instance.


; <<>>

:begin :instance.

dummy_a1 := intrans_adj_le &
  [ STEM < "dummy" >,
    SYNSEM.LOCAL.KEYS.KEY _dummy_rel ].

:end :instance.


; <<>>

:begin :instance.

duration_n1 := noun_ppof_word_le &
  [ STEM < "duration" >,
    SYNSEM.LOCAL.KEYS.KEY _duration_rel ].

:end :instance.


; <<>>

:begin :instance.

during := prep_le &
  [ STEM < "during" >,
    SYNSEM.LOCAL.KEYS.KEY _during_rel ].

:end :instance.


; <<>>

:begin :instance.

Dusseldorf_n1 := proper_le &
  [ STEM < "dusseldorf" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Dusseldorf ].

:end :instance.


; <<>>

:begin :instance.

duty_n1 := intr_noun_word_le &
  [ STEM < "duty" >,
    SYNSEM.LOCAL.KEYS.KEY _duty_rel ].

:end :instance.


; <<>>

:begin :instance.

duty_n2 := massn_le &
  [ STEM < "duty" >,
    SYNSEM.LOCAL.KEYS.KEY _duty_rel ].

:end :instance.


; <<>>

:begin :instance.

each := pdet_sg_le &
  [ STEM < "each" >,
    SYNSEM.LOCAL.KEYS.KEY _each_rel ].

:end :instance.


; <<>>
; MULTIKEY < "each" >

:begin :instance.

each_other := recip_pro_mle1 &
  [ STEM < "each", "other" >,
    SYNSEM.LOCAL.KEYS.KEY.INST.PNG png & [ PN non1sg ] ].

:end :instance.


; <<>>

:begin :instance.

earlier_a1 := comp_adj_le &
  [ STEM < "earlier" >,
    SYNSEM.LOCAL.KEYS.KEY _early_rel ].

:end :instance.


; <<>>

:begin :instance.

earliest_a1 := superl_adj_le &
  [ STEM < "earliest" >,
    SYNSEM.LOCAL.KEYS.KEY _early_rel ].

:end :instance.


; <<>>

:begin :instance.

early_a1 := intrans_adj_le &
  [ STEM < "early" >,
    SYNSEM.LOCAL.KEYS.KEY _early_rel ].

:end :instance.


; <<>>

:begin :instance.

early := int_vp_adv_post_word_le &
  [ STEM < "early" >,
    SYNSEM.LOCAL.KEYS.KEY _early_adv_rel ].

:end :instance.


; <<>>

:begin :instance.

earlier_adv1 := comp_vp_adv_word_le &
  [ STEM < "earlier" >,
    SYNSEM.LOCAL.KEYS.KEY _early_adv_rel ].

:end :instance.


; <<>>

:begin :instance.

earnest_a1 := intrans_adj_le &
  [ STEM < "earnest" >,
    SYNSEM.LOCAL.KEYS.KEY _earnest_rel ].

:end :instance.


; <<>>

:begin :instance.

easily_adv1 := vp_adv_pre_word_le &
  [ STEM < "easily" >,
    SYNSEM.LOCAL.KEYS.KEY _easily_rel ].

:end :instance.


; <<>>

:begin :instance.

easily_adv2 := s_adv_pre_word_le &
  [ STEM < "easily" >,
    SYNSEM.LOCAL.KEYS.KEY _easily_rel ].

:end :instance.


; <<>>

:begin :instance.

easter := holiday_word_le &
  [ STEM < "easter" >,
    SYNSEM.LOCAL.KEYS.KEY.DAY 'easter ].

:end :instance.


; <<>>
; MULTIKEY < "easter" >

:begin :instance.

easter_monday := holiday_word_mle1 &
  [ STEM < "easter", "monday" >,
    SYNSEM.LOCAL.KEYS.KEY.DAY 'easter_monday ].

:end :instance.


; <<>>
; MULTIKEY < "easter" >

:begin :instance.

easter_sunday := holiday_word_mle1 &
  [ STEM < "easter", "sunday" >,
    SYNSEM.LOCAL.KEYS.KEY.DAY 'easter_sunday ].

:end :instance.


; <<>>
; MULTIKEY < "easter" >

:begin :instance.

easter_weekend := holiday_word_mle1 &
  [ STEM < "easter", "weekend" >,
    SYNSEM.LOCAL.KEYS.KEY.DAY 'easter_weekend ].

:end :instance.


; <<>>

:begin :instance.

easy_a1 := intrans_adj_le &
  [ STEM < "easy" >,
    SYNSEM.LOCAL.KEYS.KEY _easy_adj_rel ].

:end :instance.


; <<>>

:begin :instance.

easier_a1 := comp_adj_le &
  [ STEM < "easier" >,
    SYNSEM.LOCAL.KEYS.KEY _easy_adj_rel ].

:end :instance.


; <<>>

:begin :instance.

easiest := superl_adj_le &
  [ STEM < "easiest" >,
    SYNSEM.LOCAL.KEYS.KEY _easy_adj_rel ].

:end :instance.


; <<>>

:begin :instance.

eat1 := mv_np*_trans_le &
  [ STEM < "eat" >,
    SYNSEM.LOCAL.KEYS.KEY _eat_rel ].

:end :instance.


; <<>>

:begin :instance.

education_n1 := massn_le &
  [ STEM < "education" >,
    SYNSEM.LOCAL.KEYS.KEY _education_rel ].

:end :instance.


; <<>>

:begin :instance.

educational_a1 := intrans_adj_le &
  [ STEM < "educational" >,
    SYNSEM.LOCAL.KEYS.KEY _educational_rel ].

:end :instance.


; <<>>

:begin :instance.

effect_n1 := intr_noun_word_le &
  [ STEM < "effect" >,
    SYNSEM.LOCAL.KEYS.KEY _effect_rel ].

:end :instance.


; <<>>

:begin :instance.

efficient_a1 := intrans_adj_le &
  [ STEM < "efficient" >,
    SYNSEM.LOCAL.KEYS.KEY _efficient_rel ].

:end :instance.


; <<>>

:begin :instance.

eh_root := disc_adv_le &
  [ STEM < "eh" >,
    SYNSEM.LOCAL.KEYS.KEY excl_rel & [ EXCL 'eh ] ].

:end :instance.


; <<>>

:begin :instance.

eight := bare_unspecified_card_le & 
  [  STEM < "eight" >,
     SYNSEM.LOCAL [ CAT.HEAD intadj1,
		    KEYS.KEY.CONST_VALUE "8" ] ].
:end :instance.


; <<>>

:begin :instance.

eight_hour := hour_word_le &
  [ STEM < "eight" >,
    SYNSEM.LOCAL.KEYS.KEY.HOUR "8" ].

:end :instance.


; <<>>

:begin :instance.

eight_adjnoun := numadj_noun_word_le & 
  [ STEM < "eight" >,
    SYNSEM.LOCAL.KEYS.ALTKEY.CONST_VALUE "8" ].

:end :instance.


; <<>>

:begin :instance.

eighteen := bare_unspecified_card_le & 
  [  STEM < "eighteen" >,
     SYNSEM.LOCAL [ CAT.HEAD intadj2,
		    KEYS.KEY.CONST_VALUE "18" ] ].
:end :instance.


; <<>>

:begin :instance.

eighteenth := ordinal_adj_le &
  [ STEM < "eighteenth" >,
    SYNSEM.LOCAL.KEYS.KEY.ORD "18" ].

:end :instance.


; <<>>

:begin :instance.

eighteenth_day := day_of_month_le &
  [ STEM < "eighteenth" >,
    SYNSEM.LOCAL.KEYS.KEY.DAY "18" ].

:end :instance.


; <<>>

:begin :instance.

eighth := ordinal_adj_le &
  [ STEM < "eighth" >,
    SYNSEM.LOCAL.KEYS.KEY.ORD "8" ].

:end :instance.


; <<>>

:begin :instance.

eighth_day := day_of_month_le &
  [ STEM < "eighth" >,
    SYNSEM.LOCAL.KEYS.KEY.DAY "8" ].

:end :instance.


; <<>>

:begin :instance.

eighty_w_comps := complemented_unspecified_card_le & 
  [ STEM < "eighty" >,
    SYNSEM.LOCAL [ CAT [ HEAD intadj2,
			 VAL.COMPS.FIRST.LOCAL.CAT.HEAD intadj1 ],
		   KEYS.KEY.CONST_VALUE "80" ] ].
:end :instance.


; <<>>

:begin :instance.

eighty := bare_unspecified_card_le & 
  [  STEM < "eighty" >,
     SYNSEM.LOCAL [ CAT.HEAD intadj2,
		    KEYS.KEY.CONST_VALUE "80" ] ].
:end :instance.


; <<>>

:begin :instance.

either_conj := coord_a_le &
  [ STEM < "either" >,
    SYNSEM.LOCAL.CONJ either ].

:end :instance.


; <<>>

:begin :instance.

either := adv_post_word_le &
  [ STEM < "either" >,
    SYNSEM.LOCAL.KEYS.KEY _either_also_rel ].

:end :instance.


; <<>>

:begin :instance.

either_det := pdet_le &
  [ STEM < "either" >,
    SYNSEM.LOCAL.KEYS.KEY _either_rel ].

:end :instance.


; <<>>

:begin :instance.

elect_v1 := mv_subj_equi_le &
  [ STEM < "elect" >,
    SYNSEM.LOCAL.KEYS.KEY _elect_rel ].

:end :instance.


; <<>>

:begin :instance.

eleven := bare_unspecified_card_le & 
  [  STEM < "eleven" >,
     SYNSEM.LOCAL [ CAT.HEAD intadj2,
		    KEYS.KEY.CONST_VALUE "11" ] ].
:end :instance.


; <<>>

:begin :instance.

eleven_hour := hour_word_le &
  [ STEM < "eleven" >,
    SYNSEM.LOCAL.KEYS.KEY.HOUR "11" ].

:end :instance.


; <<>>

:begin :instance.

eleventh := ordinal_adj_le &
  [ STEM < "eleventh" >,
    SYNSEM.LOCAL.KEYS.KEY.ORD "11" ].

:end :instance.


; <<>>

:begin :instance.

eleventh_day := day_of_month_le &
  [ STEM < "eleventh" >,
    SYNSEM.LOCAL.KEYS.KEY.DAY "11" ].

:end :instance.


; <<>>

:begin :instance.

embarrassed_a1 := intrans_adj_le &
  [ STEM < "embarrassed" >,
    SYNSEM.LOCAL.KEYS.KEY _embarrassed_rel ].

:end :instance.


; <<>>

:begin :instance.

emergency_n1 := intr_noun_word_le &
  [ STEM < "emergency" >,
    SYNSEM.LOCAL.KEYS.KEY _emergency_rel ].

:end :instance.


; <<>>

:begin :instance.

eminent_a1 := intrans_adj_le &
  [ STEM < "eminent" >,
    SYNSEM.LOCAL.KEYS.KEY _eminent_rel ].

:end :instance.


; <<>>

:begin :instance.

employ_v1 := mv_np_trans_le &
  [ STEM < "employ" >,
    SYNSEM.LOCAL.KEYS.KEY _employ_rel ].

:end :instance.


; <<>>

:begin :instance.

employee_n1 := intr_noun_word_le &
  [ STEM < "employee" >,
    SYNSEM.LOCAL.KEYS.KEY _employee_rel ].

:end :instance.


; <<>>

:begin :instance.

employer_n1 := intr_noun_word_le &
  [ STEM < "employer" >,
    SYNSEM.LOCAL.KEYS.KEY _employer_rel ].

:end :instance.


; <<>>

:begin :instance.

emptiness_n1 := massn_le &
  [ STEM < "emptiness" >,
    SYNSEM.LOCAL.KEYS.KEY _emptiness_rel ].

:end :instance.


; <<>>

:begin :instance.

empty_a1 := intrans_adj_le &
  [ STEM < "empty" >,
    SYNSEM.LOCAL.KEYS.KEY _empty_rel ].

:end :instance.


; <<>>

:begin :instance.

enable_v1 := mv_obj_equi_le &
  [ STEM < "enable" >,
    SYNSEM.LOCAL.KEYS.KEY _enable_rel ].

:end :instance.


; <<>>

:begin :instance.

encourage1 := mv_obj_equi_le &
  [ STEM < "encourage" >,
    SYNSEM.LOCAL.KEYS.KEY _encourage2_rel ].

:end :instance.


; <<>>

:begin :instance.

encourage_v1 := mv_np_trans_cp_prop_le &
  [ STEM < "encourage" >,
    SYNSEM.LOCAL.KEYS.KEY _encourage_rel ].

:end :instance.


; <<>>

:begin :instance.

end1 := noun_ppof_word_le &
  [ STEM < "end" >,
    SYNSEM.LOCAL.KEYS.KEY _end_rel ].

:end :instance.


; <<>>

:begin :instance.

end_v1 := mv_unacc_le &
  [ STEM < "end" >,
    SYNSEM.LOCAL.KEYS.KEY _end_v_rel ].

:end :instance.


; <<>>

:begin :instance.

endorse_v1 := mv_np_trans_le &
  [ STEM < "endorse" >,
    SYNSEM.LOCAL.KEYS.KEY _endorse_rel ].

:end :instance.


; <<>>

:begin :instance.

engage_in_v1 := mv_empty_prep_trans*_le &
  [ STEM < "engage" >,
    SYNSEM.LOCAL.KEYS [ KEY _engage_in_rel,
			--OCOMPKEY _in_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

engaged_a1 := intrans_adj_le &
  [ STEM < "engaged" >,
    SYNSEM.LOCAL.KEYS.KEY _engaged_rel ].

:end :instance.


; <<>>

:begin :instance.

engineer_n1 := intr_noun_word_le &
  [ STEM < "engineer" >,
    SYNSEM.LOCAL.KEYS.KEY _engineer_rel ].

:end :instance.


; <<>>

:begin :instance.

english_a1 := intrans_adj_le &
  [ STEM < "english" >,
    SYNSEM.LOCAL.KEYS.KEY _english_rel ].

:end :instance.


; <<>>

:begin :instance.

English_n1 := proper_le &
  [ STEM < "english" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'English ].

:end :instance.


; <<>>

:begin :instance.

english_n2 := intr_noun_word_le &
  [ STEM < "english" >,
    SYNSEM.LOCAL.KEYS.KEY _english_n_rel ].

:end :instance.


; <<>>

:begin :instance.

enjoy_v1 := mv_np_trans_le &
  [ STEM < "enjoy" >,
    SYNSEM.LOCAL.KEYS.KEY _enjoy_rel ].

:end :instance.


; <<>>

:begin :instance.

enjoy_v2 := mv_subj_equi_prp_le &
  [ STEM < "enjoy" >,
    SYNSEM.LOCAL.KEYS.KEY _enjoy2_rel ].

:end :instance.


; <<>>

:begin :instance.

enormous_a1 := intrans_adj_le &
  [ STEM < "enormous" >,
    SYNSEM.LOCAL.KEYS.KEY _enormous_rel ].

:end :instance.


; <<>>

:begin :instance.

enough_det := pdet_pl_mass_le &
  [ STEM < "enough" >,
    SYNSEM.LOCAL.KEYS.KEY _enough_rel ].

:end :instance.


; <<>>

:begin :instance.

enough := int_vp_adv_post_word_le &
  [ STEM < "enough" >,
    SYNSEM.LOCAL.KEYS.KEY _enough_isect_rel ].

:end :instance.


; <<>>

:begin :instance.

entertainment_n1 := massn_le &
  [ STEM < "entertainment" >,
    SYNSEM.LOCAL.KEYS.KEY _entertainment_rel ].

:end :instance.


; <<>>

:begin :instance.

entire_a1 := intrans_adj_le &
  [ STEM < "entire" >,
    SYNSEM.LOCAL.KEYS.KEY _entire_rel ].

:end :instance.


; <<>>

:begin :instance.

entirely_adv1 := int_vp_adv_post_word_le &
  [ STEM < "entirely" >,
    SYNSEM.LOCAL.KEYS.KEY _entirely_adv_rel ].

:end :instance.


; <<>>

:begin :instance.

entrance_n1 := intr_noun_word_le &
  [ STEM < "entrance" >,
    SYNSEM.LOCAL.KEYS.KEY _entrance_rel ].

:end :instance.


; <<>>

:begin :instance.

entry_n1 := intr_noun_word_le &
  [ STEM < "entry" >,
    SYNSEM.LOCAL.KEYS.KEY _entry_rel ].

:end :instance.


; <<>>

:begin :instance.

envisage_v1 := mv_np_trans_le &
  [ STEM < "envisage" >,
    SYNSEM.LOCAL.KEYS.KEY _envisage_rel ].

:end :instance.


; <<>>

:begin :instance.

epiphany := holiday_word_le &
  [ STEM < "epiphany" >,
    SYNSEM.LOCAL.KEYS.KEY.DAY 'epiphany ].

:end :instance.


; <<>>

:begin :instance.

equal_a1 := trans_adj_le &
  [ STEM < "equal" >,
    SYNSEM.LOCAL.KEYS [ KEY _equal_adj_rel,
			--COMPKEY _to_rel ] ].

:end :instance.


; <<>>

:begin :instance.

equal_v1 := mv_np_trans_le &
  [ STEM < "equal" >,
    SYNSEM.LOCAL.KEYS.KEY _equal_v_rel ].

:end :instance.


; <<>>

:begin :instance.

equally_deg := degree_spec_le &
  [ STEM < "equally" >,
    SYNSEM.LOCAL.KEYS.KEY _equally_deg_rel ].

:end :instance.


; <<>>

:begin :instance.

equipment_n1 := massn_le &
  [ STEM < "equipment" >,
    SYNSEM.LOCAL.KEYS.KEY _equipment_rel ].

:end :instance.


; <<>>

:begin :instance.

er_root := disc_adv_le &
  [ STEM < "er" >,
    SYNSEM.LOCAL.KEYS.KEY excl_rel & [ EXCL 'er ] ].

:end :instance.


; <<>>

:begin :instance.

Erfurt_n1 := proper_le &
  [ STEM < "erfurt" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Erfurt ].

:end :instance.


; <<>>

:begin :instance.

escape_v1 := mv_np*_trans_le &
  [ STEM < "escape" >,
    SYNSEM.LOCAL.KEYS.KEY _escape_v_rel ].

:end :instance.


; <<>>

:begin :instance.

especially_deg := degree_spec_le &
  [ STEM < "especially" >,
    SYNSEM.LOCAL.KEYS.KEY _especially_deg_rel ].

:end :instance.


; <<>>

:begin :instance.

especially := vp_adv_word_le &
  [ STEM < "especially" >,
    SYNSEM.LOCAL.KEYS.KEY _especially_rel ].

:end :instance.


; <<>>

:begin :instance.

esquire_ttl := post_title_le &
  [ STEM < "esq" >,
    SYNSEM.LOCAL.KEYS.KEY _esquire_rel ].

:end :instance.


; <<>>

:begin :instance.

essential_a1 := intrans_adj_le &
  [ STEM < "essential" >,
    SYNSEM.LOCAL.KEYS.KEY _essential_rel ].

:end :instance.


; <<>>

:begin :instance.

essentially_adv1 := vp_adv_pre_word_le &
  [ STEM < "essentially" >,
    SYNSEM.LOCAL.KEYS.KEY _essentially_rel ].

:end :instance.


; <<>>

:begin :instance.

essentially_adv2 := s_adv_pre_word_le &
  [ STEM < "essentially" >,
    SYNSEM.LOCAL.KEYS.KEY _essentially_rel ].

:end :instance.


; <<>>

:begin :instance.

esteemed_a1 := intrans_adj_le &
  [ STEM < "esteemed" >,
    SYNSEM.LOCAL.KEYS.KEY _esteemed_rel ].

:end :instance.


; <<>>

:begin :instance.

Ettlingen_n1 := proper_le &
  [ STEM < "ettlingen" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Ettlingen ].

:end :instance.


; <<>>

:begin :instance.

evaluate_v1 := mv_np_trans_le &
  [ STEM < "evaluate" >,
    SYNSEM.LOCAL.KEYS.KEY _evaluate_rel ].

:end :instance.


; <<>>

:begin :instance.

Eve_n1 := proper_le &
  [ STEM < "eve" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Eve ].

:end :instance.


; <<>>

:begin :instance.

even_adv1 := vp_adv_pre_word_le &
  [ STEM < "even" >,
    SYNSEM.LOCAL.KEYS.KEY _even_adv_rel ].

:end :instance.


; <<>>

:begin :instance.

even_adv2 := s_adv_pre_word_le &
  [ STEM < "even" >,
    SYNSEM.LOCAL.KEYS.KEY _even_adv_rel ].

:end :instance.


; <<>>

:begin :instance.

even_adj := intrans_adj_le &
  [ STEM < "even" >,
    SYNSEM.LOCAL.KEYS.KEY _even_rel ].

:end :instance.


; <<>>

:begin :instance.

evening_sg_n1 := day_part_word_le &
  [ STEM < "evening" >,
    SYNSEM.LOCAL.KEYS.KEY _evening_rel & [ INST [ PNG png & [ PN 3sg*,
							      GEN neut* ],
						    DIVISIBLE - ] ] ].

:end :instance.


; <<>>

:begin :instance.

evening_pl_n1 := day_part_word_le &
  [ STEM < "evenings" >,
    SYNSEM.LOCAL.KEYS.KEY _evening_rel & [ INST.PNG png & [ PN 3pl* ] ] ].

:end :instance.


; <<>>

:begin :instance.

evening_sg_def := def_day_part_word_le &
  [ STEM < "evening" >,
    SYNSEM.LOCAL.KEYS.KEY _def_evening_rel  & 
	                  [ INST [ PNG png & [ PN 3sg*,
					       GEN neut* ],
				   DIVISIBLE - ] ] ].

:end :instance.


; <<>>

:begin :instance.

evening_pl_def := def_day_part_word_le &
  [ STEM < "evenings" >,
    SYNSEM.LOCAL.KEYS.KEY _def_evening_rel &
	                  [ INST.PNG png & [ PN 3pl* ] ] ].

:end :instance.


; <<>>

:begin :instance.

evenly_adv1 := vp_adv_word_le &
  [ STEM < "evenly" >,
    SYNSEM.LOCAL.KEYS.KEY _evenly_rel ].

:end :instance.


; <<>>

:begin :instance.

event_n1 := intr_noun_word_le &
  [ STEM < "event" >,
    SYNSEM.LOCAL.KEYS.KEY _event_item_rel ].

:end :instance.


; <<>>

:begin :instance.

eventual_a1 := intrans_adj_le &
  [ STEM < "eventual" >,
    SYNSEM.LOCAL.KEYS.KEY _eventual_isect_rel ].

:end :instance.


; <<>>

:begin :instance.

eventually_adv1 := vp_adv_word_le &
  [ STEM < "eventually" >,
    SYNSEM.LOCAL.KEYS.KEY _eventually_isect_rel ].

:end :instance.


; <<>>

:begin :instance.

ever_adv1 := vp_adv_pre_word_le &
  [ STEM < "ever" >,
    SYNSEM.LOCAL.KEYS.KEY _ever_rel ].

:end :instance.


; <<>>

:begin :instance.

ever_adv2 := s_adv_pre_word_le &
  [ STEM < "ever" >,
    SYNSEM.LOCAL.KEYS.KEY _ever_rel ].

:end :instance.


; <<>>

:begin :instance.

every := det_sg_le &
  [ STEM < "every" >,
    SYNSEM.LOCAL.KEYS.KEY _every_rel ].

:end :instance.


; <<>>

:begin :instance.

everybody := generic_pro_le &
  [ STEM < "everybody" >,
    SYNSEM.LOCAL.KEYS [ KEY _person_rel,
			ALTKEY _every_rel ] ].
:end :instance.


; <<>>

:begin :instance.

everyone := generic_pro_le &
  [ STEM < "everyone" >,
    SYNSEM.LOCAL.KEYS [ KEY _person_rel,
			ALTKEY _every_rel ] ].
:end :instance.


; <<>>

:begin :instance.

everything := generic_pro_le &
  [ STEM < "everything" >,
    SYNSEM.LOCAL.KEYS [ KEY _thing_rel,
			ALTKEY _every_rel ] ].
:end :instance.


; <<>>

:begin :instance.

evident_a1 := intrans_adj_le &
  [ STEM < "evident" >,
    SYNSEM.LOCAL.KEYS.KEY _evident_rel ].

:end :instance.


; <<>>

:begin :instance.

evidently_adv1 := vp_adv_pre_word_le &
  [ STEM < "evidently" >,
    SYNSEM.LOCAL.KEYS.KEY _evidently_rel ].

:end :instance.


; <<>>

:begin :instance.

evidently_adv2 := s_adv_pre_word_le &
  [ STEM < "evidently" >,
    SYNSEM.LOCAL.KEYS.KEY _evidently_rel ].

:end :instance.


; <<>>

:begin :instance.

exact_a1 := intrans_adj_le &
  [ STEM < "exact" >,
    SYNSEM.LOCAL.KEYS.KEY _exact_rel ].

:end :instance.


; <<>>

:begin :instance.

exactly_deg := degree_spec_le &
  [ STEM < "exactly" >,
    SYNSEM.LOCAL.KEYS.KEY _exactly_deg_rel ].

:end :instance.


; <<>>

:begin :instance.

exactly_root := disc_adv_le &
  [ STEM < "exactly" >,
    SYNSEM.LOCAL.KEYS.KEY excl_rel & [ EXCL 'exactly ] ].

:end :instance.


; <<>>

:begin :instance.

exaggerate_v1 := mv_np*_trans_le &
  [ STEM < "exaggerate" >,
    SYNSEM.LOCAL.KEYS.KEY _exaggerate_rel ].

:end :instance.


; <<>>

:begin :instance.

exam_n1 := intr_noun_word_le &
  [ STEM < "exam" >,
    SYNSEM.LOCAL.KEYS.KEY _exam_rel ].

:end :instance.


; <<>>

:begin :instance.

example_n1 := intr_noun_word_le &
  [ STEM < "example" >,
    SYNSEM.LOCAL.KEYS.KEY _example_rel ].

:end :instance.


; <<>>

:begin :instance.

exceedingly := vp_adv_post_word_le &
  [ STEM < "exceedingly" >,
    SYNSEM.LOCAL.KEYS.KEY _exceedingly_rel ].

:end :instance.


; <<>>

:begin :instance.

excellent_a1 := intrans_adj_le &
  [ STEM < "excellent" >,
    SYNSEM.LOCAL.KEYS.KEY _excellent_rel ].

:end :instance.


; <<>>
; MULTIKEY < "except" >

:begin :instance.

except_for := prep_mle1 &
  [ STEM < "except", "for" >,
    SYNSEM.LOCAL.KEYS.KEY _except_for_rel ].

:end :instance.


; <<>>

:begin :instance.

except := prep_le &
  [ STEM < "except" >,
    SYNSEM.LOCAL.KEYS.KEY _except_rel ].

:end :instance.


; <<>>

:begin :instance.

exception_n1 := intr_noun_word_le &
  [ STEM < "exception" >,
    SYNSEM.LOCAL.KEYS.KEY _exception_rel ].

:end :instance.


; <<>>

:begin :instance.

exceptionally_deg := degree_spec_le &
  [ STEM < "exceptionally" >,
    SYNSEM.LOCAL.KEYS.KEY _exceptionally_deg_rel ].

:end :instance.


; <<>>

:begin :instance.

exchange_v1 := mv_np_trans_le &
  [ STEM < "exchange" >,
    SYNSEM.LOCAL.KEYS.KEY _exchange_v_rel ].

:end :instance.


; <<>>

:begin :instance.

excited_a1 := intrans_adj_le &
  [ STEM < "excited" >,
    SYNSEM.LOCAL.KEYS.KEY _excited_rel ].

:end :instance.


; <<>>

:begin :instance.

exclude_v1 := mv_np_trans_le &
  [ STEM < "exclude" >,
    SYNSEM.LOCAL.KEYS.KEY _exclude_rel ].

:end :instance.


; <<>>

:begin :instance.

exclusive_a1 := intrans_adj_le &
  [ STEM < "exclusive" >,
    SYNSEM.LOCAL.KEYS.KEY _exclusive_rel ].

:end :instance.


; <<>>

:begin :instance.

exclusively_adv1 := adv_word_le &
  [ STEM < "exclusively" >,
    SYNSEM.LOCAL.KEYS.KEY _exclusively_rel ].

:end :instance.


; <<>>

:begin :instance.

excursion_n1 := intr_noun_word_le &
  [ STEM < "excursion" >,
    SYNSEM.LOCAL.KEYS.KEY _excursion_rel ].

:end :instance.


; <<>>

:begin :instance.

excuse_v1 := mv_np_trans_le &
  [ STEM < "excuse" >,
    SYNSEM.LOCAL.KEYS.KEY _excuse_rel ].

:end :instance.


; <<>>

:begin :instance.

executive_n1 := intr_noun_word_le &
  [ STEM < "executive" >,
    SYNSEM.LOCAL.KEYS.KEY _executive_n_rel ].

:end :instance.


; <<>>

:begin :instance.

exercise_n1 := intr_noun_word_le &
  [ STEM < "exercise" >,
    SYNSEM.LOCAL.KEYS.KEY _exercise_n_rel ].

:end :instance.


; <<>>

:begin :instance.

exercise_n2 := massn_le &
  [ STEM < "exercise" >,
    SYNSEM.LOCAL.KEYS.KEY _exercise_n_rel ].

:end :instance.


; <<>>

:begin :instance.

exhaust_v1 := mv_np_trans_le &
  [ STEM < "exhaust" >,
    SYNSEM.LOCAL.KEYS.KEY _exhaust_rel ].

:end :instance.


; <<>>

:begin :instance.

exhausting_a1 := intrans_adj_le &
  [ STEM < "exhausting" >,
    SYNSEM.LOCAL.KEYS.KEY _exhausting_rel ].

:end :instance.


; <<>>

:begin :instance.

exhaustingly := vp_adv_post_word_le &
  [ STEM < "exhaustingly" >,
    SYNSEM.LOCAL.KEYS.KEY _exhaustingly_rel ].

:end :instance.


; <<>>

:begin :instance.

exhibit_v1 := mv_np_trans_le &
  [ STEM < "exhibit" >,
    SYNSEM.LOCAL.KEYS.KEY _exhibit_rel ].

:end :instance.


; <<>>

:begin :instance.

exhibit_v2 := mv_cp_non_trans_le &
  [ STEM < "exhibit" >,
    SYNSEM.LOCAL.KEYS.KEY _exhibit_h_rel ].

:end :instance.


; <<>>

:begin :instance.

exist_v1 := mv_unacc_le &
  [ STEM < "exist" >,
    SYNSEM.LOCAL.KEYS.KEY _exist_rel ].

:end :instance.


; <<>>

:begin :instance.

existence_n1 := massn_le &
  [ STEM < "existence" >,
    SYNSEM.LOCAL.KEYS.KEY _existence_rel ].

:end :instance.


; <<>>

:begin :instance.

exit1 := intr_noun_word_le &
  [ STEM < "exit" >,
    SYNSEM.LOCAL.KEYS.KEY _exit_rel ].

:end :instance.


; <<>>

:begin :instance.

expect1 := mv_np_trans_le &
  [ STEM < "expect" >,
    SYNSEM.LOCAL.KEYS.KEY _expect1_rel ].

:end :instance.


; <<>>

:begin :instance.

expect2 := mv_subj_equi_le &
  [ STEM < "expect" >,
    SYNSEM.LOCAL.KEYS.KEY _expect2_rel ].

:end :instance.


; <<>>

:begin :instance.

expect3 := mv_sor_le &
  [ STEM < "expect" >,
    SYNSEM.LOCAL.KEYS.KEY _expect2_rel ].

:end :instance.


; <<>>

:begin :instance.

expel_v1 := mv_np_trans_le &
  [ STEM < "expel" >,
    SYNSEM.LOCAL.KEYS.KEY _expel_rel ].

:end :instance.


; <<>>

:begin :instance.

expense_n1 := intr_noun_word_le &
  [ STEM < "expense" >,
    SYNSEM.LOCAL.KEYS.KEY _expense_rel ].

:end :instance.


; <<>>

:begin :instance.

expensive_a1 := intrans_adj_le &
  [ STEM < "expensive" >,
    SYNSEM.LOCAL.KEYS.KEY _expensive_rel ].

:end :instance.


; <<>>

:begin :instance.

experience_n1 := intr_noun_word_le &
  [ STEM < "experience" >,
    SYNSEM.LOCAL.KEYS.KEY _experience_rel ].

:end :instance.


; <<>>

:begin :instance.

experienced_a1 := trans_adj_le &
  [ STEM < "experienced" >,
    SYNSEM.LOCAL.KEYS [ KEY _experienced_rel,
			--COMPKEY _in_rel ] ].

:end :instance.


; <<>>

:begin :instance.

experiment_n1 := intr_noun_word_le &
  [ STEM < "experiment" >,
    SYNSEM.LOCAL.KEYS.KEY _experiment_n_rel ].

:end :instance.


; <<>>

:begin :instance.

expert_n1 := intr_noun_word_le &
  [ STEM < "expert" >,
    SYNSEM.LOCAL.KEYS.KEY _expert_rel ].

:end :instance.


; <<>>

:begin :instance.

explain_v1 := mv_pp_cp_le &
  [ STEM < "explain" >,
    SYNSEM.LOCAL.KEYS [ KEY _explain_h_rel,
			--COMPKEY _to_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

explain_v2 := mv_to*_trans*_le &
  [ STEM < "explain" >,
    SYNSEM.LOCAL.KEYS.KEY _explain_rel ].
:end :instance.


; <<>>

:begin :instance.

explicitly_adv1 := vp_adv_pre_word_le &
  [ STEM < "explicitly" >,
    SYNSEM.LOCAL.KEYS.KEY _explicitly_rel ].

:end :instance.


; <<>>

:begin :instance.

explicitly_adv2 := s_adv_pre_word_le &
  [ STEM < "explicitly" >,
    SYNSEM.LOCAL.KEYS.KEY _explicitly_rel ].

:end :instance.


; <<>>

:begin :instance.

extend_v1 := mv_np_trans_le &
  [ STEM < "extend" >,
    SYNSEM.LOCAL.KEYS.KEY _extend_rel ].

:end :instance.


; <<>>

:begin :instance.

extended_a1 := intrans_adj_le &
  [ STEM < "extended" >,
    SYNSEM.LOCAL.KEYS.KEY _extended_rel ].

:end :instance.


; <<>>

:begin :instance.

extension_n1 := intr_noun_word_le &
  [ STEM < "extension" >,
    SYNSEM.LOCAL.KEYS.KEY _extension_rel ].

:end :instance.


; <<>>

:begin :instance.

extensive_a1 := intrans_adj_le &
  [ STEM < "extensive" >,
    SYNSEM.LOCAL.KEYS.KEY _extensive_rel ].

:end :instance.


; <<>>

:begin :instance.

extensively := adv_word_le &
  [ STEM < "extensively" >,
    SYNSEM.LOCAL.KEYS.KEY _extensively_rel ].

:end :instance.


; <<>>

:begin :instance.

extent_n1 := intr_noun_word_le &
  [ STEM < "extent" >,
    SYNSEM.LOCAL.KEYS.KEY _extent_rel ].

:end :instance.


; <<>>

:begin :instance.

external_a1 := intrans_adj_le &
  [ STEM < "external" >,
    SYNSEM.LOCAL.KEYS.KEY _external_rel ].

:end :instance.


; <<>>

:begin :instance.

externally := adv_word_le &
  [ STEM < "externally" >,
    SYNSEM.LOCAL.KEYS.KEY _externally_rel ].

:end :instance.


; <<>>

:begin :instance.

extra_a1 := intrans_adj_le &
  [ STEM < "extra" >,
    SYNSEM.LOCAL.KEYS.KEY _extra_rel ].

:end :instance.


; <<>>

:begin :instance.

extreme_a1 := intrans_adj_le &
  [ STEM < "extreme" >,
    SYNSEM.LOCAL.KEYS.KEY _extreme_rel ].

:end :instance.


; <<>>

:begin :instance.

extremely_deg := degree_spec_le &
  [ STEM < "extremely" >,
    SYNSEM.LOCAL.KEYS.KEY _extremely_grad_rel ].

:end :instance.


; <<>>

:begin :instance.

eye_n1 := intr_noun_word_le &
  [ STEM < "eye" >,
    SYNSEM.LOCAL.KEYS.KEY _eye_rel ].

:end :instance.


; <<>>

:begin :instance.

fabulous_a1 := intrans_adj_le &
  [ STEM < "fabulous" >,
    SYNSEM.LOCAL.KEYS.KEY _fabulous_rel ].

:end :instance.


; <<>>

:begin :instance.

face_n1 := intr_noun_word_le &
  [ STEM < "face" >,
    SYNSEM.LOCAL.KEYS.KEY _face_n_rel ].

:end :instance.


; <<>>

:begin :instance.

face_v1 := mv_np_trans_le &
  [ STEM < "face" >,
    SYNSEM.LOCAL.KEYS.KEY _face_rel ].

:end :instance.


; <<>>

:begin :instance.

facility_n1 := intr_noun_word_le &
  [ STEM < "facility" >,
    SYNSEM.LOCAL.KEYS.KEY _facility_rel ].

:end :instance.


; <<>>

:begin :instance.

fact_n1 := intr_noun_word_le &
  [ STEM < "fact" >,
    SYNSEM.LOCAL.KEYS.KEY _fact_rel ].

:end :instance.


; <<>>

:begin :instance.

factory_n1 := intr_noun_word_le &
  [ STEM < "factory" >,
    SYNSEM.LOCAL.KEYS.KEY _factory_rel ].

:end :instance.


; <<>>

:begin :instance.

fail_v1 := mv_np_trans_le &
  [ STEM < "fail" >,
    SYNSEM.LOCAL.KEYS.KEY _fail_rel ].

:end :instance.


; <<>>

:begin :instance.

fail_v2 := mv_ssr_le &
  [ STEM < "fail" >,
    SYNSEM.LOCAL.KEYS.KEY _fail1_rel ].

:end :instance.


; <<>>

:begin :instance.

fail_v3 := mv_unerg_le &
  [ STEM < "fail" >,
    SYNSEM.LOCAL.KEYS.KEY _fail_rel ].

:end :instance.


; <<>>

:begin :instance.

fair_n1 := intr_noun_word_le &
  [ STEM < "fair" >,
    SYNSEM.LOCAL.KEYS.KEY _fair_n_rel ].

:end :instance.


; <<>>

:begin :instance.

fair_a1 := intrans_adj_le &
  [ STEM < "fair" >,
    SYNSEM.LOCAL.KEYS.KEY _fair_isect_rel ].

:end :instance.


; <<>>

:begin :instance.

fairly_deg := degree_spec_le &
  [ STEM < "fairly" >,
    SYNSEM.LOCAL.KEYS.KEY _fairly_rel ].

:end :instance.


; <<>>

:begin :instance.

fall_season := season_word_le &
  [ STEM < "fall" >,
    SYNSEM.LOCAL.KEYS.KEY.SEASON 'fall ].

:end :instance.


; <<>>

:begin :instance.

fall_n1 := intr_temp_noun_le &
  [ STEM < "fall" >,
    SYNSEM.LOCAL.KEYS.KEY season_rel & [ SEASON 'fall ] ].

:end :instance.


; <<>>

:begin :instance.

fall_n2 := intr_noun_word_le &
  [ STEM < "fall" >,
    SYNSEM.LOCAL.KEYS.KEY _fall_n_rel ].

:end :instance.


; <<>>

:begin :instance.

fall1 := mv_unacc_le &
  [ STEM < "fall" >,
    SYNSEM.LOCAL.KEYS.KEY _fall_rel ].

:end :instance.


; <<>>

:begin :instance.

false_a1 := intrans_adj_le &
  [ STEM < "false" >,
    SYNSEM.LOCAL.KEYS.KEY _false_rel ].

:end :instance.


; <<>>

:begin :instance.

family_n1 := intr_noun_word_le &
  [ STEM < "family" >,
    SYNSEM.LOCAL.KEYS.KEY _family_rel ].

:end :instance.


; <<>>

:begin :instance.

fantastic_a1 := intrans_adj_le &
  [ STEM < "fantastic" >,
    SYNSEM.LOCAL.KEYS.KEY _fantastic_rel ].

:end :instance.


; <<>>

:begin :instance.

fantastically := vp_adv_post_word_le &
  [ STEM < "fantastically" >,
    SYNSEM.LOCAL.KEYS.KEY _fantastically_rel ].

:end :instance.


; <<>>

:begin :instance.

far_a1 := intrans_adj_le &
  [ STEM < "far" >,
    SYNSEM.LOCAL.KEYS.KEY _far_rel ].

:end :instance.


; <<>>

:begin :instance.

far := vp_adv_post_word_le &
  [ STEM < "far" >,
    SYNSEM.LOCAL.KEYS.KEY _far_grad_rel ].

:end :instance.


; <<>>
; MULTIKEY < "far" >

:begin :instance.

far_off := vp_adv_post_word_mle1 &
  [ STEM < "far", "off" >,
    SYNSEM.LOCAL.KEYS.KEY _far_off_rel ].

:end :instance.


; <<>>

:begin :instance.

farm_n1 := intr_noun_word_le &
  [ STEM < "farm" >,
    SYNSEM.LOCAL.KEYS.KEY _farm_rel ].

:end :instance.


; <<>>

:begin :instance.

fast_a1 := intrans_adj_le &
  [ STEM < "fast" >,
    SYNSEM.LOCAL.KEYS.KEY _fast_rel ].

:end :instance.


; <<>>

:begin :instance.

fast := vp_adv_post_word_le &
  [ STEM < "fast" >,
    SYNSEM.LOCAL.KEYS.KEY _fast_adv_rel ].

:end :instance.


; <<>>

:begin :instance.

faster_a1 := comp_adj_le &
  [ STEM < "faster" >,
    SYNSEM.LOCAL.KEYS.KEY _fast_rel ].

:end :instance.


; <<>>

:begin :instance.

fastest_a1 := superl_adj_le &
  [ STEM < "fastest" >,
    SYNSEM.LOCAL.KEYS.KEY _fast_rel ].

:end :instance.


; <<>>

:begin :instance.

fat_a1 := intrans_adj_le &
  [ STEM < "fat" >,
    SYNSEM.LOCAL.KEYS.KEY _fat_rel ].

:end :instance.


; <<>>

:begin :instance.

father_n1 := noun_ppof_word_le &
  [ STEM < "father" >,
    SYNSEM.LOCAL.KEYS.KEY _father_rel ].

:end :instance.


; <<>>

:begin :instance.

favor_n1 := intr_noun_word_le &
  [ STEM < "favor" >,
    SYNSEM.LOCAL.KEYS.KEY _favor_n_rel ].

:end :instance.


; <<>>

:begin :instance.

favorable_a1 := intrans_adj_le &
  [ STEM < "favorable" >,
    SYNSEM.LOCAL.KEYS.KEY _favorable_rel ].

:end :instance.


; <<>>

:begin :instance.

favorably := adv_word_le &
  [ STEM < "favorably" >,
    SYNSEM.LOCAL.KEYS.KEY _favorably_rel ].

:end :instance.


; <<>>

:begin :instance.

fax_n1 := intr_noun_word_le &
  [ STEM < "fax" >,
    SYNSEM.LOCAL.KEYS.KEY _fax_n_rel ].

:end :instance.


; <<>>

:begin :instance.

fax_v1 := mv_ditrans_le &
  [ STEM < "fax" >,
    SYNSEM.LOCAL.KEYS.KEY _fax_v_rel ].

:end :instance.


; <<>>

:begin :instance.

fear_n1 := massn_le &
  [ STEM < "fear" >,
    SYNSEM.LOCAL.KEYS.KEY _fear_rel ].

:end :instance.


; <<>>

:begin :instance.

feasible_a1 := intrans_adj_le &
  [ STEM < "feasible" >,
    SYNSEM.LOCAL.KEYS.KEY _feasible_rel ].

:end :instance.


; <<>>

:begin :instance.

february := month_word_le &
  [ STEM < "february" >,
    SYNSEM.LOCAL.KEYS.KEY.MONTH 'feb ].

:end :instance.


; <<>>

:begin :instance.

february_2 := month_year_word_le &
  [ STEM < "february" >,
    SYNSEM.LOCAL.KEYS.KEY.MONTH 'feb ].

:end :instance.


; <<>>

:begin :instance.

federal_a1 := intrans_adj_le &
  [ STEM < "federal" >,
    SYNSEM.LOCAL.KEYS.KEY _federal_rel ].

:end :instance.


; <<>>

:begin :instance.

feel_v1 := mv_np_trans_le &
  [ STEM < "feel" >,
    SYNSEM.LOCAL.KEYS.KEY _feel_rel ].

:end :instance.


; <<>>

:begin :instance.

feel_v2 := mv_sorb_le &
  [ STEM < "feel" >,
    SYNSEM.LOCAL.KEYS.KEY _feel2_rel ].

:end :instance.


; <<>>

:begin :instance.

feel_v3 := mv_prd_ssr_le &
  [ STEM < "feel" >,
    SYNSEM.LOCAL [ CAT.VAL [ SUBJ < [ LOCAL.CONT nom-obj ] >,
			     COMPS < [ LOCAL.CAT.HEAD adj ] > ],
		   KEYS.KEY _feel_prd_rel ] ].

:end :instance.


; <<>>

:begin :instance.

Ferrari_n1 := proper_le &
  [ STEM < "ferrari" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Ferrari ].

:end :instance.


; <<>>

:begin :instance.

festive_a1 := intrans_adj_le &
  [ STEM < "festive" >,
    SYNSEM.LOCAL.KEYS.KEY _festive_rel ].

:end :instance.


; <<>>

:begin :instance.

festivities_n1 := plurn_le &
  [ STEM < "festivities" >,
    SYNSEM.LOCAL.KEYS.KEY _festivities_rel ].

:end :instance.


; <<>>

:begin :instance.

fetch_v1 := mv_np_trans_le &
  [ STEM < "fetch" >,
    SYNSEM.LOCAL.KEYS.KEY _fetch_rel ].

:end :instance.


; <<>>

:begin :instance.

few := pdet_pl_le &
  [ STEM < "few" >,
    SYNSEM.LOCAL.KEYS.KEY _few_rel ].

:end :instance.


; <<>>

:begin :instance.

few_a1 := intrans_adj_le &
  [ STEM < "few" >,
    SYNSEM.LOCAL.KEYS.KEY _few_adj_rel ].

:end :instance.


; <<>>

:begin :instance.

fewer_a1 := comp_adj_le &
  [ STEM < "fewer" >,
    SYNSEM.LOCAL.KEYS.KEY _few_adj_rel ].

:end :instance.


; <<>>

:begin :instance.

fewest_a1 := superl_adj_le &
  [ STEM < "fewest" >,
    SYNSEM.LOCAL.KEYS.KEY _few_adj_rel ].

:end :instance.


; <<>>

:begin :instance.

field_n1 := intr_noun_word_le &
  [ STEM < "field" >,
    SYNSEM.LOCAL.KEYS.KEY _field_rel ].

:end :instance.


; <<>>

:begin :instance.

fifteen := bare_unspecified_card_le & 
  [ STEM < "fifteen" >,
    SYNSEM.LOCAL [ CAT.HEAD intadj2,
		   KEYS.KEY.CONST_VALUE "15" ] ].
:end :instance.


; <<>>

:begin :instance.

fifteen_minute := minute_word_le & 
  [ STEM < "fifteen" >,
    SYNSEM.LOCAL.KEYS.KEY.MINUTE "15" ].

:end :instance.


; <<>>

:begin :instance.

fifteenth := ordinal_adj_le &
  [ STEM < "fifteenth" >,
    SYNSEM.LOCAL.KEYS.KEY.ORD "15" ].

:end :instance.


; <<>>

:begin :instance.

fifteenth_day := day_of_month_le &
  [ STEM < "fifteenth" >,
    SYNSEM.LOCAL.KEYS.KEY.DAY "15" ].

:end :instance.


; <<>>

:begin :instance.

fifth := ordinal_adj_le &
  [ STEM < "fifth" >,
    SYNSEM.LOCAL.KEYS.KEY.ORD "5" ].

:end :instance.


; <<>>

:begin :instance.

fifth_day := day_of_month_le &
  [ STEM < "fifth" >,
    SYNSEM.LOCAL.KEYS.KEY.DAY "5" ].

:end :instance.


; <<>>

:begin :instance.

fiftieth := ordinal_adj_le &
  [ STEM < "fiftieth" >,
    SYNSEM.LOCAL.KEYS.KEY.ORD "50" ].

:end :instance.


; <<>>

:begin :instance.

fifty_w_comps := complemented_unspecified_card_le & 
  [ STEM < "fifty" >,
    SYNSEM.LOCAL [ CAT [ HEAD intadj2,
			 VAL.COMPS.FIRST.LOCAL.CAT.HEAD intadj1 ],
		   KEYS.KEY.CONST_VALUE "50" ] ].

:end :instance.


; <<>>

:begin :instance.

fifty := bare_unspecified_card_le & 
  [  STEM < "fifty" >,
     SYNSEM.LOCAL [ CAT.HEAD intadj2,
		    KEYS.KEY.CONST_VALUE "50" ] ].
:end :instance.


; <<>>

:begin :instance.

fifty_minute := minute_word_le &
  [ STEM < "fifty" >,
    SYNSEM.LOCAL.KEYS.KEY.MINUTE "50" ].

:end :instance.


; <<>>

:begin :instance.

fiftyfirst := ordinal_adj_le &
  [ STEM < "fiftyfirst" >,
    SYNSEM.LOCAL.KEYS.KEY.ORD "51" ].

:end :instance.


; <<>>

:begin :instance.

fiftysecond := ordinal_adj_le &
  [ STEM < "fiftysecond" >,
    SYNSEM.LOCAL.KEYS.KEY.ORD "52" ].

:end :instance.


; <<>>

:begin :instance.

figure_n1 := intr_noun_word_le &
  [ STEM < "figure" >,
    SYNSEM.LOCAL.KEYS.KEY _figure_n_rel ].

:end :instance.


; <<>>

:begin :instance.

figure_v3 := mv_cp_non_trans_le &
  [ STEM < "figure" >,
    SYNSEM.LOCAL.KEYS.KEY _figure_v_rel ].

:end :instance.


; <<>>

:begin :instance.

figure_out_v1 := mv_prep_particle_np_le &
  [ STEM < "figure" >,
    SYNSEM.LOCAL.KEYS [ KEY _figure_out_rel,
			--COMPKEY _out_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

fill_v1 := mv_np_trans_le &
  [ STEM < "fill" >,
    SYNSEM.LOCAL.KEYS.KEY _fill_rel ].

:end :instance.


; <<>>

:begin :instance.

fill_v2 := mv_prep_particle_np_le &
  [ STEM < "fill" >,
    SYNSEM.LOCAL.KEYS [ KEY _fill_up_rel,
			--COMPKEY _up_rel ] ].

:end :instance.


; <<>>

:begin :instance.

final_a1 := intrans_adj_le &
  [ STEM < "final" >,
    SYNSEM.LOCAL.KEYS.KEY _final_rel ].

:end :instance.


; <<>>

:begin :instance.

finally_adv1 := adv_word_le &
  [ STEM < "finally" >,
    SYNSEM.LOCAL.KEYS.KEY _finally_rel ].

:end :instance.


; <<>>

:begin :instance.

find_out_v1 := mv_prep_particle_np_le &
  [ STEM < "find" >,
    SYNSEM.LOCAL.KEYS [ KEY _find_out_rel,
			--COMPKEY _out_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

find_out_v2 := mv_particle_cp_le &
  [ STEM < "find" >,
    SYNSEM.LOCAL.KEYS [ KEY _find_out_h_rel,
			--COMPKEY _out_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

find_v1 := mv_np_trans_le &
  [ STEM < "find" >,
    SYNSEM.LOCAL.KEYS.KEY _find_rel ].

:end :instance.


; <<>>

:begin :instance.

find_v2 := mv_obj_equi_prd_le &
  [ STEM < "find" >,
    SYNSEM.LOCAL.KEYS.KEY _find2_rel ].

:end :instance.


; <<>>

:begin :instance.

fine_root := disc_adv_le &
  [ STEM < "fine" >,
    SYNSEM.LOCAL [ CAT.POSTHEAD -,
		   KEYS.KEY excl_rel & [ EXCL 'fine ] ] ].

:end :instance.


; <<>>

:begin :instance.

fine_a1 := int_vp_adv_post_word_le &
  [ STEM < "fine" >,
    SYNSEM.LOCAL.KEYS.KEY _fine_adv_rel ].

:end :instance.


; <<>>

:begin :instance.

fine_adj := intrans_adj_le &
  [ STEM < "fine" >,
    SYNSEM.LOCAL.KEYS.KEY _fine_rel ].

:end :instance.


; <<>>

:begin :instance.

finish_v1 := mv_np_trans_le &
  [ STEM < "finish" >,
    SYNSEM.LOCAL.KEYS.KEY _finish_rel ].

:end :instance.


; <<>>

:begin :instance.

finish_v2 := mv_prep_particle_np_le &
  [ STEM < "finish" >,
    SYNSEM.LOCAL.KEYS [ KEY _finish_up_rel,
			--COMPKEY _up_rel ] ].

:end :instance.


; <<>>

:begin :instance.

finished_a1 := intrans_adj_le &
  [ STEM < "finished" >,
    SYNSEM.LOCAL.KEYS.KEY _finished_rel ].

:end :instance.


; <<>>

:begin :instance.

finite_a1 := intrans_adj_le &
  [ STEM < "finite" >,
    SYNSEM.LOCAL.KEYS.KEY _finite_rel ].

:end :instance.


; <<>>

:begin :instance.

fire_v1 := mv_np_trans_le &
  [ STEM < "fire" >,
    SYNSEM.LOCAL.KEYS.KEY _fire_v_rel ].

:end :instance.


; <<>>

:begin :instance.

fire_v2 := mv_prep_particle_np_le &
  [ STEM < "fire" >,
    SYNSEM.LOCAL.KEYS [ KEY _fire_up_rel,
			--COMPKEY _up_rel ] ].

:end :instance.


; <<>>

:begin :instance.

firm_n1 := intr_noun_word_le &
  [ STEM < "firm" >,
    SYNSEM.LOCAL.KEYS.KEY _firm_rel ].

:end :instance.


; <<>>

:begin :instance.

firm_a1 := intrans_adj_le &
  [ STEM < "firm" >,
    SYNSEM.LOCAL.KEYS.KEY _firm_a_rel ].

:end :instance.


; <<>>

:begin :instance.

first_day := day_of_month_le &
  [ STEM < "first" >,
    SYNSEM.LOCAL.KEYS.KEY.DAY "1" ].

:end :instance.


; <<>>

:begin :instance.

first_day_num := day_of_month_le &
  [ STEM < "1st" >,
    SYNSEM.LOCAL.KEYS.KEY.DAY "1" ].

:end :instance.


; <<>>
; MULTIKEY < "thing" >

:begin :instance.

first_thing_adv1 := vp_adv_post_word_mle2 &
  [ STEM < "first", "thing" >,
    SYNSEM.LOCAL.KEYS.KEY _first_thing_rel ].

:end :instance.


; <<>>
; MULTIKEY < "first" >

:begin :instance.

first_of_may := holiday_word_4mle2 &
  [ STEM < "the", "first", "of", "may" >,
    SYNSEM.LOCAL.KEYS.KEY.DAY 'first_of_may ].

:end :instance.


; <<>>

:begin :instance.

firstly_adv1 := vp_adv_pre_word_le &
  [ STEM < "firstly" >,
    SYNSEM.LOCAL.KEYS.KEY _firstly_rel ].

:end :instance.


; <<>>

:begin :instance.

firstly_adv2 := s_adv_pre_word_le &
  [ STEM < "firstly" >,
    SYNSEM.LOCAL.KEYS.KEY _firstly_rel ].

:end :instance.


; <<>>

:begin :instance.

fish_n1 := intr_noun_word_le &
  [ STEM < "fish" >,
    SYNSEM.LOCAL.KEYS.KEY _fish_n_rel ].

:end :instance.


; <<>>

:begin :instance.

fish_v1 := mv_unerg_le &
  [ STEM < "fish" >,
    SYNSEM.LOCAL.KEYS.KEY _fish_v_rel ].

:end :instance.


; <<>>

:begin :instance.

fist_n1 := intr_noun_word_le &
  [ STEM < "fist" >,
    SYNSEM.LOCAL.KEYS.KEY _fist_rel ].

:end :instance.


; <<>>

:begin :instance.

fit_a1 := intrans_adj_le &
  [ STEM < "fit" >,
    SYNSEM.LOCAL.KEYS.KEY _fit_adj_rel ].

:end :instance.


; <<>>

:begin :instance.

fit_in_v1 := mv_prep_particle_np_le &
  [ STEM < "fit" >,
    SYNSEM.LOCAL.KEYS [ KEY _fit_in_rel,
			--COMPKEY _in_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

fit_in_with_v1 := mv_particle_pp*_le &
  [ STEM < "fit" >,
    SYNSEM.LOCAL.KEYS [ KEY _fit_in_rel,
			--COMPKEY _in_rel_s,
			--OCOMPKEY _with_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

fit_v1 := mv_unacc_le &
  [ STEM < "fit" >,
    SYNSEM.LOCAL.KEYS.KEY _fit_rel ].

:end :instance.


; <<>>

:begin :instance.

fit_v2 := mv_np_trans_le &
  [ STEM < "fit" >,
    SYNSEM.LOCAL.KEYS.KEY _fit_cause_rel ].

:end :instance.


; <<>>

:begin :instance.

five := bare_unspecified_card_le & 
  [  STEM < "five" >,
     SYNSEM.LOCAL [ CAT.HEAD intadj1,
		    KEYS.KEY.CONST_VALUE "5" ] ].
:end :instance.


; <<>>

:begin :instance.

five_adjnoun := numadj_noun_word_le & 
  [ STEM < "five" >,
    SYNSEM.LOCAL.KEYS.ALTKEY.CONST_VALUE "5" ].

:end :instance.


; <<>>

:begin :instance.

five_hour := hour_word_le &
  [ STEM < "five" >,
    SYNSEM.LOCAL.KEYS.KEY.HOUR "5" ].

:end :instance.


; <<>>

:begin :instance.

fix_v1 := mv_np_trans_le &
  [ STEM < "fix" >,
    SYNSEM.LOCAL.KEYS.KEY _fix_rel ].

:end :instance.


; <<>>

:begin :instance.

flat_a1 := intrans_adj_le &
  [ STEM < "flat" >,
    SYNSEM.LOCAL.KEYS.KEY _flat_rel ].

:end :instance.


; <<>>

:begin :instance.

flatly_adv1 := vp_adv_word_le &
  [ STEM < "flatly" >,
    SYNSEM.LOCAL.KEYS.KEY _flatly_rel ].

:end :instance.


; <<>>

:begin :instance.

Flex_n1 := proper_le &
  [ STEM < "flex" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Flex ].

:end :instance.


; <<>>

:begin :instance.

flexible_a1 := intrans_adj_le &
  [ STEM < "flexible" >,
    SYNSEM.LOCAL.KEYS.KEY _flexible_rel ].

:end :instance.


; <<>>

:begin :instance.

flexibly := adv_word_le &
  [ STEM < "flexibly" >,
    SYNSEM.LOCAL.KEYS.KEY _flexibly_rel ].

:end :instance.


; <<>>

:begin :instance.

flight_n1 := intr_noun_word_le &
  [ STEM < "flight" >,
    SYNSEM.LOCAL.KEYS.KEY _flight_rel ].

:end :instance.


; <<>>

:begin :instance.

floor_n1 := intr_noun_word_le &
  [ STEM < "floor" >,
    SYNSEM.LOCAL.KEYS.KEY _floor_rel ].

:end :instance.


; <<>>

:begin :instance.

fly_v1 := mv_unerg_le &
  [ STEM < "fly" >,
    SYNSEM.LOCAL.KEYS.KEY _fly_rel ].

:end :instance.


; <<>>

:begin :instance.

fly_n1 := intr_noun_word_le &
  [ STEM < "fly" >,
    SYNSEM.LOCAL.KEYS.KEY _fly_n_rel ].

:end :instance.


; <<>>

:begin :instance.

fly_off_v1 := mv_particle_pp*_le &
  [ STEM < "fly" >,
    SYNSEM.LOCAL.KEYS [ KEY _fly_off_rel,
			--COMPKEY _off_rel_s,
			--OCOMPKEY _to_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

focus_v1 := mv_empty_prep_intrans_le &
  [ STEM < "focus" >,
    SYNSEM.LOCAL.KEYS [ KEY _focus_v_rel,
			--COMPKEY _on_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

follow_around_v1 := mv_prep_particle_np_le &
  [ STEM < "follow" >,
    SYNSEM.LOCAL.KEYS [ KEY _follow_around_rel,
			--COMPKEY _around_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

follow_up_v1 := mv_particle_pp*_le &
  [ STEM < "follow" >,
    SYNSEM.LOCAL.KEYS [ KEY _follow_up_on_rel,
			--COMPKEY _up_rel,
			--OCOMPKEY _on_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

follow_up_v2 := mv_prep_particle_np_le &
  [ STEM < "follow" >,
    SYNSEM.LOCAL.KEYS [ KEY _follow_up_rel,
			--COMPKEY _up_rel ] ].

:end :instance.


; <<>>

:begin :instance.

follow_v1 := mv_np*_trans_le &
  [ STEM < "follow" >,
    SYNSEM.LOCAL.KEYS.KEY _follow_rel ].

:end :instance.


; <<>>

:begin :instance.

following_a1 := intrans_adj_le &
  [ STEM < "following" >,
    SYNSEM.LOCAL.KEYS.KEY _following_rel ].

:end :instance.


; <<>>

:begin :instance.

fond_a1 := trans_adj_le &
  [ STEM < "fond" >,
    SYNSEM.LOCAL.KEYS [ KEY _fond_rel,
			--COMPKEY _of_rel ] ].

:end :instance.


; <<>>

:begin :instance.

food_n1 := massn_le &
  [ STEM < "food" >,
    SYNSEM.LOCAL.KEYS.KEY _food_rel ].

:end :instance.


; <<>>

:begin :instance.

fool_n1 := intr_noun_word_le &
  [ STEM < "fool" >,
    SYNSEM.LOCAL.KEYS.KEY _fool_n_rel ].

:end :instance.


; <<>>

:begin :instance.

for := prep_le &
  [ STEM < "for" >,
    SYNSEM.LOCAL.KEYS.KEY _for_rel_a ].

:end :instance.


; <<>>

:begin :instance.

for_c := for_c_le &
  [ STEM < "for" > ].

:end :instance.


; <<>>
; MULTIKEY < "example" >

:begin :instance.

for_example_root := disc_adv_mle2 &
  [ STEM < "for", "example" >,
    SYNSEM.LOCAL.KEYS.KEY excl_rel & [ EXCL 'for_example ] ].

:end :instance.


; <<>>
; MULTIKEY < "once" >

:begin :instance.

for_once_adv1 := vp_adv_post_word_mle2 &
  [ STEM < "for", "once" >,
    SYNSEM.LOCAL.KEYS.KEY _for_once_rel ].

:end :instance.


; <<>>
; MULTIKEY < "time" >

:begin :instance.

for_the_time_being_adv := vp_adv_post_word_4mle3 &
  [ STEM < "for", "the", "time", "being" >,
    SYNSEM.LOCAL.KEYS.KEY _for_the_time_being_rel ].

:end :instance.


; <<>>
; MULTIKEY < "lack" >

:begin :instance.

for_lack_of_p := prep_3mle2 &
  [ STEM < "for", "lack", "of" >,
    SYNSEM.LOCAL.KEYS.KEY _for_lack_of_rel ].

:end :instance.


; <<>>
; MULTIKEY < "example" >

:begin :instance.

for_example_a1 := vp_adv_post_word_mle2 &
  [ STEM < "for", "example" >,
    SYNSEM.LOCAL.KEYS.KEY _for_example_rel ].

:end :instance.


; <<>>
; MULTIKEY < "free" >

:begin :instance.

for_free_a1 := vp_adv_post_word_mle2 &
  [ STEM < "for", "free" >,
    SYNSEM.LOCAL.KEYS.KEY _for_free_rel ].

:end :instance.


; <<>>

:begin :instance.

foregoing_a1 := intrans_adj_le &
  [ STEM < "foregoing" >,
    SYNSEM.LOCAL.KEYS.KEY _foregoing_rel ].

:end :instance.


; <<>>

:begin :instance.

foreign_a1 := intrans_adj_le &
  [ STEM < "foreign" >,
    SYNSEM.LOCAL.KEYS.KEY _foreign_rel ].

:end :instance.


; <<>>

:begin :instance.

foremost_a1 := intrans_adj_le &
  [ STEM < "foremost" >,
    SYNSEM.LOCAL.KEYS.KEY _foremost_rel ].

:end :instance.


; <<>>

:begin :instance.

forestall_v1 := mv_np_trans_le &
  [ STEM < "forestall" >,
    SYNSEM.LOCAL.KEYS.KEY _forestall_rel ].

:end :instance.


; <<>>

:begin :instance.

forget_v1 := mv_np_trans_le &
  [ STEM < "forget" >,
    SYNSEM.LOCAL.KEYS.KEY _forget_rel ].

:end :instance.


; <<>>

:begin :instance.

forget_v2 := mv_cp_fin_inf_non_trans_le &
  [ STEM < "forget" >,
    SYNSEM.LOCAL.KEYS.KEY _forget_h_rel ].

:end :instance.


; <<>>

:begin :instance.

forget_v3 := mv_unerg_le &
  [ STEM < "forget" >,
    SYNSEM.LOCAL.KEYS.KEY _forget_rel ].

:end :instance.


; <<>>

:begin :instance.

forget_about_v := mv_empty_prep_intrans_le &
  [ STEM < "forget" >,
    SYNSEM.LOCAL.KEYS [ KEY _forget_about_rel,
			--COMPKEY _about_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

form_v1 := mv_np_trans_le &
  [ STEM < "form" >,
    SYNSEM.LOCAL.KEYS.KEY _form_v_rel ].

:end :instance.


; <<>>

:begin :instance.

form_v2 := mv_unacc_le &
  [ STEM < "form" >,
    SYNSEM.LOCAL.KEYS.KEY _form_und_rel ].

:end :instance.


; <<>>

:begin :instance.

formality_n1 := intr_noun_word_le &
  [ STEM < "formality" >,
    SYNSEM.LOCAL.KEYS.KEY _formality_rel ].

:end :instance.


; <<>>

:begin :instance.

former_a1 := intrans_adj_le &
  [ STEM < "former" >,
    SYNSEM.LOCAL.KEYS.KEY _former_rel ].

:end :instance.


; <<>>

:begin :instance.

formerly_adv1 := vp_adv_pre_word_le &
  [ STEM < "formerly" >,
    SYNSEM.LOCAL.KEYS.KEY _formerly_rel ].

:end :instance.


; <<>>

:begin :instance.

formerly_adv2 := s_adv_pre_word_le &
  [ STEM < "formerly" >,
    SYNSEM.LOCAL.KEYS.KEY _formerly_rel ].

:end :instance.


; <<>>

:begin :instance.

forth_adv := pp_le &
  [ STEM < "forth" >,
    SYNSEM.LOCAL.KEYS.KEY _forth_rel_a ].

:end :instance.


; <<>>

:begin :instance.

forthcoming_a1 := intrans_adj_le &
  [ STEM < "forthcoming" >,
    SYNSEM.LOCAL.KEYS.KEY _forthcoming_rel ].

:end :instance.


; <<>>

:begin :instance.

fortieth := ordinal_adj_le &
  [ STEM < "fortieth" >,
    SYNSEM.LOCAL.KEYS.KEY.ORD "40" ].

:end :instance.


; <<>>

:begin :instance.

fortnight_n1 := intr_temp_noun_le &
  [ STEM < "fortnight" >,
    SYNSEM.LOCAL.KEYS.KEY _fortnight_rel ].

:end :instance.


; <<>>

:begin :instance.

fortnightly_adv1 := vp_adv_post_word_le &
  [ STEM < "fortnightly" >,
    SYNSEM.LOCAL.KEYS.KEY _fortnightly_rel ].

:end :instance.


; <<>>

:begin :instance.

fortunate_a1 := intrans_adj_le &
  [ STEM < "fortunate" >,
    SYNSEM.LOCAL.KEYS.KEY _fortunate_rel ].

:end :instance.


; <<>>

:begin :instance.

fortunately_adv1 := adv_word_le &
  [ STEM < "fortunately" >,
    SYNSEM.LOCAL.KEYS.KEY _fortunately_rel ].

:end :instance.


; <<>>

:begin :instance.

fortune_n1 := intr_noun_word_le &
  [ STEM < "fortune" >,
    SYNSEM.LOCAL.KEYS.KEY _fortune_rel ].

:end :instance.


; <<>>

:begin :instance.

forty_w_comps := complemented_unspecified_card_le & 
  [ STEM < "forty" >,
    SYNSEM.LOCAL [ CAT [ HEAD intadj2,
			 VAL.COMPS.FIRST.LOCAL.CAT.HEAD intadj1 ],
		   KEYS.KEY.CONST_VALUE "40" ] ].
:end :instance.


; <<>>

:begin :instance.

forty := bare_unspecified_card_le & 
  [  STEM < "forty" >,
     SYNSEM.LOCAL [ CAT.HEAD intadj2,
		    KEYS.KEY.CONST_VALUE "40" ] ].
:end :instance.


; <<>>

:begin :instance.

forty_minute := minute_word_le &
  [ STEM < "forty" >,
    SYNSEM.LOCAL.KEYS.KEY.MINUTE "40" ].

:end :instance.


; <<>>
; MULTIKEY < "five" >

:begin :instance.

fortyfive_minute := minute_word_mle2 &
  [ STEM < "forty", "five" >,
    SYNSEM.LOCAL.KEYS.KEY.MINUTE "45" ].

:end :instance.


; <<>>

:begin :instance.

fortyeighth := ordinal_adj_le &
  [ STEM < "fortyeighth" >,
    SYNSEM.LOCAL.KEYS.KEY.ORD "48" ].

:end :instance.


; <<>>

:begin :instance.

fortyfifth := ordinal_adj_le &
  [ STEM < "fortyfifth" >,
    SYNSEM.LOCAL.KEYS.KEY.ORD "45" ].

:end :instance.


; <<>>

:begin :instance.

fortyfirst := ordinal_adj_le &
  [ STEM < "fortyfirst" >,
    SYNSEM.LOCAL.KEYS.KEY.ORD "41" ].

:end :instance.


; <<>>

:begin :instance.

fortyfourth := ordinal_adj_le &
  [ STEM < "fortyfourth" >,
    SYNSEM.LOCAL.KEYS.KEY.ORD "44" ].

:end :instance.


; <<>>

:begin :instance.

fortyninth := ordinal_adj_le &
  [ STEM < "fortyninth" >,
    SYNSEM.LOCAL.KEYS.KEY.ORD "49" ].

:end :instance.


; <<>>

:begin :instance.

fortysecond := ordinal_adj_le &
  [ STEM < "fortysecond" >,
    SYNSEM.LOCAL.KEYS.KEY.ORD "42" ].

:end :instance.


; <<>>

:begin :instance.

fortyseventh := ordinal_adj_le &
  [ STEM < "fortyseventh" >,
    SYNSEM.LOCAL.KEYS.KEY.ORD "47" ].

:end :instance.


; <<>>

:begin :instance.

fortysixth := ordinal_adj_le &
  [ STEM < "fortysixth" >,
    SYNSEM.LOCAL.KEYS.KEY.ORD "46" ].

:end :instance.


; <<>>

:begin :instance.

fortythird := ordinal_adj_le &
  [ STEM < "fortythird" >,
    SYNSEM.LOCAL.KEYS.KEY.ORD "43" ].

:end :instance.


; <<>>

:begin :instance.

forward_adv := int_vp_adv_post_word_le &
  [ STEM < "forward" >,
    SYNSEM.LOCAL.KEYS.KEY _forward_rel_a ].

:end :instance.


; <<>>

:begin :instance.

forwards_adv1 := int_vp_adv_post_word_le &
  [ STEM < "forwards" >,
    SYNSEM.LOCAL.KEYS.KEY _forwards_rel ].

:end :instance.


; <<>>

:begin :instance.

foundation_n1 := intr_noun_word_le &
  [ STEM < "foundation" >,
    SYNSEM.LOCAL.KEYS.KEY _foundation_rel ].

:end :instance.


; <<>>

:begin :instance.

four := bare_unspecified_card_le & 
  [  STEM < "four" >,
     SYNSEM.LOCAL [ CAT.HEAD intadj1,
		    KEYS.KEY.CONST_VALUE "4" ] ].
:end :instance.


; <<>>

:begin :instance.

four_adjnoun := numadj_noun_word_le & 
  [ STEM < "four" >,
    SYNSEM.LOCAL.KEYS.ALTKEY.CONST_VALUE "4" ].

:end :instance.


; <<>>

:begin :instance.

four_hour := hour_word_le &
  [ STEM < "four" >,
    SYNSEM.LOCAL.KEYS.KEY.HOUR "4" ].

:end :instance.


; <<>>

:begin :instance.

fourteen := bare_unspecified_card_le & 
  [  STEM < "fourteen" >,
     SYNSEM.LOCAL [ CAT.HEAD intadj2,
		    KEYS.KEY.CONST_VALUE "14" ] ].
:end :instance.


; <<>>

:begin :instance.

fourteenth := ordinal_adj_le &
  [ STEM < "fourteenth" >,
    SYNSEM.LOCAL.KEYS.KEY.ORD "14" ].

:end :instance.


; <<>>

:begin :instance.

fourteenth_day := day_of_month_le &
  [ STEM < "fourteenth" >,
    SYNSEM.LOCAL.KEYS.KEY.DAY "14" ].

:end :instance.


; <<>>

:begin :instance.

fourth := ordinal_adj_le &
  [ STEM < "fourth" >,
    SYNSEM.LOCAL.KEYS.KEY.ORD "4" ].

:end :instance.


; <<>>

:begin :instance.

fourth_day := day_of_month_le &
  [ STEM < "fourth" >,
    SYNSEM.LOCAL.KEYS.KEY.DAY "4" ].

:end :instance.


; <<>>

:begin :instance.

framework_n1 := intr_noun_word_le &
  [ STEM < "framework" >,
    SYNSEM.LOCAL.KEYS.KEY _framework_rel ].

:end :instance.


; <<>>

:begin :instance.

France_n1 := proper_le &
  [ STEM < "france" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'France ].

:end :instance.


; <<>>

:begin :instance.

frank_a1 := intrans_adj_le &
  [ STEM < "frank" >,
    SYNSEM.LOCAL.KEYS.KEY _frank_rel ].

:end :instance.


; <<>>

:begin :instance.

Frankfurt_n1 := proper_le &
  [ STEM < "frankfurt" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Frankfurt ].

:end :instance.


; <<>>

:begin :instance.

free_a1 := reg_adj_equi_le &
  [ STEM < "free" >,
    SYNSEM.LOCAL.KEYS.KEY _free_rel ].

:end :instance.


; <<>>

:begin :instance.

free_v1 := mv_np_trans_le &
  [ STEM < "free" >,
    SYNSEM.LOCAL.KEYS.KEY _free_v_rel ].

:end :instance.


; <<>>

:begin :instance.

free_v2 := mv_prep_particle_np_le &
  [ STEM < "free" >,
    SYNSEM.LOCAL.KEYS [ KEY _free_up_rel,
			--COMPKEY _up_rel ] ].

:end :instance.


; <<>>

:begin :instance.

freely := adv_word_le &
  [ STEM < "freely" >,
    SYNSEM.LOCAL.KEYS.KEY _freely_rel ].

:end :instance.


; <<>>

:begin :instance.

french_a1 := intrans_adj_le &
  [ STEM < "french" >,
    SYNSEM.LOCAL.KEYS.KEY _french_rel ].

:end :instance.


; <<>>

:begin :instance.

frequent_a1 := intrans_adj_le &
  [ STEM < "frequent" >,
    SYNSEM.LOCAL.KEYS.KEY _frequent_isect_rel ].

:end :instance.


; <<>>

:begin :instance.

frequently_adv1 := vp_adv_word_le &
  [ STEM < "frequently" >,
    SYNSEM.LOCAL.KEYS.KEY _frequently_rel ].

:end :instance.


; <<>>

:begin :instance.

fresh_a1 := intrans_adj_le &
  [ STEM < "fresh" >,
    SYNSEM.LOCAL.KEYS.KEY _fresh_rel ].

:end :instance.


; <<>>

:begin :instance.

freshly_adv1 := vp_adv_post_word_le &
  [ STEM < "freshly" >,
    SYNSEM.LOCAL.KEYS.KEY _freshly_rel ].

:end :instance.


; <<>>

:begin :instance.

friday1 := day_of_week_le &
  [ STEM < "friday" >,
    SYNSEM.LOCAL.KEYS.KEY.DAY 'fri ].

:end :instance.


; <<>>

:begin :instance.

friday_cn := intr_temp_noun_le &
  [ STEM < "friday" >,
    SYNSEM.LOCAL.KEYS.KEY dofw_rel & [ DAY 'fri ] ].

:end :instance.


; <<>>

:begin :instance.

friend_n1 := intr_noun_word_le &
  [ STEM < "friend" >,
    SYNSEM.LOCAL.KEYS.KEY _friend_rel ].

:end :instance.


; <<>>

:begin :instance.

friendly_a1 := intrans_adj_le &
  [ STEM < "friendly" >,
    SYNSEM.LOCAL.KEYS.KEY _friendly_rel ].

:end :instance.


; <<>>

:begin :instance.

friendship_n1 := massn_le &
  [ STEM < "friendship" >,
    SYNSEM.LOCAL.KEYS.KEY _friendship_rel ].

:end :instance.


; <<>>

:begin :instance.

fright_n1 := massn_le &
  [ STEM < "fright" >,
    SYNSEM.LOCAL.KEYS.KEY _fright_rel ].

:end :instance.


; <<>>

:begin :instance.

from := reg_prep_le &
  [ STEM < "from" >,
    SYNSEM.LOCAL.KEYS.KEY _from_rel_a ].

:end :instance.


; <<>>

:begin :instance.

from_to_temp := ditrans_prep_le &
  [ STEM < "from" >,
    SYNSEM.LOCAL [ CAT.VAL.COMPS < synsem, 
				   [ LOCAL 
				     [ CAT.VAL.COMPS < >,
				       CONT.TOP #top,
				       KEYS [ KEY _until_rel_s &
						  [ HANDEL #hand,
                                                    LABEL #label,
						    ARG #arg,
						    ARG3 #argx ],
					      ALTKEY temp_abstr_rel &
                                                  [ LABEL #label ] ] ],
				     OPT - ] >,
		   CONT.TOP #top,
		   KEYS [ KEY _from_to_rel &
			      [ HANDEL #hand,
				ARG #arg,
				ARGX #argx ],
			  --COMPKEY temp_abstr_rel ] ] ].

:end :instance.


; <<>>

:begin :instance.

from_to_nontemp := ditrans_prep_le &
  [ STEM < "from" >,
    SYNSEM.LOCAL [ CAT.VAL.COMPS < synsem, 
				   [ LOCAL [ CAT.VAL.COMPS < >,
					     CONT.TOP #top,
					     KEYS [ KEY to_dir_rel &
							[ HANDEL #hand,
							  ARG #arg ],
                                                    ALTKEY non_temp_nom_rel ] ],
				     OPT - ] >,
		   CONT.TOP #top,
		   KEYS [ KEY _from_to_rel &
			      [ HANDEL #hand,
				ARG #arg ],
			  --COMPKEY non_temp_nom_rel ] ] ].

:end :instance.


; <<>>

:begin :instance.

from_time_on := ditrans_prep_le &
  [ STEM < "from" >,
    SYNSEM.LOCAL [ CAT.VAL.COMPS.REST.FIRST 
			    [ OPT -,
			      LOCAL.KEYS.KEY.LABEL #label ],
		   KEYS [ KEY _from_time_on_rel & [ LABEL #label ],
			  --COMPKEY temp_abstr_rel,
			  --OCOMPKEY _on_rel_s ] ] ].

:end :instance.


; <<>>

:begin :instance.

fruit_n1 := massn_le &
  [ STEM < "fruit" >,
    SYNSEM.LOCAL.KEYS.KEY _fruit_rel ].

:end :instance.


; <<>>

:begin :instance.

frustration_n1 := massn_le &
  [ STEM < "frustration" >,
    SYNSEM.LOCAL.KEYS.KEY _frustration_rel ].

:end :instance.


; <<>>

:begin :instance.

full_a1 := intrans_adj_le &
  [ STEM < "full" >,
    SYNSEM.LOCAL.KEYS.KEY _full_rel ].

:end :instance.


; <<>>

:begin :instance.

fully_adv1 := adv_word_le &
  [ STEM < "fully" >,
    SYNSEM.LOCAL.KEYS.KEY _fully_rel ].

:end :instance.


; <<>>

:begin :instance.

funny_a1 := intrans_adj_le &
  [ STEM < "funny" >,
    SYNSEM.LOCAL.KEYS.KEY _funny_rel ].

:end :instance.


; <<>>

:begin :instance.

further_a1 := intrans_adj_le &
  [ STEM < "further" >,
    SYNSEM.LOCAL.KEYS.KEY _further_rel ].

:end :instance.


; <<>>

:begin :instance.

further := comp_vp_adv_word_le &
  [ STEM < "further" >,
    SYNSEM.LOCAL.KEYS.KEY _far_grad_rel ].

:end :instance.


; <<>>

:begin :instance.

furthermore_root := disc_adv_le &
  [ STEM < "furthermore" >,
    SYNSEM.LOCAL.KEYS.KEY excl_rel & [ EXCL 'furthermore ] ].

:end :instance.


; <<>>

:begin :instance.

future_a1 := intrans_adj_le &
  [ STEM < "future" >,
    SYNSEM.LOCAL.KEYS.KEY _future_isect_rel ].

:end :instance.


; <<>>

:begin :instance.

future_n1 := intr_noun_word_le &
  [ STEM < "future" >,
    SYNSEM.LOCAL.KEYS.KEY _future_rel ].

:end :instance.


; <<>>

:begin :instance.

gain_v1 := mv_np_trans_le &
  [ STEM < "gain" >,
    SYNSEM.LOCAL.KEYS.KEY _gain_v_rel ].

:end :instance.


; <<>>

:begin :instance.

game_n1 := intr_noun_word_le &
  [ STEM < "game" >,
    SYNSEM.LOCAL.KEYS.KEY _game_rel ].

:end :instance.


; <<>>

:begin :instance.

gap_n1 := intr_noun_word_le &
  [ STEM < "gap" >,
    SYNSEM.LOCAL.KEYS.KEY _gap_rel ].

:end :instance.


; <<>>

:begin :instance.

garage_n1 := intr_noun_word_le &
  [ STEM < "garage" >,
    SYNSEM.LOCAL.KEYS.KEY _garage_rel ].

:end :instance.


; <<>>

:begin :instance.

garden_n1 := intr_noun_word_le &
  [ STEM < "garden" >,
    SYNSEM.LOCAL.KEYS.KEY _garden_rel ].

:end :instance.


; <<>>

:begin :instance.

gate_n1 := intr_noun_word_le &
  [ STEM < "gate" >,
    SYNSEM.LOCAL.KEYS.KEY _gate_rel ].

:end :instance.


; <<>>

:begin :instance.

gather_v1 := mv_unerg_le &
  [ STEM < "gather" >,
    SYNSEM.LOCAL.KEYS.KEY _gather_coll_rel ].

:end :instance.


; <<>>

:begin :instance.

gather_v2 := mv_np_trans_le &
  [ STEM < "gather" >,
    SYNSEM.LOCAL.KEYS.KEY _gather_rel ].

:end :instance.


; <<>>

:begin :instance.

gathering_n1 := noun_ppof_word_le &
  [ STEM < "gathering" >,
    SYNSEM.LOCAL.KEYS.KEY _gathering_rel ].

:end :instance.


; <<>>

:begin :instance.

generally_adv1 := vp_adv_pre_word_le &
  [ STEM < "generally" >,
    SYNSEM.LOCAL.KEYS.KEY _generally_rel ].

:end :instance.


; <<>>

:begin :instance.

generally_adv2 := s_adv_pre_word_le &
  [ STEM < "generally" >,
    SYNSEM.LOCAL.KEYS.KEY _generally_rel ].

:end :instance.


; <<>>

:begin :instance.

gentleman_n1 := intr_noun_word_le &
  [ STEM < "gentleman" >,
    SYNSEM.LOCAL.KEYS.KEY _gentleman_rel ].

:end :instance.


; <<>>

:begin :instance.

genuine_a1 := intrans_adj_le &
  [ STEM < "genuine" >,
    SYNSEM.LOCAL.KEYS.KEY _genuine_rel ].

:end :instance.


; <<>>

:begin :instance.

german_a1 := intrans_adj_le &
  [ STEM < "german" >,
    SYNSEM.LOCAL.KEYS.KEY _german_rel ].

:end :instance.


; <<>>

:begin :instance.

German_n1 := proper_le &
  [ STEM < "german" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'German ].

:end :instance.


; <<>>

:begin :instance.

Germany_n1 := proper_le &
  [ STEM < "germany" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Germany ].

:end :instance.


; <<>>

:begin :instance.

get_back_v2 := mv_particle_np_le &
  [ STEM < "get" >,
    SYNSEM.LOCAL.KEYS [ KEY _get_back_rel,
			--COMPKEY _back_adv_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

get_down_v2 := mv_prep_particle_np_le &
  [ STEM < "get" >,
    SYNSEM.LOCAL.KEYS [ KEY _get_down_rel,
			--COMPKEY _down_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

get_down_to_v1 := mv_particle_pp_le &
  [ STEM < "get" >,
    SYNSEM.LOCAL.KEYS [ KEY _get_down_to_rel,
			--COMPKEY _down_rel_s,
			--OCOMPKEY _to_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

get_hold_v1 := mv_empty_prep_non_trans_le &
  [ STEM < "get" >,
    SYNSEM.LOCAL.KEYS [ KEY _get_hold_rel,
			--COMPKEY _hold_n_rel,
			--OCOMPKEY _of_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

get_off_v2 := mv_prep_particle_np_le &
  [ STEM < "get" >,
    SYNSEM.LOCAL.KEYS [ KEY _get_off_rel,
			--COMPKEY _off_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

get_out_v2 := mv_prep_particle_np_le &
  [ STEM < "get" >,
    SYNSEM.LOCAL.KEYS [ KEY _get_out_rel,
			--COMPKEY _out_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

get_v1 := mv_np_trans_le &
  [ STEM < "get" >,
    SYNSEM.LOCAL.KEYS.KEY _get_rel ].

:end :instance.


; <<>>

:begin :instance.

get_prd_v1 := mv_subj_equi_prd_le &
  [ STEM < "get" >,
    SYNSEM.LOCAL.KEYS [ KEY _get_state_rel &
	                    [ LABEL #label ],
			--COMPKEY.LABEL #label ] ].

:end :instance.


; <<>>

:begin :instance.

get-prd_v2 := mv_obj_equi_non_trans_prd_le &
  [ STEM < "get" >,
    SYNSEM.LOCAL.KEYS.KEY _get_state_rel ].

:end :instance.


; <<>>

:begin :instance.

get_through_v1 := mv_empty_prep_intrans_le &
  [ STEM < "get" >,
    SYNSEM.LOCAL.KEYS [ KEY _get_through_rel,
			--COMPKEY _through_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

get_to_v1 := mv_ssr_le &
  [ STEM < "get" >,
    SYNSEM.LOCAL.KEYS.KEY _get_to_rel ].

:end :instance.


; <<>>

:begin :instance.

get_up_v1 := mv_particle_le &
  [ STEM < "get" >,
    SYNSEM.LOCAL.KEYS [ KEY _get_up_rel,
			--COMPKEY _up_rel ] ].

:end :instance.


; <<>>

:begin :instance.

give_v1 := mv_ditrans_le &
  [ STEM < "give" >,
    SYNSEM.LOCAL.KEYS.KEY _give_rel ].

:end :instance.


; <<>>

:begin :instance.

glad_a1 := reg_adj_equi_le &
  [ STEM < "glad" >,
    SYNSEM.LOCAL.KEYS.KEY _glad_rel ].

:end :instance.


; <<>>

:begin :instance.

gladly_adv1 := vp_adv_post_word_le &
  [ STEM < "gladly" >,
    SYNSEM.LOCAL.KEYS.KEY _gladly_rel ].

:end :instance.


; <<>>

:begin :instance.

glass_n1 := noun_ppof_word_le &
  [ STEM < "glass" >,
    SYNSEM.LOCAL.KEYS.KEY _glass_rel ].

:end :instance.


; <<>>

:begin :instance.

go_along_with_v1 := mv_particle_pp*_le &
  [ STEM < "go" >,
    SYNSEM.LOCAL.KEYS [ KEY _go_along_rel,
			--COMPKEY _along_p_rel_s,
			--OCOMPKEY _with_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

go_on_v1 := mv_particle_le &
  [ STEM < "go" >,
    SYNSEM.LOCAL.KEYS [ KEY _go_on_rel,
			--COMPKEY _on_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

go_out_v1 := mv_particle_le &
  [ STEM < "go" >,
    SYNSEM.LOCAL.KEYS [ KEY _go_out_rel,
			--COMPKEY _out_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

go_over_v1 := mv_empty_prep_intrans_le &
  [ STEM < "go" >,
    SYNSEM.LOCAL.KEYS [ KEY _go_over_rel,
			--COMPKEY _over_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

go_through_v1 := mv_empty_prep_intrans_le &
  [ STEM < "go" >,
    SYNSEM.LOCAL.KEYS [ KEY _go_through_rel,
			--COMPKEY _through_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

go_v1 := mv_unerg_le &
  [ STEM < "go" >,
    SYNSEM.LOCAL.KEYS.KEY _go_rel ].

:end :instance.


; <<>>

:begin :instance.

go_v2 := mv_prd_ssr_le &
  [ STEM < "go" >,
    SYNSEM.LOCAL [ CAT.VAL.COMPS < [ LOCAL.CAT.HEAD verb &
						    [ VFORM prp ] ] >,
		   KEYS.KEY _go_ing_rel ] ].
:end :instance.


; <<>>

:begin :instance.

go_along_v1 := mv_particle_le &
  [ STEM < "go" >,
    SYNSEM.LOCAL.KEYS [ KEY _go_along_rel,
			--COMPKEY _along_p_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

go_away_v1 := mv_particle_le &
  [ STEM < "go" >,
    SYNSEM.LOCAL.KEYS [ KEY _go_away_rel,
			--COMPKEY _away_adv_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

go_off_v1 := mv_particle_le &
  [ STEM < "go" >,
    SYNSEM.LOCAL.KEYS [ KEY _go_off_rel,
			--COMPKEY _off_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

go_state_v1 := mv_subj_equi_prd_le &
  [ STEM < "go" >,
    SYNSEM.LOCAL [ CAT.VAL.COMPS < [ LOCAL.CAT.HEAD adj ] >,
		   KEYS.KEY _go_state_rel ] ].
:end :instance.


; <<>>

:begin :instance.

goal_n1 := intr_noun_word_le &
  [ STEM < "goal" >,
    SYNSEM.LOCAL.KEYS.KEY _goal_rel ].

:end :instance.


; <<>>

:begin :instance.

god_root := disc_adv_le &
  [ STEM < "god" >,
    SYNSEM.LOCAL.KEYS.KEY excl_rel & [ EXCL 'god ] ].

:end :instance.


; <<>>
; MULTIKEY < "going" >

:begin :instance.

going_by := prep_mle1 &
  [ STEM < "going", "by" >,
    SYNSEM.LOCAL.KEYS.KEY _going_by_rel ].

:end :instance.


; <<>>

:begin :instance.

going_to_v1 := quasimodal_le &
  [ STEM < "going" >,
    SYNSEM.LOCAL [ CAT.HEAD [ VFORM prp, 
			      PRD +,
			      TENSE future* ],
		   KEYS.KEY _going_to_rel ] ].
:end :instance.


; <<>>

:begin :instance.

golden_a1 := intrans_adj_le &
  [ STEM < "golden" >,
    SYNSEM.LOCAL.KEYS.KEY _golden_rel ].

:end :instance.


; <<>>

:begin :instance.

good_a1 := intrans_adj_le &
  [ STEM < "good" >,
    SYNSEM.LOCAL.KEYS.KEY _good_rel ].

:end :instance.


; <<>>

:begin :instance.

good_root := disc_adv_le &
  [ STEM < "good" >,
    SYNSEM.LOCAL [ CAT.POSTHEAD -,
		   KEYS.KEY excl_rel & [ EXCL 'good ] ] ].

:end :instance.


; <<>>
; MULTIKEY < "as" >

:begin :instance.

no_good_a1 := intrans_adj_mle &
  [ STEM < "no", "good" >,
    SYNSEM.LOCAL.KEYS.KEY _no_good_rel ].

:end :instance.


; <<>>
; MULTIKEY < "good" >

:begin :instance.

good_friday := holiday_word_mle1 &
  [ STEM < "good", "friday" >,
    SYNSEM.LOCAL.KEYS.KEY.DAY 'good_friday ].

:end :instance.


; <<>>
; MULTIKEY < "heavens" >

:begin :instance.

good_heavens := disc_adv_mle2 &
  [ STEM < "good", "heavens" >,
    SYNSEM.LOCAL.KEYS.KEY excl_rel & [ EXCL 'good_heavens ] ].

:end :instance.


; <<>>

:begin :instance.

goodbye_n1 := intr_noun_word_le &
  [ STEM < "goodbye" >,
    SYNSEM.LOCAL.KEYS.KEY _goodbye_n_rel ].

:end :instance.


; <<>>

:begin :instance.

goods_n1 := plurn_le &
  [ STEM < "goods" >,
    SYNSEM.LOCAL.KEYS.KEY _goods_rel ].

:end :instance.


; <<>>

:begin :instance.

goose_n1 := intr_noun_word_le &
  [ STEM < "goose" >,
    SYNSEM.LOCAL.KEYS.KEY _goose_rel ].

:end :instance.


; <<>>

:begin :instance.

goose_n2 := massn_le &
  [ STEM < "goose" >,
    SYNSEM.LOCAL.KEYS.KEY _goose_meat_rel ].

:end :instance.


; <<>>

:begin :instance.

gosh_root := disc_adv_le &
  [ STEM < "gosh" >,
    SYNSEM.LOCAL.KEYS.KEY excl_rel & [ EXCL 'gosh ] ].

:end :instance.


; <<>>

:begin :instance.

got_poss := mv_poss_got_le &
  [ STEM < "got" >,
    SYNSEM.LOCAL.KEYS.KEY _have_rel ].

:end :instance.


; <<>>

:begin :instance.

got_poss_prd := mv_poss_got_prd_le &
  [ STEM < "got" >,
    SYNSEM.LOCAL.KEYS.KEY _have_prd_rel ].

:end :instance.


; <<>>

:begin :instance.

got_to_v1 := quasimodal_psp_le &
  [ STEM < "got" >,
    SYNSEM.LOCAL.KEYS.KEY _got_to_rel ].

:end :instance.


; <<>>

:begin :instance.

government_n1 := noun_ppof_word_le &
  [ STEM < "government" >,
    SYNSEM.LOCAL.KEYS.KEY _government_rel ].

:end :instance.


; <<>>

:begin :instance.

grab_v1 := mv_np_trans_le &
  [ STEM < "grab" >,
    SYNSEM.LOCAL.KEYS.KEY _grab_rel ].

:end :instance.


; <<>>

:begin :instance.

Gran_n1 := proper_le &
  [ STEM < "gran" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Gran ].

:end :instance.


; <<>>
; MULTIKEY < "grand" >

:begin :instance.

Grand_Canyon := intr_noun_word_mle1 &
  [ STEM < "grand", "canyon" >,
    SYNSEM.LOCAL.KEYS.KEY named_rel & [ NAMED 'grand_canyon ] ].

:end :instance.


; <<>>

:begin :instance.

grandmother_n1 := intr_noun_word_le &
  [ STEM < "grandmother" >,
    SYNSEM.LOCAL.KEYS.KEY _grandmother_rel ].

:end :instance.


; <<>>

:begin :instance.

grasp_v1 := mv_np_trans_le &
  [ STEM < "grasp" >,
    SYNSEM.LOCAL.KEYS.KEY _grasp_v_rel ].

:end :instance.


; <<>>

:begin :instance.

grasp_v2 := mv_cp_non_trans_le &
  [ STEM < "grasp" >,
    SYNSEM.LOCAL.KEYS.KEY _grasp_h_rel ].

:end :instance.


; <<>>

:begin :instance.

gratis_adv1 := vp_adv_post_word_le &
  [ STEM < "gratis" >,
    SYNSEM.LOCAL.KEYS.KEY _gratis_rel ].

:end :instance.


; <<>>

:begin :instance.

gratuitously_adv1 := adv_word_le &
  [ STEM < "gratuitously" >,
    SYNSEM.LOCAL.KEYS.KEY _gratuitously_rel ].

:end :instance.


; <<>>

:begin :instance.

grave_a1 := intrans_adj_le &
  [ STEM < "grave" >,
    SYNSEM.LOCAL.KEYS.KEY _grave_rel ].

:end :instance.


; <<>>

:begin :instance.

great_root := disc_adv_le &
  [ STEM < "great" >,
    SYNSEM.LOCAL.KEYS.KEY excl_rel & [ EXCL 'great ] ].

:end :instance.


; <<>>

:begin :instance.

great_a1 := int_vp_adv_post_word_le &
  [ STEM < "great" >,
    SYNSEM.LOCAL.KEYS.KEY _great_adv_rel ].

:end :instance.


; <<>>

:begin :instance.

great_adj := intrans_adj_le &
  [ STEM < "great" >,
    SYNSEM.LOCAL.KEYS.KEY _great_rel ].

:end :instance.


; <<>>

:begin :instance.

greatly_adv1 := vp_adv_word_le &
  [ STEM < "greatly" >,
    SYNSEM.LOCAL.KEYS.KEY _greatly_rel ].

:end :instance.


; <<>>

:begin :instance.

greek_a1 := intrans_adj_le &
  [ STEM < "greek" >,
    SYNSEM.LOCAL.KEYS.KEY _greek_rel ].

:end :instance.


; <<>>

:begin :instance.

Greek_n1 := proper_le &
  [ STEM < "greek" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Greek ].

:end :instance.


; <<>>

:begin :instance.

greet_v1 := mv_np_trans_le &
  [ STEM < "greet" >,
    SYNSEM.LOCAL.KEYS.KEY _greet_rel ].

:end :instance.


; <<>>

:begin :instance.

greeting_n1 := intr_noun_word_le &
  [ STEM < "greeting" >,
    SYNSEM.LOCAL.KEYS.KEY _greeting_rel ].

:end :instance.


; <<>>

:begin :instance.

Grossheim_n1 := proper_le &
  [ STEM < "grossheim" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Grossheim ].

:end :instance.


; <<>>

:begin :instance.

ground_a1 := intrans_adj_le &
  [ STEM < "ground" >,
    SYNSEM.LOCAL.KEYS.KEY _ground_adj_rel ].

:end :instance.


; <<>>

:begin :instance.

ground_n1 := massn_le &
  [ STEM < "ground" >,
    SYNSEM.LOCAL.KEYS.KEY _ground_n_rel ].

:end :instance.


; <<>>

:begin :instance.

group_n1 := noun_ppof_word_le &
  [ STEM < "group" >,
    SYNSEM.LOCAL.KEYS.KEY _group_n_rel ].

:end :instance.


; <<>>

:begin :instance.

grow_v1 := mv_np_trans_le &
  [ STEM < "grow" >,
    SYNSEM.LOCAL.KEYS.KEY _grow_x_rel ].

:end :instance.


; <<>>

:begin :instance.

grow_v2 := mv_unacc_le &
  [ STEM < "grow" >,
    SYNSEM.LOCAL.KEYS.KEY _grow_rel ].

:end :instance.


; <<>>

:begin :instance.

guess_v1 := mv_unerg_le &
  [ STEM < "guess" >,
    SYNSEM.LOCAL.KEYS.KEY _guess_rel ].

:end :instance.


; <<>>

:begin :instance.

guess_v2 := mv_cp_fin_inf_non_trans_le &
  [ STEM < "guess" >,
    SYNSEM.LOCAL.KEYS.KEY _guess_h_rel ].

:end :instance.


; <<>>

:begin :instance.

gun_n1 := intr_noun_word_le &
  [ STEM < "gun" >,
    SYNSEM.LOCAL.KEYS.KEY _gun_rel ].

:end :instance.


; <<>>

:begin :instance.

guy_n1 := intr_noun_word_le &
  [ STEM < "guy" >,
    SYNSEM.LOCAL.KEYS.KEY _guy_rel ].

:end :instance.


; <<>>

:begin :instance.

ha_root := disc_adv_le &
  [ STEM < "ha" >,
    SYNSEM.LOCAL.KEYS.KEY excl_rel & [ EXCL 'ha ] ].

:end :instance.


; <<>>
; MULTIKEY < "ha" >

:begin :instance.

ha_ha_root := disc_adv_mle1 &
  [ STEM < "ha", "ha" >,
    SYNSEM.LOCAL.KEYS.KEY excl_rel & [ EXCL 'ha_ha ] ].

:end :instance.


; <<>>

:begin :instance.

had_aux := had_aux_le &
  [ STEM < "had" > ].

:end :instance.


; <<>>

:begin :instance.

had_aux_cx := had_aux_cx_le &
  [ STEM < "d" > ].

:end :instance.


; <<>>

:begin :instance.

had_aux_subj := had_aux_subj_le &
  [ STEM < "had" > ].

:end :instance.


; <<>>

:begin :instance.

hadnt_aux_1 := had_aux_neg_le &
  [ STEM < "hadn't" > ].

:end :instance.


; <<>>
; MULTIKEY < "hadn" >

:begin :instance.

hadnt_aux_2 := had_aux_neg_mle1 &
  [ STEM < "hadn", "t" > ].

:end :instance.


; <<>>

:begin :instance.

hadnt_aux_subj_1 := had_aux_subj_neg_le &
  [ STEM < "hadn't" > ].

:end :instance.


; <<>>
; MULTIKEY < "hadn" >

:begin :instance.

hadnt_aux_subj_2 := had_aux_subj_neg_mle1 &
  [ STEM < "hadn", "t" > ].

:end :instance.


; <<>>

:begin :instance.

hairdresser_n1 := intr_noun_word_le &
  [ STEM < "hairdresser" >,
    SYNSEM.LOCAL.KEYS.KEY _hairdresser_rel ].

:end :instance.


; <<>>

:begin :instance.

half_pn1 := part_noun_le &
  [ STEM < "half" >,
    SYNSEM.LOCAL.KEYS.ALTKEY _half_det_rel ].

:end :instance.


; <<>>
; MULTIKEY < "half" >

:begin :instance.

half_the := det_mle1 &
  [ STEM < "half", "the" >,
    SYNSEM.LOCAL.KEYS.KEY _half_det_rel ].

:end :instance.


; <<>>

:begin :instance.

half_n1 := noun_ppcomp_word_le &
  [ STEM < "half" >,
    SYNSEM.LOCAL.KEYS.KEY _half_n_rel ].

:end :instance.


; <<>>

:begin :instance.

half_deg := degree_spec_le &
  [ STEM < "half" >,
    SYNSEM.LOCAL.KEYS.KEY _half_rel ].

:end :instance.


; <<>>

:begin :instance.

half_hour := minute_word_le &
  [ STEM < "half" >,
    SYNSEM.LOCAL [ CAT.POSTHEAD -,
		   KEYS.KEY.MINUTE "30" ] ].

:end :instance.


; <<>>
; MULTIKEY < "half" >

:begin :instance.

half-way_a1 := intrans_adj_mle &
  [ STEM < "half", "way" >,
    SYNSEM.LOCAL.KEYS.KEY _half-way_rel ].

:end :instance.


; <<>>

:begin :instance.

hall_n2 := intr_noun_word_le &
  [ STEM < "hall" >,
    SYNSEM.LOCAL.KEYS.KEY _hall_rel ].

:end :instance.


; <<>>

:begin :instance.

Hamburg_n1 := proper_le &
  [ STEM < "hamburg" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Hamburg ].

:end :instance.


; <<>>

:begin :instance.

hammer_v1 := mv_np_trans_le &
  [ STEM < "hammer" >,
    SYNSEM.LOCAL.KEYS.KEY _hammer_rel ].

:end :instance.


; <<>>

:begin :instance.

hammer_out_v1 := mv_prep_particle_np_le &
  [ STEM < "hammer" >,
    SYNSEM.LOCAL.KEYS [ KEY _hammer_out_rel,
			--COMPKEY _out_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

hand_in_v1 := mv_prep_particle_np_le &
  [ STEM < "hand" >,
    SYNSEM.LOCAL.KEYS [ KEY _hand_in_rel,
			--COMPKEY _in_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

hand_n1 := intr_noun_word_le &
  [ STEM < "hand" >,
    SYNSEM.LOCAL.KEYS.KEY _hand_rel ].

:end :instance.


; <<>>

:begin :instance.

hand_v1 := mv_ditrans_le &
  [ STEM < "hand" >,
    SYNSEM.LOCAL.KEYS.KEY _hand_v_rel ].

:end :instance.


; <<>>

:begin :instance.

handle_n1 := intr_noun_word_le &
  [ STEM < "handle" >,
    SYNSEM.LOCAL.KEYS.KEY _handle_rel ].

:end :instance.


; <<>>

:begin :instance.

handle_v1 := mv_np_trans_le &
  [ STEM < "handle" >,
    SYNSEM.LOCAL.KEYS.KEY _handle_v_rel ].

:end :instance.


; <<>>

:begin :instance.

handsome_a1 := intrans_adj_le &
  [ STEM < "handsome" >,
    SYNSEM.LOCAL.KEYS.KEY _handsome_rel ].

:end :instance.


; <<>>
; MULTIKEY < "hang" >

:begin :instance.

hang_on_root := disc_adv_mle1 &
  [ STEM < "hang", "on" >,
    SYNSEM.LOCAL.KEYS.KEY excl_rel & [ EXCL 'hang_on ] ].

:end :instance.


; <<>>

:begin :instance.

Hannover_n1 := proper_le &
  [ STEM < "hannover" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Hannover ].

:end :instance.


; <<>>

:begin :instance.

Hanover_n1 := proper_le &
  [ STEM < "hanover" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Hanover ].

:end :instance.


; <<>>

:begin :instance.

happen_v1 := mv_unacc_le &
  [ STEM < "happen" >,
    SYNSEM.LOCAL.KEYS.KEY _happen_rel ].

:end :instance.


; <<>>

:begin :instance.

happen_v2 := mv_ssr_le &
  [ STEM < "happen" >,
    SYNSEM.LOCAL.KEYS.KEY _happen2_rel ].

:end :instance.


; <<>>

:begin :instance.

happen_to_v1 := mv_empty_prep_intrans_le &
  [ STEM < "happen" >,
    SYNSEM.LOCAL.KEYS [ KEY _happen_to_rel,
			--COMPKEY _to_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

hard_a1 := intrans_adj_le &
  [ STEM < "hard" >,
    SYNSEM.LOCAL.KEYS.KEY _hard_adj_rel ].

:end :instance.


; <<>>

:begin :instance.

harder := comp_adj_le &
  [ STEM < "harder" >,
    SYNSEM.LOCAL.KEYS.KEY _hard_adj_rel ].

:end :instance.



; <<>>

:begin :instance.

hardly_adv1 := vp_adv_pre_word_le &
  [ STEM < "hardly" >,
    SYNSEM.LOCAL.KEYS.KEY _hardly_rel ].

:end :instance.


; <<>>

:begin :instance.

hardly_adv2 := s_adv_pre_word_le &
  [ STEM < "hardly" >,
    SYNSEM.LOCAL.KEYS.KEY _hardly_rel ].

:end :instance.


; <<>>

:begin :instance.

has_aux := has_aux_le &
  [ STEM < "has" > ].

:end :instance.


; <<>>

:begin :instance.

has_aux_cx := has_aux_cx_le &
  [ STEM < "s" > ].

:end :instance.


; <<>>

:begin :instance.

has_aux_cx_2 := has_aux_cx_le &
  [ STEM < "'s" > ].

:end :instance.


; <<>>

:begin :instance.

hasnt_aux_1 := has_aux_neg_le &
  [ STEM < "hasn't" > ].

:end :instance.


; <<>>
; MULTIKEY < "hasn" >

:begin :instance.

hasnt_aux_2 := has_aux_neg_mle1 &
  [ STEM < "hasn", "t" > ].

:end :instance.


; <<>>

:begin :instance.

hat_n1 := intr_noun_word_le &
  [ STEM < "hat" >,
    SYNSEM.LOCAL.KEYS.KEY _hat_rel ].

:end :instance.


; <<>>

:begin :instance.

hate_v1 := mv_np_trans_le &
  [ STEM < "hate" >,
    SYNSEM.LOCAL.KEYS.KEY _hate_rel ].

:end :instance.


; <<>>

:begin :instance.

hate_v2 := mv_subj_equi_le &
  [ STEM < "hate" >,
    SYNSEM.LOCAL.KEYS.KEY _hate_eq_rel ].

:end :instance.


; <<>>

:begin :instance.

hate_v3 := mv_subj_equi_prp_le &
  [ STEM < "hate" >,
    SYNSEM.LOCAL.KEYS.KEY _hate_eq_rel ].

:end :instance.


; <<>>

:begin :instance.

have_off_v1 := mv_prep_particle_np_le &
  [ STEM < "have" >,
    SYNSEM.LOCAL.KEYS [ KEY _have_off_rel,
			--COMPKEY _off_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

have_to_do_with_v1 := mv_empty_prep_intrans_le &
  [ STEM < "have" >,
    SYNSEM.LOCAL.KEYS [ KEY _have_to_do_with_rel,
			--COMPKEY _to_do_with_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

have-poss := mv_poss_le &
  [ STEM < "have" >,
    SYNSEM.LOCAL.KEYS.KEY _have_rel ].

:end :instance.


; <<>>

:begin :instance.

have-prd := mv_obj_equi_non_trans_prd_le &
  [ STEM < "have" >,
    SYNSEM.LOCAL.KEYS.KEY _have_prd_rel  ].

:end :instance.


; <<>>

:begin :instance.

have_to1 := mv_ssr_le &
  [ STEM < "have" >,
    SYNSEM.LOCAL.KEYS.KEY _have_to_rel ].

:end :instance.


; <<>>

:begin :instance.

have_fin_aux := have_fin_aux_le &
  [ STEM < "have" > ].

:end :instance.


; <<>>

:begin :instance.

have_fin_aux_cx := have_fin_aux_cx_le &
  [ STEM < "ve" > ].

:end :instance.


; <<>>

:begin :instance.

have_bse_aux := have_bse_aux_le &
  [ STEM < "have" > ].

:end :instance.


; <<>>

:begin :instance.

have_fin_aux_neg_1 := have_fin_aux_neg_le &
  [ STEM < "haven't" > ].

:end :instance.


; <<>>
; MULTIKEY < "haven" >

:begin :instance.

have_fin_aux_neg_2 := have_fin_aux_neg_mle1 &
  [ STEM < "haven", "t" > ].

:end :instance.

; <<>>

:begin :instance.

have_aux_prp := have_prespart_le &
  [ STEM < "having" > ].

:end :instance.


; <<>>

:begin :instance.

he := pers_pro_le &
  [ STEM < "he" >,
    SYNSEM.LOCAL [ CAT.HEAD.CASE nom,
		   KEYS.KEY.INST [ PNG png & [ PN 3sg*,
					       GEN masc* ],
				   PRONTYPE std_3 ] ] ].
:end :instance.


; <<>>

:begin :instance.

head_n1 := intr_noun_word_le &
  [ STEM < "head" >,
    SYNSEM.LOCAL.KEYS.KEY _head_rel ].

:end :instance.


; <<>>

:begin :instance.

head_v1 := mv_prep_intrans_le &
  [ STEM < "head" >,
    SYNSEM.LOCAL.KEYS [ KEY _head_dir_rel,
			--COMPKEY dir_rel ] ].

:end :instance.


; <<>>

:begin :instance.

head_v2 := mv_np_trans_le &
  [ STEM < "head" >,
    SYNSEM.LOCAL.KEYS.KEY _head_v_rel ].

:end :instance.


; <<>>

:begin :instance.

hear_about_v1 := mv_empty_prep_intrans_le &
  [ STEM < "hear" >,
    SYNSEM.LOCAL.KEYS [ KEY _hear_about_rel,
			--COMPKEY _about_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

hear_from_v1 := mv_empty_prep_intrans_le &
  [ STEM < "hear" >,
    SYNSEM.LOCAL.KEYS [ KEY _hear_from_rel,
			--COMPKEY _from_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

hear_of_v1 := mv_empty_prep_intrans_le &
  [ STEM < "hear" >,
    SYNSEM.LOCAL.KEYS [ KEY _hear_of_rel,
			--COMPKEY _of_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

hear_v1 := mv_np_trans_le &
  [ STEM < "hear" >,
    SYNSEM.LOCAL.KEYS.KEY _hear_rel ].

:end :instance.


; <<>>

:begin :instance.

hear_v2 := mv_cp_non_trans_le &
  [ STEM < "hear" >,
    SYNSEM.LOCAL.KEYS.KEY _hear2_rel ].

:end :instance.


; <<>>

:begin :instance.

hear_v3 := mv_sorb_le &
  [ STEM < "hear" >,
    SYNSEM.LOCAL.KEYS.KEY _hear2_rel ].

:end :instance.


; <<>>

:begin :instance.

heard_v3 := mv_sorb_pass_le &
  [ STEM < "heard" >,
    SYNSEM.LOCAL.KEYS.KEY _hear2_rel ].

:end :instance.


; <<>>

:begin :instance.

hearty_a1 := intrans_adj_le &
  [ STEM < "hearty" >,
    SYNSEM.LOCAL.KEYS.KEY _hearty_rel ].

:end :instance.


; <<>>

:begin :instance.

heavier_a1 := comp_adj_le &
  [ STEM < "heavier" >,
    SYNSEM.LOCAL.KEYS.KEY _heavy_rel ].

:end :instance.


; <<>>

:begin :instance.

heavy_a1 := intrans_adj_le &
  [ STEM < "heavy" >,
    SYNSEM.LOCAL.KEYS.KEY _heavy_rel ].

:end :instance.


; <<>>

:begin :instance.

hectic_a1 := intrans_adj_le &
  [ STEM < "hectic" >,
    SYNSEM.LOCAL.KEYS.KEY _hectic_rel ].

:end :instance.


; <<>>

:begin :instance.

Heidelberg_n1 := proper_le &
  [ STEM < "heidelberg" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Heidelberg ].

:end :instance.


; <<>>

:begin :instance.

hello_root := disc_adv_le &
  [ STEM < "hello" >,
    SYNSEM.LOCAL.KEYS.KEY greet_rel & [ EXCL 'hello ] ].

:end :instance.


; <<>>

:begin :instance.

Helman := proper_le &
  [ STEM < "helman" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'helman ].

:end :instance.


; <<>>

:begin :instance.

Helwig := proper_le &
  [ STEM < "helwig" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'helwig ].

:end :instance.


; <<>>

:begin :instance.

help_v1 := mv_np*_trans_le &
  [ STEM < "help" >,
    SYNSEM.LOCAL.KEYS.KEY _help_rel ].

:end :instance.


; <<>>

:begin :instance.

help_v2 := mv_subj_equi_le &
  [ STEM < "help" >,
    SYNSEM.LOCAL.KEYS.KEY _help_to_rel ].

:end :instance.


; <<>>

:begin :instance.

help_v3 := mv_sor_le &
  [ STEM < "help" >,
    SYNSEM.LOCAL.KEYS.KEY _help_to_rel ].

:end :instance.


; <<>>

:begin :instance.

help_v4 := mv_sorb_le &
  [ STEM < "help" >,
    SYNSEM.LOCAL.KEYS.KEY _help_to_rel ].

:end :instance.


; <<>>

:begin :instance.

helped_v4 := mv_sorb_pass_le &
  [ STEM < "helped" >,
    SYNSEM.LOCAL.KEYS.KEY _help_to_rel ].

:end :instance.


; <<>>

:begin :instance.

hence_adv1 := vp_adv_pre_word_le &
  [ STEM < "hence" >,
    SYNSEM.LOCAL.KEYS.KEY _hence_rel ].

:end :instance.


; <<>>

:begin :instance.

hence_adv2 := s_adv_pre_word_le &
  [ STEM < "hence" >,
    SYNSEM.LOCAL.KEYS.KEY _hence_rel ].

:end :instance.


; <<>>

:begin :instance.

her_poss := poss_le &
  [ STEM < "her" >,
    SYNSEM.LOCAL.CONT.LISZT <! relation, relation,
			       [ INST [ PNG png & [ PN 3sg*,
						    GEN fem* ],
					PRONTYPE std_3 ] ] !> ].
:end :instance.


; <<>>

:begin :instance.

her := pers_pro_le &
  [ STEM < "her" >,
    SYNSEM.LOCAL [ CAT.HEAD.CASE acc,
		   KEYS.KEY.INST [ PNG png & [ PN 3sg*,
					       GEN fem* ],
				   PRONTYPE std_3 ] ] ].
:end :instance.


; <<>>

:begin :instance.

here_nom := np_adv_le &
  [ STEM < "here" >,
    SYNSEM.LOCAL.CONT.LISZT <! place_rel, _this_dem_rel !> ].

:end :instance.


; <<>>

:begin :instance.

here_nom_vm := int_vp_adv_post_word_le &
  [ STEM < "here" >,
    SYNSEM.LOCAL.KEYS.KEY _here_rel ].

:end :instance.


; <<>>

:begin :instance.

herewith_adv1 := vp_adv_post_word_le &
  [ STEM < "herewith" >,
    SYNSEM.LOCAL.KEYS.KEY _herewith_rel ].

:end :instance.


; <<>>

:begin :instance.

hers := poss_pro_le &
  [ STEM < "hers" >,
    SYNSEM.LOCAL.CONT.LISZT.LIST.FIRST.INST.PNG png & [ PN 3sg*,
							GEN fem* ] ].

:end :instance.


; <<>>

:begin :instance.

herself := refl_pro_le &
  [ STEM < "herself" >,
    SYNSEM.LOCAL.KEYS.KEY.INST.PNG png & [ PN 3sg*,
					   GEN fem* ] ].

:end :instance.


; <<>>

:begin :instance.

hey_root := disc_adv_le &
  [ STEM < "hey" >,
    SYNSEM.LOCAL.KEYS.KEY excl_rel & [ EXCL 'hey ] ].

:end :instance.


; <<>>

:begin :instance.

hi_root := disc_adv_le &
  [ STEM < "hi" >,
    SYNSEM.LOCAL.KEYS.KEY greet_rel & [ EXCL 'hi ] ].

:end :instance.


; <<>>

:begin :instance.

high_a1 := intrans_adj_le &
  [ STEM < "high" >,
    SYNSEM.LOCAL.KEYS.KEY _high_rel ].

:end :instance.


; <<>>

:begin :instance.

Highlander_n1 := intr_noun_word_le &
  [ STEM < "highlander" >,
    SYNSEM.LOCAL.KEYS.KEY named_rel & [ NAMED 'Highlander ] ].

:end :instance.


; <<>>

:begin :instance.

highly_deg := degree_spec_le &
  [ STEM < "highly" >,
    SYNSEM.LOCAL.KEYS.KEY _high_grad_rel ].

:end :instance.


; <<>>

:begin :instance.

hill_n1 := intr_noun_word_le &
  [ STEM < "hill" >,
    SYNSEM.LOCAL.KEYS.KEY _hill_rel ].

:end :instance.


; <<>>

:begin :instance.

him := pers_pro_le &
  [ STEM < "him" >,
    SYNSEM.LOCAL [ CAT.HEAD.CASE acc,
		   KEYS.KEY.INST [ PNG png & [ PN 3sg*,
					       GEN masc* ],
				   PRONTYPE std_3 ] ] ].
:end :instance.


; <<>>

:begin :instance.

himself := refl_pro_le &
  [ STEM < "himself" >,
    SYNSEM.LOCAL.KEYS.KEY.INST.PNG png & [ PN 3sg*,
					   GEN masc* ] ].

:end :instance.


; <<>>

:begin :instance.

hire_v1 := mv_np_trans_le &
  [ STEM < "hire" >,
    SYNSEM.LOCAL.KEYS.KEY _hire_v_rel ].

:end :instance.


; <<>>

:begin :instance.

his_poss := poss_le &
  [ STEM < "his" >,
    SYNSEM.LOCAL.CONT.LISZT <! relation, relation,
			       [ INST [ PNG png & [ PN 3sg*,
						    GEN masc* ],
					PRONTYPE std_3 ] ] !> ].

:end :instance.


; <<>>

:begin :instance.

his := poss_pro_le &
  [ STEM < "his" >,
    SYNSEM.LOCAL.CONT.LISZT.LIST.FIRST.INST.PNG png & [ PN 3sg*,
							GEN masc* ] ].

:end :instance.


; <<>>

:begin :instance.

hit_v1 := mv_np_trans_le &
  [ STEM < "hit" >,
    SYNSEM.LOCAL.KEYS.KEY _hit_v_rel ].

:end :instance.


; <<>>

:begin :instance.

hither_adv1 := pp_le &
  [ STEM < "hither" >,
    SYNSEM.LOCAL.KEYS.KEY _hither_rel ].

:end :instance.


; <<>>

:begin :instance.

hitherto_deg := degree_spec_le &
  [ STEM < "hitherto" >,
    SYNSEM.LOCAL.KEYS.KEY _hitherto_deg_rel ].

:end :instance.


; <<>>

:begin :instance.

hm_root := disc_adv_le &
  [ STEM < "hm" >,
    SYNSEM.LOCAL.KEYS.KEY excl_rel & [ EXCL 'hm ] ].

:end :instance.


; <<>>

:begin :instance.

hmm_root := disc_adv_le &
  [ STEM < "hmm" >,
    SYNSEM.LOCAL.KEYS.KEY excl_rel & [ EXCL 'hmm ] ].

:end :instance.


; <<>>

:begin :instance.

hold_n1 := massn_le &
  [ STEM < "hold" >,
    SYNSEM.LOCAL.KEYS.KEY _hold_n_rel ].

:end :instance.


; <<>>

:begin :instance.

hold_v1 := mv_np_trans_le &
  [ STEM < "hold" >,
    SYNSEM.LOCAL.KEYS.KEY _hold_v_rel ].

:end :instance.


; <<>>

:begin :instance.

Holger_n1 := proper_le &
  [ STEM < "holger" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Holger ].

:end :instance.


; <<>>

:begin :instance.

holiday_n1 := intr_temp_noun_le &
  [ STEM < "holiday" >,
    SYNSEM.LOCAL.KEYS.KEY _holiday_rel ].

:end :instance.


; <<>>

:begin :instance.

holy_a1 := intrans_adj_le &
  [ STEM < "holy" >,
    SYNSEM.LOCAL.KEYS.KEY _holy_rel ].

:end :instance.


; <<>>
; MULTIKEY < "holy" >

:begin :instance.

holy_saturday := holiday_word_mle1 &
  [ STEM < "holy", "saturday" >,
    SYNSEM.LOCAL.KEYS.KEY.DAY 'holy_saturday ].

:end :instance.


; <<>>
; MULTIKEY < "holy" >

:begin :instance.

holy_week := holiday_word_mle1 &
  [ STEM < "holy", "week" >,
    SYNSEM.LOCAL.KEYS.KEY.DAY 'holy_week ].

:end :instance.


; <<>>

:begin :instance.

home_adv := np_adv_le &
  [ STEM < "home" >,
    SYNSEM.LOCAL.CONT.LISZT <! _home_rel, def_rel !> ].

:end :instance.


; <<>>

:begin :instance.

home_n1 := intr_noun_word_le &
  [ STEM < "home" >,
    SYNSEM.LOCAL.KEYS.KEY _home_rel ].

:end :instance.


; <<>>

:begin :instance.

home_n2 := massn_le &
  [ STEM < "home" >,
    SYNSEM.LOCAL.KEYS.KEY _home_rel ].

:end :instance.


; <<>>

:begin :instance.

homework_n1 := massn_le &
  [ STEM < "homework" >,
    SYNSEM.LOCAL.KEYS.KEY _homework_rel ].

:end :instance.


; <<>>

:begin :instance.

honest_a1 := intrans_adj_le &
  [ STEM < "honest" >,
    SYNSEM.LOCAL.KEYS.KEY _honest_rel ].

:end :instance.


; <<>>

:begin :instance.

honestly_adv1 := vp_adv_pre_word_le &
  [ STEM < "honestly" >,
    SYNSEM.LOCAL.KEYS.KEY _honestly_rel ].

:end :instance.


; <<>>

:begin :instance.

honestly_adv2 := s_adv_pre_word_le &
  [ STEM < "honestly" >,
    SYNSEM.LOCAL.KEYS.KEY _honestly_rel ].

:end :instance.


; <<>>

:begin :instance.

Honolulu_n1 := proper_le &
  [ STEM < "honolulu" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Honolulu ].

:end :instance.


; <<>>

:begin :instance.

hook_v1 := mv_np_trans_le &
  [ STEM < "hook" >,
    SYNSEM.LOCAL.KEYS.KEY _hook_v_rel ].

:end :instance.


; <<>>

:begin :instance.
  
hook_up_v1 := mv_particle_le &
  [ STEM < "hook" >,
    SYNSEM.LOCAL.KEYS [ KEY _hook_up_rel,
			--COMPKEY _up_rel ] ].

:end :instance.


; <<>>

:begin :instance.

hope_for_v1 := mv_empty_prep_intrans_le &
  [ STEM < "hope" >,
    SYNSEM.LOCAL.KEYS [ KEY _hope_for_rel,
			--COMPKEY _for_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

hope_n1 := massn_le &
  [ STEM < "hope" >,
    SYNSEM.LOCAL.KEYS.KEY _hope_rel ].

:end :instance.


; <<>>

:begin :instance.

hope_v1 := mv_cp_prop_non_trans_le &
  [ STEM < "hope" >,
    SYNSEM.LOCAL.KEYS.KEY _hope_v_rel ].

:end :instance.


; <<>>

:begin :instance.

hopefully_adv1 := adv_word_le &
  [ STEM < "hopefully" >,
    SYNSEM.LOCAL.KEYS.KEY _hopefully_rel ].

:end :instance.


; <<>>

:begin :instance.

horoscope_n1 := intr_noun_word_le &
  [ STEM < "horoscope" >,
    SYNSEM.LOCAL.KEYS.KEY _horoscope_rel ].

:end :instance.


; <<>>

:begin :instance.

hot_a1 := intrans_adj_le &
  [ STEM < "hot" >,
    SYNSEM.LOCAL.KEYS.KEY _hot_rel ].

:end :instance.


; <<>>

:begin :instance.

hotel_n1 := intr_noun_word_le &
  [ STEM < "hotel" >,
    SYNSEM.LOCAL.KEYS.KEY _hotel_rel ].

:end :instance.


; <<>>

:begin :instance.

hotel_n2 := noun_npcomp_word_le &
  [ STEM < "hotel" >,
    SYNSEM.LOCAL.KEYS.KEY _hotel_rel ].

:end :instance.


; <<>>

:begin :instance.

hour_n1 := intr_temp_noun_le &
  [ STEM < "hour" >,
    SYNSEM.LOCAL.KEYS.KEY _hour_rel ].

:end :instance.


; <<>>

:begin :instance.

hour_a1 := meas_adj_word_le &
  [ STEM < "hour" >,
    SYNSEM.LOCAL.KEYS [ KEY temp_span_rel,
			ALTKEY _hour_rel ] ].

:end :instance.


; <<>>

:begin :instance.

hourly_adv1 := vp_adv_post_word_le &
  [ STEM < "hourly" >,
    SYNSEM.LOCAL.KEYS.KEY _hourly_adv_rel ].

:end :instance.


; <<>>

:begin :instance.

hourly_a1 := intrans_adj_le &
  [ STEM < "hourly" >,
    SYNSEM.LOCAL.KEYS.KEY _hourly_rel ].

:end :instance.



; <<>>
; MULTIKEY < "hours" >

:begin :instance.

hours_long_a1 := intrans_adj_mle &
  [ STEM < "hours", "long" >,
    SYNSEM.LOCAL.KEYS.KEY _hours_long_rel ].

:end :instance.


; <<>>

:begin :instance.

house_n1 := intr_noun_word_le &
  [ STEM < "house" >,
    SYNSEM.LOCAL.KEYS.KEY _house_rel ].

:end :instance.


; <<>>
; MULTIKEY < "how" >

:begin :instance.

how_many := pdet_pl_wh_mle1 &
  [ STEM < "how", "many" >,
    SYNSEM.LOCAL.KEYS.KEY _how_many_rel ].

:end :instance.


; <<>>

:begin :instance.

how_adv := wh_adverb_word_le &
  [ STEM < "how" >,
    SYNSEM.LOCAL.KEYS [ KEY _in_rel,
			ALTKEY _way_rel ] ].

:end :instance.


; <<>>

:begin :instance.

how_deg := wh_degree_spec_le &
  [ STEM < "how" >,
    SYNSEM.LOCAL.KEYS.KEY _how_deg_rel ].

:end :instance.


; <<>>

:begin :instance.

how_adj := wh_adjective_word_le &
  [ STEM < "how" > ].

:end :instance.


; <<>>
; MULTIKEY < "how" >

:begin :instance.

how_about := how_about_n_or_p_mle1 &
  [ STEM < "how", "about" >,
    SYNSEM.LOCAL.KEYS.KEY _okay_accept_rel ].

:end :instance.


; <<>>
; MULTIKEY < "how" >

:begin :instance.

how_bout := how_about_n_or_p_mle1 &
  [ STEM < "how", "'bout" >,
    SYNSEM.LOCAL.KEYS.KEY _okay_accept_rel ].

:end :instance.


; <<>>
; MULTIKEY < "how" >

:begin :instance.

how_much := pdet_ms_wh_mle1 &
  [ STEM < "how", "much" >,
    SYNSEM.LOCAL.KEYS.KEY _how_much_rel ].

:end :instance.


; <<>>
; MULTIKEY < "doing" >

:begin :instance.

how_you_doing_root := disc_adv_3mle3 &
  [ STEM < "how", "you", "doing" >,
    SYNSEM.LOCAL.KEYS.KEY greet_rel & [ EXCL 'how_you_doing ] ].

:end :instance.


; <<>>

:begin :instance.

however := vp_adv_pre_word_le &
  [ STEM < "however" >,
    SYNSEM.LOCAL.KEYS.KEY _however_rel ].

:end :instance.


; <<>>

:begin :instance.

however2 := s_adv_pre_word_le &
  [ STEM < "however" >,
    SYNSEM.LOCAL.KEYS.KEY _however_rel ].

:end :instance.


; <<>>

:begin :instance.

humor_v1 := mv_np_trans_le &
  [ STEM < "humor" >,
    SYNSEM.LOCAL.KEYS.KEY _humor_v_rel ].

:end :instance.


; <<>>

:begin :instance.

hundred := bare_specified_card_le & 
  [ STEM < "hundred" >,
    SYNSEM.LOCAL [ CAT [ HEAD intadj3 &
                              [ MOD < [ MODIFIED notmod ] > ],
                         VAL.SPR.FIRST.LOCAL.CAT.HEAD intadj1 ],
		   KEYS.KEY.CONST_VALUE "100" ] ].
:end :instance.


; <<>>

:begin :instance.

hundred_comps := complemented_specified_card_le & 
  [ STEM < "hundred" >,
    SYNSEM.LOCAL [ CAT [ HEAD intadj3 &
                              [ MOD < [ MODIFIED notmod ] > ],
                         VAL [ SPR.FIRST.LOCAL.CAT.HEAD intadj1,
                               COMPS.FIRST.LOCAL.CAT.HEAD intadj2 ] ],
		   KEYS.KEY.CONST_VALUE "100" ] ].
:end :instance.


; <<>>

:begin :instance.

hungry_a1 := intrans_adj_le &
  [ STEM < "hungry" >,
    SYNSEM.LOCAL.KEYS.KEY _hungry_rel ].

:end :instance.


; <<>>

:begin :instance.

hunt_up_v1 := mv_prep_particle_np_le &
  [ STEM < "hunt" >,
    SYNSEM.LOCAL.KEYS [ KEY _hunt_up_rel,
			--COMPKEY _up_rel ] ].

:end :instance.


; <<>>

:begin :instance.

husband_n1 := intr_noun_word_le &
  [ STEM < "husband" >,
    SYNSEM.LOCAL.KEYS.KEY _husband_rel ].

:end :instance.


; <<>>

:begin :instance.

Hutsell := proper_le &
  [ STEM < "hutsell" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'hutsell ].

:end :instance.


; <<>>

:begin :instance.

hyphen_n1 := intr_noun_word_le &
  [ STEM < "hyphen" >,
    SYNSEM.LOCAL.KEYS.KEY _hyphen_rel ].

:end :instance.


; <<>>

:begin :instance.

hyphenated_a1 := intrans_adj_le &
  [ STEM < "hyphenated" >,
    SYNSEM.LOCAL.KEYS.KEY _hyphenated_rel ].

:end :instance.


; <<>>

:begin :instance.

i := pers_pro_le &
  [ STEM < "i" >,
    SYNSEM.LOCAL [ CAT.HEAD.CASE nom,
		   KEYS.KEY.INST [ PNG png & [ PN 1sg* ],
				   PRONTYPE std_1sg ] ] ].

:end :instance.


; <<>>

:begin :instance.

Ian := proper_le &
  [ STEM < "ian" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'ian ].

:end :instance.


; <<>>

:begin :instance.

ICPHS_n1 :=  proper_le &
  [ STEM < "icphs" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'ICPHS ].

:end :instance.


; <<>>

:begin :instance.

idea_n1 := noun_ppof_word_le &
  [ STEM < "idea" >,
    SYNSEM.LOCAL.KEYS.KEY _idea_rel ].

:end :instance.


; <<>>

:begin :instance.

ideal_a1 := intrans_adj_le &
  [ STEM < "ideal" >,
    SYNSEM.LOCAL.KEYS.KEY _ideal_adj_rel ].

:end :instance.


; <<>>

:begin :instance.

ideal_n1 := intr_noun_word_le &
  [ STEM < "ideal" >,
    SYNSEM.LOCAL.KEYS.KEY _ideal_rel ].

:end :instance.


; <<>>

:begin :instance.

if := subconj_if_le &
  [ STEM < "if" >,
    SYNSEM.LOCAL.KEYS.KEY _if_then_rel ].

:end :instance.


; <<>>

:begin :instance.

if_c := whether_c_fin_le &
  [ STEM < "if" >,
    SYNSEM.LOCAL.CAT.HEAD.CASE acc ].

:end :instance.


; <<>>
; MULTIKEY < "necessary" >

:begin :instance.

if_necessary_adv1 := vp_adv_post_word_mle2 &
  [ STEM < "if", "necessary" >,
    SYNSEM.LOCAL.KEYS.KEY _if_necessary_rel ].

:end :instance.


; <<>>

:begin :instance.

ignore_v1 := mv_np_trans_le &
  [ STEM < "ignore" >,
    SYNSEM.LOCAL.KEYS.KEY _ignore_rel ].

:end :instance.


; <<>>

:begin :instance.

ill_a1 := intrans_adj_le &
  [ STEM < "ill" >,
    SYNSEM.LOCAL.KEYS.KEY _ill_rel ].

:end :instance.


; <<>>

:begin :instance.

imagine_v1 := mv_np_trans_le &
  [ STEM < "imagine" >,
    SYNSEM.LOCAL.KEYS.KEY _imagine_rel ].

:end :instance.


; <<>>

:begin :instance.

imagine_v2 := mv_cp_fin_inf_non_trans_le &
  [ STEM < "imagine" >,
    SYNSEM.LOCAL.KEYS.KEY _imagine_h_rel ].

:end :instance.


; <<>>

:begin :instance.

imagine_v3 := mv_unerg_le &
  [ STEM < "imagine" >,
    SYNSEM.LOCAL.KEYS.KEY _imagine_rel ].

:end :instance.


; <<>>

:begin :instance.

immediate_a1 := intrans_adj_le &
  [ STEM < "immediate" >,
    SYNSEM.LOCAL.KEYS.KEY _immediate_isect_rel ].

:end :instance.


; <<>>

:begin :instance.

immediately_adv1 := adv_word_le &
  [ STEM < "immediately" >,
    SYNSEM.LOCAL.KEYS.KEY _immediately_rel ].

:end :instance.


; <<>>

:begin :instance.

imminent_a1 := intrans_adj_le &
  [ STEM < "imminent" >,
    SYNSEM.LOCAL.KEYS.KEY _imminent_rel ].

:end :instance.


; <<>>

:begin :instance.

impending_a1 := intrans_adj_le &
  [ STEM < "impending" >,
    SYNSEM.LOCAL.KEYS.KEY _impending_rel ].

:end :instance.


; <<>>

:begin :instance.

important_a1 := intrans_adj_le &
  [ STEM < "important" >,
    SYNSEM.LOCAL.KEYS.KEY _important_adj_rel ].

:end :instance.


; <<>>

:begin :instance.

importantly := adv_word_le &
  [ STEM < "importantly" >,
    SYNSEM.LOCAL.KEYS.KEY _importantly_rel ].

:end :instance.


; <<>>

:begin :instance.

impossible_a1 := intrans_adj_le &
  [ STEM < "impossible" >,
    SYNSEM.LOCAL.KEYS.KEY _impossible_rel ].

:end :instance.


; <<>>

:begin :instance.

impossible_a2 := reg_adj_atrans_le &
  [ STEM < "impossible" >,
    SYNSEM.LOCAL.KEYS.KEY _impossible2_rel ].

:end :instance.


; <<>>

:begin :instance.

impossibly_adv1 := vp_adv_post_word_le &
  [ STEM < "impossibly" >,
    SYNSEM.LOCAL.KEYS.KEY _impossibly_rel ].

:end :instance.


; <<>>

:begin :instance.

impression_n1 := noun_ppof_word_le &
  [ STEM < "impression" >,
    SYNSEM.LOCAL.KEYS.KEY _impression_rel ].

:end :instance.


; <<>>

:begin :instance.

improbably_adv1 := vp_adv_post_word_le &
  [ STEM < "improbably" >,
    SYNSEM.LOCAL.KEYS.KEY _improbably_rel ].

:end :instance.


; <<>>
; MULTIKEY < "accordance" >

:begin :instance.

in_accordance_with := prep_3mle2 &
  [ STEM < "in", "accordance", "with" >,
    SYNSEM.LOCAL.KEYS.KEY _in_accordance_with_rel ].

:end :instance.


; <<>>
; MULTIKEY < "addition" >

:begin :instance.

in_addition_adv1 := vp_adv_post_word_mle2 &
  [ STEM < "in", "addition" >,
    SYNSEM.LOCAL.KEYS.KEY _in_addition_rel ].

:end :instance.


; <<>>
; MULTIKEY < "all" >

:begin :instance.

in_all_adv1 := vp_adv_post_word_mle2 &
  [ STEM < "in", "all" >,
    SYNSEM.LOCAL.KEYS.KEY _in_all_rel ].

:end :instance.


; <<>>
; MULTIKEY < "addition" >

:begin :instance.

in_addition_to := prep_3mle2 &
  [ STEM < "in", "addition", "to" >,
    SYNSEM.LOCAL.KEYS.KEY _in_addition_to_rel ].

:end :instance.


; <<>>
; MULTIKEY < "back" >

:begin :instance.

in_back_of := prep_3mle2 &
  [ STEM < "in", "back", "of" >,
    SYNSEM.LOCAL.KEYS.KEY _in_back_of_rel ].

:end :instance.


; <<>>
; MULTIKEY < "between" >

:begin :instance.

in_between := prep_mle2 &
  [ STEM < "in", "between" >,
    SYNSEM.LOCAL.KEYS.KEY _in_between_rel ].

:end :instance.


; <<>>
; MULTIKEY < "case" >

:begin :instance.

in_case := subconj_mle2 &
  [ STEM < "in", "case" >,
    SYNSEM.LOCAL.KEYS.KEY _in_case_rel ].

:end :instance.


; <<>>
; MULTIKEY < "front" >

:begin :instance.

in_front_of := prep_3mle2 &
  [ STEM < "in", "front", "of" >,
    SYNSEM.LOCAL.KEYS.KEY _in_front_of_rel ].

:end :instance.


; <<>>
; MULTIKEY < "addition" >

:begin :instance.

in_general_adv1 := vp_adv_post_word_mle2 &
  [ STEM < "in", "general" >,
    SYNSEM.LOCAL.KEYS.KEY _in_general_rel ].

:end :instance.


; <<>>
; MULTIKEY < "lieu" >

:begin :instance.

in_lieu_of := prep_3mle2 &
  [ STEM < "in", "lieu", "of" >,
    SYNSEM.LOCAL.KEYS.KEY _in_lieu_of_rel ].

:end :instance.


; <<>>
; MULTIKEY < "in" >

:begin :instance.

in_mind_a1 := irreg_pred_intrans_adj_mle1 &
  [ STEM < "in", "mind" >,
    SYNSEM.LOCAL.KEYS.KEY _in_mind_rel ].

:end :instance.


; <<>>

:begin :instance.

in := reg_prep_le &
  [ STEM < "in" >,
    SYNSEM.LOCAL.KEYS.KEY _in_rel_a ].

:end :instance.


; <<>>
; MULTIKEY < "order" >

:begin :instance.

in_order_to := subconj_inf_3mle2 &
  [ STEM < "in", "order", "to" >,
    SYNSEM.LOCAL.KEYS.KEY _in_order_to_rel ].

:end :instance.


; <<>>

:begin :instance.

in_temp := temp_prep_le &
  [ STEM < "in" >,
    SYNSEM.LOCAL.KEYS [ KEY _in_temp_rel,
			--COMPKEY non_day_rel ] ].

:end :instance.


; <<>>
; MULTIKEY < "time" >

:begin :instance.

in_time_adv1 := vp_adv_post_word_mle2 &
  [ STEM < "in", "time" >,
    SYNSEM.LOCAL.KEYS.KEY _in_time_rel ].

:end :instance.


; <<>>
; MULTIKEY < "principle" >

:begin :instance.

in_principle_adv1 := vp_adv_post_word_mle2 &
  [ STEM < "in", "principle" >,
    SYNSEM.LOCAL.KEYS.KEY _in_principle_rel ].

:end :instance.


; <<>>
; MULTIKEY < "question" >

:begin :instance.

in_question := pp_idiom_mle2 &
  [ STEM < "in", "question" >,
    SYNSEM.LOCAL.KEYS [ KEY _in_rel,
                        ALTKEY _question_topic_rel ] ].

:end :instance.


; <<>>
; MULTIKEY < "spite" >

:begin :instance.

in_spite_of := prep_3mle2 &
  [ STEM < "in", "spite", "of" >,
    SYNSEM.LOCAL.KEYS.KEY _in_spite_of_rel ].

:end :instance.


; <<>>
; MULTIKEY < "course" >

:begin :instance.

in_the_course_of := prep_4mle3 &
  [ STEM < "in", "the", "course", "of" >,
    SYNSEM.LOCAL.KEYS.KEY _in_the_course_of_rel ].

:end :instance.


; <<>>
; MULTIKEY < "long" >

:begin :instance.

in_the_long_run_adv1 := vp_adv_post_word_4mle3 &
  [ STEM < "in", "the", "long", "run" >,
    SYNSEM.LOCAL.KEYS.KEY _in_the_long_run_rel ].

:end :instance.


; <<>>
; MULTIKEY < "meantime" >

:begin :instance.

in_the_meantime_adv1 := vp_adv_post_word_3mle3 &
  [ STEM < "in", "the", "meantime" >,
    SYNSEM.LOCAL.KEYS.KEY _in_the_meantime_rel ].

:end :instance.


; <<>>
; MULTIKEY < "far" >

:begin :instance.

in_so_far_as_subord := subconj_4mle3 &
  [ STEM < "in", "so", "far", "as" >,
    SYNSEM.LOCAL.KEYS.KEY _in_so_far_as_rel ].

:end :instance.


; <<>>
; MULTIKEY < "vain" >

:begin :instance.

in_vain_adv1 := vp_adv_post_word_mle2 &
  [ STEM < "in", "vain" >,
    SYNSEM.LOCAL.KEYS.KEY _in_vain_rel ].

:end :instance.


; <<>>

:begin :instance.

include_v1 := mv_prep*_trans_le &
  [ STEM < "include" >,
    SYNSEM.LOCAL.KEYS.KEY _include_rel ].

:end :instance.


; <<>>

:begin :instance.

including_p := prep_le &
  [ STEM < "including" >,
    SYNSEM.LOCAL.KEYS.KEY _including_rel ].

:end :instance.


; <<>>

:begin :instance.

inclusive_a1 := intrans_adj_le &
  [ STEM < "inclusive" >,
    SYNSEM.LOCAL.KEYS.KEY _inclusive_adj_rel ].

:end :instance.


; <<>>

:begin :instance.

inclusively_adv1 := vp_adv_post_word_le &
  [ STEM < "inclusively" >,
    SYNSEM.LOCAL.KEYS.KEY _inclusively_rel ].

:end :instance.


; <<>>

:begin :instance.

inconvenient_a1 := intrans_adj_le &
  [ STEM < "inconvenient" >,
    SYNSEM.LOCAL.KEYS.KEY _inconvenient_rel ].

:end :instance.


; <<>>

:begin :instance.

incredible_a1 := intrans_adj_le &
  [ STEM < "incredible" >,
    SYNSEM.LOCAL.KEYS.KEY _incredible_rel ].

:end :instance.


; <<>>

:begin :instance.

incredibly := vp_adv_post_word_le &
  [ STEM < "incredibly" >,
    SYNSEM.LOCAL.KEYS.KEY _incredibly_rel ].

:end :instance.


; <<>>

:begin :instance.

indeed_root := disc_adv_le &
  [ STEM < "indeed" >,
    SYNSEM.LOCAL.KEYS.KEY excl_rel & [ EXCL 'indeed ] ].

:end :instance.


; <<>>

:begin :instance.

indefinite_a1 := intrans_adj_le &
  [ STEM < "indefinite" >,
    SYNSEM.LOCAL.KEYS.KEY _indefinite_rel ].

:end :instance.


; <<>>

:begin :instance.

independent_a1 := intrans_adj_le &
  [ STEM < "independent" >,
    SYNSEM.LOCAL.KEYS.KEY _independent_rel ].

:end :instance.


; <<>>

:begin :instance.

individual_a1 := intrans_adj_le &
  [ STEM < "individual" >,
    SYNSEM.LOCAL.KEYS.KEY _individual_adj_rel ].

:end :instance.


; <<>>

:begin :instance.

individual_n1 := noun_ppof_word_le &
  [ STEM < "individual" >,
    SYNSEM.LOCAL.KEYS.KEY _individual_rel ].

:end :instance.


; <<>>

:begin :instance.

individually := adv_word_le &
  [ STEM < "individually" >,
    SYNSEM.LOCAL.KEYS.KEY _individually_rel ].

:end :instance.


; <<>>

:begin :instance.

Indonesia_n1 := proper_le &
  [ STEM < "indonesia" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Indonesia ].

:end :instance.


; <<>>

:begin :instance.

indonesian_a1 := intrans_adj_le &
  [ STEM < "indonesian" >,
    SYNSEM.LOCAL.KEYS.KEY _indonesian_rel ].

:end :instance.


; <<>>

:begin :instance.

indoor_a1 := intrans_adj_le &
  [ STEM < "indoor" >,
    SYNSEM.LOCAL.KEYS.KEY _indoor_rel ].

:end :instance.


; <<>>

:begin :instance.

indulge_v1 := mv_np*_trans_le &
  [ STEM < "indulge" >,
    SYNSEM.LOCAL.KEYS.KEY _indulge_rel ].

:end :instance.


; <<>>

:begin :instance.

indulge_v2 := mv_empty_prep_intrans_le &
  [ STEM < "indulge" >,
    SYNSEM.LOCAL.KEYS [ KEY _indulge_in_rel,
			--COMPKEY _in_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

industrialized_a1 := intrans_adj_le &
  [ STEM < "industrialized" >,
    SYNSEM.LOCAL.KEYS.KEY _industrialized_rel ].

:end :instance.


; <<>>

:begin :instance.

inferior_a1 := intrans_adj_le &
  [ STEM < "inferior" >,
    SYNSEM.LOCAL.KEYS.KEY _inferior_rel ].

:end :instance.


; <<>>

:begin :instance.

inform_v1 := mv_np_trans_cp_prop_le &
  [ STEM < "inform" >,
    SYNSEM.LOCAL.KEYS.KEY _inform_rel ].

:end :instance.


; <<>>

:begin :instance.

informal_a1 := intrans_adj_le &
  [ STEM < "informal" >,
    SYNSEM.LOCAL.KEYS.KEY _informal_rel ].

:end :instance.


; <<>>

:begin :instance.

informally := adv_word_le &
  [ STEM < "informally" >,
    SYNSEM.LOCAL.KEYS.KEY _informally_rel ].

:end :instance.


; <<>>

:begin :instance.

information_n1 := massn_le &
  [ STEM < "information" >,
    SYNSEM.LOCAL.KEYS.KEY _information_rel ].

:end :instance.


; <<>>

:begin :instance.

inside := prep_optcomp_le &
  [ STEM < "inside" >,
    SYNSEM.LOCAL.KEYS.KEY _inside_rel ].

:end :instance.


; <<>>

:begin :instance.

inside_pp := pp_le &
  [ STEM < "inside" >,
    SYNSEM.LOCAL.KEYS.KEY _inside_rel ].

:end :instance.


; <<>>

:begin :instance.

insignificant_a1 := intrans_adj_le &
  [ STEM < "insignificant" >,
    SYNSEM.LOCAL.KEYS.KEY _insignificant_rel ].

:end :instance.


; <<>>

:begin :instance.

insist_v1 := mv_cp_prop*_non_trans_le &
  [ STEM < "insist" >,
    SYNSEM.LOCAL.KEYS.KEY _insist_rel ].

:end :instance.


; <<>>

:begin :instance.

insist_v2 := mv_empty_prep_intrans_le &
  [ STEM < "insist" >,
    SYNSEM.LOCAL.KEYS [ KEY _insist_on_rel,
			--COMPKEY _on_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

instance_n1 := intr_noun_word_le &
  [ STEM < "instance" >,
    SYNSEM.LOCAL.KEYS.KEY _instance_rel ].

:end :instance.


; <<>>

:begin :instance.

instant_a1 := intrans_adj_le &
  [ STEM < "instant" >,
    SYNSEM.LOCAL.KEYS.KEY _instant_rel ].

:end :instance.


; <<>>

:begin :instance.

instead_adv1 := vp_adv_post_word_le &
  [ STEM < "instead" >,
    SYNSEM.LOCAL.KEYS.KEY _instead_rel ].

:end :instance.


; <<>>
; MULTIKEY < "instead" >

:begin :instance.

instead_of := reg_prep_mle1 &
  [ STEM < "instead", "of" >,
    SYNSEM.LOCAL.KEYS.KEY _instead_of_rel ].

:end :instance.


; <<>>

:begin :instance.

institute_n1 := intr_noun_word_le &
  [ STEM < "institute" >,
    SYNSEM.LOCAL.KEYS.KEY _institute_rel ].

:end :instance.


; <<>>

:begin :instance.

instruct_v1 := mv_obj_equi_le &
  [ STEM < "instruct" >,
    SYNSEM.LOCAL.KEYS.KEY _instruct_rel ].

:end :instance.


; <<>>

:begin :instance.

instrument_n1 := intr_noun_word_le &
  [ STEM < "instrument" >,
    SYNSEM.LOCAL.KEYS.KEY _instrument_rel ].

:end :instance.


; <<>>

:begin :instance.

intend_v1 := mv_subj_equi_le &
  [ STEM < "intend" >,
    SYNSEM.LOCAL.KEYS.KEY _intend_rel ].

:end :instance.


; <<>>

:begin :instance.

intensive_a1 := intrans_adj_le &
  [ STEM < "intensive" >,
    SYNSEM.LOCAL.KEYS.KEY _intensive_rel ].

:end :instance.


; <<>>

:begin :instance.

intensively := adv_word_le &
  [ STEM < "intensively" >,
    SYNSEM.LOCAL.KEYS.KEY _intensively_rel ].

:end :instance.


; <<>>

:begin :instance.

Interact_n1 := proper_le &
  [ STEM < "interact" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Interact ].

:end :instance.


; <<>>

:begin :instance.

Intercity_n1 := intr_noun_word_le &
  [ STEM < "intercity" >,
    SYNSEM.LOCAL.KEYS.KEY named_rel & [ NAMED 'Intercity ] ].

:end :instance.


; <<>>

:begin :instance.

interest_in_v1 := mv_empty_prep_trans_le &
  [ STEM < "interest" >,
    SYNSEM.LOCAL.KEYS [ KEY _interest_in_rel,
			--OCOMPKEY _in_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

interest_n1 := intr_noun_word_le &
  [ STEM < "interest" >,
    SYNSEM.LOCAL.KEYS.KEY _interest_n_rel ].

:end :instance.


; <<>>

:begin :instance.

interested_a1 := trans_adj_le &
  [ STEM < "interested" >,
    SYNSEM.LOCAL.KEYS [ KEY _interested_rel,
			--COMPKEY _in_rel_s ] ].


:end :instance.


; <<>>

:begin :instance.

interfere_v1 := mv_unerg_le &
  [ STEM < "interfere" >,
    SYNSEM.LOCAL.KEYS.KEY _interfere_rel ].

:end :instance.


; <<>>

:begin :instance.

interfere_with_v1 := mv_empty_prep_intrans_le &
  [ STEM < "interfere" >,
    SYNSEM.LOCAL.KEYS [ KEY _interfere_rel,
			--COMPKEY _with_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

interfere_in_v1 := mv_empty_prep_intrans_le &
  [ STEM < "interfere" >,
    SYNSEM.LOCAL.KEYS [ KEY _interfere_in_rel,
			--COMPKEY _in_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

international_a1 := intrans_adj_le &
  [ STEM < "international" >,
    SYNSEM.LOCAL.KEYS.KEY _international_rel ].

:end :instance.


; <<>>

:begin :instance.

internationally := vp_adv_post_word_le &
  [ STEM < "internationally" >,
    SYNSEM.LOCAL.KEYS.KEY _internationally_rel ].

:end :instance.


; <<>>

:begin :instance.

interrogate_v1 := mv_np_trans_le &
  [ STEM < "interrogate" >,
    SYNSEM.LOCAL.KEYS.KEY _interrogate_rel ].

:end :instance.


; <<>>

:begin :instance.

interrupt_v1 := mv_np*_trans_le &
  [ STEM < "interrupt" >,
    SYNSEM.LOCAL.KEYS.KEY _interrupt_rel ].

:end :instance.


; <<>>

:begin :instance.

interval_n1 := intr_noun_word_le &
  [ STEM < "interval" >,
    SYNSEM.LOCAL.KEYS.KEY _interval_rel ].

:end :instance.


; <<>>

:begin :instance.

intervention_n1 := massn_le &
  [ STEM < "intervention" >,
    SYNSEM.LOCAL.KEYS.KEY _intervention_rel ].

:end :instance.


; <<>>

:begin :instance.

interview_v1 := mv_np*_trans_le &
  [ STEM < "interview" >,
    SYNSEM.LOCAL.KEYS.KEY _interview_v_rel ].

:end :instance.


; <<>>

:begin :instance.

interview_n1 := intr_noun_word_le &
  [ STEM < "interview" >,
    SYNSEM.LOCAL.KEYS.KEY _interview_rel ].

:end :instance.


; <<>>

:begin :instance.

into := reg_prep_le &
  [ STEM < "into" >,
    SYNSEM.LOCAL.KEYS.KEY _into_rel_a ].

:end :instance.


; <<>>

:begin :instance.

introduce_v1 := mv_empty_prep*_trans_le &
  [ STEM < "introduce" >,
    SYNSEM.LOCAL.KEYS [ KEY _introduce_to_rel,
			--OCOMPKEY _to_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

introduction_n1 := intr_noun_word_le &
  [ STEM < "introduction" >,
    SYNSEM.LOCAL.KEYS.KEY _introduction_rel ].

:end :instance.


; <<>>

:begin :instance.

invest_v1 := mv_prep*_trans_le &
  [ STEM < "invest" >,
    SYNSEM.LOCAL.KEYS [ KEY _invest_rel,
			--OCOMPKEY _in_rel ] ].

:end :instance.


; <<>>

:begin :instance.

invite_v1 := mv_empty_prep*_trans_le &
  [ STEM < "invite" >,
    SYNSEM.LOCAL.KEYS [ KEY _invite_rel,
			--OCOMPKEY _to_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

invite_v2 := mv_obj_equi_le &
  [ STEM < "invite" >,
    SYNSEM.LOCAL.KEYS.KEY _invite_to_rel ].

:end :instance.


; <<>>

:begin :instance.

involve_v1 := mv_np_trans_le &
  [ STEM < "involve" >,
    SYNSEM.LOCAL.KEYS.KEY _involve_rel ].

:end :instance.


; <<>>

:begin :instance.

be_c_is := be_c_is_le &
  [ STEM < "is" > ].

:end :instance.


; <<>>

:begin :instance.

be_c_is_cx := be_c_is_cx_le &
  [ STEM < "s" > ].

:end :instance.


; <<>>

:begin :instance.

be_c_is_cx_2 := be_c_is_cx_le &
  [ STEM < "'s" > ].

:end :instance.


; <<>>

:begin :instance.

be_id_is := be_id_is_le &
  [ STEM < "is" > ].

:end :instance.


; <<>>

:begin :instance.

be_id_is_cx := be_id_is_cx_le &
  [ STEM < "s" > ].

:end :instance.


; <<>>

:begin :instance.

be_id_is_cx_2 := be_id_is_cx_le &
  [ STEM < "'s" > ].

:end :instance.


; <<>>

:begin :instance.

be_th_cop_is := be_th_cop_is_le &
  [ STEM < "is" > ].

:end :instance.


; <<>>

:begin :instance.

be_th_cop_is_cx := be_th_cop_s_cx_le &
  [ STEM < "s" > ].

:end :instance.


; <<>>

:begin :instance.

be_th_cop_is_cx_2 := be_th_cop_s_cx_le &
  [ STEM < "'s" > ].

:end :instance.


; <<>>

:begin :instance.

island_n1 := intr_noun_word_le &
  [ STEM < "island" >,
    SYNSEM.LOCAL.KEYS.KEY _island_rel ].

:end :instance.


; <<>>

:begin :instance.

be_c_is_neg_1 := be_c_is_neg_le &
  [ STEM < "isn't" > ].

:end :instance.


; <<>>
; MULTIKEY < "isn" >

:begin :instance.

be_c_is_neg_2 := be_c_is_neg_mle &
  [ STEM < "isn", "t" > ].

:end :instance.


; <<>>

:begin :instance.

be_id_is_neg_1 := be_id_is_neg_le &
  [ STEM < "isn't" > ].

:end :instance.


; <<>>
; MULTIKEY < "isn" >

:begin :instance.

be_id_is_neg_2 := be_id_is_neg_mle &
  [ STEM < "isn", "t" > ].

:end :instance.


; <<>>

:begin :instance.

be_th_cop_is_neg_1 := be_th_cop_is_neg_le &
  [ STEM < "isn't" > ].

:end :instance.


; <<>>
; MULTIKEY < "isn" >

:begin :instance.

be_th_cop_is_neg_2 := be_th_cop_is_neg_mle &
  [ STEM < "isn", "t" > ].

:end :instance.


; <<>>

:begin :instance.

isolated_a1 := intrans_adj_le &
  [ STEM < "isolated" >,
    SYNSEM.LOCAL.KEYS.KEY _isolated_rel ].

:end :instance.


; <<>>

:begin :instance.

issue_n1 := intr_noun_word_le &
  [ STEM < "issue" >,
    SYNSEM.LOCAL.KEYS.KEY _issue_n_rel ].

:end :instance.


; <<>>

:begin :instance.

it := expl_it_le &
  [ STEM < "it" > ].

:end :instance.


; <<>>

:begin :instance.

it2 := pers_pro_le &
  [ STEM < "it" >,
    SYNSEM.LOCAL [ KEYS.KEY.INST [ PNG png & [ PN 3sg*,
					       GEN neut* ],
				       PRONTYPE std_3 ],
		   CTXT.ACTIVATED - ] ].

:end :instance.


; <<>>

:begin :instance.

italian_a1 := intrans_adj_le &
  [ STEM < "italian" >,
    SYNSEM.LOCAL.KEYS.KEY _italian_rel ].

:end :instance.


; <<>>

:begin :instance.

Italian_n1 := proper_le &
  [ STEM < "italian" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Italian ].

:end :instance.


; <<>>

:begin :instance.

Italy_n1 := proper_le &
  [ STEM < "italy" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Italy ].

:end :instance.


; <<>>

:begin :instance.

its_poss := poss_le &
  [ STEM < "its" >,
    SYNSEM.LOCAL.CONT.LISZT <! relation, relation,
			       [ INST [ PNG png & [ PN 3sg*,
						    GEN neut* ],
					PRONTYPE std_3 ] ] !> ].
:end :instance.


; <<>>

:begin :instance.

its := poss_pro_le &
  [ STEM < "its" >,
    SYNSEM.LOCAL.CONT.LISZT.LIST.FIRST.INST.PNG png & [ PN 3sg*,
							GEN neut* ] ].

:end :instance.


; <<>>

:begin :instance.

itself := refl_pro_le &
  [ STEM < "itself" >,
    SYNSEM.LOCAL.KEYS.KEY.INST.PNG png & [ PN 3sg*,
					   GEN neut* ] ].

:end :instance.


; <<>>

:begin :instance.

Jaguar_n1 := intr_noun_word_le &
  [ STEM < "jaguar" >,
    SYNSEM.LOCAL.KEYS.KEY named_rel & [ NAMED 'Jaguar ] ].

:end :instance.


; <<>>

:begin :instance.

jam_n1 := massn_le &
  [ STEM < "jam" >,
    SYNSEM.LOCAL.KEYS.KEY _jam_n_rel ].

:end :instance.


; <<>>

:begin :instance.

jam_v1 := mv_prep_trans_le &
  [ STEM < "jam" >,
    SYNSEM.LOCAL.KEYS [ KEY _jam_v_rel,
			--OCOMPKEY dir_rel ] ].

:end :instance.


; <<>>

:begin :instance.

jam_up_v1 := mv_prep_particle_np_le &
  [ STEM < "jam" >,
    SYNSEM.LOCAL.KEYS [ KEY _jam_up_rel,
			--COMPKEY _up_rel ] ].

:end :instance.


; <<>>

:begin :instance.

janitor_n1 := intr_noun_word_le &
  [ STEM < "janitor" >,
    SYNSEM.LOCAL.KEYS.KEY _janitor_rel ].

:end :instance.


; <<>>

:begin :instance.

january := month_word_le &
  [ STEM < "january" >,
    SYNSEM.LOCAL.KEYS.KEY.MONTH 'jan ].

:end :instance.


; <<>>

:begin :instance.

january_2 := month_year_word_le &
  [ STEM < "january" >,
    SYNSEM.LOCAL.KEYS.KEY.MONTH 'jan ].

:end :instance.


; <<>>

:begin :instance.

japanese_a1 := intrans_adj_le &
  [ STEM < "japanese" >,
    SYNSEM.LOCAL.KEYS.KEY _japanese_adv_rel ].

:end :instance.


; <<>>

:begin :instance.

job_n1 := intr_noun_word_le &
  [ STEM < "job" >,
    SYNSEM.LOCAL.KEYS.KEY _job_rel ].

:end :instance.


; <<>>

:begin :instance.

Jochen_n1 := proper_le &
  [ STEM < "jochen" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Jochen ].

:end :instance.


; <<>>

:begin :instance.

John := proper_le &
  [ STEM < "john" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'john ].

:end :instance.


; <<>>

:begin :instance.

join_v1 := mv_np*_trans_le &
  [ STEM < "join" >,
    SYNSEM.LOCAL.KEYS.KEY _join_rel ].

:end :instance.


; <<>>

:begin :instance.

joint_a1 := intrans_adj_le &
  [ STEM < "joint" >,
    SYNSEM.LOCAL.KEYS.KEY _joint_rel ].

:end :instance.


; <<>>

:begin :instance.

jointly_adv1 := vp_adv_word_le &
  [ STEM < "jointly" >,
    SYNSEM.LOCAL.KEYS.KEY _jointly_rel ].

:end :instance.


; <<>>

:begin :instance.

journey_n1 := noun_ppcomp_word_le &
  [ STEM < "journey" >,
    SYNSEM.LOCAL.KEYS.KEY _journey_rel ].

:end :instance.


; <<>>

:begin :instance.

juggle_v1 := mv_np*_trans_le &
  [ STEM < "juggle" >,
    SYNSEM.LOCAL.KEYS.KEY _juggle_rel ].

:end :instance.


; <<>>

:begin :instance.

july := month_word_le &
  [ STEM < "july" >,
    SYNSEM.LOCAL.KEYS.KEY.MONTH 'jul ].

:end :instance.


; <<>>

:begin :instance.

july_2 := month_year_word_le &
  [ STEM < "july" >,
    SYNSEM.LOCAL.KEYS.KEY.MONTH 'jul ].

:end :instance.


; <<>>

:begin :instance.

june := month_word_le &
  [ STEM < "june" >,
    SYNSEM.LOCAL.KEYS.KEY.MONTH 'jun ].

:end :instance.


; <<>>

:begin :instance.

june_2 := month_year_word_le &
  [ STEM < "june" >,
    SYNSEM.LOCAL.KEYS.KEY.MONTH 'jun ].

:end :instance.


; <<>>

:begin :instance.

Juneau_n1 := proper_le &
  [ STEM < "juneau" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Juneau ].

:end :instance.


; <<>>

:begin :instance.

just_adv1 := vp_adv_pre_word_le &
  [ STEM < "just" >,
    SYNSEM.LOCAL.KEYS.KEY _just_scop_rel ].

:end :instance.


; <<>>

:begin :instance.

just_deg := degree_spec_le &
  [ STEM < "just" >,
    SYNSEM.LOCAL.KEYS.KEY _just_deg_rel ].

:end :instance.


; <<>>
; MULTIKEY < "like" >

:begin :instance.

just_like := prep_mle2 &
  [ STEM < "just", "like" >,
    SYNSEM.LOCAL.KEYS.KEY _just_like_rel ].

:end :instance.


; <<>>
; MULTIKEY < "kaefer" >

:begin :instance.

Kaefer-Plex_n1 := proper_mle1 &
  [ STEM < "kaefer", "plex" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Kaefer-Plex ].

:end :instance.


; <<>>

:begin :instance.

Karlsruhe_n1 := proper_le &
  [ STEM < "karlsruhe" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Karlsruhe ].

:end :instance.


; <<>>

:begin :instance.

Kassel_n1 := proper_le &
  [ STEM < "kassel" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Kassel ].

:end :instance.


; <<>>

:begin :instance.

keen_a1 := intrans_adj_le &
  [ STEM < "keen" >,
    SYNSEM.LOCAL.KEYS.KEY _keen_rel ].

:end :instance.


; <<>>

:begin :instance.

keep_to_v1 := mv_empty_prep_intrans_le &
  [ STEM < "keep" >,
    SYNSEM.LOCAL.KEYS [ KEY _keep_to_rel,
			--COMPKEY _to_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

keep-prd := mv_subj_equi_prd_le &
  [ STEM < "keep" >,
    SYNSEM.LOCAL.KEYS.KEY _keep_prd_rel ].

:end :instance.


; <<>>

:begin :instance.

keep-prd_v2 := mv_obj_equi_prd_le &
  [ STEM < "keep" >,
    SYNSEM.LOCAL.KEYS.KEY _keep_prd2_rel ].

:end :instance.


; <<>>

:begin :instance.

keep_v1 := mv_np_trans_le &
  [ STEM < "keep" >,
    SYNSEM.LOCAL.KEYS.KEY _keep_unspec_rel ].

:end :instance.


; <<>>

:begin :instance.

Kennywood_n1 := proper_le &
  [ STEM < "kennywood" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Kennywood ].

:end :instance.


; <<>>

:begin :instance.

Kenya_n1 := proper_le &
  [ STEM < "kenya" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Kenya ].

:end :instance.


; <<>>

:begin :instance.

key_n1 := intr_noun_word_le &
  [ STEM < "key" >,
    SYNSEM.LOCAL.KEYS.KEY _key_rel ].

:end :instance.


; <<>>

:begin :instance.

kid_n1 := intr_noun_word_le &
  [ STEM < "kid" >,
    SYNSEM.LOCAL.KEYS.KEY _kid_n_rel ].

:end :instance.


; <<>>

:begin :instance.

kid_v1 := mv_unerg_le &
  [ STEM < "kid" >,
    SYNSEM.LOCAL.KEYS.KEY _kid_v_rel ].

:end :instance.


; <<>>

:begin :instance.

Kiel_n1 := proper_le &
  [ STEM < "kiel" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Kiel ].

:end :instance.


; <<>>

:begin :instance.

Kim := proper_le &
  [ STEM < "kim" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'kim ].

:end :instance.


; <<>>

:begin :instance.

kind_a1 := intrans_adj_le &
  [ STEM < "kind" >,
    SYNSEM.LOCAL.KEYS.KEY _kind_adj_rel ].

:end :instance.


; <<>>

:begin :instance.

Klein_n1 := proper_le &
  [ STEM < "klein" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Klein ].

:end :instance.


; <<>>

:begin :instance.

knotty_a1 := intrans_adj_le &
  [ STEM < "knotty" >,
    SYNSEM.LOCAL.KEYS.KEY _knotty_rel ].

:end :instance.


; <<>>

:begin :instance.

know_v1 := mv_np*_trans_le &
  [ STEM < "know" >,
    SYNSEM.LOCAL.KEYS.KEY _know_rel ].

:end :instance.


; <<>>

:begin :instance.

know_v2 := mv_cp_fin_inf_non_trans_le &
  [ STEM < "know" >,
    SYNSEM.LOCAL.KEYS.KEY _know2_rel ].

:end :instance.


; <<>>

:begin :instance.

know_v3 := mv_subj_equi_le &
  [ STEM < "know" >,
    SYNSEM.LOCAL.KEYS.KEY _know2_rel ].

:end :instance.


; <<>>

:begin :instance.

know_v4 := mv_sor_le &
  [ STEM < "know" >,
    SYNSEM.LOCAL.KEYS.KEY _know2_rel ].

:end :instance.


; <<>>

:begin :instance.

Koepp_n1 := proper_le &
  [ STEM < "koepp" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Koepp ].

:end :instance.


; <<>>

:begin :instance.

Korn_n1 := proper_le &
  [ STEM < "korn" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Korn ].

:end :instance.


; <<>>

:begin :instance.

Kroepke := proper_le &
  [ STEM < "kroepke" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'kroepke ].

:end :instance.


; <<>>

:begin :instance.

lab_n1 := intr_noun_word_le &
  [ STEM < "lab" >,
    SYNSEM.LOCAL.KEYS.KEY _lab_rel ].

:end :instance.


; <<>>

:begin :instance.

laboratory_n1 := intr_noun_word_le &
  [ STEM < "laboratory" >,
    SYNSEM.LOCAL.KEYS.KEY _laboratory_rel ].

:end :instance.


; <<>>

:begin :instance.

lack_v1 := mv_np_trans_le &
  [ STEM < "lack" >,
    SYNSEM.LOCAL.KEYS.KEY _lack_rel ].

:end :instance.


; <<>>

:begin :instance.

lad_n1 := intr_noun_word_le &
  [ STEM < "lad" >,
    SYNSEM.LOCAL.KEYS.KEY _lad_rel ].

:end :instance.


; <<>>

:begin :instance.

Lagemann_n1 := proper_le &
  [ STEM < "lagemann" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Lagemann ].

:end :instance.


; <<>>

:begin :instance.

lake_n1 := intr_noun_word_le &
  [ STEM < "lake" >,
    SYNSEM.LOCAL.KEYS.KEY _lake_rel ].

:end :instance.


; <<>>

:begin :instance.

Landesbank_n1 := proper_le &
  [ STEM < "landesbank" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Landesbank ].

:end :instance.


; <<>>

:begin :instance.

Lange_n1 := proper_le &
  [ STEM < "lange" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Lange ].

:end :instance.


; <<>>

:begin :instance.

language_n1 := intr_noun_word_le &
  [ STEM < "language" >,
    SYNSEM.LOCAL.KEYS.KEY _language_rel ].

:end :instance.


; <<>>

:begin :instance.

large_a1 := intrans_adj_le &
  [ STEM < "large" >,
    SYNSEM.LOCAL.KEYS.KEY _large_rel ].

:end :instance.


; <<>>

:begin :instance.

largely := adv_word_le &
  [ STEM < "largely" >,
    SYNSEM.LOCAL.KEYS.KEY _largely_rel ].

:end :instance.


; <<>>

:begin :instance.

larger_a1 := comp_adj_le &
  [ STEM < "larger" >,
    SYNSEM.LOCAL.KEYS.KEY _large_rel ].

:end :instance.


; <<>>

:begin :instance.

largest_a1 := superl_adj_le &
  [ STEM < "largest" >,
    SYNSEM.LOCAL.KEYS.KEY _large_rel ].

:end :instance.


; <<>>

:begin :instance.

last_adv1 := int_vp_adv_post_word_le &
  [ STEM < "last" >,
    SYNSEM.LOCAL.KEYS.KEY _last_adv_rel ].

:end :instance.


; <<>>

:begin :instance.

last_v1 := mv_unacc_le &
  [ STEM < "last" >,
    SYNSEM.LOCAL.KEYS.KEY _last_v_rel ].

:end :instance.


; <<>>

:begin :instance.

last_a1 := intrans_adj_le &
  [ STEM < "last" >,
    SYNSEM.LOCAL.KEYS.KEY _last_adj_rel ].

:end :instance.


; <<>>

:begin :instance.

last_det := next_last_det_le &
  [ STEM < "last" >,
    SYNSEM.LOCAL.KEYS.ALTKEY _last_adj_rel ].

:end :instance.


; <<>>

:begin :instance.

lasting_a1 := intrans_adj_le &
  [ STEM < "lasting" >,
    SYNSEM.LOCAL.KEYS.KEY _lasting_rel ].

:end :instance.


; <<>>

:begin :instance.

late_a1 := intrans_adj_le &
  [ STEM < "late" >,
    SYNSEM.LOCAL.KEYS.KEY _late_rel ].

:end :instance.


; <<>>

:begin :instance.

late := int_vp_adv_post_word_le &
  [ STEM < "late" >,
    SYNSEM.LOCAL.KEYS.KEY _late_adv_rel ].

:end :instance.


; <<>>

:begin :instance.

later_adv1 := comp_vp_adv_word_le &
  [ STEM < "later" >,
    SYNSEM.LOCAL.KEYS.KEY _late_adv_rel ].

:end :instance.


; <<>>

:begin :instance.

later_a1 := comp_adj_le &
  [ STEM < "later" >,
    SYNSEM.LOCAL.KEYS.KEY _late_rel ].

:end :instance.


; <<>>

:begin :instance.

latest_a1 := superl_adj_le &
  [ STEM < "latest" >,
    SYNSEM.LOCAL.KEYS.KEY _late_rel ].

:end :instance.


; <<>>

:begin :instance.

laugh_n1 := intr_noun_word_le &
  [ STEM < "laugh" >,
    SYNSEM.LOCAL.KEYS.KEY _laugh_n_rel ].

:end :instance.


; <<>>

:begin :instance.

laugh_v1 := mv_unerg_le &
  [ STEM < "laugh" >,
    SYNSEM.LOCAL.KEYS.KEY _laugh_v_rel ].

:end :instance.


; <<>>

:begin :instance.

laundry_n1 := massn_le &
  [ STEM < "laundry" >,
    SYNSEM.LOCAL.KEYS.KEY _laundry_rel ].

:end :instance.


; <<>>

:begin :instance.

Lavergne_n1 := proper_le &
  [ STEM < "lavergne" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Lavergne ].

:end :instance.


; <<>>

:begin :instance.

lay_v1 := mv_prep_trans_le &
  [ STEM < "lay" >,
    SYNSEM.LOCAL.KEYS [ KEY _lay_rel,
			--OCOMPKEY dir_rel ] ].

:end :instance.


; <<>>

:begin :instance.

lay_down_v1 := mv_particle_le &
  [ STEM < "lay" >,
    SYNSEM.LOCAL.KEYS [ KEY _lay_down_rel,
			--COMPKEY _down_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

lay_off_v1 := mv_prep_particle_np_le &
  [ STEM < "lay" >,
    SYNSEM.LOCAL.KEYS [ KEY _lay_off_rel,
			--COMPKEY _off_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

lead_v1 := mv_np_trans_le &
  [ STEM < "lead" >,
    SYNSEM.LOCAL.KEYS.KEY _lead_v_rel ].

:end :instance.


; <<>>

:begin :instance.

leadership_n1 := massn_le &
  [ STEM < "leadership" >,
    SYNSEM.LOCAL.KEYS.KEY _leadership_rel ].

:end :instance.


; <<>>

:begin :instance.

learn_v1 := mv_np_trans_le &
  [ STEM < "learn" >,
    SYNSEM.LOCAL.KEYS.KEY _learn_rel ].

:end :instance.


; <<>>

:begin :instance.

learn_v2 := mv_cp_fin_inf_non_trans_le &
  [ STEM < "learn" >,
    SYNSEM.LOCAL.KEYS.KEY _learn2_rel ].

:end :instance.


; <<>>

:begin :instance.

learn_v3 := mv_unerg_le &
  [ STEM < "learn" >,
    SYNSEM.LOCAL.KEYS.KEY _learn_rel ].

:end :instance.


; <<>>

:begin :instance.

learn_v4 := mv_subj_equi_le &
  [ STEM < "learn" >,
    SYNSEM.LOCAL.KEYS.KEY _learn2_rel ].

:end :instance.


; <<>>

:begin :instance.

least_s1 := comparison_spec_le &
  [ STEM < "least" >,
    SYNSEM.LOCAL.KEYS.KEY comp_least_rel ].

:end :instance.


; <<>>

:begin :instance.

leave_behind_v1 := mv_prep_particle_np_le &
  [ STEM < "leave" >,
    SYNSEM.LOCAL.KEYS [ KEY _leave_behind_rel,
			--COMPKEY _behind_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

leave_out_v1 := mv_prep_particle_np_le &
  [ STEM < "leave" >,
    SYNSEM.LOCAL.KEYS [ KEY _leave_out_rel,
			--COMPKEY _out_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

leave_to_v1 := mv_expl_pp_inf_oeq_le &
  [ STEM < "leave" >,
    SYNSEM.LOCAL.KEYS [ KEY _leave_to_rel,
			--OCOMPKEY _to_rel ] ].

:end :instance.


; <<>>

:begin :instance.

leave_v1 := mv_np*_non_trans_le &
  [ STEM < "leave" >,
    SYNSEM.LOCAL.KEYS.KEY _leave_rel ].


:end :instance.


; <<>>

:begin :instance.

leave_v2 := mv_prep_trans_le &
  [ STEM < "leave" >,
    SYNSEM.LOCAL.KEYS [ KEY _leave_rel,
			--OCOMPKEY dir_rel ] ].

:end :instance.


; <<>>

:begin :instance.

leave_v3 := mv_ditrans_le &
  [ STEM < "leave" >,
    SYNSEM.LOCAL.KEYS.KEY _leave3_rel ].

:end :instance.


; <<>>

:begin :instance.

lecture_n1 := intr_noun_word_le &
  [ STEM < "lecture" >,
    SYNSEM.LOCAL.KEYS.KEY _lecture_rel ].

:end :instance.


; <<>>

:begin :instance.

Lee := proper_le &
  [ STEM < "lee" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'lee ].

:end :instance.


; <<>>

:begin :instance.

leeway_n1 := massn_le &
  [ STEM < "leeway" >,
    SYNSEM.LOCAL.KEYS.KEY _leeway_rel ].

:end :instance.


; <<>>

:begin :instance.

left_a1 := irreg_pred_intrans_adj_le &
  [ STEM < "left" >,
    SYNSEM.LOCAL.KEYS.KEY _left_adj_rel ].

:end :instance.


; <<>>
; MULTIKEY < "left" >

:begin :instance.

left_over_a1 := irreg_attr_adj_mle1 &
  [ STEM < "left", "over" >,
    SYNSEM.LOCAL.KEYS.KEY _left_over_rel ].

:end :instance.


; <<>>
; MULTIKEY < "left" >

:begin :instance.

left_over_a2 := irreg_pred_intrans_adj_mle1 &
  [ STEM < "left", "over" >,
    SYNSEM.LOCAL.KEYS.KEY _left_over_rel ].

:end :instance.


; <<>>

:begin :instance.

legitimate_a1 := intrans_adj_le &
  [ STEM < "legitimate" >,
    SYNSEM.LOCAL.KEYS.KEY _legitimate_rel ].

:end :instance.


; <<>>

:begin :instance.

Leipzig_n1 := proper_le &
  [ STEM < "leipzig" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Leipzig ].

:end :instance.


; <<>>

:begin :instance.

leisure_n1 := massn_le &
  [ STEM < "leisure" >,
    SYNSEM.LOCAL.KEYS.KEY _leisure_rel ].

:end :instance.


; <<>>

:begin :instance.

length1 := intr_noun_word_le &
  [ STEM < "length" >,
    SYNSEM.LOCAL.KEYS.KEY _length_rel ].

:end :instance.


; <<>>

:begin :instance.

lent := season_word_le &
  [ STEM < "lent" >,
    SYNSEM.LOCAL.KEYS.KEY.SEASON 'lent ].

:end :instance.


; <<>>

:begin :instance.

less_a1 := comparison_spec_le &
  [ STEM < "less" >,
    SYNSEM.LOCAL.KEYS.KEY comp_less_rel ].

:end :instance.


; <<>>
; MULTIKEY < "less" >

:begin :instance.

less_than_deg := degree_spec_mle1 &
  [ STEM < "less", "than" >,
    SYNSEM.LOCAL.KEYS.KEY _less_than_rel ].

:end :instance.


; <<>>

:begin :instance.

less_q := pdet_ms_le &
  [ STEM < "less" >,
    SYNSEM.LOCAL.KEYS.KEY _less_rel ].

:end :instance.


; <<>>
; MULTIKEY < "let" >

:begin :instance.

let_us := lets_imp_mle1 &
  [ STEM < "let", "us" > ].

:end :instance.


; <<>>

:begin :instance.

let_v1 := mv_sorb_le &
  [ STEM < "let" >,
    SYNSEM.LOCAL.KEYS.KEY _let_rel ].

:end :instance.


; <<>>

:begin :instance.

lets_1 := lets_imp_le &
  [ STEM < "let's" > ].

:end :instance.


; <<>>
; MULTIKEY < "let" >

:begin :instance.

lets_2 := lets_imp_mle1 &
  [ STEM < "let", "s" > ].

:end :instance.


; <<>>

:begin :instance.

letter_n1 := intr_noun_word_le &
  [ STEM < "letter" >,
    SYNSEM.LOCAL.KEYS.KEY _letter_rel ].

:end :instance.


; <<>>

:begin :instance.

level_a1 := intrans_adj_le &
  [ STEM < "level" >,
    SYNSEM.LOCAL.KEYS.KEY _level_rel ].

:end :instance.


; <<>>

:begin :instance.

library_n1 := intr_noun_word_le &
  [ STEM < "library" >,
    SYNSEM.LOCAL.KEYS.KEY _library_rel ].

:end :instance.


; <<>>

:begin :instance.

lie_v1 := mv_unerg_le &
  [ STEM < "lie" >,
    SYNSEM.LOCAL.KEYS.KEY _lie_rel ].

:end :instance.


; <<>>

:begin :instance.

life_n1 := massn_le &
  [ STEM < "life" >,
    SYNSEM.LOCAL.KEYS.KEY _life_rel ].

:end :instance.


; <<>>

:begin :instance.

lift_v1 := mv_np_trans_le &
  [ STEM < "lift" >,
    SYNSEM.LOCAL.KEYS.KEY _lift_rel ].

:end :instance.


; <<>>

:begin :instance.

lift_away_v1 := mv_particle_np_le &
  [ STEM < "lift" >,
    SYNSEM.LOCAL.KEYS [ KEY _lift_away_rel,
			--COMPKEY _away_adv_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

lifting_n1 := intr_noun_word_le &
  [ STEM < "lifting" >,
    SYNSEM.LOCAL.KEYS.KEY _lifting_rel ].

:end :instance.


; <<>>

:begin :instance.

light_a1 := intrans_adj_le &
  [ STEM < "light" >,
    SYNSEM.LOCAL.KEYS.KEY _light_adj_rel ].

:end :instance.


; <<>>

:begin :instance.

lightly := adv_word_le &
  [ STEM < "lightly" >,
    SYNSEM.LOCAL.KEYS.KEY _lightly_rel ].

:end :instance.


; <<>>

:begin :instance.

like_p := prep_le &
  [ STEM < "like" >,
    SYNSEM.LOCAL.KEYS.KEY _like_prepx_rel_a ].

:end :instance.


; <<>>

:begin :instance.

like_p_2 := prep_cp_le &
  [ STEM < "like" >,
    SYNSEM.LOCAL.KEYS.KEY _like_prepx_rel ].

:end :instance.


; <<>>

:begin :instance.

like_v1 := mv_np_trans_le &
  [ STEM < "like" >,
    SYNSEM.LOCAL.KEYS.KEY _like_rel ].

:end :instance.


; <<>>

:begin :instance.

like_v2 := mv_subj_equi_le &
  [ STEM < "like" >,
    SYNSEM.LOCAL.KEYS.KEY _like_eq_rel ].

:end :instance.


; <<>>

:begin :instance.

like_v3 := mv_subj_equi_prp_le &
  [ STEM < "like" >,
    SYNSEM.LOCAL.KEYS.KEY _like_eq_rel ].

:end :instance.


; <<>>

:begin :instance.

like_c := like_c_le &
  [ STEM < "like" > ].

:end :instance.


; <<>>

:begin :instance.

likely_a1 := intrans_adj_le &
  [ STEM < "likely" >,
    SYNSEM.LOCAL.KEYS.KEY _likely_rel ].

:end :instance.


; <<>>

:begin :instance.

likewise_adv1 := vp_adv_post_word_le &
  [ STEM < "likewise" >,
    SYNSEM.LOCAL.KEYS.KEY _likewise_a_rel ].

:end :instance.


; <<>>

:begin :instance.

limit_n1 := intr_noun_word_le &
  [ STEM < "limit" >,
    SYNSEM.LOCAL.KEYS.KEY _limit_n_rel ].

:end :instance.


; <<>>

:begin :instance.

limit_v1 := mv_np_trans_le &
  [ STEM < "limit" >,
    SYNSEM.LOCAL.KEYS.KEY _limit_v_rel ].

:end :instance.


; <<>>

:begin :instance.

limit_v2 := mv_empty_prep_trans_le &
  [ STEM < "limit" >,
    SYNSEM.LOCAL.KEYS.KEY _limit_v_rel ].

:end :instance.


; <<>>

:begin :instance.

limited_a1 := intrans_adj_le &
  [ STEM < "limited" >,
    SYNSEM.LOCAL.KEYS.KEY _limited_rel ].

:end :instance.


; <<>>

:begin :instance.

Linda_n1 := proper_le &
  [ STEM < "linda" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Linda ].

:end :instance.


; <<>>

:begin :instance.

Lindau_n1 := proper_le &
  [ STEM < "lindau" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Lindau ].

:end :instance.


; <<>>

:begin :instance.

line1 := intr_noun_word_le &
  [ STEM < "line" >,
    SYNSEM.LOCAL.KEYS.KEY _line_rel ].

:end :instance.


; <<>>

:begin :instance.

linguistics_n1 := massn_le &
  [ STEM < "linguistics" >,
    SYNSEM.LOCAL.KEYS.KEY _linguistics_rel ].

:end :instance.


; <<>>

:begin :instance.

Lisa_n1 := proper_le &
  [ STEM < "lisa" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Lisa ].

:end :instance.


; <<>>

:begin :instance.

list_n2 := noun_ppof_word_le &
  [ STEM < "list" >,
    SYNSEM.LOCAL.KEYS.KEY _list_n_rel ].

:end :instance.


; <<>>

:begin :instance.

list_v1 := mv_np_trans_le &
  [ STEM < "list" >,
    SYNSEM.LOCAL.KEYS.KEY _list_v_rel ].

:end :instance.


; <<>>

:begin :instance.

listen_to := mv_empty_prep_intrans_le &
  [ STEM < "listen" >,
    SYNSEM.LOCAL.KEYS [ KEY _listen_to_rel,
			--COMPKEY _to_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

little_a1 := intrans_adj_le &
  [ STEM < "little" >,
    SYNSEM.LOCAL.KEYS.KEY _little_rel ].

:end :instance.


; <<>>

:begin :instance.

little_det := pdet_ms_le &
  [ STEM < "little" >,
    SYNSEM.LOCAL.KEYS.KEY _little_q_rel ].

:end :instance.


; <<>>

:begin :instance.

live_v1 := mv_unerg_le &
  [ STEM < "live" >,
    SYNSEM.LOCAL.KEYS.KEY _live_rel ].

:end :instance.


; <<>>

:begin :instance.

load_v1 := mv_np_trans_le &
  [ STEM < "load" >,
    SYNSEM.LOCAL.KEYS.KEY _load_v_rel ].

:end :instance.


; <<>>

:begin :instance.

loathe_v1 := mv_np_trans_le &
  [ STEM < "loathe" >,
    SYNSEM.LOCAL.KEYS.KEY _loathe_rel ].

:end :instance.


; <<>>

:begin :instance.

lobby_n1 := intr_noun_word_le &
  [ STEM < "lobby" >,
    SYNSEM.LOCAL.KEYS.KEY _lobby_rel ].

:end :instance.


; <<>>

:begin :instance.

lobster_n1 := intr_noun_word_le &
  [ STEM < "lobster" >,
    SYNSEM.LOCAL.KEYS.KEY _lobster_rel ].

:end :instance.


; <<>>

:begin :instance.

lobster_n2 := massn_le &
  [ STEM < "lobster" >,
    SYNSEM.LOCAL.KEYS.KEY _lobster_rel ].

:end :instance.


; <<>>

:begin :instance.

locality_n1 := intr_noun_word_le &
  [ STEM < "locality" >,
    SYNSEM.LOCAL.KEYS.KEY _locality_rel ].

:end :instance.


; <<>>

:begin :instance.

locate_v1 := mv_np_trans_le &
  [ STEM < "locate" >,
    SYNSEM.LOCAL.KEYS.KEY _locate_rel ].

:end :instance.


; <<>>

:begin :instance.

location_n1 := noun_ppof_word_le &
  [ STEM < "location" >,
    SYNSEM.LOCAL.KEYS.KEY _location_rel ].

:end :instance.


; <<>>

:begin :instance.

lock_v1 := mv_np_trans_le &
  [ STEM < "lock" >,
    SYNSEM.LOCAL.KEYS.KEY _lock_v_rel ].

:end :instance.


; <<>>
; MULTIKEY < "loccumer" >

:begin :instance.

loccumer_hof := intr_noun_word_mle1 &
  [ STEM < "loccumer", "hof" >,
    SYNSEM.LOCAL.KEYS.KEY named_rel & [ NAMED 'loccumer_hof ] ].

:end :instance.


; <<>>

:begin :instance.

long_a1 := intrans_adj_le &
  [ STEM < "long" >,
    SYNSEM.LOCAL.KEYS.KEY _long_rel ].

:end :instance.


; <<>>

:begin :instance.

long := int_vp_adv_post_word_le &
  [ STEM < "long" >,
    SYNSEM.LOCAL.KEYS.KEY _long_adv_rel ].

:end :instance.


; <<>>
; MULTIKEY < "long" >

:begin :instance.

long_run_a1 := intrans_adj_mle &
  [ STEM < "long", "run" >,
    SYNSEM.LOCAL.KEYS.KEY _long_run_adj_rel ].

:end :instance.


; <<>>
; MULTIKEY < "long" >

:begin :instance.

long_term_a1 := intrans_adj_mle &
  [ STEM < "long", "term" >,
    SYNSEM.LOCAL.KEYS.KEY _long_term_rel ].

:end :instance.


; <<>>

:begin :instance.

longer_a1 := comp_adj_le &
  [ STEM < "longer" >,
    SYNSEM.LOCAL.KEYS.KEY _long_rel ].

:end :instance.


; <<>>

:begin :instance.

look_after_v1 := mv_empty_prep_intrans_le &
  [ STEM < "look" >,
    SYNSEM.LOCAL.KEYS [ KEY _look_after_rel,
			--COMPKEY _after_prepx_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

look_around_v1 := mv_particle_le &
  [ STEM < "look" >,
    SYNSEM.LOCAL.KEYS [ KEY _look_around_rel,
			--COMPKEY _around_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

look_at_v1 := mv_empty_prep_intrans_le &
  [ STEM < "look" >,
    SYNSEM.LOCAL.KEYS [ KEY _look_at_rel,
			--COMPKEY _at_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

look_for_v1 := mv_empty_prep_intrans_le &
  [ STEM < "look" >,
    SYNSEM.LOCAL.KEYS [ KEY _look_for_rel,
			--COMPKEY _for_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

look_forward_to_v1 := mv_particle_pp*_le &
  [ STEM < "look" >,
    SYNSEM.LOCAL.KEYS [ KEY _look_forward_to_rel,
			--COMPKEY _forward_rel_s,
			--OCOMPKEY _to_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

look_n1 := noun_ppcomp_word_le &
  [ STEM < "look" >,
    SYNSEM.LOCAL.KEYS [ KEY _look_n_rel,
			--COMPKEY _at_rel ] ].

:end :instance.


; <<>>

:begin :instance.

look_seem_v1 := mv_prdp_pp_ssr_le &
  [ STEM < "look" >,
    SYNSEM.LOCAL [ CAT.VAL [ SUBJ < [ LOCAL.CONT nom-obj ] >,
			     COMPS < [ LOCAL.CAT.HEAD adj ],
				     synsem > ],
		   KEYS.KEY _look_seem_rel ] ].
:end :instance.


; <<>>

:begin :instance.

look_seem_v2 := mv_expl_it_subj_like_le &
  [ STEM < "look" >,
    SYNSEM.LOCAL.KEYS.KEY _look_seem_rel ].

:end :instance.



; <<>>

:begin :instance.

look_up_to_v1 := mv_particle_pp_le &
  [ STEM < "look" >,
    SYNSEM.LOCAL.KEYS [ KEY _look_up_to_rel,
			--COMPKEY _up_rel,
			--OCOMPKEY _to_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

look_up_v1 := mv_prep_particle_np_le &
  [ STEM < "look" >,
    SYNSEM.LOCAL.KEYS [ KEY _look_up_rel,
			--COMPKEY _up_rel ] ].

:end :instance.


; <<>>

:begin :instance.

lord_root := disc_adv_le &
  [ STEM < "lord" >,
    SYNSEM.LOCAL.KEYS.KEY excl_rel & [ EXCL 'lord ] ].

:end :instance.


; <<>>

:begin :instance.

lose_by_v1 := mv_empty_prep_intrans_le &
  [ STEM < "lose" >,
    SYNSEM.LOCAL.KEYS [ KEY _lose_by_rel,
			--COMPKEY _by_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

lose_v1 := mv_unerg_le &
  [ STEM < "lose" >,
    SYNSEM.LOCAL.KEYS.KEY _lose_i_rel ].

:end :instance.


; <<>>

:begin :instance.

lose_v3 := mv_np_trans_le &
  [ STEM < "lose" >,
    SYNSEM.LOCAL.KEYS.KEY _lose_rel ].

:end :instance.


; <<>>

:begin :instance.

lost_a1 := intrans_adj_le &
  [ STEM < "lost" >,
    SYNSEM.LOCAL.KEYS.KEY _lost_rel ].

:end :instance.


; <<>>

:begin :instance.

loud_a1 := intrans_adj_le &
  [ STEM < "loud" >,
    SYNSEM.LOCAL.KEYS.KEY _loud_adj_rel ].

:end :instance.


; <<>>

:begin :instance.

loudly_adv1 := vp_adv_word_le &
  [ STEM < "loudly" >,
    SYNSEM.LOCAL.KEYS.KEY _loudly_rel ].

:end :instance.


; <<>>

:begin :instance.

lounge_n1 := intr_noun_word_le &
  [ STEM < "lounge" >,
    SYNSEM.LOCAL.KEYS.KEY _lounge_rel ].

:end :instance.


; <<>>

:begin :instance.

love_v1 := mv_np*_trans_le &
  [ STEM < "love" >,
    SYNSEM.LOCAL.KEYS.KEY _love_v_rel ].

:end :instance.


; <<>>

:begin :instance.

love_v2 := mv_subj_equi_le &
  [ STEM < "love" >,
    SYNSEM.LOCAL.KEYS.KEY _love_to_rel ].

:end :instance.


; <<>>

:begin :instance.

love_v3 := mv_subj_equi_prp_le &
  [ STEM < "love" >,
    SYNSEM.LOCAL.KEYS.KEY _love_to_rel ].

:end :instance.


; <<>>

:begin :instance.

low_a1 := intrans_adj_le &
  [ STEM < "low" >,
    SYNSEM.LOCAL.KEYS.KEY _low_rel ].

:end :instance.


; <<>>

:begin :instance.

low := vp_adv_post_word_le &
  [ STEM < "low" >,
    SYNSEM.LOCAL.KEYS.KEY _low_adv_rel ].

:end :instance.


; <<>>

:begin :instance.

lower_a1 := comp_adj_le &
  [ STEM < "lower" >,
    SYNSEM.LOCAL.KEYS.KEY _low_rel ].

:end :instance.


; <<>>

:begin :instance.

lower_v1 := mv_np_trans_le &
  [ STEM < "lower" >,
    SYNSEM.LOCAL.KEYS.KEY _lower_rel ].

:end :instance.


; <<>>

:begin :instance.

lucid_a1 := intrans_adj_le &
  [ STEM < "lucid" >,
    SYNSEM.LOCAL.KEYS.KEY _lucid_rel ].

:end :instance.


; <<>>

:begin :instance.

luck_n1 := massn_le &
  [ STEM < "luck" >,
    SYNSEM.LOCAL.KEYS.KEY _luck_rel ].

:end :instance.


; <<>>

:begin :instance.

luckily_adv1 := vp_adv_post_word_le &
  [ STEM < "luckily" >,
    SYNSEM.LOCAL.KEYS.KEY _luckily_rel ].

:end :instance.


; <<>>

:begin :instance.

Ludwigshafen_n1 := proper_le &
  [ STEM < "ludwigshafen" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Ludwigshafen ].

:end :instance.


; <<>>

:begin :instance.

Luebeck_n1 := proper_le &
  [ STEM < "luebeck" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Luebeck ].

:end :instance.


; <<>>

:begin :instance.

lunch_time_n1 := mealtime_word_le &
  [ STEM < "lunch" >,
    SYNSEM.LOCAL.KEYS.KEY _lunchtime_rel ].

:end :instance.


; <<>>

:begin :instance.

lunch_n1 := massn_le &
  [ STEM < "lunch" >,
    SYNSEM.LOCAL.KEYS.KEY _lunch_rel ].

:end :instance.


; <<>>

:begin :instance.

lunch_n2 := intr_noun_word_le &
  [ STEM < "lunch" >,
    SYNSEM.LOCAL.KEYS.KEY _lunch_rel ].

:end :instance.


; <<>>

:begin :instance.

lunch_v1 := mv_unerg_le &
  [ STEM < "lunch" >,
    SYNSEM.LOCAL.KEYS.KEY _lunch_v_rel ].

:end :instance.


; <<>>

:begin :instance.

maam_root := disc_adv_le &
  [ STEM < "maam" >,
    SYNSEM.LOCAL.KEYS.KEY excl_rel & [ EXCL 'maam ] ].

:end :instance.


; <<>>

:begin :instance.

machine_n1 := intr_noun_word_le &
  [ STEM < "machine" >,
    SYNSEM.LOCAL.KEYS.KEY _machine_rel ].

:end :instance.


; <<>>

:begin :instance.

mad_a1 := intrans_adj_le &
  [ STEM < "mad" >,
    SYNSEM.LOCAL.KEYS.KEY _mad_rel ].

:end :instance.


; <<>>

:begin :instance.

maddening_a1 := intrans_adj_le &
  [ STEM < "maddening" >,
    SYNSEM.LOCAL.KEYS.KEY _maddening_rel ].

:end :instance.


; <<>>

:begin :instance.

magazine_n1 := intr_noun_word_le &
  [ STEM < "magazine" >,
    SYNSEM.LOCAL.KEYS.KEY _magazine_rel ].

:end :instance.


; <<>>

:begin :instance.

main_a1 := intrans_adj_le &
  [ STEM < "main" >,
    SYNSEM.LOCAL.KEYS.KEY _main_rel ].

:end :instance.


; <<>>

:begin :instance.

mainly := adv_word_le &
  [ STEM < "mainly" >,
    SYNSEM.LOCAL.KEYS.KEY _mainly_scop_rel ].

:end :instance.


; <<>>

:begin :instance.

Mainz_n1 := proper_le &
  [ STEM < "mainz" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Mainz ].

:end :instance.


; <<>>

:begin :instance.

major_a1 := intrans_adj_le &
  [ STEM < "major" >,
    SYNSEM.LOCAL.KEYS.KEY _major_rel ].

:end :instance.


; <<>>

:begin :instance.

Majorca_n1 := proper_le &
  [ STEM < "majorca" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Majorca ].

:end :instance.


; <<>>

:begin :instance.

majority_n1 := noun_ppof_word_le &
  [ STEM < "majority" >,
    SYNSEM.LOCAL.KEYS.KEY _majority_rel ].

:end :instance.


; <<>>

:begin :instance.

make_note_of_v1 := mv_empty_prep_trans_le &
  [ STEM < "make" >,
    SYNSEM.LOCAL.KEYS [ KEY _make_a_note_of_rel,
			--COMPKEY _note_rel,
			--OCOMPKEY _of_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

make_over_v1 := mv_np_prep_particle_only_le &
  [ STEM < "make" >,
    SYNSEM.LOCAL.KEYS [ KEY _make_over_rel,
			--COMPKEY _over_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

make_v2 := mv_sorb_le &
  [ STEM < "make" >,
    SYNSEM.LOCAL.KEYS.KEY _make2_rel ].

:end :instance.


; <<>>

:begin :instance.

made_v2 := mv_sorb_pass_le &
  [ STEM < "made" >,
    SYNSEM.LOCAL.KEYS.KEY _make2_rel ].

:end :instance.


; <<>>

:begin :instance.

make_v1 := mv_np_trans_le &
  [ STEM < "make" >,
    SYNSEM.LOCAL.KEYS.KEY _make_rel ].

:end :instance.


; <<>>

:begin :instance.

make_v3 := mv_ditrans_le &
  [ STEM < "make" >,
    SYNSEM.LOCAL.KEYS.KEY _make_ditr_rel ].

:end :instance.


; <<>>

:begin :instance.

maladroit_a1 := intrans_adj_le &
  [ STEM < "maladroit" >,
    SYNSEM.LOCAL.KEYS.KEY _maladroit_rel ].

:end :instance.


; <<>>

:begin :instance.

Mallorca_n1 := proper_le &
  [ STEM < "mallorca" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Majorca ].

:end :instance.


; <<>>

:begin :instance.

man1 := intr_noun_word_le &
  [ STEM < "man" >,
    SYNSEM.LOCAL.KEYS.KEY _man_rel ].

:end :instance.


; <<>>

:begin :instance.

manage_v1 := mv_np_trans_le &
  [ STEM < "manage" >,
    SYNSEM.LOCAL.KEYS.KEY _manage_rel ].

:end :instance.


; <<>>

:begin :instance.

manage_v2 := mv_subj_equi_le &
  [ STEM < "manage" >,
    SYNSEM.LOCAL.KEYS.KEY _manage2_rel ].

:end :instance.


; <<>>

:begin :instance.

management_n1 := massn_le &
  [ STEM < "management" >,
    SYNSEM.LOCAL.KEYS.KEY _management_rel ].

:end :instance.


; <<>>

:begin :instance.

manager_n1 := noun_ppof_word_le &
  [ STEM < "manager" >,
    SYNSEM.LOCAL.KEYS.KEY _manager_rel ].

:end :instance.


; <<>>

:begin :instance.

manner_n1 := intr_noun_word_le &
  [ STEM < "manner" >,
    SYNSEM.LOCAL.KEYS.KEY _manner_rel ].

:end :instance.


; <<>>

:begin :instance.

Mannheim_n1 := proper_le &
  [ STEM < "mannheim" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Mannheim ].

:end :instance.


; <<>>

:begin :instance.

many := pdet_pl_le &
  [ STEM < "many" >,
    SYNSEM.LOCAL.KEYS.KEY _many_rel ].

:end :instance.


; <<>>

:begin :instance.

map_n1 := intr_noun_word_le &
  [ STEM < "map" >,
    SYNSEM.LOCAL.KEYS.KEY _map_rel ].

:end :instance.


; <<>>

:begin :instance.

march := month_word_le &
  [ STEM < "march" >,
    SYNSEM.LOCAL.KEYS.KEY.MONTH 'mar ].

:end :instance.


; <<>>

:begin :instance.

march_2 := month_year_word_le &
  [ STEM < "march" >,
    SYNSEM.LOCAL.KEYS.KEY.MONTH 'mar ].

:end :instance.


; <<>>
; MULTIKEY < "mardi" >

:begin :instance.

mardi_gras := holiday_word_mle1 &
  [ STEM < "mardi", "gras" >,
    SYNSEM.LOCAL.KEYS.KEY.DAY 'mardi_gras ].

:end :instance.


; <<>>

:begin :instance.

Maredo_n1 := proper_le &
  [ STEM < "maredo" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Maredo ].

:end :instance.


; <<>>

:begin :instance.

Marienplatz_n1 := proper_le &
  [ STEM < "marienplatz" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Marienplatz ].

:end :instance.


; <<>>

:begin :instance.

mark_v1 := mv_np_trans_le &
  [ STEM < "mark" >,
    SYNSEM.LOCAL.KEYS.KEY _mark_v_rel ].

:end :instance.


; <<>>

:begin :instance.

mark_down_v1 := mv_prep_particle_np_le &
  [ STEM < "mark" >,
    SYNSEM.LOCAL.KEYS [ KEY _mark_down_rel,
			--COMPKEY _down_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

Marriott_n1 := intr_noun_word_le &
  [ STEM < "marriott" >,
    SYNSEM.LOCAL.KEYS.KEY named_rel & [ NAMED 'Marriott ] ].

:end :instance.


; <<>>

:begin :instance.

marvelously := vp_adv_post_word_le &
  [ STEM < "marvelously" >,
    SYNSEM.LOCAL.KEYS.KEY _marvelously_rel ].

:end :instance.


; <<>>

:begin :instance.

marvelous_a1 := intrans_adj_le &
  [ STEM < "marvelous" >,
    SYNSEM.LOCAL.KEYS.KEY _marvelous_rel ].

:end :instance.


; <<>>

:begin :instance.

Mary := proper_le &
  [ STEM < "mary" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'mary ].

:end :instance.


; <<>>

:begin :instance.

match_up_v1 := mv_particle_le &
  [ STEM < "match" >,
    SYNSEM.LOCAL.KEYS [ KEY _match_coll_rel,
			--COMPKEY _up_rel ] ].

:end :instance.


; <<>>

:begin :instance.

match_up_v2 := mv_prep_particle_np_le &
  [ STEM < "match" >,
    SYNSEM.LOCAL.KEYS [ KEY _match_v_rel,
			--COMPKEY _up_rel ] ].

:end :instance.


; <<>>

:begin :instance.

match_v1 := mv_np_trans_le &
  [ STEM < "match" >,
    SYNSEM.LOCAL.KEYS.KEY _match_v_rel ].

:end :instance.


; <<>>

:begin :instance.

match_v2 := mv_unacc_le &
  [ STEM < "match" >,
    SYNSEM.LOCAL.KEYS.KEY _match_state_rel ].

:end :instance.


; <<>>

:begin :instance.

match_v3 := mv_empty_prep_intrans_le &
  [ STEM < "match" >,
    SYNSEM.LOCAL.KEYS [ KEY _match_with_rel,
			--COMPKEY _with_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

material_n1 := massn_le &
  [ STEM < "material" >,
    SYNSEM.LOCAL.KEYS.KEY _material_rel ].

:end :instance.


; <<>>

:begin :instance.

Matt := proper_le &
  [ STEM < "matt" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'matt ].

:end :instance.


; <<>>

:begin :instance.

matter_n1 := intr_noun_word_le &
  [ STEM < "matter" >,
    SYNSEM.LOCAL.KEYS.KEY _matter_n_rel ].

:end :instance.


; <<>>

:begin :instance.

matter_v1 := mv_unacc_le &
  [ STEM < "matter" >,
    SYNSEM.LOCAL.KEYS.KEY _matter_rel ].

:end :instance.


; <<>>

:begin :instance.

mattress_n1 := intr_noun_word_le &
  [ STEM < "mattress" >,
    SYNSEM.LOCAL.KEYS.KEY _mattress_rel ].

:end :instance.


; <<>>

:begin :instance.

Maxim_n1 := proper_le &
  [ STEM < "maxim" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Maxim ].

:end :instance.


; <<>>

:begin :instance.

maximally_adv1 := vp_adv_post_word_le &
  [ STEM < "maximally" >,
    SYNSEM.LOCAL.KEYS.KEY _maximally_rel ].

:end :instance.


; <<>>

:begin :instance.

maximum_adv1 := pp_le &
  [ STEM < "maximum" >,
    SYNSEM.LOCAL.KEYS.KEY _maximum_adv_rel ].

:end :instance.


; <<>>

:begin :instance.

maximum_a1 := intrans_adj_le &
  [ STEM < "maximum" >,
    SYNSEM.LOCAL.KEYS.KEY _maximum_rel ].

:end :instance.


; <<>>

:begin :instance.

may := month_word_le &
  [ STEM < "may" >,
    SYNSEM.LOCAL.KEYS.KEY.MONTH 'may ].

:end :instance.


; <<>>

:begin :instance.

may_2 := month_year_word_le &
  [ STEM < "may" >,
    SYNSEM.LOCAL.KEYS.KEY.MONTH 'may ].

:end :instance.


; <<>>

:begin :instance.

may_aux_pos := modal_pos_le & 
  [ STEM < "may" >,
    SYNSEM.LOCAL [ CAT.HEAD.TENSE present*,
		   KEYS.KEY _may_rel ] ].

:end :instance.


; <<>>

:begin :instance.

maybe_adv1 := s_adv_pre_word_nospec_le &
  [ STEM < "maybe" >,
    SYNSEM.LOCAL.KEYS.KEY _maybe_rel ].

:end :instance.


; <<>>

:begin :instance.

me := pers_pro_le &
  [ STEM < "me" >,
    SYNSEM.LOCAL [ CAT.HEAD.CASE acc,
		   KEYS.KEY.INST [ PNG png & [ PN 1sg* ],
				   PRONTYPE std_1sg ] ] ].
:end :instance.


; <<>>

:begin :instance.

meal_n1 := intr_noun_word_le &
  [ STEM < "meal" >,
    SYNSEM.LOCAL.KEYS.KEY _meal_rel ].

:end :instance.


; <<>>

:begin :instance.

mean_a1 := intrans_adj_le &
  [ STEM < "mean" >,
    SYNSEM.LOCAL.KEYS.KEY _mean_isect_rel ].

:end :instance.


; <<>>

:begin :instance.

mean_v1 := mv_np_trans_le &
  [ STEM < "mean" >,
    SYNSEM.LOCAL.KEYS.KEY _mean_v_rel ].

:end :instance.


; <<>>

:begin :instance.

mean_v2 := mv_cp_non_trans_le &
  [ STEM < "mean" >,
    SYNSEM.LOCAL.KEYS.KEY _mean_h_rel ].

:end :instance.


; <<>>

:begin :instance.

mean_v3 := mv_unerg_le &
  [ STEM < "mean" >,
    SYNSEM.LOCAL.KEYS.KEY _mean_v_rel ].

:end :instance.


; <<>>

:begin :instance.

mean_v4 := mv_subj_equi_le &
  [ STEM < "mean" >,
    SYNSEM.LOCAL.KEYS.KEY _mean2_rel ].

:end :instance.


; <<>>

:begin :instance.

mean_v5 := mv_sor_non_trans_le &
  [ STEM < "mean" >,
    SYNSEM.LOCAL.KEYS.KEY _mean2_rel ].

:end :instance.


; <<>>

:begin :instance.

means_n1 := intr_noun_word_le &
  [ STEM < "means" >,
    SYNSEM.LOCAL.KEYS.KEY _means_rel ].

:end :instance.


; <<>>

:begin :instance.

meantime_n1 := intr_noun_word_le &
  [ STEM < "meantime" >,
    SYNSEM.LOCAL.KEYS.KEY _meantime_rel ].

:end :instance.


; <<>>

:begin :instance.

meanwhile_adv1 := int_vp_adv_post_word_le &
  [ STEM < "meanwhile" >,
    SYNSEM.LOCAL.KEYS.KEY _meanwhile_rel ].

:end :instance.


; <<>>

:begin :instance.

meet_v1 := mv_unerg_le &
  [ STEM < "meet" >,
    SYNSEM.LOCAL.KEYS.KEY _meet_v_rel ].

:end :instance.


; <<>>

:begin :instance.

meet_v2 := mv_np_trans_le &
  [ STEM < "meet" >,
    SYNSEM.LOCAL.KEYS.KEY _meet_someone_rel ].

:end :instance.


; <<>>

:begin :instance.

meet_up_v1 := mv_particle_le &
  [ STEM < "meet" >,
    SYNSEM.LOCAL.KEYS [ KEY _meet_up_rel,
			--COMPKEY _up_rel ] ].

:end :instance.


; <<>>

:begin :instance.

meeting_n1 := intr_noun_word_le &
  [ STEM < "meeting" >,
    SYNSEM.LOCAL.KEYS.KEY _meeting_rel ].

:end :instance.


; <<>>

:begin :instance.

Meldau_n1 := proper_le &
  [ STEM < "meldau" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Meldau ].

:end :instance.


; <<>>

:begin :instance.

member_n1 := noun_ppof_word_le &
  [ STEM < "member" >,
    SYNSEM.LOCAL.KEYS.KEY _member_rel ].

:end :instance.


; <<>>
; MULTIKEY < "memorial" >

:begin :instance.

memorial_day := holiday_word_mle1 &
  [ STEM < "memorial", "day" >,
    SYNSEM.LOCAL.KEYS.KEY.DAY 'memorial_day ].

:end :instance.


; <<>>

:begin :instance.

memory_n1 := noun_ppof_word_le &
  [ STEM < "memory" >,
    SYNSEM.LOCAL.KEYS.KEY _memory_rel ].

:end :instance.


; <<>>

:begin :instance.

mensa_n1 := intr_noun_word_le &
  [ STEM < "mensa" >,
    SYNSEM.LOCAL.KEYS.KEY _mensa_rel ].

:end :instance.


; <<>>

:begin :instance.

mention_v1 := mv_np_trans_le &
  [ STEM < "mention" >,
    SYNSEM.LOCAL.KEYS.KEY _mention_rel ].

:end :instance.


; <<>>

:begin :instance.

mention_v2 := mv_cp_non_trans_le &
  [ STEM < "mention" >,
    SYNSEM.LOCAL.KEYS.KEY _mention_h_rel ].

:end :instance.


; <<>>

:begin :instance.

menu_n1 := intr_noun_word_le &
  [ STEM < "menu" >,
    SYNSEM.LOCAL.KEYS.KEY _menu_rel ].

:end :instance.


; <<>>

:begin :instance.

Mercedes_n1 := intr_noun_word_le &
  [ STEM < "mercedes" >,
    SYNSEM.LOCAL.KEYS.KEY named_rel & [ NAMED 'Mercedes ] ].

:end :instance.


; <<>>
; MULTIKEY < "mercedes" >

:begin :instance.

Mercedes_Benz_n1 := intr_noun_word_mle1 &
  [ STEM < "mercedes", "benz" >,
    SYNSEM.LOCAL.KEYS.KEY named_rel & [ NAMED 'Mercedes_Benz ] ].

:end :instance.


; <<>>

:begin :instance.

merely_adv1 := vp_adv_pre_word_le &
  [ STEM < "merely" >,
    SYNSEM.LOCAL.KEYS.KEY _merely_rel ].

:end :instance.


; <<>>

:begin :instance.

merely_adv2 := s_adv_pre_word_le &
  [ STEM < "merely" >,
    SYNSEM.LOCAL.KEYS.KEY _merely_rel ].

:end :instance.


; <<>>

:begin :instance.

merry_a1 := intrans_adj_le &
  [ STEM < "merry" >,
    SYNSEM.LOCAL.KEYS.KEY _merry_rel ].

:end :instance.


; <<>>

:begin :instance.

metaphysical_a1 := intrans_adj_le &
  [ STEM < "metaphysical" >,
    SYNSEM.LOCAL.KEYS.KEY _metaphysical_rel ].

:end :instance.


; <<>>

:begin :instance.

metaphysically := adv_word_le &
  [ STEM < "metaphysically" >,
    SYNSEM.LOCAL.KEYS.KEY _metaphysically_rel ].

:end :instance.


; <<>>

:begin :instance.

Microsoft_n1 := proper_le &
  [ STEM < "microsoft" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Microsoft ].

:end :instance.


; <<>>

:begin :instance.

midday := hour_word_le &
  [ STEM < "midday" >,
    SYNSEM.LOCAL.KEYS.KEY.HOUR "12" ].

:end :instance.


; <<>>

:begin :instance.

middle_a1 := intrans_adj_le &
  [ STEM < "middle" >,
    SYNSEM.LOCAL.KEYS.KEY _middle_isect_rel ].

:end :instance.


; <<>>

:begin :instance.

middle_n1 := noun_ppof_word_le &
  [ STEM < "middle" >,
    SYNSEM.LOCAL.KEYS.KEY _middle_n_rel ].

:end :instance.


; <<>>

:begin :instance.

midnight := hour_word_le &
  [ STEM < "midnight" >,
    SYNSEM.LOCAL.KEYS.KEY.HOUR "0" ].

:end :instance.


; <<>>

:begin :instance.

midst_n1 := noun_ppof_word_le &
  [ STEM < "midst" >,
    SYNSEM.LOCAL.KEYS.KEY _midst_rel ].

:end :instance.


; <<>>

:begin :instance.

might_aux_pos := modal_subj_pos_le & 
  [ STEM < "might" >,
    SYNSEM.LOCAL [ CAT.HEAD.TENSE present*,
		   KEYS.KEY _might_rel ] ].

:end :instance.


; <<>>

:begin :instance.

might_aux_neg_1 := modal_subj_neg_le &
  [ STEM < "mightn't" >,
    SYNSEM.LOCAL [ CAT.HEAD.TENSE present*,
		   KEYS.KEY _might_rel ] ].

:end :instance.


; <<>>
; MULTIKEY < "mightn" >

:begin :instance.

might_aux_neg_2 := modal_subj_neg_mle1 &
  [ STEM < "mightn", "t" >,
    SYNSEM.LOCAL [ CAT.HEAD.TENSE present*,
		   KEYS.KEY _might_rel ] ].

:end :instance.


; <<>>

:begin :instance.

milk_v1 := mv_np_trans_le &
  [ STEM < "milk" >,
    SYNSEM.LOCAL.KEYS.KEY _milk_v_rel ].

:end :instance.


; <<>>

:begin :instance.

million := bare_specified_card_le & 
  [ STEM < "million" >,
    SYNSEM.LOCAL [ CAT [ HEAD intadj9,
			 VAL.SPR.FIRST.LOCAL.CAT.HEAD intadj6 ],
		   KEYS.KEY.CONST_VALUE "1000000" ] ].

:end :instance.


; <<>>

:begin :instance.

mind_v1 := mv_np*_trans_le &
  [ STEM < "mind" >,
    SYNSEM.LOCAL.KEYS.KEY _mind_rel ].

:end :instance.


; <<>>

:begin :instance.

mind_v2 := mv_cp_non_trans_le &
  [ STEM < "mind" >,
    SYNSEM.LOCAL [ KEYS.KEY _mind_h_rel,
		   CAT.VAL.COMPS < [ LOCAL.CAT.HEAD comp ] > ] ].

:end :instance.


; <<>>

:begin :instance.

mine := poss_pro_le &
  [ STEM < "mine" >,
    SYNSEM.LOCAL.CONT.LISZT.LIST.FIRST.INST.PNG png & [ PN 1sg* ] ].

:end :instance.


; <<>>

:begin :instance.

ministry_n1 := noun_ppof_word_le &
  [ STEM < "ministry" >,
    SYNSEM.LOCAL.KEYS.KEY _ministry_rel ].

:end :instance.


; <<>>

:begin :instance.

minor_a1 := intrans_adj_le &
  [ STEM < "minor" >,
    SYNSEM.LOCAL.KEYS.KEY _minor_isect_rel ].

:end :instance.


; <<>>

:begin :instance.

minute_n1 := intr_noun_word_le &
  [ STEM < "minute" >,
    SYNSEM.LOCAL.KEYS.KEY _minute_rel ].

:end :instance.


; <<>>

:begin :instance.

miraculous_a1 := intrans_adj_le &
  [ STEM < "miraculous" >,
    SYNSEM.LOCAL.KEYS.KEY _miraculous_rel ].

:end :instance.


; <<>>

:begin :instance.

misery_n1 := massn_le &
  [ STEM < "misery" >,
    SYNSEM.LOCAL.KEYS.KEY _misery_rel ].

:end :instance.


; <<>>

:begin :instance.

misplace_v1 := mv_np_trans_le &
  [ STEM < "misplace" >,
    SYNSEM.LOCAL.KEYS.KEY _misplace_rel ].

:end :instance.


; <<>>

:begin :instance.

mispronounce_v1 := mv_np_trans_le &
  [ STEM < "mispronounce" >,
    SYNSEM.LOCAL.KEYS.KEY _mispronounce_rel ].

:end :instance.


; <<>>

:begin :instance.

misread_v1 := mv_np_trans_le &
  [ STEM < "misread" >,
    SYNSEM.LOCAL.KEYS.KEY _misread_rel ].

:end :instance.


; <<>>

:begin :instance.

miss_title := title_le &
  [ STEM < "miss" >,
    SYNSEM.LOCAL.KEYS.KEY title_rel &
	                  [ TITLE 'ms ] ].

:end :instance.


; <<>>

:begin :instance.

miss_out_v1 := mv_prep_particle_np_le &
  [ STEM < "miss" >,
    SYNSEM.LOCAL.KEYS [ KEY _miss_out_rel,
			--COMPKEY _out_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

miss_v1 := mv_np_trans_le &
  [ STEM < "miss" >,
    SYNSEM.LOCAL.KEYS.KEY _miss_rel ].

:end :instance.


; <<>>

:begin :instance.

missus := title_le &
  [ STEM < "missus" >,
    SYNSEM.LOCAL.KEYS.KEY _missus_rel ].

:end :instance.


; <<>>

:begin :instance.

mistake_n1 := intr_noun_word_le &
  [ STEM < "mistake" >,
    SYNSEM.LOCAL.KEYS.KEY _mistake_rel ].

:end :instance.


; <<>>

:begin :instance.

mistake_v1 := mv_empty_prep_trans*_le &
  [ STEM < "mistake" >,
    SYNSEM.LOCAL.KEYS [ KEY _mistake_v_rel,
			--OCOMPKEY _for_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

mistaken_a1 := intrans_adj_le &
  [ STEM < "mistaken" >,
    SYNSEM.LOCAL.KEYS.KEY _mistaken_rel ].

:end :instance.


; <<>>

:begin :instance.

mister := title_le &
  [ STEM < "mister" >,
    SYNSEM.LOCAL.KEYS.KEY _mister_rel ].

:end :instance.


; <<>>

:begin :instance.

misunderstand_v1 := mv_np*_trans_le &
  [ STEM < "misunderstand" >,
    SYNSEM.LOCAL.KEYS.KEY _misunderstand_rel ].

:end :instance.


; <<>>

:begin :instance.

misunderstanding_n1 := intr_noun_word_le &
  [ STEM < "misunderstanding" >,
    SYNSEM.LOCAL.KEYS.KEY _misunderstanding_rel ].

:end :instance.


; <<>>

:begin :instance.

mode_n1 := intr_noun_word_le &
  [ STEM < "mode" >,
    SYNSEM.LOCAL.KEYS.KEY _mode_rel ].

:end :instance.


; <<>>

:begin :instance.

modify_v1 := mv_np_trans_le &
  [ STEM < "modify" >,
    SYNSEM.LOCAL.KEYS.KEY _modify_rel ].

:end :instance.


; <<>>

:begin :instance.

Moecki_n1 := proper_le &
  [ STEM < "moecki" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Moecki ].

:end :instance.


; <<>>

:begin :instance.

moment_n1 := intr_temp_noun_le &
  [ STEM < "moment" >,
    SYNSEM.LOCAL.KEYS.KEY _moment_rel ].

:end :instance.


; <<>>

:begin :instance.

Monaco_n1 := proper_le &
  [ STEM < "monaco" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Monaco ].

:end :instance.


; <<>>

:begin :instance.

monday1 := day_of_week_le &
  [ STEM < "monday" >,
    SYNSEM.LOCAL.KEYS.KEY.DAY 'mon ].

:end :instance.


; <<>>

:begin :instance.

monday_cn := intr_temp_noun_le &
  [ STEM < "monday" >,
    SYNSEM.LOCAL.KEYS.KEY dofw_rel & [ DAY 'mon ] ].

:end :instance.


; <<>>

:begin :instance.

money_n1 := massn_le &
  [ STEM < "money" >,
    SYNSEM.LOCAL.KEYS.KEY _money_rel ].

:end :instance.


; <<>>

:begin :instance.

month_n1 := temp_noun_ppcomp_word_le &
  [ STEM < "month" >,
    SYNSEM.LOCAL.KEYS.KEY _month_rel ].

:end :instance.


; <<>>

:begin :instance.

monthly_adv1 := vp_adv_post_word_le &
  [ STEM < "monthly" >,
    SYNSEM.LOCAL.KEYS.KEY _monthly_adv_rel ].

:end :instance.


; <<>>

:begin :instance.

monthly_a1 := intrans_adj_le &
  [ STEM < "monthly" >,
    SYNSEM.LOCAL.KEYS.KEY _monthly_rel ].

:end :instance.


; <<>>

:begin :instance.

mood_n1 := intr_noun_word_le &
  [ STEM < "mood" >,
    SYNSEM.LOCAL.KEYS.KEY _mood_n_rel ].

:end :instance.


; <<>>

:begin :instance.

more_adj := more_adj_le &
  [ STEM < "more" > ].

:end :instance.


; <<>>

:begin :instance.

more := pdet_pl_mass_le &
  [ STEM < "more" >,
    SYNSEM.LOCAL.KEYS.KEY _more_q_rel ].

:end :instance.


; <<>>

:begin :instance.

more_a1 := comparison_spec_le &
  [ STEM < "more" >,
    SYNSEM.LOCAL.KEYS.KEY more_sc_adv_rel ].

:end :instance.


; <<>>
; MULTIKEY < "less" >

:begin :instance.

more_or_less_adv1 := vp_adv_post_word_3mle3 &
  [ STEM < "more", "or", "less" >,
    SYNSEM.LOCAL.KEYS.KEY _more_or_less_rel ].

:end :instance.


; <<>>
; MULTIKEY < "more" >

:begin :instance.

more_than := degree_spec_mle1 &
  [ STEM < "more", "than" >,
    SYNSEM.LOCAL.KEYS.KEY _more_than_rel ].

:end :instance.


; <<>>

:begin :instance.

moreover_root := disc_adv_le &
  [ STEM < "moreover" >,
    SYNSEM.LOCAL.KEYS.KEY excl_rel & [ EXCL 'moreover ] ].

:end :instance.


; <<>>

:begin :instance.

morning_sg_n1 := day_part_word_le &
  [ STEM < "morning" >,
    SYNSEM.LOCAL.KEYS.KEY _morning_rel & [ INST [ PNG png & [ PN 3sg*,
							      GEN neut* ],
						    DIVISIBLE - ] ] ].

:end :instance.


; <<>>

:begin :instance.

morning_pl_n1 := day_part_word_le &
  [ STEM < "mornings" >,
    SYNSEM.LOCAL.KEYS.KEY _morning_rel & [ INST.PNG png & [ PN 3pl* ] ] ].

:end :instance.


; <<>>

:begin :instance.

morning_sg_def := def_day_part_word_le &
  [ STEM < "morning" >,
    SYNSEM.LOCAL.KEYS.KEY _def_morning_rel &
                          [ INST [ PNG png & [ PN 3sg*,
					       GEN neut* ],
				   DIVISIBLE - ] ] ].

:end :instance.


; <<>>

:begin :instance.

morning_pl_def := def_day_part_word_le &
  [ STEM < "mornings" >,
    SYNSEM.LOCAL.KEYS.KEY _def_morning_rel &
	                  [ INST.PNG png & [ PN 3pl* ] ] ].

:end :instance.


; <<>>

:begin :instance.

most := pdet_pl_mass_le &
  [ STEM < "most" >,
    SYNSEM.LOCAL.KEYS.KEY _most_q_rel ].

:end :instance.


; <<>>

:begin :instance.

most_a1 := comparison_spec_le &
  [ STEM < "most" >,
    SYNSEM.LOCAL.KEYS.KEY comp_most_rel].

:end :instance.


; <<>>

:begin :instance.

mostly_adv1 := vp_adv_post_word_le &
  [ STEM < "mostly" >,
    SYNSEM.LOCAL.KEYS.KEY _mostly_rel ].

:end :instance.


; <<>>

:begin :instance.

mother_n1 := intr_noun_word_le &
  [ STEM < "mother" >,
    SYNSEM.LOCAL.KEYS.KEY _mother_rel ].

:end :instance.


; <<>>
; MULTIKEY < "mother" >

:begin :instance.

mothers_day := holiday_word_3mle1 &
  [ STEM < "mother", "s", "day" >,
    SYNSEM.LOCAL.KEYS.KEY.DAY 'mothers_day ].

:end :instance.


; <<>>
; MULTIKEY < "mother's" >

:begin :instance.

mothers_day_2 := holiday_word_mle1 &
  [ STEM < "mother's", "day" >,
    SYNSEM.LOCAL.KEYS.KEY.DAY 'mothers_day ].

:end :instance.


; <<>>

:begin :instance.

motivated_a1 := intrans_adj_le &
  [ STEM < "motivated" >,
    SYNSEM.LOCAL.KEYS.KEY _motivated_rel ].

:end :instance.


; <<>>

:begin :instance.

motive_n1 := intr_noun_word_le &
  [ STEM < "motive" >,
    SYNSEM.LOCAL.KEYS.KEY _motive_rel ].

:end :instance.


; <<>>

:begin :instance.

motor_n1 := intr_noun_word_le &
  [ STEM < "motor" >,
    SYNSEM.LOCAL.KEYS.KEY _motor_rel ].

:end :instance.


; <<>>

:begin :instance.

motto_n1 := intr_noun_word_le &
  [ STEM < "motto" >,
    SYNSEM.LOCAL.KEYS.KEY _motto_rel ].

:end :instance.


; <<>>

:begin :instance.

mount_v1 := mv_np_trans_le &
  [ STEM < "mount" >,
    SYNSEM.LOCAL.KEYS.KEY _mount_rel ].

:end :instance.


; <<>>

:begin :instance.

mountain_n1 := intr_noun_word_le &
  [ STEM < "mountain" >,
    SYNSEM.LOCAL.KEYS.KEY _mountain_rel ].

:end :instance.


; <<>>

:begin :instance.

move_v1 := mv_unacc_le &
  [ STEM < "move" >,
    SYNSEM.LOCAL.KEYS.KEY _move_und_rel ].

:end :instance.


; <<>>

:begin :instance.

move_v2 := mv_prep_trans_le &
  [ STEM < "move" >,
    SYNSEM.LOCAL.KEYS [ KEY _move_to_rel,
			--OCOMPKEY dir_rel ] ].

:end :instance.


; <<>>

:begin :instance.

move_v3 := mv_np_trans_le &
  [ STEM < "move" >,
    SYNSEM.LOCAL.KEYS.KEY _move_rel ].

:end :instance.


; <<>>

:begin :instance.

move_on_v1 := mv_particle_le &
  [ STEM < "move" >,
    SYNSEM.LOCAL.KEYS [ KEY _move_on_rel,
			--COMPKEY _on_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

move_up_v1 := mv_particle_le &
  [ STEM < "move" >,
    SYNSEM.LOCAL.KEYS [ KEY _move_up_rel,
			--COMPKEY _up_rel ] ].

:end :instance.


; <<>>

:begin :instance.

mr_title := title_le &
  [ STEM < "mr" >,
    SYNSEM.LOCAL.KEYS.KEY _mister_rel ].

:end :instance.


; <<>>

:begin :instance.

prof_title := title_le &
  [ STEM < "professor" >,
    SYNSEM.LOCAL.KEYS.KEY _prof_ttl_rel ].

:end :instance.


; <<>>

:begin :instance.

mrs_title := title_le &
  [ STEM < "mrs" >,
    SYNSEM.LOCAL.KEYS.KEY _missus_rel ].

:end :instance.


; <<>>

:begin :instance.

ms_title := title_le &
  [ STEM < "ms" >,
    SYNSEM.LOCAL.KEYS.KEY title_rel &
	                  [ TITLE 'ms ] ].

:end :instance.


; <<>>

:begin :instance.

much := degree_spec_le &
  [ STEM < "much" >,
    SYNSEM.LOCAL.KEYS.KEY _much_deg_rel ].

:end :instance.


; <<>>

:begin :instance.

much_det := pdet_ms_le &
  [ STEM < "much" >,
    SYNSEM.LOCAL.KEYS.KEY _much_q_rel ].

:end :instance.


; <<>>

:begin :instance.

Mueller_n1 := proper_le &
  [ STEM < "mueller" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Mueller ].

:end :instance.


; <<>>

:begin :instance.

Muenster_n1 := proper_le &
  [ STEM < "muenster" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Muenster ].

:end :instance.


; <<>>

:begin :instance.

mug_n1 := intr_noun_word_le &
  [ STEM < "mug" >,
    SYNSEM.LOCAL.KEYS.KEY _mug_rel ].

:end :instance.


; <<>>

:begin :instance.

Munich_n1 := proper_le &
  [ STEM < "munich" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Munich ].

:end :instance.


; <<>>

:begin :instance.

musical_n1 := intr_noun_word_le &
  [ STEM < "musical" >,
    SYNSEM.LOCAL.KEYS.KEY _musical_rel ].

:end :instance.


; <<>>

:begin :instance.

must_aux_pos := modal_pos_le & 
  [ STEM < "must" >,
    SYNSEM.LOCAL [ CAT.HEAD.TENSE present*,
		   KEYS.KEY _must_rel ] ].

:end :instance.


; <<>>

:begin :instance.

must_aux_neg_1 := modal_neg_le &
  [ STEM < "mustn't" >,
    SYNSEM.LOCAL [ CAT.HEAD.TENSE present*,
		   KEYS.KEY _must_rel ] ].

:end :instance.


; <<>>
; MULTIKEY < "mustn" >

:begin :instance.

must_aux_neg_2 := modal_neg_mle1 &
  [ STEM < "mustn", "t" >,
    SYNSEM.LOCAL [ CAT.HEAD.TENSE present*,
		   KEYS.KEY _must_rel ] ].

:end :instance.


; <<>>

:begin :instance.

mutual_a1 := intrans_adj_le &
  [ STEM < "mutual" >,
    SYNSEM.LOCAL.KEYS.KEY _mutual_rel ].

:end :instance.


; <<>>

:begin :instance.

my := poss_le &
  [ STEM < "my" >,
    SYNSEM.LOCAL.CONT.LISZT <! relation, relation,
			       [ INST [ PNG png & [ PN 1sg* ],
					PRONTYPE std_1sg ] ] !> ].
:end :instance.


; <<>>

:begin :instance.

myself := refl_pro_le &
  [ STEM < "myself" >,
    SYNSEM.LOCAL.KEYS.KEY.INST.PNG png & [ PN 1sg* ] ].

:end :instance.


; <<>>

:begin :instance.

name_n1 := noun_ppof_word_le &
  [ STEM < "name" >,
    SYNSEM.LOCAL.KEYS.KEY _name_rel ].

:end :instance.


; <<>>

:begin :instance.

name_v1 := mv_np_trans_le &
  [ STEM < "name" >,
    SYNSEM.LOCAL.KEYS.KEY _name_v_rel ].

:end :instance.


; <<>>

:begin :instance.

namely_adv1 := adv_post_word_le &
  [ STEM < "namely" >,
    SYNSEM.LOCAL.KEYS.KEY _namely_rel ].

:end :instance.


; <<>>

:begin :instance.

narrow_a1 := intrans_adj_le &
  [ STEM < "narrow" >,
    SYNSEM.LOCAL.KEYS.KEY _narrow_rel ].

:end :instance.


; <<>>

:begin :instance.

nasty_a1 := intrans_adj_le &
  [ STEM < "nasty" >,
    SYNSEM.LOCAL.KEYS.KEY _nasty_rel ].

:end :instance.


; <<>>

:begin :instance.

national_a1 := intrans_adj_le &
  [ STEM < "national" >,
    SYNSEM.LOCAL.KEYS.KEY _national_rel ].

:end :instance.


; <<>>

:begin :instance.

natural_a1 := intrans_adj_le &
  [ STEM < "natural" >,
    SYNSEM.LOCAL.KEYS.KEY _natural_rel ].

:end :instance.


; <<>>

:begin :instance.

naturally_adv1 := vp_adv_pre_word_le &
  [ STEM < "naturally" >,
    SYNSEM.LOCAL.KEYS.KEY _naturally_rel ].

:end :instance.


; <<>>

:begin :instance.

naturally_adv2 := s_adv_pre_word_le &
  [ STEM < "naturally" >,
    SYNSEM.LOCAL.KEYS.KEY _naturally_rel ].

:end :instance.


; <<>>

:begin :instance.

near_a1 := trans_adj_le &
  [ STEM < "near" >,
    SYNSEM.LOCAL.KEYS [ KEY _near_rel,
			--COMPKEY _to_rel ] ].

:end :instance.


; <<>>

:begin :instance.

near := reg_prep_le &
  [ STEM < "near" >,
    SYNSEM.LOCAL.KEYS.KEY _near_p_rel ].

:end :instance.


; <<>>

:begin :instance.

nearby_adv1 := pp_le &
  [ STEM < "nearby" >,
    SYNSEM.LOCAL.KEYS.KEY _nearby_rel ].

:end :instance.


; <<>>

:begin :instance.

nearby_a1 := intrans_adj_le &
  [ STEM < "nearby" >,
    SYNSEM.LOCAL.KEYS.KEY _nearby_adj_rel ].

:end :instance.


; <<>>

:begin :instance.

nearly_adv1 := vp_adv_pre_word_le &
  [ STEM < "nearly" >,
    SYNSEM.LOCAL.KEYS.KEY _nearly_rel ].

:end :instance.


; <<>>

:begin :instance.

nearly_adv2 := s_adv_pre_word_le &
  [ STEM < "nearly" >,
    SYNSEM.LOCAL.KEYS.KEY _nearly_rel ].

:end :instance.


; <<>>

:begin :instance.

nearly_deg := degree_spec_le &
  [ STEM < "nearly" >,
    SYNSEM.LOCAL.KEYS.KEY _nearly_deg_rel ].

:end :instance.


; <<>>

:begin :instance.

neat_adj := intrans_adj_le &
  [ STEM < "neat" >,
    SYNSEM.LOCAL.KEYS.KEY _neat_rel ].

:end :instance.


; <<>>

:begin :instance.

necessarily := adv_word_le &
  [ STEM < "necessarily" >,
    SYNSEM.LOCAL.KEYS.KEY _necessarily_rel ].

:end :instance.


; <<>>

:begin :instance.

necessary_a1 := intrans_adj_le &
  [ STEM < "necessary" >,
    SYNSEM.LOCAL.KEYS.KEY _necessary_rel ].

:end :instance.


; <<>>

:begin :instance.

necessity_n1 := massn_le &
  [ STEM < "necessity" >,
    SYNSEM.LOCAL.KEYS.KEY _necessity_rel ].

:end :instance.


; <<>>

:begin :instance.

need_v1 := mv_np_trans_le &
  [ STEM < "need" >,
    SYNSEM.LOCAL.KEYS.KEY _need_rel ].

:end :instance.


; <<>>

:begin :instance.

need_v2 := mv_subj_equi_le &
  [ STEM < "need" >,
    SYNSEM.LOCAL.KEYS.KEY _need2_rel ].

:end :instance.


; <<>>

:begin :instance.

need_v3 := mv_sor_non_trans_le &
  [ STEM < "need" >,
    SYNSEM.LOCAL.KEYS.KEY _need2_rel ].

:end :instance.


; <<>>

:begin :instance.

need-prd := mv_obj_equi_non_trans_prd_le &
  [ STEM < "need" >,
    SYNSEM.LOCAL.KEYS.KEY _need_pred_rel  ].

:end :instance.


; <<>>

:begin :instance.

need_aux_neg_1 := modal_neg_le &
  [ STEM < "needn't" >,
    SYNSEM.LOCAL [ CAT.HEAD.TENSE present*,
		   KEYS.KEY _need_aux_rel ] ].

:end :instance.


; <<>>
; MULTIKEY < "needn" >

:begin :instance.

need_aux_neg_2 := modal_neg_mle1 &
  [ STEM < "needn", "t" >,
    SYNSEM.LOCAL [ CAT.HEAD.TENSE present*,
		   KEYS.KEY _need_aux_rel ] ].

:end :instance.


; <<>>

:begin :instance.

negotiate_v1 := mv_empty_prep_intrans_le &
  [ STEM < "negotiate" >,
    SYNSEM.LOCAL.KEYS [ KEY _negotiate_rel,
			--COMPKEY _with_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

neither_conj := coord_a_le &
  [ STEM < "neither" >,
    SYNSEM.LOCAL.CONJ neither ].

:end :instance.


; <<>>

:begin :instance.

neither_det := pdet_le &
  [ STEM < "neither" >,
    SYNSEM.LOCAL.KEYS.KEY _neither_rel ].

:end :instance.


; <<>>

:begin :instance.

Nelson := proper_le &
  [ STEM < "nelson" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'nelson ].

:end :instance.


; <<>>

:begin :instance.

network_n1 := intr_noun_word_le &
  [ STEM < "network" >,
    SYNSEM.LOCAL.KEYS.KEY _network_rel ].

:end :instance.


; <<>>

:begin :instance.

Neuperlach_n1 := proper_le &
  [ STEM < "neuperlach" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Neuperlach ].

:end :instance.


; <<>>

:begin :instance.

neutral_a1 := intrans_adj_le &
  [ STEM < "neutral" >,
    SYNSEM.LOCAL.KEYS.KEY _neutral_rel ].

:end :instance.


; <<>>

:begin :instance.

neutrally := adv_word_le &
  [ STEM < "neutrally" >,
    SYNSEM.LOCAL.KEYS.KEY _neutrally_rel ].

:end :instance.


; <<>>

:begin :instance.

never_adv1 := vp_adv_pre_word_le &
  [ STEM < "never" >,
    SYNSEM.LOCAL.KEYS.KEY _never_rel ].

:end :instance.


; <<>>

:begin :instance.

never_adv2 := s_adv_pre_word_le &
  [ STEM < "never" >,
    SYNSEM.LOCAL.KEYS.KEY _never_rel ].

:end :instance.


; <<>>

:begin :instance.

nevertheless_adv1 := vp_adv_pre_word_le &
  [ STEM < "nevertheless" >,
    SYNSEM.LOCAL.KEYS.KEY _nevertheless_rel ].

:end :instance.


; <<>>

:begin :instance.

nevertheless_adv2 := s_adv_pre_word_le &
  [ STEM < "nevertheless" >,
    SYNSEM.LOCAL.KEYS.KEY _nevertheless_rel ].

:end :instance.


; <<>>

:begin :instance.

new_a1 := intrans_adj_le &
  [ STEM < "new" >,
    SYNSEM.LOCAL.KEYS.KEY _new_rel ].

:end :instance.


; <<>>
; MULTIKEY < "year" >

:begin :instance.

new_years_day := holiday_word_4mle2 &
  [ STEM < "new", "year", "s", "day" >,
    SYNSEM.LOCAL.KEYS.KEY.DAY 'new_years_day ].

:end :instance.


; <<>>
; MULTIKEY < "year" >

:begin :instance.

new_years_day_apos := holiday_word_3mle2 &
  [ STEM < "new", "year's", "day" >,
    SYNSEM.LOCAL.KEYS.KEY.DAY 'new_years_day ].

:end :instance.


; <<>>
; MULTIKEY < "years" >

:begin :instance.

new_years_day_2 := holiday_word_3mle2 &
  [ STEM < "new", "years", "day" >,
    SYNSEM.LOCAL.KEYS.KEY.DAY 'new_years_day ].

:end :instance.


; <<>>
; MULTIKEY < "year" >

:begin :instance.

new_years_day_3 := holiday_word_3mle2 &
  [ STEM < "new", "year", "s" >,
    SYNSEM.LOCAL.KEYS.KEY.DAY 'new_years_day ].

:end :instance.


; <<>>
; MULTIKEY < "new" >

:begin :instance.

new_years_day_3_apos := holiday_word_mle1 &
  [ STEM < "new", "year's" >,
    SYNSEM.LOCAL.KEYS.KEY.DAY 'new_years_day ].

:end :instance.


; <<>>
; MULTIKEY < "year" >

:begin :instance.

new_years_eve := holiday_word_4mle2 &
  [ STEM < "new", "year", "s", "eve" >,
    SYNSEM.LOCAL.KEYS.KEY.DAY 'new_years_eve ].

:end :instance.


; <<>>
; MULTIKEY < "year's" >

:begin :instance.

new_years_eve_apos := holiday_word_3mle2 &
  [ STEM < "new", "year's", "eve" >,
    SYNSEM.LOCAL.KEYS.KEY.DAY 'new_years_eve ].

:end :instance.


; <<>>
; MULTIKEY < "years" >

:begin :instance.

new_years_eve_2 := holiday_word_3mle2 &
  [ STEM < "new", "years", "eve" >,
    SYNSEM.LOCAL.KEYS.KEY.DAY 'new_years_eve ].

:end :instance.


; <<>>

:begin :instance.

newly := adv_word_le &
  [ STEM < "newly" >,
    SYNSEM.LOCAL.KEYS.KEY _newly_rel ].

:end :instance.


; <<>>

:begin :instance.

news_n1 := massn_le &
  [ STEM < "news" >,
    SYNSEM.LOCAL.KEYS.KEY _news_rel ].

:end :instance.


; <<>>

:begin :instance.

next_a1 := intrans_adj_le &
  [ STEM < "next" >,
    SYNSEM.LOCAL.KEYS.KEY _next_rel ].

:end :instance.


; <<>>

:begin :instance.

next_det := next_last_det_le &
  [ STEM < "next" >,
    SYNSEM.LOCAL.KEYS.ALTKEY _next_rel ].

:end :instance.


; <<>>
; MULTIKEY < "next" >

:begin :instance.

next_to := prep_mle1 &
  [ STEM < "next", "to" >,
    SYNSEM.LOCAL.KEYS.KEY _next_to_rel ].

:end :instance.


; <<>>

:begin :instance.

nice_a1 := intrans_adj_le &
  [ STEM < "nice" >,
    SYNSEM.LOCAL.KEYS.KEY _nice_rel ].

:end :instance.


; <<>>

:begin :instance.

nicely_adv1 := vp_adv_post_word_le &
  [ STEM < "nicely" >,
    SYNSEM.LOCAL.KEYS.KEY _nicely_rel ].

:end :instance.


; <<>>

:begin :instance.

nicest_a1 := superl_adj_le &
  [ STEM < "nicest" >,
    SYNSEM.LOCAL.KEYS.KEY _nice_rel ].

:end :instance.


; <<>>

:begin :instance.

night_sg_n1 := day_part_word_le &
  [ STEM < "night" >,
    SYNSEM.LOCAL.KEYS.KEY _night_rel & [ INST [ PNG png & [ PN 3sg*,
							    GEN neut* ],
						    DIVISIBLE - ] ] ].

:end :instance.


; <<>>

:begin :instance.

night_pl_n1 := day_part_word_le &
  [ STEM < "nights" >,
    SYNSEM.LOCAL.KEYS.KEY _night_rel & [ INST.PNG png & [ PN 3pl* ] ] ].

:end :instance.


; <<>>

:begin :instance.

night_time := mealtime_word_le &
  [ STEM < "night" >,
    SYNSEM.LOCAL.KEYS.KEY _night_time_rel ].

:end :instance.


; <<>>

:begin :instance.

Nikolaus_n1 := proper_le &
  [ STEM < "nikolaus" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Nikolaus ].

:end :instance.


; <<>>

:begin :instance.

nine := bare_unspecified_card_le & 
  [  STEM < "nine" >,
     SYNSEM.LOCAL [ CAT.HEAD intadj1,
		    KEYS.KEY.CONST_VALUE "9" ] ].

:end :instance.


; <<>>

:begin :instance.

nine_adjnoun := numadj_noun_word_le & 
  [ STEM < "nine" >,
    SYNSEM.LOCAL.KEYS.ALTKEY.CONST_VALUE "9" ].

:end :instance.


; <<>>

:begin :instance.

nine_hour := hour_word_le &
  [ STEM < "nine" >,
    SYNSEM.LOCAL.KEYS.KEY.HOUR "9" ].

:end :instance.


; <<>>

:begin :instance.

nineteen := bare_unspecified_card_le & 
  [  STEM < "nineteen" >,
     SYNSEM.LOCAL [ CAT.HEAD intadj2,
		    KEYS.KEY.CONST_VALUE "19" ] ].
:end :instance.


; <<>>
; MULTIKEY < "nineteen" >

:begin :instance.

nineteen_eightyfour := year_word_3mle1 &
  [ STEM < "nineteen", "eighty", "four" >,
    SYNSEM.LOCAL.KEYS.KEY.YEAR "1984" ].

:end :instance.


; <<>>

:begin :instance.

nineteen_eightyfour_2 := year_word_le &
  [ STEM < "1984" >,
    SYNSEM.LOCAL.KEYS.KEY.YEAR "1984" ].

:end :instance.


; <<>>
; MULTIKEY < "nineteen" >

:begin :instance.

nineteen_ninetyfive := year_word_3mle1 &
  [ STEM < "nineteen", "ninety", "five" >,
    SYNSEM.LOCAL.KEYS.KEY.YEAR "1995" ].

:end :instance.


; <<>>

:begin :instance.

nineteen_ninetyfive_2 := year_word_le &
  [ STEM < "1995" >,
    SYNSEM.LOCAL.KEYS.KEY.YEAR "1995" ].

:end :instance.


; <<>>
; MULTIKEY < "nineteen" >

:begin :instance.

nineteen_ninetyfour := year_word_3mle1 &
  [ STEM < "nineteen", "ninety", "four" >,
    SYNSEM.LOCAL.KEYS.KEY.YEAR "1994" ].

:end :instance.


; <<>>

:begin :instance.

nineteen_ninetyfour_2 := year_word_le &
  [ STEM < "1994" >,
    SYNSEM.LOCAL.KEYS.KEY.YEAR "1994" ].

:end :instance.


; <<>>
; MULTIKEY < "nineteen" >

:begin :instance.

nineteen_ninetyeight := year_word_3mle1 &
  [ STEM < "nineteen", "ninety", "eight" >,
    SYNSEM.LOCAL.KEYS.KEY.YEAR "1998" ].

:end :instance.


; <<>>

:begin :instance.

nineteen_ninetyeight_2 := year_word_le &
  [ STEM < "1998" >,
    SYNSEM.LOCAL.KEYS.KEY.YEAR "1998" ].

:end :instance.


; <<>>
; MULTIKEY < "nineteen" >

:begin :instance.

nineteen_ninetynine := year_word_3mle1 &
  [ STEM < "nineteen", "ninety", "nine" >,
    SYNSEM.LOCAL.KEYS.KEY.YEAR "1999" ].

:end :instance.


; <<>>

:begin :instance.

nineteen_ninetynine_2 := year_word_le &
  [ STEM < "1999" >,
    SYNSEM.LOCAL.KEYS.KEY.YEAR "1999" ].

:end :instance.


; <<>>
; MULTIKEY < "nineteen" >

:begin :instance.

nineteen_ninetysix := year_word_3mle1 &
  [ STEM < "nineteen", "ninety", "six" >,
    SYNSEM.LOCAL.KEYS.KEY.YEAR "1996" ].

:end :instance.


; <<>>

:begin :instance.

nineteen_ninetysix_2 := year_word_le &
  [ STEM < "1996" >,
    SYNSEM.LOCAL.KEYS.KEY.YEAR "1996" ].

:end :instance.


; <<>>
; MULTIKEY < "nineteen" >

:begin :instance.

nineteen_ninetyseven := year_word_3mle1 &
  [ STEM < "nineteen", "ninety", "seven" >,
    SYNSEM.LOCAL.KEYS.KEY.YEAR "1997" ].

:end :instance.


; <<>>

:begin :instance.

nineteen_ninetyseven_2 := year_word_le &
  [ STEM < "1997" >,
    SYNSEM.LOCAL.KEYS.KEY.YEAR "1997" ].

:end :instance.


; <<>>
; MULTIKEY < "nineteen" >

:begin :instance.

nineteen_ninetythree := year_word_3mle1 &
  [ STEM < "nineteen", "ninety", "three" >,
    SYNSEM.LOCAL.KEYS.KEY.YEAR "1993" ].

:end :instance.


; <<>>

:begin :instance.

nineteen_ninetythree_2 := year_word_le &
  [ STEM < "1993" >,
    SYNSEM.LOCAL.KEYS.KEY.YEAR "1993" ].

:end :instance.


; <<>>

:begin :instance.

nineteenth := ordinal_adj_le &
  [ STEM < "nineteenth" >,
    SYNSEM.LOCAL.KEYS.KEY.ORD "19" ].

:end :instance.


; <<>>

:begin :instance.

nineteenth_day := day_of_month_le &
  [ STEM < "nineteenth" >,
    SYNSEM.LOCAL.KEYS.KEY.DAY "19" ].

:end :instance.


; <<>>

:begin :instance.

ninety_w_comps := complemented_unspecified_card_le & 
  [ STEM < "ninety" >,
    SYNSEM.LOCAL [ CAT [ HEAD intadj2,
			 VAL.COMPS.FIRST.LOCAL.CAT.HEAD intadj1 ],
		   KEYS.KEY.CONST_VALUE "90" ] ].

:end :instance.


; <<>>

:begin :instance.

ninety := bare_unspecified_card_le & 
  [  STEM < "ninety" >,
     SYNSEM.LOCAL [ CAT.HEAD intadj2,
		    KEYS.KEY.CONST_VALUE "90" ] ].
:end :instance.


; <<>>
; MULTIKEY < "five" >

:begin :instance.

ninetyfive_year := year_word_mle2 &
  [ STEM < "ninety", "five" >,
    SYNSEM.LOCAL.KEYS.KEY.YEAR "1995" ].

:end :instance.


; <<>>
; MULTIKEY < "four" >

:begin :instance.

ninetyfour_year := year_word_mle2 &
  [ STEM < "ninety", "four" >,
    SYNSEM.LOCAL.KEYS.KEY.YEAR "1994" ].

:end :instance.


; <<>>
; MULTIKEY < "eight" >

:begin :instance.

ninetyeight_year := year_word_mle2 &
  [ STEM < "ninety", "eight" >,
    SYNSEM.LOCAL.KEYS.KEY.YEAR "1998" ].

:end :instance.


; <<>>
; MULTIKEY < "nine" >

:begin :instance.

ninetynine_year := year_word_mle2 &
  [ STEM < "ninety", "nine" >,
    SYNSEM.LOCAL.KEYS.KEY.YEAR "1999" ].

:end :instance.


; <<>>
; MULTIKEY < "six" >

:begin :instance.

ninetysix_year := year_word_mle2 &
  [ STEM < "ninety", "six" >,
    SYNSEM.LOCAL.KEYS.KEY.YEAR "1996" ].

:end :instance.


; <<>>
; MULTIKEY < "seven" >

:begin :instance.

ninetyseven_year := year_word_mle2 &
  [ STEM < "ninety", "seven" >,
    SYNSEM.LOCAL.KEYS.KEY.YEAR "1997" ].

:end :instance.


; <<>>
; MULTIKEY < "three" >

:begin :instance.

ninetythree_year := year_word_mle2 &
  [ STEM < "ninety", "three" >,
    SYNSEM.LOCAL.KEYS.KEY.YEAR "1993" ].

:end :instance.


; <<>>

:begin :instance.

ninth := ordinal_adj_le &
  [ STEM < "ninth" >,
    SYNSEM.LOCAL.KEYS.KEY.ORD "9" ].

:end :instance.


; <<>>

:begin :instance.

ninth_day := day_of_month_le &
  [ STEM < "ninth" >,
    SYNSEM.LOCAL.KEYS.KEY.DAY "9" ].

:end :instance.


; <<>>

:begin :instance.

no_det := det_le &
  [ STEM < "no" >,
    SYNSEM.LOCAL.KEYS.KEY _no_det_rel ].

:end :instance.


; <<>>

:begin :instance.

no_disc_root := disc_adv_le &
  [ STEM < "no" >,
    SYNSEM.LOCAL [ CAT.POSTHEAD -,
		   KEYS.KEY excl_rel & [ EXCL 'no ] ] ].

:end :instance.


; <<>>
; MULTIKEY < "good" >

:begin :instance.

no_good_root := disc_adv_mle2 &
  [ STEM < "no", "good" >,
    SYNSEM.LOCAL.KEYS.KEY excl_rel & [ EXCL 'no_good ] ].

:end :instance.


; <<>>
; MULTIKEY < "no" >

:begin :instance.

no_one := generic_pro_mle1 &
  [ STEM < "no", "one" >,
    SYNSEM.LOCAL.KEYS [ KEY _person_rel,
			ALTKEY _no_det_rel ] ].
:end :instance.


; <<>>

:begin :instance.

noble_a1 := intrans_adj_le &
  [ STEM < "noble" >,
    SYNSEM.LOCAL.KEYS.KEY _noble_rel ].

:end :instance.


; <<>>

:begin :instance.

nobody := generic_pro_le &
  [ STEM < "nobody" >,
    SYNSEM.LOCAL.KEYS [ KEY _person_rel,
			ALTKEY _no_det_rel ] ].
:end :instance.


; <<>>

:begin :instance.

noise_n1 := massn_le &
  [ STEM < "noise" >,
    SYNSEM.LOCAL.KEYS.KEY _noise_rel ].

:end :instance.


; <<>>

:begin :instance.

noise_n2 := intr_noun_word_le &
  [ STEM < "noise" >,
    SYNSEM.LOCAL.KEYS.KEY _noise_rel ].

:end :instance.


; <<>>

:begin :instance.

noisily := adv_word_le &
  [ STEM < "noisily" >,
    SYNSEM.LOCAL.KEYS.KEY _noisily_rel ].

:end :instance.


; <<>>

:begin :instance.

noisy_a1 := intrans_adj_le &
  [ STEM < "noisy" >,
    SYNSEM.LOCAL.KEYS.KEY _noisy_rel ].

:end :instance.


; <<>>

:begin :instance.

none := part_noun_le &
  [ STEM < "none" >,
    SYNSEM.LOCAL.KEYS.ALTKEY _no_det_rel ].

:end :instance.


; <<>>

:begin :instance.

nonsense_n1 := massn_le &
  [ STEM < "nonsense" >,
    SYNSEM.LOCAL.KEYS.KEY _nonsense_rel ].

:end :instance.


; <<>>

:begin :instance.

noon := hour_word_le &
  [ STEM < "noon" >,
    SYNSEM.LOCAL.KEYS.KEY.HOUR "12" ].

:end :instance.


; <<>>

:begin :instance.

noontime := hour_word_le &
  [ STEM < "noontime" >,
    SYNSEM.LOCAL.KEYS.KEY.HOUR "12" ].

:end :instance.


; <<>>

:begin :instance.

nope_disc_root := disc_adv_le &
  [ STEM < "nope" >,
    SYNSEM.LOCAL.KEYS.KEY excl_rel & [ EXCL 'nope ] ].

:end :instance.


; <<>>

:begin :instance.

nor_conj := coord_c_le &
  [ STEM < "nor" >,
    SYNSEM.LOCAL [ CONJ complex-conj & 
			[ CHEAD.LEFT < neither > ],
		   CONT.LISZT <! _nor_rel !>,
		   AGR.PNG png & [ PN 3pl ] ] ].

:end :instance.


; <<>>

:begin :instance.

normal_a1 := intrans_adj_le &
  [ STEM < "normal" >,
    SYNSEM.LOCAL.KEYS.KEY _normal_rel ].

:end :instance.


; <<>>

:begin :instance.

normally_adv1 := vp_adv_pre_word_le &
  [ STEM < "normally" >,
    SYNSEM.LOCAL.KEYS.KEY _normally_rel ].

:end :instance.


; <<>>

:begin :instance.

normally_adv2 := s_adv_pre_word_le &
  [ STEM < "normally" >,
    SYNSEM.LOCAL.KEYS.KEY _normally_rel ].

:end :instance.


; <<>>
; MULTIKEY < "Pole" >

:begin :instance.

North_Pole_n1 := intr_noun_word_mle1 &
  [ STEM < "north", "pole" >,
    SYNSEM.LOCAL.KEYS.KEY named_rel & [ NAMED 'North_Pole ] ].

:end :instance.


; <<>>

:begin :instance.

not := not_le &
  [ STEM < "not" > ].

:end :instance.


; <<>>

:begin :instance.

note_down_v1 := mv_prep_particle_np_le &
  [ STEM < "note" >,
    SYNSEM.LOCAL.KEYS [ KEY _note_down_rel,
			--COMPKEY _down_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

note_n1 := noun_ppof_word_le &
  [ STEM < "note" >,
    SYNSEM.LOCAL.KEYS.KEY _note_rel ].

:end :instance.


; <<>>

:begin :instance.

note_v1 := mv_np_trans_le &
  [ STEM < "note" >,
    SYNSEM.LOCAL.KEYS.KEY _note_v_rel ].

:end :instance.


; <<>>

:begin :instance.

nothing := generic_pro_le &
  [ STEM < "nothing" >,
    SYNSEM.LOCAL.KEYS [ KEY _thing_rel,
			ALTKEY _no_det_rel ] ].
:end :instance.


; <<>>

:begin :instance.

notice_v1 := mv_np_trans_le &
  [ STEM < "notice" >,
    SYNSEM.LOCAL.KEYS.KEY _notice_rel ].

:end :instance.


; <<>>

:begin :instance.

notice_v2 := mv_cp_non_trans_le &
  [ STEM < "notice" >,
    SYNSEM.LOCAL.KEYS.KEY _notice2_rel ].

:end :instance.


; <<>>

:begin :instance.

notice_v3 := mv_unerg_le &
  [ STEM < "notice" >,
    SYNSEM.LOCAL.KEYS.KEY _notice_rel ].

:end :instance.


; <<>>

:begin :instance.

notice_v4 := mv_sorb_le &
  [ STEM < "notice" >,
    SYNSEM.LOCAL.KEYS.KEY _notice2_rel ].

:end :instance.


; <<>>

:begin :instance.

november := month_word_le &
  [ STEM < "november" >,
    SYNSEM.LOCAL.KEYS.KEY.MONTH 'nov ].

:end :instance.


; <<>>

:begin :instance.

november_2 := month_year_word_le &
  [ STEM < "november" >,
    SYNSEM.LOCAL.KEYS.KEY.MONTH 'nov ].

:end :instance.


; <<>>

:begin :instance.

now_adv := np_adv_le &
  [ STEM < "now" >,
    SYNSEM.LOCAL.CONT.LISZT <! _time_rel, _this_dem_rel !> ].

:end :instance.


; <<>>

:begin :instance.

now_adv_vm := int_vp_adv_post_word_le &
  [ STEM < "now" >,
    SYNSEM.LOCAL.KEYS.KEY _now_rel ].

:end :instance.


; <<>>

:begin :instance.

number_n1 := noun_ppof_word_le &
  [ STEM < "number" >,
    SYNSEM.LOCAL.KEYS.KEY _number_n_rel ].

:end :instance.


; <<>>

:begin :instance.

Nuremberg_n1 := proper_le &
  [ STEM < "nuremberg" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Nuremberg ].

:end :instance.


; <<>>

:begin :instance.

oclock := minute_word_le &
  [ STEM < "o'clock" >,
    SYNSEM.LOCAL [ CAT.POSTHEAD +,
		   KEYS.KEY.MINUTE "00" ] ].

:end :instance.


; <<>>
; MULTIKEY < "clock" >

:begin :instance.

oclock_2 := minute_word_mle2 &
  [ STEM < "o", "clock" >,
    SYNSEM.LOCAL [ CAT.POSTHEAD +,
		   KEYS.KEY.MINUTE "00" ] ].

:end :instance.


; <<>>

:begin :instance.

object_n1 := intr_noun_word_le &
  [ STEM < "object" >,
    SYNSEM.LOCAL.KEYS.KEY _object_n_rel ].

:end :instance.


; <<>>

:begin :instance.

object_to_v1 := mv_empty_prep*_intrans_le &
  [ STEM < "object" >,
    SYNSEM.LOCAL.KEYS [ KEY _object_v_rel,
			--COMPKEY _to_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

objection_n1 := intr_noun_word_le &
  [ STEM < "objection" >,
    SYNSEM.LOCAL.KEYS.KEY _objection_rel ].

:end :instance.


; <<>>

:begin :instance.

obligation_n1 := intr_noun_word_le &
  [ STEM < "obligation" >,
    SYNSEM.LOCAL.KEYS.KEY _obligation_rel ].

:end :instance.


; <<>>

:begin :instance.

obligatory_a1 := intrans_adj_le &
  [ STEM < "obligatory" >,
    SYNSEM.LOCAL.KEYS.KEY _obligatory_rel ].

:end :instance.


; <<>>

:begin :instance.

oblige_v1 := mv_np*_trans_le &
  [ STEM < "oblige" >,
    SYNSEM.LOCAL.KEYS.KEY _oblige_tr_rel ].

:end :instance.


; <<>>

:begin :instance.

oblige_v2 := mv_obj_equi_le &
  [ STEM < "oblige" >,
    SYNSEM.LOCAL.KEYS.KEY _oblige_rel ].

:end :instance.


; <<>>

:begin :instance.

obliged_a1 := intrans_adj_le &
  [ STEM < "obliged" >,
    SYNSEM.LOCAL.KEYS.KEY _obliged_rel ].

:end :instance.


; <<>>

:begin :instance.

observe_v1 := mv_np_trans_le &
  [ STEM < "observe" >,
    SYNSEM.LOCAL.KEYS.KEY _observe_rel ].

:end :instance.


; <<>>

:begin :instance.

observe_v2 := mv_cp_non_trans_le &
  [ STEM < "observe" >,
    SYNSEM.LOCAL.KEYS.KEY _observe2_rel ].

:end :instance.


; <<>>

:begin :instance.

observe_v3 := mv_sorb_le &
  [ STEM < "observe" >,
    SYNSEM.LOCAL.KEYS.KEY _observe2_rel ].

:end :instance.


; <<>>

:begin :instance.

observed_v3 := mv_sorb_pass_le &
  [ STEM < "observed" >,
    SYNSEM.LOCAL.KEYS.KEY _observe2_rel ].

:end :instance.


; <<>>

:begin :instance.

obvious_a1 := intrans_adj_le &
  [ STEM < "obvious" >,
    SYNSEM.LOCAL.KEYS.KEY _obvious_rel ].

:end :instance.


; <<>>

:begin :instance.

obvious_a2 := reg_adj_that_cp_le &
  [ STEM < "obvious" >,
    SYNSEM.LOCAL.KEYS.KEY _obvious_varg_rel ].

:end :instance.


; <<>>

:begin :instance.

obviously_adv1 := vp_adv_pre_word_le &
  [ STEM < "obviously" >,
    SYNSEM.LOCAL.KEYS.KEY _obviously_rel ].

:end :instance.


; <<>>

:begin :instance.

obviously_adv2 := s_adv_pre_word_le &
  [ STEM < "obviously" >,
    SYNSEM.LOCAL.KEYS.KEY _obviously_rel ].

:end :instance.


; <<>>

:begin :instance.

occasion_n1 := intr_noun_word_le &
  [ STEM < "occasion" >,
    SYNSEM.LOCAL.KEYS.KEY _occasion_rel ].

:end :instance.


; <<>>

:begin :instance.

occasionally_adv1 := vp_adv_pre_word_le &
  [ STEM < "occasionally" >,
    SYNSEM.LOCAL.KEYS.KEY _occasionally_rel ].

:end :instance.


; <<>>

:begin :instance.

occasionally_adv2 := s_adv_pre_word_le &
  [ STEM < "occasionally" >,
    SYNSEM.LOCAL.KEYS.KEY _occasionally_rel ].

:end :instance.


; <<>>

:begin :instance.

occupied_a1 := intrans_adj_le &
  [ STEM < "occupied" >,
    SYNSEM.LOCAL.KEYS.KEY _occupied_rel ].

:end :instance.


; <<>>

:begin :instance.

occupy_v2 := mv_np_trans_le &
  [ STEM < "occupy" >,
    SYNSEM.LOCAL.KEYS.KEY _occupy_rel ].

:end :instance.


; <<>>

:begin :instance.

occur_to_v1 := mv_empty_prep_intrans_le &
  [ STEM < "occur" >,
    SYNSEM.LOCAL.KEYS [ KEY _occur_to_rel,
			--COMPKEY _to_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

october := month_word_le &
  [ STEM < "october" >,
    SYNSEM.LOCAL.KEYS.KEY.MONTH 'oct ].

:end :instance.


; <<>>

:begin :instance.

october_2 := month_year_word_le &
  [ STEM < "october" >,
    SYNSEM.LOCAL.KEYS.KEY.MONTH 'oct ].

:end :instance.


; <<>>

:begin :instance.

possessive_of := poss_of_le &
  [ STEM < "of" > ].

:end :instance.


; <<>>

:begin :instance.

of_p := prep_nomod_of_le &
  [ STEM < "of" >,
    SYNSEM.LOCAL.KEYS.KEY _of_rel_a ].

:end :instance.


; <<>>

:begin :instance.

of_choice_p := prep_le &
  [ STEM < "of" >,
    SYNSEM.LOCAL [ CAT.HEAD.MOD < [ LOCAL.CAT.HEAD noun ] >,
		   KEYS [ KEY _of_rel,
			  --COMPKEY _choice_rel ] ] ].

:end :instance.


; <<>>
; MULTIKEY < "course" >

:begin :instance.

of_course_root := disc_adv_mle2 &
  [ STEM < "of", "course" >,
    SYNSEM.LOCAL.KEYS.KEY excl_rel & [ EXCL 'of_course ] ].

:end :instance.


; <<>>
; MULTIKEY < "course" >

:begin :instance.

of_course_a1 := vp_adv_post_word_mle2 &
  [ STEM < "of", "course" >,
    SYNSEM.LOCAL.KEYS.KEY _of_course_rel ].

:end :instance.


; <<>>

:begin :instance.

off := reg_prep_le &
  [ STEM < "off" >,
    SYNSEM.LOCAL.KEYS.KEY _off_rel_a ].

:end :instance.


; <<>>

:begin :instance.

off_adv := pp_le &
  [ STEM < "off" >,
    SYNSEM.LOCAL.KEYS.KEY _off_adv_rel ].

:end :instance.


; <<>>

:begin :instance.

offer_n1 := intr_noun_word_le &
  [ STEM < "offer" >,
    SYNSEM.LOCAL.KEYS.KEY _offer_n_rel ].

:end :instance.


; <<>>

:begin :instance.

offer_v1 := mv_ditrans_le &
  [ STEM < "offer" >,
    SYNSEM.LOCAL.KEYS.KEY _offer_v_rel ].

:end :instance.


; <<>>

:begin :instance.

offer_v2 := mv_np_trans_le &
  [ STEM < "offer" >,
    SYNSEM.LOCAL.KEYS.KEY _offer_v_rel ].

:end :instance.


; <<>>

:begin :instance.

offer_v3 := mv_subj_equi_le &
  [ STEM < "offer" >,
    SYNSEM.LOCAL.KEYS.KEY _offer_v2_rel ].

:end :instance.


; <<>>

:begin :instance.

office1 := intr_noun_word_le &
  [ STEM < "office" >,
    SYNSEM.LOCAL.KEYS.KEY _office_rel ].

:end :instance.


; <<>>

:begin :instance.

official_a1 := intrans_adj_le &
  [ STEM < "official" >,
    SYNSEM.LOCAL.KEYS.KEY _official_rel ].

:end :instance.


; <<>>

:begin :instance.

officially := adv_word_le &
  [ STEM < "officially" >,
    SYNSEM.LOCAL.KEYS.KEY _officially_rel ].

:end :instance.


; <<>>

:begin :instance.

often_adv1 := adv_word_le &
  [ STEM < "often" >,
    SYNSEM.LOCAL.KEYS.KEY _often_rel ].

:end :instance.


; <<>>

:begin :instance.

oh_root := disc_adv_le &
  [ STEM < "oh" >,
    SYNSEM.LOCAL.KEYS.KEY excl_rel & [ EXCL 'oh ] ].

:end :instance.


; <<>>

:begin :instance.

oh := bare_unspecified_card_le & 
  [  STEM < "oh" >,
     SYNSEM.LOCAL [ CAT.HEAD intadj1,
		    KEYS.KEY.CONST_VALUE "0" ] ].
:end :instance.


; <<>>
; MULTIKEY < "oh" >

:begin :instance.

oh_dear_root := disc_adv_mle1 &
  [ STEM < "oh", "dear" >,
    SYNSEM.LOCAL.KEYS.KEY excl_rel & [ EXCL 'oh_dear ] ].

:end :instance.


; <<>>

:begin :instance.

oil_n1 := massn_le &
  [ STEM < "oil" >,
    SYNSEM.LOCAL.KEYS.KEY _oil_n_rel ].

:end :instance.


; <<>>

:begin :instance.

ok_a1 := intrans_adj_le &
  [ STEM < "ok" >,
    SYNSEM.LOCAL.KEYS.KEY _okay_accept_rel ].

:end :instance.


; <<>>

:begin :instance.

okay_a1 := intrans_adj_le &
  [ STEM < "okay" >,
    SYNSEM.LOCAL.KEYS.KEY _okay_accept_rel ].

:end :instance.


; <<>>

:begin :instance.

okay_root := disc_adv_le &
  [ STEM < "okay" >,
    SYNSEM.LOCAL [ CAT.POSTHEAD -,
		   KEYS.KEY excl_rel & [ EXCL 'okay ] ] ].

:end :instance.


; <<>>

:begin :instance.

okay_adj_expl := reg_adj_atrans_le &
  [ STEM < "okay" >,
    SYNSEM.LOCAL.KEYS.KEY _okay_accept2_rel ].

:end :instance.


; <<>>

:begin :instance.

old_a1 := intrans_adj_le &
  [ STEM < "old" >,
    SYNSEM.LOCAL.KEYS.KEY _old_rel ].

:end :instance.


; <<>>

:begin :instance.

older := comp_adj_le &
  [ STEM < "older" >,
    SYNSEM.LOCAL.KEYS.KEY _old_rel ].

:end :instance.



; <<>>

:begin :instance.

olympic_a1 := intrans_adj_le &
  [ STEM < "olympic" >,
    SYNSEM.LOCAL.KEYS.KEY _olympic_rel ].

:end :instance.


; <<>>

:begin :instance.

on := reg_prep_le &
  [ STEM < "on" >,
    SYNSEM.LOCAL.KEYS.KEY _on_rel_a ].

:end :instance.


; <<>>

:begin :instance.

on_day := temp_prep_le &
  [ STEM < "on" >,
    SYNSEM.LOCAL.KEYS [ KEY _on_temp_rel,
			--COMPKEY day_rel ] ].

:end :instance.


; <<>>
; MULTIKEY < "basis" >

:begin :instance.

on_the_basis_of := prep_4mle3 &
  [ STEM < "on", "the", "basis", "of" >,
    SYNSEM.LOCAL.KEYS.KEY _on_the_basis_of_rel ].

:end :instance.


; <<>>
; MULTIKEY < "other" >

:begin :instance.

on_the_other_hand_root := disc_adv_4mle3 &
  [ STEM < "on", "the", "other", "hand" >,
    SYNSEM.LOCAL.KEYS.KEY excl_rel & [ EXCL 'on_the_other_hand ] ].

:end :instance.


; <<>>
; MULTIKEY < "part" >

:begin :instance.

on_the_part_of := prep_4mle3 &
  [ STEM < "on", "the", "part", "of" >,
    SYNSEM.LOCAL.KEYS.KEY _on_the_part_of_rel ].

:end :instance.


; <<>>
; MULTIKEY < "time" >

:begin :instance.

on-time_a1 := irreg_attr_adj_mle2 &
  [ STEM < "on", "time" >,
    SYNSEM.LOCAL.KEYS.KEY _on_time_adj_rel ].

:end :instance.


; <<>>
; MULTIKEY < "time" >

:begin :instance.

on-time_a2 := irreg_pred_intrans_adj_mle2 &
  [ STEM < "on", "time" >,
    SYNSEM.LOCAL.KEYS.KEY _on_time_adj_rel ].

:end :instance.


; <<>>
; MULTIKEY < "vacation" >

:begin :instance.

on_vacation := pp_idiom_mle2 &
  [ STEM < "on", "vacation" >,
    SYNSEM.LOCAL.KEYS [ KEY _on_rel,
                        ALTKEY _vacation_rel ] ].

:end :instance.


; <<>>
; MULTIKEY < "time" >

:begin :instance.

on_time := vp_adv_post_word_mle2 &
  [ STEM < "on", "time" >,
    SYNSEM.LOCAL.KEYS.KEY _on_time_rel ].

:end :instance.


; <<>>

:begin :instance.

once_adv1 := vp_adv_post_word_le &
  [ STEM < "once" >,
    SYNSEM.LOCAL.KEYS.KEY _once_rel ].

:end :instance.


; <<>>

:begin :instance.

once_conj := subconj_le &
  [ STEM < "once" >,
    SYNSEM.LOCAL.KEYS.KEY _once_subord_rel ].

:end :instance.


; <<>>
; MULTIKEY < "once" >

:begin :instance.

once_again := vp_adv_post_word_mle1 &
  [ STEM < "once", "again" >,
    SYNSEM.LOCAL.KEYS.KEY _once_again_rel ].

:end :instance.


; <<>>

:begin :instance.

one_pro := pers_pro_le &
  [ STEM < "one" >,
    SYNSEM.LOCAL.KEYS.KEY.INST [ PNG png & [ PN 3sg*,
					     GEN andro1* ],
				 PRONTYPE std_3 ] ].
:end :instance.


; <<>>

:begin :instance.

one_n1 := intr_noun_word_le &
  [ STEM < "one" >,
    SYNSEM.LOCAL.KEYS.KEY _one_n_rel ].

:end :instance.


; <<>>

:begin :instance.

one_hour := hour_word_le &
  [ STEM < "one" >,
    SYNSEM.LOCAL.KEYS.KEY.HOUR "1" ].

:end :instance.


; <<>>

:begin :instance.

one_determiner := pdet_one_le &
  [ STEM < "one" > ].

:end :instance.


; <<>>

:begin :instance.

one_num_determiner := pdet_one_le &
  [ STEM < "1" > ].

:end :instance.


; <<>>

:begin :instance.

one_sing := one_sing_le & 
  [ STEM < "one" > ].

:end :instance.


; <<>>

:begin :instance.

one_plur := one_plur_le & 
  [ STEM < "one" >].

:end :instance.


; <<>>

:begin :instance.

a_one_plur := one_plur_le & 
  [ STEM < "a" >].

:end :instance.



; <<>>
; MULTIKEY < "another" >

:begin :instance.

one_another := pers_pro_mle2 &
  [ STEM < "one", "another" >,
    SYNSEM.LOCAL [ CAT.HEAD.CASE acc,
		   KEYS.KEY.INST.PNG png & [ PN 3sg*,
					     GEN andro1* ] ] ].
:end :instance.


; <<>>

:begin :instance.

only_adv1 := vp_aux_adv_word_le &
  [ STEM < "only" >,
    SYNSEM.LOCAL.KEYS.KEY _only_rel ].

:end :instance.


; <<>>

:begin :instance.

only_adv2 := s_adv_pre_word_le &
  [ STEM < "only" >,
    SYNSEM.LOCAL.KEYS.KEY _only_rel ].

:end :instance.


; <<>>

:begin :instance.

only_deg := degree_spec_le &
  [ STEM < "only" >,
    SYNSEM.LOCAL.KEYS.KEY _only_deg_rel ].

:end :instance.


; <<>>

:begin :instance.

only_a1 := intrans_adj_le &
  [ STEM < "only" >,
    SYNSEM.LOCAL.KEYS.KEY _only_i_rel ].

:end :instance.


; <<>>

:begin :instance.

onto := prep_nomod_le &
  [ STEM < "onto" >,
    SYNSEM.LOCAL.KEYS.KEY _onto_rel ].

:end :instance.


; <<>>

:begin :instance.

oops_root := disc_adv_le &
  [ STEM < "oops" >,
    SYNSEM.LOCAL.KEYS.KEY excl_rel & [ EXCL 'oops ] ].

:end :instance.


; <<>>

:begin :instance.

open_a1 := intrans_adj_le &
  [ STEM < "open" >,
    SYNSEM.LOCAL.KEYS.KEY _open_rel_a ].

:end :instance.


; <<>>

:begin :instance.

open_v1 := mv_np_trans_le &
  [ STEM < "open" >,
    SYNSEM.LOCAL.KEYS.KEY _open_v_rel ].

:end :instance.


; <<>>

:begin :instance.

open_v2 := mv_unacc_le &
  [ STEM < "open" >,
    SYNSEM.LOCAL.KEYS.KEY _open_und_rel ].

:end :instance.


; <<>>
; MULTIKEY < "open" >

:begin :instance.

open_ended_a1 := irreg_attr_adj_mle1 &
  [ STEM < "open", "ended" >,
    SYNSEM.LOCAL.KEYS.KEY _open_ended_rel ].

:end :instance.


; <<>>
; MULTIKEY < "ended" >

:begin :instance.

open_ended_a2 := irreg_pred_intrans_adj_mle2 &
  [ STEM < "open", "ended" >,
    SYNSEM.LOCAL.KEYS.KEY _open_ended_rel ].

:end :instance.


; <<>>

:begin :instance.

opening_n1 := intr_noun_word_le &
  [ STEM < "opening" >,
    SYNSEM.LOCAL.KEYS.KEY _opening_n_rel ].

:end :instance.


; <<>>

:begin :instance.

operate_v1 := mv_unerg_le &
  [ STEM < "operate" >,
    SYNSEM.LOCAL.KEYS.KEY _operate_rel ].

:end :instance.


; <<>>

:begin :instance.

operation_n1 := intr_noun_word_le &
  [ STEM < "operation" >,
    SYNSEM.LOCAL.KEYS.KEY _operation_rel ].

:end :instance.


; <<>>

:begin :instance.

opinion_n1 := intr_noun_word_le &
  [ STEM < "opinion" >,
    SYNSEM.LOCAL.KEYS.KEY _opinion_rel ].

:end :instance.


; <<>>

:begin :instance.

opportune_a1 := intrans_adj_le &
  [ STEM < "opportune" >,
    SYNSEM.LOCAL.KEYS.KEY _opportune_rel ].

:end :instance.


; <<>>

:begin :instance.

opportunely := vp_adv_post_word_le &
  [ STEM < "opportunely" >,
    SYNSEM.LOCAL.KEYS.KEY _opportunely_rel ].

:end :instance.


; <<>>

:begin :instance.

opportunity_n1 := intr_noun_word_le &
  [ STEM < "opportunity" >,
    SYNSEM.LOCAL.KEYS.KEY _opportunity_rel ].

:end :instance.


; <<>>

:begin :instance.

opposite_a1 := intrans_adj_le &
  [ STEM < "opposite" >,
    SYNSEM.LOCAL.KEYS.KEY _opposite_adj_rel ].

:end :instance.


; <<>>

:begin :instance.

opposite_n1 := intr_noun_word_le &
  [ STEM < "opposite" >,
    SYNSEM.LOCAL.KEYS.KEY _opposite_n_rel ].

:end :instance.


; <<>>

:begin :instance.

opposition_n1 := massn_le &
  [ STEM < "opposition" >,
    SYNSEM.LOCAL.KEYS.KEY _opposition_rel ].

:end :instance.


; <<>>

:begin :instance.

optimal_a1 := intrans_adj_le &
  [ STEM < "optimal" >,
    SYNSEM.LOCAL.KEYS.KEY _optimal_rel ].

:end :instance.


; <<>>

:begin :instance.

optimally := adv_word_le &
  [ STEM < "optimally" >,
    SYNSEM.LOCAL.KEYS.KEY _optimally_rel ].

:end :instance.


; <<>>

:begin :instance.

option_n1 := intr_noun_word_le &
  [ STEM < "option" >,
    SYNSEM.LOCAL.KEYS.KEY _option_rel ].

:end :instance.


; <<>>

:begin :instance.

or_conj_1 := coord_c_le &
  [ STEM < "or" >,
    SYNSEM.LOCAL [ CAT.VAL.COMPS.FIRST.LOCAL.AGR #agr,
                   AGR #agr,
                   CONJ complex-conj & [ CHEAD.LEFT < cnil, cnil > ],
		   CONT.LISZT <! _or_rel !> ] ].  

:end :instance.


; <<>>

:begin :instance.

or_conj_2 := coord_c_le &
  [ STEM < "or" >,
    SYNSEM.LOCAL [ CAT.VAL.COMPS.FIRST.LOCAL.AGR #agr,
                   AGR #agr,
                   CONJ complex-conj & [ CHEAD.LEFT < either > ],
		   CONT.LISZT <! _or_rel !> ] ].

:end :instance.


; <<>>

:begin :instance.

order_n1 := intr_noun_word_le &
  [ STEM < "order" >,
    SYNSEM.LOCAL.KEYS.KEY _order_rel ].

:end :instance.


; <<>>

:begin :instance.

order_v1 := mv_np*_trans_le &
  [ STEM < "order" >,
    SYNSEM.LOCAL.KEYS.KEY _order_v_rel ].

:end :instance.


; <<>>

:begin :instance.

ordinary_a1 := intrans_adj_le &
  [ STEM < "ordinary" >,
    SYNSEM.LOCAL.KEYS.KEY _ordinary_rel ].

:end :instance.


; <<>>

:begin :instance.

organization_n1 := intr_noun_word_le &
  [ STEM < "organization" >,
    SYNSEM.LOCAL.KEYS.KEY _organization_rel ].

:end :instance.


; <<>>

:begin :instance.

organizational_a1 := intrans_adj_le &
  [ STEM < "organizational" >,
    SYNSEM.LOCAL.KEYS.KEY _organizational_rel ].

:end :instance.


; <<>>

:begin :instance.

organize_v1 := mv_np_trans_le &
  [ STEM < "organize" >,
    SYNSEM.LOCAL.KEYS.KEY _organize_rel ].

:end :instance.


; <<>>

:begin :instance.

original_a1 := intrans_adj_le &
  [ STEM < "original" >,
    SYNSEM.LOCAL.KEYS.KEY _original_rel ].

:end :instance.


; <<>>

:begin :instance.

originally_adv1 := vp_adv_pre_word_le &
  [ STEM < "originally" >,
    SYNSEM.LOCAL.KEYS.KEY _originally_rel ].

:end :instance.


; <<>>

:begin :instance.

originally_adv2 := s_adv_pre_word_le &
  [ STEM < "originally" >,
    SYNSEM.LOCAL.KEYS.KEY _originally_rel ].

:end :instance.


; <<>>

:begin :instance.

Osnabrueck_n1 := proper_le &
  [ STEM < "osnabrueck" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Osnabrueck ].

:end :instance.


; <<>>

:begin :instance.

other_a1 := intrans_adj_le &
  [ STEM < "other" >,
    SYNSEM.LOCAL.KEYS.KEY _other_rel ].

:end :instance.


; <<>>

:begin :instance.

otherwise_adv1 := vp_adv_pre_word_le &
  [ STEM < "otherwise" >,
    SYNSEM.LOCAL.KEYS.KEY _otherwise_rel ].

:end :instance.


; <<>>

:begin :instance.

otherwise_adv2 := s_adv_pre_word_le &
  [ STEM < "otherwise" >,
    SYNSEM.LOCAL.KEYS.KEY _otherwise_rel ].

:end :instance.


; <<>>

:begin :instance.

otherwise_adv3 := vp_adv_post_word_le &
  [ STEM < "otherwise" >,
    SYNSEM.LOCAL.KEYS.KEY _otherwise_rel ].

:end :instance.


; <<>>

:begin :instance.

ouch_root := disc_adv_le &
  [ STEM < "ouch" >,
    SYNSEM.LOCAL.KEYS.KEY excl_rel & [ EXCL 'ouch ] ].

:end :instance.


; <<>>

:begin :instance.

ought_aux_pos := ought_pos_le & 
  [ STEM < "ought" >,
    SYNSEM.LOCAL [ CAT.HEAD.TENSE present*,
		   KEYS.KEY _ought_rel ] ].

:end :instance.


; <<>>

:begin :instance.

ought_aux_neg_1 := ought_neg_le &
  [ STEM < "oughtn't" >,
    SYNSEM.LOCAL [ CAT.HEAD.TENSE present*,
		   KEYS.KEY _ought_rel ] ].

:end :instance.


; <<>>
; MULTIKEY < "oughtn" >

:begin :instance.

ought_aux_neg_2 := ought_neg_mle1 &
  [ STEM < "oughtn", "t" >,
    SYNSEM.LOCAL [ CAT.HEAD.TENSE present*,
		   KEYS.KEY _ought_rel ] ].

:end :instance.


; <<>>

:begin :instance.

our := poss_le &
  [ STEM < "our" >,
    SYNSEM.LOCAL.CONT.LISZT <! relation, relation,
			       [ INST [ PNG png & [ PN 1pl* ],
					PRONTYPE std_1pl ] ] !> ].

:end :instance.


; <<>>

:begin :instance.

ours := poss_pro_le &
  [ STEM < "ours" >,
    SYNSEM.LOCAL.CONT.LISZT.LIST.FIRST.INST.PNG png & [ PN 1pl* ] ].

:end :instance.


; <<>>

:begin :instance.

ourselves := refl_pro_le &
  [ STEM < "ourselves" >,
    SYNSEM.LOCAL.KEYS.KEY.INST.PNG png & [ PN 1pl* ] ].

:end :instance.


; <<>>

:begin :instance.

out_of := prep_pp_le &
  [ STEM < "out" >,
    SYNSEM.LOCAL [ CAT.VAL.COMPS.FIRST.OPT -,
	           KEYS [ KEY _out_rel_a,
                   	  --COMPKEY _of_rel_s ] ] ].

:end :instance.


; <<>>

:begin :instance.

opposite := prep_nomod_le &
  [ STEM < "opposite" >,
    SYNSEM.LOCAL.KEYS.KEY _opposite_rel ].

:end :instance.


; <<>>

:begin :instance.

outright := vp_adv_word_le &
  [ STEM < "outright" >,
    SYNSEM.LOCAL.KEYS.KEY _outright_adv_rel ].

:end :instance.


; <<>>

:begin :instance.

outright_deg := degree_spec_le &
  [ STEM < "outright" >,
    SYNSEM.LOCAL.KEYS.KEY _outright_deg_rel ].

:end :instance.


; <<>>

:begin :instance.

outright_a1 := intrans_adj_le &
  [ STEM < "outright" >,
    SYNSEM.LOCAL.KEYS.KEY _outright_rel ].

:end :instance.


; <<>>

:begin :instance.

outside := reg_prep_le &
  [ STEM < "outside" >,
    SYNSEM.LOCAL.KEYS.KEY _outside_rel ].

:end :instance.


; <<>>

:begin :instance.

outside_pp := pp_le &
  [ STEM < "outside" >,
    SYNSEM.LOCAL.KEYS.KEY _outside_adv_rel ].

:end :instance.


; <<>>

:begin :instance.

outside_a1 := intrans_adj_le &
  [ STEM < "outside" >,
    SYNSEM.LOCAL.KEYS.KEY _outside_adj_rel ].

:end :instance.


; <<>>

:begin :instance.

outstanding_a1 := intrans_adj_le &
  [ STEM < "outstanding" >,
    SYNSEM.LOCAL.KEYS.KEY _outstanding_rel ].

:end :instance.


; <<>>

:begin :instance.

over := reg_prep_le &
  [ STEM < "over" >,
    SYNSEM.LOCAL.KEYS.KEY _over_rel_a ].

:end :instance.


; <<>>
; MULTIKEY < "over" >

:begin :instance.

over_with_a1 := irreg_pred_intrans_adj_mle1 &
  [ STEM < "over", "with" >,
    SYNSEM.LOCAL [ CAT.HEAD.PRD +,
		   KEYS.KEY _over_with_rel ] ].

:end :instance.


; <<>>

:begin :instance.

over_a1 := pred_intrans_adj_le &
  [ STEM < "over" >,
    SYNSEM.LOCAL.KEYS.KEY _over_adj_rel ].

:end :instance.


; <<>>

:begin :instance.

overhear_v1 := mv_np_trans_le &
  [ STEM < "overhear" >,
    SYNSEM.LOCAL.KEYS.KEY _overhear_rel ].

:end :instance.


; <<>>

:begin :instance.

overhear_v2 := mv_cp_non_trans_le &
  [ STEM < "overhear" >,
    SYNSEM.LOCAL.KEYS.KEY _overhear2_rel ].

:end :instance.


; <<>>

:begin :instance.

overhear_v3 := mv_sorb_le &
  [ STEM < "overhear" >,
    SYNSEM.LOCAL.KEYS.KEY _overhear2_rel ].

:end :instance.


; <<>>

:begin :instance.

overheard_v3 := mv_sorb_pass_le &
  [ STEM < "overheard" >,
    SYNSEM.LOCAL.KEYS.KEY _overhear2_rel ].

:end :instance.


; <<>>

:begin :instance.

overlap_v1 := mv_empty_prep_intrans_le &
  [ STEM < "overlap" >,
    SYNSEM.LOCAL.KEYS [ KEY _overlap_with_rel,
			--COMPKEY _with_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

overlap_v2 := mv_unerg_le &
  [ STEM < "overlap" >,
    SYNSEM.LOCAL.KEYS.KEY _overlap_rel ].

:end :instance.


; <<>>

:begin :instance.

overlook_v1 := mv_np_trans_le &
  [ STEM < "overlook" >,
    SYNSEM.LOCAL.KEYS.KEY _overlook_rel ].

:end :instance.


; <<>>

:begin :instance.

owe_v1 := mv_ditrans_le &
  [ STEM < "owe" >,
    SYNSEM.LOCAL.KEYS.KEY _owe_v_rel ].

:end :instance.


; <<>>

:begin :instance.

own_v1 := mv_np_trans_le &
  [ STEM < "own" >,
    SYNSEM.LOCAL.KEYS.KEY _own_v_rel ].

:end :instance.


; <<>>

:begin :instance.

own_a1 := intrans_adj_le &
  [ STEM < "own" >,
    SYNSEM.LOCAL.KEYS.KEY _own_isect_rel ].

:end :instance.


; <<>>

:begin :instance.

pack_v1 := mv_np*_trans_le &
  [ STEM < "pack" >,
    SYNSEM.LOCAL.KEYS.KEY _pack_v_rel ].

:end :instance.


; <<>>

:begin :instance.

packed_a1 := intrans_adj_le &
  [ STEM < "packed" >,
    SYNSEM.LOCAL.KEYS.KEY _packed_rel ].

:end :instance.


; <<>>
; MULTIKEY < "palo" >

:begin :instance.

Paloalto := proper_mle1 &
  [ STEM < "palo", "alto" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'palo_alto ].

:end :instance.


; <<>>

:begin :instance.

paper_n1 := intr_noun_word_le &
  [ STEM < "paper" >,
    SYNSEM.LOCAL.KEYS.KEY _paper_rel ].

:end :instance.


; <<>>

:begin :instance.

pardon_v1 := mv_np_trans_le &
  [ STEM < "pardon" >,
    SYNSEM.LOCAL.KEYS.KEY _pardon_v_rel ].

:end :instance.


; <<>>

:begin :instance.

parent_n1 := noun_ppof_word_le &
  [ STEM < "parent" >,
    SYNSEM.LOCAL.KEYS.KEY _parent_rel ].

:end :instance.


; <<>>

:begin :instance.

Paris_n1 := proper_le &
  [ STEM < "paris" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Paris ].

:end :instance.


; <<>>

:begin :instance.

parish_n1 := intr_noun_word_le &
  [ STEM < "parish" >,
    SYNSEM.LOCAL.KEYS.KEY _parish_rel ].

:end :instance.


; <<>>

:begin :instance.

parkhotel_n3 := noun_npcomp_word_le &
  [ STEM < "parkhotel" >,
    SYNSEM.LOCAL.KEYS.KEY named_rel & [ NAMED 'Parkhotel ] ].

:end :instance.


; <<>>

:begin :instance.

parking_n1 := massn_le &
  [ STEM < "parking" >,
    SYNSEM.LOCAL.KEYS.KEY _parking_rel ].

:end :instance.


; <<>>

:begin :instance.

part_n1 := noun_ppof_word_le &
  [ STEM < "part" >,
    SYNSEM.LOCAL.KEYS.KEY _part_rel ].

:end :instance.


; <<>>

:begin :instance.

partially_adv1 := vp_adv_pre_word_le &
  [ STEM < "partially" >,
    SYNSEM.LOCAL.KEYS.KEY _partially_rel ].

:end :instance.


; <<>>

:begin :instance.

partially_adv2 := s_adv_pre_word_le &
  [ STEM < "partially" >,
    SYNSEM.LOCAL.KEYS.KEY _partially_rel ].

:end :instance.


; <<>>

:begin :instance.

participant_n1 := intr_noun_word_le &
  [ STEM < "participant" >,
    SYNSEM.LOCAL.KEYS.KEY _participant_rel ].

:end :instance.


; <<>>

:begin :instance.

participate_in_v1 := mv_empty_prep*_intrans_le &
  [ STEM < "participate" >,
    SYNSEM.LOCAL.KEYS [ KEY _participate_in_rel,
			--COMPKEY _in_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

particular_a1 := intrans_adj_le &
  [ STEM < "particular" >,
    SYNSEM.LOCAL.KEYS.KEY _particular_rel ].

:end :instance.


; <<>>

:begin :instance.

particularly_adv1 := vp_adv_pre_word_le &
  [ STEM < "particularly" >,
    SYNSEM.LOCAL.KEYS.KEY _particularly_rel ].

:end :instance.


; <<>>

:begin :instance.

particularly_adv2 := s_adv_pre_word_le &
  [ STEM < "particularly" >,
    SYNSEM.LOCAL.KEYS.KEY _particularly_rel ].

:end :instance.


; <<>>

:begin :instance.

partly_deg := degree_spec_le &
  [ STEM < "partly" >,
    SYNSEM.LOCAL.KEYS.KEY _partly_deg_rel ].

:end :instance.


; <<>>

:begin :instance.

partly_adv1 := vp_adv_pre_word_le &
  [ STEM < "partly" >,
    SYNSEM.LOCAL.KEYS.KEY _partly_rel ].

:end :instance.


; <<>>

:begin :instance.

partly_adv2 := s_adv_pre_word_le &
  [ STEM < "partly" >,
    SYNSEM.LOCAL.KEYS.KEY _partly_rel ].

:end :instance.


; <<>>

:begin :instance.

partner_n1 := intr_noun_word_le &
  [ STEM < "partner" >,
    SYNSEM.LOCAL.KEYS.KEY _partner_rel ].

:end :instance.


; <<>>

:begin :instance.

party_n1 := intr_noun_word_le &
  [ STEM < "party" >,
    SYNSEM.LOCAL.KEYS.KEY _party_n_rel ].

:end :instance.


; <<>>

:begin :instance.

pass_on_v1 := mv_prep_particle_np_le &
  [ STEM < "pass" >,
    SYNSEM.LOCAL.KEYS [ KEY _pass_on_rel,
			--COMPKEY _on_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

pass_v1 := mv_np_trans_le &
  [ STEM < "pass" >,
    SYNSEM.LOCAL.KEYS.KEY _pass_rel  ].

:end :instance.


; <<>>

:begin :instance.

past_hour := hour_prep_word_le &
  [ STEM < "past" >,
    SYNSEM.LOCAL.KEYS.KEY _after_hour_rel ].

:end :instance.


; <<>>

:begin :instance.

Pat := proper_le &
  [ STEM < "pat" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'pat ].

:end :instance.


; <<>>

:begin :instance.

patch_n1 := intr_noun_word_le &
  [ STEM < "patch" >,
    SYNSEM.LOCAL.KEYS.KEY _patch_rel ].

:end :instance.


; <<>>

:begin :instance.

path_n1 := intr_noun_word_le &
  [ STEM < "path" >,
    SYNSEM.LOCAL.KEYS.KEY _path_rel ].

:end :instance.


; <<>>

:begin :instance.

patience_n1 := massn_le &
  [ STEM < "patience" >,
    SYNSEM.LOCAL.KEYS.KEY _patience_rel ].

:end :instance.


; <<>>

:begin :instance.

pause_n1 := intr_noun_word_le &
  [ STEM < "pause" >,
    SYNSEM.LOCAL.KEYS.KEY _pause_n_rel ].

:end :instance.


; <<>>

:begin :instance.

pause_v1 := mv_unerg_le &
  [ STEM < "pause" >,
    SYNSEM.LOCAL.KEYS.KEY _pause_v_rel ].

:end :instance.


; <<>>

:begin :instance.

pavilion_n1 := intr_noun_word_le &
  [ STEM < "pavilion" >,
    SYNSEM.LOCAL.KEYS.KEY _pavilion_rel ].

:end :instance.


; <<>>

:begin :instance.

pay_v1 := mv_ditrans_opt_le &
  [ STEM < "pay" >,
    SYNSEM.LOCAL.KEYS.KEY _pay_rel ].

:end :instance.


; <<>>

:begin :instance.

pay_v2 := mv_empty_prep*_trans*_le &
  [ STEM < "pay" >,
    SYNSEM.LOCAL.KEYS [ KEY _pay_for_rel,
			--OCOMPKEY _for_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

peaceful_a1 := intrans_adj_le &
  [ STEM < "peaceful" >,
    SYNSEM.LOCAL.KEYS.KEY _peaceful_rel ].

:end :instance.


; <<>>

:begin :instance.

peculiar_a1 := intrans_adj_le &
  [ STEM < "peculiar" >,
    SYNSEM.LOCAL.KEYS.KEY _peculiar_rel ].

:end :instance.


; <<>>

:begin :instance.

peer_v1 := mv_prep_intrans_le &
  [ STEM < "peer" >,
    SYNSEM.LOCAL.KEYS [ KEY _peer_v_rel,
			--COMPKEY dir_rel ] ].

:end :instance.


; <<>>

:begin :instance.

pen_n1 := intr_noun_word_le &
  [ STEM < "pen" >,
    SYNSEM.LOCAL.KEYS.KEY _pen_rel ].

:end :instance.


; <<>>

:begin :instance.

pencil_v1 := mv_np_trans_le &
  [ STEM < "pencil" >,
    SYNSEM.LOCAL.KEYS.KEY _pencil_v_rel ].

:end :instance.


; <<>>

:begin :instance.

pencil_in_v1 := mv_prep_particle_np_le &
  [ STEM < "pencil" >,
    SYNSEM.LOCAL.KEYS [ KEY _pencil_in_rel,
			--COMPKEY _in_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

pending_a1 := intrans_adj_le &
  [ STEM < "pending" >,
    SYNSEM.LOCAL.KEYS.KEY _pending_rel ].

:end :instance.


; <<>>

:begin :instance.

pension_n1 := intr_noun_word_le &
  [ STEM < "pension" >,
    SYNSEM.LOCAL.KEYS.KEY _pension_rel ].

:end :instance.


; <<>>

:begin :instance.

people_n1 := plurn_le &
  [ STEM < "people" >,
    SYNSEM.LOCAL.KEYS.KEY _people_rel ].

:end :instance.


; <<>>

:begin :instance.

per_p := prep_nbar_comp_le &
  [ STEM < "per" >,
    SYNSEM.LOCAL.KEYS.KEY _per_rel ].

:end :instance.


; <<>>

:begin :instance.

perfect_a1 := intrans_adj_le &
  [ STEM < "perfect" >,
    SYNSEM.LOCAL.KEYS.KEY _perfect_adj_rel ].

:end :instance.


; <<>>

:begin :instance.

perfectly_adv1 := adv_post_word_le &
  [ STEM < "perfectly" >,
    SYNSEM.LOCAL.KEYS.KEY _perfectly_rel ].

:end :instance.


; <<>>

:begin :instance.

perfectly_deg := degree_spec_le &
  [ STEM < "perfectly" >,
    SYNSEM.LOCAL.KEYS.KEY _perfectly_grad_rel ].

:end :instance.


; <<>>

:begin :instance.

performance_n1 := intr_noun_word_le &
  [ STEM < "performance" >,
    SYNSEM.LOCAL.KEYS.KEY _performance_rel ].

:end :instance.


; <<>>

:begin :instance.

perhaps_adv1 := vp_adv_post_word_le &
  [ STEM < "perhaps" >,
    SYNSEM.LOCAL.KEYS.KEY _perhaps_rel ].

:end :instance.


; <<>>

:begin :instance.

perhaps_adv2 := s_adv_pre_word_nospec_le &
  [ STEM < "perhaps" >,
    SYNSEM.LOCAL.KEYS.KEY _perhaps_rel ].

:end :instance.


; <<>>

:begin :instance.

period_n1 := intr_noun_word_le &
  [ STEM < "period" >,
    SYNSEM.LOCAL.KEYS.KEY _period_rel ].

:end :instance.


; <<>>

:begin :instance.

permanent_a1 := intrans_adj_le &
  [ STEM < "permanent" >,
    SYNSEM.LOCAL.KEYS.KEY _permanent_rel ].

:end :instance.


; <<>>

:begin :instance.

permeate_into_v1 := mv_empty_prep_intrans_le &
  [ STEM < "permeate" >,
    SYNSEM.LOCAL.KEYS [ KEY _permeate_into_rel,
			--COMPKEY _into_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

permeate_v1 := mv_np_trans_le &
  [ STEM < "permeate" >,
    SYNSEM.LOCAL.KEYS.KEY _permeate_rel ].

:end :instance.


; <<>>

:begin :instance.

permit_v1 := mv_obj_equi_le &
  [ STEM < "permit" >,
    SYNSEM.LOCAL.KEYS.KEY _permit_v_rel ].

:end :instance.


; <<>>

:begin :instance.

person_n1 := intr_noun_word_le &
  [ STEM < "person" >,
    SYNSEM.LOCAL.KEYS.KEY _person_rel ].

:end :instance.


; <<>>

:begin :instance.

personal_a1 := intrans_adj_le &
  [ STEM < "personal" >,
    SYNSEM.LOCAL.KEYS.KEY _personal_rel ].

:end :instance.


; <<>>

:begin :instance.

personally_adv1 := vp_adv_pre_word_le &
  [ STEM < "personally" >,
    SYNSEM.LOCAL.KEYS.KEY _personally_rel ].

:end :instance.


; <<>>

:begin :instance.

personally_adv2 := s_adv_pre_word_le &
  [ STEM < "personally" >,
    SYNSEM.LOCAL.KEYS.KEY _personally_rel ].

:end :instance.


; <<>>

:begin :instance.

persuade1 := mv_obj_equi_le &
  [ STEM < "persuade" >,
    SYNSEM.LOCAL.KEYS.KEY _persuade_rel ].

:end :instance.


; <<>>

:begin :instance.

persuade_v1 := mv_np_trans_cp_prop_le &
  [ STEM < "persuade" >,
    SYNSEM.LOCAL.KEYS.KEY _persuade_tr_rel ].

:end :instance.


; <<>>

:begin :instance.

Petz_n1 := proper_le &
  [ STEM < "petz" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Petz ].

:end :instance.


; <<>>

:begin :instance.

Pfaff_n1 := proper_le &
  [ STEM < "pfaff" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Pfaff ].

:end :instance.


; <<>>

:begin :instance.

phd_n1 := intr_noun_word_le &
  [ STEM < "phd" >,
    SYNSEM.LOCAL.KEYS.KEY _phd_rel ].

:end :instance.


; <<>>

:begin :instance.

pheasant_n1 := intr_noun_word_le &
  [ STEM < "pheasant" >,
    SYNSEM.LOCAL.KEYS.KEY _pheasant_rel ].

:end :instance.


; <<>>

:begin :instance.

phone_n1 := intr_noun_word_le &
  [ STEM < "phone" >,
    SYNSEM.LOCAL.KEYS.KEY _phone_rel ].

:end :instance.


; <<>>

:begin :instance.

photo_n1 := intr_noun_word_le &
  [ STEM < "photo" >,
    SYNSEM.LOCAL.KEYS.KEY _photograph_rel ].

:end :instance.


; <<>>

:begin :instance.

photocopier_n1 := intr_noun_word_le &
  [ STEM < "photocopier" >,
    SYNSEM.LOCAL.KEYS.KEY _photocopier_rel ].

:end :instance.


; <<>>

:begin :instance.

photograph_n1 := intr_noun_word_le &
  [ STEM < "photograph" >,
    SYNSEM.LOCAL.KEYS.KEY _photograph_rel ].

:end :instance.


; <<>>

:begin :instance.

piano_n1 := intr_noun_word_le &
  [ STEM < "piano" >,
    SYNSEM.LOCAL.KEYS.KEY _piano_rel ].

:end :instance.


; <<>>

:begin :instance.

pick_v1 := mv_np_trans_le &
  [ STEM < "pick" >,
    SYNSEM.LOCAL.KEYS.KEY _pick_v_rel ].

:end :instance.


; <<>>

:begin :instance.

pick_up_v1 := mv_prep_particle_np_le &
  [ STEM < "pick" >,
    SYNSEM.LOCAL.KEYS [ KEY _pick_up_rel,
			--COMPKEY _up_rel ] ].

:end :instance.


; <<>>

:begin :instance.

piece_n1 := intr_noun_word_le &
  [ STEM < "piece" >,
    SYNSEM.LOCAL.KEYS.KEY _piece_rel ].

:end :instance.


; <<>>

:begin :instance.

pig_n1 := intr_noun_word_le &
  [ STEM < "pig" >,
    SYNSEM.LOCAL.KEYS.KEY _pig_rel ].

:end :instance.


; <<>>

:begin :instance.

Pillau_n1 := proper_le &
  [ STEM < "pillau" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Pillau ].

:end :instance.


; <<>>

:begin :instance.

Pittsburgh_n1 := proper_le &
  [ STEM < "pittsburgh" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Pittsburgh ].

:end :instance.


; <<>>

:begin :instance.

pity_n1 := intr_noun_word_le &
  [ STEM < "pity" >,
    SYNSEM.LOCAL.KEYS.KEY _pity_n_rel ].

:end :instance.


; <<>>

:begin :instance.

place_n1 := intr_noun_word_le &
  [ STEM < "place" >,
    SYNSEM.LOCAL.KEYS.KEY _place_rel ].

:end :instance.


; <<>>

:begin :instance.

plain_a1 := intrans_adj_le &
  [ STEM < "plain" >,
    SYNSEM.LOCAL.KEYS.KEY _plain_adj_rel ].

:end :instance.


; <<>>

:begin :instance.

plainly_adv1 := vp_adv_pre_word_le &
  [ STEM < "plainly" >,
    SYNSEM.LOCAL.KEYS.KEY _plainly_adj_rel ].

:end :instance.


; <<>>

:begin :instance.

plainly_adv2 := s_adv_pre_word_le &
  [ STEM < "plainly" >,
    SYNSEM.LOCAL.KEYS.KEY _plainly_adj_rel ].

:end :instance.


; <<>>

:begin :instance.

plan_for_v2 := mv_empty_prep_intrans_le &
  [ STEM < "plan" >,
    SYNSEM.LOCAL.KEYS [ KEY _plan_for_rel,
			--COMPKEY _for_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

plan_n1 := intr_noun_word_le &
  [ STEM < "plan" >,
    SYNSEM.LOCAL.KEYS.KEY _plan_n_rel ].

:end :instance.


; <<>>

:begin :instance.

plan_on_v2 := mv_empty_prep_intrans_le &
  [ STEM < "plan" >,
    SYNSEM.LOCAL.KEYS [ KEY _plan_on_rel,
 			--OCOMPKEY _on_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

plan_v1 := mv_np*_trans_le &
  [ STEM < "plan" >,
    SYNSEM.LOCAL.KEYS.KEY _plan_v_rel ].

:end :instance.


; <<>>

:begin :instance.

plan_v2 := mv_subj_equi_le &
  [ STEM < "plan" >,
    SYNSEM.LOCAL.KEYS.KEY _plan_v2_rel ].

:end :instance.


; <<>>

:begin :instance.

plane_n1 := intr_noun_word_le &
  [ STEM < "plane" >,
    SYNSEM.LOCAL.KEYS.KEY _plane_rel ].

:end :instance.


; <<>>

:begin :instance.

planning_n1 := intr_noun_word_le &
  [ STEM < "planning" >,
    SYNSEM.LOCAL.KEYS.KEY _planning_rel ].

:end :instance.


; <<>>

:begin :instance.

platform_n1 := intr_noun_word_le &
  [ STEM < "platform" >,
    SYNSEM.LOCAL.KEYS.KEY _platform_rel ].

:end :instance.


; <<>>

:begin :instance.

Plauen_n1 := proper_le &
  [ STEM < "plauen" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Plauen ].

:end :instance.


; <<>>

:begin :instance.

play_n1 := intr_noun_word_le &
  [ STEM < "play" >,
    SYNSEM.LOCAL.KEYS.KEY _play_n_rel ].

:end :instance.


; <<>>

:begin :instance.

play_v1 := mv_np*_trans_le &
  [ STEM < "play" >,
    SYNSEM.LOCAL.KEYS.KEY _play_v_rel ].

:end :instance.


; <<>>

:begin :instance.

play_v2 := mv_obj_equi_prd_le &
  [ STEM < "play" >,
    SYNSEM.LOCAL.KEYS.KEY _play2_rel ].

:end :instance.


; <<>>

:begin :instance.

pleasant_a1 := intrans_adj_le &
  [ STEM < "pleasant" >,
    SYNSEM.LOCAL.KEYS.KEY _pleasant_rel ].

:end :instance.


; <<>>

:begin :instance.

pleasantly := adv_word_le &
  [ STEM < "pleasantly" >,
    SYNSEM.LOCAL.KEYS.KEY _pleasantly_rel ].

:end :instance.


; <<>>

:begin :instance.

please_adv := vp_adv_word_le &
  [ STEM < "please" >,
    SYNSEM.LOCAL.KEYS.KEY _please_adv_rel ].

:end :instance.


; <<>>

:begin :instance.

please_v1 := mv_np_trans_le &
  [ STEM < "please" >,
    SYNSEM.LOCAL.KEYS.KEY _please_rel ].

:end :instance.


; <<>>

:begin :instance.

pleased_a1 := intrans_adj_le &
  [ STEM < "pleased" >,
    SYNSEM.LOCAL.KEYS.KEY _pleased_rel ].

:end :instance.


; <<>>

:begin :instance.

pleasure_n1 := intr_noun_word_le &
  [ STEM < "pleasure" >,
    SYNSEM.LOCAL.KEYS.KEY _pleasure_rel ].

:end :instance.


; <<>>

:begin :instance.

plus_conj := coord_c_le &
  [ STEM < "plus" >,
    SYNSEM.LOCAL [ CONJ complex-conj & [ CHEAD.LEFT < cnil > ],
		   CONT.LISZT <! _plus_rel !>,
                   AGR.PNG png & [ PN 3pl ] ] ].
:end :instance.


; <<>>

:begin :instance.

pm_temp := am_pm_word_le &
  [ STEM < "p.m." >,
    SYNSEM.LOCAL.KEYS.KEY _pm_rel ].

:end :instance.


; <<>>

:begin :instance.

pm_temp_2 := am_pm_word_le &
  [ STEM < "pm" >,
    SYNSEM.LOCAL.KEYS.KEY _pm_rel ].

:end :instance.


; <<>>
; MULTIKEY < "m" >

:begin :instance.

pm_temp_3 := am_pm_word_mle2 &
  [ STEM < "p", "m" >,
    SYNSEM.LOCAL.KEYS.KEY _pm_rel ].

:end :instance.


; <<>>
; MULTIKEY < "$m" >

:begin :instance.

pm_temp_4 := am_pm_word_mle2 &
  [ STEM < "$p", "$m" >,
    SYNSEM.LOCAL.KEYS.KEY _pm_rel ].

:end :instance.


; <<>>

:begin :instance.

point_n1 := intr_noun_word_le &
  [ STEM < "point" >,
    SYNSEM.LOCAL.KEYS.KEY _point_rel ].

:end :instance.


; <<>>

:begin :instance.

pointless_a1 := intrans_adj_le &
  [ STEM < "pointless" >,
    SYNSEM.LOCAL.KEYS.KEY _pointless_rel ].

:end :instance.


; <<>>

:begin :instance.

pool_n1 := intr_noun_word_le &
  [ STEM < "pool" >,
    SYNSEM.LOCAL.KEYS.KEY _pool_rel ].

:end :instance.


; <<>>

:begin :instance.

poor_a1 := intrans_adj_le &
  [ STEM < "poor" >,
    SYNSEM.LOCAL.KEYS.KEY _poor_rel ].

:end :instance.


; <<>>

:begin :instance.

portable_a1 := intrans_adj_le &
  [ STEM < "portable" >,
    SYNSEM.LOCAL.KEYS.KEY _portable_rel ].

:end :instance.


; <<>>

:begin :instance.

position_n1 := intr_noun_word_le &
  [ STEM < "position" >,
    SYNSEM.LOCAL.KEYS.KEY _position_n_rel ].

:end :instance.


; <<>>

:begin :instance.

positive_a1 := intrans_adj_le &
  [ STEM < "positive" >,
    SYNSEM.LOCAL.KEYS.KEY _positive_rel ].

:end :instance.


; <<>>

:begin :instance.

possibility_n1 := noun_ppof_word_le &
  [ STEM < "possibility" >,
    SYNSEM.LOCAL.KEYS.KEY _possibility_rel ].

:end :instance.


; <<>>

:begin :instance.

possible_a1 := intrans_adj_le &
  [ STEM < "possible" >,
    SYNSEM.LOCAL.KEYS.KEY _possible_rel ].

:end :instance.


; <<>>

:begin :instance.

possible_a2 := reg_adj_atrans_le &
  [ STEM < "possible" >,
    SYNSEM.LOCAL.KEYS.KEY _possible2_rel ].

:end :instance.


; <<>>

:begin :instance.

possibly_adv1 := vp_adv_pre_word_le &
  [ STEM < "possibly" >,
    SYNSEM.LOCAL.KEYS.KEY _possibly_rel ].

:end :instance.


; <<>>

:begin :instance.

possibly_adv2 := s_adv_pre_word_le &
  [ STEM < "possibly" >,
    SYNSEM.LOCAL.KEYS.KEY _possibly_rel ].

:end :instance.


; <<>>
; MULTIKEY < "post" >

:begin :instance.

post-meeting_a1 := intrans_adj_mle &
  [ STEM < "post", "meeting" >,
    SYNSEM.LOCAL.KEYS.KEY _post-meeting_rel ].

:end :instance.


; <<>>
; MULTIKEY < "post" >

:begin :instance.

post-mortem_n1 := intr_noun_word_mle1 &
  [ STEM < "post", "mortem" >,
    SYNSEM.LOCAL.KEYS.KEY _postmortem_rel ].

:end :instance.


; <<>>
; MULTIKEY < "post" >

:begin :instance.

post-trip_a1 := intrans_adj_mle &
  [ STEM < "post", "trip" >,
    SYNSEM.LOCAL.KEYS.KEY _post_trip_rel ].

:end :instance.


; <<>>

:begin :instance.

poster_n1 := intr_noun_word_le &
  [ STEM < "poster" >,
    SYNSEM.LOCAL.KEYS.KEY _poster_rel ].

:end :instance.


; <<>>

:begin :instance.

posterior_a1 := intrans_adj_le &
  [ STEM < "posterior" >,
    SYNSEM.LOCAL.KEYS.KEY _posterior_rel ].

:end :instance.


; <<>>

:begin :instance.

postpone_v1 := mv_np_trans_le &
  [ STEM < "postpone" >,
    SYNSEM.LOCAL.KEYS.KEY _postpone_rel ].

:end :instance.


; <<>>

:begin :instance.

potential_a1 := intrans_adj_le &
  [ STEM < "potential" >,
    SYNSEM.LOCAL.KEYS.KEY _potential_rel ].

:end :instance.


; <<>>

:begin :instance.

pound_n1 := intr_noun_word_le &
  [ STEM < "pound" >,
    SYNSEM.LOCAL.KEYS.KEY _pound_rel ].

:end :instance.


; <<>>

:begin :instance.

pour_v1 := mv_np_trans_le &
  [ STEM < "pour" >,
    SYNSEM.LOCAL.KEYS.KEY _pour_rel ].

:end :instance.


; <<>>

:begin :instance.

pour_down_v1 := mv_particle_le &
  [ STEM < "pour" >,
    SYNSEM.LOCAL.KEYS [ KEY _pour_down_rel,
			--COMPKEY _down_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

power_n1 := massn_le &
  [ STEM < "power" >,
    SYNSEM.LOCAL.KEYS.KEY _power_rel ].

:end :instance.


; <<>>

:begin :instance.

practicable_a1 := intrans_adj_le &
  [ STEM < "practicable" >,
    SYNSEM.LOCAL.KEYS.KEY _practicable_rel ].

:end :instance.


; <<>>

:begin :instance.

practical_a1 := intrans_adj_le &
  [ STEM < "practical" >,
    SYNSEM.LOCAL.KEYS.KEY _practical_rel ].

:end :instance.


; <<>>

:begin :instance.

practically_adv1 := vp_adv_pre_word_le &
  [ STEM < "practically" >,
    SYNSEM.LOCAL.KEYS.KEY _practically_rel ].

:end :instance.


; <<>>

:begin :instance.

practically_adv2 := s_adv_pre_word_le &
  [ STEM < "practically" >,
    SYNSEM.LOCAL.KEYS.KEY _practically_rel ].

:end :instance.


; <<>>

:begin :instance.

practice_n1 := intr_noun_word_le &
  [ STEM < "practice" >,
    SYNSEM.LOCAL.KEYS.KEY _practice_rel ].

:end :instance.


; <<>>

:begin :instance.

practice_upon_v1 := mv_empty_prep_intrans_le &
  [ STEM < "practice" >,
    SYNSEM.LOCAL.KEYS [ KEY _practice_upon_rel,
			--COMPKEY _upon_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

practice_v1 := mv_np*_trans_le &
  [ STEM < "practice" >,
    SYNSEM.LOCAL.KEYS.KEY _practice_v_rel ].

:end :instance.


; <<>>

:begin :instance.

practise_upon_v1 := mv_empty_prep_intrans_le &
  [ STEM < "practise" >,
    SYNSEM.LOCAL.KEYS [ KEY _practice_upon_rel,
			--COMPKEY _upon_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

practise_v1 := mv_np*_trans_le &
  [ STEM < "practise" >,
    SYNSEM.LOCAL.KEYS.KEY _practice_v_rel ].

:end :instance.


; <<>>

:begin :instance.

prayer_n1 := intr_noun_word_le &
  [ STEM < "prayer" >,
    SYNSEM.LOCAL.KEYS.KEY _prayer_rel ].

:end :instance.


; <<>>

:begin :instance.

prayer_n2 := massn_le &
  [ STEM < "prayer" >,
    SYNSEM.LOCAL.KEYS.KEY _prayer_rel ].

:end :instance.


; <<>>

:begin :instance.

precautionarily := adv_word_le &
  [ STEM < "precautionarily" >,
    SYNSEM.LOCAL.KEYS.KEY _precautionarily_rel ].

:end :instance.


; <<>>

:begin :instance.

precautionary_a1 := intrans_adj_le &
  [ STEM < "precautionary" >,
    SYNSEM.LOCAL.KEYS.KEY _precautionary_rel ].

:end :instance.


; <<>>

:begin :instance.

precise_a1 := intrans_adj_le &
  [ STEM < "precise" >,
    SYNSEM.LOCAL.KEYS.KEY _precise_rel ].

:end :instance.


; <<>>

:begin :instance.

precisely := adv_word_le &
  [ STEM < "precisely" >,
    SYNSEM.LOCAL.KEYS.KEY _precisely_adv_rel ].

:end :instance.


; <<>>

:begin :instance.

precisely_deg := degree_spec_le &
  [ STEM < "precisely" >,
    SYNSEM.LOCAL.KEYS.KEY _precisely_rel ].

:end :instance.


; <<>>

:begin :instance.

prefer_v1 := mv_np_trans_le &
  [ STEM < "prefer" >,
    SYNSEM.LOCAL.KEYS.KEY _prefer_rel ].

:end :instance.


; <<>>

:begin :instance.

prefer_v2 := mv_expl_obj_cp_le &
  [ STEM < "prefer" >,
    SYNSEM.LOCAL.KEYS.KEY _prefer2_rel ].

:end :instance.


; <<>>

:begin :instance.

prefer_v3 := mv_subj_equi_le &
  [ STEM < "prefer" >,
    SYNSEM.LOCAL.KEYS.KEY _prefer2_rel ].

:end :instance.


; <<>>

:begin :instance.

prefer_v4 := mv_prep_intrans_event_le &
  [ STEM < "prefer" >,
    SYNSEM.LOCAL.KEYS [ KEY _prefer_loc_rel,
			--COMPKEY loc_abstr_rel ] ].

:end :instance.


; <<>>

:begin :instance.

preferable_a1 := intrans_adj_le &
  [ STEM < "preferable" >,
    SYNSEM.LOCAL.KEYS.KEY _preferable_rel ].

:end :instance.


; <<>>

:begin :instance.

preferably_adv1 := vp_adv_pre_word_le &
  [ STEM < "preferably" >,
    SYNSEM.LOCAL.KEYS.KEY _preferably_rel ].

:end :instance.


; <<>>

:begin :instance.

preferably_adv2 := s_adv_pre_word_le &
  [ STEM < "preferably" >,
    SYNSEM.LOCAL.KEYS.KEY _preferably_rel ].

:end :instance.


; <<>>

:begin :instance.

preference_n1 := intr_noun_word_le &
  [ STEM < "preference" >,
    SYNSEM.LOCAL.KEYS.KEY _preference_rel ].

:end :instance.


; <<>>

:begin :instance.

preliminarily := adv_word_le &
  [ STEM < "preliminarily" >,
    SYNSEM.LOCAL.KEYS.KEY _preliminarily_rel ].

:end :instance.


; <<>>

:begin :instance.

preliminary_a1 := intrans_adj_le &
  [ STEM < "preliminary" >,
    SYNSEM.LOCAL.KEYS.KEY _preliminary_rel ].

:end :instance.


; <<>>

:begin :instance.

preparation_n1 := intr_noun_word_le &
  [ STEM < "preparation" >,
    SYNSEM.LOCAL.KEYS.KEY _preparation_rel ].

:end :instance.


; <<>>

:begin :instance.

preparation_n2 := massn_le &
  [ STEM < "preparation" >,
    SYNSEM.LOCAL.KEYS.KEY _preparation_rel ].

:end :instance.


; <<>>

:begin :instance.

preparatory_a1 := intrans_adj_le &
  [ STEM < "preparatory" >,
    SYNSEM.LOCAL.KEYS.KEY _preparatory_rel ].

:end :instance.


; <<>>

:begin :instance.

prepare_v1 := mv_np*_trans_le &
  [ STEM < "prepare" >,
    SYNSEM.LOCAL.KEYS.KEY _prepare_rel ].

:end :instance.


; <<>>

:begin :instance.

prepare_for_v1 := mv_empty_prep_intrans_le &
  [ STEM < "prepare" >,
    SYNSEM.LOCAL.KEYS [ KEY _prepare_for_rel,
			--OCOMPKEY _for_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

prepare_v2 := mv_subj_equi_le &
  [ STEM < "prepare" >,
    SYNSEM.LOCAL.KEYS.KEY _prepare2_rel ].

:end :instance.


; <<>>

:begin :instance.

prepared_a1 := intrans_adj_le &
  [ STEM < "prepared" >,
    SYNSEM.LOCAL.KEYS.KEY _prepared_rel ].

:end :instance.


; <<>>

:begin :instance.

presence_n1 := intr_noun_word_le &
  [ STEM < "presence" >,
    SYNSEM.LOCAL.KEYS.KEY _presence_rel ].

:end :instance.


; <<>>

:begin :instance.

present_a1 := intrans_adj_le &
  [ STEM < "present" >,
    SYNSEM.LOCAL.KEYS.KEY _present_adj_rel ].

:end :instance.


; <<>>

:begin :instance.

present_n1 := intr_noun_word_le &
  [ STEM < "present" >,
    SYNSEM.LOCAL.KEYS.KEY _present_n_rel ].

:end :instance.


; <<>>

:begin :instance.

present_v1 := mv_to*_trans_le &
  [ STEM < "present" >,
    SYNSEM.LOCAL.KEYS.KEY _present_v_rel ].

:end :instance.


; <<>>

:begin :instance.

present_with_v1 := mv_empty_prep_trans_le &
  [ STEM < "present" >,
    SYNSEM.LOCAL.KEYS [ KEY _present_with_rel,
			--OCOMPKEY _with_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

presentation_n1 := intr_noun_word_le &
  [ STEM < "presentation" >,
    SYNSEM.LOCAL.KEYS.KEY _presentation_rel ].

:end :instance.


; <<>>

:begin :instance.

presently := adv_word_le &
  [ STEM < "presently" >,
    SYNSEM.LOCAL.KEYS.KEY _presently_rel ].

:end :instance.


; <<>>

:begin :instance.

press_v1 := mv_np_trans_le &
  [ STEM < "press" >,
    SYNSEM.LOCAL.KEYS.KEY _press_v_rel ].

:end :instance.


; <<>>

:begin :instance.

press_n1 := intr_noun_word_le &
  [ STEM < "press" >,
    SYNSEM.LOCAL.KEYS.KEY _press_rel ].

:end :instance.


; <<>>

:begin :instance.

pressure_n1 := massn_le &
  [ STEM < "pressure" >,
    SYNSEM.LOCAL.KEYS.KEY _pressure_rel ].

:end :instance.


; <<>>

:begin :instance.

presume_v1 := mv_cp_prop_non_trans_le &
  [ STEM < "presume" >,
    SYNSEM.LOCAL.KEYS.KEY _presume_rel ].

:end :instance.


; <<>>

:begin :instance.

presume_v2 := mv_unerg_le &
  [ STEM < "presume" >,
    SYNSEM.LOCAL.KEYS.KEY _presume_rel ].

:end :instance.


; <<>>

:begin :instance.

pretty_deg := degree_spec_le &
  [ STEM < "pretty" >,
    SYNSEM.LOCAL.KEYS.KEY _pretty_rel ].

:end :instance.


; <<>>

:begin :instance.

prevent_v1 := mv_np_trans_le &
  [ STEM < "prevent" >,
    SYNSEM.LOCAL.KEYS.KEY _prevent_rel ].

:end :instance.


; <<>>

:begin :instance.

previous_a1 := intrans_adj_le &
  [ STEM < "previous" >,
    SYNSEM.LOCAL.KEYS.KEY _previous_rel ].

:end :instance.


; <<>>

:begin :instance.

previously_adv1 := vp_adv_pre_word_le &
  [ STEM < "previously" >,
    SYNSEM.LOCAL.KEYS.KEY _previously_rel ].

:end :instance.


; <<>>

:begin :instance.

previously_adv2 := s_adv_pre_word_le &
  [ STEM < "previously" >,
    SYNSEM.LOCAL.KEYS.KEY _previously_rel ].

:end :instance.


; <<>>

:begin :instance.

price_n1 := noun_ppof_word_le &
  [ STEM < "price" >,
    SYNSEM.LOCAL.KEYS.KEY _price_rel ].

:end :instance.


; <<>>

:begin :instance.

price_n2 := massn_le &
  [ STEM < "price" >,
    SYNSEM.LOCAL.KEYS.KEY _price_rel ].

:end :instance.


; <<>>

:begin :instance.

principal_a1 := intrans_adj_le &
  [ STEM < "principal" >,
    SYNSEM.LOCAL.KEYS.KEY _principal_rel ].

:end :instance.


; <<>>

:begin :instance.

principally_adv1 := vp_adv_pre_word_le &
  [ STEM < "principally" >,
    SYNSEM.LOCAL.KEYS.KEY _principally_rel ].

:end :instance.


; <<>>

:begin :instance.

principally_adv2 := s_adv_pre_word_le &
  [ STEM < "principally" >,
    SYNSEM.LOCAL.KEYS.KEY _principally_rel ].

:end :instance.


; <<>>

:begin :instance.

principle_n1 := intr_noun_word_le &
  [ STEM < "principle" >,
    SYNSEM.LOCAL.KEYS.KEY _principle_rel ].

:end :instance.


; <<>>
; MULTIKEY < "prior" >

:begin :instance.

prior_to := prep_mle1 &
  [ STEM < "prior", "to" >,
    SYNSEM.LOCAL.KEYS.KEY _prior_isect_rel ].

:end :instance.


; <<>>
; MULTIKEY < "prior" >

:begin :instance.

prior_to_temp := before_prep_mle1 &
  [ STEM < "prior", "to" >,
    SYNSEM.LOCAL.KEYS.KEY _prior_to_rel ].

:end :instance.


; <<>>

:begin :instance.

private_a1 := intrans_adj_le &
  [ STEM < "private" >,
    SYNSEM.LOCAL.KEYS.KEY _private_rel ].

:end :instance.


; <<>>

:begin :instance.

privately_adv1 := vp_adv_post_word_le &
  [ STEM < "privately" >,
    SYNSEM.LOCAL.KEYS.KEY _privately_rel ].

:end :instance.


; <<>>

:begin :instance.

probable_a1 := intrans_adj_le &
  [ STEM < "probable" >,
    SYNSEM.LOCAL.KEYS.KEY _probable_rel ].

:end :instance.


; <<>>

:begin :instance.

probably_adv1 := vp_aux_adv_word_le &
  [ STEM < "probably" >,
    SYNSEM.LOCAL.KEYS.KEY _probably_rel ].

:end :instance.


; <<>>

:begin :instance.

probably_adv2 := s_adv_pre_word_le &
  [ STEM < "probably" >,
    SYNSEM.LOCAL.KEYS.KEY _probably_rel ].

:end :instance.


; <<>>

:begin :instance.

problem_n1 := intr_noun_word_le &
  [ STEM < "problem" >,
    SYNSEM.LOCAL.KEYS.KEY _problem_rel ].

:end :instance.


; <<>>

:begin :instance.

problematic_a1 := intrans_adj_le &
  [ STEM < "problematic" >,
    SYNSEM.LOCAL.KEYS.KEY _problematic_rel ].

:end :instance.


; <<>>

:begin :instance.

problematically := vp_adv_post_word_le &
  [ STEM < "problematically" >,
    SYNSEM.LOCAL.KEYS.KEY _problematically_rel ].

:end :instance.


; <<>>

:begin :instance.

proceed_v1 := mv_unerg_le &
  [ STEM < "proceed" >,
    SYNSEM.LOCAL.KEYS.KEY _proceed_rel ].

:end :instance.


; <<>>

:begin :instance.

proceed_v2 := mv_subj_equi_le &
  [ STEM < "proceed" >,
    SYNSEM.LOCAL.KEYS.KEY _proceed2_rel ].

:end :instance.


; <<>>

:begin :instance.

proceed_with_v1 := mv_empty_prep_intrans_le &
  [ STEM < "proceed" >,
    SYNSEM.LOCAL.KEYS [ KEY _proceed_with_rel,
			--COMPKEY _with_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

produce_v1 := mv_np_trans_le &
  [ STEM < "produce" >,
    SYNSEM.LOCAL.KEYS.KEY _produce_rel ].

:end :instance.


; <<>>

:begin :instance.

product_n1 := intr_noun_word_le &
  [ STEM < "product" >,
    SYNSEM.LOCAL.KEYS.KEY _product_rel ].

:end :instance.


; <<>>

:begin :instance.

professor_n1 := intr_noun_word_le &
  [ STEM < "professor" >,
    SYNSEM.LOCAL.KEYS.KEY _professor_rel ].

:end :instance.


; <<>>

:begin :instance.

program_n1 := intr_noun_word_le &
  [ STEM < "program" >,
    SYNSEM.LOCAL.KEYS.KEY _program_n_rel ].

:end :instance.


; <<>>

:begin :instance.

programmer_n1 := intr_noun_word_le &
  [ STEM < "programmer" >,
    SYNSEM.LOCAL.KEYS.KEY _programmer_rel ].

:end :instance.


; <<>>

:begin :instance.

project_n1 := intr_noun_word_le &
  [ STEM < "project" >,
    SYNSEM.LOCAL.KEYS.KEY _project_rel ].

:end :instance.


; <<>>

:begin :instance.

prominent_a1 := intrans_adj_le &
  [ STEM < "prominent" >,
    SYNSEM.LOCAL.KEYS.KEY _prominent_rel ].

:end :instance.


; <<>>

:begin :instance.

promise1 := mv_anom_equi_le &
  [ STEM < "promise" >,
    SYNSEM.LOCAL.KEYS.KEY _promise_v_rel ].

:end :instance.


; <<>>

:begin :instance.

pronounce_v1 := mv_np_trans_le &
  [ STEM < "pronounce" >,
    SYNSEM.LOCAL.KEYS.KEY _pronounce_rel ].

:end :instance.


; <<>>

:begin :instance.

proper_a1 := intrans_adj_le &
  [ STEM < "proper" >,
    SYNSEM.LOCAL.KEYS.KEY _proper_rel ].

:end :instance.


; <<>>

:begin :instance.

properly_adv1 := adv_word_le &
  [ STEM < "properly" >,
    SYNSEM.LOCAL.KEYS.KEY _properly_rel ].

:end :instance.


; <<>>

:begin :instance.

proposal_n1 := intr_noun_word_le &
  [ STEM < "proposal" >,
    SYNSEM.LOCAL.KEYS.KEY _proposal_rel ].

:end :instance.


; <<>>

:begin :instance.

propose_v1 := mv_np_trans_le &
  [ STEM < "propose" >,
    SYNSEM.LOCAL.KEYS.KEY _propose_rel ].

:end :instance.


; <<>>

:begin :instance.

propose_v2 := mv_cp_non_trans_le &
  [ STEM < "propose" >,
    SYNSEM.LOCAL.KEYS.KEY _propose_h_rel ].

:end :instance.


; <<>>

:begin :instance.

propose_v3 := mv_unerg_le &
  [ STEM < "propose" >,
    SYNSEM.LOCAL.KEYS.KEY _propose_rel ].

:end :instance.


; <<>>

:begin :instance.

protection_n1 := massn_le &
  [ STEM < "protection" >,
    SYNSEM.LOCAL.KEYS.KEY _protection_rel ].

:end :instance.


; <<>>

:begin :instance.

protestant_n1 := intr_noun_word_le &
  [ STEM < "protestant" >,
    SYNSEM.LOCAL.KEYS.KEY _protestant_rel ].

:end :instance.


; <<>>

:begin :instance.

prove_v1 := mv_np_trans_le &
  [ STEM < "prove" >,
    SYNSEM.LOCAL.KEYS.KEY _prove_rel ].

:end :instance.


; <<>>

:begin :instance.

prove_v2 := mv_cp_non_trans_le &
  [ STEM < "prove" >,
    SYNSEM.LOCAL.KEYS.KEY _prove_h_rel ].

:end :instance.


; <<>>

:begin :instance.

prove_v3 := mv_unerg_le &
  [ STEM < "prove" >,
    SYNSEM.LOCAL.KEYS.KEY _prove_rel ].

:end :instance.


; <<>>

:begin :instance.

provide_v1 := mv_np_trans_le &
  [ STEM < "provide" >,
    SYNSEM.LOCAL.KEYS.KEY _provide_rel ].

:end :instance.


; <<>>

:begin :instance.

provided_subord := subconj_le &
  [ STEM < "provided" >,
    SYNSEM.LOCAL.KEYS.KEY _provided_rel ].

:end :instance.


; <<>>
; MULTIKEY < "provided" >

:begin :instance.

provided_that_subord := subconj_mle1 &
  [ STEM < "provided", "that" >,
    SYNSEM.LOCAL.KEYS.KEY _provided_rel ].

:end :instance.


; <<>>

:begin :instance.

providing_subord := subconj_le &
  [ STEM < "providing" >,
    SYNSEM.LOCAL.KEYS.KEY _providing_rel ].

:end :instance.


; <<>>
; MULTIKEY < "providing" >

:begin :instance.

providing_that_subord := subconj_mle1 &
  [ STEM < "providing", "that" >,
    SYNSEM.LOCAL.KEYS.KEY _providing_rel ].

:end :instance.


; <<>>

:begin :instance.

public_a1 := intrans_adj_le &
  [ STEM < "public" >,
    SYNSEM.LOCAL.KEYS.KEY _public_adj_rel ].

:end :instance.


; <<>>

:begin :instance.

publication_n1 := intr_noun_word_le &
  [ STEM < "publication" >,
    SYNSEM.LOCAL.KEYS.KEY _publication_rel ].

:end :instance.


; <<>>

:begin :instance.

publish_v1 := mv_np_trans_le &
  [ STEM < "publish" >,
    SYNSEM.LOCAL.KEYS.KEY _publish_rel ].

:end :instance.


; <<>>

:begin :instance.

pull_v1 := mv_prep*_trans_le &
  [ STEM < "pull" >,
    SYNSEM.LOCAL.KEYS [ KEY _pull_rel,
			--OCOMPKEY dir_rel ] ].

:end :instance.


; <<>>

:begin :instance.

punctual_a1 := intrans_adj_le &
  [ STEM < "punctual" >,
    SYNSEM.LOCAL.KEYS.KEY _punctual_adj_rel ].

:end :instance.


; <<>>

:begin :instance.

pure_a1 := intrans_adj_le &
  [ STEM < "pure" >,
    SYNSEM.LOCAL.KEYS.KEY _pure_adj_rel ].

:end :instance.


; <<>>

:begin :instance.

purely := vp_adv_post_word_le &
  [ STEM < "purely" >,
    SYNSEM.LOCAL.KEYS.KEY _purely_rel ].

:end :instance.


; <<>>

:begin :instance.

purpose_n1 := intr_noun_word_le &
  [ STEM < "purpose" >,
    SYNSEM.LOCAL.KEYS.KEY _purpose_rel ].

:end :instance.


; <<>>

:begin :instance.

push_v1 := mv_prep*_trans_le &
  [ STEM < "push" >,
    SYNSEM.LOCAL.KEYS [ KEY _push_v_rel,
			--OCOMPKEY dir_rel ] ].

:end :instance.


; <<>>

:begin :instance.

put_by_v1 := mv_prep_particle_np_le &
  [ STEM < "put" >,
    SYNSEM.LOCAL.KEYS [ KEY _put_by_rel,
			--COMPKEY _by_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

put_down_v1 := mv_prep_particle_np_le &
  [ STEM < "put" >,
    SYNSEM.LOCAL.KEYS [ KEY _put_down_rel,
			--COMPKEY _down_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

put_in_v1 := mv_prep_particle_np_le &
  [ STEM < "put" >,
    SYNSEM.LOCAL.KEYS [ KEY _put_in_rel,
			--COMPKEY _in_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

put_off_v1 := mv_prep_particle_np_le &
  [ STEM < "put" >,
    SYNSEM.LOCAL.KEYS [ KEY _put_off_rel,
			--COMPKEY _off_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

put_through_v1 := mv_particle_np_pp_to_le &
  [ STEM < "put" >,
    SYNSEM.LOCAL.KEYS [ KEY _put_through_rel,
			--COMPKEY _through_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

put_v1 := mv_prep_trans_le &
  [ STEM < "put" >,
    SYNSEM.LOCAL.KEYS [ KEY _put_rel,
			--OCOMPKEY dir_rel ] ].

:end :instance.


; <<>>

:begin :instance.

quantity_n1 := intr_noun_word_le &
  [ STEM < "quantity" >,
    SYNSEM.LOCAL.KEYS.KEY _quantity_rel ].

:end :instance.


; <<>>

:begin :instance.

quarter_n1 := noun_ppof_word_le &
  [ STEM < "quarter" >,
    SYNSEM.LOCAL.KEYS.KEY _quarter_rel ].

:end :instance.


; <<>>

:begin :instance.

quarter_n2 := minute_word_le &
  [ STEM < "quarter" >,
    SYNSEM.LOCAL [ CAT.POSTHEAD -,
		   KEYS.KEY.MINUTE "15" ] ].

:end :instance.


; <<>>

:begin :instance.

quasi_adv1 := vp_adv_pre_word_le &
  [ STEM < "quasi" >,
    SYNSEM.LOCAL.KEYS.KEY _quasi_rel ].

:end :instance.


; <<>>

:begin :instance.

quasi_adv2 := s_adv_pre_word_le &
  [ STEM < "quasi" >,
    SYNSEM.LOCAL.KEYS.KEY _quasi_rel ].

:end :instance.


; <<>>

:begin :instance.

question_n1 := intr_noun_word_le &
  [ STEM < "question" >,
    SYNSEM.LOCAL.KEYS.KEY _question_rel ].

:end :instance.


; <<>>

:begin :instance.

questionable_a1 := intrans_adj_le &
  [ STEM < "questionable" >,
    SYNSEM.LOCAL.KEYS.KEY _questionable_rel ].

:end :instance.


; <<>>

:begin :instance.

quick_a1 := intrans_adj_le &
  [ STEM < "quick" >,
    SYNSEM.LOCAL.KEYS.KEY _quick_rel ].

:end :instance.


; <<>>

:begin :instance.

quicker_a1 := comp_adj_le &
  [ STEM < "quicker" >,
    SYNSEM.LOCAL.KEYS.KEY _quick_rel ].

:end :instance.


; <<>>

:begin :instance.

quickly_adv1 := adv_word_le &
  [ STEM < "quickly" >,
    SYNSEM.LOCAL.KEYS.KEY _quickly_rel ].

:end :instance.


; <<>>

:begin :instance.

quiet_a1 := intrans_adj_le &
  [ STEM < "quiet" >,
    SYNSEM.LOCAL.KEYS.KEY _quiet_rel ].

:end :instance.


; <<>>

:begin :instance.

quietly := adv_word_le &
  [ STEM < "quietly" >,
    SYNSEM.LOCAL.KEYS.KEY _quietly_rel ].

:end :instance.


; <<>>

:begin :instance.

quit_v1 := mv_np*_trans_le &
  [ STEM < "quit" >,
    SYNSEM.LOCAL.KEYS.KEY _quit_rel ].

:end :instance.


; <<>>

:begin :instance.

quite_deg := degree_spec_le &
  [ STEM < "quite" >,
    SYNSEM.LOCAL.KEYS.KEY _quite_rel ].

:end :instance.


; <<>>

:begin :instance.

quits_n1 := massn_le &
  [ STEM < "quits" >,
    SYNSEM.LOCAL.KEYS.KEY _quits_rel ].

:end :instance.


; <<>>

:begin :instance.

rain1 := mv_atrans_le &
  [ STEM < "rain" >,
    SYNSEM.LOCAL.KEYS.KEY _rain_rel ].

:end :instance.


; <<>>

:begin :instance.

raise_v1 := mv_np_trans_le &
  [ STEM < "raise" >,
    SYNSEM.LOCAL.KEYS.KEY _raise_v_rel ].

:end :instance.


; <<>>

:begin :instance.

range_n1 := intr_noun_word_le &
 [ STEM < "range" >,
   SYNSEM.LOCAL.KEYS.KEY _range_rel ].

:end :instance.


; <<>>

:begin :instance.

rapid_a1 := intrans_adj_le &
  [ STEM < "rapid" >,
    SYNSEM.LOCAL.KEYS.KEY _rapid_rel ].

:end :instance.


; <<>>

:begin :instance.

rapidly := adv_word_le &
  [ STEM < "rapidly" >,
    SYNSEM.LOCAL.KEYS.KEY _rapidly_rel ].

:end :instance.


; <<>>

:begin :instance.

rare_a1 := intrans_adj_le &
  [ STEM < "rare" >,
    SYNSEM.LOCAL.KEYS.KEY _rare_rel ].

:end :instance.


; <<>>

:begin :instance.

rarely_adv1 := adv_word_le &
  [ STEM < "rarely" >,
    SYNSEM.LOCAL.KEYS.KEY _rarely_rel ].

:end :instance.


; <<>>

:begin :instance.

rash_a1 := intrans_adj_le &
  [ STEM < "rash" >,
    SYNSEM.LOCAL.KEYS.KEY _rash_rel ].

:end :instance.


; <<>>

:begin :instance.

rate_n1 := intr_noun_word_le &
  [ STEM < "rate" >,
    SYNSEM.LOCAL.KEYS.KEY _rate_n_rel ].

:end :instance.


; <<>>

:begin :instance.

rather_deg := degree_spec_le &
  [ STEM < "rather" >,
    SYNSEM.LOCAL.KEYS.KEY _rather_rel ].

:end :instance.


; <<>>

:begin :instance.

reach_out_v1 := mv_particle_le &
  [ STEM < "reach" >,
    SYNSEM.LOCAL.KEYS [ KEY _reach_out_rel,
			--COMPKEY _out_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

reach_v1 := mv_np_trans_le &
  [ STEM < "reach" >,
    SYNSEM.LOCAL.KEYS.KEY _reach_rel ].

:end :instance.


; <<>>

:begin :instance.

read_v1 := mv_np*_trans_le &
  [ STEM < "read" >,
    SYNSEM.LOCAL.KEYS.KEY _read_rel ].

:end :instance.


; <<>>

:begin :instance.

readily := adv_word_le &
  [ STEM < "readily" >,
    SYNSEM.LOCAL.KEYS.KEY _readily_rel ].

:end :instance.


; <<>>

:begin :instance.

ready_a1 := reg_adj_equi_le &
  [ STEM < "ready" >,
    SYNSEM.LOCAL.KEYS.KEY _ready_rel ].

:end :instance.


; <<>>

:begin :instance.

real_adv := degree_spec_le &
  [ STEM < "real" >,
    SYNSEM.LOCAL.KEYS.KEY _real_deg_rel ].

:end :instance.


; <<>>

:begin :instance.

real_a1 := intrans_adj_le &
  [ STEM < "real" >,
    SYNSEM.LOCAL.KEYS.KEY _real_adj_rel ].

:end :instance.


; <<>>

:begin :instance.

realize_v1 := mv_np_trans_le &
  [ STEM < "realize" >,
    SYNSEM.LOCAL.KEYS.KEY _realize_rel ].

:end :instance.


; <<>>

:begin :instance.

realize_v2 := mv_cp_prop_non_trans_le &
  [ STEM < "realize" >,
    SYNSEM.LOCAL.KEYS.KEY _realize_h_rel ].

:end :instance.


; <<>>

:begin :instance.

really_deg := degree_spec_le &
  [ STEM < "really" >,
    SYNSEM.LOCAL.KEYS.KEY _really_deg_rel ].

:end :instance.


; <<>>

:begin :instance.

really_adv1 := vp_aux_adv_word_le &
  [ STEM < "really" >,
    SYNSEM.LOCAL.KEYS.KEY _really_rel ].

:end :instance.


; <<>>

:begin :instance.

really_adv2 := s_adv_pre_word_le &
  [ STEM < "really" >,
    SYNSEM.LOCAL.KEYS.KEY _really_rel ].

:end :instance.


; <<>>

:begin :instance.

rearrange_v1 := mv_np_trans_le &
  [ STEM < "rearrange" >,
    SYNSEM.LOCAL.KEYS.KEY _rearrange_rel ].

:end :instance.


; <<>>

:begin :instance.

reason_n1 := intr_noun_word_le &
  [ STEM < "reason" >,
    SYNSEM.LOCAL.KEYS.KEY _reason_rel ].

:end :instance.


; <<>>

:begin :instance.

reason_n2 := massn_le &
  [ STEM < "reason" >,
    SYNSEM.LOCAL.KEYS.KEY _reason_rel ].

:end :instance.


; <<>>

:begin :instance.

reasonable_a1 := intrans_adj_le &
  [ STEM < "reasonable" >,
    SYNSEM.LOCAL.KEYS.KEY _reasonable_rel ].

:end :instance.


; <<>>

:begin :instance.

reasonable_a2 := reg_adj_atrans_le &
  [ STEM < "reasonable" >,
    SYNSEM.LOCAL.KEYS.KEY _reasonable2_rel ].

:end :instance.


; <<>>

:begin :instance.

reasonableness_n1 := massn_le &
  [ STEM < "reasonableness" >,
   SYNSEM.LOCAL.KEYS.KEY _reasonableness_rel ].

:end :instance.


; <<>>

:begin :instance.

reasonably := int_vp_adv_word_le &
  [ STEM < "reasonably" >,
    SYNSEM.LOCAL.KEYS.KEY _reasonably_rel ].

:end :instance.


; <<>>

:begin :instance.

rebel_n1 := intr_noun_word_le &
  [ STEM < "rebel" >,
    SYNSEM.LOCAL.KEYS.KEY _rebel_rel ].

:end :instance.


; <<>>

:begin :instance.

rebel_v1 := mv_np*_prep*_trans_le &
  [ STEM < "rebel" >,
    SYNSEM.LOCAL.KEYS [ KEY _rebel_v_rel,
			--OCOMPKEY _against_rel ] ].

:end :instance.


; <<>>

:begin :instance.

recap_v1 := mv_np*_trans_le &
  [ STEM < "recap" >,
    SYNSEM.LOCAL.KEYS.KEY _recap_rel ].

:end :instance.


; <<>>

:begin :instance.

recapitulate_v1 := mv_np*_trans_le &
  [ STEM < "recapitulate" >,
    SYNSEM.LOCAL.KEYS.KEY _recapitulate_rel ].

:end :instance.


; <<>>

:begin :instance.

receive_v1 := mv_np_trans_le &
  [ STEM < "receive" >,
    SYNSEM.LOCAL.KEYS.KEY _receive_rel ].

:end :instance.


; <<>>

:begin :instance.

recently_adv1 := adv_word_le &
  [ STEM < "recently" >,
    SYNSEM.LOCAL.KEYS.KEY _recently_rel ].

:end :instance.


; <<>>

:begin :instance.

receptive_a1 := intrans_adj_le &
  [ STEM < "receptive" >,
    SYNSEM.LOCAL.KEYS.KEY _receptive_rel ].

:end :instance.


; <<>>

:begin :instance.

reckon_v1 := mv_cp_prop*_non_trans_le &
  [ STEM < "reckon" >,
    SYNSEM.LOCAL.KEYS.KEY _reckon_rel ].

:end :instance.


; <<>>

:begin :instance.

reckon_on_v1 := mv_empty_prep_intrans_le &
  [ STEM < "reckon" >,
    SYNSEM.LOCAL.KEYS [ KEY _reckon_on_rel,
			--COMPKEY _on_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

recommendable_a1 := intrans_adj_le &
  [ STEM < "recommendable" >,
    SYNSEM.LOCAL.KEYS.KEY _recommendable_rel ].

:end :instance.


; <<>>

:begin :instance.

recommendation_n1 := intr_noun_word_le &
  [ STEM < "recommendation" >,
    SYNSEM.LOCAL.KEYS.KEY _recommendation_rel ].

:end :instance.


; <<>>

:begin :instance.

reconcile_with_v1 := mv_empty_prep_trans*_le &
  [ STEM < "reconcile" >,
    SYNSEM.LOCAL.KEYS [ KEY _reconcile_with_rel,
			--COMPKEY _with_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

reconsider_v1 := mv_np*_trans_le &
  [ STEM < "reconsider" >,
    SYNSEM.LOCAL.KEYS.KEY _reconsider_rel ].

:end :instance.


; <<>>

:begin :instance.

record_v1 := mv_np*_trans_le &
  [ STEM < "record" >,
    SYNSEM.LOCAL.KEYS.KEY _record_rel ].

:end :instance.


; <<>>

:begin :instance.

recover_v1 := mv_unacc_le &
  [ STEM < "recover" >,
    SYNSEM.LOCAL.KEYS.KEY _recover_recup_rel ].

:end :instance.


; <<>>

:begin :instance.

recover_v2 := mv_np_trans_le &
  [ STEM < "recover" >,
    SYNSEM.LOCAL.KEYS.KEY _recover_rel ].

:end :instance.


; <<>>

:begin :instance.

recuperate_v1 := mv_empty_prep*_intrans_le &
  [ STEM < "recuperate" >,
    SYNSEM.LOCAL.KEYS [ KEY _recuperate_from_rel,
			--COMPKEY _from_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

red1 := intrans_adj_le &
  [ STEM < "red" >,
    SYNSEM.LOCAL.KEYS.KEY _red_rel ].

:end :instance.


; <<>>

:begin :instance.

redo := mv_np_trans_le &
  [ STEM < "redo" >,
    SYNSEM.LOCAL.KEYS.KEY _redo_rel &
	                  [ ARG3 non_expl-ind ] ].

:end :instance.


; <<>>

:begin :instance.

Redoute_n1 := proper_le &
  [ STEM < "redoute" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Redoute ].

:end :instance.


; <<>>

:begin :instance.

reduce_v1 := mv_np_trans_le &
  [ STEM < "reduce" >,
    SYNSEM.LOCAL.KEYS.KEY _reduce_rel ].

:end :instance.


; <<>>

:begin :instance.

reduction_n1 := intr_noun_word_le &
  [ STEM < "reduction" >,
    SYNSEM.LOCAL.KEYS.KEY _reduction_rel ].

:end :instance.


; <<>>

:begin :instance.

reference_n1 := intr_noun_word_le &
  [ STEM < "reference" >,
    SYNSEM.LOCAL.KEYS.KEY _reference_rel ].

:end :instance.


; <<>>
; MULTIKEY < "reformation" >

:begin :instance.

reformation_day := holiday_word_mle1 &
  [ STEM < "reformation", "day" >,
    SYNSEM.LOCAL.KEYS.KEY.DAY 'reformation_day ].

:end :instance.


; <<>>

:begin :instance.

refresh_v1 := mv_np_trans_le &
  [ STEM < "refresh" >,
    SYNSEM.LOCAL.KEYS.KEY _refresh_rel ].

:end :instance.


; <<>>

:begin :instance.

refuse_v1 := mv_np_trans_le &
  [ STEM < "refuse" >,
    SYNSEM.LOCAL.KEYS.KEY _refuse_rel ].

:end :instance.


; <<>>

:begin :instance.

refuse_v2 := mv_subj_equi_le &
  [ STEM < "refuse" >,
    SYNSEM.LOCAL.KEYS.KEY _refuse2_rel ].

:end :instance.


; <<>>

:begin :instance.

regard_v1 := mv_np_comp_le &
  [ STEM < "regard" >,
    SYNSEM.LOCAL [ KEYS [ KEY _regard_rel,
			  --OCOMPKEY _as_rel ],
		   CAT.VAL.COMPS 
			 < [ LOCAL.CONT.INDEX #ind ],
			   [ LOCAL.CONT.INDEX #ind ] > ] ].

:end :instance.


; <<>>

:begin :instance.

regarding_p := prep_le &
  [ STEM < "regarding" >,
    SYNSEM.LOCAL.KEYS.KEY _regarding_rel ].

:end :instance.


; <<>>

:begin :instance.

regards_n1 := plurn_le &
  [ STEM < "regards" >,
    SYNSEM.LOCAL.KEYS.KEY _regards_rel ].

:end :instance.


; <<>>

:begin :instance.

regeneration_n1 := massn_le &
  [ STEM < "regeneration" >,
    SYNSEM.LOCAL.KEYS.KEY _regeneration_rel ].

:end :instance.


; <<>>

:begin :instance.

region_n1 := intr_noun_word_le &
  [ STEM < "region" >,
    SYNSEM.LOCAL.KEYS.KEY _region_rel ].

:end :instance.


; <<>>

:begin :instance.

regret_v1 := mv_np_trans_le &
  [ STEM < "regret" >,
    SYNSEM.LOCAL.KEYS.KEY _regret_rel ].

:end :instance.


; <<>>

:begin :instance.

regret_v2 := mv_cp_non_trans_le &
  [ STEM < "regret" >,
    SYNSEM.LOCAL.KEYS.KEY _regret_h_rel ].

:end :instance.


; <<>>

:begin :instance.

regular_a1 := intrans_adj_le &
  [ STEM < "regular" >,
    SYNSEM.LOCAL.KEYS.KEY _regular_rel ].

:end :instance.


; <<>>

:begin :instance.

regularity_n1 := massn_le &
  [ STEM < "regularity" >,
    SYNSEM.LOCAL.KEYS.KEY _regularity_rel ].

:end :instance.


; <<>>

:begin :instance.

regularly_adv1 := adv_word_le &
  [ STEM < "regularly" >,
    SYNSEM.LOCAL.KEYS.KEY _regularly_rel ].

:end :instance.


; <<>>

:begin :instance.

reject_v1 := mv_np_trans_le &
  [ STEM < "reject" >,
    SYNSEM.LOCAL.KEYS.KEY _reject_rel ].

:end :instance.


; <<>>

:begin :instance.

relation_n1 := intr_noun_word_le &
  [ STEM < "relation" >,
    SYNSEM.LOCAL.KEYS.KEY _relation_rel ].

:end :instance.


; <<>>

:begin :instance.

relationship_n1 := intr_noun_word_le &
  [ STEM < "relationship" >,
    SYNSEM.LOCAL.KEYS.KEY _relationship_rel ].

:end :instance.


; <<>>

:begin :instance.

relative_a1 := intrans_adj_le &
  [ STEM < "relative" >,
    SYNSEM.LOCAL.KEYS.KEY _relative_rel ].

:end :instance.


; <<>>

:begin :instance.

relatively_deg := degree_spec_le &
  [ STEM < "relatively" >,
    SYNSEM.LOCAL.KEYS.KEY _relatively_deg_rel ].

:end :instance.


; <<>>

:begin :instance.

relax_v1 := mv_unerg_le &
  [ STEM < "relax" >,
    SYNSEM.LOCAL.KEYS.KEY _relax_rel ].

:end :instance.


; <<>>

:begin :instance.

relaxed_a1 := intrans_adj_le &
  [ STEM < "relaxed" >,
    SYNSEM.LOCAL.KEYS.KEY _relaxed_rel ].

:end :instance.


; <<>>

:begin :instance.

relevant_a1 := intrans_adj_le &
  [ STEM < "relevant" >,
    SYNSEM.LOCAL.KEYS.KEY _relevant_rel ].

:end :instance.


; <<>>

:begin :instance.

reliable_a1 := intrans_adj_le &
  [ STEM < "reliable" >,
    SYNSEM.LOCAL.KEYS.KEY _reliable_rel ].

:end :instance.


; <<>>

:begin :instance.

relieve_v1 := mv_np_trans_le &
  [ STEM < "relieve" >,
    SYNSEM.LOCAL.KEYS.KEY _relieve_rel ].

:end :instance.


; <<>>

:begin :instance.

religious_a1 := intrans_adj_le &
  [ STEM < "religious" >,
    SYNSEM.LOCAL.KEYS.KEY _religious_rel ].

:end :instance.


; <<>>

:begin :instance.

religiously := adv_word_le &
  [ STEM < "religiously" >,
    SYNSEM.LOCAL.KEYS.KEY _religiously_rel ].

:end :instance.


; <<>>

:begin :instance.

reluctant_a1 := reg_adj_equi_le &
  [ STEM < "reluctant" >,
    SYNSEM.LOCAL.KEYS.KEY _reluctant_rel ].

:end :instance.


; <<>>

:begin :instance.

reluctantly_adv1 := vp_adv_word_le &
  [ STEM < "reluctantly" >,
    SYNSEM.LOCAL.KEYS.KEY _reluctantly_rel ].

:end :instance.


; <<>>

:begin :instance.

rely_on_v1 := mv_empty_prep_intrans_le &
  [ STEM < "rely" >,
    SYNSEM.LOCAL.KEYS [ KEY _rely_on_rel,
			--COMPKEY _on_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

remain_v1 := mv_subj_equi_prd_le &
  [ STEM < "remain" >,
    SYNSEM.LOCAL [ CAT.VAL.COMPS < [ LOCAL.CAT.HEAD adj ] >,
		   KEYS.KEY _remain_rel ] ].

:end :instance.


; <<>>

:begin :instance.

remain_v2 := mv_unacc_le &
  [ STEM < "remain" >,
    SYNSEM.LOCAL.KEYS.KEY _remain_und_rel ].

:end :instance.


; <<>>

:begin :instance.

remember_v1 := mv_np_trans_le &
  [ STEM < "remember" >,
    SYNSEM.LOCAL.KEYS.KEY _remember_rel ].

:end :instance.


; <<>>

:begin :instance.

remember_v2 := mv_cp_fin_inf_non_trans_le &
  [ STEM < "remember" >,
    SYNSEM.LOCAL.KEYS.KEY _remember_h_rel ].

:end :instance.


; <<>>

:begin :instance.

remember_v3 := mv_unerg_le &
  [ STEM < "remember" >,
    SYNSEM.LOCAL.KEYS.KEY _remember_rel ].

:end :instance.


; <<>>

:begin :instance.

remind_v1 := mv_empty_prep_trans_le &
  [ STEM < "remind" >,
    SYNSEM.LOCAL.KEYS [ KEY _remind_of_rel,
			--OCOMPKEY _of_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

remove_v1 := mv_np_trans_le &
  [ STEM < "remove" >,
    SYNSEM.LOCAL.KEYS.KEY _remove_rel ].

:end :instance.


; <<>>

:begin :instance.

rendezvous_n1 := intr_noun_word_le &
  [ STEM < "rendezvous" >,
    SYNSEM.LOCAL.KEYS.KEY _rendezvous_rel ].

:end :instance.


; <<>>

:begin :instance.

renew_v1 := mv_np_trans_le &
  [ STEM < "renew" >,
    SYNSEM.LOCAL.KEYS.KEY _renew_rel ].

:end :instance.


; <<>>

:begin :instance.

repeat_v1 := mv_np_trans_le &
  [ STEM < "repeat" >,
    SYNSEM.LOCAL.KEYS.KEY _repeat_rel ].

:end :instance.


; <<>>

:begin :instance.

repentance_n1 := massn_le &
  [ STEM < "repentance" >,
    SYNSEM.LOCAL.KEYS.KEY _repentance_rel ].

:end :instance.


; <<>>

:begin :instance.

replace_v1 := mv_prep*_trans_le &
  [ STEM < "replace" >,
    SYNSEM.LOCAL.KEYS [ KEY _replace_rel,
			--OCOMPKEY loc_rel ] ].

:end :instance.


; <<>>

:begin :instance.

reply_v1 := mv_pp_cp_le &
  [ STEM < "reply" >,
    SYNSEM.LOCAL.KEYS [ KEY _reply_v_rel,
			--COMPKEY _to_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

reply_v2 := mv_unerg_le &
  [ STEM < "reply" >,
    SYNSEM.LOCAL.KEYS.KEY _reply_v_rel ].

:end :instance.

; <<>>

:begin :instance.

report_n1 := intr_noun_word_le &
  [ STEM < "report" >,
    SYNSEM.LOCAL.KEYS.KEY _report_rel ].

:end :instance.


; <<>>

:begin :instance.

report_v2 := mv_cp_prop*_non_trans_le &
  [ STEM < "report" >,
    SYNSEM.LOCAL.KEYS.KEY _report_v_rel ].

:end :instance.


; <<>>

:begin :instance.

reporter_n1 := intr_noun_word_le &
  [ STEM < "reporter" >,
    SYNSEM.LOCAL.KEYS.KEY _reporter_rel ].

:end :instance.


; <<>>

:begin :instance.

repugnant_a1 := intrans_adj_le &
  [ STEM < "repugnant" >,
    SYNSEM.LOCAL.KEYS.KEY _repugnant_rel ].

:end :instance.


; <<>>

:begin :instance.

request_n1 := intr_noun_word_le &
  [ STEM < "request" >,
    SYNSEM.LOCAL.KEYS.KEY _request_n_rel ].

:end :instance.


; <<>>

:begin :instance.

request_v1 := mv_np_trans_le &
  [ STEM < "request" >,
    SYNSEM.LOCAL.KEYS.KEY _request_v_rel ].

:end :instance.


; <<>>

:begin :instance.

require_v1 := mv_np_trans_le &
  [ STEM < "require" >,
    SYNSEM.LOCAL.KEYS.KEY _require_rel ].

:end :instance.


; <<>>

:begin :instance.

require_v2 := mv_obj_equi_le &
  [ STEM < "require" >,
    SYNSEM.LOCAL.KEYS.KEY _require2_rel ].

:end :instance.


; <<>>

:begin :instance.

reschedule_v1 := mv_np_trans_le &
  [ STEM < "reschedule" >,
    SYNSEM.LOCAL.KEYS.KEY _reschedule_rel ].

:end :instance.


; <<>>

:begin :instance.

reschedule_v2 := mv_empty_prep_trans_le &
  [ STEM < "reschedule" >,
    SYNSEM.LOCAL.KEYS [ KEY _reschedule_for_rel,
			--OCOMPKEY _for_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

reservation_n1 := intr_noun_word_le &
  [ STEM < "reservation" >,
    SYNSEM.LOCAL.KEYS.KEY _reservation_rel ].

:end :instance.


; <<>>

:begin :instance.

reserve_v1 := mv_np_trans_le &
  [ STEM < "reserve" >,
    SYNSEM.LOCAL.KEYS.KEY _reserve_rel ].

:end :instance.


; <<>>

:begin :instance.

resolutely_adv1 := vp_adv_word_le &
  [ STEM < "resolutely" >,
    SYNSEM.LOCAL.KEYS.KEY _resolutely_rel ].

:end :instance.


; <<>>

:begin :instance.

resort_v1 := mv_empty_prep_intrans_le &
  [ STEM < "resort" >,
    SYNSEM.LOCAL.KEYS [ KEY _resort_to_rel,
			--COMPKEY _to_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

respect_v1 := mv_np_trans_le &
  [ STEM < "respect" >,
    SYNSEM.LOCAL.KEYS.KEY _respect_v_rel ].

:end :instance.


; <<>>

:begin :instance.

respectively_adv1 := vp_adv_post_word_le &
  [ STEM < "respectively" >,
    SYNSEM.LOCAL.KEYS.KEY _respectively_rel ].

:end :instance.


; <<>>

:begin :instance.

responsible_a1 := intrans_adj_le &
  [ STEM < "responsible" >,
    SYNSEM.LOCAL.KEYS.KEY _responsible_rel ].

:end :instance.


; <<>>

:begin :instance.

rest_n1 := noun_ppof_word_le &
  [ STEM < "rest" >,
    SYNSEM.LOCAL.KEYS.KEY _rest_remainder_rel ].

:end :instance.


; <<>>

:begin :instance.

rest_n2 := intr_noun_word_le &
  [ STEM < "rest" >,
    SYNSEM.LOCAL.KEYS.KEY _rest_sleep_rel ].

:end :instance.


; <<>>

:begin :instance.

rest_v1 := mv_unerg_le &
  [ STEM < "rest" >,
    SYNSEM.LOCAL.KEYS.KEY _rest_rel ].

:end :instance.


; <<>>

:begin :instance.

rest_v2 := mv_np_trans_le &
  [ STEM < "rest" >,
    SYNSEM.LOCAL.KEYS.KEY _rest_cause_rel ].

:end :instance.


; <<>>

:begin :instance.

rest_up_v1 := mv_particle_le &
  [ STEM < "rest" >,
    SYNSEM.LOCAL.KEYS [ KEY _rest_up_rel,
			--COMPKEY _up_rel ] ].

:end :instance.


; <<>>

:begin :instance.

restaurant_n1 := intr_noun_word_le &
  [ STEM < "restaurant" >,
    SYNSEM.LOCAL.KEYS.KEY _restaurant_rel ].

:end :instance.


; <<>>

:begin :instance.

restrict_v1 := mv_empty_prep_trans_le &
  [ STEM < "restrict" >,
    SYNSEM.LOCAL.KEYS [ KEY _restrict_to_rel,
			--OCOMPKEY _to_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

restrict_v2 := mv_np_trans_le &
  [ STEM < "restrict" >,
    SYNSEM.LOCAL.KEYS.KEY _restrict_rel ].

:end :instance.


; <<>>

:begin :instance.

restricted_a1 := intrans_adj_le &
  [ STEM < "restricted" >,
    SYNSEM.LOCAL.KEYS.KEY _restricted_rel ].

:end :instance.


; <<>>

:begin :instance.

restriction_n1 := intr_noun_word_le &
  [ STEM < "restriction" >,
    SYNSEM.LOCAL.KEYS.KEY _restriction_rel ].

:end :instance.


; <<>>

:begin :instance.

result_n1 := intr_noun_word_le &
  [ STEM < "result" >,
    SYNSEM.LOCAL.KEYS.KEY _result_n_rel ].

:end :instance.


; <<>>

:begin :instance.

return_n1 := intr_noun_word_le &
  [ STEM < "return" >,
    SYNSEM.LOCAL.KEYS.KEY _return_n_rel ].

:end :instance.


; <<>>

:begin :instance.

return_v2 := mv_unerg_le &
  [ STEM < "return" >,
    SYNSEM.LOCAL.KEYS.KEY _return_v_rel ].

:end :instance.


; <<>>

:begin :instance.

reverse_a1 := intrans_adj_le &
  [ STEM < "reverse" >,
    SYNSEM.LOCAL.KEYS.KEY _reverse_adj_rel ].

:end :instance.


; <<>>

:begin :instance.

revert_v1 := mv_np_trans_le &
  [ STEM < "revert" >,
    SYNSEM.LOCAL.KEYS.KEY _revert_rel ].

:end :instance.


; <<>>

:begin :instance.

review_v1 := mv_np_trans_le &
  [ STEM < "review" >,
    SYNSEM.LOCAL.KEYS.KEY _review_v_rel ].

:end :instance.


; <<>>

:begin :instance.

revise_v1 := mv_np_trans_le &
  [ STEM < "revise" >,
    SYNSEM.LOCAL.KEYS.KEY _revise_rel ].

:end :instance.


; <<>>

:begin :instance.

revive_v1 := mv_unacc_le &
  [ STEM < "revive" >,
    SYNSEM.LOCAL.KEYS.KEY _revive_und_rel ].

:end :instance.


; <<>>

:begin :instance.

revive_v2 := mv_np_trans_le &
  [ STEM < "revive" >,
    SYNSEM.LOCAL.KEYS.KEY _revive_rel ].

:end :instance.


; <<>>

:begin :instance.

revolve_v1 := mv_prep*_intrans_le &
  [ STEM < "revolve" >,
    SYNSEM.LOCAL.KEYS [ KEY _revolve_rel,
			--COMPKEY _around_rel ] ].

:end :instance.


; <<>>

:begin :instance.

rhetoric_n1 := massn_le &
  [ STEM < "rhetoric" >,
    SYNSEM.LOCAL.KEYS.KEY _rhetoric_rel ].

:end :instance.


; <<>>

:begin :instance.

Rhineland_n1 := proper_le &
  [ STEM < "rhineland" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Rhineland ].

:end :instance.


; <<>>

:begin :instance.

rhythm_n1 := massn_le &
  [ STEM < "rhythm" >,
    SYNSEM.LOCAL.KEYS.KEY _rhythm_rel ].

:end :instance.


; <<>>

:begin :instance.

rhythm_n2 := intr_noun_word_le &
  [ STEM < "rhythm" >,
    SYNSEM.LOCAL.KEYS.KEY _rhythm_rel ].

:end :instance.


; <<>>

:begin :instance.

rice1 := massn_le &
  [ STEM < "rice" >,
    SYNSEM.LOCAL.KEYS.KEY _rice_rel ].

:end :instance.


; <<>>

:begin :instance.

rid_a1 := trans_adj_le &
  [ STEM < "rid" >,
    SYNSEM.LOCAL.KEYS [ KEY _rid_rel,
			--COMPKEY _of_rel ] ].

:end :instance.


; <<>>

:begin :instance.

ride_n1 := intr_noun_word_le &
  [ STEM < "ride" >,
    SYNSEM.LOCAL.KEYS.KEY _ride_rel ].

:end :instance.


; <<>>

:begin :instance.

ride_v1 := mv_np_trans_le &
  [ STEM < "ride" >,
    SYNSEM.LOCAL.KEYS.KEY _ride_v_rel ].

:end :instance.


; <<>>

:begin :instance.

ridiculous_a1 := intrans_adj_le &
  [ STEM < "ridiculous" >,
    SYNSEM.LOCAL.KEYS.KEY _ridiculous_rel ].

:end :instance.


; <<>>

:begin :instance.

ridiculously := vp_adv_post_word_le &
  [ STEM < "ridiculously" >,
    SYNSEM.LOCAL.KEYS.KEY _ridiculously_rel ].

:end :instance.


; <<>>

:begin :instance.

right_a1 := intrans_adj_le &
  [ STEM < "right" >,
    SYNSEM.LOCAL.KEYS.KEY _right_rel ].

:end :instance.


; <<>>

:begin :instance.

right_adv1 := vp_adv_post_word_le &
  [ STEM < "right" >,
    SYNSEM.LOCAL.KEYS.KEY _right_focus_rel ].

:end :instance.


; <<>>

:begin :instance.

right_adv2 := s_adv_pre_word_le &
  [ STEM < "right" >,
    SYNSEM.LOCAL.KEYS.KEY _right_focus_rel ].

:end :instance.


; <<>>

:begin :instance.

right_deg := degree_spec_le &
  [ STEM < "right" >,
    SYNSEM.LOCAL.KEYS.KEY _right_grad_rel ].

:end :instance.


; <<>>

:begin :instance.

right_root := disc_adv_le &
  [ STEM < "right" >,
    SYNSEM.LOCAL.KEYS.KEY excl_rel & [ EXCL 'right ] ].

:end :instance.


; <<>>
; MULTIKEY < "away" >

:begin :instance.

right_away_adv1 := pp_mle &
  [ STEM < "right", "away" >,
    SYNSEM.LOCAL.KEYS.KEY _right_away_rel ].

:end :instance.


; <<>>

:begin :instance.

rigid_a1 := intrans_adj_le &
  [ STEM < "rigid" >,
    SYNSEM.LOCAL.KEYS.KEY _rigid_rel ].

:end :instance.


; <<>>

:begin :instance.

ring_v1 := mv_prep_particle_np_le &
  [ STEM < "ring" >,
    SYNSEM.LOCAL.KEYS [ KEY _ring_up_rel,
			--COMPKEY _up_rel ] ].

:end :instance.


; <<>>

:begin :instance.

rise_n1 := intr_noun_word_le &
  [ STEM < "rise" >,
    SYNSEM.LOCAL.KEYS.KEY _rise_rel ].

:end :instance.


; <<>>

:begin :instance.

rise_v2 := mv_unacc_le &
  [ STEM < "rise" >,
    SYNSEM.LOCAL.KEYS.KEY _rise_v_rel ].

:end :instance.


; <<>>

:begin :instance.

road_n1 := intr_noun_word_le &
  [ STEM < "road" >,
    SYNSEM.LOCAL.KEYS.KEY _road_rel ].

:end :instance.


; <<>>

:begin :instance.

roger_root := disc_adv_le &
  [ STEM < "roger" >,
    SYNSEM.LOCAL.KEYS.KEY excl_rel & [ EXCL 'roger ] ].

:end :instance.


; <<>>

:begin :instance.

roll_n1 := intr_noun_word_le &
  [ STEM < "roll" >,
    SYNSEM.LOCAL.KEYS.KEY _roll_rel ].

:end :instance.


; <<>>

:begin :instance.

roll_v1 := mv_unacc_le &
  [ STEM < "roll" >,
    SYNSEM.LOCAL.KEYS.KEY _roll_v_rel ].

:end :instance.


; <<>>

:begin :instance.

roll_v2 := mv_np_trans_le &
  [ STEM < "roll" >,
    SYNSEM.LOCAL.KEYS.KEY _roll_cause_rel ].

:end :instance.


; <<>>

:begin :instance.

romantic_a1 := intrans_adj_le &
  [ STEM < "romantic" >,
    SYNSEM.LOCAL.KEYS.KEY _romantic_rel ].

:end :instance.


; <<>>

:begin :instance.

room_n1 := intr_noun_word_le &
  [ STEM < "room" >,
    SYNSEM.LOCAL.KEYS.KEY _room_rel ].

:end :instance.


; <<>>

:begin :instance.

room_n2 := massn_le &
  [ STEM < "room" >,
    SYNSEM.LOCAL.KEYS.KEY _room_space_rel ].

:end :instance.


; <<>>

:begin :instance.

Rostock_n1 := proper_le &
  [ STEM < "rostock" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Rostock ].

:end :instance.


; <<>>

:begin :instance.

rotate_v1 := mv_unacc_le &
  [ STEM < "rotate" >,
    SYNSEM.LOCAL.KEYS.KEY _rotate_rel ].

:end :instance.


; <<>>

:begin :instance.

rotate_v2 := mv_np_trans_le &
  [ STEM < "rotate" >,
    SYNSEM.LOCAL.KEYS.KEY _rotate_cause_rel ].

:end :instance.


; <<>>

:begin :instance.

roughly_adv := degree_spec_le &
  [ STEM < "roughly" >,
    SYNSEM.LOCAL.KEYS.KEY _rough_grad_rel ].

:end :instance.


; <<>>

:begin :instance.

round_a1 := intrans_adj_le &
  [ STEM < "round" >,
    SYNSEM.LOCAL.KEYS.KEY _round_adj_rel ].

:end :instance.


; <<>>

:begin :instance.

roundabout_a1 := intrans_adj_le &
  [ STEM < "roundabout" >,
    SYNSEM.LOCAL.KEYS.KEY _roundabout_adj_rel ].

:end :instance.


; <<>>

:begin :instance.

roundabout_n1 := intr_noun_word_le &
  [ STEM < "roundabout" >,
    SYNSEM.LOCAL.KEYS.KEY _roundabout_rel ].

:end :instance.


; <<>>

:begin :instance.

route_n1 := intr_noun_word_le &
  [ STEM < "route" >,
    SYNSEM.LOCAL.KEYS.KEY _route_rel ].

:end :instance.


; <<>>

:begin :instance.

routine_a1 := intrans_adj_le &
  [ STEM < "routine" >,
    SYNSEM.LOCAL.KEYS.KEY _routine_adj_rel ].

:end :instance.


; <<>>

:begin :instance.

routine_n1 := intr_noun_word_le &
  [ STEM < "routine" >,
    SYNSEM.LOCAL.KEYS.KEY _routine_n_rel ].

:end :instance.


; <<>>

:begin :instance.

row_n1 := intr_noun_word_le &
  [ STEM < "row" >,
    SYNSEM.LOCAL.KEYS.KEY _row_n_rel ].

:end :instance.


; <<>>

:begin :instance.

row_n2 := intr_noun_word_le &
  [ STEM < "row" >,
    SYNSEM.LOCAL.KEYS.KEY _row_fight_rel ].

:end :instance.


; <<>>

:begin :instance.

rubbish_root := disc_adv_le &
  [ STEM < "rubbish" >,
    SYNSEM.LOCAL.KEYS.KEY excl_rel & [ EXCL 'rubbish ] ].

:end :instance.


; <<>>

:begin :instance.

rule_out_v1 := mv_prep_particle_np_le &
  [ STEM < "rule" >,
    SYNSEM.LOCAL.KEYS [ KEY _rule_out_rel,
			--COMPKEY _out_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

rule_v1 := mv_np*_trans_le &
  [ STEM < "rule" >,
    SYNSEM.LOCAL.KEYS.KEY _rule_v_rel ].

:end :instance.


; <<>>

:begin :instance.

run_into_v1 := mv_empty_prep_intrans_le &
  [ STEM < "run" >,
    SYNSEM.LOCAL.KEYS [ KEY _run_into_rel,
			--COMPKEY _into_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

run_n1 := intr_noun_word_le &
  [ STEM < "run" >,
    SYNSEM.LOCAL.KEYS.KEY _run_n_rel ].

:end :instance.


; <<>>

:begin :instance.

run_v2 := mv_np_trans_le &
  [ STEM < "run" >,
    SYNSEM.LOCAL.KEYS.KEY _run_operate_rel ].

:end :instance.


; <<>>

:begin :instance.

run_back_v2 := mv_particle_le &
  [ STEM < "run" >,
    SYNSEM.LOCAL.KEYS [ KEY _run_back_rel,
			--COMPKEY _back_adv_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

run_off_v1 := mv_prep_particle_np_le &
  [ STEM < "run" >,
    SYNSEM.LOCAL.KEYS [ KEY _run_off_rel,
			--COMPKEY _off_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

run_out_v1 := mv_particle_pp*_le &
  [ STEM < "run" >,
    SYNSEM.LOCAL.KEYS [ KEY _run_out_rel,
			--COMPKEY _out_rel_s,
			--OCOMPKEY _of_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

rush_v1 := mv_np*_trans_le &
  [ STEM < "rush" >,
    SYNSEM.LOCAL.KEYS.KEY _rush_v_rel ].

:end :instance.


; <<>>

:begin :instance.

apostrophe_s := poss_clitic_le &
  [ STEM < "s" > ].

:end :instance.


; <<>>

:begin :instance.

apostrophe_s_2 := poss_clitic_le &
  [ STEM < "'s" > ].

:end :instance.


; <<>>

:begin :instance.

Saarbruecken_n1 := proper_le &
  [ STEM < "saarbruecken" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Saarbruecken ].

:end :instance.


; <<>>

:begin :instance.

sacrifice_n1 := massn_le &
  [ STEM < "sacrifice" >,
    SYNSEM.LOCAL.KEYS.KEY _sacrifice_rel ].

:end :instance.


; <<>>

:begin :instance.

sad_a1 := intrans_adj_le &
  [ STEM < "sad" >,
    SYNSEM.LOCAL.KEYS.KEY _sad_rel ].

:end :instance.


; <<>>

:begin :instance.

sadly := adv_word_le &
  [ STEM < "sadly" >,
    SYNSEM.LOCAL.KEYS.KEY _sadly_rel ].

:end :instance.


; <<>>

:begin :instance.

safe_a1 := intrans_adj_le &
  [ STEM < "safe" >,
    SYNSEM.LOCAL.KEYS.KEY _safe_adj_rel ].

:end :instance.


; <<>>

:begin :instance.

safer_a1 := comp_adj_le &
  [ STEM < "safer" >,
    SYNSEM.LOCAL.KEYS.KEY _safe_adj_rel ].

:end :instance.


; <<>>

:begin :instance.

safety_n1 := massn_le &
  [ STEM < "safety" >,
    SYNSEM.LOCAL.KEYS.KEY _safety_rel ].

:end :instance.


; <<>>

:begin :instance.

sail_v1 := mv_unerg_le &
  [ STEM < "sail" >,
    SYNSEM.LOCAL.KEYS.KEY _sail_v_rel ].

:end :instance.


; <<>>

:begin :instance.

salad_n1 := intr_noun_word_le &
  [ STEM < "salad" >,
    SYNSEM.LOCAL.KEYS.KEY _salad_rel ].

:end :instance.


; <<>>

:begin :instance.

salad_n2 := massn_le &
  [ STEM < "salad" >,
    SYNSEM.LOCAL.KEYS.KEY _salad_rel ].

:end :instance.


; <<>>

:begin :instance.

sales_a1 := intrans_adj_le &
  [ STEM < "sales" >,
    SYNSEM.LOCAL.KEYS.KEY _sales_rel ].

:end :instance.


; <<>>

:begin :instance.

same_a1 := attr_intrans_adj_le &
  [ STEM < "same" >,
    SYNSEM.LOCAL.KEYS.KEY _same_rel ].

:end :instance.


; <<>>

:begin :instance.

Sandy := proper_le &
  [ STEM < "sandy" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'sandy ].

:end :instance.


; <<>>

:begin :instance.

sanity_n1 := massn_le &
  [ STEM < "sanity" >,
    SYNSEM.LOCAL.KEYS.KEY _sanity_rel ].

:end :instance.


; <<>>

:begin :instance.

Sara := proper_le &
  [ STEM < "sara" >,
    SYNSEM.LOCAL [ KEYS.KEY.NAMED 'sara,
		   AGR.PNG png & [ GEN fem* ] ] ].

:end :instance.


; <<>>

:begin :instance.

satisfy_v1 := mv_np_trans_le &
  [ STEM < "satisfy" >,
    SYNSEM.LOCAL.KEYS.KEY _satisfy_rel ].

:end :instance.


; <<>>

:begin :instance.

saturday1 := day_of_week_le &
  [ STEM < "saturday" >,
    SYNSEM.LOCAL.KEYS.KEY.DAY 'sat ].

:end :instance.


; <<>>

:begin :instance.

saturday_cn := intr_temp_noun_le &
  [ STEM < "saturday" >,
    SYNSEM.LOCAL.KEYS.KEY dofw_rel & [ DAY 'sat ] ].

:end :instance.


; <<>>

:begin :instance.

sauna_n1 := intr_noun_word_le &
  [ STEM < "sauna" >,
    SYNSEM.LOCAL.KEYS.KEY _sauna_rel ].

:end :instance.


; <<>>

:begin :instance.

sausage_n1 := intr_noun_word_le &
  [ STEM < "sausage" >,
    SYNSEM.LOCAL.KEYS.KEY _sausage_rel ].

:end :instance.


; <<>>

:begin :instance.

sausage_n2 := massn_le &
  [ STEM < "sausage" >,
    SYNSEM.LOCAL.KEYS.KEY _sausage_rel ].

:end :instance.


; <<>>

:begin :instance.

save_v1 := mv_np_trans_le &
  [ STEM < "save" >,
    SYNSEM.LOCAL.KEYS.KEY _save_rel ].

:end :instance.


; <<>>

:begin :instance.

say_v1 := mv_np*_trans_le &
  [ STEM < "say" >,
    SYNSEM.LOCAL.KEYS.KEY _say_rel ].

:end :instance.


; <<>>

:begin :instance.

say_v2 := mv_pp_cp_le &
  [ STEM < "say" >,
    SYNSEM.LOCAL.KEYS [ KEY _say_h_rel,
			--COMPKEY _to_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

say_v3 := mv_prep_intrans_event_le &
  [ STEM < "say" >,
    SYNSEM.LOCAL.KEYS.KEY _say_loc_rel ].

:end :instance.


; <<>>

:begin :instance.

say_approx := degree_spec_le &
  [ STEM < "say" >,
    SYNSEM.LOCAL.KEYS.KEY _say_approx_rel ].

:end :instance.


; <<>>

:begin :instance.

scarce_a1 := intrans_adj_le &
  [ STEM < "scarce" >,
    SYNSEM.LOCAL.KEYS.KEY _scarce_rel ].

:end :instance.


; <<>>

:begin :instance.

scarcely_adv1 := vp_adv_pre_word_le &
  [ STEM < "scarcely" >,
    SYNSEM.LOCAL.KEYS.KEY _scarcely_rel ].

:end :instance.


; <<>>

:begin :instance.

scarcely_adv2 := s_adv_pre_word_le &
  [ STEM < "scarcely" >,
    SYNSEM.LOCAL.KEYS.KEY _scarcely_rel ].

:end :instance.


; <<>>

:begin :instance.

scare_v1 := mv_np_trans_le &
  [ STEM < "scare" >,
    SYNSEM.LOCAL.KEYS.KEY _scare_rel ].

:end :instance.


; <<>>

:begin :instance.

schedule_n1 := intr_noun_word_le &
  [ STEM < "schedule" >,
    SYNSEM.LOCAL.KEYS.KEY _schedule_n_rel ].

:end :instance.


; <<>>

:begin :instance.

schedule_v1 := mv_np_trans_le &
  [ STEM < "schedule" >,
    SYNSEM.LOCAL.KEYS.KEY _schedule_rel ].

:end :instance.


; <<>>

:begin :instance.

schedule_in_v1 := mv_prep_particle_np_le &
  [ STEM < "schedule" >,
    SYNSEM.LOCAL.KEYS [ KEY _schedule_in_rel,
			--COMPKEY _in_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

schedulewise_adv1 := vp_adv_post_word_le &
  [ STEM < "schedulewise" >,
    SYNSEM.LOCAL.KEYS.KEY _schedulewise_rel ].

:end :instance.


; <<>>

:begin :instance.

scheduling_n1 := intr_noun_word_le &
  [ STEM < "scheduling" >,
    SYNSEM.LOCAL.KEYS.KEY _scheduling_rel ].

:end :instance.


; <<>>

:begin :instance.

Scheytt_n1 := proper_le &
  [ STEM < "scheytt" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Scheytt ].

:end :instance.


; <<>>

:begin :instance.

Schmidt_n1 := proper_le &
  [ STEM < "schmidt" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Schmidt ].

:end :instance.


; <<>>

:begin :instance.

Schmidtke_n1 := proper_le &
  [ STEM < "schmidtke" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Schmidtke ].

:end :instance.


; <<>>

:begin :instance.

school_n1 := massn_le &
  [ STEM < "school" >,
    SYNSEM.LOCAL.KEYS.KEY _school_rel ].

:end :instance.


; <<>>

:begin :instance.

school_n2 := intr_noun_word_le &
  [ STEM < "school" >,
    SYNSEM.LOCAL.KEYS.KEY _school_rel ].

:end :instance.


; <<>>

:begin :instance.

Schwerin_n1 := proper_le &
  [ STEM < "schwerin" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Schwerin ].

:end :instance.


; <<>>

:begin :instance.

science_n1 := massn_le &
  [ STEM < "science" >,
    SYNSEM.LOCAL.KEYS.KEY _science_rel ].

:end :instance.


; <<>>

:begin :instance.

science_n2 := intr_noun_word_le &
  [ STEM < "science" >,
    SYNSEM.LOCAL.KEYS.KEY _science_rel ].

:end :instance.


; <<>>

:begin :instance.

scope_n1 := intr_noun_word_le &
  [ STEM < "scope" >,
    SYNSEM.LOCAL.KEYS.KEY _scope_rel ].

:end :instance.


; <<>>

:begin :instance.

Scott := proper_le &
  [ STEM < "scott" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'scott ].

:end :instance.


; <<>>

:begin :instance.

scratch_v1 := mv_prep_particle_np_le &
  [ STEM < "scratch" >,
    SYNSEM.LOCAL.KEYS [ KEY _scratch_up_rel,
			--COMPKEY _up_rel ] ].

:end :instance.


; <<>>

:begin :instance.

screen_n1 := intr_noun_word_le &
  [ STEM < "screen" >,
    SYNSEM.LOCAL.KEYS.KEY _screen_n_rel ].

:end :instance.


; <<>>

:begin :instance.

screen_v1 := mv_np_trans_le &
  [ STEM < "screen" >,
    SYNSEM.LOCAL.KEYS.KEY _screen_v_rel ].

:end :instance.


; <<>>

:begin :instance.

screw_v1 := mv_np_trans_le &
  [ STEM < "screw" >,
    SYNSEM.LOCAL.KEYS.KEY _screw_rel ].

:end :instance.


; <<>>

:begin :instance.

scrupulous_a1 := intrans_adj_le &
  [ STEM < "scrupulous" >,
    SYNSEM.LOCAL.KEYS.KEY _scrupulous_rel ].

:end :instance.


; <<>>

:begin :instance.

scribble_v1 := mv_np*_trans_le &
  [ STEM < "scribble" >,
    SYNSEM.LOCAL.KEYS.KEY _scribble_rel ].

:end :instance.


; <<>>

:begin :instance.

scribble_down_v1 := mv_prep_particle_np_le &
  [ STEM < "scribble" >,
    SYNSEM.LOCAL.KEYS [ KEY _scribble_down_rel,
			--COMPKEY _down_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

sea_n1 := intr_noun_word_le &
  [ STEM < "sea" >,
    SYNSEM.LOCAL.KEYS.KEY _sea_rel ].

:end :instance.


; <<>>

:begin :instance.

season_n1 := intr_temp_noun_le &
  [ STEM < "season" >,
    SYNSEM.LOCAL.KEYS.KEY _season_rel ].

:end :instance.


; <<>>

:begin :instance.

second_day := day_of_month_le &
  [ STEM < "second" >,
    SYNSEM.LOCAL.KEYS.KEY.DAY "2" ].

:end :instance.


; <<>>

:begin :instance.

second_day_num := day_of_month_le &
  [ STEM < "2nd" >,
    SYNSEM.LOCAL.KEYS.KEY.DAY "2" ].

:end :instance.


; <<>>

:begin :instance.

secondly_root := disc_adv_le &
  [ STEM < "secondly" >,
    SYNSEM.LOCAL.KEYS.KEY excl_rel & [ EXCL 'secondly ] ].

:end :instance.


; <<>>

:begin :instance.

secretary_n1 := intr_noun_word_le &
  [ STEM < "secretary" >,
    SYNSEM.LOCAL.KEYS.KEY _secretary_rel ].

:end :instance.


; <<>>

:begin :instance.

secure_a1 := intrans_adj_le &
  [ STEM < "secure" >,
    SYNSEM.LOCAL.KEYS.KEY _secure_rel ].

:end :instance.


; <<>>

:begin :instance.

security_n1 := massn_le &
  [ STEM < "security" >,
    SYNSEM.LOCAL.KEYS.KEY _security_rel ].

:end :instance.


; <<>>

:begin :instance.

see_about_v1 := mv_empty_prep_intrans_le &
  [ STEM < "see" >,
    SYNSEM.LOCAL.KEYS [ KEY _see_about_rel,
			--COMPKEY _about_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

see_to_v1 := mv_empty_prep_intrans_le &
  [ STEM < "see" >,
    SYNSEM.LOCAL.KEYS [ KEY _see_to_rel,
			--COMPKEY _to_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

see_v1 := mv_np_trans_le &
  [ STEM < "see" >,
    SYNSEM.LOCAL.KEYS.KEY _see_rel ].

:end :instance.


; <<>>

:begin :instance.

see_v2 := mv_cp_fin_inf_non_trans_le &
  [ STEM < "see" >,
    SYNSEM.LOCAL.KEYS.KEY _see_understand_h_rel ].

:end :instance.


; <<>>

:begin :instance.

see_v3 := mv_unerg_le &
  [ STEM < "see" >,
    SYNSEM.LOCAL.KEYS.KEY _see_understand_rel ].

:end :instance.


; <<>>

:begin :instance.

see_v5 := mv_np_comp_le &
  [ STEM < "see" >,
    SYNSEM.LOCAL [ CAT.VAL.COMPS 
			 < [ LOCAL.CONT.INDEX #ind ],
			   [ LOCAL.CONT.INDEX #ind ] >,
		   KEYS [ KEY _see_consider_rel,
			  --OCOMPKEY _as_rel ] ] ].
:end :instance.


; <<>>

:begin :instance.

seem1 := mv_pp_inf_ssr_le &
  [ STEM < "seem" >,
    SYNSEM.LOCAL.KEYS.KEY _sound_seem_rel ].

:end :instance.


; <<>>

:begin :instance.

seem2 := mv_prdp_pp_ssr_le &
  [ STEM < "seem" >,
    SYNSEM.LOCAL [ CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD a_or_p,
		   KEYS.KEY _sound_seem_rel ] ].

:end :instance.


; <<>>

:begin :instance.

seem_v3 := mv_expl_it_subj_le &
  [ STEM < "seem" >,
    SYNSEM.LOCAL.KEYS.KEY _seem_rel ].

:end :instance.


; <<>>

:begin :instance.

segregate_v1 := mv_np_trans_le &
  [ STEM < "segregate" >,
    SYNSEM.LOCAL.KEYS.KEY _segregate_rel ].

:end :instance.


; <<>>

:begin :instance.

seize_v1 := mv_np_trans_le &
  [ STEM < "seize" >,
    SYNSEM.LOCAL.KEYS.KEY _seize_rel ].

:end :instance.


; <<>>

:begin :instance.

seldom_adv1 := adv_word_le &
  [ STEM < "seldom" >,
    SYNSEM.LOCAL.KEYS.KEY _seldom_rel ].

:end :instance.


; <<>>

:begin :instance.

select_v1 := mv_np_trans_le &
  [ STEM < "select" >,
    SYNSEM.LOCAL.KEYS.KEY _select_rel ].

:end :instance.


; <<>>

:begin :instance.

selection_n1 := intr_noun_word_le &
  [ STEM < "selection" >,
    SYNSEM.LOCAL.KEYS.KEY _selection_rel ].

:end :instance.


; <<>>
; MULTIKEY < "self" >

:begin :instance.

self-assured_a1 := intrans_adj_mle &
  [ STEM < "self", "assured" >,
    SYNSEM.LOCAL.KEYS.KEY _self-assured_rel ].

:end :instance.


; <<>>

:begin :instance.

sell_v1 := mv_ditrans_le &
  [ STEM < "sell" >,
    SYNSEM.LOCAL.KEYS.KEY _sell_rel ].

:end :instance.


; <<>>

:begin :instance.

seminar_n1 := intr_noun_word_le &
  [ STEM < "seminar" >,
    SYNSEM.LOCAL.KEYS.KEY _seminar_rel ].

:end :instance.


; <<>>

:begin :instance.

send_v1 := mv_ditrans_le &
  [ STEM < "send" >,
    SYNSEM.LOCAL.KEYS.KEY _send_rel ].

:end :instance.


; <<>>

:begin :instance.

send_v2 := mv_prep_trans_le &
  [ STEM < "send" >,
    SYNSEM.LOCAL.KEYS [ KEY _send_rel, 
			--OCOMPKEY dir_rel ] ].

:end :instance.


; <<>>

:begin :instance.

senior_a1 := intrans_adj_le &
  [ STEM < "senior" >,
    SYNSEM.LOCAL.KEYS.KEY _senior_rel ].

:end :instance.


; <<>>

:begin :instance.

sense_n1 := massn_le &
  [ STEM < "sense" >,
    SYNSEM.LOCAL.KEYS.KEY _sense_rel ].

:end :instance.


; <<>>

:begin :instance.

sensible_a1 := intrans_adj_le &
  [ STEM < "sensible" >,
    SYNSEM.LOCAL.KEYS.KEY _sensible_rel ].

:end :instance.


; <<>>

:begin :instance.

separate_a1 := intrans_adj_le &
  [ STEM < "separate" >,
    SYNSEM.LOCAL.KEYS.KEY _separate_rel ].

:end :instance.


; <<>>

:begin :instance.

separately_adv1 := vp_adv_post_word_le &
  [ STEM < "separately" >,
    SYNSEM.LOCAL.KEYS.KEY _separately_rel ].

:end :instance.


; <<>>

:begin :instance.

september := month_word_le &
  [ STEM < "september" >,
    SYNSEM.LOCAL.KEYS.KEY.MONTH 'sep ].

:end :instance.


; <<>>

:begin :instance.

september_2 := month_year_word_le &
  [ STEM < "september" >,
    SYNSEM.LOCAL.KEYS.KEY.MONTH 'sep ].

:end :instance.


; <<>>

:begin :instance.

series_n1 := intr_noun_word_le &
  [ STEM < "series" >,
    SYNSEM.LOCAL.KEYS.KEY _series_rel ].

:end :instance.


; <<>>

:begin :instance.

serious_a1 := intrans_adj_le &
  [ STEM < "serious" >,
    SYNSEM.LOCAL.KEYS.KEY _serious_rel ].

:end :instance.


; <<>>

:begin :instance.

seriously_adv := degree_spec_le &
  [ STEM < "seriously" >,
    SYNSEM.LOCAL.KEYS.KEY _seriously_adv_rel ].

:end :instance.


; <<>>

:begin :instance.

seriously_adv1 := vp_adv_pre_word_le &
  [ STEM < "seriously" >,
    SYNSEM.LOCAL.KEYS.KEY _seriously_rel ].

:end :instance.


; <<>>

:begin :instance.

seriously_adv2 := s_adv_pre_word_le &
  [ STEM < "seriously" >,
    SYNSEM.LOCAL.KEYS.KEY _seriously_rel ].

:end :instance.


; <<>>

:begin :instance.

serve_v1 := mv_np*_trans_le &
  [ STEM < "serve" >,
    SYNSEM.LOCAL.KEYS.KEY _serve_rel ].

:end :instance.


; <<>>

:begin :instance.

session_n1 := intr_noun_word_le &
  [ STEM < "session" >,
    SYNSEM.LOCAL.KEYS.KEY _session_rel ].

:end :instance.


; <<>>

:begin :instance.

set_apart_v1 := mv_particle_np_le &
  [ STEM < "set" >,
    SYNSEM.LOCAL.KEYS [ KEY _set_apart_rel,
			--COMPKEY _apart_isect_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

set_off_v1 := mv_prep_particle_np_le &
  [ STEM < "set" >,
    SYNSEM.LOCAL.KEYS [ KEY _set_off_rel,
			--COMPKEY _off_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

set_up_v1 := mv_prep_particle_np_le &
  [ STEM < "set" >,
    SYNSEM.LOCAL.KEYS [ KEY _set_up_rel,
			--COMPKEY _up_rel ] ].

:end :instance.


; <<>>

:begin :instance.

set_v1 := mv_prep_trans_le &
  [ STEM < "set" >,
    SYNSEM.LOCAL.KEYS [ KEY _set_rel,
			--OCOMPKEY dir_rel ] ].

:end :instance.


; <<>>

:begin :instance.

set_a1 := intrans_adj_le &
  [ STEM < "set" >,
    SYNSEM.LOCAL.KEYS.KEY _set_adj_rel ].

:end :instance.


; <<>>

:begin :instance.

setting_n1 := intr_noun_word_le &
  [ STEM < "setting" >,
    SYNSEM.LOCAL.KEYS.KEY _setting_rel ].

:end :instance.


; <<>>

:begin :instance.

settle_v1 := mv_np*_trans_le &
  [ STEM < "settle" >,
    SYNSEM.LOCAL.KEYS.KEY _settle_rel ].

:end :instance.


; <<>>

:begin :instance.

seven := bare_unspecified_card_le & 
  [  STEM < "seven" >,
     SYNSEM.LOCAL [ CAT.HEAD intadj1,
		    KEYS.KEY.CONST_VALUE "7" ] ].
:end :instance.


; <<>>

:begin :instance.

seven_adjnoun := numadj_noun_word_le & 
  [ STEM < "seven" >,
    SYNSEM.LOCAL.KEYS.ALTKEY.CONST_VALUE "7" ].

:end :instance.


; <<>>

:begin :instance.

seven_hour := hour_word_le &
  [ STEM < "seven" >,
    SYNSEM.LOCAL.KEYS.KEY.HOUR "7" ].

:end :instance.


; <<>>

:begin :instance.

seventeen := bare_unspecified_card_le & 
  [  STEM < "seventeen" >,
     SYNSEM.LOCAL [ CAT.HEAD intadj2,
		    KEYS.KEY.CONST_VALUE "17" ] ].
:end :instance.


; <<>>

:begin :instance.

seventeenth := ordinal_adj_le &
  [ STEM < "seventeenth" >,
    SYNSEM.LOCAL.KEYS.KEY.ORD "17" ].

:end :instance.


; <<>>

:begin :instance.

seventeenth_day := day_of_month_le &
  [ STEM < "seventeenth" >,
    SYNSEM.LOCAL.KEYS.KEY.DAY "17" ].

:end :instance.


; <<>>

:begin :instance.

seventh := ordinal_adj_le &
  [ STEM < "seventh" >,
    SYNSEM.LOCAL.KEYS.KEY.ORD "7" ].

:end :instance.


; <<>>

:begin :instance.

seventh_day := day_of_month_le &
  [ STEM < "seventh" >,
    SYNSEM.LOCAL.KEYS.KEY.DAY "7" ].

:end :instance.


; <<>>

:begin :instance.

seventy_w_comps := complemented_unspecified_card_le & 
  [ STEM < "seventy" >,
    SYNSEM.LOCAL [ CAT [ HEAD intadj2,
			 VAL.COMPS.FIRST.LOCAL.CAT.HEAD intadj1 ],
		   KEYS.KEY.CONST_VALUE "70" ] ].
:end :instance.


; <<>>

:begin :instance.

seventy := bare_unspecified_card_le & 
  [  STEM < "seventy" >,
     SYNSEM.LOCAL [ CAT.HEAD intadj2,
		    KEYS.KEY.CONST_VALUE "70" ] ].
:end :instance.


; <<>>

:begin :instance.

sever_v1 := mv_np_trans_le &
  [ STEM < "sever" >,
    SYNSEM.LOCAL.KEYS.KEY _sever_rel ].

:end :instance.


; <<>>

:begin :instance.

several := pdet_pl_le &
  [ STEM < "several" >,
    SYNSEM.LOCAL.KEYS.KEY _several_rel ].

:end :instance.


; <<>>

:begin :instance.

shall_aux_pos := will_pos_le &
  [ STEM < "shall" >,
    SYNSEM.LOCAL.KEYS.KEY _shall_rel ].

:end :instance.


; <<>>

:begin :instance.

sharp_a1 := intrans_adj_le &
  [ STEM < "sharp" >,
    SYNSEM.LOCAL.KEYS.KEY _sharp_rel ].

:end :instance.


; <<>>

:begin :instance.

sharply := adv_word_le &
  [ STEM < "sharply" >,
    SYNSEM.LOCAL.KEYS.KEY _sharply_rel ].

:end :instance.


; <<>>

:begin :instance.

she := pers_pro_le &
  [ STEM < "she" >,
    SYNSEM.LOCAL [ CAT.HEAD.CASE nom,
		   KEYS.KEY.INST [ PNG png & [ PN 3sg*,
					       GEN fem* ],
				   PRONTYPE std_3 ] ] ].
:end :instance.


; <<>>

:begin :instance.

sheet_n1 := intr_noun_word_le &
  [ STEM < "sheet" >,
    SYNSEM.LOCAL.KEYS.KEY _sheet_rel ].

:end :instance.


; <<>>

:begin :instance.

Sheraton_n1 := intr_noun_word_le &
  [ STEM < "sheraton" >,
    SYNSEM.LOCAL.KEYS.KEY named_rel & [ NAMED 'Sheraton ] ].

:end :instance.


; <<>>

:begin :instance.

Shetland_n1 := proper_le &
  [ STEM < "shetland" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Shetland ].

:end :instance.


; <<>>

:begin :instance.

shift_v1 := mv_np_trans_le &
  [ STEM < "shift" >,
    SYNSEM.LOCAL.KEYS.KEY _shift_v_rel ].

:end :instance.


; <<>>

:begin :instance.

shit_root := disc_adv_le &
  [ STEM < "shit" >,
    SYNSEM.LOCAL.KEYS.KEY excl_rel & [ EXCL 'shit ] ].

:end :instance.


; <<>>

:begin :instance.

shoot_v1 := mv_np_trans_le &
  [ STEM < "shoot" >,
    SYNSEM.LOCAL.KEYS.KEY _shoot_rel ].

:end :instance.


; <<>>

:begin :instance.

shop_n1 := intr_noun_word_le &
  [ STEM < "shop" >,
    SYNSEM.LOCAL.KEYS.KEY _shop_n_rel ].

:end :instance.


; <<>>

:begin :instance.

shop_v2 := mv_unerg_le &
  [ STEM < "shop" >,
    SYNSEM.LOCAL.KEYS.KEY _shop_buy_rel ].

:end :instance.


; <<>>

:begin :instance.

short_a1 := intrans_adj_le &
  [ STEM < "short" >,
    SYNSEM.LOCAL.KEYS.KEY _short_rel_a ].

:end :instance.


; <<>>
; MULTIKEY < "short" >

:begin :instance.

short_term_a1 := intrans_adj_mle &
  [ STEM < "short", "term" >,
    SYNSEM.LOCAL.KEYS.KEY _short_term_rel ].

:end :instance.


; <<>>

:begin :instance.

shorten_v1 := mv_np_trans_le &
  [ STEM < "shorten" >,
    SYNSEM.LOCAL.KEYS.KEY _shorten_rel ].

:end :instance.


; <<>>

:begin :instance.

shortly_adv1 := vp_adv_post_word_le &
  [ STEM < "shortly" >,
    SYNSEM.LOCAL.KEYS.KEY _shortly_rel ].

:end :instance.


; <<>>

:begin :instance.

should_aux_pos := modal_subj_pos_le & 
  [ STEM < "should" >,
    SYNSEM.LOCAL.KEYS.KEY _should_rel ].

:end :instance.


; <<>>

:begin :instance.

should_aux_neg_1 := modal_subj_neg_le &
  [ STEM < "shouldn't" >,
    SYNSEM.LOCAL.KEYS.KEY _should_rel ].

:end :instance.


; <<>>
; MULTIKEY < "shouldn" >

:begin :instance.

should_aux_neg_2 := modal_subj_neg_mle1 &
  [ STEM < "shouldn", "t" >,
    SYNSEM.LOCAL.KEYS.KEY _should_rel ].

:end :instance.


; <<>>

:begin :instance.

show_n1 := intr_noun_word_le &
  [ STEM < "show" >,
    SYNSEM.LOCAL.KEYS.KEY _show_n_rel ].

:end :instance.


; <<>>

:begin :instance.

show_that_v1 := mv_cp_non_trans_le &
  [ STEM < "show" >,
    SYNSEM.LOCAL.KEYS.KEY _show_that_rel ].

:end :instance.


; <<>>

:begin :instance.

show_v1 := mv_ditrans_le &
  [ STEM < "show" >,
    SYNSEM.LOCAL.KEYS.KEY _show_v_rel ].

:end :instance.


; <<>>

:begin :instance.

show_v2 := mv_np_trans_le &
  [ STEM < "show" >,
    SYNSEM.LOCAL.KEYS.KEY _show_v_rel ].

:end :instance.


; <<>>

:begin :instance.

show_up_v1 := mv_particle_le &
  [ STEM < "show" >,
    SYNSEM.LOCAL.KEYS [ KEY _show_up_rel,
			--COMPKEY _up_rel ] ].

:end :instance.


; <<>>

:begin :instance.

shrimp_n1 := intr_noun_word_le &
  [ STEM < "shrimp" >,
    SYNSEM.LOCAL.KEYS.KEY _shrimp_rel ].

:end :instance.


; <<>>
; MULTIKEY < "shrove" >

:begin :instance.

shrove_tuesday := holiday_word_mle1 &
  [ STEM < "shrove", "tuesday" >,
    SYNSEM.LOCAL.KEYS.KEY.DAY 'shrove_tuesday ].

:end :instance.


; <<>>

:begin :instance.

shut_a1 := intrans_adj_le &
  [ STEM < "shut" >,
    SYNSEM.LOCAL.KEYS.KEY _shut_adj_rel ].

:end :instance.


; <<>>

:begin :instance.

shut_v1 := mv_np_trans_le &
  [ STEM < "shut" >,
    SYNSEM.LOCAL.KEYS.KEY _shut_rel ].

:end :instance.


; <<>>

:begin :instance.

side_n1 := intr_noun_word_le &
  [ STEM < "side" >,
    SYNSEM.LOCAL.KEYS.KEY _side_rel ].

:end :instance.


; <<>>

:begin :instance.

Siemens_n1 := proper_le &
  [ STEM < "siemens" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Siemens ].

:end :instance.


; <<>>

:begin :instance.

sift_v1 := mv_np_trans_le &
  [ STEM < "sift" >,
    SYNSEM.LOCAL.KEYS.KEY _sift_rel ].

:end :instance.


; <<>>

:begin :instance.

sight_n1 := intr_noun_word_le &
  [ STEM < "sight" >,
    SYNSEM.LOCAL.KEYS.KEY _sight_rel ].

:end :instance.


; <<>>

:begin :instance.

sign_n1 := intr_noun_word_le &
  [ STEM < "sign" >,
    SYNSEM.LOCAL.KEYS.KEY _sign_rel ].

:end :instance.


; <<>>

:begin :instance.

silence_n1 := massn_le &
  [ STEM < "silence" >,
    SYNSEM.LOCAL.KEYS.KEY _silence_rel ].

:end :instance.


; <<>>

:begin :instance.

silent_a1 := intrans_adj_le &
  [ STEM < "silent" >,
    SYNSEM.LOCAL.KEYS.KEY _silent_rel ].

:end :instance.


; <<>>

:begin :instance.

silly_a1 := intrans_adj_le &
  [ STEM < "silly" >,
    SYNSEM.LOCAL.KEYS.KEY _silly_rel ].

:end :instance.


; <<>>

:begin :instance.

silvester := holiday_word_le &
  [ STEM < "silvester" >,
    SYNSEM.LOCAL.KEYS.KEY.DAY 'silvester ].

:end :instance.


; <<>>

:begin :instance.

similar_to_a1 := trans_adj_le &
  [ STEM < "similar" >,
    SYNSEM.LOCAL.KEYS [ KEY _similar_adj_rel,
			--COMPKEY _to_rel ] ].

:end :instance.


; <<>>

:begin :instance.

similarly := adv_word_le &
  [ STEM < "similarly" >,
    SYNSEM.LOCAL.KEYS.KEY _similarly_rel ].

:end :instance.


; <<>>

:begin :instance.

simple_a1 := intrans_adj_le &
  [ STEM < "simple" >,
    SYNSEM.LOCAL.KEYS.KEY _simple_rel ].

:end :instance.


; <<>>

:begin :instance.

simply_adv1 := vp_adv_pre_word_le &
  [ STEM < "simply" >,
    SYNSEM.LOCAL.KEYS.KEY _simply_rel ].

:end :instance.


; <<>>

:begin :instance.

simply_adv2 := s_adv_pre_word_le &
  [ STEM < "simply" >,
    SYNSEM.LOCAL.KEYS.KEY _simply_rel ].

:end :instance.


; <<>>

:begin :instance.

since_subord := subconj_le &
  [ STEM < "since" >,
    SYNSEM.LOCAL.KEYS.KEY _since_subord_rel ].

:end :instance.


; <<>>

:begin :instance.

since_root := disc_adv_le &
  [ STEM < "since" >,
    SYNSEM.LOCAL [ CAT.POSTHEAD -,
		   KEYS.KEY excl_rel & [ EXCL 'since ] ] ].

:end :instance.


; <<>>

:begin :instance.

since := prep_le &
  [ STEM < "since" >,
    SYNSEM.LOCAL.KEYS.KEY _since_rel ].

:end :instance.


; <<>>

:begin :instance.

since2 := prep_cp_le &
  [ STEM < "since" >,
    SYNSEM.LOCAL.KEYS.KEY _since_rel ].

:end :instance.


; <<>>

:begin :instance.

since_temp := before_prep_le &
  [ STEM < "since" >,
    SYNSEM.LOCAL.KEYS.KEY _since_rel ].

:end :instance.


; <<>>

:begin :instance.

sincere_a1 := intrans_adj_le &
  [ STEM < "sincere" >,
    SYNSEM.LOCAL.KEYS.KEY _sincere_rel ].

:end :instance.


; <<>>

:begin :instance.

single_a1 := intrans_adj_le &
  [ STEM < "single" >,
    SYNSEM.LOCAL.KEYS.KEY _single_isect_rel ].

:end :instance.


; <<>>

:begin :instance.

single_n1 := intr_noun_word_le &
  [ STEM < "single" >,
    SYNSEM.LOCAL.KEYS.KEY _single_n_rel ].

:end :instance.


; <<>>

:begin :instance.

sir_root := disc_adv_le &
  [ STEM < "sir" >,
    SYNSEM.LOCAL.KEYS.KEY excl_rel & [ EXCL 'sir ] ].

:end :instance.


; <<>>

:begin :instance.

sit_down_v1 := mv_particle_le &
  [ STEM < "sit" >,
    SYNSEM.LOCAL.KEYS [ KEY _sit_down_rel,
			--COMPKEY _down_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

sit_v1 := mv_unacc_le &
  [ STEM < "sit" >,
    SYNSEM.LOCAL.KEYS.KEY _sit_rel ].

:end :instance.


; <<>>

:begin :instance.

site_n1 := intr_noun_word_le &
  [ STEM < "site" >,
    SYNSEM.LOCAL.KEYS.KEY _site_rel ].

:end :instance.


; <<>>

:begin :instance.

situate_v1 := mv_np_trans_le &
  [ STEM < "situate" >,
    SYNSEM.LOCAL.KEYS.KEY _situate_rel ].

:end :instance.


; <<>>

:begin :instance.

situation_n1 := intr_noun_word_le &
  [ STEM < "situation" >,
    SYNSEM.LOCAL.KEYS.KEY _situation_rel ].

:end :instance.


; <<>>

:begin :instance.

six := bare_unspecified_card_le & 
  [  STEM < "six" >,
     SYNSEM.LOCAL [ CAT.HEAD intadj1,
		    KEYS.KEY.CONST_VALUE "6" ] ].
:end :instance.


; <<>>

:begin :instance.

six_adjnoun := numadj_noun_word_le & 
  [ STEM < "six" >,
    SYNSEM.LOCAL.KEYS.ALTKEY.CONST_VALUE "6" ].

:end :instance.


; <<>>

:begin :instance.

six_hour := hour_word_le &
  [ STEM < "six" >,
    SYNSEM.LOCAL.KEYS.KEY.HOUR "6" ].

:end :instance.


; <<>>

:begin :instance.

sixteen := bare_unspecified_card_le & 
  [  STEM < "sixteen" >,
     SYNSEM.LOCAL [ CAT.HEAD intadj2,
		    KEYS.KEY.CONST_VALUE "16" ] ].
:end :instance.


; <<>>

:begin :instance.

sixteenth := ordinal_adj_le &
  [ STEM < "sixteenth" >,
    SYNSEM.LOCAL.KEYS.KEY.ORD "16" ].

:end :instance.


; <<>>

:begin :instance.

sixteenth_day := day_of_month_le &
  [ STEM < "sixteenth" >,
    SYNSEM.LOCAL.KEYS.KEY.DAY "16" ].

:end :instance.


; <<>>

:begin :instance.

sixth := ordinal_adj_le &
  [ STEM < "sixth" >,
    SYNSEM.LOCAL.KEYS.KEY.ORD "6" ].

:end :instance.


; <<>>

:begin :instance.

sixth_day := day_of_month_le &
  [ STEM < "sixth" >,
    SYNSEM.LOCAL.KEYS.KEY.DAY "6" ].

:end :instance.


; <<>>

:begin :instance.

sixty_w_comps := complemented_unspecified_card_le & 
  [ STEM < "sixty" >,
    SYNSEM.LOCAL [ CAT [ HEAD intadj2,
			 VAL.COMPS.FIRST.LOCAL.CAT.HEAD intadj1 ],
		   KEYS.KEY.CONST_VALUE "60" ] ].

:end :instance.


; <<>>

:begin :instance.

sixty := bare_unspecified_card_le & 
  [  STEM < "sixty" >,
     SYNSEM.LOCAL [ CAT.HEAD intadj2,
		    KEYS.KEY.CONST_VALUE "60" ] ].
:end :instance.


; <<>>

:begin :instance.

ski_v1 := mv_unerg_le &
  [ STEM < "ski" >,
    SYNSEM.LOCAL.KEYS.KEY _ski_v_rel ].

:end :instance.


; <<>>

:begin :instance.

skip_v1 := mv_np_trans_le &
  [ STEM < "skip" >,
    SYNSEM.LOCAL.KEYS.KEY _skip_rel ].

:end :instance.


; <<>>

:begin :instance.

skip_over_v1 := mv_empty_prep_intrans_le &
  [ STEM < "skip" >,
    SYNSEM.LOCAL.KEYS [ KEY _skip_over_rel,
			--COMPKEY _over_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

sleep_v1 := mv_unerg_le &
  [ STEM < "sleep" >,
    SYNSEM.LOCAL.KEYS.KEY _sleep_rel ].

:end :instance.


; <<>>

:begin :instance.

sleep_in_v1 := mv_particle_le &
  [ STEM < "sleep" >,
    SYNSEM.LOCAL.KEYS [ KEY _sleep_in_rel,
			--COMPKEY _in_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

slide_n1 := intr_noun_word_le &
  [ STEM < "slide" >,
    SYNSEM.LOCAL.KEYS.KEY _slide_n_rel ].

:end :instance.


; <<>>

:begin :instance.

slight_a1 := intrans_adj_le &
  [ STEM < "slight" >,
    SYNSEM.LOCAL.KEYS.KEY _slight_adj_rel ].

:end :instance.


; <<>>

:begin :instance.

slightly := adv_word_le &
  [ STEM < "slightly" >,
    SYNSEM.LOCAL.KEYS.KEY _slightly_rel ].

:end :instance.


; <<>>

:begin :instance.

slot_n1 := intr_noun_word_le &
  [ STEM < "slot" >,
    SYNSEM.LOCAL.KEYS.KEY _slot_rel ].

:end :instance.


; <<>>

:begin :instance.

slow_a1 := intrans_adj_le &
  [ STEM < "slow" >,
    SYNSEM.LOCAL.KEYS.KEY _slow_rel ].

:end :instance.


; <<>>

:begin :instance.

slow_down_v1 := mv_prep_particle_np_le &
  [ STEM < "slow" >,
    SYNSEM.LOCAL.KEYS [ KEY _slow_down_rel,
			--COMPKEY _down_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

slowly_adv1 := vp_adv_word_le &
  [ STEM < "slowly" >,
    SYNSEM.LOCAL.KEYS.KEY _slowly_rel ].

:end :instance.


; <<>>

:begin :instance.

small_a1 := intrans_adj_le &
  [ STEM < "small" >,
    SYNSEM.LOCAL.KEYS.KEY _small_rel ].

:end :instance.


; <<>>

:begin :instance.

smaller_a1 := comp_adj_le &
  [ STEM < "smaller" >,
    SYNSEM.LOCAL.KEYS.KEY _small_rel ].

:end :instance.


; <<>>

:begin :instance.

smile_n1 := intr_noun_word_le &
  [ STEM < "smile" >,
    SYNSEM.LOCAL.KEYS.KEY _smile_n_rel ].

:end :instance.


; <<>>

:begin :instance.

smile_v1 := mv_unerg_le &
  [ STEM < "smile" >,
    SYNSEM.LOCAL.KEYS.KEY _smile_v_rel ].

:end :instance.


; <<>>

:begin :instance.

Smith := proper_le &
  [ STEM < "smith" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'smith ].

:end :instance.


; <<>>

:begin :instance.

smoothly_adv1 := vp_adv_word_le &
  [ STEM < "smoothly" >,
    SYNSEM.LOCAL.KEYS.KEY _smoothly_rel ].

:end :instance.


; <<>>

:begin :instance.

snack_n1 := intr_noun_word_le &
  [ STEM < "snack" >,
    SYNSEM.LOCAL.KEYS.KEY _snack_rel ].

:end :instance.


; <<>>

:begin :instance.

so_deg := degree_spec_le &
  [ STEM < "so" >,
    SYNSEM.LOCAL.KEYS.KEY _so_rel ].

:end :instance.


; <<>>

:begin :instance.

so_subord := subconj_le &
  [ STEM < "so" >,
    SYNSEM.LOCAL [ CAT.POSTHEAD +,
		   KEYS.KEY _so_subord_rel ] ].

:end :instance.


; <<>>

:begin :instance.

so_adv1 := s_adv_pre_word_nospec_le &
  [ STEM < "so" >,
    SYNSEM.LOCAL.KEYS.KEY _so_scop_rel ].

:end :instance.


; <<>>
; MULTIKEY < "that" >

:begin :instance.

so_that := subconj_mle2 &
  [ STEM < "so", "that" >,
    SYNSEM.LOCAL.KEYS.KEY _so_that_rel ].

:end :instance.


; <<>>
; MULTIKEY < "far" >

:begin :instance.

so_far_adv1 := int_vp_adv_post_word_mle2 &
  [ STEM < "so", "far" >,
    SYNSEM.LOCAL.KEYS.KEY _so_far_rel ].

:end :instance.


; <<>>
; MULTIKEY < "speak" >

:begin :instance.

so_to_speak_adv1 := vp_adv_post_word_3mle3 &
  [ STEM < "so", "to", "speak" >,
    SYNSEM.LOCAL.KEYS.KEY _so_to_speak_rel ].

:end :instance.


; <<>>

:begin :instance.

social_a1 := intrans_adj_le &
  [ STEM < "social" >,
    SYNSEM.LOCAL.KEYS.KEY _social_rel ].

:end :instance.


; <<>>

:begin :instance.

software_n1 := massn_le &
  [ STEM < "software" >,
    SYNSEM.LOCAL.KEYS.KEY _software_rel ].

:end :instance.


; <<>>

:begin :instance.

solely_adv1 := vp_adv_pre_word_le &
  [ STEM < "solely" >,
    SYNSEM.LOCAL.KEYS.KEY _solely_rel ].

:end :instance.


; <<>>

:begin :instance.

solely_adv2 := s_adv_pre_word_le &
  [ STEM < "solely" >,
    SYNSEM.LOCAL.KEYS.KEY _solely_rel ].

:end :instance.


; <<>>

:begin :instance.

solid_a1 := intrans_adj_le &
  [ STEM < "solid" >,
    SYNSEM.LOCAL.KEYS.KEY _solid_adj_rel ].

:end :instance.


; <<>>

:begin :instance.

solidly := adv_word_le &
  [ STEM < "solidly" >,
    SYNSEM.LOCAL.KEYS.KEY _solidly_rel ].

:end :instance.


; <<>>

:begin :instance.

solution_n1 := intr_noun_word_le &
  [ STEM < "solution" >,
    SYNSEM.LOCAL.KEYS.KEY _solution_rel ].

:end :instance.


; <<>>

:begin :instance.

solve_v1 := mv_np_trans_le &
  [ STEM < "solve" >,
    SYNSEM.LOCAL.KEYS.KEY _solve_rel ].

:end :instance.


; <<>>

:begin :instance.

some := pdet_le &
  [ STEM < "some" >,
    SYNSEM.LOCAL.KEYS.KEY _some_rel &
	                  [ BV.DIVISIBLE + ] ].

:end :instance.


; <<>>

:begin :instance.

some_indiv := det_le &
  [ STEM < "some" >,
    SYNSEM.LOCAL.KEYS.KEY _some_indiv_rel &
	                  [ BV.DIVISIBLE - ] ].

:end :instance.


; <<>>

:begin :instance.

somebody := generic_pro_le &
  [ STEM < "somebody" >,
    SYNSEM.LOCAL.KEYS [ KEY _person_rel,
			ALTKEY _some_rel ] ].
:end :instance.


; <<>>

:begin :instance.

somehow_adv1 := vp_adv_word_le &
  [ STEM < "somehow" >,
    SYNSEM.LOCAL.KEYS.KEY _somehow_rel ].

:end :instance.


; <<>>

:begin :instance.

someone := generic_pro_le &
  [ STEM < "someone" >,
    SYNSEM.LOCAL.KEYS [ KEY _person_rel,
			ALTKEY _some_rel ] ].
:end :instance.


; <<>>

:begin :instance.

something := generic_pro_le &
  [ STEM < "something" >,
    SYNSEM.LOCAL.KEYS [ KEY _thing_rel,
			ALTKEY _some_rel ] ].
:end :instance.


; <<>>

:begin :instance.

sometimes_adv1 := adv_word_le &
  [ STEM < "sometimes" >,
    SYNSEM.LOCAL.KEYS.KEY _sometimes_rel ].

:end :instance.


; <<>>

:begin :instance.

somewhat_adv := degree_spec_le &
  [ STEM < "somewhat" >,
    SYNSEM.LOCAL.KEYS.KEY _somewhat_adv_rel ].

:end :instance.


; <<>>

:begin :instance.

son_n1 := noun_ppof_word_le &
  [ STEM < "son" >,
    SYNSEM.LOCAL.KEYS.KEY _son_rel ].

:end :instance.


; <<>>

:begin :instance.

sonorous_a1 := intrans_adj_le &
  [ STEM < "sonorous" >,
    SYNSEM.LOCAL.KEYS.KEY _sonorous_rel ].

:end :instance.


; <<>>

:begin :instance.

soon_adv1 := int_vp_adv_word_le &
  [ STEM < "soon" >,
    SYNSEM.LOCAL.KEYS.KEY _soon_rel ].

:end :instance.


; <<>>

:begin :instance.

sooner_adv1 := comp_vp_adv_word_le &
  [ STEM < "sooner" >,
    SYNSEM.LOCAL.KEYS.KEY _soon_rel ].

:end :instance.


; <<>>

:begin :instance.

sorry_a1 := intrans_adj_le &
  [ STEM < "sorry" >,
    SYNSEM.LOCAL.KEYS.KEY _sorry_rel ].

:end :instance.


; <<>>

:begin :instance.

sorry_a2 := reg_adj_that_cp_le &
  [ STEM < "sorry" >,
    SYNSEM.LOCAL.KEYS.KEY _sorry_varg_rel ].

:end :instance.


; <<>>

:begin :instance.

sort_n1 := intr_noun_word_le &
  [ STEM < "sort" >,
    SYNSEM.LOCAL.KEYS.KEY _sort_n_rel ].

:end :instance.


; <<>>

:begin :instance.

sorry_root := disc_adv_le &
  [ STEM < "sorry" >,
    SYNSEM.LOCAL.KEYS.KEY excl_rel & [ EXCL 'sorry ] ].

:end :instance.


; <<>>

:begin :instance.

sort_v1 := mv_np_trans_le &
  [ STEM < "sort" >,
    SYNSEM.LOCAL.KEYS.KEY _sort_v_rel ].

:end :instance.


; <<>>

:begin :instance.

sort_v2 := mv_prep_particle_np_le &
  [ STEM < "sort" >,
    SYNSEM.LOCAL.KEYS [ KEY _sort_out_rel,
			--COMPKEY _out_rel_s ] ].

:end :instance.


; <<>>
; MULTIKEY < "sort" >

:begin :instance.

sort_of_deg := degree_spec_mle1 &
  [ STEM < "sort", "of" >,
    SYNSEM.LOCAL.KEYS.KEY _sort_of_deg_rel ].

:end :instance.


; <<>>

:begin :instance.

sound_n1 := intr_noun_word_le &
  [ STEM < "sound" >,
    SYNSEM.LOCAL.KEYS.KEY _sound_rel ].

:end :instance.


; <<>>

:begin :instance.

sound_v2 := mv_prdp_pp_ssr_le &
  [ STEM < "sound" >,
    SYNSEM.LOCAL [ CAT.VAL [ SUBJ < [ LOCAL.CONT nom-obj ] >,
			     COMPS.FIRST.LOCAL.CAT.HEAD adj ],
		   KEYS.KEY _sound_seem_rel ] ].

:end :instance.


; <<>>

:begin :instance.

sound_v3 := mv_prdp_pp_ssr_le &
  [ STEM < "sound" >,
    SYNSEM.LOCAL [ CAT.VAL [ SUBJ < [ LOCAL.CONT nom-obj ] >,
			     COMPS.FIRST.LOCAL [ CAT.HEAD prep,
						 KEYS.KEY _like_prepx_rel ] ],
		   KEYS.KEY _sound_seem_rel ] ].

:end :instance.


; <<>>

:begin :instance.

sound_v4 := mv_expl_it_subj_like_le &
  [ STEM < "sound" >,
    SYNSEM.LOCAL.KEYS.KEY _seem_rel ].

:end :instance.


; <<>>

:begin :instance.

source_n1 := intr_noun_word_le &
  [ STEM < "source" >,
    SYNSEM.LOCAL.KEYS.KEY _source_rel ].

:end :instance.


; <<>>

:begin :instance.

space_n1 := intr_noun_word_le &
  [ STEM < "space" >,
    SYNSEM.LOCAL.KEYS.KEY _space_rel ].

:end :instance.


; <<>>

:begin :instance.

spare_a1 := intrans_adj_le &
  [ STEM < "spare" >,
    SYNSEM.LOCAL.KEYS.KEY _spare_adj_rel ].

:end :instance.


; <<>>

:begin :instance.

speak_v1 := mv_np*_prep*_trans_le &
  [ STEM < "speak" >,
    SYNSEM.LOCAL.KEYS [ KEY _speak_rel,
			--OCOMPKEY _to_rel ] ].

:end :instance.


; <<>>

:begin :instance.

special_a1 := intrans_adj_le &
  [ STEM < "special" >,
    SYNSEM.LOCAL.KEYS.KEY _special_rel ].

:end :instance.


; <<>>

:begin :instance.

specially := adv_word_le &
  [ STEM < "specially" >,
    SYNSEM.LOCAL.KEYS.KEY _specially_rel ].

:end :instance.


; <<>>

:begin :instance.

specific_a1 := intrans_adj_le &
  [ STEM < "specific" >,
    SYNSEM.LOCAL.KEYS.KEY _specific_rel ].

:end :instance.


; <<>>

:begin :instance.

specifically_adv1 := adv_word_le &
  [ STEM < "specifically" >,
    SYNSEM.LOCAL.KEYS.KEY _specifically_rel ].

:end :instance.


; <<>>

:begin :instance.

spell_v1 := mv_np_trans_le &
  [ STEM < "spell" >,
    SYNSEM.LOCAL.KEYS.KEY _spell_rel ].

:end :instance.


; <<>>

:begin :instance.

spell_out_v1 := mv_prep_particle_np_le &
  [ STEM < "spell" >,
    SYNSEM.LOCAL.KEYS [ KEY _spell_out_rel,
			--COMPKEY _out_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

spend_v1 := mv_np_trans_le &
  [ STEM < "spend" >,
    SYNSEM.LOCAL.KEYS.KEY _spend_rel ].

:end :instance.


; <<>>

:begin :instance.

splendid_a1 := intrans_adj_le &
  [ STEM < "splendid" >,
    SYNSEM.LOCAL.KEYS.KEY _splendid_rel ].

:end :instance.


; <<>>

:begin :instance.

splendidly := vp_adv_post_word_le &
  [ STEM < "splendidly" >,
    SYNSEM.LOCAL.KEYS.KEY _splendidly_rel ].

:end :instance.


; <<>>

:begin :instance.

spontaneously_adv1 := vp_adv_word_le &
  [ STEM < "spontaneously" >,
    SYNSEM.LOCAL.KEYS.KEY _spontaneously_rel ].

:end :instance.


; <<>>

:begin :instance.

sports_n1 := massn_le &
  [ STEM < "sports" >,
    SYNSEM.LOCAL.KEYS.KEY _sports_rel ].

:end :instance.


; <<>>

:begin :instance.

spread_v1 := mv_np*_trans_le & 
  [ STEM < "spread" >,
    SYNSEM.LOCAL.KEYS.KEY _spread_rel ].

:end :instance.


; <<>>

:begin :instance.

spring_season := season_word_le &
  [ STEM < "spring" >,
    SYNSEM.LOCAL.KEYS.KEY _spring_s_rel ].

:end :instance.


; <<>>

:begin :instance.

spring_n1 := intr_temp_noun_le &
  [ STEM < "spring" >,
    SYNSEM.LOCAL.KEYS.KEY season_rel & [ SEASON 'spring ] ].

:end :instance.


; <<>>

:begin :instance.

squeeze_v1 := mv_np_trans_le &
  [ STEM < "squeeze" >,
    SYNSEM.LOCAL.KEYS.KEY _squeeze_rel ].

:end :instance.


; <<>>

:begin :instance.

squeeze_in_v1 := mv_prep_particle_np_le &
  [ STEM < "squeeze" >,
    SYNSEM.LOCAL.KEYS [ KEY _squeeze_in_rel,
			--COMPKEY _in_rel_s ] ].

:end :instance.


; <<>>
; MULTIKEY < "nicholas" >

:begin :instance.

st_nicholas_day := holiday_word_3mle2 &
  [ STEM < "st", "nicholas", "day" >,
    SYNSEM.LOCAL.KEYS.KEY.DAY 'st_nicholas_day ].

:end :instance.


; <<>>

:begin :instance.

staff_n1 := intr_noun_word_le &
  [ STEM < "staff" >,
    SYNSEM.LOCAL.KEYS.KEY _staff_n_rel ].

:end :instance.


; <<>>

:begin :instance.

staff_n2 := plurn_le &
  [ STEM < "staff" >,
    SYNSEM.LOCAL.KEYS.KEY _one_of_staff_rel ].

:end :instance.


; <<>>

:begin :instance.

stage_n1 := intr_noun_word_le &
  [ STEM < "stage" >,
    SYNSEM.LOCAL.KEYS.KEY _stage_rel ].

:end :instance.


; <<>>

:begin :instance.

stake_n1 := intr_noun_word_le &
  [ STEM < "stake" >,
    SYNSEM.LOCAL.KEYS.KEY _stake_n_rel ].

:end :instance.


; <<>>

:begin :instance.

stand1 := mv_unerg_le &
  [ STEM < "stand" >,
    SYNSEM.LOCAL.KEYS.KEY _stand_rel ].

:end :instance.


; <<>>

:begin :instance.

stand_up_v1 := mv_prep_particle_np_le &
  [ STEM < "stand" >,
    SYNSEM.LOCAL.KEYS [ KEY _stand_up_c_rel,
			--COMPKEY _up_rel ] ].

:end :instance.


; <<>>

:begin :instance.

stand_up_v2 := mv_particle_le &
  [ STEM < "stand" >,
    SYNSEM.LOCAL.KEYS [ KEY _stand_up_rel,
			--COMPKEY _up_rel ] ].

:end :instance.


; <<>>

:begin :instance.

stand_n1 := intr_noun_word_le &
  [ STEM < "stand" >,
    SYNSEM.LOCAL.KEYS.KEY _stand_n_rel ].

:end :instance.

; <<>>
; MULTIKEY < "stanford" >

:begin :instance.

SU := proper_mle1 &
  [ STEM < "stanford", "university" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'stanford_univ ].

:end :instance.


; <<>>

:begin :instance.

star_n1 := intr_noun_word_le &
  [ STEM < "star" >,
    SYNSEM.LOCAL.KEYS.KEY _star_rel ].

:end :instance.


; <<>>

:begin :instance.

start_v1 := mv_unerg_le &
  [ STEM < "start" >,
    SYNSEM.LOCAL.KEYS.KEY _start_rel ].

:end :instance.


; <<>>

:begin :instance.

start_v2 := mv_np_trans_le &
  [ STEM < "start" >,
    SYNSEM.LOCAL.KEYS.KEY _start_cause_rel ].

:end :instance.


; <<>>

:begin :instance.

start_v3 := mv_subj_equi_le &
  [ STEM < "start" >,
    SYNSEM.LOCAL.KEYS.KEY _start_to_rel ].

:end :instance.


; <<>>

:begin :instance.

start_v4 := mv_subj_equi_prp_le &
  [ STEM < "start" >,
    SYNSEM.LOCAL.KEYS.KEY _start_to_rel ].

:end :instance.


; <<>>

:begin :instance.

start_out_v1 := mv_particle_le &
  [ STEM < "start" >,
    SYNSEM.LOCAL.KEYS [ KEY _start_out_rel,
			--COMPKEY _out_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

start_over_v1 := mv_prep_particle_np_le &
  [ STEM < "start" >,
    SYNSEM.LOCAL.KEYS [ KEY _start_over_rel,
			--COMPKEY _over_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

start_n1 := intr_noun_word_le &
  [ STEM < "start" >,
    SYNSEM.LOCAL.KEYS.KEY _start_n_rel ].

:end :instance.


; <<>>

:begin :instance.

state_n1 := intr_noun_word_le &
  [ STEM < "state" >,
    SYNSEM.LOCAL.KEYS.KEY _state_n_rel ].

:end :instance.


; <<>>

:begin :instance.

state_v1 := mv_np_trans_le &
  [ STEM < "state" >,
    SYNSEM.LOCAL.KEYS.KEY _state_v_rel ].

:end :instance.


; <<>>

:begin :instance.

state_v2 := mv_cp_non_trans_le &
  [ STEM < "state" >,
    SYNSEM.LOCAL.KEYS.KEY _state_v_h_rel ].

:end :instance.


; <<>>

:begin :instance.

statement_n1 := intr_noun_word_le &
  [ STEM < "statement" >,
    SYNSEM.LOCAL.KEYS.KEY _statement_rel ].

:end :instance.


; <<>>

:begin :instance.

station_n1 := intr_noun_word_le &
  [ STEM < "station" >,
    SYNSEM.LOCAL.KEYS.KEY _station_n_rel ].

:end :instance.


; <<>>

:begin :instance.

stationary_a1 := intrans_adj_le &
  [ STEM < "stationary" >,
    SYNSEM.LOCAL.KEYS.KEY _stationary_rel ].

:end :instance.


; <<>>

:begin :instance.

stay_n1 := intr_noun_word_le &
  [ STEM < "stay" >,
    SYNSEM.LOCAL.KEYS.KEY _stay_n_rel ].

:end :instance.


; <<>>

:begin :instance.

stay_v1 := mv_subj_equi_prd_le &
  [ STEM < "stay" >,
    SYNSEM.LOCAL [ CAT.VAL.COMPS < [ LOCAL.CAT.HEAD a_or_p & strict_type ] >,
		   KEYS.KEY _stay2_rel ] ].

:end :instance.


; <<>>

:begin :instance.

stay_v2 := mv_unerg_le &
  [ STEM < "stay" >,
    SYNSEM.LOCAL.KEYS.KEY _stay_rel ].

:end :instance.


; <<>>

:begin :instance.

steady_a1 := intrans_adj_le &
  [ STEM < "steady" >,
    SYNSEM.LOCAL.KEYS.KEY _steady_rel ].

:end :instance.


; <<>>

:begin :instance.

step_n1 := intr_noun_word_le &
  [ STEM < "step" >,
    SYNSEM.LOCAL.KEYS.KEY _step_rel ].

:end :instance.


; <<>>

:begin :instance.

step_v1 := mv_prep_intrans_le &
  [ STEM < "step" >,
    SYNSEM.LOCAL.KEYS [ KEY _step_v_rel,
			--COMPKEY dir_rel ] ].

:end :instance.


; <<>>

:begin :instance.

stern_a1 := intrans_adj_le &
  [ STEM < "stern" >,
    SYNSEM.LOCAL.KEYS.KEY _stern_rel ].

:end :instance.


; <<>>

:begin :instance.

stick_v1 := mv_empty_prep_intrans_le &
  [ STEM < "stick" >,
    SYNSEM.LOCAL.KEYS [ KEY _stick_to_rel,
			--COMPKEY _to_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

stick_v2 := mv_prep_trans_le &
  [ STEM < "stick" >,
    SYNSEM.LOCAL.KEYS [ KEY _stick_v_rel,
			--OCOMPKEY dir_rel ] ].

:end :instance.


; <<>>

:begin :instance.

still_adv1 := adv_pre_word_le &
  [ STEM < "still" >,
    SYNSEM.LOCAL.KEYS.KEY _still_rel ].

:end :instance.


; <<>>

:begin :instance.

still_adv2 := s_adv_pre_word_le &
  [ STEM < "still" >,
    SYNSEM.LOCAL.KEYS.KEY _still_rel ].

:end :instance.


; <<>>

:begin :instance.

Stockholm_n1 := proper_le &
  [ STEM < "stockholm" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Stockholm ].

:end :instance.


; <<>>

:begin :instance.

stop_root := disc_adv_le &
  [ STEM < "stop" >,
    SYNSEM.LOCAL.KEYS.KEY excl_rel & [ EXCL 'stop ] ].

:end :instance.


; <<>>

:begin :instance.

stop_v1 := mv_unerg_le &
  [ STEM < "stop" >,
    SYNSEM.LOCAL.KEYS.KEY _stop_v_rel ].

:end :instance.


; <<>>

:begin :instance.

stop_v2 := mv_np_trans_le &
  [ STEM < "stop" >,
    SYNSEM.LOCAL.KEYS.KEY _stop_rel ].

:end :instance.


; <<>>

:begin :instance.

stop-prd := mv_subj_equi_prd_le &
  [ STEM < "stop" >,
    SYNSEM.LOCAL.KEYS.KEY _stop_prd_rel ].

:end :instance.


; <<>>

:begin :instance.

stop_by_v1 := mv_particle_le &
  [ STEM < "stop" >,
    SYNSEM.LOCAL.KEYS [ KEY _stop_by_rel,
			--COMPKEY _by_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

story_n1 := intr_noun_word_le &
  [ STEM < "story" >,
    SYNSEM.LOCAL.KEYS.KEY _story_rel ].

:end :instance.


; <<>>

:begin :instance.

straight_a1 := intrans_adj_le &
  [ STEM < "straight" >,
    SYNSEM.LOCAL.KEYS.KEY _straight_rel ].

:end :instance.


; <<>>

:begin :instance.

straightforward_a1 := intrans_adj_le &
  [ STEM < "straightforward" >,
    SYNSEM.LOCAL.KEYS.KEY _straightforward_rel ].

:end :instance.


; <<>>

:begin :instance.

strange_a1 := intrans_adj_le &
  [ STEM < "strange" >,
    SYNSEM.LOCAL.KEYS.KEY _strange_rel ].

:end :instance.


; <<>>

:begin :instance.

strangely := adv_word_le &
  [ STEM < "strangely" >,
    SYNSEM.LOCAL.KEYS.KEY _strangely_rel ].

:end :instance.


; <<>>

:begin :instance.

Strassburg_n1 := proper_le &
  [ STEM < "strassburg" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Strassburg ].

:end :instance.


; <<>>

:begin :instance.

strategy_n1 := intr_noun_word_le &
  [ STEM < "strategy" >,
    SYNSEM.LOCAL.KEYS.KEY _strategy_rel ].

:end :instance.


; <<>>

:begin :instance.

street_n1 := intr_noun_word_le &
  [ STEM < "street" >,
    SYNSEM.LOCAL.KEYS.KEY _street_rel ].

:end :instance.


; <<>>

:begin :instance.

strength_n1 := intr_noun_word_le &
  [ STEM < "strength" >,
    SYNSEM.LOCAL.KEYS.KEY _strength_rel ].

:end :instance.


; <<>>

:begin :instance.

strength_n2 := massn_le &
  [ STEM < "strength" >,
    SYNSEM.LOCAL.KEYS.KEY _strength_rel ].

:end :instance.


; <<>>

:begin :instance.

stress_n1 := massn_le &
  [ STEM < "stress" >,
    SYNSEM.LOCAL.KEYS.KEY _stress_rel ].

:end :instance.


; <<>>

:begin :instance.

stressful_a1 := intrans_adj_le &
  [ STEM < "stressful" >,
    SYNSEM.LOCAL.KEYS.KEY _stressful_rel ].

:end :instance.


; <<>>

:begin :instance.

stressfully := adv_word_le &
  [ STEM < "stressfully" >,
    SYNSEM.LOCAL.KEYS.KEY _stressfully_rel ].

:end :instance.


; <<>>

:begin :instance.

stretch_n1 := intr_noun_word_le &
  [ STEM < "stretch" >,
    SYNSEM.LOCAL.KEYS.KEY _stretch_n_rel ].

:end :instance.


; <<>>

:begin :instance.

stretch_v1 := mv_np_trans_le &
  [ STEM < "stretch" >,
    SYNSEM.LOCAL.KEYS.KEY _stretch_v_rel ].

:end :instance.


; <<>>

:begin :instance.

strict_a1 := intrans_adj_le &
  [ STEM < "strict" >,
    SYNSEM.LOCAL.KEYS.KEY _strict_rel ].

:end :instance.


; <<>>

:begin :instance.

strictly_adv1 := vp_adv_pre_word_le &
  [ STEM < "strictly" >,
    SYNSEM.LOCAL.KEYS.KEY _strictly_rel ].

:end :instance.


; <<>>

:begin :instance.

strictly_adv2 := s_adv_pre_word_le &
  [ STEM < "strictly" >,
    SYNSEM.LOCAL.KEYS.KEY _strictly_rel ].

:end :instance.


; <<>>
; MULTIKEY < "strictly" >

:begin :instance.

strictly_speaking_adv1 := adv_word_mle1 &
  [ STEM < "strictly", "speaking" >,
    SYNSEM.LOCAL.KEYS.KEY _strictly_speaking_rel ].

:end :instance.


; <<>>

:begin :instance.

strike_v1 := mv_np_obj_comp_le &
  [ STEM < "strike" >,
    SYNSEM.LOCAL [ CAT.VAL 
			   [ SUBJ < [ LOCAL.CONT.INDEX #ind ] >,
			     COMPS < *top*,
				     [ LOCAL.CAT.VAL.SUBJ 
					   < [ LOCAL.CONT.INDEX #ind ] > ] > ],
		   KEYS [ KEY _strike_rel,
			  --OCOMPKEY _as_rel ] ] ].

:end :instance.


; <<>>

:begin :instance.

strong_a1 := intrans_adj_le &
  [ STEM < "strong" >,
    SYNSEM.LOCAL.KEYS.KEY _strong_rel ].

:end :instance.


; <<>>

:begin :instance.

strongly_adv1 := vp_adv_word_le &
  [ STEM < "strongly" >,
    SYNSEM.LOCAL.KEYS.KEY _strongly_rel ].

:end :instance.


; <<>>

:begin :instance.

structure_n1 := intr_noun_word_le &
  [ STEM < "structure" >,
    SYNSEM.LOCAL.KEYS.KEY _structure_n_rel ].

:end :instance.


; <<>>

:begin :instance.

structure_v1 := mv_np_trans_le &
  [ STEM < "structure" >,
    SYNSEM.LOCAL.KEYS.KEY _structure_v_rel ].

:end :instance.


; <<>>

:begin :instance.

stuck_a1 := intrans_adj_le &
  [ STEM < "stuck" >,
    SYNSEM.LOCAL.KEYS.KEY _stuck_rel ].

:end :instance.


; <<>>

:begin :instance.

student_n1 := intr_noun_word_le &
  [ STEM < "student" >,
    SYNSEM.LOCAL.KEYS.KEY _student_rel ].

:end :instance.


; <<>>

:begin :instance.

study_n1 := intr_noun_word_le &
  [ STEM < "study" >,
    SYNSEM.LOCAL.KEYS.KEY _study_n_rel ].

:end :instance.


; <<>>

:begin :instance.

study_v1 := mv_np*_trans_le &
  [ STEM < "study" >,
    SYNSEM.LOCAL.KEYS.KEY _study_v_rel ].

:end :instance.


; <<>>

:begin :instance.

stuff_n1 := massn_le &
  [ STEM < "stuff" >,
    SYNSEM.LOCAL.KEYS.KEY _stuff_n_rel ].

:end :instance.


; <<>>

:begin :instance.

stumble_v1 := mv_unerg_le &
  [ STEM < "stumble" >,
    SYNSEM.LOCAL.KEYS.KEY _stumble_rel ].

:end :instance.


; <<>>

:begin :instance.

stupid_a1 := intrans_adj_le &
  [ STEM < "stupid" >,
    SYNSEM.LOCAL.KEYS.KEY _stupid_rel ].

:end :instance.


; <<>>

:begin :instance.

stupidly := adv_word_le &
  [ STEM < "stupidly" >,
    SYNSEM.LOCAL.KEYS.KEY _stupidly_rel ].

:end :instance.


; <<>>

:begin :instance.

Stuttgart_n1 := proper_le &
  [ STEM < "stuttgart" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Stuttgart ].

:end :instance.


; <<>>

:begin :instance.

style_n1 := intr_noun_word_le &
  [ STEM < "style" >,
    SYNSEM.LOCAL.KEYS.KEY _style_n_rel ].

:end :instance.


; <<>>

:begin :instance.

style_n2 := massn_le &
  [ STEM < "style" >,
    SYNSEM.LOCAL.KEYS.KEY _style_n_rel ].

:end :instance.


; <<>>

:begin :instance.

subject_n1 := intr_noun_word_le &
  [ STEM < "subject" >,
    SYNSEM.LOCAL.KEYS.KEY _subject_rel ].

:end :instance.


; <<>>

:begin :instance.

submission_n1 := intr_noun_word_le &
  [ STEM < "submission" >,
    SYNSEM.LOCAL.KEYS.KEY _submission_rel ].

:end :instance.


; <<>>

:begin :instance.

submit_v1 := mv_np_trans_le &
  [ STEM < "submit" >,
    SYNSEM.LOCAL.KEYS.KEY _submit_rel ].

:end :instance.


; <<>>

:begin :instance.

subsequent_a1 := intrans_adj_le &
  [ STEM < "subsequent" >,
    SYNSEM.LOCAL.KEYS.KEY _subsequent_rel ].

:end :instance.


; <<>>

:begin :instance.

subway_n2 := intr_noun_word_le &
  [ STEM < "subway" >,
    SYNSEM.LOCAL.KEYS.KEY _subway_rel ].

:end :instance.


; <<>>

:begin :instance.

succeed_v2 := mv_empty_prep_intrans_le &
  [ STEM < "succeed" >,
    SYNSEM.LOCAL.KEYS [ KEY _succeed_in_rel,
			--COMPKEY _in_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

succeed_v1 := mv_unerg_le &
  [ STEM < "succeed" >,
    SYNSEM.LOCAL.KEYS.KEY _succeed_rel ].

:end :instance.


; <<>>

:begin :instance.

success_n1 := massn_le &
  [ STEM < "success" >,
    SYNSEM.LOCAL.KEYS.KEY _success_rel ].

:end :instance.


; <<>>

:begin :instance.

successful_a1 := intrans_adj_le &
  [ STEM < "successful" >,
    SYNSEM.LOCAL.KEYS.KEY _successful_rel ].

:end :instance.


; <<>>

:begin :instance.

succession_n1 := noun_ppof_word_le &
  [ STEM < "succession" >,
    SYNSEM.LOCAL.KEYS.KEY _succession_rel ].

:end :instance.


; <<>>

:begin :instance.

successive_a1 := intrans_adj_le &
  [ STEM < "successive" >,
    SYNSEM.LOCAL.KEYS.KEY _successive_rel ].

:end :instance.


; <<>>

:begin :instance.

successively := adv_word_le &
  [ STEM < "successively" >,
    SYNSEM.LOCAL.KEYS.KEY _successively_rel ].

:end :instance.


; <<>>

:begin :instance.

such_deg := degree_spec_le &
  [ STEM < "such" >,
    SYNSEM.LOCAL.KEYS.KEY _such_deg_rel ].

:end :instance.


; <<>>

:begin :instance.

such := det_le &
  [ STEM < "such" >,
    SYNSEM.LOCAL.KEYS.KEY _such_rel ].

:end :instance.


; <<>>
; MULTIKEY < "such" >

:begin :instance.

such_as := prep_cp_mle1 &
  [ STEM < "such", "as" >,
    SYNSEM.LOCAL.KEYS.KEY _such_as_rel ].

:end :instance.


; <<>>
; MULTIKEY < "such" >

:begin :instance.

such_that := prep_cp_mle1 &
  [ STEM < "such", "that" >,
    SYNSEM.LOCAL.KEYS.KEY _such_that_rel ].

:end :instance.


; <<>>

:begin :instance.

suck_v1 := mv_unacc_le &
  [ STEM < "suck" >,
    SYNSEM.LOCAL.KEYS.KEY _suck_rel ].

:end :instance.


; <<>>

:begin :instance.

sucker_n1 := noun_ppcomp_word_le &
  [ STEM < "sucker" >,
    SYNSEM.LOCAL.KEYS [ KEY _sucker_rel,
			--COMPKEY _for_rel ] ].

:end :instance.


; <<>>

:begin :instance.

sudden_a1 := intrans_adj_le &
  [ STEM < "sudden" >,
    SYNSEM.LOCAL.KEYS.KEY _sudden_rel ].

:end :instance.


; <<>>

:begin :instance.

suddenly_adv1 := adv_word_le &
  [ STEM < "suddenly" >,
    SYNSEM.LOCAL.KEYS.KEY _suddenly_rel ].

:end :instance.


; <<>>

:begin :instance.

Sudniz_n1 := proper_le &
  [ STEM < "sudniz" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Sudniz ].

:end :instance.


; <<>>

:begin :instance.

suffice_v1 := mv_unerg_le &
  [ STEM < "suffice" >,
    SYNSEM.LOCAL.KEYS.KEY _suffice_rel ].

:end :instance.


; <<>>

:begin :instance.

suffice_v2 := mv_atrans_inf_le &
  [ STEM < "suffice" >,
    SYNSEM.LOCAL.KEYS.KEY _suffice2_rel ].

:end :instance.


; <<>>

:begin :instance.

sufficient_a1 := trans_adj_le &
  [ STEM < "sufficient" >,
    SYNSEM.LOCAL.KEYS [ KEY _sufficient_for_rel,
			--COMPKEY _for_rel ] ].

:end :instance.


; <<>>

:begin :instance.

sufficiently_adv := degree_spec_le &
  [ STEM < "sufficiently" >,
    SYNSEM.LOCAL.KEYS.KEY _sufficiently_grad_rel ].

:end :instance.


; <<>>

:begin :instance.

sufficiently := vp_adv_post_word_le &
  [ STEM < "sufficiently" >,
    SYNSEM.LOCAL.KEYS.KEY _sufficiently_for_rel ].

:end :instance.


; <<>>

:begin :instance.

suggest_v1 := mv_to*_trans_le &
  [ STEM < "suggest" >,
    SYNSEM.LOCAL.KEYS.KEY _suggest_rel ].

:end :instance.


; <<>>

:begin :instance.

suggest_v2 := mv_prep_intrans_event_le &
  [ STEM < "suggest" >,
    SYNSEM.LOCAL.KEYS [ KEY _suggest_loc_rel,
			--COMPKEY loc_abstr_rel ] ].

:end :instance.


; <<>>

:begin :instance.

suggest_v3 := mv_pp_cp_le &
  [ STEM < "suggest" >,
    SYNSEM.LOCAL.KEYS [ KEY _suggest_h_rel,
			--COMPKEY _to_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

suggestion_n1 := intr_noun_word_le &
  [ STEM < "suggestion" >,
    SYNSEM.LOCAL.KEYS.KEY _suggestion_rel ].

:end :instance.


; <<>>

:begin :instance.

suit_v1 := mv_np_trans_le &
  [ STEM < "suit" >,
    SYNSEM.LOCAL.KEYS.KEY _suit_rel ].

:end :instance.


; <<>>

:begin :instance.

suit_v2 := mv_expl_prep_trans_le &
  [ STEM < "suit" >,
    SYNSEM.LOCAL.KEYS.KEY _suit_rel ].

:end :instance.


; <<>>

:begin :instance.

suitability_n1 := intr_noun_word_le &
  [ STEM < "suitability" >,
    SYNSEM.LOCAL.KEYS.KEY _suitability_rel ].

:end :instance.


; <<>>

:begin :instance.

suitable_a1 := intrans_adj_le &
  [ STEM < "suitable" >,
    SYNSEM.LOCAL.KEYS.KEY _suitable_rel ].

:end :instance.


; <<>>

:begin :instance.

suitably := adv_word_le &
  [ STEM < "suitably" >,
    SYNSEM.LOCAL.KEYS.KEY _suitably_rel ].

:end :instance.


; <<>>

:begin :instance.

sum_n1 := intr_noun_word_le &
  [ STEM < "sum" >,
    SYNSEM.LOCAL.KEYS.KEY _sum_rel ].

:end :instance.


; <<>>

:begin :instance.

sum_up_v1 := mv_prep_particle_np_le &
  [ STEM < "sum" >,
    SYNSEM.LOCAL.KEYS [ KEY _sum_up_rel,
			--COMPKEY _up_rel ] ].

:end :instance.


; <<>>

:begin :instance.

sum_up_v2 := mv_particle_le &
  [ STEM < "sum" >,
    SYNSEM.LOCAL.KEYS [ KEY _sum_up_rel,
			--COMPKEY _up_rel ] ].

:end :instance.


; <<>>

:begin :instance.

summarize_v1 := mv_np*_trans_le &
  [ STEM < "summarize" >,
    SYNSEM.LOCAL.KEYS.KEY _summarize_rel ].

:end :instance.


; <<>>

:begin :instance.

summer_season := season_word_le &
  [ STEM < "summer" >,
    SYNSEM.LOCAL.KEYS.KEY.SEASON 'summer ].

:end :instance.


; <<>>

:begin :instance.

summer_n1 := intr_temp_noun_le &
  [ STEM < "summer" >,
    SYNSEM.LOCAL.KEYS.KEY season_rel & [ SEASON 'summer ] ].

:end :instance.


; <<>>

:begin :instance.

summon_v1 := mv_to*_trans_le &
  [ STEM < "summon" >,
    SYNSEM.LOCAL.KEYS.KEY _summon_rel ].

:end :instance.


; <<>>

:begin :instance.

sunday1 := day_of_week_le &
  [ STEM < "sunday" >,
    SYNSEM.LOCAL.KEYS.KEY.DAY 'sun ].

:end :instance.


; <<>>

:begin :instance.

sunday_cn := intr_temp_noun_le &
  [ STEM < "sunday" >,
    SYNSEM.LOCAL.KEYS.KEY dofw_rel & [ DAY 'sun ] ].

:end :instance.


; <<>>

:begin :instance.

sunny_a1 := intrans_adj_le &
  [ STEM < "sunny" >,
    SYNSEM.LOCAL.KEYS.KEY _sunny_rel ].

:end :instance.


; <<>>

:begin :instance.

super_a1 := intrans_adj_le &
  [ STEM < "super" >,
    SYNSEM.LOCAL.KEYS.KEY _super_rel ].

:end :instance.


; <<>>

:begin :instance.

superbly_adv1 := vp_adv_post_word_le &
  [ STEM < "superbly" >,
    SYNSEM.LOCAL.KEYS.KEY _superbly_rel ].

:end :instance.


; <<>>

:begin :instance.

superior_a1 := intrans_adj_le &
  [ STEM < "superior" >,
    SYNSEM.LOCAL.KEYS.KEY _superior_rel ].

:end :instance.


; <<>>

:begin :instance.

superstitious_a1 := intrans_adj_le &
  [ STEM < "superstitious" >,
    SYNSEM.LOCAL.KEYS.KEY _superstitious_rel ].

:end :instance.


; <<>>

:begin :instance.

superstitiously := adv_word_le &
  [ STEM < "superstitiously" >,
    SYNSEM.LOCAL.KEYS.KEY _superstitiously_rel ].

:end :instance.


; <<>>

:begin :instance.

supper_n1 := massn_le &
  [ STEM < "supper" >,
    SYNSEM.LOCAL.KEYS.KEY _supper_rel ].

:end :instance.


; <<>>

:begin :instance.

supper_n2 := intr_noun_word_le &
  [ STEM < "supper" >,
    SYNSEM.LOCAL.KEYS.KEY _supper_rel ].

:end :instance.


; <<>>

:begin :instance.

supper_time_n1 := mealtime_word_le &
  [ STEM < "supper" >,
    SYNSEM.LOCAL.KEYS.KEY _supper_time_rel ].

:end :instance.


; <<>>

:begin :instance.

suppose_v1 := mv_cp_prop*_non_trans_le &
  [ STEM < "suppose" >,
    SYNSEM.LOCAL.KEYS.KEY _suppose_rel ].

:end :instance.


; <<>>

:begin :instance.

suppose_v2 := mv_cp_prop_raise_key_le &
  [ STEM < "suppose" >,
    SYNSEM.LOCAL.KEYS.ALTKEY _suppose_rel ].

:end :instance.


; <<>>

:begin :instance.

supposed_a1 := reg_adj_equi_le &
  [ STEM < "supposed" >,
    SYNSEM.LOCAL.KEYS.KEY _supposed_rel ].

:end :instance.


; <<>>

:begin :instance.

sure_a1 := reg_adj_cp_le &
  [ STEM < "sure" >,
    SYNSEM.LOCAL.KEYS.KEY _sure_rel ].

:end :instance.


; <<>>

:begin :instance.

sure_a2 := trans_adj_le &
  [ STEM < "sure" >,
    SYNSEM.LOCAL.KEYS [ KEY _sure_adj_rel,
			--COMPKEY _of_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

sure_root := disc_adv_le &
  [ STEM < "sure" >,
    SYNSEM.LOCAL.KEYS.KEY excl_rel & [ EXCL 'sure ] ].

:end :instance.


; <<>>

:begin :instance.

surely_adv1 := adv_word_le &
  [ STEM < "surely" >,
    SYNSEM.LOCAL.KEYS.KEY _surely_rel ].

:end :instance.


; <<>>

:begin :instance.

surprise_n1 := intr_noun_word_le &
  [ STEM < "surprise" >,
    SYNSEM.LOCAL.KEYS.KEY _surprise_n_rel ].

:end :instance.


; <<>>

:begin :instance.

surprise_v1 := mv_np_trans_le &
  [ STEM < "surprise" >,
    SYNSEM.LOCAL.KEYS.KEY _surprise_v_rel ].

:end :instance.


; <<>>

:begin :instance.

suspend_v1 := mv_np_trans_le &
  [ STEM < "suspend" >,
    SYNSEM.LOCAL.KEYS.KEY _suspend_rel ].

:end :instance.


; <<>>

:begin :instance.

swell_a1 := intrans_adj_le &
  [ STEM < "swell" >,
    SYNSEM.LOCAL.KEYS.KEY _swell_rel ].

:end :instance.


; <<>>

:begin :instance.

swim_v1 := mv_unerg_le &
  [ STEM < "swim" >,
    SYNSEM.LOCAL.KEYS.KEY _swim_rel ].

:end :instance.


; <<>>

:begin :instance.

swing_v1 := mv_unacc_le &
  [ STEM < "swing" >,
    SYNSEM.LOCAL.KEYS.KEY _swing_v_rel ].

:end :instance.


; <<>>

:begin :instance.

switch_n1 := intr_noun_word_le &
  [ STEM < "switch" >,
    SYNSEM.LOCAL.KEYS.KEY _switch_n_rel ].

:end :instance.


; <<>>

:begin :instance.

switch_v1 := mv_unerg_le &
  [ STEM < "switch" >,
    SYNSEM.LOCAL.KEYS.KEY _switch_v_rel ].

:end :instance.


; <<>>

:begin :instance.

switch_v2 := mv_np_trans_le &
  [ STEM < "switch" >,
    SYNSEM.LOCAL.KEYS.KEY _switch_rel ].

:end :instance.


; <<>>

:begin :instance.

sympathetic_a1 := intrans_adj_le &
  [ STEM < "sympathetic" >,
    SYNSEM.LOCAL.KEYS.KEY _sympathetic_rel ].

:end :instance.


; <<>>

:begin :instance.

system_n1 := intr_noun_word_le &
  [ STEM < "system" >,
    SYNSEM.LOCAL.KEYS.KEY _system_rel ].

:end :instance.


; <<>>

:begin :instance.

systematically_adv1 := vp_adv_word_le &
  [ STEM < "systematically" >,
    SYNSEM.LOCAL.KEYS.KEY _systematically_rel ].

:end :instance.


; <<>>

:begin :instance.

table_n1 := intr_noun_word_le &
  [ STEM < "table" >,
    SYNSEM.LOCAL.KEYS.KEY _table_rel ].

:end :instance.


; <<>>

:begin :instance.

tackle_v1 := mv_np_trans_le &
  [ STEM < "tackle" >,
    SYNSEM.LOCAL.KEYS.KEY _tackle_rel ].

:end :instance.


; <<>>
; MULTIKEY < "tai" >

:begin :instance.

Tai_Pen_n1 := proper_mle1 &
  [ STEM < "tai", "pen" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Tai_Pen ].

:end :instance.


; <<>>

:begin :instance.

take_adv_v1 := mv_empty_prep_trans_le &
  [ STEM < "take" >,
    SYNSEM.LOCAL.KEYS [ KEY _take_adv_rel,
			--COMPKEY _advantage_rel,
			--OCOMPKEY _of_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

take_away_v1 := mv_particle_np_le &
  [ STEM < "take" >,
    SYNSEM.LOCAL.KEYS [ KEY _take_away_rel,
			--COMPKEY _away_adv_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

take_care_v1 := mv_empty_prep_trans_le &
  [ STEM < "take" >,
    SYNSEM.LOCAL.KEYS [ KEY _take_care_rel,
			--COMPKEY _care_n_rel,
			--OCOMPKEY _of_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

take_charge_of_v1 := mv_empty_prep_trans_le &
  [ STEM < "take" >,
    SYNSEM.LOCAL.KEYS [ KEY _take_charge_of_rel,
			--COMPKEY _charge_n_rel,
			--OCOMPKEY _of_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

take_down_v1 := mv_prep_particle_np_le &
  [ STEM < "take" >,
    SYNSEM.LOCAL.KEYS [ KEY _take_down_rel,
			--COMPKEY _down_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

take_hold_v1 := mv_empty_prep_trans_le &
  [ STEM < "take" >,
    SYNSEM.LOCAL.KEYS [ KEY _take_hold_rel,
			--COMPKEY _hold_n_rel,
			--OCOMPKEY _of_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

take_into_v1 := mv_empty_prep_trans_le &
  [ STEM < "take" >,
    SYNSEM.LOCAL [ CAT.VAL.COMPS 
			       < *top*, 
				[ LOCAL.KEYS [ KEY _into_rel_s,
					       --COMPKEY _account_n_rel ] ] >,
		   KEYS.KEY _take_into_rel ] ].

:end :instance.


; <<>>

:begin :instance.

take_off_v1 := mv_prep_particle_np_le &
  [ STEM < "take" >,
    SYNSEM.LOCAL.KEYS [ KEY _take_off_rel,
			--COMPKEY _off_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

take_out_v1 := mv_prep_particle_np_le &
  [ STEM < "take" >,
    SYNSEM.LOCAL.KEYS [ KEY _take_out_rel,
			--COMPKEY _out_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

take_over_v1 := mv_prep_particle_np_le &
  [ STEM < "take" >,
    SYNSEM.LOCAL.KEYS [ KEY _take_over_rel,
			--COMPKEY _over_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

take_place_v1 := mv_np_non_trans_unacc_le &
  [ STEM < "take" >,
    SYNSEM.LOCAL.KEYS [ KEY _take_place_rel,
			--COMPKEY _i_place_rel ] ].

:end :instance.


; <<>>

:begin :instance.

take_up_v1 := mv_prep_particle_np_le &
  [ STEM < "take" >,
    SYNSEM.LOCAL.KEYS [ KEY _take_up_rel,
			--COMPKEY _up_rel ] ].

:end :instance.


; <<>>

:begin :instance.

take_v1 := mv_prep*_trans_le &
  [ STEM < "take" >,
    SYNSEM.LOCAL.KEYS [ KEY _take_rel,
			--OCOMPKEY dir_rel ] ].

:end :instance.


; <<>>

:begin :instance.

take_part_in_v1 := mv_prep_trans_le &
  [ STEM < "take" >,
    SYNSEM.LOCAL.KEYS [ KEY _take_part_in_rel,
			--COMPKEY _part_rel,
			--OCOMPKEY _in_rel ] ].

:end :instance.


; <<>>

:begin :instance.

talent_n1 := intr_noun_word_le &
  [ STEM < "talent" >,
    SYNSEM.LOCAL.KEYS.KEY _talent_rel ].

:end :instance.


; <<>>

:begin :instance.

talk_n1 := intr_noun_word_le &
  [ STEM < "talk" >,
    SYNSEM.LOCAL.KEYS.KEY _talk_n_rel ].

:end :instance.


; <<>>

:begin :instance.

talk_over_v1 := mv_prep_particle_np_le &
  [ STEM < "talk" >,
    SYNSEM.LOCAL.KEYS [ KEY _talk_over_rel,
			--COMPKEY _over_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

talk_v1 := mv_empty_prep*_intrans_le &
  [ STEM < "talk" >,
    SYNSEM.LOCAL.KEYS [ KEY _talk_about_rel,
			--COMPKEY _to_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

tall_a1 := intrans_adj_le &
  [ STEM < "tall" >,
    SYNSEM.LOCAL.KEYS.KEY _tall_rel ].

:end :instance.


; <<>>

:begin :instance.

task_n1 := intr_noun_word_le &
  [ STEM < "task" >,
    SYNSEM.LOCAL.KEYS.KEY _task_rel ].

:end :instance.


; <<>>

:begin :instance.

taste_v1 := mv_np_trans_le &
  [ STEM < "taste" >,
    SYNSEM.LOCAL.KEYS.KEY _taste_v_rel ].

:end :instance.


; <<>>

:begin :instance.

taxi_n1 := intr_noun_word_le &
  [ STEM < "taxi" >,
    SYNSEM.LOCAL.KEYS.KEY _taxi_rel ].

:end :instance.


; <<>>

:begin :instance.

tea_n1 := massn_le &
  [ STEM < "tea" >,
    SYNSEM.LOCAL.KEYS.KEY _tea_rel ].

:end :instance.


; <<>>

:begin :instance.

tea_n2 := intr_noun_word_le &
  [ STEM < "tea" >,
    SYNSEM.LOCAL.KEYS.KEY _tea_rel ].

:end :instance.


; <<>>
; MULTIKEY < "time" >

:begin :instance.

tea_time_n1 := mealtime_word_mle &
  [ STEM < "tea", "time" >,
    SYNSEM.LOCAL.KEYS.KEY _tea_time_rel ].

:end :instance.


; <<>>

:begin :instance.

teach_v1 := mv_np*_trans_le &
  [ STEM < "teach" >,
    SYNSEM.LOCAL.KEYS.KEY _teach_rel ].

:end :instance.


; <<>>

:begin :instance.

teacher_n1 := intr_noun_word_le &
  [ STEM < "teacher" >,
    SYNSEM.LOCAL.KEYS.KEY _teacher_rel ].

:end :instance.


; <<>>

:begin :instance.

team_n1 := noun_ppof_word_le &
  [ STEM < "team" >,
    SYNSEM.LOCAL.KEYS.KEY _team_rel ].

:end :instance.


; <<>>

:begin :instance.

tear_v1 := mv_np_trans_le &
  [ STEM < "tear" >,
    SYNSEM.LOCAL.KEYS.KEY _tear_rel ].

:end :instance.


; <<>>

:begin :instance.

tear_v2 := mv_unacc_le &
  [ STEM < "tear" >,
    SYNSEM.LOCAL.KEYS.KEY _tear_und_rel ].

:end :instance.


; <<>>

:begin :instance.

technical_a1 := intrans_adj_le &
  [ STEM < "technical" >,
    SYNSEM.LOCAL.KEYS.KEY _technical_rel ].

:end :instance.


; <<>>

:begin :instance.

technicality_n1 := intr_noun_word_le &
  [ STEM < "technicality" >,
    SYNSEM.LOCAL.KEYS.KEY _technicality_rel ].

:end :instance.


; <<>>

:begin :instance.

technically := adv_word_le &
  [ STEM < "technically" >,
    SYNSEM.LOCAL.KEYS.KEY _technically_rel ].

:end :instance.


; <<>>

:begin :instance.

technique_n1 := intr_noun_word_le &
  [ STEM < "technique" >,
    SYNSEM.LOCAL.KEYS.KEY _technique_rel ].

:end :instance.


; <<>>

:begin :instance.

technology_n1 := massn_le &
  [ STEM < "technology" >,
    SYNSEM.LOCAL.KEYS.KEY _technology_rel ].

:end :instance.


; <<>>

:begin :instance.

telephone_n1 := intr_noun_word_le &
  [ STEM < "telephone" >,
    SYNSEM.LOCAL.KEYS.KEY _telephone_rel ].

:end :instance.


; <<>>

:begin :instance.

telephone_v1 := mv_np*_trans_le &
  [ STEM < "telephone" >,
    SYNSEM.LOCAL.KEYS.KEY _telephone_v_rel ].

:end :instance.


; <<>>

:begin :instance.

tell_about_v1 := mv_prep_trans_le &
  [ STEM < "tell" >,
    SYNSEM.LOCAL.KEYS [ KEY _tell_rel,
			--OCOMPKEY _about_rel ] ].

:end :instance.


; <<>>

:begin :instance.

tell_v1 := mv_ditrans*_only_le &
  [ STEM < "tell" >,
    SYNSEM.LOCAL.KEYS.KEY _tell3_rel ].

:end :instance.


; <<>>

:begin :instance.

tell_v2 := mv_np_trans_cp_le &
  [ STEM < "tell" >,
    SYNSEM.LOCAL.KEYS.KEY _tell_rel ].

:end :instance.


; <<>>

:begin :instance.

tell_v3 := mv_obj_equi_le &
  [ STEM < "tell" >,
    SYNSEM.LOCAL.KEYS.KEY _tell2_rel ].

:end :instance.


; <<>>

:begin :instance.

tempt_v1 := mv_np_trans_le &
  [ STEM < "tempt" >,
    SYNSEM.LOCAL.KEYS.KEY _tempt_rel ].

:end :instance.


; <<>>

:begin :instance.

ten := bare_unspecified_card_le & 
  [  STEM < "ten" >,
     SYNSEM.LOCAL [ CAT.HEAD intadj2,
		    KEYS.KEY.CONST_VALUE "10" ] ].

:end :instance.


; <<>>

:begin :instance.

ten_adjnoun := numadj_noun_word_le & 
  [ STEM < "ten" >,
    SYNSEM.LOCAL.KEYS.ALTKEY.CONST_VALUE "10" ].

:end :instance.


; <<>>

:begin :instance.

ten_hour := hour_word_le &
  [ STEM < "ten" >,
    SYNSEM.LOCAL.KEYS.KEY.HOUR "10" ].

:end :instance.


; <<>>

:begin :instance.

ten_minute := minute_word_le & 
  [ STEM < "ten" >,
    SYNSEM.LOCAL.KEYS.KEY.MINUTE "10" ].

:end :instance.


; <<>>

:begin :instance.

tend_v1 := mv_ssr_le &
  [ STEM < "tend" >,
    SYNSEM.LOCAL.KEYS.KEY _tend_rel ].

:end :instance.


; <<>>

:begin :instance.

tennis_n1 := massn_le &
  [ STEM < "tennis" >,
    SYNSEM.LOCAL.KEYS.KEY _tennis_rel ].

:end :instance.


; <<>>

:begin :instance.

tentative_a1 := intrans_adj_le &
  [ STEM < "tentative" >,
    SYNSEM.LOCAL.KEYS.KEY _tentative_rel ].

:end :instance.


; <<>>

:begin :instance.

tentatively := adv_word_le &
  [ STEM < "tentatively" >,
    SYNSEM.LOCAL.KEYS.KEY _tentatively_rel ].

:end :instance.


; <<>>

:begin :instance.

tenth := ordinal_adj_le &
  [ STEM < "tenth" >,
    SYNSEM.LOCAL.KEYS.KEY.ORD "10" ].

:end :instance.


; <<>>

:begin :instance.

tenth_day := day_of_month_le &
  [ STEM < "tenth" >,
    SYNSEM.LOCAL.KEYS.KEY.DAY "10" ].

:end :instance.


; <<>>

:begin :instance.

term_n1 := intr_noun_word_le &
  [ STEM < "term" >,
    SYNSEM.LOCAL.KEYS.KEY _term_rel ].

:end :instance.


; <<>>

:begin :instance.

terminate_v1 := mv_np_trans_le &
  [ STEM < "terminate" >,
    SYNSEM.LOCAL.KEYS.KEY _terminate_rel ].

:end :instance.


; <<>>

:begin :instance.

terminate_v2 := mv_unacc_le &
  [ STEM < "terminate" >,
    SYNSEM.LOCAL.KEYS.KEY _terminate_und_rel ].

:end :instance.


; <<>>

:begin :instance.

terrible_a1 := intrans_adj_le &
  [ STEM < "terrible" >,
    SYNSEM.LOCAL.KEYS.KEY _terrible_rel ].

:end :instance.


; <<>>

:begin :instance.

terribly_deg := degree_spec_le &
  [ STEM < "terribly" >,
    SYNSEM.LOCAL.KEYS.KEY _terribly_deg_rel ].

:end :instance.


; <<>>

:begin :instance.

terribly := vp_adv_post_word_le &
  [ STEM < "terribly" >,
    SYNSEM.LOCAL.KEYS.KEY _terribly_rel ].

:end :instance.


; <<>>

:begin :instance.

terrific_a1 := intrans_adj_le &
  [ STEM < "terrific" >,
    SYNSEM.LOCAL.KEYS.KEY _terrific_rel ].

:end :instance.


; <<>>

:begin :instance.

terror_n1 := massn_le &
  [ STEM < "terror" >,
    SYNSEM.LOCAL.KEYS.KEY _terror_rel ].

:end :instance.


; <<>>

:begin :instance.

test_n1 := intr_noun_word_le &
  [ STEM < "test" >,
    SYNSEM.LOCAL.KEYS.KEY _test_n_rel ].

:end :instance.


; <<>>

:begin :instance.

text_n1 := intr_noun_word_le &
  [ STEM < "text" >,
    SYNSEM.LOCAL.KEYS.KEY _text_rel ].

:end :instance.


; <<>>

:begin :instance.

Thai_n1 := proper_le &
  [ STEM < "thai" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Thai ].

:end :instance.


; <<>>

:begin :instance.

thank_for_v1 := mv_empty_prep*_trans_le &
  [ STEM < "thank" >,
    SYNSEM.LOCAL.KEYS [ KEY _thank_rel,
			--OCOMPKEY _for_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

thanks_n1 := plurn_le &
  [ STEM < "thanks" >,
    SYNSEM.LOCAL.KEYS.KEY _thanks_rel ].

:end :instance.


; <<>>
; MULTIKEY < "thank" >

:begin :instance.

thank_you_root := disc_adv_mle1 &
  [ STEM < "thank", "you" >,
    SYNSEM.LOCAL.KEYS.KEY excl_rel & [ EXCL 'thank_you ] ].

:end :instance.


; <<>>

:begin :instance.

thanks_root := disc_adv_le &
  [ STEM < "thanks" >,
    SYNSEM.LOCAL.KEYS.KEY excl_rel & [ EXCL 'thanks ] ].

:end :instance.


; <<>>

:begin :instance.

that_det := det_sm_le &
  [ STEM < "that" >,
    SYNSEM.LOCAL.KEYS.KEY _that_dem_rel ].

:end :instance.


; <<>>

:begin :instance.

that_c := that_c_le &
  [ STEM < "that" > ].

:end :instance.


; <<>>
; MULTIKEY < "that" >

:begin :instance.

that_is_root := disc_adv_mle1 &
  [ STEM < "that", "is" >,
    SYNSEM.LOCAL.KEYS.KEY excl_rel & [ EXCL 'that_is ] ].

:end :instance.


; <<>>

:begin :instance.

that_deix := deictic_pro_le &
  [ STEM < "that" >,
    SYNSEM.LOCAL.KEYS [ KEY.INST.PNG png & [ PN 3sg*,
					     GEN neut* ],
			ALTKEY _that_dem_rel ] ].
:end :instance.


; <<>>

:begin :instance.

that_r := rel_pro_word_le &
  [ STEM < "that" >,
    SYNSEM [ LOCAL.KEYS.KEY thing_rel ] ].

:end :instance.


; <<>>

:begin :instance.

the := det_le &
  [ STEM < "the" >,
    SYNSEM.LOCAL.KEYS.KEY _def_rel ].


:end :instance.


; <<>>
; MULTIKEY < "unity" >

:begin :instance.

german_unity_day := holiday_word_4mle4 &
  [ STEM < "day", "of", "german", "unity" >,
    SYNSEM.LOCAL.KEYS.KEY.DAY 'day_of_german_unity ].

:end :instance.


; <<>>
; MULTIKEY < "prayer_and_repentance" >

:begin :instance.

volkstrauertag := holiday_word_4mle4 &
  [ STEM < "the", "day", "of", "prayer_and_repentance" >,
    SYNSEM.LOCAL.KEYS.KEY.DAY 'day_of_prayer_and_repentance ].

:end :instance.


; <<>>

:begin :instance.

media_n1 := plurn_le &
  [ STEM < "media" >,
    SYNSEM.LOCAL.KEYS.KEY _media_rel ].

:end :instance.

; <<>>
; MULTIKEY < "same" >

:begin :instance.

the_same_a1 := irreg_pred_intrans_adj_mle2 &
  [ STEM < "the", "same" >,
    SYNSEM.LOCAL.KEYS.KEY _same_rel ].

:end :instance.


; <<>>

:begin :instance.

theater_n1 := intr_noun_word_le &
  [ STEM < "theater" >,
    SYNSEM.LOCAL.KEYS.KEY _theater_rel ].

:end :instance.


; <<>>

:begin :instance.

their := poss_le &
  [ STEM < "their" >,
    SYNSEM.LOCAL.CONT.LISZT <! relation, relation,
			       [ INST [ PNG png & [ PN 3pl* ],
					PRONTYPE std_3 ] ] !> ].
:end :instance.


; <<>>

:begin :instance.

theirs := poss_pro_le &
  [ STEM < "theirs" >,
    SYNSEM.LOCAL.CONT.LISZT.LIST.FIRST.INST.PNG png & [ PN 3pl* ] ].

:end :instance.


; <<>>

:begin :instance.

them := pers_pro_le &
  [ STEM < "them" >,
    SYNSEM.LOCAL [ CAT.HEAD.CASE acc,
		   KEYS.KEY.INST [ PNG png & [ PN 3pl* ],
				   PRONTYPE std_3 ] ] ].
:end :instance.


; <<>>

:begin :instance.

theme_n1 := intr_noun_word_le &
  [ STEM < "theme" >,
    SYNSEM.LOCAL.KEYS.KEY _theme_rel ].

:end :instance.


; <<>>

:begin :instance.

themselves := refl_pro_le &
  [ STEM < "themselves" >,
    SYNSEM.LOCAL.KEYS.KEY.INST.PNG png & [ PN 3pl* ] ].

:end :instance.


; <<>>

:begin :instance.

then_adv := np_adv_le &
  [ STEM < "then" >,
    SYNSEM.LOCAL.CONT.LISZT <! _time_rel, _that_dem_rel !> ].

:end :instance.


; <<>>

:begin :instance.

then_adv_vm := int_vp_adv_post_word_le &
  [ STEM < "then" >,
    SYNSEM.LOCAL.KEYS.KEY _then_temp_rel ].

:end :instance.


; <<>>

:begin :instance.

then_disc := disc_adv_le &
  [ STEM < "then" >,
    SYNSEM.LOCAL.KEYS.KEY excl_rel & [ EXCL 'then ] ].

:end :instance.


; <<>>

:begin :instance.

theoretical_a1 := intrans_adj_le &
  [ STEM < "theoretical" >,
    SYNSEM.LOCAL.KEYS.KEY _theoretical_rel ].

:end :instance.


; <<>>

:begin :instance.

theoretically_adv1 := vp_adv_word_le &
  [ STEM < "theoretically" >,
    SYNSEM.LOCAL.KEYS.KEY _theoretically_rel ].

:end :instance.


; <<>>

:begin :instance.

there_nom := np_adv_le &
  [ STEM < "there" >,
    SYNSEM.LOCAL [ CAT.HEAD.CASE acc,
                   CONT.LISZT <! place_rel, _that_dem_rel !> ] ].

:end :instance.


; <<>>

:begin :instance.

there_adv_vm := int_vp_adv_post_word_le &
  [ STEM < "there" >,
    SYNSEM.LOCAL.KEYS.KEY _there_rel ].


:end :instance.


; <<>>

:begin :instance.

there_expl := expl_there_le &
  [ STEM < "there" > ].

:end :instance.


; <<>>

:begin :instance.

thereabouts_adv1 := pp_le &
  [ STEM < "thereabouts" >,
    SYNSEM.LOCAL.KEYS.KEY _thereabouts_rel ].

:end :instance.


; <<>>

:begin :instance.

thereby_adv1 := vp_adv_pre_word_le &
  [ STEM < "thereby" >,
    SYNSEM.LOCAL.KEYS.KEY _thereby_rel ].

:end :instance.


; <<>>

:begin :instance.

thereby_adv2 := s_adv_pre_word_le &
  [ STEM < "thereby" >,
    SYNSEM.LOCAL.KEYS.KEY _thereby_rel ].

:end :instance.


; <<>>

:begin :instance.

therefore_root := disc_adv_le &
  [ STEM < "therefore" >,
    SYNSEM.LOCAL.KEYS.KEY excl_rel & [ EXCL 'therefore ] ].

:end :instance.


; <<>>

:begin :instance.

therefore_subord := subconj_le &
  [ STEM < "therefore" >,
    SYNSEM.LOCAL.KEYS.KEY _therefore_rel ].

:end :instance.


; <<>>

:begin :instance.

these_det := det_pl_le &
  [ STEM < "these" >,
    SYNSEM.LOCAL.KEYS.KEY _these_dem_rel ].

:end :instance.


; <<>>

:begin :instance.

these_deix := deictic_pro_le &
  [ STEM < "these" >,
    SYNSEM.LOCAL.KEYS [ KEY.INST.PNG png & [ PN 3pl* ],
			ALTKEY _these_dem_rel ] ].
:end :instance.


; <<>>

:begin :instance.

they := pers_pro_le &
  [ STEM < "they" >,
    SYNSEM.LOCAL [ CAT.HEAD.CASE nom,
		   KEYS.KEY.INST [ PNG png & [ PN 3pl* ],
				   PRONTYPE std_3 ] ] ].
:end :instance.


; <<>>

:begin :instance.

they_sg := pers_pro_noagr_le &
  [ STEM < "they" >,
    SYNSEM.LOCAL [ CAT.HEAD.CASE nom,
		   KEYS.KEY.INST.PNG png & [ PN 3sg*,
					     GEN andro* ],
		   AGR.PNG png & [ PN 3pl* ] ] ].
:end :instance.


; <<>>

:begin :instance.

thing_n1 := intr_noun_word_le &
  [ STEM < "thing" >,
    SYNSEM.LOCAL.KEYS.KEY _thing_rel ].

:end :instance.


; <<>>

:begin :instance.

think_about := mv_empty_prep_intrans_le &
  [ STEM < "think" >,
    SYNSEM.LOCAL.KEYS [ KEY _think_about_rel,
			--COMPKEY _about_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

think_of := mv_empty_prep_intrans_le &
  [ STEM < "think" >,
    SYNSEM.LOCAL.KEYS [ KEY _think_of_rel,
			--COMPKEY _of_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

think_through_v1 := mv_prep_particle_np_le &
  [ STEM < "think" >,
    SYNSEM.LOCAL.KEYS [ KEY _think_through_rel,
			--COMPKEY _through_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

think1 := mv_cp_prop_non_trans_le &
  [ STEM < "think" >,
    SYNSEM.LOCAL.KEYS.KEY _think_h_rel ].

:end :instance.


; <<>>

:begin :instance.

think2 := mv_prep_intrans_event_le &
  [ STEM < "think" >,
    SYNSEM.LOCAL.KEYS [ KEY _think_loc_rel,
			--COMPKEY loc_abstr_rel ] ].

:end :instance.


; <<>>

:begin :instance.

think_v3 := mv_np*_non_trans_le &
  [ STEM < "think" >,
    SYNSEM.LOCAL.KEYS.KEY _think_rel ].

:end :instance.


; <<>>

:begin :instance.

third := ordinal_adj_le &
  [ STEM < "third" >,
    SYNSEM.LOCAL.KEYS.KEY.ORD "3" ].

:end :instance.


; <<>>

:begin :instance.

third_day := day_of_month_le &
  [ STEM < "third" >,
    SYNSEM.LOCAL.KEYS.KEY.DAY "3" ].

:end :instance.


; <<>>

:begin :instance.

thirteen := bare_unspecified_card_le & 
  [  STEM < "thirteen" >,
     SYNSEM.LOCAL [ CAT.HEAD intadj2,
		    KEYS.KEY.CONST_VALUE "13" ] ].
:end :instance.


; <<>>

:begin :instance.

thirteenth := ordinal_adj_le &
  [ STEM < "thirteenth" >,
    SYNSEM.LOCAL.KEYS.KEY.ORD "13" ].

:end :instance.


; <<>>

:begin :instance.

thirteenth_day := day_of_month_le &
  [ STEM < "thirteenth" >,
    SYNSEM.LOCAL.KEYS.KEY.DAY "13" ].

:end :instance.


; <<>>

:begin :instance.

thirtieth := ordinal_adj_le &
  [ STEM < "thirtieth" >,
    SYNSEM.LOCAL.KEYS.KEY.ORD "30" ].

:end :instance.


; <<>>

:begin :instance.

thirtieth_day := day_of_month_le &
  [ STEM < "thirtieth" >,
    SYNSEM.LOCAL.KEYS.KEY.DAY "30" ].

:end :instance.


; <<>>

:begin :instance.

thirty_w_comps := complemented_unspecified_card_le & 
  [ STEM < "thirty" >,
    SYNSEM.LOCAL [ CAT [ HEAD intadj2,
			 VAL.COMPS.FIRST.LOCAL.CAT.HEAD intadj1 ],
		   KEYS.KEY.CONST_VALUE "30" ] ].
:end :instance.


; <<>>

:begin :instance.

thirty := bare_unspecified_card_le & 
  [  STEM < "thirty" >,
     SYNSEM.LOCAL [ CAT.HEAD intadj2,
		    KEYS.KEY.CONST_VALUE "30" ] ].
:end :instance.


; <<>>

:begin :instance.

thirty_minute := minute_word_le &
  [ STEM < "thirty" >,
    SYNSEM.LOCAL [ CAT.POSTHEAD +,
		   KEYS.KEY.MINUTE "30" ] ].

:end :instance.


; <<>>

:begin :instance.

thirtyeighth := ordinal_adj_le &
  [ STEM < "thirtyeighth" >,
    SYNSEM.LOCAL.KEYS.KEY.ORD "38" ].

:end :instance.


; <<>>

:begin :instance.

thirtyfifth := ordinal_adj_le &
  [ STEM < "thirtyfifth" >,
    SYNSEM.LOCAL.KEYS.KEY.ORD "35" ].

:end :instance.


; <<>>

:begin :instance.

thirtyfirst := ordinal_adj_le &
  [ STEM < "thirtyfirst" >,
    SYNSEM.LOCAL.KEYS.KEY.ORD "31" ].

:end :instance.


; <<>>
; MULTIKEY < "thirty" >

:begin :instance.

thirtyfirst_day := day_of_month_mle &
  [ STEM < "thirty", "first" >,
    SYNSEM.LOCAL.KEYS.KEY.DAY "31" ].

:end :instance.


; <<>>

:begin :instance.

thirtyfourth := ordinal_adj_le &
  [ STEM < "thirtyfourth" >,
    SYNSEM.LOCAL.KEYS.KEY.ORD "34" ].

:end :instance.


; <<>>

:begin :instance.

thirtyninth := ordinal_adj_le &
  [ STEM < "thirtyninth" >,
    SYNSEM.LOCAL.KEYS.KEY.ORD "39" ].

:end :instance.


; <<>>

:begin :instance.

thirtysecond := ordinal_adj_le &
  [ STEM < "thirtysecond" >,
    SYNSEM.LOCAL.KEYS.KEY.ORD "32" ].

:end :instance.


; <<>>

:begin :instance.

thirtyseventh := ordinal_adj_le &
  [ STEM < "thirtyseventh" >,
    SYNSEM.LOCAL.KEYS.KEY.ORD "37" ].

:end :instance.


; <<>>

:begin :instance.

thirtysixth := ordinal_adj_le &
  [ STEM < "thirtysixth" >,
    SYNSEM.LOCAL.KEYS.KEY.ORD "36" ].

:end :instance.


; <<>>

:begin :instance.

thirtythird := ordinal_adj_le &
  [ STEM < "thirtythird" >,
    SYNSEM.LOCAL.KEYS.KEY.ORD "33" ].

:end :instance.


; <<>>

:begin :instance.

this_det := det_sm_le &
  [ STEM < "this" >,
    SYNSEM.LOCAL.KEYS.KEY _this_dem_rel ].

:end :instance.


; <<>>

:begin :instance.

this_deix := deictic_pro_le &
  [ STEM < "this" >,
    SYNSEM.LOCAL.KEYS [ KEY.INST.PNG png & [ PN 3sg*,
					     GEN neut* ],
			ALTKEY _this_dem_rel ] ].
:end :instance.


; <<>>

:begin :instance.

thorough_a1 := intrans_adj_le &
  [ STEM < "thorough" >,
    SYNSEM.LOCAL.KEYS.KEY _thorough_rel ].

:end :instance.


; <<>>

:begin :instance.

thoroughly_adv1 := vp_adv_word_le &
  [ STEM < "thoroughly" >,
    SYNSEM.LOCAL.KEYS.KEY _thoroughly_rel ].

:end :instance.


; <<>>

:begin :instance.

those_det := det_pl_le &
  [ STEM < "those" >,
    SYNSEM.LOCAL.KEYS.KEY _those_dem_rel ].

:end :instance.


; <<>>

:begin :instance.

those_deix := deictic_pro_le &
  [ STEM < "those" >,
    SYNSEM.LOCAL.KEYS [ KEY.INST.PNG png & [ PN 3pl* ],
			ALTKEY _those_dem_rel ] ].
:end :instance.


; <<>>

:begin :instance.

though_root := disc_adv_le &
  [ STEM < "though" >,
    SYNSEM.LOCAL.KEYS.KEY excl_rel & [ EXCL 'though ] ].

:end :instance.


; <<>>

:begin :instance.

though_subord := subconj_le &
  [ STEM < "though" >,
    SYNSEM.LOCAL.KEYS.KEY _though_rel ].

:end :instance.


; <<>>

:begin :instance.

though := vp_adv_post_word_le &
  [ STEM < "though" >,
    SYNSEM.LOCAL.KEYS.KEY _though_scop_rel ].

:end :instance.


; <<>>

:begin :instance.

thought_n1 := intr_noun_word_le &
  [ STEM < "thought" >,
    SYNSEM.LOCAL.KEYS.KEY _thought_rel ].

:end :instance.


; <<>>

:begin :instance.

thousand := bare_specified_card_le & 
  [ STEM < "thousand" >,
    SYNSEM.LOCAL [ CAT [ HEAD intadj6,
			 VAL.SPR.FIRST.LOCAL.CAT.HEAD intadj3 ],
		   KEYS.KEY.CONST_VALUE "1000" ] ].
:end :instance.


; <<>>

:begin :instance.

three := bare_unspecified_card_le & 
  [  STEM < "three" >,
     SYNSEM.LOCAL [ CAT.HEAD intadj1,
		    KEYS.KEY.CONST_VALUE "3" ] ].
:end :instance.


; <<>>

:begin :instance.

three_hour := hour_word_le &
  [ STEM < "three" >,
    SYNSEM.LOCAL.KEYS.KEY.HOUR "3" ].

:end :instance.


; <<>>

:begin :instance.

three_adjnoun := numadj_noun_word_le & 
  [ STEM < "three" >,
    SYNSEM.LOCAL.KEYS.ALTKEY.CONST_VALUE "3" ].

:end :instance.


; <<>>

:begin :instance.

through := prep_le &
  [ STEM < "through" >,
    SYNSEM.LOCAL.KEYS.KEY _through_rel_a ].

:end :instance.


; <<>>

:begin :instance.

throughout := reg_prep_le &
  [ STEM < "throughout" >,
    SYNSEM.LOCAL.KEYS.KEY _throughout_rel ].

:end :instance.


; <<>>

:begin :instance.

throw_open_v1 := mv_particle_np_le &
  [ STEM < "throw" >,
    SYNSEM.LOCAL.KEYS [ KEY _throw_open_rel,
			--COMPKEY _open_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

throw_v1 := mv_np_trans_le &
  [ STEM < "throw" >,
    SYNSEM.LOCAL.KEYS.KEY _throw_rel ].

:end :instance.


; <<>>

:begin :instance.

thursday1 := day_of_week_le &
  [ STEM < "thursday" >,
    SYNSEM.LOCAL.KEYS.KEY.DAY 'thu ].

:end :instance.


; <<>>

:begin :instance.

thursday_cn := intr_temp_noun_le &
  [ STEM < "thursday" >,
    SYNSEM.LOCAL.KEYS.KEY dofw_rel & [ DAY 'thu ] ].

:end :instance.


; <<>>

:begin :instance.

thus_adv1 := vp_adv_pre_word_le &
  [ STEM < "thus" >,
    SYNSEM.LOCAL.KEYS.KEY _thus_rel ].

:end :instance.


; <<>>

:begin :instance.

thus_adv2 := s_adv_pre_word_le &
  [ STEM < "thus" >,
    SYNSEM.LOCAL.KEYS.KEY _thus_rel ].

:end :instance.


; <<>>

:begin :instance.

ticket_n1 := intr_noun_word_le &
  [ STEM < "ticket" >,
    SYNSEM.LOCAL.KEYS.KEY _ticket_rel ].

:end :instance.


; <<>>

:begin :instance.

tie_up_v1 := mv_prep_particle_np_le &
  [ STEM < "tie" >,
    SYNSEM.LOCAL.KEYS [ KEY _tie_up_rel,
			--COMPKEY _up_rel ] ].

:end :instance.


; <<>>

:begin :instance.

tie_v1 := mv_np_trans_le &
  [ STEM < "tie" >,
    SYNSEM.LOCAL.KEYS.KEY _tie_v_rel ].

:end :instance.


; <<>>
; MULTIKEY < "tied" >

:begin :instance.

tied_up_a1 := irreg_pred_intrans_adj_mle1 &
  [ STEM < "tied", "up" >,
    SYNSEM.LOCAL.KEYS.KEY _tied_up_rel ].

:end :instance.


; <<>>

:begin :instance.

tight_a1 := intrans_adj_le &
  [ STEM < "tight" >,
    SYNSEM.LOCAL.KEYS.KEY _tight_rel ].

:end :instance.


; <<>>

:begin :instance.

tightly := adv_word_le &
  [ STEM < "tightly" >,
    SYNSEM.LOCAL.KEYS.KEY _tightly_rel ].

:end :instance.


; <<>>

:begin :instance.

till_hour := hour_prep_word_le &
  [ STEM < "till" >,
    SYNSEM.LOCAL.KEYS.KEY _before_hour_rel ].

:end :instance.


; <<>>

:begin :instance.

till_cp := prep_cp_le &
  [ STEM < "till" >,
    SYNSEM.LOCAL.KEYS.KEY _until_rel ].

:end :instance.


; <<>>

:begin :instance.

till := prep_le &
  [ STEM < "till" >,
    SYNSEM.LOCAL.KEYS.KEY _until_rel_a ].

:end :instance.


; <<>>

:begin :instance.

time1 := massn_le &
  [ STEM < "time" >,
    SYNSEM.LOCAL.KEYS.KEY _time_mass_rel ].

:end :instance.


; <<>>

:begin :instance.

time_n1 := intr_temp_noun_le &
  [ STEM < "time" >,
    SYNSEM.LOCAL.KEYS.KEY _time_rel ].

:end :instance.


; <<>>

:begin :instance.

timetable_n1 := intr_noun_word_le &
  [ STEM < "timetable" >,
    SYNSEM.LOCAL.KEYS.KEY _timetable_rel ].

:end :instance.


; <<>>

:begin :instance.

tired_a1 := intrans_adj_le &
  [ STEM < "tired" >,
    SYNSEM.LOCAL.KEYS.KEY _tired_rel ].

:end :instance.


; <<>>

:begin :instance.

tiresome_a1 := intrans_adj_le &
  [ STEM < "tiresome" >,
    SYNSEM.LOCAL.KEYS.KEY _tiresome_rel ].

:end :instance.


; <<>>

:begin :instance.

title_n1 := intr_noun_word_le &
  [ STEM < "title" >,
    SYNSEM.LOCAL.KEYS.KEY _title_n_rel ].

:end :instance.


; <<>>

:begin :instance.

to := prep_le &
  [ STEM < "to" >,
    SYNSEM.LOCAL.KEYS.KEY _to_rel_a ].

:end :instance.


; <<>>
; MULTIKEY < "honest" >

:begin :instance.

to_be_honest_adv1 := vp_adv_post_word_3mle3 &
  [ STEM < "to", "be", "honest" >,
    SYNSEM.LOCAL.KEYS.KEY _to_be_honest_rel ].

:end :instance.


; <<>>
; MULTIKEY < "sure" >

:begin :instance.

to_make_sure_adv1 := vp_adv_post_word_3mle3 &
  [ STEM < "to", "make", "sure" >,
    SYNSEM.LOCAL.KEYS.KEY _to_make_sure_rel ].

:end :instance.


; <<>>

:begin :instance.

to_c_prop := to_c_prop_le &
  [ STEM < "to" > ].

:end :instance.


; <<>>

:begin :instance.

to_c_nonprop := to_c_nonprop_le &
  [ STEM < "to" > ].

:end :instance.


; <<>>

:begin :instance.

to_c_prop_elided := to_c_prop_elided_le &
  [ STEM < "to" > ].

:end :instance.


; <<>>

:begin :instance.

to_c_nonprop_elided := to_c_nonprop_elided_le &
  [ STEM < "to" > ].

:end :instance.


; <<>>
; MULTIKEY < "do" >

:begin :instance.

to_do_with := prep_3mle2 &
  [ STEM < "to", "do", "with" >,
    SYNSEM.LOCAL.KEYS.KEY _to_do_with_rel_a ].

:end :instance.


; <<>>

:begin :instance.

to_hour := hour_prep_word_le &
  [ STEM < "to" >,
    SYNSEM.LOCAL.KEYS.KEY _before_hour_rel ].

:end :instance.


; <<>>

:begin :instance.

to_until := prep_nomod_le &
  [ STEM < "to" >,
    SYNSEM.LOCAL.KEYS [ KEY _to_until_rel_a,
			--COMPKEY temp_abstr_rel ] ].

:end :instance.


; <<>>

:begin :instance.
to_subord := subconj_inf_le &
  [ STEM < "to" >,
    SYNSEM.LOCAL.KEYS.KEY _in_order_to_rel ].

:end :instance.


; <<>>

:begin :instance.

today := np_adv_le &
  [ STEM < "today" >,
    SYNSEM.LOCAL.CONT.LISZT <! _day_rel, _this_dem_rel !> ].

:end :instance.


; <<>>

:begin :instance.

today_adv_vm := int_vp_adv_post_word_le &
  [ STEM < "today" >,
    SYNSEM.LOCAL.KEYS.KEY _today_rel ].

:end :instance.


; <<>>

:begin :instance.

together := pp_le &
  [ STEM < "together" >,
    SYNSEM.LOCAL.KEYS.KEY _together_rel_a ].

:end :instance.


; <<>>

:begin :instance.

tolerable_a1 := intrans_adj_le &
  [ STEM < "tolerable" >,
    SYNSEM.LOCAL.KEYS.KEY _tolerable_rel ].

:end :instance.


; <<>>

:begin :instance.

tolerably_adv1 := vp_adv_pre_word_le &
  [ STEM < "tolerably" >,
    SYNSEM.LOCAL.KEYS.KEY _tolerably_rel ].

:end :instance.


; <<>>

:begin :instance.

tolerably_adv2 := s_adv_pre_word_le &
  [ STEM < "tolerably" >,
    SYNSEM.LOCAL.KEYS.KEY _tolerably_rel ].

:end :instance.


; <<>>

:begin :instance.

tomorrow_adv_vm := int_vp_adv_post_word_le &
  [ STEM < "tomorrow" >,
    SYNSEM.LOCAL.KEYS.KEY _tomorrow_rel ].

:end :instance.


; <<>>

:begin :instance.

tonight := day_of_week_le &
  [ STEM < "tonight" >,
    SYNSEM.LOCAL.KEYS.KEY.DAY 'tonight ].

:end :instance.


; <<>>

:begin :instance.

too_deg := degree_spec_le &
  [ STEM < "too" >,
    SYNSEM.LOCAL.KEYS.KEY _too_deg_rel ].

:end :instance.


; <<>>

:begin :instance.

too := vp_adv_post_word_le &
  [ STEM < "too" >,
    SYNSEM.LOCAL.KEYS.KEY _too_also_rel ].

:end :instance.


; <<>>

:begin :instance.

top_a1 := intrans_adj_le &
  [ STEM < "top" >,
    SYNSEM.LOCAL.KEYS.KEY _top_adj_rel ].

:end :instance.


; <<>>

:begin :instance.

top_n1 := intr_noun_word_le &
  [ STEM < "top" >,
    SYNSEM.LOCAL.KEYS.KEY _top_rel ].

:end :instance.


; <<>>

:begin :instance.

topic_n1 := intr_noun_word_le &
  [ STEM < "topic" >,
    SYNSEM.LOCAL.KEYS.KEY _topic_rel ].

:end :instance.


; <<>>

:begin :instance.

total_a1 := intrans_adj_le &
  [ STEM < "total" >,
    SYNSEM.LOCAL.KEYS.KEY _total_rel ].

:end :instance.


; <<>>

:begin :instance.

totally_deg := degree_spec_le &
  [ STEM < "totally" >,
    SYNSEM.LOCAL.KEYS.KEY _totally_deg_rel ].

:end :instance.


; <<>>

:begin :instance.

totally_adv1 := int_vp_adv_post_word_le &
  [ STEM < "totally" >,
    SYNSEM.LOCAL.KEYS.KEY _totally_rel ].

:end :instance.


; <<>>

:begin :instance.

totally_adv2 := s_adv_pre_word_le &
  [ STEM < "totally" >,
    SYNSEM.LOCAL.KEYS.KEY _totally_rel ].

:end :instance.


; <<>>

:begin :instance.

touch_v1 := mv_np_trans_le &
  [ STEM < "touch" >,
    SYNSEM.LOCAL.KEYS.KEY _touch_v_rel ].

:end :instance.


; <<>>

:begin :instance.

touch_v2 := mv_unerg_le &
  [ STEM < "touch" >,
    SYNSEM.LOCAL.KEYS.KEY _touch_meet_rel ].

:end :instance.


; <<>>

:begin :instance.

tour_n1 := intr_noun_word_le &
  [ STEM < "tour" >,
    SYNSEM.LOCAL.KEYS.KEY _tour_n_rel ].

:end :instance.


; <<>>

:begin :instance.

toward := prep_le &
  [ STEM < "toward" >,
    SYNSEM.LOCAL.KEYS.KEY _toward_rel ].

:end :instance.


; <<>>

:begin :instance.

towards := prep_le &
  [ STEM < "towards" >,
    SYNSEM.LOCAL.KEYS.KEY _towards_rel_a ].

:end :instance.


; <<>>

:begin :instance.

town_n1 := massn_le &
  [ STEM < "town" >,
    SYNSEM.LOCAL.KEYS.KEY _town_rel ].

:end :instance.


; <<>>

:begin :instance.

track_n1 := intr_noun_word_le &
  [ STEM < "track" >,
    SYNSEM.LOCAL.KEYS.KEY _track_n_rel ].

:end :instance.


; <<>>

:begin :instance.

track_v1 := mv_np_trans_le &
  [ STEM < "track" >,
    SYNSEM.LOCAL.KEYS.KEY _track_v_rel ].

:end :instance.


; <<>>

:begin :instance.

tragic_a1 := intrans_adj_le &
  [ STEM < "tragic" >,
    SYNSEM.LOCAL.KEYS.KEY _tragic_rel ].

:end :instance.


; <<>>

:begin :instance.

train_n1 := intr_noun_word_le &
  [ STEM < "train" >,
    SYNSEM.LOCAL.KEYS.KEY _train_n_rel ].

:end :instance.


; <<>>

:begin :instance.

train_v1 := mv_np_trans_le &
  [ STEM < "train" >,
    SYNSEM.LOCAL.KEYS.KEY _train_v_rel ].

:end :instance.


; <<>>

:begin :instance.

training_n1 := intr_noun_word_le &
  [ STEM < "training" >,
    SYNSEM.LOCAL.KEYS.KEY _training_rel ].

:end :instance.


; <<>>

:begin :instance.

tranquil_a1 := intrans_adj_le &
  [ STEM < "tranquil" >,
    SYNSEM.LOCAL.KEYS.KEY _tranquil_rel ].

:end :instance.


; <<>>

:begin :instance.

transact_v1 := mv_np_trans_le &
  [ STEM < "transact" >,
    SYNSEM.LOCAL.KEYS.KEY _transact_rel ].

:end :instance.


; <<>>

:begin :instance.

transportation_n1 := massn_le &
  [ STEM < "transportation" >,
    SYNSEM.LOCAL.KEYS.KEY _transportation_rel ].

:end :instance.


; <<>>

:begin :instance.

travel_n1 := massn_le &
  [ STEM < "travel" >,
    SYNSEM.LOCAL.KEYS.KEY _travel_n_rel ].

:end :instance.


; <<>>

:begin :instance.

travel_v1 := mv_prep*_intrans_le &
  [ STEM < "travel" >,
    SYNSEM.LOCAL.KEYS.KEY _travel_v_rel ].

:end :instance.


; <<>>

:begin :instance.

tree_n1 := intr_noun_word_le &
  [ STEM < "tree" >,
    SYNSEM.LOCAL.KEYS.KEY _tree_rel ].

:end :instance.


; <<>>

:begin :instance.

trick_n1 := intr_noun_word_le &
  [ STEM < "trick" >,
    SYNSEM.LOCAL.KEYS.KEY _trick_rel ].

:end :instance.


; <<>>

:begin :instance.

trip_n1 := noun_ppcomp_word_le &
  [ STEM < "trip" >,
    SYNSEM.LOCAL.KEYS.KEY _trip_rel ].

:end :instance.


; <<>>

:begin :instance.

trouble_n1 := massn_le &
  [ STEM < "trouble" >,
    SYNSEM.LOCAL.KEYS.KEY _trouble_rel ].

:end :instance.


; <<>>

:begin :instance.

trouble_v1 := mv_np_trans_le &
  [ STEM < "trouble" >,
    SYNSEM.LOCAL.KEYS.KEY _trouble_v_rel ].

:end :instance.


; <<>>

:begin :instance.

troublesome_a1 := intrans_adj_le &
  [ STEM < "troublesome" >,
    SYNSEM.LOCAL.KEYS.KEY _troublesome_rel ].

:end :instance.


; <<>>

:begin :instance.

true_a1 := reg_adj_atrans_that_cp_le &
  [ STEM < "true" >,
    SYNSEM.LOCAL.KEYS.KEY _true_rel ].

:end :instance.


; <<>>

:begin :instance.

true_a2 := intrans_adj_le &
  [ STEM < "true" >,
    SYNSEM.LOCAL.KEYS.KEY _true_rel ].

:end :instance.


; <<>>

:begin :instance.

truly := adv_word_le &
  [ STEM < "truly" >,
    SYNSEM.LOCAL.KEYS.KEY _truly_rel ].

:end :instance.


; <<>>

:begin :instance.

trust_v1 := mv_np_trans_le &
  [ STEM < "trust" >,
    SYNSEM.LOCAL.KEYS.KEY _trust_rel ].

:end :instance.


; <<>>

:begin :instance.

trust_v2 := mv_cp_prop_non_trans_le &
  [ STEM < "trust" >,
    SYNSEM.LOCAL.KEYS.KEY _trust_h_rel ].

:end :instance.


; <<>>

:begin :instance.

trustworthy_a1 := intrans_adj_le &
  [ STEM < "trustworthy" >,
    SYNSEM.LOCAL.KEYS.KEY _trustworthy_rel ].

:end :instance.


; <<>>

:begin :instance.

truth_n1 := massn_le &
  [ STEM < "truth" >,
    SYNSEM.LOCAL.KEYS.KEY _truth_rel ].

:end :instance.


; <<>>

:begin :instance.

try_v1 := mv_np*_trans_le &
  [ STEM < "try" >,
    SYNSEM.LOCAL.KEYS.KEY _try_v_rel ].

:end :instance.


; <<>>

:begin :instance.

try_v2 := mv_subj_equi_le &
  [ STEM < "try" >,
    SYNSEM.LOCAL.KEYS.KEY _try2_rel ].

:end :instance.


; <<>>

:begin :instance.

try_out_v1 := mv_prep_particle_np_le &
  [ STEM < "try" >,
    SYNSEM.LOCAL.KEYS [ KEY _try_out_rel,
			--COMPKEY _out_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

tuck_v1 := mv_prep_trans_le &
  [ STEM < "tuck" >,
    SYNSEM.LOCAL.KEYS [ KEY _tuck_rel,
			--OCOMPKEY dir_rel ] ].

:end :instance.


; <<>>

:begin :instance.

Tuebingen_n1 := proper_le &
  [ STEM < "tuebingen" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Tuebingen ].

:end :instance.


; <<>>

:begin :instance.

tuesday1 := day_of_week_le &
  [ STEM < "tuesday" >,
    SYNSEM.LOCAL.KEYS.KEY.DAY 'tue ].

:end :instance.


; <<>>

:begin :instance.

tuesday_cn := intr_temp_noun_le &
  [ STEM < "tuesday" >,
    SYNSEM.LOCAL.KEYS.KEY dofw_rel & [ DAY 'tue ] ].

:end :instance.


; <<>>

:begin :instance.

tuition_n1 := massn_le &
  [ STEM < "tuition" >,
    SYNSEM.LOCAL.KEYS.KEY _tuition_rel ].

:end :instance.


; <<>>

:begin :instance.

turn_down_v1 := mv_prep_particle_np_le &
  [ STEM < "turn" >,
    SYNSEM.LOCAL.KEYS [ KEY _turn_down_rel,
			--COMPKEY _down_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

turn_n1 := intr_noun_word_le &
  [ STEM < "turn" >,
    SYNSEM.LOCAL.KEYS.KEY _turn_n_rel ].

:end :instance.


; <<>>

:begin :instance.

turn_off_v1 := mv_prep_particle_np_le &
  [ STEM < "turn" >,
    SYNSEM.LOCAL.KEYS [ KEY _turn_off_rel,
			--COMPKEY _off_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

turn_out_v1 := mv_particle_inf_le &
  [ STEM < "turn" >,
    SYNSEM.LOCAL.KEYS [ KEY _turn_out_rel,
			--COMPKEY _out_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

turn_out_v2 := mv_particle_prd_le &
  [ STEM < "turn" >,
    SYNSEM.LOCAL.KEYS [ KEY _turn_out_rel,
			--COMPKEY _out_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

turn_v1 := mv_unerg_le &
  [ STEM < "turn" >,
    SYNSEM.LOCAL.KEYS.KEY _turn_v_rel ].

:end :instance.


; <<>>

:begin :instance.

twelfth_day := day_of_month_le &
  [ STEM < "twelfth" >,
    SYNSEM.LOCAL.KEYS.KEY.DAY "12" ].

:end :instance.


; <<>>

:begin :instance.

twelve := bare_unspecified_card_le & 
  [  STEM < "twelve" >,
     SYNSEM.LOCAL [ CAT.HEAD intadj2,
		    KEYS.KEY.CONST_VALUE "12" ] ].
:end :instance.


; <<>>

:begin :instance.

twelve_hour := hour_word_le &
  [ STEM < "twelve" >,
    SYNSEM.LOCAL.KEYS.KEY.HOUR "12" ].

:end :instance.


; <<>>

:begin :instance.

twentieth_day := day_of_month_le &
  [ STEM < "twentieth" >,
    SYNSEM.LOCAL.KEYS.KEY.DAY "20" ].

:end :instance.


; <<>>

:begin :instance.

twenty_w_comps := complemented_unspecified_card_le & 
  [ STEM < "twenty" >,
    SYNSEM.LOCAL [ CAT [ HEAD intadj2,
			 VAL.COMPS.FIRST.LOCAL.CAT.HEAD intadj1 ],
		   KEYS.KEY.CONST_VALUE "20" ] ].
:end :instance.


; <<>>

:begin :instance.

twenty := bare_unspecified_card_le & 
  [  STEM < "twenty" >,
     SYNSEM.LOCAL [ CAT.HEAD intadj2,
		    KEYS.KEY.CONST_VALUE "20" ] ].
:end :instance.


; <<>>

:begin :instance.

twenty_minute := minute_word_le &
  [ STEM < "twenty" >,
    SYNSEM.LOCAL.KEYS.KEY.MINUTE "20" ].

:end :instance.


; <<>>

:begin :instance.

twentyeighth := ordinal_adj_le &
  [ STEM < "twentyeighth" >,
    SYNSEM.LOCAL.KEYS.KEY.ORD "28" ].

:end :instance.


; <<>>
; MULTIKEY < "twenty" >

:begin :instance.

twentyeighth_day := day_of_month_mle &
  [ STEM < "twenty", "eighth" >,
    SYNSEM.LOCAL.KEYS.KEY.DAY "28" ].

:end :instance.


; <<>>

:begin :instance.

twentyfifth := ordinal_adj_le &
  [ STEM < "twentyfifth" >,
    SYNSEM.LOCAL.KEYS.KEY.ORD "25" ].

:end :instance.


; <<>>
; MULTIKEY < "twenty" >

:begin :instance.

twentyfifth_day := day_of_month_mle &
  [ STEM < "twenty", "fifth" >,
    SYNSEM.LOCAL.KEYS.KEY.DAY "25" ].

:end :instance.


; <<>>

:begin :instance.

twentyfirst := ordinal_adj_le &
  [ STEM < "twentyfirst" >,
    SYNSEM.LOCAL.KEYS.KEY.ORD "21" ].

:end :instance.


; <<>>
; MULTIKEY < "twenty" >

:begin :instance.

twentyfirst_day := day_of_month_mle &
  [ STEM < "twenty", "first" >,
    SYNSEM.LOCAL.KEYS.KEY.DAY "21" ].

:end :instance.


; <<>>

:begin :instance.

twentyfourth := ordinal_adj_le &
  [ STEM < "twentyfourth" >,
    SYNSEM.LOCAL.KEYS.KEY.ORD "24" ].

:end :instance.


; <<>>
; MULTIKEY < "twenty" >

:begin :instance.

twentyfourth_day := day_of_month_mle &
  [ STEM < "twenty", "fourth" >,
    SYNSEM.LOCAL.KEYS.KEY.DAY "24" ].

:end :instance.


; <<>>

:begin :instance.

twentyninth := ordinal_adj_le &
  [ STEM < "twentyninth" >,
    SYNSEM.LOCAL.KEYS.KEY.ORD "29" ].

:end :instance.


; <<>>
; MULTIKEY < "twenty" >

:begin :instance.

twentyninth_day := day_of_month_mle &
  [ STEM < "twenty", "ninth" >,
    SYNSEM.LOCAL.KEYS.KEY.DAY "29" ].

:end :instance.


; <<>>

:begin :instance.

twentysecond := ordinal_adj_le &
  [ STEM < "twentysecond" >,
    SYNSEM.LOCAL.KEYS.KEY.ORD "22" ].

:end :instance.


; <<>>
; MULTIKEY < "twenty" >

:begin :instance.

twentysecond_day := day_of_month_mle &
  [ STEM < "twenty", "second" >,
    SYNSEM.LOCAL.KEYS.KEY.DAY "22" ].

:end :instance.


; <<>>

:begin :instance.

twentyseventh := ordinal_adj_le &
  [ STEM < "twentyseventh" >,
    SYNSEM.LOCAL.KEYS.KEY.ORD "27" ].

:end :instance.


; <<>>
; MULTIKEY < "twenty" >

:begin :instance.

twentyseventh_day := day_of_month_mle &
  [ STEM < "twenty", "seventh" >,
    SYNSEM.LOCAL.KEYS.KEY.DAY "27" ].

:end :instance.


; <<>>

:begin :instance.

twentysixth := ordinal_adj_le &
  [ STEM < "twentysixth" >,
    SYNSEM.LOCAL.KEYS.KEY.ORD "26" ].

:end :instance.


; <<>>
; MULTIKEY < "twenty" >

:begin :instance.

twentysixth_day := day_of_month_mle &
  [ STEM < "twenty", "sixth" >,
    SYNSEM.LOCAL.KEYS.KEY.DAY "26" ].

:end :instance.


; <<>>

:begin :instance.

twentythird := ordinal_adj_le &
  [ STEM < "twentythird" >,
    SYNSEM.LOCAL.KEYS.KEY.ORD "23" ].

:end :instance.


; <<>>
; MULTIKEY < "twenty" >

:begin :instance.

twentythird_day := day_of_month_mle &
  [ STEM < "twenty", "third" >,
    SYNSEM.LOCAL.KEYS.KEY.DAY "23" ].

:end :instance.


; <<>>

:begin :instance.

twice_adv1 := vp_adv_post_word_le &
  [ STEM < "twice" >,
    SYNSEM.LOCAL.KEYS.KEY _twice_rel ].

:end :instance.


; <<>>

:begin :instance.

two := bare_unspecified_card_le & 
  [  STEM < "two" >,
     SYNSEM.LOCAL [ CAT.HEAD intadj1,
		    KEYS.KEY.CONST_VALUE "2" ] ].
:end :instance.


; <<>>

:begin :instance.

two_adjnoun := numadj_noun_word_le & 
  [ STEM < "two" >,
    SYNSEM.LOCAL.KEYS.ALTKEY.CONST_VALUE "2" ].

:end :instance.


; <<>>

:begin :instance.

two_hour := hour_word_le &
  [ STEM < "two" >,
    SYNSEM.LOCAL.KEYS.KEY.HOUR "2" ].

:end :instance.


; <<>>
; MULTIKEY < "thousand" >

:begin :instance.

two-thousand := year_word_mle2 &
  [ STEM < "two", "thousand" >,
    SYNSEM.LOCAL.KEYS.KEY.YEAR "2000" ].

:end :instance.


; <<>>

:begin :instance.

two-thousand_2 := year_word_le &
  [ STEM < "2000" >,
    SYNSEM.LOCAL.KEYS.KEY.YEAR "2000" ].

:end :instance.


; <<>>

:begin :instance.

Ulf_n1 := proper_le &
  [ STEM < "ulf" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Ulf ].

:end :instance.


; <<>>

:begin :instance.

ultimate_a1 := intrans_adj_le &
  [ STEM < "ultimate" >,
    SYNSEM.LOCAL.KEYS.KEY _ultimate_isect_rel ].

:end :instance.


; <<>>

:begin :instance.

umlaut_n1 := intr_noun_word_le &
  [ STEM < "umlaut" >,
    SYNSEM.LOCAL.KEYS.KEY _umlaut_rel ].

:end :instance.


; <<>>

:begin :instance.

umm_root := disc_adv_le &
  [ STEM < "umm" >,
    SYNSEM.LOCAL.KEYS.KEY excl_rel & [ EXCL 'umm ] ].

:end :instance.


; <<>>

:begin :instance.

umpteen := det_pl_le &
  [ STEM < "umpteen" >,
    SYNSEM.LOCAL.KEYS.KEY _umpteen_rel ].

:end :instance.


; <<>>

:begin :instance.

unable_a1 := intrans_adj_le &
  [ STEM < "unable" >,
    SYNSEM.LOCAL.KEYS.KEY _unable_rel ].

:end :instance.


; <<>>

:begin :instance.

unaffected_a1 := intrans_adj_le &
  [ STEM < "unaffected" >,
    SYNSEM.LOCAL.KEYS.KEY _unaffected_rel ].

:end :instance.


; <<>>

:begin :instance.

unavailable_a1 := intrans_adj_le &
  [ STEM < "unavailable" >,
    SYNSEM.LOCAL.KEYS.KEY _unavailable_rel ].

:end :instance.


; <<>>

:begin :instance.

unawares_a1 := intrans_adj_le &
  [ STEM < "unawares" >,
    SYNSEM.LOCAL.KEYS.KEY _unawares_rel ].

:end :instance.


; <<>>

:begin :instance.

unbearable_a1 := intrans_adj_le &
  [ STEM < "unbearable" >,
    SYNSEM.LOCAL.KEYS.KEY _unbearable_rel ].

:end :instance.


; <<>>

:begin :instance.

under := reg_prep_le &
  [ STEM < "under" >,
    SYNSEM.LOCAL.KEYS.KEY _under_rel ].

:end :instance.


; <<>>

:begin :instance.

undergrad_n1 := intr_noun_word_le &
  [ STEM < "undergrad" >,
    SYNSEM.LOCAL.KEYS.KEY _undergrad_rel ].

:end :instance.


; <<>>

:begin :instance.

understand_v1 := mv_np_trans_le &
  [ STEM < "understand" >,
    SYNSEM.LOCAL.KEYS.KEY _understand_rel ].

:end :instance.


; <<>>

:begin :instance.

understand_v2 := mv_pp_cp_le &
  [ STEM < "understand" >,
    SYNSEM.LOCAL.KEYS [ KEY _understand_by_rel,
			--COMPKEY _by_rel_s ] ].
:end :instance.


; <<>>

:begin :instance.

understand_v3 := mv_unerg_le &
  [ STEM < "understand" >,
    SYNSEM.LOCAL.KEYS.KEY _understand_rel ].

:end :instance.


; <<>>

:begin :instance.

undertake_v1 := mv_np_trans_le &
  [ STEM < "undertake" >,
    SYNSEM.LOCAL.KEYS.KEY _undertake_rel ].

:end :instance.


; <<>>

:begin :instance.

undoubted_a1 := intrans_adj_le &
  [ STEM < "undoubted" >,
    SYNSEM.LOCAL.KEYS.KEY _undoubted_rel ].

:end :instance.


; <<>>

:begin :instance.

unevaluated_a1 := intrans_adj_le &
  [ STEM < "unevaluated" >,
    SYNSEM.LOCAL.KEYS.KEY _unevaluated_rel ].

:end :instance.


; <<>>

:begin :instance.

unexpected_a1 := intrans_adj_le &
  [ STEM < "unexpected" >,
    SYNSEM.LOCAL.KEYS.KEY _unexpected_rel ].

:end :instance.


; <<>>

:begin :instance.

unexpectedly_adv1 := vp_adv_word_le &
  [ STEM < "unexpectedly" >,
    SYNSEM.LOCAL.KEYS.KEY _unexpectedly_rel ].

:end :instance.


; <<>>

:begin :instance.

unfavorable_a1 := intrans_adj_le &
  [ STEM < "unfavorable" >,
    SYNSEM.LOCAL.KEYS.KEY _unfavorable_rel ].

:end :instance.


; <<>>

:begin :instance.

unfavorably := adv_word_le &
  [ STEM < "unfavorably" >,
    SYNSEM.LOCAL.KEYS.KEY _unfavorably_rel ].

:end :instance.


; <<>>

:begin :instance.

unfortunate_a1 := intrans_adj_le &
  [ STEM < "unfortunate" >,
    SYNSEM.LOCAL.KEYS.KEY _unfortunate_rel ].

:end :instance.


; <<>>

:begin :instance.

unfortunately_adv1 := vp_adv_word_le &
  [ STEM < "unfortunately" >,
    SYNSEM.LOCAL.KEYS.KEY _unfortunately_rel ].

:end :instance.


; <<>>

:begin :instance.

unfortunately_adv2 := s_adv_pre_word_le &
  [ STEM < "unfortunately" >,
    SYNSEM.LOCAL.KEYS.KEY _unfortunately_rel ].

:end :instance.


; <<>>

:begin :instance.

unhurried_a1 := intrans_adj_le &
  [ STEM < "unhurried" >,
    SYNSEM.LOCAL.KEYS.KEY _unhurried_rel ].

:end :instance.


; <<>>

:begin :instance.

unhurriedly_adv1 := vp_adv_word_le &
  [ STEM < "unhurriedly" >,
    SYNSEM.LOCAL.KEYS.KEY _unhurriedly_rel ].

:end :instance.


; <<>>

:begin :instance.

uniform_a1 := intrans_adj_le &
  [ STEM < "uniform" >,
    SYNSEM.LOCAL.KEYS.KEY _uniform_adj_rel ].

:end :instance.


; <<>>

:begin :instance.

uniform_n1 := intr_noun_word_le &
  [ STEM < "uniform" >,
    SYNSEM.LOCAL.KEYS.KEY _uniform_rel ].

:end :instance.


; <<>>

:begin :instance.

unimportant_a1 := intrans_adj_le &
  [ STEM < "unimportant" >,
    SYNSEM.LOCAL.KEYS.KEY _unimportant_rel ].

:end :instance.


; <<>>

:begin :instance.

union_n1 := intr_noun_word_le &
  [ STEM < "union" >,
    SYNSEM.LOCAL.KEYS.KEY _union_rel ].

:end :instance.


; <<>>

:begin :instance.

united_a1 := intrans_adj_le &
  [ STEM < "united" >,
    SYNSEM.LOCAL.KEYS.KEY _united_rel ].

:end :instance.


; <<>>

:begin :instance.

unity_n1 := massn_le &
  [ STEM < "unity" >,
    SYNSEM.LOCAL.KEYS.KEY _unity_rel ].

:end :instance.


; <<>>

:begin :instance.

university_n1 := intr_noun_word_le &
  [ STEM < "university" >,
    SYNSEM.LOCAL.KEYS.KEY _university_rel ].

:end :instance.


; <<>>

:begin :instance.

unless := subconj_le &
  [ STEM < "unless" >,
    SYNSEM.LOCAL.KEYS.KEY _unless_rel ].

:end :instance.


; <<>>

:begin :instance.

unlikely_a1 := intrans_adj_le &
  [ STEM < "unlikely" >,
    SYNSEM.LOCAL.KEYS.KEY _unlikely_rel ].

:end :instance.


; <<>>

:begin :instance.

unluckily_adv1 := vp_adv_word_le &
  [ STEM < "unluckily" >,
    SYNSEM.LOCAL.KEYS.KEY _unluckily_rel ].

:end :instance.


; <<>>

:begin :instance.

unpack_v1 := mv_np*_trans_le &
  [ STEM < "unpack" >,
    SYNSEM.LOCAL.KEYS.KEY _unpack_rel ].

:end :instance.


; <<>>

:begin :instance.

unpleasant_a1 := intrans_adj_le &
  [ STEM < "unpleasant" >,
    SYNSEM.LOCAL.KEYS.KEY _unpleasant_rel ].

:end :instance.


; <<>>

:begin :instance.

unpleasantly := vp_adv_post_word_le &
  [ STEM < "unpleasantly" >,
    SYNSEM.LOCAL.KEYS.KEY _unpleasantly_rel ].

:end :instance.


; <<>>

:begin :instance.

until := prep_no_n_mod_le &
  [ STEM < "until" >,
    SYNSEM.LOCAL.KEYS.KEY _until_rel_a ].

:end :instance.


; <<>>

:begin :instance.

until_hour := hour_prep_word_le &
  [ STEM < "until" >,
    SYNSEM.LOCAL.KEYS.KEY _before_hour_rel ].

:end :instance.


; <<>>

:begin :instance.

until2 := prep_cp_le &
  [ STEM < "until" >,
    SYNSEM.LOCAL.KEYS.KEY _until_rel ].

:end :instance.


; <<>>

:begin :instance.

unwilling_a1 := reg_adj_equi_le &
  [ STEM < "unwilling" >,
    SYNSEM.LOCAL.KEYS.KEY _unwilling_rel ].

:end :instance.


; <<>>

:begin :instance.

unwillingly_adv1 := vp_adv_word_le &
  [ STEM < "unwillingly" >,
    SYNSEM.LOCAL.KEYS.KEY _unwillingly_rel ].

:end :instance.


; <<>>

:begin :instance.

up := prep_le &
  [ STEM < "up" >,
    SYNSEM.LOCAL.KEYS.KEY _up_rel ].

:end :instance.


; <<>>
; MULTIKEY < "up" >

:begin :instance.

up_to_deg := degree_spec_mle1 &
  [ STEM < "up", "to" >,
    SYNSEM.LOCAL.KEYS.KEY _up_to_rel ].

:end :instance.


; <<>>

:begin :instance.

update_v1 := mv_np_trans_le &
  [ STEM < "update" >,
    SYNSEM.LOCAL.KEYS.KEY _update_rel ].

:end :instance.


; <<>>

:begin :instance.

upon := reg_prep_le &
  [ STEM < "upon" >,
    SYNSEM.LOCAL.KEYS.KEY _upon_rel_a ].

:end :instance.


; <<>>

:begin :instance.

upper_a1 := intrans_adj_le &
  [ STEM < "upper" >,
    SYNSEM.LOCAL.KEYS.KEY _upper_rel ].

:end :instance.


; <<>>

:begin :instance.

upright_a1 := intrans_adj_le &
  [ STEM < "upright" >,
    SYNSEM.LOCAL.KEYS.KEY _upright_rel ].

:end :instance.


; <<>>

:begin :instance.

upstairs_adv1 := pp_le &
  [ STEM < "upstairs" >,
    SYNSEM.LOCAL.KEYS.KEY _upstairs_rel ].

:end :instance.


; <<>>

:begin :instance.

urge1 := mv_obj_equi_le &
  [ STEM < "urge" >,
    SYNSEM.LOCAL.KEYS.KEY _urge_to_rel ].

:end :instance.


; <<>>

:begin :instance.

urgent_a1 := intrans_adj_le &
  [ STEM < "urgent" >,
    SYNSEM.LOCAL.KEYS.KEY _urgent_rel ].

:end :instance.


; <<>>

:begin :instance.

urgently_adv1 := adv_word_le &
  [ STEM < "urgently" >,
    SYNSEM.LOCAL.KEYS.KEY _urgently_rel ].

:end :instance.


; <<>>

:begin :instance.

us := pers_pro_le &
  [ STEM < "us" >,
    SYNSEM.LOCAL [ CAT.HEAD.CASE acc,
		   KEYS.KEY.INST [ PNG png & [ PN 1pl* ],
				   PRONTYPE std_1pl ] ] ].
:end :instance.


; <<>>

:begin :instance.

use_n1 := massn_le &
  [ STEM < "use" >,
    SYNSEM.LOCAL.KEYS.KEY _use_n_rel ].

:end :instance.


; <<>>

:begin :instance.

use_n2 := intr_noun_word_le &
  [ STEM < "use" >,
    SYNSEM.LOCAL.KEYS.KEY _use_n_rel ].

:end :instance.


; <<>>

:begin :instance.

use_v1 := mv_np_trans_le &
  [ STEM < "use" >,
    SYNSEM.LOCAL.KEYS.KEY _use_rel ].

:end :instance.


; <<>>

:begin :instance.

used_to_aux_pos := past_ought_pos_le & 
  [ STEM < "used" >,
    SYNSEM.LOCAL [ CAT.HEAD.TENSE past*,
		   KEYS.KEY _used_to_aux_rel ] ].

:end :instance.


; <<>>

:begin :instance.

useful_a1 := intrans_adj_le &
  [ STEM < "useful" >,
    SYNSEM.LOCAL.KEYS.KEY _useful_rel ].

:end :instance.


; <<>>

:begin :instance.

useless_a1 := intrans_adj_le &
  [ STEM < "useless" >,
    SYNSEM.LOCAL.KEYS.KEY _useless_adj_rel ].

:end :instance.


; <<>>

:begin :instance.

uselessly := adv_word_le &
  [ STEM < "uselessly" >,
    SYNSEM.LOCAL.KEYS.KEY _uselessly_rel ].

:end :instance.


; <<>>

:begin :instance.

usual_a1 := intrans_adj_le &
  [ STEM < "usual" >,
    SYNSEM.LOCAL.KEYS.KEY _usual_rel ].

:end :instance.


; <<>>

:begin :instance.

usually_adv1 := vp_adv_pre_word_le &
  [ STEM < "usually" >,
    SYNSEM.LOCAL.KEYS.KEY _usually_rel ].

:end :instance.


; <<>>

:begin :instance.

usually_adv2 := s_adv_pre_word_le &
  [ STEM < "usually" >,
    SYNSEM.LOCAL.KEYS.KEY _usually_rel ].

:end :instance.


; <<>>

:begin :instance.

utmost_a1 := intrans_adj_le &
  [ STEM < "utmost" >,
    SYNSEM.LOCAL.KEYS.KEY _utmost_rel ].

:end :instance.


; <<>>

:begin :instance.

vacancy_n1 := intr_noun_word_le &
  [ STEM < "vacancy" >,
    SYNSEM.LOCAL.KEYS.KEY _vacancy_rel ].

:end :instance.


; <<>>

:begin :instance.

vacant_a1 := intrans_adj_le &
  [ STEM < "vacant" >,
    SYNSEM.LOCAL.KEYS.KEY _vacant_rel ].

:end :instance.


; <<>>

:begin :instance.

vacation_n1 := massn_le &
  [ STEM < "vacation" >,
    SYNSEM.LOCAL.KEYS.KEY _vacation_rel ].

:end :instance.


; <<>>

:begin :instance.

vacation_v1 := mv_unerg_le &
  [ STEM < "vacation" >,
    SYNSEM.LOCAL.KEYS.KEY _vacation_v_rel ].

:end :instance.


; <<>>

:begin :instance.

vain_a1 := intrans_adj_le &
  [ STEM < "vain" >,
    SYNSEM.LOCAL.KEYS.KEY _vain_rel ].

:end :instance.


; <<>>

:begin :instance.

Vanderloo := proper_le &
  [ STEM < "vanderloo" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'vanderloo ].

:end :instance.


; <<>>

:begin :instance.

vegetarian_a1 := intrans_adj_le &
  [ STEM < "vegetarian" >,
    SYNSEM.LOCAL.KEYS.KEY _vegetarian_isect_rel ].

:end :instance.


; <<>>

:begin :instance.

vegetarian_n1 := intr_noun_word_le &
  [ STEM < "vegetarian" >,
    SYNSEM.LOCAL.KEYS.KEY _vegetarian_rel ].

:end :instance.


; <<>>

:begin :instance.

very := degree_spec_le &
  [ STEM < "very" >,
    SYNSEM.LOCAL.KEYS.KEY _very_deg_rel ].

:end :instance.


; <<>>

:begin :instance.

veteran_n1 := intr_noun_word_le &
  [ STEM < "veteran" >,
    SYNSEM.LOCAL.KEYS.KEY _veteran_rel ].

:end :instance.


; <<>>
; MULTIKEY < "veterans" >

:begin :instance.

veterans_day := holiday_word_mle1 &
  [ STEM < "veterans", "day" >,
    SYNSEM.LOCAL.KEYS.KEY.DAY 'veterans_day ].

:end :instance.


; <<>>

:begin :instance.

via := reg_prep_le &
  [ STEM < "via" >,
    SYNSEM.LOCAL.KEYS.KEY _via_rel ].

:end :instance.


; <<>>

:begin :instance.

vibration_n1 := intr_noun_word_le &
  [ STEM < "vibration" >,
    SYNSEM.LOCAL.KEYS.KEY _vibration_rel ].

:end :instance.


; <<>>

:begin :instance.

video_n1 := intr_noun_word_le &
  [ STEM < "video" >,
    SYNSEM.LOCAL.KEYS.KEY _video_rel ].

:end :instance.


; <<>>

:begin :instance.

Vienna_n1 := proper_le &
  [ STEM < "vienna" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Vienna ].

:end :instance.


; <<>>

:begin :instance.

view_n1 := intr_noun_word_le &
  [ STEM < "view" >,
    SYNSEM.LOCAL.KEYS.KEY _view_n_rel ].

:end :instance.


; <<>>

:begin :instance.

view_v1 := mv_np_trans_le &
  [ STEM < "view" >,
    SYNSEM.LOCAL.KEYS.KEY _view_v_rel ].

:end :instance.


; <<>>

:begin :instance.

villa_n1 := intr_noun_word_le &
  [ STEM < "villa" >,
    SYNSEM.LOCAL.KEYS.KEY _villa_rel ].

:end :instance.


; <<>>

:begin :instance.

village_n1 := intr_noun_word_le &
  [ STEM < "village" >,
    SYNSEM.LOCAL.KEYS.KEY _village_rel ].

:end :instance.


; <<>>

:begin :instance.

virgin_n1 := intr_noun_word_le &
  [ STEM < "virgin" >,
    SYNSEM.LOCAL.KEYS.KEY _virgin_rel ].

:end :instance.


; <<>>

:begin :instance.

virginal_a1 := intrans_adj_le &
  [ STEM < "virginal" >,
    SYNSEM.LOCAL.KEYS.KEY _virginal_rel ].

:end :instance.


; <<>>

:begin :instance.

virtual_a1 := intrans_adj_le &
  [ STEM < "virtual" >,
    SYNSEM.LOCAL.KEYS.KEY _virtual_rel ].

:end :instance.


; <<>>

:begin :instance.

virtually_adv1 := vp_adv_pre_word_le &
  [ STEM < "virtually" >,
    SYNSEM.LOCAL.KEYS.KEY _virtually_rel ].

:end :instance.


; <<>>

:begin :instance.

virtually_adv2 := s_adv_pre_word_le &
  [ STEM < "virtually" >,
    SYNSEM.LOCAL.KEYS.KEY _virtually_rel ].

:end :instance.


; <<>>

:begin :instance.

visit_n1 := intr_noun_word_le &
  [ STEM < "visit" >,
    SYNSEM.LOCAL.KEYS.KEY _visit_n_rel ].

:end :instance.


; <<>>

:begin :instance.

visit_v1 := mv_np_trans_le &
  [ STEM < "visit" >,
    SYNSEM.LOCAL.KEYS.KEY _visit_v_rel ].

:end :instance.


; <<>>

:begin :instance.

visitor_n1 := intr_noun_word_le &
  [ STEM < "visitor" >,
    SYNSEM.LOCAL.KEYS.KEY _visitor_rel ].

:end :instance.


; <<>>

:begin :instance.

vivid_a1 := intrans_adj_le &
  [ STEM < "vivid" >,
    SYNSEM.LOCAL.KEYS.KEY _vivid_rel ].

:end :instance.


; <<>>

:begin :instance.

vividly := adv_word_le &
  [ STEM < "vividly" >,
    SYNSEM.LOCAL.KEYS.KEY _vividly_rel ].

:end :instance.


; <<>>

:begin :instance.

voice_n1 := intr_noun_word_le &
  [ STEM < "voice" >,
    SYNSEM.LOCAL.KEYS.KEY _voice_rel ].

:end :instance.


; <<>>

:begin :instance.

vote_for_v1 := mv_empty_prep_intrans_le &
  [ STEM < "vote" >,
    SYNSEM.LOCAL.KEYS [ KEY _vote_for_rel,
			--COMPKEY _for_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

vote_n1 := intr_noun_word_le &
  [ STEM < "vote" >,
    SYNSEM.LOCAL.KEYS.KEY _vote_n_rel ].

:end :instance.


; <<>>

:begin :instance.

vote_v1 := mv_unerg_le &
  [ STEM < "vote" >,
    SYNSEM.LOCAL.KEYS.KEY _vote_v_rel ].

:end :instance.


; <<>>

:begin :instance.

vowel_n1 := intr_noun_word_le &
  [ STEM < "vowel" >,
    SYNSEM.LOCAL.KEYS.KEY _vowel_rel ].

:end :instance.


; <<>>

:begin :instance.

voyage_n1 := intr_noun_word_le &
  [ STEM < "voyage" >,
    SYNSEM.LOCAL.KEYS.KEY _voyage_rel ].

:end :instance.


; <<>>

:begin :instance.

wait_for_v1 := mv_empty_prep*_intrans_le &
  [ STEM < "wait" >,
    SYNSEM.LOCAL.KEYS [ KEY _wait_for_rel,
			--COMPKEY _for_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

waiter_n1 := intr_noun_word_le &
  [ STEM < "waiter" >,
    SYNSEM.LOCAL.KEYS.KEY _waiter_rel ].

:end :instance.


; <<>>

:begin :instance.

wake_v1 := mv_np_trans_le &
  [ STEM < "wake" >,
    SYNSEM.LOCAL.KEYS.KEY _wake_rel ].

:end :instance.


; <<>>

:begin :instance.

wake_up_v1 := mv_particle_le &
  [ STEM < "wake" >,
    SYNSEM.LOCAL.KEYS [ KEY _wake_up_rel,
			--COMPKEY _up_rel ] ].

:end :instance.


; <<>>

:begin :instance.

wake_x_up_v1 := mv_prep_particle_np_le &
  [ STEM < "wake" >,
    SYNSEM.LOCAL.KEYS [ KEY _wake_x_up_rel,
			--COMPKEY _up_rel ] ].

:end :instance.


; <<>>

:begin :instance.

walk_v1 := mv_unerg_le &
  [ STEM < "walk" >,
    SYNSEM.LOCAL.KEYS.KEY _walk_v_rel ].

:end :instance.


; <<>>

:begin :instance.

walk_over_v1 := mv_particle_le &
  [ STEM < "walk" >,
    SYNSEM.LOCAL.KEYS [ KEY _walk_over_rel,
			--COMPKEY _over_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

wander_v1 := mv_unerg_le &
  [ STEM < "wander" >,
    SYNSEM.LOCAL.KEYS.KEY _wander_rel ].

:end :instance.


; <<>>

:begin :instance.

wander_up_v1 := mv_particle_le &
  [ STEM < "wander" >,
    SYNSEM.LOCAL.KEYS [ KEY _wander_up_rel,
			--COMPKEY _up_rel ] ].

:end :instance.


; <<>>

:begin :instance.

want_v1 := mv_np_trans_le &
  [ STEM < "want" >,
    SYNSEM.LOCAL.KEYS.KEY _want_rel ].

:end :instance.


; <<>>

:begin :instance.

want_v2 := mv_subj_equi_le &
  [ STEM < "want" >,
    SYNSEM.LOCAL.KEYS.KEY _want2_rel ].

:end :instance.


; <<>>

:begin :instance.

want_v3 := mv_sor_non_trans_le &
  [ STEM < "want" >,
    SYNSEM.LOCAL.KEYS.KEY _want2_rel ].

:end :instance.


; <<>>

:begin :instance.

warm_a1 := intrans_adj_le &
  [ STEM < "warm" >,
    SYNSEM.LOCAL.KEYS.KEY _warm_rel ].

:end :instance.


; <<>>

:begin :instance.

warm_up_v1 := mv_prep_particle_np_le &
  [ STEM < "warm" >,
    SYNSEM.LOCAL.KEYS [ KEY _warm_up_v_rel,
			--COMPKEY _up_rel ] ].

:end :instance.


; <<>>

:begin :instance.

warmly_adv1 := vp_adv_word_le &
  [ STEM < "warmly" >,
    SYNSEM.LOCAL.KEYS.KEY _warmly_rel ].

:end :instance.


; <<>>

:begin :instance.

be_c_was := be_c_was_le &
  [ STEM < "was" > ].

:end :instance.


; <<>>

:begin :instance.

be_id_was := be_id_was_le &
  [ STEM < "was" > ].

:end :instance.


; <<>>

:begin :instance.

be_th_cop_was := be_th_cop_was_le &
  [ STEM < "was" > ].

:end :instance.


; <<>>

:begin :instance.

Washington_n1 := proper_le &
  [ STEM < "washington" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Washington ].

:end :instance.


; <<>>

:begin :instance.

be_id_was_neg_1 := be_id_was_neg_le &
  [ STEM < "wasn't" > ].

:end :instance.


; <<>>
; MULTIKEY < "wasn" >

:begin :instance.

be_id_was_neg_2 := be_id_was_neg_mle &
  [ STEM < "wasn", "t" > ].

:end :instance.


; <<>>

:begin :instance.

be_th_cop_was_neg_1 := be_th_cop_was_neg_le &
  [ STEM < "wasn't" > ].

:end :instance.


; <<>>
; MULTIKEY < "wasn" >

:begin :instance.

be_th_cop_was_neg_2 := be_th_cop_was_neg_mle &
  [ STEM < "wasn", "t" > ].

:end :instance.


; <<>>

:begin :instance.

be_c_was_neg_1 := be_c_was_neg_le &
  [ STEM < "wasn't" > ].

:end :instance.


; <<>>
; MULTIKEY < "wasn" >

:begin :instance.

be_c_was_neg_2 := be_c_was_neg_mle &
  [ STEM < "wasn", "t" > ].

:end :instance.


; <<>>

:begin :instance.

waste_n1 := noun_ppof_word_le &
  [ STEM < "waste" >,
    SYNSEM.LOCAL.KEYS.KEY _waste_n_rel ].

:end :instance.


; <<>>

:begin :instance.

waste_v1 := mv_np_trans_le &
  [ STEM < "waste" >,
    SYNSEM.LOCAL.KEYS.KEY _waste_v_rel ].

:end :instance.


; <<>>

:begin :instance.

watch_v1 := mv_np_trans_le &
  [ STEM < "watch" >,
    SYNSEM.LOCAL.KEYS.KEY _watch_v_rel ].

:end :instance.


; <<>>

:begin :instance.

watch_v2 := mv_sorb_le &
  [ STEM < "watch" >,
    SYNSEM.LOCAL.KEYS.KEY _watch2_rel ].

:end :instance.


; <<>>

:begin :instance.

way_n1 := intr_noun_word_le &
  [ STEM < "way" >,
    SYNSEM.LOCAL.KEYS.KEY _way_rel ].

:end :instance.


; <<>>

:begin :instance.

we := pers_pro_le &
  [ STEM < "we" >,
    SYNSEM.LOCAL [ CAT.HEAD.CASE nom,
		   KEYS.KEY.INST [ PNG png & [ PN 1pl* ],
				   PRONTYPE std_1pl ] ] ].
:end :instance.


; <<>>

:begin :instance.

weak_a1 := intrans_adj_le &
  [ STEM < "weak" >,
    SYNSEM.LOCAL.KEYS.KEY _weak_rel ].

:end :instance.


; <<>>
; MULTIKEY < "wean" >

:begin :instance.

Wean_Hall := proper_mle1 &
  [ STEM < "wean", "hall" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'wean_hall ].

:end :instance.


; <<>>

:begin :instance.

weather_n1 := massn_le &
  [ STEM < "weather" >,
    SYNSEM.LOCAL.KEYS.KEY _weather_rel ].

:end :instance.


; <<>>

:begin :instance.

wedding_n1 := intr_noun_word_le &
  [ STEM < "wedding" >,
    SYNSEM.LOCAL.KEYS.KEY _wedding_rel ].

:end :instance.


; <<>>

:begin :instance.

wednesday1 := day_of_week_le &
  [ STEM < "wednesday" >,
    SYNSEM.LOCAL.KEYS.KEY.DAY 'wed ].

:end :instance.


; <<>>

:begin :instance.

wednesday_cn := intr_temp_noun_le &
  [ STEM < "wednesday" >,
    SYNSEM.LOCAL.KEYS.KEY dofw_rel & [ DAY 'wed ] ].

:end :instance.


; <<>>

:begin :instance.

week1 := temp_noun_ppcomp_word_le &
  [ STEM < "week" >,
    SYNSEM.LOCAL.KEYS.KEY _week_rel ].

:end :instance.


; <<>>

:begin :instance.

weekday_n1 := intr_temp_noun_le &
  [ STEM < "weekday" >,
    SYNSEM.LOCAL.KEYS.KEY _weekday_rel ].

:end :instance.


; <<>>

:begin :instance.

weekend_n1 := intr_temp_noun_le &
  [ STEM < "weekend" >,
    SYNSEM.LOCAL.KEYS.KEY _weekend_rel ].

:end :instance.


; <<>>

:begin :instance.

weekly_adv1 := int_vp_adv_post_word_le &
  [ STEM < "weekly" >,
    SYNSEM.LOCAL.KEYS.KEY __weekly_adv_rel ].

:end :instance.


; <<>>

:begin :instance.

weekly_a1 := intrans_adj_le &
  [ STEM < "weekly" >,
    SYNSEM.LOCAL.KEYS.KEY __weekly_rel ].

:end :instance.


; <<>>

:begin :instance.

Weimar_n1 := proper_le &
  [ STEM < "weimar" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Weimar ].

:end :instance.


; <<>>

:begin :instance.

welcome_a1 := intrans_adj_le &
  [ STEM < "welcome" >,
    SYNSEM.LOCAL.KEYS.KEY _welcome_adj_rel ].

:end :instance.


; <<>>

:begin :instance.

welcome_v1 := mv_np_trans_le &
  [ STEM < "welcome" >,
    SYNSEM.LOCAL.KEYS.KEY _welcome_v_rel ].

:end :instance.


; <<>>

:begin :instance.

well := int_vp_adv_post_word_le &
  [ STEM < "well" >,
    SYNSEM.LOCAL.KEYS.KEY _well_rel ].

:end :instance.


; <<>>

:begin :instance.

well_root := disc_adv_le &
  [ STEM < "well" >,
    SYNSEM.LOCAL [ CAT.POSTHEAD -,
		   KEYS.KEY excl_rel & [ EXCL 'well ] ] ].

:end :instance.


; <<>>

:begin :instance.

be_c_were := be_c_were_le &
  [ STEM < "were" > ].

:end :instance.


; <<>>

:begin :instance.

be_id_were := be_id_were_le &
  [ STEM < "were" > ].

:end :instance.


; <<>>

:begin :instance.

be_th_cop_were := be_th_cop_were_le &
  [ STEM < "were" > ].

:end :instance.


; <<>>

:begin :instance.

be_c_were_neg_1 := be_c_were_neg_le &
  [ STEM < "weren't" > ].

:end :instance.


; <<>>
; MULTIKEY < "weren" >

:begin :instance.

be_c_were_neg_2 := be_c_were_neg_mle &
  [ STEM < "weren", "t" > ].

:end :instance.


; <<>>

:begin :instance.

be_id_were_neg_1 := be_id_were_neg_le &
  [ STEM < "weren't" > ].

:end :instance.


; <<>>
; MULTIKEY < "weren" >

:begin :instance.

be_id_were_neg_2 := be_id_were_neg_mle &
  [ STEM < "weren", "t" > ].

:end :instance.


; <<>>

:begin :instance.

be_th_cop_were_neg_1 := be_th_cop_were_neg_le &
  [ STEM < "weren't" > ].

:end :instance.


; <<>>
; MULTIKEY < "weren" >

:begin :instance.

be_th_cop_were_neg_2 := be_th_cop_were_neg_mle &
  [ STEM < "weren", "t" > ].

:end :instance.


; <<>>

:begin :instance.

what1 := wh_pro_word_le &
  [ STEM < "what" >,
    SYNSEM [ LOCAL.KEYS.KEY thing_rel ] ].

:end :instance.


; <<>>

:begin :instance.

what2 := freerel_pro_np_word_le &
  [ STEM < "what" >,
    SYNSEM.LOCAL.KEYS.KEY thing_rel ].

:end :instance.


; <<>>

:begin :instance.

what_det := det_wh_le &
  [ STEM < "what" >,
    SYNSEM [ LOCAL.KEYS.KEY _which_rel & [ HANDEL #hand ],
	     NON-LOCAL.QUE 1-dlist &
			   [ LIST < #hand > ] ] ].

:end :instance.


; <<>>
; MULTIKEY < "what" >

:begin :instance.

what_about := how_about_n_or_p_mle1 &
  [ STEM < "what", "about" >,
    SYNSEM.LOCAL.KEYS.KEY _okay_accept_rel ].

:end :instance.


; <<>>
; MULTIKEY < "say" >

:begin :instance.

what_do_you_say := how_about_v_4mle4 &
  [ STEM < "what", "do", "you", "say" >,
    SYNSEM.LOCAL.KEYS.KEY _okay_accept_rel ].

:end :instance.


; <<>>
; MULTIKEY < "what" >

:begin :instance.

what_if := how_about_v_mle1 &
  [ STEM < "what", "if" >,
    SYNSEM.LOCAL.KEYS.KEY _okay_accept_rel ].

:end :instance.


; <<>>

:begin :instance.

whatever1 := freerel_pro_np_word_le &
  [ STEM < "whatever" >,
    SYNSEM.LOCAL.KEYS.KEY thing_rel ].

:end :instance.


; <<>>

:begin :instance.

whatever_det := freerel_det_word_le &
  [ STEM < "whatever" >,
    SYNSEM.LOCAL.KEYS.KEY free_relative_ever_rel ].

:end :instance.


; <<>>

:begin :instance.

when1 := wh_adverb_word_le &
  [ STEM < "when" >,
    SYNSEM.LOCAL.KEYS [ KEY temp_loc_rel,
			ALTKEY temp_rel ] ].

:end :instance.


; <<>>

:begin :instance.

when2 := rel_adverb_word_le &
  [ STEM < "when" >,
    SYNSEM.LOCAL.KEYS [ KEY temp_loc_rel,
			ALTKEY temp_rel ] ].

:end :instance.


; <<>>

:begin :instance.

when_freerel_np := freerel_pro_np_adv_word_le &
  [ STEM < "when" >,
    SYNSEM.LOCAL.KEYS.KEY temp_rel ].

:end :instance.


; <<>>

:begin :instance.

when_freerel_pp := freerel_pro_pp_word_le &
  [ STEM < "when" >,
    SYNSEM.LOCAL.KEYS [ KEY temp_loc_rel,
			ALTKEY temp_rel ] ]. 

:end :instance.


; <<>>

:begin :instance.

whenever_freerel := freerel_pro_pp_word_le &
  [ STEM < "whenever" >,
    SYNSEM.LOCAL.KEYS [ KEY temp_loc_rel,
			ALTKEY temp_rel ] ].

:end :instance.


; <<>>

:begin :instance.

where1 := wh_adverb_word_le &
  [ STEM < "where" >,
    SYNSEM.LOCAL.KEYS [ KEY loc_rel,
			ALTKEY place_rel ] ].

:end :instance.


; <<>>

:begin :instance.

where2 := rel_adverb_word_le &
  [ STEM < "where" >,
    SYNSEM.LOCAL.KEYS [ KEY loc_rel,
			ALTKEY place_rel ] ].

:end :instance.


; <<>>

:begin :instance.

where_freerel_np := freerel_pro_np_adv_word_le &
  [ STEM < "where" >,
    SYNSEM.LOCAL.KEYS.KEY place_rel ].

:end :instance.


; <<>>

:begin :instance.

where_freerel_pp := freerel_pro_pp_word_le &
  [ STEM < "where" >,
    SYNSEM.LOCAL.KEYS [ KEY loc_rel,
			ALTKEY place_rel ] ]. 

:end :instance.


; <<>>

:begin :instance.

wherever_freerel := freerel_pro_pp_word_le &
  [ STEM < "wherever" >,
    SYNSEM.LOCAL.KEYS [ KEY loc_rel,
			ALTKEY place_rel ] ].

:end :instance.


; <<>>

:begin :instance.

how_freerel_np := freerel_pro_np_adv_word_le &
  [ STEM < "how" >,
    SYNSEM.LOCAL.KEYS.KEY _way_rel ].

:end :instance.


; <<>>

:begin :instance.

whereas := subconj_le &
  [ STEM < "whereas" >,
    SYNSEM.LOCAL.KEYS.KEY _whereas_rel ].

:end :instance.


; <<>>

:begin :instance.

whereby := subconj_le &
  [ STEM < "whereby" >,
    SYNSEM.LOCAL.KEYS.KEY _whereby_rel ].

:end :instance.


; <<>>

:begin :instance.

whether_c_fin := whether_c_fin_le &
  [ STEM < "whether" > ].

:end :instance.


; <<>>

:begin :instance.

whether_c_inf := whether_c_inf_le &
  [ STEM < "whether" > ].

:end :instance.


; <<>>

:begin :instance.

which1 := pdet_unsp_le &
  [ STEM < "which" >,
    SYNSEM.LOCAL.KEYS.KEY _which_rel ].

:end :instance.


; <<>>

:begin :instance.

which_r := rel_pro_word_le &
  [ STEM < "which" >,
    SYNSEM [ LOCAL.KEYS.KEY thing_rel ] ].

:end :instance.


; <<>>

:begin :instance.

whichever := freerel_det_word_le &
  [ STEM < "whichever" >,
    SYNSEM.LOCAL.KEYS.KEY free_relative_ever_rel ].

:end :instance.


; <<>>

:begin :instance.

while_n1 := intr_noun_word_le &
  [ STEM < "while" >,
    SYNSEM.LOCAL.KEYS.KEY _while_n_rel ].

:end :instance.


; <<>>

:begin :instance.

while := prep_cp_le &
  [ STEM < "while" >,
    SYNSEM.LOCAL.KEYS.KEY _while_rel ].

:end :instance.


; <<>>
; MULTIKEY < "whit" >

:begin :instance.

whit_monday := holiday_word_mle1 &
  [ STEM < "whit", "monday" >,
    SYNSEM.LOCAL.KEYS.KEY.DAY 'whit_monday ].

:end :instance.


; <<>>
; MULTIKEY < "whit" >

:begin :instance.

whit_week := holiday_word_mle1 &
  [ STEM < "whit", "week" >,
    SYNSEM.LOCAL.KEYS.KEY.DAY 'whit_week ].

:end :instance.


; <<>>

:begin :instance.

white_a1 := intrans_adj_le &
  [ STEM < "white" >,
    SYNSEM.LOCAL.KEYS.KEY _white_rel ].

:end :instance.


; <<>>

:begin :instance.

whitsun := season_word_le &
  [ STEM < "whitsun" >,
    SYNSEM.LOCAL.KEYS.KEY.SEASON 'whitsun ].

:end :instance.


; <<>>

:begin :instance.

whitsuntide := season_word_le &
  [ STEM < "whitsuntide" >,
    SYNSEM.LOCAL.KEYS.KEY.SEASON 'whitsuntide ].

:end :instance.


; <<>>
; MULTIKEY < "whitsun" >

:begin :instance.

whitsun_week := holiday_word_mle1 &
  [ STEM < "whitsun", "week" >,
    SYNSEM.LOCAL.KEYS.KEY.DAY 'whitsun_week ].

:end :instance.


; <<>>

:begin :instance.

who1 := wh_pro_word_le &
  [ STEM < "who" >,
    SYNSEM [ LOCAL.KEYS.KEY person_rel ] ].

:end :instance.


; <<>>

:begin :instance.

who2 := rel_pro_word_le &
  [ STEM < "who" >,
    SYNSEM [ LOCAL.KEYS.KEY person_rel ] ].

:end :instance.


; <<>>

:begin :instance.

whoever1 := freerel_pro_np_word_le &
  [ STEM < "whoever" >,
    SYNSEM.LOCAL.KEYS.KEY person_rel ].

:end :instance.


; <<>>

:begin :instance.

whole_a1 := intrans_adj_le &
  [ STEM < "whole" >,
    SYNSEM.LOCAL.KEYS.KEY _whole_rel ].

:end :instance.


; <<>>

:begin :instance.

wholly_deg := degree_spec_le &
  [ STEM < "wholly" >,
    SYNSEM.LOCAL.KEYS.KEY _wholly_deg_rel ].

:end :instance.


; <<>>

:begin :instance.

whom1 := wh_pro_word_le &
  [ STEM < "whom" >,
    SYNSEM.LOCAL [ CAT.HEAD.CASE acc,
		   KEYS.KEY person_rel ] ].
:end :instance.


; <<>>

:begin :instance.

whom2 := rel_pro_word_le &
  [ STEM < "whom" >,
    SYNSEM.LOCAL [ CAT.HEAD.CASE acc,
		   KEYS.KEY person_rel ] ].

:end :instance.


; <<>>

:begin :instance.

whoops_root := disc_adv_le &
  [ STEM < "whoops" >,
    SYNSEM.LOCAL.KEYS.KEY excl_rel & [ EXCL 'whoops ] ].

:end :instance.


; <<>>

:begin :instance.

whose_1 := wh_poss_le &
  [ STEM < "whose" >,
    SYNSEM.LOCAL.KEYS.ALTKEY person_rel ].

:end :instance.


; <<>>

:begin :instance.

whose_2 := rel_poss_le &
  [ STEM < "whose" > ].

:end :instance.


; <<>>

:begin :instance.

why1 := wh_adverb_word_le &
  [ STEM < "why" >,
    SYNSEM.LOCAL.KEYS [ KEY _for_rel,
			ALTKEY reason_rel ] ].

:end :instance.


; <<>>

:begin :instance.

why2 := rel_adverb_word_le &
  [ STEM < "why" >,
    SYNSEM.LOCAL.KEYS [ KEY _for_rel,
			ALTKEY reason_rel ] ].

:end :instance.


; <<>>

:begin :instance.

wicked_a1 := intrans_adj_le &
  [ STEM < "wicked" >,
    SYNSEM.LOCAL.KEYS.KEY _wicked_rel ].

:end :instance.


; <<>>

:begin :instance.

Wiesbaden_n1 := proper_le &
  [ STEM < "wiesbaden" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Wiesbaden ].

:end :instance.


; <<>>

:begin :instance.

wife_n1 := intr_noun_word_le &
  [ STEM < "wife" >,
    SYNSEM.LOCAL.KEYS.KEY _wife_rel ].

:end :instance.


; <<>>

:begin :instance.

wilco_root := disc_adv_le &
  [ STEM < "wilco" >,
    SYNSEM.LOCAL.KEYS.KEY excl_rel & [ EXCL 'wilco ] ].

:end :instance.


; <<>>

:begin :instance.

wild_a1 := intrans_adj_le &
  [ STEM < "wild" >,
    SYNSEM.LOCAL.KEYS.KEY _wild_rel ].

:end :instance.


; <<>>

:begin :instance.

wildly_adv1 := adv_word_le &
  [ STEM < "wildly" >,
    SYNSEM.LOCAL.KEYS.KEY _wildly_rel ].

:end :instance.


; <<>>

:begin :instance.

will_aux_pos := will_pos_le & 
  [ STEM < "will" >,
    SYNSEM.LOCAL.KEYS.KEY _will_aux_rel ].

:end :instance.


; <<>>

:begin :instance.

will_aux_pos_cx := will_pos_cx_le &
  [ STEM < "ll" >,
    SYNSEM.LOCAL.KEYS.KEY _will_aux_rel ].


:end :instance.


; <<>>

:begin :instance.

Willien_n1 := proper_le &
  [ STEM < "willien" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Willien ].

:end :instance.


; <<>>

:begin :instance.

willing_a1 := reg_adj_equi_le &
  [ STEM < "willing" >,
    SYNSEM.LOCAL.KEYS.KEY _willing_rel ].

:end :instance.


; <<>>

:begin :instance.

willingly_adv1 := vp_adv_word_le &
  [ STEM < "willingly" >,
    SYNSEM.LOCAL.KEYS.KEY _willingly_rel ].

:end :instance.


; <<>>

:begin :instance.

Wilson := proper_le &
  [ STEM < "wilson" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'wilson ].

:end :instance.


; <<>>

:begin :instance.

win_v1 := mv_unerg_le &
  [ STEM < "win" >,
    SYNSEM.LOCAL.KEYS.KEY _win_rel ].

:end :instance.


; <<>>

:begin :instance.

wine_n1 := massn_le &
  [ STEM < "wine" >,
    SYNSEM.LOCAL.KEYS.KEY _wine_rel ].

:end :instance.


; <<>>

:begin :instance.

winter_season := season_word_le &
  [ STEM < "winter" >,
    SYNSEM.LOCAL.KEYS.KEY _winter_s_rel ].

:end :instance.


; <<>>

:begin :instance.

winter_n1 := intr_temp_noun_le &
  [ STEM < "winter" >,
    SYNSEM.LOCAL.KEYS.KEY season_rel & [ SEASON 'winter ] ].

:end :instance.


; <<>>

:begin :instance.

wise_a1 := intrans_adj_le &
  [ STEM < "wise" >,
    SYNSEM.LOCAL.KEYS.KEY _wise_rel ].

:end :instance.


; <<>>

:begin :instance.

wish_n1 := intr_noun_word_le &
  [ STEM < "wish" >,
    SYNSEM.LOCAL.KEYS.KEY _wish_n_rel ].

:end :instance.


; <<>>

:begin :instance.

wish_v1 := mv_ditrans_only_le &
  [ STEM < "wish" >,
    SYNSEM.LOCAL.KEYS.KEY _wish_v_rel ].

:end :instance.


; <<>>

:begin :instance.

wish_v2 := mv_subj_equi_le &
  [ STEM < "wish" >,
    SYNSEM.LOCAL.KEYS.KEY _wish_v2_rel ].

:end :instance.


; <<>>

:begin :instance.

wish_v3 := mv_sor_non_trans_le &
  [ STEM < "wish" >,
    SYNSEM.LOCAL.KEYS.KEY _wish_v2_rel ].

:end :instance.


; <<>>

:begin :instance.

wish_v4 := mv_unerg_le &
  [ STEM < "wish" >,
    SYNSEM.LOCAL.KEYS.KEY _wish_v_rel ].

:end :instance.


; <<>>

:begin :instance.

with_p := prep_le &
  [ STEM < "with" >,
    SYNSEM.LOCAL.KEYS.KEY _with_rel_a ].

:end :instance.


; <<>>

:begin :instance.

with_means := prep_nbar_comp_le &
  [ STEM < "with" >,
    SYNSEM.LOCAL.KEYS.KEY _with_rel_a ].

:end :instance.


; <<>>

:begin :instance.

within := prep_le &
  [ STEM < "within" >,
    SYNSEM.LOCAL.KEYS.KEY _within_rel ].

:end :instance.


; <<>>

:begin :instance.

without := prep_le &
  [ STEM < "without" >,
    SYNSEM.LOCAL.KEYS.KEY _without_rel_a ].

:end :instance.


; <<>>

:begin :instance.

Woellnatz_n1 := proper_le &
  [ STEM < "woellnatz" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Woellnatz ].

:end :instance.


; <<>>

:begin :instance.

woman1 := intr_noun_word_le &
  [ STEM < "woman" >,
    SYNSEM.LOCAL.KEYS.KEY _woman_rel ].

:end :instance.


; <<>>

:begin :instance.

will_aux_neg_1 := will_neg_le &
  [ STEM < "won't" >,
    SYNSEM.LOCAL.KEYS.KEY _will_aux_rel ].


:end :instance.


; <<>>
; MULTIKEY < "won" >

:begin :instance.

will_aux_neg_2 := will_neg_mle1 &
  [ STEM < "won", "t" >,
    SYNSEM.LOCAL.KEYS.KEY _will_aux_rel ].


:end :instance.


; <<>>

:begin :instance.

wok_n2 := intr_noun_word_le &
  [ STEM < "wok" >,
    SYNSEM.LOCAL.KEYS.KEY _wok_rel ].

:end :instance.


; <<>>

:begin :instance.

wonder_v1 := mv_cp_ques_non_trans_le &
  [ STEM < "wonder" >,
    SYNSEM.LOCAL.KEYS.KEY _wonder_rel ].

:end :instance.


; <<>>

:begin :instance.

wonderful_root := disc_adv_le &
  [ STEM < "wonderful" >,
    SYNSEM.LOCAL.KEYS.KEY excl_rel & [ EXCL 'wonderful ] ].

:end :instance.


; <<>>

:begin :instance.

wonderful_a1 := intrans_adj_le &
  [ STEM < "wonderful" >,
    SYNSEM.LOCAL.KEYS.KEY _wonderful_rel ].

:end :instance.


; <<>>

:begin :instance.

wonderfully := vp_adv_post_word_le &
  [ STEM < "wonderfully" >,
    SYNSEM.LOCAL.KEYS.KEY _wonderfully_rel ].

:end :instance.


; <<>>

:begin :instance.

word_n1 := intr_noun_word_le &
  [ STEM < "word" >,
    SYNSEM.LOCAL.KEYS.KEY _word_rel ].

:end :instance.


; <<>>

:begin :instance.

work_n1 := massn_le &
  [ STEM < "work" >,
    SYNSEM.LOCAL.KEYS.KEY _work_n_rel ].

:end :instance.


; <<>>

:begin :instance.

work_in_v1 := mv_prep_particle_np_le &
  [ STEM < "work" >,
    SYNSEM.LOCAL.KEYS [ KEY _work_in_rel,
			--COMPKEY _in_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

work_out_v1 := mv_prep_particle_np_le &
  [ STEM < "work" >,
    SYNSEM.LOCAL.KEYS [ KEY _work_x_out_rel,
			--COMPKEY _out_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

work_v1 := mv_unerg_le &
  [ STEM < "work" >,
    SYNSEM.LOCAL.KEYS.KEY work_unspec ].

:end :instance.


; <<>>

:begin :instance.

work_through_v1 := mv_empty_prep_intrans_le &
  [ STEM < "work" >,
    SYNSEM.LOCAL.KEYS [ KEY _work_through_rel,
			--COMPKEY _through_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

workday_n1 := intr_temp_noun_le &
  [ STEM < "workday" >,
    SYNSEM.LOCAL.KEYS.KEY _workday_rel ].

:end :instance.


; <<>>

:begin :instance.

workshop_n1 := intr_noun_word_le &
  [ STEM < "workshop" >,
    SYNSEM.LOCAL.KEYS.KEY _workshop_rel ].

:end :instance.


; <<>>

:begin :instance.

world_n1 := intr_noun_word_le &
  [ STEM < "world" >,
    SYNSEM.LOCAL.KEYS.KEY _world_rel ].

:end :instance.


; <<>>

:begin :instance.

worry_about_v1 := mv_empty_prep_intrans_le &
  [ STEM < "worry" >,
    SYNSEM.LOCAL.KEYS [ KEY _worry_about_rel,
			--COMPKEY _about_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

worry_v2 := mv_unerg_le &
  [ STEM < "worry" >,
    SYNSEM.LOCAL.KEYS.KEY _worry_about_rel ].

:end :instance.


; <<>>

:begin :instance.

worse_a1 := intrans_adj_le &
  [ STEM < "worse" >,
    SYNSEM.LOCAL.KEYS.KEY _worse_rel ].

:end :instance.


; <<>>

:begin :instance.

worst_a1 := intrans_adj_le &
  [ STEM < "worst" >,
    SYNSEM.LOCAL.KEYS.KEY _worst_rel ].

:end :instance.


; <<>>

:begin :instance.

worthwhile_a1 := intrans_adj_le &
  [ STEM < "worthwhile" >,
    SYNSEM.LOCAL.KEYS.KEY _worthwhile_rel ].

:end :instance.


; <<>>

:begin :instance.

would_aux_pos := would_aux_pos_le &
  [ STEM < "would" >,
    SYNSEM.LOCAL.KEYS.KEY _would_rel ].

:end :instance.


; <<>>

:begin :instance.

would_aux_pos_cx := would_aux_pos_cx_le &
  [ STEM < "d" >,
    SYNSEM.LOCAL.KEYS.KEY _would_rel ].

:end :instance.


; <<>>

:begin :instance.

would_aux_neg_1 := would_aux_neg_le &
  [ STEM < "wouldn't" >,
    SYNSEM.LOCAL.KEYS.KEY _would_rel ].

:end :instance.


; <<>>
; MULTIKEY < "wouldn" >

:begin :instance.

would_aux_neg_2 := would_aux_neg_mle1 &
  [ STEM < "wouldn", "t" >,
    SYNSEM.LOCAL.KEYS.KEY _would_rel ].

:end :instance.


; <<>>

:begin :instance.

wrap_v1 := mv_np_trans_le &
  [ STEM < "wrap" >,
    SYNSEM.LOCAL.KEYS.KEY _wrap_v_rel ].

:end :instance.


; <<>>

:begin :instance.

wrap_up_v1 := mv_prep_particle_np_le &
  [ STEM < "wrap" >,
    SYNSEM.LOCAL.KEYS [ KEY _wrap_up_v_rel,
			--COMPKEY _up_rel ] ].

:end :instance.


; <<>>
; MULTIKEY < "wrap" >

:begin :instance.

wrap_up_n1 := intr_noun_word_mle1 &
  [ STEM < "wrap", "up" >,
    SYNSEM.LOCAL.KEYS.KEY _wrap_up_rel ].

:end :instance.


; <<>>

:begin :instance.

write_down_v1 := mv_prep_particle_np_le &
  [ STEM < "write" >,
    SYNSEM.LOCAL.KEYS [ KEY _write_down_rel,
			--COMPKEY _down_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

write_in_v1 := mv_prep_particle_np_le &
  [ STEM < "write" >,
    SYNSEM.LOCAL.KEYS [ KEY _write_in_rel,
			--COMPKEY _in_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

write_up_v1 := mv_prep_particle_np_le &
  [ STEM < "write" >,
    SYNSEM.LOCAL.KEYS [ KEY _write_up_rel,
			--COMPKEY _up_rel ] ].

:end :instance.


; <<>>

:begin :instance.

write_v1 := mv_np_trans_le &
  [ STEM < "write" >,
    SYNSEM.LOCAL.KEYS.KEY _write_rel ].

:end :instance.


; <<>>
; MULTIKEY < "writing" >

:begin :instance.

writing_up_n1 := intr_noun_word_mle1 &
  [ STEM < "writing", "up" >,
    SYNSEM.LOCAL.KEYS.KEY _writing_up_rel ].

:end :instance.


; <<>>

:begin :instance.

wrong_a1 := intrans_adj_le &
  [ STEM < "wrong" >,
    SYNSEM.LOCAL.KEYS.KEY _wrong_rel ].

:end :instance.


; <<>>

:begin :instance.

wrongly_adv1 := adv_word_le &
  [ STEM < "wrongly" >,
    SYNSEM.LOCAL.KEYS.KEY _wrongly_rel ].

:end :instance.


; <<>>

:begin :instance.

Wuerzburg_n1 := proper_le &
  [ STEM < "wuerzburg" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Wuerzburg ].

:end :instance.


; <<>>

:begin :instance.

yeah_root := disc_adv_le &
  [ STEM < "yeah" >,
    SYNSEM.LOCAL.KEYS.KEY excl_rel & [ EXCL 'yeah ] ].

:end :instance.


; <<>>

:begin :instance.

year_n1 := intr_temp_noun_le &
  [ STEM < "year" >,
    SYNSEM.LOCAL.KEYS.KEY _year_rel ].

:end :instance.


; <<>>

:begin :instance.

yearly_adv1 := vp_adv_post_word_le &
  [ STEM < "yearly" >,
    SYNSEM.LOCAL.KEYS.KEY _yearly_adv_rel ].

:end :instance.


; <<>>

:begin :instance.

yearly_a1 := intrans_adj_le &
  [ STEM < "yearly" >,
    SYNSEM.LOCAL.KEYS.KEY _yearly_rel ].

:end :instance.


; <<>>

:begin :instance.

yep_root := disc_adv_le &
  [ STEM < "yep" >,
    SYNSEM.LOCAL.KEYS.KEY excl_rel & [ EXCL 'yep ] ].

:end :instance.


; <<>>

:begin :instance.

yes_root := disc_adv_le &
  [ STEM < "yes" >,
    SYNSEM.LOCAL.KEYS.KEY excl_rel & [ EXCL 'yes ] ].

:end :instance.


; <<>>

:begin :instance.

yesterday_adv_vm := int_vp_adv_post_word_le &
  [ STEM < "yesterday" >,
    SYNSEM.LOCAL.KEYS.KEY _yesterday_rel ].

:end :instance.


; <<>>

:begin :instance.

yet_adv1 := vp_adv_post_word_le &
  [ STEM < "yet" >,
    SYNSEM.LOCAL.KEYS.KEY _yet_rel ].

:end :instance.


; <<>>

:begin :instance.

York_n1 := proper_le &
  [ STEM < "york" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'York ].

:end :instance.


; <<>>
; MULTIKEY < "welcome" >

:begin :instance.

you_are_welcome_root := disc_adv_3mle3 &
  [ STEM < "you", "are", "welcome" >,
    SYNSEM.LOCAL.KEYS.KEY excl_rel & [ EXCL 'you_are_welcome ] ].

:end :instance.


; <<>>

:begin :instance.

you := pers_pro_le &
  [ STEM < "you" >,
    SYNSEM.LOCAL.KEYS.KEY.INST [ PNG png & [ PN 2per ],
				 PRONTYPE std_2 ] ].

:end :instance.


; <<>>

:begin :instance.

your := poss_le &
  [ STEM < "your" >,
    SYNSEM.LOCAL.CONT.LISZT <! relation, relation,
			       [ INST [ PNG png & [ PN 2per ],
					PRONTYPE std_2 ] ] !> ].
:end :instance.


; <<>>

:begin :instance.

yours := poss_pro_le &
  [ STEM < "yours" >,
    SYNSEM.LOCAL.CONT.LISZT.LIST.FIRST.INST.PNG png & [ PN 2per ] ].

:end :instance.


; <<>>

:begin :instance.

yourself := refl_pro_le &
  [ STEM < "yourself" >,
    SYNSEM.LOCAL.KEYS.KEY.INST.PNG png & [ PN 2sg* ] ].

:end :instance.


; <<>>

:begin :instance.

yourselves := refl_pro_le &
  [ STEM < "yourselves" >,
    SYNSEM.LOCAL.KEYS.KEY.INST.PNG png & [ PN 2pl* ] ].

:end :instance.


; <<>>

:begin :instance.

yum_root := disc_adv_le &
  [ STEM < "yum" >,
    SYNSEM.LOCAL.KEYS.KEY excl_rel & [ EXCL 'yum ] ].

:end :instance.


; <<>>

:begin :instance.

zero_det := det_pl_le &
  [ STEM < "zero" >,
    SYNSEM.LOCAL.KEYS.KEY _no_det_rel ].

:end :instance.


; <<>>

:begin :instance.

zero := bare_unspecified_card_le & 
  [  STEM < "zero" >,
     SYNSEM.LOCAL [ CAT.HEAD intadj1,
		    KEYS.KEY.CONST_VALUE "0" ] ].
:end :instance.


; <<>>

:begin :instance.

Zurich_n1 := proper_le &
  [ STEM < "zurich" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Zurich ].

:end :instance.


; <<>>

:begin :instance.

first := bare_unspecified_ord_le & 
  [ STEM < "first" >,
    SYNSEM.LOCAL [ CAT.HEAD intadj1,
		   KEYS.KEY const_rel & [ CONST_VALUE "1" ] ] ].
:end :instance.


; <<>>

:begin :instance.

second := bare_unspecified_ord_le & 
  [ STEM < "second" >,
    SYNSEM.LOCAL [ CAT.HEAD intadj1,
		   KEYS.KEY const_rel & [ CONST_VALUE "2" ] ] ].

:end :instance.


; <<>>

:begin :instance.

twelfth := bare_unspecified_ord_le &
  [ STEM < "twelfth" >,
    SYNSEM.LOCAL [ CAT.HEAD intadj2,
		   KEYS.KEY const_rel & [ CONST_VALUE "12" ] ] ].

:end :instance.


; <<>>

:begin :instance.

twentieth := bare_unspecified_ord_le &
  [ STEM < "twentieth" >,
    SYNSEM.LOCAL [ CAT.HEAD intadj2,
		   KEYS.KEY const_rel & [ CONST_VALUE "20" ] ] ].

:end :instance.


; <<>>

:begin :instance.

hundredth := bare_specified_ord_le &
  [ STEM < "hundredth" >,
    SYNSEM.LOCAL [ CAT [ HEAD intadj3,
			 VAL.SPR.FIRST.LOCAL.CAT.HEAD intadj3- ],
		   KEYS.KEY const_rel & [ CONST_VALUE "100" ] ] ].
:end :instance.


; <<>>

:begin :instance.

thousandth := bare_specified_ord_le &
  [ STEM < "thousandth" >,
    SYNSEM.LOCAL [ CAT [ HEAD intadj6,
			 VAL.SPR.FIRST.LOCAL.CAT.HEAD intadj3- ],
		   KEYS.KEY const_rel & [ CONST_VALUE "1000" ] ] ].
:end :instance.

; <<>>

:begin :instance.

Aachen_n1 := proper_le &
  [ STEM < "aachen" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Aachen ].

:end :instance.

; <<>>

:begin :instance.

Acapulco_n1 := proper_le &
  [ STEM < "acapulco" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Acapulco ].

:end :instance.

; <<>>

:begin :instance.

Alan_n1 := proper_le &
  [ STEM < "alan" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Alan ].

:end :instance.

; <<>>

:begin :instance.

Alberta_n1 := proper_le &
  [ STEM < "alberta" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Alberta ].

:end :instance.

; <<>>

:begin :instance.

Alex_n1 := proper_le &
  [ STEM < "alex" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Alex ].

:end :instance.

; <<>>

:begin :instance.

Ali_n1 := proper_le &
  [ STEM < "ali" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Ali ].

:end :instance.

; <<>>

:begin :instance.

Allegheny_n1 := proper_le &
  [ STEM < "allegheny" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Allegheny ].

:end :instance.

; <<>>

:begin :instance.

Allequippa_n1 := proper_le &
  [ STEM < "allequippa" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Allequippa ].

:end :instance.

; <<>>
; MULTIKEY < "allied" >

:begin :instance.

Allied_Chemicals_n1 := proper_mle1 &
  [ STEM < "allied", "chemicals" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Allied_Chemicals ].

:end :instance.

; <<>>
; MULTIKEY < "alte" >

:begin :instance.

Alte-Oper_n1 := proper_mle1 &
  [ STEM < "alte", "oper" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Alte-Oper ].

:end :instance.

; <<>>

:begin :instance.

Amy_n1 := proper_le &
  [ STEM < "amy" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Amy ].

:end :instance.

; <<>>

:begin :instance.

Andrew_n1 := proper_le &
  [ STEM < "andrew" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Andrew ].

:end :instance.

; <<>>

:begin :instance.

Andy_n1 := proper_le &
  [ STEM < "andy" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Andy ].

:end :instance.

; <<>>

:begin :instance.

Ann_n1 := proper_le &
  [ STEM < "ann" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Ann ].

:end :instance.

; <<>>

:begin :instance.

Anuj_n1 := proper_le &
  [ STEM < "anuj" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Anuj ].

:end :instance.

; <<>>

:begin :instance.

Arabica_n1 := proper_le &
  [ STEM < "arabica" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Arabica ].

:end :instance.

; <<>>

:begin :instance.

Arthur_n1 := proper_le &
  [ STEM < "arthur" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Arthur ].

:end :instance.

; <<>>

:begin :instance.

Ava_n1 := proper_le &
  [ STEM < "ava" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Ava ].

:end :instance.

; <<>>

:begin :instance.

Baba_n1 := proper_le &
  [ STEM < "baba" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Baba ].

:end :instance.

; <<>>

:begin :instance.

Baden_n1 := proper_le &
  [ STEM < "baden" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Baden ].

:end :instance.

; <<>>

:begin :instance.

Bahamas_n1 := proper_le &
  [ STEM < "bahamas" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Bahamas ].

:end :instance.

; <<>>

:begin :instance.

Bamberg_n1 := proper_le &
  [ STEM < "bamberg" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Bamberg ].

:end :instance.

; <<>>

:begin :instance.

Barbados_n1 := proper_le &
  [ STEM < "barbados" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Barbados ].

:end :instance.

; <<>>

:begin :instance.

Barck_n1 := proper_le &
  [ STEM < "barck" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Barck ].

:end :instance.

; <<>>

:begin :instance.

Bart_n1 := proper_le &
  [ STEM < "bart" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Bart ].

:end :instance.

; <<>>

:begin :instance.

Bayreuth_n1 := proper_le &
  [ STEM < "bayreuth" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Bayreuth ].

:end :instance.

; <<>>

:begin :instance.

Becher_n1 := proper_le &
  [ STEM < "becher" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Becher ].

:end :instance.

; <<>>

:begin :instance.

Beehive_n1 := proper_le &
  [ STEM < "beehive" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Beehive ].

:end :instance.

; <<>>

:begin :instance.

Bellefonte_n1 := proper_le &
  [ STEM < "bellefonte" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Bellefonte ].

:end :instance.

; <<>>

:begin :instance.

Ben_n1 := proper_le &
  [ STEM < "ben" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Ben ].

:end :instance.

; <<>>
; MULTIKEY < "best" >

:begin :instance.

Best-Western_n1 := intr_noun_word_mle1 &
  [ STEM < "best", "western" >,
    SYNSEM.LOCAL.KEYS.KEY named_rel & [ NAMED 'Best-Western ] ].

:end :instance.

; <<>>

:begin :instance.

Bitterfeld_n1 := proper_le &
  [ STEM < "bitterfeld" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Bitterfeld ].

:end :instance.

; <<>>

:begin :instance.

Bouquet_n1 := proper_le &
  [ STEM < "bouquet" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Bouquet ].

:end :instance.

; <<>>

:begin :instance.

Brack_n1 := proper_le &
  [ STEM < "brack" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Brack ].

:end :instance.

; <<>>

:begin :instance.

Bremen_n1 := proper_le &
  [ STEM < "bremen" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Bremen ].

:end :instance.

; <<>>

:begin :instance.

Brother_n2 := proper_le &
  [ STEM < "brother" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Brother ].

:end :instance.

; <<>>

:begin :instance.

Bub_n1 := proper_le &
  [ STEM < "bub" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Bub ].

:end :instance.

; <<>>

:begin :instance.

Bunznudders_n1 := proper_le &
  [ STEM < "bunznudders" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Bunznudders ].

:end :instance.

; <<>>

:begin :instance.

Busch_n1 := proper_le &
  [ STEM < "busch" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Busch ].

:end :instance.

; <<>>

:begin :instance.

California_n1 := proper_le &
  [ STEM < "california" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'California ].

:end :instance.

; <<>>

:begin :instance.

Carmen_n1 := proper_le &
  [ STEM < "carmen" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Carmen ].

:end :instance.

; <<>>

:begin :instance.

Celle_n1 := proper_le &
  [ STEM < "celle" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Celle ].

:end :instance.

; <<>>
; MULTIKEY < "station" >

:begin :instance.

Central-Station_n1 := proper_mle2 &
  [ STEM < "central", "station" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Central-Station ].

:end :instance.

; <<>>
; MULTIKEY < "central" >

:begin :instance.

Central-Station_n2 := intr_noun_word_mle1 &
  [ STEM < "central", "station" >,
    SYNSEM.LOCAL.KEYS.KEY named_rel & [ NAMED 'Central-Station ] ].

:end :instance.

; <<>>

:begin :instance.

Chalfant_n1 := proper_le &
  [ STEM < "chalfant" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Chalfant ].

:end :instance.

; <<>>

:begin :instance.

Charles_n1 := proper_le &
  [ STEM < "charles" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Charles ].

:end :instance.

; <<>>

:begin :instance.

Chemnitz_n1 := proper_le &
  [ STEM < "chemnitz" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Chemnitz ].

:end :instance.

; <<>>

:begin :instance.

China_n1 := proper_le &
  [ STEM < "china" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'China ].

:end :instance.

; <<>>

:begin :instance.

Chris_n1 := proper_le &
  [ STEM < "chris" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Chris ].

:end :instance.

; <<>>

:begin :instance.

Christian_n1 := proper_le &
  [ STEM < "christian" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Christian ].

:end :instance.

; <<>>

:begin :instance.

Cindy_n1 := proper_le &
  [ STEM < "cindy" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Cindy ].

:end :instance.

; <<>>

:begin :instance.

City_n1 := intr_noun_word_le &
  [ STEM < "city" >,
    SYNSEM.LOCAL.KEYS.KEY named_rel & [ NAMED 'City ] ].

:end :instance.

; <<>>

:begin :instance.

Clay_n1 := proper_le &
  [ STEM < "clay" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Clay ].

:end :instance.

; <<>>

:begin :instance.

Cleveland_n1 := proper_le &
  [ STEM < "cleveland" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Cleveland ].

:end :instance.

; <<>>

:begin :instance.

Cliffside_n1 := proper_le &
  [ STEM < "cliffside" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Cliffside ].

:end :instance.

; <<>>

:begin :instance.

Coburg_n1 := proper_le &
  [ STEM < "coburg" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Coburg ].

:end :instance.

; <<>>
; MULTIKEY < "coca" >

:begin :instance.

Coca_Cola_n1 := proper_mle1 &
  [ STEM < "coca", "cola" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Coca_Cola ].

:end :instance.

; <<>>

:begin :instance.

Colorado_n1 := proper_le &
  [ STEM < "colorado" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Colorado ].

:end :instance.

; <<>>

:begin :instance.

Columbus_n1 := proper_le &
  [ STEM < "columbus" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Columbus ].

:end :instance.

; <<>>

:begin :instance.

Compaq_n1 := proper_le &
  [ STEM < "compaq" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Compaq ].

:end :instance.

; <<>>

:begin :instance.

Continental_n1 := proper_le &
  [ STEM < "continental" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Continental ].

:end :instance.

; <<>>

:begin :instance.

Dan_n1 := proper_le &
  [ STEM < "dan" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Dan ].

:end :instance.

; <<>>

:begin :instance.

Dana_n1 := proper_le &
  [ STEM < "dana" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Dana ].

:end :instance.

; <<>>

:begin :instance.

Danny_n1 := proper_le &
  [ STEM < "danny" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Danny ].

:end :instance.

; <<>>

:begin :instance.

Darlene_n1 := proper_le &
  [ STEM < "darlene" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Darlene ].

:end :instance.

; <<>>

:begin :instance.

Dave_n1 := proper_le &
  [ STEM < "dave" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Dave ].

:end :instance.

; <<>>

:begin :instance.

Denny_n1 := proper_le &
  [ STEM < "denny" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Denny ].

:end :instance.

; <<>>

:begin :instance.

Denver_n1 := proper_le &
  [ STEM < "denver" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Denver ].

:end :instance.

; <<>>
; MULTIKEY < "talismann" >

:begin :instance.

Der-Talismann_n1 := proper_mle2 &
  [ STEM < "der", "talismann" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Der-Talismann ].

:end :instance.

; <<>>

:begin :instance.

Detroit_n1 := proper_le &
  [ STEM < "detroit" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Detroit ].

:end :instance.

; <<>>

:begin :instance.

Diepholz_n1 := proper_le &
  [ STEM < "diepholz" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Diepholz ].

:end :instance.

; <<>>

:begin :instance.

Diner_n1 := proper_le &
  [ STEM < "diner" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Diner ].

:end :instance.

; <<>>

:begin :instance.

Doherty_n1 := proper_le &
  [ STEM < "doherty" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Doherty ].

:end :instance.

; <<>>

:begin :instance.

Dolamore_n1 := proper_le &
  [ STEM < "dolamore" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Dolamore ].

:end :instance.

; <<>>

:begin :instance.

Domino_n1 := proper_le &
  [ STEM < "domino" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Domino ].

:end :instance.

; <<>>
; MULTIKEY < "giovanni" >

:begin :instance.

Don-Giovanni_n1 := proper_mle2 &
  [ STEM < "don", "giovanni" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Don-Giovanni ].

:end :instance.

; <<>>

:begin :instance.

Donner_n1 := proper_le &
  [ STEM < "donner" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Donner ].

:end :instance.

; <<>>

:begin :instance.

Doom_n2 := proper_le &
  [ STEM < "doom" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Doom ].

:end :instance.

; <<>>

:begin :instance.

Dortmund_n1 := proper_le &
  [ STEM < "dortmund" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Dortmund ].

:end :instance.

; <<>>

:begin :instance.

Duderstadt_n1 := proper_le &
  [ STEM < "duderstadt" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Duderstadt ].

:end :instance.

; <<>>

:begin :instance.

Duisburg_n1 := proper_le &
  [ STEM < "duisburg" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Duisburg ].

:end :instance.

; <<>>

:begin :instance.

Eaton_n1 := proper_le &
  [ STEM < "eaton" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Eaton ].

:end :instance.

; <<>>

:begin :instance.

Eggers_n1 := proper_le &
  [ STEM < "eggers" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Eggers ].

:end :instance.

; <<>>

:begin :instance.

Eleanor_n1 := proper_le &
  [ STEM < "eleanor" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Eleanor ].

:end :instance.

; <<>>

:begin :instance.

Elektronika_n1 := proper_le &
  [ STEM < "elektronika" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Elektronika ].

:end :instance.

; <<>>
; MULTIKEY < "platz" >

:begin :instance.

Ernst-August-Platz_n1 := proper_3mle3 &
  [ STEM < "ernst", "august", "platz" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Ernst-August-Platz ].

:end :instance.

; <<>>

:begin :instance.

Erz_n1 := proper_le &
  [ STEM < "erz" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Erz ].

:end :instance.

; <<>>

:begin :instance.

Esslingen_n1 := proper_le &
  [ STEM < "esslingen" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Esslingen ].

:end :instance.

; <<>>

:begin :instance.

Eugene_n1 := proper_le &
  [ STEM < "eugene" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Eugene ].

:end :instance.

; <<>>

:begin :instance.

Eva_n1 := proper_le &
  [ STEM < "eva" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Eva ].

:end :instance.

; <<>>
; MULTIKEY < "adele" >

:begin :instance.

Eva-And-Adele_n1 := proper_3mle3 &
  [ STEM < "eva", "and", "adele" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Eva-And-Adele ].

:end :instance.

; <<>>

:begin :instance.

Everman_n1 := proper_le &
  [ STEM < "everman" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Everman ].

:end :instance.

; <<>>

:begin :instance.

Faz_n1 := proper_le &
  [ STEM < "faz" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Faz ].

:end :instance.

; <<>>

:begin :instance.

Fasanengarten_n1 := intr_noun_word_le &
  [ STEM < "fasanengarten" >,
    SYNSEM.LOCAL.KEYS.KEY named_rel & [ NAMED 'Fasanengarten ] ].

:end :instance.

; <<>>

:begin :instance.

Felsenburg_n1 := proper_le &
  [ STEM < "felsenburg" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Felsenburg ].

:end :instance.

; <<>>

:begin :instance.

Fischlein_n1 := proper_le &
  [ STEM < "fischlein" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Fischlein ].

:end :instance.

; <<>>

:begin :instance.

Florida_n1 := proper_le &
  [ STEM < "florida" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Florida ].

:end :instance.

; <<>>

:begin :instance.

Forbes_n1 := proper_le &
  [ STEM < "forbes" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Forbes ].

:end :instance.

; <<>>

:begin :instance.

Freiburg_n1 := proper_le &
  [ STEM < "freiburg" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Freiburg ].

:end :instance.

; <<>>

:begin :instance.

Freyburg_n1 := proper_le &
  [ STEM < "freyburg" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Freyburg ].

:end :instance.

; <<>>

:begin :instance.

Friedrichshafen_n1 := proper_le &
  [ STEM < "friedrichshafen" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Friedrichshafen ].

:end :instance.

; <<>>

:begin :instance.

Fritzsche_n1 := proper_le &
  [ STEM < "fritzsche" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Fritzsche ].

:end :instance.

; <<>>

:begin :instance.

Fulda_n1 := proper_le &
  [ STEM < "fulda" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Fulda ].

:end :instance.

; <<>>

:begin :instance.

Furui_n1 := proper_le &
  [ STEM < "furui" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Furui ].

:end :instance.

; <<>>

:begin :instance.

Gema_n1 := proper_le &
  [ STEM < "gema" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Gema ].

:end :instance.

; <<>>
; MULTIKEY < "stift" >

:begin :instance.

Galerie-Stift_n1 := proper_mle2 &
  [ STEM < "galerie", "stift" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Galerie-Stift ].

:end :instance.

; <<>>
; MULTIKEY < "stift" >

:begin :instance.

Galerie-Am-Stift_n1 := proper_3mle3 &
  [ STEM < "galerie", "am", "stift" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Galerie-Am-Stift ].

:end :instance.

; <<>>

:begin :instance.

Georg_n1 := proper_le &
  [ STEM < "georg" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Georg ].

:end :instance.

; <<>>

:begin :instance.

Gerald_n1 := proper_le &
  [ STEM < "gerald" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Gerald ].

:end :instance.

; <<>>

:begin :instance.

Gerhard_n1 := proper_le &
  [ STEM < "gerhard" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Gerhard ].

:end :instance.

; <<>>

:begin :instance.

Gie_n1 := proper_le &
  [ STEM < "gie" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Gie ].

:end :instance.

; <<>>

:begin :instance.

Ginkinspiel_n1 := proper_le &
  [ STEM < "ginkinspiel" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Ginkinspiel ].

:end :instance.

; <<>>

:begin :instance.

Girst_n1 := proper_le &
  [ STEM < "girst" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Girst ].

:end :instance.

; <<>>

:begin :instance.

Goehring_n1 := proper_le &
  [ STEM < "goehring" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Goehring ].

:end :instance.

; <<>>

:begin :instance.

Goettman_n1 := proper_le &
  [ STEM < "goettman" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Goettman ].

:end :instance.

; <<>>

:begin :instance.

Goslar_n1 := proper_le &
  [ STEM < "goslar" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Goslar ].

:end :instance.

; <<>>

:begin :instance.

Gotha_n1 := proper_le &
  [ STEM < "gotha" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Gotha ].

:end :instance.

; <<>>
; MULTIKEY < "great" >

:begin :instance.

Great_Scot_n1 := proper_mle1 &
  [ STEM < "great", "scot" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Great_Scot ].

:end :instance.

; <<>>

:begin :instance.

Greg_n1 := proper_le &
  [ STEM < "greg" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Greg ].

:end :instance.

; <<>>

:begin :instance.

Gries_n1 := proper_le &
  [ STEM < "gries" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Gries ].

:end :instance.

; <<>>

:begin :instance.

Gro_n1 := proper_le &
  [ STEM < "gro" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Gro ].

:end :instance.

; <<>>

:begin :instance.

Groth_n1 := proper_le &
  [ STEM < "groth" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Groth ].

:end :instance.

; <<>>
; MULTIKEY < "heine" >

:begin :instance.

Groth-Heine_n1 := proper_mle2 &
  [ STEM < "groth", "heine" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Groth-Heine ].

:end :instance.

; <<>>

:begin :instance.

Grubenhagen_n1 := proper_le &
  [ STEM < "grubenhagen" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Grubenhagen ].

:end :instance.

; <<>>

:begin :instance.

Gullifty_n1 := proper_le &
  [ STEM < "gullifty" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Gullifty ].

:end :instance.

; <<>>

:begin :instance.

Hagen_n1 := proper_le &
  [ STEM < "hagen" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Hagen ].

:end :instance.

; <<>>

:begin :instance.

Hall_n1 := proper_le &
  [ STEM < "hall" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Hall ].

:end :instance.

; <<>>

:begin :instance.

Halle_n1 := proper_le &
  [ STEM < "halle" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Halle ].

:end :instance.

; <<>>

:begin :instance.

Hans_n1 := proper_le &
  [ STEM < "hans" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Hans ].

:end :instance.

; <<>>

:begin :instance.

Harp_n1 := proper_le &
  [ STEM < "harp" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Harp ].

:end :instance.

; <<>>

:begin :instance.

Hawaii_n1 := proper_le &
  [ STEM < "hawaii" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Hawaii ].

:end :instance.

; <<>>

:begin :instance.

Heidi_n1 := proper_le &
  [ STEM < "heidi" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Heidi ].

:end :instance.

; <<>>

:begin :instance.

Heilbronn_n1 := proper_le &
  [ STEM < "heilbronn" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Heilbronn ].

:end :instance.

; <<>>

:begin :instance.

Heine_n1 := proper_le &
  [ STEM < "heine" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Heine ].

:end :instance.

; <<>>

:begin :instance.

Herald_n1 := proper_le &
  [ STEM < "herald" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Herald ].

:end :instance.

; <<>>

:begin :instance.

Hermann_n1 := proper_le &
  [ STEM < "hermann" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Hermann ].

:end :instance.

; <<>>

:begin :instance.

Herrenhausen_n1 := proper_le &
  [ STEM < "herrenhausen" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Herrenhausen ].

:end :instance.

; <<>>

:begin :instance.

Herrmann_n1 := proper_le &
  [ STEM < "herrmann" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Herrmann ].

:end :instance.

; <<>>

:begin :instance.

Hessen_n1 := proper_le &
  [ STEM < "hessen" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Hessen ].

:end :instance.

; <<>>

:begin :instance.

Hilton_n1 := intr_noun_word_le &
  [ STEM < "hilton" >,
    SYNSEM.LOCAL.KEYS.KEY named_rel & [ NAMED 'Hilton ] ].

:end :instance.

; <<>>

:begin :instance.

Hiratsuka_n1 := proper_le &
  [ STEM < "hiratsuka" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Hiratsuka ].

:end :instance.

; <<>>

:begin :instance.

Hochmut_n1 := proper_le &
  [ STEM < "hochmut" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Hochmut ].

:end :instance.

; <<>>

:begin :instance.

Hockenheim_n1 := proper_le &
  [ STEM < "hockenheim" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Hockenheim ].

:end :instance.

; <<>>

:begin :instance.

Holland_n1 := proper_le &
  [ STEM < "holland" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Holland ].

:end :instance.

; <<>>

:begin :instance.

Holstein_n1 := proper_le &
  [ STEM < "holstein" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Holstein ].

:end :instance.

; <<>>

:begin :instance.

Homburg_n1 := proper_le &
  [ STEM < "homburg" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Homburg ].

:end :instance.

; <<>>

:begin :instance.

Horke_n1 := proper_le &
  [ STEM < "horke" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Horke ].

:end :instance.

; <<>>

:begin :instance.

Horst_n1 := proper_le &
  [ STEM < "horst" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Horst ].

:end :instance.

; <<>>
; MULTIKEY < "bahnhof" >

:begin :instance.

Hospitz-Am-Bahnhof_n1 := proper_3mle3 &
  [ STEM < "hospitz", "am", "bahnhof" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Hospitz-Am-Bahnhof ].

:end :instance.

; <<>>

:begin :instance.

Houlihan_n1 := proper_le &
  [ STEM < "houlihan" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Houlihan ].

:end :instance.

; <<>>

:begin :instance.

Hummel_n1 := proper_le &
  [ STEM < "hummel" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Hummel ].

:end :instance.

; <<>>

:begin :instance.

Iida_n1 := proper_le &
  [ STEM < "iida" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Iida ].

:end :instance.

; <<>>
; MULTIKEY < "irish" >

:begin :instance.

Irish-Over_n1 := proper_mle1 &
  [ STEM < "irish", "over" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Irish-Over ].

:end :instance.

; <<>>

:begin :instance.

Jackie_n1 := proper_le &
  [ STEM < "jackie" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Jackie ].

:end :instance.

; <<>>
; MULTIKEY < "adele" >

:begin :instance.

Jakob-And-Adele_n1 := proper_3mle3 &
  [ STEM < "jakob", "and", "adele" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Jakob-And-Adele ].

:end :instance.

; <<>>

:begin :instance.

Japan_n1 := proper_le &
  [ STEM < "japan" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Japan ].

:end :instance.

; <<>>

:begin :instance.

Jena_n1 := proper_le &
  [ STEM < "jena" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Jena ].

:end :instance.

; <<>>

:begin :instance.

Jenifer_n1 := proper_le &
  [ STEM < "jenifer" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Jenifer ].

:end :instance.

; <<>>

:begin :instance.

Jennifer_n1 := proper_le &
  [ STEM < "jennifer" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Jennifer ].

:end :instance.

; <<>>

:begin :instance.

Jerusalem_n1 := proper_le &
  [ STEM < "jerusalem" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Jerusalem ].

:end :instance.

; <<>>

:begin :instance.

Jesus_n1 := proper_le &
  [ STEM < "jesus" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Jesus ].

:end :instance.

; <<>>

:begin :instance.

Johannes_n1 := proper_le &
  [ STEM < "johannes" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Johannes ].

:end :instance.

; <<>>

:begin :instance.

Jones_n1 := proper_le &
  [ STEM < "jones" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Jones ].

:end :instance.

; <<>>

:begin :instance.

Juli_n1 := proper_le &
  [ STEM < "juli" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Juli ].

:end :instance.

; <<>>

:begin :instance.

Kaiserhof_n1 := intr_noun_word_le &
  [ STEM < "kaiserhof" >,
    SYNSEM.LOCAL.KEYS.KEY named_rel & [ NAMED 'Kaiserhof ] ].

:end :instance.

; <<>>

:begin :instance.

Kaiserslautern_n1 := proper_le &
  [ STEM < "kaiserslautern" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Kaiserslautern ].

:end :instance.

; <<>>

:begin :instance.

Kehl_n1 := proper_le &
  [ STEM < "kehl" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Kehl ].

:end :instance.

; <<>>

:begin :instance.

Kempten_n1 := proper_le &
  [ STEM < "kempten" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Kempten ].

:end :instance.

; <<>>

:begin :instance.

Kerstin_n1 := proper_le &
  [ STEM < "kerstin" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Kerstin ].

:end :instance.

; <<>>

:begin :instance.

Kevin_n1 := proper_le &
  [ STEM < "kevin" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Kevin ].

:end :instance.

; <<>>

:begin :instance.

Kinter_n1 := proper_le &
  [ STEM < "kinter" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Kinter ].

:end :instance.

; <<>>

:begin :instance.

Klee_n1 := proper_le &
  [ STEM < "klee" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Klee ].

:end :instance.

; <<>>

:begin :instance.

Kleinschmidt_n1 := proper_le &
  [ STEM < "kleinschmidt" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Kleinschmidt ].

:end :instance.

; <<>>

:begin :instance.

Knorr_n1 := proper_le &
  [ STEM < "knorr" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Knorr ].

:end :instance.

; <<>>

:begin :instance.

Koblenz_n1 := proper_le &
  [ STEM < "koblenz" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Koblenz ].

:end :instance.

; <<>>

:begin :instance.

Konstanz_n1 := proper_le &
  [ STEM < "konstanz" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Konstanz ].

:end :instance.

; <<>>

:begin :instance.

Kopp_n1 := proper_le &
  [ STEM < "kopp" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Kopp ].

:end :instance.

; <<>>

:begin :instance.

Lafayette_n1 := proper_le &
  [ STEM < "lafayette" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Lafayette ].

:end :instance.

; <<>>

:begin :instance.

Lamont_n1 := proper_le &
  [ STEM < "lamont" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Lamont ].

:end :instance.

; <<>>

:begin :instance.

Landau_n1 := proper_le &
  [ STEM < "landau" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Landau ].

:end :instance.

; <<>>

:begin :instance.

Landsberg_n1 := proper_le &
  [ STEM < "landsberg" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Landsberg ].

:end :instance.

; <<>>

:begin :instance.

Landshut_n1 := proper_le &
  [ STEM < "landshut" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Landshut ].

:end :instance.

; <<>>

:begin :instance.

Lane_n1 := proper_le &
  [ STEM < "lane" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Lane ].

:end :instance.

; <<>>

:begin :instance.

Lang_n1 := proper_le &
  [ STEM < "lang" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Lang ].

:end :instance.

; <<>>

:begin :instance.

Larry_n1 := proper_le &
  [ STEM < "larry" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Larry ].

:end :instance.

; <<>>

:begin :instance.

Latimer_n1 := proper_le &
  [ STEM < "latimer" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Latimer ].

:end :instance.

; <<>>

:begin :instance.

Lauper_n1 := proper_le &
  [ STEM < "lauper" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Lauper ].

:end :instance.

; <<>>

:begin :instance.

Lause_n1 := proper_le &
  [ STEM < "lause" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Lause ].

:end :instance.

; <<>>

:begin :instance.

Lauser_n1 := proper_le &
  [ STEM < "lauser" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Lauser ].

:end :instance.

; <<>>

:begin :instance.

Lew_n1 := proper_le &
  [ STEM < "lew" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Lew ].

:end :instance.

; <<>>

:begin :instance.

Limburg_n1 := proper_le &
  [ STEM < "limburg" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Limburg ].

:end :instance.

; <<>>

:begin :instance.

Linden_n1 := proper_le &
  [ STEM < "linden" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Linden ].

:end :instance.

; <<>>

:begin :instance.

Lively_n1 := proper_le &
  [ STEM < "lively" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Lively ].

:end :instance.

; <<>>
; MULTIKEY < "lloyd" >

:begin :instance.

Lloyd-Webber_n1 := proper_mle1 &
  [ STEM < "lloyd", "webber" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Lloyd-Webber ].

:end :instance.

; <<>>

:begin :instance.

London_n1 := proper_le &
  [ STEM < "london" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'London ].

:end :instance.

; <<>>

:begin :instance.

Lord_n1 := proper_le &
  [ STEM < "lord" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Lord ].

:end :instance.

; <<>>

:begin :instance.

Lufthansa_n1 := proper_le &
  [ STEM < "lufthansa" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Lufthansa ].

:end :instance.

; <<>>

:begin :instance.

Luisenhof_n1 := intr_noun_word_le &
  [ STEM < "luisenhof" >,
    SYNSEM.LOCAL.KEYS.KEY named_rel & [ NAMED 'Luisenhof ] ].

:end :instance.

; <<>>

:begin :instance.

Lysander_n1 := proper_le &
  [ STEM < "lysander" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Lysander ].

:end :instance.

; <<>>

:begin :instance.

Mac_n1 := proper_le &
  [ STEM < "mac" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Mac ].

:end :instance.

; <<>>

:begin :instance.

Madrid_n1 := proper_le &
  [ STEM < "madrid" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Madrid ].

:end :instance.

; <<>>

:begin :instance.

Marcy_n1 := proper_le &
  [ STEM < "marcy" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Marcy ].

:end :instance.

; <<>>

:begin :instance.

Maritim_n1 := intr_noun_word_le &
  [ STEM < "maritim" >,
    SYNSEM.LOCAL.KEYS.KEY named_rel & [ NAMED 'Maritim ] ].

:end :instance.

; <<>>

:begin :instance.

Mark_n1 := proper_le &
  [ STEM < "mark" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Mark ].

:end :instance.

; <<>>

:begin :instance.

Maschsee_n1 := proper_le &
  [ STEM < "maschsee" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Maschsee ].

:end :instance.

; <<>>

:begin :instance.

Maui_n1 := proper_le &
  [ STEM < "maui" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Maui ].

:end :instance.

; <<>>

:begin :instance.

Metze_n1 := proper_le &
  [ STEM < "metze" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Metze ].

:end :instance.

; <<>>
; MULTIKEY < "kuckuck" >

:begin :instance.

Meyer-Kuckuck_n1 := proper_mle2 &
  [ STEM < "meyer", "kuckuck" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Meyer-Kuckuck ].

:end :instance.

; <<>>

:begin :instance.

Michael_n1 := proper_le &
  [ STEM < "michael" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Michael ].

:end :instance.

; <<>>

:begin :instance.

Mike_n1 := proper_le &
  [ STEM < "mike" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Mike ].

:end :instance.

; <<>>

:begin :instance.

Milan_n1 := proper_le &
  [ STEM < "milan" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Milan ].

:end :instance.

; <<>>

:begin :instance.

Minden_n1 := proper_le &
  [ STEM < "minden" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Minden ].

:end :instance.

; <<>>

:begin :instance.

Mittler_n1 := proper_le &
  [ STEM < "mittler" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Mittler ].

:end :instance.

; <<>>

:begin :instance.

Monogahela_n1 := proper_le &
  [ STEM < "monogahela" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Monogahela ].

:end :instance.

; <<>>

:begin :instance.

Monongahela_n1 := proper_le &
  [ STEM < "monongahela" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Monongahela ].

:end :instance.

; <<>>

:begin :instance.

Morimoto_n1 := proper_le &
  [ STEM < "morimoto" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Morimoto ].

:end :instance.

; <<>>

:begin :instance.

Mozart_n1 := proper_le &
  [ STEM < "mozart" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Mozart ].

:end :instance.

; <<>>

:begin :instance.

Nestroy_n1 := proper_le &
  [ STEM < "nestroy" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Nestroy ].

:end :instance.

; <<>>

:begin :instance.

Netherlands_n1 := intr_noun_word_le &
  [ STEM < "netherlands" >,
    SYNSEM.LOCAL.KEYS.KEY named_rel & [ NAMED 'Netherlands ] ].

:end :instance.

; <<>>
; MULTIKEY < "new" >

:begin :instance.

New_York_n1 := proper_mle1 &
  [ STEM < "new", "york" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'New_York ].

:end :instance.

; <<>>
; MULTIKEY < "city" >

:begin :instance.

New_York_City_n1 := proper_3mle3 &
  [ STEM < "new", "york", "city" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'New_York ].

:end :instance.


; <<>>

:begin :instance.

Nick_n1 := proper_le &
  [ STEM < "nick" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Nick ].

:end :instance.

; <<>>

:begin :instance.

Nils_n1 := proper_le &
  [ STEM < "nils" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Nils ].

:end :instance.

; <<>>

:begin :instance.

Noah_n1 := proper_le &
  [ STEM < "noah" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Noah ].

:end :instance.

; <<>>

:begin :instance.

Northumberland_n1 := proper_le &
  [ STEM < "northumberland" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Northumberland ].

:end :instance.

; <<>>

:begin :instance.

Norton_n1 := proper_le &
  [ STEM < "norton" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Norton ].

:end :instance.

; <<>>

:begin :instance.

Norway_n1 := proper_le &
  [ STEM < "norway" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Norway ].

:end :instance.

; <<>>

:begin :instance.

Oakes_n1 := proper_le &
  [ STEM < "oakes" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Oakes ].

:end :instance.

; <<>>

:begin :instance.

Oakland_n1 := proper_le &
  [ STEM < "oakland" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Oakland ].

:end :instance.

; <<>>

:begin :instance.

Oakside_n1 := proper_le &
  [ STEM < "oakside" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Oakside ].

:end :instance.

; <<>>

:begin :instance.

Oberressel_n1 := proper_le &
  [ STEM < "oberressel" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Oberressel ].

:end :instance.

; <<>>

:begin :instance.

Oder_n1 := proper_le &
  [ STEM < "oder" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Oder ].

:end :instance.

; <<>>

:begin :instance.

Offenbach_n1 := proper_le &
  [ STEM < "offenbach" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Offenbach ].

:end :instance.

; <<>>

:begin :instance.

Offenburg_n1 := proper_le &
  [ STEM < "offenburg" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Offenburg ].

:end :instance.

; <<>>

:begin :instance.

Ogai_n1 := proper_le &
  [ STEM < "ogai" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Ogai ].

:end :instance.

; <<>>

:begin :instance.

Oglethorpe_n1 := proper_le &
  [ STEM < "oglethorpe" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Oglethorpe ].

:end :instance.

; <<>>

:begin :instance.

Oldenburg_n1 := proper_le &
  [ STEM < "oldenburg" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Oldenburg ].

:end :instance.

; <<>>

:begin :instance.

Paderborn_n1 := proper_le &
  [ STEM < "paderborn" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Paderborn ].

:end :instance.

; <<>>

:begin :instance.

Paradise_n1 := proper_le &
  [ STEM < "paradise" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Paradise ].

:end :instance.

; <<>>

:begin :instance.

Park_n1 := proper_le &
  [ STEM < "park" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Park ].

:end :instance.

; <<>>

:begin :instance.

Parkhotel_n1 := intr_noun_word_le &
  [ STEM < "parkhotel" >,
    SYNSEM.LOCAL.KEYS.KEY named_rel & [ NAMED 'Parkhotel ] ].

:end :instance.

; <<>>

:begin :instance.

Passau_n1 := proper_le &
  [ STEM < "passau" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Passau ].

:end :instance.

; <<>>

:begin :instance.

Patty_n1 := proper_le &
  [ STEM < "patty" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Patty ].

:end :instance.

; <<>>

:begin :instance.

Paul_n1 := proper_le &
  [ STEM < "paul" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Paul ].

:end :instance.

; <<>>

:begin :instance.

Pforzheim_n1 := proper_le &
  [ STEM < "pforzheim" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Pforzheim ].

:end :instance.

; <<>>

:begin :instance.

Philadelphia_n1 := proper_le &
  [ STEM < "philadelphia" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Philadelphia ].

:end :instance.

; <<>>

:begin :instance.

Philly_n1 := proper_le &
  [ STEM < "philly" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Philly ].

:end :instance.

; <<>>

:begin :instance.

Potsdam_n1 := proper_le &
  [ STEM < "potsdam" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Potsdam ].

:end :instance.

; <<>>

:begin :instance.

Primanti_n1 := proper_le &
  [ STEM < "primanti" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Primanti ].

:end :instance.

; <<>>

:begin :instance.

Radeberg_n1 := proper_le &
  [ STEM < "radeberg" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Radeberg ].

:end :instance.

; <<>>

:begin :instance.

Recklinghausen_n1 := proper_le &
  [ STEM < "recklinghausen" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Recklinghausen ].

:end :instance.

; <<>>

:begin :instance.

Red_n1 := proper_le &
  [ STEM < "red" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Red ].

:end :instance.

; <<>>

:begin :instance.

Regensburg_n1 := proper_le &
  [ STEM < "regensburg" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Regensburg ].

:end :instance.

; <<>>

:begin :instance.

Rendsburg_n1 := proper_le &
  [ STEM < "rendsburg" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Rendsburg ].

:end :instance.

; <<>>

:begin :instance.

Renner_n1 := proper_le &
  [ STEM < "renner" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Renner ].

:end :instance.

; <<>>

:begin :instance.

Reutlingen_n1 := proper_le &
  [ STEM < "reutlingen" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Reutlingen ].

:end :instance.

; <<>>

:begin :instance.

Rhein_n1 := proper_le &
  [ STEM < "rhein" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Rhein ].

:end :instance.

; <<>>

:begin :instance.

Rheinland_n1 := proper_le &
  [ STEM < "rheinland" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Rheinland ].

:end :instance.

; <<>>

:begin :instance.

Ribeau_n1 := proper_le &
  [ STEM < "ribeau" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Ribeau ].

:end :instance.

; <<>>

:begin :instance.

Richter_n1 := proper_le &
  [ STEM < "richter" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Richter ].

:end :instance.

; <<>>

:begin :instance.

Rob_n1 := proper_le &
  [ STEM < "rob" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Rob ].

:end :instance.

; <<>>

:begin :instance.

Robert_n1 := proper_le &
  [ STEM < "robert" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Robert ].

:end :instance.

; <<>>

:begin :instance.

Rome_n1 := proper_le &
  [ STEM < "rome" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Rome ].

:end :instance.

; <<>>

:begin :instance.

Rothenburg_n1 := proper_le &
  [ STEM < "rothenburg" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Rothenburg ].

:end :instance.

; <<>>

:begin :instance.

Rottweil_n1 := proper_le &
  [ STEM < "rottweil" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Rottweil ].

:end :instance.

; <<>>

:begin :instance.

Russell_n1 := proper_le &
  [ STEM < "russell" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Russell ].

:end :instance.

; <<>>

:begin :instance.

Siggraph_n1 := proper_le &
  [ STEM < "siggraph" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Siggraph ].

:end :instance.

; <<>>

:begin :instance.

Sam_n1 := proper_le &
  [ STEM < "sam" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Sam ].

:end :instance.

; <<>>
; MULTIKEY < "san" >

:begin :instance.

San_Francisco_n1 := proper_mle1 &
  [ STEM < "san", "francisco" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'San_Francisco ].

:end :instance.

; <<>>
; MULTIKEY < "co" >

:begin :instance.

Sauber-Und-Co_n1 := proper_3mle3 &
  [ STEM < "saube", "und", "co" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Sauber-Und-Co ].

:end :instance.

; <<>>

:begin :instance.

Scarazzo_n1 := proper_le &
  [ STEM < "scarazzo" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Scarazzo ].

:end :instance.

; <<>>

:begin :instance.

Schauspielhaus_n1 := proper_le &
  [ STEM < "schauspielhaus" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Schauspielhaus ].

:end :instance.

; <<>>

:begin :instance.

Schenley_n1 := proper_le &
  [ STEM < "schenley" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Schenley ].

:end :instance.

; <<>>

:begin :instance.

Schleswig_n1 := proper_le &
  [ STEM < "schleswig" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Schleswig ].

:end :instance.

; <<>>

:begin :instance.

Schlitz_n1 := proper_le &
  [ STEM < "schlitz" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Schlitz ].

:end :instance.

; <<>>

:begin :instance.

Scott_n1 := proper_le &
  [ STEM < "scott" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Scott ].

:end :instance.

; <<>>

:begin :instance.

Seattle_n1 := proper_le &
  [ STEM < "seattle" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Seattle ].

:end :instance.

; <<>>

:begin :instance.

Seymour_n1 := proper_le &
  [ STEM < "seymour" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Seymour ].

:end :instance.

; <<>>

:begin :instance.

Shady_n1 := proper_le &
  [ STEM < "shady" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Shady ].

:end :instance.

; <<>>

:begin :instance.

Shadyside_n1 := proper_le &
  [ STEM < "shadyside" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Shadyside ].

:end :instance.

; <<>>

:begin :instance.

Siam_n1 := proper_le &
  [ STEM < "siam" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Siam ].

:end :instance.

; <<>>

:begin :instance.

Siegen_n1 := proper_le &
  [ STEM < "siegen" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Siegen ].

:end :instance.

; <<>>

:begin :instance.

Singen_n1 := proper_le &
  [ STEM < "singen" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Singen ].

:end :instance.

; <<>>

:begin :instance.

Slowig_n1 := proper_le &
  [ STEM < "slowig" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Slowig ].

:end :instance.

; <<>>

:begin :instance.

Soutome_n1 := proper_le &
  [ STEM < "soutome" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Soutome ].

:end :instance.

; <<>>
; MULTIKEY < "spaghetti" >

:begin :instance.

Spaghetti_Warehouse_n1 := intr_noun_word_mle1 &
  [ STEM < "spaghetti", "warehouse" >,
    SYNSEM.LOCAL.KEYS.KEY named_rel & [ NAMED 'Spaghetti_Warehouse ] ].

:end :instance.

; <<>>

:begin :instance.

Speyer_n1 := proper_le &
  [ STEM < "speyer" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Speyer ].

:end :instance.

; <<>>

:begin :instance.

Sprengel_n1 := proper_le &
  [ STEM < "sprengel" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Sprengel ].

:end :instance.

; <<>>

:begin :instance.

Staatstheater_n1 := intr_noun_word_le &
  [ STEM < "staatstheater" >,
    SYNSEM.LOCAL.KEYS.KEY named_rel & [ NAMED 'Staatstheater ] ].

:end :instance.

; <<>>
; MULTIKEY < "stairway" >

:begin :instance.

Stairway-Queen_n1 := proper_mle1 &
  [ STEM < "stairway", "queen" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Stairway-Queen ].

:end :instance.

; <<>>

:begin :instance.

Starnberg_n1 := proper_le &
  [ STEM < "starnberg" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Starnberg ].

:end :instance.

; <<>>
; MULTIKEY < "steinhuder" >

:begin :instance.

Steinhuder-Meer_n1 := proper_mle1 &
  [ STEM < "steinhuder", "meer" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Steinhuder-Meer ].

:end :instance.

; <<>>

:begin :instance.

Stern_n1 := proper_le &
  [ STEM < "stern" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Stern ].

:end :instance.

; <<>>

:begin :instance.

Stift_n1 := proper_le &
  [ STEM < "stift" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Stift ].

:end :instance.

; <<>>

:begin :instance.

Stralsund_n1 := proper_le &
  [ STEM < "stralsund" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Stralsund ].

:end :instance.

; <<>>

:begin :instance.

Strasbourg_n1 := proper_le &
  [ STEM < "strasbourg" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Strasbourg ].

:end :instance.

; <<>>

:begin :instance.

Strom_n1 := proper_le &
  [ STEM < "strom" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Strom ].

:end :instance.

; <<>>

:begin :instance.

Stromberg_n1 := proper_le &
  [ STEM < "stromberg" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Stromberg ].

:end :instance.

; <<>>

:begin :instance.

Subway_n1 := proper_le &
  [ STEM < "subway" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Subway ].

:end :instance.

; <<>>

:begin :instance.

Sugar_n1 := proper_le &
  [ STEM < "sugar" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Sugar ].

:end :instance.

; <<>>

:begin :instance.

Sullivan_n1 := proper_le &
  [ STEM < "sullivan" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Sullivan ].

:end :instance.

; <<>>

:begin :instance.

Summers_n1 := proper_le &
  [ STEM < "summers" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Summers ].

:end :instance.

; <<>>

:begin :instance.

Susquehanna_n1 := proper_le &
  [ STEM < "susquehanna" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Susquehanna ].

:end :instance.

; <<>>
; MULTIKEY < "taco" >

:begin :instance.

Taco_Bell_n1 := proper_mle1 &
  [ STEM < "taco", "bell" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Taco_Bell ].

:end :instance.

; <<>>

:begin :instance.

Takemoto_n1 := proper_le &
  [ STEM < "takemoto" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Takemoto ].

:end :instance.

; <<>>
; MULTIKEY < "ape" >

:begin :instance.

The-Hairy-Ape_n1 := proper_3mle3 &
  [ STEM < "the", "hairy", "ape" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'The-Hairy-Ape ].

:end :instance.

; <<>>

:begin :instance.

Thomas_n1 := proper_le &
  [ STEM < "thomas" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Thomas ].

:end :instance.

; <<>>

:begin :instance.

Timothy_n1 := proper_le &
  [ STEM < "timothy" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Timothy ].

:end :instance.

; <<>>

:begin :instance.

Tokyo_n1 := proper_le &
  [ STEM < "tokyo" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Tokyo ].

:end :instance.

; <<>>

:begin :instance.

Tor_n1 := proper_le &
  [ STEM < "tor" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Tor ].

:end :instance.

; <<>>

:begin :instance.

Toronto_n1 := proper_le &
  [ STEM < "toronto" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Toronto ].

:end :instance.

; <<>>

:begin :instance.

Torsten_n1 := proper_le &
  [ STEM < "torsten" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Torsten ].

:end :instance.

; <<>>

:begin :instance.

Traunstein_n1 := proper_le &
  [ STEM < "traunstein" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Traunstein ].

:end :instance.

; <<>>

:begin :instance.

Trevor_n1 := proper_le &
  [ STEM < "trevor" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Trevor ].

:end :instance.

; <<>>

:begin :instance.

Trier_n1 := proper_le &
  [ STEM < "trier" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Trier ].

:end :instance.

; <<>>

:begin :instance.

US_n1 := intr_noun_word_le &
  [ STEM < "us" >,
    SYNSEM.LOCAL.KEYS.KEY named_rel & [ NAMED 'US ] ].

:end :instance.

; <<>>

:begin :instance.

Ulm_n1 := proper_le &
  [ STEM < "ulm" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Ulm ].

:end :instance.

; <<>>
; MULTIKEY < "united" >

:begin :instance.

United_States_n1 := intr_noun_word_mle1 &
  [ STEM < "united", "states" >,
    SYNSEM.LOCAL.KEYS.KEY named_rel & [ NAMED 'United_States ] ].

:end :instance.

; <<>>

:begin :instance.

Venice_n1 := proper_le &
  [ STEM < "venice" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Venice ].

:end :instance.

; <<>>

:begin :instance.

Wahlster_n1 := proper_le &
  [ STEM < "wahlster" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Wahlster ].

:end :instance.

; <<>>

:begin :instance.

Waibel_n1 := proper_le &
  [ STEM < "waibel" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Waibel ].

:end :instance.

; <<>>

:begin :instance.

Wall_n1 := proper_le &
  [ STEM < "wall" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Wall ].

:end :instance.

; <<>>

:begin :instance.

Wally_n1 := proper_le &
  [ STEM < "wally" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Wally ].

:end :instance.

; <<>>

:begin :instance.

Warner_n1 := proper_le &
  [ STEM < "warner" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Warner ].

:end :instance.

; <<>>

:begin :instance.

Water_n1 := proper_le &
  [ STEM < "water" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Water ].

:end :instance.

; <<>>

:begin :instance.

Wean_n1 := proper_le &
  [ STEM < "wean" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Wean ].

:end :instance.

; <<>>

:begin :instance.

Wetzlar_n1 := proper_le &
  [ STEM < "wetzlar" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Wetzlar ].

:end :instance.

; <<>>

:begin :instance.

Wilhelm_n1 := proper_le &
  [ STEM < "wilhelm" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Wilhelm ].

:end :instance.

; <<>>

:begin :instance.

Wok_n1 := proper_le &
  [ STEM < "wok" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Wok ].

:end :instance.

; <<>>

:begin :instance.

Wolfsburg_n1 := proper_le &
  [ STEM < "wolfsburg" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Wolfsburg ].

:end :instance.

; <<>>

:begin :instance.

Woyzeck_n1 := proper_le &
  [ STEM < "woyzeck" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Woyzeck ].

:end :instance.

; <<>>

:begin :instance.

Wuppertal_n1 := proper_le &
  [ STEM < "wuppertal" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Wuppertal ].

:end :instance.

; <<>>

:begin :instance.

Yamazaki_n1 := proper_le &
  [ STEM < "yamazaki" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Yamazaki ].

:end :instance.

; <<>>

:begin :instance.

Youghiogheny_n1 := proper_le &
  [ STEM < "youghiogheny" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Youghiogheny ].

:end :instance.

; <<>>

:begin :instance.

Yum_n1 := proper_le &
  [ STEM < "yum" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Yum ].

:end :instance.

; <<>>

:begin :instance.

Zaphod_n1 := proper_le &
  [ STEM < "zaphod" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Zaphod ].

:end :instance.

; <<>>

:begin :instance.

Zell_n1 := proper_le &
  [ STEM < "zell" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Zell ].

:end :instance.

; <<>>

:begin :instance.

Zentral_n1 := intr_noun_word_le &
  [ STEM < "zentral" >,
    SYNSEM.LOCAL.KEYS.KEY named_rel & [ NAMED 'Zentral ] ].

:end :instance.

; <<>>
; MULTIKEY < "kaiserhof" >

:begin :instance.

Zentralhotel-Kaiserhof_n1 := intr_noun_word_mle1 &
  [ STEM < "zentralhotel", "kaiserhof" >,
    SYNSEM.LOCAL.KEYS.KEY named_rel & [ NAMED 'Zentralhotel-Kaiserhof ] ].

:end :instance.

; <<>>

:begin :instance.

Zephyr_n1 := proper_le &
  [ STEM < "zephyr" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Zephyr ].

:end :instance.

; <<>>

:begin :instance.

Kaestner_n1 := proper_le &
  [ STEM < "kaestner" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Kaestner ].

:end :instance.

; <<>>
; MULTIKEY < "julis" >

:begin :instance.

Von-Julis_n1 := proper_mle2 &
  [ STEM < "von", "julis" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Von-Julis ].

:end :instance.

; <<>>
; MULTIKEY < "sudniz" >

:begin :instance.

Von-Sudniz_n1 := proper_mle2 &
  [ STEM < "von", "sudniz" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Von-Sudniz ].

:end :instance.

; <<>>

:begin :instance.

American_n1 := intr_noun_word_le &
  [ STEM < "american" >,
    SYNSEM.LOCAL.KEYS.KEY _american_n_rel ].

:end :instance.

; <<>>

:begin :instance.

Arab_n1 := intr_noun_word_le &
  [ STEM < "arab" >,
    SYNSEM.LOCAL.KEYS.KEY _arab_n_rel ].

:end :instance.


; <<>>

:begin :instance.

arab_a1 := intrans_adj_le &
  [ STEM < "arab" >,
    SYNSEM.LOCAL.KEYS.KEY _arab_isect_rel ].

:end :instance.


; <<>>

:begin :instance.

Filofax_n1 := intr_noun_word_le &
  [ STEM < "filofax" >,
    SYNSEM.LOCAL.KEYS.KEY _filofax_rel ].

:end :instance.


; <<>>

:begin :instance.

german_n2 := intr_noun_word_le &
  [ STEM < "german" >,
    SYNSEM.LOCAL.KEYS.KEY _german_n_rel ].

:end :instance.


; <<>>

:begin :instance.

god_n1 := intr_noun_word_le &
  [ STEM < "god" >,
    SYNSEM.LOCAL.KEYS.KEY _god_rel ].

:end :instance.


; <<>>

:begin :instance.

Greek_n2 := intr_noun_word_le &
  [ STEM < "greek" >,
    SYNSEM.LOCAL.KEYS.KEY _greek_n_rel ].

:end :instance.


; <<>>

:begin :instance.

inn_n1 := intr_noun_word_le &
  [ STEM < "inn" >,
    SYNSEM.LOCAL.KEYS.KEY _inn_rel ].

:end :instance.


; <<>>

:begin :instance.

Italian_n2 := intr_noun_word_le &
  [ STEM < "italian" >,
    SYNSEM.LOCAL.KEYS.KEY _italian_n_rel ].

:end :instance.


; <<>>

:begin :instance.

mount_n1 := intr_noun_word_le &
  [ STEM < "mount" >,
    SYNSEM.LOCAL.KEYS.KEY _mount_n_rel ].

:end :instance.


; <<>>

:begin :instance.

Scot_n1 := intr_noun_word_le &
  [ STEM < "scot" >,
    SYNSEM.LOCAL.KEYS.KEY _scot_rel ].

:end :instance.


; <<>>

:begin :instance.

square_n1 := intr_noun_word_le &
  [ STEM < "square" >,
    SYNSEM.LOCAL.KEYS.KEY _square_rel ].

:end :instance.


; <<>>

:begin :instance.

Thai_n2 := intr_noun_word_le &
  [ STEM < "thai" >,
    SYNSEM.LOCAL.KEYS.KEY _thai_n_rel ].

:end :instance.


; <<>>

:begin :instance.

abbreviation_n1 := intr_noun_word_le &
  [ STEM < "abbreviation" >,
    SYNSEM.LOCAL.KEYS.KEY _abbreviation_rel ].

:end :instance.


; <<>>

:begin :instance.

access_n1 := intr_noun_word_le &
  [ STEM < "access" >,
    SYNSEM.LOCAL.KEYS.KEY _access_n_rel ].

:end :instance.


; <<>>

:begin :instance.

accountant_n1 := intr_noun_word_le &
  [ STEM < "accountant" >,
    SYNSEM.LOCAL.KEYS.KEY _accountant_rel ].

:end :instance.


; <<>>

:begin :instance.

acquisition_n1 := intr_noun_word_le &
  [ STEM < "acquisition" >,
    SYNSEM.LOCAL.KEYS.KEY _acquisition_rel ].

:end :instance.


; <<>>

:begin :instance.

advance_n1 := intr_noun_word_le &
  [ STEM < "advance" >,
    SYNSEM.LOCAL.KEYS.KEY _advance_n_rel ].

:end :instance.


; <<>>

:begin :instance.

advisor_n1 := intr_noun_word_le &
  [ STEM < "advisor" >,
    SYNSEM.LOCAL.KEYS.KEY _advisor_rel ].

:end :instance.


; <<>>

:begin :instance.

aim_n1 := intr_noun_word_le &
  [ STEM < "aim" >,
    SYNSEM.LOCAL.KEYS.KEY _aim_n_rel ].

:end :instance.


; <<>>

:begin :instance.

airline_n1 := intr_noun_word_le &
  [ STEM < "airline" >,
    SYNSEM.LOCAL.KEYS.KEY _airline_rel ].

:end :instance.


; <<>>

:begin :instance.

allergy_n1 := intr_noun_word_le &
  [ STEM < "allergy" >,
    SYNSEM.LOCAL.KEYS.KEY _allergy_rel ].

:end :instance.


; <<>>

:begin :instance.

analysis_n1 := massn_le &
  [ STEM < "analysis" >,
    SYNSEM.LOCAL.KEYS.KEY _analysis_rel ].

:end :instance.


; <<>>

:begin :instance.

angle_n1 := intr_noun_word_le &
  [ STEM < "angle" >,
    SYNSEM.LOCAL.KEYS.KEY _angle_n_rel ].

:end :instance.


; <<>>

:begin :instance.

animal_n1 := intr_noun_word_le &
  [ STEM < "animal" >,
    SYNSEM.LOCAL.KEYS.KEY _animal_rel ].

:end :instance.


; <<>>

:begin :instance.

announcement_n1 := intr_noun_word_le &
  [ STEM < "announcement" >,
    SYNSEM.LOCAL.KEYS.KEY _announcement_rel ].

:end :instance.


; <<>>

:begin :instance.

apostrophe_n1 := intr_noun_word_le &
  [ STEM < "apostrophe" >,
    SYNSEM.LOCAL.KEYS.KEY _apostrophe_rel ].

:end :instance.


; <<>>

:begin :instance.

apple_n1 := intr_noun_word_le &
  [ STEM < "apple" >,
    SYNSEM.LOCAL.KEYS.KEY _apple_rel ].

:end :instance.


; <<>>

:begin :instance.

argument_n1 := intr_noun_word_le &
  [ STEM < "argument" >,
    SYNSEM.LOCAL.KEYS.KEY _argument_rel ].

:end :instance.


; <<>>

:begin :instance.

argumentation_n1 := intr_noun_word_le &
  [ STEM < "argumentation" >,
    SYNSEM.LOCAL.KEYS.KEY _argumentation_rel ].

:end :instance.


; <<>>

:begin :instance.

art_n1 := intr_noun_word_le &
  [ STEM < "art" >,
    SYNSEM.LOCAL.KEYS.KEY _art_rel ].

:end :instance.


; <<>>

:begin :instance.

article_n1 := intr_noun_word_le &
  [ STEM < "article" >,
    SYNSEM.LOCAL.KEYS.KEY _article_rel ].

:end :instance.


; <<>>

:begin :instance.

artist_n1 := intr_noun_word_le &
  [ STEM < "artist" >,
    SYNSEM.LOCAL.KEYS.KEY _artist_rel ].

:end :instance.


; <<>>

:begin :instance.

aspect_n1 := intr_noun_word_le &
  [ STEM < "aspect" >,
    SYNSEM.LOCAL.KEYS.KEY _aspect_rel ].

:end :instance.


; <<>>

:begin :instance.

asset_n1 := intr_noun_word_le &
  [ STEM < "asset" >,
    SYNSEM.LOCAL.KEYS.KEY _asset_rel ].

:end :instance.


; <<>>

:begin :instance.

assistant_n1 := intr_noun_word_le &
  [ STEM < "assistant" >,
    SYNSEM.LOCAL.KEYS.KEY _assistant_rel ].

:end :instance.


; <<>>

:begin :instance.

attention_n1 := intr_noun_word_le &
  [ STEM < "attention" >,
    SYNSEM.LOCAL.KEYS.KEY _attention_rel ].

:end :instance.


; <<>>

:begin :instance.

attitude_n1 := intr_noun_word_le &
  [ STEM < "attitude" >,
    SYNSEM.LOCAL.KEYS.KEY _attitude_rel ].

:end :instance.


; <<>>

:begin :instance.

authority_n1 := intr_noun_word_le &
  [ STEM < "authority" >,
    SYNSEM.LOCAL.KEYS.KEY _authority_rel ].

:end :instance.


; <<>>

:begin :instance.

autumn_n2 := intr_noun_word_le &
  [ STEM < "autumn" >,
    SYNSEM.LOCAL.KEYS.KEY _autumn_rel ].

:end :instance.


; <<>>

:begin :instance.

availability_n1 := intr_noun_word_le &
  [ STEM < "availability" >,
    SYNSEM.LOCAL.KEYS.KEY _availability_rel ].

:end :instance.


; <<>>

:begin :instance.

avenue_n1 := intr_noun_word_le &
  [ STEM < "avenue" >,
    SYNSEM.LOCAL.KEYS.KEY _avenue_rel ].

:end :instance.


; <<>>

:begin :instance.

back_n1 := intr_noun_word_le &
  [ STEM < "back" >,
    SYNSEM.LOCAL.KEYS.KEY _back_n_rel ].

:end :instance.


; <<>>

:begin :instance.

backup_n1 := intr_noun_word_le &
  [ STEM < "backup" >,
    SYNSEM.LOCAL.KEYS.KEY _backup_rel ].

:end :instance.


; <<>>

:begin :instance.

bagel_n1 := intr_noun_word_le &
  [ STEM < "bagel" >,
    SYNSEM.LOCAL.KEYS.KEY _bagel_rel ].

:end :instance.


; <<>>

:begin :instance.

baggage_n1 := intr_noun_word_le &
  [ STEM < "baggage" >,
    SYNSEM.LOCAL.KEYS.KEY _baggage_rel ].

:end :instance.


; <<>>

:begin :instance.

balcony_n1 := intr_noun_word_le &
  [ STEM < "balcony" >,
    SYNSEM.LOCAL.KEYS.KEY _balcony_rel ].

:end :instance.


; <<>>

:begin :instance.

ball_n1 := intr_noun_word_le &
  [ STEM < "ball" >,
    SYNSEM.LOCAL.KEYS.KEY _ball_rel ].

:end :instance.


; <<>>

:begin :instance.

bank_n1 := intr_noun_word_le &
  [ STEM < "bank" >,
    SYNSEM.LOCAL.KEYS.KEY _bank_rel ].

:end :instance.


; <<>>

:begin :instance.

barrier_n1 := intr_noun_word_le &
  [ STEM < "barrier" >,
    SYNSEM.LOCAL.KEYS.KEY _barrier_rel ].

:end :instance.


; <<>>

:begin :instance.

basketball_n1 := massn_le &
  [ STEM < "basketball" >,
    SYNSEM.LOCAL.KEYS.KEY _basketball_rel ].

:end :instance.


; <<>>

:begin :instance.

bat_n1 := intr_noun_word_le &
  [ STEM < "bat" >,
    SYNSEM.LOCAL.KEYS.KEY _bat_rel ].

:end :instance.


; <<>>

:begin :instance.

bath_n1 := intr_noun_word_le &
  [ STEM < "bath" >,
    SYNSEM.LOCAL.KEYS.KEY _bath_rel ].

:end :instance.


; <<>>

:begin :instance.

beach_n1 := intr_noun_word_le &
  [ STEM < "beach" >,
    SYNSEM.LOCAL.KEYS.KEY _beach_rel ].

:end :instance.


; <<>>

:begin :instance.

bear_n1 := intr_noun_word_le &
  [ STEM < "bear" >,
    SYNSEM.LOCAL.KEYS.KEY _bear_n_rel ].

:end :instance.


; <<>>

:begin :instance.

bed_n1 := intr_noun_word_le &
  [ STEM < "bed" >,
    SYNSEM.LOCAL.KEYS.KEY _bed_rel ].

:end :instance.


; <<>>

:begin :instance.

bet_n1 := intr_noun_word_le &
  [ STEM < "bet" >,
    SYNSEM.LOCAL.KEYS.KEY _bet_n_rel ].

:end :instance.


; <<>>

:begin :instance.

bicycle_n1 := intr_noun_word_le &
  [ STEM < "bicycle" >,
    SYNSEM.LOCAL.KEYS.KEY _bicycle_rel ].

:end :instance.


; <<>>

:begin :instance.

bingo_n1 := intr_noun_word_le &
  [ STEM < "bingo" >,
    SYNSEM.LOCAL.KEYS.KEY _bingo_rel ].

:end :instance.


; <<>>

:begin :instance.

bird_n1 := intr_noun_word_le &
  [ STEM < "bird" >,
    SYNSEM.LOCAL.KEYS.KEY _bird_rel ].

:end :instance.


; <<>>

:begin :instance.

bit_n1 := noun_ppof_word_le &
  [ STEM < "bit" >,
    SYNSEM.LOCAL.KEYS.KEY _bit_n_rel ].

:end :instance.


; <<>>

:begin :instance.

bite_n1 := intr_noun_word_le &
  [ STEM < "bite" >,
    SYNSEM.LOCAL.KEYS.KEY _bite_n_rel ].

:end :instance.


; <<>>

:begin :instance.

blonde_n1 := intr_noun_word_le &
  [ STEM < "blonde" >,
    SYNSEM.LOCAL.KEYS.KEY _blonde_n_rel ].

:end :instance.


; <<>>

:begin :instance.

blonde_adj := intrans_adj_le &
  [ STEM < "blonde" >,
    SYNSEM.LOCAL.KEYS.KEY _blonde_adj_rel ].

:end :instance.

; <<>>

:begin :instance.

board_n1 := intr_noun_word_le &
  [ STEM < "board" >,
    SYNSEM.LOCAL.KEYS.KEY _board_n_rel ].

:end :instance.


; <<>>

:begin :instance.

bobsledding_n1 := intr_noun_word_le &
  [ STEM < "bobsledding" >,
    SYNSEM.LOCAL.KEYS.KEY _bobsledding_rel ].

:end :instance.


; <<>>

:begin :instance.

boom_n1 := intr_noun_word_le &
  [ STEM < "boom" >,
    SYNSEM.LOCAL.KEYS.KEY _boom_rel ].

:end :instance.


; <<>>

:begin :instance.

border_n1 := intr_noun_word_le &
  [ STEM < "border" >,
    SYNSEM.LOCAL.KEYS.KEY _border_n_rel ].

:end :instance.


; <<>>

:begin :instance.

boredom_n1 := intr_noun_word_le &
  [ STEM < "boredom" >,
    SYNSEM.LOCAL.KEYS.KEY _boredom_rel ].

:end :instance.


; <<>>

:begin :instance.

boss_n1 := intr_noun_word_le &
  [ STEM < "boss" >,
    SYNSEM.LOCAL.KEYS.KEY _boss_rel ].

:end :instance.


; <<>>

:begin :instance.

bottle_n1 := intr_noun_word_le &
  [ STEM < "bottle" >,
    SYNSEM.LOCAL.KEYS.KEY _bottle_rel ].

:end :instance.


; <<>>

:begin :instance.

bound_n1 := intr_noun_word_le &
  [ STEM < "bound" >,
    SYNSEM.LOCAL.KEYS.KEY _bound_rel ].

:end :instance.


; <<>>

:begin :instance.

box_n1 := intr_noun_word_le &
  [ STEM < "box" >,
    SYNSEM.LOCAL.KEYS.KEY _box_n_rel ].

:end :instance.


; <<>>

:begin :instance.

brim_n1 := intr_noun_word_le &
  [ STEM < "brim" >,
    SYNSEM.LOCAL.KEYS.KEY _brim_rel ].

:end :instance.


; <<>>

:begin :instance.

broadcasting_n1 := intr_noun_word_le &
  [ STEM < "broadcasting" >,
    SYNSEM.LOCAL.KEYS.KEY _broadcasting_rel ].

:end :instance.


; <<>>

:begin :instance.

brochure_n1 := intr_noun_word_le &
  [ STEM < "brochure" >,
    SYNSEM.LOCAL.KEYS.KEY _brochure_rel ].

:end :instance.


; <<>>

:begin :instance.

brother_n1 := intr_noun_word_le &
  [ STEM < "brother" >,
    SYNSEM.LOCAL.KEYS.KEY _brother_rel ].

:end :instance.


; <<>>

:begin :instance.

brunch_n1 := intr_noun_word_le &
  [ STEM < "brunch" >,
    SYNSEM.LOCAL.KEYS.KEY _branch_rel ].

:end :instance.


; <<>>

:begin :instance.

buddy_n1 := intr_noun_word_le &
  [ STEM < "buddy" >,
    SYNSEM.LOCAL.KEYS.KEY _buddy_rel ].

:end :instance.


; <<>>

:begin :instance.

budget_n1 := intr_noun_word_le &
  [ STEM < "budget" >,
    SYNSEM.LOCAL.KEYS.KEY _budget_rel ].

:end :instance.


; <<>>

:begin :instance.

buffer_n1 := intr_noun_word_le &
  [ STEM < "buffer" >,
    SYNSEM.LOCAL.KEYS.KEY _buffer_rel ].

:end :instance.


; <<>>

:begin :instance.

buffet_n1 := intr_noun_word_le &
  [ STEM < "buffet" >,
    SYNSEM.LOCAL.KEYS.KEY _buffet_rel ].

:end :instance.


; <<>>

:begin :instance.

bummer_n1 := intr_noun_word_le &
  [ STEM < "bummer" >,
    SYNSEM.LOCAL.KEYS.KEY _bummer_rel ].

:end :instance.


; <<>>

:begin :instance.

bus_n1 := intr_noun_word_le &
  [ STEM < "bus" >,
    SYNSEM.LOCAL.KEYS.KEY _bus_rel ].

:end :instance.


; <<>>
; MULTIKEY < "bus" >

:begin :instance.

bus-line_n1 := intr_noun_word_mle1 &
  [ STEM < "bus", "line" >,
    SYNSEM.LOCAL.KEYS.KEY _bus_line_rel ].

:end :instance.


; <<>>

:begin :instance.

cake_n1 := intr_noun_word_le &
  [ STEM < "cake" >,
    SYNSEM.LOCAL.KEYS.KEY _cake_rel ].

:end :instance.


; <<>>

:begin :instance.

calorie_n1 := intr_noun_word_le &
  [ STEM < "calorie" >,
    SYNSEM.LOCAL.KEYS.KEY _calorie_rel ].

:end :instance.


; <<>>

:begin :instance.

cancellation_n1 := intr_noun_word_le &
  [ STEM < "cancellation" >,
    SYNSEM.LOCAL.KEYS.KEY _cancellation_rel ].

:end :instance.


; <<>>

:begin :instance.

cart_n1 := intr_noun_word_le &
  [ STEM < "cart" >,
    SYNSEM.LOCAL.KEYS.KEY _cart_rel ].

:end :instance.


; <<>>

:begin :instance.

cash_n1 := massn_le &
  [ STEM < "cash" >,
    SYNSEM.LOCAL.KEYS.KEY _cash_rel ].

:end :instance.


; <<>>

:begin :instance.

category_n1 := intr_noun_word_le &
  [ STEM < "category" >,
    SYNSEM.LOCAL.KEYS.KEY _category_rel ].

:end :instance.


; <<>>

:begin :instance.

catering_n1 := intr_noun_word_le &
  [ STEM < "catering" >,
    SYNSEM.LOCAL.KEYS.KEY _catering_rel ].

:end :instance.


; <<>>

:begin :instance.

caviar_n1 := intr_noun_word_le &
  [ STEM < "caviar" >,
    SYNSEM.LOCAL.KEYS.KEY _caviar_rel ].

:end :instance.


; <<>>

:begin :instance.

celebration_n1 := intr_noun_word_le &
  [ STEM < "celebration" >,
    SYNSEM.LOCAL.KEYS.KEY _celebration_rel ].

:end :instance.


; <<>>

:begin :instance.

certificate_n1 := intr_noun_word_le &
  [ STEM < "certificate" >,
    SYNSEM.LOCAL.KEYS.KEY _certificate_rel ].

:end :instance.


; <<>>

:begin :instance.

champagne_n1 := intr_noun_word_le &
  [ STEM < "champagne" >,
    SYNSEM.LOCAL.KEYS.KEY _champagne_rel ].

:end :instance.


; <<>>

:begin :instance.

chancellor_n1 := intr_noun_word_le &
  [ STEM < "chancellor" >,
    SYNSEM.LOCAL.KEYS.KEY _chancellor_rel ].

:end :instance.


; <<>>
; MULTIKEY < "check" >

:begin :instance.

check-in_n1 := intr_noun_word_mle1 &
  [ STEM < "check", "in" >,
    SYNSEM.LOCAL.KEYS.KEY _check_in_n_rel ].

:end :instance.


; <<>>

:begin :instance.

chief_n1 := intr_noun_word_le &
  [ STEM < "chief" >,
    SYNSEM.LOCAL.KEYS.KEY _chief_rel ].

:end :instance.


; <<>>

:begin :instance.

chunk_n1 := noun_ppof_word_le &
  [ STEM < "chunk" >,
    SYNSEM.LOCAL.KEYS.KEY _chunk_rel ].

:end :instance.


; <<>>

:begin :instance.

church_n1 := massn_le &
  [ STEM < "church" >,
    SYNSEM.LOCAL.KEYS.KEY _church_rel ].

:end :instance.


; <<>>

:begin :instance.

cinema_n1 := intr_noun_word_le &
  [ STEM < "cinema" >,
    SYNSEM.LOCAL.KEYS.KEY _cinema_rel ].

:end :instance.


; <<>>

:begin :instance.

circle_n1 := intr_noun_word_le &
  [ STEM < "circle" >,
    SYNSEM.LOCAL.KEYS.KEY _circle_rel ].

:end :instance.


; <<>>

:begin :instance.

circular_n1 := intr_noun_word_le &
  [ STEM < "circular" >,
    SYNSEM.LOCAL.KEYS.KEY _circular_rel ].

:end :instance.


; <<>>

:begin :instance.

circulation_n1 := intr_noun_word_le &
  [ STEM < "circulation" >,
    SYNSEM.LOCAL.KEYS.KEY _circulation_rel ].

:end :instance.


; <<>>

:begin :instance.

clarity_n1 := intr_noun_word_le &
  [ STEM < "clarity" >,
    SYNSEM.LOCAL.KEYS.KEY _clarity_rel ].

:end :instance.


; <<>>

:begin :instance.

climate_n1 := intr_noun_word_le &
  [ STEM < "climate" >,
    SYNSEM.LOCAL.KEYS.KEY _climate_rel ].

:end :instance.


; <<>>

:begin :instance.

close_n1 := noun_ppof_word_le &
  [ STEM < "close" >,
    SYNSEM.LOCAL.KEYS.KEY _close_n_rel ].

:end :instance.


; <<>>

:begin :instance.

closet_n1 := intr_noun_word_le &
  [ STEM < "closet" >,
    SYNSEM.LOCAL.KEYS.KEY _closet_rel ].

:end :instance.


; <<>>

:begin :instance.

club_n1 := intr_noun_word_le &
  [ STEM < "club" >,
    SYNSEM.LOCAL.KEYS.KEY _club_n_rel ].

:end :instance.


; <<>>

:begin :instance.

clue_n1 := intr_noun_word_le &
  [ STEM < "clue" >,
    SYNSEM.LOCAL.KEYS.KEY _clue_rel ].

:end :instance.


; <<>>

:begin :instance.

code_n1 := intr_noun_word_le &
  [ STEM < "code" >,
    SYNSEM.LOCAL.KEYS.KEY _code_n_rel ].

:end :instance.


; <<>>

:begin :instance.

coincidence_n1 := intr_noun_word_le &
  [ STEM < "coincidence" >,
    SYNSEM.LOCAL.KEYS.KEY _coincidence_rel ].

:end :instance.


; <<>>

:begin :instance.

cola_n1 := intr_noun_word_le &
  [ STEM < "cola" >,
    SYNSEM.LOCAL.KEYS.KEY _cola_rel ].

:end :instance.


; <<>>

:begin :instance.

colloquium_n1 := intr_noun_word_le &
  [ STEM < "colloquium" >,
    SYNSEM.LOCAL.KEYS.KEY _colloquium_rel ].

:end :instance.


; <<>>

:begin :instance.

communication_n1 := intr_noun_word_le &
  [ STEM < "communication" >,
    SYNSEM.LOCAL.KEYS.KEY _communication_rel ].

:end :instance.


; <<>>

:begin :instance.

community_n1 := intr_noun_word_le &
  [ STEM < "community" >,
    SYNSEM.LOCAL.KEYS.KEY _community_rel ].

:end :instance.


; <<>>

:begin :instance.

compromise_n1 := intr_noun_word_le &
  [ STEM < "compromise" >,
    SYNSEM.LOCAL.KEYS.KEY _compromise_n_rel ].

:end :instance.


; <<>>

:begin :instance.

conception_n1 := intr_noun_word_le &
  [ STEM < "conception" >,
    SYNSEM.LOCAL.KEYS.KEY _conception_rel ].

:end :instance.


; <<>>

:begin :instance.

concert_n1 := intr_noun_word_le &
  [ STEM < "concert" >,
    SYNSEM.LOCAL.KEYS.KEY _concert_rel ].

:end :instance.


; <<>>

:begin :instance.

concession_n1 := intr_noun_word_le &
  [ STEM < "concession" >,
    SYNSEM.LOCAL.KEYS.KEY _concession_rel ].

:end :instance.


; <<>>

:begin :instance.

conclusion_n1 := intr_noun_word_le &
  [ STEM < "conclusion" >,
    SYNSEM.LOCAL.KEYS.KEY _conclusion_rel ].

:end :instance.


; <<>>

:begin :instance.

condition_n1 := intr_noun_word_le &
  [ STEM < "condition" >,
    SYNSEM.LOCAL.KEYS.KEY _condition_rel ].

:end :instance.


; <<>>

:begin :instance.

condo_n1 := intr_noun_word_le &
  [ STEM < "condo" >,
    SYNSEM.LOCAL.KEYS.KEY _condo_rel ].

:end :instance.


; <<>>

:begin :instance.

conduct_n1 := intr_noun_word_le &
  [ STEM < "conduct" >,
    SYNSEM.LOCAL.KEYS.KEY _conduct_n_rel ].

:end :instance.


; <<>>

:begin :instance.

connection_n1 := intr_noun_word_le &
  [ STEM < "connection" >,
    SYNSEM.LOCAL.KEYS.KEY _connection_rel ].

:end :instance.


; <<>>

:begin :instance.

consideration_n1 := intr_noun_word_le &
  [ STEM < "consideration" >,
    SYNSEM.LOCAL.KEYS.KEY _consideration_rel ].

:end :instance.


; <<>>

:begin :instance.

consolation_n1 := intr_noun_word_le &
  [ STEM < "consolation" >,
    SYNSEM.LOCAL.KEYS.KEY _consolation_rel ].

:end :instance.


; <<>>

:begin :instance.

conspiracy_n1 := intr_noun_word_le &
  [ STEM < "conspiracy" >,
    SYNSEM.LOCAL.KEYS.KEY _conspiracy_rel ].

:end :instance.


; <<>>

:begin :instance.

consultation_n1 := intr_noun_word_le &
  [ STEM < "consultation" >,
    SYNSEM.LOCAL.KEYS.KEY _consultation_rel ].

:end :instance.


; <<>>

:begin :instance.

content_n1 := intr_noun_word_le &
  [ STEM < "content" >,
    SYNSEM.LOCAL.KEYS.KEY _content_n_rel ].

:end :instance.


; <<>>

:begin :instance.

contradiction_n1 := intr_noun_word_le &
  [ STEM < "contradiction" >,
    SYNSEM.LOCAL.KEYS.KEY _contradiction_rel ].

:end :instance.


; <<>>

:begin :instance.

contrast_n1 := intr_noun_word_le &
  [ STEM < "contrast" >,
    SYNSEM.LOCAL.KEYS.KEY _contrast_n_rel ].

:end :instance.


; <<>>

:begin :instance.

contribution_n1 := intr_noun_word_le &
  [ STEM < "contribution" >,
    SYNSEM.LOCAL.KEYS.KEY _contribution_rel ].

:end :instance.


; <<>>

:begin :instance.

control_n1 := intr_noun_word_le &
  [ STEM < "control" >,
    SYNSEM.LOCAL.KEYS.KEY _control_n_rel ].

:end :instance.


; <<>>

:begin :instance.

convenience_n1 := intr_noun_word_le &
  [ STEM < "convenience" >,
    SYNSEM.LOCAL.KEYS.KEY _convenience_rel ].

:end :instance.


; <<>>
; MULTIKEY < "convention" >

:begin :instance.

convention-hall_n1 := intr_noun_word_mle1 &
  [ STEM < "convention", "hall" >,
    SYNSEM.LOCAL.KEYS.KEY _convention_hall_rel ].

:end :instance.


; <<>>

:begin :instance.

conviction_n1 := intr_noun_word_le &
  [ STEM < "conviction" >,
    SYNSEM.LOCAL.KEYS.KEY _conviction_rel ].

:end :instance.


; <<>>

:begin :instance.

cooperation_n1 := intr_noun_word_le &
  [ STEM < "cooperation" >,
    SYNSEM.LOCAL.KEYS.KEY _cooperation_rel ].

:end :instance.


; <<>>

:begin :instance.

corner_n1 := intr_noun_word_le &
  [ STEM < "corner" >,
    SYNSEM.LOCAL.KEYS.KEY _corner_n_rel ].

:end :instance.


; <<>>

:begin :instance.

council_n1 := intr_noun_word_le &
  [ STEM < "council" >,
    SYNSEM.LOCAL.KEYS.KEY _council_rel ].

:end :instance.


; <<>>

:begin :instance.

count_n1 := intr_noun_word_le &
  [ STEM < "count" >,
    SYNSEM.LOCAL.KEYS.KEY _count_n_rel ].

:end :instance.


; <<>>

:begin :instance.

counter_n1 := intr_noun_word_le &
  [ STEM < "counter" >,
    SYNSEM.LOCAL.KEYS.KEY _counter_rel ].

:end :instance.


; <<>>

:begin :instance.

country_n1 := intr_noun_word_le &
  [ STEM < "country" >,
    SYNSEM.LOCAL.KEYS.KEY _country_rel ].

:end :instance.


; <<>>

:begin :instance.

county_n1 := intr_noun_word_le &
  [ STEM < "county" >,
    SYNSEM.LOCAL.KEYS.KEY _county_rel ].

:end :instance.


; <<>>

:begin :instance.

court_n1 := intr_noun_word_le &
  [ STEM < "court" >,
    SYNSEM.LOCAL.KEYS.KEY _court_n_rel ].

:end :instance.


; <<>>

:begin :instance.

crack_n1 := intr_noun_word_le &
  [ STEM < "crack" >,
    SYNSEM.LOCAL.KEYS.KEY _crack_n_rel ].

:end :instance.


; <<>>

:begin :instance.

crap_n1 := intr_noun_word_le &
  [ STEM < "crap" >,
    SYNSEM.LOCAL.KEYS.KEY _crap_rel ].

:end :instance.


; <<>>

:begin :instance.

cream_n1 := intr_noun_word_le &
  [ STEM < "cream" >,
    SYNSEM.LOCAL.KEYS.KEY _cream_rel ].

:end :instance.


; <<>>

:begin :instance.

credit_n1 := intr_noun_word_le &
  [ STEM < "credit" >,
    SYNSEM.LOCAL.KEYS.KEY _credit_rel ].

:end :instance.


; <<>>

:begin :instance.

crew_n1 := intr_noun_word_le &
  [ STEM < "crew" >,
    SYNSEM.LOCAL.KEYS.KEY _crew_rel ].

:end :instance.


; <<>>

:begin :instance.

critique_n1 := intr_noun_word_le &
  [ STEM < "critique" >,
    SYNSEM.LOCAL.KEYS.KEY _critique_rel ].

:end :instance.


; <<>>

:begin :instance.

culture_n1 := intr_noun_word_le &
  [ STEM < "culture" >,
    SYNSEM.LOCAL.KEYS.KEY _culture_rel ].

:end :instance.


; <<>>

:begin :instance.

cup_n1 := intr_noun_word_le &
  [ STEM < "cup" >,
    SYNSEM.LOCAL.KEYS.KEY _cup_n__rel ].

:end :instance.


; <<>>

:begin :instance.

customer_n1 := intr_noun_word_le &
  [ STEM < "customer" >,
    SYNSEM.LOCAL.KEYS.KEY _customer_rel ].

:end :instance.


; <<>>

:begin :instance.

cycle_n1 := intr_noun_word_le &
  [ STEM < "cycle" >,
    SYNSEM.LOCAL.KEYS.KEY _cycle_n_rel ].

:end :instance.


; <<>>

:begin :instance.

cylinder_n1 := intr_noun_word_le &
  [ STEM < "cylinder" >,
    SYNSEM.LOCAL.KEYS.KEY _cylinder_rel ].

:end :instance.


; <<>>

:begin :instance.

dance_n1 := intr_noun_word_le &
  [ STEM < "dance" >,
    SYNSEM.LOCAL.KEYS.KEY _dance_n_rel ].

:end :instance.


; <<>>

:begin :instance.

deficit_n1 := intr_noun_word_le &
  [ STEM < "deficit" >,
    SYNSEM.LOCAL.KEYS.KEY _deficit_rel ].

:end :instance.


; <<>>

:begin :instance.

deja_vu_n1 := intr_noun_word_le &
  [ STEM < "deja_vu" >,
    SYNSEM.LOCAL.KEYS.KEY _deja_vu_rel ].

:end :instance.


; <<>>

:begin :instance.

designer_n1 := intr_noun_word_le &
  [ STEM < "designer" >,
    SYNSEM.LOCAL.KEYS.KEY _designer_rel ].

:end :instance.


; <<>>

:begin :instance.

devil_n1 := intr_noun_word_le &
  [ STEM < "devil" >,
    SYNSEM.LOCAL.KEYS.KEY _devil_rel ].

:end :instance.


; <<>>

:begin :instance.

dialog_n1 := intr_noun_word_le &
  [ STEM < "dialog" >,
    SYNSEM.LOCAL.KEYS.KEY _dialogue_rel ].

:end :instance.


; <<>>

:begin :instance.

dialogue_n1 := intr_noun_word_le &
  [ STEM < "dialogue" >,
    SYNSEM.LOCAL.KEYS.KEY _dialogue_rel ].

:end :instance.


; <<>>

:begin :instance.

disadvantage_n1 := intr_noun_word_le &
  [ STEM < "disadvantage" >,
    SYNSEM.LOCAL.KEYS.KEY _disadvantage_rel ].

:end :instance.


; <<>>

:begin :instance.

disaster_n1 := intr_noun_word_le &
  [ STEM < "disaster" >,
    SYNSEM.LOCAL.KEYS.KEY _disaster_rel ].

:end :instance.


; <<>>

:begin :instance.

discussion_n1 := intr_noun_word_le &
  [ STEM < "discussion" >,
    SYNSEM.LOCAL.KEYS.KEY _discussion_rel ].

:end :instance.


; <<>>

:begin :instance.

disk_n1 := intr_noun_word_le &
  [ STEM < "disk" >,
    SYNSEM.LOCAL.KEYS.KEY _disk_rel ].

:end :instance.


; <<>>

:begin :instance.

distraction_n1 := intr_noun_word_le &
  [ STEM < "distraction" >,
    SYNSEM.LOCAL.KEYS.KEY _distraction_rel ].

:end :instance.


; <<>>

:begin :instance.

disturbance_n1 := intr_noun_word_le &
  [ STEM < "disturbance" >,
    SYNSEM.LOCAL.KEYS.KEY _disturbance_rel ].

:end :instance.


; <<>>

:begin :instance.

documentation_n1 := intr_noun_word_le &
  [ STEM < "documentation" >,
    SYNSEM.LOCAL.KEYS.KEY _documentation_rel ].

:end :instance.


; <<>>

:begin :instance.

dog_n1 := intr_noun_word_le &
  [ STEM < "dog" >,
    SYNSEM.LOCAL.KEYS.KEY _dog_rel ].

:end :instance.


; <<>>

:begin :instance.

donut_n1 := intr_noun_word_le &
  [ STEM < "donut" >,
    SYNSEM.LOCAL.KEYS.KEY _donut_rel ].

:end :instance.


; <<>>

:begin :instance.

door_n1 := intr_noun_word_le &
  [ STEM < "door" >,
    SYNSEM.LOCAL.KEYS.KEY _door_rel ].

:end :instance.


; <<>>

:begin :instance.

doubt_n1 := intr_noun_word_le &
  [ STEM < "doubt" >,
    SYNSEM.LOCAL.KEYS.KEY _doubt_n_rel ].

:end :instance.


; <<>>

:begin :instance.

doughnut_n1 := intr_noun_word_le &
  [ STEM < "doughnut" >,
    SYNSEM.LOCAL.KEYS.KEY _doughnut_rel ].

:end :instance.


; <<>>

:begin :instance.

dribbling_n1 := intr_noun_word_le &
  [ STEM < "dribbling" >,
    SYNSEM.LOCAL.KEYS.KEY _dribbling_rel ].

:end :instance.


; <<>>

:begin :instance.

drive_n1 := intr_noun_word_le &
  [ STEM < "drive" >,
    SYNSEM.LOCAL.KEYS.KEY _drive_n_rel ].

:end :instance.


; <<>>

:begin :instance.

ear_n1 := intr_noun_word_le &
  [ STEM < "ear" >,
    SYNSEM.LOCAL.KEYS.KEY _ear_rel ].

:end :instance.


; <<>>

:begin :instance.

east_n1 := intr_noun_word_le &
  [ STEM < "east" >,
    SYNSEM.LOCAL.KEYS.KEY _east_rel ].

:end :instance.


; <<>>

:begin :instance.

eatery_n1 := intr_noun_word_le &
  [ STEM < "eatery" >,
    SYNSEM.LOCAL.KEYS.KEY _eatery_rel ].

:end :instance.


; <<>>

:begin :instance.

edge_n1 := intr_noun_word_le &
  [ STEM < "edge" >,
    SYNSEM.LOCAL.KEYS.KEY _edge_rel ].

:end :instance.


; <<>>

:begin :instance.

effort_n1 := intr_noun_word_le &
  [ STEM < "effort" >,
    SYNSEM.LOCAL.KEYS.KEY _effort_rel ].

:end :instance.


; <<>>

:begin :instance.

elevator_n1 := intr_noun_word_le &
  [ STEM < "elevator" >,
    SYNSEM.LOCAL.KEYS.KEY _elevator_rel ].

:end :instance.


; <<>>

:begin :instance.

email_n1 := intr_noun_word_le &
  [ STEM < "email" >,
    SYNSEM.LOCAL.KEYS.KEY _email_n_rel ].

:end :instance.


; <<>>

:begin :instance.

embarrassment_n1 := intr_noun_word_le &
  [ STEM < "embarrassment" >,
    SYNSEM.LOCAL.KEYS.KEY _embarrassment_rel ].

:end :instance.


; <<>>

:begin :instance.

energy_n1 := intr_noun_word_le &
  [ STEM < "energy" >,
    SYNSEM.LOCAL.KEYS.KEY _energy_rel ].

:end :instance.


; <<>>

:begin :instance.

environment_n1 := intr_noun_word_le &
  [ STEM < "environment" >,
    SYNSEM.LOCAL.KEYS.KEY _environment_rel ].

:end :instance.


; <<>>

:begin :instance.

envy_n1 := intr_noun_word_le &
  [ STEM < "envy" >,
    SYNSEM.LOCAL.KEYS.KEY _envy_n_rel ].

:end :instance.


; <<>>

:begin :instance.

evaluation_n1 := intr_noun_word_le &
  [ STEM < "evaluation" >,
    SYNSEM.LOCAL.KEYS.KEY _evaluation_rel ].

:end :instance.


; <<>>

:begin :instance.

eventuality_n1 := intr_noun_word_le &
  [ STEM < "eventuality" >,
    SYNSEM.LOCAL.KEYS.KEY _eventuality_rel ].

:end :instance.


; <<>>

:begin :instance.

evil_n1 := intr_noun_word_le &
  [ STEM < "evil" >,
    SYNSEM.LOCAL.KEYS.KEY _evil_rel ].

:end :instance.


; <<>>
; MULTIKEY < "ex" >

:begin :instance.

ex-girlfriend_n1 := intr_noun_word_mle1 &
  [ STEM < "ex", "girlfriend" >,
    SYNSEM.LOCAL.KEYS.KEY _ex_girlfriend_rel ].

:end :instance.


; <<>>

:begin :instance.

examination_n1 := intr_noun_word_le &
  [ STEM < "examination" >,
    SYNSEM.LOCAL.KEYS.KEY _examination_rel ].

:end :instance.


; <<>>

:begin :instance.

exchange_n1 := intr_noun_word_le &
  [ STEM < "exchange" >,
    SYNSEM.LOCAL.KEYS.KEY _exchange_n_rel ].

:end :instance.


; <<>>

:begin :instance.

excuse_n1 := intr_noun_word_le &
  [ STEM < "excuse" >,
    SYNSEM.LOCAL.KEYS.KEY _excuse_n_rel ].

:end :instance.


; <<>>

:begin :instance.

exhibition_n1 := intr_noun_word_le &
  [ STEM < "exhibition" >,
    SYNSEM.LOCAL.KEYS.KEY _exhibition_rel ].

:end :instance.


; <<>>

:begin :instance.

expedition_n1 := intr_noun_word_le &
  [ STEM < "expedition" >,
    SYNSEM.LOCAL.KEYS.KEY _expedition_rel ].

:end :instance.


; <<>>

:begin :instance.

exposure_n1 := intr_noun_word_le &
  [ STEM < "exposure" >,
    SYNSEM.LOCAL.KEYS.KEY _exposure_rel ].

:end :instance.


; <<>>

:begin :instance.

faculty_n1 := intr_noun_word_le &
  [ STEM < "faculty" >,
    SYNSEM.LOCAL.KEYS.KEY _faculty_rel ].

:end :instance.


; <<>>

:begin :instance.

fairground_n1 := intr_noun_word_le &
  [ STEM < "fairground" >,
    SYNSEM.LOCAL.KEYS.KEY _fairground_rel ].

:end :instance.


; <<>>

:begin :instance.

farewell_n1 := intr_noun_word_le &
  [ STEM < "farewell" >,
    SYNSEM.LOCAL.KEYS.KEY _farewell_rel ].

:end :instance.


; <<>>

:begin :instance.

feeling_n1 := intr_noun_word_le &
  [ STEM < "feeling" >,
    SYNSEM.LOCAL.KEYS.KEY _feeling_rel ].

:end :instance.


; <<>>

:begin :instance.

fellow_n1 := intr_noun_word_le &
  [ STEM < "fellow" >,
    SYNSEM.LOCAL.KEYS.KEY _fellow_rel ].

:end :instance.


; <<>>

:begin :instance.

festival_n1 := intr_noun_word_le &
  [ STEM < "festival" >,
    SYNSEM.LOCAL.KEYS.KEY _festival_rel ].

:end :instance.


; <<>>

:begin :instance.

final_n1 := intr_noun_word_le &
  [ STEM < "final" >,
    SYNSEM.LOCAL.KEYS.KEY _final_n_rel ].

:end :instance.


; <<>>

:begin :instance.

finding_n1 := intr_noun_word_le &
  [ STEM < "finding" >,
    SYNSEM.LOCAL.KEYS.KEY _finding_rel ].

:end :instance.


; <<>>

:begin :instance.

flexiday_n1 := intr_noun_word_le &
  [ STEM < "flexiday" >,
    SYNSEM.LOCAL.KEYS.KEY _flexiday_rel ].

:end :instance.


; <<>>

:begin :instance.

flip_n1 := intr_noun_word_le &
  [ STEM < "flip" >,
    SYNSEM.LOCAL.KEYS.KEY _flip_n_rel ].

:end :instance.


; <<>>

:begin :instance.

flop_n1 := intr_noun_word_le &
  [ STEM < "flop" >,
    SYNSEM.LOCAL.KEYS.KEY _flop_rel ].

:end :instance.


; <<>>

:begin :instance.

flyer_n1 := intr_noun_word_le &
  [ STEM < "flyer" >,
    SYNSEM.LOCAL.KEYS.KEY _flyer_rel ].

:end :instance.


; <<>>

:begin :instance.

foot_n1 := intr_noun_word_le &
  [ STEM < "foot" >,
    SYNSEM.LOCAL.KEYS.KEY _foot_rel ].

:end :instance.


; <<>>

:begin :instance.

foreground_n1 := intr_noun_word_le &
  [ STEM < "foreground" >,
    SYNSEM.LOCAL.KEYS.KEY _foreground_rel ].

:end :instance.


; <<>>

:begin :instance.

form_n1 := noun_ppof_word_le &
  [ STEM < "form" >,
    SYNSEM.LOCAL.KEYS.KEY _form_n_rel ].

:end :instance.


; <<>>

:begin :instance.

format_n1 := intr_noun_word_le &
  [ STEM < "format" >,
    SYNSEM.LOCAL.KEYS.KEY _format_n_rel ].

:end :instance.


; <<>>

:begin :instance.

front_n1 := intr_noun_word_le &
  [ STEM < "front" >,
    SYNSEM.LOCAL.KEYS.KEY _front_n_rel ].

:end :instance.


; <<>>

:begin :instance.

fun_n1 := massn_le &
  [ STEM < "fun" >,
    SYNSEM.LOCAL.KEYS.KEY _fun_n_rel ].

:end :instance.


; <<>>

:begin :instance.

function_n1 := intr_noun_word_le &
  [ STEM < "function" >,
    SYNSEM.LOCAL.KEYS.KEY _function_n_rel ].

:end :instance.


; <<>>

:begin :instance.

fund_n1 := intr_noun_word_le &
  [ STEM < "fund" >,
    SYNSEM.LOCAL.KEYS.KEY _fund_rel ].

:end :instance.


; <<>>

:begin :instance.

funding_n1 := intr_noun_word_le &
  [ STEM < "funding" >,
    SYNSEM.LOCAL.KEYS.KEY _funding_rel ].

:end :instance.


; <<>>

:begin :instance.

gallery_n1 := intr_noun_word_le &
  [ STEM < "gallery" >,
    SYNSEM.LOCAL.KEYS.KEY _gallery_rel ].

:end :instance.


; <<>>

:begin :instance.

gardening_n1 := intr_noun_word_le &
  [ STEM < "gardening" >,
    SYNSEM.LOCAL.KEYS.KEY _gardening_rel ].

:end :instance.


; <<>>

:begin :instance.

gear_n1 := intr_noun_word_le &
  [ STEM < "gear" >,
    SYNSEM.LOCAL.KEYS.KEY _gear_rel ].

:end :instance.


; <<>>

:begin :instance.

gerbil_n1 := intr_noun_word_le &
  [ STEM < "gerbil" >,
    SYNSEM.LOCAL.KEYS.KEY _gerbil_rel ].

:end :instance.


; <<>>

:begin :instance.

gesture_n1 := intr_noun_word_le &
  [ STEM < "gesture" >,
    SYNSEM.LOCAL.KEYS.KEY _gesture_n_rel ].

:end :instance.


; <<>>

:begin :instance.

ghost_n1 := intr_noun_word_le &
  [ STEM < "ghost" >,
    SYNSEM.LOCAL.KEYS.KEY _ghost_rel ].

:end :instance.


; <<>>

:begin :instance.

giant_n1 := intr_noun_word_le &
  [ STEM < "giant" >,
    SYNSEM.LOCAL.KEYS.KEY _giant_rel ].

:end :instance.


; <<>>

:begin :instance.

gift_n1 := intr_noun_word_le &
  [ STEM < "gift" >,
    SYNSEM.LOCAL.KEYS.KEY _gift_rel ].

:end :instance.


; <<>>

:begin :instance.

girlfriend_n1 := intr_noun_word_le &
  [ STEM < "girlfriend" >,
    SYNSEM.LOCAL.KEYS.KEY _girlfriend_rel ].

:end :instance.


; <<>>

:begin :instance.

golf_n1 := intr_noun_word_le &
  [ STEM < "golf" >,
    SYNSEM.LOCAL.KEYS.KEY _golf_n_rel ].

:end :instance.


; <<>>

:begin :instance.

goodness_n1 := intr_noun_word_le &
  [ STEM < "goodness" >,
    SYNSEM.LOCAL.KEYS.KEY _goodness_rel ].

:end :instance.


; <<>>

:begin :instance.

goulash_n1 := intr_noun_word_le &
  [ STEM < "goulash" >,
    SYNSEM.LOCAL.KEYS.KEY _goulash_rel ].

:end :instance.


; <<>>

:begin :instance.

grease_n1 := intr_noun_word_le &
  [ STEM < "grease" >,
    SYNSEM.LOCAL.KEYS.KEY _grease_n_rel ].

:end :instance.


; <<>>

:begin :instance.

grill_n1 := intr_noun_word_le &
  [ STEM < "grill" >,
    SYNSEM.LOCAL.KEYS.KEY _grill_n_rel ].

:end :instance.


; <<>>

:begin :instance.

grip_n1 := intr_noun_word_le &
  [ STEM < "grip" >,
    SYNSEM.LOCAL.KEYS.KEY _grip_n_rel ].

:end :instance.


; <<>>

:begin :instance.

guideline_n1 := intr_noun_word_le &
  [ STEM < "guideline" >,
    SYNSEM.LOCAL.KEYS.KEY _guideline_rel ].

:end :instance.


; <<>>

:begin :instance.

hallway_n1 := intr_noun_word_le &
  [ STEM < "hallway" >,
    SYNSEM.LOCAL.KEYS.KEY _hallway_rel ].

:end :instance.


; <<>>

:begin :instance.

hamburger_n1 := intr_noun_word_le &
  [ STEM < "hamburger" >,
    SYNSEM.LOCAL.KEYS.KEY _hamburger_rel ].

:end :instance.


; <<>>

:begin :instance.

hanger_n1 := intr_noun_word_le &
  [ STEM < "hanger" >,
    SYNSEM.LOCAL.KEYS.KEY _hanger_rel ].

:end :instance.


; <<>>

:begin :instance.

happening_n1 := intr_noun_word_le &
  [ STEM < "happening" >,
    SYNSEM.LOCAL.KEYS.KEY _happening_rel ].

:end :instance.


; <<>>
; MULTIKEY < "happening" >

:begin :instance.

happening-artist_n1 := intr_noun_word_mle1 &
  [ STEM < "happening", "artist" >,
    SYNSEM.LOCAL.KEYS.KEY _happening_artist_rel ].

:end :instance.


; <<>>

:begin :instance.

haste_n1 := intr_noun_word_le &
  [ STEM < "haste" >,
    SYNSEM.LOCAL.KEYS.KEY _haste_rel ].

:end :instance.


; <<>>

:begin :instance.

heart_n1 := intr_noun_word_le &
  [ STEM < "heart" >,
    SYNSEM.LOCAL.KEYS.KEY _heart_rel ].

:end :instance.


; <<>>

:begin :instance.

heck_n1 := intr_noun_word_le &
  [ STEM < "heck" >,
    SYNSEM.LOCAL.KEYS.KEY _heck_n_rel ].

:end :instance.


; <<>>

:begin :instance.

hell_n1 := intr_noun_word_le &
  [ STEM < "hell" >,
    SYNSEM.LOCAL.KEYS.KEY _hell_rel ].

:end :instance.


; <<>>

:begin :instance.

hello_n1 := intr_noun_word_le &
  [ STEM < "hello" >,
    SYNSEM.LOCAL.KEYS.KEY _hello_rel ].

:end :instance.


; <<>>

:begin :instance.

help_n1 := intr_noun_word_le &
  [ STEM < "help" >,
    SYNSEM.LOCAL.KEYS.KEY _help_n_rel ].

:end :instance.


; <<>>

:begin :instance.

hepatitis_n1 := intr_noun_word_le &
  [ STEM < "hepatitis" >,
    SYNSEM.LOCAL.KEYS.KEY _hepatitis_rel ].

:end :instance.


; <<>>

:begin :instance.

highway_n1 := intr_noun_word_le &
  [ STEM < "highway" >,
    SYNSEM.LOCAL.KEYS.KEY _highway_rel ].

:end :instance.


; <<>>

:begin :instance.

history_n1 := intr_noun_word_le &
  [ STEM < "history" >,
    SYNSEM.LOCAL.KEYS.KEY _history_rel ].

:end :instance.


; <<>>

:begin :instance.

hit_n1 := intr_noun_word_le &
  [ STEM < "hit" >,
    SYNSEM.LOCAL.KEYS.KEY _hit_n_rel ].

:end :instance.


; <<>>

:begin :instance.

holder_n1 := intr_noun_word_le &
  [ STEM < "holder" >,
    SYNSEM.LOCAL.KEYS.KEY _holder_rel ].

:end :instance.


; <<>>

:begin :instance.

hole_n1 := intr_noun_word_le &
  [ STEM < "hole" >,
    SYNSEM.LOCAL.KEYS.KEY _hole_rel ].

:end :instance.


; <<>>

:begin :instance.

honor_n1 := intr_noun_word_le &
  [ STEM < "honor" >,
    SYNSEM.LOCAL.KEYS.KEY _honor_n_rel ].

:end :instance.


; <<>>

:begin :instance.

horse_n1 := intr_noun_word_le &
  [ STEM < "horse" >,
    SYNSEM.LOCAL.KEYS.KEY _horse_rel ].

:end :instance.


; <<>>

:begin :instance.

hoser_n1 := intr_noun_word_le &
  [ STEM < "hoser" >,
    SYNSEM.LOCAL.KEYS.KEY _hoser_rel ].

:end :instance.


; <<>>

:begin :instance.

hunger_n1 := intr_noun_word_le &
  [ STEM < "hunger" >,
    SYNSEM.LOCAL.KEYS.KEY _hunger_rel ].

:end :instance.


; <<>>

:begin :instance.

hurry_n1 := intr_noun_word_le &
  [ STEM < "hurry" >,
    SYNSEM.LOCAL.KEYS.KEY _hurry_n_rel ].

:end :instance.


; <<>>

:begin :instance.

ice_n1 := intr_noun_word_le &
  [ STEM < "ice" >,
    SYNSEM.LOCAL.KEYS.KEY _ice_rel ].

:end :instance.


; <<>>

:begin :instance.

improbability_n1 := intr_noun_word_le &
  [ STEM < "improbability" >,
    SYNSEM.LOCAL.KEYS.KEY _improbability_rel ].

:end :instance.


; <<>>

:begin :instance.

industry_n1 := intr_noun_word_le &
  [ STEM < "industry" >,
    SYNSEM.LOCAL.KEYS.KEY _industry_rel ].

:end :instance.


; <<>>

:begin :instance.

inquiry_n1 := intr_noun_word_le &
  [ STEM < "inquiry" >,
    SYNSEM.LOCAL.KEYS.KEY _inquiry_rel ].

:end :instance.


; <<>>

:begin :instance.

instruction_n1 := intr_noun_word_le &
  [ STEM < "instruction" >,
    SYNSEM.LOCAL.KEYS.KEY _instruction_rel ].

:end :instance.


; <<>>

:begin :instance.

insult_n1 := intr_noun_word_le &
  [ STEM < "insult" >,
    SYNSEM.LOCAL.KEYS.KEY _insult_n_rel ].

:end :instance.


; <<>>

:begin :instance.

intelligence_n1 := intr_noun_word_le &
  [ STEM < "intelligence" >,
    SYNSEM.LOCAL.KEYS.KEY _intelligence_rel ].

:end :instance.


; <<>>

:begin :instance.

intercity_n2 := intr_noun_word_le &
  [ STEM < "intercity" >,
    SYNSEM.LOCAL.KEYS.KEY _intercity_rel ].

:end :instance.


; <<>>

:begin :instance.

interregio_n1 := intr_noun_word_le &
  [ STEM < "interregio" >,
    SYNSEM.LOCAL.KEYS.KEY _interregio_rel ].

:end :instance.


; <<>>

:begin :instance.

interruption_n1 := intr_noun_word_le &
  [ STEM < "interruption" >,
    SYNSEM.LOCAL.KEYS.KEY _interruption_rel ].

:end :instance.


; <<>>

:begin :instance.

invitation_n1 := intr_noun_word_le &
  [ STEM < "invitation" >,
    SYNSEM.LOCAL.KEYS.KEY _invitation_rel ].

:end :instance.


; <<>>

:begin :instance.

item_n1 := intr_noun_word_le &
  [ STEM < "item" >,
    SYNSEM.LOCAL.KEYS.KEY _item_rel ].

:end :instance.


; <<>>

:begin :instance.

jacuzzi_n1 := intr_noun_word_le &
  [ STEM < "jacuzzi" >,
    SYNSEM.LOCAL.KEYS.KEY _jacuzzi_rel ].

:end :instance.


; <<>>

:begin :instance.

jaguar_n2 := intr_noun_word_le &
  [ STEM < "jaguar" >,
    SYNSEM.LOCAL.KEYS.KEY _jaguar_rel ].

:end :instance.


; <<>>

:begin :instance.

jazz_n1 := intr_noun_word_le &
  [ STEM < "jazz" >,
    SYNSEM.LOCAL.KEYS.KEY _jazz_rel ].

:end :instance.


; <<>>

:begin :instance.

jet_n1 := intr_noun_word_le &
  [ STEM < "jet" >,
    SYNSEM.LOCAL.KEYS.KEY _jet_n_rel ].

:end :instance.


; <<>>
; MULTIKEY < "jet" >

:begin :instance.

jet-lag_n1 := intr_noun_word_mle1 &
  [ STEM < "jet", "lag" >,
    SYNSEM.LOCAL.KEYS.KEY _jet_lag_rel ].

:end :instance.


; <<>>

:begin :instance.

joke_n1 := intr_noun_word_le &
  [ STEM < "joke" >,
    SYNSEM.LOCAL.KEYS.KEY _joke_n_rel ].

:end :instance.


; <<>>

:begin :instance.

joy_n1 := intr_noun_word_le &
  [ STEM < "joy" >,
    SYNSEM.LOCAL.KEYS.KEY _joy_rel ].

:end :instance.


; <<>>

:begin :instance.

judgement_n1 := intr_noun_word_le &
  [ STEM < "judgement" >,
    SYNSEM.LOCAL.KEYS.KEY _judgement_rel ].

:end :instance.


; <<>>

:begin :instance.

jump_n1 := intr_noun_word_le &
  [ STEM < "jump" >,
    SYNSEM.LOCAL.KEYS.KEY _jump_n_rel ].

:end :instance.


; <<>>

:begin :instance.

kilometer_n1 := intr_noun_word_le &
  [ STEM < "kilometer" >,
    SYNSEM.LOCAL.KEYS.KEY _kilometer_rel ].

:end :instance.


; <<>>

:begin :instance.

kindness_n1 := intr_noun_word_le &
  [ STEM < "kindness" >,
    SYNSEM.LOCAL.KEYS.KEY _kindness_rel ].

:end :instance.


; <<>>

:begin :instance.

kitchen_n1 := intr_noun_word_le &
  [ STEM < "kitchen" >,
    SYNSEM.LOCAL.KEYS.KEY _kitchen_rel ].

:end :instance.


; <<>>

:begin :instance.

knowledge_n1 := intr_noun_word_le &
  [ STEM < "knowledge" >,
    SYNSEM.LOCAL.KEYS.KEY _knowledge_rel ].

:end :instance.


; <<>>

:begin :instance.

lady_n1 := intr_noun_word_le &
  [ STEM < "lady" >,
    SYNSEM.LOCAL.KEYS.KEY _lady_rel ].

:end :instance.


; <<>>

:begin :instance.

lag_n1 := intr_noun_word_le &
  [ STEM < "lag" >,
    SYNSEM.LOCAL.KEYS.KEY _lag_rel ].

:end :instance.


; <<>>

:begin :instance.

land_n1 := intr_noun_word_le &
  [ STEM < "land" >,
    SYNSEM.LOCAL.KEYS.KEY _land_n_rel ].

:end :instance.


; <<>>

:begin :instance.

lane_n2 := intr_noun_word_le &
  [ STEM < "lane" >,
    SYNSEM.LOCAL.KEYS.KEY _lane_rel ].

:end :instance.


; <<>>

:begin :instance.

league_n1 := intr_noun_word_le &
  [ STEM < "league" >,
    SYNSEM.LOCAL.KEYS.KEY _league_rel ].

:end :instance.


; <<>>

:begin :instance.

left_n1 := massn_le &
  [ STEM < "left" >,
    SYNSEM.LOCAL.KEYS.KEY _left_n_rel ].

:end :instance.


; <<>>

:begin :instance.

liberty_n1 := intr_noun_word_le &
  [ STEM < "liberty" >,
    SYNSEM.LOCAL.KEYS.KEY _liberty_rel ].

:end :instance.


; <<>>

:begin :instance.

link_n1 := intr_noun_word_le &
  [ STEM < "link" >,
    SYNSEM.LOCAL.KEYS.KEY _link_n_rel ].

:end :instance.


; <<>>

:begin :instance.

load_n1 := intr_noun_word_le &
  [ STEM < "load" >,
    SYNSEM.LOCAL.KEYS.KEY _load_n_rel ].

:end :instance.


; <<>>

:begin :instance.

luncheon_n1 := intr_noun_word_le &
  [ STEM < "luncheon" >,
    SYNSEM.LOCAL.KEYS.KEY _luncheon_rel ].

:end :instance.


; <<>>

:begin :instance.

mail_n1 := massn_le &
  [ STEM < "mail" >,
    SYNSEM.LOCAL.KEYS.KEY _mail_rel ].

:end :instance.


; <<>>

:begin :instance.

make_up_n1 := intr_noun_word_le &
  [ STEM < "make_up" >,
    SYNSEM.LOCAL.KEYS.KEY _makeup_rel ].

:end :instance.


; <<>>

:begin :instance.

manuscript_n1 := intr_noun_word_le &
  [ STEM < "manuscript" >,
    SYNSEM.LOCAL.KEYS.KEY _manuscript_rel ].

:end :instance.


; <<>>

:begin :instance.

mark_n2 := intr_noun_word_le &
  [ STEM < "mark" >,
    SYNSEM.LOCAL.KEYS.KEY _deutschmark_rel ].

:end :instance.


; <<>>

:begin :instance.

market_n1 := intr_noun_word_le &
  [ STEM < "market" >,
    SYNSEM.LOCAL.KEYS.KEY _market_rel ].

:end :instance.


; <<>>

:begin :instance.

marketing_n1 := intr_noun_word_le &
  [ STEM < "marketing" >,
    SYNSEM.LOCAL.KEYS.KEY _marketing_rel ].

:end :instance.


; <<>>

:begin :instance.

marketplace_n1 := intr_noun_word_le &
  [ STEM < "marketplace" >,
    SYNSEM.LOCAL.KEYS.KEY _marketplace_rel ].

:end :instance.


; <<>>

:begin :instance.

match_n1 := intr_noun_word_le &
  [ STEM < "match" >,
    SYNSEM.LOCAL.KEYS.KEY _match_n_rel ].

:end :instance.


; <<>>

:begin :instance.

medium_n1 := intr_noun_word_le &
  [ STEM < "medium" >,
    SYNSEM.LOCAL.KEYS.KEY _medium_n_rel ].

:end :instance.


; <<>>

:begin :instance.

meet_n1 := intr_noun_word_le &
  [ STEM < "meet" >,
    SYNSEM.LOCAL.KEYS.KEY _meet_n_rel ].

:end :instance.


; <<>>

:begin :instance.

message_n1 := intr_noun_word_le &
  [ STEM < "message" >,
    SYNSEM.LOCAL.KEYS.KEY _message_rel ].

:end :instance.


; <<>>

:begin :instance.

meter_n1 := intr_noun_word_le &
  [ STEM < "meter" >,
    SYNSEM.LOCAL.KEYS.KEY _meter_rel ].

:end :instance.


; <<>>

:begin :instance.

midnight_n1 := intr_noun_word_le &
  [ STEM < "midnight" >,
    SYNSEM.LOCAL.KEYS.KEY _midnight_rel ].

:end :instance.


; <<>>

:begin :instance.

mile_n1 := intr_noun_word_le &
  [ STEM < "mile" >,
    SYNSEM.LOCAL.KEYS.KEY _mile_rel ].

:end :instance.


; <<>>

:begin :instance.

mind_n1 := intr_noun_word_le &
  [ STEM < "mind" >,
    SYNSEM.LOCAL.KEYS.KEY _mind_n_rel ].

:end :instance.


; <<>>

:begin :instance.

minister_n1 := intr_noun_word_le &
  [ STEM < "minister" >,
    SYNSEM.LOCAL.KEYS.KEY _minister_rel ].

:end :instance.


; <<>>

:begin :instance.

minutes_n1 := intr_noun_word_le &
  [ STEM < "minutes" >,
    SYNSEM.LOCAL.KEYS.KEY _minutes_rel ].

:end :instance.


; <<>>

:begin :instance.

miscommunication_n1 := intr_noun_word_le &
  [ STEM < "miscommunication" >,
    SYNSEM.LOCAL.KEYS.KEY _miscommunication_rel ].

:end :instance.


; <<>>

:begin :instance.

mission_n1 := intr_noun_word_le &
  [ STEM < "mission" >,
    SYNSEM.LOCAL.KEYS.KEY _mission_rel ].

:end :instance.


; <<>>

:begin :instance.

mixture_n1 := intr_noun_word_le &
  [ STEM < "mixture" >,
    SYNSEM.LOCAL.KEYS.KEY _mixture_rel ].

:end :instance.


; <<>>

:begin :instance.

model_n1 := intr_noun_word_le &
  [ STEM < "model" >,
    SYNSEM.LOCAL.KEYS.KEY _model_n_rel ].

:end :instance.


; <<>>

:begin :instance.

motion_n1 := intr_noun_word_le &
  [ STEM < "motion" >,
    SYNSEM.LOCAL.KEYS.KEY _motion_rel ].

:end :instance.


; <<>>

:begin :instance.

mover_n1 := intr_noun_word_le &
  [ STEM < "mover" >,
    SYNSEM.LOCAL.KEYS.KEY _mover_rel ].

:end :instance.


; <<>>

:begin :instance.

multiple_n1 := intr_noun_word_le &
  [ STEM < "multiple" >,
    SYNSEM.LOCAL.KEYS.KEY _multiple_n_rel ].

:end :instance.


; <<>>

:begin :instance.

museum_n1 := intr_noun_word_le &
  [ STEM < "museum" >,
    SYNSEM.LOCAL.KEYS.KEY _museum_rel ].

:end :instance.


; <<>>

:begin :instance.

music_n1 := massn_le &
  [ STEM < "music" >,
    SYNSEM.LOCAL.KEYS.KEY _music_rel ].

:end :instance.


; <<>>

:begin :instance.

must_n1 := intr_noun_word_le &
  [ STEM < "must" >,
    SYNSEM.LOCAL.KEYS.KEY _must_n_rel ].

:end :instance.


; <<>>

:begin :instance.

nail_n1 := intr_noun_word_le &
  [ STEM < "nail" >,
    SYNSEM.LOCAL.KEYS.KEY _nail_n_rel ].

:end :instance.


; <<>>

:begin :instance.

nerve_n1 := intr_noun_word_le &
  [ STEM < "nerve" >,
    SYNSEM.LOCAL.KEYS.KEY _nerve_rel ].

:end :instance.


; <<>>

:begin :instance.

networking_n1 := intr_noun_word_le &
  [ STEM < "networking" >,
    SYNSEM.LOCAL.KEYS.KEY _networking_rel ].

:end :instance.


; <<>>

:begin :instance.

newspaper_n1 := intr_noun_word_le &
  [ STEM < "newspaper" >,
    SYNSEM.LOCAL.KEYS.KEY _newspaper_rel ].

:end :instance.


; <<>>

:begin :instance.

no+go_n1 := intr_noun_word_le &
  [ STEM < "no+go" >,
    SYNSEM.LOCAL.KEYS.KEY _no_go_rel ].

:end :instance.


; <<>>

:begin :instance.

non_smoker_n1 := intr_noun_word_le &
  [ STEM < "non_smoker" >,
    SYNSEM.LOCAL.KEYS.KEY _non_smoker_rel ].

:end :instance.


; <<>>

:begin :instance.

noon_n1 := intr_noun_word_le &
  [ STEM < "noon" >,
    SYNSEM.LOCAL.KEYS.KEY _noon_rel ].

:end :instance.


; <<>>

:begin :instance.

north_n1 := intr_noun_word_le &
  [ STEM < "north" >,
    SYNSEM.LOCAL.KEYS.KEY _north_rel ].

:end :instance.


; <<>>

:begin :instance.

notion_n1 := intr_noun_word_le &
  [ STEM < "notion" >,
    SYNSEM.LOCAL.KEYS.KEY _notion_rel ].

:end :instance.


; <<>>

:begin :instance.

obsession_n1 := intr_noun_word_le &
  [ STEM < "obsession" >,
    SYNSEM.LOCAL.KEYS.KEY _obsession_rel ].

:end :instance.


; <<>>

:begin :instance.

opera_n1 := intr_noun_word_le &
  [ STEM < "opera" >,
    SYNSEM.LOCAL.KEYS.KEY _opera_rel ].

:end :instance.


; <<>>

:begin :instance.

ophthalmologist_n1 := intr_noun_word_le &
  [ STEM < "ophthalmologist" >,
    SYNSEM.LOCAL.KEYS.KEY _ophthalmologist_rel ].

:end :instance.


; <<>>

:begin :instance.

organizer_n1 := intr_noun_word_le &
  [ STEM < "organizer" >,
    SYNSEM.LOCAL.KEYS.KEY _organizer_rel ].

:end :instance.


; <<>>

:begin :instance.

outskirts_n1 := intr_noun_word_le &
  [ STEM < "outskirts" >,
    SYNSEM.LOCAL.KEYS.KEY _outskirts_rel ].

:end :instance.


; <<>>

:begin :instance.

overtime_n1 := intr_noun_word_le &
  [ STEM < "overtime" >,
    SYNSEM.LOCAL.KEYS.KEY _overtime_rel ].

:end :instance.


; <<>>

:begin :instance.

owner_n1 := intr_noun_word_le &
  [ STEM < "owner" >,
    SYNSEM.LOCAL.KEYS.KEY _owner_rel ].

:end :instance.


; <<>>

:begin :instance.

pack_n1 := intr_noun_word_le &
  [ STEM < "pack" >,
    SYNSEM.LOCAL.KEYS.KEY _pack_n_rel ].

:end :instance.


; <<>>

:begin :instance.

package_n1 := intr_noun_word_le &
  [ STEM < "package" >,
    SYNSEM.LOCAL.KEYS.KEY _package_rel ].

:end :instance.


; <<>>

:begin :instance.

paint_n1 := intr_noun_word_le &
  [ STEM < "paint" >,
    SYNSEM.LOCAL.KEYS.KEY _paint_n_rel ].

:end :instance.


; <<>>

:begin :instance.

painting_n1 := intr_noun_word_le &
  [ STEM < "painting" >,
    SYNSEM.LOCAL.KEYS.KEY _painting_rel ].

:end :instance.


; <<>>

:begin :instance.

panel_n1 := intr_noun_word_le &
  [ STEM < "panel" >,
    SYNSEM.LOCAL.KEYS.KEY _panel_rel ].

:end :instance.


; <<>>

:begin :instance.

paperwork_n1 := intr_noun_word_le &
  [ STEM < "paperwork" >,
    SYNSEM.LOCAL.KEYS.KEY _paperwork_rel ].

:end :instance.


; <<>>

:begin :instance.

par_n1 := intr_noun_word_le &
  [ STEM < "par" >,
    SYNSEM.LOCAL.KEYS.KEY _par_rel ].

:end :instance.


; <<>>

:begin :instance.

pardon_n1 := intr_noun_word_le &
  [ STEM < "pardon" >,
    SYNSEM.LOCAL.KEYS.KEY _pardon_n_rel ].

:end :instance.

; <<>>

:begin :instance.

past_n1 := intr_noun_word_le &
  [ STEM < "past" >,
    SYNSEM.LOCAL.KEYS.KEY _past_n_rel ].

:end :instance.

; <<>>

:begin :instance.

payment_n1 := massn_le &
  [ STEM < "payment" >,
    SYNSEM.LOCAL.KEYS.KEY _payment_rel ].

:end :instance.


; <<>>

:begin :instance.

pedestrian_n1 := intr_noun_word_le &
  [ STEM < "pedestrian" >,
    SYNSEM.LOCAL.KEYS.KEY _pedestrian_rel ].

:end :instance.


; <<>>

:begin :instance.

penthouse_n1 := intr_noun_word_le &
  [ STEM < "penthouse" >,
    SYNSEM.LOCAL.KEYS.KEY _penthouse_rel ].

:end :instance.


; <<>>

:begin :instance.

percent_n1 := intr_noun_word_le &
  [ STEM < "percent" >,
    SYNSEM.LOCAL.KEYS.KEY _percent_rel ].

:end :instance.


; <<>>
; MULTIKEY < "performance" >

:begin :instance.

performance-artist_n1 := intr_noun_word_mle1 &
  [ STEM < "performance", "artist" >,
    SYNSEM.LOCAL.KEYS.KEY _performance_artist_rel ].

:end :instance.


; <<>>

:begin :instance.

pet_n1 := intr_noun_word_le &
  [ STEM < "pet" >,
    SYNSEM.LOCAL.KEYS.KEY _pet_n_rel ].

:end :instance.


; <<>>

:begin :instance.

phase_n1 := intr_noun_word_le &
  [ STEM < "phase" >,
    SYNSEM.LOCAL.KEYS.KEY _phase_rel ].

:end :instance.


; <<>>

:begin :instance.

photographer_n1 := intr_noun_word_le &
  [ STEM < "photographer" >,
    SYNSEM.LOCAL.KEYS.KEY _photographer_rel ].

:end :instance.


; <<>>

:begin :instance.

pick_n1 := intr_noun_word_le &
  [ STEM < "pick" >,
    SYNSEM.LOCAL.KEYS.KEY _pick_n_rel ].

:end :instance.


; <<>>

:begin :instance.

picture_n1 := intr_noun_word_le &
  [ STEM < "picture" >,
    SYNSEM.LOCAL.KEYS.KEY _picture_rel ].

:end :instance.


; <<>>

:begin :instance.

pill_n1 := intr_noun_word_le &
  [ STEM < "pill" >,
    SYNSEM.LOCAL.KEYS.KEY _pill_rel ].

:end :instance.


; <<>>

:begin :instance.

pilot_n1 := intr_noun_word_le &
  [ STEM < "pilot" >,
    SYNSEM.LOCAL.KEYS.KEY _pilot_rel ].

:end :instance.


; <<>>

:begin :instance.

pizza_n1 := intr_noun_word_le &
  [ STEM < "pizza" >,
    SYNSEM.LOCAL.KEYS.KEY _pizza_rel ].

:end :instance.


; <<>>

:begin :instance.

playing_n1 := intr_noun_word_le &
  [ STEM < "playing" >,
    SYNSEM.LOCAL.KEYS.KEY _playing_rel ].

:end :instance.


; <<>>

:begin :instance.

pollution_n1 := intr_noun_word_le &
  [ STEM < "pollution" >,
    SYNSEM.LOCAL.KEYS.KEY _pollution_rel ].

:end :instance.


; <<>>

:begin :instance.

post_n1 := intr_noun_word_le &
  [ STEM < "post" >,
    SYNSEM.LOCAL.KEYS.KEY _post_n_rel ].

:end :instance.


; <<>>

:begin :instance.

pottery_n1 := intr_noun_word_le &
  [ STEM < "pottery" >,
    SYNSEM.LOCAL.KEYS.KEY _pottery_rel ].

:end :instance.


; <<>>

:begin :instance.

precedence_n1 := intr_noun_word_le &
  [ STEM < "precedence" >,
    SYNSEM.LOCAL.KEYS.KEY _precedence_rel ].

:end :instance.


; <<>>

:begin :instance.

presidency_n1 := intr_noun_word_le &
  [ STEM < "presidency" >,
    SYNSEM.LOCAL.KEYS.KEY _presidency_rel ].

:end :instance.


; <<>>

:begin :instance.

president_n1 := intr_noun_word_le &
  [ STEM < "president" >,
    SYNSEM.LOCAL.KEYS.KEY _president_rel ].

:end :instance.


; <<>>
; MULTIKEY < "price" >

:begin :instance.

price-list_n1 := intr_noun_word_mle1 &
  [ STEM < "price", "list" >,
    SYNSEM.LOCAL.KEYS.KEY _price_list_rel ].

:end :instance.


; <<>>

:begin :instance.

prince_n1 := intr_noun_word_le &
  [ STEM < "prince" >,
    SYNSEM.LOCAL.KEYS.KEY _prince_rel ].

:end :instance.


; <<>>

:begin :instance.

print_n1 := intr_noun_word_le &
  [ STEM < "print" >,
    SYNSEM.LOCAL.KEYS.KEY _print_n_rel ].

:end :instance.


; <<>>

:begin :instance.

priority_n1 := intr_noun_word_le &
  [ STEM < "priority" >,
    SYNSEM.LOCAL.KEYS.KEY _priority_rel ].

:end :instance.


; <<>>

:begin :instance.

procedure_n1 := intr_noun_word_le &
  [ STEM < "procedure" >,
    SYNSEM.LOCAL.KEYS.KEY _procedure_rel ].

:end :instance.


; <<>>

:begin :instance.

process_n1 := intr_noun_word_le &
  [ STEM < "process" >,
    SYNSEM.LOCAL.KEYS.KEY _process_n_rel ].

:end :instance.


; <<>>

:begin :instance.

processing_n1 := intr_noun_word_le &
  [ STEM < "processing" >,
    SYNSEM.LOCAL.KEYS.KEY _processing_rel ].

:end :instance.


; <<>>

:begin :instance.

production_n1 := intr_noun_word_le &
  [ STEM < "production" >,
    SYNSEM.LOCAL.KEYS.KEY _production_rel ].

:end :instance.


; <<>>

:begin :instance.

productivity_n1 := intr_noun_word_le &
  [ STEM < "productivity" >,
    SYNSEM.LOCAL.KEYS.KEY _productivity_rel ].

:end :instance.


; <<>>

:begin :instance.

progress_n1 := intr_noun_word_le &
  [ STEM < "progress" >,
    SYNSEM.LOCAL.KEYS.KEY _progress_n_rel ].

:end :instance.


; <<>>

:begin :instance.

promise_n1 := intr_noun_word_le &
  [ STEM < "promise" >,
    SYNSEM.LOCAL.KEYS.KEY _promise_n_rel ].

:end :instance.


; <<>>

:begin :instance.

promptness_n1 := intr_noun_word_le &
  [ STEM < "promptness" >,
    SYNSEM.LOCAL.KEYS.KEY _promptness_rel ].

:end :instance.


; <<>>

:begin :instance.

propaganda_n1 := intr_noun_word_le &
  [ STEM < "propaganda" >,
    SYNSEM.LOCAL.KEYS.KEY _propaganda_rel ].

:end :instance.


; <<>>

:begin :instance.

prospect_n1 := intr_noun_word_le &
  [ STEM < "prospect" >,
    SYNSEM.LOCAL.KEYS.KEY _prospect_rel ].

:end :instance.


; <<>>

:begin :instance.

protocol_n1 := intr_noun_word_le &
  [ STEM < "protocol" >,
    SYNSEM.LOCAL.KEYS.KEY _protocol_rel ].

:end :instance.


; <<>>

:begin :instance.

pub_n1 := intr_noun_word_le &
  [ STEM < "pub" >,
    SYNSEM.LOCAL.KEYS.KEY _pub_rel ].

:end :instance.


; <<>>

:begin :instance.

public_n1 := intr_noun_word_le &
  [ STEM < "public" >,
    SYNSEM.LOCAL.KEYS.KEY _public_n_rel ].

:end :instance.


; <<>>

:begin :instance.

purchase_n1 := intr_noun_word_le &
  [ STEM < "purchase" >,
    SYNSEM.LOCAL.KEYS.KEY _purchase_n_rel ].

:end :instance.


; <<>>

:begin :instance.

quality_n1 := intr_noun_word_le &
  [ STEM < "quality" >,
    SYNSEM.LOCAL.KEYS.KEY _quality_rel ].

:end :instance.


; <<>>

:begin :instance.

qualm_n1 := intr_noun_word_le &
  [ STEM < "qualm" >,
    SYNSEM.LOCAL.KEYS.KEY _qualm_rel ].

:end :instance.


; <<>>

:begin :instance.

quota_n1 := intr_noun_word_le &
  [ STEM < "quota" >,
    SYNSEM.LOCAL.KEYS.KEY _quota_rel ].

:end :instance.


; <<>>

:begin :instance.

race_n1 := intr_noun_word_le &
  [ STEM < "race" >,
    SYNSEM.LOCAL.KEYS.KEY _race_n_rel ].

:end :instance.


; <<>>

:begin :instance.

railway_n1 := intr_noun_word_le &
  [ STEM < "railway" >,
    SYNSEM.LOCAL.KEYS.KEY _railway_rel ].

:end :instance.


; <<>>

:begin :instance.

reception_n1 := intr_noun_word_le &
  [ STEM < "reception" >,
    SYNSEM.LOCAL.KEYS.KEY _reception_rel ].

:end :instance.


; <<>>

:begin :instance.

regard_n1 := intr_noun_word_le &
  [ STEM < "regard" >,
    SYNSEM.LOCAL.KEYS.KEY _regard_n_rel ].

:end :instance.


; <<>>

:begin :instance.

relative_n1 := intr_noun_word_le &
  [ STEM < "relative" >,
    SYNSEM.LOCAL.KEYS.KEY _relative_n_rel ].

:end :instance.


; <<>>

:begin :instance.

relaxation_n1 := intr_noun_word_le &
  [ STEM < "relaxation" >,
    SYNSEM.LOCAL.KEYS.KEY _relaxation_rel ].

:end :instance.


; <<>>

:begin :instance.

rendering_n1 := intr_noun_word_le &
  [ STEM < "rendering" >,
    SYNSEM.LOCAL.KEYS.KEY _rendering_rel ].

:end :instance.


; <<>>

:begin :instance.

rent_n1 := intr_noun_word_le &
  [ STEM < "rent" >,
    SYNSEM.LOCAL.KEYS.KEY _rent_n_rel ].

:end :instance.


; <<>>

:begin :instance.

rental_n1 := intr_noun_word_le &
  [ STEM < "rental" >,
    SYNSEM.LOCAL.KEYS.KEY _rental_rel ].

:end :instance.


; <<>>

:begin :instance.

repair_n1 := intr_noun_word_le &
  [ STEM < "repair" >,
    SYNSEM.LOCAL.KEYS.KEY _repair_n_rel ].

:end :instance.


; <<>>

:begin :instance.

reply_n1 := intr_noun_word_le &
  [ STEM < "reply" >,
    SYNSEM.LOCAL.KEYS.KEY _reply_n_rel ].

:end :instance.


; <<>>

:begin :instance.

representation_n1 := intr_noun_word_le &
  [ STEM < "representation" >,
    SYNSEM.LOCAL.KEYS.KEY _representation_rel ].

:end :instance.


; <<>>

:begin :instance.

representative_n1 := intr_noun_word_le &
  [ STEM < "representative" >,
    SYNSEM.LOCAL.KEYS.KEY _representative_rel ].

:end :instance.


; <<>>

:begin :instance.

republic_n1 := intr_noun_word_le &
  [ STEM < "republic" >,
    SYNSEM.LOCAL.KEYS.KEY _republic_rel ].

:end :instance.


; <<>>

:begin :instance.

reputation_n1 := intr_noun_word_le &
  [ STEM < "reputation" >,
    SYNSEM.LOCAL.KEYS.KEY _reputation_rel ].

:end :instance.


; <<>>

:begin :instance.

research_n1 := intr_noun_word_le &
  [ STEM < "research" >,
    SYNSEM.LOCAL.KEYS.KEY _research_n_rel ].

:end :instance.


; <<>>

:begin :instance.

reserve_n1 := intr_noun_word_le &
  [ STEM < "reserve" >,
    SYNSEM.LOCAL.KEYS.KEY _reserve_n_rel ].

:end :instance.


; <<>>

:begin :instance.

resource_n1 := intr_noun_word_le &
  [ STEM < "resource" >,
    SYNSEM.LOCAL.KEYS.KEY _resource_rel ].

:end :instance.


; <<>>

:begin :instance.

review_n1 := intr_noun_word_le &
  [ STEM < "review" >,
    SYNSEM.LOCAL.KEYS.KEY _review_n_rel ].

:end :instance.


; <<>>

:begin :instance.

revue_n1 := intr_noun_word_le &
  [ STEM < "revue" >,
    SYNSEM.LOCAL.KEYS.KEY _revue_rel ].

:end :instance.


; <<>>

:begin :instance.

right_n1 := intr_noun_word_le &
  [ STEM < "right" >,
    SYNSEM.LOCAL.KEYS.KEY _right_n_rel ].

:end :instance.


; <<>>

:begin :instance.

risk_n1 := intr_noun_word_le &
  [ STEM < "risk" >,
    SYNSEM.LOCAL.KEYS.KEY _risk_n_rel ].

:end :instance.


; <<>>

:begin :instance.

river_n1 := intr_noun_word_le &
  [ STEM < "river" >,
    SYNSEM.LOCAL.KEYS.KEY _river_rel ].

:end :instance.


; <<>>

:begin :instance.

role_n1 := intr_noun_word_le &
  [ STEM < "role" >,
    SYNSEM.LOCAL.KEYS.KEY _role_rel ].

:end :instance.


; <<>>

:begin :instance.

roof_n1 := intr_noun_word_le &
  [ STEM < "roof" >,
    SYNSEM.LOCAL.KEYS.KEY _roof_rel ].

:end :instance.


; <<>>

:begin :instance.

round_n1 := intr_noun_word_le &
  [ STEM < "round" >,
    SYNSEM.LOCAL.KEYS.KEY _round_n_rel ].

:end :instance.


; <<>>

:begin :instance.

rule_n1 := intr_noun_word_le &
  [ STEM < "rule" >,
    SYNSEM.LOCAL.KEYS.KEY _rule_n_rel ].

:end :instance.


; <<>>

:begin :instance.

rush_n1 := intr_noun_word_le &
  [ STEM < "rush" >,
    SYNSEM.LOCAL.KEYS.KEY _rush_n_rel ].

:end :instance.


; <<>>

:begin :instance.

sale_n1 := intr_noun_word_le &
  [ STEM < "sale" >,
    SYNSEM.LOCAL.KEYS.KEY _sale_rel ].

:end :instance.


; <<>>

:begin :instance.

sand_n1 := intr_noun_word_le &
  [ STEM < "sand" >,
    SYNSEM.LOCAL.KEYS.KEY _sand_n_rel ].

:end :instance.


; <<>>

:begin :instance.

scenario_n1 := intr_noun_word_le &
  [ STEM < "scenario" >,
    SYNSEM.LOCAL.KEYS.KEY _scenario_rel ].

:end :instance.


; <<>>

:begin :instance.

scene_n1 := intr_noun_word_le &
  [ STEM < "scene" >,
    SYNSEM.LOCAL.KEYS.KEY _scene_rel ].

:end :instance.


; <<>>

:begin :instance.

scuba_n1 := intr_noun_word_le &
  [ STEM < "scuba" >,
    SYNSEM.LOCAL.KEYS.KEY _scuba_rel ].

:end :instance.


; <<>>

:begin :instance.

seat_n1 := intr_noun_word_le &
  [ STEM < "seat" >,
    SYNSEM.LOCAL.KEYS.KEY _seat_n_rel ].

:end :instance.


; <<>>

:begin :instance.

sec_n1 := intr_noun_word_le &
  [ STEM < "sec" >,
    SYNSEM.LOCAL.KEYS.KEY _sec_rel ].

:end :instance.


; <<>>

:begin :instance.

second_n1 := intr_noun_word_le &
  [ STEM < "second" >,
    SYNSEM.LOCAL.KEYS.KEY _second_n_rel ].

:end :instance.


; <<>>

:begin :instance.

self_n1 := intr_noun_word_le &
  [ STEM < "self" >,
    SYNSEM.LOCAL.KEYS.KEY _self_rel ].

:end :instance.


; <<>>

:begin :instance.

semester_n1 := intr_noun_word_le &
  [ STEM < "semester" >,
    SYNSEM.LOCAL.KEYS.KEY _semester_rel ].

:end :instance.


; <<>>

:begin :instance.

sequence_n1 := intr_noun_word_le &
  [ STEM < "sequence" >,
    SYNSEM.LOCAL.KEYS.KEY _sequence_rel ].

:end :instance.


; <<>>

:begin :instance.

service_n1 := intr_noun_word_le &
  [ STEM < "service" >,
    SYNSEM.LOCAL.KEYS.KEY _service_n_rel ].

:end :instance.


; <<>>

:begin :instance.

setup_n1 := intr_noun_word_le &
  [ STEM < "setup" >,
    SYNSEM.LOCAL.KEYS.KEY _setup_rel ].

:end :instance.


; <<>>

:begin :instance.

shaker_n1 := intr_noun_word_le &
  [ STEM < "shaker" >,
    SYNSEM.LOCAL.KEYS.KEY _shaker_rel ].

:end :instance.


; <<>>

:begin :instance.

shame_n1 := intr_noun_word_le &
  [ STEM < "shame" >,
    SYNSEM.LOCAL.KEYS.KEY _shame_rel ].

:end :instance.


; <<>>

:begin :instance.

shareholder_n1 := intr_noun_word_le &
  [ STEM < "shareholder" >,
    SYNSEM.LOCAL.KEYS.KEY _shareholder_rel ].

:end :instance.


; <<>>

:begin :instance.

shit_n1 := intr_noun_word_le &
  [ STEM < "shit" >,
    SYNSEM.LOCAL.KEYS.KEY _shit_n_rel ].

:end :instance.


; <<>>

:begin :instance.

shopping_n1 := intr_noun_word_le &
  [ STEM < "shopping" >,
    SYNSEM.LOCAL.KEYS.KEY _shopping_rel ].

:end :instance.


; <<>>
; MULTIKEY < "short" >

:begin :instance.

short-circuit_n1 := intr_noun_word_mle1 &
  [ STEM < "short", "circuit" >,
    SYNSEM.LOCAL.KEYS.KEY _short_circuit_rel ].

:end :instance.


; <<>>

:begin :instance.

shortness_n1 := intr_noun_word_le &
  [ STEM < "shortness" >,
    SYNSEM.LOCAL.KEYS.KEY _shortness_rel ].

:end :instance.


; <<>>

:begin :instance.

shot_n1 := intr_noun_word_le &
  [ STEM < "shot" >,
    SYNSEM.LOCAL.KEYS.KEY _shot_n_rel ].

:end :instance.


; <<>>

:begin :instance.

shower_n1 := intr_noun_word_le &
  [ STEM < "shower" >,
    SYNSEM.LOCAL.KEYS.KEY _shower_n_rel ].

:end :instance.


; <<>>

:begin :instance.

sightseeing_n1 := intr_noun_word_le &
  [ STEM < "sightseeing" >,
    SYNSEM.LOCAL.KEYS.KEY _sightseeing_rel ].

:end :instance.


; <<>>

:begin :instance.

sister_n1 := intr_noun_word_le &
  [ STEM < "sister" >,
    SYNSEM.LOCAL.KEYS.KEY _sister_rel ].

:end :instance.


; <<>>

:begin :instance.

size_n1 := intr_noun_word_le &
  [ STEM < "size" >,
    SYNSEM.LOCAL.KEYS.KEY _size_rel ].

:end :instance.


; <<>>

:begin :instance.

slam_n1 := intr_noun_word_le &
  [ STEM < "slam" >,
    SYNSEM.LOCAL.KEYS.KEY _slam_n_rel ].

:end :instance.


; <<>>

:begin :instance.

sleep_n1 := massn_le &
  [ STEM < "sleep" >,
    SYNSEM.LOCAL.KEYS.KEY _sleep_n_rel ].

:end :instance.


; <<>>

:begin :instance.

soccer_n1 := intr_noun_word_le &
  [ STEM < "soccer" >,
    SYNSEM.LOCAL.KEYS.KEY _soccer_rel ].

:end :instance.


; <<>>

:begin :instance.

society_n1 := intr_noun_word_le &
  [ STEM < "society" >,
    SYNSEM.LOCAL.KEYS.KEY _society_rel ].

:end :instance.


; <<>>

:begin :instance.

socket_n1 := intr_noun_word_le &
  [ STEM < "socket" >,
    SYNSEM.LOCAL.KEYS.KEY _socket_rel ].

:end :instance.


; <<>>

:begin :instance.

solarium_n1 := intr_noun_word_le &
  [ STEM < "solarium" >,
    SYNSEM.LOCAL.KEYS.KEY _solarium_rel ].

:end :instance.


; <<>>

:begin :instance.

soul_n1 := intr_noun_word_le &
  [ STEM < "soul" >,
    SYNSEM.LOCAL.KEYS.KEY _soul_rel ].

:end :instance.


; <<>>

:begin :instance.

south_n1 := intr_noun_word_le &
  [ STEM < "south" >,
    SYNSEM.LOCAL.KEYS.KEY _south_n_rel ].

:end :instance.


; <<>>

:begin :instance.

speaker_n1 := intr_noun_word_le &
  [ STEM < "speaker" >,
    SYNSEM.LOCAL.KEYS.KEY _speaker_rel ].

:end :instance.


; <<>>

:begin :instance.

speed_n1 := intr_noun_word_le &
  [ STEM < "speed" >,
    SYNSEM.LOCAL.KEYS.KEY _speed_n_rel ].

:end :instance.


; <<>>

:begin :instance.

spelling_n1 := intr_noun_word_le &
  [ STEM < "spelling" >,
    SYNSEM.LOCAL.KEYS.KEY _spelling_rel ].

:end :instance.


; <<>>

:begin :instance.

spice_n1 := intr_noun_word_le &
  [ STEM < "spice" >,
    SYNSEM.LOCAL.KEYS.KEY _spice_rel ].

:end :instance.


; <<>>

:begin :instance.

spirit_n1 := intr_noun_word_le &
  [ STEM < "spirit" >,
    SYNSEM.LOCAL.KEYS.KEY _spirit_rel ].

:end :instance.


; <<>>

:begin :instance.

sport_n1 := intr_noun_word_le &
  [ STEM < "sport" >,
    SYNSEM.LOCAL.KEYS.KEY _sport_rel ].

:end :instance.


; <<>>

:begin :instance.

spot_n1 := intr_noun_word_le &
  [ STEM < "spot" >,
    SYNSEM.LOCAL.KEYS.KEY _spot_n_rel ].

:end :instance.


; <<>>

:begin :instance.

spreadsheet_n1 := intr_noun_word_le &
  [ STEM < "spreadsheet" >,
    SYNSEM.LOCAL.KEYS.KEY _spreadsheet_rel ].

:end :instance.


; <<>>

:begin :instance.

stain_n1 := intr_noun_word_le &
  [ STEM < "stain" >,
    SYNSEM.LOCAL.KEYS.KEY _stain_n_rel ].

:end :instance.


; <<>>

:begin :instance.

standard_n1 := intr_noun_word_le &
  [ STEM < "standard" >,
    SYNSEM.LOCAL.KEYS.KEY _standard_n_rel ].

:end :instance.


; <<>>

:begin :instance.

steak_n1 := intr_noun_word_le &
  [ STEM < "steak" >,
    SYNSEM.LOCAL.KEYS.KEY _steak_rel ].

:end :instance.


; <<>>

:begin :instance.

steam_n1 := intr_noun_word_le &
  [ STEM < "steam" >,
    SYNSEM.LOCAL.KEYS.KEY _steam_n_rel ].

:end :instance.


; <<>>

:begin :instance.

stock_n1 := intr_noun_word_le &
  [ STEM < "stock" >,
    SYNSEM.LOCAL.KEYS.KEY _stock_n_rel ].

:end :instance.


; <<>>

:begin :instance.

stone_n1 := intr_noun_word_le &
  [ STEM < "stone" >,
    SYNSEM.LOCAL.KEYS.KEY _stone_n_rel ].

:end :instance.


; <<>>

:begin :instance.

stop_n1 := intr_noun_word_le &
  [ STEM < "stop" >,
    SYNSEM.LOCAL.KEYS.KEY _stop_n_rel ].

:end :instance.


; <<>>

:begin :instance.

store_n1 := intr_noun_word_le &
  [ STEM < "store" >,
    SYNSEM.LOCAL.KEYS.KEY _store_n_rel ].

:end :instance.


; <<>>

:begin :instance.

storm_n1 := intr_noun_word_le &
  [ STEM < "storm" >,
    SYNSEM.LOCAL.KEYS.KEY _storm_rel ].

:end :instance.


; <<>>

:begin :instance.

strain_n1 := intr_noun_word_le &
  [ STEM < "strain" >,
    SYNSEM.LOCAL.KEYS.KEY _strain_n_rel ].

:end :instance.


; <<>>

:begin :instance.

stranger_n1 := intr_noun_word_le &
  [ STEM < "stranger" >,
    SYNSEM.LOCAL.KEYS.KEY _stranger_rel ].

:end :instance.


; <<>>

:begin :instance.

studio_n1 := intr_noun_word_le &
  [ STEM < "studio" >,
    SYNSEM.LOCAL.KEYS.KEY _studio_rel ].

:end :instance.


; <<>>

:begin :instance.

suburb_n1 := intr_noun_word_le &
  [ STEM < "suburb" >,
    SYNSEM.LOCAL.KEYS.KEY _suburb_n_rel ].

:end :instance.


; <<>>

:begin :instance.

summary_n1 := intr_noun_word_le &
  [ STEM < "summary" >,
    SYNSEM.LOCAL.KEYS.KEY _summary_rel ].

:end :instance.


; <<>>

:begin :instance.

support_n1 := intr_noun_word_le &
  [ STEM < "support" >,
    SYNSEM.LOCAL.KEYS.KEY _support_n_rel ].

:end :instance.


; <<>>

:begin :instance.

surplus_n1 := intr_noun_word_le &
  [ STEM < "surplus" >,
    SYNSEM.LOCAL.KEYS.KEY _surplus_rel ].

:end :instance.


; <<>>

:begin :instance.

surrounding_n1 := intr_noun_word_le &
  [ STEM < "surrounding" >,
    SYNSEM.LOCAL.KEYS.KEY _surrounding_rel ].

:end :instance.


; <<>>

:begin :instance.

sushi_n1 := intr_noun_word_le &
  [ STEM < "sushi" >,
    SYNSEM.LOCAL.KEYS.KEY _sushi_rel ].

:end :instance.


; <<>>

:begin :instance.

swabian_n1 := intr_noun_word_le &
  [ STEM < "swabian" >,
    SYNSEM.LOCAL.KEYS.KEY _swabian_n_rel ].

:end :instance.


; <<>>
; MULTIKEY < "swimming" >

:begin :instance.

swimming-pool_n1 := intr_noun_word_mle1 &
  [ STEM < "swimming", "pool" >,
    SYNSEM.LOCAL.KEYS.KEY _swimming_pool_rel ].

:end :instance.


; <<>>

:begin :instance.

symposium_n1 := intr_noun_word_le &
  [ STEM < "symposium" >,
    SYNSEM.LOCAL.KEYS.KEY _symposium_rel ].

:end :instance.


; <<>>

:begin :instance.

take_n1 := intr_noun_word_le &
  [ STEM < "take" >,
    SYNSEM.LOCAL.KEYS.KEY _take_n_rel ].

:end :instance.


; <<>>

:begin :instance.

taste_n1 := intr_noun_word_le &
  [ STEM < "taste" >,
    SYNSEM.LOCAL.KEYS.KEY _taste_n_rel ].

:end :instance.


; <<>>

:begin :instance.

television_n1 := intr_noun_word_le &
  [ STEM < "television" >,
    SYNSEM.LOCAL.KEYS.KEY _television_rel ].

:end :instance.


; <<>>

:begin :instance.

tendency_n1 := intr_noun_word_le &
  [ STEM < "tendency" >,
    SYNSEM.LOCAL.KEYS.KEY _tendency_rel ].

:end :instance.


; <<>>

:begin :instance.

tension_n1 := intr_noun_word_le &
  [ STEM < "tension" >,
    SYNSEM.LOCAL.KEYS.KEY _tension_rel ].

:end :instance.


; <<>>

:begin :instance.

territory_n1 := intr_noun_word_le &
  [ STEM < "territory" >,
    SYNSEM.LOCAL.KEYS.KEY _territory_rel ].

:end :instance.


; <<>>

:begin :instance.

theory_n1 := intr_noun_word_le &
  [ STEM < "theory" >,
    SYNSEM.LOCAL.KEYS.KEY _theory_rel ].

:end :instance.


; <<>>

:begin :instance.

third_n1 := intr_noun_word_le &
  [ STEM < "third" >,
    SYNSEM.LOCAL.KEYS.KEY _third_n_rel ].

:end :instance.


; <<>>

:begin :instance.

thunder_n1 := intr_noun_word_le &
  [ STEM < "thunder" >,
    SYNSEM.LOCAL.KEYS.KEY _thunder_n_rel ].

:end :instance.


; <<>>

:begin :instance.

timespan_n1 := intr_noun_word_le &
  [ STEM < "timespan" >,
    SYNSEM.LOCAL.KEYS.KEY _timespan_rel ].

:end :instance.


; <<>>

:begin :instance.

toast_n1 := intr_noun_word_le &
  [ STEM < "toast" >,
    SYNSEM.LOCAL.KEYS.KEY _toast_n_rel ].

:end :instance.


; <<>>

:begin :instance.

tool_n1 := intr_noun_word_le &
  [ STEM < "tool" >,
    SYNSEM.LOCAL.KEYS.KEY _tool_rel ].

:end :instance.


; <<>>

:begin :instance.

touch_n1 := massn_le &
  [ STEM < "touch" >,
    SYNSEM.LOCAL.KEYS.KEY _touch_n_rel ].

:end :instance.


; <<>>

:begin :instance.

tourist_n1 := intr_noun_word_le &
  [ STEM < "tourist" >,
    SYNSEM.LOCAL.KEYS.KEY _tourist_rel ].

:end :instance.


; <<>>

:begin :instance.

tower_n1 := intr_noun_word_le &
  [ STEM < "tower" >,
    SYNSEM.LOCAL.KEYS.KEY _tower_rel ].

:end :instance.


; <<>>

:begin :instance.

tradition_n1 := intr_noun_word_le &
  [ STEM < "tradition" >,
    SYNSEM.LOCAL.KEYS.KEY _tradition_rel ].

:end :instance.


; <<>>

:begin :instance.

traffic_n1 := intr_noun_word_le &
  [ STEM < "traffic" >,
    SYNSEM.LOCAL.KEYS.KEY _traffic_rel ].

:end :instance.


; <<>>

:begin :instance.

tram_n1 := intr_noun_word_le &
  [ STEM < "tram" >,
    SYNSEM.LOCAL.KEYS.KEY _tram_rel ].

:end :instance.


; <<>>

:begin :instance.

traveling_n1 := intr_noun_word_le &
  [ STEM < "traveling" >,
    SYNSEM.LOCAL.KEYS.KEY _traveling_rel ].

:end :instance.


; <<>>

:begin :instance.

treat_n1 := intr_noun_word_le &
  [ STEM < "treat" >,
    SYNSEM.LOCAL.KEYS.KEY _treat_n_rel ].

:end :instance.


; <<>>

:begin :instance.

triangle_n1 := intr_noun_word_le &
  [ STEM < "triangle" >,
    SYNSEM.LOCAL.KEYS.KEY _triangle_rel ].

:end :instance.


; <<>>

:begin :instance.

try_n1 := intr_noun_word_le &
  [ STEM < "try" >,
    SYNSEM.LOCAL.KEYS.KEY _try_n_rel ].

:end :instance.


; <<>>

:begin :instance.

tub_n1 := intr_noun_word_le &
  [ STEM < "tub" >,
    SYNSEM.LOCAL.KEYS.KEY _tub_rel ].

:end :instance.


; <<>>

:begin :instance.

tutor_n1 := intr_noun_word_le &
  [ STEM < "tutor" >,
    SYNSEM.LOCAL.KEYS.KEY _tutor_n_rel ].

:end :instance.


; <<>>

:begin :instance.

tv_n1 := intr_noun_word_le &
  [ STEM < "tv" >,
    SYNSEM.LOCAL.KEYS.KEY _tv_rel ].

:end :instance.


; <<>>

:begin :instance.

type_n1 := intr_noun_word_le &
  [ STEM < "type" >,
    SYNSEM.LOCAL.KEYS.KEY _type_n_rel ].

:end :instance.


; <<>>

:begin :instance.

understanding_n1 := intr_noun_word_le &
  [ STEM < "understanding" >,
    SYNSEM.LOCAL.KEYS.KEY _understanding_rel ].

:end :instance.


; <<>>

:begin :instance.

undertaking_n1 := intr_noun_word_le &
  [ STEM < "undertaking" >,
    SYNSEM.LOCAL.KEYS.KEY _undertaking_rel ].

:end :instance.


; <<>>

:begin :instance.

validity_n1 := intr_noun_word_le &
  [ STEM < "validity" >,
    SYNSEM.LOCAL.KEYS.KEY _validity_rel ].

:end :instance.


; <<>>

:begin :instance.

variation_n1 := intr_noun_word_le &
  [ STEM < "variation" >,
    SYNSEM.LOCAL.KEYS.KEY _variation_rel ].

:end :instance.


; <<>>

:begin :instance.

vehicle_n1 := intr_noun_word_le &
  [ STEM < "vehicle" >,
    SYNSEM.LOCAL.KEYS.KEY _vehicle_rel ].

:end :instance.


; <<>>

:begin :instance.

version_n1 := intr_noun_word_le &
  [ STEM < "version" >,
    SYNSEM.LOCAL.KEYS.KEY _version_rel ].

:end :instance.


; <<>>

:begin :instance.

volume_n1 := intr_noun_word_le &
  [ STEM < "volume" >,
    SYNSEM.LOCAL.KEYS.KEY _volume_rel ].

:end :instance.


; <<>>

:begin :instance.

warrant_n1 := intr_noun_word_le &
  [ STEM < "warrant" >,
    SYNSEM.LOCAL.KEYS.KEY _warrant_n_rel ].

:end :instance.


; <<>>

:begin :instance.

wash_n1 := intr_noun_word_le &
  [ STEM < "wash" >,
    SYNSEM.LOCAL.KEYS.KEY _wash_n_rel ].

:end :instance.


; <<>>

:begin :instance.

watch_n1 := intr_noun_word_le &
  [ STEM < "watch" >,
    SYNSEM.LOCAL.KEYS.KEY _watch_n_rel ].

:end :instance.


; <<>>

:begin :instance.

wedge_n1 := intr_noun_word_le &
  [ STEM < "wedge" >,
    SYNSEM.LOCAL.KEYS.KEY _wedge_n_rel ].

:end :instance.


; <<>>

:begin :instance.

weight_n1 := massn_le &
  [ STEM < "weight" >,
    SYNSEM.LOCAL.KEYS.KEY _weight_rel ].

:end :instance.


; <<>>

:begin :instance.

west_n1 := intr_noun_word_le &
  [ STEM < "west" >,
    SYNSEM.LOCAL.KEYS.KEY _west_rel ].

:end :instance.


; <<>>

:begin :instance.

whale_n1 := intr_noun_word_le &
  [ STEM < "whale" >,
    SYNSEM.LOCAL.KEYS.KEY _whale_rel ].

:end :instance.


; <<>>

:begin :instance.

widget_n1 := intr_noun_word_le &
  [ STEM < "widget" >,
    SYNSEM.LOCAL.KEYS.KEY _widget_rel ].

:end :instance.


; <<>>

:begin :instance.

width_n1 := intr_noun_word_le &
  [ STEM < "width" >,
    SYNSEM.LOCAL.KEYS.KEY _width_rel ].

:end :instance.


; <<>>

:begin :instance.

window_n1 := intr_noun_word_le &
  [ STEM < "window" >,
    SYNSEM.LOCAL.KEYS.KEY _window_rel ].

:end :instance.


; <<>>

:begin :instance.

windsurfing_n1 := intr_noun_word_le &
  [ STEM < "windsurfing" >,
    SYNSEM.LOCAL.KEYS.KEY _windsurfing_rel ].

:end :instance.


; <<>>

:begin :instance.

zeppelin_n1 := intr_noun_word_le &
  [ STEM < "zeppelin" >,
    SYNSEM.LOCAL.KEYS.KEY _zeppelin_rel ].

:end :instance.


; <<>>

:begin :instance.

zoo_n1 := intr_noun_word_le &
  [ STEM < "zoo" >,
    SYNSEM.LOCAL.KEYS.KEY _zoo_rel ].

:end :instance.

; <<>>
; MULTIKEY < "$r" >

:begin :instance.

AGTR_nd := proper_4mle4 &
  [ STEM < "$a", "$g", "$t", "$r" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'AGTR ].

:end :instance.

; <<>>
; MULTIKEY < "$a" >

:begin :instance.

AI_n:= massn_mle1 &
  [ STEM < "$a", "$i" >,
    SYNSEM.LOCAL.KEYS.KEY _ai_rel ].

:end :instance.

; <<>>
; MULTIKEY < "$d" >

:begin :instance.

AKD_nd := proper_3mle3 &
  [ STEM < "$a", "$k", "$d" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'AKD ].

:end :instance.

; <<>>
; MULTIKEY < "$t" >

:begin :instance.

AKDT_nd := proper_4mle4 &
  [ STEM < "$a", "$k", "$d", "$t" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'AKDT ].

:end :instance.

; <<>>
; MULTIKEY < "$r" >

:begin :instance.

AVBR_nd := proper_4mle4 &
  [ STEM < "$a", "$v", "$b", "$r" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'AVBR ].

:end :instance.

; <<>>
; MULTIKEY < "$f" >

:begin :instance.

BASF_nd := proper_4mle4 &
  [ STEM < "$b", "$a", "$s", "$f" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'BASF ].

:end :instance.

; <<>>
; MULTIKEY < "$v" >

:begin :instance.

BIRV_nd := proper_4mle4 &
  [ STEM < "$b", "$i", "$r", "$v" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'BIRV ].

:end :instance.

; <<>>
; MULTIKEY < "$t" >

:begin :instance.

BMFT_nd := proper_4mle4 &
  [ STEM < "$b", "$m", "$f", "$t" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'BMFT ].

:end :instance.

; <<>>
; MULTIKEY < "$c" >

:begin :instance.

DC_nd := proper_mle2 &
  [ STEM < "$d", "$c" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'DC ].

:end :instance.

; <<>>
; MULTIKEY < "$i" >

:begin :instance.

DFKI_nd := proper_4mle4 &
  [ STEM < "$d", "$f", "$k", "$i" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'DFKI ].

:end :instance.

; <<>>
; MULTIKEY < "$s" >

:begin :instance.

DGFS_nd := proper_4mle4 &
  [ STEM < "$d", "$g", "$f", "$s" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'DGFS ].

:end :instance.

; <<>>
; MULTIKEY < "$u" >

:begin :instance.

DKLU_nd := proper_4mle4 &
  [ STEM < "$d", "$k", "$l", "$u" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'DKLU ].

:end :instance.

; <<>>
; MULTIKEY < "$d" >

:begin :instance.

Dmark_n := intr_noun_word_mle1 &
  [ STEM < "$d", "mark" >,
    SYNSEM.LOCAL.KEYS.KEY _deutschmark_rel ].

:end :instance.

; <<>>
; MULTIKEY < "$z" >

:begin :instance.

FAZ_nd := proper_3mle3 &
  [ STEM < "$f", "$a", "$z" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'FAZ ].

:end :instance.

; <<>>
; MULTIKEY < "$e" >

:begin :instance.

FMAE_nd := proper_4mle4 &
  [ STEM < "$f", "$m", "$a", "$e" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'FMAE ].

:end :instance.

; <<>>
; MULTIKEY < "$a" >

:begin :instance.

HKSA_nd := proper_4mle4 &
  [ STEM < "$h", "$k", "$s", "$a" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'HKSA ].

:end :instance.

; <<>>
; MULTIKEY < "$a" >

:begin :instance.

IAA_nd := proper_3mle3 &
  [ STEM < "$i", "$a", "$a" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'IAA ].

:end :instance.

; <<>>
; MULTIKEY < "$m" >

:begin :instance.

IBM_nd := proper_3mle3 &
  [ STEM < "$i", "$b", "$m" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'IBM ].

:end :instance.

; <<>>
; MULTIKEY < "$e" >

:begin :instance.

ICE_n := intr_noun_word_3mle3 &
  [ STEM < "$i", "$c", "$e" >,
    SYNSEM.LOCAL.KEYS.KEY _i_c_e_rel ].

:end :instance.

; <<>>
; MULTIKEY < "$hs" >

:begin :instance.

ICPHS_nd := proper_4mle4 &
  [ STEM < "$i", "$c", "$p", "$hs" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'ICPHS ].

:end :instance.

; <<>>
; MULTIKEY < "$s" >

:begin :instance.

IDS_nd := proper_3mle3 &
  [ STEM < "$i", "$d", "$s" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'IDS ].

:end :instance.

; <<>>
; MULTIKEY < "$h" >

:begin :instance.

LH_nd := proper_mle2 &
  [ STEM < "$l", "$h" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'LH ].

:end :instance.

; <<>>
; MULTIKEY < "$g" >

:begin :instance.

LHFG_nd := proper_4mle4 &
  [ STEM < "$l", "$h", "$f", "$g" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'LHFG ].

:end :instance.

; <<>>
; MULTIKEY < "$v" >

:begin :instance.

LQIV_nd := proper_4mle4 &
  [ STEM < "$l", "$q", "$i", "$v" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'LQIV ].

:end :instance.

; <<>>
; MULTIKEY < "$a" >

:begin :instance.

MKSA_nd := proper_4mle4 &
  [ STEM < "$m", "$k", "$s", "$a" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'MKSA ].

:end :instance.

; <<>>
; MULTIKEY < "$p" >

:begin :instance.

NECP_nd := proper_4mle4 &
  [ STEM < "$n", "$e", "$c", "$p" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'NECP ].

:end :instance.

; <<>>
; MULTIKEY < "$z" >

:begin :instance.

OKBZ_nd := proper_4mle4 &
  [ STEM < "$o", "$k", "$b", "$z" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'OKBZ ].

:end :instance.

; <<>>
; MULTIKEY < "$s" >

:begin :instance.

OPKS_nd := proper_4mle4 &
  [ STEM < "$o", "$p", "$k", "$s" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'OPKS ].

:end :instance.

; <<>>
; MULTIKEY < "$i" >

:begin :instance.

PHI_nd := proper_3mle3 &
  [ STEM < "$p", "$h", "$i" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'PHI ].

:end :instance.

; <<>>
; MULTIKEY < "$o" >

:begin :instance.

RKMO_nd := proper_4mle4 &
  [ STEM < "$r", "$k", "$m", "$o" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'RKMO ].

:end :instance.

; <<>>
; MULTIKEY < "$k" >

:begin :instance.

SGRK_nd := proper_4mle4 &
  [ STEM < "$s", "$g", "$r", "$k" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'SGRK ].

:end :instance.

; <<>>
; MULTIKEY < "darmstadt" >

:begin :instance.

TUDarmstadt_nd := proper_3mle3 &
  [ STEM < "$t", "$u", "darmstadt" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'TUDarmstadt ].

:end :instance.

; <<>>
; MULTIKEY < "wien" >

:begin :instance.

TUWien_nd := proper_3mle3 &
  [ STEM < "$t", "$u", "wien" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'TUWien ].

:end :instance.

; <<>>
; MULTIKEY < "$r" >

:begin :instance.

WDR_nd := proper_3mle3 &
  [ STEM < "$w", "$d", "$r" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'WDR ].

:end :instance.

; <<>>
; MULTIKEY < "$f" >

:begin :instance.

ZDF_nd := proper_3mle3 &
  [ STEM < "$z", "$d", "$f" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'ZDF ].

:end :instance.

; <<>>
; MULTIKEY < "oper" >

:begin :instance.

AlteOper_nd := proper_mle2 &
  [ STEM < "alte", "oper" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'AlteOper ].

:end :instance.

; <<>>

:begin :instance.

Buechner_nd := proper_le &
  [ STEM < "buechner" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Buechner ].

:end :instance.

; <<>>

:begin :instance.

Buehne_nd := proper_le &
  [ STEM < "buehne" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Buehne ].

:end :instance.

; <<>>

:begin :instance.

captain_n := intr_noun_word_le &
  [ STEM < "captain" >,
    SYNSEM.LOCAL.KEYS.KEY _captain_rel ].

:end :instance.

; <<>>
; MULTIKEY < "columbus" >

:begin :instance.

Columbus_Day_hd := holiday_word_mle1 &
  [ STEM < "columbus", "day" >,
    SYNSEM.LOCAL.KEYS.KEY.DAY 'Columbus_Day ].

:end :instance.

; <<>>

:begin :instance.

Duesseldorf_nd := proper_le &
  [ STEM < "duesseldorf" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Duesseldorf ].

:end :instance.

; <<>>

:begin :instance.

Faecherbad_nd := proper_le &
  [ STEM < "faecherbad" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Faecherbad ].

:end :instance.

; <<>>

:begin :instance.

Fuerth_nd := proper_le &
  [ STEM < "fuerth" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Fuerth ].

:end :instance.

; <<>>

:begin :instance.

Frau_ttl := title_le &
  [ STEM < "frau" >,
    SYNSEM.LOCAL.KEYS.KEY _Frau_rel ].

:end :instance.

; <<>>

:begin :instance.

Guettingen_nd := proper_le &
  [ STEM < "guettingen" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Guettingen ].

:end :instance.

; <<>>

:begin :instance.

Guetersloh_nd := proper_le &
  [ STEM < "guetersloh" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Guetersloh ].

:end :instance.

; <<>>

:begin :instance.

Giessen_nd := proper_le &
  [ STEM < "giessen" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Giessen ].

:end :instance.

; <<>>
; MULTIKEY < "marktkirche" >

:begin :instance.

GruebchenanderMarktkirche_nd := proper_4mle4 &
  [ STEM < "gruebchen", "an", "der", "marktkirche" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'GruebchenanderMarktkirche ].

:end :instance.

; <<>>

:begin :instance.

Huelzer_nd := proper_le &
  [ STEM < "huelzer" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Huelzer ].

:end :instance.

; <<>>

:begin :instance.

Halloween_hd := holiday_word_le &
  [ STEM < "halloween" >,
    SYNSEM.LOCAL.KEYS.KEY.DAY 'Halloween ].

:end :instance.

; <<>>

:begin :instance.

Herr_ttl := title_le &
  [ STEM < "herr" >,
    SYNSEM.LOCAL.KEYS.KEY _Herr_rel ].

:end :instance.


; <<>>

:begin :instance.

Juliss_nd := proper_le &
  [ STEM < "juliss" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Juliss ].

:end :instance.

; <<>>

:begin :instance.

Kaefer_nd := proper_le &
  [ STEM < "kaefer" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Kaefer ].

:end :instance.

; <<>>

:begin :instance.

Kuenig_nd := proper_le &
  [ STEM < "kuenig" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Kuenig ].

:end :instance.

; <<>>

:begin :instance.

Kuenigstein_nd := proper_le &
  [ STEM < "kuenigstein" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Kuenigstein ].

:end :instance.

; <<>>

:begin :instance.

Kuepp_nd := proper_le &
  [ STEM < "kuepp" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Kuepp ].

:end :instance.

; <<>>

:begin :instance.

Kuerner_nd := proper_le &
  [ STEM < "kuerner" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Kuerner ].

:end :instance.

; <<>>

:begin :instance.

Lueneburg_nd := proper_le &
  [ STEM < "lueneburg" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Lueneburg ].

:end :instance.

; <<>>

:begin :instance.

Mueckl_nd := proper_le &
  [ STEM < "mueckl" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Mueckl ].

:end :instance.

; <<>>

:begin :instance.

Muenchengladbach_nd := proper_le &
  [ STEM < "muenchengladbach" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Muenchengladbach ].

:end :instance.

; <<>>
; MULTIKEY < "lent" >

:begin :instance.

Monday_before_Lent_hd := holiday_word_3mle2 &
  [ STEM < "monday", "before", "lent" >,
    SYNSEM.LOCAL.KEYS.KEY.DAY 'Monday_before_Lent ].

:end :instance.

; <<>>
; MULTIKEY < "mothers" >

:begin :instance.

Mothers_Day_hd := holiday_word_mle1 &
  [ STEM < "mothers", "day" >,
    SYNSEM.LOCAL.KEYS.KEY.DAY 'Mothers_Day ].

:end :instance.

; <<>>

:begin :instance.

Newcastle_nd := proper_le &
  [ STEM < "newcastle" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Newcastle ].

:end :instance.

; <<>>
; MULTIKEY < "repentance" >

:begin :instance.

Repentance_Day_hd := holiday_word_mle1 &
  [ STEM < "repentance", "day" >,
    SYNSEM.LOCAL.KEYS.KEY.DAY 'Repentance_Day ].

:end :instance.

; <<>>
; MULTIKEY < "gmuend" >

:begin :instance.

SchwaebischGmuend_nd := proper_mle2 &
  [ STEM < "schwaebisch", "gmuend" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'SchwaebischGmuend ].

:end :instance.

; <<>>
; MULTIKEY < "kitchen" >

:begin :instance.

Siam_Kitchen_nd := proper_mle2 &
  [ STEM < "siam", "kitchen" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Siam_Kitchen ].

:end :instance.

; <<>>
; MULTIKEY < "advent" >

:begin :instance.

Sunday_before_Advent_hd := holiday_word_3mle2 &
  [ STEM < "sunday", "before", "advent" >,
    SYNSEM.LOCAL.KEYS.KEY.DAY 'Sunday_before_Advent ].

:end :instance.

; <<>>

:begin :instance.

Thanksgiving_hd := holiday_word_le &
  [ STEM < "thanksgiving" >,
    SYNSEM.LOCAL.KEYS.KEY.DAY 'Thanksgiving ].

:end :instance.

; <<>>

:begin :instance.

Wuellnatz_nd := proper_le &
  [ STEM < "wuellnatz" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Wuellnatz ].

:end :instance.

; <<>>
; MULTIKEY < "whit" >

:begin :instance.

Whit_Sunday_hd := holiday_word_mle1 &
  [ STEM < "whit", "sunday" >,
    SYNSEM.LOCAL.KEYS.KEY.DAY 'Whit_Sunday ].

:end :instance.

; <<>>

:begin :instance.

Wolfenbuettel_nd := proper_le &
  [ STEM < "wolfenbuettel" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Wolfenbuettel ].

:end :instance.

; <<>>

:begin :instance.

abandon_v13 := mv_np*_trans_le &
  [ STEM < "abandon" >,
    SYNSEM.LOCAL.KEYS.KEY _abandon_rel ].

:end :instance.

; <<>>

:begin :instance.

accompany_v13 := mv_np*_trans_le &
  [ STEM < "accompany" >,
    SYNSEM.LOCAL.KEYS.KEY _accompany_rel ].

:end :instance.

; <<>>

:begin :instance.

activate_v13 := mv_np*_trans_le &
  [ STEM < "activate" >,
    SYNSEM.LOCAL.KEYS.KEY _activate_rel ].

:end :instance.

; <<>>

:begin :instance.

adjourn_v13 := mv_np*_trans_le &
  [ STEM < "adjourn" >,
    SYNSEM.LOCAL.KEYS.KEY _adjourn_rel ].

:end :instance.

; <<>>

:begin :instance.

adjust_v13 := mv_np*_trans_le &
  [ STEM < "adjust" >,
    SYNSEM.LOCAL.KEYS.KEY _adjust_rel ].

:end :instance.

; <<>>

:begin :instance.

adjust_to_v1 := mv_to_trans_le &
  [ STEM < "adjust" >,
    SYNSEM.LOCAL.KEYS.KEY _adjust_to_rel ].

:end :instance.


; <<>>

:begin :instance.

advent_n := intr_noun_word_le &
  [ STEM < "advent" >,
    SYNSEM.LOCAL.KEYS.KEY _advent_rel ].

:end :instance.

; <<>>

:begin :instance.

advertise_v13 := mv_np*_trans_le &
  [ STEM < "advertise" >,
    SYNSEM.LOCAL.KEYS.KEY _advertise_rel ].

:end :instance.

; <<>>

:begin :instance.

agency_n := intr_noun_word_le &
  [ STEM < "agency" >,
    SYNSEM.LOCAL.KEYS.KEY _agency_rel ].

:end :instance.

; <<>>

:begin :instance.

agent_n := intr_noun_word_le &
  [ STEM < "agent" >,
    SYNSEM.LOCAL.KEYS.KEY _agent_rel ].

:end :instance.

; <<>>

:begin :instance.

alrighty_excl := disc_adv_le &
  [ STEM < "alrighty" >,
    SYNSEM.LOCAL.KEYS.KEY excl_rel & [ EXCL 'alrighty ] ].

:end :instance.

; <<>>

:begin :instance.

anteroom_n := intr_noun_word_le &
  [ STEM < "anteroom" >,
    SYNSEM.LOCAL.KEYS.KEY _anteroom_rel ].

:end :instance.

; <<>>

:begin :instance.

anyways_scop := adv_word_le &
  [ STEM < "anyways" >,
    SYNSEM.LOCAL.KEYS.KEY _anyways_rel ].

:end :instance.

; <<>>

:begin :instance.

append_v13 := mv_np*_trans_le &
  [ STEM < "append" >,
    SYNSEM.LOCAL.KEYS.KEY _append_rel ].

:end :instance.

; <<>>

:begin :instance.

approval_n3x := noun_cpcomp_word_le &
  [ STEM < "approval" >,
    SYNSEM.LOCAL.KEYS.KEY _approval_rel ].

:end :instance.

; <<>>

:begin :instance.

acquaintance_n := intr_noun_word_le &
  [ STEM < "acquaintance" >,
    SYNSEM.LOCAL.KEYS.KEY _acquaintance_rel ].

:end :instance.

; <<>>

:begin :instance.

astonish_pcv13_1 := mv_np_trans_le &
  [ STEM < "astonish" >,
    SYNSEM.LOCAL.KEYS.KEY _astonish_rel ].

:end :instance.

; <<>>


:begin :instance.

attack_v13 := mv_np*_trans_le &
  [ STEM < "attack" >,
    SYNSEM.LOCAL.KEYS.KEY _attack_rel ].

:end :instance.

; <<>>

:begin :instance.

attendant_n := intr_noun_word_le &
  [ STEM < "attendant" >,
    SYNSEM.LOCAL.KEYS.KEY _attendant_rel ].

:end :instance.

; <<>>

:begin :instance.

ay_excl := disc_adv_le &
  [ STEM < "ay" >,
    SYNSEM.LOCAL.KEYS.KEY excl_rel & [ EXCL 'ay ] ].

:end :instance.

; <<>>

:begin :instance.

bail_out_v1 := mv_prep_particle_np_le &
  [ STEM < "bail" >,
    SYNSEM.LOCAL.KEYS [ KEY _bail_v_rel,
			--COMPKEY _out_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

bail_out_of_v1 := mv_empty_prep_trans_le &
  [ STEM < "bail" >,
    SYNSEM.LOCAL.KEYS [ KEY _bail_out_of_rel,
			--OCOMPKEY _out_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

basic_grad := degree_spec_le &
  [ STEM < "basic" >,
    SYNSEM.LOCAL.KEYS.KEY _basic_rel ].

:end :instance.

; <<>>

:begin :instance.

blow_v3 := mv_unacc_le &
  [ STEM < "blow" >,
    SYNSEM.LOCAL.KEYS.KEY _blow_v_rel ].

:end :instance.

; <<>>

:begin :instance.

blow_out_v1 := mv_prep_particle_np_le &
  [ STEM < "blow" >,
    SYNSEM.LOCAL.KEYS [ KEY _blow_out_rel,
			--COMPKEY _out_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

bore_v13 := mv_np*_trans_le &
  [ STEM < "bore" >,
    SYNSEM.LOCAL.KEYS.KEY _bore_v_rel ].

:end :instance.

; <<>>

:begin :instance.

break_off_v1 := mv_prep_particle_np_le &
  [ STEM < "break" >,
    SYNSEM.LOCAL.KEYS [ KEY _break_off_rel,
			--COMPKEY _off_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

breathing_n := intr_noun_word_le &
  [ STEM < "breathing" >,
    SYNSEM.LOCAL.KEYS.KEY _breathing_rel ].

:end :instance.

; <<>>

:begin :instance.

bring_along_v1 := mv_prep_particle_np_le &
  [ STEM < "bring" >,
    SYNSEM.LOCAL.KEYS [ KEY _bring_along_rel,
			--COMPKEY _along_p_rel_s ] ].

:end :instance.

; <<>>

:begin :instance.

bring_in_v1 := mv_prep_particle_np_le &
  [ STEM < "bring" >,
    SYNSEM.LOCAL.KEYS [ KEY _bring_in_rel,
			--COMPKEY _in_rel_s ] ].

:end :instance.

; <<>>

:begin :instance.

bring_up_v1 := mv_prep_particle_np_le &
  [ STEM < "bring" >,
    SYNSEM.LOCAL.KEYS [ KEY _bring_up_rel,
			--COMPKEY _up_rel ] ].

:end :instance.

; <<>>

:begin :instance.

browse_v13 := mv_np*_trans_le &
  [ STEM < "browse" >,
    SYNSEM.LOCAL.KEYS.KEY _browse_rel ].

:end :instance.

; <<>>

:begin :instance.

build_v13 := mv_np*_trans_le &
  [ STEM < "build" >,
    SYNSEM.LOCAL.KEYS.KEY _build_rel ].

:end :instance.

; <<>>

:begin :instance.

build_up_v1 := mv_prep_particle_np_le &
  [ STEM < "build" >,
    SYNSEM.LOCAL.KEYS [ KEY _build_up_rel,
			--COMPKEY _up_rel ] ].

:end :instance.

; <<>>
; MULTIKEY < "by" >

:begin :instance.

by_chance_scop := adv_word_mle1 &
  [ STEM < "by", "chance" >,
    SYNSEM.LOCAL.KEYS.KEY _by_chance_rel ].

:end :instance.

; <<>>

:begin :instance.

bypass_v13 := mv_np*_trans_le &
  [ STEM < "bypass" >,
    SYNSEM.LOCAL.KEYS.KEY _bypass_v_rel ].

:end :instance.

; <<>>

:begin :instance.

cable_n := intr_noun_word_le &
  [ STEM < "cable" >,
    SYNSEM.LOCAL.KEYS.KEY _cable_rel ].

:end :instance.

; <<>>

:begin :instance.

caricature_n := intr_noun_word_le &
  [ STEM < "caricature" >,
    SYNSEM.LOCAL.KEYS.KEY _caricature_rel ].

:end :instance.

; <<>>

:begin :instance.

catch_up_v1 := mv_particle_le &
  [ STEM < "catch" >,
    SYNSEM.LOCAL.KEYS [ KEY _catch_up_rel,
			--COMPKEY _up_rel ] ].

:end :instance.


; <<>>

:begin :instance.

chain_n := intr_noun_word_le &
  [ STEM < "chain" >,
    SYNSEM.LOCAL.KEYS.KEY _chain_rel ].

:end :instance.

; <<>>

:begin :instance.

characterise_v13 := mv_np*_trans_le &
  [ STEM < "characterise" >,
    SYNSEM.LOCAL.KEYS.KEY _characterise_rel ].

:end :instance.

; <<>>

:begin :instance.

chase_v13 := mv_np*_trans_le &
  [ STEM < "chase" >,
    SYNSEM.LOCAL.KEYS.KEY _chase_v_rel ].

:end :instance.

; <<>>

:begin :instance.

check_in_v1 := mv_prep_particle_np_le &
  [ STEM < "check" >,
    SYNSEM.LOCAL.KEYS [ KEY _check_in_rel,
			--COMPKEY _in_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

check_in_v2 := mv_particle_le &
  [ STEM < "check" >,
    SYNSEM.LOCAL.KEYS [ KEY _check_in_rel,
			--COMPKEY _in_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

check_out_v2 := mv_particle_le &
  [ STEM < "check" >,
    SYNSEM.LOCAL.KEYS [ KEY _check_out_rel,
			--COMPKEY _out_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

check_through_v13 := mv_empty_prep_intrans_le &
  [ STEM < "check" >,
    SYNSEM.LOCAL.KEYS [ KEY _check_through_rel,
			    --COMPKEY _through_rel_s ] ].

:end :instance.

; <<>>
; MULTIKEY < "check" >

:begin :instance.

check_in_a1 := intrans_adj_mle &
  [ STEM < "check", "in" >,
    SYNSEM.LOCAL.KEYS.KEY _check_in_a_rel ].

:end :instance.

; <<>>

:begin :instance.

cheers_gr := disc_adv_le &
  [ STEM < "cheers" >,
    SYNSEM.LOCAL.KEYS.KEY excl_rel & [ EXCL 'cheers ] ].

:end :instance.

; <<>>

:begin :instance.

cheque_n := intr_noun_word_le &
  [ STEM < "cheque" >,
    SYNSEM.LOCAL.KEYS.KEY _cheque_rel ].

:end :instance.

; <<>>

:begin :instance.

chip_in_v1 := mv_prep_particle_np_le &
  [ STEM < "chip" >,
    SYNSEM.LOCAL.KEYS [ KEY _chip_in_rel,
			--COMPKEY _in_rel_s ] ].

:end :instance.

; <<>>

:begin :instance.

circumvent_v13 := mv_np_trans_le &
  [ STEM < "circumvent" >,
    SYNSEM.LOCAL.KEYS.KEY _circumvent_rel ].

:end :instance.

; <<>>

:begin :instance.

cold_n := intr_noun_word_le &
  [ STEM < "cold" >,
    SYNSEM.LOCAL.KEYS.KEY _cold_n_rel ].

:end :instance.

; <<>>

:begin :instance.

collection_n := intr_noun_word_le &
  [ STEM < "collection" >,
    SYNSEM.LOCAL.KEYS.KEY _collection_rel ].

:end :instance.

; <<>>

:begin :instance.

come_about_v1 := mv_particle_le &
  [ STEM < "come" >,
    SYNSEM.LOCAL.KEYS [ KEY _come_about_rel,
			--COMPKEY _about_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

comedy_n := intr_noun_word_le &
  [ STEM < "comedy" >,
    SYNSEM.LOCAL.KEYS.KEY _comedy_rel ].

:end :instance.

; <<>>

:begin :instance.

comfort_n := intr_noun_word_le &
  [ STEM < "comfort" >,
    SYNSEM.LOCAL.KEYS.KEY _comfort_rel ].

:end :instance.

; <<>>

:begin :instance.

comic_n := intr_noun_word_le &
  [ STEM < "comic" >,
    SYNSEM.LOCAL.KEYS.KEY _comic_rel ].

:end :instance.

; <<>>

:begin :instance.

comma_n := intr_noun_word_le &
  [ STEM < "comma" >,
    SYNSEM.LOCAL.KEYS.KEY _comma_rel ].

:end :instance.

; <<>>

:begin :instance.

commute_v13 := mv_np*_trans_le &
  [ STEM < "commute" >,
    SYNSEM.LOCAL.KEYS.KEY _commute_v_rel ].

:end :instance.

; <<>>

:begin :instance.

compilation_n := intr_noun_word_le &
  [ STEM < "compilation" >,
    SYNSEM.LOCAL.KEYS.KEY _compilation_rel ].

:end :instance.

; <<>>

:begin :instance.

complain_pcv13_1 := mv_cp_non_trans_le &
  [ STEM < "complain" >,
    SYNSEM.LOCAL.KEYS.KEY _complain_rel ].

:end :instance.

; <<>>

:begin :instance.

complain_pcv13_2 := mv_empty_prep_intrans_le &
  [ STEM < "complain" >,
    SYNSEM.LOCAL.KEYS [ KEY _complain_about_rel,
			    --COMPKEY _about_rel_s ] ].

:end :instance.

; <<>>

:begin :instance.


complement_v13 := mv_np*_trans_le &
  [ STEM < "complement" >,
    SYNSEM.LOCAL.KEYS.KEY _complement_v_rel ].

:end :instance.

; <<>>

:begin :instance.

concentrate_v13 := mv_empty_prep_intrans_le &
  [ STEM < "concentrate" >,
    SYNSEM.LOCAL.KEYS [ KEY _concentrate_rel,
			    --COMPKEY _on_rel_s ] ].

:end :instance.

; <<>>

:begin :instance.

confess_pcv13_1 := mv_np_trans_le &
  [ STEM < "confess" >,
    SYNSEM.LOCAL.KEYS.KEY _confess_rel ].

:end :instance.

; <<>>

:begin :instance.

confess_pcv13_2 := mv_cp_non_trans_le &
  [ STEM < "confess" >,
    SYNSEM.LOCAL.KEYS.KEY _confess_h_rel ].

:end :instance.

; <<>>

:begin :instance.

confirmation_n3x := noun_cpcomp_word_le &
  [ STEM < "confirmation" >,
    SYNSEM.LOCAL.KEYS.KEY _confirmation_rel ].

:end :instance.

; <<>>

:begin :instance.

confront_v13 := mv_np*_trans_le &
  [ STEM < "confront" >,
    SYNSEM.LOCAL.KEYS.KEY _confront_rel ].

:end :instance.

; <<>>

:begin :instance.

confuse_v13 := mv_np*_trans_le &
  [ STEM < "confuse" >,
    SYNSEM.LOCAL.KEYS.KEY _confuse_rel ].

:end :instance.

; <<>>

:begin :instance.

consent_v13 := mv_empty_prep_intrans_le &
  [ STEM < "consent" >,
    SYNSEM.LOCAL.KEYS [ KEY _consent_to_rel,
			    --COMPKEY _to_rel_s ] ].

:end :instance.

; <<>>

:begin :instance.

construction_n := intr_noun_word_le &
  [ STEM < "construction" >,
    SYNSEM.LOCAL.KEYS.KEY _construction_rel ].

:end :instance.

; <<>>

:begin :instance.

cope_v13 := mv_empty_prep_intrans_le &
  [ STEM < "cope" >,
    SYNSEM.LOCAL.KEYS [ KEY _cope_with_rel,
			    --COMPKEY _with_rel_s ] ].

:end :instance.

; <<>>

:begin :instance.

copy_out_v1 := mv_prep_particle_np_le &
  [ STEM < "copy" >,
    SYNSEM.LOCAL.KEYS [ KEY _copy_out_rel,
			--COMPKEY _out_rel_s ] ].

:end :instance.

; <<>>

:begin :instance.

cover_v13 := mv_np*_trans_le &
  [ STEM < "cover" >,
    SYNSEM.LOCAL.KEYS.KEY _cover_v_rel ].

:end :instance.

; <<>>

:begin :instance.

cover_v14 := mv_empty_prep_intrans_le &
  [ STEM < "cover" >,
    SYNSEM.LOCAL.KEYS [ KEY _cover_for_rel,
			    --COMPKEY _for_rel_s ] ].

:end :instance.

; <<>>

:begin :instance.

crash_v3 := mv_unacc_le &
  [ STEM < "crash" >,
    SYNSEM.LOCAL.KEYS.KEY _crash_v_rel ].

:end :instance.

; <<>>

:begin :instance.

crop_up_v1 := mv_particle_le &
  [ STEM < "crop" >,
    SYNSEM.LOCAL.KEYS [ KEY _crop_up_rel,
			--COMPKEY _up_rel ] ].

:end :instance.


; <<>>

:begin :instance.

crowd_n := intr_noun_word_le &
  [ STEM < "crowd" >,
    SYNSEM.LOCAL.KEYS.KEY _crowd_n_rel ].

:end :instance.

; <<>>

:begin :instance.

customize_v13 := mv_np*_trans_le &
  [ STEM < "customize" >,
    SYNSEM.LOCAL.KEYS.KEY _customize_rel ].

:end :instance.

; <<>>

:begin :instance.

cut_down_v1 := mv_prep_particle_np_le &
  [ STEM < "cut" >,
    SYNSEM.LOCAL.KEYS [ KEY _cut_down_rel,
			--COMPKEY _down_rel_s ] ].

:end :instance.

; <<>>

:begin :instance.

cut_in_v1 := mv_prep_particle_np_le &
  [ STEM < "cut" >,
    SYNSEM.LOCAL.KEYS [ KEY _cut_in_rel,
			--COMPKEY _in_rel_s ] ].

:end :instance.

; <<>>
; MULTIKEY < "easter" >

:begin :instance.

day_before_Easter_hd := holiday_word_3mle2 &
  [ STEM < "day", "before", "easter" >,
    SYNSEM.LOCAL.KEYS.KEY.DAY 'day_before_Easter ].

:end :instance.

; <<>>

:begin :instance.

debate_n := intr_noun_word_le &
  [ STEM < "debate" >,
    SYNSEM.LOCAL.KEYS.KEY _debate_rel ].

:end :instance.

; <<>>

:begin :instance.

deceive_v13 := mv_np*_trans_le &
  [ STEM < "deceive" >,
    SYNSEM.LOCAL.KEYS.KEY _deceive_rel ].

:end :instance.

; <<>>

:begin :instance.

decrease_v3 := mv_unacc_le &
  [ STEM < "decrease" >,
    SYNSEM.LOCAL.KEYS.KEY _decrease_v_rel ].

:end :instance.

; <<>>

:begin :instance.

deign_v1 := mv_subj_equi_le &
  [ STEM < "deign" >,
    SYNSEM.LOCAL.KEYS.KEY _deign_rel ].

:end :instance.


; <<>>

:begin :instance.

deposit_n := intr_noun_word_le &
  [ STEM < "deposit" >,
    SYNSEM.LOCAL.KEYS.KEY _deposit_rel ].

:end :instance.

; <<>>

:begin :instance.

description_n := intr_noun_word_le &
  [ STEM < "description" >,
    SYNSEM.LOCAL.KEYS.KEY _description_rel ].

:end :instance.

; <<>>

:begin :instance.

detect_v13 := mv_np*_trans_le &
  [ STEM < "detect" >,
    SYNSEM.LOCAL.KEYS.KEY _detect_rel ].

:end :instance.

; <<>>

:begin :instance.

discount_n := intr_noun_word_le &
  [ STEM < "discount" >,
    SYNSEM.LOCAL.KEYS.KEY _discount_n_rel ].

:end :instance.

; <<>>

:begin :instance.

dismiss_v13 := mv_np*_trans_le &
  [ STEM < "dismiss" >,
    SYNSEM.LOCAL.KEYS.KEY _dismiss_rel ].

:end :instance.

; <<>>

:begin :instance.

disregard_v13 := mv_np*_trans_le &
  [ STEM < "disregard" >,
    SYNSEM.LOCAL.KEYS.KEY _disregard_rel ].

:end :instance.

; <<>>

:begin :instance.

distinguish_v13 := mv_np*_trans_le &
  [ STEM < "distinguish" >,
    SYNSEM.LOCAL.KEYS.KEY _distinguish_rel ].

:end :instance.

; <<>>

:begin :instance.

distort_v13 := mv_np*_trans_le &
  [ STEM < "distort" >,
    SYNSEM.LOCAL.KEYS.KEY _distort_rel ].

:end :instance.

; <<>>

:begin :instance.

drag_on_v3 := mv_particle_le &
  [ STEM < "drag" >,
    SYNSEM.LOCAL.KEYS [ KEY _drag_on_rel,
			--COMPKEY _on_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

draw_up_v1 := mv_prep_particle_np_le &
  [ STEM < "draw" >,
    SYNSEM.LOCAL.KEYS [ KEY _draw_up_rel,
			--COMPKEY _up_rel ] ].

:end :instance.

; <<>>

:begin :instance.

dreadfully_grad := degree_spec_le &
  [ STEM < "dreadfully" >,
    SYNSEM.LOCAL.KEYS.KEY _dreadfully_grad_rel ].

:end :instance.

; <<>>

:begin :instance.

effectively_scop := adv_word_le &
  [ STEM < "effectively" >,
    SYNSEM.LOCAL.KEYS.KEY _effectively_rel ].

:end :instance.

; <<>>

:begin :instance.

end_up_v3 := mv_particle_le &
  [ STEM < "end" >,
    SYNSEM.LOCAL.KEYS [ KEY _end_up_rel,
			--COMPKEY _up_rel ] ].

:end :instance.


; <<>>

:begin :instance.

ensure_pcv13_1 := mv_cp_non_trans_le &
  [ STEM < "ensure" >,
    SYNSEM.LOCAL.KEYS.KEY _ensure_rel ].

:end :instance.

; <<>>

:begin :instance.

establish_v13 := mv_np*_trans_le &
  [ STEM < "establish" >,
    SYNSEM.LOCAL.KEYS.KEY _establish_rel ].

:end :instance.

; <<>>

:begin :instance.

eurocity_n := intr_noun_word_le &
  [ STEM < "eurocity" >,
    SYNSEM.LOCAL.KEYS.KEY _eurocity_rel ].

:end :instance.

; <<>>

:begin :instance.

excepting_prep := reg_prep_le &
  [ STEM < "excepting" >,
    SYNSEM.LOCAL.KEYS.KEY _excepting_rel ].

:end :instance.

; <<>>

:begin :instance.

excerpt_n := intr_noun_word_le &
  [ STEM < "excerpt" >,
    SYNSEM.LOCAL.KEYS.KEY _excerpt_rel ].

:end :instance.

; <<>>
; MULTIKEY < "me" >

:begin :instance.

excuse_me_excl := disc_adv_mle2 &
  [ STEM < "excuse", "me" >,
    SYNSEM.LOCAL.KEYS.KEY excl_rel & [ EXCL 'excuse_me ] ].

:end :instance.

; <<>>

:begin :instance.

express_v13 := mv_np*_trans_le &
  [ STEM < "express" >,
    SYNSEM.LOCAL.KEYS.KEY _express_v_rel ].

:end :instance.

; <<>>

:begin :instance.

face_up_v1 := mv_particle_pp*_le &
  [ STEM < "face" >,
    SYNSEM.LOCAL.KEYS [ KEY _face_up_rel,
			--COMPKEY _up_rel,
			--OCOMPKEY _to_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

facing_prep := reg_prep_le &
  [ STEM < "facing" >,
    SYNSEM.LOCAL.KEYS.KEY _facing_rel ].

:end :instance.

; <<>>

:begin :instance.

fight_v13 := mv_np*_trans_le &
  [ STEM < "fight" >,
    SYNSEM.LOCAL.KEYS.KEY _fight_v_rel ].

:end :instance.

; <<>>

:begin :instance.

film_n := intr_noun_word_le &
  [ STEM < "film" >,
    SYNSEM.LOCAL.KEYS.KEY _film_rel ].

:end :instance.

; <<>>

:begin :instance.

finalize_v13 := mv_np*_trans_le &
  [ STEM < "finalize" >,
    SYNSEM.LOCAL.KEYS.KEY _finalize_rel ].

:end :instance.

; <<>>

:begin :instance.

flee_v13 := mv_empty_prep_intrans_le &
  [ STEM < "flee" >,
    SYNSEM.LOCAL.KEYS [ KEY _flee_rel,
			    --COMPKEY _from_rel_s ] ].

:end :instance.

; <<>>

:begin :instance.

float_v3 := mv_unacc_le &
  [ STEM < "float" >,
    SYNSEM.LOCAL.KEYS.KEY _float_rel ].

:end :instance.

; <<>>

:begin :instance.

folder_n := intr_noun_word_le &
  [ STEM < "folder" >,
    SYNSEM.LOCAL.KEYS.KEY _folder_rel ].

:end :instance.

; <<>>

:begin :instance.

frankly_scop := adv_word_le &
  [ STEM < "frankly" >,
    SYNSEM.LOCAL.KEYS.KEY _frankly_rel ].

:end :instance.

; <<>>

:begin :instance.

fuck_excl := disc_adv_le &
  [ STEM < "fuck" >,
    SYNSEM.LOCAL.KEYS.KEY excl_rel & [ EXCL 'fuck ] ].

:end :instance.

; <<>>

:begin :instance.

gee_excl := disc_adv_le &
  [ STEM < "gee" >,
    SYNSEM.LOCAL.KEYS.KEY excl_rel & [ EXCL 'gee ] ].

:end :instance.

; <<>>

:begin :instance.

geez_excl := disc_adv_le &
  [ STEM < "geez" >,
    SYNSEM.LOCAL.KEYS.KEY excl_rel & [ EXCL 'geez ] ].

:end :instance.

; <<>>

:begin :instance.

give_up_v1 := mv_prep_particle_np_le &
  [ STEM < "give" >,
    SYNSEM.LOCAL.KEYS [ KEY _give_up_rel,
			--COMPKEY _up_rel ] ].

:end :instance.

; <<>>

:begin :instance.

go_in_v13 := mv_empty_prep_intrans_le &
  [ STEM < "go" >,
    SYNSEM.LOCAL.KEYS [ KEY _go_in_rel,
			    --COMPKEY _in_rel_s ] ].

:end :instance.

; <<>>

:begin :instance.

go_up_v1 := mv_particle_le &
  [ STEM < "go" >,
    SYNSEM.LOCAL.KEYS [ KEY _go_up_rel,
			    --COMPKEY _up_rel ] ].

:end :instance.

; <<>>

:begin :instance.

go_over_v13 := mv_empty_prep_intrans_le &
  [ STEM < "go" >,
    SYNSEM.LOCAL.KEYS [ KEY _go_over_rel,
			    --COMPKEY _over_rel_s ] ].

:end :instance.

; <<>>

:begin :instance.

go_through_v13 := mv_empty_prep_intrans_le &
  [ STEM < "go" >,
    SYNSEM.LOCAL.KEYS [ KEY _go_through_rel,
			    --COMPKEY _through_rel_s ] ].

:end :instance.

; <<>>
; MULTIKEY < "day" >

:begin :instance.

good_day_gr := disc_adv_mle2 &
  [ STEM < "good", "day" >,
    SYNSEM.LOCAL.KEYS.KEY greet_rel & [ EXCL 'good_day ] ].

:end :instance.

; <<>>
; MULTIKEY < "evening" >

:begin :instance.

good_evening_gr := disc_adv_mle2 &
  [ STEM < "good", "evening" >,
    SYNSEM.LOCAL.KEYS.KEY greet_rel & [ EXCL 'good_evening ] ].

:end :instance.

; <<>>
; MULTIKEY < "morning" >

:begin :instance.

good_morning_gr := disc_adv_mle2 &
  [ STEM < "good", "morning" >,
    SYNSEM.LOCAL.KEYS.KEY greet_rel & [ EXCL 'good_morning ] ].

:end :instance.

; <<>>
; MULTIKEY < "afternoon" >

:begin :instance.

good_afternoon_gr := disc_adv_mle2 &
  [ STEM < "good", "afternoon" >,
    SYNSEM.LOCAL.KEYS.KEY greet_rel & [ EXCL 'good_afternoon ] ].

:end :instance.

; <<>>

:begin :instance.

gospel_n := intr_noun_word_le &
  [ STEM < "gospel" >,
    SYNSEM.LOCAL.KEYS.KEY _gospel_rel ].

:end :instance.

; <<>>

:begin :instance.

graduate_v13 := mv_np*_trans_le &
  [ STEM < "graduate" >,
    SYNSEM.LOCAL.KEYS.KEY _graduate_v_rel ].

:end :instance.

; <<>>

:begin :instance.

grant_v13 := mv_np*_trans_le &
  [ STEM < "grant" >,
    SYNSEM.LOCAL.KEYS.KEY _grant_rel ].

:end :instance.

; <<>>

:begin :instance.

guest_n := intr_noun_word_le &
  [ STEM < "guest" >,
    SYNSEM.LOCAL.KEYS.KEY _guest_rel ].

:end :instance.

; <<>>

:begin :instance.

guide_n := intr_noun_word_le &
  [ STEM < "guide" >,
    SYNSEM.LOCAL.KEYS.KEY _guide_rel ].

:end :instance.

; <<>>

:begin :instance.

hack_v13 := mv_np*_trans_le &
  [ STEM < "hack" >,
    SYNSEM.LOCAL.KEYS.KEY _hack_v_rel ].

:end :instance.

; <<>>

:begin :instance.

hack_up_v1 := mv_prep_particle_np_le &
  [ STEM < "hack" >,
    SYNSEM.LOCAL.KEYS [ KEY _hack_up_rel,
			--COMPKEY _up_rel ] ].

:end :instance.

; <<>>

:begin :instance.

hang_v3 := mv_unacc_le &
  [ STEM < "hang" >,
    SYNSEM.LOCAL.KEYS.KEY _hang_rel ].

:end :instance.

; <<>>

:begin :instance.

hash_out_v1 := mv_prep_particle_np_le &
  [ STEM < "hash" >,
    SYNSEM.LOCAL.KEYS [ KEY _hash_out_rel,
			--COMPKEY _out_rel_s ] ].

:end :instance.

; <<>>

:begin :instance.

heavens_excl := disc_adv_le &
  [ STEM < "heavens" >,
    SYNSEM.LOCAL.KEYS.KEY excl_rel & [ EXCL 'heavens ] ].

:end :instance.

; <<>>

:begin :instance.

hide_v13 := mv_np*_trans_le &
  [ STEM < "hide" >,
    SYNSEM.LOCAL.KEYS.KEY _hide_rel ].

:end :instance.

; <<>>

:begin :instance.

highlight_n := intr_noun_word_le &
  [ STEM < "highlight" >,
    SYNSEM.LOCAL.KEYS.KEY _highlight_rel ].

:end :instance.

; <<>>

:begin :instance.

hint_pcv13_1 := mv_cp_non_trans_le &
  [ STEM < "hint" >,
    SYNSEM.LOCAL.KEYS.KEY _hint_v_rel ].

:end :instance.

; <<>>

:begin :instance.

hint_n := intr_noun_word_le &
  [ STEM < "hint" >,
    SYNSEM.LOCAL.KEYS.KEY _hint_n_rel ].

:end :instance.

; <<>>

:begin :instance.

hold_off_v1 := mv_prep_particle_np_le &
  [ STEM < "hold" >,
    SYNSEM.LOCAL.KEYS [ KEY _hold_off_rel,
			--COMPKEY _off_rel_s ] ].

:end :instance.

; <<>>

:begin :instance.

hosers_excl := disc_adv_le &
  [ STEM < "hosers" >,
    SYNSEM.LOCAL.KEYS.KEY excl_rel & [ EXCL 'hosers ] ].

:end :instance.

; <<>>

:begin :instance.

hospitality_n := intr_noun_word_le &
  [ STEM < "hospitality" >,
    SYNSEM.LOCAL.KEYS.KEY _hospitality_rel ].

:end :instance.

; <<>>

:begin :instance.

huh_excl := disc_adv_le &
  [ STEM < "huh" >,
    SYNSEM.LOCAL.KEYS.KEY excl_rel & [ EXCL 'huh ] ].

:end :instance.

; <<>>

:begin :instance.

illustration_n := intr_noun_word_le &
  [ STEM < "illustration" >,
    SYNSEM.LOCAL.KEYS.KEY _illustration_rel ].

:end :instance.

; <<>>

:begin :instance.

illustrator_n := intr_noun_word_le &
  [ STEM < "illustrator" >,
    SYNSEM.LOCAL.KEYS.KEY _illustrator_rel ].

:end :instance.

; <<>>

:begin :instance.

importance_n := intr_noun_word_le &
  [ STEM < "importance" >,
    SYNSEM.LOCAL.KEYS.KEY _importance_rel ].

:end :instance.

; <<>>

:begin :instance.

imposition_n := intr_noun_word_le &
  [ STEM < "imposition" >,
    SYNSEM.LOCAL.KEYS.KEY _imposition_rel ].

:end :instance.

; <<>>

:begin :instance.

improve_v13 := mv_np*_trans_le &
  [ STEM < "improve" >,
    SYNSEM.LOCAL.KEYS.KEY _improve_rel ].

:end :instance.

; <<>>

:begin :instance.

incoming_adj := intrans_adj_le &
  [ STEM < "incoming" >,
    SYNSEM.LOCAL.KEYS.KEY _incoming_rel ].

:end :instance.

; <<>>

:begin :instance.

increase_v3 := mv_unacc_le &
  [ STEM < "increase" >,
    SYNSEM.LOCAL.KEYS.KEY _increase_v_rel ].

:end :instance.

; <<>>

:begin :instance.

indicate_pcv13_1 := mv_np_trans_le &
  [ STEM < "indicate" >,
    SYNSEM.LOCAL.KEYS.KEY _indicate_rel ].

:end :instance.

; <<>>

:begin :instance.

indicate_pcv13_2 := mv_cp_non_trans_le &
  [ STEM < "indicate" >,
    SYNSEM.LOCAL.KEYS.KEY _indicate_h_rel ].

:end :instance.

; <<>>

:begin :instance.

infer_pcv13_1 := mv_cp_non_trans_le &
  [ STEM < "infer" >,
    SYNSEM.LOCAL.KEYS.KEY _infer_rel ].

:end :instance.

; <<>>

:begin :instance.

infrequently_sa := adv_word_le &
  [ STEM < "infrequently" >,
    SYNSEM.LOCAL.KEYS.KEY _infrequently_rel ].

:end :instance.

; <<>>

:begin :instance.

inquire_pcv13_1 := mv_np_trans_le &
  [ STEM < "inquire" >,
    SYNSEM.LOCAL.KEYS.KEY _inquire_rel ].

:end :instance.

; <<>>

:begin :instance.

inquire_pcv13_2 := mv_cp_non_trans_le &
  [ STEM < "inquire" >,
    SYNSEM.LOCAL.KEYS.KEY _inquire_h_rel ].

:end :instance.

; <<>>

:begin :instance.

insinuate_pcv13_1 := mv_np_trans_le &
  [ STEM < "insinuate" >,
    SYNSEM.LOCAL.KEYS.KEY _insinuate_rel ].

:end :instance.

; <<>>

:begin :instance.

insinuate_pcv13_2 := mv_cp_non_trans_le &
  [ STEM < "insinuate" >,
    SYNSEM.LOCAL.KEYS.KEY _insinuate_h_rel ].

:end :instance.

; <<>>

:begin :instance.

interpret_v13 := mv_np*_trans_le &
  [ STEM < "interpret" >,
    SYNSEM.LOCAL.KEYS.KEY _interpret_rel ].

:end :instance.

; <<>>

:begin :instance.

inventor_n := intr_noun_word_le &
  [ STEM < "inventor" >,
    SYNSEM.LOCAL.KEYS.KEY _inventor_rel ].

:end :instance.

; <<>>

:begin :instance.

judge_v13 := mv_np*_trans_le &
  [ STEM < "judge" >,
    SYNSEM.LOCAL.KEYS.KEY _judge_v_rel ].

:end :instance.

; <<>>

:begin :instance.

juggle_around_v1 := mv_prep_particle_np_le &
  [ STEM < "juggle" >,
    SYNSEM.LOCAL.KEYS [ KEY _juggle_around_rel,
			--COMPKEY _around_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

justify_v13 := mv_np*_trans_le &
  [ STEM < "justify" >,
    SYNSEM.LOCAL.KEYS.KEY _justify_rel ].

:end :instance.

; <<>>

:begin :instance.

kick_v13 := mv_np*_trans_le &
  [ STEM < "kick" >,
    SYNSEM.LOCAL.KEYS.KEY _kick_rel ].

:end :instance.

; <<>>

:begin :instance.

kill_v13 := mv_np*_trans_le &
  [ STEM < "kill" >,
    SYNSEM.LOCAL.KEYS.KEY _kill_rel ].

:end :instance.

; <<>>
; MULTIKEY < "kind" >

:begin :instance.

kind_of_scop := adv_word_mle1 &
  [ STEM < "kind", "of" >,
    SYNSEM.LOCAL.KEYS.KEY _kind_of_rel ].

:end :instance.

; <<>>

:begin :instance.

leak_v3 := mv_unacc_le &
  [ STEM < "leak" >,
    SYNSEM.LOCAL.KEYS.KEY _leak_rel ].

:end :instance.

; <<>>

:begin :instance.

leave_off_v1 := mv_prep_particle_np_le &
  [ STEM < "leave" >,
    SYNSEM.LOCAL.KEYS [ KEY _leave_off_rel,
			--COMPKEY _off_rel_s ] ].

:end :instance.

; <<>>

:begin :instance.

leave_open_v1 := mv_particle_np_le &
  [ STEM < "leave" >,
    SYNSEM.LOCAL.KEYS [ KEY _leave_open_rel,
			--COMPKEY _open_rel_s ] ].

:end :instance.

; <<>>

:begin :instance.

listen_in_v13 := mv_particle_le &
  [ STEM < "listen" >,
    SYNSEM.LOCAL.KEYS [ KEY _listen_in_rel,
			    --COMPKEY _in_rel_s ] ].

:end :instance.

; <<>>

:begin :instance.

live_down_v1 := mv_prep_particle_np_le &
  [ STEM < "live" >,
    SYNSEM.LOCAL.KEYS [ KEY _live_down_rel,
			--COMPKEY _down_rel_s ] ].

:end :instance.

; <<>>

:begin :instance.

liver_n := intr_noun_word_le &
  [ STEM < "liver" >,
    SYNSEM.LOCAL.KEYS.KEY _liver_rel ].

:end :instance.

; <<>>

:begin :instance.

look_through_v13 := mv_empty_prep_intrans_le &
  [ STEM < "look" >,
    SYNSEM.LOCAL.KEYS [ KEY _look_through_rel,
			    --COMPKEY _through_rel_s ] ].

:end :instance.

; <<>>

:begin :instance.

loosen_v13 := mv_np*_trans_le &
  [ STEM < "loosen" >,
    SYNSEM.LOCAL.KEYS.KEY _loosen_rel ].

:end :instance.

; <<>>

:begin :instance.

lot_n := intr_noun_word_le &
  [ STEM < "lot" >,
    SYNSEM.LOCAL.KEYS.KEY _lot_rel ].

:end :instance.

; <<>>

:begin :instance.

louse_n := intr_noun_word_le &
  [ STEM < "louse" >,
    SYNSEM.LOCAL.KEYS.KEY _louse_rel ].

:end :instance.

; <<>>

:begin :instance.

luxury_n := intr_noun_word_le &
  [ STEM < "luxury" >,
    SYNSEM.LOCAL.KEYS.KEY _luxury_rel ].

:end :instance.

; <<>>

:begin :instance.

maintain_v13 := mv_np*_trans_le &
  [ STEM < "maintain" >,
    SYNSEM.LOCAL.KEYS.KEY _maintain_rel ].

:end :instance.

; <<>>

:begin :instance.

make_out_v1 := mv_prep_particle_np_le &
  [ STEM < "make" >,
    SYNSEM.LOCAL.KEYS [ KEY _make_out_rel,
			--COMPKEY _out_rel_s ] ].

:end :instance.

; <<>>

:begin :instance.

make_up_v1 := mv_prep_particle_np_le &
  [ STEM < "make" >,
    SYNSEM.LOCAL.KEYS [ KEY _make_up_rel,
			--COMPKEY _up_rel ] ].

:end :instance.

; <<>>

:begin :instance.

make_use_v1 := mv_empty_prep_trans_le &
  [ STEM < "make" >,
    SYNSEM.LOCAL.KEYS [ KEY _make_use_of_rel,
			--COMPKEY _use_rel,
			--OCOMPKEY _of_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

mark_off_v1 := mv_prep_particle_np_le &
  [ STEM < "mark" >,
    SYNSEM.LOCAL.KEYS [ KEY _mark_off_rel,
			--COMPKEY _off_rel_s ] ].

:end :instance.

; <<>>

:begin :instance.

max_scop := adv_word_le &
  [ STEM < "max" >,
    SYNSEM.LOCAL.KEYS.KEY _max_rel ].

:end :instance.

; <<>>

:begin :instance.

merge_v13 := mv_np*_trans_le &
  [ STEM < "merge" >,
    SYNSEM.LOCAL.KEYS.KEY _merge_rel ].

:end :instance.

; <<>>

:begin :instance.

mess_up_v1 := mv_prep_particle_np_le &
  [ STEM < "mess" >,
    SYNSEM.LOCAL.KEYS [ KEY _mess_up_rel,
			--COMPKEY _up_rel ] ].

:end :instance.

; <<>>

:begin :instance.

misinterpret_v13 := mv_np*_trans_le &
  [ STEM < "misinterpret" >,
    SYNSEM.LOCAL.KEYS.KEY _misinterpret_rel ].

:end :instance.

; <<>>

:begin :instance.

mix_v13 := mv_np*_trans_le &
  [ STEM < "mix" >,
    SYNSEM.LOCAL.KEYS.KEY _mix_rel ].

:end :instance.

; <<>>

:begin :instance.

mix_up_v1 := mv_prep_particle_np_le &
  [ STEM < "mix" >,
    SYNSEM.LOCAL.KEYS [ KEY _mix_up_rel,
			--COMPKEY _up_rel ] ].

:end :instance.

; <<>>

:begin :instance.

movie_n := intr_noun_word_le &
  [ STEM < "movie" >,
    SYNSEM.LOCAL.KEYS.KEY _movie_rel ].

:end :instance.

; <<>>
; MULTIKEY < "mud" >

:begin :instance.

mud_flats_n := intr_noun_word_mle1 &
  [ STEM < "mud", "flats" >,
    SYNSEM.LOCAL.KEYS.KEY _mud_flats_rel ].

:end :instance.

; <<>>

:begin :instance.

nah_excl := disc_adv_le &
  [ STEM < "nah" >,
    SYNSEM.LOCAL.KEYS.KEY excl_rel & [ EXCL 'nah ] ].

:end :instance.

; <<>>

:begin :instance.

narrow_down_v1 := mv_prep_particle_np_le &
  [ STEM < "narrow" >,
    SYNSEM.LOCAL.KEYS [ KEY _narrow_x_down_rel,
			--COMPKEY _down_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

narrow_down_v2 := mv_particle_le &
  [ STEM < "narrow" >,
    SYNSEM.LOCAL.KEYS [ KEY _narrow_down_rel,
			--COMPKEY _down_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

notify_v13 := mv_np*_trans_le &
  [ STEM < "notify" >,
    SYNSEM.LOCAL.KEYS.KEY _notify_rel ].

:end :instance.

; <<>>

:begin :instance.

nowadays_ta := adv_word_le &
  [ STEM < "nowadays" >,
    SYNSEM.LOCAL.KEYS.KEY _nowadays_rel ].

:end :instance.

; <<>>
; MULTIKEY < "oh" >

:begin :instance.

oh_yes_excl := disc_adv_mle1 &
  [ STEM < "oh", "yes" >,
    SYNSEM.LOCAL.KEYS.KEY excl_rel & [ EXCL 'oh_yes ] ].

:end :instance.

; <<>>
; MULTIKEY < "doke" >

:begin :instance.

ok_doke_excl := disc_adv_mle2 &
  [ STEM < "ok", "doke" >,
    SYNSEM.LOCAL.KEYS.KEY excl_rel & [ EXCL 'ok_doke ] ].

:end :instance.

; <<>>
; MULTIKEY < "doke" >

:begin :instance.

okey_doke_excl := disc_adv_mle2 &
  [ STEM < "okey", "doke" >,
    SYNSEM.LOCAL.KEYS.KEY excl_rel & [ EXCL 'ok_doke ] ].

:end :instance.

; <<>>

:begin :instance.

omit_v13 := mv_np*_trans_le &
  [ STEM < "omit" >,
    SYNSEM.LOCAL.KEYS.KEY _omit_rel ].

:end :instance.

; <<>>
; MULTIKEY < "hand" >

:begin :instance.

on_the_one_hand_dra := disc_adv_4mle3 &
  [ STEM < "on", "the", "one", "hand" >,
    SYNSEM.LOCAL.KEYS.KEY excl_rel & [ EXCL 'on_the_one_hand ] ].

:end :instance.

; <<>>
; MULTIKEY < "or" >

:begin :instance.

or_whatever_scop := adv_word_mle1 &
  [ STEM < "or", "whatever" >,
    SYNSEM.LOCAL.KEYS.KEY _or_whatever_rel ].

:end :instance.

; <<>>

:begin :instance.

ordinarily_scop := adv_word_le &
  [ STEM < "ordinarily" >,
    SYNSEM.LOCAL.KEYS.KEY _ordinarily_rel ].

:end :instance.

; <<>>

:begin :instance.

overdo_v13 := mv_np*_trans_le &
  [ STEM < "overdo" >,
    SYNSEM.LOCAL.KEYS.KEY _overdo_rel ].

:end :instance.

; <<>>

:begin :instance.

overrun_v13 := mv_np*_trans_le &
  [ STEM < "overrun" >,
    SYNSEM.LOCAL.KEYS.KEY _overrun_v_rel ].

:end :instance.

; <<>>

:begin :instance.

overwork_v13 := mv_np*_trans_le &
  [ STEM < "overwork" >,
    SYNSEM.LOCAL.KEYS.KEY _overwork_v_rel ].

:end :instance.

; <<>>

:begin :instance.

owl_n := intr_noun_word_le &
  [ STEM < "owl" >,
    SYNSEM.LOCAL.KEYS.KEY _owl_rel ].

:end :instance.

; <<>>

:begin :instance.

particulars_n := intr_noun_word_le &
  [ STEM < "particulars" >,
    SYNSEM.LOCAL.KEYS.KEY _particulars_rel ].

:end :instance.


; <<>>

:begin :instance.

perform_v13 := mv_np*_trans_le &
  [ STEM < "perform" >,
    SYNSEM.LOCAL.KEYS.KEY _perform_rel ].

:end :instance.

; <<>>

:begin :instance.

plenty_n := massn_le &
  [ STEM < "plenty" >,
    SYNSEM.LOCAL.KEYS.KEY _plenty_rel ].

:end :instance.

; <<>>

:begin :instance.

porter_n := intr_noun_word_le &
  [ STEM < "porter" >,
    SYNSEM.LOCAL.KEYS.KEY _porter_rel ].

:end :instance.

; <<>>

:begin :instance.

postmortem_n := intr_noun_word_le &
  [ STEM < "postmortem" >,
    SYNSEM.LOCAL.KEYS.KEY _postmortem_rel ].

:end :instance.

; <<>>

:begin :instance.

prejudice_n := massn_le &
  [ STEM < "prejudice" >,
    SYNSEM.LOCAL.KEYS.KEY _prejudice_rel ].

:end :instance.

; <<>>

:begin :instance.

premiere_n := intr_noun_word_le &
  [ STEM < "premiere" >,
    SYNSEM.LOCAL.KEYS.KEY _premiere_rel ].

:end :instance.

; <<>>

:begin :instance.

preoccupy_v23 := mv_np*_trans_le &
  [ STEM < "preoccupy" >,
    SYNSEM.LOCAL.KEYS.KEY _preoccupy_rel ].

:end :instance.

; <<>>

:begin :instance.

profit_v13 := mv_np*_trans_le &
  [ STEM < "profit" >,
    SYNSEM.LOCAL.KEYS.KEY _profit_v_rel ].

:end :instance.

; <<>>

:begin :instance.

prolong_v13 := mv_np*_trans_le &
  [ STEM < "prolong" >,
    SYNSEM.LOCAL.KEYS.KEY _prolong_rel ].

:end :instance.

; <<>>

:begin :instance.

promote_v13 := mv_np*_trans_le &
  [ STEM < "promote" >,
    SYNSEM.LOCAL.KEYS.KEY _promote_rel ].

:end :instance.

; <<>>

:begin :instance.

protect_v13 := mv_np*_trans_le &
  [ STEM < "protect" >,
    SYNSEM.LOCAL.KEYS.KEY _protect_rel ].

:end :instance.

; <<>>

:begin :instance.

pursue_v13 := mv_np*_trans_le &
  [ STEM < "pursue" >,
    SYNSEM.LOCAL.KEYS.KEY _pursue_rel ].

:end :instance.

; <<>>

:begin :instance.

push_off_v1 := mv_prep_particle_np_le &
  [ STEM < "push" >,
    SYNSEM.LOCAL.KEYS [ KEY _push_off_rel,
			--COMPKEY _off_rel_s ] ].

:end :instance.

; <<>>

:begin :instance.

put_together_v1 := mv_particle_np_le &
  [ STEM < "put" >,
    SYNSEM.LOCAL.KEYS [ KEY _put_together_rel,
			--COMPKEY _together_rel_s ] ].

:end :instance.

; <<>>

:begin :instance.

put_up_v1 := mv_prep_particle_np_le &
  [ STEM < "put" >,
    SYNSEM.LOCAL.KEYS [ KEY _put_up_rel,
			--COMPKEY _up_rel ] ].

:end :instance.

; <<>>

:begin :instance.

reassure_v13 := mv_np*_trans_le &
  [ STEM < "reassure" >,
    SYNSEM.LOCAL.KEYS.KEY _reassure_rel ].

:end :instance.

; <<>>

:begin :instance.

receipt_n := intr_noun_word_le &
  [ STEM < "receipt" >,
    SYNSEM.LOCAL.KEYS.KEY _receipt_rel ].

:end :instance.

; <<>>

:begin :instance.

recognize_v13 := mv_np*_trans_le &
  [ STEM < "recognize" >,
    SYNSEM.LOCAL.KEYS.KEY _recognize_rel ].

:end :instance.

; <<>>

:begin :instance.

refer_v13 := mv_empty_prep_intrans_le &
  [ STEM < "refer" >,
    SYNSEM.LOCAL.KEYS [ KEY _refer_rel,
			    --COMPKEY _to_rel_s ] ].

:end :instance.

; <<>>

:begin :instance.

reflect_v13 := mv_np*_trans_le &
  [ STEM < "reflect" >,
    SYNSEM.LOCAL.KEYS.KEY _reflect_rel ].

:end :instance.

; <<>>

:begin :instance.

refrain_v13 := mv_empty_prep_intrans_le &
  [ STEM < "refrain" >,
    SYNSEM.LOCAL.KEYS [ KEY _refrain_from_rel,
			    --COMPKEY _from_rel_s ] ].

:end :instance.

; <<>>

:begin :instance.

refusal_n3x := noun_cpcomp_word_le &
  [ STEM < "refusal" >,
    SYNSEM.LOCAL.KEYS.KEY _refusal_rel ].

:end :instance.

; <<>>

:begin :instance.

register_v13 := mv_np*_trans_le &
  [ STEM < "register" >,
    SYNSEM.LOCAL.KEYS.KEY _register_rel ].

:end :instance.

; <<>>

:begin :instance.

remotely_grad := degree_spec_le &
  [ STEM < "remotely" >,
    SYNSEM.LOCAL.KEYS.KEY _remotely_grad_rel ].

:end :instance.

; <<>>

:begin :instance.

render_v13 := mv_np*_trans_le &
  [ STEM < "render" >,
    SYNSEM.LOCAL.KEYS.KEY _render_rel ].

:end :instance.

; <<>>

:begin :instance.

repay_v13 := mv_np*_trans_le &
  [ STEM < "repay" >,
    SYNSEM.LOCAL.KEYS.KEY _repay_rel ].

:end :instance.

; <<>>

:begin :instance.

represent_v13 := mv_np*_trans_le &
  [ STEM < "represent" >,
    SYNSEM.LOCAL.KEYS.KEY _represent_rel ].

:end :instance.

; <<>>

:begin :instance.

resolve_v13 := mv_np*_trans_le &
  [ STEM < "resolve" >,
    SYNSEM.LOCAL.KEYS.KEY _resolve_rel ].

:end :instance.

; <<>>

:begin :instance.

resume_v13 := mv_np*_trans_le &
  [ STEM < "resume" >,
    SYNSEM.LOCAL.KEYS.KEY _resume_v_rel ].

:end :instance.

; <<>>

:begin :instance.

retreat_v13 := mv_np*_trans_le &
  [ STEM < "retreat" >,
    SYNSEM.LOCAL.KEYS.KEY _retreat_v_rel ].

:end :instance.

; <<>>

:begin :instance.

reveal_v13 := mv_np*_trans_le &
  [ STEM < "reveal" >,
    SYNSEM.LOCAL.KEYS.KEY _reveal_rel ].

:end :instance.

; <<>>

:begin :instance.

revoke_v13 := mv_np*_trans_le &
  [ STEM < "revoke" >,
    SYNSEM.LOCAL.KEYS.KEY _revoke_rel ].

:end :instance.

; <<>>

:begin :instance.

rework_v13 := mv_np*_trans_le &
  [ STEM < "rework" >,
    SYNSEM.LOCAL.KEYS.KEY _rework_rel ].

:end :instance.

; <<>>

:begin :instance.

righto_excl := disc_adv_le &
  [ STEM < "righto" >,
    SYNSEM.LOCAL.KEYS.KEY excl_rel & [ EXCL 'righto ] ].

:end :instance.

; <<>>
; MULTIKEY < "wilco" >

:begin :instance.

roger_wilco_excl := disc_adv_mle2 &
  [ STEM < "roger", "wilco" >,
    SYNSEM.LOCAL.KEYS.KEY excl_rel & [ EXCL 'roger_wilco ] ].

:end :instance.

; <<>>

:begin :instance.

rough_grad := degree_spec_le &
  [ STEM < "rough" >,
    SYNSEM.LOCAL.KEYS.KEY _rough_grad_rel ].

:end :instance.

; <<>>

:begin :instance.

ruin_v13 := mv_np*_trans_le &
  [ STEM < "ruin" >,
    SYNSEM.LOCAL.KEYS.KEY _ruin_v_rel ].

:end :instance.

; <<>>

:begin :instance.

run_over_v3 := mv_particle_le &
  [ STEM < "run" >,
    SYNSEM.LOCAL.KEYS [ KEY _run_over_rel,
			    --COMPKEY _over_rel_s ] ].

:end :instance.

; <<>>

:begin :instance.

sake_n := intr_noun_word_le &
  [ STEM < "sake" >,
    SYNSEM.LOCAL.KEYS.KEY _sake_rel ].

:end :instance.

; <<>>

:begin :instance.

scatter_v13 := mv_np*_trans_le &
  [ STEM < "scatter" >,
    SYNSEM.LOCAL.KEYS.KEY _scatter_rel ].

:end :instance.

; <<>>

:begin :instance.

scrape_together_v1 := mv_particle_np_le &
  [ STEM < "scrape" >,
    SYNSEM.LOCAL.KEYS [ KEY _scrape_together_rel,
			--COMPKEY _together_rel_s ] ].

:end :instance.

; <<>>

:begin :instance.

sell_out_v13 := mv_prep_particle_np_le &
  [ STEM < "sell" >,
    SYNSEM.LOCAL.KEYS [ KEY _sell_out_rel,
			--COMPKEY _out_rel_s ] ].

:end :instance.

; <<>>

:begin :instance.

set_aside_v13 := mv_particle_np_le &
  [ STEM < "set" >,
    SYNSEM.LOCAL.KEYS [ KEY _set_aside_rel,
			--COMPKEY _aside_rel_s ] ].

:end :instance.

; <<>>

:begin :instance.

set_off_v13 := mv_prep_particle_np_le &
  [ STEM < "set" >,
    SYNSEM.LOCAL.KEYS [ KEY _set_off_rel,
			--COMPKEY _off_rel_s ] ].

:end :instance.

; <<>>

:begin :instance.

set_up_v13 := mv_prep_particle_np_le &
  [ STEM < "set" >,
    SYNSEM.LOCAL.KEYS [ KEY _set_up_rel,
			--COMPKEY _up_rel ] ].

:end :instance.

; <<>>

:begin :instance.

shadow_n := intr_noun_word_le &
  [ STEM < "shadow" >,
    SYNSEM.LOCAL.KEYS.KEY _shadow_rel ].

:end :instance.

; <<>>

:begin :instance.

shake_v13 := mv_np*_trans_le &
  [ STEM < "shake" >,
    SYNSEM.LOCAL.KEYS.KEY _shake_rel ].

:end :instance.

; <<>>

:begin :instance.

shooting_n := intr_noun_word_le &
  [ STEM < "shooting" >,
    SYNSEM.LOCAL.KEYS.KEY _shooting_rel ].

:end :instance.

; <<>>

:begin :instance.

shuttle_v13 := mv_np*_trans_le &
  [ STEM < "shuttle" >,
    SYNSEM.LOCAL.KEYS.KEY _shuttle_v_rel ].

:end :instance.

; <<>>

:begin :instance.

smash_v13 := mv_np*_trans_le &
  [ STEM < "smash" >,
    SYNSEM.LOCAL.KEYS.KEY _smash_rel ].

:end :instance.

; <<>>

:begin :instance.

smoker_n := intr_noun_word_le &
  [ STEM < "smoker" >,
    SYNSEM.LOCAL.KEYS.KEY _smoker_rel ].

:end :instance.

; <<>>
; MULTIKEY < "so" >

:begin :instance.

so_so_excl := disc_adv_mle2 &
  [ STEM < "so", "so" >,
    SYNSEM.LOCAL.KEYS.KEY excl_rel & [ EXCL 'so_so ] ].

:end :instance.

; <<>>

:begin :instance.

sow_v13 := mv_np*_trans_le &
  [ STEM < "sow" >,
    SYNSEM.LOCAL.KEYS.KEY _sow_v_rel ].

:end :instance.

; <<>>

:begin :instance.

space_out_v1 := mv_prep_particle_np_le &
  [ STEM < "space" >,
    SYNSEM.LOCAL.KEYS [ KEY _space_out_rel,
			--COMPKEY _out_rel_s ] ].

:end :instance.

; <<>>

:begin :instance.

stand_in_v3 := mv_particle_le &
  [ STEM < "stand" >,
    SYNSEM.LOCAL.KEYS [ KEY _stand_in_rel,
			    --COMPKEY _in_rel_s ] ].

:end :instance.

; <<>>

:begin :instance.

start_off_v1 := mv_prep_particle_np_le &
  [ STEM < "start" >,
    SYNSEM.LOCAL.KEYS [ KEY _start_off_rel,
			--COMPKEY _off_rel_s ] ].

:end :instance.

; <<>>

:begin :instance.

stipulate_pcv13_1 := mv_np_trans_le &
  [ STEM < "stipulate" >,
    SYNSEM.LOCAL.KEYS.KEY _stipulate_rel ].

:end :instance.

; <<>>

:begin :instance.

stipulate_pcv13_2 := mv_cp_non_trans_le &
  [ STEM < "stipulate" >,
    SYNSEM.LOCAL.KEYS.KEY _stipulate_h_rel ].

:end :instance.

; <<>>

:begin :instance.

stock_up_v1 := mv_particle_pp_le &
  [ STEM < "stock" >,
    SYNSEM.LOCAL.KEYS [ KEY _stock_up_rel,
			--COMPKEY _up_rel,
			--OCOMPKEY _with_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

stomach_n := intr_noun_word_le &
  [ STEM < "stomach" >,
    SYNSEM.LOCAL.KEYS.KEY _stomach_rel ].

:end :instance.

; <<>>

:begin :instance.

strive_v13 := mv_empty_prep_intrans_le &
  [ STEM < "strive" >,
    SYNSEM.LOCAL.KEYS [ KEY _strive_for_rel,
			    --COMPKEY _for_rel_s ] ].

:end :instance.

; <<>>

:begin :instance.

stroll_n := intr_noun_word_le &
  [ STEM < "stroll" >,
    SYNSEM.LOCAL.KEYS.KEY _stroll_rel ].

:end :instance.

; <<>>

:begin :instance.

stroll_along_v3 := mv_particle_le &
  [ STEM < "stroll" >,
    SYNSEM.LOCAL.KEYS [ KEY _stroll_along_rel,
			    --COMPKEY _along_p_rel_s ] ].

:end :instance.

; <<>>

:begin :instance.

substitution_n := intr_noun_word_le &
  [ STEM < "substitution" >,
    SYNSEM.LOCAL.KEYS.KEY _substitution_rel ].

:end :instance.

; <<>>

:begin :instance.

suffer_v3 := mv_unacc_le &
  [ STEM < "suffer" >,
    SYNSEM.LOCAL.KEYS.KEY _suffer_rel ].

:end :instance.

; <<>>

:begin :instance.

supervise_v13 := mv_np*_trans_le &
  [ STEM < "supervise" >,
    SYNSEM.LOCAL.KEYS.KEY _supervise_rel ].

:end :instance.

; <<>>

:begin :instance.

supplement_n := intr_noun_word_le &
  [ STEM < "supplement" >,
    SYNSEM.LOCAL.KEYS.KEY _supplement_rel ].

:end :instance.

; <<>>

:begin :instance.

surcharge_n := intr_noun_word_le &
  [ STEM < "surcharge" >,
    SYNSEM.LOCAL.KEYS.KEY _surcharge_rel ].

:end :instance.

; <<>>

:begin :instance.

surprisingly_sa := adv_word_le &
  [ STEM < "surprisingly" >,
    SYNSEM.LOCAL.KEYS.KEY _surprisingly_rel ].

:end :instance.

; <<>>

:begin :instance.

swallow_v13 := mv_np*_trans_le &
  [ STEM < "swallow" >,
    SYNSEM.LOCAL.KEYS.KEY _swallow_v_rel ].

:end :instance.

; <<>>

:begin :instance.

take_along_v1 := mv_prep_particle_np_le &
  [ STEM < "take" >,
    SYNSEM.LOCAL.KEYS [ KEY _take_along_rel,
			--COMPKEY _along_p_rel_s ] ].

:end :instance.

; <<>>

:begin :instance.

take_in_v1 := mv_prep_particle_np_le &
  [ STEM < "take" >,
    SYNSEM.LOCAL.KEYS [ KEY _take_in_rel,
			--COMPKEY _in_rel_s ] ].

:end :instance.

; <<>>

:begin :instance.

take_on_v1 := mv_prep_particle_np_le &
  [ STEM < "take" >,
    SYNSEM.LOCAL.KEYS [ KEY _take_on_rel,
			--COMPKEY _on_rel_s ] ].

:end :instance.

; <<>>

:begin :instance.

tear_apart_v1 := mv_particle_np_le &
  [ STEM < "tear" >,
    SYNSEM.LOCAL.KEYS [ KEY _tear_apart_rel,
			--COMPKEY _apart_isect_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

terrace_n := intr_noun_word_le &
  [ STEM < "terrace" >,
    SYNSEM.LOCAL.KEYS.KEY _terrace_rel ].

:end :instance.

; <<>>
; MULTIKEY < "much" >

:begin :instance.

thank_you_very_much_excl := disc_adv_4mle3 &
  [ STEM < "thank", "you", "very", "much" >,
    SYNSEM.LOCAL.KEYS.KEY excl_rel & [ EXCL 'thank_you_very_much ] ].

:end :instance.

; <<>>
; MULTIKEY < "much" >

:begin :instance.

thanks_so_much_excl := disc_adv_3mle3 &
  [ STEM < "thanks", "so", "much" >,
    SYNSEM.LOCAL.KEYS.KEY excl_rel & [ EXCL 'thanks_so_much ] ].

:end :instance.

; <<>>

:begin :instance.

think_up_v1 := mv_prep_particle_np_le &
  [ STEM < "think" >,
    SYNSEM.LOCAL.KEYS [ KEY _think_up_rel,
			--COMPKEY _up_rel ] ].

:end :instance.

; <<>>

:begin :instance.

tie_on_v1 := mv_prep_particle_np_le &
  [ STEM < "tie" >,
    SYNSEM.LOCAL.KEYS [ KEY _tie_on_rel,
			--COMPKEY _on_rel_s ] ].

:end :instance.

; <<>>

:begin :instance.

torment_v13 := mv_np*_trans_le &
  [ STEM < "torment" >,
    SYNSEM.LOCAL.KEYS.KEY _torment_v_rel ].

:end :instance.

; <<>>

:begin :instance.

translate_v13 := mv_np*_trans_le &
  [ STEM < "translate" >,
    SYNSEM.LOCAL.KEYS.KEY _translate_rel ].

:end :instance.

; <<>>

:begin :instance.

turn_up_v3 := mv_particle_le &
  [ STEM < "turn" >,
    SYNSEM.LOCAL.KEYS [ KEY _turn_up_rel,
			    --COMPKEY _up_rel ] ].

:end :instance.

; <<>>

:begin :instance.

twist_v13 := mv_np*_trans_le &
  [ STEM < "twist" >,
    SYNSEM.LOCAL.KEYS.KEY _twist_v_rel ].

:end :instance.

; <<>>

:begin :instance.

use_up_v1 := mv_prep_particle_np_le &
  [ STEM < "use" >,
    SYNSEM.LOCAL.KEYS [ KEY _use_up_rel,
			--COMPKEY _up_rel ] ].

:end :instance.

; <<>>

:begin :instance.

value_n := intr_noun_word_le &
  [ STEM < "value" >,
    SYNSEM.LOCAL.KEYS.KEY _value_rel ].

:end :instance.

; <<>>

:begin :instance.

vaudeville_n := intr_noun_word_le &
  [ STEM < "vaudeville" >,
    SYNSEM.LOCAL.KEYS.KEY _vaudeville_rel ].

:end :instance.

; <<>>

:begin :instance.

violate_v13 := mv_np*_trans_le &
  [ STEM < "violate" >,
    SYNSEM.LOCAL.KEYS.KEY _violate_rel ].

:end :instance.

; <<>>

:begin :instance.

vitally_grad := degree_spec_le &
  [ STEM < "vitally" >,
    SYNSEM.LOCAL.KEYS.KEY _vitally_rel ].

:end :instance.

; <<>>

:begin :instance.

watch_out_v1 := mv_particle_pp_le &
  [ STEM < "watch" >,
    SYNSEM.LOCAL.KEYS [ KEY _watch_out_rel,
			--COMPKEY _out_rel_s,
			--OCOMPKEY _for_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

wedge_in_v1 := mv_prep_particle_np_le &
  [ STEM < "wedge" >,
    SYNSEM.LOCAL.KEYS [ KEY _wedge_in_rel,
			--COMPKEY _in_rel_s ] ].

:end :instance.

; <<>>

:begin :instance.

willingness_n3x := noun_cpcomp_word_le &
  [ STEM < "willingness" >,
    SYNSEM.LOCAL.KEYS.KEY _willingness_rel ].

:end :instance.

; <<>>

:begin :instance.

withdraw_v13 := mv_np*_trans_le &
  [ STEM < "withdraw" >,
    SYNSEM.LOCAL.KEYS.KEY _withdraw_rel ].

:end :instance.

; <<>>

:begin :instance.

wow_excl := disc_adv_le &
  [ STEM < "wow" >,
    SYNSEM.LOCAL.KEYS.KEY excl_rel & [ EXCL 'wow ] ].

:end :instance.

; <<>>

:begin :instance.

wrangling_n := intr_noun_word_le &
  [ STEM < "wrangling" >,
    SYNSEM.LOCAL.KEYS.KEY _wrangling_rel ].

:end :instance.

; <<>>

:begin :instance.

yup_excl := disc_adv_le &
  [ STEM < "yup" >,
    SYNSEM.LOCAL.KEYS.KEY excl_rel & [ EXCL 'yup ] ].

:end :instance.

; <<>>

:begin :instance.

zone_n := intr_noun_word_le &
  [ STEM < "zone" >,
    SYNSEM.LOCAL.KEYS.KEY _zone_rel ].

:end :instance.

; <<>>

:begin :instance.

Brasilian_isect := intrans_adj_le &
  [ STEM < "brasilian" >,
    SYNSEM.LOCAL.KEYS.KEY _brasilian_rel ].

:end :instance.

; <<>>

:begin :instance.

abnormal_isect := intrans_adj_le &
  [ STEM < "abnormal" >,
    SYNSEM.LOCAL.KEYS.KEY _abnormal_rel ].

:end :instance.


; <<>>

:begin :instance.

abnormally_adv := adv_word_le &
  [ STEM < "abnormally" >,
    SYNSEM.LOCAL.KEYS.KEY _abnormally_rel ].

:end :instance.


; <<>>

:begin :instance.

additionally_isect := int_vp_adv_word_le &
  [ STEM < "additionally" >,
    SYNSEM.LOCAL.KEYS.KEY _additionally_rel ].

:end :instance.

; <<>>

:begin :instance.

adequate_isect := intrans_adj_le &
  [ STEM < "adequate" >,
    SYNSEM.LOCAL.KEYS.KEY _adequate_rel ].

:end :instance.

; <<>>

:begin :instance.

adequately_isect := int_vp_adv_word_le &
  [ STEM < "adequately" >,
    SYNSEM.LOCAL.KEYS.KEY _adequately_rel ].

:end :instance.

; <<>>

:begin :instance.

administrative_isect := intrans_adj_le &
  [ STEM < "administrative" >,
    SYNSEM.LOCAL.KEYS.KEY _administrative_rel ].

:end :instance.

; <<>>

:begin :instance.

allotted_isect := intrans_adj_le &
  [ STEM < "allotted" >,
    SYNSEM.LOCAL.KEYS.KEY _allotted_rel ].

:end :instance.

; <<>>

:begin :instance.

allright_isect := intrans_adj_le &
  [ STEM < "allright" >,
    SYNSEM.LOCAL.KEYS.KEY _allright_rel ].

:end :instance.

; <<>>

:begin :instance.

amiable_isect := intrans_adj_le &
  [ STEM < "amiable" >,
    SYNSEM.LOCAL.KEYS.KEY _amiable_rel ].

:end :instance.

; <<>>

:begin :instance.

amiably_isect := int_vp_adv_word_le &
  [ STEM < "amiably" >,
    SYNSEM.LOCAL.KEYS.KEY _amiably_rel ].

:end :instance.

; <<>>

:begin :instance.

amusing_isect := intrans_adj_le &
  [ STEM < "amusing" >,
    SYNSEM.LOCAL.KEYS.KEY _amusing_rel ].

:end :instance.

; <<>>

:begin :instance.

annually_isect := int_vp_adv_word_le &
  [ STEM < "annually" >,
    SYNSEM.LOCAL.KEYS.KEY _annually_rel ].

:end :instance.

; <<>>

:begin :instance.

answering_isect := intrans_adj_le &
  [ STEM < "answering" >,
    SYNSEM.LOCAL.KEYS.KEY _answering_rel ].

:end :instance.

; <<>>

:begin :instance.

apparent_isect := intrans_adj_le &
  [ STEM < "apparent" >,
    SYNSEM.LOCAL.KEYS.KEY _apparent_rel ].

:end :instance.

; <<>>

:begin :instance.

appropriately_isect := int_vp_adv_word_le &
  [ STEM < "appropriately" >,
    SYNSEM.LOCAL.KEYS.KEY _appropriately_rel ].

:end :instance.

; <<>>

:begin :instance.

arbitrarily_isect := int_vp_adv_word_le &
  [ STEM < "arbitrarily" >,
    SYNSEM.LOCAL.KEYS.KEY _arbitrarily_rel ].

:end :instance.

; <<>>

:begin :instance.

athletic_isect := intrans_adj_le &
  [ STEM < "athletic" >,
    SYNSEM.LOCAL.KEYS.KEY _athletic_rel ].

:end :instance.

; <<>>

:begin :instance.

attractive_isect := intrans_adj_le &
  [ STEM < "attractive" >,
    SYNSEM.LOCAL.KEYS.KEY _attractive_rel ].

:end :instance.

; <<>>

:begin :instance.

awful_isect := intrans_adj_le &
  [ STEM < "awful" >,
    SYNSEM.LOCAL.KEYS.KEY _awful_rel ].

:end :instance.

; <<>>

:begin :instance.

awry_isect := intrans_adj_le &
  [ STEM < "awry" >,
    SYNSEM.LOCAL.KEYS.KEY _awry_rel ].

:end :instance.

; <<>>

:begin :instance.

baroque_isect := intrans_adj_le &
  [ STEM < "baroque" >,
    SYNSEM.LOCAL.KEYS.KEY _baroque_isect_rel ].

:end :instance.

; <<>>

:begin :instance.

befitting_isect := intrans_adj_le &
  [ STEM < "befitting" >,
    SYNSEM.LOCAL.KEYS.KEY _befitting_rel ].

:end :instance.

; <<>>

:begin :instance.

bimonthly_isect := intrans_adj_le &
  [ STEM < "bimonthly" >,
    SYNSEM.LOCAL.KEYS.KEY _bimonthly_rel ].

:end :instance.

; <<>>

:begin :instance.

bimonthly_adv := adv_word_le &
  [ STEM < "bimonthly" >,
    SYNSEM.LOCAL.KEYS.KEY _bimonthly_adv_rel ].

:end :instance.

; <<>>

:begin :instance.

biological_isect := intrans_adj_le &
  [ STEM < "biological" >,
    SYNSEM.LOCAL.KEYS.KEY _biological_rel ].

:end :instance.

; <<>>

:begin :instance.

bitter_isect := intrans_adj_le &
  [ STEM < "bitter" >,
    SYNSEM.LOCAL.KEYS.KEY _bitter_rel ].

:end :instance.

; <<>>

:begin :instance.

black_isect := intrans_adj_le &
  [ STEM < "black" >,
    SYNSEM.LOCAL.KEYS.KEY _black_rel ].

:end :instance.

; <<>>

:begin :instance.

blind_isect := intrans_adj_le &
  [ STEM < "blind" >,
    SYNSEM.LOCAL.KEYS.KEY _blind_rel ].

:end :instance.

; <<>>

:begin :instance.

blue_isect := intrans_adj_le &
  [ STEM < "blue" >,
    SYNSEM.LOCAL.KEYS.KEY _blue_rel ].

:end :instance.

; <<>>

:begin :instance.

boring_isect := intrans_adj_le &
  [ STEM < "boring" >,
    SYNSEM.LOCAL.KEYS.KEY _boring_rel ].

:end :instance.

; <<>>

:begin :instance.

borne_isect := intrans_adj_le &
  [ STEM < "borne" >,
    SYNSEM.LOCAL.KEYS.KEY _borne_rel ].

:end :instance.

; <<>>

:begin :instance.

bright_isect := intrans_adj_le &
  [ STEM < "bright" >,
    SYNSEM.LOCAL.KEYS.KEY _bright_rel ].

:end :instance.

; <<>>

:begin :instance.

brilliant_isect := intrans_adj_le &
  [ STEM < "brilliant" >,
    SYNSEM.LOCAL.KEYS.KEY _brilliant_rel ].

:end :instance.

; <<>>

:begin :instance.

broken_isect := intrans_adj_le &
  [ STEM < "broken" >,
    SYNSEM.LOCAL.KEYS.KEY _broken_rel ].

:end :instance.

; <<>>

:begin :instance.

catastrophic_isect := intrans_adj_le &
  [ STEM < "catastrophic" >,
    SYNSEM.LOCAL.KEYS.KEY _catastrophic_rel ].

:end :instance.

; <<>>

:begin :instance.

catholic_isect := intrans_adj_le &
  [ STEM < "catholic" >,
    SYNSEM.LOCAL.KEYS.KEY _catholic_rel ].

:end :instance.

; <<>>

:begin :instance.

changeable_isect := intrans_adj_le &
  [ STEM < "changeable" >,
    SYNSEM.LOCAL.KEYS.KEY _changeable_rel ].

:end :instance.

; <<>>

:begin :instance.

characteristic_isect := intrans_adj_le &
  [ STEM < "characteristic" >,
    SYNSEM.LOCAL.KEYS.KEY _characteristic_rel ].

:end :instance.

; <<>>

:begin :instance.

classical_isect := intrans_adj_le &
  [ STEM < "classical" >,
    SYNSEM.LOCAL.KEYS.KEY _classical_rel ].

:end :instance.

; <<>>

:begin :instance.

clean_isect := intrans_adj_le &
  [ STEM < "clean" >,
    SYNSEM.LOCAL.KEYS.KEY _clean_adj_rel ].

:end :instance.

; <<>>

:begin :instance.

closed_isect := intrans_adj_le &
  [ STEM < "closed" >,
    SYNSEM.LOCAL.KEYS.KEY _closed_rel ].

:end :instance.


; <<>>

:begin :instance.

colorful_isect := intrans_adj_le &
  [ STEM < "colorful" >,
    SYNSEM.LOCAL.KEYS.KEY _colorful_rel ].

:end :instance.

; <<>>

:begin :instance.

compact_isect := intrans_adj_le &
  [ STEM < "compact" >,
    SYNSEM.LOCAL.KEYS.KEY _compact_rel ].

:end :instance.

; <<>>

:begin :instance.

comparative_isect := intrans_adj_le &
  [ STEM < "comparative" >,
    SYNSEM.LOCAL.KEYS.KEY _comparative_rel ].

:end :instance.

; <<>>

:begin :instance.

compatible_isect := intrans_adj_le &
  [ STEM < "compatible" >,
    SYNSEM.LOCAL.KEYS.KEY _compatible_rel ].

:end :instance.

; <<>>

:begin :instance.

complicated_isect := intrans_adj_le &
  [ STEM < "complicated" >,
    SYNSEM.LOCAL.KEYS.KEY _complicated_rel ].

:end :instance.

; <<>>

:begin :instance.

concentrated_isect := intrans_adj_le &
  [ STEM < "concentrated" >,
    SYNSEM.LOCAL.KEYS.KEY _concentrated_rel ].

:end :instance.

; <<>>

:begin :instance.

concretely_isect := int_vp_adv_word_le &
  [ STEM < "concretely" >,
    SYNSEM.LOCAL.KEYS.KEY _concretely_rel ].

:end :instance.

; <<>>

:begin :instance.

conflicting_isect := intrans_adj_le &
  [ STEM < "conflicting" >,
    SYNSEM.LOCAL.KEYS.KEY _conflicting_rel ].

:end :instance.

; <<>>

:begin :instance.

confused_isect := intrans_adj_le &
  [ STEM < "confused" >,
    SYNSEM.LOCAL.KEYS.KEY _confused_rel ].

:end :instance.

; <<>>

:begin :instance.

confusing_isect := intrans_adj_le &
  [ STEM < "confusing" >,
    SYNSEM.LOCAL.KEYS.KEY _confusing_rel ].

:end :instance.

; <<>>

:begin :instance.

consecutively_isect := int_vp_adv_word_le &
  [ STEM < "consecutively" >,
    SYNSEM.LOCAL.KEYS.KEY _consecutively_rel ].

:end :instance.

; <<>>

:begin :instance.

considerable_isect := intrans_adj_le &
  [ STEM < "considerable" >,
    SYNSEM.LOCAL.KEYS.KEY _considerable_rel ].

:end :instance.

; <<>>

:begin :instance.

consistent_isect := intrans_adj_le &
  [ STEM < "consistent" >,
    SYNSEM.LOCAL.KEYS.KEY _consistent_rel ].

:end :instance.

; <<>>

:begin :instance.

consistently_isect := int_vp_adv_word_le &
  [ STEM < "consistently" >,
    SYNSEM.LOCAL.KEYS.KEY _consistently_rel ].

:end :instance.

; <<>>

:begin :instance.

constructive_isect := intrans_adj_le &
  [ STEM < "constructive" >,
    SYNSEM.LOCAL.KEYS.KEY _constructive_rel ].

:end :instance.

; <<>>

:begin :instance.

contemplative_isect := intrans_adj_le &
  [ STEM < "contemplative" >,
    SYNSEM.LOCAL.KEYS.KEY _contemplative_rel ].

:end :instance.

; <<>>

:begin :instance.

contemporary_isect := intrans_adj_le &
  [ STEM < "contemporary" >,
    SYNSEM.LOCAL.KEYS.KEY _contemporary_rel ].

:end :instance.

; <<>>

:begin :instance.

continuously_isect := int_vp_adv_word_le &
  [ STEM < "continuously" >,
    SYNSEM.LOCAL.KEYS.KEY _continuously_rel ].

:end :instance.

; <<>>

:begin :instance.

cooperative_isect := intrans_adj_le &
  [ STEM < "cooperative" >,
    SYNSEM.LOCAL.KEYS.KEY _cooperative_rel ].

:end :instance.

; <<>>

:begin :instance.

copious_isect := intrans_adj_le &
  [ STEM < "copious" >,
    SYNSEM.LOCAL.KEYS.KEY _copious_rel ].

:end :instance.

; <<>>

:begin :instance.

corporate_isect := intrans_adj_le &
  [ STEM < "corporate" >,
    SYNSEM.LOCAL.KEYS.KEY _corporate_rel ].

:end :instance.

; <<>>

:begin :instance.

corresponding_isect := intrans_adj_le &
  [ STEM < "corresponding" >,
    SYNSEM.LOCAL.KEYS.KEY _corresponding_rel ].

:end :instance.

; <<>>
; MULTIKEY < "covered" >

:begin :instance.

covered_up_isect := intrans_adj_mle &
  [ STEM < "covered", "up" >,
    SYNSEM.LOCAL.KEYS.KEY _covered_up_rel ].

:end :instance.

; <<>>

:begin :instance.

critical_isect := intrans_adj_le &
  [ STEM < "critical" >,
    SYNSEM.LOCAL.KEYS.KEY _critical_rel ].

:end :instance.

; <<>>

:begin :instance.

crosswise_isect := intrans_adj_le &
  [ STEM < "crosswise" >,
    SYNSEM.LOCAL.KEYS.KEY _crosswise_rel ].

:end :instance.

; <<>>

:begin :instance.

crowded_isect := intrans_adj_le &
  [ STEM < "crowded" >,
    SYNSEM.LOCAL.KEYS.KEY _crowded_rel ].

:end :instance.

; <<>>

:begin :instance.

crucial_pcisect := reg_adj_atrans_cp_le &
  [ STEM < "crucial" >,
    SYNSEM.LOCAL.KEYS.KEY _crucial_rel ].

:end :instance.

; <<>>

:begin :instance.

crucially_pcisect := int_vp_adv_word_le &
  [ STEM < "crucially" >,
    SYNSEM.LOCAL.KEYS.KEY _crucially_rel ].

:end :instance.

; <<>>

:begin :instance.

cultural_isect := intrans_adj_le &
  [ STEM < "cultural" >,
    SYNSEM.LOCAL.KEYS.KEY _cultural_rel ].

:end :instance.

; <<>>

:begin :instance.

culturally_isect := int_vp_adv_word_le &
  [ STEM < "culturally" >,
    SYNSEM.LOCAL.KEYS.KEY _culturally_rel ].

:end :instance.

; <<>>

:begin :instance.

currently_isect := int_vp_adv_word_le &
  [ STEM < "currently" >,
    SYNSEM.LOCAL.KEYS.KEY _currently_rel ].

:end :instance.

; <<>>

:begin :instance.

dark_isect := intrans_adj_le &
  [ STEM < "dark" >,
    SYNSEM.LOCAL.KEYS.KEY _dark_rel ].

:end :instance.

; <<>>

:begin :instance.

deadly_isect := intrans_adj_le &
  [ STEM < "deadly" >,
    SYNSEM.LOCAL.KEYS.KEY _deadly_rel ].

:end :instance.

; <<>>

:begin :instance.

deceivingly_isect := int_vp_adv_word_le &
  [ STEM < "deceivingly" >,
    SYNSEM.LOCAL.KEYS.KEY _deceivingly_rel ].

:end :instance.

; <<>>

:begin :instance.

decent_isect := intrans_adj_le &
  [ STEM < "decent" >,
    SYNSEM.LOCAL.KEYS.KEY _decent_isect_rel ].

:end :instance.

; <<>>

:begin :instance.

delicious_isect := intrans_adj_le &
  [ STEM < "delicious" >,
    SYNSEM.LOCAL.KEYS.KEY _delicious_rel ].

:end :instance.

; <<>>

:begin :instance.

determined_isect := intrans_adj_le &
  [ STEM < "determined" >,
    SYNSEM.LOCAL.KEYS.KEY _determined_rel ].

:end :instance.

; <<>>

:begin :instance.

dismissive_isect := intrans_adj_le &
  [ STEM < "dismissive" >,
    SYNSEM.LOCAL.KEYS.KEY _dismissive_rel ].

:end :instance.

; <<>>

:begin :instance.

dissatisfied_isect := intrans_adj_le &
  [ STEM < "dissatisfied" >,
    SYNSEM.LOCAL.KEYS.KEY _dissatisfied_rel ].

:end :instance.

; <<>>

:begin :instance.

disturbed_isect := intrans_adj_le &
  [ STEM < "disturbed" >,
    SYNSEM.LOCAL.KEYS.KEY _disturbed_rel ].

:end :instance.

; <<>>

:begin :instance.

domestic_isect := intrans_adj_le &
  [ STEM < "domestic" >,
    SYNSEM.LOCAL.KEYS.KEY _domestic_rel ].

:end :instance.

; <<>>

:begin :instance.

downstairs_isect := intrans_adj_le &
  [ STEM < "downstairs" >,
    SYNSEM.LOCAL.KEYS.KEY _downstairs_rel ].

:end :instance.

; <<>>

:begin :instance.

downtown_isect := intrans_adj_le &
  [ STEM < "downtown" >,
    SYNSEM.LOCAL.KEYS.KEY _downtown_rel ].

:end :instance.

; <<>>

:begin :instance.

dreadful_pcisect := reg_adj_atrans_that_cp_le &
  [ STEM < "dreadful" >,
    SYNSEM.LOCAL.KEYS.KEY _dreadful_rel ].

:end :instance.

; <<>>

:begin :instance.

dry_isect := intrans_adj_le &
  [ STEM < "dry" >,
    SYNSEM.LOCAL.KEYS.KEY _dry_adj_rel ].

:end :instance.

; <<>>

:begin :instance.

dull_isect := intrans_adj_le &
  [ STEM < "dull" >,
    SYNSEM.LOCAL.KEYS.KEY _dull_rel ].

:end :instance.

; <<>>

:begin :instance.

eastern_isect := intrans_adj_le &
  [ STEM < "eastern" >,
    SYNSEM.LOCAL.KEYS.KEY _eastern_rel ].

:end :instance.

; <<>>

:begin :instance.

ecological_isect := intrans_adj_le &
  [ STEM < "ecological" >,
    SYNSEM.LOCAL.KEYS.KEY _ecological_rel ].

:end :instance.

; <<>>

:begin :instance.

edible_isect := intrans_adj_le &
  [ STEM < "edible" >,
    SYNSEM.LOCAL.KEYS.KEY _edible_rel ].

:end :instance.

; <<>>

:begin :instance.

egoistic_isect := intrans_adj_le &
  [ STEM < "egoistic" >,
    SYNSEM.LOCAL.KEYS.KEY _egoistic_rel ].

:end :instance.

; <<>>

:begin :instance.

elegant_isect := intrans_adj_le &
  [ STEM < "elegant" >,
    SYNSEM.LOCAL.KEYS.KEY _elegant_rel ].

:end :instance.

; <<>>

:begin :instance.

elementary_isect := intrans_adj_le &
  [ STEM < "elementary" >,
    SYNSEM.LOCAL.KEYS.KEY _elementary_rel ].

:end :instance.

; <<>>

:begin :instance.

else_isect := intrans_adj_le &
  [ STEM < "else" >,
    SYNSEM.LOCAL.KEYS.KEY _else_rel ].

:end :instance.

; <<>>

:begin :instance.

elsewhere_isect := intrans_adj_le &
  [ STEM < "elsewhere" >,
    SYNSEM.LOCAL.KEYS.KEY _elsewhere_rel ].

:end :instance.

; <<>>

:begin :instance.

encouraging_pcisect := reg_adj_atrans_that_cp_le &
  [ STEM < "encouraging" >,
    SYNSEM.LOCAL.KEYS.KEY _encouraging_rel ].

:end :instance.

; <<>>

:begin :instance.

enthusiastic_isect := intrans_adj_le &
  [ STEM < "enthusiastic" >,
    SYNSEM.LOCAL.KEYS.KEY _enthusiastic_rel ].

:end :instance.

; <<>>

:begin :instance.

enticing_isect := intrans_adj_le &
  [ STEM < "enticing" >,
    SYNSEM.LOCAL.KEYS.KEY _enticing_rel ].

:end :instance.

; <<>>

:begin :instance.

environmental_isect := intrans_adj_le &
  [ STEM < "environmental" >,
    SYNSEM.LOCAL.KEYS.KEY _environmental_rel ].

:end :instance.

; <<>>

:begin :instance.

euphoric_isect := intrans_adj_le &
  [ STEM < "euphoric" >,
    SYNSEM.LOCAL.KEYS.KEY _euphoric_rel ].

:end :instance.

; <<>>

:begin :instance.

everyday_isect := intrans_adj_le &
  [ STEM < "everyday" >,
    SYNSEM.LOCAL.KEYS.KEY _everyday_rel ].

:end :instance.

; <<>>

:begin :instance.

excellently_isect := int_vp_adv_word_le &
  [ STEM < "excellently" >,
    SYNSEM.LOCAL.KEYS.KEY _excellently_rel ].

:end :instance.

; <<>>

:begin :instance.

exceptional_isect := intrans_adj_le &
  [ STEM < "exceptional" >,
    SYNSEM.LOCAL.KEYS.KEY _exceptional_rel ].

:end :instance.

; <<>>

:begin :instance.

exciting_isect := intrans_adj_le &
  [ STEM < "exciting" >,
    SYNSEM.LOCAL.KEYS.KEY _exciting_rel ].

:end :instance.

; <<>>

:begin :instance.

expensively_isect := int_vp_adv_word_le &
  [ STEM < "expensively" >,
    SYNSEM.LOCAL.KEYS.KEY _expensively_rel ].

:end :instance.

; <<>>

:begin :instance.

explicit_isect := intrans_adj_le &
  [ STEM < "explicit" >,
    SYNSEM.LOCAL.KEYS.KEY _explicit_rel ].

:end :instance.

; <<>>

:begin :instance.

favorite_isect := intrans_adj_le &
  [ STEM < "favorite" >,
    SYNSEM.LOCAL.KEYS.KEY _favorite_rel ].

:end :instance.

; <<>>

:begin :instance.

fixed_isect := intrans_adj_le &
  [ STEM < "fixed" >,
    SYNSEM.LOCAL.KEYS.KEY _fixed_rel ].

:end :instance.

; <<>>

:begin :instance.

fondly_isect := int_vp_adv_word_le &
  [ STEM < "fondly" >,
    SYNSEM.LOCAL.KEYS.KEY _fondly_rel ].

:end :instance.

; <<>>

:begin :instance.

forever_isect := intrans_adj_le &
  [ STEM < "forever" >,
    SYNSEM.LOCAL.KEYS.KEY _forever_rel ].

:end :instance.

; <<>>

:begin :instance.

formal_isect := intrans_adj_le &
  [ STEM < "formal" >,
    SYNSEM.LOCAL.KEYS.KEY _formal_rel ].

:end :instance.

; <<>>

:begin :instance.

fragmented_isect := intrans_adj_le &
  [ STEM < "fragmented" >,
    SYNSEM.LOCAL.KEYS.KEY _fragmented_rel ].

:end :instance.

; <<>>

:begin :instance.

frightening_isect := intrans_adj_le &
  [ STEM < "frightening" >,
    SYNSEM.LOCAL.KEYS.KEY _frightening_rel ].

:end :instance.

; <<>>
; MULTIKEY < "full" >

:begin :instance.

full_up_isect := intrans_adj_mle &
  [ STEM < "full", "up" >,
    SYNSEM.LOCAL.KEYS.KEY _full_up_rel ].

:end :instance.

; <<>>

:begin :instance.

general_isect := intrans_adj_le &
  [ STEM < "general" >,
    SYNSEM.LOCAL.KEYS.KEY _general_adj_rel ].

:end :instance.

; <<>>

:begin :instance.

generous_isect := intrans_adj_le &
  [ STEM < "generous" >,
    SYNSEM.LOCAL.KEYS.KEY _generous_rel ].

:end :instance.

; <<>>

:begin :instance.

given_isect := intrans_adj_le &
  [ STEM < "given" >,
    SYNSEM.LOCAL.KEYS.KEY _given_rel ].

:end :instance.

; <<>>

:begin :instance.

gold_isect := intrans_adj_le &
  [ STEM < "gold" >,
    SYNSEM.LOCAL.KEYS.KEY _gold_rel ].

:end :instance.

; <<>>

:begin :instance.

grand_isect := intrans_adj_le &
  [ STEM < "grand" >,
    SYNSEM.LOCAL.KEYS.KEY _grand_rel ].

:end :instance.

; <<>>

:begin :instance.

graphic_isect := intrans_adj_le &
  [ STEM < "graphic" >,
    SYNSEM.LOCAL.KEYS.KEY _graphic_adj_rel ].

:end :instance.

; <<>>

:begin :instance.

graphically_isect := int_vp_adv_word_le &
  [ STEM < "graphically" >,
    SYNSEM.LOCAL.KEYS.KEY _graphically_rel ].

:end :instance.

; <<>>

:begin :instance.

grateful_isect := intrans_adj_le &
  [ STEM < "grateful" >,
    SYNSEM.LOCAL.KEYS.KEY _grateful_rel ].

:end :instance.

; <<>>

:begin :instance.

green_isect := intrans_adj_le &
  [ STEM < "green" >,
    SYNSEM.LOCAL.KEYS.KEY _green_rel ].

:end :instance.

; <<>>

:begin :instance.

haggard_isect := intrans_adj_le &
  [ STEM < "haggard" >,
    SYNSEM.LOCAL.KEYS.KEY _haggard_rel ].

:end :instance.

; <<>>

:begin :instance.

hasty_isect := intrans_adj_le &
  [ STEM < "hasty" >,
    SYNSEM.LOCAL.KEYS.KEY _hasty_rel ].

:end :instance.

; <<>>

:begin :instance.

healthy_isect := intrans_adj_le &
  [ STEM < "healthy" >,
    SYNSEM.LOCAL.KEYS.KEY _healthy_rel ].

:end :instance.

; <<>>

:begin :instance.

heavily_isect := int_vp_adv_word_le &
  [ STEM < "heavily" >,
    SYNSEM.LOCAL.KEYS.KEY _heavily_rel ].

:end :instance.

; <<>>

:begin :instance.

helpful_isect := intrans_adj_le &
  [ STEM < "helpful" >,
    SYNSEM.LOCAL.KEYS.KEY _helpful_rel ].

:end :instance.

; <<>>

:begin :instance.

helpless_isect := intrans_adj_le &
  [ STEM < "helpless" >,
    SYNSEM.LOCAL.KEYS.KEY _helpless_rel ].

:end :instance.

; <<>>

:begin :instance.

hip_isect := intrans_adj_le &
  [ STEM < "hip" >,
    SYNSEM.LOCAL.KEYS.KEY _hip_adj_rel ].

:end :instance.

; <<>>

:begin :instance.

historical_isect := intrans_adj_le &
  [ STEM < "historical" >,
    SYNSEM.LOCAL.KEYS.KEY _historical_rel ].

:end :instance.

; <<>>

:begin :instance.

hopeless_isect := intrans_adj_le &
  [ STEM < "hopeless" >,
    SYNSEM.LOCAL.KEYS.KEY _hopeless_rel ].

:end :instance.

; <<>>

:begin :instance.

horrendous_pcisect := reg_adj_atrans_that_cp_le &
  [ STEM < "horrendous" >,
    SYNSEM.LOCAL.KEYS.KEY _horrendous_rel ].

:end :instance.

; <<>>

:begin :instance.

horrendously_pcisect := int_vp_adv_word_le &
  [ STEM < "horrendously" >,
    SYNSEM.LOCAL.KEYS.KEY _horrendously_rel ].

:end :instance.

; <<>>

:begin :instance.

horrible_pcisect := reg_adj_atrans_that_cp_le &
  [ STEM < "horrible" >,
    SYNSEM.LOCAL.KEYS.KEY _horrible_rel ].

:end :instance.


; <<>>

:begin :instance.

horrible_a2 := intrans_adj_le &
  [ STEM < "horrible" >,
    SYNSEM.LOCAL.KEYS.KEY _horrible_rel ].

:end :instance.


; <<>>

:begin :instance.

horribly_pcisect := int_vp_adv_word_le &
  [ STEM < "horribly" >,
    SYNSEM.LOCAL.KEYS.KEY _horribly_rel ].

:end :instance.

; <<>>

:begin :instance.

huge_isect := intrans_adj_le &
  [ STEM < "huge" >,
    SYNSEM.LOCAL.KEYS.KEY _huge_rel ].

:end :instance.

; <<>>

:begin :instance.

humid_isect := intrans_adj_le &
  [ STEM < "humid" >,
    SYNSEM.LOCAL.KEYS.KEY _humid_rel ].

:end :instance.

; <<>>

:begin :instance.

hungrily_isect := int_vp_adv_word_le &
  [ STEM < "hungrily" >,
    SYNSEM.LOCAL.KEYS.KEY _hungrily_rel ].

:end :instance.

; <<>>

:begin :instance.

hurriedly_isect := int_vp_adv_word_le &
  [ STEM < "hurriedly" >,
    SYNSEM.LOCAL.KEYS.KEY _hurriedly_rel ].

:end :instance.

; <<>>

:begin :instance.

ideally_isect := int_vp_adv_word_le &
  [ STEM < "ideally" >,
    SYNSEM.LOCAL.KEYS.KEY _ideally_rel ].

:end :instance.

; <<>>

:begin :instance.

imperative_isect := intrans_adj_le &
  [ STEM < "imperative" >,
    SYNSEM.LOCAL.KEYS.KEY _imperative_rel ].

:end :instance.

; <<>>

:begin :instance.

impromptu_isect := intrans_adj_le &
  [ STEM < "impromptu" >,
    SYNSEM.LOCAL.KEYS.KEY _impromptu_rel ].

:end :instance.

; <<>>

:begin :instance.

inaccurate_isect := intrans_adj_le &
  [ STEM < "inaccurate" >,
    SYNSEM.LOCAL.KEYS.KEY _inaccurate_rel ].

:end :instance.

; <<>>

:begin :instance.

indefinitely_isect := int_vp_adv_word_le &
  [ STEM < "indefinitely" >,
    SYNSEM.LOCAL.KEYS.KEY _indefinitely_rel ].

:end :instance.

; <<>>

:begin :instance.

independently_isect := int_vp_adv_word_le &
  [ STEM < "independently" >,
    SYNSEM.LOCAL.KEYS.KEY _independently_rel ].

:end :instance.

; <<>>

:begin :instance.

indifferent_isect := intrans_adj_le &
  [ STEM < "indifferent" >,
    SYNSEM.LOCAL.KEYS.KEY _indifferent_rel ].

:end :instance.

; <<>>

:begin :instance.

ineffective_isect := intrans_adj_le &
  [ STEM < "ineffective" >,
    SYNSEM.LOCAL.KEYS.KEY _ineffective_rel ].

:end :instance.

; <<>>

:begin :instance.

informative_isect := intrans_adj_le &
  [ STEM < "informative" >,
    SYNSEM.LOCAL.KEYS.KEY _informative_rel ].

:end :instance.

; <<>>

:begin :instance.

informatively_isect := int_vp_adv_word_le &
  [ STEM < "informatively" >,
    SYNSEM.LOCAL.KEYS.KEY _informatively_rel ].

:end :instance.

; <<>>

:begin :instance.

inopportune_isect := intrans_adj_le &
  [ STEM < "inopportune" >,
    SYNSEM.LOCAL.KEYS.KEY _inopportune_rel ].

:end :instance.

; <<>>

:begin :instance.

intelligent_isect := intrans_adj_le &
  [ STEM < "intelligent" >,
    SYNSEM.LOCAL.KEYS.KEY _intelligent_rel ].

:end :instance.

; <<>>

:begin :instance.

intensified_isect := intrans_adj_le &
  [ STEM < "intensified" >,
    SYNSEM.LOCAL.KEYS.KEY _intensified_rel ].

:end :instance.

; <<>>

:begin :instance.

interesting_pcisect := reg_adj_atrans_that_cp_le &
  [ STEM < "interesting" >,
    SYNSEM.LOCAL.KEYS.KEY _interesting_rel ].

:end :instance.

; <<>>

:begin :instance.

intimate_isect := intrans_adj_le &
  [ STEM < "intimate" >,
    SYNSEM.LOCAL.KEYS.KEY _intimate_rel ].

:end :instance.

; <<>>

:begin :instance.

intolerable_isect := intrans_adj_le &
  [ STEM < "intolerable" >,
    SYNSEM.LOCAL.KEYS.KEY _intolerable_rel ].

:end :instance.

; <<>>

:begin :instance.

involved_isect := intrans_adj_le &
  [ STEM < "involved" >,
    SYNSEM.LOCAL.KEYS.KEY _involved_rel ].

:end :instance.

; <<>>

:begin :instance.

juicy_isect := intrans_adj_le &
  [ STEM < "juicy" >,
    SYNSEM.LOCAL.KEYS.KEY _juicy_rel ].

:end :instance.

; <<>>

:begin :instance.

justifiable_isect := intrans_adj_le &
  [ STEM < "justifiable" >,
    SYNSEM.LOCAL.KEYS.KEY _justifiable_rel ].

:end :instance.

; <<>>

:begin :instance.

kosher_isect := intrans_adj_le &
  [ STEM < "kosher" >,
    SYNSEM.LOCAL.KEYS.KEY _kosher_rel ].

:end :instance.

; <<>>

:begin :instance.

latter_isect := intrans_adj_le &
  [ STEM < "latter" >,
    SYNSEM.LOCAL.KEYS.KEY _latter_rel ].

:end :instance.

; <<>>

:begin :instance.

leading_isect := intrans_adj_le &
  [ STEM < "leading" >,
    SYNSEM.LOCAL.KEYS.KEY _leading_rel ].

:end :instance.

; <<>>

:begin :instance.

leisurely_isect := int_vp_adv_word_le &
  [ STEM < "leisurely" >,
    SYNSEM.LOCAL.KEYS.KEY _leisurely_rel ].

:end :instance.

; <<>>

:begin :instance.

lovely_isect := int_vp_adv_post_word_le &
  [ STEM < "lovely" >,
    SYNSEM.LOCAL.KEYS.KEY _lovely_rel ].

:end :instance.

; <<>>

:begin :instance.

loving_isect := intrans_adj_le &
  [ STEM < "loving" >,
    SYNSEM.LOCAL.KEYS.KEY _loving_rel ].

:end :instance.

; <<>>

:begin :instance.

lucky_pcisect := reg_adj_atrans_that_cp_le &
  [ STEM < "lucky" >,
    SYNSEM.LOCAL.KEYS.KEY _lucky_rel ].

:end :instance.

; <<>>

:begin :instance.

luxurious_isect := intrans_adj_le &
  [ STEM < "luxurious" >,
    SYNSEM.LOCAL.KEYS.KEY _luxurious_rel ].

:end :instance.

; <<>>

:begin :instance.

medieval_isect := intrans_adj_le &
  [ STEM < "medieval" >,
    SYNSEM.LOCAL.KEYS.KEY _medieval_rel ].

:end :instance.

; <<>>
; MULTIKEY < "messed" >

:begin :instance.

messed_up_isect := intrans_adj_mle &
  [ STEM < "messed", "up" >,
    SYNSEM.LOCAL.KEYS.KEY _messed_up_rel ].

:end :instance.

; <<>>

:begin :instance.

messy_isect := intrans_adj_le &
  [ STEM < "messy" >,
    SYNSEM.LOCAL.KEYS.KEY _messy_rel ].

:end :instance.

; <<>>

:begin :instance.

mild_isect := intrans_adj_le &
  [ STEM < "mild" >,
    SYNSEM.LOCAL.KEYS.KEY _mild_rel ].

:end :instance.

; <<>>

:begin :instance.

moderate_isect := intrans_adj_le &
  [ STEM < "moderate" >,
    SYNSEM.LOCAL.KEYS.KEY _moderate_adj_rel ].

:end :instance.

; <<>>

:begin :instance.

modern_isect := intrans_adj_le &
  [ STEM < "modern" >,
    SYNSEM.LOCAL.KEYS.KEY _modern_rel ].

:end :instance.

; <<>>

:begin :instance.

narrowly_isect := int_vp_adv_word_le &
  [ STEM < "narrowly" >,
    SYNSEM.LOCAL.KEYS.KEY _narrowly_rel ].

:end :instance.

; <<>>

:begin :instance.

native_isect := intrans_adj_le &
  [ STEM < "native" >,
    SYNSEM.LOCAL.KEYS.KEY _native_rel ].

:end :instance.

; <<>>

:begin :instance.

neatly_isect := int_vp_adv_word_le &
  [ STEM < "neatly" >,
    SYNSEM.LOCAL.KEYS.KEY _neatly_rel ].

:end :instance.

; <<>>

:begin :instance.

negative_isect := intrans_adj_le &
  [ STEM < "negative" >,
    SYNSEM.LOCAL.KEYS.KEY _negative_rel ].

:end :instance.

; <<>>

:begin :instance.

negligible_isect := intrans_adj_le &
  [ STEM < "negligible" >,
    SYNSEM.LOCAL.KEYS.KEY _negligible_rel ].

:end :instance.

; <<>>

:begin :instance.

nightly_adv := int_vp_adv_post_word_le &
  [ STEM < "nightly" >,
    SYNSEM.LOCAL.KEYS.KEY _nightly_adv_rel ].

:end :instance.

; <<>>

:begin :instance.

nightly_a1 := intrans_adj_le &
  [ STEM < "nightly" >,
    SYNSEM.LOCAL.KEYS.KEY _nightly_rel ].

:end :instance.


; <<>>
; MULTIKEY < "non" >

:begin :instance.

nonGerman_isect := intrans_adj_mle &
  [ STEM < "non", "german" >,
    SYNSEM.LOCAL.KEYS.KEY _non_german_rel ].

:end :instance.

; <<>>
; MULTIKEY < "non" >

:begin :instance.

nonsmoking_isect := intrans_adj_mle &
  [ STEM < "non", "smoking" >,
    SYNSEM.LOCAL.KEYS.KEY _non_smoking_rel ].

:end :instance.

; <<>>

:begin :instance.

nonrefundable_isect := intrans_adj_le &
  [ STEM < "nonrefundable" >,
    SYNSEM.LOCAL.KEYS.KEY _nonrefundable_rel ].

:end :instance.

; <<>>

:begin :instance.

onward_isect := intrans_adj_le &
  [ STEM < "onward" >,
    SYNSEM.LOCAL.KEYS.KEY _onward_rel ].

:end :instance.

; <<>>

:begin :instance.

onwards_isect := intrans_adj_le &
  [ STEM < "onwards" >,
    SYNSEM.LOCAL.KEYS.KEY _onwards_rel ].

:end :instance.

; <<>>

:begin :instance.

opposed_isect := trans_adj_le &
  [ STEM < "opposed" >,
    SYNSEM.LOCAL.KEYS [ KEY _opposed_rel,
			--COMPKEY _to_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

oppressive_isect := intrans_adj_le &
  [ STEM < "oppressive" >,
    SYNSEM.LOCAL.KEYS.KEY _oppressive_rel ].

:end :instance.

; <<>>

:begin :instance.

optional_pcisect := reg_adj_atrans_cp_le &
  [ STEM < "optional" >,
    SYNSEM.LOCAL.KEYS.KEY _optional_rel ].

:end :instance.

; <<>>

:begin :instance.

organizationally_isect := int_vp_adv_word_le &
  [ STEM < "organizationally" >,
    SYNSEM.LOCAL.KEYS.KEY _organizationally_rel ].

:end :instance.

; <<>>

:begin :instance.

outrageous_isect := intrans_adj_le &
  [ STEM < "outrageous" >,
    SYNSEM.LOCAL.KEYS.KEY _outrageous_rel ].

:end :instance.

; <<>>

:begin :instance.

outward_isect := intrans_adj_le &
  [ STEM < "outward" >,
    SYNSEM.LOCAL.KEYS.KEY _outward_rel ].

:end :instance.

; <<>>

:begin :instance.

overcrowded_isect := intrans_adj_le &
  [ STEM < "overcrowded" >,
    SYNSEM.LOCAL.KEYS.KEY _overcrowded_rel ].

:end :instance.

; <<>>

:begin :instance.

overnight_isect := intrans_adj_le &
  [ STEM < "overnight" >,
    SYNSEM.LOCAL.KEYS.KEY _overnight_rel ].

:end :instance.

; <<>>

:begin :instance.

overnight_adv1 := vp_adv_post_word_le &
  [ STEM < "overnight" >,
    SYNSEM.LOCAL.KEYS.KEY _overnight_adv_rel ].

:end :instance.



; <<>>

:begin :instance.

painful_isect := intrans_adj_le &
  [ STEM < "painful" >,
    SYNSEM.LOCAL.KEYS.KEY _painful_rel ].

:end :instance.

; <<>>

:begin :instance.

painfully_isect := int_vp_adv_word_le &
  [ STEM < "painfully" >,
    SYNSEM.LOCAL.KEYS.KEY _painfully_rel ].

:end :instance.

; <<>>

:begin :instance.

peachy_isect := intrans_adj_le &
  [ STEM < "peachy" >,
    SYNSEM.LOCAL.KEYS.KEY _peachy_rel ].

:end :instance.

; <<>>

:begin :instance.

penultimate_isect := intrans_adj_le &
  [ STEM < "penultimate" >,
    SYNSEM.LOCAL.KEYS.KEY _penultimate_rel ].

:end :instance.

; <<>>

:begin :instance.

pharmaceutical_isect := intrans_adj_le &
  [ STEM < "pharmaceutical" >,
    SYNSEM.LOCAL.KEYS.KEY _pharmaceutical_rel ].

:end :instance.

; <<>>

:begin :instance.

picky_isect := intrans_adj_le &
  [ STEM < "picky" >,
    SYNSEM.LOCAL.KEYS.KEY _picky_rel ].

:end :instance.

; <<>>

:begin :instance.

polite_isect := intrans_adj_le &
  [ STEM < "polite" >,
    SYNSEM.LOCAL.KEYS.KEY _polite_rel ].

:end :instance.

; <<>>

:begin :instance.

poorly_isect := int_vp_adv_word_le &
  [ STEM < "poorly" >,
    SYNSEM.LOCAL.KEYS.KEY _poorly_rel ].

:end :instance.

; <<>>

:begin :instance.

posh_isect := intrans_adj_le &
  [ STEM < "posh" >,
    SYNSEM.LOCAL.KEYS.KEY _posh_rel ].

:end :instance.

; <<>>

:begin :instance.

precious_isect := intrans_adj_le &
  [ STEM < "precious" >,
    SYNSEM.LOCAL.KEYS.KEY _precious_rel ].

:end :instance.

; <<>>

:begin :instance.

predefined_isect := intrans_adj_le &
  [ STEM < "predefined" >,
    SYNSEM.LOCAL.KEYS.KEY _predefined_rel ].

:end :instance.

; <<>>

:begin :instance.

pressing_isect := intrans_adj_le &
  [ STEM < "pressing" >,
    SYNSEM.LOCAL.KEYS.KEY _pressing_rel ].

:end :instance.

; <<>>

:begin :instance.

presumable_isect := intrans_adj_le &
  [ STEM < "presumable" >,
    SYNSEM.LOCAL.KEYS.KEY _presumable_rel ].

:end :instance.

; <<>>

:begin :instance.

pricewise_isect := intrans_adj_le &
  [ STEM < "pricewise" >,
    SYNSEM.LOCAL.KEYS.KEY _pricewise_rel ].

:end :instance.

; <<>>

:begin :instance.

productive_isect := intrans_adj_le &
  [ STEM < "productive" >,
    SYNSEM.LOCAL.KEYS.KEY _productive_rel ].

:end :instance.

; <<>>

:begin :instance.

productively_isect := int_vp_adv_word_le &
  [ STEM < "productively" >,
    SYNSEM.LOCAL.KEYS.KEY _productively_rel ].

:end :instance.

; <<>>

:begin :instance.

professional_isect := intrans_adj_le &
  [ STEM < "professional" >,
    SYNSEM.LOCAL.KEYS.KEY _professional_rel ].

:end :instance.

; <<>>

:begin :instance.

profitable_pcisect := reg_adj_atrans_that_cp_le &
  [ STEM < "profitable" >,
    SYNSEM.LOCAL.KEYS.KEY _profitable_rel ].

:end :instance.

; <<>>

:begin :instance.

profitably_pcisect := int_vp_adv_word_le &
  [ STEM < "profitably" >,
    SYNSEM.LOCAL.KEYS.KEY _profitably_rel ].

:end :instance.

; <<>>

:begin :instance.

prolonged_isect := intrans_adj_le &
  [ STEM < "prolonged" >,
    SYNSEM.LOCAL.KEYS.KEY _prolonged_rel ].

:end :instance.

; <<>>

:begin :instance.

promising_pcisect := reg_adj_atrans_that_cp_le &
  [ STEM < "promising" >,
    SYNSEM.LOCAL.KEYS.KEY _promising_rel ].

:end :instance.

; <<>>

:begin :instance.

publicly_isect := int_vp_adv_word_le &
  [ STEM < "publicly" >,
    SYNSEM.LOCAL.KEYS.KEY _publicly_rel ].

:end :instance.

; <<>>

:begin :instance.

punctually_isect := int_vp_adv_word_le &
  [ STEM < "punctually" >,
    SYNSEM.LOCAL.KEYS.KEY _punctually_rel ].

:end :instance.

; <<>>

:begin :instance.

random_isect := intrans_adj_le &
  [ STEM < "random" >,
    SYNSEM.LOCAL.KEYS.KEY _random_rel ].

:end :instance.

; <<>>

:begin :instance.

randomly_isect := int_vp_adv_word_le &
  [ STEM < "randomly" >,
    SYNSEM.LOCAL.KEYS.KEY _randomly_rel ].

:end :instance.

; <<>>

:begin :instance.

reciprocal_isect := intrans_adj_le &
  [ STEM < "reciprocal" >,
    SYNSEM.LOCAL.KEYS.KEY _reciprocal_rel ].

:end :instance.

; <<>>

:begin :instance.

regardless_isect := vp_adv_post_word_le &
  [ STEM < "regardless" >,
    SYNSEM.LOCAL.KEYS.KEY _regardless_rel ].

:end :instance.

; <<>>

:begin :instance.

regrettable_isect := intrans_adj_le &
  [ STEM < "regrettable" >,
    SYNSEM.LOCAL.KEYS.KEY _regrettable_rel ].

:end :instance.

; <<>>

:begin :instance.

relaxing_isect := intrans_adj_le &
  [ STEM < "relaxing" >,
    SYNSEM.LOCAL.KEYS.KEY _relaxing_rel ].

:end :instance.

; <<>>

:begin :instance.

relieved_isect := intrans_adj_le &
  [ STEM < "relieved" >,
    SYNSEM.LOCAL.KEYS.KEY _relieved_rel ].

:end :instance.

; <<>>

:begin :instance.

relieving_pcisect := reg_adj_atrans_that_cp_le &
  [ STEM < "relieving" >,
    SYNSEM.LOCAL.KEYS.KEY _relieving_rel ].

:end :instance.

; <<>>

:begin :instance.

remarkable_pcisect := reg_adj_atrans_that_cp_le &
  [ STEM < "remarkable" >,
    SYNSEM.LOCAL.KEYS.KEY _remarkable_rel ].

:end :instance.

; <<>>

:begin :instance.

remarkably_pcisect := int_vp_adv_word_le &
  [ STEM < "remarkably" >,
    SYNSEM.LOCAL.KEYS.KEY _remarkably_rel ].

:end :instance.

; <<>>

:begin :instance.

remote_isect := intrans_adj_le &
  [ STEM < "remote" >,
    SYNSEM.LOCAL.KEYS.KEY _remote_rel ].

:end :instance.

; <<>>

:begin :instance.

renewed_isect := intrans_adj_le &
  [ STEM < "renewed" >,
    SYNSEM.LOCAL.KEYS.KEY _renewed_rel ].

:end :instance.

; <<>>

:begin :instance.

respective_isect := intrans_adj_le &
  [ STEM < "respective" >,
    SYNSEM.LOCAL.KEYS.KEY _respective_rel ].

:end :instance.

; <<>>

:begin :instance.

risky_isect := intrans_adj_le &
  [ STEM < "risky" >,
    SYNSEM.LOCAL.KEYS.KEY _risky_rel ].

:end :instance.

; <<>>

:begin :instance.

rosy_isect := intrans_adj_le &
  [ STEM < "rosy" >,
    SYNSEM.LOCAL.KEYS.KEY _rosy_rel ].

:end :instance.

; <<>>

:begin :instance.

rusty_isect := intrans_adj_le &
  [ STEM < "rusty" >,
    SYNSEM.LOCAL.KEYS.KEY _rusty_rel ].

:end :instance.

; <<>>

:begin :instance.

safely_isect := int_vp_adv_word_le &
  [ STEM < "safely" >,
    SYNSEM.LOCAL.KEYS.KEY _safely_rel ].

:end :instance.

; <<>>

:begin :instance.

satisfactory_isect := intrans_adj_le &
  [ STEM < "satisfactory" >,
    SYNSEM.LOCAL.KEYS.KEY _satisfactory_rel ].

:end :instance.

; <<>>

:begin :instance.

satisfying_isect := intrans_adj_le &
  [ STEM < "satisfying" >,
    SYNSEM.LOCAL.KEYS.KEY _satisfying_rel ].

:end :instance.

; <<>>

:begin :instance.

scattered_isect := intrans_adj_le &
  [ STEM < "scattered" >,
    SYNSEM.LOCAL.KEYS.KEY _scattered_rel ].

:end :instance.

; <<>>

:begin :instance.

sceptical_isect := intrans_adj_le &
  [ STEM < "sceptical" >,
    SYNSEM.LOCAL.KEYS.KEY _sceptical_rel ].

:end :instance.

; <<>>

:begin :instance.

screwed_isect := intrans_adj_le &
  [ STEM < "screwed" >,
    SYNSEM.LOCAL.KEYS.KEY _screwed_rel ].

:end :instance.

; <<>>

:begin :instance.

severe_isect := intrans_adj_le &
  [ STEM < "severe" >,
    SYNSEM.LOCAL.KEYS.KEY _severe_rel ].

:end :instance.

; <<>>

:begin :instance.

severely_isect := int_vp_adv_word_le &
  [ STEM < "severely" >,
    SYNSEM.LOCAL.KEYS.KEY _severely_rel ].

:end :instance.

; <<>>

:begin :instance.

sick_isect := intrans_adj_le &
  [ STEM < "sick" >,
    SYNSEM.LOCAL.KEYS.KEY _sick_rel ].

:end :instance.

; <<>>

:begin :instance.

situated_isect := intrans_adj_le &
  [ STEM < "situated" >,
    SYNSEM.LOCAL.KEYS.KEY _situated_rel ].

:end :instance.

; <<>>

:begin :instance.

smart_isect := intrans_adj_le &
  [ STEM < "smart" >,
    SYNSEM.LOCAL.KEYS.KEY _smart_rel ].

:end :instance.

; <<>>

:begin :instance.

smooth_isect := intrans_adj_le &
  [ STEM < "smooth" >,
    SYNSEM.LOCAL.KEYS.KEY _smooth_rel ].

:end :instance.

; <<>>

:begin :instance.

socially_isect := int_vp_adv_word_le &
  [ STEM < "socially" >,
    SYNSEM.LOCAL.KEYS.KEY _socially_rel ].

:end :instance.

; <<>>
; MULTIKEY < "sold" >

:begin :instance.

sold_out_isect := intrans_adj_mle &
  [ STEM < "sold", "out" >,
    SYNSEM.LOCAL.KEYS.KEY _sold_out_rel ].

:end :instance.

; <<>>

:begin :instance.

soulful_isect := intrans_adj_le &
  [ STEM < "soulful" >,
    SYNSEM.LOCAL.KEYS.KEY _soulful_rel ].

:end :instance.

; <<>>

:begin :instance.

sour_isect := intrans_adj_le &
  [ STEM < "sour" >,
    SYNSEM.LOCAL.KEYS.KEY _sour_rel ].

:end :instance.

; <<>>

:begin :instance.

southern_isect := intrans_adj_le &
  [ STEM < "southern" >,
    SYNSEM.LOCAL.KEYS.KEY _southern_rel ].

:end :instance.

; <<>>

:begin :instance.

spontaneous_isect := intrans_adj_le &
  [ STEM < "spontaneous" >,
    SYNSEM.LOCAL.KEYS.KEY _spontaneous_rel ].

:end :instance.

; <<>>

:begin :instance.

sporadic_isect := intrans_adj_le &
  [ STEM < "sporadic" >,
    SYNSEM.LOCAL.KEYS.KEY _sporadic_rel ].

:end :instance.

; <<>>

:begin :instance.

stray_isect := intrans_adj_le &
  [ STEM < "stray" >,
    SYNSEM.LOCAL.KEYS.KEY _stray_rel ].

:end :instance.

; <<>>

:begin :instance.

structured_isect := intrans_adj_le &
  [ STEM < "structured" >,
    SYNSEM.LOCAL.KEYS.KEY _structured_rel ].

:end :instance.

; <<>>

:begin :instance.

stupendous_pcisect := reg_adj_atrans_that_cp_le &
  [ STEM < "stupendous" >,
    SYNSEM.LOCAL.KEYS.KEY _stupendous_rel ].

:end :instance.

; <<>>

:begin :instance.

stupendously_pcisect := int_vp_adv_word_le &
  [ STEM < "stupendously" >,
    SYNSEM.LOCAL.KEYS.KEY _stupendously_rel ].

:end :instance.

; <<>>

:begin :instance.

substantial_isect := intrans_adj_le &
  [ STEM < "substantial" >,
    SYNSEM.LOCAL.KEYS.KEY _substantial_rel ].

:end :instance.

; <<>>

:begin :instance.

successfully_isect := int_vp_adv_word_le &
  [ STEM < "successfully" >,
    SYNSEM.LOCAL.KEYS.KEY _successfully_rel ].

:end :instance.

; <<>>

:begin :instance.

systematic_isect := intrans_adj_le &
  [ STEM < "systematic" >,
    SYNSEM.LOCAL.KEYS.KEY _systematic_rel ].

:end :instance.

; <<>>

:begin :instance.

tanned_isect := intrans_adj_le &
  [ STEM < "tanned" >,
    SYNSEM.LOCAL.KEYS.KEY _tanned_rel ].

:end :instance.

; <<>>

:begin :instance.

tasteful_isect := intrans_adj_le &
  [ STEM < "tasteful" >,
    SYNSEM.LOCAL.KEYS.KEY _tasteful_rel ].

:end :instance.

; <<>>

:begin :instance.

tastefully_isect := int_vp_adv_word_le &
  [ STEM < "tastefully" >,
    SYNSEM.LOCAL.KEYS.KEY _tastefully_rel ].

:end :instance.

; <<>>

:begin :instance.

tense_isect := intrans_adj_le &
  [ STEM < "tense" >,
    SYNSEM.LOCAL.KEYS.KEY _tense_adj_rel ].

:end :instance.

; <<>>

:begin :instance.

tepid_isect := intrans_adj_le &
  [ STEM < "tepid" >,
    SYNSEM.LOCAL.KEYS.KEY _tepid_rel ].

:end :instance.

; <<>>

:begin :instance.

terrifically_pcisect := int_vp_adv_word_le &
  [ STEM < "terrifically" >,
    SYNSEM.LOCAL.KEYS.KEY _terrifically_rel ].

:end :instance.

; <<>>

:begin :instance.

thereafter_isect := int_vp_adv_word_le &
  [ STEM < "thereafter" >,
    SYNSEM.LOCAL.KEYS.KEY _thereafter_rel ].

:end :instance.

; <<>>

:begin :instance.

timewise_isect := intrans_adj_le &
  [ STEM < "timewise" >,
    SYNSEM.LOCAL.KEYS.KEY _timewise_rel ].

:end :instance.

; <<>>

:begin :instance.

tough_isect := intrans_adj_le &
  [ STEM < "tough" >,
    SYNSEM.LOCAL.KEYS.KEY _tough_rel ].

:end :instance.

; <<>>

:begin :instance.

traditional_isect := intrans_adj_le &
  [ STEM < "traditional" >,
    SYNSEM.LOCAL.KEYS.KEY _traditional_rel ].

:end :instance.

; <<>>

:begin :instance.

traditionally_isect := int_vp_adv_word_le &
  [ STEM < "traditionally" >,
    SYNSEM.LOCAL.KEYS.KEY _traditionally_rel ].

:end :instance.

; <<>>

:begin :instance.

ugly_isect := int_vp_adv_word_le &
  [ STEM < "ugly" >,
    SYNSEM.LOCAL.KEYS.KEY _ugly_rel ].

:end :instance.

; <<>>

:begin :instance.

unacceptable_isect := intrans_adj_le &
  [ STEM < "unacceptable" >,
    SYNSEM.LOCAL.KEYS.KEY _unacceptable_rel ].

:end :instance.

; <<>>

:begin :instance.

unbelievable_isect := intrans_adj_le &
  [ STEM < "unbelievable" >,
    SYNSEM.LOCAL.KEYS.KEY _unbelievable_rel ].

:end :instance.

; <<>>

:begin :instance.

uncomplicated_isect := intrans_adj_le &
  [ STEM < "uncomplicated" >,
    SYNSEM.LOCAL.KEYS.KEY _uncomplicated_rel ].

:end :instance.

; <<>>

:begin :instance.

uncool_isect := intrans_adj_le &
  [ STEM < "uncool" >,
    SYNSEM.LOCAL.KEYS.KEY _uncool_rel ].

:end :instance.

; <<>>

:begin :instance.

underway_isect := intrans_adj_le &
  [ STEM < "underway" >,
    SYNSEM.LOCAL.KEYS.KEY _underway_rel ].

:end :instance.

; <<>>

:begin :instance.

unfinished_isect := intrans_adj_le &
  [ STEM < "unfinished" >,
    SYNSEM.LOCAL.KEYS.KEY _unfinished_rel ].

:end :instance.

; <<>>

:begin :instance.

uninteresting_isect := intrans_adj_le &
  [ STEM < "uninteresting" >,
    SYNSEM.LOCAL.KEYS.KEY _uninteresting_rel ].

:end :instance.

; <<>>

:begin :instance.

unlucky_isect := intrans_adj_le &
  [ STEM < "unlucky" >,
    SYNSEM.LOCAL.KEYS.KEY _unlucky_rel ].

:end :instance.

; <<>>

:begin :instance.

unmarried_isect := intrans_adj_le &
  [ STEM < "unmarried" >,
    SYNSEM.LOCAL.KEYS.KEY _unmarried_rel ].

:end :instance.

; <<>>

:begin :instance.

unnecessary_isect := intrans_adj_le &
  [ STEM < "unnecessary" >,
    SYNSEM.LOCAL.KEYS.KEY _unnecessary_rel ].

:end :instance.

; <<>>

:begin :instance.

unprepared_isect := intrans_adj_le &
  [ STEM < "unprepared" >,
    SYNSEM.LOCAL.KEYS.KEY _unprepared_rel ].

:end :instance.

; <<>>

:begin :instance.

unproblematic_isect := intrans_adj_le &
  [ STEM < "unproblematic" >,
    SYNSEM.LOCAL.KEYS.KEY _unproblematic_rel ].

:end :instance.

; <<>>

:begin :instance.

unproductive_isect := intrans_adj_le &
  [ STEM < "unproductive" >,
    SYNSEM.LOCAL.KEYS.KEY _unproductive_rel ].

:end :instance.

; <<>>

:begin :instance.

unrealistic_isect := intrans_adj_le &
  [ STEM < "unrealistic" >,
    SYNSEM.LOCAL.KEYS.KEY _unrealistic_rel ].

:end :instance.

; <<>>

:begin :instance.

unrestricted_isect := intrans_adj_le &
  [ STEM < "unrestricted" >,
    SYNSEM.LOCAL.KEYS.KEY _unrestricted_rel ].

:end :instance.

; <<>>

:begin :instance.

unsafe_isect := intrans_adj_le &
  [ STEM < "unsafe" >,
    SYNSEM.LOCAL.KEYS.KEY _unsafe_rel ].

:end :instance.

; <<>>

:begin :instance.

unselfish_isect := intrans_adj_le &
  [ STEM < "unselfish" >,
    SYNSEM.LOCAL.KEYS.KEY _unselfish_rel ].

:end :instance.

; <<>>

:begin :instance.

unsuitable_isect := intrans_adj_le &
  [ STEM < "unsuitable" >,
    SYNSEM.LOCAL.KEYS.KEY _unsuitable_rel ].

:end :instance.

; <<>>

:begin :instance.

unusual_isect := intrans_adj_le &
  [ STEM < "unusual" >,
    SYNSEM.LOCAL.KEYS.KEY _unusual_rel ].

:end :instance.

; <<>>

:begin :instance.

upcoming_isect := intrans_adj_le &
  [ STEM < "upcoming" >,
    SYNSEM.LOCAL.KEYS.KEY _upcoming_rel ].

:end :instance.

; <<>>

:begin :instance.

upset_isect := intrans_adj_le &
  [ STEM < "upset" >,
    SYNSEM.LOCAL.KEYS.KEY _upset_rel ].

:end :instance.

; <<>>

:begin :instance.

upward_isect := intrans_adj_le &
  [ STEM < "upward" >,
    SYNSEM.LOCAL.KEYS.KEY _upward_rel ].

:end :instance.

; <<>>

:begin :instance.

usefully_pcisect := int_vp_adv_word_le &
  [ STEM < "usefully" >,
    SYNSEM.LOCAL.KEYS.KEY _usefully_rel ].

:end :instance.

; <<>>

:begin :instance.

valid_isect := intrans_adj_le &
  [ STEM < "valid" >,
    SYNSEM.LOCAL.KEYS.KEY _valid_rel ].

:end :instance.

; <<>>

:begin :instance.

variable_isect := intrans_adj_le &
  [ STEM < "variable" >,
    SYNSEM.LOCAL.KEYS.KEY _variable_rel ].

:end :instance.

; <<>>

:begin :instance.

various_isect := intrans_adj_le &
  [ STEM < "various" >,
    SYNSEM.LOCAL.KEYS.KEY _various_rel ].

:end :instance.

; <<>>

:begin :instance.

variously_isect := int_vp_adv_word_le &
  [ STEM < "variously" >,
    SYNSEM.LOCAL.KEYS.KEY _variously_rel ].

:end :instance.

; <<>>

:begin :instance.

voluntary_isect := intrans_adj_le &
  [ STEM < "voluntary" >,
    SYNSEM.LOCAL.KEYS.KEY _voluntary_rel ].

:end :instance.

; <<>>
; MULTIKEY < "well" >

:begin :instance.

wellknown_isect := intrans_adj_mle &
  [ STEM < "well", "known" >,
    SYNSEM.LOCAL.KEYS.KEY _well-known_rel ].

:end :instance.

; <<>>

:begin :instance.

wide_isect := intrans_adj_le &
  [ STEM < "wide" >,
    SYNSEM.LOCAL.KEYS.KEY _wide_rel ].

:end :instance.


; <<>>

:begin :instance.

wide_deg := degree_spec_le &
  [ STEM < "wide" >,
    SYNSEM.LOCAL.KEYS.KEY _wide_grad_rel ].

:end :instance.



; <<>>

:begin :instance.

wisely_pcisect := int_vp_adv_word_le &
  [ STEM < "wisely" >,
    SYNSEM.LOCAL.KEYS.KEY _wisely_rel ].

:end :instance.

; <<>>

:begin :instance.

workable_isect := intrans_adj_le &
  [ STEM < "workable" >,
    SYNSEM.LOCAL.KEYS.KEY _workable_rel ].

:end :instance.

; <<>>

:begin :instance.

worried_isect := intrans_adj_le &
  [ STEM < "worried" >,
    SYNSEM.LOCAL.KEYS.KEY _worried_rel ].

:end :instance.

; <<>>

:begin :instance.

young_isect := intrans_adj_le &
  [ STEM < "young" >,
    SYNSEM.LOCAL.KEYS.KEY _young_rel ].

:end :instance.

; <<>>

:begin :instance.

tide_n1 := intr_noun_word_le &
  [ STEM < "tide" >,
    SYNSEM.LOCAL.KEYS.KEY _tide_rel ].

:end :instance.

; <<>>

:begin :instance.

ascribe_v13 := mv_empty_prep_intrans_le &
  [ STEM < "ascribe" >,
    SYNSEM.LOCAL.KEYS [ KEY _ascribe_to_rel,
			    --COMPKEY _to_rel_s ] ].

:end :instance.

; <<>>

:begin :instance.

assign_v1 := mv_ditrans_le &
  [ STEM < "assign" >,
    SYNSEM.LOCAL.KEYS.KEY _assign_to_rel ].

:end :instance.

; <<>>

:begin :instance.

balance_v13 := mv_np*_trans_le &
  [ STEM < "balance" >,
    SYNSEM.LOCAL.KEYS.KEY _balance_v_rel ].

:end :instance.

; <<>>

:begin :instance.

bear_v13 := mv_np*_trans_le &
  [ STEM < "bear" >,
    SYNSEM.LOCAL.KEYS.KEY _bear_v_rel ].

:end :instance.

; <<>>

:begin :instance.

behave_v1 := mv_unerg_le &
  [ STEM < "behave" >,
    SYNSEM.LOCAL.KEYS.KEY _behave_rel ].

:end :instance.

; <<>>

:begin :instance.

boy_n1 := intr_noun_word_le &
  [ STEM < "boy" >,
    SYNSEM.LOCAL.KEYS.KEY _boy_rel ].

:end :instance.


; <<>>

:begin :instance.

breathe_v1 := mv_unerg_le &
  [ STEM < "breathe" >,
    SYNSEM.LOCAL.KEYS.KEY _breathe_rel ].

:end :instance.


; <<>>

:begin :instance.

bunch_n1 := noun_ppof_word_le &
  [ STEM < "bunch" >,
    SYNSEM.LOCAL.KEYS.KEY _bunch_rel ].

:end :instance.


; <<>>

:begin :instance.

clash_v1 := mv_unerg_le &
  [ STEM < "clash" >,
    SYNSEM.LOCAL.KEYS.KEY _clash_v_rel ].

:end :instance.


; <<>>

:begin :instance.

cold_a1 := intrans_adj_le &
  [ STEM < "cold" >,
    SYNSEM.LOCAL.KEYS.KEY _cold_rel ].

:end :instance.


; <<>>

:begin :instance.

conduct_v1 := mv_np_trans_le &
  [ STEM < "conduct" >,
    SYNSEM.LOCAL.KEYS.KEY _conduct_v_rel ].

:end :instance.


; <<>>

:begin :instance.

conflict_v1 := mv_unerg_le &
  [ STEM < "conflict" >,
    SYNSEM.LOCAL.KEYS.KEY _conflict_v_rel ].

:end :instance.


; <<>>

:begin :instance.

continental_a1 := intrans_adj_le &
  [ STEM < "continental" >,
    SYNSEM.LOCAL.KEYS.KEY _continental_rel ].

:end :instance.


; <<>>

:begin :instance.

cook_v1 := mv_unerg_le &
  [ STEM < "cook" >,
    SYNSEM.LOCAL.KEYS.KEY _cook_v_rel ].

:end :instance.


; <<>>

:begin :instance.

cooperate_v1 := mv_unerg_le &
  [ STEM < "cooperate" >,
    SYNSEM.LOCAL.KEYS.KEY _cooperate_rel ].

:end :instance.


; <<>>

:begin :instance.

cost_v1 := mv_ditrans_le &
  [ STEM < "cost" >,
    SYNSEM.LOCAL.KEYS.KEY _cost_v_rel ].

:end :instance.


; <<>>

:begin :instance.

cost_n1 := intr_noun_word_le &
  [ STEM < "cost" >,
    SYNSEM.LOCAL.KEYS.KEY _cost_n_rel ].

:end :instance.


; <<>>

:begin :instance.

count_v1 := mv_unacc_le &
  [ STEM < "count" >,
    SYNSEM.LOCAL.KEYS.KEY _count_v_rel ].

:end :instance.


; <<>>

:begin :instance.

couple_n1 := noun_ppof_word_le &
  [ STEM < "couple" >,
    SYNSEM.LOCAL.KEYS.KEY _couple_rel ].

:end :instance.


; <<>>

:begin :instance.

couple_adj := bare_unspecified_card_le & 
  [  STEM < "couple" >,
     SYNSEM.LOCAL [ CAT.HEAD intadj1,
		    KEYS.KEY.CONST_VALUE "2" ] ].
:end :instance.


; <<>>

:begin :instance.

creep_v1 := mv_unerg_le &
  [ STEM < "creep" >,
    SYNSEM.LOCAL.KEYS.KEY _creep_v_rel ].

:end :instance.


; <<>>

:begin :instance.

curious_a1 := trans_adj_le &
  [ STEM < "curious" >,
    SYNSEM.LOCAL.KEYS [ KEY _curious_rel,
			--COMPKEY _about_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

curiously_a1 := adv_word_le &
  [ STEM < "curiously" >,
    SYNSEM.LOCAL.KEYS.KEY _curiously_rel ].

:end :instance.


; <<>>

:begin :instance.

dance_v1 := mv_unerg_le &
  [ STEM < "dance" >,
    SYNSEM.LOCAL.KEYS.KEY _dance_v_rel ].

:end :instance.


; <<>>

:begin :instance.

daydream_v1 := mv_unerg_le &
  [ STEM < "daydream" >,
    SYNSEM.LOCAL.KEYS.KEY _day_dream_rel ].

:end :instance.


; <<>>

:begin :instance.

dedicate_v1 := mv_ditrans_le &
  [ STEM < "dedicate" >,
    SYNSEM.LOCAL.KEYS.KEY _dedicate_rel ].

:end :instance.


; <<>>

:begin :instance.

delay_v1 := mv_np_trans_le &
  [ STEM < "delay" >,
    SYNSEM.LOCAL.KEYS.KEY _delay_v_rel ].

:end :instance.


; <<>>

:begin :instance.

develop_v2 := mv_unacc_le &
  [ STEM < "develop" >,
    SYNSEM.LOCAL.KEYS.KEY _develop_rel ].

:end :instance.


; <<>>

:begin :instance.

down_a1 := intrans_adj_le &
  [ STEM < "down" >,
    SYNSEM.LOCAL.KEYS.KEY _down_adj_rel ].

:end :instance.


; <<>>

:begin :instance.

drive_up_v1 := mv_particle_le &
  [ STEM < "drive" >,
    SYNSEM.LOCAL.KEYS [ KEY _drive_up_rel,
			--COMPKEY _up_rel ] ].

:end :instance.


; <<>>

:begin :instance.

eavesdrop_v1 := mv_unerg_le &
  [ STEM < "eavesdrop" >,
    SYNSEM.LOCAL.KEYS.KEY _eavesdrop_rel ].

:end :instance.


; <<>>

:begin :instance.

economize_v1 := mv_unerg_le &
  [ STEM < "economize" >,
    SYNSEM.LOCAL.KEYS.KEY _economize_rel ].

:end :instance.


; <<>>

:begin :instance.

email_v1 := mv_ditrans_le &
  [ STEM < "email" >,
    SYNSEM.LOCAL.KEYS.KEY _email_v_rel ].

:end :instance.


; <<>>

:begin :instance.

endeavor_v1 := mv_unerg_le &
  [ STEM < "endeavor" >,
    SYNSEM.LOCAL.KEYS.KEY _endeavor_v_rel ].

:end :instance.


; <<>>

:begin :instance.

ensue_v1 := mv_unacc_le &
  [ STEM < "ensue" >,
    SYNSEM.LOCAL.KEYS.KEY _ensue_rel ].

:end :instance.


; <<>>

:begin :instance.

expand_v1 := mv_unerg_le &
  [ STEM < "expand" >,
    SYNSEM.LOCAL.KEYS.KEY _expand_rel ].

:end :instance.


; <<>>

:begin :instance.

familiar_a1 := intrans_adj_le &
  [ STEM < "familiar" >,
    SYNSEM.LOCAL.KEYS.KEY _familiar_rel ].

:end :instance.


; <<>>

:begin :instance.

fear_v1 := mv_np_trans_le &
  [ STEM < "fear" >,
    SYNSEM.LOCAL.KEYS.KEY _fear_v_rel ].

:end :instance.


; <<>>

:begin :instance.

fit_into_v13 := mv_empty_prep_intrans_le &
  [ STEM < "fit" >,
    SYNSEM.LOCAL.KEYS [ KEY _fit_into_rel,
			    --COMPKEY _into_rel_s ] ].

:end :instance.

; <<>>

:begin :instance.

flip_v1 := mv_np_trans_le &
  [ STEM < "flip" >,
    SYNSEM.LOCAL.KEYS.KEY _flip_v_rel ].

:end :instance.


; <<>>

:begin :instance.

flop_v1 := mv_unacc_le &
  [ STEM < "flop" >,
    SYNSEM.LOCAL.KEYS.KEY _flop_v_rel ].

:end :instance.


; <<>>

:begin :instance.

force_v1 := mv_obj_equi_le &
  [ STEM < "force" >,
    SYNSEM.LOCAL.KEYS.KEY _force_v_rel ].

:end :instance.




; <<>>

:begin :instance.

fortify_v1 := mv_np_trans_le &
  [ STEM < "fortify" >,
    SYNSEM.LOCAL.KEYS.KEY _fortify_rel ].

:end :instance.


; <<>>

:begin :instance.

forward_v1 := mv_np_trans_le &
  [ STEM < "forward" >,
    SYNSEM.LOCAL.KEYS.KEY _forward_v_rel ].

:end :instance.


; <<>>

:begin :instance.

frequent_v1 := mv_np_trans_le &
  [ STEM < "frequent" >,
    SYNSEM.LOCAL.KEYS.KEY _frequent_v_rel ].

:end :instance.


; <<>>

:begin :instance.

furthermore_adv1 := vp_adv_word_le &
  [ STEM < "furthermore" >,
    SYNSEM.LOCAL.KEYS.KEY _furthermore_rel ].

:end :instance.


; <<>>

:begin :instance.

golf_v1 := mv_unerg_le &
  [ STEM < "golf" >,
    SYNSEM.LOCAL.KEYS.KEY _golf_v_rel ].

:end :instance.


; <<>>

:begin :instance.

hang_out_v1 := mv_particle_le &
  [ STEM < "hang" >,
    SYNSEM.LOCAL.KEYS [ KEY _hang_out_rel,
			--COMPKEY _out_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

happy_a1 := intrans_adj_le &
  [ STEM < "happy" >,
    SYNSEM.LOCAL.KEYS.KEY _happy_rel ].

:end :instance.


; <<>>

:begin :instance.

happily_a1 := int_vp_adv_word_le &
  [ STEM < "happily" >,
    SYNSEM.LOCAL.KEYS.KEY _happily_rel ].

:end :instance.


; <<>>

:begin :instance.

head_out_v1 := mv_particle_pp*_le &
  [ STEM < "head" >,
    SYNSEM.LOCAL.KEYS [ KEY _head_out_rel,
			--COMPKEY _out_rel_s,
			--OCOMPKEY _to_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

head_off_v1 := mv_particle_le &
  [ STEM < "head" >,
    SYNSEM.LOCAL.KEYS [ KEY _head_off_rel,
			--COMPKEY _off_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

hike_v1 := mv_unerg_le &
  [ STEM < "hike" >,
    SYNSEM.LOCAL.KEYS.KEY _hike_v_rel ].

:end :instance.


; <<>>

:begin :instance.

hold_on_v1 := mv_particle_le &
  [ STEM < "hold" >,
    SYNSEM.LOCAL.KEYS [ KEY _hold_on_rel,
			--COMPKEY _on_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

hurry_v1 := mv_np_trans_le &
  [ STEM < "hurry" >,
    SYNSEM.LOCAL.KEYS.KEY _hurry_v_rel ].

:end :instance.


; <<>>

:begin :instance.

hurry_up_v1 := mv_particle_le &
  [ STEM < "hurry" >,
    SYNSEM.LOCAL.KEYS [ KEY _hurry_up_rel,
			--COMPKEY _up_rel ] ].

:end :instance.


; <<>>

:begin :instance.

in_a1 := intrans_adj_le &
  [ STEM < "in" >,
    SYNSEM.LOCAL.KEYS.KEY _in_adj_rel ].

:end :instance.


; <<>>

:begin :instance.

indeed := adv_word_le &
  [ STEM < "indeed" >,
    SYNSEM.LOCAL.KEYS.KEY _indeed_rel ].

:end :instance.


; <<>>

:begin :instance.

insult_v1 := mv_np_trans_le &
  [ STEM < "insult" >,
    SYNSEM.LOCAL.KEYS.KEY _insult_v_rel ].

:end :instance.


; <<>>

:begin :instance.

interest_v1 := mv_np_trans_le &
  [ STEM < "interest" >,
    SYNSEM.LOCAL.KEYS.KEY _interest_v_rel ].

:end :instance.


; <<>>

:begin :instance.

jam_deg := degree_spec_le &
  [ STEM < "jam" >,
    SYNSEM.LOCAL.KEYS.KEY _jam_grad_rel ].

:end :instance.


; <<>>


:begin :instance.

jet_off_v1 := mv_particle_le &
  [ STEM < "jet" >,
    SYNSEM.LOCAL.KEYS [ KEY _jet_off_rel,
			--COMPKEY _off_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

join_in_v13 := mv_empty_prep_intrans_le &
  [ STEM < "join" >,
    SYNSEM.LOCAL.KEYS [ KEY _join_in_rel,
			    --COMPKEY _in_rel_s ] ].

:end :instance.

; <<>>

:begin :instance.

jump_v1 := mv_unerg_le &
  [ STEM < "jump" >,
    SYNSEM.LOCAL.KEYS.KEY _jump_v_rel ].

:end :instance.


; <<>>

:begin :instance.

kind_n1 := noun_ppof_word_le &
  [ STEM < "kind" >,
    SYNSEM.LOCAL.KEYS.KEY _kind_rel ].

:end :instance.


; <<>>

:begin :instance.

land_v1 := mv_unerg_le &
  [ STEM < "land" >,
    SYNSEM.LOCAL.KEYS.KEY _land_v_rel ].

:end :instance.


; <<>>

:begin :instance.

lecture_on_v13 := mv_empty_prep_intrans_le &
  [ STEM < "lecture" >,
    SYNSEM.LOCAL.KEYS [ KEY _lecture_v_rel,
			    --COMPKEY _on_rel_s ] ].

:end :instance.

; <<>>

:begin :instance.

lend_v1 := mv_ditrans_le &
  [ STEM < "lend" >,
    SYNSEM.LOCAL.KEYS.KEY _lend_rel ].

:end :instance.


; <<>>

:begin :instance.

less_a2 := intrans_adj_le &
  [ STEM < "less" >,
    SYNSEM.LOCAL.KEYS.KEY _less_isect_rel ].

:end :instance.


; <<>>

:begin :instance.

limit_down_v1 := mv_particle_np_pp_to_le &
  [ STEM < "limit" >,
    SYNSEM.LOCAL.KEYS [ KEY _limit_down_rel,
			--COMPKEY _down_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

listen_up_v1 := mv_particle_le &
  [ STEM < "listen" >,
    SYNSEM.LOCAL.KEYS [ KEY _listen_up_rel,
			--COMPKEY _up_rel ] ].

:end :instance.


; <<>>

:begin :instance.

lively_a1 := intrans_adj_le &
  [ STEM < "lively" >,
    SYNSEM.LOCAL.KEYS.KEY _lively_rel ].

:end :instance.


; <<>>

:begin :instance.

look_to_v13 := mv_empty_prep_intrans_le &
  [ STEM < "look" >,
    SYNSEM.LOCAL.KEYS [ KEY _look_to_rel,
			    --COMPKEY _to_rel_s ] ].

:end :instance.

; <<>>

:begin :instance.

look_v1 := mv_unerg_le &
  [ STEM < "look" >,
    SYNSEM.LOCAL.KEYS.KEY _look_v_rel ].

:end :instance.


; <<>>

:begin :instance.

miscalculate_v1 := mv_unerg_le &
  [ STEM < "miscalculate" >,
    SYNSEM.LOCAL.KEYS.KEY _miscalculate_rel ].

:end :instance.


; <<>>
:begin :instance.

moreover_1 := vp_adv_post_word_le &
  [ STEM < "moreover" >,
    SYNSEM.LOCAL.KEYS.KEY _moreover_rel ].

:end :instance.


; <<>>

:begin :instance.

motivate_v1 := mv_obj_equi_le &
  [ STEM < "motivate" >,
    SYNSEM.LOCAL.KEYS.KEY _motivate_rel ].

:end :instance.


; <<>>

:begin :instance.

orientate_v1 := mv_unerg_le &
  [ STEM < "orientate" >,
    SYNSEM.LOCAL.KEYS.KEY _orientate_rel ].

:end :instance.


; <<>>

:begin :instance.

paint_v1 := mv_np_trans_le &
  [ STEM < "paint" >,
    SYNSEM.LOCAL.KEYS.KEY _paint_v_rel ].

:end :instance.


; <<>>

:begin :instance.

parachute_in_v1 := mv_particle_le &
  [ STEM < "parachute" >,
    SYNSEM.LOCAL.KEYS [ KEY _parachute_in_rel,
			--COMPKEY _in_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

park_v1 := mv_np_trans_le &
  [ STEM < "park" >,
    SYNSEM.LOCAL.KEYS.KEY _park_v_rel ].

:end :instance.


; <<>>

:begin :instance.

participation_n1 := massn_le &
  [ STEM < "participation" >,
    SYNSEM.LOCAL.KEYS.KEY _participation_rel ].

:end :instance.


; <<>>

:begin :instance.

phone_v1 := mv_np_trans_le &
  [ STEM < "phone" >,
    SYNSEM.LOCAL.KEYS.KEY _phone_v_rel ].

:end :instance.


; <<>>

:begin :instance.

point_out_v1 := mv_particle_np_pp_to_le &
  [ STEM < "point" >,
    SYNSEM.LOCAL.KEYS [ KEY _point_out_rel,
			--COMPKEY _out_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

preach_v1 := mv_unerg_le &
  [ STEM < "preach" >,
    SYNSEM.LOCAL.KEYS.KEY _preach_rel ].

:end :instance.


; <<>>

:begin :instance.

print_v1 := mv_np_trans_le &
  [ STEM < "print" >,
    SYNSEM.LOCAL.KEYS.KEY _print_v_rel ].

:end :instance.


; <<>>


:begin :instance.

process_v1 := mv_np_trans_le &
  [ STEM < "process" >,
    SYNSEM.LOCAL.KEYS.KEY _process_v_rel ].

:end :instance.


; <<>>

:begin :instance.

purchase_v1 := mv_np_trans_le &
  [ STEM < "purchase" >,
    SYNSEM.LOCAL.KEYS.KEY _purchase_v_rel ].

:end :instance.


; <<>>

:begin :instance.

reasonably_adv := degree_spec_le &
  [ STEM < "reasonably" >,
    SYNSEM.LOCAL.KEYS.KEY _reasonably_grad_rel ].

:end :instance.

; <<>>

:begin :instance.

unk-name := proper_le &
  [ -MORPHOLOGY [ STEM < "unk-name" >,
                  FORM #form ],
    SYNSEM.LOCAL [ KEYS.KEY unk_rel & [ NAMED #form ],
		   CONT.INDEX.SORT space_time ] ].

:end :instance.

; <<>>

:begin :instance.

unk-event := proper_le &
  [ -MORPHOLOGY [ STEM < "unk-event" >,
                  FORM #form ],
    SYNSEM.LOCAL [ KEYS.KEY unk_rel &
			    [ NAMED #form ],
		   CONT.INDEX.SORT meeting_sit ] ].

:end :instance.

; <<>>

:begin :instance.

unk-person := proper_le &
  [ -MORPHOLOGY [ STEM < "unk-person" >,
                  FORM #form ],
    SYNSEM.LOCAL [ KEYS.KEY unk_rel &
			    [ NAMED #form ],
		   CONT.INDEX.SORT human ] ].
			

:end :instance.

; <<>>

:begin :instance.

unk-first := proper_le &
  [ -MORPHOLOGY [ STEM < "unk-first" >,
                  FORM #form ],
    SYNSEM.LOCAL [ KEYS.KEY unk_rel &
			    [ NAMED #form ],
		   CONT.INDEX.SORT human ] ].

:end :instance.

; <<>>

:begin :instance.

unk-male := proper_le &
  [ -MORPHOLOGY [ STEM < "unk-male" >,
                  FORM #form ],
    SYNSEM.LOCAL [ KEYS.KEY unk_rel &
				[ NAMED #form ],
		   CONT.INDEX.SORT human ] ].

:end :instance.

; <<>>

:begin :instance.

unk-female := proper_le &
  [ -MORPHOLOGY [ STEM < "unk-female" >,
                  FORM #form ],
    SYNSEM.LOCAL [ KEYS.KEY unk_rel &
				[ NAMED #form ],
		   CONT.INDEX.SORT human ] ].

:end :instance.

; <<>>

:begin :instance.

unk-surname := proper_le &
  [ -MORPHOLOGY [ STEM < "unk-surname" >,
                  FORM #form ],
    SYNSEM.LOCAL [ KEYS.KEY unk_rel &
			    [ NAMED #form ],
		   CONT.INDEX.SORT human ]].

:end :instance.

; <<>>

:begin :instance.

unk-location := proper_le &
  [ -MORPHOLOGY [ STEM < "unk-location" >,
                  FORM #form ],
    SYNSEM.LOCAL [ KEYS.KEY unk_rel &
			    [ NAMED #form ],
		   CONT.INDEX.SORT location ] ].

:end :instance.

; <<>>

:begin :instance.

unk-region := proper_le &
  [ -MORPHOLOGY [ STEM < "unk-region" >,
                  FORM #form ],
    SYNSEM.LOCAL [ KEYS.KEY unk_rel &
			    [ NAMED #form ],
		   CONT.INDEX.SORT geo_location ] ].

:end :instance.

; <<>>

:begin :instance.

unk-country := proper_le &
  [ -MORPHOLOGY [ STEM < "unk-country" >,
                  FORM #form ],
    SYNSEM.LOCAL [ KEYS.KEY unk_rel &
			    [ NAMED #form ],
		   CONT.INDEX.SORT geo_location ] ].

:end :instance.

; <<>>

:begin :instance.

unk-town := proper_le &
  [ -MORPHOLOGY [ STEM < "unk-town" >,
                  FORM #form ],
    SYNSEM.LOCAL [ KEYS.KEY unk_rel &
			    [ NAMED #form ],
		   CONT.INDEX.SORT geo_location ] ].

:end :instance.

; <<>>

:begin :instance.

unk-street := proper_le &
  [ -MORPHOLOGY [ STEM < "unk-street" >,
                  FORM #form ],
    SYNSEM.LOCAL [ KEYS.KEY unk_rel &
			    [ NAMED #form ],
		   CONT.INDEX.SORT nongeo_location ] ].

:end :instance.

; <<>>

:begin :instance.

unk-institution := proper_le &
  [ -MORPHOLOGY [ STEM < "unk-institution" >,
                  FORM #form ],
    SYNSEM.LOCAL [ KEYS.KEY unk_rel &
			    [ NAMED #form ],
		   CONT.INDEX.SORT nongeo_location ] ].

:end :instance.

; <<>>

:begin :instance.

unk-hotel := proper_le &
  [ -MORPHOLOGY [ STEM < "unk-hotel" >,
                  FORM #form ],
    SYNSEM.LOCAL [ KEYS.KEY unk_rel &
			    [ NAMED #form ],
		   CONT.INDEX.SORT nongeo_location ] ].

:end :instance.

; <<>>

:begin :instance.

unk-company := proper_le &
  [ -MORPHOLOGY [ STEM < "unk-company" >,
                  FORM #form ],
    SYNSEM.LOCAL [ KEYS.KEY unk_rel &
				[ NAMED #form ],
		   CONT.INDEX.SORT inst_loc_coll_poly ] ].


:end :instance.

; <<>>
:begin :instance.

cap_n1 := intr_noun_word_le &
  [ STEM < "cap" >,
    SYNSEM.LOCAL.KEYS.KEY _cap_rel ].

:end :instance.

; <<>>

:begin :instance.

capacity_n1 := intr_noun_word_le &
  [ STEM < "capacity" >,
    SYNSEM.LOCAL.KEYS.KEY _capacity_rel ].

:end :instance.

; <<>>

:begin :instance.

carriage_n1 := intr_noun_word_le &
  [ STEM < "carriage" >,
    SYNSEM.LOCAL.KEYS.KEY _carriage_rel ].

:end :instance.

; <<>>

:begin :instance.

casino_n1 := intr_noun_word_le &
  [ STEM < "casino" >,
    SYNSEM.LOCAL.KEYS.KEY _casino_rel ].

:end :instance.

; <<>>

:begin :instance.

century_n1 := intr_noun_word_le &
  [ STEM < "century" >,
    SYNSEM.LOCAL.KEYS.KEY _century_rel ].

:end :instance.

; <<>>

:begin :instance.

charm_n1 := intr_noun_word_le &
  [ STEM < "charm" >,
    SYNSEM.LOCAL.KEYS.KEY _charm_rel ].

:end :instance.

; <<>>

:begin :instance.

chime_n1 := intr_noun_word_le &
  [ STEM < "chime" >,
    SYNSEM.LOCAL.KEYS.KEY _chime_rel ].

:end :instance.

; <<>>

:begin :instance.

curfew_n1 := intr_noun_word_le &
  [ STEM < "curfew" >,
    SYNSEM.LOCAL.KEYS.KEY _curfew_rel ].

:end :instance.

; <<>>

:begin :instance.

decade_n1 := intr_noun_word_le &
  [ STEM < "decade" >,
    SYNSEM.LOCAL.KEYS.KEY _decade_rel ].

:end :instance.

; <<>>

:begin :instance.

detour_n1 := intr_noun_word_le &
  [ STEM < "detour" >,
    SYNSEM.LOCAL.KEYS.KEY _detour_rel ].

:end :instance.

; <<>>

:begin :instance.

dike_n1 := intr_noun_word_le &
  [ STEM < "dike" >,
    SYNSEM.LOCAL.KEYS.KEY _dike_rel ].

:end :instance.

; <<>>

:begin :instance.

drawer_n1 := intr_noun_word_le &
  [ STEM < "drawer" >,
    SYNSEM.LOCAL.KEYS.KEY _drawer_rel ].

:end :instance.

; <<>>

:begin :instance.

drop_n_n1 := intr_noun_word_le &
  [ STEM < "drop" >,
    SYNSEM.LOCAL.KEYS.KEY _drop_n_rel ].

:end :instance.

; <<>>

:begin :instance.

ferry_n1 := intr_noun_word_le &
  [ STEM < "ferry" >,
    SYNSEM.LOCAL.KEYS.KEY _ferry_rel ].

:end :instance.

; <<>>

:begin :instance.

fitness_n1 := intr_noun_word_le &
  [ STEM < "fitness" >,
    SYNSEM.LOCAL.KEYS.KEY _fitness_rel ].

:end :instance.

; <<>>

:begin :instance.

flair_n1 := intr_noun_word_le &
  [ STEM < "flair" >,
    SYNSEM.LOCAL.KEYS.KEY _flair_rel ].

:end :instance.

; <<>>

:begin :instance.

floodgate_n1 := intr_noun_word_le &
  [ STEM < "floodgate" >,
    SYNSEM.LOCAL.KEYS.KEY _floodgate_rel ].

:end :instance.

; <<>>

:begin :instance.

harbor_n1 := intr_noun_word_le &
  [ STEM < "harbor" >,
    SYNSEM.LOCAL.KEYS.KEY _harbor_rel ].

:end :instance.

; <<>>

:begin :instance.

hint_n_n1 := intr_noun_word_le &
  [ STEM < "hint" >,
    SYNSEM.LOCAL.KEYS.KEY _hint_n_rel ].

:end :instance.

; <<>>

:begin :instance.

locker_n1 := intr_noun_word_le &
  [ STEM < "locker" >,
    SYNSEM.LOCAL.KEYS.KEY _locker_rel ].

:end :instance.

; <<>>

:begin :instance.

low_n1 := intr_noun_word_le &
  [ STEM < "low" >,
    SYNSEM.LOCAL.KEYS.KEY _low_n_rel ].

:end :instance.

; <<>>

:begin :instance.

pillar_n1 := intr_noun_word_le &
  [ STEM < "pillar" >,
    SYNSEM.LOCAL.KEYS.KEY _pillar_rel ].

:end :instance.

; <<>>

:begin :instance.

portion_n1 := noun_ppof_word_le &
  [ STEM < "portion" >,
    SYNSEM.LOCAL.KEYS.KEY _portion_rel ].

:end :instance.

; <<>>

:begin :instance.

scenery_n1 := intr_noun_word_le &
  [ STEM < "scenery" >,
    SYNSEM.LOCAL.KEYS.KEY _scenery_rel ].

:end :instance.

; <<>>

:begin :instance.

severity_n1 := intr_noun_word_le &
  [ STEM < "severity" >,
    SYNSEM.LOCAL.KEYS.KEY _severity_rel ].

:end :instance.

; <<>>

:begin :instance.

ship_n1 := intr_noun_word_le &
  [ STEM < "ship" >,
    SYNSEM.LOCAL.KEYS.KEY _ship_n_rel ].

:end :instance.

; <<>>

:begin :instance.

steamer_n1 := intr_noun_word_le &
  [ STEM < "steamer" >,
    SYNSEM.LOCAL.KEYS.KEY _steamer_rel ].

:end :instance.

; <<>>

:begin :instance.

transfer_n1 := intr_noun_word_le &
  [ STEM < "transfer" >,
    SYNSEM.LOCAL.KEYS.KEY _transfer_n_rel ].

:end :instance.

; <<>>

:begin :instance.

tutorial_n1 := intr_noun_word_le &
  [ STEM < "tutorial" >,
    SYNSEM.LOCAL.KEYS.KEY _tutorial_rel ].

:end :instance.

; <<>>

:begin :instance.

vicinity_n1 := intr_noun_word_le &
  [ STEM < "vicinity" >,
    SYNSEM.LOCAL.KEYS.KEY _vicinity_rel ].

:end :instance.

; <<>>

:begin :instance.

walk_n1 := intr_noun_word_le &
  [ STEM < "walk" >,
    SYNSEM.LOCAL.KEYS.KEY _walk_n_rel ].

:end :instance.

; <<>>

:begin :instance.

wallet_n1 := intr_noun_word_le &
  [ STEM < "wallet" >,
    SYNSEM.LOCAL.KEYS.KEY _wallet_rel ].

:end :instance.

; <<>>

:begin :instance.

wood_n1 := intr_noun_word_le &
  [ STEM < "wood" >,
    SYNSEM.LOCAL.KEYS.KEY _wood_rel ].

:end :instance.

; <<>>

:begin :instance.

adrenaline_n1 := intr_noun_word_le &
  [ STEM < "adrenaline" >,
    SYNSEM.LOCAL.KEYS.KEY _adrenaline_rel ].

:end :instance.

; <<>>

:begin :instance.

affiliate_n1 := intr_noun_word_le &
  [ STEM < "affiliate" >,
    SYNSEM.LOCAL.KEYS.KEY _affiliate_rel ].

:end :instance.

; <<>>

:begin :instance.

amenities_n1 := intr_noun_word_le &
  [ STEM < "amenities" >,
    SYNSEM.LOCAL.KEYS.KEY _amenities_rel ].

:end :instance.

; <<>>

:begin :instance.

ass_n1 := intr_noun_word_le &
  [ STEM < "ass" >,
    SYNSEM.LOCAL.KEYS.KEY _ass_rel ].

:end :instance.

; <<>>

:begin :instance.

associate_n_n1 := intr_noun_word_le &
  [ STEM < "associate" >,
    SYNSEM.LOCAL.KEYS.KEY _associate_n_rel ].

:end :instance.

; <<>>

:begin :instance.

attribute_n1 := intr_noun_word_le &
  [ STEM < "attribute" >,
    SYNSEM.LOCAL.KEYS.KEY _attribute_n_rel ].

:end :instance.

; <<>>

:begin :instance.

awhile_nom := np_adv_le &
  [ STEM < "awhile" >,
    SYNSEM.LOCAL [ CAT.HEAD.CASE acc,
                   CONT.LISZT <! _awhile_rel, def_rel !> ] ].

:end :instance.


; <<>>

:begin :instance.

bag_n1 := intr_noun_word_le &
  [ STEM < "bag" >,
    SYNSEM.LOCAL.KEYS.KEY _bag_n_rel ].

:end :instance.

; <<>>

:begin :instance.

bill_n1 := intr_noun_word_le &
  [ STEM < "bill" >,
    SYNSEM.LOCAL.KEYS.KEY _bill_n_rel ].

:end :instance.

; <<>>

:begin :instance.

billing_n1 := intr_noun_word_le &
  [ STEM < "billing" >,
    SYNSEM.LOCAL.KEYS.KEY _billing_rel ].

:end :instance.

; <<>>

:begin :instance.

boat_n1 := intr_noun_word_le &
  [ STEM < "boat" >,
    SYNSEM.LOCAL.KEYS.KEY _boat_n_rel ].

:end :instance.

; <<>>

:begin :instance.

bureaucracy_n1 := intr_noun_word_le &
  [ STEM < "bureaucracy" >,
    SYNSEM.LOCAL.KEYS.KEY _bureaucracy_rel ].

:end :instance.

; <<>>

:begin :instance.

calculation_n1 := intr_noun_word_le &
  [ STEM < "calculation" >,
    SYNSEM.LOCAL.KEYS.KEY _calculation_rel ].

:end :instance.

; <<>>

:begin :instance.

castle_n1 := intr_noun_word_le &
  [ STEM < "castle" >,
    SYNSEM.LOCAL.KEYS.KEY _castle_rel ].

:end :instance.

; <<>>

:begin :instance.

characteristic_n1 := intr_noun_word_le &
  [ STEM < "characteristic" >,
    SYNSEM.LOCAL.KEYS.KEY _characteristic_n_rel ].

:end :instance.

; <<>>

:begin :instance.

checkout_n1 := intr_noun_word_le &
  [ STEM < "checkout" >,
    SYNSEM.LOCAL.KEYS.KEY _checkout_rel ].

:end :instance.

; <<>>

:begin :instance.

checkup_n1 := intr_noun_word_le &
  [ STEM < "checkup" >,
    SYNSEM.LOCAL.KEYS.KEY _checkup_rel ].

:end :instance.

; <<>>

:begin :instance.

chick_n1 := intr_noun_word_le &
  [ STEM < "chick" >,
    SYNSEM.LOCAL.KEYS.KEY _chick_rel ].

:end :instance.

; <<>>

:begin :instance.

chimney_n1 := intr_noun_word_le &
  [ STEM < "chimney" >,
    SYNSEM.LOCAL.KEYS.KEY _chimney_rel ].

:end :instance.

; <<>>

:begin :instance.

citizen_n1 := intr_noun_word_le &
  [ STEM < "citizen" >,
    SYNSEM.LOCAL.KEYS.KEY _citizen_rel ].

:end :instance.

; <<>>

:begin :instance.

concierge_n1 := intr_noun_word_le &
  [ STEM < "concierge" >,
    SYNSEM.LOCAL.KEYS.KEY _concierge_rel ].

:end :instance.

; <<>>

:begin :instance.

constraint_n1 := intr_noun_word_le &
  [ STEM < "constraint" >,
    SYNSEM.LOCAL.KEYS.KEY _constraint_rel ].

:end :instance.

; <<>>

:begin :instance.

contract_n1 := intr_noun_word_le &
  [ STEM < "contract" >,
    SYNSEM.LOCAL.KEYS.KEY _contract_n_rel ].

:end :instance.

; <<>>

:begin :instance.

crib_n1 := intr_noun_word_le &
  [ STEM < "crib" >,
    SYNSEM.LOCAL.KEYS.KEY _crib_n_rel ].

:end :instance.

; <<>>

:begin :instance.

custom_n1 := intr_noun_word_le &
  [ STEM < "custom" >,
    SYNSEM.LOCAL.KEYS.KEY _custom_rel ].

:end :instance.

; <<>>

:begin :instance.

customs_n1 := intr_noun_word_le &
  [ STEM < "customs" >,
    SYNSEM.LOCAL.KEYS.KEY _customs_rel ].

:end :instance.

; <<>>

:begin :instance.

daylight_n1 := intr_noun_word_le &
  [ STEM < "daylight" >,
    SYNSEM.LOCAL.KEYS.KEY _daylight_rel ].

:end :instance.

; <<>>
; MULTIKEY < "deutsche" >

:begin :instance.

deutsche_mark_n1 := intr_noun_word_mle1 &
  [ STEM < "deutsche", "mark" >,
    SYNSEM.LOCAL.KEYS.KEY _deutschmark_rel ].

:end :instance.

; <<>>

:begin :instance.

development_n1 := intr_noun_word_le &
  [ STEM < "development" >,
    SYNSEM.LOCAL.KEYS.KEY _development_rel ].

:end :instance.

; <<>>

:begin :instance.

diet_n1 := intr_noun_word_le &
  [ STEM < "diet" >,
    SYNSEM.LOCAL.KEYS.KEY _diet_n_rel ].

:end :instance.

; <<>>

:begin :instance.

differential_n1 := intr_noun_word_le &
  [ STEM < "differential" >,
    SYNSEM.LOCAL.KEYS.KEY _differential_n_rel ].

:end :instance.

; <<>>

:begin :instance.

disappointment_n1 := intr_noun_word_le &
  [ STEM < "disappointment" >,
    SYNSEM.LOCAL.KEYS.KEY _disappointment_rel ].

:end :instance.

; <<>>

:begin :instance.

doc_n1 := intr_noun_word_le &
  [ STEM < "doc" >,
    SYNSEM.LOCAL.KEYS.KEY _doc_rel ].

:end :instance.

; <<>>

:begin :instance.

double_n1 := intr_noun_word_le &
  [ STEM < "double" >,
    SYNSEM.LOCAL.KEYS.KEY _double_n_rel ].

:end :instance.

; <<>>

:begin :instance.

economy_n1 := intr_noun_word_le &
  [ STEM < "economy" >,
    SYNSEM.LOCAL.KEYS.KEY _economy_rel ].

:end :instance.

; <<>>

:begin :instance.

engagement_n1 := intr_noun_word_le &
  [ STEM < "engagement" >,
    SYNSEM.LOCAL.KEYS.KEY _engagement_rel ].

:end :instance.

; <<>>

:begin :instance.

entertainer_n1 := intr_noun_word_le &
  [ STEM < "entertainer" >,
    SYNSEM.LOCAL.KEYS.KEY _entertainer_rel ].

:end :instance.

; <<>>

:begin :instance.

error_n1 := intr_noun_word_le &
  [ STEM < "error" >,
    SYNSEM.LOCAL.KEYS.KEY _error_rel ].

:end :instance.

; <<>>

:begin :instance.

estimate_n1 := intr_noun_word_le &
  [ STEM < "estimate" >,
    SYNSEM.LOCAL.KEYS.KEY _estimate_n_rel ].

:end :instance.

; <<>>

:begin :instance.

euro_n1 := intr_noun_word_le &
  [ STEM < "euro" >,
    SYNSEM.LOCAL.KEYS.KEY _euro_rel ].

:end :instance.

; <<>>

:begin :instance.

ex_n1 := intr_noun_word_le &
  [ STEM < "ex" >,
    SYNSEM.LOCAL.KEYS.KEY _ex_rel ].

:end :instance.

; <<>>

:begin :instance.

excitement_n1 := intr_noun_word_le &
  [ STEM < "excitement" >,
    SYNSEM.LOCAL.KEYS.KEY _excitement_rel ].

:end :instance.

; <<>>

:begin :instance.

expo_n1 := intr_noun_word_le &
  [ STEM < "expo" >,
    SYNSEM.LOCAL.KEYS.KEY _expo_rel ].

:end :instance.

; <<>>

:begin :instance.

factor_n1 := intr_noun_word_le &
  [ STEM < "factor" >,
    SYNSEM.LOCAL.KEYS.KEY _factor_n_rel ].

:end :instance.

; <<>>

:begin :instance.

feature_n1 := intr_noun_word_le &
  [ STEM < "feature" >,
    SYNSEM.LOCAL.KEYS.KEY _feature_n_rel ].

:end :instance.

; <<>>

:begin :instance.

flexibility_n1 := intr_noun_word_le &
  [ STEM < "flexibility" >,
    SYNSEM.LOCAL.KEYS.KEY _flexibility_rel ].

:end :instance.

; <<>>

:begin :instance.

folks_n1 := plurn_le &
  [ STEM < "folks" >,
    SYNSEM.LOCAL.KEYS.KEY _folks_rel ].

:end :instance.

; <<>>

:begin :instance.

football_n1 := massn_le &
  [ STEM < "football" >,
    SYNSEM.LOCAL.KEYS.KEY _football_rel ].

:end :instance.

; <<>>

:begin :instance.

gum_n1 := intr_noun_word_le &
  [ STEM < "gum" >,
    SYNSEM.LOCAL.KEYS.KEY _gum_n_rel ].

:end :instance.

; <<>>

:begin :instance.

guru_n1 := intr_noun_word_le &
  [ STEM < "guru" >,
    SYNSEM.LOCAL.KEYS.KEY _guru_rel ].

:end :instance.

; <<>>

:begin :instance.

hair_n1 := intr_noun_word_le &
  [ STEM < "hair" >,
    SYNSEM.LOCAL.KEYS.KEY _hair_rel ].

:end :instance.

; <<>>

:begin :instance.

hop_n1 := intr_noun_word_le &
  [ STEM < "hop" >,
    SYNSEM.LOCAL.KEYS.KEY _hop_n_rel ].

:end :instance.

; <<>>

:begin :instance.

horn_n1 := intr_noun_word_le &
  [ STEM < "horn" >,
    SYNSEM.LOCAL.KEYS.KEY _horn_n_rel ].

:end :instance.

; <<>>

:begin :instance.

layover_n1 := intr_noun_word_le &
  [ STEM < "layover" >,
    SYNSEM.LOCAL.KEYS.KEY _layover_rel ].

:end :instance.

; <<>>

:begin :instance.

leg_n1 := intr_noun_word_le &
  [ STEM < "leg" >,
    SYNSEM.LOCAL.KEYS.KEY _leg_n_rel ].

:end :instance.

; <<>>

:begin :instance.

limo_n1 := intr_noun_word_le &
  [ STEM < "limo" >,
    SYNSEM.LOCAL.KEYS.KEY _limo_rel ].

:end :instance.

; <<>>

:begin :instance.

literature_n1 := intr_noun_word_le &
  [ STEM < "literature" >,
    SYNSEM.LOCAL.KEYS.KEY _literature_rel ].

:end :instance.

; <<>>

:begin :instance.

local_n1 := intr_noun_word_le &
  [ STEM < "local" >,
    SYNSEM.LOCAL.KEYS.KEY _local_n_rel ].

:end :instance.

; <<>>

:begin :instance.

luggage_n1 := intr_noun_word_le &
  [ STEM < "luggage" >,
    SYNSEM.LOCAL.KEYS.KEY _luggage_rel ].

:end :instance.

; <<>>

:begin :instance.

math_n1 := intr_noun_word_le &
  [ STEM < "math" >,
    SYNSEM.LOCAL.KEYS.KEY _math_rel ].

:end :instance.

; <<>>

:begin :instance.

maximum_n1 := intr_noun_word_le &
  [ STEM < "maximum" >,
    SYNSEM.LOCAL.KEYS.KEY _maximum_n_rel ].

:end :instance.

; <<>>

:begin :instance.

mentality_n1 := intr_noun_word_le &
  [ STEM < "mentality" >,
    SYNSEM.LOCAL.KEYS.KEY _mentality_rel ].

:end :instance.

; <<>>

:begin :instance.

meridian_n1 := intr_noun_word_le &
  [ STEM < "meridian" >,
    SYNSEM.LOCAL.KEYS.KEY _meridian_rel ].

:end :instance.

; <<>>

:begin :instance.

midafternoon_n1 := intr_noun_word_le &
  [ STEM < "midafternoon" >,
    SYNSEM.LOCAL.KEYS.KEY _midafternoon_rel ].

:end :instance.

; <<>>

:begin :instance.

minimum_n1 := intr_noun_word_le &
  [ STEM < "minimum" >,
    SYNSEM.LOCAL.KEYS.KEY _minimum_n_rel ].

:end :instance.

; <<>>

:begin :instance.

minus_n1 := intr_noun_word_le &
  [ STEM < "minus" >,
    SYNSEM.LOCAL.KEYS.KEY _minus_n_rel ].

:end :instance.

; <<>>

:begin :instance.

nature_n1 := noun_ppof_word_le &
  [ STEM < "nature" >,
    SYNSEM.LOCAL.KEYS.KEY _nature_rel ].

:end :instance.

; <<>>

:begin :instance.

nicety_n1 := intr_noun_word_le &
  [ STEM < "nicety" >,
    SYNSEM.LOCAL.KEYS.KEY _nicety_rel ].

:end :instance.

; <<>>

:begin :instance.

non-smoking_n1 := intr_noun_word_le &
  [ STEM < "nonsmoking" >,
    SYNSEM.LOCAL.KEYS.KEY _non_smoking_n_rel ].

:end :instance.

; <<>>

:begin :instance.

overview_n1 := intr_noun_word_le &
  [ STEM < "overview" >,
    SYNSEM.LOCAL.KEYS.KEY _overview_rel ].

:end :instance.

; <<>>

:begin :instance.

pain_n1 := intr_noun_word_le &
  [ STEM < "pain" >,
    SYNSEM.LOCAL.KEYS.KEY _pain_rel ].

:end :instance.

; <<>>

:begin :instance.

palace_n1 := intr_noun_word_le &
  [ STEM < "palace" >,
    SYNSEM.LOCAL.KEYS.KEY _palace_rel ].

:end :instance.

; <<>>

:begin :instance.

parachute_n1 := intr_noun_word_le &
  [ STEM < "parachute" >,
    SYNSEM.LOCAL.KEYS.KEY _parachute_n_rel ].

:end :instance.

; <<>>

:begin :instance.

passport_n1 := intr_noun_word_le &
  [ STEM < "passport" >,
    SYNSEM.LOCAL.KEYS.KEY _passport_rel ].

:end :instance.

; <<>>
; MULTIKEY < "per" >

:begin :instance.

per_diem_n1 := intr_noun_word_mle1 &
  [ STEM < "per", "diem" >,
    SYNSEM.LOCAL.KEYS.KEY _per_diem_rel ].

:end :instance.

; <<>>

:begin :instance.

phrase_n1 := intr_noun_word_le &
  [ STEM < "phrase" >,
    SYNSEM.LOCAL.KEYS.KEY _phrase_n_rel ].

:end :instance.

; <<>>

:begin :instance.

pillow_n1 := intr_noun_word_le &
  [ STEM < "pillow" >,
    SYNSEM.LOCAL.KEYS.KEY _pillow_n_rel ].

:end :instance.

; <<>>

:begin :instance.

pin_n1 := intr_noun_word_le &
  [ STEM < "pin" >,
    SYNSEM.LOCAL.KEYS.KEY _pin_n_rel ].

:end :instance.

; <<>>

:begin :instance.

piss_n1 := intr_noun_word_le &
  [ STEM < "piss" >,
    SYNSEM.LOCAL.KEYS.KEY _piss_n_rel ].

:end :instance.

; <<>>

:begin :instance.

plot_n1 := intr_noun_word_le &
  [ STEM < "plot" >,
    SYNSEM.LOCAL.KEYS.KEY _plot_n_rel ].

:end :instance.

; <<>>

:begin :instance.

plus_n1 := intr_noun_word_le &
  [ STEM < "plus" >,
    SYNSEM.LOCAL.KEYS.KEY _plus_n_rel ].

:end :instance.

; <<>>

:begin :instance.

pretzel_n1 := intr_noun_word_le &
  [ STEM < "pretzel" >,
    SYNSEM.LOCAL.KEYS.KEY _pretzel_rel ].

:end :instance.

; <<>>

:begin :instance.

pricing_n1 := intr_noun_word_le &
  [ STEM < "pricing" >,
    SYNSEM.LOCAL.KEYS.KEY _pricing_rel ].

:end :instance.

; <<>>

:begin :instance.

privacy_n1 := intr_noun_word_le &
  [ STEM < "privacy" >,
    SYNSEM.LOCAL.KEYS.KEY _privacy_rel ].

:end :instance.

; <<>>

:begin :instance.

promotion_n1 := intr_noun_word_le &
  [ STEM < "promotion" >,
    SYNSEM.LOCAL.KEYS.KEY _promotion_rel ].

:end :instance.

; <<>>

:begin :instance.

radius_n1 := intr_noun_word_le &
  [ STEM < "radius" >,
    SYNSEM.LOCAL.KEYS.KEY _radius_rel ].

:end :instance.

; <<>>

:begin :instance.

repetition_n1 := intr_noun_word_le &
  [ STEM < "repetition" >,
    SYNSEM.LOCAL.KEYS.KEY _repetition_rel ].

:end :instance.

; <<>>

:begin :instance.

requirement_n1 := intr_noun_word_le &
  [ STEM < "requirement" >,
    SYNSEM.LOCAL.KEYS.KEY _requirement_rel ].

:end :instance.

; <<>>

:begin :instance.

retirement_n1 := intr_noun_word_le &
  [ STEM < "retirement" >,
    SYNSEM.LOCAL.KEYS.KEY _retirement_rel ].

:end :instance.

; <<>>

:begin :instance.

reverse_n1 := intr_noun_word_le &
  [ STEM < "reverse" >,
    SYNSEM.LOCAL.KEYS.KEY _reverse_n_rel ].

:end :instance.

; <<>>

:begin :instance.

savings_n1 := intr_noun_word_le &
  [ STEM < "savings" >,
    SYNSEM.LOCAL.KEYS.KEY _savings_rel ].

:end :instance.

; <<>>

:begin :instance.

schmuck_n1 := intr_noun_word_le &
  [ STEM < "schmuck" >,
    SYNSEM.LOCAL.KEYS.KEY _schmuck_rel ].

:end :instance.

; <<>>

:begin :instance.

shuttle_n1 := intr_noun_word_le &
  [ STEM < "shuttle" >,
    SYNSEM.LOCAL.KEYS.KEY _shuttle_n_rel ].

:end :instance.

; <<>>

:begin :instance.

smoking_n1 := intr_noun_word_le &
  [ STEM < "smoking" >,
    SYNSEM.LOCAL.KEYS.KEY _smoking_n_rel ].

:end :instance.

; <<>>

:begin :instance.

sofa_n1 := intr_noun_word_le &
  [ STEM < "sofa" >,
    SYNSEM.LOCAL.KEYS.KEY _sofa_rel ].

:end :instance.

; <<>>

:begin :instance.

specifics_n1 := intr_noun_word_le &
  [ STEM < "specifics" >,
    SYNSEM.LOCAL.KEYS.KEY _specifics_rel ].

:end :instance.

; <<>>

:begin :instance.

splurge_n1 := intr_noun_word_le &
  [ STEM < "splurge" >,
    SYNSEM.LOCAL.KEYS.KEY _splurge_rel ].

:end :instance.

; <<>>

:begin :instance.

sporting_n1 := intr_noun_word_le &
  [ STEM < "sporting" >,
    SYNSEM.LOCAL.KEYS.KEY _sporting_rel ].

:end :instance.

; <<>>

:begin :instance.

symphony_n1 := intr_noun_word_le &
  [ STEM < "symphony" >,
    SYNSEM.LOCAL.KEYS.KEY _symphony_rel ].

:end :instance.

; <<>>

:begin :instance.

tab_n1 := intr_noun_word_le &
  [ STEM < "tab" >,
    SYNSEM.LOCAL.KEYS.KEY _tab_rel ].

:end :instance.

; <<>>

:begin :instance.

ton_n1 := intr_noun_word_le &
  [ STEM < "ton" >,
    SYNSEM.LOCAL.KEYS.KEY _ton_rel ].

:end :instance.

; <<>>

:begin :instance.

trade_n1 := intr_noun_word_le &
  [ STEM < "trade" >,
    SYNSEM.LOCAL.KEYS.KEY _trade_rel ].

:end :instance.

; <<>>

:begin :instance.

turnout_n1 := intr_noun_word_le &
  [ STEM < "turnout" >,
    SYNSEM.LOCAL.KEYS.KEY _turnout_rel ].

:end :instance.

; <<>>

:begin :instance.

urine_n1 := intr_noun_word_le &
  [ STEM < "urine" >,
    SYNSEM.LOCAL.KEYS.KEY _urine_rel ].

:end :instance.

; <<>>

:begin :instance.

variety_n1 := intr_noun_word_le &
  [ STEM < "variety" >,
    SYNSEM.LOCAL.KEYS.KEY _variety_rel ].

:end :instance.

; <<>>

:begin :instance.

warning_n1 := intr_noun_word_le &
  [ STEM < "warning" >,
    SYNSEM.LOCAL.KEYS.KEY _warning_rel ].

:end :instance.

; <<>>

:begin :instance.

whatnot_n1 := intr_noun_word_le &
  [ STEM < "whatnot" >,
    SYNSEM.LOCAL.KEYS.KEY _whatnot_rel ].

:end :instance.

; <<>>

:begin :instance.

workaholic_n1 := intr_noun_word_le &
  [ STEM < "workaholic" >,
    SYNSEM.LOCAL.KEYS.KEY _workaholic_n_rel ].

:end :instance.

; <<>>

:begin :instance.

workout_n1 := intr_noun_word_le &
  [ STEM < "workout" >,
    SYNSEM.LOCAL.KEYS.KEY _workout_rel ].

:end :instance.

; <<>>

:begin :instance.

workplace_n1 := intr_noun_word_le &
  [ STEM < "workplace" >,
    SYNSEM.LOCAL.KEYS.KEY _workplace_rel ].

:end :instance.

; <<>>

:begin :instance.

yard_n1 := intr_noun_word_le &
  [ STEM < "yard" >,
    SYNSEM.LOCAL.KEYS.KEY _yard_rel ].

:end :instance.

; <<>>

:begin :instance.

accessible_a1 := intrans_adj_le &
  [ STEM < "accessible" >,
    SYNSEM.LOCAL.KEYS.KEY _accessible_rel ].

:end :instance.

; <<>>

:begin :instance.

addicted_a1 := intrans_adj_le &
  [ STEM < "addicted" >,
    SYNSEM.LOCAL.KEYS.KEY _addicted_rel ].

:end :instance.

; <<>>

:begin :instance.

ample_a1 := intrans_adj_le &
  [ STEM < "ample" >,
    SYNSEM.LOCAL.KEYS.KEY _ample_rel ].

:end :instance.

; <<>>

:begin :instance.

appreciated_a1 := intrans_adj_le &
  [ STEM < "appreciated" >,
    SYNSEM.LOCAL.KEYS.KEY _appreciated_rel ].

:end :instance.

; <<>>

:begin :instance.

automatic_a1 := intrans_adj_le &
  [ STEM < "automatic" >,
    SYNSEM.LOCAL.KEYS.KEY _automatic_rel ].

:end :instance.

; <<>>

:begin :instance.

binding_a1 := intrans_adj_le &
  [ STEM < "binding" >,
    SYNSEM.LOCAL.KEYS.KEY _binding_rel ].

:end :instance.

; <<>>

:begin :instance.

civil_a1 := intrans_adj_le &
  [ STEM < "civil" >,
    SYNSEM.LOCAL.KEYS.KEY _civil_rel ].

:end :instance.

; <<>>

:begin :instance.

crooked_a1 := intrans_adj_le &
  [ STEM < "crooked" >,
    SYNSEM.LOCAL.KEYS.KEY _crooked_rel ].

:end :instance.

; <<>>

:begin :instance.

deciding_a1 := intrans_adj_le &
  [ STEM < "deciding" >,
    SYNSEM.LOCAL.KEYS.KEY _deciding_rel ].

:end :instance.

; <<>>

:begin :instance.

distinct_a1 := intrans_adj_le &
  [ STEM < "distinct" >,
    SYNSEM.LOCAL.KEYS.KEY _distinct_rel ].

:end :instance.

; <<>>

:begin :instance.

effective_a1 := intrans_adj_le &
  [ STEM < "effective" >,
    SYNSEM.LOCAL.KEYS.KEY _effective_rel ].

:end :instance.

; <<>>

:begin :instance.

famous_a1 := intrans_adj_le &
  [ STEM < "famous" >,
    SYNSEM.LOCAL.KEYS.KEY _famous_rel ].

:end :instance.

; <<>>

:begin :instance.

female_a1 := intrans_adj_le &
  [ STEM < "female" >,
    SYNSEM.LOCAL.KEYS.KEY _female_rel ].

:end :instance.

; <<>>

:begin :instance.

financial_a1 := intrans_adj_le &
  [ STEM < "financial" >,
    SYNSEM.LOCAL.KEYS.KEY _financial_rel ].

:end :instance.

; <<>>
; MULTIKEY < "full" >

:begin :instance.

full-time_a1 := intrans_adj_mle &
  [ STEM < "full", "time" >,
    SYNSEM.LOCAL.KEYS.KEY _full_time_rel ].

:end :instance.

; <<>>

:begin :instance.

horrified_a1 := intrans_adj_le &
  [ STEM < "horrified" >,
    SYNSEM.LOCAL.KEYS.KEY _horrified_rel ].

:end :instance.

; <<>>

:begin :instance.

human_a1 := intrans_adj_le &
  [ STEM < "human" >,
    SYNSEM.LOCAL.KEYS.KEY _human_isect_rel ].

:end :instance.

; <<>>

:begin :instance.

impractical_a1 := intrans_adj_le &
  [ STEM < "impractical" >,
    SYNSEM.LOCAL.KEYS.KEY _impractical_rel ].

:end :instance.

; <<>>

:begin :instance.

lastnamed_a1 := intrans_adj_le &
  [ STEM < "lastnamed" >,
    SYNSEM.LOCAL.KEYS.KEY _lastnamed_rel ].

:end :instance.

; <<>>

:begin :instance.

literary_a1 := intrans_adj_le &
  [ STEM < "literary" >,
    SYNSEM.LOCAL.KEYS.KEY _literary_rel ].

:end :instance.

; <<>>

:begin :instance.

occasional_a1 := intrans_adj_le &
  [ STEM < "occasional" >,
    SYNSEM.LOCAL.KEYS.KEY _occasional_rel ].

:end :instance.

; <<>>
; MULTIKEY < "open" >

:begin :instance.

open_plan_a1 := intrans_adj_mle &
  [ STEM < "open", "plan" >,
    SYNSEM.LOCAL.KEYS.KEY _open_plan_rel ].

:end :instance.

; <<>>

:begin :instance.

qualitative_a1 := intrans_adj_le &
  [ STEM < "qualitative" >,
    SYNSEM.LOCAL.KEYS.KEY _qualitative_rel ].

:end :instance.

; <<>>

:begin :instance.

rich_a1 := intrans_adj_le &
  [ STEM < "rich" >,
    SYNSEM.LOCAL.KEYS.KEY _rich_rel ].

:end :instance.

; <<>>

:begin :instance.

satisfied_a1 := intrans_adj_le &
  [ STEM < "satisfied" >,
    SYNSEM.LOCAL.KEYS.KEY _satisfied_rel ].

:end :instance.

; <<>>
; MULTIKEY < "so" >

:begin :instance.

so-called_a1 := intrans_adj_mle &
  [ STEM < "so", "called" >,
    SYNSEM.LOCAL.KEYS.KEY _so_called_rel ].

:end :instance.

; <<>>
; MULTIKEY < "sold" >

:begin :instance.

sold_out_a1 := intrans_adj_mle &
  [ STEM < "sold", "out" >,
    SYNSEM.LOCAL.KEYS.KEY _sold_out_rel ].

:end :instance.

; <<>>

:begin :instance.

strained_a1 := intrans_adj_le &
  [ STEM < "strained" >,
    SYNSEM.LOCAL.KEYS.KEY _strained_rel ].

:end :instance.

; <<>>

:begin :instance.

temporary_a1 := intrans_adj_le &
  [ STEM < "temporary" >,
    SYNSEM.LOCAL.KEYS.KEY _temporary_rel ].

:end :instance.

; <<>>
; MULTIKEY < "time" >

:begin :instance.

time-saving_a1 := intrans_adj_mle &
  [ STEM < "time", "saving" >,
    SYNSEM.LOCAL.KEYS.KEY _time_saving_rel ].

:end :instance.

; <<>>

:begin :instance.

typical_a1 := intrans_adj_le &
  [ STEM < "typical" >,
    SYNSEM.LOCAL.KEYS.KEY _typical_rel ].

:end :instance.

; <<>>

:begin :instance.

uncomfortable_a1 := intrans_adj_le &
  [ STEM < "uncomfortable" >,
    SYNSEM.LOCAL.KEYS.KEY _uncomfortable_rel ].

:end :instance.

; <<>>

:begin :instance.

upstream_a1 := intrans_adj_le &
  [ STEM < "upstream" >,
    SYNSEM.LOCAL.KEYS.KEY _upstream_rel ].

:end :instance.

; <<>>

:begin :instance.

afternoonish_a1 := intrans_adj_le &
  [ STEM < "afternoonish" >,
    SYNSEM.LOCAL.KEYS.KEY _afternoonish_rel ].

:end :instance.

; <<>>

:begin :instance.

alert_a1 := intrans_adj_le &
  [ STEM < "alert" >,
    SYNSEM.LOCAL.KEYS.KEY _alert_isect_rel ].

:end :instance.

; <<>>

:begin :instance.

ancient_a1 := intrans_adj_le &
  [ STEM < "ancient" >,
    SYNSEM.LOCAL.KEYS.KEY _ancient_rel ].

:end :instance.

; <<>>

:begin :instance.

appetizing_a1 := intrans_adj_le &
  [ STEM < "appetizing" >,
    SYNSEM.LOCAL.KEYS.KEY _appetizing_isect_rel ].

:end :instance.

; <<>>

:begin :instance.

appetizingly_a1 := vp_adv_word_le &
  [ STEM < "appetizingly" >,
    SYNSEM.LOCAL.KEYS.KEY _appetizingly_isect_rel ].

:end :instance.

; <<>>

:begin :instance.

attractively_a1 := vp_adv_word_le &
  [ STEM < "attractively" >,
    SYNSEM.LOCAL.KEYS.KEY _attractively_rel ].

:end :instance.

; <<>>

:begin :instance.

bleary_a1 := intrans_adj_le &
  [ STEM < "bleary" >,
    SYNSEM.LOCAL.KEYS.KEY _bleary_rel ].

:end :instance.

; <<>>
; MULTIKEY < "business" >

:begin :instance.

business_like_a1 := intrans_adj_mle &
  [ STEM < "business", "like" >,
    SYNSEM.LOCAL.KEYS.KEY _business_like_rel ].

:end :instance.

; <<>>

:begin :instance.

catchy_a1 := intrans_adj_le &
  [ STEM < "catchy" >,
    SYNSEM.LOCAL.KEYS.KEY _catchy_isect_rel ].

:end :instance.

; <<>>

:begin :instance.

comparable_a1 := intrans_adj_le &
  [ STEM < "comparable" >,
    SYNSEM.LOCAL.KEYS.KEY _comparable_rel ].

:end :instance.

; <<>>

:begin :instance.

comparably_a1 := vp_adv_post_word_le &
  [ STEM < "comparably" >,
    SYNSEM.LOCAL.KEYS.KEY _comparably_rel ].

:end :instance.

; <<>>

:begin :instance.

conceivable_a1 := intrans_adj_le &
  [ STEM < "conceivable" >,
    SYNSEM.LOCAL.KEYS.KEY _conceivable_rel ].

:end :instance.

; <<>>

:begin :instance.

conceivably_a1 := vp_adv_word_le &
  [ STEM < "conceivably" >,
    SYNSEM.LOCAL.KEYS.KEY _conceivably_rel ].

:end :instance.

; <<>>

:begin :instance.

decently_a1 := vp_adv_word_le &
  [ STEM < "decently" >,
    SYNSEM.LOCAL.KEYS.KEY _decently_rel ].

:end :instance.

; <<>>

:begin :instance.

decisive_a1 := intrans_adj_le &
  [ STEM < "decisive" >,
    SYNSEM.LOCAL.KEYS.KEY _decisive_isect_rel ].

:end :instance.

; <<>>

:begin :instance.

decisively_a1 := vp_adv_word_le &
  [ STEM < "decisively" >,
    SYNSEM.LOCAL.KEYS.KEY _decisively_isect_rel ].

:end :instance.

; <<>>

:begin :instance.

dumb_a1 := intrans_adj_le &
  [ STEM < "dumb" >,
    SYNSEM.LOCAL.KEYS.KEY _dumb_isect_rel ].

:end :instance.

; <<>>

:begin :instance.

efficiently_a1 := vp_adv_word_le &
  [ STEM < "efficiently" >,
    SYNSEM.LOCAL.KEYS.KEY _efficiently_rel ].

:end :instance.

; <<>>

:begin :instance.

etcetera_a1 := intrans_adj_le &
  [ STEM < "etcetera" >,
    SYNSEM.LOCAL.KEYS.KEY _etcetera_rel ].

:end :instance.

; <<>>

:begin :instance.

express_a1 := intrans_adj_le &
  [ STEM < "express" >,
    SYNSEM.LOCAL.KEYS.KEY _express_isect_rel ].

:end :instance.

; <<>>

:begin :instance.

expressly_a1 := vp_adv_word_le &
  [ STEM < "expressly" >,
    SYNSEM.LOCAL.KEYS.KEY _expressly_isect_rel ].

:end :instance.

; <<>>

:begin :instance.

feasibly_a1 := vp_adv_word_le &
  [ STEM < "feasibly" >,
    SYNSEM.LOCAL.KEYS.KEY _feasibly_rel ].

:end :instance.

; <<>>

:begin :instance.

frugal_a1 := intrans_adj_le &
  [ STEM < "frugal" >,
    SYNSEM.LOCAL.KEYS.KEY _frugal_rel ].

:end :instance.

; <<>>

:begin :instance.

frugally_a1 := vp_adv_word_le &
  [ STEM < "frugally" >,
    SYNSEM.LOCAL.KEYS.KEY _frugally_rel ].

:end :instance.

; <<>>

:begin :instance.

frustrating_a1 := intrans_adj_le &
  [ STEM < "frustrating" >,
    SYNSEM.LOCAL.KEYS.KEY _frustrating_rel ].

:end :instance.

; <<>>

:begin :instance.

handily_a1 := vp_adv_word_le &
  [ STEM < "handily" >,
    SYNSEM.LOCAL.KEYS.KEY _handily_isect_rel ].

:end :instance.

; <<>>

:begin :instance.

inexpensive_a1 := intrans_adj_le &
  [ STEM < "inexpensive" >,
    SYNSEM.LOCAL.KEYS.KEY _inexpensive_rel ].

:end :instance.

; <<>>

:begin :instance.

inexpensively_a1 := vp_adv_word_le &
  [ STEM < "inexpensively" >,
    SYNSEM.LOCAL.KEYS.KEY _inexpensively_rel ].

:end :instance.

; <<>>

:begin :instance.

irrelevant_a1 := intrans_adj_le &
  [ STEM < "irrelevant" >,
    SYNSEM.LOCAL.KEYS.KEY _irrelevant_rel ].

:end :instance.

; <<>>

:begin :instance.

janitorial_a1 := intrans_adj_le &
  [ STEM < "janitorial" >,
    SYNSEM.LOCAL.KEYS.KEY _janitorial_rel ].

:end :instance.

; <<>>

:begin :instance.

justifiably_a1 := vp_adv_word_le &
  [ STEM < "justifiably" >,
    SYNSEM.LOCAL.KEYS.KEY _justifiably_rel ].

:end :instance.

; <<>>

:begin :instance.

lazy_a1 := intrans_adj_le &
  [ STEM < "lazy" >,
    SYNSEM.LOCAL.KEYS.KEY _lazy_isect_rel ].

:end :instance.

; <<>>

:begin :instance.

lazily_a1 := vp_adv_word_le &
  [ STEM < "lazily" >,
    SYNSEM.LOCAL.KEYS.KEY _lazily_isect_rel ].

:end :instance.

; <<>>

:begin :instance.

lenient_a1 := intrans_adj_le &
  [ STEM < "lenient" >,
    SYNSEM.LOCAL.KEYS.KEY _lenient_rel ].

:end :instance.

; <<>>

:begin :instance.

leniently_a1 := vp_adv_post_word_le &
  [ STEM < "leniently" >,
    SYNSEM.LOCAL.KEYS.KEY _leniently_rel ].

:end :instance.

; <<>>

:begin :instance.

lined_a1 := intrans_adj_le &
  [ STEM < "lined" >,
    SYNSEM.LOCAL.KEYS.KEY _lined_rel ].

:end :instance.

; <<>>

:begin :instance.

local_a1 := intrans_adj_le &
  [ STEM < "local" >,
    SYNSEM.LOCAL.KEYS.KEY _local_isect_rel ].

:end :instance.

; <<>>

:begin :instance.

locally_a1 := vp_adv_word_le &
  [ STEM < "locally" >,
    SYNSEM.LOCAL.KEYS.KEY _locally_isect_rel ].

:end :instance.

; <<>>

:begin :instance.

loose_a1 := intrans_adj_le &
  [ STEM < "loose" >,
    SYNSEM.LOCAL.KEYS.KEY _loose_isect_rel ].

:end :instance.

; <<>>

:begin :instance.

loosely_a1 := vp_adv_word_le &
  [ STEM < "loosely" >,
    SYNSEM.LOCAL.KEYS.KEY _loosely_isect_rel ].

:end :instance.

; <<>>

:begin :instance.

married_a1 := intrans_adj_le &
  [ STEM < "married" >,
    SYNSEM.LOCAL.KEYS.KEY _married_rel ].

:end :instance.

; <<>>

:begin :instance.

middling_a1 := intrans_adj_le &
  [ STEM < "middling" >,
    SYNSEM.LOCAL.KEYS.KEY _middling_rel ].

:end :instance.

; <<>>

:begin :instance.

military_a1 := intrans_adj_le &
  [ STEM < "military" >,
    SYNSEM.LOCAL.KEYS.KEY _military_isect_rel ].

:end :instance.

; <<>>

:begin :instance.

minimal_a1 := intrans_adj_le &
  [ STEM < "minimal" >,
    SYNSEM.LOCAL.KEYS.KEY _minimal_rel ].

:end :instance.

; <<>>

:begin :instance.

minimally_a1 := vp_adv_word_le &
  [ STEM < "minimally" >,
    SYNSEM.LOCAL.KEYS.KEY _minimally_rel ].

:end :instance.

; <<>>

:begin :instance.

minimum_a1 := intrans_adj_le &
  [ STEM < "minimum" >,
    SYNSEM.LOCAL.KEYS.KEY _minimum_rel ].

:end :instance.

; <<>>

:begin :instance.

odd_a1 := intrans_adj_le &
  [ STEM < "odd" >,
    SYNSEM.LOCAL.KEYS.KEY _odd_isect_rel ].

:end :instance.

; <<>>

:begin :instance.

oddly_a1 := vp_adv_post_word_le &
  [ STEM < "oddly" >,
    SYNSEM.LOCAL.KEYS.KEY _oddly_isect_rel ].

:end :instance.

; <<>>

:begin :instance.

positively_a1 := vp_adv_word_le &
  [ STEM < "positively" >,
    SYNSEM.LOCAL.KEYS.KEY _positively_rel ].

:end :instance.

; <<>>

:begin :instance.

potentially_a1 := vp_adv_word_le &
  [ STEM < "potentially" >,
    SYNSEM.LOCAL.KEYS.KEY _potentially_rel ].

:end :instance.

; <<>>

:begin :instance.

realistic_a1 := intrans_adj_le &
  [ STEM < "realistic" >,
    SYNSEM.LOCAL.KEYS.KEY _realistic_rel ].

:end :instance.

; <<>>

:begin :instance.

realistically_a1 := vp_adv_word_le &
  [ STEM < "realistically" >,
    SYNSEM.LOCAL.KEYS.KEY _realistically_rel ].

:end :instance.

; <<>>

:begin :instance.

repetitious_a1 := intrans_adj_le &
  [ STEM < "repetitious" >,
    SYNSEM.LOCAL.KEYS.KEY _repetitious_rel ].

:end :instance.

; <<>>

:begin :instance.

repetitiously_a1 := vp_adv_word_le &
  [ STEM < "repetitiously" >,
    SYNSEM.LOCAL.KEYS.KEY _repetitiously_rel ].

:end :instance.

; <<>>

:begin :instance.

respectable_a1 := intrans_adj_le &
  [ STEM < "respectable" >,
    SYNSEM.LOCAL.KEYS.KEY _respectable_rel ].

:end :instance.

; <<>>

:begin :instance.

respectably_a1 := vp_adv_post_word_le &
  [ STEM < "respectably" >,
    SYNSEM.LOCAL.KEYS.KEY _respectably_rel ].

:end :instance.

; <<>>

:begin :instance.

ritzy_a1 := intrans_adj_le &
  [ STEM < "ritzy" >,
    SYNSEM.LOCAL.KEYS.KEY _ritzy_rel ].

:end :instance.

; <<>>

:begin :instance.

sacred_a1 := intrans_adj_le &
  [ STEM < "sacred" >,
    SYNSEM.LOCAL.KEYS.KEY _sacred_rel ].

:end :instance.

; <<>>

:begin :instance.

sensibly_a1 := vp_adv_word_le &
  [ STEM < "sensibly" >,
    SYNSEM.LOCAL.KEYS.KEY _sensibly_rel ].

:end :instance.

; <<>>

:begin :instance.

tiring_a1 := intrans_adj_le &
  [ STEM < "tiring" >,
    SYNSEM.LOCAL.KEYS.KEY _tiring_rel ].

:end :instance.

; <<>>

:begin :instance.

tricky_a1 := intrans_adj_le &
  [ STEM < "tricky" >,
    SYNSEM.LOCAL.KEYS.KEY _tricky_rel ].

:end :instance.

; <<>>

:begin :instance.

tuckered_a1 := intrans_adj_le &
  [ STEM < "tuckered" >,
    SYNSEM.LOCAL.KEYS.KEY _tuckered_rel ].

:end :instance.

; <<>>

:begin :instance.

unfamiliar_a1 := intrans_adj_le &
  [ STEM < "unfamiliar" >,
    SYNSEM.LOCAL.KEYS.KEY _unfamiliar_rel ].

:end :instance.

; <<>>

:begin :instance.

wacky_a1 := intrans_adj_le &
  [ STEM < "wacky" >,
    SYNSEM.LOCAL.KEYS.KEY _wacky_rel ].

:end :instance.

; <<>>

:begin :instance.

accommodate_v1 := mv_np_trans_le &
  [ STEM < "accommodate" >,
    SYNSEM.LOCAL.KEYS.KEY _accommodate_rel ].

:end :instance.

; <<>>

:begin :instance.

add_up_v1 := mv_prep_particle_np_le &
  [ STEM < "add" >,
    SYNSEM.LOCAL.KEYS [ KEY _add_up_rel,
			--COMPKEY _up_rel ] ].

:end :instance.

; <<>>

:begin :instance.

advise_v1 := mv_np_trans_le &
  [ STEM < "advise" >,
    SYNSEM.LOCAL.KEYS.KEY _advise_rel ].

:end :instance.

; <<>>

:begin :instance.

aim_v := mv_empty_prep_intrans_le &
  [ STEM < "aim" >,
    SYNSEM.LOCAL.KEYS [ KEY _aim_for_rel,
			--COMPKEY _for_rel_s ] ].

:end :instance.

; <<>>

:begin :instance.

apply_v2 := mv_np_trans_le &
  [ STEM < "apply" >,
    SYNSEM.LOCAL.KEYS.KEY _apply_for_rel ].

:end :instance.

; <<>>

:begin :instance.

bite_v1 := mv_np_trans_le &
  [ STEM < "bite" >,
    SYNSEM.LOCAL.KEYS.KEY _bite_v_rel ].

:end :instance.

; <<>>

:begin :instance.

count_v2 := mv_np_trans_le &
  [ STEM < "count" >,
    SYNSEM.LOCAL.KEYS.KEY _count_num_rel ].

:end :instance.

; <<>>

:begin :instance.

design_v1 := mv_np_trans_le &
  [ STEM < "design" >,
    SYNSEM.LOCAL.KEYS.KEY _design_v_rel ].

:end :instance.

; <<>>

:begin :instance.

despise_v1 := mv_np_trans_le &
  [ STEM < "despise" >,
    SYNSEM.LOCAL.KEYS.KEY _despise_rel ].

:end :instance.


; <<>>

:begin :instance.

enumerate_v1 := mv_np_trans_le &
  [ STEM < "enumerate" >,
    SYNSEM.LOCAL.KEYS.KEY _enumerate_rel ].

:end :instance.

; <<>>

:begin :instance.

hunt_v1 := mv_np_trans_le &
  [ STEM < "hunt" >,
    SYNSEM.LOCAL.KEYS.KEY _hunt_rel ].

:end :instance.

; <<>>

:begin :instance.

instruct_v2 := mv_np_trans_le &
  [ STEM < "instruct" >,
    SYNSEM.LOCAL.KEYS.KEY _instruct_rel ].

:end :instance.

; <<>>

:begin :instance.

intensify_v1 := mv_np_trans_le &
  [ STEM < "intensify" >,
    SYNSEM.LOCAL.KEYS.KEY _intensify_rel ].

:end :instance.

; <<>>

:begin :instance.

investigate_v1 := mv_np_trans_le &
  [ STEM < "investigate" >,
    SYNSEM.LOCAL.KEYS.KEY _investigate_rel ].

:end :instance.

; <<>>

:begin :instance.

obtain_v1 := mv_np_trans_le &
  [ STEM < "obtain" >,
    SYNSEM.LOCAL.KEYS.KEY _obtain_rel ].

:end :instance.

; <<>>

:begin :instance.

program_v1 := mv_np_trans_le &
  [ STEM < "program" >,
    SYNSEM.LOCAL.KEYS.KEY _program_v_rel ].

:end :instance.

; <<>>

:begin :instance.

smoke_v1 := mv_np_trans_le &
  [ STEM < "smoke" >,
    SYNSEM.LOCAL.KEYS.KEY _smoke_v_rel ].

:end :instance.

; <<>>

:begin :instance.

transport_v1 := mv_np_trans_le &
  [ STEM < "transport" >,
    SYNSEM.LOCAL.KEYS.KEY _transport_v_rel ].

:end :instance.

; <<>>

:begin :instance.

cater_v1 := mv_np_trans_le &
  [ STEM < "cater" >,
    SYNSEM.LOCAL.KEYS.KEY _cater_rel ].

:end :instance.

; <<>>

:begin :instance.

chuck_v1 := mv_np_trans_le &
  [ STEM < "chuck" >,
    SYNSEM.LOCAL.KEYS.KEY _chuck_rel ].

:end :instance.

; <<>>

:begin :instance.

complicate_v1 := mv_np_trans_le &
  [ STEM < "complicate" >,
    SYNSEM.LOCAL.KEYS.KEY _complicate_rel ].

:end :instance.

; <<>>

:begin :instance.

dig_v1 := mv_np_trans_le &
  [ STEM < "dig" >,
    SYNSEM.LOCAL.KEYS.KEY _dig_rel ].

:end :instance.

; <<>>

:begin :instance.

dry_v1 := mv_np_trans_le &
  [ STEM < "dry" >,
    SYNSEM.LOCAL.KEYS.KEY _dry_v_rel ].

:end :instance.

; <<>>

:begin :instance.

entertain_v1 := mv_np_trans_le &
  [ STEM < "entertain" >,
    SYNSEM.LOCAL.KEYS.KEY _entertain_rel ].

:end :instance.

; <<>>

:begin :instance.

exercise_v1 := mv_np_trans_le &
  [ STEM < "exercise" >,
    SYNSEM.LOCAL.KEYS.KEY _exercise_v_rel ].

:end :instance.

; <<>>

:begin :instance.

expense_v1 := mv_np_trans_le &
  [ STEM < "expense" >,
    SYNSEM.LOCAL.KEYS.KEY _expense_v_rel ].

:end :instance.

; <<>>

:begin :instance.

explore_v1 := mv_np_trans_le &
  [ STEM < "explore" >,
    SYNSEM.LOCAL.KEYS.KEY _explore_rel ].

:end :instance.

; <<>>

:begin :instance.

eye_v1 := mv_np_trans_le &
  [ STEM < "eye" >,
    SYNSEM.LOCAL.KEYS.KEY _eye_v_rel ].

:end :instance.

; <<>>

:begin :instance.

factor_in_v1 := mv_prep_particle_np_le &
  [ STEM < "factor" >,
    SYNSEM.LOCAL.KEYS [ KEY _factor_in_rel,
			--COMPKEY _in_rel_s ] ].

:end :instance.

; <<>>

:begin :instance.

feature_v1 := mv_np_trans_le &
  [ STEM < "feature" >,
    SYNSEM.LOCAL.KEYS.KEY _feature_v_rel ].

:end :instance.

; <<>>

:begin :instance.

finagle_v1 := mv_np_trans_le &
  [ STEM < "finagle" >,
    SYNSEM.LOCAL.KEYS.KEY _finagle_v_rel ].

:end :instance.

; <<>>

:begin :instance.

frustrate_v1 := mv_np_trans_le &
  [ STEM < "frustrate" >,
    SYNSEM.LOCAL.KEYS.KEY _frustrate_rel ].

:end :instance.

; <<>>

:begin :instance.

haul_v1 := mv_np_trans_le &
  [ STEM < "haul" >,
    SYNSEM.LOCAL.KEYS.KEY _haul_v_rel ].

:end :instance.

; <<>>

:begin :instance.

honk_v1 := mv_np_trans_le &
  [ STEM < "honk" >,
    SYNSEM.LOCAL.KEYS.KEY _honk_v_rel ].

:end :instance.

; <<>>

:begin :instance.

identify_v1 := mv_np_trans_le &
  [ STEM < "identify" >,
    SYNSEM.LOCAL.KEYS.KEY _identify_rel ].

:end :instance.

; <<>>

:begin :instance.

intersperse_v1 := mv_np_trans_le &
  [ STEM < "intersperse" >,
    SYNSEM.LOCAL.KEYS.KEY _intersperse_rel ].

:end :instance.

; <<>>

:begin :instance.

irritate_v1 := mv_np_trans_le &
  [ STEM < "irritate" >,
    SYNSEM.LOCAL.KEYS.KEY _irritate_rel ].

:end :instance.

; <<>>

:begin :instance.

knock_v1 := mv_np_trans_le &
  [ STEM < "knock" >,
    SYNSEM.LOCAL.KEYS.KEY _knock_v_rel ].

:end :instance.

; <<>>

:begin :instance.

maximize_v1 := mv_np_trans_le &
  [ STEM < "maximize" >,
    SYNSEM.LOCAL.KEYS.KEY _maximize_rel ].

:end :instance.

; <<>>

:begin :instance.

nix_v1 := mv_np_trans_le &
  [ STEM < "nix" >,
    SYNSEM.LOCAL.KEYS.KEY _nix_rel ].

:end :instance.

; <<>>

:begin :instance.

opt_v1 := mv_np_trans_le &
  [ STEM < "opt" >,
    SYNSEM.LOCAL.KEYS.KEY _opt_for_rel ].

:end :instance.

; <<>>

:begin :instance.

phrase_v1 := mv_np_trans_le &
  [ STEM < "phrase" >,
    SYNSEM.LOCAL.KEYS.KEY _phrase_v_rel ].

:end :instance.

; <<>>

:begin :instance.

pop_v1 := mv_np_trans_le &
  [ STEM < "pop" >,
    SYNSEM.LOCAL.KEYS.KEY _pop_v_rel ].

:end :instance.

; <<>>

:begin :instance.

rate_v1 := mv_np_trans_le &
  [ STEM < "rate" >,
    SYNSEM.LOCAL.KEYS.KEY _rate_v_rel ].

:end :instance.

; <<>>

:begin :instance.

research_v1 := mv_np_trans_le &
  [ STEM < "research" >,
    SYNSEM.LOCAL.KEYS.KEY _research_v_rel ].

:end :instance.

; <<>>

:begin :instance.

reverse_v1 := mv_np_trans_le &
  [ STEM < "reverse" >,
    SYNSEM.LOCAL.KEYS.KEY _reverse_v_rel ].

:end :instance.

; <<>>

:begin :instance.

share_v1 := mv_np_trans_le &
  [ STEM < "share" >,
    SYNSEM.LOCAL.KEYS.KEY _share_v_rel ].

:end :instance.

; <<>>

:begin :instance.

shove_v1 := mv_np_trans_le &
  [ STEM < "shove" >,
    SYNSEM.LOCAL.KEYS.KEY _shove_v_rel ].

:end :instance.

; <<>>

:begin :instance.

smell_v1 := mv_np_trans_le &
  [ STEM < "smell" >,
    SYNSEM.LOCAL.KEYS.KEY _smell_v_rel ].

:end :instance.

; <<>>

:begin :instance.

specify_v1 := mv_np_trans_le &
  [ STEM < "specify" >,
    SYNSEM.LOCAL.KEYS.KEY _specify_rel ].

:end :instance.

; <<>>

:begin :instance.

squish_v1 := mv_np_trans_le &
  [ STEM < "squish" >,
    SYNSEM.LOCAL.KEYS.KEY _squish_rel ].

:end :instance.

; <<>>

:begin :instance.

stink_v1 := mv_np_trans_le &
  [ STEM < "stink" >,
    SYNSEM.LOCAL.KEYS.KEY _stink_v_rel ].

:end :instance.

; <<>>

:begin :instance.

time_v1 := mv_np_trans_le &
  [ STEM < "time" >,
    SYNSEM.LOCAL.KEYS.KEY _time_v_rel ].

:end :instance.

; <<>>

:begin :instance.

tire_v1 := mv_np_trans_le &
  [ STEM < "tire" >,
    SYNSEM.LOCAL.KEYS.KEY _tire_v_rel ].

:end :instance.

; <<>>

:begin :instance.

trade_v1 := mv_np_trans_le &
  [ STEM < "trade" >,
    SYNSEM.LOCAL.KEYS.KEY _trade_v_rel ].

:end :instance.

; <<>>

:begin :instance.

wear_v1 := mv_np_trans_le &
  [ STEM < "wear" >,
    SYNSEM.LOCAL.KEYS.KEY _wear_v_rel ].

:end :instance.

; <<>>

:begin :instance.

amuse_v1 := mv_np_trans_le &
  [ STEM < "amuse" >,
    SYNSEM.LOCAL.KEYS.KEY _amuse_rel ].

:end :instance.

; <<>>


:begin :instance.

anticipate_v1 := mv_np_trans_le &
  [ STEM < "anticipate" >,
    SYNSEM.LOCAL.KEYS.KEY _anticipate_rel ].

:end :instance.

; <<>>

:begin :instance.

anticipate_v2 := mv_cp_non_trans_le &
  [ STEM < "anticipate" >,
    SYNSEM.LOCAL.KEYS.KEY _anticipate_h_rel ].

:end :instance.

; <<>>

:begin :instance.

doubt_v1 := mv_np_trans_le &
  [ STEM < "doubt" >,
    SYNSEM.LOCAL.KEYS.KEY _doubt_v_rel ].

:end :instance.

; <<>>

:begin :instance.

doubt_v2 := mv_cp_non_trans_le &
  [ STEM < "doubt" >,
    SYNSEM.LOCAL.KEYS.KEY _doubt_h_rel ].

:end :instance.

; <<>>

:begin :instance.

conspire_v1 := mv_subj_equi_le &
  [ STEM < "conspire" >,
    SYNSEM.LOCAL.KEYS.KEY _conspire_rel ].

:end :instance.

; <<>>

:begin :instance.

contract_v1 := mv_subj_equi_le &
  [ STEM < "contract" >,
    SYNSEM.LOCAL.KEYS.KEY _contract_v_rel ].

:end :instance.

; <<>>

:begin :instance.

estimate_v1 := mv_np_trans_le &
  [ STEM < "estimate" >,
    SYNSEM.LOCAL.KEYS.KEY _estimate_v_rel ].

:end :instance.

; <<>>

:begin :instance.

estimate_v2 := mv_cp_non_trans_le &
  [ STEM < "estimate" >,
    SYNSEM.LOCAL.KEYS.KEY _estimate_h_rel ].

:end :instance.

; <<>>

:begin :instance.

fret_v1 := mv_cp_non_trans_le &
  [ STEM < "fret" >,
    SYNSEM.LOCAL.KEYS.KEY _fret_rel ].

:end :instance.

; <<>>

:begin :instance.

jot_down_v1 := mv_prep_particle_np_le &
  [ STEM < "jot" >,
    SYNSEM.LOCAL.KEYS [ KEY _jot_down_rel,
			--COMPKEY _down_rel_s ] ].

:end :instance.

; <<>>

:begin :instance.

multiply_v1 := mv_np_trans_le &
  [ STEM < "multiply" >,
    SYNSEM.LOCAL.KEYS.KEY _multiply_rel ].

:end :instance.

; <<>>

:begin :instance.

subtract_v1 := mv_np_trans_le &
  [ STEM < "subtract" >,
    SYNSEM.LOCAL.KEYS.KEY _subtract_rel ].

:end :instance.

; <<>>

:begin :instance.

come_along_v2 := mv_particle_le &
  [ STEM < "come" >,
    SYNSEM.LOCAL.KEYS [ KEY _come_along_rel,
			--COMPKEY _along_p_rel_s ] ].

:end :instance.

; <<>>

:begin :instance.

describe_v1 := mv_to*_trans_le &
  [ STEM < "describe" >,
    SYNSEM.LOCAL.KEYS.KEY _describe_rel ].

:end :instance.

; <<>>

:begin :instance.

discourage_v1 := mv_prep*_trans_le &
  [ STEM < "discourage" >,
    SYNSEM.LOCAL.KEYS [ KEY _discourage_rel,
			--OCOMPKEY _from_rel ] ].

:end :instance.

; <<>>

:begin :instance.

transfer_v1 := mv_prep_trans_le &
  [ STEM < "transfer" >,
    SYNSEM.LOCAL.KEYS [ KEY _transfer_v_rel,
			--OCOMPKEY dir_rel ] ].

:end :instance.

; <<>>

:begin :instance.

alert_v1 := mv_np_trans_cp_le &
  [ STEM < "alert" >,
    SYNSEM.LOCAL.KEYS.KEY _alert_v_rel ].

:end :instance.

; <<>>

:begin :instance.

bill_for_v1 := mv_empty_prep_trans_le &
  [ STEM < "bill" >,
    SYNSEM.LOCAL.KEYS [ KEY _bill_v_rel,
			--OCOMPKEY _for_rel_s ] ].

:end :instance.

; <<>>

:begin :instance.

cable_v1 := mv_ditrans_le &
  [ STEM < "cable" >,
    SYNSEM.LOCAL.KEYS.KEY _cable_v_rel ].

:end :instance.

; <<>>

:begin :instance.

convert_v1 := mv_to_trans_le &
  [ STEM < "convert" >,
    SYNSEM.LOCAL.KEYS.KEY _convert_rel ].

:end :instance.

; <<>>

:begin :instance.

comparably_deg := degree_spec_le &
  [ STEM < "comparably" >,
    SYNSEM.LOCAL.KEYS.KEY _comparably_deg_rel ].

:end :instance.

; <<>>

:begin :instance.

goodnight_root := disc_adv_le &
  [ STEM < "goodnight" >,
    SYNSEM.LOCAL.KEYS.KEY greet_rel & [ EXCL 'goodnight ] ].

:end :instance.

; <<>>

:begin :instance.

guide_v1 := mv_to_trans_le &
  [ STEM < "guide" >,
    SYNSEM.LOCAL.KEYS.KEY _guide_v_rel ].

:end :instance.

; <<>>

:begin :instance.

lately_adv1 := int_vp_adv_post_word_le &
  [ STEM < "lately" >,
    SYNSEM.LOCAL.KEYS.KEY _lately_isect_rel ].

:end :instance.

; <<>>

:begin :instance.

outdoors_pp := pp_le &
  [ STEM < "outdoors" >,
    SYNSEM.LOCAL.KEYS.KEY _outdoors_rel ].

:end :instance.

; <<>>

:begin :instance.

overseas_pp := pp_le &
  [ STEM < "overseas" >,
    SYNSEM.LOCAL.KEYS.KEY _overseas_rel ].

:end :instance.

; <<>>

:begin :instance.

warn_v1 := mv_np_trans_cp_le &
  [ STEM < "warn" >,
    SYNSEM.LOCAL.KEYS.KEY _warn_rel ].

:end :instance.

; <<>>

:begin :instance.

hop_v1 := mv_unerg_le &
  [ STEM < "hop" >,
    SYNSEM.LOCAL.KEYS.KEY _hop_v_rel ].

:end :instance.

; <<>>

:begin :instance.

party_v1 := mv_unerg_le &
  [ STEM < "party" >,
    SYNSEM.LOCAL.KEYS.KEY _party_v_rel ].

:end :instance.

; <<>>

:begin :instance.

skimp_v1 := mv_unerg_le &
  [ STEM < "skimp" >,
    SYNSEM.LOCAL.KEYS.KEY _skimp_rel ].

:end :instance.

; <<>>

:begin :instance.

splurge_v1 := mv_unerg_le &
  [ STEM < "splurge" >,
    SYNSEM.LOCAL.KEYS.KEY _splurge_v_rel ].

:end :instance.

; <<>>

:begin :instance.

stagger_v1 := mv_unerg_le &
  [ STEM < "stagger" >,
    SYNSEM.LOCAL.KEYS.KEY _stagger_v_rel ].

:end :instance.

; <<>>

:begin :instance.

versus_conj := coord_c_le &
  [ STEM < "versus" >,
    SYNSEM.LOCAL [ CONJ complex-conj & [ CHEAD.LEFT < cnil, cnil > ],
		   CONT.LISZT <! _versus_rel !> ] ].

:end :instance.

; <<>>
; MULTIKEY < "vice" >

:begin :instance.

and_vice_versa_adv1 := vp_adv_post_word_3mle2 &
  [ STEM < "and", "vice", "versa" >,
    SYNSEM.LOCAL.KEYS.KEY _vice_versa_rel ].

:end :instance.

; <<>>

:begin :instance.

deserve_v1 := mv_np_trans_le &
  [ STEM < "deserve" >,
    SYNSEM.LOCAL.KEYS.KEY _deserve_rel ].

:end :instance.

; <<>>

:begin :instance.

dribble_v1 := mv_unerg_le &
  [ STEM < "dribble" >,
    SYNSEM.LOCAL.KEYS.KEY _dribble_rel ].

:end :instance.

; <<>>

:begin :instance.

fly_on_v1 := mv_particle_le &
  [ STEM < "fly" >,
    SYNSEM.LOCAL.KEYS [ KEY _fly_on_rel,
			--COMPKEY _on_rel_s ] ].

:end :instance.

; <<>>

:begin :instance.

hurt_v1 := mv_np_trans_le &
  [ STEM < "hurt" >,
    SYNSEM.LOCAL.KEYS.KEY _hurt_rel ].

:end :instance.

; <<>>

:begin :instance.

earn_v1 := mv_np_trans_le &
  [ STEM < "earn" >,
    SYNSEM.LOCAL.KEYS.KEY _earn_rel ].

:end :instance.

; <<>>

:begin :instance.

intervene_v1 := mv_unacc_le &
  [ STEM < "intervene" >,
    SYNSEM.LOCAL.KEYS.KEY _intervene_rel ].

:end :instance.

; <<>>

:begin :instance.

minus_conj := coord_c_le &
  [ STEM < "minus" >,
    SYNSEM.LOCAL [ CONJ complex-conj & [ CHEAD.LEFT < cnil > ],
		   CONT.LISZT <! _minus_coord_rel !>,
                   AGR.PNG png & [ PN 3sg ] ] ].
:end :instance.

; <<>>

:begin :instance.

question_about_v1 := mv_np*_prep_trans_le &
  [ STEM < "question" >,
    SYNSEM.LOCAL.KEYS [ KEY _question_v_rel,
			--OCOMPKEY _about_rel ] ].

:end :instance.

; <<>>

:begin :instance.

slip_in_v1 := mv_particle_le &
  [ STEM < "slip" >,
    SYNSEM.LOCAL.KEYS [ KEY _slip_in_rel,
			--COMPKEY _in_rel_s ] ].

:end :instance.

; <<>>

:begin :instance.

find_adj_v1 := mv_obj_equi_prd_le &
  [ STEM < "find" >,
    SYNSEM.LOCAL [ CAT.VAL.COMPS < synsem,
				   [ LOCAL.CAT.HEAD adj ] >,
		   KEYS.KEY _find_mental_rel ] ].
:end :instance.

; <<>>

:begin :instance.

european_a1 := intrans_adj_le &
  [ STEM < "european" >,
    SYNSEM.LOCAL.KEYS.KEY _european_rel ].

:end :instance.

; <<>>

:begin :instance.

architectural_a1 := intrans_adj_le &
  [ STEM < "architectural" >,
    SYNSEM.LOCAL.KEYS.KEY _architectural_rel ].

:end :instance.


; <<>>

:begin :instance.

arise_v2 := mv_empty_prep_intrans_le &
  [ STEM < "arise" >,
    SYNSEM.LOCAL.KEYS [ KEY _arise_from_rel,
			--COMPKEY _from_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

armed_a1 := intrans_adj_le &
  [ STEM < "armed" >,
    SYNSEM.LOCAL.KEYS.KEY _armed_rel ].

:end :instance.


; <<>>

:begin :instance.

canal_n1 := intr_noun_word_le &
  [ STEM < "canal" >,
    SYNSEM.LOCAL.KEYS.KEY _canal_rel ].

:end :instance.


; <<>>
; MULTIKEY < "car" >

:begin :instance.

car-pool_n1 := intr_noun_word_mle1 &
  [ STEM < "car", "pool" >,
    SYNSEM.LOCAL.KEYS.KEY _car_pool_rel ].

:end :instance.


; <<>>

:begin :instance.

condemn_v1 := mv_to*_trans_le &
  [ STEM < "condemn" >,
    SYNSEM.LOCAL.KEYS.KEY _condemn_to_rel ].

:end :instance.


; <<>>

:begin :instance.

credit_v1 := mv_empty_prep_trans_le &
  [ STEM < "credit" >,
    SYNSEM.LOCAL.KEYS [ KEY _credit_to_rel,
			--OCOMPKEY _to_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

crib_v1 := mv_np_trans_le &
  [ STEM < "crib" >,
    SYNSEM.LOCAL.KEYS.KEY _crib_v_rel ].

:end :instance.


; <<>>

:begin :instance.

declining_a1 := intrans_adj_le &
  [ STEM < "declining" >,
    SYNSEM.LOCAL.KEYS.KEY _declining_rel ].

:end :instance.


; <<>>

:begin :instance.

delayed_a1 := intrans_adj_le &
  [ STEM < "delayed" >,
    SYNSEM.LOCAL.KEYS.KEY _delayed_rel ].

:end :instance.


; <<>>

:begin :instance.

dependence_n1 := intr_noun_word_le &
  [ STEM < "dependence" >,
    SYNSEM.LOCAL.KEYS.KEY _dependence_rel ].

:end :instance.


; <<>>

:begin :instance.

dig_up_v1 := mv_prep_particle_np_le &
  [ STEM < "dig" >,
    SYNSEM.LOCAL.KEYS [ KEY _dig_up_rel,
			--COMPKEY _up_rel ] ].

:end :instance.


; <<>>

:begin :instance.

do_up_v1 := mv_prep_particle_np_le &
  [ STEM < "do" >,
    SYNSEM.LOCAL.KEYS [ KEY _do_up_rel,
			--COMPKEY _up_rel ] ].

:end :instance.


; <<>>

:begin :instance.

drive_around_v1 := mv_particle_le &
  [ STEM < "drive" >,
    SYNSEM.LOCAL.KEYS [ KEY _drive_around_rel,
			--COMPKEY _around_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

earthly_a1 := intrans_adj_le &
  [ STEM < "earthly" >,
    SYNSEM.LOCAL.KEYS.KEY _earthly_rel ].

:end :instance.


; <<>>

:begin :instance.

ebb_n1 := intr_noun_word_le &
  [ STEM < "ebb" >,
    SYNSEM.LOCAL.KEYS.KEY _ebb_n_rel ].

:end :instance.


; <<>>

:begin :instance.

educate_v1 := mv_np_trans_le &
  [ STEM < "educate" >,
    SYNSEM.LOCAL.KEYS.KEY _educate_rel ].

:end :instance.


; <<>>

:begin :instance.

embarrassing_a1 := intrans_adj_le &
  [ STEM < "embarrassing" >,
    SYNSEM.LOCAL.KEYS.KEY _embarrassing_rel ].

:end :instance.


; <<>>

:begin :instance.

entertaining_a1 := intrans_adj_le &
  [ STEM < "entertaining" >,
    SYNSEM.LOCAL.KEYS.KEY _entertaining_rel ].

:end :instance.


; <<>>
; MULTIKEY < "euro" >

:begin :instance.

euro_card_n1 := intr_noun_word_mle1 &
  [ STEM < "euro", "card" >,
    SYNSEM.LOCAL.KEYS.KEY _euro_card_rel ].

:end :instance.


; <<>>
; MULTIKEY < "ex" >

:begin :instance.

ex_wife_n1 := intr_noun_word_mle1 &
  [ STEM < "ex", "wife" >,
    SYNSEM.LOCAL.KEYS.KEY _ex_wife_rel ].

:end :instance.


; <<>>

:begin :instance.

express_n1 := intr_noun_word_le &
  [ STEM < "express" >,
    SYNSEM.LOCAL.KEYS.KEY _express_n_rel ].

:end :instance.


; <<>>

:begin :instance.

facilitate_v1 := mv_np_trans_le &
  [ STEM < "facilitate" >,
    SYNSEM.LOCAL.KEYS.KEY _facilitate_rel ].

:end :instance.


; <<>>
; MULTIKEY < "first" >

:begin :instance.

first_mentioned_a1 := intrans_adj_mle &
  [ STEM < "first", "mentioned" >,
    SYNSEM.LOCAL.KEYS.KEY _first_mentioned_rel ].

:end :instance.


; <<>>
; MULTIKEY < "first" >

:begin :instance.

first_class_a1 := intrans_adj_mle &
  [ STEM < "first", "class" >,
    SYNSEM.LOCAL.KEYS.KEY _first_class_rel ].

:end :instance.


; <<>>
; MULTIKEY < "first" >

:begin :instance.

first_class_adv1 := adv_word_mle1 &
  [ STEM < "first", "class" >,
    SYNSEM.LOCAL.KEYS.KEY _first_class_adv_rel ].

:end :instance.


; <<>>

:begin :instance.

get_around_v1 := mv_empty_prep_intrans_le &
  [ STEM < "get" >,
    SYNSEM.LOCAL.KEYS [ KEY _get_around_rel,
			--COMPKEY _around_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

get_around_v2 := mv_particle_le &
  [ STEM < "get" >,
    SYNSEM.LOCAL.KEYS [ KEY _get_around_itr_rel,
			    --COMPKEY _around_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

get_over_v1 := mv_empty_prep_intrans_le &
  [ STEM < "get" >,
    SYNSEM.LOCAL.KEYS [ KEY _get_over_rel,
			--COMPKEY _over_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

get_on_with_v1 := mv_particle_pp*_le &
  [ STEM < "get" >,
    SYNSEM.LOCAL.KEYS [ KEY _get_on_rel,
			--COMPKEY _on_rel_s,
			--OCOMPKEY _with_rel_s ] ].

:end :instance.



; <<>>

:begin :instance.

grow_up_v2 := mv_particle_le &
  [ STEM < "grow" >,
    SYNSEM.LOCAL.KEYS [ KEY _grow_up_rel,
			    --COMPKEY _up_rel ] ].

:end :instance.


; <<>>

:begin :instance.

guarantee_v1 := mv_ditrans_le &
  [ STEM < "guarantee" >,
    SYNSEM.LOCAL.KEYS.KEY _guarantee_v_rel ].

:end :instance.


; <<>>

:begin :instance.

handy_a1 := intrans_adj_le &
  [ STEM < "handy" >,
    SYNSEM.LOCAL.KEYS.KEY _handy_rel ].

:end :instance.


; <<>>

:begin :instance.

hang_around_v1 := mv_particle_le &
  [ STEM < "hang" >,
    SYNSEM.LOCAL.KEYS [ KEY _hang_around_rel,
			--COMPKEY _around_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

haul_n1 := intr_noun_word_le &
  [ STEM < "haul" >,
    SYNSEM.LOCAL.KEYS.KEY _haul_rel ].

:end :instance.


; <<>>

:begin :instance.

head_up_v1 := mv_particle_np_le &
  [ STEM < "head" >,
    SYNSEM.LOCAL.KEYS [ KEY _head_up_rel,
			--COMPKEY _up_rel ] ].

:end :instance.


; <<>>

:begin :instance.

headed_a1 := intrans_adj_le &
  [ STEM < "headed" >,
    SYNSEM.LOCAL.KEYS.KEY _headed_isect_rel ].

:end :instance.


; <<>>

:begin :instance.

heed_v1 := mv_np_trans_le &
  [ STEM < "heed" >,
    SYNSEM.LOCAL.KEYS.KEY _heed_rel ].

:end :instance.


; <<>>

:begin :instance.

help_out_v1 := mv_particle_np_le &
  [ STEM < "help" >,
    SYNSEM.LOCAL.KEYS [ KEY _help_out_rel,
			--COMPKEY _out_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

immediately_deg := degree_spec_le &
  [ STEM < "immediately" >,
    SYNSEM.LOCAL.KEYS.KEY _immediate_grad_rel ].

:end :instance.


; <<>>
; MULTIKEY < "incoming" >

:begin :instance.

incoming_tide_n1 := intr_noun_word_mle1 &
  [ STEM < "incoming", "tide" >,
    SYNSEM.LOCAL.KEYS.KEY _incoming_tide_rel ].

:end :instance.


; <<>>

:begin :instance.

inside_a1 := intrans_adj_le &
  [ STEM < "inside" >,
    SYNSEM.LOCAL.KEYS.KEY _inside_isect_rel ].

:end :instance.


; <<>>

:begin :instance.

inviting_a1 := intrans_adj_le &
  [ STEM < "inviting" >,
    SYNSEM.LOCAL.KEYS.KEY _inviting_rel ].

:end :instance.


; <<>>
; MULTIKEY < "lecture" >

:begin :instance.

lecture_free_a1 := intrans_adj_mle &
  [ STEM < "lecture", "free" >,
    SYNSEM.LOCAL.KEYS.KEY _lecture_free_rel ].

:end :instance.


; <<>>

:begin :instance.

like_isect := intrans_adj_le &
  [ STEM < "like" >,
    SYNSEM.LOCAL.KEYS.KEY _like_mod_rel ].

:end :instance.

; <<>>

:begin :instance.

mainly_isect := intrans_adj_le &
  [ STEM < "mainly" >,
    SYNSEM.LOCAL.KEYS.KEY _mainly_isect_rel ].

:end :instance.

; <<>>

:begin :instance.

medium_a1 := intrans_adj_le &
  [ STEM < "medium" >,
    SYNSEM.LOCAL.KEYS.KEY _medium_isect_rel ].

:end :instance.


; <<>>

:begin :instance.

midday_n1 := intr_noun_word_le &
  [ STEM < "midday" >,
    SYNSEM.LOCAL.KEYS.KEY _midday_rel ].

:end :instance.

; <<>>

:begin :instance.

move_n1 := intr_noun_word_le &
  [ STEM < "move" >,
    SYNSEM.LOCAL.KEYS.KEY _move_n_rel ].

:end :instance.


; <<>>

:begin :instance.

need_n1 := intr_noun_word_le &
  [ STEM < "need" >,
    SYNSEM.LOCAL.KEYS.KEY _need_n_rel ].

:end :instance.


; <<>>
; MULTIKEY < "non" >

:begin :instance.

non_local_a1 := intrans_adj_mle &
  [ STEM < "non", "local" >,
    SYNSEM.LOCAL.KEYS.KEY _non_local_isect_rel ].

:end :instance.


; <<>>

:begin :instance.

notice_n1 := massn_le &
  [ STEM < "notice" >,
    SYNSEM.LOCAL.KEYS.KEY _notice_n_rel ].

:end :instance.


; <<>>

:begin :instance.

nuisance_n1 := intr_noun_word_le &
  [ STEM < "nuisance" >,
    SYNSEM.LOCAL.KEYS.KEY _nuisance_rel ].

:end :instance.


; <<>>
; MULTIKEY < "one" >

:begin :instance.

one_armed_a1 := intrans_adj_mle &
  [ STEM < "one", "armed" >,
    SYNSEM.LOCAL.KEYS.KEY _one_armed_rel ].

:end :instance.


; <<>>
; MULTIKEY < "one" >

:begin :instance.

one_eyed_a1 := intrans_adj_mle &
  [ STEM < "one", "eyed" >,
    SYNSEM.LOCAL.KEYS.KEY _one_eyed_rel ].

:end :instance.


; <<>>

:begin :instance.

ore_n1 := intr_noun_word_le &
  [ STEM < "ore" >,
    SYNSEM.LOCAL.KEYS.KEY _ore_rel ].

:end :instance.


; <<>>

:begin :instance.

pack_in_v1 := mv_particle_np_le &
  [ STEM < "pack" >,
    SYNSEM.LOCAL.KEYS [ KEY _pack_in_rel,
			--COMPKEY _in_rel_s ] ].

; <<>>

:begin :instance.

page_n1 := intr_noun_word_le &
  [ STEM < "page" >,
    SYNSEM.LOCAL.KEYS.KEY _page_n_rel ].

:end :instance.


; <<>>

:begin :instance.

park_n2 := intr_noun_word_le &
  [ STEM < "park" >,
    SYNSEM.LOCAL.KEYS.KEY _park_n_rel ].

:end :instance.


; <<>>

:begin :instance.

part_v1 := mv_np_trans_le &
  [ STEM < "part" >,
    SYNSEM.LOCAL.KEYS.KEY _part_v_rel ].

:end :instance.


; <<>>

:begin :instance.

particularly_deg := degree_spec_le &
  [ STEM < "particularly" >,
    SYNSEM.LOCAL.KEYS.KEY _particularly_grad_rel ].

:end :instance.


; <<>>

:begin :instance.

pass_on_to_v1 := mv_particle_np_pp_to_le &
  [ STEM < "pass" >,
    SYNSEM.LOCAL.KEYS [ KEY _pass_on_to_rel,
			--COMPKEY _on_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

past_a1 := intrans_adj_le &
  [ STEM < "past" >,
    SYNSEM.LOCAL.KEYS.KEY _past_isect_rel ].

:end :instance.


; <<>>

:begin :instance.

past := reg_prep_le &
  [ STEM < "past" >,
    SYNSEM.LOCAL.KEYS.KEY _past_prep_rel ].

:end :instance.


; <<>>

:begin :instance.

pessimistic := intrans_adj_le &
  [ STEM < "pessimistic" >,
    SYNSEM.LOCAL.KEYS.KEY _pessimistic_rel ].

:end :instance.


; <<>>

:begin :instance.

physical := intrans_adj_le &
  [ STEM < "physical" >,
    SYNSEM.LOCAL.KEYS.KEY _physical_rel ].

:end :instance.


; <<>>

:begin :instance.

pick_out_v1 := mv_prep_particle_np_le &
  [ STEM < "pick" >,
    SYNSEM.LOCAL.KEYS [ KEY _pick_out_rel,
			--COMPKEY _out_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

pictorial := intrans_adj_le &
  [ STEM < "pictorial" >,
    SYNSEM.LOCAL.KEYS.KEY _pictorial_rel ].

:end :instance.


; <<>>

:begin :instance.

pin_down_to_v1 := mv_particle_np_pp_to_le &
  [ STEM < "pin" >,
    SYNSEM.LOCAL.KEYS [ KEY _pin_down_to_rel,
			--COMPKEY _down_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

plaster_v1 := mv_np_trans_le &
  [ STEM < "plaster" >,
    SYNSEM.LOCAL.KEYS.KEY _plaster_v_rel ].

:end :instance.


; <<>>

:begin :instance.

plunge_into_v13 := mv_empty_prep_intrans_le &
  [ STEM < "plunge" >,
    SYNSEM.LOCAL.KEYS [ KEY _plunge_into_rel,
			    --COMPKEY _into_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

pop_down_v2 := mv_particle_le &
  [ STEM < "pop" >,
    SYNSEM.LOCAL.KEYS [ KEY _pop_down_rel,
			    --COMPKEY _down_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

postponement_n1 := intr_noun_word_le &
  [ STEM < "postponement" >,
    SYNSEM.LOCAL.KEYS.KEY _postponement_rel ].

:end :instance.


; <<>>

:begin :instance.

price_v1 := mv_np_trans_le &
  [ STEM < "price" >,
    SYNSEM.LOCAL.KEYS.KEY _price_v_rel ].

:end :instance.


; <<>>

:begin :instance.

print_out_v1 := mv_particle_np_le &
  [ STEM < "print" >,
    SYNSEM.LOCAL.KEYS [ KEY _print_out_rel,
			--COMPKEY _out_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

prior_a1 := intrans_adj_le &
  [ STEM < "prior" >,
    SYNSEM.LOCAL.KEYS.KEY _prior_rel ].

:end :instance.


; <<>>

:begin :instance.

profit_from_v1 := mv_empty_prep_intrans_le &
  [ STEM < "profit" >,
    SYNSEM.LOCAL.KEYS [ KEY _profit_from_rel,
			--COMPKEY _from_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

pull_off_v1 := mv_particle_np_le &
  [ STEM < "pull" >,
    SYNSEM.LOCAL.KEYS [ KEY _pull_off_rel,
			--COMPKEY _off_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

pull_up_v1 := mv_particle_np_le &
  [ STEM < "pull" >,
    SYNSEM.LOCAL.KEYS [ KEY _pull_up_rel,
			--COMPKEY _up_rel ] ].

:end :instance.


; <<>>

:begin :instance.

race_v1 := mv_np_trans_le &
  [ STEM < "race" >,
    SYNSEM.LOCAL.KEYS.KEY _race_v_rel ].

:end :instance.


; <<>>

:begin :instance.

rat_n1 := intr_noun_word_le &
  [ STEM < "rat" >,
    SYNSEM.LOCAL.KEYS.KEY _rat_rel ].

:end :instance.


; <<>>

:begin :instance.

rather_adv1 := vp_adv_pre_word_le &
  [ STEM < "rather" >,
    SYNSEM.LOCAL.KEYS.KEY _rather_scop_rel ].

:end :instance.


; <<>>

:begin :instance.

recommend_v1 := mv_to*_trans_le &
  [ STEM < "recommend" >,
    SYNSEM.LOCAL.KEYS.KEY _recommend_rel ].

:end :instance.


; <<>>

:begin :instance.

remotely_adv1 := vp_adv_post_word_le &
  [ STEM < "remotely" >,
    SYNSEM.LOCAL.KEYS.KEY _remotely_rel ].

:end :instance.


; <<>>

:begin :instance.

renovate_v1 := mv_np_trans_le &
  [ STEM < "renovate" >,
    SYNSEM.LOCAL.KEYS.KEY _renovate_rel ].

:end :instance.


; <<>>

:begin :instance.

rent_v1 := mv_np_trans_le &
  [ STEM < "rent" >,
    SYNSEM.LOCAL.KEYS.KEY _rent_v_rel ].

:end :instance.


; <<>>

:begin :instance.

report_v13 := mv_empty_prep_intrans_le &
  [ STEM < "report" >,
    SYNSEM.LOCAL.KEYS [ KEY _report_on_rel,
			    --COMPKEY _on_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

respect_n2 := massn_le &
  [ STEM < "respect" >,
    SYNSEM.LOCAL.KEYS.KEY _respect_n_rel ].

:end :instance.


; <<>>

:begin :instance.

result_v2 := mv_unacc_le &
  [ STEM < "result" >,
    SYNSEM.LOCAL.KEYS.KEY _result_v_rel ].

:end :instance.


; <<>>

:begin :instance.

retire_v1 := mv_unerg_le &
  [ STEM < "retire" >,
    SYNSEM.LOCAL.KEYS.KEY _retire_rel ].

:end :instance.


; <<>>

:begin :instance.

romp_around_v1 := mv_particle_le &
  [ STEM < "romp" >,
    SYNSEM.LOCAL.KEYS [ KEY _romp_around_rel,
			--COMPKEY _around_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

sacrifice_v1 := mv_np_trans_le &
  [ STEM < "sacrifice" >,
    SYNSEM.LOCAL.KEYS.KEY _sacrifice_v_rel ].

:end :instance.


; <<>>

:begin :instance.

scared_isect := intrans_adj_le &
  [ STEM < "scared" >,
    SYNSEM.LOCAL.KEYS.KEY _scared_rel ].

:end :instance.


; <<>>

:begin :instance.

see_around_v1 := mv_np_prep_particle_only_le &
  [ STEM < "see" >,
    SYNSEM.LOCAL.KEYS [ KEY _see_around_rel,
			--COMPKEY _around_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

see_through_v1 := mv_empty_prep_intrans_le &
  [ STEM < "see" >,
    SYNSEM.LOCAL.KEYS [ KEY _see_through_rel,
			--COMPKEY _through_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

separate_v1 := mv_np_trans_le &
  [ STEM < "separate" >,
    SYNSEM.LOCAL.KEYS.KEY _separate_v_rel ].

:end :instance.


; <<>>

:begin :instance.

settle_down_v1 := mv_particle_le &
  [ STEM < "settle" >,
    SYNSEM.LOCAL.KEYS [ KEY _settle_down_rel,
			--COMPKEY _down_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

settle_in_v1 := mv_particle_le &
  [ STEM < "settle" >,
    SYNSEM.LOCAL.KEYS [ KEY _settle_in_rel,
			--COMPKEY _in_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

shoot_for_v1 := mv_empty_prep_intrans_le &
  [ STEM < "shoot" >,
    SYNSEM.LOCAL.KEYS [ KEY _shoot_for_rel,
			--COMPKEY _for_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

shot_adj := intrans_adj_le &
  [ STEM < "shot" >,
    SYNSEM.LOCAL.KEYS.KEY _shot_isect_rel ].

:end :instance.


; <<>>

:begin :instance.

showing_n1 := intr_noun_word_le &
  [ STEM < "showing" >,
    SYNSEM.LOCAL.KEYS.KEY _showing_rel ].

:end :instance.


; <<>>

:begin :instance.

skip_out_v2 := mv_particle_le &
  [ STEM < "skip" >,
    SYNSEM.LOCAL.KEYS [ KEY _skip_out_rel,
			    --COMPKEY _out_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

smell_n1 := intr_noun_word_le &
  [ STEM < "smell" >,
    SYNSEM.LOCAL.KEYS.KEY _smell_n_rel ].

:end :instance.


; <<>>

:begin :instance.

spare_v1 := mv_ditrans_only_le &
  [ STEM < "spare" >,
    SYNSEM.LOCAL.KEYS.KEY _spare_v_rel ].

:end :instance.


; <<>>

:begin :instance.

stain_v1 := mv_np_trans_le &
  [ STEM < "stain" >,
    SYNSEM.LOCAL.KEYS.KEY _stain_v_rel ].

:end :instance.


; <<>>

:begin :instance.

standard_adj := intrans_adj_le &
  [ STEM < "standard" >,
    SYNSEM.LOCAL.KEYS.KEY _standard_isect_rel ].

:end :instance.


; <<>>

:begin :instance.

stay_over_v2 := mv_particle_le &
  [ STEM < "stay" >,
    SYNSEM.LOCAL.KEYS [ KEY _stay_over_rel,
			    --COMPKEY _over_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

sterile_a1 := intrans_adj_le &
  [ STEM < "sterile" >,
    SYNSEM.LOCAL.KEYS.KEY _sterile_rel ].

:end :instance.


; <<>>

:begin :instance.

stick_with_v1 := mv_empty_prep_intrans_le &
  [ STEM < "stick" >,
    SYNSEM.LOCAL.KEYS [ KEY _stick_with_rel,
			--COMPKEY _with_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

stop_in_v1 := mv_particle_le &
  [ STEM < "stop" >,
    SYNSEM.LOCAL.KEYS [ KEY _stop_in_rel,
			--COMPKEY _in_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

stop_over_v1 := mv_particle_le &
  [ STEM < "stop" >,
    SYNSEM.LOCAL.KEYS [ KEY _stop_over_rel,
			--COMPKEY _over_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

stray_v1 := mv_unerg_le &
  [ STEM < "stray" >,
    SYNSEM.LOCAL.KEYS.KEY _stray_v_rel ].

:end :instance.


; <<>>

:begin :instance.

strengthen_v1 := mv_np_trans_le &
  [ STEM < "strengthen" >,
    SYNSEM.LOCAL.KEYS.KEY _strengthen_rel ].

:end :instance.


; <<>>

:begin :instance.

strenuous_a1 := intrans_adj_le &
  [ STEM < "strenuous" >,
    SYNSEM.LOCAL.KEYS.KEY _strenuous_rel ].

:end :instance.


; <<>>

:begin :instance.

stretch_out_v2 := mv_particle_le &
  [ STEM < "stretch" >,
    SYNSEM.LOCAL.KEYS [ KEY _stretch_out_rel,
			    --COMPKEY _out_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

stretch_over_v2 := mv_particle_le &
  [ STEM < "stretch" >,
    SYNSEM.LOCAL.KEYS [ KEY _stretch_over_rel,
			    --COMPKEY _over_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

style_v1 := mv_np_trans_le &
  [ STEM < "style" >,
    SYNSEM.LOCAL.KEYS.KEY _style_v_rel ].

:end :instance.


; <<>>

:begin :instance.

submerge_v1 := mv_unerg_le &
  [ STEM < "submerge" >,
    SYNSEM.LOCAL.KEYS.KEY _submerge_rel ].

:end :instance.


; <<>>

:begin :instance.

sunbathe_v1 := mv_unerg_le &
  [ STEM < "sunbathe" >,
    SYNSEM.LOCAL.KEYS.KEY _sunbathe_rel ].

:end :instance.


; <<>>

:begin :instance.

support_v1 := mv_np_trans_le &
  [ STEM < "support" >,
    SYNSEM.LOCAL.KEYS.KEY _support_rel ].

:end :instance.


; <<>>

:begin :instance.

surf_v1 := mv_unerg_le &
  [ STEM < "surf" >,
    SYNSEM.LOCAL.KEYS.KEY _surf_v_rel ].

:end :instance.


; <<>>

:begin :instance.

take_around_v1 := mv_np_prep_particle_only_le &
  [ STEM < "take" >,
    SYNSEM.LOCAL.KEYS [ KEY _take_around_rel,
			--COMPKEY _around_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

temporal_isect := intrans_adj_le &
  [ STEM < "temporal" >,
    SYNSEM.LOCAL.KEYS.KEY _temporal_rel ].

:end :instance.


; <<>>

:begin :instance.

that_deg := degree_spec_noprep_le &
  [ STEM < "that" >,
    SYNSEM.LOCAL.KEYS.KEY _that_deg_rel ].

:end :instance.


; <<>>

:begin :instance.

this_deg :=  degree_spec_noprep_le &
  [ STEM < "this" >,
    SYNSEM.LOCAL.KEYS.KEY _this_grad_rel ].

:end :instance.


; <<>>

:begin :instance.

through_a1 := attr_intrans_adj_le &
  [ STEM < "through" >,
    SYNSEM.LOCAL.KEYS.KEY _through_adj_rel ].

:end :instance.


; <<>>

:begin :instance.

throw_out_v1 := mv_particle_np_le &
  [ STEM < "throw" >,
    SYNSEM.LOCAL.KEYS [ KEY _throw_out_part_rel,
			--COMPKEY _out_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

toast_v1 := mv_np_trans_le &
  [ STEM < "toast" >,
    SYNSEM.LOCAL.KEYS.KEY _toast_v_rel ].

:end :instance.


; <<>>

:begin :instance.

throw_out_v2 := mv_empty_prep_trans_le &
  [ STEM < "throw" >,
    SYNSEM.LOCAL.KEYS [ KEY _throw_out_rel,
			--OCOMPKEY _of_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

trace_back_v1 := mv_empty_prep_trans_le &
  [ STEM < "trace" >,
    SYNSEM.LOCAL.KEYS [ KEY _trace_back_rel,
			--OCOMPKEY _to_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

treat_v1 := mv_empty_prep_trans_le &
  [ STEM < "treat" >,
    SYNSEM.LOCAL.KEYS [ KEY _treat_to_rel,
			--OCOMPKEY _to_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

treat_v2 := mv_np_trans_le &
  [ STEM < "treat" >,
    SYNSEM.LOCAL.KEYS.KEY _treat_v_rel ].

:end :instance.


; <<>>

:begin :instance.

truly_deg := degree_spec_le &
  [ STEM < "truly" >,
    SYNSEM.LOCAL.KEYS.KEY _truly_deg_rel ].

:end :instance.


; <<>>

:begin :instance.

unconsidered_isect := intrans_adj_le &
  [ STEM < "unconsidered" >,
    SYNSEM.LOCAL.KEYS.KEY _unconsidered_rel ].

:end :instance.

; <<>>

:begin :instance.

unimaginable_a1 := intrans_adj_le &
  [ STEM < "unimaginable" >,
    SYNSEM.LOCAL.KEYS.KEY _unimaginable_rel ].

:end :instance.


; <<>>

:begin :instance.

unsophisticated_a1 := intrans_adj_le &
  [ STEM < "unsophisticated" >,
    SYNSEM.LOCAL.KEYS.KEY _unsophisticated_rel ].

:end :instance.


; <<>>

:begin :instance.

vague_a1 := intrans_adj_le &
  [ STEM < "vague" >,
    SYNSEM.LOCAL.KEYS.KEY _vague_rel ].

:end :instance.


; <<>>

:begin :instance.

wall_n2 := intr_noun_word_le &
  [ STEM < "wall" >,
    SYNSEM.LOCAL.KEYS.KEY _wall_rel ].

:end :instance.


; <<>>

:begin :instance.

warrant_v1 := mv_np_trans_le &
  [ STEM < "warrant" >,
    SYNSEM.LOCAL.KEYS.KEY _warrant_v_rel ].

:end :instance.


; <<>>

:begin :instance.

wash_v1 := mv_np_trans_le &
  [ STEM < "wash" >,
    SYNSEM.LOCAL.KEYS.KEY _wash_v_rel ].

:end :instance.


; <<>>

:begin :instance.

water_n2 := intr_noun_word_le &
  [ STEM < "water" >,
    SYNSEM.LOCAL.KEYS.KEY _water_n_rel ].

:end :instance.


; <<>>

:begin :instance.

when_subord := subconj_le &
  [ STEM < "when" >,
    SYNSEM.LOCAL.KEYS.KEY _when_subord_rel ].

:end :instance.


; <<>>

:begin :instance.

whirlpool_n1 := intr_noun_word_le &
  [ STEM < "whirlpool" >,
    SYNSEM.LOCAL.KEYS.KEY _whirlpool_rel ].

:end :instance.


; <<>>

:begin :instance.

wind_up_v1 := mv_particle_le &
  [ STEM < "wind" >,
    SYNSEM.LOCAL.KEYS [ KEY _wind_up_rel,
			--COMPKEY _up_rel ] ].

:end :instance.


; <<>>

:begin :instance.

workaholic_a1 := intrans_adj_le &
  [ STEM < "workaholic" >,
    SYNSEM.LOCAL.KEYS.KEY _workaholic_rel ].

:end :instance.


; <<>>

:begin :instance.

architecturally_adv1 := int_vp_adv_post_word_le &
  [ STEM < "architecturally" >,
    SYNSEM.LOCAL.KEYS.KEY _architecturally_rel ].

:end :instance.


; <<>>

:begin :instance.

artificially := adv_word_le &
  [ STEM < "artificially" >,
    SYNSEM.LOCAL.KEYS.KEY _artificially_rel ].

:end :instance.


; <<>>

:begin :instance.

athletically := adv_word_le &
  [ STEM < "athletically" >,
    SYNSEM.LOCAL.KEYS.KEY _athletically_rel ].

:end :instance.


; <<>>

:begin :instance.

automatically := adv_word_le &
  [ STEM < "automatically" >,
    SYNSEM.LOCAL.KEYS.KEY _automatically_rel ].

:end :instance.


; <<>>

:begin :instance.

biologically := adv_word_le &
  [ STEM < "biologically" >,
    SYNSEM.LOCAL.KEYS.KEY _biologically_rel ].

:end :instance.


; <<>>

:begin :instance.

blindly := adv_word_le &
  [ STEM < "blindly" >,
    SYNSEM.LOCAL.KEYS.KEY _blindly_rel ].

:end :instance.


; <<>>

:begin :instance.

brightly := adv_word_le &
  [ STEM < "brightly" >,
    SYNSEM.LOCAL.KEYS.KEY _brightly_rel ].

:end :instance.


; <<>>

:begin :instance.

brilliantly := adv_word_le &
  [ STEM < "brilliantly" >,
    SYNSEM.LOCAL.KEYS.KEY _brilliantly_rel ].

:end :instance.


; <<>>

:begin :instance.

busily := adv_word_le &
  [ STEM < "busily" >,
    SYNSEM.LOCAL.KEYS.KEY _busily_rel ].

:end :instance.


; <<>>

:begin :instance.

calmly := adv_word_le &
  [ STEM < "calmly" >,
    SYNSEM.LOCAL.KEYS.KEY _calmly_rel ].

:end :instance.


; <<>>

:begin :instance.

catastrophically := adv_word_le &
  [ STEM < "catastrophically" >,
    SYNSEM.LOCAL.KEYS.KEY _catastrophically_rel ].

:end :instance.


; <<>>

:begin :instance.

characteristically := adv_word_le &
  [ STEM < "characteristically" >,
    SYNSEM.LOCAL.KEYS.KEY _characteristically_rel ].

:end :instance.


; <<>>

:begin :instance.

cheaply := adv_word_le &
  [ STEM < "cheaply" >,
    SYNSEM.LOCAL.KEYS.KEY _cheaply_rel ].

:end :instance.


; <<>>

:begin :instance.

classically := adv_word_le &
  [ STEM < "classically" >,
    SYNSEM.LOCAL.KEYS.KEY _classically_rel ].

:end :instance.


; <<>>

:begin :instance.

cleanly := adv_word_le &
  [ STEM < "cleanly" >,
    SYNSEM.LOCAL.KEYS.KEY _cleanly_rel ].

:end :instance.


; <<>>

:begin :instance.

clumsily := adv_word_le &
  [ STEM < "clumsily" >,
    SYNSEM.LOCAL.KEYS.KEY _clumsily_rel ].

:end :instance.


; <<>>

:begin :instance.

coincidingly := adv_word_le &
  [ STEM < "coincidingly" >,
    SYNSEM.LOCAL.KEYS.KEY _coincidingly_rel ].

:end :instance.


; <<>>

:begin :instance.

coldly := adv_word_le &
  [ STEM < "coldly" >,
    SYNSEM.LOCAL.KEYS.KEY _coldly_rel ].

:end :instance.


; <<>>

:begin :instance.

colorfully := adv_word_le &
  [ STEM < "colorfully" >,
    SYNSEM.LOCAL.KEYS.KEY _colorfully_rel ].

:end :instance.


; <<>>

:begin :instance.

comfortably := adv_word_le &
  [ STEM < "comfortably" >,
    SYNSEM.LOCAL.KEYS.KEY _comfortably_rel ].

:end :instance.


; <<>>

:begin :instance.

commonly := adv_word_le &
  [ STEM < "commonly" >,
    SYNSEM.LOCAL.KEYS.KEY _commonly_rel ].

:end :instance.


; <<>>

:begin :instance.

communally := adv_word_le &
  [ STEM < "communally" >,
    SYNSEM.LOCAL.KEYS.KEY _communally_rel ].

:end :instance.


; <<>>

:begin :instance.

comparatively := adv_word_le &
  [ STEM < "comparatively" >,
    SYNSEM.LOCAL.KEYS.KEY _comparatively_rel ].

:end :instance.


; <<>>

:begin :instance.

compatibly := adv_word_le &
  [ STEM < "compatibly" >,
    SYNSEM.LOCAL.KEYS.KEY _compatibly_rel ].

:end :instance.


; <<>>

:begin :instance.

considerably := adv_word_le &
  [ STEM < "considerably" >,
    SYNSEM.LOCAL.KEYS.KEY _considerably_rel ].

:end :instance.


; <<>>

:begin :instance.

constructively := adv_word_le &
  [ STEM < "constructively" >,
    SYNSEM.LOCAL.KEYS.KEY _constructively_rel ].

:end :instance.


; <<>>

:begin :instance.

contemplatively := adv_word_le &
  [ STEM < "contemplatively" >,
    SYNSEM.LOCAL.KEYS.KEY _contemplatively_rel ].

:end :instance.


; <<>>

:begin :instance.

contemporarily := adv_word_le &
  [ STEM < "contemporarily" >,
    SYNSEM.LOCAL.KEYS.KEY _contemporarily_rel ].

:end :instance.


; <<>>

:begin :instance.

coolly := adv_word_le &
  [ STEM < "coolly" >,
    SYNSEM.LOCAL.KEYS.KEY _coolly_rel ].

:end :instance.


; <<>>

:begin :instance.

cooperatively := adv_word_le &
  [ STEM < "cooperatively" >,
    SYNSEM.LOCAL.KEYS.KEY _cooperatively_rel ].

:end :instance.


; <<>>

:begin :instance.

corporately := adv_word_le &
  [ STEM < "corporately" >,
    SYNSEM.LOCAL.KEYS.KEY _corporately_rel ].

:end :instance.


; <<>>

:begin :instance.

correspondingly := adv_word_le &
  [ STEM < "correspondingly" >,
    SYNSEM.LOCAL.KEYS.KEY _correspondingly_rel ].

:end :instance.


; <<>>

:begin :instance.

cosily := adv_word_le &
  [ STEM < "cosily" >,
    SYNSEM.LOCAL.KEYS.KEY _cosily_rel ].

:end :instance.


; <<>>

:begin :instance.

critically := adv_word_le &
  [ STEM < "critically" >,
    SYNSEM.LOCAL.KEYS.KEY _critically_rel ].

:end :instance.


; <<>>

:begin :instance.

daily_a1 := intrans_adj_le &
  [ STEM < "daily" >,
    SYNSEM.LOCAL.KEYS.KEY _daily_rel ].

:end :instance.


; <<>>

:begin :instance.

darkly := adv_word_le &
  [ STEM < "darkly" >,
    SYNSEM.LOCAL.KEYS.KEY _darkly_rel ].

:end :instance.


; <<>>

:begin :instance.

dismissively := adv_word_le &
  [ STEM < "dismissively" >,
    SYNSEM.LOCAL.KEYS.KEY _dismissively_rel ].

:end :instance.


; <<>>

:begin :instance.

domestically := adv_word_le &
  [ STEM < "domestically" >,
    SYNSEM.LOCAL.KEYS.KEY _domestically_rel ].

:end :instance.


; <<>>

:begin :instance.

dreadfully := adv_word_le &
  [ STEM < "dreadfully" >,
    SYNSEM.LOCAL.KEYS.KEY _dreadfully_rel ].

:end :instance.


; <<>>

:begin :instance.

drily := adv_word_le &
  [ STEM < "drily" >,
    SYNSEM.LOCAL.KEYS.KEY _drily_rel ].

:end :instance.


; <<>>

:begin :instance.

ecologically := adv_word_le &
  [ STEM < "ecologically" >,
    SYNSEM.LOCAL.KEYS.KEY _ecologically_rel ].

:end :instance.


; <<>>

:begin :instance.

egoistically := adv_word_le &
  [ STEM < "egoistically" >,
    SYNSEM.LOCAL.KEYS.KEY _egoistically_rel ].

:end :instance.


; <<>>

:begin :instance.

elegantly := adv_word_le &
  [ STEM < "elegantly" >,
    SYNSEM.LOCAL.KEYS.KEY _elegantly_rel ].

:end :instance.


; <<>>

:begin :instance.

enthusiastically := adv_word_le &
  [ STEM < "enthusiastically" >,
    SYNSEM.LOCAL.KEYS.KEY _enthusiastically_rel ].

:end :instance.


; <<>>

:begin :instance.

entirely_deg := degree_spec_le &
  [ STEM < "entirely" >,
    SYNSEM.LOCAL.KEYS.KEY _entirely_rel ].

:end :instance.


; <<>>

:begin :instance.

environmentally := adv_word_le &
  [ STEM < "environmentally" >,
    SYNSEM.LOCAL.KEYS.KEY _environmentally_rel ].

:end :instance.


; <<>>

:begin :instance.

equally := adv_word_le &
  [ STEM < "equally" >,
    SYNSEM.LOCAL.KEYS.KEY _equally_rel ].

:end :instance.


; <<>>

:begin :instance.

euphorically := adv_word_le &
  [ STEM < "euphorically" >,
    SYNSEM.LOCAL.KEYS.KEY _euphorically_rel ].

:end :instance.


; <<>>

:begin :instance.

exactly := int_vp_adv_word_le &
  [ STEM < "exactly" >,
    SYNSEM.LOCAL.KEYS.KEY _exactly_rel ].

:end :instance.


; <<>>

:begin :instance.

exceptionally := adv_word_le &
  [ STEM < "exceptionally" >,
    SYNSEM.LOCAL.KEYS.KEY _exceptionally_rel ].

:end :instance.


; <<>>

:begin :instance.

fabulously := adv_word_le &
  [ STEM < "fabulously" >,
    SYNSEM.LOCAL.KEYS.KEY _fabulously_rel ].

:end :instance.


; <<>>

:begin :instance.

federally := adv_word_le &
  [ STEM < "federally" >,
    SYNSEM.LOCAL.KEYS.KEY _federally_rel ].

:end :instance.


; <<>>

:begin :instance.

festively := adv_word_le &
  [ STEM < "festively" >,
    SYNSEM.LOCAL.KEYS.KEY _festively_rel ].

:end :instance.


; <<>>

:begin :instance.

financially := adv_word_le &
  [ STEM < "financially" >,
    SYNSEM.LOCAL.KEYS.KEY _financially_rel ].

:end :instance.


; <<>>

:begin :instance.

firmly := adv_word_le &
  [ STEM < "firmly" >,
    SYNSEM.LOCAL.KEYS.KEY _firmly_rel ].

:end :instance.


; <<>>
; MULTIKEY < "follow" >

:begin :instance.

follow_up_n1 := intr_noun_word_mle1 &
  [ STEM < "follow", "up" >,
    SYNSEM.LOCAL.KEYS.KEY _follow_up_n_rel ].

:end :instance.


; <<>>

:begin :instance.

formally := adv_word_le &
  [ STEM < "formally" >,
    SYNSEM.LOCAL.KEYS.KEY _formally_rel ].

:end :instance.


; <<>>

:begin :instance.

generously := adv_word_le &
  [ STEM < "generously" >,
    SYNSEM.LOCAL.KEYS.KEY _generously_rel ].

:end :instance.


; <<>>
; MULTIKEY < "german" >

:begin :instance.

german_speaking_a1 := intrans_adj_mle &
  [ STEM < "german", "speaking" >,
    SYNSEM.LOCAL.KEYS.KEY _german_speaking_rel ].

:end :instance.


; <<>>

:begin :instance.

gratefully := adv_word_le &
  [ STEM < "gratefully" >,
    SYNSEM.LOCAL.KEYS.KEY _gratefully_rel ].

:end :instance.


; <<>>

:begin :instance.

hastily := adv_word_le &
  [ STEM < "hastily" >,
    SYNSEM.LOCAL.KEYS.KEY _hastily_rel ].

:end :instance.


; <<>>

:begin :instance.

hectically := adv_word_le &
  [ STEM < "hectically" >,
    SYNSEM.LOCAL.KEYS.KEY _hectically_rel ].

:end :instance.


; <<>>

:begin :instance.

helpfully := adv_word_le &
  [ STEM < "helpfully" >,
    SYNSEM.LOCAL.KEYS.KEY _helpfully_rel ].

:end :instance.


; <<>>

:begin :instance.

helplessly := adv_word_le &
  [ STEM < "helplessly" >,
    SYNSEM.LOCAL.KEYS.KEY _helplessly_rel ].

:end :instance.


; <<>>

:begin :instance.

historically := adv_word_le &
  [ STEM < "historically" >,
    SYNSEM.LOCAL.KEYS.KEY _historically_rel ].

:end :instance.


; <<>>

:begin :instance.

hopelessly := adv_word_le &
  [ STEM < "hopelessly" >,
    SYNSEM.LOCAL.KEYS.KEY _hopelessly_rel ].

:end :instance.


; <<>>

:begin :instance.

imperatively := adv_word_le &
  [ STEM < "imperatively" >,
    SYNSEM.LOCAL.KEYS.KEY _imperatively_rel ].

:end :instance.


; <<>>

:begin :instance.

impractically := adv_word_le &
  [ STEM < "impractically" >,
    SYNSEM.LOCAL.KEYS.KEY _impractically_rel ].

:end :instance.


; <<>>

:begin :instance.

inaccurately := adv_word_le &
  [ STEM < "inaccurately" >,
    SYNSEM.LOCAL.KEYS.KEY _inaccurately_rel ].

:end :instance.


; <<>>

:begin :instance.

inconveniently := adv_word_le &
  [ STEM < "inconveniently" >,
    SYNSEM.LOCAL.KEYS.KEY _inconveniently_rel ].

:end :instance.


; <<>>

:begin :instance.

indifferently := adv_word_le &
  [ STEM < "indifferently" >,
    SYNSEM.LOCAL.KEYS.KEY _indifferently_rel ].

:end :instance.


; <<>>

:begin :instance.

ineffectively := adv_word_le &
  [ STEM < "ineffectively" >,
    SYNSEM.LOCAL.KEYS.KEY _ineffectively_rel ].

:end :instance.


; <<>>

:begin :instance.

inopportunely := adv_word_le &
  [ STEM < "inopportunely" >,
    SYNSEM.LOCAL.KEYS.KEY _inopportunely_rel ].

:end :instance.


; <<>>

:begin :instance.

insignificantly := adv_word_le &
  [ STEM < "insignificantly" >,
    SYNSEM.LOCAL.KEYS.KEY _insignificantly_rel ].

:end :instance.


; <<>>

:begin :instance.

intelligently := adv_word_le &
  [ STEM < "intelligently" >,
    SYNSEM.LOCAL.KEYS.KEY _intelligently_rel ].

:end :instance.


; <<>>

:begin :instance.

intimately := adv_word_le &
  [ STEM < "intimately" >,
    SYNSEM.LOCAL.KEYS.KEY _intimately_rel ].

:end :instance.


; <<>>

:begin :instance.

intolerably := adv_word_le &
  [ STEM < "intolerablely" >,
    SYNSEM.LOCAL.KEYS.KEY _intolerably_rel ].

:end :instance.


; <<>>

:begin :instance.

kindly := adv_word_le &
  [ STEM < "kindly" >,
    SYNSEM.LOCAL.KEYS.KEY _kindly_rel ].

:end :instance.


; <<>>

:begin :instance.

least_a1 := intrans_adj_le &
  [ STEM < "least" >,
    SYNSEM.LOCAL.KEYS.KEY _least_isect_rel ].

:end :instance.


; <<>>

:begin :instance.

luxuriously := adv_word_le &
  [ STEM < "luxuriously" >,
    SYNSEM.LOCAL.KEYS.KEY _luxuriously_rel ].

:end :instance.


; <<>>

:begin :instance.

madly := adv_word_le &
  [ STEM < "madly" >,
    SYNSEM.LOCAL.KEYS.KEY _madly_rel ].

:end :instance.


; <<>>
; MULTIKEY < "medium" >

:begin :instance.

medium_range_a1 := intrans_adj_mle &
  [ STEM < "medium", "range" >,
    SYNSEM.LOCAL.KEYS.KEY _medium_range_rel ].

:end :instance.


; <<>>

:begin :instance.

mildly := adv_word_le &
  [ STEM < "mildly" >,
    SYNSEM.LOCAL.KEYS.KEY _mildly_rel ].

:end :instance.


; <<>>

:begin :instance.

moderately := adv_word_le &
  [ STEM < "moderately" >,
    SYNSEM.LOCAL.KEYS.KEY _moderately_rel ].

:end :instance.


; <<>>

:begin :instance.

mutually := adv_word_le &
  [ STEM < "mutually" >,
    SYNSEM.LOCAL.KEYS.KEY _mutually_rel ].

:end :instance.


; <<>>

:begin :instance.

nastily := adv_word_le &
  [ STEM < "nastily" >,
    SYNSEM.LOCAL.KEYS.KEY _nastily_rel ].

:end :instance.


; <<>>

:begin :instance.

natively := adv_word_le &
  [ STEM < "natively" >,
    SYNSEM.LOCAL.KEYS.KEY _natively_rel ].

:end :instance.


; <<>>

:begin :instance.

negatively := adv_word_le &
  [ STEM < "negatively" >,
    SYNSEM.LOCAL.KEYS.KEY _negatively_rel ].

:end :instance.


; <<>>

:begin :instance.

negligibly := adv_word_le &
  [ STEM < "negligibly" >,
    SYNSEM.LOCAL.KEYS.KEY _negligibly_rel ].

:end :instance.


; <<>>

:begin :instance.

nonrefundably := adv_word_le &
  [ STEM < "nonrefundably" >,
    SYNSEM.LOCAL.KEYS.KEY _nonrefundably_rel ].

:end :instance.


; <<>>

:begin :instance.

on_a1 := pred_intrans_adj_le &
  [ STEM < "on" >,
    SYNSEM.LOCAL.KEYS.KEY _on_isect_rel ].

:end :instance.


; <<>>

:begin :instance.

openly := adv_word_le &
  [ STEM < "openly" >,
    SYNSEM.LOCAL.KEYS.KEY _openly_rel ].

:end :instance.


; <<>>

:begin :instance.

oppressively := adv_word_le &
  [ STEM < "oppressively" >,
    SYNSEM.LOCAL.KEYS.KEY _oppressively_rel ].

:end :instance.


; <<>>

:begin :instance.

optionally := adv_word_le &
  [ STEM < "optionally" >,
    SYNSEM.LOCAL.KEYS.KEY _optionally_rel ].

:end :instance.


; <<>>

:begin :instance.

outwardly := adv_word_le &
  [ STEM < "outwardly" >,
    SYNSEM.LOCAL.KEYS.KEY _outwardly_rel ].

:end :instance.


; <<>>

:begin :instance.

outrageously := adv_word_le &
  [ STEM < "outrageously" >,
    SYNSEM.LOCAL.KEYS.KEY _outrageously_rel ].

:end :instance.


; <<>>

:begin :instance.

permanently := adv_word_le &
  [ STEM < "permanently" >,
    SYNSEM.LOCAL.KEYS.KEY _permanently_rel ].

:end :instance.


; <<>>

:begin :instance.

politely := adv_word_le &
  [ STEM < "politely" >,
    SYNSEM.LOCAL.KEYS.KEY _politely_rel ].

:end :instance.


; <<>>

:begin :instance.

preciously := adv_word_le &
  [ STEM < "preciously" >,
    SYNSEM.LOCAL.KEYS.KEY _preciously_rel ].

:end :instance.


; <<>>

:begin :instance.

pressingly := adv_word_le &
  [ STEM < "pressingly" >,
    SYNSEM.LOCAL.KEYS.KEY _pressingly_rel ].

:end :instance.


; <<>>

:begin :instance.

presumably := adv_word_le &
  [ STEM < "presumably" >,
    SYNSEM.LOCAL.KEYS.KEY _presumably_rel ].

:end :instance.


; <<>>

:begin :instance.

professionally := adv_word_le &
  [ STEM < "professionally" >,
    SYNSEM.LOCAL.KEYS.KEY _professionally_rel ].

:end :instance.


; <<>>

:begin :instance.

promisingly := adv_word_le &
  [ STEM < "promisingly" >,
    SYNSEM.LOCAL.KEYS.KEY _promisingly_rel ].

:end :instance.


; <<>>

:begin :instance.

qualitatively := adv_word_le &
  [ STEM < "qualitatively" >,
    SYNSEM.LOCAL.KEYS.KEY _qualitatively_rel ].

:end :instance.


; <<>>

:begin :instance.

reciprocally := adv_word_le &
  [ STEM < "reciprocally" >,
    SYNSEM.LOCAL.KEYS.KEY _reciprocally_rel ].

:end :instance.


; <<>>

:begin :instance.

regrettably := adv_word_le &
  [ STEM < "regrettably" >,
    SYNSEM.LOCAL.KEYS.KEY _regrettably_rel ].

:end :instance.


; <<>>

:begin :instance.

reliably := adv_word_le &
  [ STEM < "reliably" >,
    SYNSEM.LOCAL.KEYS.KEY _reliably_rel ].

:end :instance.


; <<>>

:begin :instance.

reportedly := adv_word_le &
  [ STEM < "reportedly" >,
    SYNSEM.LOCAL.KEYS.KEY _reportedly_rel ].

:end :instance.


; <<>>

:begin :instance.

responsibly := adv_word_le &
  [ STEM < "responsibly" >,
    SYNSEM.LOCAL.KEYS.KEY _responsibly_rel ].

:end :instance.


; <<>>

:begin :instance.

romantically := adv_word_le &
  [ STEM < "romantically" >,
    SYNSEM.LOCAL.KEYS.KEY _romantically_rel ].

:end :instance.


; <<>>

:begin :instance.

rosily := adv_word_le &
  [ STEM < "rosily" >,
    SYNSEM.LOCAL.KEYS.KEY _rosily_rel ].

:end :instance.


; <<>>

:begin :instance.

rough_adj := intrans_adj_le &
  [ STEM < "rough" >,
    SYNSEM.LOCAL.KEYS.KEY _rough_isect_rel ].

:end :instance.


; <<>>

:begin :instance.

roughly := adv_word_le &
  [ STEM < "roughly" >,
    SYNSEM.LOCAL.KEYS.KEY _roughly_rel ].

:end :instance.


; <<>>

:begin :instance.

sceptically := adv_word_le &
  [ STEM < "sceptically" >,
    SYNSEM.LOCAL.KEYS.KEY _sceptically_rel ].

:end :instance.


; <<>>

:begin :instance.

sincerely := adv_word_le &
  [ STEM < "sincerely" >,
    SYNSEM.LOCAL.KEYS.KEY _sincerely_rel ].

:end :instance.


; <<>>

:begin :instance.

smartly := adv_word_le &
  [ STEM < "smartly" >,
    SYNSEM.LOCAL.KEYS.KEY _smartly_rel ].

:end :instance.


; <<>>

:begin :instance.

soulfully := adv_word_le &
  [ STEM < "soulfully" >,
    SYNSEM.LOCAL.KEYS.KEY _soulfully_rel ].

:end :instance.


; <<>>

:begin :instance.

sourly := adv_word_le &
  [ STEM < "sourly" >,
    SYNSEM.LOCAL.KEYS.KEY _sourly_rel ].

:end :instance.


; <<>>

:begin :instance.

sporadically := adv_word_le &
  [ STEM < "sporadically" >,
    SYNSEM.LOCAL.KEYS.KEY _sporadically_rel ].

:end :instance.


; <<>>

:begin :instance.

straight_adv := adv_word_le &
  [ STEM < "straight" >,
    SYNSEM.LOCAL.KEYS.KEY _straight_adv_rel ].

:end :instance.


; <<>>

:begin :instance.

strenuously := adv_word_le &
  [ STEM < "strenuously" >,
    SYNSEM.LOCAL.KEYS.KEY _strenuously_rel ].

:end :instance.


; <<>>

:begin :instance.

substantially := adv_word_le &
  [ STEM < "substantially" >,
    SYNSEM.LOCAL.KEYS.KEY _substantially_rel ].

:end :instance.


; <<>>

:begin :instance.

sunnily := adv_word_le &
  [ STEM < "sunnily" >,
    SYNSEM.LOCAL.KEYS.KEY _sunnily_rel ].

:end :instance.


; <<>>

:begin :instance.

temporarily := adv_word_le &
  [ STEM < "temporarily" >,
    SYNSEM.LOCAL.KEYS.KEY _temporarily_rel ].

:end :instance.


; <<>>

:begin :instance.

tensely := adv_word_le &
  [ STEM < "tensely" >,
    SYNSEM.LOCAL.KEYS.KEY _tensely_rel ].

:end :instance.


; <<>>

:begin :instance.

tepidly := adv_word_le &
  [ STEM < "tepidly" >,
    SYNSEM.LOCAL.KEYS.KEY _tepidly_rel ].

:end :instance.


; <<>>

:begin :instance.

tiresomely := adv_word_le &
  [ STEM < "tiresomely" >,
    SYNSEM.LOCAL.KEYS.KEY _tiresomely_rel ].

:end :instance.


; <<>>

:begin :instance.

tragically := adv_word_le &
  [ STEM < "tragically" >,
    SYNSEM.LOCAL.KEYS.KEY _tragically_rel ].

:end :instance.


; <<>>

:begin :instance.

typically := adv_word_le &
  [ STEM < "typically" >,
    SYNSEM.LOCAL.KEYS.KEY _typically_rel ].

:end :instance.


; <<>>

:begin :instance.

unacceptably := adv_word_le &
  [ STEM < "unacceptably" >,
    SYNSEM.LOCAL.KEYS.KEY _unacceptably_rel ].

:end :instance.


; <<>>

:begin :instance.

uncomfortably := adv_word_le &
  [ STEM < "uncomfortably" >,
    SYNSEM.LOCAL.KEYS.KEY _uncomfortably_rel ].

:end :instance.


; <<>>

:begin :instance.

uninterestingly := adv_word_le &
  [ STEM < "uninterestingly" >,
    SYNSEM.LOCAL.KEYS.KEY _uninterestingly_rel ].

:end :instance.


; <<>>

:begin :instance.

unnecessarily := adv_word_le &
  [ STEM < "unnecessarily" >,
    SYNSEM.LOCAL.KEYS.KEY _unnecessarily_rel ].

:end :instance.


; <<>>

:begin :instance.

unproblematically := adv_word_le &
  [ STEM < "unproblematically" >,
    SYNSEM.LOCAL.KEYS.KEY _unproblematically_rel ].

:end :instance.


; <<>>

:begin :instance.

unproductively := adv_word_le &
  [ STEM < "unproductively" >,
    SYNSEM.LOCAL.KEYS.KEY _unproductively_rel ].

:end :instance.


; <<>>

:begin :instance.

unrealistically := adv_word_le &
  [ STEM < "unrealistically" >,
    SYNSEM.LOCAL.KEYS.KEY _unrealistically_rel ].

:end :instance.


; <<>>

:begin :instance.

unselfishly := adv_word_le &
  [ STEM < "unselfishly" >,
    SYNSEM.LOCAL.KEYS.KEY _unselfishly_rel ].

:end :instance.


; <<>>

:begin :instance.

unsuitably := adv_word_le &
  [ STEM < "unsuitably" >,
    SYNSEM.LOCAL.KEYS.KEY _unsuitably_rel ].

:end :instance.


; <<>>

:begin :instance.

upward := adv_word_le &
  [ STEM < "upward" >,
    SYNSEM.LOCAL.KEYS.KEY _upward_adv_rel ].

:end :instance.


; <<>>

:begin :instance.

variably := adv_word_le &
  [ STEM < "variably" >,
    SYNSEM.LOCAL.KEYS.KEY _variably_rel ].

:end :instance.


; <<>>

:begin :instance.

voluntarily := adv_word_le &
  [ STEM < "voluntarily" >,
    SYNSEM.LOCAL.KEYS.KEY _voluntarily_rel ].

:end :instance.


; <<>>

:begin :instance.

weakly := adv_word_le &
  [ STEM < "weakly" >,
    SYNSEM.LOCAL.KEYS.KEY _weakly_rel ].

:end :instance.


; <<>>

:begin :instance.

widely := adv_word_le &
  [ STEM < "widely" >,
    SYNSEM.LOCAL.KEYS.KEY _widely_rel ].

:end :instance.


; <<>>

:begin :instance.

worriedly := adv_word_le &
  [ STEM < "worriedly" >,
    SYNSEM.LOCAL.KEYS.KEY _worriedly_rel ].

:end :instance.


; <<>>

:begin :instance.

known_isect := attr_intrans_adj_le &
  [ STEM < "known" >,
    SYNSEM.LOCAL.KEYS.KEY _known_rel ].

:end :instance.


; <<>>

:begin :instance.

missing_a1 := attr_intrans_adj_le &
  [ STEM < "missing" >,
    SYNSEM.LOCAL.KEYS.KEY _missing_rel ].

:end :instance.


; <<>>

:begin :instance.

preceding_a1 := attr_intrans_adj_le &
  [ STEM < "preceding" >,
    SYNSEM.LOCAL.KEYS.KEY _preceding_rel ].

:end :instance.


; <<>>

:begin :instance.

remaining_a1 := attr_intrans_adj_le &
  [ STEM < "remaining" >,
    SYNSEM.LOCAL.KEYS.KEY _remaining_rel ].

:end :instance.


; <<>>

:begin :instance.

swimming_a1 := attr_intrans_adj_le &
  [ STEM < "swimming" >,
    SYNSEM.LOCAL.KEYS.KEY _swimming_rel ].

:end :instance.


; <<>>

:begin :instance.

working_a1 := attr_intrans_adj_le &
  [ STEM < "working" >,
    SYNSEM.LOCAL.KEYS.KEY _working_rel ].

:end :instance.


; <<>>

:begin :instance.

coinciding_isect := attr_intrans_adj_le &
  [ STEM < "coinciding" >,
    SYNSEM.LOCAL.KEYS.KEY _coinciding_rel ].

:end :instance.

; <<>>

:begin :instance.

coming_isect := attr_intrans_adj_le &
  [ STEM < "coming" >,
    SYNSEM.LOCAL.KEYS.KEY _coming_rel ].

:end :instance.

; <<>>

:begin :instance.

finishing_isect := attr_intrans_adj_le &
  [ STEM < "finishing" >,
    SYNSEM.LOCAL.KEYS.KEY _finishing_rel ].

:end :instance.

; <<>>

:begin :instance.

flying_isect := attr_intrans_adj_le &
  [ STEM < "flying" >,
    SYNSEM.LOCAL.KEYS.KEY _flying_rel ].

:end :instance.

; <<>>

:begin :instance.

operating_isect := attr_intrans_adj_le &
  [ STEM < "operating" >,
    SYNSEM.LOCAL.KEYS.KEY _operating_rel ].

:end :instance.

; <<>>

:begin :instance.

publishing_isect := attr_intrans_adj_le &
  [ STEM < "publishing" >,
    SYNSEM.LOCAL.KEYS.KEY _publishing_rel ].

:end :instance.

; <<>>

:begin :instance.

sleeping_isect := attr_intrans_adj_le &
  [ STEM < "sleeping" >,
    SYNSEM.LOCAL.KEYS.KEY _sleeping_rel ].

:end :instance.

; <<>>

:begin :instance.

writing_isect := attr_intrans_adj_le &
  [ STEM < "writing" >,
    SYNSEM.LOCAL.KEYS.KEY _writing_rel ].

:end :instance.

; <<>>

:begin :instance.

smoking_a1 := attr_intrans_adj_le &
  [ STEM < "smoking" >,
    SYNSEM.LOCAL.KEYS.KEY _smoking_rel ].

:end :instance.


; <<>>

:begin :instance.

added_a1 := attr_intrans_adj_le &
  [ STEM < "added" >,
    SYNSEM.LOCAL.KEYS.KEY _added_rel ].

:end :instance.


; <<>>

:begin :instance.

scheduled_a1 := attr_intrans_adj_le &
  [ STEM < "scheduled" >,
    SYNSEM.LOCAL.KEYS.KEY _scheduled_rel ].

:end :instance.


; <<>>

:begin :instance.

started_a1 := attr_intrans_adj_le &
  [ STEM < "started" >,
    SYNSEM.LOCAL.KEYS.KEY _started_rel ].

:end :instance.


; <<>>

:begin :instance.

armed_isect := attr_intrans_adj_le &
  [ STEM < "armed" >,
    SYNSEM.LOCAL.KEYS.KEY _armed_rel ].

:end :instance.

; <<>>

:begin :instance.

based_isect := attr_intrans_adj_le &
  [ STEM < "based" >,
    SYNSEM.LOCAL.KEYS.KEY _based_rel ].

:end :instance.

; <<>>

:begin :instance.

cancelled_isect := attr_intrans_adj_le &
  [ STEM < "cancelled" >,
    SYNSEM.LOCAL.KEYS.KEY _cancelled_rel ].

:end :instance.

; <<>>

:begin :instance.

jammed_isect := attr_intrans_adj_le &
  [ STEM < "jammed" >,
    SYNSEM.LOCAL.KEYS.KEY _jammed_rel ].

:end :instance.

; <<>>

:begin :instance.

lengthened_isect := attr_intrans_adj_le &
  [ STEM < "lengthened" >,
    SYNSEM.LOCAL.KEYS.KEY _lengthened_rel ].

:end :instance.

; <<>>

:begin :instance.

predicted_isect := attr_intrans_adj_le &
  [ STEM < "predicted" >,
    SYNSEM.LOCAL.KEYS.KEY _predicted_rel ].

:end :instance.

; <<>>

:begin :instance.

reported_isect := attr_intrans_adj_le &
  [ STEM < "reported" >,
    SYNSEM.LOCAL.KEYS.KEY _reported_rel ].

:end :instance.

; <<>>

:begin :instance.

flabbergasted_a1 := attr_intrans_adj_le &
  [ STEM < "flabbergasted" >,
    SYNSEM.LOCAL.KEYS.KEY _flabbergasted_rel ].

:end :instance.

; <<>>

:begin :instance.

priced_a1 := attr_intrans_adj_le &
  [ STEM < "priced" >,
    SYNSEM.LOCAL.KEYS.KEY _priced_rel ].

:end :instance.

; <<>>

:begin :instance.

included_a1 := attr_intrans_adj_le &
  [ STEM < "included" >,
    SYNSEM.LOCAL.KEYS.KEY _included_rel ].

:end :instance.


; <<>>

:begin :instance.

informed_a1 := attr_intrans_adj_le &
  [ STEM < "informed" >,
    SYNSEM.LOCAL.KEYS.KEY _informed_rel ].

:end :instance.


; <<>>

:begin :instance.

integrated_a1 := attr_intrans_adj_le &
  [ STEM < "integrated" >,
    SYNSEM.LOCAL.KEYS.KEY _integrated_rel ].

:end :instance.


; <<>>

:begin :instance.

saved_isect := attr_intrans_adj_le &
  [ STEM < "saved" >,
    SYNSEM.LOCAL.KEYS.KEY _saved_rel ].

:end :instance.


; <<>>
; MULTIKEY < "you" >

:begin :instance.

you_know_scop := adv_word_mle1 &
  [ STEM < "you", "know" >,
    SYNSEM.LOCAL.KEYS.KEY _you_know_rel ].

:end :instance.


; <<>>

:begin :instance.

like_deg := degree_spec_le &
  [ STEM < "like" >,
    SYNSEM.LOCAL.KEYS.KEY _like_deg_rel ].

:end :instance.


; <<>>
; MULTIKEY < "ten" >

:begin :instance.

ten_four_root := disc_adv_mle1 &
  [ STEM < "ten", "four" >,
    SYNSEM.LOCAL.KEYS.KEY excl_rel & [ EXCL 'ten_four ] ].

:end :instance.


; <<>>
; MULTIKEY < "that" >

:begin :instance.

now_that := subconj_mle2 &
  [ STEM < "now", "that" >,
    SYNSEM.LOCAL.KEYS.KEY _now_that_rel ].

:end :instance.


; <<>>
; MULTIKEY < "$s" >

:begin :instance.

CS_nd := proper_mle2 &
  [ STEM < "$c", "$s" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'CS ].

:end :instance.

; <<>>

:begin :instance.

have_cause := mv_sorb_le &
  [ STEM < "have" >,
    SYNSEM.LOCAL.KEYS.KEY _have_cause_rel ].

:end :instance.


; <<>>

:begin :instance.

work_out_v2 := mv_particle_le &
  [ STEM < "work" >,
    SYNSEM.LOCAL.KEYS [ KEY _work_out_rel,
			--COMPKEY _out_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

sometime_n := det_n_le &
  [ STEM < "sometime" >,
    SYNSEM.LOCAL.KEYS [ KEY _time_rel,
			ALTKEY _some_rel ] ].

:end :instance.


; <<>>

:begin :instance.

anytime_n := det_n_le &
  [ STEM < "anytime" >,
    SYNSEM.LOCAL.KEYS [ KEY _time_rel,
			ALTKEY _any_rel ] ].

:end :instance.


; <<>>

:begin :instance.

anyplace_n := det_n_le &
  [ STEM < "anyplace" >,
    SYNSEM.LOCAL.KEYS [ KEY place_rel,
			ALTKEY _any_rel ] ].

:end :instance.


; <<>>

:begin :instance.

anywhere_n := det_n_le &
  [ STEM < "anywhere" >,
    SYNSEM.LOCAL.KEYS [ KEY place_rel,
			ALTKEY _any_rel ] ].

:end :instance.


; <<>>

:begin :instance.

everywhere_n := det_n_le &
  [ STEM < "everywhere" >,
    SYNSEM.LOCAL.KEYS [ KEY place_rel,
			ALTKEY _every_rel ] ].

:end :instance.


; <<>>

:begin :instance.

nowhere_n := det_n_le &
  [ STEM < "nowhere" >,
    SYNSEM.LOCAL.KEYS [ KEY place_rel,
			ALTKEY _no_det_rel ] ].

:end :instance.


; <<>>

:begin :instance.

someplace_n := det_n_le &
  [ STEM < "someplace" >,
    SYNSEM.LOCAL.KEYS [ KEY place_rel,
			ALTKEY _some_rel ] ].

:end :instance.


; <<>>

:begin :instance.

somewhere_n := det_n_le &
  [ STEM < "somewhere" >,
    SYNSEM.LOCAL.KEYS [ KEY place_rel,
			ALTKEY _some_rel ] ].

:end :instance.


; <<>>
; MULTIKEY < "way" >

:begin :instance.

all_the_way_deg := degree_spec_3mle3 &
  [ STEM < "all", "the", "way" >,
    SYNSEM.LOCAL.KEYS.KEY _all_the_way_deg_rel ].

:end :instance.


; <<>>
; MULTIKEY < "some" >

:begin :instance.

some_more_adv1 := adv_word_mle1 &
  [ STEM < "some", "more" >,
    SYNSEM.LOCAL.KEYS.KEY _some_more_rel ].

:end :instance.


; <<>>

:begin :instance.

so_cp := compl_phrase_word_le &
  [ STEM < "so" >,
    SYNSEM.LOCAL.KEYS.MESSAGE <! prpstn_rel !> ].

:end :instance.


; <<>>
; MULTIKEY < "good" >

:begin :instance.

good_buddy_n1 := proper_mle1 &
  [ STEM < "good", "buddy" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'good_buddy ].

:end :instance.

; <<>>

:begin :instance.

x_to_y_np := x_to_y_word_le &
  [ STEM < "to" > ].

:end :instance.


; <<>>

:begin :instance.

cashier_n1 := intr_noun_word_le &
  [ STEM < "cashier" >,
    SYNSEM.LOCAL.KEYS.KEY _cashier_rel ].

:end :instance.


; <<>>

:begin :instance.

suite_n1 := intr_noun_word_le &
  [ STEM < "suite" >,
    SYNSEM.LOCAL.KEYS.KEY _suite_rel ].

:end :instance.


; <<>>

:begin :instance.

bundesbahn_n1 := intr_noun_word_le &
  [ STEM < "bundesbahn" >,
    SYNSEM.LOCAL.KEYS.KEY _bundesbahn_rel ].

:end :instance.


; <<>>

:begin :instance.

james := proper_le &
  [ STEM < "james" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'james ].

:end :instance.


; <<>>

:begin :instance.

rickhoff := proper_le &
  [ STEM < "rickhoff" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'rickhoff ].

:end :instance.


; <<>>

:begin :instance.

atlantic_n1 := intr_noun_word_le &
  [ STEM < "atlantic" >,
    SYNSEM.LOCAL.KEYS.KEY named_rel & [ NAMED 'atlantic ] ].

:end :instance.


; <<>>
; MULTIKEY < "master" >

:begin :instance.

Master_Card_n1 := proper_mle1 &
  [ STEM < "master", "card" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'MasterCard ].

:end :instance.


; <<>>
; MULTIKEY < "american" >

:begin :instance.

American_Express_n1 := proper_mle1 &
  [ STEM < "american", "express" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'American_Express ].

:end :instance.


; <<>>

:begin :instance.

Visa := proper_le &
  [ STEM < "visa" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Visa ].

:end :instance.


; <<>>

:begin :instance.

section_n1 := noun_ppof_word_le &
  [ STEM < "section" >,
    SYNSEM.LOCAL.KEYS.KEY _section_rel ].

:end :instance.


; <<>>
; MULTIKEY < "bahn" >

:begin :instance.

bahncard_n1 := intr_noun_word_mle1 &
  [ STEM < "bahn", "card" >,
    SYNSEM.LOCAL.KEYS.KEY _bahn_card_rel ].

:end :instance.


; <<>>

:begin :instance.

peter := proper_le &
  [ STEM < "peter" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'peter ].

:end :instance.


; <<>>

:begin :instance.

griechstrasse := proper_le &
  [ STEM < "griechstrasse" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'griechstrasse ].

:end :instance.


; <<>>

:begin :instance.

colgate := proper_le &
  [ STEM < "colgate" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'colgate ].

:end :instance.


; <<>>

:begin :instance.

signature_n1 := intr_noun_word_le &
  [ STEM < "signature" >,
    SYNSEM.LOCAL.KEYS.KEY _signature_rel ].

:end :instance.


; <<>>

:begin :instance.

mhm_root := disc_adv_le &
  [ STEM < "mhm" >,
    SYNSEM.LOCAL.KEYS.KEY excl_rel & [ EXCL 'mhm ] ].

:end :instance.


; <<>>

:begin :instance.

dammtor := proper_le &
  [ STEM < "dammtor" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'dammtor ].

:end :instance.


; <<>>

:begin :instance.

lyle := proper_le &
  [ STEM < "lyle" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'lyle ].

:end :instance.


; <<>>

:begin :instance.

scapoff := proper_le &
  [ STEM < "scapoff" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'scapoff ].

:end :instance.


; <<>>
; MULTIKEY < "british" >

:begin :instance.

British_Airways_n1 := proper_mle1 &
  [ STEM < "british", "airways" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'BritishAirways ].

:end :instance.


; <<>>

:begin :instance.

putis := proper_le &
  [ STEM < "putis" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'putis ].

:end :instance.


; <<>>

:begin :instance.

rothenbaumchaussee := proper_le &
  [ STEM < "rothenbaumchaussee" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'rothenbaumchaussee ].

:end :instance.


; <<>>

:begin :instance.

player_n1 := intr_noun_word_le &
  [ STEM < "player" >,
    SYNSEM.LOCAL.KEYS.KEY _player_rel ].

:end :instance.


; <<>>

:begin :instance.

thompson := proper_le &
  [ STEM < "thompson" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'thompson ].

:end :instance.


; <<>>

:begin :instance.

enjoyable := intrans_adj_le &
  [ STEM < "enjoyable" >,
    SYNSEM.LOCAL.KEYS.KEY _enjoyable_rel ].

:end :instance.


; <<>>

:begin :instance.

bashford := proper_le &
  [ STEM < "bashford" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'bashford ].

:end :instance.


; <<>>

:begin :instance.

berg := proper_le &
  [ STEM < "berg" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'berg ].

:end :instance.


; <<>>

:begin :instance.

jessica := proper_le &
  [ STEM < "jessica" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'jessica ].

:end :instance.


; <<>>

:begin :instance.

anne := proper_le &
  [ STEM < "anne" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'anne ].

:end :instance.


; <<>>

:begin :instance.

railroad_n1 := intr_noun_word_le &
  [ STEM < "railroad" >,
    SYNSEM.LOCAL.KEYS.KEY _railroad_rel ].

:end :instance.


; <<>>

:begin :instance.

conductor_n1 := intr_noun_word_le &
  [ STEM < "conductor" >,
    SYNSEM.LOCAL.KEYS.KEY _conductor_rel ].

:end :instance.


; <<>>

:begin :instance.

logistics_n1 := plurn_le &
  [ STEM < "logistics" >,
    SYNSEM.LOCAL.KEYS.KEY _logistics_rel ].

:end :instance.


; <<>>

:begin :instance.

meier := proper_le &
  [ STEM < "meier" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'meier ].

:end :instance.


; <<>>

:begin :instance.

than_adj := compar_than_adj_le &
  [ STEM < "than" > ].

:end :instance.


; <<>>
; MULTIKEY < "one" >

:begin :instance.

oh_one := minute_word_mle2 &
  [ STEM < "oh", "one" >,
    SYNSEM.LOCAL [ CAT.POSTHEAD +,
		   KEYS.KEY.MINUTE "01" ] ].

:end :instance.


; <<>>
; MULTIKEY < "two" >

:begin :instance.

oh_two := minute_word_mle2 &
  [ STEM < "oh", "two" >,
    SYNSEM.LOCAL [ CAT.POSTHEAD +,
		   KEYS.KEY.MINUTE "02" ] ].

:end :instance.


; <<>>
; MULTIKEY < "three" >

:begin :instance.

oh_three := minute_word_mle2 &
  [ STEM < "oh", "three" >,
    SYNSEM.LOCAL [ CAT.POSTHEAD +,
		   KEYS.KEY.MINUTE "03" ] ].

:end :instance.


; <<>>
; MULTIKEY < "four" >

:begin :instance.

oh_four := minute_word_mle2 &
  [ STEM < "oh", "four" >,
    SYNSEM.LOCAL [ CAT.POSTHEAD +,
		   KEYS.KEY.MINUTE "04" ] ].

:end :instance.


; <<>>
; MULTIKEY < "five" >

:begin :instance.

oh_five := minute_word_mle2 &
  [ STEM < "oh", "five" >,
    SYNSEM.LOCAL [ CAT.POSTHEAD +,
		   KEYS.KEY.MINUTE "05" ] ].

:end :instance.


; <<>>
; MULTIKEY < "six" >

:begin :instance.

oh_six := minute_word_mle2 &
  [ STEM < "oh", "six" >,
    SYNSEM.LOCAL [ CAT.POSTHEAD +,
		   KEYS.KEY.MINUTE "06" ] ].

:end :instance.


; <<>>
; MULTIKEY < "seven" >

:begin :instance.

oh_seven := minute_word_mle2 &
  [ STEM < "oh", "seven" >,
    SYNSEM.LOCAL [ CAT.POSTHEAD +,
		   KEYS.KEY.MINUTE "07" ] ].

:end :instance.


; <<>>
; MULTIKEY < "eight" >

:begin :instance.

oh_eight := minute_word_mle2 &
  [ STEM < "oh", "eight" >,
    SYNSEM.LOCAL [ CAT.POSTHEAD +,
		   KEYS.KEY.MINUTE "08" ] ].

:end :instance.


; <<>>
; MULTIKEY < "nine" >

:begin :instance.

oh_nine := minute_word_mle2 &
  [ STEM < "oh", "nine" >,
    SYNSEM.LOCAL [ CAT.POSTHEAD +,
		   KEYS.KEY.MINUTE "09" ] ].

:end :instance.


; <<>>
; MULTIKEY < "double" >

:begin :instance.

double_aized_a1 := intrans_adj_mle &
  [ STEM < "double", "sized" >,
    SYNSEM.LOCAL.KEYS.KEY _double_sized_rel ].

:end :instance.

; <<>>
; MULTIKEY < "huh" >

:begin :instance.

uh_huh_root := disc_adv_mle2 &
  [ STEM < "uh", "huh" >,
    SYNSEM.LOCAL.KEYS.KEY excl_rel & [ EXCL 'mhm ] ].

:end :instance.

; <<>>
; MULTIKEY < "huh" >

:begin :instance.

u_huh_root := disc_adv_mle2 &
  [ STEM < "u", "huh" >,
    SYNSEM.LOCAL.KEYS.KEY excl_rel & [ EXCL 'uh_huh ] ].

:end :instance.

; <<>>

:begin :instance.

Amanda := proper_le &
  [ STEM < "amanda" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'amanda ].

:end :instance.


; <<>>

:begin :instance.

Courtney := proper_le &
  [ STEM < "courtney" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'courtney ].

:end :instance.


; <<>>

:begin :instance.

Debbie := proper_le &
  [ STEM < "debbie" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'debbie ].

:end :instance.


; <<>>

:begin :instance.

Locurner := intr_noun_word_le &
  [ STEM < "locurner" >,
    SYNSEM.LOCAL.KEYS.KEY named_rel & [ NAMED 'locurner ] ].

:end :instance.


; <<>>
; MULTIKEY < "locurner" >

:begin :instance.

Locurner_Hof := intr_noun_word_mle1 &
  [ STEM < "locurner", "hof" >,
    SYNSEM.LOCAL.KEYS.KEY named_rel & [ NAMED 'locurner_hof ] ].

:end :instance.


; <<>>

:begin :instance.

Noehre := intr_noun_word_le &
  [ STEM < "noehre" >,
    SYNSEM.LOCAL.KEYS.KEY named_rel & [ NAMED 'noehre ] ].

:end :instance.


; <<>>
; MULTIKEY < "noehre" >

:begin :instance.

noehre_hof := intr_noun_word_mle1 &
  [ STEM < "noehre", "hof" >,
    SYNSEM.LOCAL.KEYS.KEY named_rel & [ NAMED 'noehre_hof ] ].

:end :instance.


; <<>>
; MULTIKEY < "noehre" >

:begin :instance.

noehre_hanover := intr_noun_word_mle1 &
  [ STEM < "noehre", "hanover" >, 
   SYNSEM.LOCAL.KEYS.KEY named_rel & [ NAMED 'noehre_hanover ] ].

:end :instance.


; <<>>

:begin :instance.

schlosshotel := intr_noun_word_le &
  [ STEM < "schlosshotel" >,
    SYNSEM.LOCAL.KEYS.KEY named_rel & [ NAMED 'schlosshotel ] ].

:end :instance.


; <<>>
; MULTIKEY < "schlosshotel" >

:begin :instance.

schlosshotel_hanover := intr_noun_word_mle1 &
  [ STEM < "schlosshotel", "hanover" >, 
   SYNSEM.LOCAL.KEYS.KEY named_rel & [ NAMED 'schlosshotel_hanover ] ].

:end :instance.


; <<>>

:begin :instance.

Sean := proper_le &
  [ STEM < "sean" >,
     SYNSEM.LOCAL.KEYS.KEY.NAMED 'sean ].

:end :instance.


; <<>>

:begin :instance.

Vivian := proper_le &
  [ STEM < "vivian" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'vivian ].

:end :instance.


; <<>>

:begin :instance.

Aubrey := proper_le &
  [ STEM < "aubrey" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'aubrey ].

:end :instance.


; <<>>

:begin :instance.

Carol := proper_le &
  [ STEM < "carol" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'carol ].

:end :instance.


; <<>>

:begin :instance.

Emerson := proper_le &
  [ STEM < "emerson" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'emerson ].

:end :instance.


; <<>>

:begin :instance.

Gavula := proper_le &
  [ STEM < "gavula" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'gavula ].

:end :instance.


; <<>>

:begin :instance.

Georgengarten := intr_noun_word_le &
  [ STEM < "georgengarten" >,
    SYNSEM.LOCAL.KEYS.KEY named_rel & [ NAMED 'georgengarten ] ].

:end :instance.


; <<>>

:begin :instance.

Gilbert := proper_le &
  [ STEM < "gilbert" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'gilbert ].

:end :instance.


; <<>>

:begin :instance.

Gizla := proper_le &
  [ STEM < "gizla" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'gizla ].

:end :instance.


; <<>>

:begin :instance.

Guerma := proper_le &
  [ STEM < "guerma" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'guerma ].

:end :instance.


; <<>>

:begin :instance.

Hillary := proper_le &
  [ STEM < "hillary" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'hillary ].

:end :instance.


; <<>>

:begin :instance.

Jay := proper_le &
  [ STEM < "jay" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'jay ].

:end :instance.


; <<>>

:begin :instance.

Jim := proper_le &
  [ STEM < "jim" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'jim ].

:end :instance.


; <<>>

:begin :instance.

Johnny := proper_le &
  [ STEM < "johnny" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'johnny ].

:end :instance.


; <<>>

:begin :instance.

Johnson := proper_le &
  [ STEM < "johnson" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'johnson ].

:end :instance.


; <<>>

:begin :instance.

Kavorkian := proper_le &
  [ STEM < "kavorkian" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'kavorkian ].

:end :instance.


; <<>>

:begin :instance.

Lola := proper_le &
  [ STEM < "lola" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'lola ].

:end :instance.


; <<>>

:begin :instance.

Manuel := proper_le &
  [ STEM < "manuel" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'manuel ].

:end :instance.


; <<>>

:begin :instance.

Minnesota := proper_le &
  [ STEM < "minnesota" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'minnesota ].

:end :instance.


; <<>>

:begin :instance.

Paula := proper_le &
  [ STEM < "paula" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'paula ].

:end :instance.


; <<>>

:begin :instance.

Pawlowski := proper_le &
  [ STEM < "pawlowski" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'pawlowski ].

:end :instance.


; <<>>

:begin :instance.

Royal := intr_noun_word_le &
  [ STEM < "royal" >,
    SYNSEM.LOCAL.KEYS.KEY named_rel & [ NAMED 'royal ] ].

:end :instance.


; <<>>
; MULTIKEY < "royal" >

:begin :instance.

Royal_Hanover := intr_noun_word_mle1 &
  [ STEM < "royal", "hanover" >,
    SYNSEM.LOCAL.KEYS.KEY named_rel & [ NAMED 'royal_hanover ] ].

:end :instance.


; <<>>

:begin :instance.

Schloss := intr_noun_word_le &
  [ STEM < "schloss" >,
    SYNSEM.LOCAL.KEYS.KEY named_rel & [ NAMED 'schloss ] ].

:end :instance.


; <<>>

:begin :instance.

Susanne := proper_le &
  [ STEM < "susanne" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'susanne ].

:end :instance.


; <<>>

:begin :instance.

Susie := proper_le &
  [ STEM < "susie" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'susie ].

:end :instance.


; <<>>

:begin :instance.

Suzanne := proper_le &
  [ STEM < "suzanne" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'suzanne ].

:end :instance.


; <<>>

:begin :instance.

Tiffany := proper_le &
  [ STEM < "tiffany" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'tiffany ].

:end :instance.


; <<>>

:begin :instance.

Victoria := proper_le &
  [ STEM < "victoria" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'victoria ].

:end :instance.


; <<>>

:begin :instance.

mm_root := disc_adv_le &
  [ STEM < "mm" >,
    SYNSEM.LOCAL.KEYS.KEY excl_rel & [ EXCL 'mm ] ].

:end :instance.


; <<>>

:begin :instance.

shucks_root := disc_adv_le &
  [ STEM < "shucks" >,
    SYNSEM.LOCAL.KEYS.KEY excl_rel & [ EXCL 'shucks ] ].

:end :instance.


; <<>>

:begin :instance.

allot_v1 := mv_to_trans_le &
  [ STEM < "allot" >,
    SYNSEM.LOCAL.KEYS.KEY _allot_rel ].

:end :instance.


; <<>>

:begin :instance.

anxious_a1 := reg_adj_equi_le &
  [ STEM < "anxious" >,
    SYNSEM.LOCAL.KEYS.KEY _anxious_rel ].

:end :instance.


; <<>>

:begin :instance.

army_n1 := intr_noun_word_le &
  [ STEM < "army" >,
    SYNSEM.LOCAL.KEYS.KEY _army_rel ].

:end :instance.


; <<>>

:begin :instance.

bench_n1 := intr_noun_word_le &
  [ STEM < "bench" >,
    SYNSEM.LOCAL.KEYS.KEY _bench_n_rel ].

:end :instance.


; <<>>

:begin :instance.

brain_n1 := intr_noun_word_le &
  [ STEM < "brain" >,
    SYNSEM.LOCAL.KEYS.KEY _brain_n_rel ].

:end :instance.


; <<>>

:begin :instance.

burn_v1 := mv_np_trans_le &
  [ STEM < "burn" >,
    SYNSEM.LOCAL.KEYS.KEY _burn_v_rel ].

:end :instance.


; <<>>

:begin :instance.

cheat_v1 := mv_np_trans_le &
  [ STEM < "cheat" >,
    SYNSEM.LOCAL.KEYS.KEY _cheat_v_rel ].

:end :instance.


; <<>>

:begin :instance.

congratulations_root := disc_adv_le &
  [ STEM < "congratulations" >,
    SYNSEM.LOCAL.KEYS.KEY greet_rel & [ EXCL 'congratulations ] ].

:end :instance.


; <<>>

:begin :instance.

constitute_v1 := mv_np_trans_le &
  [ STEM < "constitute" >,
    SYNSEM.LOCAL.KEYS.KEY _constitute_rel ].

:end :instance.


; <<>>

:begin :instance.

darn_root := disc_adv_le &
  [ STEM < "darn" >,
    SYNSEM.LOCAL.KEYS.KEY greet_rel & [ EXCL 'darn ] ].

:end :instance.


; <<>>
; MULTIKEY < "e" >

:begin :instance.

e_mail_n1 := intr_noun_word_mle1 &
  [ STEM < "e", "mail" >,
    SYNSEM.LOCAL.KEYS.KEY _email_n_rel ].

:end :instance.


; <<>>

:begin :instance.

favorite_n1 := intr_noun_word_le &
  [ STEM < "favorite" >,
    SYNSEM.LOCAL.KEYS.KEY _favorite_n_rel ].

:end :instance.


; <<>>

:begin :instance.

frame_n1 := intr_noun_word_le &
  [ STEM < "frame" >,
    SYNSEM.LOCAL.KEYS.KEY _frame_n_rel ].

:end :instance.


; <<>>

:begin :instance.

freedom_n1 := intr_noun_word_le &
  [ STEM < "freedom" >,
    SYNSEM.LOCAL.KEYS.KEY _freedom_rel ].

:end :instance.


; <<>>

:begin :instance.

functional_a1 := intrans_adj_le &
  [ STEM < "functional" >,
    SYNSEM.LOCAL.KEYS.KEY _functional_rel ].

:end :instance.


; <<>>

:begin :instance.

hanovarian_n1 := intr_noun_word_le &
  [ STEM < "hanovarian" >,
    SYNSEM.LOCAL.KEYS.KEY _hanovarian_n_rel ].

:end :instance.


; <<>>

:begin :instance.

hoot_n1 := intr_noun_word_le &
  [ STEM < "hoot" >,
    SYNSEM.LOCAL.KEYS.KEY _hoot_n_rel ].

:end :instance.


; <<>>

:begin :instance.

lean_v1 := mv_empty_prep*_intrans_le &
  [ STEM < "lean" >,
    SYNSEM.LOCAL.KEYS [ KEY _lean_towards_rel,
			--COMPKEY _towards_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

optimistic_a1 := intrans_adj_le &
  [ STEM < "optimistic" >,
    SYNSEM.LOCAL.KEYS.KEY _optimistic_rel ].

:end :instance.


; <<>>

:begin :instance.

pair_n1 := noun_ppof_word_le &
  [ STEM < "pair" >,
    SYNSEM.LOCAL.KEYS.KEY _pair_n_rel ].

:end :instance.


; <<>>

:begin :instance.

Prinzenhof := intr_noun_word_le &
  [ STEM < "prinzenhof" >,
    SYNSEM.LOCAL.KEYS.KEY named_rel & [ NAMED 'prinzenhof ] ].

:end :instance.


; <<>>

:begin :instance.

regional_a1 := intrans_adj_le &
  [ STEM < "regional" >,
    SYNSEM.LOCAL.KEYS.KEY _regional_rel ].

:end :instance.


; <<>>

:begin :instance.

restful_a1 := intrans_adj_le &
  [ STEM < "restful" >,
    SYNSEM.LOCAL.KEYS.KEY _restful_rel ].

:end :instance.


; <<>>

:begin :instance.

sing_v2 := mv_np*_trans_le &
  [ STEM < "sing" >,
    SYNSEM.LOCAL.KEYS.KEY _sing_rel ].

:end :instance.


; <<>>

:begin :instance.

socialize_v1 := mv_unerg_le &
  [ STEM < "socialize" >,
    SYNSEM.LOCAL.KEYS.KEY _socialize_rel ].

:end :instance.


; <<>>

:begin :instance.

strain_v1 := mv_np_trans_le &
  [ STEM < "strain" >,
    SYNSEM.LOCAL.KEYS.KEY _strain_v_rel ].

:end :instance.


; <<>>

:begin :instance.

sun_n1 := intr_noun_word_le &
  [ STEM < "sun" >,
    SYNSEM.LOCAL.KEYS.KEY _sun_rel ].

:end :instance.


; <<>>

:begin :instance.

tone_down_v1 := mv_prep_particle_np_le &
  [ STEM < "tone" >,
    SYNSEM.LOCAL.KEYS [ KEY _tone_down_rel,
			--COMPKEY _down_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

tour_v1 := mv_np_trans_le &
  [ STEM < "tour" >,
    SYNSEM.LOCAL.KEYS.KEY _tour_v_rel ].

:end :instance.


; <<>>

:begin :instance.

unreschedulable_a1 := intrans_adj_le &
  [ STEM < "unreschedulable" >,
    SYNSEM.LOCAL.KEYS.KEY _unreschedulable_rel ].

:end :instance.


; <<>>

:begin :instance.

zoom_v1 := mv_prep_intrans_le &
  [ STEM < "zoom" >,
    SYNSEM.LOCAL.KEYS [ KEY _zoom_v_rel,
			--COMPKEY dir_rel ] ].

:end :instance.


; <<>>
; MULTIKEY < "$a" >

:begin :instance.

LA_n1 := proper_mle2 &
  [ STEM < "$l", "$a" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'LA ].

:end :instance.


; <<>>
; MULTIKEY < "$s" >

:begin :instance.

US_n2 := intr_noun_word_mle1 &
  [ STEM < "$u", "$s" >,
    SYNSEM.LOCAL.KEYS.KEY named_rel & [ NAMED 'US ] ].

:end :instance.

; <<>>
; MULTIKEY < "$a" >

:begin :instance.

USofA_n1 := intr_noun_word_4mle4 &
  [ STEM < "$u", "$s", "of", "$a" >,
    SYNSEM.LOCAL.KEYS.KEY named_rel & [ NAMED 'USofA ] ].

:end :instance.

; <<>>
; MULTIKEY < "set" >

:begin :instance.

set_up_n1 := massn_mle1 &
  [ STEM < "set", "up" >,
    SYNSEM.LOCAL.KEYS.KEY _set_up_n_rel ].

:end :instance.


; <<>>

:begin :instance.

gone_a1 := intrans_adj_le &
  [ STEM < "gone" >,
    SYNSEM.LOCAL.KEYS.KEY _gone_isect_rel ].

:end :instance.


; <<>>

:begin :instance.

cut_into_v1 := mv_empty_prep_intrans_le &
  [ STEM < "cut" >,
    SYNSEM.LOCAL.KEYS [ KEY _cut_into_rel,
			--COMPKEY _into_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

live_a1 := intrans_adj_le &
  [ STEM < "live" >,
    SYNSEM.LOCAL.KEYS.KEY _live_isect_rel ].

:end :instance.


; <<>>

:begin :instance.

stomach_v1 := mv_np_trans_le &
  [ STEM < "stomach" >,
    SYNSEM.LOCAL.KEYS.KEY _stomach_v_rel ].

:end :instance.


; <<>>

:begin :instance.

like_disc_adv := disc_adv_like_le &
  [ STEM < "like" >,
    SYNSEM.LOCAL.KEYS.KEY excl_rel & [ EXCL 'like ] ].

:end :instance.


; <<>>
; MULTIKEY < "vacation" >

:begin :instance.

in_bed := pp_idiom_mle2 &
  [ STEM < "in", "bed" >,
    SYNSEM.LOCAL.KEYS [ KEY _in_rel,
                        ALTKEY _bed_rel ] ].

:end :instance.


; <<>>

:begin :instance.

do_about_v1 := mv_prep_trans_le &
  [ STEM < "do" >,
    SYNSEM.LOCAL.KEYS [ KEY _do_rel,
			--OCOMPKEY _about_rel ] ].

:end :instance.


; <<>>

:begin :instance.

irritating_a1 := intrans_adj_le &
  [ STEM < "irritating" >,
    SYNSEM.LOCAL.KEYS.KEY _irritating_rel ].

:end :instance.


; <<>>

:begin :instance.

why_root := disc_adv_le &
  [ STEM < "why" >,
    SYNSEM.LOCAL [ CAT.HEAD.MOD < [ LOCAL.CAT.HEAD.INV - ] >,
		   KEYS.KEY excl_rel & [ EXCL 'why ] ] ].

:end :instance.


; <<>>

:begin :instance.

line_up_v1 := mv_prep_particle_np_le &
  [ STEM < "line" >,
    SYNSEM.LOCAL.KEYS [ KEY _line_up_rel,
			--COMPKEY _up_rel ] ].

:end :instance.

; <<>>

:begin :instance.

decide_v2 := mv_cp_fin_inf_non_trans_le &
  [ STEM < "decide" >,
    SYNSEM.LOCAL.KEYS.KEY _decide_rel ].

:end :instance.


; <<>>

:begin :instance.

correct_root := disc_adv_le &
  [ STEM < "correct" >,
    SYNSEM.LOCAL.KEYS.KEY excl_rel & [ EXCL 'correct ] ].

:end :instance.


; <<>>

:begin :instance.

leave_over_v1 := mv_particle_np_le &
  [ STEM < "leave" >,
    SYNSEM.LOCAL.KEYS [ KEY _leave_over_rel,
			--COMPKEY _over_rel_s ] ].

:end :instance.


; <<>>
; MULTIKEY < "$v" >

:begin :instance.

t_v_n1 := intr_noun_word_mle1 &
  [ STEM < "$t", "$v" >,
    SYNSEM.LOCAL.KEYS.KEY _tv_rel ].

:end :instance.


; <<>>

:begin :instance.

Asian_a1 := intrans_adj_le &
  [ STEM < "asian" >,
    SYNSEM.LOCAL.KEYS.KEY _asian_rel ].

:end :instance.


; <<>>

:begin :instance.

Asian_n1 := intr_noun_word_le &
  [ STEM < "asian" >,
    SYNSEM.LOCAL.KEYS.KEY _asian_n_rel ].

:end :instance.


; <<>>

:begin :instance.

boston := proper_le &
  [ STEM < "boston" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'boston ].

:end :instance.


; <<>>
; MULTIKEY < "diners" >

:begin :instance.

Diners_Club_n1 := proper_mle1 &
  [ STEM < "diners", "club" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Diners_Club ].

:end :instance.


; <<>>
; MULTIKEY < "euro" >

:begin :instance.

euro_dollar_n1 := intr_noun_word_mle1 &
  [ STEM < "euro", "dollar" >,
    SYNSEM.LOCAL.KEYS.KEY _euro_dollar_rel ].

:end :instance.


; <<>>

:begin :instance.

Indian_a1 := intrans_adj_le &
  [ STEM < "indian" >,
    SYNSEM.LOCAL.KEYS.KEY _indian_rel ].

:end :instance.


; <<>>

:begin :instance.

Indian_n1 := intr_noun_word_le &
  [ STEM < "indian" >,
    SYNSEM.LOCAL.KEYS.KEY _indian_n_rel ].

:end :instance.


; <<>>

:begin :instance.

Ireland_n1 := proper_le &
  [ STEM < "ireland" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Ireland ].

:end :instance.


; <<>>
; MULTIKEY < "labor" >

:begin :instance.

labor_day := holiday_word_mle1 &
  [ STEM < "labor", "day" >,
    SYNSEM.LOCAL.KEYS.KEY.DAY 'labor_day ].

:end :instance.


; <<>>
; MULTIKEY < "san" >

:begin :instance.

San_Diego_n1 := proper_mle1 &
  [ STEM < "san", "diego" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'San_Diego ].

:end :instance.

; <<>>

:begin :instance.

Volkswagen_n1 := proper_le &
  [ STEM < "volkswagen" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Volkswagen ].

:end :instance.

; <<>>

:begin :instance.

agreeably_adv1 := int_vp_adv_post_word_le &
  [ STEM < "agreeably" >,
    SYNSEM.LOCAL.KEYS.KEY _agreeably_rel ].

:end :instance.


; <<>>

:begin :instance.

amaze_v1 := mv_np_trans_le &
  [ STEM < "amaze" >,
    SYNSEM.LOCAL.KEYS.KEY _amaze_rel ].

:end :instance.


; <<>>

:begin :instance.

anxiously_adv1 := int_vp_adv_post_word_le &
  [ STEM < "anxiously" >,
    SYNSEM.LOCAL.KEYS.KEY _anxiously_rel ].

:end :instance.


; <<>>

:begin :instance.

apartment_n1 := intr_noun_word_le &
  [ STEM < "apartment" >,
    SYNSEM.LOCAL.KEYS.KEY _apartment_rel ].

:end :instance.


; <<>>

:begin :instance.

architect_n1 := intr_noun_word_le &
  [ STEM < "architect" >,
    SYNSEM.LOCAL.KEYS.KEY _architect_rel ].

:end :instance.


; <<>>

:begin :instance.

audit_v1 := mv_np_trans_le &
  [ STEM < "audit" >,
    SYNSEM.LOCAL.KEYS.KEY _audit_rel ].

:end :instance.


; <<>>

:begin :instance.

avantgarde_adj := intrans_adj_le &
  [ STEM < "avantgarde" >,
    SYNSEM.LOCAL.KEYS.KEY _avantgarde_adj_rel ].

:end :instance.

; <<>>

:begin :instance.

babe_n1 := intr_noun_word_le &
  [ STEM < "babe" >,
    SYNSEM.LOCAL.KEYS.KEY _babe_rel ].

:end :instance.


; <<>>

:begin :instance.

background_n1 := intr_noun_word_le &
  [ STEM < "background" >,
    SYNSEM.LOCAL.KEYS.KEY _background_rel ].

:end :instance.


; <<>>

:begin :instance.

bake_v1 := mv_np_trans_le &
  [ STEM < "bake" >,
    SYNSEM.LOCAL.KEYS.KEY _bake_v_rel ].

:end :instance.


; <<>>

:begin :instance.

baseball_n1 := massn_le &
  [ STEM < "baseball" >,
    SYNSEM.LOCAL.KEYS.KEY _baseball_rel ].

:end :instance.

; <<>>

:begin :instance.

bikini_n1 := intr_noun_word_le &
  [ STEM < "bikini" >,
    SYNSEM.LOCAL.KEYS.KEY _bikini_rel ].

:end :instance.


; <<>>

:begin :instance.

blood_n := massn_le &
  [ STEM < "blood" >,
    SYNSEM.LOCAL.KEYS.KEY _blood_rel ].

:end :instance.

; <<>>

:begin :instance.

body_n1 := intr_noun_word_le &
  [ STEM < "body" >,
    SYNSEM.LOCAL.KEYS.KEY _body_rel ].

:end :instance.


; <<>>

:begin :instance.

bone_n1 := intr_noun_word_le &
  [ STEM < "bone" >,
    SYNSEM.LOCAL.KEYS.KEY _bone_rel ].

:end :instance.


; <<>>

:begin :instance.

brand_n1 := intr_noun_word_le &
  [ STEM < "brand" >,
    SYNSEM.LOCAL.KEYS.KEY _brand_rel ].

:end :instance.


; <<>>

:begin :instance.

buff_adj := intrans_adj_le &
  [ STEM < "buff" >,
    SYNSEM.LOCAL.KEYS.KEY _buff_isect_rel ].

:end :instance.

; <<>>

:begin :instance.

bulky_adj := intrans_adj_le &
  [ STEM < "bulky" >,
    SYNSEM.LOCAL.KEYS.KEY _bulky_rel ].

:end :instance.

; <<>>

:begin :instance.

bulkier := comp_adj_le &
  [ STEM < "bulkier" >,
    SYNSEM.LOCAL.KEYS.KEY _bulky_rel ].

:end :instance.


; <<>>

:begin :instance.

bullet_n1 := intr_noun_word_le &
  [ STEM < "bullet" >,
    SYNSEM.LOCAL.KEYS.KEY _bullet_rel ].

:end :instance.


; <<>>

:begin :instance.

bureau_n1 := intr_noun_word_le &
  [ STEM < "bureau" >,
    SYNSEM.LOCAL.KEYS.KEY _bureau_rel ].

:end :instance.


; <<>>

:begin :instance.

butt_n1 := intr_noun_word_le &
  [ STEM < "butt" >,
    SYNSEM.LOCAL.KEYS.KEY _butt_n_rel ].

:end :instance.


; <<>>

:begin :instance.

chiropractor_n1 := intr_noun_word_le &
  [ STEM < "chiropractor" >,
    SYNSEM.LOCAL.KEYS.KEY _chiropractor_rel ].

:end :instance.


; <<>>

:begin :instance.

clothes_n1 := plurn_le &
  [ STEM < "clothes" >,
    SYNSEM.LOCAL.KEYS.KEY _clothes_rel ].

:end :instance.

; <<>>

:begin :instance.

college_n1 := intr_noun_word_le &
  [ STEM < "college" >,
    SYNSEM.LOCAL.KEYS.KEY _college_rel ].

:end :instance.


; <<>>

:begin :instance.

cookie_n1 := intr_noun_word_le &
  [ STEM < "cookie" >,
    SYNSEM.LOCAL.KEYS.KEY _cookie_rel ].

:end :instance.


; <<>>

:begin :instance.

couch_n1 := intr_noun_word_le &
  [ STEM < "couch" >,
    SYNSEM.LOCAL.KEYS.KEY _couch_rel ].

:end :instance.


; <<>>

:begin :instance.

crappy_adj := intrans_adj_le &
  [ STEM < "crappy" >,
    SYNSEM.LOCAL.KEYS.KEY _crappy_rel ].

:end :instance.


; <<>>

:begin :instance.

cuisine_n1 := intr_noun_word_le &
  [ STEM < "cuisine" >,
    SYNSEM.LOCAL.KEYS.KEY _cuisine_rel ].

:end :instance.


; <<>>

:begin :instance.

cute_adj := intrans_adj_le &
  [ STEM < "cute" >,
    SYNSEM.LOCAL.KEYS.KEY _cute_rel ].

:end :instance.


; <<>>

:begin :instance.

dad_n1 := intr_noun_word_le &
  [ STEM < "dad" >,
    SYNSEM.LOCAL.KEYS.KEY _dad_rel ].

:end :instance.


; <<>>

:begin :instance.

database_n1 := intr_noun_word_le &
  [ STEM < "database" >,
    SYNSEM.LOCAL.KEYS.KEY _database_rel ].

:end :instance.


; <<>>

:begin :instance.

define_v1 := mv_np_trans_le &
  [ STEM < "define" >,
    SYNSEM.LOCAL.KEYS.KEY _define_rel ].

:end :instance.


; <<>>

:begin :instance.

delightful_adj := intrans_adj_le &
  [ STEM < "delightful" >,
    SYNSEM.LOCAL.KEYS.KEY _delightful_rel ].

:end :instance.


; <<>>

:begin :instance.

dictionary_n1 := intr_noun_word_le &
  [ STEM < "dictionary" >,
    SYNSEM.LOCAL.KEYS.KEY _dictionary_rel ].

:end :instance.


; <<>>

:begin :instance.

discount_v1 := mv_np_trans_le &
  [ STEM < "discount" >,
    SYNSEM.LOCAL.KEYS.KEY _discount_v_rel ].

:end :instance.


; <<>>

:begin :instance.

district_n1 := intr_noun_word_le &
  [ STEM < "district" >,
    SYNSEM.LOCAL.KEYS.KEY _district_rel ].

:end :instance.


; <<>>

:begin :instance.

dribs_n1 := plurn_le &
  [ STEM < "dribs" >,
    SYNSEM.LOCAL.KEYS.KEY _dribs_rel ].

:end :instance.


; <<>>

:begin :instance.

drabs_n1 := plurn_le &
  [ STEM < "drabs" >,
    SYNSEM.LOCAL.KEYS.KEY _drabs_rel ].

:end :instance.


; <<>>

:begin :instance.

economical_adj := intrans_adj_le &
  [ STEM < "economical" >,
    SYNSEM.LOCAL.KEYS.KEY _economical_rel ].

:end :instance.


; <<>>

:begin :instance.

economically_adv1 := int_vp_adv_post_word_le &
  [ STEM < "economically" >,
    SYNSEM.LOCAL.KEYS.KEY _economically_rel ].

:end :instance.


; <<>>

:begin :instance.

noonish := approx_hour_word_le &
  [ STEM < "noonish" >,
    SYNSEM.LOCAL.KEYS.KEY.HOUR "12" ].

:end :instance.


; <<>>

:begin :instance.

twelvish := approx_hour_word_le &
  [ STEM < "twelvish" >,
    SYNSEM.LOCAL.KEYS.KEY.HOUR "12" ].

:end :instance.


; <<>>

:begin :instance.

elevenish := approx_hour_word_le &
  [ STEM < "elevenish" >,
    SYNSEM.LOCAL.KEYS.KEY.HOUR "11" ].

:end :instance.


; <<>>

:begin :instance.

tenish := approx_hour_word_le &
  [ STEM < "tenish" >,
    SYNSEM.LOCAL.KEYS.KEY.HOUR "10" ].

:end :instance.


; <<>>

:begin :instance.

nineish := approx_hour_word_le &
  [ STEM < "nineish" >,
    SYNSEM.LOCAL.KEYS.KEY.HOUR "9" ].

:end :instance.


; <<>>

:begin :instance.

eightish_a1 := approx_hour_word_le &
  [ STEM < "eightish" >,
    SYNSEM.LOCAL.KEYS.KEY.HOUR "8" ].

:end :instance.

; <<>>

:begin :instance.

sevenish_a1 := approx_hour_word_le &
  [ STEM < "sevenish" >,
    SYNSEM.LOCAL.KEYS.KEY.HOUR "7" ].

:end :instance.

; <<>>

:begin :instance.

sixish := approx_hour_word_le &
  [ STEM < "sixish" >,
    SYNSEM.LOCAL.KEYS.KEY.HOUR "6" ].

:end :instance.

; <<>>

:begin :instance.

fiveish := approx_hour_word_le &
  [ STEM < "fiveish" >,
    SYNSEM.LOCAL.KEYS.KEY.HOUR "5" ].

:end :instance.

; <<>>

:begin :instance.

fourish := approx_hour_word_le &
  [ STEM < "fourish" >,
    SYNSEM.LOCAL.KEYS.KEY.HOUR "4" ].

:end :instance.

; <<>>

:begin :instance.

threeish := approx_hour_word_le &
  [ STEM < "threeish" >,
    SYNSEM.LOCAL.KEYS.KEY.HOUR "3" ].

:end :instance.

; <<>>

:begin :instance.

twoish := approx_hour_word_le &
  [ STEM < "twoish" >,
    SYNSEM.LOCAL.KEYS.KEY.HOUR "2" ].

:end :instance.

; <<>>

:begin :instance.

oneish := approx_hour_word_le &
  [ STEM < "oneish" >,
    SYNSEM.LOCAL.KEYS.KEY.HOUR "1" ].

:end :instance.


; <<>>

:begin :instance.

approx_thirty_minute := approx_minute_word_le &
  [ STEM < "thirtyish" >,
    SYNSEM.LOCAL [ CAT.POSTHEAD +,
		   KEYS.KEY.MINUTE "30" ] ].

:end :instance.


; <<>>

:begin :instance.

enjoyably_adv1 := int_vp_adv_post_word_le &
  [ STEM < "enjoyably" >,
    SYNSEM.LOCAL.KEYS.KEY _enjoyably_rel ].

:end :instance.


; <<>>

:begin :instance.

forgive_v1 := mv_np_trans_le &
  [ STEM < "forgive" >,
    SYNSEM.LOCAL.KEYS.KEY _forgive_rel ].

:end :instance.


; <<>>

:begin :instance.

frill_n1 := intr_noun_word_le &
  [ STEM < "frill" >,
    SYNSEM.LOCAL.KEYS.KEY _frill_rel ].

:end :instance.


; <<>>

:begin :instance.

frothy_adj := intrans_adj_le &
  [ STEM < "frothy" >,
    SYNSEM.LOCAL.KEYS.KEY _frothy_rel ].

:end :instance.


; <<>>

:begin :instance.

functionally_adv1 := int_vp_adv_post_word_le &
  [ STEM < "functionally" >,
    SYNSEM.LOCAL.KEYS.KEY _functionally_rel ].

:end :instance.


; <<>>

:begin :instance.

genital_n1 := intr_noun_word_le &
  [ STEM < "genital" >,
    SYNSEM.LOCAL.KEYS.KEY _genital_rel ].

:end :instance.


; <<>>

:begin :instance.

grind_n1 := intr_noun_word_le &
  [ STEM < "grind" >,
    SYNSEM.LOCAL.KEYS.KEY _grind_n_rel ].

:end :instance.


; <<>>

:begin :instance.

grind_v1 := mv_np_trans_le &
  [ STEM < "grind" >,
    SYNSEM.LOCAL.KEYS.KEY _grind_v_rel ].

:end :instance.


; <<>>

:begin :instance.

haircut_n1 := intr_noun_word_le &
  [ STEM < "haircut" >,
    SYNSEM.LOCAL.KEYS.KEY _haircut_rel ].

:end :instance.


; <<>>

:begin :instance.

halter_n1 := intr_noun_word_le &
  [ STEM < "halter" >,
    SYNSEM.LOCAL.KEYS.KEY _halter_rel ].

:end :instance.


; <<>>

:begin :instance.

hay_n := massn_le &
  [ STEM < "hay" >,
    SYNSEM.LOCAL.KEYS.KEY _hay_rel ].

:end :instance.

; <<>>

:begin :instance.

herpes_n1 := plurn_le &
  [ STEM < "herpes" >,
    SYNSEM.LOCAL.KEYS.KEY _herpes_rel ].

:end :instance.


; <<>>

:begin :instance.

hospital_n1 := intr_noun_word_le &
  [ STEM < "hospital" >,
    SYNSEM.LOCAL.KEYS.KEY _hospital_rel ].

:end :instance.


; <<>>

:begin :instance.

impressed_a1 := trans_adj_le &
  [ STEM < "impressed" >,
    SYNSEM.LOCAL.KEYS [ KEY _impressed_rel,
			--COMPKEY _with_rel_s ] ].


:end :instance.


; <<>>
; MULTIKEY < "in" >

:begin :instance.

in_law_n1 := intr_noun_word_mle1 &
  [ STEM < "in", "law" >,
    SYNSEM.LOCAL.KEYS.KEY _in_law_rel ].

:end :instance.


; <<>>

:begin :instance.

jeez_root := disc_adv_le &
  [ STEM < "jeez" >,
    SYNSEM.LOCAL.KEYS.KEY greet_rel & [ EXCL 'jeez ] ].

:end :instance.


; <<>>

:begin :instance.

joke_v2 := mv_cp_prop*_non_trans_le &
  [ STEM < "joke" >,
    SYNSEM.LOCAL.KEYS.KEY _joke_v_rel ].

:end :instance.


; <<>>

:begin :instance.

junky_adj := intrans_adj_le &
  [ STEM < "junky" >,
    SYNSEM.LOCAL.KEYS.KEY _junky_rel ].

:end :instance.


; <<>>
; MULTIKEY < "king" >

:begin :instance.

king_size_a1 := intrans_adj_mle &
  [ STEM < "king", "size" >,
    SYNSEM.LOCAL.KEYS.KEY _king_size_rel ].

:end :instance.


; <<>>

:begin :instance.

laptop_n1 := intr_noun_word_le &
  [ STEM < "laptop" >,
    SYNSEM.LOCAL.KEYS.KEY _laptop_rel ].

:end :instance.


; <<>>

:begin :instance.

limousine_n1 := intr_noun_word_le &
  [ STEM < "limousine" >,
    SYNSEM.LOCAL.KEYS.KEY _limousine_rel ].

:end :instance.

; <<>>

:begin :instance.

listing_n1 := intr_noun_word_le &
  [ STEM < "listing" >,
    SYNSEM.LOCAL.KEYS.KEY _listing_rel ].

:end :instance.

; <<>>

:begin :instance.

mental_adj := intrans_adj_le &
  [ STEM < "mental" >,
    SYNSEM.LOCAL.KEYS.KEY _mental_rel ].

:end :instance.


; <<>>

:begin :instance.

mentally_adv1 := int_vp_adv_post_word_le &
  [ STEM < "mentally" >,
    SYNSEM.LOCAL.KEYS.KEY _mentally_rel ].

:end :instance.


; <<>>
; MULTIKEY < "mid" >

:begin :instance.

mid_range_a1 := intrans_adj_mle &
  [ STEM < "mid", "range" >,
    SYNSEM.LOCAL.KEYS.KEY _mid_range_rel ].

:end :instance.


; <<>>

:begin :instance.

neck_n1 := intr_noun_word_le &
  [ STEM < "neck" >,
    SYNSEM.LOCAL.KEYS.KEY _neck_rel ].

:end :instance.

; <<>>

:begin :instance.

nightcap_n1 := intr_noun_word_le &
  [ STEM < "nightcap" >,
    SYNSEM.LOCAL.KEYS.KEY _nightcap_rel ].

:end :instance.

; <<>>

:begin :instance.

nonstop_adj := intrans_adj_le &
  [ STEM < "nonstop" >,
    SYNSEM.LOCAL.KEYS.KEY _nonstop_rel ].

:end :instance.


; <<>>

:begin :instance.

notebook_n1 := intr_noun_word_le &
  [ STEM < "notebook" >,
    SYNSEM.LOCAL.KEYS.KEY _notebook_rel ].

:end :instance.

; <<>>

:begin :instance.

optimistically_a1 := vp_adv_word_le &
  [ STEM < "optimistically" >,
    SYNSEM.LOCAL.KEYS.KEY _optimistically_rel ].

:end :instance.

; <<>>

:begin :instance.

outlet_n1 := intr_noun_word_le &
  [ STEM < "outlet" >,
    SYNSEM.LOCAL.KEYS.KEY _outlet_n_rel ].

:end :instance.

; <<>>

:begin :instance.

partake_of_v1 := mv_empty_prep_intrans_le &
  [ STEM < "partake" >,
    SYNSEM.LOCAL.KEYS [ KEY _partake_of_rel,
			--COMPKEY _of_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

picnic_n1 := intr_noun_word_le &
  [ STEM < "picnic" >,
    SYNSEM.LOCAL.KEYS.KEY _picnic_n_rel ].

:end :instance.

; <<>>

:begin :instance.

planner_n1 := intr_noun_word_le &
  [ STEM < "planner" >,
    SYNSEM.LOCAL.KEYS.KEY _planner_rel ].

:end :instance.

; <<>>

:begin :instance.

plant_n1 := intr_noun_word_le &
  [ STEM < "plant" >,
    SYNSEM.LOCAL.KEYS.KEY _plant_n_rel ].

:end :instance.

; <<>>

:begin :instance.

pooch_n1 := intr_noun_word_le &
  [ STEM < "pooch" >,
    SYNSEM.LOCAL.KEYS.KEY _pooch_rel ].

:end :instance.

; <<>>

:begin :instance.

prelim_n1 := intr_noun_word_le &
  [ STEM < "prelim" >,
    SYNSEM.LOCAL.KEYS.KEY _prelim_rel ].

:end :instance.

; <<>>

:begin :instance.

pretend_v1 := mv_cp_non_trans_le &
  [ STEM < "pretend" >,
    SYNSEM.LOCAL.KEYS.KEY _pretend_rel ].

:end :instance.


; <<>>

:begin :instance.

pricey_adj := intrans_adj_le &
  [ STEM < "pricey" >,
    SYNSEM.LOCAL.KEYS.KEY _pricey_rel ].

:end :instance.


; <<>>

:begin :instance.

procrastinator_n1 := intr_noun_word_le &
  [ STEM < "procrastinator" >,
    SYNSEM.LOCAL.KEYS.KEY _procrastinator_rel ].

:end :instance.

; <<>>

:begin :instance.

quarterly_adv1 := int_vp_adv_post_word_le &
  [ STEM < "quarterly" >,
    SYNSEM.LOCAL.KEYS.KEY __quarterly_adv_rel ].

:end :instance.


; <<>>

:begin :instance.

quarterly_a1 := intrans_adj_le &
  [ STEM < "quarterly" >,
    SYNSEM.LOCAL.KEYS.KEY _quarterly_rel ].

:end :instance.


; <<>>

:begin :instance.

questionnaire_n1 := intr_noun_word_le &
  [ STEM < "questionnaire" >,
    SYNSEM.LOCAL.KEYS.KEY _questionnaire_rel ].

:end :instance.

; <<>>

:begin :instance.

raunchy_a1 := intrans_adj_le &
  [ STEM < "raunchy" >,
    SYNSEM.LOCAL.KEYS.KEY _raunchy_rel ].

:end :instance.


; <<>>

:begin :instance.

readjust_v13 := mv_np*_trans_le &
  [ STEM < "readjust" >,
    SYNSEM.LOCAL.KEYS.KEY _readjust_rel ].

:end :instance.

; <<>>

:begin :instance.

readjust_to_v1 := mv_to_trans_le &
  [ STEM < "readjust" >,
    SYNSEM.LOCAL.KEYS.KEY _readjust_to_rel ].

:end :instance.


; <<>>

:begin :instance.

recreational_a1 := intrans_adj_le &
  [ STEM < "recreational" >,
    SYNSEM.LOCAL.KEYS.KEY _recreational_rel ].

:end :instance.


; <<>>

:begin :instance.

regionally_adv1 := int_vp_adv_post_word_le &
  [ STEM < "regionally" >,
    SYNSEM.LOCAL.KEYS.KEY _regionally_rel ].

:end :instance.


; <<>>

:begin :instance.

restfully_adv1 := int_vp_adv_post_word_le &
  [ STEM < "restfully" >,
    SYNSEM.LOCAL.KEYS.KEY _restfully_rel ].

:end :instance.


; <<>>

:begin :instance.

scar_n1 := intr_noun_word_le &
  [ STEM < "scar" >,
    SYNSEM.LOCAL.KEYS.KEY _scar_n_rel ].

:end :instance.

; <<>>

:begin :instance.

shepherd_n1 := intr_noun_word_le &
  [ STEM < "shepherd" >,
    SYNSEM.LOCAL.KEYS.KEY _shepherd_rel ].

:end :instance.

; <<>>

:begin :instance.

shirt_n1 := intr_noun_word_le &
  [ STEM < "shirt" >,
    SYNSEM.LOCAL.KEYS.KEY _shirt_rel ].

:end :instance.

; <<>>

:begin :instance.

significant_a1 := intrans_adj_le &
  [ STEM < "significant" >,
    SYNSEM.LOCAL.KEYS.KEY _significant_rel ].

:end :instance.


; <<>>

:begin :instance.

significantly_adv1 := int_vp_adv_post_word_le &
  [ STEM < "significantly" >,
    SYNSEM.LOCAL.KEYS.KEY _significantly_rel ].

:end :instance.


; <<>>

:begin :instance.

sore_a1 := intrans_adj_le &
  [ STEM < "sore" >,
    SYNSEM.LOCAL.KEYS.KEY _sore_rel ].

:end :instance.


; <<>>

:begin :instance.

split_v1 := mv_np_trans_le &
  [ STEM < "split" >,
    SYNSEM.LOCAL.KEYS.KEY _split_v_rel ].

:end :instance.

; <<>>

:begin :instance.

subtitle_n1 := intr_noun_word_le &
  [ STEM < "subtitle" >,
    SYNSEM.LOCAL.KEYS.KEY _subtitle_n_rel ].

:end :instance.

; <<>>

:begin :instance.

subtitle_v1 := mv_np_trans_le &
  [ STEM < "subtitle" >,
    SYNSEM.LOCAL.KEYS.KEY _subtitle_v_rel ].

:end :instance.

; <<>>

:begin :instance.

surgery_n := massn_le &
  [ STEM < "surgery" >,
    SYNSEM.LOCAL.KEYS.KEY _surgery_rel ].

:end :instance.

; <<>>

:begin :instance.

swimmer_n1 := intr_noun_word_le &
  [ STEM < "swimmer" >,
    SYNSEM.LOCAL.KEYS.KEY _swimmer_rel ].

:end :instance.

; <<>>

:begin :instance.

tack_n1 := intr_noun_word_le &
  [ STEM < "tack" >,
    SYNSEM.LOCAL.KEYS.KEY _tack_n_rel ].

:end :instance.

; <<>>

:begin :instance.

tan_n1 := intr_noun_word_le &
  [ STEM < "tan" >,
    SYNSEM.LOCAL.KEYS.KEY _tan_n_rel ].

:end :instance.

; <<>>

:begin :instance.

tooth_n1 := intr_noun_word_le &
  [ STEM < "tooth" >,
    SYNSEM.LOCAL.KEYS.KEY _tooth_rel ].

:end :instance.


; <<>>

:begin :instance.

thong_n1 := intr_noun_word_le &
  [ STEM < "thong" >,
    SYNSEM.LOCAL.KEYS.KEY _thong_rel ].

:end :instance.


; <<>>

:begin :instance.

tighter := comp_adj_le &
  [ STEM < "tighter" >,
    SYNSEM.LOCAL.KEYS.KEY _tight_rel ].

:end :instance.


; <<>>

:begin :instance.

tightest := superl_adj_le &
  [ STEM < "tightest" >,
    SYNSEM.LOCAL.KEYS.KEY _tight_rel ].

:end :instance.


; <<>>

:begin :instance.

tissue_n1 := intr_noun_word_le &
  [ STEM < "tissue" >,
    SYNSEM.LOCAL.KEYS.KEY _tissue_rel ].

:end :instance.


; <<>>

:begin :instance.

toot_n1 := intr_noun_word_le &
  [ STEM < "toot" >,
    SYNSEM.LOCAL.KEYS.KEY _toot_n_rel ].

:end :instance.


; <<>>

:begin :instance.

tournament_n1 := intr_noun_word_le &
  [ STEM < "tournament" >,
    SYNSEM.LOCAL.KEYS.KEY _tournament_rel ].

:end :instance.


; <<>>

:begin :instance.

toy_n1 := intr_noun_word_le &
  [ STEM < "toy" >,
    SYNSEM.LOCAL.KEYS.KEY _toy_n_rel ].

:end :instance.


; <<>>

:begin :instance.

treatment_n1 := intr_noun_word_le &
  [ STEM < "treatment" >,
    SYNSEM.LOCAL.KEYS.KEY _treatment_rel ].

:end :instance.


; <<>>

:begin :instance.

unshaven_a1 := intrans_adj_le &
  [ STEM < "unshaven" >,
    SYNSEM.LOCAL.KEYS.KEY _unshaven_rel ].

:end :instance.


; <<>>

:begin :instance.

unusually_deg := degree_spec_le &
  [ STEM < "unusually" >,
    SYNSEM.LOCAL.KEYS.KEY _unusually_deg_rel ].

:end :instance.


; <<>>

:begin :instance.

voucher_n1 := intr_noun_word_le &
  [ STEM < "voucher" >,
    SYNSEM.LOCAL.KEYS.KEY _voucher_rel ].

:end :instance.


; <<>>

:begin :instance.

war_n := massn_le &
  [ STEM < "war" >,
    SYNSEM.LOCAL.KEYS.KEY _war_n_rel ].

:end :instance.

; <<>>

:begin :instance.

whip_v1 := mv_np_trans_le &
  [ STEM < "whip" >,
    SYNSEM.LOCAL.KEYS.KEY _whip_v_rel ].

:end :instance.

; <<>>

:begin :instance.

whoa_root := disc_adv_le &
  [ STEM < "whoa" >,
    SYNSEM.LOCAL.KEYS.KEY excl_rel & [ EXCL 'whoa ] ].

:end :instance.


; <<>>

:begin :instance.

wipe_v1 := mv_np_trans_le &
  [ STEM < "wipe" >,
    SYNSEM.LOCAL.KEYS.KEY _wipe_v_rel ].

:end :instance.

; <<>>

:begin :instance.

perspective_n1 := intr_noun_word_le &
  [ STEM < "perspective" >,
    SYNSEM.LOCAL.KEYS.KEY _perspective_rel ].

:end :instance.


; <<>>
; MULTIKEY < "father" >

:begin :instance.

fathers_day := holiday_word_3mle1 &
  [ STEM < "father", "s", "day" >,
    SYNSEM.LOCAL.KEYS.KEY.DAY 'fathers_day ].

:end :instance.


; <<>>

:begin :instance.

Jal_n1 := proper_le &
  [ STEM < "jal" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Jal ].

:end :instance.


; <<>>

:begin :instance.

Kansai_n1 := proper_le &
  [ STEM < "kansai" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'Kansai ].

:end :instance.


; <<>>

:begin :instance.

air_v1 := mv_np_trans_le &
  [ STEM < "air" >,
    SYNSEM.LOCAL.KEYS.KEY _air_v_rel ].

:end :instance.


; <<>>

:begin :instance.

alcohol_n1 := intr_noun_word_le &
  [ STEM < "alcohol" >,
    SYNSEM.LOCAL.KEYS.KEY _alcohol_rel ].

:end :instance.


; <<>>
; MULTIKEY < "way" >

:begin :instance.

all_the_way := adv_word_3mle3 &
  [ STEM < "all", "the", "way" >,
    SYNSEM.LOCAL.KEYS.KEY _all_the_way_scop_rel ].

:end :instance.


; <<>>

:begin :instance.

annoyed_a1 := intrans_adj_le &
  [ STEM < "annoyed" >,
    SYNSEM.LOCAL.KEYS.KEY _annoyed_rel ].

:end :instance.


; <<>>

:begin :instance.

arm_n1 := intr_noun_word_le &
  [ STEM < "arm" >,
    SYNSEM.LOCAL.KEYS.KEY _arm_rel ].

:end :instance.


; <<>>

:begin :instance.

ashamed_a1 := intrans_adj_le &
  [ STEM < "ashamed" >,
    SYNSEM.LOCAL.KEYS.KEY _ashamed_rel ].

:end :instance.


; <<>>

:begin :instance.

attract_v1 := mv_np_trans_le &
  [ STEM < "attract" >,
    SYNSEM.LOCAL.KEYS.KEY _attract_rel ].

:end :instance.


; <<>>

:begin :instance.

auction_v1 := mv_np_trans_le &
  [ STEM < "auction" >,
    SYNSEM.LOCAL.KEYS.KEY _auction_v_rel ].

:end :instance.


; <<>>

:begin :instance.

bash_v1 := mv_np_trans_le &
  [ STEM < "bash" >,
    SYNSEM.LOCAL.KEYS.KEY _bash_rel ].

:end :instance.


; <<>>

:begin :instance.

bearable_a1 := intrans_adj_le &
  [ STEM < "bearable" >,
    SYNSEM.LOCAL.KEYS.KEY _bearable_rel ].

:end :instance.


; <<>>

:begin :instance.

belch_v1 := mv_unerg_le &
  [ STEM < "belch" >,
    SYNSEM.LOCAL.KEYS.KEY _belch_rel ].

:end :instance.


; <<>>

:begin :instance.

bloom_v1 := mv_unerg_le &
  [ STEM < "bloom" >,
    SYNSEM.LOCAL.KEYS.KEY _bloom_rel ].

:end :instance.


; <<>>

:begin :instance.

blow_up_v1 := mv_particle_np_le &
  [ STEM < "blow" >,
    SYNSEM.LOCAL.KEYS [ KEY _blow_up_rel,
			--COMPKEY _up_rel ] ].

:end :instance.


; <<>>

:begin :instance.

bridge_n1 := intr_noun_word_le &
  [ STEM < "bridge" >,
    SYNSEM.LOCAL.KEYS.KEY _bridge_rel ].

:end :instance.

; <<>>

:begin :instance.

bridge_v1 := mv_np_trans_le &
  [ STEM < "bridge" >,
    SYNSEM.LOCAL.KEYS.KEY _bridge_v_rel ].

:end :instance.


; <<>>

:begin :instance.

briefing_n1 := intr_noun_word_le &
  [ STEM < "briefing" >,
    SYNSEM.LOCAL.KEYS.KEY _briefing_rel ].

:end :instance.

; <<>>

:begin :instance.

campsite_n1 := intr_noun_word_le &
  [ STEM < "campsite" >,
    SYNSEM.LOCAL.KEYS.KEY _campsite_rel ].

:end :instance.

; <<>>

:begin :instance.

chaotic_a1 := intrans_adj_le &
  [ STEM < "chaotic" >,
    SYNSEM.LOCAL.KEYS.KEY _chaotic_rel ].

:end :instance.


; <<>>

:begin :instance.

chat_v1 := mv_empty_prep_intrans_le &
  [ STEM < "chat" >,
    SYNSEM.LOCAL.KEYS [ KEY _chat_about_rel,
			--COMPKEY _about_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

circumscribe_v13 := mv_np_trans_le &
  [ STEM < "circumscribe" >,
    SYNSEM.LOCAL.KEYS.KEY _circumscribe_rel ].

:end :instance.

; <<>>

:begin :instance.

cocktail_n1 := intr_noun_word_le &
  [ STEM < "cocktail" >,
    SYNSEM.LOCAL.KEYS.KEY _cocktail_rel ].

:end :instance.


; <<>>

:begin :instance.

commercial_a1 := intrans_adj_le &
  [ STEM < "commercial" >,
    SYNSEM.LOCAL.KEYS.KEY _commercial_rel ].

:end :instance.


; <<>>

:begin :instance.

compensate_v13 := mv_np_trans_le &
  [ STEM < "compensate" >,
    SYNSEM.LOCAL.KEYS.KEY _compensate_rel ].

:end :instance.

; <<>>

:begin :instance.

confirmed_a1 := intrans_adj_le &
  [ STEM < "confirmed" >,
    SYNSEM.LOCAL.KEYS.KEY _confirmed_rel ].

:end :instance.


; <<>>

:begin :instance.

crack_up_v2 := mv_particle_le &
  [ STEM < "crack" >,
    SYNSEM.LOCAL.KEYS [ KEY _crack_up_rel,
			--COMPKEY _up_rel ] ].

:end :instance.


; <<>>

:begin :instance.

crafty_a1 := intrans_adj_le &
  [ STEM < "crafty" >,
    SYNSEM.LOCAL.KEYS.KEY _crafty_rel ].

:end :instance.


; <<>>

:begin :instance.

creeps_n1 := plurn_le &
  [ STEM < "creeps" >,
    SYNSEM.LOCAL.KEYS.KEY _creeps_rel ].

:end :instance.


; <<>>

:begin :instance.

criterion_n1 := intr_noun_word_le &
  [ STEM < "criterion" >,
    SYNSEM.LOCAL.KEYS.KEY _criterion_rel ].

:end :instance.


; <<>>

:begin :instance.

dangerous_a1 := intrans_adj_le &
  [ STEM < "dangerous" >,
    SYNSEM.LOCAL.KEYS.KEY _dangerous_rel ].

:end :instance.


; <<>>

:begin :instance.

decorate_v1 := mv_np*_trans_le &
  [ STEM < "decorate" >,
    SYNSEM.LOCAL.KEYS.KEY _decorate_rel ].

:end :instance.


; <<>>

:begin :instance.

deduct_v1 := mv_np_trans_le &
  [ STEM < "deduct" >,
    SYNSEM.LOCAL.KEYS.KEY _deduct_rel ].

:end :instance.


; <<>>

:begin :instance.

demanding_a1 := intrans_adj_le &
  [ STEM < "demanding" >,
    SYNSEM.LOCAL.KEYS.KEY _demanding_rel ].

:end :instance.


; <<>>

:begin :instance.

direct_v1 := mv_np_trans_le &
  [ STEM < "direct" >,
    SYNSEM.LOCAL.KEYS.KEY _direct_v_rel ].

:end :instance.


; <<>>

:begin :instance.

discriminate_v1 := mv_np*_trans_le &
  [ STEM < "discriminate" >,
    SYNSEM.LOCAL.KEYS.KEY _discriminate_rel ].

:end :instance.


; <<>>

:begin :instance.

dither_v1 := mv_unerg_le &
  [ STEM < "dither" >,
    SYNSEM.LOCAL.KEYS.KEY _dither_rel ].

:end :instance.


; <<>>

:begin :instance.

dramatic_a1 := intrans_adj_le &
  [ STEM < "dramatic" >,
    SYNSEM.LOCAL.KEYS.KEY _dramatic_rel ].

:end :instance.


; <<>>

:begin :instance.

economic_a1 := intrans_adj_le &
  [ STEM < "economic" >,
    SYNSEM.LOCAL.KEYS.KEY _economic_rel ].

:end :instance.


; <<>>

:begin :instance.

elitist_a1 := intrans_adj_le &
  [ STEM < "elitist" >,
    SYNSEM.LOCAL.KEYS.KEY _elitist_rel ].

:end :instance.


; <<>>

:begin :instance.

enclose_v1 := mv_np_trans_le &
  [ STEM < "enclose" >,
    SYNSEM.LOCAL.KEYS.KEY _enclose_rel ].

:end :instance.


; <<>>

:begin :instance.

endlessly := vp_adv_word_le &
  [ STEM < "endlessly" >,
    SYNSEM.LOCAL.KEYS.KEY _endlessly_rel ].

:end :instance.


; <<>>

:begin :instance.

envious_a1 := intrans_adj_le &
  [ STEM < "envious" >,
    SYNSEM.LOCAL.KEYS.KEY _envious_rel ].

:end :instance.


; <<>>

:begin :instance.

expenditure_n1 := intr_noun_word_le &
  [ STEM < "expenditure" >,
    SYNSEM.LOCAL.KEYS.KEY _expenditure_rel ].

:end :instance.


; <<>>

:begin :instance.

fancy_a1 := intrans_adj_le &
  [ STEM < "fancy" >,
    SYNSEM.LOCAL.KEYS.KEY _fancy_rel ].

:end :instance.


; <<>>

:begin :instance.

fee_n1 := intr_noun_word_le &
  [ STEM < "fee" >,
    SYNSEM.LOCAL.KEYS.KEY _fee_rel ].

:end :instance.


; <<>>

:begin :instance.

fog_n := massn_le &
  [ STEM < "fog" >,
    SYNSEM.LOCAL.KEYS.KEY _fog_rel ].

:end :instance.

; <<>>

:begin :instance.

foresight_n := massn_le &
  [ STEM < "foresight" >,
    SYNSEM.LOCAL.KEYS.KEY _foresight_rel ].

:end :instance.

; <<>>

:begin :instance.

freshen_up_v1 := mv_particle_le &
  [ STEM < "freshen" >,
    SYNSEM.LOCAL.KEYS [ KEY _freshen_up_rel,
			--COMPKEY _up_rel ] ].

:end :instance.


; <<>>

:begin :instance.

fulfill_v1 := mv_np_trans_le &
  [ STEM < "fulfill" >,
    SYNSEM.LOCAL.KEYS.KEY _fulfil_rel ].

:end :instance.


; <<>>

:begin :instance.

gas_n := massn_le &
  [ STEM < "gas" >,
    SYNSEM.LOCAL.KEYS.KEY _gas_rel ].

:end :instance.

; <<>>

:begin :instance.

gateway_n1 := intr_noun_word_le &
  [ STEM < "gateway" >,
    SYNSEM.LOCAL.KEYS.KEY _gateway_rel ].

:end :instance.


; <<>>

:begin :instance.

gene_n1 := intr_noun_word_le &
  [ STEM < "gene" >,
    SYNSEM.LOCAL.KEYS.KEY _gene_rel ].

:end :instance.


; <<>>

:begin :instance.

get_along_v1 := mv_particle_le &
  [ STEM < "get" >,
    SYNSEM.LOCAL.KEYS [ KEY _get_along_rel,
			--COMPKEY _along_p_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

grade_v1 := mv_np_trans_le &
  [ STEM < "grade" >,
    SYNSEM.LOCAL.KEYS.KEY _grade_rel ].

:end :instance.


; <<>>

:begin :instance.

habit_n1 := intr_noun_word_le &
  [ STEM < "habit" >,
    SYNSEM.LOCAL.KEYS.KEY _habit_rel ].

:end :instance.


; <<>>

:begin :instance.

homeland_n1 := intr_noun_word_le &
  [ STEM < "homeland" >,
    SYNSEM.LOCAL.KEYS.KEY _homeland_rel ].

:end :instance.


; <<>>

:begin :instance.

horror_n1 := intr_noun_word_le &
  [ STEM < "horror" >,
    SYNSEM.LOCAL.KEYS.KEY _horror_rel ].

:end :instance.


; <<>>

:begin :instance.

hostel_n1 := intr_noun_word_le &
  [ STEM < "hostel" >,
    SYNSEM.LOCAL.KEYS.KEY _hostel_rel ].

:end :instance.


; <<>>

:begin :instance.

humane_a1 := intrans_adj_le &
  [ STEM < "humane" >,
    SYNSEM.LOCAL.KEYS.KEY _humane_rel ].

:end :instance.


; <<>>

:begin :instance.

illness_n := massn_le &
  [ STEM < "illness" >,
    SYNSEM.LOCAL.KEYS.KEY _illness_rel ].

:end :instance.

; <<>>

:begin :instance.

info_n1 := massn_le &
  [ STEM < "info" >,
    SYNSEM.LOCAL.KEYS.KEY _info_rel ].

:end :instance.


; <<>>

:begin :instance.

inspired_a1 := intrans_adj_le &
  [ STEM < "inspired" >,
    SYNSEM.LOCAL.KEYS.KEY _inspired_rel ].

:end :instance.


; <<>>

:begin :instance.

interestingly := adv_word_le &
  [ STEM < "interestingly" >,
    SYNSEM.LOCAL.KEYS.KEY _interestingly_rel ].

:end :instance.


; <<>>

:begin :instance.

internet_n1 := intr_noun_word_le &
  [ STEM < "internet" >,
    SYNSEM.LOCAL.KEYS.KEY _internet_rel ].

:end :instance.


; <<>>

:begin :instance.

intersection_n1 := intr_noun_word_le &
  [ STEM < "intersection" >,
    SYNSEM.LOCAL.KEYS.KEY _intersection_rel ].

:end :instance.


; <<>>

:begin :instance.

intoxication_n1 := massn_le &
  [ STEM < "intoxication" >,
    SYNSEM.LOCAL.KEYS.KEY _intoxication_rel ].

:end :instance.


; <<>>

:begin :instance.

lesson_n1 := intr_noun_word_le &
  [ STEM < "lesson" >,
    SYNSEM.LOCAL.KEYS.KEY _lesson_rel ].

:end :instance.


; <<>>

:begin :instance.

limp_v1 := mv_unerg_le &
  [ STEM < "limp" >,
    SYNSEM.LOCAL.KEYS.KEY _limp_v_rel ].

:end :instance.


; <<>>

:begin :instance.

link_v1 := mv_np_trans_le &
  [ STEM < "link" >,
    SYNSEM.LOCAL.KEYS.KEY _link_v_rel ].

:end :instance.


; <<>>

:begin :instance.

lodge_n1 := intr_noun_word_le &
  [ STEM < "lodge" >,
    SYNSEM.LOCAL.KEYS.KEY _lodge_rel ].

:end :instance.


; <<>>

:begin :instance.

madness_n := massn_le &
  [ STEM < "madness" >,
    SYNSEM.LOCAL.KEYS.KEY _madness_rel ].

:end :instance.

; <<>>

:begin :instance.

marry_v1 := mv_np*_trans_le &
  [ STEM < "marry" >,
    SYNSEM.LOCAL.KEYS.KEY _marry_rel ].

:end :instance.


; <<>>

:begin :instance.

meaning_n1 := massn_le &
  [ STEM < "meaning" >,
    SYNSEM.LOCAL.KEYS.KEY _meaning_rel ].

:end :instance.


; <<>>

:begin :instance.

meat_n1 := massn_le &
  [ STEM < "meat" >,
    SYNSEM.LOCAL.KEYS.KEY _meat_rel ].

:end :instance.


; <<>>

:begin :instance.

negotiation_n1 := intr_noun_word_le &
  [ STEM < "negotiation" >,
    SYNSEM.LOCAL.KEYS.KEY _negotiation_rel ].

:end :instance.


; <<>>

:begin :instance.

nominate_v1 := mv_np_trans_le &
  [ STEM < "nominate" >,
    SYNSEM.LOCAL.KEYS.KEY _nominate_rel ].

:end :instance.


; <<>>
; MULTIKEY < "north" >

:begin :instance.

north_german_a1 := intrans_adj_mle &
  [ STEM < "north", "german" >,
    SYNSEM.LOCAL.KEYS.KEY _north_german_rel ].

:end :instance.


; <<>>

:begin :instance.

nose_n1 := intr_noun_word_le &
  [ STEM < "nose" >,
    SYNSEM.LOCAL.KEYS.KEY _nose_rel ].

:end :instance.


; <<>>

:begin :instance.

notorious_a1 := intrans_adj_le &
  [ STEM < "notorious" >,
    SYNSEM.LOCAL.KEYS.KEY _notorious_rel ].

:end :instance.


; <<>>
; MULTIKEY < "open" >

:begin :instance.

open_air_a1 := intrans_adj_mle &
  [ STEM < "open", "air" >,
    SYNSEM.LOCAL.KEYS.KEY _open_air_rel ].

:end :instance.


; <<>>

:begin :instance.

operetta_n1 := intr_noun_word_le &
  [ STEM < "operetta" >,
    SYNSEM.LOCAL.KEYS.KEY _operetta_rel ].

:end :instance.


; <<>>

:begin :instance.

orchestra_n1 := intr_noun_word_le &
  [ STEM < "orchestra" >,
    SYNSEM.LOCAL.KEYS.KEY _orchestra_rel ].

:end :instance.


; <<>>

:begin :instance.

overtired_a1 := intrans_adj_le &
  [ STEM < "overtired" >,
    SYNSEM.LOCAL.KEYS.KEY _overtired_rel ].

:end :instance.


; <<>>

:begin :instance.

pant_v1 := mv_unerg_le &
  [ STEM < "pant" >,
    SYNSEM.LOCAL.KEYS.KEY _pant_rel ].

:end :instance.


; <<>>

:begin :instance.

passe_a1 := intrans_adj_le &
  [ STEM < "passe" >,
    SYNSEM.LOCAL.KEYS.KEY _passe_rel ].

:end :instance.


; <<>>

:begin :instance.

passionate_a1 := intrans_adj_le &
  [ STEM < "passionate" >,
    SYNSEM.LOCAL.KEYS.KEY _passionate_rel ].

:end :instance.


; <<>>

:begin :instance.

peace_n1 := massn_le &
  [ STEM < "peace" >,
    SYNSEM.LOCAL.KEYS.KEY _peace_rel ].

:end :instance.


; <<>>

:begin :instance.

philharmonic_n1 := intr_noun_word_le &
  [ STEM < "philharmonic" >,
    SYNSEM.LOCAL.KEYS.KEY _philharmonic_rel ].

:end :instance.


; <<>>

:begin :instance.

pile_n1 := noun_ppof_word_le &
  [ STEM < "pile" >,
    SYNSEM.LOCAL.KEYS.KEY _pile_rel ].

:end :instance.


; <<>>

:begin :instance.

pinch_v1 := mv_np_trans_le &
  [ STEM < "pinch" >,
    SYNSEM.LOCAL.KEYS.KEY _pinch_rel ].

:end :instance.


; <<>>

:begin :instance.

pipe_n1 := intr_noun_word_le &
  [ STEM < "pipe" >,
    SYNSEM.LOCAL.KEYS.KEY _pipe_rel ].

:end :instance.


; <<>>

:begin :instance.

piste_n1 := intr_noun_word_le &
  [ STEM < "piste" >,
    SYNSEM.LOCAL.KEYS.KEY _piste_rel ].

:end :instance.


; <<>>

:begin :instance.

rail_n1 := intr_noun_word_le &
  [ STEM < "rail" >,
    SYNSEM.LOCAL.KEYS.KEY _rail_rel ].

:end :instance.


; <<>>

:begin :instance.

rank_n1 := massn_le &
  [ STEM < "rank" >,
    SYNSEM.LOCAL.KEYS.KEY _rank_rel ].

:end :instance.


; <<>>

:begin :instance.

reassuring_a1 := intrans_adj_le &
  [ STEM < "reassuring" >,
    SYNSEM.LOCAL.KEYS.KEY _reassuring_rel ].

:end :instance.


; <<>>

:begin :instance.

recipe_n1 := noun_ppof_word_le &
  [ STEM < "recipe" >,
    SYNSEM.LOCAL.KEYS.KEY _recipe_rel ].

:end :instance.


; <<>>

:begin :instance.

reconstruct_v1 := mv_np_trans_le &
  [ STEM < "reconstruct" >,
    SYNSEM.LOCAL.KEYS.KEY _reconstruct_rel ].

:end :instance.


; <<>>

:begin :instance.

reconstruction_n1 := noun_ppof_word_le &
  [ STEM < "reconstruction" >,
    SYNSEM.LOCAL.KEYS.KEY _reconstruction_rel ].

:end :instance.


; <<>>

:begin :instance.

reimburse_v1 := mv_empty_prep*_trans_le &
  [ STEM < "reimburse" >,
    SYNSEM.LOCAL.KEYS [ KEY _reimburse_rel,
			--OCOMPKEY _for_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

relate_v1 := mv_empty_prep_trans_le &
  [ STEM < "relate" >,
    SYNSEM.LOCAL.KEYS [ KEY _relate_to_rel,
			--OCOMPKEY _to_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

renovation_n1 := noun_ppof_word_le &
  [ STEM < "renovation" >,
    SYNSEM.LOCAL.KEYS.KEY _renovation_rel ].

:end :instance.


; <<>>

:begin :instance.

repair_v1 := mv_np_trans_le &
  [ STEM < "repair" >,
    SYNSEM.LOCAL.KEYS.KEY _repair_v_rel ].

:end :instance.


; <<>>

:begin :instance.

reside_v1 := mv_unerg_le &
  [ STEM < "reside" >,
    SYNSEM.LOCAL.KEYS.KEY _reside_rel ].

:end :instance.


; <<>>
; MULTIKEY < "roller" >

:begin :instance.

roller_skate_n1 := intr_noun_word_mle1 &
  [ STEM < "roller", "skate" >,
    SYNSEM.LOCAL.KEYS.KEY _roller_skate_rel ].

:end :instance.


; <<>>

:begin :instance.

rope_n1 := massn_le &
  [ STEM < "rope" >,
    SYNSEM.LOCAL.KEYS.KEY _rope_rel ].

:end :instance.


; <<>>

:begin :instance.

rouse_v1 := mv_np_trans_le &
  [ STEM < "rouse" >,
    SYNSEM.LOCAL.KEYS.KEY _rouse_rel ].

:end :instance.


; <<>>

:begin :instance.

seater_n1 := intr_noun_word_le &
  [ STEM < "seater" >,
    SYNSEM.LOCAL.KEYS.KEY _seater_rel ].

:end :instance.


; <<>>

:begin :instance.

secret_a1 := intrans_adj_le &
  [ STEM < "secret" >,
    SYNSEM.LOCAL.KEYS.KEY _secret_rel ].

:end :instance.


; <<>>

:begin :instance.

sect_n1 := intr_noun_word_le &
  [ STEM < "sect" >,
    SYNSEM.LOCAL.KEYS.KEY _sect_rel ].

:end :instance.


; <<>>

:begin :instance.

sentence_n1 := intr_noun_word_le &
  [ STEM < "sentence" >,
    SYNSEM.LOCAL.KEYS.KEY _sentence_rel ].

:end :instance.


; <<>>

:begin :instance.

separation_n1 := massn_le &
  [ STEM < "separation" >,
    SYNSEM.LOCAL.KEYS.KEY _separation_rel ].

:end :instance.


; <<>>

:begin :instance.

sherry_n1 := massn_le &
  [ STEM < "sherry" >,
    SYNSEM.LOCAL.KEYS.KEY _sherry_rel ].

:end :instance.


; <<>>

:begin :instance.

shortage_n1 := intr_noun_word_le &
  [ STEM < "shortage" >,
    SYNSEM.LOCAL.KEYS.KEY _shortage_rel ].

:end :instance.


; <<>>

:begin :instance.

shut_down_v1 := mv_prep_particle_np_le &
  [ STEM < "shut" >,
    SYNSEM.LOCAL.KEYS [ KEY _shut_down_rel,
			--COMPKEY _down_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

sign_v1 := mv_np_trans_le &
  [ STEM < "sign" >,
    SYNSEM.LOCAL.KEYS.KEY _sign_v_rel ].

:end :instance.


; <<>>

:begin :instance.

snore_v1 := mv_unerg_le &
  [ STEM < "snore" >,
    SYNSEM.LOCAL.KEYS.KEY _snore_rel ].

:end :instance.


; <<>>

:begin :instance.

snow_n1 := massn_le &
  [ STEM < "snow" >,
    SYNSEM.LOCAL.KEYS.KEY _snow_n_rel ].

:end :instance.


; <<>>

:begin :instance.

song_n1 := intr_noun_word_le &
  [ STEM < "song" >,
    SYNSEM.LOCAL.KEYS.KEY _song_rel ].

:end :instance.


; <<>>

:begin :instance.

speed_v1 := mv_unerg_le &
  [ STEM < "speed" >,
    SYNSEM.LOCAL.KEYS.KEY _speed_v_rel ].

:end :instance.


; <<>>

:begin :instance.

stamp_on_v1 := mv_particle_np_le &
  [ STEM < "stamp" >,
    SYNSEM.LOCAL.KEYS [ KEY _stamp_on_rel,
			--COMPKEY _on_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

stopover_n1 := intr_noun_word_le &
  [ STEM < "stopover" >,
    SYNSEM.LOCAL.KEYS.KEY _stopover_rel ].

:end :instance.


; <<>>

:begin :instance.

stronghold_n1 := intr_noun_word_le &
  [ STEM < "stronghold" >,
    SYNSEM.LOCAL.KEYS.KEY _stronghold_rel ].

:end :instance.


; <<>>

:begin :instance.

stubborn_a1 := intrans_adj_le &
  [ STEM < "stubborn" >,
    SYNSEM.LOCAL.KEYS.KEY _stubborn_rel ].

:end :instance.


; <<>>

:begin :instance.

stuff_v1 := mv_np_trans_le &
  [ STEM < "stuff" >,
    SYNSEM.LOCAL.KEYS.KEY _stuff_v_rel ].

:end :instance.


; <<>>

:begin :instance.

subarea_n1 := intr_noun_word_le &
  [ STEM < "subarea" >,
    SYNSEM.LOCAL.KEYS.KEY _subarea_rel ].

:end :instance.


; <<>>

:begin :instance.

subscription_n1 := noun_ppcomp_word_le &
  [ STEM < "subscription" >,
    SYNSEM.LOCAL.KEYS [ KEY _subscription_rel,
			--COMPKEY _to_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

suburban_a1 := intrans_adj_le &
  [ STEM < "suburban" >,
    SYNSEM.LOCAL.KEYS.KEY _suburbian_rel ].

:end :instance.


; <<>>

:begin :instance.

suitcase_n1 := intr_noun_word_le &
  [ STEM < "suitcase" >,
    SYNSEM.LOCAL.KEYS.KEY _suitcase_rel ].

:end :instance.


; <<>>

:begin :instance.

sunbeam_n1 := intr_noun_word_le &
  [ STEM < "sunbeam" >,
    SYNSEM.LOCAL.KEYS.KEY _sunbeam_rel ].

:end :instance.


; <<>>

:begin :instance.

surname_n1 := intr_noun_word_le &
  [ STEM < "surname" >,
    SYNSEM.LOCAL.KEYS.KEY _surname_rel ].

:end :instance.


; <<>>

:begin :instance.

survive_v1 := mv_np_trans_le &
  [ STEM < "survive" >,
    SYNSEM.LOCAL.KEYS.KEY _survive_rel ].

:end :instance.


; <<>>

:begin :instance.

sweat_v1 := mv_unerg_le &
  [ STEM < "sweat" >,
    SYNSEM.LOCAL.KEYS.KEY _sweat_rel ].

:end :instance.


; <<>>

:begin :instance.

sweat_out_v1 := mv_particle_np_le &
  [ STEM < "sweat" >,
    SYNSEM.LOCAL.KEYS [ KEY _sweat_out_rel,
			--COMPKEY _out_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

taboo_n1 := intr_noun_word_le &
  [ STEM < "taboo" >,
    SYNSEM.LOCAL.KEYS.KEY _taboo_rel ].

:end :instance.


; <<>>

:begin :instance.

talk_into_v1 := mv_empty_prep_intrans_le &
  [ STEM < "talk" >,
    SYNSEM.LOCAL.KEYS [ KEY _talk_v_rel,
			--COMPKEY _into_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

tear_open_v1 := mv_particle_np_le &
  [ STEM < "tear" >,
    SYNSEM.LOCAL.KEYS [ KEY _tear_open_rel,
			--COMPKEY _open_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

tearjerker_n1 := intr_noun_word_le &
  [ STEM < "tearjerker" >,
    SYNSEM.LOCAL.KEYS.KEY _tearjerker_rel ].

:end :instance.


; <<>>

:begin :instance.

tent_n1 := intr_noun_word_le &
  [ STEM < "tent" >,
    SYNSEM.LOCAL.KEYS.KEY _tent_rel ].

:end :instance.


; <<>>

:begin :instance.

theatrical_a1 := intrans_adj_le &
  [ STEM < "theatrical" >,
    SYNSEM.LOCAL.KEYS.KEY _theatrical_rel ].

:end :instance.


; <<>>

:begin :instance.

transport_n1 := massn_le &
  [ STEM < "transport" >,
    SYNSEM.LOCAL.KEYS.KEY _transport_rel ].

:end :instance.


; <<>>

:begin :instance.

traveller_n1 := intr_noun_word_le &
  [ STEM < "traveller" >,
    SYNSEM.LOCAL.KEYS.KEY _traveller_rel ].

:end :instance.


; <<>>

:begin :instance.

turbulence_n1 := massn_le &
  [ STEM < "turbulence" >,
    SYNSEM.LOCAL.KEYS.KEY _turbulence_rel ].

:end :instance.


; <<>>

:begin :instance.

twiddle_v1 := mv_np_trans_le &
  [ STEM < "twiddle" >,
    SYNSEM.LOCAL.KEYS.KEY _twiddle_rel ].

:end :instance.


; <<>>

:begin :instance.

unconscious_a1 := intrans_adj_le &
  [ STEM < "unconscious" >,
    SYNSEM.LOCAL.KEYS.KEY _unconscious_rel ].

:end :instance.


; <<>>

:begin :instance.

unique_a1 := intrans_adj_le &
  [ STEM < "unique" >,
    SYNSEM.LOCAL.KEYS.KEY _unique_rel ].

:end :instance.


; <<>>

:begin :instance.

used_a1 := trans_adj_le &
  [ STEM < "used" >,
    SYNSEM.LOCAL.KEYS [ KEY _used_to_rel,
			--COMPKEY _to_rel ] ].

:end :instance.


; <<>>

:begin :instance.

visiting_a1 := intrans_adj_le &
  [ STEM < "visiting" >,
    SYNSEM.LOCAL.KEYS.KEY _visiting_rel ].

:end :instance.


; <<>>
; MULTIKEY < "warm" >

:begin :instance.

warm-up_n1 := intr_noun_word_mle1 &
  [ STEM < "warm", "up" >,
    SYNSEM.LOCAL.KEYS.KEY _warm_up_rel ].

:end :instance.


; <<>>

:begin :instance.

weakness_n1 := massn_le &
  [ STEM < "weakness" >,
    SYNSEM.LOCAL.KEYS.KEY _weakness_rel ].

:end :instance.


; <<>>

:begin :instance.

web_n1 := intr_noun_word_le &
  [ STEM < "web" >,
    SYNSEM.LOCAL.KEYS.KEY _web_rel ].

:end :instance.


; <<>>

:begin :instance.

will_n1 := intr_noun_word_le &
  [ STEM < "will" >,
    SYNSEM.LOCAL.KEYS.KEY _will_rel ].

:end :instance.


; <<>>

:begin :instance.

wind_n1 := intr_noun_word_le &
  [ STEM < "wind" >,
    SYNSEM.LOCAL.KEYS.KEY _wind_rel ].

:end :instance.


; <<>>

:begin :instance.

woody_a1 := intrans_adj_le &
  [ STEM < "woody" >,
    SYNSEM.LOCAL.KEYS.KEY _woody_rel ].

:end :instance.


; <<>>

:begin :instance.

wrecked_a1 := intrans_adj_le &
  [ STEM < "wrecked" >,
    SYNSEM.LOCAL.KEYS.KEY _wrecked_rel ].

:end :instance.


; <<>>

:begin :instance.

yellow_a1 := intrans_adj_le &
  [ STEM < "yellow" >,
    SYNSEM.LOCAL.KEYS.KEY _yellow_rel ].

:end :instance.


; <<>>

:begin :instance.

attach_v1 := mv_empty_prep_trans_le &
  [ STEM < "attach" >,
    SYNSEM.LOCAL.KEYS [ KEY _attach_to_rel,
			--OCOMPKEY _to_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

aversion_n1 := intr_noun_word_le &
  [ STEM < "aversion" >,
    SYNSEM.LOCAL.KEYS.KEY _aversion_rel ].

:end :instance.


; <<>>

:begin :instance.

habitually := adv_word_le &
  [ STEM < "habitually" >,
    SYNSEM.LOCAL.KEYS.KEY _habitually_rel ].

:end :instance.


; <<>>

:begin :instance.

slip_v1 := mv_unerg_le &
  [ STEM < "slip" >,
    SYNSEM.LOCAL.KEYS.KEY _slip_v_rel ].

:end :instance.


; <<>>

:begin :instance.

lunch_time_n2 := mealtime_word_le &
  [ STEM < "lunchtime" >,
    SYNSEM.LOCAL.KEYS.KEY _lunchtime_rel ].

:end :instance.


; <<>>

:begin :instance.

out_a1 := intrans_adj_le &
  [ STEM < "out" >,
    SYNSEM.LOCAL.KEYS.KEY _out_adj_rel ].

:end :instance.


; <<>>

:begin :instance.

british_a1 := intrans_adj_le &
  [ STEM < "british" >,
    SYNSEM.LOCAL.KEYS.KEY _british_isect_rel ].

:end :instance.

; <<>>

:begin :instance.

verbmobil := proper_le &
  [ STEM < "verbmobil" >,
    SYNSEM.LOCAL.KEYS.KEY.NAMED 'verbmobil ].

:end :instance.


; <<>>

:begin :instance.

accident_n1 := intr_noun_word_le &
  [ STEM < "accident" >,
    SYNSEM.LOCAL.KEYS.KEY _accident_rel ].

:end :instance.


; <<>>

:begin :instance.

acclimatize_v1 := mv_np_trans_le &
  [ STEM < "acclimatize" >,
    SYNSEM.LOCAL.KEYS.KEY _acclimatize_rel ].

:end :instance.


; <<>>

:begin :instance.

acknowledgement_n1 := intr_noun_word_le &
  [ STEM < "acknowledgement" >,
    SYNSEM.LOCAL.KEYS.KEY _acknowledgement_rel ].

:end :instance.


; <<>>

:begin :instance.

acquainted_a1 := intrans_adj_le &
  [ STEM < "acquainted" >,
    SYNSEM.LOCAL.KEYS.KEY _acquainted_rel ].

:end :instance.


; <<>>

:begin :instance.

action_n1 := intr_noun_word_le &
  [ STEM < "action" >,
    SYNSEM.LOCAL.KEYS.KEY _action_rel ].

:end :instance.


; <<>>

:begin :instance.

addict_n1 := intr_noun_word_le &
  [ STEM < "addict" >,
    SYNSEM.LOCAL.KEYS.KEY _addict_rel ].

:end :instance.


; <<>>

:begin :instance.

ailment_n1 := intr_noun_word_le &
  [ STEM < "ailment" >,
    SYNSEM.LOCAL.KEYS.KEY _ailment_rel ].

:end :instance.


; <<>>

:begin :instance.

anthropology_n1 := intr_noun_word_le &
  [ STEM < "anthropology" >,
    SYNSEM.LOCAL.KEYS.KEY _anthropology_rel ].

:end :instance.


; <<>>

:begin :instance.

appetite_n1 := intr_noun_word_le &
  [ STEM < "appetite" >,
    SYNSEM.LOCAL.KEYS.KEY _appetite_rel ].

:end :instance.


; <<>>

:begin :instance.

apprentice_n1 := intr_noun_word_le &
  [ STEM < "apprentice" >,
    SYNSEM.LOCAL.KEYS.KEY _apprentice_rel ].

:end :instance.


; <<>>

:begin :instance.

bathroom_n1 := intr_noun_word_le &
  [ STEM < "bathroom" >,
    SYNSEM.LOCAL.KEYS.KEY _bathroom_rel ].

:end :instance.


; <<>>

:begin :instance.

bestseller_n1 := intr_noun_word_le &
  [ STEM < "bestseller" >,
    SYNSEM.LOCAL.KEYS.KEY _bestseller_rel ].

:end :instance.


; <<>>

:begin :instance.

bidder_n1 := intr_noun_word_le &
  [ STEM < "bidder" >,
    SYNSEM.LOCAL.KEYS.KEY _bidder_rel ].

:end :instance.


; <<>>

:begin :instance.

booklet_n1 := intr_noun_word_le &
  [ STEM < "booklet" >,
    SYNSEM.LOCAL.KEYS.KEY _booklet_rel ].

:end :instance.


; <<>>

:begin :instance.

button_n1 := intr_noun_word_le &
  [ STEM < "button" >,
    SYNSEM.LOCAL.KEYS.KEY _button_rel ].

:end :instance.


; <<>>

:begin :instance.

candidate_n1 := intr_noun_word_le &
  [ STEM < "candidate" >,
    SYNSEM.LOCAL.KEYS.KEY _candidate_rel ].

:end :instance.


; <<>>

:begin :instance.

catalogue_n1 := intr_noun_word_le &
  [ STEM < "catalogue" >,
    SYNSEM.LOCAL.KEYS.KEY _catalogue_rel ].

:end :instance.


; <<>>

:begin :instance.

cent_n1 := intr_noun_word_le &
  [ STEM < "cent" >,
    SYNSEM.LOCAL.KEYS.KEY _cent_rel ].

:end :instance.


; <<>>

:begin :instance.

chairman_n1 := intr_noun_word_le &
  [ STEM < "chairman" >,
    SYNSEM.LOCAL.KEYS.KEY _chairman_rel ].

:end :instance.


; <<>>

:begin :instance.

chemistry_n1 := intr_noun_word_le &
  [ STEM < "chemistry" >,
    SYNSEM.LOCAL.KEYS.KEY _chemistry_rel ].

:end :instance.


; <<>>

:begin :instance.

cigarette_n1 := intr_noun_word_le &
  [ STEM < "cigarette" >,
    SYNSEM.LOCAL.KEYS.KEY _cigarette_rel ].

:end :instance.


; <<>>

:begin :instance.

clarinet_n1 := intr_noun_word_le &
  [ STEM < "clarinet" >,
    SYNSEM.LOCAL.KEYS.KEY clarinet ].

:end :instance.


; <<>>

:begin :instance.

classic_n1 := intr_noun_word_le &
  [ STEM < "classic" >,
    SYNSEM.LOCAL.KEYS.KEY _classic_rel ].

:end :instance.


; <<>>

:begin :instance.

cognac_n1 := massn_le &
  [ STEM < "cognac" >,
    SYNSEM.LOCAL.KEYS.KEY _cognac_rel ].

:end :instance.


; <<>>

:begin :instance.

column_n1 := intr_noun_word_le &
  [ STEM < "column" >,
    SYNSEM.LOCAL.KEYS.KEY _column_rel ].

:end :instance.


; <<>>

:begin :instance.

commencement_n1 := intr_noun_word_le &
  [ STEM < "commencement" >,
    SYNSEM.LOCAL.KEYS.KEY _commencement_rel ].

:end :instance.


; <<>>

:begin :instance.

commuter_n1 := intr_noun_word_le &
  [ STEM < "commuter" >,
    SYNSEM.LOCAL.KEYS.KEY _commuter_rel ].

:end :instance.


; <<>>

:begin :instance.

companion_n1 := intr_noun_word_le &
  [ STEM < "companion" >,
    SYNSEM.LOCAL.KEYS.KEY _companion_rel ].

:end :instance.


; <<>>

:begin :instance.

completion_n1 := intr_noun_word_le &
  [ STEM < "completion" >,
    SYNSEM.LOCAL.KEYS.KEY _completion_rel ].

:end :instance.


; <<>>

:begin :instance.

confidence_n1 := massn_le &
  [ STEM < "confidence" >,
    SYNSEM.LOCAL.KEYS.KEY _confidence_rel ].

:end :instance.


; <<>>

:begin :instance.

consultancy_n1 := intr_noun_word_le &
  [ STEM < "consultancy" >,
    SYNSEM.LOCAL.KEYS.KEY _consultancy_rel ].

:end :instance.


; <<>>

:begin :instance.

controller_n1 := intr_noun_word_le &
  [ STEM < "controller" >,
    SYNSEM.LOCAL.KEYS.KEY controller ].

:end :instance.


; <<>>

:begin :instance.

convertible_n1 := intr_noun_word_le &
  [ STEM < "convertible" >,
    SYNSEM.LOCAL.KEYS.KEY _convertible_rel ].

:end :instance.


; <<>>

:begin :instance.

counteroffer_n1 := intr_noun_word_le &
  [ STEM < "counteroffer" >,
    SYNSEM.LOCAL.KEYS.KEY _counteroffer_rel ].

:end :instance.


; <<>>

:begin :instance.

cousin_n1 := intr_noun_word_le &
  [ STEM < "cousin" >,
    SYNSEM.LOCAL.KEYS.KEY _cousin_rel ].

:end :instance.


; <<>>

:begin :instance.

disco_n1 := intr_noun_word_le &
  [ STEM < "disco" >,
    SYNSEM.LOCAL.KEYS.KEY _disco_rel ].

:end :instance.


; <<>>

:begin :instance.

dream_n1 := intr_noun_word_le &
  [ STEM < "dream" >,
    SYNSEM.LOCAL.KEYS.KEY _dream_rel ].

:end :instance.


; <<>>

:begin :instance.

espresso_n1 := intr_noun_word_le &
  [ STEM < "espresso" >,
    SYNSEM.LOCAL.KEYS.KEY _espresso_rel ].

:end :instance.


; <<>>

:begin :instance.

exposition_n1 := intr_noun_word_le &
  [ STEM < "exposition" >,
    SYNSEM.LOCAL.KEYS.KEY _exposition_rel ].

:end :instance.


; <<>>

:begin :instance.

fan_n1 := intr_noun_word_le &
  [ STEM < "fan" >,
    SYNSEM.LOCAL.KEYS.KEY _fan_rel ].

:end :instance.


; <<>>

:begin :instance.

fatigue_n1 :=  massn_le &
  [ STEM < "fatigue" >,
    SYNSEM.LOCAL.KEYS.KEY _fatigue_rel ].

:end :instance.


; <<>>

:begin :instance.

fireworks_n1 := plurn_le &
  [ STEM < "fireworks" >,
    SYNSEM.LOCAL.KEYS.KEY _firework_rel ].

:end :instance.


; <<>>

:begin :instance.

formula_n1 := intr_noun_word_le &
  [ STEM < "formula" >,
    SYNSEM.LOCAL.KEYS.KEY _formula_rel ].

:end :instance.


; <<>>

:begin :instance.

freak_n1 := intr_noun_word_le &
  [ STEM < "freak" >,
    SYNSEM.LOCAL.KEYS.KEY _freak_rel ].

:end :instance.


; <<>>

:begin :instance.

frequency_n1 := intr_noun_word_le &
  [ STEM < "frequency" >,
    SYNSEM.LOCAL.KEYS.KEY _frequency_rel ].

:end :instance.


; <<>>

:begin :instance.

girl_n1 := intr_noun_word_le &
  [ STEM < "girl" >,
    SYNSEM.LOCAL.KEYS.KEY _girl_rel ].

:end :instance.


; <<>>

:begin :instance.

guidebook_n1 := intr_noun_word_le &
  [ STEM < "guidebook" >,
    SYNSEM.LOCAL.KEYS.KEY _guidebook_rel ].

:end :instance.


; <<>>

:begin :instance.

headquarters_n1 := plurn_le &
  [ STEM < "headquarters" >,
    SYNSEM.LOCAL.KEYS.KEY _headquarter_rel ].

:end :instance.


; <<>>

:begin :instance.

helicopter_n1 := intr_noun_word_le &
  [ STEM < "helicopter" >,
    SYNSEM.LOCAL.KEYS.KEY _helicopter_rel ].

:end :instance.


; <<>>

:begin :instance.

household_n1 := intr_noun_word_le &
  [ STEM < "household" >,
    SYNSEM.LOCAL.KEYS.KEY household ].

:end :instance.


; <<>>

:begin :instance.

hydrobiology_n1 := massn_le &
  [ STEM < "hydrobiology" >,
    SYNSEM.LOCAL.KEYS.KEY _hydrobiology_rel ].

:end :instance.


; <<>>

:begin :instance.

idiot_n1 := intr_noun_word_le &
  [ STEM < "idiot" >,
    SYNSEM.LOCAL.KEYS.KEY _idiot_rel ].

:end :instance.


; <<>>

:begin :instance.

ignoramus_n1 := intr_noun_word_le &
  [ STEM < "ignoramus" >,
    SYNSEM.LOCAL.KEYS.KEY _ignoramus_rel ].

:end :instance.


; <<>>

:begin :instance.

impoliteness_n1 := intr_noun_word_le &
  [ STEM < "impoliteness" >,
    SYNSEM.LOCAL.KEYS.KEY _impoliteness_rel ].

:end :instance.


; <<>>

:begin :instance.

improvement_n1 := intr_noun_word_le &
  [ STEM < "improvement" >,
    SYNSEM.LOCAL.KEYS.KEY _improvement_rel ].

:end :instance.


; <<>>

:begin :instance.

incompatibility_n1 := intr_noun_word_le &
  [ STEM < "incompatibility" >,
    SYNSEM.LOCAL.KEYS.KEY _incompatibility_rel ].

:end :instance.


; <<>>

:begin :instance.

instinct_n1 := intr_noun_word_le &
  [ STEM < "instinct" >,
    SYNSEM.LOCAL.KEYS.KEY _instinct_rel ].

:end :instance.


; <<>>

:begin :instance.

itinerary_n1 := intr_noun_word_le &
  [ STEM < "itinerary" >,
    SYNSEM.LOCAL.KEYS.KEY _itinerary_rel ].

:end :instance.


; <<>>

:begin :instance.

law_n1 := intr_noun_word_le &
  [ STEM < "law" >,
    SYNSEM.LOCAL.KEYS.KEY _law_rel ].

:end :instance.


; <<>>

:begin :instance.

leniency_n1 := massn_le &
  [ STEM < "leniency" >,
    SYNSEM.LOCAL.KEYS.KEY _leniency_rel ].

:end :instance.


; <<>>

:begin :instance.

locomotive_n1 := intr_noun_word_le &
  [ STEM < "locomotive" >,
    SYNSEM.LOCAL.KEYS.KEY _locomotive_rel ].

:end :instance.


; <<>>

:begin :instance.

lotto_n1 := intr_noun_word_le &
  [ STEM < "lotto" >,
    SYNSEM.LOCAL.KEYS.KEY _lotto_rel ].

:end :instance.


; <<>>

:begin :instance.

mass_n1 := noun_ppof_word_le &
  [ STEM < "mass" >,
    SYNSEM.LOCAL.KEYS.KEY _mass_rel ].

:end :instance.


; <<>>

:begin :instance.

oath_n1 := intr_noun_word_le &
  [ STEM < "oath" >,
    SYNSEM.LOCAL.KEYS.KEY _oath_rel ].

:end :instance.


; <<>>

:begin :instance.

panic_n1 := massn_le &
  [ STEM < "panic" >,
    SYNSEM.LOCAL.KEYS.KEY _panic_rel ].

:end :instance.


; <<>>

:begin :instance.

penny_n1 := intr_noun_word_le &
  [ STEM < "penny" >,
    SYNSEM.LOCAL.KEYS.KEY _penny_rel ].

:end :instance.


; <<>>

:begin :instance.

poet_n1 := intr_noun_word_le &
  [ STEM < "poet" >,
    SYNSEM.LOCAL.KEYS.KEY _poet_rel ].

:end :instance.


; <<>>

:begin :instance.

possession_n1 := intr_noun_word_le &
  [ STEM < "possession" >,
    SYNSEM.LOCAL.KEYS.KEY _possession_rel ].

:end :instance.


; <<>>

:begin :instance.

poverty_n1 := massn_le &
  [ STEM < "poverty" >,
    SYNSEM.LOCAL.KEYS.KEY _poverty_rel ].

:end :instance.


; <<>>

:begin :instance.

rack_n1 := intr_noun_word_le &
  [ STEM < "rack" >,
    SYNSEM.LOCAL.KEYS.KEY _rack_rel ].

:end :instance.


; <<>>

:begin :instance.

radio_n1 := intr_noun_word_le &
  [ STEM < "radio" >,
    SYNSEM.LOCAL.KEYS.KEY radio ].

:end :instance.


; <<>>

:begin :instance.

registration_n1 := intr_noun_word_le &
  [ STEM < "registration" >,
    SYNSEM.LOCAL.KEYS.KEY _registration_rel ].

:end :instance.


; <<>>

:begin :instance.

reunion_n1 := intr_noun_word_le &
  [ STEM < "reunion" >,
    SYNSEM.LOCAL.KEYS.KEY _reunion_rel ].

:end :instance.


; <<>>

:begin :instance.

riser_n1 := intr_noun_word_le &
  [ STEM < "riser" >,
    SYNSEM.LOCAL.KEYS.KEY _riser_rel ].

:end :instance.


; <<>>

:begin :instance.

roster_n1 := intr_noun_word_le &
  [ STEM < "roster" >,
    SYNSEM.LOCAL.KEYS.KEY _roster_rel ].

:end :instance.


; <<>>

:begin :instance.

rota_n1 := intr_noun_word_le &
  [ STEM < "rota" >,
    SYNSEM.LOCAL.KEYS.KEY _rota_rel ].

:end :instance.


; <<>>

:begin :instance.

rotation_n1 := intr_noun_word_le &
  [ STEM < "rotation" >,
    SYNSEM.LOCAL.KEYS.KEY _rotation_rel ].

:end :instance.


; <<>>

:begin :instance.

shipment_n1 := intr_noun_word_le &
  [ STEM < "shipment" >,
    SYNSEM.LOCAL.KEYS.KEY _shipment_rel ].

:end :instance.


; <<>>

:begin :instance.

shock_n1 := intr_noun_word_le &
  [ STEM < "shock" >,
    SYNSEM.LOCAL.KEYS.KEY _shock_n_rel ].

:end :instance.


; <<>>

:begin :instance.

snob_n1 := intr_noun_word_le &
  [ STEM < "snob" >,
    SYNSEM.LOCAL.KEYS.KEY _snob_rel ].

:end :instance.


; <<>>

:begin :instance.

subdivision_n1 := intr_noun_word_le &
  [ STEM < "subdivision" >,
    SYNSEM.LOCAL.KEYS.KEY _subdivision_rel ].

:end :instance.


; <<>>

:begin :instance.

synthesis_n1 := intr_noun_word_le &
  [ STEM < "synthesis" >,
    SYNSEM.LOCAL.KEYS.KEY _synthesis_rel ].

:end :instance.


; <<>>

:begin :instance.

telesales_n1 := intr_noun_word_le &
  [ STEM < "telesales" >,
    SYNSEM.LOCAL.KEYS.KEY _telesales_rel ].

:end :instance.


; <<>>

:begin :instance.

terminal_n1 := intr_noun_word_le &
  [ STEM < "terminal" >,
    SYNSEM.LOCAL.KEYS.KEY _terminal_rel ].

:end :instance.


; <<>>

:begin :instance.

thumb_n1 := intr_noun_word_le &
  [ STEM < "thumb" >,
    SYNSEM.LOCAL.KEYS.KEY _thumb_rel ].

:end :instance.


; <<>>

:begin :instance.

travelogue_n1 := intr_noun_word_le &
  [ STEM < "travelogue" >,
    SYNSEM.LOCAL.KEYS.KEY _travelogue_rel ].

:end :instance.


; <<>>

:begin :instance.

trial_n1 := intr_noun_word_le &
  [ STEM < "trial" >,
    SYNSEM.LOCAL.KEYS.KEY _trial_rel ].

:end :instance.


; <<>>

:begin :instance.

triple_n1 := intr_noun_word_le &
  [ STEM < "triple" >,
    SYNSEM.LOCAL.KEYS.KEY _triple_rel ].

:end :instance.


; <<>>

:begin :instance.

virus_n1 := intr_noun_word_le &
  [ STEM < "virus" >,
    SYNSEM.LOCAL.KEYS.KEY _virus_rel ].

:end :instance.


; <<>>

:begin :instance.

wave_n1 := intr_noun_word_le &
  [ STEM < "wave" >,
    SYNSEM.LOCAL.KEYS.KEY _wave_rel ].

:end :instance.


; <<>>

:begin :instance.

whisper_n1 := intr_noun_word_le &
  [ STEM < "whisper" >,
    SYNSEM.LOCAL.KEYS.KEY _whisper_n_rel ].

:end :instance.


; <<>>

:begin :instance.

wing_n1 := intr_noun_word_le &
  [ STEM < "wing" >,
    SYNSEM.LOCAL.KEYS.KEY _wing_rel ].

:end :instance.


; <<>>

:begin :instance.

yawn_n1 := intr_noun_word_le &
  [ STEM < "yawn" >,
    SYNSEM.LOCAL.KEYS.KEY _yawn_rel ].

:end :instance.


; <<>>

:begin :instance.

yen_n1 := intr_noun_word_le &
  [ STEM < "yen" >,
    SYNSEM.LOCAL.KEYS.KEY _yen_rel ].

:end :instance.


; <<>>

:begin :instance.

arranging_n1 := intr_noun_word_le &
  [ STEM < "arranging" >,
    SYNSEM.LOCAL.KEYS.KEY _arranging_rel ].

:end :instance.


; <<>>

:begin :instance.

driving_n1 := intr_noun_word_le &
  [ STEM < "driving" >,
    SYNSEM.LOCAL.KEYS.KEY _driving_rel ].

:end :instance.


; <<>>

:begin :instance.

fixing_n1 := intr_noun_word_le &
  [ STEM < "fixing" >,
    SYNSEM.LOCAL.KEYS.KEY _fixing_rel ].

:end :instance.


; <<>>

:begin :instance.

hearing_n1 := intr_noun_word_le &
  [ STEM < "hearing" >,
    SYNSEM.LOCAL.KEYS.KEY _hearing_rel ].

:end :instance.


; <<>>

:begin :instance.

making_n1 := intr_noun_word_le &
  [ STEM < "making" >,
    SYNSEM.LOCAL.KEYS.KEY _making_rel ].

:end :instance.


; <<>>

:begin :instance.

outing_n1 := intr_noun_word_le &
  [ STEM < "outing" >,
    SYNSEM.LOCAL.KEYS.KEY _outing_rel ].

:end :instance.


; <<>>

:begin :instance.

midsummer_n1 := intr_noun_word_le &
  [ STEM < "midsummer" >,
    SYNSEM.LOCAL.KEYS.KEY _midsummer_rel ].

:end :instance.


; <<>>

:begin :instance.

superstition_n1 := intr_noun_word_le &
  [ STEM < "superstition" >,
    SYNSEM.LOCAL.KEYS.KEY _superstition_rel ].

:end :instance.


; <<>>

:begin :instance.

slash_n1 := intr_noun_word_le &
  [ STEM < "slash" >,
    SYNSEM.LOCAL.KEYS.KEY _slash_n_rel ].

:end :instance.


; <<>>
; MULTIKEY < "concert" >

:begin :instance.

concert-goer_n1 := intr_noun_word_mle1 &
  [ STEM < "concert", "goer" >,
    SYNSEM.LOCAL.KEYS.KEY _concertgoer_rel ].

:end :instance.


; <<>>

:begin :instance.

concert-goer_n2 := intr_noun_word_le &
  [ STEM < "concertgoer" >,
    SYNSEM.LOCAL.KEYS.KEY _concertgoer_rel ].

:end :instance.


; <<>>
; MULTIKEY < "cinema" >

:begin :instance.

three_d_cinema := intr_noun_word_3mle3 &
  [ STEM < "three", "$d", "cinema" >,
    SYNSEM.LOCAL.KEYS.KEY _three_d_cinema_rel ].

:end :instance.

; <<>>
; MULTIKEY < "happening" >

:begin :instance.

happening_artist_n1 := intr_noun_word_mle1 &
  [ STEM < "happening", "artist" >,
    SYNSEM.LOCAL.KEYS.KEY _happening_artist_rel ].

:end :instance.


; <<>>
; MULTIKEY < "ad" >

:begin :instance.

ad_hoc_a1 := intrans_adj_mle &
  [ STEM < "ad", "hoc" >,
    SYNSEM.LOCAL.KEYS.KEY _ad_hoc_rel ].

:end :instance.


; <<>>

:begin :instance.

adjacent_a1 := intrans_adj_le &
  [ STEM < "adjacent" >,
    SYNSEM.LOCAL.KEYS.KEY _adjacent_rel ].

:end :instance.


; <<>>

:begin :instance.

advantageous_a1 := intrans_adj_le &
  [ STEM < "advantageous" >,
    SYNSEM.LOCAL.KEYS.KEY _advantageous_rel ].

:end :instance.


; <<>>

:begin :instance.

allergic_a1 := intrans_adj_le &
  [ STEM < "allergic" >,
    SYNSEM.LOCAL.KEYS.KEY _allergic_rel ].

:end :instance.


; <<>>

:begin :instance.

arduous_a1 := intrans_adj_le &
  [ STEM < "arduous" >,
    SYNSEM.LOCAL.KEYS.KEY _arduous_rel ].

:end :instance.


; <<>>

:begin :instance.

averse_a1 := intrans_adj_le &
  [ STEM < "averse" >,
    SYNSEM.LOCAL.KEYS.KEY _averse_rel ].

:end :instance.


; <<>>

:begin :instance.

binary_a1 := intrans_adj_le &
  [ STEM < "binary" >,
    SYNSEM.LOCAL.KEYS.KEY _binary_rel ].

:end :instance.


; <<>>
; MULTIKEY < "bleary" >

:begin :instance.

bleary_eyed_a1 := intrans_adj_mle &
  [ STEM < "bleary", "eyed" >,
    SYNSEM.LOCAL.KEYS.KEY _bleary_eyed_rel ].

:end :instance.


; <<>>

:begin :instance.

boiling_a1 := intrans_adj_le &
  [ STEM < "boiling" >,
    SYNSEM.LOCAL.KEYS.KEY _boiling_rel ].

:end :instance.


; <<>>

:begin :instance.

christmassy_a1 := intrans_adj_le &
  [ STEM < "christmassy" >,
    SYNSEM.LOCAL.KEYS.KEY _christmassy_rel ].

:end :instance.


; <<>>

:begin :instance.

chronological_a1 := intrans_adj_le &
  [ STEM < "chronological" >,
    SYNSEM.LOCAL.KEYS.KEY _chronological_rel ].

:end :instance.


; <<>>

:begin :instance.

clueless_a1 := intrans_adj_le &
  [ STEM < "clueless" >,
    SYNSEM.LOCAL.KEYS.KEY _clueless_rel ].

:end :instance.


; <<>>

:begin :instance.

communicative_a1 := intrans_adj_le &
  [ STEM < "communicative" >,
    SYNSEM.LOCAL.KEYS.KEY _communicative_rel ].

:end :instance.


; <<>>

:begin :instance.

conclusive_a1 := intrans_adj_le &
  [ STEM < "conclusive" >,
    SYNSEM.LOCAL.KEYS.KEY _conclusive_rel ].

:end :instance.


; <<>>

:begin :instance.

confined_a1 := intrans_adj_le &
  [ STEM < "confined" >,
    SYNSEM.LOCAL.KEYS.KEY _confined_rel ].

:end :instance.


; <<>>

:begin :instance.

congruent_a1 := intrans_adj_le &
  [ STEM < "congruent" >,
    SYNSEM.LOCAL.KEYS.KEY _congruent_rel ].

:end :instance.


; <<>>

:begin :instance.

connecting_a1 := intrans_adj_le &
  [ STEM < "connecting" >,
    SYNSEM.LOCAL.KEYS.KEY _connecting_rel ].

:end :instance.


; <<>>

:begin :instance.

convivial_a1 := intrans_adj_le &
  [ STEM < "convivial" >,
    SYNSEM.LOCAL.KEYS.KEY _convivial_rel ].

:end :instance.


; <<>>

:begin :instance.

cramped_a1 := intrans_adj_le &
  [ STEM < "cramped" >,
    SYNSEM.LOCAL.KEYS.KEY _cramped_rel ].

:end :instance.


; <<>>

:begin :instance.

darned_a1 := intrans_adj_le &
  [ STEM < "darned" >,
    SYNSEM.LOCAL.KEYS.KEY _darned_rel ].

:end :instance.


; <<>>

:begin :instance.

diverse_a1 := intrans_adj_le &
  [ STEM < "diverse" >,
    SYNSEM.LOCAL.KEYS.KEY _diverse_rel ].

:end :instance.


; <<>>

:begin :instance.

dizzy_a1 := intrans_adj_le &
  [ STEM < "dizzy" >,
    SYNSEM.LOCAL.KEYS.KEY _dizzy_rel ].

:end :instance.


; <<>>

:begin :instance.

eastern_a1 := intrans_adj_le &
  [ STEM < "eastern" >,
    SYNSEM.LOCAL.KEYS.KEY _eastern_rel ].

:end :instance.


; <<>>
; MULTIKEY < "eco" >

:begin :instance.

eco_friendly_a1 := intrans_adj_mle &
  [ STEM < "eco", "friendly" >,
    SYNSEM.LOCAL.KEYS.KEY eco_friendly ].

:end :instance.


; <<>>
; MULTIKEY < "germany" >

:begin :instance.

germany_internal_a1 := intrans_adj_mle &
  [ STEM < "germany", "internal" >,
    SYNSEM.LOCAL.KEYS.KEY _germany_internal_rel ].

:end :instance.


; <<>>

:begin :instance.

habitual_a1 := intrans_adj_le &
  [ STEM < "habitual" >,
    SYNSEM.LOCAL.KEYS.KEY _habitual_rel ].

:end :instance.


; <<>>

:begin :instance.

hairy_a1 := intrans_adj_le &
  [ STEM < "hairy" >,
    SYNSEM.LOCAL.KEYS.KEY _hairy_rel ].

:end :instance.


; <<>>

:begin :instance.

hidden_a1 := intrans_adj_le &
  [ STEM < "hidden" >,
    SYNSEM.LOCAL.KEYS.KEY _hidden_rel ].

:end :instance.


; <<>>

:begin :instance.

homebound_a1 := intrans_adj_le &
  [ STEM < "homebound" >,
    SYNSEM.LOCAL.KEYS.KEY _homebound_rel ].

:end :instance.


; <<>>

:begin :instance.

hopping_a1 := intrans_adj_le &
  [ STEM < "hopping" >,
    SYNSEM.LOCAL.KEYS.KEY _hopping_rel ].

:end :instance.


; <<>>

:begin :instance.

humanitarian_a1 := intrans_adj_le &
  [ STEM < "humanitarian" >,
    SYNSEM.LOCAL.KEYS.KEY _humanitarian_rel ].

:end :instance.


; <<>>

:begin :instance.

hydrophobic_a1 := intrans_adj_le &
  [ STEM < "hydrophobic" >,
    SYNSEM.LOCAL.KEYS.KEY _hydrophobic_rel ].

:end :instance.


; <<>>

:begin :instance.

indiscreet_a1 := intrans_adj_le &
  [ STEM < "indiscreet" >,
    SYNSEM.LOCAL.KEYS.KEY _indiscreet_rel ].

:end :instance.


; <<>>

:begin :instance.

internal_a1 := intrans_adj_le &
  [ STEM < "internal" >,
    SYNSEM.LOCAL.KEYS.KEY _internal_rel ].

:end :instance.


; <<>>

:begin :instance.

manageable_a1 := intrans_adj_le &
  [ STEM < "manageable" >,
    SYNSEM.LOCAL.KEYS.KEY _manageable_rel ].

:end :instance.


; <<>>

:begin :instance.

mobile_a1 := intrans_adj_le &
  [ STEM < "mobile" >,
    SYNSEM.LOCAL.KEYS.KEY _mobile_isect_rel ].

:end :instance.


; <<>>

:begin :instance.

moderate_a1 := intrans_adj_le &
  [ STEM < "moderate" >,
    SYNSEM.LOCAL.KEYS.KEY _moderate_adj_rel ].

:end :instance.


; <<>>

:begin :instance.

movable_a1 := intrans_adj_le &
  [ STEM < "movable" >,
    SYNSEM.LOCAL.KEYS.KEY _movable_rel ].

:end :instance.


; <<>>

:begin :instance.

negotiatable_a1 := intrans_adj_le &
  [ STEM < "negotiatable" >,
    SYNSEM.LOCAL.KEYS.KEY _negotiable_rel ].

:end :instance.


; <<>>

:begin :instance.

negotiable_a1 := intrans_adj_le &
  [ STEM < "negotiable" >,
    SYNSEM.LOCAL.KEYS.KEY _negotiable_rel ].

:end :instance.


; <<>>

:begin :instance.

numerous_a1 := intrans_adj_le &
  [ STEM < "numerous" >,
    SYNSEM.LOCAL.KEYS.KEY _numerous_rel ].

:end :instance.


; <<>>

:begin :instance.

obsessed_a1 := intrans_adj_le &
  [ STEM < "obsessed" >,
    SYNSEM.LOCAL.KEYS.KEY _obsessed_rel ].

:end :instance.


; <<>>

:begin :instance.

operative_a1 := intrans_adj_le &
  [ STEM < "operative" >,
    SYNSEM.LOCAL.KEYS.KEY _operative_rel ].

:end :instance.


; <<>>

:begin :instance.

passable_a1 := intrans_adj_le &
  [ STEM < "passable" >,
    SYNSEM.LOCAL.KEYS.KEY _passable_rel ].

:end :instance.


; <<>>

:begin :instance.

peeved_a1 := intrans_adj_le &
  [ STEM < "peeved" >,
    SYNSEM.LOCAL.KEYS.KEY _peeved_rel ].

:end :instance.


; <<>>
; MULTIKEY < "performance" >

:begin :instance.

performance_oriented_a1 := intrans_adj_mle &
  [ STEM < "performance", "oriented" >,
    SYNSEM.LOCAL.KEYS.KEY _performance_oriented_rel ].

:end :instance.


; <<>>

:begin :instance.

photographic_a1 := intrans_adj_le &
  [ STEM < "photographic" >,
    SYNSEM.LOCAL.KEYS.KEY _photographic_rel ].

:end :instance.


; <<>>

:begin :instance.

pliable_a1 := intrans_adj_le &
  [ STEM < "pliable" >,
    SYNSEM.LOCAL.KEYS.KEY _pliable_rel ].

:end :instance.


; <<>>

:begin :instance.

preventive_a1 := intrans_adj_le &
  [ STEM < "preventive" >,
    SYNSEM.LOCAL.KEYS.KEY _preventive_rel ].

:end :instance.


; <<>>

:begin :instance.

scientific_a1 := intrans_adj_le &
  [ STEM < "scientific" >,
    SYNSEM.LOCAL.KEYS.KEY _scientific_rel ].

:end :instance.


; <<>>
; MULTIKEY < "second" >

:begin :instance.

second_mentioned_a1 := intrans_adj_mle &
  [ STEM < "second", "mentioned" >,
    SYNSEM.LOCAL.KEYS.KEY _second_mentioned_rel ].

:end :instance.


; <<>>

:begin :instance.

sensitive_a1 := trans_adj_le &
  [ STEM < "sensitive" >,
    SYNSEM.LOCAL.KEYS [ KEY _sensitive_to_rel,
			--COMPKEY _to_rel_s ] ].
:end :instance.


; <<>>

:begin :instance.

showy_a1 := intrans_adj_le &
  [ STEM < "showy" >,
    SYNSEM.LOCAL.KEYS.KEY _showy_rel ].

:end :instance.


; <<>>

:begin :instance.

speechless_a1 := intrans_adj_le &
  [ STEM < "speechless" >,
    SYNSEM.LOCAL.KEYS.KEY _speechless_rel ].

:end :instance.


; <<>>

:begin :instance.

stuffy_a1 := intrans_adj_le &
  [ STEM < "stuffy" >,
    SYNSEM.LOCAL.KEYS.KEY _stuffy_rel ].

:end :instance.


; <<>>

:begin :instance.

suburbian_a1 := intrans_adj_le &
  [ STEM < "suburbian" >,
    SYNSEM.LOCAL.KEYS.KEY _suburbian_isect_rel ].

:end :instance.


; <<>>

:begin :instance.

superficial_a1 := intrans_adj_le &
  [ STEM < "superficial" >,
    SYNSEM.LOCAL.KEYS.KEY _superficial_rel ].

:end :instance.


; <<>>

:begin :instance.

thin_a1 := intrans_adj_le &
  [ STEM < "thin" >,
    SYNSEM.LOCAL.KEYS.KEY _thin_rel ].

:end :instance.


; <<>>

:begin :instance.

touristic_a1 := intrans_adj_le &
  [ STEM < "touristic" >,
    SYNSEM.LOCAL.KEYS.KEY _touristic_rel ].

:end :instance.


; <<>>

:begin :instance.

treasured_a1 := intrans_adj_le &
  [ STEM < "treasured" >,
    SYNSEM.LOCAL.KEYS.KEY _treasured_rel ].

:end :instance.


; <<>>
; MULTIKEY < "tuckered" >

:begin :instance.

tuckered_out_a1 := intrans_adj_mle &
  [ STEM < "tuckered", "out" >,
    SYNSEM.LOCAL.KEYS.KEY _tuckered_out_rel ].

:end :instance.


; <<>>

:begin :instance.

turning_a1 := intrans_adj_le &
  [ STEM < "turning" >,
    SYNSEM.LOCAL.KEYS.KEY _turning_rel ].

:end :instance.


; <<>>

:begin :instance.

dining_a1 := intrans_adj_le &
  [ STEM < "dining" >,
    SYNSEM.LOCAL.KEYS.KEY _dining_rel ].

:end :instance.


; <<>>

:begin :instance.

alternating_a1 := intrans_adj_le &
  [ STEM < "alternating" >,
    SYNSEM.LOCAL.KEYS.KEY _alternating_rel ].

:end :instance.


; <<>>

:begin :instance.

apropos_a1 := intrans_adj_le &
  [ STEM < "apropos" >,
    SYNSEM.LOCAL.KEYS.KEY _apropos_rel ].

:end :instance.


; <<>>

:begin :instance.

unchristian_a1 := intrans_adj_le &
  [ STEM < "unchristian" >,
    SYNSEM.LOCAL.KEYS.KEY _unchristian_rel ].

:end :instance.


; <<>>

:begin :instance.

unconcentrated_a1 := intrans_adj_le &
  [ STEM < "unconcentrated" >,
    SYNSEM.LOCAL.KEYS.KEY _unconcentrated_rel ].

:end :instance.


; <<>>

:begin :instance.

understandable_a1 := intrans_adj_le &
  [ STEM < "understandable" >,
    SYNSEM.LOCAL.KEYS.KEY _understandable_rel ].

:end :instance.


; <<>>

:begin :instance.

unlimited_a1 := intrans_adj_le &
  [ STEM < "unlimited" >,
    SYNSEM.LOCAL.KEYS.KEY _unlimited_rel ].

:end :instance.


; <<>>

:begin :instance.

violet_a1 := intrans_adj_le &
  [ STEM < "violet" >,
    SYNSEM.LOCAL.KEYS.KEY _violet_rel ].

:end :instance.


; <<>>

:begin :instance.

worth := irreg_np_trans_adj_le &
  [ STEM < "worth" >,
    SYNSEM.LOCAL.KEYS.KEY _worth_rel ].

:end :instance.


; <<>>

:begin :instance.

back_out_of_v1 := mv_particle_pp_le &
  [ STEM < "back" >,
    SYNSEM.LOCAL.KEYS [ KEY _back_out_rel,
			--COMPKEY _out_rel_s,
			--OCOMPKEY _of_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

bring_down_v1 := mv_particle_np_le &
  [ STEM < "bring" >,
    SYNSEM.LOCAL.KEYS [ KEY bring_down,
			--COMPKEY _down_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

crisp_up_v1 := mv_particle_np_le &
  [ STEM < "crisp" >,
    SYNSEM.LOCAL.KEYS [ KEY _crisp_up_rel,
			--COMPKEY _up_rel ] ].

:end :instance.


; <<>>

:begin :instance.

drag_out_v1 := mv_particle_np_le &
  [ STEM < "drag" >,
    SYNSEM.LOCAL.KEYS [ KEY _drag_out_rel,
			--COMPKEY _out_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

fritter_away_v1 := mv_particle_np_le &
  [ STEM < "fritter" >,
    SYNSEM.LOCAL.KEYS [ KEY _fritter_away_rel,
			--COMPKEY _away_adv_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

hand_over_v1 := mv_particle_np_le &
  [ STEM < "hand" >,
    SYNSEM.LOCAL.KEYS [ KEY _hand_over_rel,
			--COMPKEY _over_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

iron_out_v1 := mv_particle_np_le &
  [ STEM < "iron" >,
    SYNSEM.LOCAL.KEYS [ KEY _iron_out_rel,
			--COMPKEY _out_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

knock_out_v1 := mv_particle_np_le &
  [ STEM < "knock" >,
    SYNSEM.LOCAL.KEYS [ KEY _knock_out_rel,
			--COMPKEY _out_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

rough_out_v1 := mv_particle_np_le &
  [ STEM < "rough" >,
    SYNSEM.LOCAL.KEYS [ KEY _rough_out_rel,
			--COMPKEY _out_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

round_off_v1 := mv_particle_np_le &
  [ STEM < "round" >,
    SYNSEM.LOCAL.KEYS [ KEY _round_off_rel,
			--COMPKEY _off_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

run_around_v1 := mv_particle_le &
  [ STEM < "run" >,
    SYNSEM.LOCAL.KEYS [ KEY _run_around_rel,
			    --COMPKEY _around_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

rust_in_v1 := mv_particle_le &
  [ STEM < "rust" >,
    SYNSEM.LOCAL.KEYS [ KEY _rust_in_rel,
			    --COMPKEY _in_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

tangle_up_v1 := mv_particle_np_le &
  [ STEM < "tangle" >,
    SYNSEM.LOCAL.KEYS [ KEY _tangle_up_rel,
			--COMPKEY _up_rel ] ].

:end :instance.


; <<>>

:begin :instance.

throw_in_v1 := mv_particle_np_le &
  [ STEM < "throw" >,
    SYNSEM.LOCAL.KEYS [ KEY _throw_in_rel,
			--COMPKEY _in_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

tick_off_v1 := mv_particle_np_le &
  [ STEM < "tick" >,
    SYNSEM.LOCAL.KEYS [ KEY _tick_off_rel,
			--COMPKEY _off_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

wear_out_v1 := mv_particle_np_le &
  [ STEM < "wear" >,
    SYNSEM.LOCAL.KEYS [ KEY _wear_out_rel,
			--COMPKEY _out_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

adjourn_v1 := mv_np_trans_le &
  [ STEM < "adjourn" >,
    SYNSEM.LOCAL.KEYS.KEY _adjourn_rel ].

:end :instance.


; <<>>

:begin :instance.

admire_v1 := mv_np_trans_le &
  [ STEM < "admire" >,
    SYNSEM.LOCAL.KEYS.KEY _admire_rel ].

:end :instance.


; <<>>

:begin :instance.

bewitch_v1 := mv_np_trans_le &
  [ STEM < "bewitch" >,
    SYNSEM.LOCAL.KEYS.KEY _bewitch_rel ].

:end :instance.


; <<>>

:begin :instance.

brew_v1 := mv_np_trans_le &
  [ STEM < "brew" >,
    SYNSEM.LOCAL.KEYS.KEY _brew_rel ].

:end :instance.


; <<>>

:begin :instance.

bridle_v1 := mv_empty_prep_intrans_le &
  [ STEM < "bridle" >,
    SYNSEM.LOCAL.KEYS [ KEY _bridle_at_rel,
			--COMPKEY _at_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

compress_v1 := mv_np_trans_le &
  [ STEM < "compress" >,
    SYNSEM.LOCAL.KEYS.KEY _compress_rel ].

:end :instance.


; <<>>

:begin :instance.

contribute_v1 := mv_np_trans_le &
  [ STEM < "contribute" >,
    SYNSEM.LOCAL.KEYS.KEY _contribute_rel ].

:end :instance.


; <<>>

:begin :instance.

deepen_v1 := mv_np_trans_le &
  [ STEM < "deepen" >,
    SYNSEM.LOCAL.KEYS.KEY _deepen_rel ].

:end :instance.


; <<>>

:begin :instance.

delete_v1 := mv_np_trans_le &
  [ STEM < "delete" >,
    SYNSEM.LOCAL.KEYS.KEY _delete_rel ].

:end :instance.


; <<>>

:begin :instance.

delight_v1 := mv_np_trans_le &
  [ STEM < "delight" >,
    SYNSEM.LOCAL.KEYS.KEY _delight_v_rel ].

:end :instance.


; <<>>

:begin :instance.

deliver_v1 := mv_np_trans_le &
  [ STEM < "deliver" >,
    SYNSEM.LOCAL.KEYS.KEY _deliver_rel ].

:end :instance.


; <<>>

:begin :instance.

disrupt_v1 := mv_np_trans_le &
  [ STEM < "disrupt" >,
    SYNSEM.LOCAL.KEYS.KEY _disrupt_rel ].

:end :instance.


; <<>>

:begin :instance.

flabbergast_v1 := mv_np_trans_le &
  [ STEM < "flabbergast" >,
    SYNSEM.LOCAL.KEYS.KEY _flabbergast_rel ].

:end :instance.


; <<>>

:begin :instance.

insert_v1 := mv_np_trans_le &
  [ STEM < "insert" >,
    SYNSEM.LOCAL.KEYS.KEY _insert_rel ].

:end :instance.


; <<>>

:begin :instance.

inspire_v1 := mv_np_trans_le &
  [ STEM < "inspire" >,
    SYNSEM.LOCAL.KEYS.KEY _inspire_rel ].

:end :instance.


; <<>>

:begin :instance.

integrate_v1 := mv_np_trans_le &
  [ STEM < "integrate" >,
    SYNSEM.LOCAL.KEYS.KEY _integrate_rel ].

:end :instance.


; <<>>

:begin :instance.

remark_v1 := mv_cp_prop*_non_trans_le &
  [ STEM < "remark" >,
    SYNSEM.LOCAL.KEYS.KEY _remark_v_rel ].

:end :instance.


; <<>>

:begin :instance.

scour_v1 := mv_np_trans_le &
  [ STEM < "scour" >,
    SYNSEM.LOCAL.KEYS.KEY _scour_rel ].

:end :instance.


; <<>>

:begin :instance.

shock_v1 := mv_np_trans_le &
  [ STEM < "shock" >,
    SYNSEM.LOCAL.KEYS.KEY _shock_v_rel ].

:end :instance.


; <<>>

:begin :instance.

squash_v1 := mv_np_trans_le &
  [ STEM < "squash" >,
    SYNSEM.LOCAL.KEYS.KEY _squash_rel ].

:end :instance.


; <<>>

:begin :instance.

steal_v1 := mv_np_trans_le &
  [ STEM < "steal" >,
    SYNSEM.LOCAL.KEYS.KEY _steal_rel ].

:end :instance.


; <<>>

:begin :instance.

survey_v1 := mv_np_trans_le &
  [ STEM < "survey" >,
    SYNSEM.LOCAL.KEYS.KEY _survey_v_rel ].

:end :instance.


; <<>>

:begin :instance.

swallow_v1 := mv_np*_trans_le &
  [ STEM < "swallow" >,
    SYNSEM.LOCAL.KEYS.KEY _swallow_v_rel ].

:end :instance.


; <<>>

:begin :instance.

tax_v1 := mv_np_trans_le &
  [ STEM < "tax" >,
    SYNSEM.LOCAL.KEYS.KEY _tax_rel ].

:end :instance.


; <<>>

:begin :instance.

whisper_v1 := mv_np_trans_le &
  [ STEM < "whisper" >,
    SYNSEM.LOCAL.KEYS.KEY _whisper_v_rel ].

:end :instance.


; <<>>

:begin :instance.

vary_v1 := mv_np_trans_le &
  [ STEM < "vary" >,
    SYNSEM.LOCAL.KEYS.KEY _vary_rel ].

:end :instance.


; <<>>

:begin :instance.

confer_v1 := mv_unerg_le &
  [ STEM < "confer" >,
    SYNSEM.LOCAL.KEYS.KEY _confer_rel ].

:end :instance.


; <<>>

:begin :instance.

dive_v1 := mv_unerg_le &
  [ STEM < "dive" >,
    SYNSEM.LOCAL.KEYS.KEY _dive_rel ].

:end :instance.


; <<>>

:begin :instance.

grumble_v1 := mv_unerg_le &
  [ STEM < "grumble" >,
    SYNSEM.LOCAL.KEYS.KEY _grumble_rel ].

:end :instance.


; <<>>

:begin :instance.

jut_v1 := mv_unerg_le &
  [ STEM < "jut" >,
    SYNSEM.LOCAL.KEYS.KEY _jut_rel ].

:end :instance.


; <<>>

:begin :instance.

leap_over_v1 := mv_empty_prep_intrans_le &
  [ STEM < "leap" >,
    SYNSEM.LOCAL.KEYS [ KEY _leap_over_rel,
			--COMPKEY _over_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

mature_v1 := mv_unerg_le &
  [ STEM < "mature" >,
    SYNSEM.LOCAL.KEYS.KEY _mature_v_rel ].

:end :instance.


; <<>>

:begin :instance.

moan_v1 := mv_unerg_le &
  [ STEM < "moan" >,
    SYNSEM.LOCAL.KEYS.KEY _moan_rel ].

:end :instance.


; <<>>

:begin :instance.

administratively_adv1 := int_vp_adv_post_word_le &
  [ STEM < "administratively" >,
    SYNSEM.LOCAL.KEYS.KEY _administratively_rel ].

:end :instance.


; <<>>

:begin :instance.

admittedly_adv1 := int_vp_adv_post_word_le &
  [ STEM < "admittedly" >,
    SYNSEM.LOCAL.KEYS.KEY _admittedly_rel ].

:end :instance.


; <<>>

:begin :instance.

advantageously_adv1 := int_vp_adv_post_word_le &
  [ STEM < "advantageously" >,
    SYNSEM.LOCAL.KEYS.KEY _advantageously_rel ].

:end :instance.


; <<>>

:begin :instance.

deliciously_adv1 := int_vp_adv_post_word_le &
  [ STEM < "deliciously" >,
    SYNSEM.LOCAL.KEYS.KEY _deliciously_rel ].

:end :instance.


; <<>>

:begin :instance.

delightfully_adv1 := int_vp_adv_post_word_le &
  [ STEM < "delightfully" >,
    SYNSEM.LOCAL.KEYS.KEY _delightfully_rel ].

:end :instance.


; <<>>

:begin :instance.

distinctly_adv1 := int_vp_adv_post_word_le &
  [ STEM < "distinctly" >,
    SYNSEM.LOCAL.KEYS.KEY _distinctly_rel ].

:end :instance.


; <<>>

:begin :instance.

famously_adv1 := int_vp_adv_post_word_le &
  [ STEM < "famously" >,
    SYNSEM.LOCAL.KEYS.KEY _famously_rel ].

:end :instance.


; <<>>

:begin :instance.

indiscreetly_adv1 := int_vp_adv_post_word_le &
  [ STEM < "indiscreetly" >,
    SYNSEM.LOCAL.KEYS.KEY _indiscreetly_rel ].

:end :instance.


; <<>>

:begin :instance.

internally_adv1 := int_vp_adv_post_word_le &
  [ STEM < "internally" >,
    SYNSEM.LOCAL.KEYS.KEY _internally_rel ].

:end :instance.


; <<>>

:begin :instance.

intolerably_adv1 := int_vp_adv_post_word_le &
  [ STEM < "intolerably" >,
    SYNSEM.LOCAL.KEYS.KEY _intolerably_rel ].

:end :instance.


; <<>>

:begin :instance.

manageably_adv1 := int_vp_adv_post_word_le &
  [ STEM < "manageably" >,
    SYNSEM.LOCAL.KEYS.KEY _manageably_rel ].

:end :instance.


; <<>>

:begin :instance.

pessimistically_adv1 := int_vp_adv_post_word_le &
  [ STEM < "pessimistically" >,
    SYNSEM.LOCAL.KEYS.KEY _pessimistically_rel ].

:end :instance.


; <<>>

:begin :instance.

receptively_adv1 := int_vp_adv_post_word_le &
  [ STEM < "receptively" >,
    SYNSEM.LOCAL.KEYS.KEY _receptively_rel ].

:end :instance.


; <<>>

:begin :instance.

scientifically_adv1 := int_vp_adv_post_word_le &
  [ STEM < "scientifically" >,
    SYNSEM.LOCAL.KEYS.KEY _scientifically_rel ].

:end :instance.


; <<>>

:begin :instance.

sensitively_adv1 := int_vp_adv_post_word_le &
  [ STEM < "sensitively" >,
    SYNSEM.LOCAL.KEYS.KEY _sensitively_rel ].

:end :instance.


; <<>>

:begin :instance.

sonorously_adv1 := int_vp_adv_post_word_le &
  [ STEM < "sonorously" >,
    SYNSEM.LOCAL.KEYS.KEY _sonorously_rel ].

:end :instance.


; <<>>

:begin :instance.

subsequently_adv1 := int_vp_adv_post_word_le &
  [ STEM < "subsequently" >,
    SYNSEM.LOCAL.KEYS.KEY _subsequently_rel ].

:end :instance.


; <<>>

:begin :instance.

superficially_adv1 := int_vp_adv_post_word_le &
  [ STEM < "superficially" >,
    SYNSEM.LOCAL.KEYS.KEY _superficially_rel ].

:end :instance.


; <<>>

:begin :instance.

unbelievably_adv := s_adv_pre_word_le &
  [ STEM < "unbelievably" >,
    SYNSEM.LOCAL.KEYS.KEY _unbelievably_rel ].

:end :instance.


; <<>>
; MULTIKEY < "gum" >

:begin :instance.

by_gum_root := disc_adv_mle2 &
  [ STEM < "by", "gum" >,
    SYNSEM.LOCAL.KEYS.KEY excl_rel & [ EXCL 'by_gum ] ].

:end :instance.


; <<>>

:begin :instance.

sixtieth := ordinal_adj_le &
  [ STEM < "sixtieth" >,
    SYNSEM.LOCAL.KEYS.KEY.ORD "60" ].

:end :instance.


; <<>>

:begin :instance.

seventieth := ordinal_adj_le &
  [ STEM < "seventieth" >,
    SYNSEM.LOCAL.KEYS.KEY.ORD "70" ].

:end :instance.


; <<>>

:begin :instance.

ninetieth := ordinal_adj_le &
  [ STEM < "ninetieth" >,
    SYNSEM.LOCAL.KEYS.KEY.ORD "90" ].

:end :instance.


; <<>>
; MULTIKEY < "dream" >

:begin :instance.

day_dream_v1 := mv_unerg_mle2 &
  [ STEM < "day", "dream" >,
    SYNSEM.LOCAL.KEYS.KEY _day_dream_rel ].

:end :instance.


; <<>>
; MULTIKEY < "check" >

:begin :instance.

double_check_v1 := mv_unerg_mle2 &
  [ STEM < "double", "check" >,
    SYNSEM.LOCAL.KEYS.KEY _double_check_v_rel ].

:end :instance.


; <<>>
; MULTIKEY < "flop" >

:begin :instance.

flip_flop_v1 := mv_unerg_mle2 &
  [ STEM < "flip", "flop" >,
    SYNSEM.LOCAL.KEYS.KEY _flip_flop_v_rel ].

:end :instance.


; <<>>
; MULTIKEY < "ski" >

:begin :instance.

water_ski_v1 := mv_unerg_mle2 &
  [ STEM < "water", "ski" >,
    SYNSEM.LOCAL.KEYS.KEY _water_ski_v_rel ].

:end :instance.


;; <<>>

:begin :instance.

twentyish_approx := approx_bare_unspecified_card_le & 
  [  STEM < "twentyish" >,
     SYNSEM.LOCAL [ CAT.HEAD intadj2,
		    KEYS.KEY.CONST_VALUE "20" ] ].
:end :instance.


;; <<>>

:begin :instance.

thirtyish_approx := approx_bare_unspecified_card_le & 
  [  STEM < "thirtyish" >,
     SYNSEM.LOCAL [ CAT.HEAD intadj2,
		    KEYS.KEY.CONST_VALUE "30" ] ].
:end :instance.


;; <<>>

:begin :instance.

fortyish_approx := approx_bare_unspecified_card_le & 
  [  STEM < "fortyish" >,
     SYNSEM.LOCAL [ CAT.HEAD intadj2,
		    KEYS.KEY.CONST_VALUE "40" ] ].
:end :instance.


;; <<>>

:begin :instance.

fiftyish_approx := approx_bare_unspecified_card_le & 
  [  STEM < "fiftyish" >,
     SYNSEM.LOCAL [ CAT.HEAD intadj2,
		    KEYS.KEY.CONST_VALUE "50" ] ].
:end :instance.


;; <<>>

:begin :instance.

sixtyish_approx := approx_bare_unspecified_card_le & 
  [  STEM < "sixtyish" >,
     SYNSEM.LOCAL [ CAT.HEAD intadj2,
		    KEYS.KEY.CONST_VALUE "60" ] ].
:end :instance.


;; <<>>

:begin :instance.

seventyish_approx := approx_bare_unspecified_card_le & 
  [  STEM < "seventyish" >,
     SYNSEM.LOCAL [ CAT.HEAD intadj2,
		    KEYS.KEY.CONST_VALUE "70" ] ].
:end :instance.


;; <<>>

:begin :instance.

eightyish_approx := approx_bare_unspecified_card_le & 
  [  STEM < "eightyish" >,
     SYNSEM.LOCAL [ CAT.HEAD intadj2,
		    KEYS.KEY.CONST_VALUE "80" ] ].
:end :instance.


;; <<>>

:begin :instance.

ninetyish_approx := approx_bare_unspecified_card_le & 
  [  STEM < "ninetyish" >,
     SYNSEM.LOCAL [ CAT.HEAD intadj2,
		    KEYS.KEY.CONST_VALUE "90" ] ].
:end :instance.


; <<>>
; MULTIKEY < "had" >

:begin :instance.

had_better_aux := modal_pos_mle & 
  [ STEM < "had", "better" >,
    SYNSEM.LOCAL [ CAT.HEAD.TENSE present*,
		   KEYS.KEY _had_better_rel ] ].
:end :instance.


; <<>>
; MULTIKEY < "d" >

:begin :instance.

had_better_cx := modal_pos_cx_mle &
  [ STEM < "d", "better" >,
    SYNSEM.LOCAL.KEYS.KEY _had_better_rel ].

:end :instance.


; <<>>

:begin :instance.

better_aux := modal_pos_le & 
  [ STEM < "better" >,
    SYNSEM.LOCAL [ CAT.HEAD [ TENSE present*,
			      INV - ],
		   KEYS.KEY _had_better_rel ] ].

:end :instance.


; <<>>

:begin :instance.

secondly_adv1 := s_adv_pre_word_le &
  [ STEM < "secondly" >,
    SYNSEM.LOCAL.KEYS.KEY _secondly_rel ].

:end :instance.


; <<>>

:begin :instance.

thirdly_adv1 := s_adv_pre_word_le &
  [ STEM < "thirdly" >,
    SYNSEM.LOCAL.KEYS.KEY _thirdly_rel ].

:end :instance.


; <<>>

:begin :instance.

depending_a1 := trans_adj_le &
  [ STEM < "depending" >,
    SYNSEM.LOCAL.KEYS [ KEY _depending_rel,
			--COMPKEY _on_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

act_n1 := intr_noun_word_le &
  [ STEM < "act" >,
    SYNSEM.LOCAL.KEYS.KEY _act_n_rel ].

:end :instance.

; <<>>

:begin :instance.

along_a1 := pred_intrans_adj_le &
  [ STEM < "along" >,
    SYNSEM.LOCAL.KEYS.KEY _along_isect_rel ].

:end :instance.


; <<>>

:begin :instance.

care_about_v1 := mv_empty_prep_intrans_le &
  [ STEM < "care" >,
    SYNSEM.LOCAL.KEYS [ KEY _care_about_rel,
			--COMPKEY _about_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

charm_v1 := mv_np_trans_le &
  [ STEM < "charm" >,
    SYNSEM.LOCAL.KEYS.KEY _charm_v_rel ].

:end :instance.


; <<>>

:begin :instance.

chip_n1 := intr_noun_word_le &
  [ STEM < "chip" >,
    SYNSEM.LOCAL.KEYS.KEY _chip_n_rel ].

:end :instance.


; <<>>

:begin :instance.

clear_v1 := mv_np_trans_le &
  [ STEM < "clear" >,
    SYNSEM.LOCAL.KEYS.KEY _clear_v_rel ].

:end :instance.


; <<>>

:begin :instance.

closely_deg := degree_spec_le &
  [ STEM < "closely" >,
    SYNSEM.LOCAL.KEYS.KEY _close_grad_rel ].

:end :instance.


; <<>>

:begin :instance.

content_v1 := mv_empty_prep_trans_le &
  [ STEM < "content" >,
    SYNSEM.LOCAL.KEYS [ KEY _content_refl_with_rel,
			--OCOMPKEY _with_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

copy_n1 := intr_noun_word_le &
  [ STEM < "copy" >,
    SYNSEM.LOCAL.KEYS.KEY _copy_n_rel ].

:end :instance.


; <<>>

:begin :instance.

drag_v1 := mv_np_trans_le &
  [ STEM < "drag" >,
    SYNSEM.LOCAL.KEYS.KEY _drag_rel ].

:end :instance.


; <<>>

:begin :instance.

draw_v1 := mv_np_trans_le &
  [ STEM < "draw" >,
    SYNSEM.LOCAL.KEYS.KEY _draw_rel ].

:end :instance.


; <<>>

:begin :instance.

east_a1 := trans_adj_le &
  [ STEM < "east" >,
    SYNSEM.LOCAL.KEYS [ KEY _east_isect_rel,
			--COMPKEY _of_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

north_a1 := trans_adj_le &
  [ STEM < "north" >,
    SYNSEM.LOCAL.KEYS [ KEY _north_isect_rel,
			--COMPKEY _of_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

south_a1 := trans_adj_le &
  [ STEM < "south" >,
    SYNSEM.LOCAL.KEYS [ KEY _south_isect_rel,
			--COMPKEY _of_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

west_a1 := trans_adj_le &
  [ STEM < "west" >,
    SYNSEM.LOCAL.KEYS [ KEY _west_isect_rel,
			--COMPKEY _of_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

exemplary_a1 := intrans_adj_le &
  [ STEM < "exemplary" >,
    SYNSEM.LOCAL.KEYS.KEY _exemplary_rel ].

:end :instance.


; <<>>

:begin :instance.

extra_n1 := intr_noun_word_le &
  [ STEM < "extra" >,
    SYNSEM.LOCAL.KEYS.KEY _extra_n_rel ].

:end :instance.


; <<>>

:begin :instance.

feel_like_v1 := mv_prep_intrans_le &
  [ STEM < "feel" >,
    SYNSEM.LOCAL.KEYS [ KEY _feel_like_rel,
			--COMPKEY _like_prepx_rel ] ].

:end :instance.


; <<>>

:begin :instance.

frame_v1 := mv_np_trans_le &
  [ STEM < "frame" >,
    SYNSEM.LOCAL.KEYS.KEY _frame_v_rel ].

:end :instance.


; <<>>

:begin :instance.

gain_n1 := intr_noun_word_le &
  [ STEM < "gain" >,
    SYNSEM.LOCAL.KEYS.KEY _gain_n_rel ].

:end :instance.


; <<>>

:begin :instance.

get_into_v1 := mv_empty_prep_intrans_le &
  [ STEM < "get" >,
    SYNSEM.LOCAL.KEYS [ KEY _get_into_rel,
			--COMPKEY _into_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

guess_n1 := intr_noun_word_le &
  [ STEM < "guess" >,
    SYNSEM.LOCAL.KEYS.KEY _guess_n_rel ].

:end :instance.


; <<>>
; MULTIKEY < "in" >

:begin :instance.

in_fact_adv1 := adv_word_mle1 &
  [ STEM < "in", "fact" >,
    SYNSEM.LOCAL.KEYS.KEY _in_fact_rel ].

:end :instance.


; <<>>
; MULTIKEY < "fact" >

:begin :instance.

in_fact_adv2 := s_adv_word_mle2 &
  [ STEM < "in", "fact" >,
    SYNSEM.LOCAL.KEYS.KEY _in_fact_rel ].

:end :instance.


; <<>>

:begin :instance.

inside_n1 := intr_noun_word_le &
  [ STEM < "inside" >,
    SYNSEM.LOCAL.KEYS.KEY inside_n ].

:end :instance.


; <<>>

:begin :instance.

lag_behind_v2 := mv_particle_le &
  [ STEM < "lag" >,
    SYNSEM.LOCAL.KEYS [ KEY _lag_behind_rel,
			    --COMPKEY _behind_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

mess_v1 := mv_empty_prep_intrans_le &
  [ STEM < "mess" >,
    SYNSEM.LOCAL.KEYS [ KEY _mess_with_rel,
			--COMPKEY _with_rel_s ] ].

:end :instance.


; <<>>

:begin :instance.

mobile_n1 := intr_noun_word_le &
  [ STEM < "mobile" >,
    SYNSEM.LOCAL.KEYS.KEY _mobile_rel ].

:end :instance.


; <<>>
; MULTIKEY < "non" >

:begin :instance.

non_local_n1 := intr_noun_word_mle1 &
  [ STEM < "non", "local" >,
    SYNSEM.LOCAL.KEYS.KEY _non_local_n_rel ].

:end :instance.


; <<>>

:begin :instance.

number_v1 := mv_np_trans_le &
  [ STEM < "number" >,
    SYNSEM.LOCAL.KEYS.KEY _number_v_rel ].

:end :instance.


; <<>>

:begin :instance.

overlap_n1 := intr_noun_word_le &
  [ STEM < "overlap" >,
    SYNSEM.LOCAL.KEYS.KEY _overlap_n_rel ].

:end :instance.


; <<>>

:begin :instance.

place_v1 := mv_prep_trans_le &
  [ STEM < "place" >,
    SYNSEM.LOCAL.KEYS [ KEY _place_v_rel,
			--OCOMPKEY dir_rel ] ].

:end :instance.


; <<>>

:begin :instance.

raise_n1 := intr_noun_word_le &
  [ STEM < "raise" >,
    SYNSEM.LOCAL.KEYS.KEY _raise_n_rel ].

:end :instance.


; <<>>

:begin :instance.

roughly_adv1 := int_vp_adv_post_word_le &
  [ STEM < "roughly" >,
    SYNSEM.LOCAL.KEYS.KEY _roughly_adv_rel ].

:end :instance.


; <<>>

:begin :instance.

sail_n1 := intr_noun_word_le &
  [ STEM < "sail" >,
    SYNSEM.LOCAL.KEYS.KEY _sail_n_rel ].

:end :instance.


; <<>>

:begin :instance.

same_n1 := intr_noun_word_le &
  [ STEM < "same" >,
    SYNSEM.LOCAL.KEYS.KEY _same_n_rel ].

:end :instance.


; <<>>

:begin :instance.

ski_n1 := intr_noun_word_le &
  [ STEM < "ski" >,
    SYNSEM.LOCAL.KEYS.KEY _ski_n_rel ].

:end :instance.


; <<>>

:begin :instance.

snow_v1 := mv_unerg_le &
  [ STEM < "snow" >,
    SYNSEM.LOCAL.KEYS.KEY _snow_v_rel ].

:end :instance.


; <<>>

:begin :instance.

tackle_n1 := intr_noun_word_le &
  [ STEM < "tackle" >,
    SYNSEM.LOCAL.KEYS.KEY _tackle_n_rel ].

:end :instance.


; <<>>

:begin :instance.

test_v1 := mv_np_trans_le &
  [ STEM < "test" >,
    SYNSEM.LOCAL.KEYS.KEY _test_v_rel ].

:end :instance.

; <<>>

:begin :instance.

unusually_adv1 := vp_adv_post_word_le &
  [ STEM < "unusually" >,
    SYNSEM.LOCAL.KEYS.KEY _unusually_rel ].

:end :instance.


; <<>>

:begin :instance.

up_a1 := intrans_adj_le &
  [ STEM < "up" >,
    SYNSEM.LOCAL.KEYS.KEY _up_adj_rel ].

:end :instance.


; <<>>

:begin :instance.

wedge_v1 := mv_np_trans_le &
  [ STEM < "wedge" >,
    SYNSEM.LOCAL.KEYS.KEY _wedge_v_rel ].

:end :instance.

; <<>>
