;;; -*- Mode: tdl; Coding: utf-8; -*-


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; application- or task-specific `accommodation' rules (aka hacks :-).  patch
;;; up the input token lattice as needed.  in principle, such rules should go
;;; into separate modules, once we provide a mechanism to selectively activate
;;; rules or sets of rules.
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; Experimental rules for speech input, which has not been pre-segmented to
;;; disconnect contracted forms like "I'm" or "that's"

apostrophe_speech_tmr := one_two_tmt &
[ +INPUT < [ +FORM ^([[:alpha:]]+)'(s|d|ve|ll|m|re)$, 
             +ONSET #onset, +PRED #pred, +CARG #carg ] >,
  +OUTPUT < [ +FORM "${I1:+FORM:1}",
              +ONSET #onset, +PRED #pred, +CARG #carg, 
	      +TNT [ +TAGS < "NN" >, +PRBS < "1.0" > ] ],
            [ +FORM "'${I1:+FORM:2}",
              +ONSET #onset, +PRED #pred, +CARG #carg, 
	      +TNT [ +TAGS < anti_string >,
		     +PRBS < "1.0" > ] ] > ].

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; Spelling patches for training data transcripts
;;;
sc_task_tmr := one_one_form_tmt &
[ +INPUT < [ +FORM ^tas$] >,
  +OUTPUT < [ +FORM "task" ] > ].
