;;; -*- Mode: TDL; Package: DISCO -*-
;;;
;;;  Copyright Daniel Flickinger 1994-1999
;;;  All Rights Reserved.
;;;  No use or redistribution without permission.
;;;
;;;  lextypes.tdl
;;;
;;;  Lexical types (i.e., word classes)
;;;
;;;  Rob Malouf, 3-Nov-1994
;;;
;;;  $Id$

;:message "Lexical types".



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; LEXICAL DEFAULTS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

nonslash := word &
  [ SYNSEM.NON-LOCAL.SLASH 0-dlist ].

; Lexical types that may have subtypes or instances with nonempty QUE values.

nonque := word &
  [ SYNSEM.NON-LOCAL.QUE 0-dlist ].  

nonrel := word &
  [ SYNSEM.NON-LOCAL.REL 0-dlist ].  

nonconj := word &
  [ SYNSEM.LOCAL.CONJ cnil ].

mcna := word &
  [ SYNSEM.LOCAL.CAT.MC na ].

nonmsg := word &
  [ SYNSEM.LOCAL.KEYS.MESSAGE 0-dlist ].

; Exceptions to this default include neg-contracted auxiliaries.
topkey := word &
  [ SYNSEM.LOCAL [ KEYS.KEY #key,
		   CONT.--TOPKEY #key ] ].

; Most words combine with their complements (if any) to produce a phrase,
; but a few, like "twenty" as in "twenty-two" and "five" as in "five o'clock",
; produce a sign which is still a word -- one with [ SYNSEM lex_synsem ].

hc-to-phr := word &
  [ SYNSEM.LOCAL.CAT.HC-LEX - ].

basic_nontopkey := nonconj & nonslash & nonrel &
     	     mcna & non_affix_bearing.

; nontopkey_word's have all the defaults except topkey.
nontopkey := basic_nontopkey & nonque & nonmsg.

; hcons_amalg_word's have all the defaults EXCEPT non_affix_bearing,
; nonslash, nonrel, nonque.
hcons_amalg_word := mcna &
	    nonconj &
	    nonmsg &
	    topkey &
	    hc-to-phr &
  [ SYNSEM.LOCAL.KEYS.KEY.LABEL *cons* ].

basic_norm_word := hcons_amalg_word & nonque & nonslash & nonrel.

basic_norm_no_affix_word := basic_norm_word & non_affix_bearing.

; norm_word's have all the defaults except non_affix_bearing
norm_word := basic_norm_word &
  [ SYNSEM lex_synsem ].
	     
norm_no_affix_word := norm_word & non_affix_bearing.  

norm_mod_no_affix_word := nonque & nonconj & nonslash & nonrel & mcna & topkey &
		 non_affix_bearing &
   [ SYNSEM lex_synsem &
	    [ LOCAL [ CAT.HEAD.MOD < [ LOCAL.KEYS.MESSAGE #msg ] >,
		      KEYS.MESSAGE #msg ] ] ].

basic_mod_no_affix_notopkey_word := nonque & nonconj & nonslash & nonrel &
		 non_affix_bearing.

norm_mod_no_affix_notopkey_word := basic_mod_no_affix_notopkey_word &
   [ SYNSEM lex_synsem &
	    [ LOCAL [ CAT.HEAD.MOD < [ LOCAL.KEYS.MESSAGE #msg ] >,
		      KEYS.MESSAGE #msg ] ] ].

; ERB (04-10-96) I have added nonmsg to the following types, as
; appropriate.

; que_word's have all the defaults EXCEPT nonque & topkey.
que_word := nonconj & non_affix_bearing &
	    mcna &
	    nonslash &
	    nonrel &
	    nonmsg &
	    hc-to-phr.

; rel_word's have all the defaults EXCEPT nonrel.
rel_word := nonque & non_affix_bearing &
	    mcna &
            nonslash &
	    nonconj &
	    nonmsg &
	    topkey &
	    hc-to-phr.

; ERB (04-10-96) msg_word's have all the defaults EXCEPT nonmsg, nonslash,
; mcna, and topkey.
msg_word := nonque & non_affix_bearing &
	    nonrel &
	    nonconj &
	    hc-to-phr.

norm_msg_word := msg_word & nonslash & mcna & topkey.

hcons_amalg_basic_affixed_word := hcons_amalg_word & 
  [ INFLECTED - ].

hcons_amalg_affixed_word := hcons_amalg_word & 
  [ INFLECTED - ].

hcons_amalg_non_affixed_word := hcons_amalg_word & non_affix_bearing.

amalg_word := mcna & 
	    nonconj &
	    nonmsg &
            non_affix_bearing &
	    topkey &
	    hc-to-phr.

msg_amalg_word := nonconj &
            non_affix_bearing &
	    topkey &
	    hc-to-phr.

; hc_word's repeat all the defaults EXCEPT hc-to-phr, which means they can decide
; to build head_complement structures which are still words (with 
; [ SYNSEM lex_synsem ].  Also, they are not inherently themselves 
; [ SYNSEM lex_synsem ], so we don't use inheritance at the moment, but replicate
; the inheritable properties, for an experiment.

hc_word := word_or_lexrule &
  [ SYNSEM [ LOCAL [ CAT.MC na,
		     CONT.--TOPKEY #key,
		     KEYS [ KEY #key & [ LABEL *cons* ],
			    MESSAGE 0-dlist ],
		     CONJ cnil ],
	     NON-LOCAL [ QUE 0-dlist,
			 REL 0-dlist,
			 SLASH 0-dlist ] ],
    ROOT - ].

;;;;;
;; Non-local amalgmation types
;;

basic_zero_arg := lex_synsem &
  [ LOCAL.ARG-S < >,
    NON-LOCAL [ SLASH 0-dlist,
		REL 0-dlist,
		QUE 0-dlist ] ].

zero_arg := basic_zero_arg &
  [ LOCAL.CONT.H-CONS <! !> ].

basic_one_arg := canonical_synsem &
  [ LOCAL.ARG-S < [ NON-LOCAL [ SLASH #slash,
				REL #rel,
				QUE #que ],
		    LOCAL.CONT.INDEX individual ] >,
    NON-LOCAL [ SLASH #slash,
		REL #rel,
		QUE #que ] ].

one_arg := basic_one_arg &
  [ LOCAL.CONT.H-CONS <! !> ].

basic_two_arg := lex_synsem &
  [ LOCAL.ARG-S < [ NON-LOCAL [ SLASH [ LIST #smiddle,
					LAST #slast ],
				REL [ LIST #rmiddle,
				      LAST #rlast ],
				QUE [ LIST #qmiddle,
				      LAST #qlast ] ],
		    LOCAL.CONT.INDEX individual ],
		  [ NON-LOCAL [ SLASH [ LIST #sfirst,
					LAST #smiddle ],
				REL [ LIST #rfirst,
				      LAST #rmiddle ],
				QUE [ LIST #qfirst,
				      LAST #qmiddle ] ],
		    LOCAL.CONT.INDEX individual ] >,
    NON-LOCAL [ SLASH [ LIST #sfirst,
			LAST #slast ],
		REL [ LIST #rfirst,
		      LAST #rlast ],
		QUE [ LIST #qfirst,
		      LAST #qlast ] ] ].

two_arg := basic_two_arg &
  [ LOCAL.CONT.H-CONS <! !> ].

basic_three_arg := lex_synsem &
  [ LOCAL [ ARG-S < [ NON-LOCAL [ SLASH [ LIST #smiddle2,
					  LAST #slast ],
				  REL [ LIST #rmiddle2,
					LAST #rlast ],
				  QUE [ LIST #qmiddle2,
					LAST #qlast ] ],
		      LOCAL.CONT.INDEX individual ],
                    [ NON-LOCAL [ SLASH [ LIST #sfirst,
					  LAST #smiddle1 ],
				  REL [ LIST #rfirst,
					LAST #rmiddle1 ],
				  QUE [ LIST #qfirst,
					LAST #qmiddle1 ] ],
		      LOCAL.CONT.INDEX individual ],
                    [ NON-LOCAL [ SLASH [ LIST #smiddle1,
					  LAST #smiddle2 ],
				  REL [ LIST #rmiddle1,
					LAST #rmiddle2 ],
				  QUE [ LIST #qmiddle1,
					LAST #qmiddle2 ] ],
		      LOCAL.CONT.INDEX individual ] > ],
    NON-LOCAL [ SLASH [ LIST #sfirst,
			LAST #slast ],
		REL [ LIST #rfirst,
		      LAST #rlast ],
		QUE [ LIST #qfirst,
		      LAST #qlast ] ] ].

three_arg := basic_three_arg &
  [ LOCAL.CONT.H-CONS <! !> ].

four_arg := lex_synsem &
  [ LOCAL [ ARG-S < [ NON-LOCAL [ SLASH [ LIST #smiddle3,
					  LAST #slast ],
				  REL [ LIST #rmiddle3,
					LAST #rlast ],
				  QUE [ LIST #qmiddle3,
					LAST #qlast ] ],
		      LOCAL.CONT.INDEX individual ],
		    [ NON-LOCAL [ SLASH [ LIST #sfirst,
					  LAST #smiddle1 ],
				  REL [ LIST #rfirst,
					LAST #rmiddle1 ],
				  QUE [ LIST #qfirst,
					LAST #qmiddle1 ] ],
		      LOCAL.CONT.INDEX individual ],
		    [ NON-LOCAL [ SLASH [ LIST #smiddle1,
					  LAST #smiddle2 ],
				  REL [ LIST #rmiddle1,
					LAST #rmiddle2 ],
				  QUE [ LIST #qmiddle1,
					LAST #qmiddle2 ] ],
		      LOCAL.CONT.INDEX individual ],
		    [ NON-LOCAL [ SLASH [ LIST #smiddle2,
					  LAST #smiddle3 ],
				  REL [ LIST #rmiddle2,
					LAST #rmiddle3 ],
				  QUE [ LIST #qmiddle2,
					LAST #qmiddle3 ] ],
		      LOCAL.CONT.INDEX individual ] >,
	    CONT.H-CONS <! !> ],
    NON-LOCAL [ SLASH [ LIST #sfirst,
			LAST #slast ],
		REL [ LIST #rfirst,
		      LAST #rlast ],
		QUE [ LIST #qfirst,
		      LAST #qlast ] ] ].

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; SUBCATEGORIZATIONS -- synsems for verbs, adjectives, prepositions, nouns
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

nomod_local := local &
  [ CAT.HEAD.MOD < > ].

nomod_synsem := lex_synsem &
  [ LOCAL.CAT [ HEAD.MOD < >,
		VAL.SUBJ < > ] ].

scopal_mod :< local_min.
intersective_mod :< local_min.

scopal_mod_local := scopal_mod & local.
int_mod_local := intersective_mod & local.

;; DPF 27-May-99 - Changed [MC na] in NOMP_CAT to [MC na_or_-] to allow 
;; acc-verbal-gerunds to be NP complements, even though they are built via the 
;; head_subj rule.
;; DPF 18-Nov-99 - Removed PRD + since this prevented e.g. "ten past five", where
;; "ten" is [PRD -], and "past" requires a nomp_cat specifier.

nomp_cat_min :< cat_min.

nomp_cat := nomp_cat_min & cat &
  [ HEAD nominal & strict_type &
	 [ POSS -,
	   TAM.MOOD ind_or_mod_subj ],
    VAL [ SUBJ *olist*,
	  SPR *olist*,
	  COMPS *olist* ],
    MC na_or_- ].

; DPF (8-Jan-99) Added accusative and nominative subtypes of nomp_cat, since 
; nominative ones are not 'mobile' - see fundamentals.tdl

nomp_cat_nom_min :< nomp_cat_min.
nomp_cat_acc_min :< nomp_cat_min.

nomp_cat_nom := nomp_cat_nom_min & nomp_cat &
  [ HEAD.CASE nom ].

nomp_cat_acc := nomp_cat_acc_min & nomp_cat &
  [ HEAD mobile &  [ CASE acc ] ].

np_cat_nom_min :< nomp_cat_nom_min.
np_cat_acc_min :< nomp_cat_acc_min.

np_cat_nom := nomp_cat_nom & np_cat_nom_min &
  [ HEAD noun ].

np_cat_acc := nomp_cat_acc & np_cat_acc_min &
  [ HEAD noun ].

;; DPF (30-Apr-98) In saturated phrase subcats, SUBJ must be < >, not *olist*,
;; since we need to have SUBJ < > unify with the filler in filler_head phrases,
;; and the filler is constrained to be SUBJ *prolist* which has a distinct 
;; synsem type (pro_ss) which is constrained to be [OPT -].
;; DPF 27-May-99 - Having eliminated the need for *prolist* to be OPT -, we
;; can now make saturated phrases require SUBJ to be *olist* rather than < >, 
;; which means verbal gerunds can have an optional SUBJ but still themselves 
;; be subjects or complements.
;; DPF (28-Jul-98) Added MOD < > to exclude non-finite relative clauses, which
;; are otherwise not distinguishable from nomp's.  Maybe also needed to 
;; exclude the second (modifier) entries for temporal NPs like "Tuesday".
;; DPF 09-Jun-99 - Removed MOD < > (see above), since relative clauses are now
;; all marked with non-empty REL, and because this constraint was falsely 
;; blocking "one to three pm" as an NP complement, because it has a 
;; non-empty MOD.

s_cat_unspec := cat &
  [ HEAD verbal & strict_type,
    VAL [ SUBJ *olist*,
	  SPR *olist*,
	  COMPS *olist* ] ].

s_cat_v_c := s_cat_unspec &
  [ HEAD.INV -,
    MC - ].

s_cat_fin_or_inf_unspec := s_cat_unspec &
  [ HEAD [ VFORM fin_or_inf,
	   TAM.MOOD ind_or_mod_subj & strict_sort ] ].

s_cat_fin_unspec := s_cat_fin_or_inf_unspec &
  [ HEAD.VFORM fin ].

s_cat_fin_or_inf_v_c := s_cat_v_c & s_cat_fin_or_inf_unspec.
s_cat_fin_v_c := s_cat_v_c & s_cat_fin_unspec.

s_cat := s_cat_unspec &
  [ HEAD verb ].

s_cat_fin := s_cat & s_cat_fin_unspec &
  [ HEAD.INV -,
    MC + ].

s_cat_fin_or_imp := s_cat &
  [ HEAD [ VFORM fin_or_imp,
	   TAM.MOOD ind_or_mod_subj ],
    VAL.SPR < >,
    MC + ].

n_or_v_cat := cat &
  [ HEAD nominal_or_verbal & strict_type,
    VAL [ SPR < synsem_min >,
	  COMPS *olist* ] ].

vp_cat := n_or_v_cat &
  [ HEAD verbal &
	 [ INV - ],
    VAL.SUBJ < synsem_min >,
    MC na ].

vp_inf_cat := vp_cat &
  [ HEAD [ VFORM inf,
	   PRD - ] ].

vp_bse_cat := vp_cat &
  [ HEAD verb &
	 [ VFORM bse_only,
	   PRD - ] ].

; DPF 10-Jun-99 - Removed MOD < > (cf note in templates.tdl)
; DPF 11-Jul-99 - Added restriction that SPR be [HEAD det] to prevent adjectives
; from modifying partitives and odd nouns like hour_prep words.
; DPF 28-Aug-99 - Removed SPR: OPT - to allow relative clauses to modify
; generic-pro's like "anything" and still have the result look like an NP.

nbar_cat := n_or_v_cat &
  [ HEAD noun &
	 [ POSS - ],
    VAL [ SUBJ < >,
	  SPR < synsem & [ LOCAL.CAT.HEAD det ] > ],
    MC na ].

adverbee_cat := cat &
  [ HEAD adverbee & strict_type ].

prd_cat := cat &
  [ HEAD.PRD +,
    VAL [ SUBJ < synsem >,
	  SPR *olist*,
	  COMPS *olist* ],
    MC na ].

pp_cat := cat &
  [ HEAD prep & [ PRD - ],
		  VAL [ SPR *olist*,
			COMPS *olist* ],
    MC na ].

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Linking Types
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Linking types specify the relationship between valence positions and 
;; semantic roles.

linking_type :< lex_synsem.

atrans_lt := linking_type &
  [ LOCAL [ CAT.VAL.SUBJ < [ LOCAL local_min &
				   [ CONT.INDEX it-ind ] ] >,
	    KEYS.KEY no_role_rel ] ].

arg1_subj_lt := linking_type &
  [ LOCAL [ CAT.VAL.SUBJ < [ LOCAL local_min &
				   [ CONT [ TOP #top,
					    INDEX #subjind & non_expl-ind ] ] ] >,
	    CONT.TOP #top,
	    KEYS.KEY arg1_rel & [ ARG1 #subjind ] ] ].

unacc_lt := linking_type &
  [ LOCAL [ CAT.VAL.SUBJ < [ LOCAL local_min & [ CONT [ TOP #top,
						      INDEX #subjind & 
							non_expl-ind ] ] ] >,
	    CONT.TOP #top,
	    KEYS.KEY arg3_event_rel & [ ARG3 #subjind ] ] ].

arg13_lt := arg1_subj_lt & 
  [ LOCAL [ CAT.VAL.COMPS 
                    < [ LOCAL local_min &
                            [ CONT [ TOP #top,
                                     INDEX #objind & non_expl-ind ] ] ], ... >,
            CONT.TOP #top,
	    KEYS.KEY arg13_rel & [ ARG3 #objind ] ] ].

trans_lt :< arg13_lt.

arg14_lt := arg1_subj_lt & 
  [ LOCAL [ CAT.VAL.COMPS < [ LOCAL local_min &
				    [ KEYS [ KEY verb_aspect_rel,
					     MESSAGE 1-dlist ],
				      CONT.TOP #mhand ] ], ... >,
	    KEYS.KEY arg14_rel & [ ARG4 #mhand ] ] ].

; "suppose" which makes its KEY same as its complement's KEY
; - wouldn't need this if had defaults

alt_arg14_lt := linking_type &
  [ LOCAL [ CAT.VAL [ SUBJ < [ LOCAL local_min &
				    [ CONT.INDEX #subjind & non_expl-ind ] ] >,
		      COMPS < [ LOCAL local_min &
				      [ KEYS [ KEY verb_aspect_rel,
					       MESSAGE 1-dlist ],
					CONT.TOP #mhand ] ], ... > ],
	    KEYS.ALTKEY arg14_rel & [ ARG1 #subjind,
				      ARG4 #mhand ] ] ].

; Maybe only for main verb "have" (AAC internal comment moved)

poss_lt := linking_type &         
  [ LOCAL [ CAT.VAL [ SUBJ < [ LOCAL local_min &
				     [ CONT [ TOP #top,
					      INDEX #subjind & ref-ind ] ] ] >,
		      COMPS 
                       < [ LOCAL local_min &
                               [ CONT [ TOP #top,
                                        INDEX #objind & ref-ind ] ] ], ... > ],
	    CONT [ TOP #top,
		   LISZT <! arg13_rel & 
			  [ ARG1 #subjind,
			    ARG3 #objind ] !> ] ] ].

expl_obj_lt := arg1_subj_lt &
  [ LOCAL.CAT.VAL.COMPS < [ LOCAL local_min & [ CONT.INDEX it-ind ] ], ... > ].

expl_obj_cp_lt := expl_obj_lt &
  [ LOCAL [ CAT.VAL.COMPS < synsem, 
			    [ LOCAL local_min &
				    [ KEYS.MESSAGE 1-dlist,
				      CONT.TOP #mhand ] ],
			    ... >,
	    KEYS.KEY arg14_rel & [ ARG4 #mhand ] ] ].

particle_cp_lt := arg1_subj_lt &
  [ LOCAL [ CAT.VAL.COMPS < *top*, [ LOCAL local_min &
				      [ KEYS [ KEY verb_aspect_rel,
					       MESSAGE 1-dlist ],
					CONT.TOP #mhand ] ], ... >,
	    KEYS.KEY arg14_rel & [ ARG4 #mhand ] ] ].

ditrans_lt := arg1_subj_lt &
  [ LOCAL [ CAT.VAL.COMPS 
                  < [ LOCAL local_min &
                           [ CONT [ TOP #top,
                                    INDEX #obj2ind & non_expl-ind ] ] ], 
                    [ LOCAL local_min &
                           [ CONT [ TOP #top,
                                    INDEX #objind & non_expl-ind ] ] ], ... >,
	    CONT.TOP #top,
	    KEYS.KEY arg123_rel & [ ARG2 #obj2ind,
				    ARG3 #objind ] ] ].

tritrans_lt := ditrans_lt &
  [ LOCAL [ CAT.VAL.COMPS < *top*, *top*, 
			    [ LOCAL local_min &
				 [ KEYS [ KEY v_event_rel,
					  MESSAGE 1-dlist ],
				   CONT.TOP #mhand ] ],
				... >,
	    KEYS.KEY arg1234_rel & [ ARG4 #mhand ] ] ].

basic_prep_intrans_lt := linking_type &
  [ LOCAL [ CAT.VAL.COMPS 
			< [ LOCAL local_min &
				  [ KEYS.KEY prep_rel & independent_rel &
					       [ ARG #index ],
				    CONT.TOP #top ] ],
			  ... >,
	    CONT [ TOP #top,
		   INDEX #index,
		   LISZT <! #key !> ],
	    KEYS.KEY #key ] ].

prep_intrans_lt := basic_prep_intrans_lt & arg1_subj_lt.
prep_intrans_unacc_lt := basic_prep_intrans_lt & unacc_lt.

empty_prep_intrans_lt := arg1_subj_lt &
  [ LOCAL [ CAT.VAL.COMPS < [ LOCAL local_min &
				      [ KEYS.KEY prep_rel & selected_rel &
						     [ ARG3 #objind ],
					CONT.TOP #top ] ], ... >,
	    CONT.TOP #top,
	    KEYS.KEY arg13_rel & [ ARG3 #objind ] ] ].
		   

; Argument coercion as in "Kim suggests on Friday"
prep_intrans_event_lt := arg1_subj_lt &
  [ LOCAL [ CAT.VAL.COMPS 
			 < [ LOCAL local_min &
				   [ KEYS.KEY prep_rel & independent_rel &
						  [ ARG #event ],
				     CONT.TOP #top ] ], ... >,
	    CONT [ TOP #top,
		   LISZT <! #key !> ],
	    KEYS.KEY #key & arg12_rel & [ ARG2 #event ] ] ].

prep_trans_lt := arg13_lt &
  [ LOCAL [ CAT.VAL.COMPS < *top*, 
			    [ LOCAL local_min &
				    [ CAT.HEAD.MOD < synsem_min >,
				      CONT.TOP #top,
				      KEYS.KEY prep_rel & independent_rel &
						 [ ARG #event ] ] ],
			      ... >,
	    CONT [ TOP #top,
		   INDEX #event,
		   LISZT <! #key !> ],
	    KEYS.KEY #key ] ].

empty_prep_trans_lt := arg13_lt &
  [ LOCAL [ CAT.VAL.COMPS < *top*, [ LOCAL local_min &
				       [ KEYS.KEY prep_rel & selected_rel &
						      [ ARG3 #objind ],
					 CONT.TOP #top ] ], ... >,
	    CONT.TOP #top,
	    KEYS.KEY arg123_rel & [ ARG2 #objind ] ] ].
		   

empty_prep_particle_intrans_lt := arg1_subj_lt &
  [ LOCAL [ CAT.VAL.COMPS < *top*, [ LOCAL local_min &
					 [ KEYS.KEY prep_rel & selected_rel &
						      [ ARG #event,
							ARG3 #arg3 ],
					   CONT.TOP #top ] ], ... >,
	    CONT.TOP #top,
	    KEYS.KEY arg13_rel & [ EVENT #event,
				   ARG3 #arg3 ] ] ].
		   

empty_prep_particle_trans_lt := arg13_lt &
  [ LOCAL [ CAT.VAL.COMPS < synsem, 
			      synsem &
			      [ LOCAL.KEYS.KEY.ARG3 #arg3 ],
			      synsem &
			      [ LOCAL local_min & [ KEYS.KEY prep_rel & 
							     selected_rel &
							     [ ARG3 #objind ],
						CONT.TOP #top ] ], ... >,
	    CONT.TOP #top,
	    KEYS.KEY arg123_rel & [ ARG2 #objind,
				    ARG3 #arg3 ] ] ].
		   

cp_trans_lt := arg13_lt &
  [ LOCAL [ CAT.VAL.COMPS < *top*, 
			    [ LOCAL local_min &
				 [ KEYS [ KEY v_event_rel,
					  MESSAGE 1-dlist ],
				   CONT.TOP #mhand ] ], 
			    ...>,
	    KEYS.KEY arg134_rel & [ ARG4 #mhand ] ] ].

; "explain to Kim that ..."
pp_cp_lt := empty_prep_intrans_lt &
  [ LOCAL [ CAT.VAL.COMPS < *top*,
			    [ LOCAL local_min &
				  [ KEYS [ KEY v_event_rel,
					   MESSAGE 1-dlist ],
				    CONT.TOP #mhand ] ],
			    ... >,
	    KEYS.KEY arg134_rel & [ ARG4 #mhand ] ] ].

double_pp_lt := arg1_subj_lt &
  [ LOCAL [ CAT.VAL.COMPS < [ LOCAL local_min &
				    [ KEYS.KEY prep_rel & independent_rel &
						   [ ARG #event ],
				      CONT.TOP #top ] ], 
			    [ LOCAL local_min &
				    [ KEYS.KEY prep_rel & independent_rel &
						   [ ARG #event ],
				      CONT.TOP #top ] ], ... >,
	    CONT [ TOP #top,
		   INDEX #event ] ] ].

s_equi_lt := linking_type &
  [ LOCAL [ CAT.VAL.SUBJ < [ LOCAL local_min &
				   [ CONT [ TOP #top,
					    INDEX #index & ref-ind ] ] ] >,
	    CONT.TOP #top,
	    KEYS.KEY arg14_rel & [ arg1 #index ] ] ].
		   

equi_prd_lt := linking_type & 
  [ LOCAL [ CAT.VAL.--KEYCOMP.LOCAL [ KEYS.KEY independent_rel &
						     [ HANDEL #hand,
						       EVENT #event ],
				      CONT.TOP #top ],
	    CONT [ TOP #top,
		   LISZT <! relation & [ HANDEL #hand ] !> ],
	    KEYS.KEY.ARG4 #event ] ].

; ERB (14-12-97) Subj_equi verbs now require that their complement have
; a pro_ss subject.  This might be redundant if some other supertye of
; all equi verbs requires hypo_rel on the complement.

; ERB (21-01-98) This pro_ss needs to be constrained to be unslashed.

subj_equi_lt := s_equi_lt &
  [ LOCAL.CAT.VAL [ SUBJ < [ LOCAL.CONT.INDEX #index ] >,
		    COMPS < [ LOCAL local_min &
				    [ CAT.VAL.SUBJ 
                                       < pro_ss &
                                         [ LOCAL.CONT.INDEX #index,
                                           NON-LOCAL.SLASH 0-dlist]>] ] > ] ].

; 'try to leave'
subj_equi_inf_lt := subj_equi_lt &
  [ LOCAL [ CAT.VAL.--KEYCOMP.LOCAL local_min &
				    [ KEYS.MESSAGE 1-dlist & <! hypo_rel !>,
				      CONT.TOP #hand ],
	    KEYS.KEY.ARG4 #hand ] ].

; 'stay calm'
subj_equi_prd_lt := equi_prd_lt & s_equi_lt &
  [ LOCAL [ CAT.VAL [ SUBJ < [ LOCAL.CONT.INDEX #index & ref-ind ] >,
		      --KEYCOMP #comp,
		      COMPS < #comp & 
			      [ LOCAL local_min &
				[ CAT.VAL.SUBJ *prolist* &
				  < [ LOCAL local_min &
                                          [ CONT.INDEX #index ] ] >] ] > ] ] ].

; ERB (14-12-97) comp's subj is a pro_ss.  This is probably redundant since
; the to_c_prop will say that its subject is a pro_ss.

; ERB (21-01-98) The pro_ss needs to be constrained to be unslashed.

; 'persuade Kim to leave'
obj_equi_lt := arg1_subj_lt &
  [ LOCAL [ CAT.VAL [ COMPS < [ LOCAL local_min &
				    [ CONT [ TOP #top,
					     INDEX #index & non_expl-ind ] ] ],
			      #comp &
			      [ LOCAL local_min &
				      [ CAT.VAL.SUBJ 
					 < pro_ss &
                                           [ LOCAL.CONT.INDEX #index,
                                             NON-LOCAL.SLASH 0-dlist ] > ] ] >,
		      --KEYCOMP #comp ],
	    CONT.TOP #top,
	    KEYS.KEY arg134_rel & [ ARG3 #index ] ] ].

; 'persuade Kim to leave'
obj_equi_inf_lt := obj_equi_lt &
  [ LOCAL [ CAT.VAL.--KEYCOMP.LOCAL local_min &
				    [ CONT.TOP #hand,
				      KEYS.MESSAGE 1-dlist ],
	    KEYS.KEY.ARG4 #hand ] ].

pp_inf_lt := arg1_subj_lt &
 [ LOCAL [ CAT.VAL.COMPS < [ LOCAL local_min &
				     [ KEYS.KEY.ARG3 #arg2 ] ],
			   [ LOCAL local_min &
				     [ CONT.TOP #hand ] ] >,
	   KEYS.KEY arg124_rel & [ ARG2 #arg2,
				   ARG4 #hand ] ] ].

; 'consider Kim wise'

obj_equi_prd_lt := equi_prd_lt & obj_equi_lt &
  [ LOCAL.CAT.VAL.COMPS < [ LOCAL local_min &
				  [ KEYS.KEY basic_nom_rel,
				    CONT.INDEX #index ] ],
			  [ LOCAL local_min &
				  [ CAT.VAL.SUBJ 
                                    < pro_ss &
                                      [ LOCAL local_min &
                                             [ CONT.INDEX #index ] ] > ] ] > ].

; 'promise Kim to leave'
anom_equi_lt := s_equi_lt &
  [ LOCAL [ CAT.VAL 
		   [ SUBJ < [ LOCAL.CONT.INDEX #subjind ] >,
		     COMPS < [ LOCAL local_min &
				 [ CONT [ TOP #top,
                                          INDEX #objind & non_expl-ind ] ] ],
			     [ LOCAL local_min &
				[ CAT.VAL.SUBJ < pro_ss &
						 [ LOCAL local_min &
						   [ CONT.INDEX #subjind ] ] >,
				  KEYS.MESSAGE 1-dlist,
				  CONT.TOP #hand ] ] > ],
	    CONT.TOP #top,
	    KEYS.KEY arg134_rel &
		    [ ARG4 #hand,
		      ARG3 #objind ] ] ].

; 'turn out unreliable' (also resultatives like 'turned up drunk')
anom_equi_prd_lt := equi_prd_lt & s_equi_lt &
  [ LOCAL [ CAT.VAL 
		[ SUBJ < [ LOCAL [ KEYS.KEY.HANDEL #chand,
				   CONT.INDEX #index ] ] >,
		  --KEYCOMP #comp,
		  COMPS < *top*,
			  #comp &
			  [ LOCAL local_min &
				  [ CAT.VAL.SUBJ < pro_ss &
						   [ LOCAL local_min &
						      [ CONT.INDEX #index ] ] >,
				    CONT.TOP #chand ] ] > ] ] ].

; 'turn out to be red'
anom_equi_particle_lt := s_equi_lt &
  [ LOCAL [ CAT.VAL 
		[ SUBJ < [ LOCAL.CONT.INDEX #index ] >,
		  COMPS < *top*,
			  [ LOCAL local_min &
				  [ CAT.VAL.SUBJ < pro_ss &
						   [ LOCAL local_min &
						     [ CONT.INDEX #index ] ] >,
				    KEYS.MESSAGE 1-dlist,
				    CONT.TOP #hand ] ] > ],
	    KEYS.KEY.ARG4 #hand ] ].

ssr_lt :< linking_type.

basic_ssr_expr_lt := ssr_lt &
  [ LOCAL [ CAT.VAL.--KEYCOMP.LOCAL.CONT.TOP #chand,
	    CONT.H-CONS <! qeq &
			   [ SC-ARG #arghand,
			     OUTSCPD #chand ] !>,
	    KEYS.KEY arg24_event_rel & [ ARG4 #arghand ] ] ].

ssr_expr_lt := basic_ssr_expr_lt &
  [ LOCAL [ CAT.VAL [ --KEYCOMP #comp,
		      COMPS < [ LOCAL.KEYS.KEY.ARG3 #arg4 ], 
			      #comp, ... > ],
	    KEYS.KEY.ARG4 #arg4 ] ].

ssr_prdp_expr_lt := basic_ssr_expr_lt &
  [ LOCAL [ CAT.VAL [ --KEYCOMP #comp,
			COMPS < #comp & 
				[ LOCAL.KEYS.KEY.EVENT #ind ],
				[ LOCAL [ KEYS.KEY _to_rel_s &
						       [ ARG3 #arg2 ],
					  CONT.TOP #top ] ],
				... > ],
	    CONT [ TOP #top,
		   INDEX #ind,
		   LISZT <! #key !> ],
	    KEYS.KEY #key & [ ARG2 #arg2 & non_expl-ind ] ] ].

sor_lt := linking_type &
  [ LOCAL [ CAT.VAL [ SUBJ < [ LOCAL local_min &
				     [ CONT [ TOP #top,
					      INDEX #index ] ] ] >,
			COMPS < synsem & [ LOCAL local_min &
						 [ CONT.TOP #top ] ], 
				[ LOCAL local_min &
					[ CONT.TOP #chand ] ] > ],
	    CONT [ TOP #top,
		   H-CONS <! qeq &
			   [ SC-ARG #arghand,
			     OUTSCPD #chand ] !> ],
	    KEYS.KEY arg14_rel & [ ARG4 #arghand,
				   ARG1 #index ] ] ].

expl_it_subj_lt := linking_type &
  [ LOCAL [ CAT.VAL [ SUBJ < [ LOCAL local_min & [ KEYS.KEY [ HANDEL #hand ],
						   CONT [ INDEX it-ind ] ] ] >,
		      COMPS < [ LOCAL local_min &
				   [ KEYS.KEY.ARG3 #arg2 ] ], #comp, ... >,
		      --KEYCOMP #comp & 
			   [ LOCAL local_min &
				   [ KEYS.MESSAGE 1-dlist,
				     CONT.TOP #chand ] ] ],
	    CONT.H-CONS <! qeq &
			   [ SC-ARG #arghand,
			     OUTSCPD #chand ] !>,
	    KEYS.KEY arg24_event_rel &
		    [ HANDEL #hand,
		      ARG2 #arg2,
		      ARG4 #arghand ] ] ].

expl_prep_trans_lt := linking_type &
 [ LOCAL [ CAT.VAL [ SUBJ < [ LOCAL local_min &
				      [ CONT.INDEX it-ind ] ] >,
		       COMPS < [ LOCAL local_min &
				       [ CONT [ TOP #top,
						INDEX #arg2 ] ] ],
			       [ LOCAL local_min &
				       [ KEYS.KEY prep_rel & 
						      [ HANDEL #hand,
							ARG #index,
							ARG3 #arg1 ],
					 CONT.TOP #top ] ], ...> ],
	   CONT [ TOP #top,
		  INDEX #index ],
	   KEYS.KEY arg13_rel & [ HANDEL #hand,
				  ARG1 #arg1,
				  ARG3 #arg2 ] ] ].

expl_pp_inf_lt := arg1_subj_lt &
 [ LOCAL [ CAT.VAL [ COMPS < [ LOCAL local_min &
				     [ CONT.INDEX it-ind ] ],
			       [ LOCAL local_min &
				     [ KEYS.KEY.ARG3 #arg2,
				       CONT.TOP #top ] ],
			       [ LOCAL local_min &
				     [ CONT.TOP #hand ] ] > ],
	   CONT.TOP #top,
	   KEYS.KEY arg124_rel & [ ARG2 #arg2,
				   ARG4 #hand ] ] ].

; 'leave it to Kim to find the answer'
expl_pp_inf_oeq_lt := expl_pp_inf_lt &
 [ LOCAL.CAT.VAL.COMPS < *top*,
			 [ LOCAL.KEYS.KEY.ARG3 #arg3 ],
			 [ LOCAL.KEYS.KEY arg1_rel & [ ARG1 #arg3 ] ] > ].

; 'arrange with Kim to meet her'
pp_inf_seq_lt := pp_inf_lt &
 [ LOCAL.CAT.VAL [ SUBJ < [ LOCAL local_min &
				  [ CONT.INDEX #arg1 ] ] >,
		   COMPS < *top*,
			  [ LOCAL.KEYS.KEY arg1_rel & [ ARG1 #arg1 ] ] > ] ].

; 'arrange it with Kim to meet her'
expl_pp_inf_seq_lt := expl_pp_inf_lt &
 [ LOCAL.CAT.VAL [ SUBJ < [ LOCAL local_min &
				  [ CONT.INDEX #arg1 ] ] >,
		   COMPS < *top*,
			   *top*,
			   [ LOCAL.KEYS.KEY arg1_rel & [ ARG1 #arg1 ] ] > ]].

; suffice
atrans_inf_lt := linking_type &
  [ LOCAL [ CAT.VAL.COMPS < [ LOCAL local_min &
				  [ CONT.TOP #hand ] ] >,
	    KEYS.KEY arg14_rel & [ ARG4 #hand ] ] ].

particle_NP_lt := arg1_subj_lt & 
  [ LOCAL [ CAT.VAL.COMPS < [ LOCAL.CONT.TOP #top ],
			      [ LOCAL local_min &
				  [ CONT [ TOP #top,
                                           INDEX #index & non_expl-ind ] ] ] >,
	    CONT.TOP #top,
	    KEYS.KEY arg13_rel & [ ARG3 #index ] ] ].

NP_particle_lt := arg1_subj_lt & 
  [ LOCAL [ CAT.VAL.COMPS < [ LOCAL local_min &
                                    [ CONT [ TOP #top,
                                             INDEX #index & non_expl-ind ] ] ],
			      [ LOCAL.CONT.TOP #top ], ... >,
	    CONT.TOP #top,
	    KEYS.KEY arg13_rel & [ ARG3 #index ] ] ].

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Val Types
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Valence types specify the number and type of subcategorized complements.
  
valence_type :< canonical_synsem.

unsat_subst := valence_type &
  [ LOCAL.CAT.VAL.SUBJ < synsem_min & [ LOCAL [ CAT nomp_cat_min,
                                                CONJ cnil ] ] > ].

intrans_subst := unsat_subst & one_arg &
  [ LOCAL.CAT.VAL.COMPS < > ].

unsat_two_arg_subst := unsat_subst &
  [ LOCAL [ CAT.VAL.COMPS < synsem & [ LOCAL local_min &
					     [ KEYS.KEY #ckey ] ], ... >,
	    KEYS.--COMPKEY #ckey ] ].

two_arg_subst := unsat_two_arg_subst &
  [ LOCAL.CAT.VAL.COMPS < *top* > ].

; For verbs that passivize.
; 21-Apr-00 Changed np_cat_acc_min to nomp_cat_acc_min for e.g. "kim liked 
; hiring abrams"
trans_subst := unsat_subst &
  [ LOCAL.CAT.VAL.COMPS < synsem & [ LOCAL [ CAT nomp_cat_acc_min,
					     CONJ cnil ] ], ... > ].
  
np_trans_subst := trans_subst & two_arg_subst & two_arg &
  [ LOCAL.CAT.VAL.COMPS < synsem > ].
  
; For verbs with NP complement but that don't passivize.
non_trans_subst := unsat_two_arg_subst &
  [ LOCAL.CAT.VAL.COMPS < synsem & [ LOCAL [ CAT nomp_cat_acc_min,
					     CONJ cnil ] ], ... > ].
  
np_non_trans_subst := non_trans_subst & two_arg_subst & 
  [ LOCAL.CAT.VAL.COMPS < synsem > ].

cp_intrans_subst := two_arg_subst &
  [ LOCAL.CAT.VAL [ --KEYCOMP #comp,
		    COMPS < #comp & synsem &
			    [ LOCAL [ CAT s_cat_v_c,
				      CONJ cnil ] ] > ] ].
  
prd_intrans_subst := two_arg_subst & 
  [ LOCAL.CAT.VAL.COMPS < synsem & 
			  [ LOCAL [ CAT prd_cat,
				    CONJ cnil ] ] > ].

prep_intrans_subst := two_arg_subst & 
  [ LOCAL.CAT.VAL.COMPS < synsem &
			  [ LOCAL [ CAT pp_cat,
				    CONJ cnil ] ] > ].

unsat_three_arg_subst := unsat_two_arg_subst &
  [ LOCAL [ CAT.VAL.COMPS < synsem, 
			    synsem & [ LOCAL local_min &
					  [ KEYS.KEY #ckey ] ], ... >,
	    KEYS.--OCOMPKEY #ckey ] ].

three_arg_subst := unsat_three_arg_subst & three_arg.
basic_three_arg_subst := unsat_three_arg_subst & basic_three_arg.

three_arg_trans_subst := unsat_three_arg_subst & three_arg & trans_subst.
basic_three_arg_trans_subst := unsat_three_arg_subst & basic_three_arg & 
			       trans_subst.

three_arg_nontrans_raising_subst := unsat_three_arg_subst & basic_three_arg &
  [ LOCAL.CAT.VAL.COMPS < synsem & [ LOCAL [ CAT nomp_cat_acc_min,
					     CONJ cnil ] ], ... > ].

prep_trans_subst := three_arg_trans_subst & 
  [ LOCAL.CAT.VAL.COMPS < synsem & [ LOCAL [ CAT nomp_cat_acc_min,
					     CONJ cnil ] ], 
			  synsem &
			  [ LOCAL [ CAT pp_cat,
				    CONJ cnil ] ] > ].
  
prep_non_trans_subst := three_arg_trans_subst & 
  [ LOCAL.CAT.VAL.COMPS < synsem & [ LOCAL [ CAT nomp_cat_acc_min,
					     CONJ cnil ] ] & lex_synsem, 
			  synsem &
			  [ LOCAL [ CAT pp_cat,
				    CONJ cnil ] ] > ].
  
prd_trans_subst := three_arg_trans_subst & 
  [ LOCAL.CAT.VAL.COMPS < synsem & [ LOCAL [ CAT nomp_cat_acc_min,
					     CONJ cnil ] ],
			  synsem & 
			  [ LOCAL [ CAT prd_cat,
				    CONJ cnil ] ] > ].

prd_non_trans_subst := three_arg_subst & non_trans_subst &
  [ LOCAL.CAT.VAL.COMPS < synsem & [ LOCAL [ CAT nomp_cat_acc_min,
					     CONJ cnil ] ], 
			  synsem & 
			  [ LOCAL [ CAT prd_cat,
				    CONJ cnil ] ] > ].

ditrans_subst := three_arg_trans_subst & 
  [ LOCAL.CAT.VAL.COMPS < synsem & [ LOCAL [ CAT nomp_cat_acc_min,
					     CONJ cnil ] ], 
			  synsem & [ LOCAL [ CAT nomp_cat_acc_min,
					     CONJ cnil,
					     KEYS.KEY nonpro_rel ] ] > ].
  
; 'inform Kim that S'
cp_trans_subst := three_arg_trans_subst &
  [ LOCAL.CAT.VAL [ --KEYCOMP #comp,
		    COMPS < synsem & [ LOCAL [ CAT nomp_cat_acc_min,
					     CONJ cnil ] ],
			    #comp & synsem &
			    [ LOCAL [ CAT s_cat_fin_v_c,
				      CONJ cnil ] ] > ] ]. 
  
pp_cp_subst := three_arg_subst &
  [ LOCAL.CAT.VAL [ --KEYCOMP #comp,
		    COMPS < synsem &
			    [ LOCAL [ CAT pp_cat,
				      CONJ cnil ] ],
			    #comp & synsem &
			    [ LOCAL [ CAT s_cat_fin_v_c,
				      CONJ cnil ] ] > ] ].
  
np_comp_subst := three_arg_trans_subst & 
  [ LOCAL.CAT.VAL.COMPS < synsem & [ LOCAL [ CAT nomp_cat_acc_min,
					     CONJ cnil ] ],
			  [ LOCAL local_min &
				 [ CAT [ HEAD prep,
					 VAL [ SUBJ < synsem >,
					       COMPS *olist* ] ] ] ] > ].
; 'talk to Kim about Sandy'
double_pp_subst := three_arg_subst & 
  [ LOCAL.CAT.VAL.COMPS < synsem &
			  [ LOCAL [ CAT pp_cat,
				    CONJ cnil ] ], 
			  synsem &
			  [ LOCAL [ CAT pp_cat,
				    CONJ cnil ] ] > ].
  
inf_or_prp_intrans_subst := unsat_two_arg_subst &
  [ LOCAL.CAT.VAL [ --KEYCOMP #comp,
		    COMPS < #comp & synsem &
			    [ LOCAL [ CAT vp_cat &
					  [ HEAD.VFORM inf_or_prp ],
				      CONJ cnil ] ] > ] ].

inf_intrans_subst := inf_or_prp_intrans_subst &
  [ LOCAL.CAT.VAL.COMPS < [ LOCAL local_min &
				  [ CAT.HEAD.VFORM inf ] ] > ].

for_inf_intrans_subst := two_arg_subst &
  [ LOCAL.CAT.VAL.COMPS < synsem & 
			  [ LOCAL [ CAT s_cat_v_c &
					[ HEAD.VFORM inf ],
				    CONJ cnil ] ] > ].

inf_trans_subst := three_arg_trans_subst &
  [ LOCAL.CAT.VAL [ --KEYCOMP #comp, 
		    COMPS < *top*, #comp & synsem &
			           [ LOCAL [ CAT vp_inf_cat,
					     CONJ cnil ] ] > ] ].

inf_trans_raising_subst := basic_three_arg_trans_subst &
  [ LOCAL.CAT.VAL [ --KEYCOMP #comp, 
		    COMPS < *top*, 
			    #comp & synsem &
			    [ LOCAL [ CAT vp_inf_cat,
				      CONJ cnil ] ] > ] ].

prp_intrans_subst := inf_or_prp_intrans_subst & two_arg &
  [ LOCAL.CAT.VAL.COMPS < [ LOCAL local_min &
				  [ CAT.HEAD.VFORM prp ] ] > ].

; 'make, let, watch' don't passivize.  Some of these have an apparently
; corresponding passive, but with an ordinary 'to-VP' complement, not vform bse.
bse_nontrans_raising_subst := three_arg_nontrans_raising_subst & 
  [ LOCAL.CAT.VAL.COMPS < *top*, 
			  synsem &
			  [ LOCAL [ CAT vp_bse_cat,
				    CONJ cnil ] ] > ].

; want (doesn't passivize)
inf_non_trans_subst := basic_three_arg_subst & non_trans_subst &
  [ LOCAL.CAT.VAL [ --KEYCOMP #comp,
		    COMPS < *top*, 
			    #comp & synsem &
			    [ LOCAL [ CAT vp_inf_cat,
				      CONJ cnil ] ] > ] ].

pp_inf_subst := unsat_three_arg_subst &
  [ LOCAL.CAT.VAL [ --KEYCOMP #comp,
		    COMPS < synsem &
			    [ LOCAL [ CAT pp_cat,
				      CONJ cnil,
				      KEYS.KEY selected_rel ] ],
			    #comp & synsem &
			    [ LOCAL [ CAT vp_inf_cat,
				      CONJ cnil ] ] > ] ].

; We treat raising as the identification of the CONT attribute of the SUBJ and
; the COMPS.SUBJ, rather than the whole synsem, in part to enable the 
; underspecification of the base/non3sg lex-entry for verbs, where otherwise
; CASE information would clash in examples like "Kim believes Sandy to be ready."
; In fact, we only identify the INDEX of the two subjects - see comments by
; sor_inf_subst.
; 
; DPF 17-Nov-99 - The TOP handle of the SUBJ must be identified with the
; KEY.HANDEL of the ssr_subst predicate, since contracted negation auxiliary
; verbs have the TOP be the neg_rel's handle, but the subject as in 
; "I can't leave" should have its HANDEL identified with that of the
; can_rel, not the neg_rel.

ssr_subst := two_arg_subst &
  [ LOCAL [ CAT.VAL [ SUBJ < [ LOCAL local_min & [ CONT [ TOP #top,
							  INDEX #cont ] ] ] >,
		      COMPS < [ LOCAL local_min &
				[ CAT.VAL [ SUBJ < [ LOCAL.CONT.INDEX #cont,
						     NON-LOCAL [ SLASH 0-dlist,
								 REL 0-dlist,
								 QUE 0-dlist ] ] >,
					    COMPS *olist* ],
				  KEYS.MESSAGE 0-dlist ] ] > ],
	    KEYS.KEY.HANDEL #top ] ].

;;; AAC - added to avoid overspecific glb types

ssr_two_arg_subst := ssr_subst & basic_two_arg.

ssr_inf_subst := ssr_subst & inf_intrans_subst.

ssr_pp_inf_subst :=  basic_three_arg_subst &
  [ LOCAL [ CAT.VAL 
	   [ SUBJ < [ LOCAL.CONT [ TOP #top,
				   INDEX #subj ] ] >,
	     COMPS < synsem &
		     [ LOCAL [ CAT pp_cat,
			       CONJ cnil ] ] ,
		     [ LOCAL local_min &
			     [ CAT [ HEAD verbal & strict_type &
					  [ VFORM inf ],
				     VAL [ SUBJ < [ LOCAL.CONT.INDEX #subj,
						    NON-LOCAL [ SLASH 0-dlist,
								REL 0-dlist,
								QUE 0-dlist ]] >,
						   COMPS *olist* ] ],
					  KEYS.MESSAGE 0-dlist ] ] > ],
	    CONT.TOP #top ] ].

ssr_prdp_pp_subst := basic_three_arg_subst &
  [ LOCAL [ CAT.VAL 
              [ SUBJ < [ LOCAL local_min & [ CONT [ TOP #top,
						INDEX #subj ] ] ] >,
		COMPS < [ LOCAL local_min &
			  [ CAT [ HEAD.PRD +,
				  VAL [ SUBJ < [ LOCAL.CONT.INDEX #subj,
						 NON-LOCAL [ SLASH 0-dlist,
							     REL 0-dlist,
							     QUE 0-dlist ] ] >,
					SPR *olist*,
					COMPS *olist* ],
				  MC na ] ] ],
			synsem &
			[ LOCAL [ CAT pp_cat,
				  CONJ cnil ] ] > ],
	    CONT.TOP #top ] ].

expl_pp_cp_subst :=  basic_three_arg_subst &
  [ LOCAL [ CAT.VAL.COMPS < synsem &
			    [ LOCAL [ CAT pp_cat,
				      CONJ cnil ] ], 
			    synsem &
			           [ LOCAL [ CAT cat & [ HEAD comp,
							 VAL [ SUBJ *olist*,
							       COMPS *olist* ] ],
					     CONJ cnil ] ] >,
	    KEYS.--COMPKEY _to_rel_s ] ].

; Raising synsems have to identify the LOCAL value of the raised synsem with
; that of the VP's subject's synsem, rather than identifying the synsems
; themselves, due to our lexical threading of SLASH: if the raised complement
; is extracted, it will be of type gap, and therefore have a non-empty SLASH,
; but we don't want the lower VP complement's subject to also then have a
; non-empty SLASH.  But cf. note above for subj-subj raising, where maybe we
; even want to restrict the identity to CONT only.
;   Indeed, this seems necessary, since CASE blocks unification for
; 'Kim made him sleep' where our (dual-purpose) 'sleep' requires its subject
; to be [CASE nom] (in order to block the sentence "them sleep"), but when its
; subject is raised to object as with "make", there's a conflict with the
; [CASE acc] on the object of "make".  So here again, we make the raising
; identity hold only for CONT.
; DPF (30-Apr-99) In fact, we now have to further restrict the identity to
; only the INDEX, since if we identify all of CONT, we get the handles of the
; higher NP and the VP's subject being identified, but since we also want to 
; lexically identify a predicate's handle with that of its arguments (subject to
; classes ; of lexical exceptions like for entries with CP complements), we get 
; an unwanted identity of the handles of the higher and lower verbs through the
; identity of the two NPs.  So if we can't sustain this minimal identification
; for equi and raising, we'll have to give up on identifying the handles of
; lexical entries and their arguments.  Possible trouble spots are locative
; inversions like "On the corner seemed to be an abandoned house".

sor_inf_subst := inf_trans_raising_subst & 
  [ LOCAL.CAT.VAL.COMPS < synsem &
			  [ LOCAL.CONT.INDEX #subj,
			    OPT - ], 
			  [ LOCAL local_min &
				  [ CAT.VAL.SUBJ 
						< [ LOCAL.CONT.INDEX #subj,
						    NON-LOCAL [ SLASH 0-dlist,
								REL 0-dlist,
								QUE 0-dlist ] ]>,
					KEYS.MESSAGE 0-dlist ],
				OPT - ] > ].

sor_bse_subst := bse_nontrans_raising_subst &
  [ LOCAL.CAT.VAL.COMPS < [ LOCAL.CONT.INDEX #subj,
			    OPT - ], 
			  [ LOCAL local_min &
				  [ CAT.VAL.SUBJ 
					     < [ LOCAL.CONT.INDEX #subj,
						 NON-LOCAL [ SLASH 0-dlist,
							     REL 0-dlist,
							     QUE 0-dlist ] ] > ],
			    OPT - ] > ].

sor_inf_non_trans_subst := inf_non_trans_subst & 
  [ LOCAL.CAT.VAL.COMPS < [ LOCAL.CONT.INDEX #subj,
			    OPT - ],
			  [ LOCAL local_min &
				  [ CAT.VAL.SUBJ 
					     < [ LOCAL.CONT.INDEX #subj,
						 NON-LOCAL [ SLASH 0-dlist,
							     REL 0-dlist,
							     QUE 0-dlist ] ]>,
					KEYS.MESSAGE 0-dlist ],
				OPT - ] > ].

particle_subst := unsat_two_arg_subst &
  [ LOCAL [ CAT.VAL.COMPS < lex_synsem & 
			    [ LOCAL local_min &
				    [ CAT.HEAD.PRD -,
				      KEYS.KEY selected_rel &
						     [ HANDEL #hand ] ],
			      NON-LOCAL [ SLASH 0-dlist,
					  REL 0-dlist,
					  QUE 0-dlist ] ], ... >,
	    KEYS.KEY [ HANDEL #hand ] ] ].

;; DPF (29-Jan-99) Modified particle_NP_subst to exclude pronominal NP objects,
;; to block *Kim looked up it"

particle_NP_subst := particle_subst & three_arg &
  [ LOCAL.CAT.VAL.COMPS < lex_synsem,
			  synsem & [ LOCAL [ CAT nomp_cat_acc_min,
					     CONJ cnil,
					     KEYS.KEY nonpro_rel ] ] > ].

generic_NP_particle_subst := unsat_subst & 
  [ LOCAL [ CAT.VAL.COMPS < synsem & [ LOCAL [ CAT nomp_cat_acc_min,
					       CONJ cnil ] ],
			    lex_synsem &
			      [ LOCAL local_min &
				      [ CAT.HEAD.PRD -,
					KEYS.KEY #ckey & selected_rel ],
				NON-LOCAL [ SLASH 0-dlist,
					    REL 0-dlist,
					    QUE 0-dlist ] ], ... >,
	    KEYS.--COMPKEY #ckey ] ].

NP_particle_subst := generic_NP_particle_subst & trans_subst & three_arg &
  [ LOCAL.CAT.VAL.COMPS < synsem, synsem > ].

particle_plus_subst := particle_subst & three_arg_subst.

particle_prd_subst := particle_plus_subst & 
  [ LOCAL.CAT.VAL.COMPS < *top*, 
			  synsem & 
			  [ LOCAL [ CAT prd_cat,
				    CONJ cnil ] ] > ].

; 'turn out to be'
particle_inf_subst := particle_plus_subst & 
  [ LOCAL.CAT.VAL [ --KEYCOMP #comp,
		    COMPS < *top*, 
			    #comp & synsem &
			    [ LOCAL [ CAT vp_inf_cat,
				      CONJ cnil ] ] > ] ].

particle_pp_subst := particle_plus_subst & 
  [ LOCAL.CAT.VAL.COMPS < *top*, 
			  synsem &
			  [ LOCAL [ CAT pp_cat,
				    CONJ cnil ] ] > ].

; 'find out that S'
particle_cp_subst := particle_plus_subst & 
  [ LOCAL.CAT.VAL [ --KEYCOMP #comp,
		    COMPS < *top*, 
			    #comp & synsem &
			    [ LOCAL [ CAT s_cat_fin_v_c,
				      CONJ cnil ] ] > ] ].

;; 'leave it to Kim to schedule the meeting'
unsat_four_arg_subst := unsat_three_arg_subst &
  [ LOCAL.CAT.VAL.COMPS < synsem, 
			  synsem,
			  synsem, ... > ].

; 'leave it to Kim to find the answer'
expl_pp_inf_subst := unsat_four_arg_subst & trans_subst & four_arg &
  [ LOCAL.CAT.VAL [ --KEYCOMP #comp,
		    COMPS < *top*, 
			    synsem &
			    [ LOCAL [ CAT pp_cat,
				      CONJ cnil ] ] ,
			    #comp & synsem &
			    [ LOCAL [ CAT vp_inf_cat,
				      CONJ cnil ] ] > ] ].

;; 'put kim through to Sandy'
particle_np_pp_subst := generic_NP_particle_subst & four_arg &
  [ LOCAL.CAT.VAL.COMPS < synsem, 
			  synsem, 
			  synsem &
			  [ LOCAL [ CAT pp_cat,
				    CONJ cnil ] ] > ].


;; 'bet Kim a fortune that Sandy would win'
;; DPF (19-Oct-98) Added hack to block extraction from the CP complement, since
;; don't know how to avoid topicalized imperative parse for "Abrams bet Browne
;; Chiang slept with subject of "slept" topicalized.

np_np_cp_subst := unsat_four_arg_subst & trans_subst & four_arg &
  [ LOCAL.CAT.VAL [ --KEYCOMP #comp,
		    COMPS < synsem & [ LOCAL [ CAT nomp_cat_acc_min,
					       CONJ cnil ] ],
			    synsem & [ LOCAL [ CAT nomp_cat_acc_min,
					       CONJ cnil ] ],
			    #comp & synsem &
			    [ LOCAL [ CAT s_cat_fin_v_c,
				      CONJ cnil ],
			      NON-LOCAL.SLASH 0-dlist ] > ] ].

; E.g., "I'm not doing too badly"

adv_subst := unsat_two_arg_subst &
  [ LOCAL [ CAT.VAL.COMPS < lex_synsem & 
			    [ LOCAL local_min &
				    [ CAT.HEAD adv,
				      KEYS [ KEY adv_rel &
						 [ HANDEL #hand,
						   ARG #event ],
					     MESSAGE 0-dlist ] ] ] >,
	    KEYS.KEY [ HANDEL #hand,
		       EVENT #event ] ] ].

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; VERB SYNSEMS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Verb synsems should inherit from one valence type and one linking type.
;; The type verb_synsem is given a non-empty SPR value so VPs can be modified
;; by PPs, but (hack) the synsem is of type anti_synsem to block unification, to
;; avoid ever picking up an actual specifier.
;;   Added VIT links for the moment, to satisfy VIT requirements for visibility
;; of TENSE and MOOD information.  (Actually, moved VITTENSE specification to
;; the various inflectional affixes in lexrules.tdl, to accommodate the collapse
;; of the base and fin-non3sg verb forms.
;; DPF (8-Jul-98) Added QUE 0-dlist, REL 0-dlist to block pied piping in verb
;; phrases (taking advantage of lexical amalgamation of these features, together
;; with our treatment of subject-WH as extraction (where only local features are
;; propagated in SLASH).

verb_synsem := lex_synsem &
  [ LOCAL [ STEMHEAD vstem,
            AGR #agr,
            CAT [ HEAD verb* & [ TAM.MOOD #mood ],
		  VAL [ SUBJ < synsem_min & #subj &
			       [ LOCAL local_min &
				       [ AGR #agr ] ] >,
			SPR < anti_synsem >,
			COMPS #comps ] ],
	    CONT.INDEX.E.MOOD #mood,
	    ARG-S < #subj . #comps > ],
    NON-LOCAL [ QUE 0-dlist,
		REL 0-dlist ] ].

atrans_verb := verb_synsem & intrans_subst & atrans_lt.

unerg_verb := verb_synsem & intrans_subst & arg1_subj_lt.
  
unacc_verb := verb_synsem & intrans_subst & unacc_lt.
  
; For at least main verb "have" (e.g, "Kim has some rice")
poss_verb := verb_synsem & two_arg_subst & two_arg & poss_lt &
  [ LOCAL.CAT.VAL.COMPS < synsem & [ LOCAL [ CAT nomp_cat_acc_min,
					     CONJ cnil ] ] > ].
  
np_trans_verb := verb_synsem & np_trans_subst & trans_lt.
  
np_non_trans_verb := verb_synsem & np_non_trans_subst & two_arg & trans_lt.

np_non_trans_unacc_verb := verb_synsem & np_non_trans_subst & two_arg & 
			   unacc_lt.

basic_prep_intrans_verb := verb_synsem & prep_intrans_subst & two_arg.

;; come to
prep_intrans_verb := basic_prep_intrans_verb & prep_intrans_lt.

;; move to
prep_intrans_unacc_verb := basic_prep_intrans_verb & prep_intrans_unacc_lt.

;; look for
;;
empty_prep_intrans_verb := verb_synsem & prep_intrans_subst & two_arg & 
			   empty_prep_intrans_lt.

;; suggest on Tuesday
;;
prep_intrans_event_verb := verb_synsem & prep_intrans_subst & two_arg & 
			   prep_intrans_event_lt.

;; put, move
;;
prep_trans_verb := verb_synsem & prep_trans_subst & prep_trans_lt.
  
;; 
;;
prep_non_trans_verb := verb_synsem & prep_non_trans_subst & prep_trans_lt.
  
;; remind-of
;;
empty_prep_trans_verb := verb_synsem & prep_trans_subst & empty_prep_trans_lt.

;; get-hold-of
;;
empty_prep_non_trans_verb := verb_synsem & prep_non_trans_subst & 
			     empty_prep_trans_lt.

;; regard Kim as tall
np_comp_verb := verb_synsem & np_comp_subst & obj_equi_lt &
  [ LOCAL [ CAT.VAL.--KEYCOMP.LOCAL.CONT.TOP #top,
	    CONT.TOP #top ] ].

;; strike Kim as tall
np_comp_obj_verb := verb_synsem & np_comp_subst & 
  [ LOCAL [ CAT.VAL.COMPS < [ LOCAL.CONT.INDEX #index ],
			  [ LOCAL.CONT.INDEX #event ] >,
	    KEYS.KEY arg13_rel & [ ARG3 #event,
				   ARG1 #index ] ] ].


to_trans_verb := empty_prep_trans_verb &
  [ LOCAL.KEYS.--OCOMPKEY _to_rel_s ].
  
ditrans_verb := verb_synsem & ditrans_subst & ditrans_lt.
  
ditrans_only_verb := verb_synsem & ditrans_subst & ditrans_lt &
  [ LOCAL.CAT.VAL.COMPS < synsem, synsem > ].

; 'talk to Kim about Sandy'
double_pp_verb := verb_synsem & double_pp_subst & double_pp_lt.

; Raising verbs which take an infinitival complement restrict it to being
; [ MESSAGE 0-dlist ], which ensures that the VP will be headed by the 
; non-propositional "to" complementizer, which identifies its handle with
; that of its VP complement.

ssr_verb := verb_synsem & ssr_inf_subst & basic_two_arg & ssr_lt &
  [ LOCAL [ CAT.VAL.--KEYCOMP.LOCAL.CONT.TOP #chand,
	    CONT.H-CONS <! qeq &
			   [ SC-ARG #arghand,
			     OUTSCPD #chand ] !>,
	    KEYS.KEY.ARG4 #arghand ] ].

ssr_prd_verb := verb_synsem & ssr_two_arg_subst & ssr_lt &
  [ LOCAL [ CAT.VAL [ COMPS < synsem & #comp & 
			      [ LOCAL [ CAT prd_cat,
					KEYS.KEY.EVENT #cind,
					CONJ cnil ] ] >,
		      --KEYCOMP #comp & [ LOCAL.CONT.TOP #hand ] ],
	    CONT [ LISZT <! #key !>,
		   H-CONS <! !> ],
	    KEYS.KEY #key & [ HANDEL #hand,
			      ARG3 #cind ] ] ].


ssr_pp_inf_verb := verb_synsem & ssr_pp_inf_subst & ssr_expr_lt.

ssr_prdp_pp_verb := verb_synsem & ssr_prdp_pp_subst & ssr_prdp_expr_lt.

sor_verb := verb_synsem & sor_inf_subst & sor_lt.

sorb_verb := verb_synsem & sor_bse_subst & sor_lt.

sor_non_trans_verb := verb_synsem & sor_inf_non_trans_subst & sor_lt.

subj_equi_prp_verb := verb_synsem & prp_intrans_subst & subj_equi_lt.

subj_equi_prd_verb := verb_synsem & prd_intrans_subst & two_arg & 
		      subj_equi_prd_lt.

obj_equi_prd_verb := verb_synsem & prd_trans_subst & obj_equi_prd_lt.

obj_equi_non_trans_prd_verb := verb_synsem & prd_non_trans_subst & 
			       obj_equi_prd_lt.

; ERB (07-10-96) I am working with the verb 'know' as a prototype for a verb
; that selects by the semantic type (for now expressed as a feature) of its
; sentential complement rather than by the value of CMP or some such hack.  In
; order to do so, I have changed the types around here.  In particular, I am
; adding a new type cp_prop+ques_intrans_verb that takes a sentential
; complement but doesn't care if its a proposition or a question (for verbs
; like 'know').  A further axis of variation is the VFORM of the complement
; (fin vs. inf).  Since my analysis of 'know' never makes use of the resolved
; subtypes (e.g., cp_prop_intrans_verb) I am not adding to the resolved
; subtypes, and just making the old ones inherit from the finite side of
; things for now.  The future inf_cp_prop_intrans_verb will probably be the
; type of subject equi verbs. A further future modification would involve the
; addition of cp_command_intrans_verb and cp_command+prop_intrans_verb for
; verbs like 'insist'.
;
; DPF (19-Jun-98) This type cannot itself simply add the complement CP's 
; (underspecified) message to its LISZT, since the generation algorithm requires
; that no relation on LISZT will ever get more specialized during parsing.  So 
; we make MESSAGE be list-valued (the empty list for all but complementizers
; and clauses), and have the Head-Complement rule append the values of MESSAGE
; from both of its daughters, since the msg comes from the head if it's a
; complementizer, and from the non-head if the head is a verb.

basic_cp_prop+ques_verb := verb_synsem &
  [ LOCAL [ CAT.VAL [ --KEYCOMP 
			  [ LOCAL local_min &
				  [ CAT [ HEAD verbal & strict_type &
					       [ INV - ] ],
				    KEYS.MESSAGE 1-dlist &
					<! message !> ] ] ],
	    CONT.LISZT.LIST < relation, ... > ] ].

cp_prop+ques_verb := basic_cp_prop+ques_verb &
  [ LOCAL.CAT.VAL.--KEYCOMP.LOCAL.KEYS.MESSAGE <! prop_ques_rel !> ].

fin_cp_prop+ques_verb := cp_prop+ques_verb &
  [ LOCAL.CAT.VAL.--KEYCOMP.LOCAL.CAT s_cat_fin_unspec ].

fin_or_inf_cp_prop+ques_verb := cp_prop+ques_verb &
  [ LOCAL.CAT.VAL.--KEYCOMP.LOCAL.CAT s_cat_fin_or_inf_v_c ].

;; DPF 4/21/98 - Moved [ COMPS.FIRST.LOCAL.CAT.MC - ] from cp_ques_intrans_verb
;; to cp_intrans_verb, to block spurious parse for e.g. "Kim knows who left"
cp_intrans_verb := fin_cp_prop+ques_verb & cp_intrans_subst & two_arg &
		   arg14_lt.

; 'know'
cp_fin_inf_intrans_verb := fin_or_inf_cp_prop+ques_verb & cp_intrans_subst &
                              two_arg & arg14_lt.

cp_prop_intrans_verb := cp_intrans_verb &
  [ LOCAL.CAT.VAL.COMPS < [ LOCAL.KEYS.MESSAGE 1-dlist &
					       <! prpstn_rel !> ] > ].

cp_ques_intrans_verb := cp_intrans_verb &
  [ LOCAL.CAT.VAL.COMPS < [ LOCAL.KEYS.MESSAGE 1-dlist &
					       <! int_rel !> ] > ].

;; suppose
cp_prop_raise_key_verb := fin_cp_prop+ques_verb & cp_intrans_subst & two_arg &
			  alt_arg14_lt &
  [ LOCAL [ CAT.VAL.COMPS < [ LOCAL [ KEYS [ KEY #key,
					     MESSAGE 1-dlist &
						     <! prpstn_rel !> ] ] ] >,
	    CONT.LISZT.LIST < #altkey, ... >,
	    KEYS [ KEY #key & mod_role_rel,
		   ALTKEY #altkey ] ] ].

;; tell Kim that/whether S
;; inform Kim that S
np_trans_cp_verb := fin_cp_prop+ques_verb & cp_trans_subst & cp_trans_lt.

;; bet Kim ten cents that S
np_np_cp_verb := fin_cp_prop+ques_verb & np_np_cp_subst & tritrans_lt.

;; explain to Kim that S
pp_cp_verb := fin_cp_prop+ques_verb & pp_cp_subst & pp_cp_lt &
  [ LOCAL.CAT.VAL.COMPS < synsem, 
			  [ LOCAL.KEYS.MESSAGE 1-dlist &
					       <! prpstn_rel !> ] > ].

;; ask Kim whether S
np_trans_cp_ques_verb := fin_cp_prop+ques_verb & cp_trans_subst & cp_trans_lt &

  [ LOCAL.CAT.VAL.COMPS < synsem, [ LOCAL.KEYS.MESSAGE 1-dlist &
				    <! int_rel !> ] > ].

;; persuade Kim that S
np_trans_cp_prop_verb := fin_cp_prop+ques_verb & cp_trans_subst & cp_trans_lt &

  [ LOCAL.CAT.VAL.COMPS < synsem, 
			  [ LOCAL.KEYS.MESSAGE 1-dlist &
					       <! prpstn_rel !> ] > ].

subj_equi_verb := cp_prop+ques_verb & inf_intrans_subst & two_arg & subj_equi_inf_lt.

obj_equi_verb := cp_prop+ques_verb & inf_trans_subst & obj_equi_inf_lt.

oeq_pp_inf_verb := verb_synsem & pp_inf_subst & three_arg & obj_equi_inf_lt &
		   empty_prep_intrans_lt.

pp_inf_seq_verb := cp_prop+ques_verb & pp_inf_subst & three_arg & pp_inf_seq_lt.

anom_equi_verb := cp_prop+ques_verb & inf_non_trans_subst & anom_equi_lt &
  [ LOCAL.CONT.H-CONS <! !> ].

particle_inf_verb := cp_prop+ques_verb & particle_inf_subst & 
		     anom_equi_particle_lt.

particle_cp_verb := fin_cp_prop+ques_verb & particle_cp_subst & 
		    particle_cp_lt.

expl_it_subj_verb := basic_cp_prop+ques_verb & expl_pp_cp_subst & 
		     expl_it_subj_lt.

expl_pp_inf_oeq_verb := cp_prop+ques_verb & expl_pp_inf_subst & 
			expl_pp_inf_oeq_lt.

expl_pp_inf_seq_verb := cp_prop+ques_verb & expl_pp_inf_subst & 
			expl_pp_inf_seq_lt.

atrans_inf_verb := cp_prop+ques_verb & inf_intrans_subst & two_arg & 
		   atrans_inf_lt.

for_to_verb := verb_synsem & for_inf_intrans_subst & two_arg & trans_lt.

expl_prep_trans_verb := verb_synsem & non_trans_subst & 
			expl_prep_trans_lt & three_arg_subst &
  [ LOCAL.CAT.VAL.COMPS < *top*, 
			  synsem &
			  [ LOCAL [ CAT pp_cat,
				    CONJ cnil ] ] > ].

particle_verb := verb_synsem & particle_subst & arg1_subj_lt & two_arg &
  [ LOCAL.CAT.VAL.COMPS < *top* > ].

particle_NP_verb := verb_synsem & particle_NP_subst & particle_NP_lt.

; DPF (27-Apr-99) Added co-predication of particle and verb, which is restricted
; to particles with an ARG3 attribute.

prep_particle_NP_verb := particle_NP_verb &
  [ LOCAL [ CAT.VAL.COMPS < [ LOCAL.KEYS.KEY.ARG3 #index ], ...>,
	    KEYS.KEY.ARG3 #index ] ].

NP_particle_verb := verb_synsem & NP_particle_subst & NP_particle_lt.

NP_prep_particle_verb := NP_particle_verb &
  [ LOCAL [ CAT.VAL.COMPS < synsem, [ LOCAL.KEYS.KEY.ARG3 #index ], ...>,
	    KEYS.KEY.ARG3 #index ] ].

particle_prd_verb := verb_synsem & particle_prd_subst & anom_equi_prd_lt.

particle_pp_verb := verb_synsem & particle_pp_subst & 
		    empty_prep_particle_intrans_lt.

particle_np_pp_verb := verb_synsem & particle_np_pp_subst & empty_prep_particle_trans_lt.

; prefer it if ...
expl_obj_cp_verb := fin_cp_prop+ques_verb & cp_trans_subst & expl_obj_cp_lt.

adv_verb := verb_synsem & adv_subst & arg1_subj_lt & two_arg &
  [ LOCAL [ CAT.VAL.COMPS < *top* >,
	    CONT.LISZT.LIST < #key, ... >,
	    KEYS.KEY #key ] ].

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Modifier synsems
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; When changing, remember to also modify verb_participle_affix in lexrules.tdl
isect_synsem := canonical_synsem &
  [ LOCAL [ CAT.HEAD.MOD < [ LOCAL intersective_mod ] >,
	    CONT.TOP #hand,
	    KEYS.KEY.HANDEL #hand ] ].

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; VERBS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; The semantics of a main verb consists of the "main" handel for the sentence
; and a list of relations.  A pointer to the main or head relation in the list
; is kept in the KEY attribute.

main_verb_sans_key := mcna & nonconj & nonmsg & hc-to-phr &
  [ INFLECTED -,
    SYNSEM.LOCAL [ CAT.HEAD verb* & [ AUX -*,
				      INV - ],
		   CONT.LISZT.LIST < v_event_rel, ... >,
                   KEYS.KEY.LABEL *cons* ] ].

;;; AAC - all main_verbs have single element LISZTs

main_verb := main_verb_sans_key & topkey &
  [ SYNSEM.LOCAL [ KEYS.KEY #key,
		   CONT.LISZT <! #key !> ] ].

main_verb_std := main_verb.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; AUXILIARY VERBS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Auxiliary verbs are subject-to-subject raising verbs which also raise the 
; content of the VP complement, possibly tacking an additional relation on the
; end.  They also raise the context of the VP complement, for now at least to
; propagate tense information.
; AUX verbs are further classified by the type of VP complement they 
; select for.  Also, AUX verbs optionally take a neg (post-head) specifier.

aux_verb := verb_synsem &
  [ LOCAL [ CAT.HEAD.TAM #tam,
	    CONT.INDEX.E #tam ] ].
		
aux_verb_ssr := aux_verb & ssr_subst & basic_two_arg &
  [ LOCAL.CAT.VAL [ --KEYCOMP #comp,
		    COMPS < #comp, ... > ] ].

aux_verb_word_super := mcna & nonconj & nonmsg & hc-to-phr &
  [ INFLECTED +,
    SYNSEM aux_verb_ssr ]. 

aux_verb_word := aux_verb_word_super &
  [ SYNSEM.LOCAL.CAT [ HEAD.AUX +*,
		       POSTHEAD + ] ].

bse_aux_verb_word := aux_verb_word &
  [ SYNSEM.LOCAL local_min &
		 [ CAT [ HEAD [ VFORM fin*,
				PRD -,
				MOD < [ LOCAL intersective_mod &
					      [ CAT nbar_cat ] ] > ],
			 VAL [ SUBJ < [ OPT - ] >,
			       COMPS < synsem &
				       [ LOCAL [ CAT vp_bse_cat,
						 CONJ cnil ],
					 OPT - ] > ] ] ] ].

;; ought, going
inf_aux_verb_word := aux_verb_word_super & 
  [ SYNSEM aux_verb_ssr &
	   [ LOCAL local_min &
		 [ CAT [ HEAD.AUX -,
                         POSTHEAD +,
			 VAL.COMPS < synsem &
				     [ LOCAL [ CAT vp_inf_cat,
					       CONJ cnil ],
				       OPT - ] > ] ] ] ].

;; Only for auxiliary "have"
psp_aux_verb_word := aux_verb_word &
  [ SYNSEM aux_verb_ssr &
	   [ LOCAL [ CAT.VAL.COMPS < synsem &
				     [ LOCAL [ CAT vp_cat &
						   [ HEAD verb &
							  [ VFORM psp ] ],
					       CONT.TOP #hand,
					       CONJ cnil ],
				       OPT - ] >,
		     KEYS.KEY [ HANDEL #hand ] ] ] ].
; Only for the copula
prd_aux_verb_word := aux_verb_word &
  [ SYNSEM aux_verb_ssr &
	   [ LOCAL [ CAT.VAL.COMPS < [ LOCAL local_min &
					   [ CAT [ HEAD.PRD +,
						   VAL [ SUBJ < synsem >,
							 COMPS *olist*,
							 SPR *olist* ],
						   MC na ],
					     KEYS.KEY independent_rel &
						 [ EVENT #event ] ],
				       OPT - ] >,
		     CONT.INDEX #event ] ] ].

raise_cont := word_or_lexrule &
  [ SYNSEM.LOCAL [ CAT.VAL.COMPS < [ LOCAL local_min &
					   [ CONT [ TOP #hand,
						    INDEX #index ] ] ], ... >,
		   CONT [ TOP #hand,
			  INDEX #index,
			  LISZT <! !> ] ] ].

add_cont := word_or_lexrule &
  [ SYNSEM.LOCAL [ KEYS.KEY #key,
		   CONT.LISZT.LIST < relation & #key, ... > ] ].

; Real modal verbs are auxiliary verbs which select a base form complement.
; They only exist in finite forms.

generic_modal_verb_word := aux_verb_word_super &
  [ SYNSEM aux_verb_ssr &
	   [ LOCAL [ CAT.VAL.--KEYCOMP.LOCAL.CONT.TOP #chand,
		     CONT [ INDEX #event,
			    H-CONS.LIST < qeq &
					   [ SC-ARG #arghand,
					     OUTSCPD #chand ], ... > ],
		     KEYS.KEY [ EVENT #event,
				ARG4 #arghand ] ] ] ].

fin_modal_verb_word := generic_modal_verb_word &
  [ SYNSEM.LOCAL [ CAT [ HEAD [ PRD -,
				VFORM fin* ],
			 POSTHEAD +,
			 VAL.SUBJ < synsem & [ LOCAL [ CAT nomp_cat_nom_min,
						       CONJ cnil ],
					       OPT - ] > ],
		   CONT psoa ] ].

pres_modal_verb_word := fin_modal_verb_word & 
  [ SYNSEM.LOCAL.CAT.HEAD.TAM [ TENSE present*,
				ASPECT no_aspect* ] ].

; Assume for now that all modals have simple present tense semantics,
; ignoring the habitual past readings possible for "would" and "could" -
; these will have to be separate lexical entries.

modal_verb_word := pres_modal_verb_word & bse_aux_verb_word &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT vp_bse_cat ].

pos_modal_verb_word := modal_verb_word & topkey &
  [ SYNSEM.LOCAL [ CAT.HEAD.AUX +*,
		   CONT [ LISZT <! #key !>,
			  H-CONS <! qeq !> ],
		   KEYS.KEY #key & [ LABEL *cons* ] ] ].

will_verb_word := fin_modal_verb_word & bse_aux_verb_word &
  [ SYNSEM.LOCAL [ CAT [ HEAD.TAM.TENSE future*,
			 VAL.COMPS.FIRST.LOCAL.CAT vp_bse_cat ],
		   KEYS [ KEY [ EVENT #event ],
			  --COMPKEY [ EVENT #event ] ] ] ].

pos_will_verb_word := will_verb_word & topkey &
  [ SYNSEM.LOCAL [ CAT.HEAD.AUX +*,
		   CONT [ LISZT <! #key !>,
			  H-CONS <! qeq !> ],
		   KEYS.KEY #key ] ].

ought_verb_word := pres_modal_verb_word & inf_aux_verb_word &
  [ SYNSEM.LOCAL.CAT.HEAD.MOD < [ LOCAL intersective_mod &
                                        [ CAT nbar_cat ] ] > ].

pos_ought_verb_word := ought_verb_word & topkey &
  [ SYNSEM.LOCAL [ KEYS.KEY #key,
		   CONT [ LISZT <! #key !>,
			  H-CONS <! qeq !> ] ] ].

past_ought_verb_word := fin_modal_verb_word & inf_aux_verb_word & topkey &
  [ SYNSEM.LOCAL [ CAT.HEAD [ TAM [ TENSE past*,
                                    ASPECT no_aspect* ],
                              MOD < [ LOCAL intersective_mod &
                                            [ CAT nbar_cat ] ] > ],
                   CONT [ LISZT <! #key !>,
			  H-CONS <! qeq !> ],
		   KEYS.KEY #key ] ].

#|
quasimodal_word := generic_modal_verb_word & inf_aux_verb_word &
  [ SYNSEM.LOCAL [ CAT [ HEAD.MOD < >,
			   VAL [ SUBJ < synsem & 
					[ LOCAL [ CAT nomp_cat_nom_min,
						  CONJ cnil ] ] > ] ],
		   CONT.LISZT <! #key !>,
		   KEYS.KEY #key  ] ].
|#
; DPF (05-May-99) Temporary hack: make this semantically empty for Verbmobil
;; see lkbpatches

quasimodal_word := inf_aux_verb_word &
  [ SYNSEM [ LOCAL [ CAT [ HEAD.MOD < >,
			   VAL.COMPS.FIRST.LOCAL [ KEYS.KEY [ HANDEL #khand ],
						   CONT [ TOP #hand,
							  INDEX #event ] ] ],
		     CONT [ TOP #hand,
			    INDEX #event,
			    LISZT <! !>,
			    H-CONS <! !> ],
		     KEYS.KEY [ HANDEL #khand,
				EVENT #event ] ] ] ]. 

quasimodal_psp_word := inf_aux_verb_word & generic_modal_verb_word & topkey &
  [ SYNSEM.LOCAL [ CAT.HEAD [ MOD < >,
			      VFORM psp,
			      TAM.TENSE present*,
			      PRD -],
		   CONT.LISZT <! #key !>,
		   KEYS.KEY #key ] ].

; DPF 09-Jan-00 - Removed SLASH 0-dlist from COMPS.FIRST, since it was blocking
; e.g. "When's he leaving"

contracted_aux_word :< word.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; NOUNS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;       TYPE                 ISA                what's it for?
;       nominal_synsem       lex_synsem         all nouns
;       xpro_synsem          nominal_synsem     pro v. non-pro dimension
;       xref_synsem          nominal_synsem     ref v. non-ref dimension
;       pronominal_synsem    xpro_synsem        all pronouns
;       nonpronominal_synsem xpro_synsem        all non-pronominal nouns
;       ref_synsem           xref_synsem        personal pro's & nouns
;       non_ref_synsem       xref_synsem        it, there, wh-pronouns
;       ref_pro_synsem       pronominal_synsem  personal pronouns
;                            & ref_synsem
;       non_ref_pro_synsem   pronominal_synsem  it, there, wh-pronouns
;                            & non_ref_synsem
;       noun_synsem          non_pronominal_synsem all non-pro nouns
;                            & ref_synsem 

; The "default" statement that most nouns identify their AGR and INDEX
; will live on noun_synsem and non_ref_pro_synsem, and then be restated for
; personal pronouns other than my special 'they'.  (All this because I can't
; be bothered now to set up a special default type...) 

basic_nom_synsem := lex_synsem & 
  [ LOCAL [ STEMHEAD nstem,
            CAT.HEAD nominal,
	    CONT nom-obj ] ].

nominal_synsem := basic_nom_synsem &
  [ LOCAL.CAT.HEAD.POSS - ].

xpro_synsem :< nominal_synsem.
xref_synsem :< nominal_synsem.

; DPF 23-Jul-99 - Add missing MOD < >.  Hmm.

pronominal_synsem := xpro_synsem &
  [ LOCAL [ CAT [ HEAD noun* &
		       [ MOD < > ],
		  VAL.SUBJ < > ] ] ].

nonpronominal_synsem :< xpro_synsem.

; AAC - added following types for verbal_gerund, poss_clitic etc

nonpro_nomod_synsem := nomod_synsem & nonpronominal_synsem.
nonpro_onearg_synsem := nonpronominal_synsem & one_arg.
nomod_onearg_synsem := nomod_synsem & one_arg.
nonpro_nomod_onearg_synsem := nonpro_nomod_synsem & basic_one_arg.

ref_synsem := xref_synsem &
  [ LOCAL [ KEYS.KEY #key,
	    CONT [ INDEX #inst & ref-ind,
		   LISZT.LIST < basic_nom_rel & #key & 
				    [ INST #inst ], ... > ] ] ].

non_ref_synsem := xref_synsem & nomod_synsem & zero_arg &
  [ LOCAL.CAT.VAL [ SPR < >,
		    COMPS < > ] ].

ref_pro_synsem := pronominal_synsem & ref_synsem & nomod_synsem.

non_ref_pro_synsem := pronominal_synsem & non_ref_synsem &
  [ LOCAL [ AGR #agr,
	    CONT.INDEX #agr ] ].

noun_synsem := nonpronominal_synsem & ref_synsem &
  [ LOCAL [ AGR #agr,
	    CAT.HEAD noun*,
	    CONT.INDEX #agr ] ].

;;
;; Common nouns
;;

basic_common_noun_synsem := noun_synsem &
  [ LOCAL [ ARG-S < #spr . #comps >,
	    CAT.VAL [ SPR < #spr &  synsem &
			    [ LOCAL local_min &
				    [ CAT [ HEAD det,
					    VAL [ SUBJ < >,
						  SPR *olist*,
						  COMPS *olist* ] ] ],
			      OPT - ] >,
		      COMPS #comps ] ] ].

common_noun_synsem := basic_common_noun_synsem &
  [ LOCAL.STEMHEAD countnstem ].

common_noun_nocomp_synsem := common_noun_synsem & one_arg &
  [ LOCAL.CAT.VAL.COMPS < > ].

noun_nocomp_synsem := common_noun_nocomp_synsem & nonpro_nomod_onearg_synsem.
noun_nonpro_nomod_synsem := common_noun_synsem & nonpro_nomod_synsem.
noun_two_arg_nomod_synsem := noun_nonpro_nomod_synsem & two_arg.

basic_noun_ppcomp_synsem := basic_common_noun_synsem &
  [ LOCAL [ CAT.VAL.COMPS < [ LOCAL local_min &
				    [ CAT [ HEAD prep & [ PRD - ],
					    VAL.COMPS *olist* ],
				      KEYS.KEY #ckey & 
					  [ HANDEL #hand,
                                            ARG #nind,
					    ARG3 #index ] ] ], ... >,
            CONT.INDEX #nind,
	    KEYS [ KEY diadic_nom_rel & [ HANDEL #hand,
                                          ARG3 #index ],
		   --COMPKEY #ckey ] ] ].

noun_ppcomp_synsem := basic_noun_ppcomp_synsem & noun_nonpro_nomod_synsem.

noun_ppcomp_two_arg_synsem := noun_ppcomp_synsem & two_arg &
  [ MODIFIED notmod ].

temp_noun_ppcomp_synsem := noun_ppcomp_synsem & three_arg &
  [ LOCAL [ CAT.VAL [ COMPS < [ LOCAL.KEYS.KEY _of_rel,
				OPT + ], ... >,
		      SPR < [ OPT - ] > ],
	    CONT.LISZT <! relation !>,
	    KEYS.KEY temp_abstr_rel ] ].

; For e.g. "hotel" as in "the hotel Marriott" or "the Marriott hotel Hannover"c
common_noun_npcomp_synsem := noun_two_arg_nomod_synsem &
  [ LOCAL [ CAT.VAL.COMPS < synsem & [ LOCAL [ CAT nomp_cat_acc_min,
					       CONJ cnil,
					       KEYS.KEY named_rel &
                                                   [ INST #cindex ],
					       CONT.TOP #top ],
				       OPT - ] >,
	    CONT [ TOP #top,
		   INDEX #index,
		   LISZT <! relation, 
			    unspec_rel &
			    [ HANDEL #hand,
			      HINST #index,
			      NHINST #cindex ] !> ],
	    KEYS.KEY.HANDEL #hand ] ].

; ERB (14-12-97) It might be cleaner in some sense for pro_ss to have that
; pron_rel as its key and then have this construction and others like it
; take the value of that KEY and put it on their LISZT.  Also, if we
; ever move to lexical amalgamation of relations, the pron_rel should get
; incorporated automatically. ... So I'm going to try to do it that way.

; ERB (14-12-97) We just decided that there shouldn't be a pron_rel here.
; The feature PRONTYPE is enough to distinguish the instance introduced
; by the pro_ss as one that doesn't have to be bound.  This move is supposed
; to make the DRT people happy because that way we don't have to give
; the pronoun a handle nor make it the top-h.

; ERB (21-01-98) The pro_ss should be unslashed.

;; a way to meet

scoping_noun_synsem := noun_two_arg_nomod_synsem &
  [ LOCAL [ CAT.VAL.--KEYCOMP [ LOCAL [ CONT.TOP #hand,
					KEYS.MESSAGE 1-dlist ] ],
	    KEYS.KEY hcomp_nom_rel & [ ARG3 #hand ] ] ].

common_noun_vpcomp_synsem := scoping_noun_synsem &
  [ LOCAL [ CAT.VAL [ --KEYCOMP #comp,
		      COMPS < #comp & synsem &
			      [ LOCAL [ CAT vp_inf_cat &
					 [ VAL.SUBJ 
					    < pro_ss &
					      [ LOCAL.CONT.INDEX #inst,
						NON-LOCAL.SLASH 0-dlist ] > ],
					KEYS.MESSAGE 1-dlist &
						       <! hypo_rel !>,
					CONJ cnil ],
				OPT - ] > ],
	    CONT [ TOP #top,
		   LISZT <! relation, 
			  pron_rel &
			  [ HANDEL #top,
			    INST #inst &
				   [ PRONTYPE zero_pron ] ] !> ] ] ].

common_noun_cpcomp_synsem := scoping_noun_synsem &
  [ LOCAL [ CAT.VAL [ --KEYCOMP #comp,
		      COMPS < #comp & synsem &
			    [ LOCAL [ CAT s_cat_fin_v_c &
					  [ HEAD comp & strict_type ],
				      CONJ cnil ],
			      OPT - ] > ],
	    CONT.LISZT <! relation !> ] ].

basic_mass_noun_synsem := basic_common_noun_synsem & nonpro_nomod_synsem &
  [ LOCAL [ STEMHEAD massnstem,
            CONT [ INDEX [ PNG png & [ PN 3sg* ],
                           DIVISIBLE +* ],
                   LISZT <! relation !> ] ] ].

mass_noun_synsem := basic_mass_noun_synsem & one_arg &
  [ LOCAL.CAT.VAL.COMPS < > ].

mass_noun_ppcomp_synsem := basic_mass_noun_synsem & basic_noun_ppcomp_synsem &
                           two_arg.

; One of the relations in LISZT is the support relation nominalize_rel 
; which is a subtype of nom_rel, but also introduces the ARG3 attribute 
; for the handle of the verbal relation.  The other rel is the verbal relation.

deverbal_noun_synsem := noun_nonpro_nomod_synsem &
  [ LOCAL [ KEYS.ALTKEY #altkey,
	    CONT.LISZT <! nominalize_rel & [ HANDEL #hand ],
			relation & #altkey & [ HANDEL #hand ] !> ] ].
		 

deverbal_intr_noun_synsem := deverbal_noun_synsem & noun_nocomp_synsem.

deverbal_trans_noun_synsem := deverbal_noun_synsem & noun_ppcomp_two_arg_synsem &
  [ LOCAL.CAT.VAL.COMPS < [ OPT + ] > ].

deverbal_mass_noun_synsem := deverbal_noun_synsem & nonpro_nomod_onearg_synsem &
  [ LOCAL [ CAT.VAL.COMPS < >,
	    CONT.INDEX [ PNG png & [ PN 3sg* ],
			 DIVISIBLE +* ] ] ].

deverbal_mass_noun_ppcomp_synsem := deverbal_trans_noun_synsem &
  [ LOCAL.CONT.INDEX [ PNG png & [ PN 3sg* ],
		       DIVISIBLE +* ] ].

;; Make adj_noun's be of type pronominal_synsem, to block their appearance
;; as left member of noun-noun compounds.

adj_noun_synsem := ref_pro_synsem &
  [ LOCAL [ CAT.VAL.SPR < synsem & [ LOCAL local ],
			    synsem &
			    [ LOCAL local_min &
				    [ CAT [ HEAD det,
					    VAL [ SUBJ < >,
						  SPR *olist*,
						  COMPS *olist* ] ],
				      KEYS.KEY def_rel &
					  [ BV #index,
					    RESTR #hand ] ],
			      OPT - ] >,
	    AGR #index,
	    CONT [ TOP #hand,
		   INDEX #index,
		   H-CONS <! !> ],
	    KEYS.KEY nominalize_rel & [ HANDEL #hand,
					INST #index ] ] ].

adj_noun_personal_synsem := adj_noun_synsem &
  [ LOCAL.CONT.INDEX.PNG png & [ PN 3pl* ] ].

adj_noun_abstract_synsem := adj_noun_synsem &
  [ LOCAL [ CAT.VAL.SPR < synsem, synsem & [ LOCAL.CAT.HEAD.POSS - ] >,
	    CONT.INDEX.PNG png & [ PN 3sg* ] ] ].

; PRD feature used as a hack to avoid numerical adj nouns in noun-noun compounds,
; pending a better analysis, and similarly for partitives and dofm words.
; Make these [DIVISIBLE -] to avoid bare NPs headed by these (in spite of
; examples like "Three were left"), to allow "The magnificent seven were heroes"
; while blocking "*Magnificent seven were heroes."  We assume that there is
; also a partitive "three" to get "Three of the books were lost" while blocking
; *The three of the books were lost".

#|
; DPF 10-Jan-00 - Commented out; replaced with phrasal rule, since need
; "two hundred ten" as well as "five".
numadj_noun_synsem := noun_nocomp_synsem &
  [ LOCAL [ CAT [ HEAD.PRD +,
		  VAL.SPR < [ LOCAL.KEYS.KEY quant_or_wh_rel ] > ],
	    CONJ cnil,
	    CONT [ INDEX #index & 
			 [ PNG png & [ PN 3pl* ],
			   DIVISIBLE -* ],
		   LISZT <! #key, #altkey !> ],
	    KEYS [ KEY pron_rel & #key &
			     [ HANDEL #hand,
			       INST.PRONTYPE impers ],
		   ALTKEY const_rel & #altkey &
			     [ HANDEL #hand,
			       ARG #index ] ] ] ].
|#

; PRD feature used as a hack to avoid partitives in noun-noun compounds,
; pending a better analysis.
; DPF 9-Sept-99 - Changed N-N block to be based on non-empty ALTKEY, rather than PRD.
; The handle of the of-NP should probably be an argument of the part_of relation,
; as the value of a feature SET.  But for now we simply identify the handles of
; the part_of and the of_NP.

partitive_noun_synsem := noun_synsem &
  [ LOCAL [ CAT [ HEAD.MOD < >,
		  VAL [ SUBJ < >,
			SPR  < [ LOCAL local_min &
				       [ CAT.VAL [ SPR  *olist*,
						   COMPS *olist* ],
					 KEYS [ KEY degree_rel,
						ALTKEY [ HANDEL #hand,
							 ARG #index ] ] ],
				 NON-LOCAL [ QUE 0-dlist,
					     REL 0-dlist ],
				 OPT + ] >, 
			COMPS < [ LOCAL local_min &
					[ CAT [ HEAD prep & 
						     [ PRD - ],
						VAL.COMPS *olist* ],
					  KEYS.KEY #ckey & _of_rel &
					      [ HANDEL #nhand, 
                                                ARG #index,
						ARG3 #cind ] ],
				  NON-LOCAL.SLASH 0-dlist,
				  OPT + ] > ] ],
	    CONT [ INDEX #index,
		   H-CONS <! qeq & [ SC-ARG #phand,
				     OUTSCPD #nhand ] !> ],
	    KEYS [ KEY part_of_rel & 
                       [ HANDEL #nhand,
                         ARG3 #cind & non_expl-ind ],
		   ALTKEY quant_or_wh_rel &
                       [ HANDEL #hand,
                         BV #index,
                         RESTR #phand ],
		   --COMPKEY #ckey ] ] ].

basic_intr_noun_word := hcons_amalg_basic_affixed_word &
  [ SYNSEM common_noun_nocomp_synsem &
	   [ LOCAL.CONT.LISZT <! relation !> ] ].

intr_noun_le := basic_intr_noun_word &
  [ SYNSEM noun_nocomp_synsem & 
	   [ LOCAL [ CAT.VAL.SPR < [ LOCAL.KEYS.KEY quant_or_wh_rel ] >,
		     KEYS.KEY non_temp_nom_rel ],
	     MODIFIED notmod ] ].

intr_temp_noun_le := basic_intr_noun_word & 
  [ SYNSEM noun_nocomp_synsem &
	   [ LOCAL [ CAT.VAL.SPR < [ LOCAL.KEYS.KEY quant_or_wh_rel ] >,
		     KEYS.KEY temp_abstr_rel ] ] ].

irreg_intr_noun_le := basic_intr_noun_word &
  [ SYNSEM noun_nocomp_synsem & 
	   [ LOCAL [ CAT.VAL.SPR < [ LOCAL.KEYS.KEY quant_or_wh_rel ] >,
		     KEYS.KEY basic_nom_rel ],
	     MODIFIED notmod ] ].

noun_ppcomp_word := hcons_amalg_affixed_word &
  [ SYNSEM noun_ppcomp_two_arg_synsem &
	   [ LOCAL [ CAT.VAL.COMPS < [ OPT + ] >,
		     CONT.LISZT <! relation !> ],
	     MODIFIED notmod ] ].

noun_ppcomp_le :< noun_ppcomp_word.

noun_ppof_le := noun_ppcomp_word &
  [ SYNSEM.LOCAL.KEYS.--COMPKEY _of_rel ].

noun_ppin_word := noun_ppcomp_word &
  [ SYNSEM.LOCAL.KEYS.--COMPKEY _in_rel_s ].

; "way" as in "find a way to do that" -- was used in VM, but analysis changed
; so this type not currently in use.  Its semrel.tdl entry was as follows:
;   _way_rel := hcomp_nom_rel &
;     [ INST.SORT entity ].

noun_vpcomp_le := hcons_amalg_affixed_word &
  [ SYNSEM common_noun_vpcomp_synsem &
	   [ MODIFIED notmod ] ].

noun_cpcomp_le := hcons_amalg_affixed_word &
  [ SYNSEM common_noun_cpcomp_synsem &
	   [ MODIFIED notmod ] ].

noun_npcomp_le := hc_word & 
  [ INFLECTED -,
    SYNSEM common_noun_npcomp_synsem &
	   [ LOCAL.CAT.HC-LEX +,
	     MODIFIED notmod ] ].

#|
numadj_noun_word := amalg_word &
  [ SYNSEM numadj_noun_synsem ].
|#

deverbal_noun_intr_le := hcons_amalg_affixed_word &
  [ SYNSEM deverbal_intr_noun_synsem &
	   [ MODIFIED notmod ] ].

; For e.g. "meetings", where the singular form is a gerund, which is of type
; word, but we can't yet do plural affixation on words, only on lexemes.
deverbal_noun_intr_plural_le := amalg_word &
  [ SYNSEM deverbal_intr_noun_synsem & 
	   [ LOCAL.CONT.INDEX.PNG png & [ PN 3pl* ],
	     MODIFIED notmod ] ].

deverbal_noun_trans_word := hcons_amalg_affixed_word &
  [ SYNSEM deverbal_trans_noun_synsem &
	   [ MODIFIED notmod ] ].

massn_le := hcons_amalg_basic_affixed_word &
  [ SYNSEM mass_noun_synsem &
	   [ MODIFIED notmod ] ].

massn_ppcomp_le := hcons_amalg_basic_affixed_word &
  [ SYNSEM mass_noun_ppcomp_synsem &
	   [ MODIFIED notmod ] ].

deverbal_massn_le := amalg_word &
  [ SYNSEM deverbal_mass_noun_synsem &
	   [ MODIFIED notmod ] ].

deverbal_massn_pp_le := amalg_word &
  [ SYNSEM deverbal_mass_noun_ppcomp_synsem &
	   [ MODIFIED notmod ] ].

plurn_le := amalg_word &
  [ SYNSEM noun_nocomp_synsem &
	   [ LOCAL.CONT [ INDEX.PNG png & [ PN 3pl* ],
			  LISZT <! relation !> ],
	     MODIFIED notmod ] ].

part_noun_le := que_word &
  [ SYNSEM partitive_noun_synsem &
	   [ LOCAL [ CONT.LISZT <! #key, #altkey !>,
                     KEYS [ KEY #key,
                            ALTKEY #altkey ] ],
             NON-LOCAL.QUE 0-dlist,
	     MODIFIED notmod ] ].


;;
;; Lexical NPs
;;
;;   (proper names, pronouns, names of weekdays, ...)

basic_np_synsem := ref_synsem &
  [ LOCAL.CAT [ HEAD noun*,
                VAL [ SPR < >,
                      SUBJ < >,
                      COMPS < > ] ] ].

basic_np_word := basic_nontopkey & hc-to-phr &
  [ SYNSEM basic_np_synsem ].

np_word := basic_np_word & nonque & nonmsg &
  [ SYNSEM.MODIFIED notmod ].

np_synsem := noun_synsem & nomod_synsem.

basic_np_sing_synsem := basic_np_synsem &
  [ LOCAL [ KEYS.KEY.HANDEL #keyhand,
            CONT [ LISZT.LIST < basic_nom_rel &
                                [ INST #ind ],
                                quant_rel &
                                [ BV #ind,
                                  RESTR #rhand ], ... >,
                   H-CONS <! qeq & [ SC-ARG #rhand,
                                     OUTSCPD #keyhand ] !> ] ] ].

basic_np_sing_word := basic_np_word &
  [ SYNSEM basic_np_sing_synsem ].

np_sing_synsem := basic_np_sing_synsem & np_synsem &
  [ LOCAL.CONT.LISZT <! relation, def_np_rel !>,
    MODIFIED notmod ].

np_sing_word := basic_np_sing_word & nonque & nonmsg &
  [ SYNSEM np_sing_synsem ].

proper_n_synsem := np_sing_synsem &
  [ LOCAL [ KEYS.KEY named_rel,
            CONT.INDEX.PNG png & [ PN 3sg* ] ] ].

proper_le := np_sing_word & 
  [ SYNSEM proper_n_synsem ].

proper_2per_synsem := basic_np_sing_synsem & noun_synsem.

proper_2per_le := basic_np_sing_word & nonque & 
  [ SYNSEM proper_2per_synsem &
	   [ LOCAL [ CAT.HEAD.MOD < [ LOCAL intersective_mod &
					    [ CAT s_cat_fin_or_imp,
					      CONT [ TOP #top,
						     INDEX #event ],
					      KEYS.MESSAGE #msg,
					      CONJ cnil ],
					NON-LOCAL.SLASH 0-dlist ] >,
		     KEYS [ KEY named_rel,
			    MESSAGE #msg ],
		     CONT [ TOP #top,
			    INDEX #ind & [ PNG png & [ PN 2per ] ],
			    LISZT <! relation, 
				     def_np_rel,
				     unspec_mod_rel & 
				   [ ARG #event,
				     ARG3 #ind ] !> ] ],
	     MODIFIED notmod ] ].

letter_name_le := nontopkey & hc-to-phr &
  [ SYNSEM lex_synsem &
	 [ LOCAL [ CAT [ HEAD no_head,
                         VAL [ SPR < >,
                               SUBJ < >,
                               COMPS < > ] ],
                   CONT [ INDEX #agr,
                          LISZT <! !>,
                          H-CONS <! !> ],
                   AGR #agr,
                   KEYS.KEY spell_rel &
                        [ LETTERS <! symbol !> ] ],
	   MODIFIED notmod ] ].

; "here, there" as in "get out of here/there" 
; Make SYNSEM pronominal_synsem to block N-N cmpnds like "the there meeting"
; Added PRD + so appositives with left member np_adv won't join in N-N-cmpnds.

np_adv_synsem := basic_np_sing_synsem & pronominal_synsem.

basic_np_adv_word := basic_np_sing_word & nonmsg &
  [ SYNSEM np_adv_synsem &
	   [ LOCAL [ CONT.INDEX #ind & [ PNG png & [ PN 3sg* ] ],
		     AGR #ind ] ] ].

np_adv_word := basic_np_adv_word & nonque.
np_adv_le :< np_adv_word.

np_comp_adv_le := np_adv_word &
  [ SYNSEM.LOCAL [ CONT.LISZT <! modable_nom_rel & 
                               [ HANDEL #hand, 
				 INST #inst ],
			       def_rel,
			       arg_rel & #altkey &
			       [ HANDEL #hand,
				 ARG #inst ],
                               comp_rel &
                               [ HANDEL #hand,
                                 ARG #inst ] !>,
                   KEYS.ALTKEY #altkey ] ].

; DPF 27-Apr-00 - Added [CASE acc] to block spurious parse for "where is kim"
wh_np_adv_le := basic_np_adv_word &
  [ SYNSEM [ LOCAL [ CAT.HEAD.CASE acc,
                     CONT.LISZT <! relation, which_rel !> ],
             NON-LOCAL.QUE 1-dlist &
		         [ LIST < handle > ] ] ].

; Lexical NP plurals - maybe only in British English? ("IBM are hiring again.")
;
np_pl_word := np_word &
  [ SYNSEM np_synsem &
	   [ LOCAL.CONT.INDEX.PNG png & [ PN 3pl* ] ] ].

np_ersatz_synsem := lex_synsem &
  [ LOCAL [ CAT [ VAL [ SPR < >,
			SUBJ < >,
			COMPS < > ] ],
	    KEYS.KEY #key & [ HANDEL #hand ],
	    CONT nom-obj &
		[ TOP #hand,
		  INDEX ref-ind &
		      [ PNG png & [ PN 3sg* ] ],
		  LISZT.LIST < #key, ... >,
		  H-CONS <! !> ] ] ].

np_word_no_quant := basic_nontopkey & hc-to-phr & nonque & nonmsg &
  [ SYNSEM np_ersatz_synsem &
	   [ MODIFIED notmod ] ].

pers_pro_synsem := basic_np_synsem & ref_pro_synsem.

personal_pro := np_word &
  [ SYNSEM pers_pro_synsem &
	   [ LOCAL [ KEYS.KEY.HANDEL #hand,
		     CONT [ TOP #hand,
			    LISZT <! pron_rel !>,
			    H-CONS <! !> ] ] ] ].

pers_pro_noagr_le :< personal_pro.

pers_pro_le := personal_pro & 
  [ SYNSEM.LOCAL [ AGR #agr,
		   CONT [ INDEX #agr &
			        [ PRONTYPE std_pron ] ] ] ].

refl_pro_le := personal_pro &
  [ SYNSEM.LOCAL [ CAT.HEAD.CASE acc,
		   AGR #agr,
		   CONT.INDEX #agr,
		   KEYS.KEY pron_rel &
			    [ INST.PRONTYPE refl ] ] ].

recip_pro_le := np_word &
  [ SYNSEM ref_pro_synsem &
	   [ LOCAL [ CAT.HEAD.CASE acc,
		     AGR #agr,
		     CONT [ TOP #hand,
			    INDEX #agr,
			    LISZT <! pron_rel &
                                     [ INST.PRONTYPE recip ] !>,
                            H-CONS <! !> ],
		     KEYS.KEY.HANDEL #hand ] ] ].


; 'yours'
; DPF 15-Apr-00 = Changed KEY to be pron_rel rather than def_np_rel, since
; e.g. prepositions want a non_temp_nom_rel as their argument.

poss_pro_le := norm_no_affix_word &
  [ SYNSEM nomod_synsem &
	   [ LOCAL [ CAT [ HEAD noun*,
                           VAL [ SPR < >,
				 COMPS < >,
				 SPEC < anti_synsem > ] ],
                     AGR #index,
		     CONT [ INDEX #index,
			    LISZT <! pron_rel & #key & 
				     [ HANDEL #phand,
				       INST #eind &
					      [ PRONTYPE std_pron ] ],
				     def_np_rel &
				     [ BV #index,
				       RESTR #phand ],
				     poss_rel & #ckey & 
				     [ HANDEL #phand,
				       POSSR #eind,
				       POSSD #index ] !>,
			    H-CONS <! !> ],
		     KEYS [ KEY #key,
			    ALTKEY #ckey ] ],
	     MODIFIED notmod ] ].

; Expletive pronouns "there" and "it"
expl_it_le := nontopkey &
  [ SYNSEM non_ref_pro_synsem &
	   [ LOCAL [ KEYS.KEY no_rel,
		     CONT [ INDEX it-ind,
			    LISZT <! !> ] ],
	     MODIFIED notmod ] ].

expl_there_le := nontopkey &
  [ SYNSEM non_ref_pro_synsem &
	   [ LOCAL [ KEYS.KEY no_rel,
		     CONT [ INDEX there-ind,
			    LISZT <! !> ] ],
	     MODIFIED notmod ] ].
			  

; ERB (31-10-96) A hack:  I want the wh_interrogs to be able to
; get their hands on the which_rel so they can put it on the PARAMS
; list, but QSTORE isn't working yet.  So I am making the QUE value
; of wh_pro_word, wh_adverb_word, and wh_poss_word be the handle of
; the which_rel, so that this gets passed up in such a way that I can see it.

; DPF (3-May-99) We can't just put the handle of the which_rel in QUE, since
; in coordinate structures like "which book and which record did sandy buy?"
; we want to unify the NON-LOCALs of "which book" and "which record", but this
; would mean that the handles of the two which_rel's would be wrongly identified.
; So for now I'm just putting in an unbound handle - we'll have to sort out
; with Ivan what the right solution is.

; who, what

wh_pro_le := que_word &
  [ SYNSEM ref_pro_synsem &
	 [ LOCAL [ CAT.VAL [ SPR < >,
			     COMPS < > ],
                   AGR #index,
                   CONT [ INDEX #index & [ PNG png & [ PN 3sg* ] ],
			  LISZT <! [ HANDEL #nhand ],
				   which_rel & [ BV #index,
						 RESTR #rhand ] !>,
			  H-CONS <! qeq &
				    [ SC-ARG #rhand,
				      OUTSCPD #nhand ] !> ] ],
	   NON-LOCAL.QUE 1-dlist &
		         [ LIST < handle > ],
	   MODIFIED notmod ] ].

rel_pro_le := rel_word & 
  [ SYNSEM pronominal_synsem &
	 [ LOCAL [ CAT [ HEAD.MOD < >,
			 VAL [ SUBJ < >,
			       SPR < >,
			       COMPS < > ] ],
                   AGR #index,
		   CONT [ TOP #hand,
			  INDEX #index,
			  LISZT <! !>,
			  H-CONS <! !> ],
		   KEYS.KEY reg_nom_rel ],
	   NON-LOCAL.REL 1-dlist &
		         [ LIST < [ TOP #hand,
				    INDEX #index ] > ],
	   MODIFIED notmod ] ].

; DPF 28-Aug-99 - SPR..KEY no_rel prevents these from undergoing bare_np rule
; DPF 09-Jan-00 - In fact, can now eliminate bogus SPR, since picking up
; post-head adjuncts as complements.

generic_pro_adv_word := que_word &
  [ SYNSEM np_synsem &
	   [ LOCAL [ CAT.VAL [ SPR < >,
			       COMPS < synsem & [ LOCAL [ CAT prd_cat,
							  CONT.INDEX #inst,
							  CONJ cnil ],
						  NON-LOCAL.SLASH 0-dlist ] > ],
		     CONT [ LISZT <! nom_rel,
				   #altkey & quant_rel !>,
			    H-CONS <! qeq &
				    [ SC-ARG #rhand,
				      OUTSCPD #nhand ] !> ],
		     KEYS [ KEY [ HANDEL #nhand,
				  INST #inst & [ PNG png & [ PN 3sg* ] ] ],
			    ALTKEY #altkey & 
				      [ BV #inst,
					RESTR #rhand ] ] ],
	     NON-LOCAL.QUE 0-dlist ] ].

generic_pro_adv_le :< generic_pro_adv_word.

generic_pro_le := generic_pro_adv_word &
  [ SYNSEM.MODIFIED notmod ].

deictic_pro_le := nontopkey &
  [ SYNSEM ref_pro_synsem &
	   [ LOCAL [ CAT.VAL [ SPR < >,
			       COMPS < > ],
		     CONT [ INDEX #index,
			    LISZT <! generic_nom_rel, 
				     demonstrative_rel & #altkey &
				     [ BV #ind,
				       RESTR #rhand ] !>,
			    H-CONS <! qeq &
				    [ SC-ARG #rhand,
				      OUTSCPD #hand ] !> ],
		     AGR #index,
		     KEYS [ KEY [ HANDEL #hand,
					INST #ind ],
			    ALTKEY #altkey ] ],
	     MODIFIED notmod ] ].

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Synsems for Auxiliary verb lexical rules
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; ERB (05-10-97) Making this specific to question auxes.  See notes near sai
; in syntax.tdl.

#|
sai_synsem := lex_synsem &
  [ LOCAL [ CAT [ HEAD verb* & [ INV +,
				 AUX +* ],
		  VAL.COMPS #comps & < [ NON-LOCAL.SLASH 0-dlist ], ... >,
		  MC + ],
	    KEYS.MESSAGE 1-dlist & <! int_rel !>,
	    ARG-S #comps ] ].
|#

sai_synsem := lex_synsem &
  [ LOCAL [ CAT [ HEAD verb* & [ INV +,
				 AUX +*,
                                 PRD -,
                                 MOD < [ LOCAL intersective_mod &
                                               [ CAT.VAL.SPR *cons*,
						 KEYS.KEY no_rel ] ] > ],
		  VAL.COMPS #comps & < [ NON-LOCAL.SLASH 0-dlist ], ... >,
                  POSTHEAD +,
		  MC - ],
	    KEYS.MESSAGE 0-dlist,
	    ARG-S #comps ] ].

tag_synsem := lex_synsem &
  [ LOCAL [ CAT [ HEAD verb &
		       [ AUX -,
			 INV -,
			 TAM.TENSE #tense,
			 MOD < [ LOCAL scopal_mod &
				       [ CAT s_cat_fin &
					     [ HEAD.TAM.TENSE #tense & 
								strict_sort,
                                               MC + ],
					 AGR #agr &
					     [ PNG png & [ GEN strict_sort,
							   PN strict_sort ] ],
					 CONT [ TOP #modhand,
						INDEX #ind ],
					 KEYS [ KEY #key &
						    [ HANDEL #khand ],
						MESSAGE 1-dlist &
						    <! #presup & 
						     prpstn_rel !> ] ],
				 NON-LOCAL [ SLASH 0-dlist,
					     REL 0-dlist,
					     QUE 0-dlist ] ] > ],
		  POSTHEAD +,
		  VAL [ SUBJ < >,
			SPR < >,
			COMPS < pronominal_synsem &
				[ OPT -,
				  LOCAL [ CAT.VAL.SPEC < >,
					  AGR #tagagr,
					  CONT [ TOP #khand,
						 INDEX #agr ] ] ] > ],
		  MC + ],
	    AGR #tagagr,
	    CONT [ TOP #nehand,
		   INDEX #ind,
		   H-CONS <! qeq &
			   [ SC-ARG #soahand,
			     OUTSCPD #modhand ] !> ],
	    KEYS [ KEY #key,
		   MESSAGE 1-dlist &
			 <! ne_rel &
			    [ HANDEL #nehand,
			      SOA #soahand,
			      PARAMS <! !> ] !> ],
	    CTXT.PRESUP <! #presup !> ] ].


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; ADJECTIVES
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; (See prep_synsem definition for discussion of ARG attribute.)

; Predicative adjectives used to introduce an EVENT attribute in a separate 
; support relation, as did predicative PPs, but now each introduces its own
; EVENT attribute directly in the KEY relation.

; Assume that if adjectives have a specifier, it will be either a measure-NP,
; as in "two feet tall', 'a week later"; or a degree_adverb like "very".

; Since most adjectives are underspecified for being predicative, we have to be
; sure that when they act as modifiers, the unexpressed subject's SLASH value 
; gets terminated (given lexical SLASH amalgamation).  We can't just make the
; adjective's SUBJ be 'unexpressed' since it must unify with the real subject
; in a raising construction.  So we identify the SLASH of the MOD value with
; that of the SUBJ - only one of the two will be realized syntactically.

; Most but not all adjectives can be modifiers, so the most basic adj_synsem
; type does not introduce the MOD feature, to allow for adjectives like
; "impossible" as in "it is impossible to find Kim".

basic_adj_synsem := lex_synsem &
  [ LOCAL [ STEMHEAD astem,
	    ARG-S < #subj . < #spr . #comps > >,
            CAT [ HEAD adj*,
		  VAL [ SUBJ < #subj & 
			       [ LOCAL [ CAT nomp_cat_min,
					 CONJ cnil ] ] >,
			SPR < synsem & #spr &
			      [ LOCAL local_min &
				      [ CAT [ VAL [ SPR *olist*,
						    COMPS *olist* ],
					      MC na ],
					KEYS.KEY degree_rel &
						       [ HANDEL #ahand,
							 DARG #darg ] ],
				OPT + ] >,
			COMPS #comps ] ],
	    CONT.LISZT.LIST < basic_adj_rel & #key &
			      [ HANDEL #ahand,
				DIM #darg ], ... >,
	    KEYS.KEY #key ] ].

;; We assume for now, counterfactually, that all modifying adjectives are
;; intersective.

;; ERB (03-02-98) Maybe should add MOD < [ LOCAL.SPR.OPT ] > - to keep 
;; adjectives from modifying partitives.

;; DPF (16-Feb-98) Made SUBJ.INDEX be 'ref-ind' rather than non_expl-ind,
;; to ensure that it gets discourse-bound if the adjective is used in a fragment.

;; DPF (12-Jul-98) Constrain adjectives to only modify nominals with obligatory
;; specifiers (which distinguishes "common" from "proper" nominals).

adj_synsem := basic_adj_synsem & isect_synsem &
  [ LOCAL [ CAT [ HEAD.MOD < [ LOCAL [ CAT nbar_cat,
				       CONT.INDEX #ind & ref-ind,
				       CONJ cnil ] ] >,
		  VAL.SUBJ < [ LOCAL.CONT.INDEX individual ] > ],
	    CONT.INDEX #ind,
	    KEYS.KEY abstr_adj_rel & [ ARG #ind ] ] ].

nomod_adj_synsem := basic_adj_synsem &
  [ LOCAL.CAT.HEAD.MOD < > ].

nonprd_synsem := lex_synsem &
  [ LOCAL.CAT.HEAD.PRD - ].

prd_synsem := lex_synsem &
  [ LOCAL.CAT.HEAD.PRD + ].

intrans_adj_synsem := adj_synsem & two_arg &
  [ LOCAL.CAT [ VAL.COMPS < >,
		POSTHEAD - ] ].

attr_adj_synsem := intrans_adj_synsem & nonprd_synsem.

pred_adj_synsem := adj_synsem & prd_synsem.

intrans_pred_adj_synsem := intrans_adj_synsem & prd_synsem.

;;; We should have a trans_adj_attr_synsem too, for 'easy' and the likes ...

pred_adj_three_arg_synsem := pred_adj_synsem & three_arg.
adj_three_arg_synsem := adj_synsem & three_arg.

trans_adj_pred_synsem := pred_adj_three_arg_synsem &
  [ LOCAL [ CAT.VAL.COMPS < synsem &
			    [ LOCAL [ CAT pp_cat,
				      CONJ cnil,
				      CONT.TOP #top,
                                      KEYS.KEY #ckey ] ] >,
	    CONT.TOP #top,
            KEYS.--COMPKEY #ckey ] ].

irreg_trans_adj_pred_synsem := pred_adj_three_arg_synsem &
  [ LOCAL [ CAT.VAL.COMPS < synsem &
			    [ LOCAL [ CAT np_cat_acc_min,
                                      KEYS.KEY #ckey ] ] >,
            KEYS.--COMPKEY #ckey ] ].


; e.g. 'able' - Can't use equi_intrans_lt since it specifies an arg13_rel, 
; which is incompatible with adj_rel.  Also, the subj index of adjectives is 
; bound to the ARG role, not the ARG1 role of equi verbs; the ARG role is used
; to give a uniform treatment of semantics of noun modification for adjectives.

reg_adj_equi_synsem := pred_adj_synsem & inf_intrans_subst & three_arg &
  [ LOCAL [ CAT.VAL [ SUBJ < [ LOCAL.CONT.INDEX #subjind ] >,
		      COMPS < [ LOCAL [ CAT.VAL.SUBJ 
						 < [ LOCAL local_min &
						     [ CONT.INDEX #subjind ] ] >,
					CONT.TOP #hand ],
				OPT + ] > ],
	    KEYS.KEY adj_arg4_rel &
			 [ ARG #subjind,
			   ARG4 #hand ] ] ].


scoping_adj_synsem := basic_adj_synsem & prd_synsem &
  [ LOCAL [ CAT.VAL.--KEYCOMP.LOCAL [ KEYS.MESSAGE 1-dlist,
				      CONT.TOP #hand ],
	    KEYS.KEY basic_adj_arg4_rel & [ ARG4 #hand ] ] ].

reg_adj_atrans_synsem := nomod_adj_synsem & scoping_adj_synsem & pp_inf_subst & 
			 four_arg &
  [ LOCAL 
    [ CAT.VAL [ SUBJ < [ LOCAL [ CONT.INDEX it-ind ] ] >,
		  COMPS < [ LOCAL.KEYS.KEY _for_rel_s & [ HANDEL #ahand,
							  ARG #ind,
							  ARG3 #expr ],
			    OPT + ],
			  [ LOCAL.CAT.VAL.SUBJ < [ LOCAL.CONT.INDEX #sind,
						   NON-LOCAL.SLASH 0-dlist ] >,
			    OPT - ], ...> ],
      CONT [ TOP #top,
	     INDEX #ind,
	     LISZT <! relation, 
		      pron_rel &
		      [ HANDEL #top,
			INST #sind & [ PRONTYPE zero_pron ] ] !> ],
      KEYS.KEY it_adj_arg24_rel &
		     [ HANDEL #ahand,
		       ARG2 #expr ] ] ].


;; DPF (9-Mar-99) It appears that there are no CP-taking adjectives which 
;; select for a 'like-CP' of the kind some verbs take (e.g. 'It sounds like
;; Kim will leave').  So we constrain the --KEYCOMP to be prop_ques_rel.
;; But there are adjectives (like 'doubtful, unclear, unsure') which can take 
;; a whether-CP, so we introduce a subtype of reg_adj_cp_synsem for those that 
;; only take a 'that-CP', and similarly for expletive-it subject-taking 
;; adjectives.

; 'uncertain': '?Kim is uncertain that Sandy left' 
;              'Kim is uncertain whether Sandy left' 
;              'It is uncertain that Sandy left'
;              'It is uncertain whether Sandy left'

reg_adj_cp_synsem := scoping_adj_synsem & nomod_adj_synsem & cp_intrans_subst &
		     three_arg &
  [ LOCAL [ CAT.VAL.--KEYCOMP.LOCAL
	                       [ CAT s_cat_fin_v_c,
				 KEYS.MESSAGE <! prop_ques_rel !> ],
	    CONT.LISZT <! relation !>,
	    KEYS.KEY adj_arg4_rel ] ].

; 'unclear' '*Kim is unclear that/whether Sandy left'
;           'It is unclear that Sandy left'
;           'It is unclear whether Sandy left'
reg_adj_atrans_cp_synsem := reg_adj_cp_synsem &
  [ LOCAL [ CAT.VAL.SUBJ < [ LOCAL.CONT.INDEX it-ind ] > ] ].

; 'afraid'  'Kim is afraid that Sandy left'
;           '*Kim is afraid whether Sandy left'
;           '*It is afraid that/whether Sandy left'
reg_adj_that_cp_synsem := reg_adj_cp_synsem &
  [ LOCAL.CAT.VAL.--KEYCOMP.LOCAL.KEYS.MESSAGE 1-dlist &
					       <! prpstn_rel !> ].

; 'obvious' '*Kim is obvious that/whether Sandy left'
;           'It is obvious that Sandy left'
;           '*It is obvious whether Sandy left'
;   but cf. 'It is not obvious whether Sandy left' ***Needs fixing***
reg_adj_atrans_that_cp_synsem := reg_adj_atrans_cp_synsem &
  [ LOCAL.CAT.VAL.--KEYCOMP.LOCAL.KEYS.MESSAGE 1-dlist &
					       <! prpstn_rel !> ].

adj_word := hcons_amalg_word &
  [ SYNSEM adj_synsem &
           [ LOCAL [ CAT.VAL.SUBJ < [ LOCAL.CONT.INDEX #ind ] >,
                     CONT.LISZT <! abstr_adj_rel !>,
                     KEYS.KEY.ARG #ind ] ] ].

reg_adj_word := adj_word & 
  [ INFLECTED - ].

reg_intrans_adj := reg_adj_word & 
  [ SYNSEM intrans_adj_synsem ].

intrans_adj_le :< reg_intrans_adj.

attr_intrans_adj_le := reg_adj_word &
  [ SYNSEM attr_adj_synsem ].

pred_intrans_adj_le := reg_intrans_adj & 
  [ SYNSEM intrans_pred_adj_synsem ].

intrans_adj_oddsem := norm_no_affix_word &
  [ SYNSEM intrans_adj_synsem ].

;; doctor's appointment
;;; AAC - changed SYNSEM LOCAL CONT LISZT FIRST INST to ARG
compound_adj_le := intrans_adj_oddsem &
  [ SYNSEM attr_adj_synsem &
	 [ LOCAL 
	   [ CAT.HEAD.MOD < [ LOCAL.CONT [ TOP #hand,
					   INDEX #nind ] ] >,
	     CONT [ TOP #hand,
		    LISZT <! relation & [ ARG #aind ],
			     unspec_rel & [ HANDEL #hand,
					    HINST #nind,
					    NHINST #aind ] !> ] ] ] ].

;; {OPT +] is on reg_trans_adj and not on trans_adj_synsem because the 
;; comparison_lr uses trans_adj_synsem and requires OPT -. Same for semantics.

trans_adj_le := reg_adj_word &
  [ SYNSEM trans_adj_pred_synsem &
	   [ LOCAL [ CAT.VAL.COMPS < [ LOCAL [ KEYS.KEY.ARG3 #index,
					       CONT.TOP #top ],
				       OPT +] >, 
		     CONT [ TOP #top,
			    LISZT <! [ ARG3 #index ] !> ] ] ] ].

; These 'irregular' types are for multi-word adjectives, which cannot
; be affix-bearing under the current regime.  They should be eliminated
; once we do better with multi-words.

irreg_adj_word := adj_word & non_affix_bearing.

irreg_attr_adj_le := irreg_adj_word &
  [ SYNSEM attr_adj_synsem &
	  [ LOCAL [ CAT.VAL.SUBJ 
			  < [ LOCAL.CONT [ TOP #hand,
					   INDEX #ind & non_expl-ind ] ] >,
		    KEYS.KEY [ HANDEL #hand,
				   ARG #ind ] ] ] ].

irreg_pred_intrans_adj_le := irreg_adj_word &
  [ SYNSEM intrans_pred_adj_synsem &
	  [ LOCAL [ CAT [ HEAD.PRD +,
			  VAL.SUBJ
			  < [ LOCAL.CONT [ TOP #hand,
					   INDEX #ind & non_expl-ind ] ] > ],
		    KEYS.KEY [ HANDEL #hand,
			       ARG #ind ] ] ] ].


irreg_trans_adj_le := irreg_adj_word &
  [ SYNSEM trans_adj_pred_synsem &
	   [ LOCAL [ CAT.VAL.COMPS < [ LOCAL.KEYS.KEY.ARG #index,
				       OPT + ] >,
		     CONT.LISZT <! [ ARG3 #index ] !> ] ] ].

irreg_np_trans_adj_le := irreg_adj_word &
  [ SYNSEM irreg_trans_adj_pred_synsem &
	   [ LOCAL [ CAT.VAL.COMPS < [ LOCAL.CONT.INDEX #index,
				       OPT - ] >,
		     CONT.LISZT <! [ ARG3 #index ] !> ] ] ].


reg_adj_equi_le := norm_word & 
  [ INFLECTED -,
    SYNSEM reg_adj_equi_synsem &
	   [ LOCAL.CONT.LISZT <! abstr_adj_rel !> ] ].

reg_adj_atrans_le := hcons_amalg_affixed_word &
  [ SYNSEM reg_adj_atrans_synsem ].

reg_adj_atrans_cp_word := hcons_amalg_affixed_word &
  [ SYNSEM reg_adj_atrans_cp_synsem ].

reg_adj_atrans_cp_le :< reg_adj_atrans_cp_word.

reg_adj_atrans_that_cp_le := reg_adj_atrans_cp_word &
  [ SYNSEM reg_adj_atrans_that_cp_synsem ].

reg_adj_cp_word := hcons_amalg_affixed_word &
  [ SYNSEM reg_adj_cp_synsem &
	   [ LOCAL [ CAT.VAL.SUBJ < [ LOCAL.CONT.INDEX ref-ind & #ind ] >,
		     KEYS.KEY.ARG #ind ] ] ].

reg_adj_cp_le := reg_adj_cp_word & 
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < [ OPT - ] > ].

reg_adj_that_cp_le := reg_adj_cp_word &
  [ SYNSEM reg_adj_that_cp_synsem &
           [ LOCAL.CAT.VAL.COMPS < [ OPT - ] > ] ].

; How is Sandy?  How does Tuesday look?
; We adopt the following second-order quantification semantics for these:
;    which (p, property(p), look_seem(proposition_to_property(adj(x),p)))
; where we exploit a type-shifting relation to change the proposition "adj(x)"
; into the associated property "the set of entities of which adj(x) is true",
; so the "which" operator can quantify over that property.

;; DPF 14-Apr-00 - Changed SUBJ.CAT from nomp_cat_nom_min to nomp_cat_min
;; since [CASE nom] conflicts with the CASE hack on pro_ss to prevent the
;; latter from undergoing subject xxtraction (see ERB notes for pro_ss).

wh_adjective_le := nonconj & non_affix_bearing & mcna & nonslash & 
                        nonrel & nonmsg &
  [ SYNSEM lex_synsem &
      [ LOCAL [ STEMHEAD astem,
		ARG-S #subj,
		CAT [ POSTHEAD +,
		      HEAD adj* & [ MOD < > ],
		      VAL [ SUBJ #subj &
				 < synsem &
				   [ LOCAL [ CAT nomp_cat_min,
					     CONJ cnil,
					     CONT.INDEX #ind ] ] >,
			    SPR < >,
			    COMPS < > ] ],
		CONT [ TOP #top,
		       INDEX #ind,
		       LISZT <! unspec_adj_rel &
			        [ HANDEL #ahand,
				  ARG #ind ],
			        which_rel & [ BV #pind,
					      RESTR #hand ],
			        property_rel & [ HANDEL #hand,
						 INST #pind ],
			        prpstn_to_prop_rel & #key &
			        [ HANDEL #top,
				  PRPSTN #ahand,
				  PROP #pind ] !>,
		       H-CONS <! !> ],
		KEYS.KEY #key ],
	NON-LOCAL.QUE 1-dlist &
	              [ LIST < handle > ] ] ].

; two-hour meeting, two-foot tall
measure_adj_attr_synsem := zero_arg & isect_synsem &
  [ LOCAL [ CAT [ HEAD adj* &
		       [ PRD -,
			 MOD < [ LOCAL [ CAT nbar_cat,
					 CONT.INDEX #ind,
					 CONJ cnil ] ] > ],
		  VAL [ SUBJ < >,
			SPR < synsem &
			      [ LOCAL local_min &
				      [ CAT [ VAL [ SPR *olist*,
						    COMPS *olist* ],
					      MC na ],
					CONT.TOP #top,
					KEYS.KEY const_rel & 
						       [ HANDEL #hand,
							 ARG #inst ] ],
				OPT - ] >,
			COMPS < > ] ],
	    CONT mrs &
		 [ TOP #top,
		   LISZT <! meas_adj_rel & #key &
			    [ HANDEL #hand,
			      ARG #ind,
			      ARG3 #inst ],
			    nom_rel & #altkey & [ HANDEL #hand,
						  INST #inst ] !> ],
	    KEYS [ KEY #key,
		   ALTKEY #altkey ] ] ].

meas_adj_le := norm_no_affix_word &
 [ SYNSEM measure_adj_attr_synsem ].

basic_compar_adj_word := hcons_amalg_non_affixed_word &
 [ SYNSEM adj_synsem &
	  [ LOCAL [ CAT.VAL [ SUBJ < [ LOCAL.CONT.INDEX #ind ] >,
                              SPR < [ LOCAL.KEYS.KEY much_deg_rel ] > ],
		    CONT.LISZT <! [ HANDEL #hand,
                                    ARG #ind ],
                                  comp_rel & #altkey &
                                  [ HANDEL #hand,
                                    ARG #ind ] !>,
                    KEYS.ALTKEY #altkey ] ] ].

comp_adj_le := basic_compar_adj_word &
  [ SYNSEM intrans_adj_synsem ].

comp_trans_adj_le := basic_compar_adj_word &
  [ SYNSEM trans_adj_pred_synsem &
	   [ LOCAL [ CAT.VAL.COMPS < [ LOCAL [ KEYS.KEY.ARG3 #index,
					       CONT.TOP #top ],
				       OPT +] >, 
                     KEYS.KEY.ARG3 #index,
		     CONT.TOP #top ] ] ].


more_adj_le := basic_compar_adj_word &
  [ SYNSEM adj_three_arg_synsem &
	   [ LOCAL [ CAT.VAL [ SUBJ #subj & *olist*,
                               SPR *olist*,
			       COMPS < lex_synsem &
					 [ LOCAL [ CAT [ HEAD adj,
							 VAL [ SUBJ #subj,
                                                               SPR *olist*,
							       COMPS < > ] ],
						   CONT [ TOP #top,
							  INDEX #ind ] ],
					   OPT -] > ], 
		     KEYS.KEY _more_adj_rel,
                     CONT [ TOP #top,
                            INDEX #ind ] ] ] ].

basic_superl_adj_word := hcons_amalg_non_affixed_word &
 [ SYNSEM pred_adj_synsem &
	  [ LOCAL [ CAT.VAL.SUBJ < [ LOCAL.CONT.INDEX #ind ] >,
		    CONT.LISZT <! [ HANDEL #hand,
                                    ARG #ind ],
                                  superl_rel & #altkey &
                                  [ HANDEL #hand,
                                    ARG #ind ] !>,
                    KEYS.ALTKEY #altkey ] ] ].

superl_adj_le := basic_superl_adj_word &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < > ].

;; Titles like 'mister', 'professor' which modify proper names

title_synsem := zero_arg & 
  [ LOCAL [ CAT [ HEAD noun &
		       [ MOD < [ LOCAL intersective_mod &
				       [ CAT nomp_cat_min,
					 CONJ cnil,
					 CONT.INDEX #ind,
					 KEYS.KEY named_rel & 
					     [ HANDEL #khand ] ] ] > ],
		  VAL [ SUBJ < >,
			SPR < >,
			COMPS < > ] ],
	    CONT [ INDEX #ind,
		   LISZT <! title_rel & #key & [ HANDEL #khand,
						 INST #ind ] !> ],
	    KEYS.KEY #key ] ].

title_le := nontopkey &
  [ SYNSEM title_synsem &
	   [ LOCAL.CAT.POSTHEAD - ] ].

post_title_le := norm_no_affix_word &
  [ SYNSEM title_synsem &
	   [ LOCAL.CAT.POSTHEAD + ] ].

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; PREPOSITIONS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Most prepositions can be modifiers.  If they act as a modifier, we'll assume
; they have no subject (leaving for some distinct analysis Carl's "A unicorn
; at the helm, the ship sailed into the horse latitudes."  This lets us use a
; single attribute, ARG, for the index of the phrase modified, or for the
; index of the subject of the PP, in a predicative construction.

; Prepositions also have a distinguished role ARG3 which has as value the
; index of the object of the preposition.  We could introduce distinct role
; names for each preposition (e.g. "ON" for on_rel, "IN" for in-rel) but this
; would complicate the definition of the prep_synsem type, since it needs to
; know the role name to which it assigns the object's index.

; An EVENT attribute is needed for PPs (and other substs used predicatively)
; occurring as complements of the copula as in "the meeting is on Tuesday",
; but on this analysis not postnominally.  This EVENT role used to be
; introduced in a separate support_rel, supplied by the copula, but is now
; introduced directly in the relation introduced by the predicate (prep or
; adj or verb).

; Prepositions, like adjectives and participial verbs, can have either
; predicative or nonpredicative synsems, so each ordinary preposition
; (actually the PP headed by the P) can unify with either a pred. or non-pred.
; constraint, which resolves the underspecification.  One assumption here is 
; that there are no contexts which are underspecified for the PRD feature 
; for PPs.

; N.B. The LISZT value of basic_prep_synsem cannot be a singleton list, since
; adverbs like "when" inherit this synsem, and add additional rels lexically.

; Here we only amalgamate non-local features from the complements, not the
; subject.  This is so we don't get two identical gaps in an example like "Who
; does kim think is under the bed?".  On the other hand, binding theory
; suggests that the subjects of prepositions really are on the ARG-S list.

; DPF (14-Mar-99) Constrained prepositions to not allow pied-piping in
; free relative constructions, where the QUE value is an index rather than
; a handle.

basic_prep_synsem := canonical_synsem & 
  [ LOCAL [ CAT.HEAD n_or_p,
	    CONT.LISZT.LIST < norm_relation, ... > ] ].

basic1_prep_synsem := basic_prep_synsem & unsat_two_arg_subst &
  [ LOCAL [ CAT [ VAL.COMPS < synsem & 
			      [ LOCAL local_min &
				      [ KEYS.KEY #ckey,
					CONT.INDEX #objind ],
				NON-LOCAL.QUE.LIST *handlelist* ], ... >,
		  POSTHEAD + ],
	    CONT.LISZT.LIST < #key, ... >,
	    KEYS [ KEY #key & [ ARG3 #objind ],
                   ALTKEY #ckey,
		   --COMPKEY #ckey ] ] ].

prep_synsem := basic1_prep_synsem &
  [ LOCAL.CAT.HEAD prep* ].

; For predicative Ps and PPs like "when", which have a (non-expletive) NP subject

prep_p_synsem := basic_prep_synsem &
  [ LOCAL [ CAT.VAL [ SUBJ < synsem & #subj &
			       [ LOCAL [ CAT nomp_cat_min,
					 CONT.INDEX #subjind & event_or_index,
					 CONJ cnil ],
				 NON-LOCAL [ SLASH 0-dlist,
					     REL 0-dlist,
					     QUE 0-dlist ] ] >, 
			COMPS #comps ],
	    KEYS.KEY.ARG #subjind,
	    ARG-S < #subj . #comps > ] ].

prep_with_spr_synsem := canonical_synsem &
  [ LOCAL [ CAT.VAL.SPR < synsem & [ LOCAL local_min &
					   [ CAT [ HEAD adv,
						   VAL [ SPR *olist*,
							 COMPS *olist* ] ],
					     KEYS.KEY degree_rel &
						 [ HANDEL #khand,
						   DARG #darg ] ],
				     NON-LOCAL.QUE 0-dlist,
				     OPT + ] >,
	    KEYS.KEY [ HANDEL #khand,
		       DIM #darg ] ] ].


; Ps and PPs that can be modifiers.
; Block PP modification of infinitival "to" - spurious ambiguity.
; Constrain MOD < [ LOCAL.CONT.INDEX > to be non_expl, for fragments like 
; "perhaps in a week"
; Restricted MOD to be [MC na_or_- to avoid spurious ambiguity when PP
; modifies an inverted clause like "is Tuesday okay with you".

basic_mod_n_or_vp_synsem := isect_synsem &
  [ LOCAL [ CAT [ HEAD.MOD < [ LOCAL [ CAT n_or_v_cat &
                                           [ HEAD n_or_v,
					     MC #mc & na_or_- ],
				       CONT.INDEX #ind & non_expl,
				       CONJ cnil,
				       KEYS.MESSAGE #msg ] ] >,
                  MC #mc,
		  POSTHEAD + ],
	    CONT.INDEX #ind,
	    KEYS [ KEY.ARG #ind,
		   MESSAGE #msg ] ] ].

mod_n_or_vp_synsem := basic_mod_n_or_vp_synsem & prep_with_spr_synsem.

prep_p_mod_synsem := prep_p_synsem & mod_n_or_vp_synsem.

prep_prd_or_nonprd_synsem := prep_synsem & prep_p_mod_synsem.

; Strict transitive prepositions which can be either predicative or non-pred:

basic_trans_prep_synsem := prep_prd_or_nonprd_synsem & basic_two_arg &
  [ LOCAL [ CAT.VAL [ SUBJ < [ NON-LOCAL [ SLASH 0-dlist,
                                             REL 0-dlist,
                                             QUE 0-dlist ] ] > ],
            CONT.LISZT.LIST < prep_rel, ... > ] ].

trans_prep_synsem := basic_trans_prep_synsem &
  [ LOCAL [ CAT.VAL.COMPS < [ LOCAL.CONT [ TOP #top,
					   INDEX ref-ind ] ] >,
	    CONT [ TOP #top,
		   LISZT <! prep_rel !>,
		   H-CONS <! !> ] ] ].

ditrans_prep_synsem := prep_prd_or_nonprd_synsem & three_arg_subst &
  [ LOCAL [ CAT.VAL.COMPS < *top* & [ LOCAL.CONT.TOP #top ], *top* >,
	    CONT [ TOP #top,
		   LISZT <! prep_rel !> ] ] ].

basic_lex_pp_synsem := prep_p_synsem & phr_synsem &
  [ LOCAL [ ARG-S #subj,
	    CAT.VAL [ SUBJ #subj,
		      COMPS < > ] ] ].

lex_pp_synsem := basic_lex_pp_synsem & mod_n_or_vp_synsem &
  [ LOCAL.CAT.HEAD prep* ].

lex_pp_one_arg_synsem := lex_pp_synsem & one_arg &
  [ LOCAL.CAT.HEAD.MOD < [ MODIFIED notmod_or_rmod ] > ].

; DPF 13-Oct-99 - Restricted MOD value to a comparative adj (lexical like "taller"
; or phrasal like "more important").

compar_adj_prep_synsem := prep_synsem & isect_synsem & lex_synsem &
  [ LOCAL [ CAT [ HEAD.MOD < [ LOCAL [ CAT [ HEAD adj,
					     VAL.SPR < [ LOCAL.KEYS.KEY 
							      much_deg_rel ] >,
                                             MC na ],
                                       CONT [ TOP #top,
                                              INDEX #ind ],
                                       KEYS [ ALTKEY comp_rel &
                                                        [ ARG3 #arg ] ] ] ] >,
                  VAL [ SPR < >,
                        COMPS < [ LOCAL [ CAT [ HEAD noun,
						VAL [ SPR *olist*,
						      SUBJ *olist*,
						      COMPS *olist* ] ],
					  CONT [ TOP #top,
						 INDEX #arg ] ],
				  NON-LOCAL [ SLASH 0-dlist,
					      REL 0-dlist,
					      QUE 0-dlist ],
				  OPT - ] > ] ],
            CONT [ TOP #top,
                   INDEX #ind,
                   LISZT <! _compar_than_rel !>,
                   H-CONS <! !> ],
	    KEYS.MESSAGE <! !>,
            CONJ cnil ] ].

; Ordinary prepositions:

; Moved [ OPT - ] specification to subtypes, to allow "the day before" where
; the complement is missing.
; DPF (9-Mar-99) Made basic_prep_word not inherit from nonmsg, since it has
; its MESSAGE identified with that of its modifiee (via the head_modifier rule)
; and that modifiee will sometimes have a non-empty message, as in
; "Is kim happy in Berlin"

basic_prep_word := msg_amalg_word &
  [ SYNSEM trans_prep_synsem &
	 [ LOCAL.CAT.VAL.COMPS < synsem & [ LOCAL [ CAT nomp_cat_acc_min,
						    CONJ cnil ] ] > ] ].

; Changed ref-ind constraint to non_expl-ind so prep's can be used as particles
prep_word := basic_prep_word &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < [ LOCAL.CONT.INDEX non_expl-ind ] > ].

prep_optcomp_le := prep_word & 
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < [ OPT + ], ... > ].
prep_le := prep_word & 
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < [ OPT - ], ... > ].

reg_prep_le := prep_word &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < [ LOCAL local_min &
					 [ KEYS.KEY non_temp_nom_rel ],
				   OPT - ] > ].

temp_prep_le :=  msg_amalg_word &
  [ SYNSEM trans_prep_synsem &
	 [ LOCAL.CAT.VAL.COMPS < synsem & 
                                 [ LOCAL [ CAT [ HEAD nominal & strict_type &
                                                      [ CASE acc,
                                                        POSS - ],
                                                 VAL [ SUBJ *olist*,
                                                       SPR *olist*,
                                                       COMPS *olist* ],
                                                 MC na ],
                                           CONJ cnil ],
                                   OPT - ] > ] ].
#|
; Used only for "from", presumably as in "from under the table" - ignore for now.
prep_n_or_p_word := msg_amalg_word &
  [ SYNSEM trans_prep_synsem &
	 [ LOCAL [ CAT.VAL.COMPS < synsem &
				   [ LOCAL local_min &
					   [ CAT [ HEAD n_or_p & strict_type,
						   VAL [ SUBJ *olist*,
							 SPR *olist*,
							 COMPS *olist* ] ],
					     CONT.INDEX non_expl-ind,
					     CONJ cnil ],
				     OPT - ] > ] ] ].
|#

; 'from now on', maybe 'from two to four'
ditrans_prep_le := norm_msg_word &
  [ SYNSEM ditrans_prep_synsem &
	 [ LOCAL [ CAT.VAL.COMPS < synsem & [ LOCAL [ CAT nomp_cat_acc_min,
						      CONJ cnil ],
					      OPT - ], 
				   synsem & [ LOCAL local_min &
						    [ CAT [ HEAD.PRD -,
							    MC na ],
						      CONT.TOP #top ],
					      NON-LOCAL.QUE.LIST *handlelist* ] >,
		   CONT.TOP #top ] ] ].

prep_cp_le := msg_amalg_word &
  [ SYNSEM basic_trans_prep_synsem &
      [ LOCAL [ CAT.VAL.COMPS < synsem &
				[ LOCAL 
				  [ CAT s_cat_fin_v_c & [ HEAD verb ],
				    CONJ cnil,
				    CONT [ TOP #mhand,
					   INDEX event & #event ],
				    KEYS.MESSAGE 1-dlist &
						 <! prpstn_rel !> ],
				  OPT - ] >,
		CONT [ TOP #mhand,
		       LISZT <! prep_rel !>,
		       H-CONS <! !> ],
		KEYS.KEY.ARG3 #event ] ] ].

prep_pp_le := msg_amalg_word &
  [ SYNSEM basic_trans_prep_synsem &
      [ LOCAL [ CAT.VAL.COMPS < synsem &
				[ LOCAL [ CAT pp_cat,
					  CONJ cnil,
					  CONT.TOP #top,
                                          KEYS.KEY [ ARG3 #arg3 ] ] ] >,
		CONT [ TOP #top,
		       LISZT <! prep_rel !>,
		       H-CONS <! !> ],
                KEYS.KEY [ ARG3 #arg3 ] ] ] ].

#|
prep_spr_word := msg_amalg_word &
  [ SYNSEM prep_spr_synsem &
	   [ LOCAL.CAT.VAL [ SPR < [ OPT - ] >,
			     COMPS < synsem & [ LOCAL [ CAT nomp_cat_acc_min,
							CONJ cnil ],
						OPT - ] > ] ] ].
|#

; Prepositions that don't modify nominals - e.g, 'until'
prep_no_n_mod_le := prep_word &
  [ SYNSEM.LOCAL.CAT [ HEAD.MOD < [ LOCAL.CAT.VAL.SUBJ < synsem > ] >,
		       VAL.COMPS < [ OPT - ] > ] ].

; "Case-marking" prepositions, which cannot be modifiers
; and (let's assume) also cannot be modified, so stipulate [ SUBJ < > ].
;
; DPF 10-Jun-99 - But they can take specifiers: "Kim fell nearly to the bottom"

basic_prep_nomod_synsem := lex_synsem & prep_with_spr_synsem &
  [ LOCAL [ CAT [ HEAD prep* & [ PRD -,
				 MOD < > ],
		  VAL [ COMPS < synsem & 
				[ LOCAL local_min &
					[ KEYS.KEY #ckey,
					  CONT [ TOP #top,
						 INDEX #ind ] ],
				  NON-LOCAL.QUE.LIST *handlelist*,
				  OPT - ] > ] ],
	    CONT [ TOP #top,
		   LISZT <! #key !> ],
	    KEYS [ KEY prep_rel & #key &
		       [ ARG3 #ind ],
		   --COMPKEY #ckey ] ] ].

prep_nosubj_synsem := basic_prep_nomod_synsem & one_arg & 
  [ LOCAL [ ARG-S #comps,
	    CAT.VAL [ SUBJ < >,
		      COMPS #comps ] ] ].

prep_nomod_synsem := basic_prep_nomod_synsem & prep_p_synsem & two_arg.

; Removed constraint on [COMPS.FIRST.MOD < >] to allow "of the second"
prep_nomod_le := amalg_word &
  [ SYNSEM prep_nomod_synsem & 
	 [ LOCAL.CAT.VAL.COMPS < synsem & [ LOCAL [ CAT nomp_cat_acc_min,
						    CONJ cnil ] ] > ] ].

; nominal "of"
prep_nomod_of_le := amalg_word &
  [ SYNSEM prep_nosubj_synsem & 
	   [ LOCAL [ CAT.VAL.COMPS < synsem & [ LOCAL [ CAT nomp_cat_acc_min,
							CONJ cnil ] ] >,
		     KEYS.KEY [ ARG ref-ind,
				ARG3 #ind ],
		     CONT.INDEX #ind ] ] ].

; Lexical PPs

; 'away'
pp_le := basic_norm_no_affix_word &
  [ SYNSEM lex_pp_one_arg_synsem &
	   [ LOCAL [ KEYS.KEY #key,
		     CONT.LISZT <! #key !> ] ] ].

; Prepositions with lexically idiosyncratic complements:

prep_idiom_le := msg_amalg_word &
  [ SYNSEM trans_prep_synsem &
	   [ LOCAL [ CAT.VAL.COMPS < [ OPT - ], ... > ] ] ].

prep_idiom_nomod_le := amalg_word &
  [ SYNSEM prep_nosubj_synsem &
	   [ LOCAL.CAT.VAL.COMPS < synsem & [ LOCAL [ CAT nomp_cat_acc_min,
						      CONJ cnil ] ] > ] ].

prep_nbar_comp_le := msg_amalg_word &
  [ SYNSEM basic_trans_prep_synsem &
	   [ LOCAL [ CAT.VAL [ SPR < [ NON-LOCAL.SLASH 0-dlist ] >,
			       COMPS < synsem &
				     [ OPT -,
				       LOCAL [ CAT [ HEAD noun,
						     VAL [ SPR < synsem &
							  [ NON-LOCAL.SLASH 0-dlist ] >,
							   COMPS *olist* ] ],
					       CONT.TOP #nhand ],
                                       NON-LOCAL.SLASH 0-dlist ] > ],
		     CONT [ LISZT <! prep_rel & [ ARG3 #arg3 ],
				     udef_rel & [ BV #arg3,
						  RESTR #rhand ] !>,
			    H-CONS <! qeq & [ SC-ARG #rhand,
					      OUTSCPD #nhand ] !> ] ] ] ].


;; Temporal prepositions:

; Special type for "at" taking hours
;    'at five oclock'
;    'at fifteen to six'

#|
at_prep_word := msg_amalg_word &
  [ SYNSEM trans_prep_synsem &
	 [ LOCAL [ CAT.VAL.COMPS
		       < synsem & [ LOCAL [ CAT nomp_cat_acc_min,
					    CONJ cnil,
					    KEYS.KEY hour_rel ],
				    OPT - ] > ] ] ].
|#

; Prepositions like "before" that take a prep_noun like "now, then".
;   'before now', 'since then'

before_prep_le := norm_msg_word &
  [ SYNSEM trans_prep_synsem &
	 [ LOCAL [ CAT.VAL.COMPS 
		 < [ LOCAL local_min &
			   [ CAT [ HEAD n_or_p & [ PRD - ],
				   VAL [ SPR *olist*,
					 COMPS *olist* ] ],
			     KEYS.KEY temp_loc_indep_rel ],
		     OPT - ], ... > ] ] ].

; "ten minutes to three" - "to" as head
; Use POSTHEAD to allow "half past three" and "three thirty" but block
;      "?thirty past three" and "*three half"
;; DPF (12-Jul-98) The specifier on hour_prep_words has to be [ OPT + ] in order
;; to block prenominal adjectives from attaching, since they distinguish proper
;; from common nouns by the optionality (or absence) of the specifier.  This 
;; distinction doesn't seem to work well here, but it's the only case, so perhaps
;; the analysis of "ten after three" should be reconsidered.
;; DPF (11-Jul-99) But this [OPT +] incorrectly predicts that "To five thirty suits
;; me" is good, and worse, it allows "to five thirty" to act like an NP in
;; appositive constructions.  So instead of this hack, constrain adjectives to
;; only modify nominals with a DET specifier.

hour_prep_le := norm_msg_word &
  [ SYNSEM nomod_onearg_synsem &
	 [ LOCAL [ CAT [ HEAD noun* &
			      [ POSS - ],
			 VAL [ SPR < synsem & [ LOCAL [ CAT [ HEAD intadj,
							      VAL.COMPS < > ],
							CONJ cnil,
							CONT.INDEX #minute,
							KEYS.KEY minute_rel ],
						OPT - ] >,
			       COMPS < synsem & 
				       [ LOCAL [ CAT nomp_cat_acc_min,
						 KEYS.KEY numbered_hour_rel &
							      #ckey,
						 CONT [ TOP #top,
							INDEX #hour ],
						 CONJ cnil ],
					 OPT - ] > ] ],
		   CONT nom-obj &
		       [ TOP #top,
			 INDEX #ind & ref-ind &
			       [ PNG png & [ PN 3sg* ] ],
			 LISZT <! #key !> ],
		   KEYS [ KEY #key & hour_prep_rel &
				     [ INST #ind,
				       MINUTE-IND #minute,
				       HOUR-IND #hour ],
			  --COMPKEY #ckey ] ] ] ].

; ten pm to two am
x_to_y_le := norm_msg_word &
  [ SYNSEM basic_two_arg &
	 [ LOCAL [ CAT [ HEAD noun* &
			      [ POSS -,
				MOD < > ],
			 VAL [ SPR < synsem &
				     [ LOCAL [ CAT nomp_cat_acc_min,
					       CONJ cnil,
					       CONT [ TOP #nhand,
                                                      INDEX #arg1 ],
					       KEYS.KEY numbered_hour_rel ],
				       OPT - ] >,
			       COMPS < synsem &
				       [ LOCAL [ CAT nomp_cat_acc_min,
						 CONJ cnil,
						 CONT.INDEX #arg2,
						 KEYS.KEY numbered_hour_rel ],
					 OPT - ] > ] ],
		   CONT nom-obj &
		       [ INDEX #index & event_or_index &
                               [ PNG png & [ PN 3sg* ],
                                 DIVISIBLE -* ],
			 LISZT <! _from_to_rel & #key &
				[ HANDEL #nhand,
				  ARG #index,
				  ARG3 #arg1,
				  ARGX #arg2 ],
				_until_rel_s &
				[ HANDEL #nhand,
				  ARG #index,
				  ARG3 #arg2 ] !>,
			 H-CONS <! !> ],
		   KEYS.KEY #key ] ] ].

compar_than_adj_le := norm_mod_no_affix_word &
  [ SYNSEM compar_adj_prep_synsem ].

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; ADVERBS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Adverbs modify VPs and APs either pre-head or post-head (or both).
; Sentence-initial adverbials are treated as extractions of post-VP modifiers,
; unless the adverbial is a pre-head modifiier. Otherwise, it would be hard to
; block post-S attachment along with post-VP attachment, which would give 
; spurious ambiguity.

basic_adverb_synsem := basic_zero_arg &
  [ LOCAL [ CAT [ HEAD basic_adv &
		       [ PRD -,
			 MOD < [ LOCAL local_basic &
				       [ CAT.MC #mc,
                                         CONT.INDEX #vevent & individual,
					 KEYS.MESSAGE #msg,
					 CONJ cnil ] ] > ],
		  VAL [ SUBJ < >,
			COMPS < > ],
                  MC #mc ],
	    CONT [ INDEX #vevent,
		   LISZT.LIST < #key, ... > ],
	    KEYS [ KEY #key & abstr_adv_rel,
		   MESSAGE #msg ] ] ].

basic_scopal_adverb_synsem := basic_adverb_synsem &
  [ LOCAL [ CAT.HEAD.MOD < [ LOCAL scopal_mod &
				   [ CAT.HEAD adverbee & strict_type,
				     CONT.TOP #mhand ] ] >,
	    CONT.H-CONS.LIST < qeq &
				 [ SC-ARG #hand,
				   OUTSCPD #mhand ], ... >,
	    KEYS.KEY.ARG #hand & handle ] ].

basic_int_adverb_synsem := basic_adverb_synsem & isect_synsem &
  [ LOCAL [ CAT.HEAD adv &
		     [ MOD < [ LOCAL [ CAT.MC na,
                                       CONT.INDEX #vevent ] ] > ],	
	    CONT [ INDEX #vevent,
		   H-CONS <! !> ],
	    KEYS.KEY.ARG #vevent ] ].

spec_adverb_synsem := basic_adverb_synsem &
  [ LOCAL [ CAT [ HEAD adv,
		  VAL.SPR < synsem & 
			  [ LOCAL local_min &
				  [ CAT [ HEAD adv,
					  VAL [ SUBJ < >,
						SPR *olist*,
						COMPS *olist* ],
					  MC na ],
				    KEYS.KEY degree_rel &
					[ HANDEL #hand,
					  DARG #darg ] ] ] > ],
	    KEYS.KEY [ HANDEL #hand,
		       DIM #darg ] ] ].

scopal_spec_adverb_synsem := basic_scopal_adverb_synsem & spec_adverb_synsem.
intersect_spec_adverb_synsem := basic_int_adverb_synsem & spec_adverb_synsem.

; VP, PP, AP
scopal_adverb_synsem := scopal_spec_adverb_synsem &
  [ LOCAL [ CAT.HEAD.MOD < [ LOCAL.CAT [ VAL [ SUBJ < synsem_min >,
					       COMPS *olist* ],
                                         MC na_or_- ] ] >,
	    CONT [ LISZT <! relation !>,
		   H-CONS <! qeq !> ] ] ].

basic_intersect_adverb_synsem := intersect_spec_adverb_synsem &
  [ LOCAL.CAT.HEAD.MOD < [ LOCAL.CAT [ VAL [ SUBJ < synsem >,
					     COMPS *olist* ],
				       MC na_or_- ] ] > ].

intersect_adverb_synsem := basic_intersect_adverb_synsem &
  [ LOCAL [ CAT.HEAD.MOD < [ LOCAL.CAT adverbee_cat ] >,
	    CONT.LISZT <! relation !> ] ].

; VP only
; Block adj modifiee to avoid spurious parse for "almost empty"
; DPF 09-Aug-99 - Relaxed MOD..HEAD value to be v_or_g_or_a because okay for 
; adjectives as pre-head modifiers ("an apparently difficult problem"), though
; not post-head.

scopal_vp_adverb_synsem := scopal_adverb_synsem &
  [ LOCAL.CAT.HEAD.MOD < [ LOCAL.CAT.HEAD v_or_g_or_a & strict_type ] > ].

; Adverbs like "also" that either (pre) modify VPs or appear as complements of
; aux Vs.
scopal_vp_aux_adverb_synsem := basic_scopal_adverb_synsem &
  [ LOCAL [ CAT [ HEAD lexadv &
		       [ MOD < [ LOCAL.CAT [ HEAD v_or_g & strict_type,
					     VAL [ SUBJ < synsem >,
						   COMPS *olist* ],
					     MC na ] ] > ],
		  POSTHEAD -,
		  VAL.SPR < > ],
	    CONT [ LISZT <! relation !>,
		   H-CONS <! qeq !> ] ] ].

comp_vp_adverb_synsem := basic_intersect_adverb_synsem &
  [ LOCAL [ CAT [ HEAD.MOD < [ LOCAL.CAT adverbee_cat ] >,
		  POSTHEAD + ],
	    CONT.LISZT <! #key &
			  [ HANDEL #hand,
			    ARG #ind ],
			  comp_rel &
			  [ HANDEL #hand,
			    ARG #ind ] !>,
	    KEYS.KEY #key ] ].

intersect_vp_adverb_synsem := intersect_adverb_synsem &
  [ LOCAL.CAT.HEAD.MOD < [ LOCAL.CAT.HEAD v_or_g & strict_type ] > ].

; S (for pre-S scopal adverbs only)
;
; DPF 26-Jul-99 - Made MOD..HEAD be 'verb' instead of 'adverbee' to block
; "so then" with "then" as discourse adverb.
;
scopal_s_adverb_synsem := scopal_spec_adverb_synsem &
  [ LOCAL [ CAT.HEAD.MOD < [ LOCAL [ CAT [ HEAD verb & strict_type,
                                           VAL [ SUBJ *olist*,
                                                 COMPS *olist* ],
                                           MC bool ],
                                     KEYS.MESSAGE 1-dlist ] ] >,
	    CONT [ TOP #top,
		   LISZT <! relation, prpstn_rel &
			              [ HANDEL #top,
					SOA #soahand ] !>,
		   H-CONS <! qeq,
			     qeq &
			   [ SC-ARG #soahand,
			     OUTSCPD #khand ] !> ],
	    KEYS.KEY.HANDEL #khand ] ].

; S or VP (for pre-head intersective adverbs only) 
intersect_s_or_vp_adverb_synsem := intersect_spec_adverb_synsem &
  [ LOCAL [ CAT.HEAD.MOD < [ LOCAL.CAT adverbee_cat &
				       [ VAL.COMPS *olist* ] ] >,
	    CONT.LISZT <! relation !> ] ].

; For adverbs like "maybe" which take no degree specifier
;
; DPF 26-Jul-99 - Made MOD..HEAD be 'verb' instead of 'adverbee' to block
; "so then" with "then" as discourse adverb.
scopal_s_adverb_nospec_synsem := basic_scopal_adverb_synsem &
  [ LOCAL [ CAT [ VAL.SPR < >,
		  HEAD adv &
			  [ MOD < [ LOCAL.CAT [ HEAD verb & strict_type,
						VAL [ SUBJ *olist*,
						      COMPS *olist* ],
						MC bool ] ] > ] ],
	    CONT [ TOP #top,
		   LISZT <! relation, prpstn_rel &
			              [ HANDEL #top,
					SOA #soahand ] !>,
		   H-CONS <! qeq,
			     qeq &
			   [ SC-ARG #soahand,
			     OUTSCPD #khand ] !> ],
	    KEYS.KEY.HANDEL #khand ] ].

intersect_s_or_vp_adverb_nospec_synsem := basic_int_adverb_synsem &
  [ LOCAL [ CAT [ VAL.SPR < >,
		  HEAD.MOD < [ LOCAL.CAT adverbee_cat &
					 [ VAL.COMPS *olist* ] ] > ],
	    CONT.LISZT <! relation !> ] ].

adverb_word := norm_mod_no_affix_word &
  [ SYNSEM scopal_adverb_synsem & 
	   [ LOCAL.CAT.HEAD.MOD < [ LOCAL.CAT.HEAD v_or_g_or_a & 
						   strict_type ] > ] ].
    
adv_le :< adverb_word.

; 'back' of 'back on the table'
int_pp_adv_le := norm_mod_no_affix_word &
  [ SYNSEM basic_intersect_adverb_synsem &
	   [ LOCAL [ CAT [ HEAD.MOD < [ LOCAL.CAT cat &
						  [ HEAD prep & strict_type ] ] >,
			   POSTHEAD - ],
		     CONT.LISZT <! relation !> ] ] ].

; DPF (27-Apr-99) Assume for now that S-initial adverbs can only modify [ INV - ]
; S's, in order to block "*Never does kim sleep?"
s_adv_pre_le := norm_mod_no_affix_notopkey_word &
  [ SYNSEM scopal_s_adverb_synsem &
	   [ LOCAL.CAT [ POSTHEAD -,
			 HEAD.MOD < [ LOCAL.CAT.HEAD.INV - ] > ] ] ].
    
s_adv_nospec_le := norm_mod_no_affix_notopkey_word &
  [ SYNSEM scopal_s_adverb_nospec_synsem ].

s_adv_pre_word_nospec_le := norm_mod_no_affix_notopkey_word &
  [ SYNSEM scopal_s_adverb_nospec_synsem &
	   [ LOCAL.CAT.POSTHEAD - ] ].
    
s_adv_le := norm_mod_no_affix_notopkey_word &
  [ SYNSEM scopal_s_adverb_synsem &
	   [ LOCAL.CAT.HEAD.MOD < [ LOCAL.CAT.HEAD.INV - ] > ] ].

adv_pre_le := adverb_word & 
  [ SYNSEM.LOCAL.CAT.POSTHEAD - ].

adv_post_le := adverb_word & 
  [ SYNSEM.LOCAL.CAT.POSTHEAD + ].

vp_adverb_word := norm_mod_no_affix_word &
  [ SYNSEM scopal_vp_adverb_synsem ].
    
vp_adv_le := vp_adverb_word.

comp_vp_adv_le := norm_mod_no_affix_word &
  [ SYNSEM comp_vp_adverb_synsem ].

vp_aux_adv_le := norm_mod_no_affix_word &
  [ SYNSEM scopal_vp_aux_adverb_synsem ].
    
vp_adv_post_le := vp_adverb_word & 
  [ SYNSEM.LOCAL.CAT [ HEAD.MOD < [ LOCAL.CAT.HEAD v_or_g ] >,
                       POSTHEAD + ] ].

vp_adv_pre_le := vp_adverb_word & 
  [ SYNSEM.LOCAL.CAT.POSTHEAD - ].

int_vp_adverb_word := norm_mod_no_affix_word &
  [ SYNSEM intersect_vp_adverb_synsem ].
    
int_vp_adv_le := int_vp_adverb_word.

int_vp_adv_post_le := int_vp_adverb_word & 
  [ SYNSEM.LOCAL.CAT.POSTHEAD + ].

; ERB (31-10-96) See notes near wh_pro_le.
; where, when, how
wh_adverb_le := nonconj & non_affix_bearing & mcna & nonslash & nonrel & 
		  topkey &
  [ SYNSEM prep_p_mod_synsem &
      [ LOCAL [ CAT [ HEAD prep* &
			   [ PRD bool,
			     MOD < [ LOCAL.CAT.HEAD v_or_g_or_a & 
						    strict_type ] > ],
		      VAL.COMPS < >,
		      POSTHEAD + ],
		CONT [ LISZT <! #key & [ ARG3 #objind ],
			        which_rel & [ BV #objind,
					      RESTR #rhand ],
			        nom_rel & #altkey &
			                  [ HANDEL #nhand,
					    INST #objind ] !>,
		       H-CONS <! qeq &
			       [ SC-ARG #rhand,
				 OUTSCPD #nhand ] !> ],
		KEYS [ KEY #key,
		       ALTKEY #altkey ] ],
	NON-LOCAL.QUE 1-dlist &
	      [ LIST < handle > ] ] ].
 
rel_adverb_le := rel_word &
  [ SYNSEM basic_lex_pp_synsem &
      [ LOCAL [ CAT [ HEAD prep* & 
			   [ PRD +,
			     MOD < [ LOCAL [ CAT vp_cat &
						 [ HEAD verb ],
					     CONT.INDEX #event & event,
					     CONJ cnil,
					     KEYS.MESSAGE #msg ] ] > ],
		      VAL.SPR < synsem & [ LOCAL local_min &
					   [ CAT [ HEAD adv,
						   VAL [ SPR *olist*,
							 COMPS *olist* ] ],
					     KEYS.KEY degree_rel &
						 [ HANDEL #khand,
						   DARG #darg ] ],
				     NON-LOCAL.QUE 0-dlist,
				     OPT + ] >,
		      POSTHEAD + ],
		CONT [ INDEX #event,
		       LISZT <! #key & [ ARG #argind,
					 ARG3 #objind ],
			        def_np_rel & [ BV #objind,
					       RESTR #rhand ],
			        nom_rel & #altkey &
			                  [ HANDEL #nhand,
					    INST #objind ] !>,
		       H-CONS <! qeq &
			       [ SC-ARG #rhand,
				 OUTSCPD #nhand ] !> ],
		KEYS [ KEY #key & [ HANDEL #khand,
				    DIM #darg ],
		       ALTKEY #altkey,
		       MESSAGE #msg ] ],
	NON-LOCAL.REL 1-dlist & [ LIST < [ TOP #nhand,
					   INDEX #argind ] > ] ] ].

; 'on vacation', 'in bed'

prep_p_mod_phr_synsem := prep_p_mod_synsem & phr_synsem.

pp_idiom_le := msg_amalg_word &
  [ SYNSEM prep_p_mod_phr_synsem &
	   [ LOCAL [ CAT [ HEAD prep*,
                           VAL [ SUBJ < [ NON-LOCAL [ SLASH 0-dlist,
                                                      REL 0-dlist,
                                                      QUE 0-dlist ] ] >,
                                 COMPS < > ] ],
                     KEYS [ KEY #key,
                            ALTKEY #altkey ],
                     CONT [ LISZT <! #key & [ ARG3 #inst ],
                                     #altkey & 
                                   [ HANDEL #nhand,
                                     INST #inst & ref-ind &
                                            [ PNG png & [ PN 3sg,
                                                          GEN neut ] ] ],
                                   udef_rel &
                                   [ BV #inst,
                                     RESTR #rhand ] !>,
                            H-CONS <! qeq &  [ SC-ARG #rhand,
                                               OUTSCPD #nhand ] !> ] ],
             NON-LOCAL [ SLASH 0-dlist,
                         REL 0-dlist,
                         QUE 0-dlist ] ] ].

comparison_spec_le := norm_no_affix_word &
  [ SYNSEM nomod_synsem &
	  [ LOCAL [ CAT [ HEAD adv,
			  VAL [ COMPS < >,
				SPR < > ] ],
		    CONT [ TOP #hand,
			   INDEX #inst,
			   LISZT <! #key &
				    [ HANDEL #hand,
				      C-INST #inst ] !>,
                           H-CONS <! !> ],
		    KEYS.KEY #key ] ] ].
			   

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; DETERMINERS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Determiners must have the KEY relation be the quantifier, since nouns
;; select their determiner in part based on the type of the quantifier rel.
;; The basic determiner synsem has a non-null value for its specifier; this is 
;; to account for cases like "nearly all books, only his book, exactly which
;; book, almost every book".  
;;
;; Quantifiers need to accommodate expressions like
;; 'almost every book'.  One might expect to have the degree_rel of 'almost'
;; take the handle of 'every' as its ARG value, but this may interfere with the
;; treatment of scope which needs to identify the set of quantifier handles.
;; So we do this by adding separate lexical entries for these det-specs.

basic_det_synsem := nomod_synsem &
  [ LOCAL [ CAT [ HEAD det,
		  VAL [ SPR < [ LOCAL local_min &
				      [ KEYS.KEY degree_rel & 
						     [ HANDEL #khand,
						       DARG #darg ] ],
				NON-LOCAL [ QUE 0-dlist,
					    REL 0-dlist ],
				OPT + ] >, 
			SPEC < [ LOCAL.CONT [ TOP #nhand,
					      INDEX #index ] ] >,
			COMPS < > ] ],
	    CONT nom-obj &
		[ INDEX #index,
		  LISZT.LIST < quant_or_wh_rel & #key, ... >,
		  H-CONS.LIST < qeq &
				[ SC-ARG #rhand,
				  OUTSCPD #nhand ], ... > ],
	    KEYS.KEY #key & [ HANDEL #khand,
			      BV #index,
			      RESTR #rhand,
			      DIM #darg ],
	    ARG-S < > ] ].

nonpart_det_synsem :< basic_det_synsem.

det_synsem := nonpart_det_synsem &
  [ LOCAL.CONT [ LISZT <! quant_or_wh_rel !>,
		 H-CONS <! qeq !> ] ].

part_det_synsem :< basic_det_synsem.

part_det_synsem_nonwh := part_det_synsem & 
  [ LOCAL.CONT.H-CONS <! qeq !>,
    NON-LOCAL.QUE 0-dlist ].



next_last_det_synsem := nonpart_det_synsem &
  [ LOCAL [ CAT.VAL.SPEC < [ LOCAL [ CONT.TOP #nhand,
				     KEYS.KEY temp_abstr_rel ] ] >,
	    CONT [ LISZT <! def_rel &
			    [ BV #ind & [ PNG png & [ PN 3sg ],
					  DIVISIBLE -* ] ],
			    relation & #altkey &
			    [ HANDEL #nhand,
			      ARG #ind ] !>,
		   H-CONS <! qeq !> ],
	    KEYS.ALTKEY #altkey ] ].

det_word := que_word &
  [ SYNSEM det_synsem & [ LOCAL.CAT.HEAD.POSS - ] ].

det_word_sing := det_word &
  [ SYNSEM.LOCAL.KEYS.KEY.BV [ PNG png & [ PN 3sg ],
			       DIVISIBLE -* ] ].

det_word_nonque := det_word & nonque.

det_pl_le := det_word_nonque &
  [ SYNSEM [ LOCAL.KEYS.KEY.BV.PNG png & [ PN 3pl ],
	     MODIFIED hasmod ] ].

det_sm_le := det_word_nonque &
  [ SYNSEM [ LOCAL.KEYS.KEY.BV.PNG png & [ PN 3sg ],
	     MODIFIED hasmod ] ].

det_plm_le := det_word &
  [ SYNSEM [ LOCAL.KEYS.KEY.BV.DIVISIBLE +*,
	     MODIFIED hasmod ] ].

next_last_det_le := que_word & nonque &
  [ SYNSEM next_last_det_synsem & 
	   [ LOCAL.CAT.HEAD.POSS -,
	     MODIFIED hasmod ] ].  

pdet_word := que_word &
  [ SYNSEM part_det_synsem_nonwh &
	   [ LOCAL.CONT.LISZT <! quant_or_wh_rel !>,
	     MODIFIED hasmod ] ].

pdet_word_nonque := pdet_word & nonque.

pdet_le :< pdet_word_nonque.

pdet_sg_le := pdet_word_nonque &
  [ SYNSEM.LOCAL.KEYS.KEY.BV [ PNG png & [ PN 3sg ],
				   DIVISIBLE -* ] ].

pdet_ms_le := pdet_word_nonque &
  [ SYNSEM.LOCAL.KEYS.KEY.BV [ PNG png & [ PN 3sg ],
				   DIVISIBLE +* ] ].

pdet_pl_le := pdet_word_nonque &
  [ SYNSEM.LOCAL.KEYS.KEY.BV.PNG png & [ PN 3pl ] ].

; This assumes (falsely) that all plurals are divisible (cf "oats", "clothes")
pdet_pl_mass_le := pdet_word_nonque &
  [ SYNSEM [ LOCAL.KEYS.KEY.BV.DIVISIBLE +*,
	     MODIFIED hasmod ] ].

pdet_unsp_le := que_word &
  [ SYNSEM part_det_synsem & 
	   [ LOCAL [ CAT.HEAD.POSS -,
		     CONT [ LISZT <! quant_or_wh_rel !>,
			    H-CONS <! qeq !> ] ],
	     NON-LOCAL.QUE 1-dlist &
		           [ LIST < handle > ] ] ].

pdet_word_pl_mass_wh := que_word &
  [ SYNSEM part_det_synsem & 
	   [ LOCAL [ CAT.HEAD.POSS -,
		     CONT [ LISZT <! udef_rel,
				 which_rel & [ BV #index,
					       RESTR #rhand ],
				 basic_nom_rel & #altkey &
				   [ HANDEL #nhand,
				     INST #index ] !>,
			    H-CONS <! qeq,
				      qeq &
				      [ SC-ARG #rhand,
					OUTSCPD #nhand ] !> ],
		     KEYS.ALTKEY #altkey ],
	     NON-LOCAL.QUE 1-dlist &
		           [ LIST < handle > ] ] ].

pdet_ms_wh_le := pdet_word_pl_mass_wh &
  [ SYNSEM.LOCAL.KEYS [ KEY.BV [ PNG png & [ PN 3sg ],
				 DIVISIBLE +* ],
			ALTKEY quantity_rel ] ].

pdet_pl_wh_le := pdet_word_pl_mass_wh &
  [ SYNSEM.LOCAL.KEYS [ KEY.BV.PNG png & [ PN 3pl ],
			ALTKEY number_rel ] ].

pdet_one_le := que_word &
  [ SYNSEM part_det_synsem_nonwh &
	   [ LOCAL [ CAT.VAL.SPEC < [ LOCAL.KEYS.KEY.HANDEL #nomhand ] >,
		     CONT.LISZT <! udef_rel &
				   [ BV #ind & 
					[ PNG png & [ PN 3sg ],
					  DIVISIBLE -* ] ],
				   const_rel &
				   [ HANDEL #nomhand,
				     ARG #ind,
				     CONST_VALUE "1" ] !> ] ] ].


;; DPF 10-May-00 - We add subtypes of determiners to distinguish "We met every week"
;; from "*We met the week".  The distinction makes use of the feature MODIFIED,
;; where the head-specifier rule's mother's MODIFIED value is determined by the
;; specifier daughter, so each specifier has to say whether it passes on the 
;; MODIFIED value from its head, or supplies its own.  Thus "the" just passes up
;; the value from the head, "every" supplies its own 'hasmod' value, and "a"
;; supplies the opposite value "notmod", to block "*Kim arrived a big week".

; 'the'
det_le := det_word_nonque &
  [ SYNSEM [ LOCAL.CAT.VAL.SPEC < [ MODIFIED #modif ] >,
	     MODIFIED #modif ] ].

; 'half the'
det_word_modable := det_word &
  [ SYNSEM.MODIFIED hasmod ].

det_wh_le :< det_word_modable.
det_modable_le := det_word_modable & nonque.

det_sing_nonque := det_word_sing & nonque.

; 'an'
det_sg_nomod_le := det_sing_nonque &
  [ SYNSEM.MODIFIED notmod ].

; 'every'
det_sg_le := det_sing_nonque &
  [ SYNSEM.MODIFIED hasmod ].

;; We make the non-quantifier relation generically pron_rel, and have each
;; individual pronoun simply constrain the INST index of that pron_rel.
;;   This type is used for both WH "whose" and relative "whose", so it leaves 
;; both  QUE  and  REL  values unspecified, but supplies all other defaults.

poss_word := nonconj & non_affix_bearing & nonslash & nonmsg & 
	     mcna &
  [ SYNSEM.LOCAL [ CAT.HEAD.POSS +,
		   CONT nom-obj &
			[ INDEX #index,
			  LISZT.LIST < relation,
				       poss_rel & [ POSSD #index ], ... > ] ]].

; ERB (31-10-96) See notes near wh_pro_le.

wh_poss_le := poss_word & nonrel &
  [ SYNSEM nonpart_det_synsem &
	   [ LOCAL [ CAT.VAL.SPEC < [ LOCAL.CONT.TOP #nhand ] >,
		     CONT [ LISZT <! which_rel & #key,
				     relation & [ HANDEL #nhand,
						  POSSR #ind ],
				     person_rel & [ HANDEL #phand,
						    INST #ind ],
				     def_np_rel & [ BV #ind,
						    RESTR #rhand2 ] !>,
			    H-CONS <! qeq, 
				      qeq &
				      [ SC-ARG #rhand2,
					OUTSCPD #phand ] !> ],
		     KEYS.KEY #key ],
	     NON-LOCAL.QUE 1-dlist &
			   [ LIST < handle > ] ] ].

nonwh_poss_word := poss_word & nonque &
  [ SYNSEM nonpart_det_synsem &
	   [ LOCAL [ CONT.H-CONS <! qeq !>,
		     KEYS.KEY def_rel ] ] ].

poss_le := nonwh_poss_word & nonrel &
  [ SYNSEM.LOCAL [ CAT.VAL.SPEC < [ LOCAL.CONT.TOP #hand ] >,
		   CONT [ LISZT <! relation,
				   [ HANDEL #hand,
				     POSSR #ind ],
				   pron_rel &
				   [ HANDEL #hand,
				     INST #ind &
					  [ PRONTYPE std_pron ] ] !> ] ] ].

rel_poss_le := nonwh_poss_word &
  [ SYNSEM [ LOCAL.CONT.LISZT <! relation,
			       [ HANDEL #hand,
				 POSSR #ind ] !>,
	     NON-LOCAL.REL 1-dlist &
			   [ LIST < [ TOP #hand,
				      INDEX #ind ] > ] ] ].


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Free relatives
;
; One crucial property of free relatives is that they have a non-empty QUE
; value whose single list element is an index (rather than the handle which
; is employed for ordinary question WH-words).
; The other is that they encode the constraints for their S/XP sister in the
; free-relative construction, in their SLASH attribute.

free_rel_pro_word := nonconj & non_affix_bearing & mcna & nonrel & nonmsg &
		     hc-to-phr &
  [ SYNSEM synsem &
	   [ LOCAL [ CAT.VAL [ SPR < >,
			       SUBJ < >,
			       COMPS < > ],
		     AGR #ind,
		     CONT [ INDEX #ind & ref-ind & [ PNG.PN 3sg ],
			    LISZT.LIST < free_relative_ever_rel &
					 [ BV #ind,
					   RESTR #rhand ], 
					 [ HANDEL #nhand,
					   INST #ind ], ... >,
			    H-CONS <! qeq &
				    [ SC-ARG #rhand,
				      OUTSCPD #nhand ] !> ],
		     ARG-S < > ],
	     NON-LOCAL [ REL 0-dlist,
			 QUE 1-dlist & <! #ind !>,
			 SLASH 1-dlist &
                               <! [ AGR ref-ind & [ PNG.PN 3sg ] ] !> ] ] ].


; whatever, whoever
freerel_pro_np_le := free_rel_pro_word &
  [ SYNSEM [ LOCAL [ CAT.HEAD noun* &
			      [ MOD < >,
				PRD - ],
		     CONT.LISZT <! relation, #key !>,
		     KEYS [ KEY #key,
			    ALTKEY #key ] ],
	     NON-LOCAL.SLASH 1-dlist &
		   <! [ CAT.HEAD noun & [ MOD < > ] ] !> ] ].

; when, where
freerel_pro_np_adv_le := free_rel_pro_word &
  [ SYNSEM [ LOCAL [ CAT.HEAD noun* &
			      [ MOD < > ],
		     CONT.LISZT <! relation, #key !>,
		     KEYS [ KEY #key,
			    ALTKEY #key ] ],
	     NON-LOCAL.SLASH 1-dlist &
		   <! [ CAT.HEAD prep & [ MOD < synsem > ] ] !> ] ].

free_rel_det_word_gen := nonconj & non_affix_bearing & mcna & nonrel & nonmsg &
		     hc-to-phr &
  [ SYNSEM basic_det_synsem & 
	   [ LOCAL [ CAT [ HEAD.POSS -,
			   VAL.SPEC < [ LOCAL.CONT.TOP #althand ] > ],
		     CONT [ LISZT <! free_relative_ever_rel !>,
			    H-CONS <! qeq !> ],
		     KEYS.ALTKEY.HANDEL #althand  ],
	     NON-LOCAL [ QUE 1-dlist &
			     [ LIST < index > ],
			 SLASH 1-dlist &
			     <! [ CAT.HEAD n_or_p ] !> ] ] ].

; whatever, what
freerel_det_le := free_rel_det_word_gen &
  [ SYNSEM det_synsem & 
           [ LOCAL.CAT.HEAD.POSS -,
             NON-LOCAL.SLASH <! [ CAT.HEAD.CASE acc ] !> ] ].

; whichever
freerel_pdet_le := free_rel_det_word_gen &
  [ SYNSEM part_det_synsem ].


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Possessives
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Possessive "'s" takes an NP[-Poss] specifier and projects either an
;; NP[+Poss] phrase (for "the book of Kim's") or a DetP[+Poss] phrase (for
;; "Kim's book").  Either way, the content of the possessive phrase will be a
;; definite possessive quantifier.  The NP[+Poss] things also work pretty well
;; for things like "Kim's is under the desk" if we allow governed NPs to be
;; +Poss.  The tricky thing will be figuring out exactly where `bare
;; possessives' can show up.  Also, we need to add the restriction that the SPR
;; must be non-pronominal.  We cannot simply make the synsem of the SPR be
;; the type nonpronominal, since that NP might be either lexical or phrasal,
;; distinguished by the synsem types lex_synsem and phr_synsem.  So we use
;; the semantic KEY relation to identify nonpronominals.

;; Another question is what do we do with the scope
;; of quantifiers in the possessor?  This entry assumes that they always have
;; narrow scope.  That should be an empirical question, as the saying goes.

poss_clitic_le := mcna & nonconj & nonmsg & non_affix_bearing &
  [ SYNSEM nomod_synsem &
     [ LOCAL [ ARG-S < #spr >,
	       CAT [ HEAD poss-able &
			  [ POSS + ],
		     VAL [ SPR < #spr & synsem &
				 [ LOCAL [ CAT nomp_cat_min,
					   CONJ cnil,
					   KEYS.KEY non_temp_nom_rel,
					   CONT.INDEX #pindex & individual ],
				   NON-LOCAL [ SLASH #slash,
					       REL #rel,
					       QUE #que ],
				   OPT - ] >,
			   COMPS < >,
			   SPEC < [ LOCAL.CONT [ TOP #phand,
						 INDEX #index ] ] > ] ],
	       CONT [ INDEX #index,
		      LISZT <! #key & def_np_rel & [ BV #index,
						     RESTR #rhand ],
			       #ckey & poss_rel & [ HANDEL #phand,
						    POSSR #pindex,
						    POSSD #index ] !>,
		      H-CONS <! qeq & [ SC-ARG #rhand,
					OUTSCPD #phand ] !> ],
	       KEYS [ KEY #key,
		      --COMPKEY #ckey ] ],
       NON-LOCAL [ SLASH #slash,
		   REL #rel,
		   QUE #que ] ] ].

;; The possessive "of" takes an NP[+Poss] complement (e.g., "Kim's", "mine")
;; and modifies an N'[-Poss].  Unfortunately, the way the hierarchy of
;; preposition types is built, there wasn't any type this could inherit from.
;; We could probably rearrange things so this inherits some preposition
;; properties, but right now I'm too lazy.  Also, somehow we'll have to make
;; sure that this doesn't modify a pronoun.  The semantic manipulation here is
;; tricky - keep your eyes on the definite quantifier.  This def_rel provided
;; by the apostrophe-s (for its other life as a determiner), is dropped by the
;; possessive-of, analogous to nouns, verbs, and adjectives dropping the
;; semantics of the prepositions that can mark their complements.  This
;; dropping of the relation is effected by having the possessive-of neglect to
;; grab the handle of the def_rel for its complement, but grab instead the
;; handle (and instance variable) of the NP complement of the apostrophe-s.
;; Then the general semantic pruning mechanism will ignore the def_rel, since
;; its handle will not be a value in any other relation.

one_arg_isect := one_arg & isect_synsem.

poss_of_le := nonque & nonconj & nonslash & nonrel & mcna & non_affix_bearing &
	      hc-to-phr &
  [ SYNSEM one_arg_isect &
     [ LOCAL 
       [ ARG-S #comps,
	 CAT [ HEAD prep* & 
		    [ PRD -,
		      MOD < [ LOCAL [ CAT nbar_cat,
				      CONT [ TOP #hand,
					     INDEX #index ],
				      CONJ cnil,
				      KEYS.MESSAGE #msg ] ] > ],
	       VAL [ SUBJ < >,
		     SPR < >,
		     COMPS #comps & < synsem &
				      [ LOCAL [ CAT [ HEAD noun & strict_type &
							   [ POSS + ],
						      VAL [ SPR *olist*,
							    COMPS *olist* ],
						      MC na_or_- ],
						CONJ cnil,
						KEYS [ ALTKEY [ HANDEL #hand,
								POSSD #index ]]],
					OPT - ] > ],
	       POSTHEAD + ],
	 CONT [ TOP #hand,
		INDEX #index,
		LISZT <! !> ],
	 KEYS [ KEY no_rel,
		MESSAGE #msg ] ] ] ].

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; SUBORDINATING CONJUNCTIONS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; These are not restricted to modifying only main VPs, since e.g. "if" needs
; to take scope over modals as in "I'd be pleased if we made an appointment."
; This lack of constraint means there will be structural ambiguity for 
; if-clauses, but not spurious - get different scopes of "if" and modals.
; But we restrict them to modifying only finite VPs or imperatives.

; DPF (10-Jan-99) Changed these to modify S rather than VP, since they don't
; appear to survive extraction from embedded clauses, nor do they appear inside
; an extraposed subject relative clause.

; DPF (10-Jan-98) For some reason, can't make the HEAD value prep* - fails to
; unify with strict_type in "Kim sleeps if Sandy sleeps".  Solve later.

subconj_synsem := nonprd_synsem & basic_one_arg &
  [ LOCAL [ ARG-S #comps,
	    CAT [ HEAD prep &
		       [ MOD < [ LOCAL scopal_mod &
				       [ CAT s_cat_fin_or_imp &
                                             [ MC #mc ],
					 CONT [ TOP #modtop,
						INDEX #ind ],
					 CONJ cnil ],
				 NON-LOCAL.SLASH 0-dlist ] > ],
		  VAL [ SUBJ < >,
			COMPS #comps & 
			     < synsem &
			       [ LOCAL [ CAT s_cat_fin,
					 CONT [ TOP #ctop,
						INDEX event ],
					 KEYS [ KEY #ckey,
						MESSAGE 1-dlist &
						    <! message !> ] ],
				 NON-LOCAL [ SLASH 0-dlist,
					     REL 0-dlist,
					     QUE 0-dlist ],
				 OPT - ] >,
			SPR < > ],
                  MC #mc ],
            CONT [ TOP #top,
		   INDEX #ind,
		   LISZT <! subord_rel & #key &
			    [ HANDEL #stop,
			      MAIN #main,
			      SUBORD #subord ],
			    prpstn_rel & #msg &
			    [ HANDEL #top,
			      SOA #soa ] !>,
		   H-CONS <! qeq & [ SC-ARG #main,
				     OUTSCPD #modtop ],
			     qeq & [ SC-ARG #subord,
				     OUTSCPD #ctop ],
			     qeq & [ SC-ARG #soa,
				     OUTSCPD #stop ] !> ],
	    KEYS [ KEY #key,
		   --COMPKEY #ckey,
		   MESSAGE <! #msg !> ] ] ].
 
subconj_word := basic_mod_no_affix_notopkey_word &
  [ SYNSEM subconj_synsem ].
    
subconj_le :< subconj_word.

subconj_if_le :< subconj_word.

; "in order to"
subconj_inf_synsem := prd_synsem & basic_one_arg &
  [ LOCAL [ CAT [ HEAD prep* &
		       [ MOD < [ LOCAL scopal_mod &
				       [ CAT vp_cat &
					     [ HEAD verb ],
					 CONT [ TOP #modtop,
						INDEX #ind ],
					 CONJ cnil,
					 KEYS.MESSAGE #msg ] ] > ],
		  VAL [ SUBJ < >,
			COMPS 
			 < synsem &
			   [ LOCAL 
			     [ CAT vp_bse_cat &
				   [ VAL [ SUBJ 
					    < unexpressed &
					      [ LOCAL.CONT.INDEX #sind ] >,
					   SPR *olist* ] ],
			       CONT.TOP #ctop,
			       KEYS [ KEY #ckey,
				      MESSAGE 0-dlist ] ],
			     NON-LOCAL [ SLASH 0-dlist,
					 REL 0-dlist,
					 QUE 0-dlist ],
			     OPT - ] >,
			SPR < > ] ],
	    CONT [ LISZT <! subord_rel & #key &
			    [ HANDEL #hand,
			      MAIN #main,
			      SUBORD #subord ],
			    pron_rel & [ HANDEL #hand,
					 INST #sind &
						[ PRONTYPE zero_pron ] ] !>,
		   INDEX #ind,
		   H-CONS <! qeq & [ SC-ARG #main,
				     OUTSCPD #modtop ],
			     qeq & [ SC-ARG #subord,
				     OUTSCPD #ctop ] !> ],
	    KEYS [ KEY #key,
		   --COMPKEY #ckey,
		   MESSAGE #msg ] ] ].

subconj_inf_le := norm_mod_no_affix_word &
  [ SYNSEM subconj_inf_synsem ].

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Coordinating conjunctions
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; HACK: For efficiency, restrict conjunctions to only coordinate phrases which 
; are saturated for COMPS.  This falsely excludes "Kim bought and sold a car".

; DPF (25-Apr-98) Removed COMPS..HEAD subst constraint, to allow 
; "your and my offices"

; DPF 8-Jun-99 - Removed hack on saturated COMPS - was blocking e.g. "between
; eleven and one p.m."

; AAC I am not at all convinced that conj_word's shouldn't 
; be non_affix_bearing and INFLECTED -, but replicate existing 
; behaviour for now

conj_word := word &
  [ INFLECTED +,
    SYNSEM synsem &
     [ LOCAL [ CAT [ HEAD #head,
		     MC #mc,
		     VAL [ SUBJ #subj,
			   SPR #spr,
			   COMPS < synsem &
				   [ LOCAL local_min &
					   [ CAT [ HEAD #head,
						   MC #mc,
						   VAL [ SUBJ #subj,
							 SPR #spr,
							 COMPS #comps ],
                                                   HC-LEX #hclex ],
					     AGR.DIVISIBLE #div,
					     KEYS [ KEY #key,
						    MESSAGE #msg ] ],
                                     LEX #lex,
				     OPT - ] 
				   . #comps > ],
                     HC-LEX #hclex ],
               AGR.DIVISIBLE #div,
	       KEYS [ KEY #key,
		      MESSAGE #msg ] ],
       LEX #lex ] ].

; A coordinating conjunction needs to "prime" the CONJ.HANDELS and
; CONJ.INDICES lists, so that the right side of a binary coordination looks
; like an iterated coordination.

coord_c_le := conj_word &
  [ SYNSEM.LOCAL [ CAT.VAL.COMPS.FIRST.LOCAL.CONT.INDEX #ind,
		   CONJ complex-conj,
		   CONT [ TOP #chand,
			  INDEX #cind,
			  LISZT <! #altkey & relation &
				 [ HANDEL #chand,
				   C-ARG #cind,
				   R-INDEX #ind ] !>,
			  H-CONS <! !> ],
		   KEYS.ALTKEY #altkey ] ].

coord_a_le := conj_word &
  [ SYNSEM.LOCAL [ CAT.VAL.COMPS.FIRST.LOCAL.CONT.TOP #hand,
		   CONJ atomic-conj,
		   CONT [ TOP #hand,
			  LISZT <! !>,
			  H-CONS <! !> ] ] ].

; two hundred and fifty
and_num_le := conj_word &
  [ SYNSEM.LOCAL [ CAT.VAL.COMPS.FIRST.LOCAL [ CAT.HEAD intadj2-,
					       CONT.TOP #hand ],
		   CONJ num-conj,
		   KEYS.KEY integer_rel,
		   CONT [ TOP #hand,
			  LISZT <! !>,
			  H-CONS <! !> ] ] ].


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; NEG
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; not

; "not" requires its VP complement to be [VFORM non_fin], which is a supersort
; for all non-finite vforms except imp_vform, which is a subsort of bse; the
; other subsort of bse, bse_only, is a subsort of non_fin.  Most verbs with
; base morphology are [VFORM bse], and hence (the VPS they project) can be
; modified by "not", and they can also head imperative clauses, which require
; the head to be [VFORM imp_vform].  Only if modified by "not" will a base
; VP be unable to project an imperative clause; in contrast, "never sleep" is 
; fine as an imperative, since "never" does not further restrict its VP 
; complement leaving it [VFORM bse], which is consistent with the imperative 
; rule.  This fine distinction is due to Rob M.

not_le := norm_mod_no_affix_word &
  [ SYNSEM lex_synsem & 
	 [ LOCAL [ CAT [ HEAD negadv &
			      [ MOD < [ LOCAL scopal_mod &
					      [ CAT [ HEAD verbal & strict_type &
							   [ VFORM non_fin ],
						      VAL [ SUBJ < synsem_min >,
							    COMPS *olist* ],
                                                      MC na ],
						CONT [ TOP #mhand,
						       INDEX #vevent ],
						CONJ cnil,
						KEYS.MESSAGE #msg ] ] > ],
			 VAL [ SUBJ < >,
			       COMPS < >,
			       SPR < > ],
			 POSTHEAD - ],
		   CONT [ INDEX #vevent,
			  LISZT <! neg_rel & #key &
				 [ ARG #hand ] !>,
			  H-CONS <! qeq &
				  [ SC-ARG #hand,
				    OUTSCPD #mhand ] !> ],
		   KEYS [ KEY #key,
			  MESSAGE #msg ] ] ] ].

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; COMPLEMENTIZERS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Complementizers except for 'to' are marked [SUBJ < >] which prevents them
; from having PP modifiers.

; ERB (07-10-96) 'whether' clauses are made with the regular hcomp rule, so
; the polar_q_rel must come from 'whether' itself.  This means that whether
; can't identify its KEY with its COMPKEY.  Also, I made complementizer_word
; inherit from msg_word (see comments near that type).  This has the effect of
; making non_affix_bearing be inherited by this type, instead of the lower
; types.

; ERB (14-12-97) to_c_prop needs to be MC + for infinitival relatives
; (see notes near to and non_wh_rel_cl) so this type can't say MC -.
; There is no convenient supertype to all of the MC - ones, so I'm
; just going to put it in on each for now.

; ERB (14-12-97) Complementizer_word can't be nonmod_local because 
; to_c_nonprop is going to have a non-empty mod value.  Again, For
; now I'm scattering this constraint among the lower types as appropriate.

; ERB (13-01-98) In fact, complementizer_word can't even be MC bool,
; because to_c_nonprop has to be MC na in order to head hcomps that
; serve as modifiers, as in "a teacher to talk to Sandy".

;;; DPF 01-Mar-00 - Reconsider, now that support_rel has been eliminated.
; DPF (27-Sept-98) Made KEY be v_event_rel, since "to" needs to pass up the
; KEY.HANDEL of its complement, in order to get the desired semantics for e.g.
; "Kim is going to lose" where the copula's support_rel identified its HANDEL
; with that of its complement's KEY.
; 
; DPF (13-Jan-99) Generalized to make KEY be v_event_rel for all complementizers,
; needed in particular to avoid treating complementizers as particles, which
; are selected by KEY value.

complementizer_word := msg_word & 
  [ SYNSEM.LOCAL local_min &
		 [ CAT [ HEAD comp &
			      [ POSS -,
				INV - ],
			 VAL.SPR *olist* ],
		   AGR.PNG.PN 3sg*,
		   CONT.INDEX non_expl,
		   KEYS.KEY v_event_rel ] ].

plain_compl_word := complementizer_word &
  [ SYNSEM.LOCAL [ CAT.VAL [ SUBJ < #subj >,
			     COMPS #comps & 
				    < [ LOCAL local_min &
					      [ KEYS.KEY #ckey,
						CONT.INDEX #ind ],
					OPT - ], ... > ],
		   CONT.INDEX #ind,
		   ARG-S < #subj . #comps >,
		   KEYS [ --COMPKEY #ckey ] ] ].

; These are the subject-to-object raising complementizers.  We're giving a
; funny three-constituent analysis to CPs: "that [Kim] [walks]" and "for [Kim]
; [to walk]".  One (beneficial) side effect of this is that finite and
; non-finite CPs get a uniform analysis, and we also can do real subject
; extraction without running afoul of the dreaded that-trace filter
; (Perlmutter 1971).  

; We also need another "that", one that combines with an adverbial and an
; S/Adv.  This accounts for why you get preposed modifiers with that clauses
; and not with for/to clauses, and why you don't get the that-t effect when
; you have an adverb in there.  But, that second "that" is going to have to
; bind off a SLASH value, sort of like the tough-movement cases, and that will
; have to wait for lexicalized SLASH passing.

; ERB (14-12-97) See notes at complementizer_word.

; DPF (25-Mar-00) Removed re-entrancy between --COMPKEY and KEY - not clear what
; it was supposed to do, but it prevents LABEL from working as intended.
; AAC - killed LABEL 

two_place_compl_word := complementizer_word & 
  [ SYNSEM basic_two_arg & 
	   [ LOCAL nomod_local &
	   [ ARG-S #comps,
	     CAT [ HEAD.VFORM #vform,
		   MC -,
		   VAL [ SUBJ < >,
			 COMPS #comps &
			      < synsem & [ NON-LOCAL.SLASH 0-dlist ],
				[ LOCAL local_min &
					[ CAT [ HEAD verbal & strict_type &
						     [ VFORM #vform ],
						VAL.COMPS *olist* ],
					  CONT.TOP #chand,
					  KEYS [ KEY #ckey,
						 MESSAGE 0-dlist ] ],
				  OPT - ] > ] ],
	     CONT [ TOP #mhand,
		    LISZT <! #msg !>,
		    H-CONS <! qeq &
			    [ SC-ARG #soahand,
			      OUTSCPD #chand ] !> ],
	     KEYS [ --COMPKEY #ckey,
		    MESSAGE 1-dlist &
			<! #msg & [ HANDEL #mhand,
				    SOA #soahand ] !> ] ] ] ].

sor_compl_word := two_place_compl_word &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < #subj & synsem &
				 [ LOCAL [ CAT np_cat_nom_min,
					   CONJ cnil ],
				   OPT - ],
				 [ LOCAL.CAT.VAL.SUBJ < #subj > ] > ].

that_c_le := sor_compl_word & 
  [ SYNSEM.LOCAL [ CAT [ HEAD [ VFORM fin,
				TAM.MOOD #mood,
				AUX - ],
			 VAL.COMPS < synsem,
				     [ LOCAL.CAT.HEAD.TAM.MOOD #mood ] > ],
		   KEYS.MESSAGE 1-dlist &
			    <! prpstn_rel !> ] ].

for_c_le := sor_compl_word & 
  [ SYNSEM.LOCAL [ CAT.HEAD [ VFORM inf,
			      TAM.MOOD subjunctive,
			      AUX - ],
		   KEYS.MESSAGE 1-dlist &
			    <! hypo_rel !> ] ].

like_c_le := sor_compl_word & 
  [ SYNSEM.LOCAL [ CAT [ HEAD [ VFORM fin,
				TAM.MOOD subjunctive,
				AUX - ],
			 VAL.COMPS < synsem, 
				     [ LOCAL.CAT.HEAD.TAM.MOOD ind_or_mod_subj ] > ],
		   KEYS.MESSAGE 1-dlist &
			    <! _like_mood_rel !> ] ].

; ERB (13-01-98) to_compl_word says SUBJ < unexpressed >, but I don't
; how that can be, unless the analysis of raising has changed drastically.
; (With it that way, raising is broken).  So I am getting rid of it.

; ERB (19-01-98) SUBJ < unexpressed > was in there because something
; had to take care of giving that subject a SLASH value.  The solution
; we've opted for is this: the subject of to_c_prop is always PRO, and
; the subject of to_c_nonprop is always raised (that is, all
; infinitival tos except those in raising constructions are to_c_prop).
; So there is no constraint on to_compl_word, but to_c_prop says
; SUBJ < pro_ss > and to_c_nonprop says SUBJ canonical_synsem.

; ERB (03-02-98) KEY should be no_rel.  It used to be identified with
; COMPKEY, but that causes at least one problem: to was able to be the
; SPR of the, since the constrains its choice of SPR by a semantic
; constraint on the KEY.
; DPF (13-Jan-99) This problem should be solved by the above decision to
; make all complementizers have the KEY be of type v_event_rel.

to_compl_word := plain_compl_word &
  [ SYNSEM basic_two_arg &
     [ LOCAL [ CAT [ HEAD [ VFORM inf,
			    AUX +,
			    PRD - ],
		     VAL [ SUBJ < [ LOCAL.CONT #cont ] >,
			   COMPS 
				< synsem &
				  [ LOCAL 
					  [ CAT vp_bse_cat &
						[ VAL.SUBJ 
							   < [ LOCAL.CONT #cont,
							       NON-LOCAL
								 [ SLASH 0-dlist,
								   REL 0-dlist,
								   QUE 0-dlist ] ] > ],
					    KEYS.KEY.HANDEL #hand ] ] > ] ],
	       KEYS.KEY.HANDEL #hand ] ] ].

; ERB (14-12-97) Why is the SUBJ here specified as acc?? I'm taking it
; out because that follows now from pro_ss.

; ERB (08-01-98) Presumably that had to do with "for him/*he to sleep..."
; but that's the other to: to_c_nonprop.

; ERB (14-12-97) In order to implement infinitival relatives (I found
; a teacher to talk to Sandy, I found a teacher to talk to), I am
; making to_c_prop MC +.  The reasons for this is that the relevant
; cx (non_wh_rel_cl) needs to be able to take subjh_decl and hcomps
; headed by to_c_prop as its head-dtr, but not an extrasubj phrase.

; ERB (19-01-98) This to has to have a mod value so that it can
; head the infinitival relatives.  Something needs to be said about
; the features mentioned in nomod_local, probably, but I'm not sure
; what yet.  It also needs to be MC na so it can feed extrasubj.

to_c_prop_le := to_compl_word & 
  [ SYNSEM.LOCAL [ CAT [ HEAD.MOD < [ LOCAL intersective_mod &
					    [ CAT nbar_cat ] ] >,
			 VAL [ SUBJ < pro_ss >,
			       COMPS < [ LOCAL.CONT.TOP #chand ] > ],
			 MC na_or_-,
			 POSTHEAD + ],
		   CONT [ --TOPKEY #topkey,
			  LISZT <! #topkey !>,
			  H-CONS <! qeq &
				  [ SC-ARG #soahand,
				    OUTSCPD #chand ] !> ],
		   KEYS.MESSAGE 1-dlist &
				   <! hypo_rel & #topkey &
				    [ SOA #soahand ] !> ] ].

; ERB (14-12-97) This one will have a non-empty MOD value in order to
; build things like "Kim found a friend to talk to Sandy" where the
; subject of talk has to be bound to friend (unlike in "Kim found a
; friend to talk to" where we're convinced it is discourse bound.)
;
; The semantics are probably not right -- as a place holder in the
; modcont I put a appropriate_rel.  The idea is that "I found a person
; to talk to Sandy" means something like "I found a person who is willing/
; appropriate/suitable to talk to Sandy."  But I don't see how to make
; (something like) the appropriate_rel take the comlement of the to
; as an argument.  There is also the question of whether there should be
; any message associated with this.  One would think not, given that we've
; decided the relevant to is the nonprop one...
;   For now, we're not including this rel.

; ERB (13-01-98) to_compl_nonprop_word must be MC na if it is
; to head hcomps that serve as modifiers as in "a teacher to talk to Sandy".
;
; ERB (19-01-98) All infinitival relatives are now headed by
; to_c_prop.  To_c_nonprop only appears in raising constructions.
; Accordingly, it has no MOD value, and its subject is constrained
; to be canonical_synsem.  I'm not sure the latter constraint is
; actually doing any work for us, but I believe it to be true.
; It can also now inherit from nomod_local.  The MC value might
; could be changed, as well.

to_c_nonprop_le := to_compl_word & 
  [ SYNSEM.LOCAL nomod_local &
		 [ CAT [ VAL [ SUBJ < canonical_synsem >,
			       COMPS < [ LOCAL local_min &
					       [ CONT.TOP #hand ] ] > ],
			 MC na ],
		   CONT [ TOP #hand,
			  LISZT <! !>,
			  H-CONS <! !> ],
		   KEYS.MESSAGE 0-dlist ] ].

;;; DPF (21-Oct-98) Added types for elided "to", since we can't use the lexical
;; rule of auxiliary verbs, since we need to block the NP "the book to", which
;; would be built by that lexical rule, then by the application of subject
;; extraction, and then the infinitival relative rule.

to_compl_elided_word := msg_word &
  [ SYNSEM basic_one_arg &
	   [ LOCAL nomod_local &
		   [ CAT [ HEAD comp &
				[ VFORM inf,
				  INV -,
				  AUX +,
				  PRD - ],
			   VAL [ SUBJ #subj & 
				      < [ LOCAL.CONT.INDEX #index,
					  NON-LOCAL.SLASH 0-dlist ] >,
				 SPR *olist*,
				 COMPS < > ],
			   MC na ],
		     CONT [ INDEX #event,
			    LISZT.LIST < ellipsis_rel & #key &
					 [ EVENT #event,
					   ROLE #index ], ... > ],
		     ARG-S #subj,
		     KEYS.KEY #key ] ] ].

to_c_prop_elided_le := to_compl_elided_word & 
  [ SYNSEM.LOCAL [ CAT.VAL.SUBJ < pro_ss >,
		   CONT [ LISZT <! ellipsis_rel &
				   [ HANDEL #chand ], 
				   #msg !>,
			  --TOPKEY #topkey,
			  H-CONS <! qeq &
				    [ SC-ARG #soahand,
				      OUTSCPD #chand ] !> ],
		   KEYS.MESSAGE 1-dlist &
				<! hypo_rel & #msg & #topkey &
				     [ SOA #soahand ] !> ] ].

to_c_nonprop_elided_le := to_compl_elided_word & topkey &
  [ SYNSEM.LOCAL [ CAT.VAL.SUBJ < canonical_synsem >,
		   CONT [ LISZT <! ellipsis_rel !>,
			  H-CONS <! !> ],
		   KEYS.MESSAGE 0-dlist ] ].

; ERB (08-10-96) Whether was previously a que_word so that things selecting
; for questions could select by QUE values.  This is clearly a hack, and
; further, one that is no longer necessary now that we have semantic selection.
; I have split the old type whether_compl_word into two types: finite and
; nonfinite.  I have also gotten rid of the feature CMP.  
; As for the semantics, whether contributes a polar_q_rel (see notes near
; polar_q_rel in fundamentals.tdl).  Now, according to Rob, things that
; take complements with message-type semantics usually take the handle of
; those complements as the argument in their KEYs.  However, also according
; to Rob, if we did that here, it would imply that "whether Kim left every
; party" has more readings than "Kim left every party", which doesn't seem
; to be true.  Accordingly, whether will identify its handle with the
; handle of its complement, and take the complement's INDEX as the value
; of the ARG in the polar_q_rel.  Now, if whether further identified its
; INDEX with that one, things would be getting pretty twisty, so whether
; will have its own INDEX of type event.

; ERB (24-10-96) MESSAGE now functions like KEY as a pointer to
; a certain rel on the LISZT.  Both wh and yn questions will have an
; int_rel on their LISZT.  This is actually sewn into the LISZT
; by the constructions.  Whether just carries it in its MESSAGE value
; so that it unifies with the right constructions.  In this way, we
; even kind of get Rob's intuition -- whether doesn't, in a sense,
; have a message, because that message isn't on its LISZT.
; Anyway, all of this makes the polar_q_rel irrelevant, so I am removing
; it.  The hcomp_yn_nr construction will make sure the SOA value
; of the int_rel takes the HANDEL of whether's complement.   I don't
; know what to do about whether's HANDEL, KEY, and EVENT now, so I am 
; leaving them unspecified.

; ERB (14-12-97) See notes at complementizer_word.

whether_compl_word := complementizer_word &
  [ SYNSEM [ LOCAL nomod_local &
		   [ CONT.LISZT <! #msg !>,
		     KEYS.MESSAGE 1-dlist &
				    <! int_rel & #msg &
				     [ PARAMS <! !> ] !> ],
	     NON-LOCAL.SLASH 0-dlist ] ].

whether_c_fin_le := whether_compl_word & sor_compl_word &
  [ SYNSEM.LOCAL.CAT [ HEAD [ VFORM fin,
			      TAM.MOOD ind_or_mod_subj ],
		       VAL.COMPS < synsem,
				   [ LOCAL.CAT.HEAD.TAM.MOOD ind_or_mod_subj &
                                                         strict_sort ] >,
		       MC - ] ].

; ERB (08-10-96) In the older version, I had whether_compl_word_inf 
; selecting for something that was just vp_inf_cat.  I never
; tested for this, but this probably allowed Sandy knew whether whether
; to leave, etc.  One way to get around this is for whether to
; select for something that is MESSAGE 0-dlist.  In order to do 
; this, I need to build to CPs that are no_rel, but we want this
; anyway (even though I talked Dan out of it at one point).
; DPF 09-Jan-00 - Made "whether" be MC -, not MC na, since e.g. "know"
; wants [MC -] CP complements.

whether_c_inf_le := whether_compl_word & plain_compl_word &
  [ SYNSEM ssr_two_arg_subst &
	   [ LOCAL [ CAT [ HEAD.VFORM inf,
			   VAL.COMPS < [ LOCAL [ CAT [ HEAD comp &
							  [ VFORM inf ],
						       VAL [ COMPS *olist*,
							     SPR *olist* ] ],
						 CONT.TOP #chand ] ] >,
			   MC - ],
		     CONT [ TOP #mhand,
			    LISZT <! #msg !>,
			    H-CONS <! qeq &
				    [ SC-ARG #soahand,
				      OUTSCPD #chand ] !> ],
		     KEYS.MESSAGE 1-dlist &
				<! #msg & [ HANDEL #mhand,
					    SOA #soahand ] !> ] ] ].
	    
compl_phrase_le := msg_word &
  [ SYNSEM [ LOCAL nomod_local &
		 [ CAT [ HEAD verb & 
			      [ INV -,
				VFORM fin ],
			 VAL [ SUBJ < >,
			       SPR *olist*,
			       COMPS < > ] ],
		   CONT [ TOP #hand,
			  INDEX #event,
			  LISZT <! #key, #msg !>,
			  H-CONS <! qeq &
				  [ SC-ARG #soa,
				    OUTSCPD #khand ] !> ],
		   KEYS [ KEY ellipsis_rel & #key & 
			      [ HANDEL #khand,
				EVENT #event ],
			  MESSAGE <! message & #msg &
				   [ HANDEL #hand,
				     SOA #soa ] !> ],
		   ARG-S < > ],
	     NON-LOCAL.SLASH 0-dlist ] ].

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Imperative words "don't" and "let's"

; ERB (05-10-97) In order to conflate hcomp_root and hcomp_nc into just one
; hcomp, root_marker_words have to identify their value for mc with that of
; their complement.  (Hcomp_root identified MC for mother and non-head
; daughter.)

root_marker_word := nonque & non_affix_bearing & nonrel & nonconj & hc-to-phr &
  [ SYNSEM synsem &
	 [ LOCAL [ CAT [ HEAD verb* & [ MOD < >,
					TAM.MOOD #mood,
					AUX -,
					INV - ],
			 VAL [ SPR < >,
			       COMPS < synsem &
				       [ LOCAL local_min &
					       [ CAT [ HEAD.TAM.MOOD #mood,
						       VAL.COMPS *olist* ],
						 CTXT #ctxt ],
					 NON-LOCAL [ SLASH 0-dlist,
						     QUE 0-dlist,
						     REL 0-dlist ] ] > ] ],
		   CTXT #ctxt ],
	   NON-LOCAL.SLASH 0-dlist ] ].

; DPF 31-Jul-99 - The KEY's handle has to be that of the complement's KEY,
; in order to get main label right for VITs.

lex_imperative := root_marker_word &
  [ SYNSEM.LOCAL 
	   [ CAT [ VAL 
		    [ SUBJ < >,
		      COMPS < [ LOCAL [ CAT [ HEAD verb &
						   [ VFORM bse_only ],
					      VAL.SUBJ 
						 < synsem &
						   [ LOCAL local_min &
							   [ CONT.INDEX #inst ],
						     NON-LOCAL [ SLASH 0-dlist,
								 QUE 0-dlist,
								 REL 0-dlist]] >,
					      MC na ],
					CONT.INDEX #ind,
					KEYS.KEY.HANDEL #khand ],
				OPT + ] > ],
		   MC + ],
	     AGR #inst,
	     CONT [ TOP #hand,
		    INDEX #ind,
		    LISZT.LIST < #msg, 
				 pron_rel & 
				 [ HANDEL #khand,
				   INST #inst &
					  [ PRONTYPE std_pron ] ], ... >,
		    H-CONS.LIST < qeq &
				  [ SC-ARG #soa ], ... > ],
	     KEYS [ KEY no_rel & [ HANDEL #khand ],
		    MESSAGE 1-dlist &
			  <! imp_rel & #msg &
			     [ HANDEL #hand,
			       SOA #soa ] !> ] ] ].

lets_imp_le := lex_imperative &
  [ SYNSEM.LOCAL [ CAT.VAL.COMPS < [ LOCAL.CONT.TOP #chand ] >,
		   AGR [ PNG png & [ PN 1pl* ],
			 PRONTYPE std_1pl ],
		   CONT [ H-CONS <! [ OUTSCPD #chand ] !>,
			  LISZT <! relation, relation  !> ] ] ].

dont_imp_le := lex_imperative &
  [ SYNSEM.LOCAL [ CAT.VAL.COMPS < [ LOCAL.CONT.TOP #chand ] >,
		   AGR [ PNG png & [ PN 2per ],
			 PRONTYPE std_2 ],
		   CONT [ LISZT <! relation,
				   relation,
				   neg_rel &
				 [ HANDEL #neghand,
				   ARG #arg ] !>,
			  H-CONS <! [ OUTSCPD #neghand ],
				    qeq &
				    [ SC-ARG #arg,
				      OUTSCPD #chand ] !> ] ] ].

;; 09-09-97  Added BV and SCOPE attributes temporarily for VM2, since the
;; whq external relation for how_about is like a quantifier, needing four args.
;; Had to change the relation introduced by "how about" to '_which_rel'
;; rather than '_how_about_rel' because of some property of vitADT.  Similar
;; change made to the 'frag-msg' instance in syntax.tdl.
;; 06-Oct-98 DPF - Changed MC value from na to +, to allow "okay, how about kim".

how_about_word := root_marker_word &
  [ SYNSEM.LOCAL [ CAT [ VAL.COMPS 
			 < [ LOCAL [ CAT [ HEAD subst,
					   VAL [ SPR *olist*,
						 COMPS *olist* ] ],
				     CONT.INDEX #ind ] ] >,
			 MC + ],
		   CONT [ TOP #top,
			  INDEX #ind & event_or_index,
			  LISZT <! #msg,
				   relation & #key &
					 [ HANDEL #rhand,
					   ARG #ind ] !>,
                          H-CONS <! qeq &
                                  [ SC-ARG #ctop,
                                    OUTSCPD #rhand ] !> ],
		   KEYS [ KEY #key,
                          MESSAGE 1-dlist &
				<! int_rel & #msg &
				   [ HANDEL #top,
				     SOA #ctop ] !> ] ] ].

how_about_n_or_p_le := how_about_word &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < [ LOCAL.CAT.HEAD n_or_p & strict_type,
                                   OPT - ] > ].

how_about_s_le := how_about_word &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < [ LOCAL.CAT [ HEAD verb & strict_type,
					       MC bool ],
                                   OPT - ] > ].

how_about_vp_le := how_about_word &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < [ LOCAL.CAT [ HEAD verb & strict_type &
                                                    [ VFORM bse ],
                                               VAL.SUBJ < synsem_min > ],
                                   OPT + ] > ].

; Discourse-related sentential adverbs
;   (e.g. 'then, but')
; DPF 06-Oct-98 - Added MC + to MOD, to block "Kim says but sandy left"
; DPF 15-Oct-98 - Changed HEAD from adv to root-marker, to get "yes, okay"
; DPF 22-Oct-98 - Added MC + to the SYNSEM itself to block the relative clause
;   in "a programmer but he hired".
; DPF 09-Jun-99 - Added SLASH 0-dlist to MOD, to block e.g. "when yes Kim left"
; DPF 03-Oct-99 - Added SUBJ *olist* to MOD specific. - why wasn't it here before?
; DPF 17-Apr-00 - Removed CONJ cnil to enable e.g. "yes and Kim left"

basic_disc_adv_synsem := canonical_synsem &
  [ LOCAL [ CAT [ HEAD root-marker &
		       [ PRD -,
			 MOD < [ LOCAL scopal_mod &
				       [ CAT.VAL [ SUBJ *olist*,
                                                     SPR *olist*,
                                                   COMPS *olist* ],
                                         CONT.INDEX #ind,
					 KEYS.MESSAGE #msg ],
				 NON-LOCAL.SLASH 0-dlist ] > ],
		  VAL [ SUBJ < >,
			SPR < >,
			COMPS < > ] ],
	    CONT [ INDEX event_or_index & #ind,
		   H-CONS <! !> ],
	    KEYS.MESSAGE #msg,
	    CONJ cnil ],
    NON-LOCAL [ SLASH 0-dlist,
		REL 0-dlist,
		QUE 0-dlist ] ].

disc_adv_synsem := basic_disc_adv_synsem &
  [ LOCAL.CAT [ HEAD.MOD < [ LOCAL.CAT.HEAD disc_adverbee & strict_type ] >,
                MC + ] ].

disc_adv_lex_synsem := disc_adv_synsem & lex_synsem.

disc_adv_phr_synsem := disc_adv_synsem & phr_synsem.

;; DPF 24-Oct-98 Removed [MC +] from disc_adv_word, since this runs afoul of
;; the carefully balanced constraint on head-modifier structures which requires
;; [MC na], to allow relative clauses as modifiers while preventing ordinary
;; finite clauses from being modifiers.

disc_adv_word := msg_word &
  [ SYNSEM disc_adv_lex_synsem &
	   [ LOCAL [ CAT.HEAD.MOD < [ LOCAL.CONT [ TOP #mtop,
						   INDEX #mindex ] ] >,
		     CONT [ TOP #chand & handle,
			    INDEX #cind,
			    LISZT <! #key & [ HANDEL #khand ],
				     discourse_rel &
				   [ HANDEL #chand,
				     C-ARG #cind,
				     L-HANDEL #khand,
				     R-HANDEL #mtop,
				     R-INDEX #mindex ] !> ],
		     KEYS.KEY #key & abstr_excl_rel ] ] ].

disc_adv_le :< disc_adv_word.

disc_adv_sat_le := disc_adv_word &
  [ SYNSEM.LOCAL.CAT.HEAD.MOD < [ LOCAL.CAT.VAL.SUBJ < > ] > ].

; This is like really necessary
disc_adv_like_synsem := basic_disc_adv_synsem & lex_synsem &
  [ LOCAL.CAT.HEAD.MOD < [ LOCAL.CAT [ HEAD subst,
                                       MC na ] ] > ].

disc_adv_like_le := msg_word & topkey &
  [ SYNSEM disc_adv_like_synsem &
	   [ LOCAL [ CAT.HEAD.MOD < [ LOCAL [ CONT.TOP #top ] ] >,

		     CONT [ TOP #top & handle,
			    LISZT <! #key !> ],
		     KEYS.KEY #key & abstr_excl_rel ] ] ].

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;   Temporal nouns
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Extend to COMPS of temporal nouns the hack blocking extraction of subjects of 
; inverted auxiliaries, which exploits CASE value.
; Block N-N compound of "a two meeting" by stipulating that hour_words are
; PRD +, incompatible with requirement of compound rule.  In contrast, e.g.,
; day_of_week words are unmarked for PRD.
;
; Made CONT.TOP be the handle of the numbered_hour_rel rather than that of
; the implicit def_rel, since hour_words can be modified, as in "two o'clock
; on the sixteenth".  Since the PP unifies its TOP handle with the TOP handle
; of the phrase it modifies, that handle can't be the handle of the quantifier,
; so must be that of the numbered_hour_rel.

; DPF (18-Oct-98) - Removed PRD + from hour_word, so it can combine with its
; minute or am-pm complements and still be a prenominal adjective, as in
; "a ten thirty am meeting"

;; DPF (22-Dec-98) - SYNSEM is typed phr_synsem in order to block "a two meeting"
;; while admitting "a two o'clock meeting" - this works because "two o'clock"
;; combines with "meeting" using the noun-noun compound rule, which requires
;; the left member to have SYNSEM of type lex_synsem.

abstr_hour_word := hc_word & non_affix_bearing &
  [ SYNSEM phr_synsem &
	 [ LOCAL nomod_local &
		 [ STEMHEAD nstem,
		   CAT [ HEAD noun* & [ POSS - ],
			 VAL [ SUBJ < >,
			       SPR < [ LOCAL local_min &
					     [ CAT [ HEAD adv,
						     VAL [ SPR  *olist*,
							   COMPS *olist* ] ],
					       KEYS.KEY degree_rel &
						   [ HANDEL #nhand,
						     DARG #darg ] ],
				       OPT + ] >,
			       COMPS < synsem &
				       [ LOCAL [ CAT [ HEAD intadj2,
						       VAL.COMPS < > ],
						 CONJ cnil,
						 KEYS.KEY minute_rel &
							      [ HANDEL #nhand,
								ARG #minute ] ],
					 NON-LOCAL.SLASH 0-dlist,
					 OPT + ],
				       synsem &
				       [ LOCAL [ CAT.HEAD no_head,
						 CONJ cnil,
						 KEYS.KEY am_pm_rel &
							      [ HANDEL #nhand,
								INST #ampm ] ],
					 NON-LOCAL.SLASH 0-dlist,
					 OPT + ] > ],
			 HC-LEX + ],
		   CONT nom-obj &
		       [ INDEX #index,
			 LISZT.LIST < numbered_hour_rel & #key &
				      [ HANDEL #nhand,
					INST #index,
					MIN #minute,
					AM-PM #ampm,
					DIM #darg ],
				      def_np_rel &
				      [ BV #index,
					RESTR #rhand ], ... >,
			 H-CONS <! qeq &
                                  [ SC-ARG #rhand,
                                    OUTSCPD #nhand ] !> ],
		   AGR #index,
		   ARG-S < >,
		   KEYS.KEY #key ],
	   MODIFIED notmod ] ].

hour_le := abstr_hour_word &
  [ SYNSEM.LOCAL.CONT.LISZT <! relation, relation !> ].

; sixish
approx_hour_le := abstr_hour_word &
  [ SYNSEM.LOCAL.CONT.LISZT <! relation &
			         [ HANDEL #hand,
				   INST #inst ],
			         relation, 
			         approx_grad_rel &
			         [ HANDEL #hand,
				   DARG #inst ] !> ].

abstr_minute_word := np_word_no_quant &
  [ SYNSEM [ LOCAL [ CAT.HEAD intadj2 & [ MOD < > ],
		     KEYS.KEY minute_rel &
			      [ HANDEL #hand,
				ARG #inst ],
		     CONT [ TOP #hand,
			    INDEX #inst ] ],
	     MODIFIED notmod ] ].

minute_le := abstr_minute_word &
  [ SYNSEM.LOCAL.CONT.LISZT <! relation !> ].

approx_minute_le := abstr_minute_word &
  [ SYNSEM.LOCAL.CONT [ TOP #hand,
			INDEX #inst,
			LISZT <! relation, approx_grad_rel &
			       [ HANDEL #hand,
				 DARG #inst ] !> ] ].

am_pm_le := np_word_no_quant &
  [ SYNSEM.LOCAL [ CAT.HEAD no_head & [ MOD < > ],
		   KEYS.KEY am_pm_rel,
		   CONT [ INDEX #inst,
			  LISZT <! [ INST #inst ] !> ] ] ].

mealtime_le := que_word & nonque &
  [ SYNSEM noun_synsem & nomod_synsem &
	 [ LOCAL [ CAT [ HEAD [ POSS -,
				PRD + ],
			 VAL [ SPR < [ LOCAL local_min &
					     [ CAT [ HEAD adv,
						     VAL [ SPR  *olist*,
							   COMPS *olist* ] ],
					       KEYS.KEY degree_rel &
						   [ HANDEL #nhand,
						     DARG #index ] ],
				       OPT + ] >,
			       COMPS *olist* ] ],
		   CONT nom-obj &
		       [ INDEX #index,
			 LISZT <! hour_rel & #key &
				  [ HANDEL #nhand,
				    INST #index ],
				  def_np_rel &
				  [ BV #index,
				    RESTR #rhand ] !>,
			 H-CONS <! qeq &
			   [ SC-ARG #rhand,
			     OUTSCPD #nhand ] !> ],
		   ARG-S < >,
		   KEYS.KEY #key ],
	     MODIFIED notmod ] ].

; June, June 1996, June of 1996
month_year_synsem := noun_synsem & nomod_synsem & basic_one_arg &
  [ LOCAL [ ARG-S #comps,
	    CAT.VAL [ SPR < >,
		      COMPS #comps &
			    < synsem & 
			      [ LOCAL local_min &
				      [ CAT [ VAL [ SPR *olist*,
						    COMPS *olist* ],
					      MC na ],
					CONT [ TOP #nhand,
					       INDEX #year ],
					CONJ cnil ] ] > ],
	    CONT [ INDEX.PNG png & [ PN 3sg*,
				     GEN neut* ],
		   LISZT <! #key, #altkey !>,
		   H-CONS <! qeq &
			   [ SC-ARG #rhand,
			     OUTSCPD #nhand ] !> ],
	    KEYS [ KEY #key & mofy_rel &
			     [ HANDEL #nhand,
			       INST #ind,
			       YEAR-IND #year ],
		   ALTKEY #altkey & def_np_rel &
			     [ BV #ind,
			       RESTR #rhand ] ] ],
    NON-LOCAL.SLASH 0-dlist ].

month_of_year_synsem := month_year_synsem &
  [ LOCAL [ CAT.VAL.COMPS < synsem &
			  [ LOCAL [ CAT pp_cat,
				    CONJ cnil,
				    KEYS [ KEY _of_rel,
					 --COMPKEY yofc_rel ] ],
			    NON-LOCAL.SLASH 0-dlist,
			    OPT + ] > ] ].

month_no_of_year_synsem := month_year_synsem &
  [ LOCAL.CAT.VAL.COMPS < synsem & [ LOCAL [ CAT nomp_cat_acc_min,
					     CONJ cnil,
					     KEYS.KEY yofc_rel ],
				     NON-LOCAL.SLASH 0-dlist,
				     OPT - ] > ].

month_le := nontopkey &
  [ SYNSEM month_of_year_synsem &
	   [ MODIFIED notmod ] ].

month_year_le := nontopkey &
  [ SYNSEM month_no_of_year_synsem &
	   [ MODIFIED notmod ] ].

year_le := np_word &
  [ SYNSEM.LOCAL [ CAT.HEAD.MOD < >,
		   CONJ cnil,
		   KEYS.KEY yofc_rel & #key & [ HANDEL #hand ],
		   CONT [ TOP #hand,
			  INDEX.PNG png & [ PN 3sg* ],
			  LISZT <! #key !>,
			  H-CONS <! !> ] ] ].

; 'the first', 'October first', 'the first of October'
; Need to find way to block '*October first of October'
; DPF 20-Nov-99 - Added PRD + to block membership in N-N-compounds

dom_synsem := temp_noun_ppcomp_synsem &
  [ LOCAL [ CAT [ HEAD.PRD +,
		  VAL [ SPR < [ LOCAL.KEYS [ KEY quant_or_wh_rel,
					     ALTKEY mofy_rel &
						 [ INST #inst ] ] ] >,
			COMPS < [ LOCAL.KEYS [ KEY _of_rel,
					       --COMPKEY mofy_rel ],
				  NON-LOCAL.SLASH 0-dlist,
				  OPT + ],
				[ LOCAL [ KEYS.KEY yofc_rel,
					  CONT.INDEX #ind ],
				  OPT + ] > ] ],
	    CONT [ INDEX #ind & [ DIVISIBLE -* ],
		   LISZT <! dofm_rel &
			  [ INST [ PNG png & [ PN 3sg*,
					       GEN neut* ] ],
			    ARG3 #inst ] !> ] ] ].


day_of_month_le := norm_no_affix_word &
  [ SYNSEM dom_synsem ].

; 'Tuesday (the first (of October))', 'Tuesday (October first)'
; 'Tuesday of that week'
; DPF 31-Jul-99 - Made SYNSEM be nonpro_nomod_onearg_synsem instead of 
; nomod_basic_onearg_synsem since they can appear in noun-noun compounds,
; and also in appositive constructions.

day_of_week_le := nontopkey &
  [ SYNSEM nonpro_nomod_onearg_synsem &
	   [ LOCAL [ ARG-S #comps,
                     CAT [ HEAD noun*,
			   VAL [ SPR < anti_synsem >,
				 COMPS #comps &
                                     < [ LOCAL local_min &
					 [ CAT [ VAL [ SUBJ < >,
						       COMPS *olist*,
						       SPR *olist* ],
						 MC na ],
					   KEYS [ KEY _of_rel & [ ARG #ind ],
						  --COMPKEY 
						   non_day_diadic_modable_rel &
						      [ HANDEL #nhand ] ] ],
					 NON-LOCAL.SLASH 0-dlist,
					 OPT + ] > ] ],
		     AGR #ind,
		     CONT [ INDEX #ind,
			    LISZT <! #key, #altkey !>,
			    H-CONS <! qeq & 
				    [ SC-ARG #rhand,
				      OUTSCPD #nhand ] !> ],
		     KEYS [ KEY dofw_rel & #key &
				      [ HANDEL #nhand,
					INST #ind &
					       [ PNG png & [ PN 3sg*,
							     GEN neut* ] ] ],
			    ALTKEY #altkey &
				      udef_rel &
				      [ BV #ind,
					RESTR #rhand ] ] ] ] ].


; 'morning' of 'each morning', 'Tuesday morning'
day_part_le := que_word &
  [ SYNSEM noun_two_arg_nomod_synsem &
	   [ LOCAL [ ARG-S < #spr . #comps >,
                     CAT [ HEAD noun*,
			   VAL 
			    [ SPR < synsem & #spr &
				  [ LOCAL local_min &
					  [ CAT [ HEAD det,
						  VAL [ SUBJ < >,
							COMPS *olist* ] ],
					    KEYS [ KEY quant_or_wh_rel &
							     [ BV #ind ],
						   ALTKEY dofw_rel &
						       [ INST #dinst ] ] ],
				    OPT - ] >,
			      COMPS #comps &
                                 < [ LOCAL [ CAT.VAL.COMPS < >,
					     CONT.INDEX #dinst,
					     KEYS [ KEY _of_rel &
							      [ HANDEL #nhand,
								ARG #ind ],
						    --COMPKEY dofm_rel ] ],
				     NON-LOCAL.SLASH 0-dlist ] > ] ],
		     AGR #ind,
                     CONT [ INDEX #ind,
			    LISZT <! #key !>,
			    --TOPKEY #key ],
		     KEYS.KEY #key & day_part_rel &
			   [ HANDEL #nhand,
			     INST #ind ] ],
	     MODIFIED notmod ] ].

holiday_le := np_sing_word &
  [ SYNSEM.LOCAL [ KEYS.KEY holiday_rel,
		   CONT.INDEX.PNG png & [ PN 3sg* ] ] ].

; 'Advent', 'summer'
season_le := np_sing_word &
  [ SYNSEM.LOCAL [ KEYS.KEY season_gen_rel,
		   CONT.INDEX.PNG png & [ PN 3sg* ] ] ].

; "the morning" etc.

def_day_part_le := norm_no_affix_word &
  [ SYNSEM nomod_onearg_synsem &
	   [ LOCAL [ ARG-S < #spr >,
		     CAT [ HEAD noun*,
			   VAL 
			    [ SPR < synsem & #spr &
				  [ LOCAL local_min &
					  [ CAT [ HEAD det,
						  VAL [ SUBJ < >,
							COMPS *olist* ] ],
					    CONT.LISZT <! relation !>,
					    KEYS.KEY def_rel &
						[ BV #inst ] ],
				    OPT - ] >,
			      COMPS < > ],
			   POSTHEAD + ],
		     AGR #inst,
                     CONT [ INDEX #inst,
			    LISZT <! #key !> ],
		     KEYS.KEY def_day_part_rel & #key &
			   [ INST #inst ] ],
	     MODIFIED notmod ] ].


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Degree specifiers for adjectives
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; 'very, really, much, a lot, almost'
; Treated as measure phrases, selected as specifiers by adjectives.

basic_degree_spec_word := que_word &
  [ SYNSEM nomod_synsem &
	  [ LOCAL [ CAT [ HEAD adv,
			  VAL [ COMPS < >,
				SPR < [ LOCAL local_min &
					      [ CAT [ HEAD adv,
						      VAL [ SPR *olist*,
							    COMPS *olist* ] ],
						KEYS.KEY degree_rel &
						    [ HANDEL #khand,
						      DARG #darg ] ],
					NON-LOCAL.QUE 0-dlist,
					OPT + ] >,
				SPEC < [ LOCAL [ KEYS.KEY.HANDEL #khand,
						 CONT [ TOP #top,
							INDEX #specind ] ] ] > ] ],
		    CONT [ TOP #top,
			   INDEX #specind,
			   LISZT.LIST < degree_rel & #key &
					 [ HANDEL #khand,
					   DIM #darg ], ... > ],
		    KEYS.KEY #key ] ] ].

degree_spec_word := basic_degree_spec_word & nonque &
  [ SYNSEM nomod_synsem &
	   [ LOCAL.CONT [ LISZT <! degree_rel &
				   [ DARG deg-ind ] !>,
			  H-CONS <! !> ] ] ].

degree_spec_le :< degree_spec_word.

; "how tall"
wh_degree_spec_le := basic_degree_spec_word &
  [ SYNSEM [ LOCAL.CONT [ LISZT <! abstr_deg_rel &
				 [ HANDEL #hand,
				   DARG #darg ],
			         which_rel &
			         [ BV #darg,
				   RESTR #rhand ] !>,
			  H-CONS <! qeq & [ SC-ARG #rhand,
					    OUTSCPD #hand ] !> ],
	     NON-LOCAL.QUE 1-dlist & [ LIST < handle > ] ] ].

degree_spec_noprep_le := degree_spec_word &
  [ SYNSEM.LOCAL.CAT.VAL.SPEC < [ LOCAL.CAT.HEAD adverbee & strict_type ] > ]. 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Numbers

; For numerals
num_synsem := zero_arg &
  [ LOCAL [ CAT.HEAD.ORDINAL #ord,
	    CONT [ LISZT.LIST < integer_rel &
                                [ ORD #ord ], ... >,
		   H-CONS <! !> ] ] ].

int_adj_synsem := canonical_synsem &
  [ LOCAL [ CAT [ HEAD intadj &
		       [ PRD -,
			 MOD < [ LOCAL intersective_mod &
                                       [ CAT nbar_cat,
					 CONT.INDEX #index,
                                         KEYS.KEY nonpro_rel,
					 CONJ cnil,
					 AGR #index ] ] > ],
                  VAL.SUBJ < >,
		  POSTHEAD - ],
	    CONT.INDEX #index & ref-ind,
	    KEYS.KEY integer_rel &
		[ ARG #index ] ] ].

norm_num_synsem := num_synsem & int_adj_synsem &
  [ LOCAL.CAT.HC-LEX + ].

norm_num_word := nontopkey &
  [ SYNSEM norm_num_synsem ].

;; some norm_card-words must remain unspecified for ORDINAL
norm_card_word :< norm_num_word.

;; those cardinals that take no complements may be safely specified as 
;; -ORDINAL, and as plural (since they're normal)

card_only_word := norm_card_word &
  [ SYNSEM [LOCAL [ CAT.HEAD.ORDINAL -,
		    CONT [ INDEX.PNG png & [ PN 3pl ],
			   LISZT.LIST.FIRST #key ],
		    KEYS.KEY #key & const_rel ] ] ].


; should be POSTHEAD -
; These are adjectives only

ord_word := norm_num_word & 
  [ SYNSEM.LOCAL.CAT [HEAD.ORDINAL +,
		      VAL.COMPS < > ] ].


;;  Specifiers and modifiers will agree with heads on the value
;; of the head feature ORDINAL -- this allows propagation
;; of such a feature from complements, where (on the current account)
;; the ORDINAL feature gets a value from the lexicon.

;; distribution of ORDINAL:
;;   ordinal lex_entries are ORDINAL +
;;   complement_free lex_entries are ORDINAL -
;;   all lex_entries for "one" are ORDINAL - 
;;   other lex_entries are unspecified for ORDINAL
;; Since (the HEAD feature of) the determiner "one" is outside this 
;; hierarchy, it can't appear as a specifier or complement.


;; The sorts below refer only to lexical entries, so there's presumably no
;; harm in making conventions about the order of the RELs on their LISZTs
;; No particular order is assumed for any phrase containing these entries.

;; It will be hard to do optional complements here and get the LISZTs to
;; come out right.  Another problem with optional complementation is that
;; entries with complements must be -ORD, while their complement-taking
;; counterparts must be underspecified for ORD 
;;   (cf. "twenty" vs. "twenty one" vs. "twenty first")


complement_free_number := norm_num_word &
			  [ SYNSEM.LOCAL.CAT.VAL.COMPS < > ].

complemented_number := norm_num_word &
  [ SYNSEM 
    [ LOCAL [ CAT [ HEAD.ORDINAL #ord,
		    VAL.COMPS < [ OPT -,
				  LOCAL [ CAT [ HEAD intadj & 
						    [ ORDINAL #ord ],
						VAL [ SPR *olist*,
						      COMPS < > ] ],
					  CONT.INDEX.PNG #num,
					  KEYS.KEY [ ARG #arg ] ],
				  NON-LOCAL.SLASH 0-dlist ] > ],
	      CONT [ INDEX.PNG #num,
		     LISZT.LIST < relation, plus_rel & #pkey, ... >,
		     --TOPKEY #pkey ],
	      KEYS.KEY [ ARG #arg ] ] ] ].
		   

; Non-identity stipulated for handle of SPR and handle of CONT in order to
; prevent the regular head-spec rule (non-head-compositional) from applying.
; Need head-compositional since the handle of the phrase "two hundred" must
; be the handle of the times_rel from the head "hundred" (which contains as
; arguments the other two handles).

specified_number := norm_num_word &
  [ SYNSEM.LOCAL.CAT.VAL.SPR < synsem &
			       [ OPT -,
				 LOCAL [ CAT [HEAD intadj & 
						   [ ORDINAL - ],
					      VAL [ COMPS < >,
						    SPR *olist* ] ] ] ] >].
				 
unspecified_num := norm_num_word &
  [ SYNSEM.LOCAL [ CAT.VAL.SPR < [ LOCAL local_min &
					   [ CAT [ HEAD adv,
						   VAL [ SPR  *olist*,
							 COMPS *olist* ] ],
					     KEYS.KEY degree_rel &
						 [ HANDEL #khand,
						   DARG #darg ] ],
				   OPT + ] >,
		   KEYS.KEY [ HANDEL #khand,
			      DIM #darg ] ] ].

unspecified_num_without_complements := complement_free_number & unspecified_num & topkey &
  [ SYNSEM.LOCAL [ CONT.LISZT <! const_rel & #key !>,
                   KEYS.KEY #key ] ].

approx_unspecified_num_without_complements := complement_free_number & unspecified_num & topkey &
  [ SYNSEM.LOCAL [ CONT [ TOP #hand,
			  INDEX #inst,
			  LISZT <! const_rel & #key,
				   approx_grad_rel &
				           [ HANDEL #hand,
					     DARG #inst ]  !> ],
                   KEYS.KEY #key ] ].

unspecified_num_with_complements := complemented_number & unspecified_num &
  [ SYNSEM.LOCAL 
     [ CAT.VAL.COMPS < [ LOCAL [ KEYS.KEY const_rel,
				 CONT.TOP #chandle ] ] >,
       CONT.LISZT <! const_rel & #key &
		   [ HANDEL #khandle,
		     ARG #arg ],
		   [ ARG #arg,
		     TERM1  #khandle,
		     TERM2  #chandle] !>,
       KEYS.KEY #key ] ].

specified_num_without_complements := complement_free_number & specified_number &
  [ SYNSEM.LOCAL 
	[ CAT.VAL.SPR < [ LOCAL [ CONT [ TOP #shandle,
                                         INDEX #arg ] ] ] >,
	  CONT [ LISZT <! const_rel & [ HANDEL #khandle,
                                        ARG #arg ],
                        times_rel & #tkey & 
                        [ FACTOR1  #shandle,
                          FACTOR2  #khandle,
                          ARG #arg ] !>,
                 --TOPKEY #tkey ] ] ].

specified_num_with_complements := complemented_number & specified_number & 
  [ SYNSEM.LOCAL 
    [ CAT 
       [ VAL [ SPR < [ LOCAL [ CONT [ TOP #shandle,
				      INDEX #arg ] ] ] >,
	       COMPS < [ LOCAL.CONT.TOP #chandle ] > ] ],
      CONT [ LISZT <! #key &
                    [ HANDEL #khandle,
                      ARG #arg ],
		    [ TERM1  #thandle,
		      TERM2  #chandle,
                      ARG #arg ],
		    times_rel & [ HANDEL #thandle,
				  FACTOR1 #shandle,
				  FACTOR2 #khandle,
                                  ARG #arg ] !> ],
      KEYS.KEY #key ] ].

bare_unspecified_card_le := card_only_word & 
			    unspecified_num_without_complements.
bare_specified_card_le := card_only_word & 
			  specified_num_without_complements.
complemented_unspecified_card_le := norm_card_word & 
				    unspecified_num_with_complements.
complemented_specified_card_le := norm_card_word & 
				  specified_num_with_complements.
bare_unspecified_ord_le := ord_word & unspecified_num_without_complements.
bare_specified_ord_le := ord_word & specified_num_without_complements.

approx_bare_unspecified_card_le := card_only_word & 
			           approx_unspecified_num_without_complements.

;; the constraints appropriate for all lexical entries for "one"

one_word := topkey & non_affix_bearing &
  [ SYNSEM.LOCAL [ CAT [ HEAD intadj & 
			      [ ORDINAL -,
				PRD - ],
			 VAL [ SPR < >,
			       COMPS < >,
                               SPEC < [ OPT - ] > ]  ],
		   CONT.LISZT <! const_rel & #key &
                                 [ CONST_VALUE "1" ] !>,
                   KEYS.KEY #key ] ].

one_sing_le := one_word & 
  [ SYNSEM norm_num_synsem &
     [ LOCAL [ CAT.HEAD intadjn,
	       CONT.INDEX.PNG.PN 3sg* ] ] ].

one_plur_le := one_word & 
  [ SYNSEM num_synsem &
     [ LOCAL [ CAT.HEAD intadj1 &
			[ MOD < > ],
	       CONT.INDEX #index & [ PNG.PN 3pl* ],
	       KEYS.KEY integer_rel & [ ARG #index ] ] ] ].
		      

; Temporary types to cope with unknown words - used in PET
basic_unknown_word := mcna & nonconj & nonmsg & hc-to-phr &
  [ INFLECTED +,
    SYNSEM.LOCAL.KEYS.KEY.LABEl *cons* ].

unknown_word := basic_unknown_word & topkey.

mv_unerg_nale := unknown_word &
  [ SYNSEM unerg_verb &
	      [ LOCAL [ CONT.LISZT <! #key !>,
                        KEYS.KEY #key & generic_verb_rel ] ] ].

mv_np_trans_nale := unknown_word &
  [ SYNSEM np_trans_verb &
	   [ LOCAL [ CAT.VAL.COMPS < [ OPT - ] >,
		     CONT.LISZT <! #key !>,
                     KEYS.KEY #key & generic_verb_rel ] ] ].

intr_noun_word_nale := unknown_word &
  [ SYNSEM noun_nocomp_synsem & 
	   [ LOCAL [ CAT.VAL.SPR < [ LOCAL.KEYS.KEY quant_or_wh_rel ] >,
                     CONT.LISZT <! #key !>,
		     KEYS.KEY #key & generic_noun_rel ],
	     MODIFIED notmod ] ].

proper_nale := basic_unknown_word & nonslash & nonrel & nonque &
  [ SYNSEM proper_n_synsem &
           [ LOCAL.KEYS.KEY.NAMED 'noname ] ].

intrans_adj_nale := unknown_word &
  [ SYNSEM intrans_adj_synsem &
           [ LOCAL [ CAT.VAL.SUBJ < [ LOCAL.CONT.INDEX #ind ] >,
                     CONT.LISZT <! #key !>,
                     KEYS.KEY #key & generic_adj_rel & [ ARG #ind ] ] ] ].


adv_word_nale := unknown_word & nonque & nonslash & nonrel &
   [ SYNSEM intersect_adverb_synsem & 
            [ LOCAL [ CAT.HEAD.MOD < [ LOCAL.CAT.HEAD v_or_g_or_a & 
                                                    strict_type ] >,
                      KEYS.KEY generic_adv_rel ] ] ].
