;;; -*- Mode: TDL; Package: DISCO -*-
;;;
;;;  lextypes.tdl
;;;
;;;  Lexical types (i.e., word classes)
;;;
;;;  Rob Malouf, 3-Nov-1994
;;;  Last revised: Dan Flickinger, 24-Feb-97
;;;
;;;  $Id$

;:message "Lexical types".

:begin :type.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Affixation
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

affix_bearing := word &
  [ SYNSEM.LOCAL [ STEMHEAD #stemhead,
                   AGR #agr,
                   CAT #cat,
		   CONT [ TOP #hand,
			  INDEX #index,
			  KEY #key ],
		   CTXT #ctxt ],
    ARGS < [ AFFIX local & [ STEMHEAD #stemhead,
                             AGR #agr,
                             CAT #cat,
			     CONT [ TOP #hand,
				    INDEX #index,
				    KEY #key ],
			     CTXT #ctxt ] ] > ].

non_affix_bearing := word &
  [ ARGS < [ AFFIX no-affix ] , ... > ].

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; LEXICAL DEFAULTS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

nonslash := word &
  [ SYNSEM.NON-LOCAL.SLASH 0-dlist ].

; Lexical types that may have subtypes or instances with nonempty QUE values.
; Quantifiers introduce a nonempty value for their H-STORE attribute, but
; all nonque words assign the empty list for H-STORE.

nonque := word &
  [ SYNSEM.NON-LOCAL.QUE 0-dlist ].  

nonrel := word &
  [ SYNSEM.NON-LOCAL.REL 0-dlist ].  

nonconj := word &
  [ SYNSEM.LOCAL.CONJ cnil ].

mcna := word &
  [ SYNSEM.LOCAL.CAT.MC na ].

nonmsg := word &
  [ SYNSEM.LOCAL.CONT.MESSAGE <! !> ].

; Exceptions to this default include neg-contracted auxiliaries.
topkey := word &
  [ SYNSEM.LOCAL.CONT [ KEY #key,
			--TOPKEY #key ] ].

; nontopkey_word's have all the defaults except topkey and non_affix_bearing.
nontopkey := nonque & nonconj & nonslash & nonrel & nonmsg &
	     mcna.

; norm_word's have all the defaults except non_affix_bearing
norm_word := nonque & nonconj & nonslash & nonrel & nonmsg &
	     mcna & topkey.
	     
norm_no_affix_word := norm_word & non_affix_bearing.

; ERB (13-11-96) Default type for potential modifiers:
; Two types because they're not all non_affix_bearing.
; The reason for this is tags...  see notes there.

norm_mod_word := nonque & nonconj & nonslash & nonrel &
		 mcna & topkey &
   [ SYNSEM.LOCAL [ CAT.HEAD.MOD.CONT.MESSAGE #msg,
		    CONT.MESSAGE #msg ] ].

norm_mod_no_affix_word := norm_mod_word & non_affix_bearing.

; ERB (04-10-96) I have added nonmsg to the following types, as
; appropriate.

; que_word's have all the defaults EXCEPT nonque
que_word := nonconj & non_affix_bearing &
	    mcna &
	    nonslash &
	    nonrel &
	    nonmsg.

; rel_word's have all the defaults EXCEPT nonrel.
rel_word := nonque & non_affix_bearing &
	    mcna &
            nonslash &
	    nonconj &
	    nonmsg &
	    topkey.

; conj_word's have all the defaults EXCEPT nonconj, nonmsg, nonque, nonslash,
; and nonrel.
conj_word :< non_affix_bearing.

; ERB (04-10-96) msg_word's have all the defaults EXCEPT nonmsg, nonslash,
; and mcna. 
msg_word := nonque & non_affix_bearing &
	    nonrel &
	    nonconj.

; hcons_amalg_word's have all the defaults EXCEPT non_affix_bearing,
; nonslash, nonrel, and nonque.
hcons_amalg_word := mcna &
	    nonconj &
	    nonmsg &
	    topkey.

amalg_word := mcna & 
	    nonconj &
	    nonmsg &
            non_affix_bearing &
	    topkey.

;;;;;
;; Non-local amalgmation types
;;

zero_arg := lex_synsem &
  [ LOCAL [ ARG-S < >,
	    CONT [ TOP #hand,
		   --TOPKEY.HANDEL #hand,
		   H-STORE <! !>,
		   H-CONS <! !> ] ],  
    NON-LOCAL [ SLASH 0-dlist,
		REL 0-dlist,
		QUE 0-dlist ] ].

nonzero_arg_synsem := lex_synsem &
  [ LOCAL [ CONT [ TOP #ltop,
		   --TOPKEY.HANDEL #keyhand,
		   H-STORE [ LIST #hslist,
			     LAST #hslast ],
		   H-CONS <! is-one-of &
			     [ SC-ARG #ltop,
			       CANDS *diff-list* &
				      [ LIST < #keyhand . #hslist >,
					LAST #hslast ] ],
			     leq &
			     [ SC-ARG #ltop,
			       OUTSCPD #keyhand ] !> ] ] ].

basic_one_arg := lex_synsem &
  [ LOCAL [ ARG-S < [ NON-LOCAL [ SLASH #slash,
				  REL #rel,
				  QUE #que ],
		      LOCAL.CONT [ INDEX individual,
				   H-STORE #hstore ] ] >,
	    CONT.H-STORE #hstore ],
    NON-LOCAL [ SLASH #slash,
		REL #rel,
		QUE #que ] ].

one_arg := basic_one_arg & nonzero_arg_synsem.

basic_two_arg := lex_synsem &
  [ LOCAL.ARG-S < [ NON-LOCAL [ SLASH [ LIST #smiddle,
					LAST #slast ],
				REL [ LIST #rmiddle,
				      LAST #rlast ],
				QUE [ LIST #qmiddle,
				      LAST #qlast ] ],
		    LOCAL.CONT.INDEX individual ],
		  [ NON-LOCAL [ SLASH [ LIST #sfirst,
					LAST #smiddle ],
				REL [ LIST #rfirst,
				      LAST #rmiddle ],
				QUE [ LIST #qfirst,
				      LAST #qmiddle ] ],
		    LOCAL.CONT.INDEX individual ] >,
    NON-LOCAL [ SLASH [ LIST #sfirst,
			LAST #slast ],
		REL [ LIST #rfirst,
		      LAST #rlast ],
		QUE [ LIST #qfirst,
		      LAST #qlast ] ] ].

two_arg := basic_two_arg & nonzero_arg_synsem &
  [ LOCAL [ ARG-S < [ LOCAL.CONT.H-STORE [ LIST #hsmiddle,
					   LAST #hslast ] ],
		    [ LOCAL.CONT.H-STORE [ LIST #hsfirst,
					   LAST #hsmiddle ] ] >,
	    CONT.H-STORE [ LIST #hsfirst,
			   LAST #hslast ] ] ].

two_arg_raising := basic_two_arg & nonzero_arg_synsem &
  [ LOCAL [ ARG-S < synsem, [ LOCAL.CONT.H-STORE #hstore ] >,
	    CONT.H-STORE #hstore ] ].

basic_three_arg := lex_synsem &
  [ LOCAL [ ARG-S < [ NON-LOCAL [ SLASH [ LIST #smiddle2,
					  LAST #slast ],
				  REL [ LIST #rmiddle2,
					LAST #rlast ],
				  QUE [ LIST #qmiddle2,
					LAST #qlast ] ],
		      LOCAL.CONT [ INDEX individual,
				   H-STORE [ LIST #hsmiddle2,
					     LAST #hslast ] ] ],
		    [ NON-LOCAL [ SLASH [ LIST #sfirst,
					  LAST #smiddle1 ],
				  REL [ LIST #rfirst,
					LAST #rmiddle1 ],
				  QUE [ LIST #qfirst,
					LAST #qmiddle1 ] ],
		      LOCAL.CONT [ INDEX individual,
				   H-STORE [ LIST #hsfirst,
					     LAST #hsmiddle1 ] ] ],
		    [ NON-LOCAL [ SLASH [ LIST #smiddle1,
					  LAST #smiddle2 ],
				  REL [ LIST #rmiddle1,
					LAST #rmiddle2 ],
				  QUE [ LIST #qmiddle1,
					LAST #qmiddle2 ] ],
		      LOCAL.CONT [ INDEX individual,
				   H-STORE [ LIST #hsmiddle1,
					     LAST #hsmiddle2 ] ] ] >,
	    CONT.H-STORE [ LIST #hsfirst,
			   LAST #hslast ] ],
    NON-LOCAL [ SLASH [ LIST #sfirst,
			LAST #slast ],
		REL [ LIST #rfirst,
		      LAST #rlast ],
		QUE [ LIST #qfirst,
		      LAST #qlast ] ] ].

three_arg := basic_three_arg & nonzero_arg_synsem.

basic_four_arg := lex_synsem &
  [ LOCAL [ ARG-S < [ NON-LOCAL [ SLASH [ LIST #smiddle3,
					  LAST #slast ],
				  REL [ LIST #rmiddle3,
					LAST #rlast ],
				  QUE [ LIST #qmiddle3,
					LAST #qlast ] ],
		      LOCAL.CONT [ INDEX individual,
				   H-STORE [ LIST #hsmiddle3,
					     LAST #hslast ] ] ],
		    [ NON-LOCAL [ SLASH [ LIST #sfirst,
					  LAST #smiddle1 ],
				  REL [ LIST #rfirst,
					LAST #rmiddle1 ],
				  QUE [ LIST #qfirst,
					LAST #qmiddle1 ] ],
		      LOCAL.CONT [ INDEX individual,
				   H-STORE [ LIST #hsfirst,
					     LAST #hsmiddle1 ] ] ],
		    [ NON-LOCAL [ SLASH [ LIST #smiddle1,
					  LAST #smiddle2 ],
				  REL [ LIST #rmiddle1,
					LAST #rmiddle2 ],
				  QUE [ LIST #qmiddle1,
					LAST #qmiddle2 ] ],
		      LOCAL.CONT [ INDEX individual,
				   H-STORE [ LIST #hsmiddle1,
					     LAST #hsmiddle2 ] ] ],
		    [ NON-LOCAL [ SLASH [ LIST #smiddle2,
					  LAST #smiddle3 ],
				  REL [ LIST #rmiddle2,
					LAST #rmiddle3 ],
				  QUE [ LIST #qmiddle2,
					LAST #qmiddle3 ] ],
		      LOCAL.CONT [ INDEX individual,
				   H-STORE [ LIST #hsmiddle2,
					     LAST #hsmiddle3 ] ] ] >,
	    CONT.H-STORE [ LIST #hsfirst,
			   LAST #hslast ] ],
    NON-LOCAL [ SLASH [ LIST #sfirst,
			LAST #slast ],
		REL [ LIST #rfirst,
		      LAST #rlast ],
		QUE [ LIST #qfirst,
		      LAST #qlast ] ] ].

four_arg := basic_four_arg & nonzero_arg_synsem.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; SUBCATEGORIZATIONS -- synsems for verbs, adjectives, prepositions, nouns
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
;; Type for synsems of words that take handle-args as complement or modifiee.
;; Use junk slot --H-CONS since adverbs put these constraints in their
;; ECONT.H-CONS rather than directly in CONT.H-CONS, since they can be
;; used as particles (as in "get together") where no scope is involved.

basic_scopedarg_synsem := lex_synsem &
  [ LOCAL [ CAT.--SCOPEDARG [ LOCAL local & 
				    [ CONT [ TOP #arghand,
					     H-STORE [ LIST #hslist,
						       LAST #hslast ] ] ],
			      --ARG #arg,
			      --OUTSC #hand ],
	    CONT.--H-CONS.LIST < is-one-of &
				 [ SC-ARG #arg,
				   CANDS *diff-list* &
					  [ LIST < #arghand . #hslist >,
					    LAST #hslast ] ],
				 outscopes & 
				 [ SC-ARG #hand,
				   OUTSCPD #arghand ], ... > ] ].

scopedarg_synsem := basic_scopedarg_synsem &
  [ LOCAL [ CAT.--SCOPEDARG.--OUTSC #hand,
	    CONT [ TOP #hand,
		   --H-CONS #hcons,
		   H-CONS #hcons & <! scp_pr, scp_pr !>,
		   ECONT.H-CONS <! !> ] ] ].

scopedarg_neg_aux_synsem := basic_scopedarg_synsem &
  [ LOCAL [ CAT [ --SCOPEDARG [ LOCAL.CONT.H-STORE.LIST #hslist,
				--OUTSC #hand ],
		  --SCOPEDARG2 [ LOCAL local &
				       [ CONT.H-STORE [ LIST #hslist,
							LAST #hslast ] ],
				 --ARG #arg,
				 --OUTSC #hand ] ],
	    CONT [ TOP #hand,
		   KEY.HANDEL #arghand,
		   --H-CONS #hcons,
		   H-CONS #hcons &
			  <! scp_pr, scp_pr,
			     is-one-of &
			     [ SC-ARG #arg,
			       CANDS *diff-list* &
				      [ LIST < #arghand . #hslist >,
					LAST #hslast ] ],
			     outscopes & 
			     [ SC-ARG #hand,
			       OUTSCPD #arghand ] !>,
		   ECONT.H-CONS <! !> ] ] ].
|#

nomod_local := local &
  [ CAT.HEAD.MOD no-mod ].

nomod_synsem := lex_synsem &
  [ LOCAL nomod_local &
	  [ CAT.VAL.SUBJ < > ] ].

intersective_mod :< local.
scopal_mod :< local.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Linking Types
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Linking types specify the relationship between valence positions and 
;; semantic roles.

linking_type :< lex_synsem.

atrans_lt := linking_type &
  [ LOCAL [ CAT.VAL.SUBJ < [ LOCAL local &
				       [ CONT.INDEX it-ind ] ] >,
	    CONT.KEY no_role_rel ] ].

act_subj_lt := linking_type &
  [ LOCAL [ CAT.VAL.SUBJ < [ LOCAL local &
				   [ CONT.INDEX #subjind & non_expl-ind,
				     THROLE arg1 ] ] >,
	    CONT.KEY act_rel & [ ACT #subjind ] ] ].

unacc_lt := linking_type &
  [ LOCAL [ CAT.VAL.SUBJ < [ LOCAL local & [ CONT.INDEX #subjind,
					         THROLE arg1 ] ] >,
	    CONT.KEY und_only_rel & [ UND #subjind ] ] ].

act_und_lt := act_subj_lt & 
  [ LOCAL [ CAT.VAL.COMPS < [ LOCAL local &
					[ CONT.INDEX #objind & non_expl-ind,
                                          THROLE arg3 ] ], ... >,
	    CONT.KEY act_und_rel & [ UND #objind ] ] ].

trans_lt :< act_und_lt.

act_und_h_lt := act_subj_lt & 
  [ LOCAL [ CAT.VAL.COMPS < [ LOCAL local &
				     [ CONT [ KEY verb_aspect_rel,
					      MESSAGE <! [ HANDEL #mhand ] !> ],
				       THROLE arg3 ] ], ... >,
	    CONT.KEY act_und_rel & [ UND #mhand ] ] ].

; "suppose" which makes its KEY same as its complement's KEY
; - wouldn't need this if had defaults

alt_act_und_h_lt := linking_type &
  [ LOCAL [ CAT.VAL [ SUBJ < [ LOCAL local &
				     [ CONT.INDEX #subjind & non_expl-ind,
				       THROLE arg1 ] ] >,
		      COMPS < [ LOCAL local &
				      [ CONT [ KEY verb_aspect_rel,
					       MESSAGE <! [ HANDEL #mhand ] !> ],
					THROLE arg3 ] ], ... > ],
	    CONT.ALTKEY act_und_rel & [ ACT #subjind,
					UND #mhand ] ] ].

; Maybe only for main verb "have" (AAC internal comment moved)
poss_lt := linking_type &         
  [ LOCAL [ CAT.VAL [ SUBJ < [ LOCAL local &
				     [ CONT.INDEX #subjind,
                                       THROLE arg1 ] ] >,
		      COMPS < [ LOCAL local &
				      [ CONT.INDEX #objind & non_expl-ind,
					THROLE arg3 ] ], ... > ],
	    CONT.LISZT <! act_und_rel & 
			[ ACT #subjind,
			  UND #objind ] !> ] ].

expl_obj_lt := act_subj_lt &
  [ LOCAL [ CAT.VAL.COMPS < [ LOCAL local &
					[ CONT.INDEX it-ind ] ], ... >,
	    CONT.KEY act_rel ] ].

expl_obj_cp_lt := expl_obj_lt &
  [ LOCAL [ CAT.VAL.COMPS < synsem, 
			    [ LOCAL local &
				      [ CONT.MESSAGE <! [ HANDEL #mhand ] !> ] ],
			    ... >,
	    CONT.KEY act_und_rel & [ UND #mhand ] ] ].

particle_cp_lt := act_subj_lt &
  [ LOCAL [ CAT.VAL.COMPS < *top*, [ LOCAL local &
				      [ CONT [ KEY verb_aspect_rel,
					       MESSAGE <! [ HANDEL #mhand ] !> ],
					THROLE arg3 ] ], ... >,
	    CONT.KEY act_und_rel & [ UND #mhand ] ] ].  

ditrans_lt := act_und_lt &
  [ LOCAL [ CAT.VAL.COMPS < *top*, [ LOCAL local &
					 [ CONT.INDEX #obj2ind & non_expl-ind,
					   THROLE arg2 ] ], ... >,
	    CONT.KEY act_und_thm_rel & [ THM #obj2ind ] ] ].

tritrans_lt := ditrans_lt &
  [ LOCAL [ CAT.VAL.COMPS < *top*, *top*, [ LOCAL local &
						  [ CONT.INDEX #obj3ind ] ],
				... >,
	    CONT.KEY act_und_thm_prop_rel & [ PROP #obj3ind ] ] ].

prep_intrans_lt := act_subj_lt &
  [ LOCAL [ CAT.VAL.COMPS 
			< [ LOCAL local &
				  [ CONT.KEY prep_rel & [ ARG #index ] ] ],
			  ... >,
	    CONT [ INDEX #index,
		   KEY #key,
		   LISZT <! #key !> ] ] ].

empty_prep_intrans_lt := act_subj_lt &
  [ LOCAL [ CAT.VAL.COMPS < [ LOCAL local &
					[ CAT.HEAD.MOD no-mod,
					  CONT.KEY prep_rel & 
						   [ PREP #objind ],
					  THROLE arg2 ] ], ... >,
	    CONT.KEY act_prep_rel & [ PREPARG #objind ] ] ].

; Argument coercion as in "Kim suggests on Friday"
prep_intrans_event_lt := act_subj_lt &
  [ LOCAL [ CAT.VAL.COMPS 
			 < [ LOCAL local &
				   [ CONT.KEY prep_rel & [ ARG #event ],
				     THROLE arg2 ] ], ... >,
	    CONT [ KEY #key & act_und_rel & [ UND #event ],
		   LISZT <! #key !> ] ] ].

prep_trans_lt := act_und_lt &
  [ LOCAL [ CAT.VAL.COMPS < *top*, 
			    [ LOCAL local &
				    [ CONT.KEY prep_rel & [ ARG #event ] ] ],
			    ... >,
	    CONT [ KEY #key,
		   INDEX #event,
		   LISZT <! #key !> ] ] ].

empty_prep_trans_lt := act_und_lt &
  [ LOCAL [ CAT.VAL.COMPS < *top*, [ LOCAL local &
				     [ CAT.HEAD.MOD no-mod,
				       CONT.KEY prep_rel &
						[ PREP #objind ],
				       THROLE arg2 ] ], ... >, 
	    CONT.KEY act_und_prep_rel & [ PREPARG #objind ] ] ].

empty_prep_particle_intrans_lt := act_subj_lt &
  [ LOCAL [ CAT.VAL.COMPS < *top*, [ LOCAL local &
					 [ CAT.HEAD.MOD no-mod,
					   CONT.KEY prep_rel & 
                                                 [ ARG #event ] ] ], ... >,
	    CONT.KEY act_rel & [ EVENT #event ] ] ].

empty_prep_particle_trans_lt := act_und_lt &
  [ LOCAL [ CAT.VAL.COMPS < synsem, synsem, [ LOCAL local &
					      [ CAT.HEAD.MOD no-mod,
						CONT.KEY prep_rel &
							 [ PREP #objind ],
						THROLE arg2 ] ], ... >, 
	    CONT.KEY act_und_prep_rel & [ PREPARG #objind ] ] ].

cp_trans_lt := act_und_lt &
  [ LOCAL [ CAT.VAL.COMPS < *top*, 
			    [ LOCAL local &
				 [ CONT [ KEY event_rel,
					  MESSAGE <! [ HANDEL #mhand ] !> ] ] ], 
			    ...>,
	    CONT.KEY act_und_thm_rel & [ THM #mhand ] ] ].

; "explain to Kim that ..."
pp_cp_lt := empty_prep_intrans_lt &
  [ LOCAL [ CAT.VAL.COMPS < *top*,
			    [ LOCAL local &
				  [ CONT [ KEY event_rel,
					   MESSAGE <! [ HANDEL #mhand ] !> ] ] ],
			    ... >,
	    CONT [ KEY act_und_prep_rel & [ UND #mhand ] ] ] ].

double_pp_lt := act_subj_lt &
  [ LOCAL [ CAT.VAL.COMPS < [ LOCAL local &
					[ CONT.KEY prep_rel &
						   [ ARG #event ] ] ], 
				[ LOCAL local &
					[ CONT.KEY prep_rel &
						   [ ARG #event ] ] ], ... >,
	    CONT.INDEX #event ] ].

; ERB (13-12-97) declaring non_expl-ind here is a total hack.  This
; should follow from the type constraints on the role arguments of each
; equi verb.  (I didn't do it -- I just noticed it!)

s_equi_lt := linking_type &
  [ LOCAL [ CAT.VAL.SUBJ < [ LOCAL local &
				   [ CONT.INDEX #index & non_expl-ind,
                                     THROLE arg1 ] ] >,
	    CONT.KEY fig_gnd_rel & [ GND #index ] ] ].

equi_prd_lt := linking_type & 
  [ LOCAL [ CAT.VAL.--KEYCOMP.LOCAL.CONT.TOP #hand,
	    CONT [ LISZT <! relation & [ HANDEL #hand ],
			    support_rel & #altkey & 
			    [ HANDEL #hand,
			      EVENT #event ] !>,
		   KEY.FIG #event,
		   ALTKEY #altkey ] ] ].

; ERB (14-12-97) Subj_equi verbs now require that their complement have
; a pro_ss subject.  This might be redundant if some other supertye of
; all equi verbs requires hypo_rel on the complement.

; ERB (21-01-98) This pro_ss needs to be constrained to be unslashed.
; I was looking to do it with the macro @cp, but there are several
; problems with that (see notes in templates.tdl near cp).

subj_equi_lt := s_equi_lt &
  [ LOCAL.CAT.VAL [ SUBJ < [ LOCAL.CONT.INDEX #index ] >,
		    COMPS < [ LOCAL local &
				    [ CAT.VAL.SUBJ < pro_ss &
						     [ LOCAL.CONT.INDEX #index,
						       NON-LOCAL.SLASH 0-dlist]>,
				      THROLE arg3] ] > ] ].

; 'try to leave'
subj_equi_inf_lt := subj_equi_lt &
  [ LOCAL [ CAT.VAL.--KEYCOMP.LOCAL local &
				    [ CONT.MESSAGE <! [ HANDEL #hand ] !> ],
	    CONT.KEY.FIG #hand ] ].

; 'stay calm'
subj_equi_prd_lt := equi_prd_lt & s_equi_lt &
  [ LOCAL [ CAT.VAL [ SUBJ < [ LOCAL.CONT.INDEX #index ] >,
		      --KEYCOMP #comp,
		      COMPS < #comp & 
			      [ LOCAL local &
				[ CAT.VAL.SUBJ < pro_ss &
						 [ LOCAL local &
						       [ CONT.INDEX #index ]]>,
				  CONT.TOP #chand,
				  THROLE arg3] ] > ],
	    CONT.ALTKEY.HANDEL #chand ] ].

; ERB (14-12-97) comp's subj is a pro_ss.  This is probably redundant since
; the to_c_prop will say that its subject is a pro_ss.

; ERB (21-01-98) The pro_ss needs to be constrained to be unslashed.

; 'persuade Kim to leave'
obj_equi_lt := act_subj_lt &
  [ LOCAL [ CAT.VAL.COMPS < [ LOCAL local &
				    [ CONT.INDEX #index & non_expl-ind,
				      THROLE arg2 ] ],
			    [ LOCAL local &
				[ CAT.VAL.SUBJ < pro_ss &
						 [ LOCAL.CONT.INDEX #index,
						   NON-LOCAL.SLASH 0-dlist ] >,
				  THROLE arg3 ] ] >,
	    CONT.KEY act_fig_gnd_rel & [ GND #index ] ] ].

; 'persuade Kim to leave'
obj_equi_inf_lt := obj_equi_lt &
  [ LOCAL [ CAT.VAL.--KEYCOMP.LOCAL local &
				    [ CONT.MESSAGE <! [ HANDEL #hand ] !> ],
	    CONT.KEY.FIG #hand ] ].

pp_inf_lt := act_subj_lt &
 [ LOCAL [ CAT.VAL [ COMPS < [ LOCAL local &
				     [ CONT.KEY.PREP #und,
				       THROLE arg2 ] ],
			     [ LOCAL local &
				     [ CONT.TOP #hand,
				       THROLE arg3 ] ] > ],
	   CONT.KEY act_und_thm_rel & [ UND #und,
					THM #hand ] ] ].

; 'consider Kim wise'

obj_equi_prd_lt := equi_prd_lt & obj_equi_lt &
  [ LOCAL [ CAT.VAL [ --KEYCOMP #comp,
		      COMPS < [ LOCAL local &
				      [ CONT [ INDEX #index,
					       KEY basic_nom_rel ],
					THROLE arg2 ] ],
			      #comp &
			      [ LOCAL local &
				      [ CAT.VAL.SUBJ
						  < pro_ss &
						    [ LOCAL local &
						      [ CONT.INDEX #index ] ] >,
					THROLE arg3 ] ] > ] ] ].

; 'promise Kim to leave'
anom_equi_lt := s_equi_lt &
  [ LOCAL [ CAT.VAL 
		[ SUBJ < [ LOCAL.CONT.INDEX #subjind ] >,
		  COMPS < [ LOCAL local &
				  [ CONT.INDEX #objind & non_expl-ind,
				    THROLE arg2 ] ],
			  [ LOCAL local &
				  [ CAT.VAL.SUBJ < pro_ss &
						   [ LOCAL local &
						     [ CONT.INDEX #subjind ] ] >,
				    CONT.MESSAGE <! [ HANDEL #hand ] !>,
				    THROLE arg3 ] ] > ],
	    CONT.KEY fig_gnd_und_rel &
		     [ FIG #hand,
		       UND #objind ] ] ].

; 'turn out unreliable' (also resultatives like 'turned up drunk')
anom_equi_prd_lt := equi_prd_lt & s_equi_lt &
  [ LOCAL [ CAT.VAL 
		[ SUBJ < [ LOCAL.CONT [ INDEX #index,
				        KEY.HANDEL #chand ] ] >,
		  --KEYCOMP #comp,
		  COMPS < *top*,
			  #comp &
			  [ LOCAL local &
				  [ CAT.VAL.SUBJ < pro_ss &
						   [ LOCAL local &
						      [ CONT.INDEX #index ] ] >,
				    CONT.TOP #chand,
                                    THROLE arg3 ] ] > ],
	    CONT.ALTKEY.ARG #chand ] ].

; 'turn out to be red'
anom_equi_particle_lt := s_equi_lt &
  [ LOCAL [ CAT.VAL 
		[ SUBJ < [ LOCAL.CONT.INDEX #index ] >,
		  COMPS < *top*,
			  [ LOCAL local &
				  [ CAT.VAL.SUBJ < pro_ss &
						   [ LOCAL local &
						     [ CONT.INDEX #index ] ] >,
				    CONT.MESSAGE <! [ HANDEL #hand ] !>,
                                    THROLE arg3 ] ] > ],
	    CONT.KEY.FIG #hand ] ].

ssr_lt := linking_type &
  [ LOCAL.CONT.KEY support_rel ].

basic_ssr_expr_lt := ssr_lt &
  [ LOCAL [ CAT.VAL.--KEYCOMP.LOCAL.CONT.TOP #hand,
	    CONT.KEY.VARG #hand ] ].

ssr_expr_lt := basic_ssr_expr_lt &
  [ LOCAL [ CAT.VAL [ --KEYCOMP #comp,
		      COMPS < [ LOCAL.CONT.KEY.PREP #expr ], #comp, ... >],
	    CONT.KEY.EXPR #expr ] ].

ssr_prdp_expr_lt := basic_ssr_expr_lt &
  [ LOCAL [ CAT.VAL [ --KEYCOMP #comp,
		      COMPS < #comp & 
			      [ LOCAL.CONT.KEY.HANDEL #chand ],
			      [ LOCAL.CONT.KEY _to_rel &
					       [ PREP #expr ] ], 
			      ... > ],
	    CONT [ INDEX #ind,
		   KEY #key & [ EXPR #expr & non_expl-ind ],
		   LISZT <! #key,
			    support_rel &
			    [ HANDEL #chand,
			      EVENT #ind ] !> ] ] ].

sor_lt := linking_type &
  [ LOCAL [ CAT.VAL [ SUBJ < [ LOCAL local &
				     [ CONT.INDEX #index,
				       THROLE arg1 ] ] >,
		      COMPS < synsem & [ LOCAL local &
					       [ THROLE arg2 ] ], 
			      [ LOCAL local &
				      [ CONT.TOP #hand,
					THROLE arg3 ] ] > ],
	    CONT.KEY fig_gnd_rel & [ FIG #hand,
				     GND #index ] ] ].

expl_it_subj_lt := linking_type &
  [ LOCAL [ CAT.VAL [ SUBJ < [ LOCAL local & [ CONT.INDEX it-ind ] ] >,
		      COMPS < [ LOCAL local &
				      [ CONT.KEY.PREP #expr ] ], #comp, ... >,
		      --KEYCOMP #comp & 
			   [ LOCAL local &
				   [ CONT.MESSAGE <! [ HANDEL #hand ] !> ] ] ],
	    CONT.KEY support_expr_rel &
		[ HANDEL #hand,
		  EXPR #expr ] ] ].

expl_prep_trans_lt := linking_type &
 [ LOCAL [ CAT.VAL [ SUBJ < [ LOCAL local &
				    [ CONT.INDEX it-ind ] ] >,
		     COMPS < [ LOCAL local &
				     [ CONT.INDEX #und,
				       THROLE arg3 ] ],
			     [ LOCAL local &
				     [ CONT [ KEY prep_rel & 
						  [ HANDEL #hand,
						    ARG #index,
						    PREP #act ] ],
				       THROLE arg1 ] ], ...> ],
	   CONT [ INDEX #index,
		  KEY act_und_rel & [ HANDEL #hand,
				      ACT #act,
				      UND #und ] ] ] ].

expl_pp_inf_lt := act_subj_lt &
 [ LOCAL [ CAT.VAL [ COMPS < [ LOCAL local &
				     [ CONT.INDEX it-ind ] ],
			     [ LOCAL local &
				     [ CONT.KEY.PREP #und,
				       THROLE arg2 ] ],
			     [ LOCAL local &
				     [ CONT.TOP #hand,
				       THROLE arg3 ] ] > ],
	   CONT.KEY act_und_thm_rel & [ UND #und,
					THM #hand ] ] ].

; 'leave it to Kim to find the answer'
expl_pp_inf_oeq_lt := expl_pp_inf_lt &
 [ LOCAL.CAT.VAL.COMPS < *top*,
			 [ LOCAL.CONT.KEY.PREP #und ],
			 [ LOCAL.CONT.KEY act_rel & [ ACT #und ] ] > ].

; 'arrange with Kim to meet her'
pp_inf_seq_lt := pp_inf_lt &
 [ LOCAL.CAT.VAL [ SUBJ < [ LOCAL local &
				  [ CONT.INDEX #act ] ] >,
		   COMPS < *top*,
			   [ LOCAL.CONT.KEY act_rel & [ ACT #act ] ] > ] ].

; 'arrange it with Kim to meet her'
expl_pp_inf_seq_lt := expl_pp_inf_lt &
 [ LOCAL.CAT.VAL [ SUBJ < [ LOCAL local &
				  [ CONT.INDEX #act ] ] >,
		   COMPS < *top*,
			   *top*,
			   [ LOCAL.CONT.KEY act_rel & [ ACT #act ] ] > ] ].

; suffice
atrans_inf_lt := linking_type &
  [ LOCAL [ CAT.VAL.COMPS < [ LOCAL local &
				    [ CONT.TOP #hand ] ] >,
	    CONT.KEY fig_gnd_rel & [ FIG #hand ] ] ].

particle_NP_lt := act_subj_lt & 
  [ LOCAL [ CAT.VAL.COMPS < *top*, [ LOCAL local &
				     [ CONT.INDEX #index & non_expl-ind,
				       THROLE arg3 ] ] >,
	    CONT.KEY act_und_rel & [ UND #index ] ] ].

NP_particle_lt := act_subj_lt & 
  [ LOCAL [ CAT.VAL.COMPS < [ LOCAL local &
				    [ CONT.INDEX #index & non_expl-ind,
				      THROLE arg3 ] ], ... >,
	    CONT.KEY act_und_rel & [ UND #index ] ] ].

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Val Types
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Valence types specify the number and type of subcategorized complements.
  
valence_type :< lex_synsem.

unsat_subst := valence_type &
  [ LOCAL.CAT.VAL.SUBJ < @nomp( ) > ].

intrans_subst := unsat_subst & one_arg &
  [ LOCAL.CAT.VAL.COMPS < > ].

unsat_two_arg_subst := unsat_subst &
  [ LOCAL [ CAT.VAL.COMPS < synsem & [ LOCAL local &
					     [ CONT.KEY #ckey ] ], ... >,
	    CONT.COMPKEY #ckey ] ].

two_arg_subst := unsat_two_arg_subst &
  [ LOCAL.CAT.VAL.COMPS < *top* > ].

; For verbs that passivize.
trans_subst := unsat_subst &
  [ LOCAL.CAT.VAL.COMPS < @nomp($case=acc), ... > ].
  
np_trans_subst := trans_subst & two_arg_subst & two_arg &
  [ LOCAL.CAT.VAL.COMPS < synsem > ].
  
; For verbs with NP complement but that don't passivize.
non_trans_subst := unsat_two_arg_subst &
  [ LOCAL.CAT.VAL.COMPS < @nomp($case=acc), ... > ].
  
np_non_trans_subst := non_trans_subst & two_arg_subst & 
  [ LOCAL.CAT.VAL.COMPS < synsem > ].

cp_intrans_subst := two_arg_subst &
  [ LOCAL.CAT.VAL [ --KEYCOMP #comp,
		    COMPS < #comp & @cp($vform=fin) > ] ].
  
prd_intrans_subst := two_arg_subst & 
  [ LOCAL.CAT.VAL.COMPS < @prd() > ].

prep_intrans_subst := two_arg_subst & 
  [ LOCAL.CAT.VAL.COMPS < @pp() > ].

unsat_three_arg_subst := unsat_two_arg_subst &
  [ LOCAL [ CAT.VAL.COMPS < synsem, 
			    synsem & [ LOCAL local &
					     [ CONT.KEY #ckey ] ], ... >,
	    CONT.OCOMPKEY #ckey ] ].

three_arg_subst := unsat_three_arg_subst & three_arg.

three_arg_trans_subst := unsat_three_arg_subst & three_arg & trans_subst.

prep_trans_subst := three_arg_trans_subst & 
  [ LOCAL.CAT.VAL.COMPS < @nomp($case=acc), @pp() > ].
  
prep_non_trans_subst := three_arg_trans_subst & 
  [ LOCAL.CAT.VAL.COMPS < @nomp($case=acc) & lex_synsem, @pp() > ].
  
prd_trans_subst := three_arg_trans_subst & 
  [ LOCAL.CAT.VAL.COMPS < @nomp($case=acc), @prd() > ].

prd_non_trans_subst := three_arg_subst & non_trans_subst &
  [ LOCAL.CAT.VAL.COMPS < @nomp($case=acc), @prd() > ].

ditrans_subst := three_arg_trans_subst & 
  [ LOCAL.CAT.VAL.COMPS < @nomp($case=acc), @nomp($case=acc) > ].
  
; 'inform Kim that S'
cp_trans_subst := three_arg_trans_subst &
  [ LOCAL.CAT.VAL [ --KEYCOMP #comp,
		    COMPS < @nomp($case=acc),
			    #comp & @cp($vform=fin) > ] ]. 
  
pp_cp_subst := three_arg_subst &
  [ LOCAL.CAT.VAL [ --KEYCOMP #comp,
		    COMPS < @pp(),
			    #comp & @cp($vform=fin) > ] ].
  
np_comp_subst := three_arg_trans_subst & 
  [ LOCAL.CAT.VAL.COMPS < @nomp($case=acc),
			  [ LOCAL local &
				 [ CAT [ HEAD prep,
					 VAL [ SUBJ < synsem >,
					       COMPS *olist* ] ] ] ] > ].
; 'talk to Kim about Sandy'
double_pp_subst := three_arg_subst & 
  [ LOCAL.CAT.VAL.COMPS < @pp(), @pp() > ].
  
inf_or_prp_intrans_subst := unsat_two_arg_subst &
  [ LOCAL.CAT.VAL [ --KEYCOMP #comp,
		    COMPS < #comp & @vp($vform=inf_or_prp) > ] ].

inf_intrans_subst := inf_or_prp_intrans_subst &
  [ LOCAL.CAT.VAL.COMPS < [ LOCAL local &
				  [ CAT.HEAD.VFORM inf ] ] > ].

for_inf_intrans_subst := two_arg_subst &
  [ LOCAL.CAT.VAL.COMPS < @cp($vform=inf) > ].

inf_trans_subst := three_arg_trans_subst &
  [ LOCAL.CAT.VAL [ --KEYCOMP #comp, 
		    COMPS < *top*, #comp & @vp($vform=inf) > ] ].

prp_intrans_subst := inf_or_prp_intrans_subst & two_arg &
  [ LOCAL.CAT.VAL.COMPS < [ LOCAL local &
				  [ CAT.HEAD.VFORM prp ] ] > ].

bse_trans_subst := three_arg_trans_subst & 
  [ LOCAL.CAT.VAL.COMPS < *top*, @vp($vform=bse) > ].

; want (doesn't passivize)
inf_non_trans_subst := three_arg_subst & non_trans_subst &
  [ LOCAL.CAT.VAL [ --KEYCOMP #comp,
		    COMPS < *top*, #comp & @vp($vform=inf) > ] ].

pp_inf_subst := unsat_three_arg_subst &
  [ LOCAL.CAT.VAL [ --KEYCOMP #comp,
		    COMPS < @pp(),
			    #comp & @vp($vform=inf) > ] ].

; We treat raising as the identification of the CONT attribute of the SUBJ and
; the COMPS.SUBJ, rather than the whole synsem, in part to enable the 
; underspecification of the base/non3sg lex-entry for verbs, where otherwise
; CASE information would clash in examples like "Kim believes Sandy to be ready."

ssr_subst := two_arg_subst &
  [ LOCAL.CAT.VAL [ SUBJ < [ LOCAL local & [ CONT #cont ] ] >,
		    COMPS < [ LOCAL local &
			       [ CAT.VAL [ SUBJ < [ LOCAL.CONT #cont, 
						    NON-LOCAL [ SLASH 0-dlist,
								REL 0-dlist,
								QUE 0-dlist ] ]>,
					   COMPS *olist* ],
				 CONT.MESSAGE <! !> ] ] > ] ].

;;; AAC - added to avoid overspecific glb types

ssr_two_arg_subst := ssr_subst & two_arg.
ssr_two_arg_raising_subst := ssr_subst & two_arg_raising.

ssr_inf_subst := ssr_subst & inf_intrans_subst.

; ERB (13-12-97) SUBJ wasn't updated here to be a list.  Fixed now.

ssr_pp_inf_subst :=  three_arg_subst &
  [ LOCAL.CAT.VAL 
	   [ SUBJ < [ LOCAL.CONT #subj ] >,
	     COMPS < @pp(),
		     [ LOCAL local &
			     [ CAT [ HEAD verbal & strict_head &
					  [ VFORM inf ],
				     VAL [ SUBJ < [ LOCAL.CONT #subj,
						    NON-LOCAL [ SLASH 0-dlist,
								REL 0-dlist,
								QUE 0-dlist ]] >,
						   COMPS *olist* ] ],
					  CONT.MESSAGE <! !> ] ] > ] ].

ssr_prdp_pp_subst :=  three_arg_subst &
  [ LOCAL.CAT.VAL 
              [ SUBJ < [ LOCAL local & [ CONT #subj ] ] >,
		COMPS < [ LOCAL local &
			  [ CAT [ HEAD.PRD +,
				  VAL [ SUBJ < [ LOCAL.CONT #subj,
						 NON-LOCAL [ SLASH 0-dlist,
							     REL 0-dlist,
							     QUE 0-dlist ] ] >,
					SPR *olist*,
					COMPS *olist* ],
				  MC na ] ] ],
			@pp() > ] ].

expl_pp_cp_subst :=  three_arg_subst &
  [ LOCAL.CAT.VAL.COMPS < @pp(), @cp() > ].

; Raising synsems have to identify the LOCAL value of the raised synsem with
; that of the VP's subject's synsem, rather than identifying the synsems
; themselves, due to our lexical threading of SLASH: if the raised complement
; is extracted, it will be of type gap, and therefore have a non-empty SLASH,
; but we don't want the lower VP complement's subject to also then have a
; non-empty SLASH.  But cf. note above for subj-subj raising, where maybe we
; even want to restrict the identity to CONT only.
;   Indeed, this seems necessary, since CASE blocks unification for
; 'Kim made him sleep' where our (dual-purpose) 'sleep' requires its subject
; to be [CASE nom] (in order to block the sentence "them sleep"), but when its
; subject is raised to object as with "make", there's a conflict with the
; [CASE acc] on the object of "make".  So here again, we make the raising
; identity hold only for CONT.

sor_inf_subst := inf_trans_subst & 
  [ LOCAL.CAT.VAL.COMPS < synsem &
			  [ LOCAL.CONT #subj,
			    OPT - ], 
			  [ LOCAL local &
				  [ CAT.VAL.SUBJ 
						< [ LOCAL.CONT #subj,
						    NON-LOCAL [ SLASH 0-dlist,
								REL 0-dlist,
								QUE 0-dlist ] ]>,
					CONT.MESSAGE <! !> ],
				OPT - ] > ].

sor_bse_subst := bse_trans_subst &
  [ LOCAL.CAT.VAL.COMPS < [ LOCAL.CONT #subj,
			    OPT - ], 
			  [ LOCAL local &
				  [ CAT.VAL.SUBJ 
					     < [ LOCAL.CONT #subj,
						 NON-LOCAL [ SLASH 0-dlist,
							     REL 0-dlist,
							     QUE 0-dlist ] ] > ],
			    OPT - ] > ].

sor_inf_non_trans_subst := inf_non_trans_subst & 
  [ LOCAL.CAT.VAL.COMPS < [ LOCAL.CONT #subj,
			    OPT - ],
			  [ LOCAL local &
				  [ CAT.VAL.SUBJ 
					     < [ LOCAL.CONT #subj,
						 NON-LOCAL [ SLASH 0-dlist,
							     REL 0-dlist,
							     QUE 0-dlist ] ]>,
					CONT.MESSAGE <! !> ],
				OPT - ] > ].

particle_subst := unsat_two_arg_subst &
  [ LOCAL.CAT.VAL.COMPS 
           < lex_synsem & [ LOCAL local &
				  [ CAT.HEAD particle & [ PRD -,
							  MOD no-mod ],
				    CONT.H-STORE <! !> ],
			    NON-LOCAL [ SLASH 0-dlist,
					REL 0-dlist,
					QUE 0-dlist ] ], ... > ].

particle_NP_subst := particle_subst & three_arg &
  [ LOCAL.CAT.VAL.COMPS < lex_synsem,
			  @nomp($case=acc) > ].

generic_NP_particle_subst := unsat_subst & 
  [ LOCAL [ CAT.VAL.COMPS < @nomp($case=acc),
			    lex_synsem &
			    [ LOCAL local &
				    [ CAT [ HEAD particle & [ PRD -,
							      MOD no-mod ] ],
				      CONT.KEY #ckey ],
			      NON-LOCAL [ SLASH 0-dlist,
					  REL 0-dlist,
					  QUE 0-dlist ] ], ... >,
	    CONT.COMPKEY #ckey ] ].

NP_particle_subst := generic_NP_particle_subst & trans_subst & three_arg &
  [ LOCAL.CAT.VAL.COMPS < synsem, synsem > ].

particle_plus_subst := particle_subst & three_arg_subst.

particle_prd_subst := particle_plus_subst & 
  [ LOCAL.CAT.VAL.COMPS < *top*, @prd() > ].

; 'turn out to be'
particle_inf_subst := particle_plus_subst & 
  [ LOCAL.CAT.VAL [ --KEYCOMP #comp,
		    COMPS < *top*, #comp & @vp($vform=inf) > ] ].

particle_pp_subst := particle_plus_subst & 
  [ LOCAL.CAT.VAL.COMPS < *top*, @pp() > ].

; 'find out that S'
particle_cp_subst := particle_plus_subst & 
  [ LOCAL.CAT.VAL [ --KEYCOMP #comp,
		    COMPS < *top*, #comp & @cp($vform=fin) > ] ].

;; 'leave it to Kim to schedule the meeting'
unsat_four_arg_subst := unsat_three_arg_subst &
  [ LOCAL.CAT.VAL.COMPS < synsem, 
			  synsem,
			  synsem, ... > ].

; 'leave it to Kim to find the answer'
expl_pp_inf_subst := unsat_four_arg_subst & trans_subst & four_arg &
  [ LOCAL.CAT.VAL [ --KEYCOMP #comp,
		    COMPS < *top*, 
			    @pp(),
			    #comp & @vp($vform=inf) > ] ].

;; AAC - PARTICLE_NP_PP_SUBST: 
;; UNSAT_SUBST is redundant - it is an ancestor of GENERIC_NP_PARTICLE_SUBST 

;; 'put kim through to Sandy'
particle_np_pp_subst := generic_NP_particle_subst & four_arg &
  [ LOCAL.CAT.VAL.COMPS < synsem, synsem, @pp() > ].


;; 'bet Kim a fortune that Sandy would win'
np_np_cp_subst := unsat_four_arg_subst & trans_subst & four_arg &
  [ LOCAL.CAT.VAL [ --KEYCOMP #comp,
		    COMPS < @nomp($case=acc),
			    @nomp($case=acc),
			    #comp & @cp($vform=fin) > ] ].

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; VERB SYNSEMS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Verb synsems should inherit from one valence type and one linking type.
;; The type verb_synsem is given a non-empty SPR value so VPs can be modified
;; by PPs, but the synsem is marked [ LOCAL.CONT.KEY no_rel ] to block 
;; unification, to avoid ever picking up an actual specifier.
;;   Added VIT links for the moment, to satisfy VIT requirements for visibility
;; of TENSE and MOOD information.  (Actually, moved VITTENSE specification to
;; the various inflectional affixes in lexrules.tdl, to accommodate the collapse
;; of the base and fin-non3sg verb forms.
;; DPF (8-Jul-98) Added QUE <! !>, REL <! !> to block pied piping in verb
;; phrases (taking advantage of lexical amalgamation of these features, together
;; with our treatment of subject-WH as extraction (where only local features are
;; propagated in SLASH).

verb_synsem := lex_synsem &
  [ LOCAL [ STEMHEAD vstem,
            AGR #agr,
            CAT [ HEAD verb* & [ MOOD #vitmood ],
		  VAL [ SUBJ < synsem & #subj &
			       [ LOCAL local &
				       [ AGR #agr ] ] >,
			SPR < synsem & [ LOCAL.CONT.KEY no_rel ] >,
			COMPS #comps ] ],
	    CONT.INDEX.VIT.VITMOOD #vitmood,
	    ARG-S < #subj . #comps > ],
    NON-LOCAL [ QUE <! !> & [ LIST < > ] ,
		REL <! !> & [ LIST < > ] ] ].

atrans_verb := verb_synsem & intrans_subst & atrans_lt.

unerg_verb := verb_synsem & intrans_subst & act_subj_lt.
  
unacc_verb := verb_synsem & intrans_subst & unacc_lt.
  
; For at least main verb "have" (e.g, "Kim has some rice")
poss_verb := verb_synsem & two_arg_subst & two_arg & poss_lt &
  [ LOCAL.CAT.VAL.COMPS < @nomp($case=acc) > ].
  
np_trans_verb := verb_synsem & np_trans_subst & trans_lt.
  
np_non_trans_verb := verb_synsem & np_non_trans_subst & two_arg & trans_lt.

np_non_trans_unacc_verb := verb_synsem & np_non_trans_subst & two_arg & 
			   unacc_lt.

;; come to
;;
prep_intrans_verb := verb_synsem & prep_intrans_subst & two_arg & 
		     prep_intrans_lt.

;; look for
;;
empty_prep_intrans_verb := verb_synsem & prep_intrans_subst & two_arg & 
			   empty_prep_intrans_lt.

;; suggest on Tuesday
;;
prep_intrans_event_verb := verb_synsem & prep_intrans_subst & two_arg & 
			   prep_intrans_event_lt.

;; put, move
;;
prep_trans_verb := verb_synsem & prep_trans_subst & prep_trans_lt.
  
;; get_hold
;;
prep_non_trans_verb := verb_synsem & prep_non_trans_subst & prep_trans_lt.
  
;; remind-of
;;
empty_prep_trans_verb := verb_synsem & prep_trans_subst & empty_prep_trans_lt.

;; regard Kim as tall
np_comp_verb := verb_synsem & np_comp_subst & obj_equi_lt.

;; strike Kim as tall
np_comp_obj_verb := verb_synsem & np_comp_subst & 
  [ LOCAL [ CAT.VAL.COMPS < [ LOCAL.CONT.INDEX #index ],
			    [ LOCAL.CONT.INDEX #event ] >,
	    CONT.KEY fig_gnd_rel & [ FIG #event,
				     GND #index ] ] ].

to_trans_verb := empty_prep_trans_verb &
  [ LOCAL.CONT.OCOMPKEY _to_rel ].
  
ditrans_verb := verb_synsem & ditrans_subst & ditrans_lt.
  
ditrans_only_verb := verb_synsem & ditrans_subst & ditrans_lt &
  [ LOCAL.CAT.VAL.COMPS < synsem, [ OPT - ] > ].

; 'talk to Kim about Sandy'
double_pp_verb := verb_synsem & double_pp_subst & double_pp_lt.

; Raising verbs which take an infinitival complement restrict it to being
; [ MESSAGE <! !> ], which ensures that the VP will be headed by the 
; non-propositional "to" complementizer, which identifies its handle with
; that of its VP complement.

ssr_verb := verb_synsem & ssr_inf_subst & two_arg_raising & ssr_lt &
  [ LOCAL [ CAT.VAL.--KEYCOMP.LOCAL.CONT.TOP #hand,
	    CONT.KEY.VARG #hand ] ].

ssr_prd_verb := verb_synsem & ssr_two_arg_raising_subst & ssr_lt &
  [ LOCAL [ CAT.VAL [ COMPS < @prd() & #comp >,
		      --KEYCOMP #comp & [ LOCAL.CONT.TOP #hand ] ],
	    CONT [ KEY #key & [ VARG #hand ],
		   LISZT <! #key !> ] ] ].

ssr_pp_inf_verb := verb_synsem & ssr_pp_inf_subst & ssr_expr_lt.

ssr_prdp_pp_verb := verb_synsem & ssr_prdp_pp_subst & ssr_prdp_expr_lt.

sor_verb := verb_synsem & sor_inf_subst & sor_lt.

sorb_verb := verb_synsem & sor_bse_subst & sor_lt.

sor_non_trans_verb := verb_synsem & sor_inf_non_trans_subst & sor_lt.

subj_equi_prp_verb := verb_synsem & prp_intrans_subst & subj_equi_lt.

subj_equi_prd_verb := verb_synsem & prd_intrans_subst & two_arg & 
		      subj_equi_prd_lt.

; AAC - obj_equi_prd_verb 
; three_arg was redundant - it is an ancestor of PRD_TRANS_SUBST 

obj_equi_prd_verb := verb_synsem & prd_trans_subst & 
		     obj_equi_prd_lt.

obj_equi_non_trans_prd_verb := verb_synsem & prd_non_trans_subst & 
			       obj_equi_prd_lt.

anom_equi_prd_verb := verb_synsem & prd_trans_subst & anom_equi_prd_lt.

; ERB (07-10-96) I am working with the verb 'know' as a prototype for a verb
; that selects by the semantic type (for now expressed as a feature) of its
; sentential complement rather than by the value of CMP or some such hack.  In
; order to do so, I have changed the types around here.  In particular, I am
; adding a new type cp_prop+ques_intrans_verb that takes a sentential
; complement but doesn't care if its a proposition or a question (for verbs
; like 'know').  A further axis of variation is the VFORM of the complement
; (fin vs. inf).  Since my analysis of 'know' never makes use of the resolved
; subtypes (e.g., cp_prop_intrans_verb) I am not adding to the resolved
; subtypes, and just making the old ones inherit from the finite side of
; things for now.  The future inf_cp_prop_intrans_verb will probably be the
; type of subject equi verbs. A further future modification would involve the
; addition of cp_command_intrans_verb and cp_command+prop_intrans_verb for
; verbs like 'insist'.
;
; DPF (19-Jun-98) This type cannot itself simply add the complement CP's 
; (underspecified) message to its LISZT, since the generation algorithm requires
; that no relation on LISZT will ever get more specialized during parsing.  So 
; we make MESSAGE be list-valued (the empty list for all but complementizers
; and clauses), and have the Head-Complement rule append the values of MESSAGE
; from both of its daughters, since the msg comes from the head if it's a
; complementizer, and from the non-head if the head is a verb.

cp_prop+ques_verb := verb_synsem &
  [ LOCAL [ CAT.VAL [ --KEYCOMP 
			  [ LOCAL local &
				  [ CAT [ HEAD verbal & strict_head &
					       [ INV - ] ],
				    CONT [ TOP #hand,
					   MESSAGE <! prop_ques_rel &
						    [ SOA #hand ] !> ] ] ] ],
	    CONT.LISZT.LIST < relation, ... > ] ].

fin_cp_prop+ques_verb := cp_prop+ques_verb &
  [ LOCAL.CAT.VAL.--KEYCOMP.LOCAL.CAT.HEAD.VFORM fin ].

;; DPF 4/21/98 - Moved [ COMPS.FIRST.LOCAL.CAT.MC - ] from cp_ques_intrans_verb
;; to cp_intrans_verb, to block spurious parse for e.g. "Kim knows who left"
cp_intrans_verb := fin_cp_prop+ques_verb & cp_intrans_subst & two_arg &
		   act_und_h_lt &
  [ LOCAL.CAT.VAL.COMPS < [ LOCAL.CAT.MC - ] > ].

cp_prop_intrans_verb := cp_intrans_verb &
  [ LOCAL.CAT.VAL.COMPS < [ LOCAL.CONT.MESSAGE <! propositional_rel !> ] > ].

cp_ques_intrans_verb := cp_intrans_verb &
  [ LOCAL.CAT.VAL.COMPS < [ LOCAL.CONT.MESSAGE <! int_rel !> ] > ].

;; suppose
cp_prop_raise_key_verb := fin_cp_prop+ques_verb & cp_intrans_subst & two_arg &
			  alt_act_und_h_lt &
  [ LOCAL [ CAT.VAL.COMPS < [ LOCAL.CONT [ KEY #key,
					   MESSAGE <! propositional_rel !> ] ] >,
	    CONT [ KEY #key & mod_role_rel,
		   ALTKEY #altkey,
		   LISZT.LIST < relation, #altkey, ... > ] ] ].

;; tell Kim that/whether S
np_trans_cp_verb := fin_cp_prop+ques_verb & cp_trans_subst & cp_trans_lt.

;; inform Kim that S
fin_np_trans_cp_verb := np_trans_cp_verb &
  [ LOCAL.CAT.VAL.--KEYCOMP.LOCAL.CAT.HEAD.VFORM fin ].

;; bet Kim ten cents that S
np_np_cp_verb := fin_cp_prop+ques_verb & np_np_cp_subst & tritrans_lt.

;; explain to Kim that S
pp_cp_verb := fin_cp_prop+ques_verb & pp_cp_subst & pp_cp_lt &
  [ LOCAL.CAT.VAL.COMPS < synsem, 
			  [ LOCAL.CONT.MESSAGE <! propositional_rel !> ] > ].

;; ask Kim whether S
np_trans_cp_ques_verb := fin_cp_prop+ques_verb & cp_trans_subst & cp_trans_lt &

  [ LOCAL.CAT.VAL.COMPS < synsem, [ LOCAL.CONT.MESSAGE <! int_rel !> ] > ].

;; persuade Kim that S
np_trans_cp_prop_verb := fin_cp_prop+ques_verb & cp_trans_subst & cp_trans_lt &

  [ LOCAL.CAT.VAL.COMPS < synsem, 
			  [ LOCAL.CONT.MESSAGE <! propositional_rel !> ] > ].

subj_equi_verb := cp_prop+ques_verb & inf_intrans_subst & two_arg & subj_equi_inf_lt.

obj_equi_verb := cp_prop+ques_verb & inf_trans_subst & obj_equi_inf_lt.

oeq_pp_inf_verb := verb_synsem & pp_inf_subst & three_arg & obj_equi_inf_lt.

pp_inf_seq_verb := cp_prop+ques_verb & pp_inf_subst & three_arg & pp_inf_seq_lt.

anom_equi_verb := cp_prop+ques_verb & inf_non_trans_subst & anom_equi_lt.

particle_inf_verb := cp_prop+ques_verb & particle_inf_subst & 
		     anom_equi_particle_lt.

particle_cp_verb := fin_cp_prop+ques_verb & particle_cp_subst & 
		    particle_cp_lt.

expl_it_subj_verb := cp_prop+ques_verb & expl_pp_cp_subst & expl_it_subj_lt.

expl_pp_inf_oeq_verb := cp_prop+ques_verb & expl_pp_inf_subst & 
			expl_pp_inf_oeq_lt.

expl_pp_inf_seq_verb := cp_prop+ques_verb & expl_pp_inf_subst & 
			expl_pp_inf_seq_lt.

atrans_inf_verb := cp_prop+ques_verb & inf_intrans_subst & two_arg & 
		   atrans_inf_lt.

for_to_verb := verb_synsem & for_inf_intrans_subst & two_arg & trans_lt.

expl_prep_trans_verb := verb_synsem & non_trans_subst & 
			expl_prep_trans_lt & three_arg_subst &
  [ LOCAL.CAT.VAL.COMPS < *top*, @pp() > ].

particle_verb := verb_synsem & particle_subst & act_subj_lt & two_arg &
  [ LOCAL.CAT.VAL.COMPS < *top* > ].

particle_NP_verb := verb_synsem & particle_NP_subst & particle_NP_lt.

NP_particle_verb := verb_synsem & NP_particle_subst & NP_particle_lt.

particle_prd_verb := verb_synsem & particle_prd_subst & anom_equi_prd_lt.

particle_pp_verb := verb_synsem & particle_pp_subst & 
		    empty_prep_particle_intrans_lt.

particle_np_pp_verb := verb_synsem & particle_np_pp_subst & empty_prep_particle_trans_lt.

; prefer it if ...
expl_obj_cp_verb := fin_cp_prop+ques_verb & cp_trans_subst & expl_obj_cp_lt.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; VERBS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; The semantics of a main verb consists of the "main" handel for the sentence
; and a list of relations.  A pointer to the main or head relation in the list
; is kept in the KEY attribute.

main_verb_sans_key := hcons_amalg_word & affix_bearing &
  [ SYNSEM.LOCAL [ CAT.HEAD verb & [ AUX -*,
				     INV - ],
		   CONT.LISZT.LIST < event_rel, ... > ] ].

main_verb := main_verb_sans_key &
  [ SYNSEM.LOCAL.CONT [ LISZT.LIST < #key, ... >,
			KEY #key ] ].

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; AUXILIARY VERBS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Auxiliary verbs are subject-to-subject raising verbs which also raise the 
; content of the VP complement, possibly tacking an additional relation on the
; end.  They also raise the context of the VP complement, for now at least to
; propagate tense information.
; AUX verbs are further classified by the type of VP complement they 
; select for.  Also, AUX verbs optionally take a neg (post-head) specifier.

aux_verb := verb_synsem &
  [ LOCAL [ CAT [ HEAD.TENSE #vittense,
		  VAL [ --KEYCOMP #comp,
			COMPS < #comp, ... > ] ],
	    CONT.INDEX.VIT.VITTENSE #vittense ] ].
		
aux_verb_ssr := aux_verb & ssr_subst & basic_two_arg &
  [ LOCAL [ ARG-S < synsem, [ LOCAL.CONT.H-STORE #hstore ] >,
	    CONT.H-STORE #hstore ] ].

aux_verb_ssr_two_arg := aux_verb_ssr & two_arg_raising.
  
aux_verb_word := mcna & nonconj & nonmsg &
  [ SYNSEM aux_verb_ssr & 
	  [ LOCAL.CAT.HEAD.AUX +* ] ].

bse_aux_verb_word := aux_verb_word & 
  [ SYNSEM.LOCAL local &
		 [ CAT [ VAL [ SUBJ < [ OPT - ] >,
			       COMPS < @vp($vform=bse) &
				       [ LOCAL local &
					       [ CAT.HEAD.PRD - ],
					 OPT - ] > ],
			 HEAD [ VFORM fin,
				MOD intersective_mod & @nbar() ] ] ] ].

reg_aux_verb_word := aux_verb_word & topkey &
  [ SYNSEM aux_verb_ssr_two_arg ].


;; ought
inf_aux_verb_word := aux_verb_word &
  [ SYNSEM.LOCAL local &
		 [ CAT.VAL.COMPS < @vp($vform=inf) & 
				   [ LOCAL.CAT.HEAD.PRD -,
				     OPT - ] > ] ].

psp_aux_verb_word := aux_verb_word &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < @vp($vform=psp) &
				 [ OPT - ] > ].

; Only for the copula
prd_aux_verb_word := aux_verb_word &
  [ SYNSEM aux_verb_ssr_two_arg &
	   [ LOCAL.CAT.VAL.COMPS < [ LOCAL local &
					   [ CAT [ HEAD.PRD +,
						   VAL [ SUBJ < synsem >,
							 COMPS *olist*,
							 SPR *olist* ],
						   MC na ] ],
				     OPT - ] > ] ].

raise_cont := sign &
  [ SYNSEM.LOCAL [ CAT.VAL.COMPS < [ LOCAL local &
					   [ CONT [ TOP #hand,
						    INDEX #index ] ] ], ... >,
		   CONT [ TOP #hand,
			  INDEX #index,
			  LISZT <! !> ] ] ].

add_cont := sign &
  [ SYNSEM.LOCAL.CONT [ LISZT.LIST < relation & #key, ... >,
			KEY #key ] ].

; Real modal verbs are auxiliary verbs which select a base form complement.
; They only exist in finite forms.

generic_modal_verb_word := aux_verb_word &
  [ SYNSEM aux_verb_ssr_two_arg &
	   [ LOCAL [ CAT.VAL.--KEYCOMP.LOCAL.CONT.TOP #hand,
		     CONT [ INDEX #event,
			    KEY [ EVENT #event,
				  VARG #hand ] ] ] ],
    ARGS < [ AFFIX no-affix ] , ... > ].

fin_modal_verb_word := generic_modal_verb_word &
  [ SYNSEM.LOCAL [ CAT [ HEAD [ PRD -,
				VFORM fin ],
			 VAL.SUBJ < @nomp($case=nom) &
				    [ OPT - ] > ],
		   CONT psoa ] ].

pres_modal_verb_word := fin_modal_verb_word & 
  [ SYNSEM.LOCAL.CAT.HEAD.TENSE present* ].

; Assume for now that all modals have simple present tense semantics,
; ignoring the habitual past readings possible for "would" and "could" -
; these will have to be separate lexical entries.

modal_verb_word := pres_modal_verb_word & bse_aux_verb_word.
pos_modal_verb_word := modal_verb_word & topkey &
  [ SYNSEM.LOCAL.CONT [ KEY #key,
			LISZT <! #key !> ] ].

ought_verb_word := pres_modal_verb_word & inf_aux_verb_word.
pos_ought_verb_word := ought_verb_word & topkey &
  [ SYNSEM.LOCAL.CONT [ KEY #key,
			LISZT <! #key !> ] ].

past_ought_verb_word := fin_modal_verb_word & inf_aux_verb_word &
  [ SYNSEM.LOCAL [ CAT.HEAD.TENSE past*,
		   CONT.LISZT <! relation !> ] ].

quasimodal_word := inf_aux_verb_word & topkey &
  [ SYNSEM.LOCAL [ CAT.VAL.COMPS.FIRST.LOCAL.CONT.INDEX #event,
		   CONT [ INDEX #event,
			  KEY _going_to_rel,
			  LISZT <! !> ] ] ]. 

contracted_aux_word := word &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.NON-LOCAL.SLASH 0-dlist ].

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Modifier synsems
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

modifier_synsem :< lex_synsem.

; 5/2/96 (DPF) Was subtype of prd_synsem, but this blocked "how about Tuesday"
; so made it subtype of modifier_synsem.

#|
temp_mod_synsem := modifier_synsem &
  [ LOCAL [ CAT [ HEAD noun* &
		       [ POSS -,
			 MOD intersective_mod &
			      [ CAT [ HEAD verb,
				      VAL [ SPR < synsem >,
					    COMPS *olist* ],
				      MC na ],
				CONT [ TOP #mhand,
				       INDEX #event,
				       MESSAGE #msg ] ] ],
		  POSTHEAD + ],
	    CONT [ TOP #hand,
		   INDEX #index & ref-ind,
		   LISZT.LIST < #key & [ INST #index ], ... >,
		   KEY #key & [ HANDEL #hand ],
		   ECONT [ TOP #mhand,
			   INDEX #event,
			   LISZT <! #mkey !>,
			   KEY #mkey & temp_loc_rel &
			       [ HANDEL #mhand,
				 PREP #index,
				 ARG #event & individual ],
			   MESSAGE #msg ] ] ] ].
|#

temp_mod_synsem :< nomod_synsem.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; NOUNS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;       TYPE                 ISA                what's it for?
;       nominal_synsem       lex_synsem         all nouns
;       xpro_synsem          nominal_synsem     pro v. non-pro dimension
;       xref_synsem          nominal_synsem     ref v. non-ref dimension
;       pronominal_synsem    xpro_synsem        all pronouns
;       nonpronominal_synsem xpro_synsem        all non-pronominal nouns
;       ref_synsem           xref_synsem        personal pro's & nouns
;       non_ref_synsem       xref_synsem        it, there, wh-pronouns
;       ref_pro_synsem       pronominal_synsem  personal pronouns
;                            & ref_synsem
;       non_ref_pro_synsem   pronominal_synsem  it, there, wh-pronouns
;                            & non_ref_synsem
;       noun_synsem          non_pronominal_synsem all non-pro nouns
;                            & ref_synsem 

; The "default" statement that most nouns identify their AGR and INDEX
; will live on noun_synsem and non_ref_pro_synsem, and then be restated for
; personal pronouns other than my special 'they'.  (All this because I can't
; be bothered now to set up a special default type...) 

basic_nom_synsem := lex_synsem & 
  [ LOCAL [ STEMHEAD nstem,
            CAT.HEAD nominal,
	    CONT nom-obj ] ].

nominal_synsem := basic_nom_synsem &
  [ LOCAL.CAT.HEAD.POSS - ].

xpro_synsem :< nominal_synsem.
xref_synsem :< nominal_synsem.

pronominal_synsem := xpro_synsem &
  [ LOCAL [ CAT [ HEAD noun*,
		  VAL.SUBJ < > ],
	    CONT.H-CONS <! !> ] ].

nonpronominal_synsem :< xpro_synsem.

; AAC - added following types for verbal_gerund, poss_clitic etc

nonpro_nomod_synsem := nomod_synsem & nonpronominal_synsem.

nomod_onearg_synsem := nomod_synsem & one_arg.

nonpro_nomod_onearg_synsem := nonpro_nomod_synsem & nomod_onearg_synsem.

ref_synsem := xref_synsem &
  [ LOCAL [ CONT [ INDEX #inst & ref-ind,
		   LISZT.LIST < basic_nom_rel & #key & 
				    [ INST #inst ], ... >,
		   KEY #key ] ] ].

non_ref_synsem := xref_synsem  & nomod_synsem & zero_arg &
  [ LOCAL.CAT.VAL [ SPR < >,
		    COMPS < > ] ].

ref_pro_synsem := pronominal_synsem & ref_synsem & nomod_synsem.
non_ref_pro_synsem := pronominal_synsem & non_ref_synsem &
  [ LOCAL [ AGR #agr,
	    CONT.INDEX #agr ] ].

noun_synsem := nonpronominal_synsem & ref_synsem &
  [ LOCAL [ AGR #agr,
	    CAT.HEAD noun*,
	    CONT.INDEX #agr ] ].

;;
;; Common nouns
;;


; The specifier more generally will need to include the H-STORE of its N-bar
; in the list of candidates for its restrictor, in addition to the handle of
; the N-bar itself, but we leave this for later.  It is not clear how we
; lexically specify picking up this H-STORE of the N-Bar, since we are not
; lexically amalgamating the H-STOREs of complements, and even worse, we
; can't do it for modifiers since they are not visible to the noun at all.

common_noun_synsem := noun_synsem &
  [ LOCAL [ ARG-S < #spr . #comps >,
	    CAT.VAL [ SPR < #spr & synsem &
			    [ LOCAL local &
				    [ CAT [ HEAD det,
					    VAL [ SUBJ < >,
						  SPR *olist*,
						  COMPS *olist* ] ],
				      CONT [ KEY [ BV #index,
						   RESTR #ltop ] ] ],
			      OPT - ] >,
		      COMPS #comps ],
	    CONT [ TOP #ltop,
		   INDEX #index ] ] ].

common_noun_nocomp_synsem := common_noun_synsem & one_arg &
  [ LOCAL.CAT.VAL.COMPS < > ].

noun_nocomp_synsem := common_noun_nocomp_synsem & nonpro_nomod_onearg_synsem.

noun_nocomp_mod_synsem := common_noun_nocomp_synsem & temp_mod_synsem &
  [ LOCAL.CONT.LISZT <! relation !> ].

common_noun_ppcomp_synsem := common_noun_synsem & two_arg &
  [ LOCAL [ CAT.VAL.COMPS < [ LOCAL local &
				    [ CAT [ HEAD prep & [ PRD - ],
					    VAL.COMPS *olist* ],
				      CONT.KEY #ckey & 
					  [ PREP #index ] ] ] >,
	    CONT [ KEY.NPREP #index,
		   COMPKEY #ckey ] ] ].

noun_ppcomp_synsem := common_noun_ppcomp_synsem & nonpro_nomod_synsem &
  [ LOCAL.CONT.KEY diadic_nom_rel ].

temp_noun_ppcomp_synsem := common_noun_ppcomp_synsem & temp_mod_synsem &
  [ LOCAL [ CAT.VAL [ COMPS < [ LOCAL.CONT.KEY _of_rel,
				OPT + ] >,
		      SPR < [ OPT - ] > ],
	    CONT [ INDEX.DIVISIBLE -,
		   KEY temp_rel ] ] ].

#|
scoping_noun_synsem := common_noun_synsem & basic_scopedarg_synsem &
		       nonpro_nomod_synsem &
  [ LOCAL [ CAT [ VAL [ SPR < [ LOCAL.CONT.TOP #sprhand ] >,
			--KEYCOMP #comp &
			    [ LOCAL.CONT.MESSAGE <! [ HANDEL #mhand,
						      SOA #arg ] !> ] ],
		  --SCOPEDARG #comp & 
			      [ --ARG #arg,
				--OUTSC #sprhand ] ],
	    CONT [ KEY hcomp_nom_rel & [ NOMARG #mhand ],
		   H-CONS *diff-list* &
			  [ LIST #list,
			    LAST #last ],
		   --H-CONS <! scp_pr, scp_pr !> &
		            [ LIST #list,
			      LAST #middle ],
		   --SP-H-CONS [ LIST #middle,
				 LAST #last ],
		   ECONT.H-CONS <! !> ] ] ].
|#


; ERB (14-12-97) It might be cleaner in some sense for pro_ss to have that
; pron_rel as its key and then have this construction and others like it
; take the value of that KEY and put it on their LISZT.  Also, if we
; ever move to lexical amalgamation of relations, the pron_rel should get
; incorporated automatically. ... So I'm going to try to do it that way.

; ERB (14-12-97) We just decided that there shouldn't be a pron_rel here.
; The feature PRONTYPE is enough to distinguish the instance introduced
; by the pro_ss as one that doesn't have to be bound.  This move is supposed
; to make the DRT people happy because that way we don't have to give
; the pronoun a handle nor make it the top-h.

; ERB (21-01-98) The pro_ss should be unslashed.

;; a way to meet

scoping_noun_synsem := common_noun_synsem & nonpro_nomod_synsem & two_arg &
  [ LOCAL [ CAT.VAL.--KEYCOMP [ LOCAL.CONT [ TOP #chand,
					     MESSAGE <! [ HANDEL #mhand,
							  SOA #chand ] !> ] ],
	    CONT.KEY hcomp_nom_rel & [ NOMARG #mhand ] ] ].
		   
common_noun_vpcomp_synsem := scoping_noun_synsem &
  [ LOCAL [ CAT.VAL [ --KEYCOMP #comp,
		      COMPS < #comp & @vp($vform=inf) & 
			      [ LOCAL [ CAT.VAL.SUBJ 
						< pro_ss &
						  [ LOCAL.CONT.INDEX #inst,
						    NON-LOCAL.SLASH 0-dlist ] >,
					CONT [ MESSAGE <! hypo_rel !> ] ],
				OPT - ] > ],
	    CONT [ TOP-H #toph,
		   LISZT <! relation, 
			  pron_rel &
			  [ HANDEL #toph,
			    INST #inst &
				   [ PRONTYPE zero_pron ] ] !> ] ] ].

common_noun_cpcomp_synsem := scoping_noun_synsem &
  [ LOCAL [ CAT.VAL [ --KEYCOMP #comp,
		      COMPS < #comp & @cp($vform=fin) & 
			      [ LOCAL.CAT.HEAD comp & strict_head,
				OPT - ] > ],
	    CONT.LISZT <! relation !> ] ].

mass_noun_synsem := noun_nocomp_synsem &
  [ LOCAL.CONT [ INDEX [ PNG png & [ PN 3sg* ],
			 DIVISIBLE + ],
		 LISZT <! relation !> ] ].

; One of the relations in LISZT is the support relation nominalize_rel 
; which is a subtype of nom_rel, but also introduces the NOMARG attribute 
; for the handle of the verbal relation.  The other rel is the verbal relation.

deverbal_noun_synsem := common_noun_synsem & nonpro_nomod_synsem &
  [ LOCAL.CONT [ LISZT <! nominalize_rel & [ HANDEL #hand ],
			  relation & #altkey & [ HANDEL #hand ] !>,
		 ALTKEY #altkey ] ].

deverbal_intr_noun_synsem := deverbal_noun_synsem & noun_nocomp_synsem.

deverbal_trans_noun_synsem := deverbal_noun_synsem & noun_ppcomp_synsem &
  [ LOCAL.CAT.VAL.COMPS.FIRST.OPT + ].

deverbal_mass_noun_synsem := deverbal_noun_synsem & nonpro_nomod_onearg_synsem &
  [ LOCAL [ CAT.VAL.COMPS < >,
	    CONT.INDEX [ PNG png & [ PN 3sg* ],
			 DIVISIBLE + ] ] ].

deverbal_mass_noun_ppcomp_synsem := deverbal_noun_synsem & 
				    noun_ppcomp_synsem &
  [ LOCAL.CONT.INDEX [ PNG png & [ PN 3sg* ],
		       DIVISIBLE + ] ].

;; Make adj_noun's be of type pronominal_synsem, to block their appearance
;; as left member of noun-noun compounds.

ref_pro_nomod :< ref_pro_synsem.

adj_noun_synsem := ref_pro_nomod &
  [ LOCAL [ CAT [ VAL.SPR < synsem & [ LOCAL local ],
			    synsem &
			    [ LOCAL local &
				    [ CAT [ HEAD det,
					    VAL [ SUBJ < >,
						  SPR *olist*,
						  COMPS *olist* ] ],
				      CONT.KEY def_rel &
					  [ BV #index,
					    RESTR #hand ] ],
			      OPT - ] > ],
            AGR #index,
	    CONT [ TOP #hand,
		   INDEX #index,
		   KEY nominalize_rel & [ HANDEL #hand,
					  INST #index ],
		   H-STORE <! !> ] ] ].

adj_noun_personal_synsem := adj_noun_synsem &
  [ LOCAL.CONT.INDEX.PNG png & [ PN 3pl* ] ].

adj_noun_abstract_synsem := adj_noun_synsem &
  [ LOCAL [ CAT.VAL.SPR < synsem, synsem & [ LOCAL.CAT.HEAD.POSS - ] >,
	    CONT.INDEX.PNG png & [ PN 3sg* ] ] ].

; PRD feature used as a hack to avoid partitives in noun-noun compounds,
; pending a better analysis.
; The handle of the of-NP should probably be an argument of the part_of relation,
; as the value of a feature SET.  But for now we simply identify the handles of
; the part_of and the of_NP.

partitive_noun_synsem := noun_synsem &
  [ LOCAL [ CAT [ VAL [ SUBJ < >,
			SPR  < [ LOCAL local &
				       [ CAT.VAL [ SPR  *olist*,
						   COMPS *olist* ],
					 CONT [ KEY degree_rel,
						ALTKEY [ HANDEL #hand,
							 ARG #index ] ] ],
				 NON-LOCAL [ QUE 0-dlist,
					     REL 0-dlist ],
				 OPT + ] >, 
			COMPS < [ LOCAL local &
					[ CAT [ HEAD prep & 
						     [ PRD - ],
						VAL.COMPS *olist* ],
					  CONT.KEY #ckey & _of_rel &
					      [ HANDEL #phand, 
						PREP #cind ] ],
				  OPT + ] > ],
		  HEAD [ PRD +,
			 MOD no-mod ] ],
	    CONT [ TOP #hand,
		   INDEX #index,
		   KEY #key,
		   ALTKEY #altkey,
		   LISZT <! part_of_rel & #key & [ HANDEL #phand,
						   INST #index,
						   NPREP #cind ],
			    quant_or_wh_rel & #altkey & [ HANDEL #hand,
							  BV #index,
							  RESTR #phand ] !>,
		   COMPKEY #ckey ] ] ].

basic_intr_noun_word := hcons_amalg_word & affix_bearing &
  [ SYNSEM common_noun_nocomp_synsem &
	   [ LOCAL.CONT.LISZT <! relation !> ] ].

intr_noun_word := basic_intr_noun_word &
  [ SYNSEM noun_nocomp_synsem & 
	   [ LOCAL [ CAT.VAL.SPR < [ LOCAL.CONT.KEY quant_or_wh_rel ] >,
		     CONT.KEY non_temp_nom_rel ] ] ].

intr_temp_noun_word := basic_intr_noun_word & 
  [ SYNSEM noun_nocomp_mod_synsem &
	   [ LOCAL [ CAT.VAL.SPR < [ LOCAL.CONT.KEY quant_or_wh_rel ] >,
		     CONT.KEY temp_rel ] ] ].

irreg_intr_noun_word := basic_intr_noun_word &
  [ SYNSEM noun_nocomp_synsem & 
	   [ LOCAL [ CAT.VAL.SPR < [ LOCAL.CONT.KEY quant_or_wh_rel ] >,
		     CONT.KEY basic_nom_rel ] ] ].

temp_noun_ppcomp_word := norm_word & affix_bearing &
  [ SYNSEM temp_noun_ppcomp_synsem &
	   [ LOCAL.CONT.LISZT <! relation !> ] ].

temp_noun_ppcomp_nomod_word := norm_word & affix_bearing &
  [ SYNSEM common_noun_ppcomp_synsem & nomod_synsem &
	   [ LOCAL [ CAT.VAL.COMPS < [ LOCAL.CONT.KEY _of_rel ] >,
		     CONT.LISZT <! temp_rel !> ] ] ].

noun_ppcomp_word := hcons_amalg_word & affix_bearing &
  [ SYNSEM noun_ppcomp_synsem &
	   [ LOCAL [ CAT.VAL.COMPS.FIRST.OPT +,
		     CONT.LISZT <! relation !> ] ] ].

noun_ppof_word := noun_ppcomp_word &
  [ SYNSEM.LOCAL.CONT.COMPKEY _of_rel ].

noun_ppin_word := noun_ppcomp_word &
  [ SYNSEM.LOCAL.CONT.COMPKEY _in_rel ].

noun_vpcomp_word := hcons_amalg_word & affix_bearing &
  [ SYNSEM common_noun_vpcomp_synsem ].

noun_cpcomp_word := hcons_amalg_word & affix_bearing &
  [ SYNSEM common_noun_cpcomp_synsem ].

deverbal_noun_intr_word := hcons_amalg_word & affix_bearing &
  [ SYNSEM deverbal_intr_noun_synsem ].

; For e.g. "meetings", where the singular form is a gerund, which is of type
; word, but we can't yet do plural affixation on words, only on lexemes.
deverbal_noun_intr_plural_word := hcons_amalg_word & non_affix_bearing &
  [ SYNSEM deverbal_intr_noun_synsem & 
	   [ LOCAL.CONT.INDEX.PNG png & [ PN 3pl* ] ] ].

deverbal_noun_trans_word := hcons_amalg_word & affix_bearing &
  [ SYNSEM deverbal_trans_noun_synsem ].

mass_noun_word := hcons_amalg_word & non_affix_bearing &
  [ SYNSEM mass_noun_synsem ].

deverbal_mass_noun_word := hcons_amalg_word & non_affix_bearing &
  [ SYNSEM deverbal_mass_noun_synsem ].

deverbal_mass_noun_ppcomp_word := hcons_amalg_word & non_affix_bearing &
  [ SYNSEM deverbal_mass_noun_ppcomp_synsem ].

plur_noun_word := hcons_amalg_word & non_affix_bearing &
  [ SYNSEM noun_nocomp_synsem &
	   [ LOCAL.CONT [ INDEX.PNG png & [ PN 3pl* ],
			  LISZT <! relation !> ] ] ].

part_noun_word := que_word &
  [ SYNSEM partitive_noun_synsem &
	   [ NON-LOCAL.QUE 0-dlist ] ].

;;
;; Lexical NPs
;;
;;   (proper names, pronouns, names of weekdays, ...)

sat_ref_synsem := ref_synsem &
  [ LOCAL.CONT.H-CONS <! !> ].

np_word := norm_no_affix_word &
  [ SYNSEM sat_ref_synsem &
	 [ LOCAL [ CAT.VAL [ SPR < >,
			     SUBJ < >,
			     COMPS < > ],
		   CONT.H-STORE <! !> ] ] ].


; Proper names should formally introduce an additional relation in the liszt 
; for the implied definite quantifier.  The following can be viewed as an 
; abbreviation, to be expanded unambiguously in post-processing of the
; semantics (which is also where e.g. underspecified quantifier scopes get
; fully specified).

np_synsem := sat_ref_synsem & noun_synsem & nomod_synsem.

np_sing_word := np_word &
  [ SYNSEM np_synsem &
	   [ LOCAL.CONT [ TOP #hand,
			  INDEX.PNG png & [ PN 3sg* ],
			  LISZT <! basic_nom_rel &
				   [ HANDEL #hand ] !> ] ] ].

proper_name_sg := np_sing_word & 
  [ SYNSEM.LOCAL.CONT [ TOP #hand, 
			TOP-H #hand,
			KEY named_rel ] ].

; Lexical NP plurals - maybe only in British English? ("IBM are hiring again.")
;
np_pl_word := np_word &
  [ SYNSEM np_synsem &
	   [ LOCAL.CONT.INDEX.PNG png & [ PN 3pl* ] ] ].

;;; AAC 
;;; ref_pro_synsem & nomod_synsem  had GLB adj_noun_synsem
;;; which isn't compatible with the synsem here
;;; DPF
;;; Have to add vacuous constraint in order to convince TDL to accept this as
;;; a type distinct from NOMOD_SYNSEM&REF_PRO_SYNSEM. 

ref_pro_nomod_not_adjnoun_synsem := ref_pro_nomod & sat_ref_synsem &
  [ LOCAL.CONT.H-STORE <! !> ].

personal_pro := np_word &
  [ SYNSEM ref_pro_nomod_not_adjnoun_synsem &
	   [ LOCAL.CONT [ TOP-H #hand,
			  LISZT <! pron_rel !>,
			  KEY.HANDEL #hand ] ] ].

reflexive_pro := personal_pro &
  [ SYNSEM.LOCAL [ CAT.HEAD.CASE acc,
                   AGR #agr,
		   CONT [ INDEX #agr,
			  KEY refl_pro_rel ] ] ].

reciprocal_pro := np_word &
  [ SYNSEM ref_pro_nomod_not_adjnoun_synsem &
	   [ LOCAL [ CAT.HEAD.CASE acc,
		     AGR #agr,
		     CONT [ TOP-H #hand,
			    INDEX #agr,
			    LISZT <! recip_pro_rel !>,
			    KEY.HANDEL #hand ] ] ] ].

; 'yours'
poss_pro_np := norm_no_affix_word &
  [ SYNSEM nomod_synsem &
	   [ LOCAL [ CAT [ HEAD noun* & 
				[ POSS + ],
                           VAL [ SPR < >,
				 COMPS < > ] ],
                     AGR #index,
		     CONT [ INDEX #index,
			    LISZT <! pron_rel & 
				     [ HANDEL #phand,
				       INST #eind &
					      [ PRONTYPE std_pron ] ],
				     def_rel & #key & 
				     [ HANDEL #hand,
				       BV #index,
				       RESTR #phand ],
				     poss_rel & #ckey & 
				     [ HANDEL #hand,
				       POSSR #eind,
				       POSSD #index ] !>,
			    KEY #key,
			    ALTKEY #ckey,
			    H-STORE <! #hand !>,
			    H-CONS <! !> ] ] ] ].

; Expletive pronouns "there" and "it"
expletive_it_word := nontopkey & non_affix_bearing &
  [ SYNSEM non_ref_pro_synsem &
	   [ LOCAL.CONT [ INDEX it-ind,
			  LISZT <! !>,
			  KEY no_rel ] ] ].

expletive_there_word := nontopkey & non_affix_bearing &
  [ SYNSEM non_ref_pro_synsem &
	   [ LOCAL.CONT [ INDEX there-ind,
			  LISZT <! !>,
			  KEY no_rel ] ] ].

; ERB (31-10-96) A hack:  I want the wh_interrogs to be able to
; get their hands on the which_rel so they can put it on the PARAMS
; list, but QSTORE isn't working yet.  So I am making the QUE value
; of wh_pro_word, wh_adverb_word, and wh_poss_word be the handle of
; the which_rel, so that this gets passed up in such a way that I can see it.

; DPF (14-01-97) To maintain monotonicity, we don't put the handle of the
; WH-operator in H-STORE, but only in QUE, where wh_interrog phrases know
; to look in order to add the handle to their PARAMS list.

; DPF (4-Sept-97) For the moment, add the handle to H-STORE, to get the current
; VM dialogues working, until we can convince our colleagues of the better
; analysis

; who, what

wh_pro_word := que_word &
  [ SYNSEM ref_pro_nomod &
	 [ LOCAL [ CAT.VAL [ SPR < >,
			     COMPS < > ],
                   AGR #index,
                   CONT [ TOP #hand,
			  INDEX #index & [ PNG png & [ PN 3sg* ] ],
			  LISZT <! [ HANDEL #rhand ],
				   which_rel & [ HANDEL #hand,
						 BV #index,
						 RESTR #rhand ] !>,
			  H-STORE <! #hand !> ] ],
	   NON-LOCAL.QUE 1-dlist &
		         [ LIST < #hand > ] ] ].

rel_pro_word := rel_word & 
  [ SYNSEM ref_pro_synsem &
	 [ LOCAL [ CAT.VAL [ SPR < >,
			     COMPS < > ],
                   AGR #index,
		   CONT [ TOP #hand,
			  LISZT <! [ HANDEL #hand,
				     INST #index ] !>,
			  H-STORE <! !>] ],
	   NON-LOCAL.REL 1-dlist &
		         [ LIST < #index > ] ] ].

generic_pro_word := que_word &
  [ SYNSEM np_synsem &
	   [ LOCAL [ CAT.VAL [ SPR < >,
			       COMPS < > ],
		     CONT [ TOP #dethand,
			    LISZT <! reg_nom_rel, #altkey & quant_rel !>,
			    KEY [ HANDEL #hand,
				  INST #inst & [ PNG png & [ PN 3sg* ] ] ],
			    ALTKEY #altkey & 
				   [ HANDEL #dethand,
				     BV #inst,
				     RESTR #hand ],
			    H-STORE <! #dethand !> ] ],
	     NON-LOCAL.QUE 0-dlist ] ].

deictic_pro_word := norm_no_affix_word &
  [ SYNSEM ref_pro_synsem &
	   [ LOCAL [ CAT.VAL [ SPR < >,
			       COMPS < > ],
		     CONT [ TOP #dhand,
			    LISZT <! reg_nom_rel, 
				     demonstrative_rel & #altkey &
				     [ HANDEL #dhand,
				       BV #ind,
				       RESTR #hand ] !>,
			    H-STORE <! #dhand !>,
			    KEY [ HANDEL #hand,
				  INST #ind ],
			    ALTKEY #altkey ] ] ] ].

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Synsems for Auxiliary verb lexical rules
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; ERB (05-10-97) Making this specific to question auxes.  See notes near sai
; in syntax.tdl.

sai_synsem := lex_synsem &
  [ LOCAL [ CAT [ HEAD verb* & [ INV +,
				 AUX +* ],
		  VAL [ SUBJ < >,
			COMPS #comps & < [ NON-LOCAL.SLASH 0-dlist ], ... > ],
		  MC + ],
	    CONT mrs &
		[ MESSAGE <! int_rel !> ],
	    ARG-S #comps ] ].

tag_synsem := lex_synsem &
  [ LOCAL [ CAT [ HEAD verb &
		       [ AUX -,
			 INV -,
			 TENSE #tense,
			 MOD intersective_mod &
			     [ CAT [ HEAD verb &
					  [ VFORM fin,
					    TENSE #tense ],
				     VAL [ SUBJ < >,
					   COMPS *olist* ],
				     MC + ],
			       AGR #agr &
				   [ PNG png & [ GEN strict_gen,
						 PN strict_pn ] ],
			       CONT [ TOP #hand,
				      INDEX #ind,
				      KEY #key,
				      MESSAGE <! #presup & prpstn_rel &
					       [ SOA #hand ] !> ] ] ],
		  POSTHEAD +,
		  VAL [ SUBJ < >,
			SPR < >,
			COMPS < pronominal_synsem &
				[ OPT -,
				  LOCAL [ AGR #tagagr,
					  CONT.INDEX #agr ] ] > ],
		  
		  MC na ],
	    AGR #tagagr,
	    CONT [ KEY #key,
		   INDEX #ind,
		   MESSAGE <! ne_rel &
			    [ PARAMS <! !> ] !>,
		   LISZT <! !> ],
	    CTXT.PRESUP <! #presup !> ] ].

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; ADJECTIVES
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; (See prep_synsem definition for discussion of ARG attribute.)

; Predicative adjectives introduce an EVENT attribute in a separate support 
; relation, as do predicative PPs (and perhaps also pred. nominals, someday).

; Assume that if adjectives have a specifier, it will be either a measure-NP,
; as in "two feet tall', 'a week later"; or a degree_adverb like "very".

; Since most adjectives are underspecified for being predicative, we have to be
; sure that when they act as modifiers, the unexpressed subject's SLASH value 
; gets terminated (given lexical SLASH amalgamation).  We can't just make the
; adjective's SUBJ be 'unexpressed' since it must unify with the real subject
; in a raising construction.  So we identify the SLASH of the MOD value with
; that of the SUBJ - only one of the two will be realized syntactically.

; Most but not all adjectives can be modifiers, so the most basic adj_synsem
; type does not introduce the MOD feature, to allow for adjectives like
; "impossible" as in "it is impossible to find Kim".

basic_adj_synsem := lex_synsem &
  [ LOCAL [ STEMHEAD astem,
	    ARG-S < #spr . < #subj . #comps > >,
            CAT [ HEAD adj*,
		  VAL [ SUBJ < #subj & @nomp() &
			       [ LOCAL.THROLE arg1 ] >,
			SPR < synsem & #spr &
			      [ LOCAL local &
				      [ CAT [ VAL [ SPR *olist*,
						    COMPS *olist* ],
					      MC na ],
					CONT [ TOP #ahand,
					       INDEX #darg,
					       KEY degree_rel ] ],
				OPT + ] >,
			COMPS #comps ] ],
	    CONT [ LISZT.LIST < basic_adj_rel & #key &
				[ HANDEL #ahand,
				  DIM #darg ], ... >,
		   KEY #key ] ] ].

;; We assume for now, counterfactually, that all modifying adjectives are
;; intersective.

;; ERB (03-02-98) Maybe should add MOD.SPR.OPT - to keep adjectives from 
;; modifying partitives.

;; DPF (16-Feb-98) Made SUBJ.INDEX be 'individual' rather than non_expl-ind,
;; to ensure that it gets discourse-bound if the adjective is used in a fragment.

;; DPF (12-Jul-98) Constrain adjectives to only modify nominals with obligatory
;; specifiers (which distinguishes "common" from "proper" nominals).

modifying_adj_synsem := basic_adj_synsem &
  [ LOCAL [ CAT [ HEAD.MOD intersective_mod &
			   [ CAT [ HEAD noun &
					[ POSS - ],
				   VAL [ SPR < synsem & [ OPT - ] >,
					 COMPS *olist* ] ],
			     CONT.INDEX #ind & individual ],
		  VAL.SUBJ < [ LOCAL.CONT.INDEX individual ] > ],
	    CONT [ INDEX #ind & non_expl-ind,
		   KEY adj_rel & [ ARG #ind ] ] ] ].

nomod_adj_synsem := basic_adj_synsem &
  [ LOCAL.CAT.HEAD.MOD no-mod ].

adj_synsem :< modifying_adj_synsem.

nonprd_synsem := modifier_synsem &
  [ LOCAL.CAT.HEAD.PRD - ].

prd_synsem := modifier_synsem &
  [ LOCAL.CAT.HEAD.PRD + ].

intrans_adj_synsem := adj_synsem & two_arg &
  [ LOCAL.CAT [ VAL.COMPS < >,
		POSTHEAD - ] ].

attr_adj_synsem := intrans_adj_synsem & nonprd_synsem.

pred_adj_synsem := adj_synsem & prd_synsem.

intrans_pred_adj_synsem := intrans_adj_synsem & prd_synsem.

;;; We should have a trans_adj_attr_synsem too, for 'easy' and the likes ...

trans_adj_pred_synsem := pred_adj_synsem & three_arg &
  [ LOCAL.CAT.VAL.COMPS < @pp() > ].

; e.g. 'able' - Can't use equi_intrans_lt since it specifies a fig_gnd_rel, 
; which is incompatible with adj_rel.  Also, the subj index of adjectives is 
; bound to the ARG role, not the GND role of equi verbs; the ARG role is used
; to give a uniform treatment of semantics of noun modification for adjectives.

reg_adj_equi_synsem := pred_adj_synsem & inf_intrans_subst &
  [ LOCAL [ CAT.VAL 
	     [ SUBJ < [ LOCAL.CONT.INDEX #subjind ] >,
	       COMPS < [ LOCAL [ CAT.VAL.SUBJ < [ LOCAL local &
						   [ CONT.INDEX #subjind ] ] >,
				 CONT.TOP #hand ],
			 OPT + ], ...> ],
	    CONT.KEY adj_varg_rel &
		     [ ARG #subjind,
		       VARG #hand ] ] ].

scoping_adj_synsem := basic_adj_synsem & prd_synsem &
  [ LOCAL [ CAT.VAL.--KEYCOMP.LOCAL.CONT.TOP #hand,
	    CONT.KEY basic_adj_varg_rel & [ VARG #hand ] ] ].

reg_adj_atrans_synsem := nomod_adj_synsem & scoping_adj_synsem & pp_inf_subst & 
			 four_arg &
  [ LOCAL 
    [ CAT.VAL 
	  [ SUBJ < [ LOCAL.CONT.INDEX it-ind ] >,
	    COMPS < [ LOCAL.CONT.KEY _for_rel & [ HANDEL #ahand,
						  ARG #ind,
						  PREP #expr ],
		      OPT + ],
		    [ LOCAL [ CAT.VAL.SUBJ < [ LOCAL.CONT.INDEX #sind,
					       NON-LOCAL.SLASH 0-dlist ] >,
			      CONT.MESSAGE <! message !> ],
			      
		      OPT - ], ...> ],
      CONT [ TOP-H #toph,
	     INDEX #ind,
	     KEY it_adj_varg_expr_rel &
		   [ HANDEL #ahand,
		     EXPR #expr ],
	     LISZT <! relation, 
		      pron_rel &
		      [ HANDEL #toph,
			INST #sind & [ PRONTYPE zero_pron ] ] !> ] ] ].


reg_adj_cp_synsem := scoping_adj_synsem & nomod_adj_synsem & cp_intrans_subst & 
		     three_arg &
  [ LOCAL.CONT [ KEY adj_varg_rel,
		 LISZT <! relation !> ] ].


reg_adj_atrans_cp_synsem := reg_adj_cp_synsem &
  [ LOCAL.CAT.VAL.SUBJ < [ LOCAL.CONT.INDEX it-ind ] > ].

adj_word := hcons_amalg_word &
 [ SYNSEM adj_synsem &
	  [ LOCAL [ CAT.VAL.SUBJ < [ LOCAL.CONT.INDEX #ind ] >,
		    CONT [ KEY.ARG #ind,
			   LISZT <! adj_rel !> ] ] ] ].

reg_adj_word := adj_word & affix_bearing.

; Make these [POSTHEAD -] to prevent them from being postnominal modifiers
reg_intrans_adj := reg_adj_word & 
  [ SYNSEM adj_synsem & modifier_synsem & two_arg &
	   [ LOCAL.CAT [ VAL.COMPS < >,
			 POSTHEAD - ] ] ].

attr_intrans_adj := reg_adj_word &
  [ SYNSEM attr_adj_synsem ].

pred_intrans_adj := reg_intrans_adj &
  [ SYSNEM pred_adj_synsem ].

intrans_adj_oddsem := norm_no_affix_word &
  [ SYNSEM intrans_adj_synsem ].

;; doctor's appointment
;;; AAC - changed SYNSEM LOCAL CONT LISZT FIRST INST to ARG
compound_adj_word := intrans_adj_oddsem &
  [ SYNSEM attr_adj_synsem &
	 [ LOCAL 
	   [ CAT.HEAD.MOD.CONT [ TOP #hand,
				 INDEX #nind ],
	     CONT [ TOP #hand,
		    LISZT <! relation & [ ARG #aind ],
			     unspec_rel & [ HANDEL #hand,
					    HINST #nind,
					    NHINST #aind ] !> ] ] ] ].

;; {OPT +] is on reg_trans_adj and not on trans_adj_synsem because the 
;; comparison_lr uses trans_adj_synsem and requires OPT -. Same for semantics.

reg_trans_adj := reg_adj_word &
  [ SYNSEM trans_adj_pred_synsem &
	   [ LOCAL [ CAT.VAL.COMPS < [ LOCAL.CONT.KEY.ARG #index ,
				       OPT +] >, 
		     CONT.LISZT <! [ PREPARG #index ] !> ] ] ].

; These 'irregular' types are for multi-word adjectives, which cannot
; be affix-bearing under the current regime.  They should be eliminated
; once we do better with multi-words.

irreg_adj_word := adj_word & non_affix_bearing.

irreg_attr_adj := irreg_adj_word &
  [ SYNSEM attr_adj_synsem &
	  [ LOCAL [ CAT.VAL.SUBJ 
			     < [ LOCAL.CONT [ TOP #hand,
					      INDEX #ind & non_expl-ind ] ] >,
		    CONT.KEY [ HANDEL #hand,
			       ARG #ind ] ] ] ].

irreg_pred_intrans_adj := irreg_adj_word &
  [ SYNSEM intrans_pred_adj_synsem &
	  [ LOCAL [ CAT [ HEAD.PRD +,
			  VAL.SUBJ
			    < [ LOCAL.CONT [ TOP #hand,
					     INDEX #ind & non_expl-ind ] ] > ],
		    CONT.KEY [ HANDEL #hand,
			       ARG #ind ] ] ] ].

irreg_trans_adj := irreg_adj_word &
  [ SYNSEM trans_adj_pred_synsem &
	   [ LOCAL [ CAT.VAL.COMPS < [ LOCAL.CONT.KEY.ARG #index,
				       OPT + ] >,
		     CONT.LISZT <! [ PREPARG #index ] !> ] ] ].

reg_adj_equi_word := norm_word & affix_bearing &
  [ SYNSEM reg_adj_equi_synsem &
	   [ LOCAL.CONT.LISZT <! adj_rel !> ] ].

reg_adj_atrans_word := hcons_amalg_word & affix_bearing &
  [ SYNSEM reg_adj_atrans_synsem ].

reg_adj_atrans_cp_word := hcons_amalg_word & affix_bearing &
  [ SYNSEM reg_adj_atrans_cp_synsem ].

reg_adj_cp_word := hcons_amalg_word & affix_bearing &
  [ SYNSEM reg_adj_cp_synsem &
	   [ LOCAL.CAT.VAL.SUBJ < [ LOCAL.CONT.INDEX ref-ind ] > ] ].

ordinal_adj_word := reg_intrans_adj &
  [ SYNSEM.LOCAL [ CAT.HEAD.PRD -,
		   CONT.KEY ord_rel ] ].

; How is Sandy?  How does Tuesday look?
; We adopt the following second-order quantification semantics for these:
;    which (p, property(p), look_seem(proposition_to_property(adj(x),p)))
; where we exploit a type-shifting relation to change the proposition "adj(x)"
; into the associated property "the set of entities of which adj(x) is true",
; so the "which" operator can quantify over that property.

wh_adjective_word := nonconj & non_affix_bearing & mcna & nonslash & nonrel &
		     nonmsg &
  [ SYNSEM modifying_adj_synsem &
      [ LOCAL [ CAT [ POSTHEAD +,
		      HEAD.MOD.CONT.H-STORE [ LIST #hslist,
					      LAST #hslast ],
		      VAL [ SUBJ < [ LOCAL.CONT.INDEX #ind ] >,
			    SPR < unexpressed >,
			    COMPS < > ] ],
		CONT [ TOP #prhand,
		       INDEX #ind,
		       LISZT <! adj_rel & [ HANDEL #ahand,
					    ARG #ind ],
			        which_rel & [ HANDEL #whhand,
					      BV #pind,
					      RESTR #hand ],
			        property_rel & [ HANDEL #hand,
						 INST #pind ],
			        prpstn_to_prop_rel & [ HANDEL #prhand,
						       PRPSTN #ahand,
						       PROP #pind ] !>,
		       H-STORE [ LIST < #whhand . #hslist >,
				 LAST #hslast ] ] ],
	NON-LOCAL.QUE 1-dlist &
	              [ LIST < #whhand > ] ] ].

; two-hour meeting, two-foot tall
measure_adj_attr_synsem := one_arg &
  [ LOCAL [ CAT [ HEAD adj* &
		       [ PRD -,
			 MOD intersective_mod &
			     [ CAT [ HEAD noun &
					  [ POSS - ],
				     VAL [ SPR < synsem & [ OPT - ] >,
					   COMPS *olist* ] ],
			       CONT.INDEX #ind ] ],
		  VAL [ SUBJ < >,
			SPR < synsem & #spr &
			      [ LOCAL local &
				      [ CAT [ VAL [ SPR *olist*,
						    COMPS *olist* ],
					      MC na ],
					CONT.KEY const_rel & 
					    [ HANDEL #hand,
					      ARG #inst ] ],
				OPT - ] >,
			COMPS < > ] ],
		  
	    CONT mrs &
		 [ LISZT <! meas_adj_rel & #key &
			    [ HANDEL #hand,
			      ARG #ind,
			      UNIT #inst ],
			    nom_rel & #altkey & [ HANDEL #hand,
						  INST #inst ] !>,
		   KEY #key,
		   ALTKEY #altkey ],
	    ARG-S < #spr > ] ].

meas_adj_word := norm_no_affix_word &
 [ SYNSEM measure_adj_attr_synsem ].

;; Titles like 'mister', 'professor' which modify proper names

title_synsem := modifier_synsem & 
  [ LOCAL [ CAT [ HEAD noun &
		       [ MOD intersective_mod &
			     [ CAT [ HEAD noun &
					  [ POSS - ],
				     VAL [ SPR *olist*,
					   COMPS *olist* ] ],
			       CONT [ TOP #hand,
				      INDEX #ind,
				      KEY named_rel ] ] ],
		  VAL [ SUBJ < >,
			SPR < >,
			COMPS < > ] ],
	    CONT [ TOP #hand,
		   INDEX #ind,
		   LISZT <! title_rel & #key & [ INST #ind ] !>,
		   KEY #key ] ] ].

title_word := norm_no_affix_word &
  [ SYNSEM title_synsem &
	   [ LOCAL.CAT.POSTHEAD - ] ].

post_title_word := norm_no_affix_word &
  [ SYNSEM title_synsem &
	   [ LOCAL.CAT.POSTHEAD + ] ].

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; PREPOSITIONS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Most prepositions can be modifiers.  If they act as a modifier, we'll assume
; they have no subject (leaving for some distinct analysis Carl's "A unicorn
; at the helm, the ship sailed into the horse latitudes."  This lets us use a
; single attribute, ARG, for the index of the phrase modified, or for the
; index of the subject of the PP, in a predicative construction.

; Prepositions also have a distinguished role PREP which has as value the
; index of the object of the preposition.  We could introduce distinct role
; names for each preposition (e.g. "ON" for on_rel, "IN" for in-rel) but this
; would complicate the definition of the prep_synsem type, since it needs to
; know the role name to which it assigns the object's index.

; An EVENT attribute is needed for PPs (and other substs used predicatively)
; occurring as complements of the copula as in "the meeting is on Tuesday",
; but on this analysis not postnominally.  This EVENT role is introduced in a
; separate support_rel, supplied by the copula.

; Prepositions, like adjectives and participial verbs, can have either
; predicative or nonpredicative synsems, so each ordinary preposition
; (actually the PP headed by the P) can unify with either a pred. or non-pred.
; constraint, which resolves the underspecification.  One assumption here is 
; that there are no contexts which are underspecified for the PRD feature 
; for PPs.

; N.B. The LISZT value of basic_prep_synsem cannot be a singleton list, since
; adverbs like "when" inherit this synsem, and add additional rels lexically.

; Here we only amalgamate non-local features from the complements, not the
; subject.  This is so we don't get two identical gaps in an example like "Who
; does kim think is under the bed?".  On the other hand, binding theory
; suggests that the subjects of prepositions really are on the ARG-S list.


basic_prep_synsem := lex_synsem & 
  [ LOCAL [ CAT.HEAD n_or_p,
	    CONT.LISZT.LIST < norm_relation, ... > ] ].

prep_synsem_unspec_subj := basic_prep_synsem &
  [ LOCAL [ CAT [ HEAD prep*,
		  VAL.COMPS < synsem & 
			      [ LOCAL local &
				      [ CONT [ INDEX #objind,
					       KEY #ckey ] ] ], ... >,
		  POSTHEAD + ],
	    CONT [ LISZT.LIST < #key, ... >,
		   KEY #key & [ PREP #objind ],
		   COMPKEY #ckey ] ] ].

; For lexical prepositions taking at least one complement
prep_synsem := prep_synsem_unspec_subj & unsat_two_arg_subst.

; For predicative Ps and PPs like "when", which have a (non-expletive) NP subject

prep_p_synsem := basic_prep_synsem &
  [ LOCAL [ CAT.VAL [ SUBJ < @nomp() & #subj &
			     [ LOCAL [ CONT.INDEX #subjind & non_expl,
				       THROLE arg1 ],
			       NON-LOCAL [ SLASH 0-dlist,
					   REL 0-dlist,
					   QUE 0-dlist ] ] >, 
		      COMPS #comps ],
	    CONT.KEY.ARG #subjind,
	    ARG-S < #subj . #comps > ] ].

; Ps and PPs that can be modifiers.
; Block PP modification of infinitival "to" - spurious ambiguity.

basic_mod_n_or_vp_synsem := lex_synsem &
  [ LOCAL [ CAT [ HEAD.MOD intersective_mod & 
			   [ CAT [ HEAD n_or_v & strict_head,
				   VAL [ SPR < synsem >,
					 COMPS *olist* ] ],
			     CONT [ INDEX #ind,
				    MESSAGE #msg ] ],
		  POSTHEAD + ],
	    CONT [ KEY.ARG #ind,
		   INDEX #ind,
		   MESSAGE #msg ] ] ].


mod_n_or_vp_synsem := basic_mod_n_or_vp_synsem &
  [ LOCAL [ CAT.VAL.SPR < synsem & [ LOCAL local &
					   [ CAT [ HEAD adv,
						   VAL [ SPR *olist*,
							 COMPS *olist* ] ],
					     CONT [ TOP #khand,
						    INDEX #darg,
						    KEY degree_rel ] ],
				     NON-LOCAL.QUE 0-dlist,
				     OPT + ] >,
	    CONT.KEY [ HANDEL #khand,
		       DIM #darg ] ] ]. 

prep_p_mod_synsem := prep_p_synsem & mod_n_or_vp_synsem.

prep_prd_or_nonprd_synsem := prep_synsem & prep_p_mod_synsem.

; Strict transitive prepositions which can be either predicative or non-pred:

trans_prep_synsem := prep_prd_or_nonprd_synsem & two_arg &
  [ LOCAL [ CAT.VAL [ SUBJ < [ NON-LOCAL [ SLASH 0-dlist,
					   REL 0-dlist,
					   QUE 0-dlist ] ] > ],
	    CONT.LISZT <! prep_rel !> ] ].

ditrans_prep_synsem := prep_prd_or_nonprd_synsem & three_arg_subst &
  [ LOCAL [ CAT.VAL.COMPS < *top*, *top* >,
	    CONT.LISZT <! prep_rel !> ] ].

basic_lex_pp_synsem := prep_p_synsem &
  [ LOCAL [ CAT.VAL.COMPS < >,
	    CONT [ TOP #hand,
		   LISZT <! #key !>,
		   KEY #key & [ HANDEL #hand ] ] ] ].

lex_pp_synsem := basic_lex_pp_synsem & mod_n_or_vp_synsem &
  [ LOCAL.CAT.HEAD prep* ].

lex_pp_nospec_synsem := basic_lex_pp_synsem & basic_mod_n_or_vp_synsem &
  [ LOCAL.CAT.VAL.SPR < > ].

lex_pp_nomod_synsem := prep_p_synsem & one_arg &
  [ LOCAL [ CAT [ HEAD prep* &
		       [ PRD +,
			 MOD no-mod ],
		  VAL [ SPR < >,
			COMPS < > ] ],
	    CONT [ INDEX #ind,
		   LISZT <! #key !>,
		   KEY #key & [ ARG #ind ] ] ] ].

; Ordinary prepositions:

; Moved [ OPT - ] specification to subtypes, to allow "the day before" where
; the complement is missing.
basic_prep_word := amalg_word &
  [ SYNSEM trans_prep_synsem &
	 [ LOCAL.CAT.VAL.COMPS < @nomp($case=acc) > ] ].

prep_word := basic_prep_word &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < [ LOCAL.CONT.INDEX non_expl-ind ] > ].

reg_prep_word := prep_word &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < [ LOCAL local &
					 [ CONT.KEY non_temp_nom_rel ],
				   OPT - ] > ].

#|
; Used only for "from", presumably as in "from under the table" - ignore for now.
prep_n_or_p_word := amalg_word &
  [ SYNSEM trans_prep_synsem &
	 [ LOCAL [ CAT.VAL.COMPS < synsem &
				   [ LOCAL local &
					   [ CAT [ HEAD n_or_p & strict_head,
						   VAL [ SUBJ *olist*,
							 SPR *olist*,
							 COMPS *olist* ] ],
					     CONT.INDEX non_expl-ind,
					     CONJ cnil ],
				     OPT - ] > ] ] ].
|#

; 'from now on', maybe 'from two to four'
ditrans_prep_word := norm_no_affix_word &
  [ SYNSEM ditrans_prep_synsem &
	 [ LOCAL [ CAT.VAL.COMPS < @nomp($case=acc) & [ OPT - ], 
				   synsem & [ LOCAL local &
						    [ CAT [ HEAD.PRD -,
							    MC na ] ],
					      OPT - ] > ] ] ].

prep_cp_word := amalg_word &
  [ SYNSEM trans_prep_synsem &
      [ LOCAL [ CAT.VAL.COMPS < @cp($vform=fin) &
				[ LOCAL [ CAT.HEAD.INV -,
					  CONT.MESSAGE <! propositional_rel !> ],
				  OPT - ] > ] ] ].

; Prepositions that don't modify nominals - e.g, 'until'
prep_no_n_mod_word := prep_word &
  [ SYNSEM.LOCAL.CAT [ HEAD.MOD.CAT.VAL.SUBJ < synsem >,
		       VAL.COMPS < [ OPT - ] > ] ].

; "Case-marking" prepositions, which cannot be modifiers
; and (let's assume) also cannot be modified, so stipulate [ SUBJ < > ].

prep_nosubj_synsem := one_arg &
  [ LOCAL [ ARG-S #comps,
	    CAT [ HEAD prep* & [ PRD -,
				 MOD no-mod ],
		  VAL [ SUBJ < >,
			SPR < >,
			COMPS #comps & < synsem & 
					 [ LOCAL local &
						 [ CONT [ INDEX #ind,
							  KEY #ckey ] ],
					   OPT - ] > ] ],
	    CONT [ LISZT <! !>,
		   KEY.PREP #ind,
		   COMPKEY #ckey ] ] ].

; Removed constraint on [COMPS.FIRST.MOD no-mod] to allow "of the second"
prep_nomod_word := amalg_word &
  [ SYNSEM prep_nosubj_synsem & 
	 [ LOCAL.CAT.VAL.COMPS < @np($case=acc) > ] ].

; nominal "of"
prep_nomod_empty_word := prep_nomod_word &
  [ SYNSEM.LOCAL.CONT [ INDEX #ind,
			KEY.PREP #ind ] ].

; Lexical PPs

; 'away'
pp_word := norm_no_affix_word &
  [ SYNSEM lex_pp_synsem ].

; 'tomorrow'
pp_or_nom_word := norm_no_affix_word &
  [ SYNSEM lex_pp_nospec_synsem ].

pp_nomod_word := norm_no_affix_word &
  [ SYNSEM lex_pp_nomod_synsem ].

; Prepositions with lexically idiosyncratic complements:

prep_idiom_word := amalg_word &
  [ SYNSEM trans_prep_synsem &
	   [ LOCAL [ CAT.VAL.COMPS < [ OPT - ], ... > ] ] ].

prep_idiom_pp_word := prep_idiom_word &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < @pp() > ].

prep_idiom_nomod_word := amalg_word &
  [ SYNSEM prep_nosubj_synsem ].

;; Temporal prepositions:

; Special type for "at" taking hours
;    'at five oclock'
;    'at fifteen to six'

at_prep_word := amalg_word &
  [ SYNSEM trans_prep_synsem &
	 [ LOCAL [ CAT.VAL.COMPS
		       < @nomp($case=acc) & 
			 [ LOCAL.CONT.KEY hour_rel,
			   OPT - ], ...> ] ] ].

; Prepositions like "before" that take a prep_noun like "now, then".
;   'before now', 'since then'

before_prep_word := norm_no_affix_word &
  [ SYNSEM trans_prep_synsem &
	 [ LOCAL [ CAT.VAL.COMPS 
		 < [ LOCAL local &
			   [ CAT [ HEAD n_or_p & [ PRD - ],
				   VAL [ SPR *olist*,
					 COMPS *olist* ],
				   MC na ],
			     CONT.KEY temp_loc_rel ],
		     OPT - ], ... > ] ] ].

; "ten minutes to three" - "to" as head
; Use POSTHEAD to allow "half past three" and "three thirty" but block
;      "?thirty past three" and "*three half"
;; DPF (12-Jul-98) The specifier on hour_prep_words has to be [ OPT + ] in order
;; to block prenominal adjectives from attaching, since they distinguish proper
;; from common nouns by the optionality (or absence) of the specifier.  This 
;; distinction doesn't seem to work well here, but it's the only case, so perhaps
;; the analysis of "ten after three" should be reconsidered.

hour_prep_word := norm_no_affix_word &
  [ SYNSEM nomod_synsem &
	 [ LOCAL [ CAT [ HEAD noun* &
			      [ POSS - ],
			 VAL [ SPR < synsem & @nomp($case=acc) &
				     [ LOCAL [ CAT.POSTHEAD -,
					       CONT [ INDEX #minute,
						      KEY minute_rel ] ],
				       OPT + ] >,
			       COMPS < synsem & @nomp($case=acc) & 
				       [ LOCAL.CONT 
						    [ INDEX #hour,
						      KEY numbered_hour_rel &
							    #ckey ],
					 OPT - ] > ] ],
		   CONT nom-obj &
		       [ TOP #hand,
			 INDEX #ind & [ PNG png & [ PN 3sg* ] ],
			 LISZT <! #key !>,
			 KEY #key & hour_prep_rel &
				    [ HANDEL #hand,
				      INST #ind,
				      MINUTE-IND #minute,
				      HOUR-IND #hour ],
			 COMPKEY #ckey ] ] ] ].

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; ADVERBS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Adverbs modify VPs and APs either pre-head or post-head (or both).
; Sentence-initial adverbials are treated as extractions of post-VP modifiers,
; unless the adverbial is a pre-head modifiier. Otherwise, it would be hard to
; block post-S attachment along with post-VP attachment, which would give 
; spurious ambiguity.

basic_adverb_synsem := zero_arg &
  [ LOCAL [ CAT [ HEAD adv &
		       [ PRD -,
			 MOD local &
			     [ CAT.HEAD adverbee & strict_head,
			       CONT [ INDEX #vevent & individual,
				      MESSAGE #msg ] ] ],
		  VAL [ SUBJ < >,
			COMPS < > ] ],
	    CONT [ INDEX #vevent,
		   LISZT <! #key !>,
		   KEY #key & adv_rel,
		   --TOPKEY #key,
		   MESSAGE #msg ] ] ].

basic_scopal_adverb_synsem := basic_adverb_synsem &
  [ LOCAL [ CAT.HEAD.MOD scopal_mod &
			 [ CONT.TOP #mhand ],
	    CONT.KEY.ARG #mhand ] ].

basic_int_adverb_synsem := basic_adverb_synsem &
  [ LOCAL [ CAT.HEAD.MOD intersective_mod &
			 [ CONT.INDEX #vevent ],	
	    CONT [ INDEX #vevent,
		   KEY.ARG #vevent ] ] ].

spec_adverb_synsem := basic_adverb_synsem & 
  [ LOCAL [ CAT.VAL.SPR < synsem & 
			  [ LOCAL local &
				  [ CAT [ HEAD adv, 
					  VAL [ SUBJ < >,
						SPR *olist*,
						COMPS *olist* ],
					  MC na ],
				    CONT [ TOP #hand,
					   INDEX #ind,
					   KEY degree_rel ] ] ] >,
	    CONT [ INDEX #ind,
		   KEY [ HANDEL #hand ] ] ] ].

scopal_spec_adverb_synsem := basic_scopal_adverb_synsem & spec_adverb_synsem.
intersect_spec_adverb_synsem := basic_int_adverb_synsem & spec_adverb_synsem.

; VP, PP, AP
scopal_adverb_synsem := scopal_spec_adverb_synsem &
  [ LOCAL.CAT.HEAD.MOD.CAT [ VAL [ SUBJ < synsem >,
				   COMPS *olist* ],
			     MC na ] ].
intersect_adverb_synsem := intersect_spec_adverb_synsem &
  [ LOCAL.CAT.HEAD.MOD.CAT [ VAL [ SUBJ < synsem >,
				   COMPS *olist* ],
			     MC na ] ].

; VP only
; Block adj modifiee to avoid spurious parse for "almost empty"

scopal_vp_adverb_synsem := scopal_spec_adverb_synsem &
  [ LOCAL.CAT.HEAD.MOD.CAT [ HEAD v_or_g & strict_head,
			     VAL [ SUBJ < synsem >,
				   COMPS *olist* ],
			     MC na ] ].

intersect_vp_adverb_synsem := intersect_spec_adverb_synsem &
  [ LOCAL.CAT.HEAD.MOD.CAT [ HEAD v_or_g & strict_head,
			     VAL [ SUBJ < synsem >,
				   COMPS *olist* ],
			     MC na ] ].

; S or VP (for pre-head scopal adverbs only)
scopal_s_or_vp_adverb_synsem := scopal_spec_adverb_synsem &
  [ LOCAL.CAT.HEAD.MOD.CAT [ HEAD adverbee & strict_head,
			     VAL.COMPS *olist* ] ].

; S or VP (for pre-head intersective adverbs only) 
intersect_s_or_vp_adverb_synsem := intersect_spec_adverb_synsem &
  [ LOCAL.CAT.HEAD.MOD.CAT [ HEAD adverbee & strict_head,
			     VAL.COMPS *olist* ] ].

; For adverbs like "maybe" which take no degree specifier
scopal_s_or_vp_adverb_nospec_synsem := basic_scopal_adverb_synsem &
  [ LOCAL.CAT [ VAL.SPR < >,
		HEAD.MOD.CAT [ HEAD adverbee & strict_head,
			       VAL.COMPS *olist* ] ] ].

intersect_s_or_vp_adverb_nospec_synsem := basic_int_adverb_synsem &
  [ LOCAL.CAT [ VAL.SPR < >,
		HEAD.MOD.CAT [ HEAD adverbee & strict_head,
			       VAL.COMPS *olist* ] ] ].

adverb_word := norm_mod_no_affix_word &
  [ SYNSEM scopal_adverb_synsem & 
	   [ LOCAL.CAT.HEAD.MOD.CAT.HEAD v_or_g_or_a & strict_head ] ].
    
int_adverb_word := norm_mod_no_affix_word &
  [ SYNSEM intersect_adverb_synsem &
	   [ LOCAL.CAT.HEAD.MOD.CAT.HEAD v_or_g_or_a & strict_head ] ].
    
; 'back' of 'back on the table'
int_pp_adverb_word := norm_mod_no_affix_word &
  [ SYNSEM intersect_adverb_synsem &
	   [ LOCAL.CAT [ HEAD.MOD.CAT.HEAD prep & strict_head,
			 POSTHEAD - ] ] ].
    
adv_pre_word := norm_mod_no_affix_word &
  [ SYNSEM scopal_s_or_vp_adverb_synsem &
	   [ LOCAL.CAT.POSTHEAD - ] ].
    
int_adv_pre_word := norm_mod_no_affix_word & 
  [ SYNSEM intersect_s_or_vp_adverb_synsem &
	   [ LOCAL.CAT.POSTHEAD - ] ].
    
adv_pre_word_nospec := norm_mod_no_affix_word &
  [ SYNSEM scopal_s_or_vp_adverb_nospec_synsem &
	   [ LOCAL.CAT.POSTHEAD - ] ].
    
int_adv_pre_word_nospec := norm_mod_no_affix_word & 
  [ SYNSEM intersect_s_or_vp_adverb_nospec_synsem &
	   [ LOCAL.CAT.POSTHEAD - ] ].
    
adv_post_word := adverb_word & 
  [ SYNSEM.LOCAL.CAT.POSTHEAD + ].

int_adv_post_word := int_adverb_word & 
  [ SYNSEM.LOCAL.CAT.POSTHEAD + ].

vp_adverb_word := norm_mod_no_affix_word &
  [ SYNSEM scopal_vp_adverb_synsem ].
    
int_vp_adverb_word := norm_mod_no_affix_word &
  [ SYNSEM intersect_vp_adverb_synsem ].
    
vp_adv_post_word := vp_adverb_word & 
  [ SYNSEM.LOCAL.CAT.POSTHEAD + ].

int_vp_adv_post_word := int_vp_adverb_word & 
  [ SYNSEM.LOCAL.CAT.POSTHEAD + ].

vp_adv_pre_word := vp_adverb_word & 
  [ SYNSEM.LOCAL.CAT.POSTHEAD - ].

int_vp_adv_pre_word := int_vp_adverb_word & 
  [ SYNSEM.LOCAL.CAT.POSTHEAD - ].

; ERB (31-10-96) See notes near wh_pro_word.
; where, when, how
wh_adverb_word := nonconj & non_affix_bearing & mcna & nonslash & nonrel &
  [ SYNSEM prep_p_mod_synsem & 
      [ LOCAL [ CAT [ POSTHEAD +,
		      VAL.COMPS < >,
		      HEAD prep* &
			       [ PRD -,
				 MOD [ CAT.HEAD v_or_g_or_a & strict_head,
				       CONT.H-STORE [ LIST #hslist,
						      LAST #hslast ] ] ] ],
		CONT [ KEY #key,
		       LISZT <! #key & [ PREP #objind ],
			        which_rel & [ HANDEL #hand,
					      BV #objind,
					      RESTR #restr ],
			        nom_rel & [ HANDEL #restr,
					    INST #objind ] !>,
		       H-STORE [ LIST < #hand . #hslist >,
				 LAST #hslast ] ] ],
	NON-LOCAL.QUE 1-dlist &
	      [ LIST < #hand > ] ] ].
 
rel_adverb_word := rel_word & 
  [ SYNSEM prep_p_mod_synsem & 
      [ LOCAL [ CAT [ HEAD prep*,
		      POSTHEAD +,
		      VAL.COMPS < > ],
		CONT [ KEY #key,
		       LISZT <! #key & [ PREP #objind ],
			        def_rel & [ HANDEL #hand,
					    BV #objind,
					    RESTR #restr ],
			        nom_rel & [ HANDEL #restr,
					    INST #objind ] !>,
		       H-STORE <! #hand !> ] ],
	NON-LOCAL.REL 1-dlist & [ LIST < #objind > ] ] ].


; "on vacation"
pp_idiom_word := norm_no_affix_word &
  [ SYNSEM prep_p_mod_synsem &
      [ LOCAL [ CAT [ HEAD prep*,
		      VAL.COMPS < > ],
		CONT [ TOP #hand,
		       LISZT.LIST < prep_rel & #key & 
				    [ HANDEL #hand ], ... > ,
		       KEY #key ] ] ] ].

comparison_spec_word := norm_no_affix_word &
  [ SYNSEM nomod_synsem &
	  [ LOCAL [ CAT [ HEAD adv,
			  VAL [ COMPS < >,
				SPR < > ] ],
		    CONT [ TOP #hand,
			   INDEX #inst,
			   LISZT <! #key &
				    [ HANDEL #hand,
				      C-INST #inst ] !>,
			   KEY #key ] ] ] ].

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; DETERMINERS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Determiners must have the KEY relation be the quantifier, since nouns
;; select their determiner in part based on the type of the quantifier rel.
;; The basic determiner synsem has a non-null value for its specifier; this is 
;; to account for cases like "nearly all books, only his book, exactly which
;; book, almost every book".  
;;
;; Quantifiers need to accommodate expressions like
;; 'almost every book'.  One might expect to have the degree_rel of 'almost'
;; take the handle of 'every' as its ARG value, but this may interfere with the
;; treatment of scope via H-STORE, since a quantifier always adds its handle
;; to H-STORE, and this handle interacts with other scope constraints.  So
;; we would have to put the handle of 'almost' in H-STORE as well, but only
;; in case 'almost' is a specifier for determiners, not for e.g.'almost ready'.
;; So we do this by adding separate lexical entries for these det-specs.

basic_det_synsem := nomod_synsem &
  [ LOCAL [ CAT [ HEAD det,
		  VAL [ SPR < [ LOCAL local &
				      [ CONT [ TOP #hand,
					       INDEX #darg,
					       KEY degree_rel ] ],
				NON-LOCAL [ QUE 0-dlist,
					    REL 0-dlist ],
				OPT + ] >, 
			COMPS < > ] ],
	    CONT nom-obj &
		[ TOP #hand,
		  INDEX #index,
		  KEY #key & [ BV #index,
			       DIM #darg ],
		  LISZT.LIST < quant_or_wh_rel & #key, ... >,
		  H-CONS <! !> ],
	    ARG-S < > ] ].

det_synsem := basic_det_synsem &
  [ LOCAL.CONT [ LISZT <! quant_or_wh_rel !>,
		 KEY.HANDEL #hand,
		 H-STORE <! #hand !> ] ].

part_det_synsem :< basic_det_synsem.

part_det_synsem_nonwh := part_det_synsem & 
  [ LOCAL.CONT [ KEY.HANDEL #hand,
		 H-STORE <! #hand !> ],
    NON-LOCAL.QUE 0-dlist ].

non_part_basic_det_synsem :< basic_det_synsem.
non_part_det_synsem := non_part_basic_det_synsem & det_synsem.

det_word := que_word &
  [ SYNSEM det_synsem & [ LOCAL.CAT.HEAD.POSS - ] ].

det_word_non_part := que_word &
  [ SYNSEM non_part_det_synsem & 
	   [ LOCAL.CAT.HEAD.POSS - ] ].

det_word_sing := det_word &
  [ SYNSEM.LOCAL.CONT.KEY.BV [ PNG png & [ PN 3sg ],
			       DIVISIBLE - ] ].

det_word_mass := det_word &
  [ SYNSEM.LOCAL.CONT.KEY.BV [ PNG png & [ PN 3sg ],
			       DIVISIBLE + ] ].

det_word_plur := det_word &
  [ SYNSEM.LOCAL.CONT.KEY.BV.PNG png & [ PN 3pl ] ].

det_word_sg_mass := det_word &
  [ SYNSEM.LOCAL.CONT.KEY.BV.PNG png & [ PN 3sg ] ].

pdet_word := que_word &
  [ SYNSEM part_det_synsem_nonwh &
	   [ LOCAL.CONT.LISZT <! quant_or_wh_rel !> ] ].

pdet_word_sing := pdet_word &
  [ SYNSEM.LOCAL.CONT.KEY.BV [ PNG png & [ PN 3sg ],
			       DIVISIBLE - ] ].

pdet_word_mass := pdet_word &
  [ SYNSEM.LOCAL.CONT.KEY.BV [ PNG png & [ PN 3sg ],
			       DIVISIBLE + ] ].

pdet_word_plur := pdet_word &
  [ SYNSEM.LOCAL.CONT.KEY.BV.PNG png & [ PN 3pl ] ].

pdet_word_sg_mass := pdet_word &
  [ SYNSEM.LOCAL.CONT.KEY.BV.PNG png & [ PN 3sg ] ].

; This assumes (falsely) that all plurals are divisible (cf "oats", "clothes")
pdet_word_pl_mass := pdet_word &
  [ SYNSEM.LOCAL.CONT.KEY.BV.DIVISIBLE + ].

pdet_word_wh := que_word &
  [ SYNSEM part_det_synsem & 
	   [ LOCAL [ CAT.HEAD.POSS -,
		     CONT [ LISZT <! quant_or_wh_rel & [ HANDEL #hand ] !>,
			    KEY.HANDEL #khand,
			    H-STORE <! #hand !> ] ],
	     NON-LOCAL.QUE 1-dlist &
		           [ LIST < #khand > ] ] ].

pdet_word_mass_wh := pdet_word_wh &
  [ SYNSEM.LOCAL.CONT.KEY.BV [ PNG png & [ PN 3sg ],
			       DIVISIBLE + ] ].

pdet_word_plur_wh := pdet_word_wh &
  [ SYNSEM.LOCAL.CONT.KEY.BV.PNG png & [ PN 3pl ] ].

pdet_word_one := que_word &
  [ SYNSEM part_det_synsem_nonwh &
	   [ LOCAL.CONT.LISZT <! udef_rel &
			         [ BV #ind & 
				      [ PNG png & [ PN 3sg ],
					DIVISIBLE - ],
				   RESTR #hand ],
			         const_rel &
			         [ HANDEL #hand,
				   ARG #ind,
				   CONST_VALUE "1" ] !> ] ].

;; We make the non-quantifier relation generically pron_rel, and have each
;; individual pronoun simply constrain the INST index of that pron_rel.
;;   This type is used for both WH "whose" and relative "whose", so it leaves 
;; both  QUE  and  REL  values unspecified, but supplies all other defaults.

poss_word := nonconj & non_affix_bearing & nonslash & nonmsg & 
	     mcna &
  [ SYNSEM basic_det_synsem &
	   [ LOCAL [ CAT [ HEAD.POSS +,
			   VAL.SPEC < [ LOCAL.CONT.KEY.HANDEL #hand ] > ],
		     CONT nom-obj &
			  [ TOP-H #toph,
			    INDEX #index,
			    LISZT <! quant_or_wh_rel & #key,
				     pron_rel & #altkey & 
				     [ HANDEL #toph,
				       INST #eind &
					      [ PRONTYPE std_pron ] ],
				     poss_rel & [ HANDEL #hand,
						  POSSR #eind,
						  POSSD #index ] !>,
			    KEY #key,
			    ALTKEY #altkey ] ] ] ].

; ERB (31-10-96) See notes near wh_pro_word.

wh_poss_word := poss_word & nonrel &
  [ SYNSEM [ LOCAL.CONT [ KEY which_rel & [ HANDEL #hand ],
			  H-STORE <! #hand !> ],
	     NON-LOCAL.QUE 1-dlist &
			   [ LIST < #hand > ] ] ].

nonwh_poss_word := poss_word & nonque &
  [ SYNSEM non_part_basic_det_synsem &
	   [ LOCAL.CONT [ TOP #hand,
			  KEY def_rel,
			  H-STORE <! #hand !> ] ] ].

rel_poss_word := nonwh_poss_word &
  [ SYNSEM [ LOCAL.CONT.ALTKEY.INST #index,
	     NON-LOCAL.REL 1-dlist &
			   [ LIST < #index > ] ] ].


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Possessives
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Possessive "'s" takes an NP[-Poss] specifier and projects either an
;; NP[+Poss] phrase (for "the book of Kim's") or a DetP[+Poss] phrase (for
;; "Kim's book").  Either way, the content of the possessive phrase will be a
;; definite possessive quantifier.  The NP[+Poss] things also work pretty well
;; for things like "Kim's is under the desk" if we allow governed NPs to be
;; +Poss.  The tricky thing will be figuring out exactly where `bare
;; possessives' can show up.  Also, we need to add the restriction that the SPR
;; must be non-pronominal.  We cannot simply make the synsem of the SPR be
;; the type nonpronominal, since that NP might be either lexical or phrasal,
;; distinguished by the synsem types lex_synsem and phr_synsem.  So we use
;; the semantic KEY relation to identify nonpronominals.

;; Another question is what do we do with the scope
;; of quantifiers in the possessor?  This entry assumes that they always have
;; narrow scope.  That should be an empirical question, as the saying goes.

poss_clitic := mcna & nonconj & nonmsg & non_affix_bearing &
  [ SYNSEM nomod_synsem &
     [ LOCAL [ ARG-S < #spr >,
	       CAT [ HEAD poss-able &
			  [ POSS + ],
		     VAL [ SPR < #spr & @nomp() &
				 [ LOCAL.CONT [ INDEX #pindex & individual,
						KEY reg_nom_rel,
						H-STORE [ LIST #hslist,
							  LAST #hslast ] ],
				   NON-LOCAL [ SLASH #slash,
					       REL #rel,
					       QUE #que ],
				   OPT - ] >,
			   COMPS < > ] ],
	       CONT [ TOP #hand,
		      INDEX #index,
		      LISZT <! #key & def_rel & [ HANDEL #hand,
						  BV #index,
						  RESTR #rhand ],
			       #ckey & poss_rel & [ HANDEL #rhand,
						    POSSR #pindex,
						    POSSD #index ] !>,
		      COMPKEY #ckey,
		      KEY #key,
		      H-STORE *diff-list* & [ LIST < #hand . #hslist >,
					      LAST #hslast ] ] ],
       NON-LOCAL [ SLASH #slash,
		   REL #rel,
		   QUE #que ] ] ].

;; The possessive "of" takes an NP[+Poss] complement (e.g., "Kim's", "mine")
;; and modifies an N'[-Poss].  Unfortunately, the way the hierarchy of
;; preposition types is built, there wasn't any type this could inherit from.
;; We could probably rearrange things so this inherits some preposition
;; properties, but right now I'm too lazy.  Also, somehow we'll have to make
;; sure that this doesn't modify a pronoun.  The semantic manipulation here is
;; tricky - keep your eyes on the definite quantifier.  This def_rel provided
;; by the apostrophe-s (for its other life as a determiner), is dropped by the
;; possessive-of, analogous to nouns, verbs, and adjectives dropping the
;; semantics of the prepositions that can mark their complements.  This
;; dropping of the relation is effected by having the possessive-of neglect to
;; grab the handle of the def_rel for its complement, but grab instead the
;; handle (and instance variable) of the NP complement of the apostrophe-s.
;; Then the general semantic pruning mechanism will ignore the def_rel, since
;; its handle will not be a value in any other relation.

poss_of := nonque & nonconj & nonslash & nonrel & mcna & non_affix_bearing &
  [ SYNSEM one_arg &
     [ LOCAL 
       [ ARG-S #comps,
	 CAT [ HEAD prep* & 
		    [ PRD -,
		      MOD intersective_mod & 
			  [ CAT [ HEAD noun &
				       [ POSS - ],
				  VAL [ COMPS *olist*,
					SPR < synsem > ],
				  MC na ],
			    CONT [ TOP #hand,
				   INDEX #index,
				   MESSAGE #msg ] ] ],
	       VAL [ SUBJ < >,
		     SPR < >,
		     COMPS #comps & < @nomp() & 
				      [ LOCAL [ CAT.HEAD noun &
							 [ POSS + ],
						CONT.ALTKEY [ HANDEL #hand,
							      POSSD #index ] ],
					OPT - ] > ],
	       POSTHEAD + ],
	 CONT [ TOP #hand,
		INDEX #index,
		LISZT <! !>,
		KEY no_rel,
		MESSAGE #msg ] ] ] ].

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; SUBORDINATING CONJUNCTIONS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; These are not restricted to modifying only main VPs, since e.g. "if" needs
; to take scope over modals as in "I'd be pleased if we made an appointment."
; This lack of constraint means there will be structural ambiguity for 
; if-clauses, but not spurious - get different scopes of "if" and modals.
; But we restrict them to modifying only finite VPs or imperatives.

subconj_synsem := nonprd_synsem & one_arg &
  [ LOCAL [ ARG-S #comps,
	    CAT [ HEAD prep* &
		       [ MOD scopal_mod &
			     [ CAT [ HEAD verb & [ VFORM fin ],
				     VAL [ SUBJ < synsem >,
					   COMPS *olist* ],
				     MC na ],
			       CONT [ TOP #arg1,
				      INDEX #ind,
				      MESSAGE #msg ] ] ],
		  VAL [ SUBJ < >,
			COMPS #comps & 
			     < synsem &
			       [ LOCAL [ CAT [ HEAD verb &
						    [ INV -,
						      VFORM fin ],
					       MC +,
					       VAL [ SUBJ < >,
						     COMPS *olist*,
						     SPR *olist* ] ],
					 CONT [ TOP #arg2,
						KEY #ckey, 
						INDEX event,
					       MESSAGE <! propositional_rel &
							  [ HANDEL #phand,
							    SOA #arg2 ] !> ] ],
				 NON-LOCAL [ SLASH 0-dlist,
					     REL 0-dlist,
					     QUE 0-dlist ],
				 OPT - ] >,
			SPR < > ],
		  POSTHEAD + ],
	    CONT [ INDEX #ind,
		   KEY #key,
		   COMPKEY #ckey,
		   LISZT <! subord_rel & #key &
			    [ MAIN #arg1,
			      SUBORD #phand ] !>,
		   MESSAGE #msg ] ] ].

subconj_word := norm_mod_no_affix_word &
  [ SYNSEM subconj_synsem ].
    
subconj_if_word :< subconj_word.

;  [ SYNSEM.LOCAL.CAT [ HEAD.MOD.CAT.HEAD.MOOD #mood,
;                       VAL.COMPS.FIRST.LOCAL.CAT.HEAD.MOOD #mood ] ].

; "in order to"
subconj_inf_synsem := prd_synsem & 
  [ LOCAL [ CAT [ HEAD prep* &
		       [ MOD scopal_mod &
			     [ CAT [ HEAD verb,
				     VAL [ SUBJ < synsem >,
					   COMPS *olist* ],
				     MC na ],
			       CONT [ TOP #arg1,
				      INDEX #ind,
				      MESSAGE #msg ] ] ],
		  VAL [ SUBJ < >,
			COMPS < @vp($vform=bse) &
				[ LOCAL local &
					[ CAT [ HEAD verb &
						     [ VFORM bse ],
						VAL [ SUBJ < unexpressed >,
						      COMPS *olist*,
						      SPR *olist* ],
						MC na ],
					  CONT [ TOP #arg2,
						 KEY #ckey, 
						 MESSAGE <! !> ] ],
				  NON-LOCAL [ SLASH 0-dlist,
					      REL 0-dlist,
					      QUE 0-dlist ],
				  OPT - ] >,
			SPR < > ],
		  POSTHEAD + ],
	    CONT [ LISZT <! subord_rel & #key &
			    [ MAIN #arg1,
			      SUBORD #arg2 ] !>,
		   INDEX #ind,
		   KEY #key,
		   COMPKEY #ckey,
		   MESSAGE #msg ] ] ].

subconj_inf_word := norm_mod_no_affix_word &
  [ SYNSEM subconj_inf_synsem ].

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Coordinating conjunctions
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; For efficiency, restrict conjunctions to only coordinate phrases which are
; saturated for COMPS.  This falsely excludes "Kim bought and sold a car".

; DPF (25-Apr-98) Removed COMPS..HEAD subst constraint, to allow 
; "your and my offices"

marker_word := conj_word & 
  [ SYNSEM synsem &
     [ LOCAL [ CAT [ HEAD #head,
		     MC #mc,
		     VAL [ SUBJ #subj, 
			   SPR #spr,
			   COMPS < synsem &
				   [ LOCAL local &
					   [ CAT [ HEAD #head,
						   MC #mc,
						   VAL [ SUBJ #subj,
							 SPR #spr,
							 COMPS #comps & 
							      *olist* ] ],
					     CONT [ TOP #hand,
						    MESSAGE #msg,
						    INDEX #index,
						    KEY #key ] ],
				     OPT - ] 
				   . #comps > ] ],
	       CONT [ TOP #hand,
		      MESSAGE #msg,
		      INDEX #index,
		      KEY #key,
		      LISZT <! #altkey & relation !>,
		      ALTKEY #altkey ] ] ] ].

; A coordinating conjunction needs to "prime" the CONJ.HANDELS and
; CONJ.INDICES lists, so that the right side of a binary coordination looks
; like an iterated coordination.

coord_word_complex := marker_word &
  [ SYNSEM.LOCAL [ CAT.VAL.COMPS.FIRST.LOCAL.CONT [ TOP #hand,
						    INDEX #ind ],
		   CONJ complex-conj & [ HANDELS <! #hand !>,
					 INDICES <! #ind !> ] ] ].
coord_word_atomic := marker_word &
  [ SYNSEM.LOCAL.CONJ atomic-conj ].

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; NEG
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; not

; "not" requires its VP complement to be [VFORM non_fin], which is a supersort
; for all non-finite vforms except imp_vform, which is a subsort of bse; the
; other subsort of bse, bse_only, is a subsort of non_fin.  Most verbs with
; base morphology are [VFORM bse], and hence (the VPS they project) can be
; modified by "not", and they can also head imperative clauses, which require
; the head to be [VFORM imp_vform].  Only if modified by "not" will a base
; VP be unable to project an imperative clause; in contrast, "never sleep" is 
; fine as an imperative, since "never" does not further restrict its VP 
; complement leaving it [VFORM bse], which is consistent with the imperative 
; rule.  This fine distinction is due to Rob M.

neg_word := norm_mod_no_affix_word &
  [ SYNSEM nonzero_arg_synsem & 
	 [ LOCAL [ CAT [ HEAD neg &
			      [ MOD scopal_mod &
				    [ CAT [ HEAD verbal & strict_head &
						 [ VFORM non_fin ],
					    VAL [ SUBJ < synsem >,
						  COMPS *olist* ] ],
				      CONT [ TOP #mhand,
					     INDEX #vevent,
					     MESSAGE #msg ] ] ],
			 VAL [ SUBJ < >,
			       COMPS < >,
			       SPR < > ],
			 POSTHEAD - ],
		   CONT [ INDEX #vevent,
			  LISZT <! neg_rel & #key &
				 [ ARG #mhand ] !>,
			  KEY #key,
			  --TOPkey #key,
			  MESSAGE #msg ] ] ] ].

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; COMPLEMENTIZERS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Complementizers except for 'to' are marked [SUBJ < >] which prevents them
; from having PP modifiers.  The POSS feature here is inappropriate, but since
; TDL is not strictly typed, unification would succeed with [ POSS + ] for a
; CP without the specification [ POSS - ] on CPs given below.

; ERB (07-10-96) 'whether' clauses are made with the regular hcomp rule, so
; the polar_q_rel must come from 'whether' itself.  This means that whether
; can't identify its KEY with its COMPKEY.  Also, I made complementizer_word
; inherit from msg_word (see comments near that type).  This has the effect of
; making non_affix_bearing be inherited by this type, instead of the lower
; types.

; ERB (14-12-97) to_c_prop needs to be MC + for infinitival relatives
; (see notes near to and non_wh_rel_cl) so this type can't say MC -.
; There is no convenient supertype to all of the MC - ones, so I'm
; just going to put it in on each for now.

; ERB (14-12-97) Complementizer_word can't be nonmod_local because 
; to_c_nonprop is going to have a non-empty mod value.  Again, For
; now I'm scattering this constraint among the lower types as appropriate.

; ERB (13-01-98) In fact, complementizer_word can't even be MC bool,
; because to_c_nonprop has to be MC na in order to head hcomps that
; serve as modifiers, as in "a teacher to talk to Sandy".

complementizer_word := msg_word & 
  [ SYNSEM.LOCAL local &
		 [ CAT [ HEAD comp &
			      [ POSS -,
				INV - ],
			 VAL.SPR < > ],
		   CONT.LISZT <! !> ] ].

plain_compl_word := complementizer_word &
  [ SYNSEM.LOCAL [ CAT.VAL [ SUBJ < #subj >,
			     COMPS #comps & 
				  < [ LOCAL local &
					    [ CONT [ TOP #hand,
						     INDEX #ind,
						     KEY #ckey ] ],
				      OPT - ], ... > ],
		   CONT [ TOP #hand,
			  INDEX #ind,
			  COMPKEY #ckey ],
		   ARG-S < #subj . #comps > ] ].

; These are the subject-to-object raising complementizers.  We're giving a
; funny three-constituent analysis to CPs: "that [Kim] [walks]" and "for [Kim]
; [to walk]".  One (beneficial) side effect of this is that finite and
; non-finite CPs get a uniform analysis, and we also can do real subject
; extraction without running afoul of the dreaded that-trace filter
; (Perlmutter 1971).  

; We also need another "that", one that combines with an adverbial and an
; S/Adv.  This accounts for why you get preposed modifiers with that clauses
; and not with for/to clauses, and why you don't get the that-t effect when
; you have an adverb in there.  But, that second "that" is going to have to
; bind off a SLASH value, sort of like the tough-movement cases, and that will
; have to wait for lexicalized SLASH passing.

; ERB (14-12-97) See notes at complementizer_word.

two_place_compl_word := complementizer_word & 
  [ SYNSEM basic_two_arg & 
	   [ LOCAL nomod_local &
	   [ ARG-S #comps,
	     CAT [ HEAD [ MOOD #mood,
			  VFORM #vform ],
		   MC -,
		   VAL [ SUBJ < >,
			 COMPS #comps &
			      < synsem & [ NON-LOCAL.SLASH 0-dlist ],
				[ LOCAL local &
					[ CAT [ HEAD verbal &
						     [ MOOD #mood,
						       VFORM #vform ],
						VAL.COMPS *olist* ],
					  CONT [ TOP #hand,
						 KEY #ckey,
						 MESSAGE <! !> ] ],
				  OPT - ] > ] ],
	     CONT [ TOP #hand,
		    KEY #ckey,
		    COMPKEY #ckey,
		    H-STORE <! !>,
		    H-CONS <! !> ] ] ] ].

sor_compl_word := two_place_compl_word &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < @np() & #subj &
				 [ OPT - ],
				 [ LOCAL.CAT.VAL.SUBJ < #subj > ] > ].

that_compl_word := sor_compl_word & 
  [ SYNSEM.LOCAL [ CAT.HEAD.VFORM fin,
		   CONT.MESSAGE <! prpstn_rel !> ] ].

for_compl_word := sor_compl_word & 
  [ SYNSEM.LOCAL [ CAT.HEAD.VFORM inf,
		   CONT.MESSAGE <! hypo_rel !> ] ].

; ERB (13-01-98) to_compl_word says SUBJ < unexpressed >, but I don't
; how that can be, unless the analysis of raising has changed drastically.
; (With it that way, raising is broken).  So I am getting rid of it.

; ERB (19-01-98) SUBJ < unexpressed > was in there because something
; had to take care of giving that subject a SLASH value.  The solution
; we've opted for is this: the subject of to_c_prop is always PRO, and
; the subject of to_c_nonprop is always raised (that is, all
; infinitival tos except those in raising constructions are to_c_prop.
; So there is no constraint on to_compl_word, but to_c_prop says
; SUBJ < pro_ss > and to_c_nonprop says SUBJ canonical_synsem.

; ERB (03-02-98) KEY should be no_rel.  It used to be identified with
; COMPKEY, but that causes at least one problem: to was able to be the
; SPR of the, since the constrains its choice of SPR by a semantic
; constraint on the KEY.

to_compl_word := plain_compl_word &
  [ SYNSEM ssr_two_arg_raising_subst & 
	   [ LOCAL [ CAT [ HEAD [ VFORM inf,
				  PRD - ],
			   VAL [ COMPS < @vp($vform=bse) > ] ],
		     CONT [ KEY no_rel ] ] ] ].

; ERB (14-12-97) Why is the SUBJ here specified as acc?? I'm taking it
; out because that follows now from pro_ss.

; ERB (08-01-98) Presumably that had to do with "for him/*he to sleep..."
; but that's the other to: to_c_nonprop.

; ERB (14-12-97) In order to implement infinitival relatives (I found
; a teacher to talk to Sandy, I found a teacher to talk to), I am
; making to_c_prop MC +.  The reasons for this is that the relevant
; cx (non_wh_rel_cl) needs to be able to take subjh_decl and hcomps
; headed by to_c_prop as its head-dtr, but not an extrasubj phrase.

; ERB (19-01-98) This to has to have a mod value so that it can
; head the infinitival relatives.  Something needs to be said about
; the features mentioned in nomod_local, probably, but I'm not sure
; what yet.  It also needs to be MC na so it can feed extrasubj.

to_compl_prop_word := to_compl_word & 
  [ SYNSEM.LOCAL [ CAT [ HEAD.MOD intersective_mod & @nbar(),
			 VAL.SUBJ < pro_ss >,
			 MC na ],
		   CONT.MESSAGE <! hypo_rel !> ] ].

; ERB (14-12-97) This one will have a non-empty MOD value in order to
; build things like "Kim found a friend to talk to Sandy" where the
; subject of talk has to be bound to friend (unlike in "Kim found a
; friend to talk to" where we're convinced it is discourse bound.)
;
; The semantics are probably not right -- as a place holder in the
; modcont I put a appropriate_rel.  The idea is that "I found a person
; to talk to Sandy" means something like "I found a person who is willing/
; appropriate/suitable to talk to Sandy."  But I don't see how to make
; (something like) the appropriate_rel take the comlement of the to
; as an argument.  There is also the question of whether there should be
; any message associated with this.  One would think not, given that we've
; decided the relevant to is the nonprop one...

; ERB (08-01-98) If we want to use _appropriate_rel it needs to be defined
; first.

; ERB (13-01-98) to_compl_nonprop_word must be MC na if it is
; to head hcomps that serve as modifiers as in "a teacher to talk to Sandy".
;
;_appropriate_rel :< adj_rel.

; ERB (19-01-98) All infinitival relatives are now headed by
; to_c_prop.  To_c_nonprop only appears in raising constructions.
; Accordingly, it has no MOD value, and its subject is constrained
; to be canonical_synsem.  I'm not sure the latter constraint is
; actually doing any work for us, but I believe it to be true.
; It can also now inherit from nomod_local.  The MC value might
; could be changed, as well.

to_compl_nonprop_word := to_compl_word & 
  [ SYNSEM.LOCAL nomod_local &
		 [ CAT [ VAL [ SUBJ < canonical_synsem >,
			       COMPS < [ LOCAL local &
					       [ CONT.TOP #hand ] ] > ],
			 MC na ],
		   CONT [ TOP #hand,
			  MESSAGE <! !> ] ] ].

; ERB (08-10-96) Whether was previously a que_word so that things selecting
; for questions could select by QUE values.  This is clearly a hack, and
; further, one that is no longer necessary now that we have semantic selection.
; I have split the old type whether_compl_word into two types: finite and
; nonfinite.  I have also gotten rid of the feature CMP.  
; As for the semantics, whether contributes a polar_q_rel (see notes near
; polar_q_rel in fundamentals.tdl).  Now, according to Rob, things that
; take complements with message-type semantics usually take the handle of
; those complements as the argument in their KEYs.  However, also according
; to Rob, if we did that here, it would imply that "whether Kim left every
; party" has more readings than "Kim left every party", which doesn't seem
; to be true.  Accordingly, whether will identify its handle with the
; handle of its complement, and take the complement's INDEX as the value
; of the ARG in the polar_q_rel.  Now, if whether further identified its
; INDEX with that one, things would be getting pretty twisty, so whether
; will have its own INDEX of type event.

; ERB (24-10-96) MESSAGE now functions like KEY as a pointer to
; a certain rel on the LISZT.  Both wh and yn questions will have an
; int_rel on their LISZT.  This is actually sewn into the LISZT
; by the constructions.  Whether just carries it in its MESSAGE value
; so that it unifies with the right constructions.  In this way, we
; even kind of get Rob's intuition -- whether doesn't, in a sense,
; have a message, because that message isn't on its LISZT.
; Anyway, all of this makes the polar_q_rel irrelevant, so I am removing
; it.  The hcomp_yn_nr construction will make sure the SOA value
; of the int_rel takes the HANDEL of whether's complement.   I don't
; know what to do about whether's HANDEL, KEY, and EVENT now, so I am 
; leaving them unspecified.

; ERB (14-12-97) See notes at complementizer_word.

whether_compl_word := complementizer_word &
  [ SYNSEM.LOCAL nomod_local &
		 [ CAT.MC -,
		   CONT.MESSAGE <! int_rel & [ PARAMS <! !> ] !> ] ].

whether_compl_word_fin := whether_compl_word & sor_compl_word &
  [ SYNSEM.LOCAL.CAT.HEAD.VFORM fin ].

; ERB (08-10-96) In the older version, I had whether_compl_word_inf 
; selecting for something that was just @vp($vform=inf).  I never
; tested for this, but this probably allowed Sandy knew whether whether
; to leave, etc.  One way to get around this is for whether to
; select for something that is MESSAGE <! !>.  In order to do 
; this, I need to build to CPs that are no_rel, but we want this
; anyway (even though I talked Dan out of it at one point).

whether_compl_word_inf := whether_compl_word & plain_compl_word &
  [ SYNSEM ssr_two_arg_raising_subst &
	   [ LOCAL.CAT [ HEAD.VFORM inf,
			 VAL.COMPS < [ LOCAL.CAT [ HEAD comp &
							[ VFORM inf ],
						   VAL [ COMPS *olist*,
							 SPR *olist* ] ] ] > ]]].
	    
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Imperative words "don't" and "let's"

; ERB (05-10-97) In order to conflate hcomp_root and hcomp_nc into just one
; hcomp, root_marker_words have to identify their value for mc with that of
; their complement.  (Hcomp_root identified MC for mother and non-head
; daughter.)

root_marker_word := nonque & non_affix_bearing & nonrel & nonconj &
  [ SYNSEM synsem &
	 [ LOCAL [ CAT [ HEAD root-marker & [ MOD no-mod,
					      MOOD #mood ],
			 VAL [ SPR < >,
			       COMPS < synsem &
				       [ LOCAL local &
					       [ CAT [ HEAD.MOOD #mood,
						       VAL.COMPS *olist* ],
						 CTXT #ctxt ],
					 NON-LOCAL [ SLASH 0-dlist,
						     QUE 0-dlist,
						     REL 0-dlist ] ] > ] ],
		   CTXT #ctxt ],
	   NON-LOCAL.SLASH 0-dlist ] ].

lex_imperative := root_marker_word &
  [ SYNSEM.LOCAL 
	   [ CAT [ HEAD [ AUX -*,
			  VFORM bse ],
		   VAL 
		    [ SUBJ < >,
		      COMPS < [ LOCAL [ CAT [ HEAD verb &
						   [ VFORM bse ],
					      VAL.SUBJ 
						 < synsem &
						   [ LOCAL local &
							   [ CONT.INDEX #inst ],
						     NON-LOCAL [ SLASH 0-dlist,
								 QUE 0-dlist,
								 REL 0-dlist]] >,
					      MC na ],
					CONT.INDEX #ind ],
				OPT - ] > ],
		   MC + ],
	     AGR #inst,
	     CONT [ TOP-H #hand,
		    INDEX #ind,
		    LISZT.LIST < pron_rel & [ HANDEL #hand,
					      INST #inst &
						 [ PRONTYPE std_pron ] ], ... >,
		    KEY no_rel,
		    MESSAGE <! imp_rel !> ] ] ].

lets_imperative := lex_imperative &
  [ SYNSEM.LOCAL [ CAT.VAL.COMPS < [ LOCAL.CONT.TOP #chand ] >,
		   AGR [ PNG png & [ PN 1pl* ],
			 PRONTYPE std_1pl ],
		   CONT [ TOP #chand,
			  LISZT <! pron_rel !> ] ] ].

dont_imperative := lex_imperative &
  [ SYNSEM.LOCAL [ CAT.VAL.COMPS < [ LOCAL.CONT.TOP #arg ] >,
		   AGR [ PNG png & [ PN 2per ],
			 PRONTYPE std_2 ],
		   CONT [ TOP #neghand,
			  LISZT <! pron_rel, neg_rel &
				 [ HANDEL #neghand,
				   ARG #arg ] !> ] ] ].

;; 09-09-97  Added BV and SCOPE attributes temporarily for VM2, since the
;; whq external relation for how_about is like a quantifier, needing four args.
;; Had to change the relation introduced by "how about" to '_which_rel'
;; rather than '_how_about_rel' because of some property of vitADT.  Similar
;; change made to the 'frag-msg' instance in syntax.tdl.

how_about_word := root_marker_word &
  [ SYNSEM.LOCAL [ CAT [ VAL.COMPS 
			 < [ LOCAL [ CAT [ HEAD subst,
					   VAL [ SPR *olist*,
						 COMPS *olist* ] ],
				     CONT.HANDEL #chand ],
			     OPT - ] >,
			 MC na ],
		   CONT [ TOP-H #toph,
			  TOP #toph,
			  INDEX #ind,
			  KEY #key,
			  LISZT <! relation & #key &
					 [ BV #ind,
					   SCOPE handle ]!>,
			  MESSAGE <! int_rel &
				   [ HANDEL #toph,
				     SOA #chand ] !> ] ] ].

how_about_n_or_p_word := how_about_word &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < [ LOCAL.CAT.HEAD n_or_p ] > ].

how_about_v_word := how_about_word &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < [ LOCAL.CAT [ HEAD verb,
					       MC bool ] ] > ].

; Discourse-related sentential adverbs
;   (e.g. 'then, but')

disc_adv_word := msg_word &
  [ SYNSEM zero_arg &
	   [ LOCAL [ CAT [ HEAD adv &
				[ PRD -,
				  MOD intersective_mod &
				      [ CAT [ HEAD v_or_g_or_a & strict_head,
					      VAL.COMPS *olist* ],
					CONT [ TOP #top,
					       MESSAGE #msg ] ] ],
			   VAL [ SUBJ < >,
				 SPR < >,
				 COMPS < > ] ],
		     CONT [ TOP #top,
			    TOP-H #hand,
			    INDEX disc_frag,
			    KEY #key & excl_rel &
				[ HANDEL #hand ],
			    LISZT <! #key !>,
			    MESSAGE #msg ] ] ] ].

disc_adv_saturated_word := disc_adv_word &
  [ SYNSEM.LOCAL.CAT.HEAD.MOD.CAT.VAL.SUBJ < > ].

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;   Temporal nouns
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Extend to COMPS of temporal nouns the hack blocking extraction of subjects of 
; inverted auxiliaries, which exploits CASE value.
; Block N-N compound of "a two meeting" by stipulating that hour_words are
; PRD +, incompatible with requirement of compound rule.  In contrast, e.g.,
; day_of_week words are unmarked for PRD.
;
; Made CONT.TOP be the handle of the numbered_hour_rel rather than that of
; the implicit def_rel, since hour_words can be modified, as in "two o'clock
; on the sixteenth".  Since the PP unifies its TOP handle with the TOP handle
; of the phrase it modifies, that handle can't be the handle of the quantifier,
; so must be that of the numbered_hour_rel.

hour_word := que_word & nonque &
  [ SYNSEM noun_synsem & nomod_synsem &
	 [ LOCAL [ CAT [ HEAD [ POSS -,
				PRD + ],
			 VAL [ SPR < [ LOCAL local &
					     [ CAT [ HEAD adv,
						     VAL [SPR  *olist*,
							  COMPS *olist* ] ],
					       CONT [ TOP #hand,
						      INDEX #darg,
						      KEY degree_rel ] ],
				       OPT + ] >,
			       COMPS < [ LOCAL local &
					       [ CAT [ HEAD.CASE nom,
						       VAL [ SUBJ < >,
							     COMPS *olist*,
							     SPR *olist* ],
						       POSTHEAD +,
						       MC na ],
						 CONT [ TOP #hand,
							KEY minute_rel &
							    [ INST #minute ] ] ],
					 NON-LOCAL.SLASH 0-dlist,
					 OPT + ],
				       [ LOCAL local &
					       [ CAT [ HEAD.CASE nom,
						       VAL [ SUBJ < >,
							     COMPS *olist*,
							     SPR *olist* ],
						       POSTHEAD +,
						       MC na ],
						 CONT.KEY am_pm_rel &
						     [ HANDEL #hand,
						       INST #ampm ] ],
					 NON-LOCAL.SLASH 0-dlist,
					 OPT + ] > ] ],
		   CONT nom-obj &
		       [ TOP #nhand,
			 INDEX #index,
			 LISZT <! numbered_hour_rel & #key &
				  [ HANDEL #nhand,
				    INST #index,
				    MIN #minute,
				    AM-PM #ampm,
				    DIM #darg ],
				  def_rel &
				  [ HANDEL #hand,
				    BV #index,
				    RESTR #nhand ] !>,
			 KEY #key,
			 H-STORE <! #hand !> ],
		   ARG-S < > ] ] ].

minute_word := np_sing_word &
  [ SYNSEM.LOCAL [ CAT.HEAD.PRD +,
		   CONT.KEY minute_rel ] ].

am_pm_word := np_sing_word &
  [ SYNSEM.LOCAL [ CAT [ HEAD.PRD +,
			 POSTHEAD + ],
		   CONT.KEY am_pm_rel ] ].

mealtime_word := que_word & nonque &
  [ SYNSEM noun_synsem & nomod_synsem &
	 [ LOCAL [ CAT [ HEAD [ POSS -,
				PRD + ],
			 VAL [ SPR < [ LOCAL local &
					     [ CAT [ HEAD adv,
						     VAL [SPR  *olist*,
							  COMPS *olist* ] ],
					       CONT [ TOP #hand,
						      INDEX #index,
						      KEY degree_rel ] ],
				       OPT + ] >,
			       COMPS < > ] ],
		   CONT nom-obj &
		       [ TOP #hand,
			 INDEX #index,
			 LISZT <! hour_rel & #key &
				  [ HANDEL #nhand,
				    INST #index ],
				  def_rel &
				  [ HANDEL #hand,
				    BV #index,
				    RESTR #nhand ] !>,
			 KEY #key,
			 H-STORE <! #hand !> ],
		   ARG-S < > ] ] ].


; June, June 1996, June of 1996
; AAC - NON-LOCAL was misplaced
month_year_synsem := noun_synsem & nonpro_nomod_synsem &
  [ LOCAL [ CAT.VAL [ SPR < >,
		      COMPS < synsem & 
			      [ LOCAL local &
				      [ CAT [ VAL [ SPR *olist*,
						    COMPS *olist* ],
					      MC na ],
					CONT.INDEX #year,
					CONJ cnil ] ] > ],
	    CONT [ TOP #hand,
		   TOP-H #hand,
		   INDEX.PNG png & [ PN 3sg*,
				     GEN neut* ],
		   LISZT <! mofy_rel &
			    [ HANDEL #hand,
			      YEAR-IND #year ] !> ] ], 
    NON-LOCAL.SLASH 0-dlist ].

month_of_year_synsem := month_year_synsem &
  [ LOCAL.CAT.VAL.COMPS < @pp() &
			  [ LOCAL.CONT [ KEY _of_rel,
					 COMPKEY yofc_rel ],
			    NON-LOCAL.SLASH 0-dlist,
			    OPT + ] > ].

month_no_of_year_synsem := month_year_synsem &
  [ LOCAL.CAT.VAL.COMPS < @nomp($case=acc) &
			  [ LOCAL.CONT.KEY yofc_rel, 
			    NON-LOCAL.SLASH 0-dlist,
			    OPT - ] > ].

month_word := norm_no_affix_word &
  [ SYNSEM month_of_year_synsem ].

month_year_word := norm_no_affix_word &
  [ SYNSEM month_no_of_year_synsem ].

year_word := np_sing_word &
  [ SYNSEM.LOCAL.CONT.KEY yofc_rel ].

; 'the first', 'October first', 'the first of October'
; Need to find way to block '*October first of October'

dom_synsem := temp_noun_ppcomp_synsem &
  [ LOCAL [ CAT.VAL [ SPR < [ LOCAL.CONT [ KEY quant_or_wh_rel,
					   ALTKEY mofy_rel &
					       [ INST #inst ] ] ] >,
		      COMPS < [ LOCAL.CONT [ KEY _of_rel,
					     COMPKEY mofy_rel ],
				NON-LOCAL.SLASH 0-dlist,
				OPT + ] > ],
	    CONT.LISZT <! dofm_rel &
			  [ INST [ PNG png & [ PN 3sg*,
					       GEN neut* ] ],
			    NPREP #inst ] !> ] ].


day_of_month_word := norm_word & non_affix_bearing &
  [ SYNSEM dom_synsem ].

; 'Tuesday (the first (of October))', 'Tuesday (October first)'

day_of_week_word := norm_no_affix_word &
  [ SYNSEM temp_mod_synsem &
	   [ LOCAL [ CAT.VAL [ SPR < >,
			       COMPS < [ LOCAL local &
					       [ CAT [ VAL [ SUBJ < >,
							     COMPS *olist*,
							     SPR *olist* ],
						       MC na ],
						 CONT [ INDEX #ind,
							KEY dofm_rel ] ],
					 NON-LOCAL.SLASH 0-dlist,
					 OPT + ] > ],
                     AGR #ind,
		     CONT [ TOP #hand,
			    TOP-H #hand,
			    INDEX #ind,
			    KEY dofw_rel & [ INST.PNG png & [ PN 3sg*,
							      GEN neut* ] ],
			    LISZT <! relation !> ] ] ] ].

; 'morning' of 'each morning', 'Tuesday morning'
; 09-09-97  Temporarily replaced this def. with the one following, since the
; VM semdb wrongly made this a unary predicate.
day_part_word := norm_no_affix_word &
  [ SYNSEM temp_mod_synsem &
	   [ LOCAL [ CAT.VAL 
			    [ SPR < synsem &
				  [ LOCAL local &
					  [ CAT [ HEAD det,
						  VAL [ SUBJ < >,
							COMPS *olist* ] ],
					    CONT [ KEY quant_or_wh_rel &
						       [ BV #pinst,
							 RESTR #hand ],
						   ALTKEY dofw_rel &
						       [ INST #dinst ] ] ],
				    OPT - ] >,
			      COMPS < [ LOCAL [ CAT.VAL.COMPS < >,
						CONT [ TOP #hand,
						       INDEX #dinst,
						       KEY _of_rel &
							     [ ARG #pinst ],
						       COMPKEY dofm_rel ] ],
					NON-LOCAL.SLASH 0-dlist ] > ],
		     AGR #ind,
                     CONT [ TOP #hand,
			    INDEX #ind,
			    KEY #key & day_part_rel &
				[ INST #pinst ],
			    LISZT <! #key !> ] ] ] ].

holiday_word := np_sing_word &
  [ SYNSEM.LOCAL.CONT.KEY holiday_rel ].

; 'Advent', 'summer'
season_word := np_sing_word &
  [ SYNSEM.LOCAL.CONT.KEY season_rel ].

; "the morning" etc.

def_day_part_word := norm_no_affix_word &
  [ SYNSEM temp_mod_synsem &
	   [ LOCAL [ CAT [ VAL 
			    [ SPR < synsem &
				  [ LOCAL local &
					  [ CAT [ HEAD det,
						  VAL [ SUBJ < >,
							COMPS *olist* ] ],
					    CONT [ KEY def_rel &
						       [ BV #inst,
							 RESTR #hand ],
						   LISZT <! relation !> ] ],
				    OPT - ] >,
			      COMPS < > ],
			   POSTHEAD + ],
		     AGR #inst,
                     CONT [ TOP #hand,
			    INDEX #inst,
			    KEY def_day_part_rel & #key &
				[ INST #inst ],
			    LISZT <! #key !> ] ] ] ].

; "next week", "last month"
next_last_temp_word := norm_no_affix_word &
  [ SYNSEM temp_mod_synsem &
	   [ LOCAL [ CAT [ HEAD noun*,
			   VAL [ SPR < [ LOCAL.CONT.KEY degree_rel ] >,
				 COMPS < > ],
			   POSTHEAD + ],
                     AGR #inst,
                     CONT [ TOP #nhand,
			    INDEX #inst,
			    KEY temp_rel &
				[ INST #inst ],
			    ALTKEY #altkey,
			    LISZT <! relation,
				     def_rel &
				     [ HANDEL #hand,
				       BV #inst,
				       RESTR #nhand ],
				     next_prev_rel & #altkey &
				     [ HANDEL #nhand,
				       ARG #inst ] !>,
			    H-STORE <! #hand !> ] ] ] ].

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Degree specifiers for adjectives
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; 'very, really, much, a lot, almost'
; Treated as measure phrases, selected as specifiers by adjectives.
; These words do not specify empty HSTORE, since they can get assigned a
; nonempty value when they serve as specifiers of determiners.  All other
; heads taking these as specifiers must specify an empty HSTORE, given our
; treatment of this attribute as a difference list.


basic_degree_spec_word := que_word &
  [ SYNSEM nomod_synsem &
	  [ LOCAL [ CAT [ HEAD adv,
			  VAL [ COMPS < >,
				SPR < [ LOCAL local &
					      [ CAT [ HEAD adv,
						      VAL [ SPR *olist*,
							    COMPS *olist* ] ],
						CONT [ TOP #hand,
						       INDEX #ind,
						       KEY degree_rel ] ],
					NON-LOCAL.QUE 0-dlist,
					OPT + ] > ] ],
		    CONT [ INDEX #ind,
			   LISZT.LIST < degree_rel & #key &
					[ HANDEL #hand,
					  DARG #ind & deg-ind ], ... >,
			   KEY #key ] ] ] ].

degree_spec_word := basic_degree_spec_word & nonque &
  [ SYNSEM.LOCAL.CONT.LISZT <! relation !> ].

; "how tall"
wh_deg_spec_word := basic_degree_spec_word & 
  [ SYNSEM [ LOCAL.CONT [ KEY.HANDEL #dhand,
			  LISZT <! relation,
				   relation,
				   which_rel & [ HANDEL #hand,
						 RESTR #dhand ] !> ],
	     NON-LOCAL.QUE 1-dlist &
			   [ LIST < #hand > ] ] ].

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Numbers

; For numerals
num_synsem := lex_synsem &
	      [ LOCAL [ CAT.HEAD.ORDINAL #ord,
			CONT [ TOP #hand,
			       KEY integer_rel & #key &
				      [ HANDEL #hand,
					I-ORD #ord ],
			       LISZT.LIST < #key, ... >  ] ] ].

int_adj_synsem := lex_synsem & 
  [ LOCAL [ CAT [ HEAD intadj &
		       [ PRD -,
			 MOD intersective_mod & [ CAT [ HEAD noun &
						  [ POSS -],
					     VAL [ SPR < synsem >,
						   COMPS *olist* ] ],
				       CONT [ TOP #hand,
					      INDEX #index,        
					      KEY nom_rel ] ] ],
		  POSTHEAD - ],
	    CONT [ INDEX #index,
		   KEY integer_rel &
		       [ HANDEL #hand,
			 ARG #index ] ] ] ].

norm_num_synsem := num_synsem & int_adj_synsem.

norm_num_word := norm_no_affix_word &
  [ SYNSEM norm_num_synsem ].

;; some norm_card-words must remain unspecified for ORDINAL
norm_card_word :< norm_num_word.

;; those cardinals that take no complements may be safely specified as 
;; -ORDINAL, and as plural (since they're normal)

card_only_word:= norm_card_word &
  [ SYNSEM [LOCAL [CAT.HEAD.ORDINAL -,
		   CONT.INDEX.PNG png & [ PN 3pl ] ] ] ].

; should be POSTHEAD -
; These are adjectives only

ord_word := norm_num_word & lex_entry &
  [ SYNSEM.LOCAL.CAT [HEAD.ORDINAL +,
		      VAL.COMPS < > ] ].


;;  Specifiers and modifiers will agree with heads on the value
;; of the head feature ORDINAL -- this allows propagation
;; of such a feature from complements, where (on the current account)
;; the ORDINAL feature gets a value from the lexicon.

;; distribution of ORDINAL:
;;   ordinal lex_entries are ORDINAL +
;;   complement_free lex_entries are ORDINAL -
;;   all lex_entries for "one" are ORDINAL - 
;;   other lex_entries are unspecified for ORDINAL
;; Since (the HEAD feature of) the determiner "one" is outside this 
;; hierarchy, it can't appear as a specifier or complement.


;; The sorts below refer only to lexical entries, so there's presumably no
;; harm in making conventions about the order of the RELs on their LISZTs
;; No particular order is assumed for any phrase containing these entries.

;; It will be hard to do optional complements here and get the LISZTs to
;; come out right.  Another problem with optional complementation is that
;; entries with complements must be -ORD, while their complement-taking
;; counterparts must be underspecified for ORD 
;;   (cf. "twenty" vs. "twenty one" vs. "twenty first")


complement_free_number := norm_num_word &
			  [ SYNSEM.LOCAL.CAT [VAL.COMPS < >] ].

complemented_number := norm_num_word &
  [ SYNSEM 
    [LOCAL [CAT [HEAD.ORDINAL #ord,
		 VAL.COMPS < [OPT -,
			      LOCAL [CAT [VAL [SPR < >,
					       COMPS < >],
					  HEAD intadj & 
					      [ ORDINAL #ord ] ],
				     CONT.INDEX.PNG #num],
			      NON-LOCAL.SLASH 0-dlist ] > ],
	    CONT [ INDEX.PNG #num,
		   LISZT.LIST < relation, plus_rel, ... >
		   ] ] ] ].
		   

; Non-identity stipulated for handle of SPR and handle of CONT in order to
; prevent the regular head-spec rule (non-head-compositional) from applying.
; Need head-compositional since the handle of the phrase "two hundred" must
; be the handle of the times_rel from the head "hundred" (which contains as
; arguments the other two handles).

specified_number := norm_num_word &
  [ SYNSEM.LOCAL.CAT.VAL.SPR < synsem &
			       [ OPT -,
				 LOCAL [ CAT [HEAD intadj & 
						   [ ORDINAL - ],
					      VAL [ COMPS < >,
						    SPR < > ] ] ] ] >].
				 
unspecified_num := norm_num_word &
  [ SYNSEM.LOCAL [ CAT.VAL [ SPR < [ LOCAL local &
					   [ CAT [ HEAD adv,
						   VAL [ SPR  *olist*,
							 COMPS *olist* ] ],
					     CONT [ TOP #hand,
						    INDEX #darg,
						    KEY degree_rel ] ],
				     OPT + ] > ],
		   CONT [ TOP #hand,
			  KEY.DIM #darg ] ] ].


unspecified_num_without_complements := complement_free_number & unspecified_num &
  [ SYNSEM.LOCAL.CONT.LISZT <! const_rel !> ].

unspecified_num_with_complements := complemented_number & unspecified_num &
  [ SYNSEM.LOCAL 
     [ CAT.VAL.COMPS < [ LOCAL.CONT.KEY integer_rel & 
					[ HANDEL #chandle ] ] >,
       CONT.LISZT <! [ HANDEL #khandle],
		     [ TERM1  #khandle,
		       TERM2  #chandle] !> ] ].

specified_num_without_complements := complement_free_number & specified_number &
  [ SYNSEM.LOCAL 
	[ CAT.VAL.SPR < [ LOCAL.CONT.TOP #shandle ] >,
	  CONT.LISZT <! const_rel & [ HANDEL #khandle],
		        times_rel & [ FACTOR1  #shandle,
				      FACTOR2  #khandle] !> ] ].

specified_num_with_complements := complemented_number &
				  specified_number & 
  [ SYNSEM.LOCAL 
    [ CAT 
       [ VAL [ SPR < [ LOCAL.CONT.TOP #shandle ] >,
	       COMPS < [ LOCAL.CONT.TOP #chandle ] > ] ],
      CONT.LISZT <! [ HANDEL #khandle],
		    [ TERM1  #thandle,
		      TERM2  #chandle],
		    times_rel & [ HANDEL #thandle,
				  FACTOR1 #shandle,
				  FACTOR2 #khandle] !> ] ].

;; the constraints appropriate for all lexical entries for "one"

one_word := norm_no_affix_word & 
  [ SYNSEM num_synsem &
	    [ LOCAL [ CAT [ HEAD intsort & [ORDINAL -],
			    VAL [ SPR < >,
				  COMPS < >] ],
		      CONT.LISZT <! const_rel & 
				  [CONST_VALUE "1" ] !> ] ] ].
			   
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; String boundaries and punctuation

string_boundary := sign &
  [ INFLECTED +,
    ROOT +,
    STEM < #stem >,
    ARGS < [ STEM < #stem >,
	     AFFIX no-affix ] >,
    SYNSEM [ LOCAL [ CAT [ HEAD punct &
				[ MOD no-mod ],
			   VAL [ SUBJ < >,
				 SPR < >,
				 COMPS < > ],
			   MC + ],
		     CONT [ KEY no_rel,
			    MESSAGE <! !>,
			    H-STORE <! !> ],
		     CONJ cnil ],
	     NON-LOCAL [ SLASH 0-dlist,
			 REL 0-dlist,
			 QUE 0-dlist ] ] ].

