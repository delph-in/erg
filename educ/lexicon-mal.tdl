a_det_mass_rbst := d_-_m-c-a_le_mal &
 [ ORTH < "a" >,
   SYNSEM.LKEYS.KEYREL.PRED _a_q_rel ].

A_grade_n1 := n_-_c-nm_le &
 [ ORTH < "A", "grade" >,
   SYNSEM [ LKEYS.KEYREL.CARG "_A+grade",
            PHON.ONSET voc ] ].

;; DPF 2019-02-10 - Treat |a bunch of| as MWE to simplify paraphrase comparison
;;
a_bunch_of_a1 := aj_-_i-many_le &
 [ ORTH < "a", "bunch", "of" >,
   SYNSEM [ LKEYS.KEYREL.PRED much-many_a_rel,
            PHON.ONSET con ] ].

a_bunch_of_a2 := aj_-_i-much_le &
 [ ORTH < "a", "bunch", "of" >,
   SYNSEM [ LKEYS.KEYREL.PRED much-many_a_rel,
            PHON.ONSET con ] ].

a_dozen := aj_-_i-crd-one_le &
 [ ORTH < "a", "dozen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "12",
            PHON.ONSET voc ] ].

a+few_little_det_rbst := d_-_prt-sgm-nag_le &
 [ ORTH < "a", "few" >,
   SYNSEM [ LKEYS.KEYREL.PRED _a+little_q_rel,
            PHON.ONSET voc ],
   GENRE robust ].

a_g_cmpd_n5 := n_-_c-cpd_le &
 [ ORTH < "A", ".~", "G." >,
   SYNSEM [ LKEYS.KEYREL.PRED "_AG_n_1_rel",
            PHON.ONSET voc ] ].

a_g_cmpd_n6 := n_-_c-cpd_le &
 [ ORTH < "A", ".~", "G" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_AG_n_1_rel",
            PHON.ONSET voc ] ].

a_g_post_ttl_3 := n_-_tt-post-npt_le &
 [ ORTH < "A", ".~", "G" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_AG_n_1_rel",
            PHON.ONSET voc ] ].

a_g_post_ttl_4 := n_-_tt-post-npt_le &
 [ ORTH < "A", ".~", "G." >,
   SYNSEM [ LKEYS.KEYREL.PRED "_AG_n_1_rel",
            PHON.ONSET voc ] ].


a_little_deg2 := av_-_dg-jomv_le &
 [ ORTH < "a", "little" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_a+little_x_deg_rel",
	    LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CAT.HEAD.--BARED -,
            PHON.ONSET voc ] ].

a+little_few_a1_rbst := aj_-_i-svrl_le &
 [ ORTH < "a", "little" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_a+few_a_1_rel",
            PHON.ONSET voc ],
   GENRE robust ].

;; DPF 2019-02-10 - Treat |a lot of| as MWE to simplify paraphrase comparison
;; But avoid partitive construction.
;;
a_lot_of_a1 := aj_-_i-many_le &
 [ ORTH < "a", "lot", "of" >,
   SYNSEM [ LKEYS.KEYREL.PRED much-many_a_rel,
            LOCAL.CAT.HEAD.MOD.FIRST expressed_synsem,
            PHON.ONSET con ] ].

a_lot_of_a2 := aj_-_i-much_le &
 [ ORTH < "a", "lot", "of" >,
   SYNSEM [ LKEYS.KEYREL.PRED much-many_a_rel,
            LOCAL.CAT.HEAD.MOD.FIRST expressed_synsem,
            PHON.ONSET con ] ].

;; Since blocking |good| as mass noun|, add this frequent MWE
a_lot_of_good_n1 := n_-_m-nocnh_le &
 [ ORTH < "a", "lot", "of", "good" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_a+lot+of+good_n_1_rel",
            LOCAL.CAT.VAL.SPR.FIRST unexpressed,  
            PHON.ONSET voc ] ].

a_whole_lot_of_a1 := aj_-_i-many_le &
 [ ORTH < "a", "whole", "lot", "of" >,
   SYNSEM [ LKEYS.KEYREL.PRED much-many_a_rel,
            LOCAL.CAT.HEAD.MOD.FIRST expressed_synsem,
            PHON.ONSET con ] ].

a_whole_lot_of_a2 := aj_-_i-much_le &
 [ ORTH < "a", "whole", "lot", "of" >,
   SYNSEM [ LKEYS.KEYREL.PRED much-many_a_rel,
            LOCAL.CAT.HEAD.MOD.FIRST expressed_synsem,
            PHON.ONSET con ] ].

abed_a1_mal := aj_-_i-att_le_rbst &
 [ ORTH < "abed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_abed_a_1_rel",
            PHON.ONSET voc ] ].

abide_to_by_v1_mal := v_pp_e_le_rbst &
 [ ORTH < "abide" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_abide_v_by_rel" ],
            PHON.ONSET voc ] ].

ablaze_a1_mal := aj_-_i-att_le_rbst &
 [ ORTH < "ablaze" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ablaze_a_1_rel",
            PHON.ONSET voc ] ].

able_enable_v1_rbst := v_np-vp_oeq_le &
 [ ORTH < "able" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_enable_v_1_rel",
            PHON.ONSET voc ],
   GENRE robust ].

above_ground_adv := pp_-_i_le &
 [ ORTH < "above", "ground" >,
   SYNSEM [ LKEYS.KEYREL.PRED _above+ground_p_rel,
            PHON.ONSET voc ] ].

above_mentioned_a1_sp_rbst := aj_-_i-att_le &
 [ ORTH < "abovementioned" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_above-mentioned_a_1_rel",
            PHON.ONSET voc ],
   GENRE robust ].

access_to_v1_mal := v_pp_np_le_rbst &
 [ ORTH < "access" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_access_v_1_rel" ],
            PHON.ONSET voc ] ].

accidentally_adv1_sp_rbst := av_-_i-vp_le &
 [ ORTH < "accidently" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_accidental_a_1_rel",
            PHON.ONSET voc ],
   GENRE robust ].

accommodate_to_v1_mal := v_pp_np_le_rbst &
 [ ORTH < "accommodate" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_accommodate_v_1_rel" ],
            PHON.ONSET voc ] ].

;; This interacts badly with the robust spelling of "too" as "to" in
;; e.g. "according to many historians", so exclude for now.
;;
#|
according_to_p_rbst := p_np_i_le &
 [ ORTH < "according" >,
   SYNSEM [ LKEYS.KEYREL.PRED _according+to_p_rel,
            PHON.ONSET voc ],
   GENRE robust ].
|#

accustom_v1_bse_mal := v_np-vp_bse_le_rbst &
 [ ORTH < "accustom" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_accustom_v_1_rel",
            PHON.ONSET voc ] ].

acoustics_n1_mal := n_-_c-sg_le_rbst &
 [ ORTH < "acoustic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_acoustics_n_1_rel",
            PHON.ONSET voc ] ].

acrobatics_n1_mal := n_-_c-sg_le_rbst &
 [ ORTH < "acrobatic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_acrobatics_n_1_rel",
            PHON.ONSET voc ] ].

activate_active_sp_a1_rbst := aj_-_i_le &
 [ ORTH < "activate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_active_a_1_rel",
            PHON.ONSET voc ],
   GENRE robust ].

ad_temp_8 := x_-_bc-ad_le &
 [ ORTH < "A", ".~", "D." >,
   SYNSEM [ LKEYS.KEYREL [ CARG "AD_time",
                             PRED "_ad_x_rel" ],
            PHON.ONSET voc ] ].

ad_temp_9 := x_-_bc-ad_le &
 [ ORTH < "A", ".~", "D" >,
   SYNSEM [ LKEYS.KEYREL [ CARG "AD_time",
                             PRED "_ad_x_rel" ],
            PHON.ONSET voc ] ].

ad_temp_p8 := pp_-_i-nm-tmp_le &
 [ ORTH < "A", ".~", "D." >,
   SYNSEM [ LKEYS.KEYREL.PRED _ad_p_temp_rel,
            PHON.ONSET voc ] ].

ad_temp_p9 := pp_-_i-nm-tmp_le &
 [ ORTH < "A", ".~", "D" >,
   SYNSEM [ LKEYS.KEYREL.PRED _ad_p_temp_rel,
            PHON.ONSET voc ] ].

ad_temp_year_8 := n_-_c-sg-cpd_le &
 [ ORTH < "A", ".~", "D." >,
   SYNSEM [ LKEYS.KEYREL [ CARG "AD_time",
                             PRED "_ad_x_rel" ],
            PHON.ONSET voc ] ].

ad_temp_year_9 := n_-_c-sg-cpd_le &
 [ ORTH < "A", ".~", "D" >,
   SYNSEM [ LKEYS.KEYREL [ CARG "AD_time",
                             PRED "_ad_x_rel" ],
            PHON.ONSET voc ] ].

address_to_v1_mal := v_pp_np_le_rbst &
 [ ORTH < "address" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_address_v_1_rel" ],
            PHON.ONSET voc ] ].

;; Maybe correct this alongside admit_v3 in lexicon.tdl.  FIX?
admit_v_dir := v_np-pp_dir_le &
 [ ORTH < "admit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_admit_v_to_rel",
            PHON.ONSET voc ] ].

advantage_on_of_n1_mal := n_pp_c_le_rbst &
 [ ORTH < "advantage" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_advantage_n_of_rel" ],
            PHON.ONSET voc ] ].

advantage_to_for_n1_mal := n_pp_c_le_rbst &
 [ ORTH < "advantage" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_advantage_n_for_rel" ],
            PHON.ONSET voc ] ].

advise_v1_mal := v_vp_seq_le_rbst &
 [ ORTH < "advise" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_advise_v_1_rel",
            PHON.ONSET voc ] ].

advise_ing_v1_mal := v_vp_bse-ing_le_rbst &
 [ ORTH < "advise" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_advise_v_1_rel",
            PHON.ONSET voc ] ].

;; |We advice students to arrive early|
advice_advise_v4_rbst := v_np-vp_oeq_le &
 [ ORTH < "advice" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_advise_v_1_rel",
            PHON.ONSET voc ],
   GENRE robust ].

;; |We advice students arrive early|
advice_advise_bse_rbst := v_np-vp_bse_le &
 [ ORTH < "advice" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_advise_v_1_rel",
            PHON.ONSET voc ],
   GENRE robust ].

advise_advice_n1_rbst := n_-_m-ns_le &
 [ ORTH < "advise" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_advice_n_1_rel",
            PHON.ONSET voc ],
   ALTS.PLMASS -,
   GENRE robust ].

aerobatics_n1_mal := n_-_c-sg_le_rbst &
 [ ORTH < "aerobatic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_aerobatics_n_1_rel",
            PHON.ONSET voc ] ].

affect_to_v1_mal := v_pp_np_le_rbst &
 [ ORTH < "affect" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_affect_v_1_rel" ],
            PHON.ONSET voc ] ].

afford_for_v1_mal := v_pp_np_le_rbst &
 [ ORTH < "afford" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_afford_v_1_rel" ],
            PHON.ONSET voc ] ].

afford_in_v1_mal := v_pp_np_le_rbst &
 [ ORTH < "afford" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_afford_v_1_rel" ],
            PHON.ONSET voc ] ].

afloat_a1_mal := aj_-_i-att_le_rbst &
 [ ORTH < "afloat" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_afloat_a_1_rel",
            PHON.ONSET voc ] ].

afoot_a1_mal := aj_-_i-att_le_rbst &
 [ ORTH < "afoot" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_afoot_a_1_rel",
            PHON.ONSET voc ] ].

afraid_a1_mal := aj_-_i-att_le_rbst &
 [ ORTH < "afraid" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_afraid_a_1_rel",
            PHON.ONSET voc ] ].

afraid_a1_for_of_mal := aj_pp_i_le_rbst &
 [ ORTH < "afraid" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_afraid_a_of_rel" ],
            PHON.ONSET voc ] ].

afraid_v1_cp_mal := v_cp_adj_le_rbst &
 [ ORTH < "afraid" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fear_v_1_rel",
            PHON.ONSET voc ] ].

afraid_v1_vp_mal := v_vp_seq-adj_le_rbst &
 [ ORTH < "afraid" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_find_v_frightening_rel",
            PHON.ONSET voc ] ].

afraid_v1_pp_mal := v_pp_e-adj_le_rbst &
 [ ORTH < "afraid" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
		    KEYREL.PRED "_fear_v_1_rel" ],
            PHON.ONSET voc ] ].

after_pp_temp := pp_-_i_le &
 [ ORTH < "after" >,
   SYNSEM [ LKEYS.KEYREL.PRED _after_p_rel,
	    LOCAL [ CAT.HEAD.MOD.FIRST.LOCAL.CAT.HEAD basic_noun &
					       [ MINORS.MIN temp_nondim_rel ],
		    CTXT.ACTIVATED - ],
            PHON.ONSET voc,
	    MODIFD lmod ] ].

after2 := p_cp_s-notop_le &
 [ ORTH < "after" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_after_x_h_rel",
            LOCAL.CAT.HEAD.MINORS.NORM no_rel,
            PHON.ONSET voc ] ].

;; NORM prevents frag analysis of |after, we danced| so we signal |afterward|
;; instead of |after|
;;
after2_past := p_cp_s-notop-past_le &
 [ ORTH < "after" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_after_x_h_rel",
            LOCAL.CAT.HEAD [ MINORS.NORM no_rel ],
            PHON.ONSET voc ] ].

;; DPF 2018-07-24 - Exclude in topicalized position, to avoid misanalysis for
;; |after the other students had all rushed off ...|
;; DPF 2018-09-12 - MODIFD rmod blocks |[after a while] we arose|
;; DPF 2019-02-14 - Re 2018-07-24: But this defeats robust analysis of
;; |After, we arose.|  So remove ACTIVATED -.
;; DPF 2019-12-19 - Re 2019-02-14 - Alas, we'll have to sacrifice the simplest
;; examples with wrongly fronted "after", to avoid spurious errors for sentences
;; such as |After looking through your letter, I know your problems.|
;; 2020-04-10 - Exclude temporal nouns: |the day/week after|
;; 2021-04-07 - Re 2018-09-12 - What was here was MODIFD lmod, but this blocked
;; robust "arose and after arrived" (instead of "afterward"), so removed.
;;     
after_pp_rbst := pp_-_i_le &
 [ ORTH < "after" >,
   SYNSEM [ LKEYS.KEYREL.PRED _after_p_rel,
	    LOCAL [ CAT.HEAD.MOD.FIRST.LOCAL.CAT.HEAD n_or_v &
					      [ MINORS.MIN non_temp_nom_rel ],
		    CTXT.ACTIVATED - ],
            PHON.ONSET voc ],
   GENRE robust ].

after2_mal := p_cp_s-notop_le_rbst &
 [ ORTH < "after" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_after_x_h_rel",
            LOCAL.CAT.HEAD [ MINORS.NORM no_rel ],
            PHON.ONSET voc ] ].

after_vpfin_mal := p_vp_fin_le_rbst &
 [ ORTH < "after" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_after_x_h_rel",
            PHON.ONSET voc ] ].

afterward_adv1_mal := av_-_i-vp-pr_le_rbst &
 [ ORTH < "afterward" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_afterward_a_1_rel",
            PHON.ONSET con ] ].

afterwards_adv1_mal := av_-_i-vp-pr_le_rbst &
 [ ORTH < "afterwards" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_afterwards_a_1_rel",
            PHON.ONSET con ] ].

afternoon_nospr_n1_rbst := n_-_m-nocnh-nspr_le &
 [ ORTH < "afternoon" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_afternoon_n_of_rel",
            LOCAL.CAT.HEAD.CASE non_nom,
            PHON.ONSET voc ],
   GENRE robust ].

;; DPF 2017-10-15 - Specialized tense-related modifiers to detect mismatch in 
;; tense.  Includes ago, last, next, tomorrow, yesterday
;;
ago_p1 := pp_-_i-po-tm_le &
 [ ORTH < "ago" >,
   SYNSEM [ LOCAL.CONT.HOOK.XARG basic_non_expl-ind,
   	    LKEYS.KEYREL.PRED _ago_p_rel,
            PHON.ONSET voc ] ].

ago_p1_emod := pp_-_i-po-tm_le &
 [ ORTH < "ago" >,
   SYNSEM [ LOCAL.CONT.HOOK.XARG event & [ E.TENSE past ],
   	    LKEYS.KEYREL.PRED _ago_p_rel,
            PHON.ONSET voc ] ].

ago_p1_notense := pp_-_i-po-tm_le &
 [ ORTH < "ago" >,
   SYNSEM [ LOCAL.CONT.HOOK.XARG event & [ E.TENSE no_tense ],
   	    LKEYS.KEYREL.PRED _ago_p_rel,
            PHON.ONSET voc ] ].

;; DPF 2020-09-09 - Constrain to avoid robust |goes back [to ten] [years ago]|
;; and add hack constraining MOD..CASE to nom, to block alternate robust
;; |stretches back [to ten years ago]|
ago_p1_rbst := pp_-_i-po-tm_le &
 [ ORTH < "ago" >,
   SYNSEM [ LOCAL [ CAT [ HEAD.MOD.FIRST.LOCAL.CAT.HEAD.CASE nom,
			  VAL.SPR.FIRST.--MIN meas_nom_rel ],
		    CONT.HOOK.XARG event & [ E [ TENSE nonpast,
						 ASPECT.PROGR -,
						 SAME-PAST - ] ] ],
   	    LKEYS.KEYREL.PRED _ago_p_rel,
            PHON.ONSET voc ],
   GENRE robust ].

agree_with_v1_mal := v_np_pp_le_rbst &
 [ ORTH < "agree" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_agree_v_with_rel",
            PHON.ONSET voc ] ].

aground_a1_mal := aj_-_i-att_le_rbst &
 [ ORTH < "aground" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_aground_a_1_rel",
            PHON.ONSET voc ] ].

alert_of_to_v1_mal := v_np-pp_e_le_rbst &
 [ ORTH < "alert" >,
   ALTS.PASSIVE -,
   SYNSEM [ LKEYS [ --OCOMPKEY _of_p_sel_rel,
		    KEYREL.PRED "_alert_v_to_rel" ],
            PHON.ONSET voc ] ].

alike_a1_mal := aj_-_i-att_le_rbst &
 [ ORTH < "alike" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_alike_a_1_rel",
            PHON.ONSET voc ] ].

alive_a1_mal := aj_-_i-att_le_rbst &
 [ ORTH < "alive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_alive_a_1_rel",
            PHON.ONSET voc ] ].

all_adv1 := av_-_i-vp-pr_le &
 [ ORTH < "all" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_all_a_1_rel",
            LOCAL.CAT.HEAD [ MOD.FIRST.LOCAL.CONT.HOOK.XARG.DIV +,
			     --ADVADJ - ],
            PHON.ONSET voc ] ].

all_adv1_rbst := av_-_i-vp-x_le &
 [ ORTH < "all" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_all_a_1_rel",
            LOCAL.CAT.HEAD [ MOD.FIRST.LOCAL [ CAT.HEAD [ AUX +,
							  VFORM fin ],
					       CONT.HOOK.XARG.DIV + ],
			     --ADVADJ - ],
	    OPT +,
            PHON.ONSET voc ],
   GENRE robust ].

;; DPF 2018-11-23 - Block robust |all morning, all week|
;; Also, SPR *anti_ocons* blocks meas-NP as in |all day|
all_adj_mal := aj_-_i-one_le_rbst &
 [ ORTH < "all" >,
   SYNSEM [ LOCAL.CAT [ HEAD.MOD.FIRST [ --SIND.SORT entity,
                                         LOCAL.CAT.HEAD.MINORS.MIN
                                                 non_temp_nbar_rel ],
                        VAL.SPR *anti_ocons* ],
   	    PHON.ONSET voc ] ].

all_night_adv1 := av_-_i-vp-po_le &
 [ ORTH < "all", "night" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_all+night_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET voc ] ].

allocate_of_to_v1_mal := v_np-pp_e_le_rbst &
 [ ORTH < "allocate" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _of_p_sel_rel,
		    KEYREL.PRED "_allocate_v_to_rel" ],
            PHON.ONSET voc ] ].

allocate_on_to_v1_mal := v_np-pp_e_le_rbst &
 [ ORTH < "allocate" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _on_p_sel_rel,
		    KEYREL.PRED "_allocate_v_to_rel" ],
            PHON.ONSET voc ] ].

;; |allows us focus on X|
allow_v1_bse_mal := v_np-vp_bse_le_rbst &
 [ ORTH < "allow" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_allow_v_1_rel",
            PHON.ONSET voc ] ].

allow_v1_mal := v_vp_seq_le_rbst &
 [ ORTH < "allow" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_allow_v_1_rel",
            PHON.ONSET voc ] ].

almost_adv_mal := av_-_i-pr-aux_le_rbst &
 [ ORTH < "almost" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_almost_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET voc ] ].

aloft_a1_mal := aj_-_i-att_le_rbst &
 [ ORTH < "aloft" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_aloft_a_1_rel",
            PHON.ONSET voc ] ].

although_past := p_cp_s-past_le &
 [ ORTH < "although" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_although_p_1_rel",
            PHON.ONSET voc ] ].

although_mal := p_cp_s_le_rbst &
 [ ORTH < "although" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_although_p_1_rel",
            PHON.ONSET voc ] ].

although_2_mal := p_cp_s-tns_le_rbst &
 [ ORTH < "although" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_although_p_1_rel",
            PHON.ONSET voc ] ].

;; Make mal entry to allow stylistic guidance
;;
always_adv3_mal := av_-_i-vp-po_le_rbst &
 [ ORTH < "always" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_always_a_1_rel",
            PHON.ONSET voc ] ].

am_temp_7 := x_-_am-pm_le &
 [ ORTH < "a", ".~", "m." >,
   SYNSEM [ LKEYS.KEYREL [ CARG "am_time",
                             PRED "_am_x_rel" ],
            PHON.ONSET voc ] ].

am_temp_8 := x_-_am-pm_le &
 [ ORTH < "a", ".~", "m" >,
   SYNSEM [ LKEYS.KEYREL [ CARG "am_time",
                             PRED "_am_x_rel" ],
            PHON.ONSET voc ] ].

america_n1_mal := n_-_c-cpd_le_rbst &
 [ ORTH < "America" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_America_n_1_rel",
            PHON.ONSET con ],
   GENRE robust ].

america_n1_nocap_mal := n_-_pn_le_nocap_rbst &
 [ ORTH < "America" >,
   SYNSEM [ LKEYS.KEYREL.CARG "America",
            PHON.ONSET voc ] ].

american_n1_mal := n_-_c-nocnh-nocap_le_rbst &
 [ ORTH < "American" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_american_n_1_rel",
            PHON.ONSET voc ] ].

american_revolution_n1 := n_-_c-nm_le &
 [ ORTH < "American", "Revolution" >,
   SYNSEM [ LKEYS.KEYREL.CARG "American+Revolution",
            PHON.ONSET voc ] ].

amiss_a1_mal := aj_-_i-att_le_rbst &
 [ ORTH < "amiss" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_amiss_a_1_rel",
            PHON.ONSET voc ] ].

amok_a1_mal := aj_-_i-att_le_rbst &
 [ ORTH < "amok" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_amok_a_1_rel",
            PHON.ONSET voc ] ].

amoses_n1 := n_-_pn-pl-def_le &
 [ ORTH < "Amoses" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Amos",
            PHON.ONSET voc ] ].

amount_to_v1_mal := v_np_pp_le_rbst &
 [ ORTH < "amount" >,
   SYNSEM [ LKEYS [ KEYREL.PRED "_amount_v_to_rel" ],
            PHON.ONSET voc ] ].

;; Since we block the letter A, include a specific entry for grade
an_A_n1 := n_-_pn_le &
 [ ORTH < "an", "A" >,
   SYNSEM [ LKEYS.KEYREL.CARG "an+A",
            PHON.ONSET voc ] ].

an_det_mass_rbst := d_-_m-c-an_le_mal &
 [ ORTH < "an" >,
   SYNSEM.LKEYS.KEYREL.PRED _a_q_rel ].

an_average_pn1_rbst := n_pp_mc-na-of_le &
 [ ORTH < "a", "average" >,
   SYNSEM [ LKEYS.ALTKEYREL.PRED _an+average_q_rel,
            PHON.ONSET voc ],
   GENRE robust ].

; |given enough time _and_ we can finish|
;; 2020-11-25- AGR it-ind happens to block np-prdp followed by "and S"
and_sbrd_adv_mal := av_-_dc-conj_le_rbst &
 [ ORTH < "and" >,
   SYNSEM [ LKEYS.KEYREL.CARG "and",
	    LOCAL.CAT.HEAD.MOD.FIRST.LOCAL.AGR it-ind,
            PHON.ONSET voc ] ].

and_so_on_conj := c_-_so-on_le &
 [ ORTH < "and", "so", "on" >,
   SYNSEM [ PHON.ONSET voc,
	    LKEYS.KEYREL.ARG1 nonconj_indiv ] ].

and_so_on_conj_mal := c_-_so-on_le_rbst &
 [ ORTH < "and", "so", "on" >,
   SYNSEM.PHON.ONSET voc ].

and_so_on_conj_2_mal := c_-_so-on_le_rbst &
 [ ORTH < "and", "so", "on", "." >,
   SYNSEM.PHON.ONSET voc ].

angrier_a1_mal := aj_-_i-cmp_le_rbst &
 [ ORTH < "angrier" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_angry_a_at_rel",
            PHON.ONSET voc ] ].

annals_n1_mal := n_-_c-sg_le_rbst &
 [ ORTH < "annal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_annal_n_1_rel",
            PHON.ONSET voc ] ].

another_other_a1_rbst := aj_-_i-att-nsp_le &
 [ ORTH < "another" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_other_a_1_rel",
            LOCAL.CAT.HEAD.MOD.FIRST.--SIND.PNG.PN 3p,
            PHON.ONSET voc ],
   GENRE robust ].

any_more_det_nondiv_mal := d_-_prt-plm_le_rbst &
 [ ORTH < "any", "more" >,
   SYNSEM [ LKEYS.KEYREL.PRED _any+more_q_rel,
            PHON.ONSET voc ] ].

anything_mod_mal := n_-_m-mod_le_rbst &
 [ ORTH < "anything" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_type_n_1_rel",
            PHON.ONSET voc ] ].

antic_n1_mal := n_-_c-sg_le_rbst &
 [ ORTH < "antic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_antics_n_1_rel",
            PHON.ONSET voc ] ].

anticipate_prp_v1_mal := v_vp_seq-prp_le_rbst &
 [ ORTH < "anticipate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_anticipate_v_1_rel",
            PHON.ONSET voc ] ].

aplenty_a1_mal := aj_-_i-att_le_rbst &
 [ ORTH < "aplenty" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_aplenty_a_1_rel",
            PHON.ONSET voc ] ].

apology_apologize_v1_rbst := v_pp*-pp*_le &
 [ ORTH < "apology" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_rel,
                    --OCOMPKEY _for_p_rel,
                    KEYREL.PRED "_apologize_v_1_rel" ],
            PHON.ONSET voc ],
   GENRE robust ].

apostrophe_s_pl_rbst := n_-_cl-poss-pl_le &
 [ ORTH < "’s" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.SPR.FIRST [ --SIND.PNG png-reg,
	                              LOCAL.CAT.HEAD.--BARE - ] ],
   GENRE robust ].

apostrophe_s_12_es_rbst := n_-_cl-poss_le &
 [ ORTH < "’es" >,
   SYNSEM.PHON.ONSET con,
   GENRE robust].

apostrophe_s_12_pl_es_rbst := n_-_cl-poss-pl_le &
 [ ORTH < "’es" >,
   SYNSEM.PHON.ONSET con,
   GENRE robust].

appear_v5_locinv_mal := v_np_locinv-mv_le_rbst &
 [ ORTH < "appear" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_appear_v_1_rel",
            PHON.ONSET voc ] ].

appeared_a1_post_mal := v_-_psv-post_le_rbst &
 [ ORTH < "appeared" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_appear_v_1_rel",
            PHON.ONSET voc ] ].

appeared_a1_pre_mal := v_-_psv-pre_le_rbst &
 [ ORTH < "appeared" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_appear_v_1_rel",
            PHON.ONSET voc ] ].

apple_fruit_n1_rbst := n_-_c_le &
 [ ORTH < "apple", "fruit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_apple+fruit_n_1_rel",
            PHON.ONSET voc ],
   GENRE robust ].

apply_in_to_v1_mal := v_np-pp_e_le_rbst &
 [ ORTH < "apply" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _in_p_sel_rel,
		    KEYREL.PRED "_apply_v_to_rel" ],
            PHON.ONSET voc ] ].

appoint_v4_mal := v_np-np_nbar_le_rbst &
 [ ORTH < "appoint" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_appoint_v_1_rel",
            PHON.ONSET voc ] ].

approach_to_v1_mal := v_pp_np_le_rbst &
 [ ORTH < "approach" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_approach_v_1_rel" ],
            PHON.ONSET voc ] ].

aries_n1 := n_-_pn_le &
 [ ORTH < "Aries" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Aries",
            PHON.ONSET voc ] ].

arrears_n1_mal := n_-_c-sg_le_rbst &
 [ ORTH < "arrear" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_arrears_n_1_rel",
            PHON.ONSET voc ] ].

;; Avoid robust "arrive five to ten minutes early"
arrive_at_v1_mal := v_np_pp_le_rbst &
 [ ORTH < "arrive" >,
   SYNSEM [ LKEYS [ KEYREL.PRED "_arrive_v_at_rel" ],
	    LOCAL.CAT.VAL.COMPS.FIRST.--MIN non_temp_nbar_rel,
            PHON.ONSET voc ] ].

artifice_create_v1_rbst := v_np_le &
 [ ORTH < "artifice" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_create_v_1_rel",
            PHON.ONSET voc ],
   GENRE robust ].

artists_a1_mal := aj_-_i-cmpd_le_rbst &
 [ ORTH < "artists" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_artists_a_1_rel",
            PHON.ONSET voc ] ].

as_a_eq_deg_mal := av_pp_dg-as_le_rbst &
 [ ORTH < "as", "a" >,
   SYNSEM [ PHON.ONSET voc,
	    LOCAL.CAT.VAL.SPEC.FIRST.PHON.ONSET con ] ].

as_a_matter_of_fact_adv1 := av_-_i-vp-po_le &
 [ ORTH < "as", "a", "matter", "of", "fact" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_as+a+matter+of+fact_a_1_rel",
            PHON.ONSET voc ] ].

as_an_eq_deg_mal := av_pp_dg-as_le_rbst &
 [ ORTH < "as", "an" >,
   SYNSEM [ PHON.ONSET voc,
	    LOCAL.CAT.VAL.SPEC.FIRST.PHON.ONSET voc ] ].

as_follows_rbst := pp_-_i_le &
 [ ORTH < "as", "following" >,
   SYNSEM [ LKEYS.KEYREL.PRED _as+follows_p_rel,
            PHON.ONSET voc ],
   GENRE robust ].

as_if_past := p_cp_s-unsp-past_le &
 [ ORTH < "as", "if" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_as+if_x_rel",
            PHON.ONSET voc ] ].

as_if_mal := p_cp_s-unsp_le_rbst &
 [ ORTH < "as", "if" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_as+if_x_rel",
            PHON.ONSET voc ] ].

as_if_vpfin_mal := p_vp_fin_le_rbst &
 [ ORTH < "as", "if" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_as+if_x_rel",
            PHON.ONSET voc ] ].

as_long_as_subord_past := p_cp_s-past_le &
 [ ORTH < "as", "long", "as" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_as+long+as_x_rel",
            PHON.ONSET voc ] ].

as_long_as_subord_mal := p_cp_s_le_rbst &
 [ ORTH < "as", "long", "as" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_as+long+as_x_rel",
            PHON.ONSET voc ] ].

as_long_as_subord_2_mal := p_cp_s-tns_le_rbst &
 [ ORTH < "as", "long", "as" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_as+long+as_x_rel",
            PHON.ONSET voc ] ].

;; DPF 2018-09-10 - Deprecate topicalization with pronominal subject in head cl,
;; as in |as for the book, it is written well.|
;;
as_prd := p_prd_s-v-p_le &
 [ ORTH < "as" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_as_x_prd_rel",
            LOCAL.CAT.HEAD.MOD.FIRST.LOCAL.CONT.HOOK.XARG.PT notpro,
            PHON.ONSET voc ] ].

as_prd_expl := p_prd_s-v-p-x_le &
 [ ORTH < "as" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_as_x_prd_rel",
            LOCAL.CAT.HEAD.MOD.FIRST.LOCAL.CONT.HOOK.XARG expl-ind,
            PHON.ONSET voc ] ].

as_prd_not3s := p_prd_s-v-p-n3s_le &
 [ ORTH < "as" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_as_x_prd_rel",
            LOCAL.CAT.HEAD.MOD.FIRST.LOCAL.CONT.HOOK.XARG ref-ind & 
			                                  [ PT std,
							    PNG.PN -3s  ],
            PHON.ONSET voc ] ].

as_prd_notit := p_prd_s-v-p-3s_le &
 [ ORTH < "as" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_as_x_prd_rel",
            LOCAL.CAT [ HEAD.MOD.FIRST.LOCAL.CONT.HOOK.XARG ref-ind & 
			                               [ PT std,
							 PNG [ PN 3s,
							       GEN animate ] ],
			VAL.COMPS.FIRST.LOCAL.CAT.HEAD.MOD.FIRST.LOCAL.CAT.HEAD
							    supnoun ],
	    PHON.ONSET voc ] ].

;; Block fragment for |as he said, we arose|
#|
as_subord := p_cp_s_le &
 [ ORTH < "as" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_as_x_subord_rel",
            LOCAL.CAT.HEAD.--SBRDFRG -,
            PHON.ONSET voc ] ].

as_subord_nmod := p_cp_i-nmod_le &
 [ ORTH < "as" >,
   SYNSEM [ LKEYS.KEYREL.PRED _as_p_rel,
            LOCAL.CAT.HEAD.--SBRDFRG -,
            PHON.ONSET voc ] ].

as_subord_past := p_cp_s-past_le &
 [ ORTH < "as" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_as_x_subord_rel",
            LOCAL.CAT.HEAD.--SBRDFRG -,
            PHON.ONSET voc ] ].

as_subord_mal := p_cp_s_le_rbst &
 [ ORTH < "as" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_as_x_subord_rel",
            LOCAL.CAT.HEAD.--SBRDFRG -,
            PHON.ONSET voc ] ].

as_subord_2_mal := p_cp_s-tns_le_rbst &
 [ ORTH < "as" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_as_x_subord_rel",
            LOCAL.CAT.HEAD.--SBRDFRG -,
            PHON.ONSET voc ] ].
|#

as_though_past := p_cp_s-unsp-past_le &
 [ ORTH < "as", "though" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_as+though_p_1_rel",
            PHON.ONSET voc ] ].

as_though_mal := p_cp_s-unsp_le_rbst &
 [ ORTH < "as", "though" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_as+though_p_1_rel",
            PHON.ONSET voc ] ].

as_well_as_conj_1 := c_xp_aswellas_le &
 [ ORTH < "as", "well", "as" >,
   SYNSEM [ PHON.ONSET voc,
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD basic_noun ],
   GENRE robust ].

;; |we arise as well as arrive|
as_well_as_conj_rbst := c_xp_aswellas_le &
 [ ORTH < "as", "well", "as" >,
   SYNSEM [ PHON.ONSET voc,
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD verb ],
   GENRE robust ].


ask_v1 := v_np-np*_nodat_le &
 [ ORTH < "ask" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ask_v_1_rel",
            PHON.ONSET voc ] ].

ask_v11 := v_-_le &
 [ ORTH < "ask" >,
   ALTS [ VADJ -, NGER - ],
   SYNSEM [ LKEYS.KEYREL.PRED "_ask_v_1_rel",
            PHON.ONSET voc ] ].

asleep_a1_mal := aj_-_i-att_le_rbst &
 [ ORTH < "asleep" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_asleep_a_1_rel",
            PHON.ONSET voc ] ].

asleep_adv1 := av_-_i-vp-po_le &
 [ ORTH < "asleep" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_asleep_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

associate_to_with_v1_mal := v_np-pp_e_le_rbst &
 [ ORTH < "associate" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _to_p_sel_rel,
		    KEYREL.PRED "_associate_v_with_rel" ],
            PHON.ONSET voc ] ].

;; |assume him focus on X|
assume_v1_bse_mal := v_np-vp_bse_le_rbst &
 [ ORTH < "assume" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_assume_v_1_rel",
            PHON.ONSET voc ] ].

asunder_a1_mal := aj_-_i-att_le_rbst &
 [ ORTH < "asunder" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_asunder_a_1_rel",
            PHON.ONSET voc ] ].

at_earlier_mal := pp_-_i-temp_le_rbst &
 [ ORTH < "at", "earlier" >,
   SYNSEM [ LKEYS.KEYREL.PRED _at_p_temp_rel,
            PHON.ONSET voc ] ].

at_ever_mal := pp_-_i-temp_le_rbst &
 [ ORTH < "at", "ever" >,
   SYNSEM [ LKEYS.KEYREL.PRED _at_p_temp_rel,
            PHON.ONSET voc ] ].

at_forever_mal := pp_-_i-temp_le_rbst &
 [ ORTH < "at", "forever" >,
   SYNSEM [ LKEYS.KEYREL.PRED _at_p_temp_rel,
            PHON.ONSET voc ] ].

at_heart_adv1 := av_-_i-vp-po_le &
 [ ORTH < "at", "heart" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_at+heart_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET voc ] ].

at_last_adv2 := av_-_i-vp-po_le &
 [ ORTH < "at", "last" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_at+last_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET voc ] ].

at_now_mal := pp_-_i-temp_le_rbst &
 [ ORTH < "at", "now" >,
   SYNSEM [ LKEYS.KEYREL.PRED _at_p_temp_rel,
            PHON.ONSET voc ] ].

at_then_mal := pp_-_i-temp_le_rbst &
 [ ORTH < "at", "then" >,
   SYNSEM [ LKEYS.KEYREL.PRED _at_p_temp_rel,
            PHON.ONSET voc ] ].

at_today_mal := pp_-_i-temp_le_rbst &
 [ ORTH < "at", "today" >,
   SYNSEM [ LKEYS.KEYREL.PRED _at_p_temp_rel,
            PHON.ONSET voc ] ].

at_tomorrow_mal := pp_-_i-temp_le_rbst &
 [ ORTH < "at", "tomorrow" >,
   SYNSEM [ LKEYS.KEYREL.PRED _at_p_temp_rel,
            PHON.ONSET voc ] ].

at_tonight_mal := pp_-_i-temp_le_rbst &
 [ ORTH < "at", "tonight" >,
   SYNSEM [ LKEYS.KEYREL.PRED _at_p_temp_rel,
            PHON.ONSET voc ] ].

at_yesterday_mal := pp_-_i-temp_le_rbst &
 [ ORTH < "at", "yesterday" >,
   SYNSEM [ LKEYS.KEYREL.PRED _at_p_temp_rel,
            PHON.ONSET voc ] ].

athletes_a1_mal := aj_-_i-cmpd_le_rbst &
 [ ORTH < "athletes" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_athletes_a_1_rel",
            PHON.ONSET voc ] ].

atlantic_ocean_n1 := n_-_c-nm_le &
 [ ORTH < "Atlantic", "Ocean" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Atlantic+Ocean",
            PHON.ONSET voc ] ].

atremble_a1_mal := aj_-_i-att_le_rbst &
 [ ORTH < "atremble" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_atremble_a_1_rel",
            PHON.ONSET voc ] ].

attic_mouse_n1 := n_-_c_le &
 [ ORTH < "attic", "mouse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_attic+mouse_n_1_rel",
            LOCAL.AGR.PNG.PN 3s,
            PHON.ONSET voc ] ].

attic_mice_n1 := n_-_c-pl_le &
 [ ORTH < "attic", "mice" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_attic+mouse_n_1_rel",
            PHON.ONSET voc ] ].

attorneys_a1_mal := aj_-_i-cmpd_le_rbst &
 [ ORTH < "attorneys" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_attorneys_a_1_rel",
            PHON.ONSET voc ] ].

attraction_n1 := n_-_m-nomod_le &
 [ ORTH < "attraction" >,
   ALTS.PLMASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_attraction_n_1_rel",
            LOCAL [ CAT.HEAD.MINORS.NORM norm_rel,
	     	    CONT.HOOK.INDEX.SORT nonhuman ],
	    MODIFD.LPERIPH +,
            PHON.ONSET voc ] ].

attraction_n2 := n_-_c_le &
 [ ORTH < "attraction" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_attraction_n_1_rel",
            LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET voc ] ].

aunt_n2 := n_-_c-pre-ttl_le &
 [ ORTH < "aunt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_aunt_n_of_rel",
            LOCAL.CAT.HEAD.MINORS.MIN pre_title_rel,
            PHON.ONSET voc ] ].

auspices_n1_mal := n_-_c-sg_le_rbst &
 [ ORTH < "auspice" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_auspices_n_1_rel",
            PHON.ONSET voc ] ].

author_eb_white_n1 := n_-_pn-msc_le &
 [ ORTH < "author", "E", "B", "White" >,
   SYNSEM [ LKEYS.KEYREL.CARG "EBWhite",
            PHON.ONSET voc ] ].

author_eb_white_n2 := n_-_pn-msc_le &
 [ ORTH < "author", "E.", "B.", "White" >,
   SYNSEM [ LKEYS.KEYREL.CARG "EBWhite",
            PHON.ONSET voc ] ].

author_eb_white_n3 := n_-_pn-msc_le &
 [ ORTH < "author", "E", "B.", "White" >,
   SYNSEM [ LKEYS.KEYREL.CARG "EBWhite",
            PHON.ONSET voc ] ].

author_eb_white_n4 := n_-_pn-msc_le &
 [ ORTH < "author", "E.", "B", "White" >,
   SYNSEM [ LKEYS.KEYREL.CARG "EBWhite",
            PHON.ONSET voc ] ].

avenue_nounif_n1 := n_-_pn-nounif_le &
 [ ORTH < "Avenue" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Avenue",
            PHON.ONSET voc ] ].

avenue_nounif_n2 := n_-_pn-nounif_le &
 [ ORTH < "Avenue", "." >,
   SYNSEM [ LKEYS.KEYREL.CARG "Avenue",
            PHON.ONSET voc ] ].

avoid_prp_v1_mal := v_vp_seq-prp_le_rbst &
 [ ORTH < "avoid" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_avoid_v_1_rel",
            PHON.ONSET voc ] ].

aware_of_rbst := v_np_le &
 [ ORTH < "aware", "of" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_aware+of_v_rel",
            LOCAL.CAT.HEAD.VFORM bse,
            PHON.ONSET con ],
   GENRE robust ].

aware_v1_cp_mal := v_cp_adj_le_rbst &
 [ ORTH < "aware" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_aware_j_1_rel",
            PHON.ONSET voc ] ].

away_prep_particle := p_np_ptcl_le &
 [ ORTH < "away" >,
   SYNSEM [ LKEYS.KEYREL.PRED _away_p_sel_rel,
            LOCAL.CAT.VAL.COMPS.FIRST unexpressed,
            PHON.ONSET voc ] ].

;; Don't want robust |baby African elephant|
baby_african_a1 := aj_-_i-cap_le &
 [ ORTH < "baby", "African" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_baby+african_a_1_rel",
            PHON.ONSET con ] ].

back_prep_particle := p_np_ptcl_le &
 [ ORTH < "back" >,
   SYNSEM [ LKEYS.KEYREL.PRED _back_p_sel_rel,
            LOCAL.CAT.VAL.COMPS.FIRST unexpressed,
            PHON.ONSET voc ] ].

;; Avoid robust "go back to school"
back_go_v1_rbst := v_pp_e_le &
 [ ORTH < "back" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_go_v_back_rel" ],
	    LOCAL.CAT.HEAD.VFORM fin,
            PHON.ONSET con ],
   GENRE robust ].

bake_sale_n1 := n_-_c_le &
 [ ORTH < "bake", "sale" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bake+sale_n_1_rel",
            PHON.ONSET con ] ].

bakers_n1 := n_-_pn-pl-def_le &
 [ ORTH < "Bakers" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Baker",
            PHON.ONSET con ] ].

bankers_a1_mal := aj_-_i-cmpd_le_rbst &
 [ ORTH < "bankers" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bankers_a_1_rel",
            PHON.ONSET con ] ].

barbequed_a1 := v_-_psv_le &
 [ ORTH < "barbequed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_barbeque_v_1_rel",
            PHON.ONSET con ] ].

basketball_team_n2 := n_-_c-pl_le &
 [ ORTH < "basketball", "team" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_basketball+team_n_1_rel",
            PHON.ONSET con ] ].

bc_temp_7 := x_-_bc-ad_le &
 [ ORTH < "B", ".~", "C." >,
   SYNSEM [ LKEYS.KEYREL [ CARG "BC_time",
                             PRED "_bc_x_rel" ],
            PHON.ONSET con ] ].

bc_temp_8 := x_-_bc-ad_le &
 [ ORTH < "B", ".~", "C" >,
   SYNSEM [ LKEYS.KEYREL [ CARG "BC_time",
                             PRED "_bc_x_rel" ],
            PHON.ONSET con ] ].

bc_temp_p7 := pp_-_i-nm-tmp_le &
 [ ORTH < "B", ".~", "C." >,
   SYNSEM [ LKEYS.KEYREL.PRED _bc_p_temp_rel,
            PHON.ONSET con ] ].

bc_temp_p8 := pp_-_i-nm-tmp_le &
 [ ORTH < "B", ".~", "C" >,
   SYNSEM [ LKEYS.KEYREL.PRED _bc_p_temp_rel,
            PHON.ONSET con ] ].

bc_temp_year_7 := n_-_c-sg-cpd_le &
 [ ORTH < "B", ".~", "C." >,
   SYNSEM [ LKEYS.KEYREL [ CARG "BC_time",
                             PRED "_bc_x_rel" ],
            PHON.ONSET con ] ].

bc_temp_year_8 := n_-_c-sg-cpd_le &
 [ ORTH < "B", ".~", "C" >,
   SYNSEM [ LKEYS.KEYREL [ CARG "BC_time",
                             PRED "_bc_x_rel" ],
            PHON.ONSET con ] ].

bce_temp_7 := x_-_bc-ad_le &
 [ ORTH < "B", ".~", "C.E." >,
   SYNSEM [ LKEYS.KEYREL [ CARG "BCE_time",
                             PRED "_bce_x_rel" ],
            PHON.ONSET con ] ].

bce_temp_8 := x_-_bc-ad_le &
 [ ORTH < "B", ".~", "C.E" >,
   SYNSEM [ LKEYS.KEYREL [ CARG "BCE_time",
                             PRED "_bce_x_rel" ],
            PHON.ONSET con ] ].

bce_temp_p7 := pp_-_i-nm-tmp_le &
 [ ORTH < "B", ".~", "C.E." >,
   SYNSEM [ LKEYS.KEYREL.PRED _bce_p_temp_rel,
            PHON.ONSET con ] ].

bce_temp_p8 := pp_-_i-nm-tmp_le &
 [ ORTH < "B", ".~", "C.E" >,
   SYNSEM [ LKEYS.KEYREL.PRED _bce_p_temp_rel,
            PHON.ONSET con ] ].

bce_temp_year_7 := n_-_c-sg-cpd_le &
 [ ORTH < "B", ".~", "C.E." >,
   SYNSEM [ LKEYS.KEYREL [ CARG "BCE_time",
                             PRED "_bce_x_rel" ],
            PHON.ONSET con ] ].

bce_temp_year_8 := n_-_c-sg-cpd_le &
 [ ORTH < "B", ".~", "C.E" >,
   SYNSEM [ LKEYS.KEYREL [ CARG "BCE_time",
                             PRED "_bce_x_rel" ],
            PHON.ONSET con ] ].

be_id_am_are_rbst := v_np_am_le &
 [ ORTH < "are" >,
   SYNSEM [ LOCAL.CAT.HEAD.--MALN3SG +,
	    PHON.ONSET voc ],
   ALTS.VPELLIP -,
   GENRE robust ].

be_id_am_is_rbst := v_np_am_le &
 [ ORTH < "is" >,
   SYNSEM [ LOCAL.CAT.HEAD.--MAL3SG +,
	    PHON.ONSET voc ],
   GENRE robust ].

be_id_are_cx_lq_rbst := v_np_are-cx_le &
 [ ORTH < "‘", "re" >,
   SYNSEM.PHON.ONSET con,
   GENRE robust ].

be_inv_are_is_rbst := v_np_locinv-are_le &
 [ ORTH < "is" >,
   SYNSEM [ PHON.ONSET voc,
            LOCAL.CAT.VAL [ SUBJ.FIRST.LOCAL.CAT.HEAD adverbee,
			    COMPS.FIRST.--SIND.PNG.PN 3p ] ],
   GENRE robust ].

be_inv_is_are_rbst := v_np_locinv-is_le &
 [ ORTH < "are" >,
   SYNSEM [ PHON.ONSET voc,
	    LOCAL.CAT.VAL [ SUBJ.FIRST.LOCAL.CAT.HEAD adverbee,
			    COMPS.FIRST.LOCAL.CAT.HEAD.MINORS.ALTMIN
						      non_freerel_q_rel ] ],
   GENRE robust ].

be_inv_was_were_rbst := v_np_locinv-was_le &
 [ ORTH < "were" >,
   SYNSEM [ PHON.ONSET con,
	    LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CAT.HEAD adverbee ],
   GENRE robust ].

;; 2020-12-01 - Exclude NP-adv subjects: "My day was a lot of fun"
;; (even though this sacrifices robust "Here were a cat"
be_inv_were_was_rbst := v_np_locinv-were_le &
 [ ORTH < "was" >,
   SYNSEM [ PHON.ONSET con,
	    LOCAL.CAT.VAL.SUBJ.FIRST [ LOCAL.CAT.HEAD adverbee,
				       --SIND.GROUPN - ] ],
   GENRE robust ].

as_follows_adv1_rbst := pp_-_i_le &
 [ ORTH < "as", "follow" >,
   SYNSEM [ LKEYS.KEYREL.PRED _as+follows_p_rel,
            PHON.ONSET voc ],
   GENRE robust ].

as_prd_rbst := p_prd_s-v-p_le_mal &
 [ ORTH < "as" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_as_x_prd_rel",
            LOCAL.CAT.HEAD.MOD.FIRST.LOCAL.CONT.HOOK.XARG ref-ind & 
			                                  [ PT std,
							    PNG [ PN 3s,
								  GEN neut ] ],
	    PHON.ONSET voc ] ].

at_anywhere_adv_rbst := pp_-_i_le &
 [ ORTH < "at", "anywhere" >,
   SYNSEM [ LKEYS.KEYREL.PRED _at+anywhere_p_rel,
            PHON.ONSET voc ],
   GENRE robust ].

at_heart_adv_rbst := av_-_i-vp-po_le &
 [ ORTH < "at", "the", "heart" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_at+the+heart_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET voc ],
   GENRE robust ].

at_first_adv1_rbst := av_-_i-vp_le &
 [ ORTH < "at", "the", "first" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_at+first_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET voc ],
   GENRE robust ].

at_last_adv2_rbst := av_-_i-vp-po_le &
 [ ORTH < "at", "the", "last" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_at+last_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET voc ],
   GENRE robust ].

;; |We sleep at the night|
at_temp_rbst := p_np_i-tmp-mal_le &
 [ ORTH < "at" >,
   SYNSEM [ LKEYS [ --COMPKEY def_day_part_rel,
                    KEYREL.PRED _at_p_temp_rel ],
            LOCAL.CAT.VAL.COMPS.FIRST.--SIND.--BARESG -,
            PHON.ONSET voc ] ].

at_there_adv_rbst := pp_-_i_le &
 [ ORTH < "at", "there" >,
   SYNSEM [ LKEYS.KEYREL.PRED _at+there_p_rel,
            PHON.ONSET voc ],
   GENRE robust ].

attention_on_to_n1_mal := n_pp_m_le_rbst &
 [ ORTH < "attention" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
		    KEYREL.PRED "_attention_n_to_rel" ],
            PHON.ONSET voc ] ].

attraction_mod_mal := n_-_m-nomod_le_rbst &
 [ ORTH < "attraction" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_attraction_n_1_rel",
            PHON.ONSET voc ] ].

;; DPF 2020-09-29 - SPEC..--GENPROP - blocks "buy a ps4", so remove, and
;; remind ourselves what it is needed for.
a_prop_1_rbst := d_-_the_le_mal &
 [ ORTH < "a" >,
   SYNSEM [ LOCAL.CAT [ HEAD.MINORS.ALTMIN _the_q_prop_or_no_rel,
			VAL.SPEC < [ --MIN named_np_rel,
				     LOCAL [ AGR.PNG.PN 3s ],
				     MODIFD.LPERIPH na_or_-,
				     --SIND nonconj_ref-ind ] > ],
	    LKEYS.KEYREL.PRED proper_q_rel,
            PHON.ONSET con ] ].

an_prop_1_rbst := d_-_the_le_mal &
 [ ORTH < "an" >,
   SYNSEM [ LOCAL.CAT [ HEAD.MINORS.ALTMIN _the_q_prop_or_no_rel,
			VAL.SPEC < [ --MIN named_np_rel,
				     LOCAL [ AGR.PNG.PN 3s,
				             CAT.HEAD.--GENPROP - ],
				     MODIFD.LPERIPH na_or_-,
				     --SIND nonconj_ref-ind ] > ],
	    LKEYS.KEYREL.PRED proper_q_rel,
            PHON.ONSET voc ] ].

; Underspecified determiner for repairing bare singular
; NPs in generation.  Note the special KEY.

a_or_the_det_mal := d_-_sg-nmd_le_mal &
  [ ORTH < "a/the" >,
    SYNSEM [ LKEYS.KEYREL.PRED mal_bare_div_q_rel,
	     PHON.ONSET voc ] ].

;; DPF 2013-04-22 - This one produces many false positives, even with
;; |a few cats|, so disable for now and reconsider.  FIX?
;; DPF 2017-09-26 - Try turning it back on, but let's restrict the SPEC to
;; MOD *synlist* in order to avoid compounds, as in robust |fed a bunny carrots|
;; DPF 2018-03-06 - Re 2017-09-06: Note that this prevents us from catching
;; |a defense men|, but leave as is.
;; DPF 2018-11-07 - Re 2017-09-26: But adding *synlist* means we can't get
;; robust |I'm a students|, and blocking all compounds means we also wouldn't
;; get robust |we admired a zoo lions| or |a grain cars arrived|.  Anyway,
;; there could be such things as bunny carrots, and it's then pragmatic that
;; they should not be the sole object of "feed".
;; DPF 2020-01-14 - Added SPEC..NORM no_rel to block |a Spanish| with robust
;; plural "a".
;; DPF 2020-09-19 - Had SPEC..--BARE +, but this blocks robust "He became a 
;; students", so instead use --PLNOAFF feature.
;; 2021-01-19 - Tried adding LPERIPH na to SPEC, to block robust
;; "a rushing [[river or chirping] crickets]", but this also blocked
;; "a small gifts", so remove.
;; 2021-04-27 - Exclude coord nominals to avoid robust "a dog or cat"
;;
a_det_plur_rbst := d_-_pl_le &
 [ ORTH < "a" >,
   SYNSEM [ LKEYS.KEYREL.PRED _some_q_rel,
            LOCAL.CAT.VAL.SPEC < [ LOCAL.CAT.HEAD [ MINORS.NORM no_rel,
						    --PLNOAFF - ],
				   --SIND nonconj_ref-ind ] > ],
   GENRE robust ].

an_det_plur_rbst := d_-_pl_le &
 [ ORTH < "an" >,
   SYNSEM [ LKEYS.KEYREL.PRED _some_q_rel,
            LOCAL.CAT.VAL.SPEC < [ PHON.ONSET voc,
	                           LOCAL.CAT.HEAD.--BARE + ] >,
            PHON.ONSET voc ],
   GENRE robust ].

;; |we make a lot progress| - missing "of"
a+lot_det_rbst := d_-_prt-sgm-nag_le &
 [ ORTH < "a", "lot" >,
   SYNSEM [ LKEYS.KEYREL.PRED _a+lot_q_rel,
            PHON.ONSET voc ],
   ALTS.DPRT -,
   GENRE robust ].

a_lot_of_a1_rbst := aj_-_i-many_le &
 [ ORTH < "alot", "of" >,
   SYNSEM [ LKEYS.KEYREL.PRED much-many_a_rel,
            PHON.ONSET con ],
   GENRE robust ].

a_lot_of_a2_rbst := aj_-_i-much_le &
 [ ORTH < "alot", "of" >,
   SYNSEM [ LKEYS.KEYREL.PRED much-many_a_rel,
            PHON.ONSET con ],
   GENRE robust ].

;; Block partitive via MOD.FIRST
a_lots_of_a1_rbst := aj_-_i-many_le &
 [ ORTH < "a", "lots", "of" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_a+lot+of_a_rel",
            LOCAL.CAT.HEAD.MOD.FIRST expressed_synsem,
            PHON.ONSET con ],
   GENRE robust ].

a_lots_of_a2_rbst := aj_-_i-much_le &
 [ ORTH < "a", "lots", "of" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_a+lot+of_a_rel",
            LOCAL.CAT.HEAD.MOD.FIRST expressed_synsem,
            PHON.ONSET con ],
   GENRE robust ].

;; Include common spelling mistake
a_lost_of_a1_rbst := aj_-_i-many_le &
 [ ORTH < "a", "lost", "of" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_a+lot+of_a_rel",
            LOCAL.CAT.HEAD.MOD.FIRST expressed_synsem,
            PHON.ONSET con ],
   GENRE robust ].

a_lost_of_a2_rbst := aj_-_i-much_le &
 [ ORTH < "a", "lost", "of" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_a+lot+of_a_rel",
            LOCAL.CAT.HEAD.MOD.FIRST expressed_synsem,
            PHON.ONSET con ],
   GENRE robust ].

;; |a less cat| => |fewer cats|
a_less_det_rbst := d_-_sg-nmd_le &
 [ ORTH < "a", "less" >,
   SYNSEM [ LKEYS.KEYREL.PRED _a_q_rel,
            PHON.ONSET voc ],
   GENRE robust ].

;; |a more cat| => |more cats|
a_more_det_rbst := d_-_sg-nmd_le &
 [ ORTH < "a", "more" >,
   SYNSEM [ LKEYS.KEYREL.PRED _a_q_rel,
            PHON.ONSET voc ],
   GENRE robust ].

;; |we waited a hour|
a_one_adj_rbst := aj_-_i-an-nmd_le &
 [ ORTH < "a" >,
   SYNSEM.PHON.ONSET voc,
   GENRE robust ].

a_plenty_of_a1_rbst := aj_-_i-many_le &
 [ ORTH < "a", "plenty", "of" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_a+plenty+of_a_rel",
            PHON.ONSET con ],
   GENRE robust ].

a_plenty_of_a2_rbst := aj_-_i-much_le &
 [ ORTH < "a", "plenty", "of" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_a+plenty+of_a_rel",
            PHON.ONSET con ],
   GENRE robust ].

able_be_able_a2_mal := v_vp_seq-adj_le_rbst &
 [ ORTH < "able" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_able_a_1_rel",
            PHON.ONSET voc ] ].

ancient_a1 := aj_-_i-maycap_le &
 [ ORTH < "ancient" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ancient_a_1_rel",
            PHON.ONSET voc ] ].

ancient_adj_n1_mal := n_-_c-aj_le_rbst &
 [ ORTH < "ancient" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ancient_a_1_rel",
   	    LOCAL.CAT.VAL.SPR.FIRST.--MIN _a_q_rel,
            PHON.ONSET voc ] ].

angry_anger_v1_mal := v_np_adj_le_rbst &
 [ ORTH < "angry" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_anger_v_1_rel",
            PHON.ONSET voc ] ].

aware_verb_v1_mal := v_np_adj_le_rbst &
 [ ORTH < "aware" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_aware_j_1_rel",
            PHON.ONSET voc ] ].

;; DPF 2017-10-03 - MOD..RPERIPH is to block robust |went bad|
;
bad_adv1_rbst := av_-_i-vp-po_le_mal &
 [ ORTH < "bad" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bad_a_1_rel",
            LOCAL.CAT.HEAD.MOD.FIRST.MODIFD.RPERIPH bool,
            PHON.ONSET con ] ].

bad_badly_adv1_mal := av_-_i-po-pr_le_rbst &
 [ ORTH < "bad" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bad_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

badder_aj_mal := aj_pp_i-cmp_le_rbst &
 [ ORTH < "badder" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bad_a_1_rel",
            PHON.ONSET con ] ].

ban_v2_mal := v_-_le_rbst &
 [ ORTH < "ban" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ban_v_from_rel",
            PHON.ONSET con ] ].

barely_adv1_mal := av_-_i-pr-aux_le_rbst &
 [ ORTH < "barely" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bare_a_1_rel",
            PHON.ONSET con ] ].

barracks_n1_mal := n_-_c-sg_le_rbst &
 [ ORTH < "barrack" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_barracks_n_1_rel",
            LOCAL.AGR.PNG png-irreg,
            PHON.ONSET con ] ].

basics_n1_mal := n_-_c-sg_le_rbst &
 [ ORTH < "basic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_basics_n_1_rel",
	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

;; Avoid compound |Jessica bathes|
bath_n1_rbst := n_-_c-nocpd_le &
 [ ORTH < "bathe" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bath_n_1_rel",
            LOCAL.AGR.PNG.PN 3s,
            PHON.ONSET con ],
   GENRE robust ].

bath_bathe_v1_sp_rbst := v_np*_le &
 [ ORTH < "bath" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bathe_v_1_rel",
            PHON.ONSET con ],
   GENRE robust ].

;; Exclude at least passivizable VP complement, to avoid spurious robust 
;; analysis of e.g. "This book is expected to be difficult", but use for
;; "Kim is arrived" or "The cat is belonged to Kim"
;;
be_is_has_rbst := v_vp_has_le &
 [ ORTH < "is" >,
   SYNSEM [ PHON.ONSET voc,
            LOCAL.CAT.VAL.COMPS.FIRST [ --SIND non_conj_event,
	                                LOCAL.CAT.HEAD.--HAVEBE + ],
            NONLOC.SLASH.LIST < > ],
   GENRE robust,
   ALTS.VPELLIP - ].

be_is_are_has_rbst := v_vp_have-f_le &
 [ ORTH < "is" >,
   SYNSEM [ PHON.ONSET voc,
            LOCAL.CAT.VAL.COMPS.FIRST [ --SIND non_conj_event,
	                                LOCAL.CAT.HEAD.--HAVEBE + ],
            NONLOC.SLASH.LIST < > ],
   GENRE robust,
   ALTS.VPELLIP - ].

be_are_have_rbst := v_vp_have-f_le &
 [ ORTH < "are" >,
   SYNSEM [ PHON.ONSET voc,
            LOCAL.CAT.VAL.COMPS.FIRST [ --SIND non_conj_event,
	                                LOCAL.CAT.HEAD.--HAVEBE + ],
            NONLOC.SLASH.LIST < > ],
   GENRE robust,
   ALTS.VPELLIP - ].

be_be_have_rbst := v_vp_have-bse_le &
 [ ORTH < "be" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST [ --SIND non_conj_event,
	                                LOCAL.CAT.HEAD.--HAVEBE + ],
            NONLOC.SLASH.LIST < > ],
   GENRE robust,
   ALTS.VPELLIP - ].

be_be_had_psp_rbst := v_vp_be_have-psp_le_mal &
 [ ORTH < "been" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST [ --SIND non_conj_event,
	                                LOCAL.CAT.HEAD.--HAVEBE + ],
            NONLOC.SLASH.LIST < > ],
   ALTS.VPELLIP - ].


be_was_had_rbst := v_vp_had_le &
 [ ORTH < "was" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST [ --SIND non_conj_event,
	                                LOCAL.CAT.HEAD.--HAVEBE + ],
            NONLOC.SLASH.LIST < > ],
   GENRE robust,
   ALTS.VPELLIP - ].

be_were_had_rbst := v_vp_had_le &
 [ ORTH < "were" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST [ --SIND non_conj_event,
	                                LOCAL.CAT.HEAD.--HAVEBE + ],
            NONLOC.SLASH.LIST < > ],
   GENRE robust,
   ALTS.VPELLIP - ].

;; |there has a cat on the rug|
be_th_cop_is_has_rbst := v_np-xp_is_le &
 [ ORTH < "has" >,
   SYNSEM.PHON.ONSET con,
   GENRE robust ].

;; |there have many people in the room|
be_th_cop_are_have_rbst := v_np-xp_are_le &
 [ ORTH < "have" >,
   SYNSEM.PHON.ONSET con,
   GENRE robust ].

be_th_cop_are_cx_rbst := v_np-xp_are_le &
 [ ORTH < "’re" >,
   SYNSEM.PHON.ONSET voc,
   GENRE robust ].

;; |there had a cat on the rug|
be_th_cop_was_had_rbst := v_np-xp_was_le &
 [ ORTH < "had" >,
   SYNSEM.PHON.ONSET con,
   GENRE robust ].

;; |there had many people in the room|
be_th_cop_were_had_rbst := v_np-xp_wre_le &
 [ ORTH < "had" >,
   SYNSEM.PHON.ONSET con,
   GENRE robust ].

;; |there will have many people in the room|
be_th_cop_be_have_rbst := v_np-xp_be_le &
 [ ORTH < "have" >,
   SYNSEM.PHON.ONSET con,
   GENRE robust ].

be_th_cop_is_rbst := vc_there_is_le_mal &
 [ ORTH < "is" >,
   SYNSEM.PHON.ONSET voc ].

be_th_cop_are_rbst := vc_there_are_le_mal &
 [ ORTH < "are" >,
   SYNSEM.PHON.ONSET voc ].

be_th_cop_was_rbst := vc_there_was_le_mal &
 [ ORTH < "was" >,
   SYNSEM.PHON.ONSET con ].

be_th_cop_were_rbst := vc_there_were_le_mal &
 [ ORTH < "were" >,
   SYNSEM.PHON.ONSET con ].

be_th_cop_is_neg_mal := v_np-xp_is-n_le_rbst &
 [ ORTH < "isn’t" >,
   SYNSEM.PHON.ONSET voc ].

be_th_cop_are_neg_mal := v_np-xp_are-n_le_rbst &
 [ ORTH < "aren’t" >,
   SYNSEM.PHON.ONSET voc ].

be_th_cop_was_neg_mal := v_np-xp_was-n_le_rbst &
 [ ORTH < "wasn’t" >,
   SYNSEM.PHON.ONSET con ].

be_th_cop_were_neg_mal := v_np-xp_were-n_le_rbst &
 [ ORTH < "weren’t" >,
   SYNSEM.PHON.ONSET con ].

be_c_am_is_rbst := v_prd_am_le &
 [ ORTH < "is" >,
   SYNSEM.PHON.ONSET voc,
   ALTS.VPELLIP -,
   GENRE robust ].

be_c_am_are_rbst := v_prd_am_le &
 [ ORTH < "are" >,
   SYNSEM.PHON.ONSET voc,
   ALTS.VPELLIP -,
   GENRE robust ].

be_c_am-bse_mal := v_vp_be-bse-p_le_rbst &
 [ ORTH < "am" >,
   SYNSEM [ PHON.ONSET voc,
            LOCAL [ CAT.HEAD [ VFORM fin,
			       TAM.TENSE nonpast ],
	            AGR.PNG.PN 1s ] ] ].

be_c_am-bse-cx_mal := v_vp_be-bse-p_le_rbst &
 [ ORTH < "’m" >,
   SYNSEM [ PHON.ONSET voc,
            LOCAL [ CAT.HEAD [ VFORM fin,
			       TAM.TENSE nonpast ],
	            AGR.PNG.PN 1s ] ] ].

be_c_am_neg_1_rbst := v_prd_am-n_le &
 [ ORTH < "aren't" >,
   SYNSEM [ PHON.ONSET voc,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

be_c_am_neg_2_rbst := v_prd_am-n_le &
 [ ORTH < "aren", "'t" >,
   SYNSEM [ PHON.ONSET voc,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

#|
be_c_are_neg_1_rbst := v_prd_are-n_le &
 [ ORTH < "aren't" >,
   SYNSEM [ PHON.ONSET voc,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

be_c_are_neg_2_rbst := v_prd_are-n_le &
 [ ORTH < "aren", "'t" >,
   SYNSEM [ PHON.ONSET voc,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].
|#

be_c_is_cx_lq_rbst := v_prd_is-cx_le &
 [ ORTH < "‘", "s" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL na_or_- ],
   GENRE robust ].

be_cx_is_ellip_rbst := v_prd_is_le &
 [ ORTH < "’s" >,
   SYNSEM [ LOCAL.CAT [ VAL.COMPS.FIRST unexpressed,
			HEAD [ --CXELLIP +,
			       CNTRCTD + ] ],
	    PHON.ONSET voc ],
   ALTS.CSAI -,
   GENRE robust ].

be_cx_are_ellip_rbst := v_prd_are_le &
 [ ORTH < "’re" >,
   SYNSEM [ LOCAL.CAT [ VAL.COMPS.FIRST unexpressed,
			HEAD [ --CXELLIP +,
			       CNTRCTD + ] ],
	    PHON.ONSET voc ],
   ALTS.CSAI -,
   GENRE robust ].

be_c_is_are_neg_rbst := v_prd_are-n_le &
 [ ORTH < "isn’t" >,
   SYNSEM.PHON.ONSET voc,
   GENRE robust ].

#|
be_c_is_neg_1_rbst := v_prd_is-n_le &
 [ ORTH < "isn't" >,
   SYNSEM [ PHON.ONSET voc,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

be_c_is_neg_2_rbst := v_prd_is-n_le &
 [ ORTH < "isn", "'t" >,
   SYNSEM [ PHON.ONSET voc,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

be_c_was_neg_1_rbst := v_prd_was-n_le &
 [ ORTH < "wasn't" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

be_c_was_neg_2_rbst := v_prd_was-n_le &
 [ ORTH < "wasn", "'t" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].
|#

#|
be_c_was_neg_subj_1_rbst := v_prd_was-n-sv_le &
 [ ORTH < "wasn't" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

be_c_was_neg_subj_2_rbst := v_prd_was-n-sv_le &
 [ ORTH < "wasn", "'t" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].
|#

#|
be_c_were_neg_subj_1_rbst := v_prd_wre-n-sv_le &
 [ ORTH < "weren't" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

be_c_were_neg_subj_2_rbst := v_prd_wre-n-sv_le &
 [ ORTH < "weren", "'t" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].
|#

#|
be_id_am_neg_1_rbst := v_np_am-n_le &
 [ ORTH < "aren't" >,
   SYNSEM [ PHON.ONSET voc,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

be_id_am_neg_2_rbst := v_np_am-n_le &
 [ ORTH < "aren", "'t" >,
   SYNSEM [ PHON.ONSET voc,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].
|#

be_id_are_is_neg_rbst := v_np_is-n_le &
 [ ORTH < "aren’t" >,
   SYNSEM.PHON.ONSET voc,
   GENRE robust ].

#|
be_id_are_neg_1_rbst := v_np_are-n_le &
 [ ORTH < "aren't" >,
   SYNSEM [ PHON.ONSET voc,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

be_id_are_neg_2_rbst := v_np_are-n_le &
 [ ORTH < "aren", "'t" >,
   SYNSEM [ PHON.ONSET voc,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].
|#

;; DPF 2018-11-09 - We want to allow |those trips were a good excuse| but
;; catch as robust |English is my favorite subjects|, so just make "is" and
;; "was" require number identity, but not "are" or "were".
;; DPF 2020-09-21 - Re 2018-11-09: But this blocks "the best person is me",
;; so instead constrain to 13s.
;;
be_id_is := v_np_is_le &
 [ ORTH < "is" >,
   SYNSEM [ LOCAL [ CAT.VAL.COMPS.FIRST.LOCAL.AGR.PNG.PN 13s,
                    AGR.PNG.PN 13s ],           
            PHON.ONSET voc ] ].

be_id_is_neg_3_u := v_np_is-n_le &
 [ ORTH < "isn’t" >,
   SYNSEM [ LOCAL [ CAT.VAL.COMPS.FIRST.LOCAL.AGR.PNG.PN 13s,
                    AGR.PNG.PN 13s ],           
            PHON.ONSET voc ] ].

;; DPF 2018-11-23 - Exclude partative compl, for |the youngest|, |Kim's|
;; Also exclude coord-NP, for (wrong parse of) |is boring and a lot of work|
;; DPF 2019-03-27 - Exclude single-quote complement to avoid spurious analysis
;; of |That is my sisters'.|
;;
be_id_is_rbst := v_np_is_le &
 [ ORTH < "is" >,
   SYNSEM [ LOCAL [ CAT.VAL [ COMPS.FIRST canonical_synsem &
                                        [ LOCAL [ AGR.PNG.PN 3p,
                                                  CAT.HEAD noun ],
				          PUNCT.RCLSTR.RITAL -,
				          --SIND nonconj_ref-ind & 
					         [ PNG.PN 3p ] ],
			      SUBJ.FIRST.LOCAL.CAT.HEAD.--MALPL + ],
                    AGR.PNG png-reg & [ PN 3s ] ],           
            PHON.ONSET voc ],
   GENRE robust ].

be_id_is_sp_rbst := v_np_is_le &
 [ ORTH < "ls" >,
   SYNSEM.PHON.ONSET voc,
   GENRE robust ].

be_id_is_cx_lq_rbst := v_np_is-cx_le &
 [ ORTH < "‘", "s" >,
   SYNSEM.PHON.ONSET con,
   GENRE robust ].

be_id_is_neg_rbst := v_np_is-n_le &
 [ ORTH < "isn’t" >,
   SYNSEM [ LOCAL [ CAT.VAL.COMPS.FIRST.LOCAL.AGR.PNG.PN pl,
                    AGR.PNG.PN 3s ],           
            PHON.ONSET voc ],
   GENRE robust ].

be_id_is_are_neg_rbst := v_np_are-n_le &
 [ ORTH < "isn’t" >,
   SYNSEM [ PHON.ONSET voc,
	    LOCAL.CAT.HEAD.--MALN3SG + ],
   GENRE robust ].

be_id_was_rbst := v_np_was_le_mal &
 [ ORTH < "was" >,
   SYNSEM [ LOCAL.CAT.VAL [ COMPS.FIRST [ LOCAL [ AGR.PNG.PN pl,
						  CAT.HEAD noun ],
				        --SIND nonconj_ref-ind & [ PNG.PN pl ]],
			    SUBJ.FIRST.LOCAL.CAT.HEAD.--MALPL + ],
            PHON.ONSET con ] ].

be_id_was_neg_rbst := v_np_was-n_le &
 [ ORTH < "wasn’t" >,
   SYNSEM [ LOCAL [ CAT.VAL.COMPS.FIRST.LOCAL.AGR.PNG.PN pl,
                    AGR.PNG.PN 3s ],           
            PHON.ONSET con ],
   GENRE robust ].

be_c_is_rbst := vc_prd_is_le_mal &
 [ ORTH < "is" >,
   SYNSEM.PHON.ONSET voc ].

be_c_is_stutter_rbst := v_prd_is_le &
 [ ORTH < "is", "is" >,
   SYNSEM.PHON.ONSET voc,
   GENRE robust ].

be_c_is-bse_mal := v_vp_be-bse-p_le_rbst &
 [ ORTH < "is" >,
   ALTS.SAI -,
   SYNSEM [ PHON.ONSET voc,
            LOCAL [ CAT.HEAD [ VFORM fin,
			       TAM.TENSE nonpast ],
	            AGR.PNG.PN 3s ] ] ].

be_c_is-bse-cx_mal := v_vp_be-bse-p_le_rbst &
 [ ORTH < "’s" >,
   SYNSEM [ PHON.ONSET voc,
            LOCAL [ CAT.HEAD [ VFORM fin,
			       TAM.TENSE nonpast ],
	            AGR.PNG.PN 3s ] ] ].

;; spelled with "l" instead of "i"
be_c_is_sp_rbst := v_prd_is_le &
 [ ORTH < "ls" >,
   SYNSEM.PHON.ONSET voc,
   GENRE robust ].

be_c_are_am_rbst := vc_prd_is_le_mal &
 [ ORTH < "am" >,
   SYNSEM.PHON.ONSET voc ].

be_c_are_rbst := vc_prd_are_le_mal &
 [ ORTH < "are" >,
   SYNSEM.PHON.ONSET voc ].

be_c_are_stutter_rbst := v_prd_are_le &
 [ ORTH < "are", "are" >,
   SYNSEM.PHON.ONSET voc,
   GENRE robust ].

;; When extra space before apostrophe: |We 're here|
be_c_are_cx_lq_rbst := v_prd_are-cx_le &
 [ ORTH < "‘", "re" >,
   SYNSEM.PHON.ONSET con,
   GENRE robust ].

be_c_are_is_neg_rbst := v_prd_is-n_le &
 [ ORTH < "aren’t" >,
   SYNSEM.PHON.ONSET voc,
   GENRE robust ].

be_c_are-bse_mal := v_vp_be-bse-p_le_rbst &
 [ ORTH < "are" >,
   SYNSEM [ PHON.ONSET voc,
            LOCAL [ CAT.HEAD [ VFORM fin,
			       TAM.TENSE nonpast ],
	            AGR.PNG.PN -13s ] ] ].

be_c_was_rbst := vc_prd_was_le_mal &
 [ ORTH < "was" >,
   SYNSEM.PHON.ONSET con ].

be_c_was_stutter_rbst := v_prd_was_le &
 [ ORTH < "was", "was" >,
   SYNSEM.PHON.ONSET con,
   GENRE robust ].

be_c_wasnt_rbst := vc_prd_was-n_le_mal &
 [ ORTH < "wasn’t" >,
   SYNSEM.PHON.ONSET con ].

be_c_was-bse_mal := v_vp_be-bse-p_le_rbst &
 [ ORTH < "was" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL [ CAT.HEAD [ VFORM fin,
			       TAM.TENSE past ],
	            AGR.PNG.PN 13s ] ] ].

be_c_were_rbst := vc_prd_were_le_mal &
 [ ORTH < "were" >,
   SYNSEM.PHON.ONSET con ].

be_c_were_stutter_rbst := v_prd_wre_le &
 [ ORTH < "were", "were" >,
   SYNSEM.PHON.ONSET con,
   GENRE robust ].

be_c_werent_rbst := vc_prd_wre-n_le_mal &
 [ ORTH < "weren’t" >,
   SYNSEM.PHON.ONSET con ].

be_c_were-bse_mal := v_vp_be-bse-p_le_rbst &
 [ ORTH < "were" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL [ CAT.HEAD [ VFORM fin,
			       TAM.TENSE past ],
	            AGR.PNG.PN -13s ] ] ].

be_c_isnt-bse_mal := v_vp_be-bse-n_le_rbst &
 [ ORTH < "isn’t" >,
   SYNSEM [ PHON.ONSET voc,
            LOCAL [ CAT.HEAD.TAM.TENSE nonpast,
		    AGR.PNG.PN 3s ] ]].

be_c_is_neg_noapos_rbst := v_prd_is-n_le &
 [ ORTH < "isnt" >,
   SYNSEM.PHON.ONSET voc,
   GENRE robust ].

be_c_arent-bse_mal := v_vp_be-bse-n_le_rbst &
 [ ORTH < "aren’t" >,
   SYNSEM [ PHON.ONSET voc,
            LOCAL [ CAT.HEAD.TAM.TENSE nonpast,
		    AGR.PNG.PN -13s ] ] ].

be_c_are_neg_noapos_rbst := v_prd_are-n_le &
 [ ORTH < "arent" >,
   SYNSEM.PHON.ONSET voc,
   GENRE robust ].

be_c_wasnt-bse_mal := v_vp_be-bse-n_le_rbst &
 [ ORTH < "wasn’t" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL [ CAT.HEAD.TAM.TENSE past,
		    AGR.PNG.PN 13s ] ] ].

be_c_was_neg_noapos_rbst := v_prd_was-n_le &
 [ ORTH < "wasnt" >,
   SYNSEM.PHON.ONSET con,
   GENRE robust ].

be_c_werent-bse_mal := v_vp_be-bse-n_le_rbst &
 [ ORTH < "weren’t" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL [ CAT.HEAD.TAM.TENSE past,
		    AGR.PNG.PN -13s ] ] ].

be_c_were_neg_noapos_rbst := v_prd_wre-n_le &
 [ ORTH < "werent" >,
   SYNSEM.PHON.ONSET con,
   GENRE robust ].

be_c_be_rbst := vc_prd_be_le_mal &
 [ ORTH < "be" >,
   SYNSEM.PHON.ONSET con ].

; |would be arrive|
be_c_be-bse_mal := v_vp_be-bse-p_le_rbst &
 [ ORTH < "be" >,
   SYNSEM [ PHON.ONSET voc,
            LOCAL.CAT.HEAD.VFORM bse ] ].

be_c_been_rbst := vc_prd_been_le_mal &
 [ ORTH < "been" >,
   SYNSEM.PHON.ONSET con ].

be_c_were_neg_1_rbst  := v_prd_wre-n_le &
 [ ORTH < "weren't" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

be_c_were_neg_1_rbst2 := v_prd_wre-n_le &
 [ ORTH < "weren", "'t" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

be_np_be_rbst := vc_np_be_le_mal &
 [ ORTH < "be" >,
   SYNSEM.PHON.ONSET con ].

be_np_been_rbst := vc_np_been_le_mal &
 [ ORTH < "been" >,
   SYNSEM.PHON.ONSET con ].

;; DPF 2018-03-07 - Constrain AGR.SORT on subj to `entity' to avoid robust 
;; analysis for |five are (the group).|  Similarly with INDEX.SORT to avoid for
;; |what attract tourists are ...|
;; DPF 2018-03-29 - SUBJ..HEAD non_partn prevents analysis of 
;; |what we liked best were the cat|, so remove, and FIX...
;; DPF 2019-09-14 - Block free-rel as in |what attract tourists are ...|,
;; via SUBJ..RPERIPH -
;; DPF 2019-10-04 - But RPERIPH - also blocks "we" subject, so undo.
be_np_is_rbst := v_np_is_le &
 [ ORTH < "are" >,
   SYNSEM [ LOCAL.CAT [ HEAD.--MAL3SG +,
			VAL.SUBJ.FIRST [ LOCAL [ AGR [ PNG png-reg & [ PN 3s ],
						       SORT entity ],
						 CONT.HOOK.INDEX.SORT entity ]]],
	    PHON.ONSET voc ],
   GENRE robust ].

;; 2021-01-13 - Block in relative clauses, to avoid robust coord of rel-clause
;; in "...who arise, and that is their aim"
;;
be_np_are_rbst := v_np_are_le &
 [ ORTH < "is" >,
   SYNSEM [ PHON.ONSET voc,
	    LOCAL.CAT [ HEAD.--MALN3SG +,
			VAL.SUBJ.FIRST canonical_or_unexpressed ] ],
   GENRE robust ].

be_np_are_am_rbst := v_np_are_le &
 [ ORTH < "am" >,
   SYNSEM [ PHON.ONSET voc,
	    LOCAL.CAT.VAL.COMPS.FIRST.--MIN basic_nonpro_rel ],
   GENRE robust ].

;; 21-08-12 - Removed SUBJ.--BARE + since this blocks e.g. "who were the tv?"
be_np_was_rbst := v_np_was_le_mal &
 [ ORTH < "were" >,
   SYNSEM [ LOCAL.CAT.HEAD.--MAL3SG +,
            PHON.ONSET con ] ].

be_id_wasnt_rbst := v_np_wre-n_le &
 [ ORTH < "wasn’t" >,
   SYNSEM.PHON.ONSET con,
   GENRE robust ].

be_id_were_stutter_rbst := v_np_wre_le &
 [ ORTH < "were", "were" >,
   SYNSEM.PHON.ONSET con,
   GENRE robust ].

;; 2020-02-19 - Exclude partitives to avoid robust 
;; |what interested her was the cat|
;; 2021-04-16 - But non_partn also excludes "we was writers", so undo.
;;
be_np_were_rbst := v_np_wre_le &
 [ ORTH < "was" >,
   SYNSEM [ LOCAL.CAT [ HEAD.--MAL3SG +,
			VAL.SUBJ.FIRST.LOCAL.CAT.HEAD.--MALPL + ],
	    PHON.ONSET con ],
   GENRE robust ].

be_id_werent_rbst := v_np_was-n_le &
 [ ORTH < "weren’t" >,
   SYNSEM.PHON.ONSET con,
   GENRE robust ].

be_nv_are_rbst := v_cp_are_le &
 [ ORTH < "are" >,
   ALTS.SAI -,
   SYNSEM [ LOCAL.CAT.VAL.COMPS.FIRST [ LOCAL [ CAT.HEAD verb,
						CONT.HOOK.INDEX.--TPC - ],
					MODIFD notmod_or_rmod ],
            PHON.ONSET voc ],
   GENRE robust ].

be_nv_be_rbst := v_cp_be_le &
 [ ORTH < "be" >,
   SYNSEM [ LOCAL.CAT.VAL.COMPS < [ LOCAL [ CAT.HEAD verb,
					    CONT.HOOK.INDEX.SF prop-or-comm ],
				    MODIFD notmod_or_rmod ] >,
            PHON.ONSET con ],
   GENRE robust ].

be_nv_been_rbst := v_cp_been_le &
 [ ORTH < "been" >,
   SYNSEM [ LOCAL.CAT.VAL.COMPS < [ LOCAL [ CAT.HEAD verb,
					    CONT.HOOK.INDEX.SF prop-or-comm ],
				    MODIFD notmod_or_rmod ] >,
	    PHON.ONSET con ],
   GENRE robust ].

;; 2020-04-10 - Added --MAL3SG - to block frag-vp-nfin
;; 2020-11-24 - COMPS..--SIND.--TPC blocks rbst "being [at this school is fun]"
be_nv_being_rbst := v_cp_being_le &
 [ ORTH < "being" >,
   SYNSEM [ LOCAL.CAT [ HEAD.--MAL3SG -,
			VAL.COMPS.FIRST [ LOCAL 
					  [ CAT.HEAD verb,
					    CONT.HOOK.INDEX [ SF prop-or-comm,
							      --TPC - ] ],
					  MODIFD notmod_or_rmod ] ],
            PHON.ONSET con ],
   GENRE robust ].

be_nv_is_rbst := v_cp_is_le &
 [ ORTH < "is" >,
   ALTS.SAI -,
   SYNSEM [ LOCAL.CAT.VAL.COMPS < [ LOCAL [ CAT.HEAD verb,
					      CONT.HOOK.INDEX [ SF prop-or-comm,
								--TPC - ] ],
				    MODIFD notmod_or_rmod ] >,
	    PHON.ONSET voc ],
   GENRE robust ].

be_nv_q_are := v_cp_are_le &
 [ ORTH < "are" >,
   ALTS.SAI -,
   SYNSEM [ LOCAL.CAT.VAL.COMPS.FIRST [ LOCAL [ CAT [ HEAD verb,
						      VAL.SUBJ < > ],
						CONT.HOOK.INDEX.SF ques ],
					MODIFD notmod_or_rmod ],
            PHON.ONSET voc ] ].

be_nv_is_cx_q := v_cp_is-cx_le &
 [ ORTH < "’s" >,
   ALTS.SAI -,
   SYNSEM [ LOCAL.CAT.VAL.COMPS.FIRST.LOCAL [ CAT.HEAD verb,
                                              CONT.HOOK.INDEX.SF ques ],
   PHON.ONSET con ] ].

be_nv_q_was := v_cp_was_le &
 [ ORTH < "was" >,
   ALTS.SAI -,
   SYNSEM [ LOCAL.CAT.VAL.COMPS.FIRST.LOCAL [ CAT [ HEAD verb,
                                                    VAL.SUBJ < > ],
                                              CONT.HOOK.INDEX.SF ques ],
            PHON.ONSET con ] ].

be_nv_q_were := v_cp_wre_le &
 [ ORTH < "were" >,
   ALTS.SAI -,
   SYNSEM [ LOCAL.CAT.VAL.COMPS.FIRST.LOCAL [ CAT [ HEAD verb,
                                                    VAL.SUBJ < > ],
                                              CONT.HOOK.INDEX.SF ques ],
            PHON.ONSET con ] ].

be_nv_was_rbst := v_cp_was_le &
 [ ORTH < "was" >,
   ALTS.SAI -,
   SYNSEM [ LOCAL.CAT.VAL.COMPS.FIRST.LOCAL [ CAT.HEAD verb,
					      CONT.HOOK.INDEX [ SF prop-or-comm,
								--TPC - ] ],
            PHON.ONSET con ],
   GENRE robust ].

be_nv_were_rbst := v_cp_wre_le &
 [ ORTH < "were" >,
   ALTS.SAI -,
   SYNSEM [ LOCAL.CAT.VAL.COMPS.FIRST.LOCAL [ CAT.HEAD verb,
					      CONT.HOOK.INDEX [ SF prop-or-comm,
								--TPC - ] ],
            PHON.ONSET con ],
   GENRE robust ].

;; DPF 2018-03-31 - Exclude that-less S complements
;; DPF 2019-06-20 - But we need HEAD verb for |Truth is what we admire|
;; DPF 2020-11-07 - Also for "... which is why we struggle", but we still want
;; to catch that-less cases, so keep HEAD comp_or_p, and depend on NP-WHCP rule
;; for the copula + WH-S sentences.
;; 
be_nv_are := v_cp_are_le &
 [ ORTH < "are" >,
   SYNSEM [ LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD comp_or_p,
            PHON.ONSET voc ] ].

be_nv_be := v_cp_be_le &
 [ ORTH < "be" >,
   SYNSEM [ LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD comp_or_p,
            PHON.ONSET con ] ].

be_nv_been := v_cp_been_le &
 [ ORTH < "been" >,
   SYNSEM [ LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD comp_or_p,
            PHON.ONSET con ] ].

be_nv_being := v_cp_being_le &
 [ ORTH < "being" >,
   SYNSEM [ LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD comp_or_p,
            PHON.ONSET con ] ].

be_nv_is := v_cp_is_le &
 [ ORTH < "is" >,
   SYNSEM [ LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD comp_or_p,
            PHON.ONSET voc ] ].

be_nv_is_cx_3 := v_cp_is-cx_le &
 [ ORTH < "’s" >,
   SYNSEM [ LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD comp_or_p,
   PHON.ONSET con ] ].

be_nv_was := v_cp_was_le &
 [ ORTH < "was" >,
   SYNSEM [ LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD comp_or_p,
            PHON.ONSET con ] ].

be_nv_were := v_cp_wre_le &
 [ ORTH < "were" >,
   SYNSEM [ LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD comp_or_p,
            PHON.ONSET con ] ].

beautiful_adv_mal := av_-_i-adj-pre_le_rbst &
 [ ORTH < "beautiful" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_beautiful_a_1_rel",
            PHON.ONSET con ] ].

beaver_lake_n1 := n_-_pn_le &
 [ ORTH < "Beaver", "Lake" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Beaver+Lake",
            PHON.ONSET con ] ].

;; Allow mismatched tense
;; |we broke up because he is crazy|
;;
because_tense := p_cp_s-tns_le &
 [ ORTH < "because" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_because_x_rel",
            PHON.ONSET con ] ].

because_past := p_cp_s-past_le &
 [ ORTH < "because" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_because_x_rel",
            PHON.ONSET con ] ].

because_sp_rbst := p_cp_s-tns_le &
 [ ORTH < "becuase" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_because_x_rel",
            PHON.ONSET con ],
   GENRE robust ].

because_sp_2_rbst := p_cp_s-past_le &
 [ ORTH < "becuase" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_because_x_rel",
            PHON.ONSET con ],
   GENRE robust ].

;; DPF 2018-03-06 - Currently leads to too many false positives, so comment out
#|
because_prep_rbst := p_np_i_le &
 [ ORTH < "because" >,
   SYNSEM [ LKEYS.KEYREL.PRED _because+of_p_rel,
            PHON.ONSET con ],
   GENRE robust ].
|#

because_of_rbst := p_cp_s_le &
 [ ORTH < "because", "of" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_because_x_rel",
            PHON.ONSET con ],
   GENRE robust ].

because_of_past_rbst := p_cp_s-past_le &
 [ ORTH < "because", "of" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_because_x_rel",
            PHON.ONSET con ],
   GENRE robust ].

because_that_rbst := p_cp_s_le &
 [ ORTH < "because", "that" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_because_x_rel",
            PHON.ONSET con ],
   GENRE robust ].

because_that_past_rbst := p_cp_s-past_le &
 [ ORTH < "because", "that" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_because_x_rel",
            PHON.ONSET con ],
   GENRE robust ].

because_so_rbst := p_cp_s_le &
 [ ORTH < "because", "so" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_because_x_rel",
            PHON.ONSET con ],
   GENRE robust ].

because_so_past_rbst := p_cp_s-past_le &
 [ ORTH < "because", "so" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_because_x_rel",
            PHON.ONSET con ],
   GENRE robust ].

because_to_rbst := p_vp_inf_le &
 [ ORTH < "because" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_because+to_x_rel",
            PHON.ONSET con ],
   GENRE robust ].

;; |they left because, they were sleepy|
because_comma_rbst := p_cp_s_le &
 [ ORTH < "because", "," >,
   SYNSEM [ LKEYS.KEYREL.PRED "_because_x_rel",
            PHON.ONSET con ],
   GENRE robust ].

because_comma_past_rbst := p_cp_s-past_le &
 [ ORTH < "because", "," >,
   SYNSEM [ LKEYS.KEYREL.PRED "_because_x_rel",
            PHON.ONSET con ],
   GENRE robust ].

before2_past := p_cp_s-notop-past_le &
 [ ORTH < "before" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_before_x_h_rel",
            PHON.ONSET con ] ].

before2_mal := p_cp_s-notop_le_rbst &
 [ ORTH < "before" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_before_x_h_rel",
            PHON.ONSET con ] ].

before_vpfin_mal := p_vp_fin_le_rbst &
 [ ORTH < "before" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_before_x_h_rel",
            PHON.ONSET con ] ].

begin_beginning_mal := n_-_c-vb_le_rbst &
 [ ORTH < "begin" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_beginning_n_1_rel",
            PHON.ONSET con ] ].

begin_with_adv1_rbst := av_-_i-vp-po_le &
 [ ORTH < "begin", "with" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_to+begin+with_a_1_rel",
	    LOCAL.CAT.VAL.SPR.FIRST unexpressed,
            PHON.ONSET con ],
   GENRE robust ].

begin_v1_mal := v_vp_seq-bse_le_rbst &
  [ ORTH < "begin" >,
    SYNSEM [ LKEYS.KEYREL.PRED "_begin_v_1_rel",
	     PHON.ONSET con ] ].

beijing_university_n1_rbst := n_-_pn_le &
 [ ORTH < "Beijing", "University" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Peking+University",
            PHON.ONSET con ],
   GENRE robust ].

;; 2021-01-12 - Also block non-hd cmpnd: "believe painting is..." via NORM
belief_n2_rbst := n_-_c-nochd_le &
 [ ORTH < "believe" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_belief_n_in_rel" ],
	    LOCAL.CAT.HEAD.MINORS.NORM norm_rel,
	    MODIFD.RPERIPH +,
            PHON.ONSET con ],
   GENRE robust ].

;; For |we could not believe how tall he was|
believe_v5 := v_cp_fin-inf-q_le &
 [ ORTH < "believe" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_believe_v_1_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD verb,
            PHON.ONSET con ] ].

belong_to_v1_mal := v_np_pp_le_rbst &
 [ ORTH < "belong" >,
   SYNSEM [ LKEYS [ KEYREL.PRED "_belong_v_to_rel" ],
            PHON.ONSET con ] ].

benefit_v1_sp_rbst := v_np*_le &
 [ ORTH < "benifit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_benefit_v_1_rel",
            PHON.ONSET con ],
   GENRE robust ].

benefit_to_v1_mal := v_pp_np_le_rbst &
 [ ORTH < "benefit" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_benefit_v_1_rel" ],
            PHON.ONSET con ] ].

benefit_beneficial_v2_mal := v_pp_e-adj_le_rbst &
 [ ORTH < "beneficial" >,
   SYNSEM [ LKEYS [ --COMPKEY _from_p_sel_rel,
                    KEYREL.PRED "_benefit_v_from_rel" ],
            PHON.ONSET con ] ].

bernsteins_n1 := n_-_pn-pl-def_le &
 [ ORTH < "Bernsteins" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Bernstein",
            PHON.ONSET con ] ].

besides_sp_rbst := p_np_i_le &
 [ ORTH < "becides" >,
   SYNSEM [ LKEYS.KEYREL.PRED _besides_p_rel,
            PHON.ONSET con ],
   GENRE robust ].

besides_adv1_sp_rbst := av_-_s-cp-nsp-po_le &
 [ ORTH < "becides" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_besides_a_1_rel",
            PHON.ONSET con ],
   GENRE robust ].

besides_adv2_sp_rbst := av_-_s-cp-mc-pr_le &
 [ ORTH < "becides" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_besides_a_1_rel",
            PHON.ONSET con ],
   GENRE robust ].

besides_of_rbst := p_np_i_le &
 [ ORTH < "besides", "of" >,
   SYNSEM [ LKEYS.KEYREL.PRED _besides_p_rel,
            PHON.ONSET con ],
   GENRE robust ].

best_adv1_mal := av_-_i-pr-aux_le_rbst &
 [ ORTH < "best" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_best_a_1_rel",
            PHON.ONSET con ] ].

better_a1 := aj_pp_i-cmp_le &
 [ ORTH < "better" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_good_a_at-for-of_rel",
	    LOCAL.CAT.HEAD.PRD +,
            PHON.ONSET con ] ].

;; Block |We ate the better food|  => best
;;
better_a1_attrib := aj_pp_i-cmp_le &
 [ ORTH < "better" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_good_a_at-for-of_rel",
            LOCAL.CAT.HEAD [ PRD -,
	                  MOD.FIRST.LOCAL.CAT.HEAD.MINORS.ALTMIN udef_a_q_rel ],
            PHON.ONSET con ] ].

better_adv_mal := av_-_i-vp-cmp_le_rbst &
 [ ORTH < "better" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_better_a_1_rel",
            PHON.ONSET con ] ].

better_a1_mal := aj_-_i-cmp_le_rbst &
 [ ORTH < "better" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_good_a_at-for-of_rel",
            PHON.ONSET con ] ].

;; Avoid robust "treat you better next time", via MODIFD
;; Avoid for mass-count nouns such as for "better preparation"
better_the_best_rbst := d_-_the_le &
 [ ORTH < "better" >,
   SYNSEM [ LKEYS.KEYREL.PRED _the_q_rel,
            LOCAL.CAT.VAL.SPEC.FIRST [ LOCAL [ AGR.DIV -,
					       CAT.HEAD.--MALCM + ],
				       --SIND nonconj_ref-ind,
				       MODIFD notmod_or_rmod ],
            PHON.ONSET con ],
   GENRE robust ].

;; Not so clear: consider |I can't think of a better answer|
#|
better_best_a1_rbst := aj_-_i-sup_le &
 [ ORTH < "better" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_good_a_for_rel",
            LOCAL.CAT.HEAD.PRD -,
            PHON.ONSET con ],
   GENRE robust ].
|#

big_head_mask_n1 := n_-_c-nm_le &
 [ ORTH < "Big", "-", "Head", "Mask" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Big-Head+Mask",
            PHON.ONSET con ] ].

bigger_a1_mal := aj_-_i-cmp_le_rbst &
 [ ORTH < "bigger" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_big_a_1_rel",
            PHON.ONSET con ] ].

; Probably should constrain this to nonpast, non-past-part.
bike_ride_v1 := v_pp*_dir_le &
 [ ORTH < "bike", "ride" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bike+ride_v_1_rel",
            PHON.ONSET con ] ].

billiards_n1_mal := n_-_c-sg_le_rbst &
 [ ORTH < "billiard" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_billiards_n_1_rel",
            PHON.ONSET con ] ].

billions_n2_mal := n_np_c_le_rbst &
 [ ORTH < "billions" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_billions_n_1_rel",
            LOCAL.AGR.PNG.PN 3p,
            PHON.ONSET con ] ].

billions_rbst := aj_-_i-crd-bln_le &
 [ ORTH < "billions" >,
   SYNSEM [ LKEYS.ALTKEYREL.CARG "1000000000",
            PHON.ONSET con ],
   GENRE robust ].

binoculars_n1_mal := n_-_c-sg_le_rbst &
 [ ORTH < "binocular" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_binoculars_n_1_rel",
            PHON.ONSET con ] ].

bird_feeding_a1 := aj_-_i_le &
 [ ORTH < "bird", "feeding" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bird+feeding_a_1_rel",
            PHON.ONSET con ] ].

#|
birth_idm_n1 := n_-_m-idm_le &
 [ ORTH < "birth" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_birth_n_1_rel",
            PHON.ONSET con ] ].
|#

bitch_v1_mal := v_np_cp_le_rbst &
 [ ORTH < "bitch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bitch_v_1_rel",
            PHON.ONSET con ] ].

black_dignity_n1 := n_-_m_le &
 [ ORTH < "black", "dignity" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_black+dignity_n_1_rel",
            PHON.ONSET con ] ].

black_triumph_n1 := n_-_m_le &
 [ ORTH < "black", "triumph" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_black+triumph_n_1_rel",
            PHON.ONSET con ] ].

blackguard_n1 := n_-_c_le &
 [ ORTH < "Blackguard" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_Blackguard_n_1_rel",
            PHON.ONSET con ] ].

blame_for_v1_mal := v_pp_np_le_rbst &
 [ ORTH < "blame" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_blame_v_1_rel" ],
            PHON.ONSET con ] ].

blanch_n1_sp_rbst := n_pp_c-of_le &
 [ ORTH < "blanch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_branch_n_of_rel",
            LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ],
   GENRE robust ].

bloodier_a1_mal := aj_-_i-cmp_le_rbst &
 [ ORTH < "bloodier" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bloody_a_1_rel",
            PHON.ONSET con ] ].

blues_n1 := n_-_c-pl_le &
 [ ORTH < "blues" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_blue_n_1_rel",
            PHON.ONSET con ] ].

blurrier_a1_mal := aj_-_i-cmp_le_rbst &
 [ ORTH < "blurrier" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_blurry_a_1_rel",
            PHON.ONSET con ] ].

board_n1 := n_-_c_le &
 [ ORTH < "board" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_board_n_1_rel",
            PHON.ONSET con ] ].

board_n2 := n_-_m-nochd_le &
 [ ORTH < "board" >,
   ALTS.PLMASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_board_n_1_rel",
            PHON.ONSET con ] ].

bolder_a1_mal := aj_-_i-cmp_le_rbst &
 [ ORTH < "bolder" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bold_a_1_rel",
            PHON.ONSET con ] ].

books_shop_n1_mal := n_-_c-poss-cpd_le_rbst &
 [ ORTH < "book", "’s", "shop" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ballpark_n_1_rel",
            PHON.ONSET con ],
   GENRE robust ].

;; Wrong preposition
bored_of_a1_mal := aj_pp_i_le_rbst &
 [ ORTH < "bored" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_bored_a_with_rel" ],
            PHON.ONSET con ] ].

boring_a3 := aj_pp-vp_i-it_le &
 [ ORTH < "boring" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bore_v_1_rel",
            PHON.ONSET con ],
   ALTS.AVIP - ].

brag_v1_mal := v_np_cp_le_rbst &
 [ ORTH < "brag" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_brag_v_fo_rel",
            PHON.ONSET con ] ].

braver_a1_mal := aj_-_i-cmp_le_rbst &
 [ ORTH < "braver" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_brave_a_1_rel",
            PHON.ONSET con ] ].

breath_n1 := n_-_c_le &
 [ ORTH < "breath" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_breath_n_1_rel",
            PHON.ONSET con ] ].

breath_i_n1 := n_-_c-brno_le &
 [ ORTH < "breath" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_breath_n_1_rel",
            PHON.ONSET con ] ].

briefly_adv2 := av_-_s-cp-mc-pr_le &
 [ ORTH < "briefly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_brief_a_1_rel",
            PHON.ONSET con ] ].

;; Minimize the difference between |it shines bright| and |it shines brightly|
bright_adv := av_-_i-vp_le &
 [ ORTH < "bright" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bright_a_1_rel",
            PHON.ONSET con ] ].

brighter_a1_mal := aj_-_i-cmp_le_rbst &
 [ ORTH < "brighter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bright_a_1_rel",
            PHON.ONSET con ] ].

bring_v1_mal := v_-_le_rbst &
 [ ORTH < "bring" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bring_v_1_rel",
            PHON.ONSET con ] ].

british_nounif_n1 := n_-_pn-nounif_le &
 [ ORTH < "British" >,
   SYNSEM [ LKEYS.KEYREL.CARG "British",
            PHON.ONSET con ] ].

build_v1_mal := v_-_le_rbst &
 [ ORTH < "build" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_build_v_1_rel",
            PHON.ONSET con ] ].

;; 2020-02-24 - Stamped NORM norm_rel on MOD, to prevent these in compounds:
;; |[bunch of art] lovers| - Better if we could insist on INFLECTD, but can't.
;;
bunch_of_a1_rbst := aj_-_i-many_le &
 [ ORTH < "bunch", "of" >,
   SYNSEM [ LKEYS.KEYREL.PRED much-many_a_rel,
            LOCAL.CAT.HEAD.MOD.FIRST.LOCAL.CAT.HEAD.MINORS.NORM norm_rel,
            PHON.ONSET con ],
   GENRE robust ].

bunch_of_a2_rbst := aj_-_i-much_le &
 [ ORTH < "bunch", "of" >,
   SYNSEM [ LKEYS.KEYREL.PRED much-many_a_rel,
            LOCAL.CAT.HEAD.MOD.FIRST.LOCAL.CAT.HEAD.MINORS.NORM norm_rel,
            PHON.ONSET con ],
   GENRE robust ].

burly_a1_mal := av_-_i-vp-adj_le_rbst &
 [ ORTH < "burly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_burly_a_1_rel",
            PHON.ONSET con ] ].

burned_out_a1 := aj_-_i_le &
 [ ORTH < "burned", "-", "out" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_burned-out_a_1_rel",
            PHON.ONSET con ] ].

;; |he is busy to drive|
busy_a2_mal := aj_vp_i-seq-prp_le_rbst &
 [ ORTH < "busy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_busy_a_1_rel",
            PHON.ONSET con ] ].

but_adv1_rbst := av_-_s-cp_le_mal &
 [ ORTH < "but" >,
   SYNSEM [ LOCAL.CAT [ HEAD.MOD < [ LOCAL.CAT.MC - ] >,
                        POSTHD + ],
            LKEYS.KEYREL.PRED "_but_a_1_rel",
            PHON.ONSET con ],
   GENRE robust ].

but_conj_sp_rbst := c_xp_but_le &
 [ ORTH < "buts" >,
   SYNSEM.PHON.ONSET con,
   GENRE robust ].

buy_v1_mal := v_-_le_rbst &
 [ ORTH < "buy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_buy_v_1_rel",
            PHON.ONSET con ] ].

by_means := p_nb_i_le &
 [ ORTH < "by" >,
   SYNSEM [ LKEYS [ --COMPKEY non_temp_nom_rel,
                    KEYREL.PRED _by_p_means_rel ],
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CONT.HOOK.INDEX.SORT transport_sort,
	    PHON.ONSET con ] ].

;; 2021-01-13 - Changed COMPS..BARED - to DEF +, to block for "by waste"
;; without making non-sort-restricted mass-count nouns exclude temporals, so
;; we can parse "the best method is the gap year".
by_means_rbst := p_np_i_le &
 [ ORTH < "by" >,
   SYNSEM [ LKEYS [ --COMPKEY non_temp_nom_rel,
                    KEYREL.PRED _by_p_means_rel ],
	    LOCAL.CAT [ VAL.COMPS.FIRST.LOCAL 
				  [ CONT.HOOK.INDEX nonconj_ref-ind &
						     [ TSORT transport_sort,
						       --BARESG -,
						       DEF + ] ],
			HEAD.AUX + ],
            PHON.ONSET con ],
   GENRE robust ].

by_nbar_time_rbst := p_nb_i_le &
 [ ORTH < "by" >,
   SYNSEM [ LKEYS.KEYREL.PRED _by_p_means_rel,
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CONT.HOOK.INDEX [ SORT time,
							      TSORT entity ],
	    PHON.ONSET con ],
   GENRE robust ].

by_hand_adv1 := av_-_i-vp-po_le &
 [ ORTH < "by", "hand" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_by+hand_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

by_hand_adv1_rbst := av_-_i-vp-po_le &
 [ ORTH < "by", "the", "hand" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_by+hand_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ],
   GENRE robust ].

by_heart_adv1 := av_-_i-vp-po_le &
 [ ORTH < "by", "heart" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_by+heart_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

by_heart_adv_rbst := av_-_i-vp-po_le &
 [ ORTH < "by", "the", "heart" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_by+the+heart_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ],
   GENRE robust ].

;; |from branch by branch|
by_nbar_p_from := p_nb_i-nmd-to_le &
 [ ORTH < "by" >,
   SYNSEM [ LKEYS.KEYREL.PRED _by_p_nbar_rel,
            PHON.ONSET con ] ].

by_p := p_np_i-dgsp_le &
 [ ORTH < "by" >,
   SYNSEM [ LOCAL.CAT [ HEAD.MOD.FIRST.LOCAL.CAT.HEAD non_noun,
			VAL.COMPS < [ LOCAL.CAT.HEAD.--BARE -,
				      --SIND.SORT entity ] > ],
	    LKEYS.KEYREL.PRED _by_p_rel,
            PHON.ONSET con ] ].

;; Robust "in this way"
by_p_nmod := p_np_i-dgsp_le &
 [ ORTH < "by" >,
   SYNSEM [ LOCAL.CAT [ HEAD.MOD.FIRST.LOCAL.CAT.HEAD noun_or_nomger,
			VAL.COMPS < [ LOCAL.CAT.HEAD.--BARE - ] > ],
	    LKEYS.KEYREL.PRED _by_p_rel,
            PHON.ONSET con ] ].

by_this_means_nom1 := pp_-_i_le &
 [ ORTH < "by", "this", "means" >,
   SYNSEM [ LKEYS.KEYREL.PRED _by+this+means_p_rel,
            PHON.ONSET con ] ].

by_this_way_adv_rbst := av_-_s-cp-mc-pr_le &
 [ ORTH < "by", "this", "way" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_in+this+way_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ],
   GENRE robust ].

c_grade_n1 := n_-_c_le &
 [ ORTH < "C" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_C_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,   
            PHON.ONSET con ] ].

cage_v1_mal := v_-_le_rbst &
 [ ORTH < "cage" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cage_v_1_rel",
            PHON.ONSET con ] ].

;; Deprecate space
;;
can_aux_neg_rbst := v_vp_mdl-n_le &
 [ ORTH < "can", "not" >,
   SYNSEM [ LKEYS.KEYREL.PRED _can_v_modal_rel,
            PHON.ONSET con ],
   GENRE robust ].

can_aux_neg_1_rbst := v_vp_mdl-n_le &
 [ ORTH < "can't" >,
   SYNSEM [ LKEYS.KEYREL.PRED _can_v_modal_rel,
            PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

can_aux_neg_2_rbst := v_vp_mdl-n_le &
 [ ORTH < "can", "'t" >,
   SYNSEM [ LKEYS.KEYREL.PRED _can_v_modal_rel,
            PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

can_fin_mal := v_vp_fin_le_rbst &
 [ ORTH < "can" >,
   SYNSEM [ LKEYS.KEYREL.PRED _can_v_modal_rel,
            PHON.ONSET con ] ].

can_opener_n1 := n_-_c_le &
 [ ORTH < "can", "opener" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_can+opener_n_1_rel",
            PHON.ONSET con ] ].

canned_a1 := aj_-_i_le &
 [ ORTH < "canned" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_canned_a_1_rel",
            PHON.ONSET con ] ].

capable_a1_mal := aj_vp_i-seq-pp_le_rbst &
 [ ORTH < "capable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_capable_a_of_rel",
            PHON.ONSET con ] ].

capable_a1_for_of_mal := aj_pp_i_le_rbst &
 [ ORTH < "capable" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_capable_a_of_rel" ],
            PHON.ONSET con ] ].

captain_n2 := n_-_c-pre-ttl_le &
 [ ORTH < "captain" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_captain_n_of_rel",
            LOCAL.CAT.HEAD.MINORS.MIN pre_title_rel,
            PHON.ONSET con ] ].

capture_the_flag_n1 := n_-_pn_le &
 [ ORTH < "Capture", "the", "Flag" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Capture+the+Flag",
            PHON.ONSET con ] ].

caring_nounif_n1 := n_-_pn-nounif_le &
 [ ORTH < "Caring" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Caring",
            PHON.ONSET con ] ].

caring_for_our_forests_n1 := n_-_pn-sg_le &
 [ ORTH < "Caring", "For", "Our", "Forests" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Caring+for+Our+Forests",
            PHON.ONSET con ] ].

caring_for_our_forests_n2 := n_-_pn-sg_le &
 [ ORTH < "Caring", "for", "Our", "Forests" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Caring+for+Our+Forests",
            PHON.ONSET con ] ].

caring_for_our_forests_n3 := n_-_pn-sg_le &
 [ ORTH < "Caring", "for", "our", "Forests" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Caring+for+Our+Forests",
            PHON.ONSET con ] ].

caring_for_our_forests_n4 := n_-_pn-sg_le &
 [ ORTH < "Caring", "For", "Our", "Forest" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Caring+for+Our+Forests",
            PHON.ONSET con ] ].

caring_for_our_forests_n5 := n_-_pn-sg_le &
 [ ORTH < "Caring", "for", "Our", "Forest" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Caring+for+Our+Forests",
            PHON.ONSET con ] ].

caring_for_our_forests_n6 := n_-_pn-sg_le &
 [ ORTH < "Caring", "for", "our", "Forest" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Caring+for+Our+Forests",
            PHON.ONSET con ] ].

caring_for_our_forests_n7 := n_-_pn-sg_le &
 [ ORTH < "Caring", "for", "our", "forests" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Caring+for+Our+Forests",
            PHON.ONSET con ] ].

caring_for_our_forests_n8 := n_-_pn-sg_le &
 [ ORTH < "Caring", "for", "our", "forest" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Caring+for+Our+Forests",
            PHON.ONSET con ] ].

;; DPF 2019-04-24 - Block extraction, to avoid robust 
;; |I feel too carsick to care|.
;;
care_about_v1_mal := v_np_pp_le_rbst &
 [ ORTH < "care" >,
   SYNSEM [ LKEYS [ KEYREL.PRED "_care_v_about_rel" ],
	    LOCAL.CAT.VAL.COMPS.FIRST canonical_synsem,
            PHON.ONSET con ] ].

careful_adv1_rbst := av_-_i-vp-po_le_mal &
 [ ORTH < "careful" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_careful_a_1_rel",
            LOCAL.CAT.HEAD.MOD.FIRST.MODIFD.RPERIPH bool,
            PHON.ONSET con ] ].

carrolls_n1 := n_-_pn-pl-def_le &
 [ ORTH < "Carrolls" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Carroll",
            PHON.ONSET con ] ].

carry_v1_mal := v_p_le_pas_rbst &
 [ ORTH < "carry" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_carry_v_out_rel" ],
            PHON.ONSET con ] ].

cater_for_to_v1_mal := v_pp_e_le_rbst &
 [ ORTH < "cater" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_cater_v_to_rel" ],
            PHON.ONSET con ] ].

cater_on_to_v1_mal := v_pp_e_le_rbst &
 [ ORTH < "cater" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_cater_v_to_rel" ],
            PHON.ONSET con ] ].

cater_to_v1_mal := v_np_pp_le_rbst &
 [ ORTH < "cater" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cater_v_to_rel",
            PHON.ONSET con ] ].

#|
cattle_n1_mal := n_-_c-sg-nom_le_rbst &
 [ ORTH < "cattle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cow_n_1_rel",
            PHON.ONSET con ] ].
|#

;; |causes X grow|
cause_v1_bse_mal := v_np-vp_bse_le_rbst &
 [ ORTH < "cause" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cause_v_1_rel",
            PHON.ONSET con ] ].

causing_because_rbst := p_cp_s-tns_le &
 [ ORTH < "causing" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_because_x_rel",
            PHON.ONSET con ],
   GENRE robust ].

causing_because_past_rbst := p_cp_s-past_le &
 [ ORTH < "causing" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_because_x_rel",
            PHON.ONSET con ],
   GENRE robust ].

cctv_n1 := n_-_m-maycap_le &
 [ ORTH < "CCTV" >,
   ALTS.PLMASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_CCTV_n_1_rel",
            PHON.ONSET con ] ].

cctv_n2 := n_-_c-maycap_le &
 [ ORTH < "CCTV" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_CCTV_n_1_rel",
            LOCAL.CAT.HEAD.MINORS.NORM norm_rel,
            PHON.ONSET voc ] ].

cctv_nounif_n1 := n_-_pn-nounif_le &
 [ ORTH < "CCTV" >,
   SYNSEM [ LKEYS.KEYREL.CARG "CCTV",
            PHON.ONSET con ] ].

ce_temp_7 := x_-_bc-ad_le &
 [ ORTH < "C", ".~", "E." >,
   SYNSEM [ LKEYS.KEYREL [ CARG "CE_time",
                             PRED "_ce_x_rel" ],
            PHON.ONSET con ] ].

ce_temp_8 := x_-_bc-ad_le &
 [ ORTH < "C", ".~", "E" >,
   SYNSEM [ LKEYS.KEYREL [ CARG "CE_time",
                             PRED "_ce_x_rel" ],
            PHON.ONSET con ] ].

ce_temp_p7 := pp_-_i-nm-tmp_le &
 [ ORTH < "C", ".~", "E." >,
   SYNSEM [ LKEYS.KEYREL.PRED _ce_p_temp_rel,
            PHON.ONSET con ] ].

ce_temp_p8 := pp_-_i-nm-tmp_le &
 [ ORTH < "C", ".~", "E" >,
   SYNSEM [ LKEYS.KEYREL.PRED _ce_p_temp_rel,
            PHON.ONSET con ] ].

ce_temp_year_7 := n_-_c-sg-cpd_le &
 [ ORTH < "C", ".~", "E." >,
   SYNSEM [ LKEYS.KEYREL [ CARG "CE_time",
                             PRED "_ce_x_rel" ],
            PHON.ONSET con ] ].

ce_temp_year_8 := n_-_c-sg-cpd_le &
 [ ORTH < "C", ".~", "E" >,
   SYNSEM [ LKEYS.KEYREL [ CARG "CE_time",
                             PRED "_ce_x_rel" ],
            PHON.ONSET con ] ].

;; Missing |to| for raising: |they tend win.|
chance_v1_mal := v_vp_ssr-nimp_le_rbst &
 [ ORTH < "chance" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chance_v_1_rel",
            PHON.ONSET con ] ].

change_with-for_v_mal := v_np-pp_e_le_rbst &
 [ ORTH < "change" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_change_v_for_rel" ],
            PHON.ONSET con ] ].

changs_n1 := n_-_pn-pl-def_le &
 [ ORTH < "Changs" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Chang",
            PHON.ONSET con ] ].

cheaper_adv_mal := av_-_i-vp-cmp_le_rbst &
 [ ORTH < "cheaper" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cheaper_a_1_rel",
            PHON.ONSET con ] ].

cheaper_a1_mal := aj_-_i-cmp_le_rbst &
 [ ORTH < "cheaper" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cheap_a_1_rel",
            PHON.ONSET con ] ].

;; DPF 2018-03-12 - Removed LPERIPH +, no longer compatible with lex type
chewing_gum_n1 := n_-_m_le &
 [ ORTH < "chewing", "gum" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chewing+gum_n_1_rel",
            PHON.ONSET con ] ].

childrens_n1_mal := n_-_c-pl_le_rbst &
 [ ORTH < "childrens" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_child_n_1_rel",
            PHON.ONSET con ] ].

childrens_a1_mal := aj_-_i-cmpd_le_rbst &
 [ ORTH < "childrens" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_childrens_a_1_rel",
            PHON.ONSET con ] ].

childs_a1_mal := aj_-_i-cmpd_le_rbst &
 [ ORTH < "childs" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_childs_a_1_rel",
            PHON.ONSET con ] ].

chilly_a1_mal := av_-_i-vp-adj_le_rbst &
 [ ORTH < "chilly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chilly_a_1_rel",
            PHON.ONSET con ] ].

china_n1_nocap_mal := n_-_pn_le_nocap_rbst &
 [ ORTH < "China" >,
   SYNSEM [ LKEYS.KEYREL.CARG "China",
            PHON.ONSET con ] ].

; |China people in place of Chinese people|
china_n1_mal := n_-_c-cpd_le_rbst &
 [ ORTH < "China" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_China_n_1_rel",
            PHON.ONSET con ],
   GENRE robust ].

;; |Chinese culture|
chinese_a1 := aj_-_i-cap_le &
 [ ORTH < "Chinese" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chinese_a_1_rel",
	    LOCAL.CAT.HEAD.MOD.FIRST.MODIFD notmod_or_rmod,
            PHON.ONSET con ] ].

;; |Chinese most important city| => |China's most ...|
;; Tried adding MOD..PN 3s but this blocks sentday example with "cities"
;; so instead require unexpressed SPR.
;;
chinese_a1_sup_rbst := aj_-_i-cap_le &
 [ ORTH < "Chinese" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chinese_a_1_rel",
	    LOCAL.CAT.HEAD.MOD.FIRST [ MODIFD lmod & [ LPERIPH na ],
	                               LOCAL.CAT [ HEAD.--MALAGR na,
						   VAL.SPR.FIRST unexpressed ]],
	    PHON.ONSET con ],
   GENRE robust ].

chinese_nat_n1_mal := n_-_c-natlty_le_rbst &
 [ ORTH < "Chinese" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chinese_n_1_rel",
            PHON.ONSET con ] ].

chinese_nat_nocap_n1_mal := n_-_c-natlty-nocap_le_rbst &
 [ ORTH < "Chinese" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chinese_n_1_rel",
            PHON.ONSET con ] ].

chinese_festival_n1 := n_-_c-nm_le &
 [ ORTH < "Chinese", "Festival" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Chinese+Festival",
            PHON.ONSET con ] ].

;; |Chinese traditional culture|
chinese_a1_mod := aj_-_i-cap_le &
 [ ORTH < "Chinese" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chinese_a_1_rel",
	    LOCAL.CAT.HEAD.MOD.FIRST.MODIFD lmod & [ LPERIPH bool ],
            PHON.ONSET con ] ].

chinese_a1_nocap_mal := aj_-_i_le_nocap_rbst &
 [ ORTH < "chinese" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chinese_a_1_rel",
            PHON.ONSET con ] ].

chinese_n1_nocap_mal := n_-_pn_le_nocap_rbst &
 [ ORTH < "Chinese" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Chinese",
            LOCAL.CAT.VAL.SPR.FIRST unexpressed,
            PHON.ONSET con ] ].

chinese_new_year := n_-_m-hldy_le &
 [ ORTH < "Chinese", "New", "Year" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Chinese+New+Year",
            MODIFD notmod,
            PHON.ONSET con ] ].

circulate_circulation_n1_rbst := n_pp_mc-of_le &
 [ ORTH < "circulate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_circulation_n_of_rel",
            LOCAL.CAT.VAL.COMPS.FIRST.OPT -,
            PHON.ONSET con ],
   GENRE robust ].

;; While we are blocking vocatives (for better precision generally), add
;; this hack
class_root_pre := av_-_s-cp-mc-pr_le &
 [ ORTH < "class" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_class_n_voc_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

class_n1 := n_pp_c-of_le &
 [ ORTH < "class" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_class_n_of_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

class_m_n1 := n_-_m-nocnh_le &
 [ ORTH < "class" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_class_n_of_rel",
            PHON.ONSET con ] ].

clean_particle := p_np_ptcl_le &
 [ ORTH < "clean" >,
   SYNSEM [ LKEYS.KEYREL.PRED _clean_p_sel_rel,
            LOCAL.CAT.VAL.COMPS.FIRST unexpressed,
            PHON.ONSET con ] ].

cleaner_adv_mal := av_-_i-vp-cmp_le_rbst &
 [ ORTH < "cleaner" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cleaner_a_1_rel",
            PHON.ONSET con ] ].

cleaner_aj_mal := aj_-_i-cmp_le_rbst &
 [ ORTH < "cleaner" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_clean_a_of_rel",
            PHON.ONSET con ] ].

#|
clergy_n1_mal := n_-_c-sg-nom_le_rbst &
 [ ORTH < "clergy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_clergy_n_1_rel",
            PHON.ONSET con ] ].
|#

;; NP instead of PP
close_a1_mal := aj_np_i_le_rbst &
 [ ORTH < "close" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_close_a_to_rel",
            LOCAL.CAT.HEAD.MINORS [ MIN norm_adj_rel,
				    ALTMIN comp_er_rel ],
            PHON.ONSET con ] ].

close_closely_adv1_mal := av_-_i-po-pr_le_rbst &
 [ ORTH < "close" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_close_a_1_rel",
            PHON.ONSET con ] ].

closely_a1_rbst := aj_pp_i-obl_le &
 [ ORTH < "closely" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_close_a_to_rel" ],
            PHON.ONSET con ],
   GENRE robust ].

clothes_n1_mal := n_-_c-sg_le_rbst &
 [ ORTH < "clothe" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_clothes_n_1_rel",
            PHON.ONSET con ] ].

club_n2 := n_-_pn_le &
 [ ORTH < "Club" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Club",
            PHON.ONSET con ] ].

cohens_n1 := n_-_pn-pl-def_le &
 [ ORTH < "Cohens" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Cohen",
            PHON.ONSET con ] ].

;; |he has bad cold|
cold_mod_mal := n_-_m-nomod_le_rbst &
 [ ORTH < "cold" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cold_n_1_rel",
            PHON.ONSET con ] ].

colonel_n2 := n_-_c-pre-ttl_le &
 [ ORTH < "colonel" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_colonel_n_1_rel",
            LOCAL.CAT.HEAD.MINORS.MIN pre_title_rel,
            PHON.ONSET con ] ].

come_v3_locinv_mal := v_np_locinv-mv_le_rbst &
 [ ORTH < "come" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_come_v_1_rel",
            PHON.ONSET con ] ].

comely_a1_mal := av_-_i-vp-adj_le_rbst &
 [ ORTH < "comely" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_comely_a_1_rel",
            PHON.ONSET con ] ].

comma_pre_root_adv1_rbst := av_-_s-cp-mc-pr_le &
 [ ORTH < "," >,
   SYNSEM [ LKEYS.KEYREL.PRED "_comma-pnct_a_1_rel",
            PHON.ONSET con ],
   GENRE robust ].

comment_on_v1_mal := v_pp_np_le_rbst &
 [ ORTH < "comment" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_comment_v_1_rel" ],
            PHON.ONSET con ] ].

;; Hack addition since we pretend that "knowledge" cannot be modified, to
;; avoid other unwanted parses.
common_knowledge_n1 := n_-_m-nomod_le &
 [ ORTH < "common", "knowledge" >,
   ALTS.PLMASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_common+knowledge_n_1_rel",
            PHON.ONSET con ] ].

;; DPF 2019-12-19 - Avoid for partitives, as in 
;; |Why don't you communicate more with your parents or friends?|.
;; DPF 2020-09-29 - But without partitive, we also don't get robust
;; "We communicated someone", so give up on this one for now.
;;
#|
communicate_with_v1_mal := v_np_pp_le_rbst &
 [ ORTH < "communicate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_communicate_v_with_rel",
   	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD non_partn,         
            PHON.ONSET con ] ].
|#

communicate_with_sp_v1_rbst := v_pp_e_le &
 [ ORTH < "comunicate" >,
   SYNSEM [ LKEYS [ --COMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_communicate_v_with_rel" ],
            PHON.ONSET con ],
   GENRE robust ].

;; 2020-06-01 - This blocks |They wanted some company| so undo.
#|
company_n1 := n_-_m-nomod_le &
 [ ORTH < "company" >,
   ALTS.PLMASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_company_n_of_rel",
            PHON.ONSET con ] ].

company_n2 := n_-_c_le &
 [ ORTH < "company" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_company_n_of_rel",
            LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].
|#

company_mod_mal := n_-_m-nomod_le_rbst &
 [ ORTH < "company" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_company_n_of_rel",
            PHON.ONSET con ] ].

comparing_to_with_a1_rbst := aj_pp_i-obl_le &
 [ ORTH < "comparing" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_compare_a_with_rel" ],
            PHON.ONSET con ],
   GENRE robust ].

compete_for_v1_mal := v_np_pp_le_rbst &
 [ ORTH < "compete" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_compete_v_for_rel",
            PHON.ONSET con ] ].

complain_about_v1_mal := v_np_pp_le_rbst &
 [ ORTH < "complain" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_complain_v_about_rel",
            PHON.ONSET con ] ].

comply_with_v1_mal := v_np_pp_le_rbst &
 [ ORTH < "comply" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_comply_v_with_rel",
            PHON.ONSET con ] ].

comprise_of_v1_mal := v_pp_np_le_rbst &
 [ ORTH < "comprise" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_comprise_v_1_rel" ],
            PHON.ONSET con ] ].

concern_about_v1_mal := v_pp_np_le_rbst &
 [ ORTH < "concern" >,
   SYNSEM [ LKEYS [ --COMPKEY _about_p_sel_rel,
                    KEYREL.PRED "_concern_v_1_rel" ],
            PHON.ONSET con ] ].

concern_to_for_n1_mal := n_pp_c_le_rbst &
 [ ORTH < "concern" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
		    KEYREL.PRED "_concern_n_for_rel" ],
            PHON.ONSET con ] ].

concur_v1_mal := v_np_cp_le_rbst &
 [ ORTH < "concur" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_concur_v_1_rel",
            PHON.ONSET con ] ].

confines_n1_mal := n_-_c-sg_le_rbst &
 [ ORTH < "confine" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_confines_n_1_rel",
            PHON.ONSET con ] ].

confusing_a1 := aj_-_i-prd_le &
 [ ORTH < "confusing" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_confusing_a_1_rel",
            PHON.ONSET con ] ].

congratulations_n1_mal := n_-_c-sg_le_rbst &
 [ ORTH < "congratulation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_congratulations_n_1_rel",
            PHON.ONSET con ] ].

conjecture_v1_mal := v_np_cp_le_rbst &
 [ ORTH < "conjecture" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_conjecture_v_1_rel",
            PHON.ONSET con ] ].

conjecture_v2_mal := v_np-vp_sor_le_rbst &
 [ ORTH < "conjecture" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_conjecture_v_1_rel",
            PHON.ONSET con ] ].

consequence_on_for_n1_mal := n_pp_c_le_rbst &
 [ ORTH < "consequence" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
		    KEYREL.PRED "_consequence_n_for_rel" ],
            PHON.ONSET con ] ].

consequently_adv1_mal := av_-_i-pr-aux_le_rbst &
 [ ORTH < "consequently" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_consequent_a_1_rel",
            PHON.ONSET con ] ].

consider_for_v1_mal := v_pp_np_le_rbst &
 [ ORTH < "consider" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_consider_v_1_rel" ],
            PHON.ONSET con ] ].

consider_in_v1_mal := v_pp_np_le_rbst &
 [ ORTH < "consider" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_consider_v_1_rel" ],
            PHON.ONSET con ] ].

consider_to_v1_mal := v_pp_np_le_rbst &
 [ ORTH < "consider" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_consider_v_1_rel" ],
            PHON.ONSET con ] ].

;; |considered [to] be the following|
consider_v1_mal := v_np-vp_bse_le_rbst &
 [ ORTH < "consider" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_consider_v_1_rel",
            PHON.ONSET con ] ].

consider_v6_mal := v_vp_seq-prp_le_rbst &
 [ ORTH < "consider" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_consider_v_1_rel",
            PHON.ONSET con ] ].

consist_of_v1_mal := v_np_pp_le_rbst &
 [ ORTH < "consist" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_consist_v_of_rel",
            PHON.ONSET con ] ].

constitute_as_v1_mal := v_pp_np_le_rbst &
 [ ORTH < "constitute" >,
   SYNSEM [ LKEYS [ --COMPKEY _as_p_sel_rel,
                    KEYREL.PRED "_constitute_v_1_rel" ],
            PHON.ONSET con ] ].

constraint_constrain_v3_rbst := v_np_le &
 [ ORTH < "constraint" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_constrain_v_from_rel",
            PHON.ONSET con ],
   GENRE robust ].

construct_v1_mal := v_-_le_rbst &
 [ ORTH < "construct" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_construct_v_1_rel",
            PHON.ONSET con ] ].

contact_v1_mal := v_-_le_rbst &
 [ ORTH < "contact" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_contact_v_1_rel",
            PHON.ONSET con ] ].

contact_with_v1_mal := v_pp_np_le_rbst &
 [ ORTH < "contact" >,
   SYNSEM [ LKEYS [ --COMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_contact_v_1_rel" ],
            PHON.ONSET con ] ].

contemplate_v2_mal := v_vp_seq-prp_le_rbst &
 [ ORTH < "contemplate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_contemplate_v_1_rel",
            PHON.ONSET con ] ].

contend_v1_mal := v_np_cp_le_rbst &
 [ ORTH < "contend" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_contend_v_1_rel",
            PHON.ONSET con ] ].

contradict_with_v1_mal := v_pp_np_le_rbst &
 [ ORTH < "contradict" >,
   SYNSEM [ LKEYS [ --COMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_contradict_v_1_rel" ],
            PHON.ONSET con ] ].

contribute_in_to_v1_mal := v_pp_e_le_rbst &
 [ ORTH < "contribute" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_contribute_v_to_rel" ],
            PHON.ONSET con ] ].

contribution_mod_mal := n_-_m-nomod_le_rbst &
 [ ORTH < "contribution" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_contribution_n_1_rel",
            PHON.ONSET con ] ].

convenient_of_for_a1_mal := aj_pp_i_le_rbst &
 [ ORTH < "convenient" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_convenient_a_for_rel" ],
            PHON.ONSET con ] ].

convenient_to_for_a1_mal := aj_pp_i_le_rbst &
 [ ORTH < "convenient" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_convenient_a_for_rel" ],
            PHON.ONSET con ] ].

correspond_to_v1_mal := v_np_pp_le_rbst &
 [ ORTH < "correspond" >,
   SYNSEM [ LKEYS [ KEYREL.PRED "_correspond_v_to_rel" ],
            PHON.ONSET con ] ].

cosmetics_n1_mal := n_-_c-sg_le_rbst &
 [ ORTH < "cosmetic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cosmetics_n_1_rel",
            PHON.ONSET con ] ].

cost_in_of_n1_mal := n_pp_c_le_rbst &
 [ ORTH < "cost" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_cost_n_of_rel" ],
            PHON.ONSET con ] ].

; |cost money from him| => |cost him money|
cost_v1_mal := v_np-pp_np_le_rbst &
 [ ORTH < "cost" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _from_p_rel,
   	            KEYREL.PRED "_cost_v_1_rel" ],
	    LOCAL.CAT.HEAD [ TAM.SAME-PAST +,
			     --MAL3SG - ],
            PHON.ONSET con ] ].

costly_a1_mal := av_-_i-vp-adj_le_rbst &
 [ ORTH < "costly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_costly_a_1_rel",
            PHON.ONSET con ] ].

cotton_club_n1 := n_-_c-nm_le &
 [ ORTH < "Cotton", "Club" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Cotton+Club",
            PHON.ONSET con ] ].

couch_v1_rbst := v_np*_le &
 [ ORTH < "couch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_couch_v_1_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
            PHON.ONSET con ],
   GENRE robust ].

could_aux_neg_1_rbst := v_vp_mdl-n-pst_le &
 [ ORTH < "couldn't" >,
   SYNSEM [ LKEYS.KEYREL.PRED _can_v_modal_rel,
            PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

could_aux_neg_2_rbst := v_vp_mdl-n-pst_le &
 [ ORTH < "couldn", "'t" >,
   SYNSEM [ LKEYS.KEYREL.PRED _can_v_modal_rel,
            PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

could_aux_neg_1b_rbst := v_vp_mdl-n_le &
 [ ORTH < "couldn't" >,
   SYNSEM [ LKEYS.KEYREL.PRED _could_v_modal_rel,
            PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

could_fin_mal := v_vp_fin_le_rbst &
 [ ORTH < "could" >,
   SYNSEM [ LKEYS.KEYREL.PRED _could_v_modal_rel,
            PHON.ONSET con ] ].

counter_against_v1_mal := v_pp_np_le_rbst &
 [ ORTH < "counter" >,
   SYNSEM [ LKEYS [ --COMPKEY _against_p_sel_rel,
                    KEYREL.PRED "_counter_v_1_rel" ],
            PHON.ONSET con ] ].

cowardly_a1_mal := av_-_i-vp-adj_le_rbst &
 [ ORTH < "cowardly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cowardly_a_1_rel",
            PHON.ONSET con ] ].

cuddly_a1_mal := av_-_i-vp-adj_le_rbst &
 [ ORTH < "cuddly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cuddly_a_1_rel",
            PHON.ONSET con ] ].

cunninghams_n1 := n_-_pn-pl-def_le &
 [ ORTH < "Cunninghams" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Cunningham",
            PHON.ONSET con ] ].

cunninghams_n2 := n_-_pn-pl-nom_le &
 [ ORTH < "Cunninghams" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Cunningham",
            PHON.ONSET con ] ].

curly_a1_mal := av_-_i-vp-adj_le_rbst &
 [ ORTH < "curly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_curly_a_1_rel",
            PHON.ONSET con ] ].

d_grade_n1 := n_-_c_le &
 [ ORTH < "D" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_D_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,   
            PHON.ONSET con ] ].

dank_dark_n1_sp_rbst := n_-_m-nocnh_le &
 [ ORTH < "dank" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dark_n_1_rel",
	    LOCAL.CAT.VAL.SPR.FIRST expressed_synsem,
            PHON.ONSET con ],
   GENRE robust].

dare_aux_neg_1_rbst := v_vp_mdl-n_le &
 [ ORTH < "daren't" >,
   SYNSEM [ LKEYS.KEYREL.PRED _dare_v_qmodal_rel,
            PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

dare_aux_neg_2_rbst := v_vp_mdl-n_le &
 [ ORTH < "daren", "'t" >,
   SYNSEM [ LKEYS.KEYREL.PRED _dare_v_qmodal_rel,
            PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

dawn_v1_mal := v_np_caus_le_rbst &
 [ ORTH < "dawn" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dawn_v_1_rel",
            PHON.ONSET con ] ].

;; Add strange E.SAME-PAST + to block robust |one day last week|
;; DPF 2018-10-03 - Removed --BARE - so we can get |it was first day of school|
day_n := n_pp_c-day_le &
 [ ORTH < "day" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_day_n_of_rel",
   	    LOCAL.CONT.HOOK.INDEX.E.SAME-PAST +,
            PHON.ONSET con ],
   TOKENS.+LAST.+CLASS.+CASE non_capitalized ].

day_n_allcaps := n_pp_c-day_le &
 [ ORTH < "day" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_day_n_of_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ],
   TOKENS.+LAST.+CLASS.+CASE capitalized+upper ].

day_nounif_n1 := n_-_pn-nounif_le &
 [ ORTH < "Day" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Day",
            PHON.ONSET con ] ].

day_by_day_adv := pp_-_i_le &
 [ ORTH < "day", "by", "day" >,
   SYNSEM [ LKEYS.KEYREL.PRED _day+by+day_p_rel,
            PHON.ONSET voc ] ].

day_to_day_adv := pp_-_i_le &
 [ ORTH < "day", "to", "day" >,
   SYNSEM [ LKEYS.KEYREL.PRED _day+to+day_p_rel,
            PHON.ONSET voc ] ].

deadly_a1_mal := av_-_i-vp-adj_le_rbst &
 [ ORTH < "deadly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_deadly_a_1_rel",
            PHON.ONSET con ] ].

deads_n1_mal := n_-_c-pl_le_rbst &
 [ ORTH < "deads" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dead_n_1_rel",
            PHON.ONSET con ] ].

deathly_a1_mal := av_-_i-vp-adj_le_rbst &
 [ ORTH < "deathly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_deathly_a_1_rel",
            PHON.ONSET con ] ].

debate_of_on_n1_mal := n_pp_c_le_rbst &
 [ ORTH < "debate" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
		    KEYREL.PRED "_debate_n_on_rel" ],
            PHON.ONSET con ] ].

decide_v1_mal := v_vp_seq-bse_le_rbst &
  [ ORTH < "decide" >,
    SYNSEM [ LKEYS.KEYREL.PRED "_decide_v_1_rel",
	     PHON.ONSET con ] ].

decidedly_adv1_mal := av_-_i-pr-aux_le_rbst &
 [ ORTH < "decidedly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_decided_a_1_rel",
            PHON.ONSET con ] ].

decision_mod_mal := n_-_m-nomod_le_rbst &
 [ ORTH < "decision" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_decision_n_1_rel",
            PHON.ONSET con ] ].

declaration_of_independence_n1 := n_-_c-nm_le &
 [ ORTH < "Declaration", "of", "Independence" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Declaration+of+Independence",
            PHON.ONSET con ] ].

; |X has been decreased| => |X has decreased|
;; DPF 2022-04-23 - The intent of this entry is for inchoative mis-uses as in
;; "the population has been increased".  But it is not possible to consistently
;; distinguish "population" from "prices" as in "prices have been increased".
;; So comment out for now, and similarly for "increased" and "improved"
#|
decreased_v1_rbst := v_-_psv_le &
 [ ORTH < "decreased" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_decrease_v_1_rel",
            LOCAL.CAT.VAL.COMPS.FIRST unexpressed,
            PHON.ONSET voc ],
   GENRE robust ].
|#

;; |Y is decreased X| => |Y has decreased X|
decrease_psv_np_rbst := v_np-np_only_le &
 [ ORTH < "decrease" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_imcrease_v_1_rel",
            PHON.ONSET voc,
            LOCAL.CAT.HEAD.VFORM pas ],
   GENRE robust ].

deeper_adv_mal := av_-_i-vp-cmp_le_rbst &
 [ ORTH < "deeper" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_deeper_a_1_rel",
            PHON.ONSET con ] ].

deeper_a1_mal := aj_-_i-cmp_le_rbst &
 [ ORTH < "deeper" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_deep_a_1_rel",
            PHON.ONSET con ] ].

deeper_deg := av_-_dg-jom_le &
 [ ORTH < "deeper" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_deeper_x_deg_rel",
            PHON.ONSET con ] ].

define_definition_mal := n_-_c-vb_le_rbst &
 [ ORTH < "define" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_definition_n_1_rel",
            PHON.ONSET con ] ].

deliberate_v1_mal := v_np_cp_le_rbst &
 [ ORTH < "deliberate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_deliberate_v_1_rel",
            PHON.ONSET con ] ].

demand_of_for_n1_mal := n_pp_c_le_rbst &
 [ ORTH < "demand" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_demand_n_for_rel" ],
            PHON.ONSET con ] ].

demonstrate_np_np_mal := v_np-np_le_rbst &
 [ ORTH < "demonstrate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_demonstrate_v_to_rel",
            PHON.ONSET con ] ].

demur_v1_mal := v_np_cp_le_rbst &
 [ ORTH < "demur" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_demur_v_1_rel",
            PHON.ONSET con ] ].

dentists_a1_mal := aj_-_i-cmpd_le_rbst &
 [ ORTH < "dentists" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dentists_a_1_rel",
            PHON.ONSET con ] ].

deny_v3_mal := v_vp_seq-prp_le_rbst &
 [ ORTH < "deny" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_deny_v_to_rel",
            PHON.ONSET con ] ].

depend_on_v1_mal := v_np_pp_le_rbst &
 [ ORTH < "depend" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_depend_v_on_rel",
            PHON.ONSET con ] ].

designing_a1_mal := aj_vp_i-ing-ed_le_rbst &
 [ ORTH < "designing" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_designed_a_1_rel",
            PHON.ONSET con ] ].

despite_of_rbst := p_np_i_le &
 [ ORTH < "despite", "of" >,
   SYNSEM [ LKEYS.KEYREL.PRED _in+spite+of_p_rel,
            PHON.ONSET voc ],
   GENRE robust ].

deteriorate_v1_mal := v_np_caus_le_rbst &
 [ ORTH < "deteriorate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_deteriorate_v_1_rel",
            PHON.ONSET con ] ].

devote_for_to_v1_mal := v_np-pp_e_le_rbst &
 [ ORTH < "devote" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _for_p_sel_rel,
		    KEYREL.PRED "_devote_v_to_rel" ],
            PHON.ONSET con ] ].

devote_in_to_v1_mal := v_np-pp_e_le_rbst &
 [ ORTH < "devote" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _in_p_sel_rel,
		    KEYREL.PRED "_devote_v_to_rel" ],
            PHON.ONSET con ] ].

devote_into_to_v1_mal := v_np-pp_e_le_rbst &
 [ ORTH < "devote" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _into_p_sel_rel,
		    KEYREL.PRED "_devote_v_to_rel" ],
            PHON.ONSET con ] ].

dictates_n1_mal := n_-_c-sg_le_rbst &
 [ ORTH < "dictate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dictate_n_1_rel",
            PHON.ONSET con ] ].

did1_neg_1_rbst := v_vp_did-n_le &
 [ ORTH < "didn't" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

did1_neg_2_rbst := v_vp_did-n_le &
 [ ORTH < "didn", "'t" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

;; Removed ALTS.VPELLIP - since we want |He did not.|
did1_neg_7 := v_vp_did-n_le &
 [ ORTH < "did", "not" >,
   SYNSEM.PHON.ONSET con ].

;; 2020-07-02 - Decided to not treat positive do-support as an error, since
;; some usage is fine, we can't tell the difference, and wrong usage is perhaps
;; not so frequent.
#|
did1_pos := v_vp_did_le &
 [ ORTH < "did" >,
   SYNSEM [ LOCAL.CAT [ HEAD.INV +,
   	                VAL.COMPS.FIRST expressed_synsem ],
            PHON.ONSET con ] ].

did1_pos_ellip := v_vp_did_le &
 [ ORTH < "did" >,
   SYNSEM [ LOCAL.CAT.VAL.COMPS.FIRST unexpressed,
            PHON.ONSET con ] ].

;; DPF 2019-01-21 - Ranking improvements needed in order to prefer this over
;; ordinary "did", and similarly for "do" and "does".  FIX someday.
;;
did1_pos_rbst := v_vp_did_le_mal &
 [ ORTH < "did" >,
   SYNSEM [ PHON.ONSET con,
   	    LOCAL.CAT [ HEAD.INV -,
	                VAL.COMPS < expressed_synsem & 
	    		   	    [ MODIFD notmod_or_rmod ] > ] ],
   ALTS [ VPELLIP -,
          ADVADD - ] ].
|#

dig_v4 := v_pp_dir_le &
 [ ORTH < "dig" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dig_v_1_rel",
            PHON.ONSET con ] ].

;; 2020-07-02 - Decided to not treat positive do-support as an error, since
;; some usage is fine, we can't tell the difference, and wrong usage is perhaps
;; not so frequent.
#|
does1_pos := v_vp_does_le &
 [ ORTH < "does" >,
   SYNSEM [ LOCAL.CAT [ HEAD.INV +,
   	                VAL.COMPS.FIRST expressed_synsem ],
            PHON.ONSET con ] ].

does1_pos_rbst := v_vp_does_le_mal &
 [ ORTH < "does" >,
   SYNSEM [ PHON.ONSET con,
   	    LOCAL.CAT [ HEAD.INV -,
	                VAL.COMPS < expressed_synsem & 
	    		   	    [ MODIFD notmod_or_rmod ] > ] ],
   ALTS [ VPELLIP -,
          ADVADD - ] ].

does1_pos_ellip := v_vp_does_le &
 [ ORTH < "does" >,
   SYNSEM [ LOCAL.CAT.VAL.COMPS.FIRST unexpressed,
            PHON.ONSET con ] ].

does1_pos_ques := v_vp_does-q_le &
 [ ORTH < "does" >,
   SYNSEM.PHON.ONSET con ].
|#

does1_neg_rbst := v_vp_does-n_le &
 [ ORTH < "dos", "not" >,
   SYNSEM.PHON.ONSET con,
   GENRE robust ].

does1_neg_1_rbst := v_vp_does-n_le &
 [ ORTH < "doesn't" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

does1_neg_2_rbst := v_vp_does-n_le &
 [ ORTH < "doesn", "'t" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

do1_neg_1_rbst := v_vp_do-f-n_le &
 [ ORTH < "don't" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

do1_neg_2_rbst := v_vp_do-f-n_le &
 [ ORTH < "don", "'t" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

does1_neg_noapos_rbst := v_vp_does-n_le &
 [ ORTH < "doesnt" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST expressed_synsem ],
   GENRE robust ].

; |They don't[aren't] admired by anyone|
do_cop_are_neg_rbst := v_prd_are-n_le &
 [ ORTH < "don’t" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD verb & [ VFORM pas ] ],
   ALTS [ VPELLIP -,
	  SAI -,
	  ADVADD - ],
   GENRE robust ].

do1_pos_sg_rbst := va_does_le_mal &
 [ ORTH < "do" >,
   SYNSEM.PHON.ONSET con ].

;; For |he did arrived|
;;
do_have_rbst := v_vp_have-f_le &
 [ ORTH < "do" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST expressed_synsem ],
   ALTS.ADVADD -,
   GENRE robust ].

does_have_rbst := v_vp_has_le &
 [ ORTH < "does" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST expressed_synsem ],
   ALTS.ADVADD -,
   GENRE robust ].

did_have_rbst := v_vp_had_le &
 [ ORTH < "did" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST expressed_synsem ],
   ALTS.ADVADD -,
   GENRE robust ].

did1_neg_noapos_rbst := v_vp_did-n_le &
 [ ORTH < "didnt" >,
   SYNSEM.PHON.ONSET con,
   GENRE robust ].

do1_neg_noapos_rbst := v_vp_do-f-n_le &
 [ ORTH < "dont" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST expressed_synsem ],
   GENRE robust ].

do1_neg_aux := v_vp_do-f-n_le &
 [ ORTH < "do", "not" >,
   SYNSEM.PHON.ONSET con ].

; |She doesn't admired by anyone|
does_cop_is_neg_rbst := v_prd_is-n_le &
 [ ORTH < "doesn’t" >,
   SYNSEM [ PHON.ONSET voc,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD verb & [ VFORM pas ] ],
   ALTS [ VPELLIP -,
	  SAI -,
	  ADVADD - ],
   GENRE robust ].

does1_pos_pl_rbst := va_do_fin_le_mal &
 [ ORTH < "does" >,
   SYNSEM.PHON.ONSET con ].

does1_not_1 := v_vp_does-n_le &
 [ ORTH < "does", "not" >,
   SYNSEM.PHON.ONSET con ].

; be_past_neg_lex_entry & be_cop_neg
; |She didn't[wasn't] admired by anyone|
do_c_be_neg_mal := v_do-be-past-neg_le_rbst &
 [ ORTH < "didn’t" >,
   SYNSEM.PHON.ONSET con ].

died_a1_post_mal := v_-_psv-post_le_rbst &
 [ ORTH < "died" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_die_v_1_rel",
            PHON.ONSET con ] ].

died_a1_pre_mal := v_-_psv-pre_le_rbst &
 [ ORTH < "died" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_die_v_1_rel",
            PHON.ONSET con ] ].

dietary_diet_n1_mal := n_-_c-aj_le_rbst &
 [ ORTH < "dietary" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_diet_n_1_rel",
            PHON.ONSET con ] ].

;; |They difficult to read fine print| => |They find it difficult to ...|
difficult_find_v1_vp_mal := v_vp_seq-adj_le_rbst &
 [ ORTH < "difficult" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_find_v_difficult_rel",
            PHON.ONSET con ] ].

disadvantage_on_of_n1_mal := n_pp_c_le_rbst &
 [ ORTH < "disadvantage" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_disadvantage_n_of_rel" ],
            PHON.ONSET con ] ].

disadvantage_to_for_n1_mal := n_pp_c_le_rbst &
 [ ORTH < "disadvantage" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_disadvantage_n_for_rel" ],
            PHON.ONSET voc ] ].

disagree_with_v1_mal := v_np_pp_le_rbst &
 [ ORTH < "disagree" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_disagree_v_with_rel",
            PHON.ONSET con ] ].

disappear_v1_mal := v_np_caus_le_rbst &
 [ ORTH < "disappear" >,
   ALTS.PASSIVE -,
   SYNSEM [ LKEYS.KEYREL.PRED "_disappear_v_1_rel",
            PHON.ONSET con ] ].

disclose_of_v1_mal := v_pp_np_le_rbst &
 [ ORTH < "disclose" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_disclose_v_1_rel" ],
            PHON.ONSET con ] ].

discontinue_v2_mal := v_vp_seq-prp_le_rbst &
 [ ORTH < "discontinue" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_discontinue_v_1_rel",
            PHON.ONSET con ] ].

discover_about_v1_mal := v_pp_np_le_rbst &
 [ ORTH < "discover" >,
   SYNSEM [ LKEYS [ --COMPKEY _about_p_sel_rel,
                    KEYREL.PRED "_discover_v_1_rel" ],
            PHON.ONSET con ] ].

discriminate_against_v1_mal := v_np_pp_le_rbst &
 [ ORTH < "discriminate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_discriminate_v_against_rel",
            PHON.ONSET con ] ].

discuss_about_v1_mal := v_pp_np_le_rbst &
 [ ORTH < "discuss" >,
   SYNSEM [ LKEYS [ --COMPKEY _about_p_sel_rel,
                    KEYREL.PRED "_discuss_v_1_rel" ],
            PHON.ONSET con ] ].

discuss_on_v1_mal := v_pp_np_le_rbst &
 [ ORTH < "discuss" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_discuss_v_1_rel" ],
            PHON.ONSET con ] ].

dislike_v3_mal := v_vp_seq-prp_le_rbst &
 [ ORTH < "dislike" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dislike_v_1_rel",
            PHON.ONSET con ] ].

distinguish_v2_mal := v_-_refl_le_rbst &
 [ ORTH < "distinguish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_distinguish_v_from_rel",
            PHON.ONSET con ] ].

doctors_a1_mal := aj_-_i-cmpd_le_rbst &
 [ ORTH < "doctors" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_doctors_a_1_rel",
            PHON.ONSET con ] ].

doctor_title_n1 := n_-_c-pre-ttl_le &
 [ ORTH < "Doctor" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_doctor_n_1_rel",
            LOCAL.CAT.HEAD.MINORS.MIN pre_title_rel,
            PHON.ONSET con ] ].

; Inflected forms of do

does1_neg_1_mal := va_doesnt_neg_pres_le_rbst &
 [ ORTH < "don't" >,
   SYNSEM.PHON.ONSET con ].

does1_neg_2_mal := va_doesnt_neg_pres_le_rbst &
 [ ORTH < "do", "n't" >,
   SYNSEM.PHON.ONSET con ].

does1_neg_3_mal := va_doesnt_neg_pres_le_rbst &
 [ ORTH < "don", "'t" >,
   SYNSEM.PHON.ONSET con ].

does1_neg_1_q_mal := va_doesnt_neg_pres_le_rbst &
 [ ORTH < "don‘t" >,
   SYNSEM.PHON.ONSET con ].

does1_neg_2_q_mal := va_doesnt_neg_pres_le_rbst &
 [ ORTH < "do", "n‘t" >,
   SYNSEM.PHON.ONSET con ].

does1_neg_3_q_mal := va_doesnt_neg_pres_le_rbst &
 [ ORTH < "don", "‘t" >,
   SYNSEM.PHON.ONSET con ].

does1_neg_1_u_mal := va_doesnt_neg_pres_le_rbst &
 [ ORTH < "don’t" >,
   SYNSEM.PHON.ONSET con ].

does1_neg_2_u_mal := va_doesnt_neg_pres_le_rbst &
 [ ORTH < "do", "n’t" >,
   SYNSEM.PHON.ONSET con ].

does1_neg_3_u_mal := va_doesnt_neg_pres_le_rbst &
 [ ORTH < "don", "’t" >,
   SYNSEM.PHON.ONSET con ].

do1_neg_1_mal := va_dont_neg_pres_le_rbst &
 [ ORTH < "doesn't" >,
   SYNSEM.PHON.ONSET con ].

do1_neg_2_mal := va_dont_neg_pres_le_rbst &
 [ ORTH < "does", "n't" >,
   SYNSEM.PHON.ONSET con ].

do1_neg_3_mal := va_dont_neg_pres_le_rbst &
 [ ORTH < "doesn", "'t" >,
   SYNSEM.PHON.ONSET con ].

do1_neg_1_q_mal := va_dont_neg_pres_le_rbst &
 [ ORTH < "doesn‘t" >,
   SYNSEM.PHON.ONSET con ].

do1_neg_2_q_mal := va_dont_neg_pres_le_rbst &
 [ ORTH < "does", "n‘t" >,
   SYNSEM.PHON.ONSET con ].

do1_neg_3_q_mal := va_dont_neg_pres_le_rbst &
 [ ORTH < "doesn", "‘t" >,
   SYNSEM.PHON.ONSET con ].

do1_neg_1_u_mal := va_dont_neg_pres_le_rbst &
 [ ORTH < "doesn’t" >,
   SYNSEM.PHON.ONSET con ].

do1_neg_2_u_mal := va_dont_neg_pres_le_rbst &
 [ ORTH < "does", "n’t" >,
   SYNSEM.PHON.ONSET con ].

do1_neg_3_u_mal := va_dont_neg_pres_le_rbst &
 [ ORTH < "doesn", "’t" >,
   SYNSEM.PHON.ONSET con ].

;; DPF 2020-01-04 - [INV +] prevents non-robust |We do arise| as desired, but
;; we need to further restrict this entry's COMP to expressed, so we can still
;; get the elided "do" of |Yes, we do.|
;; 2020-07-02 - Decided to not treat positive do-support as an error, since
;; some usage is fine, we can't tell the difference, and wrong usage is perhaps
;; not so frequent.
#|
do1_pos := v_vp_do-f_le &
 [ ORTH < "do" >,
   SYNSEM [ LOCAL.CAT [ HEAD.INV +,
   	                VAL.COMPS.FIRST expressed_synsem ],
            PHON.ONSET con ] ].

do1_pos_rbst := v_vp_do-f_le_mal &
 [ ORTH < "do" >,
   SYNSEM [ PHON.ONSET con,
   	    LOCAL.CAT [ HEAD.INV -,
	                VAL.COMPS < expressed_synsem & 
	    		  	    [ MODIFD notmod_or_rmod ] > ] ],
   ALTS [ VPELLIP -,
          ADVADD - ] ].

do1_pos_ellip := v_vp_do-f_le &
 [ ORTH < "do" >,
   SYNSEM [ LOCAL.CAT.VAL.COMPS.FIRST unexpressed,
            PHON.ONSET con ] ].

do1_pos_ques := v_vp_do-q_le &
 [ ORTH < "do" >,
   SYNSEM.PHON.ONSET con ].
|#

doctor_abb_n1 := n_-_c-pre-ttl_le &
 [ ORTH < "Dr" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_doctor_n_1_rel",
            LOCAL.CAT.HEAD.MINORS.MIN pre_title_rel,
            PHON.ONSET con ] ].

doctor_abb_n2 := n_-_c-pre-ttl_le &
 [ ORTH < "Dr." >,
   SYNSEM [ LKEYS.KEYREL.PRED "_doctor_n_1_rel",
            LOCAL.CAT.HEAD.MINORS.MIN pre_title_rel,
            PHON.ONSET con ] ].

doctor_abb_n2_mal := n_-_c-pre-ttl-sdwch_le_rbst &
 [ ORTH < "Dr", ".~" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_doctor_n_1_rel",
            LOCAL.CAT.HEAD.MINORS.MIN pre_title_rel,
            PHON.ONSET con ] ].

does_pn_np1 := n_-_pn-nounif_le &
 [ ORTH < "Does" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Does",
            PHON.ONSET con ] ].

dog_jump_v1 := v_-_le &
 [ ORTH < "dog", "-", "jump" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dog+jump_v_1_rel",
            PHON.ONSET con ] ].

dog_jump_v2 := v_-_le &
 [ ORTH < "dog", "jump" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dog+jump_v_1_rel",
            PHON.ONSET con ] ].

dog_puppy_n1_rbst := n_-_c_le &
 [ ORTH < "dog", "puppy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dog+puppy_n_1_rel",
            PHON.ONSET con ],
   GENRE robust ].

dog_walk_v1 := v_-_le &
 [ ORTH < "dog", "walk" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dog+walk_v_1_rel",
            PHON.ONSET con ] ].

;; |done to sing|
done_a1_mal := aj_vp_i-seq-prp_le_rbst &
 [ ORTH < "done" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_done_a_1_rel",
            PHON.ONSET con ] ].

;; DPF 2017-09-06 - This is better handled via wrong inflection.
#|
done_v1_rbst := v_np_le &
 [ ORTH < "done" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_do_v_1_rel",
            PHON.ONSET con ],
   GENRE robust ].
|#

dont_1_rbst := v_vp_dont-imp_le &
 [ ORTH < "don't" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

dont_2_rbst := v_vp_dont-imp_le &
 [ ORTH < "don", "'t" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

dont_imp_mal := v_vp_dont-imp_le_rbst &
 [ ORTH < "don’t" >,
   SYNSEM.PHON.ONSET con ].

doesnt_be_id_rbst := v_np_is-n_le &
 [ ORTH < "doesn’t", "be" >,
   SYNSEM.PHON.ONSET con,
   GENRE robust ].

does_not_be_id_rbst := v_np_is-n_le &
 [ ORTH < "does", "not", "be" >,
   SYNSEM.PHON.ONSET con,
   GENRE robust ].

dont_be_id_rbst := v_np_are-n_le &
 [ ORTH < "don’t", "be" >,
   SYNSEM.PHON.ONSET con,
   GENRE robust ].

do_not_be_id_rbst := v_np_are-n_le &
 [ ORTH < "do", "not", "be" >,
   SYNSEM.PHON.ONSET con,
   GENRE robust ].

doesnt_be_prd_rbst := v_prd_is-n_le &
 [ ORTH < "doesn’t", "be" >,
   SYNSEM.PHON.ONSET con,
   GENRE robust ].

does_not_be_prd_rbst := v_prd_is-n_le &
 [ ORTH < "does", "not", "be" >,
   SYNSEM.PHON.ONSET con,
   GENRE robust ].

dont_be_prd_rbst := v_prd_are-n_le &
 [ ORTH < "don’t", "be" >,
   SYNSEM.PHON.ONSET con,
   GENRE robust ].

do_not_be_prd_rbst := v_prd_are-n_le &
 [ ORTH < "do", "not", "be" >,
   SYNSEM.PHON.ONSET con,
   GENRE robust ].

downhill_a1_sp_rbst := aj_-_i-att_le &
 [ ORTH < "down", "hill" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_downhill_a_1_rel",
            PHON.ONSET con ],
   GENRE robust ].

downhill_n1_sp_rbst := n_-_c_le &
 [ ORTH < "down", "hill" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_downhill_n_1_rel",
            PHON.ONSET con ],
   GENRE robust ].

downhill_pp_sp_rbst := n_-_ad-pl_le &
 [ ORTH < "down", "hill" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED _downhill_p_rel,
                    KEYREL.PRED place_n_rel ],
            PHON.ONSET con ],
   GENRE robust ].

downright_adv1_mal := av_-_i-pr-aux_le_rbst &
 [ ORTH < "downright" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_downright_a_1_rel",
            PHON.ONSET con ] ].

downstairs_door_n1 := n_-_c_le &
 [ ORTH < "downstairs", "door" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_downstairs+door_n_1_rel",
            PHON.ONSET con ] ].

dozens_n2_mal := n_np_c_le_rbst &
 [ ORTH < "dozens" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dozens_n_1_rel",
            LOCAL.AGR.PNG.PN 3p,
            PHON.ONSET con ] ].

drama_n1 := n_-_c-maycap_le &
 [ ORTH < "drama" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_drama_n_1_rel",
            PHON.ONSET con ] ].

drama_n2 := n_-_m-nocnh_le &
 [ ORTH < "drama" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_drama_n_1_rel",
	    LOCAL.CAT.HEAD.--MALCM -,
            PHON.ONSET con ] ].

drawing_n1 := n_pp_c-of_le &
 [ ORTH < "drawing" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_drawing_n_of_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

drawing_n2 := n_-_m_le &
 [ ORTH < "drawing" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_drawing_n_of_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

dread_v3_mal := v_vp_seq-prp_le_rbst &
 [ ORTH < "dread" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dread_v_1_rel",
            PHON.ONSET con ] ].

dream_of_v1_mal := v_np_pp_le_rbst &
 [ ORTH < "dream" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dream_v_of_rel",
            PHON.ONSET con ] ].

dream_of_for_v1_mal := v_pp_e_le_rbst &
 [ ORTH < "dream" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_dream_v_of_rel" ],
            PHON.ONSET con ] ].

dream_of_cp_v1_mal := v_p-cp_le_rbst &
 [ ORTH < "dream" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_dream_v_of_rel" ],
            PHON.ONSET con ] ].

dregs_n1_mal := n_-_c-sg_le_rbst &
 [ ORTH < "dreg" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dregs_n_1_rel",
            PHON.ONSET con ] ].

during_temp := p_np_i-tmp_le &
 [ ORTH < "during" >,
   SYNSEM [ LKEYS [ --COMPKEY temp_nondim_rel,
                    KEYREL.PRED _during_p_rel ],
            PHON.ONSET con ] ].

; Since PET does not enforce detless-PP constraints, just list here.
;
during_break_adv := pp_-_i_le &
 [ ORTH < "during", "break" >,
   SYNSEM [ LKEYS.KEYREL.PRED _during+break_p_rel,
            PHON.ONSET con ] ].

e_g_cma_p8 := p_np_i-nmob_le &
 [ ORTH < "e", ".~", "g.," >,
   SYNSEM [ LKEYS.KEYREL.PRED _e+g_p_rel,
            PHON.ONSET voc ] ].

e_g_cma_p9 := p_cp_s-notop_le &
 [ ORTH < "e", ".~", "g.," >,
   SYNSEM [ LKEYS.KEYREL.PRED _e+g_p_rel,
            PHON.ONSET voc ] ].

e_g_disc_adv6 := av_-_dc-like-pr_le &
 [ ORTH < "e", ".~", "g." >,
   SYNSEM [ LKEYS.KEYREL.CARG "e+g",
            PHON.ONSET voc ] ].

e_g_disc_adv7 := av_-_dc-like-pr_le &
 [ ORTH < "e", ".~", "g" >,
   SYNSEM [ LKEYS.KEYREL.CARG "e+g",
            PHON.ONSET voc ] ].

e_g_p8 := p_np_i_le &
 [ ORTH < "e", ".~", "g." >,
   SYNSEM [ LKEYS.KEYREL.PRED _e+g_p_rel,
            PHON.ONSET voc ] ].

e_g_p9 := p_np_i_le &
 [ ORTH < "e", ".~", "g" >,
   SYNSEM [ LKEYS.KEYREL.PRED _e+g_p_rel,
            PHON.ONSET voc ] ].

e_g_pp6 := pp_-_i-nm_le &
 [ ORTH < "e", ".~", "g." >,
   SYNSEM [ LKEYS.KEYREL.PRED _e+g_p_rel,
            PHON.ONSET voc ] ].

e_g_pp7 := pp_-_i-nm_le &
 [ ORTH < "e", ".~", "g" >,
   SYNSEM [ LKEYS.KEYREL.PRED _e+g_p_rel,
            PHON.ONSET voc ] ].

each_every_a1_rbst := aj_-_i-poss-sg_le &
 [ ORTH < "each" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_every_a_1_rel",
            PHON.ONSET voc ],
   GENRE robust ].

earn_for_v1_mal := v_pp_np_le_rbst &
 [ ORTH < "earn" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_earn_v_1_rel" ],
            PHON.ONSET voc ] ].

earth_day := n_-_m-hldy_le &
 [ ORTH < "Earth", "Day" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Earth_Day",
            PHON.ONSET voc ] ].

earth_day_n2 := n_-_m-ssn-spr_le &
 [ ORTH < "Earth", "Day" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Earth_Day",
            PHON.ONSET voc ] ].

earth_day_n1_nocap_mal := n_-_m-hldy_le_nocap_rbst &
 [ ORTH <"Earth", "Day" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Earth+Day",
            MODIFD notmod,
            PHON.ONSET voc ] ].

earthly_a1_mal := av_-_i-vp-adj_le_rbst &
 [ ORTH < "earthly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_earthly_a_1_rel",
            PHON.ONSET voc ] ].

east_n1 := n_-_c-maycap_le &
 [ ORTH < "east" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_east_n_of_rel",
            PHON.ONSET con ] ].

easier_a1_mal := aj_-_i-cmp_le_rbst &
 [ ORTH < "easier" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_easy_a_for_rel",
            PHON.ONSET voc ] ].

east_pn_n2 := n_-_pn_le &
 [ ORTH < "East" >,
   SYNSEM [ LKEYS.KEYREL.CARG "East",
            PHON.ONSET con ] ].

eaves_n1_mal := n_-_c-sg_le_rbst &
 [ ORTH < "eave" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_eaves_n_1_rel",
            PHON.ONSET voc ] ].

eco_friendly_a1_mal := av_-_i-vp-adj_le_rbst &
 [ ORTH < "eco", "friendly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_eco-friendly_a_1_rel",
            PHON.ONSET voc ] ].

eco_friendly_a2_mal := av_-_i-vp-adj_le_rbst &
 [ ORTH < "eco", "-", "friendly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_eco-friendly_a_1_rel",
            PHON.ONSET voc ] ].

effect_to_on_n1_mal := n_pp_c_le_rbst &
 [ ORTH < "effect" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
		    KEYREL.PRED "_effect_n_on_rel" ],
            PHON.ONSET voc ] ].

either_det_rbst := d_-_prt-plm_le &
 [ ORTH < "either" >,
   SYNSEM [ LKEYS.KEYREL.PRED _either_q_rel,
            PHON.ONSET voc ],
   ALTS.DETPART -,
   GENRE robust ].

elaborate_about_on_v1_mal := v_pp_e_le_rbst &
 [ ORTH < "elaborate" >,
   SYNSEM [ LKEYS [ --COMPKEY _about_p_sel_rel,
                    KEYREL.PRED "_elaborate_v_on_rel" ],
            PHON.ONSET voc ] ].

elderly_a1_mal := av_-_i-vp-adj_le_rbst &
 [ ORTH < "elderly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_elderly_a_1_rel",
            PHON.ONSET voc ] ].

#|
elderly_n1_mal := n_-_c-sg-nom_le_rbst &
 [ ORTH < "elderly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_elderly_n_1_rel",
            PHON.ONSET voc ] ].
|#

elderlys_n1_rbst := n_-_c-pl_le &
 [ ORTH < "elderlys" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_elderly_n_1_rel",
            PHON.ONSET voc ],
   GENRE robust ].

elect_a1_mal := aj_-_i-att_le_rbst &
 [ ORTH < "elect" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_elect_a_1_rel",
            PHON.ONSET voc ] ].

elect_v4_mal := v_np-np_nbar_le_rbst &
 [ ORTH < "elect" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_elect_v_1_rel",
            PHON.ONSET voc ] ].

electronics_n1_mal := n_-_c-sg_le_rbst &
 [ ORTH < "electronic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_electronics_n_1_rel",
            PHON.ONSET voc ] ].

else_deg_rbst := av_-_dg-jomv_le &
 [ ORTH < "else" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_else_x_deg_rel",
            LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CAT.HEAD basic_noun &
			      [ MINORS.NORM norm_or_no_rel ],
            PHON.ONSET voc ],
   GENRE robust ].

embarrassed_a2 := aj_cp_i-fin_le &
 [ ORTH < "embarrassed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_embarrassed_a_1_rel",
            PHON.ONSET voc ] ].

emphasize_on_v1_mal := v_pp_np_le_rbst &
 [ ORTH < "emphasize" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_emphasize_v_1_rel" ],
            PHON.ONSET voc ] ].

emphasize_on_br_v1_mal := v_pp_np_le_rbst &
 [ DIALECT br,
   ORTH < "emphasise" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_emphasize_v_1_rel" ],
            PHON.ONSET voc ] ].

enable_v1_mal := v_vp_seq_le_rbst &
 [ ORTH < "enable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_enable_v_1_rel",
            PHON.ONSET voc ] ].

encapsulate_np_np_mal := v_np-np_le_rbst &
 [ ORTH < "encapsulate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_encapsulate_v_1_rel",
            PHON.ONSET con ] ].

english_a1_nocap_mal := aj_-_i_le_nocap_rbst &
 [ ORTH < "english" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_english_a_1_rel",
            PHON.ONSET con ] ].

english_nocap_mal := n_-_pn_le_nocap_rbst &
 [ ORTH < "English" >,
   SYNSEM [ LKEYS.KEYREL.CARG "English",
            PHON.ONSET voc ] ].

;; |We enjoy how it tastes|
enjoy_v3 := v_cp_q_le &
 [ ORTH < "enjoy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_enjoy_v_1_rel",
            PHON.ONSET voc ] ].

enjoy_v2_mal := v_vp_seq-prp_le_rbst &
 [ ORTH < "enjoy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_enjoy_v_1_rel",
            PHON.ONSET voc ] ].

enjoy_v2_bse_mal := v_vp_seq-bse_le_rbst &
 [ ORTH < "enjoy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_enjoy_v_1_rel",
            PHON.ONSET voc ] ].

;; |an enough salary|
enough_a1_rbst := aj_-_i_le &
 [ ORTH < "enough" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_enough_a_1_rel",
	    LOCAL.CAT.HEAD [ MOD.FIRST.LOCAL.CAT.VAL.SPR.FIRST expressed_synsem,
	                     PRD - ],
            PHON.ONSET voc ],
   GENRE robust ].

enough_deg_rbst := av_-_dg-v_le &
 [ ORTH < "enough" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_enough_x_deg_rel",
            PHON.ONSET voc ],
   GENRE robust ].

enough_det_nondiv_mal := d_-_prt-plm_le_rbst &
 [ ORTH < "enough" >,
   SYNSEM [ LKEYS.KEYREL.PRED _enough_q_rel,
            PHON.ONSET voc ] ].

enquire_about_v1_mal := v_np_pp_le_rbst &
 [ ORTH < "enquire" >,
   SYNSEM [ LKEYS [ KEYREL.PRED "_enquire_v_about_rel" ],
            PHON.ONSET voc ] ].

environs_n1_mal := n_-_c-sg_le_rbst &
 [ ORTH < "environ" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_environs_n_1_rel",
            PHON.ONSET voc ] ].

envisage_v2_mal := v_vp_seq-prp_le_rbst &
 [ ORTH < "envisage" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_envisage_v_1_rel",
            PHON.ONSET voc ] ].

equal_to_v1_mal := v_pp_np_le_rbst &
 [ ORTH < "equal" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_equal_v_1_rel" ],
            PHON.ONSET con ] ].

essentially_adv1_mal := av_-_i-pr-aux_le_rbst &
 [ ORTH < "essentially" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_essential_a_1_rel",
            PHON.ONSET voc ] ].

; |Europe people in place of Chinese people|
europe_n1_mal := n_-_c-cpd_le_rbst &
 [ ORTH < "Europe" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_Europe_n_1_rel",
            PHON.ONSET con ],
   GENRE robust ].

european_a1_nocap_mal := aj_-_i_le_nocap_rbst &
 [ ORTH < "european" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_european_a_1_rel",
            PHON.ONSET con ] ].

eve_n1_nocap := n_-_c_le &
 [ ORTH < "eve" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_eve_n_of_rel",
            PHON.ONSET voc ],
   TOKENS.+LAST.+CLASS.+CASE non_capitalized ].

eve_nounif_n1 := n_-_pn-nounif_le &
 [ ORTH < "Eve" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Eve",
            PHON.ONSET voc ] ].

eve_n1_cap_rbst := n_pp_c-of-obl_le &
 [ ORTH < "eve" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_eve_n_of_rel",
            PHON.ONSET voc ],
   TOKENS.+LAST.+CLASS.+CASE capitalized,
   GENRE robust ].

evening_nospr_n1_rbst := n_-_m-nocnh-nspr_le &
 [ ORTH < "evening" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_evening_n_of_rel",
            LOCAL.CAT.HEAD.CASE non_nom,
            PHON.ONSET voc ],
   GENRE robust ].

ever_adv1_mal := av_-_i-pr-aux_le_rbst &
 [ ORTH < "ever" >,
   SYNSEM [ LKEYS.KEYREL.PRED _ever_a_1_rel,
	    LOCAL.CAT.HEAD.MINORS.ALTMIN no_rel,
            PHON.ONSET voc ] ].

ever_since_subord_past := p_cp_s-notop-past_le &
 [ ORTH < "ever", "since" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ever+since_x_subord_rel",
            PHON.ONSET voc ] ].

ever_since_subord_mal := p_cp_s-notop_le_rbst &
 [ ORTH < "ever", "since" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ever+since_x_subord_rel",
            PHON.ONSET voc ] ].

every_all_rbst := d_-_prt-plm_le &
 [ ORTH < "every" >,
   ALTS.DETPART -,
   SYNSEM [ LKEYS.KEYREL.PRED _all_q_rel,
            LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.AGR.PNG.PN 3p,
            PHON.ONSET voc ],
   GENRE robust ].

every_each_rbst := d_-_prt-sg_le &
 [ ORTH < "every" >,
   ALTS.DETPRTNOCMP -,
   SYNSEM [ LKEYS.KEYREL.PRED _each_q_rel,
	    LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CAT.HEAD no_head,
            PHON.ONSET voc ],
   GENRE robust ].

everyday_adv_rbst := av_-_i-vp-po_le &
 [ ORTH < "everyday" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_every+day_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET voc ],
   GENRE robust ].

everything_sp_rbst := n_-_pr_le &
 [ ORTH < "everyting" >,
   SYNSEM [ LKEYS [ ALTKEYREL.PRED every_q_rel,
                    KEYREL.PRED thing_rel ],
            PHON.ONSET voc ],
   GENRE robust ].

everything_mod_mal := n_-_m-mod_le_rbst &
 [ ORTH < "everything" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_type_n_1_rel",
            PHON.ONSET voc ] ].

exact_a1_mal := aj_pp_i-cmp-sme_le_rbst &
 [ ORTH < "exact" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_exact_a_same-as_rel",
            PHON.ONSET voc ] ].

except_cp_p_rbst := p_cp_s_le &
 [ ORTH < "except" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_except_x_h_rel",
            PHON.ONSET voc ],
   GENRE robust ].

exclaim_v1_mal := v_np_cp_le_rbst &
 [ ORTH < "exclaim" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_exclaim_v_1_rel",
            PHON.ONSET voc ] ].

exclaim_v2_mal := v_pp_cp_le_rbst &
 [ ORTH < "exclaim" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_exclaim_v_1_rel",
            PHON.ONSET voc ] ].

existed_a1_post_mal := v_-_psv-post_le_rbst &
 [ ORTH < "existed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_exist_v_1_rel",
            PHON.ONSET voc ] ].

exited_excited_a1_rbst := aj_-_i_le &
 [ ORTH < "exited" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_excited_a_1_rel",
            PHON.ONSET voc ],
   GENRE robust ].

expect_expectation_mal := n_cp_mc-vb_le_rbst &
 [ ORTH < "expect" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_expectation_n_1_rel",
            PHON.ONSET voc ] ].

explain_np_np_mal := v_np-np_le_rbst &
 [ ORTH < "explain" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_explain_v_1_rel",
            PHON.ONSET voc ] ].

; |explained [how] to ...}
explain_whvp_v1_mal := v_vp_wh_le_rbst &
 [ ORTH < "explain" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_explain_v_1_rel",
            PHON.ONSET voc ] ].

explore_into_v1_mal := v_pp_np_le_rbst &
 [ ORTH < "explore" >,
   SYNSEM [ LKEYS [ --COMPKEY _into_p_sel_rel,
                    KEYREL.PRED "_explore_v_1_rel" ],
            PHON.ONSET con ] ].

expose_of_to_v1_mal := v_np-pp_e_le_rbst &
 [ ORTH < "expose" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _of_p_sel_rel,
		    KEYREL.PRED "_expose_v_to_rel" ],
            PHON.ONSET voc ] ].

f_cap_np1 := n_-_pn_le &
 [ ORTH < "f" >,
   SYNSEM [ LKEYS.KEYREL.CARG "F",
            PHON.ONSET voc ] ].

f_lower_np1_mal := n_-_pn_le_nocap_rbst &
 [ ORTH < "f" >,
   SYNSEM [ LKEYS.KEYREL.CARG "F",
            PHON.ONSET voc ] ].

face_to_face_adv := pp_-_i_le &
 [ ORTH < "face", "to", "face" >,
   SYNSEM [ LKEYS.KEYREL.PRED _face+to+face_p_rel,
            PHON.ONSET voc ] ].

face_to_v1_mal := v_pp_np_le_rbst &
 [ ORTH < "face" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_face_v_1_rel" ],
            PHON.ONSET con ] ].

face_of_with_v1_mal := v_np-pp_e_le_rbst &
 [ ORTH < "face" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _of_p_sel_rel,
		    KEYREL.PRED "_face_v_with_rel" ],
            PHON.ONSET con ] ].

face_with_v1_mal := v_pp_np_le_rbst &
 [ ORTH < "face" >,
   SYNSEM [ LKEYS [ --COMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_face_v_1_rel" ],
            PHON.ONSET con ] ].

fairly_deg_mal := av_-_dg-m_le_rbst &
 [ ORTH < "fairly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fairly_x_deg_rel",
            PHON.ONSET con ] ].

fall_break_n1 := n_-_mc_le &
 [ ORTH < "fall", "break" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fall+break_n_1_rel",
            PHON.ONSET con ] ].

fall_season_n1 := n_-_mc_le &
 [ ORTH < "fall", "season" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fall+season_n_1_rel",
            PHON.ONSET con ] ].

families_n2 := n_-_c-pl_le &
 [ ORTH < "families" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_family_n_1_rel",
            PHON.ONSET con ] ].

fancy_v2_mal := v_vp_seq-prp_le_rbst &
 [ ORTH < "fancy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fancy_v_1_rel",
            PHON.ONSET con ] ].

farther_adv_mal := av_-_i-vp-cmp_le_rbst &
 [ ORTH < "farther" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_farther_a_1_rel",
            PHON.ONSET con ] ].

farther_a1_mal := aj_-_i-cmp_le_rbst &
 [ ORTH < "farther" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_far_a_from_rel",
            PHON.ONSET con ] ].

faster_adv_mal := av_-_i-vp-cmp_le_rbst &
 [ ORTH < "faster" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_faster_a_1_rel",
            PHON.ONSET con ] ].

faster_a1_mal := aj_-_i-cmp_le_rbst &
 [ ORTH < "faster" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fast_a_1_rel",
            PHON.ONSET con ] ].

fastly_adv1_rbst := av_-_i-vp-po_le_mal &
 [ ORTH < "fastly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fast_a_1_rel",
            LOCAL.CAT.HEAD.MOD.FIRST.MODIFD.RPERIPH bool,
            PHON.ONSET con ] ].

;; DPF 2014-05-14 - If we block this entry, then we have to include the
;; multi-word "Founding Fathers".

fathers_nounif_n1 := n_-_pn-nounif_le &
 [ ORTH < "Fathers" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Fathers",
            PHON.ONSET con ] ].

favorite_isect := aj_-_i-sup_le &
 [ ORTH < "favorite" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_favorite_a_1_rel",
            LOCAL.CAT [ HEAD.PRD +,
	                POSTHD - ],	    
            PHON.ONSET con ] ].

favorite_a2 := aj_-_i-att_le &
 [ ORTH < "favorite" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_favorite_a_1_rel",
            PHON.ONSET con ] ].

february_sp_rbst := n_np_c-month_le &
 [ ORTH < "Febuary" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Feb",
            PHON.ONSET con ],
   GENRE robust ].

february_sp_2_rbst := n_np_c-month_le &
 [ ORTH < "Fabruary" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Feb",
            PHON.ONSET con ],
   GENRE robust ].

february_sp_3_rbst := n_np_c-month_le &
 [ ORTH < "Feburary" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Feb",
            PHON.ONSET con ],
   GENRE robust ].

fed_n1_nocap_mal := n_-_pn_le_nocap_rbst &
 [ ORTH < "fed" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Fed",
            PHON.ONSET con ] ].

feel_v2_fin_mal := v_np-vp_fin_le_rbst &
 [ ORTH < "feel" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_feel_v_1_rel",
            PHON.ONSET con ] ].

feel_v2_fin_3sg_mal := v_np-vp_fin-3sg_le_rbst &
 [ ORTH < "feel" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_feel_v_1_rel",
            PHON.ONSET con ] ].

festival_n1 := n_-_c_le &
 [ ORTH < "festival" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_festival_n_1_rel",
            PHON.ONSET con ],
   TOKENS.+LAST.+CLASS.+CASE non_capitalized ].

;; LPERIPH bool excludes "Spring Festival" with robust cap noun "spring"
;; Added --BARE to exclude robust "Spring Festival" as compound.
;; But also need proper name "Festival" for "Dragon Boat Festival".
;;
festival_n2 := n_-_c-nm_le &
 [ ORTH < "Festival" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Festival",
            LOCAL.CAT.HEAD.--BARE -,
	    MODIFD.LPERIPH bool,
            PHON.ONSET con ],
   TOKENS.+LAST.+CLASS.+CASE capitalized ].

;; n_-_pn-gen_le prevents robust "the Spring Festival"
festival_n3 := n_-_pn-gen_le &
 [ ORTH < "Festival" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Festival",
            PHON.ONSET con ] ].

;; |fewer food|
fewer_a1_rbst := aj_pp_i-more_le_mal &
 [ ORTH < "fewer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_few_a_1_rel",
            LOCAL.CAT.HEAD.MOD.FIRST expressed_synsem &
			             [ LOCAL.AGR.PNG.PN 3s ],
            PHON.ONSET con ] ].

fifth_ring_n1_sp_rbst := n_-_c-nm_le &
 [ ORTH < "Fifth", "Ring" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Fifth+Ring",
	    LOCAL.CAT.HEAD.MINORS.NORM norm_rel,
            PHON.ONSET con ],
   GENRE robust ].

;; |Fifth Ring Road|
fifth_ring_n2_sp_mal := n_-_c-nm_le_nocap_rbst &
 [ ORTH < "fifth", "ring" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Fifth+Ring",
            PHON.ONSET con ] ].

fifth_ring_road_n1 := n_-_c-nm_le &
 [ ORTH < "Fifth", "Ring", "Road" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Fifth+Ring+Road",
            PHON.ONSET con ] ].

fifth_ring_road_n1_nocap_mal := n_-_c-nm_le_nocap_rbst &
 [ ORTH < "fifth", "ring", "road" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Fifth+Ring+Road",
            PHON.ONSET con ] ].

ring_road_n1_nocap_mal := n_-_c-nm_le_nocap_rbst &
 [ ORTH < "ring", "road" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Ring+Road",
            PHON.ONSET con ] ].

;; 2021-01-12 - Block robust "find painting very important"
find_v1_mal := v_-_le_rbst &
 [ ORTH < "find" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_find_v_1_rel",
	    MODIFD.RPERIPH +,
            PHON.ONSET con ] ].

finish_line_n1 := n_-_c_le &
 [ ORTH < "finish", "line" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_finish+line_n_1_rel",
            PHON.ONSET con ] ].

#|
firecrackers_n1_sp_rbst := n_-_c-pl_le &
 [ ORTH < "fire", "crackers" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_firecrackers_n_1_rel",
            LOCAL.AGR.PNG png-irreg,
            PHON.ONSET con ],
   GENRE robust ].
|#

firemans_a1_mal := aj_-_i-cmpd_le_rbst &
 [ ORTH < "firemans" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_firemans_a_1_rel",
            PHON.ONSET con ] ].

firemens_a1_mal := aj_-_i-cmpd_le_rbst &
 [ ORTH < "firemens" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_firemens_a_1_rel",
            PHON.ONSET con ] ].

fireworks_n1_mal := n_-_c-sg_le_rbst &
 [ ORTH < "firework" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_firework_n_1_rel",
            PHON.ONSET con ] ].

fireworks_n1_sp_rbst := n_-_c-pl_le &
 [ ORTH < "fire", "works" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fireworks_n_1_rel",
            LOCAL.AGR.PNG png-irreg,
            PHON.ONSET con ],
   GENRE robust ].

first_dom_sp_rbst := n_-_pn-dom-ord_le &
 [ ORTH < "1th" >,
   SYNSEM [ LKEYS.KEYREL.CARG "1",
            PHON.ONSET con ],
   GENRE robust ].

first_pn_np1 := n_-_pn-nounif_le &
 [ ORTH < "First" >,
   SYNSEM [ LKEYS.KEYREL.CARG "First",
            PHON.ONSET con ] ].

first_of_all_adv1_rbst := av_-_i-vp_le &
 [ ORTH < "the", "first", "of", "all" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_first+of+all_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ],
   GENRE robust ].

first_of_all_adv2_rbst := av_-_s-cp-pr_le &
 [ ORTH < "the", "first", "of", "all" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_first+of+all_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ],
   GENRE robust ].

first_time_n1_rbst := n_-_c-cpd_le &
 [ ORTH < "first", "time" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_first+time_n_1_rel",
            PHON.ONSET con ],
   GENRE robust ].

first_year_a1 := aj_-_i-prd_le &
 [ ORTH < "first", "year" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_first+year_a_1_rel",
            PHON.ONSET con ] ].

first_year_a2 := aj_-_i-prd_le &
 [ ORTH < "first", "-", "year" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_first+year_a_1_rel",
            PHON.ONSET con ] ].

fishermans_a1_mal := aj_-_i-cmpd_le_rbst &
 [ ORTH < "fishermans" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fishermans_a_1_rel",
            PHON.ONSET con ] ].

fishermens_a1_mal := aj_-_i-cmpd_le_rbst &
 [ ORTH < "fishermens" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fishermens_a_1_rel",
            PHON.ONSET con ] ].

five_ring_n1 := n_-_c-nm_le &
 [ ORTH < "Five", "Ring" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Five+Ring",
            PHON.ONSET con ] ].

flat_adv1_mal := av_-_i-pr-aux_le_rbst &
 [ ORTH < "flat" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_flat_a_1_rel",
            PHON.ONSET con ] ].

flying_n1 := n_-_m_le &
 [ ORTH < "flying" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_flying_n_1_rel",
            PHON.ONSET con ] ].

following_n1 := n_-_c-ns-nocnh_le &
 [ ORTH < "following" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_following_n_1_rel",
            LOCAL.AGR.PNG png-irreg,
            PHON.ONSET con ] ].

;; |in the followings, ...|
following_n1_rbst := n_-_c-pl_le &
 [ ORTH < "followings" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_following_n_1_rel",
            LOCAL.AGR.PNG.PN 3p,
            PHON.ONSET con ],
   GENRE robust ].

fond_found_a1_rbst := aj_pp_i-obl_le &
 [ ORTH < "found" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_fond_a_of_rel" ],
            PHON.ONSET con ] ].

foods_n1 := n_-_c-pl_le &
 [ ORTH < "foods" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_food_n_1_rel",
            PHON.ONSET con ] ].

;; "apologize for without an excuse"
for_ppcomp_mal := p_pp_i-coprd_le_rbst &
 [ ORTH < "for" >,
   SYNSEM [ LKEYS.KEYREL.PRED _for_p_rel,
            PHON.ONSET con ] ].

for_one_thing_adv1 := av_-_s-cp-pr_le &
 [ ORTH < "for", "one", "thing" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_for+one+thing_a_1_rel",
            PHON.ONSET con ] ].

for_the_first_thing_adv1 := av_-_s-cp-pr_le &
 [ ORTH < "for", "the", "first", "thing" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_for+the+first+thing_a_1_rel",
            PHON.ONSET con ] ].

for_the_reason_p1 := p_cp_s-tns_le &
 [ ORTH < "for", "the", "reason" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_because_x_rel",
            PHON.ONSET con ] ].

forever_adv4 := av_-_i-vp-pr_le &
 [ ORTH < "for", "ever" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_forever_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

forever_adv2_mal := av_-_i-pr-aux_le_rbst &
 [ ORTH < "forever" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_forever_a_2_rel",
            PHON.ONSET con ] ].

forever_adv4_mal := av_-_i-pr-aux_le_rbst &
 [ ORTH < "for", "ever" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_forever_a_1_rel",
            PHON.ONSET con ] ].

forget_v1_mal := v_vp_seq-bse_le_rbst &
  [ ORTH < "forget" >,
    SYNSEM [ LKEYS.KEYREL.PRED "_forget_v_1_rel",
	     PHON.ONSET con ] ].

forget_prp_v4_mal := v_vp_ssr-prp_le_rbst &
 [ ORTH < "forget" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_forget_v_2_rel",
            PHON.ONSET con ] ].

;; Wrong inchoative
found_v1_mal := v_-_le_rbst &
 [ ORTH < "found" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_found_v_1_rel",
            PHON.ONSET con ] ].

founding_nounif_n1 := n_-_pn-nounif_le &
 [ ORTH < "Founding" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Founding",
            PHON.ONSET con ] ].

founding_fathers_n1 := n_-_c-nm-pl_le &
 [ ORTH < "Founding", "Father" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Founding+Fathers",
            PHON.ONSET con ] ].

fourth_adj_rbst := aj_-_i-ord-one_le &
 [ ORTH < "forth" >,
   SYNSEM [ LKEYS.KEYREL.CARG "4",
            PHON.ONSET con ],
   GENRE robust ].

fourth_day_rbst := n_-_pn-dom-ord_le &
 [ ORTH < "forth" >,
   SYNSEM [ LKEYS.KEYREL.CARG "4",
            LOCAL.CAT.HEAD.--MALSPELL +,
            PHON.ONSET con ],
   GENRE robust ].

fourth_of_july_n1 := n_-_c-nm_le &
 [ ORTH < "Fourth", "Of", "July" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Fourth+Of+July",
            PHON.ONSET con ] ].

fourth_prize_n1 := n_-_m_le &
 [ ORTH < "fourth", "prize" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fourth+prize_n_1_rel",
            PHON.ONSET con ] ].

fourth_place_n1 := n_-_m_le &
 [ ORTH < "fourth", "place" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fourth+place_n_1_rel",
            PHON.ONSET con ] ].

;; Needed for backward compatibility of data sets, when misspelling was present
frantically_x_adv1 := av_-_i-vp_le &
 [ ORTH < "franticaly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_frantic_a_1_rel",
            PHON.ONSET con ] ].

Friday_night_n1 := n_-_c-dpt-cap_le &
 [ ORTH < "Friday", "night" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_Friday+night_n_1_rel",
            PHON.ONSET con ] ].

friendly_a1_mal := av_-_i-vp-adj_le_rbst &
 [ ORTH < "friendly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_friendly_a_1_rel",
            PHON.ONSET con ] ].

friends_and_family_n1 := n_-_c-pl_le &
 [ ORTH < "friends", "and", "family" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_friends+and+family_n_1_rel",
            PHON.ONSET con ] ].

frightened_a1 := aj_-_i-prd_le &
 [ ORTH < "frightened" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_frightened_a_1_rel",
            PHON.ONSET con ] ].

;; Misspelling of frightening
frighting_adj_mal := aj_-_i_le_rbst &
 [ ORTH < "frighting" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_frightening_a_1_rel",
            PHON.ONSET con ] ].

frisbee_n1 := n_-_c-maycap_le &
 [ ORTH < "frisbee" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_frisbee_n_1_rel",
            PHON.ONSET con ] ].

frisbee_n2 := n_-_pn_le &
 [ ORTH < "Frisbee" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Frisbee",
	    LOCAL.CAT.VAL.SPR.FIRST unexpressed,
            PHON.ONSET con ] ].

;; DPF 2020-06-18 - Idiom
from_bad_to_worse_adv1 := av_-_i-vp-po_le &
 [ ORTH < "from", "bad", "to", "worse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_from+bad+to+worse_a_1_rel",
            PHON.ONSET con ] ].

from_form_sp_rbst := p_np_i_le &
 [ ORTH < "form" >,
   SYNSEM [ LKEYS.KEYREL.PRED _from_p_rel,
            PHON.ONSET con ],
   GENRE robust ].

from_to_nbar_sp_rbst := p_nb-pp_i-frm-to_le &
 [ ORTH < "form" >,
   SYNSEM [ LKEYS [ KEYREL.PRED _from_p_time_rel,
                    --OCOMPKEY _to_p_nbar_rel ],
            PHON.ONSET con ],
   GENRE robust ].

;; |from branch on branch|
from_to_on_nbar_rbst := p_nb-pp_i-frm-to_le &
 [ ORTH < "from" >,
   SYNSEM [ LKEYS [ KEYREL.PRED _from_p_time_rel,
                    --OCOMPKEY _on_p_nbar_rel ],
            PHON.ONSET con ],
   GENRE robust ].

;; |from branch by branch|
from_to_by_nbar_rbst := p_nb-pp_i-frm-to_le &
 [ ORTH < "from" >,
   SYNSEM [ LKEYS [ KEYREL.PRED _from_p_time_rel,
                    --OCOMPKEY _by_p_nbar_rel ],
            PHON.ONSET con ],
   GENRE robust ].

full_time_a1 := aj_-_i-att_le &
 [ ORTH < "full", "-", "time" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_full-time_a_1_rel",
            PHON.ONSET con ] ].

full_time_a2 := aj_-_i-att_le &
 [ ORTH < "full", "time" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_full-time_a_1_rel",
            PHON.ONSET con ] ].

full_time_adv1 := av_-_i-vp-po_le &
 [ ORTH < "full", "-", "time" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_full-time_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

full_time_adv2 := av_-_i-vp-po_le &
 [ ORTH < "full", "time" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_full-time_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

full_time_adv3 := av_-_i-vp-po_le &
 [ ORTH < "fulltime" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_full-time_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

fume_v1_mal := v_np_cp_le_rbst &
 [ ORTH < "fume" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fume_v_1_rel",
            PHON.ONSET con ] ].

;; |fishing is a fun for me|
fun_adj_n1_mal := n_-_c-aj_le_rbst &
 [ ORTH < "fun" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fun_a_1_rel",
   	    LOCAL.CAT.VAL.SPR.FIRST.--MIN _a_q_rel,
            PHON.ONSET con ] ].

further_adv_mal := av_-_i-vp-cmp_le_rbst &
 [ ORTH < "further" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_further_a_1_rel",
            PHON.ONSET con ] ].

further_adv2_mal := av_-_i-pr-aux_le_rbst &
 [ ORTH < "further" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_further_a_1_rel",
            PHON.ONSET con ] ].

further_a1_mal := aj_-_i-cmp_le_rbst &
 [ ORTH < "further" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_far_a_from_rel",
            LOCAL.CAT.HEAD.--SBRD -,
            PHON.ONSET con ] ].

galapagos_islands_n1 := n_-_c-nm-pl_le &
 [ ORTH < "Galapagos", "Island" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Galapagos+Islands",
            PHON.ONSET con ] ].

gallows_n1_mal := n_-_c-sg_le_rbst &
 [ ORTH < "gallow" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gallows_n_1_rel",
            PHON.ONSET con ] ].

galore_a1_mal := aj_-_i-att_le_rbst &
 [ ORTH < "galore" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_galore_a_1_rel",
            PHON.ONSET con ] ].

garcias_n1 := n_-_pn-pl-def_le &
 [ ORTH < "Garcias" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Garcia",
            PHON.ONSET con ] ].

garibaldis_n1 := n_-_pn-pl-def_le &
 [ ORTH < "Garibaldis" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Garibaldi",
            PHON.ONSET con ] ].

garlic_flavored_a1 := aj_-_i_le &
 [ ORTH < "garlic", "-", "flavored" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_garlic-flavored_a_1_rel",
            PHON.ONSET con ] ].

;; Missing |to| for raising: |they tend win.|
;; DPF 2017-09-28 - Let's constrain the complement to LEX -, to avoid spurious
;; robust analysis of |we get exercise|.
;;
get_to_v1_mal := v_vp_ssr-nimp_le_rbst &
 [ ORTH < "get" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_get_v_to_rel",
            LOCAL.CAT.VAL.COMPS.FIRST.LEX -,
            PHON.ONSET con ] ].

get_v1_mal := v_np-vp_bse_le_rbst &
 [ ORTH < "get" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_get_v_1_rel",
            PHON.ONSET con ] ].

; |we should get him stay|
ghastly_a1_mal := av_-_i-vp-adj_le_rbst &
 [ ORTH < "ghastly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ghastly_a_1_rel",
            PHON.ONSET con ] ].

gilroys_n1 := n_-_pn-pl-def_le &
 [ ORTH < "Gilroys" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Gilroy",
            PHON.ONSET con ] ].

; Removed ALTMIN indef_or_udef_rel since it blocks |which speech did she give|
; But we also need this for "He already gave it" where it = report.  So let's
; explicitly allow light verb uses with idiom-marked nouns, and with pronousn,
; and treat the rest as robust
;; Restrict to idiomatic nouns such as "speech", effectively making this a
;; light verb
;; DPF 2017-09-06 - Once again, feel the need to let the normal transitive
;; usage in, since we want |They gave flowers| and many others.  Live with
;; the inability to advise when a real ditransitive usage would be preferred.
;; DPF 2018-04-10 - But exclude robust plural compounds, as in |giving the
;; animals food|.
;;
give_v2 := v_np_le &
 [ ORTH < "give" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_give_v_1_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD [ --MALPLCPD -,
						       --POSSRBST - ],
            PHON.ONSET con ] ].

;; Pronoun objects only
;;
give_v2_pron := v_np_le &
 [ ORTH < "give" >,
   ALTS.MALPASS -,
   SYNSEM [ LOCAL.CAT.VAL.COMPS < canonical_synsem &
				  [ --MIN pron_rel,
				    --SIND.PNG.GEN neut ] >,
	    LKEYS.KEYREL.PRED "_give_v_1_rel",
	    PHON.ONSET con ] ].

;; For all other NPs (not idiom-marked or pronominal), provide robust entry
;; DPF 2014-06-09 - Too many false positives like "She gave Bill chocolate"
#|
give_v2_mal := v_np_ditrans_le_rbst &
 [ ORTH < "give" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_give_v_1_rel",
	    PHON.ONSET con ] ].
|#

;; |she gave the books them|
give_v1_pron_mal := v_np-nppro_le_rbst &
 [ ORTH < "give" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_give_v_1_rel",
	    LOCAL.CAT.VAL.COMPS.REST.FIRST.--MIN pron_rel,
            PHON.ONSET con ] ].

gloat_v1_mal := v_np_cp_le_rbst &
 [ ORTH < "gloat" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gloat_v_1_rel",
            PHON.ONSET con ] ].

gnarly_a1_mal := av_-_i-vp-adj_le_rbst &
 [ ORTH < "gnarly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gnarly_a_1_rel",
            PHON.ONSET con ] ].

; "... went the store"
;; DPF 2017-09-06 - Let's limit this to VFORM fin, TENSE past, to avoid robust 
;; analysis for |they want to go sleep|.
;; But this prevents us from robust |he wanted to go his parents|, so instead 
;; let's make the complement nonlex, even though this loses us |we go school|
;; DPF 2019-03-27 - Block extraction, to avoid spurious |book anywhere you go|
;; DPF 2020-09-30 - LPERIPH na_or_+ blocks "topic going" as N-V_adj
;;
go_v1_mal := v_np_pp_le_rbst &
 [ ORTH < "go" >,
   ALTS.NGER -,
   SYNSEM [ LOCAL.CAT.VAL.COMPS.FIRST canonical_synsem &
				      [ LEX -,
					--MIN reg_nom_rel,
					LOCAL.CAT.HEAD non_partn ],
	    MODIFD.LPERIPH na_or_+,
            LKEYS.KEYREL.PRED "_go_v_1_rel",
            PHON.ONSET con ] ].

go_v2_mal := v_np_pp_le_rbst &
 [ ORTH < "go" >,
   ALTS.NGER -,
   SYNSEM [ LOCAL.CAT.VAL.COMPS.FIRST [ LEX +,
					--MIN named_np_rel ],
	    MODIFD.LPERIPH na_or_+,
            LKEYS.KEYREL.PRED "_go_v_1_rel",
            PHON.ONSET con ] ].

go_v3_locinv_mal := v_np_locinv-mv_le_rbst &
 [ ORTH < "go" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_go_v_1_rel",
            PHON.ONSET con ] ].

good_a6_mal := aj_pp-vp_i-for-it_le_rbst &
 [ ORTH < "good" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_good_a_at-for-of_rel",
            PHON.ONSET con ] ].

;; Block robust "is good"
good_adv1_rbst := av_-_i-vp-po_le_mal &
 [ ORTH < "good" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_well_a_1_rel",
	    LOCAL.CAT.HEAD.MOD.FIRST.LOCAL.CAT.HEAD.--COPID -,
            PHON.ONSET con ] ].

good_for_of_a1_mal := aj_pp_i_le_rbst &
 [ ORTH < "good" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_good_a_for_rel" ],
            PHON.ONSET con ] ].

good_and_evil_n1 := n_-_m-nocnh_le &
 [ ORTH < "good", "and", "evil" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_good+and+evil_n_1_rel",
            PHON.ONSET con ] ].

goodbye_i_n1 := n_-_c-brno_le &
 [ ORTH < "goodbye" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_goodbye_n_1_rel",
            PHON.ONSET con ] ].

goodbye_i_n2 := n_-_c-brno_le &
 [ ORTH < "good", "-", "bye" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_goodbye_n_1_rel",
            PHON.ONSET con ] ].

gooder_aj_mal := aj_pp_i-cmp_le_rbst &
 [ ORTH < "gooder" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_good_a_1_rel",
            PHON.ONSET con ] ].

goodies_n1_mal := n_-_c-sg_le_rbst &
 [ ORTH < "goody" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_goodies_n_1_rel",
            PHON.ONSET con ] ].

goodly_a1_mal := av_-_i-vp-adj_le_rbst &
 [ ORTH < "goodly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_goodly_a_1_rel",
            PHON.ONSET con ] ].

got_a1_psv_mal := v_-_psv-get_le_rbst &
 [ ORTH < "got" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_get_v_1_rel",
            PHON.ONSET con ] ].

got_through_a1_psv_mal := v_-_psv-get_le_rbst &
 [ ORTH < "got", "through" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_get_v_1_rel",
            PHON.ONSET con ] ].

gotten_a1_psv_mal := v_-_psv-get_le_rbst &
 [ ORTH < "gotten" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_get_v_1_rel",
            PHON.ONSET con ] ].

gotten_through_a1_psv_mal := v_-_psv-get_le_rbst &
 [ ORTH < "gotten", "through" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_get_v_1_rel",
            PHON.ONSET con ] ].

grade_n1 := n_-_c-maycap_le &
 [ ORTH < "grade" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_grade_n_1_rel",
            PHON.ONSET con ] ].

grandmother_prd_n1 := n_-_c-prd_le &
 [ ORTH < "grandmother" >,
   SYNSEM [ LKEYS.KEYREL [ PRED "_grandmother_n_of_rel",
                           ARG0.PNG.PN 3s ],
            PHON.ONSET con ] ].

; Allow "her grandmother's" NP even though generally block bare possessives
grandmothers_poss_n1 := n_-_c_le &
 [ ORTH < "grandmother", "'s" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_grandmothers_n_poss_rel",
            PHON.ONSET con ] ].

gravelly_a1_mal := av_-_i-vp-adj_le_rbst &
 [ ORTH < "gravelly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gravelly_a_1_rel",
            PHON.ONSET con ] ].

great_a1_rbst := av_-_i-vp-po_le &
 [ ORTH < "great" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_great_a_for_rel",
	    LOCAL.CAT.HEAD [ --ADVADJ -,
			     MOD.FIRST.LOCAL.CAT.HEAD verb ],
            PHON.ONSET con ],
   GENRE robust ].

great_aunt_n1 := n_-_c-pre-ttl_le &
 [ ORTH < "great", "-", "aunt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_great-aunt_n_1_rel",
            LOCAL.CAT.HEAD.MINORS.MIN pre_title_rel,
            PHON.ONSET con ] ].

green_striped_a1 := aj_-_i_le &
 [ ORTH < "green", "-", "striped" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_green-striped_a_1_rel",
            PHON.ONSET con ] ].

green_striped_a2 := aj_-_i_le &
 [ ORTH < "green-striped" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_green-striped_a_1_rel",
            PHON.ONSET con ] ].

gripe_v1_mal := v_np_cp_le_rbst &
 [ ORTH < "gripe" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gripe_v_1_rel",
            PHON.ONSET con ] ].

;; 2022-04-23 - Added hack QUE *oblnull* to prevent as object of prep, to avoid
;; ranking problem of robust "get [the things they want at grocery] stores"
groceries_n1_mal := n_-_c-sg_le_rbst &
 [ ORTH < "grocery" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_groceries_n_1_rel",
	    NONLOC.QUE.LIST *oblnull*,
            PHON.ONSET con ] ].

grumble_v1_mal := v_np_cp_le_rbst &
 [ ORTH < "grumble" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_grumble_v_1_rel",
            PHON.ONSET con ] ].

gymnastics_n1_mal := n_-_c-sg_le_rbst &
 [ ORTH < "gymnastic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gymnastics_n_1_rel",
            PHON.ONSET con ] ].

had_aux_cx_lq_rbst := v_vp_had-cx_le &
 [ ORTH < "‘", "d" >,
   SYNSEM.PHON.ONSET con,
   GENRE robust ].

; |had better to leave|
had_better_aux_pos_rbst := v_vp_oght-p_le &
 [ ORTH < "had", "better" >,
   SYNSEM [ LKEYS.KEYREL.PRED _had+better_v_qmodal_rel,
            PHON.ONSET con ],
   GENRE robust ].

had_better_cx_pos_rbst := v_vp_oght-p_le &
 [ ORTH < "’d", "better" >,
   SYNSEM [ LKEYS.KEYREL.PRED _had+better_v_qmodal_rel,
            PHON.ONSET con ],
   GENRE robust ].

had_better_cx_lq_rbst := v_vp_mdl-p-niv_le &
 [ ORTH < "‘", "d", "better" >,
   SYNSEM [ LKEYS.KEYREL.PRED _had+better_v_qmodal_rel,
            PHON.ONSET con ],
   GENRE robust ].

had_better_aux_vpfin_rbst := v_vp_fin_le_rbst &
 [ ORTH < "had", "better" >,
   SYNSEM [ LKEYS.KEYREL.PRED _had+better_v_qmodal_rel,
            PHON.ONSET con ] ].

had_better_cx_vpfin_rbst := v_vp_fin_le_rbst &
 [ ORTH < "’d", "better" >,
   SYNSEM [ LKEYS.KEYREL.PRED _had+better_v_qmodal_rel,
            PHON.ONSET con ] ].

had_better_cx_lq_vpfin_rbst := v_vp_fin_le_rbst &
 [ ORTH < "‘", "d", "better" >,
   SYNSEM [ LKEYS.KEYREL.PRED _had+better_v_qmodal_rel,
            PHON.ONSET con ] ].

hadnt_better_rbst := v_vp_mdl-p-niv_le &
 [ ORTH < "hadn’t", "better" >,
   SYNSEM [ LKEYS.KEYREL.PRED _had+better_v_qmodal_rel,
            PHON.ONSET con ],
   GENRE robust ].

half_adv1_mal := av_-_i-pr-aux_le_rbst &
 [ ORTH < "half" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_half_a_1_rel",
            PHON.ONSET con ] ].

;; Block |half of money|
half_n1 := n_pp_c-ns-of_le &
 [ ORTH < "half" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_half_n_of_rel",
            LOCAL [ AGR.PNG png-irreg,
	            CAT.VAL.COMPS.FIRST.--SIND.DEF + ],
            PHON.ONSET con ] ].

half_pn1 := n_pp_mc-a-of_le &
 [ ORTH < "half" >,
   SYNSEM [ LKEYS.ALTKEYREL.PRED _half_q_rel,
            LOCAL [ AGR.PNG png-irreg,
	            CAT.VAL.COMPS.FIRST.--SIND.DEF + ],
            PHON.ONSET con ] ].


; |half of money|
half_n1_rbst := n_pp_c-ns-of_le &
 [ ORTH < "half" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_half_n_of_rel",
            LOCAL [ AGR.PNG png-irreg,
	            CAT.VAL.COMPS.FIRST.--SIND.DEF - ],
            PHON.ONSET con ],
   GENRE robust ].

hamster_pet_n1_rbst := n_-_c_le &
 [ ORTH < "hamster", "pet" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hamster+pet_n_1_rel",
            PHON.ONSET con ],
   GENRE robust ].

hand_v1_mal := v_np_ditrans_le_rbst &
 [ ORTH < "hand" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hand_v_1_rel",
	    PHON.ONSET con ] ].

handwriting_n1_sp_rbst := n_-_m_le &
 [ ORTH < "hand", "writing" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_handwriting_n_1_rel",
            PHON.ONSET con ],
   GENRE robust ].

handwriting_n2_sp_rbst := n_-_m_le &
 [ ORTH < "hand", "-", "writing" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_handwriting_n_1_rel",
            PHON.ONSET con ],
   GENRE robust ].

handwriting_n3_sp_rbst := n_-_m_le &
 [ ORTH < "hand", "writting" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_handwriting_n_1_rel",
            PHON.ONSET con ],
   GENRE robust ].

hang_out_v1_sp_rbst := v_-_le &
 [ ORTH < "hangout" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hang_v_out_rel",
            PHON.ONSET con ],
   GENRE robust ].

;; Missing |to| for raising: |they tend win.|
#|
happen_v2_mal := v_vp_ssr-nimp_le_rbst &
 [ ORTH < "happen" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_happen_v_1_rel",
            PHON.ONSET con ] ].
|#

;; |They hard to read fine print| => |They find it hard to ...|
hard_find_v1_vp_mal := v_vp_seq-adj_le_rbst &
 [ ORTH < "hard" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_find_v_hard_rel",
            PHON.ONSET con ] ].

harder_adv_mal := av_-_i-vp-cmp_le_rbst &
 [ ORTH < "harder" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_harder_a_1_rel",
            PHON.ONSET con ] ].

harder_aj_mal := aj_-_i-cmp_le_rbst &
 [ ORTH < "harder" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hard_a_for_rel",
            PHON.ONSET con ] ].

hardly_ever_adv1 := av_-_s-vp-x_le &
 [ ORTH < "hardly", "ever" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hardly+ever_a_1_rel",
            PHON.ONSET con ] ].

hardly := av_-_s-vp-x_le &
 [ ORTH < "hardly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hardly_a_1_rel",
	    LOCAL.CAT.HEAD.MOD.FIRST.LOCAL.CAT.HEAD.VFORM non_fin,
            PHON.ONSET con ] ].

hardly_pre_rbst := av_-_s-vp-x_le &
 [ ORTH < "hardly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hardly_a_1_rel",
	    LOCAL.CAT.HEAD.MOD.FIRST.LOCAL.CAT.HEAD.VFORM fin,
            PHON.ONSET con ],
   GENRE robust ].

;; |we worked hardly|
hardly_adv1_rbst := av_-_i-vp-po-nvm_le &
 [ ORTH < "hardly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hard_a_for_rel",
            PHON.ONSET con ],
   GENRE robust ].

has_aux_rbst := va_has_le_mal &
 [ ORTH < "have" >,
   SYNSEM.PHON.ONSET con ].

had_aux_finc_rbst := v_vp_had_le_mal &
 [ ORTH < "had" >,
   SYNSEM.PHON.ONSET con ].

has_aux_finc_rbst := v_vp_has_le_mal &
 [ ORTH < "has" >,
   SYNSEM.PHON.ONSET con ].

have_aux_finc_rbst := v_vp_have_le_mal &
 [ ORTH < "have" >,
   SYNSEM.PHON.ONSET con ].

have_fin_aux_rbst := va_have_fin_le_mal &
 [ ORTH < "has" >,
   SYNSEM.PHON.ONSET con ].

have_cause_fin_mal := v_np-vp_fin_le_rbst &
 [ ORTH < "have" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_have_v_cause_rel",
	    LOCAL.CAT.VAL.COMPS.REST.FIRST.LOCAL.CAT.HEAD.TAM.IRR-TENSE +,
            PHON.ONSET con ] ].

have_cause_fin_3sg_mal := v_np-vp_fin-3sg_le_rbst &
 [ ORTH < "have" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_have_v_cause_rel",
            PHON.ONSET con ] ].

has_neg_1_mal := v_vp_has-n_le_rbst &
 [ ORTH < "hasn't" >,
   SYNSEM.PHON.ONSET con ].

has_neg_2_mal := v_vp_has-n_le_rbst &
 [ ORTH < "has", "n't" >,
   SYNSEM.PHON.ONSET con ].

has_neg_3_mal := v_vp_has-n_le_rbst &
 [ ORTH < "hasn", "'t" >,
   SYNSEM.PHON.ONSET con ].

has_neg_1_q_mal := v_vp_has-n_le_rbst &
 [ ORTH < "hasn‘t" >,
   SYNSEM.PHON.ONSET con ].

has_neg_2_q_mal := v_vp_has-n_le_rbst &
 [ ORTH < "has", "n‘t" >,
   SYNSEM.PHON.ONSET con ].

has_neg_3_q_mal := v_vp_has-n_le_rbst &
 [ ORTH < "hasn", "‘t" >,
   SYNSEM.PHON.ONSET con ].

has_neg_1_u_mal := v_vp_has-n_le_rbst &
 [ ORTH < "hasn’t" >,
   SYNSEM.PHON.ONSET con ].

has_neg_2_u_mal := v_vp_has-n_le_rbst &
 [ ORTH < "has", "n’t" >,
   SYNSEM.PHON.ONSET con ].

has_neg_3_u_mal := v_vp_has-n_le_rbst &
 [ ORTH < "hasn", "’t" >,
   SYNSEM.PHON.ONSET con ].

have_neg_1_mal := v_vp_have-f-n_le_rbst &
 [ ORTH < "haven't" >,
   SYNSEM.PHON.ONSET con ].

have_neg_2_mal := v_vp_have-f-n_le_rbst &
 [ ORTH < "have", "n't" >,
   SYNSEM.PHON.ONSET con ].

have_neg_3_mal := v_vp_have-f-n_le_rbst &
 [ ORTH < "haven", "'t" >,
   SYNSEM.PHON.ONSET con ].

have_neg_1_q_mal := v_vp_have-f-n_le_rbst &
 [ ORTH < "haven‘t" >,
   SYNSEM.PHON.ONSET con ].

have_neg_2_q_mal := v_vp_have-f-n_le_rbst &
 [ ORTH < "have", "n‘t" >,
   SYNSEM.PHON.ONSET con ].

have_neg_3_q_mal := v_vp_have-f-n_le_rbst &
 [ ORTH < "haven", "‘t" >,
   SYNSEM.PHON.ONSET con ].

have_neg_1_u_mal := v_vp_have-f-n_le_rbst &
 [ ORTH < "haven’t" >,
   SYNSEM.PHON.ONSET con ].

have_neg_2_u_mal := v_vp_have-f-n_le_rbst &
 [ ORTH < "have", "n’t" >,
   SYNSEM.PHON.ONSET con ].

have_neg_3_u_mal := v_vp_have-f-n_le_rbst &
 [ ORTH < "haven", "’t" >,
   SYNSEM.PHON.ONSET con ].

hadnt_aux_1_rbst := v_vp_had-n_le &
 [ ORTH < "hadn't" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

hadnt_aux_2_rbst := v_vp_had-n_le &
 [ ORTH < "hadn", "'t" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

hadnt_aux_subj_1_rbst := v_vp_had-n-sv_le &
 [ ORTH < "hadn't" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

hadnt_aux_subj_2_rbst := v_vp_had-n-sv_le &
 [ ORTH < "hadn", "'t" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

hasnt_aux_1_rbst := v_vp_has-n_le &
 [ ORTH < "hasn't" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

hasnt_aux_2_rbst := v_vp_has-n_le &
 [ ORTH < "hasn", "'t" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

hasnt_aux_noapos_rbst := v_vp_has-n_le &
 [ ORTH < "hasnt" >,
   SYNSEM.PHON.ONSET con,
   GENRE robust ].

have_fin_aux_neg_1_rbst := v_vp_have-f-n_le &
 [ ORTH < "haven't" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

have_fin_aux_neg_2_rbst := v_vp_have-f-n_le &
 [ ORTH < "haven", "'t" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

have_fin_aux_neg_noapos_rbst := v_vp_have-f-n_le &
 [ ORTH < "havent" >,
   SYNSEM.PHON.ONSET con,
   GENRE robust ].

hadnt_aux_noapos_rbst := v_vp_had-n_le &
 [ ORTH < "hadnt" >,
   SYNSEM.PHON.ONSET con,
   GENRE robust ].

;; Missing |to| for raising: |they tend win.|
;; Restrict to finite, to avoid spurious use in |they seemed to have come early|
;; DPF 2019-06-05 - The error of |has make ...| could either be for
;; |has to make| or |has made|.  So add specific error code.

have_to1_mal := v_vp_ssr-have_le_rbst &
 [ ORTH < "have" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_have_v_qmodal-2_rel",
            LOCAL.CAT.HEAD.VFORM fin,
            PHON.ONSET con ] ].

haste_v1_sp_rbst := v_-_le &
 [ ORTH < "haste" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hasten_v_1_rel",
            PHON.ONSET con ],
   GENRE robust ].

he_himself := n_-_pr-he_le &
 [ ORTH < "he", "himself" >,
   SYNSEM.PHON.ONSET con ].

he_himself_rbst := n_-_pr-he_le &
 [ ORTH < "himself" >,
   SYNSEM.PHON.ONSET con,
   GENRE robust ].

;; Too much spurious ambig
#|
he_it_expl_rbst := n_-_pr-it-x_le &
 [ ORTH < "he" >,
   SYNSEM.PHON.ONSET con,
   GENRE robust ].
|#

; Ensure singular agreement
he_or_she_n1 := n_-_pr-he_le &
 [ ORTH < "he", "/", "she" >,
   SYNSEM.PHON.ONSET con ].

; Avoid spurious ambiguity for e.g. "taller than he"
he_rbst := n_-_pr-him_le &
 [ ORTH < "he" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.HEAD.--MALCASE + ],
   GENRE robust ].

;; 2020-05-07 - Let's exclude left-modified nominals, as in
;; |he [[brought to] class|.
;;
he_his_rbst := d_-_poss-his_le &
 [ ORTH < "he" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT [ HEAD.--POSSRBST +,
			VAL.SPEC.FIRST [ LOCAL.CAT.HEAD noun,
			                 MODIFD notmod_or_rmod ] ] ],
   GENRE robust ].

head_lice_n2 := n_-_c-pl_le &
 [ ORTH < "head", "lice" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_head+lice_n_1_rel",
            PHON.ONSET con ] ].

headwaters_n1_mal := n_-_c-sg_le_rbst &
 [ ORTH < "headwater" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_headwaters_n_1_rel",
            PHON.ONSET con ] ].

;; 2020-09-17 - This blocks "We heard he was famous"
#|
hear_v2 := v_cp_comp_le &
 [ ORTH < "hear" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hear_v_1_rel",
            PHON.ONSET con ] ].
|#

; Also allow WH-sentential complements
hear_v2a := v_cp_fin-inf-q_le &
 [ ORTH < "hear" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hear_v_1_rel",
            LOCAL.CAT.VAL.KCMP.LOCAL.CAT.VAL.SUBJ < >,
            PHON.ONSET con ] ].

hear_v1_mal := v_vp_seq_le_rbst &
 [ ORTH < "hear" >,
   SYNSEM [ LOCAL.CAT.HEAD.--MAL3SG -,
	    LKEYS.KEYREL.PRED "_hear_v_1_rel",
            PHON.ONSET con ] ].

hear_v2_mal := v_np-vp_oeq_le_rbst &
 [ ORTH < "hear" >,
   SYNSEM [ LOCAL.CAT.HEAD.--MAL3SG -,
	    LKEYS.KEYREL.PRED "_hear_v_1_rel",
            PHON.ONSET con ] ].

;; Don't want robust "We heard Kim went to the store"
#|
hear_v3_fin_mal := v_np-vp_fin_le_rbst &
 [ ORTH < "hear" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hear_v_1_rel",
            PHON.ONSET con ] ].
|#

hear_v3_fin_3sg_mal := v_np-vp_fin-3sg_le_rbst &
 [ ORTH < "hear" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hear_v_1_rel",
            PHON.ONSET con ] ].

#|
heathen_n1_mal := n_-_c-sg-nom_le_rbst &
 [ ORTH < "heathen" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_heathen_n_1_rel",
            PHON.ONSET con ] ].
|#

heavenly_a1_mal := av_-_i-vp-adj_le_rbst &
 [ ORTH < "heavenly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_heavenly_a_1_rel",
            PHON.ONSET con ] ].

hello_i_n1 := n_-_c-brno_le &
 [ ORTH < "hello" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hello_n_1_rel",
            PHON.ONSET con ] ].

help_n1 := n_-_m_le &
 [ ORTH < "help" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_help_n_1_rel",
            PHON.ONSET con ] ].

help_n2 := n_-_c-sg_le &
 [ ORTH < "help" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_help_n_1_rel",
            LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

help_on_v1_mal := v_pp_np_le_rbst &
 [ ORTH < "help" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_help_v_1_rel" ],
            PHON.ONSET con ] ].

help_v4_fin_mal := v_np-vp_fin_le_rbst &
 [ ORTH < "help" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_help_v_to_rel",
            PHON.ONSET con ] ].

help_v4_fin_3sg_mal := v_np-vp_fin-3sg_le_rbst &
 [ ORTH < "help" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_help_v_to_rel",
            PHON.ONSET con ] ].

;; |try her best to succeed|
her_best_adv1 := av_-_i-vp-po_le &
 [ ORTH < "her", "best" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_her+best_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

;; RPERIPH na is to block NP-N compound for |Leah and her class|
her_rbst := n_-_pr-she_le &
 [ ORTH < "her" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.HEAD [ --MALCASE +,
	                     --BARE + ] ],
   GENRE robust ].

;; 2020-09-30 - Avoid robust "she got herself books" via PN
her_herself_poss_rbst := d_-_poss-her_le &
 [ ORTH < "herself" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT [ HEAD.--POSSRBST +,
			VAL.SPEC.FIRST.LOCAL [ CAT.HEAD noun,
					       AGR.PNG.PN 3s ] ] ],
   GENRE robust ].

her_herselfs_poss_rbst := d_-_poss-her_le &
 [ ORTH < "herself", "’s" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT [ HEAD.--POSSRBST +,
			VAL.SPEC.FIRST.LOCAL.CAT.HEAD noun ] ],
   GENRE robust ].

hers_her_poss_rbst := d_-_poss-her_le &
 [ ORTH < "hers" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT [ HEAD.--POSSRBST +,
			VAL.SPEC.FIRST.LOCAL.CAT.HEAD noun ] ],
   GENRE robust ].

her_s_her_poss_rbst := d_-_poss-her_le &
 [ ORTH < "her", "’s" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT [ HEAD.--POSSRBST +,
			VAL.SPEC.FIRST.LOCAL.CAT.HEAD noun ] ],
   GENRE robust ].

her_stutter_7_mal := n_-_pr-her_le_rbst &
 [ ORTH < "her⸴", "her" >,
   SYNSEM.PHON.ONSET con ].

her_stutter_8_mal := n_-_pr-her_le_rbst &
 [ ORTH < "her.~", "her" >,
   SYNSEM.PHON.ONSET con ].

herdmans_n1 := n_-_pn-pl-def_le &
 [ ORTH < "Herdmans" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Herdman",
            PHON.ONSET con ] ].

herdmans_n2 := n_-_pn-pl-nom_le &
 [ ORTH < "Herdmans" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Herdman",
            PHON.ONSET con ] ].

hereby_adv1_mal := av_-_i-pr-aux_le_rbst &
 [ ORTH < "hereby" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hereby_a_1_rel",
            PHON.ONSET con ] ].

;; |They high the cost| => |raise|
;; Block robust |high school| via LEX
high_verb_v1_mal := v_np_adj_le_rbst &
 [ ORTH < "high" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_raise_v_1_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LEX -,
            PHON.ONSET con ] ].

;; |This highers the cost| => |raises|
higher_verb_v1_mal := v_np_adj_le_rbst &
 [ ORTH < "higher" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_raise_v_1_rel",
            PHON.ONSET con ] ].

hikers_a1_mal := aj_-_i-cmpd_le_rbst &
 [ ORTH < "hikers" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hikers_a_1_rel",
            PHON.ONSET con ] ].

hilly_a1_mal := av_-_i-vp-adj_le_rbst &
 [ ORTH < "hilly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hilly_a_1_rel",
            PHON.ONSET con ] ].

him_rbst := n_-_pr-he_le &
 [ ORTH < "him" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.HEAD.--MALCASE + ],
   GENRE robust ].

; Pronoun with mismatched case
him_stutter_7_mal := n_-_pr-him_le_rbst &
 [ ORTH < "him⸴", "him" >,
   SYNSEM.PHON.ONSET con ].

him_stutter_8_mal := n_-_pr-him_le_rbst &
 [ ORTH < "him.~", "him" >,
   SYNSEM.PHON.ONSET con ].

hisself_rbst := n_-_pr-himself_le &
 [ ORTH < "hisself" >,
   SYNSEM.PHON.ONSET con,
   GENRE robust ].

hisself_adv_rbst := av_-_pr-himself_le &
 [ ORTH < "hisself" >,
   SYNSEM.PHON.ONSET con,
   GENRE robust ].

;; |try his best to succeed|
his_best_adv1 := av_-_i-vp-po_le &
 [ ORTH < "his", "best" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_his+best_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

his_himself_poss_rbst := d_-_poss-his_le &
 [ ORTH < "himself" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT [ HEAD.--POSSRBST +,
			VAL.SPEC.FIRST.LOCAL.CAT.HEAD noun ] ],
   GENRE robust ].

his_himselfs_poss_rbst := d_-_poss-his_le &
 [ ORTH < "himself", "’s" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT [ HEAD.--POSSRBST +,
			VAL.SPEC.FIRST.LOCAL.CAT.HEAD noun ] ],
   GENRE robust ].

holy_a1_mal := av_-_i-vp-adj_le_rbst &
 [ ORTH < "holy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_holy_a_1_rel",
            PHON.ONSET con ] ].

holey_donut_n1 := n_-_c-nm_le &
 [ ORTH < "Holey", "Donut" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Holey+Donut",
            PHON.ONSET con ] ].

#|
homeless_n1_mal := n_-_c-sg-nom_le_rbst &
 [ ORTH < "homeless" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_homeless_n_1_rel",
            PHON.ONSET con ] ].
|#

homework_sp_n1_rbst := n_-_m_le &
 [ ORTH < "home", "work" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_homework_n_1_rel",
	    MODIFD.LPERIPH na_or_+,
            PHON.ONSET con ],
   GENRE robust ].

hope_for_v1_mal := v_np_pp_le_rbst &
 [ ORTH < "hope" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hope_v_for_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.--MIN nonpro_rel,
            PHON.ONSET voc ] ].

hope_v1_mal := v_np-vp_sor_le_rbst &
 [ ORTH < "hope" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hope_v_1_rel",
            PHON.ONSET con ] ].

housewares_n1_mal := n_-_c-sg_le_rbst &
 [ ORTH < "houseware" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_housewares_n_1_rel",
            PHON.ONSET con ] ].

;; Block for |how kind you are|
how_adv_nonwh := av_-_s-cp-pr_le &
 [ ORTH < "how" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_how_a_1_rel",
	    LOCAL.CAT.HEAD.MOD.FIRST.--SIND.--TPC -,
            PHON.ONSET con ] ].

hows_it_going_v1_rbst := v_-_imp_le &
 [ ORTH < "how", "’s", "going", "?" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hows+it+going_v_1_rel",
            PHON.ONSET con ],
   GENRE robust ].

hows_it_going_v2_rbst := v_-_imp_le &
 [ ORTH < "how", "’s", "going" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hows+it+going_v_1_rel",
            PHON.ONSET con ],
   GENRE robust ].

hulls_n1 := n_-_pn-pl-def_le &
 [ ORTH < "Hulls" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Hull",
            PHON.ONSET con ] ].

human_being_n1 := n_-_c_le &
 [ ORTH < "human", "being" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_human+being_n_1_rel",
            PHON.ONSET con ] ].

hundreds_n2_mal := n_np_c_le_rbst &
 [ ORTH < "hundreds" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hundreds_n_1_rel",
            LOCAL [ AGR.PNG png-irreg & [ PN 3p ],
	            CAT.VAL.SPR.FIRST unexpressed ],
            PHON.ONSET con ] ].

hundreds_rbst := aj_-_i-crd-hnd_le &
 [ ORTH < "hundreds" >,
   SYNSEM [ LKEYS.ALTKEYREL.CARG "100",
            PHON.ONSET con ],
   GENRE robust ].

hunters_a1_mal := aj_-_i-cmpd_le_rbst &
 [ ORTH < "hunters" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hunters_a_1_rel",
            PHON.ONSET con ] ].

;; Avoid misanalysis with robust perfect aspect in |She was hurt playing|
;; Also avoid gerund analysis of |yesterday she was hurt playing tag|
;;
hurt_v1 := v_np_noger_le &
 [ ORTH < "hurt" >,
   SYNSEM [ LOCAL.CAT [ HEAD [ --MAL3SG -,
			       TAM.SAME-PAST + ],
			VAL.COMPS.FIRST.LOCAL [ CAT.HEAD.--POSSRBST -,
			                        CONT.HOOK.INDEX.SORT entity ] ],
	    LKEYS.KEYREL.PRED "_hurt_v_1_rel",
            PHON.ONSET con ] ].

hurt_v3 := v_vp_it-s_le &
 [ ORTH < "hurt" >,
   SYNSEM [ LOCAL.CAT.HEAD [ --MAL3SG -,
			       TAM.SAME-PAST + ],
	    LKEYS.KEYREL.PRED "_hurt_v_1_rel",
            PHON.ONSET con ] ].

hurt_v4 := v_cp_it-s_le &
 [ ORTH < "hurt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hurt_v_1_rel",
	    LOCAL.CAT.HEAD [ --MAL3SG -,
			     TAM.SAME-PAST + ],
            PHON.ONSET con ] ].

;; Require VFORM fin to avoid mal analysis for "he was-had hurt."
;; But this VFORM excludes "started to hurt", so generalize to fin_or_bse
;; Well, excluding ppart also prevents |that sting had hurt!|.  So remove
;; the VFORM constraint, and count on ranking to avoid robust |was-had hurt|
;;
hurt_v1b := v_-_le &
 [ ORTH < "hurt" >,
   SYNSEM [ LOCAL.CAT.HEAD [ --MAL3SG -,
			     --MALCOPBSE -,
			     TAM.SAME-PAST + ],
	    LKEYS.KEYREL.PRED "_hurt_v_1_rel",
            PHON.ONSET con ] ].

hydraulics_n1_mal := n_-_c-sg_le_rbst &
 [ ORTH < "hydraulic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hydraulics_n_1_rel",
            PHON.ONSET con ] ].

i_myself := n_-_pr-i_le &
 [ ORTH < "I", "myself" >,
   SYNSEM.PHON.ONSET voc ].

i := n_-_pr-i_le &
 [ ORTH < "I" >,
   SYNSEM [ LOCAL.CAT.HEAD.MINORS.NORM norm_rel,
	    PHON.ONSET voc ],
   TOKENS.+LAST.+CLASS.+CASE capitalized ].

i_e_p8 := p_np_i-nmob_le &
 [ ORTH < "i", ".~", "e." >,
   SYNSEM [ LKEYS.KEYREL.PRED _i+e_p_rel,
            PHON.ONSET voc ] ].

i_e_p9 := p_np_i-nmob_le &
 [ ORTH < "i", ".~", "e" >,
   SYNSEM [ LKEYS.KEYREL.PRED _i+e_p_rel,
            PHON.ONSET voc ] ].

i_e_p10 := p_cp_s-notop_le &
 [ ORTH < "i", ".~", "e." >,
   SYNSEM [ LKEYS.KEYREL.PRED _i+e_p_rel,
            PHON.ONSET voc ] ].

i_e_p11 := p_cp_s-notop_le &
 [ ORTH < "i", ".~", "e" >,
   SYNSEM [ LKEYS.KEYREL.PRED _i+e_p_rel,
            PHON.ONSET voc ] ].

i_e_root_post_7 := av_-_s-cp-nsp-po_le &
 [ ORTH < "i", ".~", "e." >,
   SYNSEM [ LKEYS.KEYREL.PRED "_i+e_a_1_rel",
            PHON.ONSET voc ] ].

i_e_root_post_8 := av_-_s-cp-nsp-po_le &
 [ ORTH < "i", ".~", "e" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_i+e_a_1_rel",
            PHON.ONSET voc ] ].

i_e_root_pre_7 := av_-_s-cp-mc-pr_le &
 [ ORTH < "i", ".~", "e." >,
   SYNSEM [ LKEYS.KEYREL.PRED "_i+e_a_1_rel",
            PHON.ONSET voc ] ].

i_e_root_pre_8 := av_-_s-cp-mc-pr_le &
 [ ORTH < "i", ".~", "e" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_i+e_a_1_rel",
            PHON.ONSET voc ] ].

i_e_root_pre_9 := av_-_s-cp-mc-pr_le &
 [ ORTH < "i", ".~", "e.," >,
   SYNSEM [ LKEYS.KEYREL.PRED "_i+e_a_1_rel",
            PHON.ONSET voc ] ].

i_pn_np1 := n_-_pn-nounif_le &
 [ ORTH < "I" >,
   SYNSEM [ LKEYS.KEYREL.CARG "I",
            PHON.ONSET voc ] ].

i_pn_np2 := n_-_pn-nounif_le &
 [ ORTH < "I", "." >,
   SYNSEM [ LKEYS.KEYREL.CARG "I",
            PHON.ONSET voc ] ].

i_nocap_rbst := n_-_pr-i_le &
 [ ORTH < "i" >,
   SYNSEM [ LOCAL.CAT.HEAD.MINORS.NORM norm_rel,
	    PHON.ONSET voc ],
   TOKENS.+LAST.+CLASS.+CASE non_capitalized,
   GENRE robust ].

i_spelled_l_rbst := n_-_pr-i_le &
 [ ORTH < "l" >,
   SYNSEM.PHON.ONSET voc,
   GENRE robust ].

i_myself_rbst := n_-_pr-i_le &
 [ ORTH < "myself" >,
   SYNSEM.PHON.ONSET voc,
   GENRE robust ].

;; DPF 2017-09-29 - This one triggers a lot of false positives, as in 
;; |the bird disappeared as I waved to it|
;; so let's restrict to only coordinate NPs as in |He saw Kim and I|, by making
;; CASE no_case.
;;
i_pron_rbst := n_-_pr-i-me_le_mal &
 [ ORTH < "I" >,
   SYNSEM [ PHON.ONSET voc,
            LOCAL.CAT.HEAD.--MALCASE + ],
   GENRE robust ].

;; Only for sentence-final "I", not in coord structure
;;
i_pron_2_rbst := basic_n_pers_pro_acc_lexent &
 [ ORTH < "I", "." >,
   ORTH.TOKCASE non_capitalized,
   SYNSEM [ PHON.ONSET voc,
            LOCAL.CAT.HEAD.--MALCASE +,
	    LKEYS.KEYREL.ARG0 [ PNG png & [ PN 1s ],
				DIV -,	
				PT std ] ],
   GENRE robust ].

;; Treat this misspelling as a proper noun for now
I_am_nospace_pn_rbst := n_-_pn_le &
 [ ORTH < "Iam" >,
   SYNSEM [ LKEYS.KEYREL.CARG "I+am",
            PHON.ONSET voc ],
   GENRE robust ].

;; And variant with letter "l" instead of "I".
I_am_nospace_pn2_rbst := n_-_pn_le &
 [ ORTH < "lam" >,
   SYNSEM [ LKEYS.KEYREL.CARG "I+am",
            PHON.ONSET voc ],
   GENRE robust ].

lam_I_am_adv1_rbst := av_-_i-vp-x_le &
 [ ORTH < "lam" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_I+am_x_1_rel",
            PHON.ONSET voc ],
   GENRE robust ].

ice_skating_v1 := v_-_prp_le &
 [ ORTH < "ice-skating" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ice+skate_v_1_rel",
            PHON.ONSET voc ] ].

if-and-when_subconj_unspec_past := p_cp_s-past_le &
 [ ORTH < "if", "and", "when" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_if+and+when_x_rel",
            PHON.ONSET voc ] ].

if_i_was_you_pre_rbst := av_-_s-cp-mc-pr_le &
 [ ORTH < "if", "I", "was", "you" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_if+I+was+you_a_1_rel",
            PHON.ONSET voc ],
   GENRE robust ].

if_I_was_you_post_rbst := av_-_s-vp-po_le &
 [ ORTH < "if", "I", "was", "you" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_if+I+was+you_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET voc ],
   GENRE robust ].

if_only_psc_past := p_cp_s-past_le &
 [ ORTH < "if", "only" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_if+only_x_rel",
            PHON.ONSET voc ] ].

if_prd_mal := p_vp_bse_le_rbst &
 [ ORTH < "if" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_if_x_then_rel",
            PHON.ONSET voc ] ].

if-and-when_subconj_unspec_mal := p_cp_s_le_rbst &
 [ ORTH < "if", "and", "when" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_if+and+when_x_rel",
            PHON.ONSET voc ] ].

if-and-when_subconj_unspec_2_mal := p_cp_s-tns_le_rbst &
 [ ORTH < "if", "and", "when" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_if+and+when_x_rel",
            PHON.ONSET voc ] ].

if_only_psc_mal := p_cp_s_le_rbst &
 [ ORTH < "if", "only" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_if+only_x_rel",
            PHON.ONSET voc ] ].

if_only_psc_2_mal := p_cp_s-tns_le_rbst &
 [ ORTH < "if", "only" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_if+only_x_rel",
            PHON.ONSET voc ] ].

if_subconj_unspec_past := p_cp_s-unsp-past_le &
 [ ORTH < "if" >,
   SYNSEM [ LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--MAL3SG -,
            LKEYS.KEYREL.PRED "_if_x_then_rel",
            PHON.ONSET voc ] ].

if_subconj_unspec_mal := p_cp_s-unsp_le_rbst &
 [ ORTH < "if" >,
   SYNSEM [ LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--MAL3SG -,
            LKEYS.KEYREL.PRED "_if_x_then_rel",
            PHON.ONSET voc ] ].

if_such_adv1_rbst := av_-_s-cp-pr_le &
 [ ORTH < "if", "such" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_if+so_a_1_rel",
            PHON.ONSET voc ],
   GENRE robust ].

;; Only for CP-WH NPs as in |we talked about if he would win| => whether
;; DPF 2018-07-24 - Need to avoid using this for verbs where either "if" or
;; "whether" is okay, as in |we asked him if he slept|
if_whether_c_fin_rbst := cm_np-vp_wh_le_mal &
 [ ORTH < "if" >,
   SYNSEM [ PHON.ONSET voc,
            LOCAL.CAT.VAL.SUBJ *synnull* ],
   GENRE robust ].

if_whether_c_inf_rbst := cm_vp_wh_le &
 [ ORTH < "if" >,
   SYNSEM.PHON.ONSET voc,
   GENRE robust ].

ill_a1_mal := aj_-_i-att_le_rbst &
 [ ORTH < "ill" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ill_a_1_rel",
            PHON.ONSET voc ] ].

impact_on_of_n1_mal := n_pp_m_le_rbst &
 [ ORTH < "impact" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
		    KEYREL.PRED "_impact_n_1_rel" ],
            PHON.ONSET voc ] ].

impact_to_on_n1_mal := n_pp_m_le_rbst &
 [ ORTH < "impact" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
		    KEYREL.PRED "_impact_n_on_rel" ],
            PHON.ONSET voc ] ].

implant_to_in_v1_mal := v_pp_e_le_rbst &
 [ ORTH < "implant" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_implant_v_in_rel" ],
            PHON.ONSET voc ] ].

impose_to_on_v1_mal := v_np-pp_e_le_rbst &
 [ ORTH < "impose" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _to_p_sel_rel,
		    KEYREL.PRED "_impose_v_on_rel" ],
            PHON.ONSET voc ] ].

impression_of_to_n1_mal := n_pp_c_le_rbst &
 [ ORTH < "impression" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
		    KEYREL.PRED "_impression_n_of_rel" ],
            PHON.ONSET voc ] ].

impression_of_upon_n1_mal := n_pp_c_le_rbst &
 [ ORTH < "impression" >,
   SYNSEM [ LKEYS [ --COMPKEY _upon_p_sel_rel,
		    KEYREL.PRED "_impression_n_of_rel" ],
            PHON.ONSET voc ] ].

impressionist_n1 := n_-_c-maycap_le &
 [ ORTH < "impressionist" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_impressionist_n_1_rel",
            PHON.ONSET voc ] ].

;; |they must be improved the X| => |the X must be improved|
;; DPF 2022-04-23 - See comment for decreased_v1_rbst
#|
improve_psv_v1_rbst := v_np-np_only_le &
 [ ORTH < "improve" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_improve_v_1_rel",
            PHON.ONSET voc,
            LOCAL.CAT.HEAD.VFORM pas ],
   GENRE robust ].
|#

in_a_fact_adv1_rbst := av_-_i-vp-x_le &
 [ ORTH < "in", "a", "fact" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_in+fact_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET voc ],
   GENRE robust ].

in_a_fact_adv2_rbst := av_-_i-vp-po_le &
 [ ORTH < "in", "a", "fact" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_in+fact_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET voc ],
   GENRE robust ].

in_a_fact_adv3_rbst := av_-_i-vp-pr_le &
 [ ORTH < "in", "a", "fact" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_in+fact_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET voc ],
   GENRE robust ].

in_a_word_adv1 := av_-_s-cp-mc-pr_le &
 [ ORTH < "in", "a", "word" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_in+a+word_a_1_rel",
            PHON.ONSET voc ] ].

in_afterward_adv_rbst := pp_-_i_le &
 [ ORTH < "in", "afterward" >,
   SYNSEM [ LKEYS.KEYREL.PRED _in+afterward_p_rel,
            PHON.ONSET voc ],
   GENRE robust ].

in_anytime_adv_rbst := pp_-_i_le &
 [ ORTH < "in", "anytime" >,
   SYNSEM [ LKEYS.KEYREL.PRED _in+anytime_p_rel,
            PHON.ONSET voc ],
   GENRE robust ].

;; Since ranking does not always prefer idiom collocations,
;; we list this frequently occurring detless PP, and block bare "bed" entry
;; (also "out of bed")
in_bed_adv := pp_-_i_le &
 [ ORTH < "in", "bed" >,
   SYNSEM [ LKEYS.KEYREL.PRED _in+bed_p_rel,
            PHON.ONSET voc ] ].

in_case_past := p_cp_s-past_le &
 [ ORTH < "in", "case" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_in+case_x_rel",
            PHON.ONSET voc ] ].

in_case_mal := p_cp_s_le_rbst &
 [ ORTH < "in", "case" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_in+case_x_rel",
            PHON.ONSET voc ] ].

in_case_2_mal := p_cp_s-tns_le_rbst &
 [ ORTH < "in", "case" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_in+case_x_rel",
            PHON.ONSET voc ] ].

in_everyday_adv_rbst := pp_-_i_le &
 [ ORTH < "in", "everyday" >,
   SYNSEM [ LKEYS.KEYREL.PRED _in+everyday_p_rel,
            PHON.ONSET voc ],
   GENRE robust ].

in_fact_adv3_mal := av_-_i-pr-aux_le_rbst &
 [ ORTH < "in", "fact" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_in+fact_a_1_rel",
            PHON.ONSET voc ] ].

in_home_adv_rbst := pp_-_i_le &
 [ ORTH < "in", "home" >,
   SYNSEM [ LKEYS.KEYREL.PRED _in+home_p_rel,
            PHON.ONSET voc ],
   GENRE robust ].

in_hospital_adv := pp_-_i_le &
 [ ORTH < "in", "hospital" >,
   DIALECT br,
   SYNSEM [ LKEYS.KEYREL.PRED _in+hospital_p_rel,
            PHON.ONSET voc ] ].

in_on_day_rbst := p_np_i-tmp-mal_le &
 [ ORTH < "in" >,
   SYNSEM [ LKEYS [ --COMPKEY day_rel,
                    KEYREL.PRED _on_p_temp_rel ],
            PHON.ONSET voc ] ].

in_order_that_past := p_cp_s-past_le &
 [ ORTH < "in", "order", "that" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_in+order+that_x_rel",
            PHON.ONSET voc ] ].

in_order_that_mal := p_cp_s_le_rbst &
 [ ORTH < "in", "order", "that" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_in+order+that_x_rel",
            PHON.ONSET voc ] ].

in_order_that_2_mal := p_cp_s-tns_le_rbst &
 [ ORTH < "in", "order", "that" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_in+order+that_x_rel",
            PHON.ONSET voc ] ].

in_order_to_sp_rbst := p_vp_inf-or-s_le &
 [ ORTH < "inorder" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_in+order+to_x_rel",
            PHON.ONSET voc ],
   GENRE robust ].

;; Omitted object as in |they took part in.|
in_pp_prtcl_rbst := pp_-_ptcl_le &
 [ ORTH < "in" >,
   SYNSEM [ LKEYS.KEYREL.PRED _in_p_mal-sel_rel,
            PHON.ONSET voc ],
   GENRE robust ].

in_reality_adv1 := av_-_i-vp-x_le &
 [ ORTH < "in", "reality" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_in+reality_a_1_rel",
            PHON.ONSET voc ] ].

in_reality_adv2 := av_-_i-vp-po_le &
 [ ORTH < "in", "reality" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_in+reality_a_1_rel",
            PHON.ONSET voc ] ].

in_reality_adv3 := av_-_i-vp-pr_le &
 [ ORTH < "in", "reality" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_in+reality_a_1_rel",
            PHON.ONSET voc ] ].

in_spite_despite_of_rbst := p_np_i_le &
 [ ORTH < "in", "despite", "of" >,
   SYNSEM [ LKEYS.KEYREL.PRED _in+spite+of_p_rel,
            PHON.ONSET voc ],
   GENRE robust ].

in_spite_of_cp_mal := p_cp_s-fin_le_rbst &
 [ ORTH < "in", "spite", "of" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_in+spite+of_p_1_rel",
            PHON.ONSET voc ] ].

in_summary_adv1 := av_-_s-cp-pr_le &
 [ ORTH < "in", "summary" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_in+summary_a_1_rel",
            PHON.ONSET voc ] ].

in_that_p_past := p_cp_s-past_le &
 [ ORTH < "in", "that" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_in+that_x_rel",
            PHON.ONSET voc ] ].

in_that_p_mal := p_cp_s_le_rbst &
 [ ORTH < "in", "that" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_in+that_x_rel",
            PHON.ONSET voc ] ].

in_that_p_2_mal := p_cp_s-tns_le_rbst &
 [ ORTH < "in", "that" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_in+that_x_rel",
            PHON.ONSET voc ] ].

in_the_event_past := p_cp_s-notop-past_le &
 [ ORTH < "in", "the", "event" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_in+the+event_x_rel",
            PHON.ONSET voc ] ].

in_the_event_mal := p_cp_s-notop_le_rbst &
 [ ORTH < "in", "the", "event" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_in+the+event_x_rel",
            PHON.ONSET voc ] ].

in_the_fact_adv1_rbst := av_-_i-vp-x_le &
 [ ORTH < "in", "the", "fact" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_in+fact_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET voc ],
   GENRE robust ].

in_the_fact_adv2_rbst := av_-_i-vp-po_le &
 [ ORTH < "in", "the", "fact" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_in+fact_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET voc ],
   GENRE robust ].

in_the_fact_adv3_rbst := av_-_i-vp-pr_le &
 [ ORTH < "in", "the", "fact" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_in+fact_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET voc ],
   GENRE robust ].

inasmuch_as_subord_past := p_cp_s-past_le &
 [ ORTH < "inasmuch", "as" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_inasmuch+as_x_subord_rel",
            PHON.ONSET voc ] ].

inasmuch_as_subord_mal := p_cp_s_le_rbst &
 [ ORTH < "inasmuch", "as" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_inasmuch+as_x_subord_rel",
            PHON.ONSET voc ] ].

inasmuch_as_subord_2_mal := p_cp_s-tns_le_rbst &
 [ ORTH < "inasmuch", "as" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_inasmuch+as_x_subord_rel",
            PHON.ONSET voc ] ].

; including NP
included_prep_rbst := p_np_i-nm_le &
 [ ORTH < "included" >,
   SYNSEM [ LKEYS.KEYREL.PRED _including_p_rel,
            PHON.ONSET voc ],
   GENRE robust ].

;; DPF 2022-04-23 - See comment for decreased_v1_rbst
#|
increased_v2_rbst := v_-_psv_le &
 [ ORTH < "increased" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_increase_v_1_rel",
            LOCAL.CAT.VAL.COMPS.FIRST unexpressed,
            PHON.ONSET voc ],
   GENRE robust ].
|#

;; |Y is increased X| => |Y has increased X|
increase_psv_np_rbst := v_np-np_only_le &
 [ ORTH < "increase" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_imcrease_v_1_rel",
            PHON.ONSET voc,
            LOCAL.CAT.HEAD.VFORM pas ],
   GENRE robust ].

indeed_sp_rbst := av_-_i-vp-x_le &
 [ ORTH < "in", "deed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_indeed_a_1_rel",
            PHON.ONSET voc ],
   GENRE robust ].

indeed_adv2_sp_rbst := av_-_i-vp-po_le &
 [ ORTH < "in", "deed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_indeed_a_1_rel",
            PHON.ONSET voc ],
   GENRE robust ].

inflict_to_on_v1_mal := v_np-pp_e_le_rbst &
 [ ORTH < "inflict" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _to_p_sel_rel,
		    KEYREL.PRED "_inflict_v_on_rel" ],
            PHON.ONSET voc ] ].

inform_v1_mal := v_cp_le_rbst &
 [ ORTH < "inform" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_inform_v_1_rel",
            PHON.ONSET voc ] ].

infos_n1_mal := n_-_c-pl_le_rbst &
 [ ORTH < "infos" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_information_n_1_rel",
            PHON.ONSET voc ] ].

infos_n2_mal := n_-_c-pl_le_rbst &
 [ ORTH < "info", "’s" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_information_n_1_rel",
            PHON.ONSET voc ] ].

infringe_on_v1_mal := v_np_pp_le_rbst &
 [ ORTH < "infringe" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_infringe_v_on_rel",
            PHON.ONSET voc ] ].

inquire_v1_mal := v_np_cp_le_rbst &
 [ ORTH < "inquire" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_inquire_v_1_rel",
            PHON.ONSET voc ] ].

inquire_v2_mal := v_np-cp_q_le_rbst &
 [ ORTH < "inquire" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_inquire_v_1_rel",
            PHON.ONSET voc ] ].

inquire_v4 := v_cp_fin-inf-q_le &
 [ ORTH < "inquire" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_inquire_v_1_rel",
            PHON.ONSET voc ] ].

inquire_v4_mal := v_cp_le_ques_rbst &
 [ ORTH < "inquire" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_inquire_v_1_rel",
            PHON.ONSET voc ] ].

insist_on_v1_mal := v_np_pp_le_rbst &
 [ ORTH < "insist" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_insist_v_on_rel",
            PHON.ONSET voc ] ].

insofar_as_subord_past := p_cp_s-past_le &
 [ ORTH < "insofar", "as" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_insofar+as_x_subord_rel",
            PHON.ONSET voc ] ].

insofar_as_subord_mal := p_cp_s_le_rbst &
 [ ORTH < "insofar", "as" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_insofar+as_x_subord_rel",
            PHON.ONSET voc ] ].

insofar_as_subord_2_mal := p_cp_s-tns_le_rbst &
 [ ORTH < "insofar", "as" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_insofar+as_x_subord_rel",
            PHON.ONSET voc ] ].

instead_adv_sc := av_-_s-cp-pr_le &
 [ ORTH < "instead" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_instead_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET voc ] ].

instead_of_for_rbst := c_xp_instead_le &
 [ ORTH < "instead", "for" >,
   SYNSEM.PHON.ONSET voc,
   GENRE robust ].

instead_of_for_v_rbst := c_xp_instead-v_le &
 [ ORTH < "instead", "for" >,
   SYNSEM.PHON.ONSET voc,
   GENRE robust ].

instead_of_for_p_rbst := p_np_i_le &
 [ ORTH < "instead", "for" >,
   SYNSEM [ LKEYS.KEYREL.PRED _instead+of_p_rel,
            PHON.ONSET voc ],
   GENRE robust ].

instead_of_vpbse_mal := p_vp_bse_le_rbst &
 [ ORTH < "instead", "of" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_instead+of_p_rel",
            PHON.ONSET voc ] ].

instruct_v1_sbj_mal := v_cp_malsbjnct-inf_le_rbst &
 [ ORTH < "instruct" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_instruct_v_on_rel",
            PHON.ONSET voc ] ].

integrate_to_into_v1_mal := v_np-pp_e_le_rbst &
 [ ORTH < "integrate" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _to_p_sel_rel,
		    KEYREL.PRED "_integrate_v_into_rel" ],
            PHON.ONSET voc ] ].

interest_v1 := v_np_ntr_le &
 [ ORTH < "interest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_interest_v_1_rel",
	    LOCAL.CAT.HEAD.--HAVEBE -,
            PHON.ONSET voc ] ].

internals_n1_mal := n_-_c-sg_le_rbst &
 [ ORTH < "internal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_internals_n_1_rel",
            PHON.ONSET voc ] ].

internet_n1 := n_-_c-maycap_le &
 [ ORTH < "internet" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_internet_n_1_rel",
            PHON.ONSET voc ] ].

into_sp_rbst := p_np_i_le &
 [ ORTH < "in", "to" >,
   SYNSEM [ LKEYS.KEYREL.PRED _into_p_rel,
            PHON.ONSET voc ],
   GENRE robust ].

into_prtcl_sp_rbst := p_np_ptcl_le &
 [ ORTH < "in", "to" >,
   SYNSEM [ LKEYS.KEYREL.PRED _into_p_sel_rel,
            PHON.ONSET voc ],
   GENRE robust ].

introduce_v2_mal := v_np-np_le_rbst &
 [ ORTH < "introduce" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_introduce_v_1_rel",
            PHON.ONSET voc ] ].

introduce_v3_mal := v_cp_le_rbst &
 [ ORTH < "introduce" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_introduce_v_1_rel",
            PHON.ONSET con ] ].

;; |We introduce how to succeed|
introduce_q_v3_mal := v_cp_q_le_rbst &
 [ ORTH < "introduce" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_introduce_v_to_rel",
            PHON.ONSET voc ] ].

intrude_upon_v1_mal := v_np_pp_le_rbst &
 [ ORTH < "intrude" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_intrude_v_upon_rel",
            PHON.ONSET voc ] ].

invade_into_v1_mal := v_pp_np_le_rbst &
 [ ORTH < "invade" >,
   SYNSEM [ LKEYS [ --COMPKEY _into_p_sel_rel,
                    KEYREL.PRED "_invade_v_1_rel" ],
            PHON.ONSET voc ] ].

invest_for_in_v1_mal := v_pp_e_le_rbst &
 [ ORTH < "invest" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_invest_v_in_rel" ],
            PHON.ONSET voc ] ].

investigate_on_v1_mal := v_pp_np_le_rbst &
 [ ORTH < "investigate" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_investigate_v_1_rel" ],
            PHON.ONSET voc ] ].

invite_bse_v2_mal := v_np-vp_bse_le_rbst &
 [ ORTH < "invite" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_invite_v_to_rel",
            PHON.ONSET voc ] ].

;; |Is Ancient Egypt interesting ...|
is_nounif_n1 := n_-_pn-nounif_le &
 [ ORTH < "Is" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Is",
            PHON.ONSET voc ] ].

;; For |It is no doubt that our exam system leaves something to be desired.|
;; but too much spurious ambig, so disable for now
#|
it_there_expl_rbst := n_-_pr-there-x_le &
 [ ORTH < "it" >,
   SYNSEM.PHON.ONSET con,
   GENRE robust ].
|#

it_itself_rbst := n_-_pr-it_le &
 [ ORTH < "itself" >,
   SYNSEM [ PHON.ONSET voc,
            LOCAL.CAT.HEAD.CASE nom ],
   GENRE robust ].

it_sp_rbst := n_-_pr-it-x_le &
 [ ORTH < "lt" >,
   SYNSEM.PHON.ONSET voc,
   GENRE robust ].

it2_sp_rbst := n_-_pr-it_le &
 [ ORTH < "lt" >,
   SYNSEM.PHON.ONSET voc,
   GENRE robust ].

it_3_sp_rbst := n_np_pr-it_le &
 [ ORTH < "lt" >,
   SYNSEM.PHON.ONSET voc,
   GENRE robust ].

its_be_cop_rbst := v_prd_its_le_mal &
 [ ORTH < "its" >,
   SYNSEM.PHON.ONSET voc ].

its_be_np_rbst := v_np_its_le_mal &
 [ ORTH < "its" >,
   SYNSEM.PHON.ONSET voc ].

its_itself_poss_rbst := d_-_poss-its_le &
 [ ORTH < "itself" >,
   SYNSEM [ PHON.ONSET voc,
            LOCAL.CAT [ HEAD.--POSSRBST +,
			VAL.SPEC.FIRST.LOCAL.CAT.HEAD noun ] ],
   GENRE robust ].

its_itselfs_poss_rbst := d_-_poss-its_le &
 [ ORTH < "itself", "’s" >,
   SYNSEM [ PHON.ONSET voc,
            LOCAL.CAT [ HEAD.--POSSRBST +,
			VAL.SPEC.FIRST.LOCAL.CAT.HEAD noun ] ],
   GENRE robust ].

jackal_n1 := n_-_c-msc_le &
 [ ORTH < "jackal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_jackal_n_1_rel",
            PHON.ONSET con ] ].

jackson_elementary_n1 := n_-_pn_le &
 [ ORTH < "Jackson", "Elementary" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Jackson+Elementary",
            PHON.ONSET con ] ].

jeans_n1_mal := n_-_c-sg_le_rbst &
 [ ORTH < "jean" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_jeans_n_1_rel",
            PHON.ONSET con ] ].

johnsons_n1 := n_-_pn-pl-def_le &
 [ ORTH < "Johnsons" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Johnson",
            PHON.ONSET con ] ].

;; 2020-12-03 - We want "They joined in the celebration", so comment out.
#|
join_in_v1_mal := v_pp_np_le_rbst &
 [ ORTH < "join" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_join_v_1_rel" ],
            PHON.ONSET con ] ].
|#

joke_with_v1_mal := v_np_pp_le_rbst &
 [ ORTH < "joke" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_joke_v_with_rel",
            PHON.ONSET con ] ].

jolly_a1_mal := av_-_i-vp-adj_le_rbst &
 [ ORTH < "jolly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_jolly_a_1_rel",
            PHON.ONSET con ] ].

just_now_adv_mal := av_-_i-pr-aux_le_rbst &
 [ ORTH < "just", "now" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_just+now_a_1_rel",
            PHON.ONSET con ] ].

just_plain_adv1_mal := av_-_i-pr-aux_le_rbst &
 [ ORTH < "just", "plain" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_just+plain_a_1_rel",
            PHON.ONSET con ] ].

keep_on_v2_rbst := v_p-vp_prp_le &
 [ ORTH < "keep" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_keep_v_on_rel" ],
            PHON.ONSET con ],
   GENRE robust ].

khakis_n1_mal := n_-_c-sg_le_rbst &
 [ ORTH < "khaki" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_khakis_n_1_rel",
            PHON.ONSET con ] ].

kind_a2_mal := aj_pp-vp_i-for-it_le_rbst &
 [ ORTH < "kind" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_kind_a_of_rel",
            PHON.ONSET con ] ].

kind_kindly_a1_rbst := aj_-_i_le &
 [ ORTH < "kindly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_kind_a_1_rel",
            PHON.ONSET con ],
   GENRE robust ].

;; |All kinds of thing|
kind_n1_pl_rbst := n_pp_c-of-brn_le &
 [ ORTH < "kind" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_kind_n_of-n_rel",
            LOCAL.AGR.PNG.PN 3p,
            PHON.ONSET con ],
   GENRE robust ].

knickers_n1_mal := n_-_c-sg_le_rbst &
 [ ORTH < "knicker" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_knickers_n_1_rel",
            PHON.ONSET con ] ].

know_v7_mal := v_cp_fin-inf-q-mc_le_rbst &
 [ ORTH < "know" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_know_v_1_rel",
            PHON.ONSET con ] ].

#|
knowledge_mod_mal := n_-_m-nomod_le_rbst &
 [ ORTH < "knowledge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_knowledge_n_1_rel",
            PHON.ONSET con ] ].
|#

;; For robust "it is a common knowledge that fish swim"
knowledge_n3_rbst := n_-_c_le &
 [ ORTH < "knowledge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_knowledge_n_1_rel",
            LOCAL.CAT [ HEAD [ --BARE -,
	                       MINORS.ALTMIN _a_q_rel ],
			VAL.SPR.FIRST expressed_synsem ],
            PHON.ONSET con ],
   GENRE robust ].

kudos_n2_mal := n_-_c-sg_le_rbst &
 [ ORTH < "kudo" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_kudos_n_1_rel",
            PHON.ONSET con ] ].

largely := av_-_i-vp-pr_le &
 [ ORTH < "largely" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_largely_a_1_rel",
            PHON.ONSET con ] ].

largely_adv_mal := av_-_i-vp-po_le_rbst &
 [ ORTH < "largely" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_largely_a_1_rel",
            PHON.ONSET con ] ].

lacks_n1_mal := n_-_c-pl_le_rbst &
 [ ORTH < "lacks" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lack_n_1_rel",
            PHON.ONSET con ] ].

lack_n1_mal := n_-_m-nodet_le_rbst &
 [ ORTH < "lack" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lack_n_1_rel",
            PHON.ONSET con ] ].

lacking_n1_mal := n_-_m-nodet_le_rbst &
 [ ORTH < "lacking" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lack_n_1_rel",
            PHON.ONSET con ] ].

lack_of_v1_mal := v_pp_np_le_rbst &
 [ ORTH < "lack" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_lack_v_1_rel" ],
            PHON.ONSET con ] ].

lake_nm_n2 := n_-_c-nm_le &
 [ ORTH < "Lake" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Lake",
            LOCAL.CAT.HEAD.--BARE -,
	    MODIFD.LPERIPH bool,
            PHON.ONSET con ],
   TOKENS.+LAST.+CLASS.+CASE capitalized ].

lake_nounif_n1 := n_-_pn-nounif_le &
 [ ORTH < "Lake" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Lake",
            PHON.ONSET con ] ].

lake_nounif_n2 := n_-_pn-nounif_le &
 [ ORTH < "Lake", "." >,
   SYNSEM [ LKEYS.KEYREL.CARG "Lake",
            PHON.ONSET con ] ].

lake_otter_n1 := n_-_pn_le &
 [ ORTH < "Lake", "Otter" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Lake+Otter",
            PHON.ONSET con ] ].

last_adv1 := av_-_i-vp-po-nmb_le &
 [ ORTH < "last" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_last_a_1_rel",
	    LOCAL.CAT [ HEAD.--ADVADJ -,
	                VAL.SPR.FIRST unexpressed_min ],
            PHON.ONSET con ] ].

last_adv2 := av_-_i-vp-pr_le &
 [ ORTH < "last" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_last_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

last_adv2_mal := av_-_i-pr-aux_le_rbst &
 [ ORTH < "last" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_last_a_1_rel",
            PHON.ONSET con ] ].

last_adv_rbst := av_-_s-cp-mc-pr_le &
 [ ORTH < "last" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_last_a_1_rel",
	    LOCAL.CAT.HEAD [ MOD.FIRST [ LOCAL [ CAT.HEAD verb,
						 CONT.HOOK.XARG.SORT entity,
						 CONJ cnil ],
					 MODIFD notmod_or_rmod ],
	                     --CMA - ],
            PHON.ONSET con ],
   GENRE robust ].

last+but+no+least_adv1_sp_rbst := av_-_i-vp_le &
 [ ORTH < "last", "but", "no", "least" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_last+but+not+least_a_1_rel",
            PHON.ONSET con ],
   GENRE robust ].

last+but+not+less_adv1_sp_rbst := av_-_i-vp_le &
 [ ORTH < "last", "but", "not", "less" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_last+but+not+least_a_1_rel",
            PHON.ONSET con ],
   GENRE robust ].

;; DPF 2017-09-07 - Four entries: one for modifying nominals (with no E feat),
;; one for modifying non-tensed events, one for well-formed modifying of tensed
;; events, and one for mal-formed modifying of VPs with wrong tense.
;;
last_det := d_-_last_le &
 [ ORTH < "last" >,
   SYNSEM [ LOCAL.CONT.HOOK.XARG basic_non_expl-ind & [ E.TENSE no_tense ],
   	    LKEYS.ALTKEYREL.PRED "_last_a_1_rel",
            PHON.ONSET con ] ].

last_det_rbst := d_-_last_le &
 [ ORTH < "last" >,
   SYNSEM [ LOCAL [ CONT.HOOK.XARG [ SORT event-sort,
				     E [ TENSE nonpast,
					 SAME-PAST - ] ],
		    CAT.VAL.SPEC.FIRST [ LOCAL.CAT.HEAD.CASE nounif_case,
					 --SIND.SORT time ] ],
   	    LKEYS.ALTKEYREL.PRED "_last_a_1_rel",
            PHON.ONSET con ],
   GENRE robust ].

last+but+not+least_adv1_rbst := av_-_i-vp_le &
 [ ORTH < "the", "last", "but", "not", "the", "least" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_last+but+not+least_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ],
   GENRE robust ].

last+but+not+least_adv2_rbst := av_-_i-vp_le &
 [ ORTH < "the", "last", "but", "not", "least" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_last+but+not+least_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ],
   GENRE robust ].

last+but+not+least_adv3_rbst := av_-_i-vp_le &
 [ ORTH < "last", "but", "not", "the", "least" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_last+but+not+least_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ],
   GENRE robust ].

last_nounif_n1 := n_-_pn-nounif_le &
 [ ORTH < "last" >,
   SYNSEM [ LKEYS.KEYREL.CARG "last",
            PHON.ONSET con ] ].

;; DPF 2017-09-26 - Insist on comma for S-initial |last|, by adding good entry
;; with the comma present, and a robust one that prevents comma attachment.
;;
last_adv3 := av_-_s-cp-pr_le &
 [ ORTH < "last", "," >,
   SYNSEM [ LKEYS.KEYREL.PRED "_last_a_1_rel",
            PHON.ONSET con ] ].

last_det_emod := d_-_last_le &
 [ ORTH < "last" >,
   SYNSEM [ LOCAL [ CONT.HOOK.XARG.E.TENSE past,
		    CAT.VAL.SPEC.FIRST.LOCAL.CAT.HEAD.CASE obliq ],
   	    LKEYS.ALTKEYREL.PRED "_last_a_1_rel",
            PHON.ONSET con ] ].

later_adv2_mal := av_-_i-pr-aux_le_rbst &
 [ ORTH < "later" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_later_a_1_rel",
            PHON.ONSET con ] ].

later_and_sooner_adv1_rbst := av_-_i-vp_le &
 [ ORTH < "later", "and", "sooner" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sooner+or+later_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ],
   GENRE robust ].

later_or_sooner_adv1_rbst := av_-_i-vp_le &
 [ ORTH < "later", "or", "sooner" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sooner+or+later_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ],
   GENRE robust ].

lawyers_a1_mal := aj_-_i-cmpd_le_rbst &
 [ ORTH < "lawyers" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lawyers_a_1_rel",
            PHON.ONSET con ] ].

lay_lie_v1_rbst := v_-_le &
 [ ORTH < "lay" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lie_v_1_rel",
            PHON.ONSET con ],
   GENRE robust ].

;; 20-09-29 - Can't have this one, since we also want "they lead busy lives"
#|
lead_to_v1_mal := v_np_pp_le_rbst &
 [ ORTH < "lead" >,
   SYNSEM [ LKEYS [ KEYREL.PRED "_lead_v_to_rel" ],
            PHON.ONSET con ] ].
|#

learn_of_from_v1_mal := v_np-pp_e_le_rbst &
 [ ORTH < "learn" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _of_p_sel_rel,
		    KEYREL.PRED "_learn_v_from_rel" ],
            PHON.ONSET con ] ].

learneds_n1 := n_-_pn-pl-def_le &
 [ ORTH < "Learneds" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Learned",
            PHON.ONSET con ] ].

leave_n1 := n_-_m_le &
 [ ORTH < "leave" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_leave_n_of_rel",
            PHON.ONSET con ] ].

leave_n3 := n_pp_c-of-obl_le &
 [ ORTH < "leave" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_leave_n_of_rel",
            PHON.ONSET con ] ].

#|
lecture_idm_n1 := n_-_c-idm_le &
 [ ORTH < "lecture" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lecture_n_1_rel",
            PHON.ONSET con ] ].
|#

left_a1 := aj_-_i-prd_le &
 [ ORTH < "left" >,
   SYNSEM [ LOCAL [ CAT.HEAD.MINORS.NORM no_rel,
   	    	    CONT.HOOK.INDEX.E.TENSE no_tense ],
   	    LKEYS.KEYREL.PRED "_left_a_1_rel",
            PHON.ONSET con ] ].

leftovers_n1_mal := n_-_c-sg_le_rbst &
 [ ORTH < "leftover" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_leftovers_n_1_rel",
            PHON.ONSET con ] ].

leftovers_n2_mal := n_-_c-sg_le_rbst &
 [ ORTH < "left", "-", "over" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_leftovers_n_1_rel",
            PHON.ONSET con ] ].

leftovers_n3_mal := n_-_c-sg_le_rbst &
 [ ORTH < "left", "over" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_leftovers_n_1_rel",
            PHON.ONSET con ] ].

leisurely_pn1 := n_-_pn-cap_le &
 [ ORTH < "Leisurely" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Leisurely",
            PHON.ONSET con ] ].

leisurely_adv_mal := av_-_i-vp-adj_le_rbst &
 [ ORTH < "leisurely" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_leisurely_a_1_rel",
            PHON.ONSET con ] ].

less_a2 := aj_pp_i-more_le &
 [ ORTH < "less" >,
   SYNSEM [ LKEYS.KEYREL.PRED little-few_a_rel,
            LOCAL.CAT.HEAD.MOD.FIRST.LOCAL [ AGR.PNG.PN 3s,
					     CAT.VAL.SPR.FIRST unexpressed ],
            PHON.ONSET con ] ].

;; |Less cats arrived| => |Fewer|
less_a2_rbst := aj_pp_i-more_le &
 [ ORTH < "less" >,
   SYNSEM [ LKEYS.KEYREL.PRED little-few_a_rel,
            LOCAL.CAT.HEAD.MOD.FIRST expressed_synsem &
			             [ LOCAL [ AGR.PNG.PN 3p,
				               CAT.VAL.SPR.FIRST unexpressed ]],
            PHON.ONSET con ],
   GENRE robust ].

;; |the less cats| => |fewer cats|
less_a2_det_rbst := aj_pp_i-more_le_mal &
 [ ORTH < "less" >,
   SYNSEM [ LKEYS.KEYREL.PRED little-few_a_rel,
            LOCAL.CAT.HEAD.MOD.FIRST expressed_synsem &
		             [ LOCAL [ AGR.PNG.PN 3p,
				       CAT.VAL.SPR.FIRST expressed_synsem ] ],
            PHON.ONSET con ] ].

let_v1_mal := v_vp_seq_le_rbst &
 [ ORTH < "let" >,
   SYNSEM [ LOCAL.CAT.HEAD [ --MAL3SG -,
			       TAM.SAME-PAST + ],
	    LKEYS.KEYREL.PRED "_let_v_1_rel",
            PHON.ONSET con ] ].

let_v2_mal := v_np-vp_oeq_le_rbst &
 [ ORTH < "let" >,
   SYNSEM [ LOCAL.CAT.HEAD.--MAL3SG -,
	    LKEYS.KEYREL.PRED "_let_v_1_rel",
            PHON.ONSET con ] ].

let_v3_mal := v_vp_seq-bse_le_rbst &
 [ ORTH < "let" >,
   SYNSEM [ LOCAL.CAT [ HEAD [ --MAL3SG -,
			       TAM.SAME-PAST + ],
			VAL.COMPS.FIRST.LEX - ],
	    LKEYS.KEYREL.PRED "_let_v_1_rel",
            PHON.ONSET con ] ].

;; Require SORTs to match, to enable robust VP-VP asym coord as in
;; |he could hardly walk at the age of one, let alone running.|
let_alone_1 := c_xp_let-alone_le &
 [ ORTH < "let", "alone" >,
   SYNSEM [ LOCAL.CONJ.CREL [ ARG1 ref-ind & [ SORT #sort ],
   	                      ARG2 ref-ind & [ SORT #sort & entity-or-event ] ],
            PHON.ONSET con ] ].

let_alone_2 := c_xp_let-alone_le &
 [ ORTH < "let", "alone" >,
   SYNSEM [ LOCAL.CONJ.CREL [ ARG1 event,
   	                      ARG2 event ],
            PHON.ONSET con ] ].

let_v1_fin_mal := v_np-vp_fin_le_rbst &
 [ ORTH < "let" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_let_v_1_rel",
            PHON.ONSET con ] ].

let_v1_fin_3sg_mal := v_np-vp_fin-3sg_le_rbst &
 [ ORTH < "let" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_let_v_1_rel",
            PHON.ONSET con ] ].

lets_imp_rbst := v_vp_lets-imp_le &
 [ ORTH < "let", "we" >,
   SYNSEM.PHON.ONSET con,
   GENRE robust ].

leverage_on_v1_mal := v_pp_np_le_rbst &
 [ ORTH < "leverage" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_leverage_v_1_rel" ],
            PHON.ONSET con ] ].

lie_v4_locinv_mal := v_np_locinv-mv_le_rbst &
 [ ORTH < "lie" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lie_v_2_rel",
            PHON.ONSET con ] ].

; "I like arrive"
like_v1_mal := v_vp_seq-bse_le_rbst &
  [ ORTH < "like" >,
    SYNSEM [ LKEYS.KEYREL.PRED "_like_v_1_rel",
	     PHON.ONSET con ] ].

like_p_2_past := p_cp_s-past_le &
 [ ORTH < "like" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_like_x_preph_rel",
            PHON.ONSET con ] ].

like_p_2_mal := p_cp_s_le_rbst &
 [ ORTH < "like" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_like_x_preph_rel",
            PHON.ONSET con ] ].

like_p_2b_mal := p_cp_s-tns_le_rbst &
 [ ORTH < "like" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_like_x_preph_rel",
            PHON.ONSET con ] ].

listen_to_v1_mal := v_np_pp_le_rbst &
 [ ORTH < "listen" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_listen_v_to_rel",
            PHON.ONSET con ] ].

;; |she was little happy|
little_deg_less_rbst := av_-_dg-v_le &
 [ ORTH < "little" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_less_x_deg_rel",
	    LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CAT.HEAD.PRD +,
            PHON.ONSET con ],
   GENRE robust ].

live_v3_locinv_mal := v_np_locinv-mv_le_rbst &
 [ ORTH < "live" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_live_v_1_rel",
            PHON.ONSET con ] ].

lively_a1_mal := av_-_i-vp-adj_le_rbst &
 [ ORTH < "lively" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lively_a_1_rel",
            PHON.ONSET con ] ].

;; This one over-applies, so exclude for now.
;live_in_v1_mal := v_np_pp_le_rbst &
; [ ORTH < "live" >,
;   SYNSEM [ LKEYS.KEYREL.PRED "_live_v_1_rel",
;            PHON.ONSET con ] ].

living_room_n1 := n_-_c_le &
 [ ORTH < "living", "room" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_living+room_n_1_rel",
            PHON.ONSET con ] ].

;; DPF 2018-03-12 - Removed LPERIPH bool, no longer compatible with lex type
liver_and_onions_n1 := n_-_m_le &
 [ ORTH < "liver", "and", "onions" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_liver+and+onions_n_1_rel",
            PHON.ONSET con ] ].

liver_and_onions_n2 := n_-_c-pl_le &
 [ ORTH < "liver", "and", "onions" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_liver+and+onions_n_1_rel",
            PHON.ONSET con ] ].

loan_v2_mal := v_-_le_rbst &
 [ ORTH < "loan" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_loan_v_1_rel",
            PHON.ONSET con ] ].

locate_v1_mal := v_-_le_pas_rbst &
 [ ORTH < "locate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_locate_v_1_rel",
            PHON.ONSET con ] ].

locate_v_inv_mal := v_np_locinv_le_rbst &
 [ ORTH < "locate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_locate_v_1_rel",
            PHON.ONSET con ] ].

lonely_a1_mal := av_-_i-vp-adj_le_rbst &
 [ ORTH < "lonely" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lonely_a_1_rel",
            PHON.ONSET con ] ].

long_time_a2 := aj_-_i-att_le &
 [ ORTH < "long", "time" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_long+time_a_1_rel",
            PHON.ONSET con ] ].

longer_nom := n_-_ad-time-acc_le &
 [ ORTH < "longer" >,
   SYNSEM [ LKEYS.KEYREL.PRED _longer_n_1_rel,
            PHON.ONSET con ] ].

;; for "the look of terrified"
look_n1_of := n_pp_c_le &
 [ ORTH < "look" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_mal-vppas_rel,
                    KEYREL.PRED "_look_n_of_rel" ],
	    LOCAL.CAT.VAL.COMPS.FIRST canonical_synsem & [ OPT - ],
            PHON.ONSET con ] ].

;; 2021-01-14 - Avoid for "look like iron"
look_at_v1_mal := v_np_pp_le_rbst &
 [ ORTH < "look" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_look_v_at_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.MODIFD notmod_or_rmod,
            PHON.ONSET con ] ].

looker_on_n1_rbst := n_-_c-sg_le &
 [ ORTH < "looker", "-", "on" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_on-looker_n_1_rel",
            PHON.ONSET con ],
   GENRE robust ].

looker_on_n2_rbst := n_-_c-sg_le &
 [ ORTH < "looker", "on" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_on-looker_n_1_rel",
            PHON.ONSET con ],
   GENRE robust ].

lookers_on_n1_rbst := n_-_c-pl_le &
 [ ORTH < "lookers", "-", "on" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_on-looker_n_1_rel",
            PHON.ONSET con ],
   GENRE robust ].

lookers_on_n2_rbst := n_-_c-pl_le &
 [ ORTH < "lookers", "on" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_on-looker_n_1_rel",
            PHON.ONSET con ],
   GENRE robust ].

lookers_on_n3_rbst := n_-_c-pl_le &
 [ ORTH < "looker", "-", "ons" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_on-looker_n_1_rel",
            PHON.ONSET con ],
   GENRE robust ].

lookers_on_n4_rbst := n_-_c-pl_le &
 [ ORTH < "looker", "ons" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_on-looker_n_1_rel",
            PHON.ONSET con ],
   GENRE robust ].

loses_losses_n1_sp_rbst := n_-_c-pl_le &
 [ ORTH < "loses" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_loss_n_1_rel",
            PHON.ONSET con ],
   GENRE robust ].

;; 2020-02-24 - Stamped NORM norm_rel on MOD, to prevent these in compounds:
;; |[lot of art] lovers|
;;
lot_of_a1_rbst := aj_-_i-many_le &
 [ ORTH < "lot", "of" >,
   SYNSEM [ LKEYS.KEYREL.PRED much-many_a_rel,
            LOCAL.CAT.HEAD.MOD.FIRST.LOCAL.CAT.HEAD.MINORS.NORM norm_rel,
            PHON.ONSET con ],
   GENRE robust ].

lot_of_a2_rbst := aj_-_i-much_le &
 [ ORTH < "lot", "of" >,
   SYNSEM [ LKEYS.KEYREL.PRED much-many_a_rel,
            LOCAL.CAT.HEAD.MOD.FIRST.LOCAL.CAT.HEAD.MINORS.NORM norm_rel,
            PHON.ONSET con ],
   GENRE robust ].

lots_of_a1 := aj_-_i-many_le &
 [ ORTH < "lots", "of" >,
   SYNSEM [ LKEYS.KEYREL.PRED much-many_a_rel,
            LOCAL.CAT.HEAD.MOD.FIRST expressed_synsem,
            PHON.ONSET con ] ].

lots_of_a2 := aj_-_i-much_le &
 [ ORTH < "lots", "of" >,
   SYNSEM [ LKEYS.KEYREL.PRED much-many_a_rel,
            LOCAL.CAT.HEAD.MOD.FIRST expressed_synsem,
            PHON.ONSET con ] ].

louder_adv1 := av_-_i-vp-po_le &
 [ ORTH < "louder" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_louder_a_1_rel",
            PHON.ONSET con ] ].

;; DPF 2018-03-06 - Since we block noun |love| in compounds, list some common
;; ones.

love_child_n1 := n_-_c_le &
 [ ORTH < "love", "child" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_love+child_n_1_rel",
            PHON.ONSET con ] ].

love_letter_n1 := n_-_c_le &
 [ ORTH < "love", "letter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_love+letter_n_1_rel",
            PHON.ONSET con ] ].

love_potion_n1 := n_-_c_le &
 [ ORTH < "love", "potion" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_love+potion_n_1_rel",
            PHON.ONSET con ] ].

love_spell_n1 := n_-_c_le &
 [ ORTH < "love", "spell" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_love+spell_n_1_rel",
            PHON.ONSET con ] ].

love_v1_mal := v_vp_seq-bse_le_rbst &
  [ ORTH < "love" >,
    SYNSEM [ LKEYS.KEYREL.PRED "_love_v_1_rel",
	     PHON.ONSET con ] ].

lovely_a1_mal := av_-_i-vp-adj_le_rbst &
 [ ORTH < "lovely" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lovely_a_1_rel",
            PHON.ONSET con ] ].

lower_down_v1_mal := v_pp_np_le_rbst &
 [ ORTH < "lower" >,
   SYNSEM [ LKEYS [ --COMPKEY _down_p_sel_rel,
                    KEYREL.PRED "_lower_v_1_rel" ],
            PHON.ONSET con ] ].

lucy_n1_nocap_mal := n_-_pn_le_nocap_rbst &
 [ ORTH < "Lucy" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Lucy",
            PHON.ONSET con ] ].

lunar_new_year_n1 := n_-_c-nm_le &
 [ ORTH < "Lunar", "New", "Year" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Lunar+New+Year",
            LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

lunch_n1 := n_-_m-nomod_le &
 [ ORTH < "lunch" >,
   ALTS.PLMASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_lunch_n_1_rel",
            PHON.ONSET con ] ].

lunch_n2 := n_-_c_le &
 [ ORTH < "lunch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lunch_n_1_rel",
            LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

;; Comment out: "He ate lunch."
#|
lunch_mod_mal := n_-_m-nomod_le_rbst &
 [ ORTH < "lunch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lunch_n_1_rel",
            PHON.ONSET con ] ].
|#

lunch_pizza_n1_rbst := n_-_c_le &
 [ ORTH < "lunch", "pizza" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lunch+pizza_n_1_rel",
            PHON.ONSET con ],
   GENRE robust ].

m_d_n10 := n_-_c_le &
 [ ORTH < "M", ".~", "D." >,
   SYNSEM [ LKEYS.KEYREL.PRED "_md_n_1_rel",
            PHON.ONSET con ] ].

m_d_n11 := n_-_c_le &
 [ ORTH < "M", ".~", "D" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_md_n_1_rel",
            PHON.ONSET con ] ].

make_v1_mal := v_vp_seq_le_rbst &
 [ ORTH < "make" >,
   SYNSEM [ LOCAL.CAT.HEAD [ --MAL3SG -,
			     --HAVEBE - ],
	    LKEYS.KEYREL.PRED "_make_v_cause_rel",
            PHON.ONSET con ] ].

make_aux_rbst := v_vp_seq-bse_le &
 [ ORTH < "make" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_make_v_1_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--SAMENV -,
            PHON.ONSET con ],
   GENRE robust ].

make_it_v2_mal := v_prd_seq_le_rbst &
 [ ORTH < "make" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_make_v_1_rel",
            PHON.ONSET con ] ].

make_v2_fin_mal := v_np-vp_fin_le_rbst &
 [ ORTH < "make" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_make_v_cause_rel",
            PHON.ONSET con ] ].

make_v2_fin_3sg_mal := v_np-vp_fin-3sg_le_rbst &
 [ ORTH < "make" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_make_v_cause_rel",
            PHON.ONSET con ] ].

malingerer_n1_sp_rbst := n_-_c_le &
 [ ORTH < "malinger" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_malingerer_n_1_rel",
            PHON.ONSET con ],
   GENRE robust ].

manly_a1_mal := av_-_i-vp-adj_le_rbst &
 [ ORTH < "manly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_manly_a_1_rel",
            PHON.ONSET con ] ].

many_all_a1_rbst := aj_-_i-many-spr_le &
 [ ORTH < "many", "all" >,
   SYNSEM [ LKEYS.KEYREL.PRED much-many_a_rel,
            PHON.ONSET con ],
   GENRE robust ].

;; |many news| |many information|
;; Added MOD..NORM norm_rel to block robust |[many health] problems|
many_div_adj_mal := aj_-_i-many_le_rbst &
 [ ORTH < "many" >,
   SYNSEM [ PHON.ONSET con,
	    LOCAL.CAT.HEAD.MOD.FIRST expressed_synsem &
		                     [ LOCAL [ CAT.HEAD.MINORS.NORM norm_rel,
				               AGR.PNG png-reg ] ] ] ].

many_adj_mal := aj_-_i-one_le_rbst &
 [ ORTH < "many" >,
   SYNSEM.PHON.ONSET con ].

many_thanks_v1 := v_-_imp_le &
 [ ORTH < "many", "thanks" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_many+thanks_v_1_rel",
            PHON.ONSET con ] ].

mark_n4 := n_-_c-pl_le &
 [ ORTH < "marks" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mark_n_of_rel",
            PHON.ONSET con ] ].

married_of_a1_mal := aj_pp_i_le_rbst &
 [ ORTH < "married" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_married_a_to_rel" ],
            PHON.ONSET con ] ].

married_with_a1_mal := aj_pp_i_le_rbst &
 [ ORTH < "married" >,
   SYNSEM [ LKEYS [ --COMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_married_a_to_rel" ],
            PHON.ONSET con ] ].

marvel_at_v1_mal := v_np_pp_le_rbst &
 [ ORTH < "marvel" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_marvel_v_at_rel",
            PHON.ONSET con ] ].

mary_n1_nocap_mal := n_-_pn_le_nocap_rbst &
 [ ORTH < "Mary" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Mary",
            PHON.ONSET con ] ].

mary_sp_rbst := n_-_pn-fem_le &
 [ ORTH < "Marry" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Mary",
            PHON.ONSET con ],
   GENRE robust ].

may_fin_mal := v_vp_fin_le_rbst &
 [ ORTH < "may" >,
   SYNSEM [ LKEYS.KEYREL.PRED _may_v_modal_rel,
            PHON.ONSET con ] ].

may := n_np_c-month_le &
 [ ORTH < "May" >,
   SYNSEM [ LKEYS.KEYREL.CARG "May",
            PHON.ONSET con ],
   TOKENS.+LAST.+CLASS.+CASE capitalized ].

may_n1_noabb_rbst := n_np_c-month_le &
 [ ORTH < "May", "." >,
   SYNSEM [ LKEYS.KEYREL.CARG "May",
            PHON.ONSET con ],
   GENRE robust ].

me_pn_np1 := n_-_pn-nounif_le &
 [ ORTH < "Me" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Me",
            PHON.ONSET con ] ].

;; DPF 2019-12-19 - This one is too enthusiastic, until we train a better 
;; ranking model.  Cf.
;; |I hope the friendship between you and me will live forever.
;;
#|
me_rbst := n_-_pr-i_le &
 [ ORTH < "me" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.HEAD.--MALCASE + ],
   GENRE robust ].
|#

me_stutter_7_mal := n_-_pr-me_le_rbst &
 [ ORTH < "me⸴", "me" >,
   SYNSEM.PHON.ONSET con ].

me_stutter_8_mal := n_-_pr-me_le_rbst &
 [ ORTH < "me.~", "me" >,
   SYNSEM.PHON.ONSET con ].

meaningless_a1_spr_mal := aj_-_i-spobl_le_rbst &
 [ ORTH < "meaningless" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_meaningless_a_1_rel",
            PHON.ONSET con ] ].

measure_n1 := n_-_m-nomod_le &
 [ ORTH < "measure" >,
   ALTS.PLMASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_measure_n_1_rel",
            PHON.ONSET con ] ].

measure_n3 := n_-_c_le &
 [ ORTH < "measure" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_measure_n_1_rel",
            LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

measure_mod_mal := n_-_m-nomod_le_rbst &
 [ ORTH < "measure" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_measure_n_1_rel",
            PHON.ONSET con ] ].

meese_n1_mal := n_-_c-pl_le_rbst &
 [ ORTH < "meese" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_moose_n_1_rel",
            PHON.ONSET con ] ].

melancholy_a1_mal := av_-_i-vp-adj_le_rbst &
 [ ORTH < "melancholy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_melancholy_a_1_rel",
            PHON.ONSET con ] ].

memorable_a1_it_mal := aj_np_i-it_le_rbst &
 [ ORTH < "memorable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_memorable_a_1_rel",
            PHON.ONSET con ] ].

mens_a1_mal := aj_-_i-cmpd_le_rbst &
 [ ORTH < "mens" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mens_a_1_rel",
            PHON.ONSET con ] ].

mice_hunt_v1 := v_-_le &
 [ ORTH < "mice", "hunt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mice+hunt_v_1_rel",
            PHON.ONSET con ] ].

middlefields_n1 := n_-_pn-pl-def_le &
 [ ORTH < "Middlefields" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Middlefield",
            PHON.ONSET con ] ].

might_fin_mal := v_vp_fin_le_rbst &
 [ ORTH < "might" >,
   SYNSEM [ LKEYS.KEYREL.PRED _might_v_modal_rel,
            PHON.ONSET con ] ].

might_aux_neg_1_rbst := v_vp_mdl-n-sv_le &
 [ ORTH < "mightn't" >,
   SYNSEM [ LKEYS.KEYREL.PRED _might_v_modal_rel,
            PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

might_aux_neg_2_rbst := v_vp_mdl-n-sv_le &
 [ ORTH < "mightn", "'t" >,
   SYNSEM [ LKEYS.KEYREL.PRED _might_v_modal_rel,
            PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

millennia_n1_sg_rbst := n_-_c-nday_le &
 [ ORTH < "millennia" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_millennium_n_1_rel",
            LOCAL.AGR.PNG.PN 3s,
            PHON.ONSET con ],
   GENRE robust ].

millions_n2_mal := n_np_c_le_rbst &
 [ ORTH < "millions" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_millions_n_1_rel",
            LOCAL.AGR.PNG.PN 3p,
            PHON.ONSET con ] ].

millions_rbst := aj_-_i-crd-mln_le &
 [ ORTH < "millions" >,
   SYNSEM [ LKEYS.ALTKEYREL.CARG "1000000",
            PHON.ONSET con ],
   GENRE robust ].

mind_v3_mal := v_vp_seq-prp_le_rbst &
 [ ORTH < "mind" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mind_v_1_rel",
            PHON.ONSET con ] ].

mine_my_rbst := d_-_poss-my_le &
 [ ORTH < "mine" >,
   SYNSEM.PHON.ONSET con,
   GENRE robust ].

misbehave_v1 := v_-_le &
 [ ORTH < "misbehave" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_misbehave_v_1_rel",
            PHON.ONSET con ] ].

miss_ttl_n1 := n_-_c-pre-ttl_le &
 [ ORTH < "Miss" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_miss_n_1_rel",
            LOCAL [ CAT.HEAD.MINORS.MIN pre_title_rel,
	            CONT.HOOK.INDEX.PNG.GEN fem ],
            PHON.ONSET con ] ].

missus_abb_sdwch_mal := n_-_c-pre-ttl-sdwch_le_rbst &
 [ ORTH < "Mrs", ".~" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_missus_n_1_rel",
            LOCAL [ CAT.HEAD.MINORS.MIN pre_title_rel,
	            CONT.HOOK.INDEX.PNG.GEN fem ],
            PHON.ONSET con ] ].

mister_abb_sdwch_mal := n_-_c-pre-ttl-sdwch_le_rbst &
 [ ORTH < "Mr", ".~" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mister_n_1_rel",
            LOCAL [ CONT.HOOK.INDEX.PNG.GEN masc ],
            PHON.ONSET con ] ].

missus_abb_n1 := n_-_c-pre-ttl_le &
 [ ORTH < "Mrs" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_missus_n_1_rel",
            LOCAL [ CAT.HEAD.MINORS.MIN pre_title_rel,
	            CONT.HOOK.INDEX.PNG.GEN fem ],
            PHON.ONSET con ] ].

missus_abb_n2 := n_-_c-pre-ttl_le &
 [ ORTH < "Mrs." >,
   SYNSEM [ LKEYS.KEYREL.PRED "_missus_n_1_rel",
            LOCAL [ CAT.HEAD.MINORS.MIN pre_title_rel,
	            CONT.HOOK.INDEX.PNG.GEN fem ],
            PHON.ONSET con ] ].

mister_abb_n1 := n_-_c-pre-ttl_le &
 [ ORTH < "Mr" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mister_n_1_rel",
            LOCAL [ CONT.HOOK.INDEX.PNG.GEN masc ],
            PHON.ONSET con ] ].

mister_abb_n2 := n_-_c-pre-ttl_le &
 [ ORTH < "Mr." >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mister_n_1_rel",
            LOCAL [ CONT.HOOK.INDEX.PNG.GEN masc ],
            PHON.ONSET con ] ].

mister_n1 := n_-_c-pre-ttl_le &
 [ ORTH < "mister" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mister_n_1_rel",
            LOCAL [ CAT.HEAD.MINORS.MIN pre_title_rel,
	            CONT.HOOK.INDEX.PNG.GEN masc ],
            PHON.ONSET con ] ].

ms_n1 := n_-_c-pre-ttl_le &
 [ ORTH < "ms" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ms_n_1_rel",
            LOCAL [ CAT.HEAD.MINORS.MIN pre_title_rel,
	            CONT.HOOK.INDEX.PNG.GEN fem ],
            PHON.ONSET con ] ].

ms_n2 := n_-_c-pre-ttl_le &
 [ ORTH < "ms." >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ms_n_1_rel",
            LOCAL [ CAT.HEAD.MINORS.MIN pre_title_rel,
	            CONT.HOOK.INDEX.PNG.GEN fem ],
            PHON.ONSET con ] ].

mistreat_v1 := v_np_le &
 [ ORTH < "mistreat" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mistreat_v_1_rel",
            PHON.ONSET con ] ].

misunderstand_v1 := v_np_le &
 [ ORTH < "misunderstand" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_misunderstand_v_1_rel",
            PHON.ONSET con ] ].

ms_n2_mal := n_-_c-pre-ttl-sdwch_le_rbst &
 [ ORTH < "ms", ".~" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ms_n_1_rel",
            LOCAL [ CAT.HEAD.MINORS.MIN pre_title_rel,
	            CONT.HOOK.INDEX.PNG.GEN fem ],
            PHON.ONSET con ] ].

Monday_afternoon_n1 := n_-_c-dpt-cap_le &
 [ ORTH < "Monday", "afternoon" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_Monday+afternoon_n_of_rel",
            PHON.ONSET con ] ].

Monday_night_n1 := n_-_c-dpt-cap_le &
 [ ORTH < "Monday", "night" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_Monday+night_n_1_rel",
            PHON.ONSET con ] ].

monkey_n1_sp_rbst := n_-_c_le &
 [ ORTH < "monky" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_monkey_n_1_rel",
            PHON.ONSET con ],
   GENRE robust ].

monkeybar_n1_mal := n_-_c-sg_le_rbst &
 [ ORTH < "monkey", "bar" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_monkey+bar_n_1_rel",
            PHON.ONSET con ] ].

monkeybar_n2_mal := n_-_c-sg_le_rbst &
 [ ORTH < "monkeybar" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_monkey+bar_n_1_rel",
            PHON.ONSET con ] ].

moon_n1 := n_-_c-maycap_le &
 [ ORTH < "moon" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_moon_n_1_rel",
            PHON.ONSET con ] ].

;; |twelve moons old|
;; only for degree specifier
moon_month_rbst := n_-_c-nday_le &
 [ ORTH < "moon" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_month_n_1_rel",
            LOCAL [ AGR [ PNG.PN 3p, DIV + ],
	            CAT.HEAD [ PRD + ] ],
            PHON.ONSET con ],
   GENRE robust ].

mooses_n1_mal := n_-_c-pl_le_rbst &
 [ ORTH < "mooses" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_moose_n_1_rel",
            PHON.ONSET voc ] ].

mop_clean_v1 := v_p-np_le &
 [ ORTH < "mop" >,
   SYNSEM [ LKEYS [ --COMPKEY _clean_p_sel_rel,
                    KEYREL.PRED "_mop_v_clean_rel" ],
            PHON.ONSET con ] ].

mop_clean_v2 := v_p_le &
 [ ORTH < "mop" >,
   SYNSEM [ LKEYS [ --COMPKEY _clean_p_sel_rel,
                    KEYREL.PRED "_mop_v_clean_rel" ],
            PHON.ONSET con ] ].

more_than_p2_mal := p_cp_s_le_rbst &
 [ ORTH < "more", "than" >,
   SYNSEM [ LKEYS.KEYREL.PRED _more+than_p_rel,
            PHON.ONSET con ] ].

more_than_p2b_mal := p_cp_s-tns_le_rbst &
 [ ORTH < "more", "than" >,
   SYNSEM [ LKEYS.KEYREL.PRED _more+than_p_rel,
            PHON.ONSET con ] ].

more_than_p2_past := p_cp_s-past_le &
 [ ORTH < "more", "than" >,
   SYNSEM [ LKEYS.KEYREL.PRED _more+than_p_rel,
            PHON.ONSET con ] ].

;; Block sp-hd for "any more" to enable robost any_more_det_nondiv_mal
more_adj_mal := aj_-_i-one_le_rbst &
 [ ORTH < "more" >,
   SYNSEM [ LOCAL.CAT.VAL.SPR.FIRST anti_synsem_min,
	    PHON.ONSET con ] ].

;; Restrict these bare ones to nominative case, to avoid
;; |We arose early morning|
;;
morning_nospr_n1 := n_-_m-nocnh-nspr_le &
 [ ORTH < "morning" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_morning_n_of_rel",
            LOCAL.CAT.HEAD.CASE nom,
            PHON.ONSET con ] ].

;; |we arose in morning|
;;
morning_nospr_n1_rbst := n_-_m-nocnh-nspr_le &
 [ ORTH < "morning" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_morning_n_of_rel",
            LOCAL.CAT.HEAD.CASE non_nom,
            PHON.ONSET con ],
   GENRE robust ].

mortified_a1 := aj_-_i_le &
 [ ORTH < "mortified" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mortified_a_1_rel",
            PHON.ONSET con ] ].

most_of_all_adv2 := av_-_s-cp-pr_le &
 [ ORTH < "most", "of", "all" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_most+of+all_a_1_rel",
            PHON.ONSET con ] ].

most_adj_mal := aj_-_i-one_le_rbst &
 [ ORTH < "most" >,
   SYNSEM.PHON.ONSET con ].

most_deg_superl_rbst := av_-_dg-v_le &
 [ ORTH < "most" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_most_x_deg_rel",
	    LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CAT.HEAD superl_adj,
            PHON.ONSET con ],
   GENRE robust ].

motivation_of_for_n1_mal := n_pp_c_le_rbst &
 [ ORTH < "motivation" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
		    KEYREL.PRED "_motivation_n_for_rel" ],
            PHON.ONSET con ] ].

mothers_day := n_-_m-hldy_le &
 [ ORTH < "Mother", "'s", "Day" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Mothers_Day",
            PHON.ONSET con ] ].

mothers_day_n2 := n_-_m-ssn-spr_le &
 [ ORTH < "Mother", "'s", "Day" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Mothers_Day",
            PHON.ONSET con ] ].

mothers_day_card_n1 := n_-_c_le &
 [ ORTH < "Mother", "'s", "Day", "card" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_Mothers+Day+card_n_1_rel",
            PHON.ONSET con ] ].

mothers_day_meal_n1 := n_-_c_le &
 [ ORTH < "Mother", "'s", "Day", "meal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_Mothers+Day+meal_n_1_rel",
            PHON.ONSET con ] ].

mouse_hunt_v1 := v_-_le &
 [ ORTH < "mouse", "hunt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mouse+hunt_v_1_rel",
            PHON.ONSET con ] ].

much_a1_rbst := aj_-_i-many_le &
 [ ORTH < "much" >,
   SYNSEM [ LKEYS.KEYREL.PRED much-many_a_rel,
	    LOCAL.CAT.HEAD.MOD.FIRST expressed_synsem,
            PHON.ONSET con ],
   GENRE robust ].

much_as_p_1_past := p_cp_s-past_le &
 [ ORTH < "much", "as" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_much+as_x_1_rel",
            PHON.ONSET con ] ].

much_as_p_1_mal := p_cp_s_le_rbst &
 [ ORTH < "much", "as" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_much+as_x_1_rel",
            PHON.ONSET con ] ].

much_as_p_2_mal := p_cp_s-tns_le_rbst &
 [ ORTH < "much", "as" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_much+as_x_1_rel",
            PHON.ONSET con ] ].

much_adv := av_-_i-vp-po_le &
 [ ORTH < "much" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_much_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

much_deg_mal := av_-_dg-v_le_rbst &
 [ ORTH < "much" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_much_x_deg_rel",
            LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CAT.HEAD.--NOUNADJ -,
            PHON.ONSET con ] ].
  
;; Block robust |nothing much happens|
much_adv_mal := av_-_i-vp-pr_le_rbst &
 [ ORTH < "much" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_much_a_1_rel",
            LOCAL.CAT.HEAD.MOD.FIRST.LEX na_or_-,
            PHON.ONSET con ] ].

;; |much process|
much_det_nondiv_mal := d_-_prt-plm_le_rbst &
 [ ORTH < "much" >,
   SYNSEM [ LKEYS.KEYREL.PRED _some_q_rel,
            PHON.ONSET con ] ].

much_prefer_to_v1 := v_np-pp_e_le &
 [ ORTH < "much", "prefer" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_much+prefer_v_to_rel" ],
            PHON.ONSET con ] ].

much_prefer_v1 := v_np_le &
 [ ORTH < "much", "prefer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_much+prefer_v_to_rel",
            PHON.ONSET con ] ].

much_prefer_v2 := v_it-cp_le &
 [ ORTH < "much", "prefer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_much+prefer_v_to_rel",
            PHON.ONSET con ] ].

much_prefer_v3 := v_vp_seq_le &
 [ ORTH < "much", "prefer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_much+prefer_v_to_rel",
            PHON.ONSET con ] ].

much_prefer_v4 := v_pp_arg_le &
 [ ORTH < "much", "prefer" >,
   SYNSEM [ LKEYS [ --COMPKEY loc_abstr_rel,
                    KEYREL.PRED "_much+prefer_v_loc_rel" ],
            PHON.ONSET con ] ].

much_prefer_v5 := v_cp_sbjnct_le &
 [ ORTH < "much", "prefer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_much+prefer_v_1_rel",
            PHON.ONSET con ] ].

much_prefer_v6 := v_np-vp_sor_le &
 [ ORTH < "much", "prefer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_much+prefer_v_to_rel",
            PHON.ONSET con ] ].

much_prefer_v7 := v_cp_prop_le &
 [ ORTH < "much", "prefer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_much+prefer_v_1_rel",
            PHON.ONSET con ] ].

much_prefer_v8 := v_cp_inf-only_le &
 [ ORTH < "much", "prefer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_much+prefer_v_1_rel",
            PHON.ONSET con ] ].

must_aux_neg_rbst := v_vp_must-n_le &
 [ ORTH < "musn’t" >,
   SYNSEM [ LKEYS.KEYREL.PRED _must_v_modal_rel,
            PHON.ONSET con ],
   GENRE robust ].

must_aux_neg_1_rbst := v_vp_must-n_le &
 [ ORTH < "mustn't" >,
   SYNSEM [ LKEYS.KEYREL.PRED _must_v_modal_rel,
            PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

must_aux_neg_2_rbst := v_vp_must-n_le &
 [ ORTH < "mustn", "'t" >,
   SYNSEM [ LKEYS.KEYREL.PRED _must_v_modal_rel,
            PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

;; Avoid robust |me skating|
my_me_rbst := d_-_poss-my_le &
 [ ORTH < "me" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT [ HEAD.--POSSRBST +,
			VAL.SPEC.FIRST.LOCAL.CAT.HEAD noun ] ],
   GENRE robust ].

;; |My arose|
my_mine_rbst := n_-_pr-mine_le &
 [ ORTH < "my" >,
   SYNSEM [ PHON.ONSET con,
   	    LOCAL.CAT.HEAD.--POSSRBST + ],
   GENRE robust ].

my_myself_rbst := d_-_poss-my_le &
 [ ORTH < "myself" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT [ HEAD.--POSSRBST +,
			VAL.SPEC.FIRST.LOCAL.CAT.HEAD noun ] ],
   GENRE robust ].

my_myselfs_rbst := d_-_poss-my_le &
 [ ORTH < "myself", "’s" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT [ HEAD.--POSSRBST +,
			VAL.SPEC.FIRST.LOCAL.CAT.HEAD noun ] ],
   GENRE robust ].

my_thanks_v1 := v_-_imp_le &
 [ ORTH < "my", "thanks" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_many+thanks_v_1_rel",
            PHON.ONSET con ] ].

myopic_myopia_n1_mal := n_-_c-aj_le_rbst &
 [ ORTH < "myopic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_myopia_n_1_rel",
            PHON.ONSET con ] ].

myself_pn_np1 := n_-_pn-nounif_le &
 [ ORTH < "Myself" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Myself",
            PHON.ONSET con ] ].

name_v4_mal := v_np-np_nbar_le_rbst &
 [ ORTH < "name" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_name_v_1_rel",
            PHON.ONSET con ] ].

nature_n1 := n_-_c-ed_le &
 [ ORTH < "nature" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nature_n_1_rel",
   	    LOCAL.CAT.HEAD [ --BARE -,
	                     MINORS.ALTMIN def_poss_q_rel ],
            PHON.ONSET con ] ].

nature_n2 := n_-_m-nocnh-nspr_le &
 [ ORTH < "nature" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nature_n_1_rel",
            PHON.ONSET con ] ].

nature_n1_rbst := n_-_c-ed-ns_le &
 [ ORTH < "nature" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nature_n_1_rel",
   	    LOCAL.CAT [ HEAD [ --BARE -,
			       --COORD -,
			       MINORS [ ALTMIN explicit_q_rel,
					NORM norm_rel ] ],
			VAL.SPR.FIRST expressed_synsem ],
            PHON.ONSET con ],
   GENRE robust ].

nearly_adv1_mal := av_-_i-pr-aux_le_rbst &
 [ ORTH < "nearly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_near_a_to_rel",
            PHON.ONSET con ] ].

;; Block |nearly nothing|, |nearly no books|
;;
nearly_deg := av_-_dg-jo_le &
 [ ORTH < "nearly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nearly_x_deg_rel",
            LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CAT.HEAD.MINORS.ALTMIN 
	    					            exist_or_univ_q_rel,
            PHON.ONSET con ] ].

nearly_deg2 := av_-_dg_le &
 [ ORTH < "nearly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nearly_x_deg_rel",
            LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CAT.HEAD.MINORS.ALTMIN 
	    					            exist_or_univ_q_rel,
            PHON.ONSET con ] ].

nearly_deg2_rbst := av_-_dg_le &
 [ ORTH < "nearly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nearly_x_deg_rel",
            LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CAT.HEAD partn &
			      [ MINORS.ALTMIN no_q_rel ],
            PHON.ONSET con ],
   GENRE robust ].

;; |we need arise|
need_bse_v1_rbst := v_vp_must-p_le &
 [ ORTH < "need" >,
   SYNSEM [ LKEYS.KEYREL.PRED _need_v_qmodal_rel,
            LOCAL.CAT.HEAD.INV -,
            PHON.ONSET con ],
   ALTS.VPELLIP -,
   GENRE robust ].

need_v1_mal := v_-_le_rbst &
 [ ORTH < "need" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_need_v_1_rel",
            PHON.ONSET con ] ].

need_aux_neg_1_rbst := v_vp_mdl-n_le &
 [ ORTH < "needn't" >,
   SYNSEM [ LKEYS.KEYREL.PRED _need_v_qmodal_rel,
            PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

need_aux_neg_2_rbst := v_vp_mdl-n_le &
 [ ORTH < "needn", "'t" >,
   SYNSEM [ LKEYS.KEYREL.PRED _need_v_qmodal_rel,
            PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

need_not_v2_rbst := v_vp_ssr-n3sg_le &
 [ ORTH < "needn't" >,
   SYNSEM [ LKEYS [ ALTKEYREL.PRED neg_rel,
                    KEYREL.PRED "_need_v_1_rel" ],
            PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

need_not_v2_2_rbst := v_vp_ssr-n3sg_le &
 [ ORTH < "needn", "'t" >,
   SYNSEM [ LKEYS [ ALTKEYREL.PRED neg_rel,
                    KEYREL.PRED "_need_v_1_rel" ],
            PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

need_of_for_n1_mal := n_pp_c_le_rbst &
 [ ORTH < "need" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
		    KEYREL.PRED "_need_n_for_rel" ],
            PHON.ONSET con ] ].

need_on_of_n1_mal := n_pp_c_le_rbst &
 [ ORTH < "need" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
		    KEYREL.PRED "_need_n_of_rel" ],
            PHON.ONSET con ] ].

need_towards_for_n1_mal := n_pp_c_le_rbst &
 [ ORTH < "need" >,
   SYNSEM [ LKEYS [ --COMPKEY _towards_p_sel_rel,
		    KEYREL.PRED "_need_n_for_rel" ],
            PHON.ONSET con ] ].

neither_det_rbst := d_-_pl_le &
 [ ORTH < "neither" >,
   SYNSEM [ LKEYS.KEYREL.PRED _neither_q-agr_rel,
            PHON.ONSET con ],
   GENRE robust ].

new_year_eve_sp_rbst := n_-_c-nm_le &
 [ ORTH < "New", "Year", "Eve" >,
   SYNSEM [ LKEYS.KEYREL.CARG "New_Years_Eve",
            PHON.ONSET con ],
   GENRE robust ].

newhampshire_n8 := n_-_pn-abb_le &
 [ ORTH < "N", ".~", "H." >,
   SYNSEM [ LKEYS.KEYREL.CARG "New+Hampshire",
            PHON.ONSET con ] ].

newhampshire_n9 := n_-_pn-abb_le &
 [ ORTH < "N", ".~", "H" >,
   SYNSEM [ LKEYS.KEYREL.CARG "New+Hampshire",
            PHON.ONSET con ] ].

newjersey_n8 := n_-_pn-abb_le &
 [ ORTH < "N", ".~", "J." >,
   SYNSEM [ LKEYS.KEYREL.CARG "New+Jersey",
            PHON.ONSET con ] ].

newjersey_n9 := n_-_pn-abb_le &
 [ ORTH < "N", ".~", "J" >,
   SYNSEM [ LKEYS.KEYREL.CARG "New+Jersey",
            PHON.ONSET con ] ].

newmexico_n8 := n_-_pn-abb_le &
 [ ORTH < "N", ".~", "M." >,
   SYNSEM [ LKEYS.KEYREL.CARG "New+Mexico",
            PHON.ONSET con ] ].

newmexico_n9 := n_-_pn-abb_le &
 [ ORTH < "N", ".~", "M" >,
   SYNSEM [ LKEYS.KEYREL.CARG "New+Mexico",
            PHON.ONSET con ] ].

newyork_n8 := n_-_pn-abb_le &
 [ ORTH < "N", ".~", "Y." >,
   SYNSEM [ LKEYS.KEYREL.CARG "New+York",
            PHON.ONSET con ] ].

newyork_n9 := n_-_pn-abb_le &
 [ ORTH < "N", ".~", "Y" >,
   SYNSEM [ LKEYS.KEYREL.CARG "New+York",
            PHON.ONSET con ] ].

new_york_pn := n_-_pn_le &
 [ ORTH < "New", "York" >,
   SYNSEM [ LKEYS.KEYREL.CARG "New+York",
            PHON.ONSET con ] ].

news_n3_mal := n_cp_m-nocmp_le_rbst &
 [ ORTH < "news" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_news_n_of_rel",
            PHON.ONSET con ] ].

never_adv1 := av_-_i-vp-pr_le &
 [ ORTH < "never" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_never_a_1_rel",
            PHON.ONSET con ] ].

never_adv1-aux := av_-_i-vp-pr-aux-nfin_le &
 [ ORTH < "never" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_never_a_1_rel",
            PHON.ONSET con ] ].

never_adv1_mal := av_-_i-pr-aux_le_rbst &
 [ ORTH < "never" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_never_a_1_rel",
            PHON.ONSET voc ] ].

;; DPF 2017-09-07 - See comments for last_det redefinition
;;
next_det := d_-_next_le &
 [ ORTH < "next" >,
   SYNSEM [ LOCAL.CONT.HOOK.XARG basic_non_expl-ind & [ E.TENSE no_tense ],
   	    LKEYS.ALTKEYREL.PRED "_next_a_1_rel",
            PHON.ONSET con ] ].

next_det_rbst := d_-_next_le &
 [ ORTH < "next" >,
   SYNSEM [ LOCAL [ CONT.HOOK.XARG.E [ TENSE past,
				       SAME-PAST - ],
		    CAT.VAL.SPEC.FIRST [ LOCAL.CAT.HEAD.CASE nounif_case,
					 --SIND.SORT time ] ],
   	    LKEYS.ALTKEYREL.PRED "_next_a_1_rel",
            PHON.ONSET con ],
   GENRE robust ].

next_det_emod := d_-_next_le &
 [ ORTH < "next" >,
   SYNSEM [ LOCAL [ CONT.HOOK.XARG.E.TENSE nonpast,
		    CAT.VAL.SPEC.FIRST.LOCAL.CAT.HEAD.CASE obliq ],
   	    LKEYS.ALTKEYREL.PRED "_next_a_1_rel",
            PHON.ONSET con ] ].

next_nounif_n1 := n_-_pn-nounif_le &
 [ ORTH < "Next" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Next",
            PHON.ONSET con ] ].

nguyens_n1 := n_-_pn-pl-def_le &
 [ ORTH < "Nguyens" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Nguyen",
            PHON.ONSET con ] ].

nice_a4_mal := aj_pp-vp_i-for-it_le_rbst &
 [ ORTH < "nice" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nice_a_of-for_rel",
            PHON.ONSET con ] ].

;; Restrict these bare ones to nominative case, to avoid
;; |We arose early morning|
;;
#|
night_nospr_n1 := n_-_m-nocnh-nspr_le &
 [ ORTH < "night" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_night_n_of_rel",
            LOCAL.CAT.HEAD.CASE nom,
            PHON.ONSET con ] ].
|#

;; For e.g. "Drama Night"
night_pn_n1 := n_-_c-nm_le &
 [ ORTH < "Night" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Night",
            PHON.ONSET con ] ].

no_doubtly_adv1_rbst := av_-_s-vp_le &
 [ ORTH < "no", "doubtly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_no+doubt_a_1_rel",
            PHON.ONSET con ],
   GENRE robust ].

no_fun_a1 := aj_-_i-prd_le &
 [ ORTH < "no", "fun" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_no+fun_a_1_rel",
            PHON.ONSET con ] ].

no_matter_whatever_det_rbst := d_-_freerel_le &
 [ ORTH < "no", "matter", "what" >,
   SYNSEM [ LKEYS.KEYREL.PRED free_relative_ever_q_rel,
            PHON.ONSET con ],
   GENRE robust ].

no_matter_whichever_det_rbst := d_-_freerel_le &
 [ ORTH < "no", "matter", "which" >,
   SYNSEM [ LKEYS.KEYREL.PRED free_relative_ever_q_rel,
            PHON.ONSET con ],
   GENRE robust ].

no_more_det_nondiv_mal := d_-_prt-plm_le_rbst &
 [ ORTH < "no", "more" >,
   SYNSEM [ LKEYS.KEYREL.PRED _no+more_q_rel,
            PHON.ONSET con ] ].

;; Restrict to 3p to avoid robust |there are none left|
no_none_det_rbst := d_-_no_le &
 [ ORTH < "none" >,
   SYNSEM [ LKEYS.KEYREL.PRED _no_q_rel,
	    LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.AGR.PNG.PN 3p,
            PHON.ONSET con ],
   GENRE robust ].

no_one_sp_rbst := n_-_pr_le &
 [ ORTH < "no", "-", "one" >,
   SYNSEM [ LKEYS [ ALTKEYREL.PRED _no_q_rel,
                    KEYREL.PRED person_rel ],
            PHON.ONSET con ],
   GENRE robust ].

; |it is no use complaining|
no_use_a1 := aj_pp-vp_i-it-unsp_le &
 [ ORTH < "no", "use" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_no_use_a_for_rel",
            LOCAL.CAT.VAL.COMPS < [], [ LOCAL.CAT.HEAD.VFORM prp ] >,
            PHON.ONSET con ] ].

; |it is no use to complain|
no_use_a1_rbst := aj_pp-vp_i-it-unsp_le &
 [ ORTH < "no", "use" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_no_use_a_for_rel",
            LOCAL.CAT.VAL.COMPS < [], [ LOCAL.CAT.HEAD.VFORM inf ] >,
            PHON.ONSET con ],
   ALTS.AVIP -,
   GENRE robust ].

north_n1 := n_-_c-maycap_le &
 [ ORTH < "north" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_north_n_of_rel",
            PHON.ONSET con ] ].

north_pn_n2 := n_-_pn_le &
 [ ORTH < "North" >,
   SYNSEM [ LKEYS.KEYREL.CARG "North",
            PHON.ONSET con ] ].

northcarolina_n8 := n_-_pn-abb_le &
 [ ORTH < "N", ".~", "C." >,
   SYNSEM [ LKEYS.KEYREL.CARG "North+Carolina",
            PHON.ONSET con ] ].

northcarolina_n9 := n_-_pn-abb_le &
 [ ORTH < "N", ".~", "C" >,
   SYNSEM [ LKEYS.KEYREL.CARG "North+Carolina",
            PHON.ONSET con ] ].

northdakota_n8 := n_-_pn-abb_le &
 [ ORTH < "N", ".~", "D." >,
   SYNSEM [ LKEYS.KEYREL.CARG "North+Dakota",
            PHON.ONSET con ] ].

northdakota_n9 := n_-_pn-abb_le &
 [ ORTH < "N", ".~", "D" >,
   SYNSEM [ LKEYS.KEYREL.CARG "North+Dakota",
            PHON.ONSET con ] ].

not_least_adv1_mal := av_-_i-pr-aux_le_rbst &
 [ ORTH < "not", "least" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_not+least_a_1_rel",
            PHON.ONSET con ] ].

not := av_-_s-not_le &
 [ ORTH < "not" >,
   SYNSEM [ LKEYS.KEYREL.PRED neg_rel,
            LOCAL.CAT.HEAD.MOD.FIRST.LOCAL.CAT.HEAD.--VNEG +,
            PHON.ONSET con ] ].

;; |We not noticed the cat|
;; 2020-09-17 - Block robust |not [only see beautiful art but also understand...|
not_mv_adv1_rbst := av_-_s-vp-x_le &
 [ ORTH < "not" >,
   SYNSEM [ LKEYS.KEYREL.PRED "neg_rel",
            LOCAL.CAT.HEAD.MOD.FIRST [ LOCAL.CAT.HEAD verb & [ VFORM fin ],
				       --SIND non_conj_event,
				       MODIFD notmod_or_rmod ],
            PHON.ONSET con ],
   GENRE robust ].

not_only_adv1 := av_-_i-vp-pr_le &
 [ ORTH < "not", "only" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_not+only_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

not_only_adv1_mal := av_-_i-pr-aux_le_rbst &
 [ ORTH < "not", "only" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_not+only_a_1_rel",
            LOCAL.CAT.HEAD.MOD.FIRST.LOCAL.CAT.HEAD.INV -,
            PHON.ONSET con ] ].

not_that_sc_past := p_cp_s-past_le &
 [ ORTH < "not", "that" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_not+that_x_rel",
            PHON.ONSET con ] ].

not_that_sc_mal := p_cp_s_le_rbst &
 [ ORTH < "not", "that" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_not+that_x_rel",
            PHON.ONSET con ] ].

not_that_sc_2_mal := p_cp_s-tns_le_rbst &
 [ ORTH < "not", "that" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_not+that_x_rel",
            PHON.ONSET con ] ].

notably_adv1_mal := av_-_i-pr-aux_le_rbst &
 [ ORTH < "notably" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_notable_a_1_rel",
            PHON.ONSET con ] ].

note_out_cp_v1_mal := v_p-cp_le_rbst &
 [ ORTH < "note" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_note_v_1_rel" ],
            PHON.ONSET con ] ].

nothing_mod_mal := n_-_m-mod_le_rbst &
 [ ORTH < "nothing" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_type_n_1_rel",
            PHON.ONSET con ] ].

notice_v4_fin_mal := v_np-vp_fin_le_rbst &
 [ ORTH < "notice" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_notice_v_1_rel",
            PHON.ONSET con ] ].

notice_v4_fin_3sg_mal := v_np-vp_fin-3sg_le_rbst &
 [ ORTH < "notice" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_notice_v_1_rel",
            PHON.ONSET con ] ].

now_adv2_mal := av_-_i-pr-aux_le_rbst &
 [ ORTH < "now" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_now_a_2_rel",
            PHON.ONSET con ] ].

;; No "that"
now_that_rbst := p_cp_s_le &
 [ ORTH < "now" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_now+that_x_rel",
            PHON.ONSET con ],
   GENRE robust ].

now_that_past := p_cp_s-past_le &
 [ ORTH < "now", "that" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_now+that_x_rel",
            PHON.ONSET con ] ].

now_that_mal := p_cp_s_le_rbst &
 [ ORTH < "now", "that" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_now+that_x_rel",
            PHON.ONSET con ] ].

now_that_2_mal := p_cp_s-tns_le_rbst &
 [ ORTH < "now", "that" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_now+that_x_rel",
            PHON.ONSET con ] ].

; |asked for number|
number_n1_mal := n_-_c-nocnh_le &
 [ ORTH < "number" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_number_n_of_rel",
            LOCAL [ CAT.VAL.SPR.FIRST unexpressed,
	            AGR.PNG.PN 3s ],
            PHON.ONSET con ] ].

nuptials_n1_mal := n_-_c-sg_le_rbst &
 [ ORTH < "nuptial" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nuptials_n_1_rel",
            PHON.ONSET con ] ].

; Hack, since in general don't want to allow appositives with mass_n rgt dtr.
nutrient_beta_carotene_n1 := n_-_m_le &
 [ ORTH < "nutrient", "beta", "-", "carotene" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nutrient+beta-carotene_n_1_rel",
            PHON.ONSET con ] ].

nv_cmpd_n8 := n_-_c-cpd_le &
 [ ORTH < "n", ".~", "v." >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nv_n_1_rel",
            PHON.ONSET con ] ].

nv_cmpd_n9 := n_-_c-cpd_le &
 [ ORTH < "n", ".~", "v" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nv_n_1_rel",
            PHON.ONSET con ] ].

nv_post_ttl_8 := n_-_tt-post-npt_le &
 [ ORTH < "N", ".~", "V." >,
   SYNSEM [ LKEYS.KEYREL.PRED "_NV_n_1_rel",
            PHON.ONSET voc ] ].

nv_post_ttl_9 := n_-_tt-post-npt_le &
 [ ORTH < "N", ".~", "V" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_NV_n_1_rel",
            PHON.ONSET voc ] ].

oats_n1_mal := n_-_c-sg_le_rbst &
 [ ORTH < "oat" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_oats_n_1_rel",
            PHON.ONSET voc ] ].

object_to_v1_mal := v_np_pp_le_rbst &
 [ ORTH < "object" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_object_v_to_rel",
            PHON.ONSET voc ] ].

observe_v3_fin_mal := v_np-vp_fin_le_rbst &
 [ ORTH < "observe" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_observe_v_to_rel",
            PHON.ONSET voc ] ].

observe_v3_fin_3sg_mal := v_np-vp_fin-3sg_le_rbst &
 [ ORTH < "observe" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_observe_v_to_rel",
            PHON.ONSET voc ] ].

oclock_1_rbst := aj_-_i-mnt-po_le &
 [ ORTH < "o", "'", "clock" >,
   SYNSEM [ LKEYS.KEYREL.CARG "00",
            PHON.ONSET voc ],
   GENRE robust ].

oclock_2_rbst := aj_-_i-mnt-po_le &
 [ ORTH < "o", "’", "clock" >,
   SYNSEM [ LKEYS.KEYREL.CARG "00",
            PHON.ONSET voc ],
   GENRE robust ].

odds_n1_mal := n_-_c-sg_le_rbst &
 [ ORTH < "odd" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_odds_n_1_rel",
            PHON.ONSET voc ] ].

;; Exclude robust |best kind of cat| via --BARESG -
;; 2020-04-10 - Removed COMPS..--MIN nonpro_or_refl_or_num_rel, since it
;; blocked |of all of us|, and instead add PT notpro_or_refl, to still block
;; for |a friend of us|.
;;
of_poss := p_np_i-nm-poss_le &
 [ ORTH < "of" >,
   SYNSEM [ LKEYS.KEYREL.PRED _of_p_rel,
	    LOCAL.CAT [ HEAD.MOD.FIRST.LOCAL.CAT.HEAD non_partn,
	                VAL.COMPS.FIRST.--SIND [ --BARESG -,
			   		         PT notpro_or_refl ] ],
	    PHON.ONSET voc ] ].

of_poss_colon := p_np_i-nm-poss_le &
 [ ORTH < "of", ":" >,
   SYNSEM [ LKEYS.KEYREL.PRED _of_p_rel,
   	    LOCAL.CAT.HEAD.MOD.FIRST.LOCAL.CAT.HEAD non_partn,
            PHON.ONSET voc ] ].

;; For |to that of the cats|
of_poss_deix := p_np_i-nm-poss_le &
 [ ORTH < "of" >,
   SYNSEM [ LKEYS.KEYREL.PRED _of_p_rel,
            LOCAL.CAT.HEAD.MOD.FIRST.LOCAL.CAT.HEAD partn &
	                                [ MINORS.ALTMIN demonstrative_q_rel ],
            PHON.ONSET voc ] ].

;; DPF 2018-03-22 - Added this one for |two gallons of it|
of_meas := p_np_i-nm-poss_le &
 [ ORTH < "of" >,
   SYNSEM [ LKEYS.KEYREL.PRED _of_p_rel,
	    LOCAL.CAT.VAL.COMPS.FIRST [ --MIN pron_rel,
					--SIND.PNG [ PN 3, GEN neut ] ],
            PHON.ONSET voc ] ].

of_poss_stutter_rbst := p_np_i-nm-poss_le &
 [ ORTH < "of", "of" >,
   SYNSEM [ LKEYS.KEYREL.PRED _of_p_rel,
            PHON.ONSET voc ],
   GENRE robust ].

;; DPF 2020-08-01 - Restrict to 1st and 2nd person pronouns, for
;; "friends of me/mine", but avoid false robust for "two cups of it".
;; 2021-01-13 - Added OPT + to exclude in "was thought of as ..."
;;
of_poss_rbst := p_np_i-nm-poss_le_mal &
 [ ORTH < "of" >,
   SYNSEM [ LKEYS.KEYREL.PRED _of_p_rel,
	    LOCAL [ CAT [ HEAD.MOD.FIRST [ LOCAL.CAT.HEAD non_partn,
					   MODIFD notmod ],
			  VAL.COMPS.FIRST.LOCAL [ CAT.HEAD .MINORS 
			                             [ MIN pron_rel,
						       ALTMIN def_q_rel,
						       NORM norm_rel ],
						  AGR.PNG.PN -3 ] ],

		    CONT.HOOK.INDEX.E.TENSE nontense ],
	    OPT +,
            PHON.ONSET voc ],
   GENRE robust ].

of_vp_pas_mal := p_vp_pas_le_rbst &
 [ ORTH < "of" >,
   SYNSEM [ LKEYS.KEYREL.PRED _of_p_mal-vppas_rel,
            PHON.ONSET voc ] ].

oftener_adv_mal := av_-_i-vp-cmp_le_rbst &
 [ ORTH < "oftener" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_oftener_a_1_rel",
            PHON.ONSET voc ] ].

oily_a1_mal := av_-_i-vp-adj_le_rbst &
 [ ORTH < "oily" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_oily_a_1_rel",
            PHON.ONSET voc ] ].

old_adj_n1_mal := n_-_c-aj_le_rbst &
 [ ORTH < "old" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_old_a_1_rel",
            PHON.ONSET voc ] ].

olds_n1_rbst := n_-_c-pl-def_le &
 [ ORTH < "olds" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_old_n_1_rel",
            PHON.ONSET voc ],
   GENRE robust ].

olinguito_n1 := n_-_c_le &
 [ ORTH < "olinguito" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_olinguito_n_1_rel",
            PHON.ONSET voc ] ].

olympic_games := n_-_c-nm-pl_le &
 [ ORTH < "Olympic", "Game" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Olympic+Games",
            LOCAL.CAT.VAL.SPR.FIRST expressed_synsem &
	                            [ --MIN basic_def_explicit_q_rel ],
            PHON.ONSET voc ] ].

olympics := n_-_c-nm-pl_le &
 [ ORTH < "Olympic" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Olympics",
            LOCAL.CAT [ HEAD.MINORS.NORM norm_rel,
			VAL.SPR.FIRST expressed_synsem &
	                            [ --MIN basic_def_explicit_q_rel ] ],
            PHON.ONSET voc ] ].

olympics_mal := n_-_c-nm-pl_le_rbst &
 [ ORTH < "Olympic" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Olympics",
            PHON.ONSET voc ] ].

olympic_games_mal := n_-_c-nm-pl_le_rbst &
 [ ORTH < "Olympic", "Game" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Olympic+Games",
            PHON.ONSET voc ] ].

;; |We began on 2pm|
;; 2021-01-13 - Added OPT + to exclude in "was looked on as ..."
;;
on_at_temp_rbst := p_np_i-tmp-mal_le &
 [ ORTH < "on" >,
   SYNSEM [ LKEYS [ --COMPKEY numbered_hour_rel,
                    KEYREL.PRED _at_p_temp_rel ],
	    LOCAL.CAT.VAL.COMPS.FIRST canonical_synsem &
	                              [ LEX + ],
	    OPT +,
            PHON.ONSET voc ] ].

;; |We began on 2018|
on_at_temp_2_rbst := p_np_i-tmp-mal_le &
 [ ORTH < "on" >,
   SYNSEM [ LKEYS [ --COMPKEY yofc_rel,
                    KEYREL.PRED _at_p_temp_rel ],
	    LOCAL.CAT.VAL.COMPS.FIRST canonical_synsem,
	    OPT +,
            PHON.ONSET voc ] ].

;; |We began on October|
;; 2019-06-24- LPERIPH: Exclude appos |on Tuesday the fifth|
on_at_temp_3_rbst := p_np_i-tmp-mal_le &
 [ ORTH < "on" >,
   SYNSEM [ LKEYS [ --COMPKEY mofy_rel,
                    KEYREL.PRED _at_p_temp_rel ],
            LOCAL.CAT.VAL.COMPS.FIRST canonical_synsem &
	                              [ MODIFD.LPERIPH bool ],
	    OPT +,
            PHON.ONSET voc ] ].

;; |from branch on branch|
on_nbar_p_from := p_nb_i-nmd-to_le &
 [ ORTH < "on" >,
   SYNSEM [ LKEYS.KEYREL.PRED _on_p_nbar_rel,
            PHON.ONSET voc ] ].

on_stage_adv1 := av_-_i-vp-po_le &
 [ ORTH < "on", "stage" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_on+stage_a_1_rel",
            PHON.ONSET voc ] ].

on_the_following_rbst := pp_-_i_le &
 [ ORTH < "on", "the", "following" >,
   SYNSEM [ LKEYS.KEYREL.PRED _as+follows_p_rel,
            PHON.ONSET voc ],
   GENRE robust ].

on_the_follows_rbst := pp_-_i_le &
 [ ORTH < "on", "the", "follows" >,
   SYNSEM [ LKEYS.KEYREL.PRED _as+follows_p_rel,
            PHON.ONSET voc ],
   GENRE robust ].

;; Prevent extraction, so we don't get run-on for
;; |once we arose, we arrived|
;;
once_adv2 := av_-_i-vp-po-nmb_le &
 [ ORTH < "once" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_once_a_1_rel",
	    LOCAL.CAT [ HEAD.--ADVADJ -,
	                VAL.SPR.FIRST unexpressed_min ],
            PHON.ONSET con ] ].

once_adv3 := av_-_i-ap-pp_le &
 [ ORTH < "once" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_once_a_1_rel",
            LOCAL.CAT.HEAD [ MOD.FIRST.LOCAL.CAT.HEAD basic_adj,
			     --ADVADJ - ],
	    PHON.ONSET con ] ].

once_adv4 := av_-_s-cp-pr_le &
 [ ORTH < "once", "," >,
   SYNSEM [ LKEYS.KEYREL.PRED "_once_a_1_rel",
            PHON.ONSET con ] ].

once_conj_past := p_cp_s-notop-past_le &
 [ ORTH < "once" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_once_x_subord_rel",
            PHON.ONSET con ] ].

once_conj_mal := p_cp_s-notop_le_rbst &
 [ ORTH < "once" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_once_x_subord_rel",
            PHON.ONSET con ] ].

; |once in thirty year drought|
once_in_adv1 := av_-_i-vp-pr_le &
 [ ORTH < "once", "in" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_almost_a_1_rel",
            LOCAL.CAT.HEAD [ MOD.FIRST.LOCAL.CAT.HEAD intadj,
			     --ADVADJ - ],
            PHON.ONSET con ] ].

once_in_adv2 := av_-_i-vp-pr_le &
 [ ORTH < "once", "-", "in" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_almost_a_1_rel",
            LOCAL.CAT.HEAD [ MOD.FIRST.LOCAL.CAT.HEAD intadj,
			     --ADVADJ - ],
            PHON.ONSET con ] ].

;; Avoid for |once in a while|
once_in_p_rbst := p_np_i_le &
 [ ORTH < "once", "in" >,
   SYNSEM [ LKEYS [ --COMPKEY temp_abstr_rel,
                    KEYREL.PRED _once_p_rel ],
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD noun,
            PHON.ONSET con ],
   GENRE robust ].

one_adj_fract_mal := aj_np_i-frct-one_le_rbst &
 [ ORTH < "one" >,
   SYNSEM.PHON.ONSET con ].

one_child_a1 := aj_-_i-att_le &
 [ ORTH < "one", "-", "child" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_one-child_a_1_rel",
            PHON.ONSET con ] ].

one_child_a2 := aj_-_i-att_le &
 [ ORTH < "one", "child" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_one-child_a_1_rel",
            PHON.ONSET con ] ].

one_of_sp_mal := p_np_i_le &
 [ ORTH < "oneof" >,
   SYNSEM [ LKEYS.KEYREL.PRED _among_p_rel,
            PHON.ONSET con ] ].

one_way_a1 := aj_-_i_le &
 [ ORTH < "one", "-", "way" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_one-way_a_1_rel",
            PHON.ONSET con ] ].

;; |try ones best to succeed|
ones_best_adv1 := av_-_i-vp-po_le &
 [ ORTH < "one", "’s", "best" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ones+best_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

;; DPF 2020-06-23 - MOD..AUX - blocked "This can only be resolved if ...".
;; so let's see what that constraint was aimed at...
;;
only_adv1 := av_-_s-vp-only-x_le &
 [ ORTH < "only" >,
   SYNSEM [ LOCAL.CAT.HEAD.--ADVADJ -,
            LKEYS.KEYREL.PRED "_only_a_1_rel",
            PHON.ONSET voc ] ].

#|
only_adv1_nonfin := av_-_s-vp-only-x_le &
 [ ORTH < "only" >,
   SYNSEM [ LOCAL.CAT.HEAD [ MOD < [ LOCAL.CAT.HEAD.VFORM non_fin ] >,
			     --ADVADJ - ],
            LKEYS.KEYREL.PRED "_only_a_1_rel",
            PHON.ONSET voc ] ].
|#

only_adv4 := av_-_i-pp-po_le &
 [ ORTH < "only" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_only_x_deg_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET voc ] ].

;; DPF 2018-09-13 - Restrict this to aux-VP, to flag |we only can eat fish|
;; but allow |we only arrived yesterday| and |I only eat fish|.

only_adv1_mal := av_-_i-vp-pr_le_rbst &
 [ ORTH < "only" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_only_a_to_rel",
            LOCAL.CAT.HEAD.MOD.FIRST.LOCAL.CAT.HEAD.AUX +,
            PHON.ONSET voc ] ].

;; *one and a half box arrived.
onto_rbst := p_np_i_le &
 [ ORTH < "on", "to" >,
   SYNSEM [ LKEYS.KEYREL.PRED _onto_p_rel,
            PHON.ONSET voc ],
   GENRE robust ].

onto_prtcl_rbst := p_np_ptcl_le &
 [ ORTH < "on", "to" >,
   SYNSEM [ LKEYS.KEYREL.PRED _onto_p_sel_rel,
            PHON.ONSET voc ],
   GENRE robust ].

opine_v1_mal := v_np_cp_le_rbst &
 [ ORTH < "opine" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_opine_v_1_rel",
            PHON.ONSET voc ] ].

opportunity_n4_rbst := n_cp_c-optc_le &
 [ ORTH < "opportunity" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_opportunity_n_chance_rel",
            PHON.ONSET voc ],
   GENRE robust ].

opportunity_of_for_n1_mal := n_pp_c_le_rbst &
 [ ORTH < "opportunity" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
		    KEYREL.PRED "_opportunity_n_for_rel" ],
            PHON.ONSET voc ] ].

opportunity_to_for_n1_mal := n_pp_c_le_rbst &
 [ ORTH < "opportunity" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
		    KEYREL.PRED "_opportunity_n_for_rel" ],
            PHON.ONSET voc ] ].

opposite_to_p_rbst := p_np_i_le &
 [ ORTH < "opposite", "to" >,
   SYNSEM [ LKEYS.KEYREL.PRED _opposite_p_rel,
            PHON.ONSET voc ], 
   GENRE robust ].

; |given enough time _or_ we can finish|
or_sbrd_adv_mal := av_-_dc-conj_le_rbst &
 [ ORTH < "or" >,
   SYNSEM [ LKEYS.KEYREL.CARG "or",
            PHON.ONSET voc ] ].

orderly_a1_mal := av_-_i-vp-adj_le_rbst &
 [ ORTH < "orderly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_orderly_a_1_rel",
            PHON.ONSET voc ] ].

other_rbst := d_-_prt-sg_le &
 [ ORTH < "other" >,
   SYNSEM [ LKEYS.KEYREL.PRED udef_q_rel,
	    LOCAL.CAT.VAL.SPEC.FIRST.--SIND nonconj_ref-ind,
            PHON.ONSET voc ],
   GENRE robust ].

ought_aux_neg_1_rbst := v_vp_oght-n_le &
 [ ORTH < "oughtn't" >,
   SYNSEM [ LKEYS.KEYREL.PRED _ought_v_qmodal_rel,
            PHON.ONSET voc,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

ought_aux_neg_2_rbst := v_vp_oght-n_le &
 [ ORTH < "oughtn", "'t" >,
   SYNSEM [ LKEYS.KEYREL.PRED _ought_v_qmodal_rel,
            PHON.ONSET voc,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

;; "You are ought to know the answer"
ought_supposed_a1_rbst := aj_vp_i-seq-nmd_le &
 [ ORTH < "ought" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_supposed_a_1_rel",
            PHON.ONSET con ],
   GENRE robust ].

;; |try our best to succeed|
our_best_adv1 := av_-_i-vp-po_le &
 [ ORTH < "our", "best" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_our+best_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

our_nounif_n1 := n_-_pn-nounif_le &
 [ ORTH < "Our" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Our",
            PHON.ONSET voc ] ].

our_our_s_rbst := d_-_poss-our_le &
 [ ORTH < "our", "’s" >,
   SYNSEM [ PHON.ONSET voc,
            LOCAL.CAT [ HEAD.--POSSRBST +,
			VAL.SPEC.FIRST.LOCAL.CAT.HEAD noun ] ],
   GENRE robust ].

our_ours_rbst := d_-_poss-our_le &
 [ ORTH < "ours" >,
   SYNSEM [ PHON.ONSET voc,
            LOCAL.CAT [ HEAD.--POSSRBST +,
			VAL.SPEC.FIRST.LOCAL.CAT.HEAD noun ] ],
   GENRE robust ].

our_ourselfs_rbst := d_-_poss-our_le &
 [ ORTH < "ourself", "’s" >,
   SYNSEM [ PHON.ONSET voc,
            LOCAL.CAT [ HEAD.--POSSRBST +,
			VAL.SPEC.FIRST.LOCAL.CAT.HEAD noun ] ],
   GENRE robust ].

our_ourselves_rbst := d_-_poss-our_le &
 [ ORTH < "ourselves", "’s" >,
   SYNSEM [ PHON.ONSET voc,
            LOCAL.CAT [ HEAD.--POSSRBST +,
			VAL.SPEC.FIRST.LOCAL.CAT.HEAD noun ] ],
   GENRE robust ].

our_ourselves2_rbst := d_-_poss-our_le &
 [ ORTH < "ourselve", "’s" >,
   SYNSEM [ PHON.ONSET voc,
            LOCAL.CAT [ HEAD.--POSSRBST +,
			VAL.SPEC.FIRST.LOCAL.CAT.HEAD noun ] ],
   GENRE robust ].

our_we_rbst := d_-_poss-our_le &
 [ ORTH < "we" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT [ HEAD.--POSSRBST +,
			VAL.SPEC.FIRST.LOCAL.CAT.HEAD noun ] ],
   GENRE robust ].

ourself_adv_rbst := av_-_pr-ourslvs_le &
 [ ORTH < "ourself" >,
   SYNSEM.PHON.ONSET voc,
   GENRE robust ].

ourself_rbst := n_-_pr-ourslves_le &
 [ ORTH < "ourself" >,
   SYNSEM.PHON.ONSET voc,
   GENRE robust ].

out_of_bed_adv := pp_-_i_le &
 [ ORTH < "out", "of", "bed" >,
   SYNSEM [ LKEYS.KEYREL.PRED _out+of+bed_p_rel,
            PHON.ONSET voc ] ].

outskirts_n1_mal := n_-_c-sg_le_rbst &
 [ ORTH < "outskirt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_outskirts_n_1_rel",
            PHON.ONSET voc ] ].

overalls_n1_mal := n_-_c-sg_le_rbst &
 [ ORTH < "overall" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_overalls_n_1_rel",
            PHON.ONSET voc ] ].

overhear_v3_fin_mal := v_np-vp_fin_le_rbst &
 [ ORTH < "overhear" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_overhear_v_1_rel",
            PHON.ONSET voc ] ].

overhear_v3_fin_3sg_mal := v_np-vp_fin-3sg_le_rbst &
 [ ORTH < "overhear" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_overhear_v_1_rel",
            PHON.ONSET voc ] ].

owners_a1_mal := aj_-_i-cmpd_le_rbst &
 [ ORTH < "owners" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_owners_a_1_rel",
            PHON.ONSET voc ] ].

oxens_n1_mal := n_-_c-pl_le_rbst &
 [ ORTH < "oxens" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ox_n_1_rel",
            PHON.ONSET voc ] ].

oxes_n1_mal := n_-_c-pl_le_rbst &
 [ ORTH < "oxes" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ox_n_1_rel",
            PHON.ONSET voc ] ].

pacific_ocean_n1 := n_-_c-nm_le &
 [ ORTH < "Pacific", "Ocean" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Pacific+Ocean",
            PHON.ONSET con ] ].

pajamas_n1_mal := n_-_c-sg_le_rbst &
 [ ORTH < "pajama" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pajamas_n_1_rel",
            PHON.ONSET con ] ].

panties_n1_mal := n_-_c-sg_le_rbst &
 [ ORTH < "panty" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_panties_n_1_rel",
            PHON.ONSET con ] ].

pants_n1_mal := n_-_c-sg_le_rbst &
 [ ORTH < "pant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pants_n_1_rel",
            PHON.ONSET con ] ].

parduccis_n1 := n_-_pn-pl-def_le &
 [ ORTH < "Parduccis" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Parducci",
            PHON.ONSET con ] ].

passers_by_n1_rbst := n_-_c-pl_le &
 [ ORTH < "passer", "bys" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_passers+by_n_1_rel",
            PHON.ONSET con ],
   GENRE robust ].

passers_by_n2_rbst := n_-_c-pl_le &
 [ ORTH < "passer", "-", "bys" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_passers+by_n_1_rel",
            PHON.ONSET con ],
   GENRE robust ].

passionate_at_a1_mal := aj_pp_i_le_rbst &
 [ ORTH < "passionate" >,
   SYNSEM [ LKEYS [ --COMPKEY _at_p_sel_rel,
		    KEYREL.PRED "_passionate_a_about_rel" ],
            PHON.ONSET con ] ].

passionate_of_a1_mal := aj_pp_i_le_rbst &
 [ ORTH < "passionate" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
		    KEYREL.PRED "_passionate_a_about_rel" ],
            PHON.ONSET con ] ].

patiently_deg := av_-_dg-jomv_le &
 [ ORTH < "patiently" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_patiently_x_deg_rel",
            PHON.ONSET con ] ].

pay_for_v1 := v_pp_e_le &
 [ ORTH < "pay" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_pay_v_for_rel" ],
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.AGR.PNG.PN 3,
            PHON.ONSET con ] ].

pay_for_v1_rbst := v_pp_e_le &
 [ ORTH < "pay" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_pay_v_for_rel" ],
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.AGR.PNG.PN -3,
            PHON.ONSET con ],
   GENRE robust ].

pc_a8 := aj_-_i_le &
 [ ORTH < "p", ".~", "c." >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pc_a_1_rel",
            PHON.ONSET con ] ].

pc_a9 := aj_-_i_le &
 [ ORTH < "p", ".~", "c" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pc_a_1_rel",
            PHON.ONSET con ] ].

pc_n8 := n_-_c_le &
 [ ORTH < "p", ".~", "c." >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pc_n_1_rel",
            PHON.ONSET con ] ].

pc_n9 := n_-_c_le &
 [ ORTH < "p", ".~", "c" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pc_n_1_rel",
            PHON.ONSET con ] ].

p_e_n1 := n_-_c-maycap_le &
 [ ORTH < "P", ".~", "E." >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pe_n_1_rel",
            PHON.ONSET con ] ].

pearly_a1_mal := av_-_i-vp-adj_le_rbst &
 [ ORTH < "pearly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pearly_a_1_rel",
            PHON.ONSET con ] ].

pebbly_a1_mal := av_-_i-vp-adj_le_rbst &
 [ ORTH < "pebbly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pebbly_a_1_rel",
            PHON.ONSET con ] ].

;; |people health|
people_n1_poss_rbst := n_-_c-cpd_le &
 [ ORTH < "people" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_people_n_of_rel",
            LOCAL.CAT.HEAD.MINORS.NORM quantity_or_norm_rel,
            PHON.ONSET con ],
   GENRE robust ].

people_n1_rbst := n_plur_ppcomp_le_mal &
 [ ORTH < "peoples" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
		    KEYREL.PRED "_people_n_rel" ],
	    PHON.ONSET con ] ].

peoples_n1_mal := n_-_c-pl_le_rbst &
 [ ORTH < "peoples" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_people_n_1_rel",
            PHON.ONSET con ] ].

per_p_mal := p_nb_i_le_rbst &
 [ ORTH < "per" >,
   SYNSEM [ LKEYS.KEYREL.PRED _per_p_rel,
            PHON.ONSET con ] ].

per_cent_n2_mal := n_np_c-det_le_rbst &
 [ ORTH < "per", "cent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_percent_n_of_rel",
            PHON.ONSET con ] ].

percent_char_n2_mal := n_np_c-det_le_rbst &
 [ ORTH < "%" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_percent_n_of_rel",
            LOCAL.AGR.PNG png-irreg,
            PHON.ONSET con ] ].

percent_n2_mal := n_np_c-det_le_rbst &
 [ ORTH < "percent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_percent_n_of_rel",
            LOCAL.AGR.PNG png-irreg,
            PHON.ONSET con ] ].

permit_v1_mal := v_vp_seq_le_rbst &
 [ ORTH < "permit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_permit_v_1_rel",
            PHON.ONSET con ] ].

persuade_v2_mal := v_cp_le_rbst &
 [ ORTH < "persuade" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_persuade_v_of_rel",
            PHON.ONSET con ] ].

ph_d_n9 := n_-_c-maycap_le &
 [ ORTH < "Ph", ".~", "D" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_phd_n_1_rel",
            PHON.ONSET con ] ].

ph_d_n10 := n_-_c-maycap_le &
 [ ORTH < "Ph", ".~", "D." >,
   SYNSEM [ LKEYS.KEYREL.PRED "_phd_n_1_rel",
            PHON.ONSET con ] ].

pharmaceuticals_n2_mal := n_-_c-sg_le_rbst &
 [ ORTH < "pharmaceutical" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pharmaceuticals_n_1_rel",
            PHON.ONSET con ] ].

;; Drop png-irreg from normal entry, so can get robust v-3sg.
physics_n1 := n_-_m_le &
 [ ORTH < "physics" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_physics_n_1_rel",
            PHON.ONSET con ] ].

pick_v1_mal := v_-_le_rbst &
 [ ORTH < "pick" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pick_v_1_rel",
            PHON.ONSET con ] ].

picture_story_n1_rbst := n_-_c_le &
 [ ORTH < "picture", "story" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_picture+story_n_1_rel",
            PHON.ONSET con ],
   GENRE robust ].

pizza_pepperoni_n1_rbst := n_-_m_le &
 [ ORTH < "pizza", "pepperoni" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pizza+pepperoni_n_1_rel",
            PHON.ONSET con ],
   GENRE robust ].

;; |we plan to arriving|
plan_on_to_v1_rbst := v_p-vp_prp_le &
 [ ORTH < "plan" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_plan_v_on_rel" ],
            PHON.ONSET con ],
   GENRE robust ].

play_ground_n1_rbst := n_-_c_le &
 [ ORTH < "play", "ground" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_playground_n_1_rel",
            PHON.ONSET con ],
   GENRE robust ].

;; For "play ball", "play catch"
play_nbar_v1 := v_nb_le &
 [ ORTH < "play" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_play_v_1_rel",
            PHON.ONSET con ] ].

players_a1_mal := aj_-_i-cmpd_le_rbst &
 [ ORTH < "players" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_players_a_1_rel",
            PHON.ONSET con ] ].

pliers_n1_mal := n_-_c-sg_le_rbst &
 [ ORTH < "plier" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pliers_n_pair_rel",
            PHON.ONSET con ] ].

pm_temp_7 := x_-_am-pm_le &
 [ ORTH < "p", ".~", "m." >,
   SYNSEM [ LKEYS.KEYREL [ CARG "pm_time",
                             PRED "_pm_x_rel" ],
            PHON.ONSET con ] ].

pm_temp_8 := x_-_am-pm_le &
 [ ORTH < "p", ".~", "m" >,
   SYNSEM [ LKEYS.KEYREL [ CARG "pm_time",
                             PRED "_pm_x_rel" ],
            PHON.ONSET con ] ].

;; DPF 2018-03-06 - Since we treat plural compounds as robust, add adjective
;; entry to get |police officer/car/squad/station|

police_a1 := aj_-_i-att_le &
 [ ORTH < "police" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_police_a_1_rel",
            PHON.ONSET con ] ].

polices_n1_mal := n_-_c-pl_le_rbst &
 [ ORTH < "polices" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_police_n_1_rel",
            PHON.ONSET con ] ].

pony_express_n1 := n_-_c-nm_le &
 [ ORTH < "Pony", "Express" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Pony+Express",
            PHON.ONSET con ] ].

portly_a1_mal := av_-_i-vp-adj_le_rbst &
 [ ORTH < "portly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_portly_a_1_rel",
            PHON.ONSET con ] ].

positive_adv1_rbst := av_-_i-vp-po_le_mal &
 [ ORTH < "positive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_positive_a_1_rel",
            LOCAL.CAT.HEAD.MOD.FIRST.MODIFD.RPERIPH bool,
            PHON.ONSET con ] ].

possible_a1 := aj_pp_i_le &
 [ ORTH < "possible" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_possible_a_for_rel" ],
	    LOCAL.CAT.VAL.SPR.FIRST unexpressed,
            PHON.ONSET con ] ].

possible_a2 := aj_pp-vp_i-it-nt_le &
 [ ORTH < "possible" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_possible_a_for_rel",
	    LOCAL.CAT.VAL.SPR.FIRST unexpressed,
            PHON.ONSET con ] ].

possible_a3 := aj_cp_i-it_le &
 [ ORTH < "possible" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_possible_a_for_rel",
	    LOCAL.CAT.VAL.SPR.FIRST unexpressed,
            PHON.ONSET con ] ].

possible_a1_spr_mal := aj_-_i-spobl_le_rbst &
 [ ORTH < "possible" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_possible_a_for_rel",
            PHON.ONSET con ] ].

possible_a2_spr_rbst := aj_pp-vp_i-it-nt_le &
 [ ORTH < "possible" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_possible_a_for_rel",
	    LOCAL.CAT.VAL.SPR.FIRST expressed_synsem,
            PHON.ONSET con ],
   GENRE robust ].

possible_a3_spr_rbst := aj_cp_i-it_le &
 [ ORTH < "possible" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_possible_a_for_rel",
	    LOCAL.CAT.VAL.SPR.FIRST expressed_synsem,
            PHON.ONSET con ],
   GENRE robust ].

potentially_adv3_mal := av_-_i-pr-aux_le_rbst &
 [ ORTH < "potentially" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_potential_a_1_rel",
            PHON.ONSET con ] ].

pounce_on_v1_mal := v_np_pp_le_rbst &
 [ ORTH < "pounce" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pounce_v_on_rel",
            PHON.ONSET con ] ].

;; DPF 2019-02-21 - Since `practice' can be intransitive, exclude this one so
;; we avoid robust |she practiced to get ready for the performance||
#|
practice_v1_mal := v_vp_seq-prp_le_rbst &
 [ ORTH < "practice" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_practice_v_1_rel",
            PHON.ONSET con ] ].
|#

predict_v1_mal := v_np-vp_sor_le_rbst &
 [ ORTH < "predict" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_predict_v_1_rel",
            PHON.ONSET con ] ].

prepared_n1_mal := n_-_c-aj_le_rbst &
 [ ORTH < "prepared" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_well-prepared_n_1_rel",
            PHON.ONSET con ] ].

present_a2 := aj_-_i-prd_le &
 [ ORTH < "present" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_present_a_1_rel",
            PHON.ONSET con,
	    OPT - ] ].

present_a1_mal := aj_-_i-att_le_rbst &
 [ ORTH < "present" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_present_a_1_rel",
	    LOCAL.CAT.HEAD.MOD.FIRST.--SIND.SORT nontime-or-qevent,
            PHON.ONSET con ] ].

president_title_n1 := n_-_c-pre-ttl_le &
 [ ORTH < "President" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_president_n_1_rel",
            LOCAL.CAT.HEAD.MINORS.MIN pre_title_rel,
            PHON.ONSET con ] ].

pretty_much_adv_mal := av_-_i-pr-aux_le_rbst &
 [ ORTH < "pretty", "much" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pretty+much_a_1_rel",
            PHON.ONSET con ] ].

pretty_well_adv_mal := av_-_i-pr-aux_le_rbst &
 [ ORTH < "pretty", "well" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pretty+well_a_1_rel",
            PHON.ONSET con ] ].

prevent_from_v1_mal := v_pp_np_le_rbst &
 [ ORTH < "prevent" >,
   SYNSEM [ LKEYS [ --COMPKEY _from_p_sel_rel,
                    KEYREL.PRED "_prevent_v_1_rel" ],
            PHON.ONSET con ] ].

previously_adv2_mal := av_-_i-pr-aux_le_rbst &
 [ ORTH < "previously" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_previously_p_1_rel",
            PHON.ONSET con ] ].

;; Only for |1st/2nd/3rd prize|
prize_ord_n2 := n_-_c-ord_le &
 [ ORTH < "prize" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_prize_n_for_rel",
            PHON.ONSET con ] ].

probably_adv1_rbst := av_-_s-vp-x_le &
 [ ORTH < "probablely" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_probable_a_1_rel",
            PHON.ONSET con ],
   GENRE robust ].

probably_adv2_rbst := av_-_s-cp-pr_le &
 [ ORTH < "probablely" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_probable_a_1_rel",
            PHON.ONSET con ],
   GENRE robust ].

probably_adv3_rbst := av_-_s-negmod_le &
 [ ORTH < "probablely" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_probable_a_1_rel",
            PHON.ONSET con ],
   GENRE robust ].

probably_deg_rbst := av_-_dg-jomv_le &
 [ ORTH < "probablely" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_probably_x_deg_rel",
            PHON.ONSET con ],
   GENRE robust ].

problem_solving_n1 := n_-_m_le &
 [ ORTH < "problem", "solving" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_problem+solving_n_1_rel",
            PHON.ONSET con ] ].

problem_solving_n2 := n_-_m_le &
 [ ORTH < "problem", "-", "solving" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_problem+solving_n_1_rel",
            PHON.ONSET con ] ].

proceeds_n1_mal := n_-_c-sg_le_rbst &
 [ ORTH < "proceed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_proceeds_n_1_rel",
	    LOCAL.CAT.VAL.SPR.FIRST expressed_synsem,
            PHON.ONSET con ] ].

progress_n1_sp_rbst := n_-_m_le &
 [ ORTH < "progess" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_progress_n_1_rel",
            PHON.ONSET con ],
   GENRE robust ].

progressed_a1_post_mal := v_-_psv-post_le_rbst &
 [ ORTH < "progressed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_progress_v_1_rel",
            PHON.ONSET con ] ].

promote_v1_mal := v_-_le_pas_rbst &
 [ ORTH < "promote" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_promote_v_1_rel",
            PHON.ONSET con ] ].

propose_v5_mal := v_cp_sbjnct_le_rbst &
 [ ORTH < "propose" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_propose_v_to_rel",
            PHON.ONSET con ] ].

provide_v2_mal := v_np-np_le_rbst &
 [ ORTH < "provide" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_provide_v_1_rel",
            PHON.ONSET con ] ].

provide_of_with_v1_mal := v_np-pp_e_le_rbst &
 [ ORTH < "provide" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _of_p_sel_rel,
		    KEYREL.PRED "_provide_v_with_rel" ],
            PHON.ONSET con ] ].

provided_subord_mal := p_cp_s_le_rbst &
 [ ORTH < "provided" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_provided_x_rel",
            PHON.ONSET con ] ].

provided_subord_2_mal := p_cp_s-tns_le_rbst &
 [ ORTH < "provided" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_provided_x_rel",
            PHON.ONSET con ] ].

provided_that_subord_mal := p_cp_s_le_rbst &
 [ ORTH < "provided", "that" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_provided_x_rel",
            PHON.ONSET con ] ].

provided_that_subord_2_mal := p_cp_s-tns_le_rbst &
 [ ORTH < "provided", "that" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_provided_x_rel",
            PHON.ONSET con ] ].

provided_subord_past := p_cp_s-past_le &
 [ ORTH < "provided" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_provided_x_rel",
            PHON.ONSET con ] ].

provided_that_subord_past := p_cp_s-past_le &
 [ ORTH < "provided", "that" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_provided_x_rel",
            PHON.ONSET con ] ].

providing_subord_past := p_cp_s-past_le &
 [ ORTH < "providing" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_providing_x_rel",
            PHON.ONSET con ] ].

providing_subord_mal := p_cp_s_le_rbst &
 [ ORTH < "providing" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_providing_x_rel",
            PHON.ONSET con ] ].

providing_subord_2_mal := p_cp_s-tns_le_rbst &
 [ ORTH < "providing" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_providing_x_rel",
            PHON.ONSET con ] ].

ps_root_pre_8 := av_-_s-cp-mc-pr_le &
 [ ORTH < "p", ".~", "s" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ps_a_1_rel",
            PHON.ONSET con ] ].

ps_root_pre_9 := av_-_s-cp-mc-pr_le &
 [ ORTH < "p", ".~", "s." >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ps_a_1_rel",
            PHON.ONSET con ] ].

public_i_n1 := n_-_c-brno_le &
 [ ORTH < "public" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_public_n_1_rel",
            PHON.ONSET con ] ].

pursue_for_v1_mal := v_pp_np_le_rbst &
 [ ORTH < "pursue" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_pursue_v_1_rel" ],
            PHON.ONSET con ] ].

pursue_pursuit_n1_rbst := n_pp_mc-of_le &
 [ ORTH < "pursue" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pursuit_n_of_rel",
            LOCAL.CAT.VAL.COMPS.FIRST.OPT -,
            PHON.ONSET con ],
   GENRE robust ].

;; Restrict to -ing to avoid robust "he put the book on the shelf"
put_v1_trans_mal := v_np_trans_le_rbst &
 [ ORTH < "put" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_put_v_1_rel",
	    LOCAL.CAT.HEAD.VFORM prp,
            PHON.ONSET con ] ].

queen_ttl_n1 := n_-_c-pre-ttl_le &
 [ ORTH < "Queen" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_queen_n_of_rel",
            LOCAL.CAT.HEAD.MINORS.MIN pre_title_rel,
            PHON.ONSET con ] ].

quibble_v1_mal := v_np_cp_le_rbst &
 [ ORTH < "quibble" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_quibble_v_1_rel",
            PHON.ONSET con ] ].

quicker_adv_mal := av_-_i-vp-cmp_le_rbst &
 [ ORTH < "quicker" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_quicker_a_1_rel",
            PHON.ONSET con ] ].

quicker_a1_mal := aj_-_i-cmp_le_rbst &
 [ ORTH < "quicker" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_quick_a_1_rel",
            PHON.ONSET con ] ].

quite_adv1_mal := av_-_i-pr-aux_le_rbst &
 [ ORTH < "quite" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_quite_a_1_rel",
            PHON.ONSET con ] ].

rabies_n1_mal := n_-_c-sg_le_rbst &
 [ ORTH < "raby" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rabies_n_1_rel",
            PHON.ONSET con ] ].

rabies_n1_2_mal := n_-_c-sg_le_rbst &
 [ ORTH < "rabie" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rabies_n_1_rel",
            PHON.ONSET con ] ].

rainclothes_n1_mal := n_-_c-sg_le_rbst &
 [ ORTH < "rainclothe" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rainclothes_n_1_rel",
            PHON.ONSET con ] ].

rapids_n1_mal := n_-_c-sg_le_rbst &
 [ ORTH < "rapid" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rapids_n_1_rel",
            LOCAL.CAT.VAL.SPR.FIRST expressed_synsem,
            PHON.ONSET con ] ].

ravages_n1_mal := n_-_c-sg_le_rbst &
 [ ORTH < "ravage" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ravages_n_1_rel",
            PHON.ONSET con ] ].

ravings_n1_mal := n_-_c-sg_le_rbst &
 [ ORTH < "raving" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ravings_n_1_rel",
            PHON.ONSET con ] ].

#|
;; |*He realized the arrival| => |He realized (that) they arrived|
realize_v1_mal := v_np_cp_le_rbst &
 [ ORTH < "realize" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_realize_v_1_rel",
            PHON.ONSET con ] ].
|#

realize_v1_mal := v_-_le_rbst &
 [ ORTH < "realize" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_realize_v_1_rel",
            PHON.ONSET con ] ].

reason_of_for_n1_mal := n_pp_c_le_rbst &
 [ ORTH < "reason" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
		    KEYREL.PRED "_reason_n_for_rel" ],
            PHON.ONSET con ] ].

reason_v1_mal := v_np_cp_le_rbst &
 [ ORTH < "reason" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reason_v_1_rel",
            PHON.ONSET con ] ].

recommend_v1_mal := v_vp_seq_le_rbst &
 [ ORTH < "recommend" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_recommend_v_1_rel",
            PHON.ONSET con ] ].

recommend_v2_mal := v_np-np_le_rbst &
 [ ORTH < "recommend" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_recommend_v_1_rel",
            PHON.ONSET con ] ].

recommend_ing_v1_mal := v_vp_bse-ing_le_rbst &
 [ ORTH < "recommend" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_recommend_v_1_rel",
            PHON.ONSET con ] ].

regard_to_v1_mal := v_pp_np_le_rbst &
 [ ORTH < "regard" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_regard_v_1_rel" ],
            PHON.ONSET con ] ].

regardless_p1_rbst := p_np_i_le &
 [ ORTH < "regardless" >,
   SYNSEM [ LKEYS.KEYREL.PRED _regardless+of_p_rel,
            PHON.ONSET con ],
   GENRE robust ].

regular_adv_mal := av_-_i-adj-pre_le_rbst &
 [ ORTH < "regular" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_regular_a_1_rel",
            PHON.ONSET con ] ].

rejoice_v1_mal := v_np_cp_le_rbst &
 [ ORTH < "rejoice" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rejoice_v_1_rel",
            PHON.ONSET con ] ].

relate_with_to_v1_mal := v_np-pp_e_le_rbst &
 [ ORTH < "relate" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _with_p_sel_rel,
		    KEYREL.PRED "_relate_v_to_rel" ],
            PHON.ONSET con ] ].

relax_relaxation_mal := n_-_c-vb_le_rbst &
 [ ORTH < "relax" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_relaxation_n_1_rel",
            PHON.ONSET con ] ].

relocate_relocation_mal := n_-_c-vb_le_rbst &
 [ ORTH < "relocate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_relocation_n_1_rel",
            PHON.ONSET con ] ].

rely_in_on_v1_mal := v_pp_e_le_rbst &
 [ ORTH < "rely" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_rely_v_on_rel" ],
            PHON.ONSET con ] ].

rely_on_v1_mal := v_np_pp_le_rbst &
 [ ORTH < "rely" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rely_v_on_rel",
            PHON.ONSET con ] ].

rely_upon_on_v1_mal := v_pp_e_le_rbst &
 [ ORTH < "rely" >,
   SYNSEM [ LKEYS [ --COMPKEY _upon_p_sel_rel,
                    KEYREL.PRED "_rely_v_on_rel" ],
            PHON.ONSET con ] ].

rely_reply_n1_sp_rbst := n_-_c-nochd_le &
 [ ORTH < "rely" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reply_n_of_rel",
	    LOCAL.CAT.VAL.SPR.FIRST.--MIN def_poss_q_rel,
            PHON.ONSET con ],
   GENRE robust ].

remain_v1_mal := v_np_prd_le_rbst &
 [ ORTH < "remain" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_remain_v_1_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.--SIND.DIV +,
            PHON.ONSET con ] ].

remains_n1_mal := n_-_c-sg_le_rbst &
 [ ORTH < "remain" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_remains_n_1_rel",
            PHON.ONSET con ] ].

;; Avoid for "it was remembered the movie"
remember_v1 := v_np*_le &
 [ ORTH < "remember" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_remember_v_from_rel",
            PHON.ONSET con ] ].

;; Avoid for "it was remembered the movie"
remember_v2_mal := v_np-np_le_rbst &
 [ ORTH < "remember" >,
   ALTS.PASSIVE -,
   SYNSEM [ LKEYS.KEYREL.PRED "_remember_v_1_rel",
            PHON.ONSET con ] ].

remembered_a1_it_mal := aj_np_i-it_le_rbst &
 [ ORTH < "remembered" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_remembered_a_1_rel",
            PHON.ONSET con ] ].

remove_v1_mal := v_-_le_rbst &
 [ ORTH < "remove" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_remove_v_1_rel",
            PHON.ONSET con ] ].

replica_from_of_n1_mal := n_pp_c_le_rbst &
 [ ORTH < "replica" >,
   SYNSEM [ LKEYS [ --COMPKEY _from_p_sel_rel,
		    KEYREL.PRED "_replica_n_of_rel" ],
            PHON.ONSET con ] ].

request_for_v1_mal := v_pp_np_le_rbst &
 [ ORTH < "request" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_request_v_1_rel" ],
            PHON.ONSET con ] ].

research_on_v1_mal := v_pp_np_le_rbst &
 [ ORTH < "research" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_research_v_1_rel" ],
            PHON.ONSET con ] ].

respect_to_v1_mal := v_pp_np_le_rbst &
 [ ORTH < "respect" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_respect_v_1_rel" ],
            PHON.ONSET con ] ].

respond_to_v1_mal := v_np_pp_le_rbst &
 [ ORTH < "respond" >,
   SYNSEM [ LKEYS [ KEYREL.PRED "_respond_v_to_rel" ],
            PHON.ONSET con ] ].

responsible_a1_mal := aj_vp_i-seq-pp_le_rbst &
 [ ORTH < "responsible" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_responsible_a_for_rel",
            PHON.ONSET con ] ].

restraint_restrain_v1_rbst := v_np_le &
 [ ORTH < "restraint" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_restrain_v_from_rel",
            PHON.ONSET con ],
   GENRE robust ].

result_in_v1_mal := v_np_pp_le_rbst &
 [ ORTH < "result" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_result_v_in_rel",
            PHON.ONSET con ] ].

result_to_in_v1_mal := v_pp_e_le_rbst &
 [ ORTH < "result" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_result_v_in_rel" ],
            PHON.ONSET con ] ].

retain_v1_mal := v_prd_np_le_rbst &
 [ ORTH < "retain" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_retain_v_1_rel",
            PHON.ONSET con ] ].

retort_v1_mal := v_np_cp_le_rbst &
 [ ORTH < "retort" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_retort_v_1_rel",
            PHON.ONSET con ] ].

rfid_nounif_n1 := n_-_pn-nounif_le &
 [ ORTH < "RFID" >,
   SYNSEM [ LKEYS.KEYREL.CARG "RFID",
            PHON.ONSET voc ] ].

rhodeisland_n8 := n_-_pn-abb_le &
 [ ORTH < "R", ".~", "I." >,
   SYNSEM [ LKEYS.KEYREL.CARG "Rhode+Island",
            PHON.ONSET con ] ].

rhodeisland_n9 := n_-_pn-abb_le &
 [ ORTH < "R", ".~", "I" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Rhode+Island",
            PHON.ONSET con ] ].

;; Don't want robust "They admired the rich"
#|
riches_n1_mal := n_-_c-sg_le_rbst &
 [ ORTH < "rich" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_riches_n_1_rel",
            PHON.ONSET con ] ].
|#

ring_n1 := n_-_c-maycap_le &
 [ ORTH < "ring" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ring_n_1_rel",
            PHON.ONSET con ] ].

ring_n2 := n_pp_c-of-obl_le &
 [ ORTH < "ring" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ring_n_of_rel",
            PHON.ONSET con ] ].

rise_raise_v2_rbst := v_np_noger_le &
 [ ORTH < "rise" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_raise_v_cause_rel",
	    LOCAL.CAT.HEAD.--VGERUND -,
            PHON.ONSET con ],
   GENRE robust ].

rise_up_v1_rbst := v_p-np_le &
 [ ORTH < "rise" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_rise_v_up_rel" ],
            PHON.ONSET con ],
   GENRE robust ].

risen_raised_v1_rbst := aj_-_i-prd_le &
 [ ORTH < "risen" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_risen_a_1_rel",
            PHON.ONSET con ],
   GENRE robust ].

road_n1 := n_-_c-maycap_le &
 [ ORTH < "road" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_road_n_1_rel",
            PHON.ONSET con ] ].

rocky_road_n1 := n_-_m_le &
 [ ORTH < "rocky", "road" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rocky+road_n_1_rel",
            PHON.ONSET con ] ].

role_playing_n1 := n_-_m_le &
 [ ORTH < "role", "playing" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_role+playing_n_1_rel",
            PHON.ONSET con ] ].

role_playing_n2 := n_-_m_le &
 [ ORTH < "role", "-", "playing" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_role+playing_n_1_rel",
            PHON.ONSET con ] ].

roller_skating_v1 := v_-_prp_le &
 [ ORTH < "roller-skating" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_roller+skate_v_1_rel",
            PHON.ONSET con ] ].

roths_n1 := n_-_pn-pl-def_le &
 [ ORTH < "Roths" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Roth",
            PHON.ONSET con ] ].

rough_face_a1 := aj_-_i_le &
 [ ORTH < "rough", "-", "face" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rough-face_a_1_rel",
            PHON.ONSET con ] ].

rude_a2_mal := aj_pp-vp_i-for-it_le_rbst &
 [ ORTH < "rude" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rude_a_of_rel",
            PHON.ONSET con ] ].

ruin_v1_mal := v_-_le_pas_rbst &
 [ ORTH < "ruin" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ruin_v_1_rel",
            PHON.ONSET con ] ].

run_v4_locinv_mal := v_np_locinv-mv_le_rbst &
 [ ORTH < "run" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_run_v_1_rel",
            PHON.ONSET con ] ].

s_a_cmpd_n8 := n_-_c-cpd_le &
 [ ORTH < "S", ".~", "A." >,
   SYNSEM [ LKEYS.KEYREL.PRED "_s+a_n_1_rel",
            PHON.ONSET voc ] ].

s_a_cmpd_n9 := n_-_c-cpd_le &
 [ ORTH < "S", ".~", "A" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_s+a_n_1_rel",
            PHON.ONSET voc ] ].

s_a_post_ttl_8 := n_-_tt-post_le &
 [ ORTH < "S", ".~", "A." >,
   SYNSEM [ LKEYS.KEYREL.PRED "_s+a_n_1_rel",
            PHON.ONSET voc ] ].

s_a_post_ttl_9 := n_-_tt-post_le &
 [ ORTH < "S", ".~", "A" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_s+a_n_1_rel",
            PHON.ONSET voc ] ].

same_a1_mal := aj_pp_i-cmp-sme_le_rbst &
 [ ORTH < "same" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_same_a_as_rel",
            PHON.ONSET con ] ].

Saturday_night_n1 := n_-_c-dpt-cap_le &
 [ ORTH < "Saturday", "night" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_Saturday+night_n_1_rel",
            PHON.ONSET con ] ].

say_v1_i := v_nb_idm_le &
 [ ORTH < "say" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_say_v_i_rel",
            PHON.ONSET con ] ].

scaly_a1_mal := av_-_i-vp-adj_le_rbst &
 [ ORTH < "scaly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_scaly_a_1_rel",
            PHON.ONSET con ] ].

scan_at_v1_mal := v_pp_np_le_rbst &
 [ ORTH < "scan" >,
   SYNSEM [ LKEYS [ --COMPKEY _at_p_sel_rel,
                    KEYREL.PRED "_scan_v_1_rel" ],
            PHON.ONSET con ] ].

school_n1 := n_-_m-nomod_le &
 [ ORTH < "school" >,
   ALTS.PLMASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_school_n_1_rel",
            LOCAL.CONT.HOOK.INDEX.SORT nonhuman,
            PHON.ONSET con ] ].

school_n2 := n_-_c-maycap_le &
 [ ORTH < "school" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_school_n_1_rel",
            PHON.ONSET con ] ].

school_scholl_sp_rbst := n_-_c-maycap_le &
 [ ORTH < "scholl" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_school_n_1_rel",
            PHON.ONSET con ],
   GENRE robust ].

;; For 7.F.6650.04
;;
school_day_n1 := n_-_c_le &
 [ ORTH < "school", "day" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_school+day_n_1_rel",
            LOCAL.CONT.HOOK.INDEX.SORT nonhuman,
            PHON.ONSET con ] ].

school_play_n1 := n_-_c_le &
 [ ORTH < "school", "play" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_school+play_n_1_rel",
            PHON.ONSET con ] ].

;; For |*we like new school| while still getting |we like school|

;;
school_mod_mal := n_-_m-nomod_le_rbst &
 [ ORTH < "school" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_school_n_1_rel",
            PHON.ONSET con ] ].

scissors_n1_mal := n_-_c-sg_le_rbst &
 [ ORTH < "scissor" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_scissors_n_pair_rel",
            PHON.ONSET con ] ].

scout_n1 := n_-_c-maycap_le &
 [ ORTH < "scout" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_scout_n_1_rel",
            PHON.ONSET con ] ].

seat_v3_mal := v_-_le_rbst &
 [ ORTH < "seat" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_seat_v_1_rel",
            PHON.ONSET con ] ].

seating_a1_mal := aj_-_i-ing-ed_le_rbst &
 [ ORTH < "seating" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_seated_a_1_rel",
            PHON.ONSET voc ] ].

second_dom_euro_sp_mal := n_-_pn-dom-euro_le_rbst &
 [ ORTH < "2th" >,
   SYNSEM [ LKEYS.KEYREL.CARG "2",
            PHON.ONSET con ] ].

second_dom_sp_rbst := n_-_pn-dom-ord_le &
 [ ORTH < "2th" >,
   SYNSEM [ LKEYS.KEYREL.CARG "2",
            PHON.ONSET con ],
   GENRE robust ].

second_of_all := av_-_s-cp-mc-pr_le &
 [ ORTH < "second", "of", "all" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_second+of+all_a_1_rel",
            PHON.ONSET con ] ].

second_time_n1_rbst := n_-_c-cpd_le &
 [ ORTH < "second", "time" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_second+time_n_1_rel",
            PHON.ONSET con ],
   GENRE robust ].

see_v1 := v_np_le &
 [ ORTH < "see" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_see_v_1_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
            PHON.ONSET con ] ].

see_v1_mal := v_vp_seq_le_rbst &
 [ ORTH < "see" >,
   SYNSEM [ LOCAL.CAT.HEAD.--MAL3SG -,
	    LKEYS.KEYREL.PRED "_see_v_1_rel",
            PHON.ONSET con ] ].

see_v2_mal := v_np-vp_oeq_le_rbst &
 [ ORTH < "see" >,
   SYNSEM [ LOCAL.CAT.HEAD.--MAL3SG -,
	    LKEYS.KEYREL.PRED "_see_v_1_rel",
            PHON.ONSET con ] ].

see_of_v1_mal := v_pp_np_le_rbst &
 [ ORTH < "see" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_see_v_1_rel" ],
            PHON.ONSET con ] ].

;; This one is too enthusiastic: |I saw my dad wasn't there|
#|
see_v4_fin_mal := v_np-vp_fin_le_rbst &
 [ ORTH < "see" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_see_v_1_rel",
            PHON.ONSET con ] ].

see_v4_fin_3sg_mal := v_np-vp_fin-3sg_le_rbst &
 [ ORTH < "see" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_see_v_1_rel",
            PHON.ONSET con ] ].
|#

; Prevent spurious ambiguity for |she saw he cheated| with robust `he'
; Also block adj, to avoid robust adj for |see, taste|
see_v7 := v_np-prd_oeq_le &
 [ ORTH < "see" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_see_v_1_rel",
            LOCAL.CAT.VAL.COMPS [ FIRST.LOCAL.CAT.HEAD.--MALCASE -,
	                          REST.FIRST.LOCAL.CAT.HEAD v_or_p ],
            PHON.ONSET con ] ].

seek_for_v1_mal := v_pp_np_le_rbst &
 [ ORTH < "seek" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_seek_v_1_rel" ],
            PHON.ONSET con ] ].

seek_to_v1_mal := v_pp_np_le_rbst &
 [ ORTH < "seek" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_seek_v_1_rel" ],
            PHON.ONSET con ] ].

send_v2_pron_mal := v_np-nppro_le_rbst &
 [ ORTH < "send" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_send_v_1_rel",
	    LOCAL.CAT.VAL.COMPS.REST.FIRST.--MIN pron_rel,
            PHON.ONSET con ] ].

several_adj_mal := aj_-_i-one_le_rbst &
 [ ORTH < "several" >,
   SYNSEM.PHON.ONSET con ].

shallows_n1_mal := n_-_c-sg_le_rbst &
 [ ORTH < "shallow" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shallows_n_1_rel",
            PHON.ONSET con ] ].

she_elephant_n1 := n_-_c-nm_le &
 [ ORTH < "She", "Elephant" >,
   SYNSEM [ LKEYS.KEYREL.CARG "She+Elephant",
            PHON.ONSET con ] ].

she_herself := n_-_pr-she_le &
 [ ORTH < "she", "herself" >,
   SYNSEM.PHON.ONSET con ].

she_herself_rbst := n_-_pr-she_le &
 [ ORTH < "herself" >,
   SYNSEM.PHON.ONSET con,
   GENRE robust ].

;; Too much spurious ambig
#|
she_it_expl_rbst := n_-_pr-it-x_le &
 [ ORTH < "she" >,
   SYNSEM.PHON.ONSET con,
   GENRE robust ].
|#

she_rbst := n_-_pr-her_le &
 [ ORTH < "she" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.HEAD.--MALCASE + ],
   GENRE robust ].

shears_n1_mal := n_-_c-sg_le_rbst &
 [ ORTH < "shear" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shears_n_1_rel",
            PHON.ONSET con ] ].

sheeps_n1_mal := n_-_c-pl_le_rbst &
 [ ORTH < "sheeps" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sheep_n_1_rel",
            PHON.ONSET con ] ].

shin_v1_mal := v_-_le_rbst &
 [ ORTH < "shin" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shin_v_1_rel",
            PHON.ONSET con ] ].

shorter_a1_mal := aj_-_i-cmp_le_rbst &
 [ ORTH < "shorter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_short_a_of_rel",
            PHON.ONSET con ] ].

should_fin_mal := v_vp_fin_le_rbst &
 [ ORTH < "should" >,
   SYNSEM [ LKEYS.KEYREL.PRED _should_v_modal_rel,
            PHON.ONSET con ] ].

should_aux_neg_1_rbst := v_vp_mdl-n_le &
 [ ORTH < "shouldn't" >,
   SYNSEM [ LKEYS.KEYREL.PRED _should_v_modal_rel,
            PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

#|
should_aux_neg_2_rbst := v_vp_mdl-n-pst_le &
 [ ORTH < "shouldn", "'t" >,
   SYNSEM [ LKEYS.KEYREL.PRED _should_v_modal_rel,
            PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

should_aux_neg_3_u_rbst := v_vp_mdl-n-pst_le &
 [ ORTH < "shouldn’t" >,
   SYNSEM [ LKEYS.KEYREL.PRED _should_v_modal_rel,
            PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].
|#

should_had_better_rbst := v_vp_mdl-p-niv_le &
 [ ORTH < "should", "better" >,
   SYNSEM [ LKEYS.KEYREL.PRED _had+better_v_qmodal_rel,
            PHON.ONSET con ],
   GENRE robust ].

sigh_sign_v1_rbst := v_np_le &
 [ ORTH < "sigh" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sign_v_1_rel",
            PHON.ONSET con ],
   GENRE robust ].

silly_a1_mal := av_-_i-vp-adj_le_rbst &
 [ ORTH < "silly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_silly_a_1_rel",
            PHON.ONSET con ] ].

similar_with_a1_mal := aj_pp_i_le_rbst &
 [ ORTH < "similar" >,
   SYNSEM [ LKEYS [ --COMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_similar_a_to_rel" ],
            PHON.ONSET con ] ].

similarly_mal := av_-_i-vp-pr_le_rbst &
 [ ORTH < "similarly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_similar_a_to_rel",
            PHON.ONSET con ] ].

;; Prevent analysis as subord-clause fragment
since_subord := p_cp_s_le &
 [ ORTH < "since" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_since_x_subord_rel",
            LOCAL.CAT.HEAD.MINORS.NORM no_rel,
            PHON.ONSET con ] ].

since_subord_past := p_cp_s-past_le &
 [ ORTH < "since" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_since_x_subord_rel",
            LOCAL.CAT.HEAD.MINORS.NORM no_rel,
            PHON.ONSET con ] ].

since_subord_mal := p_cp_s_le_rbst &
 [ ORTH < "since" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_since_x_subord_rel",
            LOCAL.CAT.HEAD.MINORS.NORM no_rel,
            PHON.ONSET con ] ].

since_subord_2_mal := p_cp_s-tns_le_rbst &
 [ ORTH < "since" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_since_x_subord_rel",
            LOCAL.CAT.HEAD.MINORS.NORM no_rel,
            PHON.ONSET con ] ].

sister_ttl_n1 := n_-_c-pre-ttl_le &
 [ ORTH < "Sister" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sister_n_of_rel",
            LOCAL.CAT.HEAD.MINORS.MIN pre_title_rel,
            PHON.ONSET con ] ].

sit_v2_locinv_mal := v_np_locinv-mv_le_rbst &
 [ ORTH < "sit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sit_v_1_rel",
            PHON.ONSET con ] ].

situate_v1_mal := v_-_le_pas_rbst &
 [ ORTH < "situate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_situate_v_1_rel",
            PHON.ONSET con ] ].

situate_v_inv_mal := v_np_locinv_le_rbst &
 [ ORTH < "situate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_situate_v_1_rel",
            PHON.ONSET con ] ].

slacks_n1_mal := n_-_c-sg_le_rbst &
 [ ORTH < "slack" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_slacks_n_1_rel",
            PHON.ONSET con ] ].

slovenly_a1_mal := av_-_i-vp-adj_le_rbst &
 [ ORTH < "slovenly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_slovenly_a_1_rel",
            PHON.ONSET con ] ].

sly_a1_mal := av_-_i-vp-adj_le_rbst &
 [ ORTH < "sly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sly_a_1_rel",
            PHON.ONSET con ] ].

smelly_a1_mal := av_-_i-vp-adj_le_rbst &
 [ ORTH < "smelly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_smelly_a_1_rel",
            PHON.ONSET con ] ].

smiths_n1 := n_-_pn-pl-def_le &
 [ ORTH < "Smiths" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Smith",
            PHON.ONSET con ] ].

smithsonian_institution_n1 := n_-_c-nm_le &
 [ ORTH < "Smithsonian", "Institution" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Smithsonian+Institution",
            PHON.ONSET con ] ].

snowboarding_v1_sp_rbst := v_-_prp_le &
 [ ORTH < "snow", "boarding" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_snowboard_v_1_rel",
            PHON.ONSET con ],
   GENRE robust ].

snowboarding_v2_sp_rbst := v_-_prp_le &
 [ ORTH < "snow", "-", "boarding" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_snowboard_v_1_rel",
            PHON.ONSET con ],
   GENRE robust ].

so_conj_mal := p_cp_s_le_rbst &
 [ ORTH < "so" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_so_x_rel",
            PHON.ONSET con ] ].

so_conj_2_mal := p_cp_s-tns_le_rbst &
 [ ORTH < "so" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_so_x_rel",
            PHON.ONSET con ] ].

so_conj_past := p_cp_s-past_le &
 [ ORTH < "so" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_so_x_rel",
            PHON.ONSET con ] ].

so_long_as_subord_past := p_cp_s-past_le &
 [ ORTH < "so", "long", "as" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_so+long+as_x_rel",
            PHON.ONSET con ] ].

so_long_as_subord_mal := p_cp_s_le_rbst &
 [ ORTH < "so", "long", "as" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_so+long+as_x_rel",
            PHON.ONSET con ] ].

so_long_as_subord_2_mal := p_cp_s-tns_le_rbst &
 [ ORTH < "so", "long", "as" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_so+long+as_x_rel",
            PHON.ONSET con ] ].

so_that_past := p_cp_s-past_le &
 [ ORTH < "so", "that" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_so+that_x_rel",
            PHON.ONSET con ] ].

so_that_mal := p_cp_s_le_rbst &
 [ ORTH < "so", "that" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_so+that_x_rel",
            PHON.ONSET con ] ].

so_that_2_mal := p_cp_s-tns_le_rbst &
 [ ORTH < "so", "that" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_so+that_x_rel",
            PHON.ONSET con ] ].

solve_for_v1_mal := v_pp_np_le_rbst &
 [ ORTH < "solve" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_solve_v_1_rel" ],
            PHON.ONSET con ] ].

something_mod_mal := n_-_m-mod_le_rbst &
 [ ORTH < "something" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_type_n_1_rel",
            PHON.ONSET con ] ].

somethings_rbst := n_-_pr_le &
 [ ORTH < "somethings" >,
   SYNSEM [ LKEYS [ ALTKEYREL.PRED _some_q_rel,
                    KEYREL.PRED thing_rel ],
            PHON.ONSET con ],
   GENRE robust ].

sometimes_adv3 := av_-_i-vp-x_le &
 [ ORTH < "sometimes" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sometimes_a_1_rel",
            PHON.ONSET con ] ].

south_n1 := n_-_c-maycap_le &
 [ ORTH < "south" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_south_n_of_rel",
            PHON.ONSET con ] ].

south_pn_n2 := n_-_pn_le &
 [ ORTH < "South" >,
   SYNSEM [ LKEYS.KEYREL.CARG "South",
            PHON.ONSET con ] ].

southcarolina_n8 := n_-_pn-abb_le &
 [ ORTH < "S", ".~", "C." >,
   SYNSEM [ LKEYS.KEYREL.CARG "South+Carolina",
            PHON.ONSET con ] ].

southcarolina_n9 := n_-_pn-abb_le &
 [ ORTH < "S", ".~", "C" >,
   SYNSEM [ LKEYS.KEYREL.CARG "South+Carolina",
            PHON.ONSET con ] ].

southdakota_n8 := n_-_pn-abb_le &
 [ ORTH < "S", ".~", "D." >,
   SYNSEM [ LKEYS.KEYREL.CARG "South+Dakota",
            PHON.ONSET con ] ].

southdakota_n9 := n_-_pn-abb_le &
 [ ORTH < "S", ".~", "D" >,
   SYNSEM [ LKEYS.KEYREL.CARG "South+Dakota",
            PHON.ONSET con ] ].

spaghetti_joint_n1 := n_-_c_le &
 [ ORTH < "Spaghetti", "Joint" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_Spaghetti+Joint_n_1_rel",
            PHON.ONSET con ] ].

#|
speak_v1_rbst := v_nb_idm_le &
 [ ORTH < "speak" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_speak_v_i_rel",
	    PHON.ONSET con ],
   GENRE robust ].
|#
speak_v1_rbst := v_cp_le &
 [ ORTH < "speak" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_speak_v_1_rel",
	    PHON.ONSET con ],
   GENRE robust ].

speculate_v1_mal := v_np_cp_le_rbst &
 [ ORTH < "speculate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_speculate_v_1_rel",
            PHON.ONSET con ] ].

#|
speech_idm_n1 := n_-_c-idm_le &
 [ ORTH < "speech" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_speech_n_1_rel",
            PHON.ONSET con ] ].
|#

speech_i_n1_mal := n_-_c-brno_le_rbst &
 [ ORTH < "speech" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_speech_n_1_rel",
            PHON.ONSET con ] ].


spirit_n1 := n_-_m-nomod_le &
 [ ORTH < "spirit" >,
   ALTS.PLMASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_spirit_n_1_rel",
            PHON.ONSET con ] ].

spirit_n2 := n_-_c_le &
 [ ORTH < "spirit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_spirit_n_1_rel",
            LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

spirit_mod_mal := n_-_m-nomod_le_rbst &
 [ ORTH < "spirit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_spirit_n_1_rel",
            PHON.ONSET con ] ].

spoils_n1_mal := n_-_c-sg_le_rbst &
 [ ORTH < "spoil" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_spoils_n_1_rel",
            PHON.ONSET con ] ].

sport_car_n1_rbst := n_-_c_le &
 [ ORTH < "sport", "car" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sport+coat_n_1_rel",
            PHON.ONSET con ],
   GENRE robust ].

sport_jobber_n1_sp_rbst := n_-_c_le &
 [ ORTH < "sport", "jobber" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sport+jobber_n_1_rel",
            PHON.ONSET con ],
   GENRE robust ].

sprightly_a1_mal := av_-_i-vp-adj_le_rbst &
 [ ORTH < "sprightly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sprightly_a_1_rel",
            PHON.ONSET con ] ].

spring_break_n1 := n_-_mc_le &
 [ ORTH < "spring", "break" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_spring+break_n_1_rel",
            PHON.ONSET con ] ].

the_spring_festival_n1_nocap_mal := n_-_m-hldy_le_nocap_rbst &
 [ ORTH < "the", "Spring", "Festival" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Spring+Festival",
            MODIFD notmod,
            PHON.ONSET con ] ].

spring_festival_n1 := n_-_c-nm_le &
 [ ORTH < "Spring", "Festival" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Spring+Festival",
            LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

spring_festival_n1_nocap_mal := n_-_c-nm_le_nocap_rbst &
 [ ORTH < "spring", "festival" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Spring+Festival",
            PHON.ONSET con ] ].

spring_festival_n2 := n_-_m-hldy_le &
 [ ORTH < "Spring", "Festival" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Spring+Festival",
            MODIFD notmod,
            PHON.ONSET con ] ].

spring_season_n1 := n_-_mc_le &
 [ ORTH < "spring", "season" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_spring+season_n_1_rel",
            PHON.ONSET con ] ].

squally_a1_mal := av_-_i-vp-adj_le_rbst &
 [ ORTH < "squally" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_squally_a_1_rel",
            PHON.ONSET con ] ].

;; Allow |he squinted his eyes|, and worry later about constraints on NP comp.
squint_v3 := v_np_le &
 [ ORTH < "squint" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_squint_v_1_rel",
            PHON.ONSET con ] ].

stand_v3_locinv_mal := v_np_locinv-mv_le_rbst &
 [ ORTH < "stand" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stand_v_1_rel",
            PHON.ONSET con ] ].

star_wars_n1 := n_-_pn_le &
 [ ORTH < "Star", "Wars" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Star+Wars",
            PHON.ONSET con ] ].

stare_at_v1_mal := v_p_le_rbst &
 [ ORTH < "stare" >,
   SYNSEM [ LKEYS [ --COMPKEY _at_p_sel_rel,
                    KEYREL.PRED "_stare_v_at_rel" ],
            PHON.ONSET con ] ].

startle_surprise_mal := n_-_m-vb_le_rbst &
 [ ORTH < "startle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_surprise_n_1_rel",
            PHON.ONSET con ] ].

state_v1_sbj_mal := v_cp_malsbjnct-fin_le_rbst &
 [ ORTH < "state" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_state_v_to_rel",
            PHON.ONSET con ] ].

stately_a1_mal := av_-_i-vp-adj_le_rbst &
 [ ORTH < "stately" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stately_a_1_rel",
            PHON.ONSET con ] ].

stay_v1_mal := v_np_prd_le_rbst &
 [ ORTH < "stay" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stay_v_1_rel",
            PHON.ONSET con ] ].

stay_home_v1 := v_p-prd_le &
 [ ORTH < "stay" >,
   SYNSEM [ LKEYS [ --COMPKEY _home_a_sel_rel,
                    KEYREL.PRED "_stay_v_home_rel" ],
            PHON.ONSET con ] ].

stay_by_v1 := v_pp_e_le &
 [ ORTH < "stay" >,
   SYNSEM [ LKEYS [ --COMPKEY _by_p_sel_rel,
                    KEYREL.PRED "_stay_v_1_rel" ],
            PHON.ONSET con ] ].

step_into_v1_mal := v_np_pp_le_rbst &
 [ ORTH < "step" >,
   SYNSEM [ LKEYS [ KEYREL.PRED "_step_v_1_rel" ],
            PHON.ONSET con ] ].

stress_for_v1_mal := v_pp_np_le_rbst &
 [ ORTH < "stress" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_stress_v_1_rel" ],
            PHON.ONSET con ] ].

stretch_v1_sp_rbst := v_np*_le &
 [ ORTH < "strech" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stretch_v_1_rel",
            PHON.ONSET con ],
   GENRE robust ].

strong_verb_v1_mal := v_np_adj_le_rbst &
 [ ORTH < "strong" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_strengthen_v_1_rel",
            PHON.ONSET con ] ].

stronger_verb_v1_mal := v_np_adj_le_rbst &
 [ ORTH < "stronger" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_strengthen_v_1_rel",
            PHON.ONSET con ] ].

;; This goes wrong in ranking for |he gave his math students homework|
;; so disable until we get better parse ranking - FIX

students_a1_mal := aj_-_i-cmpd_le_rbst &
 [ ORTH < "students" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_students_a_1_rel",
            PHON.ONSET con ] ].

study_about_v1_mal := v_pp_np_le_rbst &
 [ ORTH < "study" >,
   SYNSEM [ LKEYS [ --COMPKEY _about_p_sel_rel,
                    KEYREL.PRED "_study_v_1_rel" ],
            PHON.ONSET con ] ].

study_of_v1_mal := v_pp_np_le_rbst &
 [ ORTH < "study" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_study_v_1_rel" ],
            PHON.ONSET con ] ].

succeed_v2_mal := v_vp_pp-in_le_rbst &
 [ ORTH < "succeed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_succeed_v_1_rel",
            PHON.ONSET con ] ].

;; |They strong the wall| => |strengthen|
success_succeed_v2_rbst := v_pp_e_le &
 [ ORTH < "success" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_succeed_v_in_rel" ],
            PHON.ONSET con ],
   GENRE robust ].

such_a_a1_rbst := aj_-_i_le &
 [ ORTH < "such", "a" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_such_a_1_rel",
            LOCAL.CAT.HEAD.MOD < [ --SIND [ PNG.PN 3s,
	                           	    DIV - ],
				   LOCAL.CAT.HEAD.--BARE - ] >,
            PHON.ONSET con ],
   GENRE robust ].

such_a_det_mass_rbst := d_-_m-c-a_le_mal &
 [ ORTH < "such", "a" >,
   SYNSEM.LKEYS.KEYREL.PRED _such+a_q_rel ].

such_an_det_mass_rbst := d_-_m-c-an_le_mal &
 [ ORTH < "such", "an" >,
   SYNSEM.LKEYS.KEYREL.PRED _such+a_q_rel ].

;; DPF 2018-03-23 - Tried excluding for |such an embarrassing moment| via 
;; LPERIPH bool, but this is wrong since by default nouns are LPERIPH na,
;; as in |such car|.  So leave for now.
;;
such_a_det_rbst := d_-_sg-nmd_le &
 [ ORTH < "such" >,
   SYNSEM [ LKEYS.KEYREL.PRED _such+a_q_rel,
	    LOCAL.CAT.VAL.SPEC.FIRST [ --SIND.DIV -,
				       LOCAL.CAT.HEAD.--BARE + ],
            PHON.ONSET con ],
   GENRE robust ].

such_an_det_rbst := d_-_sg-nmd-an_le &
 [ ORTH < "such" >,
   SYNSEM [ LKEYS.KEYREL.PRED _such+a_q_rel,
	    LOCAL.CAT.VAL.SPEC.FIRST [ --SIND.DIV -,
				       LOCAL.CAT.HEAD.--BARE + ],
            PHON.ONSET voc ],
   GENRE robust ].

;; such/so much rice
such_deg_so_rbst := av_-_dg-cmp-so_le &
 [ ORTH < "such" >,
   SYNSEM [ LKEYS.KEYREL.PRED _so_x_comp_rel,
            PHON.ONSET con ],
   GENRE robust ].

suffer_from_to_v1_mal := v_pp_e_le_rbst &
 [ ORTH < "suffer" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_suffer_v_from_rel" ],
            PHON.ONSET con ] ].

suggest_v1_mal := v_vp_seq_le_rbst &
 [ ORTH < "suggest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_suggest_v_1_rel",
            PHON.ONSET con ] ].

suggest_v_cp_mal := v_np-cp_fin-inf_le_rbst &
 [ ORTH < "suggest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_suggest_v_to_rel",
            PHON.ONSET con ] ].

;; Allow |it was suggested to watch a movie|, passive only
suggest_pas_v1 := v_np-vp_oeq_le &
 [ ORTH < "suggest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_suggest_v_to_rel",
	    LOCAL.CAT.HEAD.VFORM pas,
            PHON.ONSET con ] ].

suggest_ing_v1_mal := v_vp_bse-ing_le_rbst &
 [ ORTH < "suggest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_suggest_v_1_rel",
            PHON.ONSET con ] ].

suitable_to_for_a1_mal := aj_pp_i_le_rbst &
 [ ORTH < "suitable" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_suitable_a_for_rel" ],
            PHON.ONSET con ] ].

summer_break_n1 := n_-_mc_le &
 [ ORTH < "summer", "break" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_summer+break_n_1_rel",
            PHON.ONSET con ] ].

summer_season_n1 := n_-_mc_le &
 [ ORTH < "summer", "season" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_summer+season_n_1_rel",
            PHON.ONSET con ] ].

sunday_night_nc_n1 := n_-_c-dpt-cap_le &
 [ ORTH < "Sunday", "night" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_Sunday+night_n_1_rel",
            PHON.ONSET con ] ].

sunday_night_pl_def := n_-_c-dpt-df-pl_le &
 [ ORTH < "Sunday", "nights" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_Sunday+night_n_1_rel",
            PHON.ONSET con ] ].

sunday_night_sg_def := n_-_c-dpt-df-sg_le &
 [ ORTH < "Sunday", "night" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_Sunday+night_n_1_rel",
            PHON.ONSET con ] ].

sunglasses_n1_mal := n_-_c-sg_le_rbst &
 [ ORTH < "sunglass" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sunglasses_n_pair_rel",
            PHON.ONSET con ] ].

support_v1_mal := v_-_le_rbst &
 [ ORTH < "support" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_support_v_1_rel",
            PHON.ONSET con ] ].

suppose_v1_mal := v_np_cp_le_rbst &
 [ ORTH < "suppose" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_suppose_v_1_rel",
            PHON.ONSET con ] ].

supposed_a2_rbst := aj_vp_i-seq-nmd_le &
 [ ORTH < "suppose" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_supposed_a_1_rel",
            PHON.ONSET con ],
   GENRE robust ].

;; Exclude "it" subject
sure_a1 := aj_cp_i_le &
 [ ORTH < "sure" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sure_a_of_rel",
	    LOCAL [ CAT.HEAD.--IDIOMPART +,
		    CONT.HOOK.XARG.PNG.GEN animate ],
            PHON.ONSET con ] ].

sure_a2 := aj_pp_i_le &
 [ ORTH < "sure" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_sure_a_of_rel" ],
	    LOCAL.CAT.HEAD.--IDIOMPART +,
            PHON.ONSET con ] ].

sure_a3 := aj_vp_i-ssr_le &
 [ ORTH < "sure" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sure_a_of_rel",
	    LOCAL.CAT.HEAD.--IDIOMPART +,
            PHON.ONSET con ] ].

;; |it is sure that we will win|
sure_a4_mal := aj_pp-cp_i-it_le_rbst &
 [ ORTH < "sure" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sure_a_1_rel",
	    LOCAL.CAT.HEAD.--IDIOMPART +,
            PHON.ONSET con ] ].

surely_adv2_mal := av_-_i-pr-aux_le_rbst &
 [ ORTH < "surely" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sure_a_1_rel",
            PHON.ONSET con ] ].

surly_a1_mal := av_-_i-vp-adj_le_rbst &
 [ ORTH < "surly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_surly_a_1_rel",
            PHON.ONSET con ] ].

;; |The town is surrounding| => |surrounded|
;; Allow nonrobust |clear rivers surrounding|
surround_v1_mal := v_-_le_pas_rbst &
 [ ORTH < "surround" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_surround_v_1_rel",
            --SIND.E.TENSE real_tense,
            PHON.ONSET con ] ].

surrounding_a1 := aj_-_i-prd_le &
 [ ORTH < "surrounding" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_surrounding_a_1_rel",
            LOCAL.CAT.HEAD.TAM.TENSE untensed,
            PHON.ONSET con ] ].

surroundings_n1_mal := n_-_c-sg_le_rbst &
 [ ORTH < "surrounding" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_surroundings_n_1_rel",
            PHON.ONSET con ] ].

tackle_with_v1_mal := v_pp_np_le_rbst &
 [ ORTH < "tackle" >,
   SYNSEM [ LKEYS [ --COMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_tackle_v_1_rel" ],
            PHON.ONSET con ] ].

;; Restrict to v-or-p prdp complement, so we can detent |they took it light(ly)|
take_v10 := v_np-prd_oeq_le &
 [ ORTH < "take" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_take_v_1_rel",
            LOCAL.CAT.VAL.COMPS < [], [ LOCAL.CAT.HEAD v_or_p ] >,
            PHON.ONSET con ] ].

take_adv_rbst := v_np-prd_oeq_le &
 [ ORTH < "take" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_take_v_1_rel",
            LOCAL.CAT.VAL.COMPS < [], 
				  [ LOCAL.CAT [ HEAD adj,
						VAL.SPR.FIRST.--MIN 
						     very_deg_rel ] ] >,
	    PHON.ONSET con ],
   GENRE robust ].

;; But "we took it as a sign of ..." is fine.
#|
take_for_as_v1_mal := v_np-pp_e_le_rbst &
 [ ORTH < "take" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _as_p_sel_rel,
                    KEYREL.PRED "_take_v_for_rel" ],
            PHON.ONSET con ] ].
|#
take_place_v1_rbst := v_nb-np_le_mal &
 [ ORTH < "take" >,
   SYNSEM [ LKEYS [ --COMPKEY _place_n_1_rel,
   	            KEYREL.PRED "_take_v_place_rel" ],
            PHON.ONSET con ],
   GENRE robust ].

#|
talk_idm_n1 := n_-_c-idm_le &
 [ ORTH < "talk" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_talk_n_1_rel",
            PHON.ONSET con ] ].
|#

;; Misspell "talk to/with" as "take to/with"
talk_take_v1_sp_rbst := v_pp_le &
 [ ORTH < "take" >,
   ALTS.PASSIVE -,
   SYNSEM [ LKEYS [ --COMPKEY to_or_with_p_rel,
                    KEYREL.PRED "_talk_v_1_rel" ],
            PHON.ONSET con ],
   GENRE robust ].

;; The GENRE robust is supplied by the selected-for mal-prep
take_x_of_in_v1_mal := v_np-pp_e-idm_le &
 [ ORTH < "take" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _in_p_mal-sel_rel,
                    KEYREL.PRED "_take_v_in-i_rel" ],
            PHON.ONSET con ] ].

take_x_of_on_v1_mal := v_np-pp_e-idm_le &
 [ ORTH < "take" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _on_p_mal-sel_rel,
                    KEYREL.PRED "_take_v_in-i_rel" ],
            PHON.ONSET con ] ].

;; |take care the cat|
take_x_of_v1_i_mal := v_np-np_idm_le_rbst &
 [ ORTH < "take" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_take_v_of-mal-i_rel",
            PHON.ONSET con ] ].

taller_a1_mal := aj_-_i-cmp_le_rbst &
 [ ORTH < "taller" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tall_a_1_rel",
            PHON.ONSET con ] ].

taste_tasty_a1_rbst := aj_-_i_le &
 [ ORTH < "taste" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tasty_a_1_rel",
            LOCAL.CAT.HEAD [ --SBRD -,
	                     --JROB + ],
            PHON.ONSET con ],
   GENRE robust ].

tax_free_a1 := aj_-_i-prd_le &
 [ ORTH < "tax", "-", "free" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tax+free_a_1_rel",
            PHON.ONSET con ] ].

tax_free_a2 := aj_-_i-prd_le &
 [ ORTH < "tax", "free" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tax+free_a_1_rel",
            PHON.ONSET con ] ].

teachers_a1_mal := aj_-_i-cmpd_le_rbst &
 [ ORTH < "teachers" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_teachers_a_1_rel",
            PHON.ONSET con ] ].

;; Missing |to| for raising: |they tend win.|
tend_v1_mal := v_vp_ssr-nimp_le_rbst &
 [ ORTH < "tend" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tend_v_1_rel",
            PHON.ONSET con ] ].

tell_v2_mal := v_vp_seq_le_rbst &
 [ ORTH < "tell" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tell_v_1_rel",
            PHON.ONSET con ] ].

tell_v3_mal := v_np-vp_bse_le_rbst &
 [ ORTH < "tell" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tell_v_1_rel",
            PHON.ONSET con ] ].

tell_v4_mal := v_-_le_rbst &
 [ ORTH < "tell" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tell_v_1_rel",
            PHON.ONSET con ] ].

tell_v5_mal := v_cp_le_rbst &
 [ ORTH < "tell" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tell_v_1_rel",
            LOCAL.CAT.HEAD.VFORM fin,
            PHON.ONSET con ] ].

test_on_v1_mal := v_pp_np_le_rbst &
 [ ORTH < "test" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_test_v_1_rel" ],
            PHON.ONSET con ] ].

testify_v1_mal := v_np_cp_le_rbst &
 [ ORTH < "testify" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_testify_v_1_rel",
            PHON.ONSET con ] ].

testing_n1 := n_-_m_le &
 [ ORTH < "testing" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_testing_n_1_rel",
            PHON.ONSET con ] ].

; |nothing is more important than read this book|
than_p8_mal := p_vp_ptcl-bse_le_rbst &
 [ ORTH < "than" >,
   SYNSEM [ LKEYS.KEYREL.PRED _than_p_compar_rel,
            PHON.ONSET con ] ].

; Add hack for complex comparatives like "Kim is easier to admire than browne"
; But constrain to MOD..HEAD adj, to avoid |Kim arrives than Browne|
;
than_p9 := p_np_i-nnm_le &
 [ ORTH < "than" >,
   SYNSEM [ LOCAL.CAT [ HEAD.MOD < [ LOCAL [ CAT.HEAD adj,
					     CONT.HOOK.XARG ref-ind ] ] >,
			VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--MALCASE - ],
	    LKEYS.KEYREL.PRED _than_p_ind_rel,
            PHON.ONSET con ] ].

;; For e.g. "Disney World will be open longer this year than it was last year."
than_p10 := p_cp_i_le &
 [ ORTH < "than" >,
   SYNSEM [ LKEYS.KEYREL.PRED _than_p_ind_rel,
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--CXELLIP -,
            PHON.ONSET con ] ].


;; 2018-03-30 - Split into two, so can restrict the verbal complement to avoid
;; expletive subject: |it is better to laugh than crying|
than_p1 := p_prd_ptcl-ngap_le &
 [ ORTH < "than" >,
   SYNSEM [ LKEYS.KEYREL.PRED _than_p_compar_rel,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD a_or_p,
            PHON.ONSET con ] ].

;; Exclude for |better to laugh than weeping|
than_p1_nc := p_np_ptcl-ngap_le &
 [ ORTH < "than" >,
   SYNSEM [ LKEYS.KEYREL.PRED _than_p_compar_rel,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD basic_noun,
            PHON.ONSET con ] ].

than_vp_p1 := p_prd_ptcl-ngap_le &
 [ ORTH < "than" >,
   SYNSEM [ LKEYS.KEYREL.PRED _than_p_compar_rel,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL [ CAT.HEAD verb,
	    	  			      CONT.HOOK.INDEX.E.ASPECT.PROGR -],
            PHON.ONSET con ] ].

;; |it is better to laugh than crying|
;; But we still want |it is better than crying|, so add NORM no_rel, and
;; constrain aj_pp to norm_rel.
;;
than_vp_p1_rbst := p_prd_ptcl-ngap_le &
 [ ORTH < "than" >,
   SYNSEM [ LKEYS.KEYREL.PRED _than_p_compar_rel,
            LOCAL.CAT 
	       [ HEAD.MINORS.NORM no_rel,
		 VAL.COMPS.FIRST.LOCAL [ CAT.HEAD verb,
					 CONT.HOOK.INDEX.E.ASPECT.PROGR + ] ],
	    PHON.ONSET con ],
   GENRE robust ].

;; Prevent imperative
thank_v1 := v_np_le &
 [ ORTH < "thank" >,
   SYNSEM [ LOCAL.CAT.VAL.SUBJ.FIRST expressed_synsem,
	    LKEYS.KEYREL.PRED "_thank_v_1_rel",
            PHON.ONSET con ] ].

thanks_n1_mal := n_-_c-sg-nonnom_le_rbst &
 [ ORTH < "thank" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_thanks_n_1_rel",
            PHON.ONSET con ] ].

that_det_rbst := det_pl_le_mal &
 [ ORTH < "that" >,
   SYNSEM [ LKEYS.KEYREL.PRED _those_q_dem_rel,
	    LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CAT.HEAD.--MALTHAT +,
	    PHON.ONSET con ] ].

; |guy for that we waited|
that_rel_rbst := n_-_pr-rel-what_le &
 [ ORTH < "that" >,
   SYNSEM [ LOCAL.CAT.HEAD [ CASE obliq,
			     --MALRELPRO + ],
   	    PHON.ONSET con ],
   GENRE robust ].

the_1_sp_rbst := d_-_the_le &
 [ ORTH < "hte" >,
   SYNSEM [ LKEYS.KEYREL.PRED _the_q_rel,
            PHON.ONSET con ],
   GENRE robust ].

the_2_sp_rbst := d_-_the_le &
 [ ORTH < "teh" >,
   SYNSEM [ LKEYS.KEYREL.PRED _the_q_rel,
            PHON.ONSET con ],
   GENRE robust ].

the_april_det_mal := d_-_month_le_rbst &
 [ ORTH < "the", "April" >,
   SYNSEM [ LKEYS.ALTKEYREL.CARG "Apr",
            PHON.ONSET voc ] ].

the_august_det_mal := d_-_month_le_rbst &
 [ ORTH < "the", "August" >,
   SYNSEM [ LKEYS.ALTKEYREL.CARG "Aug",
            PHON.ONSET voc ] ].

the_december_det_mal := d_-_month_le_rbst &
 [ ORTH < "the", "December" >,
   SYNSEM [ LKEYS.ALTKEYREL.CARG "Dec",
            PHON.ONSET con ] ].

the_february_det_mal := d_-_month_le_rbst &
 [ ORTH < "the", "February" >,
   SYNSEM [ LKEYS.ALTKEYREL.CARG "Feb",
            PHON.ONSET con ] ].

the_january_det_mal := d_-_month_le_rbst &
 [ ORTH < "the", "January" >,
   SYNSEM [ LKEYS.ALTKEYREL.CARG "Jan",
            PHON.ONSET con ] ].

the_july_det_mal := d_-_month_le_rbst &
 [ ORTH < "the", "July" >,
   SYNSEM [ LKEYS.ALTKEYREL.CARG "Jul",
            PHON.ONSET con ] ].

the_june_det_mal := d_-_month_le_rbst &
 [ ORTH < "the", "June" >,
   SYNSEM [ LKEYS.ALTKEYREL.CARG "Jun",
            PHON.ONSET con ] ].

the_march_det_mal := d_-_month_le_rbst &
 [ ORTH < "the", "March" >,
   SYNSEM [ LKEYS.ALTKEYREL.CARG "Mar",
            PHON.ONSET con ] ].

the_may_det_mal := d_-_month_le_rbst &
 [ ORTH < "the", "May" >,
   SYNSEM [ LKEYS.ALTKEYREL.CARG "May",
            PHON.ONSET con ] ].

the_november_det_mal := d_-_month_le_rbst &
 [ ORTH < "the", "November" >,
   SYNSEM [ LKEYS.ALTKEYREL.CARG "Nov",
            PHON.ONSET con ] ].

the_october_det_mal := d_-_month_le_rbst &
 [ ORTH < "the", "October" >,
   SYNSEM [ LKEYS.ALTKEYREL.CARG "Oct",
            PHON.ONSET voc ] ].

the_september_det_mal := d_-_month_le_rbst &
 [ ORTH < "the", "September" >,
   SYNSEM [ LKEYS.ALTKEYREL.CARG "Sep",
            PHON.ONSET con ] ].

;; Tried this for mass nouns not right-modified: |the society|
;; but it is too aggressive, e.g. applying to |the birthday cake| and lots more.
;; So rethink
#|
the_mass_1_rbst := d_-_the_le_mal &
 [ ORTH < "the" >,
   SYNSEM [ LOCAL.CAT.VAL.SPEC < [ LOCAL.AGR [ PNG.PN 3s,
					       DIV + ],
				   LEX +,
				   --SIND nonconj_ref-ind ] >,
	    LKEYS.KEYREL.PRED udef_q_rel,
            PHON.ONSET con ] ].
|#

;; DPF 2020-01-10 - Exclude this one, since it wrongly comes in with pre-mod
;; nouns, as in |the most attractive point|.
#|
the_most_det_nondiv_mal := d_-_prt-plm_le_rbst &
 [ ORTH < "the", "most" >,
   SYNSEM [ LKEYS.KEYREL.PRED _the+most_q_rel,
            PHON.ONSET con ] ].
|#

;; Block |The Alfred|
;; 2021-06-16 - But we want "the English he spoke" and "the Paris we remember",
;; so relax this constraint
#|
the_1 := d_-_the_le &
 [ ORTH < "the" >,
   SYNSEM [ LKEYS.KEYREL.PRED _the_q_rel,
            LOCAL.CAT.VAL.SPEC.FIRST.--MIN non_proper_rel,
            PHON.ONSET con ] ].
|#

the_prop_pl_1 := d_-_the_le &
 [ ORTH < "the" >,
   SYNSEM [ LKEYS.KEYREL.PRED _the_q_rel,
            LOCAL.CAT.VAL.SPEC.FIRST [ --MIN named_rel,
	                               LOCAL.AGR.PNG.PN 3p ],
            PHON.ONSET con ] ].

;; DPF 2020-06-05 - Maybe we don't need this, but note that its presence lets
;; the SEM-I include subtypes of abstract_q_rel. 
#|
d_-_the_le_mal := d_-_the_lexent &
  [ ORTH < "the" >,
    GENRE robust ].
|#

; For proper names
;; DPF 2017-10-04 - Restrict SPEC to LPERIPH na_or_- to exclude city-state, as
;; in |the Pope, John|
;; DPF 2019-03-26 - Block use with generic proper names, to avoid rbst |the Cat|
;;
the_prop_1_rbst := d_-_the_le_mal &
 [ ORTH < "the" >,
   SYNSEM [ LOCAL.CAT [ HEAD.MINORS.ALTMIN _the_q_prop_or_no_rel,
			VAL.SPEC < [ --MIN named_np_rel,
				     LOCAL [ AGR.PNG.PN 3s,
				             CAT.HEAD.--GENPROP - ],
				     MODIFD.LPERIPH na_or_-,
				     --SIND nonconj_ref-ind ] > ],
	    LKEYS.KEYREL.PRED proper_q_rel,
            PHON.ONSET con ] ].

;; For |the Glump| with generic proper, where we don't exclude "the"
;;
the_prop_1_gen := d_-_the_prop_le &
 [ ORTH < "the" >,
   SYNSEM [ LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CAT.HEAD.--GENPROP +,
	    PHON.ONSET con ] ].

the_chinese_new_year := n_-_m-hldy_le &
 [ ORTH < "the", "Chinese", "New", "Year" >,
   SYNSEM [ LKEYS.KEYREL.CARG "the+Chinese+New+Year",
            MODIFD notmod,
            PHON.ONSET con ] ].

the_earth_n1 := n_-_pn_le &
 [ ORTH < "the", "Earth" >,
   SYNSEM [ LKEYS.KEYREL.CARG "the+Earth",
            PHON.ONSET con ] ].

the_jewish_new_year := n_-_m-hldy_le &
 [ ORTH < "the", "Jewish", "New", "Year" >,
   SYNSEM [ LKEYS.KEYREL.CARG "the+Jewish+New+Year",
            MODIFD notmod,
            PHON.ONSET con ] ].

the_mad_hatter_n1 := n_-_pn-msc_le &
 [ ORTH < "the", "Mad", "Hatter" >,
   SYNSEM [ LKEYS.KEYREL.CARG "the+Mad+Hatter",
            PHON.ONSET con ] ].

the_macintosh_n1 := n_-_pn-neut_le &
 [ ORTH < "the", "Macintosh" >,
   SYNSEM [ LKEYS.KEYREL.CARG "the+Macintosh",
            PHON.ONSET con ] ].

the_march_hare_n1 := n_-_pn-msc_le &
 [ ORTH < "the", "March", "Hare" >,
   SYNSEM [ LKEYS.KEYREL.CARG "the+March+Hare",
            PHON.ONSET con ] ].

;; DPF 2020-04-06 - Aim for similar semantics for |This is most important to us|
;; and (awkward but seen) |This is the most important to us|
;; Restrict to predicative adjectives
;;
the_most_aj_deg := av_-_dg-sup_le &
 [ ORTH < "the", "most" >,
   SYNSEM [ LOCAL.CAT.VAL.SPEC < [ LOCAL.CAT.HEAD adj & [ PRD + ] ] >,
   	    LKEYS.KEYREL.PRED superl_rel,
            PHON.ONSET con ] ].

the_least_aj_deg := av_-_dg-sup-lst_le &
 [ ORTH < "the", "least" >,
   SYNSEM [ LOCAL.CAT.VAL.SPEC < [ LOCAL.CAT.HEAD adj & [ PRD + ] ] >,
   	    LKEYS.KEYREL.PRED "_least_x_deg_rel",
            PHON.ONSET con ] ].

the_next_thing_i_knew_adv1 := av_-_s-cp-pr_le &
 [ ORTH < "the", "next", "thing", "I", "knew" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_the+next+thing+I+knew_a_1_rel",
            PHON.ONSET con ] ].

the_next_thing_he_knew_adv1 := av_-_s-cp-pr_le &
 [ ORTH < "the", "next", "thing", "he", "knew" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_the+next+thing+he+knew_a_1_rel",
            PHON.ONSET con ] ].

the_next_thing_she_knew_adv1 := av_-_s-cp-pr_le &
 [ ORTH < "the", "next", "thing", "she", "knew" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_the+next+thing+she+knew_a_1_rel",
            PHON.ONSET con ] ].

the_next_thing_they_knew_adv1 := av_-_s-cp-pr_le &
 [ ORTH < "the", "next", "thing", "they", "knew" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_the+next+thing+they+knew_a_1_rel",
            PHON.ONSET con ] ].

the_next_thing_we_knew_adv1 := av_-_s-cp-pr_le &
 [ ORTH < "the", "next", "thing", "we", "knew" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_the+next+thing+we+knew_a_1_rel",
            PHON.ONSET con ] ].

;; |try their best to succeed|
their_best_adv1 := av_-_i-vp-po_le &
 [ ORTH < "their", "best" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_their+best_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

;; Avoid misanalysis of |got there taking the bus|
;;
their_rbst := d_-_poss-their_le &
 [ ORTH < "there" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT [ HEAD.--POSSRBST +,
            	        VAL.SPEC.FIRST.LOCAL [ CAT.HEAD noun,
					       CONT.HOOK.INDEX.SORT entity ] ]],
   GENRE robust ].

their_contr_rbst := d_-_poss-their_le &
 [ ORTH < "they", "’re" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT [ HEAD.--POSSRBST +,
                        VAL.SPEC.FIRST.LOCAL [ CAT.HEAD noun,
					       CONT.HOOK.INDEX.SORT entity ] ]],
   GENRE robust ].

their_they_rbst := d_-_poss-their_le &
 [ ORTH < "they" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT [ HEAD.--POSSRBST +,
			VAL.SPEC.FIRST.LOCAL.CAT.HEAD noun ] ],
   GENRE robust ].

their_themselfs_rbst := d_-_poss-their_le &
 [ ORTH < "themself", "’s" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT [ HEAD.--POSSRBST +,
			VAL.SPEC.FIRST.LOCAL.CAT.HEAD noun ] ],
   GENRE robust ].

their_themselves_rbst := d_-_poss-their_le &
 [ ORTH < "themselves", "’s" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT [ HEAD.--POSSRBST +,
			VAL.SPEC.FIRST.LOCAL.CAT.HEAD noun ] ],
   GENRE robust ].

their_themselves_2_rbst := d_-_poss-their_le &
 [ ORTH < "themselve", "’s" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT [ HEAD.--POSSRBST +,
			VAL.SPEC.FIRST.LOCAL.CAT.HEAD noun ] ],
   GENRE robust ].

them_rbst := n_-_pr-they_le &
 [ ORTH < "them" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.HEAD.--MALCASE + ],
   GENRE robust ].

them_stutter_7_mal := n_-_pr-them_le_rbst &
 [ ORTH < "them⸴", "them" >,
   SYNSEM.PHON.ONSET con ].

them_stutter_8_mal := n_-_pr-them_le_rbst &
 [ ORTH < "them.~", "them" >,
   SYNSEM.PHON.ONSET con ].

then_adv4_mal := av_-_i-pr-aux_le_rbst &
 [ ORTH < "then" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_then_a_1_rel",
            PHON.ONSET con ] ].

there_are_adv1_rbst := av_-_s-cp-pr_le &
 [ ORTH < "there", "are" >,
   SYNSEM [ LOCAL.CAT.HEAD.MOD.FIRST.LOCAL.CAT.HEAD verb,
	    LKEYS.KEYREL.PRED "_there+are_a_1_rel",
            PHON.ONSET con ],
   GENRE robust ].

there_expl_rbst := n_-_pr-there-x_le &
 [ ORTH < "their" >,
   SYNSEM.PHON.ONSET con,
   GENRE robust ].

there_is_adv1_rbst := av_-_s-cp-pr_le &
 [ ORTH < "there", "is" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_there+is_a_1_rel",
            LOCAL.CAT.HEAD.MOD.FIRST [ LOCAL.CAT.HEAD verb & [ VFORM fin ],
	                               MODIFD notmod_or_rmod ],
            PHON.ONSET con ],
   GENRE robust ].

there_is_cx_adv1_rbst := av_-_s-cp-pr_le &
 [ ORTH < "there", "’s" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_there+is_a_1_rel",
            LOCAL.CAT.HEAD.MOD.FIRST [ LOCAL.CAT.HEAD verb & [ VFORM fin ],
	                               MODIFD notmod_or_rmod ],
            PHON.ONSET con ],
   GENRE robust ].

;; DPF 2018-03-07 - Block as fronted npadv in |their [dad gives them salad]| 
;; (with robust |dad|).
;;
there_nom_rbst := n_-_ad-acc_le &
 [ ORTH < "their" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED _there_a_1_rel ],
	    LOCAL [ CAT.HEAD.--MALCASE +,
		    CTXT.ACTIVATED - ],
            PHON.ONSET con ],
   GENRE robust ].

;; |they| for expletive |it|
#|
they_it_expl_rbst := n_-_pr-it-x_le &
 [ ORTH < "they" >,
   SYNSEM.PHON.ONSET con,
   GENRE robust ].
|#

they_rbst := n_-_pr-them_le &
 [ ORTH < "they" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.HEAD.--MALCASE + ],
   GENRE robust ].

they_their_rbst := n_-_pr-they_le &
 [ ORTH < "their" >,
   SYNSEM.PHON.ONSET con,
   GENRE robust ].

they_themself_rbst := n_-_pr-they_le &
 [ ORTH < "themself" >,
   SYNSEM.PHON.ONSET con,
   GENRE robust ].

they_themselves := n_-_pr-they_le &
 [ ORTH < "they", "themselves" >,
   SYNSEM.PHON.ONSET con ].

they_themselves_rbst := n_-_pr-they_le &
 [ ORTH < "themselves" >,
   SYNSEM.PHON.ONSET con,
   GENRE robust ].

think_about_v1_mal := v_np_pp_le_rbst &
 [ ORTH < "think" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_think_v_about_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.--MIN nonpro_rel,
            PHON.ONSET con ] ].

;; |think carefully|
think_adv_v1 := v_adv_le &
 [ ORTH < "think" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_think_v_1_rel",
            PHON.ONSET con ] ].

;; DPF 2017-10-03 - Make this robust, so we can signal missing copula in
;; |she thinks softball fun|
think_np_prdp_rbst := v_np-prd_oeq_le &
 [ ORTH < "think" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_think_v_1_rel",
            PHON.ONSET con ],
   GENRE robust ].

think_v5_mal := v_np-vp_sor_le_rbst &
 [ ORTH < "think" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_think_v_1_rel",
            PHON.ONSET con ] ].

;; DPF 2017-09-26 - Insist on comma for S-initial |last|, by adding good entry
;; with the comma present, and a robust one that prevents comma attachment.
;;
third_adv3 := av_-_s-cp-pr_le &
 [ ORTH < "third", "," >,
   SYNSEM [ LKEYS.KEYREL.PRED "_third_a_1_rel",
            PHON.ONSET con ] ].

third_adv_rbst := av_-_s-cp-mc-pr_le &
 [ ORTH < "third" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_third_a_1_rel",
            LOCAL.CAT.HEAD.--CMA -,
            PHON.ONSET con ],
   GENRE robust ].

; |3th May|
third_dom_euro_sp_mal := n_-_pn-dom-euro_le_rbst &
 [ ORTH < "3th" >,
   SYNSEM [ LKEYS.KEYREL.CARG "3",
            PHON.ONSET con ] ].

third_dom_euro_sp2_mal := n_-_pn-dom-euro_le_rbst &
 [ ORTH < "3ed" >,
   SYNSEM [ LKEYS.KEYREL.CARG "3",
            PHON.ONSET con ] ].

third_dom_sp_rbst := n_-_pn-dom-ord_le &
 [ ORTH < "3th" >,
   SYNSEM [ LKEYS.KEYREL.CARG "3",
            PHON.ONSET con ],
   GENRE robust ].

third_dom_sp2_rbst := n_-_pn-dom-ord_le &
 [ ORTH < "3ed" >,
   SYNSEM [ LKEYS.KEYREL.CARG "3",
            PHON.ONSET con ],
   GENRE robust ].

third_of_all_rbst := av_-_s-cp-mc-pr_le &
 [ ORTH < "third", "of", "all" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_third+of+all_a_1_rel",
            PHON.ONSET con ],
   GENRE robust ].

third_time_n1_rbst := n_-_c-cpd_le &
 [ ORTH < "third", "time" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_third+time_n_1_rel",
            PHON.ONSET con ],
   GENRE robust ].

this_det_rbst := det_pl_le_mal &
 [ ORTH < "this" >,
   SYNSEM [ LKEYS.KEYREL.PRED _these_q_dem_rel,
	    PHON.ONSET con ] ].

thorsens_n1 := n_-_pn-pl-def_le &
 [ ORTH < "Thorsens" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Thorsen",
            PHON.ONSET con ] ].

though_subord_past := p_cp_s-past_le &
 [ ORTH < "though" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_though_p_1_rel",
            PHON.ONSET con ] ].

though_subord_mal := p_cp_s_le_rbst &
 [ ORTH < "though" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_though_p_1_rel",
            PHON.ONSET con ] ].

though_subord_2_mal := p_cp_s-tns_le_rbst &
 [ ORTH < "though" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_though_p_1_rel",
            PHON.ONSET con ] ].

thousands_n2_mal := n_np_c_le_rbst &
 [ ORTH < "thousands" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_thousands_n_1_rel",
            LOCAL.AGR.PNG.PN 3p,
            PHON.ONSET con ] ].

thousands_rbst := aj_-_i-crd-thd_le &
 [ ORTH < "thousands" >,
   SYNSEM [ LKEYS.ALTKEYREL.CARG "1000",
            PHON.ONSET con ],
   GENRE robust ].

;; Add this as hack to get gerund for |the throwing in|
throw_dir_v1 := v_pp_dir_le &
 [ ORTH < "throw" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_throw_v_1_rel",
            PHON.ONSET con ] ].

thru_through_rbst := p_np_i_le &
 [ ORTH < "thru" >,
   SYNSEM [ LKEYS.KEYREL.PRED _through_p_rel,
            PHON.ONSET con ],
   GENRE robust ].

thru_through_adv_rbst := pp_-_i_le &
 [ ORTH < "thru" >,
   SYNSEM [ LKEYS.KEYREL.PRED _through_p_rel,
            PHON.ONSET con ],
   GENRE robust ].

thru_through_prtcl_rbst := p_np_ptcl_le &
 [ ORTH < "thru" >,
   SYNSEM [ LKEYS.KEYREL.PRED _through_p_sel_rel,
            PHON.ONSET con ],
   GENRE robust ].

Thursday_night_n1 := n_-_c-dpt-cap_le &
 [ ORTH < "Thursday", "night" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_Thursday+night_n_1_rel",
            PHON.ONSET con ] ].

;; DPF 2018-09-10 - Spurious topicalization construction as in
;; |there are many people admire Kim.|
;;
tidings_n1_mal := n_-_c-sg_le_rbst &
 [ ORTH < "tiding" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tidings_n_1_rel",
            PHON.ONSET con ] ].

tigers := n_-_c-nm-pl_le &
 [ ORTH < "Tiger" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Tigers",
            PHON.ONSET con ] ].

tigers_n2 := n_-_c-nm_le &
 [ ORTH < "Tigers" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Tigers",
            LOCAL.AGR.PNG.PN 3s,
            PHON.ONSET con ] ].

tights_n1_mal := n_-_c-sg_le_rbst &
 [ ORTH < "tight" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tights_n_1_rel",
            PHON.ONSET con ] ].

;; Deprecate use of "till" as nonformal
#|
till_cp_p1_mal := p_cp_s-notop_le_rbst &
 [ ORTH < "till" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_until_x_h_rel",
            PHON.ONSET con ] ].

till_cp_p2_mal := p_cp_s-notop_le_rbst &
 [ ORTH < "til" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_until_x_h_rel",
            PHON.ONSET con ] ].

till_cp_p3_mal := p_cp_s-notop_le_rbst &
 [ ORTH < "'til" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_until_x_h_rel",
            PHON.ONSET con ] ].
|#

till_cp_p1_mal := p_cp_s-notop_le_nf_rbst &
 [ ORTH < "till" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_until_x_h_rel",
            PHON.ONSET con ] ].

till_cp_p2_mal := p_cp_s-notop_le_nf_rbst &
 [ ORTH < "til" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_until_x_h_rel",
            PHON.ONSET con ] ].

till_cp_p3_mal := p_cp_s-notop_le_nf_rbst &
 [ ORTH < "'til" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_until_x_h_rel",
            PHON.ONSET con ] ].

timely_a1_mal := av_-_i-vp-adj_le_rbst &
 [ ORTH < "timely" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_timely_a_1_rel",
            PHON.ONSET con ] ].

tom_n1_nocap_mal := n_-_pn_le_nocap_rbst &
 [ ORTH < "Tom" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Tom",
            PHON.ONSET con ] ].

to_begin_adv1 := av_-_s-cp-mc-pr_le &
 [ ORTH < "to", "begin" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_to+begin_a_1_rel",
            PHON.ONSET con ] ].

to_bed_adv := pp_-_i_le &
 [ ORTH < "to", "bed" >,
   SYNSEM [ LKEYS.KEYREL.PRED _to+bed_p_rel,
            PHON.ONSET con ] ].

;; Propagate --MAL3SG from complement, so we can block infinitival relative with
;; mal-intrans verb as in |made a poster [to bring]|
to_c_prop := cm_vp_to_le &
 [ ORTH < "to" >,
   SYNSEM [ LOCAL.CAT [ HEAD.--MAL3SG #mal3sg,
                        VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--MAL3SG #mal3sg ],   
	    PHON.ONSET con ] ].

to_c_prop_fin_mal := cm_vp_to-fin_le_rbst &
 [ ORTH < "to" >,
   SYNSEM.PHON.ONSET con ].

;; DPF 2017-09-23 - Split into two, so we can exclude pre-mod of VP, as in
;; spurious analysis of |she had to eat before she could|
;; DPF 2018-09-10 - Also prevent modif of copula, so we can catch
;; |*Kim is difficult to admire her|
;; Note that this loses us |it would be worth it to see her smile| since
;; to-VP only modifies VP, not AP.
;; DPF 2019-11-10 - Re 2018-09-10: Also loses |Kim is here to invite us|.  FIX
;; 2020-05-07 - Prevent robust intransitive compl, as in |made toys [to bring]|
;; via --MAL3SG hack.
;;
to_subord := p_vp_bse_le &
 [ ORTH < "to" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_in+order+to_x_rel",
	    LOCAL.CAT [ POSTHD +,
	                VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--MAL3SG - ],
            PHON.ONSET con ] ].

to_subord_premod := p_vp_bse_le &
 [ ORTH < "to" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_in+order+to_x_rel",
	    LOCAL.CAT [ POSTHD -,
			HEAD.MOD.FIRST.LOCAL.CAT.VAL.SUBJ *anti_list* ],
            PHON.ONSET con ] ].

;; "am writing to inviting you"
;; 2022-04-23 - Block dtr with robust verb as in "to rising consumption"
;; with rise_raise_v2_rbst.
to_subord_prp_rbst := p_vp_ing_le_mal &
 [ ORTH < "to" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_in+order+to_x_rel",
	    LOCAL.CAT [ POSTHD +,
			VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--VGERUND + ],
            PHON.ONSET con ] ].

to_heart_adv1 := av_-_i-vp-po_le &
 [ ORTH < "to", "heart" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_to+heart_a_1_rel",
            PHON.ONSET con ] ].

to_heart_adv_rbst := av_-_i-vp-po_le &
 [ ORTH < "to", "the", "heart" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_to+the+heart_a_1_rel",
            PHON.ONSET con ],
   GENRE robust ].

to_home_pp_rbst := pp_-_i_le &
 [ ORTH < "to", "home" >,
   SYNSEM [ LKEYS.KEYREL.PRED _to+home_p_rel,
            PHON.ONSET con ],
   GENRE robust ].

too_deg_mal := av_-_dg-att_le_rbst &
 [ ORTH < "too" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_too_x_deg_rel",
            LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CAT.HEAD.--NOUNADJ -,
            PHON.ONSET con ] ].
  
today_adj1_rbst := aj_-_i-att_le &
 [ ORTH < "today" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_today_a_1_rel",
	    LOCAL.CAT.HEAD.MOD < [ --MIN non_proper_rel,
				   LOCAL.CAT.VAL.SPR.FIRST expressed_synsem ] >,
            PHON.ONSET con ],
   GENRE robust ].

today_adv1_mal := av_-_i-vp-pr_le_rbst &
 [ ORTH < "today" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_today_a_1_rel",
            PHON.ONSET con ] ].

together_adv1_mal := av_-_i-vp-pr_le_rbst &
 [ ORTH < "together" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_together_a_1_rel",
            PHON.ONSET con ] ].

;; DPF 2019-09-23 - OPT + prevents |tomorrow - great| with x-to-y hyphen
;;
tomorrow_adj1_rbst := aj_-_i-att_le &
 [ ORTH < "tomorrow" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tomorrow_a_1_rel",
	    LOCAL.CAT.HEAD.MOD < [ --MIN non_proper_rel,
				   LOCAL.CAT.VAL.SPR.FIRST expressed_synsem ] >,
	    MODIFD.LPERIPH +,
            PHON.ONSET con,
	    OPT + ],
   GENRE robust ].

;; DPF 2017-09-07 - See comments for last_det redefinition
;;
tomorrow_det := d_-_proxday_le &
 [ ORTH < "tomorrow" >,
   SYNSEM [ LOCAL.CONT.HOOK.XARG basic_non_expl-ind & [ E.TENSE no_tense ],
   	    LKEYS.ALTKEYREL.PRED _tomorrow_a_1_rel,
            PHON.ONSET con ] ].

tomorrow_det_emod := d_-_proxday_le &
 [ ORTH < "tomorrow" >,
   SYNSEM [ LOCAL.CONT.HOOK.XARG.E.TENSE nonpast,
   	    LKEYS.ALTKEYREL.PRED _tomorrow_a_1_rel,
            PHON.ONSET con ] ].

tomorrow_det_rbst := d_-_proxday_le &
 [ ORTH < "tomorrow" >,
   SYNSEM [ LOCAL.CONT.HOOK.XARG.E [ TENSE past,
				     SAME-PAST - ],
   	    LKEYS.ALTKEYREL.PRED _tomorrow_a_1_rel,
            PHON.ONSET con ],
   GENRE robust ].

; Possibly not needed, and leads to spurious robust |those are tomorrow|
;; 2021-04-16 - Needed for "They arrived tomorrow"
;;
tomorrow_np_rbst := n_-_ad-time_le &
 [ ORTH < "tomorrow" >,
   SYNSEM [ LOCAL [ CAT.HEAD.CASE non_nom,
   	    	    CONT.HOOK.XARG.E.TENSE past ],
   	    LKEYS [ ALT2KEYREL.PRED _tomorrow_a_1_rel,
                    KEYREL.PRED time_n_rel ],
            PHON.ONSET con ],
   GENRE robust ].

tomorrow_np := n_-_ad-time_le &
 [ ORTH < "tomorrow" >,
   SYNSEM [ LOCAL.CONT.HOOK.XARG basic_non_expl-ind & [ E.TENSE no_tense ],
   	    LKEYS [ ALT2KEYREL.PRED _tomorrow_a_1_rel,
                    KEYREL.PRED time_n_rel ],
            PHON.ONSET con ] ].

tomorrow_np_emod := n_-_ad-time_le &
 [ ORTH < "tomorrow" >,
   SYNSEM [ LOCAL [ CAT.HEAD.CASE non_nom,
   	    	    CONT.HOOK.XARG.E.TENSE nonpast ],
   	    LKEYS [ ALT2KEYREL.PRED _tomorrow_a_1_rel,
                    KEYREL.PRED time_n_rel ],
            PHON.ONSET con ] ].

;; DPF 2018-03-07 - This may produce too many false positives, but let's try
;; constraining it to only modify VPs (not |she was too tired to|), 
;; and non-slashed VPs (not |she had a family reunion to fly to|).  Even
;; only modify finite VPs, to avoid another candidate robust analysis for
;; |she had a family reunion to fly to|.  Also prevent attachment to copula,
;; to avoid |she [[was too tired] to]|.
;; DPF 2018-05-13 - Also constrain modified VP to LEX -, to avoid robust
;; |plan to traveling in ...|
;; 2020-04-10 - Added ALTMIN no_rel to block cmod |[and to] listen|
;; 2020-09-09 - We don't want robust |[stretch back to] 10 years ago|, so
;; let's comment this out for now, and reconsider when we get a better ranking
;; model.
;;
#|
too_adv2_rbst := av_-_i-vp-po-nmb_le &
 [ ORTH < "to" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_too_a_also_rel",
            LOCAL.CAT [ HEAD [ MOD.FIRST [ LOCAL.CAT [ HEAD verb & 
							  [ VFORM fin,
							    MINORS.MIN 
							     noncop_event_rel ],
						     VAL.SUBJ *cons*  ],
					 LEX -,
					 NONLOC.SLASH.LIST < > ],
			       MINORS.ALTMIN no_rel,
			       --ADVADJ - ],
                        VAL.SPR.FIRST unexpressed_min ],
            PHON.ONSET con ],
   GENRE robust ].
|#

too_deg_rbst := av_vp_dg-too_le &
 [ ORTH < "to" >,
   SYNSEM [ PHON.ONSET con,
	    LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CAT.HEAD a_or_adv ],
   GENRE robust ].

;; Exclude spec of degree specifiers: "to over 500 years old"
too_deg_nc_rbst := av_-_dg-cmp-so_le &
 [ ORTH < "to" >,
   SYNSEM [ LKEYS.KEYREL.PRED _too_x_comp_rel,
	    LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CAT.HEAD adv &
			      [ MINORS.MIN adv_rel ],
            PHON.ONSET con ],
   GENRE robust ].

too_deg_nc_adj_rbst := av_-_dg-cmp-so_le &
 [ ORTH < "to" >,
   SYNSEM [ LKEYS.KEYREL.PRED _too_x_comp_rel,
	    LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CAT.HEAD adj &
			      [ --TOODEGROB + ],
            PHON.ONSET con ],
   GENRE robust ].

travel_to_v1_mal := v_np_pp_le_rbst &
 [ ORTH < "travel" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_travel_v_1_rel",
            PHON.ONSET con ] ].

trillions_rbst := aj_-_i-crd-trln_le &
 [ ORTH < "trillions" >,
   SYNSEM [ LKEYS.ALTKEYREL.CARG "1000000000000",
            PHON.ONSET con ],
   GENRE robust ].

troubles_n1 := n_-_c-pl_le &
 [ ORTH < "troubles" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_trouble_n_1_rel",
            PHON.ONSET con ] ].

trousers_n1_mal := n_-_c-sg_le_rbst &
 [ ORTH < "trouser" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_trousers_n_1_rel",
            PHON.ONSET con ] ].

; "I try arrive"
try_v1_mal := v_vp_seq-bse_le_rbst &
  [ ORTH < "try" >,
    SYNSEM [ LKEYS.KEYREL.PRED "_try_v_1_rel",
	     PHON.ONSET con ] ].

tsengs_n1 := n_-_pn-pl-def_le &
 [ ORTH < "Tsengs" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Tseng",
            PHON.ONSET con ] ].

tsujimuras_n1 := n_-_pn-pl-def_le &
 [ ORTH < "Tsujimuras" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Tsujimura",
            PHON.ONSET con ] ].

Tuesday_night_n1 := n_-_c-dpt-cap_le &
 [ ORTH < "Tuesday", "night" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_Tuesday+night_n_1_rel",
            PHON.ONSET con ] ].

twice_a_det := d_-_sg-every_le &
 [ ORTH < "twice", "a" >,
   SYNSEM [ LKEYS.KEYREL.PRED _twice+a_q_rel,
            PHON.ONSET con ] ].

tyrannosaurus_rex_n1 := n_-_c-maycap_le &
 [ ORTH < "Tyrannosaurus", "Rex" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tyrannosaurus+rex_n_1_rel",
            PHON.ONSET con ] ].

u_k_post_ttl_8 := n_-_tt-post-npt_le &
 [ ORTH < "U", ".~", "K." >,
   SYNSEM [ LKEYS.KEYREL.PRED "_UK_n_1_rel",
            PHON.ONSET con ] ].

u_k_post_ttl_9 := n_-_tt-post-npt_le &
 [ ORTH < "U", ".~", "K" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_UK_n_1_rel",
            PHON.ONSET con ] ].

u_s_post_ttl_8 := n_-_tt-post-npt_le &
 [ ORTH < "U", ".~", "S." >,
   SYNSEM [ LKEYS.KEYREL.PRED "_US_n_1_rel",
            PHON.ONSET con ] ].

u_s_post_ttl_9 := n_-_tt-post_le &
 [ ORTH < "U", ".~", "S" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_US_n_1_rel",
            PHON.ONSET con ] ].

ultimately_adv1_mal := av_-_i-pr-aux_le_rbst &
 [ ORTH < "ultimately" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ultimate_a_1_rel",
            PHON.ONSET voc ] ].

un_n8 := n_-_c-nm-pd_le &
 [ ORTH < "U", ".~", "N." >,
   SYNSEM [ LKEYS.KEYREL.CARG "UN",
            PHON.ONSET con ] ].

un_n9 := n_-_c-nm-pd-nf_le &
 [ ORTH < "U", ".~", "N." >,
   SYNSEM [ LKEYS.KEYREL.CARG "UN",
            PHON.ONSET con ] ].

uncle_n := n_-_c-pre-ttl_le &
 [ ORTH < "uncle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_uncle_n_of_rel",
            LOCAL.CAT.HEAD.MINORS.MIN pre_title_rel,
            PHON.ONSET voc ] ].

underdeveloping_a1_mal := aj_-_i-ing-ed_le_rbst &
 [ ORTH < "underdeveloping" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_underdeveloped_a_1_rel",
            PHON.ONSET voc ] ].

underdeveloping_a2_mal := aj_-_i-ing-ed_le_rbst &
 [ ORTH < "under-developing" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_underdeveloped_a_1_rel",
            PHON.ONSET voc ] ].

underpants_n1_mal := n_-_c-sg_le_rbst &
 [ ORTH < "underpant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_underpants_n_1_rel",
            PHON.ONSET voc ] ].

;; |We understand better the meaning of labor.|
understand_v5 := v_np-adv_le &
 [ ORTH < "understand" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_understand_v_1_rel",
            PHON.ONSET voc ] ].

understanding_on_of_n1_mal := n_pp_c_le_rbst &
 [ ORTH < "understanding" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
		    KEYREL.PRED "_understanding_n_for_rel" ],
            PHON.ONSET voc ] ].

undies_n1_mal := n_-_c-sg_le_rbst &
 [ ORTH < "undie" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_undies_n_1_rel",
            PHON.ONSET voc ] ].

ungainly_a1_mal := av_-_i-vp-adj_le_rbst &
 [ ORTH < "ungainly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ungainly_a_1_rel",
            PHON.ONSET voc ] ].

unique_a1_spr_mal := aj_-_i-spobl_le_rbst &
 [ ORTH < "unique" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unique_a_to_rel",
            PHON.ONSET con ] ].

unless_past := p_cp_s-unsp-past_le &
 [ ORTH < "unless" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unless_p_1_rel",
            PHON.ONSET voc ] ].

unless_mal := p_cp_s-unsp_le_rbst &
 [ ORTH < "unless" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unless_p_1_rel",
            PHON.ONSET voc ] ].

unless_prd_mal := p_vp_bse_le_rbst &
 [ ORTH < "unless" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_unless_x_rel",
            PHON.ONSET voc ] ].

until_prd_mal := p_vp_bse_le_rbst &
 [ ORTH < "until" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_until_p_rel",
            PHON.ONSET voc ] ].

untimely_a1_mal := av_-_i-vp-adj_le_rbst &
 [ ORTH < "untimely" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_untimely_a_1_rel",
            PHON.ONSET voc ] ].

up_and_down_adv_sp_rbst := pp_-_i_le &
 [ ORTH < "up", "and", "dawn" >,
   SYNSEM [ LKEYS.KEYREL.PRED _up+and+down_p_rel,
            PHON.ONSET voc ],
   GENRE robust ].

up_until_p2_past := p_cp_s-past_le &
 [ ORTH < "up", "until" >,
   SYNSEM [ LKEYS.KEYREL.PRED _up+until_p_rel,
            PHON.ONSET voc ] ].

up_until_p2_mal := p_cp_s_le_rbst &
 [ ORTH < "up", "until" >,
   SYNSEM [ LKEYS.KEYREL.PRED _up+until_p_rel,
            PHON.ONSET voc ] ].

up_until_p2b_mal := p_cp_s-tns_le_rbst &
 [ ORTH < "up", "until" >,
   SYNSEM [ LKEYS.KEYREL.PRED _up+until_p_rel,
            PHON.ONSET voc ] ].

uplands_n1_mal := n_-_c-sg_le_rbst &
 [ ORTH < "upland" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_uplands_n_1_rel",
            PHON.ONSET voc ] ].

upside_down_a1 := aj_-_i-att_le &
 [ ORTH < "upside", "down" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_upside+down_a_1_rel",
            PHON.ONSET voc ] ].

upside_down_a2 := aj_-_i-att_le &
 [ ORTH < "upside", "-", "down" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_upside+down_a_1_rel",
            PHON.ONSET voc ] ].

upside_down_pp := pp_-_i_le &
 [ ORTH < "upside", "down" >,
   SYNSEM [ LKEYS.KEYREL.PRED _upside+down_p_rel,
            PHON.ONSET con ] ].

upside_down_pp2 := pp_-_i_le &
 [ ORTH < "upside", "-", "down" >,
   SYNSEM [ LKEYS.KEYREL.PRED _upside+down_p_rel,
            PHON.ONSET con ] ].

upside_down_pp_sp_rbst := pp_-_i_le &
 [ ORTH < "up", "side", "down" >,
   SYNSEM [ LKEYS.KEYREL.PRED _upside+down_p_rel,
            PHON.ONSET con ],
   GENRE robust ].

upstairs_n1_mal := n_-_c-sg_le_rbst &
 [ ORTH < "upstair" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_upstairs_n_1_rel",
            PHON.ONSET voc ] ].

us_n10 := n_-_c-nm-pd_le &
 [ ORTH < "U", ".~", "S." >,
   SYNSEM [ LKEYS.KEYREL.CARG "US",
            PHON.ONSET con ] ].

us_n11 := n_-_c-nm-pd-nf_le &
 [ ORTH < "U", ".~", "S." >,
   SYNSEM [ LKEYS.KEYREL.CARG "US",
            PHON.ONSET con ] ].

us_n1_mal := n_-_c-nm_le_nocap_rbst &
 [ ORTH < "US" >,
   SYNSEM [ LKEYS.KEYREL.CARG "US",
            LOCAL.CAT.HEAD.--BARE -,
	    MODIFD.LPERIPH +,
            PHON.ONSET con ] ].

us_n2_mal := n_-_c-nm_le_nocap_rbst &
 [ ORTH < "U", ".~", "S" >,
   SYNSEM [ LKEYS.KEYREL.CARG "US",
            LOCAL.CAT.HEAD.--BARE -,
	    MODIFD.LPERIPH +,
            PHON.ONSET con ] ].

usa_n8 := n_-_c-nm-pd_le &
 [ ORTH < "U", ".~", "S.A." >,
   SYNSEM [ LKEYS.KEYREL.CARG "USA",
            PHON.ONSET con ] ].

usa_n9 := n_-_c-nm-pd-nf_le &
 [ ORTH < "U", ".~", "S.A." >,
   SYNSEM [ LKEYS.KEYREL.CARG "USA",
            PHON.ONSET con ] ].

usa_n10 := n_-_c-nm-pd_le &
 [ ORTH < "U", ".~", "S.A" >,
   SYNSEM [ LKEYS.KEYREL.CARG "USA",
            PHON.ONSET con ] ].

usa_n11 := n_-_c-nm_le &
 [ ORTH < "U", ".~", "S.A." >,
   SYNSEM [ LKEYS.KEYREL.CARG "USA",
            PHON.ONSET con ] ].

;; DPF 2020-11-18 - Wrongly used for "Essential to our health is vitamin C, 
;; and a lot of it can be found in oranges."  So restrict to CASE acc.
;; 2021-06-15 - Too aggressive in competition with other errors, as in
;; "On Sunday, at our school, will be a 5km cross-country race.", so instead
;; let's try blocking robust-case pronouns as prep complements.
;;
us_our_rbst := n_-_pr-us_le &
 [ ORTH < "our" >,
   SYNSEM [ PHON.ONSET voc,
   	    LOCAL.CAT.HEAD [ --MALCASE +,
			     CASE acc ] ],
   GENRE robust ].


us_pron_rbst := n_-_pr-we_le &
 [ ORTH < "us" >,
   SYNSEM [ PHON.ONSET voc,
            LOCAL.CAT.HEAD.--MALCASE + ],
   GENRE robust ].

us_stutter_7_mal := n_-_pr-us_le_rbst &
 [ ORTH < "us⸴", "us" >,
   SYNSEM.PHON.ONSET con ].

us_stutter_8_mal := n_-_pr-us_le_rbst &
 [ ORTH < "us.~", "us" >,
   SYNSEM.PHON.ONSET con ].

use_to_aux_sp_rbst := v_vp_oght-p-pst_le &
 [ ORTH < "use" >,
   SYNSEM [ LKEYS.KEYREL.PRED _used+to_v_qmodal_rel,
            PHON.ONSET con ],
   GENRE robust ].

;; double error on same entry: |use to arising|
;; For loading with ACE:
#|
used_to_prp_v_rbst|use_to_aux_sp_rbst := v_p-vp_prp_le &
 [ ORTH < "use" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_used+to_v_qmodal_rel" ],
            PHON.ONSET con ],
   GENRE robust ].
|#
;; For loading with LKB
used_to_prp_v_rbst := v_p-vp_prp_le &
 [ ORTH < "use" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_used+to_v_qmodal_rel" ],
            PHON.ONSET con ],
   GENRE robust ].

useful_a1_mal := aj_vp_i-seq-pp_le_rbst &
 [ ORTH < "useful" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_useful_a_for_rel",
            PHON.ONSET con ] ].

users_a1_mal := aj_-_i-cmpd_le_rbst &
 [ ORTH < "users" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_users_a_1_rel",
            PHON.ONSET con ] ].

#|
usually_adv1_rbst := av_-_i-vp-po_le &
 [ ORTH < "usually" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_usual_a_1_rel",
            PHON.ONSET con ],
   GENRE robust ].
|#

valentines_day := n_-_m-hldy_le &
 [ ORTH < "Valentine", "'s", "Day" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Valentines_Day",
            PHON.ONSET con ] ].

valentines_day_n2 := n_-_m-ssn-spr_le &
 [ ORTH < "Valentine", "'s", "Day" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Valentines_Day",
            PHON.ONSET con ] ].

valentines_day_card_n1 := n_-_c_le &
 [ ORTH < "Valentine", "'s", "Day", "card" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_Valentines+Day+card_n_1_rel",
            PHON.ONSET con ] ].

valuables_n1_mal := n_-_c-sg_le_rbst &
 [ ORTH < "valuable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_valuables_n_1_rel",
            PHON.ONSET con ] ].

vanished_a1_post_mal := v_-_psv-post_le_rbst &
 [ ORTH < "vanished" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vanish_v_1_rel",
            PHON.ONSET con ] ].

various_isect := aj_-_i-att_le &
 [ ORTH < "various" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_various_a_1_rel",
            LOCAL.CAT.HEAD.MOD.FIRST.LOCAL.AGR.PNG.PN 3p,
            PHON.ONSET con ] ].

various_a1_sg_rbst := aj_-_i-att_le &
 [ ORTH < "various" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_various_a_1_rel",
            LOCAL.CAT.HEAD.MOD.FIRST.LOCAL.AGR.PNG.PN 3s,
            PHON.ONSET con ],
   GENRE robust ].

;; Misspelling of ""various"
various_adj_mal := aj_-_i_le_rbst &
 [ ORTH < "varies" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_various_a_1_rel",
            PHON.ONSET con ] ].

various_variety_n1_mal := n_-_c-aj_le_rbst &
 [ ORTH < "various" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_variety_n_of-n_rel",
	    LOCAL.CAT.VAL.SPR.FIRST.--MIN _a_q_rel,
            PHON.ONSET con ] ].

various_prd_rbst := aj_-_i-prd_le &
 [ ORTH < "various" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_various_a_1_rel",
            PHON.ONSET con ],
   GENRE robust ].

very_asleep_a1_rbst := aj_-_i-prd_le &
 [ ORTH < "very", "asleep" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fast+asleep_a_1_rel",
            PHON.ONSET con ],
   GENRE robust ].

very_awake_a1_rbst := aj_-_i-prd_le &
 [ ORTH < "very", "awake" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wide+awake_a_1_rel",
            PHON.ONSET con ],
   GENRE robust ].

very_deg_adv_mal := av_-_i-vp-dg_le_rbst &
 [ ORTH < "very" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_very_a_1_rel",
            PHON.ONSET con ] ].

very_deg_mal := av_-_dg-m_le_rbst &
 [ ORTH < "very" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_very_x_deg_rel",
            PHON.ONSET con ] ].

very_vp_adv_mal := av_-_s-vp-x_le_rbst &
 [ ORTH < "very" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_very_a_1_rel",
            PHON.ONSET con ] ].

;; DPF 2017-09-04 - Pre-modifier is stylistically deprecated.
;; |I very much like you.|
;;
very_much_adv1_mal := av_-_i-vp-pr_le_rbst &
 [ ORTH < "very", "much" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_very+much_a_1_rel",
            PHON.ONSET con ] ].

; Allow "the vet's" NP even though generally block bare possessives
vets_poss_n1 := n_-_c_le &
 [ ORTH < "vet", "'s" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vet_n_abb_rel",
            PHON.ONSET con ] ].

vietnam_memorial_n1 := n_-_c-nm_le &
 [ ORTH < "Vietnam", "Memorial" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Vietnam+Memorial",
            PHON.ONSET con ] ].

Villaloboses_n1 := n_-_pn-pl-def_le &
 [ ORTH < "Villaloboses" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Villalobos",
            PHON.ONSET con ] ].

vocals_n1_mal := n_-_c-sg_le_rbst &
 [ ORTH < "vocal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vocals_n_1_rel",
            PHON.ONSET con ] ].

vote_v4_mal := v_np-np_nbar_le_rbst &
 [ ORTH < "vote" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vote_v_1_rel",
            PHON.ONSET con ] ].

wait_for_v1_mal := v_np_pp_le_rbst &
 [ ORTH < "wait" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wait_v_for_rel",
            PHON.ONSET con ] ].

; "I wait arrive"
wait_v1_mal := v_vp_seq-bse_le_rbst &
  [ ORTH < "wait" >,
    SYNSEM [ LKEYS.KEYREL.PRED "_wait_v_1_rel",
	     PHON.ONSET con ] ].

wait_v1_sp_rbst := v_np*_le &
 [ ORTH < "waitt" >,
   SYNSEM [ LKEYS [ --COMPKEY temp_abstr_rel,
                    KEYREL.PRED "_wait_v_1_rel" ],
            PHON.ONSET con ],
   GENRE robust ].

wait_v2_sp_rbst := v_vp_seq_le &
 [ ORTH < "waitt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wait_v_1_rel",
            PHON.ONSET con ],
   GENRE robust ].

wait_v4_sp_rbst := v_pp_e_le &
 [ ORTH < "waitt" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_wait_v_for_rel" ],
            PHON.ONSET con ],
   GENRE robust ].

wallaces_n1 := n_-_pn-pl-def_le &
 [ ORTH < "Wallaces" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Wallace",
            PHON.ONSET con ] ].

wang_n1_nocap_mal := n_-_pn_le_nocap_rbst &
 [ ORTH < "wang" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Wang",
            PHON.ONSET con ] ].

wander_wonder_v1_sp_rbst := v_cp_fin-inf-q_le &
 [ ORTH < "wander" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wonder_v_1_rel",
            PHON.ONSET con ],
   GENRE robust ].

wang_n1 := n_-_pn_le &
 [ ORTH < "Wang" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Wang",
            PHON.ONSET con ] ].

; "I want arrive"
want_v1_mal := v_vp_seq-bse_le_rbst &
  [ ORTH < "want" >,
    SYNSEM [ LKEYS.KEYREL.PRED "_want_v_1_rel",
	     PHON.ONSET con ] ].

war_n := n_-_c-maycap_le &
 [ ORTH < "war" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_war_n_1_rel",
            PHON.ONSET con ] ].

war_n2 := n_-_m_le &
 [ ORTH < "war" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_war_n_1_rel",
            LOCAL.CAT.VAL.SPR.FIRST unexpressed,
            PHON.ONSET con ] ].

wares_n1_mal := n_-_c-sg_le_rbst &
 [ ORTH < "ware" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wares_n_1_rel",
            PHON.ONSET con ] ].

washington_dc_n10 := n_-_pn_le &
 [ ORTH < "Washington", "D", ".~", "C." >,
   SYNSEM [ LKEYS.KEYREL.CARG "WashingtonDC",
            PHON.ONSET con ] ].

washington_dc_n10b := n_-_pn_le &
 [ ORTH < "Washington", "D", ".~", "C" >,
   SYNSEM [ LKEYS.KEYREL.CARG "WashingtonDC",
            PHON.ONSET con ] ].

washington_dc_n11 := n_-_pn_le &
 [ ORTH < "Washington", ",", "D", ".~", "C." >,
   SYNSEM [ LKEYS.KEYREL.CARG "WashingtonDC",
            PHON.ONSET con ] ].

washington_dc_n12 := n_-_pn_le &
 [ ORTH < "Washington", ",", "D", ".~", "C" >,
   SYNSEM [ LKEYS.KEYREL.CARG "WashingtonDC",
            PHON.ONSET con ] ].

waste_v1_mal := v_-_le_rbst &
 [ ORTH < "waste" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_waste_v_1_rel",
            PHON.ONSET con ] ].

watch_v2_fin_mal := v_np-vp_fin_le_rbst &
 [ ORTH < "watch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_watch_v_1_rel",
            PHON.ONSET con ] ].

watch_v2_fin_3sg_mal := v_np-vp_fin-3sg_le_rbst &
 [ ORTH < "watch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_watch_v_1_rel",
            PHON.ONSET con ] ].

wave_v1_i := v_nb_idm_le &
 [ ORTH < "wave" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wave_v_i_rel",
            PHON.ONSET con ] ].

we_our_rbst := n_-_pr-we_le &
 [ ORTH < "our" >,
   SYNSEM [ PHON.ONSET voc,
            LOCAL.CAT.HEAD.--POSSRBST + ],
   GENRE robust ].

we_ourself_rbst := n_-_pr-we_le &
 [ ORTH < "ourself" >,
   SYNSEM.PHON.ONSET voc,
   GENRE robust ].

;; While we block pronouns as left members of appositives, add these hacks:
we_ourselves := n_-_pr-we_le &
 [ ORTH < "we", "ourselves" >,
   SYNSEM.PHON.ONSET con ].

we_ourselves_rbst := n_-_pr-we_le &
 [ ORTH < "ourselves" >,
   SYNSEM.PHON.ONSET voc,
   GENRE robust ].

;; This one leads to too many false positives, so comment out for now
;we_rbst := n_-_pr-us_le &
; [ ORTH < "we" >,
;   SYNSEM [ PHON.ONSET con,
;            LOCAL.CAT.HEAD.MINORS.NORM no_rel ],
;   GENRE robust ].

web_n1 := n_-_c-maycap_le &
 [ ORTH < "web" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_web_n_of_rel",
            PHON.ONSET con ] ].

;; |They weak the wall| => |weaken|
weak_verb_v1_mal := v_np_adj_le_rbst &
 [ ORTH < "weak" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_weaken_v_1_rel",
            PHON.ONSET con ] ].

weaker_verb_v1_mal := v_np_adj_le_rbst &
 [ ORTH < "weaker" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_weaken_v_1_rel",
            PHON.ONSET con ] ].

wechat_pn_n1 := n_-_pn_le &
 [ ORTH < "WeChat" >,
   SYNSEM [ LKEYS.KEYREL.CARG "WeChat",
            PHON.ONSET con ] ].

wechat_n1_nocap_mal := n_-_pn_le_nocap_rbst &
 [ ORTH < "wechat" >,
   SYNSEM [ LKEYS.KEYREL.CARG "WeChat",
            PHON.ONSET con ] ].

Wednesday_night_n1 := n_-_c-dpt-cap_le &
 [ ORTH < "Wednesday", "night" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_Wednesday+night_n_1_rel",
            PHON.ONSET con ] ].

well_vp_adv := av_-_i-vp-x-only_le &
 [ ORTH < "well" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_well_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

well := av_-_i-vp-po-nmb_le &
 [ ORTH < "well" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_well_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

well_adv_mal := av_-_i-vp-pr_le_rbst &
 [ ORTH < "well" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_well_a_1_rel",
            LOCAL.CAT.HEAD.MOD.FIRST.LEX na_or_-,
            PHON.ONSET con ] ].

;; For |a very well student| for `good'
well_a1_rbst := aj_-_i-att_le &
 [ ORTH < "well" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_good_a_1_rel",
            LOCAL.CAT.HEAD.--SBRD -,
            PHON.ONSET con ],
   ALTS.UNADJ -,
   GENRE robust ].

well_asleep_a1_rbst := aj_-_i-prd_le &
 [ ORTH < "well", "asleep" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fast+asleep_a_1_rel",
            PHON.ONSET con ],
   GENRE robust ].

well_awake_a1_rbst := aj_-_i-prd_le &
 [ ORTH < "well", "awake" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wide+awake_a_1_rel",
            PHON.ONSET con ],
   GENRE robust ].

well_known_a1 := aj_-_i_le &
 [ ORTH < "well", "known" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_well-known_a_1_rel",
            PHON.ONSET con ] ].

well_known_a2 := aj_-_i_le &
 [ ORTH < "well", "-", "known" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_well-known_a_1_rel",
            PHON.ONSET con ] ].

west_n1 := n_-_c-maycap_le &
 [ ORTH < "west" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_west_n_of_rel",
            PHON.ONSET con ] ].

west_pn_n2 := n_-_pn_le &
 [ ORTH < "West" >,
   SYNSEM [ LKEYS.KEYREL.CARG "West",
            PHON.ONSET con ] ].

west_lake_n1_nocap_mal := n_-_pn_le_nocap_rbst &
 [ ORTH < "west", "lake" >,
   SYNSEM [ LKEYS.KEYREL.CARG "West+Lake",
            PHON.ONSET con ] ].

westing_game_n1 := n_-_c-nm_le &
 [ ORTH < "Westing", "Game" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Westing+Game",
            PHON.ONSET con ] ].

westvirginia_n8 := n_-_pn-abb_le &
 [ ORTH < "W", ".~", "V." >,
   SYNSEM [ LKEYS.KEYREL.CARG "West+Virginia",
            PHON.ONSET con ] ].

westvirginia_n9 := n_-_pn-abb_le &
 [ ORTH < "W", ".~", "V" >,
   SYNSEM [ LKEYS.KEYREL.CARG "West+Virginia",
            PHON.ONSET con ] ].

wetlands_n1_mal := n_-_c-sg_le_rbst &
 [ ORTH < "wetland" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wetlands_n_1_rel",
            PHON.ONSET con ] ].

whale_watch_v1 := v_-_le &
 [ ORTH < "whale", "watch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_whale+watch_v_1_rel",
            PHON.ONSET con ] ].

what_a_det_mass_rbst := d_-_m-c-a_le_mal &
 [ ORTH < "what", "a" >,
   SYNSEM.LKEYS.KEYREL.PRED _what+a_q_rel ].

what_an_det_mass_rbst := d_-_m-c-an_le_mal &
 [ ORTH < "what", "an" >,
   SYNSEM.LKEYS.KEYREL.PRED _what+a_q_rel ].

what2_fr_ignore := n_-_pr-fr_le_ignore &
 [ ORTH < "what" >,
   SYNSEM [ LKEYS.KEYREL.PRED thing_rel,
            PHON.ONSET con ] ].

;; |what we admire is cats and dogs|
;; Need special entry to trigger the robust identity copula
;; 2019-06-20 - Block robust |what attract tourists|
;; DPF 2019-10-15 - Added --BARE + to block these as subjects of robust non3sg,
;; as in |what caused the accident remains unknown|
;;
what_fr_agr := n_-_pr-fr-agr_le &
 [ ORTH < "what" >,
   SYNSEM [ LOCAL.CAT.HEAD.--BARE +,
            LKEYS.KEYREL.PRED thing_rel,
            PHON.ONSET con ] ].

what_nounif_n1 := n_-_pn-nounif_le &
 [ ORTH < "What" >,
   SYNSEM [ LKEYS.KEYREL.CARG "What",
            PHON.ONSET con ] ].


;; |what arrive quickly are fast cars|
;; DPF 2019-05-06 - Ignore this one, for 
;; |What attract tourists most here are tax-free shopping, ...|
;;
#|
what2_fr_mal := n_-_pr-fr_le_rbst &
 [ ORTH < "what" >,
   SYNSEM [ LKEYS.KEYREL.PRED thing_rel,
            PHON.ONSET con ] ].
|#

;; 2020-04-07 - Add NORM quantity_rel to block |It was on the weekend what we 
;; admired|, and PT notpro to block modif of deictic "that", and CASE non_nom
;; to block |time that I could realize what was ...|
;;
what_rel_rbst := n_-_pr-rel-what_le &
 [ ORTH < "what" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.HEAD [ MINORS.NORM nom_rel,
	                     CASE non_nom ],
	    NONLOC.REL.LIST.FIRST.INDEX [ PT notpro ] ], 
   GENRE robust ].

;; |What good news that we won!|
what_root_mark := x_xp_howabt-n-p_le &
 [ ORTH < "what" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_what_x_root_rel",
            PHON.ONSET con ],
   ALTS.NONINITCAP - ].

;; "What I want to stress that she is right"
what_freerel_nocop_rbst := av_-_s-cp-pr_le &
 [ ORTH < "what" >,
   SYNSEM [ LOCAL.CAT.HEAD.MOD.FIRST.LOCAL.CAT.HEAD.INV -,
	    LKEYS.KEYREL.PRED "_what_n_freerel_rel",
            PHON.ONSET con ],
   GENRE robust ].

; |when it comes to speak in public, ...| => speaking
;; Need better ranking for this one to be visible
#|
when_it_comes_to_rbst := p_vp_bse_le &
 [ ORTH < "when", "it", "comes", "to" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_when+it+comes+to_x_rel",
            PHON.ONSET con ],
   GENRE robust ].
|#

when_prd_mal := p_vp_bse_le_rbst &
 [ ORTH < "when" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_when_x_subord_rel",
            PHON.ONSET con ] ].

; |the days when we spent| => |days we spent|
; Can't make CASE obliq because we want it exactly for gap of VP complement
;; 2020-04-08 - NORM norm_rel blocks these in vp-final-relcl as in
;; |we celebrated when the seedling survived|
when_rel_np_rbst := n_-_pr-rel-pl_le &
 [ ORTH < "when" >,
   SYNSEM [ LOCAL [ CAT.HEAD [ CASE acc,
                               MINORS.NORM norm_rel ],
		    CONT.HOOK.INDEX.SORT time ],
	    PHON.ONSET con ],
   GENRE robust ].

;; Block frag for |when [encountering troubles, we will struggle]|
when_subord := p_cp_s_le &
 [ ORTH < "when" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_when_x_subord_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.MODIFD notmod_or_rmod,
            PHON.ONSET con ] ].

when_subord_past := p_cp_s-past_le &
 [ ORTH < "when" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_when_x_subord_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.MODIFD notmod_or_rmod,
            PHON.ONSET con ] ].

when_subord_mal := p_cp_s_le_rbst &
 [ ORTH < "when" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_when_x_subord_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.MODIFD notmod_or_rmod,
            PHON.ONSET con ] ].

when_subord_2_mal := p_cp_s-tns_le_rbst &
 [ ORTH < "when" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_when_x_subord_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.MODIFD notmod_or_rmod,
            PHON.ONSET con ] ].

; |the place where we saw| => |place we saw|
where_rel_np_rbst := n_-_pr-rel-pl_le &
 [ ORTH < "where" >,
   SYNSEM [ LOCAL [ CAT.HEAD [ CASE acc,
                               MINORS.NORM norm_rel ],
		    CONT.HOOK.INDEX.SORT location ],
	    PHON.ONSET con ],
   GENRE robust ].

;; The following one is too hard to constrain, as in
;; |[the places [where all the dead people]] lived|
#|
where_prep_rbst := p_np_i_le &
 [ ORTH < "where" >,
   SYNSEM [ LKEYS.KEYREL.PRED state_loc_rel,
            PHON.ONSET con ],
   GENRE robust ].
|#

whereas_past := p_cp_s-past_le &
 [ ORTH < "whereas" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_whereas_x_rel",
            PHON.ONSET con ] ].

whereas_mal := p_cp_s_le_rbst &
 [ ORTH < "whereas" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_whereas_x_rel",
            PHON.ONSET con ] ].

whereas_2_mal := p_cp_s-tns_le_rbst &
 [ ORTH < "whereas" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_whereas_x_rel",
            PHON.ONSET con ] ].

whether_p1_mal := p_cp_s_le_rbst &
 [ ORTH < "whether" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_whether_x_rel",
            PHON.ONSET con ] ].

whether_p1_2_mal := p_cp_s-tns_le_rbst &
 [ ORTH < "whether" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_whether_x_rel",
            PHON.ONSET con ] ].

whether_p1_past := p_cp_s-past_le &
 [ ORTH < "whether" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_whether_x_rel",
            PHON.ONSET con ] ].

while_n1_mal := n_-_c-the_le_rbst &
 [ ORTH < "while" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_while_n_1_rel",
            PHON.ONSET con ] ].

while_asym := p_cp_s-tns_le &
 [ ORTH < "while" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_while_p_1_rel",
            PHON.ONSET con ] ].

while_past := p_cp_s-past_le &
 [ ORTH < "while" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_while_p_1_rel",
            PHON.ONSET con ] ].

whilst_past := p_cp_s-past_le &
 [ ORTH < "whilst" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_whilst_p_1_rel",
            PHON.ONSET con ] ].

;; DPF 2019-06-24 - Parse ranking
;; |I used to believe he was indifferent, while I think he has cold hands and a warm heart now.|
#|
while_mal := p_cp_s_le_rbst &
 [ ORTH < "while" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_while_p_1_rel",
            PHON.ONSET con ] ].
|#
while_prd_mal := p_vp_bse_le_rbst &
 [ ORTH < "while" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_while_x_rel",
            PHON.ONSET con ] ].

whilst_mal := p_cp_s_le_rbst &
 [ ORTH < "whilst" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_whilst_p_1_rel",
            PHON.ONSET con ] ].

whilst_2_mal := p_cp_s-tns_le_rbst &
 [ ORTH < "whilst" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_whilst_p_1_rel",
            PHON.ONSET con ] ].

whom_wh_rbst := n_-_pr-who_le &
 [ ORTH < "whom" >,
   SYNSEM [ LKEYS.KEYREL.PRED person_rel,
            LOCAL.CAT.HEAD.CASE nom,
            PHON.ONSET con ],
   GENRE robust ].

whose_1_rbst := d_-_wh-poss_le &
 [ ORTH < "who", "’s" >,
   SYNSEM.PHON.ONSET con,
   GENRE robust ].

whose_2_rbst := d_-_poss-rel_le &
 [ ORTH < "who", "’s" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT [ HEAD.--POSSRBST +,
			VAL.SPEC.FIRST.LOCAL.CAT.HEAD noun ] ],
   GENRE robust ].

why1 := pp_-_i-wh_le &
 [ ORTH < "why" >,
   SYNSEM [ LKEYS [ ALTKEYREL.PRED reason_rel,
                    KEYREL.PRED _for_p_rel ],
            LOCAL.CAT.HEAD.AUX -,
            PHON.ONSET con ] ].

;; Filler-head rules with finite head have nh-dtr stamped AUX - so this robust
;; filler only appears with nonfinite ones.
;;
why1_nonfin_rbst := pp_-_i-wh_le &
 [ ORTH < "why" >,
   SYNSEM [ LKEYS [ ALTKEYREL.PRED reason_rel,
                    KEYREL.PRED _for_p_rel ],
            LOCAL.CAT.HEAD.AUX +,
            PHON.ONSET con ],
   GENRE robust ].

;; |They wide the wall| => |widen|
wide_verb_v1_mal := v_np_adj_le_rbst &
 [ ORTH < "wide" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_widen_v_1_rel",
            PHON.ONSET con ] ].

wider_verb_v1_mal := v_np_adj_le_rbst &
 [ ORTH < "wider" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_widen_v_1_rel",
            PHON.ONSET con ] ].

widely_mal := aj_-_i-adv_le_rbst &
 [ ORTH < "widely" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wide_a_1_rel",
            PHON.ONSET con ] ].

;; Avoid for |in the wild|
wilds_n1_mal := n_-_c-sg_le_rbst &
 [ ORTH < "wild" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wilds_n_1_rel",
            LOCAL.CAT.VAL.SPR.FIRST.--MIN udef_a_q_rel,
            PHON.ONSET con ] ].

wiles_n1_mal := n_-_c-sg_le_rbst &
 [ ORTH < "wile" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wiles_n_1_rel",
            PHON.ONSET con ] ].

;; |he will arrives|
will_fin_mal := v_vp_fin_le_rbst &
 [ ORTH < "will" >,
   SYNSEM [ LKEYS.KEYREL.PRED _will_v_aux_rel,
            PHON.ONSET con ] ].

;; |he will arriving|
will_prp_mal := v_vp_aux_prp_le_rbst &
 [ ORTH < "will" >,
   SYNSEM [ LKEYS.KEYREL.PRED _will_v_aux_rel,
            PHON.ONSET con ] ].

;; |we will probably an impression| - missing verb of VP complement
will_v1_np_rbst := v_np_le &
 [ ORTH < "will" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_will_v_1_rel",
            LOCAL.CAT.VAL.COMPS.FIRST canonical_synsem &
			      [ --SIND.SORT nonloc,
				LEX - ],
            PHON.ONSET con ],
   GENRE robust ].

will_aux_neg_1_rbst := v_vp_will-n_le &
 [ ORTH < "won't" >,
   SYNSEM [ LKEYS.KEYREL.PRED _will_v_aux_rel,
            PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

will_aux_neg_2_rbst := v_vp_will-n_le &
 [ ORTH < "won", "'t" >,
   SYNSEM [ LKEYS.KEYREL.PRED _will_v_aux_rel,
            PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

williamsons_n1 := n_-_pn-pl-def_le &
 [ ORTH < "Williamsons" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Williamson",
            PHON.ONSET con ] ].

winter_break_n1 := n_-_m_le &
 [ ORTH < "winter", "break" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_winter+break_n_1_rel",
            LOCAL.CAT.VAL.SPR.FIRST unexpressed,
            PHON.ONSET con ] ].

;; Support near synonymy of |winter holiday homework| and |winter holiday's h|
;;
winter_holidays_a1 := aj_-_i_le &
 [ ORTH < "winter", "holiday", "’s" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_winter+holidays_a_1_rel",
            PHON.ONSET con ] ].

winter_holidays_a2 := aj_-_i_le &
 [ ORTH < "winter", "holidays’" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_winter+holidays_a_1_rel",
            PHON.ONSET con ] ].

winter_season_n1 := n_-_m_le &
 [ ORTH < "winter", "season" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_winter+season_n_1_rel",
            PHON.ONSET con ] ].

winter_vacations_a1 := aj_-_i_le &
 [ ORTH < "winter", "vacation", "’s" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_winter+vacations_a_1_rel",
            PHON.ONSET con ] ].

winter_vacations_a2 := aj_-_i_le &
 [ ORTH < "winter", "vacations’" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_winter+vacations_a_1_rel",
            PHON.ONSET con ] ].

;; Allow "winter vacation" without article
winter_vacation_n1 := n_-_m-nocnh-nspr_le &
 [ ORTH < "winter", "vacation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_winter+vacation_n_1_rel",
            PHON.ONSET con ] ].

wish_v5_mal := v_cp_sbjnct_le_rbst &
 [ ORTH < "wish" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_wish_v_1_rel" ],
	    LOCAL.CAT.VAL.COMPS < [ ], [ LOCAL.CAT.HEAD.--MAL3SG - ] >,
            PHON.ONSET con ] ].

within_sp_rbst := p_np_i_le &
 [ ORTH < "with", "in" >,
   SYNSEM [ LKEYS.KEYREL.PRED _within_p_rel,
            PHON.ONSET con ],
   GENRE robust ].

within_pp_sp_rbst := pp_-_i_le &
 [ ORTH < "with", "in" >,
   SYNSEM [ LKEYS.KEYREL.PRED _within_p_rel,
            PHON.ONSET con ],
   GENRE robust ].

within_sp2_rbst := p_np_i_le &
 [ ORTH < "whithin" >,
   SYNSEM [ LKEYS.KEYREL.PRED _within_p_rel,
            PHON.ONSET con ],
   GENRE robust ].

within_pp_sp2_rbst := pp_-_i_le &
 [ ORTH < "whithin" >,
   SYNSEM [ LKEYS.KEYREL.PRED _within_p_rel,
            PHON.ONSET con ],
   GENRE robust ].

without_bse_mal := p_vp_bse_le_rbst &
 [ ORTH < "without" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_without_p_rel",
            PHON.ONSET con ] ].

without_prd_p1_rbst := p_prd_i_le &
 [ ORTH < "without" >,
   SYNSEM [ LKEYS.KEYREL.PRED _without_p_rel,
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.VFORM pas,
            PHON.ONSET con ],
   GENRE robust ].

without_sp_rbst := p_np_i_le &
 [ ORTH < "with", "out" >,
   SYNSEM [ LKEYS.KEYREL.PRED _without_p_rel,
            PHON.ONSET con ],
   GENRE robust ].

wobbly_a1_mal := av_-_i-vp-adj_le_rbst &
 [ ORTH < "wobbly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wobbly_a_1_rel",
            PHON.ONSET con ] ].

womens_a1_mal := aj_-_i-cmpd_le_rbst &
 [ ORTH < "womens" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_womens_a_1_rel",
            PHON.ONSET con ] ].

womens_rights_movement_n1 := n_-_c_le &
 [ ORTH < "women", "'s", "rights", "movement" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_womens+rights+movement_n_1_rel",
            PHON.ONSET con ] ].

wonder_v1_mal := v_cp_fin-inf-q-mc_le_rbst &
 [ ORTH < "wonder" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wonder_v_1_rel",
            PHON.ONSET con ] ].

woolly_a1_mal := av_-_i-vp-adj_le_rbst &
 [ ORTH < "woolly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_woolly_a_1_rel",
            PHON.ONSET con ] ].

;; Block "her work" as NP-VP
;; DPF 2018-10-02 - But not by just blocking --MAL3SG, since we also want to
;; get robust |he work hard|.  So leave as default def, and monitor.

workers_a1_mal := aj_-_i-cmpd_le_rbst &
 [ ORTH < "workers" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_workers_a_1_rel",
            PHON.ONSET con ] ].

works_n1_mal := n_-_c-pl_le_rbst &
 [ ORTH < "works" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_work_n_1_rel",
            PHON.ONSET con ] ].

worldly_a1_mal := av_-_i-vp-adj_le_rbst &
 [ ORTH < "worldly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_worldly_a_1_rel",
            PHON.ONSET con ] ].

worldwide_a3 := aj_-_i-maycap_le &
 [ ORTH < "world", "wide" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_worldwide_a_1_rel",
            PHON.ONSET con ] ].

;; In worse case, we will get lost.
;;
worse_the_worst_rbst := d_-_the_le &
 [ ORTH < "worse" >,
   SYNSEM [ LKEYS.KEYREL.PRED _the_q_rel,
            LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.AGR.DIV -,
            PHON.ONSET con ],
   GENRE robust ].

;; Not so clear: consider |I can think of a worse outcome than this one|
#|
worse_worst_a1_rbst := aj_-_i-sup_le &
 [ ORTH < "worse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bad_a_1_rel",
            LOCAL.CAT.HEAD.PRD -,
            PHON.ONSET con ],
   GENRE robust ].
|#

#|
worst_adv_rbst := av_-_i-vp-po_le &
 [ ORTH < "worst" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_worst_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ],
   GENRE robust ].
|#

;; Without overt specifier, replace either with "worse" or with "the worst"
#|
worst_worse_a1_rbst := aj_pp_i-cmp_le &
 [ ORTH < "worst" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bad_a_for_rel",
            LOCAL.CAT [ HEAD.PRD +,
	                VAL.SPR.FIRST unexpressed ],
            PHON.ONSET con ],
   GENRE robust ].
|#

;; With overt specifier, only suggest replacement with "worse"
;; More work needed
#|
worst_worse_spr_rbst := aj_pp_i-cmp_le &
 [ ORTH < "worst" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bad_a_for_rel",
            LOCAL.CAT [ HEAD.PRD +,
	                VAL.SPR.FIRST expressed_synsem ],
            PHON.ONSET con ],
   GENRE robust ].
|#

;; DPF 2020-02-19 - Restrict to finite for now, to avoid robust "he did worse"
worse_worsen_v1_rbst := v_-_unacc_le &
 [ ORTH < "worse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_worsen_v_1_rel",
            LOCAL.CAT.HEAD.VFORM fin,
            PHON.ONSET con ],
   GENRE robust ].

;; DPF 2020-06-18 - Block extraction: |from bad to worse|
worse_worsen_v2_rbst := v_np_noger_le &
 [ ORTH < "worse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_worsen_v_cause_rel",
            LOCAL.CAT.VAL.COMPS.FIRST canonical_synsem,
            PHON.ONSET con ],
   GENRE robust ].

worst_worsen_v1_rbst := v_-_unacc_le &
 [ ORTH < "worst" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_worsen_v_1_rel",
            PHON.ONSET con ],
   GENRE robust ].

worst_worsen_v2_rbst := v_np_noger_le &
 [ ORTH < "worst" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_worsen_v_cause_rel",
            PHON.ONSET con ],
   GENRE robust ].

worth_a1_rbst := aj_vp_i-seq_le &
 [ ORTH < "worth" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_worth_a_1_rel",
            PHON.ONSET con ],
   GENRE robust ].

worthy_a1_rbst := aj_vp_i-wrth_le &
 [ ORTH < "worthy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_worth_a_1_rel",
            PHON.ONSET con ],
   GENRE robust ].

would_aux_pos_cx_lq_rbst := v_vp_mdl-p-cx_le &
 [ ORTH < "‘", "d" >,
   SYNSEM [ LKEYS.KEYREL.PRED _would_v_modal_rel,
            PHON.ONSET con ],
   GENRE robust ].

would_fin_mal := v_vp_fin_le_rbst &
 [ ORTH < "would" >,
   SYNSEM [ LKEYS.KEYREL.PRED _would_v_modal_rel,
            PHON.ONSET con ] ].

would_aux_neg_1_rbst := v_vp_mdl-n_le &
 [ ORTH < "wouldn't" >,
   SYNSEM [ LKEYS.KEYREL.PRED _would_v_modal_rel,
            PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

would_aux_neg_2_rbst := v_vp_mdl-n_le &
 [ ORTH < "wouldn", "'t" >,
   SYNSEM [ LKEYS.KEYREL.PRED _would_v_modal_rel,
            PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

would_aux_neg_1 := v_vp_mdl-n-pst_le &
 [ ORTH < "wouldn't" >,
   SYNSEM [ LKEYS.KEYREL.PRED _would_v_modal_rel,
            PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

would_aux_neg_2 := v_vp_mdl-n-pst_le &
 [ ORTH < "wouldn", "'t" >,
   SYNSEM [ LKEYS.KEYREL.PRED _would_v_modal_rel,
            PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

would_aux_neg_3_u := v_vp_mdl-n-pst_le &
 [ ORTH < "wouldn’t" >,
   SYNSEM [ LKEYS.KEYREL.PRED _would_v_modal_rel,
            PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

would_rather_v1 := v_cp_sbjnct-fin_le &
 [ ORTH < "would", "rather" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_would+rather_v_1_rel",
            PHON.ONSET con ] ].

would_rather_v1_mal := v_cp_sbjnct_le_rbst &
 [ ORTH < "would", "rather" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_would+rather_v_1_rel",
            PHON.ONSET con ] ].

would_rather_cx_v1_mal := v_cp_sbjnct_le_rbst &
 [ ORTH < "’d", "rather" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_would+rather_v_1_rel",
            PHON.ONSET con ] ].

wrinkly_a1_mal := av_-_i-vp-adj_le_rbst &
 [ ORTH < "wrinkly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wrinkly_a_1_rel",
            PHON.ONSET con ] ].

writers_a1_mal := aj_-_i-cmpd_le_rbst &
 [ ORTH < "writers" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_writers_a_1_rel",
            PHON.ONSET con ] ].

x_letter_n1 := n_-_c_le &
 [ ORTH < "X" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_x_n_letter_rel",
            PHON.ONSET voc ] ].

;; DPF 2017-09-07 - See comments for last_det redefinition
;;
yesterday_det := d_-_proxday_le &
 [ ORTH < "yesterday" >,
   SYNSEM [ LOCAL.CONT.HOOK.XARG basic_non_expl-ind & [ E.TENSE no_tense ],
   	    LKEYS.ALTKEYREL.PRED _yesterday_a_1_rel,
            PHON.ONSET con ] ].

yesterday_det_emod := d_-_proxday_le &
 [ ORTH < "yesterday" >,
   SYNSEM [ LOCAL.CONT.HOOK.XARG.E.TENSE past,
   	    LKEYS.ALTKEYREL.PRED _yesterday_a_1_rel,
            PHON.ONSET con ] ].

yesterday_np_emod := n_-_ad-time_le &
 [ ORTH < "yesterday" >,
   SYNSEM [ LOCAL [ CAT.HEAD.CASE non_nom,
   	    	    CONT.HOOK.XARG.E.TENSE past ],
   	    LKEYS [ ALT2KEYREL.PRED _yesterday_a_1_rel,
                    KEYREL.PRED time_n_rel ],
            PHON.ONSET con ] ].

yesterday_det_rbst := d_-_proxday_le &
 [ ORTH < "yesterday" >,
   SYNSEM [ LOCAL.CONT.HOOK.XARG.E.TENSE nonpast,
   	    LKEYS.ALTKEYREL.PRED _yesterday_a_1_rel,
            PHON.ONSET con ],
   GENRE robust ].

yesterday_adv1_mal := av_-_i-vp-pr_le_rbst &
 [ ORTH < "yesterday" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_yesterday_a_1_rel",
            PHON.ONSET con ] ].

yesterday_np := n_-_ad-time_le &
 [ ORTH < "yesterday" >,
   SYNSEM [ LOCAL.CONT.HOOK.XARG basic_non_expl-ind & [ E.TENSE no_tense ],
   	    LKEYS [ ALT2KEYREL.PRED _yesterday_a_1_rel,
                    KEYREL.PRED time_n_rel ],
            PHON.ONSET con ] ].

yesterday_np_rbst := n_-_ad-time_le &
 [ ORTH < "yesterday" >,
   SYNSEM [ LOCAL [ CAT.HEAD.CASE non_nom,
		    CONT.HOOK.XARG [ E [ TENSE nonpast,
					 SAME-PAST - ],
				     SORT event-sort ] ],
	    LKEYS [ ALT2KEYREL.PRED _yesterday_a_1_rel,
                    KEYREL.PRED time_n_rel ],
            PHON.ONSET con ],
   GENRE robust ].

yesterday_adj1_rbst := aj_-_i-att_le &
 [ ORTH [ FIRST "yesterday",
          REST < >,
	  CLASS.+INITIAL - ],
   SYNSEM [ LKEYS.KEYREL.PRED "_yesterday_a_1_rel",
	    LOCAL.CAT.HEAD.MOD < [ --MIN non_proper_rel,
				   LOCAL.CAT.VAL.SPR.FIRST expressed_synsem,
				   --SIND.SORT entity ] >,
            PHON.ONSET con ],
   GENRE robust ].

yet_adv2 := av_-_s-cp-pr_le &
 [ ORTH < "yet" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_yet_a_1_rel",
            PHON.ONSET con ] ].

you_yourself := n_-_pr-you_le &
 [ ORTH < "you", "yourself" >,
   SYNSEM [ LOCAL.AGR.PNG.PN 2s,
            PHON.ONSET con ] ].

you_yourselves := n_-_pr-you_le &
 [ ORTH < "you", "yourselves" >,
   SYNSEM [ LOCAL.AGR.PNG.PN 2p,
            PHON.ONSET con ] ].

;; |try your best to succeed|
your_best_adv1 := av_-_i-vp-po_le &
 [ ORTH < "your", "best" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_your+best_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

your_sincerely_salut_v1_mal := v_np*_salut_le_rbst &
 [ ORTH < "your", "sincerely" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_yours+sincerely_v_1_rel",
            PHON.ONSET con ] ].

your_sincerely_salut_v2_mal := v_np*_salut_le_rbst &
 [ ORTH < "your", "sincerely", "," >,
   SYNSEM [ LKEYS.KEYREL.PRED "_yours+sincerely_v_1_rel",
            PHON.ONSET con ] ].

your_truly_salut_v1_mal := v_np*_salut_le_rbst &
 [ ORTH < "your", "truly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_yours+truly_v_1_rel",
            PHON.ONSET con ] ].

your_truly_salut_v2_mal := v_np*_salut_le_rbst &
 [ ORTH < "your", "truly", "," >,
   SYNSEM [ LKEYS.KEYREL.PRED "_yours+truly_v_1_rel",
            PHON.ONSET con ] ].

;; 2020-04-11 - Let's exclude subject pronouns, to avoid robust
;; |I read your post online|
;; 2020-05-25 - This one is just too aggressive, so disable for now.
#|
you_your_rbst := n_-_pr-you_le &
 [ ORTH < "your" >,
   SYNSEM [ PHON.ONSET con,
	    LOCAL.CAT.HEAD.CASE non_nom ],
   GENRE robust ].
|#
you_yourself_rbst := n_-_pr-you_le &
 [ ORTH < "yourself" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.HEAD.CASE nom ],
   GENRE robust ].

you_yourselves_rbst := n_-_pr-you_le &
 [ ORTH < "yourselves" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.HEAD.CASE nom ],
   GENRE robust ].

young_n3 := n_-_m_le &
 [ ORTH < "young" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_young_n_1_rel",
   	    LOCAL.CAT [ HEAD.CASE obliq,
	    	        VAL.SPR.FIRST unexpressed ],
            PHON.ONSET con ] ].

your_nounif_n1 := n_-_pn-nounif_le &
 [ ORTH < "Your" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Your",
            PHON.ONSET con ] ].

;; DPF 2020-09-17 - Restrict to not modified noun, to avoid robust
;; |We will treat you better next time|
your_you_rbst := d_-_poss-your_le &
 [ ORTH < "you" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT [ HEAD.--POSSRBST +,
			VAL.SPEC.FIRST [ LOCAL.CAT.HEAD noun,
					 MODIFD notmod_or_rmod ] ] ],
   GENRE robust ].

your_yours_rbst := d_-_poss-your_le &
 [ ORTH < "yours" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT [ HEAD.--POSSRBST +,
			VAL.SPEC.FIRST.LOCAL.CAT.HEAD noun ] ],
   GENRE robust ].

your_your_s_rbst := d_-_poss-your_le &
 [ ORTH < "your", "’s" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT [ HEAD.--POSSRBST +,
			VAL.SPEC.FIRST.LOCAL.CAT.HEAD noun ] ],
   GENRE robust ].

your_yourself_rbst := d_-_poss-your_le &
 [ ORTH < "yourself" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT [ HEAD.--POSSRBST +,
			VAL.SPEC.FIRST.LOCAL.CAT.HEAD noun ] ],
   GENRE robust ].

yourself_youself_rbst := n_-_pr-yourself_le &
 [ ORTH < "youself" >,
   SYNSEM.PHON.ONSET con,
   GENRE robust ].

yourself_youself_adv_rbst := av_-_pr-yrself_le &
 [ ORTH < "youself" >,
   SYNSEM.PHON.ONSET con,
   GENRE robust ].

yourselves_youselves_rbst := n_-_pr-yourslves_le &
 [ ORTH < "youselves" >,
   SYNSEM.PHON.ONSET con,
   GENRE robust ].

yourselves_youselves_adv_rbst := av_-_pr-yrslvs_le &
 [ ORTH < "youselves" >,
   SYNSEM.PHON.ONSET con,
   GENRE robust ].

your_yourselfs_rbst := d_-_poss-your_le &
 [ ORTH < "yourself", "’s" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT [ HEAD.--POSSRBST +,
			VAL.SPEC.FIRST.LOCAL.CAT.HEAD noun ] ],
   GENRE robust ].

your_yourselves_rbst := d_-_poss-your_le &
 [ ORTH < "yourselves" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT [ HEAD.--POSSRBST +,
			VAL.SPEC.FIRST.LOCAL.CAT.HEAD noun ] ],
   GENRE robust ].

your_yourselves_2_rbst := d_-_poss-your_le &
 [ ORTH < "yourselve", "’s" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT [ HEAD.--POSSRBST +,
			VAL.SPEC.FIRST.LOCAL.CAT.HEAD noun ] ],
   GENRE robust ].

your_yourselves_3_rbst := d_-_poss-your_le &
 [ ORTH < "yourselves", "’s" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT [ HEAD.--POSSRBST +,
			VAL.SPEC.FIRST.LOCAL.CAT.HEAD noun ] ],
   GENRE robust ].

;;; Capitalization for months

april_nocap := n_np_c-month_le_nocap_rbst &
 [ ORTH < "April" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Apr",
            PHON.ONSET voc ] ].

april_abb_n1_nocap_mal := n_np_c-month_le_nocap_rbst &
 [ ORTH < "Apr" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Apr",
            PHON.ONSET voc ] ].

april_abb_n3_nocap_mal := n_np_c-month_le_nocap_rbst &
 [ ORTH < "Apr." >,
   SYNSEM [ LKEYS.KEYREL.CARG "Apr",
            PHON.ONSET voc ] ].

august_nocap_mal := n_np_c-month_le_nocap_rbst &
 [ ORTH < "August" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Aug",
            PHON.ONSET voc ] ].

august_abb_n1_nocap_mal := n_np_c-month_le_nocap_rbst &
 [ ORTH < "Aug" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Aug",
            PHON.ONSET voc ] ].

august_abb_n3_nocap_mal := n_np_c-month_le_nocap_rbst &
 [ ORTH < "Aug." >,
   SYNSEM [ LKEYS.KEYREL.CARG "Aug",
            PHON.ONSET voc ] ].

december_nocap_mal := n_np_c-month_le_nocap_rbst &
 [ ORTH < "December" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Dec",
            PHON.ONSET con ] ].

december_abb_n1_nocap_mal := n_np_c-month_le_nocap_rbst &
 [ ORTH < "Dec" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Dec",
            PHON.ONSET con ] ].

december_abb_n3_nocap_mal := n_np_c-month_le_nocap_rbst &
 [ ORTH < "Dec." >,
   SYNSEM [ LKEYS.KEYREL.CARG "Dec",
            PHON.ONSET con ] ].

february_nocap_mal := n_np_c-month_le_nocap_rbst &
 [ ORTH < "February" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Feb",
            PHON.ONSET con ] ].

february_abb_n1_nocap_mal := n_np_c-month_le_nocap_rbst &
 [ ORTH < "Feb" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Feb",
            PHON.ONSET con ] ].

february_abb_n3_nocap_mal := n_np_c-month_le_nocap_rbst &
 [ ORTH < "Feb." >,
   SYNSEM [ LKEYS.KEYREL.CARG "Feb",
            PHON.ONSET con ] ].

january_nocap_mal := n_np_c-month_le_nocap_rbst &
 [ ORTH < "January" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Jan",
            PHON.ONSET con ] ].

january_abb_n1_nocap_mal := n_np_c-month_le_nocap_rbst &
 [ ORTH < "Jan" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Jan",
            PHON.ONSET con ] ].

january_abb_n3_nocap_mal := n_np_c-month_le_nocap_rbst &
 [ ORTH < "Jan." >,
   SYNSEM [ LKEYS.KEYREL.CARG "Jan",
            PHON.ONSET con ] ].

july_nocap_mal := n_np_c-month_le_nocap_rbst &
 [ ORTH < "July" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Jul",
            PHON.ONSET con ] ].

july_abb_n1_nocap_mal := n_np_c-month_le_nocap_rbst &
 [ ORTH < "Jul" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Jul",
            PHON.ONSET con ] ].

july_abb_n3_nocap_mal := n_np_c-month_le_nocap_rbst &
 [ ORTH < "Jul." >,
   SYNSEM [ LKEYS.KEYREL.CARG "Jul",
            PHON.ONSET con ] ].

june_nocap_mal := n_np_c-month_le_nocap_rbst &
 [ ORTH < "June" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Jun",
            PHON.ONSET con ] ].

june_abb_n1_nocap_mal := n_np_c-month_le_nocap_rbst &
 [ ORTH < "Jun" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Jun",
            PHON.ONSET con ] ].

june_abb_n3_nocap_mal := n_np_c-month_le_nocap_rbst &
 [ ORTH < "Jun." >,
   SYNSEM [ LKEYS.KEYREL.CARG "Jun",
            PHON.ONSET con ] ].

march_nocap_mal := n_np_c-month_le_nocap_rbst &
 [ ORTH < "March" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Mar",
            PHON.ONSET con ] ].

march_abb_n1_nocap_mal := n_np_c-month_le_nocap_rbst &
 [ ORTH < "Mar" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Mar",
            PHON.ONSET con ] ].

march_abb_n3_nocap_mal := n_np_c-month_le_nocap_rbst &
 [ ORTH < "Mar." >,
   SYNSEM [ LKEYS.KEYREL.CARG "Mar",
            PHON.ONSET con ] ].

may_nocap_mal := n_np_c-month_le_nocap_rbst &
 [ ORTH < "May" >,
   SYNSEM [ LKEYS.KEYREL.CARG "May",
            PHON.ONSET con ] ].

november_nocap_mal := n_np_c-month_le_nocap_rbst &
 [ ORTH < "november" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Nov",
            PHON.ONSET con ] ].

november_abb_n1_nocap_mal := n_np_c-month_le_nocap_rbst &
 [ ORTH < "Nov" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Nov",
            PHON.ONSET con ] ].

november_abb_n3_nocap_mal := n_np_c-month_le_nocap_rbst &
 [ ORTH < "Nov." >,
   SYNSEM [ LKEYS.KEYREL.CARG "Nov",
            PHON.ONSET con ] ].

october_nocap_mal := n_np_c-month_le_nocap_rbst &
 [ ORTH < "October" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Oct",
            PHON.ONSET voc ] ].

october_abb_n1_nocap_mal := n_np_c-month_le_nocap_rbst &
 [ ORTH < "Oct" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Oct",
            PHON.ONSET voc ] ].

october_abb_n3_nocap_mal := n_np_c-month_le_nocap_rbst &
 [ ORTH < "Oct." >,
   SYNSEM [ LKEYS.KEYREL.CARG "Oct",
            PHON.ONSET voc ] ].

september_nocap_mal := n_np_c-month_le_nocap_rbst &
 [ ORTH < "September" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Sep",
            PHON.ONSET con ] ].

september_abb_n1_nocap_mal := n_np_c-month_le_nocap_rbst &
 [ ORTH < "Sept" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Sep",
            PHON.ONSET con ] ].

september_abb_n4_nocap_mal := n_np_c-month_le_nocap_rbst &
 [ ORTH < "Sep" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Sep",
            PHON.ONSET con ] ].

september_abb_n5_nocap_mal := n_np_c-month_le_nocap_rbst &
 [ ORTH < "Sept." >,
   SYNSEM [ LKEYS.KEYREL.CARG "Sep",
            PHON.ONSET con ] ].

september_abb_n8_nocap_mal := n_np_c-month_le_nocap_rbst &
 [ ORTH < "Sep." >,
   SYNSEM [ LKEYS.KEYREL.CARG "Sep",
            PHON.ONSET con ] ].

april_the_det_nocap_mal := d_-_month_le_nocap_rbst &
 [ ORTH < "April", "the" >,
   SYNSEM [ LKEYS.ALTKEYREL.CARG "apr",
            PHON.ONSET voc ] ].

august_the_det_nocap_mal := d_-_month_le_nocap_rbst &
 [ ORTH < "August", "the" >,
   SYNSEM [ LKEYS.ALTKEYREL.CARG "aug",
            PHON.ONSET voc ] ].

december_the_det_nocap_mal := d_-_month_le_nocap_rbst &
 [ ORTH < "December", "the" >,
   SYNSEM [ LKEYS.ALTKEYREL.CARG "dec",
            PHON.ONSET con ] ].

february_the_det_nocap_mal := d_-_month_le_nocap_rbst &
 [ ORTH < "February", "the" >,
   SYNSEM [ LKEYS.ALTKEYREL.CARG "feb",
            PHON.ONSET con ] ].

january_the_det_nocap_mal := d_-_month_le_nocap_rbst &
 [ ORTH < "January", "the" >,
   SYNSEM [ LKEYS.ALTKEYREL.CARG "jan",
            PHON.ONSET con ] ].

july_the_det_nocap_mal := d_-_month_le_nocap_rbst &
 [ ORTH < "July", "the" >,
   SYNSEM [ LKEYS.ALTKEYREL.CARG "jul",
            PHON.ONSET con ] ].

june_the_det_nocap_mal := d_-_month_le_nocap_rbst &
 [ ORTH < "June", "the" >,
   SYNSEM [ LKEYS.ALTKEYREL.CARG "jun",
            PHON.ONSET con ] ].

march_the_det_nocap_mal := d_-_month_le_nocap_rbst &
 [ ORTH < "March", "the" >,
   SYNSEM [ LKEYS.ALTKEYREL.CARG "mar",
            PHON.ONSET con ] ].

may_the_det_nocap_mal := d_-_month_le_nocap_rbst &
 [ ORTH < "May", "the" >,
   SYNSEM [ LKEYS.ALTKEYREL.CARG "may",
            PHON.ONSET con ] ].

november_the_det_nocap_mal := d_-_month_le_nocap_rbst &
 [ ORTH < "November", "the" >,
   SYNSEM [ LKEYS.ALTKEYREL.CARG "nov",
            PHON.ONSET con ] ].

october_the_det_nocap_mal := d_-_month_le_nocap_rbst &
 [ ORTH < "October", "the" >,
   SYNSEM [ LKEYS.ALTKEYREL.CARG "oct",
            PHON.ONSET voc ] ].

september_the_det_nocap_mal := d_-_month_le_nocap_rbst &
 [ ORTH < "September", "the" >,
   SYNSEM [ LKEYS.ALTKEYREL.CARG "sep",
            PHON.ONSET con ] ].

;; Proper name, obligatory specifier |[the] Nile|
;;
generic_proper_spr_ne := n_-_c-nm-gen_le &
  [ ORTH < "_generic_proper_spr_ne_" >,
    TOKENS.+LIST < [ +CLASS proper_spr_ne ] > ].

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Appendix 1
;; double negation (negative polarity)

be_c_am := v_prd_am_le &
 [ ORTH < "am" >,
   SYNSEM [ PHON.ONSET voc,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL na_or_- ] ].

be_c_am_cx_2 := v_prd_am-cx_le &
 [ ORTH < "'m" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL na_or_- ] ].

be_c_am_neg_1 := v_prd_am-n_le &
 [ ORTH < "aren't" >,
   SYNSEM [ PHON.ONSET voc,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

be_c_am_neg_2 := v_prd_am-n_le &
 [ ORTH < "aren", "'t" >,
   SYNSEM [ PHON.ONSET voc,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

be_c_are := v_prd_are_le &
 [ ORTH < "are" >,
   SYNSEM [ PHON.ONSET voc,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL na_or_- ] ].

be_c_are_cx_2 := v_prd_are-cx_le &
 [ ORTH < "’re" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL na_or_- ] ].

be_c_are_neg_1 := v_prd_are-n_le &
 [ ORTH < "aren't" >,
   SYNSEM [ PHON.ONSET voc,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

be_c_are_neg_2 := v_prd_are-n_le &
 [ ORTH < "aren", "'t" >,
   SYNSEM [ PHON.ONSET voc,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

;; DPF 2017-10-04 - Removed COMPS..NEGPOL na_or_-, since we want both
;; |*he is in any trouble| and |he is never in any trouble|
;; so advadd lexrule would have to change the constraint on the complement.
;; Later...
;;
#|
be_c_is := v_prd_is_le &
 [ ORTH < "is" >,
   SYNSEM [ PHON.ONSET voc,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL na_or_- ] ].

be_c_is_cx_2 := v_prd_is-cx_le &
 [ ORTH < "'s" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL na_or_- ] ].
|#

be_c_is_neg_1 := v_prd_is-n_le &
 [ ORTH < "isn't" >,
   SYNSEM [ PHON.ONSET voc,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

be_c_is_neg_2 := v_prd_is-n_le &
 [ ORTH < "isn", "'t" >,
   SYNSEM [ PHON.ONSET voc,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

#|
be_c_was := v_prd_was_le &
 [ ORTH < "was" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL na_or_- ] ].
|#

be_c_was_neg_1 := v_prd_was-n_le &
 [ ORTH < "wasn't" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

be_c_was_neg_2 := v_prd_was-n_le &
 [ ORTH < "wasn", "'t" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

#|
be_c_was_subj := v_prd_was-sv_le &
 [ ORTH < "was" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL na_or_- ] ].
|#

be_c_was_neg_subj_1 := v_prd_was-n-sv_le &
 [ ORTH < "wasn't" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

be_c_was_neg_subj_2 := v_prd_was-n-sv_le &
 [ ORTH < "wasn", "'t" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

#|
be_c_were := v_prd_wre_le &
 [ ORTH < "were" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL na_or_- ] ].
|#

be_c_were_neg_1 := v_prd_wre-n_le &
 [ ORTH < "weren't" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

be_c_were_neg_2 := v_prd_wre-n_le &
 [ ORTH < "weren", "'t" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

be_c_were_subj := v_prd_wre-sv_le &
 [ ORTH < "were" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL na_or_- ] ].

be_c_were_neg_subj_1 := v_prd_wre-n-sv_le &
 [ ORTH < "weren't" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

be_c_were_neg_subj_2 := v_prd_wre-n-sv_le &
 [ ORTH < "weren", "'t" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

#|
be_id_am := v_np_am_le &
 [ ORTH < "am" >,
   SYNSEM [ PHON.ONSET voc,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL na_or_- ] ].

be_id_am_cx_2 := v_np_am-cx_le &
 [ ORTH < "'m" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL na_or_- ] ].
|#

be_id_am_stutter_rbst := v_np_am_le &
 [ ORTH < "am", "am" >,
   SYNSEM.PHON.ONSET voc,
   GENRE robust ].

be_id_am_neg_1 := v_np_am-n_le &
 [ ORTH < "aren't" >,
   SYNSEM [ PHON.ONSET voc,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

be_id_am_neg_2 := v_np_am-n_le &
 [ ORTH < "aren", "'t" >,
   SYNSEM [ PHON.ONSET voc,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

;; 2019-06-20 - Prevent robust free rel complement |are what attract tourists|
be_id_are := v_np_are_le &
 [ ORTH < "are" >,
   SYNSEM [ PHON.ONSET voc,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.CASE non_nom ] ].

#|
be_id_are := v_np_are_le &
 [ ORTH < "are" >,
   SYNSEM [ PHON.ONSET voc,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL na_or_- ] ].

be_id_are_cx_2 := v_np_are-cx_le &
 [ ORTH < "’re" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL na_or_- ] ].
|#

be_id_are_stutter_rbst := v_np_are_le &
 [ ORTH < "are", "are" >,
   SYNSEM.PHON.ONSET voc,
   GENRE robust ].

be_id_are_neg_1 := v_np_are-n_le &
 [ ORTH < "aren't" >,
   SYNSEM [ PHON.ONSET voc,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

be_id_are_neg_2 := v_np_are-n_le &
 [ ORTH < "aren", "'t" >,
   SYNSEM [ PHON.ONSET voc,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

;; DPF 2017-09-12 - Commenting out since we want to get |Cats are no fun|.
#|
be_id_is := v_np_is_le &
 [ ORTH < "is" >,
   SYNSEM [ PHON.ONSET voc,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL na_or_- ] ].
|#

be_id_is_stutter_rbst := v_np_is_le &
 [ ORTH < "is", "is" >,
   SYNSEM.PHON.ONSET voc,
   GENRE robust ].

be_id_was := v_np_was_le &
 [ ORTH < "was" >,
   SYNSEM [ LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.AGR.PNG.PN 13s,
            PHON.ONSET con ] ].

be_id_was_stutter_rbst := v_np_was_le &
 [ ORTH < "was", "was" >,
   SYNSEM.PHON.ONSET con,
   GENRE robust ].

be_id_was_subj := v_np_was-sv_le &
 [ ORTH < "was" >,
   SYNSEM [ LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.AGR.PNG.PN 13s,
            PHON.ONSET con ] ].

be_id_was_neg_3_u := v_np_was-n_le &
 [ ORTH < "wasn’t" >,
   SYNSEM [ LOCAL [ CAT.VAL.COMPS.FIRST.LOCAL.AGR.PNG.PN #pn,
                    AGR.PNG.PN #pn ],           
            PHON.ONSET con ] ].

can_aux_neg_1 := v_vp_mdl-n_le &
 [ ORTH < "can't" >,
   SYNSEM [ LKEYS.KEYREL.PRED _can_v_modal_rel,
            PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

can_aux_neg_2 := v_vp_mdl-n_le &
 [ ORTH < "can", "'t" >,
   SYNSEM [ LKEYS.KEYREL.PRED _can_v_modal_rel,
            PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

could_aux_neg_3b_u := v_vp_mdl-n-untns_le &
 [ ORTH < "couldn’t" >,
   SYNSEM [ LKEYS.KEYREL.PRED _could_v_modal_rel,
            PHON.ONSET con ] ].

could_aux_neg_1 := v_vp_mdl-n-pst_le &
 [ ORTH < "couldn't" >,
   SYNSEM [ LKEYS.KEYREL.PRED _can_v_modal_rel,
            PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

could_aux_neg_2 := v_vp_mdl-n-pst_le &
 [ ORTH < "couldn", "'t" >,
   SYNSEM [ LKEYS.KEYREL.PRED _can_v_modal_rel,
            PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

could_aux_neg_1b := v_vp_mdl-n_le &
 [ ORTH < "couldn't" >,
   SYNSEM [ LKEYS.KEYREL.PRED _could_v_modal_rel,
            PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

could_aux_neg_12 := v_vp_mdl-n_le &
 [ ORTH < "couldn", "'t" >,
   SYNSEM [ LKEYS.KEYREL.PRED _could_v_modal_rel,
            PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

dare_aux_neg_1 := v_vp_mdl-n_le &
 [ ORTH < "daren't" >,
   SYNSEM [ LKEYS.KEYREL.PRED _dare_v_qmodal_rel,
            PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

dare_aux_neg_2 := v_vp_mdl-n_le &
 [ ORTH < "daren", "'t" >,
   SYNSEM [ LKEYS.KEYREL.PRED _dare_v_qmodal_rel,
            PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

did1_neg_1 := v_vp_did-n_le &
 [ ORTH < "didn't" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

did1_neg_2 := v_vp_did-n_le &
 [ ORTH < "didn", "'t" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

do1_neg_1 := v_vp_do-f-n_le &
 [ ORTH < "don't" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

do1_neg_2 := v_vp_do-f-n_le &
 [ ORTH < "don", "'t" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

does1_neg_1 := v_vp_does-n_le &
 [ ORTH < "doesn't" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

does1_neg_2 := v_vp_does-n_le &
 [ ORTH < "doesn", "'t" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

dont_1 := v_vp_dont-imp_le &
 [ ORTH < "don't" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

dont_2 := v_vp_dont-imp_le &
 [ ORTH < "don", "'t" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

hadnt_aux_1 := v_vp_had-n_le &
 [ ORTH < "hadn't" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

hadnt_aux_2 := v_vp_had-n_le &
 [ ORTH < "hadn", "'t" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

hadnt_aux_subj_1 := v_vp_had-n-sv_le &
 [ ORTH < "hadn't" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

hadnt_aux_subj_2 := v_vp_had-n-sv_le &
 [ ORTH < "hadn", "'t" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

hasnt_aux_1 := v_vp_has-n_le &
 [ ORTH < "hasn't" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

hasnt_aux_2 := v_vp_has-n_le &
 [ ORTH < "hasn", "'t" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

have_fin_aux_neg_1 := v_vp_have-f-n_le &
 [ ORTH < "haven't" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

have_fin_aux_neg_2 := v_vp_have-f-n_le &
 [ ORTH < "haven", "'t" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

might_aux_neg_1 := v_vp_mdl-n-sv_le &
 [ ORTH < "mightn't" >,
   SYNSEM [ LKEYS.KEYREL.PRED _might_v_modal_rel,
            PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

might_aux_neg_2 := v_vp_mdl-n-sv_le &
 [ ORTH < "mightn", "'t" >,
   SYNSEM [ LKEYS.KEYREL.PRED _might_v_modal_rel,
            PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

must_aux_neg_1 := v_vp_must-n_le &
 [ ORTH < "mustn't" >,
   SYNSEM [ LKEYS.KEYREL.PRED _must_v_modal_rel,
            PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

must_aux_neg_2 := v_vp_must-n_le &
 [ ORTH < "mustn", "'t" >,
   SYNSEM [ LKEYS.KEYREL.PRED _must_v_modal_rel,
            PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

need_aux_neg_1 := v_vp_mdl-n_le &
 [ ORTH < "needn't" >,
   SYNSEM [ LKEYS.KEYREL.PRED _need_v_qmodal_rel,
            PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

need_aux_neg_2 := v_vp_mdl-n_le &
 [ ORTH < "needn", "'t" >,
   SYNSEM [ LKEYS.KEYREL.PRED _need_v_qmodal_rel,
            PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

need_not_v2 := v_vp_ssr-n3sg_le &
 [ ORTH < "needn't" >,
   SYNSEM [ LKEYS [ ALTKEYREL.PRED neg_rel,
                    KEYREL.PRED "_need_v_1_rel" ],
            PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

need_not_v2 := v_vp_ssr-n3sg_le &
 [ ORTH < "needn", "'t" >,
   SYNSEM [ LKEYS [ ALTKEYREL.PRED neg_rel,
                    KEYREL.PRED "_need_v_1_rel" ],
            PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

ought_aux_neg_1 := v_vp_oght-n_le &
 [ ORTH < "oughtn't" >,
   SYNSEM [ LKEYS.KEYREL.PRED _ought_v_qmodal_rel,
            PHON.ONSET voc,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

ought_aux_neg_2 := v_vp_oght-n_le &
 [ ORTH < "oughtn", "'t" >,
   SYNSEM [ LKEYS.KEYREL.PRED _ought_v_qmodal_rel,
            PHON.ONSET voc,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

should_aux_neg_1 := v_vp_mdl-n_le &
 [ ORTH < "shouldn't" >,
   SYNSEM [ LKEYS.KEYREL.PRED _should_v_modal_rel,
            PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

#|
should_aux_neg_2 := v_vp_mdl-n-pst_le &
 [ ORTH < "shouldn", "'t" >,
   SYNSEM [ LKEYS.KEYREL.PRED _should_v_modal_rel,
            PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

should_aux_neg_3_u := v_vp_mdl-n-pst_le &
 [ ORTH < "shouldn’t" >,
   SYNSEM [ LKEYS.KEYREL.PRED _should_v_modal_rel,
            PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].
|#

will_aux_neg_1 := v_vp_will-n_le &
 [ ORTH < "won't" >,
   SYNSEM [ LKEYS.KEYREL.PRED _will_v_aux_rel,
            PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

will_aux_neg_2 := v_vp_will-n_le &
 [ ORTH < "won", "'t" >,
   SYNSEM [ LKEYS.KEYREL.PRED _will_v_aux_rel,
            PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

