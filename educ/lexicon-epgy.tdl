a_period_np1 := never_unify_le & [ ORTH < "_never_unify_" > ].
a_per_p := never_unify_le & [ ORTH < "_never_unify_" > ].
a_pn_np1 := never_unify_le & [ ORTH < "_never_unify_" > ].
a_team_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;;a_little_deg2 := never_unify_le & [ ORTH < "_never_unify_" > ].
about_adv := never_unify_le & [ ORTH < "_never_unify_" > ].
about_adv2 := never_unify_le & [ ORTH < "_never_unify_" > ].
;;about_deg := never_unify_le & [ ORTH < "_never_unify_" > ].
add_in_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
after_conj := never_unify_le & [ ORTH < "_never_unify_" > ].
;;after_pp := never_unify_le & [ ORTH < "_never_unify_" > ].
age_v2 := never_unify_le & [ ORTH < "_never_unify_" > ].
;aid_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
all_too_deg := never_unify_le & [ ORTH < "_never_unify_" > ].
amber_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
an_per_p := never_unify_le & [ ORTH < "_never_unify_" > ].
ana_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
and_root_post := never_unify_le & [ ORTH < "_never_unify_" > ].
answer_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
any_longer_adv3 := never_unify_le & [ ORTH < "_never_unify_" > ].
any_longer_adv4 := never_unify_le & [ ORTH < "_never_unify_" > ].
apple_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
aria_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
arts_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;;as_nbar := never_unify_le & [ ORTH < "_never_unify_" > ].
attic_a1 := never_unify_le & [ ORTH < "_never_unify_" > ].
away_deg := never_unify_le & [ ORTH < "_never_unify_" > ].
azalea_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
azalea_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
baby_root_post := never_unify_le & [ ORTH < "_never_unify_" > ].
baby_root_pre := never_unify_le & [ ORTH < "_never_unify_" > ].
baby_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;;back_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
back_v2 := never_unify_le & [ ORTH < "_never_unify_" > ].
backpack_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
bad_adv1 := never_unify_le & [ ORTH < "_never_unify_" > ].
bake_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
baker_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
ball_n1_i := never_unify_le & [ ORTH < "_never_unify_" > ].
ball_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
balloon_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
band_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
barbecue_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
barbeque_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
bark_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;;be_inv_are := never_unify_le & [ ORTH < "_never_unify_" > ].
be_inv_are_cx := never_unify_le & [ ORTH < "_never_unify_" > ].
be_inv_are_cx_2 := never_unify_le & [ ORTH < "_never_unify_" > ].
;;be_inv_is := never_unify_le & [ ORTH < "_never_unify_" > ].
be_inv_is_cx := never_unify_le & [ ORTH < "_never_unify_" > ].
be_inv_is_cx_2 := never_unify_le & [ ORTH < "_never_unify_" > ].
;;be_inv_was := never_unify_le & [ ORTH < "_never_unify_" > ].
;;be_inv_were := never_unify_le & [ ORTH < "_never_unify_" > ].
;;be_nv_was_subj := never_unify_le & [ ORTH < "_never_unify_" > ].
be_th_cop_is_plur := never_unify_le & [ ORTH < "_never_unify_" > ].
beach_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
bear_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
bear_v3 := never_unify_le & [ ORTH < "_never_unify_" > ].
;;become_v3 := never_unify_le & [ ORTH < "_never_unify_" > ].
bed_i_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
bed_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
; Needed in student answers
;before_adv1 := never_unify_le & [ ORTH < "_never_unify_" > ].
behind_adv := never_unify_le & [ ORTH < "_never_unify_" > ].
;; For generation, don't want "the flowers being blue"
;; but need it for parsing, so don't block it here.
;be_c_being := never_unify_le & [ ORTH < "_never_unify_" > ].
being_i_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
being_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
beings_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
bicycle_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;;bill_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
bill_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
bob_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
bob_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
bob_v2 := never_unify_le & [ ORTH < "_never_unify_" > ].
bone_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
book_up_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
book_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
book_v2 := never_unify_le & [ ORTH < "_never_unify_" > ].
book_v3 := never_unify_le & [ ORTH < "_never_unify_" > ].
book_v4 := never_unify_le & [ ORTH < "_never_unify_" > ].
booth_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;;bore_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
born_a2 := never_unify_le & [ ORTH < "_never_unify_" > ].
box_in_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
box_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
box_up_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
box_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
boy_root_post := never_unify_le & [ ORTH < "_never_unify_" > ].
boy_root_pre := never_unify_le & [ ORTH < "_never_unify_" > ].
brad_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
;;break_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
breakfast_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
broke_a1 := never_unify_le & [ ORTH < "_never_unify_" > ].
broke_robust := never_unify_le & [ ORTH < "_never_unify_" > ].
brother_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
;;brown_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
buffalo_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
bud_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
bud_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
bug_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
bug_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
bus_in_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
bus_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
bus_v2 := never_unify_le & [ ORTH < "_never_unify_" > ].
buster_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
but_root_post := never_unify_le & [ ORTH < "_never_unify_" > ].
buy_into_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
buy_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
buy_out_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
buy_up_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
by_adv := never_unify_le & [ ORTH < "_never_unify_" > ].
;by_means := never_unify_le & [ ORTH < "_never_unify_" > ].
by_nbar_nbar_p := never_unify_le & [ ORTH < "_never_unify_" > ].
cage_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
cage_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
cake_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
cake_v2 := never_unify_le & [ ORTH < "_never_unify_" > ].
cake_v3 := never_unify_le & [ ORTH < "_never_unify_" > ].
;call_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
call_v5 := never_unify_le & [ ORTH < "_never_unify_" > ].
can_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
card_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;;care_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
carol_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
carry_v3 := never_unify_le & [ ORTH < "_never_unify_" > ].
cast_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
cater_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
char_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
checker_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
chihuahua_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
ching_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
chip_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
chip_v2 := never_unify_le & [ ORTH < "_never_unify_" > ].
chocolate_a1 := never_unify_le & [ ORTH < "_never_unify_" > ].
choice_a1 := never_unify_le & [ ORTH < "_never_unify_" > ].
christian_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
climb_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
clock_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
clock_at_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
close_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
clothe_v2 := never_unify_le & [ ORTH < "_never_unify_" > ].
cloud_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;;coaster_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;; Only in compound `construction paper'
consequence_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
construction_n := never_unify_le & [ ORTH < "_never_unify_" > ].
contest_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
cook_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
cool_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
cooper_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
cork_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
cream_a1 := never_unify_le & [ ORTH < "_never_unify_" > ].
cream_n1 := never_unify_le & [ ORTH < "cream" > ].
cream_n2 := never_unify_le & [ ORTH < "cream." > ].
cream_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
cup_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
cut_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;;dad_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
;;daisy_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
dale_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
dead_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
dig_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
digs_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
do_v3 := never_unify_le & [ ORTH < "_never_unify_" > ].
;do_v4 := never_unify_le & [ ORTH < "_never_unify_" > ].
doctor_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;doe_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
dog_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
don_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;doodle_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
down_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
downstairs_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
draw_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
drew_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;;drive_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
drive_v4 := never_unify_le & [ ORTH < "_never_unify_" > ].
;;drop_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
drove_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
early_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
earn_v2 := never_unify_le & [ ORTH < "_never_unify_" > ].
eats_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
emerald_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;;escape_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
exhibit_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
exhibit_v2 := never_unify_le & [ ORTH < "_never_unify_" > ].
faith_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
fall_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
fall_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
fall_n3 := never_unify_le & [ ORTH < "_never_unify_" > ].
fall_v2 := never_unify_le & [ ORTH < "_never_unify_" > ].
fanny_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
;fast_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
fast_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;; Need for "runs faster"
;;faster := never_unify_le & [ ORTH < "_never_unify_" > ].
father_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
father_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
fbi_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
feed_in_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
feed_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
feed_v3 := never_unify_le & [ ORTH < "_never_unify_" > ].
feel_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;feel_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
fell_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
field_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
field_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
find_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;find_v3 := never_unify_le & [ ORTH < "_never_unify_" > ].
finish_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
finished_a1 := never_unify_le & [ ORTH < "_never_unify_" > ].
fit_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
fix_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
fix_on_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;float_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
floor_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
florida_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
florida_n3 := never_unify_le & [ ORTH < "_never_unify_" > ].
florida_n4 := never_unify_le & [ ORTH < "_never_unify_" > ].
florida_n5 := never_unify_le & [ ORTH < "_never_unify_" > ].
flower_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;flu_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
foot_apostr_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;;for_subconj_fin := never_unify_le & [ ORTH < "_never_unify_" > ].
frank_money_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;;from_ppcomp := never_unify_le & [ ORTH < "_never_unify_" > ].
front_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
fruit_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
fry_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
;; *Dessert fries
fry_v2 := never_unify_le & [ ORTH < "_never_unify_" > ].
gallop_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
game_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
game_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
garden_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
german_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
german_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
; Cannot block simple trans 'give', since want "She gave a bad speech."
; So instead at least restrict NP to [LEX -] to avoid pronouns and names
;give_v2 := never_unify_le & [ ORTH < "_never_unify_" > ].
give_v3 := never_unify_le & [ ORTH < "_never_unify_" > ].
go_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
go_n1_i := never_unify_le & [ ORTH < "_never_unify_" > ].
;;go_on_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;;go_v3 := never_unify_le & [ ORTH < "_never_unify_" > ].
go_v4 := never_unify_le & [ ORTH < "_never_unify_" > ].
;;good_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;goods_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
good_s_adv := never_unify_le & [ ORTH < "_never_unify_" > ].
grace_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
grace_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
grandfather_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
grandfather_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
grandmother_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
green_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
green_v2 := never_unify_le & [ ORTH < "_never_unify_" > ].
grind_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;gummy_a1 := never_unify_le & [ ORTH < "_never_unify_" > ].
gummy_bear_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
hall_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
hank_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
happening_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
hardly_deg := never_unify_le & [ ORTH < "_never_unify_" > ].
;;; Needed for revisions (G3,G4) 
;have_cause := never_unify_le & [ ORTH < "_never_unify_" > ].
hear_v2 := never_unify_le & [ ORTH < "_never_unify_" > ].
heather_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;heck_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
her_poss_stutter_rbst := never_unify_le & [ ORTH < "_never_unify_" > ].
herb_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
hide_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;hike_v2 := never_unify_le & [ ORTH < "_never_unify_" > ].
hill_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
;;hill_post_ttl := never_unify_le & [ ORTH < "_never_unify_" > ].
him_her := never_unify_le & [ ORTH < "_never_unify_" > ].
; Need for Grade 4
;his := never_unify_le & [ ORTH < "_never_unify_" > ].
hold_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
hold_n1_i := never_unify_le & [ ORTH < "_never_unify_" > ].
hole_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
holiday_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
holly_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
hope_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
horseback_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;;house_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
honey_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
house_post_ttl := never_unify_le & [ ORTH < "_never_unify_" > ].
how_freerel_np := never_unify_le & [ ORTH < "_never_unify_" > ].
how_to_a1 := never_unify_le & [ ORTH < "_never_unify_" > ].
how_to_a2 := never_unify_le & [ ORTH < "_never_unify_" > ].
hurt_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
hurt_v2 := never_unify_le & [ ORTH < "_never_unify_" > ].
;; Don't want compound |I breath|, so live without |I and J columns|
i_pn_np1 := never_unify_le & [ ORTH < "_never_unify_" > ].
i_pn_np2 := never_unify_le & [ ORTH < "_never_unify_" > ].
i_suppose_disc := never_unify_le & [ ORTH < "_never_unify_" > ].
i_think_disc := never_unify_le & [ ORTH < "_never_unify_" > ].
ice_n := never_unify_le & [ ORTH < "_never_unify_" > ].
ice_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
ice_v2 := never_unify_le & [ ORTH < "_never_unify_" > ].
in_house_a2 := never_unify_le & [ ORTH < "_never_unify_" > ].
in_ppcomp := never_unify_le & [ ORTH < "_never_unify_" > ].
inch_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;;interest_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
interview_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
itch_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
jack_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
jasmine_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
josh_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
juice_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
jump_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
ken_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
key_a1 := never_unify_le & [ ORTH < "_never_unify_" > ].
key_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
kid_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;;kind_of_deg := never_unify_le & [ ORTH < "_never_unify_" > ].
kind_of_scop := never_unify_le & [ ORTH < "_never_unify_" > ].
kind_pl_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
king_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
lake_title_1 := never_unify_le & [ ORTH < "_never_unify_" > ].
lance_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
lance_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
land_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
land_v3 := never_unify_le & [ ORTH < "_never_unify_" > ].
land_v4 := never_unify_le & [ ORTH < "_never_unify_" > ].
lap_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
last_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
late_a3 := never_unify_le & [ ORTH < "_never_unify_" > ].
lay_a1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;leaf_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
leaf_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
leave_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;;left_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
left_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
letter_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
liberty_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;;light_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
light_v2 := never_unify_le & [ ORTH < "_never_unify_" > ].
;;like_a1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;; Needed for "seemed like ..."
;;like_c := never_unify_le & [ ORTH < "_never_unify_" > ].
like_disc_adv := never_unify_le & [ ORTH < "_never_unify_" > ].
;;like_p_2 := never_unify_le & [ ORTH < "_never_unify_" > ].
little_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
live_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;like_prd_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;living_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
loan_to_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
; Needed for Grade 4
;loan_v2 := never_unify_le & [ ORTH < "_never_unify_" > ].
longer_meas_np := never_unify_le & [ ORTH < "_never_unify_" > ].
look_v4 := never_unify_le & [ ORTH < "_never_unify_" > ].
lose_x_of_v1_i := never_unify_le & [ ORTH < "_never_unify_" > ].
lost_a1 := never_unify_le & [ ORTH < "_never_unify_" > ].
love_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;;love_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
lunch_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
make_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
make_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
;;make_prd_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
make_v6 := never_unify_le & [ ORTH < "_never_unify_" > ].
;mama_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
mama_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
man_root_post := never_unify_le & [ ORTH < "_never_unify_" > ].
man_root_pre := never_unify_le & [ ORTH < "_never_unify_" > ].
man_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
mark_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
;;mark_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
marina_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
market_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
mason_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
matt_a1 := never_unify_le & [ ORTH < "_never_unify_" > ].
max_adv1 := never_unify_le & [ ORTH < "_never_unify_" > ].
max_deg := never_unify_le & [ ORTH < "_never_unify_" > ].
mean_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
means_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
meet_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
memorial_a1 := never_unify_le & [ ORTH < "_never_unify_" > ].
mens_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
; "... the man who drives a Mercedes"
; mercedes_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
meter_abb_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
meter_abb_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
michigan_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
michigan_n3 := never_unify_le & [ ORTH < "_never_unify_" > ].
michigan_n4 := never_unify_le & [ ORTH < "_never_unify_" > ].
michigan_n5 := never_unify_le & [ ORTH < "_never_unify_" > ].
miller_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
miss_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
mom_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
moment_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
momma_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
mother_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
mother_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;move_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;move_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
ms_n3 := never_unify_le & [ ORTH < "_never_unify_" > ].
much_deg2 := never_unify_le & [ ORTH < "_never_unify_" > ].
;;must_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
my_excl_pre := never_unify_le & [ ORTH < "_never_unify_" > ].
;n_lower_np1 := never_unify_le & [ ORTH < "_never_unify_" > ].
n_period_np1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;near_a1 := never_unify_le & [ ORTH < "_never_unify_" > ].
near_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;need_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;need_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
;need_n3 := never_unify_le & [ ORTH < "_never_unify_" > ].
newmexico_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
newmexico_n3 := never_unify_le & [ ORTH < "_never_unify_" > ].
newmexico_n4 := never_unify_le & [ ORTH < "_never_unify_" > ].
newmexico_n5 := never_unify_le & [ ORTH < "_never_unify_" > ].
newmexico_n6 := never_unify_le & [ ORTH < "_never_unify_" > ].
newmexico_n7 := never_unify_le & [ ORTH < "_never_unify_" > ].
never_adv2 := never_unify_le & [ ORTH < "_never_unify_" > ].
never_prdp := never_unify_le & [ ORTH < "_never_unify_" > ].
next_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;;no_disc_root := never_unify_le & [ ORTH < "_never_unify_" > ].
no_longer_adv4 := never_unify_le & [ ORTH < "_never_unify_" > ].
no_root_post := never_unify_le & [ ORTH < "_never_unify_" > ].
noble_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
nose_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
nothing_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
nots_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
number_n3 := never_unify_le & [ ORTH < "_never_unify_" > ].
number_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;o_lower_np1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;; "...with sunglasses on"
;;on_adv := never_unify_le & [ ORTH < "_never_unify_" > ].
on_ppcomp := never_unify_le & [ ORTH < "_never_unify_" > ].
one_roman_title_1 := never_unify_le & [ ORTH < "_never_unify_" > ].
only_adv2 := never_unify_le & [ ORTH < "_never_unify_" > ].
only_adv3 := never_unify_le & [ ORTH < "_never_unify_" > ].
onyx_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
open_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
out_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
out_a1 := never_unify_le & [ ORTH < "_never_unify_" > ].
outside_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
owners_a1_apos := never_unify_le & [ ORTH < "_never_unify_" > ].
owners_a2 := never_unify_le & [ ORTH < "_never_unify_" > ].
owners_a3 := never_unify_le & [ ORTH < "_never_unify_" > ].
;;paint_v2 := never_unify_le & [ ORTH < "_never_unify_" > ].
palm_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;;pant_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
parade_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
parade_v2 := never_unify_le & [ ORTH < "_never_unify_" > ].
parent_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
park_post_ttl := never_unify_le & [ ORTH < "_never_unify_" > ].
;;park_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
party_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
pay_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
pay_off_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
peach_a1 := never_unify_le & [ ORTH < "_never_unify_" > ].
pencil_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
pennsylvania_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
penny_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;pet_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
petunia_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
picnic_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;;picture_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
pinker_a1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;place_n1_i := never_unify_le & [ ORTH < "_never_unify_" > ].
place_v2 := never_unify_le & [ ORTH < "_never_unify_" > ].
po_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
pop_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;;present_a1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;;present_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
present_with_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
pull_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
purr_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
putt_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
quick_adv1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;ray_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
reading_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
read_v2 := never_unify_le & [ ORTH < "_never_unify_" > ].
;realize_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
researches_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
red_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
remain_v6 := never_unify_le & [ ORTH < "_never_unify_" > ].
;report_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;report_v2 := never_unify_le & [ ORTH < "_never_unify_" > ].
;report_v3 := never_unify_le & [ ORTH < "_never_unify_" > ].
;report_v4 := never_unify_le & [ ORTH < "_never_unify_" > ].
;report_v5 := never_unify_le & [ ORTH < "_never_unify_" > ].
;report_v6 := never_unify_le & [ ORTH < "_never_unify_" > ].
;report_v7 := never_unify_le & [ ORTH < "_never_unify_" > ].
restaurant_post_ttl := never_unify_le & [ ORTH < "_never_unify_" > ].
return_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
return_v3 := never_unify_le & [ ORTH < "_never_unify_" > ].
revelation_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;;ride_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
ride_v3 := never_unify_le & [ ORTH < "_never_unify_" > ].
right_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
right_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
right_post_root := never_unify_le & [ ORTH < "_never_unify_" > ].
rise_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;;robin_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
rock_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
roger_root_post := never_unify_le & [ ORTH < "_never_unify_" > ].
roger_root_pre := never_unify_le & [ ORTH < "_never_unify_" > ].
roof_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
room_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
rope_v2 := never_unify_le & [ ORTH < "_never_unify_" > ].
ruin_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;run_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
run_prd_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
sally_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
san_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
san_post_ttl := never_unify_le & [ ORTH < "_never_unify_" > ].
sandwich_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
sandwich_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
save := never_unify_le & [ ORTH < "_never_unify_" > ].
saw_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
saw_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
say_disc_adv := never_unify_le & [ ORTH < "_never_unify_" > ].
;;say_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
school_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
school_v2 := never_unify_le & [ ORTH < "_never_unify_" > ].
seahawk_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
season_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
seat_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
seat_v2 := never_unify_le & [ ORTH < "_never_unify_" > ].
seat_v3 := never_unify_le & [ ORTH < "_never_unify_" > ].
second_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
second_v2 := never_unify_le & [ ORTH < "_never_unify_" > ].
see_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;see_v2 := never_unify_le & [ ORTH < "_never_unify_" > ].
;see_v3 := never_unify_le & [ ORTH < "_never_unify_" > ].
;;see_v7 := never_unify_le & [ ORTH < "_never_unify_" > ].
seek_for_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
sell_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;; We want the dative alternation semantics for |send X to Y|
send_v7 := never_unify_le & [ ORTH < "_never_unify_" > ].
send_v8 := never_unify_le & [ ORTH < "_never_unify_" > ].
shake_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
shed_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
sheet_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
shelter_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
shepherd_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
shoe_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
shopping_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
short_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
short_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
;shot_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
sick_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
singe_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
singe_v2 := never_unify_le & [ ORTH < "_never_unify_" > ].
site_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
site_v2 := never_unify_le & [ ORTH < "_never_unify_" > ].
sitting_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
ski_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
slip_v3 := never_unify_le & [ ORTH < "_never_unify_" > ].
slow_adv1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;slow_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
smart_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
smart_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;smile_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
snake_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
so_a1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;;so_adv1 := never_unify_le & [ ORTH < "_never_unify_" > ].
so_adv2 := never_unify_le & [ ORTH < "_never_unify_" > ].
soap_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
sock_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
something_approx_a1 := never_unify_le & [ ORTH < "_never_unify_" > ].
spill_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
sport_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;; This was commented out, but why?
;; because of "The children spied an interesting bird ..."
;; spy_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;;start_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
station_post_ttl := never_unify_le & [ ORTH < "_never_unify_" > ].
; Needed for "he can't stand garlic ice cream" (neg polarity)
;stand_v4 := never_unify_le & [ ORTH < "_never_unify_" > ].
stay_v3 := never_unify_le & [ ORTH < "_never_unify_" > ].
stew_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
stick_v3 := never_unify_le & [ ORTH < "_never_unify_" > ].
stink_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
; stop_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
store_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
store_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
store_v3 := never_unify_le & [ ORTH < "_never_unify_" > ].
storm_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
strong_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
strong_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
;;study_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
sum_i_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
summary_i_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
sun_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
surprise_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
;t_lower_np1 := never_unify_le & [ ORTH < "_never_unify_" > ].
t_period_np1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;d_lower_np1 := never_unify_le & [ ORTH < "_never_unify_" > ].
d_period_np1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;s_lower_np1 := never_unify_le & [ ORTH < "_never_unify_" > ].
table_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
take_in_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
take_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
take_to_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
take_v1_i := never_unify_le & [ ORTH < "_never_unify_" > ].
talk_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
talk_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
tank_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;taste_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
teachers_a1 := never_unify_le & [ ORTH < "_never_unify_" > ].
teachers_a2 := never_unify_le & [ ORTH < "_never_unify_" > ].
teachers_a3 := never_unify_le & [ ORTH < "_never_unify_" > ].
teachers_a4 := never_unify_le & [ ORTH < "_never_unify_" > ].
tell_v5 := never_unify_le & [ ORTH < "_never_unify_" > ].
ten_four_root_post := never_unify_le & [ ORTH < "_never_unify_" > ].
ten_four_root_pre := never_unify_le & [ ORTH < "_never_unify_" > ].
tent_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
test_v2 := never_unify_le & [ ORTH < "_never_unify_" > ].
the_best_subord := never_unify_le & [ ORTH < "_never_unify_" > ].
the_like := never_unify_le & [ ORTH < "_never_unify_" > ].
they_sg := never_unify_le & [ ORTH < "_never_unify_" > ].
;;think_v3 := never_unify_le & [ ORTH < "_never_unify_" > ].
think_v4 := never_unify_le & [ ORTH < "_never_unify_" > ].
through_a1 := never_unify_le & [ ORTH < "_never_unify_" > ].
throw_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
ticket_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
tiger_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
times_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
tire_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;;to_c_prop_elided := never_unify_le & [ ORTH < "_never_unify_" > ].
to_s_init := never_unify_le & [ ORTH < "_never_unify_" > ].
towel_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
too := never_unify_le & [ ORTH < "_never_unify_" > ].
tool_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
tool_v2 := never_unify_le & [ ORTH < "_never_unify_" > ].
;;train_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;;train_v2 := never_unify_le & [ ORTH < "_never_unify_" > ].
train_v3 := never_unify_le & [ ORTH < "_never_unify_" > ].
;;travel_v2 := never_unify_le & [ ORTH < "_never_unify_" > ].
trinity_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;;truly_deg1 := never_unify_le & [ ORTH < "_never_unify_" > ].
turkey_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
turn_i_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
turn_off_v2 := never_unify_le & [ ORTH < "_never_unify_" > ].
;;turn_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
tutor_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
type_in_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
ultimately_deg := never_unify_le & [ ORTH < "_never_unify_" > ].
united_a1 := never_unify_le & [ ORTH < "_never_unify_" > ].
unite_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
upset_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
upstairs_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
us_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
usually_deg := never_unify_le & [ ORTH < "_never_unify_" > ].
vanished_a1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;;very_a1 := never_unify_le & [ ORTH < "_never_unify_" > ].
vet_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
vietnamese_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
vietnamese_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
;;wait_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
wait_root := never_unify_le & [ ORTH < "_never_unify_" > ].
want_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;;want_prd := never_unify_le & [ ORTH < "_never_unify_" > ].
;;warm_v2 := never_unify_le & [ ORTH < "_never_unify_" > ].
wash_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
wear_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
wed_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
well_adj := never_unify_le & [ ORTH < "_never_unify_" > ].
;;well_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
what_det_freerel := never_unify_le & [ ORTH < "_never_unify_" > ].
;; Needed for `I do what I want'
;what2 := never_unify_le & [ ORTH < "_never_unify_" > ].
when_freerel_np := never_unify_le & [ ORTH < "_never_unify_" > ].
where_cp := never_unify_le & [ ORTH < "_never_unify_" > ].
while_p := never_unify_le & [ ORTH < "_never_unify_" > ].
;whole_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
will_i_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
will_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
will_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
will_v2 := never_unify_le & [ ORTH < "_never_unify_" > ].
will_to_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
wish_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
wish_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
wish_n4 := never_unify_le & [ ORTH < "_never_unify_" > ].
;;wish_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
wish_v3 := never_unify_le & [ ORTH < "_never_unify_" > ].
wish_v4 := never_unify_le & [ ORTH < "_never_unify_" > ].
with_subord_2 := never_unify_le & [ ORTH < "_never_unify_" > ].
womens_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
won_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
wood_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
workings_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
write_v5 := never_unify_le & [ ORTH < "_never_unify_" > ].
writings_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
x_to_y_adj_to := never_unify_le & [ ORTH < "_never_unify_" > ].
; Needed to prevent misanalysis with bare-sg as in |effect to human body|
x_to_y_nbar_to := never_unify_le & [ ORTH < "_never_unify_" > ].
yellow_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
young_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;young_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].

a_det_mass_rbst := d_-_m-c-mal-a_le &
 [ ORTH < "a" >,
   SYNSEM [ LKEYS.KEYREL.PRED _a_q_rel,
            PHON.ONSET voc ] ].

an_det_mass_rbst := d_-_m-c-mal-an_le &
 [ ORTH < "an" >,
   SYNSEM [ LKEYS.KEYREL.PRED _a_q_rel,
            PHON.ONSET voc ] ].

;; Prevent spurious bare-np analysis of |a little brown dog|
a_little := av_-_dg-m_le &
 [ ORTH < "a", "little" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_a+little_x_deg_rel",
            PHON.ONSET voc ] ].

abide_to_by_mal_v1 := v_pp_e_le_rbst &
 [ ORTH < "abide" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_abide_v_by_rel" ],
            PHON.ONSET voc ] ].

above_ground_adv := pp_-_i_le &
 [ ORTH < "above", "ground" >,
   SYNSEM [ LKEYS.KEYREL.PRED _above+ground_p_rel,
            PHON.ONSET voc ] ].

accommodate_to_mal_v1 := v_pp_np_le_rbst &
 [ ORTH < "accommodate" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_accommodate_v_1_rel" ],
            PHON.ONSET voc ] ].

;; This interacts badly with the robust spelling of "too" as "to" in
;; e.g. "according to many historians", so exclude for now.
;;
#|
according_to_p_rbst := p_np_i_le &
 [ ORTH < "according" >,
   SYNSEM [ LKEYS.KEYREL.PRED _according+to_p_rel,
            PHON.ONSET voc ],
   GENRE robust ].
|#

address_to_mal_v1 := v_pp_np_le_rbst &
 [ ORTH < "address" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_address_v_1_rel" ],
            PHON.ONSET voc ] ].

affect_to_mal_v1 := v_pp_np_le_rbst &
 [ ORTH < "affect" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_affect_v_1_rel" ],
            PHON.ONSET voc ] ].

aged_a1 := v_-_psv_le &
 [ ORTH < "aged" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_age_v_1_rel",
            PHON.ONSET voc ] ].

agree_with_mal_v1 := v_np_pp_le_rbst &
 [ ORTH < "agree" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_agree_v_with_rel",
            PHON.ONSET voc ] ].

aircraft_n1 := n_-_c_le &
 [ ORTH < "aircraft" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_aircraft_n_1_rel",
	    LOCAL.CAT cat_infl_nosuff,
            PHON.ONSET voc ] ].

airport_n1 := n_-_c_le &
 [ ORTH < "airport" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_airport_n_1_rel",
            LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET voc ] ].

alarm_n1 := n_-_c_le &
 [ ORTH < "alarm" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_alarm_n_1_rel",
            PHON.ONSET voc ] ].

alarm_v1 := v_np_le &
 [ ORTH < "alarm" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_alarm_v_1_rel",
            LOCAL.CAT.HEAD.--MAL3SG -,
            PHON.ONSET voc ] ].

;; Restrict this to plural noun heads, to avoid ambiguity for "all night"
;;
all_det_adj := d_-_all-tm_le &
 [ ORTH < "all" >,
   SYNSEM [ LKEYS.ALTKEYREL.PRED "_all_a_1_rel",
            LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.AGR.PNG.PN 3p,
            PHON.ONSET voc ] ].

all_mal_adj := aj_-_i-one_le_rbst &
 [ ORTH < "all" >,
   SYNSEM.PHON.ONSET voc ].

allocate_of_to_mal_v1 := v_np-pp_e_le_rbst &
 [ ORTH < "allocate" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _of_p_sel_rel,
		    KEYREL.PRED "_allocate_v_to_rel" ],
            PHON.ONSET voc ] ].

allocate_on_to_mal_v1 := v_np-pp_e_le_rbst &
 [ ORTH < "allocate" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _on_p_sel_rel,
		    KEYREL.PRED "_allocate_v_to_rel" ],
            PHON.ONSET voc ] ].

all_night_adv1 := av_-_i-vp-po_le &
 [ ORTH < "all", "night" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_all+night_a_1_rel",
            PHON.ONSET voc ] ].

;; Make mal entry to allow stylistic guidance
;;
always_adv3 := av_-_i-vp-po_le_rbst &
 [ ORTH < "always" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_always_a_1_rel",
            PHON.ONSET voc ] ].

amoses_n1 := n_-_pn-pl-def_le &
 [ ORTH < "Amoses" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Amos",
            PHON.ONSET voc ] ].

anaconda_n1 := n_-_c_le &
 [ ORTH < "anaconda" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_anaconda_n_1_rel",
	    LOCAL.CAT cat_infl_nosuff,
            PHON.ONSET voc ] ].

;; To also generate reversed order of conjuncts via paraphrase rule.
;;
and_conj_rev := c_xp_and_le &
 [ ORTH < "and" >,
   SYNSEM [ LKEYS.KEYREL.PRED _and_c_rev_rel,
            PHON.ONSET voc ] ].

or_conj_rev := c_xp_or_le &
 [ ORTH < "or" >,
   SYNSEM [ LKEYS.KEYREL.PRED _or_c_rev_rel,
            PHON.ONSET voc ] ].

; Block |he/she|
and_or_conj_3 := c_xp_and-or_le &
 [ ORTH < "/" >,
   SYNSEM [ LOCAL.CAT.VAL.COMPS.FIRST.--MIN nonpro_or_event_rel,
	    PHON.ONSET voc ] ].

angle_v1 := v_-_le &
 [ ORTH < "angle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_angle_v_1_rel",
            LOCAL.CAT.HEAD.--MALN3SG -,
            PHON.ONSET voc ] ].

angrier_a1_mal := aj_-_i-cmp_le_rbst &
 [ ORTH < "angrier" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_angry_a_at_rel",
            PHON.ONSET voc ] ].

any_longer_adv1 := av_-_i-vp-x_le &
 [ ORTH < "any", "longer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_any+longer_a_1_rel",
            PHON.ONSET con,
	    LOCAL.CAT.NEGPOL - ] ].

any_longer_adv2 := av_-_i-vp-po_le &
 [ ORTH < "any", "longer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_any+longer_a_1_rel",
            PHON.ONSET con,
	    LOCAL.CAT.NEGPOL - ] ].

anything := n_-_pr_le &
 [ ORTH < "anything" >,
   SYNSEM [ LKEYS [ ALTKEYREL.PRED _any_q_rel,
                    KEYREL.PRED thing_rel ],
            PHON.ONSET voc,
	    LOCAL.CAT.NEGPOL - ] ].

answer_n1 := n_pp_c-ns_le &
 [ ORTH < "answer" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_answer_n_to_rel" ],
            LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET voc ] ].

appeared_a1_post := v_-_psv-post_le_rbst &
 [ ORTH < "appeared" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_appear_v_1_rel",
            PHON.ONSET voc ] ].

appeared_a1_pre := v_-_psv-pre_le_rbst &
 [ ORTH < "appeared" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_appear_v_1_rel",
            PHON.ONSET voc ] ].

apply_in_to_mal_v1 := v_np-pp_e_le_rbst &
 [ ORTH < "apply" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _in_p_sel_rel,
		    KEYREL.PRED "_apply_v_to_rel" ],
            PHON.ONSET voc ] ].

approach_to_mal_v1 := v_pp_np_le_rbst &
 [ ORTH < "approach" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_approach_v_1_rel" ],
            PHON.ONSET voc ] ].

archerfish_n1 := n_-_c_le &
 [ ORTH < "archerfish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_archerfish_n_1_rel",
	    LOCAL.CAT cat_infl_nosuff,
            PHON.ONSET voc ] ].

artists_a1_mal := aj_-_i-cmpd_le_rbst &
 [ ORTH < "artists" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_artists_a_1_rel",
            PHON.ONSET voc ] ].

associate_to_with_mal_v1 := v_np-pp_e_le_rbst &
 [ ORTH < "associate" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _to_p_sel_rel,
		    KEYREL.PRED "_associate_v_with_rel" ],
            PHON.ONSET voc ] ].

athletes_a1_mal := aj_-_i-cmpd_le_rbst &
 [ ORTH < "athletes" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_athletes_a_1_rel",
            PHON.ONSET voc ] ].

attorneys_a1_mal := aj_-_i-cmpd_le_rbst &
 [ ORTH < "attorneys" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_attorneys_a_1_rel",
            PHON.ONSET voc ] ].

avenue_n2 := n_-_c_le &
 [ ORTH < "ave" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_avenue_n_1_rel",
            LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET voc ] ].

bankers_a1_mal := aj_-_i-cmpd_le_rbst &
 [ ORTH < "bankers" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bankers_a_1_rel",
            PHON.ONSET con ] ].

;; 13-03-18: Since we are blocking adjective subj's altogether, let's just
;; treat the VP and PP as okay.
#|
be_inv_are_rbst := v_np_locinv-are_le &
 [ ORTH < "are" >,
   SYNSEM.PHON.ONSET voc,
   GENRE robust ].

be_inv_be_rbst := v_np_locinv-be_le &
 [ ORTH < "be" >,
   SYNSEM.PHON.ONSET con,
   GENRE robust ].

be_inv_is_rbst := v_np_locinv-is_le &
 [ ORTH < "is" >,
   SYNSEM.PHON.ONSET voc,
   GENRE robust ].

be_inv_was_rbst := v_np_locinv-was_le &
 [ ORTH < "was" >,
   SYNSEM.PHON.ONSET con,
   GENRE robust ].

be_inv_were_rbst := v_np_locinv-were_le &
 [ ORTH < "were" >,
   SYNSEM.PHON.ONSET con,
   GENRE robust ].
|#

ask_v1 := v_np-np*_nodat_le &
 [ ORTH < "ask" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ask_v_1_rel",
            PHON.ONSET voc ] ].

asleep_adv1 := av_-_i-vp-po_le &
 [ ORTH < "asleep" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_asleep_a_1_rel",
            PHON.ONSET con ] ].

aspirin_n1 := n_-_mc_le &
 [ ORTH < "aspirin" >,
   SYNSEM [ MODIFD.LPERIPH +,
	    LKEYS.KEYREL.PRED "_aspirin_n_1_rel",
            PHON.ONSET voc ] ].

at_home_adv := pp_-_i_le &
 [ ORTH < "at", "home" >,
   SYNSEM [ LKEYS.KEYREL.PRED _at+home_p_rel,
            PHON.ONSET voc ] ].

atlantic_ocean_n1 := n_-_c-nm_le &
 [ ORTH < "Atlantic", "Ocean" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Atlantic+Ocean",
            PHON.ONSET voc ] ].

attention_on_to_mal_n1 := n_pp_m_le_rbst &
 [ ORTH < "attention" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
		    KEYREL.PRED "_attention_n_to_rel" ],
            PHON.ONSET voc ] ].

attic_mouse_n1 := n_-_c_le &
 [ ORTH < "attic", "mouse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_attic+mouse_n_1_rel",
            LOCAL.AGR.PNG.PN 3s,
            PHON.ONSET voc ] ].

attic_mice_n1 := n_-_c-pl-ifl_le &
 [ ORTH < "attic", "mice" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_attic+mouse_n_1_rel",
            PHON.ONSET voc ] ].

aunt_n1 := n_pp_c-of_le &
 [ ORTH < "aunt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_aunt_n_of_rel",
            LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET voc ] ].

aunt_n2 := n_-_c-pre-ttl_le &
 [ ORTH < "aunt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_aunt_n_of_rel",
            LOCAL.CAT.HEAD.MINORS.MIN pre_title_rel,
            PHON.ONSET voc ] ].

author_eb_white_n1 := n_-_pn-msc_le &
 [ ORTH < "author", "E", "B", "White" >,
   SYNSEM [ LKEYS.KEYREL.CARG "EBWhite",
            PHON.ONSET voc ] ].

author_eb_white_n2 := n_-_pn-msc_le &
 [ ORTH < "author", "E.", "B.", "White" >,
   SYNSEM [ LKEYS.KEYREL.CARG "EBWhite",
            PHON.ONSET voc ] ].

author_eb_white_n3 := n_-_pn-msc_le &
 [ ORTH < "author", "E", "B.", "White" >,
   SYNSEM [ LKEYS.KEYREL.CARG "EBWhite",
            PHON.ONSET voc ] ].

author_eb_white_n4 := n_-_pn-msc_le &
 [ ORTH < "author", "E.", "B", "White" >,
   SYNSEM [ LKEYS.KEYREL.CARG "EBWhite",
            PHON.ONSET voc ] ].

a_plus_n1 := n_-_c_le &
 [ ORTH < "A+" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_A+_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,   
            PHON.ONSET voc ] ].

a_pn_np1 := n_-_pn-nounif_le &
 [ ORTH < "A" >,
   SYNSEM [ LKEYS.KEYREL.CARG "A",
            PHON.ONSET voc ] ].

baby_a1 := aj_-_i-att_le &
 [ ORTH < "baby" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_baby_a_1_rel",
            LOCAL.CAT.HEAD.MOD < [ --SIND.IND +,
				   MODIFD.LPERIPH na_or_- ] >,
            PHON.ONSET con ] ].

back_n1 := n_-_c_le &
 [ ORTH < "back" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_back_n_1_rel",
	    MODIFD.LPERIPH bool,
            PHON.ONSET con ] ].

bad_a1 := aj_pp_i-er_le &
 [ ORTH < "bad" >,
   SYNSEM [ LKEYS [ --COMPKEY _at_p_sel_rel,
                    KEYREL.PRED "_bad_a_at_rel" ],
            PHON.ONSET con ] ].

bad_adv1_rbst := av_-_i-vp-po_le &
 [ ORTH < "bad" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bad_a_1_rel",
            PHON.ONSET con ],
   GENRE robust ].

;; Avoid misanalysis for |yesterday he baked apple pie|
;;
bake_v3 := v_np-np_only_le &
 [ ORTH < "bake" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bake_v_cause_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

bakers_n1 := n_-_pn-pl-def_le &
 [ ORTH < "Bakers" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Baker",
            PHON.ONSET con ] ].

ball_n1 := n_pp_c-of_le &
 [ ORTH < "ball" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ball_n_of_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

ballpark_n1 := n_-_c_le &
 [ ORTH < "ballpark" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ballpark_n_1_rel",
            LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

bank_n1 := n_pp_mc-of-lhc_le &
 [ ORTH < "bank" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bank_n_of_rel",
            LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

barbequed_a1 := v_-_psv_le &
 [ ORTH < "barbequed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_barbeque_v_1_rel",
            PHON.ONSET con ] ].

basketball_team_n2 := n_-_c-pl-ifl_le &
 [ ORTH < "basketball", "team" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_basketball+team_n_1_rel",
            PHON.ONSET con ] ].

be_is_has_rbst := v_vp_has_le &
 [ ORTH < "is" >,
   SYNSEM.PHON.ONSET voc,
   GENRE robust,
   ALTS.VPELLIP - ].

be_are_have_rbst := v_vp_have-f_le &
 [ ORTH < "are" >,
   SYNSEM.PHON.ONSET voc,
   GENRE robust,
   ALTS.VPELLIP - ].

be_was_had_rbst := v_vp_had_le &
 [ ORTH < "was" >,
   SYNSEM.PHON.ONSET con,
   GENRE robust,
   ALTS.VPELLIP - ].

be_were_had_rbst := v_vp_had_le &
 [ ORTH < "were" >,
   SYNSEM.PHON.ONSET con,
   GENRE robust,
   ALTS.VPELLIP - ].

bear_n1 := n_-_c-ugen_le &
 [ ORTH < "bear" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bear_n_1_rel",
            PHON.ONSET con ] ].

beaver_n1 := n_-_c_le &
 [ ORTH < "beaver" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_beaver_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

;; Since we sometimes do want to allow S-initial `because', let's just let it
;; be.
#|
; Restrict to post-modifier
because := p_cp_s_le &
 [ ORTH < "because" >,
   SYNSEM [ LOCAL.CAT.POSTHD +,
            LKEYS.KEYREL.PRED "_because_x_rel",
            PHON.ONSET con ] ].

because_rbst := p_cp_s_le &
 [ ORTH < "because" >,
   SYNSEM [ LOCAL.CAT [ POSTHD -,
   	    	        VAL.COMPS.FIRST.PUNCT.RPUNCT comma_punct ],
            LKEYS.KEYREL.PRED "_because_x_rel",
            PHON.ONSET con ],
   GENRE robust ].
|#

because_that_rbst := p_cp_s_le &
 [ ORTH < "because", "that" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_because_x_rel",
            PHON.ONSET con ],
   GENRE robust ].

because_to_rbst := p_vp_inf_le &
 [ ORTH < "because" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_because+to_x_rel",
            PHON.ONSET con ],
   GENRE robust ].

become_v2 := v_np_id_le &
 [ ORTH < "become" >,
   SYNSEM [ LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--BARE -,
	    LKEYS.KEYREL.PRED "_become_v_id_rel",
            PHON.ONSET con ] ].

bed_n1 := n_-_c_le &
 [ ORTH < "bed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bed_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

benefit_to_mal_v1 := v_pp_np_le_rbst &
 [ ORTH < "benefit" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_benefit_v_1_rel" ],
            PHON.ONSET con ] ].

bernsteins_n1 := n_-_pn-pl-def_le &
 [ ORTH < "Bernsteins" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Bernstein",
            PHON.ONSET con ] ].

better_adv_mal := av_-_i-vp-cmp_le_rbst &
 [ ORTH < "better" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_better_a_1_rel",
            PHON.ONSET con ] ].

better_a1_mal := aj_-_i-cmp_le_rbst &
 [ ORTH < "better" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_good_a_at-for-of_rel",
            PHON.ONSET con ] ].

big_head_mask_n1 := n_-_c-nm_le &
 [ ORTH < "Big-", "Head", "Mask" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Big-Head+Mask",
            PHON.ONSET con ] ].

bigger_a1_mal := aj_-_i-cmp_le_rbst &
 [ ORTH < "bigger" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_big_a_1_rel",
            PHON.ONSET con ] ].

; Probably should constrain this to nonpast, non-past-part.
bike_ride_v1 := v_pp*_dir_le &
 [ ORTH < "bike", "ride" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bike+ride_v_1_rel",
            PHON.ONSET con ] ].

bill_n1 := n_pp_c-of-lhc_le &
 [ ORTH < "bill" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bill_n_of_rel",
   	    LOCAL.CAT.HEAD.--BARE -,   
            PHON.ONSET con ] ].

billfish_n1 := n_-_c_le &
 [ ORTH < "billfish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_billfish_n_1_rel",
	    LOCAL.CAT cat_infl_nosuff,
            PHON.ONSET con ] ].

bird_feeding_a1 := aj_-_i_le &
 [ ORTH < "bird", "feeding" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bird+feeding_a_1_rel",
            PHON.ONSET con ] ].

birth_idm_n1 := n_-_m-idm_le &
 [ ORTH < "birth" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_birth_n_1_rel",
            PHON.ONSET con ] ].

birthday_n1 := n_-_c_le &
 [ ORTH < "birthday" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_birthday_n_1_rel",
            PHON.ONSET con ] ].

black_n1 := n_-_c_le &
 [ ORTH < "black" >,
   SYNSEM [ LOCAL.CAT.HEAD.MINORS.NORM norm_rel,
   	    LKEYS.KEYREL.PRED "_black_n_1_rel",
            PHON.ONSET con ] ].

black_dignity_n1 := n_-_m_le &
 [ ORTH < "black", "dignity" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_black+dignity_n_1_rel",
            PHON.ONSET con ] ].

black_triumph_n1 := n_-_m_le &
 [ ORTH < "black", "triumph" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_black+triumph_n_1_rel",
            PHON.ONSET con ] ].

bloodier_a1_mal := aj_-_i-cmp_le_rbst &
 [ ORTH < "bloodier" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bloody_a_1_rel",
            PHON.ONSET con ] ].

blossom_n1 := n_-_c_le &
 [ ORTH < "blossom" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_blossom_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,   
            PHON.ONSET con ] ].

blues_n1 := n_-_c-pl-ifl_le &
 [ ORTH < "blues" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_blue_n_1_rel",
            PHON.ONSET con ] ].

blurrier_a1_mal := aj_-_i-cmp_le_rbst &
 [ ORTH < "blurrier" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_blurry_a_1_rel",
            PHON.ONSET con ] ].

bolder_a1_mal := aj_-_i-cmp_le_rbst &
 [ ORTH < "bolder" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bold_a_1_rel",
            PHON.ONSET con ] ].

bore_v1 := v_np_le &
 [ ORTH < "bore" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bore_v_1_rel",
            PHON.ONSET con ] ].

#|
bore_mal_v1 := v_-_le_rbst &
 [ ORTH < "bore" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bore_v_1_rel",
            PHON.ONSET con ] ].
|#

boulevard_n1 := n_-_c_le &
 [ ORTH < "boulevard" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_boulevard_n_1_rel",
            LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

boy_n1 := n_-_c-msc_le &
 [ ORTH < "boy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_boy_n_1_rel",
            PHON.ONSET con ] ].

braver_a1_mal := aj_-_i-cmp_le_rbst &
 [ ORTH < "braver" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_brave_a_1_rel",
            PHON.ONSET con ] ].

breakfast_n1 := n_-_mc_le &
 [ ORTH < "breakfast" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_breakfast_n_1_rel",
            LOCAL.CONT.HOOK.INDEX.PNG.GEN neut,
            PHON.ONSET con ] ].

bridge_n1 := n_-_c_le &
 [ ORTH < "bridge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bridge_n_1_rel",
            LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

brief_n1 := n_-_c_le &
 [ ORTH < "brief" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_brief_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,   
            PHON.ONSET con ] ].

brighter_a1_mal := aj_-_i-cmp_le_rbst &
 [ ORTH < "brighter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bright_a_1_rel",
            PHON.ONSET con ] ].

bring_v1 := v_np_le &
 [ ORTH < "bring" >,
   ALTS.ATTRJ -,
   SYNSEM [ LKEYS.KEYREL.PRED "_bring_v_1_rel",
            PHON.ONSET con ] ].

bring_mal_v1 := v_-_le_rbst &
 [ ORTH < "bring" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bring_v_1_rel",
            PHON.ONSET con ] ].

british_nounif_n1 := n_-_pn-nounif_le &
 [ ORTH < "British" >,
   SYNSEM [ LKEYS.KEYREL.CARG "British",
            PHON.ONSET con ] ].

broccoli_n1 := n_-_mc_le &
 [ ORTH < "broccoli" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_broccoli_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,   
            PHON.ONSET con ] ].

brother_n1 := n_pp_c-of-msc_le &
 [ ORTH < "brother" >,
   SYNSEM [ LOCAL.CAT.HEAD.MINORS.NORM norm_rel,
	    LKEYS.KEYREL.PRED "_brother_n_of_rel",
            PHON.ONSET con ] ].

brush_v1 := v_np_le &
 [ ORTH < "brush" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_brush_v_1_rel",
            PHON.ONSET con ] ].

building_n1 := n_-_c_le &
 [ ORTH < "building" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_building_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,   
            PHON.ONSET con ] ].

burn_n1 := n_-_c_le &
 [ ORTH < "burn" >,
   SYNSEM [ LOCAL.CAT.HEAD.MINORS.NORM norm_rel,
   	    LKEYS.KEYREL.PRED "_burn_n_1_rel",
            PHON.ONSET con ] ].

burned_out_a1 := aj_-_i_le &
 [ ORTH < "burned-", "out" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_burned-out_a_1_rel",
            PHON.ONSET con ] ].

;; We want to allow initial `but', though perhaps mark it as stylistically
;; robust

but_adv1 := av_-_s-cp-pr_le &
 [ ORTH < "but" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_but_a_1_rel",
            PHON.ONSET con ] ].

;; COMPS..RPERIPH na_or_- blocks misanalysis of |he buys his cats toys|
;;
buy_v1 := v_np_ntr_le &
 [ ORTH < "buy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_buy_v_1_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.MODIFD.RPERIPH bool,
            PHON.ONSET con ] ].

buy_mal_v1 := v_-_le_rbst &
 [ ORTH < "buy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_buy_v_1_rel",
            PHON.ONSET con ] ].

buy_v4 := v_np-np_only_le &
 [ ORTH < "buy" >,
   ALTS.PASSIVE -,
   SYNSEM [ LKEYS.KEYREL.PRED "_buy_v_1_rel",
            PHON.ONSET con ] ].

by_p := p_np_i-dgsp_le &
 [ ORTH < "by" >,
   SYNSEM [ LOCAL.CAT.VAL.COMPS < [ LOCAL.CAT.HEAD.--BARE - ] >,
   	    LKEYS.KEYREL.PRED _by_p_rel,
            PHON.ONSET con ] ].

c_grade_n1 := n_-_c_le &
 [ ORTH < "C" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_C_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,   
            PHON.ONSET con ] ].

cake_n1 := n_-_mc_le &
 [ ORTH < "cake" >,
   SYNSEM [ MODIFD.LPERIPH na,
	    LKEYS.KEYREL.PRED "_cake_n_1_rel",
            PHON.ONSET con ] ].

call_n1 := n_-_c_le &
 [ ORTH < "call" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_call_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

; DPF 2010-08-31 - Need elided `can' for |run as fast as you can|
#|
can_aux_pos := v_vp_mdl-p_le &
 [ ORTH < "can" >,
   SYNSEM [ LKEYS.KEYREL.PRED _can_v_modal_rel,
            PHON.ONSET con ],
   ALTS.VPELLIP - ].
|#

can_n1 := n_-_c_le &
 [ ORTH < "can" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_can_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

canned_a1 := aj_-_i_le &
 [ ORTH < "canned" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_canned_a_1_rel",
            PHON.ONSET con ] ].

captain_n2 := n_-_c-pre-ttl_le &
 [ ORTH < "captain" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_captain_n_of_rel",
            LOCAL.CAT.HEAD.MINORS.MIN pre_title_rel,
            PHON.ONSET con ] ].

capture_the_flag_n1 := n_-_pn_le &
 [ ORTH < "Capture", "the", "Flag" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Capture+the+Flag",
            PHON.ONSET con ] ].

carrolls_n1 := n_-_pn-pl-def_le &
 [ ORTH < "Carrolls" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Carroll",
            PHON.ONSET con ] ].

carry_mal_v1 := v_-_le_rbst &
 [ ORTH < "carry" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_carry_v_1_rel",
            PHON.ONSET con ] ].

case_n1 := n_pp_c-of_le &
 [ ORTH < "case" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_case_n_of_rel",
            PHON.ONSET con ] ].

catch_n1 := n_-_c_le &
 [ ORTH < "catch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_catch_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

cater_for_to_mal_v1 := v_pp_e_le_rbst &
 [ ORTH < "cater" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_cater_v_to_rel" ],
            PHON.ONSET con ] ].

cater_on_to_mal_v1 := v_pp_e_le_rbst &
 [ ORTH < "cater" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_cater_v_to_rel" ],
            PHON.ONSET con ] ].

cater_to_mal_v1 := v_np_pp_le_rbst &
 [ ORTH < "cater" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cater_v_to_rel",
            PHON.ONSET con ] ].

catfish_n1 := n_-_c_le &
 [ ORTH < "catfish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_catfish_n_1_rel",
	    LOCAL.CAT cat_infl_nosuff,
            PHON.ONSET con ] ].

cathedral_n1 := n_-_c_le &
 [ ORTH < "cathedral" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cathedral_n_1_rel",
            LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

cctv_nounif_n1 := n_-_pn-nounif_le &
 [ ORTH < "CCTV" >,
   SYNSEM [ LKEYS.KEYREL.CARG "CCTV",
            PHON.ONSET con ] ].

changs_n1 := n_-_pn-pl-def_le &
 [ ORTH < "Changs" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Chang",
            PHON.ONSET con ] ].

chase_n1 := n_-_c_le &
 [ ORTH < "chase" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chase_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

cheaper_adv_mal := av_-_i-vp-cmp_le_rbst &
 [ ORTH < "cheaper" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cheaper_a_1_rel",
            PHON.ONSET con ] ].

cheaper_a1_mal := aj_-_i-cmp_le_rbst &
 [ ORTH < "cheaper" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cheap_a_1_rel",
            PHON.ONSET con ] ].

; See RWL "He cheered her with a card"
#|
cheer_v1 := v_-_le &
 [ ORTH < "cheer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cheer_v_1_rel",
            PHON.ONSET con ] ].
|#

chewing_gum_n1 := n_-_m_le &
 [ ORTH < "chewing", "gum" >,
   SYNSEM [ MODIFD.LPERIPH +,
	    LKEYS.KEYREL.PRED "_chewing+gum_n_1_rel",
            PHON.ONSET con ] ].

child_n1 := n_-_c-ugen_le &
 [ ORTH < "child" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_child_n_1_rel",
            PHON.ONSET con ] ].

childrens_a1_mal := aj_-_i-cmpd_le_rbst &
 [ ORTH < "childrens" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_childrens_a_1_rel",
            PHON.ONSET con ] ].

childs_a1_mal := aj_-_i-cmpd_le_rbst &
 [ ORTH < "childs" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_childs_a_1_rel",
            PHON.ONSET con ] ].

chile_n1 := n_-_c_le &
 [ ORTH < "chile" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chile_n_1_rel",
            PHON.ONSET con ] ].

chocolate_n1 := n_-_m_le &
 [ ORTH < "chocolate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chocolate_n_1_rel",
            PHON.ONSET con ] ].

choice_n1 := n_pp_c-of_le &
 [ ORTH < "choice" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_choice_n_of_rel",
            PHON.ONSET con ] ].

chore_n1 := n_-_c-ns_le &
 [ ORTH < "chore" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chore_n_1_rel",
	    LOCAL.CAT.HEAD.MINORS.NORM norm_rel,
            PHON.ONSET con ] ].

city_n2 := n_-_c_le &
 [ ORTH < "city" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_city_n_1_rel",
            LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

;; While we are blocking vocatives (for better precision generally), add
;; this hack
class_root_pre := av_-_s-cp-mc-pr_le &
 [ ORTH < "class" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_class_n_voc_rel",
            PHON.ONSET con ] ].

class_n1 := n_pp_mc-of_le &
 [ ORTH < "class" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_class_n_of_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

clean_prtcl := pp_-_ptcl_le &
 [ ORTH < "clean" >,
   SYNSEM [ LKEYS.KEYREL.PRED _clean_a_sel_rel,
            PHON.ONSET con ] ].

cleaner_adv_mal := av_-_i-vp-cmp_le_rbst &
 [ ORTH < "cleaner" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cleaner_a_1_rel",
            PHON.ONSET con ] ].

cleaner_aj_mal := aj_-_i-cmp_le_rbst &
 [ ORTH < "cleaner" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_clean_a_of_rel",
            PHON.ONSET con ] ].

cleaning_n1 := n_-_c_le &
 [ ORTH < "cleaning" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cleaning_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

clear_v1 := v_np_le &
 [ ORTH < "clear" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_clear_v_1_rel",
            PHON.ONSET con ] ].

club_n1 := n_-_c_le &
 [ ORTH < "club" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_club_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

coach_n1 := n_-_c_le &
 [ ORTH < "coach" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_coach_n_1_rel",
   	    LOCAL.CAT.HEAD [ --BARE -,
	                     MINORS.NORM norm_rel ],
            PHON.ONSET con ] ].

cohens_n1 := n_-_pn-pl-def_le &
 [ ORTH < "Cohens" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Cohen",
            PHON.ONSET con ] ].

cold_n := n_-_c_le &
 [ ORTH < "cold" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cold_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

;; Added for CoNLL
;;
collaborated_a1 := aj_-_i-att_le &
 [ ORTH < "collaborated" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_collaborated_a_1_rel",
            PHON.ONSET con ] ].

colonel_n2 := n_-_c-pre-ttl_le &
 [ ORTH < "colonel" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_colonel_n_1_rel",
            LOCAL.CAT.HEAD.MINORS.MIN pre_title_rel,
            PHON.ONSET con ] ].

comprise_of_mal_v1 := v_pp_np_le_rbst &
 [ ORTH < "comprise" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_comprise_v_1_rel" ],
            PHON.ONSET con ] ].

concern_to_for_mal_n1 := n_pp_c_le_rbst &
 [ ORTH < "concern" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
		    KEYREL.PRED "_concern_n_for_rel" ],
            PHON.ONSET con ] ].

confuse_v1 := v_np_le &
 [ ORTH < "confuse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_confuse_v_1_rel",
            PHON.ONSET con ] ].

consequence_on_for_mal_n1 := n_pp_c_le_rbst &
 [ ORTH < "consequence" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
		    KEYREL.PRED "_consequence_n_for_rel" ],
            PHON.ONSET con ] ].

consider_for_mal_v1 := v_pp_np_le_rbst &
 [ ORTH < "consider" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_consider_v_1_rel" ],
            PHON.ONSET con ] ].

consider_in_mal_v1 := v_pp_np_le_rbst &
 [ ORTH < "consider" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_consider_v_1_rel" ],
            PHON.ONSET con ] ].

constitute_as_mal_v1 := v_pp_np_le_rbst &
 [ ORTH < "constitute" >,
   SYNSEM [ LKEYS [ --COMPKEY _as_p_sel_rel,
                    KEYREL.PRED "_constitute_v_1_rel" ],
            PHON.ONSET con ] ].

contradict_with_mal_v1 := v_pp_np_le_rbst &
 [ ORTH < "contradict" >,
   SYNSEM [ LKEYS [ --COMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_contradict_v_1_rel" ],
            PHON.ONSET con ] ].

contribute_in_to_mal_v1 := v_pp_e_le_rbst &
 [ ORTH < "contribute" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_contribute_v_to_rel" ],
            PHON.ONSET con ] ].

cook_v1 := v_np*_le &
 [ ORTH < "cook" >,
   SYNSEM [ LOCAL.CAT.VAL.COMPS.FIRST [ --SIND.PT non_refl,
					MODIFD.RPERIPH bool ],
            LKEYS.KEYREL.PRED "_cook_v_1_rel",
            PHON.ONSET con ] ].

costume_n1 := n_-_c_le &
 [ ORTH < "costume" >,
   SYNSEM [ LOCAL.CAT.HEAD.--BARE -,
	    LKEYS.KEYREL.PRED "_costume_n_1_rel",
            PHON.ONSET con ] ].

cotton_club_n1 := n_-_c-nm_le &
 [ ORTH < "Cotton", "Club" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Cotton+Club",
            PHON.ONSET con ] ].

counter_against_mal_v1 := v_pp_np_le_rbst &
 [ ORTH < "counter" >,
   SYNSEM [ LKEYS [ --COMPKEY _against_p_sel_rel,
                    KEYREL.PRED "_counter_v_1_rel" ],
            PHON.ONSET con ] ].

cousin_n1 := n_pp_c-of-anim_le &
 [ ORTH < "cousin" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cousin_n_of_rel",
            PHON.ONSET con ] ].

crayfish_n1 := n_-_c_le &
 [ ORTH < "crayfish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_crayfish_n_1_rel",
	    LOCAL.CAT cat_infl_nosuff,
            PHON.ONSET con ] ].

cunninghams_n1 := n_-_pn-pl-def_le &
 [ ORTH < "Cunninghams" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Cunningham",
            PHON.ONSET con ] ].

cunninghams_n2 := n_-_pn-pl_le &
 [ ORTH < "Cunninghams" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Cunningham",
            PHON.ONSET con ] ].

cut_v1 := v_np_le &
 [ ORTH < "cut" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cut_v_1_rel",
            LOCAL.CAT.HEAD.--MAL3SG -,
            PHON.ONSET con ] ].

cut_v2 := v_pp*_dir_le &
 [ ORTH < "cut" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cut_v_1_rel",
            LOCAL.CAT.HEAD.--MAL3SG -,
            PHON.ONSET con ] ].

cut_v3 := v_np-np_only_le &
 [ ORTH < "cut" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cut_v_1_rel",
            LOCAL.CAT.HEAD.--MAL3SG -,
            PHON.ONSET con ] ].

cuttlefish_n1 := n_-_c_le &
 [ ORTH < "cuttlefish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cuttlefish_n_1_rel",
	    LOCAL.CAT cat_infl_nosuff,
            PHON.ONSET con ] ].

d_grade_n1 := n_-_c_le &
 [ ORTH < "D" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_D_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,   
            PHON.ONSET con ] ].

dad_n1 := n_-_c_le &
 [ ORTH < "dad" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dad_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,   
            PHON.ONSET con ],
   TOKENS.+LAST.+CLASS.+CASE non_capitalized ].

daisy_n2 := n_-_c_le &
 [ ORTH < "daisy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_daisy_n_1_rel",
            LOCAL.AGR.PNG.PN 3p,
            PHON.ONSET con ] ].

dance_n1 := n_-_c_le &
 [ ORTH < "dance" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dance_n_1_rel",
            PHON.ONSET con ] ].

#|
dance_v1 := v_-_le &
 [ ORTH < "dance" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dance_v_1_rel",
            PHON.ONSET con ] ].
|#

day_n := n_pp_c-day_le &
 [ ORTH < "day" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_day_n_of_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ],
   TOKENS.+LAST.+CLASS.+CASE non_capitalized ].

day_by_day_adv := pp_-_i_le &
 [ ORTH < "day", "by", "day" >,
   SYNSEM [ LKEYS.KEYREL.PRED _day+by+day_p_rel,
            PHON.ONSET voc ] ].

day_to_day_adv := pp_-_i_le &
 [ ORTH < "day", "to", "day" >,
   SYNSEM [ LKEYS.KEYREL.PRED _day+to+day_p_rel,
            PHON.ONSET voc ] ].

debate_of_on_mal_n1 := n_pp_c_le_rbst &
 [ ORTH < "debate" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
		    KEYREL.PRED "_debate_n_on_rel" ],
            PHON.ONSET con ] ].

deeper_adv_mal := av_-_i-vp-cmp_le_rbst &
 [ ORTH < "deeper" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_deeper_a_1_rel",
            PHON.ONSET con ] ].

deeper_a1_mal := aj_-_i-cmp_le_rbst &
 [ ORTH < "deeper" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_deep_a_1_rel",
            PHON.ONSET con ] ].

deeper_deg := av_-_dg-jom_le &
 [ ORTH < "deeper" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_deeper_x_deg_rel",
            PHON.ONSET con ] ].

deer_n1 := n_-_c_le &
 [ ORTH < "deer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_deer_n_1_rel",
   	    LOCAL.CAT cat_infl_nosuff &  [ HEAD.--BARE - ],
            PHON.ONSET con ] ].

dentists_a1_mal := aj_-_i-cmpd_le_rbst &
 [ ORTH < "dentists" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dentists_a_1_rel",
            PHON.ONSET con ] ].

desert_n1 := n_-_c_le &
 [ ORTH < "desert" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_desert_n_1_rel",
            PHON.ONSET con ] ].

destiny_n1 := n_-_c_le &
 [ ORTH < "destiny" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_destiny_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

deteriorate_mal_v1 := v_np_caus_le_rbst &
 [ ORTH < "deteriorate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_deteriorate_v_1_rel",
            PHON.ONSET con ] ].

devote_into_to_mal_v1 := v_np-pp_e_le_rbst &
 [ ORTH < "devote" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _into_p_sel_rel,
		    KEYREL.PRED "_devote_v_to_rel" ],
            PHON.ONSET con ] ].

did1_neg_3 := v_vp_did-n_le &
 [ ORTH < "did", "not" >,
   SYNSEM.PHON.ONSET con,
   ALTS.VPELLIP - ].

did1_pos_rbst := v_vp_did_le &
 [ ORTH < "did" >,
   SYNSEM [ PHON.ONSET con,
   	    LOCAL.CAT [ HEAD.INV -,
	                VAL.COMPS < expressed_synsem & 
	    		   	    [ MODIFD notmod_or_rmod ] > ] ],
   ALTS [ VPELLIP -,
          ADVADD - ],
   GENRE robust ].

did1_pos := v_vp_did_le &
 [ ORTH < "did" >,
   SYNSEM [ PHON.ONSET con,
   	    LOCAL.CAT.VAL.COMPS < lex_phr_synsem > ] ].

did1_pos_ques := v_vp_did_le &
 [ ORTH < "did" >,
   SYNSEM [ PHON.ONSET con,
   	    LOCAL [ CAT [ HEAD.INV +,
			  VAL.COMPS.FIRST expressed_synsem ],
	            CONT.HOOK.INDEX.SF ques ] ] ].

died_a1_post := v_-_psv-post_le_rbst &
 [ ORTH < "died" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_die_v_1_rel",
            PHON.ONSET con ] ].

died_a1_pre := v_-_psv-pre_le_rbst &
 [ ORTH < "died" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_die_v_1_rel",
            PHON.ONSET con ] ].

dinner_n1 := n_-_mc_le &
 [ ORTH < "dinner" >,
   SYNSEM [ MODIFD.LPERIPH na,
            LOCAL.CONT.HOOK.INDEX.PNG.GEN neut,
	    LKEYS.KEYREL.PRED "_dinner_n_1_rel",
            PHON.ONSET con ] ].

#|
dinner_n1 := n_-_mc-time_le &
 [ ORTH < "dinner" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dinner_n_1_rel",
            PHON.ONSET con ] ].
|#

disappear_mal_v1 := v_np_caus_le_rbst &
 [ ORTH < "disappear" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_disappear_v_1_rel",
            PHON.ONSET con ] ].

disclose_of_mal_v1 := v_pp_np_le_rbst &
 [ ORTH < "disclose" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_disclose_v_1_rel" ],
            PHON.ONSET con ] ].

discover_v1 := v_np_le &
 [ ORTH < "discover" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_discover_v_1_rel",
            PHON.ONSET con ] ].

discover_about_mal_v1 := v_pp_np_le_rbst &
 [ ORTH < "discover" >,
   SYNSEM [ LKEYS [ --COMPKEY _about_p_sel_rel,
                    KEYREL.PRED "_discover_v_1_rel" ],
            PHON.ONSET con ] ].

discuss_about_mal_v1 := v_pp_np_le_rbst &
 [ ORTH < "discuss" >,
   SYNSEM [ LKEYS [ --COMPKEY _about_p_sel_rel,
                    KEYREL.PRED "_discuss_v_1_rel" ],
            PHON.ONSET con ] ].

discuss_on_mal_v1 := v_pp_np_le_rbst &
 [ ORTH < "discuss" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_discuss_v_1_rel" ],
            PHON.ONSET con ] ].

dish_n1 := n_pp_mc-of_le &
 [ ORTH < "dish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dish_n_of_rel",
            PHON.ONSET con ] ].

; Block use for "What was Kim doing yesterday?"
do_v4 := v_np-np_only_le &
 [ ORTH < "do" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_do_v_1_rel",
            LOCAL.CAT.VAL.COMPS < [ NONLOC.SLASH 0-dlist ],
                   [ LOCAL.CAT.HEAD.MINORS.NORM quantity_or_norm_or_no_rel,
		     NONLOC.SLASH 0-dlist ] >,
            PHON.ONSET con ] ].

doctors_a1_mal := aj_-_i-cmpd_le_rbst &
 [ ORTH < "doctors" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_doctors_a_1_rel",
            PHON.ONSET con ] ].

; Block plural of "doe" to avoid ambiguity with aux "does"
doe_n1 := n_-_c-sg_le &
 [ ORTH < "doe" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_doe_n_1_rel",
            PHON.ONSET con ] ].

does1_pos_rbst := v_vp_does_le &
 [ ORTH < "does" >,
   SYNSEM [ PHON.ONSET con,
   	    LOCAL.CAT [ HEAD.INV -,
	                VAL.COMPS < expressed_synsem & 
	    		   	    [ MODIFD notmod_or_rmod ] > ] ],
   ALTS [ VPELLIP -,
          ADVADD - ],
   GENRE robust ].

does1_pos := v_vp_does_le &
 [ ORTH < "does" >,
   SYNSEM [ PHON.ONSET con,
   	    LOCAL.CAT.VAL.COMPS < lex_phr_synsem > ] ].

does1_pos_ques := v_vp_does_le &
 [ ORTH < "does" >,
   SYNSEM [ PHON.ONSET con,
   	    LOCAL [ CAT [ HEAD.INV +,
			  VAL.COMPS.FIRST expressed_synsem ],
	            CONT.HOOK.INDEX.SF ques ] ] ].

does1_neg_3 := v_vp_does-n_le &
 [ ORTH < "does", "not" >,
   SYNSEM.PHON.ONSET con ].

do1_pos_rbst := v_vp_do-f_le &
 [ ORTH < "do" >,
   SYNSEM [ PHON.ONSET con,
   	    LOCAL.CAT [ HEAD.INV -,
	                VAL.COMPS < expressed_synsem & 
	    		  	    [ MODIFD notmod_or_rmod ] > ] ],
   ALTS [ VPELLIP -,
          ADVADD - ],
   GENRE robust ].

; Dropped ALTS.VPELLIP - : see law5_f-g.c
do1_pos := v_vp_do-f_le &
 [ ORTH < "do" >,
   SYNSEM [ PHON.ONSET con,
   	    LOCAL.CAT.VAL.COMPS < lex_phr_synsem > ] ].

do1_pos_ques := v_vp_do-f_le &
 [ ORTH < "do" >,
   SYNSEM [ PHON.ONSET con,
   	    LOCAL [ CAT [ HEAD.INV +,
			  VAL.COMPS.FIRST expressed_synsem ],
	            CONT.HOOK.INDEX.SF ques ] ] ].

do1_neg_3 := v_vp_do-f-n_le &
 [ ORTH < "do", "not" >,
   SYNSEM.PHON.ONSET con,
   ALTS.VPELLIP - ].

doctor_abb_n1 := n_-_c-pre-ttl_le &
 [ ORTH < "Dr" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_doctor_n_1_rel",
            LOCAL.CAT.HEAD.MINORS.MIN pre_title_rel,
            PHON.ONSET con ] ].

doctor_abb_n2 := n_-_c-pre-ttl_le &
 [ ORTH < "Dr." >,
   SYNSEM [ LKEYS.KEYREL.PRED "_doctor_n_1_rel",
            LOCAL.CAT.HEAD.MINORS.MIN pre_title_rel,
            PHON.ONSET con ] ].

doctor_title_n1 := n_-_c-pre-ttl_le &
 [ ORTH < "Doctor" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_doctor_n_1_rel",
            LOCAL.CAT.HEAD.MINORS.MIN pre_title_rel,
            PHON.ONSET con ] ].

dog_n1 := n_-_c-ugen_le &
 [ ORTH < "dog" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dog_n_1_rel",
            PHON.ONSET con ] ].

dog_jump_v1 := v_-_le &
 [ ORTH < "dog-", "jump" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dog+jump_v_1_rel",
            PHON.ONSET con ] ].

dog_jump_v2 := v_-_le &
 [ ORTH < "dog", "jump" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dog+jump_v_1_rel",
            PHON.ONSET con ] ].

dog_walk_v1 := v_-_le &
 [ ORTH < "dog", "walk" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dog+walk_v_1_rel",
            PHON.ONSET con ] ].

done_v1_rbst := v_np_le &
 [ ORTH < "done" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_do_v_1_rel",
            PHON.ONSET con ],
   GENRE robust ].

door_n1 := n_-_c_le &
 [ ORTH < "door" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_door_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

downstairs_door_n1 := n_-_c_le &
 [ ORTH < "downstairs", "door" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_downstairs+door_n_1_rel",
            PHON.ONSET con ] ].

drawing_n1 := n_pp_c-of_le &
 [ ORTH < "drawing" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_drawing_n_of_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

drawing_n2 := n_-_m_le &
 [ ORTH < "drawing" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_drawing_n_of_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

a_dozen := aj_-_i-crd-one_le &
 [ ORTH < "a", "dozen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "12",
            PHON.ONSET voc ] ].

dream_v1 := v_-_le &
 [ ORTH < "dream" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dream_v_1_rel",
            PHON.ONSET con ] ].

dream_of_mal_v1 := v_np_pp_le_rbst &
 [ ORTH < "dream" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dream_v_of_rel",
            PHON.ONSET con ] ].

dress_n1 := n_-_c_le &
 [ ORTH < "dress" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dress_n_1_rel",
            PHON.ONSET con ] ].

drill_v1 := v_np_le &
 [ ORTH < "drill" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_drill_v_1_rel",
            PHON.ONSET con ] ].

drink_n1 := n_-_c_le &
 [ ORTH < "drink" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_drink_n_1_rel",
            PHON.ONSET con ] ].

duck_n1 := n_-_c_le &
 [ ORTH < "duck" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_duck_n_1_rel",
            PHON.ONSET con ] ].

; Since PET does not enforce detless-PP constraints, just list here.
;
during_break_adv := pp_-_i_le &
 [ ORTH < "during", "break" >,
   SYNSEM [ LKEYS.KEYREL.PRED _during+break_p_rel,
            PHON.ONSET con ] ].

;; Avoid misanalysis of |[to play she] had to eat|
;;
eat1 := v_np*_le &
 [ ORTH < "eat" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_eat_v_1_rel",
	    LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.SORT entity,
            PHON.ONSET voc ] ].

earn_for_mal_v1 := v_pp_np_le_rbst &
 [ ORTH < "earn" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_earn_v_1_rel" ],
            PHON.ONSET voc ] ].

earth_day := n_-_m-hldy_le &
 [ ORTH < "Earth", "Day" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Earth_Day",
            PHON.ONSET voc ] ].

the_earth_n1 := n_-_pn_le &
 [ ORTH < "the", "Earth" >,
   SYNSEM [ LKEYS.KEYREL.CARG "the+Earth",
            PHON.ONSET con ] ].

#|
;; Hack to block "Eddie carrots"
eddie_n1 := n_-_pn_le &
 [ ORTH < "Eddie" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Eddie",
            MODIFD.LPERIPH -,
            PHON.ONSET voc ] ].
|#

effect_to_on_mal_n1 := n_pp_c_le_rbst &
 [ ORTH < "effect" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
		    KEYREL.PRED "_effect_n_on_rel" ],
            PHON.ONSET voc ] ].

eight_a1 := aj_-_i-prd_le &
 [ ORTH < "eight" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_eight_a_1_rel",
            PHON.ONSET voc ] ].

elaborate_about_on_mal_v1 := v_pp_e_le_rbst &
 [ ORTH < "elaborate" >,
   SYNSEM [ LKEYS [ --COMPKEY _about_p_sel_rel,
                    KEYREL.PRED "_elaborate_v_on_rel" ],
            PHON.ONSET voc ] ].

elementary_isect := aj_-_i_le &
 [ ORTH < "elementary" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_elementary_a_1_rel",
            PHON.ONSET voc ],
   TOKENS.+LAST.+CLASS.+CASE non_capitalized ].

eleven_a1 := aj_-_i-prd_le &
 [ ORTH < "eleven" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_eleven_a_1_rel",
            PHON.ONSET voc ] ].

elk_n1 := n_-_c_le &
 [ ORTH < "elk" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_elk_n_1_rel",
   	    LOCAL.CAT cat_infl_nosuff &  [ HEAD.--BARE - ],
            PHON.ONSET voc ] ].

;; This misspelled entry matches what is still in SVN for RWL as of July 2013.
english_a1 := aj_-_i-att_le &
 [ ORTH < "English" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_english_a_1_rel",
            PHON.ONSET voc ] ].

english_n3 := n_-_m_le &
 [ ORTH < "English" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_english_n_1_rel",
            PHON.ONSET voc ] ].

equal_to_mal_v1 := v_pp_np_le_rbst &
 [ ORTH < "equal" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_equal_v_1_rel" ],
            PHON.ONSET con ] ].

essential_n1 := n_-_c_le &
 [ ORTH < "essential" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_essential_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET voc ] ].

every_all_rbst := d_-_prt-plm_le &
 [ ORTH < "every" >,
   SYNSEM [ LKEYS.KEYREL.PRED _all_q_rel,
            LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.AGR.PNG.PN 3p,
            PHON.ONSET voc ],
   GENRE robust ].

everyday_adv_rbst := av_-_i-vp-po_le &
 [ ORTH < "everyday" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_every+day_a_1_rel",
            PHON.ONSET voc ],
   GENRE robust ].

example_n1 := n_pp_c-ns-of_le &
 [ ORTH < "example" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_example_n_of_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET voc ] ].

existed_a1_post := v_-_psv-post_le_rbst &
 [ ORTH < "existed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_exist_v_1_rel",
            PHON.ONSET voc ] ].

explore_into_mal_v1 := v_pp_np_le_rbst &
 [ ORTH < "explore" >,
   SYNSEM [ LKEYS [ --COMPKEY _into_p_sel_rel,
                    KEYREL.PRED "_explore_v_1_rel" ],
            PHON.ONSET con ] ].

expose_of_to_mal_v1 := v_np-pp_e_le_rbst &
 [ ORTH < "expose" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _of_p_sel_rel,
		    KEYREL.PRED "_expose_v_to_rel" ],
            PHON.ONSET voc ] ].

f_grade_n1 := n_-_c_le &
 [ ORTH < "F" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_F_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,   
            PHON.ONSET voc ] ].

face_to_face_adv := pp_-_i_le &
 [ ORTH < "face", "to", "face" >,
   SYNSEM [ LKEYS.KEYREL.PRED _face+to+face_p_rel,
            PHON.ONSET voc ] ].

face_to_mal_v1 := v_pp_np_le_rbst &
 [ ORTH < "face" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_face_v_1_rel" ],
            PHON.ONSET con ] ].

family_n1 := n_-_c-gr_le &
 [ ORTH < "family" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_family_n_of_rel",
            LOCAL.CAT.VAL.SPR < expressed_synsem >,
            PHON.ONSET con ] ].

family_n2 := n_pp_c-gr-of_le &
 [ ORTH < "family" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_family_n_of_rel",
            LOCAL.CAT.VAL.SPR < expressed_synsem >,
            PHON.ONSET con ] ].

families_n2 := n_-_c-pl-ifl_le &
 [ ORTH < "families" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_family_n_1_rel",
            PHON.ONSET con ] ].

farm_v1 := v_-_le &
 [ ORTH < "farm" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_farm_v_1_rel",
            PHON.ONSET con ] ].

farther_adv_mal := av_-_i-vp-cmp_le_rbst &
 [ ORTH < "farther" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_farther_a_1_rel",
            PHON.ONSET con ] ].

farther_a1_mal := aj_-_i-cmp_le_rbst &
 [ ORTH < "farther" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_far_a_from_rel",
            PHON.ONSET con ] ].

fast_n1 := n_-_c_le &
 [ ORTH < "fast" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fast_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

faster_adv_mal := av_-_i-vp-cmp_le_rbst &
 [ ORTH < "faster" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_faster_a_1_rel",
            PHON.ONSET con ] ].

faster_a1_mal := aj_-_i-cmp_le_rbst &
 [ ORTH < "faster" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fast_a_1_rel",
            PHON.ONSET con ] ].

father_n1 := n_pp_c-of_le &
 [ ORTH < "father" >,
   SYNSEM [ LOCAL.CAT.HEAD [ MINORS.NORM norm_rel,
                             --BARE - ],
   	    LKEYS.KEYREL.PRED "_father_n_of_rel",
            PHON.ONSET con ],
   TOKENS.+LAST.+CLASS.+CASE non_capitalized ].

;; DPF 2014-05-14 - If we block this entry, then we have to include the
;; multi-word "Founding Fathers".

fathers_nounif_n1 := n_-_pn-nounif_le &
 [ ORTH < "Fathers" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Fathers",
            PHON.ONSET con ] ].

favorite_isect := aj_-_i-att_le &
 [ ORTH < "favorite" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_favorite_a_1_rel",
            PHON.ONSET con ] ].

feeling_n1 := n_pp_c-of_le &
 [ ORTH < "feeling" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_feeling_n_of_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

feel_v1 := v_np_le &
 [ ORTH < "feel" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_feel_v_1_rel",
            PHON.ONSET con ] ].

feel_v7 := v_pp*-cp_le &
 [ ORTH < "feel" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_feel_v_1_rel" ],
            LOCAL.CAT.VAL.COMPS.REST.FIRST.LOCAL.CAT.HEAD.--MAL3SG -,
            PHON.ONSET con ] ].

fight_n1 := n_-_c_le &
 [ ORTH < "fight" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fight_n_1_rel",
            PHON.ONSET con ] ].

#|
fight_v1 := v_np_le &
 [ ORTH < "fight" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fight_v_1_rel",
            PHON.ONSET con ] ].
|#

find_mal_v1 := v_-_le_rbst &
 [ ORTH < "find" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_find_v_1_rel",
            PHON.ONSET con ] ].

;; Interestingly, we change the PRED value here so it is not the same as that
;; of find_v1, because our generator would happily produce the following RNR
;; output as subsumed by |they found a cat and found dogs|:
;; |they [ [ found _ and found dogs _ ] a cat ]
;; where the generator fills in an ARG3 for the second "find".
;; Not behavior we want for the generator, so FIX someday.
;;
find_v2 := v_np-np_only_le &
 [ ORTH < "find" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_find_v_2_rel",
            PHON.ONSET con ] ].

finish_line_n1 := n_-_c_le &
 [ ORTH < "finish", "line" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_finish+line_n_1_rel",
            PHON.ONSET con ] ].

firemans_a1_mal := aj_-_i-cmpd_le_rbst &
 [ ORTH < "firemans" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_firemans_a_1_rel",
            PHON.ONSET con ] ].

firemens_a1_mal := aj_-_i-cmpd_le_rbst &
 [ ORTH < "firemens" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_firemens_a_1_rel",
            PHON.ONSET con ] ].

firework_n1 := n_-_c-sg_le &
 [ ORTH < "firework" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_firework_n_1_rel",
            PHON.ONSET con ] ].

first_adv2 := av_-_s-cp-pr_le &
 [ ORTH < "first" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_first_a_1_rel",
            PHON.ONSET con ] ].

fish_n1 := n_-_mc_le &
 [ ORTH < "fish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fish_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

first_n2 := n_pp_c-of-obl_le &
 [ ORTH < "first" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_first_n_of_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

fish_v1 := v_-_le &
 [ ORTH < "fish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fish_v_1_rel",
            PHON.ONSET con ] ].

fishermans_a1_mal := aj_-_i-cmpd_le_rbst &
 [ ORTH < "fishermans" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fishermans_a_1_rel",
            PHON.ONSET con ] ].

fishermens_a1_mal := aj_-_i-cmpd_le_rbst &
 [ ORTH < "fishermens" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fishermens_a_1_rel",
            PHON.ONSET con ] ].

five_a1 := aj_-_i-prd_le &
 [ ORTH < "five" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_five_a_1_rel",
            PHON.ONSET con ] ].

float_n1 := n_-_c_le &
 [ ORTH < "float" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_float_n_1_rel",
            LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

flower_n1 := n_-_c_le &
 [ ORTH < "flower" >,
   SYNSEM [ LKEYS.KEYREL [ PRED "_flower_n_1_rel",
                           ARG0.SORT nonhuman ],
            PHON.ONSET con ] ].

flying_n1 := n_-_m_le &
 [ ORTH < "flying" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_flying_n_1_rel",
            PHON.ONSET con ] ].

food_n1 := n_-_mc_le &
 [ ORTH < "food" >,
   SYNSEM [ MODIFD.LPERIPH na,
	    LKEYS.KEYREL [ PRED "_food_n_1_rel",
                           ARG0.SORT nonhuman ],
            PHON.ONSET con ] ].

foods_n1 := n_-_c-pl-ifl_le &
 [ ORTH < "foods" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_food_n_1_rel",
            PHON.ONSET con ] ].

forever_adv4 := av_-_i-vp-pr_le &
 [ ORTH < "for", "ever" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_forever_a_1_rel",
            PHON.ONSET con ] ].

forest_n1 := n_pp_c-of_le &
 [ ORTH < "forest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_forest_n_of_rel",
            PHON.ONSET con ] ].

fort_n1 := n_-_c_le &
 [ ORTH < "fort" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fort_n_1_rel",
            LOCAL [ CAT.HEAD.--BARE -,
            	    CONT.HOOK.INDEX.PNG.GEN neut ],
            PHON.ONSET con ] ].

found_v1 := v_np_le &
 [ ORTH < "found" >,
   SYNSEM [ LOCAL.CAT.HEAD.--MAL3SG -,
	    LKEYS.KEYREL.PRED "_found_v_1_rel",
            PHON.ONSET con ] ].

founding_nounif_n1 := n_-_pn-nounif_le &
 [ ORTH < "Founding" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Founding",
            PHON.ONSET con ] ].

founding_fathers_n1 := n_-_c-pl-ifl_le &
 [ ORTH < "Founding", "Fathers" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_Founding+Fathers_n_1_rel",
            PHON.ONSET con ] ].

four_a1 := aj_-_i-prd_le &
 [ ORTH < "four" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_four_a_1_rel",
            PHON.ONSET con ] ].

fourth_of_july_n1 := n_-_c-nm_le &
 [ ORTH < "Fourth", "Of", "July" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Fourth+Of+July",
            PHON.ONSET con ] ].

Friday_night_n1 := n_-_c-dpt_le &
 [ ORTH < "Friday", "night" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_Friday+night_n_1_rel",
            PHON.ONSET con ] ].

Saturday_night_n1 := n_-_c-dpt_le &
 [ ORTH < "Saturday", "night" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_Saturday+night_n_1_rel",
            PHON.ONSET con ] ].

Sunday_night_n1 := n_-_c-dpt_le &
 [ ORTH < "Sunday", "night" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_Sunday+night_n_1_rel",
            PHON.ONSET con ] ].

Monday_night_n1 := n_-_c-dpt_le &
 [ ORTH < "Monday", "night" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_Monday+night_n_1_rel",
            PHON.ONSET con ] ].

Tuesday_night_n1 := n_-_c-dpt_le &
 [ ORTH < "Tuesday", "night" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_Tuesday+night_n_1_rel",
            PHON.ONSET con ] ].

Wednesday_night_n1 := n_-_c-dpt_le &
 [ ORTH < "Wednesday", "night" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_Wednesday+night_n_1_rel",
            PHON.ONSET con ] ].

Thursday_night_n1 := n_-_c-dpt_le &
 [ ORTH < "Thursday", "night" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_Thursday+night_n_1_rel",
            PHON.ONSET con ] ].

friend_n1 := n_-_c_le &
 [ ORTH < "friend" >,
   SYNSEM [ LOCAL.CAT.HEAD.MINORS.NORM norm_rel,
   	    LKEYS.KEYREL.PRED "_friend_n_1_rel",
            PHON.ONSET con ] ].

friends_and_family_n1 := n_-_c-pl-ifl_le &
 [ ORTH < "friends", "and", "family" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_friends+and+family_n_1_rel",
            PHON.ONSET con ] ].

frightened_a1 := aj_-_i-prd_le &
 [ ORTH < "frightened" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_frightened_a_1_rel",
            PHON.ONSET con ] ].

#|
fun_a1 := aj_pp_i-prd_le &
 [ ORTH < "fun" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_fun_a_for_rel" ],
            PHON.ONSET con ] ].
|#

fun_n1 := n_-_m-ns_le &
 [ ORTH < "fun" >,
   SYNSEM [ LOCAL.CAT.HEAD.--MALCM -,
	    LKEYS.KEYREL.PRED "_fun_n_1_rel",
            PHON.ONSET con ] ].

further_adv_mal := av_-_i-vp-cmp_le_rbst &
 [ ORTH < "further" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_further_a_1_rel",
            PHON.ONSET con ] ].

further_a1_mal := aj_-_i-cmp_le_rbst &
 [ ORTH < "further" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_far_a_from_rel",
            PHON.ONSET con ] ].

galapagos_islands_n1 := n_-_c-nm-pl_le &
 [ ORTH < "Galapagos", "Island" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Galapagos+Islands",
            PHON.ONSET con ] ].

garcias_n1 := n_-_pn-pl-def_le &
 [ ORTH < "Garcias" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Garcia",
            PHON.ONSET con ] ].

garibaldis_n1 := n_-_pn-pl-def_le &
 [ ORTH < "Garibaldis" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Garibaldi",
            PHON.ONSET con ] ].

garlic_flavored_a1 := aj_-_i_le &
 [ ORTH < "garlic-", "flavored" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_garlic-flavored_a_1_rel",
            PHON.ONSET con ] ].

general_n1 := n_-_c_le &
 [ ORTH < "general" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_general_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,   
            PHON.ONSET con ] ].

geometry_n1 := n_-_m_le &
 [ ORTH < "geometry" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_geometry_n_1_rel",
            PHON.ONSET con ] ].

get_v2 := v_np_ntr_le &
 [ ORTH < "get" >,
   SYNSEM [ LOCAL.CAT.HEAD.--MAL3SG -,
	    LKEYS.KEYREL.PRED "_get_v_1_rel",
            PHON.ONSET con ] ].

get_prd_v2 := v_np-prd_oeq-ntr-x_le &
 [ ORTH < "get" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_get_v_state_rel",
            PHON.ONSET con ] ].

gilroys_n1 := n_-_pn-pl-def_le &
 [ ORTH < "Gilroys" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Gilroy",
            PHON.ONSET con ] ].

girl_n1 := n_-_c-fem_le &
 [ ORTH < "girl" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_girl_n_1_rel",
            PHON.ONSET con ] ].

; Removed ALTMIN indef_or_udef_rel since it blocks |which speech did she give|
; But we also need this for "He already gave it" where it = report.  So let's
; explicitly allow light verb uses with idiom-marked nouns, and with pronousn,
; and treat the rest as robust

;; Restrict to idiomatic nouns such as "speech", effectively making this a
;; light verb
;;
give_v2 := v_np_le &
 [ ORTH < "give" >,
   SYNSEM [ LOCAL.CAT.VAL.COMPS < [ --MIN idiom_nom_rel ] >,
	    LKEYS.KEYREL.PRED "_give_v_1_rel",
	    PHON.ONSET con ] ].

;; Pronoun objects only
;;
give_v2_pron := v_np_le &
 [ ORTH < "give" >,
   SYNSEM [ LOCAL.CAT.VAL.COMPS < [ --MIN pron_rel,
				    --SIND.PNG.GEN neut ] >,
	    LKEYS.KEYREL.PRED "_give_v_1_rel",
	    PHON.ONSET con ] ].

;; For all other NPs (not idiom-marked or pronominal), provide robust entry
;; DPF 2014-06-09 - Too many false positives like "She gave Bill chocolate"
#|
give_v2_mal := v_np_ditrans_le_rbst &
 [ ORTH < "give" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_give_v_1_rel",
	    PHON.ONSET con ] ].
|#

; "... went the store"
go_mal_v1 := v_np_pp_le_rbst &
 [ ORTH < "go" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_go_v_1_rel",
            PHON.ONSET con ] ].

goat_n1 := n_-_c-ugen_le &
 [ ORTH < "goat" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_goat_n_1_rel",
            PHON.ONSET con ] ].

god_n1 := n_-_c_le &
 [ ORTH < "god" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_god_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,   
            PHON.ONSET con ] ].

goldfish_n1 := n_-_c_le &
 [ ORTH < "goldfish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_goldfish_n_1_rel",
	    LOCAL.CAT cat_infl_nosuff,
            PHON.ONSET con ] ].

good_a2 := aj_pp_i-er_le &
 [ ORTH < "good" >,
   SYNSEM [ LOCAL.CAT.HEAD.MINORS.NORM norm_rel,
            LKEYS [ --COMPKEY _at_p_sel_rel,
                    KEYREL.PRED "_good_a_at-for-of_rel" ],
            PHON.ONSET con ] ].

grandmother_n1 := n_pp_c-of_le &
 [ ORTH < "grandmother" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_grandmother_n_of_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

grandmother_prd_n1 := n_-_c-prd_le &
 [ ORTH < "grandmother" >,
   SYNSEM [ LKEYS.KEYREL [ PRED "_grandmother_n_of_rel",
                           ARG0.PNG.PN 3s ],
            PHON.ONSET con ] ].

; Allow "her grandmother's" NP even though generally block bare possessives
grandmothers_poss_n1 := n_-_c_le &
 [ ORTH < "grandmother", "'s" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_grandmothers_n_poss_rel",
            PHON.ONSET con ] ].

great_aunt_n1 := n_-_c-pre-ttl_le &
 [ ORTH < "great-", "aunt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_great-aunt_n_1_rel",
            LOCAL.CAT.HEAD.MINORS.MIN pre_title_rel,
            PHON.ONSET con ] ].

green_striped_a1 := aj_-_i_le &
 [ ORTH < "green-", "striped" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_green-striped_a_1_rel",
            PHON.ONSET con ] ].

green_striped_a2 := aj_-_i_le &
 [ ORTH < "green-striped" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_green-striped_a_1_rel",
            PHON.ONSET con ] ].

ground_n1 := n_-_c_le &
 [ ORTH < "ground" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ground_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,   
            PHON.ONSET con ] ].

gum_n1 := n_-_mc_le &
 [ ORTH < "gum" >,
   SYNSEM [ MODIFD.LPERIPH +,
	    LKEYS.KEYREL.PRED "_gum_n_1_rel",
            PHON.ONSET con ] ].

gym_n1 := n_-_c_le &
 [ ORTH < "gym" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gym_n_1_rel",
            PHON.ONSET con ] ].

hand_n1 := n_-_c-ed_le &
 [ ORTH < "hand" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hand_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,   
            PHON.ONSET con ] ].

hard_a1 := aj_-_i-ndpt-er_le &
 [ ORTH < "hard" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hard_a_for_rel",
            PHON.ONSET con ] ].

hard_adv1 := av_-_i-vp-po_le &
 [ ORTH < "hard" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hard_a_1_rel",
            PHON.ONSET con ] ].

harder_adv_mal := av_-_i-vp-cmp_le_rbst &
 [ ORTH < "harder" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_harder_a_1_rel",
            PHON.ONSET con ] ].

harder_aj_mal := aj_-_i-cmp_le_rbst &
 [ ORTH < "harder" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hard_a_for_rel",
            PHON.ONSET con ] ].

hardly := av_-_s-vp-x_le &
 [ ORTH < "hardly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hardly_a_1_rel",
            PHON.ONSET con,
	    LOCAL.CAT [ HEAD.MOD.FIRST.LOCAL.CAT.NEGPOL #negp,
	                NEGPOL #negp ] ] ].

haunt_v1 := v_np_le &
 [ ORTH < "haunt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_haunt_v_1_rel",
            PHON.ONSET con ] ].

have-prd := v_np-prd_oeq-ntr-x_le &
 [ ORTH < "have" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_have_v_prd_rel",
            PHON.ONSET con ] ].

hay_n := n_-_m_le &
 [ ORTH < "hay" >,
   SYNSEM [ LOCAL.CAT.VAL.SPR.FIRST.LOCAL.AGR.PNG.PN 3s,
            LKEYS.KEYREL.PRED "_hay_n_1_rel",
            PHON.ONSET con ] ].

; Ensure singular agreement
he_or_she_n1 := n_-_pr-he_le &
 [ ORTH < "he", "/", "she" >,
   SYNSEM.PHON.ONSET con ].

he_stutter_1_mal := n_-_pr-he_le_rbst &
 [ ORTH < "he", "-", "he" >,
   SYNSEM.PHON.ONSET con ].

he_stutter_2_mal := n_-_pr-he_le_rbst &
 [ ORTH < "he", "he" >,
   SYNSEM.PHON.ONSET con ].

he_stutter_2_mal3 := n_-_pr-he_le_rbst &
 [ ORTH < "he", "he", "he" >,
   SYNSEM.PHON.ONSET con ].

he_stutter_3_mal := n_-_pr-he_le_rbst &
 [ ORTH < "he-", "he" >,
   SYNSEM.PHON.ONSET con ].

head_lice_n2 := n_-_c-pl-ifl_le &
 [ ORTH < "head", "lice" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_head+lice_n_1_rel",
            PHON.ONSET con ] ].

hear_mal_v1 := v_vp_seq_le_rbst &
 [ ORTH < "hear" >,
   SYNSEM [ LOCAL.CAT.HEAD.--MAL3SG -,
	    LKEYS.KEYREL.PRED "_hear_v_1_rel",
            PHON.ONSET con ] ].

hear_mal_v2 := v_np-vp_oeq_le_rbst &
 [ ORTH < "hear" >,
   SYNSEM [ LOCAL.CAT.HEAD.--MAL3SG -,
	    LKEYS.KEYREL.PRED "_hear_v_1_rel",
            PHON.ONSET con ] ].

hear_v2 := v_cp_comp_le &
 [ ORTH < "hear" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hear_v_1_rel",
            PHON.ONSET con ] ].

; Also allow WH-sentential complements
hear_v2a := v_cp_fin-inf-q_le &
 [ ORTH < "hear" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hear_v_1_rel",
            LOCAL.CAT.VAL.KCMP.LOCAL.CAT.VAL.SUBJ < >,
            PHON.ONSET con ] ].

heart_n1 := n_-_c-ed_le &
 [ ORTH < "heart" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_heart_n_1_rel",
            PHON.ONSET con ] ].

he_himself := n_-_pr-he_le &
 [ ORTH < "he", "himself" >,
   SYNSEM.PHON.ONSET con ].

help_on_mal_v1 := v_pp_np_le_rbst &
 [ ORTH < "help" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_help_v_1_rel" ],
            PHON.ONSET con ] ].

herdmans_n1 := n_-_pn-pl-def_le &
 [ ORTH < "Herdmans" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Herdman",
            PHON.ONSET con ] ].

herdmans_n2 := n_-_pn-pl_le &
 [ ORTH < "Herdmans" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Herdman",
            PHON.ONSET con ] ].

hike_n1 := n_-_c_le &
 [ ORTH < "hike" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hike_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,   
            PHON.ONSET con ] ].

hikers_a1_mal := aj_-_i-cmpd_le_rbst &
 [ ORTH < "hikers" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hikers_a_1_rel",
            PHON.ONSET con ] ].

hill_n1 := n_-_c_le &
 [ ORTH < "hill" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hill_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

hit_v1 := v_np*_le &
 [ ORTH < "hit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hit_v_1_rel",
            LOCAL.CAT.HEAD.--MAL3SG -,
            PHON.ONSET con ] ].

hold_v1 := v_np_le &
 [ ORTH < "hold" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hold_v_1_rel",
            PHON.ONSET con ] ].

holey_donut_n1 := n_-_c-nm_le &
 [ ORTH < "Holey", "Donut" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Holey+Donut",
            PHON.ONSET con ] ].

home_adv := n_-_ad-pl-nomod_le &
 [ ORTH < "home" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED _home_p_rel,
                    KEYREL.PRED place_n_rel ],
   	    LOCAL.CAT.HEAD.--BARE -,   
            PHON.ONSET con ] ].

home_a1 := aj_-_i-att_le &
 [ ORTH < "home" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_home_a_1_rel",
            PHON.ONSET con ] ].

;; Prevent |home studying| as n-v adj compound
home_n1 := n_pp_c-ns-of_le &
 [ ORTH < "home" >,
   SYNSEM [ LOCAL.CAT.HEAD.--BARE -,
	    MODIFD.RPERIPH na_or_+,
	    LKEYS.KEYREL.PRED "_home_n_of-n_rel",
            PHON.ONSET con ] ].

homework_n1 := n_-_m_le &
 [ ORTH < "homework" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_homework_n_1_rel",
            PHON.ONSET con ] ].

house_n1 := n_pp_c-of_le &
 [ ORTH < "house" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_house_n_of_rel",
            PHON.ONSET con ] ].

house_v1 := v_np_le &
 [ ORTH < "house" >,
   SYNSEM [ LOCAL.CAT.HEAD.--MAL3SG -,
            LKEYS.KEYREL.PRED "_house_v_1_rel",
            PHON.ONSET con ] ].

#|
;; cf. "*learning how to math"
how_to_a1 := aj_-_i-att_le &
 [ ORTH < "how", "to" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_how-to_a_1_rel",
            LOCAL.CAT.HEAD.MOD < [ LOCAL.CAT.HEAD.--BARE - ] >,
            PHON.ONSET con ] ].
|#

hulls_n1 := n_-_pn-pl-def_le &
 [ ORTH < "Hulls" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Hull",
            PHON.ONSET con ] ].

human_a1 := aj_-_i-att_le &
 [ ORTH < "human" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_human_a_1_rel",
            PHON.ONSET con ] ].

human_n1 := n_-_c-nocnh_le &
 [ ORTH < "human" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_human_n_1_rel",
            PHON.ONSET con ] ].

human_being_n1 := n_-_c_le &
 [ ORTH < "human", "being" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_human+being_n_1_rel",
            PHON.ONSET con ] ].

hunter_n1 := n_-_c_le &
 [ ORTH < "hunter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hunter_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,   
            PHON.ONSET con ] ].

hunters_a1_mal := aj_-_i-cmpd_le_rbst &
 [ ORTH < "hunters" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hunters_a_1_rel",
            PHON.ONSET con ] ].

;; Avoid misanalysis with robust perfect aspect in |She was hurt playing|
;; Also avoid gerund analysis of |yesterday she was hurt playing tag|
;;
hurt_v1 := v_np_noger_le &
 [ ORTH < "hurt" >,
   SYNSEM [ LOCAL.CAT [ HEAD.--MAL3SG -,
			VAL.COMPS.FIRST.LOCAL.CONT.HOOK.INDEX.SORT entity ],
	    LKEYS.KEYREL.PRED "_hurt_v_1_rel",
            PHON.ONSET con ] ].

;; Require VFORM fin to avoid mal analysis for "he was-had hurt."
hurt_v1b := v_-_le &
 [ ORTH < "hurt" >,
   SYNSEM [ LOCAL.CAT.HEAD [ --MAL3SG -,
   	                     VFORM fin ],
	    LKEYS.KEYREL.PRED "_hurt_v_1_rel",
            PHON.ONSET con ] ].

hurt_v3 := v_vp_it-s_le &
 [ ORTH < "hurt" >,
   SYNSEM [ LOCAL.CAT.HEAD.--MAL3SG -,
	    LKEYS.KEYREL.PRED "_hurt_v_1_rel",
            PHON.ONSET con ] ].

i_pn_np1 := n_-_pn-nounif_le &
 [ ORTH < "I" >,
   SYNSEM [ LKEYS.KEYREL.CARG "I",
            PHON.ONSET voc ] ].

i_stutter_4_mal := n_-_pr-i_le_rbst &
 [ ORTH < "I", "I" >,
   SYNSEM.PHON.ONSET voc ].

i_stutter_4_mal3 := n_-_pr-i_le_rbst &
 [ ORTH < "I", "I", "I" >,
   SYNSEM.PHON.ONSET voc ].

i_stutter_6_mal := n_-_pr-i_le_rbst &
 [ ORTH < "I-", "I" >,
   SYNSEM.PHON.ONSET voc ].

i_stutter_mal := n_-_pr-i_le_rbst &
 [ ORTH < "I", "-", "I" >,
   SYNSEM.PHON.ONSET voc ].

ice_cream_n1 := n_-_m_le &
 [ ORTH < "ice", "cream" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ice+cream_n_1_rel",
            PHON.ONSET voc ] ].

ice_cream_n2 := n_-_m_le &
 [ ORTH < "ice-", "cream" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ice+cream_n_1_rel",
            PHON.ONSET voc ] ].

ice_skating_v1 := v_-_prp_le &
 [ ORTH < "ice-skating" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ice+skate_v_1_rel",
            PHON.ONSET voc ] ].

if_subconj_unspec := p_cp_s-unsp_le &
 [ ORTH < "if" >,
   SYNSEM [ LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--MAL3SG -,
            LKEYS.KEYREL.PRED "_if_x_then_rel",
            PHON.ONSET voc ] ].

impact_on_of_mal_n1 := n_pp_m_le_rbst &
 [ ORTH < "impact" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
		    KEYREL.PRED "_impact_n_1_rel" ],
            PHON.ONSET voc ] ].

impact_to_on_mal_n1 := n_pp_m_le_rbst &
 [ ORTH < "impact" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
		    KEYREL.PRED "_impact_n_on_rel" ],
            PHON.ONSET voc ] ].

implant_n1 := n_-_c_le &
 [ ORTH < "implant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_implant_n_1_rel",
            PHON.ONSET voc ] ].

implant_to_in_mal_v1 := v_pp_e_le_rbst &
 [ ORTH < "implant" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_implant_v_in_rel" ],
            PHON.ONSET voc ] ].

impose_to_on_mal_v1 := v_np-pp_e_le_rbst &
 [ ORTH < "impose" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _to_p_sel_rel,
		    KEYREL.PRED "_impose_v_on_rel" ],
            PHON.ONSET voc ] ].

;; Since PET currently does not impose idiom (collocation) constraints,
;; we list this frequently occurring detless PP, and block bare "bed" entry
;; (also "out of bed"
in_bed_adv := pp_-_i_le &
 [ ORTH < "in", "bed" >,
   SYNSEM [ LKEYS.KEYREL.PRED _in+bed_p_rel,
            PHON.ONSET voc ] ].

inflict_to_on_mal_v1 := v_np-pp_e_le_rbst &
 [ ORTH < "inflict" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _to_p_sel_rel,
		    KEYREL.PRED "_inflict_v_on_rel" ],
            PHON.ONSET voc ] ].

infringe_on_mal_v1 := v_np_pp_le_rbst &
 [ ORTH < "infringe" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_infringe_v_on_rel",
            PHON.ONSET voc ] ].

inside_n1 := n_pp_c-nocnh-of_le &
 [ ORTH < "inside" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_inside_n_of_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET voc ] ].

instance_n1 := n_pp_c-of_le &
 [ ORTH < "instance" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_instance_n_of_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET voc ] ].

in_sum_adv1 := av_-_s-cp-pr_le &
 [ ORTH < "in", "sum" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_in+sum_a_1_rel",
            PHON.ONSET voc ] ].

in_summary_adv1 := av_-_s-cp-pr_le &
 [ ORTH < "in", "summary" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_in+summary_a_1_rel",
            PHON.ONSET voc ] ].

integrate_to_into_mal_v1 := v_np-pp_e_le_rbst &
 [ ORTH < "integrate" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _to_p_sel_rel,
		    KEYREL.PRED "_integrate_v_into_rel" ],
            PHON.ONSET voc ] ].

intrude_upon_mal_v1 := v_np_pp_le_rbst &
 [ ORTH < "intrude" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_intrude_v_upon_rel",
            PHON.ONSET voc ] ].

invade_into_mal_v1 := v_pp_np_le_rbst &
 [ ORTH < "invade" >,
   SYNSEM [ LKEYS [ --COMPKEY _into_p_sel_rel,
                    KEYREL.PRED "_invade_v_1_rel" ],
            PHON.ONSET voc ] ].

invest_for_in_mal_v1 := v_pp_e_le_rbst &
 [ ORTH < "invest" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_invest_v_in_rel" ],
            PHON.ONSET voc ] ].

investigate_on_mal_v1 := v_pp_np_le_rbst &
 [ ORTH < "investigate" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_investigate_v_1_rel" ],
            PHON.ONSET voc ] ].

island_n1 := n_-_c_le &
 [ ORTH < "island" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_island_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,   
            PHON.ONSET voc ] ].

it_stutter_1_mal := n_-_pr-it_le_rbst &
 [ ORTH < "it", "-", "it" >,
   SYNSEM.PHON.ONSET voc ].

it_stutter_2_mal := n_-_pr-it_le_rbst &
 [ ORTH < "it", "it" >,
   SYNSEM.PHON.ONSET voc ].

it_stutter_2_mal3 := n_-_pr-it_le_rbst &
 [ ORTH < "it", "it", "it" >,
   SYNSEM.PHON.ONSET voc ].

it_stutter_3_mal := n_-_pr-it_le_rbst &
 [ ORTH < "it-", "it" >,
   SYNSEM.PHON.ONSET voc ].

itch_v1 := v_-_le &
 [ ORTH < "itch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_itch_v_1_rel",
            PHON.ONSET voc ] ].

its_be_cop_rbst := v_prd_its-mal_le &
 [ ORTH < "its" >,
   SYNSEM.PHON.ONSET voc ].

its_be_np_rbst := v_np_its-mal_le &
 [ ORTH < "its" >,
   SYNSEM.PHON.ONSET voc ].

jackal_n1 := n_-_c-msc_le &
 [ ORTH < "jackal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_jackal_n_1_rel",
            PHON.ONSET con ] ].

the_jewish_new_year := n_-_m-hldy_le &
 [ ORTH < "the", "Jewish", "New", "Year" >,
   SYNSEM [ LKEYS.KEYREL.CARG "the+Jewish+New+Year",
            PHON.ONSET con ] ].

johnsons_n1 := n_-_pn-pl-def_le &
 [ ORTH < "Johnsons" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Johnson",
            PHON.ONSET con ] ].

kettle_n1 := n_-_c_le &
 [ ORTH < "kettle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_kettle_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,   
            PHON.ONSET con ] ].

king_n1 := n_pp_c-of-msc_le &
 [ ORTH < "king" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_king_n_of_rel",
   	    LOCAL.CAT.HEAD.--BARE -,   
            PHON.ONSET con ] ].

lake_n1 := n_-_c_le &
 [ ORTH < "lake" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lake_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,   
            PHON.ONSET con ] ].

landing_n1 := n_-_c_le &
 [ ORTH < "landing" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_landing_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,   
            PHON.ONSET con ] ].

last_adv1 := av_-_i-vp-po_le &
 [ ORTH < "last" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_last_a_1_rel",
            PHON.ONSET con ] ].

last_v1 := v_np*_le &
 [ ORTH < "last" >,
   SYNSEM [ LKEYS [ KEYREL.PRED "_last_v_1_rel",
   	            --COMPKEY temp_abstr_rel ],
            PHON.ONSET con ] ].

lawyers_a1_mal := aj_-_i-cmpd_le_rbst &
 [ ORTH < "lawyers" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lawyers_a_1_rel",
            PHON.ONSET con ] ].

learn_of_from_mal_v1 := v_np-pp_e_le_rbst &
 [ ORTH < "learn" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _of_p_sel_rel,
		    KEYREL.PRED "_learn_v_from_rel" ],
            PHON.ONSET con ] ].

learneds_n1 := n_-_pn-pl-def_le &
 [ ORTH < "Learneds" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Learned",
            PHON.ONSET con ] ].

lecture_n1 := n_-_c_le &
 [ ORTH < "lecture" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lecture_n_1_rel",
            --MIN alt_idiom_nom_rel,
            PHON.ONSET con ] ].

lecture_idm_n1 := n_-_c-idm_le &
 [ ORTH < "lecture" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lecture_n_1_rel",
            PHON.ONSET con ] ].

left_n1 := n_pp_c-dir_le &
 [ ORTH < "left" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_left_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,   
            PHON.ONSET con ] ].

left_a1 := aj_-_i-prd_le &
 [ ORTH < "left" >,
   SYNSEM [ LOCAL [ CAT.HEAD.MINORS.NORM no_rel,
   	    	    CONT.HOOK.INDEX.E.TENSE no_tense ],
   	    LKEYS.KEYREL.PRED "_left_a_1_rel",
            PHON.ONSET con ] ].

let_down_v1 := v_p-np_le &
 [ ORTH < "let" >,
   SYNSEM [ LOCAL.CAT.HEAD.--MAL3SG -,
	    LKEYS [ --COMPKEY _down_p_sel_rel,
                    KEYREL.PRED "_let_v_down_rel" ],
            PHON.ONSET con ] ].

let_go_of_v1 := v_p-pp_e_le &
 [ ORTH < "let" >,
   SYNSEM [ LOCAL.CAT.HEAD.--MAL3SG -,
	    LKEYS [ --COMPKEY _go_p_sel_rel,
                    --OCOMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_let_v_go-of_rel" ],
            PHON.ONSET con ] ].

let_go_v1 := v_p_le &
 [ ORTH < "let" >,
   SYNSEM [ LOCAL.CAT.HEAD.--MAL3SG -,
	    LKEYS [ --COMPKEY _go_p_sel_rel,
                    KEYREL.PRED "_let_v_go-of_rel" ],
            PHON.ONSET con ] ].

let_in_v1 := v_p-np_le &
 [ ORTH < "let" >,
   SYNSEM [ LOCAL.CAT.HEAD.--MAL3SG -,
	    LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_let_v_in_rel" ],
            PHON.ONSET con ] ].

let_off_v1 := v_p-np_le &
 [ ORTH < "let" >,
   SYNSEM [ LOCAL.CAT.HEAD.--MAL3SG -,
	    LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_let_v_off_rel" ],
            PHON.ONSET con ] ].

let_out_v1 := v_p_le &
 [ ORTH < "let" >,
   SYNSEM [ LOCAL.CAT.HEAD.--MAL3SG -,
	    LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_let_v_out_rel" ],
            PHON.ONSET con ] ].

let_out_v2 := v_p-np_le &
 [ ORTH < "let" >,
   SYNSEM [ LOCAL.CAT.HEAD.--MAL3SG -,
	    LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_let_v_out_rel" ],
            PHON.ONSET con ] ].

let_mal_v1 := v_vp_seq_le_rbst &
 [ ORTH < "let" >,
   SYNSEM [ LOCAL.CAT.HEAD.--MAL3SG -,
	    LKEYS.KEYREL.PRED "_let_v_1_rel",
            PHON.ONSET con ] ].

let_mal_v2 := v_np-vp_oeq_le_rbst &
 [ ORTH < "let" >,
   SYNSEM [ LOCAL.CAT.HEAD.--MAL3SG -,
	    LKEYS.KEYREL.PRED "_let_v_1_rel",
            PHON.ONSET con ] ].

let_mal_v3 := v_vp_seq-bse_le_rbst &
 [ ORTH < "let" >,
   SYNSEM [ LOCAL.CAT [ HEAD.--MAL3SG -,
			VAL.COMPS.FIRST.LEX - ],
	    LKEYS.KEYREL.PRED "_let_v_1_rel",
            PHON.ONSET con ] ].

let_up_v1 := v_p_le &
 [ ORTH < "let" >,
   SYNSEM [ LOCAL.CAT.HEAD.--MAL3SG -,
	    LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_let_v_up_rel" ],
            PHON.ONSET con ] ].

let_up_v2 := v_p-pp_le &
 [ ORTH < "let" >,
   SYNSEM [ LOCAL.CAT.HEAD.--MAL3SG -,
	    LKEYS [ --COMPKEY _up_p_sel_rel,
                    --OCOMPKEY _on_p_rel,
                    KEYREL.PRED "_let_v_up_rel" ],
            PHON.ONSET con ] ].

let_v1 := v_np-vp_bse_le &
 [ ORTH < "let" >,
   SYNSEM [ LOCAL.CAT.HEAD.--MAL3SG -,
	    LKEYS.KEYREL.PRED "_let_v_1_rel",
            PHON.ONSET con ] ].

let_v2 := v_np_ntr_le &
 [ ORTH < "let" >,
   SYNSEM [ LOCAL.CAT.HEAD.--MAL3SG -,
	    LKEYS.KEYREL.PRED "_let_v_1_rel",
            PHON.ONSET con ] ].

like_prd_v1 := v_np-prd_oeq-ntr-x_le &
 [ ORTH < "like" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_like_v_1_rel",
            PHON.ONSET con ] ].

; Block |He liked his liked|
like_v1 := v_np_ntr_le &
 [ ORTH < "like" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_like_v_1_rel",
            PHON.ONSET con ] ].

line_n1 := n_-_c-ed_le &
 [ ORTH < "line" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_line_n_of_rel",
   	    LOCAL.CAT.HEAD.--BARE -,   
            PHON.ONSET con ] ].

;; Redefine as male named character
lion_n1 := n_-_c-nm_le &
 [ ORTH < "Lion" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Lion",
	    LOCAL.CONT.HOOK.INDEX.PNG.GEN masc,
            PHON.ONSET con ] ].

;; This one over-applies, so exclude for now.
;live_in_mal_v1 := v_np_pp_le_rbst &
; [ ORTH < "live" >,
;   SYNSEM [ LKEYS.KEYREL.PRED "_live_v_1_rel",
;            PHON.ONSET con ] ].

living_n1 := n_-_c_le &
 [ ORTH < "living" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_living_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,   
            PHON.ONSET con ] ].

living_room_n1 := n_-_c_le &
 [ ORTH < "living", "room" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_living+room_n_1_rel",
            PHON.ONSET con ] ].

liver_and_onions_n1 := n_-_m_le &
 [ ORTH < "liver", "and", "onions" >,
   SYNSEM [ MODIFD.LPERIPH bool,
   	    LKEYS.KEYREL.PRED "_liver+and+onions_n_1_rel",
            PHON.ONSET con ] ].

loan_mal_v2 := v_-_le_rbst &
 [ ORTH < "loan" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_loan_v_1_rel",
            PHON.ONSET con ] ].

lot_n2 := n_-_c-gr_le &
 [ ORTH < "lot" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lot_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,   
            PHON.ONSET con ] ].

love_n2 := n_pp_mc_le &
 [ ORTH < "love" >,
   SYNSEM [ LOCAL.CAT.HEAD.MINORS.NORM norm_rel,
   	    LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_love_n_of-for_rel" ],
            PHON.ONSET con ] ].

love_v1 := v_np_le &
 [ ORTH < "love" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_love_v_1_rel",
            PHON.ONSET con ] ].

lunch_n1 := n_-_mc_le &
 [ ORTH < "lunch" >,
   SYNSEM [ MODIFD.LPERIPH na,
	    LKEYS.KEYREL.PRED "_lunch_n_1_rel",
            PHON.ONSET con ] ].

the_mad_hatter_n1 := n_-_pn-msc_le &
 [ ORTH < "the", "Mad", "Hatter" >,
   SYNSEM [ LKEYS.KEYREL.CARG "the+Mad+Hatter",
            PHON.ONSET con ] ].

the_macintosh_n1 := n_-_pn-neut_le &
 [ ORTH < "the", "Macintosh" >,
   SYNSEM [ LKEYS.KEYREL.CARG "the+Macintosh",
            PHON.ONSET con ] ].

make_v1 := v_np_le &
 [ ORTH < "make" >,
   ALTS.ATTRJ -,
   SYNSEM [ LKEYS.KEYREL.PRED "_make_v_1_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.MODIFD.RPERIPH bool,
            PHON.ONSET con ] ].

make_mal_v1 := v_vp_seq_le_rbst &
 [ ORTH < "make" >,
   SYNSEM [ LOCAL.CAT.HEAD.--MAL3SG -,
	    LKEYS.KEYREL.PRED "_make_v_cause_rel",
            PHON.ONSET con ] ].

make_mal_v2 := v_np-vp_oeq_le_rbst &
 [ ORTH < "make" >,
   SYNSEM [ LOCAL.CAT.HEAD.--MAL3SG -,
	    LKEYS.KEYREL.PRED "_make_v_cause_rel",
            PHON.ONSET con ] ].

#|
make_mal_v3 := v_-_le_rbst &
 [ ORTH < "make" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_make_v_1_rel",
            PHON.ONSET con ] ].
|#

man1 := n_-_c-msc_le &
 [ ORTH < "man" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_man_n_1_rel",
            PHON.ONSET con ] ].

man_n2 := n_-_m_le &
 [ ORTH < "man" >,
   SYNSEM [ LOCAL.CAT.HEAD.CASE genitive,
            LKEYS.KEYREL.PRED "_man_n_1_rel",
            PHON.ONSET con ] ].

many_mal_adj := aj_-_i-one_le_rbst &
 [ ORTH < "many" >,
   SYNSEM.PHON.ONSET con ].

meat_n1 := n_-_mc_le &
 [ ORTH < "meat" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_meat_n_1_rel",
            PHON.ONSET con ] ].

more_mal_adj := aj_-_i-one_le_rbst &
 [ ORTH < "more" >,
   SYNSEM.PHON.ONSET con ].

;; Redefine as female named character
mouse_n1 := n_-_c-nm_le &
 [ ORTH < "Mouse" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Mouse",
	    LOCAL.CONT.HOOK.INDEX.PNG.GEN fem,
            PHON.ONSET con ] ].

much_a1_rbst := aj_-_i-many_le &
 [ ORTH < "much" >,
   SYNSEM [ LKEYS.KEYREL.PRED much-many_a_rel,
            PHON.ONSET con ],
   GENRE robust ].

march_n1 := n_-_c_le &
 [ ORTH < "march" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_march_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,   
            PHON.ONSET con ] ].

the_march_hare_n1 := n_-_pn-msc_le &
 [ ORTH < "the", "March", "Hare" >,
   SYNSEM [ LKEYS.KEYREL.CARG "the+March+Hare",
            PHON.ONSET con ] ].

meeting_n1 := n_-_c_le &
 [ ORTH < "meeting" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_meeting_n_of_rel",
   	    LOCAL.CAT.HEAD.--BARE -,   
            PHON.ONSET con ] ].

mens_a1_mal := aj_-_i-cmpd_le_rbst &
 [ ORTH < "mens" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mens_a_1_rel",
            PHON.ONSET con ] ].

mice_hunt_v1 := v_-_le &
 [ ORTH < "mice", "hunt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mice+hunt_v_1_rel",
            PHON.ONSET con ] ].

middlefields_n1 := n_-_pn-pl-def_le &
 [ ORTH < "Middlefields" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Middlefield",
            PHON.ONSET con ] ].

midnight_n1 := n_-_c_le &
 [ ORTH < "midnight" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_midnight_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

mine_n1 := n_pp_c-of_le &
 [ ORTH < "mine" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mine_n_of_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

misbehave_v1 := v_-_le &
 [ ORTH < "misbehave" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_misbehave_v_1_rel",
            PHON.ONSET con ] ].

miss_ttl_n1 := n_-_c-pre-ttl_le &
 [ ORTH < "Miss" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_miss_n_1_rel",
            LOCAL [ CAT.HEAD.MINORS.MIN pre_title_rel,
	            CONT.HOOK.INDEX.PNG.GEN fem ],
            PHON.ONSET con ] ].

missus_abb_n1 := n_-_c-pre-ttl_le &
 [ ORTH < "Mrs" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_missus_n_1_rel",
            LOCAL [ CAT.HEAD.MINORS.MIN pre_title_rel,
	            CONT.HOOK.INDEX.PNG.GEN fem ],
            PHON.ONSET con ] ].

missus_abb_n2 := n_-_c-pre-ttl_le &
 [ ORTH < "Mrs." >,
   SYNSEM [ LKEYS.KEYREL.PRED "_missus_n_1_rel",
            LOCAL [ CAT.HEAD.MINORS.MIN pre_title_rel,
	            CONT.HOOK.INDEX.PNG.GEN fem ],
            PHON.ONSET con ] ].

mistreat_v1 := v_np_le &
 [ ORTH < "mistreat" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mistreat_v_1_rel",
            PHON.ONSET con ] ].

mister_abb_n1 := n_-_c-pre-ttl_le &
 [ ORTH < "Mr" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mister_n_1_rel",
            LOCAL [ CAT.HEAD.MINORS.MIN pre_title_rel,
	            CONT.HOOK.INDEX.PNG.GEN masc ],
            PHON.ONSET con ] ].

mister_abb_n2 := n_-_c-pre-ttl_le &
 [ ORTH < "Mr." >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mister_n_1_rel",
            LOCAL [ CAT.HEAD.MINORS.MIN pre_title_rel,
	            CONT.HOOK.INDEX.PNG.GEN masc ],
            PHON.ONSET con ] ].

mister_n1 := n_-_c-pre-ttl_le &
 [ ORTH < "mister" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mister_n_1_rel",
            LOCAL [ CAT.HEAD.MINORS.MIN pre_title_rel,
	            CONT.HOOK.INDEX.PNG.GEN masc ],
            PHON.ONSET con ] ].

misunderstand_v1 := v_np_le &
 [ ORTH < "misunderstand" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_misunderstand_v_1_rel",
            PHON.ONSET con ] ].

ms_n1 := n_-_c-pre-ttl_le &
 [ ORTH < "ms" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ms_n_1_rel",
            LOCAL [ CAT.HEAD.MINORS.MIN pre_title_rel,
	            CONT.HOOK.INDEX.PNG.GEN fem ],
            PHON.ONSET con ] ].

ms_n2 := n_-_c-pre-ttl_le &
 [ ORTH < "ms." >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ms_n_1_rel",
            LOCAL [ CAT.HEAD.MINORS.MIN pre_title_rel,
	            CONT.HOOK.INDEX.PNG.GEN fem ],
            PHON.ONSET con ] ].

mom_n2 := n_-_c-fem_le &
 [ ORTH < "mom" >,
   SYNSEM [ LOCAL.CAT.HEAD.MINORS.NORM norm_rel,
   	    LKEYS.KEYREL.PRED "_mom_n_1_rel",
            PHON.ONSET con ],
   TOKENS.+LAST.+CLASS.+CASE non_capitalized ].

Monday_afternoon_n1 := n_-_c-dpt_le &
 [ ORTH < "Monday", "afternoon" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_Monday+afternoon_n_of_rel",
            PHON.ONSET con ] ].

money_n1 := n_-_m_le &
 [ ORTH < "money" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_money_n_1_rel",
            PHON.ONSET con ] ].

mop_clean_v1 := v_p-np_le &
 [ ORTH < "mop" >,
   SYNSEM [ LKEYS [ --COMPKEY _clean_a_sel_rel,
                    KEYREL.PRED "_mop_v_clean_rel" ],
            PHON.ONSET con ] ].

mop_clean_v2 := v_p_le &
 [ ORTH < "mop" >,
   SYNSEM [ LKEYS [ --COMPKEY _clean_a_sel_rel,
                    KEYREL.PRED "_mop_v_clean_rel" ],
            PHON.ONSET con ] ].

;; Block "only most bikes"
;;
most_det := d_-_prt-plm_le &
 [ ORTH < "most" >,
   SYNSEM [ LKEYS.KEYREL.PRED _most_q_rel,
            LOCAL.CAT.VAL.SPR.FIRST anti_synsem_min,
            PHON.ONSET con ] ].

#|
most_adv2 := av_-_s-cp-pr_le &
 [ ORTH < "most" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_most_a_1_rel",
            PHON.ONSET con ] ].

most_adv3 := av_-_i-vp-pr_le &
 [ ORTH < "most" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_most_a_1_rel",
            PHON.ONSET con ] ].
|#

most_of_all_adv1 := av_-_i-vp-po_le &
 [ ORTH < "most", "of", "all" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_most+of+all_a_1_rel",
            PHON.ONSET con ] ].

most_of_all_adv2 := av_-_s-cp-pr_le &
 [ ORTH < "most", "of", "all" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_most+of+all_a_1_rel",
            PHON.ONSET con ] ].

most_mal_adj := aj_-_i-one_le_rbst &
 [ ORTH < "most" >,
   SYNSEM.PHON.ONSET con ].

motivation_of_for_mal_n1 := n_pp_c_le_rbst &
 [ ORTH < "motivation" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
		    KEYREL.PRED "_motivation_n_for_rel" ],
            PHON.ONSET con ] ].

;; NORM norm_rel blocks |mother bear|, so remove, and remind ourselves what
;; it was there for.
;;
mother_n1 := n_pp_c-of-fem_le &
 [ ORTH < "mother" >,
   SYNSEM [ LOCAL.CAT.HEAD [ --BARE - ],
   	    LKEYS.KEYREL.PRED "_mother_n_of_rel",
            PHON.ONSET con ],
   TOKENS.+LAST.+CLASS.+CASE non_capitalized ].

mothers_day := n_-_m-hldy_le &
 [ ORTH < "Mother", "'s", "Day" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Mothers_Day",
            PHON.ONSET con ] ].

mothers_day_card_n1 := n_-_c_le &
 [ ORTH < "Mother", "'s", "Day", "card" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_Mothers+Day+card_n_1_rel",
            PHON.ONSET con ] ].

mothers_day_meal_n1 := n_-_c_le &
 [ ORTH < "Mother", "'s", "Day", "meal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_Mothers+Day+meal_n_1_rel",
            PHON.ONSET con ] ].

mouse_hunt_v1 := v_-_le &
 [ ORTH < "mouse", "hunt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mouse+hunt_v_1_rel",
            PHON.ONSET con ] ].

nature_n1 := n_-_c-ed_le &
 [ ORTH < "nature" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nature_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

need_mal_v1 := v_-_le_rbst &
 [ ORTH < "need" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_need_v_1_rel",
            PHON.ONSET con ] ].

need-prd := v_np-prd_oeq-ntr-x_le &
 [ ORTH < "need" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_need_v_pred_rel",
            PHON.ONSET con ] ].

need_of_for_mal_n1 := n_pp_c_le_rbst &
 [ ORTH < "need" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
		    KEYREL.PRED "_need_n_for_rel" ],
            PHON.ONSET con ] ].

need_on_of_mal_n1 := n_pp_c_le_rbst &
 [ ORTH < "need" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
		    KEYREL.PRED "_need_n_of_rel" ],
            PHON.ONSET con ] ].

need_towards_for_mal_n1 := n_pp_c_le_rbst &
 [ ORTH < "need" >,
   SYNSEM [ LKEYS [ --COMPKEY _towards_p_sel_rel,
		    KEYREL.PRED "_need_n_for_rel" ],
            PHON.ONSET con ] ].

never_adv1 := av_-_s-vp-x_le &
 [ ORTH < "never" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_never_a_1_rel",
            PHON.ONSET con,
            LOCAL.CAT.NEGPOL na ] ].

never_adv1_rbst := av_-_s-vp-x_le &
 [ ORTH < "never" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_never_a_1_rel",
            PHON.ONSET con,
            LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

nguyens_n1 := n_-_pn-pl-def_le &
 [ ORTH < "Nguyens" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Nguyen",
            PHON.ONSET con ] ].

night_nc_n1 := n_-_c-dpt_le &
 [ ORTH < "night" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_night_n_of_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

no_longer := av_-_i-vp-x_le &
 [ ORTH < "no", "longer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_no+longer_a_1_rel",
            PHON.ONSET con,
	    LOCAL.CAT.NEGPOL na ] ].

no_longer_rbst := av_-_i-vp-x_le &
 [ ORTH < "no", "longer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_no+longer_a_1_rel",
            PHON.ONSET con,
	    LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

no_longer_adv2 := av_-_i-vp-po_le &
 [ ORTH < "no", "longer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_no+longer_a_1_rel",
            PHON.ONSET con,
	    LOCAL.CAT.NEGPOL na ] ].

no_longer_adv2_rbst := av_-_i-vp-po_le &
 [ ORTH < "no", "longer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_no+longer_a_1_rel",
            PHON.ONSET con,
	    LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

nor_conj := c_xp_nor_le &
 [ ORTH < "nor" >,
   SYNSEM [ LOCAL.CAT.NEGPOL +,
            PHON.ONSET con ] ].

not := av_-_s-not_le &
 [ ORTH < "not" >,
   SYNSEM [ LKEYS.KEYREL.PRED neg_rel,
            PHON.ONSET con,
            LOCAL.CAT [ HEAD.MOD.FIRST.LOCAL.CAT.NEGPOL -,
	                NEGPOL - ] ] ].

;; Negative polarity
not_rbst := av_-_s-not_le &
 [ ORTH < "not" >,
   SYNSEM [ LKEYS.KEYREL.PRED neg_rel,
            PHON.ONSET con,
            LOCAL.CAT [ HEAD.MOD.FIRST.LOCAL.CAT.NEGPOL +,
	                NEGPOL + ] ],
   GENRE robust ].

not_prdp := av_-_s-not-prdp_le &
 [ ORTH < "not" >,
   SYNSEM [ LKEYS.KEYREL.PRED neg_rel,
            PHON.ONSET con,
            LOCAL.CAT.HEAD.MOD.FIRST.LOCAL.CAT.NEGPOL - ] ].

not_prdp_rbst := av_-_s-not-prdp_le &
 [ ORTH < "not" >,
   SYNSEM [ LKEYS.KEYREL.PRED neg_rel,
            PHON.ONSET con,
            LOCAL.CAT.HEAD.MOD.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

nobody := n_-_pr_le &
 [ ORTH < "nobody" >,
   SYNSEM [ LKEYS [ ALTKEYREL.PRED _no_q_rel,
                    KEYREL.PRED person_rel ],
            PHON.ONSET con,
	    LOCAL.CAT.NEGPOL + ] ].

nothing := n_-_pr_le &
 [ ORTH < "nothing" >,
   SYNSEM [ LKEYS [ ALTKEYREL.PRED _no_q_rel,
                    KEYREL.PRED thing_rel ],
            PHON.ONSET con,
	    LOCAL.CAT.NEGPOL + ] ].

nowhere_n1 := n_-_pr-ad_le &
 [ ORTH < "nowhere" >,
   SYNSEM [ LKEYS [ ALTKEYREL.PRED _no_q_rel,
                    KEYREL.PRED place_n_rel ],
            PHON.ONSET con,
	    LOCAL.CAT.NEGPOL + ] ].

; Hack, since in general don't want to allow appositives with mass_n rgt dtr.
nutrient_beta_carotene_n1 := n_-_m_le &
 [ ORTH < "nutrient", "beta-", "carotene" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nutrient+beta-carotene_n_1_rel",
            PHON.ONSET con ] ].

of_poss_stutter_rbst := p_np_i-nm-poss_le &
 [ ORTH < "of", "of" >,
   SYNSEM [ LKEYS.KEYREL.PRED _of_p_rel,
            PHON.ONSET voc ],
   GENRE robust ].

oftener_adv_mal := av_-_i-vp-cmp_le_rbst &
 [ ORTH < "oftener" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_oftener_a_1_rel",
            PHON.ONSET voc ] ].

olinguito_n1 := n_-_c_le &
 [ ORTH < "olinguito" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_olinguito_n_1_rel",
            PHON.ONSET voc ] ].

on_adv := pp_-_i-dir-nnm_le &
 [ ORTH < "on" >,
   SYNSEM [ LKEYS.KEYREL.PRED _on_p_rel,
            PHON.ONSET voc ] ].

one_way_a1 := aj_-_i_le &
 [ ORTH < "one-", "way" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_one-way_a_1_rel",
            PHON.ONSET con ] ].


only_adv1 := av_-_i-vp-x-only_le &
 [ ORTH < "only" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_only_a_1_rel",
            PHON.ONSET voc ] ].

only_adv1_rbst := av_-_i-vp-pr_le &
 [ ORTH < "only" >,
   SYNSEM [ LOCAL.CAT.HEAD.MOD < [ LOCAL.CAT.HEAD.AUX + ] >,
            LKEYS.KEYREL.PRED "_only_a_to_rel",
            PHON.ONSET voc ],
   GENRE robust ].

on_stage_adv1 := av_-_i-vp-po_le &
 [ ORTH < "on", "stage" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_on+stage_a_1_rel",
            PHON.ONSET voc ] ].

opportunity_of_for_mal_n1 := n_pp_c_le_rbst &
 [ ORTH < "opportunity" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
		    KEYREL.PRED "_opportunity_n_for_rel" ],
            PHON.ONSET voc ] ].


order_n3 := n_vp_c_le &
 [ ORTH < "order" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_order_n_of_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET voc ] ].

other_rbst := d_-_prt-sg_le &
 [ ORTH < "other" >,
   SYNSEM [ LKEYS.KEYREL.PRED udef_q_rel,
            PHON.ONSET voc ],
   GENRE robust ].

otter_n1 := n_-_c_le &
 [ ORTH < "otter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_otter_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET voc ] ].

out_of_bed_adv := pp_-_i_le &
 [ ORTH < "out", "of", "bed" >,
   SYNSEM [ LKEYS.KEYREL.PRED _out+of+bed_p_rel,
            PHON.ONSET voc ] ].

outside_adv1 := pp_-_i_le &
 [ ORTH < "outside" >,
   SYNSEM [ LKEYS.KEYREL.PRED _outside_p_rel,
            PHON.ONSET voc ] ].

outside_n1 := n_pp_c-nocnh-of_le &
 [ ORTH < "outside" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_outside_n_of_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET voc ] ].

owl_n := n_-_c_le &
 [ ORTH < "owl" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_owl_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET voc ] ].

owners_a1_mal := aj_-_i-cmpd_le_rbst &
 [ ORTH < "owners" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_owners_a_1_rel",
            PHON.ONSET voc ] ].

pacific_ocean_n1 := n_-_c-nm_le &
 [ ORTH < "Pacific", "Ocean" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Pacific+Ocean",
            PHON.ONSET con ] ].

pack_n1 := n_pp_c-of_le &
 [ ORTH < "pack" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pack_n_of_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

painting_n1 := n_pp_c-of_le &
 [ ORTH < "painting" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_painting_n_of_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

palace_n1 := n_-_c_le &
 [ ORTH < "palace" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_palace_n_1_rel",
            LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

paper_n1 := n_-_c_le &
 [ ORTH < "paper" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_paper_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

paper_n2 := n_-_m-ed_le &
 [ ORTH < "paper" >,
   SYNSEM [ LOCAL.CAT.VAL.SPR.FIRST.LOCAL.AGR.PNG.PN 3s,
            LKEYS.KEYREL.PRED "_paper_n_1_rel",
            PHON.ONSET con ] ].

parduccis_n1 := n_-_pn-pl-def_le &
 [ ORTH < "Parduccis" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Parducci",
            PHON.ONSET con ] ].

part_n1 := n_-_c-ns_le &
 [ ORTH < "part" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_part_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,   
            PHON.ONSET con ] ].

; Block passive: |Everyone in class passed|
pass_v1 := v_np_ntr_le &
 [ ORTH < "pass" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pass_v_1_rel",
            PHON.ONSET con ] ].

patient_n1 := n_-_c_le &
 [ ORTH < "patient" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_patient_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,   
            PHON.ONSET con ] ].

peach_n1 := n_-_c_le &
 [ ORTH < "peach" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_peach_n_1_rel",
            PHON.ONSET con ] ].

pencil_n1 := n_-_c_le &
 [ ORTH < "pencil" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pencil_n_1_rel",
            PHON.ONSET con ] ].

peoples_a1_mal := aj_-_i-cmpd_le_rbst &
 [ ORTH < "peoples" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_peoples_a_1_rel",
            PHON.ONSET con ] ].

per_cent_n1 := n_pp_c-of_le &
 [ ORTH < "per", "cent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_percent_n_of_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

percent_char_n2 := n_pp_c-of-obl_le &
 [ ORTH < "%" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_percent_n_of_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

percent_n1 := n_pp_c-of-obl_le &
 [ ORTH < "percent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_percent_n_of_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

#|
pet_a1 := aj_-_i-att_le &
 [ ORTH < "pet" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pet_a_1_rel",
            PHON.ONSET con ] ].
|#

pharaoh_n1 := n_-_mc_le &
 [ ORTH < "pharaoh" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pharaoh_n_1_rel",
            PHON.ONSET con ] ].

pick_mal_v1 := v_-_le_rbst &
 [ ORTH < "pick" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pick_v_1_rel",
            PHON.ONSET con ] ].

place_n1 := n_pp_c-plc-of_le &
 [ ORTH < "place" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_place_n_of_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

play_n1 := n_-_c_le &
 [ ORTH < "play" >,
   SYNSEM [ LOCAL.CAT cat_infl_nosuff &
		      [ HEAD [ --BARE -,
			       MINORS.NORM norm_rel ] ],
            LKEYS.KEYREL.PRED "_play_n_1_rel",
            PHON.ONSET con ] ].

;; For "play ball", "play catch"
play_nbar_v1 := v_nb_le &
 [ ORTH < "play" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_play_v_1_rel",
            PHON.ONSET con ] ].

players_a1_mal := aj_-_i-cmpd_le_rbst &
 [ ORTH < "players" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_players_a_1_rel",
            PHON.ONSET con ] ].

polices_n1 := n_-_c-pl_le_rbst &
 [ ORTH < "polices" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_police_n_1_rel",
            PHON.ONSET con ] ].

pony_express_n1 := n_-_c-nm_le &
 [ ORTH < "Pony", "Express" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Pony+Express",
            PHON.ONSET con ] ].

poorly_isect := av_-_i-vp-po_le &
 [ ORTH < "poorly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_poor_a_1_rel",
            PHON.ONSET con ] ].

population_n1 := n_-_c_le &
 [ ORTH < "population" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_population_n_1_rel",
            PHON.ONSET con ] ].

population_n2 := n_pp_m-obl_le &
 [ ORTH < "population" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_population_n_of_rel" ],
            PHON.ONSET con ] ].

pot_n1 := n_-_c-ed_le &
 [ ORTH < "pot" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pot_n_1_rel",
            PHON.ONSET con ] ].

pounce_on_mal_v1 := v_np_pp_le_rbst &
 [ ORTH < "pounce" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pounce_v_on_rel",
            PHON.ONSET con ] ].

practice_v1 := v_np*_le &
 [ ORTH < "practice" >,
   SYNSEM [ LOCAL.CAT [ HEAD.--MAL3SG -,
   	                VAL.SUBJ < [ LOCAL.CAT.HEAD.--BARE - ] > ],
	    LKEYS.KEYREL.PRED "_practice_v_1_rel",
            PHON.ONSET con ] ].

;; DPF 2015-03-26 - Prevent robust depictive in |He mailed her present|
;;
present_a1 := aj_-_i_le &
 [ ORTH < "present" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_present_a_1_rel",
            PHON.ONSET con,
	    OPT - ] ].


president_n1 := n_pp_c-of_le &
 [ ORTH < "president" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_president_n_of_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

president_title_n1 := n_-_c-pre-ttl_le &
 [ ORTH < "President" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_president_n_1_rel",
            LOCAL.CAT.HEAD.MINORS.MIN pre_title_rel,
            PHON.ONSET con ] ].

prevent_from_mal_v1 := v_pp_np_le_rbst &
 [ ORTH < "prevent" >,
   SYNSEM [ LKEYS [ --COMPKEY _from_p_sel_rel,
                    KEYREL.PRED "_prevent_v_1_rel" ],
            PHON.ONSET con ] ].

prize_n1 := n_pp_c_le &
 [ ORTH < "prize" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_prize_n_for_rel" ],
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

problem_solving_n1 := n_-_m_le &
 [ ORTH < "problem", "solving" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_problem+solving_n_1_rel",
            PHON.ONSET con ] ].

problem_solving_n2 := n_-_m_le &
 [ ORTH < "problem-", "solving" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_problem+solving_n_1_rel",
            PHON.ONSET con ] ].

process_n1 := n_pp_c-ns-of_le &
 [ ORTH < "process" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_process_n_of_rel",
            PHON.ONSET con ] ].

protect_v1 := v_np_le &
 [ ORTH < "protect" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_protect_v_1_rel",
            PHON.ONSET con ] ].

protection_n1 := n_pp_m_le &
 [ ORTH < "protection" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_protection_n_of_rel" ],
            PHON.ONSET con ] ].

provide_of_with_mal_v1 := v_np-pp_e_le_rbst &
 [ ORTH < "provide" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _of_p_sel_rel,
		    KEYREL.PRED "_provide_v_with_rel" ],
            PHON.ONSET con ] ].

puppy_n1 := n_-_c-ugen_le &
 [ ORTH < "puppy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_puppy_n_1_rel",
            PHON.ONSET con ] ].

put_aside_v1 := v_p-np_le &
 [ ORTH < "put" >,
   SYNSEM [ LOCAL.CAT.HEAD.--MAL3SG -,
	    LKEYS [ --COMPKEY _aside_p_sel_rel,
                    KEYREL.PRED "_put_v_aside_rel" ],
            PHON.ONSET con ] ].

put_away_v1 := v_p-np_le &
 [ ORTH < "put" >,
   SYNSEM [ LOCAL.CAT.HEAD.--MAL3SG -,
	    LKEYS [ --COMPKEY _away_p_sel_rel,
                    KEYREL.PRED "_put_v_away_rel" ],
            PHON.ONSET con ] ].

put_back_v1 := v_p-np_le &
 [ ORTH < "put" >,
   SYNSEM [ LOCAL.CAT.HEAD.--MAL3SG -,
	    LKEYS [ --COMPKEY _back_p_sel_rel,
                    KEYREL.PRED "_put_v_back_rel" ],
            PHON.ONSET con ] ].

put_by_v1 := v_p-np_le &
 [ ORTH < "put" >,
   SYNSEM [ LOCAL.CAT.HEAD.--MAL3SG -,
	    LKEYS [ --COMPKEY _by_p_sel_rel,
                    KEYREL.PRED "_put_v_by_rel" ],
            PHON.ONSET con ] ].

put_down_v1 := v_p-np_le &
 [ ORTH < "put" >,
   SYNSEM [ LOCAL.CAT.HEAD.--MAL3SG -,
	    LKEYS [ --COMPKEY _down_p_sel_rel,
                    KEYREL.PRED "_put_v_down_rel" ],
            PHON.ONSET con ] ].

put_in_v1 := v_p-np_le &
 [ ORTH < "put" >,
   SYNSEM [ LOCAL.CAT.HEAD.--MAL3SG -,
	    LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_put_v_in_rel" ],
            PHON.ONSET con ] ].

put_in_v2 := v_p_le &
 [ ORTH < "put" >,
   SYNSEM [ LOCAL.CAT.HEAD.--MAL3SG -,
	    LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_put_v_in_rel" ],
            PHON.ONSET con ] ].

put_off_v1 := v_p-np_le &
 [ ORTH < "put" >,
   SYNSEM [ LOCAL.CAT.HEAD.--MAL3SG -,
	    LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_put_v_off_rel" ],
            PHON.ONSET con ] ].

put_off_v2 := v_np-p-np_le &
 [ ORTH < "put" >,
   SYNSEM [ LOCAL.CAT.HEAD.--MAL3SG -,
	    LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_put_v_off_rel" ],
            PHON.ONSET con ] ].

put_on_v1 := v_p-np_le &
 [ ORTH < "put" >,
   SYNSEM [ LOCAL.CAT.HEAD.--MAL3SG -,
	    LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_put_v_on_rel" ],
            PHON.ONSET con ] ].

put_out_v1 := v_p-np_le &
 [ ORTH < "put" >,
   SYNSEM [ LOCAL.CAT.HEAD.--MAL3SG -,
	    LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_put_v_out_rel" ],
            PHON.ONSET con ] ].

put_out_v2 := v_p_le &
 [ ORTH < "put" >,
   SYNSEM [ LOCAL.CAT.HEAD.--MAL3SG -,
	    LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_put_v_out_rel" ],
            PHON.ONSET con ] ].

put_through_v1 := v_p-np-pp_to_le &
 [ ORTH < "put" >,
   SYNSEM [ LOCAL.CAT.HEAD.--MAL3SG -,
	    LKEYS [ --COMPKEY _through_p_sel_rel,
                    KEYREL.PRED "_put_v_through_rel" ],
            PHON.ONSET con ] ].

put_through_v2 := v_p-np_le &
 [ ORTH < "put" >,
   SYNSEM [ LOCAL.CAT.HEAD.--MAL3SG -,
	    LKEYS [ --COMPKEY _through_p_sel_rel,
                    KEYREL.PRED "_put_v_through_rel" ],
            PHON.ONSET con ] ].

put_together_v1 := v_p-np_le &
 [ ORTH < "put" >,
   SYNSEM [ LOCAL.CAT.HEAD.--MAL3SG -,
	    LKEYS [ --COMPKEY _together_p_sel_rel,
                    KEYREL.PRED "_put_v_together_rel" ],
            PHON.ONSET con ] ].

put_up+with_v1 := v_p-pp_e_le &
 [ ORTH < "put" >,
   SYNSEM [ LOCAL.CAT.HEAD.--MAL3SG -,
	    LKEYS [ --COMPKEY _up_p_sel_rel,
                    --OCOMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_put_v_up-with_rel" ],
            PHON.ONSET con ] ].

put_up_v1 := v_p-np_le &
 [ ORTH < "put" >,
   SYNSEM [ LOCAL.CAT.HEAD.--MAL3SG -,
	    LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_put_v_up_rel" ],
            PHON.ONSET con ] ].

put_up_v2 := v_p_le &
 [ ORTH < "put" >,
   SYNSEM [ LOCAL.CAT.HEAD.--MAL3SG -,
	    LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_put_v_up_rel" ],
            PHON.ONSET con ] ].

put_v1 := v_np-pp_prop_le &
 [ ORTH < "put" >,
   SYNSEM [ LOCAL.CAT.HEAD.--MAL3SG -,   
	    LKEYS.KEYREL.PRED "_put_v_1_rel",
            PHON.ONSET con ] ].

queen_ttl_n1 := n_-_c-pre-ttl_le &
 [ ORTH < "Queen" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_queen_n_of_rel",
            LOCAL.CAT.HEAD.MINORS.MIN pre_title_rel,
            PHON.ONSET con ] ].

quicker_adv_mal := av_-_i-vp-cmp_le_rbst &
 [ ORTH < "quicker" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_quicker_a_1_rel",
            PHON.ONSET con ] ].

quicker_a1_mal := aj_-_i-cmp_le_rbst &
 [ ORTH < "quicker" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_quick_a_1_rel",
            PHON.ONSET con ] ].

quit-prd := v_vp_ssr-prp_le &
 [ ORTH < "quit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_quit_v_prd_rel",
            LOCAL.CAT.HEAD.--MAL3SG -,
            PHON.ONSET con ] ].

quit_v1 := v_np*_le &
 [ ORTH < "quit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_quit_v_1_rel",
            LOCAL.CAT.HEAD.--MAL3SG -,
            PHON.ONSET con ] ].

radio_n1 := n_-_c_le &
 [ ORTH < "radio" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_radio_n_1_rel",
            PHON.ONSET con ] ].

rate_n1 := n_pp_c-of_le &
 [ ORTH < "rate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rate_n_of_rel",
            PHON.ONSET con ] ].

read_n1 := n_-_c_le &
 [ ORTH < "read" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_read_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

read_v1 := v_np*_le &
 [ ORTH < "read" >,
   SYNSEM [ LOCAL.CAT.HEAD.--MAL3SG -,
            LKEYS.KEYREL.PRED "_read_v_1_rel",
            PHON.ONSET con ] ].

read_v2 := v_pp*-cp_le &
 [ ORTH < "read" >,
   SYNSEM [ LOCAL.CAT.HEAD.--MAL3SG -,
            LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_read_v_1_rel" ],
            PHON.ONSET con ] ].

read_v3 := v_np-np_le &
 [ ORTH < "read" >,
   SYNSEM [ LOCAL.CAT.HEAD.--MAL3SG -,
            LKEYS.KEYREL.PRED "_read_v_1_rel",
            PHON.ONSET con ] ].

realize_v1 := v_np_le &
 [ ORTH < "realize" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_realize_v_1_rel",
            PHON.ONSET con ] ].

reason_of_for_mal_n1 := n_pp_c_le_rbst &
 [ ORTH < "reason" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
		    KEYREL.PRED "_reason_n_for_rel" ],
            PHON.ONSET con ] ].

reds_n1 := n_-_c-pl-ifl_le &
 [ ORTH < "reds" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_red_n_1_rel",
            PHON.ONSET con ] ].

regard_to_mal_v1 := v_pp_np_le_rbst &
 [ ORTH < "regard" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_regard_v_1_rel" ],
            PHON.ONSET con ] ].

reindeer_n1 := n_-_c_le &
 [ ORTH < "reindeer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reindeer_n_1_rel",
   	    LOCAL.CAT cat_infl_nosuff &  [ HEAD.--BARE - ],
            PHON.ONSET con ] ].

relate_with_to_mal_v1 := v_np-pp_e_le_rbst &
 [ ORTH < "relate" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _with_p_sel_rel,
		    KEYREL.PRED "_relate_v_to_rel" ],
            PHON.ONSET con ] ].

relax_v1 := v_-_le &
 [ ORTH < "relax" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_relax_v_1_rel",
            PHON.ONSET con ] ].

rely_upon_on_mal_v1 := v_pp_e_le_rbst &
 [ ORTH < "rely" >,
   SYNSEM [ LKEYS [ --COMPKEY _upon_p_sel_rel,
                    KEYREL.PRED "_rely_v_on_rel" ],
            PHON.ONSET con ] ].

remain_v3 := v_np_ntr_le &
 [ ORTH < "remain" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_remain_v_1_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL [ AGR.IND +,
	                                      CAT.HEAD.--BARE + ],
            PHON.ONSET con ] ].

remove_n1 := n_-_c-nocnh_le &
 [ ORTH < "remove" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_remove_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

replica_from_of_mal_n1 := n_pp_c_le_rbst &
 [ ORTH < "replica" >,
   SYNSEM [ LKEYS [ --COMPKEY _from_p_sel_rel,
		    KEYREL.PRED "_replica_n_of_rel" ],
            PHON.ONSET con ] ].

report_v2 := v_np*_le &
 [ ORTH < "report" >,
   SYNSEM [ LOCAL.CAT.HEAD.--MAL3SG -,
            LKEYS.KEYREL.PRED "_report_v_to_rel",
            PHON.ONSET con ] ].
	    
request_for_mal_v1 := v_pp_np_le_rbst &
 [ ORTH < "request" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_request_v_1_rel" ],
            PHON.ONSET con ] ].

research_on_mal_v1 := v_pp_np_le_rbst &
 [ ORTH < "research" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_research_v_1_rel" ],
            PHON.ONSET con ] ].

result_in_mal_v1 := v_np_pp_le_rbst &
 [ ORTH < "result" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_result_v_in_rel",
            PHON.ONSET con ] ].

result_to_in_mal_v1 := v_pp_e_le_rbst &
 [ ORTH < "result" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_result_v_in_rel" ],
            PHON.ONSET con ] ].

;; Remove pp_dir complement so |return to| and |go back to| both treat to-PP
;; as stative, not directional (we don't have a type v_p-pp_dir_le).
;;
return_v2 := v_-_le &
 [ ORTH < "return" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_return_v_1_rel",
            PHON.ONSET con ] ].

;; Pretend this can't passivize, to avoid unwanted preferred parse for 
;; |The Brahman and the jackal returned to the cage|
return_v5 := v_np_ntr_le &
 [ ORTH < "return" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_return_v_1_rel",
            PHON.ONSET con ] ].

rfid_nounif_n1 := n_-_pn-nounif_le &
 [ ORTH < "RFID" >,
   SYNSEM [ LKEYS.KEYREL.CARG "RFID",
            PHON.ONSET voc ] ].

ribbon_n1 := n_-_c_le &
 [ ORTH < "ribbon" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ribbon_n_1_rel",
            PHON.ONSET con ] ].

ride_n1 := n_-_c_le &
 [ ORTH < "ride" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ride_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

ride_v1 := v_np_noger_le &
 [ ORTH < "ride" >,
   SYNSEM [ LOCAL.CAT.HEAD.--MAL3SG -,
            LKEYS.KEYREL.PRED "_ride_v_1_rel",
            PHON.ONSET con ] ].

ride_v2 := v_pp*_dir_le &
 [ ORTH < "ride" >,
   SYNSEM [ LOCAL.CAT.HEAD.--MAL3SG -,
            LKEYS.KEYREL.PRED "_ride_v_1_rel",
            PHON.ONSET con ] ].


; Blocking the intransitive excludes too many good examples
#|
ride_v2 := v_pp_dir_le &
 [ ORTH < "ride" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ride_v_1_rel",
            PHON.ONSET con ] ].
|#

ring_n1 := n_-_c_le &
 [ ORTH < "ring" >,
   SYNSEM [ MODIFD.LPERIPH +,
            LKEYS.KEYREL.PRED "_ring_n_1_rel",
            PHON.ONSET con ] ].

ringmaster_n1 := n_-_mc_le &
 [ ORTH < "ringmaster" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ringmaster_n_1_rel",
            PHON.ONSET con ] ].

risk_n1 := n_pp_c-ns-of_le &
 [ ORTH < "risk" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_risk_n_of_rel",
            LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

risk_to_of_mal_n1 := n_pp_c_le_rbst &
 [ ORTH < "risk" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
		    KEYREL.PRED "_risk_n_of_rel" ],
            PHON.ONSET con ] ].

road_n1 := n_-_c_le &
 [ ORTH < "road" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_road_n_1_rel",
            LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

robin_n2 := n_-_c_le &
 [ ORTH < "robin" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_robin_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,   
            PHON.ONSET con ] ].

; Need both count and mass variants.  Maybe use two entries with distinct
; senses? "rock (stone)" vs. "rock (music)"
;rock_n1 := n_-_c_le &
; [ ORTH < "rock" >,
;   SYNSEM [ LKEYS.KEYREL.PRED "_rock_n_1_rel",
;            PHON.ONSET con ] ].

rocky_road_n1 := n_-_m_le &
 [ ORTH < "rocky", "road" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rocky+road_n_1_rel",
            PHON.ONSET con ] ].

role_playing_n1 := n_-_m_le &
 [ ORTH < "role", "playing" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_role+playing_n_1_rel",
            PHON.ONSET con ] ].

role_playing_n2 := n_-_m_le &
 [ ORTH < "role-", "playing" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_role+playing_n_1_rel",
            PHON.ONSET con ] ].

roller_skating_v1 := v_-_prp_le &
 [ ORTH < "roller-skating" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_roller+skate_v_1_rel",
            PHON.ONSET con ] ].

room_n1 := n_-_mc_le &
 [ ORTH < "room" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_room_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,   
            PHON.ONSET con ] ].

roths_n1 := n_-_pn-pl-def_le &
 [ ORTH < "Roths" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Roth",
            PHON.ONSET con ] ].

rough_face_a1 := aj_-_i_le &
 [ ORTH < "rough-", "face" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rough-face_a_1_rel",
            PHON.ONSET con ] ].

;; DPF 13-03-14 - NORM norm_rel prevents e.g. |short-run profit|, so remove.
;;
run_n1 := n_pp_c-of_le &
 [ ORTH < "run" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_run_n_of_rel",
   	    LOCAL.CAT.HEAD [ --BARE - ],
            PHON.ONSET con ] ].

run_v2 := v_np_ntr_le &
 [ ORTH < "run" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_run_v_operate_rel",
            PHON.ONSET con ] ].

s_lower_np1 := n_-_pn-nounif_le &
 [ ORTH < "s" >,
   SYNSEM [ LKEYS.KEYREL.CARG "S",
            PHON.ONSET voc ] ].

saber_toothed_a1 := aj_-_i_le &
 [ ORTH < "saber-", "toothed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_saber-toothed_a_1_rel",
            PHON.ONSET con ] ].

sailor_n1 := n_-_c-msc_le &
 [ ORTH < "sailor" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sailor_n_1_rel",
            PHON.ONSET con ] ].

save_v1 := v_np_le &
 [ ORTH < "save" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_save_v_1_rel",
            PHON.ONSET con ] ].

say_v1 := v_np*_ntr_le &
 [ ORTH < "say" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_say_v_1_rel",
            PHON.ONSET con ] ].

say_in_on_mal_n2 := n_pp_c_le_rbst &
 [ ORTH < "say" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
		    KEYREL.PRED "_say_n_on_rel" ],
            PHON.ONSET con ] ].

say_to_on_mal_n1 := n_pp_c_le_rbst &
 [ ORTH < "say" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
		    KEYREL.PRED "_say_n_on_rel" ],
            PHON.ONSET con ] ].

scan_at_mal_v1 := v_pp_np_le_rbst &
 [ ORTH < "scan" >,
   SYNSEM [ LKEYS [ --COMPKEY _at_p_sel_rel,
                    KEYREL.PRED "_scan_v_1_rel" ],
            PHON.ONSET con ] ].

school_n1 := n_-_m-nomod_le &
 [ ORTH < "school" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_school_n_1_rel",
            LOCAL.CONT.HOOK.INDEX.SORT nonhuman,
            PHON.ONSET con ] ].

school_n2 := n_-_c_le &
 [ ORTH < "school" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_school_n_1_rel",
            LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

;; For 7.F.6650.04
;;
school_day_n1 := n_-_c_le &
 [ ORTH < "school", "day" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_school+day_n_1_rel",
            LOCAL.CONT.HOOK.INDEX.SORT nonhuman,
            PHON.ONSET con ] ].

scream_v1 := v_-_le &
 [ ORTH < "scream" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_scream_v_1_rel",
            PHON.ONSET con ] ].

see_v2 := v_cp_le &
 [ ORTH < "see" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_see_v_1_rel",
            PHON.ONSET con ] ].

; Also allow WH-sentential complements
see_v2a := v_cp_fin-inf-q_le &
 [ ORTH < "see" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_see_v_1_rel",
            LOCAL.CAT.VAL.KCMP.LOCAL.CAT.VAL.SUBJ < >,
            PHON.ONSET con ] ].

; Prevent spurious ambiguity for |she saw he cheated| with robust `he'
see_v7 := v_np-prd_oeq_le &
 [ ORTH < "see" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_see_v_1_rel",
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.MINORS.NORM norm_rel,
            PHON.ONSET con ] ].

see_mal_v1 := v_vp_seq_le_rbst &
 [ ORTH < "see" >,
   SYNSEM [ LOCAL.CAT.HEAD.--MAL3SG -,
	    LKEYS.KEYREL.PRED "_see_v_1_rel",
            PHON.ONSET con ] ].

see_mal_v2 := v_np-vp_oeq_le_rbst &
 [ ORTH < "see" >,
   SYNSEM [ LOCAL.CAT.HEAD.--MAL3SG -,
	    LKEYS.KEYREL.PRED "_see_v_1_rel",
            PHON.ONSET con ] ].

seek_for_mal_v1 := v_pp_np_le_rbst &
 [ ORTH < "seek" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_seek_v_1_rel" ],
            PHON.ONSET con ] ].

; Need intransitive for Grade 4
;sell_v3 := v_np_le &
; [ ORTH < "sell" >,
;   SYNSEM [ LKEYS.KEYREL.PRED "_sell_v_1_rel",
;            PHON.ONSET con ] ].

send_v2 := v_np-np_le &
 [ ORTH < "send" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_send_v_1_rel",
            PHON.ONSET con ] ].

set_n1 := n_-_c_le &
 [ ORTH < "set" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_set_n_of_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

seven_a1 := aj_-_i-prd_le &
 [ ORTH < "seven" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_seven_a_1_rel",
            PHON.ONSET con ] ].

several_mal_adj := aj_-_i-one_le_rbst &
 [ ORTH < "several" >,
   SYNSEM.PHON.ONSET con ].

shade_n1 := n_-_m_le &
 [ ORTH < "shade" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shade_n_1_rel",
            PHON.ONSET con ] ].

shape_n1 := n_-_c-ed_le &
 [ ORTH < "shape" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shape_n_1_rel",
            PHON.ONSET con ] ].

she_stutter_1_mal := n_-_pr-she_le_rbst &
 [ ORTH < "she", "-", "she" >,
   SYNSEM.PHON.ONSET con ].

she_stutter_2_mal := n_-_pr-she_le_rbst &
 [ ORTH < "she", "she" >,
   SYNSEM.PHON.ONSET con ].

she_stutter_2_mal2 := n_-_pr-she_le_rbst &
 [ ORTH < "sh", "she" >,
   SYNSEM.PHON.ONSET con ].

she_stutter_2_mal3 := n_-_pr-she_le_rbst &
 [ ORTH < "she", "she", "she" >,
   SYNSEM.PHON.ONSET con ].

she_stutter_3_mal := n_-_pr-she_le_rbst &
 [ ORTH < "she-", "she" >,
   SYNSEM.PHON.ONSET con ].

she_elephant_n1 := n_-_c-nm_le &
 [ ORTH < "She", "Elephant" >,
   SYNSEM [ LKEYS.KEYREL.CARG "She+Elephant",
            PHON.ONSET con ] ].

she_herself := n_-_pr-she_le &
 [ ORTH < "she", "herself" >,
   SYNSEM.PHON.ONSET con ].

sheep_n1 := n_-_c_le &
 [ ORTH < "sheep" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sheep_n_1_rel",
   	    LOCAL.CAT cat_infl_nosuff &  [ HEAD.--BARE - ],
            PHON.ONSET con ] ].

shepherd_n1 := n_-_c-msc_le &
 [ ORTH < "shepherd" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shepherd_n_1_rel",
            PHON.ONSET con ] ].

shortage_n1 := n_pp_c-of_le &
 [ ORTH < "shortage" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shortage_n_of_rel",
            PHON.ONSET con ] ].

shorter_a1_mal := aj_-_i-cmp_le_rbst &
 [ ORTH < "shorter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_short_a_of_rel",
            PHON.ONSET con ] ].

similarly := av_-_i-vp-po_le &
 [ ORTH < "similarly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_similar_a_to_rel",
            PHON.ONSET con ] ].

similarly_rbst := av_-_i-vp-pr_le &
 [ ORTH < "similarly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_similar_a_to_rel",
            PHON.ONSET con ],
   GENRE robust ].

;; Prevent analysis as subord-clause fragment
since_subord := p_cp_s_le &
 [ ORTH < "since" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_since_x_subord_rel",
            LOCAL.CAT.HEAD.MINORS.NORM no_rel,
            PHON.ONSET con ] ].

sister_n1 := n_pp_c-of-fem_le &
 [ ORTH < "sister" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sister_n_of_rel",
            PHON.ONSET con ] ].

sister_ttl_n1 := n_-_c-pre-ttl_le &
 [ ORTH < "Sister" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sister_n_of_rel",
            LOCAL.CAT.HEAD.MINORS.MIN pre_title_rel,
            PHON.ONSET con ] ].

skunk_n1 := n_-_c_le &
 [ ORTH < "skunk" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_skunk_n_1_rel",
            PHON.ONSET con ] ].

;; Also constrain to NORM norm_rel to avoid spurious robust analysis for
;; |They want to go sleep|
sleep_n1 := n_-_m_le &
 [ ORTH < "sleep" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sleep_n_1_rel",
            LOCAL.CAT.HEAD.MINORS.NORM norm_rel,
            PHON.ONSET con ] ].

slow_v1 := v_np_le &
 [ ORTH < "slow" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_slow_v_1_rel",
            PHON.ONSET con ] ].

smile_v1 := v_-_le &
 [ ORTH < "smile" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_smile_v_1_rel",
            PHON.ONSET con ] ].

smiths_n1 := n_-_pn-pl-def_le &
 [ ORTH < "Smiths" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Smith",
            PHON.ONSET con ] ].

smithsonian_institution_n1 := n_-_c-nm_le &
 [ ORTH < "Smithsonian", "Institution" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Smithsonian+Institution",
            PHON.ONSET con ] ].

smore_n1 := n_-_c_le &
 [ ORTH < "s’more" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_smore_n_1_rel",
            PHON.ONSET con ] ].

smore_n2 := n_-_c_le &
 [ ORTH < "s'", "more" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_smore_n_1_rel",
            PHON.ONSET con ] ].

smore_n3 := n_-_c_le &
 [ ORTH < "s'more" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_smore_n_1_rel",
            PHON.ONSET con ] ].

smore_n4 := n_-_c_le &
 [ ORTH < "s", "'more" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_smore_n_1_rel",
            PHON.ONSET con ] ].

smore_n5 := n_-_c_le &
 [ ORTH < "s’", "more" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_smore_n_1_rel",
            PHON.ONSET con ] ].

;; |We brought books and snacks|
;;
snack_v1 := v_-_le &
 [ ORTH < "snack" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_snack_v_1_rel",
            LOCAL.CAT.HEAD.--MALN3SG -,
            PHON.ONSET con ] ].

soccer_n1 := n_-_m_le &
 [ ORTH < "soccer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_soccer_n_1_rel",
            LOCAL.CAT.VAL.SPR < unexpressed >,
            PHON.ONSET con ] ].

softball_n1 := n_-_m-gr_le &
 [ ORTH < "softball" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_softball_n_1_rel",
            PHON.ONSET con ] ].

solve_for_mal_v1 := v_pp_np_le_rbst &
 [ ORTH < "solve" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_solve_v_1_rel" ],
            PHON.ONSET con ] ].

sometimes_adv3 := av_-_i-vp-x_le &
 [ ORTH < "sometimes" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sometimes_a_1_rel",
            PHON.ONSET con ] ].

spacecraft_n1 := n_-_c_le &
 [ ORTH < "spacecraft" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_spacecraft_n_1_rel",
   	    LOCAL.CAT cat_infl_nosuff &  [ HEAD.--BARE - ],
            PHON.ONSET con ] ].

spaghetti_joint_n1 := n_-_c_le &
 [ ORTH < "Spaghetti", "Joint" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_Spaghetti+Joint_n_1_rel",
            PHON.ONSET con ] ].

speech_n1 := n_-_c_le &
 [ ORTH < "speech" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_speech_n_1_rel",
            --MIN alt_idiom_nom_rel,
            PHON.ONSET con ] ].

speech_idm_n1 := n_-_c-idm_le &
 [ ORTH < "speech" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_speech_n_1_rel",
            PHON.ONSET con ] ].

spoke_n1 := n_-_c-ed_le &
 [ ORTH < "spoke" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_spoke_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

sport_n1 := n_-_c-ns_le &
 [ ORTH < "sport" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sport_n_1_rel",
            PHON.ONSET con ] ].

sports_n1 := n_-_m_le &
 [ ORTH < "sports" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sports_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

sprang_up_mal_v1 := v_p_le_infl_rbst &
 [ ORTH < "sprung" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_spring_v_up_rel" ],
            PHON.ONSET con ] ].

spring_break_n1 := n_-_mc_le &
 [ ORTH < "spring", "break" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_spring+break_n_1_rel",
            PHON.ONSET con ] ].

spy_v1 := v_np_le &
 [ ORTH < "spy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_spy_v_1_rel",
            PHON.ONSET con ] ].

square_n1 := n_pp_c-of_le &
 [ ORTH < "square" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_square_n_of_rel",
            LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

squid_n1 := n_-_c_le &
 [ ORTH < "squid" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_squid_n_1_rel",
   	    LOCAL.CAT cat_infl_nosuff &  [ HEAD.--BARE - ],
            PHON.ONSET con ] ].

stadium_n1 := n_-_c_le &
 [ ORTH < "stadium" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stadium_n_1_rel",
            LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

staff_n1 := n_-_c_le &
 [ ORTH < "staff" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_staff_n_of_rel",
   	    LOCAL.CAT cat_infl_nosuff & [ HEAD.--BARE - ],
            PHON.ONSET con ] ].

stake_n1 := n_-_c-ed_le &
 [ ORTH < "stake" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stake_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,   
            PHON.ONSET con ] ].

stand_n1 := n_-_c_le &
 [ ORTH < "stand" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stand_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,   
            PHON.ONSET con ] ].

stay_n1 := n_-_c_le &
 [ ORTH < "stay" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stay_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

steak_n1 := n_-_mc_le &
 [ ORTH < "steak" >,
   SYNSEM [ MODIFD.LPERIPH na,
	    LKEYS.KEYREL.PRED "_steak_n_1_rel",
            PHON.ONSET con ] ].

stick_n1 := n_-_c_le &
 [ ORTH < "stick" >,
   SYNSEM [ MODIFD.LPERIPH +,
            LKEYS.KEYREL.PRED "_stick_n_1_rel",
            PHON.ONSET con ] ].

still_n1 := n_-_c_le &
 [ ORTH < "still" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_still_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

stop_n1 := n_-_c_le &
 [ ORTH < "stop" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stop_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

story_n1 := n_pp_c-of_le &
 [ ORTH < "story" >,
   SYNSEM [ LKEYS.KEYREL [ PRED "_story_n_of_rel",
                           ARG0.SORT nonhuman ],
            PHON.ONSET con ] ].

strategy_n2 := n_-_m-nocnh_le &
 [ ORTH < "strategy" >,
   ALTS.PLMASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_strategy_n_of_rel",
            PHON.ONSET con ] ].

street_n1 := n_-_c_le &
 [ ORTH < "street" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_street_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

stress_for_mal_v1 := v_pp_np_le_rbst &
 [ ORTH < "stress" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_stress_v_1_rel" ],
            PHON.ONSET con ] ].

;; This goes wrong in ranking for |he gave his math students homework|
;; so disable until we get better parse ranking - FIX
#|
students_a1_mal := aj_-_i-cmpd_le_rbst &
 [ ORTH < "students" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_students_a_1_rel",
            PHON.ONSET con ] ].
|#

;; For vocative use, as in "Students, close your books."
;;
students_n1 := n_-_pn-pl_le &
 [ ORTH < "Students" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Students",
            PHON.ONSET con ] ].

such_a_det_rbst := d_-_sg-nmd_le &
 [ ORTH < "such" >,
   SYNSEM [ LKEYS.KEYREL.PRED _such+a_q_rel,
            PHON.ONSET con ],
   GENRE robust ].

such_an_det_rbst := d_-_sg-nmd-an_le &
 [ ORTH < "such" >,
   SYNSEM [ LKEYS.KEYREL.PRED _such+a_q_rel,
            PHON.ONSET con ],
   GENRE robust ].

sum_n1 := n_pp_c-of_le &
 [ ORTH < "sum" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sum_n_of_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

summary_n1 := n_pp_c-of_le &
 [ ORTH < "summary" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_summary_n_of_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

summer_break_n1 := n_-_mc_le &
 [ ORTH < "summer", "break" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_summer+break_n_1_rel",
            PHON.ONSET con ] ].

sunday_night_nc_n1 := n_-_c-dpt_le &
 [ ORTH < "Sunday", "night" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_Sunday+night_n_1_rel",
            PHON.ONSET con ] ].

sunday_night_pl_def := n_-_c-dpt-df-pl_le &
 [ ORTH < "Sunday", "nights" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_Sunday+night_n_1_rel",
            PHON.ONSET con ] ].

sunday_night_sg_def := n_-_c-dpt-df-sg_le &
 [ ORTH < "Sunday", "night" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_Sunday+night_n_1_rel",
            PHON.ONSET con ] ].

sun_n1 := n_-_c_le &
 [ ORTH < "sun" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sun_n_1_rel",
            PHON.ONSET con ] ].

sunrise_n2 := n_-_c_le &
 [ ORTH < "sunrise" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sunrise_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

sunset_n2 := n_-_c_le &
 [ ORTH < "sunset" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sunset_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

superior_n1 := n_-_c_le &
 [ ORTH < "superior" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_superior_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

swim_n1 := n_-_c_le &
 [ ORTH < "swim" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_swim_n_1_rel",
   	    LOCAL.CAT cat_infl_nosuff  & [ HEAD.--BARE - ],
            PHON.ONSET con ] ].

t_lower_np1 := n_-_pn-nounif_le &
 [ ORTH < "t" >,
   SYNSEM [ LKEYS.KEYREL.CARG "T",
            PHON.ONSET con ] ].

talk_idm_n1 := n_-_c-idm_le &
 [ ORTH < "talk" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_talk_n_1_rel",
            PHON.ONSET con ] ].

talk_n1 := n_-_mc-ns_le &
 [ ORTH < "talk" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_talk_n_of-on_rel",
            --MIN alt_idiom_nom_rel,
            PHON.ONSET con ] ].

taller_a1_mal := aj_-_i-cmp_le_rbst &
 [ ORTH < "taller" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tall_a_1_rel",
            PHON.ONSET con ] ].

taro_root_n1 := n_-_m_le &
 [ ORTH < "taro", "root" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_taro+root_n_1_rel",
            PHON.ONSET con ] ].

taste_v1 := v_np_le &
 [ ORTH < "taste" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_taste_v_1_rel",
            LOCAL.CAT.VAL.COMPS < expressed_synsem >,
            PHON.ONSET con ] ].

;; DPF 2012-02-06 Leave with optional complement, since we want
;; |he taught yesterday|
#|
teach_v1 := v_np_le &
 [ ORTH < "teach" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_teach_v_1_rel",
            PHON.ONSET con ] ].
|#

teacher_n1 := n_pp_c-of-anim_le &
 [ ORTH < "teacher" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_teacher_n_of_rel",
            PHON.ONSET con ] ].

teachers_a1_mal := aj_-_i-cmpd_le_rbst &
 [ ORTH < "teachers" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_teachers_a_1_rel",
            PHON.ONSET con ] ].

; Avoid robust CP complement, for "she told her brother borrow her book"
tell_v2 := v_np-cp_fin-inf_le &
 [ ORTH < "tell" >,
   SYNSEM [ LOCAL.CAT.VAL.KCMP.LOCAL.CAT.HEAD.--MAL3SG -,
            LKEYS.KEYREL.PRED "_tell_v_1_rel",
            PHON.ONSET con ] ].

tell_v4 := v_np_le &
 [ ORTH < "tell" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tell_v_1_rel",
            PHON.ONSET con ] ].

tell_mal_v2 := v_vp_seq_le_rbst &
 [ ORTH < "tell" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tell_v_1_rel",
            PHON.ONSET con ] ].

tell_mal_v3 := v_np-vp_bse_le_rbst &
 [ ORTH < "tell" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tell_v_1_rel",
            PHON.ONSET con ] ].

tell_mal_v4 := v_-_le_rbst &
 [ ORTH < "tell" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tell_v_1_rel",
            PHON.ONSET con ] ].

tell_mal_v5 := v_cp_le_rbst &
 [ ORTH < "tell" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tell_v_1_rel",
            PHON.ONSET con ] ].

ten_a1 := aj_-_i-prd_le &
 [ ORTH < "ten" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ten_a_1_rel",
            PHON.ONSET con ] ].

test_v1 := v_np_le &
 [ ORTH < "test" >,
   SYNSEM [ LOCAL.CAT.HEAD.--MAL3SG -,
	    LKEYS.KEYREL.PRED "_test_v_1_rel",
            PHON.ONSET con ] ].

test_on_mal_v1 := v_pp_np_le_rbst &
 [ ORTH < "test" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_test_v_1_rel" ],
            PHON.ONSET con ] ].

testing_n1 := n_-_m_le &
 [ ORTH < "testing" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_testing_n_1_rel",
            PHON.ONSET con ] ].

; Add hack for complex comparatives like "Kim is easier to admire than browne"
; But constrain to MOD..HEAD adj, to avoid |Kim arrives than Browne|
;
than_p6 := p_np_i-nnm_le &
 [ ORTH < "than" >,
   SYNSEM [ LOCAL.CAT [ HEAD.MOD < [ LOCAL.CAT.HEAD adj ] >,
   	    	        VAL.COMPS.FIRST.LOCAL.CAT.HEAD.MINORS.NORM norm_rel ],
	    LKEYS.KEYREL.PRED _than_p_ind_rel,
            PHON.ONSET con ] ].

theater_n1 := n_-_c_le &
 [ ORTH < "theater" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_theater_n_1_rel",
            PHON.ONSET con ] ].

;; Avoid misanalysis of |got there taking the bus|
;;
their_rbst := d_-_poss-their_le &
 [ ORTH < "there" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CONT.HOOK.INDEX.SORT entity ],
   GENRE robust ].

;; Prevent analysis as subord-clause fragment
therefore_subord := p_cp_s-post_le &
 [ ORTH < "therefore" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_therefore_x_rel",
            LOCAL.CAT.HEAD.MINORS.NORM no_rel,
            PHON.ONSET con ] ].

they_stutter_1_mal := n_-_pr-they_le_rbst &
 [ ORTH < "they", "-", "they" >,
   SYNSEM.PHON.ONSET con ].

they_stutter_2_mal := n_-_pr-they_le_rbst &
 [ ORTH < "they", "they" >,
   SYNSEM.PHON.ONSET con ].

they_stutter_2_mal3 := n_-_pr-they_le_rbst &
 [ ORTH < "they", "they", "they" >,
   SYNSEM.PHON.ONSET con ].

they_stutter_3_mal := n_-_pr-they_le_rbst &
 [ ORTH < "they-", "they" >,
   SYNSEM.PHON.ONSET con ].

think_v3 := v_-_le &
 [ ORTH < "think" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_think_v_1_rel",
            PHON.ONSET con ] ].

thing_n1 := n_pp_c-nsnc-of_le &
 [ ORTH < "thing" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_thing_n_of-about_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

;; Ignore for now the normal requirement of a comma-marked target
though_root_post := av_-_dc-like-po_le &
 [ ORTH < "though" >,
   SYNSEM [ LKEYS.KEYREL.CARG "though",
            PHON.ONSET con ] ].

thorsens_n1 := n_-_pn-pl-def_le &
 [ ORTH < "Thorsens" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Thorsen",
            PHON.ONSET con ] ].

thought_n1 := n_pp_mc-of_le &
 [ ORTH < "thought" >,
   SYNSEM [ MODIFD.LPERIPH +,
            LOCAL.CAT.HEAD.MINORS.NORM norm_rel,
   	    LKEYS.KEYREL.PRED "_thought_n_of_rel",
            PHON.ONSET con ] ].

throw_v1 := v_np_le &
 [ ORTH < "throw" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_throw_v_1_rel",
            PHON.ONSET con ] ].

tiger_n2 := n_-_c-msc_le &
 [ ORTH < "tiger" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tiger_n_1_rel",
            PHON.ONSET con ] ].

tigers := n_-_c-nm-pl_le &
 [ ORTH < "Tiger" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Tigers",
            PHON.ONSET con ] ].

tigers_n2 := n_-_c-nm_le &
 [ ORTH < "Tigers" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Tigers",
            LOCAL.AGR.PNG.PN 3s,
            PHON.ONSET con ] ].

time_n3 := n_-_m-time_le &
 [ ORTH < "time" >,
   ALTS.PLMASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_time_n_of_rel",
            PHON.ONSET con ] ].

; Restrict to only obliq complement, to block "to home"
; Also exclude bare-sg NP complement to avoid competition with infinitival to
; (e.g. |to ride|)
;; DPF 2014-04-29 - But excluding bare-sg is too strong, since we can't get eg
;; |we went to circus|.  So remove COMPS..--BARE - and instead mark noun/verb
;; pairs like "ride" as --BARE -.
;;
to := p_np_i-nnm_le &
 [ ORTH < "to" >,
   SYNSEM [ LOCAL.CAT.VAL.COMPS < [ LOCAL.CAT.HEAD.CASE obliq ] >,
            LKEYS.KEYREL.PRED _to_p_rel,
            PHON.ONSET con ] ].

to_bed_adv := pp_-_i_le &
 [ ORTH < "to", "bed" >,
   SYNSEM [ LKEYS.KEYREL.PRED _to+bed_p_rel,
            PHON.ONSET con ] ].

;; Add properties to event, so generator is happy with paraphrase output.
to_c_prop_elided := cm_-_to_le &
 [ ORTH < "to" >,
   SYNSEM [ LOCAL.CONT.HOOK.INDEX.E [ TENSE untensed, 
                                      ASPECT [ PROGR -, PRF - ] ],
            PHON.ONSET con ] ].

to_nmod := p_np_i-nm-no-tm_le &
 [ ORTH < "to" >,
   SYNSEM [ LOCAL.CAT.VAL.COMPS < [ LOCAL.CAT.HEAD [ CASE obliq,
						     --BARE - ] ] >,
            LKEYS.KEYREL.PRED _to_p_rel,
            PHON.ONSET con ] ].

;; This causes trouble for e.g.
;; |when to school I was at school I was sweaty|
;; Let's try doing without.
#|
to_s_init := p_np_s_le &
 [ ORTH < "to" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_to_x_subord_rel",
            LOCAL.CAT.VAL.COMPS < [ LOCAL.CAT.HEAD.--BARE - ] >,
            PHON.ONSET con ] ].
|#

too_deg_rbst := av_vp_dg-too_le &
 [ ORTH < "to" >,
   SYNSEM.PHON.ONSET con,
   GENRE robust ].

too_deg_nc_rbst := av_-_dg-cmp-so_le &
 [ ORTH < "to" >,
   SYNSEM [ LKEYS.KEYREL.PRED comp_too_rel,
            PHON.ONSET con ],
   GENRE robust ].

today_adv2 := av_-_i-vp-x-only_le &
 [ ORTH < "today" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_today_a_1_rel",
            PHON.ONSET con ] ].

today_mal_adv1 := av_-_i-vp-pr_le_rbst &
 [ ORTH < "today" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_today_a_1_rel",
            PHON.ONSET con ] ].

today_adj1_rbst := aj_-_i-att_le &
 [ ORTH < "today" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_today_a_1_rel",
	    LOCAL.CAT.HEAD.MOD < [ --MIN non_proper_rel ] >,
            PHON.ONSET con ],
   GENRE robust ].

tomato_n1 := n_-_c_le &
 [ ORTH < "tomato" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tomato_n_1_rel",
            PHON.ONSET con ] ].

too_adv2 := av_-_i-vp-po_le &
 [ ORTH < "too" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_too_a_also_rel",
            PHON.ONSET con ] ].

total_n1 := n_-_c_le &
 [ ORTH < "total" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_total_n_of_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

town_n1 := n_-_c_le &
 [ ORTH < "town" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_town_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

toy_n1 := n_-_c_le &
 [ ORTH < "toy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_toy_n_1_rel",
	    LOCAL.CAT cat_infl_nosuff,
            PHON.ONSET con ] ].

;trash_a1 := aj_-_i-prd_le &
; [ ORTH < "trash" >,
;   SYNSEM [ LKEYS.KEYREL.PRED "_trash_a_1_rel",
;            PHON.ONSET con ] ].

traveler_n1 := n_-_c_le &
 [ ORTH < "traveler" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_traveler_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

tree_n1 := n_pp_c-of_le &
 [ ORTH < "tree" >,
   SYNSEM [ LKEYS.KEYREL [ PRED "_tree_n_of_rel",
                           ARG0.SORT nonhuman ],
            PHON.ONSET con ] ].

trip_v1 := v_np_le &
 [ ORTH < "trip" >,
   SYNSEM [ LOCAL.CAT.HEAD.--MAL3SG -,
	    LKEYS.KEYREL.PRED "_trip_v_1_rel",
            PHON.ONSET con ] ].

;; Avoid "a trouble"
trouble_n1 := n_-_m-ns_le &
 [ ORTH < "trouble" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_trouble_n_1_rel",
            PHON.ONSET con ] ].

troubles_n1 := n_-_c-pl-ifl_le &
 [ ORTH < "troubles" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_trouble_n_1_rel",
            PHON.ONSET con ] ].

;; Add norm_rel to prevent these from nonhead in the robust n-n_plural rule
;; as in |the trout fish|
trout_n1 := n_-_c_le &
 [ ORTH < "trout" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_trout_n_1_rel",
   	    LOCAL.CAT cat_infl_nosuff &  [ HEAD.--BARE - ],
            PHON.ONSET con ] ].


;; Change type so we can admit |Kim is truly the cat|
truly := av_-_i-vp-x_le &
 [ ORTH < "truly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_true_a_of_rel",
            PHON.ONSET con ] ].

tsengs_n1 := n_-_pn-pl-def_le &
 [ ORTH < "Tsengs" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Tseng",
            PHON.ONSET con ] ].

tsujimuras_n1 := n_-_pn-pl-def_le &
 [ ORTH < "Tsujimuras" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Tsujimura",
            PHON.ONSET con ] ].

tuna_fish_n1 := n_-_mc_le &
 [ ORTH < "tuna", "fish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tuna+fish_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

turn_n1 := n_pp_c-of_le &
 [ ORTH < "turn" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_turn_n_of_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

turn_v1 := v_pp_dir_le &
 [ ORTH < "turn" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_turn_v_1_rel",
            PHON.ONSET con ] ].

twenty_six_mile_a1 := aj_-_i-att_le &
 [ ORTH < "twenty-", "six", "mile" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_twenty+six+mile_n_1_rel",
            PHON.ONSET con ] ].

twice_a_det := d_-_sg-every_le &
 [ ORTH < "twice", "a" >,
   SYNSEM [ LKEYS.KEYREL.PRED _twice+a_q_rel,
            PHON.ONSET con ] ].

twin_a1 := aj_-_i-att_le &
 [ ORTH < "twin" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_twin_a_1_rel",
            PHON.ONSET con ] ].

two_year_old_a1 := aj_-_i-att_le &
 [ ORTH < "two-", "year-", "old" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_two+year+old_a_1_rel",
            PHON.ONSET con ] ].

uncle_n := n_-_c-pre-ttl_le &
 [ ORTH < "uncle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_uncle_n_of_rel",
            LOCAL.CAT.HEAD.MINORS.MIN pre_title_rel,
            PHON.ONSET voc ] ].

upset_v1 := v_np_le &
 [ ORTH < "upset" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_upset_v_1_rel",
            LOCAL.CAT.HEAD.--MAL3SG -,
            PHON.ONSET voc ] ].

users_a1_mal := aj_-_i-cmpd_le_rbst &
 [ ORTH < "users" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_users_a_1_rel",
            PHON.ONSET con ] ].

usually_adv1_rbst := av_-_i-vp-po_le &
 [ ORTH < "usually" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_usual_a_1_rel",
            PHON.ONSET con ] ].

valentine_n1 := n_-_c_le &
 [ ORTH < "valentine" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_valentine_n_1_rel",
            LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

valentines_day := n_-_m-hldy_le &
 [ ORTH < "Valentine", "'s", "Day" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Valentines_Day",
            PHON.ONSET con ] ].

valentines_day_card_n1 := n_-_c_le &
 [ ORTH < "Valentine", "'s", "Day", "card" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_Valentines+Day+card_n_1_rel",
            PHON.ONSET con ] ].

vanished_a1_post := v_-_psv-post_le_rbst &
 [ ORTH < "vanished" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vanish_v_1_rel",
            PHON.ONSET con ] ].

;; Misspelling of ""various"
various_adj_rbst := aj_-_i_le &
 [ ORTH < "varies" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_various_a_1_rel",
            PHON.ONSET con ],
   GENRE robust ].

; Allow "the vet's" NP even though generally block bare possessives
vets_poss_n1 := n_-_c_le &
 [ ORTH < "vet", "'s" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vet_n_abb_rel",
            PHON.ONSET con ] ].

vietnam_memorial_n1 := n_-_c-nm_le &
 [ ORTH < "Vietnam", "Memorial" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Vietnam+Memorial",
            PHON.ONSET con ] ].

Villaloboses_n1 := n_-_pn-pl-def_le &
 [ ORTH < "Villaloboses" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Villalobos",
            PHON.ONSET con ] ].

violet_n1 := n_-_c_le &
 [ ORTH < "violet" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_violet_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

visit_n1 := n_pp_c_le &
 [ ORTH < "visit" >,
   SYNSEM [ LOCAL.CAT.HEAD.MINORS.NORM norm_rel,
   	    LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_visit_n_to_rel" ],
            PHON.ONSET con ] ].

volume_n1 := n_pp_c-of_le &
 [ ORTH < "volume" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_volume_n_of_rel",
            PHON.ONSET con ] ].

wait_n1 := n_-_c_le &
 [ ORTH < "wait" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wait_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

;; Hack until we enrich our grammar-code language for edit-composition to
;; express dependency constraints.  Just for exercise 7.F.6650.02
;; Same for the entry for "patiently", which has to be treated here as a
;; degree-specifier in "waited patiently in their seats", since we block vmod.
;; FIX.
;;
wait_in_v1 := v_pp_le &
 [ ORTH < "wait" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_rel,
                    KEYREL.PRED "_wait_v_1_rel" ],
            PHON.ONSET con ] ].

patiently_deg := av_-_dg-jomv_le &
 [ ORTH < "patiently" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_patiently_x_deg_rel",
            PHON.ONSET con ] ].

wait_v1 := v_-_le &
 [ ORTH < "wait" >,
   SYNSEM [ LKEYS [ --COMPKEY temp_abstr_rel,
                    KEYREL.PRED "_wait_v_1_rel" ],
            PHON.ONSET con ] ].

walk_n1 := n_-_c_le &
 [ ORTH < "walk" >,
   SYNSEM [ LOCAL.CAT.HEAD.--BARE -,
   	    LKEYS.KEYREL.PRED "_walk_n_1_rel",
            PHON.ONSET con ] ].

wallaces_n1 := n_-_pn-pl-def_le &
 [ ORTH < "Wallaces" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Wallace",
            PHON.ONSET con ] ].

want_prd := v_np-prd_oeq-ntr-x_le &
 [ ORTH < "want" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_want_v_1_rel",
            PHON.ONSET con ] ].

;; Maybe generalize this COMPS constraint to all entries of this type? (to block
;; idiomatic bare-sg NPs in PET where idiom constraint is still ignored)
;; 13-03-18: But this also blocks |want it|.  Let's try the normal entry.
#|
want_v1 := v_np_ntr_le &
 [ ORTH < "want" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_want_v_1_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.--MIN reg_nom_rel,
            PHON.ONSET con ] ].
|#

wanted_a1 := aj_-_i-att_le &
 [ ORTH < "wanted" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wanted_a_1_rel",
            PHON.ONSET con ] ].

wash_v1 := v_np_le &
 [ ORTH < "wash" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wash_v_1_rel",
            PHON.ONSET con ] ].

washing_n1 := n_-_mc-nocnh_le &
 [ ORTH < "washing" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_washing_n_1_rel",
            PHON.ONSET con ] ].

watch_n1 := n_-_c_le &
 [ ORTH < "watch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_watch_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,   
            PHON.ONSET con ] ].

water_n2 := n_-_m_le &
 [ ORTH < "water" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_water_n_1_rel",
            PHON.ONSET con ] ].

;; While we block pronouns as left members of appositives, add these hacks:
we_ourselves := n_-_pr-we_le &
 [ ORTH < "we", "ourselves" >,
   SYNSEM.PHON.ONSET con ].

i_myself := n_-_pr-i_le &
 [ ORTH < "I", "myself" >,
   SYNSEM.PHON.ONSET voc ].

he_himself := n_-_pr-he_le &
 [ ORTH < "he", "himself" >,
   SYNSEM.PHON.ONSET con ].

she_herself := n_-_pr-she_le &
 [ ORTH < "she", "herself" >,
   SYNSEM.PHON.ONSET con ].

they_themselves := n_-_pr-they_le &
 [ ORTH < "they", "themselves" >,
   SYNSEM.PHON.ONSET con ].

you_yourself := n_-_pr-you_le &
 [ ORTH < "you", "yourself" >,
   SYNSEM [ LOCAL.AGR.PNG.PN 2s,
            PHON.ONSET con ] ].

you_yourselves := n_-_pr-you_le &
 [ ORTH < "you", "yourselves" >,
   SYNSEM [ LOCAL.AGR.PNG.PN 2p,
            PHON.ONSET con ] ].


we_stutter_1_mal := n_-_pr-we_le_rbst &
 [ ORTH < "we", "-", "we" >,
   SYNSEM.PHON.ONSET con ].

we_stutter_2_mal := n_-_pr-we_le_rbst &
 [ ORTH < "we", "we" >,
   SYNSEM.PHON.ONSET con ].

we_stutter_2_mal3 := n_-_pr-we_le_rbst &
 [ ORTH < "we", "we", "we" >,
   SYNSEM.PHON.ONSET con ].

we_stutter_3_mal := n_-_pr-we_le_rbst &
 [ ORTH < "we-", "we" >,
   SYNSEM.PHON.ONSET con ].

we_stutter_4_mal := n_-_pr-we_le_rbst &
 [ ORTH < "we", "–", "we" >,
   SYNSEM.PHON.ONSET con ].

weasel_n1 := n_-_c_le &
 [ ORTH < "weasel" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_weasel_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,   
            PHON.ONSET con ] ].

week1 := n_-_c-nday_le &
 [ ORTH < "week" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_week_n_1_rel",
            PHON.ONSET con ] ].

well_n1 := n_-_c-ntc_le &
 [ ORTH < "well" >,
   SYNSEM [ LOCAL.CAT.HEAD.--BARE -,
   	    LKEYS.KEYREL.PRED "_well_n_1_rel",
            PHON.ONSET con ] ].

well_vp_adv := av_-_i-vp-x-only_le &
 [ ORTH < "well" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_well_a_1_rel",
            PHON.ONSET con ] ].

well := av_-_i-vp-po-nmb_le &
 [ ORTH < "well" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_well_a_1_rel",
            PHON.ONSET con ] ].

westing_game_n1 := n_-_c-nm_le &
 [ ORTH < "Westing", "Game" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Westing+Game",
            PHON.ONSET con ] ].

whale_watch_v1 := v_-_le &
 [ ORTH < "whale", "watch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_whale+watch_v_1_rel",
            PHON.ONSET con ] ].

while_n1 := n_-_c-sg-ifl-nmd_le &
 [ ORTH < "while" >,
   SYNSEM [ LOCAL.CAT.HEAD.--BARE -,
            LKEYS.KEYREL.PRED "_while_n_1_rel",
            PHON.ONSET con ] ].

white_n1 := n_-_c_le &
 [ ORTH < "white" >,
   SYNSEM [ LOCAL.CAT.HEAD [ MINORS.NORM norm_rel,
                             --BARE - ],
   	    LKEYS.KEYREL.PRED "_white_n_1_rel",
            PHON.ONSET con ] ].

willow_n1 := n_-_c_le &
 [ ORTH < "willow" >,
   SYNSEM [ LOCAL.CAT.HEAD.--BARE -,
   	    LKEYS.KEYREL.PRED "_willow_n_1_rel",
            PHON.ONSET con ] ].

williamsons_n1 := n_-_pn-pl-def_le &
 [ ORTH < "Williamsons" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Williamson",
            PHON.ONSET con ] ].

win_n1 := n_-_c_le &
 [ ORTH < "win" >,
   SYNSEM [ LOCAL.CAT.HEAD.--BARE -,
   	    LKEYS.KEYREL.PRED "_win_n_1_rel",
            PHON.ONSET con ] ].

win_v1 := v_np*_ntr_le &
 [ ORTH < "win" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_win_v_1_rel",
            PHON.ONSET con ] ].

winter_break_n1 := n_-_m_le &
 [ ORTH < "winter", "break" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_winter+break_n_1_rel",
            PHON.ONSET con ] ].

wishes_n1 := n_-_c-pl-ifl_le &
 [ ORTH < "wishes" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wish_n_1_rel",
            PHON.ONSET con ] ].

woman1 := n_-_c-fem_le &
 [ ORTH < "woman" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_woman_n_1_rel",
            PHON.ONSET con ] ].

womens_a1_mal := aj_-_i-cmpd_le_rbst &
 [ ORTH < "womens" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_womens_a_1_rel",
            PHON.ONSET con ] ].

womens_rights_movement_n1 := n_-_c_le &
 [ ORTH < "women", "'s", "rights", "movement" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_womens+rights+movement_n_1_rel",
            PHON.ONSET con ] ].

; Block "after the work"
;; DPF 13-03-12 - But this also blocks |most work|, so undo.
#|
work_n1 := n_-_m_le &
 [ ORTH < "work" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_work_n_1_rel",
            LOCAL.CAT.VAL.SPR < [ LOCAL.CAT.HEAD.MINORS.ALTMIN no_rel ] >,
            PHON.ONSET con ] ].
|#

work_n1 := n_-_m_le &
 [ ORTH < "work" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_work_n_1_rel",
            PHON.ONSET con ] ].

work_n2 := n_vp_c_le &
 [ ORTH < "work" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_work_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,   
            PHON.ONSET con ] ].

;; Block "her work" as NP-VP
work_v1 := v_np*_le &
 [ ORTH < "work" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_work_v_1_rel",
            LOCAL.CAT.HEAD.--MAL3SG -,
            PHON.ONSET con ] ].

workers_a1_mal := aj_-_i-cmpd_le_rbst &
 [ ORTH < "workers" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_workers_a_1_rel",
            PHON.ONSET con ] ].

world_n1 := n_pp_c-of_le &
 [ ORTH < "world" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_world_n_of_rel",
            PHON.ONSET con ],
   TOKENS.+LAST.+CLASS.+CASE non_capitalized ].

writers_a1_mal := aj_-_i-cmpd_le_rbst &
 [ ORTH < "writers" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_writers_a_1_rel",
            PHON.ONSET con ] ].

x_letter_n1 := n_-_c_le &
 [ ORTH < "X" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_x_n_letter_rel",
            PHON.ONSET voc ] ].

yellows_n1 := n_-_c-pl-ifl_le &
 [ ORTH < "yellows" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_yellow_n_1_rel",
            PHON.ONSET con ] ].

yesterday_mal_adv1 := av_-_i-vp-pr_le_rbst &
 [ ORTH < "yesterday" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_yesterday_a_1_rel",
            PHON.ONSET con ] ].

yet_adv2 := av_-_s-cp-pr_le &
 [ ORTH < "yet" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_yet_a_1_rel",
            PHON.ONSET con ] ].

you_stutter_1_mal := n_-_pr-you_le_rbst &
 [ ORTH < "you", "-", "you" >,
   SYNSEM.PHON.ONSET con ].

you_stutter_2_mal := n_-_pr-you_le_rbst &
 [ ORTH < "you", "you" >,
   SYNSEM.PHON.ONSET con ].

you_stutter_2_mal3 := n_-_pr-you_le_rbst &
 [ ORTH < "you", "you", "you" >,
   SYNSEM.PHON.ONSET con ].

you_stutter_3_mal := n_-_pr-you_le_rbst &
 [ ORTH < "you-", "you" >,
   SYNSEM.PHON.ONSET con ].

young_n3 := n_-_m_le &
 [ ORTH < "young" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_young_n_1_rel",
            PHON.ONSET con ] ].

;; For CoNNL
#|
comma_pct_1 := pt_-_comma_le &
 [ ORTH < "," >,
   SYNSEM [ PUNCT.RPUNCT comma_punct,
	    PHON.ONSET con_or_voc ] ].

comma_rbc_pct_1 := pt_-_comma_le &
 [ ORTH < "," >,
   SYNSEM [ PUNCT.RPUNCT rbcomma_punct,
	    PHON.ONSET con_or_voc ] ].

semicolon_pct_1 := pt_-_semicolon_le &
 [ ORTH < ";" >,
   SYNSEM.PHON.ONSET con_or_voc ].
|#

;;; From old erg/arboretum/mal-lex.tdl

; Underspecified determiner for repairing bare singular
; NPs in generation.  Note the special KEY.

a_or_the_det_rbst := d_-_sg-nmd-mal_le &
  [ ORTH < "a/the" >,
    SYNSEM [ LKEYS.KEYREL.PRED mal_bare_div_q_rel,
	     PHON.ONSET voc ] ].

;; DPF 2013-04-22 - This one produces many false positives, even with
;; |a few cats|, so disable for now and reconsider.  FIX?
#|
a_det_plur_rbst := d_-_pl_le &
 [ ORTH < "a" >,
   SYNSEM [ LKEYS.KEYREL.PRED _some_q_rel,
            LOCAL.CAT.VAL.SPEC < [ LOCAL.CAT.HEAD.--BARE + ] >,
            PHON.ONSET con ],
   GENRE robust ].

an_det_plur_rbst := d_-_pl_le &
 [ ORTH < "an" >,
   SYNSEM [ LKEYS.KEYREL.PRED _some_q_rel,
            LOCAL.CAT.VAL.SPEC < [ LOCAL.CAT.HEAD.--BARE + ] >,
            PHON.ONSET con ],
   GENRE robust ].
|#

; Mal lex entry for "allow" taking a CP complement
; with gerund meaning.

allow_v_mal := mal_v_inf_cp_comp_le &
  [ ORTH < "allow" >,
    SYNSEM [ LKEYS.KEYREL.PRED "_allow_v_1_rel",
	     PHON.ONSET voc ] ].

apple_fruit_n1_rbst := n_-_c_le &
 [ ORTH < "apple", "fruit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_apple+fruit_n_1_rel",
            PHON.ONSET voc ],
   GENRE robust ].

be_th_cop_is_rbst := mal_vc_there_is_le &
 [ ORTH < "is" >,
   SYNSEM.PHON.ONSET voc ].

be_th_cop_are_rbst := mal_vc_there_are_le &
 [ ORTH < "are" >,
   SYNSEM.PHON.ONSET voc ].

be_th_cop_was_rbst := mal_vc_there_was_le &
 [ ORTH < "was" >,
   SYNSEM.PHON.ONSET con ].

be_th_cop_were_rbst := mal_vc_there_were_le &
 [ ORTH < "were" >,
   SYNSEM.PHON.ONSET con ].

be_th_cop_is_neg_mal := v_np-xp_is-n_le_rbst &
 [ ORTH < "isn", "'t" >,
   SYNSEM.PHON.ONSET voc ].

be_th_cop_is_neg_q_mal := v_np-xp_is-n_le_rbst &
 [ ORTH < "isn", "‘t" >,
   SYNSEM.PHON.ONSET voc ].

be_th_cop_is_neg_u_mal := v_np-xp_is-n_le_rbst &
 [ ORTH < "isn", "’t" >,
   SYNSEM.PHON.ONSET voc ].

be_th_cop_are_neg_mal := v_np-xp_are-n_le_rbst &
 [ ORTH < "aren", "'t" >,
   SYNSEM.PHON.ONSET voc ].

be_th_cop_are_neg_q_mal := v_np-xp_are-n_le_rbst &
 [ ORTH < "aren", "‘t" >,
   SYNSEM.PHON.ONSET voc ].

be_th_cop_are_neg_u_mal := v_np-xp_are-n_le_rbst &
 [ ORTH < "aren", "’t" >,
   SYNSEM.PHON.ONSET voc ].

be_th_cop_was_neg_mal := v_np-xp_was-n_le_rbst &
 [ ORTH < "wasn", "'t" >,
   SYNSEM.PHON.ONSET con ].

be_th_cop_was_neg_q_mal := v_np-xp_was-n_le_rbst &
 [ ORTH < "wasn", "‘t" >,
   SYNSEM.PHON.ONSET con ].

be_th_cop_was_neg_u_mal := v_np-xp_was-n_le_rbst &
 [ ORTH < "wasn", "’t" >,
   SYNSEM.PHON.ONSET con ].

be_th_cop_were_neg_mal := v_np-xp_were-n_le_rbst &
 [ ORTH < "weren", "'t" >,
   SYNSEM.PHON.ONSET con ].

be_th_cop_were_neg_q_mal := v_np-xp_were-n_le_rbst &
 [ ORTH < "weren", "‘t" >,
   SYNSEM.PHON.ONSET con ].

be_th_cop_were_neg_u_mal := v_np-xp_were-n_le_rbst &
 [ ORTH < "weren", "’t" >,
   SYNSEM.PHON.ONSET con ].

be_c_is_rbst := mal_vc_prd_is_le &
 [ ORTH < "is" >,
   SYNSEM.PHON.ONSET voc ].

be_c_are_rbst := mal_vc_prd_are_le &
 [ ORTH < "are" >,
   SYNSEM.PHON.ONSET voc ].

be_c_was_rbst := mal_vc_prd_was_le &
 [ ORTH < "was" >,
   SYNSEM.PHON.ONSET con ].

be_c_were_rbst := mal_vc_prd_were_le &
 [ ORTH < "were" >,
   SYNSEM.PHON.ONSET con ].

be_c_is_neg_rbst := v_prd_are-n_le &
 [ ORTH < "isn", "'t" >,
   SYNSEM.PHON.ONSET voc,
   ALTS.VPELLIP -,
   GENRE robust ].

be_c_is_neg_q_rbst := v_prd_are-n_le &
 [ ORTH < "isn", "‘t" >,
   SYNSEM.PHON.ONSET voc,
   ALTS.VPELLIP -,
   GENRE robust ].

be_c_is_neg_u_rbst := v_prd_are-n_le &
 [ ORTH < "isn", "’t" >,
   SYNSEM.PHON.ONSET voc,
   ALTS.VPELLIP -,
   GENRE robust ].

be_c_is_neg_noapos_rbst := v_prd_is-n_le &
 [ ORTH < "isnt" >,
   SYNSEM.PHON.ONSET voc,
   GENRE robust ].

be_c_are_neg_rbst := v_prd_is-n_le &
 [ ORTH < "aren", "'t" >,
   SYNSEM.PHON.ONSET voc,
   ALTS.VPELLIP -,
   GENRE robust ].

be_c_are_neg_q_rbst := v_prd_is-n_le &
 [ ORTH < "aren", "‘t" >,
   SYNSEM.PHON.ONSET voc,
   ALTS.VPELLIP -,
   GENRE robust ].

be_c_are_neg_u_rbst := v_prd_is-n_le &
 [ ORTH < "aren", "’t" >,
   SYNSEM.PHON.ONSET voc,
   ALTS.VPELLIP -,
   GENRE robust ].

be_c_are_neg_noapos_rbst := v_prd_are-n_le &
 [ ORTH < "arent" >,
   SYNSEM.PHON.ONSET voc,
   GENRE robust ].

be_c_was_neg_rbst := v_prd_wre-n_le &
 [ ORTH < "wasn", "'t" >,
   SYNSEM.PHON.ONSET con,
   ALTS.VPELLIP -,
   GENRE robust ].

be_c_was_neg_q_rbst := v_prd_wre-n_le &
 [ ORTH < "wasn", "‘t" >,
   SYNSEM.PHON.ONSET con,
   ALTS.VPELLIP -,
   GENRE robust ].

be_c_was_neg_u_rbst := v_prd_wre-n_le &
 [ ORTH < "wasn", "’t" >,
   SYNSEM.PHON.ONSET con,
   ALTS.VPELLIP -,
   GENRE robust ].

be_c_was_neg_noapos_rbst := v_prd_was-n_le &
 [ ORTH < "wasnt" >,
   SYNSEM.PHON.ONSET con,
   GENRE robust ].

be_c_were_neg_rbst := v_prd_was-n_le &
 [ ORTH < "weren", "'t" >,
   SYNSEM.PHON.ONSET con,
   ALTS.VPELLIP -,
    GENRE robust ].

be_c_were_neg_q_rbst := v_prd_was-n_le &
 [ ORTH < "weren", "‘t" >,
   SYNSEM.PHON.ONSET con,
   ALTS.VPELLIP -,
    GENRE robust ].

be_c_were_neg_u_rbst := v_prd_was-n_le &
 [ ORTH < "weren", "’t" >,
   SYNSEM.PHON.ONSET con,
   ALTS.VPELLIP -,
    GENRE robust ].

be_c_were_neg_noapos_rbst := v_prd_wre-n_le &
 [ ORTH < "werent" >,
   SYNSEM.PHON.ONSET con,
   GENRE robust ].

be_c_be_rbst := mal_vc_prd_be_le &
 [ ORTH < "be" >,
   SYNSEM.PHON.ONSET con ].

be_c_been_rbst := mal_vc_prd_be_le &
 [ ORTH < "been" >,
   SYNSEM.PHON.ONSET con ].

be_np_be_rbst := mal_vc_np_be_le &
 [ ORTH < "be" >,
   SYNSEM.PHON.ONSET con ].

be_np_been_rbst := mal_vc_np_be_le &
 [ ORTH < "been" >,
   SYNSEM.PHON.ONSET con ].

be_np_is_rbst := v_np_is_le &
 [ ORTH < "are" >,
   SYNSEM [ LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.AGR.PNG.PN 3s,
            PHON.ONSET voc ],
   GENRE robust ].

be_np_are_rbst := v_np_are_le &
 [ ORTH < "is" >,
   SYNSEM.PHON.ONSET voc,
   GENRE robust ].

be_np_was_rbst := v_np_was_le &
 [ ORTH < "were" >,
   SYNSEM [ LOCAL.CAT [ HEAD.--MAL3SG +,
			VAL.SUBJ.FIRST.LOCAL.CAT.HEAD.--BARE + ],
            PHON.ONSET con ],
   GENRE robust ].

be_np_were_rbst := v_np_wre_le &
 [ ORTH < "was" >,
   SYNSEM [ LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CAT.HEAD.--BARE +,
            PHON.ONSET con ],
   GENRE robust ].

be_np_is_neg_mal := v_np_are-n_le_rbst &
 [ ORTH < "isn", "'t" >,
   SYNSEM.PHON.ONSET voc,
   GENRE robust ].

be_np_is_neg_q_mal := v_np_are-n_le_rbst &
 [ ORTH < "isn", "‘t" >,
   SYNSEM.PHON.ONSET voc,
   GENRE robust ].

be_np_is_neg_u_mal := v_np_are-n_le_rbst &
 [ ORTH < "isn", "’t" >,
   SYNSEM.PHON.ONSET voc,
   GENRE robust ].

be_np_are_neg_mal := v_np_is-n_le_rbst &
 [ ORTH < "aren", "'t" >,
   SYNSEM.PHON.ONSET voc,
   GENRE robust ].

be_np_are_neg_q_mal := v_np_is-n_le_rbst &
 [ ORTH < "aren", "‘t" >,
   SYNSEM.PHON.ONSET voc,
   GENRE robust ].

be_np_are_neg_u_mal := v_np_is-n_le_rbst &
 [ ORTH < "aren", "’t" >,
   SYNSEM.PHON.ONSET voc,
   GENRE robust ].

be_np_was_neg_mal := v_np_wre-n_le_rbst &
 [ ORTH < "wasn", "'t" >,
   SYNSEM.PHON.ONSET con,
   GENRE robust ].

be_np_was_neg_q_mal := v_np_wre-n_le_rbst &
 [ ORTH < "wasn", "‘t" >,
   SYNSEM.PHON.ONSET con,
   GENRE robust ].

be_np_was_neg_u_mal := v_np_wre-n_le_rbst &
 [ ORTH < "wasn", "’t" >,
   SYNSEM.PHON.ONSET con,
   GENRE robust ].

be_np_were_neg_mal := v_np_was-n_le_rbst &
 [ ORTH < "weren", "'t" >,
   SYNSEM.PHON.ONSET con,
   GENRE robust ].

be_np_were_neg_q_mal := v_np_was-n_le_rbst &
 [ ORTH < "weren", "‘t" >,
   SYNSEM.PHON.ONSET con,
   GENRE robust ].

be_np_were_neg_u_mal := v_np_was-n_le_rbst &
 [ ORTH < "weren", "’t" >,
   SYNSEM.PHON.ONSET con,
   GENRE robust ].

; Inflected forms of do

does1_neg_1_mal := va_doesnt_neg_pres_le_rbst &
 [ ORTH < "don't" >,
   SYNSEM.PHON.ONSET con ].

does1_neg_2_mal := va_doesnt_neg_pres_le_rbst &
 [ ORTH < "do", "n't" >,
   SYNSEM.PHON.ONSET con ].

does1_neg_3_mal := va_doesnt_neg_pres_le_rbst &
 [ ORTH < "don", "'t" >,
   SYNSEM.PHON.ONSET con ].

does1_neg_1_q_mal := va_doesnt_neg_pres_le_rbst &
 [ ORTH < "don‘t" >,
   SYNSEM.PHON.ONSET con ].

does1_neg_2_q_mal := va_doesnt_neg_pres_le_rbst &
 [ ORTH < "do", "n‘t" >,
   SYNSEM.PHON.ONSET con ].

does1_neg_3_q_mal := va_doesnt_neg_pres_le_rbst &
 [ ORTH < "don", "‘t" >,
   SYNSEM.PHON.ONSET con ].

does1_neg_1_u_mal := va_doesnt_neg_pres_le_rbst &
 [ ORTH < "don’t" >,
   SYNSEM.PHON.ONSET con ].

does1_neg_2_u_mal := va_doesnt_neg_pres_le_rbst &
 [ ORTH < "do", "n’t" >,
   SYNSEM.PHON.ONSET con ].

does1_neg_3_u_mal := va_doesnt_neg_pres_le_rbst &
 [ ORTH < "don", "’t" >,
   SYNSEM.PHON.ONSET con ].

does1_neg_noapos_rbst := v_vp_does-n_le &
 [ ORTH < "doesnt" >,
   SYNSEM.PHON.ONSET con,
   GENRE robust ].

do1_pos_sg_rbst := mal_va_does_le &
 [ ORTH < "do" >,
   SYNSEM.PHON.ONSET con ].

do1_neg_1_mal := va_dont_neg_pres_le_rbst &
 [ ORTH < "doesn't" >,
   SYNSEM.PHON.ONSET con ].

do1_neg_2_mal := va_dont_neg_pres_le_rbst &
 [ ORTH < "does", "n't" >,
   SYNSEM.PHON.ONSET con ].

do1_neg_3_mal := va_dont_neg_pres_le_rbst &
 [ ORTH < "doesn", "'t" >,
   SYNSEM.PHON.ONSET con ].

do1_neg_1_q_mal := va_dont_neg_pres_le_rbst &
 [ ORTH < "doesn‘t" >,
   SYNSEM.PHON.ONSET con ].

do1_neg_2_q_mal := va_dont_neg_pres_le_rbst &
 [ ORTH < "does", "n‘t" >,
   SYNSEM.PHON.ONSET con ].

do1_neg_3_q_mal := va_dont_neg_pres_le_rbst &
 [ ORTH < "doesn", "‘t" >,
   SYNSEM.PHON.ONSET con ].

do1_neg_1_u_mal := va_dont_neg_pres_le_rbst &
 [ ORTH < "doesn’t" >,
   SYNSEM.PHON.ONSET con ].

do1_neg_2_u_mal := va_dont_neg_pres_le_rbst &
 [ ORTH < "does", "n’t" >,
   SYNSEM.PHON.ONSET con ].

do1_neg_3_u_mal := va_dont_neg_pres_le_rbst &
 [ ORTH < "doesn", "’t" >,
   SYNSEM.PHON.ONSET con ].

do1_neg_noapos_rbst := v_vp_do-f-n_le &
 [ ORTH < "dont" >,
   SYNSEM.PHON.ONSET con,
   GENRE robust ].

does1_pos_pl_rbst := mal_va_do_fin_le &
 [ ORTH < "does" >,
   SYNSEM.PHON.ONSET con ].

dog_weekend_n1_rbst := n_-_c_le &
 [ ORTH < "dog", "weekend" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dog+weekend_n_1_rel",
            PHON.ONSET con ],
   GENRE robust ].

dog_puppy_n1_rbst := n_-_c_le &
 [ ORTH < "dog", "puppy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dog+puppy_n_1_rel",
            PHON.ONSET con ],
   GENRE robust ].

hamster_pet_n1_rbst := n_-_c_le &
 [ ORTH < "hamster", "pet" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hamster+pet_n_1_rel",
            PHON.ONSET con ],
   GENRE robust ].

has_aux_rbst := mal_va_has_le &
 [ ORTH < "have" >,
   SYNSEM.PHON.ONSET con ].

has_aux_finc_rbst := v_vp_has-mal_le &
 [ ORTH < "has" >,
   SYNSEM.PHON.ONSET con ].

have_aux_finc_rbst := v_vp_have-mal_le &
 [ ORTH < "have" >,
   SYNSEM.PHON.ONSET con ].

have_fin_aux_rbst := mal_va_have_fin_le &
 [ ORTH < "has" >,
   SYNSEM.PHON.ONSET con ].

has_neg_1_mal := v_vp_has-n_le_rbst &
 [ ORTH < "hasn't" >,
   SYNSEM.PHON.ONSET con ].

has_neg_2_mal := v_vp_has-n_le_rbst &
 [ ORTH < "has", "n't" >,
   SYNSEM.PHON.ONSET con ].

has_neg_3_mal := v_vp_has-n_le_rbst &
 [ ORTH < "hasn", "'t" >,
   SYNSEM.PHON.ONSET con ].

has_neg_1_q_mal := v_vp_has-n_le_rbst &
 [ ORTH < "hasn‘t" >,
   SYNSEM.PHON.ONSET con ].

has_neg_2_q_mal := v_vp_has-n_le_rbst &
 [ ORTH < "has", "n‘t" >,
   SYNSEM.PHON.ONSET con ].

has_neg_3_q_mal := v_vp_has-n_le_rbst &
 [ ORTH < "hasn", "‘t" >,
   SYNSEM.PHON.ONSET con ].

has_neg_1_u_mal := v_vp_has-n_le_rbst &
 [ ORTH < "hasn’t" >,
   SYNSEM.PHON.ONSET con ].

has_neg_2_u_mal := v_vp_has-n_le_rbst &
 [ ORTH < "has", "n’t" >,
   SYNSEM.PHON.ONSET con ].

has_neg_3_u_mal := v_vp_has-n_le_rbst &
 [ ORTH < "hasn", "’t" >,
   SYNSEM.PHON.ONSET con ].

have_neg_1_mal := v_vp_have-f-n_le_rbst &
 [ ORTH < "haven't" >,
   SYNSEM.PHON.ONSET con ].

have_neg_2_mal := v_vp_have-f-n_le_rbst &
 [ ORTH < "have", "n't" >,
   SYNSEM.PHON.ONSET con ].

have_neg_3_mal := v_vp_have-f-n_le_rbst &
 [ ORTH < "haven", "'t" >,
   SYNSEM.PHON.ONSET con ].

have_neg_1_q_mal := v_vp_have-f-n_le_rbst &
 [ ORTH < "haven‘t" >,
   SYNSEM.PHON.ONSET con ].

have_neg_2_q_mal := v_vp_have-f-n_le_rbst &
 [ ORTH < "have", "n‘t" >,
   SYNSEM.PHON.ONSET con ].

have_neg_3_q_mal := v_vp_have-f-n_le_rbst &
 [ ORTH < "haven", "‘t" >,
   SYNSEM.PHON.ONSET con ].

have_neg_1_u_mal := v_vp_have-f-n_le_rbst &
 [ ORTH < "haven’t" >,
   SYNSEM.PHON.ONSET con ].

have_neg_2_u_mal := v_vp_have-f-n_le_rbst &
 [ ORTH < "have", "n’t" >,
   SYNSEM.PHON.ONSET con ].

have_neg_3_u_mal := v_vp_have-f-n_le_rbst &
 [ ORTH < "haven", "’t" >,
   SYNSEM.PHON.ONSET con ].

lunch_pizza_n1_rbst := n_-_c_le &
 [ ORTH < "lunch", "pizza" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lunch+pizza_n_1_rel",
            PHON.ONSET con ],
   GENRE robust ].

people_n1_rbst := mal_n_plur_ppcomp_le &
 [ ORTH < "peoples" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
		    KEYREL.PRED "_people_n_rel" ],
	    PHON.ONSET con ] ].

picture_story_n1_rbst := n_-_c_le &
 [ ORTH < "picture", "story" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_picture+story_n_1_rel",
            PHON.ONSET con ],
   GENRE robust ].

pizza_pepperoni_n1_rbst := n_-_m_le &
 [ ORTH < "pizza", "pepperoni" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pizza+pepperoni_n_1_rel",
            PHON.ONSET con ],
   GENRE robust ].


; For proper names
the_prop_1_rbst := d_-_the-mal_le &
 [ ORTH < "the" >,
   SYNSEM [ LOCAL.CAT.VAL.SPEC < [ --MIN named_np_rel,
				   LOCAL.AGR.PNG.PN 3s,
				   --SIND nonconj_ref-ind ] >,
	    LKEYS.KEYREL.PRED _the_q_prop_rel,
            PHON.ONSET con ] ].

a_prop_1_rbst := d_-_the-mal_le &
 [ ORTH < "a" >,
   SYNSEM [ LOCAL.CAT.VAL.SPEC < [ --MIN named_np_rel,
				   LOCAL.AGR.PNG.PN 3s,
				   --SIND nonconj_ref-ind ] >,
	    LKEYS.KEYREL.PRED _the_q_prop_rel,
            PHON.ONSET con ] ].

an_prop_1_rbst := d_-_the-mal_le &
 [ ORTH < "an" >,
   SYNSEM [ LOCAL.CAT.VAL.SPEC < [ --MIN named_np_rel,
				   LOCAL.AGR.PNG.PN 3s,
				   --SIND nonconj_ref-ind ] >,
	    LKEYS.KEYREL.PRED _the_q_prop_rel,
            PHON.ONSET voc ] ].

;; Tried this for mass nouns not right-modified: |the society|
;; but it is too aggressive, e.g. applying to |the birthday cake| and lots more.
;; So rethink
#|
the_mass_1_rbst := d_-_the-mal_le &
 [ ORTH < "the" >,
   SYNSEM [ LOCAL.CAT.VAL.SPEC < [ LOCAL.AGR [ PNG.PN 3s,
					       DIV + ],
				   LEX +,
				   --SIND nonconj_ref-ind ] >,
	    LKEYS.KEYREL.PRED _the_q_prop_rel,
            PHON.ONSET con ] ].
|#

that_det_rbst := mal_det_pl_le &
 [ ORTH < "that" >,
   SYNSEM [ LKEYS.KEYREL.PRED _those_q_dem_rel,
	    PHON.ONSET con ] ].

this_det_rbst := mal_det_pl_le &
 [ ORTH < "this" >,
   SYNSEM [ LKEYS.KEYREL.PRED _these_q_dem_rel,
	    PHON.ONSET con ] ].

; "I want arrive"

want_mal_v1 := v_vp_seq-bse_le_rbst &
  [ ORTH < "want" >,
    SYNSEM [ LKEYS.KEYREL.PRED "_want_v_1_rel",
	     PHON.ONSET con ] ].

advise_mal_v1 := v_vp_seq_le_rbst &
 [ ORTH < "advise" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_advise_v_1_rel",
            PHON.ONSET voc ] ].

allow_mal_v1 := v_vp_seq_le_rbst &
 [ ORTH < "allow" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_allow_v_1_rel",
            PHON.ONSET voc ] ].

enable_mal_v1 := v_vp_seq_le_rbst &
 [ ORTH < "enable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_enable_v_1_rel",
            PHON.ONSET voc ] ].

permit_mal_v1 := v_vp_seq_le_rbst &
 [ ORTH < "permit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_permit_v_1_rel",
            PHON.ONSET con ] ].

receive_v1 := v_np_le &
 [ ORTH < "receive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_receive_v_1_rel",
            PHON.ONSET con ] ].

recital_n1 := n_-_c_le &
 [ ORTH < "recital" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_recital_n_1_rel",
            PHON.ONSET con ] ].

recommend_mal_v1 := v_vp_seq_le_rbst &
 [ ORTH < "recommend" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_recommend_v_1_rel",
            PHON.ONSET con ] ].

suggest_mal_v1 := v_vp_seq_le_rbst &
 [ ORTH < "suggest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_suggest_v_1_rel",
            PHON.ONSET con ] ].

try_mal_v1 := v_vp_seq-bse_le_rbst &
  [ ORTH < "try" >,
    SYNSEM [ LKEYS.KEYREL.PRED "_try_v_1_rel",
	     PHON.ONSET con ] ].

; Pronouns with mismatched case

him_rbst := n_-_pr-he_le &
 [ ORTH < "him" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.HEAD.MINORS.NORM no_rel ],
   GENRE robust ].

; Avoid spurious ambiguity for e.g. "taller than he"
he_rbst := n_-_pr-him_le &
 [ ORTH < "he" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.HEAD.MINORS.NORM no_rel ],
   GENRE robust ].

she_rbst := n_-_pr-her_le &
 [ ORTH < "she" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.HEAD.MINORS.NORM no_rel ],
   GENRE robust ].

her_rbst := n_-_pr-she_le &
 [ ORTH < "her" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.HEAD.MINORS.NORM no_rel ],
   GENRE robust ].

them_rbst := n_-_pr-they_le &
 [ ORTH < "them" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.HEAD.MINORS.NORM no_rel ],
   GENRE robust ].

they_rbst := n_-_pr-them_le &
 [ ORTH < "they" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.HEAD.MINORS.NORM no_rel ],
   GENRE robust ].

me_rbst := n_-_pr-i_le &
 [ ORTH < "me" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.HEAD.MINORS.NORM no_rel ],
   GENRE robust ].

i_pron_rbst := n_-_pr-me_le &
 [ ORTH < "I" >,
   SYNSEM [ PHON.ONSET voc,
            LOCAL.CAT.HEAD.MINORS.NORM no_rel ],
   GENRE robust ].

us_pron_rbst := n_-_pr-we_le &
 [ ORTH < "us" >,
   SYNSEM [ PHON.ONSET voc,
            LOCAL.CAT.HEAD.MINORS.NORM no_rel ],
   GENRE robust ].

;; This one leads to too many false positives, so comment out for now
;we_rbst := n_-_pr-us_le &
; [ ORTH < "we" >,
;   SYNSEM [ PHON.ONSET con,
;            LOCAL.CAT.HEAD.MINORS.NORM no_rel ],
;   GENRE robust ].

;; Hack for |would rather|, pending real analysis
would_rather_v1 := v_vp-pp_ssr_le &
 [ ORTH < "would", "rather" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_would+rather_v_1_rel",
            PHON.ONSET con ] ].


;; Needed for backward compatibility of data sets, when misspelling was present
frantically_x_adv1 := av_-_i-vp_le &
 [ ORTH < "franticaly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_frantic_a_1_rel",
            PHON.ONSET con ] ].

;; double negation

be_c_am := v_prd_am_le &
 [ ORTH < "am" >,
   SYNSEM [ PHON.ONSET voc,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL na_or_- ] ].

be_c_am_cx_2 := v_prd_am-cx_le &
 [ ORTH < "'m" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL na_or_- ] ].

be_c_am_neg_1 := v_prd_am-n_le &
 [ ORTH < "aren't" >,
   SYNSEM [ PHON.ONSET voc,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

be_c_am_neg_2 := v_prd_am-n_le &
 [ ORTH < "aren", "'t" >,
   SYNSEM [ PHON.ONSET voc,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

be_c_am_neg_1_rbst := v_prd_am-n_le &
 [ ORTH < "aren't" >,
   SYNSEM [ PHON.ONSET voc,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

be_c_am_neg_2_rbst := v_prd_am-n_le &
 [ ORTH < "aren", "'t" >,
   SYNSEM [ PHON.ONSET voc,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

be_c_are := v_prd_are_le &
 [ ORTH < "are" >,
   SYNSEM [ PHON.ONSET voc,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL na_or_- ] ].

be_c_are_cx_2 := v_prd_are-cx_le &
 [ ORTH < "’re" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL na_or_- ] ].

be_c_are_neg_1 := v_prd_are-n_le &
 [ ORTH < "aren't" >,
   SYNSEM [ PHON.ONSET voc,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

be_c_are_neg_2 := v_prd_are-n_le &
 [ ORTH < "aren", "'t" >,
   SYNSEM [ PHON.ONSET voc,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

be_c_are_neg_1_rbst := v_prd_are-n_le &
 [ ORTH < "aren't" >,
   SYNSEM [ PHON.ONSET voc,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

be_c_are_neg_2_rbst := v_prd_are-n_le &
 [ ORTH < "aren", "'t" >,
   SYNSEM [ PHON.ONSET voc,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

be_c_is := v_prd_is_le &
 [ ORTH < "is" >,
   SYNSEM [ PHON.ONSET voc,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL na_or_- ] ].

be_c_is_cx_2 := v_prd_is-cx_le &
 [ ORTH < "'s" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL na_or_- ] ].

be_c_is_neg_1 := v_prd_is-n_le &
 [ ORTH < "isn't" >,
   SYNSEM [ PHON.ONSET voc,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

be_c_is_neg_2 := v_prd_is-n_le &
 [ ORTH < "isn", "'t" >,
   SYNSEM [ PHON.ONSET voc,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

be_c_is_neg_1_rbst := v_prd_is-n_le &
 [ ORTH < "isn't" >,
   SYNSEM [ PHON.ONSET voc,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

be_c_is_neg_2_rbst := v_prd_is-n_le &
 [ ORTH < "isn", "'t" >,
   SYNSEM [ PHON.ONSET voc,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

be_c_was := v_prd_was_le &
 [ ORTH < "was" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL na_or_- ] ].

be_c_was_neg_1 := v_prd_was-n_le &
 [ ORTH < "wasn't" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

be_c_was_neg_2 := v_prd_was-n_le &
 [ ORTH < "wasn", "'t" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

be_c_was_neg_1_rbst := v_prd_was-n_le &
 [ ORTH < "wasn't" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

be_c_was_neg_2_rbst := v_prd_was-n_le &
 [ ORTH < "wasn", "'t" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

be_c_was_subj := v_prd_was-sv_le &
 [ ORTH < "was" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL na_or_- ] ].

be_c_was_neg_subj_1 := v_prd_was-n-sv_le &
 [ ORTH < "wasn't" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

be_c_was_neg_subj_2 := v_prd_was-n-sv_le &
 [ ORTH < "wasn", "'t" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

be_c_was_neg_subj_1_rbst := v_prd_was-n-sv_le &
 [ ORTH < "wasn't" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

be_c_was_neg_subj_2_rbst := v_prd_was-n-sv_le &
 [ ORTH < "wasn", "'t" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

be_c_were := v_prd_wre_le &
 [ ORTH < "were" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL na_or_- ] ].

be_c_were_neg_1 := v_prd_wre-n_le &
 [ ORTH < "weren't" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

be_c_were_neg_2 := v_prd_wre-n_le &
 [ ORTH < "weren", "'t" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

be_c_were_neg_1_rbst  := v_prd_wre-n_le &
 [ ORTH < "weren't" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

be_c_were_neg_1_rbst2 := v_prd_wre-n_le &
 [ ORTH < "weren", "'t" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

be_c_were_subj := v_prd_wre-sv_le &
 [ ORTH < "were" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL na_or_- ] ].

be_c_were_neg_subj_1 := v_prd_wre-n-sv_le &
 [ ORTH < "weren't" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

be_c_were_neg_subj_2 := v_prd_wre-n-sv_le &
 [ ORTH < "weren", "'t" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

be_c_were_neg_subj_1_rbst := v_prd_wre-n-sv_le &
 [ ORTH < "weren't" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

be_c_were_neg_subj_2_rbst := v_prd_wre-n-sv_le &
 [ ORTH < "weren", "'t" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

be_id_am := v_np_am_le &
 [ ORTH < "am" >,
   SYNSEM [ PHON.ONSET voc,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL na_or_- ] ].

be_id_am_cx_2 := v_np_am-cx_le &
 [ ORTH < "'m" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL na_or_- ] ].

be_id_am_neg_1 := v_np_am-n_le &
 [ ORTH < "aren't" >,
   SYNSEM [ PHON.ONSET voc,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

be_id_am_neg_2 := v_np_am-n_le &
 [ ORTH < "aren", "'t" >,
   SYNSEM [ PHON.ONSET voc,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

be_id_am_neg_1_rbst := v_np_am-n_le &
 [ ORTH < "aren't" >,
   SYNSEM [ PHON.ONSET voc,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

be_id_am_neg_2_rbst := v_np_am-n_le &
 [ ORTH < "aren", "'t" >,
   SYNSEM [ PHON.ONSET voc,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

be_id_be_rbst := mal_vc_np_be_le &
 [ ORTH < "be" >,
   SYNSEM.PHON.ONSET con ].

be_id_are := v_np_are_le &
 [ ORTH < "are" >,
   SYNSEM [ PHON.ONSET voc,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL na_or_- ] ].

be_id_are_cx_2 := v_np_are-cx_le &
 [ ORTH < "’re" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL na_or_- ] ].

be_id_are_neg_1 := v_np_are-n_le &
 [ ORTH < "aren't" >,
   SYNSEM [ PHON.ONSET voc,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

be_id_are_neg_2 := v_np_are-n_le &
 [ ORTH < "aren", "'t" >,
   SYNSEM [ PHON.ONSET voc,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

be_id_are_neg_1_rbst := v_np_are-n_le &
 [ ORTH < "aren't" >,
   SYNSEM [ PHON.ONSET voc,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

be_id_are_neg_2_rbst := v_np_are-n_le &
 [ ORTH < "aren", "'t" >,
   SYNSEM [ PHON.ONSET voc,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

be_id_is := v_np_is_le &
 [ ORTH < "is" >,
   SYNSEM [ PHON.ONSET voc,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL na_or_- ] ].

be_id_is_cx_2 := v_np_is-cx_le &
 [ ORTH < "'s" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL na_or_- ] ].

be_id_is_cx_3 := v_np_is-cx_le &
 [ ORTH < "’s" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL na_or_- ] ].

be_id_is_neg_1 := v_np_is-n_le &
 [ ORTH < "isn't" >,
   SYNSEM [ PHON.ONSET voc,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

be_id_is_neg_2 := v_np_is-n_le &
 [ ORTH < "isn", "'t" >,
   SYNSEM [ PHON.ONSET voc,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

be_id_is_neg_1_rbst := v_np_is-n_le &
 [ ORTH < "isn't" >,
   SYNSEM [ PHON.ONSET voc,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

be_id_is_neg_2_rbst := v_np_is-n_le &
 [ ORTH < "isn", "'t" >,
   SYNSEM [ PHON.ONSET voc,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

be_id_was := v_np_was_le &
 [ ORTH < "was" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL na_or_- ] ].

be_id_was_neg_1 := v_np_was-n_le &
 [ ORTH < "wasn't" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

be_id_was_neg_2 := v_np_was-n_le &
 [ ORTH < "wasn", "'t" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

be_id_was_neg_1_rbst := v_np_was-n_le &
 [ ORTH < "wasn't" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

be_id_was_neg_2_rbst := v_np_was-n_le &
 [ ORTH < "wasn", "'t" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

be_id_was_subj := v_np_was-sv_le &
 [ ORTH < "was" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL na_or_- ] ].

be_id_was_neg_subj_1 := v_np_was-n-sv_le &
 [ ORTH < "wasn't" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

be_id_was_neg_subj_2 := v_np_was-n-sv_le &
 [ ORTH < "wasn", "'t" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

be_id_was_neg_subj_1_rbst := v_np_was-n-sv_le &
 [ ORTH < "wasn't" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

be_id_was_neg_subj_2_rbst := v_np_was-n-sv_le &
 [ ORTH < "wasn", "'t" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

be_id_were := v_np_wre_le &
 [ ORTH < "were" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL na_or_- ] ].

be_id_were_neg_1 := v_np_wre-n_le &
 [ ORTH < "weren't" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

be_id_were_neg_2 := v_np_wre-n_le &
 [ ORTH < "weren", "'t" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

be_id_were_neg_1_rbst := v_np_wre-n_le &
 [ ORTH < "weren't" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

be_id_were_neg_2_rbst := v_np_wre-n_le &
 [ ORTH < "weren", "'t" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

be_id_were_subj := v_np_wre-sv_le &
 [ ORTH < "were" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL na_or_- ] ].

be_id_were_neg_subj_1 := v_np_wre-n-sv_le &
 [ ORTH < "weren't" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

be_id_were_neg_subj_2 := v_np_wre-n-sv_le &
 [ ORTH < "weren", "'t" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

be_id_were_neg_subj_1_rbst := v_np_wre-n-sv_le &
 [ ORTH < "weren't" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

be_id_were_neg_subj_2_rbst := v_np_wre-n-sv_le &
 [ ORTH < "weren", "'t" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

be_it_cop_is := v_np-rc_is_le &
 [ ORTH < "is" >,
   SYNSEM [ PHON.ONSET voc,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL na_or_- ] ].

be_it_cop_is_cx_2 := v_np-rc_is-cx_le &
 [ ORTH < "'s" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL na_or_- ] ].

be_it_cop_is_neg_1 := v_np-rc_is-n_le &
 [ ORTH < "isn't" >,
   SYNSEM [ PHON.ONSET voc,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

be_it_cop_is_neg_2 := v_np-rc_is-n_le &
 [ ORTH < "isn", "'t" >,
   SYNSEM [ PHON.ONSET voc,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

be_it_cop_is_neg_1_rbst := v_np-rc_is-n_le &
 [ ORTH < "isn't" >,
   SYNSEM [ PHON.ONSET voc,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

be_it_cop_is_neg_2_rbst := v_np-rc_is-n_le &
 [ ORTH < "isn", "'t" >,
   SYNSEM [ PHON.ONSET voc,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

be_it_cop_was := v_np-rc_was_le &
 [ ORTH < "was" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL na_or_- ] ].

be_it_cop_was_neg_1 := v_np-rc_was-n_le &
 [ ORTH < "wasn't" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

be_it_cop_was_neg_2 := v_np-rc_was-n_le &
 [ ORTH < "wasn", "'t" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

be_it_cop_was_neg_1_rbst := v_np-rc_was-n_le &
 [ ORTH < "wasn't" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

be_it_cop_was_neg_2_rbst := v_np-rc_was-n_le &
 [ ORTH < "wasn", "'t" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

be_it_cop_was_subj := v_np-rc_was-sv_le &
 [ ORTH < "was" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL na_or_- ] ].

be_it_cop_was_neg_subj_1 := v_np-rc_was-n-sv_le &
 [ ORTH < "wasn't" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

be_it_cop_was_neg_subj_2 := v_np-rc_was-n-sv_le &
 [ ORTH < "wasn", "'t" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

be_it_cop_was_neg_subj_1_rbst := v_np-rc_was-n-sv_le &
 [ ORTH < "wasn't" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

be_it_cop_was_neg_subj_2_rbst := v_np-rc_was-n-sv_le &
 [ ORTH < "wasn", "'t" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

be_nv_are := v_cp_are_le &
 [ ORTH < "are" >,
   SYNSEM [ PHON.ONSET voc,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL na_or_- ] ].

be_nv_are_neg_1 := v_cp_are-n_le &
 [ ORTH < "aren't" >,
   SYNSEM [ PHON.ONSET voc,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

be_nv_are_neg_2 := v_cp_are-n_le &
 [ ORTH < "aren", "'t" >,
   SYNSEM [ PHON.ONSET voc,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

be_nv_are_neg_1_rbst := v_cp_are-n_le &
 [ ORTH < "aren't" >,
   SYNSEM [ PHON.ONSET voc,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

be_nv_are_neg_2_rbst := v_cp_are-n_le &
 [ ORTH < "aren", "'t" >,
   SYNSEM [ PHON.ONSET voc,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

be_nv_is := v_cp_is_le &
 [ ORTH < "is" >,
   SYNSEM [ PHON.ONSET voc,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL na_or_- ] ].

be_nv_is_cx_2 := v_cp_is-cx_le &
 [ ORTH < "'s" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL na_or_- ] ].

be_nv_is_neg_1 := v_cp_is-n_le &
 [ ORTH < "isn't" >,
   SYNSEM [ PHON.ONSET voc,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

be_nv_is_neg_2 := v_cp_is-n_le &
 [ ORTH < "isn", "'t" >,
   SYNSEM [ PHON.ONSET voc,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

be_nv_is_neg_1_rbst := v_cp_is-n_le &
 [ ORTH < "isn't" >,
   SYNSEM [ PHON.ONSET voc,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

be_nv_is_neg_2_rbst := v_cp_is-n_le &
 [ ORTH < "isn", "'t" >,
   SYNSEM [ PHON.ONSET voc,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

be_nv_was := v_cp_was_le &
 [ ORTH < "was" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL na_or_- ] ].

be_nv_was_neg_1 := v_cp_was-n_le &
 [ ORTH < "wasn't" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

be_nv_was_neg_2 := v_cp_was-n_le &
 [ ORTH < "wasn", "'t" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

be_nv_was_neg_1_rbst := v_cp_was-n_le &
 [ ORTH < "wasn't" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

be_nv_was_neg_2_rbst := v_cp_was-n_le &
 [ ORTH < "wasn", "'t" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

be_nv_was_subj := v_cp_was-sv_le &
 [ ORTH < "was" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL na_or_- ] ].

be_nv_was_neg_subj_1 := v_cp_was-n-sv_le &
 [ ORTH < "wasn't" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

be_nv_was_neg_subj_2 := v_cp_was-n-sv_le &
 [ ORTH < "wasn", "'t" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

be_nv_was_neg_subj_1_rbst := v_cp_was-n-sv_le &
 [ ORTH < "wasn't" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

be_nv_was_neg_subj_2_rbst := v_cp_was-n-sv_le &
 [ ORTH < "wasn", "'t" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

be_nv_were := v_cp_wre_le &
 [ ORTH < "were" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL na_or_- ] ].

be_nv_were_neg_1 := v_cp_wre-n_le &
 [ ORTH < "weren't" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

be_nv_were_neg_2 := v_cp_wre-n_le &
 [ ORTH < "weren", "'t" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

be_nv_were_neg_1_rbst := v_cp_wre-n_le &
 [ ORTH < "weren't" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

be_nv_were_neg_2_rbst := v_cp_wre-n_le &
 [ ORTH < "weren", "'t" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

be_nv_were_subj := v_cp_wre-sv_le &
 [ ORTH < "were" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL na_or_- ] ].

be_nv_were_neg_subj_1 := v_cp_wre-n-sv_le &
 [ ORTH < "weren't" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

be_nv_were_neg_subj_2 := v_cp_wre-n-sv_le &
 [ ORTH < "weren", "'t" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

be_nv_were_neg_subj_1_rbst := v_cp_wre-n-sv_le &
 [ ORTH < "weren't" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

be_nv_were_neg_subj_2_rbst := v_cp_wre-n-sv_le &
 [ ORTH < "weren", "'t" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

be_th_cop_are := v_np-xp_are_le &
 [ ORTH < "are" >,
   SYNSEM [ PHON.ONSET voc,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL na_or_- ] ].

be_th_cop_are_neg_1 := v_np-xp_are-n_le &
 [ ORTH < "aren't" >,
   SYNSEM [ PHON.ONSET voc,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

be_th_cop_are_neg_2 := v_np-xp_are-n_le &
 [ ORTH < "aren", "'t" >,
   SYNSEM [ PHON.ONSET voc,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

be_th_cop_are_neg_1_rbst := v_np-xp_are-n_le &
 [ ORTH < "aren't" >,
   SYNSEM [ PHON.ONSET voc,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

be_th_cop_are_neg_2_rbst := v_np-xp_are-n_le &
 [ ORTH < "aren", "'t" >,
   SYNSEM [ PHON.ONSET voc,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

be_th_cop_is := v_np-xp_is_le &
 [ ORTH < "is" >,
   SYNSEM [ PHON.ONSET voc,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL na_or_- ] ].

be_th_cop_is_cx_2 := v_np-xp_is-cx_le &
 [ ORTH < "'s" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL na_or_- ] ].

be_th_cop_is_neg_1 := v_np-xp_is-n_le &
 [ ORTH < "isn't" >,
   SYNSEM [ PHON.ONSET voc,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

be_th_cop_is_neg_2 := v_np-xp_is-n_le &
 [ ORTH < "isn", "'t" >,
   SYNSEM [ PHON.ONSET voc,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

be_th_cop_is_neg_1_rbst := v_np-xp_is-n_le &
 [ ORTH < "isn't" >,
   SYNSEM [ PHON.ONSET voc,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

be_th_cop_is_neg_2_rbst := v_np-xp_is-n_le &
 [ ORTH < "isn", "'t" >,
   SYNSEM [ PHON.ONSET voc,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

be_th_cop_was := v_np-xp_was_le &
 [ ORTH < "was" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL na_or_- ] ].

be_th_cop_was_neg_1 := v_np-xp_was-n_le &
 [ ORTH < "wasn't" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

be_th_cop_was_neg_2 := v_np-xp_was-n_le &
 [ ORTH < "wasn", "'t" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

be_th_cop_was_neg_1_rbst := v_np-xp_was-n_le &
 [ ORTH < "wasn't" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

be_th_cop_was_neg_2_rbst := v_np-xp_was-n_le &
 [ ORTH < "wasn", "'t" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

be_th_cop_was_subj := v_np-xp_was-sv_le &
 [ ORTH < "was" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL na_or_- ] ].

be_th_cop_was_neg_subj_1 := v_np-xp_was-n-sv_le &
 [ ORTH < "wasn't" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

be_th_cop_was_neg_subj_2 := v_np-xp_was-n-sv_le &
 [ ORTH < "wasn", "'t" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

be_th_cop_was_neg_subj_1_rbst := v_np-xp_was-n-sv_le &
 [ ORTH < "wasn't" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

be_th_cop_was_neg_subj_2_rbst := v_np-xp_was-n-sv_le &
 [ ORTH < "wasn", "'t" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

be_th_cop_were := v_np-xp_wre_le &
 [ ORTH < "were" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL na_or_- ] ].

be_th_cop_were_neg_1 := v_np-xp_wre-n_le &
 [ ORTH < "weren't" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

be_th_cop_were_neg_2 := v_np-xp_wre-n_le &
 [ ORTH < "weren", "'t" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

be_th_cop_were_neg_1_rbst := v_np-xp_wre-n_le &
 [ ORTH < "weren't" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

be_th_cop_were_neg_2_rbst := v_np-xp_wre-n_le &
 [ ORTH < "weren", "'t" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

be_th_cop_were_subj := v_np-xp_wre-sv_le &
 [ ORTH < "were" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL na_or_- ] ].

be_th_cop_were_neg_subj_1 := v_np-xp_wre-n-sv_le &
 [ ORTH < "weren't" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

be_th_cop_were_neg_subj_2 := v_np-xp_wre-n-sv_le &
 [ ORTH < "weren", "'t" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

be_th_cop_were_neg_subj_1_rbst := v_np-xp_wre-n-sv_le &
 [ ORTH < "weren't" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

be_th_cop_were_neg_subj_2_rbst := v_np-xp_wre-n-sv_le &
 [ ORTH < "weren", "'t" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

can_aux_neg_1 := v_vp_mdl-n_le &
 [ ORTH < "can't" >,
   SYNSEM [ LKEYS.KEYREL.PRED _can_v_modal_rel,
            PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

can_aux_neg_2 := v_vp_mdl-n_le &
 [ ORTH < "can", "'t" >,
   SYNSEM [ LKEYS.KEYREL.PRED _can_v_modal_rel,
            PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

can_aux_neg_1_rbst := v_vp_mdl-n_le &
 [ ORTH < "can't" >,
   SYNSEM [ LKEYS.KEYREL.PRED _can_v_modal_rel,
            PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

can_aux_neg_2_rbst := v_vp_mdl-n_le &
 [ ORTH < "can", "'t" >,
   SYNSEM [ LKEYS.KEYREL.PRED _can_v_modal_rel,
            PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

could_aux_neg_1 := v_vp_mdl-n-pst_le &
 [ ORTH < "couldn't" >,
   SYNSEM [ LKEYS.KEYREL.PRED _can_v_modal_rel,
            PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

could_aux_neg_2 := v_vp_mdl-n-pst_le &
 [ ORTH < "couldn", "'t" >,
   SYNSEM [ LKEYS.KEYREL.PRED _can_v_modal_rel,
            PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

could_aux_neg_1_rbst := v_vp_mdl-n-pst_le &
 [ ORTH < "couldn't" >,
   SYNSEM [ LKEYS.KEYREL.PRED _can_v_modal_rel,
            PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

could_aux_neg_2_rbst := v_vp_mdl-n-pst_le &
 [ ORTH < "couldn", "'t" >,
   SYNSEM [ LKEYS.KEYREL.PRED _can_v_modal_rel,
            PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

could_aux_neg_1b := v_vp_mdl-n_le &
 [ ORTH < "couldn't" >,
   SYNSEM [ LKEYS.KEYREL.PRED _could_v_modal_rel,
            PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

could_aux_neg_12 := v_vp_mdl-n_le &
 [ ORTH < "couldn", "'t" >,
   SYNSEM [ LKEYS.KEYREL.PRED _could_v_modal_rel,
            PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

could_aux_neg_1b_rbst := v_vp_mdl-n_le &
 [ ORTH < "couldn't" >,
   SYNSEM [ LKEYS.KEYREL.PRED _could_v_modal_rel,
            PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

could_aux_neg_1b_rbs2 := v_vp_mdl-n_le &
 [ ORTH < "couldn", "'t" >,
   SYNSEM [ LKEYS.KEYREL.PRED _could_v_modal_rel,
            PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

dare_aux_neg_1 := v_vp_mdl-n_le &
 [ ORTH < "daren't" >,
   SYNSEM [ LKEYS.KEYREL.PRED _dare_v_qmodal_rel,
            PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

dare_aux_neg_2 := v_vp_mdl-n_le &
 [ ORTH < "daren", "'t" >,
   SYNSEM [ LKEYS.KEYREL.PRED _dare_v_qmodal_rel,
            PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

dare_aux_neg_1_rbst := v_vp_mdl-n_le &
 [ ORTH < "daren't" >,
   SYNSEM [ LKEYS.KEYREL.PRED _dare_v_qmodal_rel,
            PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

dare_aux_neg_2_rbst := v_vp_mdl-n_le &
 [ ORTH < "daren", "'t" >,
   SYNSEM [ LKEYS.KEYREL.PRED _dare_v_qmodal_rel,
            PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

did1_neg_1 := v_vp_did-n_le &
 [ ORTH < "didn't" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

did1_neg_2 := v_vp_did-n_le &
 [ ORTH < "didn", "'t" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

did1_neg_1_rbst := v_vp_did-n_le &
 [ ORTH < "didn't" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

did1_neg_2_rbst := v_vp_did-n_le &
 [ ORTH < "didn", "'t" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

do1_neg_1 := v_vp_do-f-n_le &
 [ ORTH < "don't" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

do1_neg_2 := v_vp_do-f-n_le &
 [ ORTH < "don", "'t" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

do1_neg_1_rbst := v_vp_do-f-n_le &
 [ ORTH < "don't" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

do1_neg_2_rbst := v_vp_do-f-n_le &
 [ ORTH < "don", "'t" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

does1_neg_1 := v_vp_does-n_le &
 [ ORTH < "doesn't" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

does1_neg_2 := v_vp_does-n_le &
 [ ORTH < "doesn", "'t" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

does1_neg_1_rbst := v_vp_does-n_le &
 [ ORTH < "doesn't" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

does1_neg_2_rbst := v_vp_does-n_le &
 [ ORTH < "doesn", "'t" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

dont_1 := v_vp_dont-imp_le &
 [ ORTH < "don't" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

dont_2 := v_vp_dont-imp_le &
 [ ORTH < "don", "'t" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

dont_1_rbst := v_vp_dont-imp_le &
 [ ORTH < "don't" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

dont_2_rbst := v_vp_dont-imp_le &
 [ ORTH < "don", "'t" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

hadnt_aux_1 := v_vp_had-n_le &
 [ ORTH < "hadn't" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

hadnt_aux_2 := v_vp_had-n_le &
 [ ORTH < "hadn", "'t" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

hadnt_aux_1_rbst := v_vp_had-n_le &
 [ ORTH < "hadn't" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

hadnt_aux_2_rbst := v_vp_had-n_le &
 [ ORTH < "hadn", "'t" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

hadnt_aux_subj_1 := v_vp_had-n-sv_le &
 [ ORTH < "hadn't" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

hadnt_aux_subj_2 := v_vp_had-n-sv_le &
 [ ORTH < "hadn", "'t" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

hadnt_aux_subj_1_rbst := v_vp_had-n-sv_le &
 [ ORTH < "hadn't" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

hadnt_aux_subj_2_rbst := v_vp_had-n-sv_le &
 [ ORTH < "hadn", "'t" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

hasnt_aux_1 := v_vp_has-n_le &
 [ ORTH < "hasn't" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

hasnt_aux_2 := v_vp_has-n_le &
 [ ORTH < "hasn", "'t" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

hasnt_aux_1_rbst := v_vp_has-n_le &
 [ ORTH < "hasn't" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

hasnt_aux_2_rbst := v_vp_has-n_le &
 [ ORTH < "hasn", "'t" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

have_fin_aux_neg_1 := v_vp_have-f-n_le &
 [ ORTH < "haven't" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

have_fin_aux_neg_2 := v_vp_have-f-n_le &
 [ ORTH < "haven", "'t" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

have_fin_aux_neg_1_rbst := v_vp_have-f-n_le &
 [ ORTH < "haven't" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

have_fin_aux_neg_2_rbst := v_vp_have-f-n_le &
 [ ORTH < "haven", "'t" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

might_aux_neg_1 := v_vp_mdl-n-sv_le &
 [ ORTH < "mightn't" >,
   SYNSEM [ LKEYS.KEYREL.PRED _might_v_modal_rel,
            PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

might_aux_neg_2 := v_vp_mdl-n-sv_le &
 [ ORTH < "mightn", "'t" >,
   SYNSEM [ LKEYS.KEYREL.PRED _might_v_modal_rel,
            PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

might_aux_neg_1_rbst := v_vp_mdl-n-sv_le &
 [ ORTH < "mightn't" >,
   SYNSEM [ LKEYS.KEYREL.PRED _might_v_modal_rel,
            PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

might_aux_neg_2_rbst := v_vp_mdl-n-sv_le &
 [ ORTH < "mightn", "'t" >,
   SYNSEM [ LKEYS.KEYREL.PRED _might_v_modal_rel,
            PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

must_aux_neg_1 := v_vp_must-n_le &
 [ ORTH < "mustn't" >,
   SYNSEM [ LKEYS.KEYREL.PRED _must_v_modal_rel,
            PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

must_aux_neg_2 := v_vp_must-n_le &
 [ ORTH < "mustn", "'t" >,
   SYNSEM [ LKEYS.KEYREL.PRED _must_v_modal_rel,
            PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

must_aux_neg_1_rbst := v_vp_must-n_le &
 [ ORTH < "mustn't" >,
   SYNSEM [ LKEYS.KEYREL.PRED _must_v_modal_rel,
            PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

must_aux_neg_2_rbst := v_vp_must-n_le &
 [ ORTH < "mustn", "'t" >,
   SYNSEM [ LKEYS.KEYREL.PRED _must_v_modal_rel,
            PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

need_aux_neg_1 := v_vp_mdl-n_le &
 [ ORTH < "needn't" >,
   SYNSEM [ LKEYS.KEYREL.PRED _need_v_qmodal_rel,
            PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

need_aux_neg_2 := v_vp_mdl-n_le &
 [ ORTH < "needn", "'t" >,
   SYNSEM [ LKEYS.KEYREL.PRED _need_v_qmodal_rel,
            PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

need_aux_neg_1_rbst := v_vp_mdl-n_le &
 [ ORTH < "needn't" >,
   SYNSEM [ LKEYS.KEYREL.PRED _need_v_qmodal_rel,
            PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

need_aux_neg_2_rbst := v_vp_mdl-n_le &
 [ ORTH < "needn", "'t" >,
   SYNSEM [ LKEYS.KEYREL.PRED _need_v_qmodal_rel,
            PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

need_not_v2 := v_vp_ssr-n3sg_le &
 [ ORTH < "needn't" >,
   SYNSEM [ LKEYS [ ALTKEYREL.PRED neg_rel,
                    KEYREL.PRED "_need_v_1_rel" ],
            PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

need_not_v2 := v_vp_ssr-n3sg_le &
 [ ORTH < "needn", "'t" >,
   SYNSEM [ LKEYS [ ALTKEYREL.PRED neg_rel,
                    KEYREL.PRED "_need_v_1_rel" ],
            PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

need_not_v2_rbst := v_vp_ssr-n3sg_le &
 [ ORTH < "needn't" >,
   SYNSEM [ LKEYS [ ALTKEYREL.PRED neg_rel,
                    KEYREL.PRED "_need_v_1_rel" ],
            PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

need_not_v2_rbs2 := v_vp_ssr-n3sg_le &
 [ ORTH < "needn", "'t" >,
   SYNSEM [ LKEYS [ ALTKEYREL.PRED neg_rel,
                    KEYREL.PRED "_need_v_1_rel" ],
            PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

ought_aux_neg_1 := v_vp_oght-n_le &
 [ ORTH < "oughtn't" >,
   SYNSEM [ LKEYS.KEYREL.PRED _ought_v_qmodal_rel,
            PHON.ONSET voc,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

ought_aux_neg_2 := v_vp_oght-n_le &
 [ ORTH < "oughtn", "'t" >,
   SYNSEM [ LKEYS.KEYREL.PRED _ought_v_qmodal_rel,
            PHON.ONSET voc,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

ought_aux_neg_1_rbst := v_vp_oght-n_le &
 [ ORTH < "oughtn't" >,
   SYNSEM [ LKEYS.KEYREL.PRED _ought_v_qmodal_rel,
            PHON.ONSET voc,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

ought_aux_neg_2_rbst := v_vp_oght-n_le &
 [ ORTH < "oughtn", "'t" >,
   SYNSEM [ LKEYS.KEYREL.PRED _ought_v_qmodal_rel,
            PHON.ONSET voc,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

should_aux_neg_1 := v_vp_mdl-n-sv_le &
 [ ORTH < "shouldn't" >,
   SYNSEM [ LKEYS.KEYREL.PRED _should_v_modal_rel,
            PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

should_aux_neg_2 := v_vp_mdl-n-sv_le &
 [ ORTH < "shouldn", "'t" >,
   SYNSEM [ LKEYS.KEYREL.PRED _should_v_modal_rel,
            PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

should_aux_neg_1_rbst := v_vp_mdl-n-sv_le &
 [ ORTH < "shouldn't" >,
   SYNSEM [ LKEYS.KEYREL.PRED _should_v_modal_rel,
            PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

should_aux_neg_2_rbst := v_vp_mdl-n-sv_le &
 [ ORTH < "shouldn", "'t" >,
   SYNSEM [ LKEYS.KEYREL.PRED _should_v_modal_rel,
            PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

will_aux_neg_1 := v_vp_will-n_le &
 [ ORTH < "won't" >,
   SYNSEM [ LKEYS.KEYREL.PRED _will_v_aux_rel,
            PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

will_aux_neg_2 := v_vp_will-n_le &
 [ ORTH < "won", "'t" >,
   SYNSEM [ LKEYS.KEYREL.PRED _will_v_aux_rel,
            PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

will_aux_neg_1_rbst := v_vp_will-n_le &
 [ ORTH < "won't" >,
   SYNSEM [ LKEYS.KEYREL.PRED _will_v_aux_rel,
            PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

will_aux_neg_2_rbst := v_vp_will-n_le &
 [ ORTH < "won", "'t" >,
   SYNSEM [ LKEYS.KEYREL.PRED _will_v_aux_rel,
            PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

would_aux_neg_1 := v_vp_mdl-n_le &
 [ ORTH < "wouldn't" >,
   SYNSEM [ LKEYS.KEYREL.PRED _would_v_modal_rel,
            PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

would_aux_neg_2 := v_vp_mdl-n_le &
 [ ORTH < "wouldn", "'t" >,
   SYNSEM [ LKEYS.KEYREL.PRED _would_v_modal_rel,
            PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

would_aux_neg_1_rbst := v_vp_mdl-n_le &
 [ ORTH < "wouldn't" >,
   SYNSEM [ LKEYS.KEYREL.PRED _would_v_modal_rel,
            PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

would_aux_neg_2_rbst := v_vp_mdl-n_le &
 [ ORTH < "wouldn", "'t" >,
   SYNSEM [ LKEYS.KEYREL.PRED _would_v_modal_rel,
            PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL + ],
   GENRE robust ].

;; Proper names, for gender

aaron_n1 := n_-_pn-msc_le &
 [ ORTH < "Aaron" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Aaron",
            PHON.ONSET voc ] ].

abdul_n1 := n_-_pn-msc_le &
 [ ORTH < "Abdul" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Abdul",
            PHON.ONSET voc ] ].

abigail_n1 := n_-_pn-fem_le &
 [ ORTH < "Abigail" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Abigail",
            PHON.ONSET voc ] ].

adam_n1 := n_-_pn-msc_le &
 [ ORTH < "Adam" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Adam",
            PHON.ONSET voc ] ].

aisha_n1 := n_-_pn-fem_le &
 [ ORTH < "Aisha" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Aisha",
            PHON.ONSET voc ] ].

alaska_n1 := n_-_pn-neut_le &
 [ ORTH < "Alaska" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Alaska",
            PHON.ONSET voc ] ].

albania_n1 := n_-_pn-neut_le &
 [ ORTH < "Albania" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Albania",
            PHON.ONSET voc ] ].

alejandro_n1 := n_-_pn-msc_le &
 [ ORTH < "Alejandro" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Alejandro",
            PHON.ONSET voc ] ].

alex_n1 := n_-_pn-msc_le &
 [ ORTH < "Alex" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Alex",
            PHON.ONSET voc ] ].

alexandra_n1 := n_-_pn-fem_le &
 [ ORTH < "Alexandra" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Alexandra",
            PHON.ONSET voc ] ].

alicia_n1 := n_-_pn-fem_le &
 [ ORTH < "Alicia" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Alicia",
            PHON.ONSET voc ] ].

amanda := n_-_pn-fem_le &
 [ ORTH < "Amanda" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Amanda",
            PHON.ONSET voc ] ].

amara_n1 := n_-_pn-fem_le &
 [ ORTH < "Amara" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Amara",
            PHON.ONSET voc ] ].

amber_n1 := n_-_pn-fem_le &
 [ ORTH < "Amber" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Amber",
            PHON.ONSET voc ] ].

amelia_n1 := n_-_pn-fem_le &
 [ ORTH < "Amelia" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Amelia",
            PHON.ONSET voc ] ].

amit_n1 := n_-_pn-fem_le &
 [ ORTH < "Amit" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Amit",
            PHON.ONSET voc ] ].

amy_n1 := n_-_pn-fem_le &
 [ ORTH < "Amy" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Amy",
            PHON.ONSET voc ] ].

ana_n1 := n_-_pn-fem_le &
 [ ORTH < "Ana" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Ana",
            PHON.ONSET voc ] ].

andre_n1 := n_-_pn-msc_le &
 [ ORTH < "Andre" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Andre",
            PHON.ONSET voc ] ].

andrew_n1 := n_-_pn-msc_le &
 [ ORTH < "Andrew" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Andrew",
            PHON.ONSET voc ] ].

angela_n1 := n_-_pn-fem_le &
 [ ORTH < "Angela" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Angela",
            PHON.ONSET voc ] ].

angelina_n1 := n_-_pn-fem_le &
 [ ORTH < "Angelina" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Angelina",
            PHON.ONSET voc ] ].

anita_n1 := n_-_pn-fem_le &
 [ ORTH < "Anita" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Anita",
            PHON.ONSET voc ] ].

ann_n1 := n_-_pn-fem_le &
 [ ORTH < "Ann" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Ann",
            PHON.ONSET voc ] ].

anna_n1 := n_-_pn-fem_le &
 [ ORTH < "Anna" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Anna",
            PHON.ONSET voc ] ].

anne := n_-_pn-fem_le &
 [ ORTH < "Anne" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Anne",
            PHON.ONSET voc ] ].

anthony_n1 := n_-_pn-msc_le &
 [ ORTH < "Anthony" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Anthony",
            PHON.ONSET voc ] ].

antonia_n1 := n_-_pn-fem_le &
 [ ORTH < "Antonia" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Antonia",
            PHON.ONSET voc ] ].

antonio_n1 := n_-_pn-msc_le &
 [ ORTH < "Antonio" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Antonio",
            PHON.ONSET voc ] ].

ariana_n1 := n_-_pn-fem_le &
 [ ORTH < "Ariana" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Ariana",
            PHON.ONSET voc ] ].

arizona_n1 := n_-_pn-neut_le &
 [ ORTH < "Arizona" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Arizona",
            PHON.ONSET voc ] ].

arnold_n1 := n_-_pn-msc_le &
 [ ORTH < "Arnold" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Arnold",
            PHON.ONSET voc ] ].

ashley_n1 := n_-_pn-fem_le &
 [ ORTH < "Ashley" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Ashley",
            PHON.ONSET voc ] ].

audrey_n1 := n_-_pn-fem_le &
 [ ORTH < "Audrey" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Audrey",
            PHON.ONSET voc ] ].

ava_n1 := n_-_pn-fem_le &
 [ ORTH < "Ava" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Ava",
            PHON.ONSET voc ] ].

beaver_n1 := n_-_pn-msc_le &
 [ ORTH < "Beaver" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Beaver",
            PHON.ONSET con ] ].

beezus_n1 := n_-_pn-msc_le &
 [ ORTH < "Beezus" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Beezus",
            PHON.ONSET con ] ].

ben_n1 := n_-_pn-msc_le &
 [ ORTH < "Ben" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Ben",
            PHON.ONSET con ] ].

bermuda_n1 := n_-_pn-neut_le &
 [ ORTH < "Bermuda" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Bermuda",
            PHON.ONSET con ] ].

bill_n3 := n_-_pn-msc_le &
 [ ORTH < "Bill" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Bill",
            PHON.ONSET con ] ].

blake_n1 := n_-_pn-msc_le &
 [ ORTH < "Blake" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Blake",
            PHON.ONSET con ] ].

bob := n_-_pn-msc_le &
 [ ORTH < "Bob" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Bob",
            PHON.ONSET con ] ].

boris_n1 := n_-_pn-msc_le &
 [ ORTH < "Boris" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Boris",
            PHON.ONSET con ] ].

brad_n1 := n_-_pn-msc_le &
 [ ORTH < "Brad" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Brad",
            PHON.ONSET con ] ].

brahman_n1 := n_-_c-nm_le &
 [ ORTH < "Brahman" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Brahman",
            LOCAL.CONT.HOOK.INDEX.PNG.GEN masc,
            PHON.ONSET con ] ].

brandon_n1 := n_-_pn-msc_le &
 [ ORTH < "Brandon" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Brandon",
            PHON.ONSET con ] ].

brianna_n1 := n_-_pn-fem_le &
 [ ORTH < "Brianna" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Brianna",
            PHON.ONSET con ] ].

bryan_n1 := n_-_pn-msc_le &
 [ ORTH < "Bryan" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Bryan",
            PHON.ONSET con ] ].

caleb_n1 := n_-_pn-msc_le &
 [ ORTH < "Caleb" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Caleb",
            PHON.ONSET con ] ].

california_n1 := n_-_pn-neut_le &
 [ ORTH < "California" >,
   SYNSEM [ LKEYS.KEYREL.CARG "California",
            PHON.ONSET con ] ].

canada_n1 := n_-_pn-neut_le &
 [ ORTH < "Canada" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Canada",
            PHON.ONSET con ] ].

candace_n1 := n_-_pn-fem_le &
 [ ORTH < "Candace" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Candace",
            PHON.ONSET con ] ].

carlos_n1 := n_-_pn-msc_le &
 [ ORTH < "Carlos" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Carlos",
            PHON.ONSET con ] ].

carly_n1 := n_-_pn-fem_le &
 [ ORTH < "Carly" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Carly",
            PHON.ONSET con ] ].

caroline_n1 := n_-_pn-fem_le &
 [ ORTH < "Caroline" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Caroline",
            PHON.ONSET con ] ].

carter_n1 := n_-_pn-msc_le &
 [ ORTH < "Carter" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Carter",
            PHON.ONSET con ] ].

cathy_n1 := n_-_pn-fem_le &
 [ ORTH < "Cathy" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Cathy",
            PHON.ONSET con ] ].

cesar_n1 := n_-_pn-msc_le &
 [ ORTH < "Cesar" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Cesar",
            PHON.ONSET con ] ].

charles_n1 := n_-_pn-msc_le &
 [ ORTH < "Charles" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Charles",
            PHON.ONSET con ] ].

china_n1 := n_-_pn-neut_le &
 [ ORTH < "China" >,
   SYNSEM [ LKEYS.KEYREL.CARG "China",
            PHON.ONSET con ] ].

chloe_n1 := n_-_pn-fem_le &
 [ ORTH < "Chloe" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Chloe",
            PHON.ONSET con ] ].

christian_n2 := n_-_pn-msc_le &
 [ ORTH < "Christian" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Christian",
            PHON.ONSET con ] ].

christina_n1 := n_-_pn-fem_le &
 [ ORTH < "Christina" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Christina",
            PHON.ONSET con ] ].

christopher_n1 := n_-_pn-msc_le &
 [ ORTH < "Christopher" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Christopher",
            PHON.ONSET con ] ].

cid_n1 := n_-_pn-msc_le &
 [ ORTH < "Cid" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Cid",
            PHON.ONSET con ] ].

cinderella_n1 := n_-_pn-fem_le &
 [ ORTH < "Cinderella" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Cinderella",
            PHON.ONSET con ] ].

cindy_n1 := n_-_pn-fem_le &
 [ ORTH < "Cindy" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Cindy",
            PHON.ONSET con ] ].

claire_n1 := n_-_pn-fem_le &
 [ ORTH < "Claire" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Claire",
            PHON.ONSET con ] ].

clarence_n1 := n_-_pn-msc_le &
 [ ORTH < "Clarence" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Clarence",
            PHON.ONSET con ] ].

claudia_n1 := n_-_pn-fem_le &
 [ ORTH < "Claudia" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Claudia",
            PHON.ONSET con ] ].

cody_n1 := n_-_pn-msc_le &
 [ ORTH < "Cody" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Cody",
            PHON.ONSET con ] ].

colin_n1 := n_-_pn-msc_le &
 [ ORTH < "Colin" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Colin",
            PHON.ONSET con ] ].

cooper_n1 := n_-_pn-msc_le &
 [ ORTH < "Cooper" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Cooper",
            PHON.ONSET con ] ].

cub_n2 := n_-_pn-msc_le &
 [ ORTH < "Cub" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Cub",
            PHON.ONSET con ] ].

curtis_n1 := n_-_pn-msc_le &
 [ ORTH < "Curtis" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Curtis",
            PHON.ONSET con ] ].

cyclops_n1 := n_-_c-nm_le &
 [ ORTH < "Cyclops" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Cyclops",
            LOCAL.CONT.HOOK.INDEX.PNG.GEN masc,
            PHON.ONSET con ] ].

daisy_n1 := n_-_pn-fem_le &
 [ ORTH < "Daisy" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Daisy",
            PHON.ONSET con ] ].

darryl_n1 := n_-_pn-msc_le &
 [ ORTH < "Darryl" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Darryl",
            PHON.ONSET con ] ].

david_n1 := n_-_pn-msc_le &
 [ ORTH < "David" >,
   SYNSEM [ LKEYS.KEYREL.CARG "David",
            PHON.ONSET con ] ].

deborah_n1 := n_-_pn-fem_le &
 [ ORTH < "Deborah" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Deborah",
            PHON.ONSET con ] ].

delaware_n1 := n_-_pn-neut_le &
 [ ORTH < "Delaware" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Delaware",
            PHON.ONSET con ] ].

dennis_n1 := n_-_pn-msc_le &
 [ ORTH < "Dennis" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Dennis",
            PHON.ONSET con ] ].

destiny_n2 := n_-_pn-fem_le &
 [ ORTH < "Destiny" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Destiny",
            PHON.ONSET con ] ].

diana_n1 := n_-_pn-fem_le &
 [ ORTH < "Diana" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Diana",
            PHON.ONSET con ] ].

diego_n1 := n_-_pn-msc_le &
 [ ORTH < "Diego" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Diego",
            PHON.ONSET con ] ].

donna_n1 := n_-_pn-fem_le &
 [ ORTH < "Donna" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Donna",
            PHON.ONSET con ] ].

dylan_n1 := n_-_pn-msc_le &
 [ ORTH < "Dylan" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Dylan",
            PHON.ONSET con ] ].

eddie_n1 := n_-_pn-msc_le &
 [ ORTH < "Eddie" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Eddie",
            PHON.ONSET voc ] ].

edgar_n1 := n_-_pn-msc_le &
 [ ORTH < "Edgar" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Edgar",
            PHON.ONSET voc ] ].

eduardo_n1 := n_-_pn-msc_le &
 [ ORTH < "Eduardo" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Eduardo",
            PHON.ONSET voc ] ].

elba_n1 := n_-_pn-fem_le &
 [ ORTH < "Elba" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Elba",
            PHON.ONSET voc ] ].

elena_n1 := n_-_pn-fem_le &
 [ ORTH < "Elena" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Elena",
            PHON.ONSET voc ] ].

elijah_n1 := n_-_pn-msc_le &
 [ ORTH < "Elijah" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Elijah",
            PHON.ONSET voc ] ].

ella_n1 := n_-_pn-fem_le &
 [ ORTH < "Ella" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Ella",
            PHON.ONSET voc ] ].

ellen_n1 := n_-_pn-fem_le &
 [ ORTH < "Ellen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Ellen",
            PHON.ONSET voc ] ].

emily_n1 := n_-_pn-fem_le &
 [ ORTH < "Emily" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Emily",
            PHON.ONSET voc ] ].

elena_n1 := n_-_pn-fem_le &
 [ ORTH < "Elena" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Elena",
            PHON.ONSET voc ] ].

elijah_n1 := n_-_pn-msc_le &
 [ ORTH < "Elijah" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Elijah",
            PHON.ONSET voc ] ].

ella_n1 := n_-_pn-fem_le &
 [ ORTH < "Ella" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Ella",
            PHON.ONSET voc ] ].

ellen_n1 := n_-_pn-fem_le &
 [ ORTH < "Ellen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Ellen",
            PHON.ONSET voc ] ].

emily_n1 := n_-_pn-fem_le &
 [ ORTH < "Emily" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Emily",
            PHON.ONSET voc ] ].

english_n1 := n_-_pn-neut_le &
 [ ORTH < "English" >,
   SYNSEM [ LKEYS.KEYREL.CARG "English",
            PHON.ONSET voc ] ].

eric_n1 := n_-_pn-msc_le &
 [ ORTH < "Eric" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Eric",
            PHON.ONSET voc ] ].

ernie_n1 := n_-_pn-msc_le &
 [ ORTH < "Ernie" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Ernie",
            PHON.ONSET voc ] ].

ethan_n1 := n_-_pn-msc_le &
 [ ORTH < "Ethan" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Ethan",
            PHON.ONSET voc ] ].

evelyn_n1 := n_-_pn-fem_le &
 [ ORTH < "Evelyn" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Evelyn",
            PHON.ONSET voc ] ].

faith_n2 := n_-_pn-fem_le &
 [ ORTH < "Faith" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Faith",
            PHON.ONSET con ] ].

felix_n1 := n_-_pn-msc_le &
 [ ORTH < "Felix" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Felix",
            PHON.ONSET con ] ].

fernando_n1 := n_-_pn-msc_le &
 [ ORTH < "Fernando" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Fernando",
            PHON.ONSET con ] ].

florida_n1 := n_-_pn-neut_le &
 [ ORTH < "Florida" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Florida",
            PHON.ONSET con ] ].

france_n1 := n_-_pn-neut_le &
 [ ORTH < "France" >,
   SYNSEM [ LKEYS.KEYREL.CARG "France",
            PHON.ONSET con ] ].

francisco_n1 := n_-_pn-msc_le &
 [ ORTH < "Francisco" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Francisco",
            PHON.ONSET con ] ].

frank_n1 := n_-_pn-msc_le &
 [ ORTH < "Frank" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Frank",
            PHON.ONSET con ] ].

fred_n1 := n_-_pn-msc_le &
 [ ORTH < "Fred" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Fred",
            PHON.ONSET con ] ].

french_n1 := n_-_pn-nocnh_le &
 [ ORTH < "French" >,
   SYNSEM [ LKEYS.KEYREL.CARG "French",
            PHON.ONSET con ] ].

gabe_n1 := n_-_pn-msc_le &
 [ ORTH < "Gabe" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Gabe",
            PHON.ONSET con ] ].

gabriella_n1 := n_-_pn-fem_le &
 [ ORTH < "Gabriella" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Gabriella",
            PHON.ONSET con ] ].

gary_n1 := n_-_pn-msc_le &
 [ ORTH < "Gary" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Gary",
            PHON.ONSET con ] ].

george_n1 := n_-_pn-msc_le &
 [ ORTH < "George" >,
   SYNSEM [ LKEYS.KEYREL.CARG "George",
            PHON.ONSET con ] ].

gina_n1 := n_-_pn-fem_le &
 [ ORTH < "Gina" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Gina",
            PHON.ONSET con ] ].

grace_n2 := n_-_pn-fem_le &
 [ ORTH < "Grace" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Grace",
            PHON.ONSET con ] ].

gracie_n1 := n_-_pn-fem_le &
 [ ORTH < "Gracie" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Gracie",
            PHON.ONSET con ] ].

greg_n1 := n_-_pn-msc_le &
 [ ORTH < "Greg" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Greg",
            PHON.ONSET con ] ].

hailey_n1 := n_-_pn-msc_le &
 [ ORTH < "Hailey" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Hailey",
            PHON.ONSET con ] ].

hannah_n1 := n_-_pn-fem_le &
 [ ORTH < "Hannah" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Hannah",
            PHON.ONSET con ] ].

hawaii_n1 := n_-_pn-neut_le &
 [ ORTH < "Hawaii" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Hawaii",
            PHON.ONSET con ] ].

heather_n2 := n_-_pn-fem_le &
 [ ORTH < "Heather" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Heather",
            PHON.ONSET con ] ].

henry_n1 := n_-_pn-msc_le &
 [ ORTH < "Henry" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Henry",
            PHON.ONSET con ] ].

hillary := n_-_pn-fem_le &
 [ ORTH < "Hillary" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Hillary",
            PHON.ONSET con ] ].

ian := n_-_pn-msc_le &
 [ ORTH < "Ian" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Ian",
            PHON.ONSET voc ] ].

irene_n1 := n_-_pn-fem_le &
 [ ORTH < "Irene" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Irene",
            PHON.ONSET voc ] ].

isaac_n1 := n_-_pn-msc_le &
 [ ORTH < "Isaac" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Isaac",
            PHON.ONSET voc ] ].

isabella_n1 := n_-_pn-fem_le &
 [ ORTH < "Isabella" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Isabella",
            PHON.ONSET voc ] ].

israel_n1 := n_-_pn-neut_le &
 [ ORTH < "Israel" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Israel",
            PHON.ONSET voc ] ].

italy_n1 := n_-_pn-neut_le &
 [ ORTH < "Italy" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Italy",
            PHON.ONSET voc ] ].

ivan_n1 := n_-_pn-msc_le &
 [ ORTH < "Ivan" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Ivan",
            PHON.ONSET voc ] ].

jack_n2 := n_-_pn-msc_le &
 [ ORTH < "Jack" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Jack",
            PHON.ONSET con ] ].

jackie_n1 := n_-_pn-fem_le &
 [ ORTH < "Jackie" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Jackie",
            PHON.ONSET con ] ].

jacob_n1 := n_-_pn-msc_le &
 [ ORTH < "Jacob" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Jacob",
            PHON.ONSET con ] ].

jada_n1 := n_-_pn-fem_le &
 [ ORTH < "Jada" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Jada",
            PHON.ONSET con ] ].

james := n_-_pn-msc_le &
 [ ORTH < "James" >,
   SYNSEM [ LKEYS.KEYREL.CARG "James",
            PHON.ONSET con ] ].

jane_n1 := n_-_pn-fem_le &
 [ ORTH < "Jane" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Jane",
            PHON.ONSET con ] ].

japan_n1 := n_-_pn-neut_le &
 [ ORTH < "Japan" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Japan",
            PHON.ONSET con ] ].

japanese_n1 := n_-_pn-neut_le &
 [ ORTH < "Japanese" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Japanese",
            PHON.ONSET con ] ].

jason_n1 := n_-_pn-msc_le &
 [ ORTH < "Jason" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Jason",
            PHON.ONSET con ] ].

jazmin_n1 := n_-_pn-fem_le &
 [ ORTH < "Jazmin" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Jazmin",
            PHON.ONSET con ] ].

jeff_n1 := n_-_pn-msc_le &
 [ ORTH < "Jeff" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Jeff",
            PHON.ONSET con ] ].

jennifer_n1 := n_-_pn-fem_le &
 [ ORTH < "Jennifer" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Jennifer",
            PHON.ONSET con ] ].

jenny_n1 := n_-_pn-fem_le &
 [ ORTH < "Jenny" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Jenny",
            PHON.ONSET con ] ].

jerome_n1 := n_-_pn-msc_le &
 [ ORTH < "Jerome" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Jerome",
            PHON.ONSET con ] ].

jesse_n1 := n_-_pn-msc_le &
 [ ORTH < "Jesse" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Jesse",
            PHON.ONSET con ] ].

jessica := n_-_pn-fem_le &
 [ ORTH < "Jessica" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Jessica",
            PHON.ONSET con ] ].

jim := n_-_pn-msc_le &
 [ ORTH < "Jim" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Jim",
            PHON.ONSET con ] ].

jin_n1 := n_-_pn-fem_le &
 [ ORTH < "Jin" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Jin",
            PHON.ONSET con ] ].

joe_n1 := n_-_pn-msc_le &
 [ ORTH < "Joe" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Joe",
            PHON.ONSET con ] ].

john := n_-_pn-msc_le &
 [ ORTH < "John" >,
   SYNSEM [ LKEYS.KEYREL.CARG "John",
            PHON.ONSET con ] ].

jorge_n1 := n_-_pn-msc_le &
 [ ORTH < "Jorge" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Jorge",
            PHON.ONSET con ] ].

jose_n1 := n_-_pn-msc_le &
 [ ORTH < "Jose" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Jose",
            PHON.ONSET con ] ].

joseph_n1 := n_-_pn-msc_le &
 [ ORTH < "Joseph" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Joseph",
            PHON.ONSET con ] ].

josh_n1 := n_-_pn-msc_le &
 [ ORTH < "Josh" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Josh",
            PHON.ONSET con ] ].

juan_n1 := n_-_pn-msc_le &
 [ ORTH < "Juan" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Juan",
            PHON.ONSET con ] ].

julia_n1 := n_-_pn-fem_le &
 [ ORTH < "Julia" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Julia",
            PHON.ONSET con ] ].

julian_n1 := n_-_pn-msc_le &
 [ ORTH < "Julian" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Julian",
            PHON.ONSET con ] ].

juliet_n1 := n_-_pn-fem_le &
 [ ORTH < "Juliet" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Juliet",
            PHON.ONSET con ] ].

justin_n1 := n_-_pn-msc_le &
 [ ORTH < "Justin" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Justin",
            PHON.ONSET con ] ].

kali_n1 := n_-_pn-fem_le &
 [ ORTH < "Kali" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Kali",
            PHON.ONSET con ] ].

karen_n1 := n_-_pn-fem_le &
 [ ORTH < "Karen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Karen",
            PHON.ONSET con ] ].

kate_n1 := n_-_pn-fem_le &
 [ ORTH < "Kate" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Kate",
            PHON.ONSET con ] ].

katelyn_n1 := n_-_pn-fem_le &
 [ ORTH < "Katelyn" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Katelyn",
            PHON.ONSET con ] ].

katherine_n1 := n_-_pn-fem_le &
 [ ORTH < "Katherine" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Katherine",
            PHON.ONSET con ] ].

kathy_n1 := n_-_pn-fem_le &
 [ ORTH < "Kathy" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Kathy",
            PHON.ONSET con ] ].

katrina_n1 := n_-_pn-fem_le &
 [ ORTH < "Katrina" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Katrina",
            PHON.ONSET con ] ].

kayla_n1 := n_-_pn-fem_le &
 [ ORTH < "Kayla" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Kayla",
            PHON.ONSET con ] ].

kaylee_n1 := n_-_pn-fem_le &
 [ ORTH < "Kaylee" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Kaylee",
            PHON.ONSET con ] ].

keiko_n1 := n_-_pn-fem_le &
 [ ORTH < "Keiko" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Keiko",
            PHON.ONSET con ] ].

ken_n1 := n_-_pn-msc_le &
 [ ORTH < "Ken" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Ken",
            PHON.ONSET con ] ].

kevin_n1 := n_-_pn-msc_le &
 [ ORTH < "Kevin" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Kevin",
            PHON.ONSET con ] ].

khalil_n1 := n_-_pn-msc_le &
 [ ORTH < "Khalil" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Khalil",
            PHON.ONSET con ] ].

kia_n1 := n_-_pn-fem_le &
 [ ORTH < "Kia" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Kia",
            PHON.ONSET con ] ].

kiki_n1 := n_-_pn-fem_le &
 [ ORTH < "Kiki" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Kiki",
            PHON.ONSET con ] ].

kima_n1 := n_-_pn-fem_le &
 [ ORTH < "Kima" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Kima",
            PHON.ONSET con ] ].

kyle_n1 := n_-_pn-msc_le &
 [ ORTH < "Kyle" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Kyle",
            PHON.ONSET con ] ].

laura_n1 := n_-_pn-fem_le &
 [ ORTH < "Laura" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Laura",
            PHON.ONSET con ] ].

layla_n1 := n_-_pn-fem_le &
 [ ORTH < "Layla" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Layla",
            PHON.ONSET con ] ].

leah_n1 := n_-_pn-fem_le &
 [ ORTH < "Leah" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Leah",
            PHON.ONSET con ] ].

lewis_n1 := n_-_pn-msc_le &
 [ ORTH < "Lewis" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Lewis",
            PHON.ONSET con ] ].

liam_n1 := n_-_pn-msc_le &
 [ ORTH < "Liam" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Liam",
            PHON.ONSET con ] ].

lilah_n1 := n_-_pn-fem_le &
 [ ORTH < "Lilah" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Lilah",
            PHON.ONSET con ] ].

lillian_n1 := n_-_pn-fem_le &
 [ ORTH < "Lillian" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Lillian",
            PHON.ONSET con ] ].

lily_n2 := n_-_pn-fem_le &
 [ ORTH < "Lily" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Lily",
            PHON.ONSET con ] ].

linda_n1 := n_-_pn-fem_le &
 [ ORTH < "Linda" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Linda",
            PHON.ONSET con ] ].

lisa_n1 := n_-_pn-fem_le &
 [ ORTH < "Lisa" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Lisa",
            PHON.ONSET con ] ].

liz_n1 := n_-_pn-fem_le &
 [ ORTH < "Liz" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Liz",
            PHON.ONSET con ] ].

lola := n_-_pn-fem_le &
 [ ORTH < "Lola" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Lola",
            PHON.ONSET con ] ].

london_n1 := n_-_pn-neut_le &
 [ ORTH < "London" >,
   SYNSEM [ LKEYS.KEYREL.CARG "London",
            PHON.ONSET con ] ].

loretta_n1 := n_-_pn-fem_le &
 [ ORTH < "Loretta" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Loretta",
            PHON.ONSET con ] ].

luke_n1 := n_-_pn-msc_le &
 [ ORTH < "Luke" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Luke",
            PHON.ONSET con ] ].

lydia_n1 := n_-_pn-fem_le &
 [ ORTH < "Lydia" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Lydia",
            PHON.ONSET con ] ].

ma_n1 := n_-_pn-fem_le &
 [ ORTH < "Ma" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Ma",
            PHON.ONSET con ] ].

madeline_n1 := n_-_pn-fem_le &
 [ ORTH < "Madeline" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Madeline",
            PHON.ONSET con ] ].

maggie_n1 := n_-_pn-fem_le &
 [ ORTH < "Maggie" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Maggie",
            PHON.ONSET con ] ].

maia_n1 := n_-_pn-fem_le &
 [ ORTH < "Maia" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Maia",
            PHON.ONSET con ] ].

malia_n1 := n_-_pn-fem_le &
 [ ORTH < "Malia" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Malia",
            PHON.ONSET con ] ].

mandela_n1 := n_-_pn-msc_le &
 [ ORTH < "Mandela" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Mandela",
            PHON.ONSET con ] ].

manuel_n1 := n_-_pn-msc_le &
 [ ORTH < "Manuel" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Manuel",
            PHON.ONSET con ] ].

marcos_n1 := n_-_pn-msc_le &
 [ ORTH < "Marcos" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Marcos",
            PHON.ONSET con ] ].

maria_n1 := n_-_pn-fem_le &
 [ ORTH < "Maria" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Maria",
            PHON.ONSET con ] ].

mariah_n1 := n_-_pn-fem_le &
 [ ORTH < "Mariah" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Mariah",
            PHON.ONSET con ] ].

mario_n1 := n_-_pn-msc_le &
 [ ORTH < "Mario" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Mario",
            PHON.ONSET con ] ].

marisa := n_-_pn-fem_le &
 [ ORTH < "Marisa" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Marisa",
            PHON.ONSET con ] ].

marissa_n1 := n_-_pn-fem_le &
 [ ORTH < "Marissa" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Marissa",
            PHON.ONSET con ] ].

mark_n1 := n_-_pn-msc_le &
 [ ORTH < "Mark" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Mark",
            PHON.ONSET con ] ].

mary := n_-_pn-fem_le &
 [ ORTH < "Mary" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Mary",
            PHON.ONSET con ] ].

masha_n1 := n_-_pn-fem_le &
 [ ORTH < "Masha" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Masha",
            PHON.ONSET con ] ].

matilda_n1 := n_-_pn-fem_le &
 [ ORTH < "Matilda" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Matilda",
            PHON.ONSET con ] ].

matt := n_-_pn-msc_le &
 [ ORTH < "Matt" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Matt",
            PHON.ONSET con ] ].

max_n1 := n_-_pn-msc_le &
 [ ORTH < "Max" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Max",
            PHON.ONSET con ] ].

maya_n1 := n_-_pn-fem_le &
 [ ORTH < "Maya" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Maya",
            PHON.ONSET con ] ].

medina_n1 := n_-_pn-fem_le &
 [ ORTH < "Medina" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Medina",
            PHON.ONSET con ] ].

megan_n1 := n_-_pn-fem_le &
 [ ORTH < "Megan" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Megan",
            PHON.ONSET con ] ].

melanie_n1 := n_-_pn-fem_le &
 [ ORTH < "Melanie" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Melanie",
            PHON.ONSET con ] ].

melissa_n1 := n_-_pn-fem_le &
 [ ORTH < "Melissa" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Melissa",
            PHON.ONSET con ] ].

mexico_n1 := n_-_pn-neut_le &
 [ ORTH < "Mexico" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Mexico",
            PHON.ONSET con ] ].

mia_n1 := n_-_pn-fem_le &
 [ ORTH < "Mia" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Mia",
            PHON.ONSET con ] ].

miami_n1 := n_-_pn-neut_le &
 [ ORTH < "Miami" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Miami",
            PHON.ONSET con ] ].

michael_n1 := n_-_pn-msc_le &
 [ ORTH < "Michael" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Michael",
            PHON.ONSET con ] ].

michigan_n1 := n_-_pn-neut_le &
 [ ORTH < "Michigan" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Michigan",
            PHON.ONSET con ] ].

mike_n1 := n_-_pn-msc_le &
 [ ORTH < "Mike" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Mike",
            PHON.ONSET con ] ].

miles_n1 := n_-_pn-msc_le &
 [ ORTH < "Miles" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Miles",
            PHON.ONSET con ] ].

minnesota_n1 := n_-_pn-neut_le &
 [ ORTH < "Minnesota" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Minnesota",
            PHON.ONSET con ] ].

misty_n1 := n_-_pn-fem_le &
 [ ORTH < "Misty" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Misty",
            PHON.ONSET con ] ].

molly_n1 := n_-_pn-fem_le &
 [ ORTH < "Molly" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Molly",
            PHON.ONSET con ] ].

monica_n1 := n_-_pn-fem_le &
 [ ORTH < "Monica" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Monica",
            PHON.ONSET con ] ].

nadia_n1 := n_-_pn-fem_le &
 [ ORTH < "Nadia" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Nadia",
            PHON.ONSET con ] ].

nancy_n1 := n_-_pn-fem_le &
 [ ORTH < "Nancy" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Nancy",
            PHON.ONSET con ] ].

naomi_n1 := n_-_pn-fem_le &
 [ ORTH < "Naomi" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Naomi",
            PHON.ONSET con ] ].

natalie_n1 := n_-_pn-fem_le &
 [ ORTH < "Natalie" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Natalie",
            PHON.ONSET con ] ].

natasha_n1 := n_-_pn-fem_le &
 [ ORTH < "Natasha" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Natasha",
            PHON.ONSET con ] ].

nebraska_n1 := n_-_pn-neut_le &
 [ ORTH < "Nebraska" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Nebraska",
            PHON.ONSET con ] ].

new_mexico_n1 := n_-_pn-neut_le &
 [ ORTH < "New", "Mexico" >,
   SYNSEM [ LKEYS.KEYREL.CARG "New+Mexico",
            PHON.ONSET con ] ].

nick_n1 := n_-_pn-msc_le &
 [ ORTH < "Nick" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Nick",
            PHON.ONSET con ] ].

nicole_n1 := n_-_pn-fem_le &
 [ ORTH < "Nicole" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Nicole",
            PHON.ONSET con ] ].

nilda_n1 := n_-_pn-fem_le &
 [ ORTH < "Nilda" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Nilda",
            PHON.ONSET con ] ].

nina_n1 := n_-_pn-fem_le &
 [ ORTH < "Nina" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Nina",
            PHON.ONSET con ] ].

nokomis_n1 := n_-_pn-fem_le &
 [ ORTH < "Nokomis" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Nokomis",
            PHON.ONSET con ] ].

nora_n1 := n_-_pn-fem_le &
 [ ORTH < "Nora" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Nora",
            PHON.ONSET con ] ].

odysseus_n1 := n_-_pn-msc_le &
 [ ORTH < "Odysseus" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Odysseus",
            PHON.ONSET voc ] ].

oliver_n1 := n_-_pn-msc_le &
 [ ORTH < "Oliver" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Oliver",
            PHON.ONSET voc ] ].

olivia_n1 := n_-_pn-fem_le &
 [ ORTH < "Olivia" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Olivia",
            PHON.ONSET voc ] ].

omakayas_n1 := n_-_pn-fem_le &
 [ ORTH < "Omakayas" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Omakayas",
            PHON.ONSET voc ] ].

omar_n1 := n_-_pn-msc_le &
 [ ORTH < "Omar" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Omar",
            PHON.ONSET voc ] ].

orlando_n1 := n_-_pn-msc_le &
 [ ORTH < "Orlando" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Orlando",
            PHON.ONSET voc ] ].

oscar_n1 := n_-_pn-msc_le &
 [ ORTH < "Oscar" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Oscar",
            PHON.ONSET voc ] ].

pa_n1 := n_-_pn-msc_le &
 [ ORTH < "Pa" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Pa",
            PHON.ONSET con ] ].

pam_n1 := n_-_pn-fem_le &
 [ ORTH < "Pam" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Pam",
            PHON.ONSET con ] ].

patricia_n1 := n_-_pn-fem_le &
 [ ORTH < "Patricia" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Patricia",
            PHON.ONSET con ] ].

patrick_n1 := n_-_pn-msc_le &
 [ ORTH < "Patrick" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Patrick",
            PHON.ONSET con ] ].

paula := n_-_pn-fem_le &
 [ ORTH < "Paula" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Paula",
            PHON.ONSET con ] ].

paulina_n1 := n_-_pn-fem_le &
 [ ORTH < "Paulina" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Paulina",
            PHON.ONSET con ] ].

pedro_n1 := n_-_pn-msc_le &
 [ ORTH < "Pedro" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Pedro",
            PHON.ONSET con ] ].

puebla_n1 := n_-_pn-neut_le &
 [ ORTH < "Puebla" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Puebla",
            PHON.ONSET con ] ].

puerto_rico_n1 := n_-_pn-neut_le &
 [ ORTH < "Puerto", "Rico" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Puerto+Rico",
            PHON.ONSET con ] ].

rachel_n1 := n_-_pn-fem_le &
 [ ORTH < "Rachel" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Rachel",
            PHON.ONSET con ] ].

ramona_n1 := n_-_pn-fem_le &
 [ ORTH < "Ramona" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Ramona",
            PHON.ONSET con ] ].

raul_n1 := n_-_pn-msc_le &
 [ ORTH < "Raul" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Raul",
            PHON.ONSET con ] ].

rebecca_n1 := n_-_pn-fem_le &
 [ ORTH < "Rebecca" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Rebecca",
            PHON.ONSET con ] ].

ricardo_n1 := n_-_pn-msc_le &
 [ ORTH < "Ricardo" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Ricardo",
            PHON.ONSET con ] ].

richard_n1 := n_-_pn-msc_le &
 [ ORTH < "Richard" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Richard",
            PHON.ONSET con ] ].

richmond_n1 := n_-_pn-neut_le &
 [ ORTH < "Richmond" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Richmond",
            PHON.ONSET con ] ].

ricky_n1 := n_-_pn-msc_le &
 [ ORTH < "Ricky" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Ricky",
            PHON.ONSET con ] ].

rico_n1 := n_-_pn-msc_le &
 [ ORTH < "Rico" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Rico",
            PHON.ONSET con ] ].

rita_n1 := n_-_pn-fem_le &
 [ ORTH < "Rita" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Rita",
            PHON.ONSET con ] ].

roger_n1 := n_-_pn-msc_le &
 [ ORTH < "Roger" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Roger",
            PHON.ONSET con ] ].

ron := n_-_pn-msc_le &
 [ ORTH < "Ron" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Ron",
            PHON.ONSET con ] ].

ronald_n1 := n_-_pn-msc_le &
 [ ORTH < "Ronald" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Ronald",
            PHON.ONSET con ] ].

rosa_n1 := n_-_pn-fem_le &
 [ ORTH < "Rosa" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Rosa",
            PHON.ONSET con ] ].

roy_n1 := n_-_pn-msc_le &
 [ ORTH < "Roy" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Roy",
            PHON.ONSET con ] ].

rubio_n1 := n_-_pn-msc_le &
 [ ORTH < "Rubio" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Rubio",
            PHON.ONSET con ] ].

rusty_n1 := n_-_pn-msc_le &
 [ ORTH < "Rusty" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Rusty",
            PHON.ONSET con ] ].

ryan_n1 := n_-_pn-msc_le &
 [ ORTH < "Ryan" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Ryan",
            PHON.ONSET con ] ].

sadie_n1 := n_-_pn-fem_le &
 [ ORTH < "Sadie" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Sadie",
            PHON.ONSET con ] ].

samir_n1 := n_-_pn-msc_le &
 [ ORTH < "Samir" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Samir",
            PHON.ONSET con ] ].

sandra_n1 := n_-_pn-fem_le &
 [ ORTH < "Sandra" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Sandra",
            PHON.ONSET con ] ].

sara := n_-_pn-fem_le &
 [ ORTH < "Sara" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Sara",
            PHON.ONSET con ] ].

sarah_n1 := n_-_pn-fem_le &
 [ ORTH < "Sarah" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Sarah",
            PHON.ONSET con ] ].

seattle_n1 := n_-_pn-neut_le &
 [ ORTH < "Seattle" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Seattle",
            PHON.ONSET con ] ].

sharon_n1 := n_-_pn-fem_le &
 [ ORTH < "Sharon" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Sharon",
            PHON.ONSET con ] ].

simon_n1 := n_-_pn-msc_le &
 [ ORTH < "Simon" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Simon",
            PHON.ONSET con ] ].

sita_n1 := n_-_pn-fem_le &
 [ ORTH < "Sita" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Sita",
            PHON.ONSET con ] ].

sophia_n1 := n_-_pn-fem_le &
 [ ORTH < "Sophia" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Sophia",
            PHON.ONSET con ] ].

sophie_n1 := n_-_pn-fem_le &
 [ ORTH < "Sophie" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Sophie",
            PHON.ONSET con ] ].

spanish_n1 := n_-_pn-nocnh_le &
 [ ORTH < "Spanish" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Spanish",
            PHON.ONSET con ] ].

stephanie_n1 := n_-_pn-fem_le &
 [ ORTH < "Stephanie" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Stephanie",
            PHON.ONSET con ] ].

stephen_n1 := n_-_pn-msc_le &
 [ ORTH < "Stephen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Stephen",
            PHON.ONSET con ] ].

steve_n1 := n_-_pn-msc_le &
 [ ORTH < "Steve" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Steve",
            PHON.ONSET con ] ].

steven_n1 := n_-_pn-msc_le &
 [ ORTH < "Steven" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Steven",
            PHON.ONSET con ] ].

sylvia_n1 := n_-_pn-fem_le &
 [ ORTH < "Sylvia" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Sylvia",
            PHON.ONSET con ] ].

talia_n1 := n_-_pn-fem_le &
 [ ORTH < "Talia" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Talia",
            PHON.ONSET con ] ].

tanya_n1 := n_-_pn-fem_le &
 [ ORTH < "Tanya" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Tanya",
            PHON.ONSET con ] ].

tara_n1 := n_-_pn-fem_le &
 [ ORTH < "Tara" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Tara",
            PHON.ONSET con ] ].

tasha_n1 := n_-_pn-fem_le &
 [ ORTH < "Tasha" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Tasha",
            PHON.ONSET con ] ].

tatiana_n1 := n_-_pn-fem_le &
 [ ORTH < "Tatiana" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Tatiana",
            PHON.ONSET con ] ].

teresa_n1 := n_-_pn-fem_le &
 [ ORTH < "Teresa" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Teresa",
            PHON.ONSET con ] ].

texas_n1 := n_-_pn-neut_le &
 [ ORTH < "Texas" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Texas",
            PHON.ONSET con ] ].

theodore_n1 := n_-_pn-msc_le &
 [ ORTH < "Theodore" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Theodore",
            PHON.ONSET con ] ].

theresa := n_-_pn-fem_le &
 [ ORTH < "Theresa" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Theresa",
            PHON.ONSET con ] ].

tiffany := n_-_pn-fem_le &
 [ ORTH < "Tiffany" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Tiffany",
            PHON.ONSET con ] ].

tina_n1 := n_-_pn-fem_le &
 [ ORTH < "Tina" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Tina",
            PHON.ONSET con ] ].

tom_n1 := n_-_pn-msc_le &
 [ ORTH < "Tom" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Tom",
            PHON.ONSET con ] ].

travis_n1 := n_-_pn-msc_le &
 [ ORTH < "Travis" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Travis",
            PHON.ONSET con ] ].

trudy_n1 := n_-_pn-fem_le &
 [ ORTH < "Trudy" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Trudy",
            PHON.ONSET con ] ].

tyler_n1 := n_-_pn-msc_le &
 [ ORTH < "Tyler" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Tyler",
            PHON.ONSET con ] ].

tyrell_n1 := n_-_pn-msc_le &
 [ ORTH < "Tyrell" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Tyrell",
            PHON.ONSET con ] ].

tyson_n1 := n_-_pn-msc_le &
 [ ORTH < "Tyson" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Tyson",
            PHON.ONSET con ] ].

ultima_n1 := n_-_pn-fem_le &
 [ ORTH < "Ultima" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Ultima",
            PHON.ONSET voc ] ].

valeria_n1 := n_-_pn-fem_le &
 [ ORTH < "Valeria" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Valeria",
            PHON.ONSET con ] ].

vanessa_n1 := n_-_pn-fem_le &
 [ ORTH < "Vanessa" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Vanessa",
            PHON.ONSET con ] ].

venezuela_n1 := n_-_pn-neut_le &
 [ ORTH < "Venezuela" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Venezuela",
            PHON.ONSET con ] ].

veronica_n1 := n_-_pn-fem_le &
 [ ORTH < "Veronica" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Veronica",
            PHON.ONSET con ] ].

victoria_n1 := n_-_pn-fem_le &
 [ ORTH < "Victoria" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Victoria",
            PHON.ONSET con ] ].

waldo_n1 := n_-_pn-msc_le &
 [ ORTH < "Waldo" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Waldo",
            PHON.ONSET con ] ].

wallace_n1 := n_-_pn-msc_le &
 [ ORTH < "Wallace" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Wallace",
            PHON.ONSET con ] ].

wanda_n1 := n_-_pn-fem_le &
 [ ORTH < "Wanda" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Wanda",
            PHON.ONSET con ] ].

william_n1 := n_-_pn-msc_le &
 [ ORTH < "William" >,
   SYNSEM [ LKEYS.KEYREL.CARG "William",
            PHON.ONSET con ] ].

wyatt_n1 := n_-_pn-msc_le &
 [ ORTH < "Wyatt" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Wyatt",
            PHON.ONSET con ] ].

xander_n1 := n_-_pn-msc_le &
 [ ORTH < "Xander" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Xander",
            PHON.ONSET con ] ].

xhosa_n1 := n_-_pn_le &
 [ ORTH < "Xhosa" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Xhosa",
            PHON.ONSET con ] ].

xhosa_n2 := n_-_pn-pl_le &
 [ ORTH < "Xhosa" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Xhosa",
            PHON.ONSET con ] ].

yosemite_n1 := n_-_pn-neut_le &
 [ ORTH < "Yosemite" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Yosemite",
            PHON.ONSET con ] ].

yoshiko_n1 := n_-_pn-fem_le &
 [ ORTH < "Yoshiko" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Yoshiko",
            PHON.ONSET con ] ].

zeppo_n1 := n_-_pn-msc_le &
 [ ORTH < "Zeppo" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Zeppo",
            PHON.ONSET con ] ].

zoey_n1 := n_-_pn-fem_le &
 [ ORTH < "Zoey" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Zoey",
            PHON.ONSET con ] ].
