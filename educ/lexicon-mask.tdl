a_period_np1 := never_unify_le & [ ORTH < "_never_unify_" > ].
a_team_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
about_adv2 := never_unify_le & [ ORTH < "_never_unify_" > ].
accustom_v2 := never_unify_le & [ ORTH < "_never_unify_" > ].
add_in_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
after_conj := never_unify_le & [ ORTH < "_never_unify_" > ].
;; Let's block this again, to avoid |after, we arose|
after_pp := never_unify_le & [ ORTH < "_never_unify_" > ].
age_v2 := never_unify_le & [ ORTH < "_never_unify_" > ].
all_too_deg := never_unify_le & [ ORTH < "_never_unify_" > ].
amber_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
an_per_p := never_unify_le & [ ORTH < "_never_unify_" > ].
ana_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
answer_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
any_longer_adv3 := never_unify_le & [ ORTH < "_never_unify_" > ].
any_longer_adv4 := never_unify_le & [ ORTH < "_never_unify_" > ].
apple_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
aria_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;; Treat instead as prep, to get singular |Kim, as well as Browne| is happy|
as_well_as_conj_1 := never_unify_le & [ ORTH < "_never_unify_" > ].
attic_a1 := never_unify_le & [ ORTH < "_never_unify_" > ].
away_deg := never_unify_le & [ ORTH < "_never_unify_" > ].
azalea_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
azalea_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
baby_root_post := never_unify_le & [ ORTH < "_never_unify_" > ].
baby_root_pre := never_unify_le & [ ORTH < "_never_unify_" > ].
baby_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;;back_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
back_v2 := never_unify_le & [ ORTH < "_never_unify_" > ].
backpack_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
badder := never_unify_le & [ ORTH < "_never_unify_" > ].
bad_adv1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;bad_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
bake_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
baker_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
ball_n1_i := never_unify_le & [ ORTH < "_never_unify_" > ].
ball_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
balloon_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
band_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;;barbecue_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;; |we barbequed meat|
;;barbeque_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
bark_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;;be_inv_are := never_unify_le & [ ORTH < "_never_unify_" > ].
;; Make this one robust, where extra space before apostrophe
be_c_are_cx_lq_2 := never_unify_le & [ ORTH < "_never_unify_" > ].
be_c_is_cx := never_unify_le & [ ORTH < "_never_unify_" > ].
be_c_is_cx_lq_2 := never_unify_le & [ ORTH < "_never_unify_" > ].
be_id_are_cx_lq_2 := never_unify_le & [ ORTH < "_never_unify_" > ].
be_id_is_cx_lq_2 := never_unify_le & [ ORTH < "_never_unify_" > ].
be_inv_are_cx := never_unify_le & [ ORTH < "_never_unify_" > ].
be_inv_are_cx_2 := never_unify_le & [ ORTH < "_never_unify_" > ].
;;be_inv_is := never_unify_le & [ ORTH < "_never_unify_" > ].
be_inv_is_cx := never_unify_le & [ ORTH < "_never_unify_" > ].
; DPF 2018-03-06 - Need this for |here's my idea|
;be_inv_is_cx_2 := never_unify_le & [ ORTH < "_never_unify_" > ].
;;be_inv_was := never_unify_le & [ ORTH < "_never_unify_" > ].
;;be_inv_were := never_unify_le & [ ORTH < "_never_unify_" > ].
;;be_nv_was_subj := never_unify_le & [ ORTH < "_never_unify_" > ].
;; Block use in |Mike's leg broke|
be_nv_is_cx := never_unify_le & [ ORTH < "_never_unify_" > ].
be_nv_is_cx_2 := never_unify_le & [ ORTH < "_never_unify_" > ].
;be_nv_is_cx_3 := never_unify_le & [ ORTH < "_never_unify_" > ].
be_nv_is_cx_lq_2 := never_unify_le & [ ORTH < "_never_unify_" > ].
be_th_cop_is_plur := never_unify_le & [ ORTH < "_never_unify_" > ].
be_th_cop_was_plur := never_unify_le & [ ORTH < "_never_unify_" > ].
beach_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
bear_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
bear_v3 := never_unify_le & [ ORTH < "_never_unify_" > ].
;;become_v3 := never_unify_le & [ ORTH < "_never_unify_" > ].
bed_i_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
bed_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
; Needed in student answers
;before_adv1 := never_unify_le & [ ORTH < "_never_unify_" > ].
behind_adv := never_unify_le & [ ORTH < "_never_unify_" > ].
;; For generation, don't want "the flowers being blue"
;; but need it for parsing, so don't block it here.
;be_c_being := never_unify_le & [ ORTH < "_never_unify_" > ].
being_i_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;; "an angelic being"
;being_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
beings_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
better_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
bicycle_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;;bill_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
bill_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
black_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
black_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
bleed_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
bob_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
bob_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
bob_v2 := never_unify_le & [ ORTH < "_never_unify_" > ].
bone_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
book_up_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;book_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
book_v3 := never_unify_le & [ ORTH < "_never_unify_" > ].
book_v4 := never_unify_le & [ ORTH < "_never_unify_" > ].
booth_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;;bore_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
born_a2 := never_unify_le & [ ORTH < "_never_unify_" > ].
bow_to_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
box_in_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
box_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
box_up_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
box_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
boy_root_post := never_unify_le & [ ORTH < "_never_unify_" > ].
boy_root_pre := never_unify_le & [ ORTH < "_never_unify_" > ].
brad_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
;;break_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
breakfast_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
broke_a1 := never_unify_le & [ ORTH < "_never_unify_" > ].
broke_robust := never_unify_le & [ ORTH < "_never_unify_" > ].
;;brown_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
buffalo_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
bud_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
bud_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
bug_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
bug_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;; DPF 2019-02-10 - Treating |a bunch of | as MWE for easier sem compar
bunch_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
bus_in_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
bus_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
bus_v2 := never_unify_le & [ ORTH < "_never_unify_" > ].
buster_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
but_root_post := never_unify_le & [ ORTH < "_never_unify_" > ].
buy_into_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;; Need for "asset buys"
;;buy_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
buy_out_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
buy_up_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;; DPF 2018-09-18 - Need this for |She ran by.|
;by_adv := never_unify_le & [ ORTH < "_never_unify_" > ].
;by_means := never_unify_le & [ ORTH < "_never_unify_" > ].
by_nbar_nbar_p := never_unify_le & [ ORTH < "_never_unify_" > ].
cage_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
;; cage_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
cake_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
cake_v2 := never_unify_le & [ ORTH < "_never_unify_" > ].
cake_v3 := never_unify_le & [ ORTH < "_never_unify_" > ].
;call_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
call_v5 := never_unify_le & [ ORTH < "_never_unify_" > ].
can_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
card_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;;care_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
carol_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
carry_v3 := never_unify_le & [ ORTH < "_never_unify_" > ].
;; We need at least the intransitive in order to get gerund |catering business|
;cater_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
char_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
checker_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
ching_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
chip_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
chip_v2 := never_unify_le & [ ORTH < "_never_unify_" > ].
chocolate_a1 := never_unify_le & [ ORTH < "_never_unify_" > ].
choice_a1 := never_unify_le & [ ORTH < "_never_unify_" > ].
christian_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
city_post_ttl := never_unify_le & [ ORTH < "_never_unify_" > ].
;climb_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
clock_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
clock_at_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
close_deg := never_unify_le & [ ORTH < "_never_unify_" > ].
close_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
clothe_v2 := never_unify_le & [ ORTH < "_never_unify_" > ].
cloud_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;;coaster_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;; Avoid "[the combination of her] [brown hair]..."
combination_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;; Want error for |communicate (with) someone|
;; 20-09-29 - But also want "can't communicate his feelings", and anyway
;; had given up on above since we don't want robust "communicate more with..."
;communicate_v4 := never_unify_le & [ ORTH < "_never_unify_" > ].
complex_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
consequence_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
;; Only in compound `construction paper'
;construction_n := never_unify_le & [ ORTH < "_never_unify_" > ].
contest_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
cook_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
cool_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
cooper_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
cork_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;; DPF 2017-09-23 - Remove the unspec-tense variant so we can get matching 
;; tense on main and dependent clauses.  Maybe rethink since this will block
;; |I could be there tomorrow|
;; Yes, rethought it, and let's leave this in but underspecified for tense.
;could_aux_pos := never_unify_le & [ ORTH < "_never_unify_" > ].
cream_a1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;; 2019-19-02 - Want |chocolate, cream, and vanilla|
;;cream_n1 := never_unify_le & [ ORTH < "cream" > ].
cream_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;; DPF 2019-02-14 - We want |Look out! cried Kim.|
;;cry_v2 := never_unify_le & [ ORTH < "_never_unify_" > ].
cup_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
cut_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;;dad_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
;;daisy_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
dale_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;;dead_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
dig_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
digs_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
die_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
do_v3 := never_unify_le & [ ORTH < "_never_unify_" > ].
;do_v4 := never_unify_le & [ ORTH < "_never_unify_" > ].
doctor_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;doe_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
dog_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
don_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;doodle_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
dos_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
down_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
downstairs_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
draw_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;; Avoid robust missing in-obj for |we dressed him in.|
dress_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
drew_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;;drive_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
drive_v4 := never_unify_le & [ ORTH < "_never_unify_" > ].
;;drop_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
drove_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
earn_v2 := never_unify_le & [ ORTH < "_never_unify_" > ].
eats_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
elect_v4 := never_unify_le & [ ORTH < "_never_unify_" > ].
emerald_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
erupt_v2 := never_unify_le & [ ORTH < "_never_unify_" > ].
;;escape_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
european_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;;eve_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
except_cp_p := never_unify_le & [ ORTH < "_never_unify_" > ].
except_that_2 := never_unify_le & [ ORTH < "_never_unify_" > ].
;exhibit_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
exhibit_v2 := never_unify_le & [ ORTH < "_never_unify_" > ].
expect_v5 := never_unify_le & [ ORTH < "_never_unify_" > ].
;;faith_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;; Need for "the leaves of fall"
;fall_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
fall_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
fall_n3 := never_unify_le & [ ORTH < "_never_unify_" > ].
fall_v2 := never_unify_le & [ ORTH < "_never_unify_" > ].
fanny_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
fast_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;; Need for "runs faster"
;;faster := never_unify_le & [ ORTH < "_never_unify_" > ].
father_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
father_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
fbi_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
feed_in_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
feed_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
feed_v3 := never_unify_le & [ ORTH < "_never_unify_" > ].
;feel_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;feel_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
fell_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
field_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
field_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
find_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;find_v3 := never_unify_le & [ ORTH < "_never_unify_" > ].
finish_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
first_pn1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;fit_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
fix_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
fix_on_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
flash_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;float_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
floor_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
florida_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
florida_n3 := never_unify_le & [ ORTH < "_never_unify_" > ].
florida_n4 := never_unify_le & [ ORTH < "_never_unify_" > ].
florida_n5 := never_unify_le & [ ORTH < "_never_unify_" > ].
flower_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;flu_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;; 2018-09-20 - Exclude to better detect overuse of topicalized for-PP
for_adv1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;;for_subconj_fin := never_unify_le & [ ORTH < "_never_unify_" > ].
frank_money_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;;from_ppcomp := never_unify_le & [ ORTH < "_never_unify_" > ].
front_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
fruit_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
fry_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
;; *Dessert fries
fry_v2 := never_unify_le & [ ORTH < "_never_unify_" > ].
gallop_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
game_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
game_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
garden_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
german_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
german_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
; Cannot block simple trans 'give', since want "She gave a bad speech."
; So instead at least restrict NP to [LEX -] to avoid pronouns and names
;give_v2 := never_unify_le & [ ORTH < "_never_unify_" > ].
;give_v3 := never_unify_le & [ ORTH < "_never_unify_" > ].
go_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
go_n1_i := never_unify_le & [ ORTH < "_never_unify_" > ].
;;go_on_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;;go_v3 := never_unify_le & [ ORTH < "_never_unify_" > ].
go_v4 := never_unify_le & [ ORTH < "_never_unify_" > ].
;good_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;goods_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
good_s_adv := never_unify_le & [ ORTH < "_never_unify_" > ].
gp_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
grace_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
grace_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;;grandfather_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
grandfather_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;;grandmother_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
;; Block |they benefited great| vs. |greatly|
great_a1 := never_unify_le & [ ORTH < "_never_unify_" > ].
great_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
green_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
green_v2 := never_unify_le & [ ORTH < "_never_unify_" > ].
grind_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;gummy_a1 := never_unify_le & [ ORTH < "_never_unify_" > ].
gummy_bear_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
had_aux_cx := never_unify_le & [ ORTH < "_never_unify_" > ].
had_aux_cx_lq := never_unify_le & [ ORTH < "_never_unify_" > ].
had_better_cx := never_unify_le & [ ORTH < "_never_unify_" > ].
had_better_cx_lq := never_unify_le & [ ORTH < "_never_unify_" > ].
had_poss_aux_sbj := never_unify_le & [ ORTH < "_never_unify_" > ].
hall_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
hank_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
;; DPF 2020-02-20 - Block this, to avoid ambiguity for
;; |the festival happened on the first day of the month|
happen_on_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
happening_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
hardly_deg := never_unify_le & [ ORTH < "_never_unify_" > ].
;;; Needed for revisions (G3,G4) 
;have_cause := never_unify_le & [ ORTH < "_never_unify_" > ].
;; British
have-poss_cx := never_unify_le & [ ORTH < "_never_unify_" > ].
heather_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;heck_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;; Avoid robust |he cooks her her dinner|
her_poss_stutter_rbst := never_unify_le & [ ORTH < "_never_unify_" > ].
her_poss_stutter_2 := never_unify_le & [ ORTH < "_never_unify_" > ].
her_stutter_5_mal := never_unify_le & [ ORTH < "_never_unify_" > ].
herb_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
hide_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;hike_v2 := never_unify_le & [ ORTH < "_never_unify_" > ].
hill_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
;;hill_post_ttl := never_unify_le & [ ORTH < "_never_unify_" > ].
him_her := never_unify_le & [ ORTH < "_never_unify_" > ].
; Need for Grade 4
;his := never_unify_le & [ ORTH < "_never_unify_" > ].
;;hold_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;; Need for |the activity will be on hold|
;;hold_n1_i := never_unify_le & [ ORTH < "_never_unify_" > ].
hold_v3 := never_unify_le & [ ORTH < "_never_unify_" > ].
hole_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
holiday_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
holly_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
;;hope_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
hope_n3 := never_unify_le & [ ORTH < "_never_unify_" > ].
hope_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
horseback_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;;house_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
house_post_ttl := never_unify_le & [ ORTH < "_never_unify_" > ].
;; Needed for "he likes how he looks"
;;how_freerel_np := never_unify_le & [ ORTH < "_never_unify_" > ].
how_to_a1 := never_unify_le & [ ORTH < "_never_unify_" > ].
how_to_a2 := never_unify_le & [ ORTH < "_never_unify_" > ].
;; Avoid confusion with clause-initial adv |however he is making himself a jerk|
however_freerel_np := never_unify_le & [ ORTH < "_never_unify_" > ].
hunt_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
hurt_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
hurt_v2 := never_unify_le & [ ORTH < "_never_unify_" > ].
i_suppose_disc := never_unify_le & [ ORTH < "_never_unify_" > ].
;; DPF 2018-03-06 - This blocks |This I think is unfair|
;i_think_disc := never_unify_le & [ ORTH < "_never_unify_" > ].
ice_n := never_unify_le & [ ORTH < "_never_unify_" > ].
ice_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
ice_v2 := never_unify_le & [ ORTH < "_never_unify_" > ].
in_fact_adv1 := never_unify_le & [ ORTH < "_never_unify_" > ].
in_house_a2 := never_unify_le & [ ORTH < "_never_unify_" > ].
;; DPF 2019-12-19 - Needed for |Up went the arrow in to the sky.|
in_ppcomp := never_unify_le & [ ORTH < "_never_unify_" > ].
in_the_event := never_unify_le & [ ORTH < "_never_unify_" > ].
inch_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;;interest_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
interview_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
iroquois_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
itch_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
jack_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
jasmine_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
; We (sort of) want "the activity was joined in by ..."
;join_in_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
josh_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
juice_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;; DPF 2017-12-06 - |he jumped the red light|
;;jump_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
junk_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
ken_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
;key_a1 := never_unify_le & [ ORTH < "_never_unify_" > ].
key_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
kid_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;;kind_of_deg := never_unify_le & [ ORTH < "_never_unify_" > ].
kind_of_scop := never_unify_le & [ ORTH < "_never_unify_" > ].
kind_pl_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
kindly_a1 := never_unify_le & [ ORTH < "_never_unify_" > ].
know_it_all_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
; Need for West Lake
;lake_title_1 := never_unify_le & [ ORTH < "_never_unify_" > ].
lamb_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
lance_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
lance_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;; We want |they landed it|
;;land_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
land_v3 := never_unify_le & [ ORTH < "_never_unify_" > ].
land_v4 := never_unify_le & [ ORTH < "_never_unify_" > ].
language_n4 := never_unify_le & [ ORTH < "_never_unify_" > ].
lap_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
last_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
late_a3 := never_unify_le & [ ORTH < "_never_unify_" > ].
laugh_v2 := never_unify_le & [ ORTH < "_never_unify_" > ].
lay_a1 := never_unify_le & [ ORTH < "_never_unify_" > ].
; Enable detection of robust intransitive "laying"
lay_on_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
lay_v3 := never_unify_le & [ ORTH < "_never_unify_" > ].
;leaf_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
leaf_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
;leave_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;;left_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
left_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
leg_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
leisurely_isect := never_unify_le & [ ORTH < "_never_unify_" > ].
letter_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
liberty_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;;light_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
light_v2 := never_unify_le & [ ORTH < "_never_unify_" > ].
;;like_a1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;; Needed for "seemed like ..."
;;like_comp := never_unify_le & [ ORTH < "_never_unify_" > ].
;; 2020-11-25 - Block this to avoid spurious ambiguity
like_disc_adv := never_unify_le & [ ORTH < "_never_unify_" > ].
;;like_p_2 := never_unify_le & [ ORTH < "_never_unify_" > ].
liter_abb_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
little_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;; DPF 2017-12-06 - "we should live a regular life"
;;live_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;like_prd_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;living_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
loan_to_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
; Needed for Grade 4
;loan_v2 := never_unify_le & [ ORTH < "_never_unify_" > ].
longer_meas_np := never_unify_le & [ ORTH < "_never_unify_" > ].
look_v4 := never_unify_le & [ ORTH < "_never_unify_" > ].
loose_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
lose_x_of_v1_i := never_unify_le & [ ORTH < "_never_unify_" > ].
lost_a1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;; DPF 2019-02-10 - Block to favor MWE |a lot of| for easier paraphr comparison
;; 2020-11-17 - But this blocks "We need a lot of it"
;lot_n := never_unify_le & [ ORTH < "_never_unify_" > ].
lots_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
lots_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
love_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;;love_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
lunch_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
make_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
make_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
;;make_prd_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
make_v6 := never_unify_le & [ ORTH < "_never_unify_" > ].
;mama_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
mama_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
man_root_post := never_unify_le & [ ORTH < "_never_unify_" > ].
man_root_pre := never_unify_le & [ ORTH < "_never_unify_" > ].
man_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;; DPF 2018-03-16 - Need for |he received good marks|
;mark_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
;;mark_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
marina_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
market_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
mason_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
matt_a1 := never_unify_le & [ ORTH < "_never_unify_" > ].
max_adv1 := never_unify_le & [ ORTH < "_never_unify_" > ].
max_deg := never_unify_le & [ ORTH < "_never_unify_" > ].
;; Avoid use in "You run — you win."
mdash_s_root_pre := never_unify_le & [ ORTH < "_never_unify_" > ].
mean_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
meet_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
memorial_a1 := never_unify_le & [ ORTH < "_never_unify_" > ].
mens_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
; "... the man who drives a Mercedes"
; mercedes_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
meter_abb_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
meter_abb_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
michigan_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
michigan_n3 := never_unify_le & [ ORTH < "_never_unify_" > ].
michigan_n4 := never_unify_le & [ ORTH < "_never_unify_" > ].
michigan_n5 := never_unify_le & [ ORTH < "_never_unify_" > ].
miller_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
miss_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;mom_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
moment_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
momma_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
mother_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
mother_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;mouth_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;move_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;move_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
ms_n3 := never_unify_le & [ ORTH < "_never_unify_" > ].
much_deg2 := never_unify_le & [ ORTH < "_never_unify_" > ].
;;must_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
my_excl_pre := never_unify_le & [ ORTH < "_never_unify_" > ].
;n_lower_np1 := never_unify_le & [ ORTH < "_never_unify_" > ].
n_period_np1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;near_a1 := never_unify_le & [ ORTH < "_never_unify_" > ].
near_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;need_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;need_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
;need_n3 := never_unify_le & [ ORTH < "_never_unify_" > ].
new_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
newmexico_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
newmexico_n3 := never_unify_le & [ ORTH < "_never_unify_" > ].
newmexico_n4 := never_unify_le & [ ORTH < "_never_unify_" > ].
newmexico_n5 := never_unify_le & [ ORTH < "_never_unify_" > ].
newmexico_n6 := never_unify_le & [ ORTH < "_never_unify_" > ].
newmexico_n7 := never_unify_le & [ ORTH < "_never_unify_" > ].
;; DPF 2019-12-19 - Need this one for
;; |Never did I dream of that.|
;never_adv2 := never_unify_le & [ ORTH < "_never_unify_" > ].
;never_prdp := never_unify_le & [ ORTH < "_never_unify_" > ].
next_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;;no_disc_root := never_unify_le & [ ORTH < "_never_unify_" > ].
no_longer_adv4 := never_unify_le & [ ORTH < "_never_unify_" > ].
no_matter_adv := never_unify_le & [ ORTH < "_never_unify_" > ].
noble_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
nose_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
nothing_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
nots_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
now_aux_adv := never_unify_le & [ ORTH < "_never_unify_" > ].
number_n3 := never_unify_le & [ ORTH < "_never_unify_" > ].
number_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;o_lower_np1 := never_unify_le & [ ORTH < "_never_unify_" > ].
off_a1 := never_unify_le & [ ORTH < "_never_unify_" > ].
olympics_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;; "...with sunglasses on"
;;on_adv := never_unify_le & [ ORTH < "_never_unify_" > ].
on_ppcomp := never_unify_le & [ ORTH < "_never_unify_" > ].
on_to_prtcl := never_unify_le & [ ORTH < "_never_unify_" > ].
;; Block non-robust |once in a day|
once_deg := never_unify_le & [ ORTH < "_never_unify_" > ].
one_roman := never_unify_le & [ ORTH < "_never_unify_" > ].
only_adv2 := never_unify_le & [ ORTH < "_never_unify_" > ].
only_adv3 := never_unify_le & [ ORTH < "_never_unify_" > ].
onyx_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
open_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
opposite_a1 := never_unify_le & [ ORTH < "_never_unify_" > ].
out_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
out_a1 := never_unify_le & [ ORTH < "_never_unify_" > ].
; 2020-05-14 - need for |the outside world|
;outside_a1 := never_unify_le & [ ORTH < "_never_unify_" > ].
owners_a2 := never_unify_le & [ ORTH < "_never_unify_" > ].
owners_a3 := never_unify_le & [ ORTH < "_never_unify_" > ].
;;paint_v2 := never_unify_le & [ ORTH < "_never_unify_" > ].
palace_post_ttl := never_unify_le & [ ORTH < "_never_unify_" > ].
palm_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;;pant_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
parade_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
parade_v2 := never_unify_le & [ ORTH < "_never_unify_" > ].
parent_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;park_post_ttl := never_unify_le & [ ORTH < "_never_unify_" > ].
;;park_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
party_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
; Need for |they should have their pay raised|
;pay_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
pay_off_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
peach_a1 := never_unify_le & [ ORTH < "_never_unify_" > ].
pencil_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
pennsylvania_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
people_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
people_n3 := never_unify_le & [ ORTH < "_never_unify_" > ].
;per_p2 := never_unify_le & [ ORTH < "_never_unify_" > ].
;pet_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
petunia_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
picnic_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;;picture_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
pinker_a1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;place_n1_i := never_unify_le & [ ORTH < "_never_unify_" > ].
place_v2 := never_unify_le & [ ORTH < "_never_unify_" > ].
plant_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
play_v2 := never_unify_le & [ ORTH < "_never_unify_" > ].
po_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
pop_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
precious_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;present_a1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;;present_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
present_with_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;; DPF 2018-03-30 - Restrict to subjunctive CP
propose_v2 := never_unify_le & [ ORTH < "_never_unify_" > ].
;; DPF 2018-03-16 - Need |there was a pull on the line|
;;pull_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
purr_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
putt_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
quick_adv1 := never_unify_le & [ ORTH < "_never_unify_" > ].
race_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
rather_than_conj := never_unify_le & [ ORTH < "_never_unify_" > ].
;ray_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
;reading_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;; DPF 2017-12-23 - Commented out as we added tense mismatch handling
;;read_v2 := never_unify_le & [ ORTH < "_never_unify_" > ].
recess_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
red_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
remain_v6 := never_unify_le & [ ORTH < "_never_unify_" > ].
;report_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;report_v2 := never_unify_le & [ ORTH < "_never_unify_" > ].
;report_v3 := never_unify_le & [ ORTH < "_never_unify_" > ].
;report_v4 := never_unify_le & [ ORTH < "_never_unify_" > ].
;report_v5 := never_unify_le & [ ORTH < "_never_unify_" > ].
;report_v6 := never_unify_le & [ ORTH < "_never_unify_" > ].
;report_v7 := never_unify_le & [ ORTH < "_never_unify_" > ].
researches_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
restaurant_post_ttl := never_unify_le & [ ORTH < "_never_unify_" > ].
return_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
return_v3 := never_unify_le & [ ORTH < "_never_unify_" > ].
revelation_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;;ride_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
ride_v3 := never_unify_le & [ ORTH < "_never_unify_" > ].
right_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
right_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
right_post_root := never_unify_le & [ ORTH < "_never_unify_" > ].
ring_v1_br := never_unify_le & [ ORTH < "_never_unify_" > ].
;; Needed for |the rise of the sun|
;;rise_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;;robin_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
;;rock_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
roger_root_post := never_unify_le & [ ORTH < "_never_unify_" > ].
roger_root_pre := never_unify_le & [ ORTH < "_never_unify_" > ].
roof_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;room_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
rope_v2 := never_unify_le & [ ORTH < "_never_unify_" > ].
ruin_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;run_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
run_prd_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
sally_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
san_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
san_post_ttl := never_unify_le & [ ORTH < "_never_unify_" > ].
sandwich_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
sandwich_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
save := never_unify_le & [ ORTH < "_never_unify_" > ].
saw_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
saw_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
say_disc_adv := never_unify_le & [ ORTH < "_never_unify_" > ].
;;say_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
school_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
school_v2 := never_unify_le & [ ORTH < "_never_unify_" > ].
seahawk_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
season_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
seat_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;seat_v2 := never_unify_le & [ ORTH < "_never_unify_" > ].
seat_v3 := never_unify_le & [ ORTH < "_never_unify_" > ].
second_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
second_v2 := never_unify_le & [ ORTH < "_never_unify_" > ].
see_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;see_v2 := never_unify_le & [ ORTH < "_never_unify_" > ].
;see_v3 := never_unify_le & [ ORTH < "_never_unify_" > ].
;;see_v7 := never_unify_le & [ ORTH < "_never_unify_" > ].
seek_for_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
sell_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
send_to_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;; We want the dative alternation semantics for |send X to Y|
;; But we also want |sent him into the room|, so adapt send_v7 below.
;;send_v7 := never_unify_le & [ ORTH < "_never_unify_" > ].
send_v8 := never_unify_le & [ ORTH < "_never_unify_" > ].
;;shake_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;; DPF 2017-12-23 - Commented out as we added tense mismatch handling
;; shed_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
sheet_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
shelter_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
shepherd_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
shoe_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
short_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
short_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
;shot_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
sick_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
singe_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
singe_v2 := never_unify_le & [ ORTH < "_never_unify_" > ].
site_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
site_v2 := never_unify_le & [ ORTH < "_never_unify_" > ].
sitting_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
ski_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
sleepy_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
slip_v3 := never_unify_le & [ ORTH < "_never_unify_" > ].
slow_adv1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;slow_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
smart_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
smart_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;smile_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
snake_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
so_a1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;; Needed for |kim is so looking forward to that|
;; DPF 2019-06-16 - But we don't want this in runon |he arrived, so we left|
;; DPF 2019-12-19 - But we want |So take a deep breath.|, hence we'll count on
;; parse ranking to avoid runon.
;so_adv1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;so_adv2 := never_unify_le & [ ORTH < "_never_unify_" > ].
soap_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
sock_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
something_approx_a1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;; We want contenful "to" for |we spent time on homework|
spend_v2 := never_unify_le & [ ORTH < "_never_unify_" > ].
spend_v4 := never_unify_le & [ ORTH < "_never_unify_" > ].
spill_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
sport_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;; This was commented out, but why?
;; because of "The children spied an interesting bird ..."
;; spy_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;;start_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
spot_v2 := never_unify_le & [ ORTH < "_never_unify_" > ].
spring_v2 := never_unify_le & [ ORTH < "_never_unify_" > ].
station_post_ttl := never_unify_le & [ ORTH < "_never_unify_" > ].
; Needed for "he can't stand garlic ice cream" (neg polarity)
;stand_v4 := never_unify_le & [ ORTH < "_never_unify_" > ].
stay_v3 := never_unify_le & [ ORTH < "_never_unify_" > ].
stew_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
stick_v3 := never_unify_le & [ ORTH < "_never_unify_" > ].
still_v2 := never_unify_le & [ ORTH < "_never_unify_" > ].
stink_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
; stop_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
store_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
store_v3 := never_unify_le & [ ORTH < "_never_unify_" > ].
storm_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
story_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
strong_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
strong_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
;;study_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
style_n3 := never_unify_le & [ ORTH < "_never_unify_" > ].
suggest_v7 := never_unify_le & [ ORTH < "_never_unify_" > ].
suitable_a3 := never_unify_le & [ ORTH < "_never_unify_" > ].
sum_i_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
summary_i_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;; Needed for |Ms. Sun arrived|
;sun_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
supposed_a2_mal := never_unify_le & [ ORTH < "_never_unify_" > ].
surprise_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
;t_lower_np1 := never_unify_le & [ ORTH < "_never_unify_" > ].
t_period_np1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;d_lower_np1 := never_unify_le & [ ORTH < "_never_unify_" > ].
d_period_np1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;s_lower_np1 := never_unify_le & [ ORTH < "_never_unify_" > ].
table_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;; DPF 2018-09-14 - Need this one for |They'll take in the view|
;;take_in_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
take_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
take_to_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;; Need for |the event took place yesterday|
;take_v1_i := never_unify_le & [ ORTH < "_never_unify_" > ].
talk_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
talk_v2 := never_unify_le & [ ORTH < "_never_unify_" > ].
tank_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;taste_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
teachers_a1 := never_unify_le & [ ORTH < "_never_unify_" > ].
teachers_a2 := never_unify_le & [ ORTH < "_never_unify_" > ].
teachers_a3 := never_unify_le & [ ORTH < "_never_unify_" > ].
teachers_a4 := never_unify_le & [ ORTH < "_never_unify_" > ].
;tell_v5 := never_unify_le & [ ORTH < "_never_unify_" > ].
ten_four_root_post := never_unify_le & [ ORTH < "_never_unify_" > ].
ten_four_root_pre := never_unify_le & [ ORTH < "_never_unify_" > ].
tent_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
test_v2 := never_unify_le & [ ORTH < "_never_unify_" > ].
the_best_subord := never_unify_le & [ ORTH < "_never_unify_" > ].
the_like := never_unify_le & [ ORTH < "_never_unify_" > ].
then_disc_post := never_unify_le & [ ORTH < "_never_unify_" > ].
they_sg := never_unify_le & [ ORTH < "_never_unify_" > ].
;; |I used to believe he was indifferent, while I think he has cold hands and a warm heart now.|
;think_v3 := never_unify_le & [ ORTH < "_never_unify_" > ].
think_v4 := never_unify_le & [ ORTH < "_never_unify_" > ].
think_v5 := never_unify_le & [ ORTH < "_never_unify_" > ].
think_v6 := never_unify_le & [ ORTH < "_never_unify_" > ].
through_a1 := never_unify_le & [ ORTH < "_never_unify_" > ].
throw_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
thru_a1 := never_unify_le & [ ORTH < "_never_unify_" > ].
thru_p := never_unify_le & [ ORTH < "_never_unify_" > ].
ticket_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
tiger_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
till_cp_p1 := never_unify_le & [ ORTH < "_never_unify_" > ].
till_cp_p2 := never_unify_le & [ ORTH < "_never_unify_" > ].
till_cp_p3 := never_unify_le & [ ORTH < "_never_unify_" > ].
;times_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;; 2020-04-07 Need for |tired as we were, ...|
;;tire_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;;to_c_prop_elided := never_unify_le & [ ORTH < "_never_unify_" > ].
to_p_minute := never_unify_le & [ ORTH < "_never_unify_" > ].
to_s_init := never_unify_le & [ ORTH < "_never_unify_" > ].
together_with_1 := never_unify_le & [ ORTH < "_never_unify_" > ].
towel_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
too := never_unify_le & [ ORTH < "_never_unify_" > ].
tool_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
tool_v2 := never_unify_le & [ ORTH < "_never_unify_" > ].
;;train_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;;train_v2 := never_unify_le & [ ORTH < "_never_unify_" > ].
train_v3 := never_unify_le & [ ORTH < "_never_unify_" > ].
travel_v2 := never_unify_le & [ ORTH < "_never_unify_" > ].
trinity_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;;truly_deg1 := never_unify_le & [ ORTH < "_never_unify_" > ].
turkey_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
turn_i_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
turn_off_v2 := never_unify_le & [ ORTH < "_never_unify_" > ].
;;turn_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;;tutor_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
type_in_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
ultimately_deg := never_unify_le & [ ORTH < "_never_unify_" > ].
united_a1 := never_unify_le & [ ORTH < "_never_unify_" > ].
unite_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;university_post_ttl := never_unify_le & [ ORTH < "_never_unify_" > ].
upset_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
upstairs_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;us_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
usually_deg := never_unify_le & [ ORTH < "_never_unify_" > ].
vanished_a1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;;very_a1 := never_unify_le & [ ORTH < "_never_unify_" > ].
vet_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
vietnamese_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
vietnamese_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
;;wait_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
wait_root := never_unify_le & [ ORTH < "_never_unify_" > ].
want_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;;want_prd := never_unify_le & [ ORTH < "_never_unify_" > ].
;;warm_v2 := never_unify_le & [ ORTH < "_never_unify_" > ].
wash_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
wear_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;; DPF 2017-12-23 - Commented out as we added tense mismatch handling
;;wed_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;; DPF 2018-09-14 - We need this one for |He feels well.|
;;well_adj := never_unify_le & [ ORTH < "_never_unify_" > ].
;;well_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;; DPF 2019-07-12 - Restore this, but consider constraining its CASE.
;what_det_freerel := never_unify_le & [ ORTH < "_never_unify_" > ].
;; Avoid for "whatever it is you decide we like it"
whatever_root_pre := never_unify_le & [ ORTH < "_never_unify_" > ].
;; Needed for `I do what I want'
;what2 := never_unify_le & [ ORTH < "_never_unify_" > ].
;; 2018-11-08 - Needed for |when we arrived didn't matter|
;when_freerel_np := never_unify_le & [ ORTH < "_never_unify_" > ].
where_cp := never_unify_le & [ ORTH < "_never_unify_" > ].
where_rel_np := never_unify_le & [ ORTH < "_never_unify_" > ].
while_p := never_unify_le & [ ORTH < "_never_unify_" > ].
white_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;whole_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
; Needed for |he has a strong will|
; will_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
will_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
will_v2 := never_unify_le & [ ORTH < "_never_unify_" > ].
will_to_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;; DPF 2017-09-05 - Commented these out, since the original entries are needed.
;wish_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;wish_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].
wish_n4 := never_unify_le & [ ORTH < "_never_unify_" > ].
;;wish_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
wish_v3 := never_unify_le & [ ORTH < "_never_unify_" > ].
wish_v4 := never_unify_le & [ ORTH < "_never_unify_" > ].
with_p_nbar := never_unify_le & [ ORTH < "_never_unify_" > ].
with_subord_2 := never_unify_le & [ ORTH < "_never_unify_" > ].
without_pp := never_unify_le & [ ORTH < "_never_unify_" > ].
womens_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
won_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
workings_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
would_aux_pos_cx_lq := never_unify_le & [ ORTH < "_never_unify_" > ].
write_v5 := never_unify_le & [ ORTH < "_never_unify_" > ].
writings_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;;x_to_y_adj_to := never_unify_le & [ ORTH < "_never_unify_" > ].
;; Block for robust |bad-treated|
x_to_y_adj_- := never_unify_le & [ ORTH < "_never_unify_" > ].
; Needed to prevent misanalysis with bare-sg as in |effect to human body|
x_to_y_nbar_to := never_unify_le & [ ORTH < "_never_unify_" > ].
yellow_v1 := never_unify_le & [ ORTH < "_never_unify_" > ].
young_n1 := never_unify_le & [ ORTH < "_never_unify_" > ].
;young_n2 := never_unify_le & [ ORTH < "_never_unify_" > ].

a_pn_np1 := n_-_pn-nounif_le &
 [ ORTH < "A" >,
   SYNSEM [ LKEYS.KEYREL.CARG "A",
            PHON.ONSET voc ] ].

a_pn_np2 := n_-_pn-nounif_le &
 [ ORTH < "A." >,
   SYNSEM [ LKEYS.KEYREL.CARG "A",
            PHON.ONSET voc ] ].

a_pn_np3 := n_-_pn-nounif_le &
 [ ORTH < "A", "!" >,
   SYNSEM [ LKEYS.KEYREL.CARG "A",
            PHON.ONSET voc ] ].

a_pn_np4 := n_-_pn-nounif_le &
 [ ORTH < "A", "," >,
   SYNSEM [ LKEYS.KEYREL.CARG "A",
            PHON.ONSET voc ] ].

a_little_adv1 := av_-_i-vp-po-nmb_le &
 [ ORTH < "a", "little" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_a+little_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET voc ] ].

;; Prevent spurious bare-np analysis of |a little brown dog|
a_little := av_-_dg-m_le &
 [ ORTH < "a", "little" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_a+little_x_deg_rel",
            PHON.ONSET voc ] ].

;; Block for v_mod to avoid spurious robust |[see a lot] of cats|
;; But we need it for "appreciate a lot the things he did", so count on
;; better ranking to avoid for "see a lot of cats"
#|
a_lot_adv1 := av_-_i-vp-po_le &
 [ ORTH < "a", "lot" >,
   SYNSEM [ LOCAL.CAT.HEAD.MINORS.ALTMIN no_rel,
	    LKEYS.KEYREL.PRED "_a+lot_a_1_rel",
            PHON.ONSET voc ] ].
|#

a_lot_adv2 := av_-_i-vp-po_le &
 [ ORTH < "alot" >,
   SYNSEM [ LOCAL.CAT.HEAD.MINORS.ALTMIN no_rel,
	    LKEYS.KEYREL.PRED "_a+lot_a_1_rel",
            PHON.ONSET voc ] ].

;; Block |saw in the [lake a duck]|
;;
a_per_p := p_nb_i-nm_le &
 [ ORTH < "a" >,
   SYNSEM [ LKEYS.KEYREL.PRED _a_p_per_rel,
            LOCAL.CAT.HEAD.MOD.FIRST.LOCAL.AGR.DIV +,
            PHON.ONSET voc ] ].

an_per_p := p_nb_i-nm-an_le &
 [ ORTH < "an" >,
   SYNSEM [ LKEYS.KEYREL.PRED _a_p_per_rel,
            LOCAL.CAT.HEAD.MOD.FIRST.LOCAL.AGR.DIV +,
            PHON.ONSET voc ] ].

a_priori_adv1 := av_-_i-vp_le &
 [ ORTH < "a", "priori" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_a+priori_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET voc ] ].

abbreviate_v1 := v_np_le &
 [ ORTH < "abbreviate" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_abbreviate_v_1_rel",
            PHON.ONSET voc ] ].

above := p_np_i_le &
 [ ORTH < "above" >,
   SYNSEM [ LKEYS.KEYREL.PRED _above_p_rel,
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--BAREDPP.BP-ABOVE +,
            PHON.ONSET voc ] ].

;; Block robust "on account of NP"
account_n1 := n_-_c_le &
 [ ORTH < "account" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_account_n_of_rel",
            PHON.ONSET voc ] ].

account_n2 := n_pp_c-of-obl_le &
 [ ORTH < "account" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_account_n_of_rel",
	    LOCAL.CAT.HEAD.--BAREPP [ BP-INTO -,
				      BP-ON - ],
            PHON.ONSET voc ] ].

adjudge_v1 := v_np_le &
 [ ORTH < "adjudge" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_adjudge_v_1_rel",
	    LOCAL.CAT [ HEAD.--SBRDMOD -,
	                VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--POSSRBST - ],
            PHON.ONSET voc ] ].

advance_v1 := v_np_noger_le &
 [ ORTH < "advance" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_advance_v_1_rel",
            PHON.ONSET voc ] ].

;; DPF 2020-08-11 - For all verbs of types v_np-cp_le and  v_np-cp_fin-inf_le, 
;; mark v_np_ variants to block extraposed relatives.
advise_v1 := v_np*_le &
 [ ORTH < "advise" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_advise_v_1_rel",
	    LOCAL.CAT.HEAD [ --CLRC -,
			     --NOCJCRD - ],
            PHON.ONSET voc ] ].

affix_v1 := v_np_le &
 [ ORTH < "affix" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_affix_v_1_rel",
            PHON.ONSET voc ] ].

afford_v1 := v_np_le &
 [ ORTH < "afford" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_afford_v_1_rel",
            PHON.ONSET voc ] ].

;; 2018-03-17 - Avoid robust-case NP in confusion with CP-taking variant, as in
;; |... these [problems after he] made a mistake|
after_p := p_np_i_le &
 [ ORTH < "after" >,
   SYNSEM [ LKEYS.KEYREL.PRED _after_p_rel,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--MALCASE -,
            PHON.ONSET voc ] ].

after_p3 := p_cp_i-nmod_le &
 [ ORTH < "after" >,
   SYNSEM [ LKEYS.KEYREL.PRED _after_p_rel,
            LOCAL.CAT.HEAD [ MINORS.NORM no_rel,
	                     MOD.FIRST.OPT - ],
            PHON.ONSET voc ] ].

age_v1 := v_-_unacc_le &
 [ ORTH < "age" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_age_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET voc ] ].

aged_a1 := v_-_psv_le &
 [ ORTH < "aged" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_age_v_1_rel",
            PHON.ONSET voc ] ].

ahead_of := p_np_i_le &
 [ ORTH < "ahead", "of" >,
   SYNSEM [ LKEYS.KEYREL.PRED _ahead+of_p_rel,
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--BAREDPP.BP-AHEADOF +,
            PHON.ONSET voc ] ].

aim_v2 := v_vp_seq_le &
 [ ORTH < "aim" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_aim_v_1_rel",
            LOCAL.CAT.HEAD.--HAVEBE -,
            PHON.ONSET voc ] ].

;; DPF 2018-10-02 - Mass only, to trigger robust |the city has bad airs|,
;; but also add plural non-modifiable `airs' for idiomatic |she put on airs| and
;; |he gave himself fancy airs|
;;
air_n1 := n_-_m_le &
 [ ORTH < "air" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_air_n_1_rel",
            PHON.ONSET voc ] ].

airs_n1_i := n_-_c-br-idm_le &
 [ ORTH < "airs" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_airs_n_i_rel",
            PHON.ONSET voc ] ].

air_v1 := v_-_unacc_le &
 [ ORTH < "air" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_air_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET voc ] ].

aircraft_n1 := n_-_c_le &
 [ ORTH < "aircraft" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_aircraft_n_1_rel",
	    LOCAL.CAT cat_infl_nosuff,
            PHON.ONSET voc ] ].

airplane_n1 := n_-_c-transp_le &
 [ ORTH < "airplane" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_airplane_n_1_rel",
            PHON.ONSET voc ] ].

airport_n1 := n_-_c_le &
 [ ORTH < "airport" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_airport_n_1_rel",
            LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET voc ] ].

alarm_n1 := n_-_c_le &
 [ ORTH < "alarm" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_alarm_n_1_rel",
            PHON.ONSET voc ] ].

alarm_v1 := v_np_le &
 [ ORTH < "alarm" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_alarm_v_1_rel",
            LOCAL.CAT.HEAD.--MAL3SG -,
            PHON.ONSET voc ] ].

alarming_a1 := aj_-_i-prd_le &
 [ ORTH < "alarming" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_alarming_a_1_rel",
            PHON.ONSET voc ] ].

alert_a1 := aj_-_i_le &
 [ ORTH < "alert" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_alert_a_1_rel",
	    LOCAL.CAT.HEAD.--MALSBRD -,
            PHON.ONSET voc ] ].

alert_v3 := v_np_le &
 [ ORTH < "alert" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_alert_v_to_rel",
	    LOCAL.CAT.HEAD [ --CLRC -,
			     --MALCOPBSE - ],
            PHON.ONSET voc ] ].

;; Restrict this to plural noun heads, to avoid ambiguity for "all night"
;; DPF 2016-07-14 - But this blocks "We spent all day working."  So instead
;; restrict to non-nominative
;;
all_det_adj := d_-_all-tm_le &
 [ ORTH < "all" >,
   SYNSEM [ LKEYS.ALTKEYREL.PRED "_all_a_1_rel",
            LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CAT.HEAD.CASE non_nom,
            PHON.ONSET voc ] ].

;; Avoid robust |we all| for |our all|
all_n1 := n_-_c-poss_le &
 [ ORTH < "all" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_all_n_1_rel",
            LOCAL.CAT [ VAL.SPR.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
			HEAD.--FRAG - ],
            PHON.ONSET voc ] ].

allow_v2 := v_np_le &
 [ ORTH < "allow" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_allow_v_1_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
            PHON.ONSET voc ] ].

;; Block |although [exhausted after the journey, we arose]|
although := p_cp_s_le &
 [ ORTH < "although" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_although_p_1_rel",
            LOCAL.CAT.VAL.COMPS.FIRST.MODIFD notmod_or_rmod,
            PHON.ONSET voc ] ].

anaconda_n1 := n_-_c_le &
 [ ORTH < "anaconda" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_anaconda_n_1_rel",
	    LOCAL.CAT cat_infl_nosuff,
            PHON.ONSET voc ] ].

;; To also generate reversed order of conjuncts via paraphrase rule.
;;
#|
and_conj_rev := c_xp_and_le &
 [ ORTH < "and" >,
   SYNSEM [ LKEYS.KEYREL.PRED _and_c_rev_rel,
            PHON.ONSET voc ] ].
|#

; Block |he/she|
and_or_conj_3 := c_xp_and-or_le &
 [ ORTH < "/" >,
   SYNSEM [ LOCAL.CAT.VAL.COMPS.FIRST.--MIN nonpro_or_event_rel,
	    PHON.ONSET voc ] ].

and_so_on_conj := c_-_so-on_le &
 [ ORTH < "and", "so", "on" >,
   SYNSEM [ LOCAL [ CAT.MC na_or_-,
		    CONT.RELS <! [ ARG1 nonconj_indiv ] !> ],
	    PHON.ONSET voc ] ].
	    
and_so_on_conj_2 := c_-_so-on_le &
 [ ORTH < "and", "so", "on", "." >,
   SYNSEM [ LOCAL [ CAT.MC na_or_-,
		    CONT.RELS <! [ ARG1 nonconj_indiv ] !> ],
	    PHON.ONSET voc ] ].

;; 2021-04-07 - To enable cmod rule as in robust "arose and then after arrived"
and_then_conj := c_xp_and_le &
 [ ORTH < "and", "then" >,
   SYNSEM.PHON.ONSET voc ].

angelic_a1 := aj_-_i_le &
 [ ORTH < "angelic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_angelic_a_1_rel",
	    LOCAL.CAT.HEAD.--MALSBRD -,
            PHON.ONSET voc ] ].

angle_v1 := v_-_le &
 [ ORTH < "angle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_angle_v_1_rel",
            LOCAL.CAT.HEAD.--MALN3SG -,
            PHON.ONSET voc ] ].

any_longer_adv1 := av_-_i-vp-x_le &
 [ ORTH < "any", "longer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_any+longer_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con,
	    LOCAL.CAT.NEGPOL - ] ].

any_longer_adv2 := av_-_i-vp-po_le &
 [ ORTH < "any", "longer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_any+longer_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con,
	    LOCAL.CAT.NEGPOL - ] ].

anything := n_-_pr_le &
 [ ORTH < "anything" >,
   SYNSEM [ LKEYS [ ALTKEYREL.PRED _any_q_rel,
                    KEYREL.PRED thing_rel ],
            PHON.ONSET voc,
	    LOCAL.CAT.NEGPOL - ] ].

answer_n1 := n_pp_c-ns_le &
 [ ORTH < "answer" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_answer_n_to_rel" ],
            LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET voc ] ].

answer_v2 := v_np*_le &
 [ ORTH < "answer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_answer_v_1_rel",
	    LOCAL.CAT.HEAD [ --CLRC -,
			     --NOCJCRD - ],
            PHON.ONSET voc ] ].

apology_n1 := n_-_c_le &
 [ ORTH < "apology" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_apology_n_1_rel",
            LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET voc ] ].

appeal_v2 := v_-_le &
 [ ORTH < "appeal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_appeal_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET voc ] ].

appeal_v2_tr := v_np_le &
 [ ORTH < "appeal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_appeal_v_1_rel",
            PHON.ONSET voc ] ].

appoint_v1 := v_np_le &
 [ ORTH < "appoint" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_appoint_v_1_rel",
            PHON.ONSET voc ] ].

appoint_v1 := v_np_le &
 [ ORTH < "appoint" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_appoint_v_1_rel",
            PHON.ONSET voc ] ].

appreciate_v2 := v_-_le &
 [ ORTH < "appreciate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_appreciate_v_2_rel",
	    LOCAL.CONT.HOOK.XARG.SORT nonhuman,
            PHON.ONSET voc ] ].

archerfish_n1 := n_-_mc_le &
 [ ORTH < "archerfish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_archerfish_n_1_rel",
	    LOCAL.CAT cat_infl_nosuff &
   	    	      [ HEAD.--BARE - ],
            PHON.ONSET voc ] ].

;; Block robust rel-NP "when" in "the time when he was around"
;; DPF 2022-04-23 - The COMPS..NORM no_rel blocks "We arrived around mid-July"
;; so remove and and revisit if needed.
;; Try again to block robust "when he was around" by blocking extraction.
around := p_np_i_le &
 [ ORTH < "around" >,
   SYNSEM [ LKEYS.KEYREL.PRED _around_p_rel,
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--BAREDPP.BP-AROUND +,
	    NONLOC.SLASH.LIST < >,
            PHON.ONSET voc ] ].

arrest_v1 := v_-_le &
 [ ORTH < "arrest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_arrest_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET voc ] ].

arrest_v1_tr := v_np_le &
 [ ORTH < "arrest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_arrest_v_1_rel",
            PHON.ONSET voc ] ].

as_if_p := p_np_i_le &
 [ ORTH < "as", "if" >,
   SYNSEM [ LKEYS.KEYREL.PRED _as+if_p_rel,
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--MALCASE -,
            PHON.ONSET voc ] ].

;; DPF 2019-01-14 - Block robust |[as my] teacher arrived|, and |as they ...|
as_p1 := p_np_i_le &
 [ ORTH < "as" >,
   SYNSEM [ LKEYS.KEYREL.PRED _as_p_rel,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD [ --POSSRBST -,
						       --MALCPNP -,
	                                               --MALCASE - ],
            PHON.ONSET voc ] ].

as_per_p1 := p_np_i-nm_le &
 [ ORTH < "as", "per" >,
   SYNSEM [ LKEYS.KEYREL.PRED _per_p_rel,
            PHON.ONSET voc ] ].

;; Avoid robust "as [if nothing had happened]"
as_prtcl := p_np_ptcl_le &
 [ ORTH < "as" >,
   SYNSEM [ LKEYS.KEYREL.PRED _as_p_sel_rel,
            LOCAL.CAT.VAL.COMPS.FIRST [ LOCAL.CAT.HEAD [ --POSSRBST -,
							 --MALCPNP -,
							 --MALCASE - ],
					--SIND.SORT norm-entity-or-event ],
            PHON.ONSET voc ] ].

as_subord := p_cp_s-anytns_le &
 [ ORTH < "as" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_as_x_subord_rel",
            PHON.ONSET voc ] ].

;; Avoid for "asking questions is ..."
ask_v1 := v_np*-np*_only_le &
 [ ORTH < "ask" >,
   ALTS.VADJ -,
   SYNSEM [ LKEYS.KEYREL.PRED "_ask_v_1_rel",
	    LOCAL.CAT.HEAD.--CLRC -,
            PHON.ONSET voc ] ].

asleep_a1 := aj_-_i-prd_le &
 [ ORTH < "asleep" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_asleep_a_1_rel",
            LOCAL.CAT.VAL.SPR.FIRST unexpressed,
            PHON.ONSET voc ] ].

assay_v2 := v_-_le &
 [ ORTH < "assay" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_assay_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET voc ] ].

assay_v2_tr := v_np_le &
 [ ORTH < "assay" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_assay_v_1_rel",
            PHON.ONSET voc ] ].

assent_v1 := v_-_le &
 [ ORTH < "assent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_assent_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET voc ] ].

assess_v1 := v_np_le &
 [ ORTH < "assess" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_assess_v_1_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
            PHON.ONSET voc ] ].

assign_v2 := v_np_le &
 [ ORTH < "assign" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_assign_v_1_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
            PHON.ONSET voc ] ].

assume_v1 := v_cp_prop_le &
 [ ORTH < "assume" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_assume_v_1_rel",
	    LOCAL.CAT.HEAD.--NOCJCRD -,
            PHON.ONSET voc ] ].

assure_v2 := v_np_le &
 [ ORTH < "assure" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_assure_v_of_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
            PHON.ONSET voc ] ].

at := p_np_i-reg_le &
 [ ORTH < "at" >,
   SYNSEM [ LKEYS.KEYREL.PRED _at_p_loc_rel,
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--BAREDPP.BP-AT +,
            PHON.ONSET voc ] ].

;; For "We are at present the leaders"
at_present_adv1 := av_-_i-vp-x_le &
 [ ORTH < "at", "present" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_at+present_p_rel",
            PHON.ONSET voc ] ].

attack_v1 := v_-_le &
 [ ORTH < "attack" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_attack_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET voc ] ].

attack_v1_tr := v_np_le &
 [ ORTH < "attack" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_attack_v_1_rel",
            PHON.ONSET voc ] ].

attest_v1 := v_np*_le &
 [ ORTH < "attest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_attest_v_1_rel",
	    LOCAL.CAT.HEAD.--NOCJCRD -,
            PHON.ONSET voc ] ].

attire_v1 := v_-_le &
 [ ORTH < "attire" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_attire_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET voc ] ].

attire_v1_tr := v_np_le &
 [ ORTH < "attire" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_attire_v_1_rel",
            PHON.ONSET voc ] ].

avenue_n2 := n_-_c_le &
 [ ORTH < "ave" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_avenue_n_1_rel",
            LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET voc ] ].

average_n1 := n_pp_c-nocnh-of_le &
 [ ORTH < "average" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_average_n_of_rel",
   	    LOCAL.CAT.HEAD.--BAREPP [ BP-BELOW -,
				      BP-ON - ],
            PHON.ONSET voc ] ].

awake_a1 := aj_-_i-prd_le &
 [ ORTH < "awake" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_awake_a_1_rel",
            LOCAL.CAT.VAL.SPR.FIRST unexpressed,
            PHON.ONSET voc ] ].

;; DPF 2020-09-09 - Block robust rel-cl |when we awake| but need more general
;; solution for robust "when".  FIX.
awake_v1 := v_np_noger_le &
 [ ORTH < "awake" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_awake_v_cause_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.--SIND.SORT nonloc,
            PHON.ONSET voc ] ].

award_v2 := v_np_le &
 [ ORTH < "award" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_award_v_1_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
            PHON.ONSET voc ] ].

awful_adv := av_-_i-vp-po_le &
 [ ORTH < "awful" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_awful_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET voc ] ].

aunt_n1 := n_pp_c-of_le &
 [ ORTH < "aunt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_aunt_n_of_rel",
            LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET voc ] ].

automobile_n1 := n_-_c-transp_le &
 [ ORTH < "automobile" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_automobile_n_1_rel",
            PHON.ONSET voc ] ].

a_plus_n1 := n_-_c_le &
 [ ORTH < "A+" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_A+_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,   
            PHON.ONSET voc ] ].

baby_n1 := n_-_c_le &
 [ ORTH < "baby" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_baby_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

;; |*babysitting she|
babysit_v1 := v_np*_le &
 [ ORTH < "babysit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_babysit_v_1_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--MALCASE -,
            PHON.ONSET con ] ].

back_n1 := n_-_c_le &
 [ ORTH < "back" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_back_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

back_order_v1 := v_-_le &
 [ ORTH < "back", "order" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_back+order_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

back_order_v2 := v_-_le &
 [ ORTH < "back", "-", "order" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_back+order_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

back_order_v1_tr := v_np_le &
 [ ORTH < "back", "order" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_back+order_v_1_rel",
            PHON.ONSET con ] ].

back_order_v2_tr := v_np_le &
 [ ORTH < "back", "-", "order" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_back+order_v_1_rel",
            PHON.ONSET con ] ].

backfire_v1 := v_-_le &
 [ ORTH < "backfire" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_backfire_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

backlight_v1 := v_-_le &
 [ ORTH < "backlight" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_backlight_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

backlight_v1_tr := v_np_le &
 [ ORTH < "backlight" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_backlight_v_1_rel",
            PHON.ONSET con ] ].

backorder_v1 := v_-_le &
 [ ORTH < "backorder" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_back+order_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

backorder_v1_tr := v_np_le &
 [ ORTH < "backorder" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_back+order_v_1_rel",
            PHON.ONSET con ] ].

;; LPERIPH na_or_+ prevents |watch bad| as N-J compound
;; DPF 2018-10-02 - But it also prevents robust |She has bad cold|, 
;; So instead use NORM norm_rel to block |watch bad|
bad_a1 := aj_pp_i-er_le &
 [ ORTH < "bad" >,
   SYNSEM [ LKEYS [ --COMPKEY _at_p_sel_rel,
                    KEYREL.PRED "_bad_a_at_rel" ],
            LOCAL.CAT.HEAD [ --SBRD -,
	                     MINORS.NORM norm_rel ],
            PHON.ONSET con ] ].

badly_adv1 := av_-_i-vp_le &
 [ ORTH < "badly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bad_a_1_rel",
            PHON.ONSET con ] ].

bail_v1 := v_-_le &
 [ ORTH < "bail" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bail_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

bake_v2 := v_np_noger_le &
 [ ORTH < "bake" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_bake_v_cause_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
            PHON.ONSET con ] ].

;; Avoid misanalysis for |yesterday he baked apple pie|
bake_v3 := v_np-np_only_le &
 [ ORTH < "bake" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bake_v_cause_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

balance_v1 := v_-_le &
 [ ORTH < "balance" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_balance_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

balance_v1_tr := v_np_le &
 [ ORTH < "balance" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_balance_v_1_rel",
            PHON.ONSET con ] ].

ball_n1 := n_pp_c-of_le &
 [ ORTH < "ball" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ball_n_of_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

ballpark_n1 := n_-_c_le &
 [ ORTH < "ballpark" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ballpark_n_1_rel",
            LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

ban_n1 := n_-_c_le &
 [ ORTH < "ban" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ban_n_1_rel",
            LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

bang_v2 := v_-_unacc_le &
 [ ORTH < "bang" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bang_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

bank_n1 := n_pp_mc-of-lhc_le &
 [ ORTH < "bank" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bank_n_of_rel",
            LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

bank_v1 := v_-_le &
 [ ORTH < "bank" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bank_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

bank_v1_tr := v_np_le &
 [ ORTH < "bank" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bank_v_1_rel",
            PHON.ONSET con ] ].

banter_v1 := v_-_le &
 [ ORTH < "banter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_banter_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

bar_n1 := n_-_c-ns_le &
 [ ORTH < "bar" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bar_n_1_rel",
            PHON.ONSET con ] ].

; Avoid robust "because he ate [her candy bar]"
bar_v2 := v_np_le &
 [ ORTH < "bar" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bar_v_from_rel",
	    LOCAL.CAT.HEAD.--MAL3SG -,
            PHON.ONSET con ] ].

barbecue_v1 := v_np_le &
 [ ORTH < "barbecue" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_barbecue_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

barbecue_v1_tr := v_np_le &
 [ ORTH < "barbecue" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_barbecue_v_1_rel",
            PHON.ONSET con ] ].

barbeque_v1 := v_-_le &
 [ ORTH < "barbeque" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_barbeque_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

barbeque_v1_tr := v_np_le &
 [ ORTH < "barbeque" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_barbeque_v_1_rel",
            PHON.ONSET con ] ].

bark_v1 := v_-_le &
 [ ORTH < "bark" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bark_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

base_n1 := n_-_c-ed_le &
 [ ORTH < "base" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_base_n_1_rel",
	    LOCAL.CAT.HEAD.--BAREPP [ BP-OFF -,
				      BP-ON - ],
            PHON.ONSET con ] ].

bat_n1 := n_-_c_le &
 [ ORTH < "bat" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bat_n_1_rel",
	    LOCAL.CAT.HEAD.--BAREPP.BP-AT -,
            PHON.ONSET con ] ].

battle_v1 := v_-_le &
 [ ORTH < "battle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_battle_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

battle_v1_tr := v_np_le &
 [ ORTH < "battle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_battle_v_1_rel",
            PHON.ONSET con ] ].

bay_n1 := n_-_c_le &
 [ ORTH < "bay" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bay_n_1_rel",
	    LOCAL.CAT.HEAD.--BAREPP.BP-AT -,
            PHON.ONSET con ] ].

bbc_n1 := n_-_pn_le &
 [ ORTH < "BBC" >,
   SYNSEM [ LKEYS.KEYREL.CARG "BBC",
            PHON.ONSET con ] ].

be_id_was_pron := v_np_was_le_pron &
 [ ORTH < "was" >,
   SYNSEM [ LOCAL.CAT.VAL.COMPS.FIRST [ LOCAL [ AGR.PNG.PN pl,
                                                CAT.HEAD noun ],
				        --SIND nonconj_ref-ind & [ PNG.PN pl ]],
            PHON.ONSET con ] ].

beam_v1 := v_np*_le &
 [ ORTH < "beam" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_beam_v_to_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
            PHON.ONSET con ] ].

bear_n1 := n_-_c-ugen_le &
 [ ORTH < "bear" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bear_n_1_rel",
            PHON.ONSET con ] ].

beat_up_v1 := v_p-np_le &
 [ ORTH < "beat" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_beat_v_up_rel" ],
	    LOCAL.CAT.HEAD.TAM.SAME-PAST +,
            PHON.ONSET con ] ].

beat_v1 := v_np*_le &
 [ ORTH < "beat" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_beat_v_to_rel",
	    LOCAL.CAT.HEAD.TAM.SAME-PAST +,
            PHON.ONSET con ] ].

beat_v2 := v_np-pp_to_le &
 [ ORTH < "beat" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_beat_v_to_rel",
	    LOCAL.CAT.HEAD.TAM.SAME-PAST +,
            PHON.ONSET con ] ].

;; DPF 2018-03-07 - Prevent this common adjective, in particular, from being
;; used as subconj, as in |This makes outdoor plants less beautiful|.
;;
beautiful_a1 := aj_-_i_le &
 [ ORTH < "beautiful" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_beautiful_a_1_rel",
	    LOCAL.CAT.HEAD.--SBRD -,
            PHON.ONSET con ] ].

beaver_n1 := n_-_c_le &
 [ ORTH < "beaver" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_beaver_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

become_v2 := v_np_id_le &
 [ ORTH < "become" >,
   SYNSEM [ LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--BARE -,
	    LKEYS.KEYREL.PRED "_become_v_id_rel",
            PHON.ONSET con ] ].

bed_n1 := n_-_c_le &
 [ ORTH < "bed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bed_n_1_rel",
   	    LOCAL.CAT.HEAD.--BAREPP [ BP-FOR -,
				      BP-IN -,
				      BP-INTO -,
				      BP-OUTOF -,
				      BP-TO - ],
            PHON.ONSET con ] ].

beef_n1 := n_-_mc-ns_le &
 [ ORTH < "beef" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_beef_n_1_rel",
	    MODIFD.LPERIPH na_or_+,
            PHON.ONSET con ] ].

;; Prevent topicalized, to avoid spurious run-on: |before he arrived, we arose.|
;;
before_adv1 := pp_-_i-vm_le &
 [ ORTH < "before" >,
   SYNSEM [ LKEYS.KEYREL.PRED _before_p_rel,
	    LOCAL.CTXT.ACTIVATED -,
            PHON.ONSET con ] ].

;; 2018-03-17 - Avoid robust-case NP in confusion with CP-taking variant, as in
;; |... these [problems before he] made a mistake|
;; 2020-06-18 - But NORM norm_rel also blocks |before that|, so switch to
;; --MALCASE
before3 := p_np_i_le &
 [ ORTH < "before" >,
   SYNSEM [ LKEYS.KEYREL.PRED _before_p_rel,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--MALCASE -,
            PHON.ONSET con ] ].

behind := p_np_i_le &
 [ ORTH < "behind" >,
   SYNSEM [ LKEYS.KEYREL.PRED _behind_p_rel,
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--BAREDPP.BP-BEHIND +,
            PHON.ONSET con ] ].

;; 2021-01-13 - Block compound "the idea behind ..."
behind_n1 := n_-_c-nochd_le &
 [ ORTH < "behind" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_behind_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,   
            PHON.ONSET con ] ].

beijing_n1 := n_-_pn_le &
 [ ORTH < "Beijing" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Beijing",
            LOCAL.CAT.HEAD.--NOTTL -,
            PHON.ONSET con ] ].

being_n1 := n_-_c-sg-ifl-nochd_le &
 [ ORTH < "being" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_being_n_1_rel",
            PHON.ONSET con ] ].

believe_v1 := v_np*_le &
 [ ORTH < "believe" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_believe_v_1_rel",
	    LOCAL.CAT.HEAD.--NOCJCRD -,
            PHON.ONSET con ] ].

below := p_np_i_le &
 [ ORTH < "below" >,
   SYNSEM [ LKEYS.KEYREL.PRED _below_p_rel,
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--BAREDPP.BP-BELOW +,
            PHON.ONSET con ] ].

benefit_n2 := n_-_mc-ns_le &
 [ ORTH < "benefit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_benefit_n_of_rel",
            LOCAL.CAT.HEAD.MINORS.NORM norm_rel,
            PHON.ONSET con ] ].

benefit_v1 := v_-_le &
 [ ORTH < "benefit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_benefit_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

benefit_v1_tr := v_np_le &
 [ ORTH < "benefit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_benefit_v_1_rel",
            PHON.ONSET con ] ].

bequeath_v2 := v_np_le &
 [ ORTH < "bequeath" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_bequeath_v_1_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
            PHON.ONSET con ] ].

bernard_n1 := n_-_pn_le &
 [ ORTH < "Bernard" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Bernard",
            PHON.ONSET con ] ].

beset_v1 := v_np-pp_e_le &
 [ ORTH < "beset" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_beset_v_with_rel" ],
	    LOCAL.CAT.HEAD.TAM.SAME-PAST +,
            PHON.ONSET con ] ].

beset_v2 := v_np_le &
 [ ORTH < "beset" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_beset_v_with_rel",
	    LOCAL.CAT.HEAD.TAM.SAME-PAST +,
            PHON.ONSET con ] ].

best_adv1 := av_-_i-vp-pr_le &
 [ ORTH < "best" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_best_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

best_adv2 := av_-_i-vp-po-nmb_le &
 [ ORTH < "best" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_best_a_1_rel",
	    LOCAL.CAT [ HEAD.--ADVADJ -,
	                VAL.SPR.FIRST unexpressed_min ],
            PHON.ONSET con ] ].

bet_on_v1 := v_np*-pp_e_le &
 [ ORTH < "bet" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_bet_v_on_rel" ],
	    LOCAL.CAT.HEAD.TAM.SAME-PAST +,
            PHON.ONSET con ] ].

bet_v1 := v_np-np-cp_le &
 [ ORTH < "bet" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bet_v_on_rel",
	    LOCAL.CAT.HEAD.TAM.SAME-PAST +,
            PHON.ONSET con ] ].

bet_v2 := v_np*_le &
 [ ORTH < "bet" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bet_v_1_rel",
	    LOCAL.CAT.HEAD.TAM.SAME-PAST +,
            PHON.ONSET con ] ].

;; |We better study use|
;; DPF 2018-03-06 - But we want |so we can better understand X|, so leave as is
#|
better_adv1 := av_-_i-vp-cmp_le &
 [ ORTH < "better" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_better_a_1_rel",
            LOCAL.CAT.POSTHD +,
            PHON.ONSET con ] ].
|#

better_a1 := aj_pp_i-cmp_le &
 [ ORTH < "better" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_good_a_at-for-of_rel",
            LOCAL.CAT.HEAD.--SBRD na,
            PHON.ONSET con ] ].

;; 2020-08-11 - Added --ROBAUX -
;; Avoid robust "helps [us better prepare for]"
better_aux := v_vp_mdl-p-niv_le &
 [ ORTH < "better" >,
   ALTS.VPELLIP -,
   SYNSEM [ LKEYS.KEYREL.PRED _had+better_v_qmodal_rel,
	    LOCAL.CAT [ HEAD.--ROBAUX -,
			VAL.SUBJ.FIRST.LOCAL.CAT.HEAD.--MALCASE - ],
            PHON.ONSET con ] ].

;; DPF 2017-09-12 - Block unwanted parse for
;; |the population increased between the years 1995 and 2004|
;;
between := p_np_i_le &
 [ ORTH < "between" >,
   SYNSEM [ LOCAL.CAT.HEAD.MINORS.ALTMIN no_rel,
            LKEYS.KEYREL.PRED _between_p_rel,
            PHON.ONSET con ] ].

bicycle_n1 := n_-_c-transp_le &
 [ ORTH < "bicycle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bicycle_n_1_rel",
            PHON.ONSET con ] ].

bid_on_v1 := v_pp_e_le &
 [ ORTH < "bid" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_bid_v_on_rel" ],
	    LOCAL.CAT.HEAD.TAM.SAME-PAST +,
            PHON.ONSET con ] ].

bid_v1 := v_np-vp_oeq_le &
 [ ORTH < "bid" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bid_v_1_rel",
	    LOCAL.CAT.HEAD.TAM.SAME-PAST +,
            PHON.ONSET con ] ].

bid_v2 := v_np*_le &
 [ ORTH < "bid" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bid_v_1_rel",
	    LOCAL.CAT.HEAD.TAM.SAME-PAST +,
            PHON.ONSET con ] ].

bid_v3 := v_vp_seq_le &
 [ ORTH < "bid" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bid_v_1_rel",
	    LOCAL.CAT.HEAD.TAM.SAME-PAST +,
            PHON.ONSET con ] ].

bike_n1 := n_-_c-transp_le &
 [ ORTH < "bike" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bike_n_1_rel",
            PHON.ONSET con ] ].

bike_v1 := v_pp*_dir_le &
 [ ORTH < "bike" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bike_v_1_rel",
	    LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
            PHON.ONSET con ] ].

bill_n1 := n_pp_c-of-lhc_le &
 [ ORTH < "bill" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bill_n_of_rel",
   	    LOCAL.CAT.HEAD.--BARE -,   
            PHON.ONSET con ] ].

billfish_n1 := n_-_mc_le &
 [ ORTH < "billfish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_billfish_n_1_rel",
	    LOCAL.CAT cat_infl_nosuff &
	    	      [ HEAD.--BARE - ],
            PHON.ONSET con ] ].

bimonthly_adv := av_-_i-vp_le &
 [ ORTH < "bimonthly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bimonth_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

binge_v1 := v_-_le &
 [ ORTH < "binge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_binge_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

biography_n1 := n_-_c_le &
 [ ORTH < "biography" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_biography_n_1_rel",
            PHON.ONSET con ] ].

birthday_n1 := n_-_c_le &
 [ ORTH < "birthday" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_birthday_n_1_rel",
            PHON.ONSET con ] ].

;; Needed to get robust "you birthday party" where robust "you" wants nomod N
birthday_party_n1 := n_-_c_le &
 [ ORTH < "birthday", "party" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_birthday+party_n_1_rel",
            PHON.ONSET con ] ].

bite_v1 := v_-_le &
 [ ORTH < "bite" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bite_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

bite_v1_tr := v_np_le &
 [ ORTH < "bite" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bite_v_1_rel",
            PHON.ONSET con ] ].

bivouac_v1 := v_-_le &
 [ ORTH < "bivouac" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bivouac_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

;; Block this entry, and only use the color-noun entry.
#|
black_n1 := n_-_c_le &
 [ ORTH < "black" >,
   SYNSEM [ LOCAL.CAT.HEAD.MINORS.NORM norm_rel,
   	    LKEYS.KEYREL.PRED "_black_n_1_rel",
            PHON.ONSET con ] ].
|#

blackmail_v1 := v_-_le &
 [ ORTH < "blackmail" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_blackmail_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

blackmail_v1_tr := v_np_le &
 [ ORTH < "blackmail" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_blackmail_v_1_rel",
            PHON.ONSET con ] ].

blare_v1 := v_-_le &
 [ ORTH < "blare" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_blare_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

blare_v1_tr := v_np_le &
 [ ORTH < "blare" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_blare_v_1_rel",
            PHON.ONSET con ] ].

blast_v1 := v_-_le &
 [ ORTH < "blast" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_blast_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

blast_v1_tr := v_np_le &
 [ ORTH < "blast" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_blast_v_1_rel",
            PHON.ONSET con ] ].

bleach_v1 := v_-_le &
 [ ORTH < "bleach" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bleach_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

bleach_v1_tr := v_np_le &
 [ ORTH < "bleach" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bleach_v_1_rel",
            PHON.ONSET con ] ].

bleed_v2 := v_-_unacc_le &
 [ ORTH < "bleed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bleed_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

;; Avoid object gap for "the moment that he blinked"
blink_v1 := v_np_le &
 [ ORTH < "blink" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_blink_v_1_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST canonical_synsem,
            PHON.ONSET con ] ].

blink_v2 := v_-_le &
 [ ORTH < "blink" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_blink_v_1_rel",
            PHON.ONSET con ] ].

bloom_n1 := n_-_c_le &
 [ ORTH < "bloom" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bloom_n_1_rel",
	    LOCAL.CAT.HEAD.--BAREPP [ BP-IN -,
				      BP-INTO - ],
            PHON.ONSET con ] ].

blossom_n1 := n_-_c_le &
 [ ORTH < "blossom" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_blossom_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,   
            PHON.ONSET con ] ].

blush_v1 := v_-_le &
 [ ORTH < "blush" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_blush_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

bluster_v1 := v_-_le &
 [ ORTH < "bluster" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bluster_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

board_n1 := n_pp_mc-of-lhc_le &
 [ ORTH < "board" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_board_n_of_rel",
	    LOCAL.CAT.HEAD.--BAREPP.BP-ON -,
            PHON.ONSET con ] ].

board_v1 := v_-_le &
 [ ORTH < "board" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_board_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

board_v1_tr := v_np_le &
 [ ORTH < "board" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_board_v_1_rel",
            PHON.ONSET con ] ].

boat_n1 := n_-_c-transp_le &
 [ ORTH < "boat" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_boat_n_1_rel",
            PHON.ONSET con ] ].

boat_v1 := v_pp*_dir_le &
 [ ORTH < "boat" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_boat_v_1_rel",
	    LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
            PHON.ONSET con ] ].

bodily := av_-_i-vp_le &
 [ ORTH < "bodily" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bodily_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

book_v2 := v_np_le &
 [ ORTH < "book" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_book_v_1_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
            PHON.ONSET con ] ].

boot_n1 := n_-_mc_le &
 [ ORTH < "boot" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_boot_n_1_rel",
	    LOCAL.CAT.HEAD.--BAREPP.BP-TO -,
            PHON.ONSET con ] ].

booze_v1 := v_-_le &
 [ ORTH < "booze" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_booze_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

;; Avoid for |jigsaw puzzles bore friends|
bore_n1 := n_-_c-nocnh_le &
 [ ORTH < "bore" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bore_n_1_rel",
            PHON.ONSET con ] ].

;; We want "Kim is serious and boring" where we've blocked the adj-adj coord
;; for adj "boring" which requires an overt specifier, so we need the obj-drop
;; "boring".
#|
bore_v1 := v_np_le &
 [ ORTH < "bore" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bore_v_1_rel",
            PHON.ONSET con ] ].
|#

both_adv1 := av_-_i-vp-x_le &
 [ ORTH < "both" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_both_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

;; |in April both school had ...|
both_adv2 := av_-_i-ap-pp_le &
 [ ORTH < "both" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_both_a_1_rel",
            LOCAL.CAT [ POSTHD -,
			HEAD.--ADVADJ - ],
            PHON.ONSET con ] ].

bother_v1 := v_-_le &
 [ ORTH < "bother" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bother_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

bother_v1_tr := v_np_le &
 [ ORTH < "bother" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bother_v_1_rel",
            PHON.ONSET con ] ].

bottom_n1 := n_-_c-ed_le &
 [ ORTH < "bottom" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bottom_n_1_rel",
	    LOCAL.CAT.HEAD.--BAREPP.BP-AT -,
            PHON.ONSET con ] ].

boulevard_n1 := n_-_c_le &
 [ ORTH < "boulevard" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_boulevard_n_1_rel",
            LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

boy_n1 := n_-_c-msc_le &
 [ ORTH < "boy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_boy_n_1_rel",
            PHON.ONSET con ] ].

boycott_v1 := v_-_le &
 [ ORTH < "boycott" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_boycott_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

boycott_v1_tr := v_np_le &
 [ ORTH < "boycott" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_boycott_v_1_rel",
            PHON.ONSET con ] ].

;; DPF 2019-02-10 - Favor non-robust |from branch to branch|
branch_n1 := n_pp_c-of_le &
 [ ORTH < "branch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_branch_n_of_rel",
            LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

brand_n2 := n_pp_mc-of_le &
 [ ORTH < "brand" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_brand_n_of_rel",
            LOCAL.CAT [ HEAD.--OFMOD -,
			VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--BARE - ],
            PHON.ONSET con ] ].

brand_v1 := v_np_le &
 [ ORTH < "brand" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_brand_v_1_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
            PHON.ONSET con ] ].

;; Only mass, to catch |we bought some breads|
bread_n1 := n_-_m_le &
 [ ORTH < "bread" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bread_n_1_rel",
            PHON.ONSET con ] ].

break_v2 := v_-_unacc_le &
 [ ORTH < "break" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_break_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

breakfast_n1 := n_-_mc_le &
 [ ORTH < "breakfast" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_breakfast_n_1_rel",
            LOCAL [ CAT.HEAD.MINORS.NORM norm_rel,
	            CONT.HOOK.INDEX.PNG.GEN neut ],
	    MODIFD.LPERIPH na_or_+,
            PHON.ONSET con ] ].

breakfast_v1 := v_-_le &
 [ ORTH < "breakfast" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_breakfast_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

breed_n2 := n_pp_mc-of_le &
 [ ORTH < "breed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_breed_n_of-n_rel",
            LOCAL.CAT [ HEAD.--OFMOD -,
			VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--BARE - ],
            PHON.ONSET con ] ].

bristle_v1 := v_-_le &
 [ ORTH < "bristle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bristle_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

bridge_n1 := n_-_c_le &
 [ ORTH < "bridge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bridge_n_1_rel",
            LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

brief_n1 := n_-_c_le &
 [ ORTH < "brief" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_brief_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,   
            PHON.ONSET con ] ].

bright_isect := aj_-_i-er-sbrd_le &
 [ ORTH < "bright" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bright_a_1_rel",
            PHON.ONSET con ] ].

;; 2020-11-24 - Tried adding NORM no_rel, to block robust "bring with it some 
;; good ideas", but this runs afoul of VP-coord rule, which wants NORM norm_rel.
;; So remove, and hope for better parse ranking.
;;
bring_v1 := v_np_le &
 [ ORTH < "bring" >,
   ALTS [ ATTRJ -,
	  MALPASS - ],
   SYNSEM [ LKEYS.KEYREL.PRED "_bring_v_1_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
            PHON.ONSET con ] ].

bring_v3 := v_np-np_only_le &
 [ ORTH < "bring" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bring_v_1_rel",
	    LOCAL.CAT.HEAD.MINORS.NORM no_rel,
            PHON.ONSET con ] ].

broadcast_v1 := v_-_le &
 [ ORTH < "broadcast" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_broadcast_v_to_rel",
	    LOCAL.CAT.HEAD [ TAM.SAME-PAST +,
			     --SAMENV + ],
            PHON.ONSET con ] ].

broadcast_v1_tr := v_np_le &
 [ ORTH < "broadcast" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_broadcast_v_to_rel",
	    LOCAL.CAT.HEAD.TAM.SAME-PAST +,
            PHON.ONSET con ] ].

broadcast_v2 := v_np-pp_to_le &
 [ ORTH < "broadcast" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_broadcast_v_to_rel",
	    LOCAL.CAT.HEAD.TAM.SAME-PAST +,
            PHON.ONSET con ] ].

bronze_v2 := v_-_unacc_le &
 [ ORTH < "bronze" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bronze_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

brother_n1 := n_pp_c-of-msc_le &
 [ ORTH < "brother" >,
   SYNSEM [ LOCAL.CAT.HEAD.MINORS.NORM norm_rel,
	    LKEYS.KEYREL.PRED "_brother_n_of_rel",
            PHON.ONSET con ] ].

brush_v1 := v_np_le &
 [ ORTH < "brush" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_brush_v_1_rel",
            PHON.ONSET con ] ].

budget_n1 := n_-_c_le &
 [ ORTH < "budget" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_budget_n_1_rel",
	    LOCAL.CAT.HEAD.--BAREPP [ BP-ABOVE -,
				      BP-ON - ],
            PHON.ONSET con ] ].

build_n1 := n_-_c-nocnh_le &
 [ ORTH < "build" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_build_n_1_rel",
            PHON.ONSET con ] ].

build_v1 := v_np_le &
 [ ORTH < "build" >,
   ALTS [ NGER -,
	  MALPASS - ],
   SYNSEM [ LKEYS.KEYREL.PRED "_build_v_1_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
            PHON.ONSET con ] ].

;; DPF 2017-12-21 - This was commented out, but we want it to avoid robust
;; analysis for |we continued building|
;;
building_n1 := n_-_c_le &
 [ ORTH < "building" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_building_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,   
            PHON.ONSET con ] ].

bulk_n2 := n_pp_c-gr-of_le &
 [ ORTH < "bulk" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bulk_n_of_rel",
            PHON.ONSET con ] ].

bulk_v1 := v_-_le &
 [ ORTH < "bulk" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bulk_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

bullshit_v1 := v_-_le &
 [ ORTH < "bullshit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bullshit_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

bullshit_v1_tr := v_np_le &
 [ ORTH < "bullshit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bullshit_v_1_rel",
            PHON.ONSET con ] ].

bunch_n1 := n_-_c-gr_le &
 [ ORTH < "bunch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bunch_n_of_rel",
            PHON.ONSET con ] ].

bunk_v1 := v_-_le &
 [ ORTH < "bunk" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bunk_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

burn_n1 := n_-_c_le &
 [ ORTH < "burn" >,
   SYNSEM [ LOCAL.CAT.HEAD.MINORS.NORM norm_rel,
   	    LKEYS.KEYREL.PRED "_burn_n_1_rel",
            PHON.ONSET con ] ].

burn_v2 := v_-_unacc_le &
 [ ORTH < "burn" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_burn_v_1_rel",
	    LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

burst_open_v1 := v_p-np_le &
 [ ORTH < "burst" >,
   SYNSEM [ LKEYS [ --COMPKEY _open_a_sel_rel,
                    KEYREL.PRED "_burst_v_open_rel" ],
	    LOCAL.CAT.HEAD.TAM.SAME-PAST +,
            PHON.ONSET con ] ].

burst_open_v2 := v_p_le &
 [ ORTH < "burst" >,
   SYNSEM [ LKEYS [ --COMPKEY _open_a_sel_rel,
                    KEYREL.PRED "_burst_v_open_rel" ],
	    LOCAL.CAT.HEAD.TAM.SAME-PAST +,
            PHON.ONSET con ] ].

burst_v1 := v_np_noger_le &
 [ ORTH < "burst" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_burst_v_cause_rel",
	    LOCAL.CAT.HEAD.TAM.SAME-PAST +,
            PHON.ONSET con ] ].

burst_v2 := v_-_unacc_le &
 [ ORTH < "burst" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_burst_v_1_rel",
	    LOCAL.CAT.HEAD.TAM.SAME-PAST +,
            PHON.ONSET con ] ].

burst_v3 := v_pp_dir_le &
 [ ORTH < "burst" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_burst_v_1_rel",
	    LOCAL.CAT.HEAD.TAM.SAME-PAST +,
            PHON.ONSET con ] ].

bus_n1 := n_-_c-transp_le &
 [ ORTH < "bus" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bus_n_1_rel",
            PHON.ONSET con ] ].

bustle_v1 := v_-_le &
 [ ORTH < "bustle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bustle_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

;; 20-09-29 - Restrict to refl pronoun complement, to avoid robust
;; "have busy daily lives"
busy_v1 := v_np_le &
 [ ORTH < "busy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_busy_v_1_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.--MIN refl_pron_rel,
            PHON.ONSET con ] ].

buy_n1 := n_-_c-nocnh_le &
 [ ORTH < "buy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_buy_n_1_rel",
            PHON.ONSET con ] ].

;; COMPS..RPERIPH na_or_- blocks misanalysis of |he buys his cats toys|
;;
buy_v1 := v_np_ntr_le &
 [ ORTH < "buy" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_buy_v_1_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD [ --MALPLCPD -,
	                                               --POSSRBST - ],
            PHON.ONSET con ] ].

buy_v4 := v_np-np_only_le &
 [ ORTH < "buy" >,
   ALTS.PASSIVE -,
   SYNSEM [ LKEYS.KEYREL.PRED "_buy_v_1_rel",
            PHON.ONSET con ] ].

buzz_v1 := v_-_le &
 [ ORTH < "buzz" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_buzz_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

;; DPF 2018-03-21 - Also tried restricting to directional, to avoid competing 
;; analysis for robust |he went to school by the bus|, but we also need this
;; to modify nominals, and we can't constrain the compl's SORT to entity,
;; because we need transport-sort and entity to unify in ID-copula clauses
;; as in "the bus is a good idea".
by_p := p_np_i-dgsp_le &
 [ ORTH < "by" >,
   SYNSEM [ LOCAL.CAT [ HEAD.MOD.FIRST.LOCAL.CAT.HEAD non_noun,
			VAL.COMPS < [ LOCAL.CAT.HEAD.--BARED -,
				      --SIND.TSORT entity ] > ],
	    LKEYS.KEYREL.PRED _by_p_rel,
            PHON.ONSET con ] ].

by_means_ger := p_np_i-ger_le &
 [ ORTH < "by" >,
   SYNSEM [ LKEYS.KEYREL.PRED _by_p_means_rel,
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

by_temp_p := p_np_i-tmp-vm_le &
 [ ORTH < "by" >,
   SYNSEM [ LKEYS [ --COMPKEY temp_abstr_rel,
                    KEYREL.PRED _by_p_temp_rel ],
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

;; Enable robust "passer bys"
bys_nounif_n1 := n_-_pn-nounif_le &
 [ ORTH < "bys" >,
   SYNSEM [ LKEYS.KEYREL.CARG "bys",
            PHON.ONSET con ] ].

c_lower_np1 := n_-_pn_le &
 [ ORTH < "c" >,
   SYNSEM [ LKEYS.KEYREL.CARG "C",
	    LOCAL.AGR.PNG png-reg,
            PHON.ONSET con ] ].

cable_v4 := v_np_le &
 [ ORTH < "cable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cable_v_1_rel",
	    LOCAL.CAT.HEAD.--NOCJCRD -,
            PHON.ONSET con ] ].

cake_n1 := n_-_mc_le &
 [ ORTH < "cake" >,
   SYNSEM [ MODIFD.LPERIPH na,
	    LKEYS.KEYREL.PRED "_cake_n_1_rel",
            PHON.ONSET con ] ].

call_back_v2 := v_p_le &
 [ ORTH < "call" >,
   SYNSEM [ LKEYS [ --COMPKEY _back_p_sel_rel,
                    KEYREL.PRED "_call_v_back_rel" ],
            PHON.ONSET con ] ].

call_n1 := n_-_c_le &
 [ ORTH < "call" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_call_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

call_v1 := v_np*_le &
 [ ORTH < "call" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_call_v_1_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
            PHON.ONSET con ] ].

call_v3 := v_np-prd_oeq_le &
 [ ORTH < "call" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_call_v_1_rel",
	    LOCAL.CAT.HEAD.--SBRDMOD -,
            PHON.ONSET con ] ].

camp_a1 := aj_-_i-ndpt_le &
 [ ORTH < "camp" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_camp_a_1_rel",
	    LOCAL.CAT.HEAD [ --SBRD -,
			     --MALSBRD - ],
            PHON.ONSET con ] ].

camp_n1 := n_-_mc-ns_le &
 [ ORTH < "camp" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_camp_n_1_rel",
            PHON.ONSET con ] ].

camp_v1 := v_-_le &
 [ ORTH < "camp" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_camp_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

campus_n1 := n_-_c_le &
 [ ORTH < "campus" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_campus_n_1_rel",
            LOCAL [ AGR.PNG png-irreg,
	            CAT.HEAD.--BAREPP [ BP-FROM -,
					BP-OFF -,
					BP-ON -,
					BP-TO -] ],
            PHON.ONSET con ] ].

; DPF 2010-08-31 - Need elided `can' for |run as fast as you can|
#|
can_aux_pos := v_vp_mdl-p_le &
 [ ORTH < "can" >,
   SYNSEM [ LKEYS.KEYREL.PRED _can_v_modal_rel,
            PHON.ONSET con ],
   ALTS.VPELLIP - ].
|#

;; Block ordinary negation via |he can not leave|
can_aux_pos := v_vp_mdl-p_le &
 [ ORTH < "can" >,
   ALTS.ADVADD -,
   SYNSEM [ LKEYS.KEYREL.PRED _can_v_modal_rel,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--VNEG -,
            PHON.ONSET con ] ].

;; Block cpd |can help|
;; and robust Det-N |we can|
can_n1 := n_-_c-nocnh_le &
 [ ORTH < "can" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_can_n_1_rel",
   	    LOCAL.CAT [ HEAD.--BARE -,
	                VAL.SPR.FIRST.LOCAL.CAT.HEAD.--POSSRBST - ],
            PHON.ONSET con ] ].

canvas_v1 := v_-_le &
 [ ORTH < "canvas" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_canvas_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

canvas_v1_tr := v_np_le &
 [ ORTH < "canvas" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_canvas_v_1_rel",
            PHON.ONSET con ] ].

canvass_v1 := v_-_le &
 [ ORTH < "canvass" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_canvass_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

canvass_v1_tr := v_np_le &
 [ ORTH < "canvass" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_canvass_v_1_rel",
            PHON.ONSET con ] ].

;; "her time capsule is ..."
capsule_n1 := n_-_c_le &
 [ ORTH < "capsule" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_capsule_n_1_rel",
	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

car_n1 := n_-_c-transp_le &
 [ ORTH < "car" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_car_n_1_rel",
            PHON.ONSET con ] ].

care_v1 := v_-_le &
 [ ORTH < "care" >,
   ALTS.NGER -,
   SYNSEM [ LKEYS.KEYREL.PRED "_care_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

care_for_v1 := v_pp_e_le &
 [ ORTH < "care" >,
   ALTS.NGER -,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_care_v_for_rel" ],
            PHON.ONSET con ] ].

carp_v1 := v_-_le &
 [ ORTH < "carp" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_carp_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

case_n1 := n_pp_c-of_le &
 [ ORTH < "case" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_case_n_of_rel",
	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

cast_as_v1 := v_np-pp_e_le &
 [ ORTH < "cast" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _as_p_sel_rel,
                    KEYREL.PRED "_cast_v_as_rel" ],
            LOCAL [ AGR.PNG png-irreg,
		    CAT.HEAD.TAM.SAME-PAST + ],
            PHON.ONSET con ] ].

cast_down_v1 := v_p-np_le &
 [ ORTH < "cast" >,
   SYNSEM [ LKEYS [ --COMPKEY _down_p_sel_rel,
                    KEYREL.PRED "_cast_v_down_rel" ],
	    LOCAL.CAT.HEAD.TAM.SAME-PAST +,
            PHON.ONSET con ] ].

cast_off_v1 := v_p-np_le &
 [ ORTH < "cast" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_cast_v_off_rel" ],
	    LOCAL.CAT.HEAD.TAM.SAME-PAST +,
            PHON.ONSET con ] ].

cast_off_v2 := v_p_le &
 [ ORTH < "cast" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_cast_v_off_rel" ],
	    LOCAL.CAT.HEAD.TAM.SAME-PAST +,
            PHON.ONSET con ] ].

cast_out_v1 := v_p-np_le &
 [ ORTH < "cast" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_cast_v_out_rel" ],
	    LOCAL.CAT.HEAD.TAM.SAME-PAST +,
            PHON.ONSET con ] ].

cast_v1 := v_np_le &
 [ ORTH < "cast" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cast_v_1_rel",
	    LOCAL.CAT.HEAD.TAM.SAME-PAST +,
            PHON.ONSET con ] ].

cast_v2 := v_np-pp_prop_le &
 [ ORTH < "cast" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cast_v_1_rel",
	    LOCAL.CAT.HEAD.TAM.SAME-PAST +,
            PHON.ONSET con ] ].

cast_v3 := v_np-pp_oeq-as_le &
 [ ORTH < "cast" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cast_v_as_rel",
	    LOCAL.CAT.HEAD.TAM.SAME-PAST +,
            PHON.ONSET con ] ].

cast_v4 := v_pp*_dir_le &
 [ ORTH < "cast" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cast_v_1_rel",
	    LOCAL.CAT.HEAD.TAM.SAME-PAST +,
            PHON.ONSET con ] ].

cast_with_v1_i := v_np-pp_e-refl-idm_le &
 [ ORTH < "cast" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_cast_v_with-i_rel" ],
	    LOCAL.CAT.HEAD.TAM.SAME-PAST +,
            PHON.ONSET con ] ].

catch_n1 := n_-_c_le &
 [ ORTH < "catch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_catch_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

cater_v1 := v_-_le &
 [ ORTH < "cater" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cater_v_1_rel",
            PHON.ONSET con ] ].

catfish_n1 := n_-_mc_le &
 [ ORTH < "catfish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_catfish_n_1_rel",
	    LOCAL.CAT cat_infl_nosuff &
            	      [ HEAD.--BARE - ],
            PHON.ONSET con ] ].

cathedral_n1 := n_-_c_le &
 [ ORTH < "cathedral" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cathedral_n_1_rel",
            LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

cause_n1 := n_pp_c-ns-of_le &
 [ ORTH < "cause" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cause_n_of_rel",
            LOCAL.CAT.HEAD.MINORS.NORM norm_rel,
            PHON.ONSET con ] ].

cause_v2 := v_np_le &
 [ ORTH < "cause" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_cause_v_1_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
            PHON.ONSET con ] ].

caution_v2 := v_np_le &
 [ ORTH < "caution" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_caution_v_1_rel",
	    LOCAL.CAT.HEAD [ --CLRC -,
			     --NOCJCRD - ],
            PHON.ONSET con ] ].

cede_v1 := v_np*_le &
 [ ORTH < "cede" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_cede_v_1_rel",
            PHON.ONSET con ] ].

certain_a1 := aj_cp_i_le &
 [ ORTH < "certain" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_certain_a_of_rel",
	    LOCAL.CAT.HEAD.--IDIOMPART +,
            PHON.ONSET con ] ].

certain_a2 := aj_pp_i-obl_le &
 [ ORTH < "certain" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_certain_a_of_rel" ],
	    LOCAL.CAT.HEAD.--IDIOMPART +,
            PHON.ONSET con ] ].

certain_a3 := aj_vp_i-seq_le &
 [ ORTH < "certain" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_certain_a_of_rel",
	    LOCAL.CAT.HEAD.--IDIOMPART +,
            PHON.ONSET con ] ].

certain_a4 := aj_-_i_le &
 [ ORTH < "certain" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_certain_a_of_rel",
	    LOCAL.CAT.HEAD.--IDIOMPART +,
            PHON.ONSET con ] ].

certain_a5 := aj_pp_i-obl_le &
 [ ORTH < "certain" >,
   SYNSEM [ LKEYS [ --COMPKEY _about_p_sel_rel,
                    KEYREL.PRED "_certain_a_about_rel" ],
	    LOCAL.CAT.HEAD.--IDIOMPART +,
            PHON.ONSET con ] ].

certain_a6 := aj_pp-cp_i-it_le &
 [ ORTH < "certain" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_certain_a_of_rel",
	    LOCAL.CAT.HEAD.--IDIOMPART +,
            PHON.ONSET con ] ].

certify_v1 := v_np_le &
 [ ORTH < "certify" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_certify_v_1_rel",
	    LOCAL.CAT.HEAD.--NOCJCRD -,
            PHON.ONSET con ] ].

challenge_v3 := v_-_le &
 [ ORTH < "challenge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_challenge_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

;; 2022-04-23 - Added this redundant entry to help with ranking for
;; "In this challenging period, we have been working industriously."
;;
challenging_a1 := aj_-_i_le &
 [ ORTH < "challenging" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_challenging_a_1_rel",
            PHON.ONSET con ] ].

chance_v2 := v_np_le &
 [ ORTH < "chance" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chance_v_1_rel",
            LOCAL.CAT.VAL.COMPS.FIRST.NONLOC.SLASH.LIST < >,
            PHON.ONSET con ] ].

change_n1 := n_pp_mc-of_le &
 [ ORTH < "change" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_change_n_of_rel",
            LOCAL.CAT [ HEAD.--OFMOD -,
			VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--BARE - ],
            PHON.ONSET con ] ].

change_v2 := v_-_unacc_le &
 [ ORTH < "change" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_change_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

chant_v1 := v_-_le &
 [ ORTH < "chant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chant_v_to_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

chant_v1_tr := v_np_le &
 [ ORTH < "chant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chant_v_to_rel",
            PHON.ONSET con ] ].

char_v2 := v_-_unacc_le &
 [ ORTH < "char" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_char_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

charge_v3 := v_np_noger_le &
 [ ORTH < "charge" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_charge_v_1_rel",
	    LOCAL.CAT [ VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
			HEAD.--NOCJCRD - ],
            PHON.ONSET con ] ].

chase_n1 := n_-_c_le &
 [ ORTH < "chase" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chase_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

chatter_v1 := v_-_le &
 [ ORTH < "chatter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chatter_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

check_n := n_pp_c-of_le &
 [ ORTH < "check" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_check_n_of_rel",
	    LOCAL.CAT.HEAD.--BAREPP.BP-IN -,
            PHON.ONSET con ] ].

check_v1 := v_np*_le &
 [ ORTH < "check" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_check_v_1_rel",
	    LOCAL.CAT.HEAD.--NOCJCRD -,
            PHON.ONSET con ] ].

cheer_v1 := v_-_le &
 [ ORTH < "cheer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cheer_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

cheer_v1_tr := v_np_le &
 [ ORTH < "cheer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cheer_v_1_rel",
	    LOCAL.CAT.HEAD.--NOCJCRD -,
            PHON.ONSET con ] ].

cheese_n1 := n_-_m_le &
 [ ORTH < "cheese" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cheese_n_1_rel",
            PHON.ONSET con ] ].

;; |*children eggs| via --BARE na_or_+, but we also want |child obesity|,
;; so add attrib adj entry
;;
child_n1 := n_-_c-ugen_le &
 [ ORTH < "child" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_child_n_1_rel",
	    LOCAL.CAT.HEAD.--MALPLCPD -,
            PHON.ONSET con ] ].

chile_n1 := n_-_c_le &
 [ ORTH < "chile" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chile_n_1_rel",
            PHON.ONSET con ] ].

;; Add LPERIPH na to block compound |Chinese culture|
chinese_n1 := n_-_pn-sg_le &
 [ ORTH < "Chinese" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Chinese",
            MODIFD.LPERIPH na,
            PHON.ONSET con ],
   TOKENS.+LAST.+CLASS.+CASE capitalized ].

chocolate_n1 := n_-_m_le &
 [ ORTH < "chocolate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chocolate_n_1_rel",
            PHON.ONSET con ] ].

choice_n1 := n_pp_c-of_le &
 [ ORTH < "choice" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_choice_n_of_rel",
            PHON.ONSET con ] ].

choose_v1 := v_np*_le &
 [ ORTH < "choose" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_choose_v_from_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
            PHON.ONSET con ] ].

chore_n1 := n_-_c-ns_le &
 [ ORTH < "chore" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_chore_n_1_rel",
	    LOCAL [ CAT.HEAD.MINORS.NORM norm_rel,
		    CONT.HOOK.INDEX.SORT nontime-or-qevent ],
            PHON.ONSET con ] ].

christen_v1 := v_np_le &
 [ ORTH < "christen" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_christen_v_1_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
            PHON.ONSET con ] ].

;; Let's experiment with constraining the NP compl to exclude WH-CPs as in
;; clapped for filler-head-NP |when my speech ended, everyone clapped|
clap_v1 := v_np*_le &
 [ ORTH < "clap" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_clap_v_1_rel",
            LOCAL.CAT.VAL.COMPS.FIRST.--SIND.SORT entity,
            PHON.ONSET con ] ].

clash_v1 := v_-_le &
 [ ORTH < "clash" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_clash_v_with_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

cleaning_n1 := n_-_c_le &
 [ ORTH < "cleaning" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cleaning_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

clear_a1 := aj_pp_i_le &
 [ ORTH < "clear" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_clear_a_of_rel" ],
            LOCAL.CAT.HEAD.--IDIOMPART +,
            PHON.ONSET con ] ].

clear_a2 := aj_pp-cp_i-it_le &
 [ ORTH < "clear" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_clear_a_of_rel",
            LOCAL.CAT.HEAD.--IDIOMPART +,
            PHON.ONSET con ] ].

clear_a3 := aj_cp_i_le &
 [ ORTH < "clear" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_clear_a_of_rel",
            LOCAL.CAT.HEAD.--IDIOMPART +,
            PHON.ONSET con ] ].

clear_of_v1 := v_np-pp_e_le &
 [ ORTH < "clear" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_clear_v_of_rel" ],
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

;; Block for |clear water|
clear_v1 := v_np_le &
 [ ORTH < "clear" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_clear_v_1_rel",
            LOCAL.CAT.HEAD [ --MAL3SG -,
			     --SAMENV + ],
            PHON.ONSET con ] ].

close_knit_a1 := aj_-_i_le &
 [ ORTH < "close", "knit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_close-knit_a_1_rel",
            PHON.ONSET con ] ].

close_knit_a2 := aj_-_i_le &
 [ ORTH < "close", "-", "knit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_close-knit_a_1_rel",
            PHON.ONSET con ] ].

club_n1 := n_-_c_le &
 [ ORTH < "club" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_club_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

coach_n1 := n_-_c_le &
 [ ORTH < "coach" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_coach_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

code_v1 := v_-_le &
 [ ORTH < "code" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_code_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

code_v1_tr := v_np_le &
 [ ORTH < "code" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_code_v_1_rel",
            PHON.ONSET con ] ].

coin_v1 := v_np_le &
 [ ORTH < "coin" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_coin_v_1_rel",
	    LOCAL.CAT.HEAD.--MALN3SG -,
            PHON.ONSET con ] ].

;; DPF 2018-10-02 - Keep as count only with --BARE - to block |He feels cold|, 
;; but make separate modified noun entry so we can get robust
;; |She has bad cold|
cold_n := n_-_c_le &
 [ ORTH < "cold" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cold_n_1_rel",
            LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

;; Added for CoNLL
;;
collaborated_a1 := aj_-_i-att_le &
 [ ORTH < "collaborated" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_collaborated_a_1_rel",
            PHON.ONSET con ] ].

color_v1 := v_-_le &
 [ ORTH < "color" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_color_v_1_rel",
	    LOCAL.CAT.HEAD [ --MAL3SG -,
			     --SAMENV + ],
            PHON.ONSET con ] ].

color_v1_tr := v_np_le &
 [ ORTH < "color" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_color_v_1_rel",
	    LOCAL.CAT.HEAD.--MAL3SG -,
            PHON.ONSET con ] ].

color_v1_br := v_-_le &
 [ DIALECT br,
   ORTH < "colour" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_color_v_1_rel",
	    LOCAL.CAT.HEAD [ --MAL3SG -,
			     --SAMENV + ],
            PHON.ONSET con ] ].

color_v1_tr_br := v_np_le &
 [ DIALECT br,
   ORTH < "colour" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_color_v_1_rel",
	    LOCAL.CAT.HEAD.--MAL3SG -,
            PHON.ONSET con ] ].

comely_a1 := aj_-_i_le &
 [ ORTH < "comely" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_comely_a_1_rel",
            LOCAL.CAT.HEAD.--SBRD -,
            PHON.ONSET con ] ].

command_v2 := v_np_le &
 [ ORTH < "command" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_command_v_1_rel",
	    LOCAL.CAT.HEAD.--NOCJCRD -,
            PHON.ONSET con ] ].

comment_v2 := v_-_le &
 [ ORTH < "comment" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_comment_v_on_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

commission_v1 := v_np_le &
 [ ORTH < "commission" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_commission_v_1_rel",
            PHON.ONSET con ] ].

commit_v3 := v_-_le &
 [ ORTH < "commit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_commit_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

committee_n1 := n_pp_c-of_le &
 [ ORTH < "committee" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_committee_n_of_rel",
	    LOCAL.CAT.HEAD.--BAREPP.BP-IN -,
            PHON.ONSET con ] ].

common_a1 := aj_-_i_le &
 [ ORTH < "common" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_common_a_for_rel",
            LOCAL.CAT.HEAD.--SBRD -,
            PHON.ONSET con ] ].

commute_v1 := v_-_le &
 [ ORTH < "commute" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_commute_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

commute_v1_tr := v_np_le &
 [ ORTH < "commute" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_commute_v_1_rel",
            PHON.ONSET con ] ].

complement_v1 := v_-_le &
 [ ORTH < "complement" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_complement_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

complement_v1_tr := v_np_le &
 [ ORTH < "complement" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_complement_v_1_rel",
            PHON.ONSET con ] ].

compost_v1 := v_-_le &
 [ ORTH < "compost" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_compost_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

compost_v1_tr := v_np_le &
 [ ORTH < "compost" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_compost_v_1_rel",
            PHON.ONSET con ] ].

comprehension_n1 := n_-_m_le &
 [ ORTH < "comprehension" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_comprehension_n_of_rel",
            LOCAL.CAT.HEAD.--MALCM -,
            PHON.ONSET con ] ].

compromise_v1 := v_-_le &
 [ ORTH < "compromise" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_compromise_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

compromise_v1_tr := v_np_le &
 [ ORTH < "compromise" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_compromise_v_1_rel",
            PHON.ONSET con ] ].

concentrate_v2 := v_-_le &
 [ ORTH < "concentrate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_concentrate_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

concert_n1 := n_-_c_le &
 [ ORTH < "concert" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_concert_n_1_rel",
	    LOCAL.CAT.HEAD.--BAREPP.BP-IN -,
            PHON.ONSET con ] ].

conduct_v1 := v_-_le &
 [ ORTH < "conduct" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_conduct_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

conduct_v1_tr := v_np_le &
 [ ORTH < "conduct" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_conduct_v_1_rel",
            PHON.ONSET con ] ].

confuse_v1 := v_np_le &
 [ ORTH < "confuse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_confuse_v_1_rel",
            PHON.ONSET con ] ].

consent_v2 := v_-_le &
 [ ORTH < "consent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_consent_v_to_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

consequence_n1 := n_pp_c-ns-of_le &
 [ ORTH < "consequence" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_consequence_n_of_rel",
	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

consequence_i_n1 := n_pp_c-brno-of_le &
 [ ORTH < "consequence" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_consequence_n_of_rel",
            PHON.ONSET con ] ].

consider_v2 := v_np-prd_oeq_le &
 [ ORTH < "consider" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_consider_v_1_rel",
	    LOCAL.CAT.HEAD.--SBRDMOD -,
            PHON.ONSET con ] ].

consider_v5 := v_np*_le &
 [ ORTH < "consider" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_consider_v_1_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
            PHON.ONSET con ] ].

constitutional_a1 := aj_-_i-cap_le &
 [ ORTH < "constitutional" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_constitutional_a_1_rel",
            PHON.ONSET con ] ].

contamination_n1 := n_pp_mc-of-ns_le &
 [ ORTH < "contamination" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_contamination_n_of_rel",
            PHON.ONSET con ] ].

contemplate_v1 := v_np_le &
 [ ORTH < "contemplate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_contemplate_v_1_rel",
	    LOCAL.CAT.HEAD.--NOCJCRD -,
            PHON.ONSET con ] ].

continue_v2 := v_np_noger_le &
 [ ORTH < "continue" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_continue_v_2_rel",
	    LOCAL.CAT.HEAD.--NOCJCRD -,
            PHON.ONSET con ] ].

contract_n1 := n_-_c_le &
 [ ORTH < "contract" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_contract_n_1_rel",
	    LOCAL.CAT.HEAD.--BAREPP.BP-UNDER -,
            PHON.ONSET con ] ].

contract_v4 := v_-_unacc_le &
 [ ORTH < "contract" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_contract_v_2_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

contrast_v2 := v_-_le &
 [ ORTH < "contrast" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_contrast_v_with_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

contrast_v2_tr := v_np_le &
 [ ORTH < "contrast" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_contrast_v_with_rel",
            PHON.ONSET con ] ].

;; DPF 2020-06-25 - This blocked |your selfless contribution|
#|
contribution_n1 := n_-_m-nomod_le &
 [ ORTH < "contribution" >,
   ALTS.PLMASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_contribution_n_1_rel",
            PHON.ONSET con ] ].
|#

;; Avoid for "convey [[my heartfelt thanks for your work saving] lives]"
convey_v2 := v_pp*-cp_fin_le &
 [ ORTH < "convey" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_convey_v_1_rel" ],
            LOCAL.CAT.VAL.COMPS.REST.FIRST.LOCAL.CAT.HEAD comp,
            PHON.ONSET con ] ].

cook_n1 := n_-_c_le &
 [ ORTH < "cook" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cook_n_1_rel",
	    LOCAL.CAT.VAL.SPR.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
            PHON.ONSET con ] ].

cook_v1 := v_np*_le &
 [ ORTH < "cook" >,
   ALTS.MALPASS -,
   SYNSEM [ LOCAL.CAT.VAL.COMPS.FIRST [ --SIND.PT notpro_or_non_refl,
					MODIFD.RPERIPH bool,
					LOCAL.CAT.HEAD.--POSSRBST - ],
            LKEYS.KEYREL.PRED "_cook_v_1_rel",
            PHON.ONSET con ] ].

cool_v2 := v_-_unacc_le &
 [ ORTH < "cool" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cool_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

copy_v1 := v_-_le &
 [ ORTH < "copy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_copy_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

copy_v1_tr := v_np_le &
 [ ORTH < "copy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_copy_v_1_rel",
            PHON.ONSET con ] ].

cost_v1 := v_np-np_only_le &
 [ ORTH < "cost" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cost_v_1_rel",
	    LOCAL.CAT.HEAD.TAM.SAME-PAST +,
            PHON.ONSET con ] ].

cost_v2 := v_-_le &
 [ ORTH < "cost" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cost_v_1_rel",
	    LOCAL.CAT.HEAD [ TAM.SAME-PAST +,
			     --MAL3SG -,
			     --SAMENV + ],
            PHON.ONSET con ] ].

cost_v2_tr := v_np_ntr_le &
 [ ORTH < "cost" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_cost_v_1_rel",
	    LOCAL.CAT [ HEAD [ TAM.SAME-PAST +,
	    		       --MAL3SG - ],
			VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--POSSRBST - ],
            PHON.ONSET con ] ].

cost_v3 := v_np-np-cp_it-s_le &
 [ ORTH < "cost" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cost_v_2_rel",
	    LOCAL.CAT.HEAD [ TAM.SAME-PAST +,
			     --MAL3SG - ],
            PHON.ONSET con ] ].

cost_v4 := v_np*-np-vp_it-s_le &
 [ ORTH < "cost" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cost_v_2_rel",
	    LOCAL.CAT.HEAD [ TAM.SAME-PAST +,
			     --MAL3SG - ],
            PHON.ONSET con ] ].

cost_v5 := v_np-np*-vp_it-s_le &
 [ ORTH < "cost" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cost_v_2_rel",
	    LOCAL.CAT.HEAD [ TAM.SAME-PAST +,
			     --MAL3SG - ],
            PHON.ONSET con ] ].

cost_v6 := v_np-np-vpslnp_tgh_le &
 [ ORTH < "cost" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cost_v_2_rel",
	    LOCAL.CAT.HEAD [ TAM.SAME-PAST +,
			     --MAL3SG - ],
            PHON.ONSET con ] ].

costly_a1 := aj_-_i_le &
 [ ORTH < "costly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_costly_a_1_rel",
            LOCAL.CAT.HEAD.--SBRD -,
            PHON.ONSET con ] ].

costume_n1 := n_-_c_le &
 [ ORTH < "costume" >,
   SYNSEM [ LOCAL.CAT.HEAD.--BAREPP [ BP-IN -,
				      BP-OUTOF - ],
	    LKEYS.KEYREL.PRED "_costume_n_1_rel",
            PHON.ONSET con ] ].

counter_a2 := aj_pp_i-prd_le &
 [ ORTH < "counter" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_counter_a_to_rel" ],
	    LOCAL.CAT.HEAD [ --MALSBRD -,
			     --SBRD -,
			     MINORS.NORM norm_rel ],
            PHON.ONSET con ] ].

counter_adv1 := av_-_i-vp-pr_le &
 [ ORTH < "counter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_counter-_a_anti_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

counter_n1 := n_-_c-ns_le &
 [ ORTH < "counter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_counter_n_1_rel",
            PHON.ONSET con ] ].

;; 2021-01-13 - Avoid robust "love the snack counter most"
counter_v1 := v_np*_le &
 [ ORTH < "counter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_counter_v_1_rel",
	    LOCAL.CAT.HEAD [ --MAL3SG -,
			     --MALN3SG - ],
            PHON.ONSET con ] ].

counter_v2 := v_pp*-cp_le &
 [ ORTH < "counter" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_counter_v_1_rel" ],
	    LOCAL.CAT.HEAD [ --MAL3SG -,
			     --MALN3SG - ],
            PHON.ONSET con ] ].

country_n1 := n_pp_c-ns-of_le &
 [ ORTH < "country" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_country_n_of_rel",
            PHON.ONSET con ] ].

countryside_n1 := n_-_c_le &
 [ ORTH < "countryside" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_countryside_n_1_rel",
            PHON.ONSET con ] ].

course_n1 := n_pp_c-ns-of_le &
 [ ORTH < "course" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_course_n_of_rel",
	    LOCAL.CAT.HEAD.--BAREPP [ BP-OFF -,
				      BP-ON -,
				      BP-OF - ],
            PHON.ONSET con ] ].

court_v1 := v_-_le &
 [ ORTH < "court" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_court_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

court_v1_tr := v_np_le &
 [ ORTH < "court" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_court_v_1_rel",
            PHON.ONSET con ] ].

cousin_n1 := n_pp_c-of-anim_le &
 [ ORTH < "cousin" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cousin_n_of_rel",
            PHON.ONSET con ] ].

cover_v1 := v_-_le &
 [ ORTH < "cover" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cover_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

cover_v1_tr := v_np_le &
 [ ORTH < "cover" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cover_v_1_rel",
            PHON.ONSET con ] ].

cowardly_a1 := aj_-_i_le &
 [ ORTH < "cowardly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cowardly_a_1_rel",
            LOCAL.CAT.HEAD.--SBRD -,
            PHON.ONSET con ] ].

crack_v2 := v_-_unacc_le &
 [ ORTH < "crack" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_crack_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

;; Enable robust "fire crackers" MWE
;; 2020-09-30 - But this also blocks "We enjoy dry crackers", so undo.
#|
cracker_n1 := n_-_c-nochd_le &
 [ ORTH < "cracker" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cracker_n_1_rel",
            PHON.ONSET con ] ].
|#

crawl_n1 := n_-_c_le &
 [ ORTH < "crawl" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_crawl_n_1_rel",
	    LOCAL.CAT.VAL.SPR.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
            PHON.ONSET con ] ].

crayfish_n1 := n_-_mc_le &
 [ ORTH < "crayfish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_crayfish_n_1_rel",
	    LOCAL.CAT cat_infl_nosuff &
            	      [ HEAD.--BARE - ],
            PHON.ONSET con ] ].

crisis_n1 := n_-_c_le &
 [ ORTH < "crisis" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_crisis_n_1_rel",
            LOCAL [ AGR.PNG png-irreg,
	            CAT.HEAD.--BARE - ],
            PHON.ONSET con ] ].

critical_a3 := aj_cp_i-it_le &
 [ ORTH < "critical" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_critical_a_of_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--MAL3SG -,
            PHON.ONSET con ] ].

cross_country_adv1 := av_-_i-vp-po_le &
 [ ORTH < "cross", "country" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cross+country_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

cross_country_adv2 := av_-_i-vp-po_le &
 [ ORTH < "cross-country" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cross+country_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

cross_country_n2 := n_-_m_le &
 [ ORTH < "cross-country" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cross+country_n_1_rel",
	    LOCAL.CAT.HEAD.--MALCM -,
            PHON.ONSET con ] ].

crosswise_adv1 := av_-_i-vp_le &
 [ ORTH < "crosswise" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_crosswise_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

crowd_v1 := v_pp_dir_le &
 [ ORTH < "crowd" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_crowd_v_1_rel",
            PHON.ONSET con ] ].

crown_v1 := v_np_le &
 [ ORTH < "crown" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_crown_v_1_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
            PHON.ONSET con ] ].

;; 2021-01-12 - "she cried tears of joy"
cry_v3 := v_np_le &
 [ ORTH < "cry" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cry_v_1_rel",
            PHON.ONSET con ] ].

cub_n1 := n_-_c-ugen_le &
 [ ORTH < "cub" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cub_n_1_rel",
            PHON.ONSET con ],
   ALTS.NONINITCAP - ].

cuddly_a1 := aj_-_i_le &
 [ ORTH < "cuddly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cuddly_a_1_rel",
            LOCAL.CAT.HEAD.--SBRD -,
            PHON.ONSET con ] ].

cue_n1 := n_-_c_le &
 [ ORTH < "cue" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cue_n_1_rel",
	    LOCAL.CAT.HEAD.--BAREPP.BP-ON -,
            PHON.ONSET con ] ].

cup_n1 := n_-_c-meas_le &
 [ ORTH < "cup" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cup_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,   
            PHON.ONSET con ] ].

curdle_v2 := v_-_unacc_le &
 [ ORTH < "curdle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_curdle_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

curie_n2 := n_-_c_le &
 [ ORTH < "curie" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_curie_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,   
            PHON.ONSET con ] ].

cut_apart_v1 := v_p-np_le &
 [ ORTH < "cut" >,
   SYNSEM [ LKEYS [ --COMPKEY _apart_a_sel_rel,
                    KEYREL.PRED "_cut_v_apart_rel" ],
            LOCAL.CAT.HEAD [ --MAL3SG -,
			     TAM.SAME-PAST + ],
            PHON.ONSET con ] ].

cut_back_v1 := v_p-np_le &
 [ ORTH < "cut" >,
   SYNSEM [ LKEYS [ --COMPKEY _back_p_sel_rel,
                    KEYREL.PRED "_cut_v_back_rel" ],
            LOCAL.CAT.HEAD [ --MAL3SG -,
			     TAM.SAME-PAST + ],
            PHON.ONSET con ] ].

cut_back_v2 := v_p-pp_e_le &
 [ ORTH < "cut" >,
   SYNSEM [ LKEYS [ --COMPKEY _back_p_sel_rel,
                    --OCOMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_cut_v_back_rel" ],
            LOCAL.CAT.HEAD [ --MAL3SG -,
			     TAM.SAME-PAST + ],
            PHON.ONSET con ] ].

cut_back_v3 := v_p_le &
 [ ORTH < "cut" >,
   SYNSEM [ LKEYS [ --COMPKEY _back_p_sel_rel,
                    KEYREL.PRED "_cut_v_back_rel" ],
            LOCAL.CAT.HEAD [ --MAL3SG -,
			     TAM.SAME-PAST + ],
            PHON.ONSET con ] ].

cut_down_v1 := v_p-np_le &
 [ ORTH < "cut" >,
   SYNSEM [ LKEYS [ --COMPKEY _down_p_sel_rel,
                    KEYREL.PRED "_cut_v_down_rel" ],
            LOCAL.CAT.HEAD [ --MAL3SG -,
			     TAM.SAME-PAST + ],
            PHON.ONSET con ] ].

cut_down_v2 := v_p-pp_le &
 [ ORTH < "cut" >,
   SYNSEM [ LKEYS [ --COMPKEY _down_p_sel_rel,
                    --OCOMPKEY _on_p_rel,
                    KEYREL.PRED "_cut_v_down_rel" ],
            LOCAL.CAT.HEAD [ --MAL3SG -,
			     TAM.SAME-PAST + ],
            PHON.ONSET con ] ].

cut_down_v3 := v_p_le &
 [ ORTH < "cut" >,
   SYNSEM [ LKEYS [ --COMPKEY _down_p_sel_rel,
                    KEYREL.PRED "_cut_v_down_rel" ],
            LOCAL.CAT.HEAD [ --MAL3SG -,
			     TAM.SAME-PAST + ],
            PHON.ONSET con ] ].

cut_in_v1 := v_p-np_le &
 [ ORTH < "cut" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_cut_v_in_rel" ],
            LOCAL.CAT.HEAD [ --MAL3SG -,
			     TAM.SAME-PAST + ],
            PHON.ONSET con ] ].

cut_into_v1 := v_pp_le &
 [ ORTH < "cut" >,
   SYNSEM [ LKEYS [ --COMPKEY _into_p_rel,
                    KEYREL.PRED "_cut_v_1_rel" ],
            LOCAL.CAT.HEAD [ --MAL3SG -,
			     TAM.SAME-PAST + ],
            PHON.ONSET con ] ].

cut_off_v1 := v_p-np_le &
 [ ORTH < "cut" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_cut_v_off_rel" ],
            LOCAL.CAT.HEAD [ --MAL3SG -,
			     TAM.SAME-PAST + ],
            PHON.ONSET con ] ].

cut_off_v2 := v_p_le &
 [ ORTH < "cut" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_cut_v_off_rel" ],
            LOCAL.CAT.HEAD [ --MAL3SG -,
			     TAM.SAME-PAST + ],
            PHON.ONSET con ] ].

cut_out_v1 := v_p-np_le &
 [ ORTH < "cut" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_cut_v_out_rel" ],
            LOCAL.CAT.HEAD [ --MAL3SG -,
			     TAM.SAME-PAST + ],
            PHON.ONSET con ] ].

cut_prd := v_np-ap_oeq_le &
 [ ORTH < "cut" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cut_v_1_rel",
            LOCAL.CAT.HEAD [ --MAL3SG -,
			     TAM.SAME-PAST + ],
            PHON.ONSET con ] ].

cut_short_v1 := v_p-np_le &
 [ ORTH < "cut" >,
   SYNSEM [ LKEYS [ --COMPKEY _short_a_sel_rel,
                    KEYREL.PRED "_cut_v_short_rel" ],
            LOCAL.CAT.HEAD [ --MAL3SG -,
			     TAM.SAME-PAST + ],
            PHON.ONSET con ] ].

cut_up_v1 := v_p-np_le &
 [ ORTH < "cut" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_cut_v_up_rel" ],
            LOCAL.CAT.HEAD [ --MAL3SG -,
			     TAM.SAME-PAST + ],
            PHON.ONSET con ] ].

cut_v1 := v_np_le &
 [ ORTH < "cut" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_cut_v_1_rel",
            LOCAL.CAT [ HEAD [ --MAL3SG -,
			      TAM.SAME-PAST + ],
			VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--POSSRBST - ],
            PHON.ONSET con ] ].

cut_v2 := v_pp*_dir_le &
 [ ORTH < "cut" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cut_v_1_rel",
            LOCAL.CAT.HEAD [ --MAL3SG -,
			     TAM.SAME-PAST + ],
            PHON.ONSET con ] ].

cut_v3 := v_np-np_only_le &
 [ ORTH < "cut" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cut_v_1_rel",
            LOCAL.CAT.HEAD [ --MAL3SG -,
			     TAM.SAME-PAST + ],
            PHON.ONSET con ] ].

cuttlefish_n1 := n_-_mc_le &
 [ ORTH < "cuttlefish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_cuttlefish_n_1_rel",
	    LOCAL.CAT cat_infl_nosuff &
            	      [ HEAD.--BARE - ],
            PHON.ONSET con ] ].

dad_n1 := n_-_c_le &
 [ ORTH < "dad" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dad_n_1_rel",
            LOCAL.CAT.HEAD.MINORS.NORM norm_rel,
            PHON.ONSET con ],
   TOKENS.+LAST.+CLASS.+CASE non_capitalized ].

dad_n2 := n_-_pn_le &
 [ ORTH < "Dad" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Dad",
            PHON.ONSET con ],
   TOKENS.+LAST.+CLASS.+CASE capitalized ].

dance_n1 := n_-_c_le &
 [ ORTH < "dance" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dance_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
	    MODIFD.RPERIPH -,
            PHON.ONSET con ] ].

dance_v1 := v_-_le &
 [ ORTH < "dance" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dance_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

dance_v1_tr := v_np_le &
 [ ORTH < "dance" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dance_v_1_rel",
            PHON.ONSET con ] ].

date_n1 := n_pp_c-day_le &
 [ ORTH < "date" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_date_n_of_rel",
	    LOCAL.CAT.HEAD.--BAREPP.BP-TO -,
            PHON.ONSET con ] ].

date_v2 := v_np*_le &
 [ ORTH < "date" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_date_v_1_rel",
            PHON.ONSET con ] ].

dawn_n2 := n_-_c_le &
 [ ORTH < "dawn" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dawn_n_1_rel",
            LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

dazzle_v1 := v_-_le &
 [ ORTH < "dazzle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dazzle_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

dazzle_v1_tr := v_np_le &
 [ ORTH < "dazzle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dazzle_v_1_rel",
            PHON.ONSET con ] ].

deadlock_v1 := v_-_le &
 [ ORTH < "deadlock" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_deadlock_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

deadlock_v1_tr := v_np_le &
 [ ORTH < "deadlock" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_deadlock_v_1_rel",
            PHON.ONSET con ] ].

deadly_isect := aj_-_i_le &
 [ ORTH < "deadly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_deadly_a_1_rel",
            LOCAL.CAT.HEAD.--SBRD -,
            PHON.ONSET con ] ].

deal_v1 := v_-_le &
 [ ORTH < "deal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_deal_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

deal_v1_tr := v_np_le &
 [ ORTH < "deal" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_deal_v_1_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
            PHON.ONSET con ] ].

;; "Dear Mr. Browne we arrived"
dear_p := p_np_i_le &
 [ ORTH < "dear" >,
   SYNSEM [ LKEYS.KEYREL.PRED _dear_p_rel,
            PHON.ONSET con ],
   TOKENS.+LAST.+CLASS.+CASE capitalized ].

deathly_a1 := aj_-_i_le &
 [ ORTH < "deathly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_deathly_a_1_rel",
            LOCAL.CAT.HEAD.--SBRD -,
            PHON.ONSET con ] ].

debate_v1 := v_-_le &
 [ ORTH < "debate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_debate_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

debate_v1_tr := v_np_le &
 [ ORTH < "debate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_debate_v_1_rel",
            PHON.ONSET con ] ].

decay_v1 := v_-_unacc_le &
 [ ORTH < "decay" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_decay_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

decide_v2 := v_np*_le &
 [ ORTH < "decide" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_decide_v_1_rel",
	    LOCAL.CAT.HEAD.--NOCJCRD -,
            PHON.ONSET con ] ].

decide_v3 := v_cp_prop_le &
 [ ORTH < "decide" >,
   ALTS.TNS-ID -,
   SYNSEM [ LKEYS.KEYREL.PRED "_decide_v_1_rel",
            PHON.ONSET con ] ].

decision_n1 := n_-_m-nomod_le &
 [ ORTH < "decision" >,
   ALTS.PLMASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_decision_n_1_rel",
            PHON.ONSET con ] ].

decision_n2 := n_-_c-ns_le &
 [ ORTH < "decision" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_decision_n_1_rel",
            LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

decision_n3 := n_cp_c-optc_le &
 [ ORTH < "decision" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_decision_n_1_rel",
            PHON.ONSET con ] ].

deck_n1 := n_-_c_le &
 [ ORTH < "deck" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_deck_n_1_rel",
	    LOCAL.CAT.HEAD.--BAREPP.BP-ON -,
            PHON.ONSET con ] ].

declaration_n1 := n_pp_mc-of_le &
 [ ORTH < "declaration" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_declaration_n_of_rel",
            PHON.ONSET con ],
   ALTS.NONINITCAP - ].

declare_v1 := v_np*_le &
 [ ORTH < "declare" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_declare_v_to_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
            PHON.ONSET con ] ].

declare_v5 := v_np-prd_oeq_le &
 [ ORTH < "declare" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_declare_v_to_rel",
	    LOCAL.CAT.HEAD.--SBRDMOD -,
            PHON.ONSET con ] ].

;; 2020-11-18 - Block NP frag analysis of "the hazards of driving decline"
decline_n1 := n_-_mc_le &
 [ ORTH < "decline" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_decline_n_1_rel",
            LOCAL.CAT.VAL.SPR < expressed_synsem >,
            PHON.ONSET con ] ].

decline_v1 := v_-_le &
 [ ORTH < "decline" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_decline_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

decline_v1_tr := v_np_le &
 [ ORTH < "decline" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_decline_v_1_rel",
            PHON.ONSET con ] ].

;; Warn passive is likely error: |the population has been decreased|
;; But not generally true: "prices have been decreased".  So comment out
#|
decrease_v1 := v_np_ntr_le &
 [ ORTH < "decrease" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_decrease_v_cause_rel",
            PHON.ONSET voc ] ].
|#

decrease_v2 := v_-_unacc_le &
 [ ORTH < "decrease" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_decrease_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

decrement_v2 := v_-_unacc_le &
 [ ORTH < "decrement" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_decrement_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

deed_n1 := n_-_c_le &
 [ ORTH < "deed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_deed_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

deer_n1 := n_-_c_le &
 [ ORTH < "deer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_deer_n_1_rel",
   	    LOCAL.CAT cat_infl_nosuff &  [ HEAD.--BARE - ],
            PHON.ONSET con ] ].

default_v2 := v_-_le &
 [ ORTH < "default" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_default_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

definition_n1 := n_pp_mc-of-ns_le &
 [ ORTH < "definition" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_definition_n_of_rel",
            LOCAL.CAT [ HEAD.--OFMOD -,
			VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--BARE - ],
            PHON.ONSET con ] ].

delay_v1 := v_-_le &
 [ ORTH < "delay" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_delay_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

delay_v1_tr := v_np_le &
 [ ORTH < "delay" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_delay_v_1_rel",
            PHON.ONSET con ] ].

deliver_v1 := v_np*_le &
 [ ORTH < "deliver" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_deliver_v_to_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
            PHON.ONSET con ] ].

demand_v1 := v_-_le &
 [ ORTH < "demand" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_demand_v_of_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

demand_v1_tr := v_np_le &
 [ ORTH < "demand" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_demand_v_of_rel",
            PHON.ONSET con ] ].

deny_v1 := v_np_le &
 [ ORTH < "deny" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_deny_v_to_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
            PHON.ONSET con ] ].

desert_n1 := n_-_c_le &
 [ ORTH < "desert" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_desert_n_1_rel",
            PHON.ONSET con ] ].

desert_v2 := v_-_le &
 [ ORTH < "desert" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_desert_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

desert_v2_tr := v_np_le &
 [ ORTH < "desert" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_desert_v_1_rel",
            PHON.ONSET con ] ].

;; Better ranking
design_v1 := v_np_le &
 [ ORTH < "design" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_design_v_1_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--BARED -,
            PHON.ONSET con ] ].

;; Better ranking
design_v2 := v_np-vp_oeq_le &
 [ ORTH < "design" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_design_v_1_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--BARED -,
            PHON.ONSET con ] ].

designate_v1 := v_np_le &
 [ ORTH < "designate" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_designate_v_1_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
            PHON.ONSET con ] ].

desire_v1 := v_-_le &
 [ ORTH < "desire" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_desire_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

desire_v1_tr := v_np_le &
 [ ORTH < "desire" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_desire_v_1_rel",
            PHON.ONSET con ] ].

despair_v1 := v_-_le &
 [ ORTH < "despair" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_despair_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

desperate_a2 := aj_cp_i_le &
 [ ORTH < "desperate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_desperate_a_for_rel",
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD comp,
            PHON.ONSET con ] ].

;; We want "She is favored by destiny"
#|
destiny_n1 := n_-_c_le &
 [ ORTH < "destiny" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_destiny_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].
|#

determine_v1 := v_np*_le &
 [ ORTH < "determine" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_determine_v_1_rel",
	    LOCAL.CAT.HEAD.--NOCJCRD -,
            PHON.ONSET con ] ].

diameter_n1 := n_-_c_le &
 [ ORTH < "diameter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_diameter_n_1_rel",
	    LOCAL.CAT.HEAD.--BAREPP.BP-IN -,
            PHON.ONSET con ] ].

diet_v1 := v_-_le &
 [ ORTH < "diet" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_diet_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

;; Exclude mass: |he will make difference|
difference_n1 := n_-_c-ns_le &
 [ ORTH < "difference" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_difference_n_1_rel",
            PHON.ONSET con ] ].

different_a1 := aj_pp_i-cmp-dif_le &
 [ ORTH < "different" >,
   SYNSEM [ LKEYS [ --COMPKEY than_or_from_rel,
                    KEYREL.PRED "_different_a_than-from_rel" ],
            LOCAL.CAT.HEAD.--SBRD -,
            PHON.ONSET con ] ].

dig_v1 := v_np*_le &
 [ ORTH < "dig" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_dig_v_1_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
            PHON.ONSET con ] ].

dinner_n1 := n_-_mc_le &
 [ ORTH < "dinner" >,
   SYNSEM [ MODIFD.LPERIPH na,
            LOCAL [ CONT.HOOK.INDEX.PNG.GEN neut ],
	    LKEYS.KEYREL.PRED "_dinner_n_1_rel",
            PHON.ONSET con ] ].

#|
dinner_n1 := n_-_mc-time_le &
 [ ORTH < "dinner" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dinner_n_1_rel",
            PHON.ONSET con ] ].
|#

direct_v1 := v_np*_le &
 [ ORTH < "direct" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_direct_v_to_rel",
	    LOCAL.CAT.HEAD.--NOCJCRD -,
            PHON.ONSET con ] ].

discourse_v1 := v_-_le &
 [ ORTH < "discourse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_discourse_v_on-upon_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

discover_v1 := v_np_le &
 [ ORTH < "discover" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_discover_v_1_rel",
	    LOCAL.CAT.HEAD.--NOCJCRD -,
            PHON.ONSET con ] ].

;; Make only intransitive, so we can detect robust "discriminate against", 
;; at the cost of losing rarely used transitive
discriminate_v1 := v_-_le &
 [ ORTH < "discriminate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_discriminate_v_1_rel",
            PHON.ONSET con ] ].

disdain_v1 := v_-_le &
 [ ORTH < "disdain" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_disdain_v_from_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

disdain_v1_tr := v_np_le &
 [ ORTH < "disdain" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_disdain_v_from_rel",
            PHON.ONSET con ] ].

dish_n1 := n_pp_mc-of_le &
 [ ORTH < "dish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dish_n_of_rel",
            PHON.ONSET con ] ].

disk_n1 := n_-_c_le &
 [ ORTH < "disk" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_disk_n_1_rel",
	    LOCAL.CAT.HEAD.--BAREPP.BP-ON -,
            PHON.ONSET con ] ].

display_v1 := v_-_le &
 [ ORTH < "display" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_display_v_to_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

display_v1_tr := v_np_le &
 [ ORTH < "display" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_display_v_to_rel",
            PHON.ONSET con ] ].

disregard_v1 := v_-_le &
 [ ORTH < "disregard" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_disregard_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

disregard_v1_tr := v_np_le &
 [ ORTH < "disregard" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_disregard_v_1_rel",
            PHON.ONSET con ] ].

dissent_n1 := n_-_mc_le &
 [ ORTH < "dissent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dissent_n_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

;; 2020-11-24 - Block robust "our distinguished guest"
distinguish_v2 := v_np_le &
 [ ORTH < "distinguish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_distinguish_v_from_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.--SIND.--BARESG -,
            PHON.ONSET con ] ].

divorce_v1 := v_-_le &
 [ ORTH < "divorce" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_divorce_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

divorce_v1_tr := v_np_le &
 [ ORTH < "divorce" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_divorce_v_1_rel",
            PHON.ONSET con ] ].

;; DPF 2019-12-19 - Make NP oblig, until we remember why optionality is useful,
;; given auxiliary do which can be elided.
do2 := v_np_le &
 [ ORTH < "do" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_do_v_1_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
            PHON.ONSET con ] ].

; Block use for "What was Kim doing yesterday?"
do_v4 := v_np-np_only_le &
 [ ORTH < "do" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_do_v_1_rel",
            LOCAL.CAT.VAL.COMPS < [ NONLOC.SLASH.LIST < > ],
                   [ LOCAL.CAT.HEAD.MINORS.NORM quantity_or_norm_or_no_rel,
		     NONLOC.SLASH.LIST < > ] >,
            PHON.ONSET con ] ].

; Block plural of "doe" to avoid ambiguity with aux "does"
doe_n1 := n_-_c-sg_le &
 [ ORTH < "doe" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_doe_n_1_rel",
            PHON.ONSET con ] ].

does1_neg_3 := v_vp_does-n_le &
 [ ORTH < "does", "not" >,
   SYNSEM.PHON.ONSET con ].

dog_n1 := n_-_c-ugen_le &
 [ ORTH < "dog" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dog_n_1_rel",
            PHON.ONSET con ] ].

;; Block robust past to avoid for |have done in helping me|
do_in_v1 := v_p-np_le &
 [ ORTH < "do" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_do_v_in_rel" ],
            LOCAL.CAT.HEAD.--MALPAST -,
            PHON.ONSET con ] ].

door_n1 := n_-_c_le &
 [ ORTH < "door" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_door_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

door_to_door_adv1 := av_-_i-vp-po_le &
 [ ORTH < "door", "to", "door" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_door-to-door_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

door_to_door_adv2 := av_-_i-vp-po_le &
 [ ORTH < "door", "-", "to", "-", "door" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_door-to-door_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

double_v2 := v_-_unacc_le &
 [ ORTH < "double" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_double_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

down_p := p_np_i-nm-no-tm_le &
 [ ORTH < "down" >,
   SYNSEM [ LKEYS.KEYREL.PRED _down_p_rel,
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--BAREDPP.BP-DOWN +,
            PHON.ONSET con ] ].

downgrade_v3 := v_-_unacc_le &
 [ ORTH < "downgrade" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_downgrade_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

downgrade_v4 := v_-_unacc_le &
 [ ORTH < "down", "-", "grade" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_downgrade_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

download_v2 := v_-_le &
 [ ORTH < "download" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_download_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

download_v2_tr := v_np_le &
 [ ORTH < "download" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_download_v_1_rel",
            PHON.ONSET con ] ].

downright_adv1 := av_-_i-vp-pr_le &
 [ ORTH < "downright" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_downright_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

draw_v1 := v_-_le &
 [ ORTH < "draw" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_draw_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

draw_v1_tr := v_np_le &
 [ ORTH < "draw" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_draw_v_1_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
            PHON.ONSET con ] ].

dream_v1 := v_-_le &
 [ ORTH < "dream" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dream_v_1_rel",
            PHON.ONSET con ] ].

dress_n1 := n_-_c_le &
 [ ORTH < "dress" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dress_n_1_rel",
            PHON.ONSET con ] ].

dress_v2 := v_-_le &
 [ ORTH < "dress" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dress_v_in_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

dress_v2_tr := v_np_le &
 [ ORTH < "dress" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dress_v_in_rel",
            PHON.ONSET con ] ].

dribble_n1 := n_-_c_le &
 [ ORTH < "dribble" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dribble_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

drill_v1 := v_-_le &
 [ ORTH < "drill" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_drill_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

drill_v1_tr := v_np_le &
 [ ORTH < "drill" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_drill_v_1_rel",
            PHON.ONSET con ] ].

drink_n1 := n_-_c_le &
 [ ORTH < "drink" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_drink_n_1_rel",
            PHON.ONSET con ] ].

drink_v1 := v_-_le &
 [ ORTH < "drink" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_drink_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

drink_v1_tr := v_np_le &
 [ ORTH < "drink" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_drink_v_1_rel",
            PHON.ONSET con ] ].

drive_prd := v_np-prd_oeq_le &
 [ ORTH < "drive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_drive_v_1_rel",
	    LOCAL.CAT.HEAD.--SBRDMOD -,
            PHON.ONSET con ] ].

drizzle_v1 := v_-_it_le &
 [ ORTH < "drizzle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_drizzle_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

drool_v1 := v_-_le &
 [ ORTH < "drool" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_drool_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

drop_v1 := v_np_noger_le &
 [ ORTH < "drop" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_drop_v_cause_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
            PHON.ONSET con ] ].

drunk_a1 := aj_-_i-sbrd_le &
 [ ORTH < "drunk" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_drunk_a_1_rel",
            PHON.ONSET con ] ].

drunk_n1 := n_-_c-nocnh_le &
 [ ORTH < "drunk" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_drunk_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

dub_v1 := v_np_le &
 [ ORTH < "dub" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_dub_v_1_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
            PHON.ONSET con ] ].

;; DPF 2017-09-07 - Since we want to accept |He prefers duck|, let's leave this
;; as either animal or food.
;duck_n1 := n_-_c_le &
; [ ORTH < "duck" >,
;   SYNSEM [ LKEYS.KEYREL.PRED "_duck_n_1_rel",
;            PHON.ONSET con ] ].

duck_v1 := v_-_le &
 [ ORTH < "duck" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_duck_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

duck_v1_tr := v_np_le &
 [ ORTH < "duck" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_duck_v_1_rel",
            PHON.ONSET con ] ].

duplicate_n1 := n_-_c_le &
 [ ORTH < "duplicate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_duplicate_n_1_rel",
	    LOCAL.CAT.HEAD.--BAREPP.BP-IN -,
            PHON.ONSET con ] ].

;; Make the parse ranking treat this like "in"
during := p_np_i-reg_le &
 [ ORTH < "during" >,
   SYNSEM [ LKEYS.KEYREL.PRED _during_p_rel,
            PHON.ONSET con ] ].

dust_v1 := v_-_le &
 [ ORTH < "dust" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dust_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

dust_v1_tr := v_np_le &
 [ ORTH < "dust" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dust_v_1_rel",
            PHON.ONSET con ] ].

each_adv1 := av_-_i-vp-x_le &
 [ ORTH < "each" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_each_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET voc ] ].

earlier_a1 := aj_pp_i-cmp-nsb_le &
 [ ORTH < "earlier" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_early_a_1_rel",
            LOCAL.CAT.HEAD.--SBRD na,
            PHON.ONSET voc ] ].

earn_v1 := v_np_le &
 [ ORTH < "earn" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_earn_v_1_rel",
            PHON.ONSET voc ] ].

earth_n1 := n_-_pn_le &
 [ ORTH < "Earth" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Earth",
	    LOCAL.CAT.HEAD.--GENPROP -,
	    PHON.ONSET voc ] ].

earth_n3 := n_-_c-nm_le &
 [ ORTH < "Earth" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Earth",
	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ],
   TOKENS.+LAST.+CLASS.+CASE capitalized ].

earthly_a1 := aj_-_i_le &
 [ ORTH < "earthly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_earthly_a_1_rel",
            LOCAL.CAT.HEAD.--SBRD -,
            PHON.ONSET voc ] ].

easy_a2 := aj_pp-vp_i-it_le &
 [ ORTH < "easy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_easy_a_for_rel",
            PHON.ONSET voc ],
   ALTS.AVIP - ].

eco_friendly_a1 := aj_-_i_le &
 [ ORTH < "eco", "friendly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_eco-friendly_a_1_rel",
            LOCAL.CAT.HEAD.--SBRD -,
            PHON.ONSET voc ] ].

eco_friendly_a2 := aj_-_i_le &
 [ ORTH < "eco", "-", "friendly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_eco-friendly_a_1_rel",
            LOCAL.CAT.HEAD.--SBRD -,
            PHON.ONSET voc ] ].

#|
;; Hack to block "Eddie carrots"
eddie_n1 := n_-_pn_le &
 [ ORTH < "Eddie" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Eddie",
            MODIFD.LPERIPH -,
            PHON.ONSET voc ] ].
|#

edge_n2 := n_-_c-ed_le &
 [ ORTH < "edge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_edge_n_of_rel",
	    LOCAL.CAT.HEAD.--BAREPP.BP-ON -,
            PHON.ONSET voc ] ].

#|
eight_a1 := aj_-_i-prd_le &
 [ ORTH < "eight" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_eight_a_1_rel",
            PHON.ONSET voc ] ].
|#

eightfold_adv1 := av_-_i-vp-po_le &
 [ ORTH < "eightfold" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_eightfold_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET voc ] ].

either_adv1 := av_-_i-vp-x_le &
 [ ORTH < "either" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_either_a_also_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET voc ] ].

either_adv2 := av_-_i-vp-po-nmb_le &
 [ ORTH < "either" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_either_a_also_rel",
	    LOCAL.CAT [ HEAD.--ADVADJ -,
	                VAL.SPR.FIRST unexpressed_min ],
            PHON.ONSET voc ] ].

elderly_a1 := aj_-_i_le &
 [ ORTH < "elderly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_elderly_a_1_rel",
            LOCAL.CAT.HEAD.--SBRD -,
            PHON.ONSET voc ] ].

;; 2018-03-17 - Exclude appos for |we elected Kim the president|
elect_v2 := v_np_le &
 [ ORTH < "elect" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_elect_v_1_rel",
            LOCAL.CAT.VAL.COMPS.FIRST.MODIFD.LPERIPH bool,
            PHON.ONSET voc ] ].

elementary_isect := aj_-_i_le &
 [ ORTH < "elementary" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_elementary_a_1_rel",
            PHON.ONSET voc ],
   TOKENS.+LAST.+CLASS.+CASE non_capitalized ].

;; Avoid misuse for "Xi Lake"
eleven_roman := aj_-_i-rom-pl_le &
 [ ORTH < "XI" >,
   SYNSEM [ LKEYS.KEYREL.CARG "XI",
            MODIFD rmod,
            PHON.ONSET voc ],
   TOKENS.+LAST.+CLASS.+CASE capitalized+upper ].

elk_n1 := n_-_c_le &
 [ ORTH < "elk" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_elk_n_1_rel",
   	    LOCAL.CAT cat_infl_nosuff &  [ HEAD.--BARE - ],
            PHON.ONSET voc ] ].

e_mail_v2 := v_-_le &
 [ ORTH < "e", "mail" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_email_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET voc ] ].

e_mail_v2_tr := v_np_le &
 [ ORTH < "e", "mail" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_email_v_1_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
            PHON.ONSET voc ] ].

e_mail_v3 := v_-_le &
 [ ORTH < "e-mail" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_email_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET voc ] ].

e_mail_v3_tr := v_np_le &
 [ ORTH < "e-mail" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_email_v_1_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
            PHON.ONSET voc ] ].

e_mail_v8 := v_-_le &
 [ ORTH < "e", "-", "mail" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_email_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET voc ] ].

e_mail_v8_tr := v_np_le &
 [ ORTH < "e", "-", "mail" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_email_v_1_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
            PHON.ONSET voc ] ].

email_v2 := v_-_le &
 [ ORTH < "email" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_email_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET voc ] ].

email_v2_tr := v_np_le &
 [ ORTH < "email" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_email_v_1_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
            PHON.ONSET voc ] ].

emergency_n1 := n_-_c-ns_le &
 [ ORTH < "emergency" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_emergency_n_1_rel",
	    LOCAL.CAT.HEAD.--BAREPP.BP-INCASEOF -,
            PHON.ONSET voc ] ].

en_masse_adv1 := av_-_i-vp-po_le &
 [ ORTH < "en", "masse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_en+masse_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET voc ] ].

enamel_v1 := v_-_le &
 [ ORTH < "enamel" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_enamel_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET voc ] ].

enamel_v1_tr := v_np_le &
 [ ORTH < "enamel" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_enamel_v_1_rel",
            PHON.ONSET voc ] ].

end_n1 := n_-_c-ed-ns_le &
 [ ORTH < "end" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_end_n_of_rel",
	    LOCAL.CAT.HEAD.--BAREPP.BP-ON -,
            PHON.ONSET voc ] ].

end_to_end_adv1 := av_-_i-vp-po_le &
 [ ORTH < "end", "to", "end" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_end+to+end_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET voc ] ].

end_to_end_adv2 := av_-_i-vp-po_le &
 [ ORTH < "end", "-", "to", "-", "end" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_end+to+end_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET voc ] ].

end_to_end_adv3 := av_-_i-vp-po_le &
 [ ORTH < "end-to-end" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_end+to+end_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET voc ] ].

end_up_v1 := v_p-np_le &
 [ ORTH < "end" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_end_v_up_rel" ],
	    LOCAL.CAT.VAL.COMPS.FIRST.NONLOC.SLASH.LIST < >,
            PHON.ONSET voc ] ].

;; This misspelled entry matches what is still in SVN for RWL as of July 2013.
#|
english_a1 := aj_-_i-att_le &
 [ ORTH < "English" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_english_a_1_rel",
            PHON.ONSET voc ] ].
|#

english_n1 := n_-_pn-sg_le &
 [ ORTH < "English" >,
   SYNSEM [ LKEYS.KEYREL.CARG "English",
            MODIFD.LPERIPH na,
            PHON.ONSET voc ],
   TOKENS.+LAST.+CLASS.+CASE capitalized ].

enjoyable_a3 := aj_pp-vp_i-it_le &
 [ ORTH < "enjoyable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_enjoyable_a_1_rel",
            PHON.ONSET voc ],
   ALTS.AVIP - ].

enjoy_v1 := v_np_le &
 [ ORTH < "enjoy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_enjoy_v_1_rel",
            PHON.ONSET voc ] ].

ensure_v2 := v_np_le &
 [ ORTH < "ensure" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ensure_v_1_rel",
	    LOCAL.CAT.HEAD.--NOCJCRD -,
            PHON.ONSET voc ] ].

envy_v1 := v_np_noger_le &
 [ ORTH < "envy" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_envy_v_1_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
            PHON.ONSET voc ] ].

epidemic_n1 := n_-_c_le &
 [ ORTH < "epidemic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_epidemic_n_1_rel",
            LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET voc ] ].

escape_v1 := v_-_le &
 [ ORTH < "escape" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_escape_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET voc ] ].

escape_v1_tr := v_np_le &
 [ ORTH < "escape" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_escape_v_1_rel",
            PHON.ONSET voc ] ].

essential_a3 := aj_cp_i-it_le &
 [ ORTH < "essential" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_essential_a_for_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--MAL3SG -,
            PHON.ONSET voc ] ].

essential_n1 := n_-_c_le &
 [ ORTH < "essential" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_essential_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET voc ] ].

esteemed_a1 := aj_-_i_le &
 [ ORTH < "esteemed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_esteemed_a_1_rel",
	    LOCAL.CAT.HEAD.--MALSBRD -,
            PHON.ONSET voc ] ].

estimate_n1 := n_pp_c-ns-of_le &
 [ ORTH < "estimate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_estimate_n_of_rel",
	    LOCAL.CAT.HEAD [ --MALPLCPD -,
			     --BARE - ],
            PHON.ONSET voc ] ].

;; DPF 2019-06-06 - Block |Europe people|
europe_n1 := n_-_pn-neut_le &
 [ ORTH < "Europe" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Europe",
            LOCAL.CAT.HEAD.MINORS.NORM no_rel,
            PHON.ONSET con ] ].

eve_n1 := n_pp_c-of-obl_le &
 [ ORTH < "eve" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_eve_n_of_rel",
            PHON.ONSET voc ],
   TOKENS.+LAST.+CLASS.+CASE non_capitalized ].

even_adv1 := av_-_i-vp-x_le &
 [ ORTH < "even" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_even_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET voc ] ].

even_adv2 := av_-_i-ap-pp_le &
 [ ORTH < "even" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_even_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET voc ] ].

even_adv3 := av_-_i-vp-po_le &
 [ ORTH < "even" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_even_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET voc ] ].

;; Considered avoiding spurious robust analysis for |we hardly ever arise|
;; by always blocking on finite VP, but want neg polarity uses, as in
;; |the first book he ever read|.  So leave for now.
#|
ever_adv1 := av_-_i-vp-pr_le &
 [ ORTH < "ever" >,
   SYNSEM [ LKEYS.KEYREL.PRED _ever_a_1_rel,
	    LOCAL.CAT.HEAD.MOD.FIRST.LOCAL.CAT.HEAD.VFORM non_fin,
            PHON.ONSET voc ] ].
|#

;; Need DEF + for "two of every five workers"
every_deg := av_-_dg-jo-num_le &
 [ ORTH < "every" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_every_x_deg_rel",
	    LOCAL.CAT.VAL.SPEC.FIRST.--SIND.DEF +,
            PHON.ONSET voc ] ].

#|
every_interval_p := p_np_i-msr_le &
 [ ORTH < "every" >,
   SYNSEM [ LKEYS.KEYREL.PRED loc_nonsp_rel,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET voc ] ].
|#

example_n1 := n_pp_c-ns-of_le &
 [ ORTH < "example" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_example_n_of_rel",
   	    LOCAL.CAT.HEAD.--BAREPP.BP-FOR -,
            PHON.ONSET voc ] ].

;; |*we admire an exciting|
excite_v1 := v_np_le &
 [ ORTH < "excite" >,
   ALTS.NGER -,
   SYNSEM [ LKEYS.KEYREL.PRED "_excite_v_1_rel",
            PHON.ONSET voc ] ].

excited_a1 := aj_-_i-sbrd_le &
 [ ORTH < "excited" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_excited_a_1_rel",
            PHON.ONSET voc ] ].

exercise_n1 := n_-_mc-ns_le &
 [ ORTH < "exercise" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_exercise_n_1_rel",
	    MODIFD.LPERIPH na_or_+,
            PHON.ONSET voc ] ].

exercise_v1 := v_-_le &
 [ ORTH < "exercise" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_exercise_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET voc ] ].

exercise_v1_tr := v_np_le &
 [ ORTH < "exercise" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_exercise_v_1_rel",
            PHON.ONSET voc ] ].

exhausting_a3 := aj_pp-vp_i-it_le &
 [ ORTH < "exhausting" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_exhaust_v_1_rel",
            PHON.ONSET voc ],
   ALTS.AVIP - ].

exhibit_n1 := n_-_c_le &
 [ ORTH < "exhibit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_exhibit_n_1_rel",
   	    LOCAL.CAT.HEAD.--BAREPP.BP-ON -,
            PHON.ONSET voc ] ].

exit_v1 := v_-_le &
 [ ORTH < "exit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_exit_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET voc ] ].

exit_v1_tr := v_np_le &
 [ ORTH < "exit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_exit_v_1_rel",
            PHON.ONSET voc ] ].

expect_v1 := v_np_le &
 [ ORTH < "expect" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_expect_v_1_rel",
	    LOCAL.CAT.HEAD.--NOCJCRD -,
            PHON.ONSET voc ] ].

expect_intr_v1 := v_-_le &
 [ ORTH < "expect" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_expect_v_1_rel",
	    LOCAL.CAT.HEAD [ --NOCJCRD -,
			     --RUNON - ],
            PHON.ONSET voc ] ].

experiment_v1 := v_-_le &
 [ ORTH < "experiment" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_experiment_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET voc ] ].

explain_v2 := v_np*-pp*_to_le &
 [ ORTH < "explain" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_explain_v_to_rel",
	    LOCAL.CAT.HEAD.--NOCJCRD -,
            PHON.ONSET voc ] ].

export_v1 := v_-_le &
 [ ORTH < "export" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_export_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET voc ] ].

export_v1_tr := v_np_le &
 [ ORTH < "export" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_export_v_1_rel",
            PHON.ONSET voc ] ].

express_v3 := v_pp*-cp_fin-imp_le &
 [ ORTH < "express" >,
   ALTS.TNS-ID -,
   SYNSEM [ LKEYS.KEYREL.PRED "_express_v_to_rel",
            PHON.ONSET voc ] ].

extend_v1 := v_np_noger_le &
 [ ORTH < "extend" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_extend_v_1_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
            PHON.ONSET voc ] ].

extinct_a1 := aj_-_i-sbrd_le &
 [ ORTH < "extinct" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_extinct_a_1_rel",
            PHON.ONSET voc ] ].

;; Block robust |my eyes cry|
eye_v1 := v_np_le &
 [ ORTH < "eye" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_eye_v_1_rel",
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET voc ] ].

face-down_adv1 := av_-_i-vp_le &
 [ ORTH < "face", "-", "down" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_face-down_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

face-down_adv2 := av_-_i-vp_le &
 [ ORTH < "face", "down" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_face-down_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

face-up_adv2 := av_-_i-vp_le &
 [ ORTH < "face", "up" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_face-up_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

;; Avoid robust |in fact|
fact_n1 := n_-_mc-ns_le &
 [ ORTH < "fact" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fact_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

fact_n2 := n_cp_c-optc_le &
 [ ORTH < "fact" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fact_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

factor_v2 := v_-_unacc_le &
 [ ORTH < "factor" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_factor_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

fade_v1 := v_-_le &
 [ ORTH < "fade" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fade_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

fair_a1 := aj_-_i_le &
 [ ORTH < "fair" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fair_a_1_rel",
	    MODIFD.LPERIPH na_or_+,
	    LOCAL.CAT.HEAD.--MALSBRD -,
            PHON.ONSET con ] ].

fairly_adv := av_-_i-vp-only_le &
 [ ORTH < "fairly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fair_a_1_rel",
            PHON.ONSET con ] ].

faith_n1 := n_-_mc_le &
 [ ORTH < "faith" >,
   ALTS.NONINITCAP -,
   SYNSEM [ LKEYS.KEYREL.PRED "_faith_n_1_rel",
            PHON.ONSET con ] ].

;; Ranking: Block plural for false analysis of |The holiday falls on a Friday|
;; Ranking: Also block as mod in appos-nbar for 
;; |... in Chinese culture, fall on ...|
;; 2022-04-23 - But we want "They zoomed over the falls", so remove PNG.PN 3s,
;; and keep an eye on the original ranking problem, which has at least receded.
;;
fall_n4 := n_-_c_le &
 [ ORTH < "fall" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fall_n_1_rel",
   	    LOCAL [ CAT.HEAD [ --BARE -,
	                       MINORS.NORM no_rel ] ],
            PHON.ONSET con ] ].

fake_v1 := v_-_le &
 [ ORTH < "fake" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fake_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

fake_v1_tr := v_np_le &
 [ ORTH < "fake" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fake_v_1_rel",
            PHON.ONSET con ] ].

false_a1 := aj_-_i_le &
 [ ORTH < "false" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_false_a_1_rel",
            LOCAL.CAT.HEAD.--SBRD -,
            PHON.ONSET con ] ].

family_n2 := n_pp_c-gr-of_le &
 [ ORTH < "family" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_family_n_of_rel",
            LOCAL.CAT.VAL.SPR < expressed_synsem >,
            PHON.ONSET con ] ].

fancy_n1 := n_-_c_le &
 [ ORTH < "fancy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fancy_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

fancy_v1 := v_np_le &
 [ ORTH < "fancy" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_fancy_v_1_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
            PHON.ONSET con ] ].

fancy_v3 := v_cp_prop_le &
 [ ORTH < "fancy" >,
   ALTS.CPFRAG -,
   SYNSEM [ LKEYS.KEYREL.PRED "_fancy_v_1_rel",
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD comp,
            PHON.ONSET con ] ].

far := av_-_i-vp-nvm_le &
 [ ORTH < "far" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_far_a_from_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

far_off := av_-_i-vp-po_le &
 [ ORTH < "far", "off" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_far+off_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

fare_v1 := v_-_le &
 [ ORTH < "fare" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fare_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

fascinate_v1 := v_np_le &
 [ ORTH < "fascinate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fascinate_v_1_rel",
            PHON.ONSET con ] ].

fast_asleep_a1 := aj_-_i-prd_le &
 [ ORTH < "fast", "asleep" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fast+asleep_a_1_rel",
            PHON.ONSET con ] ].

fast := av_-_i-vp-po_le &
 [ ORTH < "fast" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fast_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

fast_n1 := n_-_c_le &
 [ ORTH < "fast" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fast_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

;; NORM norm_rel blocks |father bear|, so remove, and remind ourselves what
;; it was there for.
;; DPF 2018-11-12 - Removed --BARE - since we want robust (lowercase)
;; |We talked to father|
;;
father_n1 := n_pp_c-of_le &
 [ ORTH < "father" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_father_n_of_rel",
            PHON.ONSET con ],
   TOKENS.+LAST.+CLASS.+CASE non_capitalized ].

fault_v1 := v_-_le &
 [ ORTH < "fault" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fault_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

;; Avoid robust |washing [machine's fault]|
fault_v1_tr := v_np_le &
 [ ORTH < "fault" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fault_v_1_rel",
            LOCAL.CAT.VAL.COMPS.FIRST canonical_synsem,
            PHON.ONSET con ] ].

favor_n1 := n_-_mc_le &
 [ ORTH < "favor" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_favor_n_1_rel",
   	    LOCAL.CAT.HEAD.--BAREPP [ BP-FROM -,
				      BP-IN -,
				      BP-OUTOF -,
				      BP-TO - ],
            PHON.ONSET con ] ].

fax_v2 := v_np_le &
 [ ORTH < "fax" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_fax_v_1_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
            PHON.ONSET con ] ].

fear_v1 := v_-_le &
 [ ORTH < "fear" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fear_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

fear_v1_tr := v_np_le &
 [ ORTH < "fear" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fear_v_1_rel",
            PHON.ONSET con ] ].

fed_n1 := n_-_c-nm_le &
 [ ORTH < "Fed" >,
   TOKENS.+LAST.+CLASS.+CASE capitalized,
   SYNSEM [ LKEYS.KEYREL.CARG "Fed",
            PHON.ONSET con ] ].

feed_v2 := v_np_le &
 [ ORTH < "feed" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_feed_v_1_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD [ --MALPLCPD -,
						       --POSSRBST - ],
            PHON.ONSET con ] ].

feed_v3 := v_-_le &
 [ ORTH < "feed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_feed_v_2_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

feel_n1 := n_pp_c-nsnc-of-nochd_le &
 [ ORTH < "feel" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_feel_n_of_rel",
   	    LOCAL.CAT.HEAD.--BARE -,       
            PHON.ONSET con ] ].

feeling_n1 := n_pp_c-of_le &
 [ ORTH < "feeling" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_feeling_n_of_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

;; Exclude |he felt boring the teacher|
;; DPF 2018-03-07 - And block passive: |[Friends felt] slept|
;;
feel_v1 := v_np_ntr_le &
 [ ORTH < "feel" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_feel_v_1_rel",
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD basic_noun,
            PHON.ONSET con ] ].

;; DPF 2018-03-07 - Block |Friends chosen felt watched|
;; DPF 2018-09-12 - But we want |Kim felt rejected|, so undo.
;;
#|
feel_v4 := v_ap-pp_about_le &
 [ ORTH < "feel" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_feel_v_seem-about_rel",
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD basic_adj,
            PHON.ONSET con ] ].
|#

feel_v7 := v_pp*-cp_le &
 [ ORTH < "feel" >,
   ALTS [ CPFRAG -,
          TNS-ID - ],
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_feel_v_1_rel" ],
            LOCAL.CAT.VAL.COMPS.REST.FIRST.LOCAL.CAT.HEAD.--MAL3SG -,
            PHON.ONSET con ] ].

fetch_n1 := n_-_m_le &
 [ ORTH < "fetch" >,
   ALTS.PLMASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_fetch_n_1_rel",
            PHON.ONSET con ] ].

fetch_v1 := v_np*_le &
 [ ORTH < "fetch" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_fetch_v_1_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
            PHON.ONSET con ] ].

ferment_v1 := v_-_unacc_le &
 [ ORTH < "ferment" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ferment_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

ferryboat_n1 := n_-_c-transp_le &
 [ ORTH < "ferryboat" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ferryboat_n_1_rel",
            PHON.ONSET con ] ].

fiddle_v1 := v_-_le &
 [ ORTH < "fiddle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fiddle_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

field_n1 := n_pp_c-of_le &
 [ ORTH < "field" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_field_n_of_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

fifth_adv1 := av_-_i-vp_le &
 [ ORTH < "fifth" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fifth_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

fight_n1 := n_-_c_le &
 [ ORTH < "fight" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fight_n_1_rel",
            PHON.ONSET con ] ].

fight_v1 := v_-_le &
 [ ORTH < "fight" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fight_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

fight_v1_tr := v_np_le &
 [ ORTH < "fight" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fight_v_1_rel",
            PHON.ONSET con ] ].

;; Enable robust "We had a fighting."
fighting_n1 := n_-_m_le &
 [ ORTH < "fighting" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fighting_n_1_rel",
            PHON.ONSET con ] ].

figure_v1 := v_-_le &
 [ ORTH < "figure" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_figure_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

figure_v1_tr := v_np_le &
 [ ORTH < "figure" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_figure_v_1_rel",
            PHON.ONSET con ] ].

file_n1 := n_pp_c-of_le &
 [ ORTH < "file" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_file_n_of_rel",
   	    LOCAL.CAT.HEAD.--BAREPP.BP-ON -,
            PHON.ONSET con ] ].

fill_v2 := v_-_unacc_le &
 [ ORTH < "fill" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fill_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

film_v1 := v_-_le &
 [ ORTH < "film" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_film_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

film_v1_tr := v_np_le &
 [ ORTH < "film" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_film_v_1_rel",
            PHON.ONSET con ] ].

;; 2021-01-12 - Block robust "find painting very important" via basic_noun
find_v1 := v_np_le &
 [ ORTH < "find" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_find_v_1_rel",
	    LOCAL.CAT [ HEAD [ --SBRDMOD -,
			       --NOCJCRD - ],
	                VAL.COMPS.FIRST.LOCAL.CAT.HEAD basic_noun &
				                       [ --POSSRBST - ] ],
            PHON.ONSET con ] ].

;; Interestingly, we change the PRED value here so it is not the same as that
;; of find_v1, because our generator would happily produce the following RNR
;; output as subsumed by |they found a cat and found dogs|:
;; |they [ [ found _ and found dogs _ ] a cat ]
;; where the generator fills in an ARG3 for the second "find".
;; Not behavior we want for the generator, so FIX someday.
;;
find_v2 := v_np-np_only_le &
 [ ORTH < "find" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_find_v_2_rel",
            PHON.ONSET con ] ].

fine_a1 := av_-_i-vp-po_le &
 [ ORTH < "fine" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fine_a_for_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

fine_v1 := v_np_le &
 [ ORTH < "fine" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_fine_v_1_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
            PHON.ONSET con ] ].

finished_a1 := aj_-_i_le &
 [ ORTH < "finished" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_finished_a_1_rel",
	    LOCAL.CAT.HEAD.--MALSBRD -,
            PHON.ONSET con ] ].

fire_v1 := v_-_le &
 [ ORTH < "fire" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fire_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

fire_v1_tr := v_np_le &
 [ ORTH < "fire" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fire_v_1_rel",
            PHON.ONSET con ] ].

first_adv1 := av_-_i-vp_le &
 [ ORTH < "first" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_first_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

first_adv2 := av_-_s-cp-pr_le &
 [ ORTH < "first" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_first_a_1_rel",
            PHON.ONSET con ] ].

first_and_foremost_adv1 := av_-_i-vp_le &
 [ ORTH < "first", "and", "foremost" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_first+and+foremost_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

first_class_adv1 := av_-_i-vp-po_le &
 [ ORTH < "first", "class" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_first+class_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

first_class_adv2 := av_-_i-vp-po_le &
 [ ORTH < "first", "-", "class" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_first+class_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

first_hand_adv1 := av_-_i-vp-po_le &
 [ ORTH < "first", "hand" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_first+hand_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

first_hand_adv2 := av_-_i-vp-po_le &
 [ ORTH < "first", "-", "hand" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_first+hand_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

first_hand_adv3 := av_-_i-vp-po_le &
 [ ORTH < "firsthand" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_first+hand_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

fish_n1 := n_-_mc_le &
 [ ORTH < "fish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fish_n_1_rel",
	    LOCAL.CAT cat_infl_nosuff &
   	              [ HEAD.--BARE - ],
            PHON.ONSET con ] ].

fish_v1 := v_-_le &
 [ ORTH < "fish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fish_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

fish_v1_tr := v_np_le &
 [ ORTH < "fish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fish_v_1_rel",
            PHON.ONSET con ] ].

first_n1 := n_-_c-nocnh_le &
 [ ORTH < "first" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_first_n_of_rel",
   	    LOCAL.CAT [ HEAD.--BARE -,
			VAL.SPR.FIRST.LOCAL.CAT.HEAD.--POSSRBST - ],
            PHON.ONSET con ] ].

first_n2 := n_pp_c-of-obl_le &
 [ ORTH < "first" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_first_n_of_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

first_prize_n1 := n_-_m_le &
 [ ORTH < "first", "prize" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_first+prize_n_1_rel",
            PHON.ONSET con ] ].

first_place_n1 := n_-_m_le &
 [ ORTH < "first", "place" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_first+place_n_1_rel",
            PHON.ONSET con ] ].

;; Avoid robust "are" in |Fish are the best food|
fish_n1 := n_-_mc_le &
 [ ORTH < "fish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fish_n_1_rel",
            LOCAL.AGR.PNG png-irreg,
            PHON.ONSET con ] ].

fish_v1 := v_-_le &
 [ ORTH < "fish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fish_v_1_rel",
            PHON.ONSET con ] ].

fit_in_v1 := v_p-np_le &
 [ ORTH < "fit" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_fit_v_in_rel" ],
	    LOCAL.CAT.HEAD.TAM.SAME-PAST +,
            PHON.ONSET con ] ].

fit_in_v2 := v_p_le &
 [ ORTH < "fit" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_fit_v_in_rel" ],
	    LOCAL.CAT.HEAD.TAM.SAME-PAST +,
            PHON.ONSET con ] ].

fit_in_with_v1 := v_p-pp_le &
 [ ORTH < "fit" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    --OCOMPKEY _with_p_rel,
                    KEYREL.PRED "_fit_v_in_rel" ],
	    LOCAL.CAT.HEAD.TAM.SAME-PAST +,
            PHON.ONSET con ] ].

fit_into_v1 := v_pp_e_le &
 [ ORTH < "fit" >,
   SYNSEM [ LKEYS [ --COMPKEY _into_p_sel_rel,
                    KEYREL.PRED "_fit_v_into_rel" ],
	    LOCAL.CAT.HEAD.TAM.SAME-PAST +,
            PHON.ONSET con ] ].

fit_v1 := v_pp_unacc_le &
 [ ORTH < "fit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fit_v_1_rel",
	    LOCAL.CAT.HEAD.TAM.SAME-PAST +,
            PHON.ONSET con ] ].

fit_v2 := v_np_le &
 [ ORTH < "fit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fit_v_1_rel",
	    LOCAL.CAT.HEAD.TAM.SAME-PAST +,
            PHON.ONSET con ] ].

fivefold_adv1 := av_-_i-vp-po_le &
 [ ORTH < "fivefold" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fivefold_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

fix_v1 := v_np_le &
 [ ORTH < "fix" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_fix_v_1_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
            PHON.ONSET con ] ].

fizz_v1 := v_-_le &
 [ ORTH < "fizz" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fizz_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

flame_v1 := v_-_le &
 [ ORTH < "flame" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_flame_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

;; Block this to avoid RNR for "[flashed through his mind and made him] panic"
#|
flash_v1 := v_np_noger_le &
 [ ORTH < "flash" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_flash_v_cause_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
            PHON.ONSET con ] ].
|#

flash_v2 := v_-_unacc_le &
 [ ORTH < "flash" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_flash_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

flat_a1 := aj_-_i-er-sbrd_le &
 [ ORTH < "flat" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_flat_a_1_rel",
            PHON.ONSET con ] ].

flat_adv1 := av_-_i-vp-pr_le &
 [ ORTH < "flat" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_flat_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

;; |my tire got flat|
flat_n1 := n_-_c_le &
 [ ORTH < "flat" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_flat_n_1_rel",
            LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

float_n1 := n_-_c_le &
 [ ORTH < "float" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_float_n_1_rel",
            LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

floss_v1 := v_-_le &
 [ ORTH < "floss" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_floss_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

floss_v1_tr := v_np_le &
 [ ORTH < "floss" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_floss_v_1_rel",
            PHON.ONSET con ] ].

;; LPERIPH na_or_+ prevents |one flower|, so change to na_or_- and recall what the
;; exclusion of - was for.
;;
flower_n1 := n_-_c_le &
 [ ORTH < "flower" >,
   SYNSEM [ LKEYS.KEYREL [ PRED "_flower_n_1_rel",
                           ARG0.SORT nonhuman ],
	    MODIFD.LPERIPH na_or_-,
            PHON.ONSET con ] ].

flush_v1 := v_-_le &
 [ ORTH < "flush" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_flush_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

flush_v1_tr := v_np_le &
 [ ORTH < "flush" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_flush_v_1_rel",
            PHON.ONSET con ] ].

foam_v1 := v_-_le &
 [ ORTH < "foam" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_foam_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

focus_v2 := v_-_unacc_le &
 [ ORTH < "focus" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_focus_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

fog_v1 := v_-_le &
 [ ORTH < "fog" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fog_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

fog_v1_tr := v_np_le &
 [ ORTH < "fog" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fog_v_1_rel",
            PHON.ONSET con ] ].

following_n1 := n_-_c-ns-nocnh_le &
 [ ORTH < "following" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_following_n_1_rel",
            LOCAL [ AGR.PNG png-irreg,
		    CAT.HEAD.--COLLOC + ],
            PHON.ONSET con ] ].

;; DPF 2017-09-30 - Not sure what the LPERIPH na is for, but it blocks
;; |the food that night was good|, so let's remove it and see.
;; 2017-10-08 - It was to block compound in |feed the animals food|, so let's
;; make the value na_or_+.
;; 2018-11-27 - Also change to mass-only, to signal |they ate a healthy food|
;; (though this blocks |I could not invent a better food than ice cream|).
;;
food_n1 := n_-_m_le &
 [ ORTH < "food" >,
   SYNSEM [ LKEYS.KEYREL [ PRED "_food_n_1_rel",
                           ARG0.SORT nonhuman ],
	    MODIFD.LPERIPH na_or_+,
            PHON.ONSET con ] ].

foot_apostr_n1 := n_-_c-meas-nocnh_le &
 [ ORTH < "'" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_foot_n_1_rel",
            LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

foot_apostr_n2 := n_-_c-meas-nocnh_le &
 [ ORTH < "‘" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_foot_n_1_rel",
            LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

foot_apostr_n2_u := n_-_c-meas-nocnh_le &
 [ ORTH < "’" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_foot_n_1_rel",
            LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

foot_n2 := n_-_c-ed_le &
 [ ORTH < "foot" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_foot_n_1_rel",
   	    LOCAL.CAT.HEAD.--BAREPP.BP-ON -,
            PHON.ONSET con ] ].

;; DPF 2019-03-26 - Avoid robust |his [mouth [watered, [for he]]] was starving|
;;
for := p_np_i_le &
 [ ORTH < "for" >,
   SYNSEM [ LKEYS.KEYREL.PRED _for_p_rel,
            LOCAL.CAT [ HEAD.--POSSRBST -,
	                VAL.COMPS.FIRST.LOCAL.CAT.HEAD [ --MALCASE -,
							 --BAREDPP.BP-FOR + ] ],
            PHON.ONSET con ] ].

forage_v1 := v_-_le &
 [ ORTH < "forage" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_forage_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

forecast_v1 := v_np_le &
 [ ORTH < "forecast" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_forecast_v_1_rel",
	    LOCAL.CAT.HEAD.TAM.SAME-PAST +,
            PHON.ONSET con ] ].

forecast_v2 := v_cp_le &
 [ ORTH < "forecast" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_forecast_v_1_rel",
	    LOCAL.CAT.HEAD.TAM.SAME-PAST +,
            PHON.ONSET con ] ].

foremost_adv1 := av_-_i-vp_le &
 [ ORTH < "foremost" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_foremost_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

forgive_v3 := v_np*_le &
 [ ORTH < "forgive" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_forgive_v_for_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
            PHON.ONSET con ] ].

forest_n1 := n_pp_c-of_le &
 [ ORTH < "forest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_forest_n_of_rel",
            PHON.ONSET con ] ].

;; avoid compound analysis when prep `from' misspelled
form_n1 := n_pp_mc-of_le &
 [ ORTH < "form" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_form_n_of_rel",
            LOCAL.CAT [ HEAD [ MINORS.NORM norm_rel,
			       --OFMOD - ],
	    	        VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--BARE - ],
            PHON.ONSET con ] ].

form_v2 := v_-_unacc_le &
 [ ORTH < "form" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_form_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

fort_n1 := n_-_c_le &
 [ ORTH < "fort" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fort_n_1_rel",
            LOCAL [ CAT.HEAD.--BARE -,
            	    CONT.HOOK.INDEX.PNG.GEN neut ],
            PHON.ONSET con ] ].

forward_v1 := v_np_le &
 [ ORTH < "forward" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_forward_v_1_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
            PHON.ONSET con ] ].

fourfold_adv1 := av_-_i-vp-po_le &
 [ ORTH < "fourfold" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fourfold_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

fourth_adv1 := av_-_i-vp_le &
 [ ORTH < "fourth" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fourth_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

fourth_n1 := n_pp_c-gr-of_le &
 [ ORTH < "fourth" >,
   ALTS.NONINITCAP -,
   SYNSEM [ LKEYS.KEYREL.PRED "_fourth_n_of_rel",
            PHON.ONSET con ] ].

found_v1 := v_np_le &
 [ ORTH < "found" >,
   SYNSEM [ LOCAL.CAT.HEAD [ --MAL3SG -,
			     --MALCOPBSE - ],
	    LKEYS.KEYREL.PRED "_found_v_1_rel",
            PHON.ONSET con ] ].

free_a3 := aj_pp_i-prd_le &
 [ ORTH < "free" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_free_a_of_rel",
            LOCAL.CAT.HEAD.--SBRD na,
            PHON.ONSET con ] ].

;; DPF 2019-02-14 - Don't want NORM norm_rel since we want robust |friends cat|
;;
friend_n1 := n_pp_c-of_le &
 [ ORTH < "friend" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_friend_n_of_rel",
            LOCAL.CAT [ HEAD [ --MALPLCPD -,
			       --OFMOD - ],
			VAL.COMPS.FIRST.LOCAL.CAT.HEAD.MINORS.ALTMIN 
			                                        nonpro_rel ],
            PHON.ONSET con ] ].

friendly_a1 := aj_pp_i_le &
 [ ORTH < "friendly" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_friendly_a_to_rel" ],
            LOCAL.CAT.HEAD.--SBRD -,
            PHON.ONSET con ] ].

frisbee_n1 := n_-_c-maycap_le &
 [ ORTH < "frisbee" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_frisbee_n_1_rel",
            LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

from := p_np_i_le &
 [ ORTH < "from" >,
   SYNSEM [ LKEYS.KEYREL.PRED _from_p_rel,
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--BAREDPP.BP-FROM +,
            PHON.ONSET con ] ].

;; Ranking fails to prefer detless-PP here, so add MWE
;;
from_view_pp := pp_-_i_le &
 [ ORTH < "from", "view" >,
   SYNSEM [ LKEYS.KEYREL.PRED _from+view_p_rel,
            PHON.ONSET con ] ].

front_n1 := n_-_c-ed_le &
 [ ORTH < "front" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_front_n_1_rel",
	    LOCAL.CAT.HEAD.--BAREPP [ BP-IN -,
				      BP-UP - ],
            PHON.ONSET con ] ].

frost_v1 := v_-_le &
 [ ORTH < "frost" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_frost_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

frost_v1_tr := v_np_le &
 [ ORTH < "frost" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_frost_v_1_rel",
            PHON.ONSET con ] ].

fudge_v1 := v_-_le &
 [ ORTH < "fudge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fudge_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

fudge_v1_tr := v_np_le &
 [ ORTH < "fudge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fudge_v_1_rel",
            PHON.ONSET con ] ].

full_a1 := aj_pp_i-er-sbrd_le &
 [ ORTH < "full" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_full_a_of_rel" ],
            PHON.ONSET con ] ].


;; --NOUNADJ + since `fun' can also be mass noun, so avoid robust |much fun|
;;
fun_a1 := aj_pp_i-sbrd_le &
 [ ORTH < "fun" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_fun_a_for_rel" ],
            LOCAL.CAT.HEAD.--NOUNADJ +,
            PHON.ONSET con ] ].

;; DPF 2018-03-07 - Block |but it was fun to| so we get to/too error.
;;
fun_a2 := aj_pp-vp_i-it_le &
 [ ORTH < "fun" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fun_a_for_rel",
   	    LOCAL.CAT.VAL.COMPS.REST.FIRST.--MIN non_ellipt_rel,
            PHON.ONSET con ],
   ALTS.AVIP - ].

;; DPF 2021-01-12 - Removed RPERIPH na_or_+ since it blocks "the fun we have"
;;
fun_n1 := n_-_m-ns_le &
 [ ORTH < "fun" >,
   SYNSEM [ LOCAL.CAT.HEAD [ --MALCM -,
			     MINORS.NORM norm_rel ],
	    LKEYS.KEYREL.PRED "_fun_n_1_rel",
            PHON.ONSET con ] ].

function_n1 := n_pp_mc-of_le &
 [ ORTH < "function" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_function_n_1_rel",
	    LOCAL.CAT [ HEAD.--OFMOD -,
			VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--BARE - ],
            PHON.ONSET con ] ].

further_a1 := aj_pp-pp_i-cmp_le &
 [ ORTH < "further" >,
   SYNSEM [ LKEYS [ --COMPKEY _from_p_sel_rel,
                    KEYREL.PRED "_far_a_from_rel" ],
	    LOCAL.CAT.HEAD.--MALSBRD -,
            PHON.ONSET con ] ].

further_adv2 := av_-_i-vp-pr_le &
 [ ORTH < "further" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_further_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

;; Block for |further more|
further_v1 := v_np_le &
 [ ORTH < "further" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_further_v_1_rel",
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD non_partn,
            PHON.ONSET con ] ].

future_n1 := n_-_c-nocnh_le &
 [ ORTH < "future" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_future_n_1_rel",
	    LOCAL.CAT.HEAD.--BAREPP.BP-IN -,
            PHON.ONSET con ] ].

fuzz_v2 := v_-_unacc_le &
 [ ORTH < "fuzz" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_fuzz_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

gain_v1 := v_-_le &
 [ ORTH < "gain" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gain_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

gain_v1_tr := v_np_le &
 [ ORTH < "gain" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gain_v_1_rel",
            PHON.ONSET con ] ].

gall_v1 := v_-_le &
 [ ORTH < "gall" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gall_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

gall_v1_tr := v_np_le &
 [ ORTH < "gall" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gall_v_1_rel",
            PHON.ONSET con ] ].

gamble_v1 := v_-_le &
 [ ORTH < "gamble" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gamble_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

game_n3 := n_-_c-meas_le &
 [ ORTH < "game" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_game_n_1_rel",
            PHON.ONSET con ] ].

gaze_v1 := v_-_le &
 [ ORTH < "gaze" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gaze_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

gel_v1 := v_-_le &
 [ ORTH < "gel" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gel_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

general_n1 := n_-_c_le &
 [ ORTH < "general" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_general_n_1_rel",
	    LOCAL.CAT.HEAD.--BAREPP.BP-IN -,
            PHON.ONSET con ] ].

generation_n1 := n_pp_mc-of_le &
 [ ORTH < "generation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_generation_n_of_rel",
            LOCAL.CAT [ HEAD.--OFMOD -,
			VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--BARE - ],
            PHON.ONSET con ] ].

generation_n2 := n_pp_c-of-brn_le &
 [ ORTH < "generation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_generation_n_of_rel",
            PHON.ONSET con ] ].

geometry_n1 := n_-_m_le &
 [ ORTH < "geometry" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_geometry_n_1_rel",
            PHON.ONSET con ] ].

;; Avoid robust "he got back home at ten" with he_his
get_back_v2 := v_p-np_le &
 [ ORTH < "get" >,
   ALTS.ATTRJ -,
   SYNSEM [ LKEYS [ --COMPKEY _back_p_sel_rel,
                    KEYREL.PRED "_get_v_back_rel" ],
            PHON.ONSET con ] ].

;; 2020-09-18 - We want robust "I just got you letter", so removed 
;; COMPS..--POSSRBST, but we will want to avoid robust "she got herself books"
;; so instead restrict robust "herself" to singular noun SPEC.
get_v2 := v_np_ntr_le &
 [ ORTH < "get" >,
   ALTS [ VADJ -,
          NGER -,
	  MALPASS - ],
   SYNSEM [ LOCAL.CAT [ HEAD.--MAL3SG -,
			VAL.COMPS.FIRST.--SIND.SORT entity-or-event ],
	    LKEYS.KEYREL.PRED "_get_v_1_rel",
            PHON.ONSET con ] ].

;; 2021-01-12 - Ranking: block robust "get unlimited pleasure from pets"
;;
get_prd_v1 := v_prd_seq_le &
 [ ORTH < "get" >,
   ALTS [ VADJ -,
          NGER - ],
   SYNSEM [ LKEYS.KEYREL.PRED "_get_v_state_rel",
	    LOCAL.CAT [ HEAD.--HAVEBE -,
			VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--PASSNOBY - ],
            PHON.ONSET con ] ].

get_prd_v2 := v_np-prd_oeq-ntr-x_le &
 [ ORTH < "get" >,
   ALTS [ VADJ -,
          NGER - ],
   SYNSEM [ LKEYS.KEYREL.PRED "_get_v_state_rel",
            PHON.ONSET con ] ].

ghastly_a1 := aj_-_i_le &
 [ ORTH < "ghastly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ghastly_a_1_rel",
            LOCAL.CAT.HEAD.--SBRD -,
            PHON.ONSET con ] ].

girl_n1 := n_-_c-fem_le &
 [ ORTH < "girl" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_girl_n_1_rel",
            PHON.ONSET con ] ].

give_v1 := v_np-np_le &
 [ ORTH < "give" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_give_v_2_rel",
            PHON.ONSET con ] ].

give_v2 := v_np_le &
 [ ORTH < "give" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_give_v_1_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD [ --POSSRBST -,
						       --MALPLCPD - ],
            PHON.ONSET con ] ].

;; DPF 2018-02-15 - We can't block extraction of the complement, since we need
;; |the speech she gave was bad|.
#|
give_v2 := v_np_le &
 [ ORTH < "give" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_give_v_1_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.NONLOC.SLASH.LIST < >,
            PHON.ONSET con ] ].
|#

glance_n1 := n_-_c_le &
 [ ORTH < "glance" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_glance_n_1_rel",
	    LOCAL.CAT.HEAD.--BAREPP.BP-AT -,
            PHON.ONSET con ] ].

glare_v1 := v_-_le &
 [ ORTH < "glare" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_glare_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

glaze_v1 := v_-_le &
 [ ORTH < "glaze" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_glaze_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

glaze_v1_tr := v_np_le &
 [ ORTH < "glaze" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_glaze_v_1_rel",
            PHON.ONSET con ] ].

glitter_v1 := v_-_le &
 [ ORTH < "glitter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_glitter_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

glue_v1 := v_-_le &
 [ ORTH < "glue" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_glue_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

glue_v1_tr := v_np_le &
 [ ORTH < "glue" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_glue_v_1_rel",
            PHON.ONSET con ] ].

gnarly_a1 := aj_-_i_le &
 [ ORTH < "gnarly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gnarly_a_1_rel",
            LOCAL.CAT.HEAD.--SBRD -,
            PHON.ONSET con ] ].

;; DPF 2017-04-03 - Added COMPS..MOD..MODIFD.RPERIPH constraint to prevent 
;; robust analysis of |the milk went bad|.
;;
go_adv := v_adv_le &
 [ ORTH < "go" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_go_v_1_rel",
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.MOD.FIRST.MODIFD.RPERIPH +,
            PHON.ONSET con ] ].

;; DPF 2017-10-03 - RPERIPH is to block robust |went bad|
;; NGER is to block wrong analysis for |it was exciting going to the zoo|
;;
go_v1 := v_pp*_dir_le &
 [ ORTH < "go" >,
   ALTS.NGER -,
   SYNSEM [ LKEYS.KEYREL.PRED "_go_v_1_rel",
            MODIFD.RPERIPH na,
            PHON.ONSET con ] ].

goal_n1 := n_-_c-ns_le &
 [ ORTH < "goal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_goal_n_1_rel",
   	    LOCAL.CAT.HEAD.--BAREPP.BP-ON -,
            PHON.ONSET con ] ].

goat_n1 := n_-_c-ugen_le &
 [ ORTH < "goat" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_goat_n_1_rel",
            PHON.ONSET con ] ].

god_n1 := n_-_c_le &
 [ ORTH < "god" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_god_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,   
            PHON.ONSET con ] ].

goldfish_n1 := n_-_mc_le &
 [ ORTH < "goldfish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_goldfish_n_1_rel",
	    LOCAL.CAT cat_infl_nosuff &
   	              [ HEAD.--BARE - ],
            PHON.ONSET con ] ].

golf_v1 := v_-_le &
 [ ORTH < "golf" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_golf_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

;; --SBRD to block |he did good on his test|
good_a2 := aj_pp_i-er_le &
 [ ORTH < "good" >,
   SYNSEM [ LOCAL.CAT.HEAD [ MINORS.NORM norm_rel,
   	                     --SBRD -,
			     --IDIOMPART +,
			     --NOUNADJ + ],
            LKEYS [ --COMPKEY _at_p_sel_rel,
                    KEYREL.PRED "_good_a_at-for-of_rel" ],
            PHON.ONSET con ] ].

;; Let's require an overt specifier to avoid |He did good on his test|
;; and add a separate entry for "good and evil"
;; --NOUNADJ + to avoid robust |isn't much good|
;;
good_n1 := n_-_m-nocnh_le &
 [ ORTH < "good" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_good_n_1_rel",
            LOCAL.CAT [ HEAD.--MALCM -,
			VAL.SPR.FIRST expressed_synsem ], 
            PHON.ONSET con ] ].

goodbye_n1 := n_-_c_le &
 [ ORTH < "goodbye" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_goodbye_n_1_rel",
   	    LOCAL.CAT [ HEAD.--BARE -,   
	                VAL.SPR.FIRST expressed_synsem ],
            PHON.ONSET con ] ].

goodbye_n2 := n_-_c_le &
 [ ORTH < "good", "-", "bye" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_goodbye_n_1_rel",
   	    LOCAL.CAT [ HEAD.--BARE -,   
	                VAL.SPR.FIRST expressed_synsem ],
            PHON.ONSET con ] ].

goodly_a1 := aj_-_i_le &
 [ ORTH < "goodly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_goodly_a_1_rel",
            LOCAL.CAT.HEAD.--SBRD -,
            PHON.ONSET con ] ].

;; Tried avoiding ranking problem for "[the first] [grade students]" via 
;; --CPDNHD, but we still want "the first-grade courses", so undo
grade_n1 := n_-_c-maycap_le &
 [ ORTH < "grade" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_grade_n_1_rel",
            PHON.ONSET con ] ].

grandfather_n1 := n_-_c-msc_le &
 [ ORTH < "grandfather" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_grandfather_n_of_rel",
            PHON.ONSET con ],
   TOKENS.+LAST.+CLASS.+CASE non_capitalized ].

grandfather_n2 := n_-_pn_le &
 [ ORTH < "Grandfather" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Grandfather",
            PHON.ONSET con ],
   TOKENS.+LAST.+CLASS.+CASE capitalized ].

grandma_n1 := n_-_c_le &
 [ ORTH < "grandma" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_grandma_n_1_rel",
            PHON.ONSET con ],
   TOKENS.+LAST.+CLASS.+CASE non_capitalized ].

grandma_n2 := n_-_pn_le &
 [ ORTH < "Grandma" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Grandma",
            PHON.ONSET con ],
   TOKENS.+LAST.+CLASS.+CASE capitalized ].

grandmother_n1 := n_-_c-fem_le &
 [ ORTH < "grandmother" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_grandmother_n_of_rel",
            PHON.ONSET con ],
   TOKENS.+LAST.+CLASS.+CASE non_capitalized ].

grandmother_n2 := n_-_pn_le &
 [ ORTH < "Grandmother" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Grandmother",
            PHON.ONSET con ],
   TOKENS.+LAST.+CLASS.+CASE capitalized ].

grandpa_n1 := n_-_c_le &
 [ ORTH < "grandpa" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_grandpa_n_1_rel",
            PHON.ONSET con ],
   TOKENS.+LAST.+CLASS.+CASE non_capitalized ].

grandpa_n2 := n_-_pn_le &
 [ ORTH < "Grandpa" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Grandpa",
            PHON.ONSET con ],
   TOKENS.+LAST.+CLASS.+CASE capitalized ].

grant_v1 := v_np*_le &
 [ ORTH < "grant" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_grant_v_1_rel",
	    LOCAL.CAT [ VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
			HEAD.--NOCJCRD - ],
            PHON.ONSET con ] ].

grass_v1 := v_-_le &
 [ ORTH < "grass" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_grass_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

grass_v1_tr := v_np_le &
 [ ORTH < "grass" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_grass_v_1_rel",
            PHON.ONSET con ] ].

gratis_adv1 := av_-_i-vp-po_le &
 [ ORTH < "gratis" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gratis_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

gravelly_a1 := aj_-_i_le &
 [ ORTH < "gravelly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gravelly_a_1_rel",
            LOCAL.CAT.HEAD.--SBRD -,
            PHON.ONSET con ] ].

great_a2 := aj_pp-vp_i-it_le &
 [ ORTH < "great" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_great_a_for_rel",
            PHON.ONSET con ],
   ALTS.AVIP - ].

green_a1 := aj_-_i-color-er_le &
 [ ORTH < "green" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_green_a_2_rel",
            LOCAL.CAT.HEAD.--SBRD -,
            PHON.ONSET con ] ].

grip_v1 := v_-_le &
 [ ORTH < "grip" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_grip_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

grip_v1_tr := v_np_le &
 [ ORTH < "grip" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_grip_v_1_rel",
            PHON.ONSET con ] ].

gripe_v1 := v_-_le &
 [ ORTH < "gripe" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gripe_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

grocery_n1 := n_-_c-cpd_le &
 [ ORTH < "grocery" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_grocery_n_1_rel",
            PHON.ONSET con ] ].

ground_n1 := n_-_c_le &
 [ ORTH < "ground" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ground_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,   
            PHON.ONSET con ] ].

grouse_v1 := v_-_le &
 [ ORTH < "grouse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_grouse_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

guarantee_v3 := v_np_le &
 [ ORTH < "guarantee" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_guarantee_v_1_rel",
	    LOCAL.CAT [ VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
			HEAD.--NOCJCRD - ],
            PHON.ONSET con ] ].

guard_n1 := n_-_c_le &
 [ ORTH < "guard" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_guard_n_1_rel",
   	    LOCAL.CAT.HEAD.--BAREPP.BP-ON -,
            PHON.ONSET con ] ].

;; 2020-12-03 - Separate into trans and intrans, to get better ranking that
;; avoids robust "He was wrong, I guess."
guess_v1 := v_np_le &
 [ ORTH < "guess" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_guess_v_1_rel",
	    LOCAL.CAT.HEAD.--NOCJCRD -,
            PHON.ONSET con ] ].

guess_v4 := v_-_le &
 [ ORTH < "guess" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_guess_v_1_rel",
            PHON.ONSET con ] ].

guide_v1 := v_np_le &
 [ ORTH < "guide" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_guide_v_to_rel",
            PHON.ONSET con ] ].

; 2018-03-12
#|
gum_n1 := n_-_mc_le &
 [ ORTH < "gum" >,
   SYNSEM [ MODIFD.LPERIPH +,
	    LKEYS.KEYREL.PRED "_gum_n_1_rel",
            PHON.ONSET con ] ].
|#

gush_v1 := v_np*_le &
 [ ORTH < "gush" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gush_v_1_rel",
	    LOCAL.CAT.HEAD.--NOCJCRD -,
            PHON.ONSET con ] ].

gym_n1 := n_-_c_le &
 [ ORTH < "gym" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_gym_n_1_rel",
            PHON.ONSET con ] ].

habit_n1 := n_pp_c-ns-of_le &
 [ ORTH < "habit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_habit_n_of_rel",
            PHON.ONSET con ] ].

hail_v1 := v_-_it_le &
 [ ORTH < "hail" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hail_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

half_adv1 := av_-_i-vp-pr_le &
 [ ORTH < "half" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_half_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

;; Block for |one and a half hour|
half_hour_n2 := n_-_c-hour_le &
 [ ORTH < "half", "hour" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_half-hour_n_1_rel",
            MODIFD.LPERIPH na,
            PHON.ONSET con ] ].

halfway_adv := av_-_i-vp-po_le &
 [ ORTH < "halfway" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_halfway_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

hall_n2 := n_-_c-ns_le &
 [ ORTH < "hall" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hall_n_1_rel",
            PHON.ONSET con ] ].

hammer_v2 := v_np-prd_oeq_le &
 [ ORTH < "hammer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hammer_v_1_rel",
	    LOCAL.CAT.HEAD.--SBRDMOD -,
            PHON.ONSET con ] ].

;; DPF 2019-04-16 - Want robust "people with cold hand", so comment out, and
;; let's see where things go wrong.
#|
hand_n1 := n_-_c-ed_le &
 [ ORTH < "hand" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hand_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,   
            PHON.ONSET con ] ].
|#

hand_n1 := n_-_c-ed_le &
 [ ORTH < "hand" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hand_n_1_rel",
   	    LOCAL.CAT.HEAD.--BAREPP [ BP-AT -,
				      BP-IN -,
				      BP-OF -,
				      BP-ON -,
				      BP-OUTOF -,
				      BP-TO - ],
            PHON.ONSET con ] ].

;; Okay as depictive
happy_a1 := aj_pp_i-er-sbrd_le &
 [ ORTH < "happy" >,
   SYNSEM [ LKEYS [ --COMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_happy_a_with_rel" ],
            PHON.ONSET con ] ].

happy_birthday_n1 := n_-_m-maycap_le &
 [ ORTH < "happy", "birthday" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_happy+birthday_n_1_rel",
            PHON.ONSET con ] ].

hard_a1 := aj_-_i-ndpt-er_le &
 [ ORTH < "hard" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hard_a_for_rel",
            LOCAL.CAT.HEAD.--SBRD na,
            PHON.ONSET con ] ].

hard_a2 := aj_pp-vp_i-it_le &
 [ ORTH < "hard" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hard_a_for_rel",
            PHON.ONSET con ],
   ALTS.AVIP - ].

hard_adv1 := av_-_i-vp-po_le &
 [ ORTH < "hard" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hard_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

hardest_adv1 := av_-_i-vp-po_le &
 [ ORTH < "hardest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hardest_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

harvest_v1 := v_-_le &
 [ ORTH < "harvest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_harvest_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

harvest_v1_tr := v_np_le &
 [ ORTH < "harvest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_harvest_v_1_rel",
            PHON.ONSET con ] ].

have_bse_aux := v_vp_have-bse_le &
 [ ORTH < "have" >,
   SYNSEM [ LOCAL.CAT.HEAD.--ROBAUX -,
	    PHON.ONSET con ] ].

;; Block |having| as attrib adj 
have-poss := v_np_poss_le &
 [ ORTH < "have" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_have_v_1_rel",
            LOCAL.CAT [ HEAD.--BSEVPSBJ -,
			VAL.COMPS.FIRST expressed_synsem ],
            PHON.ONSET con ] ].

;; DPF 2017-10-08 - Also block object-extraction, to avoid |the park he 
;; had __ fun| even though this also prevents good |who did he have removed?|
;; FIX later.
;;
have-prd := v_np-prd_oeq-ntr-x_le &
 [ ORTH < "have" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_have_v_prd_rel",
            LOCAL.CAT.VAL.COMPS.FIRST.NONLOC.SLASH.LIST < >,
            PHON.ONSET con ] ].

;; Avoid v-mod for |had better to leave|
;;
have_to1 := v_vp_ssr-nimp_le &
 [ ORTH < "have" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_have_v_qmodal-2_rel",
	    MODIFD.RPERIPH bool,
            PHON.ONSET con ] ].

haunt_v1 := v_np_le &
 [ ORTH < "haunt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_haunt_v_1_rel",
            PHON.ONSET con ] ].

hay_n := n_-_m_le &
 [ ORTH < "hay" >,
   SYNSEM [ LOCAL.CAT.VAL.SPR.FIRST.LOCAL.AGR.PNG.PN 3s,
            LKEYS.KEYREL.PRED "_hay_n_1_rel",
            PHON.ONSET con ] ].

hazard_n1 := n_-_c_le &
 [ ORTH < "hazard" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hazard_n_1_rel",
            PHON.ONSET con ] ].

head_first_adv1 := av_-_i-vp_le &
 [ ORTH < "head", "-", "first" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_head-first_a_1_rel",
            PHON.ONSET con ] ].

head_first_adv2 := av_-_i-vp_le &
 [ ORTH < "head", "first" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_head-first_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

head_on_adv1 := av_-_i-vp_le &
 [ ORTH < "head", "-", "on" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_head-on_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

head_on_adv2 := av_-_i-vp_le &
 [ ORTH < "head", "on" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_head-on_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

head_to_head_adv1 := av_-_i-vp-po_le &
 [ ORTH < "head", "to", "head" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_head+to+head_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

head_to_head_adv2 := av_-_i-vp-po_le &
 [ ORTH < "head", "-", "to", "-", "head" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_head+to+head_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

headline_v1 := v_np_le &
 [ ORTH < "headline" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_headline_v_1_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
            PHON.ONSET con ] ].

healthy_isect := aj_-_i_le &
 [ ORTH < "healthy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_healthy_a_1_rel",
	    LOCAL.CAT.HEAD.--MALSBRD -,
            PHON.ONSET con ] ].

;; 2020-09-30 - Avoid robust "She heard somebody downstairs ring the bell"
;; and similarly for other CP-comp verbs with alternate lexent v_np-vp_bse_le
;;
hear_v2 := v_cp_le &
 [ ORTH < "hear" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hear_v_1_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--MAL3SG -,
            PHON.ONSET con ] ].

heart_n1 := n_-_c-ed_le &
 [ ORTH < "heart" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_heart_n_1_rel",
   	    LOCAL.CAT.HEAD.--BAREPP [ BP-AT -,
				      BP-TO - ],
            PHON.ONSET con ] ].

heartfelt_a1 := aj_-_i_le &
 [ ORTH < "heartfelt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_heartfelt_a_1_rel",
            LOCAL.CAT.HEAD.--SBRD -,
            PHON.ONSET con ] ].

heat_v2 := v_-_unacc_le &
 [ ORTH < "heat" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_heat_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

heavenly_a1 := aj_-_i_le &
 [ ORTH < "heavenly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_heavenly_a_1_rel",
            LOCAL.CAT.HEAD.--SBRD -,
            PHON.ONSET con ] ].

hello_n1 := n_-_c_le &
 [ ORTH < "hello" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hello_n_1_rel",
   	    LOCAL.CAT [ HEAD.--BARE -,   
	                VAL.SPR.FIRST expressed_synsem ],
            PHON.ONSET con ] ].

hello_everybody_pre := av_-_dc-grt-pr_le &
 [ ORTH < "hello", "everybody" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hello+everybody",
            PHON.ONSET con ] ].

hello_everybody_pre_2 := av_-_dc-grt-pr_le &
 [ ORTH < "hello", ",", "everybody" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hello+everybody",
            PHON.ONSET con ] ].

hello_everyone_pre := av_-_dc-grt-pr_le &
 [ ORTH < "hello", "everyone" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hello+everyone",
            PHON.ONSET con ] ].

hello_everyone_pre_2 := av_-_dc-grt-pr_le &
 [ ORTH < "hello", ",", "everyone" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hello+everyone",
            PHON.ONSET con ] ].

help_v1 := v_-_le &
 [ ORTH < "help" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_help_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

help_v1_tr := v_np_le &
 [ ORTH < "help" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_help_v_1_rel",
            PHON.ONSET con ] ].

;; --BARE + is to block NP-N compound for |Leah and her class|
her := n_-_pr-her_le &
 [ ORTH < "her" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.HEAD.--BARE + ] ].

hi_everybody_pre := av_-_dc-grt-pr_le &
 [ ORTH < "hi", "everybody" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hi+everybody",
            PHON.ONSET con ] ].

hi_everybody_pre_2 := av_-_dc-grt-pr_le &
 [ ORTH < "hi", ",", "everybody" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hi+everybody",
            PHON.ONSET con ] ].

hi_everyone_pre := av_-_dc-grt-pr_le &
 [ ORTH < "hi", "everyone" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hi+everyone",
            PHON.ONSET con ] ].

hi_everyone_pre_2 := av_-_dc-grt-pr_le &
 [ ORTH < "hi", ",", "everyone" >,
   SYNSEM [ LKEYS.KEYREL.CARG "hi+everyone",
            PHON.ONSET con ] ].

hide_v1 := v_-_le &
 [ ORTH < "hide" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hide_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

hide_v1_tr := v_np_le &
 [ ORTH < "hide" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hide_v_1_rel",
            PHON.ONSET con ] ].

high_adv := av_-_i-vp-po_le &
 [ ORTH < "high" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_high_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

high_n1 := n_-_c-nocnh_le &
 [ ORTH < "high" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_high_n_1_rel",
   	    LOCAL [ CAT.HEAD.--BAREPP.BP-ON -,
		    CONT.HOOK.INDEX.--BARESG - ],
            PHON.ONSET con ] ].

;; Block for robust "high school"
high_a1 := aj_-_i-er_le &
 [ ORTH < "high" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_high_a_1_rel",
	    LOCAL.CAT.HEAD.MOD.FIRST.MODIFD.RPERIPH na_or_-,
            PHON.ONSET con ] ].

high_school_n2 := n_-_c_le &
 [ ORTH < "high", "school" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_high+school_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,   
            PHON.ONSET con ] ].

higher_a1 := aj_pp_i-cmp_le &
 [ ORTH < "higher" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_high_a_1_rel",
            LOCAL.CAT.HEAD.--SBRD na,
            PHON.ONSET con ] ].

hike_n1 := n_-_c_le &
 [ ORTH < "hike" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hike_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,   
            PHON.ONSET con ] ].

;; DPF 2019-05-15 - --BARE - prevents robust analysis of 
;; |green hill and blue water|, so drop, and see what goes wrong.
#|
hill_n1 := n_-_c_le &
 [ ORTH < "hill" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hill_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].
|#

hiss_v1 := v_np*_le &
 [ ORTH < "hiss" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hiss_v_1_rel",
	    LOCAL.CAT.HEAD.--NOCJCRD -,
            PHON.ONSET con ] ].

historian_n1 := n_-_c_le &
 [ ORTH < "historian" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_historian_n_1_rel",
            PHON.ONSET con ] ].

historical_isect := aj_-_i_le &
 [ ORTH < "historical" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_historical_a_1_rel",
            PHON.ONSET con ] ].

hit_v1 := v_np*_le &
 [ ORTH < "hit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hit_v_1_rel",
            LOCAL.CAT.HEAD [ --MAL3SG -,
			     TAM.SAME-PAST + ],
            PHON.ONSET con ] ].

hold_n1 := n_pp_c-of_le &
 [ ORTH < "hold" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hold_n_of_rel",
	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

hold_v1 := v_-_le &
 [ ORTH < "hold" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hold_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

hold_v1_tr := v_np_le &
 [ ORTH < "hold" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hold_v_1_rel",
            PHON.ONSET con ] ].

;; Give this word the same lexical type as noun "trip" to improve semantic
;; comparison with "vacation"
holiday_n1 := n_-_c_le &
 [ ORTH < "holiday" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_holiday_n_1_rel",
   	    LOCAL.CAT.HEAD.--BAREPP [ BP-FROM -,
				      BP-ON - ],
            PHON.ONSET con ] ].

holy_a1 := aj_-_i_le &
 [ ORTH < "holy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_holy_a_1_rel",
            LOCAL.CAT.HEAD.--SBRD -,
            PHON.ONSET con ] ].

home_adv := n_-_ad-pl-nomod_le &
 [ ORTH < "home" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED _home_p_rel,
                    KEYREL.PRED place_n_rel ],
   	    LOCAL.CAT.HEAD.--BARE -,   
            PHON.ONSET con ] ].

home_a1 := aj_-_i-att_le &
 [ ORTH < "home" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_home_a_1_rel",
	    LOCAL.CAT.HEAD.MOD.FIRST.LOCAL.CAT.HEAD.--COLLOC +,
            PHON.ONSET con ] ].

home_adv := n_-_ad-pl-nomod_le &
 [ ORTH < "home" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED _home_p_rel,
                    KEYREL.PRED place_n_rel ],
	    LOCAL.CAT.HEAD.--BAREDPP.BP-IN -,
            PHON.ONSET con ] ].

;; Prevent |home studying| as n-v adj compound
home_n1 := n_pp_c-ns-of_le &
 [ ORTH < "home" >,
   SYNSEM [ LOCAL.CAT.HEAD.--BARE -,
	    MODIFD.RPERIPH na_or_+,
	    LKEYS.KEYREL.PRED "_home_n_of-n_rel",
            PHON.ONSET con ] ].

homeward_adv := av_-_i-vp_le &
 [ ORTH < "homeward" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_homeward_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

homework_n1 := n_-_m_le &
 [ ORTH < "homework" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_homework_n_1_rel",
	    MODIFD.LPERIPH na_or_+,
            PHON.ONSET con ] ].

;; Block |thrilled fan hope to ...|
;; But this also blocks "new hope", so undo
#|
hope_n1 := n_pp_mc-of-ns-nochd_le &
 [ ORTH < "hope" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hope_n_of_rel",
            PHON.ONSET con ] ].
|#

hope_n1 := n_pp_mc-of-ns_le &
 [ ORTH < "hope" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hope_n_of_rel",
   	    LOCAL.CAT.VAL.SPR.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
            PHON.ONSET con ] ].

hope_v1 := v_-_le &
 [ ORTH < "hope" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hope_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

hope_v3 := v_cp_prop_le &
 [ ORTH < "hope" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hope_v_for_rel",
            PHON.ONSET con ] ].

hospital_n1 := n_-_c_le &
 [ ORTH < "hospital" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hospital_n_1_rel",
   	    LOCAL.CAT.HEAD.--BAREPP [ BP-IN -,
				      BP-TO - ],
            PHON.ONSET con ] ].

hour_n1 := n_-_c-hour_le &
 [ ORTH < "hour" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hour_n_1_rel",
            LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET voc ] ].

hourly_adv1 := av_-_i-vp-po_le &
 [ ORTH < "hourly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hourly_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET voc ] ].

house_n1 := n_pp_c-of_le &
 [ ORTH < "house" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_house_n_of_rel",
	    LOCAL.CAT.HEAD.--BAREPP.BP-IN -,
            PHON.ONSET con ] ].

house_v1 := v_np_le &
 [ ORTH < "house" >,
   SYNSEM [ LOCAL.CAT.HEAD.--MAL3SG -,
            LKEYS.KEYREL.PRED "_house_v_1_rel",
            PHON.ONSET con ] ].

;; DPF 2017-12-23 - Until we figure out the right analysis for "how tall he is!"
;; or |what big teeth you have!|, we'll overgenerate by treating "how" like "so"
;; But block frag-adj analysis of |how happy you are|
;;
#|
how_deg_nonwh := av_-_dg-cmp-so_le &
 [ ORTH < "how" >,
   SYNSEM [ LKEYS.KEYREL.PRED _so_x_comp_rel,
            LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CAT.HEAD.MINORS.NORM no_rel,
            PHON.ONSET con ] ].
|#

however_nounif_n1 := n_-_pn-nounif_le &
 [ ORTH < "However" >,
   SYNSEM [ LKEYS.KEYREL.CARG "However",
            PHON.ONSET con ] ].

human_a1 := aj_-_i_le &
 [ ORTH < "human" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_human_a_1_rel",
            PHON.ONSET con ] ].

human_n1 := n_-_c-nocnh_le &
 [ ORTH < "human" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_human_n_1_rel",
            PHON.ONSET con ] ].

hunger_v2 := v_-_le &
 [ ORTH < "hunger" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hunger_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

hunter_n1 := n_-_c_le &
 [ ORTH < "hunter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hunter_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,   
            PHON.ONSET con ] ].

hurt_v1 := v_-_le &
 [ ORTH < "hurt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hurt_v_1_rel",
	    LOCAL.CAT.HEAD [ --SAMENV +,
			     --HAVEBE -,
			     --MALCOPBSE -,
			     --MAL3SG - ],
            PHON.ONSET con ] ].

hurt_v1_tr := v_np_le &
 [ ORTH < "hurt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hurt_v_1_rel",
	    LOCAL.CAT.HEAD [ --MAL3SG -,
			     --MALCOPBSE -,
			     --HAVEBE - ],
            PHON.ONSET con ] ].

hush_v1 := v_-_le &
 [ ORTH < "hush" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hush_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

hush_v1_tr := v_np_le &
 [ ORTH < "hush" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hush_v_1_rel",
            PHON.ONSET con ] ].

hut_to_hut_adv1 := av_-_i-vp_le &
 [ ORTH < "hut", "to", "hut" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hut+to+hut_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

hut_to_hut_adv2 := av_-_i-vp_le &
 [ ORTH < "hut", "-", "to", "-", "hut" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hut+to+hut_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

hut_to_hut_adv3 := av_-_i-vp_le &
 [ ORTH < "hut-to-hut" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_hut+to+hut_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

i_guess_disc_3 := av_-_dc-like-po_le &
 [ ORTH < "I", "guess" >,
   ALTS.NONINITCAP -,
   SYNSEM [ LKEYS.KEYREL.CARG "I_guess",
            PHON.ONSET voc ] ].

i_think_disc := av_-_dc-like-po_le &
 [ ORTH < "I", "think" >,
   ALTS.NONINITCAP -,
   SYNSEM [ LKEYS.KEYREL.CARG "I_think",
            PHON.ONSET voc ] ].

ice_v2 := v_-_unacc_le &
 [ ORTH < "ice" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ice_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET voc ] ].

ice_cream_n1 := n_-_m_le &
 [ ORTH < "ice", "cream" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ice+cream_n_1_rel",
            PHON.ONSET voc ] ].

ice_cream_n2 := n_-_m_le &
 [ ORTH < "ice", "-", "cream" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ice+cream_n_1_rel",
            PHON.ONSET voc ] ].

idle_v1 := v_-_unacc_le &
 [ ORTH < "idle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_idle_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET voc ] ].

if_prep := p_np_s_le &
 [ ORTH < "if" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_if_x_then_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.--MIN basic_non_temp_nonpro_rel,
            PHON.ONSET voc ] ].

;; DPF 2020-01-07 - Block extraction of this PP via ACTIVATED -, to avoid
;; robust |If the choice [is you]|
if_prep_2 := p_np_i_le &
 [ ORTH < "if" >,
   SYNSEM [ LKEYS.KEYREL.PRED _if_x_rel,
	    LOCAL [ CAT.VAL.COMPS.FIRST.--MIN basic_non_temp_nonpro_rel,
	            CTXT.ACTIVATED - ],
            PHON.ONSET voc ] ].

if_subconj_unspec := p_cp_s-unsp_le &
 [ ORTH < "if" >,
   SYNSEM [ LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--MAL3SG -,
            LKEYS.KEYREL.PRED "_if_x_then_rel",
            PHON.ONSET voc ] ].

ill_a1 := aj_-_i-prd_le &
 [ ORTH < "ill" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ill_a_1_rel",
            PHON.ONSET voc ] ].

;; DPF 2020-06-18 - Make plural-only, so get robust |recover from his ill|.
ill_n1 := n_-_c-pl_le &
 [ ORTH < "ills" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ill_n_1_rel",
            PHON.ONSET voc ] ].

;; DPF 2020-06-18 - There is perhaps a class of these ill/illness pairs, 
;; using specific vs abstract noun, but not clear yet, so just itemize for now.
;; FIX?
;;
ill_n1_rbst := n_-_m-nocnh_le &
 [ ORTH < "ill" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ill_n_1_rel",
            PHON.ONSET voc ],
   GENRE robust ].


imagine_v1 := v_np*_le &
 [ ORTH < "imagine" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_imagine_v_1_rel",
	    LOCAL.CAT.HEAD.--NOCJCRD -,
            PHON.ONSET voc ] ].

imagine_v6 := v_np-prd_oeq_le &
 [ ORTH < "imagine" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_imagine_v_1_rel",
	    LOCAL.CAT.HEAD.--SBRDMOD -,
            PHON.ONSET voc ] ].

impact_v1 := v_-_le &
 [ ORTH < "impact" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_impact_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET voc ] ].

impact_v1_tr := v_np_le &
 [ ORTH < "impact" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_impact_v_1_rel",
            PHON.ONSET voc ] ].

imperative_a2 := aj_cp_i-it_le &
 [ ORTH < "imperative" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_imperative_a_to_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--MAL3SG -,
            PHON.ONSET voc ] ].

implant_n1 := n_-_c_le &
 [ ORTH < "implant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_implant_n_1_rel",
            PHON.ONSET voc ] ].

import_v1 := v_-_le &
 [ ORTH < "import" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_import_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET voc ] ].

import_v1_tr := v_np_le &
 [ ORTH < "import" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_import_v_1_rel",
            PHON.ONSET voc ] ].

;; |*of a great importance|
importance_n := n_-_m_le &
 [ ORTH < "importance" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_importance_n_1_rel",
            PHON.ONSET voc ] ].

important_a3 := aj_cp_i-it_le &
 [ ORTH < "important" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_important_a_for_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--MAL3SG -,
            PHON.ONSET voc ] ].

;; Block pp-frag for "in" |in the first place he ...|, until ranking improves.
;; FIX
;;
in := p_np_i-reg_le &
 [ ORTH < "in" >,
   SYNSEM [ LKEYS.KEYREL.PRED _in_p_loc_rel,
            LOCAL.CAT [ HEAD.--SBRDFRG -,
			VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--BAREDPP.BP-IN + ],
            PHON.ONSET voc ] ].

in_case_of := p_np_i_le &
 [ ORTH < "in", "case", "of" >,
   SYNSEM [ LKEYS.KEYREL.PRED _in+case+of_p_rel,
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--BAREDPP.BP-INCASEOF +,
            PHON.ONSET voc ] ].

in_depth_adv1 := av_-_i-vp-po_le &
 [ ORTH < "in", "-", "depth" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_in-depth_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET voc ] ].

in_kind_adv1 := av_-_i-vp_le &
 [ ORTH < "in", "kind" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_in+kind_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET voc ] ].

in_person_adv1 := av_-_i-vp-po_le &
 [ ORTH < "in", "person" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_in+person_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET voc ] ].

in_sum_adv1 := av_-_s-cp-pr_le &
 [ ORTH < "in", "sum" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_in+sum_a_1_rel",
            PHON.ONSET voc ] ].

incident_n1 := n_-_c_le &
 [ ORTH < "incident" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_incident_n_1_rel",
	    LOCAL.CAT.HEAD.--BAREPP.BP-WITHOUT -,
            PHON.ONSET voc ] ].

increase_v1 := v_-_unacc_le &
 [ ORTH < "increase" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_increase_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET voc ] ].

;; Warn passive is likely error: |the population has been increased|
;; But not generally true: "prices have been increased".  So comment out
#|
increase_v2 := v_np_ntr_le &
 [ ORTH < "increase" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_increase_v_cause_rel",
            PHON.ONSET voc ] ].
|#

independent_n1 := n_-_c-nocnh_le &
 [ ORTH < "independent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_independent_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET voc ] ].

;; 2020-04-06 - Block intransitive | number of patients infected|
infect_v1 := v_np_le &
 [ ORTH < "infect" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_infect_v_1_rel",
            PHON.ONSET voc ] ].

infer_v2 := v_np_le &
 [ ORTH < "infer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_infer_v_1_rel",
	    LOCAL.CAT.HEAD.--NOCJCRD -,
            PHON.ONSET voc ] ].

inform_v2 := v_np_le &
 [ ORTH < "inform" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_inform_v_1_rel",
	    LOCAL.CAT.HEAD.--CLRC -,
            PHON.ONSET voc ] ].

;; DPF 2019-12-20 - We want |Initially, after the ceremony, we arose.|, so can't
;; have type av_-_i-vp-po_le
;;
initially_adv2 := av_-_i-vp_le &
 [ ORTH < "initially" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_initial_a_1_rel",
            PHON.ONSET voc ] ].

inline_adv1 := av_-_i-vp_le &
 [ ORTH < "inline" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_in-line_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET voc ] ].

input_v1 := v_np_le &
 [ ORTH < "input" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_input_v_1_rel",
	    LOCAL.CAT.HEAD.TAM.SAME-PAST +,
            PHON.ONSET voc ] ].

input_v2 := v_np-pp_le &
 [ ORTH < "input" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _to_p_rel,
                    KEYREL.PRED "_input_v_1_rel" ],
	    LOCAL.CAT.HEAD.TAM.SAME-PAST +,
            PHON.ONSET voc ] ].

inside_n1 := n_pp_c-nocnh-nomod_le &
 [ ORTH < "inside" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_inside_n_of_rel",
            PHON.ONSET voc ] ].

instance_n1 := n_pp_c-of_le &
 [ ORTH < "instance" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_instance_n_of_rel",
   	    LOCAL.CAT.HEAD.--BAREPP.BP-FOR -,
            PHON.ONSET voc ] ].

instead_adv1 := pp_-_i-vm_le &
 [ ORTH < "instead" >,
   SYNSEM [ LKEYS.KEYREL.PRED _instead_p_rel,
	    LOCAL.CAT.HEAD prep_nonmob,
            PHON.ONSET voc ] ].

;; Block |instead for Kim| so we can trigger error 
instead_adv1 := pp_-_i_le &
 [ ORTH < "instead" >,
   SYNSEM [ LKEYS.KEYREL.PRED _instead_p_rel,
	    LOCAL.CAT.HEAD.MOD < [ LOCAL.CAT.HEAD non_noun ] >,
	    MODIFD lmod,
            PHON.ONSET voc ] ].

interchange_v2 := v_-_unacc_le &
 [ ORTH < "interchange" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_interchange_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET voc ] ].

interlock_v2 := v_-_unacc_le &
 [ ORTH < "interlock" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_interlock_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET voc ] ].

into := p_np_i_le &
 [ ORTH < "into" >,
   SYNSEM [ LKEYS.KEYREL.PRED _into_p_rel,
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--BAREDPP.BP-INTO +,
            PHON.ONSET voc ] ].

into_being_adv1 := av_-_i-vp-po_le &
 [ ORTH < "in", "being" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_into+being_a_1_rel",
            PHON.ONSET voc ] ].

introduction_n2 := n_vp_mc_le &
 [ ORTH < "introduction" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_introduction_n_to_rel",
            PHON.ONSET voc ] ].

invite_into_v1 := v_np-pp_e_le &
 [ ORTH < "invite" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _into_p_sel_rel,
                    KEYREL.PRED "_invite_v_to_rel" ],
            PHON.ONSET voc ] ].

iron_v1 := v_-_le &
 [ ORTH < "iron" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_iron_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET voc ] ].

iron_v1_tr := v_np_le &
 [ ORTH < "iron" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_iron_v_1_rel",
            PHON.ONSET voc ] ].

island_n1 := n_-_c_le &
 [ ORTH < "island" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_island_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,   
            PHON.ONSET voc ] ].

issue_v2 := v_np_le &
 [ ORTH < "issue" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_issue_v_1_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
            PHON.ONSET voc ] ].

itch_v1 := v_-_le &
 [ ORTH < "itch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_itch_v_1_rel",
            PHON.ONSET voc ] ].

jam_v2 := v_-_le &
 [ ORTH < "jam" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_jam_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

jam_v2_tr := v_np_le &
 [ ORTH < "jam" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_jam_v_1_rel",
            PHON.ONSET con ] ].

jellyfish_n1 := n_-_mc_le &
 [ ORTH < "jellyfish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_jellyfish_n_1_rel",
	    LOCAL.CAT cat_infl_nosuff &
   	              [ HEAD.--BARE - ],
            PHON.ONSET con ] ].

jerry_n2 := n_-_c_le &
 [ ORTH < "jerry" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_jerry_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,   
            PHON.ONSET con ] ].

jest_v1 := v_-_le &
 [ ORTH < "jest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_jest_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

;; Only allow in compounds such as |jigsaw puzzle|
jigsaw_n1 := n_-_c-cpd_le &
 [ ORTH < "jigsaw" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_jigsaw_n_1_rel",
            PHON.ONSET con ] ].

;; Block of-PP complement, to get non-robust "the job of manager"
job_n1 := n_-_c-ns_le &
 [ ORTH < "job" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_job_n_of_rel",
            PHON.ONSET con ] ].

jolly_a1 := aj_-_i_le &
 [ ORTH < "jolly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_jolly_a_1_rel",
            LOCAL.CAT.HEAD.--SBRD -,
            PHON.ONSET con ] ].

judge_v1 := v_np*_le &
 [ ORTH < "judge" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_judge_v_1_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
            PHON.ONSET con ] ].

just_a1 := aj_-_i-sbrd_le &
 [ ORTH < "just" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_just_a_1_rel",
            PHON.ONSET con ] ].

just_adv1 := av_-_i-vp-x_le &
 [ ORTH < "just" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_just_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

keep_n1 := n_-_c-sg_le &
 [ ORTH < "keep" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_keep_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,   
            PHON.ONSET con ] ].

keep-prd_v2 := v_np-prd_oeq_le &
 [ ORTH < "keep" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_keep_v_prd_rel",
	    LOCAL.CAT [ VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
	                HEAD.--SBRDMOD - ],
            PHON.ONSET con ] ].

;; Avoid robust |keeps me company|
keep_v1 := v_np_le &
 [ ORTH < "keep" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_keep_v_unspec_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
            PHON.ONSET con ] ].

keep-prd := v_prd_seq-va_le &
 [ ORTH < "keep" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_keep_v_prd_rel",
            PHON.ONSET con ] ].

kettle_n1 := n_-_c_le &
 [ ORTH < "kettle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_kettle_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,   
            PHON.ONSET con ] ].

kick_v1 := v_-_le &
 [ ORTH < "kick" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_kick_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

kick_v1_tr := v_np_le &
 [ ORTH < "kick" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_kick_v_1_rel",
            PHON.ONSET con ] ].

kid_n1 := n_-_c_le &
 [ ORTH < "kid" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_kid_n_1_rel",
	    LOCAL.CAT.HEAD.--MALPLCPD -,
            PHON.ONSET con ] ].

;; Avoid |all kinds of thing|
kind_n1 := n_pp_c-of-brn_le &
 [ ORTH < "kind" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_kind_n_of-n_rel",
            LOCAL [ AGR.DIV #div,
	            CAT.VAL.COMPS.FIRST.--SIND.DIV #div ],
            PHON.ONSET con ] ].

;; DPF 2019-08-26 - Removed --BARE -, since we want robust
;; |a various kinds of tea|
kind_n2 := n_pp_c-ns-of_le &
 [ ORTH < "kind" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_kind_n_of-n_rel",
            LOCAL.CAT [ HEAD.--OFMOD -,
			VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--BARE - ],
            PHON.ONSET con ] ].

kind_of_adv1 := av_-_i-vp_le &
 [ ORTH < "kind", "of" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_kind+of_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

kindly := av_-_i-vp_le &
 [ ORTH < "kindly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_kind_a_of_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

king_n1 := n_pp_c-of-msc_le &
 [ ORTH < "king" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_king_n_of_rel",
   	    LOCAL.CAT.HEAD.--BARE -,   
            PHON.ONSET con ] ].

king_n2 := n_-_pn_le &
 [ ORTH < "King" >,
   SYNSEM [ LKEYS.KEYREL.CARG "King",
            PHON.ONSET con ],
   TOKENS.+LAST.+CLASS.+CASE capitalized ].

knit_v1 := v_np*_le &
 [ ORTH < "knit" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_knit_v_1_rel",
	    LOCAL.CAT [ HEAD.TAM.SAME-PAST +,
			VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--POSSRBST - ],
            PHON.ONSET con ] ].

knit_v2 := v_np-np_only_le &
 [ ORTH < "knit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_knit_v_1_rel",
	    LOCAL.CAT.HEAD.TAM.SAME-PAST +,
            PHON.ONSET con ] ].

knowing_a1 := aj_-_i_le &
 [ ORTH < "knowing" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_knowing_a_1_rel",
            LOCAL.CAT.HEAD.--SBRD -,
            PHON.ONSET con ] ].

know_v2 := v_cp_prop_le &
 [ ORTH < "know" >,
   ALTS.INVQ -,
   SYNSEM [ LKEYS.KEYREL.PRED "_know_v_1_rel",
            PHON.ONSET con ] ].

;; DPF 2020-01-22 - While the following let us catch anomalous
;; |big knowledge|, it wrongly treats as robust |more knowledge| and
;; |better knowledge|.  So comment out.
;; DPF 2020-06-25 - We want "a limited knowledge of French", so constrain
;; count variant to oblig of-PP, and leave "big knowledge" as an
;; adj-noun collocation problem: should be "deep" instead of "big".

#|
knowledge_n1 := n_-_m-nomod_le &
 [ ORTH < "knowledge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_knowledge_n_1_rel",
            PHON.ONSET con ] ].
|#

knowledge_n1 := n_pp_m_le &
 [ ORTH < "knowledge" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_knowledge_n_of_rel" ],
	    LOCAL.CAT.HEAD.--MALCM -,
            PHON.ONSET con ] ].

knowledge_n2 := n_pp_c-of-obl_le &
 [ ORTH < "knowledge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_knowledge_n_1_rel",
            LOCAL [ CAT.HEAD.--BARE -,
	            AGR.PNG.PN 3s ],
            PHON.ONSET con ] ].

label_v1 := v_np_le &
 [ ORTH < "label" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_label_v_1_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
            PHON.ONSET con ] ].

labor_v1 := v_-_le &
 [ ORTH < "labor" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_labor_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

labor_v1_br := v_-_le &
 [ DIALECT br,
   ORTH < "labour" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_labor_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

lack_v1 := v_np_le &
 [ ORTH < "lack" >,
   ALTS.NGER -,
   SYNSEM [ LKEYS.KEYREL.PRED "_lack_v_1_rel",
            PHON.ONSET con ] ].

lake_fishing_v1 := v_-_prp_le &
 [ ORTH < "lake", "fishing" >,
   ALTS [ NGER -,
	  NONINITCAP - ],
   SYNSEM [ LKEYS.KEYREL.PRED "_lake+fish_v_1_rel",
            PHON.ONSET con ] ].

lake_n1 := n_-_c_le &
 [ ORTH < "lake" >,
   ALTS.NONINITCAP -,
   SYNSEM [ LKEYS.KEYREL.PRED "_lake_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,   
            PHON.ONSET con ] ].

lamb_v1 := v_-_le &
 [ ORTH < "lamb" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lamb_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

land_v1 := v_np_noger_le &
 [ ORTH < "land" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_land_v_cause_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
            PHON.ONSET con ] ].

land_v2 := v_-_unacc_le &
 [ ORTH < "land" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_land_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

landing_n1 := n_-_c_le &
 [ ORTH < "landing" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_landing_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,   
            PHON.ONSET con ] ].

landscape_n1 := n_-_c_le &
 [ ORTH < "landscape" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_landscape_n_1_rel",
            PHON.ONSET con ] ].

languish_v1 := v_-_unacc_le &
 [ ORTH < "languish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_languish_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

lapse_v1 := v_-_unacc_le &
 [ ORTH < "lapse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lapse_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

largely := av_-_i-vp-pr_le &
 [ ORTH < "largely" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_largely_a_1_rel",
            PHON.ONSET con ] ].

last_adv1 := av_-_i-vp-po-nmb_le &
 [ ORTH < "last" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_last_a_1_rel",
	    LOCAL.CAT [ HEAD.--ADVADJ -,
	                VAL.SPR.FIRST unexpressed_min ],
            PHON.ONSET con ] ].

last_adv2 := av_-_i-vp-pr_le &
 [ ORTH < "last" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_last_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

;; Exclude direct object, to avoid VP |last summer|.
last_v1 := v_-_le &
 [ ORTH < "last" >,
   SYNSEM [ LKEYS [ KEYREL.PRED "_last_v_1_rel",
   	            --COMPKEY temp_abstr_rel ],
            PHON.ONSET con ] ].

last_v2 := v_np-np_only_le &
 [ ORTH < "last" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_last_v_1_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.--SIND.SORT nontime-or-qevent,
            PHON.ONSET con ] ].

;; 2020-04-10 - Block S |the outbreak last December|
;; 2022-04-22 - Avoid robust "last week"
last_v1 := v_np*_le &
 [ ORTH < "last" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_last_v_1_rel",
	    LOCAL.CAT [ HEAD [ VFORM fin_or_non_fin,
			       --MAL3SG - ],
			VAL.COMPS.FIRST.--SIND.--BARESG - ],
            PHON.ONSET con ] ].

;; Avoid imperative for |last Thursday my family ...|
last_v2 := v_np-np_only_le &
 [ ORTH < "last" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_last_v_1_rel",
	    LOCAL.CAT [ HEAD.VFORM fin_or_non_fin,
			VAL.COMPS < [ --SIND.--BARESG - ],
				    [ --SIND.--BARESG - ] > ],
            PHON.ONSET con ] ].

later_adv2 := av_-_i-vp-pr_le &
 [ ORTH < "later" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_later_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

launch_v2 := v_-_unacc_le &
 [ ORTH < "launch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_launch_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

lay_v2 := v_np_le &
 [ ORTH < "lay" >,
   ALTS.NGER -,
   SYNSEM [ LKEYS.KEYREL.PRED "_lay_v_1_rel",
            PHON.ONSET con ] ].

leach_v1 := v_-_unacc_le &
 [ ORTH < "leach" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_leach_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

lead_v1 := v_-_le &
 [ ORTH < "lead" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lead_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

lead_v1_tr := v_np_le &
 [ ORTH < "lead" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lead_v_1_rel",
            PHON.ONSET con ] ].

leaf_n1 := n_-_mc-ed_le &
 [ ORTH < "leaf" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_leaf_n_1_rel",
            LOCAL [ AGR.PNG png-irreg,
		    CAT.VAL.SPR.FIRST.LOCAL.CAT.HEAD.--POSSRBST - ],
            PHON.ONSET con ] ].

league_n1 := n_pp_c-of_le &
 [ ORTH < "league" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_league_n_of_rel",
   	    LOCAL.CAT.HEAD.--BAREPP.BP-IN -,
            PHON.ONSET con ] ].

;; Block N-N for |in the park leap ...|
leap_n1 := n_-_c-nochd_le &
 [ ORTH < "leap" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_leap_n_1_rel",
            PHON.ONSET con ] ].

;; Better ranking
learn_v1 := v_np*_le &
 [ ORTH < "learn" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_learn_v_1_rel",
	    LOCAL.CAT [ VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--BARED -,
			HEAD.--NOCJCRD - ],
            PHON.ONSET con ] ].

least_adv1 := av_-_i-vp_le &
 [ ORTH < "least" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_least_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

leave_behind_v1 := v_p-np_le &
 [ ORTH < "leave" >,
   SYNSEM [ LKEYS [ --COMPKEY _behind_p_sel_rel,
                    KEYREL.PRED "_leave_v_behind_rel" ],
	    LOCAL.CAT.HEAD.--HAVEBE -,
            PHON.ONSET con ] ].

leave_in_v1 := v_p-np_le &
 [ ORTH < "leave" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_leave_v_in_rel" ],
	    LOCAL.CAT.HEAD.--HAVEBE -,
            PHON.ONSET con ] ].

leave_off_v1 := v_p-np_le &
 [ ORTH < "leave" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_leave_v_off_rel" ],
	    LOCAL.CAT.HEAD.--HAVEBE -,
            PHON.ONSET con ] ].

leave_on_v1 := v_p-np_le &
 [ ORTH < "leave" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_leave_v_on_rel" ],
	    LOCAL.CAT.HEAD.--HAVEBE -,
            PHON.ONSET con ] ].

leave_v1 := v_-_le &
 [ ORTH < "leave" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_leave_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

leave_v1_tr := v_np_le &
 [ ORTH < "leave" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_leave_v_1_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
            PHON.ONSET con ] ].

leave_v2 := v_np-prd_oeq_le &
 [ ORTH < "leave" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_leave_v_1_rel",
	    LOCAL.CAT.HEAD.--SBRDMOD -,
            PHON.ONSET con ] ].

#|
lecture_n1 := n_-_c_le &
 [ ORTH < "lecture" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lecture_n_1_rel",
            --MIN alt_idiom_nom_rel,
            PHON.ONSET con ] ].
|#

;; Avoid robust "he left"
left_n1 := n_pp_c-dir_le &
 [ ORTH < "left" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_left_n_1_rel",
   	    LOCAL.CAT.HEAD [ --BARE -,   
			     --POSSRBST - ],
            PHON.ONSET con ] ].

leisurely_a1 := aj_-_i_le &
 [ ORTH < "leisurely" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_leisurely_a_1_rel",
            LOCAL.CAT.HEAD.--SBRD -,
            PHON.ONSET con ] ].

;; Prescriptive: only with mass nouns; `fewer' with plural count.
lend_v2 := v_np_le &
 [ ORTH < "lend" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_lend_v_1_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
            PHON.ONSET con ] ].

length_n1 := n_pp_c-mod-of_le &
 [ ORTH < "length" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_length_n_of_rel",
	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

;; DPF 2016-06-25 - Prevent robust 'he' in |K smiles less than he|
less_than_p := p_np_i_le &
 [ ORTH < "less", "than" >,
   SYNSEM [ LKEYS.KEYREL.PRED _less+than_p_rel,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--MALCASE -,
            PHON.ONSET con ] ].

let_down_v1 := v_p-np_le &
 [ ORTH < "let" >,
   SYNSEM [ LOCAL.CAT.HEAD [ --MAL3SG -,
			       TAM.SAME-PAST + ],
	    LKEYS [ --COMPKEY _down_p_sel_rel,
                    KEYREL.PRED "_let_v_down_rel" ],
            PHON.ONSET con ] ].

let_go_of_v1 := v_p-pp_e_le &
 [ ORTH < "let" >,
   SYNSEM [ LOCAL.CAT.HEAD [ --MAL3SG -,
			       TAM.SAME-PAST + ],
	    LKEYS [ --COMPKEY _go_p_sel_rel,
                    --OCOMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_let_v_go-of_rel" ],
            PHON.ONSET con ] ].

let_go_v1 := v_p_le &
 [ ORTH < "let" >,
   SYNSEM [ LOCAL.CAT.HEAD [ --MAL3SG -,
			       TAM.SAME-PAST + ],
	    LKEYS [ --COMPKEY _go_p_sel_rel,
                    KEYREL.PRED "_let_v_go-of_rel" ],
            PHON.ONSET con ] ].

let_in_v1 := v_p-np_le &
 [ ORTH < "let" >,
   SYNSEM [ LOCAL.CAT.HEAD [ --MAL3SG -,
			       TAM.SAME-PAST + ],
	    LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_let_v_in_rel" ],
            PHON.ONSET con ] ].

let_off_v1 := v_p-np_le &
 [ ORTH < "let" >,
   SYNSEM [ LOCAL.CAT.HEAD [ --MAL3SG -,
			       TAM.SAME-PAST + ],
	    LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_let_v_off_rel" ],
            PHON.ONSET con ] ].

let_out_v1 := v_p_le &
 [ ORTH < "let" >,
   SYNSEM [ LOCAL.CAT.HEAD [ --MAL3SG -,
			       TAM.SAME-PAST + ],
	    LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_let_v_out_rel" ],
            PHON.ONSET con ] ].

let_out_v2 := v_p-np_le &
 [ ORTH < "let" >,
   SYNSEM [ LOCAL.CAT.HEAD [ --MAL3SG -,
			       TAM.SAME-PAST + ],
	    LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_let_v_out_rel" ],
            PHON.ONSET con ] ].

let_up_v1 := v_p_le &
 [ ORTH < "let" >,
   SYNSEM [ LOCAL.CAT.HEAD [ --MAL3SG -,
			       TAM.SAME-PAST + ],
	    LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_let_v_up_rel" ],
            PHON.ONSET con ] ].

let_up_v2 := v_p-pp_le &
 [ ORTH < "let" >,
   SYNSEM [ LOCAL.CAT.HEAD [ --MAL3SG -,
			       TAM.SAME-PAST + ],
	    LKEYS [ --COMPKEY _up_p_sel_rel,
                    --OCOMPKEY _on_p_rel,
                    KEYREL.PRED "_let_v_up_rel" ],
            PHON.ONSET con ] ].

let_v1 := v_np-vp_bse_le &
 [ ORTH < "let" >,
   SYNSEM [ LOCAL.CAT.HEAD [ --MAL3SG -,
			     TAM.SAME-PAST + ],
	    LKEYS.KEYREL.PRED "_let_v_1_rel",
            PHON.ONSET con ] ].

let_v2 := v_np_ntr_le &
 [ ORTH < "let" >,
   SYNSEM [ LOCAL.CAT.HEAD [ --MAL3SG -,
			       TAM.SAME-PAST + ],
	    LKEYS.KEYREL.PRED "_let_v_1_rel",
            PHON.ONSET con ] ].

;; Avoid this for |let's see it|
lets_see_disc_4_u := av_-_s-cp-mc-pr_le &
 [ ORTH < "let", "’s", "see" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lets+see_a_1_rel",
            LOCAL.CAT.HEAD.MOD.FIRST.LOCAL.CAT.HEAD verbal,
            PHON.ONSET con ] ].

level_n1 := n_-_c_le &
 [ ORTH < "level" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_level_n_1_rel",
   	    LOCAL.CAT.HEAD.--BAREPP [ BP-ABOVE -,
				      BP-AT -,   
				      BP-BELOW -,
				      BP-NEAR - ],
            PHON.ONSET con ] ].

;; Even though these two verbs do not have same form for present and past, the 
;; past tense form can be confused with base form "lay", so to avoid robust 
;; modal in |the books should lay on the table|, mark this as SAME-PAST +.
;;
lie_v1 := v_pp*-pp*_le &
 [ ORTH < "lie" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_rel,
                    --OCOMPKEY _about_p_rel,
                    KEYREL.PRED "_lie_v_1_rel" ],
	    LOCAL.CAT.HEAD.TAM.SAME-PAST +,
            PHON.ONSET con ] ].

;; 2020-04-11 - Exclude |lying [flat on his back he was frightened[|
lie_v2 := v_cp_prop_le &
 [ ORTH < "lie" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lie_v_1_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD comp,
            PHON.ONSET con ] ].

lie_v3 := v_pp*_dir_le &
 [ ORTH < "lie" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lie_v_2_rel",
	    LOCAL.CAT.HEAD.TAM.SAME-PAST +,
            PHON.ONSET con ] ].

light_a1 := aj_-_i-er_le &
 [ ORTH < "light" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_light_a_of_rel",
            LOCAL.CAT.HEAD.--IDIOMPART +,
            PHON.ONSET con ] ].

lift_v2 := v_-_unacc_le &
 [ ORTH < "lift" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lift_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

light_a2 := aj_pp_i-obl_le &
 [ ORTH < "light" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_light_a_of_rel" ],
            LOCAL.CAT.HEAD.--IDIOMPART +,
            PHON.ONSET con ] ].

light_v2 := v_-_unacc_le &
 [ ORTH < "light" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_light_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

;; Avoid for |don't like scary rides|
;; Also avoid "like she"
;; Avoid for "his iron-like muscles"
like_p := p_np_i_le &
 [ ORTH < "like" >,
   SYNSEM [ LKEYS.KEYREL.PRED _like_p_rel,
           LOCAL.CAT.HEAD.MOD.FIRST [ LOCAL.CAT.HEAD [ MINORS.ALTMIN 
							      non_ellipt_rel,
						       --MALCASE - ],
				      PUNCT.RPUNCT comma_or_no_punct ],
           PHON.ONSET con ] ].

like_p_2 := p_cp_s_le &
 [ ORTH < "like" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_like_x_preph_rel",
	    LOCAL.CAT.HEAD.MOD.FIRST.PUNCT.RPUNCT comma_or_clause_or_no_punct,
            PHON.ONSET con ] ].

like_prd_v1 := v_np-prd_oeq-ntr-x_le &
 [ ORTH < "like" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_like_v_1_rel",
            PHON.ONSET con ] ].

; Block |He liked his liked|
;; DPF 20-01-07 - Block imperative |..., like a cat.|
like_v1 := v_np_ntr_le &
 [ ORTH < "like" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_like_v_1_rel",
            --SIND.SF prop-or-ques,
            PHON.ONSET con ] ].

lily_n1 := n_-_c_le &
 [ ORTH < "lily" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lily_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,   
            PHON.ONSET con ] ].

line_n1 := n_-_c-ed_le &
 [ ORTH < "line" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_line_n_of_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

;; Redefine as male named character for The Lion and the Mouse
lion_n1 := n_-_c-msc_le &
 [ ORTH < "lion" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lion_n_1_rel",
            PHON.ONSET con ] ].

litter_v1 := v_-_le &
 [ ORTH < "litter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_litter_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

litter_v1_tr := v_np_le &
 [ ORTH < "litter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_litter_v_1_rel",
            PHON.ONSET con ] ].

little_adv1 := av_-_i-vp_le &
 [ ORTH < "little" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_little_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

litter_n1 := n_-_mc_le &
 [ ORTH < "litter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_litter_n_1_rel",
	    MODIFD.LPERIPH na_or_+,
            PHON.ONSET con ] ].

little_adv1 := av_-_i-vp-only_le &
 [ ORTH < "little" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_little_a_1_rel",
            LOCAL.CAT.HEAD [ MINORS.NORM norm_rel,
			     --ADVADJ - ],
            PHON.ONSET con ] ].

live_a1 := aj_-_i_le &
 [ ORTH < "live" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_live_a_1_rel",
	    LOCAL.CAT.HEAD.--TOODEGROB -,
            PHON.ONSET con ] ].

;; Exclude extracted complement: |where all the dead had lived|
;;
live_v1 := v_np_le &
 [ ORTH < "live" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_live_v_1_rel",
            LOCAL.CAT.VAL.COMPS.FIRST canonical_synsem,
            PHON.ONSET con ] ].

lively_a1 := aj_-_i_le &
 [ ORTH < "lively" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lively_a_1_rel",
            LOCAL.CAT.HEAD.--SBRD -,
            PHON.ONSET con ] ].

living_n1 := n_-_c_le &
 [ ORTH < "living" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_living_n_1_rel",
   	    LOCAL.CAT.HEAD [ --BARE -,   
			     --MALDIV - ],
            PHON.ONSET con ] ].

loan_v2 := v_np_le &
 [ ORTH < "loan" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_loan_v_1_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
            PHON.ONSET con ] ].

login_v1 := v_-_le &
 [ ORTH < "login" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_login_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

logon_v2 := v_-_le &
 [ ORTH < "logon" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_logon_v_to_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

lonely_a1 := aj_-_i_le &
 [ ORTH < "lonely" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lonely_a_1_rel",
            LOCAL.CAT.HEAD.--SBRD -,
            PHON.ONSET con ] ].

long_a1 := aj_-_i-er-sbrd_le &
 [ ORTH < "long" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_long_a_2_rel",
            PHON.ONSET con ] ].

long_a2 := aj_-_i-long_le &
 [ ORTH < "long" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_long_a_3_rel",
            LOCAL.CAT.HEAD.--SBRD -,
            PHON.ONSET con ] ].

long_adv := av_-_i-ap-pp_le &
 [ ORTH < "long" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_long_a_2_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

long_adv2 := av_-_i-vp-x_le &
 [ ORTH < "long" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_long_a_2_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

long_term_a1 := av_-_i-vp-po_le &
 [ ORTH < "long", "-", "term" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_long-term_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

long_term_a2 := av_-_i-vp-po_le &
 [ ORTH < "long", "term" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_long-term_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

long_time_a1 := aj_-_i-att_le &
 [ ORTH < "long", "-", "time" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_long+time_a_1_rel",
            PHON.ONSET con ] ].

longer_a1 := aj_pp_i-cmp_le &
 [ ORTH < "longer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_long_a_2_rel",
            LOCAL.CAT.HEAD.--SBRD -,
            PHON.ONSET con ] ].

look_pre_root := av_-_s-cp-mc-pr_le &
 [ ORTH < "look", "," >,
   SYNSEM [ LKEYS.KEYREL.PRED "_look_a_1_rel",
            PHON.ONSET con ] ].

look_n1 := n_pp_c_le &
 [ ORTH < "look" >,
   SYNSEM [ LKEYS [ --COMPKEY _at_p_sel_rel,
                    KEYREL.PRED "_look_n_at_rel" ],
   	    LOCAL.CAT.HEAD.--BARE -,   
            PHON.ONSET con ] ].

;; 2022-04-27 - In general, want to block robust "is/has looked on" for
;; any v_p_le which has a corresponding v_p-np_le.  FIX.
;;
look_on_v1 := v_p_le &
 [ ORTH < "look" >,
   SYNSEM [ LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_look_v_on_rel" ],
	    LOCAL.CAT.HEAD.--HAVEBE -,
            PHON.ONSET con ] ].

loot_v1 := v_-_le &
 [ ORTH < "loot" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_loot_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

loot_v1_tr := v_np_le &
 [ ORTH < "loot" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_loot_v_1_rel",
            PHON.ONSET con ] ].

;; Avoid for "a lots of cats"
lot_n := n_pp_c-gr-of_le &
 [ ORTH < "lot" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lot_n_of_rel",
	    LOCAL.CAT.HEAD.MINORS.NORM norm_rel,
            PHON.ONSET con ] ].

lot_n2 := n_-_c-gr_le &
 [ ORTH < "lot" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lot_n_1_rel",
   	    LOCAL.CAT.HEAD [ --BARE -,   
	                     MINORS [ ALTMIN def_or_udef_q_rel,
			              NORM norm_rel ] ],
            PHON.ONSET con ] ].

louder := aj_pp_i-cmp_le &
 [ ORTH < "louder" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_loud_a_1_rel",
            LOCAL.CAT.HEAD [ --SBRD -,
			     --MALSBRD - ],
            PHON.ONSET con ] ].

love_n2 := n_pp_mc_le &
 [ ORTH < "love" >,
   SYNSEM [ LOCAL.CAT.HEAD.MINORS.NORM norm_rel,
   	    LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_love_n_of-for_rel" ],
            PHON.ONSET con ] ].

love_v1 := v_-_le &
 [ ORTH < "love" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_love_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

love_v1_tr := v_np_le &
 [ ORTH < "love" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_love_v_1_rel",
            PHON.ONSET con ] ].

lovely_adj := aj_-_i_le &
 [ ORTH < "lovely" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lovely_a_1_rel",
            LOCAL.CAT.HEAD.--SBRD -,
            PHON.ONSET con ] ].

low := av_-_i-vp-po_le &
 [ ORTH < "low" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_low_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

m_lower_np1 := n_-_pn-nq_le &
 [ ORTH < "m" >,
   SYNSEM [ LKEYS.KEYREL.CARG "M",
            LOCAL.AGR.PNG.PN 3s,
            PHON.ONSET voc ] ].

lunch_v1 := v_-_le &
 [ ORTH < "lunch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lunch_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

lust_v1 := v_-_le &
 [ ORTH < "lust" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_lust_v_for_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

machine_n1 := n_-_c-transp_le &
 [ ORTH < "machine" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_machine_n_1_rel",
            PHON.ONSET con ] ].

madam_n1 := n_-_pn-maycap_le &
 [ ORTH < "Madam" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Madam",
            PHON.ONSET con ] ].

mail_v2 := v_np_le &
 [ ORTH < "mail" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_mail_v_1_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
            PHON.ONSET con ] ].

maintain_v1 := v_np*_le &
 [ ORTH < "maintain" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_maintain_v_1_rel",
	    LOCAL.CAT.HEAD.--NOCJCRD -,
            PHON.ONSET con ] ].

; Avoid for |Ursa Major|
major_n1 := n_-_c-nocnh_le &
 [ ORTH < "major" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_major_n_1_rel",
            PHON.ONSET con ],
   TOKENS.+LAST.+CLASS.+CASE non_capitalized ].

;; Also block premodif, to avoid "...listening makes .."
;; 2022-04-19 - Make the of-PP obligatory, to avoid robust "This makes clear..."
make_n1 := n_pp_c-nocnh-nomod_le &
 [ ORTH < "make" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_make_n_of_rel",
            LOCAL.CAT [ HEAD [ --BARE -,
			       --OFMOD -,
			       --POSSRBST - ],
			VAL.COMPS.FIRST [ LOCAL.CAT.HEAD.--BARE -,
					  OPT - ] ],
            PHON.ONSET con ] ].

;; DPF 2017-09-28 - Whatever the reason for making COMPS..LPERIPH bool, it
;; blocked |we made a cake|, where |cake| is marked LPERIPH na.  So undo the
;; constraint here, and check for possible FIX?
;; DPF 2020-09-09 - Removed ATTRJ -, since we want |the specially made cake|
;; DPF 2020-09-10 - Tried adding COMPS..--BARE -, but this blocks robust
;; "We can make difference."
;;
make_v1 := v_np_le &
 [ ORTH < "make" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_make_v_1_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST [ MODIFD.RPERIPH bool,
	    			        LOCAL.CAT.HEAD [ --MALPLCPD -,
							 --POSSRBST - ],
	    			        --SIND.SORT norm-entity-or-event ],
            PHON.ONSET con ] ].

;; Avoid robust "make [a learning] plan and finish homework"
make_v2 := v_np-vp_bse_le &
 [ ORTH < "make" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_make_v_cause_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--MALCM -,
            PHON.ONSET con ] ].

;; Better ranking
make_v3 := v_np-np_only_le &
 [ ORTH < "make" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_make_v_1_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--BARED -,
            PHON.ONSET con ] ].

malfunction_v1 := v_-_le &
 [ ORTH < "malfunction" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_malfunction_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

man_to_man_adv1 := av_-_i-vp_le &
 [ ORTH < "man", "to", "man" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_man+to+man_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

man_to_man_adv2 := av_-_i-vp_le &
 [ ORTH < "man", "-", "to", "-", "man" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_man+to+man_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

man_to_man_adv3 := av_-_i-vp_le &
 [ ORTH < "man-to-man" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_man+to+man_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].


manly_a1 := aj_-_i_le &
 [ ORTH < "manly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_manly_a_1_rel",
            LOCAL.CAT.HEAD.--SBRD -,
            PHON.ONSET con ] ].

;; Block as non-hd in N-N compounds
;;
man1 := n_-_c-msc_le &
 [ ORTH < "man" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_man_n_1_rel",
            LOCAL.CAT.HEAD.MINORS.NORM norm_rel,
            PHON.ONSET con ] ].

man_n2 := n_-_m-nocnh_le &
 [ ORTH < "man" >,
   ALTS.PLMASS -,
   SYNSEM [ LOCAL.CAT.HEAD [ CASE genitive,
			     --MALCM - ],
            LKEYS.KEYREL.PRED "_man_n_1_rel",
            PHON.ONSET con ] ].

manufacture_v1 := v_-_le &
 [ ORTH < "manufacture" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_manufacture_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

manufacture_v1_tr := v_np_le &
 [ ORTH < "manufacture" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_manufacture_v_1_rel",
            PHON.ONSET con ] ].

march_n1 := n_-_c_le &
 [ ORTH < "march" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_march_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,   
            PHON.ONSET con ] ].

;; DPF 2018-03-23 - Tempting to add --BARE - to prevent spurious robust 
;; analysis for e.g. |Mark or Jenny feeds the horses|. But we want to catch
;; robust |they got good mark in those subjects|.  So instead constrain the
;; singular to lower case, and add the plural separately.
;;
mark_n2 := n_pp_c-of_le &
 [ ORTH < "mark" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mark_n_of_rel",
            PHON.ONSET con ],
   TOKENS.+LAST.+CLASS.+CASE non_capitalized ].

market_n1 := n_-_c_le &
 [ ORTH < "market" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_market_n_1_rel",
   	    LOCAL.CAT.HEAD.--BAREPP.BP-TO -,
            PHON.ONSET con ] ].

marry_v1 := v_np*_ntr_le &
 [ ORTH < "marry" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_marry_v_1_rel",
            PHON.ONSET con ] ].

max_n2 := n_-_c_le &
 [ ORTH < "max" >,
   ALTS.NONINITCAP -,
   SYNSEM [ LKEYS.KEYREL.PRED "_maximum_n_1_rel",
            PHON.ONSET con ] ].

mass_v2 := v_-_unacc_le &
 [ ORTH < "mass" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mass_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

;; Avoid spurious imperative |the basketball match with ...|
match_v3 := v_pp_e_le &
 [ ORTH < "match" >,
   SYNSEM [ LKEYS [ --COMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_match_v_with_rel" ],
            LOCAL.CAT.HEAD [ TAM.MOOD ind_or_modal_subj,
			     --HAVEBE - ],
            PHON.ONSET con ] ].

matter_v1 := v_-_unacc_le &
 [ ORTH < "matter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_matter_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

may_n2 := n_-_pn_le &
 [ ORTH < "May" >,
   SYNSEM [ LKEYS.KEYREL.CARG "May",
            PHON.ONSET con ],
   TOKENS.+LAST.+CLASS.+CASE capitalized ].

me := n_-_pr-me_le &
 [ ORTH < "me" >,
   SYNSEM [ LOCAL.CAT.HEAD.MINORS.NORM norm_rel,
	    PHON.ONSET con ] ].

;; Blocking passive prevents "What is meant by that?", so remove
#|
mean_v1 := v_np_ntr_le &
 [ ORTH < "mean" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mean_v_1_rel",
            PHON.ONSET con ] ].
|#

meaningless_a1 := aj_-_i_le &
 [ ORTH < "meaningless" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_meaningless_a_1_rel",
	    LOCAL.CAT.VAL.SPR.FIRST unexpressed,
            PHON.ONSET con ] ].

;; 2020-09-30 - Need singular for "Dancing was the only means by which ..."
#|
means_n1 := n_-_c-pl_le &
 [ ORTH < "means" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_means_n_1_rel",
	    LOCAL.CAT.HEAD.--BARE na_or_+,
            PHON.ONSET con ] ].
|#

measure_v1 := v_-_le &
 [ ORTH < "measure" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_measure_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

measure_v1_tr := v_np_le &
 [ ORTH < "measure" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_measure_v_1_rel",
            PHON.ONSET con ] ].

meat_n1 := n_-_mc_le &
 [ ORTH < "meat" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_meat_n_1_rel",
	    MODIFD.LPERIPH na_or_+,
            PHON.ONSET con ] ].

meeting_n1 := n_-_c_le &
 [ ORTH < "meeting" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_meeting_n_of_rel",
   	    LOCAL.CAT.HEAD.--BARE -,   
            PHON.ONSET con ] ].

melancholy_a1 := aj_-_i_le &
 [ ORTH < "melancholy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_melancholy_a_1_rel",
            LOCAL.CAT.HEAD.--SBRD -,
            PHON.ONSET con ] ].

memorable_a1 := aj_-_i_le &
 [ ORTH < "memorable" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_memorable_a_1_rel",
	    LOCAL.CAT.HEAD [ --SBRD -,
			     --MALSBRD - ],
            PHON.ONSET con ] ].

mesh_v2 := v_-_unacc_le &
 [ ORTH < "mesh" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mesh_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

metamorphose_v1 := v_-_unacc_le &
 [ ORTH < "metamorphose" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_metamorphose_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

metro_n1 := n_-_c-transp_le &
 [ ORTH < "metro" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_metro_n_1_rel",
            PHON.ONSET con ] ].

;; Allow "the Mid-Autumn Festival"
mid_isect := aj_-_i-maycap_le &
 [ ORTH < "mid" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mid_a_1_rel",
	    LOCAL.CAT.POSTHD -,
            PHON.ONSET con ] ].

midnight_n1 := n_-_c_le &
 [ ORTH < "midnight" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_midnight_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

milk_v1 := v_-_le &
 [ ORTH < "milk" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_milk_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

milk_v1_tr := v_np_le &
 [ ORTH < "milk" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_milk_v_1_rel",
            PHON.ONSET con ] ].

mince_v1 := v_-_le &
 [ ORTH < "mince" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mince_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

mince_v1_tr := v_np_le &
 [ ORTH < "mince" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mince_v_1_rel",
            PHON.ONSET con ] ].

mind_v1 := v_-_le &
 [ ORTH < "mind" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mind_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

mind_v1_tr := v_np_le &
 [ ORTH < "mind" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mind_v_1_rel",
            PHON.ONSET con ] ].

mine_n1 := n_pp_c-of_le &
 [ ORTH < "mine" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mine_n_of_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

mint_v1 := v_-_le &
 [ ORTH < "mint" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mint_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

mint_v1_tr := v_np_le &
 [ ORTH < "mint" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mint_v_1_rel",
            PHON.ONSET con ] ].

mist_v2 := v_-_unacc_le &
 [ ORTH < "mist" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mist_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

mock_v1 := v_np_le &
 [ ORTH < "mock" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mock_v_1_rel",
	    LOCAL.CAT.HEAD.--NOCJCRD -,
            PHON.ONSET con ] ].

model_n2 := n_pp_c-of_le &
 [ ORTH < "model" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_model_n_of_rel",
            LOCAL.CAT [ HEAD.--OFMOD -,
			VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--BARE - ],
            PHON.ONSET con ] ].

mold_v2 := v_-_unacc_le &
 [ ORTH < "mold" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mold_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

mold_v2_br := v_-_unacc_le &
 [ DIALECT br,
   ORTH < "mould" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mold_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

mom_n1 := n_-_pn_le &
 [ ORTH < "Mom" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Mom",
            PHON.ONSET con ],
   TOKENS.+LAST.+CLASS.+CASE capitalized ].

mom_n2 := n_-_c-fem_le &
 [ ORTH < "mom" >,
   SYNSEM [ LOCAL.CAT.HEAD.MINORS.NORM norm_rel,
   	    LKEYS.KEYREL.PRED "_mom_n_1_rel",
            PHON.ONSET con ],
   TOKENS.+LAST.+CLASS.+CASE non_capitalized ].

money_n1 := n_-_m_le &
 [ ORTH < "money" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_money_n_1_rel",
            PHON.ONSET con ] ].

monitor_n1 := n_-_c_le &
 [ ORTH < "monitor" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_monitor_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,   
            PHON.ONSET con ] ].

month_to_month_adv1 := av_-_i-vp-po_le &
 [ ORTH < "month", "to", "month" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_month+to+month_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

month_to_month_adv2 := av_-_i-vp-po_le &
 [ ORTH < "month", "-", "to", "-", "month" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_month+to+month_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

month_to_month_adv3 := av_-_i-vp-po_le &
 [ ORTH < "month-to-month" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_month+to+month_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

monthly_adv1 := av_-_i-vp-po_le &
 [ ORTH < "monthly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_monthly_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

;; DPF 2016-06-25 - Prevent robust 'he' in |K smiles more than he|
more_than_p := p_np_i_le &
 [ ORTH < "more", "than" >,
   SYNSEM [ LKEYS.KEYREL.PRED _more+than_p_rel,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--MALCASE -,
            PHON.ONSET con ] ].

more_than_p3 := p_np-pp_i-more-than_le &
 [ ORTH < "more" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _than_p_compar_rel,
                    KEYREL.PRED _more+than_p_rel ],
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD [ --MALCASE -,
						       --MALAGR - ],
            PHON.ONSET con ] ].


;; Ensure robust |Chinese most important city|
;;
most_deg := av_-_dg-sup_le &
 [ ORTH < "most" >,
   SYNSEM [ LKEYS.KEYREL.PRED superl_rel,
	    MODIFD.LPERIPH na,
            PHON.ONSET con ] ].

;; Block "only most bikes"
;;
most_det := d_-_prt-plm_le &
 [ ORTH < "most" >,
   SYNSEM [ LKEYS.KEYREL.PRED _most_q_rel,
            LOCAL.CAT.VAL.SPR.FIRST anti_synsem_min,
            PHON.ONSET con ] ].

most_adv1 := av_-_i-vp-po_le &
 [ ORTH < "most" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_most_a_1_rel",
	    LOCAL.CAT [ HEAD.--ADVADJ -,
	                VAL.SPR.FIRST unexpressed_min ],
            PHON.ONSET con ] ].

most_adv2 := av_-_i-vp-only-pr_le &
 [ ORTH < "most" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_most_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

most_of_all_adv1 := av_-_i-vp-po_le &
 [ ORTH < "most", "of", "all" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_most+of+all_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

;; NORM norm_rel blocks |mother bear|, so remove, and remind ourselves what
;; it was there for.
;; DPF 2018-11-12 - Removed --BARE - since we want robust (lowercase)
;; |We talked to mother|
;;
mother_n1 := n_pp_c-of-fem_le &
 [ ORTH < "mother" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mother_n_of_rel",
            PHON.ONSET con ],
   TOKENS.+LAST.+CLASS.+CASE non_capitalized ].

motion_v3 := v_-_le &
 [ ORTH < "motion" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_motion_v_for_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

motionless_a1 := aj_-_i-sbrd_le &
 [ ORTH < "motionless" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_motionless_a_1_rel",
            PHON.ONSET con ] ].

motorboat_n1 := n_-_c-transp_le &
 [ ORTH < "motorboat" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_motorboat_n_1_rel",
            PHON.ONSET con ] ].

;; Redefine as female character for The Lion and the Mouse
mouse_n1 := n_-_c-fem_le &
 [ ORTH < "mouse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mouse_n_1_rel",
            PHON.ONSET con ] ].

mouth_v1 := v_np_le &
 [ ORTH < "mouth" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mouth_v_1_rel",
            LOCAL.CAT.VAL.COMPS.FIRST canonical_synsem,
            PHON.ONSET con ] ].

mulch_v1 := v_-_le &
 [ ORTH < "mulch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mulch_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

mulch_v1_tr := v_np_le &
 [ ORTH < "mulch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mulch_v_1_rel",
            PHON.ONSET con ] ].

murder_v1 := v_-_le &
 [ ORTH < "murder" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_murder_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

murder_v1_tr := v_np_le &
 [ ORTH < "murder" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_murder_v_1_rel",
            PHON.ONSET con ] ].

must_n1 := n_-_c-nocpd_le &
 [ ORTH < "must" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_must_n_1_rel",
            LOCAL.CAT.VAL.SPR.FIRST.--MIN _a_q_rel,
            PHON.ONSET con ] ].

muster_v1 := v_-_le &
 [ ORTH < "muster" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_muster_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

muster_v1_tr := v_np_le &
 [ ORTH < "muster" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_muster_v_1_rel",
            PHON.ONSET con ] ].

mutiny_v1 := v_-_le &
 [ ORTH < "mutiny" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_mutiny_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

name_v1 := v_np_le &
 [ ORTH < "name" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_name_v_1_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
            PHON.ONSET con ] ].

natural_a3 := aj_cp_i-it_le &
 [ ORTH < "natural" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_natural_a_to-for_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--MAL3SG -,
            PHON.ONSET con ] ].

navy_a1 := aj_-_i-color_le &
 [ ORTH < "navy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_navy_a_1_rel",
            PHON.ONSET con ],
   TOKENS.+LAST.+CLASS.+CASE non_capitalized ].

near := p_np_i_le &
 [ ORTH < "near" >,
   SYNSEM [ LKEYS.KEYREL.PRED _near_p_rel,
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--BAREDPP.BP-NEAR +,
            PHON.ONSET con ] ].

necessary_a3 := aj_cp_i-it_le &
 [ ORTH < "necessary" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_necessary_a_for_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--MAL3SG -,
            PHON.ONSET con ] ].

;; DPF 2020-06-18 - Removed ill-conceived ALTMIN impl_or_the_q_rel from these
;; three, since it blocked |no need (for us) to leave|.  Perhaps will recall
;; motive for adding it, and FIX?
#|
need_n1 := n_pp_mc-of_le &
 [ ORTH < "need" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_need_n_of_rel",
   	    LOCAL.CAT.HEAD.MINORS.ALTMIN impl_or_the_q_rel,
            PHON.ONSET con ] ].

need_n2 := n_cp_c-inf_le &
 [ ORTH < "need" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_need_n_of_rel",
   	    LOCAL.CAT.HEAD.MINORS.ALTMIN impl_or_the_q_rel,
            PHON.ONSET con ] ].

need_n3 := n_vp_c_le &
 [ ORTH < "need" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_need_n_of_rel",
   	    LOCAL.CAT.HEAD.MINORS.ALTMIN impl_or_the_q_rel,
            PHON.ONSET con ] ].
|#

;; Block nonhead in compound
need_n1 := n_pp_mc-of-ns_le &
 [ ORTH < "need" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_need_n_of_rel",
	    LOCAL.CAT.HEAD.--CPDNHD -,
            PHON.ONSET con ] ].

need-prd := v_np-prd_oeq-ntr-x_le &
 [ ORTH < "need" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_need_v_pred_rel",
            PHON.ONSET con ] ].

negative_n1 := n_-_c-nocnh_le &
 [ ORTH < "negative" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_negative_n_1_rel",
	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

neither_adv1 := av_-_i-vp-x_le &
 [ ORTH < "neither" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_neither_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

net_v2 := v_np_le &
 [ ORTH < "net" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_net_v_1_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
            PHON.ONSET con ] ].

next_adv1 := av_-_i-vp_le &
 [ ORTH < "next" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_next_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

New_Year_n1 := n_-_m-hldy_le &
 [ ORTH < "New", "Year" >,
   SYNSEM [ LKEYS.KEYREL.CARG "New+Year",
            LOCAL.CAT.HEAD.CASE obliq,
            MODIFD notmod,
            PHON.ONSET con ] ].

;; Block robust "Chinese" ("China's) for "Chinese New Year's Eve"
new_years_eve_n3 := n_-_m-hldy_le &
 [ ORTH < "New", "Year", "’s", "Eve" >,
   SYNSEM [ LKEYS.KEYREL.CARG "New_Years_Eve",
            MODIFD.LPERIPH bool,
            PHON.ONSET con ] ].

nice_a2 := aj_pp-vp_i-it_le &
 [ ORTH < "nice" >,
   ALTS.MALJVPIT -,
   SYNSEM [ LKEYS.KEYREL.PRED "_nice_a_of-for_rel",
            PHON.ONSET con ] ].

nickname_v1 := v_np_le &
 [ ORTH < "nickname" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_nickname_v_1_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
            PHON.ONSET con ] ].

night_sg_def := n_-_c-dpt-df-sg_le &
 [ ORTH < "night" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_night_n_of_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

night_nc_n1 := n_-_c-dpt_le &
 [ ORTH < "night" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_night_n_of_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

ninefold_adv1 := av_-_i-vp-po_le &
 [ ORTH < "ninefold" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ninefold_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

no_less_adv1 := av_-_i-vp-po_le &
 [ ORTH < "no", "less" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_no+less_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

no_matter_what_adv1 := av_-_i-vp-po-nmb_le &
 [ ORTH < "no", "matter", "what" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_no+matter+what_a_1_rel",
            PHON.ONSET con ] ].

no_matter_what_adv2 := av_-_s-cp-pr_le &
 [ ORTH < "no", "matter", "what" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_no+matter+what_a_1_rel",
	    LOCAL.CAT.HEAD.MOD.FIRST.LOCAL.CONT.HOOK.XARG.--BARESG -,
            PHON.ONSET con ] ].

no_more_adv1 := av_-_i-vp-po_le &
 [ ORTH < "no", "more" >,
   SYNSEM [ LKEYS.KEYREL.PRED _nomore_a_1_rel,
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

no_longer_adv2 := av_-_i-vp-po_le &
 [ ORTH < "no", "longer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_no+longer_a_1_rel",
            PHON.ONSET con,
	    LOCAL.CAT.NEGPOL na ] ].

nod_v1 := v_np*_le &
 [ ORTH < "nod" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_nod_v_1_rel",
	    LOCAL.CAT.HEAD.--NOCJCRD -,
            PHON.ONSET con ] ].

noon_nc_n1 := n_-_c-dpt_le &
 [ ORTH < "noon" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_noon_n_1_rel",
            LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

nor_conj := c_xp_nor_le &
 [ ORTH < "nor" >,
   SYNSEM [ LOCAL.CAT.NEGPOL +,
            PHON.ONSET con ] ].

;; Restrict to lower case in order To get proper name for 
;; |The Cyclops said that Nobody hurt his eye|
nobody := n_-_pr_le &
 [ ORTH < "nobody" >,
   SYNSEM [ LKEYS [ ALTKEYREL.PRED _no_q_rel,
                    KEYREL.PRED person_rel ],
            PHON.ONSET con,
	    LOCAL.CAT.NEGPOL + ],
   TOKENS.+LIST.FIRST.+CLASS.+CASE non_capitalized+lower ].

note_n3 := n_-_m_le &
 [ ORTH < "note" >,
   ALTS.PLMASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_note_n_signif_rel",
   	    LOCAL.CAT.HEAD.--BARE -,	    
            PHON.ONSET con ] ].

note_v1 := v_-_le &
 [ ORTH < "note" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_note_v_to_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

note_v1_tr := v_np_le &
 [ ORTH < "note" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_note_v_to_rel",
            PHON.ONSET con ] ].

nothing := n_-_pr_le &
 [ ORTH < "nothing" >,
   SYNSEM [ LKEYS [ ALTKEYREL.PRED _no_q_rel,
                    KEYREL.PRED thing_rel ],
            PHON.ONSET con,
	    LOCAL.CAT.NEGPOL + ] ].

notice_v1 := v_-_le &
 [ ORTH < "notice" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_notice_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

notice_v1_tr := v_np_le &
 [ ORTH < "notice" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_notice_v_1_rel",
            PHON.ONSET con ] ].

notice_v2 := v_pp*-cp_le &
 [ ORTH < "notice" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_notice_v_1_rel" ],
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--MAL3SG -,
            PHON.ONSET con ] ].

notify_v1 := v_np_le &
 [ ORTH < "notify" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_notify_v_of_rel",
	    LOCAL.CAT.HEAD.--CLRC -,
            PHON.ONSET con ] ].

nowhere_n1 := n_-_pr-ad_le &
 [ ORTH < "nowhere" >,
   SYNSEM [ LKEYS [ ALTKEYREL.PRED _no_q_rel,
                    KEYREL.PRED place_n_rel ],
            PHON.ONSET con,
	    LOCAL.CAT.NEGPOL + ] ].

;; 2021-06-15 - We want "the number was 60 students" so remove SPR constraint.
#|
number_n1 := n_-_c-gr_le &
 [ ORTH < "number" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_number_n_of_rel",
            LOCAL.CAT [ VAL.SPR.FIRST.--MIN indef_or_udef_rel,
	                HEAD.--MALAGR na ],
            PHON.ONSET con ] ].
|#
number_n1 := n_-_c-gr_le &
 [ ORTH < "number" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_number_n_of_rel",
            LOCAL.CAT.HEAD.--MALAGR na,
            PHON.ONSET con ] ].

;; Block unwanted robust NP-WH-cp for |a number of [whom arrived]|
;; Also restrict to indef, since for definite, want singular agrement
number_n2 := n_pp_c-gr-of_le &
 [ ORTH < "number" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_number_n_of_rel",
	    LOCAL.CAT.VAL [ COMPS.FIRST.LOCAL.CONT.HOOK.INDEX.SORT entity,
	    		    SPR.FIRST.--MIN indef_or_udef_rel ],
            PHON.ONSET con ] ].

number_n4 := n_-_c_le &
 [ ORTH < "number" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_number_n_of_rel",
            LOCAL.CAT [ VAL.SPR.FIRST.--MIN def_q_rel,
	                HEAD.--MALAGR na ],
            PHON.ONSET con ] ].

number_v1 := v_-_le &
 [ ORTH < "number" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_number_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

number_v1_tr := v_np_le &
 [ ORTH < "number" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_number_v_1_rel",
            PHON.ONSET con ] ].

oath_n1 := n_pp_c-of_le &
 [ ORTH < "oath" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_oath_n_of_rel",
   	    LOCAL.CAT.HEAD.--BAREPP.BP-UNDER -,
            PHON.ONSET voc ] ].

obligatory_a3 := aj_cp_i-it_le &
 [ ORTH < "obligatory" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_obligatory_a_for_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--MAL3SG -,
            PHON.ONSET con ] ].

observe_v2 := v_pp*-cp_le &
 [ ORTH < "observe" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_observe_v_to_rel" ],
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--MAL3SG -,
            PHON.ONSET voc ] ].

;; DPF 2020-11-24 - Make nonsort to get "Harvest time is a joyful occasion"
occasion_n1 := n_pp_c-ns-of_le &
 [ ORTH < "occasion" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_occasion_n_of_rel",
   	    LOCAL.CAT.HEAD.--BAREPP.BP-ON -,
            PHON.ONSET voc ] ].

;; Constrain comp to be LEX - to force robust "bored of it"
of_extraposed := p_np_i-nnm-nprd_le &
 [ ORTH < "of" >,
   SYNSEM [ LKEYS.KEYREL.PRED _of_p_rel,
	    LOCAL.CAT.VAL.COMPS.FIRST [ --SIND.--BARESG -,
					LEX - ],
            PHON.ONSET voc ] ].

of_poss := p_np_i-nm-poss_le &
 [ ORTH < "of" >,
   SYNSEM [ LKEYS.KEYREL.PRED _of_p_rel,
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--BAREDPP.BP-OF +,
            PHON.ONSET voc ] ].

of_subconj := p_np_s_le &
 [ ORTH < "of" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_of_x_subord_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--BAREDPP.BP-OF +,
            PHON.ONSET voc ] ].

off := p_np_i_le &
 [ ORTH < "off" >,
   SYNSEM [ LKEYS.KEYREL.PRED _off_p_rel,
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--BAREDPP.BP-OFF +,
            PHON.ONSET voc ] ].

off_route_adv := av_-_i-vp-po_le &
 [ ORTH < "off", "-", "route" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_off+route_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET voc ] ].

off_season_adv1 := n_-_ad-time_le &
 [ ORTH < "off", "season" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED _off+season_a_1_rel,
                    KEYREL.PRED time_n_rel ],
            PHON.ONSET voc ] ].

offer_n1 := n_-_c_le &
 [ ORTH < "offer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_offer_n_1_rel",
   	    LOCAL.CAT.HEAD.--BAREPP.BP-ON -,
            PHON.ONSET voc ] ].

offer_v3 := v_np_le &
 [ ORTH < "offer" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_offer_v_1_rel",
	    LOCAL.CAT [ VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
			HEAD.--NOCJCRD - ],
            PHON.ONSET voc ] ].

office1 := n_pp_c_le &
 [ ORTH < "office" >,
   SYNSEM [ LKEYS [ --COMPKEY of_p_sel_rel,
                    KEYREL.PRED "_office_n_of_rel" ],
   	    LOCAL.CAT.HEAD.--BAREPP [ BP-FROM -,
				      BP-IN -,
				      BP-INTO -,
				      BP-OUTOF - ],
            PHON.ONSET voc ] ].

offset_v1 := v_np_le &
 [ ORTH < "offset" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_offset_v_1_rel",
	    LOCAL.CAT.HEAD.TAM.SAME-PAST +,
            PHON.ONSET voc ] ].

offhand_adv1 := av_-_i-vp_le &
 [ ORTH < "offhand" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_offhand_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET voc ] ].

offhand_adv2 := av_-_i-vp_le &
 [ ORTH < "off", "-", "hand" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_offhand_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET voc ] ].

oily_a1 := aj_-_i_le &
 [ ORTH < "oily" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_oily_a_1_rel",
            LOCAL.CAT.HEAD.--SBRD -,
            PHON.ONSET voc ] ].

okay_adv := av_-_i-vp-po-nmb_le &
 [ ORTH < "okay" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_okay_a_1_rel",
	    LOCAL.CAT [ HEAD.--ADVADJ -,
	                VAL.SPR.FIRST unexpressed_min ],
            PHON.ONSET voc ] ].

;; 2021-04-16 - Sg-only to block non-robust "the olds".  Added "year olds" noun
;; to still get "five year olds".
;;
old_n1 := n_-_c-sg-nocnh_le &
 [ ORTH < "old" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_old_n_1_rel",
            PHON.ONSET voc ] ].

olympic_a1 := aj_-_i_le &
 [ ORTH < "olympic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_olympic_a_1_rel",
            PHON.ONSET voc ],
  TOKENS.+LIST.FIRST.+CLASS.+CASE non_capitalized+lower ].

;; 2021-04-16 - Added --COLLOC - to block non-robust "on the following"
on := p_np_i-reg_le &
 [ ORTH < "on" >,
   SYNSEM [ LKEYS.KEYREL.PRED _on_p_loc_rel,
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD [ --BAREDPP.BP-ON +,
						       --COLLOC - ],
            PHON.ONSET voc ] ].

;; Block extraction
on_adv := pp_-_i-nmb_le &
 [ ORTH < "on" >,
   SYNSEM [ LKEYS.KEYREL.PRED _on_p_loc_rel,
            PHON.ONSET voc ] ].

;; 2020-11-30 - Restrict --COMPKEY to day_rel so we can catch robust "on 2pm".
;;
on_day := p_np_i-tmp_le &
 [ ORTH < "on" >,
   SYNSEM [ LKEYS [ --COMPKEY day_rel,
                    KEYREL.PRED _on_p_temp_rel ],
            PHON.ONSET voc ] ].

on_campus_a1 := aj_-_i_le &
 [ ORTH < "on", "-", "campus" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_on-campus_a_1_rel",
            LOCAL.CAT.HEAD.--MALSBRD -,
            PHON.ONSET voc ] ].

on_campus_a2 := aj_-_i_le &
 [ ORTH < "on", "campus" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_on-campus_a_1_rel",
            LOCAL.CAT.HEAD.--MALSBRD -,
            PHON.ONSET voc ] ].

on_chip_adv1 := av_-_i-vp-po_le &
 [ ORTH < "on", "-", "chip" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_on-chip_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET voc ] ].

on_chip_adv2 := av_-_i-vp-po_le &
 [ ORTH < "on", "chip" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_on-chip_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET voc ] ].

;; Block "once in"
once_p1 := p_prd_i_le &
 [ ORTH < "once" >,
   SYNSEM [ LOCAL.CAT.VAL.COMPS.FIRST phr_synsem,
	    LKEYS.KEYREL.PRED _once_p_rel,
            PHON.ONSET voc ] ].

;; Change these three to just be PPs
online_nom1 := pp_-_i_le &
 [ ORTH < "online" >,
   SYNSEM [ LKEYS.KEYREL.PRED _online_p_rel,
            PHON.ONSET voc ] ].

online_nom2 := pp_-_i_le &
 [ ORTH < "on", "line" >,
   SYNSEM [ LKEYS.KEYREL.PRED _online_p_rel,
            PHON.ONSET voc ] ].

online_nom3 := pp_-_i_le &
 [ ORTH < "on", "-", "line" >,
   SYNSEM [ LKEYS.KEYREL.PRED _online_p_rel,
            PHON.ONSET voc ] ].

online_a1 := aj_-_i-att_le &
 [ ORTH < "online" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_online_a_2_rel",
            PHON.ONSET voc ] ].

online_a2 := aj_-_i-att_le &
 [ ORTH < "on", "line" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_online_a_2_rel",
            PHON.ONSET voc ] ].

online_a3 := aj_-_i-att_le &
 [ ORTH < "on", "-", "line" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_online_a_2_rel",
            PHON.ONSET voc ] ].

;; 2020-07-03 - Need to block AUX + so we get robust only_adv1_mal for 
;; "only can jump".  But we then need a variant for "can only be rented"
only_adv1 := av_-_s-vp-only-x_le &
 [ ORTH < "only" >,
   SYNSEM [ LOCAL.CAT.HEAD.MOD < [ LOCAL.CAT.HEAD.AUX - ] >,
            LKEYS.KEYREL.PRED "_only_a_1_rel",
            PHON.ONSET voc ] ].

;; "can only be rented"
;
only_adv1_bse := av_-_s-vp-only-x_le &
 [ ORTH < "only" >,
   SYNSEM [ LOCAL.CAT.HEAD.MOD < [ LOCAL.CAT.HEAD [ AUX +,
                                                    VFORM bse ] ] >,
            LKEYS.KEYREL.PRED "_only_a_1_rel",
            PHON.ONSET voc ] ].

on_time_adv1 := av_-_i-vp-po_le &
 [ ORTH < "on", "time" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_on+time_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET voc ] ].

one_by_one_a3 := av_-_i-vp-po_le &
 [ ORTH < "one", "-", "by", "-", "one" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_one-by-one_a_2_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET voc ] ].

one_by_one_a4 := av_-_i-vp-po_le &
 [ ORTH < "one", "by", "one" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_one-by-one_a_2_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET voc ] ].

ooze_v1 := v_-_le &
 [ ORTH < "ooze" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ooze_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET voc ] ].

ooze_v1_tr := v_np_le &
 [ ORTH < "ooze" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ooze_v_1_rel",
            PHON.ONSET voc ] ].

open_a1 := aj_pp_i_le &
 [ ORTH < "open" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_open_a_to_rel" ],
            LOCAL.CAT.HEAD.--MALSBRD -,
            PHON.ONSET voc ] ].

opening_n1 := n_-_c_le &
 [ ORTH < "opening" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_opening_n_1_rel",
	    LOCAL.CONT.HOOK.INDEX.--BARESG -,
            PHON.ONSET voc ] ].

opinion_n1 := n_-_c-ns_le &
 [ ORTH < "opinion" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_opinion_n_of_rel",
            PHON.ONSET voc ] ].

;; DPF 18-02-15 - This entry is presumably needed for generation, but let's
;; leave it out until we get to paraphrasing in earnest.  FIX
#|
or_conj_rev := c_xp_or_le &
 [ ORTH < "or" >,
   SYNSEM [ LKEYS.KEYREL.PRED _or_c_rev_rel,
            PHON.ONSET voc ] ].
|#

ordain_v1 := v_np_le &
 [ ORTH < "ordain" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_ordain_v_1_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
            PHON.ONSET voc ] ].

order_n3 := n_vp_c_le &
 [ ORTH < "order" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_order_n_of_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET voc ] ].

order_n6 := n_cp_c-inf_le &
 [ ORTH < "order" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_order_n_of_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET voc ] ].

order_n7 := n_cp_c-optc_le &
 [ ORTH < "order" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_order_n_of_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET voc ] ].

order_v1 := v_np*_le &
 [ ORTH < "order" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_order_v_1_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
            PHON.ONSET voc ] ].

orderly_a1 := aj_-_i_le &
 [ ORTH < "orderly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_orderly_a_1_rel",
            LOCAL.CAT.HEAD.--SBRD -,
            PHON.ONSET voc ] ].

other_a1 := aj_-_i-att-nsp_le &
 [ ORTH < "other" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_other_a_1_rel",
	    LOCAL.CAT.HEAD.MOD.FIRST.LOCAL.CAT.HEAD.--BARED -,
            PHON.ONSET voc ] ].

;; DPF 2018-07-24 - Added CASE nom to prevent misanalysis of e.g.
;; |after the other students had left|
;; DPF 2018-09-12 - But this blocks |we swam from one side to the other|, so
;; we'll hope for parse-ranking to avoid the above.
#|
other_n1 := n_-_c-nocpd_le &
 [ ORTH < "other" >,
   SYNSEM [ LOCAL.CAT.HEAD.CASE nom,
            LKEYS.KEYREL.PRED "_other_n_1_rel",
            PHON.ONSET voc ] ].
|#

otter_n1 := n_-_c_le &
 [ ORTH < "otter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_otter_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET voc ] ].

out_p := p_np_i-nm-no-tm_le &
 [ ORTH < "out" >,
   SYNSEM [ LKEYS.KEYREL.PRED _out_p_rel,
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--BAREDPP.BP-OUT +,
            PHON.ONSET voc ] ].


;; DPF 20-06-23 - Constrain COMP to --BARED - to avoid robust "out of view"
;;
out_of_p := p_np_i_le &
 [ ORTH < "out", "of" >,
   SYNSEM [ LKEYS.KEYREL.PRED _out+of_p_rel,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD [ --BARED -,
						       --BAREDPP.BP-OUTOF + ],
            PHON.ONSET voc ] ].

output_v1 := v_np_le &
 [ ORTH < "output" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_output_v_1_rel",
	    LOCAL.CAT.HEAD.TAM.SAME-PAST +,
            PHON.ONSET voc ] ].

output_v2 := v_np-pp_le &
 [ ORTH < "output" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _to_p_rel,
                    KEYREL.PRED "_output_v_1_rel" ],
	    LOCAL.CAT.HEAD.TAM.SAME-PAST +,
            PHON.ONSET voc ] ].

outright := av_-_i-vp_le &
 [ ORTH < "outright" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_outright_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET voc ] ].

outside_adv1 := pp_-_i_le &
 [ ORTH < "outside" >,
   SYNSEM [ LKEYS.KEYREL.PRED _outside_p_rel,
            PHON.ONSET voc ] ].

outside_n1 := n_pp_c-nocnh-nomod_le &
 [ ORTH < "outside" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_outside_n_of_rel",
            PHON.ONSET voc ] ].

outside := p_np_i_le &
 [ ORTH < "outside" >,
   SYNSEM [ LKEYS.KEYREL.PRED _outside_p_rel,
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.CASE obliq,
            PHON.ONSET voc ] ].

overall_adv1 := av_-_i-vp-x_le &
 [ ORTH < "overall" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_overall_a_1_rel",
            PHON.ONSET voc ] ].

overdose_v1 := v_-_le &
 [ ORTH < "overdose" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_overdose_v_to_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET voc ] ].

overdose_v1_tr := v_np_le &
 [ ORTH < "overdose" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_overdose_v_to_rel",
            PHON.ONSET voc ] ].

overhear_v2 := v_pp*-cp_le &
 [ ORTH < "overhear" >,
   SYNSEM [ LKEYS [ --COMPKEY _from_p_sel_rel,
                    KEYREL.PRED "_overhear_v_from_rel" ],
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--MAL3SG -,
            PHON.ONSET voc ] ].

overlap_v2 := v_-_le &
 [ ORTH < "overlap" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_overlap_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET voc ] ].

overlap_v2_tr := v_np_le &
 [ ORTH < "overlap" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_overlap_v_1_rel",
            PHON.ONSET voc ] ].

overnight_adv1 := av_-_i-vp-po_le &
 [ ORTH < "overnight" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_overnight_a_2_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET voc ] ].

owe_v2 := v_np*_le &
 [ ORTH < "owe" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_owe_v_1_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
            PHON.ONSET voc ] ].

owl_n := n_-_c_le &
 [ ORTH < "owl" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_owl_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET voc ] ].

own_v1 := v_np_le &
 [ ORTH < "own" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_own_v_1_rel",
	    LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
            PHON.ONSET voc ] ].

owner_n1 := n_pp_c-of-anim_le &
 [ ORTH < "owner" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_owner_n_of_rel",
            PHON.ONSET voc ] ].

;; Block robust "the fast pace"
pace_v1 := v_-_le &
 [ ORTH < "pace" >,
   SYNSEM [ LOCAL.CAT.HEAD [ --MAL3SG -,
			     --SAMENV + ],
	    LKEYS.KEYREL.PRED "_pace_v_1_rel",
            PHON.ONSET con ] ].

pace_v1_tr := v_np_le &
 [ ORTH < "pace" >,
   SYNSEM [ LOCAL.CAT.HEAD.--MAL3SG -,
	    LKEYS.KEYREL.PRED "_pace_v_1_rel",
            PHON.ONSET con ] ].

pack_n1 := n_pp_c-of_le &
 [ ORTH < "pack" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pack_n_of_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

paint_v1 := v_-_le &
 [ ORTH < "paint" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_paint_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

paint_v1_tr := v_np_le &
 [ ORTH < "paint" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_paint_v_1_rel",
            PHON.ONSET con ] ].

painting_n1 := n_pp_c-of_le &
 [ ORTH < "painting" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_painting_n_of_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

;; |we will visit Summer Palace tomorrow|
#|
palace_n1 := n_-_c_le &
 [ ORTH < "palace" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_palace_n_1_rel",
            LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].
|#

;; 2020-09-30 - Need to block bare-sg so we can get good analysis of e.g.
;; "Since the coronavirus pandemic broke out in Wuhan in December last year, 
;; the number of people infected and patients who have died keeps climbing."
;;
pandemic_n1 := n_-_c-ns_le &
 [ ORTH < "pandemic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pandemic_n_1_rel",
            LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

panic_v1 := v_-_le &
 [ ORTH < "panic" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_panic_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

paper_n1 := n_-_c_le &
 [ ORTH < "paper" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_paper_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

paper_n2 := n_-_m-ed_le &
 [ ORTH < "paper" >,
   ALTS.PLMASS -,
   SYNSEM [ LOCAL.CAT.VAL.SPR.FIRST.LOCAL.AGR.PNG.PN 3s,
            LKEYS.KEYREL.PRED "_paper_n_1_rel",
            PHON.ONSET con ] ].

parallel_n1 := n_pp_c_le &
 [ ORTH < "parallel" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_parallel_n_to_rel" ],
   	    LOCAL.CAT.HEAD.--BAREPP.BP-IN -,
            PHON.ONSET con ] ].

park_n1 := n_-_c_le &
 [ ORTH < "park" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_park_n_1_rel",
            PHON.ONSET con ],
   TOKENS.+LIST.FIRST.+CLASS.+CASE non_capitalized+lower ].

park_post_ttl := n_-_tt-post_le &
 [ ORTH < "Park" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_park_n_1_rel",
            PHON.ONSET con ],
   TOKENS.+LAST.+CLASS.+CASE capitalized ].

parley_v1 := v_-_le &
 [ ORTH < "parley" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_parley_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

parley_v1_tr := v_np_le &
 [ ORTH < "parley" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_parley_v_1_rel",
            PHON.ONSET con ] ].

;; DPF 2020-05-08 - 
part_n1 := n_-_c-ns-part_le &
 [ ORTH < "part" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_part_n_1_rel",
   	    LOCAL.CAT.HEAD.--BAREPP.BP-IN -,
            PHON.ONSET con ] ].

;; |we admire small parts of the whole|
part_n2 := n_pp_c-ns-of_le &
 [ ORTH < "part" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_part_n_of_rel",
            PHON.ONSET con ] ].

part_time_adv1 := av_-_i-vp-po_le &
 [ ORTH < "part", "-", "time" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_part-time_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

part_time_adv2 := av_-_i-vp-po_le &
 [ ORTH < "part", "time" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_part-time_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

part_time_adv3 := av_-_i-vp-po_le &
 [ ORTH < "parttime" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_part-time_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

part_v1 := v_np*_le &
 [ ORTH < "part" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_part_v_1_rel",
	    LOCAL.CAT.HEAD.--MALCOPBSE -,
            PHON.ONSET con ] ].

partition_v2 := v_-_unacc_le &
 [ ORTH < "partition" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_partition_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

party_v1 := v_-_le &
 [ ORTH < "party" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_party_v_1_rel",
	    LOCAL.CAT.HEAD [ --SAMENV +,
			     --MAL3SG - ],
            PHON.ONSET con ] ].

; Block passive: |Everyone in class passed|
pass_v1 := v_np_ntr_le &
 [ ORTH < "pass" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_pass_v_1_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
            PHON.ONSET con ] ].

pasture_v2 := v_-_unacc_le &
 [ ORTH < "pasture" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pasture_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

path_n1 := n_-_c-ns_le &
 [ ORTH < "path" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_path_n_1_rel",
            PHON.ONSET con ] ].

;; 2020-04-09 - Wrongly restrict this to predicative, so we can get N-N for
;; |patient deaths|
;;
patient_a1 := aj_-_i-prd_le &
 [ ORTH < "patient" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_patient_a_1_rel",
            PHON.ONSET con ] ].

patient_n1 := n_-_c_le &
 [ ORTH < "patient" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_patient_n_1_rel",
   	    LOCAL.CAT.HEAD [ --BARE -,   
			     --MALDIV - ],
            PHON.ONSET con ] ].

patrol_v1 := v_-_le &
 [ ORTH < "patrol" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_patrol_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

patrol_v1_tr := v_np_le &
 [ ORTH < "patrol" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_patrol_v_1_rel",
            PHON.ONSET con ] ].

patron_n1 := n_pp_mc-of-lhc_le &
 [ ORTH < "patron" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_patron_n_of_rel",
            PHON.ONSET con ] ].

patter_v1 := v_-_le &
 [ ORTH < "patter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_patter_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

pause_v1 := v_-_le &
 [ ORTH < "pause" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pause_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

pause_v1_tr := v_np_le &
 [ ORTH < "pause" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pause_v_1_rel",
            PHON.ONSET con ] ].

pay_rise_n1_br := n_-_c_le &
 [ ORTH < "pay", "rise" >,
   DIALECT br,
   SYNSEM [ LKEYS.KEYREL.PRED "_pay+rise_n_1_rel",
            PHON.ONSET con ] ].

peach_n1 := n_-_c_le &
 [ ORTH < "peach" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_peach_n_1_rel",
            PHON.ONSET con ] ].

peanut_n1 := n_-_c-nochd_le &
 [ ORTH < "peanut" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_peanut_n_1_rel",
            PHON.ONSET con ] ].

pearly_a1 := aj_-_i_le &
 [ ORTH < "pearly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pearly_a_1_rel",
            LOCAL.CAT.HEAD.--SBRD -,
            PHON.ONSET con ] ].

pebbly_a1 := aj_-_i_le &
 [ ORTH < "pebbly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pebbly_a_1_rel",
            LOCAL.CAT.HEAD.--SBRD -,
            PHON.ONSET con ] ].

pelvic_style_adv := av_-_i-vp-po_le &
 [ ORTH < "pelvic", "-", "style" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pelvic+style_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

pen_v1 := v_np_le &
 [ ORTH < "pen" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pen_v_1_rel",
	    LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
            PHON.ONSET con ] ].

;; Needed for |his fifty pence pieces|
pence_n1_sg := n_-_c_le &
 [ ORTH < "pence" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pence_n_1_rel",
            PHON.ONSET con ] ].

pencil_n1 := n_-_c_le &
 [ ORTH < "pencil" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pencil_n_1_rel",
            PHON.ONSET con ] ].

penny_n1 := n_-_c_le &
 [ ORTH < "penny" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_penny_n_1_rel",
            LOCAL.AGR.PNG png-irreg,
            PHON.ONSET con ] ].

;; Block as nonhead in cmpd: |people health|
;; Tried adding --BARE to block |that people|, but also blocks |People arrives|
;; so undo and FIX.
;;
people_n1 := n_pp_c-pl_le &
 [ ORTH < "people" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_people_n_of_rel" ],
            LOCAL [ AGR.PNG png-irreg,
	            CAT.HEAD.--CPDNHD - ],
	    --SIND.SORT human,
            PHON.ONSET con ] ].

people_n2 := n_-_c-sg_le &
 [ ORTH < "people" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_people_n_1_rel",
            LOCAL.CAT.HEAD [ CASE non_nom,
	                     MINORS.ALTMIN _a_q_rel ],
            PHON.ONSET con ] ].

;; only for e.g. |a per person charge|, not |*we charged per persons|
;;
per_a2 := aj_-_i-att-nsp_le &
 [ ORTH < "per" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_per_a_1_rel",
            LOCAL.CAT.HEAD.MOD.FIRST.LOCAL.AGR.PNG.PN 3s,
            PHON.ONSET con ] ].

per_prenom_n1 := p_nb_pre-meas_le &
 [ ORTH < "per" >,
   SYNSEM [ LKEYS.KEYREL.PRED _per_p_rel,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL [ CAT.HEAD.CASE non_nom,
	                                      AGR.PNG.PN 3s ],
            PHON.ONSET con ] ].

;; Exclude nominal modifiee to get robust "they charged ten cents per people"
per_p2 := p_np_i_le &
 [ ORTH < "per" >,
   SYNSEM [ LKEYS.KEYREL.PRED _per_p_rel,
	    LOCAL.CONT.HOOK.XARG event,
            PHON.ONSET con ] ].

per_cent_n1 := n_pp_c-of_le &
 [ ORTH < "per", "cent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_percent_n_of_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

;; 2022-04-22 - HEAD.--CPDNHD - blocks "the ten percent increase", so what
;; was the intent?  Remove and check
#|
percent_n1 := n_-_c-meas-nb_le &
 [ ORTH < "percent" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_percent_n_1_rel",
            LOCAL [ CAT.HEAD.--CPDNHD -,
		    AGR.PNG png-irreg ],
            PHON.ONSET con ] ].
|#

perch_v1 := v_-_le &
 [ ORTH < "perch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_perch_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

perfume_v1 := v_np_le &
 [ ORTH < "perfume" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_perfume_v_1_rel",
	    LOCAL.CAT.HEAD [ --MAL3SG -,
			     --MALN3SG - ],
            PHON.ONSET con ] ].

period_adv1 := av_-_i-vp-po_le &
 [ ORTH < "period" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_period_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

permit_v2 := v_np_le &
 [ ORTH < "permit" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_permit_v_1_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
            PHON.ONSET con ] ].

person_n1 := n_-_c_le &
 [ ORTH < "person" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_person_n_1_rel",
            PHON.ONSET con ] ].

pharaoh_n1 := n_-_mc_le &
 [ ORTH < "pharaoh" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pharaoh_n_1_rel",
            PHON.ONSET con ] ].

phone_v1 := v_np*_le &
 [ ORTH < "phone" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_phone_v_1_rel",
	    LOCAL.CAT [ VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
			HEAD.--NOCJCRD - ],
            PHON.ONSET con ] ].

phone_v3 := v_cp_comp_le &
 [ ORTH < "phone" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_phone_v_1_rel",
            PHON.ONSET con ] ].

piece_n1 := n_pp_c-of_le &
 [ ORTH < "piece" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_piece_n_of-2_rel",
            LOCAL.CAT [ HEAD.--OFMOD -,
			VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--BARE - ],
            PHON.ONSET con ] ].

ping_n1 := n_-_c_le &
 [ ORTH < "ping" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ping_n_1_rel",
            PHON.ONSET con ],
   TOKENS.+LIST.FIRST.+CLASS.+CASE non_capitalized+lower ].

pipe_v1 := v_-_le &
 [ ORTH < "pipe" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pipe_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

pipe_v1_tr := v_np_le &
 [ ORTH < "pipe" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pipe_v_1_rel",
            PHON.ONSET con ] ].

pitch_v1 := v_-_le &
 [ ORTH < "pitch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pitch_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

pitch_v1_tr := v_np_le &
 [ ORTH < "pitch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pitch_v_1_rel",
            PHON.ONSET con ] ].

place_n1 := n_pp_c-plc-of_le &
 [ ORTH < "place" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_place_n_of_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

placed_a1 := v_-_psv_le &
 [ ORTH < "placed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_place_v_1_rel",
            PHON.ONSET con ] ].

plane_n1 := n_-_c-transp_le &
 [ ORTH < "plane" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_plane_n_1_rel",
            PHON.ONSET con ] ].

plant_v1 := v_-_le &
 [ ORTH < "plant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_plant_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

plant_v1_tr := v_np_le &
 [ ORTH < "plant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_plant_v_1_rel",
            PHON.ONSET con ] ].

;; Remove --BARE - since we want robust bare-sg for |she went to school play|
;; But we don't want it for |she went outside to play|, so let's add lexical
;; entry for |school play|.
;; LPERIPH is to block robust N-N for |children play|
;;
play_n1 := n_-_c_le &
 [ ORTH < "play" >,
   SYNSEM [ LOCAL.CAT cat_infl_nosuff &
		      [ HEAD [ MINORS.NORM norm_rel,
			       --BARE - ] ],
	    MODIFD.LPERIPH na_or_+,
            LKEYS.KEYREL.PRED "_play_n_1_rel",
            PHON.ONSET con ] ].

play_n2 := n_-_m-nochd-modable_le &
 [ ORTH < "play" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_play_n_1_rel",
            LOCAL.CAT.HEAD.--MALCM -,
            PHON.ONSET con ] ].

;; --MAL3SG: |saw the school play|
play_v1 := v_-_le &
 [ ORTH < "play" >,
   ALTS.VADJ -,
   SYNSEM [ LKEYS.KEYREL.PRED "_play_v_1_rel",
	    LOCAL.CAT.HEAD [ --SAMENV +,
			     --MAL3SG - ],
            PHON.ONSET con ] ].

;; Prevent |to play she|
play_v1_tr := v_np_le &
 [ ORTH < "play" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_play_v_1_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST [ LOCAL.CAT.HEAD.MINORS.NORM norm_rel,
					--SIND.SORT entity ],
            PHON.ONSET con ] ].

please_root := av_-_dc-pls_le &
 [ ORTH < "please" >,
   SYNSEM [ LKEYS.KEYREL.CARG "please",
	    LOCAL.CAT.HEAD.MOD.FIRST.LOCAL.CONT.HOOK.INDEX.SF comm,
            PHON.ONSET con ] ].

please_adv2 := av_-_i-vp-pr_le &
 [ ORTH < "please" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_please_a_1_rel",
	    LOCAL.CAT.HEAD [ MOD < [ LOCAL.CONT.HOOK.XARG.PNG.PN 2 ] >,
			     --ADVADJ - ],
            PHON.ONSET con ] ].

pledge_v1 := v_np*_le &
 [ ORTH < "pledge" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pledge_v_1_rel",
	    LOCAL.CAT.HEAD.--NOCJCRD -,
            PHON.ONSET con ] ].

plot_v1 := v_-_le &
 [ ORTH < "plot" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_plot_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

plot_v1_tr := v_np_le &
 [ ORTH < "plot" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_plot_v_1_rel",
            PHON.ONSET con ] ].

plunder_v1 := v_-_le &
 [ ORTH < "plunder" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_plunder_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

plunder_v1_tr := v_np_le &
 [ ORTH < "plunder" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_plunder_v_1_rel",
            PHON.ONSET con ] ].

;; Restrict to finite forms, to avoid robust "get pocket money"
pocket_v1 := v_np_le &
 [ ORTH < "pocket" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pocket_v_1_rel",
	    LOCAL.CAT.HEAD.VFORM fin,
            PHON.ONSET con ] ].

poise_v1 := v_-_le &
 [ ORTH < "poise" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_poise_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

poise_v1_tr := v_np_le &
 [ ORTH < "poise" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_poise_v_1_rel",
            PHON.ONSET con ] ].

poison_v1 := v_-_le &
 [ ORTH < "poison" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_poison_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

poison_v1_tr := v_np_le &
 [ ORTH < "poison" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_poison_v_1_rel",
            PHON.ONSET con ] ].

polish_v1 := v_-_le &
 [ ORTH < "polish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_polish_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

polish_v1_tr := v_np_le &
 [ ORTH < "polish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_polish_v_1_rel",
            PHON.ONSET con ] ].

poor_a1 := aj_-_i-er_le &
 [ ORTH < "poor" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_poor_a_1_rel",
            LOCAL.CAT.HEAD.--SBRD -,
            PHON.ONSET con ] ].

poorly_isect := av_-_i-vp-po_le &
 [ ORTH < "poorly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_poor_a_1_rel",
            PHON.ONSET con ] ].

pop_v1 := v_-_le &
 [ ORTH < "pop" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pop_v_cause_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

pop_v1_tr := v_np_le &
 [ ORTH < "pop" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_pop_v_cause_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
            PHON.ONSET con ] ].

population_n1 := n_-_c_le &
 [ ORTH < "population" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_population_n_1_rel",
            PHON.ONSET con ] ].

population_n2 := n_pp_m-obl_le &
 [ ORTH < "population" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_population_n_of_rel" ],
            PHON.ONSET con ] ].

port_v1 := v_-_le &
 [ ORTH < "port" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_port_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

port_v1_tr := v_np_le &
 [ ORTH < "port" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_port_v_1_rel",
            PHON.ONSET con ] ].

portage_v1 := v_-_le &
 [ ORTH < "portage" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_portage_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

portage_v1_tr := v_np_le &
 [ ORTH < "portage" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_portage_v_1_rel",
            PHON.ONSET con ] ].

portly_a1 := aj_-_i_le &
 [ ORTH < "portly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_portly_a_1_rel",
            LOCAL.CAT.HEAD.--SBRD -,
            PHON.ONSET con ] ].

pose_v1 := v_np*_le &
 [ ORTH < "pose" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_pose_v_as_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
            PHON.ONSET con ] ].

position_n1 := n_pp_mc-ns_le &
 [ ORTH < "position" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
		    KEYREL.PRED "_position_n_of_rel" ],
            LOCAL.CAT [ HEAD.--OFMOD -,
			VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--BARE - ],
            PHON.ONSET con ] ].

positive_n1 := n_-_c_le &
 [ ORTH < "positive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_positive_n_1_rel",
	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

post_n1 := n_pp_c-of_le &
 [ ORTH < "post" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_post_n_of_rel",
            LOCAL.CAT [ HEAD.--OFMOD -,
			VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--BARE - ],
            PHON.ONSET con ] ].

post_v1 := v_np*_le &
 [ ORTH < "post" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_post_v_1_rel",
            PHON.ONSET con ] ].

postmark_v1 := v_np_le &
 [ ORTH < "postmark" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_postmark_v_1_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
            PHON.ONSET con ] ].

posture_n1 := n_-_mc_le &
 [ ORTH < "posture" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_posture_n_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

pot_n1 := n_-_c-ed_le &
 [ ORTH < "pot" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pot_n_1_rel",
            PHON.ONSET con ] ].

pour_v4 := v_np_le &
 [ ORTH < "pour" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_pour_v_1_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
            PHON.ONSET con ] ].

practice_v1 := v_np*_le &
 [ ORTH < "practice" >,
   SYNSEM [ LOCAL.CAT [ HEAD.--MAL3SG -,
   	                VAL.SUBJ < [ LOCAL.CAT.HEAD.--BARE - ] > ],
	    LKEYS.KEYREL.PRED "_practice_v_1_rel",
            PHON.ONSET con ] ].

precipitate_v1 := v_-_le &
 [ ORTH < "precipitate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_precipitate_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

prepare_v1 := v_np*_le &
 [ ORTH < "prepare" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_prepare_v_1_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
            PHON.ONSET con ] ].

;; Block robust |make us better prepared for ...|
;; Block robust "is prepared for ..."
prepare_for_v1 := v_pp_e_le &
 [ ORTH < "prepare" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_prepare_v_for_rel" ],
	    LOCAL.CAT.HEAD [ --MALFIN -,
			     --MALCOPBSE -],
	    PHON.ONSET con ] ].

prepared_a1 := aj_-_i-sbrd_le &
 [ ORTH < "prepared" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_prepared_a_1_rel",
            PHON.ONSET con ] ].

;; Restrict to temporal nouns: "at the present time"
present_a1 := aj_-_i-att_le &
 [ ORTH < "present" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_present_a_1_rel",
	    LOCAL.CAT.HEAD.MOD.FIRST.--SIND.SORT time,
            PHON.ONSET con ] ].

present_n1 := n_-_c-nocnh_le &
 [ ORTH < "present" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_present_n_1_rel",
	    LOCAL.CAT.HEAD.--BAREPP.BP-AT -,
            PHON.ONSET con ] ].

president_n1 := n_pp_c-of_le &
 [ ORTH < "president" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_president_n_of_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

press_v1 := v_-_le &
 [ ORTH < "press" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_press_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

press_v1_tr := v_np_le &
 [ ORTH < "press" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_press_v_1_rel",
            PHON.ONSET con ] ].

pressure_v1 := v_np_le &
 [ ORTH < "pressure" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pressure_v_1_rel",
	    LOCAL.CAT.HEAD [ --MAL3SG -,
			     --MALN3SG - ],
            PHON.ONSET con ] ].

presume_v5 := v_np_le &
 [ ORTH < "presume" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_presume_v_1_rel",
	    LOCAL.CAT.HEAD.--NOCJCRD -,
            PHON.ONSET con ] ].

;; Avoid misparse for "Gasoline prices this same time last year averaged two 
;; dollars a gallon."
price_v1 := v_np-pp_e_le &
 [ ORTH < "price" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _at_p_sel_rel,
                    KEYREL.PRED "_price_v_at_rel" ],
            PHON.ONSET con ] ].

principle_n1 := n_pp_c-ns-of_le &
 [ ORTH < "principle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_principle_n_of_rel",
	    LOCAL.CAT.HEAD.--BAREPP.BP-IN -,
            PHON.ONSET con ] ].

print_v2 := v_-_unacc_le &
 [ ORTH < "print" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_print_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

private_n1 := n_-_mc-nocnh_le &
 [ ORTH < "private" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_private_n_1_rel",
	    LOCAL.CAT.HEAD.--BAREPP.BP-IN -,
            PHON.ONSET con ] ].

prize_n1 := n_pp_c_le &
 [ ORTH < "prize" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_prize_n_for_rel" ],
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

pro_bono_adv1 := av_-_i-vp_le &
 [ ORTH < "pro", "bono" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pro+bono_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

pro_bono_adv2 := av_-_i-vp_le &
 [ ORTH < "pro", "-", "bono" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pro+bono_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

process_n1 := n_pp_c-ns-of_le &
 [ ORTH < "process" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_process_n_of_rel",
            PHON.ONSET con ] ].

process_v1 := v_-_le &
 [ ORTH < "process" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_process_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

process_v1_tr := v_np_le &
 [ ORTH < "process" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_process_v_1_rel",
            PHON.ONSET con ] ].

proclaim_v1 := v_np_le &
 [ ORTH < "proclaim" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_proclaim_v_to_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
            PHON.ONSET con ] ].

proclaim_v4 := v_np-prd_oeq_le &
 [ ORTH < "proclaim" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_proclaim_v_as_rel",
	    LOCAL.CAT.HEAD.--SBRDMOD -,
            PHON.ONSET con ] ].

professor_n1 := n_-_c-maycap_le &
 [ ORTH < "professor" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_professor_n_1_rel",
            PHON.ONSET con ] ].

professor_n2 := n_pp_c-of-obl_le &
 [ ORTH < "professor" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_professor_n_of_rel",
            PHON.ONSET con ] ].

profile_n1 := n_-_c_le &
 [ ORTH < "profile" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_profile_n_1_rel",
	    LOCAL.CAT.HEAD.--BAREPP.BP-IN -,
            PHON.ONSET con ] ].

profit_v1 := v_-_le &
 [ ORTH < "profit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_profit_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

profit_v1_tr := v_np_le &
 [ ORTH < "profit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_profit_v_1_rel",
            PHON.ONSET con ] ].

project_v1 := v_np_le &
 [ ORTH < "project" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_project_v_1_rel",
	    LOCAL.CAT.HEAD.--NOCJCRD -,
            PHON.ONSET con ] ].

promise_v2 := v_-_le &
 [ ORTH < "promise" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_promise_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

promise_v2_tr := v_np_le &
 [ ORTH < "promise" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_promise_v_1_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
            PHON.ONSET con ] ].

promote_v1 := v_np_le &
 [ ORTH < "promote" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_promote_v_to_rel",
            PHON.ONSET con ] ].

prone_a1 := aj_pp_i-sbrd_le &
 [ ORTH < "prone" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_prone_a_to_rel" ],
            PHON.ONSET con ] ].

pronounce_v1 := v_np*_le &
 [ ORTH < "pronounce" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_pronounce_v_1_rel",
	    LOCAL.CAT [ VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
			HEAD.--NOCJCRD - ],
            PHON.ONSET con ] ].

;; Enable for "We propose that he should be present" while still blocking indic
;; 
propose_v2 := v_pp*-cp_le &
 [ ORTH < "propose" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_propose_v_to_rel" ],
	    LOCAL.CAT.VAL.COMPS.REST.FIRST.LOCAL.CAT.HEAD.TAM.MOOD modal_subj,
            PHON.ONSET con ] ].

prospect_n1 := n_-_c_le &
 [ ORTH < "prospect" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_prospect_n_1_rel",
	    LOCAL.CAT.HEAD.--BAREPP.BP-IN -,
            PHON.ONSET con ] ].

protect_v1 := v_np_le &
 [ ORTH < "protect" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_protect_v_1_rel",
            PHON.ONSET con ] ].

protection_n1 := n_pp_m_le &
 [ ORTH < "protection" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_protection_n_of_rel" ],
            PHON.ONSET con ] ].

protest_v1 := v_-_le &
 [ ORTH < "protest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_protest_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

protest_v1_tr := v_np_le &
 [ ORTH < "protest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_protest_v_1_rel",
            PHON.ONSET con ] ].

prove_v1 := v_np*_le &
 [ ORTH < "prove" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_prove_v_to_rel",
            PHON.ONSET con ] ].

prove_v4 := v_np-prd_oeq_le &
 [ ORTH < "prove" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_prove_v_to_rel",
	    LOCAL.CAT.HEAD.--SBRDMOD -,
            PHON.ONSET con ] ].

provide_v1 := v_np*_le &
 [ ORTH < "provide" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_provide_v_1_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
            PHON.ONSET con ] ].

provide_v2 := v_np-np_only_le &
 [ ORTH < "provide" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_provide_v_1_rel",
            PHON.ONSET con ] ].

public_a1 := aj_-_i_le &
 [ ORTH < "public" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_public_a_1_rel",
	    LOCAL.CAT.HEAD.--MALSBRD -,
            PHON.ONSET con ] ].

public_n1 := n_-_m-def_le &
 [ ORTH < "public" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_public_n_1_rel",
            PHON.ONSET con ] ].

pudding_n2 := n_-_c_le &
 [ DIALECT br,
   ORTH < "pudding" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pudding_n_1_rel",
	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

;; Block robust cmpd "a toy bear pulls..."
pull_n1 := n_-_mc_le &
 [ ORTH < "pull" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pull_n_1_rel",
	    LOCAL.CAT.HEAD.--PLNOAFF +,
            PHON.ONSET con ] ].

pull_v1 := v_-_le &
 [ ORTH < "pull" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pull_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

pull_v1_tr := v_np_le &
 [ ORTH < "pull" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pull_v_1_rel",
            PHON.ONSET con ] ].

pulp_v1 := v_-_le &
 [ ORTH < "pulp" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pulp_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

pulp_v1_tr := v_np_le &
 [ ORTH < "pulp" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_pulp_v_1_rel",
            PHON.ONSET con ] ].

punch_v1 := v_-_le &
 [ ORTH < "punch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_punch_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

punch_v1_tr := v_np_le &
 [ ORTH < "punch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_punch_v_1_rel",
            PHON.ONSET con ] ].

puppy_n1 := n_-_c-ugen_le &
 [ ORTH < "puppy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_puppy_n_1_rel",
            PHON.ONSET con ] ].

puree_v1 := v_-_le &
 [ ORTH < "puree" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_puree_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

puree_v2 := v_-_le &
 [ ORTH < "purée" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_puree_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

puree_v1_tr := v_np_le &
 [ ORTH < "puree" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_puree_v_1_rel",
            PHON.ONSET con ] ].

puree_v2_tr := v_np_le &
 [ ORTH < "purée" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_puree_v_1_rel",
            PHON.ONSET con ] ].

push_v1 := v_-_le &
 [ ORTH < "push" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_push_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

push_v1_tr := v_np_le &
 [ ORTH < "push" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_push_v_1_rel",
            PHON.ONSET con ] ].

put_aside_v1 := v_p-np_le &
 [ ORTH < "put" >,
   SYNSEM [ LOCAL.CAT.HEAD [ --MAL3SG -,
			       TAM.SAME-PAST + ],
	    LKEYS [ --COMPKEY _aside_p_sel_rel,
                    KEYREL.PRED "_put_v_aside_rel" ],
            PHON.ONSET con ] ].

put_away_v1 := v_p-np_le &
 [ ORTH < "put" >,
   SYNSEM [ LOCAL.CAT.HEAD [ --MAL3SG -,
			       TAM.SAME-PAST + ],
	    LKEYS [ --COMPKEY _away_p_sel_rel,
                    KEYREL.PRED "_put_v_away_rel" ],
            PHON.ONSET con ] ].

put_back_v1 := v_p-np_le &
 [ ORTH < "put" >,
   SYNSEM [ LOCAL.CAT.HEAD [ --MAL3SG -,
			       TAM.SAME-PAST + ],
	    LKEYS [ --COMPKEY _back_p_sel_rel,
                    KEYREL.PRED "_put_v_back_rel" ],
            PHON.ONSET con ] ].

put_by_v1 := v_p-np_le &
 [ ORTH < "put" >,
   SYNSEM [ LOCAL.CAT.HEAD [ --MAL3SG -,
			       TAM.SAME-PAST + ],
	    LKEYS [ --COMPKEY _by_p_sel_rel,
                    KEYREL.PRED "_put_v_by_rel" ],
            PHON.ONSET con ] ].

put_down_v1 := v_p-np_le &
 [ ORTH < "put" >,
   SYNSEM [ LOCAL.CAT.HEAD [ --MAL3SG -,
			       TAM.SAME-PAST + ],
	    LKEYS [ --COMPKEY _down_p_sel_rel,
                    KEYREL.PRED "_put_v_down_rel" ],
            PHON.ONSET con ] ].

put_in_v1 := v_p-np_le &
 [ ORTH < "put" >,
   SYNSEM [ LOCAL.CAT.HEAD [ --MAL3SG -,
			       TAM.SAME-PAST + ],
	    LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_put_v_in_rel" ],
            PHON.ONSET con ] ].

put_in_v2 := v_p_le &
 [ ORTH < "put" >,
   SYNSEM [ LOCAL.CAT.HEAD [ --MAL3SG -,
			       TAM.SAME-PAST + ],
	    LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_put_v_in_rel" ],
            PHON.ONSET con ] ].

put_off_v1 := v_p-np_le &
 [ ORTH < "put" >,
   SYNSEM [ LOCAL.CAT.HEAD [ --MAL3SG -,
			       TAM.SAME-PAST + ],
	    LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_put_v_off_rel" ],
            PHON.ONSET con ] ].

put_off_v2 := v_np-p-np_le &
 [ ORTH < "put" >,
   SYNSEM [ LOCAL.CAT.HEAD [ --MAL3SG -,
			       TAM.SAME-PAST + ],
	    LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_put_v_off_rel" ],
            PHON.ONSET con ] ].

put_on_v1 := v_p-np_le &
 [ ORTH < "put" >,
   SYNSEM [ LOCAL.CAT.HEAD [ --MAL3SG -,
			       TAM.SAME-PAST + ],
	    LKEYS [ --COMPKEY _on_p_sel_rel,
                    KEYREL.PRED "_put_v_on_rel" ],
            PHON.ONSET con ] ].

put_out_v1 := v_p-np_le &
 [ ORTH < "put" >,
   SYNSEM [ LOCAL.CAT.HEAD [ --MAL3SG -,
			       TAM.SAME-PAST + ],
	    LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_put_v_out_rel" ],
            PHON.ONSET con ] ].

put_out_v2 := v_p_le &
 [ ORTH < "put" >,
   SYNSEM [ LOCAL.CAT.HEAD [ --MAL3SG -,
			       TAM.SAME-PAST + ],
	    LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_put_v_out_rel" ],
            PHON.ONSET con ] ].

put_through_v1 := v_p-np-pp_to_le &
 [ ORTH < "put" >,
   SYNSEM [ LOCAL.CAT.HEAD [ --MAL3SG -,
			       TAM.SAME-PAST + ],
	    LKEYS [ --COMPKEY _through_p_sel_rel,
                    KEYREL.PRED "_put_v_through_rel" ],
            PHON.ONSET con ] ].

put_through_v2 := v_p-np_le &
 [ ORTH < "put" >,
   SYNSEM [ LOCAL.CAT.HEAD [ --MAL3SG -,
			     TAM.SAME-PAST + ],
	    LKEYS [ --COMPKEY _through_p_sel_rel,
                    KEYREL.PRED "_put_v_through_rel" ],
            PHON.ONSET con ] ].

put_together_v1 := v_p-np_le &
 [ ORTH < "put" >,
   SYNSEM [ LOCAL.CAT.HEAD [ --MAL3SG -,
			       TAM.SAME-PAST + ],
	    LKEYS [ --COMPKEY _together_p_sel_rel,
                    KEYREL.PRED "_put_v_together_rel" ],
            PHON.ONSET con ] ].

put_up+with_v1 := v_p-pp_e_le &
 [ ORTH < "put" >,
   SYNSEM [ LOCAL.CAT.HEAD [ --MAL3SG -,
			       TAM.SAME-PAST + ],
	    LKEYS [ --COMPKEY _up_p_sel_rel,
                    --OCOMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_put_v_up-with_rel" ],
            PHON.ONSET con ] ].

put_up_v1 := v_p-np_le &
 [ ORTH < "put" >,
   SYNSEM [ LOCAL.CAT.HEAD [ --MAL3SG -,
			       TAM.SAME-PAST + ],
	    LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_put_v_up_rel" ],
            PHON.ONSET con ] ].

put_up_v2 := v_p_le &
 [ ORTH < "put" >,
   SYNSEM [ LOCAL.CAT.HEAD [ --MAL3SG -,
			       TAM.SAME-PAST + ],
	    LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_put_v_up_rel" ],
            PHON.ONSET con ] ].

put_v1 := v_np-pp_prop_le &
 [ ORTH < "put" >,
   SYNSEM [ LOCAL.CAT.HEAD [ --MAL3SG -,
			       TAM.SAME-PAST + ],
	    LKEYS.KEYREL.PRED "_put_v_1_rel",
            PHON.ONSET con ] ].

quality_n1 := n_pp_mc-ns_le &
 [ ORTH < "quality" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_quality_n_of_rel" ],
            PHON.ONSET con ] ].

quarrel_v1 := v_-_le &
 [ ORTH < "quarrel" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_quarrel_v_about_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

quarterly_adv1 := av_-_i-vp-po_le &
 [ ORTH < "quarterly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_quarterly_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

question_n1 := n_pp_c-ns_le &
 [ ORTH < "question" >,
   SYNSEM [ LKEYS [ --COMPKEY _about_p_sel_rel,
                    KEYREL.PRED "_question_n_about_rel" ],
	    LOCAL.CAT.HEAD.--BAREPP [ BP-IN -,
				      BP-INTO - ],
            PHON.ONSET con ] ].

question_v1 := v_-_le &
 [ ORTH < "question" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_question_v_1_rel",
            LOCAL.CAT.HEAD [ --MAL3SG -,
			     --SAMENV + ],
            PHON.ONSET con ] ].

;; 2020-12-03 - Avoid robust "ask ourselves this question"
question_v1_tr := v_np_le &
 [ ORTH < "question" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_question_v_1_rel",
            LOCAL.CAT.HEAD.--MAL3SG -,
            PHON.ONSET con ] ].

;; Avoid |a nice quiet spot by ...|
quiet_n1 := n_-_m-nomod_le &
 [ ORTH < "quiet" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_quiet_n_1_rel",
            PHON.ONSET con ] ].

quiet_v1 := v_-_le &
 [ ORTH < "quiet" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_quiet_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

quintuple_v2 := v_-_unacc_le &
 [ ORTH < "quintuple" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_quintuple_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

quit-prd := v_vp_ssr-prp_le &
 [ ORTH < "quit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_quit_v_prd_rel",
            LOCAL.CAT.HEAD [ --MAL3SG -,
			       TAM.SAME-PAST + ],
            PHON.ONSET con ] ].

quit_v1 := v_np*_ntr_le &
 [ ORTH < "quit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_quit_v_1_rel",
            LOCAL.CAT.HEAD [ --MAL3SG -,
			       TAM.SAME-PAST + ],
            PHON.ONSET con ] ].

race_v1 := v_-_le &
 [ ORTH < "race" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_race_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

race_v1_tr := v_np_le &
 [ ORTH < "race" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_race_v_1_rel",
            PHON.ONSET con ] ].

radio_n1 := n_-_c_le &
 [ ORTH < "radio" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_radio_n_1_rel",
            PHON.ONSET con ] ].

radio_v1 := v_-_le &
 [ ORTH < "radio" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_radio_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

radio_v1_tr := v_np_le &
 [ ORTH < "radio" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_radio_v_1_rel",
            PHON.ONSET con ] ].

rain_v1 := v_-_it_le &
 [ ORTH < "rain" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rain_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

range_v2 := v_-_le &
 [ ORTH < "range" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_range_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

rank_v1 := v_-_le &
 [ ORTH < "rank" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rank_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

rank_v1_tr := v_np_le &
 [ ORTH < "rank" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_rank_v_1_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
            PHON.ONSET con ] ].

rap_v1 := v_-_le &
 [ ORTH < "rap" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rap_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

rap_v1_tr := v_np_le &
 [ ORTH < "rap" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rap_v_1_rel",
            PHON.ONSET con ] ].

rape_v1 := v_-_le &
 [ ORTH < "rape" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rape_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

rape_v1_tr := v_np_le &
 [ ORTH < "rape" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rape_v_1_rel",
            PHON.ONSET con ] ].

rate_n1 := n_pp_c-of_le &
 [ ORTH < "rate" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rate_n_of_rel",
            PHON.ONSET con ] ].

rate_v1 := v_np_le &
 [ ORTH < "rate" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_rate_v_1_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
            PHON.ONSET con ] ].

reach_n1 := n_-_c_le &
 [ ORTH < "reach" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reach_n_1_rel",
	    LOCAL.CAT.HEAD.--BAREPP [ BP-IN -,
				      BP-INTO -,
				      BP-OUTOF -,
				      BP-WITHIN - ],
            PHON.ONSET con ] ].

read_n1 := n_-_c_le &
 [ ORTH < "read" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_read_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

read_v1 := v_np*_le &
 [ ORTH < "read" >,
   ALTS.MALPASS -,
   SYNSEM [ LOCAL.CAT [ HEAD [ --MAL3SG -,
			       TAM.SAME-PAST + ],
			VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--POSSRBST - ],
            LKEYS.KEYREL.PRED "_read_v_1_rel",
            PHON.ONSET con ] ].

read_v2 := v_pp*-cp_le &
 [ ORTH < "read" >,
   SYNSEM [ LOCAL.CAT.HEAD [ --MAL3SG -,
			     TAM.SAME-PAST + ],
            LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_read_v_1_rel" ],
            PHON.ONSET con ] ].

read_v3 := v_np-np_le &
 [ ORTH < "read" >,
   SYNSEM [ LOCAL.CAT.HEAD [ --MAL3SG -,
			     TAM.SAME-PAST + ],
            LKEYS.KEYREL.PRED "_read_v_1_rel",
            PHON.ONSET con ] ].

reading_n1 := n_pp_c-of_le &
 [ ORTH < "reading" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reading_n_of_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

;; But we do want |he realized his mistake|, so let's back off on flagging the
;; error in |*He realized the arrival|.
realize_v1 := v_np_le &
 [ ORTH < "realize" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_realize_v_1_rel",
            PHON.ONSET con ] ].

reason_v2 := v_-_le &
 [ ORTH < "reason" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reason_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

rebuke_v1 := v_-_le &
 [ ORTH < "rebuke" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rebuke_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

rebuke_v1_tr := v_np_le &
 [ ORTH < "rebuke" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rebuke_v_1_rel",
            PHON.ONSET con ] ].

recall_v1 := v_-_le &
 [ ORTH < "recall" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_recall_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

recall_v1_tr := v_np_le &
 [ ORTH < "recall" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_recall_v_1_rel",
	    LOCAL.CAT.HEAD.--NOCJCRD -,
            PHON.ONSET con ] ].

receive_v1 := v_np_le &
 [ ORTH < "receive" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_receive_v_1_rel",
            PHON.ONSET con ] ].

recess_v1 := v_-_le &
 [ ORTH < "recess" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_recess_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

recess_v1_tr := v_np_le &
 [ ORTH < "recess" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_recess_v_1_rel",
            PHON.ONSET con ] ].

reckon_v2 := v_np*_le &
 [ ORTH < "reckon" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reckon_v_1_rel",
	    LOCAL.CAT.HEAD.--NOCJCRD -,
            PHON.ONSET con ] ].

recital_n1 := n_-_c_le &
 [ ORTH < "recital" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_recital_n_1_rel",
            PHON.ONSET con ] ].

recollect_v1 := v_np*_le &
 [ ORTH < "recollect" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_recollect_v_1_rel",
	    LOCAL.CAT.HEAD.--NOCJCRD -,
            PHON.ONSET con ] ].

recommendation_n1 := n_-_mc-ns_le &
 [ ORTH < "recommendation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_recommendation_n_1_rel",
            PHON.ONSET con ] ].

record_n1 := n_pp_c-of_le &
 [ ORTH < "record" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_record_n_of_rel",
	    LOCAL.CAT.HEAD.--BAREPP [ BP-OFF -,
				      BP-ON - ],
            PHON.ONSET con ] ].

red_prd_a1 := aj_-_i-prd_le &
 [ ORTH < "red" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_red_a_1_rel",
	    LOCAL.CONT.HOOK.INDEX.E.TENSE untensed, 
            PHON.ONSET con ] ].

reds_n1 := n_-_c-pl_le &
 [ ORTH < "reds" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_red_n_1_rel",
            PHON.ONSET con ] ].

reek_v1 := v_-_le &
 [ ORTH < "reek" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reek_v_of_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

reform_v1 := v_-_le &
 [ ORTH < "reform" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reform_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

reform_v1_tr := v_np_le &
 [ ORTH < "reform" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reform_v_1_rel",
            PHON.ONSET con ] ].

refund_v2 := v_np*_le &
 [ ORTH < "refund" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_refund_v_1_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
            PHON.ONSET con ] ].

refuse_v1 := v_-_le &
 [ ORTH < "refuse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_refuse_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

refuse_v1_tr := v_np_le &
 [ ORTH < "refuse" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_refuse_v_1_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
            PHON.ONSET con ] ].

regress_v1 := v_-_le &
 [ ORTH < "regress" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_regress_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

regularly_adv1 := av_-_i-vp-pr_le &
 [ ORTH < "regularly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_regular_a_1_rel",
            PHON.ONSET con ] ].

regularly_adv2 := av_-_i-vp-po-nmb_le &
 [ ORTH < "regularly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_regular_a_1_rel",
            PHON.ONSET con ] ].

reimburse_v2 := v_np_le &
 [ ORTH < "reimburse" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_reimburse_v_for_rel",
            PHON.ONSET con ] ].

reindeer_n1 := n_-_c_le &
 [ ORTH < "reindeer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reindeer_n_1_rel",
   	    LOCAL.CAT cat_infl_nosuff &  [ HEAD.--BARE - ],
            PHON.ONSET con ] ].

relapse_v1 := v_-_le &
 [ ORTH < "relapse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_relapse_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

relay_v2 := v_np_le &
 [ ORTH < "relay" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_relay_v_1_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
            PHON.ONSET con ] ].

release_v1 := v_-_le &
 [ ORTH < "release" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_release_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

release_v1_tr := v_np_le &
 [ ORTH < "release" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_release_v_1_rel",
            PHON.ONSET con ] ].

remain_v3 := v_np_ntr_le &
 [ ORTH < "remain" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_remain_v_1_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL [ AGR.IND +,
	                                      CAT.HEAD.--BARE + ],
            PHON.ONSET con ] ].

remember_v1 := v_np*_le &
 [ ORTH < "remember" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_remember_v_from_rel",
	    LOCAL.CAT.HEAD.--NOCJCRD -,
            PHON.ONSET con ] ].

remember_v2 := v_cp_prop_le &
 [ ORTH < "remember" >,
   ALTS.TNS-ID -,
   SYNSEM [ LKEYS.KEYREL.PRED "_remember_v_from_rel",
            PHON.ONSET con ] ].

remind_v4 := v_np_le &
 [ ORTH < "remind" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_remind_v_1_rel",
	    LOCAL.CAT.HEAD.--CLRC -,
            PHON.ONSET con ] ].

remove_n1 := n_-_c-nocnh_le &
 [ ORTH < "remove" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_remove_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

rent_v1 := v_np_le &
 [ ORTH < "rent" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_rent_v_1_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
            PHON.ONSET con ] ].

repeat_v1 := v_-_le &
 [ ORTH < "repeat" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_repeat_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

repeat_v1_tr := v_np_le &
 [ ORTH < "repeat" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_repeat_v_1_rel",
            PHON.ONSET con ] ].

reply_v2 := v_-_le &
 [ ORTH < "reply" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reply_v_to_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

report_n1 := n_pp_c-ns-of_le &
 [ ORTH < "report" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_report_n_of_rel",
	    LOCAL.CAT.HEAD.--BAREPP [ BP-AT -,
				      BP-ON - ],
            PHON.ONSET con ] ].

report_v2 := v_-_le &
 [ ORTH < "report" >,
   SYNSEM [ LOCAL.CAT.HEAD [ --MAL3SG -,
			     --SAMENV + ],
            LKEYS.KEYREL.PRED "_report_v_to_rel",
            PHON.ONSET con ] ].
	    
report_v2_tr := v_np_le &
 [ ORTH < "report" >,
   SYNSEM [ LOCAL.CAT.HEAD.--MAL3SG -,
            LKEYS.KEYREL.PRED "_report_v_to_rel",
            PHON.ONSET con ] ].
	    
repose_v2 := v_-_le &
 [ ORTH < "repose" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_repose_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

request_n1 := n_pp_c_le &
 [ ORTH < "request" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_request_n_for_rel" ],
	    LOCAL.CAT.HEAD.--BAREPP [ BP-ON -,
				      BP-UPON - ],
            PHON.ONSET con ] ].

request_v1 := v_np_le &
 [ ORTH < "request" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_request_v_1_rel",
	    LOCAL.CAT.HEAD.--NOCJCRD -,
            PHON.ONSET con ] ].

;; In general, verbs taking a subjunctive CP should constraint the alternate
;; indic-CP entry to avoid --MAL3SG
;;
request_v5 := v_cp_prop_le &
 [ ORTH < "request" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_request_v_1_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--MAL3SG -,
            PHON.ONSET con ] ].

reserve_v1 := v_-_le &
 [ ORTH < "reserve" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reserve_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

reserve_v1_tr := v_np_le &
 [ ORTH < "reserve" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reserve_v_1_rel",
            PHON.ONSET con ] ].

resolve_v1 := v_-_le &
 [ ORTH < "resolve" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_resolve_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

resolve_v1_tr := v_np_le &
 [ ORTH < "resolve" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_resolve_v_1_rel",
            PHON.ONSET con ] ].

resort_n1 := n_-_mc_le &
 [ ORTH < "resort" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_resort_n_1_rel",
	    LOCAL.CAT.HEAD.--BAREPP.BP-OF -,
            PHON.ONSET con ] ].

rest_n1 := n_-_c-ns_le &
 [ ORTH < "rest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rest_n_of_rel",
            LOCAL [ CAT.HEAD.--BARE -,
	            AGR.PNG png-reg ],
            PHON.ONSET con ] ].

rest_n3 := n_-_m_le &
 [ ORTH < "rest" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rest_n_1_rel",
            LOCAL.CAT.HEAD.--MALCM -,
            PHON.ONSET con ] ].

result_n2 := n_cp_c-optc_le &
 [ ORTH < "result" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_result_n_of_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD comp,
            PHON.ONSET con ] ].

retort_v2 := v_-_le &
 [ ORTH < "retort" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_retort_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

retreat_v1 := v_-_le &
 [ ORTH < "retreat" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_retreat_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

retreat_v1_tr := v_np_le &
 [ ORTH < "retreat" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_retreat_v_1_rel",
            PHON.ONSET con ] ].

;; Remove pp_dir complement so |return to| and |go back to| both treat to-PP
;; as stative, not directional (we don't have a type v_p-pp_dir_le).
;;
return_v2 := v_-_le &
 [ ORTH < "return" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_return_v_1_rel",
            PHON.ONSET con ] ].

;; Pretend this can't passivize, to avoid unwanted preferred parse for 
;; |The Brahman and the jackal returned to the cage|
return_v5 := v_np_ntr_le &
 [ ORTH < "return" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_return_v_1_rel",
            PHON.ONSET con ] ].

reverse_v1 := v_-_le &
 [ ORTH < "reverse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reverse_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

reverse_v1_tr := v_np_le &
 [ ORTH < "reverse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_reverse_v_1_rel",
            PHON.ONSET con ] ].

review_v1 := v_-_le &
 [ ORTH < "review" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_review_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

review_v1_tr := v_np_le &
 [ ORTH < "review" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_review_v_1_rel",
            PHON.ONSET con ] ].

revolt_v1 := v_-_le &
 [ ORTH < "revolt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_revolt_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

revolution_n1 := n_pp_mc-of_le &
 [ ORTH < "revolution" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_revolution_n_of_rel",
            PHON.ONSET con ],
   ALTS.NONINITCAP - ].

revolutionary_a1 := aj_-_i-cap_le &
 [ ORTH < "revolutionary" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_revolutionary_a_1_rel",
            PHON.ONSET con ] ].

rhyme_v1 := v_-_unacc_le &
 [ ORTH < "rhyme" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rhyme_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

ribbon_n1 := n_-_c_le &
 [ ORTH < "ribbon" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ribbon_n_1_rel",
            PHON.ONSET con ] ].

rid_of_v1 := v_np-pp_e_le &
 [ ORTH < "rid" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_rid_v_of_rel" ],
	    LOCAL.CAT.HEAD.TAM.SAME-PAST +,
            PHON.ONSET con ] ].

ride_n1 := n_-_c_le &
 [ ORTH < "ride" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ride_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

ride_v1 := v_np_noger_le &
 [ ORTH < "ride" >,
   SYNSEM [ LOCAL.CAT.HEAD.--MAL3SG -,
            LKEYS.KEYREL.PRED "_ride_v_1_rel",
            PHON.ONSET con ] ].

ride_v2 := v_pp*_dir_le &
 [ ORTH < "ride" >,
   SYNSEM [ LOCAL.CAT.HEAD.--MAL3SG -,
            LKEYS.KEYREL.PRED "_ride_v_1_rel",
            PHON.ONSET con ] ].

right_a1 := aj_-_i-ndpt_le &
 [ ORTH < "right" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_right_a_2_rel",
            LOCAL.CAT.HEAD.--SBRD na,
            PHON.ONSET con ] ].

right_adv1 := av_-_i-vp-po_le &
 [ ORTH < "right" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_right_a_2_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

ring_nounif_n1 := n_-_pn-nounif_le &
 [ ORTH < "Ring" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Ring",
            PHON.ONSET con ] ].

ring_v3 := v_-_unacc_le &
 [ ORTH < "ring" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ring_v_1_rel",
	    LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

ringmaster_n1 := n_-_mc_le &
 [ ORTH < "ringmaster" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ringmaster_n_1_rel",
            PHON.ONSET con ] ].

;; |the rise |
rise_n1 := n_pp_c-of-obl_le &
 [ ORTH < "rise" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rise_n_of_rel",
            PHON.ONSET con ] ].

rise_n2 := n_pp_c-obl_le &
 [ ORTH < "rise" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_rise_n_of_rel" ],
            PHON.ONSET con ] ].

;; 2020-12-03 - Avoid "[looking at this] rose"
rise_v2 := v_pp_unacc_le &
 [ ORTH < "rise" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rise_v_1_rel",
	    LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CAT.HEAD basic_noun,
            PHON.ONSET con ] ].

risk_n1 := n_pp_c-ns-of_le &
 [ ORTH < "risk" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_risk_n_of_rel",
            LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

risk_n3 := n_-_m-nocnh_le &
 [ ORTH < "risk" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_risk_n_of_rel",
            LOCAL.CAT.HEAD.--MALCM -,
            PHON.ONSET con ] ].

river_n1 := n_-_c-maycap_le &
 [ ORTH < "river" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_river_n_1_rel",
            LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

road_n1 := n_-_c-ns-maycap_le &
 [ ORTH < "road" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_road_n_1_rel",
            LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

road_nounif_n1 := n_-_pn-nounif_le &
 [ ORTH < "Road" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Road",
            PHON.ONSET con ] ].

road_nounif_n2 := n_-_pn-nounif_le &
 [ ORTH < "Road", "." >,
   SYNSEM [ LKEYS.KEYREL.CARG "Road",
            PHON.ONSET con ] ].

roar_v2 := v_np*_le &
 [ ORTH < "roar" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_roar_v_1_rel",
	    LOCAL.CAT.HEAD.--NOCJCRD -,
            PHON.ONSET con ] ].

roast_v1 := v_-_unacc_le &
 [ ORTH < "roast" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_roast_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

robin_n2 := n_-_c_le &
 [ ORTH < "robin" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_robin_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,   
            PHON.ONSET con ] ].

rock_v1 := v_-_le &
 [ ORTH < "rock" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rock_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

rock_v1_tr := v_np_le &
 [ ORTH < "rock" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rock_v_1_rel",
            PHON.ONSET con ] ].

role_n1 := n_pp_c-of_le &
 [ ORTH < "role" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_role_n_of_rel",
            LOCAL.CAT [ HEAD.--OFMOD -,
			VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--BARE - ],
            PHON.ONSET con ] ].

;; DPF 2018-07-24 - Avoid splitting |roller coaster| across clause boundaries
roller_n1 := n_-_c-cpd_le &
 [ ORTH < "roller" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_roller_n_1_rel",
            PHON.ONSET con ] ].

room_n1 := n_-_c-ns_le &
 [ ORTH < "room" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_room_n_unit_rel",
   	    LOCAL [ CAT.HEAD.--BARE -,   
	            CONT.HOOK.INDEX.SORT place ],
            PHON.ONSET con ] ].

root-n1 := n_-_c-ed_le &
 [ ORTH < "root" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_root_n_1_rel",
	    LOCAL.CAT.HEAD.--BAREPP.BP-AT -,
            PHON.ONSET con ] ].

;; Help with ranking problem for
;; "As the consumption of junk food rose, children gained weight."
rose_n1 := n_-_c_le &
 [ ORTH < "rose" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rose_n_1_rel",
	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

rot_v2 := v_-_unacc_le &
 [ ORTH < "rot" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rot_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

round_n1 := n_pp_c-of_le &
 [ ORTH < "round" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_round_n_of_rel",
	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

route_n1 := n_-_c-ns_le &
 [ ORTH < "route" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_route_n_1_rel",
   	    LOCAL.CAT.HEAD.--BAREPP.BP-ON -,
            PHON.ONSET con ] ].

routine_a1 := aj_-_i_le &
 [ ORTH < "routine" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_routine_a_1_rel",
            LOCAL.CAT.HEAD.--SBRD -,
            PHON.ONSET con ] ].

rowboat_n1 := n_-_c-transp_le &
 [ ORTH < "rowboat" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rowboat_n_1_rel",
            PHON.ONSET con ] ].

ruin_v1 := v_np_le &
 [ ORTH < "ruin" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ruin_v_1_rel",
            PHON.ONSET con ] ].

;; Block robust "These [rules suit] for all occasions"
rule_n1 := n_-_mc-ns_le &
 [ ORTH < "rule" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rule_n_of_rel",
	    LOCAL.CAT.HEAD.--MALPLCPD -,
            PHON.ONSET con ] ].

rule_v1 := v_-_le &
 [ ORTH < "rule" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rule_v_1_rel",
            LOCAL.CAT.HEAD [ --MALN3SG -,
			     --SAMENV + ],
            PHON.ONSET con ] ].

rule_v1_tr := v_np_le &
 [ ORTH < "rule" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rule_v_1_rel",
            LOCAL.CAT.HEAD [ --MALN3SG -,
			     --NOCJCRD - ],
            PHON.ONSET con ] ].

rule_v3 := v_cp_prop_le &
 [ ORTH < "rule" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rule_v_1_rel",
            LOCAL.CAT.HEAD.--MALN3SG -,
            PHON.ONSET con ] ].

;; DPF 13-03-14 - NORM norm_rel prevents e.g. |short-run profit|, so remove.
;; DPF 2018-03-12 - Removed LPERIPH +, no longer compatible with type
;;
run_n1 := n_pp_c-of_le &
 [ ORTH < "run" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_run_n_of_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

;; Block robust |run over it|
run_over_v1 := v_p-np_le &
 [ ORTH < "run" >,
   ALTS.PRONPART -,
   SYNSEM [ LKEYS [ --COMPKEY _over_p_sel_rel,
                    KEYREL.PRED "_run_v_over_rel" ],
            PHON.ONSET con ] ].

;; Block |park run up|
run_up_v1 := v_p-np_le &
 [ ORTH < "run" >,
   ALTS.PASSIVE -,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_run_v_up_rel" ],
            PHON.ONSET con ] ].

;; Block |park run up|
;; Added dubious SAME-PAST + to block robust "has run away", where we really
;; want something like a feature SAME_PART.  Maybe FIX someday.
run_v3 := v_pp*_dir_le &
 [ ORTH < "run" >,
   ALTS.PASSIVE -,
   SYNSEM [ LKEYS.KEYREL.PRED "_run_v_1_rel",
	    LOCAL.CAT.HEAD.TAM.SAME-PAST +,
            PHON.ONSET con ] ].

rupture_v1 := v_-_le &
 [ ORTH < "rupture" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rupture_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

rush_v2 := v_np_noger_le &
 [ ORTH < "rush" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_rush_v_1_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
            PHON.ONSET con ] ].

rust_v1 := v_-_unacc_le &
 [ ORTH < "rust" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rust_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

rustle_v1 := v_-_unacc_le &
 [ ORTH < "rustle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_rustle_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

s_lower_np1 := n_-_pn-nounif_le &
 [ ORTH < "s" >,
   SYNSEM [ LKEYS.KEYREL.CARG "S",
            PHON.ONSET voc ] ].

saber_toothed_a1 := aj_-_i_le &
 [ ORTH < "saber", "-", "toothed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_saber-toothed_a_1_rel",
            PHON.ONSET con ] ].

sacrifice_v1 := v_-_le &
 [ ORTH < "sacrifice" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sacrifice_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

sacrifice_v1_tr := v_np_le &
 [ ORTH < "sacrifice" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sacrifice_v_1_rel",
            PHON.ONSET con ] ].

safari_n1 := n_-_c_le &
 [ ORTH < "safari" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_safari_n_1_rel",
	    LOCAL.CAT.HEAD.--BAREPP.BP-ON -,
            PHON.ONSET con ] ].

safe_n1 := n_-_c_le &
 [ ORTH < "safe" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_safe_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

sag_v1 := v_-_le &
 [ ORTH < "sag" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sag_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

sailboat_n1 := n_-_c-transp_le &
 [ ORTH < "sailboat" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sailboat_n_1_rel",
            PHON.ONSET con ] ].

sailor_n1 := n_-_c-msc_le &
 [ ORTH < "sailor" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sailor_n_1_rel",
            PHON.ONSET con ] ].

saint_nounif_n1 := n_-_pn-nounif_le &
 [ ORTH < "Saint" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Saint",
            PHON.ONSET con ] ].

sale_n1 := n_pp_mc-of_le &
 [ ORTH < "sale" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sale_n_of_rel",
	    LOCAL.CAT.HEAD.--BAREPP [ BP-FOR -,
				      BP-ON - ],
            PHON.ONSET con ] ].

salt_v1 := v_-_le &
 [ ORTH < "salt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_salt_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

salt_v1_tr := v_np_le &
 [ ORTH < "salt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_salt_v_1_rel",
            PHON.ONSET con ] ].

salvage_v1 := v_-_le &
 [ ORTH < "salvage" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_salvage_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

salvage_v1_tr := v_np_le &
 [ ORTH < "salvage" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_salvage_v_1_rel",
            PHON.ONSET con ] ].

sand_v1 := v_-_le &
 [ ORTH < "sand" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sand_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

sand_v1_tr := v_np_le &
 [ ORTH < "sand" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sand_v_1_rel",
            PHON.ONSET con ] ].

saturday_n2 := n_-_c-dow_le &
 [ ORTH < "Sat" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Sat",
            PHON.ONSET con ],
   TOKENS.+LAST.+CLASS.+CASE capitalized ].

saturday_n3 := n_-_c-dow_le &
 [ ORTH < "Sat." >,
   SYNSEM [ LKEYS.KEYREL.CARG "Sat",
            PHON.ONSET con ],
   TOKENS.+LAST.+CLASS.+CASE capitalized ].

save_v1 := v_np_le &
 [ ORTH < "save" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_save_v_1_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
            PHON.ONSET con ] ].

save_v2 := v_np-np_only_le &
 [ ORTH < "save" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_save_v_1_rel",
	    LOCAL.CAT.VAL.COMPS < [ ], [ LOCAL.CAT.HEAD.--BARED - ] >,
            PHON.ONSET con ] ].

say_n1 := n_-_mc-ntc_le &
 [ ORTH < "say" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_say_n_1_rel",
            LOCAL [ AGR.PNG.PN 3s,
		    CAT.VAL.SPR.FIRST.LOCAL.CAT.HEAD.--POSSRBST - ],
            PHON.ONSET con ] ].

say_v1 := v_-_le &
 [ ORTH < "say" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_say_v_1_rel",
	    LOCAL.CAT.HEAD [ --HAVEBE -,
			     --SAMENV + ],
            PHON.ONSET con ] ].

say_v1_tr := v_np_ntr_le &
 [ ORTH < "say" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_say_v_1_rel",
	    LOCAL.CAT.HEAD.--HAVEBE -,
            PHON.ONSET con ] ].

scale_v1 := v_-_le &
 [ ORTH < "scale" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_scale_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

scale_v1_tr := v_np_le &
 [ ORTH < "scale" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_scale_v_1_rel",
            PHON.ONSET con ] ].

scaly_a1 := aj_-_i_le &
 [ ORTH < "scaly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_scaly_a_1_rel",
            LOCAL.CAT.HEAD.--SBRD -,
            PHON.ONSET con ] ].

;; DPF 2017-09-28 - Avoid robust was/had for |I was scared chasing the mouse|
;;
scare_v1 := v_np_le &
 [ ORTH < "scare" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_scare_v_1_rel",
            LOCAL.CAT.VAL.COMPS.FIRST.--SIND.SORT norm-entity-or-event,
            PHON.ONSET con ] ].

scary_a3 := aj_pp-vp_i-it_le &
 [ ORTH < "scary" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_scary_a_for_rel",
            PHON.ONSET con ],
   ALTS.AVIP - ].

scenery_n1 := n_-_m_le &
 [ ORTH < "scenery" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_scenery_n_1_rel",
            PHON.ONSET con ] ].

schedule_n1 := n_-_c-ns_le &
 [ ORTH < "schedule" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_schedule_n_1_rel",
	    LOCAL.CAT.HEAD.--BAREPP [ BP-AHEADOF -,
				      BP-BEHIND -,
				      BP-ON - ],
            PHON.ONSET con ] ].

school_n2 := n_-_c-maycap_le &
 [ ORTH < "school" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_school_n_1_rel",
            LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

score_v1 := v_np*_le &
 [ ORTH < "score" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_score_v_1_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.--SIND.SORT norm-entity-or-event,
            PHON.ONSET con ] ].

scrap_v1 := v_-_le &
 [ ORTH < "scrap" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_scrap_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

scrap_v1_tr := v_np_le &
 [ ORTH < "scrap" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_scrap_v_1_rel",
            PHON.ONSET con ] ].

scratch_v2 := v_-_le &
 [ ORTH < "scratch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_scratch_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

scratch_v2_tr := v_np_le &
 [ ORTH < "scratch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_scratch_v_1_rel",
            PHON.ONSET con ] ].

scream_v1 := v_-_le &
 [ ORTH < "scream" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_scream_v_1_rel",
            PHON.ONSET con ] ].

scrub_v2 := v_np-prd_oeq_le &
 [ ORTH < "scrub" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_scrub_v_1_rel",
	    LOCAL.CAT.HEAD.--SBRDMOD -,
            PHON.ONSET con ] ].

sea_n1 := n_pp_c-of_le &
 [ ORTH < "sea" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sea_n_of_rel",
	    LOCAL.CAT.HEAD.--BAREPP [ BP-AT -,
				      BP-TO - ],
            PHON.ONSET con ] ].

seat_v2 := v_np-pp_prop_le &
 [ ORTH < "seat" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_seat_v_1_rel",
            LOCAL.CAT.VAL.COMPS.FIRST.NONLOC.SLASH.LIST < >,
            PHON.ONSET con ] ].

second_n1 := n_-_c-nday_le &
 [ ORTH < "second" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_second_n_1_rel",
            LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

second_adv1 := av_-_i-vp_le &
 [ ORTH < "second" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_second_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

second_prize_n1 := n_-_m_le &
 [ ORTH < "second", "prize" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_second+prize_n_1_rel",
            PHON.ONSET con ] ].

second_place_n1 := n_-_m_le &
 [ ORTH < "second", "place" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_second+place_n_1_rel",
            PHON.ONSET con ] ].

section_n1 := n_pp_c_le &
 [ ORTH < "section" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_section_n_of_rel" ],
            LOCAL.CAT [ HEAD.--OFMOD -,
			VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--BARE - ],
            PHON.ONSET con ] ].

see_of_v1 := v_np-pp_e_le &
 [ ORTH < "see" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_see_v_of_rel" ],
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
            PHON.ONSET con ] ].

see_v2 := v_cp_prop_le &
 [ ORTH < "see" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_see_v_1_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--MAL3SG -,
            PHON.ONSET con ] ].

; Also allow WH-sentential complements
see_v8 := v_cp_fin-inf-q_le &
 [ ORTH < "see" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_see_v_1_rel",
            LOCAL.CAT.VAL.KCMP.LOCAL.CAT.VAL.SUBJ < >,
            PHON.ONSET con ] ].

sell_v3 := v_np*_le &
 [ ORTH < "sell" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_sell_v_1_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
            PHON.ONSET con ] ].

send_v1 := v_np_le &
 [ ORTH < "send" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_send_v_1_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
            PHON.ONSET con ] ].

send_v2 := v_np-np_le &
 [ ORTH < "send" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_send_v_1_rel",
            PHON.ONSET con ] ].

send_v7 := v_np-pp_prop_le &
 [ ORTH < "send" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_send_v_1_rel",
            LOCAL.CAT.VAL.COMPS.REST.FIRST.--MIN dir_rel,
            PHON.ONSET con ] ].

sense_n1 := n_-_c-ns_le &
 [ ORTH < "sense" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sense_n_of_rel",
            PHON.ONSET con ] ].

sense_n1_m := n_-_m_le &
 [ ORTH < "sense" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sense_n_of_rel",
            PHON.ONSET con ] ].

sequence_n1 := n_pp_c-of_le &
 [ ORTH < "sequence" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sequence_n_of_rel",
	    LOCAL.CAT.HEAD.--BAREPP [ BP-IN -,
				      BP-OUTOF - ],
            PHON.ONSET con ] ].

serve_v1 := v_np*_le &
 [ ORTH < "serve" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_serve_v_1_rel",
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
            PHON.ONSET con ] ].

session_n1 := n_-_c_le &
 [ ORTH < "session" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_session_n_1_rel",
	    LOCAL.CAT.HEAD.--BAREPP [ BP-IN -,
				      BP-OUTOF - ],
            PHON.ONSET con ] ].

set_a1 := aj_-_i_le &
 [ ORTH < "set" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_set_a_1_rel",
            LOCAL.CAT.HEAD.--SBRD -,
            PHON.ONSET con ] ].

set_n1 := n_-_c_le &
 [ ORTH < "set" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_set_n_of_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

set_about_v1 := v_p-vp_seq_le &
 [ ORTH < "set" >,
   SYNSEM [ LKEYS [ --COMPKEY _about_p_sel_rel,
                    KEYREL.PRED "_set_v_about_rel" ],
	    LOCAL.CAT.HEAD.TAM.SAME-PAST +,
            PHON.ONSET con ] ].

set_about_v2 := v_pp_e_le &
 [ ORTH < "set" >,
   SYNSEM [ LKEYS [ --COMPKEY _about_p_sel_rel,
                    KEYREL.PRED "_set_v_about_rel" ],
	    LOCAL.CAT.HEAD.TAM.SAME-PAST +,
            PHON.ONSET con ] ].

set_apart_v1 := v_p-np_le &
 [ ORTH < "set" >,
   SYNSEM [ LKEYS [ --COMPKEY _apart_a_sel_rel,
                    KEYREL.PRED "_set_v_apart_rel" ],
	    LOCAL.CAT.HEAD.TAM.SAME-PAST +,
            PHON.ONSET con ] ].

set_aside_v1 := v_p-np_le &
 [ ORTH < "set" >,
   SYNSEM [ LKEYS [ --COMPKEY _aside_p_sel_rel,
                    KEYREL.PRED "_set_v_aside_rel" ],
	    LOCAL.CAT.HEAD.TAM.SAME-PAST +,
            PHON.ONSET con ] ].

set_forth_v1 := v_p-np_le &
 [ ORTH < "set" >,
   SYNSEM [ LKEYS [ --COMPKEY _forth_p_sel_rel,
                    KEYREL.PRED "_set_v_forth_rel" ],
	    LOCAL.CAT.HEAD.TAM.SAME-PAST +,
            PHON.ONSET con ] ].

set_in_v1 := v_p_le &
 [ ORTH < "set" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_sel_rel,
                    KEYREL.PRED "_set_v_in_rel" ],
	    LOCAL.CAT.HEAD.TAM.SAME-PAST +,
            PHON.ONSET con ] ].

set_off_v1 := v_p-np_le &
 [ ORTH < "set" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_set_v_off_rel" ],
	    LOCAL.CAT.HEAD.TAM.SAME-PAST +,
            PHON.ONSET con ] ].

set_off_v2 := v_p_le &
 [ ORTH < "set" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_set_v_off_rel" ],
	    LOCAL.CAT.HEAD.TAM.SAME-PAST +,
            PHON.ONSET con ] ].

set_out_v1 := v_p-vp_seq_le &
 [ ORTH < "set" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_set_v_out-aim_rel" ],
	    LOCAL.CAT.HEAD.TAM.SAME-PAST +,
            PHON.ONSET con ] ].

set_out_v2 := v_p_le &
 [ ORTH < "set" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_set_v_out_rel" ],
	    LOCAL.CAT.HEAD.TAM.SAME-PAST +,
            PHON.ONSET con ] ].

set_out_v3 := v_p-np_le &
 [ ORTH < "set" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_set_v_out_rel" ],
	    LOCAL.CAT.HEAD.TAM.SAME-PAST +,
            PHON.ONSET con ] ].

set_up_v1 := v_p-np_le &
 [ ORTH < "set" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_set_v_up_rel" ],
	    LOCAL.CAT.HEAD.TAM.SAME-PAST +,
            PHON.ONSET con ] ].

set_up_v2 := v_p_le &
 [ ORTH < "set" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_set_v_up_rel" ],
	    LOCAL.CAT.HEAD.TAM.SAME-PAST +,
            PHON.ONSET con ] ].

set_v1 := v_np-pp_prop_le &
 [ ORTH < "set" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_set_v_1_rel",
	    LOCAL.CAT.HEAD.TAM.SAME-PAST +,
            PHON.ONSET con ] ].

set_v1_i := v_nb_idm_le &
 [ ORTH < "set" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_set_v_i_rel",
	    LOCAL.CAT.HEAD.TAM.SAME-PAST +,
            PHON.ONSET con ] ].

set_v2 := v_np*_le &
 [ ORTH < "set" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_set_v_1_rel",
	    LOCAL.CAT.HEAD.TAM.SAME-PAST +,
            PHON.ONSET con ] ].

set_v3 := v_np-ap_oeq_le &
 [ ORTH < "set" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_set_v_1_rel",
	    LOCAL.CAT.HEAD.TAM.SAME-PAST +,
            PHON.ONSET con ] ].

sevenfold_adv1 := av_-_i-vp-po_le &
 [ ORTH < "sevenfold" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sevenfold_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

sew_v1 := v_np*_le &
 [ ORTH < "sew" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_sew_v_1_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
            PHON.ONSET con ] ].

shade_n1 := n_-_m_le &
 [ ORTH < "shade" >,
   ALTS.PLMASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_shade_n_1_rel",
            PHON.ONSET con ] ].

shade_n2 := n_pp_c-obl_le &
 [ ORTH < "shade" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_shade_n_of_rel" ],
	    LOCAL.CAT.VAL.COMPS.FIRST.NONLOC.SLASH.LIST < >,
            PHON.ONSET con ] ].

;; Comment out, since we want "keeps me in good shape"
#|
shape_n1 := n_-_c-ed_le &
 [ ORTH < "shape" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shape_n_1_rel",
            PHON.ONSET con ] ].
|#

shampoo_v1 := v_-_le &
 [ ORTH < "shampoo" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shampoo_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

shampoo_v1_tr := v_np_le &
 [ ORTH < "shampoo" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shampoo_v_1_rel",
            PHON.ONSET con ] ].

shed_v1 := v_np*_le &
 [ ORTH < "shed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shed_v_1_rel",
	    LOCAL.CAT.HEAD.TAM.SAME-PAST +,
            PHON.ONSET con ] ].

sheep_n1 := n_-_c_le &
 [ ORTH < "sheep" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sheep_n_1_rel",
   	    LOCAL.CAT cat_infl_nosuff &  [ HEAD.--BARE - ],
            PHON.ONSET con ] ].

sheet_v1 := v_-_le &
 [ ORTH < "sheet" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sheet_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

shepherd_n1 := n_-_c-msc_le &
 [ ORTH < "shepherd" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shepherd_n_1_rel",
            PHON.ONSET con ] ].

shin_v3 := v_np_le &
 [ ORTH < "shin" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shin_v_1_rel",
            LOCAL.CAT.VAL.COMPS.FIRST canonical_synsem,
            PHON.ONSET con ] ].

ship_v2 := v_np*_le &
 [ ORTH < "ship" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_ship_v_cause_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
            PHON.ONSET con ] ].

shock_v1 := v_-_le &
 [ ORTH < "shock" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shock_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

shock_v1_tr := v_np_le &
 [ ORTH < "shock" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shock_v_1_rel",
            PHON.ONSET con ] ].

shoot_v1 := v_np_noger_le &
 [ ORTH < "shoot" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_shoot_v_1_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
            PHON.ONSET con ] ].

shop_v1 := v_-_le &
 [ ORTH < "shop" >,
   ALTS.VADJ -,
   SYNSEM [ LKEYS.KEYREL.PRED "_shop_v_buy_rel",
            PHON.ONSET con ] ].

shore_n1 := n_-_mc_le &
 [ ORTH < "shore" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shore_n_1_rel",
   	    LOCAL.CAT.HEAD.--BAREPP.BP-ON -,
            PHON.ONSET con ] ].

short_term_adv1 := av_-_i-vp_le &
 [ ORTH < "short", "-", "term" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_short-term_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

short_term_adv2 := av_-_i-vp_le &
 [ ORTH < "short", "term" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_short-term_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

shortage_n1 := n_pp_c-of_le &
 [ ORTH < "shortage" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shortage_n_of_rel",
            PHON.ONSET con ] ].

shot_adj := aj_-_i_le &
 [ ORTH < "shot" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shot_a_1_rel",
	    LOCAL.CAT.HEAD.--MALSBRD -,
            PHON.ONSET con ] ].

shot_n1 := n_-_c-nochd_le &
 [ ORTH < "shot" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shot_n_of_rel",
            PHON.ONSET con ] ].

shot_n2 := n_pp_c-obl_le &
 [ ORTH < "shot" >,
   SYNSEM [ LKEYS [ KEYREL.PRED "_shot_n_of_rel",
		    --COMPKEY _of_p_sel_rel ],
            PHON.ONSET con ] ].

show_n1 := n_pp_c-of_le &
 [ ORTH < "show" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_show_n_of_rel",
   	    LOCAL.CAT.HEAD.--BAREPP.BP-FOR -,
            PHON.ONSET con ] ].

show_v2 := v_np*_le &
 [ ORTH < "show" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_show_v_1_rel",
	    LOCAL.CAT [ HEAD.--CLRC -,
			VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--POSSRBST - ],
            PHON.ONSET con ] ].

shrug_v1 := v_np*_le &
 [ ORTH < "shrug" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shrug_v_1_rel",
	    LOCAL.CAT.HEAD.--NOCJCRD -,
            PHON.ONSET con ] ].

shut_down_v1 := v_p-np_le &
 [ ORTH < "shut" >,
   SYNSEM [ LKEYS [ --COMPKEY _down_p_sel_rel,
                    KEYREL.PRED "_shut_v_down_rel" ],
	    LOCAL.CAT.HEAD.TAM.SAME-PAST +,
            PHON.ONSET con ] ].

shut_down_v2 := v_p_le &
 [ ORTH < "shut" >,
   SYNSEM [ LKEYS [ --COMPKEY _down_p_sel_rel,
                    KEYREL.PRED "_shut_v_down_rel" ],
	    LOCAL.CAT.HEAD.TAM.SAME-PAST +,
            PHON.ONSET con ] ].

shut_off_v1 := v_p-np_le &
 [ ORTH < "shut" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_shut_v_off_rel" ],
	    LOCAL.CAT.HEAD.TAM.SAME-PAST +,
            PHON.ONSET con ] ].

shut_off_v2 := v_p_le &
 [ ORTH < "shut" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_shut_v_off_rel" ],
	    LOCAL.CAT.HEAD.TAM.SAME-PAST +,
            PHON.ONSET con ] ].

shut_out_v1 := v_p-np_le &
 [ ORTH < "shut" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_shut_v_out_rel" ],
	    LOCAL.CAT.HEAD.TAM.SAME-PAST +,
            PHON.ONSET con ] ].

shut_up_v1 := v_p-np_le &
 [ ORTH < "shut" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_shut_v_up_rel" ],
	    LOCAL.CAT.HEAD.TAM.SAME-PAST +,
            PHON.ONSET con ] ].

shut_up_v2 := v_p_le &
 [ ORTH < "shut" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_shut_v_up_rel" ],
	    LOCAL.CAT.HEAD.TAM.SAME-PAST +,
            PHON.ONSET con ] ].

shut_v1 := v_np*_le &
 [ ORTH < "shut" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shut_v_1_rel",
	    LOCAL.CAT.HEAD.TAM.SAME-PAST +,
            PHON.ONSET con ] ].

;; Block |monkeys in the park shuttles|
shuttle_n1 := n_-_c-nochd_le &
 [ ORTH < "shuttle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shuttle_n_1_rel",
            PHON.ONSET con ] ].

;; Block transitive for now, to avoid wrong top-ranked parse for
;; |Monkeys in the park shuttled back and forth between the trees|
;;
shuttle_v1 := v_-_le &
 [ ORTH < "shuttle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shuttle_v_1_rel",
            PHON.ONSET con ] ].

;; Okay as depictive
;;
sick_a1 := aj_pp_i-er-sbrd_le &
 [ ORTH < "sick" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_sick_a_of_rel" ],
            PHON.ONSET con ] ].

signal_v1 := v_-_le &
 [ ORTH < "signal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_signal_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

signal_v1_tr := v_np_le &
 [ ORTH < "signal" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_signal_v_1_rel",
	    LOCAL.CAT.HEAD.--NOCJCRD -,
            PHON.ONSET con ] ].

similarly := av_-_i-vp-po_le &
 [ ORTH < "similarly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_similar_a_to_rel",
            PHON.ONSET con ] ].

sin_v1 := v_-_le &
 [ ORTH < "sin" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sin_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

;; Block filler-head |since we arrived|
since_pp := pp_-_i-nmb_le &
 [ ORTH < "since" >,
   SYNSEM [ LKEYS.KEYREL.PRED _since_p_rel,
            PHON.ONSET con ] ].

sing_v1 := v_np*_le &
 [ ORTH < "sing" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_sing_v_1_rel",
	    LOCAL.CAT [ VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
			HEAD.--NOCJCRD - ],
            PHON.ONSET con ] ].

sir_n1 := n_-_pn-maycap_le &
 [ ORTH < "Sir" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Sir",
            PHON.ONSET con ] ].

sir_n2 := n_-_c_le &
 [ ORTH < "sir" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sir_n_1_rel",
            LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

sister_n1 := n_pp_c-of-fem_le &
 [ ORTH < "sister" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sister_n_of_rel",
            PHON.ONSET con ] ].

site_n1 := n_-_c_le &
 [ ORTH < "site" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_site_n_1_rel",
	    LOCAL.CAT.HEAD.--BAREPP.BP-ON -,
            PHON.ONSET con ] ].

sixfold_adv1 := av_-_i-vp-po_le &
 [ ORTH < "sixfold" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sixfold_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

sizzle_v1 := v_-_le &
 [ ORTH < "sizzle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sizzle_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

skew_v2 := v_-_unacc_le &
 [ ORTH < "skew" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_skew_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

;; |*ski they|
ski_v2 := v_np_noger_le &
 [ ORTH < "ski" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ski_v_1_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.MINORS.NORM norm_rel,
            PHON.ONSET con ] ].

skunk_n1 := n_-_c_le &
 [ ORTH < "skunk" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_skunk_n_1_rel",
            PHON.ONSET con ] ].

;; Also constrain to NORM norm_rel to avoid spurious robust analysis for
;; |They want to go sleep|
sleep_n1 := n_-_m_le &
 [ ORTH < "sleep" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sleep_n_1_rel",
            LOCAL.CAT.HEAD.MINORS.NORM norm_rel,
            PHON.ONSET con ] ].

sleep_v1 := v_-_le &
 [ ORTH < "sleep" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sleep_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

slit_v1 := v_np_le &
 [ ORTH < "slit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_slit_v_1_rel",
	    LOCAL.CAT.HEAD.TAM.SAME-PAST +,
            PHON.ONSET con ] ].

slobber_v1 := v_-_le &
 [ ORTH < "slobber" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_slobber_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

slop_v2 := v_-_le &
 [ ORTH < "slop" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_slop_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

slovenly_a1 := aj_-_i_le &
 [ ORTH < "slovenly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_slovenly_a_1_rel",
            LOCAL.CAT.HEAD.--SBRD -,
            PHON.ONSET con ] ].

;; Need intransitive for "growth will slow"
#|
slow_v1 := v_np_le &
 [ ORTH < "slow" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_slow_v_1_rel",
            PHON.ONSET con ] ].
|#

slumber_v1 := v_-_le &
 [ ORTH < "slumber" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_slumber_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

smell_n1 := n_pp_c-of_le &
 [ ORTH < "smell" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_smell_n_of_rel",
            LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

smell_v1 := v_-_unacc_le &
 [ ORTH < "smell" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_smell_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

smelly_a1 := aj_-_i_le &
 [ ORTH < "smelly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_smelly_a_1_rel",
            LOCAL.CAT.HEAD.--SBRD -,
            PHON.ONSET con ] ].

smile_v1 := v_-_le &
 [ ORTH < "smile" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_smile_v_1_rel",
            PHON.ONSET con ] ].

smoke_v1 := v_-_le &
 [ ORTH < "smoke" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_smoke_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

smoke_v1_tr := v_np_le &
 [ ORTH < "smoke" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_smoke_v_1_rel",
            PHON.ONSET con ] ].

smore_n1 := n_-_c_le &
 [ ORTH < "s’more" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_smore_n_1_rel",
            PHON.ONSET con ] ].

;; |We brought books and snacks|
;;
snack_v1 := v_-_le &
 [ ORTH < "snack" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_snack_v_1_rel",
            LOCAL.CAT.HEAD.--MALN3SG -,
            PHON.ONSET con ] ].

;; Avoid misanalysis with NP-N compound for |it made Leah sneeze loudly|
sneeze_n1 := n_-_c-nochd_le &
 [ ORTH < "sneeze" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sneeze_n_1_rel",
            PHON.ONSET con ] ].

snow_v1 := v_-_it_le &
 [ ORTH < "snow" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_snow_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

so_to_speak_adv1 := av_-_i-vp-po_le &
 [ ORTH < "so", "to", "speak" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_so+to+speak_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

soccer_n1 := n_-_m_le &
 [ ORTH < "soccer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_soccer_n_1_rel",
            LOCAL.CAT.VAL.SPR < unexpressed >,
            PHON.ONSET con ] ].

softball_n1 := n_-_m-gr_le &
 [ ORTH < "softball" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_softball_n_1_rel",
            PHON.ONSET con ] ].

solo_adv := av_-_i-vp-po_le &
 [ ORTH < "solo" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_solo_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

;; Block mass use, to avoid wrong analysis for e.g. |the most possible solution|
solution_n1 := n_pp_c-ns-of_le &
 [ ORTH < "solution" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_solution_n_of_rel",
            PHON.ONSET con ] ].

some_adv1 := av_-_i-vp-po-nmb_le &
 [ ORTH < "some" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_some_a_1_rel",
	    LOCAL.CAT [ HEAD.--ADVADJ -,
	                VAL.SPR.FIRST unexpressed_min ],
            PHON.ONSET con ] ].

some_more_adv1 := av_-_i-vp-po_le &
 [ ORTH < "some", "more" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_some+more_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

somewhat_adv1 := av_-_i-vp-po_le &
 [ ORTH < "somewhat" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_somewhat_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

;; 2020-05-08 - Make ordinary post-adv to expose robust |later or sooner|
sooner_adv1 := av_-_i-vp-po_le &
 [ ORTH < "sooner" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sooner_a_1_rel",
            LEX +,
            PHON.ONSET con ] ].

song_n1 := n_pp_c-of_le &
 [ ORTH < "song" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_song_n_of_rel",
	    LOCAL.CAT.HEAD.--BAREPP.BP-INTO -,
            PHON.ONSET con ] ].

sort_n2 := n_pp_c-of_le &
 [ ORTH < "sort" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sort_n_of_rel",
            LOCAL.CAT [ HEAD.--OFMOD -,
			VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--BARE - ],
            PHON.ONSET con ] ].

sound_v4 := v_-_unacc_le &
 [ ORTH < "sound" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sound_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

south_n1 := n_-_c-maycap_le &
 [ ORTH < "south" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_south_n_of_rel",
            LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

space_v1 := v_-_le &
 [ ORTH < "space" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_space_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

space_v1_tr := v_np_le &
 [ ORTH < "space" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_space_v_1_rel",
            PHON.ONSET con ] ].

spacecraft_n1 := n_-_c_le &
 [ ORTH < "spacecraft" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_spacecraft_n_1_rel",
   	    LOCAL.CAT cat_infl_nosuff &  [ HEAD.--BARE - ],
            PHON.ONSET con ] ].

spare_v2 := v_np_le &
 [ ORTH < "spare" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_spare_v_1_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
            PHON.ONSET con ] ].

sparkle_v1 := v_-_le &
 [ ORTH < "sparkle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sparkle_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

spawn_v1 := v_-_le &
 [ ORTH < "spawn" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_spawn_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

spawn_v1_tr := v_np_le &
 [ ORTH < "spawn" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_spawn_v_1_rel",
            PHON.ONSET con ] ].

speak_v1 := v_np_le &
 [ ORTH < "speak" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_speak_v_to_rel",
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--MALCASE -,
            PHON.ONSET con ] ].

speak_v2 := v_pp_e_le &
 [ ORTH < "speak" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_speak_v_to_rel" ],
            PHON.ONSET con ] ].

species_n2 := n_pp_mc-of_le &
 [ ORTH < "species" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_species_n_of-n_rel",
            LOCAL.CAT [ HEAD.--OFMOD -,
			VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--BARE - ],
            PHON.ONSET con ] ].

specify_v1 := v_np_le &
 [ ORTH < "specify" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_specify_v_1_rel",
	    LOCAL.CAT.HEAD.--NOCJCRD -,
            PHON.ONSET con ] ].

#|
speech_n1 := n_-_c_le &
 [ ORTH < "speech" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_speech_n_1_rel",
            PHON.ONSET con ] ].
|#

spell_v1 := v_np*_le &
 [ ORTH < "spell" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_spell_v_1_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
            PHON.ONSET con ] ].

spew_v1 := v_-_le &
 [ ORTH < "spew" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_spew_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

spew_v1_tr := v_np_le &
 [ ORTH < "spew" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_spew_v_1_rel",
            PHON.ONSET con ] ].

spin_v1 := v_-_le &
 [ ORTH < "spin" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_spin_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

spin_v1_tr := v_np_le &
 [ ORTH < "spin" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_spin_v_1_rel",
            PHON.ONSET con ] ].

spin_round_v1 := v_p-np_le &
 [ ORTH < "spin" >,
   SYNSEM [ LKEYS [ --COMPKEY _round_p_sel_rel,
                    KEYREL.PRED "_spin_v_around_rel" ],
            PHON.ONSET con ] ].

spit_v1 := v_-_le &
 [ ORTH < "spit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_spit_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

spit_v1_tr := v_np_le &
 [ ORTH < "spit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_spit_v_1_rel",
	    LOCAL.CAT.HEAD.--NOCJCRD -,
            PHON.ONSET con ] ].

splatter_v1 := v_-_unacc_le &
 [ ORTH < "splatter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_splatter_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

split_off_v1 := v_p-np_le &
 [ ORTH < "split" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_split_v_off_rel" ],
	    LOCAL.CAT.HEAD.TAM.SAME-PAST +,
            PHON.ONSET con ] ].

split_off_v2 := v_p_le &
 [ ORTH < "split" >,
   SYNSEM [ LKEYS [ --COMPKEY _off_p_sel_rel,
                    KEYREL.PRED "_split_v_off_rel" ],
	    LOCAL.CAT.HEAD.TAM.SAME-PAST +,
            PHON.ONSET con ] ].

split_prd_v1 := v_ap_seq_le &
 [ ORTH < "split" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_split_v_1_rel",
	    LOCAL.CAT.HEAD.TAM.SAME-PAST +,
            PHON.ONSET con ] ].

split_prd_v2 := v_np-prd_oeq_le &
 [ ORTH < "split" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_split_v_1_rel",
	    LOCAL.CAT.HEAD.TAM.SAME-PAST +,
            PHON.ONSET con ] ].

split_up+with_v1 := v_p-pp_e_le &
 [ ORTH < "split" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    --OCOMPKEY _with_p_sel_rel,
                    KEYREL.PRED "_split_v_up-with_rel" ],
	    LOCAL.CAT.HEAD.TAM.SAME-PAST +,
            PHON.ONSET con ] ].

split_up_v1 := v_p-np_le &
 [ ORTH < "split" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_split_v_up_rel" ],
	    LOCAL.CAT.HEAD.TAM.SAME-PAST +,
            PHON.ONSET con ] ].

split_up_v2 := v_p_le &
 [ ORTH < "split" >,
   SYNSEM [ LKEYS [ --COMPKEY _up_p_sel_rel,
                    KEYREL.PRED "_split_v_up_rel" ],
	    LOCAL.CAT.HEAD.TAM.SAME-PAST +,
            PHON.ONSET con ] ].

split_v1 := v_np*_le &
 [ ORTH < "split" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_split_v_1_rel",
	    LOCAL.CAT.HEAD.TAM.SAME-PAST +,
            PHON.ONSET con ] ].

split_v2 := v_np-pp_prop_le &
 [ ORTH < "split" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_split_v_1_rel",
	    LOCAL.CAT.HEAD.TAM.SAME-PAST +,
            PHON.ONSET con ] ].

spoke_n1 := n_-_c-ed_le &
 [ ORTH < "spoke" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_spoke_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

spoken_a1 := v_-_psv_le &
 [ ORTH < "spoken" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_speak_v_1_rel",
            PHON.ONSET con ] ].

sport_n1 := n_-_c-ns-nocnh_le &
 [ ORTH < "sport" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sport_n_1_rel",
            PHON.ONSET con ] ].

;; DPF 2018-03-06 - Since we block |sport| in compounds, list some common ones

sport_coat_n1 := n_-_c_le &
 [ ORTH < "sport", "coat" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sport+coat_n_1_rel",
            PHON.ONSET con ] ].

sport_scholarship_n1 := n_-_c_le &
 [ ORTH < "sport", "scholarship" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sport+scholarship_n_1_rel",
            PHON.ONSET con ] ].

sport_shirt_n1 := n_-_c_le &
 [ ORTH < "sport", "shirt" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sport+shirt_n_1_rel",
            PHON.ONSET con ] ].

sports_n1 := n_-_c-cpd_le &
 [ ORTH < "sports" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sports_n_1_rel",
            PHON.ONSET con ] ].

sprawl_v1 := v_-_le &
 [ ORTH < "sprawl" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sprawl_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

spray_v1 := v_-_le &
 [ ORTH < "spray" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_spray_v_with_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

spray_v1_tr := v_np_le &
 [ ORTH < "spray" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_spray_v_with_rel",
            PHON.ONSET con ] ].

spread_v1 := v_-_le &
 [ ORTH < "spread" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_spread_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

spread_v1_tr := v_np_le &
 [ ORTH < "spread" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_spread_v_1_rel",
            PHON.ONSET con ] ].

spread_out_v1 := v_p-np_le &
 [ ORTH < "spread" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_spread_v_out_rel" ],
	    LOCAL.CAT.HEAD.TAM.SAME-PAST +,
            PHON.ONSET con ] ].

spread_out_v2 := v_p_le &
 [ ORTH < "spread" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_spread_v_out_rel" ],
	    LOCAL.CAT.HEAD.TAM.SAME-PAST +,
            PHON.ONSET con ] ].

spread_v1 := v_np*_le &
 [ ORTH < "spread" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_spread_v_1_rel",
	    LOCAL.CAT.HEAD.TAM.SAME-PAST +,
            PHON.ONSET con ] ].

spread_v2 := v_np-pp_prop_le &
 [ ORTH < "spread" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_spread_v_1_rel",
	    LOCAL.CAT.HEAD.TAM.SAME-PAST +,
            PHON.ONSET con ] ].

sprightly_a1 := aj_-_i_le &
 [ ORTH < "sprightly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sprightly_a_1_rel",
            LOCAL.CAT.HEAD.--SBRD -,
            PHON.ONSET con ] ].

squally_a1 := aj_-_i_le &
 [ ORTH < "squally" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_squally_a_1_rel",
            LOCAL.CAT.HEAD.--SBRD -,
            PHON.ONSET con ] ].

square_n1 := n_pp_c-of_le &
 [ ORTH < "square" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_square_n_of_rel",
            LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

squid_n1 := n_-_c_le &
 [ ORTH < "squid" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_squid_n_1_rel",
   	    LOCAL.CAT cat_infl_nosuff &  [ HEAD.--BARE - ],
            PHON.ONSET con ] ].

stadium_n1 := n_-_c_le &
 [ ORTH < "stadium" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stadium_n_1_rel",
            LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

staff_n1 := n_-_c_le &
 [ ORTH < "staff" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_staff_n_of_rel",
   	    LOCAL.CAT cat_infl_nosuff & [ HEAD.--BARE - ],
            PHON.ONSET con ] ].

stage_n1 := n_pp_c-ns-of_le &
 [ ORTH < "stage" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stage_n_of_rel",
   	    LOCAL.CAT.HEAD.--BAREPP [ BP-OFF -,
				      BP-ON - ],
            PHON.ONSET con ] ].

stake_n1 := n_-_c-ed_le &
 [ ORTH < "stake" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stake_n_1_rel",
   	    LOCAL.CAT.HEAD.--BAREPP.BP-AT -,   
            PHON.ONSET con ] ].

stammer_v1 := v_np*_le &
 [ ORTH < "stammer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stammer_v_1_rel",
	    LOCAL.CAT.HEAD.--NOCJCRD -,
            PHON.ONSET con ] ].

stand_in_n1 := n_-_c_le &
 [ ORTH < "stand", "in" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stand-in_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,   
            PHON.ONSET con ] ].

stand_in_n2 := n_-_c_le &
 [ ORTH < "stand", "-", "in" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stand-in_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,   
            PHON.ONSET con ] ].

stand_n1 := n_-_c_le &
 [ ORTH < "stand" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stand_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,   
            PHON.ONSET con ] ].

standby_adv1 := av_-_i-vp-po_le &
 [ ORTH < "standby" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_standby_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

standby_adv2 := av_-_i-vp-po_le &
 [ ORTH < "stand", "-", "by" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_standby_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

;; 2021-01-12 - Block robust "among so many movie stars"
star_in_v1 := v_pp*_le &
 [ ORTH < "star" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_rel,
                    KEYREL.PRED "_star_v_1_rel" ],
	    LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CAT.HEAD [ --BARE -,
						      --MALDIV - ],
            PHON.ONSET con ] ].

starfish_n1 := n_-_mc_le &
 [ ORTH < "starfish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_starfish_n_1_rel",
	    LOCAL.CAT cat_infl_nosuff &
	    	      [ HEAD.--BARE - ],
            PHON.ONSET con ] ].

start_n1 := n_-_c_le &
 [ ORTH < "start" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_start_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

;; Avoid "was [[rich and started] many cultures]"
start_v1 := v_np_noger_le &
 [ ORTH < "start" >,
   ALTS.ATTRJ -,
   SYNSEM [ LKEYS.KEYREL.PRED "_start_v_cause_rel",
            PHON.ONSET con ] ].

stately_a1 := aj_-_i_le &
 [ ORTH < "stately" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stately_a_1_rel",
            LOCAL.CAT.HEAD.--SBRD -,
            PHON.ONSET con ] ].

stay_n1 := n_-_c_le &
 [ ORTH < "stay" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stay_n_1_rel",
   	    LOCAL.CAT [ HEAD.--BARE -,
	                VAL.SPR.FIRST.LOCAL.CAT.HEAD.--POSSRBST - ],
            PHON.ONSET con ] ].

stay_prd_v1 := v_prd_seq_le &
 [ ORTH < "stay" >,
   ALTS.VADJ -,
   SYNSEM [ LKEYS.KEYREL.PRED "_stay_v_prd_rel",
            PHON.ONSET con ] ].

;; DPF 2018-07-25 - Change to take PP complement
;;
stay_v2 := v_pp*_dir_le &
 [ ORTH < "stay" >,
   ALTS.VADJ -,
   SYNSEM [ LKEYS.KEYREL.PRED "_stay_v_1_rel",
            PHON.ONSET con ] ].

steak_n1 := n_-_mc_le &
 [ ORTH < "steak" >,
   SYNSEM [ MODIFD.LPERIPH na,
	    LKEYS.KEYREL.PRED "_steak_n_1_rel",
            PHON.ONSET con ] ].

steamboat_n1 := n_-_c-transp_le &
 [ ORTH < "steamboat" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_steamboat_n_1_rel",
            PHON.ONSET con ] ].

step_n1 := n_-_c-ed-ns_le &
 [ ORTH < "step" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_step_n_1_rel",
   	    LOCAL.CAT.HEAD.--BAREPP [ BP-IN -,   
				      BP-INTO -,
				      BP-OUTOF - ],
            PHON.ONSET con ] ].

stew_v1 := v_-_le &
 [ ORTH < "stew" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stew_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

still_a1 := aj_-_i-sbrd_le &
 [ ORTH < "still" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_still_a_1_rel",
            PHON.ONSET con ] ].

still_adv1 := av_-_i-vp-x_le &
 [ ORTH < "still" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_still_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

still_adv3 := av_-_i-ap-pp_le &
 [ ORTH < "still" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_still_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

still_n1 := n_-_c_le &
 [ ORTH < "still" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_still_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

stink_v2 := v_-_le &
 [ ORTH < "stink" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stink_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

stop_n1 := n_-_c_le &
 [ ORTH < "stop" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stop_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

store_n1 := n_-_c_le &
 [ ORTH < "store" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_store_n_1_rel",
   	    LOCAL.CAT.HEAD.--BAREPP.BP-IN -,   
            PHON.ONSET con ] ].

story_n1 := n_pp_c-of_le &
 [ ORTH < "story" >,
   SYNSEM [ LKEYS.KEYREL [ PRED "_story_n_of_rel",
                           ARG0.SORT nonhuman ],
            PHON.ONSET con ] ].

straight_adv := av_-_i-vp_le &
 [ ORTH < "straight" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_straight_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

strain_v1 := v_-_le &
 [ ORTH < "strain" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_strain_v_1_rel",
            LOCAL.CAT.HEAD [ --MAL3SG -,
			     --SAMENV + ],
            PHON.ONSET con ] ].

strain_v1_tr := v_np_le &
 [ ORTH < "strain" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_strain_v_1_rel",
            LOCAL.CAT.HEAD.--MAL3SG -,
            PHON.ONSET con ] ].

strain_v2 := v_vp_seq_le &
 [ ORTH < "strain" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_strain_v_1_rel",
            LOCAL.CAT.HEAD.--MAL3SG -,
            PHON.ONSET con ] ].

strategy_n2 := n_-_m-nocnh_le &
 [ ORTH < "strategy" >,
   ALTS.PLMASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_strategy_n_of_rel",
            PHON.ONSET con ] ].

stream_n1 := n_pp_c-of_le &
 [ ORTH < "stream" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stream_n_of_rel",
	    LOCAL.CAT.HEAD.--BAREPP [ BP-DOWN -,
				      BP-UP - ],
            PHON.ONSET con ] ].

street_n1 := n_-_c-ns_le &
 [ ORTH < "street" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_street_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

street_nounif_n1 := n_-_pn-nounif_le &
 [ ORTH < "Street" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Street",
            PHON.ONSET con ] ].

street_nounif_n2 := n_-_pn-nounif_le &
 [ ORTH < "Street", "." >,
   SYNSEM [ LKEYS.KEYREL.CARG "Street",
            PHON.ONSET con ] ].

streetcar_n1 := n_-_c-transp_le &
 [ ORTH < "streetcar" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_streetcar_n_1_rel",
            PHON.ONSET con ] ].

stretch_n1 := n_pp_c-of_le &
 [ ORTH < "stretch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stretch_n_of_rel",
            LOCAL.CAT [ HEAD.--OFMOD -,
			VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--BARE - ],
            PHON.ONSET con ] ].

stride_n1 := n_-_c_le &
 [ ORTH < "stride" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_stride_n_1_rel",
   	    LOCAL.CAT.HEAD.--BAREPP.BP-IN -,   
            PHON.ONSET con ] ].

strike_n1 := n_-_c_le &
 [ ORTH < "strike" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_strike_n_1_rel",
   	    LOCAL.CAT.HEAD.--BAREPP.BP-ON -,   
            PHON.ONSET con ] ].

struggle_v1 := v_-_le &
 [ ORTH < "struggle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_struggle_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

study_n1 := n_pp_mc-of_le &
 [ ORTH < "study" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_study_n_of_rel",
   	    LOCAL.CAT.VAL.SPR.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
            PHON.ONSET con ] ].

study_v1 := v_-_le &
 [ ORTH < "study" >,
   ALTS.NGER -,
   SYNSEM [ LKEYS.KEYREL.PRED "_study_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

study_v1_tr := v_np_le &
 [ ORTH < "study" >,
   ALTS.NGER -,
   SYNSEM [ LKEYS.KEYREL.PRED "_study_v_1_rel",
            PHON.ONSET con ] ].

style_n3 := n_pp_c-gr-of_le &
 [ ORTH < "style" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_style_n_of_rel",
            LOCAL.CAT [ HEAD.--OFMOD -,
			VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--BARE - ],
            PHON.ONSET con ] ].

subtitle_v1 := v_np_le &
 [ ORTH < "subtitle" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_subtitle_v_1_rel",
            PHON.ONSET con ] ].

;; 2021-01-12 - Block for "he cried, such was his dismay"
such := d_-_prt-plm-unsp_le &
 [ ORTH < "such" >,
   ALTS.DETPART -,
   SYNSEM [ LKEYS.KEYREL.PRED _such_q_rel,
            PHON.ONSET con ] ].

such_a1 := aj_-_i-att_le &
 [ ORTH < "such" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_such_a_1_rel",
            PHON.ONSET con ] ].

such_n1 := n_-_c-sg-nocnh_le &
 [ ORTH < "such" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_such_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,   
            PHON.ONSET con ] ].

suit_n1 := n_pp_c-of_le &
 [ ORTH < "suit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_suit_n_of_rel",
	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

sum_n1 := n_pp_c-of_le &
 [ ORTH < "sum" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sum_n_of_rel",
   	    LOCAL.CAT.HEAD.--BAREPP.BP-IN -,
            PHON.ONSET con ] ].

summary_n1 := n_pp_c-of_le &
 [ ORTH < "summary" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_summary_n_of_rel",
   	    LOCAL.CAT.HEAD.--BAREPP.BP-IN -,
            PHON.ONSET con ] ].

summer_v1 := v_-_le &
 [ ORTH < "summer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_summer_v_1_rel",
	    LOCAL.CAT [ HEAD [ --MALCOPBSE -,
	                       --MAL3SG -,
			       --SAMENV + ],
			VAL.SUBJ.FIRST.LOCAL.CAT.HEAD.--POSSRBST - ],
            PHON.ONSET con ] ].

summertime_adv := av_-_i-vp_le &
 [ ORTH < "summertime" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_summertime_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

sun_v1 := v_np_le &
 [ ORTH < "sun" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sun_v_1_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.--SIND.PT refl,
            PHON.ONSET con ] ].

sunday_n2 := n_-_c-dow_le &
 [ ORTH < "Sun" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Sun",
            PHON.ONSET con ],
   TOKENS.+LAST.+CLASS.+CASE capitalized+upper ].

sunday_n3 := n_-_c-dow_le &
 [ ORTH < "Sun." >,
   SYNSEM [ LKEYS.KEYREL.CARG "Sun",
            PHON.ONSET con ],
   TOKENS.+LAST.+CLASS.+CASE capitalized+upper ].

sunrise_n2 := n_-_c_le &
 [ ORTH < "sunrise" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sunrise_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

sunset_n2 := n_-_c_le &
 [ ORTH < "sunset" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sunset_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

superior_n1 := n_-_c_le &
 [ ORTH < "superior" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_superior_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

surface_v1 := v_-_le &
 [ ORTH < "surface" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_surface_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

surly_a1 := aj_-_i_le &
 [ ORTH < "surly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_surly_a_1_rel",
            LOCAL.CAT.HEAD.--SBRD -,
            PHON.ONSET con ] ].

;; Exclude robust |very much surprised|
surprised_a1 := aj_pp_i_le &
 [ ORTH < "surprised" >,
   SYNSEM [ LKEYS [ --COMPKEY _at_p_sel_rel,
                    KEYREL.PRED "_surprised_a_at_rel" ],
            LOCAL.CAT.HEAD.--NOUNADJ +,
            PHON.ONSET con ] ].

;; Avoid robust "this rose-V sways-N"
sway_n1 := n_-_mc_le &
 [ ORTH < "sway" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sway_n_1_rel",
	    LOCAL.AGR.PNG.PN 3s,
            PHON.ONSET con ] ].

sway_v1 := v_-_le &
 [ ORTH < "sway" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sway_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

sweat_v1 := v_-_le &
 [ ORTH < "sweat" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_sweat_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

swim_n1 := n_-_c_le &
 [ ORTH < "swim" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_swim_n_1_rel",
   	    LOCAL.CAT cat_infl_nosuff  & [ HEAD.--BARE - ],
            PHON.ONSET con ] ].

tag_n1 := n_-_mc_le &
 [ ORTH < "tag" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tag_n_1_rel",
	    LOCAL.CAT.HEAD.--POSSRBST -,
            PHON.ONSET con ] ].

tag_v1 := v_np_le &
 [ ORTH < "tag" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_tag_v_1_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
            PHON.ONSET con ] ].

take_v1 := v_np_le &
 [ ORTH < "take" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_take_v_1_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
            PHON.ONSET con ] ].

#|
talk_n1 := n_-_mc-ns_le &
 [ ORTH < "talk" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_talk_n_of-on_rel",
            --MIN alt_idiom_nom_rel,
            PHON.ONSET con ] ].
|#

;; DPF 2018-07-24 - Removed ALTS.NGER - since this block |talking is allowed|
;;
talk_v1 := v_pp*-pp*_le &
 [ ORTH < "talk" >,
   SYNSEM [ LKEYS [ --COMPKEY to_or_with_p_rel,
                    --OCOMPKEY _about_p_rel,
                    KEYREL.PRED "_talk_v_about_rel" ],
            PHON.ONSET con ] ].

tape_v1 := v_-_le &
 [ ORTH < "tape" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tape_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

tape_v1_tr := v_np_le &
 [ ORTH < "tape" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tape_v_1_rel",
            PHON.ONSET con ] ].

target_n1 := n_pp_c-of_le &
 [ ORTH < "target" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_target_n_of_rel",
   	    LOCAL.CAT.HEAD.--BAREPP [ BP-OFF -,
				      BP-ON - ],
            PHON.ONSET con ] ].

taro_root_n1 := n_-_mc_le &
 [ ORTH < "taro", "root" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_taro+root_n_1_rel",
            PHON.ONSET con ] ].

task_n1 := n_pp_c-ns-of_le &
 [ ORTH < "task" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_task_n_of_rel",
   	    LOCAL.CAT.HEAD.--BAREPP.BP-TO -,
            PHON.ONSET con ] ].

taste_v1 := v_np_le &
 [ ORTH < "taste" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_taste_v_1_rel",
            LOCAL.CAT.VAL.COMPS < expressed_synsem >,
            PHON.ONSET con ] ].

teach_v1 := v_np*_le &
 [ ORTH < "teach" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_teach_v_1_rel",
            LOCAL.CAT [ HEAD.--CLRC -,
			VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--POSSRBST - ],
            PHON.ONSET con ] ].

teacher_n1 := n_pp_c-of-anim_le &
 [ ORTH < "teacher" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_teacher_n_of_rel",
            PHON.ONSET con ] ].

teaching_n1 := n_-_c-nocnh_le &
 [ ORTH < "teaching" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_teaching_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

tear_v2 := v_-_unacc_le &
 [ ORTH < "tear" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tear_v_1_rel",
	    LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CAT.HEAD.--MALCASE -,
            PHON.ONSET con ] ].

telegraph_v1 := v_np*_le &
 [ ORTH < "telegraph" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_telegraph_v_1_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
            PHON.ONSET con ] ].

telephone_v1 := v_np*_le &
 [ ORTH < "telephone" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_telephone_v_1_rel",
	    LOCAL.CAT [ VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
			HEAD.--NOCJCRD - ],
            PHON.ONSET con ] ].

tell_me_q := x_cp_howabt_le &
 [ ORTH < "tell", "me" >,
   SYNSEM [ LOCAL [ CAT.MC +,
		    CONT.HOOK.INDEX.SF ques ],
	    LKEYS.KEYREL.PRED "_how+about_x_rel",
            PHON.ONSET con ] ].

; Avoid robust CP complement, for "she told her brother borrow her book"
tell_v2 := v_np-cp_fin-inf_le &
 [ ORTH < "tell" >,
   SYNSEM [ LOCAL.CAT.VAL.KCMP.LOCAL.CAT.HEAD.--MAL3SG -,
            LKEYS.KEYREL.PRED "_tell_v_1_rel",
            PHON.ONSET con ] ].

tell_v4 := v_np_le &
 [ ORTH < "tell" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_tell_v_1_rel",
	    LOCAL.CAT [ HEAD.--CLRC -,
			VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--POSSRBST - ],
            PHON.ONSET con ] ].

tell_v8 := v_np-cp_fin-q-mc_le &
 [ ORTH < "tell" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tell_v_1_rel",
            PHON.ONSET con ] ].

tenfold_adv1 := av_-_i-vp-po_le &
 [ ORTH < "tenfold" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tenfold_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

tense_v1 := v_-_le &
 [ ORTH < "tense" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tense_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

tense_v1_tr := v_np_le &
 [ ORTH < "tense" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tense_v_1_rel",
            PHON.ONSET con ] ].

term_n1 := n_pp_c-of_le &
 [ ORTH < "term" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_term_n_of_rel",
   	    LOCAL.CAT.HEAD.--BAREPP.BP-TO -,
            PHON.ONSET con ] ].

test_v1 := v_np_le &
 [ ORTH < "test" >,
   SYNSEM [ LOCAL.CAT.HEAD.--MAL3SG -,
	    LKEYS.KEYREL.PRED "_test_v_1_rel",
            PHON.ONSET con ] ].

text_v1 := v_-_le &
 [ ORTH < "text" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_text_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

text_v1_tr := v_np_le &
 [ ORTH < "text" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_text_v_1_rel",
            PHON.ONSET con ] ].

than_p2 := p_np_i-than_le &
 [ ORTH < "than" >,
   SYNSEM [ LKEYS.KEYREL.PRED _than_p_ind_rel,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--MALCASE -,
            PHON.ONSET con ] ].

;; DPF 2017-09-12 - Enable preventing spurious robust analysis for
;; |it is important that he respect the rules|
;;
that_comp := cm_np-vp_that_le &
 [ ORTH < "that" >,
   SYNSEM [ LOCAL.CAT [ HEAD [ --MAL3SG #mal3s,
			       --MALCOPFIN #malcop ],
                        VAL.COMPS.FIRST.LOCAL.CAT.HEAD [ --MAL3SG #mal3s,
							 --MALCOPFIN #malcop ]],
	    PHON.ONSET con ] ].

;; DPF 2022-04-23 - Provisional entry while we figure out the right analysis
;; for "made more money this year than last"
than_last_pp := pp_-_i_le &
 [ ORTH < "than", "last" >,
   SYNSEM [ LKEYS.KEYREL.PRED _than+last_p_rel,
            PHON.ONSET con ] ].



;; DPF 2017-12-21 - Block as fragment via CASE nom_or_obliq
;; DPF 2020-06-25 - But this blocks |He expressed his thanks|, so undo
#|
thanks_n1 := n_-_c-pl_le &
 [ ORTH < "thanks" >,
   SYNSEM [ LOCAL.CAT.HEAD.CASE nom_or_obliq,
            LKEYS.KEYREL.PRED "_thanks_n_1_rel",
            PHON.ONSET con ] ].
|#

thanks_v1 := v_-_imp_le &
 [ ORTH < "thanks" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_thank_v_1_rel",
	    LOCAL.CAT.HEAD.--RUNON -,
            PHON.ONSET con ] ].

that_comp_comma := cm_np-vp_that_le &
 [ ORTH < "that", "," >,
   SYNSEM.PHON.ONSET con ].

;; Hack to enable synonymy of "elders" (no spr) with "the elderly"
elderly_n1 := n_-_c-pl_le &
 [ ORTH < "the", "elderly" >,
   ALTS.PLMASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_elder_n_1_rel",
            LOCAL.CAT.VAL.SPR.FIRST unexpressed,
            PHON.ONSET con ] ].

theater_n1 := n_-_c_le &
 [ ORTH < "theater" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_theater_n_1_rel",
            PHON.ONSET con ] ].

then_amod_adv1 := av_-_i-ap-pp_le &
 [ ORTH < "then" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_then_a_1_rel",
	    LOCAL.CAT.HEAD adv_nonmob & [ --ADVADJ - ],
            PHON.ONSET con ] ].

;; Prevent analysis as subord-clause fragment
therefore_subord := p_cp_s-post_le &
 [ ORTH < "therefore" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_therefore_x_rel",
            LOCAL.CAT.HEAD.MINORS.NORM no_rel,
            PHON.ONSET con ] ].

;; 2020-04-09 - Let's block as head of NP-N compound, to avoid robust
;; |[the first] thing|

they_pn_np1 := n_-_pn-nounif_le &
 [ ORTH < "They" >,
   SYNSEM [ LKEYS.KEYREL.CARG "They",
            PHON.ONSET con ] ].

thing_n1 := n_pp_c-nsnc-of_le &
 [ ORTH < "thing" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_thing_n_of-about_rel",
   	    LOCAL.CAT.VAL.SPR.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
            PHON.ONSET con ] ].

think_v3 := v_np_ntr_le &
 [ ORTH < "think" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_think_v_1_rel",
	    LOCAL.CAT.VAL.COMPS < gap >,
            PHON.ONSET con ] ].

think_v9 := v_-_le &
 [ ORTH < "think" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_think_v_1_rel",
            PHON.ONSET con ] ].

;; Exclude for |think a great many of these problems|
think_of_v2 := v_np-pp_e_le &
 [ ORTH < "think" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _of_p_sel_rel,
   	            KEYREL.PRED "_think_v_amt-of_rel" ],
	    LOCAL.CAT.VAL.COMPS.FIRST.--MIN nonpart_nom_rel,
            PHON.ONSET con ] ].

third_adv1 := av_-_i-vp-po-nmb_le &
 [ ORTH < "third" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_third_a_1_rel",
	    LOCAL.CAT [ HEAD.--ADVADJ -,
	                VAL.SPR.FIRST unexpressed_min ],
            PHON.ONSET con ] ].

third_prize_n1 := n_-_m_le &
 [ ORTH < "third", "prize" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_third+prize_n_1_rel",
            PHON.ONSET con ] ].

third_place_n1 := n_-_m_le &
 [ ORTH < "third", "place" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_third+place_n_1_rel",
            PHON.ONSET con ] ].

thirst_v1 := v_-_le &
 [ ORTH < "thirst" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_thirst_v_for-after_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

;; Block |this when we arise|
;;
this_deix := n_-_pr-dei-sg_le &
 [ ORTH < "this" >,
   SYNSEM [ MODIFD.RPERIPH +,
	    LKEYS.ALTKEYREL.PRED _this_q_dem_rel,
            PHON.ONSET con ] ].

;; Ignore for now the normal requirement of a comma-marked target
;; Block "as though"
though_root_post := av_-_dc-like-po_le &
 [ ORTH < "though" >,
   SYNSEM [ LKEYS.KEYREL.CARG "though",
	    LOCAL.CAT.HEAD.MOD.FIRST.LOCAL.CAT.HEAD n_or_v_or_a,
            PHON.ONSET con ] ].

;; DPF 2018-03-12 - Removed LPERIPH +, no longer compatible with lex type
thought_n1 := n_pp_mc-of_le &
 [ ORTH < "thought" >,
   SYNSEM [ LOCAL.CAT.HEAD.MINORS.NORM norm_rel,
   	    LKEYS.KEYREL.PRED "_thought_n_of_rel",
            PHON.ONSET con ] ].

threefold_adv1 := av_-_i-vp-po_le &
 [ ORTH < "threefold" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_threefold_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

throw_v1 := v_np_le &
 [ ORTH < "throw" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_throw_v_1_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
            PHON.ONSET con ] ].

thrust_out_v1 := v_p-np_le &
 [ ORTH < "thrust" >,
   SYNSEM [ LKEYS [ --COMPKEY _out_p_sel_rel,
                    KEYREL.PRED "_thrust_v_out_rel" ],
	    LOCAL.CAT.HEAD.TAM.SAME-PAST +,
            PHON.ONSET con ] ].

thrust_v1 := v_np_noger_le &
 [ ORTH < "thrust" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_thrust_v_1_rel",
	    LOCAL.CAT.HEAD.TAM.SAME-PAST +,
            PHON.ONSET con ] ].

thrust_v2 := v_pp*_dir_le &
 [ ORTH < "thrust" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_thrust_v_1_rel",
	    LOCAL.CAT.HEAD.TAM.SAME-PAST +,
            PHON.ONSET con ] ].

thrust_v3 := v_np-pp_prop_le &
 [ ORTH < "thrust" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_thrust_v_1_rel",
	    LOCAL.CAT.HEAD.TAM.SAME-PAST +,
            PHON.ONSET con ] ].

thrust_v4 := v_np-prd_oeq_le &
 [ ORTH < "thrust" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_thrust_v_1_rel",
	    LOCAL.CAT.HEAD.TAM.SAME-PAST +,
            PHON.ONSET con ] ].

thunder_n1 := n_-_m_le &
 [ ORTH < "thunder" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_thunder_n_1_rel",
            PHON.ONSET con ] ].

thunder_v1 := v_-_it_le &
 [ ORTH < "thunder" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_thunder_v_2_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

tiger_n2 := n_-_c-msc_le &
 [ ORTH < "tiger" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tiger_n_1_rel",
            PHON.ONSET con ] ].

;; 2020-04-10 - Block robust |make time to ...|
;;
time_a1 := aj_pp_i-it_le &
 [ ORTH < "time" >,
   SYNSEM [ LKEYS [ --COMPKEY _for_p_sel_rel,
                    KEYREL.PRED "_time_a_expl-for_rel" ],
	    LOCAL.CAT.HEAD.TAM.TENSE real_tense,
            PHON.ONSET con ] ].

time_a2 := aj_pp-vp_i-it-nt_le &
 [ ORTH < "time" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_time_a_expl-for_rel",
	    LOCAL.CAT.HEAD.TAM.TENSE real_tense,
            PHON.ONSET con ] ].

;; Tried blocking as non-hd in compounds via PRD +, to expose robust 
;; |second time win|, but we need |time traveler, time machine, etc.|
time_n1 := n_-_c-time_le &
 [ ORTH < "time" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_time_n_of_rel",
   	    LOCAL.CAT.HEAD [ --BARE -,
	          	     --MSCT + ],
            PHON.ONSET con ] ].

time_n2 := n_pp_c-t-of-nb_le &
 [ ORTH < "time" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_time_n_of_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

time_n3 := n_-_m-time_le &
 [ ORTH < "time" >,
   ALTS.PLMASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_time_n_of_rel",
            LOCAL [ CAT.HEAD [ MINORS.NORM norm_rel,
			       --MALCM - ],
		    CONT.HOOK.INDEX.SORT time ],
            PHON.ONSET con ] ].

timely_a1 := aj_-_i_le &
 [ ORTH < "timely" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_timely_a_1_rel",
            LOCAL.CAT.HEAD.--SBRD -,
            PHON.ONSET con ] ].

times_n1 := n_-_c-nm_le &
 [ ORTH < "Times" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Times",
            PHON.ONSET con ],
   TOKENS.+LAST.+CLASS.+CASE capitalized ].

times_p1 := p_np_i_le &
 [ ORTH < "times" >,
   SYNSEM [ LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--MALCASE -,
	    LKEYS.KEYREL.PRED _times_p_rel,
            PHON.ONSET con ] ].

tip_v2 := v_np_le &
 [ ORTH < "tip" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_tip_v_1_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
            PHON.ONSET con ] ].

;; 2020-04-07 - Avoid |tired [as we were, we arrived]|
tire_v2 := v_np-cp_it-s_le &
 [ ORTH < "tire" >,
   ALTS.PASSIVE -,
   SYNSEM [ LKEYS.KEYREL.PRED "_tire_v_1_rel",
            PHON.ONSET con ] ].

title_n1 := n_pp_c-of_le &
 [ ORTH < "title" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_title_n_of_rel",
            LOCAL.CAT [ HEAD.--OFMOD -,
			VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--BARE - ],
            PHON.ONSET con ] ].

title_v1 := v_np_le &
 [ ORTH < "title" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_title_v_1_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
            PHON.ONSET con ] ].

to_and_fro_adv1 := av_-_i-vp-po_le &
 [ ORTH < "to", "and", "fro" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_to+and+fro_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

;; Block robust "he made a poster to bring"
to_subord := p_vp_bse_le &
 [ ORTH < "to" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_in+order+to_x_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--MALINTR -,
            PHON.ONSET con ] ].

toast_v1 := v_-_le &
 [ ORTH < "toast" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_toast_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

toast_v1_tr := v_np_le &
 [ ORTH < "toast" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_toast_v_1_rel",
            PHON.ONSET con ] ].

today_adv2 := av_-_i-vp-x_le &
 [ ORTH < "today" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_today_a_1_rel",
            PHON.ONSET con ] ].

toil_v1 := v_-_le &
 [ ORTH < "toil" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_toil_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

tomato_n1 := n_-_c_le &
 [ ORTH < "tomato" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tomato_n_1_rel",
            PHON.ONSET con ] ].

too_adv2 := av_-_i-vp-po-ellok_le &
 [ ORTH < "too" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_too_a_also_rel",
            PHON.ONSET con ] ].

; Restrict to only obliq complement, to block "to home"
; Also exclude bare-sg NP complement to avoid competition with infinitival to
; (e.g. |to ride|)
;; DPF 2014-04-29 - But excluding bare-sg is too strong, since we can't get eg
;; |we went to circus|.  So remove COMPS..--BARE - and instead mark noun/verb
;; pairs like "ride" as --BARE -.
;;
to := p_np_i-nnm_le &
 [ ORTH < "to" >,
   SYNSEM [ LOCAL.CAT.VAL.COMPS < [ LOCAL.CAT.HEAD [ CASE obliq,
						     --BAREDPP.BP-TO + ] ] >,
            LKEYS.KEYREL.PRED _to_p_rel,
            PHON.ONSET con ] ].

;; Propagate head features from complement VP
to_c_prop := cm_vp_to_le &
 [ ORTH < "to" >,
   SYNSEM [ LOCAL.CAT [ HEAD [ --MALINTR #malintr ],
			VAL.COMPS.FIRST.LOCAL.CAT.HEAD [ --MALINTR #malintr ] ],
	    PHON.ONSET con ] ].

;; Add properties to event, so generator is happy with paraphrase output.
to_c_prop_elided := cm_-_to_le &
 [ ORTH < "to" >,
   SYNSEM [ LOCAL.CONT.HOOK.INDEX.E [ TENSE untensed, 
                                      ASPECT [ PROGR -, PRF - ] ],
            PHON.ONSET con ] ].

to_nmod := p_np_i-nm-no-tm_le &
 [ ORTH < "to" >,
   SYNSEM [ LOCAL.CAT.VAL.COMPS < [ LOCAL.CAT.HEAD [ CASE obliq,
						     --BARE - ] ] >,
            LKEYS.KEYREL.PRED _to_p_rel,
            PHON.ONSET con ] ].

to_s_init := p_np_s_le &
 [ ORTH < "to" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_to_x_subord_rel",
	    LOCAL.CAT.VAL.COMPS < [ LOCAL.CAT.HEAD.--BAREDPP.BP-TO + ] >,
            PHON.ONSET con ] ].

tooth_and_nail_adv1 := av_-_i-vp-po_le &
 [ ORTH < "tooth", "-", "and", "-", "nail" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tooth-and-nail_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

tooth_and_nail_adv2 := av_-_i-vp-po_le &
 [ ORTH < "tooth", "and", "nail" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tooth-and-nail_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

top_n1 := n_-_c_le &
 [ ORTH < "top" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_top_n_1_rel",
   	    LOCAL.CAT.HEAD.--BAREPP.BP-ON -,
            PHON.ONSET con ] ].

torment_v1 := v_-_le &
 [ ORTH < "torment" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_torment_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

torment_v1_tr := v_np_le &
 [ ORTH < "torment" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_torment_v_1_rel",
            PHON.ONSET con ] ].

torque_v2 := v_-_unacc_le &
 [ ORTH < "torque" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_torque_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

torture_v1 := v_-_le &
 [ ORTH < "torture" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_torture_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

torture_v1_tr := v_np_le &
 [ ORTH < "torture" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_torture_v_1_rel",
            PHON.ONSET con ] ].

toss_v1 := v_np_le &
 [ ORTH < "toss" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_toss_v_1_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
            PHON.ONSET con ] ].

total_n1 := n_-_c_le &
 [ ORTH < "total" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_total_n_of_rel",
   	    LOCAL.CAT.HEAD.--BAREPP.BP-IN -,
            PHON.ONSET con ] ].

touch_v1 := v_-_le &
 [ ORTH < "touch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_touch_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

touch_v1_tr := v_np_le &
 [ ORTH < "touch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_touch_v_1_rel",
            PHON.ONSET con ] ].

tour_n1 := n_pp_c-of_le &
 [ ORTH < "tour" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tour_n_of_rel",
   	    LOCAL.CAT.HEAD.--BAREPP [ BP-OFF -,
				      BP-ON - ],
            PHON.ONSET con ] ].

tow_n1 := n_-_c_le &
 [ ORTH < "tow" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tow_n_1_rel",
   	    LOCAL.CAT.HEAD.--BAREPP.BP-IN -,
            PHON.ONSET con ] ].

town_n1 := n_-_c_le &
 [ ORTH < "town" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_town_n_1_rel",
   	    LOCAL.CAT.HEAD.--BAREPP [ BP-AROUND -,
				      BP-FROM -,
				      BP-IN -,
				      BP-INTO -,
				      BP-OF -,
				      BP-OUTOF -,
				      BP-TO - ],
            PHON.ONSET con ] ].

toy_n1 := n_-_c_le &
 [ ORTH < "toy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_toy_n_1_rel",
	    LOCAL.CAT cat_infl_nosuff,
            PHON.ONSET con ] ].

track_n1 := n_-_mc_le &
 [ ORTH < "track" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_track_n_1_rel",
   	    LOCAL.CAT.HEAD.--BAREPP [ BP-OFF -,
				      BP-ON - ],
            PHON.ONSET con ] ].

track_v1 := v_-_le &
 [ ORTH < "track" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_track_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

track_v1_tr := v_np_le &
 [ ORTH < "track" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_track_v_1_rel",
            PHON.ONSET con ] ].

trade_v1 := v_-_le &
 [ ORTH < "trade" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_trade_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

trade_v1_tr := v_np_le &
 [ ORTH < "trade" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_trade_v_1_rel",
            PHON.ONSET con ] ].

;; Block robust cmpd "a toy bear trails..."
trail_n1 := n_-_c_le &
 [ ORTH < "trail" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_trail_n_1_rel",
	    LOCAL.CAT.HEAD.--PLNOAFF +,
            PHON.ONSET con ] ].

train_n1 := n_pp_c-of-transp_le &
 [ ORTH < "train" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_train_n_of_rel",
            PHON.ONSET con ] ].

tram_n1 := n_-_c-transp_le &
 [ ORTH < "tram" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tram_n_1_rel",
            PHON.ONSET con ] ].

transfer_n1 := n_pp_mc-of_le &
 [ ORTH < "transfer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_transfer_n_of_rel",
            LOCAL.CAT [ HEAD.--OFMOD -,
			VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--BARE - ],
            PHON.ONSET con ] ].

transfer_v2 := v_-_le &
 [ ORTH < "transfer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_transfer_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

transfer_v2_tr := v_np_le &
 [ ORTH < "transfer" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_transfer_v_1_rel",
            PHON.ONSET con ] ].

transport_v1 := v_-_le &
 [ ORTH < "transport" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_transport_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

transport_v1_tr := v_np_le &
 [ ORTH < "transport" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_transport_v_1_rel",
            PHON.ONSET con ] ].

trapped_a1 := aj_-_i-sbrd_le &
 [ ORTH < "trapped" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_trapped_a_1_rel",
            PHON.ONSET con ] ].

travel_n1 := n_-_m_le &
 [ ORTH < "travel" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_travel_n_1_rel",
            PHON.ONSET con ] ].

traveler_n1 := n_-_c_le &
 [ ORTH < "traveler" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_traveler_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

tread_v1 := v_-_le &
 [ ORTH < "tread" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tread_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

tread_v1_tr := v_np_le &
 [ ORTH < "tread" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tread_v_1_rel",
            PHON.ONSET con ] ].

;; DPF 2020-02-07 - Favor non-robust |from tree to tree|
tree_n1 := n_pp_c-of_le &
 [ ORTH < "tree" >,
   SYNSEM [ LKEYS.KEYREL [ PRED "_tree_n_of_rel",
                           ARG0.SORT nonhuman ],
            LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

trial_n1 := n_-_mc_le &
 [ ORTH < "trial" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_trial_n_1_rel",
   	    LOCAL.CAT.HEAD.--BAREPP [ BP-AT -,
				      BP-ON -,
				      BP-TO - ],
            PHON.ONSET con ] ].

trim_v1 := v_-_le &
 [ ORTH < "trim" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_trim_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

trim_v1_tr := v_np_le &
 [ ORTH < "trim" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_trim_v_1_rel",
            PHON.ONSET con ] ].

trip_v1 := v_np*_le &
 [ ORTH < "trip" >,
   SYNSEM [ LOCAL.CAT [ HEAD.--MAL3SG -,
			VAL.COMPS.FIRST.--SIND.SORT entity ],
	    LKEYS.KEYREL.PRED "_trip_v_1_rel",
            PHON.ONSET con ] ].

triumph_v1 := v_-_le &
 [ ORTH < "triumph" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_triumph_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

;; Avoid "a trouble"
trouble_n1 := n_-_m-ns_le &
 [ ORTH < "trouble" >,
   ALTS.PLMASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_trouble_n_1_rel",
            PHON.ONSET con ] ].

trouble_v1 := v_np_le &
 [ ORTH < "trouble" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_trouble_v_1_rel",
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD noun,
            PHON.ONSET con ] ].

;; Add norm_rel to prevent these from nonhead in the robust n-n_plural rule
;; as in |the trout fish|
trout_n1 := n_-_c_le &
 [ ORTH < "trout" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_trout_n_1_rel",
   	    LOCAL.CAT cat_infl_nosuff &  [ HEAD.--BARE - ],
            PHON.ONSET con ] ].


true_a1 := aj_pp_i_le &
 [ ORTH < "true" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_true_a_of_rel" ],
	    LOCAL.CAT.HEAD.--MALSBRD -,
            PHON.ONSET con ] ].

;; Change type so we can admit |Kim is truly the cat|
truly := av_-_i-vp-x_le &
 [ ORTH < "truly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_true_a_of_rel",
            PHON.ONSET con ] ].

truly_deg := av_-_dg-jomv_le &
 [ ORTH < "truly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_truly_x_deg_rel",
            PHON.ONSET con ] ].

trust_v1 := v_-_le &
 [ ORTH < "trust" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_trust_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

trust_v1_tr := v_np_le &
 [ ORTH < "trust" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_trust_v_1_rel",
            PHON.ONSET con ] ].

try_n1 := n_-_c-nocnh_le &
 [ ORTH < "try" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_try_n_1_rel",
   	    LOCAL.CAT [ HEAD.--BARE -,   	    
			VAL.SPR.FIRST.LOCAL.CAT.HEAD.--POSSRBST - ],
	    PHON.ONSET con ] ].

tune_n1 := n_-_c_le &
 [ ORTH < "tune" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tune_n_1_rel",
   	    LOCAL.CAT.HEAD.--BAREPP.BP-IN -,
            PHON.ONSET con ] ].

turn_n1 := n_pp_c-of_le &
 [ ORTH < "turn" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_turn_n_of_rel",
   	    LOCAL.CAT.HEAD.--BAREPP [ BP-IN -,
				      BP-OUTOF - ],
            PHON.ONSET con ] ].

twin_a1 := aj_-_i-att_le &
 [ ORTH < "twin" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_twin_a_1_rel",
            PHON.ONSET con ] ].

twofold_adv1 := av_-_i-vp-po_le &
 [ ORTH < "twofold" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_twofold_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

tv_n1 := n_-_c-nm_le &
 [ ORTH < "TV" >,
   SYNSEM [ LKEYS.KEYREL.CARG "_TV",
            LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

tv_n2 := n_-_pn_le &
 [ ORTH < "TV" >,
   SYNSEM [ LKEYS.KEYREL.CARG "TV",
            PHON.ONSET con ],
   TOKENS.+LAST.+CLASS.+CASE capitalized ].

tv_n3 := n_-_m-maycap_le &
 [ ORTH < "tv" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_tv_n_1_rel",
            PHON.ONSET con ] ].

type_pl_n1 := n_pp_c-pl-sg_le &
 [ ORTH < "type" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_type_n_of_rel" ],
            LOCAL.CAT [ HEAD.--OFMOD -,
			VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--BARE - ],
            PHON.ONSET con ] ].

type_n2 := n_pp_c-of_le &
 [ ORTH < "type" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_type_n_of-n_rel",
            LOCAL.CAT [ HEAD.--OFMOD -,
			VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--BARE - ],
            PHON.ONSET con ] ].

uncle_n1 := n_pp_c-of_le &
 [ ORTH < "uncle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_uncle_n_of_rel",
	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET voc ] ].

under := p_np_i_le &
 [ ORTH < "under" >,
   SYNSEM [ LKEYS.KEYREL.PRED _under_p_rel,
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--BAREDPP.BP-UNDER +,
            PHON.ONSET voc ] ].

undercut_v1 := v_np_le &
 [ ORTH < "undercut" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_undercut_v_1_rel",
	    LOCAL.CAT.HEAD.TAM.SAME-PAST +,
            PHON.ONSET voc ] ].

ungainly_a1 := aj_-_i_le &
 [ ORTH < "ungainly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_ungainly_a_1_rel",
            LOCAL.CAT.HEAD.--SBRD -,
            PHON.ONSET voc ] ].

uniform_n1 := n_-_c_le &
 [ ORTH < "uniform" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_uniform_n_1_rel",
   	    LOCAL.CAT.HEAD.--BAREPP [ BP-IN -,
				      BP-OUTOF - ],
            PHON.ONSET con ] ].

unique_a1 := aj_pp_i_le &
 [ ORTH < "unique" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_unique_a_to_rel" ],
	    LOCAL.CAT.VAL.SPR.FIRST unexpressed,
            PHON.ONSET con ] ].

;; Block capitalization, to force robust |Beijing University|
university_n1 := n_pp_c-of-lhc_le &
 [ ORTH < "university" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_university_n_of_rel",
            PHON.ONSET con ],
   TOKENS.+LIST.FIRST.+CLASS.+CASE non_capitalized+lower ].

university_post_ttl := n_-_tt-post_le &
 [ ORTH < "University" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_university_n_of_rel",
            LOCAL.CAT.HEAD.MOD.FIRST.LOCAL.CAT.HEAD.--NOTTL +,
            PHON.ONSET con ],
   TOKENS.+LIST.FIRST.+CLASS.+CASE capitalized+lower ].

university_nounif_n1 := n_-_pn-nounif_le &
 [ ORTH < "University" >,
   SYNSEM [ LKEYS.KEYREL.CARG "University",
            PHON.ONSET con ] ].

;; These block "She lives on University Dr."
#|
university_nounif_n1 := n_-_pn-nounif_le &
 [ ORTH < "University" >,
   SYNSEM [ LKEYS.KEYREL.CARG "University",
            PHON.ONSET con ] ].

university_nounif_n2 := n_-_pn-nounif_le &
 [ ORTH < "University", "." >,
   SYNSEM [ LKEYS.KEYREL.CARG "University.",
            PHON.ONSET con ] ].
|#

untimely_a1 := aj_-_i_le &
 [ ORTH < "untimely" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_untimely_a_1_rel",
            LOCAL.CAT.HEAD.--SBRD -,
            PHON.ONSET voc ] ].

up := p_np_i-nm-no-tm_le &
 [ ORTH < "up" >,
   SYNSEM [ LKEYS.KEYREL.PRED _up_p_rel,
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--BAREDPP.BP-UP +,
            PHON.ONSET voc ] ].

upgrade_v1 := v_-_le &
 [ ORTH < "upgrade" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_upgrade_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET voc ] ].

upgrade_v1_tr := v_np_le &
 [ ORTH < "upgrade" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_upgrade_v_1_rel",
            PHON.ONSET voc ] ].

uphill_n1 := n_-_c-nocnh_le &
 [ ORTH < "uphill" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_uphill_n_1_rel",
            LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET voc ] ].

upload_v1 := v_-_le &
 [ ORTH < "upload" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_upload_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET voc ] ].

upload_v1_tr := v_np_le &
 [ ORTH < "upload" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_upload_v_1_rel",
            PHON.ONSET voc ] ].

;; DPF 2019-09-26 - Try excluding noun modif to force robust analysis of
;; "a good impression upon us".
upon := p_np_i_le &
 [ ORTH < "upon" >,
   SYNSEM [ LKEYS.KEYREL.PRED _upon_p_rel,
            LOCAL.CAT [ HEAD.MOD.FIRST.LOCAL.CAT.HEAD v_or_a_or_p,
			VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--BAREDPP.BP-UPON + ],
            PHON.ONSET voc ] ].

upset_v1 := v_np_le &
 [ ORTH < "upset" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_upset_v_1_rel",
            LOCAL.CAT.HEAD [ --MAL3SG -,
			       TAM.SAME-PAST + ],
            PHON.ONSET voc ] ].

upsetting_a1 := aj_-_i-prd_le &
 [ ORTH < "upsetting" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_upsetting_a_1_rel",
            PHON.ONSET voc ] ].

usage_n1 := n_pp_m_le &
 [ ORTH < "usage" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_usage_n_of_rel" ],
            PHON.ONSET con ] ].

;; Make count-only, and handle "take vacation" as idiom, and "on vacation"
vacation_n1 := n_-_c-ns_le &
 [ ORTH < "vacation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vacation_n_1_rel",
            LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

vacation_i_n1 := n_-_c-brj*_le &
 [ ORTH < "vacation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vacation_n_1_rel",
            PHON.ONSET con ] ].

vacation_i_br_n1 := n_-_c-br-idm_le &
 [ ORTH < "vacation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vacation_n_1_rel",
            PHON.ONSET con ] ].

vacation_v1 := v_-_le &
 [ ORTH < "vacation" >,
   SYNSEM [ LOCAL.CAT.HEAD [ --MAL3SG -,
			     --SAMENV + ],
	    LKEYS.KEYREL.PRED "_vacation_v_1_rel",
            PHON.ONSET con ] ].

vacuum_v1 := v_-_le &
 [ ORTH < "vacuum" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vacuum_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

vacuum_v1_tr := v_np_le &
 [ ORTH < "vacuum" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vacuum_v_1_rel",
            PHON.ONSET con ] ].

valentine_n1 := n_-_c_le &
 [ ORTH < "valentine" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_valentine_n_1_rel",
            LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ],
   TOKENS.+LIST.FIRST.+CLASS.+CASE non_capitalized+lower ].

variety_n1 := n_pp_mc-of_le &
 [ ORTH < "variety" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_variety_n_of-n_rel",
            LOCAL.CAT [ HEAD.--OFMOD -,
			VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--BARE - ],
            PHON.ONSET con ] ].

vehicle_n1 := n_-_c-transp_le &
 [ ORTH < "vehicle" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vehicle_n_1_rel",
            PHON.ONSET con ] ].

verbatim_adv1 := av_-_i-vp_le &
 [ ORTH < "verbatim" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_verbatim_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

verify_v1 := v_np_le &
 [ ORTH < "verify" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_verify_v_1_rel",
	    LOCAL.CAT.HEAD.--NOCJCRD -,
            PHON.ONSET con ] ].

video_v1 := v_-_le &
 [ ORTH < "video" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_video_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

video_v1_tr := v_np_le &
 [ ORTH < "video" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_video_v_1_rel",
            PHON.ONSET con ] ].

videotape_v1 := v_-_le &
 [ ORTH < "videotape" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_videotape_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

videotape_v1_tr := v_np_le &
 [ ORTH < "videotape" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_videotape_v_1_rel",
            PHON.ONSET con ] ].

;; Change to simple n_-_c_le to get better ranking for "in view of" and
view_n1 := n_-_c_le &
 [ ORTH < "view" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_view_n_of_rel",
	    LOCAL.CAT.HEAD.--BAREPP [ BP-FROM -,
				      BP-IN -,
				      BP-INTO -,
				      BP-OF -,
				      BP-ON -,
				      BP-OUTOF - ],
            PHON.ONSET con ] ].

;; |Viewing from the top of the hill, ...|
view_v1 := v_np*_le &
 [ ORTH < "view" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_view_v_as_rel",
            PHON.ONSET con ] ].

vigilant_a1 := aj_-_i_le &
 [ ORTH < "vigilant" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vigilant_a_1_rel",
	    LOCAL.CAT.HEAD.--MALSBRD -,
            PHON.ONSET con ] ].

violet_n1 := n_-_c_le &
 [ ORTH < "violet" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_violet_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

;; Avoid robust |place to visit|
;; DPF 2018-11-25 - But this --BARE - blocks robust |I paid visit to Kim|
;; so FIX, probably via ranking.
visit_n1 := n_pp_c_le &
 [ ORTH < "visit" >,
   SYNSEM [ LOCAL.CAT.HEAD [ MINORS.NORM norm_rel,
			     --BARE - ],
   	    LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_visit_n_to_rel" ],
            PHON.ONSET con ] ].

visit_v1 := v_np*_le &
 [ ORTH < "visit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_visit_v_1_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.--SIND.SORT norm-entity-or-event,
            PHON.ONSET con ] ].

visualise_v1 := v_np_le &
 [ DIALECT br,
   ORTH < "visualise" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_visualize_v_1_rel",
	    LOCAL.CAT.HEAD.--NOCJCRD -,
            PHON.ONSET con ] ].

visualize_v1 := v_np_le &
 [ ORTH < "visualize" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_visualize_v_1_rel",
	    LOCAL.CAT.HEAD.--NOCJCRD -,
            PHON.ONSET con ] ].

vital_a3 := aj_cp_i-it_le &
 [ ORTH < "vital" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vital_a_for_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--MAL3SG -,
            PHON.ONSET con ] ].

;; Avoid splitting "plenty of vitamin C"
vitamin_n1 := n_-_c_le &
 [ ORTH < "vitamin" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vitamin_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

;; Enable "enough vitamin C"
vitamin_c_n1 := n_-_m_le &
 [ ORTH < "vitamin", "C" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vitamin+C_n_1_rel",
            PHON.ONSET con ] ].

;; Give this the same type as "vacation", so we can aligh semantics better
vocation_n1 := n_-_c-ns_le &
 [ ORTH < "vocation" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vocation_n_1_rel",
            PHON.ONSET con ] ].

volume_n1 := n_pp_c-of_le &
 [ ORTH < "volume" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_volume_n_of_rel",
            PHON.ONSET con ] ].

vomit_v1 := v_-_le &
 [ ORTH < "vomit" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vomit_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

vote_n1 := n_-_c_le &
 [ ORTH < "vote" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_vote_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

wager_v2 := v_np_le &
 [ ORTH < "wager" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_wager_v_1_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
            PHON.ONSET con ] ].

wait_n1 := n_-_c_le &
 [ ORTH < "wait" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wait_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

;; Hack until we enrich our grammar-code language for edit-composition to
;; express dependency constraints.  Just for exercise 7.F.6650.02
;; Same for the entry for "patiently", which has to be treated here as a
;; degree-specifier in "waited patiently in their seats", since we block vmod.
;; FIX.
;;
wait_in_v1 := v_pp_le &
 [ ORTH < "wait" >,
   SYNSEM [ LKEYS [ --COMPKEY _in_p_rel,
                    KEYREL.PRED "_wait_v_1_rel" ],
            PHON.ONSET con ] ].

wait_v1 := v_-_le &
 [ ORTH < "wait" >,
   SYNSEM [ LKEYS [ --COMPKEY temp_abstr_rel,
                    KEYREL.PRED "_wait_v_1_rel" ],
            PHON.ONSET con ] ].

walk_n1 := n_-_c_le &
 [ ORTH < "walk" >,
   SYNSEM [ LOCAL.CAT.HEAD.--BARE -,
   	    LKEYS.KEYREL.PRED "_walk_n_1_rel",
            PHON.ONSET con ] ].

want_prd := v_np-prd_oeq-ntr-x_le &
 [ ORTH < "want" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_want_v_1_rel",
            PHON.ONSET con ] ].

wanted_a1 := aj_-_i-att_le &
 [ ORTH < "wanted" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wanted_a_1_rel",
            PHON.ONSET con ] ].

war_v1 := v_-_le &
 [ ORTH < "war" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_war_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

;; Avoid robust |be warm|
warm_v2 := v_-_unacc_le &
 [ ORTH < "warm" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_warm_v_1_rel",
	    LOCAL.CAT.HEAD.--MALCOPBSE -,
            PHON.ONSET con ] ].

warn_v2 := v_np_le &
 [ ORTH < "warn" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_warn_v_1_rel",
	    LOCAL.CAT.HEAD [ --CLRC -,
			     --NOCJCRD - ],
            PHON.ONSET con ] ].

warp_v1 := v_-_le &
 [ ORTH < "warp" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_warp_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

warp_v1_tr := v_np_le &
 [ ORTH < "warp" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_warp_v_1_rel",
            PHON.ONSET con ] ].

washing_n1 := n_-_mc-nocnh_le &
 [ ORTH < "washing" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_washing_n_1_rel",
            PHON.ONSET con ] ].

watch_n1 := n_-_c_le &
 [ ORTH < "watch" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_watch_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,   
            PHON.ONSET con ] ].

; Avoid N-N compound |watching movie|
watch_v1 := v_np*_le &
 [ ORTH < "watch" >,
   ALTS.NGER -,
   SYNSEM [ LKEYS.KEYREL.PRED "_watch_v_1_rel",
            PHON.ONSET con ] ].

water_n2 := n_-_m_le &
 [ ORTH < "water" >,
   ALTS.PLMASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_water_n_1_rel",
            PHON.ONSET con ] ].

waters_n1 := n_-_c-pl_le &
 [ ORTH < "waters" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_water_n_1_rel",
            PHON.ONSET con ] ].

water_v2 := v_-_unacc_le &
 [ ORTH < "water" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_water_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

;; DPF 2019-09-23 - Let's try blocking robust bare-NP to avoid in
;; |from wave to wave| where |to wave| is inf-VP relative-clause.
;;
wave_n1 := n_pp_c-of_le &
 [ ORTH < "wave" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wave_n_of_rel",
	    LOCAL.CAT.HEAD.--BARE -,
            PHON.ONSET con ] ].

wave_v1 := v_np*_le &
 [ ORTH < "wave" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wave_v_1_rel",
            LOCAL.CAT.HEAD.--MAL3SG -,
            PHON.ONSET con ] ].

wax_v1 := v_-_le &
 [ ORTH < "wax" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wax_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

wax_v1_tr := v_np_le &
 [ ORTH < "wax" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wax_v_1_rel",
            PHON.ONSET con ] ].

;; 2020-04-07 - Block as nonhd in compound: |only in this way can we succeed|
way_n1 := n_pp_c-mod-of_le &
 [ ORTH < "way" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_way_n_of_rel",
   	    LOCAL.CAT.HEAD [ --BAREPP.BP-UNDER - ,   
	                     MINORS.NORM norm_rel ],
	    --SIND.SORT entity,
            PHON.ONSET con ] ].

weave_v1 := v_np*_le &
 [ ORTH < "weave" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_weave_v_1_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
            PHON.ONSET con ] ].

wealth_n1 := n_pp_m_le &
 [ ORTH < "wealth" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wealth_n_of_rel",
            PHON.ONSET con ] ].

wealth_n2 := n_pp_c-obl_le &
 [ ORTH < "wealth" >,
   SYNSEM [ LKEYS [ --COMPKEY _of_p_sel_rel,
                    KEYREL.PRED "_wealth_n_of_rel" ],
            PHON.ONSET con ] ].

weasel_n1 := n_-_c_le &
 [ ORTH < "weasel" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_weasel_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,   
            PHON.ONSET con ] ].

wed_to_v1 := v_np-pp_e_le &
 [ ORTH < "wed" >,
   SYNSEM [ LKEYS [ --OCOMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_wed_v_to_rel" ],
            PHON.ONSET con ] ].

wed_v1 := v_np*_le &
 [ ORTH < "wed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wed_v_1_rel",
	    LOCAL.CAT.HEAD.TAM.SAME-PAST +,
            PHON.ONSET con ] ].

weed_v1 := v_-_le &
 [ ORTH < "weed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_weed_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

weed_v1_tr := v_np_le &
 [ ORTH < "weed" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_weed_v_1_rel",
            PHON.ONSET con ] ].

week1 := n_-_c-nday_le &
 [ ORTH < "week" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_week_n_1_rel",
            PHON.ONSET con ] ].

week_to_week_adv1 := av_-_i-vp-po_le &
 [ ORTH < "week", "to", "week" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_week+to+week_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

week_to_week_adv2 := av_-_i-vp-po_le &
 [ ORTH < "week", "-", "to", "-", "week" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_week+to+week_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

week_to_week_adv3 := av_-_i-vp-po_le &
 [ ORTH < "week-to-week" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_week+to+week_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

weekly_adv1 := av_-_i-vp-po_le &
 [ ORTH < "weekly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_weekly_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

weight_v1 := v_np_le &
 [ ORTH < "weight" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_weight_v_1_rel",
            LOCAL.CAT.VAL.COMPS.FIRST canonical_synsem,
            PHON.ONSET con ] ].

;; DPF 2019-12-20 - It's not clear why we stamped NORM no_rel here, but it
;; blocks |You are welcome to the candy.|, so let's comment out, and monitor
;; to maybe FIX?
#|
welcome_a1 := aj_-_i_le &
 [ ORTH < "welcome" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_welcome_a_1_rel",
            LOCAL.CAT.HEAD.MINORS.NORM no_rel,
            PHON.ONSET con ] ].
|#

welcome_n1 := n_-_c_le &
 [ ORTH < "welcome" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_welcome_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,   
            PHON.ONSET con ] ].

;; Exclude as cpd nonhead, to avoid |a very well student|
;;
well_n1 := n_-_c-nocnh_le &
 [ ORTH < "well" >,
   SYNSEM [ LOCAL.CAT.HEAD.--BARE -,
   	    LKEYS.KEYREL.PRED "_well_n_1_rel",
            PHON.ONSET con ] ].

westerly_adv1 := av_-_i-vp-po_le &
 [ ORTH < "westerly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_westerly_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

wet_v1 := v_np_noger_le &
 [ ORTH < "wet" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wet_v_cause_rel",
	    LOCAL.CAT.HEAD.TAM.SAME-PAST +,
            PHON.ONSET con ] ].

wet_v2 := v_-_unacc_le &
 [ ORTH < "wet" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wet_v_1_rel",
	    LOCAL.CAT.HEAD.TAM.SAME-PAST +,
            PHON.ONSET con ] ].

what_det_freerel := d_-_freerel_le &
 [ ORTH < "what" >,
   SYNSEM [ LKEYS.KEYREL.PRED free_relative_q_rel,
            LOCAL.CAT.HEAD.MOD < >,
            PHON.ONSET con ] ].

what_is_more_adv1 := av_-_s-cp-pr_le &
 [ ORTH < "what", "is", "more" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_what+is+more_a_1_rel",
            PHON.ONSET con ] ].

what_a_pity_adv1 := av_-_s-cp-pr_le &
 [ ORTH < "what", "a", "pity" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_what+a+pity_a_1_rel",
            PHON.ONSET con ] ].

what_a_shame_adv1 := av_-_s-cp-pr_le &
 [ ORTH < "what", "a", "shame" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_what+a+shame_a_1_rel",
            PHON.ONSET con ] ].

wheeze_v1 := v_np*_le &
 [ ORTH < "wheeze" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wheeze_v_1_rel",
	    LOCAL.CAT.HEAD.--NOCJCRD -,
            PHON.ONSET con ] ].

where_freerel_np := n_-_pr-fr-wh_le &
 [ ORTH < "where" >,
   SYNSEM [ LKEYS [ ALT2KEYREL.PRED loc_nonsp_rel,
                    KEYREL [ PRED place_n_rel,
			     ARG0.SORT place ] ],
            PHON.ONSET con ] ].

while_n1 := n_-_c-sg-ifl-nmd_le &
 [ ORTH < "while" >,
   SYNSEM [ LOCAL.CAT.HEAD.--BARE -,
            LKEYS.KEYREL.PRED "_while_n_1_rel",
            PHON.ONSET con ] ].

white_n1 := n_-_c_le &
 [ ORTH < "white" >,
   SYNSEM [ LOCAL.CAT.HEAD [ MINORS.NORM norm_rel,
                             --BARE - ],
   	    LKEYS.KEYREL.PRED "_white_n_1_rel",
            PHON.ONSET con ] ].

whole_a1 := aj_-_i-unsp_le &
 [ ORTH < "whole" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_whole_a_1_rel",
	    LOCAL.CAT.HEAD.--MALSBRD -,
            PHON.ONSET con ] ].

;; DPF 2018-11-17 - Change AlTMIN to just _the_q_rel to avoid bare NP
;; DPF 2020-09-17 - Block robust "we will"
;;
will_n1 := n_-_mc-ed-nocnh_le &
 [ ORTH < "will" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_will_n_1_rel",
   	    LOCAL [ CAT [ HEAD [ MINORS.ALTMIN explicit_q_rel,
				 --BAREPP.BP-AT - ],
			  VAL.SPR.FIRST.LOCAL.CAT.HEAD.--POSSRBST - ] ],
            PHON.ONSET con ] ].

willow_n1 := n_-_c_le &
 [ ORTH < "willow" >,
   SYNSEM [ LOCAL.CAT.HEAD.--BARE -,
   	    LKEYS.KEYREL.PRED "_willow_n_1_rel",
            PHON.ONSET con ] ].

win_n1 := n_-_c_le &
 [ ORTH < "win" >,
   SYNSEM [ LOCAL.CAT.HEAD.--BARE -,
   	    LKEYS.KEYREL.PRED "_win_n_1_rel",
            PHON.ONSET con ] ].

win_v1 := v_np*_le &
 [ ORTH < "win" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_win_v_1_rel",
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
            PHON.ONSET con ],
   ALTS.MALPASS - ].

winter_sleep_n1 := n_-_c_le &
 [ ORTH < "winter", "sleep" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_winter+sleep_n_1_rel",
            PHON.ONSET con ] ].

winter_v1 := v_-_le &
 [ ORTH < "winter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_winter_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

wire_v1 := v_-_le &
 [ ORTH < "wire" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wire_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

wire_v1_tr := v_np_le &
 [ ORTH < "wire" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wire_v_1_rel",
            PHON.ONSET con ] ].

wish_n1 := n_-_c-ns_le &
 [ ORTH < "wish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wish_n_1_rel",
   	    LOCAL.CAT.VAL.SPR.FIRST.LOCAL.CAT.HEAD.--POSSRBST -,
            PHON.ONSET con ] ].

wish_v4 := v_-_le &
 [ ORTH < "wish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wish_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

wish_v4_tr := v_np_le &
 [ ORTH < "wish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wish_v_1_rel",
            PHON.ONSET con ] ].

wish_v5 := v_pp*-cp_le &
 [ ORTH < "wish" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_wish_v_1_rel" ],
	    LOCAL.CAT.VAL.COMPS < [], [ LOCAL [ CAT.HEAD.--MAL3SG -,
						CONT.HOOK.INDEX.E.MOOD
	                                                        modal_subj ]] >,
	    PHON.ONSET con ] ].

wish_v5_past := v_pp*-cp_le &
 [ ORTH < "wish" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_wish_v_1_rel" ],
	    LOCAL.CAT.VAL.COMPS < [], 
				  [ LOCAL [ CAT.HEAD.--MAL3SG -,
					    CONT.HOOK.INDEX.E.TENSE past ] ] >,
	    PHON.ONSET con ] ].

wish_v5_non3s := v_pp*-cp_le &
 [ ORTH < "wish" >,
   SYNSEM [ LKEYS [ --COMPKEY _to_p_sel_rel,
                    KEYREL.PRED "_wish_v_1_rel" ],
	    LOCAL.CAT.VAL.COMPS < [], 
				  [ LOCAL [ CAT.HEAD.--MAL3SG -,
					    CONT.HOOK [ INDEX.E.TENSE present,
							XARG.PNG.PN 3p ] ] ] >,
	    PHON.ONSET con ] ].
wish_v8 := v_-_le &
 [ ORTH < "wish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wish_v_1_rel",
            PHON.ONSET con ] ].

wish_v9 := v_np-prd_oeq_le &
 [ ORTH < "wish" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wish_v_1_rel",
	    LOCAL.CAT.HEAD.--SBRDMOD -,
            PHON.ONSET con ] ].

wishes_n1 := n_-_c-pl_le &
 [ ORTH < "wishes" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wish_n_1_rel",
            PHON.ONSET con ] ].

within := p_np_i_le &
 [ ORTH < "within" >,
   SYNSEM [ LKEYS.KEYREL.PRED _within_p_rel,
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--BAREDPP.BP-WITHIN +,
            PHON.ONSET con ] ].

without := p_np_i_le &
 [ ORTH < "without" >,
   SYNSEM [ LKEYS.KEYREL.PRED _without_p_rel,
	    LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--BAREDPP.BP-WITHOUT +,
            PHON.ONSET con ] ].

wobbly_a1 := aj_-_i_le &
 [ ORTH < "wobbly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wobbly_a_1_rel",
            LOCAL.CAT.HEAD.--SBRD -,
            PHON.ONSET con ] ].

woman1 := n_-_c-fem_le &
 [ ORTH < "woman" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_woman_n_1_rel",
            PHON.ONSET con ] ].

wonder_v2 := v_-_le &
 [ ORTH < "wonder" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wonder_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

wonderful_a2 := aj_pp-vp_i-it_le &
 [ ORTH < "wonderful" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wonderful_a_for_rel",
            PHON.ONSET con ],
   ALTS.AVIP - ].

woolly_a1 := aj_-_i_le &
 [ ORTH < "woolly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_woolly_a_1_rel",
            LOCAL.CAT.HEAD.--SBRD -,
            PHON.ONSET con ] ].

;; 2021-04-16 - --COLLOC blocks "home work" so error code appears
work_n1 := n_-_m_le &
 [ ORTH < "work" >,
   ALTS.PLMASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_work_n_1_rel",
            LOCAL [ CAT.HEAD.--COLLOC -,
		    CONT.HOOK.INDEX.PNG.GEN neut ],
            PHON.ONSET con ] ].

work_n2 := n_vp_c_le &
 [ ORTH < "work" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_work_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,   
            PHON.ONSET con ] ].

work_v1 := v_-_le &
 [ ORTH < "work" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_work_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

work_v1_tr := v_np_le &
 [ ORTH < "work" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_work_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

work_of_art_n1 := n_-_c-sg_le &
 [ ORTH < "work", "of", "art" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_work+of+art_n_1_rel",
            PHON.ONSET con ] ].

works_of_art_n1 := n_-_c-pl_le &
 [ ORTH < "works", "of", "art" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_work+of+art_n_1_rel",
            PHON.ONSET con ] ].

world_n1 := n_pp_c-of_le &
 [ ORTH < "world" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_world_n_of_rel",
            PHON.ONSET con ],
   TOKENS.+LAST.+CLASS.+CASE non_capitalized ].

worldly_a1 := aj_-_i_le &
 [ ORTH < "worldly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_worldly_a_1_rel",
            LOCAL.CAT.HEAD.--SBRD -,
            PHON.ONSET con ] ].

worried_isect := aj_pp_i-sbrd_le &
 [ ORTH < "worried" >,
   SYNSEM [ LKEYS [ --COMPKEY _about_p_sel_rel,
                    KEYREL.PRED "_worried_a_about_rel" ],
            PHON.ONSET con ] ].

worry_v2 := v_-_le &
 [ ORTH < "worry" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_worry_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

worry_v2_tr := v_np_le &
 [ ORTH < "worry" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_worry_v_1_rel",
            PHON.ONSET con ] ].

worse_a1 := aj_pp_i-cmp_le &
 [ ORTH < "worse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bad_a_for_rel",
            LOCAL.CAT.HEAD.PRD +,
            PHON.ONSET con ] ].

;; Block |The worse player lost|.  Concede that we also fail to parse
;; |We rejected a worse solution|
worse_a1_attrib := aj_pp_i-cmp_le &
 [ ORTH < "worse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_bad_a_for_rel",
            LOCAL.CAT.HEAD [ PRD -,
	                     MOD.FIRST.LOCAL.CAT.VAL.SPR.FIRST unexpressed ],
            PHON.ONSET con ] ].

worse_adv := av_-_i-vp-po_le &
 [ ORTH < "worse" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_worse_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

worship_v1 := v_-_le &
 [ ORTH < "worship" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_worship_v_1_rel",
	    LOCAL.CAT.HEAD.--SAMENV +,
            PHON.ONSET con ] ].

worship_v1_tr := v_np_le &
 [ ORTH < "worship" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_worship_v_1_rel",
            PHON.ONSET con ] ].

worthwhile_a1 := aj_-_i_le &
 [ ORTH < "worthwhile" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_worthwhile_a_1_rel",
            LOCAL.CAT.HEAD.--SBRD -,
            PHON.ONSET con ] ].

worthwhile_a2 := aj_-_i_le &
 [ ORTH < "worth", "while" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_worthwhile_a_1_rel",
            LOCAL.CAT.HEAD.--SBRD -,
            PHON.ONSET con ] ].

#|
would_aux_pos := v_vp_mdl-p-unsp_le &
 [ ORTH < "would" >,
   SYNSEM [ LKEYS.KEYREL.PRED _would_v_modal_rel,
   	    LOCAL.CONT.HOOK.INDEX.E.MOOD modal_subj,
            PHON.ONSET con ] ].
|#

wrinkly_a1 := aj_-_i_le &
 [ ORTH < "wrinkly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wrinkly_a_1_rel",
            LOCAL.CAT.HEAD.--SBRD -,
            PHON.ONSET con ] ].

write_v3 := v_np*_le &
 [ ORTH < "write" >,
   ALTS.MALPASS -,
   SYNSEM [ LKEYS.KEYREL.PRED "_write_v_to_rel",
	    LOCAL.CAT [ HEAD.--CLRC -,
			VAL.COMPS.FIRST.LOCAL.CAT.HEAD.--POSSRBST - ],
            PHON.ONSET con ] ].

writing_n1 := n_-_m_le &
 [ ORTH < "writing" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_writing_n_1_rel",
            PHON.ONSET con ] ].

wrong_adv1 := av_-_i-vp-po_le &
 [ ORTH < "wrong" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_wrong_a_with_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

year_nounif_n1 := n_-_pn-nounif_le &
 [ ORTH < "Year" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Year",
            PHON.ONSET con ] ].

year_nounif_n2 := n_-_pn-nounif_le &
 [ ORTH < "Year", "." >,
   SYNSEM [ LKEYS.KEYREL.CARG "Year.",
            PHON.ONSET con ] ].

year_nounif_n3 := n_-_pn-nounif_le &
 [ ORTH < "Year", "." >,
   SYNSEM [ LKEYS.KEYREL.CARG "Year,",
            PHON.ONSET con ] ].

year_olds_n1 := n_-_c-pl_le &
 [ ORTH < "year", "olds" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_year-olds_n_1_rel",
            PHON.ONSET con ] ].

year_olds_n2 := n_-_c-pl_le &
 [ ORTH < "year", "-", "olds" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_year-olds_n_1_rel",
            PHON.ONSET con ] ].

year_on_year_adv1 := av_-_i-vp-po_le &
 [ ORTH < "year", "on", "year" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_year+on+year_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

year_on_year_adv2 := av_-_i-vp-po_le &
 [ ORTH < "year", "-", "on", "-", "year" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_year+on+year_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

year_on_year_adv3 := av_-_i-vp-po_le &
 [ ORTH < "year-on-year" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_year+on+year_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

year_round_adv1 := av_-_i-vp-po_le &
 [ ORTH < "year", "-", "round" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_year-round_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

year_round_adv2 := av_-_i-vp-po_le &
 [ ORTH < "year", "round" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_year-round_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

year_to_year_adv1 := av_-_i-vp-po_le &
 [ ORTH < "year", "to", "year" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_year+to+year_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

year_to_year_adv2 := av_-_i-vp-po_le &
 [ ORTH < "year", "-", "to", "-", "year" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_year+to+year_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

year_to_year_adv3 := av_-_i-vp-po_le &
 [ ORTH < "year-to-year" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_year+to+year_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

yearly_adv1 := av_-_i-vp-po_le &
 [ ORTH < "yearly" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_yearly_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

;; "at only seven years old, his English is good"
years_old_meas_n1 := n_-_c-pl-nocnh_le &
 [ ORTH < "years", "old" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_year-old_n_1_rel",
            PHON.ONSET con ] ].

yellows_n1 := n_-_c-pl_le &
 [ ORTH < "yellows" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_yellow_n_1_rel",
            PHON.ONSET con ] ].

yelp_v1 := v_np*_le &
 [ ORTH < "yelp" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_yelp_v_1_rel",
	    LOCAL.CAT.HEAD.--NOCJCRD -,
            PHON.ONSET con ] ].

;; Avoid |... in the park dart ...|
dart_n1 := n_-_c-nochd_le &
 [ ORTH < "dart" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_dart_n_1_rel",
            PHON.ONSET con ] ].

did1_neg_1 := v_vp_did-n_le &
 [ ORTH < "didn't" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

did1_neg_2 := v_vp_did-n_le &
 [ ORTH < "didn", "'t" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

do1_neg_1 := v_vp_do-f-n_le &
 [ ORTH < "don't" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

do1_neg_2 := v_vp_do-f-n_le &
 [ ORTH < "don", "'t" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

does1_neg_1 := v_vp_does-n_le &
 [ ORTH < "doesn't" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

does1_neg_2 := v_vp_does-n_le &
 [ ORTH < "doesn", "'t" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

dont_1 := v_vp_dont-imp_le &
 [ ORTH < "don't" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

dont_2 := v_vp_dont-imp_le &
 [ ORTH < "don", "'t" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

hadnt_aux_1 := v_vp_had-n_le &
 [ ORTH < "hadn't" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

hadnt_aux_2 := v_vp_had-n_le &
 [ ORTH < "hadn", "'t" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

hadnt_aux_subj_1 := v_vp_had-n-sv_le &
 [ ORTH < "hadn't" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

hadnt_aux_subj_2 := v_vp_had-n-sv_le &
 [ ORTH < "hadn", "'t" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

hasnt_aux_1 := v_vp_has-n_le &
 [ ORTH < "hasn't" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

hasnt_aux_2 := v_vp_has-n_le &
 [ ORTH < "hasn", "'t" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

have_fin_aux_neg_1 := v_vp_have-f-n_le &
 [ ORTH < "haven't" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

have_fin_aux_neg_2 := v_vp_have-f-n_le &
 [ ORTH < "haven", "'t" >,
   SYNSEM [ PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

might_aux_neg_1 := v_vp_mdl-n-sv_le &
 [ ORTH < "mightn't" >,
   SYNSEM [ LKEYS.KEYREL.PRED _might_v_modal_rel,
            PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

might_aux_neg_2 := v_vp_mdl-n-sv_le &
 [ ORTH < "mightn", "'t" >,
   SYNSEM [ LKEYS.KEYREL.PRED _might_v_modal_rel,
            PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

must_aux_neg_1 := v_vp_must-n_le &
 [ ORTH < "mustn't" >,
   SYNSEM [ LKEYS.KEYREL.PRED _must_v_modal_rel,
            PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

must_aux_neg_2 := v_vp_must-n_le &
 [ ORTH < "mustn", "'t" >,
   SYNSEM [ LKEYS.KEYREL.PRED _must_v_modal_rel,
            PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

need_aux_neg_1 := v_vp_mdl-n_le &
 [ ORTH < "needn't" >,
   SYNSEM [ LKEYS.KEYREL.PRED _need_v_qmodal_rel,
            PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

need_aux_neg_2 := v_vp_mdl-n_le &
 [ ORTH < "needn", "'t" >,
   SYNSEM [ LKEYS.KEYREL.PRED _need_v_qmodal_rel,
            PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

#|
need_not_v2 := v_vp_ssr-n3sg_le &
 [ ORTH < "needn't" >,
   SYNSEM [ LKEYS [ ALTKEYREL.PRED neg_rel,
                    KEYREL.PRED "_need_v_1_rel" ],
            PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

need_not_v2 := v_vp_ssr-n3sg_le &
 [ ORTH < "needn", "'t" >,
   SYNSEM [ LKEYS [ ALTKEYREL.PRED neg_rel,
                    KEYREL.PRED "_need_v_1_rel" ],
            PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].
|#

ought_aux_neg_1 := v_vp_oght-n_le &
 [ ORTH < "oughtn't" >,
   SYNSEM [ LKEYS.KEYREL.PRED _ought_v_qmodal_rel,
            PHON.ONSET voc,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

ought_aux_neg_2 := v_vp_oght-n_le &
 [ ORTH < "oughtn", "'t" >,
   SYNSEM [ LKEYS.KEYREL.PRED _ought_v_qmodal_rel,
            PHON.ONSET voc,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

should_aux_neg_1 := v_vp_mdl-n_le &
 [ ORTH < "shouldn't" >,
   SYNSEM [ LKEYS.KEYREL.PRED _should_v_modal_rel,
            PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

#|
should_aux_neg_2 := v_vp_mdl-n-pst_le &
 [ ORTH < "shouldn", "'t" >,
   SYNSEM [ LKEYS.KEYREL.PRED _should_v_modal_rel,
            PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

should_aux_neg_3_u := v_vp_mdl-n-pst_le &
 [ ORTH < "shouldn’t" >,
   SYNSEM [ LKEYS.KEYREL.PRED _should_v_modal_rel,
            PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].
|#

will_aux_neg_1 := v_vp_will-n_le &
 [ ORTH < "won't" >,
   SYNSEM [ LKEYS.KEYREL.PRED _will_v_aux_rel,
            PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

will_aux_neg_2 := v_vp_will-n_le &
 [ ORTH < "won", "'t" >,
   SYNSEM [ LKEYS.KEYREL.PRED _will_v_aux_rel,
            PHON.ONSET con,
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.NEGPOL - ] ].

world_wide_web_n1 := n_-_pn_le &
 [ ORTH < "World", "Wide", "Web" >,
   SYNSEM [ LKEYS.KEYREL.CARG "World+Wide+Web",
            PHON.ONSET con ] ].

worry_about_v1 := v_pp_e_le &
 [ ORTH < "worry" >,
   SYNSEM [ LKEYS [ --COMPKEY _about_p_sel_rel,
                    KEYREL.PRED "_worry_v_about_rel" ],
	    LOCAL.CAT.HEAD.--HAVEBE -,
            PHON.ONSET con ] ].

;; DPF 2017-09-23 - Restrict to past tense to enable matching of tense in main
;; and dependent clauses.  Maybe undo, depending on how often this goes wrong
;; as in |I would rather quit this job because my other one is good|
;; Yes, let's try leaving positive would underspecified for tense, but restrict
;; |wouldn't| to past tense.
;;
#|
would_aux_pos := v_vp_mdl-p-pst_le &
 [ ORTH < "would" >,
   SYNSEM [ LKEYS.KEYREL.PRED _would_v_modal_rel,
            PHON.ONSET con ] ].
|#

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Appendix 2
;; Proper names, for gender

aaron_n1 := n_-_pn-msc_le &
 [ ORTH < "Aaron" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Aaron",
            PHON.ONSET voc ] ].

abdul_n1 := n_-_pn-msc_le &
 [ ORTH < "Abdul" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Abdul",
            PHON.ONSET voc ] ].

abigail_n1 := n_-_pn-fem_le &
 [ ORTH < "Abigail" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Abigail",
            PHON.ONSET voc ] ].

adam_n1 := n_-_pn-msc_le &
 [ ORTH < "Adam" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Adam",
            PHON.ONSET voc ] ].

aisha_n1 := n_-_pn-fem_le &
 [ ORTH < "Aisha" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Aisha",
            PHON.ONSET voc ] ].

alana_n1 := n_-_pn-fem_le &
 [ ORTH < "Alana" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Alana",
            PHON.ONSET voc ] ].

alaska_n1 := n_-_pn-neut_le &
 [ ORTH < "Alaska" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Alaska",
            PHON.ONSET voc ] ].

albania_n1 := n_-_pn-neut_le &
 [ ORTH < "Albania" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Albania",
            PHON.ONSET voc ] ].

alejandro_n1 := n_-_pn-msc_le &
 [ ORTH < "Alejandro" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Alejandro",
            PHON.ONSET voc ] ].

alex_n1 := n_-_pn-msc_le &
 [ ORTH < "Alex" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Alex",
            PHON.ONSET voc ] ].

alexandra_n1 := n_-_pn-fem_le &
 [ ORTH < "Alexandra" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Alexandra",
            PHON.ONSET voc ] ].

alicia_n1 := n_-_pn-fem_le &
 [ ORTH < "Alicia" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Alicia",
            PHON.ONSET voc ] ].

amanda := n_-_pn-fem_le &
 [ ORTH < "Amanda" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Amanda",
            PHON.ONSET voc ] ].

amara_n1 := n_-_pn-fem_le &
 [ ORTH < "Amara" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Amara",
            PHON.ONSET voc ] ].

amber_n1 := n_-_pn-fem_le &
 [ ORTH < "Amber" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Amber",
            PHON.ONSET voc ] ].

amelia_n1 := n_-_pn-fem_le &
 [ ORTH < "Amelia" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Amelia",
            PHON.ONSET voc ] ].

amit_n1 := n_-_pn-fem_le &
 [ ORTH < "Amit" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Amit",
            PHON.ONSET voc ] ].

amy_n1 := n_-_pn-fem_le &
 [ ORTH < "Amy" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Amy",
            PHON.ONSET voc ] ].

ana_n1 := n_-_pn-fem_le &
 [ ORTH < "Ana" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Ana",
            PHON.ONSET voc ] ].

andre_n1 := n_-_pn-msc_le &
 [ ORTH < "Andre" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Andre",
            PHON.ONSET voc ] ].

andrew_n1 := n_-_pn-msc_le &
 [ ORTH < "Andrew" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Andrew",
            PHON.ONSET voc ] ].

angela_n1 := n_-_pn-fem_le &
 [ ORTH < "Angela" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Angela",
            PHON.ONSET voc ] ].

angelina_n1 := n_-_pn-fem_le &
 [ ORTH < "Angelina" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Angelina",
            PHON.ONSET voc ] ].

anita_n1 := n_-_pn-fem_le &
 [ ORTH < "Anita" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Anita",
            PHON.ONSET voc ] ].

ann_n1 := n_-_pn-fem_le &
 [ ORTH < "Ann" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Ann",
            PHON.ONSET voc ] ].

anna_n1 := n_-_pn-fem_le &
 [ ORTH < "Anna" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Anna",
            PHON.ONSET voc ] ].

anne_n1 := n_-_pn-fem_le &
 [ ORTH < "Anne" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Anne",
            PHON.ONSET voc ] ].

annie_n1 := n_-_pn-fem_le &
 [ ORTH < "Annie" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Annie",
            PHON.ONSET voc ] ].

anthony_n1 := n_-_pn-msc_le &
 [ ORTH < "Anthony" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Anthony",
            PHON.ONSET voc ] ].

antonia_n1 := n_-_pn-fem_le &
 [ ORTH < "Antonia" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Antonia",
            PHON.ONSET voc ] ].

antonio_n1 := n_-_pn-msc_le &
 [ ORTH < "Antonio" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Antonio",
            PHON.ONSET voc ] ].

ariana_n1 := n_-_pn-fem_le &
 [ ORTH < "Ariana" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Ariana",
            PHON.ONSET voc ] ].

arizona_n1 := n_-_pn-neut_le &
 [ ORTH < "Arizona" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Arizona",
            PHON.ONSET voc ] ].

arnold_n1 := n_-_pn-msc_le &
 [ ORTH < "Arnold" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Arnold",
            PHON.ONSET voc ] ].

ashley_n1 := n_-_pn-fem_le &
 [ ORTH < "Ashley" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Ashley",
            PHON.ONSET voc ] ].

audrey_n1 := n_-_pn-fem_le &
 [ ORTH < "Audrey" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Audrey",
            PHON.ONSET voc ] ].

ava_n1 := n_-_pn-fem_le &
 [ ORTH < "Ava" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Ava",
            PHON.ONSET voc ] ].

beaver_n1 := n_-_pn-msc_le &
 [ ORTH < "Beaver" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Beaver",
            PHON.ONSET con ] ].

beezus_n1 := n_-_pn-msc_le &
 [ ORTH < "Beezus" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Beezus",
            PHON.ONSET con ] ].

ben_n1 := n_-_pn-msc_le &
 [ ORTH < "Ben" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Ben",
            PHON.ONSET con ] ].

bermuda_n1 := n_-_pn-neut_le &
 [ ORTH < "Bermuda" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Bermuda",
            PHON.ONSET con ] ].

bill_n4 := n_-_pn-msc_le &
 [ ORTH < "Bill" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Bill",
            PHON.ONSET con ] ].

blake_n1 := n_-_pn-msc_le &
 [ ORTH < "Blake" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Blake",
            PHON.ONSET con ] ].

bob := n_-_pn-msc_le &
 [ ORTH < "Bob" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Bob",
            PHON.ONSET con ] ].

boris_n1 := n_-_pn-msc_le &
 [ ORTH < "Boris" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Boris",
            PHON.ONSET con ] ].

brad_n1 := n_-_pn-msc_le &
 [ ORTH < "Brad" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Brad",
            PHON.ONSET con ] ].

brahman_n1 := n_-_c-nm_le &
 [ ORTH < "Brahman" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Brahman",
            LOCAL.CONT.HOOK.INDEX.PNG.GEN masc,
            PHON.ONSET con ] ].

brandon_n1 := n_-_pn-msc_le &
 [ ORTH < "Brandon" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Brandon",
            PHON.ONSET con ] ].

brianna_n1 := n_-_pn-fem_le &
 [ ORTH < "Brianna" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Brianna",
            PHON.ONSET con ] ].

bryan_n1 := n_-_pn-msc_le &
 [ ORTH < "Bryan" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Bryan",
            PHON.ONSET con ] ].

caleb_n1 := n_-_pn-msc_le &
 [ ORTH < "Caleb" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Caleb",
            PHON.ONSET con ] ].

california_n1 := n_-_pn-neut_le &
 [ ORTH < "California" >,
   SYNSEM [ LKEYS.KEYREL.CARG "California",
            PHON.ONSET con ] ].

canada_n1 := n_-_pn-neut_le &
 [ ORTH < "Canada" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Canada",
            PHON.ONSET con ] ].

candace_n1 := n_-_pn-fem_le &
 [ ORTH < "Candace" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Candace",
            PHON.ONSET con ] ].

carlos_n1 := n_-_pn-msc_le &
 [ ORTH < "Carlos" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Carlos",
            PHON.ONSET con ] ].

carly_n1 := n_-_pn-fem_le &
 [ ORTH < "Carly" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Carly",
            PHON.ONSET con ] ].

caroline_n1 := n_-_pn-fem_le &
 [ ORTH < "Caroline" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Caroline",
            PHON.ONSET con ] ].

carter_n1 := n_-_pn-msc_le &
 [ ORTH < "Carter" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Carter",
            PHON.ONSET con ] ].

cathy_n1 := n_-_pn-fem_le &
 [ ORTH < "Cathy" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Cathy",
            PHON.ONSET con ] ].

celeste_n1 := n_-_pn-fem_le &
 [ ORTH < "Celeste" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Celeste",
            PHON.ONSET con ] ].

cesar_n1 := n_-_pn-msc_le &
 [ ORTH < "Cesar" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Cesar",
            PHON.ONSET con ] ].

charles_n1 := n_-_pn-msc_le &
 [ ORTH < "Charles" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Charles",
            PHON.ONSET con ] ].

;; DPF 2019-06-06 - Block |China people|
china_n1 := n_-_pn-neut_le &
 [ ORTH < "China" >,
   SYNSEM [ LKEYS.KEYREL.CARG "China",
            LOCAL.CAT.HEAD.MINORS.NORM no_rel,
            PHON.ONSET con ] ].

chloe_n1 := n_-_pn-fem_le &
 [ ORTH < "Chloe" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Chloe",
            PHON.ONSET con ] ].

christian_n2 := n_-_pn-msc_le &
 [ ORTH < "Christian" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Christian",
            PHON.ONSET con ] ].

christina_n1 := n_-_pn-fem_le &
 [ ORTH < "Christina" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Christina",
            PHON.ONSET con ] ].

christopher_n1 := n_-_pn-msc_le &
 [ ORTH < "Christopher" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Christopher",
            PHON.ONSET con ] ].

cid_n1 := n_-_pn-msc_le &
 [ ORTH < "Cid" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Cid",
            PHON.ONSET con ] ].

cinderella_n1 := n_-_pn-fem_le &
 [ ORTH < "Cinderella" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Cinderella",
            PHON.ONSET con ] ].

cindy_n1 := n_-_pn-fem_le &
 [ ORTH < "Cindy" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Cindy",
            PHON.ONSET con ] ].

claire_n1 := n_-_pn-fem_le &
 [ ORTH < "Claire" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Claire",
            PHON.ONSET con ] ].

clarence_n1 := n_-_pn-msc_le &
 [ ORTH < "Clarence" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Clarence",
            PHON.ONSET con ] ].

claudia_n1 := n_-_pn-fem_le &
 [ ORTH < "Claudia" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Claudia",
            PHON.ONSET con ] ].

cody_n1 := n_-_pn-msc_le &
 [ ORTH < "Cody" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Cody",
            PHON.ONSET con ] ].

colin_n1 := n_-_pn-msc_le &
 [ ORTH < "Colin" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Colin",
            PHON.ONSET con ] ].

cooper_n1 := n_-_pn-msc_le &
 [ ORTH < "Cooper" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Cooper",
            PHON.ONSET con ] ].

cub_n2 := n_-_pn-msc_le &
 [ ORTH < "Cub" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Cub",
            PHON.ONSET con ] ].

curtis_n1 := n_-_pn-msc_le &
 [ ORTH < "Curtis" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Curtis",
            PHON.ONSET con ] ].

cyclops_n1 := n_-_c-nm_le &
 [ ORTH < "Cyclops" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Cyclops",
            LOCAL.CONT.HOOK.INDEX.PNG.GEN masc,
            PHON.ONSET con ] ].

daily_adv1 := av_-_i-vp-po_le &
 [ ORTH < "daily" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_daily_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

daisy_n1 := n_-_pn-fem_le &
 [ ORTH < "Daisy" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Daisy",
            PHON.ONSET con ] ].

daisy_n2 := n_-_c_le &
 [ ORTH < "daisy" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_daisy_n_1_rel",
   	    LOCAL.CAT.HEAD.--BARE -,   
            PHON.ONSET con ] ].

darryl_n1 := n_-_pn-msc_le &
 [ ORTH < "Darryl" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Darryl",
            PHON.ONSET con ] ].

david_n1 := n_-_pn-msc_le &
 [ ORTH < "David" >,
   SYNSEM [ LKEYS.KEYREL.CARG "David",
            PHON.ONSET con ] ].

day_to_day_adv1 := av_-_i-vp-po_le &
 [ ORTH < "day", "to", "day" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_day+to+day_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

day_to_day_adv2 := av_-_i-vp-po_le &
 [ ORTH < "day", "-", "to", "-", "day" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_day+to+day_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

day_to_day_adv3 := av_-_i-vp-po_le &
 [ ORTH < "day-to-day" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_day+to+day_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

deborah_n1 := n_-_pn-fem_le &
 [ ORTH < "Deborah" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Deborah",
            PHON.ONSET con ] ].

deep_adv := av_-_i-vp-po_le &
 [ ORTH < "deep" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_deep_a_1_rel",
	    LOCAL.CAT.HEAD.--ADVADJ -,
            PHON.ONSET con ] ].

delaware_n1 := n_-_pn-neut_le &
 [ ORTH < "Delaware" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Delaware",
            PHON.ONSET con ] ].

dennis_n1 := n_-_pn-msc_le &
 [ ORTH < "Dennis" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Dennis",
            PHON.ONSET con ] ].

destiny_n2 := n_-_pn-fem_le &
 [ ORTH < "Destiny" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Destiny",
            PHON.ONSET con ] ].

detroit_n1 := n_-_pn-neut_le &
 [ ORTH < "Detroit" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Detroit",
            PHON.ONSET con ] ].

diana_n1 := n_-_pn-fem_le &
 [ ORTH < "Diana" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Diana",
            PHON.ONSET con ] ].

diego_n1 := n_-_pn-msc_le &
 [ ORTH < "Diego" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Diego",
            PHON.ONSET con ] ].

donna_n1 := n_-_pn-fem_le &
 [ ORTH < "Donna" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Donna",
            PHON.ONSET con ] ].

dylan_n1 := n_-_pn-msc_le &
 [ ORTH < "Dylan" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Dylan",
            PHON.ONSET con ] ].

eddie_n1 := n_-_pn-msc_le &
 [ ORTH < "Eddie" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Eddie",
            PHON.ONSET voc ] ].

edgar_n1 := n_-_pn-msc_le &
 [ ORTH < "Edgar" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Edgar",
            PHON.ONSET voc ] ].

eduardo_n1 := n_-_pn-msc_le &
 [ ORTH < "Eduardo" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Eduardo",
            PHON.ONSET voc ] ].

elba_n1 := n_-_pn-fem_le &
 [ ORTH < "Elba" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Elba",
            PHON.ONSET voc ] ].

elena_n1 := n_-_pn-fem_le &
 [ ORTH < "Elena" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Elena",
            PHON.ONSET voc ] ].

elijah_n1 := n_-_pn-msc_le &
 [ ORTH < "Elijah" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Elijah",
            PHON.ONSET voc ] ].

ella_n1 := n_-_pn-fem_le &
 [ ORTH < "Ella" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Ella",
            PHON.ONSET voc ] ].

ellen_n1 := n_-_pn-fem_le &
 [ ORTH < "Ellen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Ellen",
            PHON.ONSET voc ] ].

emily_n1 := n_-_pn-fem_le &
 [ ORTH < "Emily" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Emily",
            PHON.ONSET voc ] ].

elena_n1 := n_-_pn-fem_le &
 [ ORTH < "Elena" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Elena",
            PHON.ONSET voc ] ].

elijah_n1 := n_-_pn-msc_le &
 [ ORTH < "Elijah" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Elijah",
            PHON.ONSET voc ] ].

ella_n1 := n_-_pn-fem_le &
 [ ORTH < "Ella" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Ella",
            PHON.ONSET voc ] ].

ellen_n1 := n_-_pn-fem_le &
 [ ORTH < "Ellen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Ellen",
            PHON.ONSET voc ] ].

emily_n1 := n_-_pn-fem_le &
 [ ORTH < "Emily" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Emily",
            PHON.ONSET voc ] ].

english_n1 := n_-_pn-neut_le &
 [ ORTH < "English" >,
   SYNSEM [ LKEYS.KEYREL.CARG "English",
            PHON.ONSET voc ] ].

eric_n1 := n_-_pn-msc_le &
 [ ORTH < "Eric" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Eric",
            PHON.ONSET voc ] ].

ernie_n1 := n_-_pn-msc_le &
 [ ORTH < "Ernie" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Ernie",
            PHON.ONSET voc ] ].

ethan_n1 := n_-_pn-msc_le &
 [ ORTH < "Ethan" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Ethan",
            PHON.ONSET voc ] ].

evelyn_n1 := n_-_pn-fem_le &
 [ ORTH < "Evelyn" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Evelyn",
            PHON.ONSET voc ] ].

faith_n2 := n_-_pn-fem_le &
 [ ORTH < "Faith" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Faith",
            PHON.ONSET con ] ].

felix_n1 := n_-_pn-msc_le &
 [ ORTH < "Felix" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Felix",
            PHON.ONSET con ] ].

fernando_n1 := n_-_pn-msc_le &
 [ ORTH < "Fernando" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Fernando",
            PHON.ONSET con ] ].

florida_n1 := n_-_pn-neut_le &
 [ ORTH < "Florida" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Florida",
            PHON.ONSET con ] ].

france_n1 := n_-_pn-neut_le &
 [ ORTH < "France" >,
   SYNSEM [ LKEYS.KEYREL.CARG "France",
            PHON.ONSET con ] ].

francisco_n1 := n_-_pn-msc_le &
 [ ORTH < "Francisco" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Francisco",
            PHON.ONSET con ] ].

frank_n1 := n_-_pn-msc_le &
 [ ORTH < "Frank" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Frank",
            PHON.ONSET con ] ].

fred_n1 := n_-_pn-msc_le &
 [ ORTH < "Fred" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Fred",
            PHON.ONSET con ] ].

french_n1 := n_-_pn_le &
 [ ORTH < "French" >,
   SYNSEM [ LKEYS.KEYREL.CARG "French",
            PHON.ONSET con ] ].

gabe_n1 := n_-_pn-msc_le &
 [ ORTH < "Gabe" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Gabe",
            PHON.ONSET con ] ].

gabriella_n1 := n_-_pn-fem_le &
 [ ORTH < "Gabriella" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Gabriella",
            PHON.ONSET con ] ].

gary_n1 := n_-_pn-msc_le &
 [ ORTH < "Gary" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Gary",
            PHON.ONSET con ] ].

george_n1 := n_-_pn-msc_le &
 [ ORTH < "George" >,
   SYNSEM [ LKEYS.KEYREL.CARG "George",
            PHON.ONSET con ] ].

gina_n1 := n_-_pn-fem_le &
 [ ORTH < "Gina" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Gina",
            PHON.ONSET con ] ].

go_fish_n1 := n_-_pn-neut_le &
 [ ORTH < "Go", "Fish" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Go+Fish",
            PHON.ONSET con ] ].

grace_n2 := n_-_pn-fem_le &
 [ ORTH < "Grace" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Grace",
            PHON.ONSET con ] ].

gracie_n1 := n_-_pn-fem_le &
 [ ORTH < "Gracie" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Gracie",
            PHON.ONSET con ] ].

greg_n1 := n_-_pn-msc_le &
 [ ORTH < "Greg" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Greg",
            PHON.ONSET con ] ].

hailey_n1 := n_-_pn-msc_le &
 [ ORTH < "Hailey" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Hailey",
            PHON.ONSET con ] ].

hannah_n1 := n_-_pn-fem_le &
 [ ORTH < "Hannah" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Hannah",
            PHON.ONSET con ] ].

hawaii_n1 := n_-_pn-neut_le &
 [ ORTH < "Hawaii" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Hawaii",
            PHON.ONSET con ] ].

heather_n2 := n_-_pn-fem_le &
 [ ORTH < "Heather" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Heather",
            PHON.ONSET con ] ].

henry_n1 := n_-_pn-msc_le &
 [ ORTH < "Henry" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Henry",
            PHON.ONSET con ] ].

hillary := n_-_pn-fem_le &
 [ ORTH < "Hillary" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Hillary",
            PHON.ONSET con ] ].

ian := n_-_pn-msc_le &
 [ ORTH < "Ian" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Ian",
            PHON.ONSET voc ] ].

irene_n1 := n_-_pn-fem_le &
 [ ORTH < "Irene" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Irene",
            PHON.ONSET voc ] ].

iroquois_n3 := n_-_c-nm-pl_le &
 [ ORTH < "Iroquois" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Iroquois",
            PHON.ONSET voc ] ].

isaac_n1 := n_-_pn-msc_le &
 [ ORTH < "Isaac" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Isaac",
            PHON.ONSET voc ] ].

isabella_n1 := n_-_pn-fem_le &
 [ ORTH < "Isabella" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Isabella",
            PHON.ONSET voc ] ].

israel_n1 := n_-_pn-neut_le &
 [ ORTH < "Israel" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Israel",
            PHON.ONSET voc ] ].

italy_n1 := n_-_pn-neut_le &
 [ ORTH < "Italy" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Italy",
            PHON.ONSET voc ] ].

ivan_n1 := n_-_pn-msc_le &
 [ ORTH < "Ivan" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Ivan",
            PHON.ONSET voc ] ].

jack_n2 := n_-_pn-msc_le &
 [ ORTH < "Jack" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Jack",
            PHON.ONSET con ] ].

jackie_n1 := n_-_pn-fem_le &
 [ ORTH < "Jackie" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Jackie",
            PHON.ONSET con ] ].

jacob_n1 := n_-_pn-msc_le &
 [ ORTH < "Jacob" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Jacob",
            PHON.ONSET con ] ].

jada_n1 := n_-_pn-fem_le &
 [ ORTH < "Jada" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Jada",
            PHON.ONSET con ] ].

james := n_-_pn-msc_le &
 [ ORTH < "James" >,
   SYNSEM [ LKEYS.KEYREL.CARG "James",
            PHON.ONSET con ] ].

jane_n1 := n_-_pn-fem_le &
 [ ORTH < "Jane" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Jane",
            PHON.ONSET con ] ].

japan_n1 := n_-_pn-neut_le &
 [ ORTH < "Japan" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Japan",
            PHON.ONSET con ] ].

japanese_n1 := n_-_pn-neut_le &
 [ ORTH < "Japanese" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Japanese",
            PHON.ONSET con ] ].

jason_n1 := n_-_pn-msc_le &
 [ ORTH < "Jason" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Jason",
            PHON.ONSET con ] ].

jazmin_n1 := n_-_pn-fem_le &
 [ ORTH < "Jazmin" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Jazmin",
            PHON.ONSET con ] ].

jeff_n1 := n_-_pn-msc_le &
 [ ORTH < "Jeff" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Jeff",
            PHON.ONSET con ] ].

jennifer_n1 := n_-_pn-fem_le &
 [ ORTH < "Jennifer" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Jennifer",
            PHON.ONSET con ] ].

jenny_n1 := n_-_pn-fem_le &
 [ ORTH < "Jenny" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Jenny",
            PHON.ONSET con ] ].

jerome_n1 := n_-_pn-msc_le &
 [ ORTH < "Jerome" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Jerome",
            PHON.ONSET con ] ].

jesse_n1 := n_-_pn-msc_le &
 [ ORTH < "Jesse" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Jesse",
            PHON.ONSET con ] ].

jessica := n_-_pn-fem_le &
 [ ORTH < "Jessica" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Jessica",
            PHON.ONSET con ] ].

jim := n_-_pn-msc_le &
 [ ORTH < "Jim" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Jim",
            PHON.ONSET con ] ].

jin_n1 := n_-_pn-fem_le &
 [ ORTH < "Jin" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Jin",
            PHON.ONSET con ] ].

joe_n1 := n_-_pn-msc_le &
 [ ORTH < "Joe" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Joe",
            PHON.ONSET con ] ].

john := n_-_pn-msc_le &
 [ ORTH < "John" >,
   SYNSEM [ LKEYS.KEYREL.CARG "John",
            PHON.ONSET con ] ].

jorge_n1 := n_-_pn-msc_le &
 [ ORTH < "Jorge" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Jorge",
            PHON.ONSET con ] ].

jose_n1 := n_-_pn-msc_le &
 [ ORTH < "Jose" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Jose",
            PHON.ONSET con ] ].

joseph_n1 := n_-_pn-msc_le &
 [ ORTH < "Joseph" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Joseph",
            PHON.ONSET con ] ].

josh_n1 := n_-_pn-msc_le &
 [ ORTH < "Josh" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Josh",
            PHON.ONSET con ] ].

juan_n1 := n_-_pn-msc_le &
 [ ORTH < "Juan" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Juan",
            PHON.ONSET con ] ].

julia_n1 := n_-_pn-fem_le &
 [ ORTH < "Julia" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Julia",
            PHON.ONSET con ] ].

julian_n1 := n_-_pn-msc_le &
 [ ORTH < "Julian" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Julian",
            PHON.ONSET con ] ].

juliet_n1 := n_-_pn-fem_le &
 [ ORTH < "Juliet" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Juliet",
            PHON.ONSET con ] ].

justin_n1 := n_-_pn-msc_le &
 [ ORTH < "Justin" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Justin",
            PHON.ONSET con ] ].

kali_n1 := n_-_pn-fem_le &
 [ ORTH < "Kali" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Kali",
            PHON.ONSET con ] ].

karen_n1 := n_-_pn-fem_le &
 [ ORTH < "Karen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Karen",
            PHON.ONSET con ] ].

kat_n1 := n_-_pn-fem_le &
 [ ORTH < "Kat" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Kat",
            PHON.ONSET con ] ].

kate_n1 := n_-_pn-fem_le &
 [ ORTH < "Kate" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Kate",
            PHON.ONSET con ] ].

katelyn_n1 := n_-_pn-fem_le &
 [ ORTH < "Katelyn" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Katelyn",
            PHON.ONSET con ] ].

katherine_n1 := n_-_pn-fem_le &
 [ ORTH < "Katherine" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Katherine",
            PHON.ONSET con ] ].

kathy_n1 := n_-_pn-fem_le &
 [ ORTH < "Kathy" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Kathy",
            PHON.ONSET con ] ].

katrina_n1 := n_-_pn-fem_le &
 [ ORTH < "Katrina" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Katrina",
            PHON.ONSET con ] ].

kayla_n1 := n_-_pn-fem_le &
 [ ORTH < "Kayla" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Kayla",
            PHON.ONSET con ] ].

kaylee_n1 := n_-_pn-fem_le &
 [ ORTH < "Kaylee" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Kaylee",
            PHON.ONSET con ] ].

keiko_n1 := n_-_pn-fem_le &
 [ ORTH < "Keiko" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Keiko",
            PHON.ONSET con ] ].

ken_n1 := n_-_pn-msc_le &
 [ ORTH < "Ken" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Ken",
            PHON.ONSET con ] ].

kevin_n1 := n_-_pn-msc_le &
 [ ORTH < "Kevin" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Kevin",
            PHON.ONSET con ] ].

khalil_n1 := n_-_pn-msc_le &
 [ ORTH < "Khalil" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Khalil",
            PHON.ONSET con ] ].

kia_n1 := n_-_pn-fem_le &
 [ ORTH < "Kia" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Kia",
            PHON.ONSET con ] ].

kiki_n1 := n_-_pn-fem_le &
 [ ORTH < "Kiki" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Kiki",
            PHON.ONSET con ] ].

kima_n1 := n_-_pn-fem_le &
 [ ORTH < "Kima" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Kima",
            PHON.ONSET con ] ].

kyle_n1 := n_-_pn-msc_le &
 [ ORTH < "Kyle" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Kyle",
            PHON.ONSET con ] ].

laura_n1 := n_-_pn-fem_le &
 [ ORTH < "Laura" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Laura",
            PHON.ONSET con ] ].

layla_n1 := n_-_pn-fem_le &
 [ ORTH < "Layla" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Layla",
            PHON.ONSET con ] ].

leah_n1 := n_-_pn-fem_le &
 [ ORTH < "Leah" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Leah",
            PHON.ONSET con ] ].

lewis_n1 := n_-_pn-msc_le &
 [ ORTH < "Lewis" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Lewis",
            PHON.ONSET con ] ].

lilah_n1 := n_-_pn-fem_le &
 [ ORTH < "Lilah" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Lilah",
            PHON.ONSET con ] ].

lillian_n1 := n_-_pn-fem_le &
 [ ORTH < "Lillian" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Lillian",
            PHON.ONSET con ] ].

lily_n2 := n_-_pn-fem_le &
 [ ORTH < "Lily" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Lily",
            PHON.ONSET con ] ].

linda_n1 := n_-_pn-fem_le &
 [ ORTH < "Linda" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Linda",
            PHON.ONSET con ] ].

lisa_n1 := n_-_pn-fem_le &
 [ ORTH < "Lisa" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Lisa",
            PHON.ONSET con ] ].

liz_n1 := n_-_pn-fem_le &
 [ ORTH < "Liz" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Liz",
            PHON.ONSET con ] ].

lizzie_n1 := n_-_pn-fem_le &
 [ ORTH < "Lizzie" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Lizzie",
            PHON.ONSET con ] ].

lizzy_n1 := n_-_pn-fem_le &
 [ ORTH < "Lizzy" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Lizzy",
            PHON.ONSET con ] ].

lola := n_-_pn-fem_le &
 [ ORTH < "Lola" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Lola",
            PHON.ONSET con ] ].

london_n1 := n_-_pn-neut_le &
 [ ORTH < "London" >,
   SYNSEM [ LKEYS.KEYREL.CARG "London",
            PHON.ONSET con ] ].

loretta_n1 := n_-_pn-fem_le &
 [ ORTH < "Loretta" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Loretta",
            PHON.ONSET con ] ].

luke_n1 := n_-_pn-msc_le &
 [ ORTH < "Luke" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Luke",
            PHON.ONSET con ] ].

lydia_n1 := n_-_pn-fem_le &
 [ ORTH < "Lydia" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Lydia",
            PHON.ONSET con ] ].

ma_n1 := n_-_pn-fem_le &
 [ ORTH < "Ma" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Ma",
            PHON.ONSET con ] ].

madeline_n1 := n_-_pn-fem_le &
 [ ORTH < "Madeline" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Madeline",
            PHON.ONSET con ] ].

maggie_n1 := n_-_pn-fem_le &
 [ ORTH < "Maggie" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Maggie",
            PHON.ONSET con ] ].

maia_n1 := n_-_pn-fem_le &
 [ ORTH < "Maia" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Maia",
            PHON.ONSET con ] ].

malia_n1 := n_-_pn-fem_le &
 [ ORTH < "Malia" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Malia",
            PHON.ONSET con ] ].

mandela_n1 := n_-_pn-msc_le &
 [ ORTH < "Mandela" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Mandela",
            PHON.ONSET con ] ].

manuel_n1 := n_-_pn-msc_le &
 [ ORTH < "Manuel" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Manuel",
            PHON.ONSET con ] ].

marcos_n1 := n_-_pn-msc_le &
 [ ORTH < "Marcos" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Marcos",
            PHON.ONSET con ] ].

maria_n1 := n_-_pn-fem_le &
 [ ORTH < "Maria" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Maria",
            PHON.ONSET con ] ].

mariah_n1 := n_-_pn-fem_le &
 [ ORTH < "Mariah" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Mariah",
            PHON.ONSET con ] ].

mario_n1 := n_-_pn-msc_le &
 [ ORTH < "Mario" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Mario",
            PHON.ONSET con ] ].

marisa := n_-_pn-fem_le &
 [ ORTH < "Marisa" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Marisa",
            PHON.ONSET con ] ].

marissa_n1 := n_-_pn-fem_le &
 [ ORTH < "Marissa" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Marissa",
            PHON.ONSET con ] ].

mark_n1 := n_-_pn-msc_le &
 [ ORTH < "Mark" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Mark",
            PHON.ONSET con ] ].

mary := n_-_pn-fem_le &
 [ ORTH < "Mary" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Mary",
            PHON.ONSET con ] ].

xomasha_n1 := n_-_pn-fem_le &
 [ ORTH < "Masha" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Masha",
            PHON.ONSET con ] ].

matilda_n1 := n_-_pn-fem_le &
 [ ORTH < "Matilda" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Matilda",
            PHON.ONSET con ] ].

matt := n_-_pn-msc_le &
 [ ORTH < "Matt" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Matt",
            PHON.ONSET con ] ].

matter_n1 := n_pp_mc-of-ns_le &
 [ ORTH < "matter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_matter_n_of_rel",
            LOCAL.CAT.HEAD.--MALCM -,
            PHON.ONSET con ] ].

max_n1 := n_-_pn-msc_le &
 [ ORTH < "Max" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Max",
            PHON.ONSET con ] ].

maya_n1 := n_-_pn-fem_le &
 [ ORTH < "Maya" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Maya",
            PHON.ONSET con ] ].

media_n1 := n_-_m_le &
 [ ORTH < "media" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_media_n_1_rel",
            LOCAL.AGR.PNG png-irreg,
            PHON.ONSET con ] ].

media_n2 := n_-_c-pl_le &
 [ ORTH < "media" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_media_n_1_rel",
            LOCAL.AGR.PNG png-irreg,
            PHON.ONSET con ] ].

medina_n1 := n_-_pn-fem_le &
 [ ORTH < "Medina" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Medina",
            PHON.ONSET con ] ].

megan_n1 := n_-_pn-fem_le &
 [ ORTH < "Megan" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Megan",
            PHON.ONSET con ] ].

melanie_n1 := n_-_pn-fem_le &
 [ ORTH < "Melanie" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Melanie",
            PHON.ONSET con ] ].

melissa_n1 := n_-_pn-fem_le &
 [ ORTH < "Melissa" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Melissa",
            PHON.ONSET con ] ].

mexico_n1 := n_-_pn-neut_le &
 [ ORTH < "Mexico" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Mexico",
            PHON.ONSET con ] ].

mia_n1 := n_-_pn-fem_le &
 [ ORTH < "Mia" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Mia",
            PHON.ONSET con ] ].

miami_n1 := n_-_pn-neut_le &
 [ ORTH < "Miami" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Miami",
            PHON.ONSET con ] ].

michael_n1 := n_-_pn-msc_le &
 [ ORTH < "Michael" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Michael",
            PHON.ONSET con ] ].

michigan_n1 := n_-_pn-neut_le &
 [ ORTH < "Michigan" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Michigan",
            PHON.ONSET con ] ].

mike_n1 := n_-_pn-msc_le &
 [ ORTH < "Mike" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Mike",
            PHON.ONSET con ] ].

miles_n1 := n_-_pn-msc_le &
 [ ORTH < "Miles" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Miles",
            PHON.ONSET con ] ].

minnesota_n1 := n_-_pn-neut_le &
 [ ORTH < "Minnesota" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Minnesota",
            PHON.ONSET con ] ].

misty_n1 := n_-_pn-fem_le &
 [ ORTH < "Misty" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Misty",
            PHON.ONSET con ] ].

molly_n1 := n_-_pn-fem_le &
 [ ORTH < "Molly" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Molly",
            PHON.ONSET con ] ].

monica_n1 := n_-_pn-fem_le &
 [ ORTH < "Monica" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Monica",
            PHON.ONSET con ] ].

nadia_n1 := n_-_pn-fem_le &
 [ ORTH < "Nadia" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Nadia",
            PHON.ONSET con ] ].

nancy_n1 := n_-_pn-fem_le &
 [ ORTH < "Nancy" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Nancy",
            PHON.ONSET con ] ].

naomi_n1 := n_-_pn-fem_le &
 [ ORTH < "Naomi" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Naomi",
            PHON.ONSET con ] ].

natalie_n1 := n_-_pn-fem_le &
 [ ORTH < "Natalie" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Natalie",
            PHON.ONSET con ] ].

natasha_n1 := n_-_pn-fem_le &
 [ ORTH < "Natasha" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Natasha",
            PHON.ONSET con ] ].

nebraska_n1 := n_-_pn-neut_le &
 [ ORTH < "Nebraska" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Nebraska",
            PHON.ONSET con ] ].

new_mexico_n1 := n_-_pn-neut_le &
 [ ORTH < "New", "Mexico" >,
   SYNSEM [ LKEYS.KEYREL.CARG "New+Mexico",
            PHON.ONSET con ] ].

news_n3 := n_cp_m-optc_le &
 [ ORTH < "news" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_news_n_of_rel",
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD comp,
            PHON.ONSET con ] ].

news_n3 := n_cp_m-optc_le &
 [ ORTH < "news" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_news_n_of_rel",
            LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD comp,
            PHON.ONSET con ] ].

nick_n1 := n_-_pn-msc_le &
 [ ORTH < "Nick" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Nick",
            PHON.ONSET con ] ].

nicole_n1 := n_-_pn-fem_le &
 [ ORTH < "Nicole" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Nicole",
            PHON.ONSET con ] ].

nilda_n1 := n_-_pn-fem_le &
 [ ORTH < "Nilda" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Nilda",
            PHON.ONSET con ] ].

nina_n1 := n_-_pn-fem_le &
 [ ORTH < "Nina" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Nina",
            PHON.ONSET con ] ].

nobody_n1 := n_-_pn-msc_le &
 [ ORTH < "Nobody" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Nobody",
            PHON.ONSET con ] ].

nokomis_n1 := n_-_pn-neut_le &
 [ ORTH < "Nokomis" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Nokomis",
            PHON.ONSET con ] ].

nora_n1 := n_-_pn-fem_le &
 [ ORTH < "Nora" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Nora",
            PHON.ONSET con ] ].

odysseus_n1 := n_-_pn-msc_le &
 [ ORTH < "Odysseus" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Odysseus",
            PHON.ONSET voc ] ].

oliver_n1 := n_-_pn-msc_le &
 [ ORTH < "Oliver" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Oliver",
            PHON.ONSET voc ] ].

olivia_n1 := n_-_pn-fem_le &
 [ ORTH < "Olivia" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Olivia",
            PHON.ONSET voc ] ].

omakayas_n1 := n_-_pn-fem_le &
 [ ORTH < "Omakayas" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Omakayas",
            PHON.ONSET voc ] ].

omar_n1 := n_-_pn-msc_le &
 [ ORTH < "Omar" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Omar",
            PHON.ONSET voc ] ].

orlando_n1 := n_-_pn-msc_le &
 [ ORTH < "Orlando" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Orlando",
            PHON.ONSET voc ] ].

oscar_n1 := n_-_pn-msc_le &
 [ ORTH < "Oscar" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Oscar",
            PHON.ONSET voc ] ].

pa_n1 := n_-_pn-msc_le &
 [ ORTH < "Pa" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Pa",
            PHON.ONSET con ] ].

pam_n1 := n_-_pn-fem_le &
 [ ORTH < "Pam" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Pam",
            PHON.ONSET con ] ].

patricia_n1 := n_-_pn-fem_le &
 [ ORTH < "Patricia" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Patricia",
            PHON.ONSET con ] ].

patrick_n1 := n_-_pn-msc_le &
 [ ORTH < "Patrick" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Patrick",
            PHON.ONSET con ] ].

paula := n_-_pn-fem_le &
 [ ORTH < "Paula" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Paula",
            PHON.ONSET con ] ].

paulina_n1 := n_-_pn-fem_le &
 [ ORTH < "Paulina" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Paulina",
            PHON.ONSET con ] ].

pedro_n1 := n_-_pn-msc_le &
 [ ORTH < "Pedro" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Pedro",
            PHON.ONSET con ] ].

puebla_n1 := n_-_pn-neut_le &
 [ ORTH < "Puebla" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Puebla",
            PHON.ONSET con ] ].

puerto_rico_n1 := n_-_pn-neut_le &
 [ ORTH < "Puerto", "Rico" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Puerto+Rico",
            PHON.ONSET con ] ].

rachel_n1 := n_-_pn-fem_le &
 [ ORTH < "Rachel" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Rachel",
            PHON.ONSET con ] ].

ramona_n1 := n_-_pn-fem_le &
 [ ORTH < "Ramona" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Ramona",
            PHON.ONSET con ] ].

raul_n1 := n_-_pn-msc_le &
 [ ORTH < "Raul" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Raul",
            PHON.ONSET con ] ].

rebecca_n1 := n_-_pn-fem_le &
 [ ORTH < "Rebecca" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Rebecca",
            PHON.ONSET con ] ].

ricardo_n1 := n_-_pn-msc_le &
 [ ORTH < "Ricardo" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Ricardo",
            PHON.ONSET con ] ].

richard_n1 := n_-_pn-msc_le &
 [ ORTH < "Richard" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Richard",
            PHON.ONSET con ] ].

richmond_n1 := n_-_pn-neut_le &
 [ ORTH < "Richmond" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Richmond",
            PHON.ONSET con ] ].

ricky_n1 := n_-_pn-msc_le &
 [ ORTH < "Ricky" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Ricky",
            PHON.ONSET con ] ].

rico_n1 := n_-_pn-msc_le &
 [ ORTH < "Rico" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Rico",
            PHON.ONSET con ] ].

rita_n1 := n_-_pn-fem_le &
 [ ORTH < "Rita" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Rita",
            PHON.ONSET con ] ].

robert_n1 := n_-_pn-msc_le &
 [ ORTH < "Robert" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Robert",
	    LOCAL.AGR.PNG.PN 3s,
            PHON.ONSET con ] ].

roger_n1 := n_-_pn-msc_le &
 [ ORTH < "Roger" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Roger",
            PHON.ONSET con ] ].

ron := n_-_pn-msc_le &
 [ ORTH < "Ron" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Ron",
            PHON.ONSET con ] ].

ronald_n1 := n_-_pn-msc_le &
 [ ORTH < "Ronald" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Ronald",
            PHON.ONSET con ] ].

rosa_n1 := n_-_pn-fem_le &
 [ ORTH < "Rosa" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Rosa",
            PHON.ONSET con ] ].

roy_n1 := n_-_pn-msc_le &
 [ ORTH < "Roy" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Roy",
            PHON.ONSET con ] ].

rubio_n1 := n_-_pn-msc_le &
 [ ORTH < "Rubio" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Rubio",
            PHON.ONSET con ] ].

rusty_n1 := n_-_pn-msc_le &
 [ ORTH < "Rusty" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Rusty",
            PHON.ONSET con ] ].

ruth_n1 := n_-_pn-fem_le &
 [ ORTH < "Ruth" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Ruth",
            PHON.ONSET con ] ].

ryan_n1 := n_-_pn-msc_le &
 [ ORTH < "Ryan" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Ryan",
            PHON.ONSET con ] ].

sadie_n1 := n_-_pn-fem_le &
 [ ORTH < "Sadie" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Sadie",
            PHON.ONSET con ] ].

sam_n1 := n_-_pn-msc_le &
 [ ORTH < "Sam" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Sam",
            PHON.ONSET con ] ].

samir_n1 := n_-_pn-msc_le &
 [ ORTH < "Samir" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Samir",
            PHON.ONSET con ] ].

sandra_n1 := n_-_pn-fem_le &
 [ ORTH < "Sandra" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Sandra",
            PHON.ONSET con ] ].

sara := n_-_pn-fem_le &
 [ ORTH < "Sara" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Sara",
            PHON.ONSET con ] ].

sarah_n1 := n_-_pn-fem_le &
 [ ORTH < "Sarah" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Sarah",
            PHON.ONSET con ] ].

seattle_n1 := n_-_pn-neut_le &
 [ ORTH < "Seattle" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Seattle",
            PHON.ONSET con ] ].

sharon_n1 := n_-_pn-fem_le &
 [ ORTH < "Sharon" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Sharon",
            PHON.ONSET con ] ].

shel_n1 := n_-_pn-fem_le &
 [ ORTH < "Shel" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Shel",
            PHON.ONSET con ] ].

#|
shelter_n1 := n_-_c_le &
 [ ORTH < "shelter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shelter_n_1_rel",
            PHON.ONSET con ] ].

;; DPF 2018-03-12 - Removed LPERIPH +, no longer compatible with lex type
;; Exclude in |to dog shelter|
;;
shelter_n2 := n_-_m_le &
 [ ORTH < "shelter" >,
   SYNSEM [ LKEYS.KEYREL.PRED "_shelter_n_1_rel",
            PHON.ONSET con ] ].
|#

silverstein_n1 := n_-_pn-fem_le &
 [ ORTH < "Silverstein" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Silverstein",
            PHON.ONSET con ] ].

simon_n1 := n_-_pn-msc_le &
 [ ORTH < "Simon" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Simon",
            PHON.ONSET con ] ].

sita_n1 := n_-_pn-fem_le &
 [ ORTH < "Sita" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Sita",
            PHON.ONSET con ] ].

sophia_n1 := n_-_pn-fem_le &
 [ ORTH < "Sophia" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Sophia",
            PHON.ONSET con ] ].

sophie_n1 := n_-_pn-fem_le &
 [ ORTH < "Sophie" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Sophie",
            PHON.ONSET con ] ].

spanish_n1 := n_-_pn_le &
 [ ORTH < "Spanish" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Spanish",
            PHON.ONSET con ] ].

stephanie_n1 := n_-_pn-fem_le &
 [ ORTH < "Stephanie" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Stephanie",
            PHON.ONSET con ] ].

stephen_n1 := n_-_pn-msc_le &
 [ ORTH < "Stephen" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Stephen",
            PHON.ONSET con ] ].

steve_n1 := n_-_pn-msc_le &
 [ ORTH < "Steve" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Steve",
            PHON.ONSET con ] ].

steven_n1 := n_-_pn-msc_le &
 [ ORTH < "Steven" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Steven",
            PHON.ONSET con ] ].

sylvia_n1 := n_-_pn-fem_le &
 [ ORTH < "Sylvia" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Sylvia",
            PHON.ONSET con ] ].

talia_n1 := n_-_pn-fem_le &
 [ ORTH < "Talia" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Talia",
            PHON.ONSET con ] ].

tanya_n1 := n_-_pn-fem_le &
 [ ORTH < "Tanya" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Tanya",
            PHON.ONSET con ] ].

tara_n1 := n_-_pn-fem_le &
 [ ORTH < "Tara" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Tara",
            PHON.ONSET con ] ].

tasha_n1 := n_-_pn-fem_le &
 [ ORTH < "Tasha" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Tasha",
            PHON.ONSET con ] ].

tatiana_n1 := n_-_pn-fem_le &
 [ ORTH < "Tatiana" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Tatiana",
            PHON.ONSET con ] ].

teresa_n1 := n_-_pn-fem_le &
 [ ORTH < "Teresa" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Teresa",
            PHON.ONSET con ] ].

texas_n1 := n_-_pn-neut_le &
 [ ORTH < "Texas" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Texas",
            PHON.ONSET con ] ].

theodore_n1 := n_-_pn-msc_le &
 [ ORTH < "Theodore" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Theodore",
            PHON.ONSET con ] ].

theresa := n_-_pn-fem_le &
 [ ORTH < "Theresa" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Theresa",
            PHON.ONSET con ] ].

tiffany := n_-_pn-fem_le &
 [ ORTH < "Tiffany" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Tiffany",
            PHON.ONSET con ] ].

tina_n1 := n_-_pn-fem_le &
 [ ORTH < "Tina" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Tina",
            PHON.ONSET con ] ].

todd_n1 := n_-_pn-msc_le &
 [ ORTH < "Todd" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Todd",
            PHON.ONSET con ] ].

tom_n1 := n_-_pn-msc_le &
 [ ORTH < "Tom" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Tom",
            PHON.ONSET con ] ].

travis_n1 := n_-_pn-msc_le &
 [ ORTH < "Travis" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Travis",
            PHON.ONSET con ] ].

trudy_n1 := n_-_pn-fem_le &
 [ ORTH < "Trudy" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Trudy",
            PHON.ONSET con ] ].

tyler_n1 := n_-_pn-msc_le &
 [ ORTH < "Tyler" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Tyler",
            PHON.ONSET con ] ].

tyrell_n1 := n_-_pn-msc_le &
 [ ORTH < "Tyrell" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Tyrell",
            PHON.ONSET con ] ].

tyson_n1 := n_-_pn-msc_le &
 [ ORTH < "Tyson" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Tyson",
            PHON.ONSET con ] ].
ultima_n1 := n_-_pn-fem_le &
 [ ORTH < "Ultima" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Ultima",
            PHON.ONSET voc ] ].

valeria_n1 := n_-_pn-fem_le &
 [ ORTH < "Valeria" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Valeria",
            PHON.ONSET con ] ].

vanessa_n1 := n_-_pn-fem_le &
 [ ORTH < "Vanessa" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Vanessa",
            PHON.ONSET con ] ].

venezuela_n1 := n_-_pn-neut_le &
 [ ORTH < "Venezuela" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Venezuela",
            PHON.ONSET con ] ].

veronica_n1 := n_-_pn-fem_le &
 [ ORTH < "Veronica" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Veronica",
            PHON.ONSET con ] ].

victoria_n1 := n_-_pn-fem_le &
 [ ORTH < "Victoria" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Victoria",
            PHON.ONSET con ] ].

waldo_n1 := n_-_pn-msc_le &
 [ ORTH < "Waldo" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Waldo",
            PHON.ONSET con ] ].

wallace_n1 := n_-_pn-msc_le &
 [ ORTH < "Wallace" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Wallace",
            PHON.ONSET con ] ].

wanda_n1 := n_-_pn-fem_le &
 [ ORTH < "Wanda" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Wanda",
            PHON.ONSET con ] ].

will_pn_n1 := n_-_pn-msc_le &
 [ ORTH < "Will" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Will",
            PHON.ONSET con ] ].

william_n1 := n_-_pn-msc_le &
 [ ORTH < "William" >,
   SYNSEM [ LKEYS.KEYREL.CARG "William",
            PHON.ONSET con ] ].

wyatt_n1 := n_-_pn-msc_le &
 [ ORTH < "Wyatt" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Wyatt",
            PHON.ONSET con ] ].

xander_n1 := n_-_pn-msc_le &
 [ ORTH < "Xander" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Xander",
            PHON.ONSET con ] ].

xhosa_n1 := n_-_pn_le &
 [ ORTH < "Xhosa" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Xhosa",
            PHON.ONSET con ] ].

xhosa_n2 := n_-_pn-pl-nom_le &
 [ ORTH < "Xhosa" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Xhosa",
            PHON.ONSET con ] ].

xian_n1 := n_-_pn_le &
 [ ORTH < "Xi’an" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Xian",
            PHON.ONSET con ] ].

xi_n1 := n_-_pn-neut_le &
 [ ORTH < "Xi" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Xi",
            PHON.ONSET con ] ].

xi_hu_n1 := n_-_pn-neut_le &
 [ ORTH < "Xi", "Hu" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Xi+Hu",
            PHON.ONSET con ] ].

yosemite_n1 := n_-_pn-neut_le &
 [ ORTH < "Yosemite" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Yosemite",
            PHON.ONSET con ] ].

yoshiko_n1 := n_-_pn-fem_le &
 [ ORTH < "Yoshiko" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Yoshiko",
            PHON.ONSET con ] ].

zeppo_n1 := n_-_pn-msc_le &
 [ ORTH < "Zeppo" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Zeppo",
            PHON.ONSET con ] ].

zoey_n1 := n_-_pn-fem_le &
 [ ORTH < "Zoey" >,
   SYNSEM [ LKEYS.KEYREL.CARG "Zoey",
            PHON.ONSET con ] ].

