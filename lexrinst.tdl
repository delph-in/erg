;;; -*- Mode: tdl; Coding: utf-8; -*-
;;;
;;;  Copyright (c) 1994-2013
;;;    Dan Flickinger, Rob Malouf, Emily M. Bender
;;;    see LICENSE for conditions
;;;
;;;  lexrinst.tdl
;;;
;;;  Instances of lexical rules defined in lexrules.tdl
;;;
;;;  Created: Ann Copestake, 30-Sept-97
;;;
;;;  $Id: lexrinst.tdl 7043 2009-09-03 18:26:55Z oe $

; <type val="v_aux-sb-inv_dlr">
; <description>Subject-auxiliary inversion      
; <ex>Did they arrive?           
; <nex>
; <todo>
; </type>
v_aux-sb-inv_dlr := sai &
  [ RNAME lsai ].

; <type val="v_cond-inv_dlr">
; <description>Conditional inversion
; <ex>Had he left, we'd have left.
; <nex>
; <todo>
; </type>
v_cond-inv_dlr := cond_sai &
  [ RNAME csai ].

; <type val="v_aux-advadd_dlr">
; <description>Addition of adverb as complement 
; <ex>They did not arrive.       
; <nex>
; <todo>
; </type>
v_aux-advadd_dlr := adv_addition &
  [ RNAME ladv ].

; <type val="v_aux-neg-ell_dlr">
; <description>Elided VP with negation
; <ex>They would not.       
; <nex>
; <todo>
; </type>
v_aux-neg-ell_dlr := adv_add_neg_ellipt &
  [ RNAME lnav ].

; <type val="v_aux-ell-ref_dlr">
; <description>Elided VP compl, referentl subj  
; <ex>He did.                    
; <nex>
; <todo>
; </type>
v_aux-ell-ref_dlr := vp_ellipsis_ref &
  [ RNAME lver ].

; <type val="v_aux-ell-xpl_dlr">
; <description>Elided VP compl, expletive subj  
; <ex>It did.                    
; <nex>
; <todo>
; </type>
v_aux-ell-xpl_dlr := vp_ellipsis_expl &
  [ RNAME lvex ].

; <type val="v_aux-cx-noinv_dlr">
; <description>Contracted auxiliary, no subject-auxiliary inversion      
; <ex>Kim'll arrive.
; <nex> Kim'll.
; <todo>
; </type>
v_aux-cx-noinv_dlr := contracted_aux_noninv_lr &
  [ RNAME lcx ].

; <type val="v_nger-intr_dlr">
; <description>Nominal gerund of intrans verb   
; <ex>Leaving was easy.          
; <nex>
; <todo>
; </type>
v_nger-intr_dlr := intrans_nominal_gerund &
  [ RNAME lngi ].

; <type val="v_nger-pp_dlr">
; <description>Nominal gerund of PP-comp verb   
; <ex>Relying on Kim was wrong.  
; <nex>
; <todo>
; </type>
v_nger-pp_dlr := intrans_pp_nominal_gerund &
  [ RNAME lngp ].

; <type val="v_nger-tr_dlr">
; <description>Nominal gerund of trans verb     
; <ex>The hiring of Kim was OK.  
; <nex>
; <todo>
; </type>
v_nger-tr_dlr := trans_nominal_gerund &
  [ RNAME lngt ].

; <type val="n_det-mnth_dlr">
; <description>Month name as determiner         
; <ex>July tenth arrived.        
; <nex>
; <todo>
; </type>
n_det-mnth_dlr := month_det_lr &
  [ RNAME lmd ].

; <type val="n_det-wkdy_dlr">
; <description>Weekday name as determiner       
; <ex>We arrived Sunday morning. 
; <nex>
; <todo>
; </type>
n_det-wkdy_dlr := weekday_det_lr &
  [ RNAME lwd ].

; <type val="n_det-wkdy_dlr">
; <description>Weekday name as determiner       
; <ex>We arrived Sunday morning. 
; <nex>
; <todo>
; </type>
n_dom-ppof_dlr := dom_ppof_lr &
  [ RNAME ldp ].

; <type val="j_att_dlr">
; <description>Attrib adj from trans pred adj   
; <ex>A similar cat arrived.     
; <nex>
; <todo>
; </type>
j_att_dlr := attr_adj_lr &
  [ RNAME lja ].

; <type val="v_j-nb-intr_dlr">
; <description>Attrib adj from intrans verb     
; <ex>The sleeping cat stirred.  
; <nex>
; <todo>
; </type>
v_j-nb-intr_dlr := attr_verb_part_lr &
  [ RNAME ljv ].

; <type val="v_j-nb-prp-tr_dlr">
; <description>Attr adj from trans prp verb     
; <ex>The admiring crowd ran.    
; <nex>
; <todo>
; </type>
v_j-nb-prp-tr_dlr := attr_verb_part_tr_lr &
  [ RNAME ljvt ].

; <type val="v_j-nb-pas-tr_dlr">
; <description>Attr adj from trans passive verb 
; <ex>The hired consultant left. 
; <nex>
; <todo>
; </type>
v_j-nb-pas-tr_dlr := attr_verb_part_psv_lr &
  [ RNAME ljvp ].

; <type val="v_j-nb-pas-ptcl_dlr">
; <description>Attr adj from passive verb+selPP
; <ex>The hoped for consultant left. 
; <nex>
; <todo>
; </type>
v_j-nb-pas-ptcl_dlr := attr_verb_part_ptcl_psv_lr &
  [ RNAME ljvr ].

; <type val="v_j-nme-intr_dlr">
; <description>Attr adj from intr verb, nme mod 
; <ex>The smiling Abrams won.    
; <nex>
; <todo>
; </type>
v_j-nme-intr_dlr := attr_verb_part_intr_namemod_lr &
  [ RNAME ljvn ].

; <type val="v_j-nme-tr_dlr">
; <description>Attr adj from trns verb, nme mod 
; <ex>Our winning Abrams smiled. 
; <nex>
; <todo>
; </type>
v_j-nme-tr_dlr := attr_verb_part_tr_namemod_lr &
  [ RNAME ljnt ].

; <type val="det_prt-of-agr_dlr">
; <description>Partitive NP, PP-of, num agrmt   
; <ex>Some of us are ready.      
; <nex>
; <todo>
; </type>
det_prt-of-agr_dlr := part_ppof_agr_constr &
  [ RNAME lpca ].

; <type val="det_prt-of-nagr_dlr">
; <description>Partitive NP, PP-of, no agrmt    
; <ex>Each of us is ready        
; <nex>
; <todo>
; </type>
det_prt-of-nagr_dlr := part_ppof_noagr_constr &
  [ RNAME lpcn ].

; <type val="det_prt-nocmp_dlr">
; <description>Partitive NP, no PP complement   
; <ex>Most arrived. part_nocomp  
; <nex>
; <todo>
; </type>
det_prt-nocmp_dlr := part_nocomp_constr &
  [ RNAME lpn ].

; <type val="v_np-prtcl_dlr">
; <description>Particle-NP reordering           
; <ex>He looked the answer up.   
; <nex>
; <todo>
; </type>
v_np-prtcl_dlr := NP_particle_lr &
  [ RNAME lnpp ].

; <type val="v_dat_dlr">
; <description>Dative shift alternation         
; <ex>They gave the book to him. 
; <nex>
; <todo>
; </type>
v_dat_dlr := dative_shift_lr &
  [ RNAME ldat ].

; <type val="v_it-cp-vp_dlr">
; <description>it-subj Verb+NP to CP or VP comp
; <ex>It annoyed B that we left.
; <nex>
; <todo>
; </type>
v_it-cp-vp_dlr := verb_it_cp_vp_lr &
  [ RNAME lvcv ].

; <type val="j_n-minut_dlr">
; <description>Integer as minute name           
; <ex>Ten sixteen is too late.   
; <nex>
; <todo>
; </type>
j_n-minut_dlr := minute_prep_lr &
  [ RNAME lmin ].

; <type val="v_aux-tag_dlr">
; <description>Tag question auxiliary           
; <ex>He arrived, didn't he?     
; <nex>
; <todo>
; </type>
v_aux-tag_dlr := tag &
  [ RNAME ltag ].

; <type val="j_enough_dlr">
; <description>Adj no-comps plus enough-compl
; <ex>A big enough cat arrived.
; <nex>
; <todo>
; </type>
j_enough_dlr := enough_addition_nocomps &
  [ RNAME leno ].

; <type val="j_enough-wc_dlr">
; <description>Adj w/comps plus enough-compl
; <ex>A happy enough cat arrived.
; <nex>
; <todo>
; </type>
j_enough-wc_dlr := enough_addition_wcomp &
  [ RNAME lenc ].

; <type val="j_tough_dlr">
; <description>Tough-adj alternation
; <ex>B is tough to admire.
; <nex>
; <todo>
; </type>
j_tough_dlr := tough_adj_lr &
  [ RNAME ltgh ].

#|
; <type val="j_r-i_odlr">
; <description>Adjective to adverb, intersective only
; <ex>Kim arrived slowly.
; <nex>
; <todo>
; </type>
j_r-i_odlr := 
%suffix (* ly) (!ty !tily)
adj_to_adv_lr &
  [ ND-AFF +,
    DTR.SYNSEM.LOCAL.CAT.HEAD.MOD < synsem & [ LOCAL int_mod_local ] >,
    SYNSEM.LOCAL.CAT.HEAD.MOD < synsem & [ LOCAL int_mod_local ] >,
    RNAME ljri ].
|#

; <type val="n_bipart_dlr">
; <description>Relax bipartite constraint       
; <ex>The scissors isn't sharp.  
; <nex>
; <todo>
; </type>
n_bipart_dlr := bipart_lr &
  [ RNAME lbpt ].

; <type val="w_italics_dlr">
; <description>Italicized word made into NP     
; <ex>Some say /windshield/.     
; <nex>
; <todo>
; </type>
w_italics_dlr := foreign_lr &
  [ RNAME lfw ].

; <type val="v_inv-quot_dlr">
; <description>Main verb inversion for quoting  
; <ex>He left, said Kim.         
; <nex>
; <todo>
; </type>
v_inv-quot_dlr := inverted_quote_lr &
  [ RNAME linq ].

; <type val="v_cp-frag_dlr">
; <description>Verbs of saying with fragment substituted for CP complement
; <ex>Yes, said Kim.         
; <nex>
; <todo>
; </type>
v_cp-frag_dlr := cp_frag_lr &
  [ RNAME lcpf ].

; <type val="n_n-ed_odlr">
; <description>Noun with |-ed| suffix as adj    
; <ex>Long-eared sheep slept.    
; <nex>
; <todo>
; </type>
n_n-ed_odlr := 
%suffix (* ed) (!ty !tied) (e ed) (!t!v!c !t!v!c!ced) 
noun_adj_lr &
  [ ND-AFF +,
    RNAME lnj ].

; <type val="j_n-pre_odlr">
; <description>pre- prefix on nouns
; <ex>The pre-war period endured.
; <nex>
; <todo>
; </type>
j_n-pre_odlr := 
%prefix (* pre) (* pre-) 
pre_noun_adj_lr &
  [ ND-AFF +,
    RNAME ljnp ].

; <type val="v_v-re_dlr">
; <description>Verb with |re-| prefix           
; <ex>He re-tied his shoe.       
; <nex>
; <todo>
; </type>
v_v-re_dlr := 
%prefix (* re) (* re-) 
v_v-re_rule &
 [ ND-AFF +,
   RNAME lre,
   SYNSEM.PHON.ONSET con,
   C-CONT.RELS <! [ PRED "_re-_a_again_rel" ] !> ].

; <type val="v_v-pre_dlr">
; <description>Verb with |pre-| prefix          
; <ex>He pre-signed the check.   
; <nex>
; <todo>
; </type>
v_v-pre_dlr := 
%prefix (* pre) (* pre-) 
v_v-pre_rule &
 [ ND-AFF +,
   RNAME lpre,
   SYNSEM.PHON.ONSET con,
   C-CONT.RELS <! [ PRED "_pre-_a_ante_rel" ] !> ].

; <type val="v_v-mis_dlr">
; <description>Verb with |mis-| prefix          
; <ex>He mis-tied his shoe.      
; <nex>
; <todo>
; </type>
v_v-mis_dlr := 
%prefix (* mis) (* mis-) 
v_v-mis_rule &
 [ ND-AFF +,
   RNAME lmis,
   SYNSEM.PHON.ONSET con,
   C-CONT.RELS <! [ PRED "_mis-_a_error_rel" ] !> ].

;;;
;;; _fix_me_
;;; to make this rule functional, token mapping would have to not separate off
;;; |co-| (in `derivational_prefix_tmr').  however, doing that would then mean
;;; that either (a) we provide a prefixation rule for other parts of speech too
;;; (`co-author', maybe `co-educational') or minimally adjust existing lexical
;;; entries (currently MWEs); or (b) that we create a token-level ambiguity; i
;;; hesitate doing the latter.  but maybe it would not be so bad, in the end?
;;; the same problem applies to other derivational rules, of course.
;;;                                                             (13-mar-09; oe)
; <type val="v_v-co_dlr">
; <description>Verb with |co-| prefix           
; <ex>He co-wrote the paper.     
; <nex>
; <todo>
; </type>
v_v-co_dlr := 
%prefix (* co-) (* co)
v_v-co_rule &
 [ ND-AFF +,
   RNAME lco,
   SYNSEM.PHON.ONSET con,
   C-CONT.RELS <! [ PRED "_co-_a_with_rel" ] !> ].

; <type val="v_v-un_dlr">
; <description>Verb with |un-| prefix           
; <ex>He untied his shoe.
; <nex>
; <todo>
; </type>
v_v-un_dlr := 
%prefix (* un) (* un-) 
v_v-un_rule &
 [ ND-AFF +,
   RNAME lunv,
   SYNSEM.PHON.ONSET voc,
   C-CONT.RELS <! [ PRED "_un-_a_rvrs_rel" ] !> ].

; <type val="v_v-counter_dlr">
; <description>Verb with |counter-| prefix           
; <ex>He counter-signed the bill.
; <nex>
; <todo>
; </type>
v_v-counter_dlr := 
%prefix (* counter) (* counter-) 
v_v-counter_rule &
 [ ND-AFF +,
   RNAME lctv,
   SYNSEM.PHON.ONSET con,
   C-CONT.RELS <! [ PRED "_counter-_a_anti_rel" ] !> ].

; <type val="v_v-over_dlr">
; <description>Verb with |over-| prefix           
; <ex>He over-built the porch.
; <nex>
; <todo>
; </type>
v_v-over_dlr := 
%prefix (* over) (* over-) 
v_v-over_rule &
 [ ND-AFF +,
   RNAME lctv,
   SYNSEM.PHON.ONSET voc,
   C-CONT.RELS <! [ PRED "_over-_a_1_rel" ] !> ].

; <type val="v_v-out_dlr">
; <description>Verb with |out-| prefix           
; <ex>He out-played his opponent.
; <nex>
; <todo>
; </type>
v_v-out_dlr := 
%prefix (* out) (* out-) 
v_v-out_rule &
 [ ND-AFF +,
   RNAME lotv,
   SYNSEM.PHON.ONSET voc,
   C-CONT.RELS <! [ PRED "_out-_a_1_rel" ] !> ].

; <type val="v_v-self_dlr">
; <description>Verb with |self-| prefix           
; <ex>He was self-insured.
; <nex>
; <todo>
; </type>
v_v-self_dlr := 
%prefix (* self) (* self-) 
v_v-self_rule &
 [ ND-AFF +,
   RNAME lotv,
   SYNSEM.PHON.ONSET con,
   C-CONT.RELS <! [ PRED "_self-_a_1_rel" ] !> ].

; <type val="n_n-co_dlr">
; <description>Noun with |co-| prefix           
; <ex>Our co-teacher arrived.
; <nex>
; <todo>
; </type>
n_n-co_dlr := 
%prefix (* co) (* co-)
n_n-co_rule &
 [ ND-AFF +,
   RNAME lnco,
   SYNSEM.PHON.ONSET con,
   C-CONT.RELS <! [ PRED "_co-_a_with_rel" ] !> ].

; <type val="n_n-co-ni_dlr">
; <description>Noun with |co-| prefix, non-inflecting
; <ex>Our co-derivatives group arrived.
; <nex>
; <todo>
; </type>
n_n-co-ni_dlr := 
%prefix (* co) (* co-)
n_n-co-ni_rule &
 [ ND-AFF +,
   RNAME lncon,
   SYNSEM.PHON.ONSET con,
   C-CONT.RELS <! [ PRED "_co-_a_with_rel" ] !> ].

; <type val="n_n-counter_dlr">
; <description>Noun with |counter-| prefix           
; <ex>The counter-proposal arrived.
; <nex>
; <todo>
; </type>
n_n-counter_dlr := 
%prefix (* counter) (* counter-) 
n_n-counter_rule &
 [ ND-AFF +,
   RNAME lctn,
   SYNSEM.PHON.ONSET con,
   C-CONT.RELS <! [ PRED "_counter-_a_anti_rel" ] !> ].

; <type val="n_n-counter-ni_dlr">
; <description>Noun with |counter-| prefix, non-inflecting
; <ex>The counter-narcotics team arrived.
; <nex>
; <todo>
; </type>
n_n-counter-ni_dlr := 
%prefix (* counter) (* counter-) 
n_n-counter-ni_rule &
 [ ND-AFF +,
   RNAME lctnn,
   SYNSEM.PHON.ONSET con,
   C-CONT.RELS <! [ PRED "_counter-_a_anti_rel" ] !> ].

; <type val="j_j-co_dlr">
; <description>Adjective with |co-| prefix           
; <ex>The co-educational hall opened.
; <nex>
; <todo>
; </type>
j_j-co_dlr := 
%prefix (* co-) (* co) 
j_j-co_rule &
 [ ND-AFF +,
   RNAME ljco,
   SYNSEM.PHON.ONSET con,
   C-CONT.RELS <! [ PRED "_co-_a_with_rel" ] !> ].

; <type val="j_j-un_dlr">
; <description>Adjective with |un-| prefix           
; <ex>The unhappy cat arose.
; <nex>
; <todo>
; </type>
j_j-un_dlr := 
%prefix  (* un-) (* un)
j_j-un_rule &
 [ ND-AFF +,
   RNAME lunj,
   SYNSEM.PHON.ONSET voc,
   C-CONT.RELS <! [ PRED "_un-_a_neg_rel" ] !> ].
